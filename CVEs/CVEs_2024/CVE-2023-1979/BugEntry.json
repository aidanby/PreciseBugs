{"buggy_code": ["<?php\n/**\n * Class Stories_Base_Controller\n *\n * @link      https://github.com/googleforcreators/web-stories-wp\n *\n * @copyright 2020 Google LLC\n * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n */\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ndeclare(strict_types = 1);\n\nnamespace Google\\Web_Stories\\REST_API;\n\nuse Google\\Web_Stories\\Decoder;\nuse Google\\Web_Stories\\Services;\nuse stdClass;\nuse WP_Error;\nuse WP_Post;\nuse WP_REST_Posts_Controller;\nuse WP_REST_Request;\nuse WP_REST_Response;\n\n/**\n * Stories_Base_Controller class.\n *\n * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)\n *\n * Override the WP_REST_Posts_Controller class to add `post_content_filtered` to REST request.\n *\n * @phpstan-type Link array{\n *   href?: string,\n *   embeddable?: bool,\n *   taxonomy?: string\n * }\n * @phpstan-type Links array<string, Link|Link[]>\n * @phpstan-type SchemaEntry array{\n *   description: string,\n *   type: string,\n *   context: string[],\n *   default?: mixed,\n * }\n * @phpstan-type Schema array{\n *   properties: array{\n *     content?: SchemaEntry,\n *     story_data?: SchemaEntry\n *   }\n * }\n * @phpstan-type RegisteredMetadata array{\n *   type: string,\n *   description: string,\n *   single: bool,\n *   sanitize_callback?: callable,\n *   auth_callback: callable,\n *   show_in_rest: bool|array{schema: array<string, mixed>},\n *   default?: mixed\n * }\n */\nclass Stories_Base_Controller extends WP_REST_Posts_Controller {\n\t/**\n\t * Decoder instance.\n\t *\n\t * @var Decoder Decoder instance.\n\t */\n\tprivate Decoder $decoder;\n\n\t/**\n\t * Constructor.\n\t *\n\t * Override the namespace.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param string $post_type Post type.\n\t */\n\tpublic function __construct( $post_type ) {\n\t\tparent::__construct( $post_type );\n\n\t\t$injector = Services::get_injector();\n\t\t/**\n\t\t * Decoder instance.\n\t\t *\n\t\t * @var Decoder $decoder Decoder instance.\n\t\t */\n\t\t$decoder = $injector->make( Decoder::class );\n\n\t\t$this->decoder = $decoder;\n\t}\n\n\t/**\n\t * Prepares a single template output for response.\n\t *\n\t * Adds post_content_filtered field to output.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_Post         $post Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $post, $request ): WP_REST_Response {\n\t\t$response = parent::prepare_item_for_response( $post, $request );\n\t\t$fields   = $this->get_fields_for_response( $request );\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->get_item_schema();\n\n\t\t/**\n\t\t * Response data.\n\t\t *\n\t\t * @var array<string,mixed> $data\n\t\t */\n\t\t$data = $response->get_data();\n\n\t\tif ( ! empty( $schema['properties']['story_data'] ) && rest_is_field_included( 'story_data', $fields ) ) {\n\t\t\t$post_story_data    = json_decode( $post->post_content_filtered, true );\n\t\t\t$data['story_data'] = rest_sanitize_value_from_schema( $post_story_data, $schema['properties']['story_data'] );\n\t\t}\n\n\t\t/**\n\t\t * Request context.\n\t\t *\n\t\t * @var string $context\n\t\t */\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\t$links   = $response->get_links();\n\n\t\t// Wrap the data in a response object.\n\t\t$response = new WP_REST_Response( $data );\n\t\tforeach ( $links as $rel => $rel_links ) {\n\t\t\tforeach ( $rel_links as $link ) {\n\t\t\t\t$response->add_link( $rel, $link['href'], $link['attributes'] );\n\t\t\t}\n\t\t}\n\n\t\t/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */\n\t\treturn apply_filters( \"rest_prepare_{$this->post_type}\", $response, $post, $request );\n\t}\n\n\t/**\n\t * Creates a single story.\n\t *\n\t * Override the existing method so we can set parent id.\n\t *\n\t * @since 1.11.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.\n\t */\n\tpublic function create_item( $request ) {\n\t\t/**\n\t\t * Original post ID.\n\t\t *\n\t\t * @var int $original_id\n\t\t */\n\t\t$original_id = ! empty( $request['original_id'] ) ? $request['original_id'] : null;\n\t\tif ( ! $original_id ) {\n\t\t\treturn parent::create_item( $request );\n\t\t}\n\n\t\t$original_post = $this->get_post( $original_id );\n\t\tif ( is_wp_error( $original_post ) ) {\n\t\t\treturn $original_post;\n\t\t}\n\n\t\tif ( ! $this->check_read_permission( $original_post ) ) {\n\t\t\treturn new \\WP_Error(\n\t\t\t\t'rest_cannot_create',\n\t\t\t\t__( 'Sorry, you are not allowed to duplicate this story.', 'web-stories' ),\n\t\t\t\t[ 'status' => rest_authorization_required_code() ]\n\t\t\t);\n\t\t}\n\n\t\t$request->set_param( 'content', $original_post->post_content );\n\t\t$request->set_param( 'excerpt', $original_post->post_excerpt );\n\n\t\t$title = sprintf(\n\t\t\t/* translators: %s: story title. */\n\t\t\t__( '%s (Copy)', 'web-stories' ),\n\t\t\t$original_post->post_title\n\t\t);\n\t\t$request->set_param( 'title', $title );\n\n\t\t$story_data = json_decode( $original_post->post_content_filtered, true );\n\t\tif ( $story_data ) {\n\t\t\t$request->set_param( 'story_data', $story_data );\n\t\t}\n\n\t\t$thumbnail_id = get_post_thumbnail_id( $original_post );\n\t\tif ( $thumbnail_id ) {\n\t\t\t$request->set_param( 'featured_media', $thumbnail_id );\n\t\t}\n\n\t\t$meta = $this->get_registered_meta( $original_post );\n\t\tif ( $meta ) {\n\t\t\t$request->set_param( 'meta', $meta );\n\t\t}\n\n\t\treturn parent::create_item( $request );\n\t}\n\n\t/**\n\t * Retrieves the story's schema, conforming to JSON Schema.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array Item schema data.\n\t *\n\t * @phpstan-return Schema\n\t */\n\tpublic function get_item_schema(): array {\n\t\tif ( $this->schema ) {\n\t\t\t/**\n\t\t\t * Schema.\n\t\t\t *\n\t\t\t * @phpstan-var Schema $schema\n\t\t\t */\n\t\t\t$schema = $this->add_additional_fields_schema( $this->schema );\n\t\t\treturn $schema;\n\t\t}\n\n\t\t$schema = parent::get_item_schema();\n\n\t\t$schema['properties']['story_data'] = [\n\t\t\t'description' => __( 'Story data', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'context'     => [ 'view', 'edit' ],\n\t\t\t'default'     => [],\n\t\t];\n\n\t\t$schema['properties']['original_id'] = [\n\t\t\t'description' => __( 'Unique identifier for original story id.', 'web-stories' ),\n\t\t\t'type'        => 'integer',\n\t\t\t'context'     => [ 'view', 'edit', 'embed' ],\n\t\t];\n\n\t\t$this->schema = $schema;\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->add_additional_fields_schema( $this->schema );\n\t\treturn $schema;\n\t}\n\n\t/**\n\t * Prepares a single story for create or update. Add post_content_filtered field to save/insert.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Request object.\n\t * @return stdClass|WP_Error Post object or WP_Error.\n\t */\n\tprotected function prepare_item_for_database( $request ) {\n\t\t$prepared_post = parent::prepare_item_for_database( $request );\n\n\t\tif ( is_wp_error( $prepared_post ) ) {\n\t\t\treturn $prepared_post;\n\t\t}\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->get_item_schema();\n\n\t\t// Post content.\n\t\tif ( ! empty( $schema['properties']['content'] ) ) {\n\n\t\t\t// Ensure that content and story_data are updated together.\n\t\t\t// Exception: new auto-draft created from a template.\n\t\t\tif (\n\t\t\t\t(\n\t\t\t\t( ! empty( $request['story_data'] ) && empty( $request['content'] ) ) ||\n\t\t\t\t( ! empty( $request['content'] ) && empty( $request['story_data'] ) )\n\t\t\t\t) && ( 'auto-draft' !== $prepared_post->post_status )\n\t\t\t) {\n\t\t\t\treturn new \\WP_Error(\n\t\t\t\t\t'rest_empty_content',\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t/* translators: 1: content, 2: story_data */\n\t\t\t\t\t\t__( '%1$s and %2$s should always be updated together.', 'web-stories' ),\n\t\t\t\t\t\t'content',\n\t\t\t\t\t\t'story_data'\n\t\t\t\t\t),\n\t\t\t\t\t[ 'status' => 412 ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( isset( $request['content'] ) ) {\n\t\t\t\t$prepared_post->post_content = $this->decoder->base64_decode( $prepared_post->post_content );\n\t\t\t}\n\t\t}\n\n\t\t// If the request is updating the content as well, let's make sure the JSON representation of the story is saved, too.\n\t\tif ( ! empty( $schema['properties']['story_data'] ) && isset( $request['story_data'] ) ) {\n\t\t\t$prepared_post->post_content_filtered = wp_json_encode( $request['story_data'] );\n\t\t}\n\n\t\treturn $prepared_post;\n\t}\n\n\t/**\n\t * Get registered post meta.\n\t *\n\t * @since 1.23.0\n\t *\n\t * @param WP_Post $original_post Post Object.\n\t * @return array<string, mixed> $meta\n\t */\n\tprotected function get_registered_meta( WP_Post $original_post ): array {\n\t\t$meta_keys = get_registered_meta_keys( 'post', $this->post_type );\n\t\t$meta      = [];\n\t\t/**\n\t\t * Meta key settings.\n\t\t *\n\t\t * @var array $settings\n\t\t * @phpstan-var RegisteredMetadata $settings\n\t\t */\n\t\tforeach ( $meta_keys as $key => $settings ) {\n\t\t\tif ( $settings['show_in_rest'] ) {\n\t\t\t\t$meta[ $key ] = get_post_meta( $original_post->ID, $key, $settings['single'] );\n\t\t\t}\n\t\t}\n\n\t\treturn $meta;\n\t}\n\n\t/**\n\t * Prepares links for the request.\n\t *\n\t * Ensures that {@see Stories_Users_Controller} is used for author embeds.\n\t *\n\t * @since 1.10.0\n\t *\n\t * @param WP_Post $post Post object.\n\t * @return array Links for the given post.\n\t *\n\t * @phpstan-return Links\n\t */\n\tprotected function prepare_links( $post ): array {\n\t\t$links = parent::prepare_links( $post );\n\n\t\tif ( ! empty( $post->post_author ) && post_type_supports( $post->post_type, 'author' ) ) {\n\t\t\t$links['author'] = [\n\t\t\t\t'href'       => rest_url( sprintf( '%s/%s/%s', $this->namespace, 'users', $post->post_author ) ),\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\t// If we have a featured media, add that.\n\t\t$featured_media = get_post_thumbnail_id( $post->ID );\n\t\tif ( $featured_media ) {\n\t\t\t$image_url = rest_url( sprintf( '%s/%s/%s', $this->namespace, 'media', $featured_media ) );\n\n\t\t\t$links['https://api.w.org/featuredmedia'] = [\n\t\t\t\t'href'       => $image_url,\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\tif ( ! \\in_array( $post->post_type, [ 'attachment', 'nav_menu_item', 'revision' ], true ) ) {\n\t\t\t$attachments_url = rest_url( sprintf( '%s/%s', $this->namespace, 'media' ) );\n\t\t\t$attachments_url = add_query_arg( 'parent', $post->ID, $attachments_url );\n\n\t\t\t$links['https://api.w.org/attachment'] = [\n\t\t\t\t'href' => $attachments_url,\n\t\t\t];\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Get the link relations available for the post and current user.\n\t *\n\t * @since 1.10.0\n\t *\n\t * @param WP_Post         $post    Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return string[] List of link relations.\n\t */\n\tprotected function get_available_actions( $post, $request ): array {\n\t\t$rels = parent::get_available_actions( $post, $request );\n\n\t\tif ( $this->check_delete_permission( $post ) ) {\n\t\t\t$rels[] = 'https://api.w.org/action-delete';\n\t\t}\n\n\t\tif ( $this->check_update_permission( $post ) ) {\n\t\t\t$rels[] = 'https://api.w.org/action-edit';\n\t\t}\n\n\t\treturn $rels;\n\t}\n}\n", "<?php\n/**\n * Class Stories_Controller\n *\n * @link      https://github.com/googleforcreators/web-stories-wp\n *\n * @copyright 2020 Google LLC\n * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n */\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ndeclare(strict_types = 1);\n\nnamespace Google\\Web_Stories\\REST_API;\n\nuse Google\\Web_Stories\\Demo_Content;\nuse Google\\Web_Stories\\Media\\Image_Sizes;\nuse Google\\Web_Stories\\Story_Post_Type;\nuse WP_Error;\nuse WP_Post;\nuse WP_Post_Type;\nuse WP_Query;\nuse WP_REST_Request;\nuse WP_REST_Response;\n\n/**\n * Stories_Controller class.\n *\n * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)\n *\n * @phpstan-type QueryArgs array{\n *   posts_per_page?: int,\n *   post_status?: string[],\n *   tax_query?: array<int|'relation', mixed>\n * }\n * @phpstan-import-type Links from \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller\n */\nclass Stories_Controller extends Stories_Base_Controller {\n\n\t/**\n\t * Default style presets to pass if not set.\n\t */\n\tpublic const EMPTY_STYLE_PRESETS = [\n\t\t'colors'     => [],\n\t\t'textStyles' => [],\n\t];\n\n\t/**\n\t * Query args.\n\t *\n\t * @var array<string,mixed>\n\t * @phpstan-var QueryArgs\n\t */\n\tprivate array $args = [];\n\n\t/**\n\t * Prepares a single story output for response. Add post_content_filtered field to output.\n\t *\n\t * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n\t * @SuppressWarnings(PHPMD.NPathComplexity)\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_Post         $post Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $post, $request ): WP_REST_Response { // phpcs:ignore SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh\n\t\t/**\n\t\t * Request context.\n\t\t *\n\t\t * @var string $context\n\t\t */\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\n\t\tif ( 'auto-draft' === $post->post_status && wp_validate_boolean( $request['web_stories_demo'] ) ) {\n\t\t\t$demo         = new Demo_Content();\n\t\t\t$demo_content = $demo->get_content();\n\t\t\tif ( ! empty( $demo_content ) ) {\n\t\t\t\t$post->post_title            = $demo->get_title();\n\t\t\t\t$post->post_content_filtered = $demo_content;\n\t\t\t}\n\t\t}\n\n\t\t$response = parent::prepare_item_for_response( $post, $request );\n\t\t$fields   = $this->get_fields_for_response( $request );\n\n\t\t/**\n\t\t * Response data.\n\t\t *\n\t\t * @var array<string,mixed> $data\n\t\t */\n\t\t$data = $response->get_data();\n\n\t\tif ( rest_is_field_included( 'style_presets', $fields ) ) {\n\t\t\t$style_presets         = get_option( Story_Post_Type::STYLE_PRESETS_OPTION, self::EMPTY_STYLE_PRESETS );\n\t\t\t$data['style_presets'] = \\is_array( $style_presets ) ? $style_presets : self::EMPTY_STYLE_PRESETS;\n\t\t}\n\n\t\tif ( rest_is_field_included( 'preview_link', $fields ) ) {\n\t\t\t// Based on https://github.com/WordPress/wordpress-develop/blob/8153c8ba020c4aec0b9d94243cd39c689a0730f7/src/wp-admin/includes/post.php#L1445-L1457.\n\t\t\tif ( 'draft' === $post->post_status || empty( $post->post_name ) ) {\n\t\t\t\t$view_link = get_preview_post_link( $post );\n\t\t\t} elseif ( 'publish' === $post->post_status ) {\n\t\t\t\t$view_link = get_permalink( $post );\n\t\t\t} else {\n\t\t\t\tif ( ! \\function_exists( 'get_sample_permalink' ) ) {\n\t\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/post.php';\n\t\t\t\t}\n\n\t\t\t\t[ $permalink ] = get_sample_permalink( $post->ID, $post->post_title, '' );\n\n\t\t\t\t// Allow non-published (private, future) to be viewed at a pretty permalink, in case $post->post_name is set.\n\t\t\t\t$view_link = str_replace( [ '%pagename%', '%postname%' ], $post->post_name, $permalink );\n\t\t\t}\n\n\t\t\t$data['preview_link'] = $view_link;\n\t\t}\n\n\t\tif ( rest_is_field_included( 'edit_link', $fields ) ) {\n\t\t\t$edit_link = get_edit_post_link( $post, 'rest-api' );\n\t\t\tif ( $edit_link ) {\n\t\t\t\t$data['edit_link'] = $edit_link;\n\t\t\t}\n\t\t}\n\n\t\tif ( rest_is_field_included( 'embed_post_link', $fields ) && current_user_can( 'edit_posts' ) ) {\n\t\t\t$data['embed_post_link'] = add_query_arg( [ 'from-web-story' => $post->ID ], admin_url( 'post-new.php' ) );\n\t\t}\n\n\t\tif ( rest_is_field_included( 'story_poster', $fields ) ) {\n\t\t\t$story_poster = $this->get_story_poster( $post );\n\t\t\tif ( $story_poster ) {\n\t\t\t\t$data['story_poster'] = $story_poster;\n\t\t\t}\n\t\t}\n\n\t\t$data  = $this->filter_response_by_context( $data, $context );\n\t\t$links = $response->get_links();\n\n\t\t$response = new WP_REST_Response( $data );\n\t\tforeach ( $links as $rel => $rel_links ) {\n\t\t\tforeach ( $rel_links as $link ) {\n\t\t\t\t$response->add_link( $rel, $link['href'], $link['attributes'] );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the post data for a response.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @param WP_REST_Response $response The response object.\n\t\t * @param WP_Post $post Post object.\n\t\t * @param WP_REST_Request $request Request object.\n\t\t */\n\t\treturn apply_filters( \"rest_prepare_{$this->post_type}\", $response, $post, $request );\n\t}\n\n\t/**\n\t * Updates a single post.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function update_item( $request ) {\n\t\t$response = parent::update_item( $request );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn rest_ensure_response( $response );\n\t\t}\n\n\t\t// If style presets are set.\n\t\t$style_presets = $request->get_param( 'style_presets' );\n\t\tif ( \\is_array( $style_presets ) ) {\n\t\t\tupdate_option( Story_Post_Type::STYLE_PRESETS_OPTION, $style_presets );\n\t\t}\n\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Retrieves the story's schema, conforming to JSON Schema.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array<string, string|array<string, array<string,string|string[]>>> Item schema data.\n\t */\n\tpublic function get_item_schema(): array {\n\t\tif ( $this->schema ) {\n\t\t\treturn $this->add_additional_fields_schema( $this->schema );\n\t\t}\n\n\t\t$schema = parent::get_item_schema();\n\n\t\t$schema['properties']['style_presets'] = [\n\t\t\t'description' => __( 'Style presets used by all stories', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'context'     => [ 'view', 'edit' ],\n\t\t];\n\n\t\t$schema['properties']['preview_link'] = [\n\t\t\t'description' => __( 'Preview Link.', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['edit_link'] = [\n\t\t\t'description' => _x( 'Edit Link', 'compound noun', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['embed_post_link'] = [\n\t\t\t'description' => __( 'Embed Post Edit Link.', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['story_poster'] = [\n\t\t\t'description' => __( 'Story poster image.', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'properties'  => [\n\t\t\t\t'id'         => [\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'description' => __( 'Poster ID', 'web-stories' ),\n\t\t\t\t],\n\t\t\t\t'needsProxy' => [\n\t\t\t\t\t'description' => __( 'If poster needs to be proxied', 'web-stories' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t],\n\t\t\t\t'height'     => [\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'description' => __( 'Poster height', 'web-stories' ),\n\t\t\t\t],\n\t\t\t\t'url'        => [\n\t\t\t\t\t'description' => __( 'Poster URL.', 'web-stories' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t],\n\t\t\t\t'width'      => [\n\t\t\t\t\t'description' => __( 'Poster width.', 'web-stories' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t],\n\t\t\t],\n\t\t\t'default'     => null,\n\t\t];\n\n\t\t$schema['properties']['status']['enum'][] = 'auto-draft';\n\n\t\t$this->schema = $schema;\n\n\t\treturn $this->add_additional_fields_schema( $this->schema );\n\t}\n\n\t/**\n\t * Filters query clauses to sort posts by the author's display name.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param string[] $clauses Associative array of the clauses for the query.\n\t * @param WP_Query $query   The WP_Query instance.\n\t * @return string[] Filtered query clauses.\n\t */\n\tpublic function filter_posts_clauses( $clauses, WP_Query $query ): array {\n\t\tglobal $wpdb;\n\n\t\tif ( $this->post_type !== $query->get( 'post_type' ) ) {\n\t\t\treturn $clauses;\n\t\t}\n\t\tif ( 'story_author' !== $query->get( 'orderby' ) ) {\n\t\t\treturn $clauses;\n\t\t}\n\n\t\t/**\n\t\t * Order value.\n\t\t *\n\t\t * @var string $order\n\t\t */\n\t\t$order = $query->get( 'order' );\n\n\t\t// phpcs:disable WordPressVIPMinimum.Variables.RestrictedVariables.user_meta__wpdb__users\n\t\t$clauses['join']   .= \" LEFT JOIN {$wpdb->users} ON {$wpdb->posts}.post_author={$wpdb->users}.ID\";\n\t\t$clauses['orderby'] = \"{$wpdb->users}.display_name $order, \" . $clauses['orderby'];\n\t\t// phpcs:enable WordPressVIPMinimum.Variables.RestrictedVariables.user_meta__wpdb__users\n\n\t\treturn $clauses;\n\t}\n\n\t/**\n\t * Prime post caches for attachments and parents.\n\t *\n\t * @since 1.21.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return WP_Post[] Array of posts.\n\t */\n\tpublic function prime_post_caches( $posts ): array {\n\t\t$post_ids = $this->get_attached_post_ids( $posts );\n\t\tif ( ! empty( $post_ids ) ) {\n\t\t\t_prime_post_caches( $post_ids );\n\t\t}\n\t\t// Should not be need once WP 6.1 is min required version. https://github.com/WordPress/wordpress-develop/commit/aff6a79b27d529b92e499018433d01d695457b09.\n\t\t$user_ids = $this->get_attached_user_ids( $posts );\n\t\tif ( ! empty( $user_ids ) ) {\n\t\t\tcache_users( $user_ids );\n\t\t}\n\n\t\treturn $posts;\n\t}\n\n\t/**\n\t * Filter the query to cache the value to a class property.\n\t *\n\t * @param array<string, mixed> $args    WP_Query arguments.\n\t * @return array<string, mixed> Current args.\n\t *\n\t * @phpstan-param QueryArgs $args\n\t */\n\tpublic function filter_query( $args ): array {\n\t\t$this->args = $args;\n\n\t\treturn $args;\n\t}\n\t/**\n\t * Retrieves a collection of web stories.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_items( $request ) {\n\t\tadd_filter( \"rest_{$this->post_type}_query\", [ $this, 'filter_query' ], 100, 1 );\n\t\tadd_filter( 'posts_clauses', [ $this, 'filter_posts_clauses' ], 10, 2 );\n\t\tadd_filter( 'posts_results', [ $this, 'prime_post_caches' ] );\n\t\t$response = parent::get_items( $request );\n\t\tremove_filter( 'posts_results', [ $this, 'prime_post_caches' ] );\n\t\tremove_filter( 'posts_clauses', [ $this, 'filter_posts_clauses' ], 10 );\n\t\tremove_filter( \"rest_{$this->post_type}_query\", [ $this, 'filter_query' ], 100 );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( 'edit' !== $request['context'] ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$response = $this->add_response_headers( $response, $request );\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( $request['_web_stories_envelope'] ) {\n\t\t\t/**\n\t\t\t * Embed directive.\n\t\t\t *\n\t\t\t * @var string|string[] $embed\n\t\t\t */\n\t\t\t$embed    = $request['_embed'];\n\t\t\t$embed    = $embed ? rest_parse_embed_param( $embed ) : false;\n\t\t\t$response = rest_get_server()->envelope_response( $response, $embed );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Retrieves the query params for the posts collection.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array<string, array<string, mixed>> Collection parameters.\n\t */\n\tpublic function get_collection_params(): array {\n\t\t$query_params = parent::get_collection_params();\n\n\t\t$query_params['_web_stories_envelope'] = [\n\t\t\t'description' => __( 'Envelope request for preloading.', 'web-stories' ),\n\t\t\t'type'        => 'boolean',\n\t\t\t'default'     => false,\n\t\t];\n\n\t\t$query_params['web_stories_demo'] = [\n\t\t\t'description' => __( 'Load demo data.', 'web-stories' ),\n\t\t\t'type'        => 'boolean',\n\t\t\t'default'     => false,\n\t\t];\n\n\t\tif ( ! empty( $query_params['orderby'] ) ) {\n\t\t\t$query_params['orderby']['enum'][] = 'story_author';\n\t\t}\n\n\t\treturn $query_params;\n\t}\n\n\t/**\n\t * Get an array of attached post objects.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return int[] Array of post ids.\n\t */\n\tprotected function get_attached_user_ids( array $posts ): array {\n\t\t$author_ids = wp_list_pluck( $posts, 'post_author' );\n\t\t$author_ids = array_map( 'absint', $author_ids );\n\n\t\treturn array_unique( array_filter( $author_ids ) );\n\t}\n\n\t/**\n\t * Get an array of attached post objects.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return int[] Array of post ids.\n\t */\n\tprotected function get_attached_post_ids( array $posts ): array {\n\t\t// Post thumbnail should not be needed be primed once WP 6.1 is min version. See https://github.com/WordPress/wordpress-develop/commit/c2de42b9adec84397b4c3e5895809f01880a241a.\n\t\t$thumb_ids     = array_filter( array_map( 'get_post_thumbnail_id', $posts ) );\n\t\t$publisher_ids = array_filter( array_map( [ $this, 'get_publisher_logo_id' ], $posts ) );\n\n\t\treturn array_unique( [ ...$thumb_ids, ...$publisher_ids ] );\n\t}\n\n\t/**\n\t * Add response headers, with post counts.\n\t *\n\t * @SuppressWarnings(PHPMD.NPathComplexity)\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param WP_REST_Response $response Response object.\n\t * @param WP_REST_Request  $request Request object.\n\t * @return WP_REST_Response|WP_Error\n\t */\n\tprotected function add_response_headers( WP_REST_Response $response, WP_REST_Request $request ) {\n\t\t// Add counts for other statuses.\n\t\t$statuses = [\n\t\t\t'publish' => 'publish',\n\t\t];\n\n\t\t$post_type = get_post_type_object( $this->post_type );\n\n\t\tif ( ! ( $post_type instanceof WP_Post_Type ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( current_user_can( $post_type->cap->edit_posts ) ) {\n\t\t\t$statuses['draft']   = 'draft';\n\t\t\t$statuses['future']  = 'future';\n\t\t\t$statuses['pending'] = 'pending';\n\t\t}\n\n\t\tif ( current_user_can( $post_type->cap->publish_posts ) ) {\n\t\t\t$statuses['private'] = 'private';\n\t\t}\n\n\t\t$edit_others_posts  = current_user_can( $post_type->cap->edit_others_posts );\n\t\t$edit_private_posts = current_user_can( $post_type->cap->edit_private_posts );\n\n\t\t$statuses_count = [ 'all' => 0 ];\n\t\t$total_posts    = 0;\n\n\t\t$query_args = $this->prepare_items_query( $this->args, $request );\n\n\t\t// Strip down query for speed.\n\t\t$query_args['fields']                 = 'ids';\n\t\t$query_args['posts_per_page']         = 1;\n\t\t$query_args['paged']                  = 1;\n\t\t$query_args['update_post_meta_cache'] = false;\n\t\t$query_args['update_post_term_cache'] = false;\n\n\t\tforeach ( $statuses as $key => $status ) {\n\t\t\t$posts_query               = new WP_Query();\n\t\t\t$query_args['post_status'] = $status;\n\t\t\tif ( \\in_array( $status, [ 'draft', 'future', 'pending' ], true ) && ! $edit_others_posts ) {\n\t\t\t\t$query_args['author'] = get_current_user_id();\n\t\t\t}\n\t\t\tif ( 'private' === $status && ! $edit_private_posts ) {\n\t\t\t\t$query_args['author'] = get_current_user_id();\n\t\t\t}\n\t\t\t$posts_query->query( $query_args );\n\t\t\t$statuses_count[ $key ] = absint( $posts_query->found_posts );\n\t\t\t$statuses_count['all'] += $statuses_count[ $key ];\n\t\t\tif ( \\in_array( $status, $this->args['post_status'] ?? [], true ) ) {\n\t\t\t\t$total_posts += $statuses_count[ $key ];\n\t\t\t}\n\t\t}\n\n\t\t// Encode the array as headers do not support passing an array.\n\t\t$encoded_statuses = wp_json_encode( $statuses_count );\n\t\tif ( $encoded_statuses ) {\n\t\t\t$response->header( 'X-WP-TotalByStatus', $encoded_statuses );\n\t\t}\n\n\t\t$page      = (int) $posts_query->query_vars['paged'];\n\t\t$max_pages = ceil( $total_posts / (int) ( $this->args['posts_per_page'] ?? 10 ) );\n\n\t\tif ( $page > $max_pages && $total_posts > 0 ) {\n\t\t\treturn new \\WP_Error(\n\t\t\t\t'rest_post_invalid_page_number',\n\t\t\t\t__( 'The page number requested is larger than the number of pages available.', 'web-stories' ),\n\t\t\t\t[ 'status' => 400 ]\n\t\t\t);\n\t\t}\n\n\t\t$response->header( 'X-WP-Total', (string) $total_posts );\n\t\t$response->header( 'X-WP-TotalPages', (string) $max_pages );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Prepares links for the request.\n\t *\n\t * @param WP_Post $post Post object.\n\t * @return array Links for the given post.\n\t *\n\t * @phpstan-return Links\n\t */\n\tprotected function prepare_links( $post ): array {\n\t\t$links = parent::prepare_links( $post );\n\n\t\t$links = $this->add_post_locking_link( $links, $post );\n\t\t$links = $this->add_publisher_logo_link( $links, $post );\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Adds a REST API link if the story is locked.\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param array   $links Links for the given post.\n\t * @param WP_Post $post  Post object.\n\t * @return array Modified list of links.\n\t *\n\t * @phpstan-param Links $links\n\t * @phpstan-return Links\n\t */\n\tprivate function add_post_locking_link( array $links, WP_Post $post ): array {\n\t\t$base     = sprintf( '%s/%s', $this->namespace, $this->rest_base );\n\t\t$lock_url = rest_url( trailingslashit( $base ) . $post->ID . '/lock' );\n\n\t\t$links['https://api.w.org/lock'] = [\n\t\t\t'href'       => $lock_url,\n\t\t\t'embeddable' => true,\n\t\t];\n\n\t\t/**\n\t\t * Lock data.\n\t\t *\n\t\t * @var string|false $lock\n\t\t */\n\t\t$lock = get_post_meta( $post->ID, '_edit_lock', true );\n\n\t\tif ( ! empty( $lock ) ) {\n\t\t\t[ $time, $user ] = explode( ':', $lock );\n\n\t\t\t/** This filter is documented in wp-admin/includes/ajax-actions.php */\n\t\t\t$time_window = apply_filters( 'wp_check_post_lock_window', 150 );\n\n\t\t\tif ( $time && $time > time() - $time_window ) {\n\t\t\t\t$links['https://api.w.org/lockuser'] = [\n\t\t\t\t\t'href'       => rest_url( sprintf( '%s/%s', $this->namespace, 'users/' ) . $user ),\n\t\t\t\t\t'embeddable' => true,\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Helper method to get publisher logo id.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post $post Post Object.\n\t * @return int ID of attachment for publisher logo.\n\t */\n\tprivate function get_publisher_logo_id( WP_Post $post ): int {\n\t\t/**\n\t\t * Publisher logo ID.\n\t\t *\n\t\t * @var string|int $publisher_logo_id\n\t\t */\n\t\t$publisher_logo_id = get_post_meta( $post->ID, Story_Post_Type::PUBLISHER_LOGO_META_KEY, true );\n\n\t\treturn (int) $publisher_logo_id;\n\t}\n\n\t/**\n\t * Adds a REST API link for the story's publisher logo.\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param array   $links Links for the given post.\n\t * @param WP_Post $post Post object.\n\t * @return array Modified list of links.\n\t *\n\t * @phpstan-param Links $links\n\t * @phpstan-return Links\n\t */\n\tprivate function add_publisher_logo_link( array $links, WP_Post $post ): array {\n\t\t$publisher_logo_id = $this->get_publisher_logo_id( $post );\n\n\t\tif ( $publisher_logo_id ) {\n\t\t\t$links['https://api.w.org/publisherlogo'] = [\n\t\t\t\t'href'       => rest_url( sprintf( '%s/%s/%s', $this->namespace, 'media', $publisher_logo_id ) ),\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\n\t/**\n\t * Helper method to get the story poster.\n\t *\n\t * Checks for the regular featured image as well as a hotlinked image.\n\t *\n\t * @since 1.23.2\n\t *\n\t * @param WP_Post $post Post Object.\n\t * @return array{url:string, width: int, height: int, needsProxy: bool, id?: int}|null Story poster data.\n\t */\n\tprivate function get_story_poster( WP_Post $post ): ?array {\n\t\t$thumbnail_id = (int) get_post_thumbnail_id( $post );\n\n\t\tif ( 0 !== $thumbnail_id ) {\n\t\t\t$poster_src = wp_get_attachment_image_src( $thumbnail_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\t\t\tif ( $poster_src ) {\n\t\t\t\t[$url, $width, $height] = $poster_src;\n\n\t\t\t\treturn [\n\t\t\t\t\t'id'         => $thumbnail_id,\n\t\t\t\t\t'url'        => $url,\n\t\t\t\t\t'width'      => $width,\n\t\t\t\t\t'height'     => $height,\n\t\t\t\t\t'needsProxy' => false,\n\t\t\t\t];\n\t\t\t}\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Poster.\n\t\t\t *\n\t\t\t * @var array{url:string, width: int, height: int, needsProxy: bool}|false $poster\n\t\t\t */\n\t\t\t$poster = get_post_meta( $post->ID, Story_Post_Type::POSTER_META_KEY, true );\n\n\t\t\tif ( ! empty( $poster ) ) {\n\t\t\t\treturn $poster;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n", "<?php\n\ndeclare(strict_types = 1);\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nnamespace Google\\Web_Stories\\Tests\\Integration\\REST_API;\n\nuse DateTime;\nuse Google\\Web_Stories\\Media\\Image_Sizes;\nuse Google\\Web_Stories\\Story_Post_Type;\nuse Google\\Web_Stories\\Tests\\Integration\\DependencyInjectedRestTestCase;\nuse WP_REST_Request;\nuse WP_UnitTest_Factory;\n\n/**\n * Class Stories_Controller\n *\n * @coversDefaultClass \\Google\\Web_Stories\\REST_API\\Stories_Controller\n */\nclass Stories_Controller extends DependencyInjectedRestTestCase {\n\n\tprotected static int $user_id;\n\tprotected static int $user2_id;\n\tprotected static int $user3_id;\n\n\tprotected static int $author_id;\n\tprotected static int $contributor_id;\n\n\t/**\n\t * Test instance.\n\t */\n\tprivate \\Google\\Web_Stories\\REST_API\\Stories_Controller $controller;\n\n\tpublic static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ): void {\n\t\tself::$user_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Andrea Adams',\n\t\t\t]\n\t\t);\n\n\t\tself::$user2_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Jane Doe',\n\t\t\t]\n\t\t);\n\n\t\tself::$user3_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Zane Doe',\n\t\t\t]\n\t\t);\n\n\t\tself::$author_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role' => 'author',\n\t\t\t]\n\t\t);\n\n\t\tself::$contributor_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role' => 'contributor',\n\t\t\t]\n\t\t);\n\n\t\t$post_type = Story_Post_Type::POST_TYPE_SLUG;\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user2_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'pending',\n\t\t\t\t'post_author' => self::$user3_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user3_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'draft',\n\t\t\t\t'post_author' => self::$author_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\t}\n\n\tpublic function set_up(): void {\n\t\tparent::set_up();\n\n\t\t$story_post_type = $this->injector->make( Story_Post_Type::class );\n\t\t$story_post_type->register();\n\t\t$this->controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\t}\n\n\tpublic function tear_down(): void {\n\t\t$this->kses_remove_filters();\n\n\t\tparent::tear_down();\n\t}\n\n\t/**\n\t * @covers ::register_routes\n\t */\n\tpublic function test_register_routes(): void {\n\t\t$routes = rest_get_server()->get_routes();\n\n\t\t$this->assertArrayHasKey( '/web-stories/v1/web-story', $routes );\n\t\t$this->assertCount( 2, $routes['/web-stories/v1/web-story'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'status', [ 'draft' ] );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'pending', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 15, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 2, $statuses['pending'] );\n\t\t$this->assertSame( 3, $statuses['future'] );\n\t\t$this->assertSame( 3, $statuses['draft'] );\n\t\t$this->assertSame( 0, $statuses['private'] );\n\n\t\t$this->assertSame( '3', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t */\n\tpublic function test_get_items_no_permission(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayNotHasKey( 'X-WP-TotalByStatus', $headers );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_contributor(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$contributor_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'pending', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayNotHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 7, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 0, $statuses['future'] );\n\t\t$this->assertSame( 0, $statuses['draft'] );\n\n\t\t$this->assertSame( '7', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_author(): void {\n\t\twp_set_current_user( self::$author_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 10, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 0, $statuses['pending'] );\n\t\t$this->assertSame( 0, $statuses['future'] );\n\t\t$this->assertSame( 0, $statuses['private'] );\n\t\t$this->assertSame( 3, $statuses['draft'] );\n\n\t\t$this->assertSame( '7', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'draft',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$view_link = get_preview_post_link( $story );\n\t\t$edit_link = get_edit_post_link( $story, 'rest-api' );\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'preview_link', $data );\n\t\t$this->assertSame( $view_link, $data['preview_link'] );\n\t\t$this->assertArrayHasKey( 'edit_link', $data );\n\t\t$this->assertSame( $edit_link, $data['edit_link'] );\n\t\t$this->assertArrayHasKey( 'embed_post_link', $data );\n\t\t$this->assertStringContainsString( (string) $story, $data['embed_post_link'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item_no_user(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\twp_set_current_user( 0 );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayNotHasKey( 'edit_link', $data );\n\t\t$this->assertArrayNotHasKey( 'preview_link', $data );\n\t\t$this->assertArrayNotHasKey( 'embed_post_link', $data );\n\t}\n\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item_future(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$story   = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\n\t\t$post = get_post( $story );\n\n\t\t$this->assertNotNull( $post );\n\n\t\t[ $permalink ] = get_sample_permalink( $post->ID, $post->post_title, '' );\n\t\t$permalink     = str_replace( [ '%pagename%', '%postname%' ], $post->post_name, $permalink );\n\n\t\t$data = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'preview_link', $data );\n\t\t$this->assertNotEmpty( $data['preview_link'] );\n\t\t$this->assertSame( $permalink, $data['preview_link'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_lock(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story    = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$new_lock = ( time() - 100 ) . ':' . self::$user_id;\n\t\tupdate_post_meta( $story, '_edit_lock', $new_lock );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$links    = $response->get_links();\n\n\t\t$this->assertArrayHasKey( 'https://api.w.org/lockuser', $links );\n\t\t$this->assertArrayHasKey( 'https://api.w.org/lock', $links );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::get_available_actions\n\t */\n\tpublic function test_get_available_actions(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story    = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$new_lock = ( time() - 100 ) . ':' . self::$user_id;\n\t\tupdate_post_meta( $story, '_edit_lock', $new_lock );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$links    = $response->get_links();\n\n\t\t$this->assertArrayHasKey( 'https://api.w.org/action-delete', $links );\n\t\t$this->assertArrayHasKey( 'https://api.w.org/action-edit', $links );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_format(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'status', [ 'draft' ] );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$request->set_param( '_web_stories_envelope', true );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t// Body of request.\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'headers', $data );\n\t\t$this->assertArrayHasKey( 'body', $data );\n\t\t$this->assertArrayHasKey( 'status', $data );\n\n\t\t$statuses = $data['headers']['X-WP-TotalByStatus'];\n\t\t$statuses = json_decode( $statuses, true );\n\n\t\t// Headers.\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( '3', $data['headers']['X-WP-Total'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_no_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayNotHasKey( 'story_poster', $data );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[0], $attachment_src[1] );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[1], $attachment_src[2] );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image_in_admin(): void {\n\t\tglobal $content_width;\n\n\t\t$_content_width            = $content_width;\n\t\t$content_width             = 400;\n\t\t$GLOBALS['current_screen'] = convert_to_screen( Story_Post_Type::POST_TYPE_SLUG );\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$this->controller->register_routes();\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$content_width = $_content_width;\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[0], $attachment_src[1] );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[1], $attachment_src[2] );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_hotlinked_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\tadd_post_meta(\n\t\t\t$story,\n\t\t\tStory_Post_Type::POSTER_META_KEY,\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image_and_hotlinked_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\tadd_post_meta(\n\t\t\t$story,\n\t\t\tStory_Post_Type::POSTER_META_KEY,\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\n\t/**\n\t * @covers ::get_item_schema\n\t */\n\tpublic function test_get_item_schema(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$data = $this->controller->get_item_schema();\n\n\t\t$this->assertArrayHasKey( 'properties', $data );\n\t\t$this->assertIsArray( $data['properties'] );\n\t\t$this->assertArrayHasKey( 'story_data', $data['properties'] );\n\t}\n\n\t/**\n\t * @covers ::filter_posts_clauses\n\t */\n\tpublic function test_filter_posts_by_author_display_names(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'order', 'asc' );\n\t\t$request->set_param( 'orderby', 'story_author' );\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$results = wp_list_pluck( $data, 'author' );\n\n\t\t$this->assertSame(\n\t\t\t[\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user3_id,\n\t\t\t],\n\t\t\t$results,\n\t\t\t'Expected posts ordered by author display names'\n\t\t);\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'order', 'desc' );\n\t\t$request->set_param( 'orderby', 'story_author' );\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$results = wp_list_pluck( $data, 'author' );\n\n\t\t$this->assertSame(\n\t\t\t[\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t],\n\t\t\t$results,\n\t\t\t'Expected posts ordered by author display names'\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_attached_post_ids\n\t */\n\tpublic function test_get_attached_post_ids(): void {\n\t\t$original_id = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'    => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_title'   => 'Example title',\n\t\t\t\t'post_excerpt' => 'Example excerpt',\n\t\t\t\t'post_author'  => self::$user_id,\n\t\t\t\t'post_status'  => 'private',\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id     = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\t\t$publisher_logo_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\t\t$this->assertNotWPError( $publisher_logo_id );\n\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, $publisher_logo_id );\n\n\t\t$posts = [ get_post( $original_id ) ];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [ $attachment_id, $publisher_logo_id ], $result );\n\t}\n\n\t/**\n\t * @covers ::get_attached_post_ids\n\t */\n\tpublic function test_get_attached_post_ids_empty(): void {\n\t\t$posts = [];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [], $result );\n\t}\n\n\n\t/**\n\t * @covers ::get_attached_user_ids\n\t */\n\tpublic function test_get_attached_user_ids(): void {\n\t\t$original_id = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'    => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_title'   => 'Example title',\n\t\t\t\t'post_excerpt' => 'Example excerpt',\n\t\t\t\t'post_author'  => self::$user_id,\n\t\t\t\t'post_status'  => 'private',\n\t\t\t]\n\t\t);\n\n\t\t$posts = [ get_post( $original_id ) ];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_user_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [ self::$user_id ], $result );\n\t}\n\n\t/**\n\t * @covers ::get_attached_user_ids\n\t */\n\tpublic function test_get_attached_user_ids_empty(): void {\n\t\t$posts = [];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [], $result );\n\t}\n\n\t/**\n\t * @covers ::filter_posts_clauses\n\t */\n\tpublic function test_filter_posts_clauses_irrelevant_query(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\n\t\t$initial_clauses = [\n\t\t\t'join'    => '',\n\t\t\t'orderby' => '',\n\t\t];\n\n\t\t$query = new \\WP_Query();\n\t\t$query->set( 'post_type', 'post' );\n\t\t$query->set( 'orderby', 'story_author' );\n\n\t\t$orderby = $controller->filter_posts_clauses( $initial_clauses, $query );\n\t\t$this->assertSame( $orderby, $initial_clauses );\n\n\t\t$query = new \\WP_Query();\n\t\t$query->set( 'post_type', Story_Post_Type::POST_TYPE_SLUG );\n\t\t$query->set( 'orderby', 'author' );\n\n\t\t$orderby = $controller->filter_posts_clauses( $initial_clauses, $query );\n\t\t$this->assertSame( $orderby, $initial_clauses );\n\t}\n\n\t/**\n\t * @covers ::get_collection_params\n\t */\n\tpublic function test_get_collection_params(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\n\t\t$collection_params = $controller->get_collection_params();\n\t\t$this->assertArrayHasKey( '_web_stories_envelope', $collection_params );\n\t\t$this->assertArrayHasKey( 'web_stories_demo', $collection_params );\n\t\t$this->assertArrayHasKey( 'orderby', $collection_params );\n\t\t$this->assertArrayHasKey( 'enum', $collection_params['orderby'] );\n\t\t$this->assertIsArray( $collection_params['orderby'] );\n\t\t$this->assertIsArray( $collection_params['orderby']['enum'] );\n\t\t$this->assertContains( 'story_author', $collection_params['orderby']['enum'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_as_author_should_not_strip_markup(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$author_id );\n\n\t\t$this->kses_int();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = json_decode( (string) file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content_filtered.json' ), true );\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'content'    => $unsanitized_content,\n\t\t\t\t'story_data' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertArrayHasKey( 'content', $new_data );\n\t\t$this->assertSame( $unsanitized_content, $new_data['content']['raw'] );\n\t\t$this->assertSame( $unsanitized_story_data, $new_data['story_data'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t * @covers ::get_registered_meta\n\t */\n\tpublic function test_create_item_duplicate_id(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id     = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\t\t$publisher_logo_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\t\t$this->assertNotWPError( $publisher_logo_id );\n\n\t\t$custom_poster = [\n\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t'width'      => 1000,\n\t\t\t'height'     => 1000,\n\t\t\t'needsProxy' => false,\n\t\t];\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, $publisher_logo_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::POSTER_META_KEY, $custom_poster );\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertArrayHasKey( 'content', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['content'] );\n\t\t$this->assertArrayHasKey( 'title', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['title'] );\n\t\t$this->assertArrayHasKey( 'excerpt', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['excerpt'] );\n\t\t$this->assertArrayHasKey( 'story_data', $new_data );\n\t\t$this->assertArrayHasKey( 'featured_media', $new_data );\n\t\t$this->assertArrayHasKey( 'meta', $new_data );\n\t\t$this->assertArrayHasKey( Story_Post_Type::PUBLISHER_LOGO_META_KEY, $new_data['meta'] );\n\t\t$this->assertArrayHasKey( Story_Post_Type::POSTER_META_KEY, $new_data['meta'] );\n\n\t\t$this->assertSame( 'Example title (Copy)', $new_data['title']['raw'] );\n\t\t$this->assertSame( 'Example excerpt', $new_data['excerpt']['raw'] );\n\t\t$this->assertSame( $attachment_id, $new_data['featured_media'] );\n\t\t$this->assertSame( $publisher_logo_id, $new_data['meta'][ Story_Post_Type::PUBLISHER_LOGO_META_KEY ] );\n\t\t$this->assertSame( $custom_poster, $new_data['meta'][ Story_Post_Type::POSTER_META_KEY ] );\n\t\t$this->assertSame( [ 'pages' => [] ], $new_data['story_data'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t * @covers ::get_registered_meta\n\t */\n\tpublic function test_create_item_duplicate_id_invalid_meta(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, 'wibble' );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::POSTER_META_KEY, -1 );\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_invalid_type', $response, 400 );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_duplicate_id_invalid_id(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => 9999,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_duplicate_id_permission(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_status'           => 'private',\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\n\t\twp_set_current_user( self::$contributor_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_cannot_create', $response, 403 );\n\t}\n\n\t/**\n\t * @covers ::update_item\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::update_item\n\t */\n\tpublic function test_update_item_as_author_should_not_strip_markup(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$author_id );\n\t\t$this->kses_int();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = json_decode( (string) file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content_filtered.json' ), true );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type' => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t]\n\t\t);\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'content'    => $unsanitized_content,\n\t\t\t\t'story_data' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertIsArray( $new_data['content'] );\n\t\t$this->assertSame( $unsanitized_content, $new_data['content']['raw'] );\n\t\t$this->assertSame( $unsanitized_story_data, $new_data['story_data'] );\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Class Stories_Base_Controller\n *\n * @link      https://github.com/googleforcreators/web-stories-wp\n *\n * @copyright 2020 Google LLC\n * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n */\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ndeclare(strict_types = 1);\n\nnamespace Google\\Web_Stories\\REST_API;\n\nuse Google\\Web_Stories\\Decoder;\nuse Google\\Web_Stories\\Services;\nuse stdClass;\nuse WP_Error;\nuse WP_Post;\nuse WP_REST_Posts_Controller;\nuse WP_REST_Request;\nuse WP_REST_Response;\n\n/**\n * Stories_Base_Controller class.\n *\n * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)\n *\n * Override the WP_REST_Posts_Controller class to add `post_content_filtered` to REST request.\n *\n * @phpstan-type Link array{\n *   href?: string,\n *   embeddable?: bool,\n *   taxonomy?: string\n * }\n * @phpstan-type Links array<string, Link|Link[]>\n * @phpstan-type SchemaEntry array{\n *   description: string,\n *   type: string,\n *   context: string[],\n *   default?: mixed,\n * }\n * @phpstan-type Schema array{\n *   properties: array{\n *     content?: SchemaEntry,\n *     story_data?: SchemaEntry\n *   }\n * }\n * @phpstan-type RegisteredMetadata array{\n *   type: string,\n *   description: string,\n *   single: bool,\n *   sanitize_callback?: callable,\n *   auth_callback: callable,\n *   show_in_rest: bool|array{schema: array<string, mixed>},\n *   default?: mixed\n * }\n */\nclass Stories_Base_Controller extends WP_REST_Posts_Controller {\n\t/**\n\t * Decoder instance.\n\t *\n\t * @var Decoder Decoder instance.\n\t */\n\tprivate Decoder $decoder;\n\n\t/**\n\t * Constructor.\n\t *\n\t * Override the namespace.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param string $post_type Post type.\n\t */\n\tpublic function __construct( $post_type ) {\n\t\tparent::__construct( $post_type );\n\n\t\t$injector = Services::get_injector();\n\t\t/**\n\t\t * Decoder instance.\n\t\t *\n\t\t * @var Decoder $decoder Decoder instance.\n\t\t */\n\t\t$decoder = $injector->make( Decoder::class );\n\n\t\t$this->decoder = $decoder;\n\t}\n\n\t/**\n\t * Prepares a single template output for response.\n\t *\n\t * Adds post_content_filtered field to output.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_Post         $post Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $post, $request ): WP_REST_Response {\n\t\t$response = parent::prepare_item_for_response( $post, $request );\n\t\t$fields   = $this->get_fields_for_response( $request );\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->get_item_schema();\n\n\t\t/**\n\t\t * Response data.\n\t\t *\n\t\t * @var array<string,mixed> $data\n\t\t */\n\t\t$data = $response->get_data();\n\n\t\tif ( ! empty( $schema['properties']['story_data'] ) && rest_is_field_included( 'story_data', $fields ) ) {\n\t\t\t$post_story_data    = json_decode( $post->post_content_filtered, true );\n\t\t\t$data['story_data'] = post_password_required( $post ) ? (object) [] : rest_sanitize_value_from_schema( $post_story_data, $schema['properties']['story_data'] );\n\t\t}\n\n\t\t/**\n\t\t * Request context.\n\t\t *\n\t\t * @var string $context\n\t\t */\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\t$links   = $response->get_links();\n\n\t\t// Wrap the data in a response object.\n\t\t$response = new WP_REST_Response( $data );\n\t\tforeach ( $links as $rel => $rel_links ) {\n\t\t\tforeach ( $rel_links as $link ) {\n\t\t\t\t$response->add_link( $rel, $link['href'], $link['attributes'] );\n\t\t\t}\n\t\t}\n\n\t\t/** This filter is documented in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php */\n\t\treturn apply_filters( \"rest_prepare_{$this->post_type}\", $response, $post, $request );\n\t}\n\n\t/**\n\t * Creates a single story.\n\t *\n\t * Override the existing method so we can set parent id.\n\t *\n\t * @since 1.11.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, WP_Error object on failure.\n\t */\n\tpublic function create_item( $request ) {\n\t\t/**\n\t\t * Original post ID.\n\t\t *\n\t\t * @var int $original_id\n\t\t */\n\t\t$original_id = ! empty( $request['original_id'] ) ? $request['original_id'] : null;\n\t\tif ( ! $original_id ) {\n\t\t\treturn parent::create_item( $request );\n\t\t}\n\n\t\t$original_post = $this->get_post( $original_id );\n\t\tif ( is_wp_error( $original_post ) ) {\n\t\t\treturn $original_post;\n\t\t}\n\n\t\tif ( ! $this->check_update_permission( $original_post ) ) {\n\t\t\treturn new \\WP_Error(\n\t\t\t\t'rest_cannot_create',\n\t\t\t\t__( 'Sorry, you are not allowed to duplicate this story.', 'web-stories' ),\n\t\t\t\t[ 'status' => rest_authorization_required_code() ]\n\t\t\t);\n\t\t}\n\n\t\t$request->set_param( 'content', $original_post->post_content );\n\t\t$request->set_param( 'excerpt', $original_post->post_excerpt );\n\n\t\t$title = sprintf(\n\t\t\t/* translators: %s: story title. */\n\t\t\t__( '%s (Copy)', 'web-stories' ),\n\t\t\t$original_post->post_title\n\t\t);\n\t\t$request->set_param( 'title', $title );\n\n\t\t$story_data = json_decode( $original_post->post_content_filtered, true );\n\t\tif ( $story_data ) {\n\t\t\t$request->set_param( 'story_data', $story_data );\n\t\t}\n\n\t\t$thumbnail_id = get_post_thumbnail_id( $original_post );\n\t\tif ( $thumbnail_id ) {\n\t\t\t$request->set_param( 'featured_media', $thumbnail_id );\n\t\t}\n\n\t\t$meta = $this->get_registered_meta( $original_post );\n\t\tif ( $meta ) {\n\t\t\t$request->set_param( 'meta', $meta );\n\t\t}\n\n\t\treturn parent::create_item( $request );\n\t}\n\n\t/**\n\t * Retrieves the story's schema, conforming to JSON Schema.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array Item schema data.\n\t *\n\t * @phpstan-return Schema\n\t */\n\tpublic function get_item_schema(): array {\n\t\tif ( $this->schema ) {\n\t\t\t/**\n\t\t\t * Schema.\n\t\t\t *\n\t\t\t * @phpstan-var Schema $schema\n\t\t\t */\n\t\t\t$schema = $this->add_additional_fields_schema( $this->schema );\n\t\t\treturn $schema;\n\t\t}\n\n\t\t$schema = parent::get_item_schema();\n\n\t\t$schema['properties']['story_data'] = [\n\t\t\t'description' => __( 'Story data', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'context'     => [ 'view', 'edit' ],\n\t\t\t'default'     => [],\n\t\t];\n\n\t\t$schema['properties']['original_id'] = [\n\t\t\t'description' => __( 'Unique identifier for original story id.', 'web-stories' ),\n\t\t\t'type'        => 'integer',\n\t\t\t'context'     => [ 'view', 'edit', 'embed' ],\n\t\t];\n\n\t\t$this->schema = $schema;\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->add_additional_fields_schema( $this->schema );\n\t\treturn $schema;\n\t}\n\n\t/**\n\t * Prepares a single story for create or update. Add post_content_filtered field to save/insert.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Request object.\n\t * @return stdClass|WP_Error Post object or WP_Error.\n\t */\n\tprotected function prepare_item_for_database( $request ) {\n\t\t$prepared_post = parent::prepare_item_for_database( $request );\n\n\t\tif ( is_wp_error( $prepared_post ) ) {\n\t\t\treturn $prepared_post;\n\t\t}\n\n\t\t/**\n\t\t * Schema.\n\t\t *\n\t\t * @phpstan-var Schema $schema\n\t\t */\n\t\t$schema = $this->get_item_schema();\n\n\t\t// Post content.\n\t\tif ( ! empty( $schema['properties']['content'] ) ) {\n\n\t\t\t// Ensure that content and story_data are updated together.\n\t\t\t// Exception: new auto-draft created from a template.\n\t\t\tif (\n\t\t\t\t(\n\t\t\t\t( ! empty( $request['story_data'] ) && empty( $request['content'] ) ) ||\n\t\t\t\t( ! empty( $request['content'] ) && empty( $request['story_data'] ) )\n\t\t\t\t) && ( 'auto-draft' !== $prepared_post->post_status )\n\t\t\t) {\n\t\t\t\treturn new \\WP_Error(\n\t\t\t\t\t'rest_empty_content',\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t/* translators: 1: content, 2: story_data */\n\t\t\t\t\t\t__( '%1$s and %2$s should always be updated together.', 'web-stories' ),\n\t\t\t\t\t\t'content',\n\t\t\t\t\t\t'story_data'\n\t\t\t\t\t),\n\t\t\t\t\t[ 'status' => 412 ]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( isset( $request['content'] ) ) {\n\t\t\t\t$prepared_post->post_content = $this->decoder->base64_decode( $prepared_post->post_content );\n\t\t\t}\n\t\t}\n\n\t\t// If the request is updating the content as well, let's make sure the JSON representation of the story is saved, too.\n\t\tif ( ! empty( $schema['properties']['story_data'] ) && isset( $request['story_data'] ) ) {\n\t\t\t$prepared_post->post_content_filtered = wp_json_encode( $request['story_data'] );\n\t\t}\n\n\t\treturn $prepared_post;\n\t}\n\n\t/**\n\t * Get registered post meta.\n\t *\n\t * @since 1.23.0\n\t *\n\t * @param WP_Post $original_post Post Object.\n\t * @return array<string, mixed> $meta\n\t */\n\tprotected function get_registered_meta( WP_Post $original_post ): array {\n\t\t$meta_keys = get_registered_meta_keys( 'post', $this->post_type );\n\t\t$meta      = [];\n\t\t/**\n\t\t * Meta key settings.\n\t\t *\n\t\t * @var array $settings\n\t\t * @phpstan-var RegisteredMetadata $settings\n\t\t */\n\t\tforeach ( $meta_keys as $key => $settings ) {\n\t\t\tif ( $settings['show_in_rest'] ) {\n\t\t\t\t$meta[ $key ] = get_post_meta( $original_post->ID, $key, $settings['single'] );\n\t\t\t}\n\t\t}\n\n\t\treturn $meta;\n\t}\n\n\t/**\n\t * Prepares links for the request.\n\t *\n\t * Ensures that {@see Stories_Users_Controller} is used for author embeds.\n\t *\n\t * @since 1.10.0\n\t *\n\t * @param WP_Post $post Post object.\n\t * @return array Links for the given post.\n\t *\n\t * @phpstan-return Links\n\t */\n\tprotected function prepare_links( $post ): array {\n\t\t$links = parent::prepare_links( $post );\n\n\t\tif ( ! empty( $post->post_author ) && post_type_supports( $post->post_type, 'author' ) ) {\n\t\t\t$links['author'] = [\n\t\t\t\t'href'       => rest_url( sprintf( '%s/%s/%s', $this->namespace, 'users', $post->post_author ) ),\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\t// If we have a featured media, add that.\n\t\t$featured_media = get_post_thumbnail_id( $post->ID );\n\t\tif ( $featured_media ) {\n\t\t\t$image_url = rest_url( sprintf( '%s/%s/%s', $this->namespace, 'media', $featured_media ) );\n\n\t\t\t$links['https://api.w.org/featuredmedia'] = [\n\t\t\t\t'href'       => $image_url,\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\tif ( ! \\in_array( $post->post_type, [ 'attachment', 'nav_menu_item', 'revision' ], true ) ) {\n\t\t\t$attachments_url = rest_url( sprintf( '%s/%s', $this->namespace, 'media' ) );\n\t\t\t$attachments_url = add_query_arg( 'parent', $post->ID, $attachments_url );\n\n\t\t\t$links['https://api.w.org/attachment'] = [\n\t\t\t\t'href' => $attachments_url,\n\t\t\t];\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Get the link relations available for the post and current user.\n\t *\n\t * @since 1.10.0\n\t *\n\t * @param WP_Post         $post    Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return string[] List of link relations.\n\t */\n\tprotected function get_available_actions( $post, $request ): array {\n\t\t$rels = parent::get_available_actions( $post, $request );\n\n\t\tif ( $this->check_delete_permission( $post ) ) {\n\t\t\t$rels[] = 'https://api.w.org/action-delete';\n\t\t}\n\n\t\tif ( $this->check_update_permission( $post ) ) {\n\t\t\t$rels[] = 'https://api.w.org/action-edit';\n\t\t}\n\n\t\treturn $rels;\n\t}\n}\n", "<?php\n/**\n * Class Stories_Controller\n *\n * @link      https://github.com/googleforcreators/web-stories-wp\n *\n * @copyright 2020 Google LLC\n * @license   https://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0\n */\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ndeclare(strict_types = 1);\n\nnamespace Google\\Web_Stories\\REST_API;\n\nuse Google\\Web_Stories\\Demo_Content;\nuse Google\\Web_Stories\\Media\\Image_Sizes;\nuse Google\\Web_Stories\\Story_Post_Type;\nuse WP_Error;\nuse WP_Post;\nuse WP_Post_Type;\nuse WP_Query;\nuse WP_REST_Request;\nuse WP_REST_Response;\n\n/**\n * Stories_Controller class.\n *\n * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)\n *\n * @phpstan-type QueryArgs array{\n *   posts_per_page?: int,\n *   post_status?: string[],\n *   tax_query?: array<int|'relation', mixed>\n * }\n * @phpstan-import-type Links from \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller\n */\nclass Stories_Controller extends Stories_Base_Controller {\n\n\t/**\n\t * Default style presets to pass if not set.\n\t */\n\tpublic const EMPTY_STYLE_PRESETS = [\n\t\t'colors'     => [],\n\t\t'textStyles' => [],\n\t];\n\n\t/**\n\t * Query args.\n\t *\n\t * @var array<string,mixed>\n\t * @phpstan-var QueryArgs\n\t */\n\tprivate array $args = [];\n\n\t/**\n\t * Prepares a single story output for response. Add post_content_filtered field to output.\n\t *\n\t * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n\t * @SuppressWarnings(PHPMD.NPathComplexity)\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_Post         $post Post object.\n\t * @param WP_REST_Request $request Request object.\n\t * @return WP_REST_Response Response object.\n\t */\n\tpublic function prepare_item_for_response( $post, $request ): WP_REST_Response { // phpcs:ignore SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh\n\t\t/**\n\t\t * Request context.\n\t\t *\n\t\t * @var string $context\n\t\t */\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\n\t\tif ( 'auto-draft' === $post->post_status && wp_validate_boolean( $request['web_stories_demo'] ) ) {\n\t\t\t$demo         = new Demo_Content();\n\t\t\t$demo_content = $demo->get_content();\n\t\t\tif ( ! empty( $demo_content ) ) {\n\t\t\t\t$post->post_title            = $demo->get_title();\n\t\t\t\t$post->post_content_filtered = $demo_content;\n\t\t\t}\n\t\t}\n\n\t\t$response = parent::prepare_item_for_response( $post, $request );\n\t\t$fields   = $this->get_fields_for_response( $request );\n\n\t\t/**\n\t\t * Response data.\n\t\t *\n\t\t * @var array<string,mixed> $data\n\t\t */\n\t\t$data = $response->get_data();\n\n\t\tif ( rest_is_field_included( 'style_presets', $fields ) ) {\n\t\t\t$style_presets         = get_option( Story_Post_Type::STYLE_PRESETS_OPTION, self::EMPTY_STYLE_PRESETS );\n\t\t\t$data['style_presets'] = \\is_array( $style_presets ) ? $style_presets : self::EMPTY_STYLE_PRESETS;\n\t\t}\n\n\t\tif ( rest_is_field_included( 'preview_link', $fields ) ) {\n\t\t\t// Based on https://github.com/WordPress/wordpress-develop/blob/8153c8ba020c4aec0b9d94243cd39c689a0730f7/src/wp-admin/includes/post.php#L1445-L1457.\n\t\t\tif ( 'draft' === $post->post_status || empty( $post->post_name ) ) {\n\t\t\t\t$view_link = get_preview_post_link( $post );\n\t\t\t} elseif ( 'publish' === $post->post_status ) {\n\t\t\t\t$view_link = get_permalink( $post );\n\t\t\t} else {\n\t\t\t\tif ( ! \\function_exists( 'get_sample_permalink' ) ) {\n\t\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/post.php';\n\t\t\t\t}\n\n\t\t\t\t[ $permalink ] = get_sample_permalink( $post->ID, $post->post_title, '' );\n\n\t\t\t\t// Allow non-published (private, future) to be viewed at a pretty permalink, in case $post->post_name is set.\n\t\t\t\t$view_link = str_replace( [ '%pagename%', '%postname%' ], $post->post_name, $permalink );\n\t\t\t}\n\n\t\t\t$data['preview_link'] = $view_link;\n\t\t}\n\n\t\tif ( rest_is_field_included( 'edit_link', $fields ) ) {\n\t\t\t$edit_link = get_edit_post_link( $post, 'rest-api' );\n\t\t\tif ( $edit_link ) {\n\t\t\t\t$data['edit_link'] = $edit_link;\n\t\t\t}\n\t\t}\n\n\t\tif ( rest_is_field_included( 'embed_post_link', $fields ) && current_user_can( 'edit_posts' ) ) {\n\t\t\t$data['embed_post_link'] = add_query_arg( [ 'from-web-story' => $post->ID ], admin_url( 'post-new.php' ) );\n\t\t}\n\n\t\tif ( rest_is_field_included( 'story_poster', $fields ) ) {\n\t\t\t$story_poster = $this->get_story_poster( $post );\n\t\t\tif ( $story_poster ) {\n\t\t\t\t$data['story_poster'] = $story_poster;\n\t\t\t}\n\t\t}\n\n\t\t$data  = $this->filter_response_by_context( $data, $context );\n\t\t$links = $response->get_links();\n\n\t\t$response = new WP_REST_Response( $data );\n\t\tforeach ( $links as $rel => $rel_links ) {\n\t\t\tforeach ( $rel_links as $link ) {\n\t\t\t\t$response->add_link( $rel, $link['href'], $link['attributes'] );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the post data for a response.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$this->post_type`, refers to the post type slug.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @param WP_REST_Response $response The response object.\n\t\t * @param WP_Post $post Post object.\n\t\t * @param WP_REST_Request $request Request object.\n\t\t */\n\t\treturn apply_filters( \"rest_prepare_{$this->post_type}\", $response, $post, $request );\n\t}\n\n\t/**\n\t * Updates a single post.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function update_item( $request ) {\n\t\t$response = parent::update_item( $request );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn rest_ensure_response( $response );\n\t\t}\n\n\t\t// If style presets are set.\n\t\t$style_presets = $request->get_param( 'style_presets' );\n\t\tif ( \\is_array( $style_presets ) ) {\n\t\t\tupdate_option( Story_Post_Type::STYLE_PRESETS_OPTION, $style_presets );\n\t\t}\n\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Retrieves the story's schema, conforming to JSON Schema.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array<string, string|array<string, array<string,string|string[]>>> Item schema data.\n\t */\n\tpublic function get_item_schema(): array {\n\t\tif ( $this->schema ) {\n\t\t\treturn $this->add_additional_fields_schema( $this->schema );\n\t\t}\n\n\t\t$schema = parent::get_item_schema();\n\n\t\t$schema['properties']['style_presets'] = [\n\t\t\t'description' => __( 'Style presets used by all stories', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'context'     => [ 'edit' ],\n\t\t];\n\n\t\t$schema['properties']['preview_link'] = [\n\t\t\t'description' => __( 'Preview Link.', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['edit_link'] = [\n\t\t\t'description' => _x( 'Edit Link', 'compound noun', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['embed_post_link'] = [\n\t\t\t'description' => __( 'Embed Post Edit Link.', 'web-stories' ),\n\t\t\t'type'        => 'string',\n\t\t\t'context'     => [ 'edit' ],\n\t\t\t'format'      => 'uri',\n\t\t\t'default'     => '',\n\t\t];\n\n\t\t$schema['properties']['story_poster'] = [\n\t\t\t'description' => __( 'Story poster image.', 'web-stories' ),\n\t\t\t'type'        => 'object',\n\t\t\t'properties'  => [\n\t\t\t\t'id'         => [\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'description' => __( 'Poster ID', 'web-stories' ),\n\t\t\t\t],\n\t\t\t\t'needsProxy' => [\n\t\t\t\t\t'description' => __( 'If poster needs to be proxied', 'web-stories' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t],\n\t\t\t\t'height'     => [\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'description' => __( 'Poster height', 'web-stories' ),\n\t\t\t\t],\n\t\t\t\t'url'        => [\n\t\t\t\t\t'description' => __( 'Poster URL.', 'web-stories' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t],\n\t\t\t\t'width'      => [\n\t\t\t\t\t'description' => __( 'Poster width.', 'web-stories' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t],\n\t\t\t],\n\t\t\t'default'     => null,\n\t\t];\n\n\t\t$schema['properties']['status']['enum'][] = 'auto-draft';\n\n\t\t$this->schema = $schema;\n\n\t\treturn $this->add_additional_fields_schema( $this->schema );\n\t}\n\n\t/**\n\t * Filters query clauses to sort posts by the author's display name.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param string[] $clauses Associative array of the clauses for the query.\n\t * @param WP_Query $query   The WP_Query instance.\n\t * @return string[] Filtered query clauses.\n\t */\n\tpublic function filter_posts_clauses( $clauses, WP_Query $query ): array {\n\t\tglobal $wpdb;\n\n\t\tif ( $this->post_type !== $query->get( 'post_type' ) ) {\n\t\t\treturn $clauses;\n\t\t}\n\t\tif ( 'story_author' !== $query->get( 'orderby' ) ) {\n\t\t\treturn $clauses;\n\t\t}\n\n\t\t/**\n\t\t * Order value.\n\t\t *\n\t\t * @var string $order\n\t\t */\n\t\t$order = $query->get( 'order' );\n\n\t\t// phpcs:disable WordPressVIPMinimum.Variables.RestrictedVariables.user_meta__wpdb__users\n\t\t$clauses['join']   .= \" LEFT JOIN {$wpdb->users} ON {$wpdb->posts}.post_author={$wpdb->users}.ID\";\n\t\t$clauses['orderby'] = \"{$wpdb->users}.display_name $order, \" . $clauses['orderby'];\n\t\t// phpcs:enable WordPressVIPMinimum.Variables.RestrictedVariables.user_meta__wpdb__users\n\n\t\treturn $clauses;\n\t}\n\n\t/**\n\t * Prime post caches for attachments and parents.\n\t *\n\t * @since 1.21.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return WP_Post[] Array of posts.\n\t */\n\tpublic function prime_post_caches( $posts ): array {\n\t\t$post_ids = $this->get_attached_post_ids( $posts );\n\t\tif ( ! empty( $post_ids ) ) {\n\t\t\t_prime_post_caches( $post_ids );\n\t\t}\n\t\t// Should not be need once WP 6.1 is min required version. https://github.com/WordPress/wordpress-develop/commit/aff6a79b27d529b92e499018433d01d695457b09.\n\t\t$user_ids = $this->get_attached_user_ids( $posts );\n\t\tif ( ! empty( $user_ids ) ) {\n\t\t\tcache_users( $user_ids );\n\t\t}\n\n\t\treturn $posts;\n\t}\n\n\t/**\n\t * Filter the query to cache the value to a class property.\n\t *\n\t * @param array<string, mixed> $args    WP_Query arguments.\n\t * @return array<string, mixed> Current args.\n\t *\n\t * @phpstan-param QueryArgs $args\n\t */\n\tpublic function filter_query( $args ): array {\n\t\t$this->args = $args;\n\n\t\treturn $args;\n\t}\n\t/**\n\t * Retrieves a collection of web stories.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n\t */\n\tpublic function get_items( $request ) {\n\t\tadd_filter( \"rest_{$this->post_type}_query\", [ $this, 'filter_query' ], 100, 1 );\n\t\tadd_filter( 'posts_clauses', [ $this, 'filter_posts_clauses' ], 10, 2 );\n\t\tadd_filter( 'posts_results', [ $this, 'prime_post_caches' ] );\n\t\t$response = parent::get_items( $request );\n\t\tremove_filter( 'posts_results', [ $this, 'prime_post_caches' ] );\n\t\tremove_filter( 'posts_clauses', [ $this, 'filter_posts_clauses' ], 10 );\n\t\tremove_filter( \"rest_{$this->post_type}_query\", [ $this, 'filter_query' ], 100 );\n\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( 'edit' !== $request['context'] ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$response = $this->add_response_headers( $response, $request );\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( $request['_web_stories_envelope'] ) {\n\t\t\t/**\n\t\t\t * Embed directive.\n\t\t\t *\n\t\t\t * @var string|string[] $embed\n\t\t\t */\n\t\t\t$embed    = $request['_embed'];\n\t\t\t$embed    = $embed ? rest_parse_embed_param( $embed ) : false;\n\t\t\t$response = rest_get_server()->envelope_response( $response, $embed );\n\t\t}\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Retrieves the query params for the posts collection.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @return array<string, array<string, mixed>> Collection parameters.\n\t */\n\tpublic function get_collection_params(): array {\n\t\t$query_params = parent::get_collection_params();\n\n\t\t$query_params['_web_stories_envelope'] = [\n\t\t\t'description' => __( 'Envelope request for preloading.', 'web-stories' ),\n\t\t\t'type'        => 'boolean',\n\t\t\t'default'     => false,\n\t\t];\n\n\t\t$query_params['web_stories_demo'] = [\n\t\t\t'description' => __( 'Load demo data.', 'web-stories' ),\n\t\t\t'type'        => 'boolean',\n\t\t\t'default'     => false,\n\t\t];\n\n\t\tif ( ! empty( $query_params['orderby'] ) ) {\n\t\t\t$query_params['orderby']['enum'][] = 'story_author';\n\t\t}\n\n\t\treturn $query_params;\n\t}\n\n\t/**\n\t * Get an array of attached post objects.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return int[] Array of post ids.\n\t */\n\tprotected function get_attached_user_ids( array $posts ): array {\n\t\t$author_ids = wp_list_pluck( $posts, 'post_author' );\n\t\t$author_ids = array_map( 'absint', $author_ids );\n\n\t\treturn array_unique( array_filter( $author_ids ) );\n\t}\n\n\t/**\n\t * Get an array of attached post objects.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post[] $posts Array of post objects.\n\t * @return int[] Array of post ids.\n\t */\n\tprotected function get_attached_post_ids( array $posts ): array {\n\t\t// Post thumbnail should not be needed be primed once WP 6.1 is min version. See https://github.com/WordPress/wordpress-develop/commit/c2de42b9adec84397b4c3e5895809f01880a241a.\n\t\t$thumb_ids     = array_filter( array_map( 'get_post_thumbnail_id', $posts ) );\n\t\t$publisher_ids = array_filter( array_map( [ $this, 'get_publisher_logo_id' ], $posts ) );\n\n\t\treturn array_unique( [ ...$thumb_ids, ...$publisher_ids ] );\n\t}\n\n\t/**\n\t * Add response headers, with post counts.\n\t *\n\t * @SuppressWarnings(PHPMD.NPathComplexity)\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param WP_REST_Response $response Response object.\n\t * @param WP_REST_Request  $request Request object.\n\t * @return WP_REST_Response|WP_Error\n\t */\n\tprotected function add_response_headers( WP_REST_Response $response, WP_REST_Request $request ) {\n\t\t// Add counts for other statuses.\n\t\t$statuses = [\n\t\t\t'publish' => 'publish',\n\t\t];\n\n\t\t$post_type = get_post_type_object( $this->post_type );\n\n\t\tif ( ! ( $post_type instanceof WP_Post_Type ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( current_user_can( $post_type->cap->edit_posts ) ) {\n\t\t\t$statuses['draft']   = 'draft';\n\t\t\t$statuses['future']  = 'future';\n\t\t\t$statuses['pending'] = 'pending';\n\t\t}\n\n\t\tif ( current_user_can( $post_type->cap->publish_posts ) ) {\n\t\t\t$statuses['private'] = 'private';\n\t\t}\n\n\t\t$edit_others_posts  = current_user_can( $post_type->cap->edit_others_posts );\n\t\t$edit_private_posts = current_user_can( $post_type->cap->edit_private_posts );\n\n\t\t$statuses_count = [ 'all' => 0 ];\n\t\t$total_posts    = 0;\n\n\t\t$query_args = $this->prepare_items_query( $this->args, $request );\n\n\t\t// Strip down query for speed.\n\t\t$query_args['fields']                 = 'ids';\n\t\t$query_args['posts_per_page']         = 1;\n\t\t$query_args['paged']                  = 1;\n\t\t$query_args['update_post_meta_cache'] = false;\n\t\t$query_args['update_post_term_cache'] = false;\n\n\t\tforeach ( $statuses as $key => $status ) {\n\t\t\t$posts_query               = new WP_Query();\n\t\t\t$query_args['post_status'] = $status;\n\t\t\tif ( \\in_array( $status, [ 'draft', 'future', 'pending' ], true ) && ! $edit_others_posts ) {\n\t\t\t\t$query_args['author'] = get_current_user_id();\n\t\t\t}\n\t\t\tif ( 'private' === $status && ! $edit_private_posts ) {\n\t\t\t\t$query_args['author'] = get_current_user_id();\n\t\t\t}\n\t\t\t$posts_query->query( $query_args );\n\t\t\t$statuses_count[ $key ] = absint( $posts_query->found_posts );\n\t\t\t$statuses_count['all'] += $statuses_count[ $key ];\n\t\t\tif ( \\in_array( $status, $this->args['post_status'] ?? [], true ) ) {\n\t\t\t\t$total_posts += $statuses_count[ $key ];\n\t\t\t}\n\t\t}\n\n\t\t// Encode the array as headers do not support passing an array.\n\t\t$encoded_statuses = wp_json_encode( $statuses_count );\n\t\tif ( $encoded_statuses ) {\n\t\t\t$response->header( 'X-WP-TotalByStatus', $encoded_statuses );\n\t\t}\n\n\t\t$page      = (int) $posts_query->query_vars['paged'];\n\t\t$max_pages = ceil( $total_posts / (int) ( $this->args['posts_per_page'] ?? 10 ) );\n\n\t\tif ( $page > $max_pages && $total_posts > 0 ) {\n\t\t\treturn new \\WP_Error(\n\t\t\t\t'rest_post_invalid_page_number',\n\t\t\t\t__( 'The page number requested is larger than the number of pages available.', 'web-stories' ),\n\t\t\t\t[ 'status' => 400 ]\n\t\t\t);\n\t\t}\n\n\t\t$response->header( 'X-WP-Total', (string) $total_posts );\n\t\t$response->header( 'X-WP-TotalPages', (string) $max_pages );\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Prepares links for the request.\n\t *\n\t * @param WP_Post $post Post object.\n\t * @return array Links for the given post.\n\t *\n\t * @phpstan-return Links\n\t */\n\tprotected function prepare_links( $post ): array {\n\t\t$links = parent::prepare_links( $post );\n\n\t\t$links = $this->add_post_locking_link( $links, $post );\n\t\t$links = $this->add_publisher_logo_link( $links, $post );\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Adds a REST API link if the story is locked.\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param array   $links Links for the given post.\n\t * @param WP_Post $post  Post object.\n\t * @return array Modified list of links.\n\t *\n\t * @phpstan-param Links $links\n\t * @phpstan-return Links\n\t */\n\tprivate function add_post_locking_link( array $links, WP_Post $post ): array {\n\t\t$base     = sprintf( '%s/%s', $this->namespace, $this->rest_base );\n\t\t$lock_url = rest_url( trailingslashit( $base ) . $post->ID . '/lock' );\n\n\t\t$links['https://api.w.org/lock'] = [\n\t\t\t'href'       => $lock_url,\n\t\t\t'embeddable' => true,\n\t\t];\n\n\t\t/**\n\t\t * Lock data.\n\t\t *\n\t\t * @var string|false $lock\n\t\t */\n\t\t$lock = get_post_meta( $post->ID, '_edit_lock', true );\n\n\t\tif ( ! empty( $lock ) ) {\n\t\t\t[ $time, $user ] = explode( ':', $lock );\n\n\t\t\t/** This filter is documented in wp-admin/includes/ajax-actions.php */\n\t\t\t$time_window = apply_filters( 'wp_check_post_lock_window', 150 );\n\n\t\t\tif ( $time && $time > time() - $time_window ) {\n\t\t\t\t$links['https://api.w.org/lockuser'] = [\n\t\t\t\t\t'href'       => rest_url( sprintf( '%s/%s', $this->namespace, 'users/' ) . $user ),\n\t\t\t\t\t'embeddable' => true,\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Helper method to get publisher logo id.\n\t *\n\t * @since 1.22.0\n\t *\n\t * @param WP_Post $post Post Object.\n\t * @return int ID of attachment for publisher logo.\n\t */\n\tprivate function get_publisher_logo_id( WP_Post $post ): int {\n\t\t/**\n\t\t * Publisher logo ID.\n\t\t *\n\t\t * @var string|int $publisher_logo_id\n\t\t */\n\t\t$publisher_logo_id = get_post_meta( $post->ID, Story_Post_Type::PUBLISHER_LOGO_META_KEY, true );\n\n\t\treturn (int) $publisher_logo_id;\n\t}\n\n\t/**\n\t * Adds a REST API link for the story's publisher logo.\n\t *\n\t * @since 1.12.0\n\t *\n\t * @param array   $links Links for the given post.\n\t * @param WP_Post $post Post object.\n\t * @return array Modified list of links.\n\t *\n\t * @phpstan-param Links $links\n\t * @phpstan-return Links\n\t */\n\tprivate function add_publisher_logo_link( array $links, WP_Post $post ): array {\n\t\t$publisher_logo_id = $this->get_publisher_logo_id( $post );\n\n\t\tif ( $publisher_logo_id ) {\n\t\t\t$links['https://api.w.org/publisherlogo'] = [\n\t\t\t\t'href'       => rest_url( sprintf( '%s/%s/%s', $this->namespace, 'media', $publisher_logo_id ) ),\n\t\t\t\t'embeddable' => true,\n\t\t\t];\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\n\t/**\n\t * Helper method to get the story poster.\n\t *\n\t * Checks for the regular featured image as well as a hotlinked image.\n\t *\n\t * @since 1.23.2\n\t *\n\t * @param WP_Post $post Post Object.\n\t * @return array{url:string, width: int, height: int, needsProxy: bool, id?: int}|null Story poster data.\n\t */\n\tprivate function get_story_poster( WP_Post $post ): ?array {\n\t\t$thumbnail_id = (int) get_post_thumbnail_id( $post );\n\n\t\tif ( 0 !== $thumbnail_id ) {\n\t\t\t$poster_src = wp_get_attachment_image_src( $thumbnail_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\t\t\tif ( $poster_src ) {\n\t\t\t\t[$url, $width, $height] = $poster_src;\n\n\t\t\t\treturn [\n\t\t\t\t\t'id'         => $thumbnail_id,\n\t\t\t\t\t'url'        => $url,\n\t\t\t\t\t'width'      => $width,\n\t\t\t\t\t'height'     => $height,\n\t\t\t\t\t'needsProxy' => false,\n\t\t\t\t];\n\t\t\t}\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Poster.\n\t\t\t *\n\t\t\t * @var array{url:string, width: int, height: int, needsProxy: bool}|false $poster\n\t\t\t */\n\t\t\t$poster = get_post_meta( $post->ID, Story_Post_Type::POSTER_META_KEY, true );\n\n\t\t\tif ( ! empty( $poster ) ) {\n\t\t\t\treturn $poster;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n", "<?php\n\ndeclare(strict_types = 1);\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nnamespace Google\\Web_Stories\\Tests\\Integration\\REST_API;\n\nuse DateTime;\nuse Google\\Web_Stories\\Media\\Image_Sizes;\nuse Google\\Web_Stories\\Story_Post_Type;\nuse Google\\Web_Stories\\Tests\\Integration\\DependencyInjectedRestTestCase;\nuse WP_REST_Request;\nuse WP_UnitTest_Factory;\n\n/**\n * Class Stories_Controller\n *\n * @coversDefaultClass \\Google\\Web_Stories\\REST_API\\Stories_Controller\n */\nclass Stories_Controller extends DependencyInjectedRestTestCase {\n\n\tprotected static int $user_id;\n\tprotected static int $user2_id;\n\tprotected static int $user3_id;\n\n\tprotected static int $author_id;\n\tprotected static int $contributor_id;\n\n\t/**\n\t * Test instance.\n\t */\n\tprivate \\Google\\Web_Stories\\REST_API\\Stories_Controller $controller;\n\n\tpublic static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ): void {\n\t\tself::$user_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Andrea Adams',\n\t\t\t]\n\t\t);\n\n\t\tself::$user2_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Jane Doe',\n\t\t\t]\n\t\t);\n\n\t\tself::$user3_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role'         => 'administrator',\n\t\t\t\t'display_name' => 'Zane Doe',\n\t\t\t]\n\t\t);\n\n\t\tself::$author_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role' => 'author',\n\t\t\t]\n\t\t);\n\n\t\tself::$contributor_id = $factory->user->create(\n\t\t\t[\n\t\t\t\t'role' => 'contributor',\n\t\t\t]\n\t\t);\n\n\t\t$post_type = Story_Post_Type::POST_TYPE_SLUG;\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user2_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'pending',\n\t\t\t\t'post_author' => self::$user3_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t2,\n\t\t\t[\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user3_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\n\t\t$factory->post->create_many(\n\t\t\t3,\n\t\t\t[\n\t\t\t\t'post_status' => 'draft',\n\t\t\t\t'post_author' => self::$author_id,\n\t\t\t\t'post_type'   => $post_type,\n\t\t\t]\n\t\t);\n\t}\n\n\tpublic function set_up(): void {\n\t\tparent::set_up();\n\n\t\t$story_post_type = $this->injector->make( Story_Post_Type::class );\n\t\t$story_post_type->register();\n\t\t$this->controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\t}\n\n\tpublic function tear_down(): void {\n\t\t$this->kses_remove_filters();\n\n\t\tparent::tear_down();\n\t}\n\n\t/**\n\t * @covers ::register_routes\n\t */\n\tpublic function test_register_routes(): void {\n\t\t$routes = rest_get_server()->get_routes();\n\n\t\t$this->assertArrayHasKey( '/web-stories/v1/web-story', $routes );\n\t\t$this->assertCount( 2, $routes['/web-stories/v1/web-story'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'status', [ 'draft' ] );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'pending', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 15, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 2, $statuses['pending'] );\n\t\t$this->assertSame( 3, $statuses['future'] );\n\t\t$this->assertSame( 3, $statuses['draft'] );\n\t\t$this->assertSame( 0, $statuses['private'] );\n\n\t\t$this->assertSame( '3', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t */\n\tpublic function test_get_items_no_permission(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayNotHasKey( 'X-WP-TotalByStatus', $headers );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_contributor(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$contributor_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'pending', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayNotHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 7, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 0, $statuses['future'] );\n\t\t$this->assertSame( 0, $statuses['draft'] );\n\n\t\t$this->assertSame( '7', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_author(): void {\n\t\twp_set_current_user( self::$author_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$headers  = $response->get_headers();\n\n\t\t$this->assertFalse( $response->is_error() );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalByStatus', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-Total', $headers );\n\t\t$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );\n\n\t\t$statuses = json_decode( $headers['X-WP-TotalByStatus'], true );\n\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( 10, $statuses['all'] );\n\t\t$this->assertSame( 7, $statuses['publish'] );\n\t\t$this->assertSame( 0, $statuses['pending'] );\n\t\t$this->assertSame( 0, $statuses['future'] );\n\t\t$this->assertSame( 0, $statuses['private'] );\n\t\t$this->assertSame( 3, $statuses['draft'] );\n\n\t\t$this->assertSame( '7', $headers['X-WP-Total'] );\n\t\t$this->assertSame( '1', $headers['X-WP-TotalPages'] );\n\t}\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'draft',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$view_link = get_preview_post_link( $story );\n\t\t$edit_link = get_edit_post_link( $story, 'rest-api' );\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'preview_link', $data );\n\t\t$this->assertSame( $view_link, $data['preview_link'] );\n\t\t$this->assertArrayHasKey( 'edit_link', $data );\n\t\t$this->assertSame( $edit_link, $data['edit_link'] );\n\t\t$this->assertArrayHasKey( 'embed_post_link', $data );\n\t\t$this->assertStringContainsString( (string) $story, $data['embed_post_link'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item_no_user(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'publish',\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\twp_set_current_user( 0 );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayNotHasKey( 'edit_link', $data );\n\t\t$this->assertArrayNotHasKey( 'preview_link', $data );\n\t\t$this->assertArrayNotHasKey( 'embed_post_link', $data );\n\t}\n\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t */\n\tpublic function test_get_item_future(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$story   = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$response = rest_get_server()->dispatch( $request );\n\n\t\t$post = get_post( $story );\n\n\t\t$this->assertNotNull( $post );\n\n\t\t[ $permalink ] = get_sample_permalink( $post->ID, $post->post_title, '' );\n\t\t$permalink     = str_replace( [ '%pagename%', '%postname%' ], $post->post_name, $permalink );\n\n\t\t$data = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'preview_link', $data );\n\t\t$this->assertNotEmpty( $data['preview_link'] );\n\t\t$this->assertSame( $permalink, $data['preview_link'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_lock(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story    = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$new_lock = ( time() - 100 ) . ':' . self::$user_id;\n\t\tupdate_post_meta( $story, '_edit_lock', $new_lock );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$links    = $response->get_links();\n\n\t\t$this->assertArrayHasKey( 'https://api.w.org/lockuser', $links );\n\t\t$this->assertArrayHasKey( 'https://api.w.org/lock', $links );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::prepare_item_for_response\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_item_for_response\n\t */\n\tpublic function test_get_item_no_story_data_for_password_protected_post(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'     => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status'   => 'publish',\n\t\t\t\t'post_password' => 'Top Secret',\n\t\t\t\t'post_author'   => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\twp_set_current_user( self::$author_id );\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\n\t\t$data = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_data', $data );\n\t\t$this->assertIsObject( $data['story_data'] );\n\t\t$this->assertEmpty( (array) $data['story_data'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::get_available_actions\n\t */\n\tpublic function test_get_available_actions(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story    = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\t\t$new_lock = ( time() - 100 ) . ':' . self::$user_id;\n\t\tupdate_post_meta( $story, '_edit_lock', $new_lock );\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$links    = $response->get_links();\n\n\t\t$this->assertArrayHasKey( 'https://api.w.org/action-delete', $links );\n\t\t$this->assertArrayHasKey( 'https://api.w.org/action-edit', $links );\n\t}\n\n\t/**\n\t * @covers ::get_items\n\t * @covers ::add_response_headers\n\t */\n\tpublic function test_get_items_format(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'status', [ 'draft' ] );\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$request->set_param( '_web_stories_envelope', true );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t// Body of request.\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'headers', $data );\n\t\t$this->assertArrayHasKey( 'body', $data );\n\t\t$this->assertArrayHasKey( 'status', $data );\n\n\t\t$statuses = $data['headers']['X-WP-TotalByStatus'];\n\t\t$statuses = json_decode( $statuses, true );\n\n\t\t// Headers.\n\t\t$this->assertIsArray( $statuses );\n\t\t$this->assertArrayHasKey( 'all', $statuses );\n\t\t$this->assertArrayHasKey( 'publish', $statuses );\n\t\t$this->assertArrayHasKey( 'future', $statuses );\n\t\t$this->assertArrayHasKey( 'draft', $statuses );\n\t\t$this->assertArrayHasKey( 'private', $statuses );\n\n\t\t$this->assertSame( '3', $data['headers']['X-WP-Total'] );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_no_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayNotHasKey( 'story_poster', $data );\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[0], $attachment_src[1] );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[1], $attachment_src[2] );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image_in_admin(): void {\n\t\tglobal $content_width;\n\n\t\t$_content_width            = $content_width;\n\t\t$content_width             = 400;\n\t\t$GLOBALS['current_screen'] = convert_to_screen( Story_Post_Type::POST_TYPE_SLUG );\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$this->controller->register_routes();\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$content_width = $_content_width;\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[0], $attachment_src[1] );\n\t\t$this->assertSame( Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS[1], $attachment_src[2] );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_hotlinked_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\tadd_post_meta(\n\t\t\t$story,\n\t\t\tStory_Post_Type::POSTER_META_KEY,\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_item\n\t * @covers ::get_story_poster\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::prepare_links\n\t */\n\tpublic function test_get_item_with_featured_image_and_hotlinked_poster(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'   => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_status' => 'future',\n\t\t\t\t'post_date'   => ( new DateTime( '+1day' ) )->format( 'Y-m-d H:i:s' ),\n\t\t\t\t'post_author' => self::$user_id,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/paint.jpeg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\t$attachment = get_post( $attachment_id );\n\t\t$this->assertNotNull( $attachment );\n\n\t\twp_maybe_generate_attachment_metadata( $attachment );\n\t\tset_post_thumbnail( $story, $attachment_id );\n\n\t\t$attachment_src = wp_get_attachment_image_src( $attachment_id, Image_Sizes::POSTER_PORTRAIT_IMAGE_DIMENSIONS );\n\n\t\tadd_post_meta(\n\t\t\t$story,\n\t\t\tStory_Post_Type::POSTER_META_KEY,\n\t\t\t[\n\t\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t\t'height'     => 1000,\n\t\t\t\t'width'      => 1000,\n\t\t\t\t'needsProxy' => false,\n\t\t\t]\n\t\t);\n\n\t\t$request  = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\twp_delete_attachment( $attachment_id, true );\n\n\t\t$this->assertNotFalse( $attachment_src );\n\t\t$this->assertIsArray( $data );\n\t\t$this->assertArrayHasKey( 'story_poster', $data );\n\t\t$this->assertEqualSetsWithIndex(\n\t\t\t[\n\t\t\t\t'id'         => $attachment_id,\n\t\t\t\t'url'        => $attachment_src[0],\n\t\t\t\t'width'      => $attachment_src[1],\n\t\t\t\t'height'     => $attachment_src[2],\n\t\t\t\t'needsProxy' => false,\n\t\t\t],\n\t\t\t$data['story_poster']\n\t\t);\n\t}\n\n\n\t/**\n\t * @covers ::get_item_schema\n\t */\n\tpublic function test_get_item_schema(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$data = $this->controller->get_item_schema();\n\n\t\t$this->assertArrayHasKey( 'properties', $data );\n\t\t$this->assertIsArray( $data['properties'] );\n\t\t$this->assertArrayHasKey( 'story_data', $data['properties'] );\n\t}\n\n\t/**\n\t * @covers ::filter_posts_clauses\n\t */\n\tpublic function test_filter_posts_by_author_display_names(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'order', 'asc' );\n\t\t$request->set_param( 'orderby', 'story_author' );\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$results = wp_list_pluck( $data, 'author' );\n\n\t\t$this->assertSame(\n\t\t\t[\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user3_id,\n\t\t\t],\n\t\t\t$results,\n\t\t\t'Expected posts ordered by author display names'\n\t\t);\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::READABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_param( 'order', 'desc' );\n\t\t$request->set_param( 'orderby', 'story_author' );\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$data     = $response->get_data();\n\n\t\t$this->assertIsArray( $data );\n\t\t$results = wp_list_pluck( $data, 'author' );\n\n\t\t$this->assertSame(\n\t\t\t[\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user3_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user2_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t\tself::$user_id,\n\t\t\t],\n\t\t\t$results,\n\t\t\t'Expected posts ordered by author display names'\n\t\t);\n\t}\n\n\t/**\n\t * @covers ::get_attached_post_ids\n\t */\n\tpublic function test_get_attached_post_ids(): void {\n\t\t$original_id = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'    => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_title'   => 'Example title',\n\t\t\t\t'post_excerpt' => 'Example excerpt',\n\t\t\t\t'post_author'  => self::$user_id,\n\t\t\t\t'post_status'  => 'private',\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id     = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\t\t$publisher_logo_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\t\t$this->assertNotWPError( $publisher_logo_id );\n\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, $publisher_logo_id );\n\n\t\t$posts = [ get_post( $original_id ) ];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [ $attachment_id, $publisher_logo_id ], $result );\n\t}\n\n\t/**\n\t * @covers ::get_attached_post_ids\n\t */\n\tpublic function test_get_attached_post_ids_empty(): void {\n\t\t$posts = [];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [], $result );\n\t}\n\n\n\t/**\n\t * @covers ::get_attached_user_ids\n\t */\n\tpublic function test_get_attached_user_ids(): void {\n\t\t$original_id = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'    => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_title'   => 'Example title',\n\t\t\t\t'post_excerpt' => 'Example excerpt',\n\t\t\t\t'post_author'  => self::$user_id,\n\t\t\t\t'post_status'  => 'private',\n\t\t\t]\n\t\t);\n\n\t\t$posts = [ get_post( $original_id ) ];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_user_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [ self::$user_id ], $result );\n\t}\n\n\t/**\n\t * @covers ::get_attached_user_ids\n\t */\n\tpublic function test_get_attached_user_ids_empty(): void {\n\t\t$posts = [];\n\n\t\t$result = $this->call_private_method( [ $this->controller, 'get_attached_post_ids' ], [ $posts ] );\n\t\t$this->assertEqualSets( [], $result );\n\t}\n\n\t/**\n\t * @covers ::filter_posts_clauses\n\t */\n\tpublic function test_filter_posts_clauses_irrelevant_query(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\n\t\t$initial_clauses = [\n\t\t\t'join'    => '',\n\t\t\t'orderby' => '',\n\t\t];\n\n\t\t$query = new \\WP_Query();\n\t\t$query->set( 'post_type', 'post' );\n\t\t$query->set( 'orderby', 'story_author' );\n\n\t\t$orderby = $controller->filter_posts_clauses( $initial_clauses, $query );\n\t\t$this->assertSame( $orderby, $initial_clauses );\n\n\t\t$query = new \\WP_Query();\n\t\t$query->set( 'post_type', Story_Post_Type::POST_TYPE_SLUG );\n\t\t$query->set( 'orderby', 'author' );\n\n\t\t$orderby = $controller->filter_posts_clauses( $initial_clauses, $query );\n\t\t$this->assertSame( $orderby, $initial_clauses );\n\t}\n\n\t/**\n\t * @covers ::get_collection_params\n\t */\n\tpublic function test_get_collection_params(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$controller = new \\Google\\Web_Stories\\REST_API\\Stories_Controller( Story_Post_Type::POST_TYPE_SLUG );\n\n\t\t$collection_params = $controller->get_collection_params();\n\t\t$this->assertArrayHasKey( '_web_stories_envelope', $collection_params );\n\t\t$this->assertArrayHasKey( 'web_stories_demo', $collection_params );\n\t\t$this->assertArrayHasKey( 'orderby', $collection_params );\n\t\t$this->assertArrayHasKey( 'enum', $collection_params['orderby'] );\n\t\t$this->assertIsArray( $collection_params['orderby'] );\n\t\t$this->assertIsArray( $collection_params['orderby']['enum'] );\n\t\t$this->assertContains( 'story_author', $collection_params['orderby']['enum'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_as_author_should_not_strip_markup(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$author_id );\n\n\t\t$this->kses_int();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = json_decode( (string) file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content_filtered.json' ), true );\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'content'    => $unsanitized_content,\n\t\t\t\t'story_data' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertArrayHasKey( 'content', $new_data );\n\t\t$this->assertSame( $unsanitized_content, $new_data['content']['raw'] );\n\t\t$this->assertSame( $unsanitized_story_data, $new_data['story_data'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t * @covers ::get_registered_meta\n\t */\n\tpublic function test_create_item_duplicate_id(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id     = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\t\t$publisher_logo_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\t\t$this->assertNotWPError( $publisher_logo_id );\n\n\t\t$custom_poster = [\n\t\t\t'url'        => 'http://www.example.com/image.png',\n\t\t\t'width'      => 1000,\n\t\t\t'height'     => 1000,\n\t\t\t'needsProxy' => false,\n\t\t];\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, $publisher_logo_id );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::POSTER_META_KEY, $custom_poster );\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertArrayHasKey( 'content', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['content'] );\n\t\t$this->assertArrayHasKey( 'title', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['title'] );\n\t\t$this->assertArrayHasKey( 'excerpt', $new_data );\n\t\t$this->assertArrayHasKey( 'raw', $new_data['excerpt'] );\n\t\t$this->assertArrayHasKey( 'story_data', $new_data );\n\t\t$this->assertArrayHasKey( 'featured_media', $new_data );\n\t\t$this->assertArrayHasKey( 'meta', $new_data );\n\t\t$this->assertArrayHasKey( Story_Post_Type::PUBLISHER_LOGO_META_KEY, $new_data['meta'] );\n\t\t$this->assertArrayHasKey( Story_Post_Type::POSTER_META_KEY, $new_data['meta'] );\n\n\t\t$this->assertSame( 'Example title (Copy)', $new_data['title']['raw'] );\n\t\t$this->assertSame( 'Example excerpt', $new_data['excerpt']['raw'] );\n\t\t$this->assertSame( $attachment_id, $new_data['featured_media'] );\n\t\t$this->assertSame( $publisher_logo_id, $new_data['meta'][ Story_Post_Type::PUBLISHER_LOGO_META_KEY ] );\n\t\t$this->assertSame( $custom_poster, $new_data['meta'][ Story_Post_Type::POSTER_META_KEY ] );\n\t\t$this->assertSame( [ 'pages' => [] ], $new_data['story_data'] );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t * @covers ::get_registered_meta\n\t */\n\tpublic function test_create_item_duplicate_id_invalid_meta(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\n\t\tupdate_post_meta( $original_id, Story_Post_Type::PUBLISHER_LOGO_META_KEY, 'wibble' );\n\t\tupdate_post_meta( $original_id, Story_Post_Type::POSTER_META_KEY, -1 );\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_invalid_type', $response, 400 );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_duplicate_id_invalid_id(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$user_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => 9999,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );\n\t}\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_duplicate_id_no_permission_for_private_post(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_status'           => 'private',\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\n\t\twp_set_current_user( self::$contributor_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_cannot_create', $response, 403 );\n\t}\n\n\n\t/**\n\t * @covers ::create_item\n\t */\n\tpublic function test_create_item_duplicate_id_no_permission_for_password_protected_post(): void {\n\t\t$this->controller->register_routes();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = wp_json_encode( [ 'pages' => [] ] );\n\t\t$original_id            = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type'             => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t\t'post_content'          => $unsanitized_content,\n\t\t\t\t'post_title'            => 'Example title',\n\t\t\t\t'post_excerpt'          => 'Example excerpt',\n\t\t\t\t'post_author'           => self::$user_id,\n\t\t\t\t'post_status'           => 'publish',\n\t\t\t\t'post_password'         => 'Top Secret',\n\t\t\t\t'post_content_filtered' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$attachment_id = self::factory()->attachment->create_upload_object( WEB_STORIES_TEST_DATA_DIR . '/attachment.jpg' );\n\n\t\t$this->assertNotWPError( $attachment_id );\n\n\t\tset_post_thumbnail( $original_id, $attachment_id );\n\n\t\twp_set_current_user( self::$author_id );\n\t\t$this->kses_int();\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story' );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'original_id' => $original_id,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$this->assertErrorResponse( 'rest_cannot_create', $response, 403 );\n\t}\n\n\t/**\n\t * @covers ::update_item\n\t * @covers \\Google\\Web_Stories\\REST_API\\Stories_Base_Controller::update_item\n\t */\n\tpublic function test_update_item_as_author_should_not_strip_markup(): void {\n\t\t$this->controller->register_routes();\n\n\t\twp_set_current_user( self::$author_id );\n\t\t$this->kses_int();\n\n\t\t$unsanitized_content    = file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content.html' );\n\t\t$unsanitized_story_data = json_decode( (string) file_get_contents( WEB_STORIES_TEST_DATA_DIR . '/story_post_content_filtered.json' ), true );\n\n\t\t$story = self::factory()->post->create(\n\t\t\t[\n\t\t\t\t'post_type' => Story_Post_Type::POST_TYPE_SLUG,\n\t\t\t]\n\t\t);\n\n\t\t$request = new WP_REST_Request( \\WP_REST_Server::CREATABLE, '/web-stories/v1/web-story/' . $story );\n\t\t$request->set_body_params(\n\t\t\t[\n\t\t\t\t'content'    => $unsanitized_content,\n\t\t\t\t'story_data' => $unsanitized_story_data,\n\t\t\t]\n\t\t);\n\n\t\t$response = rest_get_server()->dispatch( $request );\n\t\t$new_data = $response->get_data();\n\n\t\t$this->assertIsArray( $new_data );\n\t\t$this->assertIsArray( $new_data['content'] );\n\t\t$this->assertSame( $unsanitized_content, $new_data['content']['raw'] );\n\t\t$this->assertSame( $unsanitized_story_data, $new_data['story_data'] );\n\t}\n}\n"], "filenames": ["includes/REST_API/Stories_Base_Controller.php", "includes/REST_API/Stories_Controller.php", "tests/phpunit/integration/tests/REST_API/Stories_Controller.php"], "buggy_code_start_loc": [137, 218, 415], "buggy_code_end_loc": [188, 219, 1109], "fixing_code_start_loc": [137, 218, 416], "fixing_code_end_loc": [188, 219, 1182], "type": "CWE-863", "message": "The Web Stories for WordPress plugin supports the WordPress built-in functionality of protecting content with a password. The content is then only accessible to website visitors after entering the password. In WordPress, users with the \"Author\" role can create stories, but don't have the ability to edit password protected stories. The vulnerability allowed users with said role to bypass this permission check when trying to duplicate the protected story in the plugin's own dashboard, giving them access to the seemingly protected content. We recommend upgrading to version 1.32 or beyond commit\u00a0 ad49781c2a35c5c92ef704d4b621ab4e5cb77d68 https://github.com/GoogleForCreators/web-stories-wp/commit/ad49781c2a35c5c92ef704d4b621ab4e5cb77d68 \n", "other": {"cve": {"id": "CVE-2023-1979", "sourceIdentifier": "cve-coordination@google.com", "published": "2023-05-08T17:15:11.843", "lastModified": "2023-05-12T18:44:46.457", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Web Stories for WordPress plugin supports the WordPress built-in functionality of protecting content with a password. The content is then only accessible to website visitors after entering the password. In WordPress, users with the \"Author\" role can create stories, but don't have the ability to edit password protected stories. The vulnerability allowed users with said role to bypass this permission check when trying to duplicate the protected story in the plugin's own dashboard, giving them access to the seemingly protected content. We recommend upgrading to version 1.32 or beyond commit\u00a0 ad49781c2a35c5c92ef704d4b621ab4e5cb77d68 https://github.com/GoogleForCreators/web-stories-wp/commit/ad49781c2a35c5c92ef704d4b621ab4e5cb77d68 \n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cve-coordination@google.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "cve-coordination@google.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:web_stories:*:*:*:*:wordpress:*:*:*", "versionEndExcluding": "1.32.0", "matchCriteriaId": "6B859155-2CE3-415A-96E7-883258BCF83D"}]}]}], "references": [{"url": "https://github.com/GoogleForCreators/web-stories-wp/commit/ad49781c2a35c5c92ef704d4b621ab4e5cb77d68", "source": "cve-coordination@google.com", "tags": ["Patch"]}, {"url": "https://github.com/GoogleForCreators/web-stories-wp/releases/tag/v1.32.0", "source": "cve-coordination@google.com", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/GoogleForCreators/web-stories-wp/commit/ad49781c2a35c5c92ef704d4b621ab4e5cb77d68"}}