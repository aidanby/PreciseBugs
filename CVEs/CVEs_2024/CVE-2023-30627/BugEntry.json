{"buggy_code": ["import escapeHtml from 'escape-html';\nimport cardBuilder from '../../../components/cardbuilder/cardBuilder';\nimport loading from '../../../components/loading/loading';\nimport dom from '../../../scripts/dom';\nimport globalize from '../../../scripts/globalize';\nimport imageHelper from '../../../scripts/imagehelper';\nimport { formatDistanceToNow } from 'date-fns';\nimport { getLocaleWithSuffix } from '../../../scripts/dfnshelper';\nimport '../../../elements/emby-button/emby-button';\nimport '../../../elements/emby-itemscontainer/emby-itemscontainer';\nimport '../../../components/cardbuilder/card.scss';\nimport Dashboard from '../../../scripts/clientUtils';\nimport confirm from '../../../components/confirm/confirm';\n\n/* eslint-disable indent */\n\n    // Local cache of loaded\n    let deviceIds = [];\n\n    function canDelete(deviceId) {\n        return deviceId !== ApiClient.deviceId();\n    }\n\n    function deleteAllDevices(page) {\n        const msg = globalize.translate('DeleteDevicesConfirmation');\n\n        confirm({\n            text: msg,\n            title: globalize.translate('HeaderDeleteDevices'),\n            confirmText: globalize.translate('Delete'),\n            primary: 'delete'\n        }).then(async () => {\n            loading.show();\n            await Promise.all(\n                deviceIds.filter(canDelete).map((id) => ApiClient.deleteDevice(id))\n            );\n            loadData(page);\n        });\n    }\n\n    function deleteDevice(page, id) {\n        const msg = globalize.translate('DeleteDeviceConfirmation');\n\n        confirm({\n            text: msg,\n            title: globalize.translate('HeaderDeleteDevice'),\n            confirmText: globalize.translate('Delete'),\n            primary: 'delete'\n        }).then(async () => {\n            loading.show();\n            await ApiClient.deleteDevice(id);\n            loadData(page);\n        });\n    }\n\n    function showDeviceMenu(view, btn, deviceId) {\n        const menuItems = [];\n\n        if (canEdit) {\n            menuItems.push({\n                name: globalize.translate('Edit'),\n                id: 'open',\n                icon: 'mode_edit'\n            });\n        }\n\n        if (canDelete(deviceId)) {\n            menuItems.push({\n                name: globalize.translate('Delete'),\n                id: 'delete',\n                icon: 'delete'\n            });\n        }\n\n        import('../../../components/actionSheet/actionSheet').then(({default: actionsheet}) => {\n            actionsheet.show({\n                items: menuItems,\n                positionTo: btn,\n                callback: function (id) {\n                    switch (id) {\n                        case 'open':\n                            Dashboard.navigate('device.html?id=' + deviceId);\n                            break;\n\n                        case 'delete':\n                            deleteDevice(view, deviceId);\n                    }\n                }\n            });\n        });\n    }\n\n    function load(page, devices) {\n        const localeWithSuffix = getLocaleWithSuffix();\n\n        let html = '';\n        html += devices.map(function (device) {\n            let deviceHtml = '';\n            deviceHtml += \"<div data-id='\" + device.Id + \"' class='card backdropCard'>\";\n            deviceHtml += '<div class=\"cardBox visualCardBox\">';\n            deviceHtml += '<div class=\"cardScalable\">';\n            deviceHtml += '<div class=\"cardPadder cardPadder-backdrop\"></div>';\n            deviceHtml += `<a is=\"emby-linkbutton\" href=\"${canEdit ? '#!/device.html?id=' + device.Id : '#'}\" class=\"cardContent cardImageContainer ${cardBuilder.getDefaultBackgroundClass()}\">`;\n            const iconUrl = imageHelper.getDeviceIcon(device);\n\n            if (iconUrl) {\n                deviceHtml += '<div class=\"cardImage\" style=\"background-image:url(\\'' + iconUrl + \"');background-size: auto 64%;background-position:center center;\\\">\";\n                deviceHtml += '</div>';\n            } else {\n                deviceHtml += '<span class=\"cardImageIcon material-icons tablet_android\" aria-hidden=\"true\"></span>';\n            }\n\n            deviceHtml += '</a>';\n            deviceHtml += '</div>';\n            deviceHtml += '<div class=\"cardFooter\">';\n\n            if (canEdit || canDelete(device.Id)) {\n                deviceHtml += '<div style=\"text-align:right; float:right;padding-top:5px;\">';\n                deviceHtml += '<button type=\"button\" is=\"paper-icon-button-light\" data-id=\"' + device.Id + '\" title=\"' + globalize.translate('Menu') + '\" class=\"btnDeviceMenu\"><span class=\"material-icons more_vert\" aria-hidden=\"true\"></span></button>';\n                deviceHtml += '</div>';\n            }\n\n            deviceHtml += \"<div class='cardText'>\";\n            deviceHtml += escapeHtml(device.Name);\n            deviceHtml += '</div>';\n            deviceHtml += \"<div class='cardText cardText-secondary'>\";\n            deviceHtml += escapeHtml(device.AppName + ' ' + device.AppVersion);\n            deviceHtml += '</div>';\n            deviceHtml += \"<div class='cardText cardText-secondary'>\";\n\n            if (device.LastUserName) {\n                deviceHtml += escapeHtml(device.LastUserName);\n                deviceHtml += ', ' + formatDistanceToNow(Date.parse(device.DateLastActivity), localeWithSuffix);\n            }\n\n            deviceHtml += '&nbsp;';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            return deviceHtml;\n        }).join('');\n        page.querySelector('.devicesList').innerHTML = html;\n    }\n\n    function loadData(page) {\n        loading.show();\n        ApiClient.getJSON(ApiClient.getUrl('Devices')).then(function (result) {\n            load(page, result.Items);\n            deviceIds = result.Items.map((device) => device.Id);\n            loading.hide();\n        });\n    }\n\n    const canEdit = ApiClient.isMinServerVersion('3.4.1.31');\n    export default function (view) {\n        view.querySelector('.devicesList').addEventListener('click', function (e) {\n            const btnDeviceMenu = dom.parentWithClass(e.target, 'btnDeviceMenu');\n\n            if (btnDeviceMenu) {\n                showDeviceMenu(view, btnDeviceMenu, btnDeviceMenu.getAttribute('data-id'));\n            }\n        });\n        view.addEventListener('viewshow', function () {\n            loadData(this);\n        });\n\n        view.querySelector('#deviceDeleteAll').addEventListener('click', function() {\n            deleteAllDevices(view);\n        });\n    }\n/* eslint-enable indent */\n", "\n/* eslint-disable indent */\n\n    export function getDeviceIcon(device) {\n        const baseUrl = 'assets/img/devices/';\n        switch (device.AppName || device.Client) {\n            case 'Samsung Smart TV':\n                return baseUrl + 'samsung.svg';\n            case 'Xbox One':\n                return baseUrl + 'xbox.svg';\n            case 'Sony PS4':\n                return baseUrl + 'playstation.svg';\n            case 'Kodi':\n            case 'Kodi JellyCon':\n                return baseUrl + 'kodi.svg';\n            case 'Jellyfin Android':\n            case 'AndroidTV':\n            case 'Android TV':\n                return baseUrl + 'android.svg';\n            case 'Jellyfin Mobile (iOS)':\n            case 'Jellyfin Mobile (iPadOS)':\n            case 'Jellyfin iOS':\n            case 'Infuse':\n                return baseUrl + 'apple.svg';\n            case 'Jellyfin Web':\n                switch (device.Name || device.DeviceName) {\n                    case 'Opera':\n                    case 'Opera TV':\n                    case 'Opera Android':\n                        return baseUrl + 'opera.svg';\n                    case 'Chrome':\n                    case 'Chrome Android':\n                        return baseUrl + 'chrome.svg';\n                    case 'Firefox':\n                    case 'Firefox Android':\n                        return baseUrl + 'firefox.svg';\n                    case 'Safari':\n                    case 'Safari iPad':\n                    case 'Safari iPhone':\n                        return baseUrl + 'safari.svg';\n                    case 'Edge Chromium':\n                    case 'Edge Chromium Android':\n                    case 'Edge Chromium iPad':\n                    case 'Edge Chromium iPhone':\n                        return baseUrl + 'edgechromium.svg';\n                    case 'Edge':\n                        return baseUrl + 'edge.svg';\n                    case 'Internet Explorer':\n                        return baseUrl + 'msie.svg';\n                    default:\n                        return baseUrl + 'html5.svg';\n                }\n            default:\n                return baseUrl + 'other.svg';\n        }\n    }\n\n    export function getLibraryIcon(library) {\n        switch (library) {\n            case 'movies':\n                return 'video_library';\n            case 'music':\n                return 'library_music';\n            case 'photos':\n                return 'photo_library';\n            case 'livetv':\n                return 'live_tv';\n            case 'tvshows':\n                return 'tv';\n            case 'trailers':\n                return 'local_movies';\n            case 'homevideos':\n                return 'photo_library';\n            case 'musicvideos':\n                return 'music_video';\n            case 'books':\n                return 'library_books';\n            case 'channels':\n                return 'videocam';\n            case 'playlists':\n                return 'view_list';\n            default:\n                return 'folder';\n        }\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    getDeviceIcon: getDeviceIcon,\n    getLibraryIcon: getLibraryIcon\n};\n"], "fixing_code": ["import escapeHtml from 'escape-html';\nimport cardBuilder from '../../../components/cardbuilder/cardBuilder';\nimport loading from '../../../components/loading/loading';\nimport dom from '../../../scripts/dom';\nimport globalize from '../../../scripts/globalize';\nimport imageHelper from '../../../scripts/imagehelper';\nimport { formatDistanceToNow } from 'date-fns';\nimport { getLocaleWithSuffix } from '../../../scripts/dfnshelper';\nimport '../../../elements/emby-button/emby-button';\nimport '../../../elements/emby-itemscontainer/emby-itemscontainer';\nimport '../../../components/cardbuilder/card.scss';\nimport Dashboard from '../../../scripts/clientUtils';\nimport confirm from '../../../components/confirm/confirm';\n\n/* eslint-disable indent */\n\n    // Local cache of loaded\n    let deviceIds = [];\n\n    function canDelete(deviceId) {\n        return deviceId !== ApiClient.deviceId();\n    }\n\n    function deleteAllDevices(page) {\n        const msg = globalize.translate('DeleteDevicesConfirmation');\n\n        confirm({\n            text: msg,\n            title: globalize.translate('HeaderDeleteDevices'),\n            confirmText: globalize.translate('Delete'),\n            primary: 'delete'\n        }).then(async () => {\n            loading.show();\n            await Promise.all(\n                deviceIds.filter(canDelete).map((id) => ApiClient.deleteDevice(id))\n            );\n            loadData(page);\n        });\n    }\n\n    function deleteDevice(page, id) {\n        const msg = globalize.translate('DeleteDeviceConfirmation');\n\n        confirm({\n            text: msg,\n            title: globalize.translate('HeaderDeleteDevice'),\n            confirmText: globalize.translate('Delete'),\n            primary: 'delete'\n        }).then(async () => {\n            loading.show();\n            await ApiClient.deleteDevice(id);\n            loadData(page);\n        });\n    }\n\n    function showDeviceMenu(view, btn, deviceId) {\n        const menuItems = [];\n\n        if (canEdit) {\n            menuItems.push({\n                name: globalize.translate('Edit'),\n                id: 'open',\n                icon: 'mode_edit'\n            });\n        }\n\n        if (canDelete(deviceId)) {\n            menuItems.push({\n                name: globalize.translate('Delete'),\n                id: 'delete',\n                icon: 'delete'\n            });\n        }\n\n        import('../../../components/actionSheet/actionSheet').then(({default: actionsheet}) => {\n            actionsheet.show({\n                items: menuItems,\n                positionTo: btn,\n                callback: function (id) {\n                    switch (id) {\n                        case 'open':\n                            Dashboard.navigate('device.html?id=' + deviceId);\n                            break;\n\n                        case 'delete':\n                            deleteDevice(view, deviceId);\n                    }\n                }\n            });\n        });\n    }\n\n    function load(page, devices) {\n        const localeWithSuffix = getLocaleWithSuffix();\n\n        let html = '';\n        html += devices.map(function (device) {\n            let deviceHtml = '';\n            deviceHtml += \"<div data-id='\" + escapeHtml(device.Id) + \"' class='card backdropCard'>\";\n            deviceHtml += '<div class=\"cardBox visualCardBox\">';\n            deviceHtml += '<div class=\"cardScalable\">';\n            deviceHtml += '<div class=\"cardPadder cardPadder-backdrop\"></div>';\n            deviceHtml += `<a is=\"emby-linkbutton\" href=\"${canEdit ? '#!/device.html?id=' + escapeHtml(device.Id) : '#'}\" class=\"cardContent cardImageContainer ${cardBuilder.getDefaultBackgroundClass()}\">`;\n            // audit note: getDeviceIcon returns static text\n            const iconUrl = imageHelper.getDeviceIcon(device);\n\n            if (iconUrl) {\n                deviceHtml += '<div class=\"cardImage\" style=\"background-image:url(\\'' + iconUrl + \"');background-size: auto 64%;background-position:center center;\\\">\";\n                deviceHtml += '</div>';\n            } else {\n                deviceHtml += '<span class=\"cardImageIcon material-icons tablet_android\" aria-hidden=\"true\"></span>';\n            }\n\n            deviceHtml += '</a>';\n            deviceHtml += '</div>';\n            deviceHtml += '<div class=\"cardFooter\">';\n\n            if (canEdit || canDelete(device.Id)) {\n                deviceHtml += '<div style=\"text-align:right; float:right;padding-top:5px;\">';\n                deviceHtml += '<button type=\"button\" is=\"paper-icon-button-light\" data-id=\"' + escapeHtml(device.Id) + '\" title=\"' + globalize.translate('Menu') + '\" class=\"btnDeviceMenu\"><span class=\"material-icons more_vert\" aria-hidden=\"true\"></span></button>';\n                deviceHtml += '</div>';\n            }\n\n            deviceHtml += \"<div class='cardText'>\";\n            deviceHtml += escapeHtml(device.Name);\n            deviceHtml += '</div>';\n            deviceHtml += \"<div class='cardText cardText-secondary'>\";\n            deviceHtml += escapeHtml(device.AppName + ' ' + device.AppVersion);\n            deviceHtml += '</div>';\n            deviceHtml += \"<div class='cardText cardText-secondary'>\";\n\n            if (device.LastUserName) {\n                deviceHtml += escapeHtml(device.LastUserName);\n                deviceHtml += ', ' + formatDistanceToNow(Date.parse(device.DateLastActivity), localeWithSuffix);\n            }\n\n            deviceHtml += '&nbsp;';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            deviceHtml += '</div>';\n            return deviceHtml;\n        }).join('');\n        page.querySelector('.devicesList').innerHTML = html;\n    }\n\n    function loadData(page) {\n        loading.show();\n        ApiClient.getJSON(ApiClient.getUrl('Devices')).then(function (result) {\n            load(page, result.Items);\n            deviceIds = result.Items.map((device) => device.Id);\n            loading.hide();\n        });\n    }\n\n    const canEdit = ApiClient.isMinServerVersion('3.4.1.31');\n    export default function (view) {\n        view.querySelector('.devicesList').addEventListener('click', function (e) {\n            const btnDeviceMenu = dom.parentWithClass(e.target, 'btnDeviceMenu');\n\n            if (btnDeviceMenu) {\n                showDeviceMenu(view, btnDeviceMenu, btnDeviceMenu.getAttribute('data-id'));\n            }\n        });\n        view.addEventListener('viewshow', function () {\n            loadData(this);\n        });\n\n        view.querySelector('#deviceDeleteAll').addEventListener('click', function() {\n            deleteAllDevices(view);\n        });\n    }\n/* eslint-enable indent */\n", "\n/* eslint-disable indent */\n// audit note: this module is expected to return safe text for use in HTML\n\n    export function getDeviceIcon(device) {\n        const baseUrl = 'assets/img/devices/';\n        switch (device.AppName || device.Client) {\n            case 'Samsung Smart TV':\n                return baseUrl + 'samsung.svg';\n            case 'Xbox One':\n                return baseUrl + 'xbox.svg';\n            case 'Sony PS4':\n                return baseUrl + 'playstation.svg';\n            case 'Kodi':\n            case 'Kodi JellyCon':\n                return baseUrl + 'kodi.svg';\n            case 'Jellyfin Android':\n            case 'AndroidTV':\n            case 'Android TV':\n                return baseUrl + 'android.svg';\n            case 'Jellyfin Mobile (iOS)':\n            case 'Jellyfin Mobile (iPadOS)':\n            case 'Jellyfin iOS':\n            case 'Infuse':\n                return baseUrl + 'apple.svg';\n            case 'Jellyfin Web':\n                switch (device.Name || device.DeviceName) {\n                    case 'Opera':\n                    case 'Opera TV':\n                    case 'Opera Android':\n                        return baseUrl + 'opera.svg';\n                    case 'Chrome':\n                    case 'Chrome Android':\n                        return baseUrl + 'chrome.svg';\n                    case 'Firefox':\n                    case 'Firefox Android':\n                        return baseUrl + 'firefox.svg';\n                    case 'Safari':\n                    case 'Safari iPad':\n                    case 'Safari iPhone':\n                        return baseUrl + 'safari.svg';\n                    case 'Edge Chromium':\n                    case 'Edge Chromium Android':\n                    case 'Edge Chromium iPad':\n                    case 'Edge Chromium iPhone':\n                        return baseUrl + 'edgechromium.svg';\n                    case 'Edge':\n                        return baseUrl + 'edge.svg';\n                    case 'Internet Explorer':\n                        return baseUrl + 'msie.svg';\n                    default:\n                        return baseUrl + 'html5.svg';\n                }\n            default:\n                return baseUrl + 'other.svg';\n        }\n    }\n\n    export function getLibraryIcon(library) {\n        switch (library) {\n            case 'movies':\n                return 'video_library';\n            case 'music':\n                return 'library_music';\n            case 'photos':\n                return 'photo_library';\n            case 'livetv':\n                return 'live_tv';\n            case 'tvshows':\n                return 'tv';\n            case 'trailers':\n                return 'local_movies';\n            case 'homevideos':\n                return 'photo_library';\n            case 'musicvideos':\n                return 'music_video';\n            case 'books':\n                return 'library_books';\n            case 'channels':\n                return 'videocam';\n            case 'playlists':\n                return 'view_list';\n            default:\n                return 'folder';\n        }\n    }\n\n/* eslint-enable indent */\n\nexport default {\n    getDeviceIcon: getDeviceIcon,\n    getLibraryIcon: getLibraryIcon\n};\n"], "filenames": ["src/controllers/dashboard/devices/devices.js", "src/scripts/imagehelper.js"], "buggy_code_start_loc": [99, 2], "buggy_code_end_loc": [120, 2], "fixing_code_start_loc": [99, 3], "fixing_code_end_loc": [121, 4], "type": "CWE-79", "message": "jellyfin-web is the web client for Jellyfin, a free-software media system. Starting in version 10.1.0 and prior to version 10.8.10, a stored cross-site scripting vulnerability in device.js can be used to make arbitrary calls to the `REST` endpoints with admin privileges. When combined with CVE-2023-30626, this results in remote code execution on the Jellyfin instance in the context of the user who's running it. This issue is patched in version 10.8.10. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-30627", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-24T21:15:09.760", "lastModified": "2023-05-04T14:02:22.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "jellyfin-web is the web client for Jellyfin, a free-software media system. Starting in version 10.1.0 and prior to version 10.8.10, a stored cross-site scripting vulnerability in device.js can be used to make arbitrary calls to the `REST` endpoints with admin privileges. When combined with CVE-2023-30626, this results in remote code execution on the Jellyfin instance in the context of the user who's running it. This issue is patched in version 10.8.10. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jellyfin:jellyfin:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.1.0", "versionEndExcluding": "10.8.10", "matchCriteriaId": "2987978F-8A1B-4CE2-BDC9-A6C5AAA9AE18"}]}]}], "references": [{"url": "https://github.com/jellyfin/jellyfin-web/commit/b88a5951e1a517ff4c820e693d9c0da981cf68ee", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/jellyfin/jellyfin-web/releases/tag/v10.8.10", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/jellyfin/jellyfin-web/security/advisories/GHSA-89hp-h43h-r5pq", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/jellyfin/jellyfin/security/advisories/GHSA-9p5f-5x8v-x65m", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jellyfin/jellyfin-web/commit/b88a5951e1a517ff4c820e693d9c0da981cf68ee"}}