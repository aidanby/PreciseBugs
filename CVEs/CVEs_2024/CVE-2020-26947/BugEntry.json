{"buggy_code": ["cmake_minimum_required(VERSION 3.5)\nproject(monero-gui)\n\nmessage(STATUS \"Initiating compile using CMake ${CMAKE_VERSION}\")\n\nset(VERSION_MAJOR \"17\")\nset(VERSION_MINOR \"0\")\nset(VERSION_REVISION \"1\")\nset(VERSION \"0.${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REVISION}\")\n\noption(STATIC \"Link libraries statically, requires static Qt\")\n\noption(USE_DEVICE_TREZOR \"Trezor support compilation\" ON)\noption(ENABLE_PASS_STRENGTH_METER \"Enable zxcvbn library for password strength\" OFF)\noption(WITH_SCANNER \"Enable webcam QR scanner\" OFF)\noption(DEV_MODE \"Checkout latest monero master on build\" OFF)\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${CMAKE_SOURCE_DIR}/cmake\")\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckLinkerFlag)\ninclude(FindCcache)\n\nif(DEBUG)\n\tset(CMAKE_VERBOSE_MAKEFILE ON)\nendif()\n\nset(BUILD_GUI_DEPS ON)\nset(ARCH \"x86-64\" CACHE STRING \"Target architecture\")\nset(BUILD_64 ON CACHE BOOL \"Build 64-bit binaries\")\n\nif(NOT MANUAL_SUBMODULES)\n  find_package(Git)\n  if(GIT_FOUND)\n    if(NOT DEV_MODE)\n      function (check_submodule relative_path)\n        execute_process(COMMAND git rev-parse \"HEAD\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${relative_path} OUTPUT_VARIABLE localHead)\n        execute_process(COMMAND git rev-parse \"HEAD:${relative_path}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE checkedHead)\n        string(COMPARE EQUAL \"${localHead}\" \"${checkedHead}\" upToDate)\n        if (upToDate)\n          message(STATUS \"Submodule '${relative_path}' is up-to-date\")\n        else()\n          message(FATAL_ERROR \"Submodule '${relative_path}' is not using the checked head. Please update all submodules with\\ngit submodule update --init --force --recursive\\nor run cmake with -DMANUAL_SUBMODULES=1,\\n or if you want to build from latest master run cmake with -DDEV_MODE=ON,\\n or run make devmode\")\n        endif()\n      endfunction ()\n      message(STATUS \"Checking submodules\")\n      check_submodule(monero)\n    else()\n      execute_process(COMMAND ${GIT_EXECUTABLE} fetch WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_FETCH_RESULT)\n      execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f origin/master WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_CHECKOUT_MASTER_RESULT)\n      execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --force --recursive WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_SUBMODULE_UPDATE_RESULT)\n      if(NOT GIT_FETCH_RESULT EQUAL \"0\" OR NOT GIT_CHECKOUT_MASTER_RESULT EQUAL \"0\" OR NOT GIT_SUBMODULE_UPDATE_RESULT EQUAL \"0\")\n        message(FATAL_ERROR \"Updating git submodule to master (-DDEV_MODE=ON) failed\")\n      endif()\n    endif()\n  endif()\nendif()\n\nadd_subdirectory(monero)\n\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\n\nset_property(TARGET wallet_merged PROPERTY FOLDER \"monero\")\nget_directory_property(ARCH_WIDTH DIRECTORY \"monero\" DEFINITION ARCH_WIDTH)\nget_directory_property(UNBOUND_LIBRARY DIRECTORY \"monero\" DEFINITION UNBOUND_LIBRARY)\nget_directory_property(DEVICE_TREZOR_READY DIRECTORY \"monero\" DEFINITION DEVICE_TREZOR_READY)\nget_directory_property(TREZOR_DEP_LIBS DIRECTORY \"monero\" DEFINITION TREZOR_DEP_LIBS)\n\nif (NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  add_definitions(-DQT_NO_DEBUG)\nendif()\n\nif(STATIC)\n  message(STATUS \"Initiating static build\")\n  set(Boost_USE_STATIC_LIBS ON)\n  set(Boost_USE_STATIC_RUNTIME ON)\n  set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n  add_definitions(-DMONERO_GUI_STATIC)\nendif()\n\n# Include password strength library\nif(ENABLE_PASS_STRENGTH_METER)\n    message(STATUS \"Building with pass strength meter support.\")\nelse()\n    add_definitions(-DDISABLE_PASS_STRENGTH_METER)\nendif()\n\ninclude(CMakePackageConfigHelpers)\n\n# force version update\nfunction (monero_gui_add_library_with_deps)\n  cmake_parse_arguments(MONERO_ADD_LIBRARY \"\" \"NAME\" \"DEPENDS;SOURCES\" ${ARGN})\n  source_group(\"${MONERO_ADD_LIBRARY_NAME}\" FILES ${MONERO_ADD_LIBRARY_SOURCES})\n\n  # Define a (\"virtual\") object library and an actual library that links those\n  # objects together. The virtual libraries can be arbitrarily combined to link\n  # any subset of objects into one library archive. This is used for releasing\n  # libwallet, which combines multiple components.\n  set(objlib obj_${MONERO_ADD_LIBRARY_NAME})\n  add_library(${objlib} OBJECT ${MONERO_ADD_LIBRARY_SOURCES})\n  add_library(\"${MONERO_ADD_LIBRARY_NAME}\" $<TARGET_OBJECTS:${objlib}>)\n  if (MONERO_ADD_LIBRARY_DEPENDS)\n    add_dependencies(${objlib} ${MONERO_ADD_LIBRARY_DEPENDS})\n  endif()\n  set_property(TARGET \"${MONERO_ADD_LIBRARY_NAME}\" PROPERTY FOLDER \"libs\")\n  target_compile_definitions(${objlib}\n    PRIVATE $<TARGET_PROPERTY:${MONERO_ADD_LIBRARY_NAME},INTERFACE_COMPILE_DEFINITIONS>)\nendfunction ()\n\nfunction (monero_gui_add_library name)\n    monero_gui_add_library_with_deps(NAME \"${name}\" SOURCES ${ARGN})\nendfunction()\n\ninclude_directories(${EASYLOGGING_INCLUDE})\nlink_directories(${EASYLOGGING_LIBRARY_DIRS})\n\n\ninclude(VersionGui)\nmonero_gui_add_library(gui_version SOURCES version.js DEPENDS genversiongui)\n\nmessage(STATUS \"${CMAKE_MODULE_PATH}\")\n\n# OpenSSL\nif(APPLE AND NOT OPENSSL_ROOT_DIR)\n  execute_process(COMMAND brew --prefix openssl OUTPUT_VARIABLE OPENSSL_ROOT_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\nfind_package(OpenSSL REQUIRED)\nmessage(STATUS \"OpenSSL: Version ${OPENSSL_VERSION}\")\nmessage(STATUS \"OpenSSL: include dir at ${OPENSSL_INCLUDE_DIR}\")\nmessage(STATUS \"OpenSSL: libraries at ${OPENSSL_LIBRARIES} ${OPENSSL_SSL_LIBRARIES}\")\n\n# Zbar (for QR scanner)\nif(WITH_SCANNER)\n    add_definitions(-DWITH_SCANNER)\n    find_package(ZBar0)\n    message(STATUS \"libzbar: include dir at ${ZBAR_INCLUDE_DIR}\")\n    message(STATUS \"libzbar: libraries at ${ZBAR_LIBRARIES}\")\nendif()\n\n# Sodium\nfind_library(SODIUM_LIBRARY sodium)\nmessage(STATUS \"libsodium: libraries at ${SODIUM_LIBRARY}\")\n\n# LibUSB\nfind_package(LibUSB)\nmessage(STATUS \"libusb: include dir at ${LibUSB_INCLUDE_DIRS}\")\nmessage(STATUS \"libusb: libraries at ${LibUSB_LIBRARIES}\")\n\n# HIDApi\nfind_package(HIDAPI REQUIRED)\nmessage(STATUS \"libhidapi: include dir at ${HIDAPI_INCLUDE_DIRS}\")\nmessage(STATUS \"libhidapi: libraries at ${HIDAPI_LIBRARIES}\")\n\n# Boost\nif(DEBUG)\n    set(Boost_DEBUG ON)\nendif()\nif(APPLE AND NOT BOOST_ROOT)\n  execute_process(COMMAND brew --prefix boost OUTPUT_VARIABLE BOOST_ROOT OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\nif(MINGW)\n  set(Boost_THREADAPI win32)\nendif()\nfind_package(Boost 1.58 REQUIRED COMPONENTS\n\t\tsystem\n\t\tfilesystem\n\t\tthread\n\t\tdate_time\n\t\tchrono\n\t\tregex\n\t\tserialization\n\t\tprogram_options\n\t\tlocale)\n\nif(UNIX AND NOT APPLE)\n    find_package(X11 REQUIRED)\n    message(STATUS \"X11_FOUND = ${X11_FOUND}\")\n    message(STATUS \"X11_INCLUDE_DIR = ${X11_INCLUDE_DIR}\")\n    message(STATUS \"X11_LIBRARIES = ${X11_LIBRARIES}\")\n    include_directories(${X11_INCLUDE_DIR})\n    link_directories(${X11_LIBRARIES})\n    if(STATIC)\n        find_library(XCB_LIBRARY xcb)\n        message(STATUS \"Found xcb library: ${XCB_LIBRARY}\")\n    endif()\nendif()\n\nif(MINGW)\n    string(REGEX MATCH \"^[^/]:/[^/]*\" msys2_install_path \"${CMAKE_C_COMPILER}\")\n    message(STATUS \"MSYS location: ${msys2_install_path}\")\n    set(CMAKE_INCLUDE_PATH \"${msys2_install_path}/mingw${ARCH_WIDTH}/include\")\n    # This is necessary because otherwise CMake will make Boost libraries -lfoo\n    # rather than a full path. Unfortunately, this makes the shared libraries get\n    # linked due to a bug in CMake which misses putting -static flags around the\n    # -lfoo arguments.\n    set(DEFLIB ${msys2_install_path}/mingw${ARCH_WIDTH}/lib)\n    list(REMOVE_ITEM CMAKE_C_IMPLICIT_LINK_DIRECTORIES ${DEFLIB})\n    list(REMOVE_ITEM CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES ${DEFLIB})\nendif()\n\nset(QT5_LIBRARIES\n  Qt5Core\n  Qt5Quick\n  Qt5Widgets\n  Qt5Gui\n  Qt5Network\n  Qt5Qml\n  Qt5Svg\n  Qt5Xml\n)\n\nif(WITH_SCANNER)\n  list(APPEND QT5_LIBRARIES Qt5Multimedia)\nendif()\n\nif(APPLE)\n  list(APPEND QT5_LIBRARIES Qt5MacExtras)\n\n  if(NOT CMAKE_PREFIX_PATH AND DEFINED ENV{CMAKE_PREFIX_PATH})\n    message(STATUS \"Using CMAKE_PREFIX_PATH environment variable: '$ENV{CMAKE_PREFIX_PATH}'\")\n    set(CMAKE_PREFIX_PATH $ENV{CMAKE_PREFIX_PATH})\n  endif()\n  if(NOT CMAKE_PREFIX_PATH)\n    execute_process(COMMAND brew --prefix qt5 OUTPUT_VARIABLE QT5_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)\n    list(APPEND CMAKE_PREFIX_PATH ${QT5_DIR})\n  endif()\n\n  if(CMAKE_PREFIX_PATH)\n    include_directories(${CMAKE_PREFIX_PATH}/include)\n    set(CMAKE_BUILD_RPATH \"${CMAKE_PREFIX_PATH}/lib\")\n  endif()\nendif()\n\nfind_package(PkgConfig REQUIRED)\n\n# TODO: drop this once we switch to Qt 5.14+\npkg_check_modules(Qt5QmlModels_PKG_CONFIG QUIET Qt5QmlModels)\nif(Qt5QmlModels_PKG_CONFIG_FOUND)\n  list(APPEND QT5_LIBRARIES Qt5QmlModels)\nendif()\n\n# TODO: drop this once we switch to Qt 5.12+\nfind_package(Qt5XmlPatterns QUIET)\nif(Qt5XmlPatterns_FOUND)\n  list(APPEND QT5_LIBRARIES Qt5XmlPatterns)\nendif()\n\nforeach(QT5_MODULE ${QT5_LIBRARIES})\n  find_package(${QT5_MODULE} REQUIRED)\n  include_directories(${${QT5_MODULE}_INCLUDE_DIRS})\nendforeach()\n\npkg_check_modules(QT5_PKG_CONFIG REQUIRED ${QT5_LIBRARIES})\n\nif(QT5_PKG_CONFIG_FOUND)\n  set(QT5_PKG_CONFIG \"QT5_PKG_CONFIG\")\n  if(STATIC)\n    set(QT5_PKG_CONFIG \"${QT5_PKG_CONFIG}_STATIC\")\n  endif()\n\n  if(APPLE)\n    list(JOIN ${QT5_PKG_CONFIG}_LDFLAGS_OTHER \" \" ${QT5_PKG_CONFIG}_LDFLAGS_OTHER)\n    list(JOIN ${QT5_PKG_CONFIG}_LIBRARIES \" \" ${QT5_PKG_CONFIG}_LIBRARIES)\n    list(JOIN ${QT5_PKG_CONFIG}_INCLUDE_DIRS \" \" ${QT5_PKG_CONFIG}_INCLUDE_DIRS)\n\n    # temporal workaround for https://bugreports.qt.io/browse/QTBUG-80922\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_LDFLAGS_OTHER \"${${QT5_PKG_CONFIG}_LDFLAGS_OTHER}\")\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_LIBRARIES \"${${QT5_PKG_CONFIG}_LIBRARIES}\")\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_INCLUDE_DIRS \"${${QT5_PKG_CONFIG}_INCLUDE_DIRS}\")\n  endif()\n\n  set(QT5_LIBRARIES ${${QT5_PKG_CONFIG}_LIBRARIES} ${${QT5_PKG_CONFIG}_LDFLAGS_OTHER})\n  include_directories(${${QT5_PKG_CONFIG}_INCLUDE_DIRS})\n  link_directories(${${QT5_PKG_CONFIG}_LIBRARY_DIRS})\nendif()\n\nlist(APPEND QT5_LIBRARIES\n  ${Qt5Gui_PLUGINS}\n  ${Qt5Svg_PLUGINS}\n  ${Qt5Qml_PLUGINS}\n  ${Qt5Network_PLUGINS}\n)\n\nif(STATIC)\n  set(QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/Qt/labs/folderlistmodel)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/Qt/labs/settings)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtGraphicalEffects)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtGraphicalEffects/private)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtMultimedia)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Controls)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Controls.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Dialogs)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Dialogs/Private)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Layouts)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/PrivateWidgets)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Templates.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Window.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/XmlListModel)\n\n  set(QT5_EXTRA_LIBRARIES_LIST\n    qtquicktemplates2plugin\n    Qt5QuickTemplates2\n    qtquickcontrols2plugin\n    Qt5QuickControls2\n    dialogplugin\n    dialogsprivateplugin\n    qmlfolderlistmodelplugin\n    qmlsettingsplugin\n    qmlxmllistmodelplugin\n    qquicklayoutsplugin\n  )\n\n  if(WITH_SCANNER)\n    list(APPEND QT5_EXTRA_LIBRARIES_LIST\n      declarative_multimedia\n      Qt5MultimediaQuick_p\n    )\n  endif()\n\n  list(APPEND QT5_EXTRA_LIBRARIES_LIST\n    qtgraphicaleffectsplugin\n    qtgraphicaleffectsprivate\n    qtquick2plugin\n    qtquickcontrolsplugin\n    widgetsplugin\n    windowplugin\n  )\n\n  set(QT5_EXTRA_LIBRARIES)\n  foreach(LIBRARY ${QT5_EXTRA_LIBRARIES_LIST})\n    find_library(${LIBRARY}_LIBRARY ${LIBRARY} PATHS ${QT5_EXTRA_PATHS} REQUIRED)\n    list(APPEND QT5_EXTRA_LIBRARIES ${${LIBRARY}_LIBRARY})\n  endforeach()\n\n  if(MINGW)\n    if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      list(APPEND QT5_EXTRA_LIBRARIES D3D11 Dwrite D2d1)\n    endif()\n  endif()\n\n  set(QT5_LIBRARIES\n    ${QT5_EXTRA_LIBRARIES}\n    ${QT5_LIBRARIES}\n  )\n\n  set(QT5_INTEGRATION_LIBRARIES_LIST\n    Qt5EventDispatcherSupport\n    Qt5PacketProtocol\n    Qt5ThemeSupport\n    Qt5FontDatabaseSupport\n  )\n\n  if(UNIX AND NOT APPLE)\n    list(APPEND QT5_INTEGRATION_LIBRARIES_LIST\n      Qt5XcbQpa\n      xcb-static\n      Qt5ServiceSupport\n      Qt5GlxSupport\n    )\n  elseif(MINGW)\n    list(APPEND QT5_INTEGRATION_LIBRARIES_LIST qtfreetype)\n  endif()\n\n  foreach(LIBRARY ${QT5_INTEGRATION_LIBRARIES_LIST})\n    find_library(${LIBRARY}_LIBRARY ${LIBRARY} PATHS ${QT5_EXTRA_PATHS} REQUIRED)\n    list(APPEND QT5_LIBRARIES ${${LIBRARY}_LIBRARY})\n  endforeach()\n\n  if(UNIX AND NOT APPLE)\n    pkg_check_modules(X11XCB_XCBGLX_FONTCONFIG REQUIRED x11-xcb xcb-glx fontconfig)\n    list(APPEND QT5_LIBRARIES ${X11XCB_XCBGLX_FONTCONFIG_STATIC_LIBRARIES})\n  endif()\nendif()\n\nmessage(STATUS \"Using Boost include dir at ${Boost_INCLUDE_DIRS}\")\nmessage(STATUS \"Using Boost libraries at ${Boost_LIBRARIES}\")\n\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\nif(MINGW)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wa,-mbig-obj\")\n  set(EXTRA_LIBRARIES mswsock;ws2_32;iphlpapi;crypt32;bcrypt)\n  if(DEPENDS)\n    set(ICU_LIBRARIES icuio icui18n icuuc icudata icutu iconv)\n  else()\n    set(ICU_LIBRARIES icuio icuin icuuc icudt icutu iconv)\n  endif()\nelseif(APPLE)\n  set(EXTRA_LIBRARIES \"-framework AppKit\")\nelseif(OPENBSD OR ANDROID)\n  set(EXTRA_LIBRARIES \"\")\nelseif(FREEBSD)\n  set(EXTRA_LIBRARIES execinfo)\nelseif(DRAGONFLY)\n  find_library(COMPAT compat)\n  set(EXTRA_LIBRARIES execinfo ${COMPAT})\nelseif(CMAKE_SYSTEM_NAME MATCHES \"(SunOS|Solaris)\")\n  set(EXTRA_LIBRARIES socket nsl resolv)\nelseif(NOT MSVC AND NOT DEPENDS)\n  find_library(RT rt)\n  set(EXTRA_LIBRARIES ${RT})\nendif()\n\nlist(APPEND EXTRA_LIBRARIES ${CMAKE_DL_LIBS})\n\nif(APPLE)\n  include_directories(SYSTEM /usr/include/malloc)\n  if(POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\n  endif()\nendif()\n\nif (APPLE AND NOT IOS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=x86-64 -fvisibility=default -std=c++11\")\nendif()\n\nif(APPLE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=default -DGTEST_HAS_TR1_TUPLE=0\")\nendif()\n\n# warnings\nadd_c_flag_if_supported(-Werror C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Werror CXX_SECURITY_FLAGS)\nadd_c_flag_if_supported(-Wformat C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Wformat CXX_SECURITY_FLAGS)\nadd_c_flag_if_supported(-Wformat-security C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Wformat-security CXX_SECURITY_FLAGS)\n\n# -fstack-protector\nif (NOT OPENBSD AND NOT (WIN32 AND (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1)))\n  add_c_flag_if_supported(-fstack-protector C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-protector CXX_SECURITY_FLAGS)\n  add_c_flag_if_supported(-fstack-protector-strong C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-protector-strong CXX_SECURITY_FLAGS)\nendif()\n\n# New in GCC 8.2\nif (NOT OPENBSD AND NOT (WIN32 AND (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1)))\n  add_c_flag_if_supported(-fcf-protection=full C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fcf-protection=full CXX_SECURITY_FLAGS)\nendif()\nif (NOT WIN32 AND NOT OPENBSD)\n  add_c_flag_if_supported(-fstack-clash-protection C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-clash-protection CXX_SECURITY_FLAGS)\nendif()\n\n# Removed in GCC 9.1 (or before ?), but still accepted, so spams the output\nif (NOT (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1))\n  add_c_flag_if_supported(-mmitigate-rop C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-mmitigate-rop CXX_SECURITY_FLAGS)\nendif()\n\n# linker\nif (APPLE)\n  add_linker_flag_if_supported(-Wl,-bind_at_load LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,-dead_strip LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,-dead_strip_dylibs LD_SECURITY_FLAGS)\nendif()\nif (NOT APPLE AND NOT (WIN32 AND CMAKE_C_COMPILER_ID STREQUAL \"GNU\"))\n  # Windows binaries die on startup with PIE when compiled with GCC\n  add_linker_flag_if_supported(-pie LD_SECURITY_FLAGS)\nendif()\nadd_linker_flag_if_supported(-Wl,-z,relro LD_SECURITY_FLAGS)\nadd_linker_flag_if_supported(-Wl,-z,now LD_SECURITY_FLAGS)\nadd_linker_flag_if_supported(-Wl,-z,noexecstack noexecstack_SUPPORTED)\nif (noexecstack_SUPPORTED)\n  set(LD_SECURITY_FLAGS \"${LD_SECURITY_FLAGS} -Wl,-z,noexecstack\")\nendif()\nadd_linker_flag_if_supported(-Wl,-z,noexecheap noexecheap_SUPPORTED)\nif (noexecheap_SUPPORTED)\n  set(LD_SECURITY_FLAGS \"${LD_SECURITY_FLAGS} -Wl,-z,noexecheap\")\nendif()\n\n# some windows linker bits\nif (WIN32)\n  add_linker_flag_if_supported(-Wl,--dynamicbase LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,--nxcompat LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,--high-entropy-va LD_SECURITY_FLAGS)\nendif()\n\nif(STATIC)\n  add_linker_flag_if_supported(-static-libgcc STATIC_FLAGS)\n  add_linker_flag_if_supported(-static-libstdc++ STATIC_FLAGS)\n  if(MINGW)\n    add_linker_flag_if_supported(-static STATIC_FLAGS)\n  endif()\nendif()\n\n# With GCC 6.1.1 the compiled binary malfunctions due to aliasing. Until that\n# is fixed in the code (Issue #847), force compiler to be conservative.\nadd_c_flag_if_supported(-fno-strict-aliasing C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-fno-strict-aliasing CXX_SECURITY_FLAGS)\n\nadd_c_flag_if_supported(-fPIC C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-fPIC CXX_SECURITY_FLAGS)\n\nmessage(STATUS \"Using C security hardening flags: ${C_SECURITY_FLAGS}\")\nmessage(STATUS \"Using C++ security hardening flags: ${CXX_SECURITY_FLAGS}\")\nmessage(STATUS \"Using linker security hardening flags: ${LD_SECURITY_FLAGS}\")\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c11 ${C_SECURITY_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 ${CXX_SECURITY_FLAGS}\")\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LD_SECURITY_FLAGS} ${STATIC_FLAGS}\")\n\nif (HIDAPI_FOUND OR LibUSB_COMPILE_TEST_PASSED)\n  if (APPLE)\n    if(DEPENDS)\n      list(APPEND EXTRA_LIBRARIES \"-framework Foundation -framework IOKit\")\n    else()\n      find_library(COREFOUNDATION CoreFoundation)\n      find_library(IOKIT IOKit)\n      list(APPEND EXTRA_LIBRARIES ${IOKIT})\n      list(APPEND EXTRA_LIBRARIES ${COREFOUNDATION})\n    endif()\n  endif()\n  if (WIN32)\n    find_library(VERSION_LIBRARY version PATHS /usr/x86_64-w64-mingw32/lib)\n    if(VERSION_LIBRARY STREQUAL \"VERSION_LIBRARY-NOTFOUND\")\n      set(VERSION_LIBRARY Version)\n    endif()\n    list(APPEND EXTRA_LIBRARIES setupapi ${VERSION_LIBRARY})\n  endif()\nendif()\n\nadd_subdirectory(translations)\n\nadd_subdirectory(src)\n"], "fixing_code": ["cmake_minimum_required(VERSION 3.5)\nproject(monero-gui)\n\nmessage(STATUS \"Initiating compile using CMake ${CMAKE_VERSION}\")\n\nset(VERSION_MAJOR \"17\")\nset(VERSION_MINOR \"0\")\nset(VERSION_REVISION \"1\")\nset(VERSION \"0.${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REVISION}\")\n\noption(STATIC \"Link libraries statically, requires static Qt\")\n\noption(USE_DEVICE_TREZOR \"Trezor support compilation\" ON)\noption(ENABLE_PASS_STRENGTH_METER \"Enable zxcvbn library for password strength\" OFF)\noption(WITH_SCANNER \"Enable webcam QR scanner\" OFF)\noption(DEV_MODE \"Checkout latest monero master on build\" OFF)\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${CMAKE_SOURCE_DIR}/cmake\")\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckLinkerFlag)\ninclude(FindCcache)\n\nif(DEBUG)\n\tset(CMAKE_VERBOSE_MAKEFILE ON)\nendif()\n\nset(BUILD_GUI_DEPS ON)\nset(ARCH \"x86-64\" CACHE STRING \"Target architecture\")\nset(BUILD_64 ON CACHE BOOL \"Build 64-bit binaries\")\n\nif(NOT MANUAL_SUBMODULES)\n  find_package(Git)\n  if(GIT_FOUND)\n    if(NOT DEV_MODE)\n      function (check_submodule relative_path)\n        execute_process(COMMAND git rev-parse \"HEAD\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${relative_path} OUTPUT_VARIABLE localHead)\n        execute_process(COMMAND git rev-parse \"HEAD:${relative_path}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE checkedHead)\n        string(COMPARE EQUAL \"${localHead}\" \"${checkedHead}\" upToDate)\n        if (upToDate)\n          message(STATUS \"Submodule '${relative_path}' is up-to-date\")\n        else()\n          message(FATAL_ERROR \"Submodule '${relative_path}' is not using the checked head. Please update all submodules with\\ngit submodule update --init --force --recursive\\nor run cmake with -DMANUAL_SUBMODULES=1,\\n or if you want to build from latest master run cmake with -DDEV_MODE=ON,\\n or run make devmode\")\n        endif()\n      endfunction ()\n      message(STATUS \"Checking submodules\")\n      check_submodule(monero)\n    else()\n      execute_process(COMMAND ${GIT_EXECUTABLE} fetch WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_FETCH_RESULT)\n      execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f origin/master WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_CHECKOUT_MASTER_RESULT)\n      execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --force --recursive WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/monero RESULT_VARIABLE GIT_SUBMODULE_UPDATE_RESULT)\n      if(NOT GIT_FETCH_RESULT EQUAL \"0\" OR NOT GIT_CHECKOUT_MASTER_RESULT EQUAL \"0\" OR NOT GIT_SUBMODULE_UPDATE_RESULT EQUAL \"0\")\n        message(FATAL_ERROR \"Updating git submodule to master (-DDEV_MODE=ON) failed\")\n      endif()\n    endif()\n  endif()\nendif()\n\nadd_subdirectory(monero)\n\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\nset(CMAKE_AUTOUIC ON)\n\nset_property(TARGET wallet_merged PROPERTY FOLDER \"monero\")\nget_directory_property(ARCH_WIDTH DIRECTORY \"monero\" DEFINITION ARCH_WIDTH)\nget_directory_property(UNBOUND_LIBRARY DIRECTORY \"monero\" DEFINITION UNBOUND_LIBRARY)\nget_directory_property(DEVICE_TREZOR_READY DIRECTORY \"monero\" DEFINITION DEVICE_TREZOR_READY)\nget_directory_property(TREZOR_DEP_LIBS DIRECTORY \"monero\" DEFINITION TREZOR_DEP_LIBS)\n\nif (NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  add_definitions(-DQT_NO_DEBUG)\nendif()\n\nif(STATIC)\n  message(STATUS \"Initiating static build\")\n  set(Boost_USE_STATIC_LIBS ON)\n  set(Boost_USE_STATIC_RUNTIME ON)\n  set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n  add_definitions(-DMONERO_GUI_STATIC)\nendif()\n\n# Include password strength library\nif(ENABLE_PASS_STRENGTH_METER)\n    message(STATUS \"Building with pass strength meter support.\")\nelse()\n    add_definitions(-DDISABLE_PASS_STRENGTH_METER)\nendif()\n\ninclude(CMakePackageConfigHelpers)\n\n# force version update\nfunction (monero_gui_add_library_with_deps)\n  cmake_parse_arguments(MONERO_ADD_LIBRARY \"\" \"NAME\" \"DEPENDS;SOURCES\" ${ARGN})\n  source_group(\"${MONERO_ADD_LIBRARY_NAME}\" FILES ${MONERO_ADD_LIBRARY_SOURCES})\n\n  # Define a (\"virtual\") object library and an actual library that links those\n  # objects together. The virtual libraries can be arbitrarily combined to link\n  # any subset of objects into one library archive. This is used for releasing\n  # libwallet, which combines multiple components.\n  set(objlib obj_${MONERO_ADD_LIBRARY_NAME})\n  add_library(${objlib} OBJECT ${MONERO_ADD_LIBRARY_SOURCES})\n  add_library(\"${MONERO_ADD_LIBRARY_NAME}\" $<TARGET_OBJECTS:${objlib}>)\n  if (MONERO_ADD_LIBRARY_DEPENDS)\n    add_dependencies(${objlib} ${MONERO_ADD_LIBRARY_DEPENDS})\n  endif()\n  set_property(TARGET \"${MONERO_ADD_LIBRARY_NAME}\" PROPERTY FOLDER \"libs\")\n  target_compile_definitions(${objlib}\n    PRIVATE $<TARGET_PROPERTY:${MONERO_ADD_LIBRARY_NAME},INTERFACE_COMPILE_DEFINITIONS>)\nendfunction ()\n\nfunction (monero_gui_add_library name)\n    monero_gui_add_library_with_deps(NAME \"${name}\" SOURCES ${ARGN})\nendfunction()\n\ninclude_directories(${EASYLOGGING_INCLUDE})\nlink_directories(${EASYLOGGING_LIBRARY_DIRS})\n\n\ninclude(VersionGui)\nmonero_gui_add_library(gui_version SOURCES version.js DEPENDS genversiongui)\n\nmessage(STATUS \"${CMAKE_MODULE_PATH}\")\n\n# OpenSSL\nif(APPLE AND NOT OPENSSL_ROOT_DIR)\n  execute_process(COMMAND brew --prefix openssl OUTPUT_VARIABLE OPENSSL_ROOT_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\nfind_package(OpenSSL REQUIRED)\nmessage(STATUS \"OpenSSL: Version ${OPENSSL_VERSION}\")\nmessage(STATUS \"OpenSSL: include dir at ${OPENSSL_INCLUDE_DIR}\")\nmessage(STATUS \"OpenSSL: libraries at ${OPENSSL_LIBRARIES} ${OPENSSL_SSL_LIBRARIES}\")\n\n# Zbar (for QR scanner)\nif(WITH_SCANNER)\n    add_definitions(-DWITH_SCANNER)\n    find_package(ZBar0)\n    message(STATUS \"libzbar: include dir at ${ZBAR_INCLUDE_DIR}\")\n    message(STATUS \"libzbar: libraries at ${ZBAR_LIBRARIES}\")\nendif()\n\n# Sodium\nfind_library(SODIUM_LIBRARY sodium)\nmessage(STATUS \"libsodium: libraries at ${SODIUM_LIBRARY}\")\n\n# LibUSB\nfind_package(LibUSB)\nmessage(STATUS \"libusb: include dir at ${LibUSB_INCLUDE_DIRS}\")\nmessage(STATUS \"libusb: libraries at ${LibUSB_LIBRARIES}\")\n\n# HIDApi\nfind_package(HIDAPI REQUIRED)\nmessage(STATUS \"libhidapi: include dir at ${HIDAPI_INCLUDE_DIRS}\")\nmessage(STATUS \"libhidapi: libraries at ${HIDAPI_LIBRARIES}\")\n\n# Boost\nif(DEBUG)\n    set(Boost_DEBUG ON)\nendif()\nif(APPLE AND NOT BOOST_ROOT)\n  execute_process(COMMAND brew --prefix boost OUTPUT_VARIABLE BOOST_ROOT OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\nif(MINGW)\n  set(Boost_THREADAPI win32)\nendif()\nfind_package(Boost 1.58 REQUIRED COMPONENTS\n\t\tsystem\n\t\tfilesystem\n\t\tthread\n\t\tdate_time\n\t\tchrono\n\t\tregex\n\t\tserialization\n\t\tprogram_options\n\t\tlocale)\n\nif(UNIX AND NOT APPLE)\n    set(CMAKE_SKIP_RPATH ON)\n    find_package(X11 REQUIRED)\n    message(STATUS \"X11_FOUND = ${X11_FOUND}\")\n    message(STATUS \"X11_INCLUDE_DIR = ${X11_INCLUDE_DIR}\")\n    message(STATUS \"X11_LIBRARIES = ${X11_LIBRARIES}\")\n    include_directories(${X11_INCLUDE_DIR})\n    link_directories(${X11_LIBRARIES})\n    if(STATIC)\n        find_library(XCB_LIBRARY xcb)\n        message(STATUS \"Found xcb library: ${XCB_LIBRARY}\")\n    endif()\nendif()\n\nif(MINGW)\n    string(REGEX MATCH \"^[^/]:/[^/]*\" msys2_install_path \"${CMAKE_C_COMPILER}\")\n    message(STATUS \"MSYS location: ${msys2_install_path}\")\n    set(CMAKE_INCLUDE_PATH \"${msys2_install_path}/mingw${ARCH_WIDTH}/include\")\n    # This is necessary because otherwise CMake will make Boost libraries -lfoo\n    # rather than a full path. Unfortunately, this makes the shared libraries get\n    # linked due to a bug in CMake which misses putting -static flags around the\n    # -lfoo arguments.\n    set(DEFLIB ${msys2_install_path}/mingw${ARCH_WIDTH}/lib)\n    list(REMOVE_ITEM CMAKE_C_IMPLICIT_LINK_DIRECTORIES ${DEFLIB})\n    list(REMOVE_ITEM CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES ${DEFLIB})\nendif()\n\nset(QT5_LIBRARIES\n  Qt5Core\n  Qt5Quick\n  Qt5Widgets\n  Qt5Gui\n  Qt5Network\n  Qt5Qml\n  Qt5Svg\n  Qt5Xml\n)\n\nif(WITH_SCANNER)\n  list(APPEND QT5_LIBRARIES Qt5Multimedia)\nendif()\n\nif(APPLE)\n  list(APPEND QT5_LIBRARIES Qt5MacExtras)\n\n  if(NOT CMAKE_PREFIX_PATH AND DEFINED ENV{CMAKE_PREFIX_PATH})\n    message(STATUS \"Using CMAKE_PREFIX_PATH environment variable: '$ENV{CMAKE_PREFIX_PATH}'\")\n    set(CMAKE_PREFIX_PATH $ENV{CMAKE_PREFIX_PATH})\n  endif()\n  if(NOT CMAKE_PREFIX_PATH)\n    execute_process(COMMAND brew --prefix qt5 OUTPUT_VARIABLE QT5_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)\n    list(APPEND CMAKE_PREFIX_PATH ${QT5_DIR})\n  endif()\n\n  if(CMAKE_PREFIX_PATH)\n    include_directories(${CMAKE_PREFIX_PATH}/include)\n    set(CMAKE_BUILD_RPATH \"${CMAKE_PREFIX_PATH}/lib\")\n  endif()\nendif()\n\nfind_package(PkgConfig REQUIRED)\n\n# TODO: drop this once we switch to Qt 5.14+\npkg_check_modules(Qt5QmlModels_PKG_CONFIG QUIET Qt5QmlModels)\nif(Qt5QmlModels_PKG_CONFIG_FOUND)\n  list(APPEND QT5_LIBRARIES Qt5QmlModels)\nendif()\n\n# TODO: drop this once we switch to Qt 5.12+\nfind_package(Qt5XmlPatterns QUIET)\nif(Qt5XmlPatterns_FOUND)\n  list(APPEND QT5_LIBRARIES Qt5XmlPatterns)\nendif()\n\nforeach(QT5_MODULE ${QT5_LIBRARIES})\n  find_package(${QT5_MODULE} REQUIRED)\n  include_directories(${${QT5_MODULE}_INCLUDE_DIRS})\nendforeach()\n\npkg_check_modules(QT5_PKG_CONFIG REQUIRED ${QT5_LIBRARIES})\n\nif(QT5_PKG_CONFIG_FOUND)\n  set(QT5_PKG_CONFIG \"QT5_PKG_CONFIG\")\n  if(STATIC)\n    set(QT5_PKG_CONFIG \"${QT5_PKG_CONFIG}_STATIC\")\n  endif()\n\n  if(APPLE)\n    list(JOIN ${QT5_PKG_CONFIG}_LDFLAGS_OTHER \" \" ${QT5_PKG_CONFIG}_LDFLAGS_OTHER)\n    list(JOIN ${QT5_PKG_CONFIG}_LIBRARIES \" \" ${QT5_PKG_CONFIG}_LIBRARIES)\n    list(JOIN ${QT5_PKG_CONFIG}_INCLUDE_DIRS \" \" ${QT5_PKG_CONFIG}_INCLUDE_DIRS)\n\n    # temporal workaround for https://bugreports.qt.io/browse/QTBUG-80922\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_LDFLAGS_OTHER \"${${QT5_PKG_CONFIG}_LDFLAGS_OTHER}\")\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_LIBRARIES \"${${QT5_PKG_CONFIG}_LIBRARIES}\")\n    STRING(REPLACE \"${QT5_PKG_CONFIG_Qt5Core_PREFIX}\" \"${CMAKE_PREFIX_PATH}\" ${QT5_PKG_CONFIG}_INCLUDE_DIRS \"${${QT5_PKG_CONFIG}_INCLUDE_DIRS}\")\n  endif()\n\n  set(QT5_LIBRARIES ${${QT5_PKG_CONFIG}_LIBRARIES} ${${QT5_PKG_CONFIG}_LDFLAGS_OTHER})\n  include_directories(${${QT5_PKG_CONFIG}_INCLUDE_DIRS})\n  link_directories(${${QT5_PKG_CONFIG}_LIBRARY_DIRS})\nendif()\n\nlist(APPEND QT5_LIBRARIES\n  ${Qt5Gui_PLUGINS}\n  ${Qt5Svg_PLUGINS}\n  ${Qt5Qml_PLUGINS}\n  ${Qt5Network_PLUGINS}\n)\n\nif(STATIC)\n  set(QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/Qt/labs/folderlistmodel)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/Qt/labs/settings)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtGraphicalEffects)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtGraphicalEffects/private)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtMultimedia)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Controls)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Controls.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Dialogs)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Dialogs/Private)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Layouts)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/PrivateWidgets)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Templates.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/Window.2)\n  list(APPEND QT5_EXTRA_PATHS ${QT5_PKG_CONFIG_Qt5Qml_PREFIX}/qml/QtQuick/XmlListModel)\n\n  set(QT5_EXTRA_LIBRARIES_LIST\n    qtquicktemplates2plugin\n    Qt5QuickTemplates2\n    qtquickcontrols2plugin\n    Qt5QuickControls2\n    dialogplugin\n    dialogsprivateplugin\n    qmlfolderlistmodelplugin\n    qmlsettingsplugin\n    qmlxmllistmodelplugin\n    qquicklayoutsplugin\n  )\n\n  if(WITH_SCANNER)\n    list(APPEND QT5_EXTRA_LIBRARIES_LIST\n      declarative_multimedia\n      Qt5MultimediaQuick_p\n    )\n  endif()\n\n  list(APPEND QT5_EXTRA_LIBRARIES_LIST\n    qtgraphicaleffectsplugin\n    qtgraphicaleffectsprivate\n    qtquick2plugin\n    qtquickcontrolsplugin\n    widgetsplugin\n    windowplugin\n  )\n\n  set(QT5_EXTRA_LIBRARIES)\n  foreach(LIBRARY ${QT5_EXTRA_LIBRARIES_LIST})\n    find_library(${LIBRARY}_LIBRARY ${LIBRARY} PATHS ${QT5_EXTRA_PATHS} REQUIRED)\n    list(APPEND QT5_EXTRA_LIBRARIES ${${LIBRARY}_LIBRARY})\n  endforeach()\n\n  if(MINGW)\n    if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      list(APPEND QT5_EXTRA_LIBRARIES D3D11 Dwrite D2d1)\n    endif()\n  endif()\n\n  set(QT5_LIBRARIES\n    ${QT5_EXTRA_LIBRARIES}\n    ${QT5_LIBRARIES}\n  )\n\n  set(QT5_INTEGRATION_LIBRARIES_LIST\n    Qt5EventDispatcherSupport\n    Qt5PacketProtocol\n    Qt5ThemeSupport\n    Qt5FontDatabaseSupport\n  )\n\n  if(UNIX AND NOT APPLE)\n    list(APPEND QT5_INTEGRATION_LIBRARIES_LIST\n      Qt5XcbQpa\n      xcb-static\n      Qt5ServiceSupport\n      Qt5GlxSupport\n    )\n  elseif(MINGW)\n    list(APPEND QT5_INTEGRATION_LIBRARIES_LIST qtfreetype)\n  endif()\n\n  foreach(LIBRARY ${QT5_INTEGRATION_LIBRARIES_LIST})\n    find_library(${LIBRARY}_LIBRARY ${LIBRARY} PATHS ${QT5_EXTRA_PATHS} REQUIRED)\n    list(APPEND QT5_LIBRARIES ${${LIBRARY}_LIBRARY})\n  endforeach()\n\n  if(UNIX AND NOT APPLE)\n    pkg_check_modules(X11XCB_XCBGLX_FONTCONFIG REQUIRED x11-xcb xcb-glx fontconfig)\n    list(APPEND QT5_LIBRARIES ${X11XCB_XCBGLX_FONTCONFIG_STATIC_LIBRARIES})\n  endif()\nendif()\n\nmessage(STATUS \"Using Boost include dir at ${Boost_INCLUDE_DIRS}\")\nmessage(STATUS \"Using Boost libraries at ${Boost_LIBRARIES}\")\n\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\nif(MINGW)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wa,-mbig-obj\")\n  set(EXTRA_LIBRARIES mswsock;ws2_32;iphlpapi;crypt32;bcrypt)\n  if(DEPENDS)\n    set(ICU_LIBRARIES icuio icui18n icuuc icudata icutu iconv)\n  else()\n    set(ICU_LIBRARIES icuio icuin icuuc icudt icutu iconv)\n  endif()\nelseif(APPLE)\n  set(EXTRA_LIBRARIES \"-framework AppKit\")\nelseif(OPENBSD OR ANDROID)\n  set(EXTRA_LIBRARIES \"\")\nelseif(FREEBSD)\n  set(EXTRA_LIBRARIES execinfo)\nelseif(DRAGONFLY)\n  find_library(COMPAT compat)\n  set(EXTRA_LIBRARIES execinfo ${COMPAT})\nelseif(CMAKE_SYSTEM_NAME MATCHES \"(SunOS|Solaris)\")\n  set(EXTRA_LIBRARIES socket nsl resolv)\nelseif(NOT MSVC AND NOT DEPENDS)\n  find_library(RT rt)\n  set(EXTRA_LIBRARIES ${RT})\nendif()\n\nlist(APPEND EXTRA_LIBRARIES ${CMAKE_DL_LIBS})\n\nif(APPLE)\n  include_directories(SYSTEM /usr/include/malloc)\n  if(POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\n  endif()\nendif()\n\nif (APPLE AND NOT IOS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=x86-64 -fvisibility=default -std=c++11\")\nendif()\n\nif(APPLE)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=default -DGTEST_HAS_TR1_TUPLE=0\")\nendif()\n\n# warnings\nadd_c_flag_if_supported(-Werror C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Werror CXX_SECURITY_FLAGS)\nadd_c_flag_if_supported(-Wformat C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Wformat CXX_SECURITY_FLAGS)\nadd_c_flag_if_supported(-Wformat-security C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-Wformat-security CXX_SECURITY_FLAGS)\n\n# -fstack-protector\nif (NOT OPENBSD AND NOT (WIN32 AND (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1)))\n  add_c_flag_if_supported(-fstack-protector C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-protector CXX_SECURITY_FLAGS)\n  add_c_flag_if_supported(-fstack-protector-strong C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-protector-strong CXX_SECURITY_FLAGS)\nendif()\n\n# New in GCC 8.2\nif (NOT OPENBSD AND NOT (WIN32 AND (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1)))\n  add_c_flag_if_supported(-fcf-protection=full C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fcf-protection=full CXX_SECURITY_FLAGS)\nendif()\nif (NOT WIN32 AND NOT OPENBSD)\n  add_c_flag_if_supported(-fstack-clash-protection C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-fstack-clash-protection CXX_SECURITY_FLAGS)\nendif()\n\n# Removed in GCC 9.1 (or before ?), but still accepted, so spams the output\nif (NOT (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1))\n  add_c_flag_if_supported(-mmitigate-rop C_SECURITY_FLAGS)\n  add_cxx_flag_if_supported(-mmitigate-rop CXX_SECURITY_FLAGS)\nendif()\n\n# linker\nif (APPLE)\n  add_linker_flag_if_supported(-Wl,-bind_at_load LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,-dead_strip LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,-dead_strip_dylibs LD_SECURITY_FLAGS)\nendif()\nif (NOT APPLE AND NOT (WIN32 AND CMAKE_C_COMPILER_ID STREQUAL \"GNU\"))\n  # Windows binaries die on startup with PIE when compiled with GCC\n  add_linker_flag_if_supported(-pie LD_SECURITY_FLAGS)\nendif()\nadd_linker_flag_if_supported(-Wl,-z,relro LD_SECURITY_FLAGS)\nadd_linker_flag_if_supported(-Wl,-z,now LD_SECURITY_FLAGS)\nadd_linker_flag_if_supported(-Wl,-z,noexecstack noexecstack_SUPPORTED)\nif (noexecstack_SUPPORTED)\n  set(LD_SECURITY_FLAGS \"${LD_SECURITY_FLAGS} -Wl,-z,noexecstack\")\nendif()\nadd_linker_flag_if_supported(-Wl,-z,noexecheap noexecheap_SUPPORTED)\nif (noexecheap_SUPPORTED)\n  set(LD_SECURITY_FLAGS \"${LD_SECURITY_FLAGS} -Wl,-z,noexecheap\")\nendif()\n\n# some windows linker bits\nif (WIN32)\n  add_linker_flag_if_supported(-Wl,--dynamicbase LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,--nxcompat LD_SECURITY_FLAGS)\n  add_linker_flag_if_supported(-Wl,--high-entropy-va LD_SECURITY_FLAGS)\nendif()\n\nif(STATIC)\n  add_linker_flag_if_supported(-static-libgcc STATIC_FLAGS)\n  add_linker_flag_if_supported(-static-libstdc++ STATIC_FLAGS)\n  if(MINGW)\n    add_linker_flag_if_supported(-static STATIC_FLAGS)\n  endif()\nendif()\n\n# With GCC 6.1.1 the compiled binary malfunctions due to aliasing. Until that\n# is fixed in the code (Issue #847), force compiler to be conservative.\nadd_c_flag_if_supported(-fno-strict-aliasing C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-fno-strict-aliasing CXX_SECURITY_FLAGS)\n\nadd_c_flag_if_supported(-fPIC C_SECURITY_FLAGS)\nadd_cxx_flag_if_supported(-fPIC CXX_SECURITY_FLAGS)\n\nmessage(STATUS \"Using C security hardening flags: ${C_SECURITY_FLAGS}\")\nmessage(STATUS \"Using C++ security hardening flags: ${CXX_SECURITY_FLAGS}\")\nmessage(STATUS \"Using linker security hardening flags: ${LD_SECURITY_FLAGS}\")\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c11 ${C_SECURITY_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 ${CXX_SECURITY_FLAGS}\")\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LD_SECURITY_FLAGS} ${STATIC_FLAGS}\")\n\nif (HIDAPI_FOUND OR LibUSB_COMPILE_TEST_PASSED)\n  if (APPLE)\n    if(DEPENDS)\n      list(APPEND EXTRA_LIBRARIES \"-framework Foundation -framework IOKit\")\n    else()\n      find_library(COREFOUNDATION CoreFoundation)\n      find_library(IOKIT IOKit)\n      list(APPEND EXTRA_LIBRARIES ${IOKIT})\n      list(APPEND EXTRA_LIBRARIES ${COREFOUNDATION})\n    endif()\n  endif()\n  if (WIN32)\n    find_library(VERSION_LIBRARY version PATHS /usr/x86_64-w64-mingw32/lib)\n    if(VERSION_LIBRARY STREQUAL \"VERSION_LIBRARY-NOTFOUND\")\n      set(VERSION_LIBRARY Version)\n    endif()\n    list(APPEND EXTRA_LIBRARIES setupapi ${VERSION_LIBRARY})\n  endif()\nendif()\n\nadd_subdirectory(translations)\n\nadd_subdirectory(src)\n"], "filenames": ["CMakeLists.txt"], "buggy_code_start_loc": [177], "buggy_code_end_loc": [177], "fixing_code_start_loc": [178], "fixing_code_end_loc": [179], "type": "CWE-427", "message": "monero-wallet-gui in Monero GUI before 0.17.1.0 includes the . directory in an embedded RPATH (with a preference ahead of /usr/lib), which allows local users to gain privileges via a Trojan horse library in the current working directory.", "other": {"cve": {"id": "CVE-2020-26947", "sourceIdentifier": "cve@mitre.org", "published": "2020-10-10T21:15:11.957", "lastModified": "2022-04-28T18:23:00.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "monero-wallet-gui in Monero GUI before 0.17.1.0 includes the . directory in an embedded RPATH (with a preference ahead of /usr/lib), which allows local users to gain privileges via a Trojan horse library in the current working directory."}, {"lang": "es", "value": "monero-wallet-gui en Monero GUI versiones anteriores 0.17.1.0 incluye el directorio . en una RPATH insertada (con una preferencia antes de /usr/lib), que permite a los usuarios locales alcanzar privilegios por medio de una biblioteca de tipo caballo de Troya en el directorio de trabajo actual"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-427"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getmonero:monero:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.17.1.0", "matchCriteriaId": "1141EAF6-6F93-45D3-8136-9C5D59A5A228"}]}]}], "references": [{"url": "https://github.com/monero-project/monero-gui/commit/6ed536982953d870010d8fa065dccbffeb6cae50", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/monero-project/monero-gui/issues/3142#issuecomment-705940446", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/monero-project/monero-gui/commit/6ed536982953d870010d8fa065dccbffeb6cae50"}}