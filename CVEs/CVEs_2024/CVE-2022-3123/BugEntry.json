{"buggy_code": ["<?php\n\nnamespace dokuwiki\\Ui;\n\nuse dokuwiki\\ChangeLog\\PageChangeLog;\nuse dokuwiki\\ChangeLog\\RevisionInfo;\nuse dokuwiki\\Form\\Form;\nuse InlineDiffFormatter;\nuse TableDiffFormatter;\n\n/**\n * DokuWiki PageDiff Interface\n *\n * @author Andreas Gohr <andi@splitbrain.org>\n * @author Satoshi Sahara <sahara.satoshi@gmail.com>\n * @package dokuwiki\\Ui\n */\nclass PageDiff extends Diff\n{\n    /* @var PageChangeLog */\n    protected $changelog;\n\n    /* @var RevisionInfo older revision */\n    protected $RevInfo1;\n    /* @var RevisionInfo newer revision */\n    protected $RevInfo2;\n\n    /* @var string */\n    protected $text;\n\n    /**\n     * PageDiff Ui constructor\n     *\n     * @param string $id  page id\n     */\n    public function __construct($id = null)\n    {\n        global $INFO;\n        if (!isset($id)) $id = $INFO['id'];\n\n        // init preference\n        $this->preference['showIntro'] = true;\n        $this->preference['difftype'] = 'sidebyside'; // diff view type: inline or sidebyside\n\n        parent::__construct($id);\n    }\n\n    /** @inheritdoc */\n    protected function setChangeLog()\n    {\n        $this->changelog = new PageChangeLog($this->id);\n    }\n\n    /**\n     * Set text to be compared with most current version\n     * when it has been externally edited\n     * exclusively use of the compare($old, $new) method\n     *\n     * @param string $text\n     * @return $this\n     */\n    public function compareWith($text = null)\n    {\n        if (isset($text)) {\n            $this->text = $text;\n            $changelog =& $this->changelog;\n\n            // revision info object of older file (left side)\n            $this->RevInfo1 = new RevisionInfo($changelog->getCurrentRevisionInfo());\n            $this->RevInfo1->append([\n                'current' => true,\n                'text' => rawWiki($this->id),\n            ]);\n\n            // revision info object of newer file (right side)\n            $this->RevInfo2 = new RevisionInfo();\n            $this->RevInfo2->append([\n                'date' => false,\n              //'ip'   => '127.0.0.1',\n              //'type' => DOKU_CHANGE_TYPE_CREATE,\n                'id'   => $this->id,\n              //'user' => '',\n              //'sum'  => '',\n                'extra' => 'compareWith',\n              //'sizechange' => strlen($this->text) - io_getSizeFile(wikiFN($this->id)),\n                'current' => false,\n                'text' => cleanText($this->text),\n            ]);\n        }\n        return $this;\n    }\n\n    /**\n     * Handle requested revision(s) and diff view preferences\n     *\n     * @return void\n     */\n    protected function handle()\n    {\n        global $INPUT;\n\n        // retrieve requested rev or rev2\n        if (!isset($this->RevInfo1, $this->RevInfo2)) {\n            parent::handle();\n        }\n\n        // requested diff view type\n        if ($INPUT->has('difftype')) {\n            $this->preference['difftype'] = $INPUT->str('difftype');\n        } else {\n            // read preference from DokuWiki cookie. PageDiff only\n            $mode = get_doku_pref('difftype', null);\n            if (isset($mode)) $this->preference['difftype'] = $mode;\n        }\n\n        if (!$INPUT->has('rev') && !$INPUT->has('rev2')) {\n            global $INFO, $REV;\n            if ($this->id == $INFO['id'])\n                $REV = $this->rev1; // store revision back in $REV\n        }\n    }\n\n    /**\n     * Prepare revision info of comparison pair\n     */\n    protected function preProcess()\n    {\n        global $lang;\n\n        $changelog =& $this->changelog;\n\n        // create revision info object for older and newer sides\n        // RevInfo1 : older, left side\n        // RevInfo2 : newer, right side\n        \n        $changelogRev1 = $changelog->getRevisionInfo($this->rev1);\n        $changelogRev2 = $changelog->getRevisionInfo($this->rev2);\n        $changelogRev1['media'] = $changelogRev2['media'] = false;\n\n        $this->RevInfo1 = new RevisionInfo($changelogRev1);\n        $this->RevInfo2 = new RevisionInfo($changelogRev2);\n        \n        foreach ([$this->RevInfo1, $this->RevInfo2] as $RevInfo) {\n            $isCurrent = $changelog->isCurrentRevision($RevInfo->val('date'));\n            $RevInfo->isCurrent($isCurrent);\n\n            if ($RevInfo->val('type') == DOKU_CHANGE_TYPE_DELETE || empty($RevInfo->val('type'))) {\n                $text = '';\n            } else {\n                $rev = $isCurrent ? '' : $RevInfo->val('date');\n                $text = rawWiki($this->id, $rev);\n            }\n            $RevInfo->append(['text' => $text]);\n        }\n\n        // msg could displayed only when wrong url typed in browser address bar\n        if ($this->rev2 === false) {\n            msg(sprintf($lang['page_nonexist_rev'],\n                $this->id,\n                wl($this->id, ['do'=>'edit']),\n                $this->id), -1);\n        } elseif (!$this->rev1 || $this->rev1 == $this->rev2) {\n            msg('no way to compare when less than two revisions', -1);\n        }\n    }\n\n    /**\n     * Show diff\n     * between current page version and provided $text\n     * or between the revisions provided via GET or POST\n     *\n     * @author Andreas Gohr <andi@splitbrain.org>\n     *\n     * @return void\n     */\n    public function show()\n    {\n        global $lang;\n\n        if (!isset($this->RevInfo1, $this->RevInfo2)) {\n            // retrieve form parameters: rev, rev2, difftype\n            $this->handle();\n            // prepare revision info of comparison pair, except PageConfrict or PageDraft\n            $this->preProcess();\n        }\n\n        // revision title\n        $rev1Title = trim($this->RevInfo1->showRevisionTitle() .' '. $this->RevInfo1->showCurrentIndicator());\n        $rev1Summary = ($this->RevInfo1->val('date'))\n            ? $this->RevInfo1->showEditSummary() .' '. $this->RevInfo1->showEditor()\n            : '';\n\n        if ($this->RevInfo2->val('extra') == 'compareWith') {\n            $rev2Title = $lang['yours'];\n            $rev2Summary = '';\n        } else {\n            $rev2Title = trim($this->RevInfo2->showRevisionTitle() .' '. $this->RevInfo2->showCurrentIndicator());\n            $rev2Summary = ($this->RevInfo2->val('date'))\n                ? $this->RevInfo2->showEditSummary() .' '. $this->RevInfo2->showEditor()\n                : '';\n        }\n\n        // create difference engine object\n        $Difference = new \\Diff(\n                explode(\"\\n\", $this->RevInfo1->val('text')),\n                explode(\"\\n\", $this->RevInfo2->val('text'))\n        );\n\n        // build paired navigation\n        [$rev1Navi, $rev2Navi] = $this->buildRevisionsNavigation();\n\n        // display intro\n        if ($this->preference['showIntro']) echo p_locale_xhtml('diff');\n\n        // print form to choose diff view type, and exact url reference to the view\n        $this->showDiffViewSelector();\n\n        // assign minor edit checker to the variable\n        $classEditType = function ($changeType) {\n            return ($changeType === DOKU_CHANGE_TYPE_MINOR_EDIT) ? ' class=\"minor\"' : '';\n        };\n\n        // display diff view table\n        echo '<div class=\"table\">';\n        echo '<table class=\"diff diff_'.$this->preference['difftype'] .'\">';\n\n        //navigation and header\n        switch ($this->preference['difftype']) {\n            case 'inline':\n                $title1 = $rev1Title . ($rev1Summary ? '<br />'.$rev1Summary : '');\n                $title2 = $rev2Title . ($rev2Summary ? '<br />'.$rev2Summary : '');\n                // no navigation for PageConflict or PageDraft\n                if ($this->RevInfo2->val('extra') !== 'compareWith') {\n                    echo '<tr>'\n                        .'<td class=\"diff-lineheader\">-</td>'\n                        .'<td class=\"diffnav\">'. $rev1Navi .'</td>'\n                        .'</tr>';\n                    echo '<tr>'\n                        .'<th class=\"diff-lineheader\">-</th>'\n                        .'<th'.$classEditType($this->RevInfo1->val('type')).'>'. $title1 .'</th>'\n                        .'</tr>';\n                }\n                echo '<tr>'\n                    .'<td class=\"diff-lineheader\">+</td>'\n                    .'<td class=\"diffnav\">'. $rev2Navi .'</td>'\n                    .'</tr>';\n                echo '<tr>'\n                    .'<th class=\"diff-lineheader\">+</th>'\n                    .'<th'.$classEditType($this->RevInfo2->val('type')).'>'. $title2 .'</th>'\n                    .'</tr>';\n                // create formatter object\n                $DiffFormatter = new InlineDiffFormatter();\n                break;\n\n            case 'sidebyside':\n            default:\n                $title1 = $rev1Title . ($rev1Summary ? ' '.$rev1Summary : '');\n                $title2 = $rev2Title . ($rev2Summary ? ' '.$rev2Summary : '');\n                // no navigation for PageConflict or PageDraft\n                if ($this->RevInfo2->val('extra') !== 'compareWith') {\n                    echo '<tr>'\n                        .'<td colspan=\"2\" class=\"diffnav\">'. $rev1Navi .'</td>'\n                        .'<td colspan=\"2\" class=\"diffnav\">'. $rev2Navi .'</td>'\n                        .'</tr>';\n                }\n                echo '<tr>'\n                    .'<th colspan=\"2\"'.$classEditType($this->RevInfo1->val('type')).'>'.$title1.'</th>'\n                    .'<th colspan=\"2\"'.$classEditType($this->RevInfo2->val('type')).'>'.$title2.'</th>'\n                    .'</tr>';\n                // create formatter object\n                $DiffFormatter = new TableDiffFormatter();\n                break;\n        }\n\n        // output formatted difference\n        echo $this->insertSoftbreaks($DiffFormatter->format($Difference));\n\n        echo '</table>';\n        echo '</div>';\n    }\n\n    /**\n     * Print form to choose diff view type, and exact url reference to the view\n     */\n    protected function showDiffViewSelector()\n    {\n        global $lang;\n\n        // no revisions selector for PageConflict or PageDraft\n        if ($this->RevInfo2->val('extra') == 'compareWith') return;\n\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        echo '<div class=\"diffoptions group\">';\n\n        // create the form to select difftype\n        $form = new Form(['action' => wl()]);\n        $form->setHiddenField('id', $this->id);\n        $form->setHiddenField('rev2[0]', $rev1);\n        $form->setHiddenField('rev2[1]', $rev2);\n        $form->setHiddenField('do', 'diff');\n        $options = array(\n                     'sidebyside' => $lang['diff_side'],\n                     'inline' => $lang['diff_inline'],\n        );\n        $input = $form->addDropdown('difftype', $options, $lang['diff_type'])\n            ->val($this->preference['difftype'])\n            ->addClass('quickselect');\n        $input->useInput(false); // inhibit prefillInput() during toHTML() process\n        $form->addButton('do[diff]', 'Go')->attr('type','submit');\n        echo $form->toHTML();\n\n        // show exact url reference to the view when it is meaningful\n        echo '<p>';\n        if ($rev1 && $rev2) {\n            // link to exactly this view FS#2835\n            $viewUrl = $this->diffViewlink('difflink', $rev1, $rev2);\n        }\n        echo $viewUrl ?? '<br />';\n        echo '</p>';\n\n        echo '</div>';\n    }\n\n    /**\n     * Create html for revision navigation\n     *\n     * The navigation consists of older and newer revisions selectors, each\n     * state mutually depends on the selected revision of opposite side.\n     *\n     * @return string[] html of navigation for both older and newer sides\n     */\n    protected function buildRevisionsNavigation()\n    {\n        $changelog =& $this->changelog;\n\n        if ($this->RevInfo2->val('extra') == 'compareWith') {\n            // no revisions selector for PageConflict or PageDraft\n            return array('', '');\n        }\n\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        // retrieve revisions used in dropdown selectors, even when rev1 or rev2 is false\n        [$revs1, $revs2] = $changelog->getRevisionsAround(\n            ($rev1 ?: $changelog->currentRevision()),\n            ($rev2 ?: $changelog->currentRevision())\n        );\n\n        // build options for dropdown selector\n        $rev1Options = $this->buildRevisionOptions('older', $revs1);\n        $rev2Options = $this->buildRevisionOptions('newer', $revs2);\n\n        // determine previous/next revisions (older/left side)\n        $rev1Prev = $rev1Next = false;\n        if (($index = array_search($rev1, $revs1)) !== false) {\n            $rev1Prev = ($index +1 < count($revs1)) ? $revs1[$index +1] : false;\n            $rev1Next = ($index > 0)                ? $revs1[$index -1] : false;\n        }\n        // determine previous/next revisions (newer/right side)\n        $rev2Prev = $rev2Next = false;\n        if (($index = array_search($rev2, $revs2)) !== false) {\n            $rev2Prev = ($index +1 < count($revs2)) ? $revs2[$index +1] : false;\n            $rev2Next = ($index > 0)                ? $revs2[$index -1] : false;\n        }\n\n        /*\n         * navigation UI for older revisions / Left side:\n         */\n        $rev1Navi = '';\n        // move backward both side: \u25c0\u25c0\n        if ($rev1Prev && $rev2Prev)\n            $rev1Navi .= $this->diffViewlink('diffbothprevrev', $rev1Prev, $rev2Prev);\n        // move backward left side: \u25c0\n        if ($rev1Prev)\n            $rev1Navi .= $this->diffViewlink('diffprevrev', $rev1Prev, $rev2);\n        // dropdown\n        $rev1Navi .= $this->buildDropdownSelector('older', $rev1Options);\n        // move forward left side: \u25b6\n        if ($rev1Next && ($rev1Next < $rev2))\n            $rev1Navi .= $this->diffViewlink('diffnextrev', $rev1Next, $rev2);\n\n        /*\n         * navigation UI for newer revisions / Right side:\n         */\n        $rev2Navi = '';\n        // move backward right side: \u25c0\n        if ($rev2Prev && ($rev1 < $rev2Prev))\n            $rev2Navi .= $this->diffViewlink('diffprevrev', $rev1, $rev2Prev);\n        // dropdown\n        $rev2Navi .= $this->buildDropdownSelector('newer', $rev2Options);\n        // move forward right side: \u25b6\n        if ($rev2Next) {\n            if ($changelog->isCurrentRevision($rev2Next)) {\n                $rev2Navi .= $this->diffViewlink('difflastrev', $rev1, $rev2Next);\n            } else {\n                $rev2Navi .= $this->diffViewlink('diffnextrev', $rev1, $rev2Next);\n            }\n        }\n        // move forward both side: \u25b6\u25b6\n        if ($rev1Next && $rev2Next)\n            $rev2Navi .= $this->diffViewlink('diffbothnextrev', $rev1Next, $rev2Next);\n\n        return array($rev1Navi, $rev2Navi);\n    }\n\n    /**\n     * prepare options for dropdwon selector\n     *\n     * @params string $side  \"older\" or \"newer\"\n     * @params array $revs  list of revsion\n     * @return array\n     */\n    protected function buildRevisionOptions($side, $revs)\n    {\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        $changelog =& $this->changelog;\n        $options = [];\n\n        foreach ($revs as $rev) {\n            $info = $changelog->getRevisionInfo($rev);\n            // revision info may have timestamp key when external edits occurred\n            $info['timestamp'] = $info['timestamp'] ?? true;\n            $date = dformat($info['date']);\n            if ($info['timestamp'] === false) {\n                // exteranlly deleted or older file restored\n                $date = preg_replace('/[0-9a-zA-Z]/','_', $date);\n            }\n            $options[$rev] = array(\n                'label' => implode(' ', [\n                            $date,\n                            editorinfo($info['user'], true),\n                            $info['sum'],\n                           ]),\n                'attrs' => ['title' => $rev],\n            );\n            if (($side == 'older' && ($rev2 && $rev >= $rev2))\n              ||($side == 'newer' && ($rev <= $rev1))\n            ) {\n                $options[$rev]['attrs']['disabled'] = 'disabled';\n            }\n        }\n        return $options;\n    }\n\n    /**\n     * build Dropdown form for revisions navigation\n     *\n     * @params string $side  \"older\" or \"newer\"\n     * @params array $options  dropdown options\n     * @return string\n     */\n    protected function buildDropdownSelector($side, $options)\n    {\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        $form = new Form(['action' => wl($this->id)]);\n        $form->setHiddenField('id', $this->id);\n        $form->setHiddenField('do', 'diff');\n        $form->setHiddenField('difftype', $this->preference['difftype']);\n\n        switch ($side) {\n            case 'older': // left side\n                $form->setHiddenField('rev2[1]', $rev2);\n                $input = $form->addDropdown('rev2[0]', $options)\n                    ->val($rev1)->addClass('quickselect');\n                $input->useInput(false); // inhibit prefillInput() during toHTML() process\n                break;\n            case 'newer': // right side\n                $form->setHiddenField('rev2[0]', $rev1);\n                $input = $form->addDropdown('rev2[1]', $options)\n                    ->val($rev2)->addClass('quickselect');\n                $input->useInput(false); // inhibit prefillInput() during toHTML() process\n                break;\n        }\n        $form->addButton('do[diff]', 'Go')->attr('type','submit');\n        return $form->toHTML();\n    }\n\n    /**\n     * Create html link to a diff view defined by two revisions\n     *\n     * @param string $linktype\n     * @param int $rev1 older revision\n     * @param int $rev2 newer revision or null for diff with current revision\n     * @return string html of link to a diff view\n     */\n    protected function diffViewlink($linktype, $rev1, $rev2 = null)\n    {\n        global $lang;\n        if ($rev1 === false) return '';\n\n        if ($rev2 === null) {\n            $urlparam = array(\n                'do' => 'diff',\n                'rev' => $rev1,\n                'difftype' => $this->preference['difftype'],\n            );\n        } else {\n            $urlparam = array(\n                'do' => 'diff',\n                'rev2[0]' => $rev1,\n                'rev2[1]' => $rev2,\n                'difftype' => $this->preference['difftype'],\n            );\n        }\n        $attr = array(\n            'class' => $linktype,\n            'href'  => wl($this->id, $urlparam, true, '&'),\n            'title' => $lang[$linktype],\n        );\n        return '<a '. buildAttributes($attr) .'><span>'. $lang[$linktype] .'</span></a>';\n    }\n\n\n    /**\n     * Insert soft breaks in diff html\n     *\n     * @param string $diffhtml\n     * @return string\n     */\n    public function insertSoftbreaks($diffhtml)\n    {\n        // search the diff html string for both:\n        // - html tags, so these can be ignored\n        // - long strings of characters without breaking characters\n        return preg_replace_callback('/<[^>]*>|[^<> ]{12,}/', function ($match) {\n            // if match is an html tag, return it intact\n            if ($match[0][0] == '<') return $match[0];\n            // its a long string without a breaking character,\n            // make certain characters into breaking characters by inserting a\n            // word break opportunity (<wbr> tag) in front of them.\n            $regex = <<< REGEX\n(?(?=              # start a conditional expression with a positive look ahead ...\n&\\#?\\\\w{1,6};)     # ... for html entities - we don't want to split them (ok to catch some invalid combinations)\n&\\#?\\\\w{1,6};      # yes pattern - a quicker match for the html entity, since we know we have one\n|\n[?/,&\\#;:]         # no pattern - any other group of 'special' characters to insert a breaking character after\n)+                 # end conditional expression\nREGEX;\n            return preg_replace('<'.$regex.'>xu', '\\0<wbr>', $match[0]);\n        }, $diffhtml);\n    }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace dokuwiki\\Ui;\n\nuse dokuwiki\\ChangeLog\\PageChangeLog;\nuse dokuwiki\\ChangeLog\\RevisionInfo;\nuse dokuwiki\\Form\\Form;\nuse InlineDiffFormatter;\nuse TableDiffFormatter;\n\n/**\n * DokuWiki PageDiff Interface\n *\n * @author Andreas Gohr <andi@splitbrain.org>\n * @author Satoshi Sahara <sahara.satoshi@gmail.com>\n * @package dokuwiki\\Ui\n */\nclass PageDiff extends Diff\n{\n    /* @var PageChangeLog */\n    protected $changelog;\n\n    /* @var RevisionInfo older revision */\n    protected $RevInfo1;\n    /* @var RevisionInfo newer revision */\n    protected $RevInfo2;\n\n    /* @var string */\n    protected $text;\n\n    /**\n     * PageDiff Ui constructor\n     *\n     * @param string $id  page id\n     */\n    public function __construct($id = null)\n    {\n        global $INFO;\n        if (!isset($id)) $id = $INFO['id'];\n\n        // init preference\n        $this->preference['showIntro'] = true;\n        $this->preference['difftype'] = 'sidebyside'; // diff view type: inline or sidebyside\n\n        parent::__construct($id);\n    }\n\n    /** @inheritdoc */\n    protected function setChangeLog()\n    {\n        $this->changelog = new PageChangeLog($this->id);\n    }\n\n    /**\n     * Set text to be compared with most current version\n     * when it has been externally edited\n     * exclusively use of the compare($old, $new) method\n     *\n     * @param string $text\n     * @return $this\n     */\n    public function compareWith($text = null)\n    {\n        if (isset($text)) {\n            $this->text = $text;\n            $changelog =& $this->changelog;\n\n            // revision info object of older file (left side)\n            $this->RevInfo1 = new RevisionInfo($changelog->getCurrentRevisionInfo());\n            $this->RevInfo1->append([\n                'current' => true,\n                'text' => rawWiki($this->id),\n            ]);\n\n            // revision info object of newer file (right side)\n            $this->RevInfo2 = new RevisionInfo();\n            $this->RevInfo2->append([\n                'date' => false,\n              //'ip'   => '127.0.0.1',\n              //'type' => DOKU_CHANGE_TYPE_CREATE,\n                'id'   => $this->id,\n              //'user' => '',\n              //'sum'  => '',\n                'extra' => 'compareWith',\n              //'sizechange' => strlen($this->text) - io_getSizeFile(wikiFN($this->id)),\n                'current' => false,\n                'text' => cleanText($this->text),\n            ]);\n        }\n        return $this;\n    }\n\n    /**\n     * Handle requested revision(s) and diff view preferences\n     *\n     * @return void\n     */\n    protected function handle()\n    {\n        global $INPUT;\n\n        // retrieve requested rev or rev2\n        if (!isset($this->RevInfo1, $this->RevInfo2)) {\n            parent::handle();\n        }\n\n        // requested diff view type\n        $mode = '';\n        if ($INPUT->has('difftype')) {\n            $mode = $INPUT->str('difftype');\n        } else {\n            // read preference from DokuWiki cookie. PageDiff only\n            $mode = get_doku_pref('difftype', null);\n        }\n        if(in_array($mode, ['inline','sidebyside'])) $this->preference['difftype'] = $mode;\n\n        if (!$INPUT->has('rev') && !$INPUT->has('rev2')) {\n            global $INFO, $REV;\n            if ($this->id == $INFO['id'])\n                $REV = $this->rev1; // store revision back in $REV\n        }\n    }\n\n    /**\n     * Prepare revision info of comparison pair\n     */\n    protected function preProcess()\n    {\n        global $lang;\n\n        $changelog =& $this->changelog;\n\n        // create revision info object for older and newer sides\n        // RevInfo1 : older, left side\n        // RevInfo2 : newer, right side\n        \n        $changelogRev1 = $changelog->getRevisionInfo($this->rev1);\n        $changelogRev2 = $changelog->getRevisionInfo($this->rev2);\n        $changelogRev1['media'] = $changelogRev2['media'] = false;\n\n        $this->RevInfo1 = new RevisionInfo($changelogRev1);\n        $this->RevInfo2 = new RevisionInfo($changelogRev2);\n        \n        foreach ([$this->RevInfo1, $this->RevInfo2] as $RevInfo) {\n            $isCurrent = $changelog->isCurrentRevision($RevInfo->val('date'));\n            $RevInfo->isCurrent($isCurrent);\n\n            if ($RevInfo->val('type') == DOKU_CHANGE_TYPE_DELETE || empty($RevInfo->val('type'))) {\n                $text = '';\n            } else {\n                $rev = $isCurrent ? '' : $RevInfo->val('date');\n                $text = rawWiki($this->id, $rev);\n            }\n            $RevInfo->append(['text' => $text]);\n        }\n\n        // msg could displayed only when wrong url typed in browser address bar\n        if ($this->rev2 === false) {\n            msg(sprintf($lang['page_nonexist_rev'],\n                $this->id,\n                wl($this->id, ['do'=>'edit']),\n                $this->id), -1);\n        } elseif (!$this->rev1 || $this->rev1 == $this->rev2) {\n            msg('no way to compare when less than two revisions', -1);\n        }\n    }\n\n    /**\n     * Show diff\n     * between current page version and provided $text\n     * or between the revisions provided via GET or POST\n     *\n     * @author Andreas Gohr <andi@splitbrain.org>\n     *\n     * @return void\n     */\n    public function show()\n    {\n        global $lang;\n\n        if (!isset($this->RevInfo1, $this->RevInfo2)) {\n            // retrieve form parameters: rev, rev2, difftype\n            $this->handle();\n            // prepare revision info of comparison pair, except PageConfrict or PageDraft\n            $this->preProcess();\n        }\n\n        // revision title\n        $rev1Title = trim($this->RevInfo1->showRevisionTitle() .' '. $this->RevInfo1->showCurrentIndicator());\n        $rev1Summary = ($this->RevInfo1->val('date'))\n            ? $this->RevInfo1->showEditSummary() .' '. $this->RevInfo1->showEditor()\n            : '';\n\n        if ($this->RevInfo2->val('extra') == 'compareWith') {\n            $rev2Title = $lang['yours'];\n            $rev2Summary = '';\n        } else {\n            $rev2Title = trim($this->RevInfo2->showRevisionTitle() .' '. $this->RevInfo2->showCurrentIndicator());\n            $rev2Summary = ($this->RevInfo2->val('date'))\n                ? $this->RevInfo2->showEditSummary() .' '. $this->RevInfo2->showEditor()\n                : '';\n        }\n\n        // create difference engine object\n        $Difference = new \\Diff(\n                explode(\"\\n\", $this->RevInfo1->val('text')),\n                explode(\"\\n\", $this->RevInfo2->val('text'))\n        );\n\n        // build paired navigation\n        [$rev1Navi, $rev2Navi] = $this->buildRevisionsNavigation();\n\n        // display intro\n        if ($this->preference['showIntro']) echo p_locale_xhtml('diff');\n\n        // print form to choose diff view type, and exact url reference to the view\n        $this->showDiffViewSelector();\n\n        // assign minor edit checker to the variable\n        $classEditType = function ($changeType) {\n            return ($changeType === DOKU_CHANGE_TYPE_MINOR_EDIT) ? ' class=\"minor\"' : '';\n        };\n\n        // display diff view table\n        echo '<div class=\"table\">';\n        echo '<table class=\"diff diff_'.hsc($this->preference['difftype']) .'\">';\n\n        //navigation and header\n        switch ($this->preference['difftype']) {\n            case 'inline':\n                $title1 = $rev1Title . ($rev1Summary ? '<br />'.$rev1Summary : '');\n                $title2 = $rev2Title . ($rev2Summary ? '<br />'.$rev2Summary : '');\n                // no navigation for PageConflict or PageDraft\n                if ($this->RevInfo2->val('extra') !== 'compareWith') {\n                    echo '<tr>'\n                        .'<td class=\"diff-lineheader\">-</td>'\n                        .'<td class=\"diffnav\">'. $rev1Navi .'</td>'\n                        .'</tr>';\n                    echo '<tr>'\n                        .'<th class=\"diff-lineheader\">-</th>'\n                        .'<th'.$classEditType($this->RevInfo1->val('type')).'>'. $title1 .'</th>'\n                        .'</tr>';\n                }\n                echo '<tr>'\n                    .'<td class=\"diff-lineheader\">+</td>'\n                    .'<td class=\"diffnav\">'. $rev2Navi .'</td>'\n                    .'</tr>';\n                echo '<tr>'\n                    .'<th class=\"diff-lineheader\">+</th>'\n                    .'<th'.$classEditType($this->RevInfo2->val('type')).'>'. $title2 .'</th>'\n                    .'</tr>';\n                // create formatter object\n                $DiffFormatter = new InlineDiffFormatter();\n                break;\n\n            case 'sidebyside':\n            default:\n                $title1 = $rev1Title . ($rev1Summary ? ' '.$rev1Summary : '');\n                $title2 = $rev2Title . ($rev2Summary ? ' '.$rev2Summary : '');\n                // no navigation for PageConflict or PageDraft\n                if ($this->RevInfo2->val('extra') !== 'compareWith') {\n                    echo '<tr>'\n                        .'<td colspan=\"2\" class=\"diffnav\">'. $rev1Navi .'</td>'\n                        .'<td colspan=\"2\" class=\"diffnav\">'. $rev2Navi .'</td>'\n                        .'</tr>';\n                }\n                echo '<tr>'\n                    .'<th colspan=\"2\"'.$classEditType($this->RevInfo1->val('type')).'>'.$title1.'</th>'\n                    .'<th colspan=\"2\"'.$classEditType($this->RevInfo2->val('type')).'>'.$title2.'</th>'\n                    .'</tr>';\n                // create formatter object\n                $DiffFormatter = new TableDiffFormatter();\n                break;\n        }\n\n        // output formatted difference\n        echo $this->insertSoftbreaks($DiffFormatter->format($Difference));\n\n        echo '</table>';\n        echo '</div>';\n    }\n\n    /**\n     * Print form to choose diff view type, and exact url reference to the view\n     */\n    protected function showDiffViewSelector()\n    {\n        global $lang;\n\n        // no revisions selector for PageConflict or PageDraft\n        if ($this->RevInfo2->val('extra') == 'compareWith') return;\n\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        echo '<div class=\"diffoptions group\">';\n\n        // create the form to select difftype\n        $form = new Form(['action' => wl()]);\n        $form->setHiddenField('id', $this->id);\n        $form->setHiddenField('rev2[0]', $rev1);\n        $form->setHiddenField('rev2[1]', $rev2);\n        $form->setHiddenField('do', 'diff');\n        $options = array(\n                     'sidebyside' => $lang['diff_side'],\n                     'inline' => $lang['diff_inline'],\n        );\n        $input = $form->addDropdown('difftype', $options, $lang['diff_type'])\n            ->val($this->preference['difftype'])\n            ->addClass('quickselect');\n        $input->useInput(false); // inhibit prefillInput() during toHTML() process\n        $form->addButton('do[diff]', 'Go')->attr('type','submit');\n        echo $form->toHTML();\n\n        // show exact url reference to the view when it is meaningful\n        echo '<p>';\n        if ($rev1 && $rev2) {\n            // link to exactly this view FS#2835\n            $viewUrl = $this->diffViewlink('difflink', $rev1, $rev2);\n        }\n        echo $viewUrl ?? '<br />';\n        echo '</p>';\n\n        echo '</div>';\n    }\n\n    /**\n     * Create html for revision navigation\n     *\n     * The navigation consists of older and newer revisions selectors, each\n     * state mutually depends on the selected revision of opposite side.\n     *\n     * @return string[] html of navigation for both older and newer sides\n     */\n    protected function buildRevisionsNavigation()\n    {\n        $changelog =& $this->changelog;\n\n        if ($this->RevInfo2->val('extra') == 'compareWith') {\n            // no revisions selector for PageConflict or PageDraft\n            return array('', '');\n        }\n\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        // retrieve revisions used in dropdown selectors, even when rev1 or rev2 is false\n        [$revs1, $revs2] = $changelog->getRevisionsAround(\n            ($rev1 ?: $changelog->currentRevision()),\n            ($rev2 ?: $changelog->currentRevision())\n        );\n\n        // build options for dropdown selector\n        $rev1Options = $this->buildRevisionOptions('older', $revs1);\n        $rev2Options = $this->buildRevisionOptions('newer', $revs2);\n\n        // determine previous/next revisions (older/left side)\n        $rev1Prev = $rev1Next = false;\n        if (($index = array_search($rev1, $revs1)) !== false) {\n            $rev1Prev = ($index +1 < count($revs1)) ? $revs1[$index +1] : false;\n            $rev1Next = ($index > 0)                ? $revs1[$index -1] : false;\n        }\n        // determine previous/next revisions (newer/right side)\n        $rev2Prev = $rev2Next = false;\n        if (($index = array_search($rev2, $revs2)) !== false) {\n            $rev2Prev = ($index +1 < count($revs2)) ? $revs2[$index +1] : false;\n            $rev2Next = ($index > 0)                ? $revs2[$index -1] : false;\n        }\n\n        /*\n         * navigation UI for older revisions / Left side:\n         */\n        $rev1Navi = '';\n        // move backward both side: \u25c0\u25c0\n        if ($rev1Prev && $rev2Prev)\n            $rev1Navi .= $this->diffViewlink('diffbothprevrev', $rev1Prev, $rev2Prev);\n        // move backward left side: \u25c0\n        if ($rev1Prev)\n            $rev1Navi .= $this->diffViewlink('diffprevrev', $rev1Prev, $rev2);\n        // dropdown\n        $rev1Navi .= $this->buildDropdownSelector('older', $rev1Options);\n        // move forward left side: \u25b6\n        if ($rev1Next && ($rev1Next < $rev2))\n            $rev1Navi .= $this->diffViewlink('diffnextrev', $rev1Next, $rev2);\n\n        /*\n         * navigation UI for newer revisions / Right side:\n         */\n        $rev2Navi = '';\n        // move backward right side: \u25c0\n        if ($rev2Prev && ($rev1 < $rev2Prev))\n            $rev2Navi .= $this->diffViewlink('diffprevrev', $rev1, $rev2Prev);\n        // dropdown\n        $rev2Navi .= $this->buildDropdownSelector('newer', $rev2Options);\n        // move forward right side: \u25b6\n        if ($rev2Next) {\n            if ($changelog->isCurrentRevision($rev2Next)) {\n                $rev2Navi .= $this->diffViewlink('difflastrev', $rev1, $rev2Next);\n            } else {\n                $rev2Navi .= $this->diffViewlink('diffnextrev', $rev1, $rev2Next);\n            }\n        }\n        // move forward both side: \u25b6\u25b6\n        if ($rev1Next && $rev2Next)\n            $rev2Navi .= $this->diffViewlink('diffbothnextrev', $rev1Next, $rev2Next);\n\n        return array($rev1Navi, $rev2Navi);\n    }\n\n    /**\n     * prepare options for dropdwon selector\n     *\n     * @params string $side  \"older\" or \"newer\"\n     * @params array $revs  list of revsion\n     * @return array\n     */\n    protected function buildRevisionOptions($side, $revs)\n    {\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        $changelog =& $this->changelog;\n        $options = [];\n\n        foreach ($revs as $rev) {\n            $info = $changelog->getRevisionInfo($rev);\n            // revision info may have timestamp key when external edits occurred\n            $info['timestamp'] = $info['timestamp'] ?? true;\n            $date = dformat($info['date']);\n            if ($info['timestamp'] === false) {\n                // exteranlly deleted or older file restored\n                $date = preg_replace('/[0-9a-zA-Z]/','_', $date);\n            }\n            $options[$rev] = array(\n                'label' => implode(' ', [\n                            $date,\n                            editorinfo($info['user'], true),\n                            $info['sum'],\n                           ]),\n                'attrs' => ['title' => $rev],\n            );\n            if (($side == 'older' && ($rev2 && $rev >= $rev2))\n              ||($side == 'newer' && ($rev <= $rev1))\n            ) {\n                $options[$rev]['attrs']['disabled'] = 'disabled';\n            }\n        }\n        return $options;\n    }\n\n    /**\n     * build Dropdown form for revisions navigation\n     *\n     * @params string $side  \"older\" or \"newer\"\n     * @params array $options  dropdown options\n     * @return string\n     */\n    protected function buildDropdownSelector($side, $options)\n    {\n        // use timestamp for current revision, date may be false when revisions < 2\n        [$rev1, $rev2] = [(int)$this->RevInfo1->val('date'), (int)$this->RevInfo2->val('date')];\n\n        $form = new Form(['action' => wl($this->id)]);\n        $form->setHiddenField('id', $this->id);\n        $form->setHiddenField('do', 'diff');\n        $form->setHiddenField('difftype', $this->preference['difftype']);\n\n        switch ($side) {\n            case 'older': // left side\n                $form->setHiddenField('rev2[1]', $rev2);\n                $input = $form->addDropdown('rev2[0]', $options)\n                    ->val($rev1)->addClass('quickselect');\n                $input->useInput(false); // inhibit prefillInput() during toHTML() process\n                break;\n            case 'newer': // right side\n                $form->setHiddenField('rev2[0]', $rev1);\n                $input = $form->addDropdown('rev2[1]', $options)\n                    ->val($rev2)->addClass('quickselect');\n                $input->useInput(false); // inhibit prefillInput() during toHTML() process\n                break;\n        }\n        $form->addButton('do[diff]', 'Go')->attr('type','submit');\n        return $form->toHTML();\n    }\n\n    /**\n     * Create html link to a diff view defined by two revisions\n     *\n     * @param string $linktype\n     * @param int $rev1 older revision\n     * @param int $rev2 newer revision or null for diff with current revision\n     * @return string html of link to a diff view\n     */\n    protected function diffViewlink($linktype, $rev1, $rev2 = null)\n    {\n        global $lang;\n        if ($rev1 === false) return '';\n\n        if ($rev2 === null) {\n            $urlparam = array(\n                'do' => 'diff',\n                'rev' => $rev1,\n                'difftype' => $this->preference['difftype'],\n            );\n        } else {\n            $urlparam = array(\n                'do' => 'diff',\n                'rev2[0]' => $rev1,\n                'rev2[1]' => $rev2,\n                'difftype' => $this->preference['difftype'],\n            );\n        }\n        $attr = array(\n            'class' => $linktype,\n            'href'  => wl($this->id, $urlparam, true, '&'),\n            'title' => $lang[$linktype],\n        );\n        return '<a '. buildAttributes($attr) .'><span>'. $lang[$linktype] .'</span></a>';\n    }\n\n\n    /**\n     * Insert soft breaks in diff html\n     *\n     * @param string $diffhtml\n     * @return string\n     */\n    public function insertSoftbreaks($diffhtml)\n    {\n        // search the diff html string for both:\n        // - html tags, so these can be ignored\n        // - long strings of characters without breaking characters\n        return preg_replace_callback('/<[^>]*>|[^<> ]{12,}/', function ($match) {\n            // if match is an html tag, return it intact\n            if ($match[0][0] == '<') return $match[0];\n            // its a long string without a breaking character,\n            // make certain characters into breaking characters by inserting a\n            // word break opportunity (<wbr> tag) in front of them.\n            $regex = <<< REGEX\n(?(?=              # start a conditional expression with a positive look ahead ...\n&\\#?\\\\w{1,6};)     # ... for html entities - we don't want to split them (ok to catch some invalid combinations)\n&\\#?\\\\w{1,6};      # yes pattern - a quicker match for the html entity, since we know we have one\n|\n[?/,&\\#;:]         # no pattern - any other group of 'special' characters to insert a breaking character after\n)+                 # end conditional expression\nREGEX;\n            return preg_replace('<'.$regex.'>xu', '\\0<wbr>', $match[0]);\n        }, $diffhtml);\n    }\n\n}\n"], "filenames": ["inc/Ui/PageDiff.php"], "buggy_code_start_loc": [107], "buggy_code_end_loc": [226], "fixing_code_start_loc": [108], "fixing_code_end_loc": [227], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository splitbrain/dokuwiki prior to 2022-07-31a.", "other": {"cve": {"id": "CVE-2022-3123", "sourceIdentifier": "security@huntr.dev", "published": "2022-09-05T10:15:09.927", "lastModified": "2022-09-29T15:48:30.373", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository splitbrain/dokuwiki prior to 2022-07-31a."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Reflejado en el repositorio GitHub splitbrain/dokuwiki versiones anteriores a 2022-07-31a"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dokuwiki:dokuwiki:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-07-31a", "matchCriteriaId": "8A47115F-548F-4E0C-8155-73B897B7B028"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:37:*:*:*:*:*:*:*", "matchCriteriaId": "E30D0E6F-4AE8-4284-8716-991DFA48CC5D"}]}]}], "references": [{"url": "https://github.com/splitbrain/dokuwiki/commit/63e9a247c072008a031f9db39fa496f6aca489b6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d72a979b-57db-4201-9500-66b49a5c1345", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LLNV7GYZPGLIKBLISVQUREQXE3WHI5R2/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PZQTVHRBEVMSKQESNFLU7MAUAB3R3PG2/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XIWZXLDU7SUS2FANXQRCHJY3F3SWT27E/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/splitbrain/dokuwiki/commit/63e9a247c072008a031f9db39fa496f6aca489b6"}}