{"buggy_code": ["<?php\n\n/**\n * @file controllers/grid/users/stageParticipant/form/AddParticipantForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class AddParticipantForm\n * @ingroup controllers_grid_users_stageParticipant_form\n *\n * @brief Form for adding a stage participant\n */\n\nimport('controllers.grid.users.stageParticipant.form.StageParticipantNotifyForm');\n\nclass AddParticipantForm extends StageParticipantNotifyForm {\n\t/** @var Submission The submission associated with the submission contributor being edited **/\n\tvar $_submission;\n\n\t/** @var $_assignmentId int Used for edit the assignment **/\n\tvar $_assignmentId;\n\n\t/** @var $_managerGroupIds array Contains all manager group_ids  **/\n\tvar $_managerGroupIds;\n\n\t/** @var $_possibleRecommendOnlyUserGroupIds array Contains all group_ids that can have the recommendOnly field available for change  **/\n\tvar $_possibleRecommendOnlyUserGroupIds;\n\n\t/** @var $_contextId int the current Context Id **/\n\tvar $_contextId;\n\n\t/**\n\t * Constructor.\n\t * @param $submission Submission\n\t * @param $stageId int STAGE_ID_...\n\t * @param $assignmentId int Optional - Used for edit the assignment\n\t */\n\tfunction __construct($submission, $stageId, $assignmentId = null) {\n\t\tparent::__construct($submission->getId(), ASSOC_TYPE_SUBMISSION, $stageId, 'controllers/grid/users/stageParticipant/addParticipantForm.tpl');\n\t\t$this->_submission = $submission;\n\t\t$this->_stageId = $stageId;\n\t\t$this->_assignmentId = $assignmentId;\n\t\t$this->_contextId = $submission->getContextId();\n\n\t\t// add checks in addition to anything that the Notification form may apply.\n\t\t// FIXME: should use a custom validator to check that the userId belongs to this group.\n\t\t$this->addCheck(new FormValidator($this, 'userGroupId', 'required', 'editor.submission.addStageParticipant.form.userGroupRequired'));\n\t\t$this->addCheck(new FormValidatorPost($this));\n\t\t$this->addCheck(new FormValidatorCSRF($this));\n\n\t\t$this->initialize();\n\t}\n\n\t//\n\t// Getters and Setters\n\t//\n\t/**\n\t * Get the Submission\n\t * @return Submission\n\t */\n\tfunction getSubmission() {\n\t\treturn $this->_submission;\n\t}\n\n\t/**\n\t * Initialize private attributes that need to be used through all functions.\n\t */\n\tfunction initialize() {\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\n\t\t// assign all user group IDs with ROLE_ID_MANAGER or ROLE_ID_SUB_EDITOR\n\t\t$this->_managerGroupIds = $userGroupDao->getUserGroupIdsByRoleId(ROLE_ID_MANAGER, $this->_contextId);\n\t\t$subEditorGroupIds = $userGroupDao->getUserGroupIdsByRoleId(ROLE_ID_SUB_EDITOR, $this->_contextId);\n\t\t$this->_possibleRecommendOnlyUserGroupIds = array_merge($this->_managerGroupIds, $subEditorGroupIds);\n\t}\n\n\t/**\n\t * Determine whether the specified user group is potentially restricted from editing metadata.\n\t *\n\t * Subeditors can not change their own permissions.\n\t *\n\t * @return boolean\n\t */\n\tprotected function _isChangePermitMetadataAllowed(UserGroup $userGroup, int $userId) {\n\t\t$currentUser = Application::get()->getRequest()->getUser();\n\n\t\tif ($currentUser->getId() === $userId && $userGroup->getRoleId() === ROLE_ID_SUB_EDITOR) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $userGroup->getRoleId() !== ROLE_ID_MANAGER;\n\t}\n\n\t/**\n\t * Determine whether the specified group is potentially required to make recommendations rather than decisions.\n\t *\n\t * Subeditors can not change their own permissions.\n\t *\n\t * @return boolean\n\t */\n\tprotected function _isChangeRecommendOnlyAllowed(UserGroup $userGroup, int $userId) {\n\t\t$currentUser = Application::get()->getRequest()->getUser();\n\n\t\tif ($currentUser->getId() === $userId && $userGroup->getRoleId() === ROLE_ID_SUB_EDITOR) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn in_array($userGroup->getRoleId(), [ROLE_ID_MANAGER, ROLE_ID_SUB_EDITOR]);\n\t}\n\n\t/**\n\t * @copydoc Form::fetch()\n\t */\n\tfunction fetch($request, $template = null, $display = false) {\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\t$userGroups = $userGroupDao->getUserGroupsByStage(\n\t\t\t$request->getContext()->getId(),\n\t\t\t$this->getStageId()\n\t\t);\n\n\t\t$userGroupOptions = array();\n\t\twhile ($userGroup = $userGroups->next()) {\n\t\t\t// Exclude reviewers.\n\t\t\tif ($userGroup->getRoleId() == ROLE_ID_REVIEWER) continue;\n\t\t\t$userGroupOptions[$userGroup->getId()] = $userGroup->getLocalizedName();\n\t\t}\n\n\t\t$templateMgr = TemplateManager::getManager($request);\n\t\t$keys = array_keys($userGroupOptions);\n\t\t$templateMgr->assign(array(\n\t\t\t'userGroupOptions' => $userGroupOptions,\n\t\t\t'selectedUserGroupId' => array_shift($keys), // assign the first element as selected\n\t\t\t'possibleRecommendOnlyUserGroupIds' => $this->_possibleRecommendOnlyUserGroupIds,\n\t\t\t'recommendOnlyUserGroupIds' => $userGroupDao->getRecommendOnlyGroupIds($request->getContext()->getId()),\n\t\t\t'notPossibleEditSubmissionMetadataPermissionChange' => $this->_managerGroupIds,\n\t\t\t'permitMetadataEditUserGroupIds' => $userGroupDao->getPermitMetadataEditGroupIds($request->getContext()->getId()),\n\t\t\t'submissionId' => $this->getSubmission()->getId(),\n\t\t\t'userGroupId' => '',\n\t\t\t'userIdSelected' => '',\n\t\t));\n\n\t\tif ($this->_assignmentId) {\n\t\t\t/** @var $stageAssignmentDao StageAssignmentDAO */\n\t\t\t$stageAssignmentDao = DAORegistry::getDAO('StageAssignmentDAO'); /* @var $stageAssignmentDao StageAssignmentDAO */\n\n\t\t\t/** @var $stageAssignment StageAssignment */\n\t\t\t$stageAssignment = $stageAssignmentDao->getById($this->_assignmentId);\n\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t/** @var $currentUser User */\n\t\t\t$currentUser = $userDao->getById($stageAssignment->getUserId());\n\n\t\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\t\t/** @var UserGroup $userGroup */\n\t\t\t$userGroup = $userGroupDao->getById($stageAssignment->getUserGroupId());\n\n\t\t\t$templateMgr->assign(array(\n\t\t\t\t'assignmentId' => $this->_assignmentId,\n\t\t\t\t'currentUserName' => $currentUser->getFullName(),\n\t\t\t\t'currentUserGroup' => $userGroup->getLocalizedName(),\n\t\t\t\t'userGroupId' => $stageAssignment->getUserGroupId(),\n\t\t\t\t'userIdSelected' => $stageAssignment->getUserId(),\n\t\t\t\t'currentAssignmentRecommendOnly' => $stageAssignment->getRecommendOnly(),\n\t\t\t\t'currentAssignmentPermitMetadataEdit' => $stageAssignment->getCanChangeMetadata(),\n\t\t\t\t'isChangePermitMetadataAllowed' => $this->_isChangePermitMetadataAllowed($userGroup, $stageAssignment->getUserId()),\n\t\t\t\t'isChangeRecommendOnlyAllowed' => $this->_isChangeRecommendOnlyAllowed($userGroup, $stageAssignment->getUserId()),\n\t\t\t));\n\t\t}\n\n\n\t\t// If submission is in review, add a list of reviewer Ids that should not be\n\t\t// assigned as participants because they have anonymous peer reviews in progress\n\t\timport('lib.pkp.classes.submission.reviewAssignment.ReviewAssignment');\n\t\t$anonymousReviewerIds = array();\n\t\tif (in_array($this->getSubmission()->getStageId(), array(WORKFLOW_STAGE_ID_INTERNAL_REVIEW, WORKFLOW_STAGE_ID_EXTERNAL_REVIEW))) {\n\t\t\t$anonymousReviewMethods = array(SUBMISSION_REVIEW_METHOD_ANONYMOUS, SUBMISSION_REVIEW_METHOD_DOUBLEANONYMOUS);\n\t\t\t$reviewAssignmentDao = DAORegistry::getDAO('ReviewAssignmentDAO'); /* @var $reviewAssignmentDao ReviewAssignmentDAO */\n\t\t\t$reviewAssignments = $reviewAssignmentDao->getBySubmissionId($this->getSubmission()->getId());\n\t\t\t$anonymousReviews = array_filter($reviewAssignments, function($reviewAssignment) use ($anonymousReviewMethods) {\n\t\t\t\treturn in_array($reviewAssignment->getReviewMethod(), $anonymousReviewMethods) && !$reviewAssignment->getDeclined();\n\t\t\t});\n\t\t\t$anonymousReviewerIds = array_map(function($reviewAssignment) {\n\t\t\t\treturn $reviewAssignment->getReviewerId();\n\t\t\t}, $anonymousReviews);\n\n\t\t}\n\t\t$templateMgr->assign(array(\n\t\t\t'anonymousReviewerIds' => array_values(array_unique($anonymousReviewerIds)),\n\t\t\t'anonymousReviewerWarning' => __('editor.submission.addStageParticipant.form.reviewerWarning'),\n\t\t\t'anonymousReviewerWarningOk' => __('common.ok'),\n\t\t));\n\n\t\treturn parent::fetch($request, $template, $display);\n\t}\n\n\t/**\n\t * @copydoc Form::readInputData()\n\t */\n\tfunction readInputData() {\n\t\t$this->readUserVars(array(\n\t\t\t'userGroupId',\n\t\t\t'userId',\n\t\t\t'message',\n\t\t\t'template',\n\t\t\t'recommendOnly',\n\t\t\t'canChangeMetadata',\n\t\t));\n\t}\n\n\t/**\n\t * @copydoc Form::validate()\n\t */\n\tfunction validate($callHooks = true) {\n\t\t$userGroupId = (int) $this->getData('userGroupId');\n\t\t$userId = (int) $this->getData('userId');\n\t\t$submission = $this->getSubmission();\n\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\treturn $userGroupDao->userInGroup($userId, $userGroupId) && $userGroupDao->getById($userGroupId, $submission->getContextId());\n\t}\n\n\t/**\n\t * @see Form::execute()\n\t * @return array ($userGroupId, $userId)\n\t */\n\tfunction execute(...$functionParams) {\n\t\t$stageAssignmentDao = DAORegistry::getDAO('StageAssignmentDAO'); /** @var $stageAssignmentDao StageAssignmentDAO */\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /** @var $userGroupDao UserGroupDAO */\n\n\t\t$submission = $this->getSubmission();\n\t\t/** @var UserGroup $userGroup */\n\t\t$userGroup = $userGroupDao->getById((int) $this->getData('userGroupId'));\n\t\t$userId = (int) $this->getData('userId');\n\t\t$recommendOnly = $this->_isChangeRecommendOnlyAllowed($userGroup, $userId) ? (boolean) $this->getData('recommendOnly') : false;\n\t\t$canChangeMetadata = $this->_isChangePermitMetadataAllowed($userGroup, $userId) ? (boolean) $this->getData('canChangeMetadata') : true;\n\n\t\t// sanity check\n\t\tif ($userGroupDao->userGroupAssignedToStage($userGroup->getId(), $this->getStageId())) {\n\t\t\t$updated = false;\n\n\t\t\tif ($this->_assignmentId) {\n\t\t\t\t/** @var $stageAssignment StageAssignment */\n\t\t\t\t$stageAssignment = $stageAssignmentDao->getById($this->_assignmentId);\n\n\t\t\t\tif ($stageAssignment) {\n\t\t\t\t\t$stageAssignment->setRecommendOnly($recommendOnly);\n\t\t\t\t\t$stageAssignment->setCanChangeMetadata($canChangeMetadata);\n\t\t\t\t\t$stageAssignmentDao->updateObject($stageAssignment);\n\t\t\t\t\t$updated = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$updated) {\n\t\t\t\t// insert the assignment\n\t\t\t\t$stageAssignment = $stageAssignmentDao->build($submission->getId(), $userGroup->getId(), $userId, $recommendOnly, $canChangeMetadata);\n\t\t\t}\n\t\t}\n\n\t\tparent::execute(...$functionParams);\n\t\treturn array($userGroup->getId(), $userId, $stageAssignment->getId());\n\t}\n\n\t/**\n\t * whether or not to require a message field\n\t * @return boolean\n\t */\n\tfunction isMessageRequired() {\n\t\treturn false;\n\t}\n}\n\n\n"], "fixing_code": ["<?php\n\n/**\n * @file controllers/grid/users/stageParticipant/form/AddParticipantForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class AddParticipantForm\n * @ingroup controllers_grid_users_stageParticipant_form\n *\n * @brief Form for adding a stage participant\n */\n\nimport('controllers.grid.users.stageParticipant.form.StageParticipantNotifyForm');\n\nclass AddParticipantForm extends StageParticipantNotifyForm {\n\t/** @var Submission The submission associated with the submission contributor being edited **/\n\tvar $_submission;\n\n\t/** @var $_assignmentId int Used for edit the assignment **/\n\tvar $_assignmentId;\n\n\t/** @var $_managerGroupIds array Contains all manager group_ids  **/\n\tvar $_managerGroupIds;\n\n\t/** @var $_possibleRecommendOnlyUserGroupIds array Contains all group_ids that can have the recommendOnly field available for change  **/\n\tvar $_possibleRecommendOnlyUserGroupIds;\n\n\t/** @var $_contextId int the current Context Id **/\n\tvar $_contextId;\n\n\t/**\n\t * Constructor.\n\t * @param $submission Submission\n\t * @param $stageId int STAGE_ID_...\n\t * @param $assignmentId int Optional - Used for edit the assignment\n\t */\n\tfunction __construct($submission, $stageId, $assignmentId = null) {\n\t\tparent::__construct($submission->getId(), ASSOC_TYPE_SUBMISSION, $stageId, 'controllers/grid/users/stageParticipant/addParticipantForm.tpl');\n\t\t$this->_submission = $submission;\n\t\t$this->_stageId = $stageId;\n\t\t$this->_assignmentId = $assignmentId;\n\t\t$this->_contextId = $submission->getContextId();\n\n\t\t// add checks in addition to anything that the Notification form may apply.\n\t\t// FIXME: should use a custom validator to check that the userId belongs to this group.\n\t\t$this->addCheck(new FormValidator($this, 'userGroupId', 'required', 'editor.submission.addStageParticipant.form.userGroupRequired'));\n\t\t$this->addCheck(new FormValidatorPost($this));\n\t\t$this->addCheck(new FormValidatorCSRF($this));\n\n\t\t$this->initialize();\n\t}\n\n\t//\n\t// Getters and Setters\n\t//\n\t/**\n\t * Get the Submission\n\t * @return Submission\n\t */\n\tfunction getSubmission() {\n\t\treturn $this->_submission;\n\t}\n\n\t/**\n\t * Initialize private attributes that need to be used through all functions.\n\t */\n\tfunction initialize() {\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\n\t\t// assign all user group IDs with ROLE_ID_MANAGER or ROLE_ID_SUB_EDITOR\n\t\t$this->_managerGroupIds = $userGroupDao->getUserGroupIdsByRoleId(ROLE_ID_MANAGER, $this->_contextId);\n\t\t$subEditorGroupIds = $userGroupDao->getUserGroupIdsByRoleId(ROLE_ID_SUB_EDITOR, $this->_contextId);\n\t\t$this->_possibleRecommendOnlyUserGroupIds = array_merge($this->_managerGroupIds, $subEditorGroupIds);\n\t}\n\n\t/**\n\t * Determine whether the specified user group is potentially restricted from editing metadata.\n\t *\n\t * Subeditors can not change their own permissions.\n\t *\n\t * @return boolean\n\t */\n\tprotected function _isChangePermitMetadataAllowed(UserGroup $userGroup, int $userId) {\n\t\t$currentUser = Application::get()->getRequest()->getUser();\n\n\t\tif ($currentUser->getId() === $userId && $userGroup->getRoleId() === ROLE_ID_SUB_EDITOR) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $userGroup->getRoleId() !== ROLE_ID_MANAGER;\n\t}\n\n\t/**\n\t * Determine whether the specified group is potentially required to make recommendations rather than decisions.\n\t *\n\t * Subeditors can not change their own permissions.\n\t *\n\t * @return boolean\n\t */\n\tprotected function _isChangeRecommendOnlyAllowed(UserGroup $userGroup, int $userId) {\n\t\t$currentUser = Application::get()->getRequest()->getUser();\n\n\t\tif ($currentUser->getId() === $userId && $userGroup->getRoleId() === ROLE_ID_SUB_EDITOR) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn in_array($userGroup->getRoleId(), [ROLE_ID_MANAGER, ROLE_ID_SUB_EDITOR]);\n\t}\n\n\t/**\n\t * @copydoc Form::fetch()\n\t */\n\tfunction fetch($request, $template = null, $display = false) {\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\t$userGroups = $userGroupDao->getUserGroupsByStage(\n\t\t\t$request->getContext()->getId(),\n\t\t\t$this->getStageId()\n\t\t);\n\n\t\t$userGroupOptions = array();\n\t\twhile ($userGroup = $userGroups->next()) {\n\t\t\t// Exclude reviewers.\n\t\t\tif ($userGroup->getRoleId() == ROLE_ID_REVIEWER) continue;\n\t\t\t$userGroupOptions[$userGroup->getId()] = $userGroup->getLocalizedName();\n\t\t}\n\n\t\t$templateMgr = TemplateManager::getManager($request);\n\t\t$keys = array_keys($userGroupOptions);\n\t\t$templateMgr->assign(array(\n\t\t\t'userGroupOptions' => $userGroupOptions,\n\t\t\t'selectedUserGroupId' => array_shift($keys), // assign the first element as selected\n\t\t\t'possibleRecommendOnlyUserGroupIds' => $this->_possibleRecommendOnlyUserGroupIds,\n\t\t\t'recommendOnlyUserGroupIds' => $userGroupDao->getRecommendOnlyGroupIds($request->getContext()->getId()),\n\t\t\t'notPossibleEditSubmissionMetadataPermissionChange' => $this->_managerGroupIds,\n\t\t\t'permitMetadataEditUserGroupIds' => $userGroupDao->getPermitMetadataEditGroupIds($request->getContext()->getId()),\n\t\t\t'submissionId' => $this->getSubmission()->getId(),\n\t\t\t'userGroupId' => '',\n\t\t\t'userIdSelected' => '',\n\t\t));\n\n\t\tif ($this->_assignmentId) {\n\t\t\t/** @var $stageAssignmentDao StageAssignmentDAO */\n\t\t\t$stageAssignmentDao = DAORegistry::getDAO('StageAssignmentDAO'); /* @var $stageAssignmentDao StageAssignmentDAO */\n\n\t\t\t/** @var $stageAssignment StageAssignment */\n\t\t\t$stageAssignment = $stageAssignmentDao->getById($this->_assignmentId);\n\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t/** @var $currentUser User */\n\t\t\t$currentUser = $userDao->getById($stageAssignment->getUserId());\n\n\t\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\t\t/** @var UserGroup $userGroup */\n\t\t\t$userGroup = $userGroupDao->getById($stageAssignment->getUserGroupId());\n\n\t\t\t$templateMgr->assign(array(\n\t\t\t\t'assignmentId' => $this->_assignmentId,\n\t\t\t\t'currentUserName' => $currentUser->getFullName(),\n\t\t\t\t'currentUserGroup' => $userGroup->getLocalizedName(),\n\t\t\t\t'userGroupId' => $stageAssignment->getUserGroupId(),\n\t\t\t\t'userIdSelected' => $stageAssignment->getUserId(),\n\t\t\t\t'currentAssignmentRecommendOnly' => $stageAssignment->getRecommendOnly(),\n\t\t\t\t'currentAssignmentPermitMetadataEdit' => $stageAssignment->getCanChangeMetadata(),\n\t\t\t\t'isChangePermitMetadataAllowed' => $this->_isChangePermitMetadataAllowed($userGroup, $stageAssignment->getUserId()),\n\t\t\t\t'isChangeRecommendOnlyAllowed' => $this->_isChangeRecommendOnlyAllowed($userGroup, $stageAssignment->getUserId()),\n\t\t\t));\n\t\t}\n\n\n\t\t// If submission is in review, add a list of reviewer Ids that should not be\n\t\t// assigned as participants because they have anonymous peer reviews in progress\n\t\timport('lib.pkp.classes.submission.reviewAssignment.ReviewAssignment');\n\t\t$anonymousReviewerIds = array();\n\t\tif (in_array($this->getSubmission()->getStageId(), array(WORKFLOW_STAGE_ID_INTERNAL_REVIEW, WORKFLOW_STAGE_ID_EXTERNAL_REVIEW))) {\n\t\t\t$anonymousReviewMethods = array(SUBMISSION_REVIEW_METHOD_ANONYMOUS, SUBMISSION_REVIEW_METHOD_DOUBLEANONYMOUS);\n\t\t\t$reviewAssignmentDao = DAORegistry::getDAO('ReviewAssignmentDAO'); /* @var $reviewAssignmentDao ReviewAssignmentDAO */\n\t\t\t$reviewAssignments = $reviewAssignmentDao->getBySubmissionId($this->getSubmission()->getId());\n\t\t\t$anonymousReviews = array_filter($reviewAssignments, function($reviewAssignment) use ($anonymousReviewMethods) {\n\t\t\t\treturn in_array($reviewAssignment->getReviewMethod(), $anonymousReviewMethods) && !$reviewAssignment->getDeclined();\n\t\t\t});\n\t\t\t$anonymousReviewerIds = array_map(function($reviewAssignment) {\n\t\t\t\treturn $reviewAssignment->getReviewerId();\n\t\t\t}, $anonymousReviews);\n\n\t\t}\n\t\t$templateMgr->assign(array(\n\t\t\t'anonymousReviewerIds' => array_values(array_unique($anonymousReviewerIds)),\n\t\t\t'anonymousReviewerWarning' => __('editor.submission.addStageParticipant.form.reviewerWarning'),\n\t\t\t'anonymousReviewerWarningOk' => __('common.ok'),\n\t\t));\n\n\t\treturn parent::fetch($request, $template, $display);\n\t}\n\n\t/**\n\t * @copydoc Form::readInputData()\n\t */\n\tfunction readInputData() {\n\t\t$this->readUserVars(array(\n\t\t\t'userGroupId',\n\t\t\t'userId',\n\t\t\t'message',\n\t\t\t'template',\n\t\t\t'recommendOnly',\n\t\t\t'canChangeMetadata',\n\t\t));\n\t}\n\n\t/**\n\t * @copydoc Form::validate()\n\t */\n\tfunction validate($callHooks = true) {\n\t\t$userGroupId = (int) $this->getData('userGroupId');\n\t\t$userId = (int) $this->getData('userId');\n\t\t$submission = $this->getSubmission();\n\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /* @var $userGroupDao UserGroupDAO */\n\t\treturn $userGroupDao->userInGroup($userId, $userGroupId) && $userGroupDao->getById($userGroupId, $submission->getContextId()) && parent::validate($callHooks);\n\t}\n\n\t/**\n\t * @see Form::execute()\n\t * @return array ($userGroupId, $userId)\n\t */\n\tfunction execute(...$functionParams) {\n\t\t$stageAssignmentDao = DAORegistry::getDAO('StageAssignmentDAO'); /** @var $stageAssignmentDao StageAssignmentDAO */\n\t\t$userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /** @var $userGroupDao UserGroupDAO */\n\n\t\t$submission = $this->getSubmission();\n\t\t/** @var UserGroup $userGroup */\n\t\t$userGroup = $userGroupDao->getById((int) $this->getData('userGroupId'));\n\t\t$userId = (int) $this->getData('userId');\n\t\t$recommendOnly = $this->_isChangeRecommendOnlyAllowed($userGroup, $userId) ? (boolean) $this->getData('recommendOnly') : false;\n\t\t$canChangeMetadata = $this->_isChangePermitMetadataAllowed($userGroup, $userId) ? (boolean) $this->getData('canChangeMetadata') : true;\n\n\t\t// sanity check\n\t\tif ($userGroupDao->userGroupAssignedToStage($userGroup->getId(), $this->getStageId())) {\n\t\t\t$updated = false;\n\n\t\t\tif ($this->_assignmentId) {\n\t\t\t\t/** @var $stageAssignment StageAssignment */\n\t\t\t\t$stageAssignment = $stageAssignmentDao->getById($this->_assignmentId);\n\n\t\t\t\tif ($stageAssignment) {\n\t\t\t\t\t$stageAssignment->setRecommendOnly($recommendOnly);\n\t\t\t\t\t$stageAssignment->setCanChangeMetadata($canChangeMetadata);\n\t\t\t\t\t$stageAssignmentDao->updateObject($stageAssignment);\n\t\t\t\t\t$updated = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$updated) {\n\t\t\t\t// insert the assignment\n\t\t\t\t$stageAssignment = $stageAssignmentDao->build($submission->getId(), $userGroup->getId(), $userId, $recommendOnly, $canChangeMetadata);\n\t\t\t}\n\t\t}\n\n\t\tparent::execute(...$functionParams);\n\t\treturn array($userGroup->getId(), $userId, $stageAssignment->getId());\n\t}\n\n\t/**\n\t * whether or not to require a message field\n\t * @return boolean\n\t */\n\tfunction isMessageRequired() {\n\t\treturn false;\n\t}\n}\n\n\n"], "filenames": ["controllers/grid/users/stageParticipant/form/AddParticipantForm.inc.php"], "buggy_code_start_loc": [221], "buggy_code_end_loc": [222], "fixing_code_start_loc": [221], "fixing_code_end_loc": [222], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5902", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-07T04:24:32.080", "lastModified": "2023-11-13T15:21:56.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub pkp/pkp-lib anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sfu:pkp_web_application_library:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.3.0-15", "matchCriteriaId": "EFB5FA1A-644F-4BC0-8ADD-22F75D67F7E5"}]}]}], "references": [{"url": "https://github.com/pkp/pkp-lib/commit/2d04e770d2bbbdd899fdec382fbf2a1d4a4ffec8", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/8b93c7bf-5052-424a-85cc-7e5491c61f20", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/pkp-lib/commit/2d04e770d2bbbdd899fdec382fbf2a1d4a4ffec8"}}