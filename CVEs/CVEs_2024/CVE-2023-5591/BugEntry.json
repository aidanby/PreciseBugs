{"buggy_code": ["<?php\n\nuse LibreNMS\\Util\\IP;\n\n$param = [];\n\nif (! Auth::user()->hasGlobalRead()) {\n    $device_ids = Permissions::devicesForUser()->toArray() ?: [0];\n    $where .= ' AND `D`.`device_id` IN ' . dbGenPlaceholders(count($device_ids));\n    $param = array_merge($param, $device_ids);\n}\n\n[$address,$prefix] = explode('/', $vars['address']);\nif ($vars['search_type'] == 'ipv4') {\n    $sql = ' FROM `ipv4_addresses` AS A, `ports` AS I, `ipv4_networks` AS N, `devices` AS D';\n    $sql .= \" WHERE I.port_id = A.port_id AND I.device_id = D.device_id AND N.ipv4_network_id = A.ipv4_network_id $where \";\n    if (! empty($address)) {\n        $sql .= ' AND ipv4_address LIKE ?';\n        $param[] = \"%$address%\";\n    }\n\n    if (! empty($prefix)) {\n        $sql .= \" AND ipv4_prefixlen='?'\";\n        $param[] = [$prefix];\n    }\n} elseif ($vars['search_type'] == 'ipv6') {\n    $sql = ' FROM `ipv6_addresses` AS A, `ports` AS I, `ipv6_networks` AS N, `devices` AS D';\n    $sql .= \" WHERE I.port_id = A.port_id AND I.device_id = D.device_id AND N.ipv6_network_id = A.ipv6_network_id $where \";\n    if (! empty($address)) {\n        $sql .= ' AND (ipv6_address LIKE ? OR ipv6_compressed LIKE ?)';\n        $param[] = \"%$address%\";\n        $param[] = \"%$address%\";\n    }\n\n    if (! empty($prefix)) {\n        $sql .= \" AND ipv6_prefixlen = '$prefix'\";\n    }\n} elseif ($vars['search_type'] == 'mac') {\n    $sql = ' FROM `ports` AS I, `devices` AS D';\n    $sql .= \" WHERE I.device_id = D.device_id AND `ifPhysAddress` LIKE '%\" . trim(str_replace([':', ' ', '-', '.', '0x'], '', $vars['address'])) . \"%' $where \";\n}//end if\nif (is_numeric($vars['device_id'])) {\n    $sql .= ' AND I.device_id = ?';\n    $param[] = $vars['device_id'];\n}\n\nif ($vars['interface']) {\n    $sql .= ' AND I.ifDescr LIKE ?';\n    $param[] = $vars['interface'];\n}\n\nif ($vars['search_type'] == 'ipv4') {\n    $count_sql = \"SELECT COUNT(`ipv4_address_id`) $sql\";\n} elseif ($vars['search_type'] == 'ipv6') {\n    $count_sql = \"SELECT COUNT(`ipv6_address_id`) $sql\";\n} elseif ($vars['search_type'] == 'mac') {\n    $count_sql = \"SELECT COUNT(`port_id`) $sql\";\n}\n\n$total = dbFetchCell($count_sql, $param);\nif (empty($total)) {\n    $total = 0;\n}\n\nif (! isset($sort) || empty($sort)) {\n    $sort = '`hostname` ASC';\n}\n\n$sql .= \" ORDER BY $sort\";\n\nif (isset($current)) {\n    $limit_low = (($current * $rowCount) - $rowCount);\n    $limit_high = $rowCount;\n}\n\nif ($rowCount != -1) {\n    $sql .= \" LIMIT $limit_low,$limit_high\";\n}\n\n$sql = \"SELECT *,`I`.`ifDescr` AS `interface` $sql\";\n\nforeach (dbFetchRows($sql, $param) as $interface) {\n    $speed = \\LibreNMS\\Util\\Number::formatSi($interface['ifSpeed'], 2, 3, 'bps');\n    $type = \\LibreNMS\\Util\\Rewrite::normalizeIfType($interface['ifType']);\n\n    if ($vars['search_type'] == 'ipv6') {\n        $address = (string) IP::parse($interface['ipv6_address'], true) . '/' . $interface['ipv6_prefixlen'];\n    } elseif ($vars['search_type'] == 'mac') {\n        $address = \\LibreNMS\\Util\\Rewrite::readableMac($interface['ifPhysAddress']);\n        $mac_oui = \\LibreNMS\\Util\\Rewrite::readableOUI($interface['ifPhysAddress']);\n    } else {\n        $address = (string) IP::parse($interface['ipv4_address'], true) . '/' . $interface['ipv4_prefixlen'];\n    }\n\n    if ($interface['in_errors'] > 0 || $interface['out_errors'] > 0) {\n        $error_img = generate_port_link($interface, \"<i class='fa fa-flag fa-lg' style='color:red' aria-hidden='true'></i>\", 'errors');\n    } else {\n        $error_img = '';\n    }\n\n    if (port_permitted($interface['port_id'])) {\n        $interface = cleanPort($interface, $interface);\n        $row = [\n            'hostname'    => generate_device_link($interface),\n            'interface'   => generate_port_link($interface) . ' ' . $error_img,\n            'address'     => $address,\n            'description' => $interface['ifAlias'],\n        ];\n        if ($vars['search_type'] == 'mac') {\n            $row['mac_oui'] = $mac_oui;\n        }\n        $response[] = $row;\n    }\n}//end foreach\n\n$output = [\n    'current'  => $current,\n    'rowCount' => $rowCount,\n    'rows'     => $response,\n    'total'    => $total,\n];\necho json_encode($output, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n"], "fixing_code": ["<?php\n\nuse LibreNMS\\Util\\IP;\n\n$param = [];\n\nif (! Auth::user()->hasGlobalRead()) {\n    $device_ids = Permissions::devicesForUser()->toArray() ?: [0];\n    $where .= ' AND `D`.`device_id` IN ' . dbGenPlaceholders(count($device_ids));\n    $param = array_merge($param, $device_ids);\n}\n\n[$address,$prefix] = explode('/', $vars['address']);\nif ($vars['search_type'] == 'ipv4') {\n    $sql = ' FROM `ipv4_addresses` AS A, `ports` AS I, `ipv4_networks` AS N, `devices` AS D';\n    $sql .= \" WHERE I.port_id = A.port_id AND I.device_id = D.device_id AND N.ipv4_network_id = A.ipv4_network_id $where \";\n    if (! empty($address)) {\n        $sql .= ' AND ipv4_address LIKE ?';\n        $param[] = \"%$address%\";\n    }\n\n    if (! empty($prefix)) {\n        $sql .= \" AND ipv4_prefixlen='?'\";\n        $param[] = [$prefix];\n    }\n} elseif ($vars['search_type'] == 'ipv6') {\n    $sql = ' FROM `ipv6_addresses` AS A, `ports` AS I, `ipv6_networks` AS N, `devices` AS D';\n    $sql .= \" WHERE I.port_id = A.port_id AND I.device_id = D.device_id AND N.ipv6_network_id = A.ipv6_network_id $where \";\n    if (! empty($address)) {\n        $sql .= ' AND (ipv6_address LIKE ? OR ipv6_compressed LIKE ?)';\n        $param[] = \"%$address%\";\n        $param[] = \"%$address%\";\n    }\n\n    if (! empty($prefix)) {\n        $sql .= \" AND ipv6_prefixlen = '$prefix'\";\n    }\n} elseif ($vars['search_type'] == 'mac') {\n    $sql = ' FROM `ports` AS I, `devices` AS D';\n    $sql .= \" WHERE I.device_id = D.device_id AND `ifPhysAddress` LIKE ? $where \";\n    $param[] = '%' . trim(str_replace([':', ' ', '-', '.', '0x'], '', $vars['address'])) . '%';\n}//end if\nif (is_numeric($vars['device_id'])) {\n    $sql .= ' AND I.device_id = ?';\n    $param[] = $vars['device_id'];\n}\n\nif ($vars['interface']) {\n    $sql .= ' AND I.ifDescr LIKE ?';\n    $param[] = $vars['interface'];\n}\n\nif ($vars['search_type'] == 'ipv4') {\n    $count_sql = \"SELECT COUNT(`ipv4_address_id`) $sql\";\n} elseif ($vars['search_type'] == 'ipv6') {\n    $count_sql = \"SELECT COUNT(`ipv6_address_id`) $sql\";\n} elseif ($vars['search_type'] == 'mac') {\n    $count_sql = \"SELECT COUNT(`port_id`) $sql\";\n}\n\n$total = dbFetchCell($count_sql, $param);\nif (empty($total)) {\n    $total = 0;\n}\n\nif (! isset($sort) || empty($sort)) {\n    $sort = '`hostname` ASC';\n}\n\n$sql .= \" ORDER BY $sort\";\n\nif (isset($current)) {\n    $limit_low = (($current * $rowCount) - $rowCount);\n    $limit_high = $rowCount;\n}\n\nif ($rowCount != -1) {\n    $sql .= \" LIMIT $limit_low,$limit_high\";\n}\n\n$sql = \"SELECT *,`I`.`ifDescr` AS `interface` $sql\";\n\nforeach (dbFetchRows($sql, $param) as $interface) {\n    $speed = \\LibreNMS\\Util\\Number::formatSi($interface['ifSpeed'], 2, 3, 'bps');\n    $type = \\LibreNMS\\Util\\Rewrite::normalizeIfType($interface['ifType']);\n\n    if ($vars['search_type'] == 'ipv6') {\n        $address = (string) IP::parse($interface['ipv6_address'], true) . '/' . $interface['ipv6_prefixlen'];\n    } elseif ($vars['search_type'] == 'mac') {\n        $address = \\LibreNMS\\Util\\Rewrite::readableMac($interface['ifPhysAddress']);\n        $mac_oui = \\LibreNMS\\Util\\Rewrite::readableOUI($interface['ifPhysAddress']);\n    } else {\n        $address = (string) IP::parse($interface['ipv4_address'], true) . '/' . $interface['ipv4_prefixlen'];\n    }\n\n    if ($interface['in_errors'] > 0 || $interface['out_errors'] > 0) {\n        $error_img = generate_port_link($interface, \"<i class='fa fa-flag fa-lg' style='color:red' aria-hidden='true'></i>\", 'errors');\n    } else {\n        $error_img = '';\n    }\n\n    if (port_permitted($interface['port_id'])) {\n        $interface = cleanPort($interface, $interface);\n        $row = [\n            'hostname'    => generate_device_link($interface),\n            'interface'   => generate_port_link($interface) . ' ' . $error_img,\n            'address'     => $address,\n            'description' => $interface['ifAlias'],\n        ];\n        if ($vars['search_type'] == 'mac') {\n            $row['mac_oui'] = $mac_oui;\n        }\n        $response[] = $row;\n    }\n}//end foreach\n\n$output = [\n    'current'  => $current,\n    'rowCount' => $rowCount,\n    'rows'     => $response,\n    'total'    => $total,\n];\necho json_encode($output, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);\n"], "filenames": ["includes/html/table/address-search.inc.php"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [41], "fixing_code_start_loc": [40], "fixing_code_end_loc": [42], "type": "CWE-89", "message": " SQL Injection in GitHub repository librenms/librenms prior to 23.10.0.", "other": {"cve": {"id": "CVE-2023-5591", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-16T01:15:09.857", "lastModified": "2023-10-19T11:09:26.690", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": " SQL Injection in GitHub repository librenms/librenms prior to 23.10.0."}, {"lang": "es", "value": "Inyecci\u00f3n SQL en librenms/librenms del repositorio de GitHub anteriores a 23.10.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndIncluding": "23.9.1", "matchCriteriaId": "8EB9DB40-F096-4A20-9F73-0756B37A5319"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/908aef65967ce6184bdc587fd105660d5d55129e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/54813d42-5b93-440e-b9b1-c179d2cbf090", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/908aef65967ce6184bdc587fd105660d5d55129e"}}