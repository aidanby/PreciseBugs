{"buggy_code": ["<?php\n\nnamespace Kirby;\n\nuse A;\nuse C;\nuse Collection;\nuse Detect;\nuse Dir;\nuse ErrorController;\nuse Exception;\nuse F;\nuse Header;\nuse Kirby;\nuse L;\nuse Obj;\nuse R;\nuse Response;\nuse Router;\nuse Server;\nuse S;\nuse Str;\nuse Toolkit;\nuse Tpl;\nuse Url;\n\nuse Kirby\\Panel\\Event;\nuse Kirby\\Panel\\ErrorHandling;\nuse Kirby\\Panel\\Installer;\nuse Kirby\\Panel\\Form;\nuse Kirby\\Panel\\Models\\Site;\nuse Kirby\\Panel\\Translation;\nuse Kirby\\Panel\\Models\\User\\Blueprint as UserBlueprint;\nuse Kirby\\Panel\\Models\\Page\\Blueprint as PageBlueprint;\n\nclass Panel {\n\n  static public $version = '2.5.13';\n\n  // minimal requirements\n  static public $requires = array(\n    'php'     => '7.2.0',\n    'toolkit' => '2.5.13',\n    'kirby'   => '2.5.13'\n  );\n\n  static public $instance;\n\n  public $kirby;\n  public $site;\n  public $path;\n  public $roots;\n  public $routes = array();\n  public $router = null;\n  public $route  = null;\n  public $translation = null;\n  public $translations = null;\n  public $csrf = null;\n\n  static public function instance() {\n    return static::$instance;\n  }\n\n  static public function version() {\n    return static::$version;\n  }\n\n  public function defaults() {\n\n    return array(\n      'panel.language'         => 'en',\n      'panel.stylesheet'       => null,\n      'panel.kirbytext'        => true,\n      'panel.session.timeout'  => 1440,\n      'panel.session.lifetime' => 0,\n      'panel.info.license'     => true,\n      'panel.info.versions'    => true,\n      'panel.favicon'          => false,\n      'panel.widgets'          => array(\n        'pages'   => true,\n        'site'    => true,\n        'account' => true,\n        'history' => true\n      ),\n    );\n\n  }\n\n  public function __construct($kirby, $root) {\n\n    // check requirements\n    $this->requirements();\n\n    // store the instance as a singleton\n    static::$instance = $this;\n\n    // init the core\n    $this->kirby = $kirby;\n\n    // configure the site setup\n    $this->site = $this->site();\n\n    // store the roots and urls for the panel\n    $this->roots = new \\Kirby\\Panel\\Roots($this, $root);\n    $this->urls  = new \\Kirby\\Panel\\Urls($this, $root);\n\n    // add the panel default options\n    $this->kirby->options = array_merge($this->defaults(), $this->kirby->options);\n\n    // setup the blueprints roots\n    UserBlueprint::$root = $this->kirby->roots()->blueprints() . DS . 'users';\n    PageBlueprint::$root = $this->kirby->roots()->blueprints();\n\n    // setup the session\n    $this->session();\n\n    // load the current translation\n    $this->translation()->load();\n\n    // load all Kirby extensions (methods, tags, smartypants)\n    $this->kirby->extensions();\n    $this->kirby->plugins();\n\n    // setup the multilang site stuff\n    $this->multilang();\n\n    // setup the form plugin\n    form::$root = array(\n      'default' => $this->roots->fields,\n      'custom'  => $this->kirby->roots()->fields()\n    );\n\n    // force ssl if set in config\n    if($this->kirby->option('ssl') and !r::secure()) {\n      // rebuild the current url with https\n      go(url::build(array('scheme' => 'https')));\n    }\n\n    // load all available routes\n    $this->routes = array_merge($this->routes, require($this->roots->config . DS . 'routes.php'));\n\n    // start the router\n    $this->router = new Router($this->routes);\n\n    // register router filters\n    $this->router->filter('auth', function($route) use($kirby) {\n\n      $panel = panel();\n\n      try {\n        $user = panel()->user();\n      } catch(Exception $e) {\n        panel()->redirect('login');\n      }\n\n      // check for area access\n      if($area = $route->area()) {\n        $panel->access($area)->check();\n      }\n\n    });\n\n    // check for a completed installation\n    $this->router->filter('isInstalled', function() use($kirby) {\n      $installer = new Installer();\n      if(!$installer->isCompleted()) {\n        panel()->redirect('install');\n      }\n    });\n\n    // check for valid csrf tokens. Can be used for get requests\n    // since all post requests are blocked anyway\n    $this->router->filter('csrf', function() {\n      panel()->csrfCheck();\n    });\n\n    // csrf protection for every post request\n    if(r::is('post')) {\n      $this->csrfCheck();\n    }\n\n  }\n\n  public function session() {\n\n    // setup the session\n    s::$timeout            = $this->kirby->option('panel.session.timeout', 120);\n    s::$cookie['lifetime'] = $this->kirby->option('panel.session.lifetime', 0);\n\n    // start the session\n    s::start();\n\n  }\n\n  public function requirements() {\n\n    if(!version_compare(PHP_VERSION, static::$requires['php'], '>=')) {\n      throw new Exception('Your PHP version is too old. Please upgrade to ' . static::$requires['php'] . ' or newer.');\n    }\n\n    if(!detect::mbstring()) {\n      throw new Exception('The mbstring extension must be installed');\n    }\n\n    if(!version_compare(toolkit::version(), static::$requires['toolkit'], '>=')) {\n      throw new Exception('Your Toolkit version is too old. Please upgrade to ' . static::$requires['toolkit'] . ' or newer.');\n    }\n\n    if(!version_compare(kirby::version(), static::$requires['kirby'], '>=')) {\n      throw new Exception('Your Kirby version is too old. Please upgrade to ' . static::$requires['kirby'] . ' or newer.');\n    }\n\n  }\n\n  public function csrf() {\n\n    if(!is_null($this->csrf)) return $this->csrf;\n\n    // see if there's a token in the session\n    $token = s::get('kirby_panel_csrf');\n\n    // create a new csrf token if not available yet\n    if(str::length($token) !== 32) {\n      $token = str::random(32);\n    }\n\n    // store the new token in the session\n    s::set('kirby_panel_csrf', $token);\n\n    // create a new csrf token\n    return $this->csrf = $token;\n\n  }\n\n  public function csrfCheck() {\n\n    $csrf = get('csrf');\n\n    if(empty($csrf) or $csrf !== s::get('kirby_panel_csrf')) {\n\n      try {\n        $this->user()->logout();\n      } catch(Exception $e) {}\n\n      $this->redirect('login');\n\n    }\n\n  }\n\n  public function kirby() {\n    return $this->kirby;\n  }\n\n  public function site() {\n\n    // return the site object if it has already been stored\n    if(!is_null($this->site)) return $this->site;\n\n    // load the original site first to load all branch files\n    $this->kirby->site();\n\n    // create a new panel site object\n    return $this->site = new Site($this->kirby);\n\n  }\n\n  public function multilang() {\n\n    if(!$this->site->multilang()) {\n      $language = null;\n    } else if($language = get('_language') or $language = s::get('kirby_panel_lang')) {\n      // $language is already set\n    } else {\n      $language = null;\n    }\n\n    // set the path and lang for the original site object\n    $this->kirby->site()->visit('/', $language);\n\n    // set the path and lang for the panel site object\n    $this->site->visit('/', $language);\n\n    // store the language code\n    if($this->site->multilang()) {\n      s::set('kirby_panel_lang', $this->site->language()->code());\n    }\n\n  }\n\n  public function page($id) {\n    if($page = (empty($id) or $id == '/') ? $this->site() : $this->site()->find($id)) {\n      return $page;\n    } else {\n      throw new Exception(l('pages.error.missing'));\n    }\n  }\n\n  public function roots() {\n    return $this->roots;\n  }\n\n  public function routes($routes = null) {\n    if(is_null($routes)) return $this->routes;\n    return $this->routes = array_merge($this->routes, (array)$routes);\n  }\n\n  public function urls() {\n    return $this->urls;\n  }\n\n  public function form($id, $data = array(), $submit = null) {\n\n    if(file_exists($id)) {\n      $file = $id;\n    } else {\n      $file = $this->roots->forms . DS . $id . '.php';\n    }\n\n    if(!file_exists($file)) {\n      throw new Exception(l('form.error.missing'));\n    }\n\n    $callback = require($file);\n\n    if(!is_callable($callback)) {\n      throw new Exception(l('form.construct.error.invalid'));\n    }\n\n    $form = call($callback, $data);\n\n    if(is_callable($submit)) {\n      $form->on('submit', $submit);\n    }\n\n    return $form;\n\n  }\n\n  public function translations() {\n\n    if(!is_null($this->translations)) return $this->translations;\n\n    $this->translations = new Collection;\n\n    foreach(dir::read($this->roots()->translations()) as $dir) {\n      // filter out everything but directories\n      if(!is_dir($this->roots()->translations() . DS . $dir)) continue;\n\n      // create the translation object\n      $translation = new Translation($this, $dir);\n      $this->translations->append($translation->code(), $translation);\n    }\n\n    return $this->translations;\n\n  }\n\n  public function translation() {\n\n    if(!is_null($this->translation)) return $this->translation;\n\n    // get the default language code from the options\n    $lang = $this->kirby()->option('panel.language', 'en');\n    $user = $this->site()->user();\n\n    if($user && $user->language()) {\n      $lang = $user->language();\n    }\n\n    return $this->translation = new Translation($this, $lang);\n\n  }\n\n  public function language() {\n    return $this->translation();\n  }\n\n  public function direction() {\n    return $this->translation()->direction();\n  }\n\n  public function launch($path = null) {\n\n    // set the timezone for all date functions\n    date_default_timezone_set($this->kirby->options['timezone']);\n\n    $this->path  = $this->kirby->path();\n    $this->route = $this->router->run($this->path);\n\n    // set the current url\n    $this->urls->current = rtrim($this->urls->index() . '/' . $this->path, '/');\n\n    // start the error handling\n    new ErrorHandling($this->kirby, $this);\n\n    ob_start();\n\n    // react on invalid routes\n    if(!$this->route) {\n      throw new Exception(l('routes.error.invalid'));\n    }\n\n    if(is_callable($this->route->action())) {\n      $response = call($this->route->action(), $this->route->arguments());\n    } else {\n      $response = $this->response();\n    }\n\n    // check for a valid response object\n    if(is_a($response, 'Response')) {\n      echo $response;\n    } else {\n      echo new Response($response);\n    }\n\n    ob_end_flush();\n\n  }\n\n  public function response() {\n\n    // let's find the controller and controller action\n    $controllerParts  = str::split($this->route->action(), '::');\n    $controllerUri    = $controllerParts[0];\n    $controllerAction = $controllerParts[1];\n    $controllerFile   = $this->roots->controllers . DS . strtolower(str_replace('Controller', '', $controllerUri)) . '.php';\n    $controllerName   = basename($controllerUri);\n\n    // react on missing controllers\n    if(!file_exists($controllerFile)) {\n      throw new Exception(l('controller.error.invalid'));\n    }\n\n    // load the controller\n    require_once($controllerFile);\n\n    // check for the called action\n    if(!method_exists($controllerName, $controllerAction)) {\n      throw new Exception(l('controller.error.action'));\n    }\n\n    // run the controller\n    $controller = new $controllerName;\n\n    // call the action and pass all arguments from the router\n    return call(array($controller, $controllerAction), $this->route->arguments());\n\n  }\n\n  public function license() {\n\n    $key  = c::get('license');\n    $type = 'trial';\n\n    /**\n     * Hey stranger,\n     *\n     * So this is the mysterious place where the panel checks for\n     * valid licenses. As you can see, this is not reporting\n     * back to any server and the license keys are rather simple to\n     * hack. If you really feel like removing the warning in the panel\n     * or tricking Kirby into believing you bought a valid license even\n     * if you didn't, go for it! But remember that literally thousands of\n     * hours of work have gone into Kirby in order to make your\n     * life as a developer, designer, publisher, etc. easier. If this\n     * doesn't mean anything to you, you are probably a lost case anyway.\n     *\n     * Have a great day!\n     *\n     * Bastian\n     */\n    if(str::startsWith($key, 'K2-PRO') and str::length($key) == 39) {\n      $type = 'Kirby 2 Professional';\n    } else if(str::startsWith($key, 'K2-PERSONAL') and str::length($key) == 44) {\n      $type = 'Kirby 2 Personal';\n    } else if(str::startsWith($key, 'MD-') and str::length($key) == 35) {\n      $type = 'Kirby 1';\n    } else if(str::startsWith($key, 'BETA') and str::length($key) == 9) {\n      $type = 'Kirby 1';\n    } else if(str::length($key) == 32) {\n      $type = 'Kirby 1';\n    } else {\n      $key = null;\n    }\n\n    return new Obj(array(\n      'key'   => $key,\n      'local' => $this->isLocal(),\n      'type'  => $type,\n    ));\n\n  }\n\n  public function isLocal() {\n    $localhosts = array('::1', '127.0.0.1', '0.0.0.0');\n    return (\n      in_array(server::get('SERVER_ADDR'), $localhosts) ||\n      server::get('SERVER_NAME') == 'localhost' ||\n      str::endsWith(server::get('SERVER_NAME'), '.localhost') ||\n      str::endsWith(server::get('SERVER_NAME'), '.test')\n    );\n  }\n\n  public function notify($text) {\n    s::set('kirby_panel_message', array(\n      'type' => 'notification',\n      'text' => $text,\n    ));\n  }\n\n  public function alert($text) {\n    s::set('kirby_panel_message', array(\n      'type' => 'error',\n      'text' => $text,\n    ));\n  }\n\n  public function redirect($obj = '/', $action = false, $force = false) {\n\n    if($force === false and $redirect = get('_redirect')) {\n      $url = purl($redirect);\n    } else {\n      $url = purl($obj, $action);\n    }\n\n    if(r::ajax()) {\n\n      $user = $this->site()->user();\n\n      die(response::json(array(\n        'direction' => $this->direction(),\n        'user'      => $user ? $user->username() : false,\n        'url'       => $url\n      )));\n\n    } else {\n      go($url);\n    }\n\n  }\n\n  public function users() {\n    return $this->site()->users();\n  }\n\n  public function user($username = null) {\n    if($user = $this->site()->user($username)) {\n      return $user;\n    } else {\n      throw new Exception(l('users.error.missing'));\n    }\n  }\n\n  public static function fatal($e, $root) {\n\n    $message = $e->getMessage() ? $e->getMessage() : 'Error without a useful message :(';\n    $where   = implode('<br>', [\n      '',\n      '',\n      '<b>It happened here:</b>',\n      'File: <i>' . str_replace($root, '/panel', $e->getFile()) . '</i>',\n      'Line: <i>' . $e->getLine() . '</i>'\n    ]);\n\n    // load the fatal screen\n    return tpl::load($root . DS . 'app' . DS . 'layouts' . DS . 'fatal.php', [\n      'css'     => url::index() . '/assets/css/panel.css',\n      'content' => $message . $where\n    ]);\n\n  }\n\n  public function access($area) {\n    return new Event('panel.access.' . $area);\n  }\n\n  public function __debuginfo() {\n    return [\n      'version'      => $this->version(),\n      'license'      => $this->license(),\n      'roots'        => $this->roots(),\n      'urls'         => $this->urls(),\n      'csrf'         => $this->csrf(),\n      'translations' => $this->translations()->keys(),\n      'translation'  => $this->translation(),\n      'routes'       => $this->routes(),\n      'kirby'        => $this->kirby(),\n      'site'         => $this->site(),\n    ];\n  }\n\n}\n"], "fixing_code": ["<?php\n\nnamespace Kirby;\n\nuse A;\nuse C;\nuse Collection;\nuse Detect;\nuse Dir;\nuse ErrorController;\nuse Exception;\nuse F;\nuse Header;\nuse Kirby;\nuse L;\nuse Obj;\nuse R;\nuse Response;\nuse Router;\nuse Server;\nuse S;\nuse Str;\nuse Toolkit;\nuse Tpl;\nuse Url;\n\nuse Kirby\\Panel\\Event;\nuse Kirby\\Panel\\ErrorHandling;\nuse Kirby\\Panel\\Installer;\nuse Kirby\\Panel\\Form;\nuse Kirby\\Panel\\Models\\Site;\nuse Kirby\\Panel\\Translation;\nuse Kirby\\Panel\\Models\\User\\Blueprint as UserBlueprint;\nuse Kirby\\Panel\\Models\\Page\\Blueprint as PageBlueprint;\n\nclass Panel {\n\n  static public $version = '2.5.13';\n\n  // minimal requirements\n  static public $requires = array(\n    'php'     => '7.2.0',\n    'toolkit' => '2.5.13',\n    'kirby'   => '2.5.13'\n  );\n\n  static public $instance;\n\n  public $kirby;\n  public $site;\n  public $path;\n  public $roots;\n  public $routes = array();\n  public $router = null;\n  public $route  = null;\n  public $translation = null;\n  public $translations = null;\n  public $csrf = null;\n\n  static public function instance() {\n    return static::$instance;\n  }\n\n  static public function version() {\n    return static::$version;\n  }\n\n  public function defaults() {\n\n    return array(\n      'panel.language'         => 'en',\n      'panel.stylesheet'       => null,\n      'panel.kirbytext'        => true,\n      'panel.session.timeout'  => 1440,\n      'panel.session.lifetime' => 0,\n      'panel.info.license'     => true,\n      'panel.info.versions'    => true,\n      'panel.favicon'          => false,\n      'panel.widgets'          => array(\n        'pages'   => true,\n        'site'    => true,\n        'account' => true,\n        'history' => true\n      ),\n    );\n\n  }\n\n  public function __construct($kirby, $root) {\n\n    // check requirements\n    $this->requirements();\n\n    // store the instance as a singleton\n    static::$instance = $this;\n\n    // init the core\n    $this->kirby = $kirby;\n\n    // configure the site setup\n    $this->site = $this->site();\n\n    // store the roots and urls for the panel\n    $this->roots = new \\Kirby\\Panel\\Roots($this, $root);\n    $this->urls  = new \\Kirby\\Panel\\Urls($this, $root);\n\n    // add the panel default options\n    $this->kirby->options = array_merge($this->defaults(), $this->kirby->options);\n\n    // setup the blueprints roots\n    UserBlueprint::$root = $this->kirby->roots()->blueprints() . DS . 'users';\n    PageBlueprint::$root = $this->kirby->roots()->blueprints();\n\n    // setup the session\n    $this->session();\n\n    // load the current translation\n    $this->translation()->load();\n\n    // load all Kirby extensions (methods, tags, smartypants)\n    $this->kirby->extensions();\n    $this->kirby->plugins();\n\n    // setup the multilang site stuff\n    $this->multilang();\n\n    // setup the form plugin\n    form::$root = array(\n      'default' => $this->roots->fields,\n      'custom'  => $this->kirby->roots()->fields()\n    );\n\n    // force ssl if set in config\n    if($this->kirby->option('ssl') and !r::secure()) {\n      // rebuild the current url with https\n      go(url::build(array('scheme' => 'https')));\n    }\n\n    // load all available routes\n    $this->routes = array_merge($this->routes, require($this->roots->config . DS . 'routes.php'));\n\n    // start the router\n    $this->router = new Router($this->routes);\n\n    // register router filters\n    $this->router->filter('auth', function($route) use($kirby) {\n\n      $panel = panel();\n\n      try {\n        $user = panel()->user();\n      } catch(Exception $e) {\n        panel()->redirect('login');\n      }\n\n      // check for area access\n      if($area = $route->area()) {\n        $panel->access($area)->check();\n      }\n\n    });\n\n    // check for a completed installation\n    $this->router->filter('isInstalled', function() use($kirby) {\n      $installer = new Installer();\n      if(!$installer->isCompleted()) {\n        panel()->redirect('install');\n      }\n    });\n\n    // check for valid csrf tokens. Can be used for get requests\n    // since all post requests are blocked anyway\n    $this->router->filter('csrf', function() {\n      panel()->csrfCheck();\n    });\n\n    // csrf protection for every post request\n    if(r::is('post')) {\n      $this->csrfCheck();\n    }\n\n  }\n\n  public function session() {\n\n    // setup the session\n    s::$timeout            = $this->kirby->option('panel.session.timeout', 120);\n    s::$cookie['lifetime'] = $this->kirby->option('panel.session.lifetime', 0);\n\n    // start the session\n    s::start();\n\n  }\n\n  public function requirements() {\n\n    if(!version_compare(PHP_VERSION, static::$requires['php'], '>=')) {\n      throw new Exception('Your PHP version is too old. Please upgrade to ' . static::$requires['php'] . ' or newer.');\n    }\n\n    if(!detect::mbstring()) {\n      throw new Exception('The mbstring extension must be installed');\n    }\n\n    if(!version_compare(toolkit::version(), static::$requires['toolkit'], '>=')) {\n      throw new Exception('Your Toolkit version is too old. Please upgrade to ' . static::$requires['toolkit'] . ' or newer.');\n    }\n\n    if(!version_compare(kirby::version(), static::$requires['kirby'], '>=')) {\n      throw new Exception('Your Kirby version is too old. Please upgrade to ' . static::$requires['kirby'] . ' or newer.');\n    }\n\n  }\n\n  public function csrf() {\n\n    if(!is_null($this->csrf)) return $this->csrf;\n\n    // see if there's a token in the session\n    $token = s::get('kirby_panel_csrf');\n\n    // create a new csrf token if not available yet\n    if(str::length($token) !== 32) {\n      $token = str::random(32);\n    }\n\n    // store the new token in the session\n    s::set('kirby_panel_csrf', $token);\n\n    // create a new csrf token\n    return $this->csrf = $token;\n\n  }\n\n  public function csrfCheck() {\n\n    $csrf = get('csrf');\n\n    if(empty($csrf) or $csrf !== s::get('kirby_panel_csrf')) {\n\n      try {\n        $this->user()->logout();\n      } catch(Exception $e) {}\n\n      $this->redirect('login');\n\n    }\n\n  }\n\n  public function kirby() {\n    return $this->kirby;\n  }\n\n  public function site() {\n\n    // return the site object if it has already been stored\n    if(!is_null($this->site)) return $this->site;\n\n    // load the original site first to load all branch files\n    $this->kirby->site();\n\n    // create a new panel site object\n    return $this->site = new Site($this->kirby);\n\n  }\n\n  public function multilang() {\n\n    if(!$this->site->multilang()) {\n      $language = null;\n    } else if($language = get('_language') or $language = s::get('kirby_panel_lang')) {\n      // $language is already set\n    } else {\n      $language = null;\n    }\n\n    // set the path and lang for the original site object\n    $this->kirby->site()->visit('/', $language);\n\n    // set the path and lang for the panel site object\n    $this->site->visit('/', $language);\n\n    // store the language code\n    if($this->site->multilang()) {\n      s::set('kirby_panel_lang', $this->site->language()->code());\n    }\n\n  }\n\n  public function page($id) {\n    if($page = (empty($id) or $id == '/') ? $this->site() : $this->site()->find($id)) {\n      return $page;\n    } else {\n      throw new Exception(l('pages.error.missing'));\n    }\n  }\n\n  public function roots() {\n    return $this->roots;\n  }\n\n  public function routes($routes = null) {\n    if(is_null($routes)) return $this->routes;\n    return $this->routes = array_merge($this->routes, (array)$routes);\n  }\n\n  public function urls() {\n    return $this->urls;\n  }\n\n  public function form($id, $data = array(), $submit = null) {\n\n    if(file_exists($id)) {\n      $file = $id;\n    } else {\n      $file = $this->roots->forms . DS . $id . '.php';\n    }\n\n    if(!file_exists($file)) {\n      throw new Exception(l('form.error.missing'));\n    }\n\n    $callback = require($file);\n\n    if(!is_callable($callback)) {\n      throw new Exception(l('form.construct.error.invalid'));\n    }\n\n    $form = call($callback, $data);\n\n    if(is_callable($submit)) {\n      $form->on('submit', $submit);\n    }\n\n    return $form;\n\n  }\n\n  public function translations() {\n\n    if(!is_null($this->translations)) return $this->translations;\n\n    $this->translations = new Collection;\n\n    foreach(dir::read($this->roots()->translations()) as $dir) {\n      // filter out everything but directories\n      if(!is_dir($this->roots()->translations() . DS . $dir)) continue;\n\n      // create the translation object\n      $translation = new Translation($this, $dir);\n      $this->translations->append($translation->code(), $translation);\n    }\n\n    return $this->translations;\n\n  }\n\n  public function translation() {\n\n    if(!is_null($this->translation)) return $this->translation;\n\n    // get the default language code from the options\n    $lang = $this->kirby()->option('panel.language', 'en');\n    $user = $this->site()->user();\n\n    if($user && $user->language()) {\n      $lang = $user->language();\n    }\n\n    return $this->translation = new Translation($this, $lang);\n\n  }\n\n  public function language() {\n    return $this->translation();\n  }\n\n  public function direction() {\n    return $this->translation()->direction();\n  }\n\n  public function launch($path = null) {\n\n    // set the timezone for all date functions\n    date_default_timezone_set($this->kirby->options['timezone']);\n\n    $this->path  = $this->kirby->path();\n    $this->route = $this->router->run($this->path);\n\n    // set the current url\n    $this->urls->current = rtrim($this->urls->index() . '/' . $this->path, '/');\n\n    // start the error handling\n    new ErrorHandling($this->kirby, $this);\n\n    ob_start();\n\n    // react on invalid routes\n    if(!$this->route) {\n      throw new Exception(l('routes.error.invalid'));\n    }\n\n    if(is_callable($this->route->action())) {\n      $response = call($this->route->action(), $this->route->arguments());\n    } else {\n      $response = $this->response();\n    }\n\n    // check for a valid response object\n    if(is_a($response, 'Response')) {\n      echo $response;\n    } else {\n      echo new Response($response);\n    }\n\n    ob_end_flush();\n\n  }\n\n  public function response() {\n\n    // let's find the controller and controller action\n    $controllerParts  = str::split($this->route->action(), '::');\n    $controllerUri    = $controllerParts[0];\n    $controllerAction = $controllerParts[1];\n    $controllerFile   = $this->roots->controllers . DS . strtolower(str_replace('Controller', '', $controllerUri)) . '.php';\n    $controllerName   = basename($controllerUri);\n\n    // react on missing controllers\n    if(!file_exists($controllerFile)) {\n      throw new Exception(l('controller.error.invalid'));\n    }\n\n    // load the controller\n    require_once($controllerFile);\n\n    // check for the called action\n    if(!method_exists($controllerName, $controllerAction)) {\n      throw new Exception(l('controller.error.action'));\n    }\n\n    // run the controller\n    $controller = new $controllerName;\n\n    // call the action and pass all arguments from the router\n    return call(array($controller, $controllerAction), $this->route->arguments());\n\n  }\n\n  public function license() {\n\n    $key  = c::get('license');\n    $type = 'trial';\n\n    /**\n     * Hey stranger,\n     *\n     * So this is the mysterious place where the panel checks for\n     * valid licenses. As you can see, this is not reporting\n     * back to any server and the license keys are rather simple to\n     * hack. If you really feel like removing the warning in the panel\n     * or tricking Kirby into believing you bought a valid license even\n     * if you didn't, go for it! But remember that literally thousands of\n     * hours of work have gone into Kirby in order to make your\n     * life as a developer, designer, publisher, etc. easier. If this\n     * doesn't mean anything to you, you are probably a lost case anyway.\n     *\n     * Have a great day!\n     *\n     * Bastian\n     */\n    if(str::startsWith($key, 'K2-PRO') and str::length($key) == 39) {\n      $type = 'Kirby 2 Professional';\n    } else if(str::startsWith($key, 'K2-PERSONAL') and str::length($key) == 44) {\n      $type = 'Kirby 2 Personal';\n    } else if(str::startsWith($key, 'MD-') and str::length($key) == 35) {\n      $type = 'Kirby 1';\n    } else if(str::startsWith($key, 'BETA') and str::length($key) == 9) {\n      $type = 'Kirby 1';\n    } else if(str::length($key) == 32) {\n      $type = 'Kirby 1';\n    } else {\n      $key = null;\n    }\n\n    return new Obj(array(\n      'key'   => $key,\n      'local' => $this->isLocal(),\n      'type'  => $type,\n    ));\n\n  }\n\n  public function isLocal() {\n\n    $host = server::get('SERVER_NAME');\n    $ip   = server::get('SERVER_ADDR');\n\n    if ($host === 'localhost') {\n      return true;\n    }\n\n    if (str::endsWith($host, '.localhost') === true) {\n      return true;\n    }\n\n    if (str::endsWith($host, '.local') === true) {\n      return true;\n    }\n\n    if (str::endsWith($host, '.test') === true) {\n      return true;\n    }\n\n    if (in_array($ip, ['::1', '127.0.0.1']) === true) {\n\n      if (\n        isset($_SERVER['HTTP_X_FORWARDED_FOR']) === true &&\n        in_array($_SERVER['HTTP_X_FORWARDED_FOR'], ['::1', '127.0.0.1']) === false\n      ) {\n        return false;\n      }\n\n      if (\n        isset($_SERVER['HTTP_CLIENT_IP']) === true &&\n        in_array($_SERVER['HTTP_CLIENT_IP'], ['::1', '127.0.0.1']) === false\n      ) {\n        return false;\n      }\n\n      // no reverse proxy or the real client also comes from localhost\n      return true;\n    }\n\n    return false;\n  }\n\n  public function notify($text) {\n    s::set('kirby_panel_message', array(\n      'type' => 'notification',\n      'text' => $text,\n    ));\n  }\n\n  public function alert($text) {\n    s::set('kirby_panel_message', array(\n      'type' => 'error',\n      'text' => $text,\n    ));\n  }\n\n  public function redirect($obj = '/', $action = false, $force = false) {\n\n    if($force === false and $redirect = get('_redirect')) {\n      $url = purl($redirect);\n    } else {\n      $url = purl($obj, $action);\n    }\n\n    if(r::ajax()) {\n\n      $user = $this->site()->user();\n\n      die(response::json(array(\n        'direction' => $this->direction(),\n        'user'      => $user ? $user->username() : false,\n        'url'       => $url\n      )));\n\n    } else {\n      go($url);\n    }\n\n  }\n\n  public function users() {\n    return $this->site()->users();\n  }\n\n  public function user($username = null) {\n    if($user = $this->site()->user($username)) {\n      return $user;\n    } else {\n      throw new Exception(l('users.error.missing'));\n    }\n  }\n\n  public static function fatal($e, $root) {\n\n    $message = $e->getMessage() ? $e->getMessage() : 'Error without a useful message :(';\n    $where   = implode('<br>', [\n      '',\n      '',\n      '<b>It happened here:</b>',\n      'File: <i>' . str_replace($root, '/panel', $e->getFile()) . '</i>',\n      'Line: <i>' . $e->getLine() . '</i>'\n    ]);\n\n    // load the fatal screen\n    return tpl::load($root . DS . 'app' . DS . 'layouts' . DS . 'fatal.php', [\n      'css'     => url::index() . '/assets/css/panel.css',\n      'content' => $message . $where\n    ]);\n\n  }\n\n  public function access($area) {\n    return new Event('panel.access.' . $area);\n  }\n\n  public function __debuginfo() {\n    return [\n      'version'      => $this->version(),\n      'license'      => $this->license(),\n      'roots'        => $this->roots(),\n      'urls'         => $this->urls(),\n      'csrf'         => $this->csrf(),\n      'translations' => $this->translations()->keys(),\n      'translation'  => $this->translation(),\n      'routes'       => $this->routes(),\n      'kirby'        => $this->kirby(),\n      'site'         => $this->site(),\n    ];\n  }\n\n}\n"], "filenames": ["app/src/panel.php"], "buggy_code_start_loc": [496], "buggy_code_end_loc": [503], "fixing_code_start_loc": [496], "fixing_code_end_loc": [537], "type": "CWE-346", "message": "Kirby is a CMS. In Kirby CMS (getkirby/cms) before version 3.3.6, and Kirby Panel before version 2.5.14 there is a vulnerability in which the admin panel may be accessed if hosted on a .dev domain. In order to protect new installations on public servers that don't have an admin account for the Panel yet, we block account registration there by default. This is a security feature, which we implemented years ago in Kirby 2. It helps to avoid that you forget registering your first admin account on a public server. In this case \u2013 without our security block \u2013 someone else might theoretically be able to find your site, find out it's running on Kirby, find the Panel and then register the account first. It's an unlikely situation, but it's still a certain risk. To be able to register the first Panel account on a public server, you have to enforce the installer via a config setting. This helps to push all users to the best practice of registering your first Panel account on your local machine and upload it together with the rest of the site. This installation block implementation in Kirby versions before 3.3.6 still assumed that .dev domains are local domains, which is no longer true. In the meantime, those domains became publicly available. This means that our installation block is no longer working as expected if you use a .dev domain for your Kirby site. Additionally the local installation check may also fail if your site is behind a reverse proxy. You are only affected if you use a .dev domain or your site is behind a reverse proxy and you have not yet registered your first Panel account on the public server and someone finds your site and tries to login at `yourdomain.dev/panel` before you register your first account. You are not affected if you have already created one or multiple Panel accounts (no matter if on a .dev domain or behind a reverse proxy). The problem has been patched in Kirby 3.3.6. Please upgrade to this or a later version to fix the vulnerability.", "other": {"cve": {"id": "CVE-2020-26253", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-08T02:15:10.507", "lastModified": "2020-12-08T18:19:12.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Kirby is a CMS. In Kirby CMS (getkirby/cms) before version 3.3.6, and Kirby Panel before version 2.5.14 there is a vulnerability in which the admin panel may be accessed if hosted on a .dev domain. In order to protect new installations on public servers that don't have an admin account for the Panel yet, we block account registration there by default. This is a security feature, which we implemented years ago in Kirby 2. It helps to avoid that you forget registering your first admin account on a public server. In this case \u2013 without our security block \u2013 someone else might theoretically be able to find your site, find out it's running on Kirby, find the Panel and then register the account first. It's an unlikely situation, but it's still a certain risk. To be able to register the first Panel account on a public server, you have to enforce the installer via a config setting. This helps to push all users to the best practice of registering your first Panel account on your local machine and upload it together with the rest of the site. This installation block implementation in Kirby versions before 3.3.6 still assumed that .dev domains are local domains, which is no longer true. In the meantime, those domains became publicly available. This means that our installation block is no longer working as expected if you use a .dev domain for your Kirby site. Additionally the local installation check may also fail if your site is behind a reverse proxy. You are only affected if you use a .dev domain or your site is behind a reverse proxy and you have not yet registered your first Panel account on the public server and someone finds your site and tries to login at `yourdomain.dev/panel` before you register your first account. You are not affected if you have already created one or multiple Panel accounts (no matter if on a .dev domain or behind a reverse proxy). The problem has been patched in Kirby 3.3.6. Please upgrade to this or a later version to fix the vulnerability."}, {"lang": "es", "value": "Kirby es un CMS.&#xa0;En Kirby CMS (getkirby/cms) anterior a versi\u00f3n 3.3.6, y Kirby Panel anterior a versi\u00f3n 2.5.14, se presenta una vulnerabilidad en la que se puede acceder al panel de administraci\u00f3n si est\u00e1 alojado en un dominio .dev.&#xa0;A fin de proteger nuevas instalaciones en servidores p\u00fablicos que no tienen una cuenta de administrador para el Panel a\u00fan, bloqueamos el registro de cuenta all\u00ed por defecto.&#xa0;Esta es una caracter\u00edstica de seguridad que implementamos hace a\u00f1os en Kirby versi\u00f3n 2. Ayuda a evitar que olvide registrar su primera cuenta de administrador en un servidor p\u00fablico.&#xa0;En este caso, sin nuestro bloqueo de seguridad, te\u00f3ricamente alguien m\u00e1s podr\u00eda encontrar su sitio, detectar que se est\u00e1 ejecutando en Kirby, buscar el Panel y luego registrar la cuenta primero.&#xa0;Es una situaci\u00f3n poco probable, pero sigue siendo un cierto riesgo.&#xa0;Para poder registrar la primera cuenta del Panel en un servidor p\u00fablico,&#xa0;tienes que aplicar el instalador por medio de un ajuste de configuraci\u00f3n.&#xa0;Esto ayuda a impulsar a todos los usuarios a la mejor pr\u00e1ctica de registrar su primera cuenta del Panel en su m\u00e1quina local y cargarla junto con el resto del sitio.&#xa0;Esta implementaci\u00f3n del bloque de instalaci\u00f3n en las versiones de Kirby anteriores a 3.3.6 a\u00fan asum\u00eda que los dominios .dev son dominios locales, lo cual ya no es cierto.&#xa0;Mientras tanto, esos dominios se hicieron disponibles p\u00fablicamente.&#xa0;Esto significa que nuestro bloque de instalaci\u00f3n ya no funciona como se esperaba si usa un dominio .dev para su sitio de Kirby.&#xa0;Adem\u00e1s, la comprobaci\u00f3n de la instalaci\u00f3n local tambi\u00e9n puede presentar un fallo si su sitio est\u00e1 detr\u00e1s de un proxy inverso.&#xa0;Solo estar\u00e1 afectado si usa un dominio .dev o su sitio est\u00e1 detr\u00e1s de un proxy inverso y a\u00fan no ha registrado su primera cuenta del Panel en el servidor p\u00fablico y alguien encuentra su sitio e intenta iniciar sesi\u00f3n en \"yourdomain.dev/panel\" antes de que registre su primera cuenta.&#xa0;No estar\u00e1 afectado si ya ha creado una o varias cuentas del Panel (sin importar si est\u00e1 en un dominio .dev o detr\u00e1s de un proxy inverso).&#xa0;El problema ha sido parcheado en Kirby versi\u00f3n 3.3.6.&#xa0;Actualice a esta o una versi\u00f3n posterior para corregir la vulnerabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-346"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-346"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getkirby:kirby:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.6", "matchCriteriaId": "5537B2C0-FA74-44FE-973D-F5FB820B0C81"}, {"vulnerable": true, "criteria": "cpe:2.3:a:getkirby:panel:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.14", "matchCriteriaId": "33033A60-7661-4FFE-969A-3ECA22773648"}]}]}], "references": [{"url": "https://github.com/getkirby-v2/panel/commit/7f9ac1876bacb89fd8f142f5e561a02ebb725baa", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/releases/tag/3.3.6", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/security/advisories/GHSA-2ccx-2gf3-8xvv", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://packagist.org/packages/getkirby/cms", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://packagist.org/packages/getkirby/panel", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/getkirby-v2/panel/commit/7f9ac1876bacb89fd8f142f5e561a02ebb725baa"}}