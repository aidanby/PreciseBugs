{"buggy_code": ["<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.5.0\n * ---------------------------------------------------------------------------- */\n\n\n/**\n * Api library.\n *\n * Handles API related functionality.\n *\n * @package Libraries\n */\nclass Api {\n    /**\n     * @var EA_Controller\n     */\n    protected $CI;\n\n    /**\n     * @var int\n     */\n    protected $default_length = 20;\n\n    /**\n     * @var EA_Model\n     */\n    protected $model;\n\n    /**\n     * Api constructor.\n     */\n    public function __construct()\n    {\n        $this->CI =& get_instance();\n\n        $this->CI->load->library('accounts');\n    }\n\n    /**\n     * Load and use the provided model class.\n     *\n     * @param string $model\n     */\n    public function model(string $model)\n    {\n        $this->CI->load->model($model);\n\n        $this->model = $this->CI->{$model};\n    }\n\n    /**\n     * Authorize the API request (Basic Auth or Bearer Token supported).\n     */\n    public function auth()\n    {\n        try\n        {\n            // Bearer token. \n            $api_token = setting('api_token');\n\n            if ( ! empty($api_token) && $api_token === $this->get_bearer_token())\n            {\n                return;\n            }\n\n            // Basic auth.  \n            $username = $_SERVER['PHP_AUTH_USER'];\n\n            $password = $_SERVER['PHP_AUTH_PW'];\n\n            if ( ! $this->CI->accounts->check_login($username, $password))\n            {\n                throw new RuntimeException('The provided credentials do not match any admin user!', 401, 'Unauthorized');\n            }\n        }\n        catch (Throwable $e)\n        {\n            $this->request_authentication();\n        }\n    }\n\n    /**\n     * Returns the bearer token value.\n     *\n     * @return string\n     */\n    protected function get_bearer_token(): ?string\n    {\n        $headers = $this->get_authorization_header();\n\n        // HEADER: Get the access token from the header\n\n        if ( ! empty($headers))\n        {\n            if (preg_match('/Bearer\\s(\\S+)/', $headers, $matches))\n            {\n                return $matches[1];\n            }\n        }\n\n        return NULL;\n    }\n\n    /**\n     * Returns the authorization header.\n     *\n     * @return string|null\n     */\n    protected function get_authorization_header(): ?string\n    {\n        $headers = NULL;\n\n        if (isset($_SERVER['Authorization']))\n        {\n            $headers = trim($_SERVER['Authorization']);\n        }\n        else\n        {\n            if (isset($_SERVER['HTTP_AUTHORIZATION']))\n            {\n                // Nginx or fast CGI\n                $headers = trim($_SERVER['HTTP_AUTHORIZATION']);\n            }\n            elseif (function_exists('apache_request_headers'))\n            {\n                $requestHeaders = apache_request_headers();\n\n                // Server-side fix for bug in old Android versions (a nice side effect of this fix means we don't care\n                // about capitalization for Authorization).\n                $requestHeaders = array_combine(array_map('ucwords', array_keys($requestHeaders)), array_values($requestHeaders));\n\n                if (isset($requestHeaders['Authorization']))\n                {\n                    $headers = trim($requestHeaders['Authorization']);\n                }\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Sets request authentication headers.\n     */\n    public function request_authentication()\n    {\n        header('WWW-Authenticate: Basic realm=\"Easy!Appointments\"');\n        header('HTTP/1.0 401 Unauthorized');\n        exit('You are not authorized to use the API.');\n    }\n\n    /**\n     * Get the search keyword value of the current request.\n     *\n     * @return string|null\n     */\n    public function request_keyword(): ?string\n    {\n        return request('q');\n    }\n\n    /**\n     * Get the limit value of the current request.\n     *\n     * @return int|null\n     */\n    public function request_limit(): ?int\n    {\n        return request('length', $this->default_length);\n    }\n\n    /**\n     * Get the limit value of the current request.\n     *\n     * @return int|null\n     */\n    public function request_offset(): ?int\n    {\n        $page = request('page', 1);\n\n        $length = request('length', $this->default_length);\n\n        return ($page - 1) * $length;\n    }\n\n    /**\n     * Get the order by value of the current request.\n     *\n     * @return string|null\n     */\n    public function request_order_by(): ?string\n    {\n        $sort = request('sort');\n\n        if ( ! $sort)\n        {\n            return NULL;\n        }\n\n        $sort_tokens = array_map('trim', explode(',', $sort));\n\n        $order_by = [];\n\n        foreach ($sort_tokens as $sort_token)\n        {\n            $api_field = substr($sort_token, 1);\n\n            $db_field = $this->model->db_field($api_field);\n\n            $direction_operator = substr($sort_token, 0, 1);\n\n            if ( ! in_array($direction_operator, ['-', '+']))\n            {\n                throw new InvalidArgumentException('Invalid sort direction operator provided (expected \"-\" or \"+\"): ' . $direction_operator);\n            }\n\n            $direction = $direction_operator === '-' ? 'DESC' : 'ASC';\n\n            $order_by[] = $db_field . ' ' . $direction;\n        }\n\n        return implode(', ', $order_by);\n    }\n\n    /**\n     * Get the chosen \"fields\" array of the current request.\n     *\n     * @return array|null\n     */\n    public function request_fields(): ?array\n    {\n        $fields = request('fields');\n\n        if ( ! $fields)\n        {\n            return NULL;\n        }\n\n        return array_map('trim', explode(',', $fields));\n    }\n\n    /**\n     * Get the provided \"with\" array of the current request.\n     *\n     * @return array|null\n     */\n    public function request_with(): ?array\n    {\n        $with = request('with');\n\n        if ( ! $with)\n        {\n            return NULL;\n        }\n\n        return array_map('trim', explode(',', $with));\n    }\n}\n"], "fixing_code": ["<?php defined('BASEPATH') or exit('No direct script access allowed');\n\n/* ----------------------------------------------------------------------------\n * Easy!Appointments - Online Appointment Scheduler\n *\n * @package     EasyAppointments\n * @author      A.Tselegidis <alextselegidis@gmail.com>\n * @copyright   Copyright (c) Alex Tselegidis\n * @license     https://opensource.org/licenses/GPL-3.0 - GPLv3\n * @link        https://easyappointments.org\n * @since       v1.5.0\n * ---------------------------------------------------------------------------- */\n\n\n/**\n * Api library.\n *\n * Handles API related functionality.\n *\n * @package Libraries\n */\nclass Api {\n    /**\n     * @var EA_Controller\n     */\n    protected $CI;\n\n    /**\n     * @var int\n     */\n    protected $default_length = 20;\n\n    /**\n     * @var EA_Model\n     */\n    protected $model;\n\n    /**\n     * Api constructor.\n     */\n    public function __construct()\n    {\n        $this->CI =& get_instance();\n\n        $this->CI->load->library('accounts');\n    }\n\n    /**\n     * Load and use the provided model class.\n     *\n     * @param string $model\n     */\n    public function model(string $model)\n    {\n        $this->CI->load->model($model);\n\n        $this->model = $this->CI->{$model};\n    }\n\n    /**\n     * Authorize the API request (Basic Auth or Bearer Token supported).\n     */\n    public function auth()\n    {\n        try\n        {\n            // Bearer token. \n            $api_token = setting('api_token');\n\n            if ( ! empty($api_token) && $api_token === $this->get_bearer_token())\n            {\n                return;\n            }\n\n            // Basic auth.  \n            $username = $_SERVER['PHP_AUTH_USER'];\n\n            $password = $_SERVER['PHP_AUTH_PW'];\n\n            $userdata = $this->CI->accounts->check_login($username, $password);\n\n            if (empty($userdata['role_slug']) || $userdata['role_slug'] !== DB_SLUG_ADMIN)\n            {\n                throw new RuntimeException('The provided credentials do not match any admin user!', 401, 'Unauthorized');\n            }\n        }\n        catch (Throwable $e)\n        {\n            $this->request_authentication();\n        }\n    }\n\n    /**\n     * Returns the bearer token value.\n     *\n     * @return string\n     */\n    protected function get_bearer_token(): ?string\n    {\n        $headers = $this->get_authorization_header();\n\n        // HEADER: Get the access token from the header\n\n        if ( ! empty($headers))\n        {\n            if (preg_match('/Bearer\\s(\\S+)/', $headers, $matches))\n            {\n                return $matches[1];\n            }\n        }\n\n        return NULL;\n    }\n\n    /**\n     * Returns the authorization header.\n     *\n     * @return string|null\n     */\n    protected function get_authorization_header(): ?string\n    {\n        $headers = NULL;\n\n        if (isset($_SERVER['Authorization']))\n        {\n            $headers = trim($_SERVER['Authorization']);\n        }\n        else\n        {\n            if (isset($_SERVER['HTTP_AUTHORIZATION']))\n            {\n                // Nginx or fast CGI\n                $headers = trim($_SERVER['HTTP_AUTHORIZATION']);\n            }\n            elseif (function_exists('apache_request_headers'))\n            {\n                $requestHeaders = apache_request_headers();\n\n                // Server-side fix for bug in old Android versions (a nice side effect of this fix means we don't care\n                // about capitalization for Authorization).\n                $requestHeaders = array_combine(array_map('ucwords', array_keys($requestHeaders)), array_values($requestHeaders));\n\n                if (isset($requestHeaders['Authorization']))\n                {\n                    $headers = trim($requestHeaders['Authorization']);\n                }\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Sets request authentication headers.\n     */\n    public function request_authentication()\n    {\n        header('WWW-Authenticate: Basic realm=\"Easy!Appointments\"');\n        header('HTTP/1.0 401 Unauthorized');\n        exit('You are not authorized to use the API.');\n    }\n\n    /**\n     * Get the search keyword value of the current request.\n     *\n     * @return string|null\n     */\n    public function request_keyword(): ?string\n    {\n        return request('q');\n    }\n\n    /**\n     * Get the limit value of the current request.\n     *\n     * @return int|null\n     */\n    public function request_limit(): ?int\n    {\n        return request('length', $this->default_length);\n    }\n\n    /**\n     * Get the limit value of the current request.\n     *\n     * @return int|null\n     */\n    public function request_offset(): ?int\n    {\n        $page = request('page', 1);\n\n        $length = request('length', $this->default_length);\n\n        return ($page - 1) * $length;\n    }\n\n    /**\n     * Get the order by value of the current request.\n     *\n     * @return string|null\n     */\n    public function request_order_by(): ?string\n    {\n        $sort = request('sort');\n\n        if ( ! $sort)\n        {\n            return NULL;\n        }\n\n        $sort_tokens = array_map('trim', explode(',', $sort));\n\n        $order_by = [];\n\n        foreach ($sort_tokens as $sort_token)\n        {\n            $api_field = substr($sort_token, 1);\n\n            $db_field = $this->model->db_field($api_field);\n\n            $direction_operator = substr($sort_token, 0, 1);\n\n            if ( ! in_array($direction_operator, ['-', '+']))\n            {\n                throw new InvalidArgumentException('Invalid sort direction operator provided (expected \"-\" or \"+\"): ' . $direction_operator);\n            }\n\n            $direction = $direction_operator === '-' ? 'DESC' : 'ASC';\n\n            $order_by[] = $db_field . ' ' . $direction;\n        }\n\n        return implode(', ', $order_by);\n    }\n\n    /**\n     * Get the chosen \"fields\" array of the current request.\n     *\n     * @return array|null\n     */\n    public function request_fields(): ?array\n    {\n        $fields = request('fields');\n\n        if ( ! $fields)\n        {\n            return NULL;\n        }\n\n        return array_map('trim', explode(',', $fields));\n    }\n\n    /**\n     * Get the provided \"with\" array of the current request.\n     *\n     * @return array|null\n     */\n    public function request_with(): ?array\n    {\n        $with = request('with');\n\n        if ( ! $with)\n        {\n            return NULL;\n        }\n\n        return array_map('trim', explode(',', $with));\n    }\n}\n"], "filenames": ["application/libraries/Api.php"], "buggy_code_start_loc": [80], "buggy_code_end_loc": [81], "fixing_code_start_loc": [80], "fixing_code_end_loc": [83], "type": "CWE-269", "message": "API Privilege Escalation in GitHub repository alextselegidis/easyappointments prior to 1.5.0. Full system takeover.", "other": {"cve": {"id": "CVE-2022-1397", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-10T14:15:08.333", "lastModified": "2022-05-16T17:07:31.830", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "API Privilege Escalation in GitHub repository alextselegidis/easyappointments prior to 1.5.0. Full system takeover."}, {"lang": "es", "value": "Una Escalada de privilegios de la API en el repositorio de GitHub alextselegidis/easyappointments versiones anteriores a 1.5.0. Una toma de control total del sistema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.0}, "baseSeverity": "HIGH", "exploitabilityScore": 8.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:easyappointments:easyappointments:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.0", "matchCriteriaId": "063BC3E9-AA71-49D6-9CEE-F2E7E7B9D687"}]}]}], "references": [{"url": "https://github.com/alextselegidis/easyappointments/commit/63dbb51decfcc1631c398ecd6d30e3a337845526", "source": "security@huntr.dev", "tags": ["Patch", "Technical Description"]}, {"url": "https://huntr.dev/bounties/5f69e094-ab8c-47a3-b01d-8c12a3b14c61", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Technical Description"]}]}, "github_commit_url": "https://github.com/alextselegidis/easyappointments/commit/63dbb51decfcc1631c398ecd6d30e3a337845526"}}