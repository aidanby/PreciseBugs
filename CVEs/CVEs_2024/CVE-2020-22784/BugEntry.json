{"buggy_code": ["/**\n * 2011 Peter 'Pita' Martischka\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar mysql = require(\"mysql\");\nvar async = require(\"async\");\n\nexports.database = function(settings)\n{\n  this.db = require('mysql').createConnection(settings);\n\n  this.settings = settings;\n\n  if(this.settings.host != null)\n    this.db.host = this.settings.host;\n\n  if(this.settings.port != null)\n    this.db.port = this.settings.port;\n\n  if(this.settings.user != null)\n    this.db.user = this.settings.user;\n\n  if(this.settings.password != null)\n    this.db.password = this.settings.password;\n\n  if(this.settings.database != null)\n    this.db.database = this.settings.database;\n\n  if(this.settings.charset != null)\n    this.db.charset = this.settings.charset;\n\n  this.settings.cache = 1000;\n  this.settings.writeInterval = 100;\n  this.settings.json = true;\n}\n\nexports.database.prototype.clearPing = function(){\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n}\n\nexports.database.prototype.schedulePing = function(){\n  this.clearPing();\n\n  var self = this;\n  this.interval = setInterval(function(){\n    self.db.query('SELECT 1');\n  }, 10000);\n}\n\nexports.database.prototype.init = function(callback)\n{\n  var db = this.db;\n  var self = this;\n\n  var sqlCreate = \"CREATE TABLE IF NOT EXISTS `store` ( \" +\n                  \"`key` VARCHAR( 100 ) NOT NULL COLLATE utf8mb4_bin, \" +\n                  \"`value` LONGTEXT COLLATE utf8mb4_bin NOT NULL , \" +\n                  \"PRIMARY KEY ( `key` ) \" +\n                  \") ENGINE=MyISAM CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\";\n\n  var sqlAlter  = \"ALTER TABLE store MODIFY `key` VARCHAR(100) COLLATE utf8mb4_bin;\";\n\n  db.query(sqlCreate,[],function(err){\n    //call the main callback\n    callback(err);\n\n    // Checks for Database charset et al\n    var dbCharSet = \"SELECT DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '\"+db.database+\"'\";\n    db.query(dbCharSet,function(err, result){\n      if (result[0].DEFAULT_CHARACTER_SET_NAME !== db.charset){\n        console.error(\"Database is not configured with charset \"+db.charset+ \" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset);\n      };\n\n      if (result[0].DEFAULT_COLLATION_NAME.indexOf(db.charset) === -1 ){\n        console.error(\"Database is not configured with collation name that includes \"+db.charset+\" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset, result[0].DEFAULT_COLLATION_NAME);\n      };\n    });\n\n    var tableCharSet = \"SELECT CCSA.character_set_name FROM information_schema.`TABLES` T,information_schema.`COLLATION_CHARACTER_SET_APPLICABILITY` CCSA WHERE CCSA.collation_name = T.table_collation AND T.table_schema = '\"+db.database+\"' AND T.table_name = 'store'\";\n    db.query(tableCharSet,function(err, result, tf){\n      if (!result[0]) console.warn(\"Data has no character_set_name value -- This may lead to crashes when certain characters are pasted in pads\");\n      if (result[0] && (result[0].character_set_name !== db.charset)){\n        console.error(\"table is not configured with charset \"+db.charset+\" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset);\n      };\n    });\n\n    //check migration level, alter if not migrated\n    self.get(\"MYSQL_MIGRATION_LEVEL\", function(err, level){\n      if(err){\n        throw err;\n      }\n\n      if(level !== \"1\"){\n        db.query(sqlAlter,[],function(err)\n        {\n          if(err){\n            throw err;\n          }\n\n          self.set(\"MYSQL_MIGRATION_LEVEL\",\"1\", function(err){\n            if(err){\n              throw err;\n            }\n          });\n        });\n      }\n    })\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.get = function (key, callback)\n{\n  this.db.query(\"SELECT `value` FROM `store` WHERE  `key` = ?\", [key], function(err,results)\n  {\n    var value = null;\n    \n    if(!err && results.length == 1)\n    {\n      value = results[0].value;\n    }\n  \n    callback(err,value);\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.findKeys = function (key, notKey, callback)\n{\n  var query=\"SELECT `key` FROM `store` WHERE  `key` LIKE ?\"\n    , params=[]\n  ;\n  \n  //desired keys are key, e.g. pad:%\n  key=key.replace(/\\*/g,'%');\n  params.push(key);\n  \n  if(notKey!=null && notKey != undefined){\n    //not desired keys are notKey, e.g. %:%:%\n    notKey=notKey.replace(/\\*/g,'%');\n    query+=\" AND `key` NOT LIKE ?\"\n    params.push(notKey);\n  }\n  this.db.query(query, params, function(err,results)\n  {\n    var value = [];\n    \n    if(!err && results.length > 0)\n    {\n      results.forEach(function(val){\n        value.push(val.key);\n      });\n    }\n  \n    callback(err,value);\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.set = function (key, value, callback)\n{\n  if(key.length > 100)\n  {\n    callback(\"Your Key can only be 100 chars\");\n  }\n  else\n  {\n    this.db.query(\"REPLACE INTO `store` VALUES (?,?)\", [key, value], function(err, info){\n      callback(err);\n    });\n  }\n\n  this.schedulePing();\n}\n\nexports.database.prototype.remove = function (key, callback)\n{\n  this.db.query(\"DELETE FROM `store` WHERE `key` = ?\", [key], callback);\n\n  this.schedulePing();\n}\n\nexports.database.prototype.doBulk = function (bulk, callback)\n{ \n  var _this = this;\n  \n  var replaceSQL = \"REPLACE INTO `store` VALUES \";\n  var removeSQL = \"DELETE FROM `store` WHERE `key` IN (\"\n  \n  var firstReplace = true;\n  var firstRemove = true;\n  \n  for(var i in bulk)\n  {  \n    if(bulk[i].type == \"set\")\n    {\n      if(!firstReplace)\n        replaceSQL+=\",\";\n      firstReplace = false;\n    \n      replaceSQL+=\"(\" + _this.db.escape(bulk[i].key) + \", \" + _this.db.escape(bulk[i].value) + \")\";\n    }\n    else if(bulk[i].type == \"remove\")\n    {\n      if(!firstRemove)\n        removeSQL+=\",\";\n      firstRemove = false;\n    \n      removeSQL+=_this.db.escape(bulk[i].key);\n    }\n  }\n  \n  replaceSQL+=\";\";\n  removeSQL+=\");\";\n  \n  async.parallel([\n    function(callback)\n    {\n      if(!firstReplace)\n        _this.db.query(replaceSQL, callback);\n      else\n        callback();\n    },\n    function(callback)\n    {\n      if(!firstRemove)\n        _this.db.query(removeSQL, callback);\n      else\n        callback();\n    }\n  ], callback);\n \n  this.schedulePing(); \n}\n\nexports.database.prototype.close = function(callback)\n{\n  this.clearPing();\n  this.db.end(callback);\n}\n", "{\n  \"name\": \"ueberdb2\",\n  \"description\": \"transform every database into a object key value store\",\n  \"url\": \"https://github.com/ether/ueberDB\",\n  \"keywords\": [\n    \"database\",\n    \"keyvalue\"\n  ],\n  \"author\": {\n    \"name\": \"Etherpad Foundation\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"John McLear\"\n    },\n    {\n      \"name\": \"spcsser\"\n    },\n    {\n      \"name\": \"Peter Martischka\"\n    }\n  ],\n  \"dependencies\": {\n    \"async\": \"^3.2.0\",\n    \"cassandra-driver\": \"^4.5.0\",\n    \"channels\": \"0.0.4\",\n    \"dirty\": \"^1.1.0\",\n    \"elasticsearch\": \"^16.7.1\",\n    \"mysql\": \"2.18.1\",\n    \"nano\": \"^8.2.2\",\n    \"pg\": \"^7.18.2\",\n    \"redis\": \">=0.12.1\",\n    \"rethinkdb\": \"^2.3.1\"\n  },\n  \"devDependencies\": {\n    \"expect.js\": \"0.3.1\",\n    \"log4js\": \"^6.1.2\",\n    \"mocha\": \"^7.1.1\",\n    \"mongodb\": \"^3.5.5\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ether/ueberDB.git\"\n  },\n  \"main\": \"./CloneAndAtomicLayer\",\n  \"version\": \"0.4.3\",\n  \"gitHead\": \"00cb8c896433922111c12fe9d2a45087fdb11d59\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ether/ueberDB/issues\"\n  },\n  \"homepage\": \"https://github.com/ether/ueberDB\",\n  \"_id\": \"ueberdb2@0.3.0\",\n  \"scripts\": {},\n  \"_shasum\": \"cbebe8b8a0879f4ca970c3d69bd578e291d6e835\",\n  \"_from\": \"ueberdb2@0.3.0\",\n  \"_npmVersion\": \"2.5.1\",\n  \"_nodeVersion\": \"0.12.0\",\n  \"_npmUser\": {\n    \"name\": \"johnyma22\",\n    \"email\": \"john@mclear.co.uk\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"johnyma22\",\n      \"email\": \"john@mclear.co.uk\"\n    }\n  ],\n  \"dist\": {\n    \"shasum\": \"cbebe8b8a0879f4ca970c3d69bd578e291d6e835\",\n    \"tarball\": \"http://registry.npmjs.org/ueberdb2/-/ueberdb2-0.3.0.tgz\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/ueberdb2/-/ueberdb2-0.3.0.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\n"], "fixing_code": ["/**\n * 2011 Peter 'Pita' Martischka\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar mysql = require(\"mysql\");\nvar async = require(\"async\");\n\nexports.database = function(settings)\n{\n  this.db = require('mysql').createConnection(settings);\n\n  this.settings = settings;\n\n  if(this.settings.host != null)\n    this.db.host = this.settings.host;\n\n  if(this.settings.port != null)\n    this.db.port = this.settings.port;\n\n  if(this.settings.user != null)\n    this.db.user = this.settings.user;\n\n  if(this.settings.password != null)\n    this.db.password = this.settings.password;\n\n  if(this.settings.database != null)\n    this.db.database = this.settings.database;\n\n  if(this.settings.charset != null)\n    this.db.charset = this.settings.charset;\n\n  this.settings.cache = 1000;\n  this.settings.writeInterval = 100;\n  this.settings.json = true;\n}\n\nexports.database.prototype.clearPing = function(){\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n}\n\nexports.database.prototype.schedulePing = function(){\n  this.clearPing();\n\n  var self = this;\n  this.interval = setInterval(function(){\n    self.db.query('SELECT 1');\n  }, 10000);\n}\n\nexports.database.prototype.init = function(callback)\n{\n  var db = this.db;\n  var self = this;\n\n  var sqlCreate = \"CREATE TABLE IF NOT EXISTS `store` ( \" +\n                  \"`key` VARCHAR( 100 ) NOT NULL COLLATE utf8mb4_bin, \" +\n                  \"`value` LONGTEXT COLLATE utf8mb4_bin NOT NULL , \" +\n                  \"PRIMARY KEY ( `key` ) \" +\n                  \") ENGINE=MyISAM CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\";\n\n  var sqlAlter  = \"ALTER TABLE store MODIFY `key` VARCHAR(100) COLLATE utf8mb4_bin;\";\n\n  db.query(sqlCreate,[],function(err){\n    //call the main callback\n    callback(err);\n\n    // Checks for Database charset et al\n    var dbCharSet = \"SELECT DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '\"+db.database+\"'\";\n    db.query(dbCharSet,function(err, result){\n      if (result[0].DEFAULT_CHARACTER_SET_NAME !== db.charset){\n        console.error(\"Database is not configured with charset \"+db.charset+ \" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset);\n      };\n\n      if (result[0].DEFAULT_COLLATION_NAME.indexOf(db.charset) === -1 ){\n        console.error(\"Database is not configured with collation name that includes \"+db.charset+\" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset, result[0].DEFAULT_COLLATION_NAME);\n      };\n    });\n\n    var tableCharSet = \"SELECT CCSA.character_set_name FROM information_schema.`TABLES` T,information_schema.`COLLATION_CHARACTER_SET_APPLICABILITY` CCSA WHERE CCSA.collation_name = T.table_collation AND T.table_schema = '\"+db.database+\"' AND T.table_name = 'store'\";\n    db.query(tableCharSet,function(err, result, tf){\n      if (!result[0]) console.warn(\"Data has no character_set_name value -- This may lead to crashes when certain characters are pasted in pads\");\n      if (result[0] && (result[0].character_set_name !== db.charset)){\n        console.error(\"table is not configured with charset \"+db.charset+\" -- This may lead to crashes when certain characters are pasted in pads\");\n        console.log(result[0], db.charset);\n      };\n    });\n\n    //check migration level, alter if not migrated\n    self.get(\"MYSQL_MIGRATION_LEVEL\", function(err, level){\n      if(err){\n        throw err;\n      }\n\n      if(level !== \"1\"){\n        db.query(sqlAlter,[],function(err)\n        {\n          if(err){\n            throw err;\n          }\n\n          self.set(\"MYSQL_MIGRATION_LEVEL\",\"1\", function(err){\n            if(err){\n              throw err;\n            }\n          });\n        });\n      }\n    })\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.get = function (key, callback)\n{\n  this.db.query(\"SELECT `value` FROM `store` WHERE BINARY `key` = ?\", [key], function(err,results)\n  {\n    var value = null;\n    \n    if(!err && results.length == 1)\n    {\n      value = results[0].value;\n    }\n  \n    callback(err,value);\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.findKeys = function (key, notKey, callback)\n{\n  var query=\"SELECT `key` FROM `store` WHERE BINARY `key` LIKE ?\"\n    , params=[]\n  ;\n  \n  //desired keys are key, e.g. pad:%\n  key=key.replace(/\\*/g,'%');\n  params.push(key);\n  \n  if(notKey!=null && notKey != undefined){\n    //not desired keys are notKey, e.g. %:%:%\n    notKey=notKey.replace(/\\*/g,'%');\n    query+=\" AND `key` NOT LIKE ?\"\n    params.push(notKey);\n  }\n  this.db.query(query, params, function(err,results)\n  {\n    var value = [];\n    \n    if(!err && results.length > 0)\n    {\n      results.forEach(function(val){\n        value.push(val.key);\n      });\n    }\n  \n    callback(err,value);\n  });\n\n  this.schedulePing();\n}\n\nexports.database.prototype.set = function (key, value, callback)\n{\n  if(key.length > 100)\n  {\n    callback(\"Your Key can only be 100 chars\");\n  }\n  else\n  {\n    this.db.query(\"REPLACE INTO `store` VALUES (?,?)\", [key, value], function(err, info){\n      callback(err);\n    });\n  }\n\n  this.schedulePing();\n}\n\nexports.database.prototype.remove = function (key, callback)\n{\n  this.db.query(\"DELETE FROM `store` WHERE `key` = ?\", [key], callback);\n\n  this.schedulePing();\n}\n\nexports.database.prototype.doBulk = function (bulk, callback)\n{ \n  var _this = this;\n  \n  var replaceSQL = \"REPLACE INTO `store` VALUES \";\n  var removeSQL = \"DELETE FROM `store` WHERE `key` IN (\"\n  \n  var firstReplace = true;\n  var firstRemove = true;\n  \n  for(var i in bulk)\n  {  \n    if(bulk[i].type == \"set\")\n    {\n      if(!firstReplace)\n        replaceSQL+=\",\";\n      firstReplace = false;\n    \n      replaceSQL+=\"(\" + _this.db.escape(bulk[i].key) + \", \" + _this.db.escape(bulk[i].value) + \")\";\n    }\n    else if(bulk[i].type == \"remove\")\n    {\n      if(!firstRemove)\n        removeSQL+=\",\";\n      firstRemove = false;\n    \n      removeSQL+=_this.db.escape(bulk[i].key);\n    }\n  }\n  \n  replaceSQL+=\";\";\n  removeSQL+=\");\";\n  \n  async.parallel([\n    function(callback)\n    {\n      if(!firstReplace)\n        _this.db.query(replaceSQL, callback);\n      else\n        callback();\n    },\n    function(callback)\n    {\n      if(!firstRemove)\n        _this.db.query(removeSQL, callback);\n      else\n        callback();\n    }\n  ], callback);\n \n  this.schedulePing(); \n}\n\nexports.database.prototype.close = function(callback)\n{\n  this.clearPing();\n  this.db.end(callback);\n}\n", "{\n  \"name\": \"ueberdb2\",\n  \"description\": \"transform every database into a object key value store\",\n  \"url\": \"https://github.com/ether/ueberDB\",\n  \"keywords\": [\n    \"database\",\n    \"keyvalue\"\n  ],\n  \"author\": {\n    \"name\": \"Etherpad Foundation\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"John McLear\"\n    },\n    {\n      \"name\": \"spcsser\"\n    },\n    {\n      \"name\": \"Peter Martischka\"\n    }\n  ],\n  \"dependencies\": {\n    \"async\": \"^3.2.0\",\n    \"cassandra-driver\": \"^4.5.0\",\n    \"channels\": \"0.0.4\",\n    \"dirty\": \"^1.1.0\",\n    \"elasticsearch\": \"^16.7.1\",\n    \"mysql\": \"2.18.1\",\n    \"nano\": \"^8.2.2\",\n    \"pg\": \"^7.18.2\",\n    \"redis\": \">=0.12.1\",\n    \"rethinkdb\": \"^2.3.1\"\n  },\n  \"devDependencies\": {\n    \"expect.js\": \"0.3.1\",\n    \"log4js\": \"^6.1.2\",\n    \"mocha\": \"^7.1.1\",\n    \"mongodb\": \"^3.5.5\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ether/ueberDB.git\"\n  },\n  \"main\": \"./CloneAndAtomicLayer\",\n  \"version\": \"0.4.4\",\n  \"gitHead\": \"00cb8c896433922111c12fe9d2a45087fdb11d59\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ether/ueberDB/issues\"\n  },\n  \"homepage\": \"https://github.com/ether/ueberDB\",\n  \"_id\": \"ueberdb2@0.3.0\",\n  \"scripts\": {},\n  \"_shasum\": \"cbebe8b8a0879f4ca970c3d69bd578e291d6e835\",\n  \"_from\": \"ueberdb2@0.3.0\",\n  \"_npmVersion\": \"2.5.1\",\n  \"_nodeVersion\": \"0.12.0\",\n  \"_npmUser\": {\n    \"name\": \"johnyma22\",\n    \"email\": \"john@mclear.co.uk\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"johnyma22\",\n      \"email\": \"john@mclear.co.uk\"\n    }\n  ],\n  \"dist\": {\n    \"shasum\": \"cbebe8b8a0879f4ca970c3d69bd578e291d6e835\",\n    \"tarball\": \"http://registry.npmjs.org/ueberdb2/-/ueberdb2-0.3.0.tgz\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/ueberdb2/-/ueberdb2-0.3.0.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\n"], "filenames": ["mysql_db.js", "package.json"], "buggy_code_start_loc": [132, 46], "buggy_code_end_loc": [150, 47], "fixing_code_start_loc": [132, 46], "fixing_code_end_loc": [150, 47], "type": "CWE-697", "message": "In Etherpad UeberDB < 0.4.4, due to MySQL omitting trailing spaces on char / varchar columns during comparisons, retrieving database records using UeberDB's MySQL connector could allow bypassing access controls enforced on key names.", "other": {"cve": {"id": "CVE-2020-22784", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-28T21:15:08.683", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Etherpad UeberDB < 0.4.4, due to MySQL omitting trailing spaces on char / varchar columns during comparisons, retrieving database records using UeberDB's MySQL connector could allow bypassing access controls enforced on key names."}, {"lang": "es", "value": "En Etherpad UeberDB versiones anteriores a 0.4.4, debido a que MySQL omite los espacios finales en las columnas char / varchar durante las comparaciones, la recuperaci\u00f3n de registros de la base de datos utilizando el conector MySQL de UeberDB podr\u00eda permitir la omisi\u00f3n de los controles de acceso impuestos a los nombres de las claves"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-697"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:etherpad:ueberdb:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.8", "matchCriteriaId": "8B792A3C-8743-4261-BF46-DCBD69F77B4F"}]}]}], "references": [{"url": "https://github.com/ether/ueberDB/commit/e8b58d03534ade8d83c2d1946a8350a23952531e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ether/ueberDB/commit/e8b58d03534ade8d83c2d1946a8350a23952531e"}}