{"buggy_code": ["<template>\n  <div class=\"custom-attribute\">\n    <div class=\"title-wrap\">\n      <h4 class=\"text-block-title title error\">\n        <div v-if=\"isAttributeTypeCheckbox\" class=\"checkbox-wrap\">\n          <input\n            v-model=\"editedValue\"\n            class=\"checkbox\"\n            type=\"checkbox\"\n            @change=\"onUpdate\"\n          />\n        </div>\n        <div class=\"name-button__wrap\">\n          <span\n            class=\"attribute-name\"\n            :class=\"{ error: $v.editedValue.$error }\"\n          >\n            {{ label }}\n          </span>\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip.left=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.DELETE')\"\n            variant=\"link\"\n            size=\"medium\"\n            color-scheme=\"secondary\"\n            icon=\"delete\"\n            class-names=\"delete-button\"\n            @click=\"onDelete\"\n          />\n        </div>\n      </h4>\n    </div>\n    <div v-if=\"notAttributeTypeCheckboxAndList\">\n      <div v-show=\"isEditing\">\n        <div class=\"input-group small\">\n          <input\n            ref=\"inputfield\"\n            v-model=\"editedValue\"\n            :type=\"inputType\"\n            class=\"input-group-field\"\n            autofocus=\"true\"\n            :class=\"{ error: $v.editedValue.$error }\"\n            @blur=\"$v.editedValue.$touch\"\n            @keyup.enter=\"onUpdate\"\n          />\n          <div class=\"input-group-button\">\n            <woot-button size=\"small\" icon=\"checkmark\" @click=\"onUpdate\" />\n          </div>\n        </div>\n        <span v-if=\"shouldShowErrorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </span>\n      </div>\n      <div\n        v-show=\"!isEditing\"\n        class=\"value--view\"\n        :class=\"{ 'is-editable': showActions }\"\n      >\n        <a\n          v-if=\"isAttributeTypeLink\"\n          :href=\"value\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"value\"\n        >\n          {{ value || '---' }}\n        </a>\n        <p v-else class=\"value\">\n          {{ displayValue || '---' }}\n        </p>\n        <div class=\"action-buttons__wrap\">\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.COPY')\"\n            variant=\"link\"\n            size=\"small\"\n            color-scheme=\"secondary\"\n            icon=\"clipboard\"\n            class-names=\"edit-button\"\n            @click=\"onCopy\"\n          />\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip.right=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.EDIT')\"\n            variant=\"link\"\n            size=\"small\"\n            color-scheme=\"secondary\"\n            icon=\"edit\"\n            class-names=\"edit-button\"\n            @click=\"onEdit\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-if=\"isAttributeTypeList\">\n      <multiselect-dropdown\n        :options=\"listOptions\"\n        :selected-item=\"selectedItem\"\n        :has-thumbnail=\"false\"\n        :multiselector-placeholder=\"\n          $t('CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.PLACEHOLDER')\n        \"\n        :no-search-result=\"\n          $t('CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.NO_RESULT')\n        \"\n        :input-placeholder=\"\n          $t(\n            'CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.SEARCH_INPUT_PLACEHOLDER'\n          )\n        \"\n        @click=\"onUpdateListValue\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport format from 'date-fns/format';\nimport { required, url } from 'vuelidate/lib/validators';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport MultiselectDropdown from 'shared/components/ui/MultiselectDropdown.vue';\n\nconst DATE_FORMAT = 'yyyy-MM-dd';\n\nexport default {\n  components: {\n    MultiselectDropdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    values: { type: Array, default: () => [] },\n    value: { type: [String, Number, Boolean], default: '' },\n    showActions: { type: Boolean, default: false },\n    attributeType: { type: String, default: 'text' },\n    attributeKey: { type: String, required: true },\n    contactId: { type: Number, default: null },\n  },\n  data() {\n    return {\n      isEditing: false,\n      editedValue: null,\n    };\n  },\n  validations() {\n    if (this.isAttributeTypeLink) {\n      return {\n        editedValue: { required, url },\n      };\n    }\n    return {\n      editedValue: { required },\n    };\n  },\n\n  computed: {\n    formattedValue() {\n      if (this.isAttributeTypeDate) {\n        return format(new Date(this.value || new Date()), DATE_FORMAT);\n      }\n      if (this.isAttributeTypeCheckbox) {\n        return this.value === 'false' ? false : this.value;\n      }\n      return this.value;\n    },\n    listOptions() {\n      return this.values.map((value, index) => ({\n        id: index + 1,\n        name: value,\n      }));\n    },\n    selectedItem() {\n      const id = this.values.indexOf(this.editedValue) + 1;\n      return { id, name: this.editedValue };\n    },\n    isAttributeTypeCheckbox() {\n      return this.attributeType === 'checkbox';\n    },\n    isAttributeTypeList() {\n      return this.attributeType === 'list';\n    },\n    isAttributeTypeLink() {\n      return this.attributeType === 'link';\n    },\n    isAttributeTypeDate() {\n      return this.attributeType === 'date';\n    },\n    notAttributeTypeCheckboxAndList() {\n      return !this.isAttributeTypeCheckbox && !this.isAttributeTypeList;\n    },\n    inputType() {\n      return this.isAttributeTypeLink ? 'url' : this.attributeType;\n    },\n    shouldShowErrorMessage() {\n      return this.$v.editedValue.$error;\n    },\n    errorMessage() {\n      if (this.$v.editedValue.url) {\n        return this.$t('CUSTOM_ATTRIBUTES.VALIDATIONS.INVALID_URL');\n      }\n      return this.$t('CUSTOM_ATTRIBUTES.VALIDATIONS.REQUIRED');\n    },\n    displayValue() {\n      if (this.attributeType === 'date') {\n        return format(new Date(this.editedValue), 'dd-MM-yyyy');\n      }\n      return this.editedValue;\n    },\n  },\n  mounted() {\n    this.editedValue = this.formattedValue;\n    bus.$on(BUS_EVENTS.FOCUS_CUSTOM_ATTRIBUTE, focusAttributeKey => {\n      if (this.attributeKey === focusAttributeKey) {\n        this.onEdit();\n      }\n    });\n  },\n  methods: {\n    focusInput() {\n      if (this.$refs.inputfield) {\n        this.$refs.inputfield.focus();\n      }\n    },\n    onEdit() {\n      this.isEditing = true;\n      this.$nextTick(() => {\n        this.focusInput();\n      });\n    },\n    onUpdateListValue(value) {\n      if (value) {\n        this.editedValue = value.name;\n        this.onUpdate();\n      }\n    },\n    onUpdate() {\n      const updatedValue =\n        this.attributeType === 'date'\n          ? format(new Date(this.editedValue), DATE_FORMAT)\n          : this.editedValue;\n\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      this.isEditing = false;\n      this.$emit('update', this.attributeKey, updatedValue);\n    },\n    onDelete() {\n      this.isEditing = false;\n      this.$emit('delete', this.attributeKey);\n    },\n    onCopy() {\n      this.$emit('copy', this.value);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.custom-attribute {\n  padding: var(--space-slab) var(--space-normal);\n}\n\n.title-wrap {\n  display: flex;\n  align-items: center;\n  margin-bottom: var(--space-mini);\n}\n.title {\n  display: flex;\n  align-items: center;\n  margin: 0;\n  width: 100%;\n}\n.checkbox-wrap {\n  display: flex;\n  align-items: center;\n}\n.checkbox {\n  margin: 0 var(--space-small) 0 0;\n}\n.name-button__wrap {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n.attribute-name {\n  width: 100%;\n  &.error {\n    color: var(--r-400);\n  }\n}\n.title--icon {\n  width: var(--space-two);\n}\n.edit-button {\n  display: none;\n}\n.delete-button {\n  display: flex;\n  justify-content: flex-end;\n  width: var(--space-normal);\n}\n.value--view {\n  display: flex;\n\n  &.is-editable:hover {\n    .value {\n      background: var(--color-background);\n      margin-bottom: 0;\n    }\n    .edit-button {\n      display: block;\n    }\n  }\n\n  .action-buttons__wrap {\n    display: flex;\n    max-width: var(--space-larger);\n  }\n}\n.value {\n  display: inline-block;\n  min-width: var(--space-mega);\n  border-radius: var(--border-radius-small);\n  margin-bottom: 0;\n  word-break: break-all;\n  padding: var(--space-micro) var(--space-smaller);\n}\n.error-message {\n  color: var(--r-400);\n  display: block;\n  font-size: 1.4rem;\n  font-size: var(--font-size-small);\n  font-weight: 400;\n  margin-bottom: 1rem;\n  margin-top: -1.6rem;\n  width: 100%;\n}\n\n::v-deep {\n  .selector-wrap {\n    margin: 0;\n    top: var(--space-smaller);\n    .selector-name {\n      margin-left: 0;\n    }\n  }\n  .name {\n    margin-left: 0;\n  }\n}\n</style>\n", "import queryString from 'query-string';\n\nexport const frontendURL = (path, params) => {\n  const stringifiedParams = params ? `?${queryString.stringify(params)}` : '';\n  return `/app/${path}${stringifiedParams}`;\n};\n\nexport const conversationUrl = ({\n  accountId,\n  activeInbox,\n  id,\n  label,\n  teamId,\n  conversationType = '',\n  foldersId,\n}) => {\n  let url = `accounts/${accountId}/conversations/${id}`;\n  if (activeInbox) {\n    url = `accounts/${accountId}/inbox/${activeInbox}/conversations/${id}`;\n  } else if (label) {\n    url = `accounts/${accountId}/label/${label}/conversations/${id}`;\n  } else if (teamId) {\n    url = `accounts/${accountId}/team/${teamId}/conversations/${id}`;\n  } else if (foldersId && foldersId !== 0) {\n    url = `accounts/${accountId}/custom_view/${foldersId}/conversations/${id}`;\n  } else if (conversationType === 'mention') {\n    url = `accounts/${accountId}/mentions/conversations/${id}`;\n  }\n  return url;\n};\n\nexport const accountIdFromPathname = pathname => {\n  const isInsideAccountScopedURLs = pathname.includes('/app/accounts');\n  const urlParam = pathname.split('/')[3];\n  // eslint-disable-next-line no-restricted-globals\n  const isScoped = isInsideAccountScopedURLs && !isNaN(urlParam);\n  const accountId = isScoped ? Number(urlParam) : '';\n  return accountId;\n};\n", "import {\n  frontendURL,\n  conversationUrl,\n  accountIdFromPathname,\n} from '../URLHelper';\n\ndescribe('#URL Helpers', () => {\n  describe('conversationUrl', () => {\n    it('should return direct conversation URL if activeInbox is nil', () => {\n      expect(conversationUrl({ accountId: 1, id: 1 })).toBe(\n        'accounts/1/conversations/1'\n      );\n    });\n    it('should return inbox conversation URL if activeInbox is not nil', () => {\n      expect(conversationUrl({ accountId: 1, id: 1, activeInbox: 2 })).toBe(\n        'accounts/1/inbox/2/conversations/1'\n      );\n    });\n    it('should return correct conversation URL if label is active', () => {\n      expect(\n        conversationUrl({ accountId: 1, label: 'customer-support', id: 1 })\n      ).toBe('accounts/1/label/customer-support/conversations/1');\n    });\n    it('should return correct conversation URL if team Id is available', () => {\n      expect(conversationUrl({ accountId: 1, teamId: 1, id: 1 })).toBe(\n        'accounts/1/team/1/conversations/1'\n      );\n    });\n  });\n\n  describe('frontendURL', () => {\n    it('should return url without params if params passed is nil', () => {\n      expect(frontendURL('main', null)).toBe('/app/main');\n    });\n    it('should return url without params if params passed is not nil', () => {\n      expect(frontendURL('main', { ping: 'pong' })).toBe('/app/main?ping=pong');\n    });\n  });\n\n  describe('accountIdFromPathname', () => {\n    it('should return account id if accont scoped url is passed', () => {\n      expect(accountIdFromPathname('/app/accounts/1/settings/general')).toBe(1);\n    });\n    it('should return empty string if accont scoped url not is passed', () => {\n      expect(accountIdFromPathname('/app/accounts/settings/general')).toBe('');\n    });\n    it('should return empty string if empty string is passed', () => {\n      expect(accountIdFromPathname('')).toBe('');\n    });\n  });\n});\n", "import { mapGetters } from 'vuex';\n\nexport default {\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      accountId: 'getCurrentAccountId',\n    }),\n    attributes() {\n      return this.$store.getters['attributes/getAttributesByModel'](\n        this.attributeType\n      );\n    },\n    customAttributes() {\n      if (this.attributeType === 'conversation_attribute')\n        return this.currentChat.custom_attributes || {};\n      return this.contact.custom_attributes || {};\n    },\n    contactIdentifier() {\n      return (\n        this.currentChat.meta?.sender?.id ||\n        this.$route.params.contactId ||\n        this.contactId\n      );\n    },\n    contact() {\n      return this.$store.getters['contacts/getContact'](this.contactIdentifier);\n    },\n    conversationId() {\n      return this.currentChat.id;\n    },\n\n    filteredAttributes() {\n      return Object.keys(this.customAttributes).map(key => {\n        const item = this.attributes.find(\n          attribute => attribute.attribute_key === key\n        );\n        if (item) {\n          return {\n            ...item,\n            value: this.customAttributes[key],\n          };\n        }\n\n        return {\n          ...item,\n          value: this.customAttributes[key],\n          attribute_description: key,\n          attribute_display_name: key,\n          attribute_display_type: this.attributeDisplayType(\n            this.customAttributes[key]\n          ),\n          attribute_key: key,\n          attribute_model: this.attributeType,\n          id: Math.random(),\n        };\n      });\n    },\n  },\n  methods: {\n    isAttributeNumber(attributeValue) {\n      return (\n        Number.isInteger(Number(attributeValue)) && Number(attributeValue) > 0\n      );\n    },\n    isAttributeLink(attributeValue) {\n      /* eslint-disable no-useless-escape */\n      const URL_REGEX = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/gm;\n      return URL_REGEX.test(attributeValue);\n    },\n    attributeDisplayType(attributeValue) {\n      if (this.isAttributeNumber(attributeValue)) {\n        return 'number';\n      }\n      if (this.isAttributeLink(attributeValue)) {\n        return 'link';\n      }\n      return 'text';\n    },\n  },\n};\n", "import { shallowMount, createLocalVue } from '@vue/test-utils';\nimport attributeMixin from '../attributeMixin';\nimport Vuex from 'vuex';\nimport attributeFixtures from './attributeFixtures';\n\nconst localVue = createLocalVue();\nlocalVue.use(Vuex);\n\ndescribe('attributeMixin', () => {\n  let getters;\n  let actions;\n  let store;\n\n  beforeEach(() => {\n    actions = { updateUISettings: jest.fn(), toggleSidebarUIState: jest.fn() };\n    getters = {\n      getSelectedChat: () => ({\n        id: 7165,\n        custom_attributes: {\n          product_id: 2021,\n        },\n        meta: {\n          sender: {\n            id: 1212,\n          },\n        },\n      }),\n      getCurrentAccountId: () => 1,\n      attributeType: () => 'conversation_attribute',\n    };\n    store = new Vuex.Store({ actions, getters });\n  });\n\n  it('returns currently selected conversation id', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.conversationId).toEqual(7165);\n  });\n\n  it('returns filtered attributes from conversation custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        attributes() {\n          return attributeFixtures;\n        },\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.filteredAttributes).toEqual([\n      {\n        attribute_description: 'Product identifier',\n        attribute_display_name: 'Product id',\n        attribute_display_type: 'number',\n        attribute_key: 'product_id',\n        attribute_model: 'conversation_attribute',\n        created_at: '2021-09-16T13:06:47.329Z',\n        default_value: null,\n        icon: 'fluent-calculator',\n        id: 10,\n        updated_at: '2021-09-22T10:42:25.873Z',\n        value: 2021,\n      },\n    ]);\n  });\n\n  it('return display type if attribute passed', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.attributeDisplayType('date')).toBe('text');\n    expect(\n      wrapper.vm.attributeDisplayType('https://www.chatwoot.com/pricing')\n    ).toBe('link');\n    expect(wrapper.vm.attributeDisplayType(9988)).toBe('number');\n  });\n\n  it('return true if link is passed', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.isAttributeLink('https://www.chatwoot.com/pricing')).toBe(\n      true\n    );\n  });\n\n  it('return true if number is passed', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.isAttributeNumber(9988)).toBe(true);\n  });\n\n  it('returns currently selected contact', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.contact).toEqual({\n      id: 7165,\n      custom_attributes: {\n        product_id: 2021,\n      },\n    });\n  });\n\n  it('returns currently selected contact id', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.contactIdentifier).toEqual(1212);\n  });\n\n  it('returns currently selected conversation custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.customAttributes).toEqual({\n      product_id: 2021,\n    });\n  });\n\n  it('returns currently selected contact custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              cloudCustomer: true,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.customAttributes).toEqual({\n      cloudCustomer: true,\n    });\n  });\n});\n"], "fixing_code": ["<template>\n  <div class=\"custom-attribute\">\n    <div class=\"title-wrap\">\n      <h4 class=\"text-block-title title error\">\n        <div v-if=\"isAttributeTypeCheckbox\" class=\"checkbox-wrap\">\n          <input\n            v-model=\"editedValue\"\n            class=\"checkbox\"\n            type=\"checkbox\"\n            @change=\"onUpdate\"\n          />\n        </div>\n        <div class=\"name-button__wrap\">\n          <span\n            class=\"attribute-name\"\n            :class=\"{ error: $v.editedValue.$error }\"\n          >\n            {{ label }}\n          </span>\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip.left=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.DELETE')\"\n            variant=\"link\"\n            size=\"medium\"\n            color-scheme=\"secondary\"\n            icon=\"delete\"\n            class-names=\"delete-button\"\n            @click=\"onDelete\"\n          />\n        </div>\n      </h4>\n    </div>\n    <div v-if=\"notAttributeTypeCheckboxAndList\">\n      <div v-show=\"isEditing\">\n        <div class=\"input-group small\">\n          <input\n            ref=\"inputfield\"\n            v-model=\"editedValue\"\n            :type=\"inputType\"\n            class=\"input-group-field\"\n            autofocus=\"true\"\n            :class=\"{ error: $v.editedValue.$error }\"\n            @blur=\"$v.editedValue.$touch\"\n            @keyup.enter=\"onUpdate\"\n          />\n          <div class=\"input-group-button\">\n            <woot-button size=\"small\" icon=\"checkmark\" @click=\"onUpdate\" />\n          </div>\n        </div>\n        <span v-if=\"shouldShowErrorMessage\" class=\"error-message\">\n          {{ errorMessage }}\n        </span>\n      </div>\n      <div\n        v-show=\"!isEditing\"\n        class=\"value--view\"\n        :class=\"{ 'is-editable': showActions }\"\n      >\n        <a\n          v-if=\"isAttributeTypeLink\"\n          :href=\"value\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          class=\"value\"\n        >\n          {{ urlValue }}\n        </a>\n        <p v-else class=\"value\">\n          {{ displayValue || '---' }}\n        </p>\n        <div class=\"action-buttons__wrap\">\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.COPY')\"\n            variant=\"link\"\n            size=\"small\"\n            color-scheme=\"secondary\"\n            icon=\"clipboard\"\n            class-names=\"edit-button\"\n            @click=\"onCopy\"\n          />\n          <woot-button\n            v-if=\"showActions\"\n            v-tooltip.right=\"$t('CUSTOM_ATTRIBUTES.ACTIONS.EDIT')\"\n            variant=\"link\"\n            size=\"small\"\n            color-scheme=\"secondary\"\n            icon=\"edit\"\n            class-names=\"edit-button\"\n            @click=\"onEdit\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-if=\"isAttributeTypeList\">\n      <multiselect-dropdown\n        :options=\"listOptions\"\n        :selected-item=\"selectedItem\"\n        :has-thumbnail=\"false\"\n        :multiselector-placeholder=\"\n          $t('CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.PLACEHOLDER')\n        \"\n        :no-search-result=\"\n          $t('CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.NO_RESULT')\n        \"\n        :input-placeholder=\"\n          $t(\n            'CUSTOM_ATTRIBUTES.FORM.ATTRIBUTE_TYPE.LIST.SEARCH_INPUT_PLACEHOLDER'\n          )\n        \"\n        @click=\"onUpdateListValue\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport format from 'date-fns/format';\nimport { required, url } from 'vuelidate/lib/validators';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport MultiselectDropdown from 'shared/components/ui/MultiselectDropdown.vue';\nimport { isValidURL } from '../helper/URLHelper';\nconst DATE_FORMAT = 'yyyy-MM-dd';\n\nexport default {\n  components: {\n    MultiselectDropdown,\n  },\n  props: {\n    label: { type: String, required: true },\n    values: { type: Array, default: () => [] },\n    value: { type: [String, Number, Boolean], default: '' },\n    showActions: { type: Boolean, default: false },\n    attributeType: { type: String, default: 'text' },\n    attributeKey: { type: String, required: true },\n    contactId: { type: Number, default: null },\n  },\n  data() {\n    return {\n      isEditing: false,\n      editedValue: null,\n    };\n  },\n  validations() {\n    if (this.isAttributeTypeLink) {\n      return {\n        editedValue: { required, url },\n      };\n    }\n    return {\n      editedValue: { required },\n    };\n  },\n\n  computed: {\n    formattedValue() {\n      if (this.isAttributeTypeDate) {\n        return format(new Date(this.value || new Date()), DATE_FORMAT);\n      }\n      if (this.isAttributeTypeCheckbox) {\n        return this.value === 'false' ? false : this.value;\n      }\n      return this.value;\n    },\n    listOptions() {\n      return this.values.map((value, index) => ({\n        id: index + 1,\n        name: value,\n      }));\n    },\n    selectedItem() {\n      const id = this.values.indexOf(this.editedValue) + 1;\n      return { id, name: this.editedValue };\n    },\n    isAttributeTypeCheckbox() {\n      return this.attributeType === 'checkbox';\n    },\n    isAttributeTypeList() {\n      return this.attributeType === 'list';\n    },\n    isAttributeTypeLink() {\n      return this.attributeType === 'link';\n    },\n    isAttributeTypeDate() {\n      return this.attributeType === 'date';\n    },\n    urlValue() {\n      return isValidURL(this.value) ? this.value : '---';\n    },\n    notAttributeTypeCheckboxAndList() {\n      return !this.isAttributeTypeCheckbox && !this.isAttributeTypeList;\n    },\n    inputType() {\n      return this.isAttributeTypeLink ? 'url' : this.attributeType;\n    },\n    shouldShowErrorMessage() {\n      return this.$v.editedValue.$error;\n    },\n    errorMessage() {\n      if (this.$v.editedValue.url) {\n        return this.$t('CUSTOM_ATTRIBUTES.VALIDATIONS.INVALID_URL');\n      }\n      return this.$t('CUSTOM_ATTRIBUTES.VALIDATIONS.REQUIRED');\n    },\n    displayValue() {\n      if (this.attributeType === 'date') {\n        return format(new Date(this.editedValue), 'dd-MM-yyyy');\n      }\n      return this.editedValue;\n    },\n  },\n  mounted() {\n    this.editedValue = this.formattedValue;\n    bus.$on(BUS_EVENTS.FOCUS_CUSTOM_ATTRIBUTE, focusAttributeKey => {\n      if (this.attributeKey === focusAttributeKey) {\n        this.onEdit();\n      }\n    });\n  },\n  methods: {\n    focusInput() {\n      if (this.$refs.inputfield) {\n        this.$refs.inputfield.focus();\n      }\n    },\n    onEdit() {\n      this.isEditing = true;\n      this.$nextTick(() => {\n        this.focusInput();\n      });\n    },\n    onUpdateListValue(value) {\n      if (value) {\n        this.editedValue = value.name;\n        this.onUpdate();\n      }\n    },\n    onUpdate() {\n      const updatedValue =\n        this.attributeType === 'date'\n          ? format(new Date(this.editedValue), DATE_FORMAT)\n          : this.editedValue;\n\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      this.isEditing = false;\n      this.$emit('update', this.attributeKey, updatedValue);\n    },\n    onDelete() {\n      this.isEditing = false;\n      this.$emit('delete', this.attributeKey);\n    },\n    onCopy() {\n      this.$emit('copy', this.value);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.custom-attribute {\n  padding: var(--space-slab) var(--space-normal);\n}\n\n.title-wrap {\n  display: flex;\n  align-items: center;\n  margin-bottom: var(--space-mini);\n}\n.title {\n  display: flex;\n  align-items: center;\n  margin: 0;\n  width: 100%;\n}\n.checkbox-wrap {\n  display: flex;\n  align-items: center;\n}\n.checkbox {\n  margin: 0 var(--space-small) 0 0;\n}\n.name-button__wrap {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n.attribute-name {\n  width: 100%;\n  &.error {\n    color: var(--r-400);\n  }\n}\n.title--icon {\n  width: var(--space-two);\n}\n.edit-button {\n  display: none;\n}\n.delete-button {\n  display: flex;\n  justify-content: flex-end;\n  width: var(--space-normal);\n}\n.value--view {\n  display: flex;\n\n  &.is-editable:hover {\n    .value {\n      background: var(--color-background);\n      margin-bottom: 0;\n    }\n    .edit-button {\n      display: block;\n    }\n  }\n\n  .action-buttons__wrap {\n    display: flex;\n    max-width: var(--space-larger);\n  }\n}\n.value {\n  display: inline-block;\n  min-width: var(--space-mega);\n  border-radius: var(--border-radius-small);\n  margin-bottom: 0;\n  word-break: break-all;\n  padding: var(--space-micro) var(--space-smaller);\n}\n.error-message {\n  color: var(--r-400);\n  display: block;\n  font-size: 1.4rem;\n  font-size: var(--font-size-small);\n  font-weight: 400;\n  margin-bottom: 1rem;\n  margin-top: -1.6rem;\n  width: 100%;\n}\n\n::v-deep {\n  .selector-wrap {\n    margin: 0;\n    top: var(--space-smaller);\n    .selector-name {\n      margin-left: 0;\n    }\n  }\n  .name {\n    margin-left: 0;\n  }\n}\n</style>\n", "import queryString from 'query-string';\n\nexport const frontendURL = (path, params) => {\n  const stringifiedParams = params ? `?${queryString.stringify(params)}` : '';\n  return `/app/${path}${stringifiedParams}`;\n};\n\nexport const conversationUrl = ({\n  accountId,\n  activeInbox,\n  id,\n  label,\n  teamId,\n  conversationType = '',\n  foldersId,\n}) => {\n  let url = `accounts/${accountId}/conversations/${id}`;\n  if (activeInbox) {\n    url = `accounts/${accountId}/inbox/${activeInbox}/conversations/${id}`;\n  } else if (label) {\n    url = `accounts/${accountId}/label/${label}/conversations/${id}`;\n  } else if (teamId) {\n    url = `accounts/${accountId}/team/${teamId}/conversations/${id}`;\n  } else if (foldersId && foldersId !== 0) {\n    url = `accounts/${accountId}/custom_view/${foldersId}/conversations/${id}`;\n  } else if (conversationType === 'mention') {\n    url = `accounts/${accountId}/mentions/conversations/${id}`;\n  }\n  return url;\n};\n\nexport const accountIdFromPathname = pathname => {\n  const isInsideAccountScopedURLs = pathname.includes('/app/accounts');\n  const urlParam = pathname.split('/')[3];\n  // eslint-disable-next-line no-restricted-globals\n  const isScoped = isInsideAccountScopedURLs && !isNaN(urlParam);\n  const accountId = isScoped ? Number(urlParam) : '';\n  return accountId;\n};\n\nexport const isValidURL = value => {\n  /* eslint-disable no-useless-escape */\n  const URL_REGEX = /^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/gm;\n  return URL_REGEX.test(value);\n};\n", "import {\n  frontendURL,\n  conversationUrl,\n  accountIdFromPathname,\n  isValidURL,\n} from '../URLHelper';\n\ndescribe('#URL Helpers', () => {\n  describe('conversationUrl', () => {\n    it('should return direct conversation URL if activeInbox is nil', () => {\n      expect(conversationUrl({ accountId: 1, id: 1 })).toBe(\n        'accounts/1/conversations/1'\n      );\n    });\n    it('should return inbox conversation URL if activeInbox is not nil', () => {\n      expect(conversationUrl({ accountId: 1, id: 1, activeInbox: 2 })).toBe(\n        'accounts/1/inbox/2/conversations/1'\n      );\n    });\n    it('should return correct conversation URL if label is active', () => {\n      expect(\n        conversationUrl({ accountId: 1, label: 'customer-support', id: 1 })\n      ).toBe('accounts/1/label/customer-support/conversations/1');\n    });\n    it('should return correct conversation URL if team Id is available', () => {\n      expect(conversationUrl({ accountId: 1, teamId: 1, id: 1 })).toBe(\n        'accounts/1/team/1/conversations/1'\n      );\n    });\n  });\n\n  describe('frontendURL', () => {\n    it('should return url without params if params passed is nil', () => {\n      expect(frontendURL('main', null)).toBe('/app/main');\n    });\n    it('should return url without params if params passed is not nil', () => {\n      expect(frontendURL('main', { ping: 'pong' })).toBe('/app/main?ping=pong');\n    });\n  });\n\n  describe('accountIdFromPathname', () => {\n    it('should return account id if accont scoped url is passed', () => {\n      expect(accountIdFromPathname('/app/accounts/1/settings/general')).toBe(1);\n    });\n    it('should return empty string if accont scoped url not is passed', () => {\n      expect(accountIdFromPathname('/app/accounts/settings/general')).toBe('');\n    });\n    it('should return empty string if empty string is passed', () => {\n      expect(accountIdFromPathname('')).toBe('');\n    });\n  });\n\n  describe('isValidURL', () => {\n    it('should return true if valid url is passed', () => {\n      expect(isValidURL('https://chatwoot.com')).toBe(true);\n    });\n    it('should return false if invalid url is passed', () => {\n      expect(isValidURL('alert.window')).toBe(false);\n    });\n  });\n});\n", "import { mapGetters } from 'vuex';\nimport { isValidURL } from '../helper/URLHelper';\nexport default {\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      accountId: 'getCurrentAccountId',\n    }),\n    attributes() {\n      return this.$store.getters['attributes/getAttributesByModel'](\n        this.attributeType\n      );\n    },\n    customAttributes() {\n      if (this.attributeType === 'conversation_attribute')\n        return this.currentChat.custom_attributes || {};\n      return this.contact.custom_attributes || {};\n    },\n    contactIdentifier() {\n      return (\n        this.currentChat.meta?.sender?.id ||\n        this.$route.params.contactId ||\n        this.contactId\n      );\n    },\n    contact() {\n      return this.$store.getters['contacts/getContact'](this.contactIdentifier);\n    },\n    conversationId() {\n      return this.currentChat.id;\n    },\n\n    filteredAttributes() {\n      return Object.keys(this.customAttributes).map(key => {\n        const item = this.attributes.find(\n          attribute => attribute.attribute_key === key\n        );\n        if (item) {\n          return {\n            ...item,\n            value: this.customAttributes[key],\n          };\n        }\n\n        return {\n          ...item,\n          value: this.customAttributes[key],\n          attribute_description: key,\n          attribute_display_name: key,\n          attribute_display_type: this.attributeDisplayType(\n            this.customAttributes[key]\n          ),\n          attribute_key: key,\n          attribute_model: this.attributeType,\n          id: Math.random(),\n        };\n      });\n    },\n  },\n  methods: {\n    isAttributeNumber(attributeValue) {\n      return (\n        Number.isInteger(Number(attributeValue)) && Number(attributeValue) > 0\n      );\n    },\n    attributeDisplayType(attributeValue) {\n      if (this.isAttributeNumber(attributeValue)) {\n        return 'number';\n      }\n      if (isValidURL(attributeValue)) {\n        return 'link';\n      }\n      return 'text';\n    },\n  },\n};\n", "import { shallowMount, createLocalVue } from '@vue/test-utils';\nimport attributeMixin from '../attributeMixin';\nimport Vuex from 'vuex';\nimport attributeFixtures from './attributeFixtures';\n\nconst localVue = createLocalVue();\nlocalVue.use(Vuex);\n\ndescribe('attributeMixin', () => {\n  let getters;\n  let actions;\n  let store;\n\n  beforeEach(() => {\n    actions = { updateUISettings: jest.fn(), toggleSidebarUIState: jest.fn() };\n    getters = {\n      getSelectedChat: () => ({\n        id: 7165,\n        custom_attributes: {\n          product_id: 2021,\n        },\n        meta: {\n          sender: {\n            id: 1212,\n          },\n        },\n      }),\n      getCurrentAccountId: () => 1,\n      attributeType: () => 'conversation_attribute',\n    };\n    store = new Vuex.Store({ actions, getters });\n  });\n\n  it('returns currently selected conversation id', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.conversationId).toEqual(7165);\n  });\n\n  it('returns filtered attributes from conversation custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        attributes() {\n          return attributeFixtures;\n        },\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.filteredAttributes).toEqual([\n      {\n        attribute_description: 'Product identifier',\n        attribute_display_name: 'Product id',\n        attribute_display_type: 'number',\n        attribute_key: 'product_id',\n        attribute_model: 'conversation_attribute',\n        created_at: '2021-09-16T13:06:47.329Z',\n        default_value: null,\n        icon: 'fluent-calculator',\n        id: 10,\n        updated_at: '2021-09-22T10:42:25.873Z',\n        value: 2021,\n      },\n    ]);\n  });\n\n  it('return display type if attribute passed', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.attributeDisplayType('date')).toBe('text');\n    expect(\n      wrapper.vm.attributeDisplayType('https://www.chatwoot.com/pricing')\n    ).toBe('link');\n    expect(wrapper.vm.attributeDisplayType(9988)).toBe('number');\n  });\n\n  it('return true if number is passed', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.isAttributeNumber(9988)).toBe(true);\n  });\n\n  it('returns currently selected contact', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.contact).toEqual({\n      id: 7165,\n      custom_attributes: {\n        product_id: 2021,\n      },\n    });\n  });\n\n  it('returns currently selected contact id', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.contactIdentifier).toEqual(1212);\n  });\n\n  it('returns currently selected conversation custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              product_id: 2021,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.customAttributes).toEqual({\n      product_id: 2021,\n    });\n  });\n\n  it('returns currently selected contact custom attributes', () => {\n    const Component = {\n      render() {},\n      title: 'TestComponent',\n      mixins: [attributeMixin],\n      computed: {\n        contact() {\n          return {\n            id: 7165,\n            custom_attributes: {\n              cloudCustomer: true,\n            },\n          };\n        },\n      },\n    };\n    const wrapper = shallowMount(Component, { store, localVue });\n    expect(wrapper.vm.customAttributes).toEqual({\n      cloudCustomer: true,\n    });\n  });\n});\n"], "filenames": ["app/javascript/dashboard/components/CustomAttribute.vue", "app/javascript/dashboard/helper/URLHelper.js", "app/javascript/dashboard/helper/specs/URLHelper.spec.js", "app/javascript/dashboard/mixins/attributeMixin.js", "app/javascript/dashboard/mixins/specs/attributeMixin.spec.js"], "buggy_code_start_loc": [66, 39, 4, 2, 95], "buggy_code_end_loc": [186, 39, 50, 76, 107], "fixing_code_start_loc": [66, 40, 5, 2, 94], "fixing_code_end_loc": [190, 46, 61, 71, 94], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository chatwoot/chatwoot prior to 2.2.0.", "other": {"cve": {"id": "CVE-2022-0526", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-09T05:15:09.310", "lastModified": "2022-02-11T17:19:23.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository chatwoot/chatwoot prior to 2.2.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en Maven org.webjars.npm:github-com-chatwoot-chatwoot versiones anteriores a 2.2.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chatwoot:chatwoot:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.1.1", "matchCriteriaId": "63F871A4-BAE5-45C7-913E-BA49749D4C7A"}]}]}], "references": [{"url": "https://github.com/chatwoot/chatwoot/commit/9f37a6e2ba7a7212bb419e318b8061f472e82d9f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d8f5ce74-2a00-4813-b220-70af771b0edd", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chatwoot/chatwoot/commit/9f37a6e2ba7a7212bb419e318b8061f472e82d9f"}}