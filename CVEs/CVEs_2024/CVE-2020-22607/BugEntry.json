{"buggy_code": ["<?php\n\nclass PermissiontemplatesController extends Survey_Common_Action\n{\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            App()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        App()->getClientScript()->registerPackage('permissionroles');\n        $request = App()->request;\n\n        $massiveAction = App()->getController()->renderPartial(\n            '/admin/permissiontemplates/massiveAction/_selector',\n            [],\n            true,\n            false\n        );\n\n        // Set page size\n        $pageSize = $request->getParam('pageSize', null);\n        if ($pageSize != null) {\n            App()->user->setState('pageSize', (int)$pageSize);\n        }\n\n        $model = Permissiontemplates::model();\n        $aPermissiontemplatesParam = $request->getParam('Permissiontemplates');\n        if ($aPermissiontemplatesParam) {\n            $model->setAttributes($aPermissiontemplatesParam, false);\n        }\n        $this->_renderWrappedTemplate(\n            null,\n            'permissiontemplates/index',\n            array(\n                'model'         => $model,\n                'massiveAction' => $massiveAction\n            )\n        );\n    }\n    /**\n     * Displays a particular model.\n     * @param integer $ptid the ID of the model to be displayed\n     */\n    public function viewrole($ptid)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n        return $this->getController()->renderPartial(\n            '/admin/permissiontemplates/partials/_view', \n            [\n                \"oModel\" => $oPermissionTemplate, \n            ]\n        );\n    }\n\n    public function editrolemodal($ptid=null)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        $model = $this->loadModel($ptid);\n        Yii::app()->getController()->renderPartial( 'permissiontemplates/partials/_form', ['model' => $model]);\n    }\n\n    /**\n     * @return string|string[]|null\n     * @throws CException\n     * @throws CHttpException\n     */\n    public function applyedit()\n    {\n        $aPermissiontemplate = Yii::app()->request->getPost('Permissiontemplates');\n        $model = $this->loadModel($aPermissiontemplate['ptid']);\n\n        $newAttributes = array_merge($model->attributes, $aPermissiontemplate);\n        $model->attributes = $newAttributes;\n\n        if ($model->save()) {\n            $success = true;\n            $message = gT('Role successfully saved');\n        } else {\n            $success = false;\n            $message = gT('Failed saving the role');\n            $errors = $model->getErrors();\n\n            $errorDiv = $this->renderErrors($errors);\n        }\n        return App()->getController()->renderPartial('/admin/super/_renderJson', [\n            \"data\" => [\n                'success' => $success,\n                'message' => $message,\n                'errors'  => $errorDiv ?? ''\n            ]\n        ]);\n    }\n\n    /**\n     * @param array $errors\n     *\n     * @return string $errorDiv\n     */\n    private function renderErrors($errors)\n    {\n        $errorDiv = '<ul class=\"list-unstyled\">';\n        foreach ($errors as $key => $error) {\n            foreach ($error as $errormessages) {\n                $errorDiv .= '<li>' . print_r($errormessages, true) . '</li>';\n            }\n        }\n        $errorDiv .= '</ul>';\n        return (string)$errorDiv;\n    }\n\n    public function showImportXML() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        Yii::app()->getController()->renderPartial( 'permissiontemplates/partials/_import', []);\n    }\n\n    public function importXML() {\n        \n        $sRandomFileName = randomChars(20);\n        $sFilePath = Yii::app()->getConfig('tempdir').DIRECTORY_SEPARATOR.$sRandomFileName;\n        $aPathinfo = pathinfo($_FILES['the_file']['name']);\n        $sExtension = $aPathinfo['extension'];\n        $bMoveFileResult = false;\n        \n \n        if ($_FILES['the_file']['error'] == 1 || $_FILES['the_file']['error'] == 2) {\n            Yii::app()->setFlashMessage(sprintf(gT(\"Sorry, this file is too large. Only files up to %01.2f MB are allowed.\"), getMaximumFileUploadSize() / 1024 / 1024), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n        } elseif (strtolower($sExtension) == 'xml' ||1==1) {\n            $bMoveFileResult = @move_uploaded_file($_FILES['the_file']['tmp_name'], $sFilePath);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"This is not a .xml file.\"). 'It is a '.$sExtension, 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n        }\n\n        if ($bMoveFileResult === false) {\n            Yii::app()->setFlashMessage(gT(\"An error occurred uploading your file. This may be caused by incorrect permissions for the application /tmp folder.\"), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n            return;\n        }\n\n        libxml_disable_entity_loader(false);\n        $oRoleDefinition = simplexml_load_file(realpath($sFilePath));\n        libxml_disable_entity_loader(true);\n        \n        $oNewRole = Permissiontemplates::model()->createFromXML($oRoleDefinition);\n        if($oNewRole == false ) {\n\n            Yii::app()->setFlashMessage(gT(\"Error creating role\"), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n            return;\n        }\n\n        $applyPermissions = $this->applyPermissionFromXML($oNewRole->ptid, $oRoleDefinition->permissions);\n        \n        Yii::app()->setFlashMessage(gT(\"Role was successfully imported.\"), 'success');\n        Yii::app()->getController()->redirect(array('/admin/roles'));\n        Yii::app()->end();\n        return;\n\n    }\n\n    public function setpermissions() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            return $this->getController()->renderPartial(\n                '/admin/permissiontemplates/partial/error',\n                ['errors' => [gT(\"You do not have permission to access this page.\")],'noButton' => true]\n          );\n        }\n\n        $oRequest = Yii::app()->request;\n        $ptid = $oRequest->getParam('ptid');\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n\n        // Check permissions\n        $aBasePermissions = Permission::model()->getGlobalBasePermissions();\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            // if not superadmin filter the available permissions as no admin may give more permissions than he owns\n            Yii::app()->session['flashmessage'] = gT(\"Note: You can only give limited permissions to other users because your own permissions are limited, too.\");\n            $aFilteredPermissions = array();\n            foreach ($aBasePermissions as $PermissionName=>$aPermission) {\n                foreach ($aPermission as $sPermissionKey=>&$sPermissionValue) {\n                    if ($sPermissionKey != 'title' && $sPermissionKey != 'img' && !Permission::model()->hasGlobalPermission($PermissionName, $sPermissionKey)) {\n                        $sPermissionValue = false;\n                    }\n                }\n                // Only show a row for that permission if there is at least one permission he may give to other users\n                if ($aPermission['create'] || $aPermission['read'] || $aPermission['update'] || $aPermission['delete'] || $aPermission['import'] || $aPermission['export']) {\n                    $aFilteredPermissions[$PermissionName] = $aPermission;\n                }\n            }\n            $aBasePermissions = $aFilteredPermissions;\n        }\n\n        $aAllSurveys = Survey::model()->findAll();\n        $aMySurveys = array_filter($aAllSurveys, function ($oSurvey) {\n            if (Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n                return true;\n            }\n            if ($oSurvey->owner_id == App()->user->id) {\n                return true;\n            }\n            return array_reduce($oSurvey->permissions, function ($coll, $oPermission) {\n                if ($oPermission->permission=='surveysecurity' && $oPermission->update_p == 1 && $oPermission->uid == App()->user->id) {\n                    return true;\n                }\n                return $coll;\n            }, false);\n        });\n\n        return $this->getController()->renderPartial(\n            '/admin/permissiontemplates/partials/_permissions', \n            [\n                \"oModel\" => $oPermissionTemplate, \n                \"aBasePermissions\" => $aBasePermissions\n            ]\n        );\n    }\n\n    public function savepermissions()\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            return $this->getController()->renderPartial(\n                '/admin/permissiontemplates/partial/error', \n                ['errors' => [gT(\"You do not have permission to access this page.\")],'noButton' => true]\n          );\n        }\n\n        $oRequest = Yii::app()->request;\n        $ptid = $oRequest->getParam('ptid');\n        $aPermissions = Yii::app()->request->getPost('Permission',[]);\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n        $results = $this->applyPermissionFromArray($ptid, $aPermissions);\n        \n        $oPermissionTemplate->renewed_last = date('Y-m-d H:i:s');\n        $save = $oPermissionTemplate->save();\n        \n        $html = $this->getController()->renderPartial('/admin/usermanagement/partial/permissionsuccess', ['results' => $results], true);\n        return Yii::app()->getController()->renderPartial('/admin/usermanagement/partial/json', [\"data\"=>[\n            'success' => true,\n            'html' => $html\n        ]]);\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function edit($ptid=null)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $model = $this->loadModel($ptid);\n\n        // Uncomment the following line if AJAX validation is needed\n        // $this->performAjaxValidation($model);\n\n        if (isset($_POST['Permissiontemplates'])) {\n            $model->attributes = $_POST['Permissiontemplates'];\n            if ($model->save()) {\n                $this->redirect(array('view', 'id' => $model->id));\n            }\n\n        }\n\n        $this->_renderWrappedTemplate(\n            null, \n            'permissiontemplates/edit', \n            array(\n                'model' => $model,\n            )\n        );\n    }\n\n    public function batchDelete() \n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $sPtids = Yii::app()->request->getPost('sItems', []);\n        $aPtids = json_decode($sPtids, true);\n        $success = [];\n        foreach ($aPtids as $ptid) {\n            $success[$ptid] = $this->loadModel($ptid)->delete();\n        }\n\n        $this->getController()->renderPartial(\n            '/admin/usermanagement/partial/success', \n            [\n                'sMessage' => gT('Roles successfully deleted'), \n                'sDebug' => json_encode($success, JSON_PRETTY_PRINT), \n                'noButton' => true\n            ]\n        );\n\n    }\n\n    /**\n     * Deletes a particular model.\n     * If deletion is successful, the browser will be redirected to the 'admin' page.\n     * @param integer $ptid the ID of the model to be deleted\n     */\n    public function delete()\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $ptid = Yii::app()->request->getPost('ptid', 0);\n        $this->loadModel($ptid)->delete();\n\n        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser\n        if (!isset($_GET['ajax'])) {\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('/admin/roles'));\n        }\n\n    }\n\n    public function runexport($ptid) {\n        $oModel = $this->loadModel($ptid);\n        $oXML = $oModel->compileExportXML();\n        $filename = preg_replace(\"/[^a-zA-Z0-9-_]*/\",'',$oModel->name);\n\n        header('Content-type: application/xml');\n        header('Content-Disposition: attachment; filename=\"'.$filename.'.xml\"');\n        print($oXML->asXML());\n        Yii::app()->end();\n    }\n    \n    public function batchExport() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $sPtids = Yii::app()->request->getParam('sItems', '');\n        $aPtids = explode(',',$sPtids);\n        $sRandomFolderName = randomChars(20);\n        $sRandomFileName = \"RoleExport-\".randomChars(5).'-'.time();\n        \n        $tempdir = Yii::app()->getConfig('tempdir');\n        $zipfile = \"$tempdir/$sRandomFileName.zip\";\n        Yii::app()->loadLibrary('admin.pclzip');\n\n        $zip = new PclZip($zipfile);\n        $sFilePath = $tempdir.DIRECTORY_SEPARATOR.$sRandomFolderName;      \n        \n        mkdir($sFilePath);\n        $filesInArchive = [];\n        \n        foreach ($aPtids as $iPtid) {\n            $oModel = $this->loadModel($iPtid);\n            $oXML = $oModel->compileExportXML();\n            $filename = preg_replace(\"/[^a-zA-Z0-9-_]*/\",'',$oModel->name).'.xml';\n\n            file_put_contents($sFilePath.DIRECTORY_SEPARATOR.$filename, $oXML->asXML());\n            $filesInArchive[] = $sFilePath.DIRECTORY_SEPARATOR.$filename;\n        }\n\n        $zip->create($filesInArchive, PCLZIP_OPT_REMOVE_ALL_PATH);\n\n        if (is_file($zipfile)) {\n            // Send the file for download!\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate\");\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=$sRandomFileName.zip\");\n            header(\"Content-Description: File Transfer\");\n\n            @readfile($zipfile);\n\n            // Delete the temporary file\n            array_map('unlink', glob(\"$sFilePath/*.*\"));\n            rmdir($sFilePath);\n            unlink($zipfile);\n            return;\n        }\n\n        $this->getController()->redirect('/admin/roles');\n    }\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $ptid the ID of the model to be loaded\n     * @return Permissiontemplates the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($ptid)\n    {\n        $model = Permissiontemplates::model()->findByPk($ptid);\n        if ($model === null) {\n            $model = new Permissiontemplates();\n        }\n\n        return $model;\n    }\n\n    /**\n     * Adds permission to a role\n     * Needs an array in the form of [PERMISSIONID][PERMISSION]\n     *\n     * @param int $iRoleId\n     * @param array $aPermissionArray\n     * @return array\n     */\n    private function applyPermissionFromArray($iRoleId, $aPermissionArray)\n    {\n        $oCriteria = new CDbCriteria();\n        $oCriteria->compare('entity_id', $iRoleId);\n        $oCriteria->compare('entity', 'role');\n        //Kill all Permissions of that role.\n        $aPermissionsCurrently = Permission::model()->deleteAll($oCriteria);\n        $results = [];\n        //Apply the permission array\n        foreach($aPermissionArray as $sPermissionKey => $aPermissionSettings) {\n            $oPermission = new Permission();\n            $oPermission->entity = 'role';\n            $oPermission->entity_id = $iRoleId;\n            $oPermission->uid = 0;\n            $oPermission->permission = $sPermissionKey;\n\n            foreach($aPermissionSettings as $sSettingKey => $sSettingValue) {\n                $oPermissionDBSettingKey = $sSettingKey.'_p';\n                $oPermission->$oPermissionDBSettingKey = $sSettingValue == 'on' ? 1 : 0;\n            }\n            \n            $aPermissionData = Permission::getGlobalPermissionData($sPermissionKey);\n\n            $results[$sPermissionKey] = [\n                'descriptionData' => $aPermissionData,\n                'success' => $oPermission->save(),\n                'storedValue' => $oPermission->attributes\n            ];\n        }\n        return $results;\n    }\n\n    private function applyPermissionFromXML($iRoleId, $oPermissionObject)\n    {\n        $oCriteria = new CDbCriteria();\n        $oCriteria->compare('entity_id', $iRoleId);\n        $oCriteria->compare('entity', 'role');\n        //Kill all Permissions of that role.\n        $aPermissionsCurrently = Permission::model()->deleteAll($oCriteria);\n        $results = [];\n        //Apply the permission array\n        $aCleanPermissionObject = json_decode(json_encode($oPermissionObject), true);\n        foreach($aCleanPermissionObject as $sPermissionKey => $aPermissionSettings) {\n            $oPermission = new Permission();\n            $oPermission->entity = 'role';\n            $oPermission->entity_id = $iRoleId;\n            $oPermission->uid = 0;\n            $oPermission->permission = $sPermissionKey;\n\n            foreach($aPermissionSettings as $sSettingKey => $sSettingValue) {\n                $oPermissionDBSettingKey = $sSettingKey.'_p';\n                if(isset($oPermission->$oPermissionDBSettingKey)) {\n                    $oPermission->$oPermissionDBSettingKey = $sSettingValue;\n                }\n            }\n            \n            $aPermissionData = Permission::getGlobalPermissionData($sPermissionKey);\n\n            $results[$sPermissionKey] = [\n                'descriptionData' => $aPermissionData,\n                'success' => $oPermission->save(),\n                'storedValue' => $oPermission->attributes\n            ];\n        }\n        return $results;\n    }\n\n}\n"], "fixing_code": ["<?php\n\nclass PermissiontemplatesController extends Survey_Common_Action\n{\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            App()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        App()->getClientScript()->registerPackage('permissionroles');\n        $request = App()->request;\n\n        $massiveAction = App()->getController()->renderPartial(\n            '/admin/permissiontemplates/massiveAction/_selector',\n            [],\n            true,\n            false\n        );\n\n        // Set page size\n        $pageSize = $request->getParam('pageSize', null);\n        if ($pageSize != null) {\n            App()->user->setState('pageSize', (int)$pageSize);\n        }\n\n        $model = Permissiontemplates::model();\n        $aPermissiontemplatesParam = $request->getParam('Permissiontemplates');\n        if ($aPermissiontemplatesParam) {\n            $model->setAttributes($aPermissiontemplatesParam, false);\n        }\n        $this->_renderWrappedTemplate(\n            null,\n            'permissiontemplates/index',\n            array(\n                'model'         => $model,\n                'massiveAction' => $massiveAction\n            )\n        );\n    }\n    /**\n     * Displays a particular model.\n     * @param integer $ptid the ID of the model to be displayed\n     */\n    public function viewrole($ptid)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n        return $this->getController()->renderPartial(\n            '/admin/permissiontemplates/partials/_view', \n            [\n                \"oModel\" => $oPermissionTemplate, \n            ]\n        );\n    }\n\n    public function editrolemodal($ptid=null)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        $model = $this->loadModel($ptid);\n        Yii::app()->getController()->renderPartial( 'permissiontemplates/partials/_form', ['model' => $model]);\n    }\n\n    /**\n     * @return string|string[]|null\n     * @throws CException\n     * @throws CHttpException\n     */\n    public function applyedit()\n    {\n        $aPermissiontemplate = Yii::app()->request->getPost('Permissiontemplates');\n        $model = $this->loadModel($aPermissiontemplate['ptid']);\n\n        // XSS filter\n        $aPermissiontemplate['name'] = CHtml::encode($aPermissiontemplate['name']);\n        $aPermissiontemplate['description'] = CHtml::encode($aPermissiontemplate['description']);\n\n        $newAttributes = array_merge($model->attributes, $aPermissiontemplate);\n        $model->attributes = $newAttributes;\n\n        if ($model->save()) {\n            $success = true;\n            $message = gT('Role successfully saved');\n        } else {\n            $success = false;\n            $message = gT('Failed saving the role');\n            $errors = $model->getErrors();\n\n            $errorDiv = $this->renderErrors($errors);\n        }\n        return App()->getController()->renderPartial('/admin/super/_renderJson', [\n            \"data\" => [\n                'success' => $success,\n                'message' => $message,\n                'errors'  => $errorDiv ?? ''\n            ]\n        ]);\n    }\n\n    /**\n     * @param array $errors\n     *\n     * @return string $errorDiv\n     */\n    private function renderErrors($errors)\n    {\n        $errorDiv = '<ul class=\"list-unstyled\">';\n        foreach ($errors as $key => $error) {\n            foreach ($error as $errormessages) {\n                $errorDiv .= '<li>' . print_r($errormessages, true) . '</li>';\n            }\n        }\n        $errorDiv .= '</ul>';\n        return (string)$errorDiv;\n    }\n\n    public function showImportXML() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        Yii::app()->getController()->renderPartial( 'permissiontemplates/partials/_import', []);\n    }\n\n    public function importXML() {\n        \n        $sRandomFileName = randomChars(20);\n        $sFilePath = Yii::app()->getConfig('tempdir').DIRECTORY_SEPARATOR.$sRandomFileName;\n        $aPathinfo = pathinfo($_FILES['the_file']['name']);\n        $sExtension = $aPathinfo['extension'];\n        $bMoveFileResult = false;\n        \n \n        if ($_FILES['the_file']['error'] == 1 || $_FILES['the_file']['error'] == 2) {\n            Yii::app()->setFlashMessage(sprintf(gT(\"Sorry, this file is too large. Only files up to %01.2f MB are allowed.\"), getMaximumFileUploadSize() / 1024 / 1024), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n        } elseif (strtolower($sExtension) == 'xml' ||1==1) {\n            $bMoveFileResult = @move_uploaded_file($_FILES['the_file']['tmp_name'], $sFilePath);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"This is not a .xml file.\"). 'It is a '.$sExtension, 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n        }\n\n        if ($bMoveFileResult === false) {\n            Yii::app()->setFlashMessage(gT(\"An error occurred uploading your file. This may be caused by incorrect permissions for the application /tmp folder.\"), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n            return;\n        }\n\n        libxml_disable_entity_loader(false);\n        $oRoleDefinition = simplexml_load_file(realpath($sFilePath));\n        libxml_disable_entity_loader(true);\n        \n        $oNewRole = Permissiontemplates::model()->createFromXML($oRoleDefinition);\n        if($oNewRole == false ) {\n\n            Yii::app()->setFlashMessage(gT(\"Error creating role\"), 'error');\n            Yii::app()->getController()->redirect(array('/admin/roles'));\n            Yii::app()->end();\n            return;\n        }\n\n        $applyPermissions = $this->applyPermissionFromXML($oNewRole->ptid, $oRoleDefinition->permissions);\n        \n        Yii::app()->setFlashMessage(gT(\"Role was successfully imported.\"), 'success');\n        Yii::app()->getController()->redirect(array('/admin/roles'));\n        Yii::app()->end();\n        return;\n\n    }\n\n    public function setpermissions() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            return $this->getController()->renderPartial(\n                '/admin/permissiontemplates/partial/error',\n                ['errors' => [gT(\"You do not have permission to access this page.\")],'noButton' => true]\n          );\n        }\n\n        $oRequest = Yii::app()->request;\n        $ptid = $oRequest->getParam('ptid');\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n\n        // Check permissions\n        $aBasePermissions = Permission::model()->getGlobalBasePermissions();\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            // if not superadmin filter the available permissions as no admin may give more permissions than he owns\n            Yii::app()->session['flashmessage'] = gT(\"Note: You can only give limited permissions to other users because your own permissions are limited, too.\");\n            $aFilteredPermissions = array();\n            foreach ($aBasePermissions as $PermissionName=>$aPermission) {\n                foreach ($aPermission as $sPermissionKey=>&$sPermissionValue) {\n                    if ($sPermissionKey != 'title' && $sPermissionKey != 'img' && !Permission::model()->hasGlobalPermission($PermissionName, $sPermissionKey)) {\n                        $sPermissionValue = false;\n                    }\n                }\n                // Only show a row for that permission if there is at least one permission he may give to other users\n                if ($aPermission['create'] || $aPermission['read'] || $aPermission['update'] || $aPermission['delete'] || $aPermission['import'] || $aPermission['export']) {\n                    $aFilteredPermissions[$PermissionName] = $aPermission;\n                }\n            }\n            $aBasePermissions = $aFilteredPermissions;\n        }\n\n        $aAllSurveys = Survey::model()->findAll();\n        $aMySurveys = array_filter($aAllSurveys, function ($oSurvey) {\n            if (Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n                return true;\n            }\n            if ($oSurvey->owner_id == App()->user->id) {\n                return true;\n            }\n            return array_reduce($oSurvey->permissions, function ($coll, $oPermission) {\n                if ($oPermission->permission=='surveysecurity' && $oPermission->update_p == 1 && $oPermission->uid == App()->user->id) {\n                    return true;\n                }\n                return $coll;\n            }, false);\n        });\n\n        return $this->getController()->renderPartial(\n            '/admin/permissiontemplates/partials/_permissions', \n            [\n                \"oModel\" => $oPermissionTemplate, \n                \"aBasePermissions\" => $aBasePermissions\n            ]\n        );\n    }\n\n    public function savepermissions()\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            return $this->getController()->renderPartial(\n                '/admin/permissiontemplates/partial/error', \n                ['errors' => [gT(\"You do not have permission to access this page.\")],'noButton' => true]\n          );\n        }\n\n        $oRequest = Yii::app()->request;\n        $ptid = $oRequest->getParam('ptid');\n        $aPermissions = Yii::app()->request->getPost('Permission',[]);\n        $oPermissionTemplate = Permissiontemplates::model()->findByPk($ptid);\n        $results = $this->applyPermissionFromArray($ptid, $aPermissions);\n        \n        $oPermissionTemplate->renewed_last = date('Y-m-d H:i:s');\n        $save = $oPermissionTemplate->save();\n        \n        $html = $this->getController()->renderPartial('/admin/usermanagement/partial/permissionsuccess', ['results' => $results], true);\n        return Yii::app()->getController()->renderPartial('/admin/usermanagement/partial/json', [\"data\"=>[\n            'success' => true,\n            'html' => $html\n        ]]);\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function edit($ptid=null)\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $model = $this->loadModel($ptid);\n\n        // Uncomment the following line if AJAX validation is needed\n        // $this->performAjaxValidation($model);\n\n        if (isset($_POST['Permissiontemplates'])) {\n            $model->attributes = $_POST['Permissiontemplates'];\n            if ($model->save()) {\n                $this->redirect(array('view', 'id' => $model->id));\n            }\n\n        }\n\n        $this->_renderWrappedTemplate(\n            null, \n            'permissiontemplates/edit', \n            array(\n                'model' => $model,\n            )\n        );\n    }\n\n    public function batchDelete() \n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $sPtids = Yii::app()->request->getPost('sItems', []);\n        $aPtids = json_decode($sPtids, true);\n        $success = [];\n        foreach ($aPtids as $ptid) {\n            $success[$ptid] = $this->loadModel($ptid)->delete();\n        }\n\n        $this->getController()->renderPartial(\n            '/admin/usermanagement/partial/success', \n            [\n                'sMessage' => gT('Roles successfully deleted'), \n                'sDebug' => json_encode($success, JSON_PRETTY_PRINT), \n                'noButton' => true\n            ]\n        );\n\n    }\n\n    /**\n     * Deletes a particular model.\n     * If deletion is successful, the browser will be redirected to the 'admin' page.\n     * @param integer $ptid the ID of the model to be deleted\n     */\n    public function delete()\n    {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $ptid = Yii::app()->request->getPost('ptid', 0);\n        $this->loadModel($ptid)->delete();\n\n        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser\n        if (!isset($_GET['ajax'])) {\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('/admin/roles'));\n        }\n\n    }\n\n    public function runexport($ptid) {\n        $oModel = $this->loadModel($ptid);\n        $oXML = $oModel->compileExportXML();\n        $filename = preg_replace(\"/[^a-zA-Z0-9-_]*/\",'',$oModel->name);\n\n        header('Content-type: application/xml');\n        header('Content-Disposition: attachment; filename=\"'.$filename.'.xml\"');\n        print($oXML->asXML());\n        Yii::app()->end();\n    }\n    \n    public function batchExport() {\n        if(!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            Yii::app()->session['flashmessage'] = gT('You have no access to the role management!');\n            $this->getController()->redirect(array('/admin'));\n        }\n        $sPtids = Yii::app()->request->getParam('sItems', '');\n        $aPtids = explode(',',$sPtids);\n        $sRandomFolderName = randomChars(20);\n        $sRandomFileName = \"RoleExport-\".randomChars(5).'-'.time();\n        \n        $tempdir = Yii::app()->getConfig('tempdir');\n        $zipfile = \"$tempdir/$sRandomFileName.zip\";\n        Yii::app()->loadLibrary('admin.pclzip');\n\n        $zip = new PclZip($zipfile);\n        $sFilePath = $tempdir.DIRECTORY_SEPARATOR.$sRandomFolderName;      \n        \n        mkdir($sFilePath);\n        $filesInArchive = [];\n        \n        foreach ($aPtids as $iPtid) {\n            $oModel = $this->loadModel($iPtid);\n            $oXML = $oModel->compileExportXML();\n            $filename = preg_replace(\"/[^a-zA-Z0-9-_]*/\",'',$oModel->name).'.xml';\n\n            file_put_contents($sFilePath.DIRECTORY_SEPARATOR.$filename, $oXML->asXML());\n            $filesInArchive[] = $sFilePath.DIRECTORY_SEPARATOR.$filename;\n        }\n\n        $zip->create($filesInArchive, PCLZIP_OPT_REMOVE_ALL_PATH);\n\n        if (is_file($zipfile)) {\n            // Send the file for download!\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate\");\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=$sRandomFileName.zip\");\n            header(\"Content-Description: File Transfer\");\n\n            @readfile($zipfile);\n\n            // Delete the temporary file\n            array_map('unlink', glob(\"$sFilePath/*.*\"));\n            rmdir($sFilePath);\n            unlink($zipfile);\n            return;\n        }\n\n        $this->getController()->redirect('/admin/roles');\n    }\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $ptid the ID of the model to be loaded\n     * @return Permissiontemplates the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($ptid)\n    {\n        $model = Permissiontemplates::model()->findByPk($ptid);\n        if ($model === null) {\n            $model = new Permissiontemplates();\n        }\n\n        return $model;\n    }\n\n    /**\n     * Adds permission to a role\n     * Needs an array in the form of [PERMISSIONID][PERMISSION]\n     *\n     * @param int $iRoleId\n     * @param array $aPermissionArray\n     * @return array\n     */\n    private function applyPermissionFromArray($iRoleId, $aPermissionArray)\n    {\n        $oCriteria = new CDbCriteria();\n        $oCriteria->compare('entity_id', $iRoleId);\n        $oCriteria->compare('entity', 'role');\n        //Kill all Permissions of that role.\n        $aPermissionsCurrently = Permission::model()->deleteAll($oCriteria);\n        $results = [];\n        //Apply the permission array\n        foreach($aPermissionArray as $sPermissionKey => $aPermissionSettings) {\n            $oPermission = new Permission();\n            $oPermission->entity = 'role';\n            $oPermission->entity_id = $iRoleId;\n            $oPermission->uid = 0;\n            $oPermission->permission = $sPermissionKey;\n\n            foreach($aPermissionSettings as $sSettingKey => $sSettingValue) {\n                $oPermissionDBSettingKey = $sSettingKey.'_p';\n                $oPermission->$oPermissionDBSettingKey = $sSettingValue == 'on' ? 1 : 0;\n            }\n            \n            $aPermissionData = Permission::getGlobalPermissionData($sPermissionKey);\n\n            $results[$sPermissionKey] = [\n                'descriptionData' => $aPermissionData,\n                'success' => $oPermission->save(),\n                'storedValue' => $oPermission->attributes\n            ];\n        }\n        return $results;\n    }\n\n    private function applyPermissionFromXML($iRoleId, $oPermissionObject)\n    {\n        $oCriteria = new CDbCriteria();\n        $oCriteria->compare('entity_id', $iRoleId);\n        $oCriteria->compare('entity', 'role');\n        //Kill all Permissions of that role.\n        $aPermissionsCurrently = Permission::model()->deleteAll($oCriteria);\n        $results = [];\n        //Apply the permission array\n        $aCleanPermissionObject = json_decode(json_encode($oPermissionObject), true);\n        foreach($aCleanPermissionObject as $sPermissionKey => $aPermissionSettings) {\n            $oPermission = new Permission();\n            $oPermission->entity = 'role';\n            $oPermission->entity_id = $iRoleId;\n            $oPermission->uid = 0;\n            $oPermission->permission = $sPermissionKey;\n\n            foreach($aPermissionSettings as $sSettingKey => $sSettingValue) {\n                $oPermissionDBSettingKey = $sSettingKey.'_p';\n                if(isset($oPermission->$oPermissionDBSettingKey)) {\n                    $oPermission->$oPermissionDBSettingKey = $sSettingValue;\n                }\n            }\n            \n            $aPermissionData = Permission::getGlobalPermissionData($sPermissionKey);\n\n            $results[$sPermissionKey] = [\n                'descriptionData' => $aPermissionData,\n                'success' => $oPermission->save(),\n                'storedValue' => $oPermission->attributes\n            ];\n        }\n        return $results;\n    }\n\n}\n"], "filenames": ["application/controllers/admin/PermissiontemplatesController.php"], "buggy_code_start_loc": [84], "buggy_code_end_loc": [84], "fixing_code_start_loc": [85], "fixing_code_end_loc": [89], "type": "CWE-79", "message": "Cross Site Scripting vulnerabilty in LimeSurvey 4.1.11+200316 via the (1) name and (2) description parameters in application/controllers/admin/PermissiontemplatesController.php.", "other": {"cve": {"id": "CVE-2020-22607", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-28T19:15:07.837", "lastModified": "2021-07-02T15:05:04.780", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting vulnerabilty in LimeSurvey 4.1.11+200316 via the (1) name and (2) description parameters in application/controllers/admin/PermissiontemplatesController.php."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross Site Scripting en LimeSurvey versi\u00f3n 4.1.11+200316, por medio de los par\u00e1metros (1) name y (2) description en el archivo application/controllers/admin/PermissiontemplatesController.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:4.1.11\\+200316:*:*:*:*:*:*:*", "matchCriteriaId": "9E203201-47D2-4FBD-8943-E7AD11CEB545"}]}]}], "references": [{"url": "https://github.com/LimeSurvey/LimeSurvey/commit/2aada33c76efbbc35d33c149ac02b1dc16a81f62", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/2aada33c76efbbc35d33c149ac02b1dc16a81f62"}}