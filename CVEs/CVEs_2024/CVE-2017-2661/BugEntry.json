{"buggy_code": ["# Change Log\n\n## [Unreleased]\n\n### Added\n- Resources in location constraints now may be specified by resource name\n  patterns in addition to resource names ([rhbz#1362493])\n- Proxy settings description in pcsd configuration file ([rhbz#1315627])\n- Man page for pcsd ([rhbz#1378742])\n- Pcs now allows to set `trace_ra` and `trace_file` options of `ocf:heartbeat`\n  and `ocf:pacemaker` resources ([rhbz#1421702])\n- `pcs resource describe` and `pcs stonith describe` commands now show all\n  information about the specified agent if the `--full` flag is used\n- `pcs resource manage | unmanage` enables respectively disables monitor\n  operations when the `--monitor` flag is specified ([rhbz#1303969])\n\n### Changed\n- It is now possible to specify more than one resource in the `pcs resource\n  enable` and `pcs resource disable` commands.\n\n### Fixed\n- Python 3: pcs no longer spams stderr with error messages when communicating\n  with another node\n- Stopping a cluster does not timeout too early and it generally works better\n  even if the cluster is running Virtual IP resources ([rhbz#1334429])\n- `pcs booth remove` now works correctly even if the booth resource group is\n  disabled (another fix) ([rhbz#1389941])\n\n[rhbz#1303969]: https://bugzilla.redhat.com/show_bug.cgi?id=1303969\n[rhbz#1315627]: https://bugzilla.redhat.com/show_bug.cgi?id=1315627\n[rhbz#1334429]: https://bugzilla.redhat.com/show_bug.cgi?id=1334429\n[rhbz#1362493]: https://bugzilla.redhat.com/show_bug.cgi?id=1362493\n[rhbz#1378742]: https://bugzilla.redhat.com/show_bug.cgi?id=1378742\n[rhbz#1389941]: https://bugzilla.redhat.com/show_bug.cgi?id=1389941\n[rhbz#1421702]: https://bugzilla.redhat.com/show_bug.cgi?id=1421702\n\n\n## [0.9.156] - 2017-02-10\n\n### Added\n- Fencing levels now may be targeted in CLI by a node name pattern or a node\n  attribute in addition to a node name ([rhbz#1261116])\n- `pcs cluster cib-push` allows to push a diff obtained internally by comparing\n  CIBs in specified files ([rhbz#1404233], [rhbz#1419903])\n- Added flags `--wait`, `--disabled`, `--group`, `--after`, `--before` into\n  the command `pcs stonith create`\n- Added commands `pcs stonith enable` and `pcs stonith disable`\n- Command line option --request-timeout ([rhbz#1292858])\n- Check whenever proxy is set when unable to connect to a node ([rhbz#1315627])\n\n### Changed\n- `pcs node [un]standby` and `pcs node [un]maintenance` is now atomic even if\n  more than one node is specified ([rhbz#1315992])\n- Restarting pcsd initiated from pcs is now a synchronous operation\n  ([rhbz#1284404])\n- Stopped bundling fonts used in pcsd GUI ([ghissue#125])\n- In `pcs resource create` flags `--master` and `--clone` changed to keywords\n  `master` and `clone`\n- libcurl is now used for node to node communication\n\n### Fixed\n- When upgrading CIB to the latest schema version, check for minimal common\n  version across the cluster ([rhbz#1389443])\n- `pcs booth remove` now works correctly even if the booth resource group is\n  disabled ([rhbz#1389941])\n- Adding a node in a CMAN cluster does not cause the new node to be fenced\n  immediately ([rhbz#1394846])\n- Show proper error message when there is an HTTP communication failure\n  ([rhbz#1394273])\n- Fixed searching for files to remove in the `/var/lib` directory ([ghpull#119],\n  [ghpull#120])\n- Fixed messages when managing services (start, stop, enable, disable...)\n- Fixed disabling services on systemd systems when using instances\n  ([rhbz#1389501])\n- Fixed parsing commandline options ([rhbz#1404229])\n- Pcs does not exit with a false error message anymore when pcsd-cli.rb outputs\n  to stderr ([ghissue#124])\n- Pcs now exits with an error when both `--all` and a list of nodes is specified\n  in the `pcs cluster start | stop | enable | disable` commands ([rhbz#1339355])\n- built-in help and man page fixes and improvements ([rhbz#1347335])\n- In `pcs resource create` the flag `--clone` no longer steals arguments from\n  the keywords `meta` and `op` ([rhbz#1395226])\n- `pcs resource create` does not produce invalid cib when group id is already\n  occupied with non-resource element ([rhbz#1382004])\n- Fixed misbehavior of the flag `--master` in `pcs resource create` command\n  ([rhbz#1378107])\n- Fixed tacit acceptance of invalid resource operation in `pcs resource create`\n  ([rhbz#1398562])\n- Fixed misplacing metadata for disabling when running `pcs resource create`\n  with flags `--clone` and `--disabled` ([rhbz#1402475])\n- Fixed incorrect acceptance of the invalid attribute of resource operation in\n  `pcs resource create` ([rhbz#1382597])\n- Fixed validation of options of resource operations in `pcs resource create`\n  ([rhbz#1390071])\n- Fixed silent omission of duplicate options ([rhbz#1390066])\n- Added more validation for resource agent names ([rhbz#1387670])\n- Fixed network communication issues in pcsd when a node was specified by an\n  IPv6 address\n- Fixed JS error in web UI when empty cluster status is received\n  ([rhbz#1396462])\n- Fixed sending user group in cookies from Python 3\n- Fixed pcsd restart in Python 3\n- Fixed parsing XML in Python 3 (caused crashes when reading resource agents\n  metadata) ([rhbz#1419639])\n- Fixed the recognition of the structure of a resource agent name that contains\n  a systemd instance ([rhbz#1419661])\n\n### Removed\n- Ruby 1.8 and 1.9 is no longer supported due to bad libcurl support\n\n[ghissue#124]: https://github.com/ClusterLabs/pcs/issues/124\n[ghissue#125]: https://github.com/ClusterLabs/pcs/issues/125\n[ghpull#119]: https://github.com/ClusterLabs/pcs/pull/119\n[ghpull#120]: https://github.com/ClusterLabs/pcs/pull/120\n[rhbz#1261116]: https://bugzilla.redhat.com/show_bug.cgi?id=1261116\n[rhbz#1284404]: https://bugzilla.redhat.com/show_bug.cgi?id=1284404\n[rhbz#1292858]: https://bugzilla.redhat.com/show_bug.cgi?id=1292858\n[rhbz#1315627]: https://bugzilla.redhat.com/show_bug.cgi?id=1315627\n[rhbz#1315992]: https://bugzilla.redhat.com/show_bug.cgi?id=1315992\n[rhbz#1339355]: https://bugzilla.redhat.com/show_bug.cgi?id=1339355\n[rhbz#1347335]: https://bugzilla.redhat.com/show_bug.cgi?id=1347335\n[rhbz#1378107]: https://bugzilla.redhat.com/show_bug.cgi?id=1378107\n[rhbz#1382004]: https://bugzilla.redhat.com/show_bug.cgi?id=1382004\n[rhbz#1382597]: https://bugzilla.redhat.com/show_bug.cgi?id=1382597\n[rhbz#1387670]: https://bugzilla.redhat.com/show_bug.cgi?id=1387670\n[rhbz#1389443]: https://bugzilla.redhat.com/show_bug.cgi?id=1389443\n[rhbz#1389501]: https://bugzilla.redhat.com/show_bug.cgi?id=1389501\n[rhbz#1389941]: https://bugzilla.redhat.com/show_bug.cgi?id=1389941\n[rhbz#1390066]: https://bugzilla.redhat.com/show_bug.cgi?id=1390066\n[rhbz#1390071]: https://bugzilla.redhat.com/show_bug.cgi?id=1390071\n[rhbz#1394273]: https://bugzilla.redhat.com/show_bug.cgi?id=1394273\n[rhbz#1394846]: https://bugzilla.redhat.com/show_bug.cgi?id=1394846\n[rhbz#1395226]: https://bugzilla.redhat.com/show_bug.cgi?id=1395226\n[rhbz#1396462]: https://bugzilla.redhat.com/show_bug.cgi?id=1396462\n[rhbz#1398562]: https://bugzilla.redhat.com/show_bug.cgi?id=1398562\n[rhbz#1402475]: https://bugzilla.redhat.com/show_bug.cgi?id=1402475\n[rhbz#1404229]: https://bugzilla.redhat.com/show_bug.cgi?id=1404229\n[rhbz#1404233]: https://bugzilla.redhat.com/show_bug.cgi?id=1404233\n[rhbz#1419639]: https://bugzilla.redhat.com/show_bug.cgi?id=1419639\n[rhbz#1419661]: https://bugzilla.redhat.com/show_bug.cgi?id=1419661\n[rhbz#1419903]: https://bugzilla.redhat.com/show_bug.cgi?id=1419903\n\n\n## [0.9.155] - 2016-11-03\n\n### Added\n- Show daemon status in `pcs status` on non-systemd machines\n- SBD support for cman clusters ([rhbz#1380352])\n- Alerts management in pcsd ([rhbz#1376480])\n\n### Changed\n- Get all information about resource and stonith agents from pacemaker. Pcs now\n  supports the same set of agents as pacemaker does. ([rhbz#1262001],\n  [ghissue#81])\n- `pcs resource create` now exits with an error if more than one resource agent\n  matches the specified short agent name instead of randomly selecting one of\n  the agents\n- Allow to remove multiple alerts and alert recipients at once\n\n### Fixed\n- When stopping a cluster with some of the nodes unreachable, stop the cluster\n  completely on all reachable nodes ([rhbz#1380372])\n- Fixed pcsd crash when rpam rubygem is installed ([ghissue#109])\n- Fixed occasional crashes / failures when using locale other than en\\_US.UTF8\n  ([rhbz#1387106])\n- Fixed starting and stopping cluster services on systemd machines without\n  the `service` executable ([ghissue#115])\n\n\n[ghissue#81]: https://github.com/ClusterLabs/pcs/issues/81\n[ghissue#109]: https://github.com/ClusterLabs/pcs/issues/109\n[ghissue#115]: https://github.com/ClusterLabs/pcs/issues/115\n[rhbz#1262001]: https://bugzilla.redhat.com/show_bug.cgi?id=1262001\n[rhbz#1376480]: https://bugzilla.redhat.com/show_bug.cgi?id=1376480\n[rhbz#1380352]: https://bugzilla.redhat.com/show_bug.cgi?id=1380352\n[rhbz#1380372]: https://bugzilla.redhat.com/show_bug.cgi?id=1380372\n[rhbz#1387106]: https://bugzilla.redhat.com/show_bug.cgi?id=1387106\n\n\n## [0.9.154] - 2016-09-21\n- There is no change log for this and previous releases. We are sorry.\n- Take a look at git history if you are interested.\n", "Pcs = Ember.Application.createWithMixins({\n  LOG_TRANSITIONS: true,\n  cluster_name: get_cluster_name(),\n  cluster_settings: null,\n  cur_page: \"\",\n  opening_resource: \"\",\n  opening_node: \"\",\n  opening_aclrole: \"\",\n  resource_page: function() {\n    if (this.cur_page == \"resources\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  node_page: function() {\n    if (this.cur_page == \"nodes\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  stonith_page: function() {\n    if (this.cur_page == \"stonith\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  configure_page: function() {\n    if (this.cur_page == \"configure\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  acls_page: function() {\n    if (this.cur_page == \"acls\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  manage_page: function() {\n    if (this.cur_page == \"manage\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  permissions_page: function() {\n    if (this.cur_page == \"permissions\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  wizards_page: function() {\n    if (this.cur_page == \"wizards\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  available_features: [],\n  is_sbd_supported: function() {\n    return (this.get(\"available_features\").indexOf(\"sbd\") != -1);\n  }.property(\"available_features\"),\n  is_ticket_constraints_supported: function(){\n    return (\n      this.get(\"available_features\").indexOf(\"ticket_constraints\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_constraint_colocation_set: function() {\n    return (\n      this.get(\"available_features\").indexOf(\"constraint_colocation_set\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_moving_resource_in_group: function() {\n    return (\n      this.get(\"available_features\").indexOf(\"moving_resource_in_group\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_unmanaged_resource: function() {\n    return (this.get(\"available_features\").indexOf(\"unmanaged_resource\") != -1);\n  }.property(\"available_features\"),\n  is_sbd_running: false,\n  is_sbd_enabled: false,\n  is_sbd_enabled_or_running: function() {\n    return (this.get(\"is_sbd_enabled\") || this.get(\"is_sbd_running\"));\n  }.property(\"is_sbd_enabled\", \"is_sbd_running\"),\n  sbd_config: null,\n  sbd_config_table: function() {\n    if (!this.get(\"sbd_config\")) {\n      return \"no configuration obtained\";\n    }\n    var out =\n      '<table class=\"darkdatatable\"><tr><th>OPTION</th><th>VALUE</th></tr>\\n';\n    var banned_options = [\"SBD_OPTS\", \"SBD_WATCHDOG_DEV\", \"SBD_PACEMAKER\"];\n    $.each(this.get(\"sbd_config\"), function(opt, val) {\n      if (banned_options.indexOf(opt) == -1) {\n        out += '<tr><td>' + opt + '</td><td>' + val + '</td></tr>\\n';\n      }\n    });\n    return out + '</table>';\n  }.property(\"sbd_config\"),\n\n  getResourcesFromID: function(resources) {\n    var retArray = [];\n    var resource_map = Pcs.resourcesContainer.get('resource_map');\n    $.each(resources, function(_, resource_id) {\n      if (resource_id in resource_map && !resource_map[resource_id].get('stonith')) {\n        retArray.pushObject(resource_map[resource_id]);\n      }\n    });\n    return retArray;\n  },\n  updater: null,\n\n  update: function() {\n    Pcs.get('updater').update();\n  },\n\n  _update: function(first_run) {\n    if (window.location.pathname.lastIndexOf('/manage', 0) !== 0) {\n      return;\n    }\n    if (first_run) {\n      show_loading_screen();\n    }\n    var self = Pcs;\n    var cluster_name = self.cluster_name;\n    if (cluster_name == null) {\n      if (location.pathname.indexOf(\"/manage\") != 0) {\n        return;\n      }\n      Ember.debug(\"Empty Cluster Name\");\n      ajax_wrapper({\n        url: \"/clusters_overview\",\n        dataType: \"json\",\n        timeout: 20000,\n        success: function(data) {\n          Pcs.clusterController.update(data);\n          if (Pcs.clusterController.get('cur_cluster')) {\n            Pcs.clusterController.update_cur_cluster(Pcs.clusterController.get('cur_cluster').get('name'));\n          }\n          if (data[\"not_current_data\"]) {\n            self.update();\n          }\n          hide_loading_screen();\n        },\n        error: function(jqhxr,b,c) {\n          if (jqhxr.responseText) {\n            try {\n              var obj = $.parseJSON(jqhxr.responseText);\n              if (obj.notauthorized == \"true\") {\n                location.reload();\n              }\n            } catch(e) {\n              console.log(\"Error: Unable to parse json for clusters_overview\");\n            }\n          }\n          hide_loading_screen();\n        },\n        complete: function() {\n          Pcs.get('updater').update_finished();\n        }\n      });\n      return;\n    }\n    ajax_wrapper({\n      url: \"cluster_status\",\n      dataType: \"json\",\n      success: function(data) {\n        Pcs.resourcesContainer.update(data);\n        Pcs.nodesController.update(data);\n        Pcs.aclsController.update(data);\n        Pcs.set(\"cluster_settings\",data.cluster_settings);\n        Pcs.set('need_ring1_address', false);\n        Pcs.set('is_cman_with_udpu_transport', false);\n        Pcs.set(\n          'available_features',\n          data['available_features'] ? data['available_features'] : []\n        );\n        if (data['need_ring1_address']) {\n          Pcs.set('need_ring1_address', true);\n        }\n        if (data['is_cman_with_udpu_transport']) {\n          Pcs.set('is_cman_with_udpu_transport', true);\n        }\n        var fence_change = false;\n        var resource_change = false;\n        Ember.run.next(function () {\n          var self = Pcs.resourcesContainer;\n          var cur_fence = self.get('cur_fence');\n          var cur_resource = self.get('cur_resource');\n          var resource_map = self.get('resource_map');\n          if (first_run) {\n            refresh_cluster_properties();\n            setup_node_links();\n            Pcs.nodesController.load_node($('#node_list_row').find('.node_selected').first(),true);\n            Pcs.aclsController.load_role($('#acls_list_row').find('.node_selected').first(), true);\n            if (self.get(\"fence_id_to_load\")) {\n              cur_fence = self.get_resource_by_id(self.get(\"fence_id_to_load\"));\n              fence_change = true;\n            }\n            if (self.get(\"resource_id_to_load\")) {\n              cur_resource = self.get_resource_by_id(self.get(\"resource_id_to_load\"));\n              resource_change = true;\n            }\n          }\n\n          if (cur_fence && cur_fence.get('id') in resource_map) {\n            if (resource_map[cur_fence.get('id')] !== cur_fence) {\n              cur_fence = resource_map[cur_fence.get('id')];\n            }\n          } else {\n            if (self.get('fence_list').length > 0) {\n              cur_fence = self.get('fence_list')[0];\n            } else {\n              cur_fence = null;\n            }\n            fence_change = true;\n          }\n\n          if (cur_resource && cur_resource.get('id') in resource_map) {\n            if (resource_map[cur_resource.get('id')] !== cur_resource) {\n              cur_resource = resource_map[cur_resource.get('id')];\n            }\n          } else {\n            if (self.get('resource_list').length > 0) {\n              cur_resource = self.get('resource_list')[0];\n            } else {\n              cur_resource = null;\n            }\n            resource_change = true;\n          }\n\n          self.set('cur_fence', cur_fence);\n          self.set('cur_resource', cur_resource);\n\n          Ember.run.scheduleOnce('afterRender', Pcs, function () {\n            if (self.get('cur_fence')) {\n              if (fence_change) {\n                tree_view_onclick(self.get('cur_fence').get('id'));\n              } else {\n                tree_view_select(self.get('cur_fence').get('id'));\n              }\n            }\n            if (self.get('cur_resource')) {\n              if (resource_change) {\n                tree_view_onclick(self.get('cur_resource').get('id'));\n              } else {\n                tree_view_select(self.get('cur_resource').get('id'));\n              }\n            }\n            Pcs.selectedNodeController.reset();\n            disable_checkbox_clicks();\n          });\n        });\n      },\n      error: function(jqhxr,b,c) {\n        try {\n          var obj = $.parseJSON(jqhxr.responseText);\n          if (obj.notauthorized == \"true\") {\n            location.reload();\n          }\n        } catch(e) {\n          console.log(\"Error: Unable to parse json for cluster_status\")\n        }\n      },\n      complete: function() {\n        hide_loading_screen();\n        Pcs.get('updater').update_finished();\n      }\n    });\n  }\n});\n\nPcs.GroupSelectorComponent = Ember.Component.extend({\n  resource_id: null,\n  resource: function() {\n    var id = this.get(\"resource_id\");\n    if (id) {\n      var resource = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (resource) {\n        return resource;\n      }\n    }\n    return null;\n  }.property(\"resource_id\"),\n  resource_change: function() {\n    this._refresh_fn();\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }.observes(\"resource\", \"resource_id\"),\n  group_list: [],\n  group_select_content: function() {\n    var list = [];\n    $.each(this.getWithDefault(\"group_list\", []), function(_, group) {\n      list.push({\n        name: group,\n        value: group\n      });\n    });\n    return list;\n  }.property(\"group_list\"),\n  group_select_value: null,\n  group: function() {\n    var id = this.get(\"group_select_value\");\n    if (id) {\n      var group = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (group) {\n        return group;\n      }\n    }\n    return null;\n  }.property(\"group_select_value\"),\n  position_select_content: [\n    {\n      name: \"before\",\n      value: \"before\"\n    },\n    {\n      name: \"after\",\n      value: \"after\"\n    }\n  ],\n  position_select_value: null,\n  position_select_value_changed: function() {\n  }.observes(\"position_select_value\"),\n  resource_select_content: [],\n  resource_select_value: null,\n  group_select_value_changed: function () {\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }.observes(\"group_select_value\"),\n  actions: {\n    refresh: function() {\n      this.set(\"group_list\", Pcs.resourcesContainer.get(\"group_list\"));\n      this._refresh_fn();\n      this._update_resource_select_content();\n      this._update_resource_select_value();\n    }\n  },\n  _refresh_fn: function() {\n    var id = this.get(\"resource_id\");\n    if (id) {\n      var resource = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (resource) {\n        var parent = resource.get(\"parent\");\n        if (parent && parent.get(\"is_group\")) {\n          this.set(\"group_select_value\", parent.get(\"id\"));\n          return;\n        }\n      }\n    }\n    this.set(\"group_select_value\", null);\n  },\n  _update_resource_select_content: function() {\n    var self = this;\n    var group = self.get(\"group\");\n    if (!group) {\n      self.set(\"resource_select_content\", []);\n      return;\n    }\n    var list = [];\n    var resource_id;\n    $.each(group.get(\"members\"), function(_, resource) {\n      resource_id = resource.get(\"id\");\n      if (resource_id != self.get(\"resource_id\")) {\n        list.push({\n          name: resource_id,\n          value: resource_id\n        });\n      }\n    });\n    self.set(\"resource_select_content\", list);\n  },\n  _update_resource_select_value: function() {\n    var self = this;\n    var group = self.get(\"group\");\n    var resource = self.get(\"resource\");\n    if (!group) {\n      self.set(\"resource_select_value\", null);\n      return;\n    }\n    var resource_list = group.get(\"members\");\n    if (\n      !resource ||\n      !resource.get(\"parent\") ||\n      resource.get(\"parent\").get(\"id\") != group.get(\"id\")\n    ) {\n      self.set(\"position_select_value\", \"after\");\n      self.set(\"resource_select_value\", resource_list.slice(-1)[0].get(\"id\"));\n    } else {\n      var index = resource_list.findIndex(function(item) {\n        return item.get(\"id\") == resource.get(\"id\");\n      });\n      if (index == 0) {\n        self.set(\"position_select_value\", \"before\");\n        self.set(\n          \"resource_select_value\",\n          (resource_list[1]) ? resource_list[1].get(\"id\") : null // second\n        );\n      } else if (index == -1) {\n        self.set(\"position_select_value\", \"after\");\n        self.set(\"resource_select_value\", resource_list.slice(-1)[0].get(\"id\"));\n      } else {\n        self.set(\"position_select_value\", \"after\");\n        self.set(\"resource_select_value\", resource_list[index-1].get(\"id\"));\n      }\n    }\n  },\n  group_input_name: \"group_id\",\n  classNames: \"group-selector\",\n  init: function() {\n    this._super();\n    if (this.get(\"resource_id\")) {\n      this.set(\"group_list\", Pcs.resourcesContainer.get(\"group_list\"));\n    }\n    this._refresh_fn();\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }\n});\n\nPcs.ValueSelectorComponent = Ember.Component.extend({\n  tagName: 'select',\n  attributeBindings: ['name'],\n  name: null,\n  prompt: \"Select one value\",\n  show_prompt: true,\n  content: [],\n  value: null,\n  _change: function() {\n    var selectedIndex = this.$()[0].selectedIndex,\n      content = this.get('content'),\n      prompt = this.get('show_prompt');\n\n    if (!content || !content.get('length')) { return; }\n    if (prompt && selectedIndex === 0) { this.set('value', \"\"); return; }\n\n    if (prompt) { selectedIndex -= 1; }\n    this.set('value', content.objectAt(selectedIndex)['value']);\n  },\n  init: function() {\n    this._super();\n    this.on(\"change\", this, this._change);\n  }\n});\n\nPcs.ClusterPropertyComponent = Ember.Component.extend({\n  tagName: 'tr',\n  prop: null,\n  attributeBindings: ['name'],\n  boolean_options: [\n    {\n      name: \"true\",\n      value: \"true\"\n    },\n    {\n      name: \"false\",\n      value: \"false\"\n    }\n  ]\n});\n\nPcs.ParametersTableComponent = Ember.Component.extend({\n  parameters: [],\n  show_content: false,\n  show_title: true,\n  table_name: \"\",\n  table_id: \"\",\n  table_id_suffix: \"\",\n  table_id_full: function() {\n    return this.get(\"table_id\") + this.get(\"table_id_suffix\");\n  }.property(\"table_id\", \"table_id_suffix\"),\n  content_style: function() {\n    return (\"display: \" + (this.get(\"show_content\") ? \"block\" : \"none\"));\n  }.property(\"show_content\"),\n  actions: {\n    toggleBody: function() {\n      this.toggleProperty('show_content');\n    }\n  }\n});\n\nPcs.ParametersTableElementComponent = Ember.Component.extend({\n  tagName: \"tr\"\n});\n\nPcs.UtilizationTableComponent = Ember.Component.extend({\n  entity: null,\n  type: \"node\", // node or resource\n  form_id: Ember.computed(\"type\", function() {\n    return \"new_\" + this.get(\"type\") + \"_utilization\";\n  }),\n  show_content: false,\n  utilization: [],\n  last_count: 0,\n  util_count: function() {\n    var l = 0;\n    if (this.utilization) {\n      l = this.utilization.length;\n    }\n    //this is needed for not showing/hiding table on each update\n    if (this.last_count != l) {\n      if (l > 0) {\n        this.set('show_content', true);\n      } else {\n        this.set('show_content', false);\n      }\n    }\n    this.set(\"last_count\", l);\n    return l;\n  }.property(\"utilization\"),\n  actions: {\n    toggleBody: function() {\n      this.toggleProperty('show_content');\n    },\n    remove: function(name) {\n      set_utilization(this.type, this.entity.get(\"id\"), name, \"\");\n    },\n    add: function(form_id) {\n      var id = \"#\" + form_id;\n      var name = $(id + \" input[name='new_utilization_name']\").val().trim();\n      if (name == \"\") {\n        alert(\"Name of utilization attribute should be non-empty string.\");\n      }\n      var value = $(id + \" input[name='new_utilization_value']\").val().trim();\n      if (!is_integer(value)) {\n        alert(\"Value of utilization attribute has to be integer.\");\n        return;\n      }\n      set_utilization(\n        this.type,\n        this.entity.get(\"id\"),\n        name,\n        value\n      );\n      fade_in_out($(id));\n      $(id + \" input\").val(\"\");\n    }\n  }\n});\n\nPcs.Updater = Ember.Object.extend({\n  timeout: 20000,\n  first_run: true,\n  async: true,\n  autostart: true,\n  started: false,\n  in_progress: false,\n  waiting: false,\n  update_function: null,\n  update_target: null,\n  timer: null,\n\n  start: function() {\n    this.set('started', true);\n    this.update();\n  },\n\n  stop: function() {\n    this.set('started', false);\n    this.cancel_timer();\n  },\n\n  cancel_timer: function() {\n    var self = this;\n    var timer = self.get('timer');\n    if (timer) {\n      self.set('timer', null);\n      Ember.run.cancel(timer);\n    }\n  },\n\n  update: function() {\n    var self = this;\n    if (!self.get('update_function')) {\n      console.log('No update_function defined!');\n      return;\n    }\n    self.cancel_timer();\n    self.set('waiting', false);\n    if (self.get('in_progress')) {\n      self.set('waiting', true);\n    } else {\n      self.set('in_progress', true);\n      self.get('update_function').apply(self.get('update_target'), [self.get('first_run')]);\n      self.set('first_run', false);\n      if (!self.get('async')) {\n        self.update_finished();\n      }\n    }\n  },\n\n  update_finished: function() {\n    var self = this;\n    if (self.get('waiting')) {\n      Ember.run.next(self, self.update);\n    } else if (self.get('started')) {\n      self.set('timer', Ember.run.later(self, self.update, self.get('timeout')));\n    }\n    self.set('in_progress', false);\n  },\n\n  init: function() {\n    var self = this;\n    if (!self.get('update_target')) {\n      self.set('update_target', self);\n    }\n    if (self.get('autostart')) {\n      self.start();\n    }\n  }\n});\n\nPcs.resourcesContainer = Ember.Object.create({\n  resource_map: {},\n  top_level_resource_map: {},\n  fence_list: [],\n  resource_list: [],\n  resource_id_to_load: null,\n  fence_id_to_load: null,\n  cur_resource: null,\n  cur_fence: null,\n  constraints: {},\n  group_list: [],\n  data_version: null,\n  new_resource_agent_metadata: null,\n  new_fence_agent_metadata: null,\n\n  get_resource_by_id: function(resource_id) {\n    var resource_map = this.get('resource_map');\n    if (resource_id in resource_map)\n      return resource_map[resource_id];\n    return null;\n  },\n\n  get_family_list: function(parent) {\n    var family = [];\n    family.push(parent);\n    switch (parent[\"class_type\"]) {\n      case \"group\":\n        $.each(parent.get('members'), function(index, member) {\n          family = family.concat(Pcs.resourcesContainer.get_family_list(member));\n        });\n        break;\n      case \"clone\":\n      case \"master\":\n        family = family.concat(Pcs.resourcesContainer.get_family_list(parent.get('member')));\n        break;\n    }\n    return family;\n  },\n\n  update_meta_attr: function(resource_id, attr, value) {\n    value = typeof value !== 'undefined' ? value.trim() : \"\";\n    var data = {\n      res_id: resource_id,\n      key: attr,\n      value: value\n    };\n\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'add_meta_attr_remote',\n      data: data,\n      timeout: pcs_timeout,\n      error: function (xhr, status, error) {\n        alert(\n          \"Unable to update meta attribute '\" + attr + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  enable_resource: function(resource_id) {\n    if (resource_id == null) {\n      return;\n    }\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'resource_start',\n      data: {resource: resource_id},\n      timeout: pcs_timeout,\n      success: function(data) {\n        if (data['error']) {\n          alert(\"Unable to enable resource '\" + resource_id + \"': (\" + data['stderr'] + \")\");\n        }\n      },\n      error: function(xhr, status, error) {\n        alert(\n          \"Unable to enable resource '\" + resource_id + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  disable_resource: function(resource_id) {\n    if (resource_id == null) {\n      return;\n    }\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'resource_stop',\n      data: {resource: resource_id},\n      timeout: pcs_timeout,\n      success: function(data) {\n        if (data['error']) {\n          alert(\"Unable to disable resource '\" + resource_id + \"': (\" + data['stderr'] + \")\");\n        }\n      },\n      error: function(xhr, status, error) {\n        alert(\n          \"Unable to disable resource '\" + resource_id + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  delete_resources: function(type, resource_list) {\n    var self = this;\n    var list = self.get(type);\n    $.each(resource_list, function(i, resource) {\n      list.removeObject(resource);\n    });\n  },\n\n  delete_unused_resources: function(type, used_map) {\n    var self = this;\n    var to_delete = [];\n    var list = self.get(type);\n    $.each(list, function(i, resource) {\n      if (!(resource.get('id') in used_map)) {\n        to_delete.push(resource);\n      }\n    });\n    self.delete_resources(type, to_delete);\n  },\n\n  update: function(data) {\n    var self = this;\n    self.set('group_list', data['groups']);\n    self.set(\"data_version\", data['status_version']);\n    var resources = data[\"resource_list\"];\n    var resource_obj = null;\n    var resource_id;\n    var new_resource_map = {};\n    var top_resource_map = {};\n    $.each(resources, function(index, resource) {\n      var update = false;\n      resource_id = resource.id;\n      if (resource_id in self.get('top_level_resource_map')) {\n        resource_obj = self.get('top_level_resource_map')[resource_id];\n        resource_obj.update(resource_obj, resource);\n        update = true;\n      } else {\n        switch (resource[\"class_type\"]) {\n          case \"primitive\":\n            resource_obj = Pcs.PrimitiveObj.create(resource);\n            break;\n          case \"group\":\n            resource_obj = Pcs.GroupObj.create(resource);\n            break;\n          case \"clone\":\n            resource_obj = Pcs.CloneObj.create(resource);\n            break;\n          case \"master\":\n            resource_obj = Pcs.MasterSlaveObj.create(resource);\n            break;\n        }\n      }\n\n      top_resource_map[resource_obj.get('id')] = resource_obj;\n      $.each(self.get_family_list(resource_obj), function(index, resource) {\n        new_resource_map[resource.get('id')] = resource;\n      });\n\n      if (!update) {\n        if (resource_obj.stonith) {\n          self.get('fence_list').pushObject(resource_obj);\n        } else {\n          self.get('resource_list').pushObject(resource_obj);\n        }\n      }\n    });\n\n    self.set('top_level_resource_map', top_resource_map);\n    self.set('resource_map', new_resource_map);\n\n    self.delete_unused_resources(\"fence_list\", top_resource_map);\n    self.delete_unused_resources(\"resource_list\", top_resource_map);\n\n    var constraints = constraint_resort(data[\"constraints\"]);\n    self.set('constraints', constraints);\n    var resource_map = self.get('resource_map');\n    $.each(constraints, function(const_type, cons) {\n      $.each(resource_map, function(resource_id, resource_obj) {\n        if (resource_id in cons) {\n          resource_obj.set(const_type, cons[resource_id]);\n        } else {\n          resource_obj.set(const_type, []);\n        }\n      });\n    });\n    $.each(resource_map, function(resource_id, resource_obj) {\n      resource_obj.set('group_list', self.get('group_list'));\n    });\n    self.set('resource_list', Ember.copy(self.get('resource_list')).sort(function(a,b){return a.get('id').localeCompare(b.get('id'))}));\n    self.set('fence_list', Ember.copy(self.get('fence_list')).sort(function(a,b){return a.get('id').localeCompare(b.get('id'))}));\n  }\n});\n\nPcs.resourcesContainer.reopen({\n  is_version_1: function() {\n    return (this.get(\"data_version\") == '1');\n  }.property('data_version'),\n  groups_enum: function() {\n    var self = this;\n    var res = [];\n    $.each(self.getWithDefault(\"group_list\", []), function(_, group) {\n      res.push({\n        name: group,\n        value: group\n      });\n    });\n    return res;\n  }.property(\"group_list\")\n});\n\nPcs.ResourceObj = Ember.Object.extend({\n  id: null,\n  _id: Ember.computed.alias('id'),\n  name: Ember.computed.alias('id'),\n  treeview_element_id: function() {\n    if (this.get(\"id\")) {\n      return this.get(\"id\") + \"-treeview-element\";\n    }\n  }.property(\"id\"),\n  parent: null,\n  meta_attr: [],\n  meta_attributes: Ember.computed.alias('meta_attr'),\n  disabled: false,\n  error_list: [],\n  warning_list: [],\n  group_list: [],\n  get_group_id: function() {\n    var self = this;\n    var p = self.get('parent');\n    if (p && p.get('class_type') == 'group') {\n      return p.get('id');\n    }\n    return null;\n  }.property('parent'),\n  status: \"unknown\",\n  class_type: null, // property to determine type of the resource\n  resource_type: function() { // this property is just for displaying resource type in GUI\n    var t = this.get(\"class_type\");\n    return t[0].toUpperCase() + t.slice(1);\n  }.property(\"class_type\"),\n  res_type: Ember.computed.alias('resource_type'),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(\n      this.get(\"status_val\"), this.get(\"is_unmanaged\")\n    );\n    return \"<div style=\\\"float:left;margin-right:6px;height:16px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status_val\"),\n  status_val: function() {\n    var status_val = get_status_value(this.get('status'));\n    if (this.get('warning_list').length && status_val != get_status_value('disabled'))\n      status_val = get_status_value(\"warning\");\n    if (this.get('error_list').length)\n      status_val = get_status_value(\"error\");\n    if ((get_status_value(this.get('status')) - status_val) < 0) {\n      return get_status_value(this.get('status'));\n    } else {\n      return status_val;\n    }\n  }.property('status', 'error_list.@each.message', 'warning_list.@each.message'),\n  status_color: function() {\n    return get_status_color(this.get(\"status_val\"), this.get(\"is_unmanaged\"));\n  }.property(\"status_val\"),\n  status_style: function() {\n    var color = get_status_color(\n      this.get(\"status_val\"), this.get(\"is_unmanaged\")\n    );\n    return \"color: \" + color + ((color != \"green\")? \"; font-weight: bold;\" : \"\");\n  }.property(\"status_val\"),\n  show_status: function() {\n    return '<span style=\"' + this.get('status_style') + '\">'\n      + this.get('status') + (this.get(\"is_unmanaged\") ? \" (unmanaged)\" : \"\")\n      + '</span>';\n  }.property(\"status_style\", \"disabled\"),\n  status_class: function() {\n    if (\n      this.get(\"status_val\") == get_status_value(\"ok\") ||\n      this.get(\"status\") == \"disabled\"\n    ) {\n      return (\n        Pcs.clusterController.get(\"show_all_resources\") ? \"\" : \"hidden \"\n        ) + \"default-hidden\";\n    } else {\n      return \"\";\n    }\n  }.property(\"status_val\", \"status\"),\n  status_class_fence: function() {\n    var show = ((Pcs.clusterController.get(\"show_all_fence\"))? \"\" : \"hidden \");\n    return ((this.get(\"status_val\") == get_status_value(\"ok\")) ? show + \"default-hidden\" : \"\");\n  }.property(\"status\", \"status_val\"),\n  tooltip: function() {\n    var self = this;\n    var out = \"\";\n    if (self.error_list.length > 0) {\n      out += \"<span style='color: red;  font-weight: bold;'>ERRORS:</span><br>\\n\";\n      out += get_formated_html_list(self.error_list);\n    }\n    if (self.warning_list.length > 0) {\n      out += \"<span style='color: orange;  font-weight: bold;'>WARNINGS:</span><br>\\n\";\n      out += get_formated_html_list(self.warning_list);\n    }\n    return out;\n  }.property(\"error_list.@each\", \"warning_list.@each\"),\n  span_class: function() {\n    switch (this.get(\"status_val\")) {\n      case get_status_value(\"failed\"):\n        return \"status-error\";\n      case get_status_value(\"warning\"):\n      case get_status_value(\"disabled\"):\n        return \"status-warning\";\n      default:\n        return \"\";\n    }\n  }.property(\"status_val\"),\n  show_group_selector: function() {\n    var parent = this.get(\"parent\");\n    return !(\n      parent &&\n      parent.is_group &&\n      parent.get(\"parent\") &&\n      Pcs.resourcesContainer.get(\"is_version_1\")\n    );\n  }.property(),\n\n  location_constraints: [],\n  ordering_constraints: [],\n  ordering_set_constraints: [],\n  colocation_constraints: [],\n  colocation_set_constraints: [],\n\n  get_map: function() {\n    var self = this;\n    var map = {};\n    map[self.get('id')] = self;\n    return map;\n  },\n\n  get_full_warning_list: function() {\n    var self = this;\n    var warning_list = [];\n    $.each(self.get_map(), function(name, resource){\n      warning_list = warning_list.concat(resource.get('warning_list'));\n    });\n    return warning_list;\n  },\n\n  get_full_error_list: function() {\n    var self = this;\n    var error_list = [];\n    $.each(self.get_map(), function(name, resource){\n      error_list = error_list.concat(resource.get('error_list'));\n    });\n    return error_list;\n  },\n\n  update: function(self, data) {\n    $.each(data, function(k, v) {\n      self.set(k, v);\n    });\n    self.refresh();\n  }\n});\n\nPcs.ResourceStatusObj = Ember.Object.extend({\n  id: null,\n  resource_agent: null,\n  managed: false,\n  failed: false,\n  role: null,\n  active: false,\n  orphaned: false,\n  failure_ignored: false,\n  nodes_running_on: 0,\n  pending: null,\n  node: null\n});\n\nPcs.ResourceOperationObj = Ember.Object.extend({\n  call_id: 0,\n  crm_debug_origin: null,\n  crm_feature_set: null,\n  exec_time: 0,\n  exit_reason: null,\n  id: null,\n  interval: 0,\n  last_rc_change: 0,\n  last_run: 0,\n  on_node: null,\n  op_digest: null,\n  operation: null,\n  operation_key: null,\n  op_force_restart: null,\n  op_restart_digest: null,\n  op_status: 0,\n  queue_time: 0,\n  rc_code: 0,\n  transition_key: null,\n  transition_magic: null\n});\n\nPcs.PrimitiveObj = Pcs.ResourceObj.extend({\n  resource_agent: null,\n  agentname: null,\n  provider: null,\n  type: null,\n  stonith: false,\n  instance_attr: [],\n  instance_status: [],\n  operations: [],\n  utilization: [],\n  is_unmanaged: function() {\n    var instance_status_list = this.get(\"instance_status\");\n    if (!instance_status_list) {\n      return true;\n    }\n    var is_managed = true;\n    $.each(instance_status_list, function(_, instance_status) {\n      is_managed = is_managed && instance_status.get(\"managed\");\n    });\n    return !is_managed;\n  }.property(\"instance_status.@each.managed\"),\n  resource_type: function() {\n    var agent = this.get(\"agentname\");\n    if (agent) {\n      return agent.replace(\"::\", \":\");\n    }\n    return agent;\n  }.property(\"agentname\"),\n  is_primitive: true,\n  nodes_running_on: function() {\n    var self = this;\n    var nodes = [];\n    var node = null;\n    $.each(self.get('instance_status'), function(index, status) {\n      node = status.get('node');\n      if (node)\n        nodes.push(node.name);\n    });\n    return nodes;\n  }.property('instance_status.@each.node'),\n  is_in_group: function() {\n    var self = this;\n    var p = self.get('parent');\n    return (p && p.get('class_type') == 'group');\n  }.property('parent'),\n  nodes_running_on_string: function() {\n    return this.get('nodes_running_on').join(', ');\n  }.property('nodes_running_on'),\n\n  refresh: function() {\n    var self = this;\n    var stat = self.get(\"crm_status\");\n    var new_stat = [];\n    $.each(stat, function(i,v) {\n      new_stat.push(Pcs.ResourceStatusObj.create(v));\n    });\n    var ops = self.get(\"operations\");\n    var new_ops = [];\n    $.each(ops, function(i,v) {\n      new_ops.push(Pcs.ResourceOperationObj.create(v));\n    });\n    self.set(\"instance_status\", new_stat);\n    self.set(\"operations\", new_ops);\n    self.set(\"crm_status\", null);\n  },\n\n  init: function() {\n    this.refresh();\n  }\n});\n\nPcs.GroupObj = Pcs.ResourceObj.extend({\n  members: [],\n  //for internal usage\n  _members: [],\n  is_group: true,\n  children: Ember.computed.alias('members'),\n\n  init: function() {\n    this.refresh();\n  },\n\n  get_map: function() {\n    var self = this;\n    var map = self._super();\n    var members = self.get('members');\n    $.each(members, function(i, m){\n      $.extend(map, m.get_map());\n    });\n    return map;\n  },\n\n  refresh: function() {\n    var self = this;\n    var new_members = [];\n    var member;\n    var old_members = {};\n    // Property 'members' is filled by constructor or update method, therefor\n    // properties 'members' and '_members' are now different. We need to update\n    // only old members and create new objects for new ones.\n    $.each(self.get(\"_members\"), function(_, m) {\n      old_members[m.get(\"id\")] = m;\n    });\n\n    $.each(self.get(\"members\"), function(_,m) {\n      if (m.id in old_members) {\n        old_members[m.id].update(old_members[m.id], m);\n        member = old_members[m.id];\n      } else {\n        member = Pcs.PrimitiveObj.create(m);\n      }\n      member.set('parent', self);\n      new_members.push(member);\n    });\n    self.set(\"members\", new_members);\n    self.set(\"_members\", new_members);\n  }\n});\n\nPcs.MultiInstanceObj = Pcs.ResourceObj.extend({\n  member: null,\n  //for internal usage\n  _member: null,\n  children: function() {\n    return [this.get('member')];\n  }.property('member'),\n  unique: false,\n  managed: false,\n  failed: false,\n  failure_ignored: false,\n  is_multi_instance: true,\n\n  get_map: function() {\n    var self = this;\n    var map = self._super();\n    $.extend(map, self.get('member').get_map());\n    return map;\n  },\n\n  init: function() {\n    this.refresh();\n  },\n\n  refresh: function() {\n    var self = this;\n    var member = self.get(\"member\");\n    var old_member = self.get(\"_member\");\n    var new_member = null;\n    // Property 'member' is filled by constructor or update method, therefor\n    // properties 'member' and '_member' are now different. We need to\n    // create new object only if there is no resource with same id and same\n    // type. Otherwise, we need to create new object.\n    if (!old_member) {\n      old_member = Pcs.resourcesContainer.get_resource_by_id(member.id);\n    }\n    if (\n      old_member &&\n      member.id == old_member.get(\"id\") &&\n      member.class_type == old_member.get(\"class_type\")\n    ) {\n      old_member.update(old_member, member);\n      new_member = old_member;\n    } else {\n      switch (member.class_type) {\n        case \"primitive\":\n          new_member = Pcs.PrimitiveObj.create(member);\n          break;\n        case \"group\":\n          new_member = Pcs.GroupObj.create(member);\n      }\n    }\n    new_member.set('parent', self);\n    self.set(\"member\", new_member);\n    self.set(\"_member\", new_member);\n  }\n});\n\nPcs.CloneObj = Pcs.MultiInstanceObj.extend({\n  is_clone: true\n});\n\nPcs.MasterSlaveObj = Pcs.MultiInstanceObj.extend({\n  masters: [],\n  slaves: [],\n  resource_type: 'Master/Slave'\n});\n\nPcs.ResourceAgentParameter = Ember.Object.extend({\n  name: \"\",\n  readable_name: Ember.computed.alias(\"name\"),\n  form_name: function() {\n    var name = \"_res_param\";\n    var val = this.get(\"value\");\n    name += ((!val || val == \"\") ? \"empty_\" : \"ne_\");\n    return name + this.get(\"name\");\n  }.property(\"name\", \"value\"),\n  type: \"string\",\n  value: null,\n  cur_val: Ember.computed.oneWay(\"value\"),\n  required: false,\n  advanced: false,\n  longdesc: \"\",\n  longdesc_html: function() {\n    return nl2br(htmlEncode(this.get(\"longdesc\")));\n  }.property(\"longdesc\"),\n  shortdesc: \"\",\n  \"default\": null,\n  description: function() {\n    var shortdesc = nl2br(htmlEncode(this.get(\"shortdesc\")));\n    var longdesc = nl2br(htmlEncode(this.get(\"longdesc\")));\n    if (longdesc == shortdesc) longdesc = \"\";\n    var def_val = this.get(\"default\");\n    def_val = nl2br(htmlEncode((def_val) ? def_val : \"\"));\n    var desc = [];\n    if (shortdesc) desc.push(shortdesc);\n    if (longdesc) desc.push(longdesc);\n    if (def_val) desc.push(\"Default value: \" + def_val);\n    return desc.join(\"<br /><br />\");\n  }.property(\"longdesc\", \"shortdesc\", \"default\")\n});\n\nPcs.ResourceAgent = Ember.Object.extend({\n  name: \"\",\n  longdesc: \"\",\n  longdesc_html: function() {\n    return nl2br(htmlEncode(this.get(\"longdesc\")));\n  }.property(\"longdesc\"),\n  shortdesc: \"\",\n  parameters: [],\n  required_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (arg.get(\"required\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  optional_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (!arg.get(\"required\") && !arg.get(\"advanced\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  advanced_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (!arg.get(\"required\") && arg.get(\"advanced\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  get_parameter: function(name) {\n    var self = this;\n    var res = null;\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (arg && arg.get(\"name\") == name) {\n        res = arg;\n        return false; // break\n      }\n    });\n    return res;\n  },\n  init: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      args.pushObject(Pcs.ResourceAgentParameter.create(arg));\n    });\n    self.set(\"parameters\", Ember.copy(args));\n  }\n});\n\nPcs.Router.map(function() {\n  this.route(\"Configuration\", { path: \"configure\"});\n\n  this.resource(\"ACLs\", {path: \"acls/:aclrole_id\"}, function () {\n    this.route(\"new\");\n  });\n  this.route(\"ACLs\", {path: \"acls\"});\n\n  this.resource(\"Fence Devices\", {path: \"fencedevices/:stonith_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Fence Devices\", { path: \"fencedevices\"});\n\n  this.resource(\"Resources\", {path: \"resources/:resource_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Resources\", { path: \"resources\"});\n\n  this.resource(\"Nodes\", {path: \"nodes/:node_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Nodes\", { path: \"nodes\"});\n\n//  this.resource(\"Resource\", {path: 'resources/:resource_id'});\n  this.route(\"Manage\", {path: \"manage\"});\n  this.route(\"Wizards\", {path: \"wizards\"});\n  this.route(\"Default Route\", { path: \"*x\" });\n});\n\nPcs.ManageRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"MANAGE\");\n  }\n});\n\nPcs.WizardsRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"WIZARDS\");\n  }\n});\n\nPcs.IndexRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (\n      window.location.pathname == \"/manage\"\n      ||\n      window.location.pathname == \"/manage/\"\n    ) {\n      select_menu(\"MANAGE\");\n    }\n    else if (\n      window.location.pathname == \"/permissions\"\n      ||\n      window.location.pathname == \"/permissions/\"\n    ) {\n      select_menu(\"PERMISSIONS\");\n      Ember.run.scheduleOnce('afterRender', this, permissions_load_all);\n    }\n    else {\n      select_menu(\"NODES\");\n    }\n  }\n});\n\nPcs.DefaultRouteRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (window.location.pathname.substring(0,7) == \"/manage\")\n      select_menu(\"MANAGE\");\n    else\n      select_menu(\"NODES\");\n  }\n});\n\nPcs.FenceDevicesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"FENCE DEVICES\");\n  },\n  model: function(params) {\n    Pcs.resourcesContainer.set('fence_id_to_load', params.stonith_id);\n    return params.stonith_id;\n  }\n});\n\nPcs.NodesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"NODES\");\n  },\n  model: function(params) {\n    Pcs.opening_node = params.node_id;\n    return null;\n  }\n});\n\nPcs.ACLsRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"ACLS\");\n  },\n  model: function(params) {\n    Pcs.opening_aclrole = params.aclrole_id;\n    return null;\n  }\n});\n\nPcs.ConfigurationRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"CONFIGURE\");\n  }\n});\n\nPcs.ResourcesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (model) {\n      select_menu(\"RESOURCES\",model.name);\n    } else {\n      select_menu(\"RESOURCES\");\n    }\n  },\n  model: function(params) {\n    Pcs.resourcesContainer.set('resource_id_to_load', params.resource_id);\n    return params.resource_id;\n  }\n});\n\nPcs.Setting = Ember.Object.extend({\n  name: null,\n  readable_name: null,\n  form_name: function() {\n    return \"config[\" + this.get(\"name\") + \"]\";\n  }.property(\"name\"),\n  value: null,\n  cur_val: Ember.computed.oneWay('value'),\n  type: null,\n  source: \"\",\n  \"default\": null,\n  advanced: false,\n  longdesc: \"\",\n  shortdesc: \"\",\n  description: function() {\n    var self = this;\n    var desc = $(\"<div>\").text(self.get(\"shortdesc\")).html();\n    if (self.get(\"longdesc\")) {\n      desc += \"<br><br>\";\n      desc += $(\"<div>\").text(self.get(\"longdesc\")).html();\n    }\n    desc += \"<br><br>\";\n    desc += $(\"<div>\").text(\"Default value: \" + self.get(\"default\")).html();\n    return desc;\n  }.property(\"longdesc\", \"shortdesc\"),\n  is_boolean: function() {\n    return (this.get(\"type\") == \"boolean\");\n  }.property(\"type\"),\n  is_enum: function() {\n    return (this.get(\"type\") == \"enum\");\n  }.property(\"type\"),\n  \"enum\": [],\n  enum_show: function() {\n    var self = this;\n    var out = [];\n    $.each(self.get(\"enum\"), function(_, val) {\n      out.push({\n        name: val,\n        value: val\n      });\n    });\n    return out;\n  }.property(\"enum.@each\")\n});\n\nPcs.Clusternode = Ember.Object.extend({\n  name: null,\n  id: Ember.computed.alias(\"name\"),\n  status: null,\n  status_unknown: function() {\n    return this.get('status') == \"unknown\";\n  }.property(\"status\"),\n  status_val: function() {\n    var status_val = get_status_value(this.get('status'));\n    if (this.get('warning_list').length)\n      status_val = get_status_value(\"warning\");\n    if (this.get('error_list').length)\n      status_val = get_status_value(\"error\");\n    if ((get_status_value(this.get('status')) - status_val) < 0) {\n      return get_status_value(this.get('status'));\n    } else {\n      return status_val;\n    }\n  }.property('status', 'error_list.@each.message', 'warning_list.@each.message'),\n  status_style: function() {\n    var color = get_status_color(this.get(\"status_val\"));\n    return \"color: \" + color + ((color != \"green\")? \"; font-weight: bold;\" : \"\");\n  }.property(\"status_val\"),\n  status_class: function() {\n    var show = ((Pcs.clusterController.get(\"show_all_nodes\"))? \"\" : \"hidden \");\n    return (\n      (this.get(\"status_val\") == get_status_value(\"ok\") || this.status == \"standby\" ||\n      this.status == \"maintenance\")\n        ? show + \"default-hidden\" : \"\"\n    );\n  }.property(\"status_val\"),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(this.get(\"status_val\"));\n    return \"<div style=\\\"float:left;margin-right:6px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status_val\"),\n  error_list: [],\n  warning_list: [],\n  tooltip: function() {\n    var self = this;\n    var out = \"\";\n    if (self.error_list && self.error_list.length > 0) {\n      out += \"<span style='color: red;  font-weight: bold;'>ERRORS:</span><br>\\n\";\n      out += get_formated_html_list(self.error_list);\n    }\n    if (self.warning_list && self.warning_list.length > 0) {\n      out += \"<span style='color: orange;  font-weight: bold;'>WARNINGS:</span><br>\\n\";\n      out += get_formated_html_list(self.warning_list);\n    }\n    return out;\n  }.property(\"error_list\", \"warning_list\"),\n  quorum: null,\n  quorum_show: function() {\n    if (this.status == \"unknown\" || this.status == \"offline\" || this.get('quorum') === null) {\n      return '<span style=\"color: orange; font-weight: bold;\">unknown</span>';\n    } else if (this.quorum) {\n      return '<span style=\"color: green;\">YES</span>';\n    } else {\n      return '<span style=\"color: red; font-weight: bold;\">NO</span>';\n    }\n  }.property(\"status\", \"quorum\"),\n  cur_node: false,\n  checked: false,\n  resources_running: [],\n  url: function() { return \"window.location='/nodes/\" + this.get(\"name\")+\"'\"\n  }.property(),\n  trclass: function(){\n    if (this.cur_node == true)\n      return \"node_selected\";\n  }.property(\"cur_node\"),\n  onmouseover: function(){\n    if (this.cur_node == true)\n      return \"\"\n    else\n      return \"hover_over(this);\"\n  }.property(\"cur_node\"),\n  onmouseout: function(){\n    if (this.cur_node == true)\n      return \"\"\n    else\n      return \"hover_out(this);\"\n  }.property(\"cur_node\"),\n  showArrow: function(){\n    if (this.cur_node != true)\n      return \"display:none;\"\n    else\n      return \"\"\n  }.property(\"cur_node\"),\n  node_name_style: function() {\n    if (this.up && !this.get('pacemaker_maintenance')) {\n      return \"\";\n    } else {\n      if (this.get(\"pacemaker_standby\") || this.get(\"pacemaker_maintenance\"))\n        return \"color: #ff6600\";\n      else\n        return \"color:red\";\n    }\n  }.property(\"up\",\"pacemaker_standby\",\"pacemaker_maintenance\"),\n  pacemaker_standby: null,\n  pacemaker_maintenance: Ember.computed.alias('is_in_maintenance'),\n  corosync_enabled: null,\n  pacemaker_enabled: null,\n  pcsd_enabled: null,\n  standby_style: function () {\n    if (this.pacemaker_standby)\n      return \"display: none;\";\n    else\n      return \"\";\n  }.property(\"pacemaker_standby\"),\n  unstandby_style: function() {\n    if (this.pacemaker_standby)\n      return \"\";\n    else\n      return \"display: none;\";\n  }.property(\"pacemaker_standby\"),\n  corosync_startup: function() {\n    if (this.corosync_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"corosync_enabled\"),\n  pacemaker_startup: function() {\n    if (this.pacemaker_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"pacemaker_enabled\"),\n  pcsd_startup: function() {\n    if (this.pcsd_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"pcsd_enabled\"),\n  location_constraints: null,\n  node_attrs: [],\n  utilization: [],\n  is_in_maintenance: function() {\n    var self = this;\n    var result = false;\n    $.each(self.get('node_attrs'), function(_, attr) {\n      if (attr[\"name\"] == \"maintenance\") {\n        result = is_cib_true(attr[\"value\"]);\n        return false; // break foreach loop\n      }\n    });\n    return result;\n  }.property('node_attrs'),\n  fence_levels: [],\n  pcsd: null,\n  corosync_daemon: null,\n  pacemaker_daemon: null,\n  services: [],\n  sbd_config: null,\n  sbd_status: function() {\n    if (this.get(\"services\") && this.get(\"services\")[\"sbd\"]) {\n      return this.get(\"services\")[\"sbd\"];\n    } else {\n      return {\n        installed: null,\n        enabled: null,\n        running: null\n      };\n    }\n  }.property(\"services\"),\n  is_sbd_enabled: function() {\n    return this.get(\"sbd_status\").enabled;\n  }.property(\"sbd_status\"),\n  is_sbd_running: function() {\n    return this.get(\"sbd_status\").running;\n  }.property(\"sbd_status\"),\n  is_sbd_installed: function() {\n    return this.get(\"sbd_status\").installed;\n  }.property(\"sbd_status\"),\n  sbd_status_str: function() {\n    var running = 'Stopped';\n    var status_class = 'status-offline';\n    if (this.get(\"is_sbd_running\") == null) {\n      running = 'Unknown';\n      status_class = 'status-unknown';\n    } else if (this.get(\"is_sbd_running\")) {\n      status_class = 'status';\n      running = 'Running';\n    }\n    var starting = 'Disabled';\n    if (this.get(\"is_sbd_enabled\") == null) {\n      starting = 'Unknown';\n    } else if (this.get(\"is_sbd_enabled\")) {\n      starting = 'Enabled';\n    }\n    return '<span id=\"sbd_status\" style=\"float:left\" class=\"' + status_class\n      + '\">' + running + ' (' + starting + ')</span>';\n  }.property(\"is_sbd_enabled\", \"is_sbd_enabled\"),\n  sbd_watchdog: function() {\n    if (this.get(\"sbd_config\") && this.get(\"sbd_config\")[\"SBD_WATCHDOG_DEV\"]) {\n      return this.get(\"sbd_config\")[\"SBD_WATCHDOG_DEV\"];\n    } else {\n      return \"<unkown>\";\n    }\n  }.property(\"sbd_config\")\n});\n\nPcs.Aclrole = Ember.Object.extend({\n  name: null,\n  cur_role: false,\n  checked: false,\n  description: \"\",\n  user_list: null,\n  group_list: null,\n  trclass: function() {\n    return this.cur_role ? \"node_selected\" : \"\";\n  }.property(\"cur_role\"),\n  onmouseover: function() {\n    return this.cur_role ? \"\" : \"hover_over(this);\"\n  }.property(\"cur_role\"),\n  onmouseout: function() {\n    return this.cur_role ? \"\" : \"hover_out(this);\"\n  }.property(\"cur_role\"),\n  showArrow: function(){\n    return this.cur_role ? \"\" : \"display:none\";\n  }.property(\"cur_role\"),\n});\n\nPcs.Cluster = Ember.Object.extend({\n  name: null,\n  url_link: function(){return get_cluster_remote_url(this.name) + \"main\";}.property(\"name\"),\n  input_name: function(){return \"clusterid-\" + this.name;}.property(\"name\"),\n  div_id: function(){return \"cluster_info_\" + this.name}.property(\"name\"),\n  status: \"unknown\",\n  status_unknown: function() {\n    return this.status == \"unknown\";\n  }.property(\"status\"),\n  forbidden: function() {\n    var out = false;\n    $.each(this.get(\"error_list\"), function(key, value) {\n      if (\"forbidden\" == value[\"type\"]) {\n        out = true;\n      }\n    });\n    return out;\n  }.property(\"error_list\"),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(get_status_value(this.get('status')));\n    return \"<div style=\\\"float:left;margin-right:6px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status\"),\n  quorum_show: function() {\n    if (this.get('status') == \"unknown\") {\n      return \"<span style='color:orange'>(quorate unknown)</span>\"\n    } else if (!this.get('quorate')) {\n      return \"<span style='color: red'>(doesn't have quorum)</span>\"\n    } else {\n      return \"\"\n    }\n  }.property(\"status\", \"quorate\"),\n  nodes: [],\n  nodes_failed: 0,\n  resource_list: [],\n  resources_failed: 0,\n  fence_list: [],\n  fence_failed: 0,\n  error_list: [],\n  warning_list: [],\n  need_reauth: false,\n  quorate: false,\n\n  get_num_of_failed: function(type) {\n    var num = 0;\n    $.each(this.get(type), function(key, value) {\n      if (value.get(\"status_val\") < get_status_value(\"ok\") &&\n        [\n          \"unmanaged\", \"disabled\", \"standby\", \"maintenance\"\n        ].indexOf(value.status) == -1\n      ) {\n        num++;\n      }\n    });\n    return num;\n  },\n\n  status_sort: function(a,b) {\n    if (a.get(\"status_val\") == b.get(\"status_val\"))\n      return ((a.status == b.status) ? a.get('name').localeCompare(b.get('name')) : ((a.status > b.status) ? 1 : -1));\n    return status_comparator(a.status, b.status)\n  },\n\n  add_resources: function(data) {\n    var self = this;\n    var resources = [];\n    var fence = [];\n    var resource_obj;\n    $.each(data, function (index, resource) {\n      switch (resource[\"class_type\"]) {\n        case \"primitive\":\n          resource_obj = Pcs.PrimitiveObj.create(resource);\n          break;\n        case \"group\":\n          resource_obj = Pcs.GroupObj.create(resource);\n          break;\n        case \"clone\":\n          resource_obj = Pcs.CloneObj.create(resource);\n          break;\n        case \"master\":\n          resource_obj = Pcs.MasterSlaveObj.create(resource);\n          break;\n      }\n\n      var url_link = get_cluster_remote_url(self.get('name')) + \"main#/\" +\n        (resource_obj.get('stonith') ? \"fencedevices/\" : \"resources/\") +\n        resource_obj.get('id');\n      resource_obj.set('url_link', url_link);\n\n      resource_obj.set('warning_list', resource_obj.get_full_warning_list());\n      resource_obj.set('error_list', resource_obj.get_full_error_list());\n\n      if (resource_obj.stonith) {\n        fence.pushObject(resource_obj);\n      } else {\n        resources.pushObject(resource_obj);\n      }\n    });\n    resources.sort(self.status_sort);\n    fence.sort(self.status_sort);\n    self.set('fence_list', fence);\n    self.set('resource_list', resources);\n  },\n\n  add_nodes: function(data, node_attrs) {\n    var self = this;\n    self.set(\"need_reauth\", false);\n    var nodes = [];\n    var node;\n    $.each(data, function(key, val) {\n      if (val[\"warning_list\"]) {\n        $.each(val[\"warning_list\"], function (key, value) {\n          if (self.get('need_reauth'))\n            return false;\n          if (typeof(value.type) !== 'undefined' && value.type == \"nodes_not_authorized\") {\n            self.set(\"need_reauth\", true);\n          }\n        });\n      }\n\n      var attrs = [];\n      if (node_attrs && val[\"name\"] in node_attrs) {\n        attrs = node_attrs[val[\"name\"]];\n      }\n\n      node = Pcs.Clusternode.create({\n        name: val[\"name\"],\n        url_link: get_cluster_remote_url(self.name) + \"main#/nodes/\" + val[\"name\"],\n        status: val[\"status\"],\n        quorum: val[\"quorum\"],\n        error_list: val[\"error_list\"],\n        warning_list: val[\"warning_list\"]\n      });\n      node.set(\"node_attrs\", attrs);\n      if (node.get(\"is_in_maintenance\") && node.get('status_val') > get_status_value(\"maintenance\")) {\n        node.set(\"status\", \"maintenance\");\n      }\n      nodes.push(node);\n    });\n    nodes.sort(self.status_sort);\n    self.set(\"nodes\", nodes);\n  }\n});\n\nPcs.clusterController = Ember.Object.create({\n  cluster_list: Ember.ArrayController.create({\n    content: Ember.A(),\n    sortProperties: ['name'],\n    sortAscending: true\n  }),\n  cur_cluster: null,\n  show_all_nodes: false,\n  show_all_resources: false,\n  show_all_fence: false,\n  num_ok: 0,\n  num_error: 0,\n  num_warning: 0,\n  num_unknown: 0,\n\n  update_cur_cluster: function(cluster_name) {\n    var self = this;\n    $(\"#clusters_list div.arrow\").hide();\n    var selected_cluster = null;\n\n    $.each(self.get('cluster_list').get('content'), function(key, cluster) {\n      if (cluster.get(\"name\") == cluster_name) {\n        selected_cluster = cluster;\n        return false;\n      }\n    });\n\n    self.set('cur_cluster', selected_cluster);\n    if (selected_cluster) {\n      Ember.run.next(function() {\n        $(\"#clusters_list tr[nodeID=\" + cluster_name + \"] div.arrow\").show();\n        correct_visibility_dashboard(self.get('cur_cluster'));\n      });\n    }\n  },\n\n  update: function(data) {\n    var self = this;\n    var clusters = data[\"cluster_list\"];\n    var cluster_name_list = [];\n    self.set(\"num_ok\", 0);\n    self.set(\"num_error\", 0);\n    self.set(\"num_warning\", 0);\n    self.set(\"num_unknown\", 0);\n\n    $.each(clusters, function(key, value) {\n      cluster_name_list.push(value[\"cluster_name\"]);\n      var found = false;\n      var cluster = null;\n\n      $.each(self.get('cluster_list').get('content'), function(key, pre_existing_cluster) {\n        if (pre_existing_cluster && pre_existing_cluster.get('name') == value[\"cluster_name\"]) {\n          found = true;\n          cluster = pre_existing_cluster;\n          cluster.set(\"status\", value[\"status\"]);\n          cluster.set(\"quorate\",value[\"quorate\"]);\n          cluster.set(\"error_list\",value[\"error_list\"]);\n          cluster.set(\"warning_list\",value[\"warning_list\"]);\n        }\n      });\n\n      if (!found) {\n        cluster = Pcs.Cluster.create({\n          name: value[\"cluster_name\"],\n          status: value[\"status\"],\n          quorate: value[\"quorate\"],\n          error_list: value[\"error_list\"],\n          warning_list: value[\"warning_list\"]\n        });\n      }\n\n      cluster.add_nodes(value[\"node_list\"], value[\"node_attr\"]);\n      cluster.add_resources(value[\"resource_list\"]);\n      cluster.set(\"nodes_failed\", cluster.get_num_of_failed(\"nodes\"));\n      cluster.set(\"resources_failed\", cluster.get_num_of_failed(\"resource_list\"));\n      cluster.set(\"fence_failed\", cluster.get_num_of_failed(\"fence_list\"));\n\n      if (cluster.get('status') == \"ok\") {\n        $.each(cluster.get('fence_list').concat(cluster.get('resource_list')), function(index, res) {\n          if (res.get('warning_list').length > 0) {\n            cluster.set(\"status\", \"warning\");\n            return false;\n          }\n        });\n      }\n\n      var nodes_to_auth = [];\n      $.each(cluster.get('warning_list'), function(key, val){\n        if (val.hasOwnProperty(\"type\") && val.type == \"nodes_not_authorized\"){\n          nodes_to_auth = nodes_to_auth.concat(val['node_list']);\n        }\n      });\n      nodes_to_auth = $.unique(nodes_to_auth);\n\n      if (cluster.get('need_reauth') || nodes_to_auth.length > 0) {\n        cluster.get('warning_list').pushObject({\n          message: \"There are few authentication problems. To fix them, click <a href='#' onclick='auth_nodes_dialog(\" + JSON.stringify(nodes_to_auth) + \", null, function() {fix_auth_of_cluster();})'>here</a>.\",\n          type: \"nodes_not_authorized\",\n          node_list: self.nodes_to_auth\n        });\n      }\n\n      if (!found) {\n        self.get('cluster_list').pushObject(cluster);\n      }\n\n      if (cluster.get_num_of_failed(\"nodes\") == cluster.nodes.length) {\n        if (cluster.get('status') != \"unknown\")\n          cluster.get('warning_list').pushObject({\n            message: \"Cluster is offline\"\n          });\n\n        cluster.set(\"status\", \"unknown\");\n      }\n\n      switch (get_status_value(cluster.get('status'))) {\n        case get_status_value(\"ok\"):\n          self.incrementProperty('num_ok');\n          break;\n        case get_status_value(\"error\"):\n          self.incrementProperty('num_error');\n          break;\n        case get_status_value(\"warning\"):\n          self.incrementProperty('num_warning');\n          break;\n        default:\n          self.incrementProperty('num_unknown');\n          break;\n      }\n    });\n\n    var to_remove = [];\n    $.each(self.get('cluster_list').get('content'), function(key,val) {\n      if (cluster_name_list.indexOf(val.get('name')) == -1) {\n        to_remove.pushObject(val);\n      }\n    });\n\n    $.each(to_remove, function(index, val) {\n      self.get('cluster_list').removeObject(val);\n    });\n  }\n});\n\nPcs.aclsController = Ember.ArrayController.createWithMixins({\n  content: [],\n  cur_role: null,\n  role_list: function() {\n    if (this.get(\"roles\"))\n      return Object.keys(this.get(\"roles\"));\n    return [];\n  }.property(\"roles\"),\n  user_list: function() {\n    if (this.get(\"users\"))\n      return Object.keys(this.get(\"users\"));\n    return [];\n  }.property(\"users\"),\n  group_list: function() {\n    if (this.get(\"groups\"))\n      return Object.keys(this.get(\"groups\"));\n    return [];\n  }.property(\"groups\"),\n  load_role: function(role_row, dont_update_hash) {\n    load_row(role_row, this, 'cur_role', '#role_info_div');\n    if (!dont_update_hash) {\n      window.location.hash = \"/acls/\" + $(role_row).attr(\"nodeID\");\n    }\n  },\n  update: function(data) {\n    var self = this;\n    self.set('content',[]);\n    var my_groups = {}, my_users = {}, my_roles = {};\n    var cur_role_holder = \"\";\n    var cur_role_name = \"\";\n    if (data[\"acls\"]) {\n      if (data[\"acls\"][\"group\"]) {\n        $.each(data[\"acls\"][\"group\"], function (k2,v2) {\n          my_groups[k2] = v2;\n        });\n      }\n      if (data[\"acls\"][\"user\"]) {\n        $.each(data[\"acls\"][\"user\"], function (k2,v2) {\n          my_users[k2] = v2;\n        });\n      }\n      if (data[\"acls\"][\"role\"]) {\n        $.each(data[\"acls\"][\"role\"], function (k2,v2) {\n          my_roles[k2] = v2;\n        });\n      }\n    }\n    self.set('roles',my_roles);\n    self.set('users',my_users);\n    self.set('groups',my_groups);\n\n    cur_role_holder = self.cur_role ? self.cur_role.name : \"\";\n\n    $.each(my_roles, function(role_name, role_data) {\n      var found = false;\n      var role = null;\n      $.each(self.content, function(key, pre_existing_role) {\n        if(pre_existing_role && pre_existing_role.name == role_name) {\n          found = true;\n          role = pre_existing_role;\n          role.set(\"name\", role_name);\n          role.set(\"cur_role\", false);\n          role.set(\"description\", role_data[\"description\"]);\n        }\n      });\n      if (!found) {\n        role = Pcs.Aclrole.create({\n          name: role_name,\n          cur_role: false,\n          description: role_data[\"description\"],\n        });\n      }\n      if (role_data[\"permissions\"]) {\n        $.each(role_data[\"permissions\"], function(key, permission) {\n          var parsed = permission.match(/(\\S+)\\s+(\\S+)\\s+(.+)\\((.*)\\)/);\n          role[\"permissions\"] = role[\"permissions\"] || [];\n          role[\"permissions\"].push({\n            type: parsed[1],\n            xpath_id: parsed[2],\n            query_id: parsed[3],\n            permission_id: parsed[4],\n          });\n        });\n      }\n\n      if (cur_role_holder == \"\") {\n        cur_role_name = Pcs.opening_aclrole;\n      }\n      else {\n        cur_role_name = cur_role_holder;\n      }\n      if (role.name == cur_role_name) {\n        role.set(\"cur_role\", true);\n        self.set(\"cur_role\", role);\n      }\n\n      if (!found) {\n        self.pushObject(role);\n      }\n    });\n\n    if (self.content && self.content.length > 0 && self.cur_role == null) {\n      self.set(\"cur_role\", self.content[0]);\n      self.content[0].set(\"cur_role\", true);\n    }\n\n    $.each(my_users, function(user_name, role_list) {\n      $.each(role_list, function(key1, role_name) {\n        $.each(self.content, function(key2, existing_role) {\n          if (existing_role.name == role_name) {\n            if (!existing_role.user_list) {\n              existing_role.user_list = [user_name];\n            }\n            else if (existing_role.user_list.indexOf(user_name) == -1) {\n              existing_role.user_list.push(user_name);\n            }\n          }\n        });\n      });\n    });\n    $.each(my_groups, function(group_name, role_list) {\n      $.each(role_list, function(key1, role_name) {\n        $.each(self.content, function(key2, existing_role) {\n          if (existing_role.name == role_name) {\n            if (!existing_role.group_list) {\n              existing_role.group_list = [group_name];\n            }\n            else if (existing_role.group_list.indexOf(group_name) == -1) {\n              existing_role.group_list.push(group_name);\n            }\n          }\n        });\n      });\n    });\n  }\n});\n\nPcs.settingsController = Ember.Controller.create({\n  properties: [],\n  filtered: [],\n  show_advanced: false,\n  error: false,\n  filter: \"\",\n  update: function(properties_definition) {\n    var self = this;\n    var new_properties = [];\n    var property;\n    var value;\n    $.each(properties_definition, function(_, prop_def) {\n      property = Pcs.Setting.create(prop_def);\n      value = property.get(\"value\");\n      if (value) {\n        switch (property.get(\"type\")) {\n          case \"boolean\":\n            value = (is_cib_true(value)) ? \"true\" : \"false\";\n            break;\n          case \"enum\":\n            if (property.get(\"enum\").indexOf(value) == -1) {\n              property.get(\"enum\").push(value);\n            }\n        }\n        property.set(\"value\", value);\n      }\n      new_properties.pushObject(property);\n    });\n    // first basic and then advanced\n    self.set(\"properties\", new_properties.sort(function(a,b) {\n      if (!a.get(\"advanced\") && b.get(\"advanced\")) {\n        return -1;\n      } else if (a.get(\"advanced\") && !b.get(\"advanced\")) {\n        return 1;\n      } else {\n        return a.get('name').localeCompare(b.get('name'));\n      }\n    }));\n    self.set(\"error\", false);\n  }\n});\n\nPcs.settingsController.reopen({\n  filtered: function() {\n    var self = this;\n    var substr = self.get(\"filter\").toLowerCase();\n\n    var to_show = [];\n    $.each(self.get(\"properties\"), function(_, e) {\n      if (self.get(\"show_advanced\")) {\n        to_show.pushObject(e);\n      } else if (!e.get(\"advanced\")) {\n        to_show.pushObject(e);\n      }\n    });\n\n    if (!substr) {\n      return to_show;\n    }\n\n    var filtered = [];\n    $.each(to_show, function(_, e) {\n      if (e.get(\"name\").toLowerCase().includes(substr) || e.get(\"readable_name\").toLowerCase().includes(substr)) {\n        filtered.pushObject(e);\n      }\n    });\n    return filtered;\n  }.property(\"properties\", \"filter\", \"show_advanced\")\n});\n\nPcs.selectedNodeController = Ember.Object.createWithMixins({\n  node: null,\n  reset: function() {\n    if (Pcs.nodesController)\n      this.set('node', Pcs.nodesController.objectAt(0));\n  }\n});\n\nPcs.nodesController = Ember.ArrayController.createWithMixins({\n  content: [],\n  utilization_support: false,\n  cur_node: null,\n  cur_node_attr: function () {\n    var nc = this;\n    if (nc.get('cur_node')) {\n      return nc.get('cur_node').get('node_attrs');\n    }\n    return [];\n  }.property(\"cur_node\", \"content.@each.node_attrs\"),\n  cur_node_fence_levels: function () {\n    var ret_val = [];\n    var nc = this;\n    $.each(this.content, function(node, value) {\n      if (\"fence_levels\" in value && nc.cur_node && value[\"fence_levels\"]) {\n        if (nc.cur_node.name in value[\"fence_levels\"]) {\n          ret_val = ret_val.concat(value[\"fence_levels\"][nc.cur_node.name]);\n        }\n        return false;\n      }\n    });\n    return ret_val;\n  }.property(\"cur_node\", \"content.@each.fence_levels\"),\n  init: function(){\n    this._super();\n  },\n\n  load_node: function(node_row, dont_update_hash){\n    load_row(node_row, this, 'cur_node', '#node_info_div');\n    if (!dont_update_hash)\n      window.location.hash = \"/nodes/\" + $(node_row).attr(\"nodeID\");\n  },\n\n  get_node_name_list: function() {\n    var node_list = [];\n    $.each(this.content, function(_, node) {\n      node_list.push(node.name);\n    });\n    return node_list;\n  },\n\n  update: function(data){\n    var self = this;\n    var nodes = [];\n    var corosync_nodes_online = data[\"corosync_online\"];\n    var pacemaker_nodes_online = data[\"pacemaker_online\"];\n    var pacemaker_nodes_standby = data[\"pacemaker_standby\"];\n\n    var resources_on_nodes = {};\n    var lc_on_nodes = {};\n    $.each(data['node_list'], function(index, node) {\n      nodes.push(node.name);\n\n      resources_on_nodes[node.name] = [];\n      $.each(Pcs.resourcesContainer.get('resource_map'), function(resource_id, resource_obj) {\n        var nodes_running_on = resource_obj.get('nodes_running_on');\n        if (nodes_running_on) {\n          $.each(nodes_running_on, function(index, node_name) {\n            if (node.name == node_name) {\n              resources_on_nodes[node.name].push(resource_id);\n            }\n          });\n        }\n      });\n\n      lc_on_nodes[node.name] = [];\n      if (data[\"constraints\"] && data[\"constraints\"][\"rsc_location\"]) {\n        $.each(data[\"constraints\"][\"rsc_location\"], function(key, constraint) {\n          if (constraint[\"node\"] == node.name)\n            lc_on_nodes[node.name].push(constraint)\n        });\n      }\n    });\n\n    var nodes_checked = {};\n    var cur_node_holder = \"\";\n    if (self.cur_node)\n      cur_node_holder = self.cur_node.name;\n    $.each(self.content, function (key, value) {\n      if (value.checked)\n        nodes_checked[value.name] = true;\n    });\n\n    if (data[\"nodes_utilization\"]) {\n      self.set(\"utilization_support\", true);\n    } else {\n      self.set(\"utilization_support\", false);\n    }\n\n    var is_sbd_enabled = false;\n    var is_sbd_running = false;\n    var sbd = null;\n    Pcs.set(\"sbd_config\", null);\n    $.each(data['node_list'], function(_, node_obj) {\n      if (node_obj[\"services\"] && node_obj[\"services\"][\"sbd\"]) {\n        sbd = node_obj[\"services\"][\"sbd\"];\n        is_sbd_enabled = (is_sbd_enabled || sbd.enabled);\n        is_sbd_running = (is_sbd_running || sbd.running);\n      }\n\n      if (node_obj[\"sbd_config\"]) {\n        Pcs.set(\"sbd_config\", node_obj[\"sbd_config\"]);\n      }\n\n      var node_id = node_obj.name;\n      if ($.inArray(node_id, corosync_nodes_online) > -1) {\n        corosync_online = true;\n      } else {\n        corosync_online = false;\n      }\n\n      if ($.inArray(node_id, pacemaker_nodes_online) > -1) {\n        pacemaker_online = true;\n      } else {\n        pacemaker_online = false;\n      }\n\n      if ($.inArray(node_id, pacemaker_nodes_standby) > -1) {\n        pacemaker_standby = true;\n      } else {\n        pacemaker_standby = false;\n      }\n\n      if (node_obj[\"status\"] == 'unknown') {\n        pcsd_daemon = false\n      } else {\n        pcsd_daemon = true\n      }\n\n      if (node_obj[\"notauthorized\"] == \"true\" || node_obj[\"notoken\"] == true) {\n        authorized = false;\n      } else {\n        authorized = true;\n      }\n\n      if (node_obj[\"corosync\"] && node_obj[\"pacemaker\"] &&\n        pacemaker_online && corosync_online) {\n        up_status = true;\n      } else {\n        up_status = false;\n      }\n\n      var node_attr = [];\n      if (data[\"node_attr\"] && data[\"node_attr\"][node_id]) {\n        node_attr = data[\"node_attr\"][node_id];\n      }\n\n      var utilization = [];\n      if (data[\"nodes_utilization\"] && data[\"nodes_utilization\"][node_id]) {\n        utilization = data[\"nodes_utilization\"][node_id];\n      }\n\n      found = false;\n      var node = null;\n      $.each(self.content, function(key, pre_existing_node) {\n        if (pre_existing_node && pre_existing_node.name == node_id) {\n          node = pre_existing_node;\n          found = true;\n          node.set(\"authorized\",authorized);\n          node.set(\"up\",up_status);\n          node.set(\"pcsd\",pcsd_daemon && authorized);\n          node.set(\"corosync_daemon\", node_obj[\"corosync\"]);\n          node.set(\"corosync_enabled\", node_obj[\"corosync_enabled\"]);\n          node.set(\"pacemaker_daemon\", node_obj[\"pacemaker\"]);\n          node.set(\"pacemaker_enabled\", node_obj[\"pacemaker_enabled\"]);\n          node.set(\"pcsd_enabled\", node_obj[\"pcsd_enabled\"]);\n          node.set(\"corosync\", corosync_online);\n          node.set(\"pacemaker\", pacemaker_online);\n          node.set(\"pacemaker_standby\", pacemaker_standby);\n          node.set(\"cur_node\",false);\n          node.set(\"running_resources\", Pcs.getResourcesFromID($.unique(resources_on_nodes[node_id].sort().reverse())));\n          node.set(\"location_constraints\", lc_on_nodes[node_id].sort());\n          node.set(\"uptime\", node_obj[\"uptime\"]);\n          node.set(\"node_id\", node_obj[\"id\"]);\n          node.set(\"node_attrs\", node_attr);\n          node.set(\"fence_levels\", data[\"fence_levels\"]);\n          node.set(\"status\", node_obj[\"status\"]);\n          node.set(\"utilization\", utilization);\n          node.set(\"services\", node_obj[\"services\"]);\n          node.set(\"sbd_config\", node_obj[\"sbd_config\"]);\n        }\n      });\n\n      if (found == false) {\n        var node = Pcs.Clusternode.create({\n          name: node_id,\n          authorized:  authorized,\n          up: up_status,\n          pcsd: pcsd_daemon && authorized,\n          corosync_daemon: node_obj[\"corosync\"],\n          corosync_enabled: node_obj[\"corosync_enabled\"],\n          pacemaker_daemon: node_obj[\"pacemaker\"],\n          pacemaker_enabled: node_obj[\"pacemaker_enabled\"],\n          pcsd_enabled: node_obj[\"pcsd_enabled\"],\n          corosync: corosync_online,\n          pacemaker: pacemaker_online,\n          pacemaker_standby: pacemaker_standby,\n          cur_node: false,\n          running_resources: Pcs.getResourcesFromID($.unique(resources_on_nodes[node_id].sort().reverse())),\n          location_constraints: lc_on_nodes[node_id].sort(),\n          uptime: node_obj[\"uptime\"],\n          node_id: node_obj[\"id\"],\n          node_attrs: node_attr,\n          fence_levels: data[\"fence_levels\"],\n          status: node_obj[\"status\"],\n          utilization: utilization,\n          services: node_obj[\"services\"],\n          sbd_config: node_obj[\"sbd_config\"]\n        });\n      }\n      var pathname = window.location.pathname.split('/');\n\n      if (cur_node_holder == \"\") {\n        cur_node_name = Pcs.opening_node;\n      } else {\n        cur_node_name = cur_node_holder;\n      }\n      if (node.name == cur_node_name) {\n        node.set(\"cur_node\",true);\n        self.set(\"cur_node\", node);\n      }\n\n      if (nodes_checked[node.name])\n        node.set(\"checked\",true);\n\n      if (found == false)\n        self.pushObject(node);\n    });\n    if (self.content && self.content.length > 0 && self.cur_node == null) {\n      self.set(\"cur_node\", self.content[0]);\n      self.content[0].set(\"cur_node\",true);\n    }\n\n    Pcs.set(\"is_sbd_enabled\", is_sbd_enabled);\n    Pcs.set(\"is_sbd_running\", is_sbd_running);\n\n    nodesToRemove = [];\n    $.each(self.content, function (key, node) {\n      found = false;\n      $.each(nodes, function (k,v) {\n        if (v == node.name)\n          found = true;\n      });\n      if (!found) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    $.each(nodesToRemove, function(k,v) {\n      self.content.removeObject(v);\n    });\n    self.set('content', Ember.copy(self.get('content').sort(function(a,b){return a.get('name').localeCompare(b.get('name'))})));\n  }\n});\n\nfunction myUpdate() {\n  Pcs.update();\n//  window.setTimeout(myUpdate,4000);\n}\n\nPcs.set('updater', Pcs.Updater.create({\n  timeout: 20000,\n  update_function: Pcs._update,\n  update_target: Pcs\n}));\n\nfunction constraint_extend(){\n  var new_object = {}\n  for(var i in arguments){\n    var extension = arguments[i];\n    Object.keys(extension).forEach(function(key){\n      new_object[key] = extension[key];\n    });\n  }\n  return new_object;\n}\n\nfunction constraint_set_create_resource_keyed_map(constraint){\n  groups = {}\n  constraint.sets.forEach(function(resource_set){\n    resource_set.resources.forEach(function(resource_id){\n      groups[resource_id] = constraint\n    })\n  });\n  return groups;\n}\n\nfunction constraint_order_create_resource_keyed_map(constraint){\n  var groups = {};\n  groups[constraint[\"first\"]] = constraint_extend(constraint, {\n    \"other_rsc\": constraint[\"then\"],\n    \"before\":false\n  });\n  groups[constraint[\"then\"]] = constraint_extend(constraint, {\n    \"other_rsc\": constraint[\"first\"],\n    \"before\":true\n  });\n  return groups;\n}\n\nfunction constraint_colocation_create_resource_keyed_map(constraint){\n  var together = {}\n  if(constraint.score == \"INFINITY\" || constraint.score >= 0){\n    together.together = \"Together\";\n  }\n  if(constraint.score == \"-INFINITY\" || constraint.score < 0){\n    together.together = \"Apart\";\n  }\n\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint_extend(constraint, together, {\n    \"other_rsc\": constraint[\"with-rsc\"],\n    \"first\": true\n  });\n\n  groups[constraint[\"with-rsc\"]] = constraint_extend(constraint, together, {\n    \"other_rsc\": constraint[\"rsc\"],\n    \"first\": false\n  });\n  return groups;\n}\n\nfunction constraint_location_distribute_to_resource(constraint){\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint;\n  return groups;\n}\n\nfunction constraint_ticket_distribute_to_resource(constraint){\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint;\n  return groups;\n}\n\n/**\n  Return object with nested object on each attribute (\"with_sets\", \"plain\").\n  Nested object has related constraint list on each attribute (resource id).\n  Example: {\n    with_sets: {\"resA\": [{constraint}, ...], \"resB\": [{constraint}, ...]}\n    plain: {\"resA\": [{constraint}, ...]}\n  }\n\n  @param {array} constraint_list list of constraints to distribute\n  @param {object} group_distributors on attributes (\"with_sets\", \"plain\") are\n    distribution methods. If attribute undefined, constraint is not distributed\n*/\nfunction constraint_resort_part(constraint_list, group_distributors){\n  var constraint_groups = {with_sets: {}, plain: {}}\n\n  if( ! constraint_list){\n    return constraint_groups;\n  }\n\n  constraint_list.forEach(function(constraint){\n    var group_name = constraint.sets ? \"with_sets\" : \"plain\";\n    var group = constraint_groups[group_name];\n    var distribute = group_distributors[group_name];\n\n    if( ! distribute){\n      return;\n    }\n\n    var resource_constraint_map = distribute(constraint);\n\n    for(var resource_id in resource_constraint_map){\n      var extended_constraint = resource_constraint_map[resource_id];\n      group[resource_id] = group[resource_id] || [];\n      if(group[resource_id].indexOf(extended_constraint) == -1){\n        group[resource_id].push(extended_constraint);\n      }\n    }\n  });\n\n  return constraint_groups;\n}\n\nfunction constraint_resort(constraints){\n  if( ! constraints){\n    return {\n      location_constraints: {},\n      ordering_constraints: {},\n      ordering_set_constraints: {},\n      colocation_constraints: {},\n      colocation_set_constraints: {},\n    };\n  }\n\n  var orders = constraint_resort_part(constraints.rsc_order, {\n    plain: constraint_order_create_resource_keyed_map,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  var colocations = constraint_resort_part(constraints.rsc_colocation, {\n    plain: constraint_colocation_create_resource_keyed_map,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  var locations = constraint_resort_part(constraints.rsc_location, {\n    plain: constraint_location_distribute_to_resource,\n  });\n\n  var tickets = constraint_resort_part(constraints.rsc_ticket, {\n    plain: constraint_ticket_distribute_to_resource,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  return {\n    location_constraints: locations.plain,\n    ordering_constraints: orders.plain,\n    ordering_set_constraints: orders.with_sets,\n    ticket_constraints: tickets.plain,\n    ticket_set_constraints: tickets.with_sets,\n    colocation_constraints: colocations.plain,\n    colocation_set_constraints: colocations.with_sets,\n  };\n}\n", "var pcs_timeout = 30000;\nvar login_dialog_opened = false;\nvar ajax_queue = Array();\n\nfunction curResource() {\n  var obj = Pcs.resourcesContainer.get('cur_resource');\n  if (obj == null) {\n    return null;\n  }\n  return obj.get('id');\n}\n\nfunction curStonith() {\n  var obj = Pcs.resourcesContainer.get('cur_fence');\n  if (obj == null) {\n    return null;\n  }\n  return obj.get('id');\n}\n\nfunction configure_menu_show(item) {\n  $(\"#configure-\"+item).show();\n  $(\".configure-\"+item).addClass(\"selected\");\n}\n\nfunction menu_show(item,show) {\n  if (show) {\n    $(\"#\" + item + \"_menu\").addClass(\"active\");\n  } else {\n    $(\"#\" + item + \"_menu\").removeClass(\"active\");\n  }\n}\n\n// Changes the visible change when another menu is selected\n// If item is specified, we load that item as well\n// If initial is set to true, we load default (first item) on other pages\n// and load the default item on the specified page if item is set\nfunction select_menu(menu, item, initial) {\n  if (menu == \"NODES\") {\n    Pcs.set('cur_page',\"nodes\")\n    if (item)\n      Pcs.nodesController.load_node($('[nodeID='+item+']'));\n    menu_show(\"node\", true);\n  } else {\n    menu_show(\"node\", false);\n  }\n\n  if (menu == \"RESOURCES\") {\n    Pcs.set('cur_page',\"resources\");\n    menu_show(\"resource\", true);\n  } else {\n    menu_show(\"resource\", false);\n  }\n\n  if (menu == \"FENCE DEVICES\") {\n    Pcs.set('cur_page',\"stonith\");\n    menu_show(\"stonith\", true);\n  } else {\n    menu_show(\"stonith\", false);\n  }\n\n  if (menu == \"MANAGE\") {\n    Pcs.set('cur_page',\"manage\");\n    menu_show(\"cluster\", true);\n  } else {\n    menu_show(\"cluster\", false);\n  }\n\n  if (menu == \"PERMISSIONS\") {\n    Pcs.set('cur_page', \"permissions\");\n    menu_show(\"cluster\", true);\n  } else {\n    menu_show(\"cluster\", false);\n  }\n\n  if (menu == \"CONFIGURE\") {\n    Pcs.set('cur_page',\"configure\");\n    menu_show(\"configure\", true);\n  } else {\n    menu_show(\"configure\", false);\n  }\n\n  if (menu == \"ACLS\") {\n    Pcs.set('cur_page',\"acls\");\n    menu_show(\"acls\", true);\n  } else {\n    menu_show(\"acls\", false);\n  }\n\n  if (menu == \"WIZARDS\") {\n    Pcs.set('cur_page',\"wizards\");\n    menu_show(\"wizards\", true);\n  } else {\n    menu_show(\"wizards\", false);\n  }\n}\n\nfunction create_group() {\n  var resource_list = get_checked_ids_from_nodelist(\"resource_list\");\n  if (resource_list.length == 0) {\n    alert(\"You must select at least one resource to add to a group\");\n    return;\n  }\n  var not_primitives = resource_list.filter(function(resource_id) {\n    var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n    return !(resource_obj && resource_obj.get(\"is_primitive\"));\n  });\n  if (not_primitives.length != 0) {\n    alert(\"Members of group have to be primitive resources. These resources\" +\n      \" are not primitives: \" + not_primitives.join(\", \"));\n    return;\n  }\n  var order_el = $(\"#new_group_resource_list tbody\");\n  order_el.empty();\n  order_el.append(resource_list.map(function (item) {\n    return `<tr value=\"${item}\" class=\"cursor-move\"><td>${item}</td></tr>`;\n  }));\n  var order_obj = order_el.sortable();\n  order_el.disableSelection();\n  $(\"#add_group\").dialog({\n    title: 'Create Group',\n    width: 'auto',\n    modal: true,\n    resizable: false,\n    buttons: [\n      {\n        text: \"Cancel\",\n        click: function() {\n          $(this).dialog(\"close\");\n        }\n      },\n      {\n        text: \"Create Group\",\n        id: \"add_group_submit_btn\",\n        click: function() {\n          var dialog_obj = $(this);\n          var submit_btn_obj = dialog_obj.parent().find(\n            \"#add_group_submit_btn\"\n          );\n          submit_btn_obj.button(\"option\", \"disabled\", true);\n\n          ajax_wrapper({\n            type: \"POST\",\n            url: get_cluster_remote_url() + \"add_group\",\n            data: {\n              resource_group: $(\n                '#add_group:visible input[name=resource_group]'\n              ).val(),\n              resources: order_obj.sortable(\n                \"toArray\", {attribute: \"value\"}\n              ).join(\" \")\n            },\n            success: function() {\n              submit_btn_obj.button(\"option\", \"disabled\", false);\n              Pcs.update();\n              dialog_obj.dialog(\"close\");\n            },\n            error: function (xhr, status, error) {\n              alert(\n                \"Error creating group \"\n                + ajax_simple_error(xhr, status, error)\n              );\n              submit_btn_obj.button(\"option\", \"disabled\", false);\n            }\n          });\n        }\n      }\n    ]\n  });\n}\n\nfunction add_node_dialog() {\n  var buttonOpts = [\n    {\n      text: \"Add Node\",\n      id: \"add_node_submit_btn\",\n      click: function() {\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", true);\n        checkAddingNode();\n      }\n    },\n    {\n      text: \"Cancel\",\n      click: function() {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  buttonOpts[\"Cancel\"] = function() {\n    $(this).dialog(\"close\");\n  };\n\n  // If you hit enter it triggers the first button: Add Node\n  $('#add_node').keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !$(\"#add_node_submit_btn\").button(\"option\", \"disabled\")) {\n        $(\"#add_node_submit_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  $('#add_node').dialog({\n    title: 'Add Node',\n    modal:true,\n    resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction checkAddingNode(){\n  var nodeName = $(\"#add_node\").children(\"form\").find(\"[name='new_nodename']\").val().trim();\n  if (nodeName == \"\") {\n    $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    return false;\n  }\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": nodeName},\n    timeout: pcs_timeout,\n    success: function (data) {\n      var mydata = jQuery.parseJSON(data);\n      if (mydata[nodeName] == \"Unable to authenticate\") {\n        auth_nodes_dialog([nodeName], function(){$(\"#add_node_submit_btn\").trigger(\"click\");});\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      } else if (mydata[nodeName] == \"Offline\") {\n        alert(\"Unable to contact node '\" + nodeName + \"'\");\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      } else {\n        create_node($(\"#add_node\").children(\"form\"));\n      }\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    }\n  });\n}\n\nfunction create_node(form) {\n  var dataString = $(form).serialize();\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_node_to_cluster\",\n    data: dataString,\n    success: function(returnValue) {\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      $('#add_node').dialog('close');\n      Pcs.update();\n    },\n    error: function(error) {\n      alert(error.responseText);\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    }\n  });\n}\n\n// If update is set to true we update the resource instead of create it\n// if stonith is set to true we update/create a stonith agent\nfunction create_resource(form, update, stonith) {\n  var data = {};\n  $($(form).serializeArray()).each(function(index, obj) {\n    data[obj.name] = obj.value;\n  });\n  data[\"resource_type\"] = data[\"resource_type\"].replace(\"::\", \":\");\n  var url = get_cluster_remote_url() + $(form).attr(\"action\");\n  var name;\n\n  if (stonith) {\n    name = \"fence device\";\n    data[\"resource_type\"] = data[\"resource_type\"].replace(\"stonith:\", \"\");\n  } else {\n    name = \"resource\";\n  }\n\n  ajax_wrapper({\n    type: \"POST\",\n    url: url,\n    data: data,\n    dataType: \"json\",\n    success: function(returnValue) {\n      $('input.apply_changes').show();\n      if (returnValue[\"error\"] == \"true\") {\n        alert(returnValue[\"stderr\"]);\n      } else {\n        Pcs.update();\n        if (!update) {\n          if (stonith)\n            $('#new_stonith_agent').dialog('close');\n          else\n            $('#new_resource_agent').dialog('close');\n        } else {\n          reload_current_resource();\n        }\n      }\n    },\n    error: function(xhr, status, error) {\n      if (update) {\n        alert(\n          \"Unable to update \" + name + \" \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      else {\n        alert(\n          \"Unable to add \" + name + \" \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      $('input.apply_changes').show();\n    }\n  });\n}\n\n// Don't allow spaces in input fields\nfunction disable_spaces(item) {\n  myitem = item;\n  $(item).find(\"input\").on(\"keydown\", function (e) {\n    return e.which !== 32;\n  });\n}\n\nfunction load_resource_form(agent_name, stonith) {\n  stonith = typeof stonith !== 'undefined' ? stonith : false;\n  if (!agent_name) {\n    return;\n  }\n  var prop_name = \"new_\" + (stonith ? \"fence\" : \"resource\") + \"_agent_metadata\";\n  get_resource_agent_metadata(agent_name, function (data) {\n      Pcs.resourcesContainer.set(prop_name, Pcs.ResourceAgent.create(data));\n  }, stonith);\n}\n\nfunction verify_remove(remove_func, forceable, checklist_id, dialog_id, label, ok_text, title, remove_id) {\n  var remove_id_list = new Array();\n  if (remove_id) {\n    remove_id_list = [remove_id];\n  }\n  else {\n    remove_id_list = get_checked_ids_from_nodelist(checklist_id);\n  }\n  if (remove_id_list.length < 1) {\n    alert(\"You must select at least one \" + label + \" to remove.\");\n    return;\n  }\n\n  var buttonOpts = [\n    {\n      text: ok_text,\n      id: \"verify_remove_submit_btn\",\n      click: function() {\n        if (remove_id_list.length < 1) {\n          return;\n        }\n        $(\"#verify_remove_submit_btn\").button(\"option\", \"disabled\", true);\n        if (forceable) {\n          force = $(\"#\" + dialog_id + \" :checked\").length > 0\n          remove_func(remove_id_list, force);\n        }\n        else {\n          remove_func(remove_id_list);\n        }\n      }\n    },\n    {\n      text: \"Cancel\",\n      id: \"verify_remove_cancel_btn\",\n      click: function() {\n        $(this).dialog(\"destroy\");\n        if (forceable) {\n          $(\"#\" + dialog_id + \" input[name=force]\").attr(\"checked\", false);\n        }\n      }\n    }\n  ];\n\n  var name_list = \"<ul>\";\n  $.each(remove_id_list, function(key, remid) {\n    name_list += \"<li>\" + remid + \"</li>\";\n  });\n  name_list += \"</ul>\";\n  $(\"#\" + dialog_id + \" .name_list\").html(name_list);\n  $(\"#\" + dialog_id).dialog({\n    title: title,\n    modal: true,\n    resizable: false,\n    buttons: buttonOpts\n  });\n}\n\nfunction verify_remove_clusters(cluster_id) {\n  verify_remove(\n    remove_cluster, false, \"cluster_list\", \"dialog_verify_remove_clusters\",\n    \"cluster\", \"Remove Cluster(s)\", \"Cluster Removal\", cluster_id\n  );\n}\n\nfunction verify_remove_nodes(node_id) {\n  verify_remove(\n    remove_nodes, false, \"node_list\", \"dialog_verify_remove_nodes\",\n    \"node\", \"Remove Node(s)\", \"Remove Node\", node_id\n  );\n}\n\nfunction verify_remove_resources(resource_id) {\n  verify_remove(\n    remove_resource, true, \"resource_list\", \"dialog_verify_remove_resources\",\n    \"resource\", \"Remove resource(s)\", \"Resurce Removal\", resource_id\n  );\n}\n\nfunction verify_remove_fence_devices(resource_id) {\n  verify_remove(\n    remove_resource, false, \"stonith_list\", \"dialog_verify_remove_resources\",\n    \"fence device\", \"Remove device(s)\", \"Fence Device Removal\", resource_id\n  );\n}\n\nfunction verify_remove_acl_roles(role_id) {\n  verify_remove(\n    remove_acl_roles, false, \"acls_roles_list\", \"dialog_verify_remove_acl_roles\",\n    \"ACL role\", \"Remove Role(s)\", \"Remove ACL Role\", role_id\n  );\n}\n\nfunction get_checked_ids_from_nodelist(nodelist_id) {\n  var ids = new Array()\n  $(\"#\" + nodelist_id + \" .node_list_check :checked\").each(function (index, element) {\n    if($(element).parent().parent().attr(\"nodeID\")) {\n      ids.push($(element).parent().parent().attr(\"nodeID\"));\n    }\n  });\n  return ids;\n}\n\nfunction local_node_update(node, data) {\n  node_data = data[node];\n\n  for (var n in data) {\n    if (data[n].pacemaker_online && (jQuery.inArray(n, data[n].pacemaker_online) != -1)) {\n      setNodeStatus(n, true);\n    } else {\n      setNodeStatus(n,false);\n    }\n  }\n}\n\nfunction disable_checkbox_clicks() {\n  $('.node_list_check input[type=checkbox]').click(function(e) {\n    e.stopPropagation();\n  });\n}\n\n// Set the status of a service\n// 0 = Running (green)\n// 1 = Stopped (red)\n// 2 = Unknown (gray)\nfunction setStatus(item, status, message) {\n  if (status == 0) {\n    item.removeClass();\n    item.addClass('status');\n  } else if (status == 1) {\n    item.removeClass();\n    item.addClass('status-offline');\n  } else if (status == 2) {\n    item.removeClass();\n    item.addClass('status-unknown');\n  }\n\n  if (typeof message !== 'undefined')\n    item.html(message)\n}\n\n// Set the node in the node list blue or red depending on\n// whether pacemaker is connected or not\nfunction setNodeStatus(node, running) {\n  if (running) {\n    $('.node_name:contains(\"'+node+'\")').css('color','');\n  } else {\n    $('.node_name:contains(\"'+node+'\")').css('color','red');\n  }\n}\n\n\nfunction fade_in_out(id) {\n  $(id).fadeTo(1000, 0.01, function() {\n    $(id).fadeTo(1000, 1);\n  });\n}\n\nfunction node_link_action(link_selector, url, label) {\n  var node = $.trim($(\"#node_info_header_title_name\").text());\n  fade_in_out(link_selector);\n  ajax_wrapper({\n    type: 'POST',\n    url: url,\n    data: {\"name\": node},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to \" + label + \" node '\" + node + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction setup_node_links() {\n  Ember.debug(\"Setup node links\");\n  $(\"#node_start\").click(function() {\n    node_link_action(\n      \"#node_start\", get_cluster_remote_url() + \"cluster_start\", \"start\"\n    );\n  });\n  $(\"#node_stop\").click(function() {\n    var node = $.trim($(\"#node_info_header_title_name\").text());\n    fade_in_out(\"#node_stop\");\n    node_stop(node, false);\n  });\n  $(\"#node_restart\").click(function() {\n    node_link_action(\n      \"#node_restart\", get_cluster_remote_url() + \"node_restart\", \"restart\"\n    );\n  });\n  $(\"#node_standby\").click(function() {\n    node_link_action(\n      \"#node_standby\", get_cluster_remote_url() + \"node_standby\", \"standby\"\n    );\n  });\n  $(\"#node_unstandby\").click(function() {\n    node_link_action(\n      \"#node_unstandby\",\n      get_cluster_remote_url() + \"node_unstandby\",\n      \"unstandby\"\n    );\n  });\n}\n\nfunction node_stop(node, force) {\n  var data = {};\n  data[\"name\"] = node;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'cluster_stop',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n    },\n    error: function(xhr, status, error) {\n      if ((status == \"timeout\") || ($.trim(error) == \"timeout\")) {\n        /*\n         We are not interested in timeout because:\n         - it can take minutes to stop a node (resources running on it have\n           to be stopped/moved and we do not need to wait for that)\n         - if pcs is not able to stop a node it returns an (forceable) error\n           immediatelly\n        */\n        return;\n      }\n      var message = \"Unable to stop node '\" + node + \"' \" + ajax_simple_error(\n        xhr, status, error\n      );\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          node_stop(node, true);\n        }\n      }\n    }\n  });\n}\n\nfunction enable_resource() {\n  fade_in_out(\"#resource_start_link\");\n  Pcs.resourcesContainer.enable_resource(curResource());\n}\n\nfunction disable_resource() {\n  fade_in_out(\"#resource_stop_link\");\n  Pcs.resourcesContainer.disable_resource(curResource());\n}\n\nfunction cleanup_resource() {\n  var resource = curResource();\n  if (resource == null) {\n    return;\n  }\n  fade_in_out(\"#resource_cleanup_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_cleanup',\n    data: {\"resource\": resource},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to cleanup resource '\" + resource + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction cleanup_stonith() {\n  var resource = curStonith();\n  if (resource == null) {\n    return;\n  }\n  fade_in_out(\"#stonith_cleanup_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_cleanup',\n    data: {\"resource\": resource},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to cleanup resource '\" + resource + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction checkExistingNode() {\n  var node = \"\";\n  $('input[name=\"node-name\"]').each(function(i,e) {\n    node = e.value;\n  });\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": node},\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      update_existing_cluster_dialog(mydata);\n\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction checkClusterNodes() {\n  var nodes = [];\n  $('input[name^=\"node-\"]').each(function(i,e) {\n    if (e.value != \"\") {\n      nodes.push(e.value)\n    }\n  });\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": nodes.join(\",\")},\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      ajax_wrapper({\n        type: 'GET',\n        url: '/manage/get_nodes_sw_versions',\n        data: {\"nodes\": nodes.join(\",\")},\n        timeout: pcs_timeout,\n        success: function(data) {\n          versions = jQuery.parseJSON(data);\n          update_create_cluster_dialog(mydata, versions);\n        },\n        error: function (XMLHttpRequest, textStatus, errorThrown) {\n          alert(\"ERROR: Unable to contact server\");\n        }\n      });\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction auth_nodes(dialog) {\n  $(\"#auth_failed_error_msg\").hide();\n  ajax_wrapper({\n    type: 'POST',\n    url: '/manage/auth_gui_against_nodes',\n    data: dialog.find(\"#auth_nodes_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      auth_nodes_dialog_update(dialog, mydata);\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction auth_nodes_dialog_update(dialog_obj, data) {\n  var unauth_nodes = [];\n  var node;\n  if (data['node_auth_error']) {\n    for (node in data['node_auth_error']) {\n      if (data['node_auth_error'][node] != 0) {\n        unauth_nodes.push(node);\n      }\n    }\n  }\n\n  var callback_one = dialog_obj.dialog(\"option\", \"callback_success_one_\");\n  var callback = dialog_obj.dialog(\"option\", \"callback_success_\");\n  if (unauth_nodes.length == 0) {\n    dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\n      \"option\", \"disabled\", false\n    );\n    dialog_obj.find(\"#auth_failed_error_msg\").hide();\n    dialog_obj.dialog(\"close\");\n    if (callback_one !== null)\n      callback_one();\n    if (callback !== null)\n      callback();\n    return unauth_nodes;\n  } else {\n    dialog_obj.find(\"#auth_failed_error_msg\").show();\n  }\n\n  if (unauth_nodes.length == 1) {\n    dialog_obj.find(\"#same_pass\").hide();\n    dialog_obj.find('#auth_nodes_list').find('input:password').each(\n      function(){$(this).show()}\n    );\n  }\n\n  var one_success = false;\n  dialog_obj.find(\"input:password[name$=-pass]\").each(function() {\n    node = $(this).attr(\"name\");\n    node = node.substring(0, node.length - 5);\n    if (unauth_nodes.indexOf(node) == -1) {\n      $(this).parent().parent().remove();\n      one_success = true;\n    } else {\n      $(this).parent().parent().css(\"color\", \"red\");\n    }\n  });\n\n  if (one_success && callback_one !== null)\n    callback_one();\n\n  dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\n    \"option\", \"disabled\", false\n  );\n  return unauth_nodes;\n}\n\nfunction auth_nodes_dialog(unauth_nodes, callback_success, callback_success_one) {\n  callback_success = typeof callback_success !== 'undefined' ? callback_success : null;\n  callback_success_one = typeof callback_success_one !== 'undefined' ? callback_success_one : null;\n\n  var buttonsOpts = [\n    {\n      text: \"Authenticate\",\n      id: \"authenticate_submit_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#authenticate_submit_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        dialog.find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n        auth_nodes(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n  var dialog_obj = $(\"#auth_nodes\").dialog({title: 'Authentification of nodes',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts,\n    callback_success_: callback_success,\n    callback_success_one_: callback_success_one\n  });\n\n  dialog_obj.find(\"#auth_failed_error_msg\").hide();\n\n  // If you hit enter it triggers the submit button\n  dialog_obj.keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\"option\", \"disabled\")) {\n      dialog_obj.parent().find(\"#authenticate_submit_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  if (unauth_nodes.length == 0) {\n    if (callback_success !== null) {\n      callback_success();\n    }\n    return;\n  }\n\n  if (unauth_nodes.length == 1) {\n    dialog_obj.find(\"#same_pass\").hide();\n  } else {\n    dialog_obj.find(\"#same_pass\").show();\n    dialog_obj.find(\"input:checkbox[name=all]\").prop(\"checked\", false);\n    dialog_obj.find(\"#pass_for_all\").val(\"\");\n    dialog_obj.find(\"#pass_for_all\").hide();\n  }\n\n  dialog_obj.find('#auth_nodes_list').empty();\n  unauth_nodes.forEach(function(node) {\n    dialog_obj.find('#auth_nodes_list').append(\"\\t\\t\\t<tr><td>\" + node + '</td><td><input type=\"password\" name=\"' + node + '-pass\"></td></tr>\\n');\n  });\n\n}\n\nfunction add_existing_dialog() {\n  var buttonOpts = [\n    {\n      text: \"Add Existing\",\n      id: \"add_existing_submit_btn\",\n      click: function () {\n        $(\"#add_existing_cluster\").find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n        $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", true);\n        checkExistingNode();\n      }\n    },\n    {\n      text: \"Cancel\",\n      click: function() {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  // If you hit enter it triggers the first button: Add Existing\n  $('#add_existing_cluster').keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !$(\"#add_existing_submit_btn\").button(\"option\", \"disabled\")) {\n      $(this).parent().find(\"button:eq(1)\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  $(\"#add_existing_cluster\").dialog({title: 'Add Existing Cluster',\n    modal: false, resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction update_existing_cluster_dialog(data) {\n  for (var i in data) {\n    if (data[i] == \"Online\") {\n      ajax_wrapper({\n        type: \"POST\",\n        url: \"/manage/existingcluster\",\n        timeout: pcs_timeout,\n        data: $('#add_existing_cluster_form').serialize(),\n        success: function(data) {\n          if (data) {\n            alert(\"Operation Successful!\\n\\nWarnings:\\n\" + data);\n          }\n          $(\"#add_existing_cluster.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n          Pcs.update();\n        },\n        error: function (xhr, status, error) {\n          alert(xhr.responseText);\n          $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n        }\n      });\n      return;\n    } else if (data[i] == \"Unable to authenticate\") {\n      auth_nodes_dialog([i], function() {$(\"#add_existing_submit_btn\").trigger(\"click\");});\n      $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n      return;\n    }\n    break;\n  }\n  if (data.length > 0) {\n    $('#add_existing_cluster_error_msg').html(i + \": \" + data[i]);\n    $('#add_existing_cluster_error_msg').show();\n  }\n  $('#unable_to_connect_error_msg_ae').show();\n  $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n}\n\nfunction update_create_cluster_dialog(nodes, version_info) {\n  var keys = [];\n  for (var i in nodes) {\n    if (nodes.hasOwnProperty(i)) {\n      keys.push(i);\n    }\n  }\n\n  var cant_connect_nodes = 0;\n  var cant_auth_nodes = [];\n  var good_nodes = 0;\n  var addr1_match = 1;\n  var ring0_nodes = [];\n  var ring1_nodes = [];\n  var cman_nodes = [];\n  var noncman_nodes = [];\n  var rhel_versions = [];\n  var versions_check_ok = 1;\n  var cluster_name = $('input[name^=\"clustername\"]').val()\n  var transport = $(\"#create_new_cluster select[name='config-transport']\").val()\n\n    $('#create_new_cluster input[name^=\"node-\"]').each(function() {\n      if ($(this).val() == \"\") {\n        $(this).parent().prev().css(\"background-color\", \"\");\n        return;\n      }\n      for (var i = 0; i < keys.length; i++) {\n        if ($(this).val() == keys[i]) {\n          if (nodes[keys[i]] != \"Online\") {\n            if (nodes[keys[i]] == \"Unable to authenticate\") {\n              cant_auth_nodes.push(keys[i]);\n            } else {\n              $(this).parent().prev().css(\"background-color\", \"red\");\n              cant_connect_nodes++;\n            }\n          } else {\n            $(this).parent().prev().css(\"background-color\", \"\");\n            good_nodes++;\n          }\n        }\n      }\n    });\n\n    if (cant_auth_nodes.length > 0) {\n      auth_nodes_dialog(cant_auth_nodes, function(){$(\"#create_cluster_submit_btn\").trigger(\"click\")});\n      $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n      return;\n    }\n\n  if (transport == \"udpu\") {\n    $('#create_new_cluster input[name^=\"node-\"]').each(function() {\n      if ($(this).val().trim() != \"\") {\n        ring0_nodes.push($(this).attr(\"name\"));\n      }\n    });\n    $('#create_new_cluster input[name^=\"ring1-node-\"]').each(function() {\n      if ($(this).val().trim() != \"\") {\n        ring1_nodes.push($(this).attr(\"name\").substr(\"ring1-\".length));\n      }\n    });\n    if (ring1_nodes.length > 0) {\n      if (ring0_nodes.length != ring1_nodes.length) {\n        addr1_match = 0\n      }\n      else {\n        for (var i = 0; i < ring0_nodes.length; i++) {\n          if (ring0_nodes[i] != ring1_nodes[i]) {\n            addr1_match = 0;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if(version_info) {\n    $.each(version_info, function(node, versions) {\n      if(! versions[\"pcs\"]) {\n        // we do not have valid info for this node\n        return;\n      }\n      if(versions[\"cman\"]) {\n        cman_nodes.push(node);\n      }\n      else {\n        noncman_nodes.push(node);\n      }\n      if(versions[\"rhel\"]) {\n        if($.inArray(versions[\"rhel\"].join(\".\"), rhel_versions) == -1) {\n          rhel_versions.push(versions[\"rhel\"].join(\".\"))\n        }\n      }\n    });\n  }\n\n  if (cant_connect_nodes != 0) {\n    $(\"#unable_to_connect_error_msg\").show();\n  } else {\n    $(\"#unable_to_connect_error_msg\").hide();\n  }\n\n  if (good_nodes == 0 && cant_connect_nodes == 0) {\n    $(\"#at_least_one_node_error_msg\").show();\n  } else {\n    $(\"#at_least_one_node_error_msg\").hide();\n  }\n\n  if (cluster_name == \"\") {\n    $(\"#bad_cluster_name_error_msg\").show();\n  } else {\n    $(\"#bad_cluster_name_error_msg\").hide();\n  }\n\n  if (addr1_match == 0) {\n    $(\"#addr0_addr1_mismatch_error_msg\").show();\n  }\n  else {\n    $(\"#addr0_addr1_mismatch_error_msg\").hide();\n  }\n  if(versions) {\n    if(cman_nodes.length > 0 && transport == \"udpu\") {\n      if(noncman_nodes.length < 1 && ring1_nodes.length < 1) {\n        transport = \"udp\";\n        $(\"#create_new_cluster select[name='config-transport']\").val(transport);\n        create_cluster_display_rrp(transport);\n      }\n      else {\n        versions_check_ok = 0;\n        $(\"#cman_udpu_transport_error_msg\").show();\n      }\n    }\n    else {\n      $(\"#cman_udpu_transport_error_msg\").hide();\n    }\n\n    if(cman_nodes.length > 1 && noncman_nodes.length > 1) {\n      versions_check_ok = 0;\n      $(\"#cman_mismatch_error_msg\").show();\n    }\n    else {\n      $(\"#cman_mismatch_error_msg\").hide();\n    }\n\n    if(rhel_versions.length > 1) {\n      versions_check_ok = 0;\n      $(\"#rhel_version_mismatch_error_msg\").show();\n    }\n    else {\n      $(\"#rhel_version_mismatch_error_msg\").hide();\n    }\n  }\n  else {\n    $(\"#cman_udpu_transport_error_msg\").hide();\n    $(\"#cman_mismatch_error_msg\").hide();\n    $(\"#rhel_version_mismatch_error_msg\").hide();\n  }\n\n  if (good_nodes != 0 && cant_connect_nodes == 0 && cant_auth_nodes.length == 0 && cluster_name != \"\" && addr1_match == 1 && versions_check_ok == 1) {\n    ajax_wrapper({\n      type: \"POST\",\n      url: \"/manage/newcluster\",\n      timeout: pcs_timeout,\n      data: $('#create_new_cluster_form').serialize(),\n      success: function(data) {\n        if (data) {\n          alert(\"Operation Successful!\\n\\nWarnings:\\n\" + data);\n        }\n        $(\"#create_new_cluster.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n        Pcs.update();\n      },\n      error: function (xhr, status, error) {\n        alert(xhr.responseText);\n        $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n      }\n    });\n  } else {\n    $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n  }\n\n}\n\nfunction create_cluster_dialog() {\n  var buttonOpts = [{\n    text: \"Create Cluster\",\n    id: \"create_cluster_submit_btn\",\n    click: function() {\n      $(\"#create_new_cluster\").find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n      $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", true);\n      checkClusterNodes();\n    }\n  },\n  {\n    text: \"Cancel\",\n    id: \"create_cluster_cancel_btn\",\n    click: function() {\n      $(this).dialog(\"close\");\n    }\n  }]\n\n  $(\"#create_new_cluster\").dialog({title: 'Create Cluster',\n    modal: false, resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction create_cluster_add_nodes() {\n  node_list = $(\"#create_new_cluster_form tr\").has(\"input[name^='node-']\");;\n  var ring1_node_list = $(\"#create_new_cluster_form tr\").has(\n    \"input[name^='ring1-node-']\"\n  );\n  cur_num_nodes = node_list.length;\n\n  first_node = node_list.eq(0);\n  new_node = first_node.clone();\n  $(\"input\",new_node).attr(\"name\", \"node-\"+(cur_num_nodes+1));\n  $(\"input\",new_node).val(\"\");\n  $(\"td\", new_node).first().text(\"Node \" + (cur_num_nodes+1)+ \":\");\n  new_node.insertAfter(node_list.last());\n\n  var ring1_first_node = ring1_node_list.eq(0);\n  var ring1_new_node = ring1_first_node.clone();\n  $(\"input\", ring1_new_node).attr(\"name\", \"ring1-node-\" + (cur_num_nodes + 1));\n  $(\"input\", ring1_new_node).val(\"\");\n  $(\"td\", ring1_new_node).first().text(\n    \"Node \" + (cur_num_nodes+1) + \" (Ring 1):\"\n  );\n  ring1_new_node.insertAfter(ring1_node_list.last());\n\n  if (node_list.length == 7)\n    $(\"#create_new_cluster_form tr\").has(\"input[name^='node-']\").last().next().remove();\n}\n\nfunction create_cluster_display_rrp(transport) {\n  if(transport == 'udp') {\n    $('#rrp_udp_transport').show();\n    $('#rrp_udpu_transport').hide();\n  }\n  else {\n    $('#rrp_udp_transport').hide();\n    $('#rrp_udpu_transport').show();\n  };\n}\n\nfunction show_hide_constraints(element) {\n  //$(element).parent().siblings().each (function(index,element) {\n  $(element).parent().nextUntil(\".stop\").toggle();\n  $(element).children(\"span, p\").toggle();\n}\n\nfunction show_hide_constraint_tables(element) {\n  $(element).siblings().hide();\n  $(\"#add_constraint_\" + $(element).val()).show();\n}\n\nfunction hover_over(o) {\n  $(o).addClass(\"node_selected\");\n}\n\nfunction hover_out(o) {\n  $(o).removeClass(\"node_selected\");\n}\n\nfunction reload_current_resource() {\n  tree_view_onclick(curResource());\n  tree_view_onclick(curStonith());\n}\n\nfunction load_row(node_row, ac, cur_elem, containing_elem, also_set, initial_load){\n  hover_over(node_row);\n  $(node_row).siblings().each(function(key,sib) {\n    hover_out(sib);\n  });\n  var self = ac;\n  $(containing_elem).fadeTo(500, .01,function() {\n    node_name = $(node_row).attr(\"nodeID\");\n    $.each(self.content, function(key, node) {\n      if (node.name == node_name) {\n        if (!initial_load) {\n          self.set(cur_elem,node);\n        }\n        node.set(cur_elem, true);\n        if (also_set)\n          self.set(also_set, node);\n      } else {\n        if (self.cur_resource_ston && self.cur_resource_ston.name == node.name)\n          self.content[key].set(cur_elem,true);\n        else if (self.cur_resource_res && self.cur_resource_res.name == node.name)\n          self.content[key].set(cur_elem,true);\n        else\n          self.content[key].set(cur_elem,false);\n      }\n    });\n    $(containing_elem).fadeTo(500,1);\n  });\n}\n\nfunction show_loading_screen() {\n  $(\"#loading_screen_progress_bar\").progressbar({ value: 100});\n  $(\"#loading_screen\").dialog({\n    modal: true,\n    title: \"Loading\",\n    height: 100,\n    width: 250,\n    hide: {\n      effect: 'fade',\n      direction: 'down',\n      speed: 750\n    }\n  });\n}\n\nfunction hide_loading_screen() {\n  $(\"#loading_screen\").dialog('close');\n  destroy_tooltips();\n}\n\nfunction destroy_tooltips() {\n  $(\"div[id^=ui-tooltip-]\").remove();\n}\n\nfunction remove_cluster(ids) {\n  var data = {};\n  $.each(ids, function(_, cluster) {\n    data[ \"clusterid-\" + cluster] = true;\n  });\n  ajax_wrapper({\n    type: 'POST',\n    url: '/manage/removecluster',\n    data: data,\n    timeout: pcs_timeout,\n    success: function () {\n      $(\"#dialog_verify_remove_clusters.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\"Unable to remove cluster: \" + res + \" (\"+error+\")\");\n      $(\"#dialog_verify_remove_clusters.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n    }\n  });\n}\n\nfunction remove_nodes(ids, force) {\n  var data = {};\n  for (var i=0; i<ids.length; i++) {\n    data[\"nodename-\"+i] = ids[i];\n  }\n  if (force) {\n    data[\"force\"] = force;\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_nodes',\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function(data,textStatus) {\n      $(\"#dialog_verify_remove_nodes.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      if (data == \"No More Nodes\") {\n        window.location.href = \"/manage\";\n      } else {\n        Pcs.update();\n      }\n    },\n    error: function (xhr, status, error) {\n      $(\"#dialog_verify_remove_nodes.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      if ((status == \"timeout\") || ($.trim(error) == \"timeout\")) {\n        /*\n         We are not interested in timeout because:\n         - it can take minutes to stop a node (resources running on it have\n           to be stopped/moved and we do not need to wait for that)\n         - if pcs is not able to stop a node it returns an (forceable) error\n           immediatelly\n        */\n        return;\n      }\n      var message = \"Unable to remove nodes (\" + $.trim(error) + \")\";\n      message += \"\\n\" + xhr.responseText;\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          remove_nodes(ids, true);\n        }\n      }\n    }\n  });\n}\n\nfunction remove_resource(ids, force) {\n  var data = {\n    no_error_if_not_exists: true\n  };\n  if (force) {\n    data[\"force\"] = force;\n  }\n  var res_obj;\n  $.each(ids, function(_, id) {\n    res_obj = Pcs.resourcesContainer.get_resource_by_id(id);\n    if (!res_obj) {\n      return true; // continue\n    } else if ($.inArray(res_obj.get(\"parent_id\"), ids) == -1) {\n      data[\"resid-\" + id] = true;\n    }\n  });\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_resource',\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function () {\n      $(\"#dialog_verify_remove_resources.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      $(\"#dialog_verify_remove_resources input[name=force]\").attr(\"checked\", false);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      error = $.trim(error);\n      var message = \"\";\n      if (\n        status == \"timeout\" ||\n        error == \"timeout\" ||\n        xhr.responseText == '{\"noresponse\":true}'\n      ) {\n        message = \"Operation takes longer to complete than expected.\";\n      } else {\n        message = \"Unable to remove resources (\" + error + \")\";\n        if (\n          (xhr.responseText.substring(0, 6) == \"Error:\") ||\n          (\"Forbidden\" == error)\n        ) {\n          message += \"\\n\\n\" + xhr.responseText.replace(\n            \"--force\", \"'Enforce removal'\"\n          );\n          alert(message);\n          $(\"#verify_remove_submit_btn\").button(\"option\", \"disabled\", false);\n          return;\n        }\n      }\n      alert(message);\n      $(\"#dialog_verify_remove_resources.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n      $(\"#dialog_verify_remove_resources input[name=force]\").attr(\"checked\", false);\n      Pcs.update();\n    }\n  });\n}\n\nfunction add_remove_fence_level(parent_id,remove) {\n  var data = {};\n  if (remove == true) {\n    data[\"remove\"] = true;\n    data[\"level\"] = parent_id.attr(\"fence_level\");\n    data[\"node\"] = Pcs.nodesController.cur_node.name;\n    data[\"devices\"] = parent_id.attr(\"fence_devices\");\n  } else {\n    data[\"level\"] = parent_id.parent().find(\"input[name='new_level_level']\").val();\n    data[\"devices\"] = parent_id.parent().find(\"select[name='new_level_value']\").val();\n    data[\"node\"] = Pcs.nodesController.cur_node.name;\n  }\n  fade_in_out(parent_id.parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_fence_level_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n//      Pcs.nodesController.remove_fence_level();\n      if (!remove) {\n        $(parent_id.parent()).find(\"input\").val(\"\");\n        $(parent_id.parent()).find(\"select\").val(\"\");\n      }\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      if (remove) {\n        alert(\n          \"Unable to remove fence level \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      else {\n        if (xhr.responseText.substring(0,6) == \"Error:\") {\n          alert(xhr.responseText);\n        } else {\n          alert(\n            \"Unable to add fence level \"\n            + ajax_simple_error(xhr, status, error)\n          );\n        }\n      }\n    }\n  });\n}\n\nfunction remove_node_attr(parent_id) {\n  var data = {};\n  data[\"node\"] = Pcs.nodesController.cur_node.name;\n  data[\"key\"] = parent_id.attr(\"node_attr_key\");\n  data[\"value\"] = \"\"; // empty value will remove attribute\n  fade_in_out(parent_id.parent());\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n//      Pcs.nodesController.remove_node_attr(data[\"res_id\"], data[\"key\"]);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to remove node attribute \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction add_node_attr(parent_id) {\n  var data = {};\n  data[\"node\"] = Pcs.nodesController.cur_node.name;\n  data[\"key\"] = $(parent_id + \" input[name='new_node_attr_key']\").val();\n  data[\"value\"] = $(parent_id + \" input[name='new_node_attr_value']\").val();\n  fade_in_out($(parent_id));\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      $(parent_id + \" input\").val(\"\");\n//      Pcs.nodesController.add_node_attr(data[\"res_id\"], data[\"key\"], data[\"value\"]);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to add node attribute \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction node_maintenance(node) {\n  var data = {\n    node: node,\n    key: \"maintenance\",\n    value: \"on\"\n  };\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to put node '\" + node + \"' to maintenance mode. \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction node_unmaintenance(node) {\n  var data = {\n    node: node,\n    key: \"maintenance\",\n    value: \"\"\n  };\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to remove node '\" + node + \"' from maintenance mode. \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction remove_meta_attr(parent_id) {\n  var resource_id = curResource();\n  if (resource_id == null) {\n    return;\n  }\n  var attr = parent_id.attr(\"meta_attr_key\");\n  fade_in_out(parent_id.parent());\n  Pcs.resourcesContainer.update_meta_attr(resource_id, attr);\n}\n\nfunction add_meta_attr(parent_id) {\n  var resource_id = curResource();\n  if (resource_id == null) {\n    return;\n  }\n  var attr = $(parent_id + \" input[name='new_meta_key']\").val();\n  var value = $(parent_id + \" input[name='new_meta_value']\").val();\n  fade_in_out($(parent_id));\n  $(parent_id + \" input\").val(\"\");\n  Pcs.resourcesContainer.update_meta_attr(resource_id, attr, value);\n}\n\n\nfunction add_constraint_prepare_data(parent_id, constraint_type){\n  var value = function(sibling){\n    var form_value = $(parent_id + \" \" + sibling).val();\n    return form_value ? form_value.trim() : form_value;\n  };\n  switch(constraint_type){\n    case \"ticket\": return {\n      ticket: value(\"input[name='ticket']\"),\n      role: value(\"select[name='role']\"),\n      \"loss-policy\": value(\"select[name='loss-policy']\"),\n    };\n  }\n  return {\n    rule: value(\"input[name='node_id']\"),\n    score: value(\"input[name='score']\"),\n    target_res_id: value(\"input[name='target_res_id']\"),\n    order: value(\"select[name='order']\"),\n    target_action: value(\"select[name='target_action']\"),\n    res_action: value(\"select[name='res_action']\"),\n    colocation_type: value(\"select[name='colocate']\"),\n  };\n}\n\nfunction add_constraint(parent_id, c_type, force) {\n  var data = add_constraint_prepare_data(parent_id, c_type);\n  data[\"disable_autocorrect\"] = true;\n  data[\"res_id\"] = Pcs.resourcesContainer.cur_resource.get('id');\n  data[\"node_id\"] = $(parent_id + \" input[name='node_id']\").val();\n  data[\"c_type\"] = c_type;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  fade_in_out($(parent_id));\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + (\n      data['node_id'] && (data['node_id'].trim().indexOf(' ') != -1)\n      ? 'add_constraint_rule_remote'\n      : 'add_constraint_remote'\n    ),\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      $(parent_id + \" input\").val(\"\");\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      var message = \"Unable to add constraint (\" + $.trim(error) + \")\";\n      var error_prefix = 'Error adding constraint: ';\n      if (xhr.responseText.indexOf('cib_replace failed') == -1) {\n        if (xhr.responseText.indexOf(error_prefix) == 0) {\n          message += \"\\n\\n\" + xhr.responseText.slice(error_prefix.length);\n        }\n        else {\n          message += \"\\n\\n\" + xhr.responseText;\n        }\n      }\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n        Pcs.update();\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        message = message.replace('Use --force to override.', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          add_constraint(parent_id, c_type, true);\n        }\n      }\n    }\n  });\n}\n\nfunction add_constraint_set_get_options(parent_id, constraint_type){\n  switch(constraint_type){\n    case \"ticket\": return {\n      ticket: $(parent_id + \" input[name='ticket']\").val().trim(),\n      \"loss-policy\": $(parent_id + \" select[name='loss-policy']\").val().trim(),\n    };\n  }\n  return {};\n}\n\nfunction add_constraint_set(parent_id, c_type, force) {\n  var data = {\n    resources: [],\n    disable_autocorrect: true,\n    options: {},\n  };\n  $(parent_id + \" input[name='resource_ids[]']\").each(function(index, element) {\n    var resources = element.value.trim();\n    if (resources.length > 0) {\n      data['resources'].push(resources.split(/\\s+/));\n    }\n  });\n  data.options = add_constraint_set_get_options(parent_id, c_type);\n  data[\"c_type\"] = c_type;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  if (data['resources'].length < 1) {\n    return;\n  }\n  fade_in_out($(parent_id))\n\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_constraint_set_remote\",\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      reset_constraint_set_form(parent_id);\n      Pcs.update();\n    },\n    error: function (xhr, status, error){\n      var message = \"Unable to add constraint (\" + $.trim(error) + \")\";\n      var error_prefix = 'Error adding constraint: ';\n      if (xhr.responseText.indexOf('cib_replace failed') == -1) {\n        if (xhr.responseText.indexOf(error_prefix) == 0) {\n          message += \"\\n\\n\" + xhr.responseText.slice(error_prefix.length);\n        }\n        else {\n          message += \"\\n\\n\" + xhr.responseText;\n        }\n      }\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n        Pcs.update();\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        message = message.replace('Use --force to override.', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          add_constraint_set(parent_id, c_type, true);\n        }\n      }\n    },\n  });\n}\n\nfunction new_constraint_set_row(parent_id) {\n  $(parent_id + \" td\").first().append(\n    '<br>Set: <input type=\"text\" name=\"resource_ids[]\">'\n  );\n}\n\nfunction reset_constraint_set_form(parent_id) {\n  $(parent_id + \" td\").first().html(\n    'Set: <input type=\"text\" name=\"resource_ids[]\">'\n  );\n}\n\nfunction remove_constraint(id) {\n  fade_in_out($(\"[constraint_id='\"+id+\"']\").parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_constraint_remote',\n    data: {\"constraint_id\": id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing constraint \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction remove_constraint_action(remover_element){\n  remove_constraint($(remover_element).parent().attr('constraint_id'));\n  return false;\n}\n\nfunction remove_constraint_rule(id) {\n  fade_in_out($(\"[rule_id='\"+id+\"']\").parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_constraint_rule_remote',\n    data: {\"rule_id\": id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing constraint rule \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction add_acl_role(form) {\n  var data = {}\n  data[\"name\"] = $(form).find(\"input[name='name']\").val().trim();\n  data[\"description\"] = $(form).find(\"input[name='description']\").val().trim();\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_acl_role\",\n    data: data,\n    success: function(data) {\n      Pcs.update();\n      $(form).find(\"input\").val(\"\");\n      $(\"#add_acl_role\").dialog(\"close\");\n    },\n    error: function(xhr, status, error) {\n      alert(\n        \"Error adding ACL role \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction remove_acl_roles(ids) {\n  var data = {};\n  for (var i = 0; i < ids.length; i++) {\n    data[\"role-\" + i] = ids[i];\n  }\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"remove_acl_roles\",\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function(data,textStatus) {\n      $(\"#dialog_verify_remove_acl_roles.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing ACL role \"\n        + ajax_simple_error(xhr, status, error)\n      );\n      $(\"#dialog_verify_remove_acl_roles.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n    }\n  });\n}\n\nfunction add_acl_item(parent_id, item_type) {\n  var data = {};\n  data[\"role_id\"] = Pcs.aclsController.cur_role.name;\n  var item_label = \"\";\n  switch (item_type) {\n    case \"perm\":\n      data[\"item\"] = \"permission\";\n      data[\"type\"] = $(parent_id + \" select[name='role_type']\").val();\n      data[\"xpath_id\"] = $(parent_id + \" select[name='role_xpath_id']\").val();\n      data[\"query_id\"] = $(parent_id + \" input[name='role_query_id']\").val().trim();\n      item_label = \"permission\"\n      break;\n    case \"user\":\n    case \"group\":\n      data[\"item\"] = item_type;\n      data[\"usergroup\"] = $(parent_id + \" input[name='role_assign_user']\").val().trim();\n      item_label = item_type\n      break;\n  }\n  fade_in_out($(parent_id));\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + 'add_acl',\n    data: data,\n    timeout: pcs_timeout,\n    success: function(data) {\n      $(parent_id + \" input\").val(\"\");\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error adding \" + item_label + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction remove_acl_item(id,item) {\n  fade_in_out(id);\n  var data = {};\n  var item_label = \"\";\n  switch (item) {\n    case \"perm\":\n      data[\"item\"] = \"permission\";\n      data[\"acl_perm_id\"] = id.attr(\"acl_perm_id\");\n      item_label = \"permission\"\n      break;\n    case \"group\":\n    case \"user\":\n      data[\"item\"] = \"usergroup\";\n      data[\"item_type\"] = item;\n      data[\"usergroup_id\"] = id.attr(\"usergroup_id\")\n      data[\"role_id\"] = id.attr(\"role_id\")\n      item_label = \"user / group\"\n      break;\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_acl',\n    data: data,\n    timeout: pcs_timeout,\n    success: function (data) {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing \" + item_label + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction update_cluster_settings() {\n  $(\"#cluster_properties button\").prop(\"disabled\", true);\n  var data = {\n    'hidden[hidden_input]': null // this is needed for backward compatibility\n  };\n  $.each(Pcs.settingsController.get(\"properties\"), function(_, prop) {\n    data[prop.get(\"form_name\")] = prop.get(\"cur_val\");\n  });\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'update_cluster_settings',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      refresh_cluster_properties();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error updating configuration \"\n        + ajax_simple_error(xhr, status, error)\n      );\n      hide_loading_screen();\n      $(\"#cluster_properties button\").prop(\"disabled\", false);\n    }\n  });\n}\n\nfunction refresh_cluster_properties() {\n  Pcs.settingsController.set(\"filter\", \"\");\n  $(\"#cluster_properties button\").prop(\"disabled\", true);\n  ajax_wrapper({\n    url: get_cluster_remote_url() + \"cluster_properties\",\n    timeout: pcs_timeout,\n    dataType: \"json\",\n    success: function(data) {\n      Pcs.settingsController.update(data);\n    },\n    error: function (xhr, status, error) {\n      Pcs.settingsController.set(\"error\", true);\n    },\n    complete: function() {\n      hide_loading_screen();\n      $(\"#cluster_properties button\").prop(\"disabled\", false);\n    }\n  });\n}\n\n// Pull currently managed cluster name out of URL\nfunction get_cluster_name() {\n  var cluster_name = location.pathname.match(\"/managec/(.*)/\");\n  if (cluster_name && cluster_name.length >= 2) {\n    Ember.debug(\"Cluster Name: \" + cluster_name[1]);\n    cluster_name = cluster_name[1];\n    return cluster_name;\n  }\n  Ember.debug(\"Cluster Name is 'null'\");\n  cluster_name = null;\n  return cluster_name;\n}\n\nfunction get_cluster_remote_url(cluster_name) {\n  cluster_name = typeof cluster_name !== 'undefined' ? cluster_name : Pcs.cluster_name;\n  return '/managec/' + cluster_name + \"/\";\n}\n\nfunction checkBoxToggle(cb,nodes) {\n  if (nodes) {\n    cbs = $('#node_list table').find(\".node_list_check input[type=checkbox]\");\n  } else {\n    cbs = $(cb).closest(\"tr\").parent().find(\".node_list_check input[type=checkbox]\")\n  }\n  if ($(cb).prop('checked'))\n    cbs.prop('checked',true).change();\n  else\n    cbs.prop('checked',false).change();\n}\n\nfunction loadWizard(item) {\n  wizard_name = $(item).val();\n  data = {wizard: wizard_name};\n\n  $(\"#wizard_location\").load(\n   get_cluster_remote_url() + 'get_wizard',\n   data);\n}\n\nfunction wizard_submit(form) {\n  data = $(form).serialize();\n  $(\"#wizard_location\").load(\n    get_cluster_remote_url() + 'wizard_submit',\n    data);\n}\n\nfunction update_resource_type_options() {\n  var cp = $(\"#resource_class_provider_selector\").val();\n  var target = $(\"#add_ra_type\");\n  var source = $(\"#all_ra_types\");\n\n  target.empty();\n  source.find(\"option\").each(function(i,v) {\n    if ($(v).val().indexOf(cp) == 0) {\n      new_option = $(v).clone();\n      target.append(new_option);\n    }\n  });\n  target.change();\n}\n\nfunction setup_resource_class_provider_selection() {\n  $(\"#resource_class_provider_selector\").change(function() {\n    update_resource_type_options();\n  });\n  $(\"#resource_class_provider_selector\").change();\n}\n\nfunction get_status_value(status) {\n  var values = {\n    failed: 1,\n    error: 1,\n    offline: 1,\n    blocked: 1,\n    warning: 2,\n    standby: 2,\n    maintenance: 2,\n    \"partially running\": 2,\n    disabled: 3,\n    unmanaged: 3,\n    unknown: 4,\n    ok: 5,\n    running: 5,\n    online: 5\n  };\n  return ((values.hasOwnProperty(status)) ? values[status] : -1);\n}\n\nfunction status_comparator(a,b) {\n  var valA = get_status_value(a);\n  var valB = get_status_value(b);\n  if (valA == -1) return 1;\n  if (valB == -1) return -1;\n  return valA - valB;\n}\n\nfunction get_status_icon_class(status_val, is_unmanaged) {\n  var is_unmanaged = typeof is_unmanaged !== 'undefined' ? is_unmanaged : false;\n  switch (status_val) {\n    case get_status_value(\"error\"):\n      return \"error\";\n    case get_status_value(\"disabled\"):\n    case get_status_value(\"warning\"):\n      return \"warning\";\n    case get_status_value(\"ok\"):\n      return is_unmanaged ? \"warning\" : \"check\";\n    default:\n      return \"x\";\n  }\n}\n\nfunction get_status_color(status_val, is_unmanaged) {\n  var is_unmanaged = typeof is_unmanaged !== 'undefined' ? is_unmanaged : false;\n  if (status_val == get_status_value(\"ok\")) {\n    return is_unmanaged? \"orange\" : \"green\";\n  }\n  else if (status_val == get_status_value(\"warning\") || status_val == get_status_value(\"unknown\") || status_val == get_status_value('disabled')) {\n    return \"orange\";\n  }\n  return \"red\";\n}\n\nfunction show_hide_dashboard(element, type) {\n  var cluster = Pcs.clusterController.cur_cluster;\n  if (Pcs.clusterController.get(\"show_all_\" + type)) { // show only failed\n    Pcs.clusterController.set(\"show_all_\" + type, false);\n  } else { // show all\n    Pcs.clusterController.set(\"show_all_\" + type, true);\n  }\n  correct_visibility_dashboard_type(cluster, type);\n}\n\nfunction correct_visibility_dashboard(cluster) {\n  if (cluster == null)\n    return;\n  $.each([\"nodes\", \"resources\", \"fence\"], function(key, type) {\n    correct_visibility_dashboard_type(cluster, type);\n  });\n}\n\nfunction correct_visibility_dashboard_type(cluster, type) {\n  if (cluster == null) {\n    return;\n  }\n  destroy_tooltips();\n  var listTable = $(\"#cluster_info_\" + cluster.name).find(\"table.\" + type + \"_list\");\n  var datatable = listTable.find(\"table.datatable\");\n  if (Pcs.clusterController.get(\"show_all_\" + type)) {\n    listTable.find(\"span.downarrow\").show();\n    listTable.find(\"span.rightarrow\").hide();\n    datatable.find(\"tr.default-hidden\").removeClass(\"hidden\");\n  } else {\n    listTable.find(\"span.downarrow\").hide();\n    listTable.find(\"span.rightarrow\").show();\n    datatable.find(\"tr.default-hidden\").addClass(\"hidden\");\n  }\n  if (cluster.get(type + \"_failed\") == 0 && !Pcs.clusterController.get(\"show_all_\" + type)) {\n    datatable.hide();\n  } else {\n    datatable.show();\n  }\n}\n\nfunction get_formated_html_list(data) {\n  if (data == null || data.length == 0) {\n    return \"\";\n  }\n  var out = \"<ul>\";\n  $.each(data, function(key, value) {\n    out += \"<li>\" + htmlEncode(value.message) + \"</li>\";\n  });\n  out += \"</ul>\";\n  return out;\n}\n\nfunction htmlEncode(s)\n{\n  return $(\"<div/>\").text(s).html().replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n}\n\nfunction fix_auth_of_cluster() {\n  show_loading_screen();\n  var clustername = Pcs.clusterController.cur_cluster.name;\n  ajax_wrapper({\n    url: get_cluster_remote_url(clustername) + \"fix_auth_of_cluster\",\n    type: \"POST\",\n    success: function(data) {\n      hide_loading_screen();\n      Pcs.update();\n    },\n    error: function(jqhxr,b,c) {\n      hide_loading_screen();\n      Pcs.update();\n      alert(jqhxr.responseText);\n    }\n  });\n}\n\nfunction get_tree_view_resource_id(element) {\n  var suffix = '-treeview-element';\n  var element_id = $(element).parents('table.tree-element')[0].id;\n  if (element_id && element_id.endsWith(suffix)) {\n    return element_id.substr(0, element_id.lastIndexOf(suffix));\n  }\n  return null;\n}\n\nfunction get_list_view_element_id(element) {\n  return $(element)[0].id;\n}\n\nfunction auto_show_hide_constraints() {\n  var cont = [\n    \"location_constraints\",\n    \"ordering_constraints\",\n    \"ordering_set_constraints\",\n    \"colocation_constraints\",\n    \"colocation_set_constraints\",\n    \"ticket_constraints\",\n    \"ticket_set_constraints\",\n    \"meta_attributes\",\n  ];\n  $.each(cont, function(index, name) {\n    var elem = $(\"#\" + name)[0];\n    var cur_resource = Pcs.resourcesContainer.get('cur_resource');\n    if (elem && cur_resource) {\n      var visible = $(elem).children(\"span\")[0].style.display != 'none';\n      if (visible && (!cur_resource.get(name) || cur_resource.get(name).length == 0))\n        show_hide_constraints(elem);\n      else if (!visible && cur_resource.get(name) && cur_resource.get(name).length > 0)\n        show_hide_constraints(elem);\n    }\n  });\n}\n\nfunction get_resource_agent_metadata(agent, on_success, stonith) {\n  stonith = typeof stonith !== 'undefined' ? stonith : false;\n  var request = (stonith)\n    ? 'get_fence_agent_metadata'\n    : 'get_resource_agent_metadata';\n  ajax_wrapper({\n    url: get_cluster_remote_url() + request,\n    dataType: \"json\",\n    data: {agent: agent},\n    timeout: pcs_timeout,\n    success: on_success,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to get metadata for resource agent '\" + agent + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  })\n}\n\nfunction update_instance_attributes(resource_id) {\n  var res_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (!(res_obj && res_obj.get(\"is_primitive\"))) {\n    return;\n  }\n  get_resource_agent_metadata(res_obj.get(\"resource_type\"), function(data) {\n    var agent = Pcs.ResourceAgent.create(data);\n    res_obj.set(\"resource_agent\", agent);\n    $.each(res_obj.get(\"instance_attr\"), function(_, attr) {\n      agent.get_parameter(attr.name).set(\"value\", attr.value);\n    });\n  }, res_obj.get(\"stonith\"));\n}\n\nfunction tree_view_onclick(resource_id) {\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (!resource_obj) {\n    console.log(\"Resource \" + resource_id + \"not found.\");\n    return;\n  }\n  if (resource_obj.get('stonith')) {\n    if (window.location.hash.startsWith(\"#/fencedevices\")) {\n      window.location.hash = \"/fencedevices/\" + resource_id;\n    }\n    Pcs.resourcesContainer.set('cur_fence', resource_obj);\n  } else {\n    if (window.location.hash.startsWith(\"#/resources\")) {\n      window.location.hash = \"/resources/\" + resource_id;\n    }\n    Pcs.resourcesContainer.set('cur_resource', resource_obj);\n    auto_show_hide_constraints();\n  }\n  update_instance_attributes(resource_id);\n  tree_view_select(resource_id);\n}\n\nfunction tree_view_select(element_id) {\n  var e = $(`#${element_id}-treeview-element`);\n  var view = e.parents('table.tree-view');\n  view.find('div.arrow').hide();\n  view.find('tr.children').hide();\n  view.find('table.tree-element').show();\n  view.find('tr.tree-element-name').removeClass(\"node_selected\");\n  e.find('tr.tree-element-name:first').addClass(\"node_selected\");\n  e.find('tr.tree-element-name div.arrow:first').show();\n  e.parents('tr.children').show();\n  e.find('tr.children').show();\n}\n\nfunction tree_view_checkbox_onchange(element) {\n  var e = $(element);\n  var children = $(element).closest(\".tree-element\").find(\".children\" +\n    \" input:checkbox\");\n  var val = e.prop('checked');\n  children.prop('checked', val);\n  children.prop('disabled', val);\n}\n\nfunction resource_master(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_master',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to create master/slave resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_clone(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_clone',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to clone the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_unclone(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (resource_obj.get('class_type') == 'clone') {\n    resource_id = resource_obj.get('member').get('id');\n  }\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_unclone',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to unclone the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_ungroup(group_id) {\n  if (group_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_ungroup',\n    data: {group_id: group_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to ungroup the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_change_group(resource_id, form) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  var data = {\n    resource_id: resource_id\n  };\n  $.each($(form).serializeArray(), function(_, item) {\n    data[item.name] = item.value;\n  });\n\n  if (\n    resource_obj.get('parent') &&\n    resource_obj.get('parent').get('class_type') == 'group'\n  ) {\n    data['old_group_id'] = resource_obj.get('parent').get('id');\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_change_group',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to change group \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction ajax_simple_error(xhr, status, error) {\n  var message = \"(\" + $.trim(error) + \")\"\n  if (\n    $.trim(xhr.responseText).length > 0\n    &&\n    xhr.responseText.indexOf('cib_replace failed') == -1\n  ) {\n    message = message + \"\\n\\n\" + $.trim(xhr.responseText);\n  }\n  return message;\n}\n\nfunction ajax_wrapper(options) {\n  // get original callback functions\n  var error_original = function(xhr, status, error) {};\n  if (options.error) {\n    error_original = options.error;\n  }\n  var complete_original = function(xhr, status) {};\n  if (options.complete) {\n    complete_original = options.complete;\n  }\n\n  // prepare new callback functions\n  var options_new = $.extend(true, {}, options);\n  // display login dialog on error\n  options_new.error = function(xhr, status, error) {\n    if (xhr.status == 401) {\n      ajax_queue.push(options);\n      if (!login_dialog_opened) {\n        login_dialog(function() {\n          var item;\n          while (ajax_queue.length > 0) {\n            item = ajax_queue.shift();\n            ajax_wrapper(item);\n          }\n        });\n      }\n    }\n    else {\n      error_original(xhr, status, error);\n    }\n  }\n  // Do not run complete function if login dialog is open.\n  // Once user is logged in again, the original complete function will be run\n  // in repeated ajax call run by login dialog on success.\n  options_new.complete = function(xhr, status) {\n    if (xhr.status == 401) {\n      return;\n    }\n    else {\n      complete_original(xhr, status);\n    }\n  }\n\n  // run ajax request or put it into a queue\n  if (login_dialog_opened) {\n    ajax_queue.push(options);\n  }\n  else {\n    $.ajax(options_new);\n  }\n}\n\nfunction login_dialog(on_success) {\n  var ok_button_id = \"login_form_ok\";\n  var ok_button_selector = \"#\" + ok_button_id;\n  var buttons = [\n    {\n      text: \"Log In\",\n      id: ok_button_id,\n      click: function() {\n        var me = $(this);\n        var my_dialog = $(this).dialog()\n        my_dialog.find(\"#login_form_denied\").hide();\n        $(ok_button_selector).button(\"option\", \"disabled\", true);\n        $.ajax({\n          type: \"POST\",\n          url: \"/login\",\n          data: my_dialog.find(\"#login_form\").serialize(),\n          complete: function() {\n            $(ok_button_selector).button(\"option\", \"disabled\", false);\n          },\n          success: function() {\n            my_dialog.find(\"#login_form_username\").val(\"\");\n            my_dialog.find(\"#login_form_password\").val(\"\");\n            me.dialog(\"destroy\");\n            login_dialog_opened = false;\n            on_success();\n          },\n          error: function(xhr, status, error) {\n            if (xhr.status == 401) {\n              my_dialog.find(\"#login_form_denied\").show();\n              my_dialog.find(\"#login_form_password\").val(\"\");\n            }\n            else {\n              alert(\"Login error \" + ajax_simple_error(xhr, status, error));\n            }\n          },\n        });\n      },\n    },\n    {\n      text: \"Cancel\",\n      id: \"login_form_cancel\",\n      // cancel will close the dialog the same way as X button does\n      click: function() {\n        $(this).dialog(\"close\");\n      },\n    },\n  ];\n  var dialog_obj = $(\"#dialog_login\").dialog({\n    title: \"Log In\",\n    modal: true,\n    resizable: true,\n    width: 400,\n    buttons: buttons,\n    open: function(event, ui) {\n      login_dialog_opened = true;\n    },\n    create: function(event, ui) {\n      login_dialog_opened = true;\n    },\n    // make sure to logout the user on dialog close\n    close: function(event, ui) {\n      login_dialog_opened = false;\n      location = \"/logout\";\n    },\n  });\n  dialog_obj.find(\"#login_form_denied\").hide();\n  // submit on enter\n  dialog_obj.keypress(function(e) {\n    if (\n      e.keyCode == $.ui.keyCode.ENTER\n      &&\n      !dialog_obj.parent().find(ok_button_selector).button(\"option\", \"disabled\")\n    ) {\n      dialog_obj.parent().find(ok_button_selector).trigger(\"click\");\n      return false;\n    }\n  });\n}\n\nvar permissions_current_cluster;\n\nfunction permissions_load_all() {\n  show_loading_screen();\n\n  var cluster_list = [];\n  $(\"#node_info div[id^='permissions_cluster_']\").each(function(i, div) {\n    cluster_list.push(\n      $(div).attr(\"id\").substring(\"permissions_cluster_\".length)\n    );\n  });\n\n  var call_count = cluster_list.length;\n  var callback = function() {\n    call_count = call_count - 1;\n    if (call_count < 1) {\n      hide_loading_screen();\n    }\n  }\n\n  $.each(cluster_list, function(index, cluster) {\n    permissions_load_cluster(cluster, callback);\n  });\n\n  if (cluster_list.length > 0) {\n    permissions_current_cluster = cluster_list[0];\n    permissions_show_cluster(\n      permissions_current_cluster,\n      $(\"#cluster_list tr\").first().next() /* the first row is a heading */\n    );\n  }\n  else {\n    hide_loading_screen();\n  }\n}\n\nfunction permissions_load_cluster(cluster_name, callback) {\n  var element_id = \"permissions_cluster_\" + cluster_name;\n  ajax_wrapper({\n    type: \"GET\",\n    url: \"/permissions_cluster_form/\" + cluster_name,\n    timeout: pcs_timeout,\n    success: function(data) {\n      $(\"#\" + element_id).html(data);\n      $(\"#\" + element_id + \" :checkbox\").each(function(key, checkbox) {\n        permissions_fix_dependent_checkboxes(checkbox);\n      });\n      permissions_cluster_dirty_flag(cluster_name, false);\n      if (callback) {\n        callback();\n      }\n    },\n    error: function(xhr, status, error) {\n      $(\"#\" + element_id).html(\n        \"Error loading permissions \" + ajax_simple_error(xhr, status, error)\n      );\n      if (callback) {\n        callback();\n      }\n    }\n  });\n}\n\nfunction permissions_show_cluster(cluster_name, list_row) {\n  permissions_current_cluster = cluster_name;\n\n  var container = $(\"#node_info\");\n  container.fadeTo(500, .01, function() {\n    container.children().hide();\n    $(\"#permissions_cluster_\" + cluster_name).show();\n    container.fadeTo(500, 1);\n  });\n\n  $(list_row).siblings(\"tr\").each(function(index, row) {\n    hover_out(row);\n    $(row).find(\"td\").last().children().hide();\n  });\n  hover_over(list_row);\n  $(list_row).find(\"td\").last().children().show();\n}\n\nfunction permissions_save_cluster(form) {\n  var dataString = $(form).serialize();\n  var cluster_name = permissions_get_clustername(form);\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url(cluster_name) + \"permissions_save\",\n    timeout: pcs_timeout,\n    data: dataString,\n    success: function() {\n      show_loading_screen();\n      permissions_load_cluster(cluster_name, hide_loading_screen);\n    },\n    error: function(xhr, status, error) {\n      alert(\n        \"Unable to save permissions of cluster \" + cluster_name + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction permissions_cluster_dirty_flag(cluster_name, flag) {\n  var cluster_row = permissions_get_cluster_row(cluster_name);\n  if (cluster_row) {\n    var dirty_elem = cluster_row.find(\"span[class=unsaved_changes]\");\n    if (dirty_elem) {\n      if (flag) {\n        dirty_elem.show();\n      }\n      else {\n        dirty_elem.hide();\n      }\n    }\n  }\n}\n\nfunction permission_remove_row(button) {\n  var cluster_name = permissions_get_clustername(\n    $(button).parents(\"form\").first()\n  );\n  $(button).parent().parent().remove();\n  permissions_cluster_dirty_flag(cluster_name, true);\n}\n\nfunction permissions_add_row(template_row) {\n  var user_name = permissions_get_row_name(template_row);\n  var user_type = permissions_get_row_type(template_row);\n  var max_key = -1;\n  var exists = false;\n  var cluster_name = permissions_get_clustername(\n    $(template_row).parents(\"form\").first()\n  );\n\n  if(\"\" == user_name) {\n    alert(\"Please enter the name\");\n    return;\n  }\n  if(\"\" == user_type) {\n    alert(\"Please enter the type\");\n    return;\n  }\n\n  $(template_row).siblings().each(function(index, row) {\n    if(\n      (permissions_get_row_name(row) == user_name)\n      &&\n      (permissions_get_row_type(row) == user_type)\n    ) {\n      exists = true;\n    }\n    $(row).find(\"input\").each(function(index, input) {\n      var match = input.name.match(/^[^[]*\\[(\\d+)\\].*$/);\n      if (match) {\n        var key = parseInt(match[1]);\n        if(key > max_key) {\n          max_key = key;\n        }\n      }\n    });\n  });\n  if(exists) {\n    alert(\"Permissions already set for the user\");\n    return;\n  }\n\n  max_key = max_key + 1;\n  var new_row = $(template_row).clone();\n  new_row.find(\"[name*='_new']\").each(function(index, element) {\n    element.name = element.name.replace(\"_new\", \"[\" + max_key + \"]\");\n  });\n  new_row.find(\"td\").last().html(\n    '<a class=\"remove\" href=\"#\" onclick=\"permission_remove_row(this);\">X</a>'\n  );\n  new_row.find(\"[name$='[name]']\").each(function(index, element) {\n    $(element).after(user_name);\n    $(element).attr(\"type\", \"hidden\");\n  });\n  new_row.find(\"[name$='[type]']\").each(function(index, element) {\n    $(element).after(user_type);\n    $(element).after(\n      '<input type=\"hidden\" name=\"' + element.name  + '\" value=\"' + user_type + '\">'\n    );\n    $(element).remove();\n  });\n\n  $(template_row).before(new_row);\n  var template_inputs = $(template_row).find(\":input\");\n  template_inputs.removeAttr(\"checked\").removeAttr(\"selected\");\n  template_inputs.removeAttr(\"disabled\").removeAttr(\"readonly\");\n  $(template_row).find(\":input[type=text]\").val(\"\");\n\n  permissions_cluster_dirty_flag(cluster_name, true);\n}\n\nfunction permissions_get_dependent_checkboxes(checkbox) {\n  var cluster_name = permissions_get_clustername(\n    $(checkbox).parents(\"form\").first()\n  );\n  var checkbox_permission = permissions_get_checkbox_permission(checkbox);\n  var deps = {};\n  var dependent_permissions = [];\n  var dependent_checkboxes = [];\n\n  if (permissions_dependencies[cluster_name]) {\n    deps = permissions_dependencies[cluster_name];\n    if (deps[\"also_allows\"] && deps[\"also_allows\"][checkbox_permission]) {\n      dependent_permissions = deps[\"also_allows\"][checkbox_permission];\n      $(checkbox).parents(\"tr\").first().find(\":checkbox\").not(checkbox).each(\n        function(key, check) {\n          var perm = permissions_get_checkbox_permission(check);\n          if (dependent_permissions.indexOf(perm) != -1) {\n            dependent_checkboxes.push(check);\n          }\n        }\n      );\n    }\n  }\n  return dependent_checkboxes;\n}\n\nfunction permissions_fix_dependent_checkboxes(checkbox) {\n  var dep_checks = $(permissions_get_dependent_checkboxes(checkbox));\n  if ($(checkbox).prop(\"checked\")) {\n    /* the checkbox is now checked */\n    dep_checks.each(function(key, check) {\n      var jq_check = $(check);\n      jq_check.prop(\"checked\", true);\n      jq_check.prop(\"readonly\", true);\n      // readonly on checkbox makes it look like readonly but doesn't prevent\n      // changing its state (checked - not checked), setting disabled works\n      jq_check.prop(\"disabled\", true);\n      permissions_fix_dependent_checkboxes(check);\n    });\n  }\n  else {\n    /* the checkbox is now empty */\n    dep_checks.each(function(key, check) {\n      var jq_check = $(check);\n      jq_check.prop(\"checked\", jq_check.prop(\"defaultChecked\"));\n      jq_check.prop(\"readonly\", false);\n      jq_check.prop(\"disabled\", false);\n      permissions_fix_dependent_checkboxes(check);\n    });\n  }\n}\n\nfunction permissions_get_row_name(row) {\n  return $.trim($(row).find(\"[name$='[name]']\").val());\n}\n\nfunction permissions_get_row_type(row) {\n  return $.trim($(row).find(\"[name$='[type]']\").val());\n}\n\nfunction permissions_get_clustername(form) {\n  return $.trim($(form).find(\"[name=cluster_name]\").val());\n}\n\nfunction permissions_get_checkbox_permission(checkbox) {\n  var match = checkbox.name.match(/^.*\\[([^[]+)\\]$/);\n  if (match) {\n    return match[1];\n  }\n  return \"\";\n}\n\nfunction permissions_get_cluster_row(cluster_name) {\n  var cluster_row = null;\n  $('#cluster_list td[class=node_name]').each(function(index, elem) {\n    var jq_elem = $(elem);\n    if (jq_elem.text().trim() == cluster_name.trim()) {\n      cluster_row = jq_elem.parents(\"tr\").first();\n    }\n  });\n  return cluster_row;\n}\n\nfunction is_cib_true(value) {\n  if (value) {\n    return (['true', 'on', 'yes', 'y', '1'].indexOf(value.toString().toLowerCase()) != -1);\n  }\n  return false;\n}\n\nfunction set_utilization(type, entity_id, name, value) {\n  var data = {\n    name: name,\n    value: value\n  };\n  if (type == \"node\") {\n    data[\"node\"] = entity_id;\n  } else if (type == \"resource\") {\n    data[\"resource_id\"] = entity_id;\n  } else return false;\n  var url = get_cluster_remote_url() + \"set_\" + type + \"_utilization\";\n\n  ajax_wrapper({\n    type: 'POST',\n    url: url,\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to set utilization: \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction is_integer(str) {\n  if (Number(str) === str && str % 1 === 0) // if argument isn't string but number\n    return true;\n  var n = ~~Number(str);\n  return String(n) === str;\n}\n\nEmber.Handlebars.helper('selector-helper', function (content, value, place_holder, options) {\n  var out = \"\";\n  var line;\n  if (place_holder) {\n    out += '<option value=\"\">' + place_holder + '</option>';\n  }\n  $.each(content, function(_, opt){\n    line = '<option value=\"' + opt[\"value\"] + '\"';\n    if (value == opt[\"value\"]) {\n      line += ' selected=\"selected\"'\n    }\n    line += \">\" + Handlebars.Utils.escapeExpression(opt[\"name\"]) + \"</option>\";\n    out += line + \"\\n\";\n  });\n  return new Handlebars.SafeString(out);\n});\n\nEmber.Handlebars.helper('bool-to-icon', function(value, options) {\n  var out = '<span class=\"sprites inverted ';\n  if (typeof(value) == 'undefined' || value == null) {\n    out += \"questionmarkdark\";\n  } else if (value) {\n    out += \"checkdark\"\n  } else {\n    out += \"Xdark\"\n  }\n  return new Handlebars.SafeString(out + '\">&nbsp;</span>');\n});\n\nfunction nl2br(text) {\n  return text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n}\n\nfunction enable_sbd(dialog) {\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"remote_enable_sbd\",\n    data: dialog.find(\"#enable_sbd_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function() {\n      dialog.parent().find(\"#enable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      dialog.dialog(\"close\");\n      alert(\n        'SBD enabled! You have to restart cluster in order to apply changes.'\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      dialog.parent().find(\"#enable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      xhr.responseText = xhr.responseText.replace(\n        \"--skip-offline\", \"option 'ignore offline nodes'\"\n      );\n      alert(\n        ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction enable_sbd_dialog(node_list) {\n  var buttonsOpts = [\n    {\n      text: \"Enable SBD\",\n      id: \"enable_sbd_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#enable_sbd_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        enable_sbd(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  var dialog_obj = $(\"#enable_sbd_dialog\").dialog({title: 'Enable SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n\n  dialog_obj.keypress(function(e) {\n    if (\n      e.keyCode == $.ui.keyCode.ENTER &&\n      !dialog_obj.parent().find(\"#enable_sbd_btn\").button(\"option\", \"disabled\")\n    ) {\n      dialog_obj.parent().find(\"#enable_sbd_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n  dialog_obj.find('#watchdog_table').empty();\n  $.each(node_list, function(_, node) {\n    dialog_obj.find(\"#watchdog_table\").append(\n      '<tr>' +\n        '<td>' +\n          node + ':' +\n        '</td>' +\n        '<td>' +\n          '<input ' +\n            'type=\"text\" ' +\n            'placeholder=\"/dev/watchdog\" ' +\n            'name=\"watchdog[' + node + ']\" ' +\n          '/>' +\n        '</td>' +\n      '</tr>'\n    )\n  });\n}\n\nfunction disable_sbd(dialog) {\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"remote_disable_sbd\",\n    data: dialog.find(\"#disable_sbd_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function() {\n      dialog.parent().find(\"#disable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      dialog.dialog(\"close\");\n      alert(\n        'SBD disabled! You have to restart cluster in order to apply changes.'\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      dialog.parent().find(\"#disable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      xhr.responseText = xhr.responseText.replace(\n        \"--skip-offline\", \"option 'ignore offline nodes'\"\n      );\n      alert(ajax_simple_error(xhr, status, error));\n    }\n  });\n}\n\nfunction disable_sbd_dialog() {\n  var buttonsOpts = [\n    {\n      text: \"Disable SBD\",\n      id: \"disable_sbd_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#disable_sbd_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        disable_sbd(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  $(\"#disable_sbd_dialog\").dialog({\n    title: 'Disable SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n}\n\nfunction sbd_status_dialog() {\n  var buttonsOpts = [\n    {\n      text: \"Enable SBD\",\n      click: function() {\n        enable_sbd_dialog(Pcs.nodesController.get_node_name_list());\n      }\n    },\n    {\n      text: \"Disable SBD\",\n      click: disable_sbd_dialog\n    },\n    {\n      text:\"Close\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  $(\"#sbd_status_dialog\").dialog({\n    title: 'SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n}\n\nfunction unmanage_resource(resource_id) {\n  if (!resource_id) {\n    return;\n  }\n  fade_in_out(\"#resource_unmanage_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"unmanage_resource\",\n    data: {\n      resource_list_json: JSON.stringify([resource_id]),\n    },\n    timeout: pcs_timeout,\n    complete: function() {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        `Unable to unmanage '${resource_id}': ` +\n        ajax_simple_error(xhr, status, error)\n      );\n    },\n  });\n}\n\nfunction manage_resource(resource_id) {\n  if (!resource_id) {\n    return;\n  }\n  fade_in_out(\"#resource_manage_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"manage_resource\",\n    data: {\n      resource_list_json: JSON.stringify([resource_id]),\n    },\n    timeout: pcs_timeout,\n    complete: function() {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        `Unable to manage '${resource_id}': ` +\n        ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction show_add_resource_dialog() {\n  var new_resource_group_selector_id = $(\n    \"#new_resource_agent .group-selector\"\n  ).attr(\"id\");\n  Ember.View.views[new_resource_group_selector_id].set(\n    \"group_select_value\", null\n  );\n  $('#new_resource_agent').dialog({\n    title: 'Add Resource',\n    modal:true, width: 'auto'\n  });\n}\n"], "fixing_code": ["# Change Log\n\n## [Unreleased]\n\n### Added\n- Resources in location constraints now may be specified by resource name\n  patterns in addition to resource names ([rhbz#1362493])\n- Proxy settings description in pcsd configuration file ([rhbz#1315627])\n- Man page for pcsd ([rhbz#1378742])\n- Pcs now allows to set `trace_ra` and `trace_file` options of `ocf:heartbeat`\n  and `ocf:pacemaker` resources ([rhbz#1421702])\n- `pcs resource describe` and `pcs stonith describe` commands now show all\n  information about the specified agent if the `--full` flag is used\n- `pcs resource manage | unmanage` enables respectively disables monitor\n  operations when the `--monitor` flag is specified ([rhbz#1303969])\n\n### Changed\n- It is now possible to specify more than one resource in the `pcs resource\n  enable` and `pcs resource disable` commands.\n\n### Fixed\n- Python 3: pcs no longer spams stderr with error messages when communicating\n  with another node\n- Stopping a cluster does not timeout too early and it generally works better\n  even if the cluster is running Virtual IP resources ([rhbz#1334429])\n- `pcs booth remove` now works correctly even if the booth resource group is\n  disabled (another fix) ([rhbz#1389941])\n- Fixed Cross-site scripting (XSS) vulnerability in web UI ([CVE-2017-2661],\n  [rhbz#1434111])\n\n[CVE-2017-2661]: https://access.redhat.com/security/cve/CVE-2017-2661\n[rhbz#1303969]: https://bugzilla.redhat.com/show_bug.cgi?id=1303969\n[rhbz#1315627]: https://bugzilla.redhat.com/show_bug.cgi?id=1315627\n[rhbz#1334429]: https://bugzilla.redhat.com/show_bug.cgi?id=1334429\n[rhbz#1362493]: https://bugzilla.redhat.com/show_bug.cgi?id=1362493\n[rhbz#1378742]: https://bugzilla.redhat.com/show_bug.cgi?id=1378742\n[rhbz#1389941]: https://bugzilla.redhat.com/show_bug.cgi?id=1389941\n[rhbz#1421702]: https://bugzilla.redhat.com/show_bug.cgi?id=1421702\n[rhbz#1434111]: https://bugzilla.redhat.com/show_bug.cgi?id=1434111\n\n\n## [0.9.156] - 2017-02-10\n\n### Added\n- Fencing levels now may be targeted in CLI by a node name pattern or a node\n  attribute in addition to a node name ([rhbz#1261116])\n- `pcs cluster cib-push` allows to push a diff obtained internally by comparing\n  CIBs in specified files ([rhbz#1404233], [rhbz#1419903])\n- Added flags `--wait`, `--disabled`, `--group`, `--after`, `--before` into\n  the command `pcs stonith create`\n- Added commands `pcs stonith enable` and `pcs stonith disable`\n- Command line option --request-timeout ([rhbz#1292858])\n- Check whenever proxy is set when unable to connect to a node ([rhbz#1315627])\n\n### Changed\n- `pcs node [un]standby` and `pcs node [un]maintenance` is now atomic even if\n  more than one node is specified ([rhbz#1315992])\n- Restarting pcsd initiated from pcs is now a synchronous operation\n  ([rhbz#1284404])\n- Stopped bundling fonts used in pcsd GUI ([ghissue#125])\n- In `pcs resource create` flags `--master` and `--clone` changed to keywords\n  `master` and `clone`\n- libcurl is now used for node to node communication\n\n### Fixed\n- When upgrading CIB to the latest schema version, check for minimal common\n  version across the cluster ([rhbz#1389443])\n- `pcs booth remove` now works correctly even if the booth resource group is\n  disabled ([rhbz#1389941])\n- Adding a node in a CMAN cluster does not cause the new node to be fenced\n  immediately ([rhbz#1394846])\n- Show proper error message when there is an HTTP communication failure\n  ([rhbz#1394273])\n- Fixed searching for files to remove in the `/var/lib` directory ([ghpull#119],\n  [ghpull#120])\n- Fixed messages when managing services (start, stop, enable, disable...)\n- Fixed disabling services on systemd systems when using instances\n  ([rhbz#1389501])\n- Fixed parsing commandline options ([rhbz#1404229])\n- Pcs does not exit with a false error message anymore when pcsd-cli.rb outputs\n  to stderr ([ghissue#124])\n- Pcs now exits with an error when both `--all` and a list of nodes is specified\n  in the `pcs cluster start | stop | enable | disable` commands ([rhbz#1339355])\n- built-in help and man page fixes and improvements ([rhbz#1347335])\n- In `pcs resource create` the flag `--clone` no longer steals arguments from\n  the keywords `meta` and `op` ([rhbz#1395226])\n- `pcs resource create` does not produce invalid cib when group id is already\n  occupied with non-resource element ([rhbz#1382004])\n- Fixed misbehavior of the flag `--master` in `pcs resource create` command\n  ([rhbz#1378107])\n- Fixed tacit acceptance of invalid resource operation in `pcs resource create`\n  ([rhbz#1398562])\n- Fixed misplacing metadata for disabling when running `pcs resource create`\n  with flags `--clone` and `--disabled` ([rhbz#1402475])\n- Fixed incorrect acceptance of the invalid attribute of resource operation in\n  `pcs resource create` ([rhbz#1382597])\n- Fixed validation of options of resource operations in `pcs resource create`\n  ([rhbz#1390071])\n- Fixed silent omission of duplicate options ([rhbz#1390066])\n- Added more validation for resource agent names ([rhbz#1387670])\n- Fixed network communication issues in pcsd when a node was specified by an\n  IPv6 address\n- Fixed JS error in web UI when empty cluster status is received\n  ([rhbz#1396462])\n- Fixed sending user group in cookies from Python 3\n- Fixed pcsd restart in Python 3\n- Fixed parsing XML in Python 3 (caused crashes when reading resource agents\n  metadata) ([rhbz#1419639])\n- Fixed the recognition of the structure of a resource agent name that contains\n  a systemd instance ([rhbz#1419661])\n\n### Removed\n- Ruby 1.8 and 1.9 is no longer supported due to bad libcurl support\n\n[ghissue#124]: https://github.com/ClusterLabs/pcs/issues/124\n[ghissue#125]: https://github.com/ClusterLabs/pcs/issues/125\n[ghpull#119]: https://github.com/ClusterLabs/pcs/pull/119\n[ghpull#120]: https://github.com/ClusterLabs/pcs/pull/120\n[rhbz#1261116]: https://bugzilla.redhat.com/show_bug.cgi?id=1261116\n[rhbz#1284404]: https://bugzilla.redhat.com/show_bug.cgi?id=1284404\n[rhbz#1292858]: https://bugzilla.redhat.com/show_bug.cgi?id=1292858\n[rhbz#1315627]: https://bugzilla.redhat.com/show_bug.cgi?id=1315627\n[rhbz#1315992]: https://bugzilla.redhat.com/show_bug.cgi?id=1315992\n[rhbz#1339355]: https://bugzilla.redhat.com/show_bug.cgi?id=1339355\n[rhbz#1347335]: https://bugzilla.redhat.com/show_bug.cgi?id=1347335\n[rhbz#1378107]: https://bugzilla.redhat.com/show_bug.cgi?id=1378107\n[rhbz#1382004]: https://bugzilla.redhat.com/show_bug.cgi?id=1382004\n[rhbz#1382597]: https://bugzilla.redhat.com/show_bug.cgi?id=1382597\n[rhbz#1387670]: https://bugzilla.redhat.com/show_bug.cgi?id=1387670\n[rhbz#1389443]: https://bugzilla.redhat.com/show_bug.cgi?id=1389443\n[rhbz#1389501]: https://bugzilla.redhat.com/show_bug.cgi?id=1389501\n[rhbz#1389941]: https://bugzilla.redhat.com/show_bug.cgi?id=1389941\n[rhbz#1390066]: https://bugzilla.redhat.com/show_bug.cgi?id=1390066\n[rhbz#1390071]: https://bugzilla.redhat.com/show_bug.cgi?id=1390071\n[rhbz#1394273]: https://bugzilla.redhat.com/show_bug.cgi?id=1394273\n[rhbz#1394846]: https://bugzilla.redhat.com/show_bug.cgi?id=1394846\n[rhbz#1395226]: https://bugzilla.redhat.com/show_bug.cgi?id=1395226\n[rhbz#1396462]: https://bugzilla.redhat.com/show_bug.cgi?id=1396462\n[rhbz#1398562]: https://bugzilla.redhat.com/show_bug.cgi?id=1398562\n[rhbz#1402475]: https://bugzilla.redhat.com/show_bug.cgi?id=1402475\n[rhbz#1404229]: https://bugzilla.redhat.com/show_bug.cgi?id=1404229\n[rhbz#1404233]: https://bugzilla.redhat.com/show_bug.cgi?id=1404233\n[rhbz#1419639]: https://bugzilla.redhat.com/show_bug.cgi?id=1419639\n[rhbz#1419661]: https://bugzilla.redhat.com/show_bug.cgi?id=1419661\n[rhbz#1419903]: https://bugzilla.redhat.com/show_bug.cgi?id=1419903\n\n\n## [0.9.155] - 2016-11-03\n\n### Added\n- Show daemon status in `pcs status` on non-systemd machines\n- SBD support for cman clusters ([rhbz#1380352])\n- Alerts management in pcsd ([rhbz#1376480])\n\n### Changed\n- Get all information about resource and stonith agents from pacemaker. Pcs now\n  supports the same set of agents as pacemaker does. ([rhbz#1262001],\n  [ghissue#81])\n- `pcs resource create` now exits with an error if more than one resource agent\n  matches the specified short agent name instead of randomly selecting one of\n  the agents\n- Allow to remove multiple alerts and alert recipients at once\n\n### Fixed\n- When stopping a cluster with some of the nodes unreachable, stop the cluster\n  completely on all reachable nodes ([rhbz#1380372])\n- Fixed pcsd crash when rpam rubygem is installed ([ghissue#109])\n- Fixed occasional crashes / failures when using locale other than en\\_US.UTF8\n  ([rhbz#1387106])\n- Fixed starting and stopping cluster services on systemd machines without\n  the `service` executable ([ghissue#115])\n\n\n[ghissue#81]: https://github.com/ClusterLabs/pcs/issues/81\n[ghissue#109]: https://github.com/ClusterLabs/pcs/issues/109\n[ghissue#115]: https://github.com/ClusterLabs/pcs/issues/115\n[rhbz#1262001]: https://bugzilla.redhat.com/show_bug.cgi?id=1262001\n[rhbz#1376480]: https://bugzilla.redhat.com/show_bug.cgi?id=1376480\n[rhbz#1380352]: https://bugzilla.redhat.com/show_bug.cgi?id=1380352\n[rhbz#1380372]: https://bugzilla.redhat.com/show_bug.cgi?id=1380372\n[rhbz#1387106]: https://bugzilla.redhat.com/show_bug.cgi?id=1387106\n\n\n## [0.9.154] - 2016-09-21\n- There is no change log for this and previous releases. We are sorry.\n- Take a look at git history if you are interested.\n", "Pcs = Ember.Application.createWithMixins({\n  LOG_TRANSITIONS: true,\n  cluster_name: get_cluster_name(),\n  cluster_settings: null,\n  cur_page: \"\",\n  opening_resource: \"\",\n  opening_node: \"\",\n  opening_aclrole: \"\",\n  resource_page: function() {\n    if (this.cur_page == \"resources\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  node_page: function() {\n    if (this.cur_page == \"nodes\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  stonith_page: function() {\n    if (this.cur_page == \"stonith\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  configure_page: function() {\n    if (this.cur_page == \"configure\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  acls_page: function() {\n    if (this.cur_page == \"acls\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  manage_page: function() {\n    if (this.cur_page == \"manage\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  permissions_page: function() {\n    if (this.cur_page == \"permissions\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  wizards_page: function() {\n    if (this.cur_page == \"wizards\") return \"display: table-row;\";\n    else return \"display: none;\";\n  }.property(\"cur_page\"),\n  available_features: [],\n  is_sbd_supported: function() {\n    return (this.get(\"available_features\").indexOf(\"sbd\") != -1);\n  }.property(\"available_features\"),\n  is_ticket_constraints_supported: function(){\n    return (\n      this.get(\"available_features\").indexOf(\"ticket_constraints\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_constraint_colocation_set: function() {\n    return (\n      this.get(\"available_features\").indexOf(\"constraint_colocation_set\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_moving_resource_in_group: function() {\n    return (\n      this.get(\"available_features\").indexOf(\"moving_resource_in_group\") != -1\n    );\n  }.property(\"available_features\"),\n  is_supported_unmanaged_resource: function() {\n    return (this.get(\"available_features\").indexOf(\"unmanaged_resource\") != -1);\n  }.property(\"available_features\"),\n  is_sbd_running: false,\n  is_sbd_enabled: false,\n  is_sbd_enabled_or_running: function() {\n    return (this.get(\"is_sbd_enabled\") || this.get(\"is_sbd_running\"));\n  }.property(\"is_sbd_enabled\", \"is_sbd_running\"),\n  sbd_config: null,\n  sbd_config_table: function() {\n    if (!this.get(\"sbd_config\")) {\n      return \"no configuration obtained\";\n    }\n    var out =\n      '<table class=\"darkdatatable\"><tr><th>OPTION</th><th>VALUE</th></tr>\\n';\n    var banned_options = [\"SBD_OPTS\", \"SBD_WATCHDOG_DEV\", \"SBD_PACEMAKER\"];\n    $.each(this.get(\"sbd_config\"), function(opt, val) {\n      if (banned_options.indexOf(opt) == -1) {\n        out += '<tr><td>' + htmlEncode(opt) + '</td><td>' + htmlEncode(val) + '</td></tr>\\n';\n      }\n    });\n    return out + '</table>';\n  }.property(\"sbd_config\"),\n\n  getResourcesFromID: function(resources) {\n    var retArray = [];\n    var resource_map = Pcs.resourcesContainer.get('resource_map');\n    $.each(resources, function(_, resource_id) {\n      if (resource_id in resource_map && !resource_map[resource_id].get('stonith')) {\n        retArray.pushObject(resource_map[resource_id]);\n      }\n    });\n    return retArray;\n  },\n  updater: null,\n\n  update: function() {\n    Pcs.get('updater').update();\n  },\n\n  _update: function(first_run) {\n    if (window.location.pathname.lastIndexOf('/manage', 0) !== 0) {\n      return;\n    }\n    if (first_run) {\n      show_loading_screen();\n    }\n    var self = Pcs;\n    var cluster_name = self.cluster_name;\n    if (cluster_name == null) {\n      if (location.pathname.indexOf(\"/manage\") != 0) {\n        return;\n      }\n      Ember.debug(\"Empty Cluster Name\");\n      ajax_wrapper({\n        url: \"/clusters_overview\",\n        dataType: \"json\",\n        timeout: 20000,\n        success: function(data) {\n          Pcs.clusterController.update(data);\n          if (Pcs.clusterController.get('cur_cluster')) {\n            Pcs.clusterController.update_cur_cluster(Pcs.clusterController.get('cur_cluster').get('name'));\n          }\n          if (data[\"not_current_data\"]) {\n            self.update();\n          }\n          hide_loading_screen();\n        },\n        error: function(jqhxr,b,c) {\n          if (jqhxr.responseText) {\n            try {\n              var obj = $.parseJSON(jqhxr.responseText);\n              if (obj.notauthorized == \"true\") {\n                location.reload();\n              }\n            } catch(e) {\n              console.log(\"Error: Unable to parse json for clusters_overview\");\n            }\n          }\n          hide_loading_screen();\n        },\n        complete: function() {\n          Pcs.get('updater').update_finished();\n        }\n      });\n      return;\n    }\n    ajax_wrapper({\n      url: \"cluster_status\",\n      dataType: \"json\",\n      success: function(data) {\n        Pcs.resourcesContainer.update(data);\n        Pcs.nodesController.update(data);\n        Pcs.aclsController.update(data);\n        Pcs.set(\"cluster_settings\",data.cluster_settings);\n        Pcs.set('need_ring1_address', false);\n        Pcs.set('is_cman_with_udpu_transport', false);\n        Pcs.set(\n          'available_features',\n          data['available_features'] ? data['available_features'] : []\n        );\n        if (data['need_ring1_address']) {\n          Pcs.set('need_ring1_address', true);\n        }\n        if (data['is_cman_with_udpu_transport']) {\n          Pcs.set('is_cman_with_udpu_transport', true);\n        }\n        var fence_change = false;\n        var resource_change = false;\n        Ember.run.next(function () {\n          var self = Pcs.resourcesContainer;\n          var cur_fence = self.get('cur_fence');\n          var cur_resource = self.get('cur_resource');\n          var resource_map = self.get('resource_map');\n          if (first_run) {\n            refresh_cluster_properties();\n            setup_node_links();\n            Pcs.nodesController.load_node($('#node_list_row').find('.node_selected').first(),true);\n            Pcs.aclsController.load_role($('#acls_list_row').find('.node_selected').first(), true);\n            if (self.get(\"fence_id_to_load\")) {\n              cur_fence = self.get_resource_by_id(self.get(\"fence_id_to_load\"));\n              fence_change = true;\n            }\n            if (self.get(\"resource_id_to_load\")) {\n              cur_resource = self.get_resource_by_id(self.get(\"resource_id_to_load\"));\n              resource_change = true;\n            }\n          }\n\n          if (cur_fence && cur_fence.get('id') in resource_map) {\n            if (resource_map[cur_fence.get('id')] !== cur_fence) {\n              cur_fence = resource_map[cur_fence.get('id')];\n            }\n          } else {\n            if (self.get('fence_list').length > 0) {\n              cur_fence = self.get('fence_list')[0];\n            } else {\n              cur_fence = null;\n            }\n            fence_change = true;\n          }\n\n          if (cur_resource && cur_resource.get('id') in resource_map) {\n            if (resource_map[cur_resource.get('id')] !== cur_resource) {\n              cur_resource = resource_map[cur_resource.get('id')];\n            }\n          } else {\n            if (self.get('resource_list').length > 0) {\n              cur_resource = self.get('resource_list')[0];\n            } else {\n              cur_resource = null;\n            }\n            resource_change = true;\n          }\n\n          self.set('cur_fence', cur_fence);\n          self.set('cur_resource', cur_resource);\n\n          Ember.run.scheduleOnce('afterRender', Pcs, function () {\n            if (self.get('cur_fence')) {\n              if (fence_change) {\n                tree_view_onclick(self.get('cur_fence').get('id'));\n              } else {\n                tree_view_select(self.get('cur_fence').get('id'));\n              }\n            }\n            if (self.get('cur_resource')) {\n              if (resource_change) {\n                tree_view_onclick(self.get('cur_resource').get('id'));\n              } else {\n                tree_view_select(self.get('cur_resource').get('id'));\n              }\n            }\n            Pcs.selectedNodeController.reset();\n            disable_checkbox_clicks();\n          });\n        });\n      },\n      error: function(jqhxr,b,c) {\n        try {\n          var obj = $.parseJSON(jqhxr.responseText);\n          if (obj.notauthorized == \"true\") {\n            location.reload();\n          }\n        } catch(e) {\n          console.log(\"Error: Unable to parse json for cluster_status\")\n        }\n      },\n      complete: function() {\n        hide_loading_screen();\n        Pcs.get('updater').update_finished();\n      }\n    });\n  }\n});\n\nPcs.GroupSelectorComponent = Ember.Component.extend({\n  resource_id: null,\n  resource: function() {\n    var id = this.get(\"resource_id\");\n    if (id) {\n      var resource = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (resource) {\n        return resource;\n      }\n    }\n    return null;\n  }.property(\"resource_id\"),\n  resource_change: function() {\n    this._refresh_fn();\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }.observes(\"resource\", \"resource_id\"),\n  group_list: [],\n  group_select_content: function() {\n    var list = [];\n    $.each(this.getWithDefault(\"group_list\", []), function(_, group) {\n      list.push({\n        name: group,\n        value: group\n      });\n    });\n    return list;\n  }.property(\"group_list\"),\n  group_select_value: null,\n  group: function() {\n    var id = this.get(\"group_select_value\");\n    if (id) {\n      var group = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (group) {\n        return group;\n      }\n    }\n    return null;\n  }.property(\"group_select_value\"),\n  position_select_content: [\n    {\n      name: \"before\",\n      value: \"before\"\n    },\n    {\n      name: \"after\",\n      value: \"after\"\n    }\n  ],\n  position_select_value: null,\n  position_select_value_changed: function() {\n  }.observes(\"position_select_value\"),\n  resource_select_content: [],\n  resource_select_value: null,\n  group_select_value_changed: function () {\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }.observes(\"group_select_value\"),\n  actions: {\n    refresh: function() {\n      this.set(\"group_list\", Pcs.resourcesContainer.get(\"group_list\"));\n      this._refresh_fn();\n      this._update_resource_select_content();\n      this._update_resource_select_value();\n    }\n  },\n  _refresh_fn: function() {\n    var id = this.get(\"resource_id\");\n    if (id) {\n      var resource = Pcs.resourcesContainer.get_resource_by_id(id);\n      if (resource) {\n        var parent = resource.get(\"parent\");\n        if (parent && parent.get(\"is_group\")) {\n          this.set(\"group_select_value\", parent.get(\"id\"));\n          return;\n        }\n      }\n    }\n    this.set(\"group_select_value\", null);\n  },\n  _update_resource_select_content: function() {\n    var self = this;\n    var group = self.get(\"group\");\n    if (!group) {\n      self.set(\"resource_select_content\", []);\n      return;\n    }\n    var list = [];\n    var resource_id;\n    $.each(group.get(\"members\"), function(_, resource) {\n      resource_id = resource.get(\"id\");\n      if (resource_id != self.get(\"resource_id\")) {\n        list.push({\n          name: resource_id,\n          value: resource_id\n        });\n      }\n    });\n    self.set(\"resource_select_content\", list);\n  },\n  _update_resource_select_value: function() {\n    var self = this;\n    var group = self.get(\"group\");\n    var resource = self.get(\"resource\");\n    if (!group) {\n      self.set(\"resource_select_value\", null);\n      return;\n    }\n    var resource_list = group.get(\"members\");\n    if (\n      !resource ||\n      !resource.get(\"parent\") ||\n      resource.get(\"parent\").get(\"id\") != group.get(\"id\")\n    ) {\n      self.set(\"position_select_value\", \"after\");\n      self.set(\"resource_select_value\", resource_list.slice(-1)[0].get(\"id\"));\n    } else {\n      var index = resource_list.findIndex(function(item) {\n        return item.get(\"id\") == resource.get(\"id\");\n      });\n      if (index == 0) {\n        self.set(\"position_select_value\", \"before\");\n        self.set(\n          \"resource_select_value\",\n          (resource_list[1]) ? resource_list[1].get(\"id\") : null // second\n        );\n      } else if (index == -1) {\n        self.set(\"position_select_value\", \"after\");\n        self.set(\"resource_select_value\", resource_list.slice(-1)[0].get(\"id\"));\n      } else {\n        self.set(\"position_select_value\", \"after\");\n        self.set(\"resource_select_value\", resource_list[index-1].get(\"id\"));\n      }\n    }\n  },\n  group_input_name: \"group_id\",\n  classNames: \"group-selector\",\n  init: function() {\n    this._super();\n    if (this.get(\"resource_id\")) {\n      this.set(\"group_list\", Pcs.resourcesContainer.get(\"group_list\"));\n    }\n    this._refresh_fn();\n    this._update_resource_select_content();\n    this._update_resource_select_value();\n  }\n});\n\nPcs.ValueSelectorComponent = Ember.Component.extend({\n  tagName: 'select',\n  attributeBindings: ['name'],\n  name: null,\n  prompt: \"Select one value\",\n  show_prompt: true,\n  content: [],\n  value: null,\n  _change: function() {\n    var selectedIndex = this.$()[0].selectedIndex,\n      content = this.get('content'),\n      prompt = this.get('show_prompt');\n\n    if (!content || !content.get('length')) { return; }\n    if (prompt && selectedIndex === 0) { this.set('value', \"\"); return; }\n\n    if (prompt) { selectedIndex -= 1; }\n    this.set('value', content.objectAt(selectedIndex)['value']);\n  },\n  init: function() {\n    this._super();\n    this.on(\"change\", this, this._change);\n  }\n});\n\nPcs.ClusterPropertyComponent = Ember.Component.extend({\n  tagName: 'tr',\n  prop: null,\n  attributeBindings: ['name'],\n  boolean_options: [\n    {\n      name: \"true\",\n      value: \"true\"\n    },\n    {\n      name: \"false\",\n      value: \"false\"\n    }\n  ]\n});\n\nPcs.ParametersTableComponent = Ember.Component.extend({\n  parameters: [],\n  show_content: false,\n  show_title: true,\n  table_name: \"\",\n  table_id: \"\",\n  table_id_suffix: \"\",\n  table_id_full: function() {\n    return this.get(\"table_id\") + this.get(\"table_id_suffix\");\n  }.property(\"table_id\", \"table_id_suffix\"),\n  content_style: function() {\n    return (\"display: \" + (this.get(\"show_content\") ? \"block\" : \"none\"));\n  }.property(\"show_content\"),\n  actions: {\n    toggleBody: function() {\n      this.toggleProperty('show_content');\n    }\n  }\n});\n\nPcs.ParametersTableElementComponent = Ember.Component.extend({\n  tagName: \"tr\"\n});\n\nPcs.UtilizationTableComponent = Ember.Component.extend({\n  entity: null,\n  type: \"node\", // node or resource\n  form_id: Ember.computed(\"type\", function() {\n    return \"new_\" + this.get(\"type\") + \"_utilization\";\n  }),\n  show_content: false,\n  utilization: [],\n  last_count: 0,\n  util_count: function() {\n    var l = 0;\n    if (this.utilization) {\n      l = this.utilization.length;\n    }\n    //this is needed for not showing/hiding table on each update\n    if (this.last_count != l) {\n      if (l > 0) {\n        this.set('show_content', true);\n      } else {\n        this.set('show_content', false);\n      }\n    }\n    this.set(\"last_count\", l);\n    return l;\n  }.property(\"utilization\"),\n  actions: {\n    toggleBody: function() {\n      this.toggleProperty('show_content');\n    },\n    remove: function(name) {\n      set_utilization(this.type, this.entity.get(\"id\"), name, \"\");\n    },\n    add: function(form_id) {\n      var id = \"#\" + form_id;\n      var name = $(id + \" input[name='new_utilization_name']\").val().trim();\n      if (name == \"\") {\n        alert(\"Name of utilization attribute should be non-empty string.\");\n      }\n      var value = $(id + \" input[name='new_utilization_value']\").val().trim();\n      if (!is_integer(value)) {\n        alert(\"Value of utilization attribute has to be integer.\");\n        return;\n      }\n      set_utilization(\n        this.type,\n        this.entity.get(\"id\"),\n        name,\n        value\n      );\n      fade_in_out($(id));\n      $(id + \" input\").val(\"\");\n    }\n  }\n});\n\nPcs.Updater = Ember.Object.extend({\n  timeout: 20000,\n  first_run: true,\n  async: true,\n  autostart: true,\n  started: false,\n  in_progress: false,\n  waiting: false,\n  update_function: null,\n  update_target: null,\n  timer: null,\n\n  start: function() {\n    this.set('started', true);\n    this.update();\n  },\n\n  stop: function() {\n    this.set('started', false);\n    this.cancel_timer();\n  },\n\n  cancel_timer: function() {\n    var self = this;\n    var timer = self.get('timer');\n    if (timer) {\n      self.set('timer', null);\n      Ember.run.cancel(timer);\n    }\n  },\n\n  update: function() {\n    var self = this;\n    if (!self.get('update_function')) {\n      console.log('No update_function defined!');\n      return;\n    }\n    self.cancel_timer();\n    self.set('waiting', false);\n    if (self.get('in_progress')) {\n      self.set('waiting', true);\n    } else {\n      self.set('in_progress', true);\n      self.get('update_function').apply(self.get('update_target'), [self.get('first_run')]);\n      self.set('first_run', false);\n      if (!self.get('async')) {\n        self.update_finished();\n      }\n    }\n  },\n\n  update_finished: function() {\n    var self = this;\n    if (self.get('waiting')) {\n      Ember.run.next(self, self.update);\n    } else if (self.get('started')) {\n      self.set('timer', Ember.run.later(self, self.update, self.get('timeout')));\n    }\n    self.set('in_progress', false);\n  },\n\n  init: function() {\n    var self = this;\n    if (!self.get('update_target')) {\n      self.set('update_target', self);\n    }\n    if (self.get('autostart')) {\n      self.start();\n    }\n  }\n});\n\nPcs.resourcesContainer = Ember.Object.create({\n  resource_map: {},\n  top_level_resource_map: {},\n  fence_list: [],\n  resource_list: [],\n  resource_id_to_load: null,\n  fence_id_to_load: null,\n  cur_resource: null,\n  cur_fence: null,\n  constraints: {},\n  group_list: [],\n  data_version: null,\n  new_resource_agent_metadata: null,\n  new_fence_agent_metadata: null,\n\n  get_resource_by_id: function(resource_id) {\n    var resource_map = this.get('resource_map');\n    if (resource_id in resource_map)\n      return resource_map[resource_id];\n    return null;\n  },\n\n  get_family_list: function(parent) {\n    var family = [];\n    family.push(parent);\n    switch (parent[\"class_type\"]) {\n      case \"group\":\n        $.each(parent.get('members'), function(index, member) {\n          family = family.concat(Pcs.resourcesContainer.get_family_list(member));\n        });\n        break;\n      case \"clone\":\n      case \"master\":\n        family = family.concat(Pcs.resourcesContainer.get_family_list(parent.get('member')));\n        break;\n    }\n    return family;\n  },\n\n  update_meta_attr: function(resource_id, attr, value) {\n    value = typeof value !== 'undefined' ? value.trim() : \"\";\n    var data = {\n      res_id: resource_id,\n      key: attr,\n      value: value\n    };\n\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'add_meta_attr_remote',\n      data: data,\n      timeout: pcs_timeout,\n      error: function (xhr, status, error) {\n        alert(\n          \"Unable to update meta attribute '\" + attr + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  enable_resource: function(resource_id) {\n    if (resource_id == null) {\n      return;\n    }\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'resource_start',\n      data: {resource: resource_id},\n      timeout: pcs_timeout,\n      success: function(data) {\n        if (data['error']) {\n          alert(\"Unable to enable resource '\" + resource_id + \"': (\" + data['stderr'] + \")\");\n        }\n      },\n      error: function(xhr, status, error) {\n        alert(\n          \"Unable to enable resource '\" + resource_id + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  disable_resource: function(resource_id) {\n    if (resource_id == null) {\n      return;\n    }\n    ajax_wrapper({\n      type: 'POST',\n      url: get_cluster_remote_url() + 'resource_stop',\n      data: {resource: resource_id},\n      timeout: pcs_timeout,\n      success: function(data) {\n        if (data['error']) {\n          alert(\"Unable to disable resource '\" + resource_id + \"': (\" + data['stderr'] + \")\");\n        }\n      },\n      error: function(xhr, status, error) {\n        alert(\n          \"Unable to disable resource '\" + resource_id + \"' \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      },\n      complete: function() {\n        Pcs.update();\n      }\n    });\n  },\n\n  delete_resources: function(type, resource_list) {\n    var self = this;\n    var list = self.get(type);\n    $.each(resource_list, function(i, resource) {\n      list.removeObject(resource);\n    });\n  },\n\n  delete_unused_resources: function(type, used_map) {\n    var self = this;\n    var to_delete = [];\n    var list = self.get(type);\n    $.each(list, function(i, resource) {\n      if (!(resource.get('id') in used_map)) {\n        to_delete.push(resource);\n      }\n    });\n    self.delete_resources(type, to_delete);\n  },\n\n  update: function(data) {\n    var self = this;\n    self.set('group_list', data['groups']);\n    self.set(\"data_version\", data['status_version']);\n    var resources = data[\"resource_list\"];\n    var resource_obj = null;\n    var resource_id;\n    var new_resource_map = {};\n    var top_resource_map = {};\n    $.each(resources, function(index, resource) {\n      var update = false;\n      resource_id = resource.id;\n      if (resource_id in self.get('top_level_resource_map')) {\n        resource_obj = self.get('top_level_resource_map')[resource_id];\n        resource_obj.update(resource_obj, resource);\n        update = true;\n      } else {\n        switch (resource[\"class_type\"]) {\n          case \"primitive\":\n            resource_obj = Pcs.PrimitiveObj.create(resource);\n            break;\n          case \"group\":\n            resource_obj = Pcs.GroupObj.create(resource);\n            break;\n          case \"clone\":\n            resource_obj = Pcs.CloneObj.create(resource);\n            break;\n          case \"master\":\n            resource_obj = Pcs.MasterSlaveObj.create(resource);\n            break;\n        }\n      }\n\n      top_resource_map[resource_obj.get('id')] = resource_obj;\n      $.each(self.get_family_list(resource_obj), function(index, resource) {\n        new_resource_map[resource.get('id')] = resource;\n      });\n\n      if (!update) {\n        if (resource_obj.stonith) {\n          self.get('fence_list').pushObject(resource_obj);\n        } else {\n          self.get('resource_list').pushObject(resource_obj);\n        }\n      }\n    });\n\n    self.set('top_level_resource_map', top_resource_map);\n    self.set('resource_map', new_resource_map);\n\n    self.delete_unused_resources(\"fence_list\", top_resource_map);\n    self.delete_unused_resources(\"resource_list\", top_resource_map);\n\n    var constraints = constraint_resort(data[\"constraints\"]);\n    self.set('constraints', constraints);\n    var resource_map = self.get('resource_map');\n    $.each(constraints, function(const_type, cons) {\n      $.each(resource_map, function(resource_id, resource_obj) {\n        if (resource_id in cons) {\n          resource_obj.set(const_type, cons[resource_id]);\n        } else {\n          resource_obj.set(const_type, []);\n        }\n      });\n    });\n    $.each(resource_map, function(resource_id, resource_obj) {\n      resource_obj.set('group_list', self.get('group_list'));\n    });\n    self.set('resource_list', Ember.copy(self.get('resource_list')).sort(function(a,b){return a.get('id').localeCompare(b.get('id'))}));\n    self.set('fence_list', Ember.copy(self.get('fence_list')).sort(function(a,b){return a.get('id').localeCompare(b.get('id'))}));\n  }\n});\n\nPcs.resourcesContainer.reopen({\n  is_version_1: function() {\n    return (this.get(\"data_version\") == '1');\n  }.property('data_version'),\n  groups_enum: function() {\n    var self = this;\n    var res = [];\n    $.each(self.getWithDefault(\"group_list\", []), function(_, group) {\n      res.push({\n        name: group,\n        value: group\n      });\n    });\n    return res;\n  }.property(\"group_list\")\n});\n\nPcs.ResourceObj = Ember.Object.extend({\n  id: null,\n  _id: Ember.computed.alias('id'),\n  name: Ember.computed.alias('id'),\n  treeview_element_id: function() {\n    if (this.get(\"id\")) {\n      return this.get(\"id\") + \"-treeview-element\";\n    }\n  }.property(\"id\"),\n  parent: null,\n  meta_attr: [],\n  meta_attributes: Ember.computed.alias('meta_attr'),\n  disabled: false,\n  error_list: [],\n  warning_list: [],\n  group_list: [],\n  get_group_id: function() {\n    var self = this;\n    var p = self.get('parent');\n    if (p && p.get('class_type') == 'group') {\n      return p.get('id');\n    }\n    return null;\n  }.property('parent'),\n  status: \"unknown\",\n  class_type: null, // property to determine type of the resource\n  resource_type: function() { // this property is just for displaying resource type in GUI\n    var t = this.get(\"class_type\");\n    return t[0].toUpperCase() + t.slice(1);\n  }.property(\"class_type\"),\n  res_type: Ember.computed.alias('resource_type'),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(\n      this.get(\"status_val\"), this.get(\"is_unmanaged\")\n    );\n    return \"<div style=\\\"float:left;margin-right:6px;height:16px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status_val\"),\n  status_val: function() {\n    var status_val = get_status_value(this.get('status'));\n    if (this.get('warning_list').length && status_val != get_status_value('disabled'))\n      status_val = get_status_value(\"warning\");\n    if (this.get('error_list').length)\n      status_val = get_status_value(\"error\");\n    if ((get_status_value(this.get('status')) - status_val) < 0) {\n      return get_status_value(this.get('status'));\n    } else {\n      return status_val;\n    }\n  }.property('status', 'error_list.@each.message', 'warning_list.@each.message'),\n  status_color: function() {\n    return get_status_color(this.get(\"status_val\"), this.get(\"is_unmanaged\"));\n  }.property(\"status_val\"),\n  status_style: function() {\n    var color = get_status_color(\n      this.get(\"status_val\"), this.get(\"is_unmanaged\")\n    );\n    return \"color: \" + color + ((color != \"green\")? \"; font-weight: bold;\" : \"\");\n  }.property(\"status_val\"),\n  show_status: function() {\n    return '<span style=\"' + this.get('status_style') + '\">'\n      + htmlEncode(this.get('status')) + (this.get(\"is_unmanaged\") ? \" (unmanaged)\" : \"\")\n      + '</span>';\n  }.property(\"status_style\", \"disabled\"),\n  status_class: function() {\n    if (\n      this.get(\"status_val\") == get_status_value(\"ok\") ||\n      this.get(\"status\") == \"disabled\"\n    ) {\n      return (\n        Pcs.clusterController.get(\"show_all_resources\") ? \"\" : \"hidden \"\n        ) + \"default-hidden\";\n    } else {\n      return \"\";\n    }\n  }.property(\"status_val\", \"status\"),\n  status_class_fence: function() {\n    var show = ((Pcs.clusterController.get(\"show_all_fence\"))? \"\" : \"hidden \");\n    return ((this.get(\"status_val\") == get_status_value(\"ok\")) ? show + \"default-hidden\" : \"\");\n  }.property(\"status\", \"status_val\"),\n  tooltip: function() {\n    var self = this;\n    var out = \"\";\n    if (self.error_list.length > 0) {\n      out += \"<span style='color: red;  font-weight: bold;'>ERRORS:</span><br>\\n\";\n      out += get_formated_html_list(self.error_list);\n    }\n    if (self.warning_list.length > 0) {\n      out += \"<span style='color: orange;  font-weight: bold;'>WARNINGS:</span><br>\\n\";\n      out += get_formated_html_list(self.warning_list);\n    }\n    return out;\n  }.property(\"error_list.@each\", \"warning_list.@each\"),\n  span_class: function() {\n    switch (this.get(\"status_val\")) {\n      case get_status_value(\"failed\"):\n        return \"status-error\";\n      case get_status_value(\"warning\"):\n      case get_status_value(\"disabled\"):\n        return \"status-warning\";\n      default:\n        return \"\";\n    }\n  }.property(\"status_val\"),\n  show_group_selector: function() {\n    var parent = this.get(\"parent\");\n    return !(\n      parent &&\n      parent.is_group &&\n      parent.get(\"parent\") &&\n      Pcs.resourcesContainer.get(\"is_version_1\")\n    );\n  }.property(),\n\n  location_constraints: [],\n  ordering_constraints: [],\n  ordering_set_constraints: [],\n  colocation_constraints: [],\n  colocation_set_constraints: [],\n\n  get_map: function() {\n    var self = this;\n    var map = {};\n    map[self.get('id')] = self;\n    return map;\n  },\n\n  get_full_warning_list: function() {\n    var self = this;\n    var warning_list = [];\n    $.each(self.get_map(), function(name, resource){\n      warning_list = warning_list.concat(resource.get('warning_list'));\n    });\n    return warning_list;\n  },\n\n  get_full_error_list: function() {\n    var self = this;\n    var error_list = [];\n    $.each(self.get_map(), function(name, resource){\n      error_list = error_list.concat(resource.get('error_list'));\n    });\n    return error_list;\n  },\n\n  update: function(self, data) {\n    $.each(data, function(k, v) {\n      self.set(k, v);\n    });\n    self.refresh();\n  }\n});\n\nPcs.ResourceStatusObj = Ember.Object.extend({\n  id: null,\n  resource_agent: null,\n  managed: false,\n  failed: false,\n  role: null,\n  active: false,\n  orphaned: false,\n  failure_ignored: false,\n  nodes_running_on: 0,\n  pending: null,\n  node: null\n});\n\nPcs.ResourceOperationObj = Ember.Object.extend({\n  call_id: 0,\n  crm_debug_origin: null,\n  crm_feature_set: null,\n  exec_time: 0,\n  exit_reason: null,\n  id: null,\n  interval: 0,\n  last_rc_change: 0,\n  last_run: 0,\n  on_node: null,\n  op_digest: null,\n  operation: null,\n  operation_key: null,\n  op_force_restart: null,\n  op_restart_digest: null,\n  op_status: 0,\n  queue_time: 0,\n  rc_code: 0,\n  transition_key: null,\n  transition_magic: null\n});\n\nPcs.PrimitiveObj = Pcs.ResourceObj.extend({\n  resource_agent: null,\n  agentname: null,\n  provider: null,\n  type: null,\n  stonith: false,\n  instance_attr: [],\n  instance_status: [],\n  operations: [],\n  utilization: [],\n  is_unmanaged: function() {\n    var instance_status_list = this.get(\"instance_status\");\n    if (!instance_status_list) {\n      return true;\n    }\n    var is_managed = true;\n    $.each(instance_status_list, function(_, instance_status) {\n      is_managed = is_managed && instance_status.get(\"managed\");\n    });\n    return !is_managed;\n  }.property(\"instance_status.@each.managed\"),\n  resource_type: function() {\n    var agent = this.get(\"agentname\");\n    if (agent) {\n      return agent.replace(\"::\", \":\");\n    }\n    return agent;\n  }.property(\"agentname\"),\n  is_primitive: true,\n  nodes_running_on: function() {\n    var self = this;\n    var nodes = [];\n    var node = null;\n    $.each(self.get('instance_status'), function(index, status) {\n      node = status.get('node');\n      if (node)\n        nodes.push(node.name);\n    });\n    return nodes;\n  }.property('instance_status.@each.node'),\n  is_in_group: function() {\n    var self = this;\n    var p = self.get('parent');\n    return (p && p.get('class_type') == 'group');\n  }.property('parent'),\n  nodes_running_on_string: function() {\n    return this.get('nodes_running_on').join(', ');\n  }.property('nodes_running_on'),\n\n  refresh: function() {\n    var self = this;\n    var stat = self.get(\"crm_status\");\n    var new_stat = [];\n    $.each(stat, function(i,v) {\n      new_stat.push(Pcs.ResourceStatusObj.create(v));\n    });\n    var ops = self.get(\"operations\");\n    var new_ops = [];\n    $.each(ops, function(i,v) {\n      new_ops.push(Pcs.ResourceOperationObj.create(v));\n    });\n    self.set(\"instance_status\", new_stat);\n    self.set(\"operations\", new_ops);\n    self.set(\"crm_status\", null);\n  },\n\n  init: function() {\n    this.refresh();\n  }\n});\n\nPcs.GroupObj = Pcs.ResourceObj.extend({\n  members: [],\n  //for internal usage\n  _members: [],\n  is_group: true,\n  children: Ember.computed.alias('members'),\n\n  init: function() {\n    this.refresh();\n  },\n\n  get_map: function() {\n    var self = this;\n    var map = self._super();\n    var members = self.get('members');\n    $.each(members, function(i, m){\n      $.extend(map, m.get_map());\n    });\n    return map;\n  },\n\n  refresh: function() {\n    var self = this;\n    var new_members = [];\n    var member;\n    var old_members = {};\n    // Property 'members' is filled by constructor or update method, therefor\n    // properties 'members' and '_members' are now different. We need to update\n    // only old members and create new objects for new ones.\n    $.each(self.get(\"_members\"), function(_, m) {\n      old_members[m.get(\"id\")] = m;\n    });\n\n    $.each(self.get(\"members\"), function(_,m) {\n      if (m.id in old_members) {\n        old_members[m.id].update(old_members[m.id], m);\n        member = old_members[m.id];\n      } else {\n        member = Pcs.PrimitiveObj.create(m);\n      }\n      member.set('parent', self);\n      new_members.push(member);\n    });\n    self.set(\"members\", new_members);\n    self.set(\"_members\", new_members);\n  }\n});\n\nPcs.MultiInstanceObj = Pcs.ResourceObj.extend({\n  member: null,\n  //for internal usage\n  _member: null,\n  children: function() {\n    return [this.get('member')];\n  }.property('member'),\n  unique: false,\n  managed: false,\n  failed: false,\n  failure_ignored: false,\n  is_multi_instance: true,\n\n  get_map: function() {\n    var self = this;\n    var map = self._super();\n    $.extend(map, self.get('member').get_map());\n    return map;\n  },\n\n  init: function() {\n    this.refresh();\n  },\n\n  refresh: function() {\n    var self = this;\n    var member = self.get(\"member\");\n    var old_member = self.get(\"_member\");\n    var new_member = null;\n    // Property 'member' is filled by constructor or update method, therefor\n    // properties 'member' and '_member' are now different. We need to\n    // create new object only if there is no resource with same id and same\n    // type. Otherwise, we need to create new object.\n    if (!old_member) {\n      old_member = Pcs.resourcesContainer.get_resource_by_id(member.id);\n    }\n    if (\n      old_member &&\n      member.id == old_member.get(\"id\") &&\n      member.class_type == old_member.get(\"class_type\")\n    ) {\n      old_member.update(old_member, member);\n      new_member = old_member;\n    } else {\n      switch (member.class_type) {\n        case \"primitive\":\n          new_member = Pcs.PrimitiveObj.create(member);\n          break;\n        case \"group\":\n          new_member = Pcs.GroupObj.create(member);\n      }\n    }\n    new_member.set('parent', self);\n    self.set(\"member\", new_member);\n    self.set(\"_member\", new_member);\n  }\n});\n\nPcs.CloneObj = Pcs.MultiInstanceObj.extend({\n  is_clone: true\n});\n\nPcs.MasterSlaveObj = Pcs.MultiInstanceObj.extend({\n  masters: [],\n  slaves: [],\n  resource_type: 'Master/Slave'\n});\n\nPcs.ResourceAgentParameter = Ember.Object.extend({\n  name: \"\",\n  readable_name: Ember.computed.alias(\"name\"),\n  form_name: function() {\n    var name = \"_res_param\";\n    var val = this.get(\"value\");\n    name += ((!val || val == \"\") ? \"empty_\" : \"ne_\");\n    return name + this.get(\"name\");\n  }.property(\"name\", \"value\"),\n  type: \"string\",\n  value: null,\n  cur_val: Ember.computed.oneWay(\"value\"),\n  required: false,\n  advanced: false,\n  longdesc: \"\",\n  longdesc_html: function() {\n    return nl2br(htmlEncode(this.get(\"longdesc\")));\n  }.property(\"longdesc\"),\n  shortdesc: \"\",\n  \"default\": null,\n  description: function() {\n    var shortdesc = nl2br(htmlEncode(this.get(\"shortdesc\")));\n    var longdesc = nl2br(htmlEncode(this.get(\"longdesc\")));\n    if (longdesc == shortdesc) longdesc = \"\";\n    var def_val = this.get(\"default\");\n    def_val = nl2br(htmlEncode((def_val) ? def_val : \"\"));\n    var desc = [];\n    if (shortdesc) desc.push(shortdesc);\n    if (longdesc) desc.push(longdesc);\n    if (def_val) desc.push(\"Default value: \" + def_val);\n    return desc.join(\"<br /><br />\");\n  }.property(\"longdesc\", \"shortdesc\", \"default\")\n});\n\nPcs.ResourceAgent = Ember.Object.extend({\n  name: \"\",\n  longdesc: \"\",\n  longdesc_html: function() {\n    return nl2br(htmlEncode(this.get(\"longdesc\")));\n  }.property(\"longdesc\"),\n  shortdesc: \"\",\n  parameters: [],\n  required_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (arg.get(\"required\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  optional_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (!arg.get(\"required\") && !arg.get(\"advanced\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  advanced_parameters: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (!arg.get(\"required\") && arg.get(\"advanced\")) {\n        args.pushObject(arg);\n      }\n    });\n    return args;\n  }.property(\"parameters.@each\"),\n  get_parameter: function(name) {\n    var self = this;\n    var res = null;\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      if (arg && arg.get(\"name\") == name) {\n        res = arg;\n        return false; // break\n      }\n    });\n    return res;\n  },\n  init: function() {\n    var self = this;\n    var args = [];\n    $.each(self.get(\"parameters\"), function(_, arg) {\n      args.pushObject(Pcs.ResourceAgentParameter.create(arg));\n    });\n    self.set(\"parameters\", Ember.copy(args));\n  }\n});\n\nPcs.Router.map(function() {\n  this.route(\"Configuration\", { path: \"configure\"});\n\n  this.resource(\"ACLs\", {path: \"acls/:aclrole_id\"}, function () {\n    this.route(\"new\");\n  });\n  this.route(\"ACLs\", {path: \"acls\"});\n\n  this.resource(\"Fence Devices\", {path: \"fencedevices/:stonith_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Fence Devices\", { path: \"fencedevices\"});\n\n  this.resource(\"Resources\", {path: \"resources/:resource_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Resources\", { path: \"resources\"});\n\n  this.resource(\"Nodes\", {path: \"nodes/:node_id\"}, function () {\n    this.route('new');\n  });\n  this.route(\"Nodes\", { path: \"nodes\"});\n\n//  this.resource(\"Resource\", {path: 'resources/:resource_id'});\n  this.route(\"Manage\", {path: \"manage\"});\n  this.route(\"Wizards\", {path: \"wizards\"});\n  this.route(\"Default Route\", { path: \"*x\" });\n});\n\nPcs.ManageRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"MANAGE\");\n  }\n});\n\nPcs.WizardsRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"WIZARDS\");\n  }\n});\n\nPcs.IndexRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (\n      window.location.pathname == \"/manage\"\n      ||\n      window.location.pathname == \"/manage/\"\n    ) {\n      select_menu(\"MANAGE\");\n    }\n    else if (\n      window.location.pathname == \"/permissions\"\n      ||\n      window.location.pathname == \"/permissions/\"\n    ) {\n      select_menu(\"PERMISSIONS\");\n      Ember.run.scheduleOnce('afterRender', this, permissions_load_all);\n    }\n    else {\n      select_menu(\"NODES\");\n    }\n  }\n});\n\nPcs.DefaultRouteRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (window.location.pathname.substring(0,7) == \"/manage\")\n      select_menu(\"MANAGE\");\n    else\n      select_menu(\"NODES\");\n  }\n});\n\nPcs.FenceDevicesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"FENCE DEVICES\");\n  },\n  model: function(params) {\n    Pcs.resourcesContainer.set('fence_id_to_load', params.stonith_id);\n    return params.stonith_id;\n  }\n});\n\nPcs.NodesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"NODES\");\n  },\n  model: function(params) {\n    Pcs.opening_node = params.node_id;\n    return null;\n  }\n});\n\nPcs.ACLsRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"ACLS\");\n  },\n  model: function(params) {\n    Pcs.opening_aclrole = params.aclrole_id;\n    return null;\n  }\n});\n\nPcs.ConfigurationRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    select_menu(\"CONFIGURE\");\n  }\n});\n\nPcs.ResourcesRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    if (model) {\n      select_menu(\"RESOURCES\",model.name);\n    } else {\n      select_menu(\"RESOURCES\");\n    }\n  },\n  model: function(params) {\n    Pcs.resourcesContainer.set('resource_id_to_load', params.resource_id);\n    return params.resource_id;\n  }\n});\n\nPcs.Setting = Ember.Object.extend({\n  name: null,\n  readable_name: null,\n  form_name: function() {\n    return \"config[\" + this.get(\"name\") + \"]\";\n  }.property(\"name\"),\n  value: null,\n  cur_val: Ember.computed.oneWay('value'),\n  type: null,\n  source: \"\",\n  \"default\": null,\n  advanced: false,\n  longdesc: \"\",\n  shortdesc: \"\",\n  description: function() {\n    var self = this;\n    var desc = $(\"<div>\").text(self.get(\"shortdesc\")).html();\n    if (self.get(\"longdesc\")) {\n      desc += \"<br><br>\";\n      desc += $(\"<div>\").text(self.get(\"longdesc\")).html();\n    }\n    desc += \"<br><br>\";\n    desc += $(\"<div>\").text(\"Default value: \" + self.get(\"default\")).html();\n    return desc;\n  }.property(\"longdesc\", \"shortdesc\"),\n  is_boolean: function() {\n    return (this.get(\"type\") == \"boolean\");\n  }.property(\"type\"),\n  is_enum: function() {\n    return (this.get(\"type\") == \"enum\");\n  }.property(\"type\"),\n  \"enum\": [],\n  enum_show: function() {\n    var self = this;\n    var out = [];\n    $.each(self.get(\"enum\"), function(_, val) {\n      out.push({\n        name: val,\n        value: val\n      });\n    });\n    return out;\n  }.property(\"enum.@each\")\n});\n\nPcs.Clusternode = Ember.Object.extend({\n  name: null,\n  id: Ember.computed.alias(\"name\"),\n  status: null,\n  status_unknown: function() {\n    return this.get('status') == \"unknown\";\n  }.property(\"status\"),\n  status_val: function() {\n    var status_val = get_status_value(this.get('status'));\n    if (this.get('warning_list').length)\n      status_val = get_status_value(\"warning\");\n    if (this.get('error_list').length)\n      status_val = get_status_value(\"error\");\n    if ((get_status_value(this.get('status')) - status_val) < 0) {\n      return get_status_value(this.get('status'));\n    } else {\n      return status_val;\n    }\n  }.property('status', 'error_list.@each.message', 'warning_list.@each.message'),\n  status_style: function() {\n    var color = get_status_color(this.get(\"status_val\"));\n    return \"color: \" + color + ((color != \"green\")? \"; font-weight: bold;\" : \"\");\n  }.property(\"status_val\"),\n  status_class: function() {\n    var show = ((Pcs.clusterController.get(\"show_all_nodes\"))? \"\" : \"hidden \");\n    return (\n      (this.get(\"status_val\") == get_status_value(\"ok\") || this.status == \"standby\" ||\n      this.status == \"maintenance\")\n        ? show + \"default-hidden\" : \"\"\n    );\n  }.property(\"status_val\"),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(this.get(\"status_val\"));\n    return \"<div style=\\\"float:left;margin-right:6px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status_val\"),\n  error_list: [],\n  warning_list: [],\n  tooltip: function() {\n    var self = this;\n    var out = \"\";\n    if (self.error_list && self.error_list.length > 0) {\n      out += \"<span style='color: red;  font-weight: bold;'>ERRORS:</span><br>\\n\";\n      out += get_formated_html_list(self.error_list);\n    }\n    if (self.warning_list && self.warning_list.length > 0) {\n      out += \"<span style='color: orange;  font-weight: bold;'>WARNINGS:</span><br>\\n\";\n      out += get_formated_html_list(self.warning_list);\n    }\n    return out;\n  }.property(\"error_list\", \"warning_list\"),\n  quorum: null,\n  quorum_show: function() {\n    if (this.status == \"unknown\" || this.status == \"offline\" || this.get('quorum') === null) {\n      return '<span style=\"color: orange; font-weight: bold;\">unknown</span>';\n    } else if (this.quorum) {\n      return '<span style=\"color: green;\">YES</span>';\n    } else {\n      return '<span style=\"color: red; font-weight: bold;\">NO</span>';\n    }\n  }.property(\"status\", \"quorum\"),\n  cur_node: false,\n  checked: false,\n  resources_running: [],\n  url: function() { return \"window.location='/nodes/\" + this.get(\"name\")+\"'\"\n  }.property(),\n  trclass: function(){\n    if (this.cur_node == true)\n      return \"node_selected\";\n  }.property(\"cur_node\"),\n  onmouseover: function(){\n    if (this.cur_node == true)\n      return \"\"\n    else\n      return \"hover_over(this);\"\n  }.property(\"cur_node\"),\n  onmouseout: function(){\n    if (this.cur_node == true)\n      return \"\"\n    else\n      return \"hover_out(this);\"\n  }.property(\"cur_node\"),\n  showArrow: function(){\n    if (this.cur_node != true)\n      return \"display:none;\"\n    else\n      return \"\"\n  }.property(\"cur_node\"),\n  node_name_style: function() {\n    if (this.up && !this.get('pacemaker_maintenance')) {\n      return \"\";\n    } else {\n      if (this.get(\"pacemaker_standby\") || this.get(\"pacemaker_maintenance\"))\n        return \"color: #ff6600\";\n      else\n        return \"color:red\";\n    }\n  }.property(\"up\",\"pacemaker_standby\",\"pacemaker_maintenance\"),\n  pacemaker_standby: null,\n  pacemaker_maintenance: Ember.computed.alias('is_in_maintenance'),\n  corosync_enabled: null,\n  pacemaker_enabled: null,\n  pcsd_enabled: null,\n  standby_style: function () {\n    if (this.pacemaker_standby)\n      return \"display: none;\";\n    else\n      return \"\";\n  }.property(\"pacemaker_standby\"),\n  unstandby_style: function() {\n    if (this.pacemaker_standby)\n      return \"\";\n    else\n      return \"display: none;\";\n  }.property(\"pacemaker_standby\"),\n  corosync_startup: function() {\n    if (this.corosync_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"corosync_enabled\"),\n  pacemaker_startup: function() {\n    if (this.pacemaker_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"pacemaker_enabled\"),\n  pcsd_startup: function() {\n    if (this.pcsd_enabled)\n      return \"Enabled\";\n    else\n      return \"Disabled\";\n  }.property(\"pcsd_enabled\"),\n  location_constraints: null,\n  node_attrs: [],\n  utilization: [],\n  is_in_maintenance: function() {\n    var self = this;\n    var result = false;\n    $.each(self.get('node_attrs'), function(_, attr) {\n      if (attr[\"name\"] == \"maintenance\") {\n        result = is_cib_true(attr[\"value\"]);\n        return false; // break foreach loop\n      }\n    });\n    return result;\n  }.property('node_attrs'),\n  fence_levels: [],\n  pcsd: null,\n  corosync_daemon: null,\n  pacemaker_daemon: null,\n  services: [],\n  sbd_config: null,\n  sbd_status: function() {\n    if (this.get(\"services\") && this.get(\"services\")[\"sbd\"]) {\n      return this.get(\"services\")[\"sbd\"];\n    } else {\n      return {\n        installed: null,\n        enabled: null,\n        running: null\n      };\n    }\n  }.property(\"services\"),\n  is_sbd_enabled: function() {\n    return this.get(\"sbd_status\").enabled;\n  }.property(\"sbd_status\"),\n  is_sbd_running: function() {\n    return this.get(\"sbd_status\").running;\n  }.property(\"sbd_status\"),\n  is_sbd_installed: function() {\n    return this.get(\"sbd_status\").installed;\n  }.property(\"sbd_status\"),\n  sbd_status_str: function() {\n    var running = 'Stopped';\n    var status_class = 'status-offline';\n    if (this.get(\"is_sbd_running\") == null) {\n      running = 'Unknown';\n      status_class = 'status-unknown';\n    } else if (this.get(\"is_sbd_running\")) {\n      status_class = 'status';\n      running = 'Running';\n    }\n    var starting = 'Disabled';\n    if (this.get(\"is_sbd_enabled\") == null) {\n      starting = 'Unknown';\n    } else if (this.get(\"is_sbd_enabled\")) {\n      starting = 'Enabled';\n    }\n    return '<span id=\"sbd_status\" style=\"float:left\" class=\"' + status_class\n      + '\">' + running + ' (' + starting + ')</span>';\n  }.property(\"is_sbd_enabled\", \"is_sbd_enabled\"),\n  sbd_watchdog: function() {\n    if (this.get(\"sbd_config\") && this.get(\"sbd_config\")[\"SBD_WATCHDOG_DEV\"]) {\n      return this.get(\"sbd_config\")[\"SBD_WATCHDOG_DEV\"];\n    } else {\n      return \"<unkown>\";\n    }\n  }.property(\"sbd_config\")\n});\n\nPcs.Aclrole = Ember.Object.extend({\n  name: null,\n  cur_role: false,\n  checked: false,\n  description: \"\",\n  user_list: null,\n  group_list: null,\n  trclass: function() {\n    return this.cur_role ? \"node_selected\" : \"\";\n  }.property(\"cur_role\"),\n  onmouseover: function() {\n    return this.cur_role ? \"\" : \"hover_over(this);\"\n  }.property(\"cur_role\"),\n  onmouseout: function() {\n    return this.cur_role ? \"\" : \"hover_out(this);\"\n  }.property(\"cur_role\"),\n  showArrow: function(){\n    return this.cur_role ? \"\" : \"display:none\";\n  }.property(\"cur_role\"),\n});\n\nPcs.Cluster = Ember.Object.extend({\n  name: null,\n  url_link: function(){return get_cluster_remote_url(this.name) + \"main\";}.property(\"name\"),\n  input_name: function(){return \"clusterid-\" + this.name;}.property(\"name\"),\n  div_id: function(){return \"cluster_info_\" + this.name}.property(\"name\"),\n  status: \"unknown\",\n  status_unknown: function() {\n    return this.status == \"unknown\";\n  }.property(\"status\"),\n  forbidden: function() {\n    var out = false;\n    $.each(this.get(\"error_list\"), function(key, value) {\n      if (\"forbidden\" == value[\"type\"]) {\n        out = true;\n      }\n    });\n    return out;\n  }.property(\"error_list\"),\n  status_icon: function() {\n    var icon_class = get_status_icon_class(get_status_value(this.get('status')));\n    return \"<div style=\\\"float:left;margin-right:6px;\\\" class=\\\"\" + icon_class + \" sprites\\\"></div>\";\n  }.property(\"status\"),\n  quorum_show: function() {\n    if (this.get('status') == \"unknown\") {\n      return \"<span style='color:orange'>(quorate unknown)</span>\"\n    } else if (!this.get('quorate')) {\n      return \"<span style='color: red'>(doesn't have quorum)</span>\"\n    } else {\n      return \"\"\n    }\n  }.property(\"status\", \"quorate\"),\n  nodes: [],\n  nodes_failed: 0,\n  resource_list: [],\n  resources_failed: 0,\n  fence_list: [],\n  fence_failed: 0,\n  error_list: [],\n  warning_list: [],\n  need_reauth: false,\n  quorate: false,\n\n  get_num_of_failed: function(type) {\n    var num = 0;\n    $.each(this.get(type), function(key, value) {\n      if (value.get(\"status_val\") < get_status_value(\"ok\") &&\n        [\n          \"unmanaged\", \"disabled\", \"standby\", \"maintenance\"\n        ].indexOf(value.status) == -1\n      ) {\n        num++;\n      }\n    });\n    return num;\n  },\n\n  status_sort: function(a,b) {\n    if (a.get(\"status_val\") == b.get(\"status_val\"))\n      return ((a.status == b.status) ? a.get('name').localeCompare(b.get('name')) : ((a.status > b.status) ? 1 : -1));\n    return status_comparator(a.status, b.status)\n  },\n\n  add_resources: function(data) {\n    var self = this;\n    var resources = [];\n    var fence = [];\n    var resource_obj;\n    $.each(data, function (index, resource) {\n      switch (resource[\"class_type\"]) {\n        case \"primitive\":\n          resource_obj = Pcs.PrimitiveObj.create(resource);\n          break;\n        case \"group\":\n          resource_obj = Pcs.GroupObj.create(resource);\n          break;\n        case \"clone\":\n          resource_obj = Pcs.CloneObj.create(resource);\n          break;\n        case \"master\":\n          resource_obj = Pcs.MasterSlaveObj.create(resource);\n          break;\n      }\n\n      var url_link = get_cluster_remote_url(self.get('name')) + \"main#/\" +\n        (resource_obj.get('stonith') ? \"fencedevices/\" : \"resources/\") +\n        resource_obj.get('id');\n      resource_obj.set('url_link', url_link);\n\n      resource_obj.set('warning_list', resource_obj.get_full_warning_list());\n      resource_obj.set('error_list', resource_obj.get_full_error_list());\n\n      if (resource_obj.stonith) {\n        fence.pushObject(resource_obj);\n      } else {\n        resources.pushObject(resource_obj);\n      }\n    });\n    resources.sort(self.status_sort);\n    fence.sort(self.status_sort);\n    self.set('fence_list', fence);\n    self.set('resource_list', resources);\n  },\n\n  add_nodes: function(data, node_attrs) {\n    var self = this;\n    self.set(\"need_reauth\", false);\n    var nodes = [];\n    var node;\n    $.each(data, function(key, val) {\n      if (val[\"warning_list\"]) {\n        $.each(val[\"warning_list\"], function (key, value) {\n          if (self.get('need_reauth'))\n            return false;\n          if (typeof(value.type) !== 'undefined' && value.type == \"nodes_not_authorized\") {\n            self.set(\"need_reauth\", true);\n          }\n        });\n      }\n\n      var attrs = [];\n      if (node_attrs && val[\"name\"] in node_attrs) {\n        attrs = node_attrs[val[\"name\"]];\n      }\n\n      node = Pcs.Clusternode.create({\n        name: val[\"name\"],\n        url_link: get_cluster_remote_url(self.name) + \"main#/nodes/\" + val[\"name\"],\n        status: val[\"status\"],\n        quorum: val[\"quorum\"],\n        error_list: val[\"error_list\"],\n        warning_list: val[\"warning_list\"]\n      });\n      node.set(\"node_attrs\", attrs);\n      if (node.get(\"is_in_maintenance\") && node.get('status_val') > get_status_value(\"maintenance\")) {\n        node.set(\"status\", \"maintenance\");\n      }\n      nodes.push(node);\n    });\n    nodes.sort(self.status_sort);\n    self.set(\"nodes\", nodes);\n  }\n});\n\nPcs.clusterController = Ember.Object.create({\n  cluster_list: Ember.ArrayController.create({\n    content: Ember.A(),\n    sortProperties: ['name'],\n    sortAscending: true\n  }),\n  cur_cluster: null,\n  show_all_nodes: false,\n  show_all_resources: false,\n  show_all_fence: false,\n  num_ok: 0,\n  num_error: 0,\n  num_warning: 0,\n  num_unknown: 0,\n\n  update_cur_cluster: function(cluster_name) {\n    var self = this;\n    $(\"#clusters_list div.arrow\").hide();\n    var selected_cluster = null;\n\n    $.each(self.get('cluster_list').get('content'), function(key, cluster) {\n      if (cluster.get(\"name\") == cluster_name) {\n        selected_cluster = cluster;\n        return false;\n      }\n    });\n\n    self.set('cur_cluster', selected_cluster);\n    if (selected_cluster) {\n      Ember.run.next(function() {\n        $(\"#clusters_list tr[nodeID=\" + cluster_name + \"] div.arrow\").show();\n        correct_visibility_dashboard(self.get('cur_cluster'));\n      });\n    }\n  },\n\n  update: function(data) {\n    var self = this;\n    var clusters = data[\"cluster_list\"];\n    var cluster_name_list = [];\n    self.set(\"num_ok\", 0);\n    self.set(\"num_error\", 0);\n    self.set(\"num_warning\", 0);\n    self.set(\"num_unknown\", 0);\n\n    $.each(clusters, function(key, value) {\n      cluster_name_list.push(value[\"cluster_name\"]);\n      var found = false;\n      var cluster = null;\n\n      $.each(self.get('cluster_list').get('content'), function(key, pre_existing_cluster) {\n        if (pre_existing_cluster && pre_existing_cluster.get('name') == value[\"cluster_name\"]) {\n          found = true;\n          cluster = pre_existing_cluster;\n          cluster.set(\"status\", value[\"status\"]);\n          cluster.set(\"quorate\",value[\"quorate\"]);\n          cluster.set(\"error_list\",value[\"error_list\"]);\n          cluster.set(\"warning_list\",value[\"warning_list\"]);\n        }\n      });\n\n      if (!found) {\n        cluster = Pcs.Cluster.create({\n          name: value[\"cluster_name\"],\n          status: value[\"status\"],\n          quorate: value[\"quorate\"],\n          error_list: value[\"error_list\"],\n          warning_list: value[\"warning_list\"]\n        });\n      }\n\n      cluster.add_nodes(value[\"node_list\"], value[\"node_attr\"]);\n      cluster.add_resources(value[\"resource_list\"]);\n      cluster.set(\"nodes_failed\", cluster.get_num_of_failed(\"nodes\"));\n      cluster.set(\"resources_failed\", cluster.get_num_of_failed(\"resource_list\"));\n      cluster.set(\"fence_failed\", cluster.get_num_of_failed(\"fence_list\"));\n\n      if (cluster.get('status') == \"ok\") {\n        $.each(cluster.get('fence_list').concat(cluster.get('resource_list')), function(index, res) {\n          if (res.get('warning_list').length > 0) {\n            cluster.set(\"status\", \"warning\");\n            return false;\n          }\n        });\n      }\n\n      var nodes_to_auth = [];\n      $.each(cluster.get('warning_list'), function(key, val){\n        if (val.hasOwnProperty(\"type\") && val.type == \"nodes_not_authorized\"){\n          nodes_to_auth = nodes_to_auth.concat(val['node_list']);\n        }\n      });\n      nodes_to_auth = $.unique(nodes_to_auth);\n\n      if (cluster.get('need_reauth') || nodes_to_auth.length > 0) {\n        cluster.get('warning_list').pushObject({\n          message: \"There are few authentication problems. To fix them, click <a href='#' onclick='auth_nodes_dialog(\" + JSON.stringify(nodes_to_auth) + \", null, function() {fix_auth_of_cluster();})'>here</a>.\",\n          type: \"nodes_not_authorized\",\n          node_list: self.nodes_to_auth\n        });\n      }\n\n      if (!found) {\n        self.get('cluster_list').pushObject(cluster);\n      }\n\n      if (cluster.get_num_of_failed(\"nodes\") == cluster.nodes.length) {\n        if (cluster.get('status') != \"unknown\")\n          cluster.get('warning_list').pushObject({\n            message: \"Cluster is offline\"\n          });\n\n        cluster.set(\"status\", \"unknown\");\n      }\n\n      switch (get_status_value(cluster.get('status'))) {\n        case get_status_value(\"ok\"):\n          self.incrementProperty('num_ok');\n          break;\n        case get_status_value(\"error\"):\n          self.incrementProperty('num_error');\n          break;\n        case get_status_value(\"warning\"):\n          self.incrementProperty('num_warning');\n          break;\n        default:\n          self.incrementProperty('num_unknown');\n          break;\n      }\n    });\n\n    var to_remove = [];\n    $.each(self.get('cluster_list').get('content'), function(key,val) {\n      if (cluster_name_list.indexOf(val.get('name')) == -1) {\n        to_remove.pushObject(val);\n      }\n    });\n\n    $.each(to_remove, function(index, val) {\n      self.get('cluster_list').removeObject(val);\n    });\n  }\n});\n\nPcs.aclsController = Ember.ArrayController.createWithMixins({\n  content: [],\n  cur_role: null,\n  role_list: function() {\n    if (this.get(\"roles\"))\n      return Object.keys(this.get(\"roles\"));\n    return [];\n  }.property(\"roles\"),\n  user_list: function() {\n    if (this.get(\"users\"))\n      return Object.keys(this.get(\"users\"));\n    return [];\n  }.property(\"users\"),\n  group_list: function() {\n    if (this.get(\"groups\"))\n      return Object.keys(this.get(\"groups\"));\n    return [];\n  }.property(\"groups\"),\n  load_role: function(role_row, dont_update_hash) {\n    load_row(role_row, this, 'cur_role', '#role_info_div');\n    if (!dont_update_hash) {\n      window.location.hash = \"/acls/\" + $(role_row).attr(\"nodeID\");\n    }\n  },\n  update: function(data) {\n    var self = this;\n    self.set('content',[]);\n    var my_groups = {}, my_users = {}, my_roles = {};\n    var cur_role_holder = \"\";\n    var cur_role_name = \"\";\n    if (data[\"acls\"]) {\n      if (data[\"acls\"][\"group\"]) {\n        $.each(data[\"acls\"][\"group\"], function (k2,v2) {\n          my_groups[k2] = v2;\n        });\n      }\n      if (data[\"acls\"][\"user\"]) {\n        $.each(data[\"acls\"][\"user\"], function (k2,v2) {\n          my_users[k2] = v2;\n        });\n      }\n      if (data[\"acls\"][\"role\"]) {\n        $.each(data[\"acls\"][\"role\"], function (k2,v2) {\n          my_roles[k2] = v2;\n        });\n      }\n    }\n    self.set('roles',my_roles);\n    self.set('users',my_users);\n    self.set('groups',my_groups);\n\n    cur_role_holder = self.cur_role ? self.cur_role.name : \"\";\n\n    $.each(my_roles, function(role_name, role_data) {\n      var found = false;\n      var role = null;\n      $.each(self.content, function(key, pre_existing_role) {\n        if(pre_existing_role && pre_existing_role.name == role_name) {\n          found = true;\n          role = pre_existing_role;\n          role.set(\"name\", role_name);\n          role.set(\"cur_role\", false);\n          role.set(\"description\", role_data[\"description\"]);\n        }\n      });\n      if (!found) {\n        role = Pcs.Aclrole.create({\n          name: role_name,\n          cur_role: false,\n          description: role_data[\"description\"],\n        });\n      }\n      if (role_data[\"permissions\"]) {\n        $.each(role_data[\"permissions\"], function(key, permission) {\n          var parsed = permission.match(/(\\S+)\\s+(\\S+)\\s+(.+)\\((.*)\\)/);\n          role[\"permissions\"] = role[\"permissions\"] || [];\n          role[\"permissions\"].push({\n            type: parsed[1],\n            xpath_id: parsed[2],\n            query_id: parsed[3],\n            permission_id: parsed[4],\n          });\n        });\n      }\n\n      if (cur_role_holder == \"\") {\n        cur_role_name = Pcs.opening_aclrole;\n      }\n      else {\n        cur_role_name = cur_role_holder;\n      }\n      if (role.name == cur_role_name) {\n        role.set(\"cur_role\", true);\n        self.set(\"cur_role\", role);\n      }\n\n      if (!found) {\n        self.pushObject(role);\n      }\n    });\n\n    if (self.content && self.content.length > 0 && self.cur_role == null) {\n      self.set(\"cur_role\", self.content[0]);\n      self.content[0].set(\"cur_role\", true);\n    }\n\n    $.each(my_users, function(user_name, role_list) {\n      $.each(role_list, function(key1, role_name) {\n        $.each(self.content, function(key2, existing_role) {\n          if (existing_role.name == role_name) {\n            if (!existing_role.user_list) {\n              existing_role.user_list = [user_name];\n            }\n            else if (existing_role.user_list.indexOf(user_name) == -1) {\n              existing_role.user_list.push(user_name);\n            }\n          }\n        });\n      });\n    });\n    $.each(my_groups, function(group_name, role_list) {\n      $.each(role_list, function(key1, role_name) {\n        $.each(self.content, function(key2, existing_role) {\n          if (existing_role.name == role_name) {\n            if (!existing_role.group_list) {\n              existing_role.group_list = [group_name];\n            }\n            else if (existing_role.group_list.indexOf(group_name) == -1) {\n              existing_role.group_list.push(group_name);\n            }\n          }\n        });\n      });\n    });\n  }\n});\n\nPcs.settingsController = Ember.Controller.create({\n  properties: [],\n  filtered: [],\n  show_advanced: false,\n  error: false,\n  filter: \"\",\n  update: function(properties_definition) {\n    var self = this;\n    var new_properties = [];\n    var property;\n    var value;\n    $.each(properties_definition, function(_, prop_def) {\n      property = Pcs.Setting.create(prop_def);\n      value = property.get(\"value\");\n      if (value) {\n        switch (property.get(\"type\")) {\n          case \"boolean\":\n            value = (is_cib_true(value)) ? \"true\" : \"false\";\n            break;\n          case \"enum\":\n            if (property.get(\"enum\").indexOf(value) == -1) {\n              property.get(\"enum\").push(value);\n            }\n        }\n        property.set(\"value\", value);\n      }\n      new_properties.pushObject(property);\n    });\n    // first basic and then advanced\n    self.set(\"properties\", new_properties.sort(function(a,b) {\n      if (!a.get(\"advanced\") && b.get(\"advanced\")) {\n        return -1;\n      } else if (a.get(\"advanced\") && !b.get(\"advanced\")) {\n        return 1;\n      } else {\n        return a.get('name').localeCompare(b.get('name'));\n      }\n    }));\n    self.set(\"error\", false);\n  }\n});\n\nPcs.settingsController.reopen({\n  filtered: function() {\n    var self = this;\n    var substr = self.get(\"filter\").toLowerCase();\n\n    var to_show = [];\n    $.each(self.get(\"properties\"), function(_, e) {\n      if (self.get(\"show_advanced\")) {\n        to_show.pushObject(e);\n      } else if (!e.get(\"advanced\")) {\n        to_show.pushObject(e);\n      }\n    });\n\n    if (!substr) {\n      return to_show;\n    }\n\n    var filtered = [];\n    $.each(to_show, function(_, e) {\n      if (e.get(\"name\").toLowerCase().includes(substr) || e.get(\"readable_name\").toLowerCase().includes(substr)) {\n        filtered.pushObject(e);\n      }\n    });\n    return filtered;\n  }.property(\"properties\", \"filter\", \"show_advanced\")\n});\n\nPcs.selectedNodeController = Ember.Object.createWithMixins({\n  node: null,\n  reset: function() {\n    if (Pcs.nodesController)\n      this.set('node', Pcs.nodesController.objectAt(0));\n  }\n});\n\nPcs.nodesController = Ember.ArrayController.createWithMixins({\n  content: [],\n  utilization_support: false,\n  cur_node: null,\n  cur_node_attr: function () {\n    var nc = this;\n    if (nc.get('cur_node')) {\n      return nc.get('cur_node').get('node_attrs');\n    }\n    return [];\n  }.property(\"cur_node\", \"content.@each.node_attrs\"),\n  cur_node_fence_levels: function () {\n    var ret_val = [];\n    var nc = this;\n    $.each(this.content, function(node, value) {\n      if (\"fence_levels\" in value && nc.cur_node && value[\"fence_levels\"]) {\n        if (nc.cur_node.name in value[\"fence_levels\"]) {\n          ret_val = ret_val.concat(value[\"fence_levels\"][nc.cur_node.name]);\n        }\n        return false;\n      }\n    });\n    return ret_val;\n  }.property(\"cur_node\", \"content.@each.fence_levels\"),\n  init: function(){\n    this._super();\n  },\n\n  load_node: function(node_row, dont_update_hash){\n    load_row(node_row, this, 'cur_node', '#node_info_div');\n    if (!dont_update_hash)\n      window.location.hash = \"/nodes/\" + $(node_row).attr(\"nodeID\");\n  },\n\n  get_node_name_list: function() {\n    var node_list = [];\n    $.each(this.content, function(_, node) {\n      node_list.push(node.name);\n    });\n    return node_list;\n  },\n\n  update: function(data){\n    var self = this;\n    var nodes = [];\n    var corosync_nodes_online = data[\"corosync_online\"];\n    var pacemaker_nodes_online = data[\"pacemaker_online\"];\n    var pacemaker_nodes_standby = data[\"pacemaker_standby\"];\n\n    var resources_on_nodes = {};\n    var lc_on_nodes = {};\n    $.each(data['node_list'], function(index, node) {\n      nodes.push(node.name);\n\n      resources_on_nodes[node.name] = [];\n      $.each(Pcs.resourcesContainer.get('resource_map'), function(resource_id, resource_obj) {\n        var nodes_running_on = resource_obj.get('nodes_running_on');\n        if (nodes_running_on) {\n          $.each(nodes_running_on, function(index, node_name) {\n            if (node.name == node_name) {\n              resources_on_nodes[node.name].push(resource_id);\n            }\n          });\n        }\n      });\n\n      lc_on_nodes[node.name] = [];\n      if (data[\"constraints\"] && data[\"constraints\"][\"rsc_location\"]) {\n        $.each(data[\"constraints\"][\"rsc_location\"], function(key, constraint) {\n          if (constraint[\"node\"] == node.name)\n            lc_on_nodes[node.name].push(constraint)\n        });\n      }\n    });\n\n    var nodes_checked = {};\n    var cur_node_holder = \"\";\n    if (self.cur_node)\n      cur_node_holder = self.cur_node.name;\n    $.each(self.content, function (key, value) {\n      if (value.checked)\n        nodes_checked[value.name] = true;\n    });\n\n    if (data[\"nodes_utilization\"]) {\n      self.set(\"utilization_support\", true);\n    } else {\n      self.set(\"utilization_support\", false);\n    }\n\n    var is_sbd_enabled = false;\n    var is_sbd_running = false;\n    var sbd = null;\n    Pcs.set(\"sbd_config\", null);\n    $.each(data['node_list'], function(_, node_obj) {\n      if (node_obj[\"services\"] && node_obj[\"services\"][\"sbd\"]) {\n        sbd = node_obj[\"services\"][\"sbd\"];\n        is_sbd_enabled = (is_sbd_enabled || sbd.enabled);\n        is_sbd_running = (is_sbd_running || sbd.running);\n      }\n\n      if (node_obj[\"sbd_config\"]) {\n        Pcs.set(\"sbd_config\", node_obj[\"sbd_config\"]);\n      }\n\n      var node_id = node_obj.name;\n      if ($.inArray(node_id, corosync_nodes_online) > -1) {\n        corosync_online = true;\n      } else {\n        corosync_online = false;\n      }\n\n      if ($.inArray(node_id, pacemaker_nodes_online) > -1) {\n        pacemaker_online = true;\n      } else {\n        pacemaker_online = false;\n      }\n\n      if ($.inArray(node_id, pacemaker_nodes_standby) > -1) {\n        pacemaker_standby = true;\n      } else {\n        pacemaker_standby = false;\n      }\n\n      if (node_obj[\"status\"] == 'unknown') {\n        pcsd_daemon = false\n      } else {\n        pcsd_daemon = true\n      }\n\n      if (node_obj[\"notauthorized\"] == \"true\" || node_obj[\"notoken\"] == true) {\n        authorized = false;\n      } else {\n        authorized = true;\n      }\n\n      if (node_obj[\"corosync\"] && node_obj[\"pacemaker\"] &&\n        pacemaker_online && corosync_online) {\n        up_status = true;\n      } else {\n        up_status = false;\n      }\n\n      var node_attr = [];\n      if (data[\"node_attr\"] && data[\"node_attr\"][node_id]) {\n        node_attr = data[\"node_attr\"][node_id];\n      }\n\n      var utilization = [];\n      if (data[\"nodes_utilization\"] && data[\"nodes_utilization\"][node_id]) {\n        utilization = data[\"nodes_utilization\"][node_id];\n      }\n\n      found = false;\n      var node = null;\n      $.each(self.content, function(key, pre_existing_node) {\n        if (pre_existing_node && pre_existing_node.name == node_id) {\n          node = pre_existing_node;\n          found = true;\n          node.set(\"authorized\",authorized);\n          node.set(\"up\",up_status);\n          node.set(\"pcsd\",pcsd_daemon && authorized);\n          node.set(\"corosync_daemon\", node_obj[\"corosync\"]);\n          node.set(\"corosync_enabled\", node_obj[\"corosync_enabled\"]);\n          node.set(\"pacemaker_daemon\", node_obj[\"pacemaker\"]);\n          node.set(\"pacemaker_enabled\", node_obj[\"pacemaker_enabled\"]);\n          node.set(\"pcsd_enabled\", node_obj[\"pcsd_enabled\"]);\n          node.set(\"corosync\", corosync_online);\n          node.set(\"pacemaker\", pacemaker_online);\n          node.set(\"pacemaker_standby\", pacemaker_standby);\n          node.set(\"cur_node\",false);\n          node.set(\"running_resources\", Pcs.getResourcesFromID($.unique(resources_on_nodes[node_id].sort().reverse())));\n          node.set(\"location_constraints\", lc_on_nodes[node_id].sort());\n          node.set(\"uptime\", node_obj[\"uptime\"]);\n          node.set(\"node_id\", node_obj[\"id\"]);\n          node.set(\"node_attrs\", node_attr);\n          node.set(\"fence_levels\", data[\"fence_levels\"]);\n          node.set(\"status\", node_obj[\"status\"]);\n          node.set(\"utilization\", utilization);\n          node.set(\"services\", node_obj[\"services\"]);\n          node.set(\"sbd_config\", node_obj[\"sbd_config\"]);\n        }\n      });\n\n      if (found == false) {\n        var node = Pcs.Clusternode.create({\n          name: node_id,\n          authorized:  authorized,\n          up: up_status,\n          pcsd: pcsd_daemon && authorized,\n          corosync_daemon: node_obj[\"corosync\"],\n          corosync_enabled: node_obj[\"corosync_enabled\"],\n          pacemaker_daemon: node_obj[\"pacemaker\"],\n          pacemaker_enabled: node_obj[\"pacemaker_enabled\"],\n          pcsd_enabled: node_obj[\"pcsd_enabled\"],\n          corosync: corosync_online,\n          pacemaker: pacemaker_online,\n          pacemaker_standby: pacemaker_standby,\n          cur_node: false,\n          running_resources: Pcs.getResourcesFromID($.unique(resources_on_nodes[node_id].sort().reverse())),\n          location_constraints: lc_on_nodes[node_id].sort(),\n          uptime: node_obj[\"uptime\"],\n          node_id: node_obj[\"id\"],\n          node_attrs: node_attr,\n          fence_levels: data[\"fence_levels\"],\n          status: node_obj[\"status\"],\n          utilization: utilization,\n          services: node_obj[\"services\"],\n          sbd_config: node_obj[\"sbd_config\"]\n        });\n      }\n      var pathname = window.location.pathname.split('/');\n\n      if (cur_node_holder == \"\") {\n        cur_node_name = Pcs.opening_node;\n      } else {\n        cur_node_name = cur_node_holder;\n      }\n      if (node.name == cur_node_name) {\n        node.set(\"cur_node\",true);\n        self.set(\"cur_node\", node);\n      }\n\n      if (nodes_checked[node.name])\n        node.set(\"checked\",true);\n\n      if (found == false)\n        self.pushObject(node);\n    });\n    if (self.content && self.content.length > 0 && self.cur_node == null) {\n      self.set(\"cur_node\", self.content[0]);\n      self.content[0].set(\"cur_node\",true);\n    }\n\n    Pcs.set(\"is_sbd_enabled\", is_sbd_enabled);\n    Pcs.set(\"is_sbd_running\", is_sbd_running);\n\n    nodesToRemove = [];\n    $.each(self.content, function (key, node) {\n      found = false;\n      $.each(nodes, function (k,v) {\n        if (v == node.name)\n          found = true;\n      });\n      if (!found) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    $.each(nodesToRemove, function(k,v) {\n      self.content.removeObject(v);\n    });\n    self.set('content', Ember.copy(self.get('content').sort(function(a,b){return a.get('name').localeCompare(b.get('name'))})));\n  }\n});\n\nfunction myUpdate() {\n  Pcs.update();\n//  window.setTimeout(myUpdate,4000);\n}\n\nPcs.set('updater', Pcs.Updater.create({\n  timeout: 20000,\n  update_function: Pcs._update,\n  update_target: Pcs\n}));\n\nfunction constraint_extend(){\n  var new_object = {}\n  for(var i in arguments){\n    var extension = arguments[i];\n    Object.keys(extension).forEach(function(key){\n      new_object[key] = extension[key];\n    });\n  }\n  return new_object;\n}\n\nfunction constraint_set_create_resource_keyed_map(constraint){\n  groups = {}\n  constraint.sets.forEach(function(resource_set){\n    resource_set.resources.forEach(function(resource_id){\n      groups[resource_id] = constraint\n    })\n  });\n  return groups;\n}\n\nfunction constraint_order_create_resource_keyed_map(constraint){\n  var groups = {};\n  groups[constraint[\"first\"]] = constraint_extend(constraint, {\n    \"other_rsc\": constraint[\"then\"],\n    \"before\":false\n  });\n  groups[constraint[\"then\"]] = constraint_extend(constraint, {\n    \"other_rsc\": constraint[\"first\"],\n    \"before\":true\n  });\n  return groups;\n}\n\nfunction constraint_colocation_create_resource_keyed_map(constraint){\n  var together = {}\n  if(constraint.score == \"INFINITY\" || constraint.score >= 0){\n    together.together = \"Together\";\n  }\n  if(constraint.score == \"-INFINITY\" || constraint.score < 0){\n    together.together = \"Apart\";\n  }\n\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint_extend(constraint, together, {\n    \"other_rsc\": constraint[\"with-rsc\"],\n    \"first\": true\n  });\n\n  groups[constraint[\"with-rsc\"]] = constraint_extend(constraint, together, {\n    \"other_rsc\": constraint[\"rsc\"],\n    \"first\": false\n  });\n  return groups;\n}\n\nfunction constraint_location_distribute_to_resource(constraint){\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint;\n  return groups;\n}\n\nfunction constraint_ticket_distribute_to_resource(constraint){\n  var groups = {};\n  groups[constraint[\"rsc\"]] = constraint;\n  return groups;\n}\n\n/**\n  Return object with nested object on each attribute (\"with_sets\", \"plain\").\n  Nested object has related constraint list on each attribute (resource id).\n  Example: {\n    with_sets: {\"resA\": [{constraint}, ...], \"resB\": [{constraint}, ...]}\n    plain: {\"resA\": [{constraint}, ...]}\n  }\n\n  @param {array} constraint_list list of constraints to distribute\n  @param {object} group_distributors on attributes (\"with_sets\", \"plain\") are\n    distribution methods. If attribute undefined, constraint is not distributed\n*/\nfunction constraint_resort_part(constraint_list, group_distributors){\n  var constraint_groups = {with_sets: {}, plain: {}}\n\n  if( ! constraint_list){\n    return constraint_groups;\n  }\n\n  constraint_list.forEach(function(constraint){\n    var group_name = constraint.sets ? \"with_sets\" : \"plain\";\n    var group = constraint_groups[group_name];\n    var distribute = group_distributors[group_name];\n\n    if( ! distribute){\n      return;\n    }\n\n    var resource_constraint_map = distribute(constraint);\n\n    for(var resource_id in resource_constraint_map){\n      var extended_constraint = resource_constraint_map[resource_id];\n      group[resource_id] = group[resource_id] || [];\n      if(group[resource_id].indexOf(extended_constraint) == -1){\n        group[resource_id].push(extended_constraint);\n      }\n    }\n  });\n\n  return constraint_groups;\n}\n\nfunction constraint_resort(constraints){\n  if( ! constraints){\n    return {\n      location_constraints: {},\n      ordering_constraints: {},\n      ordering_set_constraints: {},\n      colocation_constraints: {},\n      colocation_set_constraints: {},\n    };\n  }\n\n  var orders = constraint_resort_part(constraints.rsc_order, {\n    plain: constraint_order_create_resource_keyed_map,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  var colocations = constraint_resort_part(constraints.rsc_colocation, {\n    plain: constraint_colocation_create_resource_keyed_map,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  var locations = constraint_resort_part(constraints.rsc_location, {\n    plain: constraint_location_distribute_to_resource,\n  });\n\n  var tickets = constraint_resort_part(constraints.rsc_ticket, {\n    plain: constraint_ticket_distribute_to_resource,\n    with_sets: constraint_set_create_resource_keyed_map,\n  });\n\n  return {\n    location_constraints: locations.plain,\n    ordering_constraints: orders.plain,\n    ordering_set_constraints: orders.with_sets,\n    ticket_constraints: tickets.plain,\n    ticket_set_constraints: tickets.with_sets,\n    colocation_constraints: colocations.plain,\n    colocation_set_constraints: colocations.with_sets,\n  };\n}\n", "var pcs_timeout = 30000;\nvar login_dialog_opened = false;\nvar ajax_queue = Array();\n\nfunction curResource() {\n  var obj = Pcs.resourcesContainer.get('cur_resource');\n  if (obj == null) {\n    return null;\n  }\n  return obj.get('id');\n}\n\nfunction curStonith() {\n  var obj = Pcs.resourcesContainer.get('cur_fence');\n  if (obj == null) {\n    return null;\n  }\n  return obj.get('id');\n}\n\nfunction configure_menu_show(item) {\n  $(\"#configure-\"+item).show();\n  $(\".configure-\"+item).addClass(\"selected\");\n}\n\nfunction menu_show(item,show) {\n  if (show) {\n    $(\"#\" + item + \"_menu\").addClass(\"active\");\n  } else {\n    $(\"#\" + item + \"_menu\").removeClass(\"active\");\n  }\n}\n\n// Changes the visible change when another menu is selected\n// If item is specified, we load that item as well\n// If initial is set to true, we load default (first item) on other pages\n// and load the default item on the specified page if item is set\nfunction select_menu(menu, item, initial) {\n  if (menu == \"NODES\") {\n    Pcs.set('cur_page',\"nodes\")\n    if (item)\n      Pcs.nodesController.load_node($('[nodeID='+item+']'));\n    menu_show(\"node\", true);\n  } else {\n    menu_show(\"node\", false);\n  }\n\n  if (menu == \"RESOURCES\") {\n    Pcs.set('cur_page',\"resources\");\n    menu_show(\"resource\", true);\n  } else {\n    menu_show(\"resource\", false);\n  }\n\n  if (menu == \"FENCE DEVICES\") {\n    Pcs.set('cur_page',\"stonith\");\n    menu_show(\"stonith\", true);\n  } else {\n    menu_show(\"stonith\", false);\n  }\n\n  if (menu == \"MANAGE\") {\n    Pcs.set('cur_page',\"manage\");\n    menu_show(\"cluster\", true);\n  } else {\n    menu_show(\"cluster\", false);\n  }\n\n  if (menu == \"PERMISSIONS\") {\n    Pcs.set('cur_page', \"permissions\");\n    menu_show(\"cluster\", true);\n  } else {\n    menu_show(\"cluster\", false);\n  }\n\n  if (menu == \"CONFIGURE\") {\n    Pcs.set('cur_page',\"configure\");\n    menu_show(\"configure\", true);\n  } else {\n    menu_show(\"configure\", false);\n  }\n\n  if (menu == \"ACLS\") {\n    Pcs.set('cur_page',\"acls\");\n    menu_show(\"acls\", true);\n  } else {\n    menu_show(\"acls\", false);\n  }\n\n  if (menu == \"WIZARDS\") {\n    Pcs.set('cur_page',\"wizards\");\n    menu_show(\"wizards\", true);\n  } else {\n    menu_show(\"wizards\", false);\n  }\n}\n\nfunction create_group() {\n  var resource_list = get_checked_ids_from_nodelist(\"resource_list\");\n  if (resource_list.length == 0) {\n    alert(\"You must select at least one resource to add to a group\");\n    return;\n  }\n  var not_primitives = resource_list.filter(function(resource_id) {\n    var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n    return !(resource_obj && resource_obj.get(\"is_primitive\"));\n  });\n  if (not_primitives.length != 0) {\n    alert(\"Members of group have to be primitive resources. These resources\" +\n      \" are not primitives: \" + not_primitives.join(\", \"));\n    return;\n  }\n  var order_el = $(\"#new_group_resource_list tbody\");\n  order_el.empty();\n  order_el.append(resource_list.map(function (item) {\n    return `<tr value=\"${item}\" class=\"cursor-move\"><td>${item}</td></tr>`;\n  }));\n  var order_obj = order_el.sortable();\n  order_el.disableSelection();\n  $(\"#add_group\").dialog({\n    title: 'Create Group',\n    width: 'auto',\n    modal: true,\n    resizable: false,\n    buttons: [\n      {\n        text: \"Cancel\",\n        click: function() {\n          $(this).dialog(\"close\");\n        }\n      },\n      {\n        text: \"Create Group\",\n        id: \"add_group_submit_btn\",\n        click: function() {\n          var dialog_obj = $(this);\n          var submit_btn_obj = dialog_obj.parent().find(\n            \"#add_group_submit_btn\"\n          );\n          submit_btn_obj.button(\"option\", \"disabled\", true);\n\n          ajax_wrapper({\n            type: \"POST\",\n            url: get_cluster_remote_url() + \"add_group\",\n            data: {\n              resource_group: $(\n                '#add_group:visible input[name=resource_group]'\n              ).val(),\n              resources: order_obj.sortable(\n                \"toArray\", {attribute: \"value\"}\n              ).join(\" \")\n            },\n            success: function() {\n              submit_btn_obj.button(\"option\", \"disabled\", false);\n              Pcs.update();\n              dialog_obj.dialog(\"close\");\n            },\n            error: function (xhr, status, error) {\n              alert(\n                \"Error creating group \"\n                + ajax_simple_error(xhr, status, error)\n              );\n              submit_btn_obj.button(\"option\", \"disabled\", false);\n            }\n          });\n        }\n      }\n    ]\n  });\n}\n\nfunction add_node_dialog() {\n  var buttonOpts = [\n    {\n      text: \"Add Node\",\n      id: \"add_node_submit_btn\",\n      click: function() {\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", true);\n        checkAddingNode();\n      }\n    },\n    {\n      text: \"Cancel\",\n      click: function() {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  buttonOpts[\"Cancel\"] = function() {\n    $(this).dialog(\"close\");\n  };\n\n  // If you hit enter it triggers the first button: Add Node\n  $('#add_node').keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !$(\"#add_node_submit_btn\").button(\"option\", \"disabled\")) {\n        $(\"#add_node_submit_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  $('#add_node').dialog({\n    title: 'Add Node',\n    modal:true,\n    resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction checkAddingNode(){\n  var nodeName = $(\"#add_node\").children(\"form\").find(\"[name='new_nodename']\").val().trim();\n  if (nodeName == \"\") {\n    $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    return false;\n  }\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": nodeName},\n    timeout: pcs_timeout,\n    success: function (data) {\n      var mydata = jQuery.parseJSON(data);\n      if (mydata[nodeName] == \"Unable to authenticate\") {\n        auth_nodes_dialog([nodeName], function(){$(\"#add_node_submit_btn\").trigger(\"click\");});\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      } else if (mydata[nodeName] == \"Offline\") {\n        alert(\"Unable to contact node '\" + nodeName + \"'\");\n        $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      } else {\n        create_node($(\"#add_node\").children(\"form\"));\n      }\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    }\n  });\n}\n\nfunction create_node(form) {\n  var dataString = $(form).serialize();\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_node_to_cluster\",\n    data: dataString,\n    success: function(returnValue) {\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n      $('#add_node').dialog('close');\n      Pcs.update();\n    },\n    error: function(error) {\n      alert(error.responseText);\n      $(\"#add_node_submit_btn\").button(\"option\", \"disabled\", false);\n    }\n  });\n}\n\n// If update is set to true we update the resource instead of create it\n// if stonith is set to true we update/create a stonith agent\nfunction create_resource(form, update, stonith) {\n  var data = {};\n  $($(form).serializeArray()).each(function(index, obj) {\n    data[obj.name] = obj.value;\n  });\n  data[\"resource_type\"] = data[\"resource_type\"].replace(\"::\", \":\");\n  var url = get_cluster_remote_url() + $(form).attr(\"action\");\n  var name;\n\n  if (stonith) {\n    name = \"fence device\";\n    data[\"resource_type\"] = data[\"resource_type\"].replace(\"stonith:\", \"\");\n  } else {\n    name = \"resource\";\n  }\n\n  ajax_wrapper({\n    type: \"POST\",\n    url: url,\n    data: data,\n    dataType: \"json\",\n    success: function(returnValue) {\n      $('input.apply_changes').show();\n      if (returnValue[\"error\"] == \"true\") {\n        alert(returnValue[\"stderr\"]);\n      } else {\n        Pcs.update();\n        if (!update) {\n          if (stonith)\n            $('#new_stonith_agent').dialog('close');\n          else\n            $('#new_resource_agent').dialog('close');\n        } else {\n          reload_current_resource();\n        }\n      }\n    },\n    error: function(xhr, status, error) {\n      if (update) {\n        alert(\n          \"Unable to update \" + name + \" \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      else {\n        alert(\n          \"Unable to add \" + name + \" \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      $('input.apply_changes').show();\n    }\n  });\n}\n\n// Don't allow spaces in input fields\nfunction disable_spaces(item) {\n  myitem = item;\n  $(item).find(\"input\").on(\"keydown\", function (e) {\n    return e.which !== 32;\n  });\n}\n\nfunction load_resource_form(agent_name, stonith) {\n  stonith = typeof stonith !== 'undefined' ? stonith : false;\n  if (!agent_name) {\n    return;\n  }\n  var prop_name = \"new_\" + (stonith ? \"fence\" : \"resource\") + \"_agent_metadata\";\n  get_resource_agent_metadata(agent_name, function (data) {\n      Pcs.resourcesContainer.set(prop_name, Pcs.ResourceAgent.create(data));\n  }, stonith);\n}\n\nfunction verify_remove(remove_func, forceable, checklist_id, dialog_id, label, ok_text, title, remove_id) {\n  var remove_id_list = new Array();\n  if (remove_id) {\n    remove_id_list = [remove_id];\n  }\n  else {\n    remove_id_list = get_checked_ids_from_nodelist(checklist_id);\n  }\n  if (remove_id_list.length < 1) {\n    alert(\"You must select at least one \" + label + \" to remove.\");\n    return;\n  }\n\n  var buttonOpts = [\n    {\n      text: ok_text,\n      id: \"verify_remove_submit_btn\",\n      click: function() {\n        if (remove_id_list.length < 1) {\n          return;\n        }\n        $(\"#verify_remove_submit_btn\").button(\"option\", \"disabled\", true);\n        if (forceable) {\n          force = $(\"#\" + dialog_id + \" :checked\").length > 0\n          remove_func(remove_id_list, force);\n        }\n        else {\n          remove_func(remove_id_list);\n        }\n      }\n    },\n    {\n      text: \"Cancel\",\n      id: \"verify_remove_cancel_btn\",\n      click: function() {\n        $(this).dialog(\"destroy\");\n        if (forceable) {\n          $(\"#\" + dialog_id + \" input[name=force]\").attr(\"checked\", false);\n        }\n      }\n    }\n  ];\n\n  var name_list = \"<ul>\";\n  $.each(remove_id_list, function(key, remid) {\n    name_list += \"<li>\" + remid + \"</li>\";\n  });\n  name_list += \"</ul>\";\n  $(\"#\" + dialog_id + \" .name_list\").html(name_list);\n  $(\"#\" + dialog_id).dialog({\n    title: title,\n    modal: true,\n    resizable: false,\n    buttons: buttonOpts\n  });\n}\n\nfunction verify_remove_clusters(cluster_id) {\n  verify_remove(\n    remove_cluster, false, \"cluster_list\", \"dialog_verify_remove_clusters\",\n    \"cluster\", \"Remove Cluster(s)\", \"Cluster Removal\", cluster_id\n  );\n}\n\nfunction verify_remove_nodes(node_id) {\n  verify_remove(\n    remove_nodes, false, \"node_list\", \"dialog_verify_remove_nodes\",\n    \"node\", \"Remove Node(s)\", \"Remove Node\", node_id\n  );\n}\n\nfunction verify_remove_resources(resource_id) {\n  verify_remove(\n    remove_resource, true, \"resource_list\", \"dialog_verify_remove_resources\",\n    \"resource\", \"Remove resource(s)\", \"Resurce Removal\", resource_id\n  );\n}\n\nfunction verify_remove_fence_devices(resource_id) {\n  verify_remove(\n    remove_resource, false, \"stonith_list\", \"dialog_verify_remove_resources\",\n    \"fence device\", \"Remove device(s)\", \"Fence Device Removal\", resource_id\n  );\n}\n\nfunction verify_remove_acl_roles(role_id) {\n  verify_remove(\n    remove_acl_roles, false, \"acls_roles_list\", \"dialog_verify_remove_acl_roles\",\n    \"ACL role\", \"Remove Role(s)\", \"Remove ACL Role\", role_id\n  );\n}\n\nfunction get_checked_ids_from_nodelist(nodelist_id) {\n  var ids = new Array()\n  $(\"#\" + nodelist_id + \" .node_list_check :checked\").each(function (index, element) {\n    if($(element).parent().parent().attr(\"nodeID\")) {\n      ids.push($(element).parent().parent().attr(\"nodeID\"));\n    }\n  });\n  return ids;\n}\n\nfunction local_node_update(node, data) {\n  node_data = data[node];\n\n  for (var n in data) {\n    if (data[n].pacemaker_online && (jQuery.inArray(n, data[n].pacemaker_online) != -1)) {\n      setNodeStatus(n, true);\n    } else {\n      setNodeStatus(n,false);\n    }\n  }\n}\n\nfunction disable_checkbox_clicks() {\n  $('.node_list_check input[type=checkbox]').click(function(e) {\n    e.stopPropagation();\n  });\n}\n\n// Set the status of a service\n// 0 = Running (green)\n// 1 = Stopped (red)\n// 2 = Unknown (gray)\nfunction setStatus(item, status, message) {\n  if (status == 0) {\n    item.removeClass();\n    item.addClass('status');\n  } else if (status == 1) {\n    item.removeClass();\n    item.addClass('status-offline');\n  } else if (status == 2) {\n    item.removeClass();\n    item.addClass('status-unknown');\n  }\n\n  if (typeof message !== 'undefined')\n    item.html(message)\n}\n\n// Set the node in the node list blue or red depending on\n// whether pacemaker is connected or not\nfunction setNodeStatus(node, running) {\n  if (running) {\n    $('.node_name:contains(\"'+node+'\")').css('color','');\n  } else {\n    $('.node_name:contains(\"'+node+'\")').css('color','red');\n  }\n}\n\n\nfunction fade_in_out(id) {\n  $(id).fadeTo(1000, 0.01, function() {\n    $(id).fadeTo(1000, 1);\n  });\n}\n\nfunction node_link_action(link_selector, url, label) {\n  var node = $.trim($(\"#node_info_header_title_name\").text());\n  fade_in_out(link_selector);\n  ajax_wrapper({\n    type: 'POST',\n    url: url,\n    data: {\"name\": node},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to \" + label + \" node '\" + node + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction setup_node_links() {\n  Ember.debug(\"Setup node links\");\n  $(\"#node_start\").click(function() {\n    node_link_action(\n      \"#node_start\", get_cluster_remote_url() + \"cluster_start\", \"start\"\n    );\n  });\n  $(\"#node_stop\").click(function() {\n    var node = $.trim($(\"#node_info_header_title_name\").text());\n    fade_in_out(\"#node_stop\");\n    node_stop(node, false);\n  });\n  $(\"#node_restart\").click(function() {\n    node_link_action(\n      \"#node_restart\", get_cluster_remote_url() + \"node_restart\", \"restart\"\n    );\n  });\n  $(\"#node_standby\").click(function() {\n    node_link_action(\n      \"#node_standby\", get_cluster_remote_url() + \"node_standby\", \"standby\"\n    );\n  });\n  $(\"#node_unstandby\").click(function() {\n    node_link_action(\n      \"#node_unstandby\",\n      get_cluster_remote_url() + \"node_unstandby\",\n      \"unstandby\"\n    );\n  });\n}\n\nfunction node_stop(node, force) {\n  var data = {};\n  data[\"name\"] = node;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'cluster_stop',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n    },\n    error: function(xhr, status, error) {\n      if ((status == \"timeout\") || ($.trim(error) == \"timeout\")) {\n        /*\n         We are not interested in timeout because:\n         - it can take minutes to stop a node (resources running on it have\n           to be stopped/moved and we do not need to wait for that)\n         - if pcs is not able to stop a node it returns an (forceable) error\n           immediatelly\n        */\n        return;\n      }\n      var message = \"Unable to stop node '\" + node + \"' \" + ajax_simple_error(\n        xhr, status, error\n      );\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          node_stop(node, true);\n        }\n      }\n    }\n  });\n}\n\nfunction enable_resource() {\n  fade_in_out(\"#resource_start_link\");\n  Pcs.resourcesContainer.enable_resource(curResource());\n}\n\nfunction disable_resource() {\n  fade_in_out(\"#resource_stop_link\");\n  Pcs.resourcesContainer.disable_resource(curResource());\n}\n\nfunction cleanup_resource() {\n  var resource = curResource();\n  if (resource == null) {\n    return;\n  }\n  fade_in_out(\"#resource_cleanup_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_cleanup',\n    data: {\"resource\": resource},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to cleanup resource '\" + resource + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction cleanup_stonith() {\n  var resource = curStonith();\n  if (resource == null) {\n    return;\n  }\n  fade_in_out(\"#stonith_cleanup_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_cleanup',\n    data: {\"resource\": resource},\n    success: function() {\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to cleanup resource '\" + resource + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction checkExistingNode() {\n  var node = \"\";\n  $('input[name=\"node-name\"]').each(function(i,e) {\n    node = e.value;\n  });\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": node},\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      update_existing_cluster_dialog(mydata);\n\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction checkClusterNodes() {\n  var nodes = [];\n  $('input[name^=\"node-\"]').each(function(i,e) {\n    if (e.value != \"\") {\n      nodes.push(e.value)\n    }\n  });\n\n  ajax_wrapper({\n    type: 'GET',\n    url: '/manage/check_pcsd_status',\n    data: {\"nodes\": nodes.join(\",\")},\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      ajax_wrapper({\n        type: 'GET',\n        url: '/manage/get_nodes_sw_versions',\n        data: {\"nodes\": nodes.join(\",\")},\n        timeout: pcs_timeout,\n        success: function(data) {\n          versions = jQuery.parseJSON(data);\n          update_create_cluster_dialog(mydata, versions);\n        },\n        error: function (XMLHttpRequest, textStatus, errorThrown) {\n          alert(\"ERROR: Unable to contact server\");\n        }\n      });\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction auth_nodes(dialog) {\n  $(\"#auth_failed_error_msg\").hide();\n  ajax_wrapper({\n    type: 'POST',\n    url: '/manage/auth_gui_against_nodes',\n    data: dialog.find(\"#auth_nodes_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function (data) {\n      mydata = jQuery.parseJSON(data);\n      auth_nodes_dialog_update(dialog, mydata);\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"ERROR: Unable to contact server\");\n    }\n  });\n}\n\nfunction auth_nodes_dialog_update(dialog_obj, data) {\n  var unauth_nodes = [];\n  var node;\n  if (data['node_auth_error']) {\n    for (node in data['node_auth_error']) {\n      if (data['node_auth_error'][node] != 0) {\n        unauth_nodes.push(node);\n      }\n    }\n  }\n\n  var callback_one = dialog_obj.dialog(\"option\", \"callback_success_one_\");\n  var callback = dialog_obj.dialog(\"option\", \"callback_success_\");\n  if (unauth_nodes.length == 0) {\n    dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\n      \"option\", \"disabled\", false\n    );\n    dialog_obj.find(\"#auth_failed_error_msg\").hide();\n    dialog_obj.dialog(\"close\");\n    if (callback_one !== null)\n      callback_one();\n    if (callback !== null)\n      callback();\n    return unauth_nodes;\n  } else {\n    dialog_obj.find(\"#auth_failed_error_msg\").show();\n  }\n\n  if (unauth_nodes.length == 1) {\n    dialog_obj.find(\"#same_pass\").hide();\n    dialog_obj.find('#auth_nodes_list').find('input:password').each(\n      function(){$(this).show()}\n    );\n  }\n\n  var one_success = false;\n  dialog_obj.find(\"input:password[name$=-pass]\").each(function() {\n    node = $(this).attr(\"name\");\n    node = node.substring(0, node.length - 5);\n    if (unauth_nodes.indexOf(node) == -1) {\n      $(this).parent().parent().remove();\n      one_success = true;\n    } else {\n      $(this).parent().parent().css(\"color\", \"red\");\n    }\n  });\n\n  if (one_success && callback_one !== null)\n    callback_one();\n\n  dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\n    \"option\", \"disabled\", false\n  );\n  return unauth_nodes;\n}\n\nfunction auth_nodes_dialog(unauth_nodes, callback_success, callback_success_one) {\n  callback_success = typeof callback_success !== 'undefined' ? callback_success : null;\n  callback_success_one = typeof callback_success_one !== 'undefined' ? callback_success_one : null;\n\n  var buttonsOpts = [\n    {\n      text: \"Authenticate\",\n      id: \"authenticate_submit_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#authenticate_submit_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        dialog.find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n        auth_nodes(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n  var dialog_obj = $(\"#auth_nodes\").dialog({title: 'Authentification of nodes',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts,\n    callback_success_: callback_success,\n    callback_success_one_: callback_success_one\n  });\n\n  dialog_obj.find(\"#auth_failed_error_msg\").hide();\n\n  // If you hit enter it triggers the submit button\n  dialog_obj.keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !dialog_obj.parent().find(\"#authenticate_submit_btn\").button(\"option\", \"disabled\")) {\n      dialog_obj.parent().find(\"#authenticate_submit_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  if (unauth_nodes.length == 0) {\n    if (callback_success !== null) {\n      callback_success();\n    }\n    return;\n  }\n\n  if (unauth_nodes.length == 1) {\n    dialog_obj.find(\"#same_pass\").hide();\n  } else {\n    dialog_obj.find(\"#same_pass\").show();\n    dialog_obj.find(\"input:checkbox[name=all]\").prop(\"checked\", false);\n    dialog_obj.find(\"#pass_for_all\").val(\"\");\n    dialog_obj.find(\"#pass_for_all\").hide();\n  }\n\n  dialog_obj.find('#auth_nodes_list').empty();\n  unauth_nodes.forEach(function(node) {\n    dialog_obj.find('#auth_nodes_list').append(\"\\t\\t\\t<tr><td>\" + htmlEncode(node) + '</td><td><input type=\"password\" name=\"' + htmlEncode(node) + '-pass\"></td></tr>\\n');\n  });\n\n}\n\nfunction add_existing_dialog() {\n  var buttonOpts = [\n    {\n      text: \"Add Existing\",\n      id: \"add_existing_submit_btn\",\n      click: function () {\n        $(\"#add_existing_cluster\").find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n        $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", true);\n        checkExistingNode();\n      }\n    },\n    {\n      text: \"Cancel\",\n      click: function() {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  // If you hit enter it triggers the first button: Add Existing\n  $('#add_existing_cluster').keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER && !$(\"#add_existing_submit_btn\").button(\"option\", \"disabled\")) {\n      $(this).parent().find(\"button:eq(1)\").trigger(\"click\");\n      return false;\n    }\n  });\n\n  $(\"#add_existing_cluster\").dialog({title: 'Add Existing Cluster',\n    modal: false, resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction update_existing_cluster_dialog(data) {\n  for (var i in data) {\n    if (data[i] == \"Online\") {\n      ajax_wrapper({\n        type: \"POST\",\n        url: \"/manage/existingcluster\",\n        timeout: pcs_timeout,\n        data: $('#add_existing_cluster_form').serialize(),\n        success: function(data) {\n          if (data) {\n            alert(\"Operation Successful!\\n\\nWarnings:\\n\" + data);\n          }\n          $(\"#add_existing_cluster.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n          Pcs.update();\n        },\n        error: function (xhr, status, error) {\n          alert(xhr.responseText);\n          $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n        }\n      });\n      return;\n    } else if (data[i] == \"Unable to authenticate\") {\n      auth_nodes_dialog([i], function() {$(\"#add_existing_submit_btn\").trigger(\"click\");});\n      $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n      return;\n    }\n    break;\n  }\n  if (data.length > 0) {\n    $('#add_existing_cluster_error_msg').html(i + \": \" + data[i]);\n    $('#add_existing_cluster_error_msg').show();\n  }\n  $('#unable_to_connect_error_msg_ae').show();\n  $(\"#add_existing_submit_btn\").button(\"option\", \"disabled\", false);\n}\n\nfunction update_create_cluster_dialog(nodes, version_info) {\n  var keys = [];\n  for (var i in nodes) {\n    if (nodes.hasOwnProperty(i)) {\n      keys.push(i);\n    }\n  }\n\n  var cant_connect_nodes = 0;\n  var cant_auth_nodes = [];\n  var good_nodes = 0;\n  var addr1_match = 1;\n  var ring0_nodes = [];\n  var ring1_nodes = [];\n  var cman_nodes = [];\n  var noncman_nodes = [];\n  var rhel_versions = [];\n  var versions_check_ok = 1;\n  var cluster_name = $('input[name^=\"clustername\"]').val()\n  var transport = $(\"#create_new_cluster select[name='config-transport']\").val()\n\n    $('#create_new_cluster input[name^=\"node-\"]').each(function() {\n      if ($(this).val() == \"\") {\n        $(this).parent().prev().css(\"background-color\", \"\");\n        return;\n      }\n      for (var i = 0; i < keys.length; i++) {\n        if ($(this).val() == keys[i]) {\n          if (nodes[keys[i]] != \"Online\") {\n            if (nodes[keys[i]] == \"Unable to authenticate\") {\n              cant_auth_nodes.push(keys[i]);\n            } else {\n              $(this).parent().prev().css(\"background-color\", \"red\");\n              cant_connect_nodes++;\n            }\n          } else {\n            $(this).parent().prev().css(\"background-color\", \"\");\n            good_nodes++;\n          }\n        }\n      }\n    });\n\n    if (cant_auth_nodes.length > 0) {\n      auth_nodes_dialog(cant_auth_nodes, function(){$(\"#create_cluster_submit_btn\").trigger(\"click\")});\n      $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n      return;\n    }\n\n  if (transport == \"udpu\") {\n    $('#create_new_cluster input[name^=\"node-\"]').each(function() {\n      if ($(this).val().trim() != \"\") {\n        ring0_nodes.push($(this).attr(\"name\"));\n      }\n    });\n    $('#create_new_cluster input[name^=\"ring1-node-\"]').each(function() {\n      if ($(this).val().trim() != \"\") {\n        ring1_nodes.push($(this).attr(\"name\").substr(\"ring1-\".length));\n      }\n    });\n    if (ring1_nodes.length > 0) {\n      if (ring0_nodes.length != ring1_nodes.length) {\n        addr1_match = 0\n      }\n      else {\n        for (var i = 0; i < ring0_nodes.length; i++) {\n          if (ring0_nodes[i] != ring1_nodes[i]) {\n            addr1_match = 0;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if(version_info) {\n    $.each(version_info, function(node, versions) {\n      if(! versions[\"pcs\"]) {\n        // we do not have valid info for this node\n        return;\n      }\n      if(versions[\"cman\"]) {\n        cman_nodes.push(node);\n      }\n      else {\n        noncman_nodes.push(node);\n      }\n      if(versions[\"rhel\"]) {\n        if($.inArray(versions[\"rhel\"].join(\".\"), rhel_versions) == -1) {\n          rhel_versions.push(versions[\"rhel\"].join(\".\"))\n        }\n      }\n    });\n  }\n\n  if (cant_connect_nodes != 0) {\n    $(\"#unable_to_connect_error_msg\").show();\n  } else {\n    $(\"#unable_to_connect_error_msg\").hide();\n  }\n\n  if (good_nodes == 0 && cant_connect_nodes == 0) {\n    $(\"#at_least_one_node_error_msg\").show();\n  } else {\n    $(\"#at_least_one_node_error_msg\").hide();\n  }\n\n  if (cluster_name == \"\") {\n    $(\"#bad_cluster_name_error_msg\").show();\n  } else {\n    $(\"#bad_cluster_name_error_msg\").hide();\n  }\n\n  if (addr1_match == 0) {\n    $(\"#addr0_addr1_mismatch_error_msg\").show();\n  }\n  else {\n    $(\"#addr0_addr1_mismatch_error_msg\").hide();\n  }\n  if(versions) {\n    if(cman_nodes.length > 0 && transport == \"udpu\") {\n      if(noncman_nodes.length < 1 && ring1_nodes.length < 1) {\n        transport = \"udp\";\n        $(\"#create_new_cluster select[name='config-transport']\").val(transport);\n        create_cluster_display_rrp(transport);\n      }\n      else {\n        versions_check_ok = 0;\n        $(\"#cman_udpu_transport_error_msg\").show();\n      }\n    }\n    else {\n      $(\"#cman_udpu_transport_error_msg\").hide();\n    }\n\n    if(cman_nodes.length > 1 && noncman_nodes.length > 1) {\n      versions_check_ok = 0;\n      $(\"#cman_mismatch_error_msg\").show();\n    }\n    else {\n      $(\"#cman_mismatch_error_msg\").hide();\n    }\n\n    if(rhel_versions.length > 1) {\n      versions_check_ok = 0;\n      $(\"#rhel_version_mismatch_error_msg\").show();\n    }\n    else {\n      $(\"#rhel_version_mismatch_error_msg\").hide();\n    }\n  }\n  else {\n    $(\"#cman_udpu_transport_error_msg\").hide();\n    $(\"#cman_mismatch_error_msg\").hide();\n    $(\"#rhel_version_mismatch_error_msg\").hide();\n  }\n\n  if (good_nodes != 0 && cant_connect_nodes == 0 && cant_auth_nodes.length == 0 && cluster_name != \"\" && addr1_match == 1 && versions_check_ok == 1) {\n    ajax_wrapper({\n      type: \"POST\",\n      url: \"/manage/newcluster\",\n      timeout: pcs_timeout,\n      data: $('#create_new_cluster_form').serialize(),\n      success: function(data) {\n        if (data) {\n          alert(\"Operation Successful!\\n\\nWarnings:\\n\" + data);\n        }\n        $(\"#create_new_cluster.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n        Pcs.update();\n      },\n      error: function (xhr, status, error) {\n        alert(xhr.responseText);\n        $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n      }\n    });\n  } else {\n    $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", false);\n  }\n\n}\n\nfunction create_cluster_dialog() {\n  var buttonOpts = [{\n    text: \"Create Cluster\",\n    id: \"create_cluster_submit_btn\",\n    click: function() {\n      $(\"#create_new_cluster\").find(\"table.err_msg_table\").find(\"span[id$=_error_msg]\").hide();\n      $(\"#create_cluster_submit_btn\").button(\"option\", \"disabled\", true);\n      checkClusterNodes();\n    }\n  },\n  {\n    text: \"Cancel\",\n    id: \"create_cluster_cancel_btn\",\n    click: function() {\n      $(this).dialog(\"close\");\n    }\n  }]\n\n  $(\"#create_new_cluster\").dialog({title: 'Create Cluster',\n    modal: false, resizable: false,\n    width: 'auto',\n    buttons: buttonOpts\n  });\n}\n\nfunction create_cluster_add_nodes() {\n  node_list = $(\"#create_new_cluster_form tr\").has(\"input[name^='node-']\");;\n  var ring1_node_list = $(\"#create_new_cluster_form tr\").has(\n    \"input[name^='ring1-node-']\"\n  );\n  cur_num_nodes = node_list.length;\n\n  first_node = node_list.eq(0);\n  new_node = first_node.clone();\n  $(\"input\",new_node).attr(\"name\", \"node-\"+(cur_num_nodes+1));\n  $(\"input\",new_node).val(\"\");\n  $(\"td\", new_node).first().text(\"Node \" + (cur_num_nodes+1)+ \":\");\n  new_node.insertAfter(node_list.last());\n\n  var ring1_first_node = ring1_node_list.eq(0);\n  var ring1_new_node = ring1_first_node.clone();\n  $(\"input\", ring1_new_node).attr(\"name\", \"ring1-node-\" + (cur_num_nodes + 1));\n  $(\"input\", ring1_new_node).val(\"\");\n  $(\"td\", ring1_new_node).first().text(\n    \"Node \" + (cur_num_nodes+1) + \" (Ring 1):\"\n  );\n  ring1_new_node.insertAfter(ring1_node_list.last());\n\n  if (node_list.length == 7)\n    $(\"#create_new_cluster_form tr\").has(\"input[name^='node-']\").last().next().remove();\n}\n\nfunction create_cluster_display_rrp(transport) {\n  if(transport == 'udp') {\n    $('#rrp_udp_transport').show();\n    $('#rrp_udpu_transport').hide();\n  }\n  else {\n    $('#rrp_udp_transport').hide();\n    $('#rrp_udpu_transport').show();\n  };\n}\n\nfunction show_hide_constraints(element) {\n  //$(element).parent().siblings().each (function(index,element) {\n  $(element).parent().nextUntil(\".stop\").toggle();\n  $(element).children(\"span, p\").toggle();\n}\n\nfunction show_hide_constraint_tables(element) {\n  $(element).siblings().hide();\n  $(\"#add_constraint_\" + $(element).val()).show();\n}\n\nfunction hover_over(o) {\n  $(o).addClass(\"node_selected\");\n}\n\nfunction hover_out(o) {\n  $(o).removeClass(\"node_selected\");\n}\n\nfunction reload_current_resource() {\n  tree_view_onclick(curResource());\n  tree_view_onclick(curStonith());\n}\n\nfunction load_row(node_row, ac, cur_elem, containing_elem, also_set, initial_load){\n  hover_over(node_row);\n  $(node_row).siblings().each(function(key,sib) {\n    hover_out(sib);\n  });\n  var self = ac;\n  $(containing_elem).fadeTo(500, .01,function() {\n    node_name = $(node_row).attr(\"nodeID\");\n    $.each(self.content, function(key, node) {\n      if (node.name == node_name) {\n        if (!initial_load) {\n          self.set(cur_elem,node);\n        }\n        node.set(cur_elem, true);\n        if (also_set)\n          self.set(also_set, node);\n      } else {\n        if (self.cur_resource_ston && self.cur_resource_ston.name == node.name)\n          self.content[key].set(cur_elem,true);\n        else if (self.cur_resource_res && self.cur_resource_res.name == node.name)\n          self.content[key].set(cur_elem,true);\n        else\n          self.content[key].set(cur_elem,false);\n      }\n    });\n    $(containing_elem).fadeTo(500,1);\n  });\n}\n\nfunction show_loading_screen() {\n  $(\"#loading_screen_progress_bar\").progressbar({ value: 100});\n  $(\"#loading_screen\").dialog({\n    modal: true,\n    title: \"Loading\",\n    height: 100,\n    width: 250,\n    hide: {\n      effect: 'fade',\n      direction: 'down',\n      speed: 750\n    }\n  });\n}\n\nfunction hide_loading_screen() {\n  $(\"#loading_screen\").dialog('close');\n  destroy_tooltips();\n}\n\nfunction destroy_tooltips() {\n  $(\"div[id^=ui-tooltip-]\").remove();\n}\n\nfunction remove_cluster(ids) {\n  var data = {};\n  $.each(ids, function(_, cluster) {\n    data[ \"clusterid-\" + cluster] = true;\n  });\n  ajax_wrapper({\n    type: 'POST',\n    url: '/manage/removecluster',\n    data: data,\n    timeout: pcs_timeout,\n    success: function () {\n      $(\"#dialog_verify_remove_clusters.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\"Unable to remove cluster: \" + res + \" (\"+error+\")\");\n      $(\"#dialog_verify_remove_clusters.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n    }\n  });\n}\n\nfunction remove_nodes(ids, force) {\n  var data = {};\n  for (var i=0; i<ids.length; i++) {\n    data[\"nodename-\"+i] = ids[i];\n  }\n  if (force) {\n    data[\"force\"] = force;\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_nodes',\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function(data,textStatus) {\n      $(\"#dialog_verify_remove_nodes.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      if (data == \"No More Nodes\") {\n        window.location.href = \"/manage\";\n      } else {\n        Pcs.update();\n      }\n    },\n    error: function (xhr, status, error) {\n      $(\"#dialog_verify_remove_nodes.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      if ((status == \"timeout\") || ($.trim(error) == \"timeout\")) {\n        /*\n         We are not interested in timeout because:\n         - it can take minutes to stop a node (resources running on it have\n           to be stopped/moved and we do not need to wait for that)\n         - if pcs is not able to stop a node it returns an (forceable) error\n           immediatelly\n        */\n        return;\n      }\n      var message = \"Unable to remove nodes (\" + $.trim(error) + \")\";\n      message += \"\\n\" + xhr.responseText;\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          remove_nodes(ids, true);\n        }\n      }\n    }\n  });\n}\n\nfunction remove_resource(ids, force) {\n  var data = {\n    no_error_if_not_exists: true\n  };\n  if (force) {\n    data[\"force\"] = force;\n  }\n  var res_obj;\n  $.each(ids, function(_, id) {\n    res_obj = Pcs.resourcesContainer.get_resource_by_id(id);\n    if (!res_obj) {\n      return true; // continue\n    } else if ($.inArray(res_obj.get(\"parent_id\"), ids) == -1) {\n      data[\"resid-\" + id] = true;\n    }\n  });\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_resource',\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function () {\n      $(\"#dialog_verify_remove_resources.ui-dialog-content\").each(function(key, item) {$(item).dialog(\"destroy\")});\n      $(\"#dialog_verify_remove_resources input[name=force]\").attr(\"checked\", false);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      error = $.trim(error);\n      var message = \"\";\n      if (\n        status == \"timeout\" ||\n        error == \"timeout\" ||\n        xhr.responseText == '{\"noresponse\":true}'\n      ) {\n        message = \"Operation takes longer to complete than expected.\";\n      } else {\n        message = \"Unable to remove resources (\" + error + \")\";\n        if (\n          (xhr.responseText.substring(0, 6) == \"Error:\") ||\n          (\"Forbidden\" == error)\n        ) {\n          message += \"\\n\\n\" + xhr.responseText.replace(\n            \"--force\", \"'Enforce removal'\"\n          );\n          alert(message);\n          $(\"#verify_remove_submit_btn\").button(\"option\", \"disabled\", false);\n          return;\n        }\n      }\n      alert(message);\n      $(\"#dialog_verify_remove_resources.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n      $(\"#dialog_verify_remove_resources input[name=force]\").attr(\"checked\", false);\n      Pcs.update();\n    }\n  });\n}\n\nfunction add_remove_fence_level(parent_id,remove) {\n  var data = {};\n  if (remove == true) {\n    data[\"remove\"] = true;\n    data[\"level\"] = parent_id.attr(\"fence_level\");\n    data[\"node\"] = Pcs.nodesController.cur_node.name;\n    data[\"devices\"] = parent_id.attr(\"fence_devices\");\n  } else {\n    data[\"level\"] = parent_id.parent().find(\"input[name='new_level_level']\").val();\n    data[\"devices\"] = parent_id.parent().find(\"select[name='new_level_value']\").val();\n    data[\"node\"] = Pcs.nodesController.cur_node.name;\n  }\n  fade_in_out(parent_id.parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_fence_level_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n//      Pcs.nodesController.remove_fence_level();\n      if (!remove) {\n        $(parent_id.parent()).find(\"input\").val(\"\");\n        $(parent_id.parent()).find(\"select\").val(\"\");\n      }\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      if (remove) {\n        alert(\n          \"Unable to remove fence level \"\n          + ajax_simple_error(xhr, status, error)\n        );\n      }\n      else {\n        if (xhr.responseText.substring(0,6) == \"Error:\") {\n          alert(xhr.responseText);\n        } else {\n          alert(\n            \"Unable to add fence level \"\n            + ajax_simple_error(xhr, status, error)\n          );\n        }\n      }\n    }\n  });\n}\n\nfunction remove_node_attr(parent_id) {\n  var data = {};\n  data[\"node\"] = Pcs.nodesController.cur_node.name;\n  data[\"key\"] = parent_id.attr(\"node_attr_key\");\n  data[\"value\"] = \"\"; // empty value will remove attribute\n  fade_in_out(parent_id.parent());\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n//      Pcs.nodesController.remove_node_attr(data[\"res_id\"], data[\"key\"]);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to remove node attribute \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction add_node_attr(parent_id) {\n  var data = {};\n  data[\"node\"] = Pcs.nodesController.cur_node.name;\n  data[\"key\"] = $(parent_id + \" input[name='new_node_attr_key']\").val();\n  data[\"value\"] = $(parent_id + \" input[name='new_node_attr_value']\").val();\n  fade_in_out($(parent_id));\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      $(parent_id + \" input\").val(\"\");\n//      Pcs.nodesController.add_node_attr(data[\"res_id\"], data[\"key\"], data[\"value\"]);\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to add node attribute \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction node_maintenance(node) {\n  var data = {\n    node: node,\n    key: \"maintenance\",\n    value: \"on\"\n  };\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to put node '\" + node + \"' to maintenance mode. \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction node_unmaintenance(node) {\n  var data = {\n    node: node,\n    key: \"maintenance\",\n    value: \"\"\n  };\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'add_node_attr_remote',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to remove node '\" + node + \"' from maintenance mode. \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction remove_meta_attr(parent_id) {\n  var resource_id = curResource();\n  if (resource_id == null) {\n    return;\n  }\n  var attr = parent_id.attr(\"meta_attr_key\");\n  fade_in_out(parent_id.parent());\n  Pcs.resourcesContainer.update_meta_attr(resource_id, attr);\n}\n\nfunction add_meta_attr(parent_id) {\n  var resource_id = curResource();\n  if (resource_id == null) {\n    return;\n  }\n  var attr = $(parent_id + \" input[name='new_meta_key']\").val();\n  var value = $(parent_id + \" input[name='new_meta_value']\").val();\n  fade_in_out($(parent_id));\n  $(parent_id + \" input\").val(\"\");\n  Pcs.resourcesContainer.update_meta_attr(resource_id, attr, value);\n}\n\n\nfunction add_constraint_prepare_data(parent_id, constraint_type){\n  var value = function(sibling){\n    var form_value = $(parent_id + \" \" + sibling).val();\n    return form_value ? form_value.trim() : form_value;\n  };\n  switch(constraint_type){\n    case \"ticket\": return {\n      ticket: value(\"input[name='ticket']\"),\n      role: value(\"select[name='role']\"),\n      \"loss-policy\": value(\"select[name='loss-policy']\"),\n    };\n  }\n  return {\n    rule: value(\"input[name='node_id']\"),\n    score: value(\"input[name='score']\"),\n    target_res_id: value(\"input[name='target_res_id']\"),\n    order: value(\"select[name='order']\"),\n    target_action: value(\"select[name='target_action']\"),\n    res_action: value(\"select[name='res_action']\"),\n    colocation_type: value(\"select[name='colocate']\"),\n  };\n}\n\nfunction add_constraint(parent_id, c_type, force) {\n  var data = add_constraint_prepare_data(parent_id, c_type);\n  data[\"disable_autocorrect\"] = true;\n  data[\"res_id\"] = Pcs.resourcesContainer.cur_resource.get('id');\n  data[\"node_id\"] = $(parent_id + \" input[name='node_id']\").val();\n  data[\"c_type\"] = c_type;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  fade_in_out($(parent_id));\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + (\n      data['node_id'] && (data['node_id'].trim().indexOf(' ') != -1)\n      ? 'add_constraint_rule_remote'\n      : 'add_constraint_remote'\n    ),\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      $(parent_id + \" input\").val(\"\");\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      var message = \"Unable to add constraint (\" + $.trim(error) + \")\";\n      var error_prefix = 'Error adding constraint: ';\n      if (xhr.responseText.indexOf('cib_replace failed') == -1) {\n        if (xhr.responseText.indexOf(error_prefix) == 0) {\n          message += \"\\n\\n\" + xhr.responseText.slice(error_prefix.length);\n        }\n        else {\n          message += \"\\n\\n\" + xhr.responseText;\n        }\n      }\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n        Pcs.update();\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        message = message.replace('Use --force to override.', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          add_constraint(parent_id, c_type, true);\n        }\n      }\n    }\n  });\n}\n\nfunction add_constraint_set_get_options(parent_id, constraint_type){\n  switch(constraint_type){\n    case \"ticket\": return {\n      ticket: $(parent_id + \" input[name='ticket']\").val().trim(),\n      \"loss-policy\": $(parent_id + \" select[name='loss-policy']\").val().trim(),\n    };\n  }\n  return {};\n}\n\nfunction add_constraint_set(parent_id, c_type, force) {\n  var data = {\n    resources: [],\n    disable_autocorrect: true,\n    options: {},\n  };\n  $(parent_id + \" input[name='resource_ids[]']\").each(function(index, element) {\n    var resources = element.value.trim();\n    if (resources.length > 0) {\n      data['resources'].push(resources.split(/\\s+/));\n    }\n  });\n  data.options = add_constraint_set_get_options(parent_id, c_type);\n  data[\"c_type\"] = c_type;\n  if (force) {\n    data[\"force\"] = force;\n  }\n  if (data['resources'].length < 1) {\n    return;\n  }\n  fade_in_out($(parent_id))\n\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_constraint_set_remote\",\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      reset_constraint_set_form(parent_id);\n      Pcs.update();\n    },\n    error: function (xhr, status, error){\n      var message = \"Unable to add constraint (\" + $.trim(error) + \")\";\n      var error_prefix = 'Error adding constraint: ';\n      if (xhr.responseText.indexOf('cib_replace failed') == -1) {\n        if (xhr.responseText.indexOf(error_prefix) == 0) {\n          message += \"\\n\\n\" + xhr.responseText.slice(error_prefix.length);\n        }\n        else {\n          message += \"\\n\\n\" + xhr.responseText;\n        }\n      }\n      if (message.indexOf('--force') == -1) {\n        alert(message);\n        Pcs.update();\n      }\n      else {\n        message = message.replace(', use --force to override', '');\n        message = message.replace('Use --force to override.', '');\n        if (confirm(message + \"\\n\\nDo you want to force the operation?\")) {\n          add_constraint_set(parent_id, c_type, true);\n        }\n      }\n    },\n  });\n}\n\nfunction new_constraint_set_row(parent_id) {\n  $(parent_id + \" td\").first().append(\n    '<br>Set: <input type=\"text\" name=\"resource_ids[]\">'\n  );\n}\n\nfunction reset_constraint_set_form(parent_id) {\n  $(parent_id + \" td\").first().html(\n    'Set: <input type=\"text\" name=\"resource_ids[]\">'\n  );\n}\n\nfunction remove_constraint(id) {\n  fade_in_out($(\"[constraint_id='\"+id+\"']\").parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_constraint_remote',\n    data: {\"constraint_id\": id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing constraint \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction remove_constraint_action(remover_element){\n  remove_constraint($(remover_element).parent().attr('constraint_id'));\n  return false;\n}\n\nfunction remove_constraint_rule(id) {\n  fade_in_out($(\"[rule_id='\"+id+\"']\").parent());\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_constraint_rule_remote',\n    data: {\"rule_id\": id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing constraint rule \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction add_acl_role(form) {\n  var data = {}\n  data[\"name\"] = $(form).find(\"input[name='name']\").val().trim();\n  data[\"description\"] = $(form).find(\"input[name='description']\").val().trim();\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"add_acl_role\",\n    data: data,\n    success: function(data) {\n      Pcs.update();\n      $(form).find(\"input\").val(\"\");\n      $(\"#add_acl_role\").dialog(\"close\");\n    },\n    error: function(xhr, status, error) {\n      alert(\n        \"Error adding ACL role \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction remove_acl_roles(ids) {\n  var data = {};\n  for (var i = 0; i < ids.length; i++) {\n    data[\"role-\" + i] = ids[i];\n  }\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + \"remove_acl_roles\",\n    data: data,\n    timeout: pcs_timeout*3,\n    success: function(data,textStatus) {\n      $(\"#dialog_verify_remove_acl_roles.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing ACL role \"\n        + ajax_simple_error(xhr, status, error)\n      );\n      $(\"#dialog_verify_remove_acl_roles.ui-dialog-content\").each(\n        function(key, item) { $(item).dialog(\"destroy\"); }\n      );\n    }\n  });\n}\n\nfunction add_acl_item(parent_id, item_type) {\n  var data = {};\n  data[\"role_id\"] = Pcs.aclsController.cur_role.name;\n  var item_label = \"\";\n  switch (item_type) {\n    case \"perm\":\n      data[\"item\"] = \"permission\";\n      data[\"type\"] = $(parent_id + \" select[name='role_type']\").val();\n      data[\"xpath_id\"] = $(parent_id + \" select[name='role_xpath_id']\").val();\n      data[\"query_id\"] = $(parent_id + \" input[name='role_query_id']\").val().trim();\n      item_label = \"permission\"\n      break;\n    case \"user\":\n    case \"group\":\n      data[\"item\"] = item_type;\n      data[\"usergroup\"] = $(parent_id + \" input[name='role_assign_user']\").val().trim();\n      item_label = item_type\n      break;\n  }\n  fade_in_out($(parent_id));\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url() + 'add_acl',\n    data: data,\n    timeout: pcs_timeout,\n    success: function(data) {\n      $(parent_id + \" input\").val(\"\");\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error adding \" + item_label + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction remove_acl_item(id,item) {\n  fade_in_out(id);\n  var data = {};\n  var item_label = \"\";\n  switch (item) {\n    case \"perm\":\n      data[\"item\"] = \"permission\";\n      data[\"acl_perm_id\"] = id.attr(\"acl_perm_id\");\n      item_label = \"permission\"\n      break;\n    case \"group\":\n    case \"user\":\n      data[\"item\"] = \"usergroup\";\n      data[\"item_type\"] = item;\n      data[\"usergroup_id\"] = id.attr(\"usergroup_id\")\n      data[\"role_id\"] = id.attr(\"role_id\")\n      item_label = \"user / group\"\n      break;\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'remove_acl',\n    data: data,\n    timeout: pcs_timeout,\n    success: function (data) {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error removing \" + item_label + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction update_cluster_settings() {\n  $(\"#cluster_properties button\").prop(\"disabled\", true);\n  var data = {\n    'hidden[hidden_input]': null // this is needed for backward compatibility\n  };\n  $.each(Pcs.settingsController.get(\"properties\"), function(_, prop) {\n    data[prop.get(\"form_name\")] = prop.get(\"cur_val\");\n  });\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'update_cluster_settings',\n    data: data,\n    timeout: pcs_timeout,\n    success: function() {\n      refresh_cluster_properties();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        \"Error updating configuration \"\n        + ajax_simple_error(xhr, status, error)\n      );\n      hide_loading_screen();\n      $(\"#cluster_properties button\").prop(\"disabled\", false);\n    }\n  });\n}\n\nfunction refresh_cluster_properties() {\n  Pcs.settingsController.set(\"filter\", \"\");\n  $(\"#cluster_properties button\").prop(\"disabled\", true);\n  ajax_wrapper({\n    url: get_cluster_remote_url() + \"cluster_properties\",\n    timeout: pcs_timeout,\n    dataType: \"json\",\n    success: function(data) {\n      Pcs.settingsController.update(data);\n    },\n    error: function (xhr, status, error) {\n      Pcs.settingsController.set(\"error\", true);\n    },\n    complete: function() {\n      hide_loading_screen();\n      $(\"#cluster_properties button\").prop(\"disabled\", false);\n    }\n  });\n}\n\n// Pull currently managed cluster name out of URL\nfunction get_cluster_name() {\n  var cluster_name = location.pathname.match(\"/managec/(.*)/\");\n  if (cluster_name && cluster_name.length >= 2) {\n    Ember.debug(\"Cluster Name: \" + cluster_name[1]);\n    cluster_name = cluster_name[1];\n    return cluster_name;\n  }\n  Ember.debug(\"Cluster Name is 'null'\");\n  cluster_name = null;\n  return cluster_name;\n}\n\nfunction get_cluster_remote_url(cluster_name) {\n  cluster_name = typeof cluster_name !== 'undefined' ? cluster_name : Pcs.cluster_name;\n  return '/managec/' + cluster_name + \"/\";\n}\n\nfunction checkBoxToggle(cb,nodes) {\n  if (nodes) {\n    cbs = $('#node_list table').find(\".node_list_check input[type=checkbox]\");\n  } else {\n    cbs = $(cb).closest(\"tr\").parent().find(\".node_list_check input[type=checkbox]\")\n  }\n  if ($(cb).prop('checked'))\n    cbs.prop('checked',true).change();\n  else\n    cbs.prop('checked',false).change();\n}\n\nfunction loadWizard(item) {\n  wizard_name = $(item).val();\n  data = {wizard: wizard_name};\n\n  $(\"#wizard_location\").load(\n   get_cluster_remote_url() + 'get_wizard',\n   data);\n}\n\nfunction wizard_submit(form) {\n  data = $(form).serialize();\n  $(\"#wizard_location\").load(\n    get_cluster_remote_url() + 'wizard_submit',\n    data);\n}\n\nfunction update_resource_type_options() {\n  var cp = $(\"#resource_class_provider_selector\").val();\n  var target = $(\"#add_ra_type\");\n  var source = $(\"#all_ra_types\");\n\n  target.empty();\n  source.find(\"option\").each(function(i,v) {\n    if ($(v).val().indexOf(cp) == 0) {\n      new_option = $(v).clone();\n      target.append(new_option);\n    }\n  });\n  target.change();\n}\n\nfunction setup_resource_class_provider_selection() {\n  $(\"#resource_class_provider_selector\").change(function() {\n    update_resource_type_options();\n  });\n  $(\"#resource_class_provider_selector\").change();\n}\n\nfunction get_status_value(status) {\n  var values = {\n    failed: 1,\n    error: 1,\n    offline: 1,\n    blocked: 1,\n    warning: 2,\n    standby: 2,\n    maintenance: 2,\n    \"partially running\": 2,\n    disabled: 3,\n    unmanaged: 3,\n    unknown: 4,\n    ok: 5,\n    running: 5,\n    online: 5\n  };\n  return ((values.hasOwnProperty(status)) ? values[status] : -1);\n}\n\nfunction status_comparator(a,b) {\n  var valA = get_status_value(a);\n  var valB = get_status_value(b);\n  if (valA == -1) return 1;\n  if (valB == -1) return -1;\n  return valA - valB;\n}\n\nfunction get_status_icon_class(status_val, is_unmanaged) {\n  var is_unmanaged = typeof is_unmanaged !== 'undefined' ? is_unmanaged : false;\n  switch (status_val) {\n    case get_status_value(\"error\"):\n      return \"error\";\n    case get_status_value(\"disabled\"):\n    case get_status_value(\"warning\"):\n      return \"warning\";\n    case get_status_value(\"ok\"):\n      return is_unmanaged ? \"warning\" : \"check\";\n    default:\n      return \"x\";\n  }\n}\n\nfunction get_status_color(status_val, is_unmanaged) {\n  var is_unmanaged = typeof is_unmanaged !== 'undefined' ? is_unmanaged : false;\n  if (status_val == get_status_value(\"ok\")) {\n    return is_unmanaged? \"orange\" : \"green\";\n  }\n  else if (status_val == get_status_value(\"warning\") || status_val == get_status_value(\"unknown\") || status_val == get_status_value('disabled')) {\n    return \"orange\";\n  }\n  return \"red\";\n}\n\nfunction show_hide_dashboard(element, type) {\n  var cluster = Pcs.clusterController.cur_cluster;\n  if (Pcs.clusterController.get(\"show_all_\" + type)) { // show only failed\n    Pcs.clusterController.set(\"show_all_\" + type, false);\n  } else { // show all\n    Pcs.clusterController.set(\"show_all_\" + type, true);\n  }\n  correct_visibility_dashboard_type(cluster, type);\n}\n\nfunction correct_visibility_dashboard(cluster) {\n  if (cluster == null)\n    return;\n  $.each([\"nodes\", \"resources\", \"fence\"], function(key, type) {\n    correct_visibility_dashboard_type(cluster, type);\n  });\n}\n\nfunction correct_visibility_dashboard_type(cluster, type) {\n  if (cluster == null) {\n    return;\n  }\n  destroy_tooltips();\n  var listTable = $(\"#cluster_info_\" + cluster.name).find(\"table.\" + type + \"_list\");\n  var datatable = listTable.find(\"table.datatable\");\n  if (Pcs.clusterController.get(\"show_all_\" + type)) {\n    listTable.find(\"span.downarrow\").show();\n    listTable.find(\"span.rightarrow\").hide();\n    datatable.find(\"tr.default-hidden\").removeClass(\"hidden\");\n  } else {\n    listTable.find(\"span.downarrow\").hide();\n    listTable.find(\"span.rightarrow\").show();\n    datatable.find(\"tr.default-hidden\").addClass(\"hidden\");\n  }\n  if (cluster.get(type + \"_failed\") == 0 && !Pcs.clusterController.get(\"show_all_\" + type)) {\n    datatable.hide();\n  } else {\n    datatable.show();\n  }\n}\n\nfunction get_formated_html_list(data) {\n  if (data == null || data.length == 0) {\n    return \"\";\n  }\n  var out = \"<ul>\";\n  $.each(data, function(key, value) {\n    out += \"<li>\" + htmlEncode(value.message) + \"</li>\";\n  });\n  out += \"</ul>\";\n  return out;\n}\n\nfunction htmlEncode(s)\n{\n  return $(\"<div/>\").text(s).html().replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n}\n\nfunction fix_auth_of_cluster() {\n  show_loading_screen();\n  var clustername = Pcs.clusterController.cur_cluster.name;\n  ajax_wrapper({\n    url: get_cluster_remote_url(clustername) + \"fix_auth_of_cluster\",\n    type: \"POST\",\n    success: function(data) {\n      hide_loading_screen();\n      Pcs.update();\n    },\n    error: function(jqhxr,b,c) {\n      hide_loading_screen();\n      Pcs.update();\n      alert(jqhxr.responseText);\n    }\n  });\n}\n\nfunction get_tree_view_resource_id(element) {\n  var suffix = '-treeview-element';\n  var element_id = $(element).parents('table.tree-element')[0].id;\n  if (element_id && element_id.endsWith(suffix)) {\n    return element_id.substr(0, element_id.lastIndexOf(suffix));\n  }\n  return null;\n}\n\nfunction get_list_view_element_id(element) {\n  return $(element)[0].id;\n}\n\nfunction auto_show_hide_constraints() {\n  var cont = [\n    \"location_constraints\",\n    \"ordering_constraints\",\n    \"ordering_set_constraints\",\n    \"colocation_constraints\",\n    \"colocation_set_constraints\",\n    \"ticket_constraints\",\n    \"ticket_set_constraints\",\n    \"meta_attributes\",\n  ];\n  $.each(cont, function(index, name) {\n    var elem = $(\"#\" + name)[0];\n    var cur_resource = Pcs.resourcesContainer.get('cur_resource');\n    if (elem && cur_resource) {\n      var visible = $(elem).children(\"span\")[0].style.display != 'none';\n      if (visible && (!cur_resource.get(name) || cur_resource.get(name).length == 0))\n        show_hide_constraints(elem);\n      else if (!visible && cur_resource.get(name) && cur_resource.get(name).length > 0)\n        show_hide_constraints(elem);\n    }\n  });\n}\n\nfunction get_resource_agent_metadata(agent, on_success, stonith) {\n  stonith = typeof stonith !== 'undefined' ? stonith : false;\n  var request = (stonith)\n    ? 'get_fence_agent_metadata'\n    : 'get_resource_agent_metadata';\n  ajax_wrapper({\n    url: get_cluster_remote_url() + request,\n    dataType: \"json\",\n    data: {agent: agent},\n    timeout: pcs_timeout,\n    success: on_success,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to get metadata for resource agent '\" + agent + \"' \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  })\n}\n\nfunction update_instance_attributes(resource_id) {\n  var res_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (!(res_obj && res_obj.get(\"is_primitive\"))) {\n    return;\n  }\n  get_resource_agent_metadata(res_obj.get(\"resource_type\"), function(data) {\n    var agent = Pcs.ResourceAgent.create(data);\n    res_obj.set(\"resource_agent\", agent);\n    $.each(res_obj.get(\"instance_attr\"), function(_, attr) {\n      agent.get_parameter(attr.name).set(\"value\", attr.value);\n    });\n  }, res_obj.get(\"stonith\"));\n}\n\nfunction tree_view_onclick(resource_id) {\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (!resource_obj) {\n    console.log(\"Resource \" + resource_id + \"not found.\");\n    return;\n  }\n  if (resource_obj.get('stonith')) {\n    if (window.location.hash.startsWith(\"#/fencedevices\")) {\n      window.location.hash = \"/fencedevices/\" + resource_id;\n    }\n    Pcs.resourcesContainer.set('cur_fence', resource_obj);\n  } else {\n    if (window.location.hash.startsWith(\"#/resources\")) {\n      window.location.hash = \"/resources/\" + resource_id;\n    }\n    Pcs.resourcesContainer.set('cur_resource', resource_obj);\n    auto_show_hide_constraints();\n  }\n  update_instance_attributes(resource_id);\n  tree_view_select(resource_id);\n}\n\nfunction tree_view_select(element_id) {\n  var e = $(`#${element_id}-treeview-element`);\n  var view = e.parents('table.tree-view');\n  view.find('div.arrow').hide();\n  view.find('tr.children').hide();\n  view.find('table.tree-element').show();\n  view.find('tr.tree-element-name').removeClass(\"node_selected\");\n  e.find('tr.tree-element-name:first').addClass(\"node_selected\");\n  e.find('tr.tree-element-name div.arrow:first').show();\n  e.parents('tr.children').show();\n  e.find('tr.children').show();\n}\n\nfunction tree_view_checkbox_onchange(element) {\n  var e = $(element);\n  var children = $(element).closest(\".tree-element\").find(\".children\" +\n    \" input:checkbox\");\n  var val = e.prop('checked');\n  children.prop('checked', val);\n  children.prop('disabled', val);\n}\n\nfunction resource_master(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_master',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to create master/slave resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_clone(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_clone',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to clone the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_unclone(resource_id) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  if (resource_obj.get('class_type') == 'clone') {\n    resource_id = resource_obj.get('member').get('id');\n  }\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_unclone',\n    data: {resource_id: resource_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to unclone the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_ungroup(group_id) {\n  if (group_id == null) {\n    return;\n  }\n  show_loading_screen();\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_ungroup',\n    data: {group_id: group_id},\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to ungroup the resource \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction resource_change_group(resource_id, form) {\n  if (resource_id == null) {\n    return;\n  }\n  show_loading_screen();\n  var resource_obj = Pcs.resourcesContainer.get_resource_by_id(resource_id);\n  var data = {\n    resource_id: resource_id\n  };\n  $.each($(form).serializeArray(), function(_, item) {\n    data[item.name] = item.value;\n  });\n\n  if (\n    resource_obj.get('parent') &&\n    resource_obj.get('parent').get('class_type') == 'group'\n  ) {\n    data['old_group_id'] = resource_obj.get('parent').get('id');\n  }\n\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + 'resource_change_group',\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to change group \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction ajax_simple_error(xhr, status, error) {\n  var message = \"(\" + $.trim(error) + \")\"\n  if (\n    $.trim(xhr.responseText).length > 0\n    &&\n    xhr.responseText.indexOf('cib_replace failed') == -1\n  ) {\n    message = message + \"\\n\\n\" + $.trim(xhr.responseText);\n  }\n  return message;\n}\n\nfunction ajax_wrapper(options) {\n  // get original callback functions\n  var error_original = function(xhr, status, error) {};\n  if (options.error) {\n    error_original = options.error;\n  }\n  var complete_original = function(xhr, status) {};\n  if (options.complete) {\n    complete_original = options.complete;\n  }\n\n  // prepare new callback functions\n  var options_new = $.extend(true, {}, options);\n  // display login dialog on error\n  options_new.error = function(xhr, status, error) {\n    if (xhr.status == 401) {\n      ajax_queue.push(options);\n      if (!login_dialog_opened) {\n        login_dialog(function() {\n          var item;\n          while (ajax_queue.length > 0) {\n            item = ajax_queue.shift();\n            ajax_wrapper(item);\n          }\n        });\n      }\n    }\n    else {\n      error_original(xhr, status, error);\n    }\n  }\n  // Do not run complete function if login dialog is open.\n  // Once user is logged in again, the original complete function will be run\n  // in repeated ajax call run by login dialog on success.\n  options_new.complete = function(xhr, status) {\n    if (xhr.status == 401) {\n      return;\n    }\n    else {\n      complete_original(xhr, status);\n    }\n  }\n\n  // run ajax request or put it into a queue\n  if (login_dialog_opened) {\n    ajax_queue.push(options);\n  }\n  else {\n    $.ajax(options_new);\n  }\n}\n\nfunction login_dialog(on_success) {\n  var ok_button_id = \"login_form_ok\";\n  var ok_button_selector = \"#\" + ok_button_id;\n  var buttons = [\n    {\n      text: \"Log In\",\n      id: ok_button_id,\n      click: function() {\n        var me = $(this);\n        var my_dialog = $(this).dialog()\n        my_dialog.find(\"#login_form_denied\").hide();\n        $(ok_button_selector).button(\"option\", \"disabled\", true);\n        $.ajax({\n          type: \"POST\",\n          url: \"/login\",\n          data: my_dialog.find(\"#login_form\").serialize(),\n          complete: function() {\n            $(ok_button_selector).button(\"option\", \"disabled\", false);\n          },\n          success: function() {\n            my_dialog.find(\"#login_form_username\").val(\"\");\n            my_dialog.find(\"#login_form_password\").val(\"\");\n            me.dialog(\"destroy\");\n            login_dialog_opened = false;\n            on_success();\n          },\n          error: function(xhr, status, error) {\n            if (xhr.status == 401) {\n              my_dialog.find(\"#login_form_denied\").show();\n              my_dialog.find(\"#login_form_password\").val(\"\");\n            }\n            else {\n              alert(\"Login error \" + ajax_simple_error(xhr, status, error));\n            }\n          },\n        });\n      },\n    },\n    {\n      text: \"Cancel\",\n      id: \"login_form_cancel\",\n      // cancel will close the dialog the same way as X button does\n      click: function() {\n        $(this).dialog(\"close\");\n      },\n    },\n  ];\n  var dialog_obj = $(\"#dialog_login\").dialog({\n    title: \"Log In\",\n    modal: true,\n    resizable: true,\n    width: 400,\n    buttons: buttons,\n    open: function(event, ui) {\n      login_dialog_opened = true;\n    },\n    create: function(event, ui) {\n      login_dialog_opened = true;\n    },\n    // make sure to logout the user on dialog close\n    close: function(event, ui) {\n      login_dialog_opened = false;\n      location = \"/logout\";\n    },\n  });\n  dialog_obj.find(\"#login_form_denied\").hide();\n  // submit on enter\n  dialog_obj.keypress(function(e) {\n    if (\n      e.keyCode == $.ui.keyCode.ENTER\n      &&\n      !dialog_obj.parent().find(ok_button_selector).button(\"option\", \"disabled\")\n    ) {\n      dialog_obj.parent().find(ok_button_selector).trigger(\"click\");\n      return false;\n    }\n  });\n}\n\nvar permissions_current_cluster;\n\nfunction permissions_load_all() {\n  show_loading_screen();\n\n  var cluster_list = [];\n  $(\"#node_info div[id^='permissions_cluster_']\").each(function(i, div) {\n    cluster_list.push(\n      $(div).attr(\"id\").substring(\"permissions_cluster_\".length)\n    );\n  });\n\n  var call_count = cluster_list.length;\n  var callback = function() {\n    call_count = call_count - 1;\n    if (call_count < 1) {\n      hide_loading_screen();\n    }\n  }\n\n  $.each(cluster_list, function(index, cluster) {\n    permissions_load_cluster(cluster, callback);\n  });\n\n  if (cluster_list.length > 0) {\n    permissions_current_cluster = cluster_list[0];\n    permissions_show_cluster(\n      permissions_current_cluster,\n      $(\"#cluster_list tr\").first().next() /* the first row is a heading */\n    );\n  }\n  else {\n    hide_loading_screen();\n  }\n}\n\nfunction permissions_load_cluster(cluster_name, callback) {\n  var element_id = \"permissions_cluster_\" + cluster_name;\n  ajax_wrapper({\n    type: \"GET\",\n    url: \"/permissions_cluster_form/\" + cluster_name,\n    timeout: pcs_timeout,\n    success: function(data) {\n      $(\"#\" + element_id).html(data);\n      $(\"#\" + element_id + \" :checkbox\").each(function(key, checkbox) {\n        permissions_fix_dependent_checkboxes(checkbox);\n      });\n      permissions_cluster_dirty_flag(cluster_name, false);\n      if (callback) {\n        callback();\n      }\n    },\n    error: function(xhr, status, error) {\n      $(\"#\" + element_id).html(\n        \"Error loading permissions \" + ajax_simple_error(xhr, status, error)\n      );\n      if (callback) {\n        callback();\n      }\n    }\n  });\n}\n\nfunction permissions_show_cluster(cluster_name, list_row) {\n  permissions_current_cluster = cluster_name;\n\n  var container = $(\"#node_info\");\n  container.fadeTo(500, .01, function() {\n    container.children().hide();\n    $(\"#permissions_cluster_\" + cluster_name).show();\n    container.fadeTo(500, 1);\n  });\n\n  $(list_row).siblings(\"tr\").each(function(index, row) {\n    hover_out(row);\n    $(row).find(\"td\").last().children().hide();\n  });\n  hover_over(list_row);\n  $(list_row).find(\"td\").last().children().show();\n}\n\nfunction permissions_save_cluster(form) {\n  var dataString = $(form).serialize();\n  var cluster_name = permissions_get_clustername(form);\n  ajax_wrapper({\n    type: \"POST\",\n    url: get_cluster_remote_url(cluster_name) + \"permissions_save\",\n    timeout: pcs_timeout,\n    data: dataString,\n    success: function() {\n      show_loading_screen();\n      permissions_load_cluster(cluster_name, hide_loading_screen);\n    },\n    error: function(xhr, status, error) {\n      alert(\n        \"Unable to save permissions of cluster \" + cluster_name + \" \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction permissions_cluster_dirty_flag(cluster_name, flag) {\n  var cluster_row = permissions_get_cluster_row(cluster_name);\n  if (cluster_row) {\n    var dirty_elem = cluster_row.find(\"span[class=unsaved_changes]\");\n    if (dirty_elem) {\n      if (flag) {\n        dirty_elem.show();\n      }\n      else {\n        dirty_elem.hide();\n      }\n    }\n  }\n}\n\nfunction permission_remove_row(button) {\n  var cluster_name = permissions_get_clustername(\n    $(button).parents(\"form\").first()\n  );\n  $(button).parent().parent().remove();\n  permissions_cluster_dirty_flag(cluster_name, true);\n}\n\nfunction permissions_add_row(template_row) {\n  var user_name = permissions_get_row_name(template_row);\n  var user_type = permissions_get_row_type(template_row);\n  var max_key = -1;\n  var exists = false;\n  var cluster_name = permissions_get_clustername(\n    $(template_row).parents(\"form\").first()\n  );\n\n  if(\"\" == user_name) {\n    alert(\"Please enter the name\");\n    return;\n  }\n  if(\"\" == user_type) {\n    alert(\"Please enter the type\");\n    return;\n  }\n\n  $(template_row).siblings().each(function(index, row) {\n    if(\n      (permissions_get_row_name(row) == user_name)\n      &&\n      (permissions_get_row_type(row) == user_type)\n    ) {\n      exists = true;\n    }\n    $(row).find(\"input\").each(function(index, input) {\n      var match = input.name.match(/^[^[]*\\[(\\d+)\\].*$/);\n      if (match) {\n        var key = parseInt(match[1]);\n        if(key > max_key) {\n          max_key = key;\n        }\n      }\n    });\n  });\n  if(exists) {\n    alert(\"Permissions already set for the user\");\n    return;\n  }\n\n  max_key = max_key + 1;\n  var new_row = $(template_row).clone();\n  new_row.find(\"[name*='_new']\").each(function(index, element) {\n    element.name = element.name.replace(\"_new\", \"[\" + max_key + \"]\");\n  });\n  new_row.find(\"td\").last().html(\n    '<a class=\"remove\" href=\"#\" onclick=\"permission_remove_row(this);\">X</a>'\n  );\n  new_row.find(\"[name$='[name]']\").each(function(index, element) {\n    $(element).after(user_name);\n    $(element).attr(\"type\", \"hidden\");\n  });\n  new_row.find(\"[name$='[type]']\").each(function(index, element) {\n    $(element).after(user_type);\n    $(element).after(\n      '<input type=\"hidden\" name=\"' + element.name  + '\" value=\"' + user_type + '\">'\n    );\n    $(element).remove();\n  });\n\n  $(template_row).before(new_row);\n  var template_inputs = $(template_row).find(\":input\");\n  template_inputs.removeAttr(\"checked\").removeAttr(\"selected\");\n  template_inputs.removeAttr(\"disabled\").removeAttr(\"readonly\");\n  $(template_row).find(\":input[type=text]\").val(\"\");\n\n  permissions_cluster_dirty_flag(cluster_name, true);\n}\n\nfunction permissions_get_dependent_checkboxes(checkbox) {\n  var cluster_name = permissions_get_clustername(\n    $(checkbox).parents(\"form\").first()\n  );\n  var checkbox_permission = permissions_get_checkbox_permission(checkbox);\n  var deps = {};\n  var dependent_permissions = [];\n  var dependent_checkboxes = [];\n\n  if (permissions_dependencies[cluster_name]) {\n    deps = permissions_dependencies[cluster_name];\n    if (deps[\"also_allows\"] && deps[\"also_allows\"][checkbox_permission]) {\n      dependent_permissions = deps[\"also_allows\"][checkbox_permission];\n      $(checkbox).parents(\"tr\").first().find(\":checkbox\").not(checkbox).each(\n        function(key, check) {\n          var perm = permissions_get_checkbox_permission(check);\n          if (dependent_permissions.indexOf(perm) != -1) {\n            dependent_checkboxes.push(check);\n          }\n        }\n      );\n    }\n  }\n  return dependent_checkboxes;\n}\n\nfunction permissions_fix_dependent_checkboxes(checkbox) {\n  var dep_checks = $(permissions_get_dependent_checkboxes(checkbox));\n  if ($(checkbox).prop(\"checked\")) {\n    /* the checkbox is now checked */\n    dep_checks.each(function(key, check) {\n      var jq_check = $(check);\n      jq_check.prop(\"checked\", true);\n      jq_check.prop(\"readonly\", true);\n      // readonly on checkbox makes it look like readonly but doesn't prevent\n      // changing its state (checked - not checked), setting disabled works\n      jq_check.prop(\"disabled\", true);\n      permissions_fix_dependent_checkboxes(check);\n    });\n  }\n  else {\n    /* the checkbox is now empty */\n    dep_checks.each(function(key, check) {\n      var jq_check = $(check);\n      jq_check.prop(\"checked\", jq_check.prop(\"defaultChecked\"));\n      jq_check.prop(\"readonly\", false);\n      jq_check.prop(\"disabled\", false);\n      permissions_fix_dependent_checkboxes(check);\n    });\n  }\n}\n\nfunction permissions_get_row_name(row) {\n  return $.trim($(row).find(\"[name$='[name]']\").val());\n}\n\nfunction permissions_get_row_type(row) {\n  return $.trim($(row).find(\"[name$='[type]']\").val());\n}\n\nfunction permissions_get_clustername(form) {\n  return $.trim($(form).find(\"[name=cluster_name]\").val());\n}\n\nfunction permissions_get_checkbox_permission(checkbox) {\n  var match = checkbox.name.match(/^.*\\[([^[]+)\\]$/);\n  if (match) {\n    return match[1];\n  }\n  return \"\";\n}\n\nfunction permissions_get_cluster_row(cluster_name) {\n  var cluster_row = null;\n  $('#cluster_list td[class=node_name]').each(function(index, elem) {\n    var jq_elem = $(elem);\n    if (jq_elem.text().trim() == cluster_name.trim()) {\n      cluster_row = jq_elem.parents(\"tr\").first();\n    }\n  });\n  return cluster_row;\n}\n\nfunction is_cib_true(value) {\n  if (value) {\n    return (['true', 'on', 'yes', 'y', '1'].indexOf(value.toString().toLowerCase()) != -1);\n  }\n  return false;\n}\n\nfunction set_utilization(type, entity_id, name, value) {\n  var data = {\n    name: name,\n    value: value\n  };\n  if (type == \"node\") {\n    data[\"node\"] = entity_id;\n  } else if (type == \"resource\") {\n    data[\"resource_id\"] = entity_id;\n  } else return false;\n  var url = get_cluster_remote_url() + \"set_\" + type + \"_utilization\";\n\n  ajax_wrapper({\n    type: 'POST',\n    url: url,\n    data: data,\n    timeout: pcs_timeout,\n    error: function (xhr, status, error) {\n      alert(\n        \"Unable to set utilization: \"\n        + ajax_simple_error(xhr, status, error)\n      );\n    },\n    complete: function() {\n      Pcs.update();\n    }\n  });\n}\n\nfunction is_integer(str) {\n  if (Number(str) === str && str % 1 === 0) // if argument isn't string but number\n    return true;\n  var n = ~~Number(str);\n  return String(n) === str;\n}\n\nEmber.Handlebars.helper('selector-helper', function (content, value, place_holder, options) {\n  var out = \"\";\n  var line;\n  if (place_holder) {\n    out += '<option value=\"\">' + place_holder + '</option>';\n  }\n  $.each(content, function(_, opt){\n    line = '<option value=\"' + opt[\"value\"] + '\"';\n    if (value == opt[\"value\"]) {\n      line += ' selected=\"selected\"'\n    }\n    line += \">\" + Handlebars.Utils.escapeExpression(opt[\"name\"]) + \"</option>\";\n    out += line + \"\\n\";\n  });\n  return new Handlebars.SafeString(out);\n});\n\nEmber.Handlebars.helper('bool-to-icon', function(value, options) {\n  var out = '<span class=\"sprites inverted ';\n  if (typeof(value) == 'undefined' || value == null) {\n    out += \"questionmarkdark\";\n  } else if (value) {\n    out += \"checkdark\"\n  } else {\n    out += \"Xdark\"\n  }\n  return new Handlebars.SafeString(out + '\">&nbsp;</span>');\n});\n\nfunction nl2br(text) {\n  return text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n}\n\nfunction enable_sbd(dialog) {\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"remote_enable_sbd\",\n    data: dialog.find(\"#enable_sbd_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function() {\n      dialog.parent().find(\"#enable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      dialog.dialog(\"close\");\n      alert(\n        'SBD enabled! You have to restart cluster in order to apply changes.'\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      dialog.parent().find(\"#enable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      xhr.responseText = xhr.responseText.replace(\n        \"--skip-offline\", \"option 'ignore offline nodes'\"\n      );\n      alert(\n        ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction enable_sbd_dialog(node_list) {\n  var buttonsOpts = [\n    {\n      text: \"Enable SBD\",\n      id: \"enable_sbd_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#enable_sbd_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        enable_sbd(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  var dialog_obj = $(\"#enable_sbd_dialog\").dialog({title: 'Enable SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n\n  dialog_obj.keypress(function(e) {\n    if (\n      e.keyCode == $.ui.keyCode.ENTER &&\n      !dialog_obj.parent().find(\"#enable_sbd_btn\").button(\"option\", \"disabled\")\n    ) {\n      dialog_obj.parent().find(\"#enable_sbd_btn\").trigger(\"click\");\n      return false;\n    }\n  });\n  dialog_obj.find('#watchdog_table').empty();\n  $.each(node_list, function(_, node) {\n    dialog_obj.find(\"#watchdog_table\").append(\n      '<tr>' +\n        '<td>' +\n          node + ':' +\n        '</td>' +\n        '<td>' +\n          '<input ' +\n            'type=\"text\" ' +\n            'placeholder=\"/dev/watchdog\" ' +\n            'name=\"watchdog[' + node + ']\" ' +\n          '/>' +\n        '</td>' +\n      '</tr>'\n    )\n  });\n}\n\nfunction disable_sbd(dialog) {\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"remote_disable_sbd\",\n    data: dialog.find(\"#disable_sbd_form\").serialize(),\n    timeout: pcs_timeout,\n    success: function() {\n      dialog.parent().find(\"#disable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      dialog.dialog(\"close\");\n      alert(\n        'SBD disabled! You have to restart cluster in order to apply changes.'\n      );\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      dialog.parent().find(\"#disable_sbd_btn\").button(\n        \"option\", \"disabled\", false\n      );\n      xhr.responseText = xhr.responseText.replace(\n        \"--skip-offline\", \"option 'ignore offline nodes'\"\n      );\n      alert(ajax_simple_error(xhr, status, error));\n    }\n  });\n}\n\nfunction disable_sbd_dialog() {\n  var buttonsOpts = [\n    {\n      text: \"Disable SBD\",\n      id: \"disable_sbd_btn\",\n      click: function() {\n        var dialog = $(this);\n        dialog.parent().find(\"#disable_sbd_btn\").button(\n          \"option\", \"disabled\", true\n        );\n        disable_sbd(dialog);\n      }\n    },\n    {\n      text:\"Cancel\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  $(\"#disable_sbd_dialog\").dialog({\n    title: 'Disable SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n}\n\nfunction sbd_status_dialog() {\n  var buttonsOpts = [\n    {\n      text: \"Enable SBD\",\n      click: function() {\n        enable_sbd_dialog(Pcs.nodesController.get_node_name_list());\n      }\n    },\n    {\n      text: \"Disable SBD\",\n      click: disable_sbd_dialog\n    },\n    {\n      text:\"Close\",\n      click: function () {\n        $(this).dialog(\"close\");\n      }\n    }\n  ];\n\n  $(\"#sbd_status_dialog\").dialog({\n    title: 'SBD',\n    modal: true, resizable: false,\n    width: 'auto',\n    buttons: buttonsOpts\n  });\n}\n\nfunction unmanage_resource(resource_id) {\n  if (!resource_id) {\n    return;\n  }\n  fade_in_out(\"#resource_unmanage_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"unmanage_resource\",\n    data: {\n      resource_list_json: JSON.stringify([resource_id]),\n    },\n    timeout: pcs_timeout,\n    complete: function() {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        `Unable to unmanage '${resource_id}': ` +\n        ajax_simple_error(xhr, status, error)\n      );\n    },\n  });\n}\n\nfunction manage_resource(resource_id) {\n  if (!resource_id) {\n    return;\n  }\n  fade_in_out(\"#resource_manage_link\");\n  ajax_wrapper({\n    type: 'POST',\n    url: get_cluster_remote_url() + \"manage_resource\",\n    data: {\n      resource_list_json: JSON.stringify([resource_id]),\n    },\n    timeout: pcs_timeout,\n    complete: function() {\n      Pcs.update();\n    },\n    error: function (xhr, status, error) {\n      alert(\n        `Unable to manage '${resource_id}': ` +\n        ajax_simple_error(xhr, status, error)\n      );\n    }\n  });\n}\n\nfunction show_add_resource_dialog() {\n  var new_resource_group_selector_id = $(\n    \"#new_resource_agent .group-selector\"\n  ).attr(\"id\");\n  Ember.View.views[new_resource_group_selector_id].set(\n    \"group_select_value\", null\n  );\n  $('#new_resource_agent').dialog({\n    title: 'Add Resource',\n    modal:true, width: 'auto'\n  });\n}\n"], "filenames": ["CHANGELOG.md", "pcsd/public/js/nodes-ember.js", "pcsd/public/js/pcsd.js"], "buggy_code_start_loc": [27, 78, 824], "buggy_code_end_loc": [35, 883, 825], "fixing_code_start_loc": [28, 78, 824], "fixing_code_end_loc": [40, 883, 825], "type": "CWE-79", "message": "ClusterLabs pcs before version 0.9.157 is vulnerable to a cross-site scripting vulnerability due to improper validation of Node name field when creating new cluster or adding existing cluster.", "other": {"cve": {"id": "CVE-2017-2661", "sourceIdentifier": "secalert@redhat.com", "published": "2018-03-12T15:29:00.553", "lastModified": "2019-10-09T23:27:02.523", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ClusterLabs pcs before version 0.9.157 is vulnerable to a cross-site scripting vulnerability due to improper validation of Node name field when creating new cluster or adding existing cluster."}, {"lang": "es", "value": "ClusterLabs pcs, en versiones anteriores a la 0.9.157, es vulnerable a Cross-Site Scripting (XSS) debido a la validaci\u00f3n incorrecta del campo Node name al crear un nuevo cl\u00faster o al a\u00f1adir uno ya existente."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:clusterlabs:pcs:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.157", "matchCriteriaId": "31F44CBF-B8CB-4CB8-B88C-F6C357759763"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1428948", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ClusterLabs/pcs/commit/1874a769b5720ae5430f10c6cedd234430bc703f", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/ClusterLabs/pcs/commit/1874a769b5720ae5430f10c6cedd234430bc703f"}}