{"buggy_code": ["package api\n\nimport (\n\tlog \"github.com/Sirupsen/logrus\"\n\t\"github.com/ansible-semaphore/semaphore/api/helpers\"\n\t\"github.com/ansible-semaphore/semaphore/db\"\n\t\"github.com/ansible-semaphore/semaphore/util\"\n\t\"github.com/gorilla/context\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc authenticationHandler(w http.ResponseWriter, r *http.Request) {\n\tvar userID int\n\n\tauthHeader := strings.ToLower(r.Header.Get(\"authorization\"))\n\n\tif len(authHeader) > 0 && strings.Contains(authHeader, \"bearer\") {\n\t\ttoken, err := helpers.Store(r).GetAPIToken(strings.Replace(authHeader, \"bearer \", \"\", 1))\n\n\t\tif err != nil {\n\t\t\tif err != db.ErrNotFound {\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tuserID = token.UserID\n\t} else {\n\t\t// fetch session from cookie\n\t\tcookie, err := r.Cookie(\"semaphore\")\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tvalue := make(map[string]interface{})\n\t\tif err = util.Cookie.Decode(\"semaphore\", cookie.Value, &value); err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tuser, ok := value[\"user\"]\n\t\tsessionVal, okSession := value[\"session\"]\n\t\tif !ok || !okSession {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tuserID = user.(int)\n\t\tsessionID := sessionVal.(int)\n\n\t\t// fetch session\n\t\tsession, err := helpers.Store(r).GetSession(userID, sessionID)\n\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tif time.Since(session.LastActive).Hours() > 7*24 {\n\t\t\t// more than week old unused session\n\t\t\t// destroy.\n\t\t\tif err := helpers.Store(r).ExpireSession(userID, sessionID); err != nil {\n\t\t\t\t// it is internal error, it doesn't concern the user\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tif err := helpers.Store(r).TouchSession(userID, sessionID); err != nil {\n\t\t\tlog.Error(err)\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\t}\n\n\tuser, err := helpers.Store(r).GetUser(userID)\n\tif err != nil {\n\t\tif err != db.ErrNotFound {\n\t\t\t// internal error\n\t\t\tlog.Error(err)\n\t\t}\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\tif util.Config.DemoMode {\n\t\tif !user.Admin && r.Method != \"GET\" &&\n\t\t\t!strings.HasSuffix(r.URL.Path, \"/tasks\") &&\n\t\t\t!strings.HasSuffix(r.URL.Path, \"/stop\") {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\t}\n\n\tcontext.Set(r, \"user\", &user)\n}\n\n// nolint: gocyclo\nfunc authentication(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tauthenticationHandler(w, r)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\n// nolint: gocyclo\nfunc authenticationWithStore(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstore := helpers.Store(r)\n\n\t\tdb.StoreSession(store, r.URL.String(), func() {\n\t\t\tauthenticationHandler(w, r)\n\t\t})\n\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n", "package api\n\nimport (\n\t\"fmt\"\n\t\"github.com/ansible-semaphore/semaphore/api/helpers\"\n\t\"github.com/ansible-semaphore/semaphore/db\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/ansible-semaphore/semaphore/api/projects\"\n\t\"github.com/ansible-semaphore/semaphore/api/sockets\"\n\t\"github.com/ansible-semaphore/semaphore/util\"\n\t\"github.com/gobuffalo/packr\"\n\t\"github.com/gorilla/mux\"\n)\n\nvar publicAssets2 = packr.NewBox(\"../web/dist\")\n\nfunc StoreMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstore := helpers.Store(r)\n\t\tvar url = r.URL.String()\n\n\t\tdb.StoreSession(store, url, func() {\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t})\n}\n\n// JSONMiddleware ensures that all the routes respond with Json, this is added by default to all routes\nfunc JSONMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"content-type\", \"application/json\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\n// plainTextMiddleware resets headers to Plain Text if needed\nfunc plainTextMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"content-type\", \"text/plain; charset=utf-8\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nfunc pongHandler(w http.ResponseWriter, r *http.Request) {\n\t//nolint: errcheck\n\tw.Write([]byte(\"pong\"))\n}\n\nfunc notFoundHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Access-Control-Allow-Origin\", r.Header.Get(\"Origin\"))\n\tw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\tw.WriteHeader(http.StatusNotFound)\n\t//nolint: errcheck\n\tw.Write([]byte(\"404 not found\"))\n\tfmt.Println(r.Method, \":\", r.URL.String(), \"--> 404 Not Found\")\n}\n\n// Route declares all routes\nfunc Route() *mux.Router {\n\tr := mux.NewRouter()\n\tr.NotFoundHandler = http.HandlerFunc(servePublic)\n\n\twebPath := \"/\"\n\tif util.WebHostURL != nil {\n\t\twebPath = util.WebHostURL.Path\n\t\tif !strings.HasSuffix(webPath, \"/\") {\n\t\t\twebPath += \"/\"\n\t\t}\n\t}\n\n\tr.Use(mux.CORSMethodMiddleware(r))\n\n\tpingRouter := r.Path(webPath + \"api/ping\").Subrouter()\n\tpingRouter.Use(plainTextMiddleware)\n\tpingRouter.Methods(\"GET\", \"HEAD\").HandlerFunc(pongHandler)\n\n\tpublicAPIRouter := r.PathPrefix(webPath + \"api\").Subrouter()\n\n\tpublicAPIRouter.Use(StoreMiddleware, JSONMiddleware)\n\n\tpublicAPIRouter.HandleFunc(\"/auth/login\", login).Methods(\"POST\")\n\tpublicAPIRouter.HandleFunc(\"/auth/logout\", logout).Methods(\"POST\")\n\n\tauthenticatedWS := r.PathPrefix(webPath + \"api\").Subrouter()\n\tauthenticatedWS.Use(JSONMiddleware, authenticationWithStore)\n\tauthenticatedWS.Path(\"/ws\").HandlerFunc(sockets.Handler).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI := r.PathPrefix(webPath + \"api\").Subrouter()\n\n\tauthenticatedAPI.Use(StoreMiddleware, JSONMiddleware, authentication)\n\n\tauthenticatedAPI.Path(\"/info\").HandlerFunc(getSystemInfo).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI.Path(\"/projects\").HandlerFunc(projects.GetProjects).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.Path(\"/projects\").HandlerFunc(projects.AddProject).Methods(\"POST\")\n\tauthenticatedAPI.Path(\"/events\").HandlerFunc(getAllEvents).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.HandleFunc(\"/events/last\", getLastEvents).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI.Path(\"/users\").HandlerFunc(getUsers).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.Path(\"/users\").HandlerFunc(addUser).Methods(\"POST\")\n\tauthenticatedAPI.Path(\"/user\").HandlerFunc(getUser).Methods(\"GET\", \"HEAD\")\n\n\ttokenAPI := authenticatedAPI.PathPrefix(\"/user\").Subrouter()\n\ttokenAPI.Path(\"/tokens\").HandlerFunc(getAPITokens).Methods(\"GET\", \"HEAD\")\n\ttokenAPI.Path(\"/tokens\").HandlerFunc(createAPIToken).Methods(\"POST\")\n\ttokenAPI.HandleFunc(\"/tokens/{token_id}\", expireAPIToken).Methods(\"DELETE\")\n\n\tuserAPI := authenticatedAPI.Path(\"/users/{user_id}\").Subrouter()\n\tuserAPI.Use(getUserMiddleware)\n\n\tuserAPI.Methods(\"GET\", \"HEAD\").HandlerFunc(getUser)\n\tuserAPI.Methods(\"PUT\").HandlerFunc(updateUser)\n\tuserAPI.Methods(\"DELETE\").HandlerFunc(deleteUser)\n\n\tuserPasswordAPI := authenticatedAPI.PathPrefix(\"/users/{user_id}\").Subrouter()\n\tuserPasswordAPI.Use(getUserMiddleware)\n\tuserPasswordAPI.Path(\"/password\").HandlerFunc(updateUserPassword).Methods(\"POST\")\n\n\tprojectGet := authenticatedAPI.Path(\"/project/{project_id}\").Subrouter()\n\tprojectGet.Use(projects.ProjectMiddleware)\n\tprojectGet.Methods(\"GET\", \"HEAD\").HandlerFunc(projects.GetProject)\n\n\tprojectUserAPI := authenticatedAPI.PathPrefix(\"/project/{project_id}\").Subrouter()\n\tprojectUserAPI.Use(projects.ProjectMiddleware)\n\n\tprojectUserAPI.Path(\"/events\").HandlerFunc(getAllEvents).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.HandleFunc(\"/events/last\", getLastEvents).Methods(\"GET\", \"HEAD\")\n\n\tprojectUserAPI.Path(\"/users\").HandlerFunc(projects.GetUsers).Methods(\"GET\", \"HEAD\")\n\n\tprojectUserAPI.Path(\"/keys\").HandlerFunc(projects.GetKeys).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/keys\").HandlerFunc(projects.AddKey).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/repositories\").HandlerFunc(projects.GetRepositories).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/repositories\").HandlerFunc(projects.AddRepository).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/inventory\").HandlerFunc(projects.GetInventory).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/inventory\").HandlerFunc(projects.AddInventory).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/environment\").HandlerFunc(projects.GetEnvironment).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/environment\").HandlerFunc(projects.AddEnvironment).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/tasks\").HandlerFunc(projects.GetAllTasks).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.HandleFunc(\"/tasks/last\", projects.GetLastTasks).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/tasks\").HandlerFunc(projects.AddTask).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/templates\").HandlerFunc(projects.GetTemplates).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/templates\").HandlerFunc(projects.AddTemplate).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/schedules\").HandlerFunc(projects.AddSchedule).Methods(\"POST\")\n\tprojectUserAPI.Path(\"/schedules/validate\").HandlerFunc(projects.ValidateScheduleCronFormat).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/views\").HandlerFunc(projects.GetViews).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/views\").HandlerFunc(projects.AddView).Methods(\"POST\")\n\tprojectUserAPI.Path(\"/views/positions\").HandlerFunc(projects.SetViewPositions).Methods(\"POST\")\n\n\tprojectAdminAPI := authenticatedAPI.Path(\"/project/{project_id}\").Subrouter()\n\tprojectAdminAPI.Use(projects.ProjectMiddleware, projects.MustBeAdmin)\n\tprojectAdminAPI.Methods(\"PUT\").HandlerFunc(projects.UpdateProject)\n\tprojectAdminAPI.Methods(\"DELETE\").HandlerFunc(projects.DeleteProject)\n\n\tprojectAdminUsersAPI := authenticatedAPI.PathPrefix(\"/project/{project_id}\").Subrouter()\n\tprojectAdminUsersAPI.Use(projects.ProjectMiddleware, projects.MustBeAdmin)\n\tprojectAdminUsersAPI.Path(\"/users\").HandlerFunc(projects.AddUser).Methods(\"POST\")\n\n\tprojectUserManagement := projectAdminUsersAPI.PathPrefix(\"/users\").Subrouter()\n\tprojectUserManagement.Use(projects.UserMiddleware)\n\n\tprojectUserManagement.HandleFunc(\"/{user_id}\", projects.GetUsers).Methods(\"GET\", \"HEAD\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}/admin\", projects.MakeUserAdmin).Methods(\"POST\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}/admin\", projects.MakeUserAdmin).Methods(\"DELETE\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}\", projects.RemoveUser).Methods(\"DELETE\")\n\n\tprojectKeyManagement := projectUserAPI.PathPrefix(\"/keys\").Subrouter()\n\tprojectKeyManagement.Use(projects.KeyMiddleware)\n\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.GetKeys).Methods(\"GET\", \"HEAD\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}/refs\", projects.GetKeyRefs).Methods(\"GET\", \"HEAD\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.UpdateKey).Methods(\"PUT\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.RemoveKey).Methods(\"DELETE\")\n\n\tprojectRepoManagement := projectUserAPI.PathPrefix(\"/repositories\").Subrouter()\n\tprojectRepoManagement.Use(projects.RepositoryMiddleware)\n\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.GetRepositories).Methods(\"GET\", \"HEAD\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}/refs\", projects.GetRepositoryRefs).Methods(\"GET\", \"HEAD\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.UpdateRepository).Methods(\"PUT\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.RemoveRepository).Methods(\"DELETE\")\n\n\tprojectInventoryManagement := projectUserAPI.PathPrefix(\"/inventory\").Subrouter()\n\tprojectInventoryManagement.Use(projects.InventoryMiddleware)\n\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.GetInventory).Methods(\"GET\", \"HEAD\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}/refs\", projects.GetInventoryRefs).Methods(\"GET\", \"HEAD\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.UpdateInventory).Methods(\"PUT\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.RemoveInventory).Methods(\"DELETE\")\n\n\tprojectEnvManagement := projectUserAPI.PathPrefix(\"/environment\").Subrouter()\n\tprojectEnvManagement.Use(projects.EnvironmentMiddleware)\n\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.GetEnvironment).Methods(\"GET\", \"HEAD\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}/refs\", projects.GetEnvironmentRefs).Methods(\"GET\", \"HEAD\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.UpdateEnvironment).Methods(\"PUT\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.RemoveEnvironment).Methods(\"DELETE\")\n\n\tprojectTmplManagement := projectUserAPI.PathPrefix(\"/templates\").Subrouter()\n\tprojectTmplManagement.Use(projects.TemplatesMiddleware)\n\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.UpdateTemplate).Methods(\"PUT\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.RemoveTemplate).Methods(\"DELETE\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.GetTemplate).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/refs\", projects.GetTemplateRefs).Methods(\"GET\", \"HEAD\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/tasks\", projects.GetAllTasks).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/tasks/last\", projects.GetLastTasks).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/schedules\", projects.GetTemplateSchedules).Methods(\"GET\")\n\n\tprojectTaskManagement := projectUserAPI.PathPrefix(\"/tasks\").Subrouter()\n\tprojectTaskManagement.Use(projects.GetTaskMiddleware)\n\n\tprojectTaskManagement.HandleFunc(\"/{task_id}/output\", projects.GetTaskOutput).Methods(\"GET\", \"HEAD\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}\", projects.GetTask).Methods(\"GET\", \"HEAD\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}\", projects.RemoveTask).Methods(\"DELETE\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}/stop\", projects.StopTask).Methods(\"POST\")\n\n\tprojectScheduleManagement := projectUserAPI.PathPrefix(\"/schedules\").Subrouter()\n\tprojectScheduleManagement.Use(projects.SchedulesMiddleware)\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.GetSchedule).Methods(\"GET\", \"HEAD\")\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.UpdateSchedule).Methods(\"PUT\")\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.RemoveSchedule).Methods(\"DELETE\")\n\n\tprojectViewManagement := projectUserAPI.PathPrefix(\"/views\").Subrouter()\n\tprojectViewManagement.Use(projects.ViewMiddleware)\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.GetViews).Methods(\"GET\", \"HEAD\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.UpdateView).Methods(\"PUT\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.RemoveView).Methods(\"DELETE\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}/templates\", projects.GetViewTemplates).Methods(\"GET\", \"HEAD\")\n\n\tif os.Getenv(\"DEBUG\") == \"1\" {\n\t\tdefer debugPrintRoutes(r)\n\t}\n\n\treturn r\n}\n\nfunc debugPrintRoutes(r *mux.Router) {\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\n// nolint: gocyclo\nfunc servePublic(w http.ResponseWriter, r *http.Request) {\n\twebPath := \"/\"\n\tif util.WebHostURL != nil {\n\t\twebPath = util.WebHostURL.RequestURI()\n\t}\n\n\tpath := r.URL.Path\n\n\tif path == webPath+\"api\" || strings.HasPrefix(path, webPath+\"api/\") {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tif !strings.Contains(path, \".\") {\n\t\tpath = \"/index.html\"\n\t}\n\n\tpath = strings.Replace(path, webPath+\"/\", \"\", 1)\n\tsplit := strings.Split(path, \".\")\n\tsuffix := split[len(split)-1]\n\n\tvar res []byte\n\tvar err error\n\n\tres, err = publicAssets2.MustBytes(path)\n\n\tif err != nil {\n\t\tnotFoundHandler(w, r)\n\t\treturn\n\t}\n\n\t// replace base path\n\tif util.WebHostURL != nil && path == \"/index.html\" {\n\t\tbaseURL := util.WebHostURL.String()\n\t\tif !strings.HasSuffix(baseURL, \"/\") {\n\t\t\tbaseURL += \"/\"\n\t\t}\n\t\tres = []byte(strings.Replace(string(res),\n\t\t\t\"<base href=\\\"/\\\">\",\n\t\t\t\"<base href=\\\"\"+baseURL+\"\\\">\",\n\t\t\t1))\n\t}\n\n\tcontentType := \"text/plain\"\n\tswitch suffix {\n\tcase \"png\":\n\t\tcontentType = \"image/png\"\n\tcase \"jpg\", \"jpeg\":\n\t\tcontentType = \"image/jpeg\"\n\tcase \"gif\":\n\t\tcontentType = \"image/gif\"\n\tcase \"js\":\n\t\tcontentType = \"application/javascript\"\n\tcase \"css\":\n\t\tcontentType = \"text/css\"\n\tcase \"woff\":\n\t\tcontentType = \"application/x-font-woff\"\n\tcase \"ttf\":\n\t\tcontentType = \"application/x-font-ttf\"\n\tcase \"otf\":\n\t\tcontentType = \"application/x-font-otf\"\n\tcase \"html\":\n\t\tcontentType = \"text/html\"\n\t}\n\n\tw.Header().Set(\"content-type\", contentType)\n\t_, err = w.Write(res)\n\tutil.LogWarning(err)\n}\n\nfunc getSystemInfo(w http.ResponseWriter, r *http.Request) {\n\t//updateAvailable, err := util.CheckUpdate()\n\n\t//if err != nil {\n\t//\thelpers.WriteError(w, err)\n\t//\treturn\n\t//}\n\n\tbody := map[string]interface{}{\n\t\t\"version\": util.Version,\n\t\t//\"update\":  updateAvailable,\n\t\t\"ansible\": util.AnsibleVersion(),\n\t\t\"demo\":    util.Config.DemoMode,\n\t}\n\n\thelpers.WriteJSON(w, http.StatusOK, body)\n}\n"], "fixing_code": ["package api\n\nimport (\n\tlog \"github.com/Sirupsen/logrus\"\n\t\"github.com/ansible-semaphore/semaphore/api/helpers\"\n\t\"github.com/ansible-semaphore/semaphore/db\"\n\t\"github.com/ansible-semaphore/semaphore/util\"\n\t\"github.com/gorilla/context\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc authenticationHandler(w http.ResponseWriter, r *http.Request) bool {\n\tvar userID int\n\n\tauthHeader := strings.ToLower(r.Header.Get(\"authorization\"))\n\n\tif len(authHeader) > 0 && strings.Contains(authHeader, \"bearer\") {\n\t\ttoken, err := helpers.Store(r).GetAPIToken(strings.Replace(authHeader, \"bearer \", \"\", 1))\n\n\t\tif err != nil {\n\t\t\tif err != db.ErrNotFound {\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tuserID = token.UserID\n\t} else {\n\t\t// fetch session from cookie\n\t\tcookie, err := r.Cookie(\"semaphore\")\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tvalue := make(map[string]interface{})\n\t\tif err = util.Cookie.Decode(\"semaphore\", cookie.Value, &value); err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tuser, ok := value[\"user\"]\n\t\tsessionVal, okSession := value[\"session\"]\n\t\tif !ok || !okSession {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tuserID = user.(int)\n\t\tsessionID := sessionVal.(int)\n\n\t\t// fetch session\n\t\tsession, err := helpers.Store(r).GetSession(userID, sessionID)\n\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tif time.Since(session.LastActive).Hours() > 7*24 {\n\t\t\t// more than week old unused session\n\t\t\t// destroy.\n\t\t\tif err := helpers.Store(r).ExpireSession(userID, sessionID); err != nil {\n\t\t\t\t// it is internal error, it doesn't concern the user\n\t\t\t\tlog.Error(err)\n\t\t\t}\n\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\n\t\tif err := helpers.Store(r).TouchSession(userID, sessionID); err != nil {\n\t\t\tlog.Error(err)\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\t}\n\n\tuser, err := helpers.Store(r).GetUser(userID)\n\tif err != nil {\n\t\tif err != db.ErrNotFound {\n\t\t\t// internal error\n\t\t\tlog.Error(err)\n\t\t}\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn false\n\t}\n\n\tif util.Config.DemoMode {\n\t\tif !user.Admin && r.Method != \"GET\" &&\n\t\t\t!strings.HasSuffix(r.URL.Path, \"/tasks\") &&\n\t\t\t!strings.HasSuffix(r.URL.Path, \"/stop\") {\n\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\treturn false\n\t\t}\n\t}\n\n\tcontext.Set(r, \"user\", &user)\n\treturn true\n}\n\n// nolint: gocyclo\nfunc authentication(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tok := authenticationHandler(w, r)\n\t\tif ok {\n\t\t\tnext.ServeHTTP(w, r)\n\t\t}\n\t})\n}\n\n// nolint: gocyclo\nfunc authenticationWithStore(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstore := helpers.Store(r)\n\n\t\tvar ok bool\n\t\t\n\t\tdb.StoreSession(store, r.URL.String(), func() {\n\t\t\tok = authenticationHandler(w, r)\n\t\t})\n\n\t\tif ok {\n\t\t\tnext.ServeHTTP(w, r)\n\t\t}\n\t})\n}\n", "package api\n\nimport (\n\t\"fmt\"\n\t\"github.com/ansible-semaphore/semaphore/api/helpers\"\n\t\"github.com/ansible-semaphore/semaphore/db\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/ansible-semaphore/semaphore/api/projects\"\n\t\"github.com/ansible-semaphore/semaphore/api/sockets\"\n\t\"github.com/ansible-semaphore/semaphore/util\"\n\t\"github.com/gobuffalo/packr\"\n\t\"github.com/gorilla/mux\"\n)\n\nvar publicAssets2 = packr.NewBox(\"../web/dist\")\n\nfunc StoreMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstore := helpers.Store(r)\n\t\tvar url = r.URL.String()\n\n\t\tdb.StoreSession(store, url, func() {\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t})\n}\n\n// JSONMiddleware ensures that all the routes respond with Json, this is added by default to all routes\nfunc JSONMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"content-type\", \"application/json\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\n// plainTextMiddleware resets headers to Plain Text if needed\nfunc plainTextMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"content-type\", \"text/plain; charset=utf-8\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nfunc pongHandler(w http.ResponseWriter, r *http.Request) {\n\t//nolint: errcheck\n\tw.Write([]byte(\"pong\"))\n}\n\nfunc notFoundHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Access-Control-Allow-Origin\", r.Header.Get(\"Origin\"))\n\tw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\tw.WriteHeader(http.StatusNotFound)\n\t//nolint: errcheck\n\tw.Write([]byte(\"404 not found\"))\n\tfmt.Println(r.Method, \":\", r.URL.String(), \"--> 404 Not Found\")\n}\n\n// Route declares all routes\nfunc Route() *mux.Router {\n\tr := mux.NewRouter()\n\tr.NotFoundHandler = http.HandlerFunc(servePublic)\n\n\twebPath := \"/\"\n\tif util.WebHostURL != nil {\n\t\twebPath = util.WebHostURL.Path\n\t\tif !strings.HasSuffix(webPath, \"/\") {\n\t\t\twebPath += \"/\"\n\t\t}\n\t}\n\n\tr.Use(mux.CORSMethodMiddleware(r))\n\n\tpingRouter := r.Path(webPath + \"api/ping\").Subrouter()\n\tpingRouter.Use(plainTextMiddleware)\n\tpingRouter.Methods(\"GET\", \"HEAD\").HandlerFunc(pongHandler)\n\n\tpublicAPIRouter := r.PathPrefix(webPath + \"api\").Subrouter()\n\n\tpublicAPIRouter.Use(StoreMiddleware, JSONMiddleware)\n\n\tpublicAPIRouter.HandleFunc(\"/auth/login\", login).Methods(\"POST\")\n\tpublicAPIRouter.HandleFunc(\"/auth/logout\", logout).Methods(\"POST\")\n\n\tauthenticatedWS := r.PathPrefix(webPath + \"api\").Subrouter()\n\tauthenticatedWS.Use(JSONMiddleware, authenticationWithStore)\n\tauthenticatedWS.Path(\"/ws\").HandlerFunc(sockets.Handler).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI := r.PathPrefix(webPath + \"api\").Subrouter()\n\n\tauthenticatedAPI.Use(StoreMiddleware, JSONMiddleware, authentication)\n\n\tauthenticatedAPI.Path(\"/info\").HandlerFunc(getSystemInfo).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI.Path(\"/projects\").HandlerFunc(projects.GetProjects).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.Path(\"/projects\").HandlerFunc(projects.AddProject).Methods(\"POST\")\n\tauthenticatedAPI.Path(\"/events\").HandlerFunc(getAllEvents).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.HandleFunc(\"/events/last\", getLastEvents).Methods(\"GET\", \"HEAD\")\n\n\tauthenticatedAPI.Path(\"/users\").HandlerFunc(getUsers).Methods(\"GET\", \"HEAD\")\n\tauthenticatedAPI.Path(\"/users\").HandlerFunc(addUser).Methods(\"POST\")\n\tauthenticatedAPI.Path(\"/user\").HandlerFunc(getUser).Methods(\"GET\", \"HEAD\")\n\n\ttokenAPI := authenticatedAPI.PathPrefix(\"/user\").Subrouter()\n\ttokenAPI.Path(\"/tokens\").HandlerFunc(getAPITokens).Methods(\"GET\", \"HEAD\")\n\ttokenAPI.Path(\"/tokens\").HandlerFunc(createAPIToken).Methods(\"POST\")\n\ttokenAPI.HandleFunc(\"/tokens/{token_id}\", expireAPIToken).Methods(\"DELETE\")\n\n\tuserAPI := authenticatedAPI.Path(\"/users/{user_id}\").Subrouter()\n\tuserAPI.Use(getUserMiddleware)\n\n\tuserAPI.Methods(\"GET\", \"HEAD\").HandlerFunc(getUser)\n\tuserAPI.Methods(\"PUT\").HandlerFunc(updateUser)\n\tuserAPI.Methods(\"DELETE\").HandlerFunc(deleteUser)\n\n\tuserPasswordAPI := authenticatedAPI.PathPrefix(\"/users/{user_id}\").Subrouter()\n\tuserPasswordAPI.Use(getUserMiddleware)\n\tuserPasswordAPI.Path(\"/password\").HandlerFunc(updateUserPassword).Methods(\"POST\")\n\n\tprojectGet := authenticatedAPI.Path(\"/project/{project_id}\").Subrouter()\n\tprojectGet.Use(projects.ProjectMiddleware)\n\tprojectGet.Methods(\"GET\", \"HEAD\").HandlerFunc(projects.GetProject)\n\n\tprojectUserAPI := authenticatedAPI.PathPrefix(\"/project/{project_id}\").Subrouter()\n\tprojectUserAPI.Use(projects.ProjectMiddleware)\n\n\tprojectUserAPI.Path(\"/events\").HandlerFunc(getAllEvents).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.HandleFunc(\"/events/last\", getLastEvents).Methods(\"GET\", \"HEAD\")\n\n\tprojectUserAPI.Path(\"/users\").HandlerFunc(projects.GetUsers).Methods(\"GET\", \"HEAD\")\n\n\tprojectUserAPI.Path(\"/keys\").HandlerFunc(projects.GetKeys).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/keys\").HandlerFunc(projects.AddKey).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/repositories\").HandlerFunc(projects.GetRepositories).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/repositories\").HandlerFunc(projects.AddRepository).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/inventory\").HandlerFunc(projects.GetInventory).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/inventory\").HandlerFunc(projects.AddInventory).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/environment\").HandlerFunc(projects.GetEnvironment).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/environment\").HandlerFunc(projects.AddEnvironment).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/tasks\").HandlerFunc(projects.GetAllTasks).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.HandleFunc(\"/tasks/last\", projects.GetLastTasks).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/tasks\").HandlerFunc(projects.AddTask).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/templates\").HandlerFunc(projects.GetTemplates).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/templates\").HandlerFunc(projects.AddTemplate).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/schedules\").HandlerFunc(projects.AddSchedule).Methods(\"POST\")\n\tprojectUserAPI.Path(\"/schedules/validate\").HandlerFunc(projects.ValidateScheduleCronFormat).Methods(\"POST\")\n\n\tprojectUserAPI.Path(\"/views\").HandlerFunc(projects.GetViews).Methods(\"GET\", \"HEAD\")\n\tprojectUserAPI.Path(\"/views\").HandlerFunc(projects.AddView).Methods(\"POST\")\n\tprojectUserAPI.Path(\"/views/positions\").HandlerFunc(projects.SetViewPositions).Methods(\"POST\")\n\n\tprojectAdminAPI := authenticatedAPI.Path(\"/project/{project_id}\").Subrouter()\n\tprojectAdminAPI.Use(projects.ProjectMiddleware, projects.MustBeAdmin)\n\tprojectAdminAPI.Methods(\"PUT\").HandlerFunc(projects.UpdateProject)\n\tprojectAdminAPI.Methods(\"DELETE\").HandlerFunc(projects.DeleteProject)\n\n\tprojectAdminUsersAPI := authenticatedAPI.PathPrefix(\"/project/{project_id}\").Subrouter()\n\tprojectAdminUsersAPI.Use(projects.ProjectMiddleware, projects.MustBeAdmin)\n\tprojectAdminUsersAPI.Path(\"/users\").HandlerFunc(projects.AddUser).Methods(\"POST\")\n\n\tprojectUserManagement := projectAdminUsersAPI.PathPrefix(\"/users\").Subrouter()\n\tprojectUserManagement.Use(projects.UserMiddleware)\n\n\tprojectUserManagement.HandleFunc(\"/{user_id}\", projects.GetUsers).Methods(\"GET\", \"HEAD\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}/admin\", projects.MakeUserAdmin).Methods(\"POST\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}/admin\", projects.MakeUserAdmin).Methods(\"DELETE\")\n\tprojectUserManagement.HandleFunc(\"/{user_id}\", projects.RemoveUser).Methods(\"DELETE\")\n\n\tprojectKeyManagement := projectUserAPI.PathPrefix(\"/keys\").Subrouter()\n\tprojectKeyManagement.Use(projects.KeyMiddleware)\n\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.GetKeys).Methods(\"GET\", \"HEAD\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}/refs\", projects.GetKeyRefs).Methods(\"GET\", \"HEAD\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.UpdateKey).Methods(\"PUT\")\n\tprojectKeyManagement.HandleFunc(\"/{key_id}\", projects.RemoveKey).Methods(\"DELETE\")\n\n\tprojectRepoManagement := projectUserAPI.PathPrefix(\"/repositories\").Subrouter()\n\tprojectRepoManagement.Use(projects.RepositoryMiddleware)\n\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.GetRepositories).Methods(\"GET\", \"HEAD\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}/refs\", projects.GetRepositoryRefs).Methods(\"GET\", \"HEAD\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.UpdateRepository).Methods(\"PUT\")\n\tprojectRepoManagement.HandleFunc(\"/{repository_id}\", projects.RemoveRepository).Methods(\"DELETE\")\n\n\tprojectInventoryManagement := projectUserAPI.PathPrefix(\"/inventory\").Subrouter()\n\tprojectInventoryManagement.Use(projects.InventoryMiddleware)\n\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.GetInventory).Methods(\"GET\", \"HEAD\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}/refs\", projects.GetInventoryRefs).Methods(\"GET\", \"HEAD\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.UpdateInventory).Methods(\"PUT\")\n\tprojectInventoryManagement.HandleFunc(\"/{inventory_id}\", projects.RemoveInventory).Methods(\"DELETE\")\n\n\tprojectEnvManagement := projectUserAPI.PathPrefix(\"/environment\").Subrouter()\n\tprojectEnvManagement.Use(projects.EnvironmentMiddleware)\n\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.GetEnvironment).Methods(\"GET\", \"HEAD\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}/refs\", projects.GetEnvironmentRefs).Methods(\"GET\", \"HEAD\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.UpdateEnvironment).Methods(\"PUT\")\n\tprojectEnvManagement.HandleFunc(\"/{environment_id}\", projects.RemoveEnvironment).Methods(\"DELETE\")\n\n\tprojectTmplManagement := projectUserAPI.PathPrefix(\"/templates\").Subrouter()\n\tprojectTmplManagement.Use(projects.TemplatesMiddleware)\n\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.UpdateTemplate).Methods(\"PUT\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.RemoveTemplate).Methods(\"DELETE\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}\", projects.GetTemplate).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/refs\", projects.GetTemplateRefs).Methods(\"GET\", \"HEAD\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/tasks\", projects.GetAllTasks).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/tasks/last\", projects.GetLastTasks).Methods(\"GET\")\n\tprojectTmplManagement.HandleFunc(\"/{template_id}/schedules\", projects.GetTemplateSchedules).Methods(\"GET\")\n\n\tprojectTaskManagement := projectUserAPI.PathPrefix(\"/tasks\").Subrouter()\n\tprojectTaskManagement.Use(projects.GetTaskMiddleware)\n\n\tprojectTaskManagement.HandleFunc(\"/{task_id}/output\", projects.GetTaskOutput).Methods(\"GET\", \"HEAD\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}\", projects.GetTask).Methods(\"GET\", \"HEAD\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}\", projects.RemoveTask).Methods(\"DELETE\")\n\tprojectTaskManagement.HandleFunc(\"/{task_id}/stop\", projects.StopTask).Methods(\"POST\")\n\n\tprojectScheduleManagement := projectUserAPI.PathPrefix(\"/schedules\").Subrouter()\n\tprojectScheduleManagement.Use(projects.SchedulesMiddleware)\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.GetSchedule).Methods(\"GET\", \"HEAD\")\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.UpdateSchedule).Methods(\"PUT\")\n\tprojectScheduleManagement.HandleFunc(\"/{schedule_id}\", projects.RemoveSchedule).Methods(\"DELETE\")\n\n\tprojectViewManagement := projectUserAPI.PathPrefix(\"/views\").Subrouter()\n\tprojectViewManagement.Use(projects.ViewMiddleware)\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.GetViews).Methods(\"GET\", \"HEAD\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.UpdateView).Methods(\"PUT\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}\", projects.RemoveView).Methods(\"DELETE\")\n\tprojectViewManagement.HandleFunc(\"/{view_id}/templates\", projects.GetViewTemplates).Methods(\"GET\", \"HEAD\")\n\n\tif os.Getenv(\"DEBUG\") == \"1\" {\n\t\tdefer debugPrintRoutes(r)\n\t}\n\n\treturn r\n}\n\nfunc debugPrintRoutes(r *mux.Router) {\n\terr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tpathTemplate, err := route.GetPathTemplate()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"ROUTE:\", pathTemplate)\n\t\t}\n\t\tpathRegexp, err := route.GetPathRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Path regexp:\", pathRegexp)\n\t\t}\n\t\tqueriesTemplates, err := route.GetQueriesTemplates()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n\t\t}\n\t\tqueriesRegexps, err := route.GetQueriesRegexp()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n\t\t}\n\t\tmethods, err := route.GetMethods()\n\t\tif err == nil {\n\t\t\tfmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n\t\t}\n\t\tfmt.Println()\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\n// nolint: gocyclo\nfunc servePublic(w http.ResponseWriter, r *http.Request) {\n\twebPath := \"/\"\n\tif util.WebHostURL != nil {\n\t\twebPath = util.WebHostURL.RequestURI()\n\t}\n\n\tpath := r.URL.Path\n\n\tif path == webPath+\"api\" || strings.HasPrefix(path, webPath+\"api/\") {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tif !strings.Contains(path, \".\") {\n\t\tpath = \"/index.html\"\n\t}\n\n\tpath = strings.Replace(path, webPath+\"/\", \"\", 1)\n\tsplit := strings.Split(path, \".\")\n\tsuffix := split[len(split)-1]\n\n\tvar res []byte\n\tvar err error\n\n\tres, err = publicAssets2.MustBytes(path)\n\n\tif err != nil {\n\t\tnotFoundHandler(w, r)\n\t\treturn\n\t}\n\n\t// replace base path\n\tif util.WebHostURL != nil && path == \"/index.html\" {\n\t\tbaseURL := util.WebHostURL.String()\n\t\tif !strings.HasSuffix(baseURL, \"/\") {\n\t\t\tbaseURL += \"/\"\n\t\t}\n\t\tres = []byte(strings.Replace(string(res),\n\t\t\t\"<base href=\\\"/\\\">\",\n\t\t\t\"<base href=\\\"\"+baseURL+\"\\\">\",\n\t\t\t1))\n\t}\n\n\tcontentType := \"text/plain\"\n\tswitch suffix {\n\tcase \"png\":\n\t\tcontentType = \"image/png\"\n\tcase \"jpg\", \"jpeg\":\n\t\tcontentType = \"image/jpeg\"\n\tcase \"gif\":\n\t\tcontentType = \"image/gif\"\n\tcase \"js\":\n\t\tcontentType = \"application/javascript\"\n\tcase \"css\":\n\t\tcontentType = \"text/css\"\n\tcase \"woff\":\n\t\tcontentType = \"application/x-font-woff\"\n\tcase \"ttf\":\n\t\tcontentType = \"application/x-font-ttf\"\n\tcase \"otf\":\n\t\tcontentType = \"application/x-font-otf\"\n\tcase \"html\":\n\t\tcontentType = \"text/html\"\n\t}\n\n\tw.Header().Set(\"content-type\", contentType)\n\t_, err = w.Write(res)\n\tutil.LogWarning(err)\n}\n\nfunc getSystemInfo(w http.ResponseWriter, r *http.Request) {\n\tbody := map[string]interface{}{\n\t\t\"version\": util.Version,\n\t\t\"ansible\": util.AnsibleVersion(),\n\t\t\"demo\":    util.Config.DemoMode,\n\t}\n\n\thelpers.WriteJSON(w, http.StatusOK, body)\n}\n"], "filenames": ["api/auth.go", "api/router.go"], "buggy_code_start_loc": [14, 351], "buggy_code_end_loc": [123, 361], "fixing_code_start_loc": [14, 350], "fixing_code_end_loc": [130, 352], "type": "CWE-287", "message": "api/auth.go in Ansible Semaphore before 2.8.89 mishandles authentication.", "other": {"cve": {"id": "CVE-2023-28609", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-18T21:15:11.667", "lastModified": "2023-03-23T14:04:55.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "api/auth.go in Ansible Semaphore before 2.8.89 mishandles authentication."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ansible-semaphore:ansible_semaphore:*:*:*:*:*:ansible:*:*", "versionEndExcluding": "2.8.89", "matchCriteriaId": "C931885D-6C2C-4AF6-8201-1D1857BC4D26"}]}]}], "references": [{"url": "https://github.com/ansible-semaphore/semaphore/commit/3e4a62b7f2b1ef0660c9fb839818a53c80a5a8b1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/ansible-semaphore/semaphore/releases/tag/v2.8.89", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/ansible-semaphore/semaphore/commit/3e4a62b7f2b1ef0660c9fb839818a53c80a5a8b1"}}