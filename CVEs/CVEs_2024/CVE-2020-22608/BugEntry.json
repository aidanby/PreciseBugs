{"buggy_code": ["<?php\n/*********************************************************************\n    ajax.search.php\n\n    AJAX interface for searches, queue management, etc.\n\n    Jared Hancock <jared@osticket.com>\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once(INCLUDE_DIR.'class.ajax.php');\n\nclass SearchAjaxAPI extends AjaxController {\n\n    function getAdvancedSearchDialog($key=false, $context='advsearch') {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new AdhocSearch(array(\n            'root' => 'T',\n            'staff_id' => $thisstaff->getId(),\n            'parent_id' => @$_GET['parent_id'] ?: 0,\n        ));\n        if ($search->parent_id) {\n            $search->flags |= SavedSearch::FLAG_INHERIT_COLUMNS;\n        }\n\n        if (isset($_SESSION[$context]) && $key && $_SESSION[$context][$key])\n            $search->config = $_SESSION[$context][$key];\n\n        $this->_tryAgain($search);\n    }\n\n    function editSearch($id) {\n        global $thisstaff;\n\n        $search = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$search || !$search->checkAccess($thisstaff))\n            Http::response(404, 'No such saved search');\n\n        $this->_tryAgain($search);\n    }\n\n    function addField($name) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new SavedSearch(array(\n                    'root'=>'T'\n                    ));\n        $searchable = $search->getSupportedMatches();\n        if (!($F = $searchable[$name]))\n            Http::response(404, 'No such field: ', print_r($name, true));\n\n        $fields = SavedSearch::getSearchField($F, $name);\n        $form = new AdvancedSearchForm($fields);\n        // Check the box to search the field by default\n        if ($F = $form->getField(\"{$name}+search\"))\n            $F->value = true;\n\n        ob_start();\n        include STAFFINC_DIR . 'templates/advanced-search-field.tmpl.php';\n        $html = ob_get_clean();\n\n        return $this->encode(array(\n            'success' => true,\n            'html' => $html,\n        ));\n    }\n\n    function doSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $search = new AdhocSearch(array(\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId()));\n\n        $form = $search->getForm($_POST);\n        if (false === $this->_setupSearch($search, $form)) {\n            return;\n        }\n\n        Http::response(200, $this->encode(array(\n            'redirect' => 'tickets.php?queue=adhoc',\n        )));\n    }\n\n    function _hasErrors(SavedSearch $search, $form) {\n        if (!$form->isValid()) {\n            $this->_tryAgain($search, $form);\n            return true;\n        }\n    }\n\n    function _setupSearch(SavedSearch $search, $form, $key='advsearch') {\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        if ($key) {\n            $keep = array();\n            // Add in new search to the list of recent searches\n            $criteria = $search->isolateCriteria($form->getClean());\n            $token = $this->_hashCriteria($criteria);\n            $keep[$token] = $criteria;\n            // Keep the last 5 recent searches looking from the beginning of\n            // the recent search list\n            if (isset($_SESSION[$key])) {\n                reset($_SESSION[$key]);\n                while (count($keep) < 5) {\n                    list($k, $v) = each($_SESSION[$key]);\n                    if (!$k)\n                        break;\n                    $keep[$k] = $v;\n                }\n            }\n            $_SESSION[$key] = $keep;\n        }\n    }\n\n    function _hashCriteria($criteria, $size=10) {\n        $parts = array();\n        foreach ($criteria as $C) {\n            list($name, $method, $value) = $C;\n            if (is_array($value))\n                $value = implode('+', $value);\n            $parts[] = \"{$name} {$method} {$value}\";\n        }\n        $hash = sha1(implode(' ', $parts), true);\n        return substr(\n            str_replace(array('+','/','='), '', base64_encode($hash)),\n            -$size);\n    }\n\n    function _tryAgain($search, $form=null, $errors=array(), $info=array()) {\n        if (!$form)\n            $form = $search->getForm();\n        include STAFFINC_DIR . 'templates/advanced-search.tmpl.php';\n    }\n\n    function createSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n\n        $search = SavedSearch::create(array(\n                    'title' => __('Add Queue'),\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId(),\n                    'parent_id' =>  $_GET['pid'],\n                    ));\n        $this->_tryAgain($search);\n    }\n\n    function saveSearch($id=0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        if ($id) { //  update\n            if (!($search = SavedSearch::lookup($id))\n                    || !$search->checkAccess($thisstaff))\n                Http::response(404, 'No such saved search');\n        } else { // new search\n            $search = SavedSearch::create(array(\n                        'root' => 'T',\n                        'staff_id' => $thisstaff->getId()\n                        ));\n        }\n\n        if (false === $this->_saveSearch($search))\n            return;\n\n        $info = array(\n                'msg' => sprintf('%s %s %s',\n                    __('Search'),\n                    $id ? __('updated') : __('created'),\n                    __('successfully')),\n                );\n        $this->_tryAgain($search, null, null, $info);\n    }\n\n    function _saveSearch(SavedSearch $search) {\n\n        // Validate the form.\n        $form = $search->getForm($_POST);\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        $errors = array();\n        if (!$search->update($_POST, $errors)\n                || !$search->save(true)) {\n\n            $form->addError(sprintf(\n                        __('Unable to update %s. Correct error(s) below and try again.'),\n                        __('queue')));\n            $this->_tryAgain($search, $form, $errors);\n            return false;\n        }\n\n        if (false === $this->_setupSearch($search, $form)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function editColumn($column_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($column = QueueColumn::lookup($column_id))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if ($_POST) {\n            $data_form = $column->getDataConfigForm($_POST);\n            if ($data_form->isValid()) {\n                $column->update($_POST, 'Ticket');\n                if ($column->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        $root = 'Ticket';\n        include STAFFINC_DIR . 'templates/queue-column-edit.tmpl.php';\n    }\n\n    function editSort($sort_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($sort = QueueSort::lookup($sort_id))) {\n            Http::response(404, 'No such queue sort');\n        }\n\n        $data_form = $sort->getDataConfigForm($_POST ?: false);\n        if ($_POST) {\n            if ($data_form->isValid()) {\n                $sort->update($data_form->getClean() + $_POST);\n                if ($sort->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        include STAFFINC_DIR . 'templates/queue-sorting-edit.tmpl.php';\n    }\n\n    function getQueue($id) {\n        global $thisstaff;\n\n        $queue = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$queue || !$queue->checkAccess($thisstaff))\n            Http::response(404, 'No such queue');\n\n        Http::response(200, $this->encode(array(\n            'name' => $queue->getName(),\n            'criteria' => nl2br(Format::htmlchars($queue->describeCriteria())),\n        )));\n    }\n\n    function deleteQueue($id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n        if (!$queue || !$queue->checkAccess($thisstaff)) {\n            Http::response(404, 'No such queue');\n        }\n        if ($_POST) {\n            if (!$queue->delete()) {\n                Http::response(500, 'Unable to delete queue');\n            }\n            Http::response(201, 'Have a nice day');\n           $_SESSION['::sysmsgs']['msg'] = sprintf(__( 'Successfully deleted%s.'),\n                       $queue->getName());\n        }\n\n       $info = array(\n               ':action' => sprintf('#queue/%s/delete', $queue->getId()),\n               ':title' => sprintf('%s %s', __('Please Confirm'), __('Queue Deletion')),\n               'warn' => __('Deleted Queues cannot be recovered'),\n               ':message' => sprintf('Are you sure you want to delete %s queue?', $queue->getName()),\n               ':confirm' => 'Yes, Delete!'\n               );\n\n        include STAFFINC_DIR . 'templates/confirm.tmpl.php';\n    }\n\n    function previewQueue($id=false) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if (!$queue) {\n            $queue = CustomQueue::create();\n        }\n\n        $queue->update($_POST);\n\n        $form = $queue->getForm($_POST);\n        $tickets = $queue->getQuery($form);\n        $count = 10; // count($queue->getBasicQuery($form));\n\n        include STAFFINC_DIR . 'templates/queue-preview.tmpl.php';\n    }\n\n    function addCondition() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['field']) || !isset($_GET['id'])\n            || !isset($_GET['object_id'])\n        ) {\n            Http::response(400, '`field`, `id`, and `object_id` parameters required');\n        }\n        elseif (!is_numeric($_GET['object_id'])) {\n            Http::response(400, '`object_id` should be an integer');\n        }\n        $fields = SavedSearch::getSearchableFields('Ticket');\n        if (!isset($fields[$_GET['field']])) {\n            Http::response(400, sprintf('%s: No such searchable field'),\n                Format::htmlchars($_GET['field']));\n        }\n\n        list($label, $field) = $fields[$_GET['field']];\n        // Ensure `name` is preserved\n        $field_name = $_GET['field'];\n        $id = $_GET['id'];\n        $object_id = $_GET['object_id'];\n        $condition = new QueueColumnCondition(array());\n        include STAFFINC_DIR . 'templates/queue-column-condition.tmpl.php';\n    }\n\n    function addConditionProperty() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['prop']) || !isset($_GET['condition'])) {\n            Http::response(400, '`prop` and `condition` parameters required');\n        }\n\n        $prop = $_GET['prop'];\n        $id = $_GET['condition'];\n        include STAFFINC_DIR . 'templates/queue-column-condition-prop.tmpl.php';\n    }\n\n    function collectQueueCounts($ids=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $criteria = array();\n        if ($ids && is_array($ids))\n            $criteria = array('id__in' => $ids);\n        $counts = SavedQueue::counts($thisstaff, true, $criteria);\n        Http::response(200, false, 'application/json');\n        return $this->encode(Format::number($counts));\n    }\n}\n"], "fixing_code": ["<?php\n/*********************************************************************\n    ajax.search.php\n\n    AJAX interface for searches, queue management, etc.\n\n    Jared Hancock <jared@osticket.com>\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once(INCLUDE_DIR.'class.ajax.php');\n\nclass SearchAjaxAPI extends AjaxController {\n\n    function getAdvancedSearchDialog($key=false, $context='advsearch') {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new AdhocSearch(array(\n            'root' => 'T',\n            'staff_id' => $thisstaff->getId(),\n            'parent_id' => @$_GET['parent_id'] ?: 0,\n        ));\n        if ($search->parent_id) {\n            $search->flags |= SavedSearch::FLAG_INHERIT_COLUMNS;\n        }\n\n        if (isset($_SESSION[$context]) && $key && $_SESSION[$context][$key])\n            $search->config = $_SESSION[$context][$key];\n\n        $this->_tryAgain($search);\n    }\n\n    function editSearch($id) {\n        global $thisstaff;\n\n        $search = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$search || !$search->checkAccess($thisstaff))\n            Http::response(404, 'No such saved search');\n\n        $this->_tryAgain($search);\n    }\n\n    function addField($name) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login required');\n\n        $search = new SavedSearch(array(\n                    'root'=>'T'\n                    ));\n        $searchable = $search->getSupportedMatches();\n        if (!($F = $searchable[$name]))\n            Http::response(404, 'No such field: ', print_r($name, true));\n\n        $fields = SavedSearch::getSearchField($F, $name);\n        $form = new AdvancedSearchForm($fields);\n        // Check the box to search the field by default\n        if ($F = $form->getField(\"{$name}+search\"))\n            $F->value = true;\n\n        ob_start();\n        include STAFFINC_DIR . 'templates/advanced-search-field.tmpl.php';\n        $html = ob_get_clean();\n\n        return $this->encode(array(\n            'success' => true,\n            'html' => $html,\n        ));\n    }\n\n    function doSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $search = new AdhocSearch(array(\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId()));\n\n        $form = $search->getForm($_POST);\n        if (false === $this->_setupSearch($search, $form)) {\n            return;\n        }\n\n        Http::response(200, $this->encode(array(\n            'redirect' => 'tickets.php?queue=adhoc',\n        )));\n    }\n\n    function _hasErrors(SavedSearch $search, $form) {\n        if (!$form->isValid()) {\n            $this->_tryAgain($search, $form);\n            return true;\n        }\n    }\n\n    function _setupSearch(SavedSearch $search, $form, $key='advsearch') {\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        if ($key) {\n            $keep = array();\n            // Add in new search to the list of recent searches\n            $criteria = $search->isolateCriteria($form->getClean());\n            $token = $this->_hashCriteria($criteria);\n            $keep[$token] = $criteria;\n            // Keep the last 5 recent searches looking from the beginning of\n            // the recent search list\n            if (isset($_SESSION[$key])) {\n                reset($_SESSION[$key]);\n                while (count($keep) < 5) {\n                    list($k, $v) = each($_SESSION[$key]);\n                    if (!$k)\n                        break;\n                    $keep[$k] = $v;\n                }\n            }\n            $_SESSION[$key] = $keep;\n        }\n    }\n\n    function _hashCriteria($criteria, $size=10) {\n        $parts = array();\n        foreach ($criteria as $C) {\n            list($name, $method, $value) = $C;\n            if (is_array($value))\n                $value = implode('+', $value);\n            $parts[] = \"{$name} {$method} {$value}\";\n        }\n        $hash = sha1(implode(' ', $parts), true);\n        return substr(\n            str_replace(array('+','/','='), '', base64_encode($hash)),\n            -$size);\n    }\n\n    function _tryAgain($search, $form=null, $errors=array(), $info=array()) {\n        if (!$form)\n            $form = $search->getForm();\n        include STAFFINC_DIR . 'templates/advanced-search.tmpl.php';\n    }\n\n    function createSearch() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n\n        $search = SavedSearch::create(array(\n                    'title' => __('Add Queue'),\n                    'root' => 'T',\n                    'staff_id' => $thisstaff->getId(),\n                    'parent_id' =>  $_GET['pid'],\n                    ));\n        $this->_tryAgain($search);\n    }\n\n    function saveSearch($id=0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        if ($id) { //  update\n            if (!($search = SavedSearch::lookup($id))\n                    || !$search->checkAccess($thisstaff))\n                Http::response(404, 'No such saved search');\n        } else { // new search\n            $search = SavedSearch::create(array(\n                        'root' => 'T',\n                        'staff_id' => $thisstaff->getId()\n                        ));\n        }\n\n        if (false === $this->_saveSearch($search))\n            return;\n\n        $info = array(\n                'msg' => sprintf('%s %s %s',\n                    __('Search'),\n                    $id ? __('updated') : __('created'),\n                    __('successfully')),\n                );\n        $this->_tryAgain($search, null, null, $info);\n    }\n\n    function _saveSearch(SavedSearch $search) {\n        $_POST['queue-name'] = Format::htmlchars($_POST['queue-name']);\n\n        // Validate the form.\n        $form = $search->getForm($_POST);\n        if ($this->_hasErrors($search, $form))\n            return false;\n\n        $errors = array();\n        if (!$search->update($_POST, $errors)\n                || !$search->save(true)) {\n\n            $form->addError(sprintf(\n                        __('Unable to update %s. Correct error(s) below and try again.'),\n                        __('queue')));\n            $this->_tryAgain($search, $form, $errors);\n            return false;\n        }\n\n        if (false === $this->_setupSearch($search, $form)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function editColumn($column_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($column = QueueColumn::lookup($column_id))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if ($_POST) {\n            $data_form = $column->getDataConfigForm($_POST);\n            if ($data_form->isValid()) {\n                $column->update($_POST, 'Ticket');\n                if ($column->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        $root = 'Ticket';\n        include STAFFINC_DIR . 'templates/queue-column-edit.tmpl.php';\n    }\n\n    function editSort($sort_id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!($sort = QueueSort::lookup($sort_id))) {\n            Http::response(404, 'No such queue sort');\n        }\n\n        $data_form = $sort->getDataConfigForm($_POST ?: false);\n        if ($_POST) {\n            if ($data_form->isValid()) {\n                $sort->update($data_form->getClean() + $_POST);\n                if ($sort->save())\n                    Http::response(201, 'Successfully updated');\n            }\n        }\n\n        include STAFFINC_DIR . 'templates/queue-sorting-edit.tmpl.php';\n    }\n\n    function getQueue($id) {\n        global $thisstaff;\n\n        $queue = SavedSearch::lookup($id);\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$queue || !$queue->checkAccess($thisstaff))\n            Http::response(404, 'No such queue');\n\n        Http::response(200, $this->encode(array(\n            'name' => $queue->getName(),\n            'criteria' => nl2br(Format::htmlchars($queue->describeCriteria())),\n        )));\n    }\n\n    function deleteQueue($id) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n        if (!$queue || !$queue->checkAccess($thisstaff)) {\n            Http::response(404, 'No such queue');\n        }\n        if ($_POST) {\n            if (!$queue->delete()) {\n                Http::response(500, 'Unable to delete queue');\n            }\n            Http::response(201, 'Have a nice day');\n           $_SESSION['::sysmsgs']['msg'] = sprintf(__( 'Successfully deleted%s.'),\n                       $queue->getName());\n        }\n\n       $info = array(\n               ':action' => sprintf('#queue/%s/delete', $queue->getId()),\n               ':title' => sprintf('%s %s', __('Please Confirm'), __('Queue Deletion')),\n               'warn' => __('Deleted Queues cannot be recovered'),\n               ':message' => sprintf('Are you sure you want to delete %s queue?', $queue->getName()),\n               ':confirm' => 'Yes, Delete!'\n               );\n\n        include STAFFINC_DIR . 'templates/confirm.tmpl.php';\n    }\n\n    function previewQueue($id=false) {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        if ($id && (!($queue = CustomQueue::lookup($id)))) {\n            Http::response(404, 'No such queue');\n        }\n\n        if (!$queue) {\n            $queue = CustomQueue::create();\n        }\n\n        $queue->update($_POST);\n\n        $form = $queue->getForm($_POST);\n        $tickets = $queue->getQuery($form);\n        $count = 10; // count($queue->getBasicQuery($form));\n\n        include STAFFINC_DIR . 'templates/queue-preview.tmpl.php';\n    }\n\n    function addCondition() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['field']) || !isset($_GET['id'])\n            || !isset($_GET['object_id'])\n        ) {\n            Http::response(400, '`field`, `id`, and `object_id` parameters required');\n        }\n        elseif (!is_numeric($_GET['object_id'])) {\n            Http::response(400, '`object_id` should be an integer');\n        }\n        $fields = SavedSearch::getSearchableFields('Ticket');\n        if (!isset($fields[$_GET['field']])) {\n            Http::response(400, sprintf('%s: No such searchable field'),\n                Format::htmlchars($_GET['field']));\n        }\n\n        list($label, $field) = $fields[$_GET['field']];\n        // Ensure `name` is preserved\n        $field_name = $_GET['field'];\n        $id = $_GET['id'];\n        $object_id = $_GET['object_id'];\n        $condition = new QueueColumnCondition(array());\n        include STAFFINC_DIR . 'templates/queue-column-condition.tmpl.php';\n    }\n\n    function addConditionProperty() {\n        global $thisstaff;\n\n        if (!$thisstaff) {\n            Http::response(403, 'Agent login is required');\n        }\n        elseif (!isset($_GET['prop']) || !isset($_GET['condition'])) {\n            Http::response(400, '`prop` and `condition` parameters required');\n        }\n\n        $prop = $_GET['prop'];\n        $id = $_GET['condition'];\n        include STAFFINC_DIR . 'templates/queue-column-condition-prop.tmpl.php';\n    }\n\n    function collectQueueCounts($ids=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n\n        $criteria = array();\n        if ($ids && is_array($ids))\n            $criteria = array('id__in' => $ids);\n        $counts = SavedQueue::counts($thisstaff, true, $criteria);\n        Http::response(200, false, 'application/json');\n        return $this->encode(Format::number($counts));\n    }\n}\n"], "filenames": ["include/ajax.search.php"], "buggy_code_start_loc": [204], "buggy_code_end_loc": [204], "fixing_code_start_loc": [205], "fixing_code_end_loc": [206], "type": "CWE-79", "message": "Cross Site Scripting vulnerability in Enhancesoft osTicket before v1.12.6 via the queue-name parameter to include/ajax.search.php.", "other": {"cve": {"id": "CVE-2020-22608", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-28T19:15:07.870", "lastModified": "2021-07-01T18:33:18.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting vulnerability in Enhancesoft osTicket before v1.12.6 via the queue-name parameter to include/ajax.search.php."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross Site Scripting en Enhancesoft osTicket versiones anteriores a v1.12.6, por medio del par\u00e1metro queue-name en el archivo include/ajax.search.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.12.6", "matchCriteriaId": "841AF410-1840-4395-AD45-3D0FCD9DF878"}]}]}], "references": [{"url": "https://github.com/osTicket/osTicket/commit/d54cca0b265128f119b6c398575175cb10cf1754", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osTicket/osTicket/commit/d54cca0b265128f119b6c398575175cb10cf1754"}}