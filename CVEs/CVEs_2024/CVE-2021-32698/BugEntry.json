{"buggy_code": ["<?php\n/**\n * @author Nicolas CARPi <nico-git@deltablot.email>\n * @copyright 2012 Nicolas CARPi\n * @see https://www.elabftw.net Official website\n * @license AGPL-3.0\n * @package elabftw\n */\ndeclare(strict_types=1);\n\nnamespace Elabftw\\Services;\n\nuse DateTime;\nuse function dirname;\nuse Elabftw\\Elabftw\\ContentParams;\nuse Elabftw\\Elabftw\\Tools;\nuse Elabftw\\Exceptions\\FilesystemErrorException;\nuse Elabftw\\Exceptions\\ProcessFailedException;\nuse Elabftw\\Models\\AbstractEntity;\nuse Elabftw\\Models\\Config;\nuse Elabftw\\Models\\Experiments;\nuse Elabftw\\Models\\Users;\nuse Elabftw\\Traits\\TwigTrait;\nuse function file_get_contents;\nuse function file_put_contents;\nuse function html_entity_decode;\nuse function is_dir;\nuse function mkdir;\nuse Mpdf\\Mpdf;\nuse Mpdf\\SizeConverter;\nuse function preg_match;\nuse function preg_match_all;\nuse function preg_replace;\nuse Psr\\Log\\NullLogger;\nuse setasign\\Fpdi\\FpdiException;\nuse function str_replace;\nuse function strtolower;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Process\\Exception\\ProcessFailedException as SymfonyProcessFailedException;\nuse Symfony\\Component\\Process\\Process;\nuse function tempnam;\nuse function unlink;\n\n/**\n * Create a pdf from an Entity\n */\nclass MakePdf extends AbstractMake\n{\n    use TwigTrait;\n\n    public string $longName;\n\n    /**\n     * Constructor\n     *\n     * @param AbstractEntity $entity Experiments or Database\n     * @param bool $temporary do we need to save it in cache folder or uploads folder\n     */\n    public function __construct(AbstractEntity $entity, $temporary = false)\n    {\n        parent::__construct($entity);\n\n        $this->longName = $this->getLongName() . '.pdf';\n\n        if ($temporary) {\n            $this->filePath = $this->getTmpPath() . $this->getUniqueString();\n        } else {\n            $this->filePath = $this->getUploadsPath() . $this->longName;\n            $dir = dirname($this->filePath);\n            if (!is_dir($dir) && !mkdir($dir, 0700, true) && !is_dir($dir)) {\n                throw new FilesystemErrorException('Cannot create folder! Check permissions of uploads folder.');\n            }\n        }\n\n        // suppress the \"A non-numeric value encountered\" error from mpdf\n        // see https://github.com/baselbers/mpdf/commit\n        // 5cbaff4303604247f698afc6b13a51987a58f5bc#commitcomment-23217652\n        error_reporting(E_ERROR);\n    }\n\n    /**\n     * Generate pdf and output it to a file\n     */\n    public function outputToFile(): void\n    {\n        $this->generate()->Output($this->filePath, 'F');\n    }\n\n    /**\n     * Build HTML content that will be fed to mpdf->WriteHTML()\n     */\n    public function getContent(): string\n    {\n        $Request = Request::createFromGlobals();\n\n        if ($this->Entity->entityData['tags']) {\n            $tags = '<strong>Tags:</strong> <em>' .\n                str_replace('|', ' ', $this->Entity->entityData['tags']) . '</em> <br />';\n        }\n\n        $date = new DateTime($this->Entity->entityData['date'] ?? Filter::kdate());\n\n        $locked = $this->Entity->entityData['locked'];\n        $lockDate = '';\n        $lockerName = '';\n\n        if ($locked) {\n            // get info about the locker\n            $Locker = new Users((int) $this->Entity->entityData['lockedby']);\n            $lockerName = $Locker->userData['fullname'];\n\n            // separate the date and time\n            $ldate = explode(' ', $this->Entity->entityData['lockedwhen']);\n            $lockDate = $ldate[0] . ' at ' . $ldate[1];\n        }\n\n        $renderArr = array(\n            'body' => $this->getBody(),\n            'commentsArr' => $this->Entity->Comments->read(new ContentParams()),\n            'css' => $this->getCss(),\n            'date' => $date->format('Y-m-d'),\n            'elabid' => $this->Entity->entityData['elabid'],\n            'fullname' => $this->Entity->entityData['fullname'],\n            'includeFiles' => $this->Entity->Users->userData['inc_files_pdf'],\n            'linksArr' => $this->Entity->Links->read(new ContentParams()),\n            'locked' => $locked,\n            'lockDate' => $lockDate,\n            'lockerName' => $lockerName,\n            'pdfSig' => $Request->cookies->get('pdf_sig'),\n            'stepsArr' => $this->Entity->Steps->read(new ContentParams()),\n            'tags' => $this->Entity->entityData['tags'],\n            'title' => $this->Entity->entityData['title'],\n            'uploadsArr' => $this->Entity->Uploads->readAll(),\n            'uploadsFolder' => dirname(__DIR__, 2) . '/uploads/',\n            'url' => $this->getUrl(),\n            'linkBaseUrl' => Tools::getUrl($Request) . '/database.php',\n            'useCjk' => $this->Entity->Users->userData['cjk_fonts'],\n        );\n\n        return $this->getTwig(Config::getConfig())->render('pdf.html', $renderArr);\n    }\n\n    /**\n     * Generate pdf and return it as string\n     */\n    public function getPdf(): string\n    {\n        return $this->generate()->Output('', 'S');\n    }\n\n    /**\n     * Replace weird characters by underscores\n     */\n    public function getFileName(): string\n    {\n        $title = Filter::forFilesystem($this->Entity->entityData['title']);\n        return $this->Entity->entityData['date'] . ' - ' . $title . '.pdf';\n    }\n\n    /**\n     * Initialize Mpdf\n     */\n    public function initializeMpdf(bool $multiEntity = false): Mpdf\n    {\n        $format = $this->Entity->Users->userData['pdf_format'];\n\n        // we use a custom tmp dir, not the same as Twig because its content gets deleted after pdf is generated\n        $tmpDir = dirname(__DIR__, 2) . '/cache/mpdf/';\n        if (!is_dir($tmpDir) && !mkdir($tmpDir, 0700, true) && !is_dir($tmpDir)) {\n            throw new FilesystemErrorException(\"Could not create the $tmpDir directory! Please check permissions on this folder.\");\n        }\n\n        // create the pdf\n        $mpdf = new Mpdf(array(\n            'format' => $format,\n            'tempDir' => $tmpDir,\n            'mode' => 'utf-8',\n        ));\n\n        // make sure header and footer are not overlapping the body text\n        $mpdf->setAutoTopMargin = 'stretch';\n        $mpdf->setAutoBottomMargin = 'stretch';\n\n        // set metadata\n        $mpdf->SetAuthor($this->Entity->Users->userData['fullname']);\n        $mpdf->SetTitle('eLabFTW pdf');\n        $mpdf->SetSubject('eLabFTW pdf');\n        $mpdf->SetCreator('www.elabftw.net');\n\n        if (!$multiEntity) {\n            $mpdf->SetAuthor($this->Entity->entityData['fullname']);\n            $mpdf->SetTitle($this->Entity->entityData['title']);\n            $mpdf->SetKeywords(str_replace('|', ' ', $this->Entity->entityData['tags'] ?? ''));\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Convert Tex to SVG with Mathjax\n     */\n    public function tex2svg(Mpdf $mpdf, string $content): string\n    {\n        // we use a custom tmp dir\n        $tmpDir = dirname(__DIR__, 2) . '/cache/mathjax/';\n        if (!is_dir($tmpDir) && !mkdir($tmpDir, 0700, true) && !is_dir($tmpDir)) {\n            throw new FilesystemErrorException(\"Could not create the $tmpDir directory! Please check permissions on this folder.\");\n        }\n\n        // temporary file to hold the content\n        $filename = tempnam($tmpDir, '');\n        if (!$filename) {\n            throw new FilesystemErrorException(\"Could not create a temporary file in $tmpDir! Please check permissions on this folder.\");\n        }\n\n        // decode html entities, otherwise it crashes\n        // compare to https://github.com/mathjax/MathJax-demos-node/issues/16\n        $contentDecode = html_entity_decode($content, ENT_HTML5, 'UTF-8');\n        file_put_contents($filename, $contentDecode);\n\n        // apsolute path to tex2svg app\n        $appDir = dirname(__DIR__, 2) . '/src/node';\n\n        // convert tex to svg with mathjax nodejs script\n        // returns nothing if there is no tex\n        // use tex2svg.bundle.js script located in src/node\n        // tex2svg.bundle.js is webpacked src/node/tex2svg.js\n        $process = new Process(\n            array(\n                'node',\n                $appDir . '/tex2svg.bundle.js',\n                $filename,\n            )\n        );\n        $process->run();\n\n        if (!$process->isSuccessful()) {\n            unlink($filename);\n            throw new ProcessFailedException('PDF generation failed during Tex rendering.', 0, new SymfonyProcessFailedException($process));\n        }\n\n        $html = $process->getOutput();\n        unlink($filename);\n\n        // was there actually tex in the content?\n        // if not we can skip the svg modifications and return the original content\n        if ($html === '') {\n            return $content;\n        }\n\n        // based on https://github.com/mpdf/mpdf-examples/blob/master/MathJaxProcess.php\n        // \u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\n        $sizeConverter = new SizeConverter($mpdf->dpi, $mpdf->default_font_size, $mpdf, new NullLogger());\n\n        // scale SVG size according to pdf + font settings\n        // only select mathjax svg\n        preg_match_all('/<mjx-container[^>]*><svg([^>]*)/', $html, $mathJaxSvg);\n        foreach ($mathJaxSvg[1] as $svgAttributes) {\n            preg_match('/width=\"(.*?)\"/', $svgAttributes, $wr);\n            preg_match('/height=\"(.*?)\"/', $svgAttributes, $hr);\n\n            if ($wr && $hr) {\n                $w = $sizeConverter->convert($wr[1], 0, $mpdf->FontSize) * $mpdf->dpi / 25.4;\n                $h = $sizeConverter->convert($hr[1], 0, $mpdf->FontSize) * $mpdf->dpi / 25.4;\n\n                $html = str_replace('width=\"' . $wr[1] . '\"', 'width=\"' . $w . '\"', $html);\n                $html = str_replace('height=\"' . $hr[1] . '\"', 'height=\"' . $h . '\"', $html);\n            }\n        }\n\n        // add 'mathjax-svg' class to all mathjax SVGs\n        $html = preg_replace('/(<mjx-container[^>]*><svg)/', '\\1 class=\"mathjax-svg\"', $html);\n\n        // fill to white for all SVGs\n        return str_replace('fill=\"currentColor\"', 'fill=\"#000\"', $html);\n\n        // \u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\n        // end\n    }\n\n    /**\n     * Append PDFs attached to an entity\n     *\n     * @param Mpdf $mpdf\n     */\n    public function appendPDFs(Mpdf $mpdf): Mpdf\n    {\n        $listOfPdfs = $this->getListOfPdfs();\n\n        if (empty($listOfPdfs)) {\n            return $mpdf;\n        }\n\n        foreach ($listOfPdfs as $pdf) {\n            // There will be cases where the merging will fail\n            // due to incompatibilities of Mpdf (actually fpdi) with the pdfs\n            // See https://manuals.setasign.com/fpdi-manual/v2/limitations/\n            // These cases will be caught and ignored\n            try {\n                $numberOfPages = $mpdf->setSourceFile($pdf[0]);\n\n                for ($i = 1; $i <= $numberOfPages; $i++) {\n                    // Import the ith page of the source PDF file\n                    $page = $mpdf->importPage($i);\n\n                    // getTemplateSize() is not documented in the MPDF manual\n                    // @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)\n                    $pageDim = $mpdf->getTemplateSize($page);\n\n                    if (is_array($pageDim)) { // satisfy phpstan\n                        // add a new (blank) page with the dimensions of the imported page\n                        $mpdf->AddPageByArray(array(\n                            'orientation' => $pageDim['orientation'],\n                            'sheet-size' => array($pageDim['width'], $pageDim['height']),\n                        ));\n                    }\n\n                    // empty the header and footer\n                    // cannot be an empty string\n                    $mpdf->SetHTMLHeader(' ', '', true);\n                    $mpdf->SetHTMLFooter(' ', '');\n\n                    // add the content of the imported page\n                    $mpdf->useTemplate($page);\n                }\n            } catch (FpdiException) {\n                continue;\n            }\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Get a list of all PDFs that are attached to an entity\n     *\n     * @return array Empty or array of arrays with information for PDFs array('path/to/file', 'real.name')\n     */\n    private function getListOfPdfs(): array\n    {\n        $uploadsArr = $this->Entity->Uploads->readAll();\n        $listOfPdfs = array();\n\n        if (empty($uploadsArr)) {\n            return $listOfPdfs;\n        }\n\n        foreach ($uploadsArr as $upload) {\n            $filePath = dirname(__DIR__, 2) . '/uploads/' . $upload['long_name'];\n            if (file_exists($filePath) && strtolower(Tools::getExt($upload['real_name'])) === 'pdf') {\n                $listOfPdfs[] = array($filePath, $upload['real_name']);\n            }\n        }\n\n        return $listOfPdfs;\n    }\n\n    /**\n     * Build the pdf\n     */\n    private function generate(): Mpdf\n    {\n        $mpdf = $this->initializeMpdf();\n\n        // write content\n        $mpdf->WriteHTML($this->tex2svg($mpdf, $this->getContent()));\n\n        if ($this->Entity->Users->userData['append_pdfs']) {\n            $mpdf = $this->appendPDFs($mpdf);\n        }\n\n        if ($this->Entity->Users->userData['pdfa']) {\n            // make sure we can read the pdf in a long time\n            // will embed the font and make the pdf bigger\n            $mpdf->PDFA = true;\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Get the contents of assets/pdf.min.css\n     */\n    private function getCss(): string\n    {\n        $css = file_get_contents(dirname(__DIR__, 2) . '/web/assets/pdf.min.css');\n        if ($css === false) {\n            throw new FilesystemErrorException('Cannot read the minified css file!');\n        }\n        return $css;\n    }\n\n    private function getBody(): string\n    {\n        $body = $this->Entity->entityData['body'];\n\n        // convert to html if we have markdown\n        if ($this->Entity->Users->userData['use_markdown']) {\n            $body = Tools::md2html($body);\n        }\n        // we need to fix the file path in the body so it shows properly into the pdf for timestamping (issue #131)\n        return str_replace('src=\"app/download.php?f=', 'src=\"' . dirname(__DIR__, 2) . '/uploads/', $body);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * @author Nicolas CARPi <nico-git@deltablot.email>\n * @copyright 2012 Nicolas CARPi\n * @see https://www.elabftw.net Official website\n * @license AGPL-3.0\n * @package elabftw\n */\ndeclare(strict_types=1);\n\nnamespace Elabftw\\Services;\n\nuse DateTime;\nuse function dirname;\nuse Elabftw\\Elabftw\\ContentParams;\nuse Elabftw\\Elabftw\\Tools;\nuse Elabftw\\Exceptions\\FilesystemErrorException;\nuse Elabftw\\Exceptions\\ProcessFailedException;\nuse Elabftw\\Models\\AbstractEntity;\nuse Elabftw\\Models\\Config;\nuse Elabftw\\Models\\Experiments;\nuse Elabftw\\Models\\Users;\nuse Elabftw\\Traits\\TwigTrait;\nuse function file_get_contents;\nuse function file_put_contents;\nuse function html_entity_decode;\nuse function is_dir;\nuse function mkdir;\nuse Mpdf\\Mpdf;\nuse Mpdf\\SizeConverter;\nuse function preg_match;\nuse function preg_match_all;\nuse function preg_replace;\nuse Psr\\Log\\NullLogger;\nuse setasign\\Fpdi\\FpdiException;\nuse function str_replace;\nuse function strtolower;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Process\\Exception\\ProcessFailedException as SymfonyProcessFailedException;\nuse Symfony\\Component\\Process\\Process;\nuse function tempnam;\nuse function unlink;\n\n/**\n * Create a pdf from an Entity\n */\nclass MakePdf extends AbstractMake\n{\n    use TwigTrait;\n\n    public string $longName;\n\n    /**\n     * Constructor\n     *\n     * @param AbstractEntity $entity Experiments or Database\n     * @param bool $temporary do we need to save it in cache folder or uploads folder\n     */\n    public function __construct(AbstractEntity $entity, $temporary = false)\n    {\n        parent::__construct($entity);\n\n        $this->longName = $this->getLongName() . '.pdf';\n\n        if ($temporary) {\n            $this->filePath = $this->getTmpPath() . $this->getUniqueString();\n        } else {\n            $this->filePath = $this->getUploadsPath() . $this->longName;\n            $dir = dirname($this->filePath);\n            if (!is_dir($dir) && !mkdir($dir, 0700, true) && !is_dir($dir)) {\n                throw new FilesystemErrorException('Cannot create folder! Check permissions of uploads folder.');\n            }\n        }\n\n        // suppress the \"A non-numeric value encountered\" error from mpdf\n        // see https://github.com/baselbers/mpdf/commit\n        // 5cbaff4303604247f698afc6b13a51987a58f5bc#commitcomment-23217652\n        error_reporting(E_ERROR);\n    }\n\n    /**\n     * Generate pdf and output it to a file\n     */\n    public function outputToFile(): void\n    {\n        $this->generate()->Output($this->filePath, 'F');\n    }\n\n    /**\n     * Build HTML content that will be fed to mpdf->WriteHTML()\n     */\n    public function getContent(): string\n    {\n        $Request = Request::createFromGlobals();\n\n        if ($this->Entity->entityData['tags']) {\n            $tags = '<strong>Tags:</strong> <em>' .\n                str_replace('|', ' ', $this->Entity->entityData['tags']) . '</em> <br />';\n        }\n\n        $date = new DateTime($this->Entity->entityData['date'] ?? Filter::kdate());\n\n        $locked = $this->Entity->entityData['locked'];\n        $lockDate = '';\n        $lockerName = '';\n\n        if ($locked) {\n            // get info about the locker\n            $Locker = new Users((int) $this->Entity->entityData['lockedby']);\n            $lockerName = $Locker->userData['fullname'];\n\n            // separate the date and time\n            $ldate = explode(' ', $this->Entity->entityData['lockedwhen']);\n            $lockDate = $ldate[0] . ' at ' . $ldate[1];\n        }\n\n        $renderArr = array(\n            'body' => $this->getBody(),\n            'commentsArr' => $this->Entity->Comments->read(new ContentParams()),\n            'css' => $this->getCss(),\n            'date' => $date->format('Y-m-d'),\n            'elabid' => $this->Entity->entityData['elabid'],\n            'fullname' => $this->Entity->entityData['fullname'],\n            'includeFiles' => $this->Entity->Users->userData['inc_files_pdf'],\n            'linksArr' => $this->Entity->Links->read(new ContentParams()),\n            'locked' => $locked,\n            'lockDate' => $lockDate,\n            'lockerName' => $lockerName,\n            'pdfSig' => $Request->cookies->get('pdf_sig'),\n            'stepsArr' => $this->Entity->Steps->read(new ContentParams()),\n            'tags' => $this->Entity->entityData['tags'],\n            'title' => $this->Entity->entityData['title'],\n            'uploadsArr' => $this->Entity->Uploads->readAll(),\n            'uploadsFolder' => dirname(__DIR__, 2) . '/uploads/',\n            'url' => $this->getUrl(),\n            'linkBaseUrl' => Tools::getUrl($Request) . '/database.php',\n            'useCjk' => $this->Entity->Users->userData['cjk_fonts'],\n        );\n\n        $html = $this->getTwig(Config::getConfig())->render('pdf.html', $renderArr);\n\n        // now remove any img src pointing to outside world\n        // prevent blind ssrf (thwarted by CSP on webpage, but not in pdf)\n        return preg_replace('/img src=(\"|\\')(ht|f|)tp/i', 'nope', $html);\n    }\n\n    /**\n     * Generate pdf and return it as string\n     */\n    public function getPdf(): string\n    {\n        return $this->generate()->Output('', 'S');\n    }\n\n    /**\n     * Replace weird characters by underscores\n     */\n    public function getFileName(): string\n    {\n        $title = Filter::forFilesystem($this->Entity->entityData['title']);\n        return $this->Entity->entityData['date'] . ' - ' . $title . '.pdf';\n    }\n\n    /**\n     * Initialize Mpdf\n     */\n    public function initializeMpdf(bool $multiEntity = false): Mpdf\n    {\n        $format = $this->Entity->Users->userData['pdf_format'];\n\n        // we use a custom tmp dir, not the same as Twig because its content gets deleted after pdf is generated\n        $tmpDir = dirname(__DIR__, 2) . '/cache/mpdf/';\n        if (!is_dir($tmpDir) && !mkdir($tmpDir, 0700, true) && !is_dir($tmpDir)) {\n            throw new FilesystemErrorException(\"Could not create the $tmpDir directory! Please check permissions on this folder.\");\n        }\n\n        // create the pdf\n        $mpdf = new Mpdf(array(\n            'format' => $format,\n            'tempDir' => $tmpDir,\n            'mode' => 'utf-8',\n        ));\n\n        // make sure header and footer are not overlapping the body text\n        $mpdf->setAutoTopMargin = 'stretch';\n        $mpdf->setAutoBottomMargin = 'stretch';\n\n        // set metadata\n        $mpdf->SetAuthor($this->Entity->Users->userData['fullname']);\n        $mpdf->SetTitle('eLabFTW pdf');\n        $mpdf->SetSubject('eLabFTW pdf');\n        $mpdf->SetCreator('www.elabftw.net');\n\n        if (!$multiEntity) {\n            $mpdf->SetAuthor($this->Entity->entityData['fullname']);\n            $mpdf->SetTitle($this->Entity->entityData['title']);\n            $mpdf->SetKeywords(str_replace('|', ' ', $this->Entity->entityData['tags'] ?? ''));\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Convert Tex to SVG with Mathjax\n     */\n    public function tex2svg(Mpdf $mpdf, string $content): string\n    {\n        // we use a custom tmp dir\n        $tmpDir = dirname(__DIR__, 2) . '/cache/mathjax/';\n        if (!is_dir($tmpDir) && !mkdir($tmpDir, 0700, true) && !is_dir($tmpDir)) {\n            throw new FilesystemErrorException(\"Could not create the $tmpDir directory! Please check permissions on this folder.\");\n        }\n\n        // temporary file to hold the content\n        $filename = tempnam($tmpDir, '');\n        if (!$filename) {\n            throw new FilesystemErrorException(\"Could not create a temporary file in $tmpDir! Please check permissions on this folder.\");\n        }\n\n        // decode html entities, otherwise it crashes\n        // compare to https://github.com/mathjax/MathJax-demos-node/issues/16\n        $contentDecode = html_entity_decode($content, ENT_HTML5, 'UTF-8');\n        file_put_contents($filename, $contentDecode);\n\n        // absolute path to tex2svg app\n        $appDir = dirname(__DIR__, 2) . '/src/node';\n\n        // convert tex to svg with mathjax nodejs script\n        // returns nothing if there is no tex\n        // use tex2svg.bundle.js script located in src/node\n        // tex2svg.bundle.js is webpacked src/node/tex2svg.js\n        $process = new Process(\n            array(\n                'node',\n                $appDir . '/tex2svg.bundle.js',\n                $filename,\n            )\n        );\n        $process->run();\n\n        if (!$process->isSuccessful()) {\n            unlink($filename);\n            throw new ProcessFailedException('PDF generation failed during Tex rendering.', 0, new SymfonyProcessFailedException($process));\n        }\n\n        $html = $process->getOutput();\n        unlink($filename);\n\n        // was there actually tex in the content?\n        // if not we can skip the svg modifications and return the original content\n        if ($html === '') {\n            return $content;\n        }\n\n        // based on https://github.com/mpdf/mpdf-examples/blob/master/MathJaxProcess.php\n        // \u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\u02c5\n        $sizeConverter = new SizeConverter($mpdf->dpi, $mpdf->default_font_size, $mpdf, new NullLogger());\n\n        // scale SVG size according to pdf + font settings\n        // only select mathjax svg\n        preg_match_all('/<mjx-container[^>]*><svg([^>]*)/', $html, $mathJaxSvg);\n        foreach ($mathJaxSvg[1] as $svgAttributes) {\n            preg_match('/width=\"(.*?)\"/', $svgAttributes, $wr);\n            preg_match('/height=\"(.*?)\"/', $svgAttributes, $hr);\n\n            if ($wr && $hr) {\n                $w = $sizeConverter->convert($wr[1], 0, $mpdf->FontSize) * $mpdf->dpi / 25.4;\n                $h = $sizeConverter->convert($hr[1], 0, $mpdf->FontSize) * $mpdf->dpi / 25.4;\n\n                $html = str_replace('width=\"' . $wr[1] . '\"', 'width=\"' . $w . '\"', $html);\n                $html = str_replace('height=\"' . $hr[1] . '\"', 'height=\"' . $h . '\"', $html);\n            }\n        }\n\n        // add 'mathjax-svg' class to all mathjax SVGs\n        $html = preg_replace('/(<mjx-container[^>]*><svg)/', '\\1 class=\"mathjax-svg\"', $html);\n\n        // fill to white for all SVGs\n        return str_replace('fill=\"currentColor\"', 'fill=\"#000\"', $html);\n\n        // \u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\u02c4\n        // end\n    }\n\n    /**\n     * Append PDFs attached to an entity\n     *\n     * @param Mpdf $mpdf\n     */\n    public function appendPDFs(Mpdf $mpdf): Mpdf\n    {\n        $listOfPdfs = $this->getListOfPdfs();\n\n        if (empty($listOfPdfs)) {\n            return $mpdf;\n        }\n\n        foreach ($listOfPdfs as $pdf) {\n            // There will be cases where the merging will fail\n            // due to incompatibilities of Mpdf (actually fpdi) with the pdfs\n            // See https://manuals.setasign.com/fpdi-manual/v2/limitations/\n            // These cases will be caught and ignored\n            try {\n                $numberOfPages = $mpdf->setSourceFile($pdf[0]);\n\n                for ($i = 1; $i <= $numberOfPages; $i++) {\n                    // Import the ith page of the source PDF file\n                    $page = $mpdf->importPage($i);\n\n                    // getTemplateSize() is not documented in the MPDF manual\n                    // @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)\n                    $pageDim = $mpdf->getTemplateSize($page);\n\n                    if (is_array($pageDim)) { // satisfy phpstan\n                        // add a new (blank) page with the dimensions of the imported page\n                        $mpdf->AddPageByArray(array(\n                            'orientation' => $pageDim['orientation'],\n                            'sheet-size' => array($pageDim['width'], $pageDim['height']),\n                        ));\n                    }\n\n                    // empty the header and footer\n                    // cannot be an empty string\n                    $mpdf->SetHTMLHeader(' ', '', true);\n                    $mpdf->SetHTMLFooter(' ', '');\n\n                    // add the content of the imported page\n                    $mpdf->useTemplate($page);\n                }\n            } catch (FpdiException) {\n                continue;\n            }\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Get a list of all PDFs that are attached to an entity\n     *\n     * @return array Empty or array of arrays with information for PDFs array('path/to/file', 'real.name')\n     */\n    private function getListOfPdfs(): array\n    {\n        $uploadsArr = $this->Entity->Uploads->readAll();\n        $listOfPdfs = array();\n\n        if (empty($uploadsArr)) {\n            return $listOfPdfs;\n        }\n\n        foreach ($uploadsArr as $upload) {\n            $filePath = dirname(__DIR__, 2) . '/uploads/' . $upload['long_name'];\n            if (file_exists($filePath) && strtolower(Tools::getExt($upload['real_name'])) === 'pdf') {\n                $listOfPdfs[] = array($filePath, $upload['real_name']);\n            }\n        }\n\n        return $listOfPdfs;\n    }\n\n    /**\n     * Build the pdf\n     */\n    private function generate(): Mpdf\n    {\n        $mpdf = $this->initializeMpdf();\n\n        // write content\n        $mpdf->WriteHTML($this->tex2svg($mpdf, $this->getContent()));\n\n        if ($this->Entity->Users->userData['append_pdfs']) {\n            $mpdf = $this->appendPDFs($mpdf);\n        }\n\n        if ($this->Entity->Users->userData['pdfa']) {\n            // make sure we can read the pdf in a long time\n            // will embed the font and make the pdf bigger\n            $mpdf->PDFA = true;\n        }\n\n        return $mpdf;\n    }\n\n    /**\n     * Get the contents of assets/pdf.min.css\n     */\n    private function getCss(): string\n    {\n        $css = file_get_contents(dirname(__DIR__, 2) . '/web/assets/pdf.min.css');\n        if ($css === false) {\n            throw new FilesystemErrorException('Cannot read the minified css file!');\n        }\n        return $css;\n    }\n\n    private function getBody(): string\n    {\n        $body = $this->Entity->entityData['body'];\n\n        // convert to html if we have markdown\n        if ($this->Entity->Users->userData['use_markdown']) {\n            $body = Tools::md2html($body);\n        }\n        // we need to fix the file path in the body so it shows properly into the pdf for timestamping (issue #131)\n        return str_replace('src=\"app/download.php?f=', 'src=\"' . dirname(__DIR__, 2) . '/uploads/', $body);\n    }\n}\n"], "filenames": ["src/services/MakePdf.php"], "buggy_code_start_loc": [140], "buggy_code_end_loc": [222], "fixing_code_start_loc": [140], "fixing_code_end_loc": [226], "type": "CWE-918", "message": "eLabFTW is an open source electronic lab notebook for research labs. This vulnerability allows an attacker to make GET requests on behalf of the server. It is \"blind\" because the attacker cannot see the result of the request. Issue has been patched in eLabFTW 4.0.0.", "other": {"cve": {"id": "CVE-2021-32698", "sourceIdentifier": "security-advisories@github.com", "published": "2021-06-21T22:15:07.483", "lastModified": "2021-06-28T20:45:18.300", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "eLabFTW is an open source electronic lab notebook for research labs. This vulnerability allows an attacker to make GET requests on behalf of the server. It is \"blind\" because the attacker cannot see the result of the request. Issue has been patched in eLabFTW 4.0.0."}, {"lang": "es", "value": "eLabFTW es un cuaderno de laboratorio electr\u00f3nico de c\u00f3digo abierto para laboratorios de investigaci\u00f3n. Esta vulnerabilidad permite a un atacante realizar peticiones GET en nombre del servidor. Es \"blind\" porque el atacante no puede visualizar el resultado de la petici\u00f3n. El problema ha sido parcheado en eLabFTW versi\u00f3n 4.0.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:elabftw:elabftw:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.0", "matchCriteriaId": "AEF0E086-47D6-4F5D-BB3F-2A6DE76713F3"}]}]}], "references": [{"url": "https://github.com/elabftw/elabftw/commit/3d2db4d3ad90b0915f29f05aeba41eaaf6a7c726", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/elabftw/elabftw/security/advisories/GHSA-mh6g-62p8-26m4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/elabftw/elabftw/commit/3d2db4d3ad90b0915f29f05aeba41eaaf6a7c726"}}