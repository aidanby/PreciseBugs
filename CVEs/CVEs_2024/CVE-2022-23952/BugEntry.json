{"buggy_code": ["#!/bin/bash\n################################################################################\n# SPDX-License-Identifier: Apache-2.0\n# Copyright 2017 Massachusetts Institute of Technology.\n################################################################################\n\n# Configure the installer here\nKEYLIME_GIT=https://github.com/keylime/keylime.git\nTPM4720_GIT=https://github.com/keylime/tpm4720-keylime.git\nGOLANG_SRC=https://dl.google.com/go\nTPM2TSS_GIT=https://github.com/tpm2-software/tpm2-tss.git\nTPM2TOOLS_GIT=https://github.com/tpm2-software/tpm2-tools.git\nTPM2SIM_SRC=http://sourceforge.net/projects/ibmswtpm2/files/ibmtpm1119.tar.gz/download\nKEYLIME_VER=\"master\"\nTPM4720_VER=\"master\"\nGOLANG_VER=\"1.13.1\"\nTPM2TSS_VER=\"2.0.x\"\nTPM2TOOLS_VER=\"3.X\"\n\n# Minimum version requirements\nMIN_PYTHON_VERSION=\"3.6.7\"\nMIN_PYSETUPTOOLS_VERSION=\"0.7\"\nMIN_PYTORNADO_VERSION=\"4.3\"\nMIN_PYM2CRYPTO_VERSION=\"0.21.1\"\nMIN_PYZMQ_VERSION=\"14.4\"\nMIN_PYCRYPTOGRAPHY_VERSION=\"2.1.4\"\nMIN_GO_VERSION=\"1.11.13\"\n\n# default variables\nCENTOS7_TSS_FLAGS=\nGOPKG=\nNEED_BUILD_TOOLS=0\nNEED_PYTHON_DIR=0\nPYTHON_PIPS=\nTPM2_TOOLS_PKGS=\nNEED_EPEL=0\nPOWERTOOLS=\n\n# Check to ensure version is at least minversion\nversion_checker () {\n    newest=$( printf \"$1\\n$2\" | sort -V | tail -n1 )\n    [[ \"$1\" == \"$2\" || \"$1\" != \"$newest\" ]]\n}\n\nconfirm_force_install () {\n    echo $1\n    read -r -p \"This may introduce security issues, instability or an incomplete install!  Continue? [y/N] \" resp\n    case \"$resp\" in\n        [yY]) return 0 ;;\n        *) return 1 ;;\n    esac\n}\n\n# Determine distibution (using systemd standard `os-release`):\nif [ -f /etc/os-release ]; then\n        . /etc/os-release\n    else\n        echo \"Not able to determine your OS or Distribution\"\n        exit 1\nfi\n\ncase \"$ID\" in\n    debian | ubuntu)\n        echo \"${ID} selected.\"\n        PACKAGE_MGR=$(command -v apt-get)\n        PYTHON_PREIN=\"git patch\"\n        PYTHON_DEPS=\"python3 python3-pip python3-dev python3-setuptools python3-zmq python3-tornado python3-cryptography python3-requests python3-psutil gcc g++ libssl-dev swig python3-yaml python3-gnupg wget\"\n        if [ \"$(uname -m)\" = \"x86_64\" ]; then\n            PYTHON_DEPS+=\" libefivar-dev\"\n        fi\n        BUILD_TOOLS=\"build-essential libtool automake pkg-config m4 libgcrypt20-dev uthash-dev autoconf autoconf-archive libcurl4-gnutls-dev gnulib doxygen libdbus-1-dev uuid-dev libjson-c-dev\"\n        NEED_BUILD_TOOLS=1\n        $PACKAGE_MGR update\n    ;;\n\n    rhel | centos)\n        case \"${VERSION_ID}\" in\n            7*)\n                echo \"${ID} ${VERSION_ID} selected.\"\n                PACKAGE_MGR=$(command -v yum)\n                NEED_EPEL=1\n                PYTHON_PREIN=\"python36 python36-devel python36-setuptools python36-pip git wget patch openssl\"\n                PYTHON_DEPS=\"gcc gcc-c++ openssl-devel swig python36-PyYAML python36-tornado python36-cryptography python36-requests python36-zmq yaml-cpp-devel python3-psutil\"\n                if [ \"$(uname -m)\" = \"x86_64\" ]; then\n                    PYTHON_DEPS+=\" efivar-libs\"\n                fi\n                BUILD_TOOLS=\"openssl-devel file libtool make automake m4 libgcrypt-devel autoconf autoconf-archive libcurl-devel libstdc++-devel uriparser-devel dbus-devel gnulib-devel doxygen libuuid-devel json-c-devel\"\n                NEED_BUILD_TOOLS=1\n                CENTOS7_TSS_FLAGS=\"--enable-esapi=no --disable-doxygen-doc\"\n            ;;\n            8*)\n                echo \"${ID} ${VERSION_ID} selected.\"\n                PACKAGE_MGR=$(command -v dnf)\n                NEED_EPEL=1\n                PYTHON_PREIN=\"python3 python3-devel python3-setuptools python3-pip\"\n                PYTHON_DEPS=\"gcc gcc-c++ openssl-devel python3-yaml python3-requests swig python3-cryptography wget git python3-tornado python3-zmq python3-gnupg python3-psutil\"\n                if [ \"$(uname -m)\" = \"x86_64\" ]; then\n                    PYTHON_DEPS+=\" efivar-libs\"\n                fi\n                BUILD_TOOLS=\"git wget patch libyaml openssl-devel libtool make automake m4 libgcrypt-devel autoconf libcurl-devel libstdc++-devel dbus-devel libuuid-devel json-c-devel\"\n                #TPM2_TOOLS_PKGS=\"tpm2-tss tpm2-tools\" TODO: still on 3.1.1 tpm2_tools\n                NEED_BUILD_TOOLS=1\n                NEED_PYTHON_DIR=1\n                POWERTOOLS=\"--enablerepo=PowerTools install autoconf-archive\"\n            ;;\n            *)\n                echo \"Version ${VERSION_ID} of ${ID} not supported\"\n                exit 1\n        esac\n    ;;\n\n    fedora)\n        echo \"${ID} selected.\"\n        PACKAGE_MGR=$(command -v dnf)\n        PYTHON_PREIN=\"python3 python3-devel python3-setuptools git wget patch\"\n        PYTHON_DEPS=\"python3-pip gcc gcc-c++ openssl-devel swig python3-pyyaml python3-m2crypto  python3-zmq python3-cryptography python3-tornado python3-requests python3-gnupg yaml-cpp-devel procps-ng python3-psutil\"\n        if [ \"$(uname -m)\" = \"x86_64\" ]; then\n            PYTHON_DEPS+=\" efivar-devel\"\n        fi\n        BUILD_TOOLS=\"openssl-devel libtool make automake pkg-config m4 libgcrypt-devel autoconf autoconf-archive libcurl-devel libstdc++-devel uriparser-devel dbus-devel gnulib-devel doxygen libuuid-devel json-c-devel\"\n        GOPKG=\"golang\"\n        if [[ ${VERSION_ID} -ge 30 ]] ; then\n        # if fedora 30 or greater, then using TPM2 tool packages\n            TPM2_TOOLS_PKGS=\"tpm2-tools tpm2-tss tss2\"\n            NEED_BUILD_TOOLS=0\n            HAS_GO_PKG=1\n        else\n            NEED_BUILD_TOOLS=1\n        fi\n    ;;\n\n    *)\n        echo \"${ID} is not currently supported.\"\n        exit 1\nesac\n\n# Command line params\nSTUB=0\nKEYLIME_DIR=\nOPENSSL=0\nTARBALL=0\nTPM_SOCKET=0\nwhile getopts \":shotkmp:\" opt; do\n    case $opt in\n        k) STUB=1 ;;\n        p)\n            KEYLIME_DIR=$OPTARG\n            # Ensure absolute path\n            if [[ \"$KEYLIME_DIR\" != \"/\"* ]] ; then\n                KEYLIME_DIR=`pwd`\"/$KEYLIME_DIR\"\n            fi\n            ;;\n        o) OPENSSL=1 ;;\n        t) TARBALL=1 ;;\n        m) ;;\n        s) TPM_SOCKET=1 NEED_BUILD_TOOLS=1 ;;\n        h)\n            echo \"Usage: $0 [option...]\"\n            echo \"Options:\"\n            echo $'-k \\t\\t\\t\\t Download Keylime (stub installer mode)'\n            echo $'-o \\t\\t\\t\\t Use OpenSSL (vs. CFSSL). NOTE: OpenSSL does not support revocation'\n            echo $'-t \\t\\t\\t\\t Create tarball with keylime_agent'\n            echo $'-m \\t\\t\\t\\t Use modern TPM 2.0 libraries; this is the default'\n            echo $'-s \\t\\t\\t\\t Install & use a Software TPM emulator (development only)'\n            echo $'-p PATH \\t\\t\\t Use PATH as Keylime path'\n            echo $'-h \\t\\t\\t\\t This help info'\n            exit\n            ;;\n    esac\ndone\n\nif [[ $EUID -ne 0 ]]; then\n   echo -e \"This script must be run as root in order to install keylime and its dependencies\" 1>&2\n   exit 1\nfi\n\n\n# Keylime python-related dependencies\necho\necho \"==================================================================================\"\necho $'\\t\\t\\tInstalling python & crypto libs'\necho \"==================================================================================\"\nif [[ \"$NEED_EPEL\" -eq \"1\" ]] ; then\n\t$PACKAGE_MGR -y install epel-release\n\tif [[ $? > 0 ]] ; then\n    \techo \"ERROR: EPEL package failed to install properly!\"\n    \texit 1\n\tfi\nfi\n\n$PACKAGE_MGR install -y $PYTHON_PREIN\nif [[ $? > 0 ]] ; then\n    echo \"ERROR: Package(s) failed to install properly!\"\n    exit 1\nfi\n$PACKAGE_MGR install -y $PYTHON_DEPS\nif [[ $? > 0 ]] ; then\n    echo \"ERROR: Package(s) failed to install properly!\"\n    exit 1\nfi\nif [[ ! -z $PYTHON_PIPS ]] ; then\n    pip3 install $PYTHON_PIPS\nfi\n\n\n# Ensure Python is installed\nif [[ ! `command -v python3` ]] ; then\n    echo \"ERROR: Python failed to install properly!\"\n    exit 1\nelse\n    # Ensure Python installed meets min requirements\n    py_ver=$(python3 -c 'import platform; print(platform.python_version())')\n    if ! $(version_checker \"$MIN_PYTHON_VERSION\" \"$py_ver\"); then\n        confirm_force_install \"ERROR: Minimum Python version is $MIN_PYTHON_VERSION, but $py_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python setuptools installed meets min requirements\n    pyset_ver=$(python3 -c 'import setuptools; print(setuptools.__version__)')\n    if ! $(version_checker \"$MIN_PYSETUPTOOLS_VERSION\" \"$pyset_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-setuptools version is $MIN_PYSETUPTOOLS_VERSION, but $pyset_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python tornado installed meets min requirements\n    pynado_ver=$(python3 -c 'import tornado; print(tornado.version)')\n    if ! $(version_checker \"$MIN_PYTORNADO_VERSION\" \"$pynado_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-tornado version is $MIN_PYTORNADO_VERSION, but $pynado_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python M2Crypto installed meets min requirements\n    pym2_ver=$(python3 -c 'import M2Crypto; print(M2Crypto.version)')\n    if ! $(version_checker \"$MIN_PYM2CRYPTO_VERSION\" \"$pym2_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-M2Crypto version is $MIN_PYM2CRYPTO_VERSION, but $pym2_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python ZeroMQ installed meets min requirements\n    pyzmq_ver=$(python3 -c 'import zmq; print(zmq.__version__)')\n    if ! $(version_checker \"$MIN_PYZMQ_VERSION\" \"$pyzmq_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-zmq version is $MIN_PYZMQ_VERSION, but $pyzmq_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python cryptography installed meets min requirements\n    pycrypto_ver=$(python3 -c 'import cryptography; print(cryptography.__version__)')\n    if ! $(version_checker \"$MIN_PYCRYPTOGRAPHY_VERSION\" \"$pycrypto_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-cryptography version is $MIN_PYCRYPTOGRAPHY_VERSION, but $pycrypto_ver is installed!\" || exit 1\n    fi\n\nfi\n\n\n# Download Keylime (if necessary)\nif [[ \"$STUB\" -eq \"1\" ]] ; then\n    if [[ -z \"$KEYLIME_DIR\" ]] ; then\n        KEYLIME_DIR=`pwd`\n        KEYLIME_DIR+=\"/keylime\"\n        if [[ ! -d \"$KEYLIME_DIR\" ]] ; then\n            mkdir -p $KEYLIME_DIR\n        fi\n    fi\n\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tDownloading Keylime'\n    echo \"==================================================================================\"\n    git clone $KEYLIME_GIT $KEYLIME_DIR\n    pushd $KEYLIME_DIR\n    git checkout $KEYLIME_VER\n    popd\nfi\n\n\n# If all else fails, assume they already have Keylime (we're in it!)\nif [[ -z \"$KEYLIME_DIR\" ]] ; then\n    KEYLIME_DIR=`pwd`\nfi\n\n\n# Sanity check\nif [[ ! -d \"$KEYLIME_DIR/scripts\" || ! -d \"$KEYLIME_DIR/keylime\" ]] ; then\n    echo \"ERROR: Invalid keylime directory at $KEYLIME_DIR\"\n    exit 1\nfi\n\n\necho \"INFO: Using Keylime directory: $KEYLIME_DIR\"\n\n\n# OpenSSL or cfssl?\nif [[ \"$OPENSSL\" -eq \"0\" ]] ; then\n    # Pull in correct PATH under sudo (mainly for secure_path)\n    if [[ -r \"/etc/profile.d/go.sh\" ]]; then\n        source \"/etc/profile.d/go.sh\"\n    fi\n\n    if [[ \"$HAS_GO_PKG\" -eq \"1\" ]] ; then\n        $PACKAGE_MGR install -y $GOPKG\n        if [[ $? > 0 ]] ; then\n            echo \"ERROR: Package(s) failed to install properly!\"\n            exit 1\n        fi\n    fi\n\n    if [[ ! `command -v go` ]] ; then\n        # Install golang (if not already)\n        echo\n        echo \"==================================================================================\"\n        echo $'\\t\\t\\tInstalling golang (for cfssl)'\n        echo \"==================================================================================\"\n\n        # Where should golang's root be?\n        # NOTE: If this is changed, golang requires GOROOT to be set!\n        GO_INSTALL_TARGET=\"/usr/local\"\n\n        # Don't risk clobbering anything if there are traces of golang already on the system\n        if [[ -d \"$GO_INSTALL_TARGET/go\" ]] ; then\n            # They have an install (just not on PATH?)\n            echo \"The '$GO_INSTALL_TARGET/go' directory already exists.  Aborting installation attempt.\"\n            exit 1\n        fi\n\n        # Figure out which version of golang to download\n        PLATFORM_STR=$( uname -s )-$( uname -m )\n        case \"$PLATFORM_STR\" in\n            Linux-x86_64) GOFILE_STR=\"go$GOLANG_VER.linux-amd64.tar.gz\" ;;\n            Linux-i686) GOFILE_STR=\"go$GOLANG_VER.linux-386.tar.gz\" ;;\n            Linux-i386) GOFILE_STR=\"go$GOLANG_VER.linux-386.tar.gz\" ;;\n            Darwin-x86_64) GOFILE_STR=\"go$GOLANG_VER.darwin-amd64.tar.gz\" ;;\n            *)\n                echo \"ERROR: Cannot install golang for your platform ($PLATFORM_STR)!\"\n                echo \"Please manually install golang $MIN_GO_VERSION or higher.\"\n                exit 1\n                ;;\n        esac\n\n        # Download and unpack/install golang\n        TMPFILE=`mktemp -t go.XXXXXXXXXX.tar.gz` || exit 1\n        wget \"$GOLANG_SRC/$GOFILE_STR\" -O $TMPFILE\n        if [[ $? -ne 0 ]] ; then\n            echo \"ERROR: Failed to download golang!\"\n            exit 1\n        fi\n        tar -C \"$GO_INSTALL_TARGET\" -xzf $TMPFILE\n\n        # Set up working directory and env vars (+persistence)\n        mkdir -p $HOME/go\n        export GOPATH=$HOME/go\n        export PATH=$PATH:$GO_INSTALL_TARGET/go/bin:$GOPATH/bin:/usr/local/bin\n        {\n            echo $'\\n# Golang-related settings'\n            echo 'export GOPATH=$HOME/go'\n            echo \"export PATH=\\$PATH:$GO_INSTALL_TARGET/go/bin:\\$GOPATH/bin:/usr/local/bin\"\n        } >> \"$HOME/.bashrc\"\n        if [[ -d \"/etc/profile.d\" ]]; then\n            {\n                echo $'\\n# Golang-related settings'\n                echo \"export PATH=\\$PATH:$GO_INSTALL_TARGET/go/bin:/usr/local/bin\"\n            } >> \"/etc/profile.d/go.sh\"\n        fi\n    fi\n\n    if [[ -z \"$GOPATH\" ]] ; then\n        # GOPATH is not set up correctly\n        echo \"ERROR: GOPATH is not set up correctly!  This is required for cfssl.\"\n        echo \"Do you want to setup a default GOPATH with the following:\"\n        echo \" mkdir -p $HOME/go && echo 'export GOPATH=$HOME/go' >> $HOME/.bashrc && source $HOME/.bashrc\"\n        read -r -p \"Proceed? [y/N] \" resp\n        case \"$resp\" in\n            [yY]) mkdir -p $HOME/go && echo 'export GOPATH=$HOME/go' >> $HOME/.bashrc && source $HOME/.bashrc ;;\n            *) exit 1 ;;\n        esac\n    fi\n\n    # Ensure Go installed meets min requirements\n    go_ver=$(go version | cut -d\" \" -f3 | sed \"s/go//\")\n    if ! $(version_checker \"$MIN_GO_VERSION\" \"$go_ver\"); then\n        confirm_force_install \"ERROR: Minimum Go version is $MIN_GO_VERSION, but $go_ver is installed!\" || exit 1\n    fi\n\n    if [[ ! `command -v cfssl` ]] ; then\n        # Install cfssl (if not already)\n        echo\n        echo \"==================================================================================\"\n        echo $'\\t\\t\\t\\tInstalling cfssl'\n        echo \"==================================================================================\"\n        go get -v -u github.com/cloudflare/cfssl/cmd/cfssl\n        if [[ $? -ne 0 ]] ; then\n            echo \"ERROR: Failed to install cfssl!\"\n            exit 1\n        fi\n        install -c $GOPATH/bin/cfssl /usr/local/bin/cfssl\n    fi\nfi\n\n\n# Prepare to build TPM libraries\nif [[ \"$NEED_BUILD_TOOLS\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\tInstalling TPM libraries and build tools'\n    echo \"==================================================================================\"\n    # Create temp dir for building tpm\n    TMPDIR=`mktemp -d` || exit 1\n    echo \"INFO: Using temp tpm directory: $TMPDIR\"\n\n    $PACKAGE_MGR -y install $BUILD_TOOLS\n    if [[ $? > 0 ]] ; then\n        echo \"ERROR: Package(s) failed to install properly!\"\n        exit 1\n    fi\n\n    if [[ -n \"${POWERTOOLS}\" ]] ; then\n    \t$PACKAGE_MGR -y $POWERTOOLS\n    \tif [[ $? > 0 ]] ; then\n        \techo \"ERROR: Package(s) failed to install properly!\"\n        \texit 1\n    \tfi\n    fi\n\n    mkdir -p $TMPDIR/tpm\n    cd $TMPDIR/tpm\nfi\n\nif [[ ! -z $TPM2_TOOLS_PKGS ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tInstall tpm2-tools packages'\n    echo \"==================================================================================\"\n    $PACKAGE_MGR install -y $TPM2_TOOLS_PKGS\n    if [[ $? > 0 ]] ; then\n        echo \"ERROR: Package(s) failed to install properly!\"\n        exit 1\n    fi\nelse\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install tpm2-tss'\n    echo \"==================================================================================\"\n    git clone $TPM2TSS_GIT tpm2-tss\n    pushd tpm2-tss\n    git checkout $TPM2TSS_VER\n    ./bootstrap\n    if [[ -n $CENTOS7_TSS_FLAGS ]] ; then\n        export PKG_CONFIG_PATH=/usr/lib/pkgconfig/\n    fi\n    ./configure --prefix=/usr $CENTOS7_TSS_FLAGS\n    make\n    make install\n    ldconfig\n    popd # tpm\n\n#        if [[ ! -f /usr/lib/libtss.so ]] ; then\n#            echo \"ERROR: tpm2-tss failed to build and install properly!\"\n#            exit 1\n#        fi\n\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install tpm2-tools'\n    echo \"==================================================================================\"\n    git clone $TPM2TOOLS_GIT tpm2-tools\n    pushd tpm2-tools\n    git checkout $TPM2TOOLS_VER\n    ./bootstrap\n    if [[ -n $CENTOS7_TSS_FLAGS ]] ; then\n        export SAPI_CFLAGS=' '\n        export SAPI_LIBS='-ltss2-sys -L/usr/lib/'\n    fi\n    ./configure --prefix=/usr/local\n    make\n    make install\n    popd # tpm\nfi\n\nif [[ -z \"$(command -v tpm2_getrandom)\" ]] ; then\n    echo \"ERROR: Failed to build tpm2_tss/tools!\"\n    exit 1\nfi\n\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install TPM2 simulator'\n    echo \"==================================================================================\"\n\n    # Download and unpack swtpm2\n    TMPFILE=`mktemp -t swtpm2.XXXXXXXXXX.tar.gz` || exit 1\n    wget \"$TPM2SIM_SRC\" -O $TMPFILE\n    if [[ $? -ne 0 ]] ; then\n        echo \"ERROR: Failed to download TPM2 simulator!\"\n        exit 1\n    fi\n    mkdir swtpm2\n    tar -C ./swtpm2 -xzf $TMPFILE\n    pushd swtpm2\n\n    # Begin building and installing swtpm2\n    pushd src\n    make\n    install -c tpm_server /usr/local/bin/tpm_server\n\n    popd # tpm/swtpm2\nfi\n\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    pushd scripts\n\n    # Ensure everything is executable\n    chmod +x init_tpm_server\n    chmod +x tpm_serverd\n\n    # Install scripts\n    install -c tpm_serverd /usr/local/bin/tpm_serverd\n    install -c init_tpm_server /usr/local/bin/init_tpm_server\n\n    # Clear TPM on first use\n    init_tpm_server\nfi\n\n\n# Install keylime\necho\necho \"==================================================================================\"\necho $'\\t\\t\\t\\tInstall Keylime'\necho \"==================================================================================\"\ncd $KEYLIME_DIR\nif [[ \"$NEED_PYTHON_DIR\" -eq \"1\" ]] ; then\n    mkdir -p /usr/local/lib/python3.6/site-packages/\nfi\npython3 -m pip install . -r requirements.txt\n\nif [[ -f \"/etc/keylime.conf\" ]] ; then\n    if [[ $(diff -N \"/etc/keylime.conf\" \"keylime.conf\") ]] ; then\n        echo \"Modified keylime.conf found in /etc/, creating /etc/keylime.conf.new instead\"\n        cp keylime.conf /etc/keylime.conf.new\n    fi\nelse\n    echo \"Installing keylime.conf to /etc/\"\n    cp -n keylime.conf /etc/\nfi\n\necho\necho \"==================================================================================\"\necho $'\\t\\t\\t\\tCheck for tpm_cert_store'\necho \"==================================================================================\"\nif [ ! -d \"/var/lib/keylime/tpm_cert_store\" ]; then\n  echo \"Creating new tpm_cert_store\"\n  mkdir -p /var/lib/keylime\n  cp -r $KEYLIME_DIR/tpm_cert_store /var/lib/keylime/tpm_cert_store\nelse\n  echo \"Updating existing cert store\"\n  cp -n $KEYLIME_DIR/tpm_cert_store/* /var/lib/keylime/tpm_cert_store/\nfi\n\nif [[ \"$OPENSSL\" -eq \"0\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\tSwitching config to cfssl'\n    echo \"==================================================================================\"\n    sed -i 's/ca_implementation = openssl/ca_implementation = cfssl/' /etc/keylime.conf\nfi\n\n# Run agent packager (tarball)\nif [[ \"$TARBALL\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tGenerate agent tarball'\n    echo \"==================================================================================\"\n    cd $KEYLIME_DIR/keylime\n    ./make_agent_bundle_tarball.sh \"\"\nfi\n\n# don't start the emulator until after keylime is installed\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tStart TPM emulator'\n    echo \"==================================================================================\"\n    # starts emulator and IMA stub at boot\n    cd $KEYLIME_DIR/ima_stub_service\n    ./installer.sh\n    if [[ -n \"$(command -v service)\" ]] ; then\n        service tpm_emulator restart\n    fi\n\n    echo \"==================================================================================\"\n    echo $'\\tWARNING: Please set the env var for accessing the TPM:'\n    echo $'\\tTPM2TOOLS_TCTI=\"mssim:port=2321\"'\n    echo \"==================================================================================\"\n\n    # disable ek cert checking\n    sed -i 's/require_ek_cert = True/require_ek_cert = False/' /etc/keylime.conf\nelse\n    # Warn that we don't use abrmd anymore.\n    echo \"==================================================================================\"\n    echo $'\\tWARNING: Keylime uses /dev/tpmrm0 by default.'\n    echo $'\\t         If you want to use abrmd set:'\n    echo $'\\tTPM2TOOLS_TCTI==\"tabrmd:bus_name=com.intel.tss2.Tabrmd\"'\n    echo \"==================================================================================\"\nfi\n"], "fixing_code": ["#!/bin/bash\n################################################################################\n# SPDX-License-Identifier: Apache-2.0\n# Copyright 2017 Massachusetts Institute of Technology.\n################################################################################\n\n# Configure the installer here\nKEYLIME_GIT=https://github.com/keylime/keylime.git\nTPM4720_GIT=https://github.com/keylime/tpm4720-keylime.git\nGOLANG_SRC=https://dl.google.com/go\nTPM2TSS_GIT=https://github.com/tpm2-software/tpm2-tss.git\nTPM2TOOLS_GIT=https://github.com/tpm2-software/tpm2-tools.git\nTPM2SIM_SRC=http://sourceforge.net/projects/ibmswtpm2/files/ibmtpm1119.tar.gz/download\nKEYLIME_VER=\"master\"\nTPM4720_VER=\"master\"\nGOLANG_VER=\"1.13.1\"\nTPM2TSS_VER=\"2.0.x\"\nTPM2TOOLS_VER=\"3.X\"\n\n# Minimum version requirements\nMIN_PYTHON_VERSION=\"3.6.7\"\nMIN_PYSETUPTOOLS_VERSION=\"0.7\"\nMIN_PYTORNADO_VERSION=\"4.3\"\nMIN_PYM2CRYPTO_VERSION=\"0.21.1\"\nMIN_PYZMQ_VERSION=\"14.4\"\nMIN_PYCRYPTOGRAPHY_VERSION=\"2.1.4\"\nMIN_GO_VERSION=\"1.11.13\"\n\n# default variables\nCENTOS7_TSS_FLAGS=\nGOPKG=\nNEED_BUILD_TOOLS=0\nNEED_PYTHON_DIR=0\nPYTHON_PIPS=\nTPM2_TOOLS_PKGS=\nNEED_EPEL=0\nPOWERTOOLS=\n\n# Check to ensure version is at least minversion\nversion_checker () {\n    newest=$( printf \"$1\\n$2\" | sort -V | tail -n1 )\n    [[ \"$1\" == \"$2\" || \"$1\" != \"$newest\" ]]\n}\n\nconfirm_force_install () {\n    echo $1\n    read -r -p \"This may introduce security issues, instability or an incomplete install!  Continue? [y/N] \" resp\n    case \"$resp\" in\n        [yY]) return 0 ;;\n        *) return 1 ;;\n    esac\n}\n\n# Determine distibution (using systemd standard `os-release`):\nif [ -f /etc/os-release ]; then\n        . /etc/os-release\n    else\n        echo \"Not able to determine your OS or Distribution\"\n        exit 1\nfi\n\ncase \"$ID\" in\n    debian | ubuntu)\n        echo \"${ID} selected.\"\n        PACKAGE_MGR=$(command -v apt-get)\n        PYTHON_PREIN=\"git patch\"\n        PYTHON_DEPS=\"python3 python3-pip python3-dev python3-setuptools python3-zmq python3-tornado python3-cryptography python3-requests python3-psutil gcc g++ libssl-dev swig python3-yaml python3-gnupg wget\"\n        if [ \"$(uname -m)\" = \"x86_64\" ]; then\n            PYTHON_DEPS+=\" libefivar-dev\"\n        fi\n        BUILD_TOOLS=\"build-essential libtool automake pkg-config m4 libgcrypt20-dev uthash-dev autoconf autoconf-archive libcurl4-gnutls-dev gnulib doxygen libdbus-1-dev uuid-dev libjson-c-dev\"\n        NEED_BUILD_TOOLS=1\n        $PACKAGE_MGR update\n    ;;\n\n    rhel | centos)\n        case \"${VERSION_ID}\" in\n            7*)\n                echo \"${ID} ${VERSION_ID} selected.\"\n                PACKAGE_MGR=$(command -v yum)\n                NEED_EPEL=1\n                PYTHON_PREIN=\"python36 python36-devel python36-setuptools python36-pip git wget patch openssl\"\n                PYTHON_DEPS=\"gcc gcc-c++ openssl-devel swig python36-PyYAML python36-tornado python36-cryptography python36-requests python36-zmq yaml-cpp-devel python3-psutil\"\n                if [ \"$(uname -m)\" = \"x86_64\" ]; then\n                    PYTHON_DEPS+=\" efivar-libs\"\n                fi\n                BUILD_TOOLS=\"openssl-devel file libtool make automake m4 libgcrypt-devel autoconf autoconf-archive libcurl-devel libstdc++-devel uriparser-devel dbus-devel gnulib-devel doxygen libuuid-devel json-c-devel\"\n                NEED_BUILD_TOOLS=1\n                CENTOS7_TSS_FLAGS=\"--enable-esapi=no --disable-doxygen-doc\"\n            ;;\n            8*)\n                echo \"${ID} ${VERSION_ID} selected.\"\n                PACKAGE_MGR=$(command -v dnf)\n                NEED_EPEL=1\n                PYTHON_PREIN=\"python3 python3-devel python3-setuptools python3-pip\"\n                PYTHON_DEPS=\"gcc gcc-c++ openssl-devel python3-yaml python3-requests swig python3-cryptography wget git python3-tornado python3-zmq python3-gnupg python3-psutil\"\n                if [ \"$(uname -m)\" = \"x86_64\" ]; then\n                    PYTHON_DEPS+=\" efivar-libs\"\n                fi\n                BUILD_TOOLS=\"git wget patch libyaml openssl-devel libtool make automake m4 libgcrypt-devel autoconf libcurl-devel libstdc++-devel dbus-devel libuuid-devel json-c-devel\"\n                #TPM2_TOOLS_PKGS=\"tpm2-tss tpm2-tools\" TODO: still on 3.1.1 tpm2_tools\n                NEED_BUILD_TOOLS=1\n                NEED_PYTHON_DIR=1\n                POWERTOOLS=\"--enablerepo=PowerTools install autoconf-archive\"\n            ;;\n            *)\n                echo \"Version ${VERSION_ID} of ${ID} not supported\"\n                exit 1\n        esac\n    ;;\n\n    fedora)\n        echo \"${ID} selected.\"\n        PACKAGE_MGR=$(command -v dnf)\n        PYTHON_PREIN=\"python3 python3-devel python3-setuptools git wget patch\"\n        PYTHON_DEPS=\"python3-pip gcc gcc-c++ openssl-devel swig python3-pyyaml python3-m2crypto  python3-zmq python3-cryptography python3-tornado python3-requests python3-gnupg yaml-cpp-devel procps-ng python3-psutil\"\n        if [ \"$(uname -m)\" = \"x86_64\" ]; then\n            PYTHON_DEPS+=\" efivar-devel\"\n        fi\n        BUILD_TOOLS=\"openssl-devel libtool make automake pkg-config m4 libgcrypt-devel autoconf autoconf-archive libcurl-devel libstdc++-devel uriparser-devel dbus-devel gnulib-devel doxygen libuuid-devel json-c-devel\"\n        GOPKG=\"golang\"\n        if [[ ${VERSION_ID} -ge 30 ]] ; then\n        # if fedora 30 or greater, then using TPM2 tool packages\n            TPM2_TOOLS_PKGS=\"tpm2-tools tpm2-tss tss2\"\n            NEED_BUILD_TOOLS=0\n            HAS_GO_PKG=1\n        else\n            NEED_BUILD_TOOLS=1\n        fi\n    ;;\n\n    *)\n        echo \"${ID} is not currently supported.\"\n        exit 1\nesac\n\n# Command line params\nSTUB=0\nKEYLIME_DIR=\nOPENSSL=0\nTARBALL=0\nTPM_SOCKET=0\nwhile getopts \":shotkmp:\" opt; do\n    case $opt in\n        k) STUB=1 ;;\n        p)\n            KEYLIME_DIR=$OPTARG\n            # Ensure absolute path\n            if [[ \"$KEYLIME_DIR\" != \"/\"* ]] ; then\n                KEYLIME_DIR=`pwd`\"/$KEYLIME_DIR\"\n            fi\n            ;;\n        o) OPENSSL=1 ;;\n        t) TARBALL=1 ;;\n        m) ;;\n        s) TPM_SOCKET=1 NEED_BUILD_TOOLS=1 ;;\n        h)\n            echo \"Usage: $0 [option...]\"\n            echo \"Options:\"\n            echo $'-k \\t\\t\\t\\t Download Keylime (stub installer mode)'\n            echo $'-o \\t\\t\\t\\t Use OpenSSL (vs. CFSSL). NOTE: OpenSSL does not support revocation'\n            echo $'-t \\t\\t\\t\\t Create tarball with keylime_agent'\n            echo $'-m \\t\\t\\t\\t Use modern TPM 2.0 libraries; this is the default'\n            echo $'-s \\t\\t\\t\\t Install & use a Software TPM emulator (development only)'\n            echo $'-p PATH \\t\\t\\t Use PATH as Keylime path'\n            echo $'-h \\t\\t\\t\\t This help info'\n            exit\n            ;;\n    esac\ndone\n\nif [[ $EUID -ne 0 ]]; then\n   echo -e \"This script must be run as root in order to install keylime and its dependencies\" 1>&2\n   exit 1\nfi\n\n\n# Keylime python-related dependencies\necho\necho \"==================================================================================\"\necho $'\\t\\t\\tInstalling python & crypto libs'\necho \"==================================================================================\"\nif [[ \"$NEED_EPEL\" -eq \"1\" ]] ; then\n\t$PACKAGE_MGR -y install epel-release\n\tif [[ $? > 0 ]] ; then\n    \techo \"ERROR: EPEL package failed to install properly!\"\n    \texit 1\n\tfi\nfi\n\n$PACKAGE_MGR install -y $PYTHON_PREIN\nif [[ $? > 0 ]] ; then\n    echo \"ERROR: Package(s) failed to install properly!\"\n    exit 1\nfi\n$PACKAGE_MGR install -y $PYTHON_DEPS\nif [[ $? > 0 ]] ; then\n    echo \"ERROR: Package(s) failed to install properly!\"\n    exit 1\nfi\nif [[ ! -z $PYTHON_PIPS ]] ; then\n    pip3 install $PYTHON_PIPS\nfi\n\n\n# Ensure Python is installed\nif [[ ! `command -v python3` ]] ; then\n    echo \"ERROR: Python failed to install properly!\"\n    exit 1\nelse\n    # Ensure Python installed meets min requirements\n    py_ver=$(python3 -c 'import platform; print(platform.python_version())')\n    if ! $(version_checker \"$MIN_PYTHON_VERSION\" \"$py_ver\"); then\n        confirm_force_install \"ERROR: Minimum Python version is $MIN_PYTHON_VERSION, but $py_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python setuptools installed meets min requirements\n    pyset_ver=$(python3 -c 'import setuptools; print(setuptools.__version__)')\n    if ! $(version_checker \"$MIN_PYSETUPTOOLS_VERSION\" \"$pyset_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-setuptools version is $MIN_PYSETUPTOOLS_VERSION, but $pyset_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python tornado installed meets min requirements\n    pynado_ver=$(python3 -c 'import tornado; print(tornado.version)')\n    if ! $(version_checker \"$MIN_PYTORNADO_VERSION\" \"$pynado_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-tornado version is $MIN_PYTORNADO_VERSION, but $pynado_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python M2Crypto installed meets min requirements\n    pym2_ver=$(python3 -c 'import M2Crypto; print(M2Crypto.version)')\n    if ! $(version_checker \"$MIN_PYM2CRYPTO_VERSION\" \"$pym2_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-M2Crypto version is $MIN_PYM2CRYPTO_VERSION, but $pym2_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python ZeroMQ installed meets min requirements\n    pyzmq_ver=$(python3 -c 'import zmq; print(zmq.__version__)')\n    if ! $(version_checker \"$MIN_PYZMQ_VERSION\" \"$pyzmq_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-zmq version is $MIN_PYZMQ_VERSION, but $pyzmq_ver is installed!\" || exit 1\n    fi\n\n    # Ensure Python cryptography installed meets min requirements\n    pycrypto_ver=$(python3 -c 'import cryptography; print(cryptography.__version__)')\n    if ! $(version_checker \"$MIN_PYCRYPTOGRAPHY_VERSION\" \"$pycrypto_ver\"); then\n        confirm_force_install \"ERROR: Minimum python-cryptography version is $MIN_PYCRYPTOGRAPHY_VERSION, but $pycrypto_ver is installed!\" || exit 1\n    fi\n\nfi\n\n\n# Download Keylime (if necessary)\nif [[ \"$STUB\" -eq \"1\" ]] ; then\n    if [[ -z \"$KEYLIME_DIR\" ]] ; then\n        KEYLIME_DIR=`pwd`\n        KEYLIME_DIR+=\"/keylime\"\n        if [[ ! -d \"$KEYLIME_DIR\" ]] ; then\n            mkdir -p $KEYLIME_DIR\n        fi\n    fi\n\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tDownloading Keylime'\n    echo \"==================================================================================\"\n    git clone $KEYLIME_GIT $KEYLIME_DIR\n    pushd $KEYLIME_DIR\n    git checkout $KEYLIME_VER\n    popd\nfi\n\n\n# If all else fails, assume they already have Keylime (we're in it!)\nif [[ -z \"$KEYLIME_DIR\" ]] ; then\n    KEYLIME_DIR=`pwd`\nfi\n\n\n# Sanity check\nif [[ ! -d \"$KEYLIME_DIR/scripts\" || ! -d \"$KEYLIME_DIR/keylime\" ]] ; then\n    echo \"ERROR: Invalid keylime directory at $KEYLIME_DIR\"\n    exit 1\nfi\n\n\necho \"INFO: Using Keylime directory: $KEYLIME_DIR\"\n\n\n# OpenSSL or cfssl?\nif [[ \"$OPENSSL\" -eq \"0\" ]] ; then\n    # Pull in correct PATH under sudo (mainly for secure_path)\n    if [[ -r \"/etc/profile.d/go.sh\" ]]; then\n        source \"/etc/profile.d/go.sh\"\n    fi\n\n    if [[ \"$HAS_GO_PKG\" -eq \"1\" ]] ; then\n        $PACKAGE_MGR install -y $GOPKG\n        if [[ $? > 0 ]] ; then\n            echo \"ERROR: Package(s) failed to install properly!\"\n            exit 1\n        fi\n    fi\n\n    if [[ ! `command -v go` ]] ; then\n        # Install golang (if not already)\n        echo\n        echo \"==================================================================================\"\n        echo $'\\t\\t\\tInstalling golang (for cfssl)'\n        echo \"==================================================================================\"\n\n        # Where should golang's root be?\n        # NOTE: If this is changed, golang requires GOROOT to be set!\n        GO_INSTALL_TARGET=\"/usr/local\"\n\n        # Don't risk clobbering anything if there are traces of golang already on the system\n        if [[ -d \"$GO_INSTALL_TARGET/go\" ]] ; then\n            # They have an install (just not on PATH?)\n            echo \"The '$GO_INSTALL_TARGET/go' directory already exists.  Aborting installation attempt.\"\n            exit 1\n        fi\n\n        # Figure out which version of golang to download\n        PLATFORM_STR=$( uname -s )-$( uname -m )\n        case \"$PLATFORM_STR\" in\n            Linux-x86_64) GOFILE_STR=\"go$GOLANG_VER.linux-amd64.tar.gz\" ;;\n            Linux-i686) GOFILE_STR=\"go$GOLANG_VER.linux-386.tar.gz\" ;;\n            Linux-i386) GOFILE_STR=\"go$GOLANG_VER.linux-386.tar.gz\" ;;\n            Darwin-x86_64) GOFILE_STR=\"go$GOLANG_VER.darwin-amd64.tar.gz\" ;;\n            *)\n                echo \"ERROR: Cannot install golang for your platform ($PLATFORM_STR)!\"\n                echo \"Please manually install golang $MIN_GO_VERSION or higher.\"\n                exit 1\n                ;;\n        esac\n\n        # Download and unpack/install golang\n        TMPFILE=`mktemp -t go.XXXXXXXXXX.tar.gz` || exit 1\n        wget \"$GOLANG_SRC/$GOFILE_STR\" -O $TMPFILE\n        if [[ $? -ne 0 ]] ; then\n            echo \"ERROR: Failed to download golang!\"\n            exit 1\n        fi\n        tar -C \"$GO_INSTALL_TARGET\" -xzf $TMPFILE\n\n        # Set up working directory and env vars (+persistence)\n        mkdir -p $HOME/go\n        export GOPATH=$HOME/go\n        export PATH=$PATH:$GO_INSTALL_TARGET/go/bin:$GOPATH/bin:/usr/local/bin\n        {\n            echo $'\\n# Golang-related settings'\n            echo 'export GOPATH=$HOME/go'\n            echo \"export PATH=\\$PATH:$GO_INSTALL_TARGET/go/bin:\\$GOPATH/bin:/usr/local/bin\"\n        } >> \"$HOME/.bashrc\"\n        if [[ -d \"/etc/profile.d\" ]]; then\n            {\n                echo $'\\n# Golang-related settings'\n                echo \"export PATH=\\$PATH:$GO_INSTALL_TARGET/go/bin:/usr/local/bin\"\n            } >> \"/etc/profile.d/go.sh\"\n        fi\n    fi\n\n    if [[ -z \"$GOPATH\" ]] ; then\n        # GOPATH is not set up correctly\n        echo \"ERROR: GOPATH is not set up correctly!  This is required for cfssl.\"\n        echo \"Do you want to setup a default GOPATH with the following:\"\n        echo \" mkdir -p $HOME/go && echo 'export GOPATH=$HOME/go' >> $HOME/.bashrc && source $HOME/.bashrc\"\n        read -r -p \"Proceed? [y/N] \" resp\n        case \"$resp\" in\n            [yY]) mkdir -p $HOME/go && echo 'export GOPATH=$HOME/go' >> $HOME/.bashrc && source $HOME/.bashrc ;;\n            *) exit 1 ;;\n        esac\n    fi\n\n    # Ensure Go installed meets min requirements\n    go_ver=$(go version | cut -d\" \" -f3 | sed \"s/go//\")\n    if ! $(version_checker \"$MIN_GO_VERSION\" \"$go_ver\"); then\n        confirm_force_install \"ERROR: Minimum Go version is $MIN_GO_VERSION, but $go_ver is installed!\" || exit 1\n    fi\n\n    if [[ ! `command -v cfssl` ]] ; then\n        # Install cfssl (if not already)\n        echo\n        echo \"==================================================================================\"\n        echo $'\\t\\t\\t\\tInstalling cfssl'\n        echo \"==================================================================================\"\n        go get -v -u github.com/cloudflare/cfssl/cmd/cfssl\n        if [[ $? -ne 0 ]] ; then\n            echo \"ERROR: Failed to install cfssl!\"\n            exit 1\n        fi\n        install -c $GOPATH/bin/cfssl /usr/local/bin/cfssl\n    fi\nfi\n\n\n# Prepare to build TPM libraries\nif [[ \"$NEED_BUILD_TOOLS\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\tInstalling TPM libraries and build tools'\n    echo \"==================================================================================\"\n    # Create temp dir for building tpm\n    TMPDIR=`mktemp -d` || exit 1\n    echo \"INFO: Using temp tpm directory: $TMPDIR\"\n\n    $PACKAGE_MGR -y install $BUILD_TOOLS\n    if [[ $? > 0 ]] ; then\n        echo \"ERROR: Package(s) failed to install properly!\"\n        exit 1\n    fi\n\n    if [[ -n \"${POWERTOOLS}\" ]] ; then\n    \t$PACKAGE_MGR -y $POWERTOOLS\n    \tif [[ $? > 0 ]] ; then\n        \techo \"ERROR: Package(s) failed to install properly!\"\n        \texit 1\n    \tfi\n    fi\n\n    mkdir -p $TMPDIR/tpm\n    cd $TMPDIR/tpm\nfi\n\nif [[ ! -z $TPM2_TOOLS_PKGS ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tInstall tpm2-tools packages'\n    echo \"==================================================================================\"\n    $PACKAGE_MGR install -y $TPM2_TOOLS_PKGS\n    if [[ $? > 0 ]] ; then\n        echo \"ERROR: Package(s) failed to install properly!\"\n        exit 1\n    fi\nelse\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install tpm2-tss'\n    echo \"==================================================================================\"\n    git clone $TPM2TSS_GIT tpm2-tss\n    pushd tpm2-tss\n    git checkout $TPM2TSS_VER\n    ./bootstrap\n    if [[ -n $CENTOS7_TSS_FLAGS ]] ; then\n        export PKG_CONFIG_PATH=/usr/lib/pkgconfig/\n    fi\n    ./configure --prefix=/usr $CENTOS7_TSS_FLAGS\n    make\n    make install\n    ldconfig\n    popd # tpm\n\n#        if [[ ! -f /usr/lib/libtss.so ]] ; then\n#            echo \"ERROR: tpm2-tss failed to build and install properly!\"\n#            exit 1\n#        fi\n\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install tpm2-tools'\n    echo \"==================================================================================\"\n    git clone $TPM2TOOLS_GIT tpm2-tools\n    pushd tpm2-tools\n    git checkout $TPM2TOOLS_VER\n    ./bootstrap\n    if [[ -n $CENTOS7_TSS_FLAGS ]] ; then\n        export SAPI_CFLAGS=' '\n        export SAPI_LIBS='-ltss2-sys -L/usr/lib/'\n    fi\n    ./configure --prefix=/usr/local\n    make\n    make install\n    popd # tpm\nfi\n\nif [[ -z \"$(command -v tpm2_getrandom)\" ]] ; then\n    echo \"ERROR: Failed to build tpm2_tss/tools!\"\n    exit 1\nfi\n\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tBuild and install TPM2 simulator'\n    echo \"==================================================================================\"\n\n    # Download and unpack swtpm2\n    TMPFILE=`mktemp -t swtpm2.XXXXXXXXXX.tar.gz` || exit 1\n    wget \"$TPM2SIM_SRC\" -O $TMPFILE\n    if [[ $? -ne 0 ]] ; then\n        echo \"ERROR: Failed to download TPM2 simulator!\"\n        exit 1\n    fi\n    mkdir swtpm2\n    tar -C ./swtpm2 -xzf $TMPFILE\n    pushd swtpm2\n\n    # Begin building and installing swtpm2\n    pushd src\n    make\n    install -c tpm_server /usr/local/bin/tpm_server\n\n    popd # tpm/swtpm2\nfi\n\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    pushd scripts\n\n    # Ensure everything is executable\n    chmod +x init_tpm_server\n    chmod +x tpm_serverd\n\n    # Install scripts\n    install -c tpm_serverd /usr/local/bin/tpm_serverd\n    install -c init_tpm_server /usr/local/bin/init_tpm_server\n\n    # Clear TPM on first use\n    init_tpm_server\nfi\n\n\n# Install keylime\necho\necho \"==================================================================================\"\necho $'\\t\\t\\t\\tInstall Keylime'\necho \"==================================================================================\"\ncd $KEYLIME_DIR\nif [[ \"$NEED_PYTHON_DIR\" -eq \"1\" ]] ; then\n    mkdir -p /usr/local/lib/python3.6/site-packages/\nfi\npython3 -m pip install . -r requirements.txt\n\nif [[ -f \"/etc/keylime.conf\" ]] ; then\n    if [[ $(diff -N \"/etc/keylime.conf\" \"keylime.conf\") ]] ; then\n        echo \"Modified keylime.conf found in /etc/, creating /etc/keylime.conf.new instead\"\n        cp keylime.conf /etc/keylime.conf.new\n        chmod 600 /etc/keylime.conf.new\n    fi\nelse\n    echo \"Installing keylime.conf to /etc/\"\n    cp -n keylime.conf /etc/\n    chmod 600 /etc/keylime.conf\nfi\n\necho\necho \"==================================================================================\"\necho $'\\t\\t\\t\\tCheck for tpm_cert_store'\necho \"==================================================================================\"\nif [ ! -d \"/var/lib/keylime/tpm_cert_store\" ]; then\n  echo \"Creating new tpm_cert_store\"\n  mkdir -p /var/lib/keylime\n  cp -r $KEYLIME_DIR/tpm_cert_store /var/lib/keylime/tpm_cert_store\nelse\n  echo \"Updating existing cert store\"\n  cp -n $KEYLIME_DIR/tpm_cert_store/* /var/lib/keylime/tpm_cert_store/\nfi\n\nif [[ \"$OPENSSL\" -eq \"0\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\tSwitching config to cfssl'\n    echo \"==================================================================================\"\n    sed -i 's/ca_implementation = openssl/ca_implementation = cfssl/' /etc/keylime.conf\nfi\n\n# Run agent packager (tarball)\nif [[ \"$TARBALL\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tGenerate agent tarball'\n    echo \"==================================================================================\"\n    cd $KEYLIME_DIR/keylime\n    ./make_agent_bundle_tarball.sh \"\"\nfi\n\n# don't start the emulator until after keylime is installed\nif [[ \"$TPM_SOCKET\" -eq \"1\" ]] ; then\n    echo\n    echo \"==================================================================================\"\n    echo $'\\t\\t\\t\\tStart TPM emulator'\n    echo \"==================================================================================\"\n    # starts emulator and IMA stub at boot\n    cd $KEYLIME_DIR/ima_stub_service\n    ./installer.sh\n    if [[ -n \"$(command -v service)\" ]] ; then\n        service tpm_emulator restart\n    fi\n\n    echo \"==================================================================================\"\n    echo $'\\tWARNING: Please set the env var for accessing the TPM:'\n    echo $'\\tTPM2TOOLS_TCTI=\"mssim:port=2321\"'\n    echo \"==================================================================================\"\n\n    # disable ek cert checking\n    sed -i 's/require_ek_cert = True/require_ek_cert = False/' /etc/keylime.conf\nelse\n    # Warn that we don't use abrmd anymore.\n    echo \"==================================================================================\"\n    echo $'\\tWARNING: Keylime uses /dev/tpmrm0 by default.'\n    echo $'\\t         If you want to use abrmd set:'\n    echo $'\\tTPM2TOOLS_TCTI==\"tabrmd:bus_name=com.intel.tss2.Tabrmd\"'\n    echo \"==================================================================================\"\nfi\n"], "filenames": ["installer.sh"], "buggy_code_start_loc": [533], "buggy_code_end_loc": [537], "fixing_code_start_loc": [534], "fixing_code_end_loc": [540], "type": "NVD-CWE-noinfo", "message": "In Keylime before 6.3.0, current keylime installer installs the keylime.conf file, which can contain sensitive data, as world-readable.", "other": {"cve": {"id": "CVE-2022-23952", "sourceIdentifier": "patrick@puiterwijk.org", "published": "2022-09-21T19:15:10.337", "lastModified": "2022-12-21T15:01:19.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Keylime before 6.3.0, current keylime installer installs the keylime.conf file, which can contain sensitive data, as world-readable."}, {"lang": "es", "value": "En Keylime versiones anteriores a 6.3.0, el instalador actual de keylime instala el archivo keylime.conf, que puede contener datos confidenciales, como legible por el mundo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "patrick@puiterwijk.org", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:keylime:keylime:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.3.0", "matchCriteriaId": "8BF970A4-62CA-4D1A-BDCC-4E5C717AD6C5"}]}]}], "references": [{"url": "https://github.com/keylime/keylime/commit/883085d6a4bcea3012729014d5b8e15ecd65fc7c", "source": "patrick@puiterwijk.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/keylime/keylime/security/advisories/GHSA-fchm-5w2v-qfm8", "source": "patrick@puiterwijk.org", "tags": ["Third Party Advisory"]}, {"url": "https://seclists.org/oss-sec/2022/q1/101", "source": "patrick@puiterwijk.org", "tags": ["Exploit", "Mailing List", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/keylime/keylime/commit/883085d6a4bcea3012729014d5b8e15ecd65fc7c"}}