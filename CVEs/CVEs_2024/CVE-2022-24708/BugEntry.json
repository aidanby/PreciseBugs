{"buggy_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nimport('ttConfigHelper');\nimport('ttGroupHelper');\nimport('ttBehalfUser');\nimport('ttGroup');\nimport('form.Form');\nimport('form.ActionForm');\nimport('ttTemplateHelper');\nimport('ttDate');\n\nclass ttUser {\n  var $login = null;            // User login.\n  var $name = null;             // User name.\n  var $id = null;               // User id.\n  var $org_id = null;           // Organization id.\n  var $org_key = null;          // Organization key.\n  var $group_id = null;         // Group id.\n  var $group_key = null;        // Group key.\n  var $role_id = null;          // Role id.\n  var $role_name = null;        // Role name.\n  var $rank = null;             // User role rank.\n  var $client_id = null;        // Client id for client user role.\n  var $quota_percent = 100.0;   // Time quota percent for quotas plugin.\n  var $behalf_id = null;        // User id, on behalf of whom we are working.\n  var $behalf_group_id = null;  // Group id, on behalf of which we are working.\n  var $behalf_name = null;      // User name, on behalf of whom we are working.\n  var $group_name = null;       // Group name.\n  var $behalf_group_name = null;// Group name, on behalf of which we are working.\n  var $email = null;            // User email.\n  var $lang = null;             // Language.\n  var $decimal_mark = '.';      // Decimal separator.\n  var $date_format = null;      // Date format.\n  var $time_format = null;      // Time format.\n  var $week_start = 0;          // Week start day.\n  var $tracking_mode = 0;       // Tracking mode.\n  var $project_required = 0;    // Whether project selection is required on time entires.\n  var $record_type = 0;         // Record type (duration vs start and finish, or both).\n  var $punch_mode = 0;          // Whether punch mode is enabled for user.\n  var $allow_overlap = 0;       // Whether to allow overlapping time entries.\n  var $bcc_email = null;        // Bcc email.\n  var $allow_ip = null;         // Specification from where user is allowed access.\n  var $password_complexity = null; // Password complexity example.\n  var $currency = null;         // Currency.\n  var $plugins = null;          // Comma-separated list of enabled plugins.\n\n  // Refactoring ongoing. Towards using helper instead of config string?\n  var $config = null;           // Comma-separated list of miscellaneous config options.\n  var $configHelper = null;     // An instance of ttConfigHelper class.\n  var $custom_css = null;       // Custom css.\n\n  var $custom_logo = 0;         // Whether to use a custom logo for group.\n  var $lock_spec = null;        // Cron specification for record locking.\n  var $holidays = null;         // Holidays specification.\n  var $workday_minutes = 480;   // Number of work minutes in a regular day.\n  var $rights = array();        // An array of user rights such as 'track_own_time', etc.\n  var $is_client = false;       // Whether user is a client as determined by missing 'track_own_time' right.\n\n  var $behalfUser = null;       // A ttBehalfUser instance with on behalf user attributes.\n  var $behalfGroup = null;      // A ttGroup instance with on behalf group attributes.\n\n  // Constructor.\n  function __construct($login, $id = null) {\n    if (!$login && !$id) {\n      // nothing to initialize\n      return;\n    }\n\n    $mdb2 = getConnection();\n\n    $sql = \"SELECT u.id, u.login, u.name, u.group_id, u.role_id, r.rank, r.name as role_name, r.rights, u.client_id,\".\n      \" u.quota_percent, u.email, g.org_id, g.group_key, g.name as group_name, g.currency, g.lang, g.decimal_mark, g.date_format,\".\n      \" g.time_format, g.week_start, g.tracking_mode, g.project_required, g.record_type,\".\n      \" g.bcc_email, g.allow_ip, g.password_complexity, g.plugins, g.config, g.lock_spec, g.custom_css, g.holidays, g.workday_minutes, g.custom_logo\".\n      \" FROM tt_users u LEFT JOIN tt_groups g ON (u.group_id = g.id) LEFT JOIN tt_roles r on (r.id = u.role_id) WHERE \";\n    if ($id)\n      $sql .= \"u.id = $id\";\n    else\n      $sql .= \"u.login = \".$mdb2->quote($login);\n    $sql .= \" AND u.status = 1\";\n\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) {\n      return;\n    }\n\n    $val = $res->fetchRow();\n    if ($val['id'] > 0) {\n      $this->login = $val['login'];\n      $this->name = $val['name'];\n      $this->id = $val['id'];\n      $this->org_id = $val['org_id'];\n      $this->group_id = $val['group_id'];\n      $this->group_key = $val['group_key'];\n      if ($this->org_id == $this->group_key) $this->org_key = $val['group_key'];\n      $this->role_id = $val['role_id'];\n      $this->role_name = $val['role_name'];\n      $this->rights = explode(',', $val['rights']);\n      $this->rank = $val['rank'];\n      $this->client_id = $val['client_id'];\n      $this->is_client = $this->client_id && !in_array('track_own_time', $this->rights);\n      if ($val['quota_percent']) $this->quota_percent = $val['quota_percent'];\n      $this->email = $val['email'];\n      if ($val['lang']) $this->lang = $val['lang'];\n      if ($val['decimal_mark']) $this->decimal_mark = $val['decimal_mark'];\n      $this->date_format = $val['date_format'];\n      $this->time_format = $val['time_format'];\n      $this->week_start = $val['week_start'];\n      $this->tracking_mode = $val['tracking_mode'];\n      $this->project_required = $val['project_required'];\n      $this->record_type = $val['record_type'];\n      $this->bcc_email = $val['bcc_email'];\n      $this->allow_ip = $val['allow_ip'];\n      $this->password_complexity = $val['password_complexity'];\n      $this->group_name = $val['group_name'];\n      $this->currency = $val['currency'];\n      $this->plugins = $val['plugins'];\n      $this->lock_spec = $val['lock_spec'];\n      $this->holidays = $val['holidays'];\n      $this->workday_minutes = $val['workday_minutes'];\n      $this->custom_logo = $val['custom_logo'];\n\n      // TODO: refactor this.\n      $this->config = $val['config'];\n      $this->configHelper = new ttConfigHelper($val['config']);\n\n      // Set user config options.\n      $this->punch_mode = $this->configHelper->getDefinedValue('punch_mode');\n      $this->allow_overlap = $this->configHelper->getDefinedValue('allow_overlap');\n\n      $this->custom_css = $val['custom_css'];\n\n      // Set \"on behalf\" id and name (user).\n      if (isset($_SESSION['behalf_id'])) {\n        $this->behalf_id = $_SESSION['behalf_id'];\n        $this->behalf_name = $_SESSION['behalf_name'];\n\n        $this->behalfUser = new ttBehalfUser($this->behalf_id, $this->org_id);\n      }\n      // Set \"on behalf\" id and name (group).\n      if (isset($_SESSION['behalf_group_id'])) {\n        $this->behalf_group_id = $_SESSION['behalf_group_id'];\n        $this->behalf_group_name = $_SESSION['behalf_group_name'];\n\n        $this->behalfGroup = new ttGroup($this->behalf_group_id, $this->org_id);\n      }\n    }\n  }\n\n  // getUser returns user id on behalf of whom the current user is operating.\n  function getUser() {\n    return ($this->behalfUser ? $this->behalfUser->id : $this->id);\n  }\n\n  // getName returns user name on behalf of whom the current user is operating.\n  function getName() {\n    return ($this->behalfUser ? $this->behalfUser->name : $this->name);\n  }\n\n  // getQuotaPercent returns quota percent for active user.\n  function getQuotaPercent() {\n    return ($this->behalfUser ? $this->behalfUser->quota_percent : $this->quota_percent);\n  }\n\n  // getEmail returns email for active user.\n  function getEmail() {\n    return ($this->behalfUser ? $this->behalfUser->email : $this->email);\n  }\n\n  // The getGroup returns group id on behalf of which the current user is operating.\n  function getGroup() {\n    return ($this->behalfGroup ? $this->behalfGroup->id : $this->group_id);\n  }\n\n  // getGroupName returns group name on behalf of which the current user is operating.\n  function getGroupName() {\n    return ($this->behalfGroup ? $this->behalfGroup->name : $this->group_name);\n  }\n\n  // getGroupKey returns group key for active group.\n  function getGroupKey() {\n    return ($this->behalfGroup ? $this->behalfGroup->group_key : $this->group_key);\n  }\n\n  // getOrgKey returns org key.\n  function getOrgKey() {\n    if ($this->org_key) {\n      return $this->org_key;\n    }\n\n    // Org key is not set because we are in a subgroup. Obtain it.\n    $mdb2 = getConnection();\n    $org_id = $this->org_id;\n    $sql = \"select group_key from tt_groups where id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $this->org_key = $val['group_key'];\n    return $this->org_key;\n  }\n\n  // getDecimalMark returns decimal mark for active group.\n  function getDecimalMark() {\n    return ($this->behalfGroup ? $this->behalfGroup->decimal_mark : $this->decimal_mark);\n  }\n\n  // getDateFormat returns date format for active group.\n  function getDateFormat() {\n    return ($this->behalfGroup ? $this->behalfGroup->date_format : $this->date_format);\n  }\n\n  // getTimeFormat returns time format for active group.\n  function getTimeFormat() {\n    return ($this->behalfGroup ? $this->behalfGroup->time_format : $this->time_format);\n  }\n\n  // getWeekStart returns week start day for active group.\n  function getWeekStart() {\n    return ($this->behalfGroup ? $this->behalfGroup->week_start : $this->week_start);\n  }\n\n  // getTrackingMode returns tracking mode for active group.\n  function getTrackingMode() {\n    return ($this->behalfGroup ? $this->behalfGroup->tracking_mode : $this->tracking_mode);\n  }\n\n  // getRecordType returns record type for active group.\n  function getRecordType() {\n    return ($this->behalfGroup ? $this->behalfGroup->record_type : $this->record_type);\n  }\n\n  // getCurrency returns currency string for active group.\n  function getCurrency() {\n    return ($this->behalfGroup ? $this->behalfGroup->currency : $this->currency);\n  }\n\n  // getPlugins returns plugins string for active group.\n  function getPlugins() {\n    return ($this->behalfGroup ? $this->behalfGroup->plugins : $this->plugins);\n  }\n\n  // getLockSpec returns lock specification for active group.\n  function getLockSpec() {\n    return ($this->behalfGroup ? $this->behalfGroup->lock_spec : $this->lock_spec);\n  }\n\n  // getHolidays returns holidays specification for active group.\n  function getHolidays() {\n    return ($this->behalfGroup ? $this->behalfGroup->holidays : $this->holidays);\n  }\n\n  // getWorkdayMinutes returns workday_minutes for active group.\n  function getWorkdayMinutes() {\n    return ($this->behalfGroup ? $this->behalfGroup->workday_minutes : $this->workday_minutes);\n  }\n\n  // getConfig returns config string for active group.\n  function getConfig() {\n    return ($this->behalfGroup ? $this->behalfGroup->configHelper->getConfig() : $this->configHelper->getConfig());\n  }\n\n  // getConfigHelper returns ttConfigHelper instance for active group.\n  function getConfigHelper() {\n    return ($this->behalfGroup ? $this->behalfGroup->configHelper : $this->configHelper);\n  }\n\n  // getConfigOption returns true if an option is defined for group.\n  // This helps us keeping a set of user attributes smaller.\n  // We determine whether the option is set only on pages that need to know.\n  // For example: confirm_save is used only on time and expense edit pages.\n  function getConfigOption($name) {\n    $config = new ttConfigHelper($this->getConfig());\n    return $config->getDefinedValue($name);\n  }\n\n  // getConfigInt returns an integer value defined in a group, or false.\n  function getConfigInt($name, $defaultVal = 0) {\n    $config = new ttConfigHelper($this->getConfig());\n    return $config->getIntValue($name, $defaultVal);\n  }\n\n  // getCustomCss returns custom css for active group.\n  function getCustomCss() {\n    return ($this->behalfGroup ? $this->behalfGroup->custom_css : $this->custom_css);\n  }\n\n  // can - determines whether user has a right to do something.\n  function can($do_something) {\n    return in_array($do_something, $this->rights);\n  }\n\n  // isClient - determines whether current user is a client.\n  function isClient() {\n    return $this->is_client;\n  }\n\n  // isPluginEnabled checks whether a plugin is enabled for user.\n  function isPluginEnabled($plugin)\n  {\n    return in_array($plugin, explode(',', $this->getPlugins() ? $this->getPlugins() : ''));\n  }\n\n  // isOptionEnabled checks whether a config option is enabled for user.\n  function isOptionEnabled($option)\n  {\n    return $this->behalfGroup ? $this->behalfGroup->configHelper->getDefinedValue($option) : $this->configHelper->getDefinedValue($option);\n  }\n\n  // setOption sets an option inside of ttConfigHelper instance.\n  // Note that it does not write to the database.\n  function setOption($option, $enable = true)\n  {\n    return $this->behalfGroup ? $this->behalfGroup->configHelper->setDefinedValue($option, $enable) : $this->configHelper->setDefinedValue($option, $enable);\n  }\n\n  // getAssignedProjects - returns an array of assigned projects.\n  function getAssignedProjects($options = null)\n  {\n    $result = array();\n    $mdb2 = getConnection();\n\n    $user_id = $this->getUser();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if (isset($options['include_files']) && $options['include_files']) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    // Do a query with inner join to get assigned projects.\n    $sql = \"select p.id, p.name, p.description, p.tasks, upb.rate $filePart from tt_projects p $fileJoin\".\n      \" inner join tt_user_project_binds upb on (upb.user_id = $user_id and upb.project_id = p.id and upb.status = 1)\".\n      \" where p.group_id = $group_id and p.org_id = $org_id and p.status = 1 order by p.name\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $bindTemplatesWithProjects = isset($options['include_templates']) && $options['include_templates'];\n      while ($val = $res->fetchRow()) {\n        // If we have to include templates, get them in a separate query for each project.\n        // Although, theoretically, we could use mysql group_concat, but this requires grouping by, which makes\n        // maintenance of this code more complex.\n        if ($bindTemplatesWithProjects) {\n          $val['templates'] = ttTemplateHelper::getAssignedTemplates($val['id']);\n        }\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getAssignedTasks - returns an array of assigned tasks.\n  function getAssignedTasks()\n  {\n    // Start with projects;\n    $projects = $this->getAssignedProjects();\n    if (!$projects) return false;\n\n    // Build an array of task ids.\n    $task_ids = array();\n    foreach($projects as $project) {\n      $one_project_tasks = $project['tasks'] ? explode(',', $project['tasks']) : array();\n      $task_ids = array_unique(array_merge($task_ids, $one_project_tasks));\n    }\n    if (!$task_ids) return false;\n\n    // Get task descriptions.\n    $result = array();\n    $mdb2 = getConnection();\n    $tasks = implode(',', $task_ids); // This is a comma-separated list of task ids.\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 and id in ($tasks) order by name\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getAssignedClients - returns an array of clients assigned to own projects.\n  function getAssignedClients()\n  {\n    // Start with projects;\n    $projects = $this->getAssignedProjects();\n    if (!$projects) return false;\n    $assigned_project_ids = array();\n    foreach($projects as $project) {\n      $assigned_project_ids[] = $project['id'];\n    }\n\n    $mdb2 = getConnection();\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    // Get active clients for group.\n    $clients = array();\n    $sql = \"select id, name, address, projects from tt_clients where group_id = $group_id and org_id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $client_project_ids = $val['projects'] ? explode(',', $val['projects']) : array();\n        if (array_intersect($assigned_project_ids, $client_project_ids))\n          $clients[] = $val; // Add client if one of user projects is a client project, too.\n      }\n    }\n    return $clients;\n  }\n\n  // isDateLocked checks whether a specifc date is locked for modifications.\n  function isDateLocked($date)\n  {\n    if (!$this->isPluginEnabled('lk'))\n      return false; // Locking feature is disabled.\n\n    if (!$this->getLockSpec())\n      return false; // There is no lock specification.\n\n    if (!$this->behalf_id && $this->can('override_own_date_lock'))\n      return false; // User is working as self and can override own date lock.\n\n    if ($this->behalf_id && $this->can('override_date_lock'))\n      return false; // User is working on behalf of someone else and can override date lock.\n\n    require_once(LIBRARY_DIR.'/tdcron/class.tdcron.php');\n    require_once(LIBRARY_DIR.'/tdcron/class.tdcron.entry.php');\n\n    // Calculate the last occurrence of a lock.\n    $last = tdCron::getLastOccurrence($this->getLockSpec(), time());\n    $lockdate = new ttDate(strftime('%Y-%m-%d', $last));\n    if ($date->before($lockdate))\n      return true;\n\n    return false;\n  }\n\n  // canOverridePunchMode checks whether a user can override punch mode in a situation.\n  function canOverridePunchMode()\n  {\n    if (!$this->behalf_id && !$this->can('override_own_punch_mode'))\n      return false; // User is working as self and cannot override for self.\n\n    if ($this->behalf_id && !$this->can('override_punch_mode'))\n      return false; // User is working on behalf of someone else and cannot override.\n\n    return true;\n  }\n\n  // getUsers obtains users in a group, as specififed by options.\n  function getUsers($options) {\n    $mdb2 = getConnection();\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $skipClients = !isset($options['include_clients']);\n    $includeSelf = isset($options['include_self']);\n\n    $select_part = 'select u.id, u.group_id, u.name';\n    $include_quota = false;\n    if (isset($options['include_login'])) {\n      $select_part .= ', u.login';\n      // Piggy-back on include_login to see if we must also include quota_percent.\n      $include_quota = $this->isPluginEnabled('mq');\n      if ($include_quota) {\n        $decimal_mark = $this->getDecimalMark();\n        $replaceDecimalMark = ('.' != $decimal_mark);\n        $select_part .= ', u.quota_percent';\n      }\n    }\n    if (!isset($options['include_clients'])) $select_part .= ', r.rights';\n    if (isset($options['include_role'])) $select_part .= ', r.name as role_name, r.rank';\n\n    $from_part = ' from tt_users u';\n\n    $left_joins = null;\n    if (isset($options['max_rank']) || $skipClients || isset($options['include_role']))\n      $left_joins .= ' left join tt_roles r on (u.role_id = r.id)';\n\n    $where_part = \" where u.org_id = $org_id and u.group_id = $group_id\";\n    if (isset($options['status']))\n      $where_part .= ' and u.status = '.(int)$options['status'];\n    else\n      $where_part .= ' and u.status is not null';\n    if ($includeSelf) {\n      $where_part .= \" and (u.id = $this->id || r.rank <= \".(int)$options['max_rank'].')';\n    } else {\n      if (isset($options['max_rank'])) $where_part .= ' and r.rank <= '.(int)$options['max_rank'];\n    }\n\n    $order_part = \" order by upper(u.name)\";\n\n    $sql = $select_part.$from_part.$left_joins.$where_part.$order_part;\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n\n    while ($val = $res->fetchRow()) {\n      if ($skipClients) {\n        $isClient = in_array('track_own_time', explode(',', $val['rights'])) ? 0 : 1; // Clients do not have track_own_time right.\n        if ($isClient)\n          continue; // Skip adding clients.\n      }\n      if ($include_quota) {\n        $quota = $val['quota_percent'];\n        if (ttEndsWith($quota, '.00'))\n          $quota = substr($quota, 0, strlen($quota)-3); // Trim trailing \".00\";\n        elseif ($replaceDecimalMark)\n          $quota = str_replace('.', $decimal_mark, $quota);\n        $val['quota_percent'] = $quota.'%';\n      }\n      $user_list[] = $val;\n    }\n\n    if (isset($options['self_first'])) {\n      // Put own entry at the front.\n      $cnt = count($user_list);\n      for($i = 0; $i < $cnt; $i++) {\n        if ($user_list[$i]['id'] == $this->id) {\n          $self = $user_list[$i]; // Found self.\n          array_unshift($user_list, $self); // Put own entry at the front.\n          array_splice($user_list, $i+1, 1); // Remove duplicate.\n        }\n      }\n    }\n    return $user_list;\n  }\n\n  // getGroupsForDropdown obtains an array of groups to populate the \"Group\" dropdown.\n  // It consists of the entire tree starting from user home group.\n  // Group name is prefixed with additional characters to indicate subgroups level.\n  function getGroupsForDropdown() {\n    global $user;\n\n    // Start with user home group.\n    $groups = array();\n    $subgroup_level = 0;\n    $group_id = $user->group_id;\n\n    $this->addGroupToDropdown($groups, $group_id, $subgroup_level);\n    return $groups;\n  }\n\n  // addGroupToDropdown is a recursive function to populate a tree of groups, used with getGroupsForDropdown().\n  function addGroupToDropdown(&$groups, $group_id, $subgroup_level) {\n    $name = '';\n    // Add indentation markup to indicate a subdirectory level.\n    for ($i = 0; $i < $subgroup_level; $i++) {\n      $name .= '*';\n      // $name .= '\ud83d\uded1'; // Unicode stop sign. Does not display properly in Chrome 98.\n    }\n    if ($subgroup_level) $name .= ' '; // Add an extra space.\n    $name .= ttGroupHelper::getGroupName($group_id);\n\n    $groups[] = array('id'=>$group_id, 'name'=>$name);\n\n    $subgroups = (array) $this->getSubgroups($group_id);\n    foreach($subgroups as $subgroup) {\n      $this->addGroupToDropdown($groups, $subgroup['id'], $subgroup_level+1);\n    }\n  }\n\n  // getSubgroups obtains a list of immediate subgroups.\n  function getSubgroups($group_id = null) {\n    $groups = array();\n    $mdb2 = getConnection();\n\n    if (!$group_id) $group_id = $this->getGroup();\n\n    $sql = \"select id, name, description from tt_groups where org_id = $this->org_id\".\n      \" and parent_id = $group_id and status is not null order by upper(name)\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $groups[] = $val;\n      }\n    }\n    return $groups;\n  }\n\n  // getUserDetails function returns user details.\n   function getUserDetails($user_id) {\n    $mdb2 = getConnection();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n    $uid = (int)$user_id;\n\n    // Determine max rank. If we are searching in on behalf group\n    // then rank restriction does not apply.\n    $max_rank = $this->behalfGroup ? MAX_RANK : $this->rank;\n\n    $sql =  \"select u.id, u.name, u.login, u.role_id, u.client_id, u.status, u.rate, u.quota_percent, u.email from tt_users u\".\n      \" left join tt_roles r on (u.role_id = r.id)\".\n      \" where u.id = $uid and u.group_id = $group_id and u.org_id = $org_id and u.status is not null\".\n      \" and (r.rank < $max_rank or (r.rank = $max_rank and u.id = $this->id))\"; // Users with lesser roles or self.\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val;\n    }\n    return false;\n  }\n\n  // checkBehalfId checks whether behalf_id is appropriate.\n  // On behalf user must be active and have lower rank if the user is from home group,\n  // otherwise:\n  // - subgroup must ve valid;\n  // - user should be a member of it.\n  function checkBehalfId() {\n    if (!$this->behalfGroup) {\n      // Checking user from home group.\n      $options = array('status'=>ACTIVE,'max_rank'=>$this->rank-1);\n      $users = $this->getUsers($options);\n      foreach($users as $one_user) {\n        if ($one_user['id'] == $this->behalf_id)\n          return true;\n      }\n    } else {\n      // Checking user from a subgroup.\n      $group_id = $this->behalfGroup->id;\n      if (!$this->isSubgroupValid($group_id))\n        return false;\n\n      // So far, so good. Check user now.\n      $options = array('status'=>ACTIVE,'max_rank'=>MAX_RANK);\n      $users = $this->getUsers($options);\n      foreach($users as $one_user) {\n        if ($one_user['id'] == $this->behalf_id)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  // adjustBehalfId attempts to adjust behalf_id and behalf_name to a first found\n  // apropriate user.\n  //\n  // Needed for situations when user does not have do_own_something right.\n  // Example: has view_charts but does not have view_own_charts.\n  // In this case we still allow access to charts, but set behalf_id to someone else.\n  // Another example: working in a subgroup on behalf of someone else.\n  function adjustBehalfId() {\n    $rank = $this->getMaxRankForGroup($this->getGroup());\n\n    // Adjust to first found user in group.\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n    $users = $this->getUsers($options);\n    foreach($users as $one_user) {\n      // Fake loop to access first element.\n      $this->behalf_id = $one_user['id'];\n      $this->behalf_name = $one_user['name'];\n      $_SESSION['behalf_id'] = $this->behalf_id;\n      $_SESSION['behalf_name'] = $this->behalf_name;\n      return true;\n    }\n    return false;\n  }\n\n  // updateGroup updates group information with new data.\n  function updateGroup($fields) {\n    $mdb2 = getConnection();\n\n    $group_id = isset($fields['group_id']) ? $fields['group_id'] : null;\n    if ($group_id && !$this->isGroupValid($group_id)) return false;\n    if (!$group_id) $group_id = $this->getGroup();\n\n    $name_part = $description_part = $currency_part = $lang_part = $decimal_mark_part = $date_format_part = $time_format_part =\n      $week_start_part = $tracking_mode_part = $project_required_part = $record_type_part = $bcc_email_part =  $allow_ip_part =\n      $plugins_part = $config_part = $custom_css_part = $lock_spec_part = $holidays_part = $workday_minutes_part = '';\n    if (isset($fields['name'])) $name_part = ', name = '.$mdb2->quote($fields['name']);\n    if (isset($fields['description'])) $description_part = ', description = '.$mdb2->quote($fields['description']);\n    if (isset($fields['currency'])) $currency_part = ', currency = '.$mdb2->quote($fields['currency']);\n    if (isset($fields['lang'])) $lang_part = ', lang = '.$mdb2->quote($fields['lang']);\n    if (isset($fields['decimal_mark'])) $decimal_mark_part = ', decimal_mark = '.$mdb2->quote($fields['decimal_mark']);\n    if (isset($fields['date_format'])) $date_format_part = ', date_format = '.$mdb2->quote($fields['date_format']);\n    if (isset($fields['time_format'])) $time_format_part = ', time_format = '.$mdb2->quote($fields['time_format']);\n    if (isset($fields['week_start'])) $week_start_part = ', week_start = '.(int) $fields['week_start'];\n    if (isset($fields['tracking_mode'])) {\n      $tracking_mode_part = ', tracking_mode = '.(int) $fields['tracking_mode'];\n      $project_required_part = ' , project_required = '.(int) $fields['project_required'];\n    }\n    if (isset($fields['record_type'])) $record_type_part = ', record_type = '.(int) $fields['record_type'];\n    if (isset($fields['bcc_email'])) $bcc_email_part = ', bcc_email = '.$mdb2->quote($fields['bcc_email']);\n    if (isset($fields['allow_ip'])) $allow_ip_part = ', allow_ip = '.$mdb2->quote($fields['allow_ip']);\n    if (isset($fields['plugins'])) $plugins_part = ', plugins = '.$mdb2->quote($fields['plugins']);\n    if (isset($fields['config'])) $config_part = ', config = '.$mdb2->quote($fields['config']);\n    if (isset($fields['custom_css'])) $custom_css_part = ', custom_css = '.$mdb2->quote($fields['custom_css']);\n    if (isset($fields['lock_spec'])) $lock_spec_part = ', lock_spec = '.$mdb2->quote($fields['lock_spec']);\n    if (isset($fields['holidays'])) $holidays_part = ', holidays = '.$mdb2->quote($fields['holidays']);\n    if (isset($fields['workday_minutes'])) $workday_minutes_part = ', workday_minutes = '.$mdb2->quote($fields['workday_minutes']);\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$mdb2->quote($this->id);\n\n    $parts = trim($name_part.$description_part.$currency_part.$lang_part.$decimal_mark_part.$date_format_part.\n      $time_format_part.$week_start_part.$tracking_mode_part.$project_required_part.$record_type_part.\n      $bcc_email_part.$allow_ip_part.$plugins_part.$config_part.$custom_css_part.$lock_spec_part.$holidays_part.$workday_minutes_part.$modified_part, ',');\n\n    $sql = \"update tt_groups set $parts where id = $group_id and org_id = $this->org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Update entities_modified, too.\n    if (!ttGroupHelper::updateEntitiesModified())\n      return false;\n\n    return true;\n  }\n\n  // markUserDeleted marks a user in group as deleted.\n  function markUserDeleted($user_id) {\n    if (!$this->can('manage_users') || $this->id == $user_id)\n      return false;\n\n    // Make sure we operate on a legit user.\n    $user_details = $this->getUserDetails($user_id);\n    if (!$user_details) return false;\n\n    $mdb2 = getConnection();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    // Mark user to project binds as deleted.\n    $sql = \"update tt_user_project_binds set status = NULL where user_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user favorite reports as deleted.\n    $sql = \"update tt_fav_reports set status = NULL where user_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user custom fields as deleted,\n    require_once('plugins/CustomFields.class.php');\n    $entity_type = CustomFields::ENTITY_USER;\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$mdb2->quote($this->id);\n    $sql = \"update tt_entity_custom_fields set status = null $modified_part\".\n      \" where entity_type = $entity_type and entity_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user as deleted.\n    $sql = \"update tt_users set status = null $modified_part where id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Update entities_modified, too.\n    if (!ttGroupHelper::updateEntitiesModified())\n      return false;\n\n    return true;\n  }\n\n  // isUserValid determines if a user is valid for on behalf work.\n  function isUserValid($user_id) {\n    if ($user_id == $this->id)\n      return true;\n    return ($this->getUserDetails($user_id) != null);\n  }\n\n  // isGroupValid determines if a group is valid for user.\n  function isGroupValid($group_id) {\n    if ($group_id == $this->group_id)\n      return true;\n    else\n      return $this->isSubgroupValid($group_id);\n  }\n\n  // isSubgroupValid determines if a subgroup is valid for user.\n  // A subgroup is valid if:\n  //   - user can manage_subgroups;\n  //   - subgroup is either a direct child of user group, or \"on the path\"\n  //   to it (grand-child, etc.).\n  function isSubgroupValid($subgroup_id) {\n    if (!$this->can('manage_subgroups')) return false; // User cannot manage subgroups.\n\n    $current_group_id = $subgroup_id;\n    while ($parent_group_id = ttGroupHelper::getParentGroup($current_group_id)) {\n      if ($parent_group_id == $this->group_id) {\n        return true; // Found it.\n      }\n      $current_group_id = $parent_group_id;\n    }\n    return false;\n  }\n\n  // getMaxRankForGroup determines effective user rank for a user in a given group.\n  // For home group it is the existing user rank (as per role) minus 1.\n  // For subgroups, if user can \"manage_subgroups\", it is MAX_RANK.\n  function getMaxRankForGroup($group_id) {\n\n    $max_rank = 0; // Start safely.\n    if ($this->group_id == $group_id) {\n      $max_rank = $this->rank - 1;\n      return $max_rank;\n    }\n\n    if ($this->isSubgroupValid($group_id))\n      $max_rank = MAX_RANK;\n\n    return $max_rank;\n  }\n\n  // getUserPartForHeader constructs a string for user to display on pages header.\n  // It changes with \"on behalf\" attributes for both user and group.\n  function getUserPartForHeader() {\n    global $i18n;\n    if (!$this->id) return null;\n\n    $user_part = htmlspecialchars($this->name);\n    $user_part .= ' - '.htmlspecialchars($this->role_name);\n    if ($this->behalf_id) {\n      $user_part .= ' <span class=\"onBehalf\">'.$i18n->get('label.on_behalf').' '.htmlspecialchars($this->behalf_name).'</span>';\n    }\n    if ($this->behalf_group_id) {\n      $user_part .= ',  <span class=\"onBehalf\">'.htmlspecialchars($this->behalf_group_name).'</span>';\n    } else {\n      if ($this->group_name) // Note: we did not require group names in the past.\n        $user_part .= ', '.$this->group_name;\n    }\n    return $user_part;\n  }\n\n  // setOnBehalfGroup sets on behalf group for the user in both the object and the session.\n  function setOnBehalfGroup($group_id) {\n\n    // Unset things first.\n    $this->behalf_group_id = null;\n    $this->behalf_group_name = null;\n    $this->behalf_id = null;\n    $this->behalf_name = null;\n    unset($this->behalfGroup);\n    $this->behalfGroup = null;\n    unset($_SESSION['behalf_group_id']);\n    unset($_SESSION['behalf_group_name']);\n    unset($_SESSION['behalf_id']);\n    unset($_SESSION['behalf_name']);\n\n    // Destroy report bean if it was set in session.\n    $form = new Form('dummyForm');\n    global $request;\n    $bean = new ActionForm('reportBean', $form, $request);\n    if ($bean->isSaved()) {\n      $bean->destroyBean();\n    }\n\n    // Do not do anything if we don't have rights.\n    if (!$this->can('manage_subgroups')) return;\n\n    // No need to set if group is our home group.\n    if ($group_id == $this->group_id) return;\n\n    // No need to set if subgroup is not valid.\n    if (!$this->isSubgroupValid($group_id)) return;\n\n    // We are good to set on behalf group.\n    $onBehalfGroupName = ttGroupHelper::getGroupName($group_id);\n    $_SESSION['behalf_group_id'] = $group_id;\n    $_SESSION['behalf_group_name'] = $onBehalfGroupName;\n    $this->behalf_group_id = $group_id;\n    $this->behalf_group_name = $onBehalfGroupName;\n\n    $this->behalfGroup = new ttGroup($this->behalf_group_id, $this->org_id);\n\n    // Adjust on behalf user to first found user in subgroup.\n    $this->adjustBehalfId();\n    return;\n  }\n\n  // setOnBehalfUser sets on behalf user both the object and the session.\n  function setOnBehalfUser($user_id) {\n    $uid = (int)$user_id; // In case we forgot to sanitize $user_id before getting here.\n\n    // Unset things first.\n    $this->behalf_id = null;\n    $this->behalf_name = null;\n    unset($this->behalfUser);\n    unset($_SESSION['behalf_id']);\n    unset($_SESSION['behalf_name']);\n\n    // No need to set if user is us.\n    if ($uid == $this->id) return;\n\n    // No need to set if user id is not valid.\n    if (!$this->isUserValid($uid)) return;\n\n    // We are good to set on behalf user.\n    $onBehalfUserName = ttUserHelper::getUserName($uid);\n    $_SESSION['behalf_id'] = $uid;\n    $_SESSION['behalf_name'] = $onBehalfUserName;\n    $this->behalf_id = $uid;\n    $this->behalf_name = $onBehalfUserName;\n\n    $this->behalfUser = new ttBehalfUser($this->behalf_id, $this->org_id);\n    return;\n  }\n\n  // The exists() function determines if an active user exists in context of a page.\n  // If we are working as self, true.\n  // If we are working in a subgroup with active users, true.\n  // If we are working in a subgroup without active users, false.\n  function exists() {\n    if (!$this->behalfGroup)\n      return true; // Working as self.\n    else if ($this->behalfGroup->active_users)\n      return true; // Subgroup has users.\n\n    return false;\n  }\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.20.0.5645\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "fixing_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nimport('ttConfigHelper');\nimport('ttGroupHelper');\nimport('ttBehalfUser');\nimport('ttGroup');\nimport('form.Form');\nimport('form.ActionForm');\nimport('ttTemplateHelper');\nimport('ttDate');\n\nclass ttUser {\n  var $login = null;            // User login.\n  var $name = null;             // User name.\n  var $id = null;               // User id.\n  var $org_id = null;           // Organization id.\n  var $org_key = null;          // Organization key.\n  var $group_id = null;         // Group id.\n  var $group_key = null;        // Group key.\n  var $role_id = null;          // Role id.\n  var $role_name = null;        // Role name.\n  var $rank = null;             // User role rank.\n  var $client_id = null;        // Client id for client user role.\n  var $quota_percent = 100.0;   // Time quota percent for quotas plugin.\n  var $behalf_id = null;        // User id, on behalf of whom we are working.\n  var $behalf_group_id = null;  // Group id, on behalf of which we are working.\n  var $behalf_name = null;      // User name, on behalf of whom we are working.\n  var $group_name = null;       // Group name.\n  var $behalf_group_name = null;// Group name, on behalf of which we are working.\n  var $email = null;            // User email.\n  var $lang = null;             // Language.\n  var $decimal_mark = '.';      // Decimal separator.\n  var $date_format = null;      // Date format.\n  var $time_format = null;      // Time format.\n  var $week_start = 0;          // Week start day.\n  var $tracking_mode = 0;       // Tracking mode.\n  var $project_required = 0;    // Whether project selection is required on time entires.\n  var $record_type = 0;         // Record type (duration vs start and finish, or both).\n  var $punch_mode = 0;          // Whether punch mode is enabled for user.\n  var $allow_overlap = 0;       // Whether to allow overlapping time entries.\n  var $bcc_email = null;        // Bcc email.\n  var $allow_ip = null;         // Specification from where user is allowed access.\n  var $password_complexity = null; // Password complexity example.\n  var $currency = null;         // Currency.\n  var $plugins = null;          // Comma-separated list of enabled plugins.\n\n  // Refactoring ongoing. Towards using helper instead of config string?\n  var $config = null;           // Comma-separated list of miscellaneous config options.\n  var $configHelper = null;     // An instance of ttConfigHelper class.\n  var $custom_css = null;       // Custom css.\n\n  var $custom_logo = 0;         // Whether to use a custom logo for group.\n  var $lock_spec = null;        // Cron specification for record locking.\n  var $holidays = null;         // Holidays specification.\n  var $workday_minutes = 480;   // Number of work minutes in a regular day.\n  var $rights = array();        // An array of user rights such as 'track_own_time', etc.\n  var $is_client = false;       // Whether user is a client as determined by missing 'track_own_time' right.\n\n  var $behalfUser = null;       // A ttBehalfUser instance with on behalf user attributes.\n  var $behalfGroup = null;      // A ttGroup instance with on behalf group attributes.\n\n  // Constructor.\n  function __construct($login, $id = null) {\n    if (!$login && !$id) {\n      // nothing to initialize\n      return;\n    }\n\n    $mdb2 = getConnection();\n\n    $sql = \"SELECT u.id, u.login, u.name, u.group_id, u.role_id, r.rank, r.name as role_name, r.rights, u.client_id,\".\n      \" u.quota_percent, u.email, g.org_id, g.group_key, g.name as group_name, g.currency, g.lang, g.decimal_mark, g.date_format,\".\n      \" g.time_format, g.week_start, g.tracking_mode, g.project_required, g.record_type,\".\n      \" g.bcc_email, g.allow_ip, g.password_complexity, g.plugins, g.config, g.lock_spec, g.custom_css, g.holidays, g.workday_minutes, g.custom_logo\".\n      \" FROM tt_users u LEFT JOIN tt_groups g ON (u.group_id = g.id) LEFT JOIN tt_roles r on (r.id = u.role_id) WHERE \";\n    if ($id)\n      $sql .= \"u.id = $id\";\n    else\n      $sql .= \"u.login = \".$mdb2->quote($login);\n    $sql .= \" AND u.status = 1\";\n\n    $res = $mdb2->query($sql);\n    if (is_a($res, 'PEAR_Error')) {\n      return;\n    }\n\n    $val = $res->fetchRow();\n    if ($val['id'] > 0) {\n      $this->login = $val['login'];\n      $this->name = $val['name'];\n      $this->id = $val['id'];\n      $this->org_id = $val['org_id'];\n      $this->group_id = $val['group_id'];\n      $this->group_key = $val['group_key'];\n      if ($this->org_id == $this->group_key) $this->org_key = $val['group_key'];\n      $this->role_id = $val['role_id'];\n      $this->role_name = $val['role_name'];\n      $this->rights = explode(',', $val['rights']);\n      $this->rank = $val['rank'];\n      $this->client_id = $val['client_id'];\n      $this->is_client = $this->client_id && !in_array('track_own_time', $this->rights);\n      if ($val['quota_percent']) $this->quota_percent = $val['quota_percent'];\n      $this->email = $val['email'];\n      if ($val['lang']) $this->lang = $val['lang'];\n      if ($val['decimal_mark']) $this->decimal_mark = $val['decimal_mark'];\n      $this->date_format = $val['date_format'];\n      $this->time_format = $val['time_format'];\n      $this->week_start = $val['week_start'];\n      $this->tracking_mode = $val['tracking_mode'];\n      $this->project_required = $val['project_required'];\n      $this->record_type = $val['record_type'];\n      $this->bcc_email = $val['bcc_email'];\n      $this->allow_ip = $val['allow_ip'];\n      $this->password_complexity = $val['password_complexity'];\n      $this->group_name = $val['group_name'];\n      $this->currency = $val['currency'];\n      $this->plugins = $val['plugins'];\n      $this->lock_spec = $val['lock_spec'];\n      $this->holidays = $val['holidays'];\n      $this->workday_minutes = $val['workday_minutes'];\n      $this->custom_logo = $val['custom_logo'];\n\n      // TODO: refactor this.\n      $this->config = $val['config'];\n      $this->configHelper = new ttConfigHelper($val['config']);\n\n      // Set user config options.\n      $this->punch_mode = $this->configHelper->getDefinedValue('punch_mode');\n      $this->allow_overlap = $this->configHelper->getDefinedValue('allow_overlap');\n\n      $this->custom_css = $val['custom_css'];\n\n      // Set \"on behalf\" id and name (user).\n      if (isset($_SESSION['behalf_id'])) {\n        $this->behalf_id = $_SESSION['behalf_id'];\n        $this->behalf_name = $_SESSION['behalf_name'];\n\n        $this->behalfUser = new ttBehalfUser($this->behalf_id, $this->org_id);\n      }\n      // Set \"on behalf\" id and name (group).\n      if (isset($_SESSION['behalf_group_id'])) {\n        $this->behalf_group_id = $_SESSION['behalf_group_id'];\n        $this->behalf_group_name = $_SESSION['behalf_group_name'];\n\n        $this->behalfGroup = new ttGroup($this->behalf_group_id, $this->org_id);\n      }\n    }\n  }\n\n  // getUser returns user id on behalf of whom the current user is operating.\n  function getUser() {\n    return ($this->behalfUser ? $this->behalfUser->id : $this->id);\n  }\n\n  // getName returns user name on behalf of whom the current user is operating.\n  function getName() {\n    return ($this->behalfUser ? $this->behalfUser->name : $this->name);\n  }\n\n  // getQuotaPercent returns quota percent for active user.\n  function getQuotaPercent() {\n    return ($this->behalfUser ? $this->behalfUser->quota_percent : $this->quota_percent);\n  }\n\n  // getEmail returns email for active user.\n  function getEmail() {\n    return ($this->behalfUser ? $this->behalfUser->email : $this->email);\n  }\n\n  // The getGroup returns group id on behalf of which the current user is operating.\n  function getGroup() {\n    return ($this->behalfGroup ? $this->behalfGroup->id : $this->group_id);\n  }\n\n  // getGroupName returns group name on behalf of which the current user is operating.\n  function getGroupName() {\n    return ($this->behalfGroup ? $this->behalfGroup->name : $this->group_name);\n  }\n\n  // getGroupKey returns group key for active group.\n  function getGroupKey() {\n    return ($this->behalfGroup ? $this->behalfGroup->group_key : $this->group_key);\n  }\n\n  // getOrgKey returns org key.\n  function getOrgKey() {\n    if ($this->org_key) {\n      return $this->org_key;\n    }\n\n    // Org key is not set because we are in a subgroup. Obtain it.\n    $mdb2 = getConnection();\n    $org_id = $this->org_id;\n    $sql = \"select group_key from tt_groups where id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    $val = $res->fetchRow();\n    $this->org_key = $val['group_key'];\n    return $this->org_key;\n  }\n\n  // getDecimalMark returns decimal mark for active group.\n  function getDecimalMark() {\n    return ($this->behalfGroup ? $this->behalfGroup->decimal_mark : $this->decimal_mark);\n  }\n\n  // getDateFormat returns date format for active group.\n  function getDateFormat() {\n    return ($this->behalfGroup ? $this->behalfGroup->date_format : $this->date_format);\n  }\n\n  // getTimeFormat returns time format for active group.\n  function getTimeFormat() {\n    return ($this->behalfGroup ? $this->behalfGroup->time_format : $this->time_format);\n  }\n\n  // getWeekStart returns week start day for active group.\n  function getWeekStart() {\n    return ($this->behalfGroup ? $this->behalfGroup->week_start : $this->week_start);\n  }\n\n  // getTrackingMode returns tracking mode for active group.\n  function getTrackingMode() {\n    return ($this->behalfGroup ? $this->behalfGroup->tracking_mode : $this->tracking_mode);\n  }\n\n  // getRecordType returns record type for active group.\n  function getRecordType() {\n    return ($this->behalfGroup ? $this->behalfGroup->record_type : $this->record_type);\n  }\n\n  // getCurrency returns currency string for active group.\n  function getCurrency() {\n    return ($this->behalfGroup ? $this->behalfGroup->currency : $this->currency);\n  }\n\n  // getPlugins returns plugins string for active group.\n  function getPlugins() {\n    return ($this->behalfGroup ? $this->behalfGroup->plugins : $this->plugins);\n  }\n\n  // getLockSpec returns lock specification for active group.\n  function getLockSpec() {\n    return ($this->behalfGroup ? $this->behalfGroup->lock_spec : $this->lock_spec);\n  }\n\n  // getHolidays returns holidays specification for active group.\n  function getHolidays() {\n    return ($this->behalfGroup ? $this->behalfGroup->holidays : $this->holidays);\n  }\n\n  // getWorkdayMinutes returns workday_minutes for active group.\n  function getWorkdayMinutes() {\n    return ($this->behalfGroup ? $this->behalfGroup->workday_minutes : $this->workday_minutes);\n  }\n\n  // getConfig returns config string for active group.\n  function getConfig() {\n    return ($this->behalfGroup ? $this->behalfGroup->configHelper->getConfig() : $this->configHelper->getConfig());\n  }\n\n  // getConfigHelper returns ttConfigHelper instance for active group.\n  function getConfigHelper() {\n    return ($this->behalfGroup ? $this->behalfGroup->configHelper : $this->configHelper);\n  }\n\n  // getConfigOption returns true if an option is defined for group.\n  // This helps us keeping a set of user attributes smaller.\n  // We determine whether the option is set only on pages that need to know.\n  // For example: confirm_save is used only on time and expense edit pages.\n  function getConfigOption($name) {\n    $config = new ttConfigHelper($this->getConfig());\n    return $config->getDefinedValue($name);\n  }\n\n  // getConfigInt returns an integer value defined in a group, or false.\n  function getConfigInt($name, $defaultVal = 0) {\n    $config = new ttConfigHelper($this->getConfig());\n    return $config->getIntValue($name, $defaultVal);\n  }\n\n  // getCustomCss returns custom css for active group.\n  function getCustomCss() {\n    return ($this->behalfGroup ? $this->behalfGroup->custom_css : $this->custom_css);\n  }\n\n  // can - determines whether user has a right to do something.\n  function can($do_something) {\n    return in_array($do_something, $this->rights);\n  }\n\n  // isClient - determines whether current user is a client.\n  function isClient() {\n    return $this->is_client;\n  }\n\n  // isPluginEnabled checks whether a plugin is enabled for user.\n  function isPluginEnabled($plugin)\n  {\n    return in_array($plugin, explode(',', $this->getPlugins() ? $this->getPlugins() : ''));\n  }\n\n  // isOptionEnabled checks whether a config option is enabled for user.\n  function isOptionEnabled($option)\n  {\n    return $this->behalfGroup ? $this->behalfGroup->configHelper->getDefinedValue($option) : $this->configHelper->getDefinedValue($option);\n  }\n\n  // setOption sets an option inside of ttConfigHelper instance.\n  // Note that it does not write to the database.\n  function setOption($option, $enable = true)\n  {\n    return $this->behalfGroup ? $this->behalfGroup->configHelper->setDefinedValue($option, $enable) : $this->configHelper->setDefinedValue($option, $enable);\n  }\n\n  // getAssignedProjects - returns an array of assigned projects.\n  function getAssignedProjects($options = null)\n  {\n    $result = array();\n    $mdb2 = getConnection();\n\n    $user_id = $this->getUser();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $filePart = '';\n    $fileJoin = '';\n    if (isset($options['include_files']) && $options['include_files']) {\n      $filePart = ', if(Sub1.entity_id is null, 0, 1) as has_files';\n      $fileJoin =  \" left join (select distinct entity_id from tt_files\".\n      \" where entity_type = 'project' and group_id = $group_id and org_id = $org_id and status = 1) Sub1\".\n      \" on (p.id = Sub1.entity_id)\";\n    }\n\n    // Do a query with inner join to get assigned projects.\n    $sql = \"select p.id, p.name, p.description, p.tasks, upb.rate $filePart from tt_projects p $fileJoin\".\n      \" inner join tt_user_project_binds upb on (upb.user_id = $user_id and upb.project_id = p.id and upb.status = 1)\".\n      \" where p.group_id = $group_id and p.org_id = $org_id and p.status = 1 order by p.name\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $bindTemplatesWithProjects = isset($options['include_templates']) && $options['include_templates'];\n      while ($val = $res->fetchRow()) {\n        // If we have to include templates, get them in a separate query for each project.\n        // Although, theoretically, we could use mysql group_concat, but this requires grouping by, which makes\n        // maintenance of this code more complex.\n        if ($bindTemplatesWithProjects) {\n          $val['templates'] = ttTemplateHelper::getAssignedTemplates($val['id']);\n        }\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getAssignedTasks - returns an array of assigned tasks.\n  function getAssignedTasks()\n  {\n    // Start with projects;\n    $projects = $this->getAssignedProjects();\n    if (!$projects) return false;\n\n    // Build an array of task ids.\n    $task_ids = array();\n    foreach($projects as $project) {\n      $one_project_tasks = $project['tasks'] ? explode(',', $project['tasks']) : array();\n      $task_ids = array_unique(array_merge($task_ids, $one_project_tasks));\n    }\n    if (!$task_ids) return false;\n\n    // Get task descriptions.\n    $result = array();\n    $mdb2 = getConnection();\n    $tasks = implode(',', $task_ids); // This is a comma-separated list of task ids.\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $sql = \"select id, name, description from tt_tasks\".\n      \" where group_id = $group_id and org_id = $org_id and status = 1 and id in ($tasks) order by name\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $result[] = $val;\n      }\n    }\n    return $result;\n  }\n\n  // getAssignedClients - returns an array of clients assigned to own projects.\n  function getAssignedClients()\n  {\n    // Start with projects;\n    $projects = $this->getAssignedProjects();\n    if (!$projects) return false;\n    $assigned_project_ids = array();\n    foreach($projects as $project) {\n      $assigned_project_ids[] = $project['id'];\n    }\n\n    $mdb2 = getConnection();\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    // Get active clients for group.\n    $clients = array();\n    $sql = \"select id, name, address, projects from tt_clients where group_id = $group_id and org_id = $org_id and status = 1\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $client_project_ids = $val['projects'] ? explode(',', $val['projects']) : array();\n        if (array_intersect($assigned_project_ids, $client_project_ids))\n          $clients[] = $val; // Add client if one of user projects is a client project, too.\n      }\n    }\n    return $clients;\n  }\n\n  // isDateLocked checks whether a specifc date is locked for modifications.\n  function isDateLocked($date)\n  {\n    if (!$this->isPluginEnabled('lk'))\n      return false; // Locking feature is disabled.\n\n    if (!$this->getLockSpec())\n      return false; // There is no lock specification.\n\n    if (!$this->behalf_id && $this->can('override_own_date_lock'))\n      return false; // User is working as self and can override own date lock.\n\n    if ($this->behalf_id && $this->can('override_date_lock'))\n      return false; // User is working on behalf of someone else and can override date lock.\n\n    require_once(LIBRARY_DIR.'/tdcron/class.tdcron.php');\n    require_once(LIBRARY_DIR.'/tdcron/class.tdcron.entry.php');\n\n    // Calculate the last occurrence of a lock.\n    $last = tdCron::getLastOccurrence($this->getLockSpec(), time());\n    $lockdate = new ttDate(strftime('%Y-%m-%d', $last));\n    if ($date->before($lockdate))\n      return true;\n\n    return false;\n  }\n\n  // canOverridePunchMode checks whether a user can override punch mode in a situation.\n  function canOverridePunchMode()\n  {\n    if (!$this->behalf_id && !$this->can('override_own_punch_mode'))\n      return false; // User is working as self and cannot override for self.\n\n    if ($this->behalf_id && !$this->can('override_punch_mode'))\n      return false; // User is working on behalf of someone else and cannot override.\n\n    return true;\n  }\n\n  // getUsers obtains users in a group, as specififed by options.\n  function getUsers($options) {\n    $mdb2 = getConnection();\n\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    $skipClients = !isset($options['include_clients']);\n    $includeSelf = isset($options['include_self']);\n\n    $select_part = 'select u.id, u.group_id, u.name';\n    $include_quota = false;\n    if (isset($options['include_login'])) {\n      $select_part .= ', u.login';\n      // Piggy-back on include_login to see if we must also include quota_percent.\n      $include_quota = $this->isPluginEnabled('mq');\n      if ($include_quota) {\n        $decimal_mark = $this->getDecimalMark();\n        $replaceDecimalMark = ('.' != $decimal_mark);\n        $select_part .= ', u.quota_percent';\n      }\n    }\n    if (!isset($options['include_clients'])) $select_part .= ', r.rights';\n    if (isset($options['include_role'])) $select_part .= ', r.name as role_name, r.rank';\n\n    $from_part = ' from tt_users u';\n\n    $left_joins = null;\n    if (isset($options['max_rank']) || $skipClients || isset($options['include_role']))\n      $left_joins .= ' left join tt_roles r on (u.role_id = r.id)';\n\n    $where_part = \" where u.org_id = $org_id and u.group_id = $group_id\";\n    if (isset($options['status']))\n      $where_part .= ' and u.status = '.(int)$options['status'];\n    else\n      $where_part .= ' and u.status is not null';\n    if ($includeSelf) {\n      $where_part .= \" and (u.id = $this->id || r.rank <= \".(int)$options['max_rank'].')';\n    } else {\n      if (isset($options['max_rank'])) $where_part .= ' and r.rank <= '.(int)$options['max_rank'];\n    }\n\n    $order_part = \" order by upper(u.name)\";\n\n    $sql = $select_part.$from_part.$left_joins.$where_part.$order_part;\n    $res = $mdb2->query($sql);\n    $user_list = array();\n    if (is_a($res, 'PEAR_Error'))\n      return false;\n\n    while ($val = $res->fetchRow()) {\n      if ($skipClients) {\n        $isClient = in_array('track_own_time', explode(',', $val['rights'])) ? 0 : 1; // Clients do not have track_own_time right.\n        if ($isClient)\n          continue; // Skip adding clients.\n      }\n      if ($include_quota) {\n        $quota = $val['quota_percent'];\n        if (ttEndsWith($quota, '.00'))\n          $quota = substr($quota, 0, strlen($quota)-3); // Trim trailing \".00\";\n        elseif ($replaceDecimalMark)\n          $quota = str_replace('.', $decimal_mark, $quota);\n        $val['quota_percent'] = $quota.'%';\n      }\n      $user_list[] = $val;\n    }\n\n    if (isset($options['self_first'])) {\n      // Put own entry at the front.\n      $cnt = count($user_list);\n      for($i = 0; $i < $cnt; $i++) {\n        if ($user_list[$i]['id'] == $this->id) {\n          $self = $user_list[$i]; // Found self.\n          array_unshift($user_list, $self); // Put own entry at the front.\n          array_splice($user_list, $i+1, 1); // Remove duplicate.\n        }\n      }\n    }\n    return $user_list;\n  }\n\n  // getGroupsForDropdown obtains an array of groups to populate the \"Group\" dropdown.\n  // It consists of the entire tree starting from user home group.\n  // Group name is prefixed with additional characters to indicate subgroups level.\n  function getGroupsForDropdown() {\n    global $user;\n\n    // Start with user home group.\n    $groups = array();\n    $subgroup_level = 0;\n    $group_id = $user->group_id;\n\n    $this->addGroupToDropdown($groups, $group_id, $subgroup_level);\n    return $groups;\n  }\n\n  // addGroupToDropdown is a recursive function to populate a tree of groups, used with getGroupsForDropdown().\n  function addGroupToDropdown(&$groups, $group_id, $subgroup_level) {\n    $name = '';\n    // Add indentation markup to indicate a subdirectory level.\n    for ($i = 0; $i < $subgroup_level; $i++) {\n      $name .= '*';\n      // $name .= '\ud83d\uded1'; // Unicode stop sign. Does not display properly in Chrome 98.\n    }\n    if ($subgroup_level) $name .= ' '; // Add an extra space.\n    $name .= ttGroupHelper::getGroupName($group_id);\n\n    $groups[] = array('id'=>$group_id, 'name'=>$name);\n\n    $subgroups = (array) $this->getSubgroups($group_id);\n    foreach($subgroups as $subgroup) {\n      $this->addGroupToDropdown($groups, $subgroup['id'], $subgroup_level+1);\n    }\n  }\n\n  // getSubgroups obtains a list of immediate subgroups.\n  function getSubgroups($group_id = null) {\n    $groups = array();\n    $mdb2 = getConnection();\n\n    if (!$group_id) $group_id = $this->getGroup();\n\n    $sql = \"select id, name, description from tt_groups where org_id = $this->org_id\".\n      \" and parent_id = $group_id and status is not null order by upper(name)\";\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      while ($val = $res->fetchRow()) {\n        $groups[] = $val;\n      }\n    }\n    return $groups;\n  }\n\n  // getUserDetails function returns user details.\n   function getUserDetails($user_id) {\n    $mdb2 = getConnection();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n    $uid = (int)$user_id;\n\n    // Determine max rank. If we are searching in on behalf group\n    // then rank restriction does not apply.\n    $max_rank = $this->behalfGroup ? MAX_RANK : $this->rank;\n\n    $sql =  \"select u.id, u.name, u.login, u.role_id, u.client_id, u.status, u.rate, u.quota_percent, u.email from tt_users u\".\n      \" left join tt_roles r on (u.role_id = r.id)\".\n      \" where u.id = $uid and u.group_id = $group_id and u.org_id = $org_id and u.status is not null\".\n      \" and (r.rank < $max_rank or (r.rank = $max_rank and u.id = $this->id))\"; // Users with lesser roles or self.\n    $res = $mdb2->query($sql);\n    if (!is_a($res, 'PEAR_Error')) {\n      $val = $res->fetchRow();\n      return $val;\n    }\n    return false;\n  }\n\n  // checkBehalfId checks whether behalf_id is appropriate.\n  // On behalf user must be active and have lower rank if the user is from home group,\n  // otherwise:\n  // - subgroup must ve valid;\n  // - user should be a member of it.\n  function checkBehalfId() {\n    if (!$this->behalfGroup) {\n      // Checking user from home group.\n      $options = array('status'=>ACTIVE,'max_rank'=>$this->rank-1);\n      $users = $this->getUsers($options);\n      foreach($users as $one_user) {\n        if ($one_user['id'] == $this->behalf_id)\n          return true;\n      }\n    } else {\n      // Checking user from a subgroup.\n      $group_id = $this->behalfGroup->id;\n      if (!$this->isSubgroupValid($group_id))\n        return false;\n\n      // So far, so good. Check user now.\n      $options = array('status'=>ACTIVE,'max_rank'=>MAX_RANK);\n      $users = $this->getUsers($options);\n      foreach($users as $one_user) {\n        if ($one_user['id'] == $this->behalf_id)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  // adjustBehalfId attempts to adjust behalf_id and behalf_name to a first found\n  // apropriate user.\n  //\n  // Needed for situations when user does not have do_own_something right.\n  // Example: has view_charts but does not have view_own_charts.\n  // In this case we still allow access to charts, but set behalf_id to someone else.\n  // Another example: working in a subgroup on behalf of someone else.\n  function adjustBehalfId() {\n    $rank = $this->getMaxRankForGroup($this->getGroup());\n\n    // Adjust to first found user in group.\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n    $users = $this->getUsers($options);\n    foreach($users as $one_user) {\n      // Fake loop to access first element.\n      $this->behalf_id = $one_user['id'];\n      $this->behalf_name = $one_user['name'];\n      $_SESSION['behalf_id'] = $this->behalf_id;\n      $_SESSION['behalf_name'] = $this->behalf_name;\n      return true;\n    }\n    return false;\n  }\n\n  // updateGroup updates group information with new data.\n  function updateGroup($fields) {\n    $mdb2 = getConnection();\n\n    $group_id = isset($fields['group_id']) ? $fields['group_id'] : null;\n    if ($group_id && !$this->isGroupValid($group_id)) return false;\n    if (!$group_id) $group_id = $this->getGroup();\n\n    $name_part = $description_part = $currency_part = $lang_part = $decimal_mark_part = $date_format_part = $time_format_part =\n      $week_start_part = $tracking_mode_part = $project_required_part = $record_type_part = $bcc_email_part =  $allow_ip_part =\n      $plugins_part = $config_part = $custom_css_part = $lock_spec_part = $holidays_part = $workday_minutes_part = '';\n    if (isset($fields['name'])) $name_part = ', name = '.$mdb2->quote($fields['name']);\n    if (isset($fields['description'])) $description_part = ', description = '.$mdb2->quote($fields['description']);\n    if (isset($fields['currency'])) $currency_part = ', currency = '.$mdb2->quote($fields['currency']);\n    if (isset($fields['lang'])) $lang_part = ', lang = '.$mdb2->quote($fields['lang']);\n    if (isset($fields['decimal_mark'])) $decimal_mark_part = ', decimal_mark = '.$mdb2->quote($fields['decimal_mark']);\n    if (isset($fields['date_format'])) $date_format_part = ', date_format = '.$mdb2->quote($fields['date_format']);\n    if (isset($fields['time_format'])) $time_format_part = ', time_format = '.$mdb2->quote($fields['time_format']);\n    if (isset($fields['week_start'])) $week_start_part = ', week_start = '.(int) $fields['week_start'];\n    if (isset($fields['tracking_mode'])) {\n      $tracking_mode_part = ', tracking_mode = '.(int) $fields['tracking_mode'];\n      $project_required_part = ' , project_required = '.(int) $fields['project_required'];\n    }\n    if (isset($fields['record_type'])) $record_type_part = ', record_type = '.(int) $fields['record_type'];\n    if (isset($fields['bcc_email'])) $bcc_email_part = ', bcc_email = '.$mdb2->quote($fields['bcc_email']);\n    if (isset($fields['allow_ip'])) $allow_ip_part = ', allow_ip = '.$mdb2->quote($fields['allow_ip']);\n    if (isset($fields['plugins'])) $plugins_part = ', plugins = '.$mdb2->quote($fields['plugins']);\n    if (isset($fields['config'])) $config_part = ', config = '.$mdb2->quote($fields['config']);\n    if (isset($fields['custom_css'])) $custom_css_part = ', custom_css = '.$mdb2->quote($fields['custom_css']);\n    if (isset($fields['lock_spec'])) $lock_spec_part = ', lock_spec = '.$mdb2->quote($fields['lock_spec']);\n    if (isset($fields['holidays'])) $holidays_part = ', holidays = '.$mdb2->quote($fields['holidays']);\n    if (isset($fields['workday_minutes'])) $workday_minutes_part = ', workday_minutes = '.$mdb2->quote($fields['workday_minutes']);\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$mdb2->quote($this->id);\n\n    $parts = trim($name_part.$description_part.$currency_part.$lang_part.$decimal_mark_part.$date_format_part.\n      $time_format_part.$week_start_part.$tracking_mode_part.$project_required_part.$record_type_part.\n      $bcc_email_part.$allow_ip_part.$plugins_part.$config_part.$custom_css_part.$lock_spec_part.$holidays_part.$workday_minutes_part.$modified_part, ',');\n\n    $sql = \"update tt_groups set $parts where id = $group_id and org_id = $this->org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Update entities_modified, too.\n    if (!ttGroupHelper::updateEntitiesModified())\n      return false;\n\n    return true;\n  }\n\n  // markUserDeleted marks a user in group as deleted.\n  function markUserDeleted($user_id) {\n    if (!$this->can('manage_users') || $this->id == $user_id)\n      return false;\n\n    // Make sure we operate on a legit user.\n    $user_details = $this->getUserDetails($user_id);\n    if (!$user_details) return false;\n\n    $mdb2 = getConnection();\n    $group_id = $this->getGroup();\n    $org_id = $this->org_id;\n\n    // Mark user to project binds as deleted.\n    $sql = \"update tt_user_project_binds set status = NULL where user_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user favorite reports as deleted.\n    $sql = \"update tt_fav_reports set status = NULL where user_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user custom fields as deleted,\n    require_once('plugins/CustomFields.class.php');\n    $entity_type = CustomFields::ENTITY_USER;\n    $modified_part = ', modified = now(), modified_ip = '.$mdb2->quote($_SERVER['REMOTE_ADDR']).', modified_by = '.$mdb2->quote($this->id);\n    $sql = \"update tt_entity_custom_fields set status = null $modified_part\".\n      \" where entity_type = $entity_type and entity_id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Mark user as deleted.\n    $sql = \"update tt_users set status = null $modified_part where id = $user_id\".\n      \" and group_id = $group_id and org_id = $org_id\";\n    $affected = $mdb2->exec($sql);\n    if (is_a($affected, 'PEAR_Error'))\n      return false;\n\n    // Update entities_modified, too.\n    if (!ttGroupHelper::updateEntitiesModified())\n      return false;\n\n    return true;\n  }\n\n  // isUserValid determines if a user is valid for on behalf work.\n  function isUserValid($user_id) {\n    if ($user_id == $this->id)\n      return true;\n    return ($this->getUserDetails($user_id) != null);\n  }\n\n  // isGroupValid determines if a group is valid for user.\n  function isGroupValid($group_id) {\n    if ($group_id == $this->group_id)\n      return true;\n    else\n      return $this->isSubgroupValid($group_id);\n  }\n\n  // isSubgroupValid determines if a subgroup is valid for user.\n  // A subgroup is valid if:\n  //   - user can manage_subgroups;\n  //   - subgroup is either a direct child of user group, or \"on the path\"\n  //   to it (grand-child, etc.).\n  function isSubgroupValid($subgroup_id) {\n    if (!$this->can('manage_subgroups')) return false; // User cannot manage subgroups.\n\n    $current_group_id = $subgroup_id;\n    while ($parent_group_id = ttGroupHelper::getParentGroup($current_group_id)) {\n      if ($parent_group_id == $this->group_id) {\n        return true; // Found it.\n      }\n      $current_group_id = $parent_group_id;\n    }\n    return false;\n  }\n\n  // getMaxRankForGroup determines effective user rank for a user in a given group.\n  // For home group it is the existing user rank (as per role) minus 1.\n  // For subgroups, if user can \"manage_subgroups\", it is MAX_RANK.\n  function getMaxRankForGroup($group_id) {\n\n    $max_rank = 0; // Start safely.\n    if ($this->group_id == $group_id) {\n      $max_rank = $this->rank - 1;\n      return $max_rank;\n    }\n\n    if ($this->isSubgroupValid($group_id))\n      $max_rank = MAX_RANK;\n\n    return $max_rank;\n  }\n\n  // getUserPartForHeader constructs a string for user to display on pages header.\n  // It changes with \"on behalf\" attributes for both user and group.\n  function getUserPartForHeader() {\n    global $i18n;\n    if (!$this->id) return null;\n\n    $user_part = htmlspecialchars($this->name);\n    $user_part .= ' - '.htmlspecialchars($this->role_name);\n    if ($this->behalf_id) {\n      $user_part .= ' <span class=\"onBehalf\">'.$i18n->get('label.on_behalf').' '.htmlspecialchars($this->behalf_name).'</span>';\n    }\n    if ($this->behalf_group_id) {\n      $user_part .= ',  <span class=\"onBehalf\">'.htmlspecialchars($this->behalf_group_name).'</span>';\n    } else {\n      if ($this->group_name) // Note: we did not require group names in the past.\n        $user_part .= ', '.htmlspecialchars($this->group_name);\n    }\n    return $user_part;\n  }\n\n  // setOnBehalfGroup sets on behalf group for the user in both the object and the session.\n  function setOnBehalfGroup($group_id) {\n\n    // Unset things first.\n    $this->behalf_group_id = null;\n    $this->behalf_group_name = null;\n    $this->behalf_id = null;\n    $this->behalf_name = null;\n    unset($this->behalfGroup);\n    $this->behalfGroup = null;\n    unset($_SESSION['behalf_group_id']);\n    unset($_SESSION['behalf_group_name']);\n    unset($_SESSION['behalf_id']);\n    unset($_SESSION['behalf_name']);\n\n    // Destroy report bean if it was set in session.\n    $form = new Form('dummyForm');\n    global $request;\n    $bean = new ActionForm('reportBean', $form, $request);\n    if ($bean->isSaved()) {\n      $bean->destroyBean();\n    }\n\n    // Do not do anything if we don't have rights.\n    if (!$this->can('manage_subgroups')) return;\n\n    // No need to set if group is our home group.\n    if ($group_id == $this->group_id) return;\n\n    // No need to set if subgroup is not valid.\n    if (!$this->isSubgroupValid($group_id)) return;\n\n    // We are good to set on behalf group.\n    $onBehalfGroupName = ttGroupHelper::getGroupName($group_id);\n    $_SESSION['behalf_group_id'] = $group_id;\n    $_SESSION['behalf_group_name'] = $onBehalfGroupName;\n    $this->behalf_group_id = $group_id;\n    $this->behalf_group_name = $onBehalfGroupName;\n\n    $this->behalfGroup = new ttGroup($this->behalf_group_id, $this->org_id);\n\n    // Adjust on behalf user to first found user in subgroup.\n    $this->adjustBehalfId();\n    return;\n  }\n\n  // setOnBehalfUser sets on behalf user both the object and the session.\n  function setOnBehalfUser($user_id) {\n    $uid = (int)$user_id; // In case we forgot to sanitize $user_id before getting here.\n\n    // Unset things first.\n    $this->behalf_id = null;\n    $this->behalf_name = null;\n    unset($this->behalfUser);\n    unset($_SESSION['behalf_id']);\n    unset($_SESSION['behalf_name']);\n\n    // No need to set if user is us.\n    if ($uid == $this->id) return;\n\n    // No need to set if user id is not valid.\n    if (!$this->isUserValid($uid)) return;\n\n    // We are good to set on behalf user.\n    $onBehalfUserName = ttUserHelper::getUserName($uid);\n    $_SESSION['behalf_id'] = $uid;\n    $_SESSION['behalf_name'] = $onBehalfUserName;\n    $this->behalf_id = $uid;\n    $this->behalf_name = $onBehalfUserName;\n\n    $this->behalfUser = new ttBehalfUser($this->behalf_id, $this->org_id);\n    return;\n  }\n\n  // The exists() function determines if an active user exists in context of a page.\n  // If we are working as self, true.\n  // If we are working in a subgroup with active users, true.\n  // If we are working in a subgroup without active users, false.\n  function exists() {\n    if (!$this->behalfGroup)\n      return true; // Working as self.\n    else if ($this->behalfGroup->active_users)\n      return true; // Subgroup has users.\n\n    return false;\n  }\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.20.0.5646\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "filenames": ["WEB-INF/lib/ttUser.class.php", "initialize.php"], "buggy_code_start_loc": [837, 15], "buggy_code_end_loc": [838, 16], "fixing_code_start_loc": [837, 15], "fixing_code_end_loc": [838, 16], "type": "CWE-79", "message": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. ttUser.class.php in Time Tracker versions prior to 1.20.0.5646 was not escaping primary group name for display. Because of that, it was possible for a logged in user to modify primary group name with elements of JavaScript. Such script could then be executed in user browser on subsequent requests on pages where primary group name was displayed. This is vulnerability has been fixed in version 1.20.0.5646. Users who are unable to upgrade may modify ttUser.class.php to use an additional call to htmlspecialchars when printing group name.", "other": {"cve": {"id": "CVE-2022-24708", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-24T16:15:08.300", "lastModified": "2022-03-04T17:43:37.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. ttUser.class.php in Time Tracker versions prior to 1.20.0.5646 was not escaping primary group name for display. Because of that, it was possible for a logged in user to modify primary group name with elements of JavaScript. Such script could then be executed in user browser on subsequent requests on pages where primary group name was displayed. This is vulnerability has been fixed in version 1.20.0.5646. Users who are unable to upgrade may modify ttUser.class.php to use an additional call to htmlspecialchars when printing group name."}, {"lang": "es", "value": "Anuko Time Tracker es una aplicaci\u00f3n de seguimiento del tiempo basada en la web y de c\u00f3digo abierto escrita en PHP. ttUser.class.php en Time Tracker versiones anteriores a 1.20.0.5646, no escapaba el nombre del grupo primario para su visualizaci\u00f3n. Debido a esto, era posible que un usuario conectado modificara el nombre del grupo primario con elementos de JavaScript. Dicho script pod\u00eda ser ejecutado en el navegador del usuario en peticiones posteriores en p\u00e1ginas donde fuera mostrado el nombre del grupo primario. Esta vulnerabilidad ha sido corregida en versi\u00f3n 1.20.0.5646. Los usuarios que no puedan actualizar pueden modificar ttUser.class.php para usar una llamada adicional a htmlspecialchars cuando es impreso el nombre del grupo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.20.0.5646", "matchCriteriaId": "BBE3E8DC-1EF3-451E-B15C-868B6DF653E6"}]}]}], "references": [{"url": "https://github.com/anuko/timetracker/commit/6aaad31630500d13b6c8459daa9f406fd5eb4330", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-rgcm-xgvj-5mqh", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/6aaad31630500d13b6c8459daa9f406fd5eb4330"}}