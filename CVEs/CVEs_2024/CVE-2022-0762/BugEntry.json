{"buggy_code": ["<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Cart;\n\nuse MicroweberPackages\\Cart\\Models\\Cart;\nuse MicroweberPackages\\Database\\Crud;\n\nclass CartManager extends Crud\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $coupon_data = false;\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n\n    }\n\n    /**\n     * This will sum all cart items amount\n     * @param bool $return_amount\n     * @return array|false|float|int|mixed\n     */\n    public function sum($return_amount = true)\n    {\n        if ($return_amount) {\n            return $this->app->cart_repository->getCartAmount();\n        } else {\n            return $this->app->cart_repository->getCartItemsCount();\n        }\n\n    }\n\n    public function totals($return = 'all')\n    {\n        $all_totals = array('subtotal', 'shipping', 'tax', 'discount', 'total');\n\n\n        $tax = $shipping_cost = $discount_sum = 0;\n\n        $shipping_cost = $this->app->checkout_manager->getShippingCost();\n        $shipping_modules = $this->app->checkout_manager->getShippingModules();\n\n        // Coupon code discount\n        $discount_value = $this->get_discount_value();\n        $discount_type = $this->get_discount_type();\n\n        $sum = $subtotal = $this->sum();\n\n        if ($discount_type == 'precentage' or $discount_type == 'percentage') {\n            // Discount with precentage\n            $discount_sum = ($sum * ($discount_value / 100));\n            $sum = $sum - $discount_sum;\n        } else if ($discount_type == 'fixed_amount') {\n            // Discount with amount\n            $discount_sum = $discount_value;\n            $sum = $sum - $discount_value;\n        }\n\n\n        $total = $sum + $shipping_cost;\n\n        if (get_option('enable_taxes', 'shop') == 1) {\n            if ($total > 0) {\n                $tax = $this->app->tax_manager->calculate($sum);\n                $total = $total + $tax;\n            }\n        }\n\n\n        $totals = array();\n        foreach ($all_totals as $total_key) {\n            switch ($total_key) {\n                case 'subtotal':\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Subtotal\", true),\n                        'value' => $subtotal,\n                        'amount' => currency_format($subtotal)\n                    );\n                    break;\n                case 'tax':\n                    if ($tax) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Tax\", true),\n                            'value' => $tax,\n                            'amount' => currency_format($tax)\n                        );\n                    }\n                    break;\n\n\n                case 'discount':\n                    if ($discount_sum and $discount_sum > 0) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Discount\", true),\n                            'value' => $discount_sum,\n                            'amount' => currency_format($discount_sum)\n                        );\n                    }\n                    break;\n\n                case 'shipping':\n\n                    if ($shipping_modules) {\n                        if ($shipping_cost and $shipping_cost > 0) {\n                            $totals[$total_key] = array(\n                                'label' => _e(\"Shipping\", true),\n                                'value' => $shipping_cost,\n                                'amount' => currency_format($shipping_cost)\n                            );\n                        }\n                    }\n\n\n                    break;\n\n                case 'total':\n\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Total\", true),\n                        'value' => $total,\n                        'amount' => currency_format($total)\n                    );\n\n\n                    break;\n            }\n\n\n        }\n\n        if (isset($return) and $return != 'all') {\n            if (isset($totals[$return])) {\n                return $totals[$return];\n            }\n        } else {\n            return $totals;\n        }\n\n    }\n\n    public function total()\n    {\n        $total = $this->totals('total');\n\n        if (isset($total['value'])) {\n            return $total['value'];\n        }\n    }\n\n\n    public function get_tax()\n    {\n        $sum = $this->sum();\n        $tax = $this->app->tax_manager->calculate($sum);\n\n        return $tax;\n    }\n\n    public function get_discount()\n    {\n        return $this->get_discount_value();\n    }\n\n    public function get_discount_type()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n        if (empty($data)) {\n            return false;\n        }\n        if (isset($data['discount_type'])) {\n            return $data['discount_type'];\n        }\n        return false;\n    }\n\n    public function set_coupon_data($data)\n    {\n        $this->coupon_data = $data;\n    }\n\n    public function get_discount_value()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n\n\n        if (empty($data)) {\n            return false;\n        }\n\n        if (!isset($data['discount_value'])) {\n            return false;\n        }\n\n        if (!isset($data['total_amount'])) {\n            return false;\n        }\n\n        $apply_code = false;\n        if ($this->sum() >= $data['total_amount']) {\n            $apply_code = true;\n        }\n\n        if ($apply_code) {\n            return floatval($data['discount_value']);\n        }\n\n        return false;\n    }\n\n    public function get_discount_text()\n    {\n        if ($this->get_discount_type() == \"percentage\" or $this->get_discount_type() == \"precentage\") {\n            return $this->get_discount_value() . \"%\";\n        } else {\n            return currency_format($this->get_discount_value());\n        }\n    }\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n\n        $table = $this->table;\n        $params['table'] = $table;\n        $skip_sid = false;\n        if (!defined('MW_API_CALL')) {\n            if (isset($params['order_id'])) {\n                $skip_sid = 1;\n            }\n        }\n        if ($skip_sid == false) {\n            if (!defined('MW_ORDERS_SKIP_SID')) {\n                if ($this->app->user_manager->is_admin() == false) {\n                    $params['session_id'] = mw()->user_manager->session_id();\n                } else {\n                    if (isset($params['session_id']) and $this->app->user_manager->is_admin() == true) {\n                    } else {\n                        $params['session_id'] = mw()->user_manager->session_id();\n                    }\n                }\n                if (isset($params['no_session_id']) and $this->app->user_manager->is_admin() == true) {\n                    unset($params['session_id']);\n                }\n            }\n        }\n        if (!isset($params['rel']) and isset($params['for'])) {\n            $params['rel_type'] = $params['for'];\n        } elseif (isset($params['rel']) and !isset($params['rel_type'])) {\n            $params['rel_type'] = $params['rel'];\n        }\n        if (!isset($params['rel_id']) and isset($params['for_id'])) {\n            $params['rel_id'] = $params['for_id'];\n        }\n\n        $params['limit'] = 10000;\n        if (!isset($params['order_completed'])) {\n            if (!isset($params['order_id'])) {\n                $params['order_completed'] = 0;\n            }\n        } elseif (isset($params['order_completed']) and $params['order_completed'] === 'any') {\n            unset($params['order_completed']);\n        }\n        // $params['no_cache'] = 1;\n        $get = $this->app->database_manager->get($params);\n        if (isset($params['count']) and $params['count'] != false) {\n            return $get;\n        }\n        $return = array();\n        if (is_array($get)) {\n            foreach ($get as $k => $item) {\n                if (is_array($item)) {\n                    if (isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                        $item['content_data'] = $this->app->content_manager->data($item['rel_id']);\n                        $item['url'] = $this->app->content_manager->link($item['rel_id']);\n                        $item['picture'] = $this->app->media_manager->get_picture($item['rel_id']);\n                    }\n                    if (isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                        $item = $this->app->format->render_item_custom_fields_data($item);\n                    }\n                    if (isset($item['title'])) {\n                        $item['title'] = html_entity_decode($item['title']);\n                        $item['title'] = strip_tags($item['title']);\n                        $item['title'] = $this->app->format->clean_html($item['title']);\n                        $item['title'] = htmlspecialchars_decode($item['title']);\n                    }\n                    if (!isset($item['url'])) {\n                        $item['url'] = '';\n                    }\n                    if (!isset($item['picture'])) {\n                        $item['picture'] = '';\n                    }\n                }\n\n                $return[$k] = $item;\n            }\n        } else {\n            $return = $get;\n        }\n\n        return $return;\n    }\n\n    public function get_by_order_id($order_id = false)\n    {\n        $order_id = intval($order_id);\n        if ($order_id == false) {\n            return;\n        }\n        $params = array();\n        $table = $this->table;\n        $params['table'] = $table;\n        $params['order_id'] = $order_id;\n        $get = $this->app->database_manager->get($params);\n\n        if (!empty($get)) {\n            foreach ($get as $k => $item) {\n\n                if (is_array($item) and isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                    $item = $this->app->format->render_item_custom_fields_data($item);\n                }\n\n                if (!isset($item['item_image']) and is_array($item) and isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                    $item['item_image'] = get_picture($item['rel_id']);\n                }\n\n                if (!isset($item['item_image'])) {\n                    $item['item_image'] = false;\n                }\n\n                $get[$k] = $item;\n            }\n        }\n\n        return $get;\n    }\n\n    public function remove_item($data)\n    {\n        if (!is_array($data)) {\n            $id = intval($data);\n            $data = array('id' => $id);\n        }\n\n        if (!isset($data['id']) or $data['id'] == 0) {\n            return false;\n        }\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n        // if ($this->app->user_manager->is_admin() == false) {\n        $cart['session_id'] = mw()->user_manager->session_id();\n        // }\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n\n        $checkCart = $this->get($cart);\n\n        if ($checkCart != false and is_array($checkCart)) {\n\n            $findCart = Cart::where('id', $cart['id'])->first();\n            if ($findCart) {\n                $findCart->delete();\n            }\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            return array('success' => _e('Item was removed from cart', true), 'product' => $checkCart, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => _e('Item not removed from cart', true));\n        }\n    }\n\n    public function update_item_qty($data)\n    {\n        if (!isset($data['id'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        if (!isset($data['qty'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        $data_fields = false;\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n\n        $cart['session_id'] = mw()->user_manager->session_id();\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n        $check_cart = $this->get($cart);\n        if (isset($check_cart['rel_type']) and isset($check_cart['rel_id']) and $check_cart['rel_type'] == 'content') {\n            $data_fields = $this->app->content_manager->data($check_cart['rel_id'], 1);\n            if (isset($check_cart['qty']) and isset($data_fields['qty']) and $data_fields['qty'] != 'nolimit') {\n                $old_qty = intval($data_fields['qty']);\n                if (intval($data['qty']) > $old_qty) {\n                    return array('error' => true, 'message' => _e('Quantity not changed, because there are not enough items in stock.', true), 'cart_item_quantity_available' => $check_cart['qty']);\n                }\n            }\n        }\n\n        if ($check_cart != false and is_array($check_cart)) {\n            $cart['qty'] = intval($data['qty']);\n            if ($cart['qty'] < 0) {\n                $cart['qty'] = 0;\n            }\n\n\n            if (isset($data_fields['max_qty_per_order']) and intval($data_fields['max_qty_per_order']) != 0) {\n\n                if ($cart['qty'] > intval($data_fields['max_qty_per_order'])) {\n                    $cart['qty'] = intval($data_fields['max_qty_per_order']);\n                }\n            }\n\n\n            $cart_return = $check_cart;\n\n\n            $table = $this->table;\n            $cart_data_to_save = array();\n            $cart_data_to_save['qty'] = $cart['qty'];\n            $cart_data_to_save['id'] = $cart['id'];\n            $cart_saved_id = $this->app->database_manager->save($table, $cart_data_to_save);\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => _e('Item quantity changed', true), 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n\n        }\n    }\n\n\n    public function empty_cart()\n    {\n        $sid = mw()->user_manager->session_id();\n        $cart_table = $this->table;\n\n        Cart::where('order_completed', 0)->where('session_id', $sid)->delete();\n        $this->no_cache = true;\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n\n        $cart_sum = $this->sum(true);\n        $cart_qty = $this->sum(false);\n        return array('success' => 'Cart is emptied', 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n    }\n\n    public function delete_cart($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n        if (isset($params['session_id'])) {\n            $id = $params['session_id'];\n            Cart::where('session_id', $id)->delete();\n        }\n        if (isset($params['order_id'])) {\n            $id = $params['order_id'];\n            Cart::where('order_id', $id)->delete();\n        }\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n    }\n\n    public function update_cart($data)\n    {\n        if (!isset($data['for']) and isset($data['rel_type'])) {\n            $data['for'] = $data['rel_type'];\n        }\n        if (!isset($data['for_id']) and isset($data['rel_id'])) {\n            $data['for_id'] = $data['rel_id'];\n        }\n        if (!isset($data['for']) and !isset($data['rel_type'])) {\n            $data['for'] = 'content';\n        }\n\n        if (isset($data['content_id'])) {\n            $data['for'] = 'content';\n            $for_id = $data['for_id'] = $data['content_id'];\n        }\n        $override = $this->app->event_manager->trigger('mw.shop.update_cart', $data);\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (is_array($resp) and !empty($resp)) {\n                    $data = array_merge($data, $resp);\n                }\n            }\n        }\n\n        $update_qty = 0;\n        $update_qty_new = 0;\n\n        if (isset($data['qty'])) {\n            $update_qty_new = $update_qty = intval($data['qty']);\n            unset($data['qty']);\n        }\n        if (!isset($data['for']) or !isset($data['for_id'])) {\n            if (!isset($data['id'])) {\n\n            } else {\n                $cart = array();\n                $cart['id'] = intval($data['id']);\n                $cart['limit'] = 1;\n                $data_existing = $this->get($cart);\n                if (is_array($data_existing) and is_array($data_existing[0])) {\n                    $data = array_merge($data, $data_existing[0]);\n                }\n            }\n        }\n\n\n        if (!isset($data['for']) and !isset($data['for_id'])) {\n            return array('error' => 'Invalid for and for_id params');\n        }\n\n        $data['for'] = $this->app->database_manager->assoc_table_name($data['for']);\n        $for = $data['for'];\n        $for_id = intval($data['for_id']);\n        if ($for_id == 0) {\n            return array('error' => 'Invalid data for_id');\n        }\n        $cont_data = false;\n\n        if ($update_qty > 0) {\n            $data['qty'] = $update_qty;\n        }\n\n        if ($data['for'] == 'content') {\n            $cont = $this->app->content_manager->get_by_id($for_id);\n            $cont_data = $this->app->content_manager->data($for_id);\n            if ($cont == false) {\n                return array('error' => 'Invalid product?');\n            } else {\n                if (is_array($cont) and isset($cont['title'])) {\n                    $data['title'] = $cont['title'];\n                }\n            }\n        }\n\n        if (isset($data['title']) and is_string($data['title'])) {\n            $data['title'] = (strip_tags($data['title']));\n        }\n\n        $found_price = false;\n        $add = array();\n\n        if (isset($data['custom_fields_data']) and is_array($data['custom_fields_data'])) {\n            $add = $data['custom_fields_data'];\n        }\n\n        $prices = array();\n\n        $skip_keys = array();\n\n        $content_custom_fields = $this->app->fields_manager->get([\n            'rel_type' => $for,\n            'rel_id' => $for_id,\n            'return_full' => true,\n        ]);\n\n        $product_prices = array();\n        if ($for == 'content') {\n            $prices_data = app()->shop_manager->get_product_prices($for_id, true);\n            if ($prices_data) {\n                foreach ($prices_data as $price_data) {\n                    if (isset($price_data['name'])) {\n                        $product_prices[$price_data['name']] = $price_data['value'];\n                    }\n                }\n            }\n        }\n\n        if ($content_custom_fields == false) {\n            $content_custom_fields = $data;\n\n            if (isset($data['price'])) {\n\n                if ($product_prices) {\n                    foreach ($product_prices as $price) {\n                        if ($price['value'] == $data['price']) {\n                            $found_price = $data['price'];\n                        }\n                    }\n                }\n            }\n        } elseif (is_array($content_custom_fields)) {\n            foreach ($content_custom_fields as $cf) {\n                if (isset($cf['type']) and $cf['type'] == 'price') {\n                    if (isset($product_prices[$cf['name']])) {\n                        $prices[$cf['name']] = $product_prices[$cf['name']];\n                    } else {\n                        $prices[$cf['name']] = $cf['value'];\n                    }\n                }\n            }\n        }\n\n        foreach ($data as $k => $item) {\n            if ($k != 'for' and $k != 'for_id' and $k != 'title') {\n                $found = false;\n                foreach ($content_custom_fields as $cf) {\n                    if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if (isset($cf['name']) and ($cf['name'] == $k or $key1 == $key2)) {\n                            $k = str_replace('_', ' ', $k);\n                            $found = true;\n                            if (is_array($cf['values'])) {\n                                if (in_array($item, $cf['values'])) {\n                                    $found = true;\n                                }\n                            }\n                            if ($found == false and $cf['value'] != $item) {\n                                unset($item);\n                            }\n                        }\n                    } elseif (isset($cf['type']) and $cf['type'] == 'price') {\n                        if ($cf['value'] != '') {\n                            if (isset($product_prices[$cf['name']])) {\n                                $prices[$cf['name']] = $product_prices[$cf['name']];\n                            } else {\n                                $prices[$cf['name']] = $cf['value'];\n                            }\n                        }\n                    }\n                }\n                if ($found == false) {\n                    $skip_keys[] = $k;\n                }\n\n                if (is_array($prices)) {\n                    foreach ($prices as $price_key => $price) {\n                        if (isset($data['price'])) {\n                            if ($price == $data['price']) {\n                                $found = true;\n                                $found_price = $price;\n                            }\n                        } elseif (isset($item) and $price == $item) {\n                            $found = true;\n                            if ($found_price == false) {\n                                $found_price = $item;\n                            }\n                        }\n                    }\n                    if ($found_price == false) {\n                        $found_price = array_pop($prices);\n                    } else {\n                        if (count($prices) > 1) {\n                            foreach ($prices as $pk => $pv) {\n                                if ($pv == $found_price) {\n                                    $add[$pk] = $this->app->shop_manager->currency_format($pv);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (isset($item)) {\n                    if ($found == true) {\n                        if ($k != 'price' and !in_array($k, $skip_keys)) {\n                            $add[$k] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($found_price == false and is_array($prices)) {\n            $found_price = array_pop($prices);\n        }\n        if ($found_price == false) {\n            $found_price = 0;\n        }\n\n\n        if (is_array($prices)) {\n            ksort($add);\n            asort($add);\n            $add = mw()->format->clean_xss($add);\n            $table = $this->table;\n\n\n            $cart = array();\n            $cart['rel_type'] = trim($data['for']);\n            $cart['rel_id'] = intval($data['for_id']);\n            $cart['session_id'] = mw()->user_manager->session_id();\n            $cart['no_cache'] = 1;\n            $cart['disable_triggers'] = 1;\n            $cart['order_completed'] = 0;\n            $cart['custom_fields_data'] = $this->app->format->array_to_base64($add);\n            $cart['custom_fields_json'] = json_encode($add);\n            $cart['allow_html'] = 1;\n            $cart['price'] = doubleval($found_price);\n            $cart['limit'] = 1;\n            $cart['title'] = mw()->format->clean_html($data['title']);\n\n            $cart_return['custom_fields_data'] = $add;\n            $cart_return['price'] = $cart['price'];\n\n            $findCart = Cart::where('custom_fields_data', $cart['custom_fields_data'])\n                ->where('session_id', $cart['session_id'])\n                ->where('order_completed', $cart['order_completed'])\n                ->where('rel_id', $cart['rel_id'])\n                ->where('rel_type', $cart['rel_type'])\n                ->first();\n            $check_cart = false;\n            if ($findCart !== null) {\n                $check_cart = $findCart->toArray();\n            }\n\n\n            if ($found_price and $check_cart != false and is_array($check_cart) and isset($check_cart['id'])) {\n                if ($check_cart and isset($check_cart['price']) and (doubleval($check_cart['price']) == doubleval($found_price))) {\n                    $cart['id'] = $check_cart['id'];\n                    if ($update_qty > 0) {\n                        $cart['qty'] = $check_cart['qty'] + $update_qty;\n                    } elseif ($update_qty_new > 0) {\n                        $cart['qty'] = $update_qty_new;\n                    } else {\n                        $cart['qty'] = $check_cart['qty'] + 1;\n                    }\n                }\n            } else {\n                if ($update_qty > 0) {\n                    $cart['qty'] = $update_qty;\n                } else {\n                    $cart['qty'] = 1;\n                }\n            }\n\n            if (isset($cont_data['qty']) and trim($cont_data['qty']) != 'nolimit') {\n                if (intval($cont_data['qty']) < intval($cart['qty'])) {\n                    $cart['qty'] = $cont_data['qty'];\n                }\n            }\n\n\n            if (isset($cont_data['max_qty_per_order']) and intval($cont_data['max_qty_per_order']) != 0) {\n                if ($cart['qty'] > intval($cont_data['max_qty_per_order'])) {\n                    $cart['qty'] = intval($cont_data['max_qty_per_order']);\n                }\n            }\n\n\n            if (isset($data['other_info']) and is_string($data['other_info'])) {\n                $cart['other_info'] = strip_tags($data['other_info']);\n            }\n\n            if (isset($data['description']) and is_string($data['description'])) {\n                $cart_return['description'] = $cart['description'] = $this->app->format->clean_html($data['description']);\n            }\n            if (isset($data['image']) and is_string($data['image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['image']);\n            }\n            if (isset($data['item_image']) and is_string($data['item_image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['item_image']);\n            }\n            if (isset($data['link']) and is_string($data['link'])) {\n                $cart_return['link'] = $cart['link'] = $this->app->format->clean_html($data['link']);\n            }\n\n            if (isset($data['currency']) and is_string($data['currency'])) {\n                $cart_return['currency'] = $cart['currency'] = $this->app->format->clean_html($data['link']);\n            }\n\n            // Update cart in database\n            if ($findCart == null) {\n                $findCart = new Cart();\n                $findCart->rel_id = $cart['rel_id'];\n                $findCart->rel_type = $cart['rel_type'];\n                $findCart->custom_fields_data = $cart['custom_fields_data'];\n                $findCart->custom_fields_json = $cart['custom_fields_json'];\n            }\n\n            $findCart->qty = $cart['qty'];\n            $findCart->title = $cart['title'];\n            $findCart->price = $cart['price'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->order_completed = $cart['order_completed'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->save();\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            if (isset($cart['rel_type']) and isset($cart['rel_id']) and $cart['rel_type'] == 'content') {\n                $cart_return['image'] = $this->app->media_manager->get_picture($cart['rel_id']);\n                $cart_return['product_link'] = $this->app->content_manager->link($cart['rel_id']);\n            }\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => 'Item added to cart', 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => 'Invalid cart items');\n        }\n    }\n\n    public function recover_cart($sid = false, $ord_id = false)\n    {\n        if ($sid == false) {\n            return;\n        }\n        $cur_sid = mw()->user_manager->session_id();\n        if ($cur_sid == false) {\n            return;\n        } else {\n\n\n            if ($cur_sid != false) {\n                $c_id = $sid;\n                $table = $this->table;\n                $params = array();\n                //   $params['order_completed'] = 0;\n                $params['session_id'] = $c_id;\n                $params['table'] = $table;\n                if ($ord_id != false) {\n                    unset($params['order_completed']);\n                    $params['order_id'] = intval($ord_id);\n                }\n\n                $will_add = true;\n                $res = $this->app->database_manager->get($params);\n\n                if (!empty($res)) {\n                    foreach ($res as $item) {\n                        if (isset($item['id'])) {\n                            $data = $item;\n                            unset($data['id']);\n                            if (isset($item['order_id'])) {\n                                unset($data['order_id']);\n                            }\n                            if (isset($item['created_by'])) {\n                                unset($data['created_by']);\n                            }\n                            if (isset($item['updated_at'])) {\n                                unset($data['updated_at']);\n                            }\n                            if (isset($item['rel_type']) and isset($item['rel_id'])) {\n                                $is_ex_params = array();\n                                $is_ex_params['order_completed'] = 0;\n                                $is_ex_params['session_id'] = $cur_sid;\n                                $is_ex_params['table'] = $table;\n                                $is_ex_params['rel_type'] = $item['rel_type'];\n                                $is_ex_params['rel_id'] = $item['rel_id'];\n                                $is_ex_params['count'] = 1;\n\n                                $is_ex = $this->app->database_manager->get($is_ex_params);\n\n                                if ($is_ex != false) {\n                                    $will_add = false;\n                                }\n                            }\n                            $data['order_completed'] = 0;\n                            $data['session_id'] = $cur_sid;\n\n                            if (isset($item['order_completed']) and intval($item['order_completed']) == 1) {\n                                if ($sid == $cur_sid) {\n                                    if (isset($item['is_paid']) and intval($item['is_paid']) == 0) {\n                                        $data['id'] = $item['id'];\n                                    }\n                                }\n                            }\n                            if ($will_add == true) {\n                                $s = $this->app->database_manager->save($table, $data);\n                            }\n                        }\n                    }\n                }\n                if ($will_add == true) {\n                    $this->app->cache_manager->delete('cart');\n\n                    $this->app->cache_manager->delete('cart_orders');\n                }\n            }\n        }\n    }\n\n    public function table_name()\n    {\n        return $this->table;\n    }\n\n\n    public function is_product_in_stock($content_id)\n    {\n\n        $item = content_data($content_id);\n        $isInStock = true;\n        if ($item) {\n            if (isset($item['qty']) and $item['qty'] != 'nolimit') {\n                $quantity = intval($item['qty']);\n                if ($quantity < 1) {\n                    $isInStock = false;\n                }\n            }\n\n        }\n\n        return $isInStock;\n    }\n\n    public function couponCodeGetDataFromSession()\n    {\n        $coupon_code = $this->app->user_manager->session_get('coupon_code');\n        if ($coupon_code and !$this->couponCodeCheckIfValid($coupon_code)) {\n            //check if coupon is valid\n            if (function_exists('coupons_delete_session')) {\n                coupons_delete_session();\n            }\n\n            $this->coupon_data = false;\n        } else {\n            if (function_exists('coupon_get_by_code')) {\n                $this->coupon_data = coupon_get_by_code($coupon_code);\n            } else {\n                $this->coupon_data = false;\n            }\n        }\n        return $this->coupon_data;\n    }\n\n    public function couponCodeCheckIfValid($coupon_code)\n    {\n        if (function_exists('coupon_apply')) {\n            //check if coupon is valid\n            $coupon_valid = coupon_apply([\n                'coupon_code' => $coupon_code,\n                'coupon_check_if_valid' => true\n            ]);\n            if (!$coupon_valid) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n\n    }\n\n\n}\n"], "fixing_code": ["<?php\n/*\n * This file is part of the Microweber framework.\n *\n * (c) Microweber CMS LTD\n *\n * For full license information see\n * https://github.com/microweber/microweber/blob/master/LICENSE\n *\n */\n\nnamespace MicroweberPackages\\Cart;\n\nuse MicroweberPackages\\Cart\\Models\\Cart;\nuse MicroweberPackages\\Database\\Crud;\n\nclass CartManager extends Crud\n{\n    /** @var \\MicroweberPackages\\App\\LaravelApplication */\n    public $app;\n\n    public $table = 'cart';\n    public $coupon_data = false;\n\n    public function __construct($app = null)\n    {\n        if (is_object($app)) {\n            $this->app = $app;\n        } else {\n            $this->app = mw();\n        }\n\n\n    }\n\n    /**\n     * This will sum all cart items amount\n     * @param bool $return_amount\n     * @return array|false|float|int|mixed\n     */\n    public function sum($return_amount = true)\n    {\n        if ($return_amount) {\n            return $this->app->cart_repository->getCartAmount();\n        } else {\n            return $this->app->cart_repository->getCartItemsCount();\n        }\n\n    }\n\n    public function totals($return = 'all')\n    {\n        $all_totals = array('subtotal', 'shipping', 'tax', 'discount', 'total');\n\n\n        $tax = $shipping_cost = $discount_sum = 0;\n\n        $shipping_cost = $this->app->checkout_manager->getShippingCost();\n        $shipping_modules = $this->app->checkout_manager->getShippingModules();\n\n        // Coupon code discount\n        $discount_value = $this->get_discount_value();\n        $discount_type = $this->get_discount_type();\n\n        $sum = $subtotal = $this->sum();\n\n        if ($discount_type == 'precentage' or $discount_type == 'percentage') {\n            // Discount with precentage\n            $discount_sum = ($sum * ($discount_value / 100));\n            $sum = $sum - $discount_sum;\n        } else if ($discount_type == 'fixed_amount') {\n            // Discount with amount\n            $discount_sum = $discount_value;\n            $sum = $sum - $discount_value;\n        }\n\n\n        $total = $sum + $shipping_cost;\n\n        if (get_option('enable_taxes', 'shop') == 1) {\n            if ($total > 0) {\n                $tax = $this->app->tax_manager->calculate($sum);\n                $total = $total + $tax;\n            }\n        }\n\n\n        $totals = array();\n        foreach ($all_totals as $total_key) {\n            switch ($total_key) {\n                case 'subtotal':\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Subtotal\", true),\n                        'value' => $subtotal,\n                        'amount' => currency_format($subtotal)\n                    );\n                    break;\n                case 'tax':\n                    if ($tax) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Tax\", true),\n                            'value' => $tax,\n                            'amount' => currency_format($tax)\n                        );\n                    }\n                    break;\n\n\n                case 'discount':\n                    if ($discount_sum and $discount_sum > 0) {\n                        $totals[$total_key] = array(\n                            'label' => _e(\"Discount\", true),\n                            'value' => $discount_sum,\n                            'amount' => currency_format($discount_sum)\n                        );\n                    }\n                    break;\n\n                case 'shipping':\n\n                    if ($shipping_modules) {\n                        if ($shipping_cost and $shipping_cost > 0) {\n                            $totals[$total_key] = array(\n                                'label' => _e(\"Shipping\", true),\n                                'value' => $shipping_cost,\n                                'amount' => currency_format($shipping_cost)\n                            );\n                        }\n                    }\n\n\n                    break;\n\n                case 'total':\n\n                    $totals[$total_key] = array(\n                        'label' => _e(\"Total\", true),\n                        'value' => $total,\n                        'amount' => currency_format($total)\n                    );\n\n\n                    break;\n            }\n\n\n        }\n\n        if (isset($return) and $return != 'all') {\n            if (isset($totals[$return])) {\n                return $totals[$return];\n            }\n        } else {\n            return $totals;\n        }\n\n    }\n\n    public function total()\n    {\n        $total = $this->totals('total');\n\n        if (isset($total['value'])) {\n            return $total['value'];\n        }\n    }\n\n\n    public function get_tax()\n    {\n        $sum = $this->sum();\n        $tax = $this->app->tax_manager->calculate($sum);\n\n        return $tax;\n    }\n\n    public function get_discount()\n    {\n        return $this->get_discount_value();\n    }\n\n    public function get_discount_type()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n        if (empty($data)) {\n            return false;\n        }\n        if (isset($data['discount_type'])) {\n            return $data['discount_type'];\n        }\n        return false;\n    }\n\n    public function set_coupon_data($data)\n    {\n        $this->coupon_data = $data;\n    }\n\n    public function get_discount_value()\n    {\n        $data = $this->couponCodeGetDataFromSession();\n\n\n        if (empty($data)) {\n            return false;\n        }\n\n        if (!isset($data['discount_value'])) {\n            return false;\n        }\n\n        if (!isset($data['total_amount'])) {\n            return false;\n        }\n\n        $apply_code = false;\n        if ($this->sum() >= $data['total_amount']) {\n            $apply_code = true;\n        }\n\n        if ($apply_code) {\n            return floatval($data['discount_value']);\n        }\n\n        return false;\n    }\n\n    public function get_discount_text()\n    {\n        if ($this->get_discount_type() == \"percentage\" or $this->get_discount_type() == \"precentage\") {\n            return $this->get_discount_value() . \"%\";\n        } else {\n            return currency_format($this->get_discount_value());\n        }\n    }\n\n    public function get($params = false)\n    {\n        $params2 = array();\n\n        if (is_string($params)) {\n            $params = parse_str($params, $params2);\n            $params = $params2;\n        }\n\n        $table = $this->table;\n        $params['table'] = $table;\n        $skip_sid = false;\n        if (!defined('MW_API_CALL')) {\n            if (isset($params['order_id'])) {\n                $skip_sid = 1;\n            }\n        }\n        if ($skip_sid == false) {\n            if (!defined('MW_ORDERS_SKIP_SID')) {\n                if ($this->app->user_manager->is_admin() == false) {\n                    $params['session_id'] = mw()->user_manager->session_id();\n                } else {\n                    if (isset($params['session_id']) and $this->app->user_manager->is_admin() == true) {\n                    } else {\n                        $params['session_id'] = mw()->user_manager->session_id();\n                    }\n                }\n                if (isset($params['no_session_id']) and $this->app->user_manager->is_admin() == true) {\n                    unset($params['session_id']);\n                }\n            }\n        }\n        if (!isset($params['rel']) and isset($params['for'])) {\n            $params['rel_type'] = $params['for'];\n        } elseif (isset($params['rel']) and !isset($params['rel_type'])) {\n            $params['rel_type'] = $params['rel'];\n        }\n        if (!isset($params['rel_id']) and isset($params['for_id'])) {\n            $params['rel_id'] = $params['for_id'];\n        }\n\n        $params['limit'] = 10000;\n        if (!isset($params['order_completed'])) {\n            if (!isset($params['order_id'])) {\n                $params['order_completed'] = 0;\n            }\n        } elseif (isset($params['order_completed']) and $params['order_completed'] === 'any') {\n            unset($params['order_completed']);\n        }\n        // $params['no_cache'] = 1;\n        $get = $this->app->database_manager->get($params);\n        if (isset($params['count']) and $params['count'] != false) {\n            return $get;\n        }\n        $return = array();\n        if (is_array($get)) {\n            foreach ($get as $k => $item) {\n                if (is_array($item)) {\n                    if (isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                        $item['content_data'] = $this->app->content_manager->data($item['rel_id']);\n                        $item['url'] = $this->app->content_manager->link($item['rel_id']);\n                        $item['picture'] = $this->app->media_manager->get_picture($item['rel_id']);\n                    }\n                    if (isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                        $item = $this->app->format->render_item_custom_fields_data($item);\n                    }\n                    if (isset($item['title'])) {\n                        $item['title'] = html_entity_decode($item['title']);\n                        $item['title'] = strip_tags($item['title']);\n                        $item['title'] = $this->app->format->clean_html($item['title']);\n                        $item['title'] = htmlspecialchars_decode($item['title']);\n                    }\n                    if (!isset($item['url'])) {\n                        $item['url'] = '';\n                    }\n                    if (!isset($item['picture'])) {\n                        $item['picture'] = '';\n                    }\n                }\n\n                $return[$k] = $item;\n            }\n        } else {\n            $return = $get;\n        }\n\n        return $return;\n    }\n\n    public function get_by_order_id($order_id = false)\n    {\n        $order_id = intval($order_id);\n        if ($order_id == false) {\n            return;\n        }\n        $params = array();\n        $table = $this->table;\n        $params['table'] = $table;\n        $params['order_id'] = $order_id;\n        $get = $this->app->database_manager->get($params);\n\n        if (!empty($get)) {\n            foreach ($get as $k => $item) {\n\n                if (is_array($item) and isset($item['custom_fields_data']) and $item['custom_fields_data'] != '') {\n                    $item = $this->app->format->render_item_custom_fields_data($item);\n                }\n\n                if (!isset($item['item_image']) and is_array($item) and isset($item['rel_id']) and isset($item['rel_type']) and $item['rel_type'] == 'content') {\n                    $item['item_image'] = get_picture($item['rel_id']);\n                }\n\n                if (!isset($item['item_image'])) {\n                    $item['item_image'] = false;\n                }\n\n                $get[$k] = $item;\n            }\n        }\n\n        return $get;\n    }\n\n    public function remove_item($data)\n    {\n        if (!is_array($data)) {\n            $id = intval($data);\n            $data = array('id' => $id);\n        }\n\n        if (!isset($data['id']) or $data['id'] == 0) {\n            return false;\n        }\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n        // if ($this->app->user_manager->is_admin() == false) {\n        $cart['session_id'] = mw()->user_manager->session_id();\n        // }\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n\n        $checkCart = $this->get($cart);\n\n        if ($checkCart != false and is_array($checkCart)) {\n\n            $findCart = Cart::where('id', $cart['id'])->first();\n            if ($findCart) {\n                $findCart->delete();\n            }\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            return array('success' => _e('Item was removed from cart', true), 'product' => $checkCart, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => _e('Item not removed from cart', true));\n        }\n    }\n\n    public function update_item_qty($data)\n    {\n        if (!isset($data['id'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        if (!isset($data['qty'])) {\n            return array('error' => _e('Invalid data', true));\n        }\n        $data_fields = false;\n\n        $cart = array();\n        $cart['id'] = intval($data['id']);\n\n\n        $cart['session_id'] = mw()->user_manager->session_id();\n\n        $cart['order_completed'] = 0;\n        $cart['one'] = 1;\n        $cart['limit'] = 1;\n        $check_cart = $this->get($cart);\n        if (isset($check_cart['rel_type']) and isset($check_cart['rel_id']) and $check_cart['rel_type'] == 'content') {\n            $data_fields = $this->app->content_manager->data($check_cart['rel_id'], 1);\n            if (isset($check_cart['qty']) and isset($data_fields['qty']) and $data_fields['qty'] != 'nolimit') {\n                $old_qty = intval($data_fields['qty']);\n                if (intval($data['qty']) > $old_qty) {\n                    return array('error' => true, 'message' => _e('Quantity not changed, because there are not enough items in stock.', true), 'cart_item_quantity_available' => $check_cart['qty']);\n                }\n            }\n        }\n\n        if ($check_cart != false and is_array($check_cart)) {\n            $cart['qty'] = intval($data['qty']);\n            if ($cart['qty'] < 0) {\n                $cart['qty'] = 0;\n            }\n\n\n            if (isset($data_fields['max_qty_per_order']) and intval($data_fields['max_qty_per_order']) != 0) {\n\n                if ($cart['qty'] > intval($data_fields['max_qty_per_order'])) {\n                    $cart['qty'] = intval($data_fields['max_qty_per_order']);\n                }\n            }\n\n\n            $cart_return = $check_cart;\n\n\n            $table = $this->table;\n            $cart_data_to_save = array();\n            $cart_data_to_save['qty'] = $cart['qty'];\n            $cart_data_to_save['id'] = $cart['id'];\n            $cart_saved_id = $this->app->database_manager->save($table, $cart_data_to_save);\n\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => _e('Item quantity changed', true), 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n\n        }\n    }\n\n\n    public function empty_cart()\n    {\n        $sid = mw()->user_manager->session_id();\n        $cart_table = $this->table;\n\n        Cart::where('order_completed', 0)->where('session_id', $sid)->delete();\n        $this->no_cache = true;\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n\n        $cart_sum = $this->sum(true);\n        $cart_qty = $this->sum(false);\n        return array('success' => 'Cart is emptied', 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n\n    }\n\n    public function delete_cart($params)\n    {\n        if (is_string($params)) {\n            $params = parse_params($params);\n        }\n        if (isset($params['session_id'])) {\n            $id = $params['session_id'];\n            Cart::where('session_id', $id)->delete();\n        }\n        if (isset($params['order_id'])) {\n            $id = $params['order_id'];\n            Cart::where('order_id', $id)->delete();\n        }\n        $this->app->cache_manager->delete('cart');\n        $this->app->cache_manager->delete('cart_orders');\n    }\n\n    public function update_cart($data)\n    {\n        if (!isset($data['for']) and isset($data['rel_type'])) {\n            $data['for'] = $data['rel_type'];\n        }\n        if (!isset($data['for_id']) and isset($data['rel_id'])) {\n            $data['for_id'] = $data['rel_id'];\n        }\n        if (!isset($data['for']) and !isset($data['rel_type'])) {\n            $data['for'] = 'content';\n        }\n\n        if (isset($data['content_id'])) {\n            $data['for'] = 'content';\n            $for_id = $data['for_id'] = $data['content_id'];\n        }\n        $override = $this->app->event_manager->trigger('mw.shop.update_cart', $data);\n        if (is_array($override)) {\n            foreach ($override as $resp) {\n                if (is_array($resp) and !empty($resp)) {\n                    $data = array_merge($data, $resp);\n                }\n            }\n        }\n\n        $update_qty = 0;\n        $update_qty_new = 0;\n\n        if (isset($data['qty'])) {\n            $update_qty_new = $update_qty = intval($data['qty']);\n            unset($data['qty']);\n        }\n        if (!isset($data['for']) or !isset($data['for_id'])) {\n            if (!isset($data['id'])) {\n\n            } else {\n                $cart = array();\n                $cart['id'] = intval($data['id']);\n                $cart['limit'] = 1;\n                $data_existing = $this->get($cart);\n                if (is_array($data_existing) and is_array($data_existing[0])) {\n                    $data = array_merge($data, $data_existing[0]);\n                }\n            }\n        }\n\n\n        if (!isset($data['for']) and !isset($data['for_id'])) {\n            return array('error' => 'Invalid for and for_id params');\n        }\n\n        $data['for'] = $this->app->database_manager->assoc_table_name($data['for']);\n        $for = $data['for'];\n        $for_id = intval($data['for_id']);\n        if ($for_id == 0) {\n            return array('error' => 'Invalid data for_id');\n        }\n        $cont_data = false;\n\n        if ($update_qty > 0) {\n            $data['qty'] = $update_qty;\n        }\n\n        if ($data['for'] == 'content') {\n\n            $cont = $this->app->content_manager->get_by_id($for_id);\n\n            if (isset($cont['is_active'])) {\n                if ($cont['is_active'] != 1) {\n                    $cont = false;\n                }\n            }\n\n            if (isset($cont['is_deleted'])) {\n                if ($cont['is_deleted'] > 0) {\n                    $cont = false;\n                }\n            }\n\n            $cont_data = $this->app->content_manager->data($for_id);\n            if ($cont == false) {\n                return array('error' => 'Invalid product?');\n            } else {\n                if (is_array($cont) and isset($cont['title'])) {\n                    $data['title'] = $cont['title'];\n                }\n            }\n        }\n\n        if (isset($data['title']) and is_string($data['title'])) {\n            $data['title'] = (strip_tags($data['title']));\n        }\n\n        $found_price = false;\n        $add = array();\n\n        if (isset($data['custom_fields_data']) and is_array($data['custom_fields_data'])) {\n            $add = $data['custom_fields_data'];\n        }\n\n        $prices = array();\n\n        $skip_keys = array();\n\n        $content_custom_fields = $this->app->fields_manager->get([\n            'rel_type' => $for,\n            'rel_id' => $for_id,\n            'return_full' => true,\n        ]);\n\n        $product_prices = array();\n        if ($for == 'content') {\n            $prices_data = app()->shop_manager->get_product_prices($for_id, true);\n            if ($prices_data) {\n                foreach ($prices_data as $price_data) {\n                    if (isset($price_data['name'])) {\n                        $product_prices[$price_data['name']] = $price_data['value'];\n                    }\n                }\n            }\n        }\n\n        if ($content_custom_fields == false) {\n            $content_custom_fields = $data;\n\n            if (isset($data['price'])) {\n\n                if ($product_prices) {\n                    foreach ($product_prices as $price) {\n                        if ($price['value'] == $data['price']) {\n                            $found_price = $data['price'];\n                        }\n                    }\n                }\n            }\n        } elseif (is_array($content_custom_fields)) {\n            foreach ($content_custom_fields as $cf) {\n                if (isset($cf['type']) and $cf['type'] == 'price') {\n                    if (isset($product_prices[$cf['name']])) {\n                        $prices[$cf['name']] = $product_prices[$cf['name']];\n                    } else {\n                        $prices[$cf['name']] = $cf['value'];\n                    }\n                }\n            }\n        }\n\n        foreach ($data as $k => $item) {\n            if ($k != 'for' and $k != 'for_id' and $k != 'title') {\n                $found = false;\n                foreach ($content_custom_fields as $cf) {\n                    if (isset($cf['type']) and isset($cf['name']) and $cf['type'] != 'price') {\n                        $key1 = str_replace('_', ' ', $cf['name']);\n                        $key2 = str_replace('_', ' ', $k);\n                        if (isset($cf['name']) and ($cf['name'] == $k or $key1 == $key2)) {\n                            $k = str_replace('_', ' ', $k);\n                            $found = true;\n                            if (is_array($cf['values'])) {\n                                if (in_array($item, $cf['values'])) {\n                                    $found = true;\n                                }\n                            }\n                            if ($found == false and $cf['value'] != $item) {\n                                unset($item);\n                            }\n                        }\n                    } elseif (isset($cf['type']) and $cf['type'] == 'price') {\n                        if ($cf['value'] != '') {\n                            if (isset($product_prices[$cf['name']])) {\n                                $prices[$cf['name']] = $product_prices[$cf['name']];\n                            } else {\n                                $prices[$cf['name']] = $cf['value'];\n                            }\n                        }\n                    }\n                }\n                if ($found == false) {\n                    $skip_keys[] = $k;\n                }\n\n                if (is_array($prices)) {\n                    foreach ($prices as $price_key => $price) {\n                        if (isset($data['price'])) {\n                            if ($price == $data['price']) {\n                                $found = true;\n                                $found_price = $price;\n                            }\n                        } elseif (isset($item) and $price == $item) {\n                            $found = true;\n                            if ($found_price == false) {\n                                $found_price = $item;\n                            }\n                        }\n                    }\n                    if ($found_price == false) {\n                        $found_price = array_pop($prices);\n                    } else {\n                        if (count($prices) > 1) {\n                            foreach ($prices as $pk => $pv) {\n                                if ($pv == $found_price) {\n                                    $add[$pk] = $this->app->shop_manager->currency_format($pv);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (isset($item)) {\n                    if ($found == true) {\n                        if ($k != 'price' and !in_array($k, $skip_keys)) {\n                            $add[$k] = $this->app->format->clean_html($item);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($found_price == false and is_array($prices)) {\n            $found_price = array_pop($prices);\n        }\n        if ($found_price == false) {\n            $found_price = 0;\n        }\n\n\n        if (is_array($prices)) {\n            ksort($add);\n            asort($add);\n            $add = mw()->format->clean_xss($add);\n            $table = $this->table;\n\n\n            $cart = array();\n            $cart['rel_type'] = trim($data['for']);\n            $cart['rel_id'] = intval($data['for_id']);\n            $cart['session_id'] = mw()->user_manager->session_id();\n            $cart['no_cache'] = 1;\n            $cart['disable_triggers'] = 1;\n            $cart['order_completed'] = 0;\n            $cart['custom_fields_data'] = $this->app->format->array_to_base64($add);\n            $cart['custom_fields_json'] = json_encode($add);\n            $cart['allow_html'] = 1;\n            $cart['price'] = doubleval($found_price);\n            $cart['limit'] = 1;\n            $cart['title'] = mw()->format->clean_html($data['title']);\n\n            $cart_return['custom_fields_data'] = $add;\n            $cart_return['price'] = $cart['price'];\n\n            $findCart = Cart::where('custom_fields_data', $cart['custom_fields_data'])\n                ->where('session_id', $cart['session_id'])\n                ->where('order_completed', $cart['order_completed'])\n                ->where('rel_id', $cart['rel_id'])\n                ->where('rel_type', $cart['rel_type'])\n                ->first();\n            $check_cart = false;\n            if ($findCart !== null) {\n                $check_cart = $findCart->toArray();\n            }\n\n\n            if ($found_price and $check_cart != false and is_array($check_cart) and isset($check_cart['id'])) {\n                if ($check_cart and isset($check_cart['price']) and (doubleval($check_cart['price']) == doubleval($found_price))) {\n                    $cart['id'] = $check_cart['id'];\n                    if ($update_qty > 0) {\n                        $cart['qty'] = $check_cart['qty'] + $update_qty;\n                    } elseif ($update_qty_new > 0) {\n                        $cart['qty'] = $update_qty_new;\n                    } else {\n                        $cart['qty'] = $check_cart['qty'] + 1;\n                    }\n                }\n            } else {\n                if ($update_qty > 0) {\n                    $cart['qty'] = $update_qty;\n                } else {\n                    $cart['qty'] = 1;\n                }\n            }\n\n            if (isset($cont_data['qty']) and trim($cont_data['qty']) != 'nolimit') {\n                if (intval($cont_data['qty']) < intval($cart['qty'])) {\n                    $cart['qty'] = $cont_data['qty'];\n                }\n            }\n\n\n            if (isset($cont_data['max_qty_per_order']) and intval($cont_data['max_qty_per_order']) != 0) {\n                if ($cart['qty'] > intval($cont_data['max_qty_per_order'])) {\n                    $cart['qty'] = intval($cont_data['max_qty_per_order']);\n                }\n            }\n\n\n            if (isset($data['other_info']) and is_string($data['other_info'])) {\n                $cart['other_info'] = strip_tags($data['other_info']);\n            }\n\n            if (isset($data['description']) and is_string($data['description'])) {\n                $cart_return['description'] = $cart['description'] = $this->app->format->clean_html($data['description']);\n            }\n            if (isset($data['image']) and is_string($data['image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['image']);\n            }\n            if (isset($data['item_image']) and is_string($data['item_image'])) {\n                $cart_return['item_image'] = $cart['item_image'] = $this->app->format->clean_html($data['item_image']);\n            }\n            if (isset($data['link']) and is_string($data['link'])) {\n                $cart_return['link'] = $cart['link'] = $this->app->format->clean_html($data['link']);\n            }\n\n            if (isset($data['currency']) and is_string($data['currency'])) {\n                $cart_return['currency'] = $cart['currency'] = $this->app->format->clean_html($data['link']);\n            }\n\n            // Update cart in database\n            if ($findCart == null) {\n                $findCart = new Cart();\n                $findCart->rel_id = $cart['rel_id'];\n                $findCart->rel_type = $cart['rel_type'];\n                $findCart->custom_fields_data = $cart['custom_fields_data'];\n                $findCart->custom_fields_json = $cart['custom_fields_json'];\n            }\n\n            $findCart->qty = $cart['qty'];\n            $findCart->title = $cart['title'];\n            $findCart->price = $cart['price'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->order_completed = $cart['order_completed'];\n            $findCart->session_id = $cart['session_id'];\n            $findCart->save();\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            if (isset($cart['rel_type']) and isset($cart['rel_id']) and $cart['rel_type'] == 'content') {\n                $cart_return['image'] = $this->app->media_manager->get_picture($cart['rel_id']);\n                $cart_return['product_link'] = $this->app->content_manager->link($cart['rel_id']);\n            }\n            $cart_sum = $this->sum(true);\n            $cart_qty = $this->sum(false);\n\n            $this->app->cache_manager->delete('cart');\n            $this->app->cache_manager->delete('cart_orders');\n\n            return array('success' => 'Item added to cart', 'product' => $cart_return, 'cart_sum' => $cart_sum, 'cart_items_quantity' => $cart_qty);\n        } else {\n            return array('error' => 'Invalid cart items');\n        }\n    }\n\n    public function recover_cart($sid = false, $ord_id = false)\n    {\n        if ($sid == false) {\n            return;\n        }\n        $cur_sid = mw()->user_manager->session_id();\n        if ($cur_sid == false) {\n            return;\n        } else {\n\n\n            if ($cur_sid != false) {\n                $c_id = $sid;\n                $table = $this->table;\n                $params = array();\n                //   $params['order_completed'] = 0;\n                $params['session_id'] = $c_id;\n                $params['table'] = $table;\n                if ($ord_id != false) {\n                    unset($params['order_completed']);\n                    $params['order_id'] = intval($ord_id);\n                }\n\n                $will_add = true;\n                $res = $this->app->database_manager->get($params);\n\n                if (!empty($res)) {\n                    foreach ($res as $item) {\n                        if (isset($item['id'])) {\n                            $data = $item;\n                            unset($data['id']);\n                            if (isset($item['order_id'])) {\n                                unset($data['order_id']);\n                            }\n                            if (isset($item['created_by'])) {\n                                unset($data['created_by']);\n                            }\n                            if (isset($item['updated_at'])) {\n                                unset($data['updated_at']);\n                            }\n                            if (isset($item['rel_type']) and isset($item['rel_id'])) {\n                                $is_ex_params = array();\n                                $is_ex_params['order_completed'] = 0;\n                                $is_ex_params['session_id'] = $cur_sid;\n                                $is_ex_params['table'] = $table;\n                                $is_ex_params['rel_type'] = $item['rel_type'];\n                                $is_ex_params['rel_id'] = $item['rel_id'];\n                                $is_ex_params['count'] = 1;\n\n                                $is_ex = $this->app->database_manager->get($is_ex_params);\n\n                                if ($is_ex != false) {\n                                    $will_add = false;\n                                }\n                            }\n                            $data['order_completed'] = 0;\n                            $data['session_id'] = $cur_sid;\n\n                            if (isset($item['order_completed']) and intval($item['order_completed']) == 1) {\n                                if ($sid == $cur_sid) {\n                                    if (isset($item['is_paid']) and intval($item['is_paid']) == 0) {\n                                        $data['id'] = $item['id'];\n                                    }\n                                }\n                            }\n                            if ($will_add == true) {\n                                $s = $this->app->database_manager->save($table, $data);\n                            }\n                        }\n                    }\n                }\n                if ($will_add == true) {\n                    $this->app->cache_manager->delete('cart');\n\n                    $this->app->cache_manager->delete('cart_orders');\n                }\n            }\n        }\n    }\n\n    public function table_name()\n    {\n        return $this->table;\n    }\n\n\n    public function is_product_in_stock($content_id)\n    {\n\n        $item = content_data($content_id);\n        $isInStock = true;\n        if ($item) {\n            if (isset($item['qty']) and $item['qty'] != 'nolimit') {\n                $quantity = intval($item['qty']);\n                if ($quantity < 1) {\n                    $isInStock = false;\n                }\n            }\n\n        }\n\n        return $isInStock;\n    }\n\n    public function couponCodeGetDataFromSession()\n    {\n        $coupon_code = $this->app->user_manager->session_get('coupon_code');\n        if ($coupon_code and !$this->couponCodeCheckIfValid($coupon_code)) {\n            //check if coupon is valid\n            if (function_exists('coupons_delete_session')) {\n                coupons_delete_session();\n            }\n\n            $this->coupon_data = false;\n        } else {\n            if (function_exists('coupon_get_by_code')) {\n                $this->coupon_data = coupon_get_by_code($coupon_code);\n            } else {\n                $this->coupon_data = false;\n            }\n        }\n        return $this->coupon_data;\n    }\n\n    public function couponCodeCheckIfValid($coupon_code)\n    {\n        if (function_exists('coupon_apply')) {\n            //check if coupon is valid\n            $coupon_valid = coupon_apply([\n                'coupon_code' => $coupon_code,\n                'coupon_check_if_valid' => true\n            ]);\n            if (!$coupon_valid) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n\n    }\n\n\n}\n"], "filenames": ["src/MicroweberPackages/Cart/CartManager.php"], "buggy_code_start_loc": [567], "buggy_code_end_loc": [568], "fixing_code_start_loc": [568], "fixing_code_end_loc": [583], "type": "CWE-668", "message": "Business Logic Errors in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0762", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-26T10:15:08.327", "lastModified": "2022-03-08T17:27:48.757", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Unos Errores de L\u00f3gica Empresarial en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3", "matchCriteriaId": "CEE7F7A1-F20B-4F8B-A3DE-989A059B7E0E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/76361264d9fdfff38a1af79c63141455cc4d36e3", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/125b5244-5099-485e-bf75-e5f1ed80dd48", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/76361264d9fdfff38a1af79c63141455cc4d36e3"}}