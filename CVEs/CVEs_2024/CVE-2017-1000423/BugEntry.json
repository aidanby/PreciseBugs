{"buggy_code": ["<?php\n/**\n * This file implements support functions for the installer\n *\n * b2evolution - {@link http://b2evolution.net/}\n * Released under GNU GPL License - {@link http://b2evolution.net/about/gnu-gpl-license}\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n *\n * @package install\n */\nif( !defined('EVO_MAIN_INIT') ) die( 'Please, do not access this page directly.' );\n\n/**\n * Open a block\n *\n * @param string Block title\n */\nfunction block_open( $title = '' )\n{\n\tglobal $block_status;\n\tif( isset( $block_status ) && $block_status == 'open' )\n\t{\n\t\treturn;\n\t}\n\n\t$block_status = 'open';\n\n\techo \"\\n\".'<div class=\"panel panel-default\">'.\"\\n\";\n\tif( $title != '' )\n\t{ // Display a title\n\t\techo '<div class=\"panel-heading\">'.$title.'</div>'.\"\\n\";\n\t}\n\techo '<div class=\"panel-body\">'.\"\\n\";\n}\n\n/**\n * Close a block\n */\nfunction block_close()\n{\n\tglobal $block_status;\n\tif( ! isset( $block_status ) || $block_status == 'closed' )\n\t{\n\t\treturn;\n\t}\n\t$block_status = 'closed';\n\techo '</div></div>'.\"\\n\\n\";\n}\n\n/**\n * Language selector\n */\nfunction display_locale_selector()\n{\n\tglobal $locales, $default_locale, $action;\n\n\tstatic $selector_already_displayed = false;\n\n\tif( $selector_already_displayed )\n\t{\n\t\treturn;\n\t}\n\t$selector_already_displayed = true;\n\n\tblock_open( T_('Language / Locale') );\n\t?>\n\t<ul class=\"pager pull-right\" style=\"margin:0\">\n\t\t<li class=\"next\"><a href=\"index.php?action=localeinfo&amp;locale=<?php echo $default_locale; ?>\">More languages <span aria-hidden=\"true\">&rarr;</span></a></li>\n\t</ul>\n\n\t<?php\n\tif( isset( $locales[ $default_locale ] ) )\n\t{\n\t\t$default_locale_option_title = locale_flag( $default_locale, 'w16px', 'flag', '', false ).' '.$locales[ $default_locale ]['name'];\n\t}\n\t$locale_options = '';\n\tforeach( $locales as $lkey => $lvalue )\n\t{\n\t\t$locale_options .= '<li><a href=\"index.php?locale='.$lkey.'\">'.locale_flag( $lkey, 'w16px', 'flag', '', false ).' '.T_( $lvalue['name'] ).'</a></li>'.\"\\n\";\n\t}\n\t?>\n\t<div class=\"btn-group install-language\">\n\t\t<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n\t\t\t<?php echo $default_locale_option_title; ?>\n\t\t\t<span class=\"caret\"></span>\n\t\t</button>\n\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n\t\t<?php echo $locale_options; ?>\n\t\t</ul>\n\t</div>\n\n\t<noscript>\n\t\t<style type=\"text/css\">.install-language{display:none;}</style>\n\t\t<form action=\"index.php\" method=\"get\" class=\"form-inline\">\n\t\t<select name=\"locale\" class=\"form-control\">\n\t\t<?php\n\t\tforeach( $locales as $lkey => $lvalue )\n\t\t{\n\t\t\techo '<option'.( $default_locale == $lkey ? ' selected=\"selected\"' : '' ).' value=\"'.$lkey.'\">';\n\t\t\techo T_( $lvalue['name'] );\n\t\t\techo '</option>';\n\t\t}\n\t\t?>\n\t\t</select>\n\t\t<input type=\"submit\" value=\"<?php echo T_('Select as default language/locale'); ?>\" class=\"btn btn-primary\" />\n\t\t</form>\n\t</noscript>\n\t<?php\n\tblock_close();\n}\n\n/**\n * Base config recap\n */\nfunction display_base_config_recap()\n{\n\tglobal $default_locale, $conf_db_user, $conf_db_password, $conf_db_name, $conf_db_host, $db_config, $tableprefix, $baseurl, $admin_email;\n\n\tstatic $base_config_recap_already_displayed = false;\n\n\tif( $base_config_recap_already_displayed )\n\t{\n\t\treturn;\n\t}\n\t$base_config_recap_already_displayed = true;\n\n\techo '<br />';\n\tblock_open( T_('Base config recap...') );\n\t?>\n\t<p><?php printf( T_('If you don\\'t see correct settings here, STOP before going any further, and <a %s>update your base configuration</a>.'), 'href=\"index.php?action=start&amp;locale='.$default_locale.'\"' ) ?></p>\n\n\t<?php\n\tif( !isset($conf_db_user) ) $conf_db_user = $db_config['user'];\n\tif( !isset($conf_db_password) ) $conf_db_password = $db_config['password'];\n\tif( !isset($conf_db_name) ) $conf_db_name = $db_config['name'];\n\tif( !isset($conf_db_host) ) $conf_db_host = isset($db_config['host']) ? $db_config['host'] : 'localhost';\n\n\techo '<samp>'.\n\tT_('MySQL Username').': '.$conf_db_user.'<br />'.\n\tT_('MySQL Password').': '.(($conf_db_password != 'demopass' ? T_('(Set, but not shown for security reasons)') : 'demopass') ).'<br />'.\n\tT_('MySQL Database name').': '.$conf_db_name.'<br />'.\n\tT_('MySQL Host/Server').': '.$conf_db_host.'<br />'.\n\tT_('MySQL tables prefix').': '.$tableprefix.'<br /><br />'.\n\tT_('Base URL').': '.$baseurl.'<br /><br />'.\n\tT_('Admin email').': '.$admin_email.\n\t'</samp>';\n\n\tblock_close();\n}\n\n\n/**\n * Install new DB.\n */\nfunction install_newdb()\n{\n\tglobal $new_db_version, $admin_url, $baseurl, $install_login, $random_password;\n\tglobal $create_sample_contents, $create_sample_organization, $create_demo_users;\n\n\t/*\n\t * -----------------------------------------------------------------------------------\n\t * NEW DB: Create a plain new db structure + sample contents\n\t * -----------------------------------------------------------------------------------\n\t */\n\trequire_once dirname(__FILE__).'/_functions_create.php';\n\n\tif( $old_db_version = get_db_version() )\n\t{\n\t\techo get_install_format_text( '<p class=\"text-warning\"><strong><evo:warning>'.T_('OOPS! It seems b2evolution is already installed!').'</evo:warning></strong></p>', 'p' );\n\n\t\tif( $old_db_version < $new_db_version )\n\t\t{\n\t\t\techo get_install_format_text( '<p>'.sprintf( T_('Would you like to <a %s>upgrade your existing installation now</a>?'), 'href=\"?action=evoupgrade\"' ).'</p>', 'p' );\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t * 1 - If current installation is local, test or intranet\n\t *     Used to turn off gravatar and all ping plugins\n\t *\n\t * @var integer\n\t */\n\t$local_installation = param( 'local_installation', 'integer', ( $create_sample_contents == 'all' ? intval( check_local_installation() ) : 0 ) );\n\n\techo get_install_format_text( '<h2>'.T_('Creating b2evolution tables...').'</h2>', 'h2' );\n\tevo_flush();\n\tcreate_tables();\n\n\t// Update the progress bar status\n\tupdate_install_progress_bar();\n\n\t// Create default data\n\techo get_install_format_text( '<h2>'.T_('Creating minimum default data...').'</h2>', 'h2' );\n\tevo_flush();\n\tcreate_default_data();\n\n\n\tif( $create_sample_organization || $create_demo_users )\n\t{\n\t\techo get_install_format_text( '<h2>'.T_('Creating sample organization and users...').'</h2>', 'h2' );\n\t\tevo_flush();\n\n\t\t// Create sample organization if selected\n\t\tif( $create_sample_organization )\n\t\t{\n\t\t\tcreate_sample_organization();\n\t\t}\n\n\t\t// Create demo users if selected\n\t\tif( $create_demo_users )\n\t\t{\n\t\t\tglobal $Settings;\n\n\t\t\t// We're gonna need some environment in order to create the demo contents...\n\t\t\tload_class( 'settings/model/_generalsettings.class.php', 'GeneralSettings' );\n\t\t\tload_class( 'users/model/_usersettings.class.php', 'UserSettings' );\n\t\t\t/**\n\t\t\t* @var GeneralSettings\n\t\t\t*/\n\t\t\t$Settings = new GeneralSettings();\n\n\t\t\t/**\n\t\t\t* @var UserCache\n\t\t\t*/\n\t\t\t$UserCache = & get_UserCache();\n\t\t\t// Create $current_User object.\n\t\t\t// (Assigning by reference does not work with \"global\" keyword (PHP 5.2.8))\n\t\t\t$GLOBALS['current_User'] = & $UserCache->get_by_ID( 1 );\n\n\t\t\tcreate_demo_users();\n\t\t}\n\t}\n\n\tif( $create_sample_contents )\n\t{\n\t\tglobal $Settings, $install_test_features;\n\n\t\techo get_install_format_text( '<h2>'.T_('Installing sample contents...').'</h2>', 'h2' );\n\t\tevo_flush();\n\n\t\t// We're gonna need some environment in order to create the demo contents...\n\t\tload_class( 'settings/model/_generalsettings.class.php', 'GeneralSettings' );\n\t\tload_class( 'users/model/_usersettings.class.php', 'UserSettings' );\n\t\t/**\n\t\t * @var GeneralSettings\n\t\t */\n\t\t$Settings = new GeneralSettings();\n\n\t\t/**\n\t\t * @var UserCache\n\t\t */\n\t\t$UserCache = & get_UserCache();\n\t\t// Create $current_User object.\n\t\t// (Assigning by reference does not work with \"global\" keyword (PHP 5.2.8))\n\t\t$GLOBALS['current_User'] = & $UserCache->get_by_ID( 1 );\n\n\t\tcreate_demo_contents();\n\t}\n\n\tevo_flush();\n\tcreate_default_email_campaigns();\n\n\t// Update the progress bar status\n\tupdate_install_progress_bar();\n\n\ttrack_step( 'install-success' );\n\n\t$install_result_title = T_('Installation successful!');\n\t$install_result_body = get_install_format_text(\n\t\t'<p><strong>'\n\t\t\t.sprintf( T_('Now you can <a %s>log in</a> with the following credentials:'), 'href=\"'.$admin_url.'\"' )\n\t\t.'</strong></p>', 'p' )\n\t\t.get_install_format_text(\n\t\t'<table>'\n\t\t\t.'<tr><td>'.T_( 'Login' ).': &nbsp;</td><td><strong><evo:login>'.( isset( $install_login ) ? $install_login : 'admin' ).'</evo:login></strong></td></tr>', 'br' )\n\t\t.get_install_format_text(\n\t\t\t'<tr><td>'.T_( 'Password' ).': &nbsp;</td><td><strong><evo:password>'.$random_password.'</evo:password></strong></td></tr>'\n\t\t.'</table>', 'br' )\n\t\t.get_install_format_text(\n\t\t'<br /><p>'.T_('Note that password carefully! It is a <em>random</em> password that is given to you when you install b2evolution. If you lose it, you will have to delete the database tables and re-install anew.').'</p>', 'p' );\n\n\t// Display installation data and instructions\n\techo get_install_format_text( '<h2>'.$install_result_title.'</h2>', 'h2' );\n\techo $install_result_body;\n\n\t// Modal window with installation data and instructions\n\tdisplay_install_result_window( $install_result_title, $install_result_body );\n}\n\n\n/**\n * Begin install task.\n * This will offer other display methods in the future\n */\nfunction task_begin( $title )\n{\n\techo get_install_format_text( $title.\"\\n\" );\n\tevo_flush();\n}\n\n\n/**\n * End install task.\n * This will offer other display methods in the future\n */\nfunction task_end( $message = 'OK.' )\n{\n\techo get_install_format_text( $message.\"<br />\\n\", 'br' );\n}\n\n\nfunction get_db_version()\n{\n\tglobal $DB;\n\n\t$DB->save_error_state();\n\t$DB->halt_on_error = false;\n\t$DB->show_errors = false;\n\t$DB->log_errors = false;\n\n\t$r = NULL;\n\n\tif( db_col_exists( 'T_settings', 'set_name' ) )\n\t{ // we have new table format (since 0.9)\n\t\t$r = $DB->get_var( 'SELECT set_value FROM T_settings WHERE set_name = \"db_version\"' );\n\t}\n\telse\n\t{\n\t\t$r = $DB->get_var( 'SELECT db_version FROM T_settings' );\n\t}\n\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * Get default locale from db\n */\nfunction get_default_locale_from_db()\n{\n\tglobal $DB;\n\n\tif( empty( $DB ) )\n\t{ // DB doesn't exists yet\n\t\treturn NULL;\n\t}\n\n\t$DB->save_error_state();\n\t$DB->halt_on_error = false;\n\t$DB->show_errors = false;\n\t$DB->log_errors = false;\n\n\t$r = NULL;\n\n\tif( db_col_exists( 'T_settings', 'set_name' ) )\n\t{\n\t\t$r = $DB->get_var( 'SELECT set_value FROM T_settings WHERE set_name = \"default_locale\"' );\n\t}\n\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * @return boolean Does a given column name exist in DB?\n */\nfunction db_col_exists( $table, $col_name )\n{\n\tglobal $DB;\n\n\t$col_name = strtolower($col_name);\n\n\t$r = false;\n\t$DB->save_error_state();\n\tforeach( $DB->get_results('SHOW COLUMNS FROM '.$table) as $row )\n\t{\n\t\tif( strtolower($row->Field) == $col_name )\n\t\t{\n\t\t\t$r = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * Clean up extra quotes in comments\n */\nfunction cleanup_comment_quotes()\n{\n\tglobal $DB;\n\n\ttask_begin( 'Checking for extra quote escaping in comments... ' );\n\t$query = \"SELECT comment_ID, comment_content\n\t\t\t\t\t\t\tFROM T_comments\n\t\t\t\t\t\t WHERE comment_content LIKE '%\\\\\\\\\\\\\\\\\\'%'\n\t\t\t\t\t\t \t\tOR comment_content LIKE '%\\\\\\\\\\\\\\\\\\\"%' \";\n\t/* FP: the above looks overkill, but MySQL is really full of surprises...\n\t\t\t\t\ttested on 4.0.14-nt */\n\t// echo $query;\n\t$rows = $DB->get_results( $query, ARRAY_A );\n\tif( $DB->num_rows )\n\t{\n\t\techo 'Updating '.$DB->num_rows.' comments... ';\n\t\tforeach( $rows as $row )\n\t\t{\n\t\t\t$query = \"UPDATE T_comments\n\t\t\t\t\t\t\t\tSET comment_content = \".$DB->quote( stripslashes( $row['comment_content'] ) ).\"\n\t\t\t\t\t\t\t\tWHERE comment_ID = \".$row['comment_ID'];\n\t\t\t// echo '<br />'.$query;\n\t\t\t$DB->query( $query );\n\t\t}\n\t}\n\ttask_end();\n\n}\n\n\n/**\n * Validate install requirements.\n *\n * @return array List of errors, empty array if ok.\n */\nfunction install_validate_requirements()\n{\n\t$errors = array();\n\n\treturn $errors;\n}\n\n\n/**\n * Insert default locales into T_locales.\n */\nfunction create_default_locales()\n{\n\ttask_begin( 'Activating default locales... ' );\n\tlocale_insert_default();\n\ttask_end();\n}\n\n\n/**\n * Insert default settings into T_settings.\n *\n * It only writes those to DB, that get overridden (passed as array), or have\n * no default in {@link _generalsettings.class.php} / {@link GeneralSettings::default}.\n *\n * @param array associative array (settings name => value to use), allows\n *              overriding of defaults\n */\nfunction create_default_settings( $override = array() )\n{\n\tglobal $DB, $new_db_version, $default_locale;\n\tglobal $admins_Group, $moderators_Group, $editors_Group, $users_Group, $suspect_Group, $spam_Group;\n\tglobal $install_test_features, $create_sample_contents, $install_site_color, $local_installation;\n\tglobal $create_sample_organization, $create_demo_users;\n\n\t$defaults = array(\n\t\t'db_version' => $new_db_version,\n\t\t'default_locale' => $default_locale,\n\t\t'newusers_grp_ID' => $users_Group->ID,\n\t\t'evocache_foldername' => '_evocache',\n\t\t'newusers_canregister' => 'yes',\n\t\t'registration_is_public' => 1,\n\t\t'quick_registration' => 1,\n\t);\n\tif( $install_test_features )\n\t{\n\t\t$defaults['gender_colored'] = 1;\n\t\techo_install_log( 'TEST FEATURE: Enabling colored gender usernames by default' );\n\t\t$defaults['registration_require_country'] = 1;\n\t\t$defaults['registration_require_gender'] = 'required';\n\t\techo_install_log( 'TEST FEATURE: Making country and gender required on registration' );\n\t\t$defaults['location_country'] = 'required';\n\t\t$defaults['location_region'] = 'required';\n\t\t$defaults['location_subregion'] = 'required';\n\t\t$defaults['location_city'] = 'required';\n\t\techo_install_log( 'TEST FEATURE: Making country, region, sub-region and city required by default' );\n\t}\n\tif( !empty( $install_site_color ) )\n\t{ // Set default site color\n\t\t$defaults['site_color'] = $install_site_color;\n\t}\n\tif( !empty( $suspect_Group ) )\n\t{ // Set default antispam suspicious group\n\t\t$defaults['antispam_suspicious_group'] = $suspect_Group->ID;\n\t}\n\t$antispam_trust_groups = array();\n\tif( !empty( $admins_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $admins_Group->ID;\n\t}\n\tif( !empty( $moderators_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $moderators_Group->ID;\n\t}\n\tif( !empty( $editors_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $editors_Group->ID;\n\t}\n\tif( !empty( $spam_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $spam_Group->ID;\n\t}\n\tif( count( $antispam_trust_groups ) > 0 )\n\t{ // Set default antispam trust group\n\t\t$defaults['antispam_trust_groups'] = implode( ',', $antispam_trust_groups );\n\t}\n\tif( $local_installation )\n\t{ // Current installation is local\n\t\t// Turn off gravatar and use 'Default gravatars' = 'Gravatar'\n\t\t$defaults['use_gravatar'] = 0;\n\t\t$defaults['default_gravatar'] = '';\n\t}\n\n\t$settings = array_merge( array_keys($defaults), array_keys($override) );\n\t$settings = array_unique( $settings );\n\t$insertvalues = array();\n\tforeach( $settings as $name )\n\t{\n\t\tif( isset($override[$name]) )\n\t\t{\n\t\t\t$insertvalues[] = '('.$DB->quote($name).', '.$DB->quote($override[$name]).')';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$insertvalues[] = '('.$DB->quote($name).', '.$DB->quote($defaults[$name]).')';\n\t\t}\n\t}\n\n\ttask_begin( 'Creating default settings'.( count($override) ? ' (with '.count($override).' existing values)' : '' ).'... ' );\n\t$DB->query(\n\t\t\"INSERT INTO T_settings (set_name, set_value)\n\t\tVALUES \".implode( ', ', $insertvalues ) );\n\ttask_end();\n}\n\n\n/**\n * Install basic skins.\n */\nfunction install_basic_skins( $install_mobile_skins = true )\n{\n\tload_funcs( 'skins/_skin.funcs.php' );\n\n\ttask_begin( 'Installing default skins... ' );\n\n\t// Note: Skin #1 will we used by Blog A and Blog B\n\t// Install this skin firstly in order to use it by default for all collections with wrong skin ID on upgrade process:\n\tskin_install( 'bootstrap_blog_skin' );\n\n\t// Note: Skin #2 will we used by Home\n\tskin_install( 'bootstrap_main_skin' );\n\n\t// Note: Skin #3 will we used by Photos\n\tskin_install( 'bootstrap_gallery_skin' );\n\n\t// Note: Skin #4 will we used by Forums\n\tskin_install( 'bootstrap_forums_skin' );\n\n\t// Note: Skin #5 will we used by Manual\n\tskin_install( 'bootstrap_manual_skin' );\n\n\t// skin_install( 'asevo' );\n\t// skin_install( 'dating_mood' );\n\t// skin_install( 'evopress' );\n\t// skin_install( 'photoalbums' );\n\t// skin_install( 'photoblog' );\n\t// skin_install( 'pureforums' );\n\tif( $install_mobile_skins )\n\t{\n\t\tskin_install( 'touch' );\n\t}\n\tskin_install( '_atom' );\n\tskin_install( '_rss2' );\n\n\ttask_end();\n}\n\n\n/**\n * Install basic plugins.\n *\n * This gets called separately on fresh installs.\n *\n * {@internal\n * NOTE: this won't call the \"AfterInstall\" method on the plugin nor install its DB schema.\n *       This get done in the plugins controller, on manually installing a plugin.\n *\n * If you change the plugins here, please also adjust {@link InstallUnitTestCase::basic_plugins}.\n * }}\n *\n * @param integer Old DB version, so that only new plugins gets installed\n */\nfunction install_basic_plugins( $old_db_version = 0 )\n{\n\t/**\n\t * @var Plugins_admin\n\t */\n\tglobal $Plugins_admin, $install_test_features;\n\n\t$Plugins_admin = & get_Plugins_admin();\n\n\t// Create global $Plugins instance, which is required during installation of basic plugins,\n\t// not only for the ones getting installed, but also during e.g. count_regs(), which instantiates\n\t// each plugin (which may then use (User)Settings in PluginInit (through Plugin::__get)).\n\t$GLOBALS['Plugins'] = & $Plugins_admin;\n\n\tif( $old_db_version < 9100 )\n\t{\n\t\t// Toolbars:\n\t\tinstall_plugin( 'quicktags_plugin' );\n\t\t// Renderers:\n\t\tinstall_plugin( 'auto_p_plugin' );\n\t\tinstall_plugin( 'autolinks_plugin' );\n\t\tinstall_plugin( 'texturize_plugin' );\n\n\t\t// SkinTags:\n\t\tinstall_plugin( 'calendar_plugin' );\n\t\tinstall_plugin( 'archives_plugin' );\n\t}\n\n\tif( $old_db_version < 9290 )\n\t{\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Installing plugin \"Smilies\"' );\n\t\t\tinstall_plugin( 'smilies_plugin' );\n\t\t}\n\t\tinstall_plugin( 'videoplug_plugin' );\n\t}\n\n\tif( $old_db_version < 9330 )\n\t{ // Upgrade to 1.9-beta\n\t\tinstall_plugin( 'ping_b2evonet_plugin' );\n\t\tinstall_plugin( 'ping_pingomatic_plugin' );\n\t}\n\n\tif( $old_db_version < 9930 )\n\t{ // Upgrade to 3.1.0\n\t\tinstall_plugin( 'tinymce_plugin' );\n\t}\n\n\tif( $old_db_version < 9940 )\n\t{ // Upgrade to 3.2.0\n\t\tinstall_plugin( 'twitter_plugin' );\n\t}\n\n\tif( $old_db_version < 10300 )\n\t{ // Upgrade to 5.0.0\n\t\tinstall_plugin( 'flowplayer_plugin' );\n\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Installing plugin \"Google Maps\"' );\n\t\t\tinstall_plugin( 'google_maps_plugin' );\n\t\t}\n\t}\n\n\tif( $old_db_version < 11000 )\n\t{ // Upgrade to 5.0.0-alpha-4\n\t\tif( $install_test_features )\n\t\t{\n\t\t\t$captcha_qstn_plugin_settings = array(\n\t\t\t\t\t'questions' => T_('What is the color of the sky? blue|grey|gray|dark').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What animal is Bugs Bunny? rabbit|a rabbit').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What color is a carrot? orange|yellow').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What color is a tomato? red')\n\t\t\t\t);\n\t\t\techo_install_log( 'TEST FEATURE: Creating sample questions for plugin \"Captcha questions\"' );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$captcha_qstn_plugin_settings = array();\n\t\t}\n\t\tinstall_plugin( 'captcha_qstn_plugin', true, $captcha_qstn_plugin_settings );\n\t}\n\n\tif( $old_db_version < 11100 )\n\t{ // Upgrade to 5.0.0-alpha-5\n\t\t// antispam\n\t\tinstall_plugin( 'basic_antispam_plugin' );\n\t\tinstall_plugin( 'geoip_plugin' );\n\t\t// files\n\t\tinstall_plugin( 'html5_mediaelementjs_plugin' );\n\t\tinstall_plugin( 'html5_videojs_plugin' );\n\t\tinstall_plugin( 'watermark_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Watermark\"' );\n\t\t}\n\t\t// ping\n\t\tinstall_plugin( 'generic_ping_plugin' );\n\t\t// rendering\n\t\tinstall_plugin( 'escapecode_plugin' );\n\t\tinstall_plugin( 'bbcode_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"BB code\"' );\n\t\t}\n\t\tinstall_plugin( 'star_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Star renderer\"' );\n\t\t}\n\t\tinstall_plugin( 'prism_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Prism\"' );\n\t\t}\n\t\tinstall_plugin( 'code_highlight_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Code highlight\"' );\n\t\t}\n\t\tinstall_plugin( 'gmcode_plugin' );\n\t\tinstall_plugin( 'wacko_plugin' );\n\t\tinstall_plugin( 'shortlinks_plugin' );\n\t\tinstall_plugin( 'wikitables_plugin' );\n\t\tinstall_plugin( 'markdown_plugin' );\n\t\tinstall_plugin( 'infodots_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Info dots renderer\"' );\n\t\t}\n\t\tinstall_plugin( 'widescroll_plugin' );\n\t\t// widget\n\t\tinstall_plugin( 'facebook_plugin' );\n\t\tinstall_plugin( 'whosonline_plugin' );\n\t\t// Unclassified\n\t\tinstall_plugin( 'bookmarklet_plugin' );\n\t}\n\n\tif( $old_db_version < 11200 )\n\t{ // Upgrade to 5.1.3-stable\n\t\tinstall_plugin( 'shortcodes_plugin' );\n\t}\n\n\tif( $old_db_version < 11490 )\n\t{ // Upgrade to 6.7.1-stable\n\t\tinstall_plugin( 'adjust_headings_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Adjust headings\"' );\n\t\t}\n\t\tinstall_plugin( 'cookie_consent_plugin', false );\n\t}\n\n\tif( $old_db_version < 11730 )\n\t{\n\t\tinstall_plugin( 'custom_tags_plugin', true );\n\t}\n}\n\n\n/**\n * Install plugin\n *\n * @param string Plugin name\n * @param boolean TRUE - to activate plugin\n * @param array Plugin settings\n * @return true on success\n */\nfunction install_plugin( $plugin, $activate = true, $settings = array() )\n{\n\t/**\n\t * @var Plugins_admin\n\t */\n\tglobal $Plugins_admin;\n\n\ttask_begin( 'Installing plugin: '.$plugin.'... ' );\n\t$edit_Plugin = & $Plugins_admin->install( $plugin, 'broken' ); // \"broken\" by default, gets adjusted later\n\tif( ! ( $edit_Plugin instanceof Plugin ) )\n\t{ // Broken plugin\n\t\techo get_install_format_text( '<span class=\"text-danger\"><evo:error>'.$edit_Plugin.'</evo:error></span><br />'.\"\\n\", 'br' );\n\t\treturn false;\n\t}\n\n\tload_funcs('plugins/_plugin.funcs.php');\n\tinstall_plugin_db_schema_action( $edit_Plugin, true );\n\n\tif( ! empty( $settings ) )\n\t{ // Set plugin settings\n\t\tforeach( $settings as $setting_name => $setting_value )\n\t\t{\n\t\t\t$edit_Plugin->Settings->set( $setting_name, $setting_value );\n\t\t}\n\t\t$edit_Plugin->Settings->dbupdate();\n\t}\n\n\tif( $activate )\n\t{ // Try to enable plugin:\n\t\t$enable_return = $edit_Plugin->BeforeEnable();\n\t\tif( $enable_return !== true )\n\t\t{ // Warning on enable a plugin\n\t\t\techo get_install_format_text( '<span class=\"text-warning\"><evo:warning>'.$enable_return.'</evo:warning></span><br />'.\"\\n\", 'br' );\n\n\t\t\t// Set plugin status to \"needs_config\" to mark the plugin as incomplete for using:\n\t\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'needs_config' );\n\n\t\t\treturn false;\n\t\t}\n\n\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'enabled' );\n\t}\n\telse\n\t{ // Set plugin status as disable\n\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'disabled' );\n\t}\n\n\ttask_end();\n\treturn true;\n}\n\n\n/**\n * Install basic widgets.\n */\nfunction install_basic_widgets( $old_db_version = 0 )\n{\n\t/**\n\t* @var DB\n\t*/\n\tglobal $DB;\n\n\tload_funcs( 'widgets/_widgets.funcs.php' );\n\n\tif( $old_db_version < 11010 )\n\t{\n\t\t$blog_ids = $DB->get_assoc( 'SELECT blog_ID, \"std\" FROM T_blogs' );\n\t}\n\telse\n\t{\n\t\t$blog_ids = $DB->get_assoc( 'SELECT blog_ID, blog_type FROM T_blogs' );\n\t}\n\n\tforeach( $blog_ids as $blog_id => $blog_type )\n\t{\n\t\ttask_begin( 'Installing default widgets for blog #'.$blog_id.'... ' );\n\t\tinsert_basic_widgets( $blog_id, true, $blog_type );\n\t\ttask_end();\n\t}\n\n}\n\n\n\nfunction advanced_properties()\n{\n\t/*\n// file_path needs to be case sensitive on unix\n// Note: it should be ok on windows too if we take care of updating the db on case renames\nALTER TABLE `T_files` CHANGE `file_path` `file_path` VARCHAR( 255 ) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL\nor\nALTER TABLE `T_files` CHANGE `file_path` `file_path` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL\n\t*/\n}\n\n\n/**\n * Create relations\n *\n * @todo NOT UP TO DATE AT ALL :( -- update field names before activating this\n */\nfunction create_relations()\n{\n\tglobal $DB;\n\n\ttask_begin( 'Creating relations... ' );\n\n\t$DB->query( 'alter table T_coll_user_perms\n\t\t\t\t\t\t\t\tadd constraint FK_bloguser_blog_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (bloguser_blog_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_coll_user_perms\n\t\t\t\t\t\t\t\tadd constraint FK_bloguser_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (bloguser_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_categories\n\t\t\t\t\t\t\t\tadd constraint FK_cat_blog_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (cat_blog_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_cat_parent_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (cat_parent_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_comments\n\t\t\t\t\t\t\t\tadd constraint FK_comment_item_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (comment_item_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_postcats\n\t\t\t\t\t\t\t\tadd constraint FK_postcat_cat_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (postcat_cat_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_postcat_post_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (postcat_post_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_items__item\n\t\t\t\t\t\t\t\tadd constraint FK_post_assigned_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_assigned_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_lastedit_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_lastedit_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_creator_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_creator_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_main_cat_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_main_cat_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_parent_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_parent_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_pst_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_pst_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__status (pst_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_ityp_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_ityp_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__type (ityp_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_creator_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_creator_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_lastedit_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_lastedit_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_file_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_file_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_files (file_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_itm_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_itm_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_pluginsettings\n\t              add constraint FK_pset_plug_ID\n\t                    foreign key (pset_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_pluginusersettings\n\t              add constraint FK_puset_plug_ID\n\t                    foreign key (puset_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_pluginevents\n\t              add constraint FK_pevt_plug_ID\n\t                    foreign key (pevt_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_users\n\t\t\t\t\t\t\t\tadd constraint FK_user_grp_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (user_grp_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_groups (grp_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_users__usersettings\n\t\t\t\t\t\t\t\tadd constraint FK_uset_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (uset_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_subscriptions\n\t\t\t\t\t\t\t\tadd constraint FK_sub_coll_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (sub_coll_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_subscriptions\n\t\t\t\t\t\t\t\tadd constraint FK_sub_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (sub_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_slug\n\t\t\t\t\t\t\t\tadd constraint FK_slug_itm_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (slug_itm_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\ttask_end();\n}\n\n\n/**\n * Install htaccess: Check if it works with the webserver, then install it for real.\n *\n * @param boolean are we upgrading (vs installing)?\n * @param boolean Force copying htaccess\n * @return boolean TRUE if no errors\n */\nfunction install_htaccess( $upgrade = false, $force_htaccess = false )\n{\n\techo get_install_format_text( '<p>'.T_('Preparing to install <code>/.htaccess</code> in the base folder...').' (Force='.($force_htaccess?'yes':'no').')<br />', 'p-start-br' );\n\n\tif( ! $force_htaccess )\n\t{\t// Check if we run apache...\n\t\t$server = isset( $_SERVER['SERVER_SOFTWARE'] ) ? $_SERVER['SERVER_SOFTWARE'] : '';\n\t\tif( ! empty( $server ) && preg_match( '~(Nginx|Lighttpd|Microsoft-IIS)~i', $server ) )\n\t\t{ // Skip installation if this is not an Apache server\n\t\t\techo get_install_format_text( '<br /><b class=\"text-warning\"><evo:warning>'.T_('.htaccess is not needed because your web server is not Apache. WARNING: you will need to configure your web server manually.').'</evo:warning></b></p>', 'p-end' );\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t$error_message = do_install_htaccess( $upgrade, $force_htaccess );\n\n\tif( $error_message )\n\t{\n\n\t\techo get_install_format_text( '<span class=\"text-danger\"><evo:error>'.T_('ERROR!').'<br /><b>'.$error_message.'</b></evo:error></span>' );\n\n\t\t// Do we want to ignore the error?\n\t\t$htignore = param( 'htignore', 'integer', 0 );\n\t\tif( $htignore )\n\t\t{ // Ignore error with .htaccess file and continue install...\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{ // Some errors are existing with .htaccess file, Display a link to ignore the errors and continue instalation\n\t\t\techo get_install_format_text( '<ul class=\"pager\"><li><a href=\"'.( isset( $_SERVER['REQUEST_URI'] ) ? $_SERVER['REQUEST_URI'] : '' ).'&htignore=1\" style=\"font-size:150%;font-weight:bold;\">'.T_('Continue installation').' <span aria-hidden=\"true\">&rarr;</span></a></li></ul>', 'li' );\n\t\t\treturn false;\n\t\t}\n\t}\n\techo get_install_format_text( '</p>', 'p-end' );\n\n\treturn true;\n}\n\n/**\n * This does the actual file manipulations for installing .htaccess\n * This will verify that the provided sample.htaccess does not crash apache in a test folder before installing it for real.\n *\n * @param boolean are we upgrading (vs installing)?\n * @param boolean Force copying htaccess\n * @return mixed\n */\nfunction do_install_htaccess( $upgrade = false, $force_htaccess = false )\n{\n\tglobal $baseurl;\n\tglobal $basepath;\n\n\t// Make sure we have a sample file to start with:\n\tif( ! @file_exists( $basepath.'sample.htaccess' ) )\n\t{\n\t\treturn T_('Cannot find file [ sample.htaccess ] in your base url folder.');\n\t}\n\n\tif( !$force_htaccess )\n\t{ // We're not forcing install, we want to check if it's supported:\n\n\t\tif( @file_exists( $basepath.'.htaccess' ) )\n\t\t{\n\t\t\tif( @file_exists( $basepath.'sample.htaccess' ) )\n\t\t\t{\n\t\t\t\t$content_htaccess = trim( file_get_contents( $basepath.'.htaccess' ) );\n\t\t\t\t$content_sample_htaccess = trim( file_get_contents( $basepath.'sample.htaccess' ) );\n\n\t\t\t\tif( $content_htaccess != $content_sample_htaccess )\n\t\t\t\t{ // The .htaccess file has content that different from a sample file\n\t\t\t\t\tif( $upgrade )\n\t\t\t\t\t{\n\t\t\t\t\t\techo get_install_format_text( '<span class=\"text-warning\"><evo:warning>'.T_('<code>.htaccess</code> is already installed BUT DOES NOT match <code>sample.htaccess</code>. Please check the differences manually.').'</evo:warning></span>' );\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\techo get_install_format_text( '<p class=\"text-danger\"><evo:error>'.T_('There is already a file called .htaccess at the blog root. If you don\\'t specifically need this file, it is recommended that you delete it or rename it to old.htaccess before you continue. This will allow b2evolution to create a new .htaccess file that is optimized for best results.').'</evo:error></p>', 'p' );\n\t\t\t\t\t\techo T_('Here are the contents of the current .htaccess file:');\n\t\t\t\t\t\techo get_install_format_text( '<div style=\"overflow:auto\"><pre>'.htmlspecialchars( $content_htaccess ).'</pre></div><br />', 'code' );\n\t\t\t\t\t\treturn get_install_format_text( sprintf( T_('Again, we recommend you remove this file before continuing. If you chose to keep it, b2evolution will probably still work, but for optimization you should follow <a %s>these instructions</a>.'), 'href=\"'.get_manual_url( 'htaccess-file' ).'\" target=\"_blank\"' ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Installed file is the same as recommended:\n\t\t\t\t\techo get_install_format_text( '<span class=\"text-info\">'.T_('<code>.htaccess</code> is already installed and matches <code>sample.htaccess</code>.').'</span>' );\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Try to copy that file to the test folder:\n\t\tif( ! @copy( $basepath.'sample.htaccess', $basepath.'install/test/.htaccess' ) )\n\t\t{\n\t\t\treturn T_('Failed to copy sample.htaccess to test folder!');\n\t\t}\n\n\t\t// Make sure .htaccess does not crash in the test folder:\n\t\tload_funcs('_core/_url.funcs.php');\n\t\t$fetch_test_url = $baseurl.'install/test/';\n\t\t$info = array();\n\t\techo get_install_format_text( T_('Verifying .htaccess support works by fetching:').' <code>'.$fetch_test_url.'</code>... ' );\n\t\tif( ! $remote_page = fetch_remote_page( $fetch_test_url, $info ) )\n\t\t{\n\t\t\treturn $info['error'];\n\t\t}\n\t\tif( substr( $remote_page, 0, 16 ) != 'Test successful.' )\n\t\t{\n\t\t\treturn sprintf( T_('%s was not found as expected.'), $baseurl.'install/test/index.html' );\n\t\t}\n\t}\n\n\t// Now we consider it's safe, copy .htaccess to its real location:\n\tif( ! @copy( $basepath.'sample.htaccess', $basepath.'.htaccess' ) )\n\t{\n\t\treturn T_('Test was successful, but failed to copy .htaccess into baseurl directory!');\n\t}\n\n\techo get_install_format_text( '<span class=\"text-success\"><evo:success>'.T_('.htaccess installation successful!').'</evo:success></span>' );\n\treturn '';\n}\n\n\n/**\n * Return antispam SQL query.\n * This is obfuscated because some hosting companies prevent uploading PHP files\n * containing \"spam\" strings.\n *\n * @return string;\n */\nfunction get_antispam_query()\n{\n\t//used base64_encode() for getting this code\n\treturn base64_decode('SU5TRVJUIElOVE8gVF9hbnRpc3BhbV9fa2V5d29yZCAoIGFza3dfc3RyaW5nICkgVkFMVUVTICgnb25saW5lLWNhc2lubycpLCAoJ3BlbmlzLWVubGFyZ2VtZW50JyksICgnb3JkZXItdmlhZ3JhJyksICgnb3JkZXItcGhlbnRlcm1pbmUnKSwgKCdvcmRlci14ZW5pY2FsJyksICgnb3JkZXItcHJvcGhlY2lhJyksICgnc2V4eS1saW5nZXJpZScpLCAoJy1wb3JuLScpLCAoJy1hZHVsdC0nKSwgKCctdGl0cy0nKSwgKCdidXktcGhlbnRlcm1pbmUnKSwgKCdvcmRlci1jaGVhcC1waWxscycpLCAoJ2J1eS14ZW5hZHJpbmUnKSwgKCdwYXJpcy1oaWx0b24nKSwgKCdwYXJpc2hpbHRvbicpLCAoJ2NhbWdpcmxzJyksICgnYWR1bHQtbW9kZWxzJyk=');\n}\n\n/**\n * We use the following tracking to determine the installer reliability (% of failed vs successful installs).\n */\nfunction track_step( $current_step )\n{\n\tglobal $display;\n\n\tif( ! empty( $display ) && $display == 'cli' )\n\t{\t// Don't display HTML on CLI mode:\n\t\treturn;\n\t}\n\n\t// echo 'Tracking '.$current_step;\n\techo '<div style=\"display:none\">'\n\t\t\t.'<img src=\"http://b2evolution.net/htsrv/track.php?key='.$current_step.'\" alt=\"\" />'\n\t\t.'</div>';\n}\n\n\n/**\n * Display a link to back to install menu\n */\nfunction display_install_back_link()\n{\n\tglobal $default_locale;\n\n\techo get_install_format_text( '<ul class=\"pager\">'\n\t\t\t.'<li class=\"previous\"><a href=\"index.php?locale='.$default_locale.'\"><span aria-hidden=\"true\">&larr;</span> '.T_('Back to install menu').'</a></li>'\n\t\t.'</ul>', 'p' );\n}\n\n\n/**\n * Display a progress bar to start an animation of a process\n *\n * @param string Title (Not visible on screen, it is used ONLY for screen readers)\n * @param integer|NULL A number of the steps\n */\nfunction start_install_progress_bar( $title, $steps = NULL )\n{\n\tglobal $install_progress_bar_counter, $install_progress_bar_total, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\tif( $steps !== NULL )\n\t{ // Progress bar with steps\n\t\t$install_progress_bar_total = $steps;\n\t\t$install_progress_bar_counter = 0;\n\t\t$bar_width = '0%';\n\t}\n\telse\n\t{ // Progress bar has no steps for update\n\t\t$bar_width = '100%';\n\t}\n\n\techo '<div class=\"progress\">'\n\t\t\t.'<div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:'.$bar_width.'\">'\n\t\t\t\t.'<span class=\"sr-only\">'.$title.'</span>'\n\t\t\t.'</div>'\n\t\t.'</div>';\n\tif( $steps !== NULL )\n\t{ // Use this fix to keep the progress animated forever when JavaScript is disabled\n\t\techo '<noscript>'\n\t\t\t\t.'<style type=\"text/css\">.progress-bar{width:100% !important}</style>'\n\t\t\t.'</noscript>';\n\t\t// Don't use the striped animation when we have a real progress indication\n\t\techo '<script type=\"text/javascript\">'\n\t\t\t.'jQuery( \".progress-bar.active.progress-bar-striped\" ).removeClass( \"active progress-bar-striped\" );'\n\t\t.'</script>';\n\t}\n}\n\n\n/**\n * Print JavaScript to stop the animation of the progress bar\n */\nfunction stop_install_progress_bar()\n{\n\tglobal $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\techo '<script type=\"text/javascript\">'\n\t\t.'jQuery( \".progress-bar\" ).css( \"width\", \"100%\" ).removeClass( \"active progress-bar-striped\" );'\n\t\t.'setTimeout( function() { jQuery( \".progress-bar\" ).addClass( \"progress-bar-success\" ); }, 600 );'\n\t.'</script>';\n}\n\n\n/**\n * Print JavaScript to update the progress bar status\n */\nfunction update_install_progress_bar()\n{\n\tglobal $install_progress_bar_counter, $install_progress_bar_total, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\tif( empty( $install_progress_bar_total ) )\n\t{ // No a number of the steps, Exit here\n\t\treturn;\n\t}\n\n\t// This is next step\n\t$install_progress_bar_counter++;\n\n\t$bar_width = ceil( $install_progress_bar_counter / $install_progress_bar_total * 100 );\n\tif( $bar_width > 100 )\n\t{ // Limit by 100%\n\t\t$bar_width = 100;\n\t}\n\n\techo '<script type=\"text/javascript\">'\n\t\t.'jQuery( \".progress-bar\" ).css( \"width\", \"'.$bar_width.'%\" );'\n\t.'</script>';\n}\n\n\n/**\n * Calculate a number of the steps for current installation\n *\n * @return integer\n */\nfunction get_install_steps_count()\n{\n\tglobal $allow_install_test_features, $allow_evodb_reset;\n\tglobal $create_sample_organization;\n\n\t$steps = 0;\n\n\t// After Deleting b2evolution tables:\n\tif( $allow_evodb_reset >= 2 || ( $allow_install_test_features && $allow_evodb_reset >= 1 ) )\n\t{ // Allow to quick delete before new installation only when these two settings are enabled in config files\n\t\t$delete_contents = param( 'delete_contents', 'integer', 0 );\n\n\t\tif( $delete_contents )\n\t\t{ // A quick deletion is requested before new installation\n\t\t\t$steps++;\n\t\t}\n\t}\n\n\t// After Checking files:\n\t$steps++;\n\n\t// After Loading all modules:\n\t$steps++;\n\n\t// After Creating all DB tables:\n\t$steps++;\n\n\t// Before install default skins:\n\t$steps++;\n\n\t// Creating sample organization:\n\tif( $create_sample_organization )\n\t{\n\t\t$steps++;\n\t}\n\n\t// Installing sample contents:\n\t$create_sample_contents = param( 'create_sample_contents', 'string', '' );\n\n\tif( $create_sample_contents )\n\t{\n\t\t// After Creating default sample contents(users, and probably blogs and categories):\n\t\t$steps++;\n\n\t\tif( $create_sample_contents == 'all' )\n\t\t{ // Array contains which collections should be installed\n\t\t\t$install_collection_home =   1;\n\t\t\t$install_collection_bloga =  1;\n\t\t\t$install_collection_blogb =  1;\n\t\t\t$install_collection_photos = 1;\n\t\t\t$install_collection_forums = 1;\n\t\t\t$install_collection_manual = 1;\n\t\t\t$install_collection_tracker = 1;\n\t\t}\n\t\telse\n\t\t{ // Array contains which collections should be installed\n\t\t\t$collections = param( 'collections', 'array:string', array() );\n\t\t\t$install_collection_home = in_array( 'home', $collections );\n\t\t\t$install_collection_bloga = in_array( 'a', $collections );\n\t\t\t$install_collection_blogb = in_array( 'b', $collections );\n\t\t\t$install_collection_photos = in_array( 'photos', $collections );\n\t\t\t$install_collection_forums = in_array( 'forums', $collections );\n\t\t\t$install_collection_manual = in_array( 'manual', $collections );\n\t\t\t$install_collection_tracker = in_array( 'group', $collections );\n\t\t}\n\n\t\tif( $install_collection_home )\n\t\t{ // After installing of the blog \"Home\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_bloga )\n\t\t{ // After installing of the blog \"Blog A\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_blogb )\n\t\t{ // After installing of the blog \"Blog B\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_photos )\n\t\t{ // After installing of the blog \"Photos\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_forums )\n\t\t{ // After installing of the blog \"Forums\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_manual )\n\t\t{ // After installing of the blog \"Manual\"\n\t\t\t$steps++;\n\t\t}\n\n\t\tif( $install_collection_tracker )\n\t\t{ // After installing of the blog \"Tracker\"\n\t\t\t$steps++;\n\t\t}\n\t}\n\n\t// Last step before successful message:\n\t$steps++;\n\n\treturn $steps;\n}\n\n\n/**\n * Calculate a number of the steps for current upgrading\n *\n * @return integer\n */\nfunction get_upgrade_steps_count()\n{\n\tglobal $new_db_version;\n\n\t$steps = 0;\n\n\t// After Checking files:\n\t$steps++;\n\n\t// After Loading all modules:\n\t$steps++;\n\n\t// Calculate the upgrade blocks:\n\t$old_db_version = get_db_version();\n\tif( $new_db_version > $old_db_version )\n\t{\t// Only when DB must be updated really:\n\t\t$upgrade_file_name = dirname( __FILE__ ).'/_functions_evoupgrade.php';\n\t\tif( @file_exists( $upgrade_file_name ) )\n\t\t{\t// If file exists we can parse to know how much the upgrade blocks will be executed:\n\t\t\t$upgrade_file_content = file_get_contents( $upgrade_file_name );\n\t\t\t// Find DB versions in the upgrade blocks like:\n\t\t\t//      if( $old_db_version < 11430 )\n\t\t\t//      if( upg_task_start( 11440, 'Upgrading base domains table...' ) )\n\t\t\tif( preg_match_all( '#if\\(\\s*(\\$old_db_version\\s*<|upg_task_start\\()\\s*(\\d+)#i', $upgrade_file_content, $version_matches ) )\n\t\t\t{\n\t\t\t\tforeach( $version_matches[2] as $version )\n\t\t\t\t{\n\t\t\t\t\tif( $old_db_version < $version && $new_db_version != $old_db_version )\n\t\t\t\t\t{\t// Only these new blocks will be executed:\n\t\t\t\t\t\t$steps++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Before Starting to check DB:\n\t$steps++;\n\n\t// Last step before successful message:\n\t$steps++;\n\n\treturn $steps;\n}\n\n\n/**\n * Display the messages on install pages\n *\n * @param string|array Messages\n * @param string Message type: 'error', 'warning', 'success', 'info'\n */\nfunction display_install_messages( $messages, $type = 'error' )\n{\n\tif( empty( $messages ) )\n\t{ // No messages\n\t\treturn;\n\t}\n\n\tif( is_string( $messages ) )\n\t{\n\t\t$messages = array( $messages );\n\t}\n\n\tswitch( $type )\n\t{\n\t\tcase 'error':\n\t\t\t$before_message = '<evo:error>';\n\t\t\t$after_message = '</evo:error>';\n\t\t\tbreak;\n\n\t\tcase 'warning':\n\t\t\t$before_message = '<evo:warning>';\n\t\t\t$after_message = '</evo:warning>';\n\t\t\tbreak;\n\n\t\tcase 'success':\n\t\t\t$before_message = '<evo:success>';\n\t\t\t$after_message = '</evo:success>';\n\t\t\tbreak;\n\n\t\tcase 'info':\n\t\t\t$before_message = '<evo:note>';\n\t\t\t$after_message = '</evo:note>';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$before_message = '';\n\t\t\t$after_message = '';\n\t\t\tbreak;\n\t}\n\n\tif( $type == 'error' )\n\t{ // Fix to correct bootstrap class name \"alert-danger\"\n\t\t$type = 'danger';\n\t}\n\n\t$r = '';\n\tforeach( $messages as $message )\n\t{\n\t\t$r .= '<div class=\"alert alert-'.$type.'\" role=\"alert\">'.$before_message.$message.$after_message.'</div>'.\"\\n\";\n\t}\n\n\techo get_install_format_text($r);\n}\n\n\n/**\n * Print JavaScript to control button on install page\n */\nfunction echo_install_button_js()\n{\n\tglobal $app_name;\n?>\n<script type=\"text/javascript\">\njQuery( document ).ready( function()\n{\n\tjQuery( '#install_button' ).click( function()\n\t{\n\t\tif( jQuery( '#deletedb' ).is( ':checked' ) )\n\t\t{\n\t\t\tif( confirm( '<?php printf( /* TRANS: %s gets replaced by app name, usually \"b2evolution\" */ TS_( 'Are you sure you want to delete your existing %s tables?\\nDo you have a backup?' ), $app_name ); ?>' ) )\n\t\t\t{\n\t\t\t\tjQuery( 'input[name=confirmed]' ).val( 1 );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} );\n\n\tfunction update_install_button_info()\n\t{\n\t\tswitch( jQuery( 'input[type=radio][name=action]:checked' ).val() )\n\t\t{\n\t\t\tcase 'menu-install':\n\t\t\t\tvar btn_title = '<?php echo TS_('Next').' &raquo;'; ?>';\n\t\t\t\tvar btn_class = 'btn-success';\n\t\t\t\tbreak;\n\n\t\t\tcase 'evoupgrade':\n\t\t\t\tvar btn_title = '<?php echo TS_('UPGRADE!'); ?>';\n\t\t\t\tvar btn_class = 'btn-warning';\n\t\t\t\tbreak;\n\n\t\t\tcase 'deletedb':\n\t\t\t\tvar btn_title = '<?php echo TS_('DELETE ALL!'); ?>';\n\t\t\t\tvar btn_class = 'btn-danger';\n\t\t\t\tbreak;\n\n\t\t\tcase 'start':\n\t\t\t\tvar btn_title = '<?php echo TS_('Change config').' &raquo;'; ?>';\n\t\t\t\tvar btn_class = 'btn-primary';\n\t\t\t\tbreak;\n\n\t\t\tcase 'utf8check':\n\t\t\t\tvar btn_title = '<?php echo TS_('CHECK DB!'); ?>';\n\t\t\t\tvar btn_class = 'btn-primary';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\n\t\tjQuery( '#install_button' )\n\t\t\t.html( btn_title )\n\t\t\t.attr( 'class', 'btn btn-lg ' + btn_class );\n\t}\n\n\tjQuery( 'input[type=radio][name=action]' ).click( function()\n\t{\n\t\tupdate_install_button_info();\n\t} );\n\n\tupdate_install_button_info();\n} );\n</script>\n<?php\n}\n\n\n/**\n * Check if current installation is local\n *\n * @return boolean\n */\nfunction check_local_installation()\n{\n\tglobal $basehost;\n\n\treturn php_sapi_name() != 'cli' && // NOT php CLI mode\n\t\t( $basehost == 'localhost'\n\t\t\t|| ( isset( $_SERVER['SERVER_ADDR'] ) && ( $_SERVER['SERVER_ADDR'] == '127.0.0.1' || $_SERVER['SERVER_ADDR'] == '::1' ) ) // IPv6 address of 127.0.0.1\n\t\t\t|| ( isset( $_SERVER['REMOTE_ADDR'] ) && ( $_SERVER['REMOTE_ADDR'] == '127.0.0.1' || $_SERVER['REMOTE_ADDR'] == '::1' ) )\n\t\t\t|| ( isset( $_SERVER['HTTP_HOST'] ) && ( $_SERVER['HTTP_HOST'] == '127.0.0.1' || $_SERVER['HTTP_HOST'] == '::1' ) )\n\t\t\t|| ( isset( $_SERVER['SERVER_NAME'] ) && ( $_SERVER['SERVER_NAME'] == '127.0.0.1' || $_SERVER['SERVER_NAME'] == '::1' ) )\n\t\t);\n}\n\n\n/**\n * Display modal window after install process with some data\n *\n * @param string Title\n * @param string Body\n */\nfunction display_install_result_window( $title, $body )\n{\n\tglobal $baseurl, $admin_url, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use the modal window ONLY on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\t// Remove a link to log in from body text:\n\t$body = preg_replace( '~</?a[^>]*>~i', '', $body );\n\n\t// Modal window with info:\n\techo '<div class=\"modal modal-success fade\" id=\"evo_modal__install\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"evo_modal__label_install\" aria-hidden=\"true\">\n\t\t<div class=\"modal-dialog\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n\t\t\t\t\t<h4 class=\"modal-title\" id=\"evo_modal__label_install\">'.$title.'</h4>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">'.$body.'</div>\n\t\t\t\t<div class=\"modal-footer\" style=\"text-align:center\">\n\t\t\t\t\t<a href=\"'.$baseurl.'\" class=\"btn btn-primary\">'.T_('Go to Front-office').'</a>\n\t\t\t\t\t<a href=\"'.$admin_url.'\" class=\"btn btn-default\">'.T_('Go to Back-office').'</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>';\n\n\t// JavaScript to open modal window with info:\n\techo '<script type=\"text/javascript\">'\n\t\t.'setTimeout( function() { jQuery( \"#evo_modal__install\" ).modal(); }, 1000 );'\n\t.'</script>';\n}\n\n\n/**\n * Check request for quick installation\n * Update basic config file from url params\n *\n * @return boolean|string TRUE on success, OR error messages\n */\nfunction check_quick_install_request()\n{\n\tglobal $config_is_done, $db_config, $conf_path, $install_login, $install_password, $Messages;\n\n\t$admin_login = param( 'admin_login', 'string', '' );\n\t$admin_password = param( 'admin_password', 'string', '' );\n\n\tif( ! empty( $admin_login ) )\n\t{ // Try to use an admin login from request:\n\t\tif( param_check_valid_login( 'admin_login' ) )\n\t\t{ // We can use this login name\n\t\t\t$install_login = $admin_login;\n\t\t}\n\t\telse\n\t\t{ // Display an error message for impossible login name:\n\t\t\t$Messages->add( sprintf( 'ERROR: Impossible to use \"%s\" for the admin account. Using \"admin\" instead.', $admin_login ) );\n\t\t}\n\t}\n\n\tif( ! empty( $admin_password ) && param_check_passwords( 'admin_password', 'admin_password', false, 5 ) )\n\t{ // Set admin password from request:\n\t\t$install_password = $admin_password;\n\t}\n\n\tif( $config_is_done )\n\t{ // Config is already done, Don't use url params to update basic config file\n\t\treturn true;\n\t}\n\n\t// DB Access:\n\t$db_user = param( 'db_user', 'string', '' );\n\t$db_password = param( 'db_password', 'raw', '' );\n\t$db_name = param( 'db_name', 'string', '' );\n\t$db_host = param( 'db_host', 'string', '' );\n\t$db_tableprefix = param( 'db_tableprefix', 'string', '' );\n\n\t// Admin e-mail:\n\tglobal $admin_email;\n\t$default_admin_email = $admin_email;\n\t$conf_admin_email = param( 'admin_email', 'string', '', false, true );\n\n\tif( ! empty( $conf_admin_email ) ||\n\t    ! empty( $db_user ) || ! empty( $db_password ) || ! empty( $db_name ) || ! empty( $db_host ) ||\n\t    ! empty( $db_tableprefix ) )\n\t{ // Try to update basic config file ONLY when at least one of these params are defined\n\n\t\tif( empty( $conf_admin_email ) || ! param_check_email( 'admin_email' ) )\n\t\t{ // Use default admin email if it is empty from request\n\t\t\t$conf_admin_email = $default_admin_email;\n\t\t}\n\n\t\t// Base URL:\n\t\tglobal $baseurl, $admin_url, $dispatcher, $tableprefix;\n\t\t$baseurl = param( 'baseurl', 'string', '', false, true );\n\t\tif( empty( $baseurl ) || ! preg_match( '~https?://~', $baseurl ) )\n\t\t{ // Try to autogenerate base url if it is empty or wrong from request:\n\t\t\t$baseurl = 'http://'.( isset( $_SERVER['SERVER_NAME'] ) ? $_SERVER['SERVER_NAME'] : 'yourserver.com' );\n\t\t\tif( isset( $_SERVER['SERVER_PORT'] ) && ( $_SERVER['SERVER_PORT'] != '80' ) )\n\t\t\t\t$baseurl .= ':'.$_SERVER['SERVER_PORT'];\n\t\t\tlist( $ReqPath, $ReqURI ) = get_ReqURI();\n\t\t\t$baseurl .= preg_replace( '#/install(/(index.php)?)?$#', '', $ReqPath ).'/';\n\t\t}\n\t\t// Add a slash at the end if it is missed:\n\t\t$baseurl = trim( $baseurl, '/' ).'/';\n\t\t// Update $admin_url to new value because it depends on $baseurl:\n\t\t$admin_url = $baseurl.$dispatcher;\n\n\t\t// Update $tableprefix to new from request:\n\t\t$tableprefix = $db_tableprefix;\n\n\t\t// Try to create basic config file:\n\t\t$basic_config_params = array(\n\t\t\t\t'db_user'        => $db_user,\n\t\t\t\t'db_password'    => $db_password,\n\t\t\t\t'db_name'        => $db_name,\n\t\t\t\t'db_host'        => $db_host,\n\t\t\t\t'db_tableprefix' => $db_tableprefix,\n\t\t\t\t'baseurl'        => $baseurl,\n\t\t\t\t'admin_email'    => $conf_admin_email,\n\t\t\t\t'print_messages' => false,\n\t\t\t\t'quick_install'  => true,\n\t\t\t);\n\t\tif( update_basic_config_file( $basic_config_params ) )\n\t\t{ // Basic config file has been created successfully\n\t\t\t// Update DB config to connect to DB correctly\n\t\t\t$db_config['user'] = $db_user;\n\t\t\t$db_config['password'] = $db_password;\n\t\t\t$db_config['name'] = $db_name;\n\t\t\t$db_config['host'] = $db_host;\n\t\t}\n\t\telse\n\t\t{ // Failed on creation of basic config file\n\t\t\treturn false;\n\t\t}\n\t}\n\telseif( ! file_exists( $conf_path.'_basic_config.php' ) )\n\t{\n\t\tglobal $basic_config_file_result_messages;\n\n\t\tob_start();\n\t\tdisplay_install_messages( T_('You must pass db_config params or create a <code>/conf/_basic_config.php</code> file before calling the installer.') );\n\n\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\treturn false;\n\t}\n\n\t// Revert config admin email to original value:\n\t$admin_email = $default_admin_email;\n\n\treturn true;\n}\n\n\n/**\n * Format an install param like DB config and base url\n *\n * @return string\n */\nfunction format_install_param( $value )\n{\n\t$value = str_replace( array( \"'\",  \"\\$\" ), array( \"\\'\", \"\\\\$\" ), $value );\n\treturn preg_replace( \"#([\\\\\\\\]*)(\\\\\\\\\\\\\\')#\", \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\", $value );\n}\n\n\n/**\n * Update file /conf/_basic_config.php\n *\n * @param string Current action, updated by reference\n * @param array Params\n * @return boolean TRUE on success\n */\nfunction update_basic_config_file( $params = array() )\n{\n\tglobal $DB, $db_config, $evo_charset, $conf_path, $default_locale;\n\n\t// These global params should be rewritten by this function on success result\n\tglobal $baseurl, $admin_email, $config_is_done, $action;\n\n\t$params = array_merge( array(\n\t\t\t'create_db'      => 0,\n\t\t\t'db_user'        => '',\n\t\t\t'db_password'    => '',\n\t\t\t'db_name'        => '',\n\t\t\t'db_host'        => '',\n\t\t\t'db_tableprefix' => '',\n\t\t\t'baseurl'        => '',\n\t\t\t'admin_email'    => '',\n\t\t\t'print_messages' => true, // TRUE - to print out all messages on screen, FALSE - to return\n\t\t\t'quick_install'  => false, // TRUE - to mark this call as request to quick installation\n\t\t), $params );\n\n\tif( ! $params['print_messages'] )\n\t{ // Start to get all messages instead of printing on screen:\n\t\tob_start();\n\t\t// Use this global var to store all messages\n\t\tglobal $basic_config_file_result_messages;\n\t}\n\n\t// Connect to DB host (without selecting DB because we should maybe create this by request):\n\t$DB = new DB( array(\n\t\t\t'user'     => $params['db_user'],\n\t\t\t'password' => $params['db_password'],\n\t\t\t'host'     => $params['db_host'],\n\t\t\t'aliases'          => $db_config['aliases'],\n\t\t\t'connection_charset' => empty( $db_config['connection_charset'] ) ? DB::php_to_mysql_charmap( $evo_charset ) : $db_config['connection_charset'],\n\t\t\t'halt_on_error'      => false\n\t\t) );\n\n\tif( $params['create_db'] )\n\t{\t// Try to create DB if it doesn't exist yet:\n\t\t$DB->query( 'CREATE DATABASE IF NOT EXISTS `'.$params['db_name'].'`\n\t\t\tCHARACTER SET '.$DB->connection_charset );\n\t\tif( $DB->error )\n\t\t{\n\t\t\tdisplay_install_messages( sprintf( T_('You don\\'t seem to have permission to create this new database on \"%s\" (%s).'), $params['db_host'], $DB->last_error ) );\n\t\t\t$action = 'start';\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Select DB:\n\t$DB->select( $params['db_name'] );\n\n\tif( $DB->error )\n\t{ // restart conf\n\t\tdisplay_install_messages( T_('It seems that the database config settings you entered don\\'t work. Please check them carefully and try again...') );\n\t\t$action = 'start';\n\t}\n\telse\n\t{\n\t\t$conf_template_filepath = $conf_path.'_basic_config.template.php';\n\t\t$conf_filepath = $conf_path.'_basic_config.php';\n\n\t\t// Read original:\n\t\t$file_loaded = @file( $conf_template_filepath );\n\n\t\tif( empty( $file_loaded ) )\n\t\t{ // This should actually never happen, just in case...\n\t\t\tdisplay_install_messages( sprintf( T_('Could not load original conf file [%s]. Is it missing?'), $conf_filepath ) );\n\t\t\tif( ! $params['print_messages'] )\n\t\t\t{ // Return all messages instead of printing on screen\n\t\t\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// File loaded...\n\t\t$conf = implode( '', $file_loaded );\n\t\t// Update conf:\n\t\t$conf = preg_replace(\n\t\t\tarray(\n\t\t\t\t'#\\$db_config\\s*=\\s*array\\(\n\t\t\t\t\t\\s*[\\'\"]user[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]password[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"], ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]name[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]host[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t#ixs',\n\t\t\t\t\"#tableprefix\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#baseurl\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#admin_email\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#config_is_done\\s*=.*?;#\",\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\$db_config = array(\\n\"\n\t\t\t\t\t.\"\\t'user'     => '\".format_install_param( $params['db_user'] ).\"',\\$1\"\n\t\t\t\t\t.\"\\t'password' => '\".format_install_param( $params['db_password'] ).\"',\\$2\"\n\t\t\t\t\t.\"\\t'name'     => '\".format_install_param( $params['db_name'] ).\"',\\$3\"\n\t\t\t\t\t.\"\\t'host'     => '\".format_install_param( $params['db_host'] ).\"',\\$4\",\n\t\t\t\t\"tableprefix = '\".format_install_param( $params['db_tableprefix'] ).\"';\",\n\t\t\t\t\"baseurl = '\".format_install_param( $params['baseurl'] ).\"';\",\n\t\t\t\t\"admin_email = '\".format_install_param( $params['admin_email'] ).\"';\",\n\t\t\t\t'config_is_done = 1;',\n\t\t\t), $conf );\n\n\t\t// Write new contents:\n\t\tif( save_to_file( $conf, $conf_filepath, 'w' ) )\n\t\t{\n\t\t\tdisplay_install_messages( sprintf( T_('Your configuration file <code>%s</code> has been successfully created.').'</p>', $conf_filepath ), 'success' );\n\n\t\t\t$tableprefix = $params['db_tableprefix'];\n\t\t\t$baseurl = $params['baseurl'];\n\t\t\t$admin_email = $params['admin_email'];\n\t\t\t$config_is_done = 1;\n\t\t\tif( ! $params['quick_install'] )\n\t\t\t{ // Switch to menu only on standard installation:\n\t\t\t\t$action = 'menu';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t?>\n\t\t\t<h1><?php echo T_('Config file update') ?></h1>\n\t\t\t<p><strong><?php printf( T_('We cannot automatically create or update your config file [%s]!'), $conf_filepath ); ?></strong></p>\n\t\t\t<p><?php echo T_('There are two ways to deal with this:') ?></p>\n\t\t\t<ul>\n\t\t\t\t<li><strong><?php echo T_('You can allow the installer to create the config file by changing permissions for the /conf directory:') ?></strong>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li><?php printf( T_('Make sure there is no existing and potentially locked configuration file named <code>%s</code>. If so, please delete it.'), $conf_filepath ); ?></li>\n\t\t\t\t\t\t<li><?php printf( T_('<code>chmod 777 %s</code>. If needed, see the <a %s>online manual about permissions</a>.'), $conf_path, 'href=\"'.get_manual_url( 'directory-and-file-permissions' ).'\" target=\"_blank\"' ); ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Come back to this page and refresh/reload.') ?></li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<br />\n\t\t\t\t</li>\n\t\t\t\t<li><strong><?php echo T_('Alternatively, you can update the config file manually:') ?></strong>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li><?php echo T_('Create a new text file with a text editor.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Copy the contents from the box below.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Paste them into your local text editor. <strong>ATTENTION: make sure there is ABSOLUTELY NO WHITESPACE after the final <code>?&gt;</code> in the file.</strong> Any space, tab, newline or blank line at the end of the conf file may prevent cookies from being set when you try to log in later.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Save the file locally under the name <code>_basic_config.php</code>') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Upload the file to your server, into the <code>/_conf</code> folder.') ?></li>\n\t\t\t\t\t\t<li><?php printf( T_('<a %s>Call the installer from scratch</a>.'), 'href=\"index.php?locale='.$default_locale.'\"') ?></li>\n\t\t\t\t\t</ol>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<p><?php echo T_('This is how your _basic_config.php should look like:') ?></p>\n\t\t\t<blockquote>\n\t\t\t<pre><?php\n\t\t\t\techo htmlspecialchars( $conf );\n\t\t\t?></pre>\n\t\t\t</blockquote>\n\t\t\t<?php\n\n\t\t\tif( ! $params['print_messages'] )\n\t\t\t{ // Return all messages instead of printing on screen\n\t\t\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif( ! $params['print_messages'] )\n\t{ // Return all messages instead of printing on screen\n\t\t$basic_config_file_result_messages = ob_get_clean();\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Print out log text on screen\n *\n * @param string Log text\n * @param string Log type: 'warning', 'note', 'success', 'danger'\n */\nfunction echo_install_log( $text, $type = 'warning' )\n{\n\techo '<p class=\"alert alert-'.$type.'\">'.$text.'</p>';\n}\n?>"], "fixing_code": ["<?php\n/**\n * This file implements support functions for the installer\n *\n * b2evolution - {@link http://b2evolution.net/}\n * Released under GNU GPL License - {@link http://b2evolution.net/about/gnu-gpl-license}\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n *\n * @package install\n */\nif( !defined('EVO_MAIN_INIT') ) die( 'Please, do not access this page directly.' );\n\n/**\n * Open a block\n *\n * @param string Block title\n */\nfunction block_open( $title = '' )\n{\n\tglobal $block_status;\n\tif( isset( $block_status ) && $block_status == 'open' )\n\t{\n\t\treturn;\n\t}\n\n\t$block_status = 'open';\n\n\techo \"\\n\".'<div class=\"panel panel-default\">'.\"\\n\";\n\tif( $title != '' )\n\t{ // Display a title\n\t\techo '<div class=\"panel-heading\">'.$title.'</div>'.\"\\n\";\n\t}\n\techo '<div class=\"panel-body\">'.\"\\n\";\n}\n\n/**\n * Close a block\n */\nfunction block_close()\n{\n\tglobal $block_status;\n\tif( ! isset( $block_status ) || $block_status == 'closed' )\n\t{\n\t\treturn;\n\t}\n\t$block_status = 'closed';\n\techo '</div></div>'.\"\\n\\n\";\n}\n\n/**\n * Language selector\n */\nfunction display_locale_selector()\n{\n\tglobal $locales, $default_locale, $action;\n\n\tstatic $selector_already_displayed = false;\n\n\tif( $selector_already_displayed )\n\t{\n\t\treturn;\n\t}\n\t$selector_already_displayed = true;\n\n\tblock_open( T_('Language / Locale') );\n\t?>\n\t<ul class=\"pager pull-right\" style=\"margin:0\">\n\t\t<li class=\"next\"><a href=\"index.php?action=localeinfo&amp;locale=<?php echo $default_locale; ?>\">More languages <span aria-hidden=\"true\">&rarr;</span></a></li>\n\t</ul>\n\n\t<?php\n\tif( isset( $locales[ $default_locale ] ) )\n\t{\n\t\t$default_locale_option_title = locale_flag( $default_locale, 'w16px', 'flag', '', false ).' '.$locales[ $default_locale ]['name'];\n\t}\n\t$locale_options = '';\n\tforeach( $locales as $lkey => $lvalue )\n\t{\n\t\t$locale_options .= '<li><a href=\"index.php?locale='.$lkey.'\">'.locale_flag( $lkey, 'w16px', 'flag', '', false ).' '.T_( $lvalue['name'] ).'</a></li>'.\"\\n\";\n\t}\n\t?>\n\t<div class=\"btn-group install-language\">\n\t\t<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n\t\t\t<?php echo $default_locale_option_title; ?>\n\t\t\t<span class=\"caret\"></span>\n\t\t</button>\n\t\t<ul class=\"dropdown-menu\" role=\"menu\">\n\t\t<?php echo $locale_options; ?>\n\t\t</ul>\n\t</div>\n\n\t<noscript>\n\t\t<style type=\"text/css\">.install-language{display:none;}</style>\n\t\t<form action=\"index.php\" method=\"get\" class=\"form-inline\">\n\t\t<select name=\"locale\" class=\"form-control\">\n\t\t<?php\n\t\tforeach( $locales as $lkey => $lvalue )\n\t\t{\n\t\t\techo '<option'.( $default_locale == $lkey ? ' selected=\"selected\"' : '' ).' value=\"'.$lkey.'\">';\n\t\t\techo T_( $lvalue['name'] );\n\t\t\techo '</option>';\n\t\t}\n\t\t?>\n\t\t</select>\n\t\t<input type=\"submit\" value=\"<?php echo T_('Select as default language/locale'); ?>\" class=\"btn btn-primary\" />\n\t\t</form>\n\t</noscript>\n\t<?php\n\tblock_close();\n}\n\n/**\n * Base config recap\n */\nfunction display_base_config_recap()\n{\n\tglobal $default_locale, $conf_db_user, $conf_db_password, $conf_db_name, $conf_db_host, $db_config, $tableprefix, $baseurl, $admin_email;\n\n\tstatic $base_config_recap_already_displayed = false;\n\n\tif( $base_config_recap_already_displayed )\n\t{\n\t\treturn;\n\t}\n\t$base_config_recap_already_displayed = true;\n\n\techo '<br />';\n\tblock_open( T_('Base config recap...') );\n\t?>\n\t<p><?php printf( T_('If you don\\'t see correct settings here, STOP before going any further, and <a %s>update your base configuration</a>.'), 'href=\"index.php?action=start&amp;locale='.$default_locale.'\"' ) ?></p>\n\n\t<?php\n\tif( !isset($conf_db_user) ) $conf_db_user = $db_config['user'];\n\tif( !isset($conf_db_password) ) $conf_db_password = $db_config['password'];\n\tif( !isset($conf_db_name) ) $conf_db_name = $db_config['name'];\n\tif( !isset($conf_db_host) ) $conf_db_host = isset($db_config['host']) ? $db_config['host'] : 'localhost';\n\n\techo '<samp>'.\n\tT_('MySQL Username').': '.$conf_db_user.'<br />'.\n\tT_('MySQL Password').': '.(($conf_db_password != 'demopass' ? T_('(Set, but not shown for security reasons)') : 'demopass') ).'<br />'.\n\tT_('MySQL Database name').': '.$conf_db_name.'<br />'.\n\tT_('MySQL Host/Server').': '.$conf_db_host.'<br />'.\n\tT_('MySQL tables prefix').': '.$tableprefix.'<br /><br />'.\n\tT_('Base URL').': '.$baseurl.'<br /><br />'.\n\tT_('Admin email').': '.$admin_email.\n\t'</samp>';\n\n\tblock_close();\n}\n\n\n/**\n * Install new DB.\n */\nfunction install_newdb()\n{\n\tglobal $new_db_version, $admin_url, $baseurl, $install_login, $random_password;\n\tglobal $create_sample_contents, $create_sample_organization, $create_demo_users;\n\n\t/*\n\t * -----------------------------------------------------------------------------------\n\t * NEW DB: Create a plain new db structure + sample contents\n\t * -----------------------------------------------------------------------------------\n\t */\n\trequire_once dirname(__FILE__).'/_functions_create.php';\n\n\tif( $old_db_version = get_db_version() )\n\t{\n\t\techo get_install_format_text( '<p class=\"text-warning\"><strong><evo:warning>'.T_('OOPS! It seems b2evolution is already installed!').'</evo:warning></strong></p>', 'p' );\n\n\t\tif( $old_db_version < $new_db_version )\n\t\t{\n\t\t\techo get_install_format_text( '<p>'.sprintf( T_('Would you like to <a %s>upgrade your existing installation now</a>?'), 'href=\"?action=evoupgrade\"' ).'</p>', 'p' );\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/**\n\t * 1 - If current installation is local, test or intranet\n\t *     Used to turn off gravatar and all ping plugins\n\t *\n\t * @var integer\n\t */\n\t$local_installation = param( 'local_installation', 'integer', ( $create_sample_contents == 'all' ? intval( check_local_installation() ) : 0 ) );\n\n\techo get_install_format_text( '<h2>'.T_('Creating b2evolution tables...').'</h2>', 'h2' );\n\tevo_flush();\n\tcreate_tables();\n\n\t// Update the progress bar status\n\tupdate_install_progress_bar();\n\n\t// Create default data\n\techo get_install_format_text( '<h2>'.T_('Creating minimum default data...').'</h2>', 'h2' );\n\tevo_flush();\n\tcreate_default_data();\n\n\n\tif( $create_sample_organization || $create_demo_users )\n\t{\n\t\techo get_install_format_text( '<h2>'.T_('Creating sample organization and users...').'</h2>', 'h2' );\n\t\tevo_flush();\n\n\t\t// Create sample organization if selected\n\t\tif( $create_sample_organization )\n\t\t{\n\t\t\tcreate_sample_organization();\n\t\t}\n\n\t\t// Create demo users if selected\n\t\tif( $create_demo_users )\n\t\t{\n\t\t\tglobal $Settings;\n\n\t\t\t// We're gonna need some environment in order to create the demo contents...\n\t\t\tload_class( 'settings/model/_generalsettings.class.php', 'GeneralSettings' );\n\t\t\tload_class( 'users/model/_usersettings.class.php', 'UserSettings' );\n\t\t\t/**\n\t\t\t* @var GeneralSettings\n\t\t\t*/\n\t\t\t$Settings = new GeneralSettings();\n\n\t\t\t/**\n\t\t\t* @var UserCache\n\t\t\t*/\n\t\t\t$UserCache = & get_UserCache();\n\t\t\t// Create $current_User object.\n\t\t\t// (Assigning by reference does not work with \"global\" keyword (PHP 5.2.8))\n\t\t\t$GLOBALS['current_User'] = & $UserCache->get_by_ID( 1 );\n\n\t\t\tcreate_demo_users();\n\t\t}\n\t}\n\n\tif( $create_sample_contents )\n\t{\n\t\tglobal $Settings, $install_test_features;\n\n\t\techo get_install_format_text( '<h2>'.T_('Installing sample contents...').'</h2>', 'h2' );\n\t\tevo_flush();\n\n\t\t// We're gonna need some environment in order to create the demo contents...\n\t\tload_class( 'settings/model/_generalsettings.class.php', 'GeneralSettings' );\n\t\tload_class( 'users/model/_usersettings.class.php', 'UserSettings' );\n\t\t/**\n\t\t * @var GeneralSettings\n\t\t */\n\t\t$Settings = new GeneralSettings();\n\n\t\t/**\n\t\t * @var UserCache\n\t\t */\n\t\t$UserCache = & get_UserCache();\n\t\t// Create $current_User object.\n\t\t// (Assigning by reference does not work with \"global\" keyword (PHP 5.2.8))\n\t\t$GLOBALS['current_User'] = & $UserCache->get_by_ID( 1 );\n\n\t\tcreate_demo_contents();\n\t}\n\n\tevo_flush();\n\tcreate_default_email_campaigns();\n\n\t// Update the progress bar status\n\tupdate_install_progress_bar();\n\n\ttrack_step( 'install-success' );\n\n\t$install_result_title = T_('Installation successful!');\n\t$install_result_body = get_install_format_text(\n\t\t'<p><strong>'\n\t\t\t.sprintf( T_('Now you can <a %s>log in</a> with the following credentials:'), 'href=\"'.$admin_url.'\"' )\n\t\t.'</strong></p>', 'p' )\n\t\t.get_install_format_text(\n\t\t'<table>'\n\t\t\t.'<tr><td>'.T_( 'Login' ).': &nbsp;</td><td><strong><evo:login>'.( isset( $install_login ) ? $install_login : 'admin' ).'</evo:login></strong></td></tr>', 'br' )\n\t\t.get_install_format_text(\n\t\t\t'<tr><td>'.T_( 'Password' ).': &nbsp;</td><td><strong><evo:password>'.$random_password.'</evo:password></strong></td></tr>'\n\t\t.'</table>', 'br' )\n\t\t.get_install_format_text(\n\t\t'<br /><p>'.T_('Note that password carefully! It is a <em>random</em> password that is given to you when you install b2evolution. If you lose it, you will have to delete the database tables and re-install anew.').'</p>', 'p' );\n\n\t// Display installation data and instructions\n\techo get_install_format_text( '<h2>'.$install_result_title.'</h2>', 'h2' );\n\techo $install_result_body;\n\n\t// Modal window with installation data and instructions\n\tdisplay_install_result_window( $install_result_title, $install_result_body );\n}\n\n\n/**\n * Begin install task.\n * This will offer other display methods in the future\n */\nfunction task_begin( $title )\n{\n\techo get_install_format_text( $title.\"\\n\" );\n\tevo_flush();\n}\n\n\n/**\n * End install task.\n * This will offer other display methods in the future\n */\nfunction task_end( $message = 'OK.' )\n{\n\techo get_install_format_text( $message.\"<br />\\n\", 'br' );\n}\n\n\nfunction get_db_version()\n{\n\tglobal $DB;\n\n\t$DB->save_error_state();\n\t$DB->halt_on_error = false;\n\t$DB->show_errors = false;\n\t$DB->log_errors = false;\n\n\t$r = NULL;\n\n\tif( db_col_exists( 'T_settings', 'set_name' ) )\n\t{ // we have new table format (since 0.9)\n\t\t$r = $DB->get_var( 'SELECT set_value FROM T_settings WHERE set_name = \"db_version\"' );\n\t}\n\telse\n\t{\n\t\t$r = $DB->get_var( 'SELECT db_version FROM T_settings' );\n\t}\n\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * Get default locale from db\n */\nfunction get_default_locale_from_db()\n{\n\tglobal $DB;\n\n\tif( empty( $DB ) )\n\t{ // DB doesn't exists yet\n\t\treturn NULL;\n\t}\n\n\t$DB->save_error_state();\n\t$DB->halt_on_error = false;\n\t$DB->show_errors = false;\n\t$DB->log_errors = false;\n\n\t$r = NULL;\n\n\tif( db_col_exists( 'T_settings', 'set_name' ) )\n\t{\n\t\t$r = $DB->get_var( 'SELECT set_value FROM T_settings WHERE set_name = \"default_locale\"' );\n\t}\n\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * @return boolean Does a given column name exist in DB?\n */\nfunction db_col_exists( $table, $col_name )\n{\n\tglobal $DB;\n\n\t$col_name = strtolower($col_name);\n\n\t$r = false;\n\t$DB->save_error_state();\n\tforeach( $DB->get_results('SHOW COLUMNS FROM '.$table) as $row )\n\t{\n\t\tif( strtolower($row->Field) == $col_name )\n\t\t{\n\t\t\t$r = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$DB->restore_error_state();\n\n\treturn $r;\n}\n\n\n/**\n * Clean up extra quotes in comments\n */\nfunction cleanup_comment_quotes()\n{\n\tglobal $DB;\n\n\ttask_begin( 'Checking for extra quote escaping in comments... ' );\n\t$query = \"SELECT comment_ID, comment_content\n\t\t\t\t\t\t\tFROM T_comments\n\t\t\t\t\t\t WHERE comment_content LIKE '%\\\\\\\\\\\\\\\\\\'%'\n\t\t\t\t\t\t \t\tOR comment_content LIKE '%\\\\\\\\\\\\\\\\\\\"%' \";\n\t/* FP: the above looks overkill, but MySQL is really full of surprises...\n\t\t\t\t\ttested on 4.0.14-nt */\n\t// echo $query;\n\t$rows = $DB->get_results( $query, ARRAY_A );\n\tif( $DB->num_rows )\n\t{\n\t\techo 'Updating '.$DB->num_rows.' comments... ';\n\t\tforeach( $rows as $row )\n\t\t{\n\t\t\t$query = \"UPDATE T_comments\n\t\t\t\t\t\t\t\tSET comment_content = \".$DB->quote( stripslashes( $row['comment_content'] ) ).\"\n\t\t\t\t\t\t\t\tWHERE comment_ID = \".$row['comment_ID'];\n\t\t\t// echo '<br />'.$query;\n\t\t\t$DB->query( $query );\n\t\t}\n\t}\n\ttask_end();\n\n}\n\n\n/**\n * Validate install requirements.\n *\n * @return array List of errors, empty array if ok.\n */\nfunction install_validate_requirements()\n{\n\t$errors = array();\n\n\treturn $errors;\n}\n\n\n/**\n * Insert default locales into T_locales.\n */\nfunction create_default_locales()\n{\n\ttask_begin( 'Activating default locales... ' );\n\tlocale_insert_default();\n\ttask_end();\n}\n\n\n/**\n * Insert default settings into T_settings.\n *\n * It only writes those to DB, that get overridden (passed as array), or have\n * no default in {@link _generalsettings.class.php} / {@link GeneralSettings::default}.\n *\n * @param array associative array (settings name => value to use), allows\n *              overriding of defaults\n */\nfunction create_default_settings( $override = array() )\n{\n\tglobal $DB, $new_db_version, $default_locale;\n\tglobal $admins_Group, $moderators_Group, $editors_Group, $users_Group, $suspect_Group, $spam_Group;\n\tglobal $install_test_features, $create_sample_contents, $install_site_color, $local_installation;\n\tglobal $create_sample_organization, $create_demo_users;\n\n\t$defaults = array(\n\t\t'db_version' => $new_db_version,\n\t\t'default_locale' => $default_locale,\n\t\t'newusers_grp_ID' => $users_Group->ID,\n\t\t'evocache_foldername' => '_evocache',\n\t\t'newusers_canregister' => 'yes',\n\t\t'registration_is_public' => 1,\n\t\t'quick_registration' => 1,\n\t);\n\tif( $install_test_features )\n\t{\n\t\t$defaults['gender_colored'] = 1;\n\t\techo_install_log( 'TEST FEATURE: Enabling colored gender usernames by default' );\n\t\t$defaults['registration_require_country'] = 1;\n\t\t$defaults['registration_require_gender'] = 'required';\n\t\techo_install_log( 'TEST FEATURE: Making country and gender required on registration' );\n\t\t$defaults['location_country'] = 'required';\n\t\t$defaults['location_region'] = 'required';\n\t\t$defaults['location_subregion'] = 'required';\n\t\t$defaults['location_city'] = 'required';\n\t\techo_install_log( 'TEST FEATURE: Making country, region, sub-region and city required by default' );\n\t}\n\tif( !empty( $install_site_color ) )\n\t{ // Set default site color\n\t\t$defaults['site_color'] = $install_site_color;\n\t}\n\tif( !empty( $suspect_Group ) )\n\t{ // Set default antispam suspicious group\n\t\t$defaults['antispam_suspicious_group'] = $suspect_Group->ID;\n\t}\n\t$antispam_trust_groups = array();\n\tif( !empty( $admins_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $admins_Group->ID;\n\t}\n\tif( !empty( $moderators_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $moderators_Group->ID;\n\t}\n\tif( !empty( $editors_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $editors_Group->ID;\n\t}\n\tif( !empty( $spam_Group ) )\n\t{\n\t\t$antispam_trust_groups[] = $spam_Group->ID;\n\t}\n\tif( count( $antispam_trust_groups ) > 0 )\n\t{ // Set default antispam trust group\n\t\t$defaults['antispam_trust_groups'] = implode( ',', $antispam_trust_groups );\n\t}\n\tif( $local_installation )\n\t{ // Current installation is local\n\t\t// Turn off gravatar and use 'Default gravatars' = 'Gravatar'\n\t\t$defaults['use_gravatar'] = 0;\n\t\t$defaults['default_gravatar'] = '';\n\t}\n\n\t$settings = array_merge( array_keys($defaults), array_keys($override) );\n\t$settings = array_unique( $settings );\n\t$insertvalues = array();\n\tforeach( $settings as $name )\n\t{\n\t\tif( isset($override[$name]) )\n\t\t{\n\t\t\t$insertvalues[] = '('.$DB->quote($name).', '.$DB->quote($override[$name]).')';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$insertvalues[] = '('.$DB->quote($name).', '.$DB->quote($defaults[$name]).')';\n\t\t}\n\t}\n\n\ttask_begin( 'Creating default settings'.( count($override) ? ' (with '.count($override).' existing values)' : '' ).'... ' );\n\t$DB->query(\n\t\t\"INSERT INTO T_settings (set_name, set_value)\n\t\tVALUES \".implode( ', ', $insertvalues ) );\n\ttask_end();\n}\n\n\n/**\n * Install basic skins.\n */\nfunction install_basic_skins( $install_mobile_skins = true )\n{\n\tload_funcs( 'skins/_skin.funcs.php' );\n\n\ttask_begin( 'Installing default skins... ' );\n\n\t// Note: Skin #1 will we used by Blog A and Blog B\n\t// Install this skin firstly in order to use it by default for all collections with wrong skin ID on upgrade process:\n\tskin_install( 'bootstrap_blog_skin' );\n\n\t// Note: Skin #2 will we used by Home\n\tskin_install( 'bootstrap_main_skin' );\n\n\t// Note: Skin #3 will we used by Photos\n\tskin_install( 'bootstrap_gallery_skin' );\n\n\t// Note: Skin #4 will we used by Forums\n\tskin_install( 'bootstrap_forums_skin' );\n\n\t// Note: Skin #5 will we used by Manual\n\tskin_install( 'bootstrap_manual_skin' );\n\n\t// skin_install( 'asevo' );\n\t// skin_install( 'dating_mood' );\n\t// skin_install( 'evopress' );\n\t// skin_install( 'photoalbums' );\n\t// skin_install( 'photoblog' );\n\t// skin_install( 'pureforums' );\n\tif( $install_mobile_skins )\n\t{\n\t\tskin_install( 'touch' );\n\t}\n\tskin_install( '_atom' );\n\tskin_install( '_rss2' );\n\n\ttask_end();\n}\n\n\n/**\n * Install basic plugins.\n *\n * This gets called separately on fresh installs.\n *\n * {@internal\n * NOTE: this won't call the \"AfterInstall\" method on the plugin nor install its DB schema.\n *       This get done in the plugins controller, on manually installing a plugin.\n *\n * If you change the plugins here, please also adjust {@link InstallUnitTestCase::basic_plugins}.\n * }}\n *\n * @param integer Old DB version, so that only new plugins gets installed\n */\nfunction install_basic_plugins( $old_db_version = 0 )\n{\n\t/**\n\t * @var Plugins_admin\n\t */\n\tglobal $Plugins_admin, $install_test_features;\n\n\t$Plugins_admin = & get_Plugins_admin();\n\n\t// Create global $Plugins instance, which is required during installation of basic plugins,\n\t// not only for the ones getting installed, but also during e.g. count_regs(), which instantiates\n\t// each plugin (which may then use (User)Settings in PluginInit (through Plugin::__get)).\n\t$GLOBALS['Plugins'] = & $Plugins_admin;\n\n\tif( $old_db_version < 9100 )\n\t{\n\t\t// Toolbars:\n\t\tinstall_plugin( 'quicktags_plugin' );\n\t\t// Renderers:\n\t\tinstall_plugin( 'auto_p_plugin' );\n\t\tinstall_plugin( 'autolinks_plugin' );\n\t\tinstall_plugin( 'texturize_plugin' );\n\n\t\t// SkinTags:\n\t\tinstall_plugin( 'calendar_plugin' );\n\t\tinstall_plugin( 'archives_plugin' );\n\t}\n\n\tif( $old_db_version < 9290 )\n\t{\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Installing plugin \"Smilies\"' );\n\t\t\tinstall_plugin( 'smilies_plugin' );\n\t\t}\n\t\tinstall_plugin( 'videoplug_plugin' );\n\t}\n\n\tif( $old_db_version < 9330 )\n\t{ // Upgrade to 1.9-beta\n\t\tinstall_plugin( 'ping_b2evonet_plugin' );\n\t\tinstall_plugin( 'ping_pingomatic_plugin' );\n\t}\n\n\tif( $old_db_version < 9930 )\n\t{ // Upgrade to 3.1.0\n\t\tinstall_plugin( 'tinymce_plugin' );\n\t}\n\n\tif( $old_db_version < 9940 )\n\t{ // Upgrade to 3.2.0\n\t\tinstall_plugin( 'twitter_plugin' );\n\t}\n\n\tif( $old_db_version < 10300 )\n\t{ // Upgrade to 5.0.0\n\t\tinstall_plugin( 'flowplayer_plugin' );\n\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Installing plugin \"Google Maps\"' );\n\t\t\tinstall_plugin( 'google_maps_plugin' );\n\t\t}\n\t}\n\n\tif( $old_db_version < 11000 )\n\t{ // Upgrade to 5.0.0-alpha-4\n\t\tif( $install_test_features )\n\t\t{\n\t\t\t$captcha_qstn_plugin_settings = array(\n\t\t\t\t\t'questions' => T_('What is the color of the sky? blue|grey|gray|dark').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What animal is Bugs Bunny? rabbit|a rabbit').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What color is a carrot? orange|yellow').\"\\r\\n\".\n\t\t\t\t\t\t\t\t\t\t\t\t T_('What color is a tomato? red')\n\t\t\t\t);\n\t\t\techo_install_log( 'TEST FEATURE: Creating sample questions for plugin \"Captcha questions\"' );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$captcha_qstn_plugin_settings = array();\n\t\t}\n\t\tinstall_plugin( 'captcha_qstn_plugin', true, $captcha_qstn_plugin_settings );\n\t}\n\n\tif( $old_db_version < 11100 )\n\t{ // Upgrade to 5.0.0-alpha-5\n\t\t// antispam\n\t\tinstall_plugin( 'basic_antispam_plugin' );\n\t\tinstall_plugin( 'geoip_plugin' );\n\t\t// files\n\t\tinstall_plugin( 'html5_mediaelementjs_plugin' );\n\t\tinstall_plugin( 'html5_videojs_plugin' );\n\t\tinstall_plugin( 'watermark_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Watermark\"' );\n\t\t}\n\t\t// ping\n\t\tinstall_plugin( 'generic_ping_plugin' );\n\t\t// rendering\n\t\tinstall_plugin( 'escapecode_plugin' );\n\t\tinstall_plugin( 'bbcode_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"BB code\"' );\n\t\t}\n\t\tinstall_plugin( 'star_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Star renderer\"' );\n\t\t}\n\t\tinstall_plugin( 'prism_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Prism\"' );\n\t\t}\n\t\tinstall_plugin( 'code_highlight_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Code highlight\"' );\n\t\t}\n\t\tinstall_plugin( 'gmcode_plugin' );\n\t\tinstall_plugin( 'wacko_plugin' );\n\t\tinstall_plugin( 'shortlinks_plugin' );\n\t\tinstall_plugin( 'wikitables_plugin' );\n\t\tinstall_plugin( 'markdown_plugin' );\n\t\tinstall_plugin( 'infodots_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Info dots renderer\"' );\n\t\t}\n\t\tinstall_plugin( 'widescroll_plugin' );\n\t\t// widget\n\t\tinstall_plugin( 'facebook_plugin' );\n\t\tinstall_plugin( 'whosonline_plugin' );\n\t\t// Unclassified\n\t\tinstall_plugin( 'bookmarklet_plugin' );\n\t}\n\n\tif( $old_db_version < 11200 )\n\t{ // Upgrade to 5.1.3-stable\n\t\tinstall_plugin( 'shortcodes_plugin' );\n\t}\n\n\tif( $old_db_version < 11490 )\n\t{ // Upgrade to 6.7.1-stable\n\t\tinstall_plugin( 'adjust_headings_plugin', $install_test_features );\n\t\tif( $install_test_features )\n\t\t{\n\t\t\techo_install_log( 'TEST FEATURE: Activating plugin \"Adjust headings\"' );\n\t\t}\n\t\tinstall_plugin( 'cookie_consent_plugin', false );\n\t}\n\n\tif( $old_db_version < 11730 )\n\t{\n\t\tinstall_plugin( 'custom_tags_plugin', true );\n\t}\n}\n\n\n/**\n * Install plugin\n *\n * @param string Plugin name\n * @param boolean TRUE - to activate plugin\n * @param array Plugin settings\n * @return true on success\n */\nfunction install_plugin( $plugin, $activate = true, $settings = array() )\n{\n\t/**\n\t * @var Plugins_admin\n\t */\n\tglobal $Plugins_admin;\n\n\ttask_begin( 'Installing plugin: '.$plugin.'... ' );\n\t$edit_Plugin = & $Plugins_admin->install( $plugin, 'broken' ); // \"broken\" by default, gets adjusted later\n\tif( ! ( $edit_Plugin instanceof Plugin ) )\n\t{ // Broken plugin\n\t\techo get_install_format_text( '<span class=\"text-danger\"><evo:error>'.$edit_Plugin.'</evo:error></span><br />'.\"\\n\", 'br' );\n\t\treturn false;\n\t}\n\n\tload_funcs('plugins/_plugin.funcs.php');\n\tinstall_plugin_db_schema_action( $edit_Plugin, true );\n\n\tif( ! empty( $settings ) )\n\t{ // Set plugin settings\n\t\tforeach( $settings as $setting_name => $setting_value )\n\t\t{\n\t\t\t$edit_Plugin->Settings->set( $setting_name, $setting_value );\n\t\t}\n\t\t$edit_Plugin->Settings->dbupdate();\n\t}\n\n\tif( $activate )\n\t{ // Try to enable plugin:\n\t\t$enable_return = $edit_Plugin->BeforeEnable();\n\t\tif( $enable_return !== true )\n\t\t{ // Warning on enable a plugin\n\t\t\techo get_install_format_text( '<span class=\"text-warning\"><evo:warning>'.$enable_return.'</evo:warning></span><br />'.\"\\n\", 'br' );\n\n\t\t\t// Set plugin status to \"needs_config\" to mark the plugin as incomplete for using:\n\t\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'needs_config' );\n\n\t\t\treturn false;\n\t\t}\n\n\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'enabled' );\n\t}\n\telse\n\t{ // Set plugin status as disable\n\t\t$Plugins_admin->set_Plugin_status( $edit_Plugin, 'disabled' );\n\t}\n\n\ttask_end();\n\treturn true;\n}\n\n\n/**\n * Install basic widgets.\n */\nfunction install_basic_widgets( $old_db_version = 0 )\n{\n\t/**\n\t* @var DB\n\t*/\n\tglobal $DB;\n\n\tload_funcs( 'widgets/_widgets.funcs.php' );\n\n\tif( $old_db_version < 11010 )\n\t{\n\t\t$blog_ids = $DB->get_assoc( 'SELECT blog_ID, \"std\" FROM T_blogs' );\n\t}\n\telse\n\t{\n\t\t$blog_ids = $DB->get_assoc( 'SELECT blog_ID, blog_type FROM T_blogs' );\n\t}\n\n\tforeach( $blog_ids as $blog_id => $blog_type )\n\t{\n\t\ttask_begin( 'Installing default widgets for blog #'.$blog_id.'... ' );\n\t\tinsert_basic_widgets( $blog_id, true, $blog_type );\n\t\ttask_end();\n\t}\n\n}\n\n\n\nfunction advanced_properties()\n{\n\t/*\n// file_path needs to be case sensitive on unix\n// Note: it should be ok on windows too if we take care of updating the db on case renames\nALTER TABLE `T_files` CHANGE `file_path` `file_path` VARCHAR( 255 ) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL\nor\nALTER TABLE `T_files` CHANGE `file_path` `file_path` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL\n\t*/\n}\n\n\n/**\n * Create relations\n *\n * @todo NOT UP TO DATE AT ALL :( -- update field names before activating this\n */\nfunction create_relations()\n{\n\tglobal $DB;\n\n\ttask_begin( 'Creating relations... ' );\n\n\t$DB->query( 'alter table T_coll_user_perms\n\t\t\t\t\t\t\t\tadd constraint FK_bloguser_blog_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (bloguser_blog_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_coll_user_perms\n\t\t\t\t\t\t\t\tadd constraint FK_bloguser_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (bloguser_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_categories\n\t\t\t\t\t\t\t\tadd constraint FK_cat_blog_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (cat_blog_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_cat_parent_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (cat_parent_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_comments\n\t\t\t\t\t\t\t\tadd constraint FK_comment_item_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (comment_item_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_postcats\n\t\t\t\t\t\t\t\tadd constraint FK_postcat_cat_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (postcat_cat_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_postcat_post_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (postcat_post_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_items__item\n\t\t\t\t\t\t\t\tadd constraint FK_post_assigned_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_assigned_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_lastedit_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_lastedit_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_creator_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_creator_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_main_cat_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_main_cat_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_categories (cat_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_parent_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_parent_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_pst_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_pst_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__status (pst_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict,\n\t\t\t\t\t\t\t\tadd constraint FK_post_ityp_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (post_ityp_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__type (ityp_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_creator_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_creator_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_lastedit_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_lastedit_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_file_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_file_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_files (file_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\t$DB->query( 'alter table T_links\n\t\t\t\t\t\t\t\tadd constraint FK_link_itm_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (link_itm_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_pluginsettings\n\t              add constraint FK_pset_plug_ID\n\t                    foreign key (pset_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_pluginusersettings\n\t              add constraint FK_puset_plug_ID\n\t                    foreign key (puset_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_pluginevents\n\t              add constraint FK_pevt_plug_ID\n\t                    foreign key (pevt_plug_ID)\n\t                    references T_plugins (plug_ID)\n\t                    on delete restrict\n\t                    on update restrict' );\n\n\t$DB->query( 'alter table T_users\n\t\t\t\t\t\t\t\tadd constraint FK_user_grp_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (user_grp_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_groups (grp_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_users__usersettings\n\t\t\t\t\t\t\t\tadd constraint FK_uset_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (uset_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_subscriptions\n\t\t\t\t\t\t\t\tadd constraint FK_sub_coll_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (sub_coll_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_blogs (blog_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_subscriptions\n\t\t\t\t\t\t\t\tadd constraint FK_sub_user_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (sub_user_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_users (user_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\t$DB->query( 'alter table T_slug\n\t\t\t\t\t\t\t\tadd constraint FK_slug_itm_ID\n\t\t\t\t\t\t\t\t\t\t\tforeign key (slug_itm_ID)\n\t\t\t\t\t\t\t\t\t\t\treferences T_items__item (post_ID)\n\t\t\t\t\t\t\t\t\t\t\ton delete restrict\n\t\t\t\t\t\t\t\t\t\t\ton update restrict' );\n\n\ttask_end();\n}\n\n\n/**\n * Install htaccess: Check if it works with the webserver, then install it for real.\n *\n * @param boolean are we upgrading (vs installing)?\n * @param boolean Force copying htaccess\n * @return boolean TRUE if no errors\n */\nfunction install_htaccess( $upgrade = false, $force_htaccess = false )\n{\n\techo get_install_format_text( '<p>'.T_('Preparing to install <code>/.htaccess</code> in the base folder...').' (Force='.($force_htaccess?'yes':'no').')<br />', 'p-start-br' );\n\n\tif( ! $force_htaccess )\n\t{\t// Check if we run apache...\n\t\t$server = isset( $_SERVER['SERVER_SOFTWARE'] ) ? $_SERVER['SERVER_SOFTWARE'] : '';\n\t\tif( ! empty( $server ) && preg_match( '~(Nginx|Lighttpd|Microsoft-IIS)~i', $server ) )\n\t\t{ // Skip installation if this is not an Apache server\n\t\t\techo get_install_format_text( '<br /><b class=\"text-warning\"><evo:warning>'.T_('.htaccess is not needed because your web server is not Apache. WARNING: you will need to configure your web server manually.').'</evo:warning></b></p>', 'p-end' );\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t$error_message = do_install_htaccess( $upgrade, $force_htaccess );\n\n\tif( $error_message )\n\t{\n\n\t\techo get_install_format_text( '<span class=\"text-danger\"><evo:error>'.T_('ERROR!').'<br /><b>'.$error_message.'</b></evo:error></span>' );\n\n\t\t// Do we want to ignore the error?\n\t\t$htignore = param( 'htignore', 'integer', 0 );\n\t\tif( $htignore )\n\t\t{ // Ignore error with .htaccess file and continue install...\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{ // Some errors are existing with .htaccess file, Display a link to ignore the errors and continue instalation\n\t\t\techo get_install_format_text( '<ul class=\"pager\"><li><a href=\"'.( isset( $_SERVER['REQUEST_URI'] ) ? $_SERVER['REQUEST_URI'] : '' ).'&htignore=1\" style=\"font-size:150%;font-weight:bold;\">'.T_('Continue installation').' <span aria-hidden=\"true\">&rarr;</span></a></li></ul>', 'li' );\n\t\t\treturn false;\n\t\t}\n\t}\n\techo get_install_format_text( '</p>', 'p-end' );\n\n\treturn true;\n}\n\n/**\n * This does the actual file manipulations for installing .htaccess\n * This will verify that the provided sample.htaccess does not crash apache in a test folder before installing it for real.\n *\n * @param boolean are we upgrading (vs installing)?\n * @param boolean Force copying htaccess\n * @return mixed\n */\nfunction do_install_htaccess( $upgrade = false, $force_htaccess = false )\n{\n\tglobal $baseurl;\n\tglobal $basepath;\n\n\t// Make sure we have a sample file to start with:\n\tif( ! @file_exists( $basepath.'sample.htaccess' ) )\n\t{\n\t\treturn T_('Cannot find file [ sample.htaccess ] in your base url folder.');\n\t}\n\n\tif( !$force_htaccess )\n\t{ // We're not forcing install, we want to check if it's supported:\n\n\t\tif( @file_exists( $basepath.'.htaccess' ) )\n\t\t{\n\t\t\tif( @file_exists( $basepath.'sample.htaccess' ) )\n\t\t\t{\n\t\t\t\t$content_htaccess = trim( file_get_contents( $basepath.'.htaccess' ) );\n\t\t\t\t$content_sample_htaccess = trim( file_get_contents( $basepath.'sample.htaccess' ) );\n\n\t\t\t\tif( $content_htaccess != $content_sample_htaccess )\n\t\t\t\t{ // The .htaccess file has content that different from a sample file\n\t\t\t\t\tif( $upgrade )\n\t\t\t\t\t{\n\t\t\t\t\t\techo get_install_format_text( '<span class=\"text-warning\"><evo:warning>'.T_('<code>.htaccess</code> is already installed BUT DOES NOT match <code>sample.htaccess</code>. Please check the differences manually.').'</evo:warning></span>' );\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\techo get_install_format_text( '<p class=\"text-danger\"><evo:error>'.T_('There is already a file called .htaccess at the blog root. If you don\\'t specifically need this file, it is recommended that you delete it or rename it to old.htaccess before you continue. This will allow b2evolution to create a new .htaccess file that is optimized for best results.').'</evo:error></p>', 'p' );\n\t\t\t\t\t\techo T_('Here are the contents of the current .htaccess file:');\n\t\t\t\t\t\techo get_install_format_text( '<div style=\"overflow:auto\"><pre>'.htmlspecialchars( $content_htaccess ).'</pre></div><br />', 'code' );\n\t\t\t\t\t\treturn get_install_format_text( sprintf( T_('Again, we recommend you remove this file before continuing. If you chose to keep it, b2evolution will probably still work, but for optimization you should follow <a %s>these instructions</a>.'), 'href=\"'.get_manual_url( 'htaccess-file' ).'\" target=\"_blank\"' ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t// Installed file is the same as recommended:\n\t\t\t\t\techo get_install_format_text( '<span class=\"text-info\">'.T_('<code>.htaccess</code> is already installed and matches <code>sample.htaccess</code>.').'</span>' );\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Try to copy that file to the test folder:\n\t\tif( ! @copy( $basepath.'sample.htaccess', $basepath.'install/test/.htaccess' ) )\n\t\t{\n\t\t\treturn T_('Failed to copy sample.htaccess to test folder!');\n\t\t}\n\n\t\t// Make sure .htaccess does not crash in the test folder:\n\t\tload_funcs('_core/_url.funcs.php');\n\t\t$fetch_test_url = $baseurl.'install/test/';\n\t\t$info = array();\n\t\techo get_install_format_text( T_('Verifying .htaccess support works by fetching:').' <code>'.$fetch_test_url.'</code>... ' );\n\t\tif( ! $remote_page = fetch_remote_page( $fetch_test_url, $info ) )\n\t\t{\n\t\t\treturn $info['error'];\n\t\t}\n\t\tif( substr( $remote_page, 0, 16 ) != 'Test successful.' )\n\t\t{\n\t\t\treturn sprintf( T_('%s was not found as expected.'), $baseurl.'install/test/index.html' );\n\t\t}\n\t}\n\n\t// Now we consider it's safe, copy .htaccess to its real location:\n\tif( ! @copy( $basepath.'sample.htaccess', $basepath.'.htaccess' ) )\n\t{\n\t\treturn T_('Test was successful, but failed to copy .htaccess into baseurl directory!');\n\t}\n\n\techo get_install_format_text( '<span class=\"text-success\"><evo:success>'.T_('.htaccess installation successful!').'</evo:success></span>' );\n\treturn '';\n}\n\n\n/**\n * Return antispam SQL query.\n * This is obfuscated because some hosting companies prevent uploading PHP files\n * containing \"spam\" strings.\n *\n * @return string;\n */\nfunction get_antispam_query()\n{\n\t//used base64_encode() for getting this code\n\treturn base64_decode('SU5TRVJUIElOVE8gVF9hbnRpc3BhbV9fa2V5d29yZCAoIGFza3dfc3RyaW5nICkgVkFMVUVTICgnb25saW5lLWNhc2lubycpLCAoJ3BlbmlzLWVubGFyZ2VtZW50JyksICgnb3JkZXItdmlhZ3JhJyksICgnb3JkZXItcGhlbnRlcm1pbmUnKSwgKCdvcmRlci14ZW5pY2FsJyksICgnb3JkZXItcHJvcGhlY2lhJyksICgnc2V4eS1saW5nZXJpZScpLCAoJy1wb3JuLScpLCAoJy1hZHVsdC0nKSwgKCctdGl0cy0nKSwgKCdidXktcGhlbnRlcm1pbmUnKSwgKCdvcmRlci1jaGVhcC1waWxscycpLCAoJ2J1eS14ZW5hZHJpbmUnKSwgKCdwYXJpcy1oaWx0b24nKSwgKCdwYXJpc2hpbHRvbicpLCAoJ2NhbWdpcmxzJyksICgnYWR1bHQtbW9kZWxzJyk=');\n}\n\n/**\n * We use the following tracking to determine the installer reliability (% of failed vs successful installs).\n */\nfunction track_step( $current_step )\n{\n\tglobal $display;\n\n\tif( ! empty( $display ) && $display == 'cli' )\n\t{\t// Don't display HTML on CLI mode:\n\t\treturn;\n\t}\n\n\t// echo 'Tracking '.$current_step;\n\techo '<div style=\"display:none\">'\n\t\t\t.'<img src=\"http://b2evolution.net/htsrv/track.php?key='.$current_step.'\" alt=\"\" />'\n\t\t.'</div>';\n}\n\n\n/**\n * Display a link to back to install menu\n */\nfunction display_install_back_link()\n{\n\tglobal $default_locale;\n\n\techo get_install_format_text( '<ul class=\"pager\">'\n\t\t\t.'<li class=\"previous\"><a href=\"index.php?locale='.$default_locale.'\"><span aria-hidden=\"true\">&larr;</span> '.T_('Back to install menu').'</a></li>'\n\t\t.'</ul>', 'p' );\n}\n\n\n/**\n * Display a progress bar to start an animation of a process\n *\n * @param string Title (Not visible on screen, it is used ONLY for screen readers)\n * @param integer|NULL A number of the steps\n */\nfunction start_install_progress_bar( $title, $steps = NULL )\n{\n\tglobal $install_progress_bar_counter, $install_progress_bar_total, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\tif( $steps !== NULL )\n\t{ // Progress bar with steps\n\t\t$install_progress_bar_total = $steps;\n\t\t$install_progress_bar_counter = 0;\n\t\t$bar_width = '0%';\n\t}\n\telse\n\t{ // Progress bar has no steps for update\n\t\t$bar_width = '100%';\n\t}\n\n\techo '<div class=\"progress\">'\n\t\t\t.'<div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:'.$bar_width.'\">'\n\t\t\t\t.'<span class=\"sr-only\">'.$title.'</span>'\n\t\t\t.'</div>'\n\t\t.'</div>';\n\tif( $steps !== NULL )\n\t{ // Use this fix to keep the progress animated forever when JavaScript is disabled\n\t\techo '<noscript>'\n\t\t\t\t.'<style type=\"text/css\">.progress-bar{width:100% !important}</style>'\n\t\t\t.'</noscript>';\n\t\t// Don't use the striped animation when we have a real progress indication\n\t\techo '<script type=\"text/javascript\">'\n\t\t\t.'jQuery( \".progress-bar.active.progress-bar-striped\" ).removeClass( \"active progress-bar-striped\" );'\n\t\t.'</script>';\n\t}\n}\n\n\n/**\n * Print JavaScript to stop the animation of the progress bar\n */\nfunction stop_install_progress_bar()\n{\n\tglobal $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\techo '<script type=\"text/javascript\">'\n\t\t.'jQuery( \".progress-bar\" ).css( \"width\", \"100%\" ).removeClass( \"active progress-bar-striped\" );'\n\t\t.'setTimeout( function() { jQuery( \".progress-bar\" ).addClass( \"progress-bar-success\" ); }, 600 );'\n\t.'</script>';\n}\n\n\n/**\n * Print JavaScript to update the progress bar status\n */\nfunction update_install_progress_bar()\n{\n\tglobal $install_progress_bar_counter, $install_progress_bar_total, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use progress bar on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\tif( empty( $install_progress_bar_total ) )\n\t{ // No a number of the steps, Exit here\n\t\treturn;\n\t}\n\n\t// This is next step\n\t$install_progress_bar_counter++;\n\n\t$bar_width = ceil( $install_progress_bar_counter / $install_progress_bar_total * 100 );\n\tif( $bar_width > 100 )\n\t{ // Limit by 100%\n\t\t$bar_width = 100;\n\t}\n\n\techo '<script type=\"text/javascript\">'\n\t\t.'jQuery( \".progress-bar\" ).css( \"width\", \"'.$bar_width.'%\" );'\n\t.'</script>';\n}\n\n\n/**\n * Calculate a number of the steps for current installation\n *\n * @return integer\n */\nfunction get_install_steps_count()\n{\n\tglobal $allow_install_test_features, $allow_evodb_reset;\n\tglobal $create_sample_organization;\n\n\t$steps = 0;\n\n\t// After Deleting b2evolution tables:\n\tif( $allow_evodb_reset >= 2 || ( $allow_install_test_features && $allow_evodb_reset >= 1 ) )\n\t{ // Allow to quick delete before new installation only when these two settings are enabled in config files\n\t\t$delete_contents = param( 'delete_contents', 'integer', 0 );\n\n\t\tif( $delete_contents )\n\t\t{ // A quick deletion is requested before new installation\n\t\t\t$steps++;\n\t\t}\n\t}\n\n\t// After Checking files:\n\t$steps++;\n\n\t// After Loading all modules:\n\t$steps++;\n\n\t// After Creating all DB tables:\n\t$steps++;\n\n\t// Before install default skins:\n\t$steps++;\n\n\t// Creating sample organization:\n\tif( $create_sample_organization )\n\t{\n\t\t$steps++;\n\t}\n\n\t// Installing sample contents:\n\t$create_sample_contents = param( 'create_sample_contents', 'string', '' );\n\n\tif( $create_sample_contents )\n\t{\n\t\t// After Creating default sample contents(users, and probably blogs and categories):\n\t\t$steps++;\n\n\t\tif( $create_sample_contents == 'all' )\n\t\t{ // Array contains which collections should be installed\n\t\t\t$install_collection_home =   1;\n\t\t\t$install_collection_bloga =  1;\n\t\t\t$install_collection_blogb =  1;\n\t\t\t$install_collection_photos = 1;\n\t\t\t$install_collection_forums = 1;\n\t\t\t$install_collection_manual = 1;\n\t\t\t$install_collection_tracker = 1;\n\t\t}\n\t\telse\n\t\t{ // Array contains which collections should be installed\n\t\t\t$collections = param( 'collections', 'array:string', array() );\n\t\t\t$install_collection_home = in_array( 'home', $collections );\n\t\t\t$install_collection_bloga = in_array( 'a', $collections );\n\t\t\t$install_collection_blogb = in_array( 'b', $collections );\n\t\t\t$install_collection_photos = in_array( 'photos', $collections );\n\t\t\t$install_collection_forums = in_array( 'forums', $collections );\n\t\t\t$install_collection_manual = in_array( 'manual', $collections );\n\t\t\t$install_collection_tracker = in_array( 'group', $collections );\n\t\t}\n\n\t\tif( $install_collection_home )\n\t\t{ // After installing of the blog \"Home\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_bloga )\n\t\t{ // After installing of the blog \"Blog A\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_blogb )\n\t\t{ // After installing of the blog \"Blog B\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_photos )\n\t\t{ // After installing of the blog \"Photos\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_forums )\n\t\t{ // After installing of the blog \"Forums\"\n\t\t\t$steps++;\n\t\t}\n\t\tif( $install_collection_manual )\n\t\t{ // After installing of the blog \"Manual\"\n\t\t\t$steps++;\n\t\t}\n\n\t\tif( $install_collection_tracker )\n\t\t{ // After installing of the blog \"Tracker\"\n\t\t\t$steps++;\n\t\t}\n\t}\n\n\t// Last step before successful message:\n\t$steps++;\n\n\treturn $steps;\n}\n\n\n/**\n * Calculate a number of the steps for current upgrading\n *\n * @return integer\n */\nfunction get_upgrade_steps_count()\n{\n\tglobal $new_db_version;\n\n\t$steps = 0;\n\n\t// After Checking files:\n\t$steps++;\n\n\t// After Loading all modules:\n\t$steps++;\n\n\t// Calculate the upgrade blocks:\n\t$old_db_version = get_db_version();\n\tif( $new_db_version > $old_db_version )\n\t{\t// Only when DB must be updated really:\n\t\t$upgrade_file_name = dirname( __FILE__ ).'/_functions_evoupgrade.php';\n\t\tif( @file_exists( $upgrade_file_name ) )\n\t\t{\t// If file exists we can parse to know how much the upgrade blocks will be executed:\n\t\t\t$upgrade_file_content = file_get_contents( $upgrade_file_name );\n\t\t\t// Find DB versions in the upgrade blocks like:\n\t\t\t//      if( $old_db_version < 11430 )\n\t\t\t//      if( upg_task_start( 11440, 'Upgrading base domains table...' ) )\n\t\t\tif( preg_match_all( '#if\\(\\s*(\\$old_db_version\\s*<|upg_task_start\\()\\s*(\\d+)#i', $upgrade_file_content, $version_matches ) )\n\t\t\t{\n\t\t\t\tforeach( $version_matches[2] as $version )\n\t\t\t\t{\n\t\t\t\t\tif( $old_db_version < $version && $new_db_version != $old_db_version )\n\t\t\t\t\t{\t// Only these new blocks will be executed:\n\t\t\t\t\t\t$steps++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Before Starting to check DB:\n\t$steps++;\n\n\t// Last step before successful message:\n\t$steps++;\n\n\treturn $steps;\n}\n\n\n/**\n * Display the messages on install pages\n *\n * @param string|array Messages\n * @param string Message type: 'error', 'warning', 'success', 'info'\n */\nfunction display_install_messages( $messages, $type = 'error' )\n{\n\tif( empty( $messages ) )\n\t{ // No messages\n\t\treturn;\n\t}\n\n\tif( is_string( $messages ) )\n\t{\n\t\t$messages = array( $messages );\n\t}\n\n\tswitch( $type )\n\t{\n\t\tcase 'error':\n\t\t\t$before_message = '<evo:error>';\n\t\t\t$after_message = '</evo:error>';\n\t\t\tbreak;\n\n\t\tcase 'warning':\n\t\t\t$before_message = '<evo:warning>';\n\t\t\t$after_message = '</evo:warning>';\n\t\t\tbreak;\n\n\t\tcase 'success':\n\t\t\t$before_message = '<evo:success>';\n\t\t\t$after_message = '</evo:success>';\n\t\t\tbreak;\n\n\t\tcase 'info':\n\t\t\t$before_message = '<evo:note>';\n\t\t\t$after_message = '</evo:note>';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t$before_message = '';\n\t\t\t$after_message = '';\n\t\t\tbreak;\n\t}\n\n\tif( $type == 'error' )\n\t{ // Fix to correct bootstrap class name \"alert-danger\"\n\t\t$type = 'danger';\n\t}\n\n\t$r = '';\n\tforeach( $messages as $message )\n\t{\n\t\t$r .= '<div class=\"alert alert-'.$type.'\" role=\"alert\">'.$before_message.$message.$after_message.'</div>'.\"\\n\";\n\t}\n\n\techo get_install_format_text($r);\n}\n\n\n/**\n * Print JavaScript to control button on install page\n */\nfunction echo_install_button_js()\n{\n\tglobal $app_name;\n?>\n<script type=\"text/javascript\">\njQuery( document ).ready( function()\n{\n\tjQuery( '#install_button' ).click( function()\n\t{\n\t\tif( jQuery( '#deletedb' ).is( ':checked' ) )\n\t\t{\n\t\t\tif( confirm( '<?php printf( /* TRANS: %s gets replaced by app name, usually \"b2evolution\" */ TS_( 'Are you sure you want to delete your existing %s tables?\\nDo you have a backup?' ), $app_name ); ?>' ) )\n\t\t\t{\n\t\t\t\tjQuery( 'input[name=confirmed]' ).val( 1 );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} );\n\n\tfunction update_install_button_info()\n\t{\n\t\tswitch( jQuery( 'input[type=radio][name=action]:checked' ).val() )\n\t\t{\n\t\t\tcase 'menu-install':\n\t\t\t\tvar btn_title = '<?php echo TS_('Next').' &raquo;'; ?>';\n\t\t\t\tvar btn_class = 'btn-success';\n\t\t\t\tbreak;\n\n\t\t\tcase 'evoupgrade':\n\t\t\t\tvar btn_title = '<?php echo TS_('UPGRADE!'); ?>';\n\t\t\t\tvar btn_class = 'btn-warning';\n\t\t\t\tbreak;\n\n\t\t\tcase 'deletedb':\n\t\t\t\tvar btn_title = '<?php echo TS_('DELETE ALL!'); ?>';\n\t\t\t\tvar btn_class = 'btn-danger';\n\t\t\t\tbreak;\n\n\t\t\tcase 'start':\n\t\t\t\tvar btn_title = '<?php echo TS_('Change config').' &raquo;'; ?>';\n\t\t\t\tvar btn_class = 'btn-primary';\n\t\t\t\tbreak;\n\n\t\t\tcase 'utf8check':\n\t\t\t\tvar btn_title = '<?php echo TS_('CHECK DB!'); ?>';\n\t\t\t\tvar btn_class = 'btn-primary';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\n\t\tjQuery( '#install_button' )\n\t\t\t.html( btn_title )\n\t\t\t.attr( 'class', 'btn btn-lg ' + btn_class );\n\t}\n\n\tjQuery( 'input[type=radio][name=action]' ).click( function()\n\t{\n\t\tupdate_install_button_info();\n\t} );\n\n\tupdate_install_button_info();\n} );\n</script>\n<?php\n}\n\n\n/**\n * Check if current installation is local\n *\n * @return boolean\n */\nfunction check_local_installation()\n{\n\tglobal $basehost;\n\n\treturn php_sapi_name() != 'cli' && // NOT php CLI mode\n\t\t( $basehost == 'localhost'\n\t\t\t|| ( isset( $_SERVER['SERVER_ADDR'] ) && ( $_SERVER['SERVER_ADDR'] == '127.0.0.1' || $_SERVER['SERVER_ADDR'] == '::1' ) ) // IPv6 address of 127.0.0.1\n\t\t\t|| ( isset( $_SERVER['REMOTE_ADDR'] ) && ( $_SERVER['REMOTE_ADDR'] == '127.0.0.1' || $_SERVER['REMOTE_ADDR'] == '::1' ) )\n\t\t\t|| ( isset( $_SERVER['HTTP_HOST'] ) && ( $_SERVER['HTTP_HOST'] == '127.0.0.1' || $_SERVER['HTTP_HOST'] == '::1' ) )\n\t\t\t|| ( isset( $_SERVER['SERVER_NAME'] ) && ( $_SERVER['SERVER_NAME'] == '127.0.0.1' || $_SERVER['SERVER_NAME'] == '::1' ) )\n\t\t);\n}\n\n\n/**\n * Display modal window after install process with some data\n *\n * @param string Title\n * @param string Body\n */\nfunction display_install_result_window( $title, $body )\n{\n\tglobal $baseurl, $admin_url, $display;\n\n\tif( ! empty( $display ) && $display != 'normal' )\n\t{ // Exit here, because we can use the modal window ONLY on normal mode (Hide on compact mode)\n\t\treturn;\n\t}\n\n\t// Remove a link to log in from body text:\n\t$body = preg_replace( '~</?a[^>]*>~i', '', $body );\n\n\t// Modal window with info:\n\techo '<div class=\"modal modal-success fade\" id=\"evo_modal__install\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"evo_modal__label_install\" aria-hidden=\"true\">\n\t\t<div class=\"modal-dialog\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n\t\t\t\t\t<h4 class=\"modal-title\" id=\"evo_modal__label_install\">'.$title.'</h4>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">'.$body.'</div>\n\t\t\t\t<div class=\"modal-footer\" style=\"text-align:center\">\n\t\t\t\t\t<a href=\"'.$baseurl.'\" class=\"btn btn-primary\">'.T_('Go to Front-office').'</a>\n\t\t\t\t\t<a href=\"'.$admin_url.'\" class=\"btn btn-default\">'.T_('Go to Back-office').'</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>';\n\n\t// JavaScript to open modal window with info:\n\techo '<script type=\"text/javascript\">'\n\t\t.'setTimeout( function() { jQuery( \"#evo_modal__install\" ).modal(); }, 1000 );'\n\t.'</script>';\n}\n\n\n/**\n * Check request for quick installation\n * Update basic config file from url params\n *\n * @return boolean|string TRUE on success, OR error messages\n */\nfunction check_quick_install_request()\n{\n\tglobal $config_is_done, $db_config, $conf_path, $install_login, $install_password, $Messages;\n\n\t$admin_login = param( 'admin_login', 'string', '' );\n\t$admin_password = param( 'admin_password', 'string', '' );\n\n\tif( ! empty( $admin_login ) )\n\t{ // Try to use an admin login from request:\n\t\tif( param_check_valid_login( 'admin_login' ) )\n\t\t{ // We can use this login name\n\t\t\t$install_login = $admin_login;\n\t\t}\n\t\telse\n\t\t{ // Display an error message for impossible login name:\n\t\t\t$Messages->add( sprintf( 'ERROR: Impossible to use \"%s\" for the admin account. Using \"admin\" instead.', $admin_login ) );\n\t\t}\n\t}\n\n\tif( ! empty( $admin_password ) && param_check_passwords( 'admin_password', 'admin_password', false, 5 ) )\n\t{ // Set admin password from request:\n\t\t$install_password = $admin_password;\n\t}\n\n\tif( $config_is_done )\n\t{ // Config is already done, Don't use url params to update basic config file\n\t\treturn true;\n\t}\n\n\t// DB Access:\n\t$db_user = param( 'db_user', 'string', '' );\n\t$db_password = param( 'db_password', 'raw', '' );\n\t$db_name = param( 'db_name', 'string', '' );\n\t$db_host = param( 'db_host', 'string', '' );\n\t$db_tableprefix = param( 'db_tableprefix', 'string', '' );\n\n\t// Admin e-mail:\n\tglobal $admin_email;\n\t$default_admin_email = $admin_email;\n\t$conf_admin_email = param( 'admin_email', 'string', '', false, true );\n\n\tif( ! empty( $conf_admin_email ) ||\n\t    ! empty( $db_user ) || ! empty( $db_password ) || ! empty( $db_name ) || ! empty( $db_host ) ||\n\t    ! empty( $db_tableprefix ) )\n\t{ // Try to update basic config file ONLY when at least one of these params are defined\n\n\t\tif( empty( $conf_admin_email ) || ! param_check_email( 'admin_email' ) )\n\t\t{ // Use default admin email if it is empty from request\n\t\t\t$conf_admin_email = $default_admin_email;\n\t\t}\n\n\t\t// Base URL:\n\t\tglobal $baseurl, $admin_url, $dispatcher, $tableprefix;\n\t\t$baseurl = param( 'baseurl', 'string', '', false, true );\n\t\tif( empty( $baseurl ) || ! preg_match( '~https?://~', $baseurl ) )\n\t\t{ // Try to autogenerate base url if it is empty or wrong from request:\n\t\t\t$baseurl = 'http://'.( isset( $_SERVER['SERVER_NAME'] ) ? $_SERVER['SERVER_NAME'] : 'yourserver.com' );\n\t\t\tif( isset( $_SERVER['SERVER_PORT'] ) && ( $_SERVER['SERVER_PORT'] != '80' ) )\n\t\t\t\t$baseurl .= ':'.$_SERVER['SERVER_PORT'];\n\t\t\tlist( $ReqPath, $ReqURI ) = get_ReqURI();\n\t\t\t$baseurl .= preg_replace( '#/install(/(index.php)?)?$#', '', $ReqPath ).'/';\n\t\t}\n\t\t// Add a slash at the end if it is missed:\n\t\t$baseurl = trim( $baseurl, '/' ).'/';\n\t\t// Update $admin_url to new value because it depends on $baseurl:\n\t\t$admin_url = $baseurl.$dispatcher;\n\n\t\t// Update $tableprefix to new from request:\n\t\t$tableprefix = $db_tableprefix;\n\n\t\t// Try to create basic config file:\n\t\t$basic_config_params = array(\n\t\t\t\t'db_user'        => $db_user,\n\t\t\t\t'db_password'    => $db_password,\n\t\t\t\t'db_name'        => $db_name,\n\t\t\t\t'db_host'        => $db_host,\n\t\t\t\t'db_tableprefix' => $db_tableprefix,\n\t\t\t\t'baseurl'        => $baseurl,\n\t\t\t\t'admin_email'    => $conf_admin_email,\n\t\t\t\t'print_messages' => false,\n\t\t\t\t'quick_install'  => true,\n\t\t\t);\n\t\tif( update_basic_config_file( $basic_config_params ) )\n\t\t{ // Basic config file has been created successfully\n\t\t\t// Update DB config to connect to DB correctly\n\t\t\t$db_config['user'] = $db_user;\n\t\t\t$db_config['password'] = $db_password;\n\t\t\t$db_config['name'] = $db_name;\n\t\t\t$db_config['host'] = $db_host;\n\t\t}\n\t\telse\n\t\t{ // Failed on creation of basic config file\n\t\t\treturn false;\n\t\t}\n\t}\n\telseif( ! file_exists( $conf_path.'_basic_config.php' ) )\n\t{\n\t\tglobal $basic_config_file_result_messages;\n\n\t\tob_start();\n\t\tdisplay_install_messages( T_('You must pass db_config params or create a <code>/conf/_basic_config.php</code> file before calling the installer.') );\n\n\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\treturn false;\n\t}\n\n\t// Revert config admin email to original value:\n\t$admin_email = $default_admin_email;\n\n\treturn true;\n}\n\n\n/**\n * Format an install param like DB config and base url\n *\n * @return string\n */\nfunction format_install_param( $value )\n{\n\t// We need backslashes only for single quote(') and backslash(\\):\n\t$value = addcslashes( $value, \"'\\\\\" );\n\t/*\n\t\tThe below code excludes even number of slashes, because we need always odd\n\t\tnumber of slashes before single quote(') to avoid a broken string value.\n\t\tExamples for source and result:\n\t\t  \\'     => \\'         (1 slash is not converted because it is used only for single quote backslashing)\n\t\t  \\\\'    => \\\\\\'       (2 slashes are converted to 3, because only first one slash must be backslashed)\n\t\t  \\\\\\'   => \\\\\\\\\\'     (3 slashes are converted to 5, first two slashes must be backslashed)\n\t\t  \\\\\\\\'  => \\\\\\\\\\\\\\'   (4 slashes are converted to 7, first three slashes must be backslashed)\n\t\t  \\\\\\\\\\' => \\\\\\\\\\\\\\\\\\' (5 slashes are converted to 9, first four slashes must be backslashed)\n\t*/\n\treturn preg_replace( '#(\\\\\\\\*)(\\\\\\')#', '$1$1$2', $value );\n}\n\n\n/**\n * Update file /conf/_basic_config.php\n *\n * @param string Current action, updated by reference\n * @param array Params\n * @return boolean TRUE on success\n */\nfunction update_basic_config_file( $params = array() )\n{\n\tglobal $DB, $db_config, $evo_charset, $conf_path, $default_locale;\n\n\t// These global params should be rewritten by this function on success result\n\tglobal $baseurl, $admin_email, $config_is_done, $action;\n\n\t$params = array_merge( array(\n\t\t\t'create_db'      => 0,\n\t\t\t'db_user'        => '',\n\t\t\t'db_password'    => '',\n\t\t\t'db_name'        => '',\n\t\t\t'db_host'        => '',\n\t\t\t'db_tableprefix' => '',\n\t\t\t'baseurl'        => '',\n\t\t\t'admin_email'    => '',\n\t\t\t'print_messages' => true, // TRUE - to print out all messages on screen, FALSE - to return\n\t\t\t'quick_install'  => false, // TRUE - to mark this call as request to quick installation\n\t\t), $params );\n\n\tif( ! $params['print_messages'] )\n\t{ // Start to get all messages instead of printing on screen:\n\t\tob_start();\n\t\t// Use this global var to store all messages\n\t\tglobal $basic_config_file_result_messages;\n\t}\n\n\t// Connect to DB host (without selecting DB because we should maybe create this by request):\n\t$DB = new DB( array(\n\t\t\t'user'     => $params['db_user'],\n\t\t\t'password' => $params['db_password'],\n\t\t\t'host'     => $params['db_host'],\n\t\t\t'aliases'          => $db_config['aliases'],\n\t\t\t'connection_charset' => empty( $db_config['connection_charset'] ) ? DB::php_to_mysql_charmap( $evo_charset ) : $db_config['connection_charset'],\n\t\t\t'halt_on_error'      => false\n\t\t) );\n\n\tif( $params['create_db'] )\n\t{\t// Try to create DB if it doesn't exist yet:\n\t\t$DB->query( 'CREATE DATABASE IF NOT EXISTS `'.$params['db_name'].'`\n\t\t\tCHARACTER SET '.$DB->connection_charset );\n\t\tif( $DB->error )\n\t\t{\n\t\t\tdisplay_install_messages( sprintf( T_('You don\\'t seem to have permission to create this new database on \"%s\" (%s).'), $params['db_host'], $DB->last_error ) );\n\t\t\t$action = 'start';\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Select DB:\n\t$DB->select( $params['db_name'] );\n\n\tif( $DB->error )\n\t{ // restart conf\n\t\tdisplay_install_messages( T_('It seems that the database config settings you entered don\\'t work. Please check them carefully and try again...') );\n\t\t$action = 'start';\n\t}\n\telse\n\t{\n\t\t$conf_template_filepath = $conf_path.'_basic_config.template.php';\n\t\t$conf_filepath = $conf_path.'_basic_config.php';\n\n\t\t// Read original:\n\t\t$file_loaded = @file( $conf_template_filepath );\n\n\t\tif( empty( $file_loaded ) )\n\t\t{ // This should actually never happen, just in case...\n\t\t\tdisplay_install_messages( sprintf( T_('Could not load original conf file [%s]. Is it missing?'), $conf_filepath ) );\n\t\t\tif( ! $params['print_messages'] )\n\t\t\t{ // Return all messages instead of printing on screen\n\t\t\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// File loaded...\n\t\t$conf = implode( '', $file_loaded );\n\t\t// Update conf:\n\t\t$conf = preg_replace(\n\t\t\tarray(\n\t\t\t\t'#\\$db_config\\s*=\\s*array\\(\n\t\t\t\t\t\\s*[\\'\"]user[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]password[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"], ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]name[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t\\s*[\\'\"]host[\\'\"]\\s*=>\\s*[\\'\"].*?[\\'\"],     ([^\\n\\r]*\\r?\\n)\n\t\t\t\t\t#ixs',\n\t\t\t\t\"#tableprefix\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#baseurl\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#admin_email\\s*=\\s*'.*?';#\",\n\t\t\t\t\"#config_is_done\\s*=.*?;#\",\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"\\$db_config = array(\\n\"\n\t\t\t\t\t.\"\\t'user'     => '\".format_install_param( $params['db_user'] ).\"',\\$1\"\n\t\t\t\t\t.\"\\t'password' => '\".format_install_param( $params['db_password'] ).\"',\\$2\"\n\t\t\t\t\t.\"\\t'name'     => '\".format_install_param( $params['db_name'] ).\"',\\$3\"\n\t\t\t\t\t.\"\\t'host'     => '\".format_install_param( $params['db_host'] ).\"',\\$4\",\n\t\t\t\t\"tableprefix = '\".format_install_param( $params['db_tableprefix'] ).\"';\",\n\t\t\t\t\"baseurl = '\".format_install_param( $params['baseurl'] ).\"';\",\n\t\t\t\t\"admin_email = '\".format_install_param( $params['admin_email'] ).\"';\",\n\t\t\t\t'config_is_done = 1;',\n\t\t\t), $conf );\n\n\t\t// Write new contents:\n\t\tif( save_to_file( $conf, $conf_filepath, 'w' ) )\n\t\t{\n\t\t\tdisplay_install_messages( sprintf( T_('Your configuration file <code>%s</code> has been successfully created.').'</p>', $conf_filepath ), 'success' );\n\n\t\t\t$tableprefix = $params['db_tableprefix'];\n\t\t\t$baseurl = $params['baseurl'];\n\t\t\t$admin_email = $params['admin_email'];\n\t\t\t$config_is_done = 1;\n\t\t\tif( ! $params['quick_install'] )\n\t\t\t{ // Switch to menu only on standard installation:\n\t\t\t\t$action = 'menu';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t?>\n\t\t\t<h1><?php echo T_('Config file update') ?></h1>\n\t\t\t<p><strong><?php printf( T_('We cannot automatically create or update your config file [%s]!'), $conf_filepath ); ?></strong></p>\n\t\t\t<p><?php echo T_('There are two ways to deal with this:') ?></p>\n\t\t\t<ul>\n\t\t\t\t<li><strong><?php echo T_('You can allow the installer to create the config file by changing permissions for the /conf directory:') ?></strong>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li><?php printf( T_('Make sure there is no existing and potentially locked configuration file named <code>%s</code>. If so, please delete it.'), $conf_filepath ); ?></li>\n\t\t\t\t\t\t<li><?php printf( T_('<code>chmod 777 %s</code>. If needed, see the <a %s>online manual about permissions</a>.'), $conf_path, 'href=\"'.get_manual_url( 'directory-and-file-permissions' ).'\" target=\"_blank\"' ); ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Come back to this page and refresh/reload.') ?></li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<br />\n\t\t\t\t</li>\n\t\t\t\t<li><strong><?php echo T_('Alternatively, you can update the config file manually:') ?></strong>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li><?php echo T_('Create a new text file with a text editor.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Copy the contents from the box below.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Paste them into your local text editor. <strong>ATTENTION: make sure there is ABSOLUTELY NO WHITESPACE after the final <code>?&gt;</code> in the file.</strong> Any space, tab, newline or blank line at the end of the conf file may prevent cookies from being set when you try to log in later.') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Save the file locally under the name <code>_basic_config.php</code>') ?></li>\n\t\t\t\t\t\t<li><?php echo T_('Upload the file to your server, into the <code>/_conf</code> folder.') ?></li>\n\t\t\t\t\t\t<li><?php printf( T_('<a %s>Call the installer from scratch</a>.'), 'href=\"index.php?locale='.$default_locale.'\"') ?></li>\n\t\t\t\t\t</ol>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<p><?php echo T_('This is how your _basic_config.php should look like:') ?></p>\n\t\t\t<blockquote>\n\t\t\t<pre><?php\n\t\t\t\techo htmlspecialchars( $conf );\n\t\t\t?></pre>\n\t\t\t</blockquote>\n\t\t\t<?php\n\n\t\t\tif( ! $params['print_messages'] )\n\t\t\t{ // Return all messages instead of printing on screen\n\t\t\t\t$basic_config_file_result_messages = ob_get_clean();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif( ! $params['print_messages'] )\n\t{ // Return all messages instead of printing on screen\n\t\t$basic_config_file_result_messages = ob_get_clean();\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Print out log text on screen\n *\n * @param string Log text\n * @param string Log type: 'warning', 'note', 'success', 'danger'\n */\nfunction echo_install_log( $text, $type = 'warning' )\n{\n\techo '<p class=\"alert alert-'.$type.'\">'.$text.'</p>';\n}\n?>"], "filenames": ["install/_functions_install.php"], "buggy_code_start_loc": [1801], "buggy_code_end_loc": [1803], "fixing_code_start_loc": [1801], "fixing_code_end_loc": [1814], "type": "CWE-20", "message": "b2evolution version 6.6.0 - 6.8.10 is vulnerable to input validation (backslash and single quote escape) in basic install functionality resulting in unauthenticated attacker gaining PHP code execution on the victim's setup.", "other": {"cve": {"id": "CVE-2017-1000423", "sourceIdentifier": "cve@mitre.org", "published": "2018-01-02T20:29:00.237", "lastModified": "2018-01-17T18:12:18.483", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "b2evolution version 6.6.0 - 6.8.10 is vulnerable to input validation (backslash and single quote escape) in basic install functionality resulting in unauthenticated attacker gaining PHP code execution on the victim's setup."}, {"lang": "es", "value": "b2evolution, de las versiones 6.6.0 a la 6.8.10, es vulnerable a la validaci\u00f3n de entradas (escape de barra diagonal inversa y comilla simple) en la funcionalidad de instalaci\u00f3n b\u00e1sica. Esto provoca que un atacante no autenticado pueda ejecutar c\u00f3digo PHP en la instalaci\u00f3n de la v\u00edctima."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:b2evolution:b2evolution:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.6.0", "versionEndIncluding": "6.8.10", "matchCriteriaId": "FE461FC8-ECB9-437D-BB0D-52CB353E3C17"}]}]}], "references": [{"url": "https://github.com/b2evolution/b2evolution/commit/0096a3ebc85f6aadbda2c4427cd092a538b161d2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/b2evolution/b2evolution/commit/b899d654d931f3bf3cfbbdd71e0d1a0f3a16d04c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/b2evolution/b2evolution/commit/0096a3ebc85f6aadbda2c4427cd092a538b161d2"}}