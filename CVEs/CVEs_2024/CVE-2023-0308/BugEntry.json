{"buggy_code": ["<?php\n\n/**\n * AJAX: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n// Send headers\n$http = new HttpHelper();\n$http->setContentType('application/json');\n$http->addHeader();\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new \\stdClass();\n                $users->user_id = (int)$singleUser['user_id'];\n                $users->name = $singleUser['login'];\n                $allUsers[] = $users;\n            }\n            $http->sendJsonWithHeaders($allUsers);\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = [];\n            $userdata = $user->userdata->get('*');\n            $userdata['status'] = $user->getStatus();\n            $userdata['login'] = $user->getLogin();\n            $userdata['is_superadmin'] = $user->isSuperAdmin();\n            $http->sendJsonWithHeaders($userdata);\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new \\stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = $user->getUserData('display_name');\n                $userObject->userName = $user->getLogin();\n                $userObject->email = $user->getUserData('email');\n                $userData[] = $userObject;\n            }\n            $http->setStatus(200);\n            $http->sendJsonWithHeaders($userData);\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $http->sendJsonWithHeaders($user->perm->getUserRights($userId));\n            break;\n\n        case 'activate_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $user->activateUser();\n            $http->sendJsonWithHeaders($user->getStatus());\n            break;\n\n        case 'add_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_UNSAFE_RAW);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_UNSAFE_RAW);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_UNSAFE_RAW);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_UNSAFE_RAW);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_loginInvalid'];\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_adus_exerr'];\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noRealName'];\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noEmail'];\n            }\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin(!is_null($userIsSuperAdmin));\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [ 'data' => $PMF_LANG['ad_adus_suc'] ];\n                }\n\n                $http->setStatus(201);\n                $http->sendJsonWithHeaders($successMessage);\n                exit(1);\n            }\n\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders($errorMessage);\n            break;\n\n        case 'delete_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . $PMF_LANG['ad_user_error_protectedAccount'] . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = $PMF_LANG['ad_user_error_delete'];\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = '<p class=\"alert alert-success\">' . $PMF_LANG['ad_user_deleted'] . '</p>';\n                }\n            }\n            $http->sendJsonWithHeaders($message);\n            break;\n\n        case 'overwrite_password':\n            $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);\n            $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n            $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n            $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $http->setStatus(400);\n                    $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                }\n                $http->sendJsonWithHeaders(['success' => $PMF_LANG['ad_passwdsuc']]);\n            } else {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n            }\n\n            break;\n    }\n}\n", "<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action && !is_null($code) &&\n    !$captcha->checkCaptchaCode($code)\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq';\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n        \n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord(\n                $comment\n            ) && !$faq->commentDisabled(\n                $id,\n                $languageCode,\n                $type\n            )\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br($comment))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = html_entity_decode($answer);\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = nl2br($answer);\n        }\n        $translatedAnswer = Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        $userData = [\n            'display_name' => $userName,\n            'email' => $email,\n            'is_visible' => $isVisible === 'on' ? 1 : 0\n        ];\n        $success = $user->setUserData($userData);\n\n        if (0 !== strlen($password) && 0 !== strlen($confirm)) {\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = Strings::htmlentities($faqLink->getCurrentUrl());\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        Strings::htmlentities($faqConfig->getDefaultUrl()),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            Strings::htmlentities($faqConfig->getDefaultUrl()),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => Strings::htmlentities($faqSystem->getSystemUri($faqConfig)),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlentities(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlentities(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlentities($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlentities($keywords),\n    'metaPublisher' => Strings::htmlentities($faqConfig->get('main.metaPublisher')),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlentities($searchTerm, ENT_QUOTES),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => $user->getUserData('display_name'),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => Strings::htmlentities($faqSystem->getSystemUri($faqConfig)) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"./addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = Strings::htmlentities($faqConfig->getDefaultUrl());\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        Strings::htmlentities($faqConfig->getDefaultUrl()),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $link = new Link($url, $faqConfig);\n    $http->setStatus(301);\n    $http->redirect($link->toString());\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * User Control Panel.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2012-01-12\n */\n\nuse phpMyFAQ\\Services\\Gravatar;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif ($user->isLoggedIn()) {\n    try {\n        $faqSession->userTracking('user_control_panel', $user->getUserId());\n    } catch (Exception $e) {\n        // @todo handle the exception\n    }\n\n    if ($faqConfig->get('main.enableGravatarSupport')) {\n        $gravatar = new Gravatar($faqConfig);\n        $gravatarImg = sprintf(\n            '<a target=\"_blank\" href=\"http://www.gravatar.com\">%s</a>',\n            $gravatar->getImage(\n                $user->getUserData('email'),\n                ['class' => 'img-responsive rounded-circle', 'size' => 125]\n            )\n        );\n    } else {\n        $gravatarImg = '';\n    }\n\n    $template->parse(\n        'mainPageContent',\n        [\n            'headerUserControlPanel' => $PMF_LANG['headerUserControlPanel'],\n            'ucpGravatarImage' => $gravatarImg,\n            'userid' => $user->getUserId(),\n            'csrf' => $user->getCsrfTokenFromSession(),\n            'readonly' => $faqConfig->isLdapActive() ? 'readonly' : '',\n            'msgRealName' => $PMF_LANG['ad_user_name'],\n            'realname' => $user->getUserData('display_name'),\n            'msgEmail' => $PMF_LANG['msgNewContentMail'],\n            'email' => $user->getUserData('email'),\n            'msgIsVisible' => $PMF_LANG['ad_user_data_is_visible'],\n            'checked' => (int)$user->getUserData('is_visible') === 1 ? 'checked' : '',\n            'msgPassword' => $PMF_LANG['ad_auth_passwd'],\n            'msgConfirm' => $PMF_LANG['ad_user_confirm'],\n            'msgSave' => $PMF_LANG['msgSave'],\n            'msgCancel' => $PMF_LANG['msgCancel'],\n        ]\n    );\n\n    $template->parseBlock(\n        'index',\n        'breadcrumb',\n        [\n            'breadcrumbHeadline' => $PMF_LANG['headerUserControlPanel']\n        ]\n    );\n} else {\n    // Redirect to login\n    header('Location: ' . $faqConfig->getDefaultUrl());\n    exit();\n}\n"], "fixing_code": ["<?php\n\n/**\n * AJAX: handling of Ajax user calls.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-04-04\n */\n\nuse phpMyFAQ\\Auth;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\MailHelper;\nuse phpMyFAQ\\Permission;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$ajaxAction = Filter::filterInput(INPUT_GET, 'ajaxaction', FILTER_UNSAFE_RAW);\n$userId = Filter::filterInput(INPUT_GET, 'user_id', FILTER_VALIDATE_INT);\n$userSearch = Filter::filterInput(INPUT_GET, 'q', FILTER_UNSAFE_RAW);\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\n\n// Send headers\n$http = new HttpHelper();\n$http->setContentType('application/json');\n$http->addHeader();\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'add_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'edit_user') ||\n    $user->perm->hasPermission($user->getUserId(), 'delete_user')\n) {\n    $user = new User($faqConfig);\n\n    switch ($ajaxAction) {\n        case 'get_user_list':\n            $allUsers = [];\n            foreach ($user->searchUsers($userSearch) as $singleUser) {\n                $users = new \\stdClass();\n                $users->user_id = (int)$singleUser['user_id'];\n                $users->name = $singleUser['login'];\n                $allUsers[] = $users;\n            }\n            $http->sendJsonWithHeaders($allUsers);\n            break;\n\n        case 'get_user_data':\n            $user->getUserById($userId, true);\n            $userdata = [];\n            $userdata = $user->userdata->get('*');\n            $userdata['status'] = $user->getStatus();\n            $userdata['login'] = Strings::htmlentities($user->getLogin());\n            $userdata['is_superadmin'] = $user->isSuperAdmin();\n            $http->sendJsonWithHeaders($userdata);\n            break;\n\n        case 'get_all_user_data':\n            $allUsers = $user->getAllUsers(false);\n            $userData = [];\n            foreach ($allUsers as $userId) {\n                $user->getUserById($userId, true);\n                $userObject = new \\stdClass();\n                $userObject->id = $user->getUserId();\n                $userObject->status = $user->getStatus();\n                $userObject->isSuperAdmin = $user->isSuperAdmin();\n                $userObject->isVisible = $user->getUserData('is_visible');\n                $userObject->displayName = $user->getUserData('display_name');\n                $userObject->userName = $user->getLogin();\n                $userObject->email = $user->getUserData('email');\n                $userData[] = $userObject;\n            }\n            $http->setStatus(200);\n            $http->sendJsonWithHeaders($userData);\n            break;\n\n        case 'get_user_rights':\n            $user->getUserById($userId, true);\n            $http->sendJsonWithHeaders($user->perm->getUserRights($userId));\n            break;\n\n        case 'activate_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $user->activateUser();\n            $http->sendJsonWithHeaders($user->getStatus());\n            break;\n\n        case 'add_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $errorMessage = [];\n            $successMessage = '';\n\n            $postData = json_decode(file_get_contents('php://input'), true);\n\n            $userName = Filter::filterVar($postData['userName'], FILTER_UNSAFE_RAW);\n            $userRealName = Filter::filterVar($postData['realName'], FILTER_UNSAFE_RAW);\n            $userEmail = Filter::filterVar($postData['email'], FILTER_VALIDATE_EMAIL);\n            $userPassword = Filter::filterVar($postData['password'], FILTER_UNSAFE_RAW);\n            $userPasswordConfirm = Filter::filterVar($postData['passwordConfirm'], FILTER_UNSAFE_RAW);\n            $userIsSuperAdmin = Filter::filterVar($postData['isSuperAdmin'], FILTER_VALIDATE_BOOLEAN);\n\n            $newUser = new User($faqConfig);\n\n            if (!$newUser->isValidLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_loginInvalid'];\n            }\n            if ($newUser->getUserByLogin($userName)) {\n                $errorMessage[] = $PMF_LANG['ad_adus_exerr'];\n            }\n            if ($userRealName === '') {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noRealName'];\n            }\n            if (is_null($userEmail)) {\n                $errorMessage[] = $PMF_LANG['ad_user_error_noEmail'];\n            }\n            if (count($errorMessage) === 0) {\n                if (!$newUser->createUser($userName, $userPassword)) {\n                    $errorMessage[] = $newUser->error();\n                } else {\n                    $newUser->userdata->set(['display_name', 'email', 'is_visible'], [$userRealName, $userEmail, 0]);\n                    $newUser->setStatus('active');\n                    $newUser->setSuperAdmin(!is_null($userIsSuperAdmin));\n                    $mailHelper = new MailHelper($faqConfig);\n                    try {\n                        $mailHelper->sendMailToNewUser($newUser, $userPassword);\n                    } catch (Exception $e) {\n                        // @todo catch exception\n                    }\n                    $successMessage = [ 'data' => $PMF_LANG['ad_adus_suc'] ];\n                }\n\n                $http->setStatus(201);\n                $http->sendJsonWithHeaders($successMessage);\n                exit(1);\n            }\n\n            $http->setStatus(400);\n            $http->sendJsonWithHeaders($errorMessage);\n            break;\n\n        case 'delete_user':\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            if ($user->getStatus() == 'protected' || $userId == 1) {\n                $message = '<p class=\"alert alert-error\">' . $PMF_LANG['ad_user_error_protectedAccount'] . '</p>';\n            } else {\n                if (!$user->deleteUser()) {\n                    $message = $PMF_LANG['ad_user_error_delete'];\n                } else {\n                    $category = new Category($faqConfig, [], false);\n                    $category->moveOwnership((int) $userId, 1);\n\n                    // Remove the user from groups\n                    if ('basic' !== $faqConfig->get('security.permLevel')) {\n                        $permissions = Permission::selectPerm('medium', $faqConfig);\n                        $permissions->removeFromAllGroups($userId);\n                    }\n\n                    $message = '<p class=\"alert alert-success\">' . $PMF_LANG['ad_user_deleted'] . '</p>';\n                }\n            }\n            $http->sendJsonWithHeaders($message);\n            break;\n\n        case 'overwrite_password':\n            $userId = Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT);\n            $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n            $newPassword = Filter::filterInput(INPUT_POST, 'npass', FILTER_UNSAFE_RAW);\n            $retypedPassword = Filter::filterInput(INPUT_POST, 'bpass', FILTER_UNSAFE_RAW);\n\n            if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['err_NotAuth']]);\n                exit(1);\n            }\n\n            $user->getUserById($userId, true);\n            $auth = new Auth($faqConfig);\n            $authSource = $auth->selectAuth($user->getAuthSource('name'));\n            $authSource->selectEncType($user->getAuthData('encType'));\n\n            if ($newPassword === $retypedPassword) {\n                if (!$user->changePassword($newPassword)) {\n                    $http->setStatus(400);\n                    $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n                }\n                $http->sendJsonWithHeaders(['success' => $PMF_LANG['ad_passwdsuc']]);\n            } else {\n                $http->setStatus(400);\n                $http->sendJsonWithHeaders(['error' => $PMF_LANG['ad_passwd_fail']]);\n            }\n\n            break;\n    }\n}\n", "<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action && !is_null($code) &&\n    !$captcha->checkCaptchaCode($code)\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq';\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n        \n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord(\n                $comment\n            ) && !$faq->commentDisabled(\n                $id,\n                $languageCode,\n                $type\n            )\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br($comment))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = html_entity_decode($answer);\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = nl2br($answer);\n        }\n        $translatedAnswer = Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        $userData = [\n            'display_name' => $userName,\n            'email' => $email,\n            'is_visible' => $isVisible === 'on' ? 1 : 0\n        ];\n        $success = $user->setUserData($userData);\n\n        if (0 !== strlen($password) && 0 !== strlen($confirm)) {\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = Strings::htmlentities($faqLink->getCurrentUrl());\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        Strings::htmlentities($faqConfig->getDefaultUrl()),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            Strings::htmlentities($faqConfig->getDefaultUrl()),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => Strings::htmlentities($faqSystem->getSystemUri($faqConfig)),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlentities(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlentities(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlentities($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlentities($keywords),\n    'metaPublisher' => Strings::htmlentities($faqConfig->get('main.metaPublisher')),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlentities($searchTerm, ENT_QUOTES),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => Strings::htmlentities($user->getUserData('display_name')),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => Strings::htmlentities($faqSystem->getSystemUri($faqConfig)) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"./addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = Strings::htmlentities($faqConfig->getDefaultUrl());\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        Strings::htmlentities($faqConfig->getDefaultUrl()),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $link = new Link($url, $faqConfig);\n    $http->setStatus(301);\n    $http->redirect($link->toString());\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * User Control Panel.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2012-01-12\n */\n\nuse phpMyFAQ\\Services\\Gravatar;\nuse phpMyFAQ\\Strings;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\nif ($user->isLoggedIn()) {\n    try {\n        $faqSession->userTracking('user_control_panel', $user->getUserId());\n    } catch (Exception $e) {\n        // @todo handle the exception\n    }\n\n    if ($faqConfig->get('main.enableGravatarSupport')) {\n        $gravatar = new Gravatar($faqConfig);\n        $gravatarImg = sprintf(\n            '<a target=\"_blank\" href=\"http://www.gravatar.com\">%s</a>',\n            $gravatar->getImage(\n                $user->getUserData('email'),\n                ['class' => 'img-responsive rounded-circle', 'size' => 125]\n            )\n        );\n    } else {\n        $gravatarImg = '';\n    }\n\n    $template->parse(\n        'mainPageContent',\n        [\n            'headerUserControlPanel' => $PMF_LANG['headerUserControlPanel'],\n            'ucpGravatarImage' => $gravatarImg,\n            'userid' => $user->getUserId(),\n            'csrf' => $user->getCsrfTokenFromSession(),\n            'readonly' => $faqConfig->isLdapActive() ? 'readonly' : '',\n            'msgRealName' => $PMF_LANG['ad_user_name'],\n            'realname' => Strings::htmlentities($user->getUserData('display_name')),\n            'msgEmail' => $PMF_LANG['msgNewContentMail'],\n            'email' => $user->getUserData('email'),\n            'msgIsVisible' => $PMF_LANG['ad_user_data_is_visible'],\n            'checked' => (int)$user->getUserData('is_visible') === 1 ? 'checked' : '',\n            'msgPassword' => $PMF_LANG['ad_auth_passwd'],\n            'msgConfirm' => $PMF_LANG['ad_user_confirm'],\n            'msgSave' => $PMF_LANG['msgSave'],\n            'msgCancel' => $PMF_LANG['msgCancel'],\n        ]\n    );\n\n    $template->parseBlock(\n        'index',\n        'breadcrumb',\n        [\n            'breadcrumbHeadline' => $PMF_LANG['headerUserControlPanel']\n        ]\n    );\n} else {\n    // Redirect to login\n    header('Location: ' . $faqConfig->getDefaultUrl());\n    exit();\n}\n"], "filenames": ["phpmyfaq/admin/ajax.user.php", "phpmyfaq/ajaxservice.php", "phpmyfaq/index.php", "phpmyfaq/ucp.php"], "buggy_code_start_loc": [24, 761, 568, 18], "buggy_code_end_loc": [67, 762, 569, 55], "fixing_code_start_loc": [25, 761, 568, 19], "fixing_code_end_loc": [68, 762, 569, 56], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.10.", "other": {"cve": {"id": "CVE-2023-0308", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-15T22:15:10.577", "lastModified": "2023-01-23T14:44:38.347", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.10", "matchCriteriaId": "184FE56D-4BA2-499C-9F30-C0B5A2EE2C36"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/810ee26d25c3d97664532861863099952f0e9a1f", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/83cfed62-af8b-4aaa-94f2-5a33dc0c2d69", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/810ee26d25c3d97664532861863099952f0e9a1f"}}