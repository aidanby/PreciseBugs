{"buggy_code": ["/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.servlet.tags.form;\n\nimport java.util.Map;\n\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.PageContext;\n\nimport org.springframework.beans.PropertyAccessor;\nimport org.springframework.core.Conventions;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\nimport org.springframework.web.util.HtmlUtils;\n\n/**\n * Databinding-aware JSP tag for rendering an HTML '{@code form}' whose\n * inner elements are bound to properties on a <em>form object</em>.\n *\n * <p>Users should place the form object into the\n * {@link org.springframework.web.servlet.ModelAndView ModelAndView} when\n * populating the data for their view. The name of this form object can be\n * configured using the {@link #setModelAttribute \"modelAttribute\"} property.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Scott Andrews\n * @author Rossen Stoyanchev\n * @since 2.0\n */\n@SuppressWarnings(\"serial\")\npublic class FormTag extends AbstractHtmlElementTag {\n\n\t/** The default HTTP method using which form values are sent to the server: \"post\" */\n\tprivate static final String DEFAULT_METHOD = \"post\";\n\n\t/** The default attribute name: &quot;command&quot; */\n\tpublic static final String DEFAULT_COMMAND_NAME = \"command\";\n\n\t/** The name of the '{@code modelAttribute}' setting */\n\tprivate static final String MODEL_ATTRIBUTE = \"modelAttribute\";\n\n\t/**\n\t * The name of the {@link javax.servlet.jsp.PageContext} attribute under which the\n\t * form object name is exposed.\n\t */\n\tpublic static final String MODEL_ATTRIBUTE_VARIABLE_NAME =\n\t\t\tConventions.getQualifiedAttributeName(AbstractFormTag.class, MODEL_ATTRIBUTE);\n\n\t/** Default method parameter, i.e. {@code _method}. */\n\tprivate static final String DEFAULT_METHOD_PARAM = \"_method\";\n\n\tprivate static final String FORM_TAG = \"form\";\n\n\tprivate static final String INPUT_TAG = \"input\";\n\n\tprivate static final String ACTION_ATTRIBUTE = \"action\";\n\n\tprivate static final String METHOD_ATTRIBUTE = \"method\";\n\n\tprivate static final String TARGET_ATTRIBUTE = \"target\";\n\n\tprivate static final String ENCTYPE_ATTRIBUTE = \"enctype\";\n\n\tprivate static final String ACCEPT_CHARSET_ATTRIBUTE = \"accept-charset\";\n\n\tprivate static final String ONSUBMIT_ATTRIBUTE = \"onsubmit\";\n\n\tprivate static final String ONRESET_ATTRIBUTE = \"onreset\";\n\n\tprivate static final String AUTOCOMPLETE_ATTRIBUTE = \"autocomplete\";\n\n\tprivate static final String NAME_ATTRIBUTE = \"name\";\n\n\tprivate static final String VALUE_ATTRIBUTE = \"value\";\n\n\tprivate static final String TYPE_ATTRIBUTE = \"type\";\n\n\n\tprivate TagWriter tagWriter;\n\n\tprivate String modelAttribute = DEFAULT_COMMAND_NAME;\n\n\tprivate String name;\n\n\tprivate String action;\n\n\tprivate String servletRelativeAction;\n\n\tprivate String method = DEFAULT_METHOD;\n\n\tprivate String target;\n\n\tprivate String enctype;\n\n\tprivate String acceptCharset;\n\n\tprivate String onsubmit;\n\n\tprivate String onreset;\n\n\tprivate String autocomplete;\n\n\tprivate String methodParam = DEFAULT_METHOD_PARAM;\n\n\t/** Caching a previous nested path, so that it may be reset */\n\tprivate String previousNestedPath;\n\n\n\t/**\n\t * Set the name of the form attribute in the model.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setModelAttribute(String modelAttribute) {\n\t\tthis.modelAttribute = modelAttribute;\n\t}\n\n\t/**\n\t * Get the name of the form attribute in the model.\n\t */\n\tprotected String getModelAttribute() {\n\t\treturn this.modelAttribute;\n\t}\n\n\t/**\n\t * Set the name of the form attribute in the model.\n\t * <p>May be a runtime expression.\n\t * @see #setModelAttribute\n\t */\n\tpublic void setCommandName(String commandName) {\n\t\tthis.modelAttribute = commandName;\n\t}\n\n\t/**\n\t * Get the name of the form attribute in the model.\n\t * @see #getModelAttribute\n\t */\n\tprotected String getCommandName() {\n\t\treturn this.modelAttribute;\n\t}\n\n\t/**\n\t * Set the value of the '{@code name}' attribute.\n\t * <p>May be a runtime expression.\n\t * <p>Name is not a valid attribute for form on XHTML 1.0. However,\n\t * it is sometimes needed for backward compatibility.\n\t */\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Get the value of the '{@code name}' attribute.\n\t */\n\t@Override\n\tprotected String getName() throws JspException {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Set the value of the '{@code action}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setAction(String action) {\n\t\tthis.action = (action != null ? action : \"\");\n\t}\n\n\t/**\n\t * Get the value of the '{@code action}' attribute.\n\t */\n\tprotected String getAction() {\n\t\treturn this.action;\n\t}\n\n\t/**\n\t * Set the value of the '{@code action}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setServletRelativeAction(String servletRelativeaction) {\n\t\tthis.servletRelativeAction = (servletRelativeaction != null ? servletRelativeaction : \"\");\n\t}\n\n\t/**\n\t * Get the value of the '{@code action}' attribute.\n\t */\n\tprotected String getServletRelativeAction() {\n\t\treturn this.servletRelativeAction;\n\t}\n\n\t/**\n\t * Set the value of the '{@code method}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setMethod(String method) {\n\t\tthis.method = method;\n\t}\n\n\t/**\n\t * Get the value of the '{@code method}' attribute.\n\t */\n\tprotected String getMethod() {\n\t\treturn this.method;\n\t}\n\n\t/**\n\t * Set the value of the '{@code target}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setTarget(String target) {\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * Get the value of the '{@code target}' attribute.\n\t */\n\tpublic String getTarget() {\n\t\treturn this.target;\n\t}\n\n\t/**\n\t * Set the value of the '{@code enctype}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setEnctype(String enctype) {\n\t\tthis.enctype = enctype;\n\t}\n\n\t/**\n\t * Get the value of the '{@code enctype}' attribute.\n\t */\n\tprotected String getEnctype() {\n\t\treturn this.enctype;\n\t}\n\n\t/**\n\t * Set the value of the '{@code acceptCharset}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setAcceptCharset(String acceptCharset) {\n\t\tthis.acceptCharset = acceptCharset;\n\t}\n\n\t/**\n\t * Get the value of the '{@code acceptCharset}' attribute.\n\t */\n\tprotected String getAcceptCharset() {\n\t\treturn this.acceptCharset;\n\t}\n\n\t/**\n\t * Set the value of the '{@code onsubmit}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setOnsubmit(String onsubmit) {\n\t\tthis.onsubmit = onsubmit;\n\t}\n\n\t/**\n\t * Get the value of the '{@code onsubmit}' attribute.\n\t */\n\tprotected String getOnsubmit() {\n\t\treturn this.onsubmit;\n\t}\n\n\t/**\n\t * Set the value of the '{@code onreset}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setOnreset(String onreset) {\n\t\tthis.onreset = onreset;\n\t}\n\n\t/**\n\t * Get the value of the '{@code onreset}' attribute.\n\t */\n\tprotected String getOnreset() {\n\t\treturn this.onreset;\n\t}\n\n\t/**\n\t * Set the value of the '{@code autocomplete}' attribute.\n\t * May be a runtime expression.\n\t */\n\tpublic void setAutocomplete(String autocomplete) {\n\t\tthis.autocomplete = autocomplete;\n\t}\n\n\t/**\n\t * Get the value of the '{@code autocomplete}' attribute.\n\t */\n\tprotected String getAutocomplete() {\n\t\treturn this.autocomplete;\n\t}\n\n\t/**\n\t * Set the name of the request param for non-browser supported HTTP methods.\n\t */\n\tpublic void setMethodParam(String methodParam) {\n\t\tthis.methodParam = methodParam;\n\t}\n\n\t/**\n\t * Get the name of the request param for non-browser supported HTTP methods.\n\t */\n\tprotected String getMethodParameter() {\n\t\treturn this.methodParam;\n\t}\n\n\t/**\n\t * Determine if the HTTP method is supported by browsers (i.e. GET or POST).\n\t */\n\tprotected boolean isMethodBrowserSupported(String method) {\n\t\treturn (\"get\".equalsIgnoreCase(method) || \"post\".equalsIgnoreCase(method));\n\t}\n\n\t/**\n\t * Writes the opening part of the block\t'{@code form}' tag and exposes\n\t * the form object name in the {@link javax.servlet.jsp.PageContext}.\n\t * @param tagWriter the {@link TagWriter} to which the form content is to be written\n\t * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}\n\t */\n\t@Override\n\tprotected int writeTagContent(TagWriter tagWriter) throws JspException {\n\t\tthis.tagWriter = tagWriter;\n\n\t\ttagWriter.startTag(FORM_TAG);\n\t\twriteDefaultAttributes(tagWriter);\n\t\ttagWriter.writeAttribute(ACTION_ATTRIBUTE, resolveAction());\n\t\twriteOptionalAttribute(tagWriter, METHOD_ATTRIBUTE, getHttpMethod());\n\t\twriteOptionalAttribute(tagWriter, TARGET_ATTRIBUTE, getTarget());\n\t\twriteOptionalAttribute(tagWriter, ENCTYPE_ATTRIBUTE, getEnctype());\n\t\twriteOptionalAttribute(tagWriter, ACCEPT_CHARSET_ATTRIBUTE, getAcceptCharset());\n\t\twriteOptionalAttribute(tagWriter, ONSUBMIT_ATTRIBUTE, getOnsubmit());\n\t\twriteOptionalAttribute(tagWriter, ONRESET_ATTRIBUTE, getOnreset());\n\t\twriteOptionalAttribute(tagWriter, AUTOCOMPLETE_ATTRIBUTE, getAutocomplete());\n\n\t\ttagWriter.forceBlock();\n\n\t\tif (!isMethodBrowserSupported(getMethod())) {\n\t\t\tassertHttpMethod(getMethod());\n\t\t\tString inputName = getMethodParameter();\n\t\t\tString inputType = \"hidden\";\n\t\t\ttagWriter.startTag(INPUT_TAG);\n\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, inputType);\n\t\t\twriteOptionalAttribute(tagWriter, NAME_ATTRIBUTE, inputName);\n\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, processFieldValue(inputName, getMethod(), inputType));\n\t\t\ttagWriter.endTag();\n\t\t}\n\n\t\t// Expose the form object name for nested tags...\n\t\tString modelAttribute = resolveModelAttribute();\n\t\tthis.pageContext.setAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, modelAttribute, PageContext.REQUEST_SCOPE);\n\n\t\t// Save previous nestedPath value, build and expose current nestedPath value.\n\t\t// Use request scope to expose nestedPath to included pages too.\n\t\tthis.previousNestedPath =\n\t\t\t\t(String) this.pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\tthis.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME,\n\t\t\t\tmodelAttribute + PropertyAccessor.NESTED_PROPERTY_SEPARATOR, PageContext.REQUEST_SCOPE);\n\n\t\treturn EVAL_BODY_INCLUDE;\n\t}\n\n\tprivate String getHttpMethod() {\n\t\treturn isMethodBrowserSupported(getMethod()) ? getMethod() : DEFAULT_METHOD;\n\t}\n\n\tprivate void assertHttpMethod(String method) {\n\t\tfor (HttpMethod httpMethod : HttpMethod.values()) {\n\t\t\tif (httpMethod.name().equalsIgnoreCase(method)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid HTTP method: \" + method);\n\t}\n\n\t/**\n\t * Autogenerated IDs correspond to the form object name.\n\t */\n\t@Override\n\tprotected String autogenerateId() throws JspException {\n\t\treturn resolveModelAttribute();\n\t}\n\n\t/**\n\t * {@link #evaluate Resolves} and returns the name of the form object.\n\t * @throws IllegalArgumentException if the form object resolves to {@code null}\n\t */\n\tprotected String resolveModelAttribute() throws JspException {\n\t\tObject resolvedModelAttribute = evaluate(MODEL_ATTRIBUTE, getModelAttribute());\n\t\tif (resolvedModelAttribute == null) {\n\t\t\tthrow new IllegalArgumentException(MODEL_ATTRIBUTE + \" must not be null\");\n\t\t}\n\t\treturn (String) resolvedModelAttribute;\n\t}\n\n\t/**\n\t * Resolve the value of the '{@code action}' attribute.\n\t * <p>If the user configured an '{@code action}' value then the result of\n\t * evaluating this value is used. If the user configured an\n\t * '{@code servletRelativeAction}' value then the value is prepended\n\t * with the context and servlet paths, and the result is used. Otherwise, the\n\t * {@link org.springframework.web.servlet.support.RequestContext#getRequestUri()\n\t * originating URI} is used.\n\t *\n\t * @return the value that is to be used for the '{@code action}' attribute\n\t */\n\tprotected String resolveAction() throws JspException {\n\t\tString action = getAction();\n\t\tString servletRelativeAction = getServletRelativeAction();\n\t\tif (StringUtils.hasText(action)) {\n\t\t\taction = getDisplayString(evaluate(ACTION_ATTRIBUTE, action));\n\t\t\treturn processAction(action);\n\t\t}\n\t\telse if (StringUtils.hasText(servletRelativeAction)) {\n\t\t\tString pathToServlet = getRequestContext().getPathToServlet();\n\t\t\tif (servletRelativeAction.startsWith(\"/\") && !servletRelativeAction.startsWith(getRequestContext().getContextPath())) {\n\t\t\t\tservletRelativeAction = pathToServlet + servletRelativeAction;\n\t\t\t}\n\t\t\tservletRelativeAction = getDisplayString(evaluate(ACTION_ATTRIBUTE, servletRelativeAction));\n\t\t\treturn processAction(servletRelativeAction);\n\t\t}\n\t\telse {\n\t\t\tString requestUri = getRequestContext().getRequestUri();\n\t\t\tServletResponse response = this.pageContext.getResponse();\n\t\t\tif (response instanceof HttpServletResponse) {\n\t\t\t\trequestUri = ((HttpServletResponse) response).encodeURL(requestUri);\n\t\t\t\tString queryString = getRequestContext().getQueryString();\n\t\t\t\tif (StringUtils.hasText(queryString)) {\n\t\t\t\t\trequestUri += \"?\" + HtmlUtils.htmlEscape(queryString);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (StringUtils.hasText(requestUri)) {\n\t\t\t\treturn processAction(requestUri);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Attribute 'action' is required. \" +\n\t\t\t\t\t\t\"Attempted to resolve against current request URI but request URI was null.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Process the action through a {@link RequestDataValueProcessor} instance\n\t * if one is configured or otherwise returns the action unmodified.\n\t */\n\tprivate String processAction(String action) {\n\t\tRequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor();\n\t\tServletRequest request = this.pageContext.getRequest();\n\t\tif ((processor != null) && (request instanceof HttpServletRequest)) {\n\t\t\taction = processor.processAction((HttpServletRequest) request, action, getHttpMethod());\n\t\t}\n\t\treturn action;\n\t}\n\n\t/**\n\t * Closes the '{@code form}' block tag and removes the form object name\n\t * from the {@link javax.servlet.jsp.PageContext}.\n\t */\n\t@Override\n\tpublic int doEndTag() throws JspException {\n\t\tRequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor();\n\t\tServletRequest request = this.pageContext.getRequest();\n\t\tif ((processor != null) && (request instanceof HttpServletRequest)) {\n\t\t\twriteHiddenFields(processor.getExtraHiddenFields((HttpServletRequest) request));\n\t\t}\n\t\tthis.tagWriter.endTag();\n\t\treturn EVAL_PAGE;\n\t}\n\n\t/**\n\t * Writes the given values as hidden fields.\n\t */\n\tprivate void writeHiddenFields(Map<String, String> hiddenFields) throws JspException {\n\t\tif (hiddenFields != null) {\n\t\t\tthis.tagWriter.appendValue(\"<div>\\n\");\n\t\t\tfor (String name : hiddenFields.keySet()) {\n\t\t\t\tthis.tagWriter.appendValue(\"<input type=\\\"hidden\\\" \");\n\t\t\t\tthis.tagWriter.appendValue(\"name=\\\"\" + name + \"\\\" value=\\\"\" + hiddenFields.get(name) + \"\\\" \");\n\t\t\t\tthis.tagWriter.appendValue(\"/>\\n\");\n\t\t\t}\n\t\t\tthis.tagWriter.appendValue(\"</div>\");\n\t\t}\n\t}\n\n\t/**\n\t * Clears the stored {@link TagWriter}.\n\t */\n\t@Override\n\tpublic void doFinally() {\n\t\tsuper.doFinally();\n\t\tthis.pageContext.removeAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\tif (this.previousNestedPath != null) {\n\t\t\t// Expose previous nestedPath value.\n\t\t\tthis.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, this.previousNestedPath, PageContext.REQUEST_SCOPE);\n\t\t}\n\t\telse {\n\t\t\t// Remove exposed nestedPath value.\n\t\t\tthis.pageContext.removeAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\t}\n\t\tthis.tagWriter = null;\n\t\tthis.previousNestedPath = null;\n\t}\n\n\n\t/**\n\t * Override resolve CSS class since error class is not supported.\n\t */\n\t@Override\n\tprotected String resolveCssClass() throws JspException {\n\t\treturn ObjectUtils.getDisplayString(evaluate(\"cssClass\", getCssClass()));\n\t}\n\n\t/**\n\t * Unsupported for forms.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setPath(String path) {\n\t\tthrow new UnsupportedOperationException(\"The 'path' attribute is not supported for forms\");\n\t}\n\n\t/**\n\t * Unsupported for forms.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setCssErrorClass(String cssErrorClass) {\n\t\tthrow new UnsupportedOperationException(\"The 'cssErrorClass' attribute is not supported for forms\");\n\t}\n\n}\n", "/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.servlet.tags.form;\n\nimport java.util.Collections;\n\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.Tag;\n\nimport org.springframework.mock.web.test.MockHttpServletRequest;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\n\nimport static org.mockito.BDDMockito.*;\n\n/**\n * @author Rob Harrop\n * @author Rick Evans\n * @author Juergen Hoeller\n * @author Scott Andrews\n * @author Jeremy Grelle\n * @author Rossen Stoyanchev\n */\npublic class FormTagTests extends AbstractHtmlElementTagTests {\n\n\tprivate static final String REQUEST_URI = \"/my/form\";\n\n\tprivate static final String QUERY_STRING = \"foo=bar\";\n\n\n\tprivate FormTag tag;\n\n\tprivate MockHttpServletRequest request;\n\n\n\t@Override\n\t@SuppressWarnings(\"serial\")\n\tprotected void onSetUp() {\n\t\tthis.tag = new FormTag() {\n\t\t\t@Override\n\t\t\tprotected TagWriter createTagWriter() {\n\t\t\t\treturn new TagWriter(getWriter());\n\t\t\t}\n\t\t};\n\t\tthis.tag.setPageContext(getPageContext());\n\t}\n\n\t@Override\n\tprotected void extendRequest(MockHttpServletRequest request) {\n\t\trequest.setRequestURI(REQUEST_URI);\n\t\trequest.setQueryString(QUERY_STRING);\n\t\tthis.request = request;\n\t}\n\n\tpublic void testWriteForm() throws Exception {\n\t\tString commandName = \"myCommand\";\n\t\tString name = \"formName\";\n\t\tString action = \"/form.html\";\n\t\tString method = \"POST\";\n\t\tString target = \"myTarget\";\n\t\tString enctype = \"my/enctype\";\n\t\tString acceptCharset = \"iso-8859-1\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\t\tString autocomplete = \"off\";\n\t\tString cssClass = \"myClass\";\n\t\tString cssStyle = \"myStyle\";\n\t\tString dynamicAttribute1 = \"attr1\";\n\t\tString dynamicAttribute2 = \"attr2\";\n\n\t\tthis.tag.setName(name);\n\t\tthis.tag.setCssClass(cssClass);\n\t\tthis.tag.setCssStyle(cssStyle);\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setAction(action);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setTarget(target);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setAcceptCharset(acceptCharset);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\t\tthis.tag.setAutocomplete(autocomplete);\n\t\tthis.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1);\n\t\tthis.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getRequest().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getRequest().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"class\", cssClass);\n\t\tassertContainsAttribute(output, \"style\", cssStyle);\n\t\tassertContainsAttribute(output, \"action\", action);\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"target\", target);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"accept-charset\", acceptCharset);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertContainsAttribute(output, \"autocomplete\", autocomplete);\n\t\tassertContainsAttribute(output, \"id\", commandName);\n\t\tassertContainsAttribute(output, \"name\", name);\n\t\tassertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1);\n\t\tassertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2);\n\t}\n\n\tpublic void testWithActionFromRequest() throws Exception {\n\t\tString commandName = \"myCommand\";\n\t\tString enctype = \"my/enctype\";\n\t\tString method = \"POST\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"action\", REQUEST_URI + \"?\" + QUERY_STRING);\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertAttributeNotPresent(output, \"name\");\n\t}\n\n\tpublic void testPrependServletPath() throws Exception {\n\n\t\tthis.request.setContextPath(\"/myApp\");\n\t\tthis.request.setServletPath(\"/main\");\n\t\tthis.request.setPathInfo(\"/index.html\");\n\n\t\tString commandName = \"myCommand\";\n\t\tString action = \"/form.html\";\n\t\tString enctype = \"my/enctype\";\n\t\tString method = \"POST\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setServletRelativeAction(action);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"action\", \"/myApp/main/form.html\");\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertAttributeNotPresent(output, \"name\");\n\t}\n\n\tpublic void testWithNullResolvedCommand() throws Exception {\n\t\ttry {\n\t\t\ttag.setCommandName(null);\n\t\t\ttag.doStartTag();\n\t\t\tfail(\"Must not be able to have a command name that resolves to null\");\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t// expected\n\t\t}\n\t}\n\n\t/*\n\t * See http://opensource.atlassian.com/projects/spring/browse/SPR-2645\n\t */\n\tpublic void testXSSScriptingExploitWhenActionIsResolvedFromQueryString() throws Exception {\n\t\tString xssQueryString = QUERY_STRING + \"&stuff=\\\"><script>alert('XSS!')</script>\";\n\t\trequest.setQueryString(xssQueryString);\n\t\ttag.doStartTag();\n\t\tassertEquals(\"<form id=\\\"command\\\" action=\\\"/my/form?foo=bar&amp;stuff=&quot;&gt;&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\\\" method=\\\"post\\\">\",\n\t\t\t\tgetOutput());\n\t}\n\n\tpublic void testGet() throws Exception {\n\t\tthis.tag.setMethod(\"get\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"get\");\n\t\tassertEquals(\"\", inputOutput);\n\t}\n\n\tpublic void testPost() throws Exception {\n\t\tthis.tag.setMethod(\"post\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertEquals(\"\", inputOutput);\n\t}\n\n\tpublic void testPut() throws Exception {\n\t\tthis.tag.setMethod(\"put\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"_method\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"put\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testDelete() throws Exception {\n\t\tthis.tag.setMethod(\"delete\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"_method\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"delete\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testCustomMethodParameter() throws Exception {\n\t\tthis.tag.setMethod(\"put\");\n\t\tthis.tag.setMethodParam(\"methodParameter\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"methodParameter\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"put\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testClearAttributesOnFinally() throws Exception {\n\t\tthis.tag.setModelAttribute(\"model\");\n\t\tgetPageContext().setAttribute(\"model\", \"foo bar\");\n\t\tassertNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t\tthis.tag.doStartTag();\n\t\tassertNotNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t\tthis.tag.doFinally();\n\t\tassertNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t}\n\n\tpublic void testRequestDataValueProcessorHooks() throws Exception {\n\t\tString action = \"/my/form?foo=bar\";\n\t\tRequestDataValueProcessor processor = getMockRequestDataValueProcessor();\n\t\tgiven(processor.processAction(this.request, action, \"post\")).willReturn(action);\n\t\tgiven(processor.getExtraHiddenFields(this.request)).willReturn(Collections.singletonMap(\"key\", \"value\"));\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\n\t\tassertEquals(\"<div>\\n<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"value\\\" />\\n</div>\", getInputTag(output));\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\t}\n\n\tprivate String getFormTag(String output) {\n\t\tint inputStart = output.indexOf(\"<\", 1);\n\t\tint inputEnd = output.lastIndexOf(\">\", output.length() - 2);\n\t\treturn output.substring(0, inputStart) + output.substring(inputEnd + 1);\n\t}\n\n\tprivate String getInputTag(String output) {\n\t\tint inputStart = output.indexOf(\"<\", 1);\n\t\tint inputEnd = output.lastIndexOf(\">\", output.length() - 2);\n\t\treturn output.substring(inputStart, inputEnd + 1);\n\t}\n\n\n\tprivate static void assertFormTagOpened(String output) {\n\t\tassertTrue(output.startsWith(\"<form \"));\n\t}\n\n\tprivate static void assertFormTagClosed(String output) {\n\t\tassertTrue(output.endsWith(\"</form>\"));\n\t}\n\n}\n"], "fixing_code": ["/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.servlet.tags.form;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Map;\n\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.PageContext;\n\nimport org.springframework.beans.PropertyAccessor;\nimport org.springframework.core.Conventions;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\nimport org.springframework.web.util.HtmlUtils;\nimport org.springframework.web.util.UriUtils;\n\n/**\n * Databinding-aware JSP tag for rendering an HTML '{@code form}' whose\n * inner elements are bound to properties on a <em>form object</em>.\n *\n * <p>Users should place the form object into the\n * {@link org.springframework.web.servlet.ModelAndView ModelAndView} when\n * populating the data for their view. The name of this form object can be\n * configured using the {@link #setModelAttribute \"modelAttribute\"} property.\n *\n * @author Rob Harrop\n * @author Juergen Hoeller\n * @author Scott Andrews\n * @author Rossen Stoyanchev\n * @since 2.0\n */\n@SuppressWarnings(\"serial\")\npublic class FormTag extends AbstractHtmlElementTag {\n\n\t/** The default HTTP method using which form values are sent to the server: \"post\" */\n\tprivate static final String DEFAULT_METHOD = \"post\";\n\n\t/** The default attribute name: &quot;command&quot; */\n\tpublic static final String DEFAULT_COMMAND_NAME = \"command\";\n\n\t/** The name of the '{@code modelAttribute}' setting */\n\tprivate static final String MODEL_ATTRIBUTE = \"modelAttribute\";\n\n\t/**\n\t * The name of the {@link javax.servlet.jsp.PageContext} attribute under which the\n\t * form object name is exposed.\n\t */\n\tpublic static final String MODEL_ATTRIBUTE_VARIABLE_NAME =\n\t\t\tConventions.getQualifiedAttributeName(AbstractFormTag.class, MODEL_ATTRIBUTE);\n\n\t/** Default method parameter, i.e. {@code _method}. */\n\tprivate static final String DEFAULT_METHOD_PARAM = \"_method\";\n\n\tprivate static final String FORM_TAG = \"form\";\n\n\tprivate static final String INPUT_TAG = \"input\";\n\n\tprivate static final String ACTION_ATTRIBUTE = \"action\";\n\n\tprivate static final String METHOD_ATTRIBUTE = \"method\";\n\n\tprivate static final String TARGET_ATTRIBUTE = \"target\";\n\n\tprivate static final String ENCTYPE_ATTRIBUTE = \"enctype\";\n\n\tprivate static final String ACCEPT_CHARSET_ATTRIBUTE = \"accept-charset\";\n\n\tprivate static final String ONSUBMIT_ATTRIBUTE = \"onsubmit\";\n\n\tprivate static final String ONRESET_ATTRIBUTE = \"onreset\";\n\n\tprivate static final String AUTOCOMPLETE_ATTRIBUTE = \"autocomplete\";\n\n\tprivate static final String NAME_ATTRIBUTE = \"name\";\n\n\tprivate static final String VALUE_ATTRIBUTE = \"value\";\n\n\tprivate static final String TYPE_ATTRIBUTE = \"type\";\n\n\n\tprivate TagWriter tagWriter;\n\n\tprivate String modelAttribute = DEFAULT_COMMAND_NAME;\n\n\tprivate String name;\n\n\tprivate String action;\n\n\tprivate String servletRelativeAction;\n\n\tprivate String method = DEFAULT_METHOD;\n\n\tprivate String target;\n\n\tprivate String enctype;\n\n\tprivate String acceptCharset;\n\n\tprivate String onsubmit;\n\n\tprivate String onreset;\n\n\tprivate String autocomplete;\n\n\tprivate String methodParam = DEFAULT_METHOD_PARAM;\n\n\t/** Caching a previous nested path, so that it may be reset */\n\tprivate String previousNestedPath;\n\n\n\t/**\n\t * Set the name of the form attribute in the model.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setModelAttribute(String modelAttribute) {\n\t\tthis.modelAttribute = modelAttribute;\n\t}\n\n\t/**\n\t * Get the name of the form attribute in the model.\n\t */\n\tprotected String getModelAttribute() {\n\t\treturn this.modelAttribute;\n\t}\n\n\t/**\n\t * Set the name of the form attribute in the model.\n\t * <p>May be a runtime expression.\n\t * @see #setModelAttribute\n\t */\n\tpublic void setCommandName(String commandName) {\n\t\tthis.modelAttribute = commandName;\n\t}\n\n\t/**\n\t * Get the name of the form attribute in the model.\n\t * @see #getModelAttribute\n\t */\n\tprotected String getCommandName() {\n\t\treturn this.modelAttribute;\n\t}\n\n\t/**\n\t * Set the value of the '{@code name}' attribute.\n\t * <p>May be a runtime expression.\n\t * <p>Name is not a valid attribute for form on XHTML 1.0. However,\n\t * it is sometimes needed for backward compatibility.\n\t */\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * Get the value of the '{@code name}' attribute.\n\t */\n\t@Override\n\tprotected String getName() throws JspException {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * Set the value of the '{@code action}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setAction(String action) {\n\t\tthis.action = (action != null ? action : \"\");\n\t}\n\n\t/**\n\t * Get the value of the '{@code action}' attribute.\n\t */\n\tprotected String getAction() {\n\t\treturn this.action;\n\t}\n\n\t/**\n\t * Set the value of the '{@code action}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setServletRelativeAction(String servletRelativeaction) {\n\t\tthis.servletRelativeAction = (servletRelativeaction != null ? servletRelativeaction : \"\");\n\t}\n\n\t/**\n\t * Get the value of the '{@code action}' attribute.\n\t */\n\tprotected String getServletRelativeAction() {\n\t\treturn this.servletRelativeAction;\n\t}\n\n\t/**\n\t * Set the value of the '{@code method}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setMethod(String method) {\n\t\tthis.method = method;\n\t}\n\n\t/**\n\t * Get the value of the '{@code method}' attribute.\n\t */\n\tprotected String getMethod() {\n\t\treturn this.method;\n\t}\n\n\t/**\n\t * Set the value of the '{@code target}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setTarget(String target) {\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * Get the value of the '{@code target}' attribute.\n\t */\n\tpublic String getTarget() {\n\t\treturn this.target;\n\t}\n\n\t/**\n\t * Set the value of the '{@code enctype}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setEnctype(String enctype) {\n\t\tthis.enctype = enctype;\n\t}\n\n\t/**\n\t * Get the value of the '{@code enctype}' attribute.\n\t */\n\tprotected String getEnctype() {\n\t\treturn this.enctype;\n\t}\n\n\t/**\n\t * Set the value of the '{@code acceptCharset}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setAcceptCharset(String acceptCharset) {\n\t\tthis.acceptCharset = acceptCharset;\n\t}\n\n\t/**\n\t * Get the value of the '{@code acceptCharset}' attribute.\n\t */\n\tprotected String getAcceptCharset() {\n\t\treturn this.acceptCharset;\n\t}\n\n\t/**\n\t * Set the value of the '{@code onsubmit}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setOnsubmit(String onsubmit) {\n\t\tthis.onsubmit = onsubmit;\n\t}\n\n\t/**\n\t * Get the value of the '{@code onsubmit}' attribute.\n\t */\n\tprotected String getOnsubmit() {\n\t\treturn this.onsubmit;\n\t}\n\n\t/**\n\t * Set the value of the '{@code onreset}' attribute.\n\t * <p>May be a runtime expression.\n\t */\n\tpublic void setOnreset(String onreset) {\n\t\tthis.onreset = onreset;\n\t}\n\n\t/**\n\t * Get the value of the '{@code onreset}' attribute.\n\t */\n\tprotected String getOnreset() {\n\t\treturn this.onreset;\n\t}\n\n\t/**\n\t * Set the value of the '{@code autocomplete}' attribute.\n\t * May be a runtime expression.\n\t */\n\tpublic void setAutocomplete(String autocomplete) {\n\t\tthis.autocomplete = autocomplete;\n\t}\n\n\t/**\n\t * Get the value of the '{@code autocomplete}' attribute.\n\t */\n\tprotected String getAutocomplete() {\n\t\treturn this.autocomplete;\n\t}\n\n\t/**\n\t * Set the name of the request param for non-browser supported HTTP methods.\n\t */\n\tpublic void setMethodParam(String methodParam) {\n\t\tthis.methodParam = methodParam;\n\t}\n\n\t/**\n\t * Get the name of the request param for non-browser supported HTTP methods.\n\t */\n\tprotected String getMethodParameter() {\n\t\treturn this.methodParam;\n\t}\n\n\t/**\n\t * Determine if the HTTP method is supported by browsers (i.e. GET or POST).\n\t */\n\tprotected boolean isMethodBrowserSupported(String method) {\n\t\treturn (\"get\".equalsIgnoreCase(method) || \"post\".equalsIgnoreCase(method));\n\t}\n\n\t/**\n\t * Writes the opening part of the block\t'{@code form}' tag and exposes\n\t * the form object name in the {@link javax.servlet.jsp.PageContext}.\n\t * @param tagWriter the {@link TagWriter} to which the form content is to be written\n\t * @return {@link javax.servlet.jsp.tagext.Tag#EVAL_BODY_INCLUDE}\n\t */\n\t@Override\n\tprotected int writeTagContent(TagWriter tagWriter) throws JspException {\n\t\tthis.tagWriter = tagWriter;\n\n\t\ttagWriter.startTag(FORM_TAG);\n\t\twriteDefaultAttributes(tagWriter);\n\t\ttagWriter.writeAttribute(ACTION_ATTRIBUTE, resolveAction());\n\t\twriteOptionalAttribute(tagWriter, METHOD_ATTRIBUTE, getHttpMethod());\n\t\twriteOptionalAttribute(tagWriter, TARGET_ATTRIBUTE, getTarget());\n\t\twriteOptionalAttribute(tagWriter, ENCTYPE_ATTRIBUTE, getEnctype());\n\t\twriteOptionalAttribute(tagWriter, ACCEPT_CHARSET_ATTRIBUTE, getAcceptCharset());\n\t\twriteOptionalAttribute(tagWriter, ONSUBMIT_ATTRIBUTE, getOnsubmit());\n\t\twriteOptionalAttribute(tagWriter, ONRESET_ATTRIBUTE, getOnreset());\n\t\twriteOptionalAttribute(tagWriter, AUTOCOMPLETE_ATTRIBUTE, getAutocomplete());\n\n\t\ttagWriter.forceBlock();\n\n\t\tif (!isMethodBrowserSupported(getMethod())) {\n\t\t\tassertHttpMethod(getMethod());\n\t\t\tString inputName = getMethodParameter();\n\t\t\tString inputType = \"hidden\";\n\t\t\ttagWriter.startTag(INPUT_TAG);\n\t\t\twriteOptionalAttribute(tagWriter, TYPE_ATTRIBUTE, inputType);\n\t\t\twriteOptionalAttribute(tagWriter, NAME_ATTRIBUTE, inputName);\n\t\t\twriteOptionalAttribute(tagWriter, VALUE_ATTRIBUTE, processFieldValue(inputName, getMethod(), inputType));\n\t\t\ttagWriter.endTag();\n\t\t}\n\n\t\t// Expose the form object name for nested tags...\n\t\tString modelAttribute = resolveModelAttribute();\n\t\tthis.pageContext.setAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, modelAttribute, PageContext.REQUEST_SCOPE);\n\n\t\t// Save previous nestedPath value, build and expose current nestedPath value.\n\t\t// Use request scope to expose nestedPath to included pages too.\n\t\tthis.previousNestedPath =\n\t\t\t\t(String) this.pageContext.getAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\tthis.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME,\n\t\t\t\tmodelAttribute + PropertyAccessor.NESTED_PROPERTY_SEPARATOR, PageContext.REQUEST_SCOPE);\n\n\t\treturn EVAL_BODY_INCLUDE;\n\t}\n\n\tprivate String getHttpMethod() {\n\t\treturn isMethodBrowserSupported(getMethod()) ? getMethod() : DEFAULT_METHOD;\n\t}\n\n\tprivate void assertHttpMethod(String method) {\n\t\tfor (HttpMethod httpMethod : HttpMethod.values()) {\n\t\t\tif (httpMethod.name().equalsIgnoreCase(method)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid HTTP method: \" + method);\n\t}\n\n\t/**\n\t * Autogenerated IDs correspond to the form object name.\n\t */\n\t@Override\n\tprotected String autogenerateId() throws JspException {\n\t\treturn resolveModelAttribute();\n\t}\n\n\t/**\n\t * {@link #evaluate Resolves} and returns the name of the form object.\n\t * @throws IllegalArgumentException if the form object resolves to {@code null}\n\t */\n\tprotected String resolveModelAttribute() throws JspException {\n\t\tObject resolvedModelAttribute = evaluate(MODEL_ATTRIBUTE, getModelAttribute());\n\t\tif (resolvedModelAttribute == null) {\n\t\t\tthrow new IllegalArgumentException(MODEL_ATTRIBUTE + \" must not be null\");\n\t\t}\n\t\treturn (String) resolvedModelAttribute;\n\t}\n\n\t/**\n\t * Resolve the value of the '{@code action}' attribute.\n\t * <p>If the user configured an '{@code action}' value then the result of\n\t * evaluating this value is used. If the user configured an\n\t * '{@code servletRelativeAction}' value then the value is prepended\n\t * with the context and servlet paths, and the result is used. Otherwise, the\n\t * {@link org.springframework.web.servlet.support.RequestContext#getRequestUri()\n\t * originating URI} is used.\n\t *\n\t * @return the value that is to be used for the '{@code action}' attribute\n\t */\n\tprotected String resolveAction() throws JspException {\n\t\tString action = getAction();\n\t\tString servletRelativeAction = getServletRelativeAction();\n\t\tif (StringUtils.hasText(action)) {\n\t\t\taction = getDisplayString(evaluate(ACTION_ATTRIBUTE, action));\n\t\t\treturn processAction(action);\n\t\t}\n\t\telse if (StringUtils.hasText(servletRelativeAction)) {\n\t\t\tString pathToServlet = getRequestContext().getPathToServlet();\n\t\t\tif (servletRelativeAction.startsWith(\"/\") && !servletRelativeAction.startsWith(getRequestContext().getContextPath())) {\n\t\t\t\tservletRelativeAction = pathToServlet + servletRelativeAction;\n\t\t\t}\n\t\t\tservletRelativeAction = getDisplayString(evaluate(ACTION_ATTRIBUTE, servletRelativeAction));\n\t\t\treturn processAction(servletRelativeAction);\n\t\t}\n\t\telse {\n\t\t\tString requestUri = getRequestContext().getRequestUri();\n\t\t\tString encoding = pageContext.getResponse().getCharacterEncoding();\n\t\t\ttry {\n\t\t\t\trequestUri = UriUtils.encodePath(requestUri, encoding);\n\t\t\t}\n\t\t\tcatch (UnsupportedEncodingException e) {\n\t\t\t\tthrow new JspException(e);\n\t\t\t}\n\t\t\tServletResponse response = this.pageContext.getResponse();\n\t\t\tif (response instanceof HttpServletResponse) {\n\t\t\t\trequestUri = ((HttpServletResponse) response).encodeURL(requestUri);\n\t\t\t\tString queryString = getRequestContext().getQueryString();\n\t\t\t\tif (StringUtils.hasText(queryString)) {\n\t\t\t\t\trequestUri += \"?\" + HtmlUtils.htmlEscape(queryString);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (StringUtils.hasText(requestUri)) {\n\t\t\t\treturn processAction(requestUri);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Attribute 'action' is required. \" +\n\t\t\t\t\t\t\"Attempted to resolve against current request URI but request URI was null.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Process the action through a {@link RequestDataValueProcessor} instance\n\t * if one is configured or otherwise returns the action unmodified.\n\t */\n\tprivate String processAction(String action) {\n\t\tRequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor();\n\t\tServletRequest request = this.pageContext.getRequest();\n\t\tif ((processor != null) && (request instanceof HttpServletRequest)) {\n\t\t\taction = processor.processAction((HttpServletRequest) request, action, getHttpMethod());\n\t\t}\n\t\treturn action;\n\t}\n\n\t/**\n\t * Closes the '{@code form}' block tag and removes the form object name\n\t * from the {@link javax.servlet.jsp.PageContext}.\n\t */\n\t@Override\n\tpublic int doEndTag() throws JspException {\n\t\tRequestDataValueProcessor processor = getRequestContext().getRequestDataValueProcessor();\n\t\tServletRequest request = this.pageContext.getRequest();\n\t\tif ((processor != null) && (request instanceof HttpServletRequest)) {\n\t\t\twriteHiddenFields(processor.getExtraHiddenFields((HttpServletRequest) request));\n\t\t}\n\t\tthis.tagWriter.endTag();\n\t\treturn EVAL_PAGE;\n\t}\n\n\t/**\n\t * Writes the given values as hidden fields.\n\t */\n\tprivate void writeHiddenFields(Map<String, String> hiddenFields) throws JspException {\n\t\tif (hiddenFields != null) {\n\t\t\tthis.tagWriter.appendValue(\"<div>\\n\");\n\t\t\tfor (String name : hiddenFields.keySet()) {\n\t\t\t\tthis.tagWriter.appendValue(\"<input type=\\\"hidden\\\" \");\n\t\t\t\tthis.tagWriter.appendValue(\"name=\\\"\" + name + \"\\\" value=\\\"\" + hiddenFields.get(name) + \"\\\" \");\n\t\t\t\tthis.tagWriter.appendValue(\"/>\\n\");\n\t\t\t}\n\t\t\tthis.tagWriter.appendValue(\"</div>\");\n\t\t}\n\t}\n\n\t/**\n\t * Clears the stored {@link TagWriter}.\n\t */\n\t@Override\n\tpublic void doFinally() {\n\t\tsuper.doFinally();\n\t\tthis.pageContext.removeAttribute(MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\tif (this.previousNestedPath != null) {\n\t\t\t// Expose previous nestedPath value.\n\t\t\tthis.pageContext.setAttribute(NESTED_PATH_VARIABLE_NAME, this.previousNestedPath, PageContext.REQUEST_SCOPE);\n\t\t}\n\t\telse {\n\t\t\t// Remove exposed nestedPath value.\n\t\t\tthis.pageContext.removeAttribute(NESTED_PATH_VARIABLE_NAME, PageContext.REQUEST_SCOPE);\n\t\t}\n\t\tthis.tagWriter = null;\n\t\tthis.previousNestedPath = null;\n\t}\n\n\n\t/**\n\t * Override resolve CSS class since error class is not supported.\n\t */\n\t@Override\n\tprotected String resolveCssClass() throws JspException {\n\t\treturn ObjectUtils.getDisplayString(evaluate(\"cssClass\", getCssClass()));\n\t}\n\n\t/**\n\t * Unsupported for forms.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setPath(String path) {\n\t\tthrow new UnsupportedOperationException(\"The 'path' attribute is not supported for forms\");\n\t}\n\n\t/**\n\t * Unsupported for forms.\n\t * @throws UnsupportedOperationException always\n\t */\n\t@Override\n\tpublic void setCssErrorClass(String cssErrorClass) {\n\t\tthrow new UnsupportedOperationException(\"The 'cssErrorClass' attribute is not supported for forms\");\n\t}\n\n}\n", "/*\n * Copyright 2002-2014 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.web.servlet.tags.form;\n\nimport java.util.Collections;\n\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.Tag;\n\nimport org.springframework.mock.web.test.MockHttpServletRequest;\nimport org.springframework.web.servlet.support.RequestDataValueProcessor;\n\nimport static org.mockito.BDDMockito.*;\n\n/**\n * @author Rob Harrop\n * @author Rick Evans\n * @author Juergen Hoeller\n * @author Scott Andrews\n * @author Jeremy Grelle\n * @author Rossen Stoyanchev\n */\npublic class FormTagTests extends AbstractHtmlElementTagTests {\n\n\tprivate static final String REQUEST_URI = \"/my/form\";\n\n\tprivate static final String QUERY_STRING = \"foo=bar\";\n\n\n\tprivate FormTag tag;\n\n\tprivate MockHttpServletRequest request;\n\n\n\t@Override\n\t@SuppressWarnings(\"serial\")\n\tprotected void onSetUp() {\n\t\tthis.tag = new FormTag() {\n\t\t\t@Override\n\t\t\tprotected TagWriter createTagWriter() {\n\t\t\t\treturn new TagWriter(getWriter());\n\t\t\t}\n\t\t};\n\t\tthis.tag.setPageContext(getPageContext());\n\t}\n\n\t@Override\n\tprotected void extendRequest(MockHttpServletRequest request) {\n\t\trequest.setRequestURI(REQUEST_URI);\n\t\trequest.setQueryString(QUERY_STRING);\n\t\tthis.request = request;\n\t}\n\n\tpublic void testWriteForm() throws Exception {\n\t\tString commandName = \"myCommand\";\n\t\tString name = \"formName\";\n\t\tString action = \"/form.html\";\n\t\tString method = \"POST\";\n\t\tString target = \"myTarget\";\n\t\tString enctype = \"my/enctype\";\n\t\tString acceptCharset = \"iso-8859-1\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\t\tString autocomplete = \"off\";\n\t\tString cssClass = \"myClass\";\n\t\tString cssStyle = \"myStyle\";\n\t\tString dynamicAttribute1 = \"attr1\";\n\t\tString dynamicAttribute2 = \"attr2\";\n\n\t\tthis.tag.setName(name);\n\t\tthis.tag.setCssClass(cssClass);\n\t\tthis.tag.setCssStyle(cssStyle);\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setAction(action);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setTarget(target);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setAcceptCharset(acceptCharset);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\t\tthis.tag.setAutocomplete(autocomplete);\n\t\tthis.tag.setDynamicAttribute(null, dynamicAttribute1, dynamicAttribute1);\n\t\tthis.tag.setDynamicAttribute(null, dynamicAttribute2, dynamicAttribute2);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getRequest().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getRequest().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"class\", cssClass);\n\t\tassertContainsAttribute(output, \"style\", cssStyle);\n\t\tassertContainsAttribute(output, \"action\", action);\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"target\", target);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"accept-charset\", acceptCharset);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertContainsAttribute(output, \"autocomplete\", autocomplete);\n\t\tassertContainsAttribute(output, \"id\", commandName);\n\t\tassertContainsAttribute(output, \"name\", name);\n\t\tassertContainsAttribute(output, dynamicAttribute1, dynamicAttribute1);\n\t\tassertContainsAttribute(output, dynamicAttribute2, dynamicAttribute2);\n\t}\n\n\tpublic void testWithActionFromRequest() throws Exception {\n\t\tString commandName = \"myCommand\";\n\t\tString enctype = \"my/enctype\";\n\t\tString method = \"POST\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"action\", REQUEST_URI + \"?\" + QUERY_STRING);\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertAttributeNotPresent(output, \"name\");\n\t}\n\n\tpublic void testPrependServletPath() throws Exception {\n\n\t\tthis.request.setContextPath(\"/myApp\");\n\t\tthis.request.setServletPath(\"/main\");\n\t\tthis.request.setPathInfo(\"/index.html\");\n\n\t\tString commandName = \"myCommand\";\n\t\tString action = \"/form.html\";\n\t\tString enctype = \"my/enctype\";\n\t\tString method = \"POST\";\n\t\tString onsubmit = \"onsubmit\";\n\t\tString onreset = \"onreset\";\n\n\t\tthis.tag.setCommandName(commandName);\n\t\tthis.tag.setServletRelativeAction(action);\n\t\tthis.tag.setMethod(method);\n\t\tthis.tag.setEnctype(enctype);\n\t\tthis.tag.setOnsubmit(onsubmit);\n\t\tthis.tag.setOnreset(onreset);\n\n\t\tint result = this.tag.doStartTag();\n\t\tassertEquals(Tag.EVAL_BODY_INCLUDE, result);\n\t\tassertEquals(\"Form attribute not exposed\", commandName,\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tresult = this.tag.doEndTag();\n\t\tassertEquals(Tag.EVAL_PAGE, result);\n\n\t\tthis.tag.doFinally();\n\t\tassertNull(\"Form attribute not cleared after tag ends\",\n\t\t\t\tgetPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\n\t\tString output = getOutput();\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\n\t\tassertContainsAttribute(output, \"action\", \"/myApp/main/form.html\");\n\t\tassertContainsAttribute(output, \"method\", method);\n\t\tassertContainsAttribute(output, \"enctype\", enctype);\n\t\tassertContainsAttribute(output, \"onsubmit\", onsubmit);\n\t\tassertContainsAttribute(output, \"onreset\", onreset);\n\t\tassertAttributeNotPresent(output, \"name\");\n\t}\n\n\tpublic void testWithNullResolvedCommand() throws Exception {\n\t\ttry {\n\t\t\ttag.setCommandName(null);\n\t\t\ttag.doStartTag();\n\t\t\tfail(\"Must not be able to have a command name that resolves to null\");\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\t// expected\n\t\t}\n\t}\n\n\t/*\n\t * See http://opensource.atlassian.com/projects/spring/browse/SPR-2645\n\t */\n\tpublic void testXSSScriptingExploitWhenActionIsResolvedFromQueryString() throws Exception {\n\t\tString xssQueryString = QUERY_STRING + \"&stuff=\\\"><script>alert('XSS!')</script>\";\n\t\trequest.setQueryString(xssQueryString);\n\t\ttag.doStartTag();\n\t\tassertEquals(\"<form id=\\\"command\\\" action=\\\"/my/form?foo=bar&amp;stuff=&quot;&gt;&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\\\" method=\\\"post\\\">\",\n\t\t\t\tgetOutput());\n\t}\n\n\tpublic void testGet() throws Exception {\n\t\tthis.tag.setMethod(\"get\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"get\");\n\t\tassertEquals(\"\", inputOutput);\n\t}\n\n\tpublic void testPost() throws Exception {\n\t\tthis.tag.setMethod(\"post\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertEquals(\"\", inputOutput);\n\t}\n\n\tpublic void testPut() throws Exception {\n\t\tthis.tag.setMethod(\"put\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"_method\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"put\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testDelete() throws Exception {\n\t\tthis.tag.setMethod(\"delete\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"_method\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"delete\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testCustomMethodParameter() throws Exception {\n\t\tthis.tag.setMethod(\"put\");\n\t\tthis.tag.setMethodParam(\"methodParameter\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\t\tString inputOutput = getInputTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"method\", \"post\");\n\t\tassertContainsAttribute(inputOutput, \"name\", \"methodParameter\");\n\t\tassertContainsAttribute(inputOutput, \"value\", \"put\");\n\t\tassertContainsAttribute(inputOutput, \"type\", \"hidden\");\n\t}\n\n\tpublic void testClearAttributesOnFinally() throws Exception {\n\t\tthis.tag.setModelAttribute(\"model\");\n\t\tgetPageContext().setAttribute(\"model\", \"foo bar\");\n\t\tassertNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t\tthis.tag.doStartTag();\n\t\tassertNotNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t\tthis.tag.doFinally();\n\t\tassertNull(getPageContext().getAttribute(FormTag.MODEL_ATTRIBUTE_VARIABLE_NAME, PageContext.REQUEST_SCOPE));\n\t}\n\n\tpublic void testRequestDataValueProcessorHooks() throws Exception {\n\t\tString action = \"/my/form?foo=bar\";\n\t\tRequestDataValueProcessor processor = getMockRequestDataValueProcessor();\n\t\tgiven(processor.processAction(this.request, action, \"post\")).willReturn(action);\n\t\tgiven(processor.getExtraHiddenFields(this.request)).willReturn(Collections.singletonMap(\"key\", \"value\"));\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\n\t\tassertEquals(\"<div>\\n<input type=\\\"hidden\\\" name=\\\"key\\\" value=\\\"value\\\" />\\n</div>\", getInputTag(output));\n\t\tassertFormTagOpened(output);\n\t\tassertFormTagClosed(output);\n\t}\n\n\tpublic void testDefaultActionEncoded() throws Exception {\n\n\t\tthis.request.setRequestURI(\"/a b c\");\n\t\trequest.setQueryString(\"\");\n\n\t\tthis.tag.doStartTag();\n\t\tthis.tag.doEndTag();\n\t\tthis.tag.doFinally();\n\n\t\tString output = getOutput();\n\t\tString formOutput = getFormTag(output);\n\n\t\tassertContainsAttribute(formOutput, \"action\", \"/a%20b%20c\");\n\t}\n\n\tprivate String getFormTag(String output) {\n\t\tint inputStart = output.indexOf(\"<\", 1);\n\t\tint inputEnd = output.lastIndexOf(\">\", output.length() - 2);\n\t\treturn output.substring(0, inputStart) + output.substring(inputEnd + 1);\n\t}\n\n\tprivate String getInputTag(String output) {\n\t\tint inputStart = output.indexOf(\"<\", 1);\n\t\tint inputEnd = output.lastIndexOf(\">\", output.length() - 2);\n\t\treturn output.substring(inputStart, inputEnd + 1);\n\t}\n\n\n\tprivate static void assertFormTagOpened(String output) {\n\t\tassertTrue(output.startsWith(\"<form \"));\n\t}\n\n\tprivate static void assertFormTagClosed(String output) {\n\t\tassertTrue(output.endsWith(\"</form>\"));\n\t}\n\n}\n"], "filenames": ["spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java", "spring-webmvc/src/test/java/org/springframework/web/servlet/tags/form/FormTagTests.java"], "buggy_code_start_loc": [2, 2], "buggy_code_end_loc": [444, 342], "fixing_code_start_loc": [2, 2], "fixing_code_end_loc": [454, 358], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via the requested URI in a default action.", "other": {"cve": {"id": "CVE-2014-1904", "sourceIdentifier": "cve@mitre.org", "published": "2014-03-20T16:55:12.683", "lastModified": "2019-03-27T18:57:49.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows remote attackers to inject arbitrary web script or HTML via the requested URI in a default action."}, {"lang": "es", "value": "Vulnerabilidad de XSS en web/servlet/tags/form/FormTag.java en Spring MVC en Spring Framework 3.0.0 anterior a 3.2.8 y 4.0.0 anterior a 4.0.2 permite a atacantes remotos inyectar script Web o HTML arbitrarios a trav\u00e9s de la URI solicitada en una acci\u00f3n por defecto."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pivotal_software:spring_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.2.8", "matchCriteriaId": "9D361F6B-E859-43CA-A2FE-A6D219DF4EAE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:pivotal_software:spring_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.0.2", "matchCriteriaId": "3E985939-0AF4-49EC-BDF6-621053694584"}]}]}], "references": [{"url": "http://docs.spring.io/spring/docs/3.2.8.RELEASE/changelog.txt", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2014-0400.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2014/Mar/101", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.gopivotal.com/security/cve-2014-1904", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/archive/1/531422/100/0/threaded", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://www.securityfocus.com/bid/66137", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/spring-projects/spring-framework/commit/741b4b229ae032bd17175b46f98673ce0bd2d485", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://jira.springsource.org/browse/SPR-11426", "source": "cve@mitre.org", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/spring-projects/spring-framework/commit/741b4b229ae032bd17175b46f98673ce0bd2d485"}}