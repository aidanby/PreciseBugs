{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <cstddef>\n#include <functional>\n#include <map>\n#include <mutex>\n#include <numeric>\n#include <unordered_map>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/lib/gtl/optional.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/thread_annotations.h\"\n\nnamespace tensorflow {\nnamespace {\n\n// Partial Ordering Comparator for Tensor keys containing scalar int64's\nstruct KeyTensorLess {\n  bool operator()(const Tensor& lhs, const Tensor& rhs) const {\n    return std::less<int64_t>{}(lhs.scalar<int64_t>()(),\n                                rhs.scalar<int64_t>()());\n  }\n};\n\n// Key Equality operator for Tensor keys containing scalar int64's\nstruct KeyTensorEqual {\n  bool operator()(const Tensor& lhs, const Tensor& rhs) const {\n    return std::equal_to<int64_t>{}(lhs.scalar<int64_t>()(),\n                                    rhs.scalar<int64_t>()());\n  }\n};\n\n// Hash for Tensor keys containing scalar int64's\nstruct KeyTensorHash {\n  std::size_t operator()(const Tensor& key) const {\n    return std::hash<int64_t>{}(key.scalar<int64_t>()());\n  }\n};\n\n// Primary template.\ntemplate <bool Ordered, typename Data>\nstruct MapTraits;\n\n// Partial specialization for ordered.\ntemplate <typename Data>\nstruct MapTraits<true, Data> {\n  using KeyType = Tensor;\n  using DataType = Data;\n  using MapType = std::map<KeyType, Data, KeyTensorLess>;\n};\n\n// Partial specialization for unordered.\ntemplate <typename Data>\nstruct MapTraits<false, Data> {\n  using KeyType = Tensor;\n  using DataType = Data;\n  using MapType =\n      std::unordered_map<KeyType, Data, KeyTensorHash, KeyTensorEqual>;\n};\n\n// Wrapper around map/unordered_map.\ntemplate <bool Ordered>\nclass StagingMap : public ResourceBase {\n public:\n  // Public typedefs\n  using Tuple = std::vector<Tensor>;\n  using OptionalTensor = gtl::optional<Tensor>;\n  using OptionalTuple = std::vector<OptionalTensor>;\n\n  using MapType = typename MapTraits<Ordered, OptionalTuple>::MapType;\n  using KeyType = typename MapTraits<Ordered, OptionalTuple>::KeyType;\n\n  using IncompleteType = typename MapTraits<false, OptionalTuple>::MapType;\n\n private:\n  // Private variables\n  DataTypeVector dtypes_ TF_GUARDED_BY(mu_);\n  std::size_t capacity_ TF_GUARDED_BY(mu_);\n  std::size_t memory_limit_ TF_GUARDED_BY(mu_);\n  std::size_t current_bytes_ TF_GUARDED_BY(mu_);\n  tensorflow::mutex mu_;\n  tensorflow::condition_variable not_empty_;\n  tensorflow::condition_variable full_;\n  IncompleteType incomplete_ TF_GUARDED_BY(mu_);\n  MapType map_ TF_GUARDED_BY(mu_);\n\n private:\n  // private methods\n\n  // If map is configured for bounded capacity, notify\n  // waiting inserters that space is now available\n  void notify_inserters_if_bounded() TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (has_capacity() || has_memory_limit()) {\n      // Notify all inserters. The removal of an element\n      // may make memory available for many inserters\n      // to insert new elements\n      full_.notify_all();\n    }\n  }\n\n  // Notify all removers waiting to extract values\n  // that data is now available\n  void notify_removers() {\n    // Notify all removers. This is because they are\n    // waiting for specific keys to appear in the map\n    // so we don't know which one to wake up.\n    not_empty_.notify_all();\n  }\n\n  bool has_capacity() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return capacity_ > 0;\n  }\n\n  bool has_memory_limit() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return memory_limit_ > 0;\n  }\n\n  bool would_exceed_memory_limit(std::size_t bytes) const\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return has_memory_limit() && bytes + current_bytes_ > memory_limit_;\n  }\n\n  bool is_capacity_full() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return has_capacity() && map_.size() >= capacity_;\n  }\n\n  // Get number of bytes in the tuple\n  std::size_t get_tuple_bytes(const Tuple& tuple) {\n    return std::accumulate(tuple.begin(), tuple.end(),\n                           static_cast<std::size_t>(0),\n                           [](const std::size_t& lhs, const Tensor& rhs) {\n                             return lhs + rhs.TotalBytes();\n                           });\n  }\n\n  // Get number of bytes in the incomplete tuple\n  std::size_t get_tuple_bytes(const OptionalTuple& tuple) {\n    return std::accumulate(\n        tuple.begin(), tuple.end(), static_cast<std::size_t>(0),\n        [](const std::size_t& lhs, const OptionalTensor& rhs) {\n          return (lhs + rhs.has_value()) ? rhs.value().TotalBytes() : 0;\n        });\n  }\n\n  // Check that the index is within bounds\n  Status check_index(const Tensor& key, std::size_t index)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (index >= dtypes_.size()) {\n      return Status(errors::InvalidArgument(\n          \"Index '\", index, \"' for key '\", key.scalar<int64_t>()(),\n          \"' was out of bounds '\", dtypes_.size(), \"'.\"));\n    }\n\n    return Status::OK();\n  }\n\n  Status copy_or_move_tensors(OptionalTuple* map_tuple, const Tensor& key,\n                              const Tensor& indices, Tuple* output,\n                              bool copy = false)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    auto findices = indices.flat<int>();\n\n    // Return values at specified indices\n    for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n      std::size_t index = findices(i);\n\n      TF_RETURN_IF_ERROR(check_index(key, index));\n\n      // Insist on a value present at the specified index\n      if (!(*map_tuple)[index].has_value()) {\n        return Status(errors::InvalidArgument(\n            \"Tensor at index '\", index, \"' for key '\", key.scalar<int64_t>()(),\n            \"' has already been removed.\"));\n      }\n\n      // Copy the contained tensor and\n      // remove from the OptionalTuple\n      output->push_back((*map_tuple)[index].value());\n\n      // Clear out the entry if we're not copying (moving)\n      if (!copy) {\n        (*map_tuple)[index].reset();\n      }\n    }\n\n    return Status::OK();\n  }\n\n  // Check that the optional value at the specified index\n  // is uninitialized\n  Status check_index_uninitialized(const Tensor& key, std::size_t index,\n                                   const OptionalTuple& tuple)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (tuple[index].has_value()) {\n      return errors::InvalidArgument(\"The tensor for index '\", index,\n                                     \"' for key '\", key.scalar<int64_t>()(),\n                                     \"' was already initialized '\",\n                                     dtypes_.size(), \"'.\");\n    }\n\n    return Status::OK();\n  }\n\n  // Check that the indices are strictly ordered\n  Status check_index_ordering(const Tensor& indices) {\n    if (indices.NumElements() == 0) {\n      return errors::InvalidArgument(\"Indices are empty\");\n    }\n\n    auto findices = indices.flat<int>();\n\n    for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {\n      if (findices(i) < findices(i + 1)) {\n        continue;\n      }\n\n      return errors::InvalidArgument(\"Indices are not strictly ordered\");\n    }\n\n    return Status::OK();\n  }\n\n  // Check bytes are within memory limits memory limits\n  Status check_memory_limit(std::size_t bytes)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (has_memory_limit() && bytes > memory_limit_) {\n      return errors::ResourceExhausted(\n          \"Attempted to insert tensors with combined size of '\", bytes,\n          \"' bytes into Staging Area with a memory limit of '\", memory_limit_,\n          \"'.\");\n    }\n\n    return Status::OK();\n  }\n\n  // Insert incomplete data into the Barrier\n  Status put_incomplete(const KeyType& key, const Tensor& indices,\n                        OptionalTuple* tuple, tensorflow::mutex_lock* lock)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    auto findices = indices.flat<int>();\n\n    // Search for the key in our incomplete set\n    auto it = incomplete_.find(key);\n\n    // Check that the tuple fits within the memory limit\n    std::size_t tuple_bytes = get_tuple_bytes(*tuple);\n    TF_RETURN_IF_ERROR(check_memory_limit(tuple_bytes));\n\n    // Wait until we don't exceed the memory limit\n    while (would_exceed_memory_limit(tuple_bytes)) {\n      full_.wait(*lock);\n    }\n\n    // This key isn't present in the incomplete set\n    // Create OptionalTuple and insert\n    if (it == incomplete_.end()) {\n      OptionalTuple empty(dtypes_.size());\n\n      // Initialize empty tuple with given dta\n      for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n        std::size_t index = findices(i);\n        TF_RETURN_IF_ERROR(check_index(key, index));\n\n        // Assign tuple at this index\n        empty[index] = std::move((*tuple)[i]);\n      }\n\n      // Insert into incomplete map\n      incomplete_.insert({key, std::move(empty)});\n\n      // Increment size\n      current_bytes_ += tuple_bytes;\n    }\n    // Found an entry in the incomplete index\n    // Update with given data and insert complete entries\n    // into the main map\n    else {\n      // Reference existing incomplete tuple\n      OptionalTuple& present = it->second;\n\n      // Assign given data\n      for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n        std::size_t index = findices(i);\n        TF_RETURN_IF_ERROR(check_index(key, index));\n        TF_RETURN_IF_ERROR(check_index_uninitialized(key, index, present));\n\n        // Assign tuple at this index\n        present[index] = std::move((*tuple)[i]);\n      }\n\n      // Increment size\n      current_bytes_ += tuple_bytes;\n\n      // Do we have values at all tuple elements?\n      bool complete =\n          std::all_of(present.begin(), present.end(),\n                      [](const OptionalTensor& v) { return v.has_value(); });\n\n      // If so, put the tuple in the actual map\n      if (complete) {\n        OptionalTuple insert_tuple = std::move(it->second);\n\n        // Remove from incomplete\n        incomplete_.erase(it);\n\n        TF_RETURN_IF_ERROR(put_complete(key, &insert_tuple));\n      }\n    }\n\n    return Status::OK();\n  }\n\n  // Does the insertion into the actual staging area\n  Status put_complete(const KeyType& key, OptionalTuple* tuple)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    // Insert key and tuples into the map\n    map_.insert({key, std::move(*tuple)});\n\n    notify_removers();\n\n    return Status::OK();\n  }\n\n public:\n  // public methods\n  explicit StagingMap(const DataTypeVector& dtypes, std::size_t capacity,\n                      std::size_t memory_limit)\n      : dtypes_(dtypes),\n        capacity_(capacity),\n        memory_limit_(memory_limit),\n        current_bytes_(0) {}\n\n  Status put(KeyType* key, const Tensor* indices, OptionalTuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    // Handle incomplete inserts\n    if (indices->NumElements() != dtypes_.size()) {\n      return put_incomplete(*key, *indices, tuple, &lock);\n    }\n\n    std::size_t tuple_bytes = get_tuple_bytes(*tuple);\n    // Check that tuple_bytes fits within the memory limit\n    TF_RETURN_IF_ERROR(check_memory_limit(tuple_bytes));\n\n    // Wait until there's space for insertion.\n    while (would_exceed_memory_limit(tuple_bytes) || is_capacity_full()) {\n      full_.wait(lock);\n    }\n\n    // Do the put operation\n    TF_RETURN_IF_ERROR(put_complete(*key, tuple));\n\n    // Update the current size\n    current_bytes_ += tuple_bytes;\n\n    return Status::OK();\n  }\n\n  Status get(const KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    typename MapType::iterator it;\n\n    // Wait until the element with the requested key is present\n    while ((it = map_.find(*key)) == map_.end()) {\n      not_empty_.wait(lock);\n    }\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple, true));\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    return Status::OK();\n  }\n\n  Status pop(const KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    typename MapType::iterator it;\n\n    // Wait until the element with the requested key is present\n    while ((it = map_.find(*key)) == map_.end()) {\n      not_empty_.wait(lock);\n    }\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple));\n\n    // Remove entry if all the values have been consumed\n    if (!std::any_of(\n            it->second.begin(), it->second.end(),\n            [](const OptionalTensor& tensor) { return tensor.has_value(); })) {\n      map_.erase(it);\n    }\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  Status popitem(KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    // Wait until map is not empty\n    while (this->map_.empty()) {\n      not_empty_.wait(lock);\n    }\n\n    // Move from the first element and erase it\n\n    auto it = map_.begin();\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple));\n\n    *key = it->first;\n\n    // Remove entry if all the values have been consumed\n    if (!std::any_of(\n            it->second.begin(), it->second.end(),\n            [](const OptionalTensor& tensor) { return tensor.has_value(); })) {\n      map_.erase(it);\n    }\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  Status clear() {\n    tensorflow::mutex_lock lock(mu_);\n    map_.clear();\n    incomplete_.clear();\n    current_bytes_ = 0;\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  std::size_t incomplete_size() {\n    tensorflow::mutex_lock lock(mu_);\n    return incomplete_.size();\n  }\n\n  std::size_t size() {\n    tensorflow::mutex_lock lock(mu_);\n    return map_.size();\n  }\n\n  string DebugString() const override { return \"StagingMap\"; }\n};\n\ntemplate <bool Ordered>\nStatus GetStagingMap(OpKernelContext* ctx, const NodeDef& ndef,\n                     StagingMap<Ordered>** map) {\n  auto rm = ctx->resource_manager();\n  ContainerInfo cinfo;\n\n  // Lambda for creating the Staging Area\n  auto create_fn = [&ndef](StagingMap<Ordered>** ret) -> Status {\n    DataTypeVector dtypes;\n    int64_t capacity;\n    int64_t memory_limit;\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"dtypes\", &dtypes));\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"capacity\", &capacity));\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"memory_limit\", &memory_limit));\n    *ret = new StagingMap<Ordered>(dtypes, capacity, memory_limit);\n    return Status::OK();\n  };\n\n  TF_RETURN_IF_ERROR(cinfo.Init(rm, ndef, true /* use name() */));\n  TF_RETURN_IF_ERROR(rm->LookupOrCreate<StagingMap<Ordered>>(\n      cinfo.container(), cinfo.name(), map, create_fn));\n  return Status::OK();\n}\n\ntemplate <bool Ordered>\nclass MapStageOp : public OpKernel {\n public:\n  explicit MapStageOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::OptionalTuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n    OpInputList values_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\n    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\n                errors::InvalidArgument(\"key must not be empty\"));\n\n    // Create copy for insertion into Staging Area\n    Tensor key(*key_tensor);\n\n    // Create the tuple to store\n    for (std::size_t i = 0; i < values_tensor.size(); ++i) {\n      tuple.push_back(values_tensor[i]);\n    }\n\n    // Store the tuple in the map\n    OP_REQUIRES_OK(ctx, map->put(&key, indices_tensor, &tuple));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapStage\").Device(DEVICE_CPU), MapStageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapStage\").Device(DEVICE_CPU),\n                        MapStageOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapStage\").HostMemory(\"key\").HostMemory(\"indices\").Device(DEVICE_GPU),\n    MapStageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapStage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapStageOp<true>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\ntemplate <bool Ordered>\nclass MapUnstageOp : public OpKernel {\n public:\n  explicit MapUnstageOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->pop(key_tensor, indices_tensor, &tuple));\n\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstage\").Device(DEVICE_CPU),\n                        MapUnstageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstage\").Device(DEVICE_CPU),\n                        MapUnstageOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapPeekOp : public OpKernel {\n public:\n  explicit MapPeekOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->get(key_tensor, indices_tensor, &tuple));\n\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapPeek\").Device(DEVICE_CPU), MapPeekOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapPeek\").Device(DEVICE_CPU),\n                        MapPeekOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapPeek\").HostMemory(\"key\").HostMemory(\"indices\").Device(DEVICE_GPU),\n    MapPeekOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapPeek\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapPeekOp<true>);\n#endif\n\n\ntemplate <bool Ordered>\nclass MapUnstageNoKeyOp : public OpKernel {\n public:\n  explicit MapUnstageNoKeyOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Pop a random (key, value) off the map\n    typename StagingMap<Ordered>::KeyType key;\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->popitem(&key, indices_tensor, &tuple));\n\n    // Allocate a key tensor and assign the key as the first output\n    ctx->set_output(0, key);\n\n    // Set the rest of the outputs to the tuple Tensors\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i + 1, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstageNoKey\").Device(DEVICE_CPU),\n                        MapUnstageNoKeyOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstageNoKey\").Device(DEVICE_CPU),\n                        MapUnstageNoKeyOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstageNoKey\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageNoKeyOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstageNoKey\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageNoKeyOp<true>);\n#endif\n\n\ntemplate <bool Ordered>\nclass MapSizeOp : public OpKernel {\n public:\n  explicit MapSizeOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Allocate size output tensor\n    Tensor* size = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &size));\n\n    // Set it to the actual size\n    size->scalar<int32>().setConstant(map->size());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapSize\").Device(DEVICE_CPU), MapSizeOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapSize\").Device(DEVICE_CPU),\n                        MapSizeOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n                        MapSizeOp<false>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"OrderedMapSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapSizeOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapIncompleteSizeOp : public OpKernel {\n public:\n  explicit MapIncompleteSizeOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Allocate size output tensor\n    Tensor* size = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &size));\n\n    // Set it to the actual size\n    size->scalar<int32>().setConstant(map->incomplete_size());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapIncompleteSize\").Device(DEVICE_CPU),\n                        MapIncompleteSizeOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapIncompleteSize\").Device(DEVICE_CPU),\n                        MapIncompleteSizeOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapIncompleteSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapIncompleteSizeOp<false>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"OrderedMapIncompleteSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapIncompleteSizeOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapClearOp : public OpKernel {\n public:\n  explicit MapClearOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    OP_REQUIRES_OK(ctx, map->clear());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapClear\").Device(DEVICE_CPU), MapClearOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapClear\").Device(DEVICE_CPU),\n                        MapClearOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapClear\").Device(DEVICE_GPU), MapClearOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapClear\").Device(DEVICE_GPU),\n                        MapClearOp<true>);\n#endif\n\n}  // namespace\n}  // namespace tensorflow\n", "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import data_flow_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\nTIMEOUT = 1\n\n\nclass MapStageTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testSimple(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32])\n        stage = stager.put(pi, [v], [0])\n        k, y = stager.get(gi)\n        y = math_ops.reduce_max(math_ops.matmul(y, y))\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(4 * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  @test_util.run_deprecated_v1\n  def testMultiple(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32])\n        stage = stager.put(pi, [x, v], [0, 1])\n        k, (z, y) = stager.get(gi)\n        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(\n            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  @test_util.run_deprecated_v1\n  def testDictionary(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32],\n            shapes=[[], [128, 128]],\n            names=['x', 'v'])\n        stage = stager.put(pi, {'x': x, 'v': v})\n        key, ret = stager.get(gi)\n        z = ret['x']\n        y = ret['v']\n        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(\n            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  def testColocation(self):\n    gpu_dev = test.gpu_device_name()\n\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(gpu_dev):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32])\n        y = stager.put(1, [v], [0])\n        expected_name = gpu_dev if 'gpu' not in gpu_dev else '/device:GPU:0'\n        self.assertEqual(y.device, expected_name)\n      with ops.device('/cpu:0'):\n        _, x = stager.get(1)\n        y = stager.peek(1)[0]\n        _, z = stager.get()\n        self.assertEqual(x[0].device, '/device:CPU:0')\n        self.assertEqual(y.device, '/device:CPU:0')\n        self.assertEqual(z[0].device, '/device:CPU:0')\n\n    G.finalize()\n\n  @test_util.run_deprecated_v1\n  def testPeek(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        p = array_ops.placeholder(dtypes.int32, name='p')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [\n                dtypes.int32,\n            ], shapes=[[]])\n        stage = stager.put(pi, [x], [0])\n        peek = stager.peek(gi)\n        size = stager.size()\n\n    G.finalize()\n\n    n = 10\n\n    with self.session(graph=G) as sess:\n      for i in range(n):\n        sess.run(stage, feed_dict={x: i, pi: i})\n\n      for i in range(n):\n        self.assertTrue(sess.run(peek, feed_dict={gi: i})[0] == i)\n\n      self.assertTrue(sess.run(size) == 10)\n\n  @test_util.run_deprecated_v1\n  def testSizeAndClear(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32, name='x')\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32],\n            shapes=[[], [128, 128]],\n            names=['x', 'v'])\n        stage = stager.put(pi, {'x': x, 'v': v})\n        size = stager.size()\n        clear = stager.clear()\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 3})\n      self.assertEqual(sess.run(size), 1)\n      sess.run(stage, feed_dict={x: -1, pi: 1})\n      self.assertEqual(sess.run(size), 2)\n      sess.run(clear)\n      self.assertEqual(sess.run(size), 0)\n\n  @test_util.run_deprecated_v1\n  def testCapacity(self):\n    capacity = 3\n\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [\n                dtypes.int32,\n            ], capacity=capacity, shapes=[[]])\n\n      stage = stager.put(pi, [x], [0])\n      get = stager.get()\n      size = stager.size()\n\n    G.finalize()\n\n    from six.moves import queue as Queue\n    import threading\n\n    queue = Queue.Queue()\n    n = 8\n\n    with self.session(graph=G) as sess:\n      # Stage data in a separate thread which will block\n      # when it hits the staging area's capacity and thus\n      # not fill the queue with n tokens\n      def thread_run():\n        for i in range(n):\n          sess.run(stage, feed_dict={x: i, pi: i})\n          queue.put(0)\n\n      t = threading.Thread(target=thread_run)\n      t.daemon = True\n      t.start()\n\n      # Get tokens from the queue until a timeout occurs\n      try:\n        for i in range(n):\n          queue.get(timeout=TIMEOUT)\n      except Queue.Empty:\n        pass\n\n      # Should've timed out on the iteration 'capacity'\n      if not i == capacity:\n        self.fail(\"Expected to timeout on iteration '{}' \"\n                  \"but instead timed out on iteration '{}' \"\n                  \"Staging Area size is '{}' and configured \"\n                  \"capacity is '{}'.\".format(capacity, i, sess.run(size),\n                                             capacity))\n\n      # Should have capacity elements in the staging area\n      self.assertTrue(sess.run(size) == capacity)\n\n      # Clear the staging area completely\n      for i in range(n):\n        sess.run(get)\n\n      self.assertTrue(sess.run(size) == 0)\n\n  @test_util.run_deprecated_v1\n  def testMemoryLimit(self):\n    memory_limit = 512 * 1024  # 512K\n    chunk = 200 * 1024  # 256K\n    capacity = memory_limit // chunk\n\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.uint8, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.uint8], memory_limit=memory_limit, shapes=[[]])\n        stage = stager.put(pi, [x], [0])\n        get = stager.get()\n        size = stager.size()\n\n    G.finalize()\n\n    from six.moves import queue as Queue\n    import threading\n    import numpy as np\n\n    queue = Queue.Queue()\n    n = 8\n\n    with self.session(graph=G) as sess:\n      # Stage data in a separate thread which will block\n      # when it hits the staging area's capacity and thus\n      # not fill the queue with n tokens\n      def thread_run():\n        for i in range(n):\n          data = np.full(chunk, i, dtype=np.uint8)\n          sess.run(stage, feed_dict={x: data, pi: i})\n          queue.put(0)\n\n      t = threading.Thread(target=thread_run)\n      t.daemon = True\n      t.start()\n\n      # Get tokens from the queue until a timeout occurs\n      try:\n        for i in range(n):\n          queue.get(timeout=TIMEOUT)\n      except Queue.Empty:\n        pass\n\n      # Should've timed out on the iteration 'capacity'\n      if not i == capacity:\n        self.fail(\"Expected to timeout on iteration '{}' \"\n                  \"but instead timed out on iteration '{}' \"\n                  \"Staging Area size is '{}' and configured \"\n                  \"capacity is '{}'.\".format(capacity, i, sess.run(size),\n                                             capacity))\n\n      # Should have capacity elements in the staging area\n      self.assertTrue(sess.run(size) == capacity)\n\n      # Clear the staging area completely\n      for i in range(n):\n        sess.run(get)\n\n      self.assertTrue(sess.run(size) == 0)\n\n  @test_util.run_deprecated_v1\n  def testOrdering(self):\n    import six\n    import random\n\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [\n                dtypes.int32,\n            ], shapes=[[]], ordered=True)\n        stage = stager.put(pi, [x], [0])\n        get = stager.get()\n        size = stager.size()\n\n    G.finalize()\n\n    n = 10\n\n    with self.session(graph=G) as sess:\n      # Keys n-1..0\n      keys = list(reversed(six.moves.range(n)))\n\n      for i in keys:\n        sess.run(stage, feed_dict={pi: i, x: i})\n\n      self.assertTrue(sess.run(size) == n)\n\n      # Check that key, values come out in ascending order\n      for i, k in enumerate(reversed(keys)):\n        get_key, values = sess.run(get)\n        self.assertTrue(i == k == get_key == values)\n\n      self.assertTrue(sess.run(size) == 0)\n\n  @test_util.run_deprecated_v1\n  def testPartialDictInsert(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test barrier with dictionary\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32],\n            names=['x', 'v', 'f'])\n        stage_xf = stager.put(pi, {'x': x, 'f': f})\n        stage_v = stager.put(pi, {'v': v})\n        key, ret = stager.get(gi)\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      # 0 complete and incomplete entries\n      self.assertTrue(sess.run([size, isize]) == [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 1])\n      # We can now obtain tuple associated with key 0\n      self.assertTrue(\n          sess.run([key, ret], feed_dict={\n              gi: 0\n          }) == [0, {\n              'x': 1,\n              'f': 2,\n              'v': 1\n          }])\n\n      # 0 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 3})\n      # We can now obtain tuple associated with key 1\n      self.assertTrue(\n          sess.run([key, ret], feed_dict={\n              gi: 1\n          }) == [1, {\n              'x': 1,\n              'f': 2,\n              'v': 3\n          }])\n\n  @test_util.run_deprecated_v1\n  def testPartialIndexInsert(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32])\n        stage_xf = stager.put(pi, [x, f], [0, 2])\n        stage_v = stager.put(pi, [v], [1])\n        key, ret = stager.get(gi)\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      # 0 complete and incomplete entries\n      self.assertTrue(sess.run([size, isize]) == [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 1])\n      # We can now obtain tuple associated with key 0\n      self.assertTrue(sess.run([key, ret], feed_dict={gi: 0}) == [0, [1, 1, 2]])\n\n      # 0 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 3})\n      # We can now obtain tuple associated with key 1\n      self.assertTrue(sess.run([key, ret], feed_dict={gi: 1}) == [1, [1, 3, 2]])\n\n  @test_util.run_deprecated_v1\n  def testPartialDictGetsAndPeeks(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        pei = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test barrier with dictionary\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32],\n            names=['x', 'v', 'f'])\n        stage_xf = stager.put(pi, {'x': x, 'f': f})\n        stage_v = stager.put(pi, {'v': v})\n        peek_xf = stager.peek(pei, ['x', 'f'])\n        peek_v = stager.peek(pei, ['v'])\n        key_xf, get_xf = stager.get(gi, ['x', 'f'])\n        key_v, get_v = stager.get(gi, ['v'])\n        pop_key_xf, pop_xf = stager.get(indices=['x', 'f'])\n        pop_key_v, pop_v = stager.get(pi, ['v'])\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      # 0 complete and incomplete entries\n      self.assertTrue(sess.run([size, isize]) == [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertTrue(sess.run([size, isize]) == [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 1])\n\n      # We can now peek at 'x' and 'f' values associated with key 0\n      self.assertTrue(sess.run(peek_xf, feed_dict={pei: 0}) == {'x': 1, 'f': 2})\n      # Peek at 'v' value associated with key 0\n      self.assertTrue(sess.run(peek_v, feed_dict={pei: 0}) == {'v': 1})\n      # 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 1])\n\n      # We can now obtain 'x' and 'f' values associated with key 0\n      self.assertTrue(\n          sess.run([key_xf, get_xf], feed_dict={\n              gi: 0\n          }) == [0, {\n              'x': 1,\n              'f': 2\n          }])\n      # Still have 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 1])\n\n      # We can no longer get 'x' and 'f' from key 0\n      with self.assertRaises(errors.InvalidArgumentError) as cm:\n        sess.run([key_xf, get_xf], feed_dict={gi: 0})\n\n      exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')\n\n      self.assertTrue(exc_str in cm.exception.message)\n\n      # Obtain 'v' value associated with key 0\n      self.assertTrue(\n          sess.run([key_v, get_v], feed_dict={\n              gi: 0\n          }) == [0, {\n              'v': 1\n          }])\n      # 0 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [0, 1])\n\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 0])\n\n      # Pop without key to obtain 'x' and 'f' values associated with key 1\n      self.assertTrue(sess.run([pop_key_xf, pop_xf]) == [1, {'x': 1, 'f': 2}])\n      # still 1 complete and 1 incomplete entry\n      self.assertTrue(sess.run([size, isize]) == [1, 0])\n      # We can now obtain 'x' and 'f' values associated with key 1\n      self.assertTrue(\n          sess.run([pop_key_v, pop_v], feed_dict={\n              pi: 1\n          }) == [1, {\n              'v': 1\n          }])\n      # Nothing is left\n      self.assertTrue(sess.run([size, isize]) == [0, 0])\n\n  @test_util.run_deprecated_v1\n  def testPartialIndexGets(self):\n    with ops.Graph().as_default() as G:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        pei = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test again with partial index gets\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32])\n        stage_xvf = stager.put(pi, [x, v, f], [0, 1, 2])\n        key_xf, get_xf = stager.get(gi, [0, 2])\n        key_v, get_v = stager.get(gi, [1])\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    G.finalize()\n\n    with self.session(graph=G) as sess:\n      # Stage complete tuple\n      sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})\n\n      self.assertTrue(sess.run([size, isize]) == [1, 0])\n\n      # Partial get using indices\n      self.assertTrue(\n          sess.run([key_xf, get_xf], feed_dict={\n              gi: 0\n          }) == [0, [1, 2]])\n\n      # Still some of key 0 left\n      self.assertTrue(sess.run([size, isize]) == [1, 0])\n\n      # Partial get of remaining index\n      self.assertTrue(sess.run([key_v, get_v], feed_dict={gi: 0}) == [0, [3]])\n\n      # All gone\n      self.assertTrue(sess.run([size, isize]) == [0, 0])\n\n\nif __name__ == '__main__':\n  test.main()\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <cstddef>\n#include <functional>\n#include <map>\n#include <mutex>\n#include <numeric>\n#include <unordered_map>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/resource_mgr.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/lib/gtl/optional.h\"\n#include \"tensorflow/core/lib/strings/strcat.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/platform/mutex.h\"\n#include \"tensorflow/core/platform/thread_annotations.h\"\n\nnamespace tensorflow {\nnamespace {\n\n// Partial Ordering Comparator for Tensor keys containing scalar int64's\nstruct KeyTensorLess {\n  bool operator()(const Tensor& lhs, const Tensor& rhs) const {\n    return std::less<int64_t>{}(lhs.scalar<int64_t>()(),\n                                rhs.scalar<int64_t>()());\n  }\n};\n\n// Key Equality operator for Tensor keys containing scalar int64's\nstruct KeyTensorEqual {\n  bool operator()(const Tensor& lhs, const Tensor& rhs) const {\n    return std::equal_to<int64_t>{}(lhs.scalar<int64_t>()(),\n                                    rhs.scalar<int64_t>()());\n  }\n};\n\n// Hash for Tensor keys containing scalar int64's\nstruct KeyTensorHash {\n  std::size_t operator()(const Tensor& key) const {\n    return std::hash<int64_t>{}(key.scalar<int64_t>()());\n  }\n};\n\n// Primary template.\ntemplate <bool Ordered, typename Data>\nstruct MapTraits;\n\n// Partial specialization for ordered.\ntemplate <typename Data>\nstruct MapTraits<true, Data> {\n  using KeyType = Tensor;\n  using DataType = Data;\n  using MapType = std::map<KeyType, Data, KeyTensorLess>;\n};\n\n// Partial specialization for unordered.\ntemplate <typename Data>\nstruct MapTraits<false, Data> {\n  using KeyType = Tensor;\n  using DataType = Data;\n  using MapType =\n      std::unordered_map<KeyType, Data, KeyTensorHash, KeyTensorEqual>;\n};\n\n// Wrapper around map/unordered_map.\ntemplate <bool Ordered>\nclass StagingMap : public ResourceBase {\n public:\n  // Public typedefs\n  using Tuple = std::vector<Tensor>;\n  using OptionalTensor = gtl::optional<Tensor>;\n  using OptionalTuple = std::vector<OptionalTensor>;\n\n  using MapType = typename MapTraits<Ordered, OptionalTuple>::MapType;\n  using KeyType = typename MapTraits<Ordered, OptionalTuple>::KeyType;\n\n  using IncompleteType = typename MapTraits<false, OptionalTuple>::MapType;\n\n private:\n  // Private variables\n  DataTypeVector dtypes_ TF_GUARDED_BY(mu_);\n  std::size_t capacity_ TF_GUARDED_BY(mu_);\n  std::size_t memory_limit_ TF_GUARDED_BY(mu_);\n  std::size_t current_bytes_ TF_GUARDED_BY(mu_);\n  tensorflow::mutex mu_;\n  tensorflow::condition_variable not_empty_;\n  tensorflow::condition_variable full_;\n  IncompleteType incomplete_ TF_GUARDED_BY(mu_);\n  MapType map_ TF_GUARDED_BY(mu_);\n\n private:\n  // private methods\n\n  // If map is configured for bounded capacity, notify\n  // waiting inserters that space is now available\n  void notify_inserters_if_bounded() TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (has_capacity() || has_memory_limit()) {\n      // Notify all inserters. The removal of an element\n      // may make memory available for many inserters\n      // to insert new elements\n      full_.notify_all();\n    }\n  }\n\n  // Notify all removers waiting to extract values\n  // that data is now available\n  void notify_removers() {\n    // Notify all removers. This is because they are\n    // waiting for specific keys to appear in the map\n    // so we don't know which one to wake up.\n    not_empty_.notify_all();\n  }\n\n  bool has_capacity() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return capacity_ > 0;\n  }\n\n  bool has_memory_limit() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return memory_limit_ > 0;\n  }\n\n  bool would_exceed_memory_limit(std::size_t bytes) const\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return has_memory_limit() && bytes + current_bytes_ > memory_limit_;\n  }\n\n  bool is_capacity_full() const TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    return has_capacity() && map_.size() >= capacity_;\n  }\n\n  // Get number of bytes in the tuple\n  std::size_t get_tuple_bytes(const Tuple& tuple) {\n    return std::accumulate(tuple.begin(), tuple.end(),\n                           static_cast<std::size_t>(0),\n                           [](const std::size_t& lhs, const Tensor& rhs) {\n                             return lhs + rhs.TotalBytes();\n                           });\n  }\n\n  // Get number of bytes in the incomplete tuple\n  std::size_t get_tuple_bytes(const OptionalTuple& tuple) {\n    return std::accumulate(\n        tuple.begin(), tuple.end(), static_cast<std::size_t>(0),\n        [](const std::size_t& lhs, const OptionalTensor& rhs) {\n          return (lhs + rhs.has_value()) ? rhs.value().TotalBytes() : 0;\n        });\n  }\n\n  // Check that the index is within bounds\n  Status check_index(const Tensor& key, std::size_t index)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (index >= dtypes_.size()) {\n      return Status(errors::InvalidArgument(\n          \"Index '\", index, \"' for key '\", key.scalar<int64_t>()(),\n          \"' was out of bounds '\", dtypes_.size(), \"'.\"));\n    }\n\n    return Status::OK();\n  }\n\n  Status copy_or_move_tensors(OptionalTuple* map_tuple, const Tensor& key,\n                              const Tensor& indices, Tuple* output,\n                              bool copy = false)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    auto findices = indices.flat<int>();\n\n    // Return values at specified indices\n    for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n      std::size_t index = findices(i);\n\n      TF_RETURN_IF_ERROR(check_index(key, index));\n\n      // Insist on a value present at the specified index\n      if (!(*map_tuple)[index].has_value()) {\n        return Status(errors::InvalidArgument(\n            \"Tensor at index '\", index, \"' for key '\", key.scalar<int64_t>()(),\n            \"' has already been removed.\"));\n      }\n\n      // Copy the contained tensor and\n      // remove from the OptionalTuple\n      output->push_back((*map_tuple)[index].value());\n\n      // Clear out the entry if we're not copying (moving)\n      if (!copy) {\n        (*map_tuple)[index].reset();\n      }\n    }\n\n    return Status::OK();\n  }\n\n  // Check that the optional value at the specified index\n  // is uninitialized\n  Status check_index_uninitialized(const Tensor& key, std::size_t index,\n                                   const OptionalTuple& tuple)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (tuple[index].has_value()) {\n      return errors::InvalidArgument(\"The tensor for index '\", index,\n                                     \"' for key '\", key.scalar<int64_t>()(),\n                                     \"' was already initialized '\",\n                                     dtypes_.size(), \"'.\");\n    }\n\n    return Status::OK();\n  }\n\n  // Check that the indices are strictly ordered\n  Status check_index_ordering(const Tensor& indices) {\n    if (indices.NumElements() == 0) {\n      return errors::InvalidArgument(\"Indices are empty\");\n    }\n\n    auto findices = indices.flat<int>();\n\n    for (std::size_t i = 0; i < findices.dimension(0) - 1; ++i) {\n      if (findices(i) < findices(i + 1)) {\n        continue;\n      }\n\n      return errors::InvalidArgument(\"Indices are not strictly ordered\");\n    }\n\n    return Status::OK();\n  }\n\n  // Check bytes are within memory limits memory limits\n  Status check_memory_limit(std::size_t bytes)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    if (has_memory_limit() && bytes > memory_limit_) {\n      return errors::ResourceExhausted(\n          \"Attempted to insert tensors with combined size of '\", bytes,\n          \"' bytes into Staging Area with a memory limit of '\", memory_limit_,\n          \"'.\");\n    }\n\n    return Status::OK();\n  }\n\n  // Insert incomplete data into the Barrier\n  Status put_incomplete(const KeyType& key, const Tensor& indices,\n                        OptionalTuple* tuple, tensorflow::mutex_lock* lock)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    auto findices = indices.flat<int>();\n\n    // Search for the key in our incomplete set\n    auto it = incomplete_.find(key);\n\n    // Check that the tuple fits within the memory limit\n    std::size_t tuple_bytes = get_tuple_bytes(*tuple);\n    TF_RETURN_IF_ERROR(check_memory_limit(tuple_bytes));\n\n    // Wait until we don't exceed the memory limit\n    while (would_exceed_memory_limit(tuple_bytes)) {\n      full_.wait(*lock);\n    }\n\n    // This key isn't present in the incomplete set\n    // Create OptionalTuple and insert\n    if (it == incomplete_.end()) {\n      OptionalTuple empty(dtypes_.size());\n\n      // Initialize empty tuple with given dta\n      for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n        std::size_t index = findices(i);\n        TF_RETURN_IF_ERROR(check_index(key, index));\n\n        // Assign tuple at this index\n        empty[index] = std::move((*tuple)[i]);\n      }\n\n      // Insert into incomplete map\n      incomplete_.insert({key, std::move(empty)});\n\n      // Increment size\n      current_bytes_ += tuple_bytes;\n    }\n    // Found an entry in the incomplete index\n    // Update with given data and insert complete entries\n    // into the main map\n    else {\n      // Reference existing incomplete tuple\n      OptionalTuple& present = it->second;\n\n      // Assign given data\n      for (std::size_t i = 0; i < findices.dimension(0); ++i) {\n        std::size_t index = findices(i);\n        TF_RETURN_IF_ERROR(check_index(key, index));\n        TF_RETURN_IF_ERROR(check_index_uninitialized(key, index, present));\n\n        // Assign tuple at this index\n        present[index] = std::move((*tuple)[i]);\n      }\n\n      // Increment size\n      current_bytes_ += tuple_bytes;\n\n      // Do we have values at all tuple elements?\n      bool complete =\n          std::all_of(present.begin(), present.end(),\n                      [](const OptionalTensor& v) { return v.has_value(); });\n\n      // If so, put the tuple in the actual map\n      if (complete) {\n        OptionalTuple insert_tuple = std::move(it->second);\n\n        // Remove from incomplete\n        incomplete_.erase(it);\n\n        TF_RETURN_IF_ERROR(put_complete(key, &insert_tuple));\n      }\n    }\n\n    return Status::OK();\n  }\n\n  // Does the insertion into the actual staging area\n  Status put_complete(const KeyType& key, OptionalTuple* tuple)\n      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    // Insert key and tuples into the map\n    map_.insert({key, std::move(*tuple)});\n\n    notify_removers();\n\n    return Status::OK();\n  }\n\n public:\n  // public methods\n  explicit StagingMap(const DataTypeVector& dtypes, std::size_t capacity,\n                      std::size_t memory_limit)\n      : dtypes_(dtypes),\n        capacity_(capacity),\n        memory_limit_(memory_limit),\n        current_bytes_(0) {}\n\n  Status put(KeyType* key, const Tensor* indices, OptionalTuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    // Handle incomplete inserts\n    if (indices->NumElements() != dtypes_.size()) {\n      return put_incomplete(*key, *indices, tuple, &lock);\n    }\n\n    std::size_t tuple_bytes = get_tuple_bytes(*tuple);\n    // Check that tuple_bytes fits within the memory limit\n    TF_RETURN_IF_ERROR(check_memory_limit(tuple_bytes));\n\n    // Wait until there's space for insertion.\n    while (would_exceed_memory_limit(tuple_bytes) || is_capacity_full()) {\n      full_.wait(lock);\n    }\n\n    // Do the put operation\n    TF_RETURN_IF_ERROR(put_complete(*key, tuple));\n\n    // Update the current size\n    current_bytes_ += tuple_bytes;\n\n    return Status::OK();\n  }\n\n  Status get(const KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    typename MapType::iterator it;\n\n    // Wait until the element with the requested key is present\n    while ((it = map_.find(*key)) == map_.end()) {\n      not_empty_.wait(lock);\n    }\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple, true));\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    return Status::OK();\n  }\n\n  Status pop(const KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    typename MapType::iterator it;\n\n    // Wait until the element with the requested key is present\n    while ((it = map_.find(*key)) == map_.end()) {\n      not_empty_.wait(lock);\n    }\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple));\n\n    // Remove entry if all the values have been consumed\n    if (!std::any_of(\n            it->second.begin(), it->second.end(),\n            [](const OptionalTensor& tensor) { return tensor.has_value(); })) {\n      map_.erase(it);\n    }\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  Status popitem(KeyType* key, const Tensor* indices, Tuple* tuple) {\n    tensorflow::mutex_lock lock(mu_);\n\n    // Sanity check the indices\n    TF_RETURN_IF_ERROR(check_index_ordering(*indices));\n\n    // Wait until map is not empty\n    while (this->map_.empty()) {\n      not_empty_.wait(lock);\n    }\n\n    // Move from the first element and erase it\n\n    auto it = map_.begin();\n\n    TF_RETURN_IF_ERROR(\n        copy_or_move_tensors(&it->second, *key, *indices, tuple));\n\n    *key = it->first;\n\n    // Remove entry if all the values have been consumed\n    if (!std::any_of(\n            it->second.begin(), it->second.end(),\n            [](const OptionalTensor& tensor) { return tensor.has_value(); })) {\n      map_.erase(it);\n    }\n\n    // Update bytes in the Staging Area\n    current_bytes_ -= get_tuple_bytes(*tuple);\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  Status clear() {\n    tensorflow::mutex_lock lock(mu_);\n    map_.clear();\n    incomplete_.clear();\n    current_bytes_ = 0;\n\n    notify_inserters_if_bounded();\n\n    return Status::OK();\n  }\n\n  std::size_t incomplete_size() {\n    tensorflow::mutex_lock lock(mu_);\n    return incomplete_.size();\n  }\n\n  std::size_t size() {\n    tensorflow::mutex_lock lock(mu_);\n    return map_.size();\n  }\n\n  string DebugString() const override { return \"StagingMap\"; }\n};\n\ntemplate <bool Ordered>\nStatus GetStagingMap(OpKernelContext* ctx, const NodeDef& ndef,\n                     StagingMap<Ordered>** map) {\n  auto rm = ctx->resource_manager();\n  ContainerInfo cinfo;\n\n  // Lambda for creating the Staging Area\n  auto create_fn = [&ndef](StagingMap<Ordered>** ret) -> Status {\n    DataTypeVector dtypes;\n    int64_t capacity;\n    int64_t memory_limit;\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"dtypes\", &dtypes));\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"capacity\", &capacity));\n    TF_RETURN_IF_ERROR(GetNodeAttr(ndef, \"memory_limit\", &memory_limit));\n    *ret = new StagingMap<Ordered>(dtypes, capacity, memory_limit);\n    return Status::OK();\n  };\n\n  TF_RETURN_IF_ERROR(cinfo.Init(rm, ndef, true /* use name() */));\n  TF_RETURN_IF_ERROR(rm->LookupOrCreate<StagingMap<Ordered>>(\n      cinfo.container(), cinfo.name(), map, create_fn));\n  return Status::OK();\n}\n\ntemplate <bool Ordered>\nclass MapStageOp : public OpKernel {\n public:\n  explicit MapStageOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::OptionalTuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n    OpInputList values_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input_list(\"values\", &values_tensor));\n    OP_REQUIRES(ctx, key_tensor->NumElements() > 0,\n                errors::InvalidArgument(\"key must not be empty\"));\n\n    OP_REQUIRES(ctx, key_tensor->NumElements() == 1,\n                errors::InvalidArgument(\n                    \"key must be an int64 scalar, got tensor with shape: \",\n                    key_tensor->shape()));\n\n    // Create copy for insertion into Staging Area\n    Tensor key(*key_tensor);\n\n    // Create the tuple to store\n    for (std::size_t i = 0; i < values_tensor.size(); ++i) {\n      tuple.push_back(values_tensor[i]);\n    }\n\n    // Store the tuple in the map\n    OP_REQUIRES_OK(ctx, map->put(&key, indices_tensor, &tuple));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapStage\").Device(DEVICE_CPU), MapStageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapStage\").Device(DEVICE_CPU),\n                        MapStageOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapStage\").HostMemory(\"key\").HostMemory(\"indices\").Device(DEVICE_GPU),\n    MapStageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapStage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapStageOp<true>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n\ntemplate <bool Ordered>\nclass MapUnstageOp : public OpKernel {\n public:\n  explicit MapUnstageOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->pop(key_tensor, indices_tensor, &tuple));\n\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstage\").Device(DEVICE_CPU),\n                        MapUnstageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstage\").Device(DEVICE_CPU),\n                        MapUnstageOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstage\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapPeekOp : public OpKernel {\n public:\n  explicit MapPeekOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* key_tensor;\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"key\", &key_tensor));\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->get(key_tensor, indices_tensor, &tuple));\n\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapPeek\").Device(DEVICE_CPU), MapPeekOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapPeek\").Device(DEVICE_CPU),\n                        MapPeekOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapPeek\").HostMemory(\"key\").HostMemory(\"indices\").Device(DEVICE_GPU),\n    MapPeekOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapPeek\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapPeekOp<true>);\n#endif\n\n\ntemplate <bool Ordered>\nclass MapUnstageNoKeyOp : public OpKernel {\n public:\n  explicit MapUnstageNoKeyOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  // Using this op in such a way that it blocks forever\n  // is an error.  As such cancellation is not handled.\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Pop a random (key, value) off the map\n    typename StagingMap<Ordered>::KeyType key;\n    typename StagingMap<Ordered>::Tuple tuple;\n\n    const Tensor* indices_tensor;\n\n    OP_REQUIRES_OK(ctx, ctx->input(\"indices\", &indices_tensor));\n    OP_REQUIRES_OK(ctx, map->popitem(&key, indices_tensor, &tuple));\n\n    // Allocate a key tensor and assign the key as the first output\n    ctx->set_output(0, key);\n\n    // Set the rest of the outputs to the tuple Tensors\n    OP_REQUIRES(\n        ctx, tuple.size() == indices_tensor->NumElements(),\n        errors::InvalidArgument(\"output/indices size mismatch: \", tuple.size(),\n                                \" vs. \", indices_tensor->NumElements()));\n\n    for (std::size_t i = 0; i < tuple.size(); ++i) {\n      ctx->set_output(i + 1, tuple[i]);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstageNoKey\").Device(DEVICE_CPU),\n                        MapUnstageNoKeyOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstageNoKey\").Device(DEVICE_CPU),\n                        MapUnstageNoKeyOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapUnstageNoKey\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageNoKeyOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapUnstageNoKey\")\n                            .HostMemory(\"key\")\n                            .HostMemory(\"indices\")\n                            .Device(DEVICE_GPU),\n                        MapUnstageNoKeyOp<true>);\n#endif\n\n\ntemplate <bool Ordered>\nclass MapSizeOp : public OpKernel {\n public:\n  explicit MapSizeOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Allocate size output tensor\n    Tensor* size = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &size));\n\n    // Set it to the actual size\n    size->scalar<int32>().setConstant(map->size());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapSize\").Device(DEVICE_CPU), MapSizeOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapSize\").Device(DEVICE_CPU),\n                        MapSizeOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n                        MapSizeOp<false>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"OrderedMapSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapSizeOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapIncompleteSizeOp : public OpKernel {\n public:\n  explicit MapIncompleteSizeOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    // Allocate size output tensor\n    Tensor* size = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &size));\n\n    // Set it to the actual size\n    size->scalar<int32>().setConstant(map->incomplete_size());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapIncompleteSize\").Device(DEVICE_CPU),\n                        MapIncompleteSizeOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapIncompleteSize\").Device(DEVICE_CPU),\n                        MapIncompleteSizeOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(\n    Name(\"MapIncompleteSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapIncompleteSizeOp<false>);\nREGISTER_KERNEL_BUILDER(\n    Name(\"OrderedMapIncompleteSize\").Device(DEVICE_GPU).HostMemory(\"size\"),\n    MapIncompleteSizeOp<true>);\n#endif\n\ntemplate <bool Ordered>\nclass MapClearOp : public OpKernel {\n public:\n  explicit MapClearOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext* ctx) override {\n    StagingMap<Ordered>* map = nullptr;\n    OP_REQUIRES_OK(ctx, GetStagingMap(ctx, def(), &map));\n    core::ScopedUnref scope(map);\n\n    OP_REQUIRES_OK(ctx, map->clear());\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"MapClear\").Device(DEVICE_CPU), MapClearOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapClear\").Device(DEVICE_CPU),\n                        MapClearOp<true>);\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\nREGISTER_KERNEL_BUILDER(Name(\"MapClear\").Device(DEVICE_GPU), MapClearOp<false>);\nREGISTER_KERNEL_BUILDER(Name(\"OrderedMapClear\").Device(DEVICE_GPU),\n                        MapClearOp<true>);\n#endif\n\n}  // namespace\n}  // namespace tensorflow\n", "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import data_flow_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\nTIMEOUT = 1\n\n\nclass MapStageTest(test.TestCase):\n\n  @test_util.run_deprecated_v1\n  def testSimple(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32])\n        stage = stager.put(pi, [v], [0])\n        k, y = stager.get(gi)\n        y = math_ops.reduce_max(math_ops.matmul(y, y))\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(4 * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  @test_util.run_deprecated_v1\n  def testMultiple(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32])\n        stage = stager.put(pi, [x, v], [0, 1])\n        k, (z, y) = stager.get(gi)\n        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(\n            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  @test_util.run_deprecated_v1\n  def testDictionary(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],\n                                              shapes=[[], [128, 128]],\n                                              names=['x', 'v'])\n        stage = stager.put(pi, {'x': x, 'v': v})\n        key, ret = stager.get(gi)\n        z = ret['x']\n        y = ret['v']\n        y = math_ops.reduce_max(z * math_ops.matmul(y, y))\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 0})\n      for i in range(10):\n        _, yval = sess.run([stage, y], feed_dict={x: i, pi: i + 1, gi: i})\n        self.assertAllClose(\n            4 * (i - 1) * (i - 1) * (i - 1) * 128, yval, rtol=1e-4)\n\n  def testColocation(self):\n    gpu_dev = test.gpu_device_name()\n\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(gpu_dev):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32])\n        y = stager.put(1, [v], [0])\n        expected_name = gpu_dev if 'gpu' not in gpu_dev else '/device:GPU:0'\n        self.assertEqual(y.device, expected_name)\n      with ops.device('/cpu:0'):\n        _, x = stager.get(1)\n        y = stager.peek(1)[0]\n        _, z = stager.get()\n        self.assertEqual(x[0].device, '/device:CPU:0')\n        self.assertEqual(y.device, '/device:CPU:0')\n        self.assertEqual(z[0].device, '/device:CPU:0')\n\n    g.finalize()\n\n  @test_util.run_deprecated_v1\n  def testPeek(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        p = array_ops.placeholder(dtypes.int32, name='p')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([\n            dtypes.int32,\n        ], shapes=[[]])\n        stage = stager.put(pi, [x], [0])\n        peek = stager.peek(gi)\n        size = stager.size()\n\n    g.finalize()\n\n    n = 10\n\n    with self.session(graph=g) as sess:\n      for i in range(n):\n        sess.run(stage, feed_dict={x: i, pi: i})\n\n      for i in range(n):\n        self.assertEqual(sess.run(peek, feed_dict={gi: i})[0], i)\n\n      self.assertEqual(sess.run(size), 10)\n\n  @test_util.run_deprecated_v1\n  def testSizeAndClear(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32, name='x')\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n        v = 2. * (array_ops.zeros([128, 128]) + x)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.float32, dtypes.float32],\n                                              shapes=[[], [128, 128]],\n                                              names=['x', 'v'])\n        stage = stager.put(pi, {'x': x, 'v': v})\n        size = stager.size()\n        clear = stager.clear()\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      sess.run(stage, feed_dict={x: -1, pi: 3})\n      self.assertEqual(sess.run(size), 1)\n      sess.run(stage, feed_dict={x: -1, pi: 1})\n      self.assertEqual(sess.run(size), 2)\n      sess.run(clear)\n      self.assertEqual(sess.run(size), 0)\n\n  @test_util.run_deprecated_v1\n  def testCapacity(self):\n    capacity = 3\n\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([\n            dtypes.int32,\n        ],\n                                              capacity=capacity,\n                                              shapes=[[]])\n\n      stage = stager.put(pi, [x], [0])\n      get = stager.get()\n      size = stager.size()\n\n    g.finalize()\n\n    from six.moves import queue as Queue\n    import threading\n\n    queue = Queue.Queue()\n    n = 8\n\n    with self.session(graph=g) as sess:\n      # Stage data in a separate thread which will block\n      # when it hits the staging area's capacity and thus\n      # not fill the queue with n tokens\n      def thread_run():\n        for i in range(n):\n          sess.run(stage, feed_dict={x: i, pi: i})\n          queue.put(0)\n\n      t = threading.Thread(target=thread_run)\n      t.daemon = True\n      t.start()\n\n      # Get tokens from the queue until a timeout occurs\n      try:\n        for i in range(n):\n          queue.get(timeout=TIMEOUT)\n      except Queue.Empty:\n        pass\n\n      # Should've timed out on the iteration 'capacity'\n      if not i == capacity:\n        self.fail(\"Expected to timeout on iteration '{}' \"\n                  \"but instead timed out on iteration '{}' \"\n                  \"Staging Area size is '{}' and configured \"\n                  \"capacity is '{}'.\".format(capacity, i, sess.run(size),\n                                             capacity))\n\n      # Should have capacity elements in the staging area\n      self.assertEqual(sess.run(size), capacity)\n\n      # Clear the staging area completely\n      for i in range(n):\n        sess.run(get)\n\n      self.assertEqual(sess.run(size), 0)\n\n  @test_util.run_deprecated_v1\n  def testMemoryLimit(self):\n    memory_limit = 512 * 1024  # 512K\n    chunk = 200 * 1024  # 256K\n    capacity = memory_limit // chunk\n\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.uint8, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([dtypes.uint8],\n                                              memory_limit=memory_limit,\n                                              shapes=[[]])\n        stage = stager.put(pi, [x], [0])\n        get = stager.get()\n        size = stager.size()\n\n    g.finalize()\n\n    from six.moves import queue as Queue\n    import threading\n\n    queue = Queue.Queue()\n    n = 8\n\n    with self.session(graph=g) as sess:\n      # Stage data in a separate thread which will block\n      # when it hits the staging area's capacity and thus\n      # not fill the queue with n tokens\n      def thread_run():\n        for i in range(n):\n          data = np.full(chunk, i, dtype=np.uint8)\n          sess.run(stage, feed_dict={x: data, pi: i})\n          queue.put(0)\n\n      t = threading.Thread(target=thread_run)\n      t.daemon = True\n      t.start()\n\n      # Get tokens from the queue until a timeout occurs\n      try:\n        for i in range(n):\n          queue.get(timeout=TIMEOUT)\n      except Queue.Empty:\n        pass\n\n      # Should've timed out on the iteration 'capacity'\n      if not i == capacity:\n        self.fail(\"Expected to timeout on iteration '{}' \"\n                  \"but instead timed out on iteration '{}' \"\n                  \"Staging Area size is '{}' and configured \"\n                  \"capacity is '{}'.\".format(capacity, i, sess.run(size),\n                                             capacity))\n\n      # Should have capacity elements in the staging area\n      self.assertEqual(sess.run(size), capacity)\n\n      # Clear the staging area completely\n      for i in range(n):\n        sess.run(get)\n\n      self.assertEqual(sess.run(size), 0)\n\n  @test_util.run_deprecated_v1\n  def testOrdering(self):\n    import six\n    import random\n\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.int32, name='x')\n        pi = array_ops.placeholder(dtypes.int64, name='pi')\n        gi = array_ops.placeholder(dtypes.int64, name='gi')\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea([\n            dtypes.int32,\n        ],\n                                              shapes=[[]],\n                                              ordered=True)\n        stage = stager.put(pi, [x], [0])\n        get = stager.get()\n        size = stager.size()\n\n    g.finalize()\n\n    n = 10\n\n    with self.session(graph=g) as sess:\n      # Keys n-1..0\n      keys = list(reversed(six.moves.range(n)))\n\n      for i in keys:\n        sess.run(stage, feed_dict={pi: i, x: i})\n\n      self.assertEqual(sess.run(size), n)\n\n      # Check that key, values come out in ascending order\n      for i, k in enumerate(reversed(keys)):\n        get_key, values = sess.run(get)\n        self.assertTrue(i == k == get_key == values)\n\n      self.assertEqual(sess.run(size), 0)\n\n  @test_util.run_deprecated_v1\n  def testPartialDictInsert(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test barrier with dictionary\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32],\n            names=['x', 'v', 'f'])\n        stage_xf = stager.put(pi, {'x': x, 'f': f})\n        stage_v = stager.put(pi, {'v': v})\n        key, ret = stager.get(gi)\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      # 0 complete and incomplete entries\n      self.assertEqual(sess.run([size, isize]), [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 1])\n      # We can now obtain tuple associated with key 0\n      self.assertEqual(\n          sess.run([key, ret], feed_dict={gi: 0}),\n          [0, {\n              'x': 1,\n              'f': 2,\n              'v': 1\n          }])\n\n      # 0 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 3})\n      # We can now obtain tuple associated with key 1\n      self.assertEqual(\n          sess.run([key, ret], feed_dict={gi: 1}),\n          [1, {\n              'x': 1,\n              'f': 2,\n              'v': 3\n          }])\n\n  @test_util.run_deprecated_v1\n  def testPartialIndexInsert(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32])\n        stage_xf = stager.put(pi, [x, f], [0, 2])\n        stage_v = stager.put(pi, [v], [1])\n        key, ret = stager.get(gi)\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      # 0 complete and incomplete entries\n      self.assertEqual(sess.run([size, isize]), [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 1])\n      # We can now obtain tuple associated with key 0\n      self.assertEqual(sess.run([key, ret], feed_dict={gi: 0}), [0, [1, 1, 2]])\n\n      # 0 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 3})\n      # We can now obtain tuple associated with key 1\n      self.assertEqual(sess.run([key, ret], feed_dict={gi: 1}), [1, [1, 3, 2]])\n\n  @test_util.run_deprecated_v1\n  def testPartialDictGetsAndPeeks(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        pei = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test barrier with dictionary\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32],\n            names=['x', 'v', 'f'])\n        stage_xf = stager.put(pi, {'x': x, 'f': f})\n        stage_v = stager.put(pi, {'v': v})\n        peek_xf = stager.peek(pei, ['x', 'f'])\n        peek_v = stager.peek(pei, ['v'])\n        key_xf, get_xf = stager.get(gi, ['x', 'f'])\n        key_v, get_v = stager.get(gi, ['v'])\n        pop_key_xf, pop_xf = stager.get(indices=['x', 'f'])\n        pop_key_v, pop_v = stager.get(pi, ['v'])\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      # 0 complete and incomplete entries\n      self.assertEqual(sess.run([size, isize]), [0, 0])\n      # Stage key 0, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 0, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n      # Stage key 1, x and f tuple entries\n      sess.run(stage_xf, feed_dict={pi: 1, x: 1, f: 2})\n      self.assertEqual(sess.run([size, isize]), [0, 2])\n\n      # Now complete key 0 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 0, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 1])\n\n      # We can now peek at 'x' and 'f' values associated with key 0\n      self.assertEqual(sess.run(peek_xf, feed_dict={pei: 0}), {'x': 1, 'f': 2})\n      # Peek at 'v' value associated with key 0\n      self.assertEqual(sess.run(peek_v, feed_dict={pei: 0}), {'v': 1})\n      # 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 1])\n\n      # We can now obtain 'x' and 'f' values associated with key 0\n      self.assertEqual(\n          sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, {\n              'x': 1,\n              'f': 2\n          }])\n      # Still have 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 1])\n\n      # We can no longer get 'x' and 'f' from key 0\n      with self.assertRaises(errors.InvalidArgumentError) as cm:\n        sess.run([key_xf, get_xf], feed_dict={gi: 0})\n\n      exc_str = (\"Tensor at index '0' for key '0' \" 'has already been removed.')\n\n      self.assertIn(exc_str, cm.exception.message)\n\n      # Obtain 'v' value associated with key 0\n      self.assertEqual(\n          sess.run([key_v, get_v], feed_dict={gi: 0}), [0, {\n              'v': 1\n          }])\n      # 0 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [0, 1])\n\n      # Now complete key 1 with tuple entry v\n      sess.run(stage_v, feed_dict={pi: 1, v: 1})\n      # 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 0])\n\n      # Pop without key to obtain 'x' and 'f' values associated with key 1\n      self.assertEqual(sess.run([pop_key_xf, pop_xf]), [1, {'x': 1, 'f': 2}])\n      # still 1 complete and 1 incomplete entry\n      self.assertEqual(sess.run([size, isize]), [1, 0])\n      # We can now obtain 'x' and 'f' values associated with key 1\n      self.assertEqual(\n          sess.run([pop_key_v, pop_v], feed_dict={pi: 1}), [1, {\n              'v': 1\n          }])\n      # Nothing is left\n      self.assertEqual(sess.run([size, isize]), [0, 0])\n\n  @test_util.run_deprecated_v1\n  def testPartialIndexGets(self):\n    with ops.Graph().as_default() as g:\n      with ops.device('/cpu:0'):\n        x = array_ops.placeholder(dtypes.float32)\n        f = array_ops.placeholder(dtypes.float32)\n        v = array_ops.placeholder(dtypes.float32)\n        pi = array_ops.placeholder(dtypes.int64)\n        pei = array_ops.placeholder(dtypes.int64)\n        gi = array_ops.placeholder(dtypes.int64)\n      with ops.device(test.gpu_device_name()):\n        # Test again with partial index gets\n        stager = data_flow_ops.MapStagingArea(\n            [dtypes.float32, dtypes.float32, dtypes.float32])\n        stage_xvf = stager.put(pi, [x, v, f], [0, 1, 2])\n        key_xf, get_xf = stager.get(gi, [0, 2])\n        key_v, get_v = stager.get(gi, [1])\n        size = stager.size()\n        isize = stager.incomplete_size()\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      # Stage complete tuple\n      sess.run(stage_xvf, feed_dict={pi: 0, x: 1, f: 2, v: 3})\n\n      self.assertEqual(sess.run([size, isize]), [1, 0])\n\n      # Partial get using indices\n      self.assertEqual(\n          sess.run([key_xf, get_xf], feed_dict={gi: 0}), [0, [1, 2]])\n\n      # Still some of key 0 left\n      self.assertEqual(sess.run([size, isize]), [1, 0])\n\n      # Partial get of remaining index\n      self.assertEqual(sess.run([key_v, get_v], feed_dict={gi: 0}), [0, [3]])\n\n      # All gone\n      self.assertEqual(sess.run([size, isize]), [0, 0])\n\n  @test_util.run_deprecated_v1\n  def testNonScalarKeyOrderedMap(self):\n    with ops.Graph().as_default() as g:\n      x = array_ops.placeholder(dtypes.float32)\n      v = 2. * (array_ops.zeros([128, 128]) + x)\n      t = data_flow_ops.gen_data_flow_ops.ordered_map_stage(\n          key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),\n          indices=np.array([[6]]),\n          values=[x, v],\n          dtypes=[dtypes.int64],\n          capacity=0,\n          memory_limit=0,\n          container='container1',\n          shared_name='',\n          name=None)\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  'key must be an int64 scalar'):\n        sess.run(t, feed_dict={x: 1})\n\n  @test_util.run_deprecated_v1\n  def testNonScalarKeyUnorderedMap(self):\n    with ops.Graph().as_default() as g:\n      x = array_ops.placeholder(dtypes.float32)\n      v = 2. * (array_ops.zeros([128, 128]) + x)\n      t = data_flow_ops.gen_data_flow_ops.map_stage(\n          key=constant_op.constant(value=[1], shape=(1, 3), dtype=dtypes.int64),\n          indices=np.array([[6]]),\n          values=[x, v],\n          dtypes=[dtypes.int64],\n          capacity=0,\n          memory_limit=0,\n          container='container1',\n          shared_name='',\n          name=None)\n\n    g.finalize()\n\n    with self.session(graph=g) as sess:\n      with self.assertRaisesRegex(errors.InvalidArgumentError,\n                                  'key must be an int64 scalar'):\n        sess.run(t, feed_dict={x: 1})\n\n\nif __name__ == '__main__':\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/map_stage_op.cc", "tensorflow/python/kernel_tests/data_structures/map_stage_op_test.py"], "buggy_code_start_loc": [537, 14], "buggy_code_end_loc": [537, 593], "fixing_code_start_loc": [538, 15], "fixing_code_end_loc": [543, 631], "type": "CWE-843", "message": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `MapStage` is vulnerable a `CHECK`-fail if the key tensor is not a scalar. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-21734", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-03T13:15:08.190", "lastModified": "2022-02-09T05:00:16.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `MapStage` is vulnerable a `CHECK`-fail if the key tensor is not a scalar. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"lang": "es", "value": "Tensorflow es un marco de aprendizaje autom\u00e1tico de c\u00f3digo abierto. La implementaci\u00f3n de \"MapStage\" es vulnerable a un fallo \"CHECK\" si el tensor clave no es un escalar. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.8.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.7.1, TensorFlow versi\u00f3n 2.6.3, y TensorFlow versi\u00f3n 2.5.3, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-843"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.2", "matchCriteriaId": "688150BF-477C-48FC-9AEF-A79AC57A6DDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndIncluding": "2.6.2", "matchCriteriaId": "C9E69B60-8C97-47E2-9027-9598B8392E5D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2EDFAAB8-799C-4259-9102-944D4760DA2C"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/map_stage_op.cc#L519-L550", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gcvh-66ff-4mwm", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/f57315566d7094f322b784947093406c2aea0d7d"}}