{"buggy_code": ["#include <stdio.h>\n#include <algorithm>\n#include \"src/util/c99_stdint.h\"\n#include <limits>\n#include <string.h>\n\n#include \"src/msg/msg.h\"\n#include \"src/parse/scanner.h\"\n#include \"src/debug/debug.h\"\n\n\nnamespace re2c {\n\nconst char *const Scanner::ENDPOS = (const char*) std::numeric_limits<uint64_t>::max();\n\nScanner::~Scanner()\n{\n    for (size_t i = files.size(); i --> 0; ) {\n        delete files[i];\n    }\n}\n\nsize_t Scanner::get_input_index() const\n{\n    // Find index of the current input file: the one corresponding to\n    // buffer fragment that contains cursor.\n    size_t i = files.size();\n    DASSERT(i > 0);\n    for (;;) {\n        --i;\n        Input *in = files[i];\n        if (i == 0 || (cur >= in->so && cur <= in->eo)) break;\n    }\n    return i;\n}\n\nbool Scanner::open(const std::string &filename, const std::string *parent)\n{\n    Input *in = new Input(msg.filenames.size());\n    files.push_back(in);\n    if (!in->open(filename, parent, globopts->incpaths)) {\n        return false;\n    }\n    msg.filenames.push_back(in->escaped_name);\n    return true;\n}\n\nbool Scanner::include(const std::string &filename)\n{\n    // get name of the current file (before unreading)\n    DASSERT(!files.empty());\n    const std::string &parent = files.back()->escaped_name;\n\n    // unread buffer tail: we'll return to it later\n    // In the buffer nested files go before outer files. In the file stack,\n    // however, outer files go before nested files (nested are at the top).\n    // We want to break from the unreading cycle early, therefore we go in\n    // reverse order of file offsets in buffer and break as soon as the end\n    // offset is less than cursor (current position).\n    for (size_t i = 0; i < files.size(); ++i) {\n        Input *in = files[i];\n        if (in->so >= cur) {\n            // unread whole fragment\n            fseek(in->file, in->so - in->eo, SEEK_CUR);\n            in->so = in->eo = ENDPOS;\n        }\n        else if (in->eo >= cur) {\n            // fragment on the boundary, unread partially\n            fseek(in->file, cur - in->eo, SEEK_CUR);\n            in->eo = cur - 1;\n        }\n        else {\n            // the rest has been consumed already\n            break;\n        }\n    }\n\n    // open new file and place place at the top of stack\n    if (!open(filename, &parent)) {\n        return false;\n    }\n\n    // refill buffer (discard everything up to cursor, clear EOF)\n    lim = cur = mar = ctx = tok = ptr = pos = bot + BSIZE;\n    eof = NULL;\n    return fill(BSIZE);\n}\n\nbool Scanner::read(size_t want)\n{\n    DASSERT(!files.empty());\n    for (size_t i = files.size(); i --> 0; ) {\n        Input *in = files[i];\n        const size_t have = fread(lim, 1, want, in->file);\n        in->so = lim;\n        lim += have;\n        in->eo = lim;\n        want -= have;\n\n        // buffer filled\n        if (want == 0) return true;\n    }\n    return false;\n}\n\nvoid Scanner::shift_ptrs_and_fpos(ptrdiff_t offs)\n{\n    // shift buffer pointers\n    shift_ptrs(offs);\n\n    // shift file pointers\n    for (size_t i = files.size(); i --> 0; ) {\n        Input *in = files[i];\n        if (in->so == ENDPOS && in->eo == ENDPOS) break;\n        DASSERT(in->so != ENDPOS && in->eo != ENDPOS);\n        in->so += offs;\n        in->eo += offs;\n    }\n}\n\nvoid Scanner::pop_finished_files()\n{\n    // Pop all files that have been fully processed (file upper bound\n    // in buffer points before the first character of current lexeme),\n    // except for the first (main) file which must always remain at the\n    // bottom of the stack.\n    size_t i = files.size();\n    DASSERT(i > 0);\n    for (;;) {\n        --i;\n        Input *in = files[i];\n        if (i == 0 || in->eo >= tok) break;\n        files.pop_back();\n        delete in;\n    }\n}\n\nbool Scanner::fill(size_t need)\n{\n    if (eof) return false;\n\n    pop_finished_files();\n\n    DASSERT(bot <= tok && tok <= lim);\n    size_t free = static_cast<size_t>(tok - bot);\n    size_t copy = static_cast<size_t>(lim - tok);\n\n    if (free >= need) {\n        memmove(bot, tok, copy);\n        shift_ptrs_and_fpos(-static_cast<ptrdiff_t>(free));\n    }\n    else {\n        BSIZE += std::max(BSIZE, need);\n        char * buf = new char[BSIZE + YYMAXFILL];\n        if (!buf) fatal(\"out of memory\");\n\n        memmove(buf, tok, copy);\n        shift_ptrs_and_fpos(buf - bot);\n        delete [] bot;\n        bot = buf;\n\n        free = BSIZE - copy;\n    }\n\n    if (!read(free)) {\n        eof = lim;\n        memset(lim, 0, YYMAXFILL);\n        lim += YYMAXFILL;\n    }\n\n    return true;\n}\n\n} // namespace re2c\n"], "fixing_code": ["#include <stdio.h>\n#include <algorithm>\n#include \"src/util/c99_stdint.h\"\n#include <limits>\n#include <string.h>\n\n#include \"src/msg/msg.h\"\n#include \"src/parse/scanner.h\"\n#include \"src/debug/debug.h\"\n\n\nnamespace re2c {\n\nconst char *const Scanner::ENDPOS = (const char*) std::numeric_limits<uint64_t>::max();\n\nScanner::~Scanner()\n{\n    for (size_t i = files.size(); i --> 0; ) {\n        delete files[i];\n    }\n}\n\nsize_t Scanner::get_input_index() const\n{\n    // Find index of the current input file: the one corresponding to\n    // buffer fragment that contains cursor.\n    size_t i = files.size();\n    DASSERT(i > 0);\n    for (;;) {\n        --i;\n        Input *in = files[i];\n        if (i == 0 || (cur >= in->so && cur <= in->eo)) break;\n    }\n    return i;\n}\n\nbool Scanner::open(const std::string &filename, const std::string *parent)\n{\n    Input *in = new Input(msg.filenames.size());\n    files.push_back(in);\n    if (!in->open(filename, parent, globopts->incpaths)) {\n        return false;\n    }\n    msg.filenames.push_back(in->escaped_name);\n    return true;\n}\n\nbool Scanner::include(const std::string &filename)\n{\n    // get name of the current file (before unreading)\n    DASSERT(!files.empty());\n    const std::string &parent = files.back()->escaped_name;\n\n    // unread buffer tail: we'll return to it later\n    // In the buffer nested files go before outer files. In the file stack,\n    // however, outer files go before nested files (nested are at the top).\n    // We want to break from the unreading cycle early, therefore we go in\n    // reverse order of file offsets in buffer and break as soon as the end\n    // offset is less than cursor (current position).\n    for (size_t i = 0; i < files.size(); ++i) {\n        Input *in = files[i];\n        if (in->so >= cur) {\n            // unread whole fragment\n            fseek(in->file, in->so - in->eo, SEEK_CUR);\n            in->so = in->eo = ENDPOS;\n        }\n        else if (in->eo >= cur) {\n            // fragment on the boundary, unread partially\n            fseek(in->file, cur - in->eo, SEEK_CUR);\n            in->eo = cur - 1;\n        }\n        else {\n            // the rest has been consumed already\n            break;\n        }\n    }\n\n    // open new file and place place at the top of stack\n    if (!open(filename, &parent)) {\n        return false;\n    }\n\n    // refill buffer (discard everything up to cursor, clear EOF)\n    lim = cur = mar = ctx = tok = ptr = pos = bot + BSIZE;\n    eof = NULL;\n    return fill(BSIZE);\n}\n\nbool Scanner::read(size_t want)\n{\n    DASSERT(!files.empty());\n    for (size_t i = files.size(); i --> 0; ) {\n        Input *in = files[i];\n        const size_t have = fread(lim, 1, want, in->file);\n        in->so = lim;\n        lim += have;\n        in->eo = lim;\n        want -= have;\n\n        // buffer filled\n        if (want == 0) return true;\n    }\n    return false;\n}\n\nvoid Scanner::shift_ptrs_and_fpos(ptrdiff_t offs)\n{\n    // shift buffer pointers\n    shift_ptrs(offs);\n\n    // shift file pointers\n    for (size_t i = files.size(); i --> 0; ) {\n        Input *in = files[i];\n        if (in->so == ENDPOS && in->eo == ENDPOS) break;\n        DASSERT(in->so != ENDPOS && in->eo != ENDPOS);\n        in->so += offs;\n        in->eo += offs;\n    }\n}\n\nvoid Scanner::pop_finished_files()\n{\n    // Pop all files that have been fully processed (file upper bound\n    // in buffer points before the first character of current lexeme),\n    // except for the first (main) file which must always remain at the\n    // bottom of the stack.\n    size_t i = files.size();\n    DASSERT(i > 0);\n    for (;;) {\n        --i;\n        Input *in = files[i];\n        if (i == 0 || in->eo >= tok) break;\n        files.pop_back();\n        delete in;\n    }\n}\n\nbool Scanner::fill(size_t need)\n{\n    if (eof) return false;\n\n    pop_finished_files();\n\n    DASSERT(bot <= tok && tok <= lim);\n    size_t free = static_cast<size_t>(tok - bot);\n    size_t copy = static_cast<size_t>(lim - tok);\n\n    if (free >= need) {\n        memmove(bot, tok, copy);\n        shift_ptrs_and_fpos(-static_cast<ptrdiff_t>(free));\n    }\n    else {\n        BSIZE += std::max(BSIZE, need);\n        char * buf = new char[BSIZE + YYMAXFILL];\n        if (!buf) fatal(\"out of memory\");\n\n        memmove(buf, tok, copy);\n        shift_ptrs_and_fpos(buf - tok);\n        delete [] bot;\n        bot = buf;\n\n        free = BSIZE - copy;\n    }\n\n    DASSERT(lim + free <= bot + BSIZE);\n    if (!read(free)) {\n        eof = lim;\n        memset(lim, 0, YYMAXFILL);\n        lim += YYMAXFILL;\n    }\n\n    return true;\n}\n\n} // namespace re2c\n"], "filenames": ["src/parse/scanner.cc"], "buggy_code_start_loc": [158], "buggy_code_end_loc": [164], "fixing_code_start_loc": [158], "fixing_code_end_loc": [166], "type": "CWE-787", "message": "re2c 1.3 has a heap-based buffer overflow in Scanner::fill in parse/scanner.cc via a long lexeme.", "other": {"cve": {"id": "CVE-2020-11958", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-21T01:15:11.570", "lastModified": "2023-01-27T18:38:43.943", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "re2c 1.3 has a heap-based buffer overflow in Scanner::fill in parse/scanner.cc via a long lexeme."}, {"lang": "es", "value": "re2c versi\u00f3n 1.3, tiene un desbordamiento del b\u00fafer en la regi\u00f3n heap de la memoria en la funci\u00f3n Scanner::fill en el archivo parse/scanner.cc por medio de un lexema largo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:re2c:re2c:1.3:*:*:*:*:*:*:*", "matchCriteriaId": "D9E363C2-A107-45E2-BC6E-7B08369D1C8E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.10:*:*:*:*:*:*:*", "matchCriteriaId": "A31C8344-3E02-4EB8-8BD8-4C84B7959624"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:20.04:*:*:*:lts:*:*:*", "matchCriteriaId": "902B8056-9E37-443B-8905-8AA93E2447FB"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2020/04/21/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://blogs.gentoo.org/ago/2020/04/19/re2c-heap-overflow-in-scannerfill-scanner-cc/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/skvadrik/re2c/commit/c4603ba5ce229db83a2a4fb93e6d4b4e3ec3776a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202007-28", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4338-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4338-2/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.openwall.com/lists/oss-security/2020/04/19/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/skvadrik/re2c/commit/c4603ba5ce229db83a2a4fb93e6d4b4e3ec3776a"}}