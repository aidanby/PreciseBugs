{"buggy_code": ["<?php\n// vim: set ai ts=4 sw=4 ft=php:\n//\tLicense for all code of this FreePBX module can be found in the license file inside the module directory\n//\tCopyright 2014 Schmooze Com Inc.\n//\nnamespace FreePBX\\modules;\ninclude __DIR__.'/vendor/autoload.php';\nuse libphonenumber\\PhoneNumberUtil;\nuse libphonenumber\\NumberParseException;\nuse libphonenumber\\PhoneNumberFormat;\nuse libphonenumber\\ShortNumberInfo;\nclass Contactmanager extends \\FreePBX_Helpers implements \\BMO {\n\tprivate $message = '';\n\tprivate $lookupCache = array();\n\tprivate $contactsCache = array();\n\tprivate $types = array();\n\tprivate $groupCache = array();\n\tprivate $groupsCache = array();\n\tprivate $token = null;\n\tprivate $cachedSpeedDials = array();\n\tpublic $tmp;\n\tprivate $maxAvatar = 200; //this needs to be set in advanced settings (1-2048)\n\n\tpublic function __construct($freepbx = null) {\n\t\t$this->db = $freepbx->Database;\n\t\t$this->freepbx = $freepbx;\n\t\t$this->userman = $this->freepbx->Userman;\n\n\t\t$this->types = array(\n\t\t\t\"internal\" => array(\n\t\t\t\t\"name\" => _(\"Internal\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"fname\" => _(\"First Name\"),\n\t\t\t\t\t\"lname\" => _(\"Last Name\"),\n\t\t\t\t\t\"username\" => _(\"User\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t),\n\t\t\t\"external\" => array(\n\t\t\t\t\"name\" => _(\"External\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"company\" => _(\"Company\"),\n\t\t\t\t\t\"numbers\" => _(\"Numbers\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t),\n\t\t\t\"private\" => array(\n\t\t\t\t\"name\" => _(\"Private\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"company\" => _(\"Company\"),\n\t\t\t\t\t\"numbers\" => _(\"Numbers\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t$this->tmp = $this->freepbx->Config->get(\"ASTSPOOLDIR\") . \"/tmp\";\n\t}\n\n\tpublic function ucpDelGroup($id,$display,$data) {\n\t}\n\n\tpublic function ucpAddGroup($id, $display, $data) {\n\t\t$this->ucpUpdateGroup($id,$display,$data);\n\t}\n\n\tpublic function ucpUpdateGroup($id,$display,$data) {\n\t\tif($display == 'userman' && isset($_POST['type']) && $_POST['type'] == 'group') {\n\t\t\tif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"yes\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByGID($id,'Contactmanager','speeddial',true);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Ucp->setSettingByGID($id,'Contactmanager','speeddial',false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is deleted\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpDelUser($id, $display, $ucpStatus, $data) {\n\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is added\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpAddUser($id, $display, $ucpStatus, $data) {\n\t\t$this->ucpUpdateUser($id, $display, $ucpStatus, $data);\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is updated\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpUpdateUser($id, $display, $ucpStatus, $data) {\n\t\tif($display == 'userman' && isset($_POST['type']) && $_POST['type'] == 'user') {\n\t\t\tif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"yes\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',true);\n\t\t\t} elseif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"no\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',false);\n\t\t\t} elseif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"inherit\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',null);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function ucpConfigPage($mode, $user, $action) {\n\t\tif(empty($user)) {\n\t\t\t$speeddial = ($mode == 'group') ? true : null;\n\t\t} else {\n\t\t\tif($mode == \"group\") {\n\t\t\t\t$speeddial = $this->freepbx->Ucp->getSettingByGID($user['id'],'Contactmanager','speeddial');\n\t\t\t\t$speeddial = !($speeddial) ? false : true;\n\t\t\t} else {\n\t\t\t\t$speeddial = $this->freepbx->Ucp->getSettingByID($user['id'],'Contactmanager','speeddial');\n\t\t\t}\n\t\t}\n\n\t\t$html[0] = array(\n\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\"content\" => load_view(dirname(__FILE__).\"/views/ucp_config.php\",array(\"speeddial\" => $speeddial, \"mode\" => $mode))\n\t\t);\n\t\treturn $html;\n\t}\n\n\tpublic function usermanAddContactInfo($user) {\n\t\tif(empty($this->allImages)) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_userman_images\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute();\n\t\t\t$tmp = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t\t$this->allImages = array();\n\t\t\tforeach($tmp as $t) {\n\t\t\t\t$this->allImages[$t['uid']] = true;\n\t\t\t}\n\t\t}\n\t\tif(!empty($this->allImages[$user['id']])) {\n\t\t\t$user['image'] = true;\n\t\t}\n\t\treturn $user;\n\t}\n\n\tpublic function install() {\n\t\tglobal $db;\n\n\t\t$fcc = new \\featurecode('contactmanager', 'app-contactmanager-sd');\n\t\t$fcc->setDescription('Contact Manager Speed Dials');\n\t\t$fcc->setDefault('*10');\n\t\t$fcc->setProvideDest();\n\t\t$fcc->update();\n\t\tunset($fcc);\n\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE type = 'userman'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$oldgrps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\t$sql = \"UPDATE contactmanager_groups SET type = 'internal' WHERE type = 'userman'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `uuid` = UUID() WHERE `uuid` IS NULL\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\n\t\t$info = $this->freepbx->Modules->getInfo(\"contactmanager\");\n\t\t$newinstall = ($info['contactmanager']['status'] == MODULE_STATUS_NOTINSTALLED);\n\t\tif(empty($oldgrps) && $newinstall) {\n\t\t\t$ret = $this->addGroup(_(\"User Manager Group\"),\"internal\");\n\t\t\t$defaultgrp = $ret['id'];\n\t\t} elseif(isset($oldgrps[0])) {\n\t\t\t$defaultgrp = $oldgrps[0]['id'];\n\t\t}\n\n\t\tif(!empty($info['contactmanager']['dbversion']) && version_compare_freepbx($info['contactmanager']['dbversion'],\"13.0.37\",\"<\")) {\n\t\t\t$sql = \"SELECT e.* FROM contactmanager_group_entries e, contactmanager_groups g WHERE type = 'internal' AND e.groupid = g.id\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute();\n\t\t\t$entries = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t\tforeach($entries as $entry) {\n\t\t\t\t$uid = $entry['user'];\n\t\t\t\t$gs = $this->userman->getModuleSettingByID($uid,\"contactmanager\",\"showingroups\");\n\t\t\t\t$gs = is_array($gs) ? $gs : array();\n\t\t\t\tif(!in_array($entry['groupid'],$gs)) {\n\t\t\t\t\t$gs[] = $entry['groupid'];\n\t\t\t\t}\n\t\t\t\t$this->userman->setModuleSettingByID($uid,\"contactmanager\",\"showingroups\", $gs);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($defaultgrp) && !$newinstall) {\n\t\t\t//Now scan all the old users/groups from userman and get the setting\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\tforeach($users as $user) {\n\t\t\t\t$show = $this->userman->getModuleSettingByID($user['id'],\"contactmanager\",\"show\");\n\t\t\t\tif($show) {\n\t\t\t\t\t$gs = $this->userman->getModuleSettingByID($user['id'],\"contactmanager\",\"showingroups\");\n\t\t\t\t\t$gs = is_array($gs) ? $gs : array();\n\t\t\t\t\tif(!in_array($defaultgrp,$gs)) {\n\t\t\t\t\t\t$gs[] = $defaultgrp;\n\t\t\t\t\t}\n\t\t\t\t\t$this->userman->setModuleSettingByID($user['id'],\"contactmanager\",\"showingroups\", $gs);\n\t\t\t\t}\n\t\t\t\t$this->usermanUpdateUser($user['id'],'',$user);\n\t\t\t}\n\t\t\t$groups = $this->userman->getAllGroups();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$show = $this->userman->getModuleSettingByGID($group['id'],\"contactmanager\",\"show\");\n\t\t\t\tif($show) {\n\t\t\t\t\t$this->userman->setModuleSettingByGID($group['id'],\"contactmanager\",\"showingroups\", array($defaultgrp));\n\t\t\t\t}\n\t\t\t\t$this->usermanUpdateGroup($group['id'],'',$group);\n\t\t\t}\n\t\t} elseif($newinstall) {\n\t\t\t$id = $this->freepbx->Userman->getAutoGroup();\n\t\t\t$id = !empty($id) ? $id : 1;\n\t\t\t$group = $this->freepbx->Userman->getGroupByGID($id);\n\t\t\tif(!empty($group)) {\n\t\t\t\t$this->userman->setModuleSettingByGID($id,\"contactmanager\",\"showingroups\", array($defaultgrp));\n\t\t\t\t$this->usermanUpdateGroup($id,'',$group);\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT i.*, e.user FROM contactmanager_entry_images i, contactmanager_group_entries e, contactmanager_groups g WHERE i.entryid = e.id AND e.groupid = g.id AND g.type = 'internal'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$entries = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t$sql = \"INSERT INTO contactmanager_entry_userman_images (`uid`,`image`,`format`,`gravatar`) VALUES (:uid, :image, :format, :gravatar)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sql1 = \"DELETE FROM contactmanager_entry_images WHERE entryid = :id\";\n\t\t$sth1 = $this->db->prepare($sql1);\n\t\tforeach($entries as $entry) {\n\t\t\ttry {\n\t\t\t\t$sth->execute(array(\n\t\t\t\t\t\"uid\" => $entry['user'],\n\t\t\t\t\t\"image\" => $entry['image'],\n\t\t\t\t\t\"format\" => $entry['format'],\n\t\t\t\t\t\"gravatar\" => $entry['gravatar']\n\t\t\t\t));\n\t\t\t} catch(\\Exception $e) {}\n\t\t\t$sth1->execute(array(\"id\" => $entry['entryid']));\n\t\t}\n\n\t\tif(!$this->getConfig(\"strippedUpgrade2\")) {\n\t\t\tset_time_limit(0);\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach($users as $user) {\n\t\t\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($user['id'],'contactmanager','showingroups');\n\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\tforeach ($groups as $group) {\n\t\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t\t$user['extraData'] = $user;\n\t\t\t\t\t\t$user['user'] = $user['id'];\n\t\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($user));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\t\t\tif ($entry['user'] == $user['id']) {\n\t\t\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$groups = $this->getGroups();\n\t\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\tif(empty($entry['numbers'])) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$this->deleteNumbersByEntryID($entry['uid']);\n\t\t\t\t\tforeach($entry['numbers'] as &$number) {\n\t\t\t\t\t\tif(empty($number['locale']) && $number['type'] !== 'internal') {\n\t\t\t\t\t\t\t$number['locale'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->addNumbersByEntryID($entry['uid'], $entry['numbers']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->setConfig(\"strippedUpgrade2\",true);\n\t\t}\n\n\t\t// CONTACTMANLOOKUPLENGTH in Advanced Settings of FreePBX\n\t\t//\n\t\t$set['value'] = 7;\n\t\t$set['defaultval'] =& $set['value'];\n\t\t$set['readonly'] = 0;\n\t\t$set['hidden'] = 0;\n\t\t$set['level'] = 1;\n\t\t$set['module'] = 'contactmanager'; //This will help delete the settings when module is uninstalled\n\t\t$set['category'] = 'Contact Manager Module';\n\t\t$set['emptyok'] = 0;\n\t\t$set['name'] = 'Partial Match Length';\n\t\t$set['description'] = 'How many digits should a number be before a partial match is used when looking up a contact';\n\t\t$set['type'] = CONF_TYPE_INT;\n\t\t$set['options'] = array(1,86400);\n\t\t$this->freepbx->Config->define_conf_setting('CONTACTMANLOOKUPLENGTH',$set,true);\n\t}\n\tpublic function uninstall() {\n\n\t}\n\tpublic function backup(){\n\n\t}\n\tpublic function restore($backup){\n\n\t}\n\n\tpublic function doDialplanHook(&$ext, $engine, $priority) {\n\t\t$contextname = 'app-contactmanager-sd';\n\t\t$fcc = new \\featurecode('contactmanager', $contextname);\n\t\t$code = $fcc->getCodeActive();\n\t\tunset($fcc);\n\n\t\tif (!empty($code)) {\n\t\t\t$this->syncSpeedDials();\n\n\t\t\t$entries = $this->getAllSpeedDials();\n\t\t\tforeach($entries as $entry) {\n\t\t\t\t$ext->add('ext-contactmanager-sd', $code.$entry['speeddial'], '', new \\ext_goto($contextname.',${EXTEN},1'));\n\t\t\t}\n\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_answer());\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_macro('user-callerid'));\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_gotoif('$[${DB_EXISTS(CM/speeddial/${EXTEN:'.strlen($code).'})}=1]','from-internal,${DB(CM/speeddial/${EXTEN:'.strlen($code).'})},1'));\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_goto('bad-number,s,1'));\n\n\t\t\t$ext->addInclude('from-internal-additional', $contextname);\n\t\t}\n\t}\n\n\tpublic static function myDialplanHooks() {\n\t\treturn 400;\n\t}\n\n\t/**\n\t * Get the Contact Image URL\n\t * @param  integer $did The incoming DID to lookup\n\t * @param  integer $ext The local extension to use for lookups\n\t * @return string      The link to return\n\t */\n\tpublic function getExternalImageUrl($did,$ext=null) {\n\t\tif(!empty($ext)) {\n\t\t\treturn 'ajax.php?module=contactmanager&command=image&token='.$this->getToken().'&ext='.$ext.'&did='.$did;\n\t\t} else {\n\t\t\treturn 'ajax.php?module=contactmanager&command=image&token='.$this->getToken().'&did='.$did;\n\t\t}\n\t}\n\n\t/**\n\t * Get Token for unauthenticated Ajax requests\n\t * Will generate a token if one does not exist\n\t * @return string The Token\n\t */\n\tpublic function getToken() {\n\t\tif(!empty($this->token)) {\n\t\t\treturn $this->token;\n\t\t}\n\t\t$this->token = $this->getConfig(\"token\");\n\t\tif(empty($this->token)) {\n\t\t\t$this->token = bin2hex(openssl_random_pseudo_bytes(16));\n\t\t\t$this->setConfig(\"token\",$this->token);\n\t\t}\n\t\treturn $this->token;\n\t}\n\n\tpublic function ajaxRequest($req, &$setting) {\n\t\tswitch ($req) {\n\t\t\tcase 'image':\n\t\t\t\t$setting['authenticate'] = false;\n\t\t\t\t$setting['allowremote'] = true;\n\t\t\tcase 'limage':\n\t\t\tcase 'uploadimage':\n\t\t\tcase 'delimage':\n\t\t\tcase 'grid':\n\t\t\tcase 'getgravatar':\n\t\t\tcase 'checksd':\n\t\t\tcase 'sdgrid':\n\t\t\t\treturn true;\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function ajaxCustomHandler() {\n\t\tswitch($_REQUEST['command']) {\n\t\t\tcase \"image\":\n\t\t\t\t$token = !empty($_REQUEST['token']) ? $_REQUEST['token'] : \"\";\n\t\t\t\t$stoken = $this->getToken();\n\t\t\t\tif($token != $stoken) {\n\t\t\t\t\theader('HTTP/1.0 403 Forbidden');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\tcase \"limage\":\n\t\t\t\t$entryid = !empty($_REQUEST['entryid']) ? $_REQUEST['entryid'] : null;\n\t\t\t\t$type = !empty($_REQUEST['type']) ? $_REQUEST['type'] : null;\n\t\t\t\t$this->displayContactImage($entryid, $type);\n\t\t\t\treturn true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a Contact Image\n\t * @method getContactImage\n\t * @param  integer              $entryid The EntryID in Contact Manager\n\t * @param  string               $type    Type of Entry, Internal or External\n\t * @return string                   The image binary\n\t */\n\tpublic function getContactImage($entryid=null,$type=null) {\n\t\t$mods = $this->freepbx->Hooks->processHooks($entryid,$type);\n\t\tforeach($mods as $mod => $contents) {\n\t\t\tif(!empty($contents)) {\n\t\t\t\t$buffer = $contents;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(empty($buffer)) {\n\t\t\t$buffer = '';\n\t\t\tif(!empty($entryid)) {\n\t\t\t\tif(!empty($type)) {\n\t\t\t\t\tswitch($type) {\n\t\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t\t$data = $this->freepbx->Userman->getUserByID($entryid);\n\t\t\t\t\t\t\t$data = $this->getImageByID($data['id'], $data['email'], 'internal');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"private\" :\n\t\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t\t$data = $this->getEntryByID($entryid);\n\t\t\t\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t\t\t\t$data['image'] = $data['image']['image'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$data = $this->getEntryByID($entryid);\n\t\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t\t$data['image'] = $data['image']['image'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!empty($data['image'])) {\n\t\t\t\t\t$buffer = $data['image'];\n\t\t\t\t}\n\t\t\t} elseif(!empty($_REQUEST['temporary'])) {\n\t\t\t\t$name = basename($_REQUEST['name']);\n\t\t\t\t$buffer = file_get_contents($this->tmp.\"/\".$name);\n\t\t\t} elseif(!empty($_REQUEST['entryid'])) {\n\t\t\t\t$data = $this->getEntryByID($_REQUEST['entryid']);\n\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t$buffer = $data['image']['image'];\n\t\t\t\t}\n\t\t\t} elseif(!empty($_REQUEST['did'])) {\n\t\t\t\t$parts = explode(\".\",$_REQUEST['did']);\n\t\t\t\t$did = $parts[0];\n\t\t\t\tif(!empty($did)) {\n\t\t\t\t\t$did = preg_replace(\"/[^0-9\\*#]/\",\"\",$parts[0]);\n\t\t\t\t\tif(!empty($_POST['ext'])) {\n\t\t\t\t\t\t$user = $this->userman->getUserByDefaultExtension($_POST['ext']);\n\t\t\t\t\t\tif(!empty($user)) {\n\t\t\t\t\t\t\t$data = $this->lookupNumberByUserID($user['id'], $did);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(empty($data)) {\n\t\t\t\t\t\t$data = $this->lookupNumberByUserID(-1, $did);\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($data) && !empty($data['image']['image'])) {\n\t\t\t\t\t\t$buffer = $data['image']['image'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $buffer;\n\t}\n\n\t/**\n\t * Display Contact Image in browser\n\t * @method displayContactImage\n\t * @param  integer              $entryid The EntryID in Contact Manager\n\t * @param  string              $type    Type of Entry, Internal or External\n\t */\n\tpublic function displayContactImage($entryid=null,$type=null) {\n\t\t$buffer = $this->getContactImage($entryid,$type);\n\t\tif(!empty($buffer)) {\n\t\t\t$finfo = new \\finfo(FILEINFO_MIME);\n\t\t\theader(\"Cache-Control: no-cache, must-revalidate\");\n\t\t\theader(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\");\n\t\t\theader(\"Content-type: \".$finfo->buffer($buffer));\n\t\t\techo $buffer;\n\t\t} else {\n\t\t\theader('HTTP/1.0 404 Not Found');\n\t\t}\n\t}\n\n\tpublic function getAllSpeedDials($cached=true) {\n\t\tif($cached && !empty($this->cachedSpeedDials)) {\n\t\t\treturn $this->cachedSpeedDials;\n\t\t}\n\t\t$sql = \"SELECT e.*, s.id as speeddial, n.number, n.type as numbertype, g.type as grouptype FROM contactmanager_entry_speeddials s, contactmanager_group_entries e, contactmanager_entry_numbers n, contactmanager_groups g WHERE e.groupid = g.id AND e.id = s.entryid AND n.id = s.numberid ORDER BY s.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$this->cachedSpeedDials = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $this->cachedSpeedDials;\n\t}\n\n\tpublic function syncSpeedDials() {\n\t\t$sds = $this->getAllSpeedDials(false);\n\t\t$active = array();\n\t\tforeach($sds as $sd) {\n\t\t\t$this->freepbx->astman->database_put(\"CM\",\"speeddial/\".$sd['speeddial'],$sd['number']);\n\t\t\t$active[] = '/CM/speeddial/'.$sd['speeddial'];\n\t\t}\n\t\t$all = $this->freepbx->astman->database_show('CM');\n\t\tforeach($all as $key => $value) {\n\t\t\tif(!in_array($key,$active)) {\n\t\t\t\tpreg_match('/^\\/CM\\/speeddial\\/(\\d+)$/',$key,$match);\n\t\t\t\t$this->freepbx->astman->database_del(\"CM\",\"speeddial/\".$match[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkSpeedDialConflict($id,$entryid=null) {\n\t\tif(is_null($entryid)) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_speeddials WHERE id = :id\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t':id' => $id\n\t\t\t));\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_speeddials WHERE id = :id AND entryid != :entryid\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t':id' => $id,\n\t\t\t\t':entryid' => $entryid\n\t\t\t));\n\t\t}\n\n\t\t$ret = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\treturn empty($ret);\n\t}\n\n\tpublic function ajaxHandler(){\n\t\tswitch ($_REQUEST['command']) {\n\t\t\tcase 'sdgrid':\n\t\t\t\treturn $this->getAllSpeedDials();\n\t\t\tbreak;\n\t\t\tcase 'checksd':\n\t\t\t\tif(empty($_POST['entryid'])) {\n\t\t\t\t\t$ret = $this->checkSpeedDialConflict($_POST['id']);\n\t\t\t\t} else {\n\t\t\t\t\t$ret = $this->checkSpeedDialConflict($_POST['id'],$_POST['entryid']);\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => $ret);\n\t\t\tbreak;\n\t\t\tcase 'getgravatar':\n\t\t\t\t$type = !empty($_POST['grouptype']) ? $_POST['grouptype'] : \"\";\n\t\t\t\t$id = !empty($_POST['id']) ? $_POST['id'] : \"\";\n\t\t\t\tswitch($type) {\n\t\t\t\t\tcase \"private\" :\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t$email = !empty($_POST['email']) ? $_POST['email'] : '';\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"userman\":\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t$email = !empty($_POST['email']) ? $_POST['email'] : '';\n\t\t\t\t\t\tif(empty($email)) {\n\t\t\t\t\t\t\t$data = $this->freepbx->Userman->getUserByID($id);\n\t\t\t\t\t\t\t$email = $data['email'];\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(empty($email)) {\n\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Please enter a valid email address\"));\n\t\t\t\t}\n\t\t\t\t$data = $this->getGravatar($email);\n\t\t\t\tif(!empty($data)) {\n\t\t\t\t\t$dname = \"cm-\".rand().\"-\".md5($email);\n\t\t\t\t\timagepng(imagecreatefromstring($data), $this->tmp.\"/\".$dname.\".png\");\n\t\t\t\t\treturn array(\"status\" => true, \"name\" => $dname, \"filename\" => $dname.\".png\");\n\t\t\t\t} else {\n\t\t\t\t\treturn array(\"status\" => false, \"message\" => sprintf(_(\"Unable to find gravatar for %s\"),$email));\n\t\t\t\t}\n\n\t\t\tbreak;\n\t\t\tcase \"delimage\":\n\t\t\t$type = !empty($_POST['type']) ? $_POST['type'] : 'external';\n\t\t\t\tif(!empty($_POST['id'])) {\n\t\t\t\t\t$this->delImageByID($_POST['id'],$type);\n\t\t\t\t\treturn array(\"status\" => true);\n\t\t\t\t} elseif(!empty($_POST['img'])) {\n\t\t\t\t\t$name = basename($_POST['img']);\n\t\t\t\t\tif(file_exists($this->tmp.\"/\".$name)) {\n\t\t\t\t\t\tunlink($this->tmp.\"/\".$name);\n\t\t\t\t\t\treturn array(\"status\" => true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Invalid\"));\n\t\t\tbreak;\n\t\t\tcase 'uploadimage':\n\t\t\t\t// XXX If the posted file was too large,\n\t\t\t\t// we will get here, but $_FILES is empty!\n\t\t\t\t// Specifically, if the file that was posted is\n\t\t\t\t// larger than 'post_max_size' in php.ini.\n\t\t\t\t// So, php will throw an error, as index\n\t\t\t\t// $_FILES[\"files\"] does not exist, because\n\t\t\t\t// $_FILES is empty.\n\t\t\t\tif (!isset($_FILES)) {\n\t\t\t\t\treturn array(\"status\" => false,\n\t\t\t\t\t\t\"message\" => _(\"File upload failed\"));\n\t\t\t\t}\n\t\t\t\t$this->freepbx->Media();\n\t\t\t\tforeach ($_FILES[\"files\"][\"error\"] as $key => $error) {\n\t\t\t\t\tswitch($error) {\n\t\t\t\t\t\tcase UPLOAD_ERR_OK:\n\t\t\t\t\t\t\t$extension = pathinfo($_FILES[\"files\"][\"name\"][$key], PATHINFO_EXTENSION);\n\t\t\t\t\t\t\t$extension = strtolower($extension);\n\t\t\t\t\t\t\t$supported = array(\"jpg\",\"png\");\n\t\t\t\t\t\t\tif(in_array($extension,$supported)) {\n\t\t\t\t\t\t\t\t$tmp_name = $_FILES[\"files\"][\"tmp_name\"][$key];\n\t\t\t\t\t\t\t\t$dname = \\Media\\Media::cleanFileName($_FILES[\"files\"][\"name\"][$key]);\n\t\t\t\t\t\t\t\t$dname = \"cm-\".rand().\"-\".pathinfo($dname,PATHINFO_FILENAME);\n\t\t\t\t\t\t\t\t//imagepng(imagecreatefromstring(file_get_contents($tmp_name)), $this->tmp.\"/\".$dname.\".png\");\n\t\t\t\t\t\t\t\t$this->resizeImage(file_get_contents($tmp_name),$dname);\n\t\t\t\t\t\t\t\treturn array(\"status\" => true, \"name\" => $dname, \"filename\" => $dname.\".png\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Unsupported file format\"));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_INI_SIZE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file exceeds the upload_max_filesize directive in php.ini\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_FORM_SIZE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_PARTIAL:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file was only partially uploaded\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_NO_FILE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"No file was uploaded\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_NO_TMP_DIR:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Missing a temporary folder\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_CANT_WRITE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Failed to write file to disk\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_EXTENSION:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"A PHP extension stopped the file upload\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Can Not Find Uploaded Files\"));\n\t\t\tbreak;\n\t\t\tcase 'grid':\n\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\t\t\t\t$entries = $this->getEntriesByGroupID((int) $_REQUEST['group']);\n\t\t\t\t$entries = array_values($entries);\n\t\t\t\t$final = array();\n\t\t\t\tswitch($group['type']) {\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\t\t\tif(empty($entry['user'])) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$user = $this->freepbx->Userman->getUserByID($entry['user']);\n\t\t\t\t\t\t\t$final[$i] = $user;\n\t\t\t\t\t\t\t$final[$i]['displayname'] = !empty($user['displayname']) ? $user['displayname'] : $user['fname'] . \" \" . $user['lname'];\n\t\t\t\t\t\t\t$final[$i]['displayname'] = !empty($user['displayname']) ? $user['displayname'] . \" (\".$user['username'].\")\" : $user['username'];\n\t\t\t\t\t\t\t$final[$i]['actions'] = '<a href=\"config.php?display=userman&action=showuser&user='.$user['id'].'\"><i class=\"fa fa-edit fa-fw\"></i></a><a href=\"config.php?display=contactmanager&amp;action=delentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-ban fa-fw\"></i></a>';\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"private\":\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? $entry['numbers'] : array();\n\t\t\t\t\t\t\t$nums = array();\n\t\t\t\t\t\t\tforeach($entry['numbers'] as &$number) {\n\t\t\t\t\t\t\t\t$nums[] = $number['number'] . \"(\".$number['type'].\")\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? implode(\"<br>\",$nums) : \"\";\n\t\t\t\t\t\t\t$entry['actions'] = '<a href=\"config.php?display=contactmanager&amp;action=showentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-edit fa-fw\"></i></a><a href=\"config.php?display=contactmanager&amp;action=delentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-ban fa-fw\"></i></a>';\n\t\t\t\t\t\t\t$final[$i] = $entry;\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn $final;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Resize and image using constraints\n\t * @param  string  $data         Binary image data\n\t * @param  string  $filename     The final filename\n\t * @return string                The basename of the filepath\n\t */\n\tpublic function resizeImage($data, $filename) {\n\t\t$thumb_width = $thumb_height = $this->maxAvatar;\n\t\t$image = imagecreatefromstring($data);\n\t\t$filename = $this->tmp.'/'.$filename.'.png';\n\t\t$width = imagesx($image);\n\t\t$height = imagesy($image);\n\t\t$original_aspect = $width / $height;\n\t\t$thumb_aspect = $thumb_width / $thumb_height;\n\t\tif ( $original_aspect >= $thumb_aspect ) {\n\t\t\t// If image is wider than thumbnail (in aspect ratio sense)\n\t\t\t$new_height = $thumb_height;\n\t\t\t$new_width = $width / ($height / $thumb_height);\n\t\t} else {\n\t\t\t// If the thumbnail is wider than the image\n\t\t\t$new_width = $thumb_width;\n\t\t\t$new_height = $height / ($width / $thumb_width);\n\t\t}\n\t\t$thumb = imagecreatetruecolor( $thumb_width, $thumb_height );\n\t\t// Resize and crop\n\t\timagecopyresampled($thumb,\n\t\t$image,\n\t\t0 - ($new_width - $thumb_width) / 2, // Center the image horizontally\n\t\t0 - ($new_height - $thumb_height) / 2, // Center the image vertically\n\t\t0, 0,\n\t\t$new_width, $new_height,\n\t\t$width, $height);\n\t\timagepng($thumb, $filename, 9);\n\t\treturn basename($filename);\n\t}\n\n\t/**\n\t * Get either a Gravatar URL or complete image tag for a specified email address.\n\t *\n\t * @param string $email The email address\n\t * @source https://gravatar.com/site/implement/images/php/\n\t */\n\tfunction getGravatar($email) {\n\t\t$s = $this->maxAvatar; //Size in pixels, defaults to 80px [ 1 - 2048 ]\n\t\t$d = '404'; //Default imageset to use [ 404 | mm | identicon | monsterid | wavatar ]\n\t\t$r = 'g'; //Maximum rating (inclusive) [ g | pg | r | x ]\n\t\t$pest = new \\Pest('https://www.gravatar.com/avatar/');\n\t\t$email = md5( strtolower( trim( $email ) ) );\n\t\ttry{\n\t\t\treturn $pest->get($email.'?s='.$s.'&d='.$d.'&r='.$r);\n\t\t} catch(\\Exception $e) {\n\t\t\tswitch(get_class($e)) {\n\t\t\t\tcase \"Pest_NotFound\":\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Get Inital Display\n\t * @param {string} $display The Page name\n\t */\n\tpublic function doConfigPageInit($display) {\n\t\tif (isset($_REQUEST['action'])) {\n\t\t\tswitch ($_REQUEST['action']) {\n\t\t\tcase \"delgroup\":\n\t\t\t\t$ret = $this->deleteGroupByID((int) $_REQUEST['group']);\n\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase \"delentry\":\n\t\t\t\t$ret = $this->deleteEntryByID($_REQUEST['entry']);\n\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (isset($_POST['group'])) {\n\n\t\t\t$group = !empty($_POST['group']) ? $_POST['group'] : '';\n\n\t\t\tif (!isset($_POST['entry'])) {\n\t\t\t\t$entry = !empty($_POST['entry']) ? $_POST['entry'] : '';\n\t\t\t\t$grouptype = !empty($_POST['grouptype']) ? $_POST['grouptype'] : '';\n\t\t\t\t$groupname = !empty($_POST['groupname']) ? $_POST['groupname'] : '';\n\t\t\t\t$groupowner = !empty($_POST['owner']) ? $_POST['owner'] : '';\n\n\t\t\t\tif ($groupname) {\n\t\t\t\t\tif ($group) {\n\t\t\t\t\t\t$ret = $this->updateGroup($group, $groupname,$groupowner);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = $this->addGroup($groupname, $grouptype);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t\t);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => _('Group name can not be blank'),\n\t\t\t\t\t'type' => 'danger'\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$grouptype = !empty($_POST['grouptype']) ? $_POST['grouptype'] : '';\n\t\t\t\t$image = !empty($_POST['image']) ? $_POST['image'] : '';\n\t\t\t\t$gravatar = !empty($_POST['gravatar']) && $_POST['gravatar'] == 'on' ? true : false;\n\t\t\t\t$numbers = array();\n\t\t\t\tif(!empty($_POST['number']) && is_array($_POST['number'])) {\n\t\t\t\t\tforeach ($_POST['number'] as $index => $number) {\n\t\t\t\t\t\tif (!$number) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$numbers[$index]['number'] = $number;\n\t\t\t\t\t\t$numbers[$index]['extension'] = $_POST['extension'][$index];\n\t\t\t\t\t\t$numbers[$index]['type'] = $_POST['numbertype'][$index];\n\t\t\t\t\t\t$numbers[$index]['locale'] = $_POST['numberlocale'][$index];\n\t\t\t\t\t\tif ($_POST['sms'][$index]) {\n\t\t\t\t\t\t\t$numbers[$index]['flags'][] = 'sms';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_POST['fax'][$index]) {\n\t\t\t\t\t\t\t$numbers[$index]['flags'][] = 'fax';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$numbers[$index]['speeddial'] = isset($_POST['numbersde'][$index]) ? $_POST['numbersd'][$index] : \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$xmpps = array();\n\t\t\t\tif(!empty($_POST['xmpp']) && is_array($_POST['xmpp'])) {\n\t\t\t\t\tforeach ($_POST['xmpp'] as $index => $xmpp) {\n\t\t\t\t\t\tif (!$xmpp) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$xmpps[$index]['xmpp'] = $xmpp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$emails = array();\n\t\t\t\tif(!empty($_POST['email']) && is_array($_POST['email'])) {\n\t\t\t\t\tforeach ($_POST['email'] as $index => $email) {\n\t\t\t\t\t\tif (!$email) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$emails[$index]['email'] = $email;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$website = array();\n\t\t\t\tif(!empty($_POST['website']) && is_array($_POST['website'])) {\n\t\t\t\t\tforeach ($_POST['website'] as $index => $website) {\n\t\t\t\t\t\tif (!$website) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$websites[$index]['website'] = $website;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$entry = array(\n\t\t\t\t\t'id' => $_POST['entry'] ? $_POST['entry'] : '',\n\t\t\t\t\t'groupid' => $group,\n\t\t\t\t\t'user' => -1,\n\t\t\t\t\t'numbers' => $numbers,\n\t\t\t\t\t'xmpps' => $xmpps,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'websites' => $websites,\n\t\t\t\t\t'displayname' => $_POST['displayname'] ? $_POST['displayname'] : '',\n\t\t\t\t\t'fname' => $_POST['fname'] ? $_POST['fname'] : '',\n\t\t\t\t\t'lname' => $_POST['lname'] ? $_POST['lname'] : '',\n\t\t\t\t\t'title' => $_POST['title'] ? $_POST['title'] : '',\n\t\t\t\t\t'company' => $_POST['company'] ? $_POST['company'] : '',\n\t\t\t\t\t'address' => $_POST['address'] ? $_POST['address'] : '',\n\t\t\t\t\t'image' => $image,\n\t\t\t\t\t'gravatar' => $gravatar\n\t\t\t\t);\n\n\t\t\t\tswitch ($grouptype) {\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\tthrow new \\Exception(\"Cant add users this way\");\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"private\":\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\tif (count($entry['numbers']) < 1) {\n\t\t\t\t\t\t$this->message = array(\n\t\t\t\t\t\t'message' => _('An entry must have numbers.'),\n\t\t\t\t\t\t'type' => 'danger'\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ($entry['id']) {\n\t\t\t\t\t$ret = $this->updateEntry($entry['id'], $entry);\n\t\t\t\t} else {\n\t\t\t\t\t$ret = $this->addEntryByGroupID($group, $entry);\n\t\t\t\t}\n\n\t\t\t\t$this->message = array(\n\t\t\t\t'message' => $ret['message'],\n\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getFeatureCodeStatus() {\n\t\t$fcc = new \\featurecode('contactmanager', 'app-contactmanager-sd');\n\t\treturn array(\n\t\t\t\"code\" => $fcc->getCode(),\n\t\t\t\"enabled\" => $fcc->isEnabled()\n\t\t);\n\t}\n\n\tpublic function getRightNav($request) {\n\t\t$action = '';\n\t\t$rnav = load_view(dirname(__FILE__).'/views/rnav.php', array(\"action\" => $action));\n\t\treturn $rnav;\n\t}\n\n\t/**\n\t * Function used in page.contactmanager.php\n\t */\n\tpublic function myShowPage() {\n\t\t$groups = $this->getGroupsGroupedByType();\n\t\t$users = $this->userman->getAllUsers();\n\n\t\t$action = !empty($_REQUEST['action']) ? $_REQUEST['action'] : '';\n\t\tif ($action == \"delentry\") {\n\t\t\t$action = \"\";\n\t\t}\n\n\t\t$numbertypes = array(\n\t\t\t'work' => _('Work'),\n\t\t\t'home' => _('Home'),\n\t\t\t'cell' => _('Cell'),\n\t\t\t'other' => _('Other'),\n\t\t);\n\n\t\t$content = '';\n\t\t//\n\n\t\tswitch($action) {\n\t\t\tcase \"speeddials\":\n\t\t\t\t$speeddialcode = $this->getFeatureCodeStatus();\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/speeddial-grid.php', array(\"speeddialcode\" => $speeddialcode));\n\t\t\tbreak;\n\t\t\tcase \"showgroup\":\n\t\t\tcase \"addgroup\":\n\t\t\t\tif ($action == \"showgroup\" && !empty((int) $_REQUEST['group'])) {\n\t\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\t\t\t\t\t$entries = $this->getEntriesByGroupID((int) $_REQUEST['group']);\n\t\t\t\t}\n\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/group.php', array(\"group\" => $group, \"entries\" => $entries, \"users\" => $users, \"message\" => $this->message));\n\t\t\tbreak;\n\t\t\tcase \"showentry\":\n\t\t\tcase \"addentry\":\n\t\t\t\tif (!empty((int) $_REQUEST['group'])) {\n\t\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\n\t\t\t\t\tif ($action == \"showentry\" && !empty($_REQUEST['entry'])) {\n\t\t\t\t\t\t$entry = $this->getEntryByID($_REQUEST['entry']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$entry = array();\n\t\t\t\t\t}\n\t\t\t\t\t$speeddialcode = $this->getFeatureCodeStatus();\n\t\t\t\t\t$content = load_view(dirname(__FILE__).'/views/entry.php', array(\"regionlist\" => $this->getRegionList(), \"speeddialcode\" => $speeddialcode, \"numbertypes\" => $numbertypes, \"group\" => $group, \"entry\" => $entry, \"users\" => $users, \"message\" => $this->message));\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$file['post'] = ini_get('post_max_size');\n\t\t\t\t$file['upload'] = ini_get('upload_max_filesize');\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/grid.php', array(\"groups\" => $groups, \"types\" => $this->types, \"file\" => $file));\n\t\t\tbreak;\n\t\t}\n\n\t\treturn load_view(dirname(__FILE__).'/views/main.php', array(\"message\" => $this->message, \"content\" => $content));\n\t}\n\n\tpublic function getActionBar($request) {\n\t\t$buttons = array();\n\n\t\tswitch ($request['display']) {\n\t\tcase 'contactmanager':\n\t\t\tswitch($request['action']) {\n\t\t\tcase 'delentry':\n\t\t\t\tbreak;\n\t\t\tcase 'showgroup':\n\t\t\t\t$buttons['delete'] = array(\n\t\t\t\t\t'name' => 'delete',\n\t\t\t\t\t'id' => 'delete',\n\t\t\t\t\t'value' => _('Delete')\n\t\t\t\t);\n\t\t\t/* Fall through */\n\t\t\tcase 'addgroup':\n\t\t\t\t$buttons['reset'] = array(\n\t\t\t\t\t'name' => 'reset',\n\t\t\t\t\t'id' => 'reset',\n\t\t\t\t\t'value' => _('Reset')\n\t\t\t\t);\n\t\t\t\t$buttons['submit'] = array(\n\t\t\t\t\t'name' => 'submit',\n\t\t\t\t\t'id' => 'submit',\n\t\t\t\t\t'value' => _('Submit')\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'showentry':\n\t\t\t\t$buttons['delete'] = array(\n\t\t\t\t\t'name' => 'delete',\n\t\t\t\t\t'id' => 'delete',\n\t\t\t\t\t'value' => _('Delete')\n\t\t\t\t);\n\t\t\t/* Fall through */\n\t\t\tcase 'addentry':\n\t\t\t\t$buttons['reset'] = array(\n\t\t\t\t\t'name' => 'reset',\n\t\t\t\t\t'id' => 'reset',\n\t\t\t\t\t'value' => _('Reset')\n\t\t\t\t);\n\t\t\t\t$buttons['submit'] = array(\n\t\t\t\t\t'name' => 'submit',\n\t\t\t\t\t'id' => 'submit',\n\t\t\t\t\t'value' => _('Submit')\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $buttons;\n\t}\n\n\tpublic function usermanDelGroup($id,$display,$data) {\n\t\t$groups = $this->getGroups();\n\t\tforeach($data['users'] as $user) {\n\t\t\tif($this->freepbx->Userman->getCombinedModuleSettingByID($user,'contactmanager','show')) {\n\t\t\t\tforeach ($groups as $group) {\n\t\t\t\t\tif ($group['type'] == 'internal') {\n\t\t\t\t\t\t$data = $this->userman->getUserByID($user);\n\t\t\t\t\t\t$data['extraData'] = $data;\n\t\t\t\t\t\t$data['user'] = $user;\n\t\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanAddGroup($id, $display, $data) {\n\t\t$this->usermanUpdateGroup($id,$display,$data);\n\t}\n\n\tpublic function usermanUpdateGroup($id,$display,$data) {\n\t\tif($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t}\n\t\t$groups = $this->getGroups();\n\t\tforeach($data['users'] as $user) {\n\t\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($user,'contactmanager','showingroups');\n\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t$data = $this->userman->getUserByID($user);\n\t\t\t\t\t$data['extraData'] = $data;\n\t\t\t\t\t$data['user'] = $user;\n\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t} else {\n\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\t\tif ($entry['user'] == $user) {\n\t\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Call to be run when user is deleted from user manager\n\t * @param {int} $id      The usermanager id\n\t * @param {string} $display The page executing this command\n\t * @param {array} $data    Array of data about the user\n\t */\n\tpublic function usermanDelUser($id, $display, $data) {\n\t\t$groups = $this->getGroups();\n\t\tforeach ($groups as $group) {\n\t\t\tif ($group['owner'] == $id) {\n\t\t\t\t/* Remove groups owned by user. */\n\t\t\t\t$this->deleteGroupByID($group['id']);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* Remove user from all groups they're in. */\n\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\tif ($entry['user'] == $id) {\n\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanAddUser($id, $display, $data) {\n\t\tif($display == 'extensions' || $display == 'users') {\n\t\t} else if($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t\tif(isset($_POST['contactmanager_image'])) {\n\t\t\t\t$this->updateImageByID($id, $_POST['contactmanager_image'], ($_POST['contactmanager_gravatar'] == \"on\" ? 1 : 0), 'internal');\n\t\t\t}\n\t\t\t$this->setConfig('userLocale', $_POST['contactmanager_dialinglocale'], $id);\n\t\t}\n\n\n\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($id,'contactmanager','showingroups');\n\t\tif(!empty($showingroups)) {\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t$data['user'] = $id;\n\t\t\t\t\t$out = $this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanUpdateUser($id, $display, $data) {\n\t\tif($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t\tif(isset($_POST['contactmanager_image'])) {\n\t\t\t\t$this->updateImageByID($id, $_POST['contactmanager_image'], ($_POST['contactmanager_gravatar'] == \"on\" ? 1 : 0), 'internal');\n\t\t\t}\n\t\t\t$this->setConfig('userLocale', $_POST['contactmanager_dialinglocale'], $id);\n\t\t}\n\n\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($id,'contactmanager','showingroups');\n\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t$groups = $this->getGroups();\n\t\tforeach ($groups as $group) {\n\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t$data['user'] = $id;\n\t\t\t\t$out = $this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t} else {\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\tif ($entry['user'] == $id) {\n\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function transformUsermanDataToEntry($data) {\n\t\t$entry = array(\n\t\t\t'userid' => $data['id'],\n\t\t\t'displayname' => !empty($data['extraData']['displayname']) ? $data['extraData']['displayname'] : '',\n\t\t\t'fname' => !empty($data['extraData']['fname']) ? $data['extraData']['fname'] : '',\n\t\t\t'lname' => !empty($data['extraData']['lname']) ? $data['extraData']['lname'] : '',\n\t\t\t'title' => !empty($data['extraData']['title']) ? $data['extraData']['title'] : '',\n\t\t\t'company' => !empty($data['extraData']['company']) ? $data['extraData']['company'] : '',\n\t\t\t'address' => !empty($data['extraData']['address']) ? $data['extraData']['address'] : '',\n\t\t\t'numbers' => array(\n\n\t\t\t),\n\t\t\t'emails' => array(\n\n\t\t\t)\n\t\t);\n\t\tif(!empty($data['extraData']['email'])) {\n\t\t\t$entry['emails'][] = array(\n\t\t\t\t'email' => $data['extraData']['email']\n\t\t\t);\n\t\t}\n\n\t\t$locale = $this->getConfig('userLocale',$data['id']);\n\n\t\t$types = array(\"cell\",\"work\",\"home\");\n\t\tforeach($types as $type) {\n\t\t\tif(!empty($data['extraData'][$type])) {\n\t\t\t\t$number = array(\n\t\t\t\t\t'number' => $data['extraData'][$type],\n\t\t\t\t\t'type' => $type\n\t\t\t\t);\n\t\t\t\tif(!empty($locale)) {\n\t\t\t\t\t$number['locale'] = $locale;\n\t\t\t\t}\n\t\t\t\t$entry['numbers'][] = $number;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($data['extraData']['fax'])) {\n\t\t\t$number = array(\n\t\t\t\t'number' => $data['extraData']['fax'],\n\t\t\t\t'type' => 'other',\n\t\t\t\t'flags' => array(\n\t\t\t\t\t'fax'\n\t\t\t\t)\n\t\t\t);\n\t\t\tif(!empty($locale)) {\n\t\t\t\t$number['locale'] = $locale;\n\t\t\t}\n\t\t\t$entry['numbers'][] = $number;\n\t\t}\n\n\t\t$user = $this->userman->getUserByID($data['id']);\n\n\t\tif($user['default_extension'] !== 'none') {\n\t\t\t$number = array(\n\t\t\t\t'number' => $user['default_extension'],\n\t\t\t\t'type' => 'internal'\n\t\t\t);\n\t\t\t$entry['numbers'][] = $number;\n\t\t}\n\n\t\treturn $entry;\n\t}\n\n\t/**\n\t * Get All Groups\n\t *\n\t * Get a List of all groups and their data\n\t *\n\t * @return array\n\t */\n\tpublic function getGroups() {\n\t\tif(!empty($this->groupsCache)) {\n\t\t\treturn $this->groupsCache;\n\t\t}\n\t\t$sql = \"UPDATE contactmanager_groups SET `type` = 'private' WHERE owner != -1;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$sql = \"SELECT * FROM contactmanager_groups ORDER BY `id`\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$this->groupsCache = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $this->groupsCache;\n\t}\n\n\tpublic function getGroupsGroupedByType() {\n\t\t$final = array();\n\t\t$sql = \"UPDATE contactmanager_groups SET `type` = 'private' WHERE owner != -1;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$sql = \"SELECT * FROM contactmanager_groups ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$array = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\tforeach($array as $a) {\n\t\t\t$final[$a['type']][] = $a;\n\t\t}\n\t\treturn $final;\n\t}\n\n\t/**\n\t * Get all groups by owner\n\t * @param {int} $owner The owner ID\n\t */\n\tpublic function getGroupsbyOwner($owner) {\n\t\t$user = $this->freepbx->Userman->getUserByID($owner);\n\t\tif(empty($user)) {\n\t\t\treturn array();\n\t\t}\n\t\t$assigned = $this->freepbx->Userman->getCombinedModuleSettingByID($user['id'],'contactmanager','groups');\n\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `owner` = :id\";\n\t\tif (!empty($assigned) && !in_array(\"*\",$assigned) && !in_array(\"false\",$assigned)) {\n\t\t\t$impode = implode(',',$assigned);\n\t\t\tif(!empty($impode)) {\n\t\t\t\t$sql .= \" OR `id` IN (\".implode(',',$assigned).\")\";\n\t\t\t}\n\t\t} else if(!empty($assigned) && in_array(\"*\",$assigned) && !in_array(\"false\",$assigned)) {\n\t\t\t$sql .= \" OR `owner` = -1\";\n\t\t}\n\t\t$sql .= \" ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $owner));\n\t\t$ret = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * Get all groups by owner unrestricted by Userman Settings\n\t * @param  int $owner Owner ID (-1 for all)\n\t * @return array        Array of groups\n\t */\n\tpublic function getUnrestrictedGroupsbyOwner($owner) {\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `owner` = :id ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $owner));\n\t\treturn $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t}\n\n\t/**\n\t * Get Group Information by Group ID\n\t *\n\t * This gets group information by Contact Manager Group ID\n\t *\n\t * @param string $id The ID of the group from Contact Manager\n\t * @return array\n\t */\n\tpublic function getGroupByID($id) {\n\t\tif(!empty($this->groupCache[$id])) {\n\t\t\treturn $this->groupCache[$id];\n\t\t}\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$group = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\t$this->groupCache[$id] = $group;\n\t\treturn $group;\n\t}\n\n\t/**\n\t * Delete Group by ID\n\t * @param {int} $id The group ID\n\t */\n\tpublic function deleteGroupByID($id) {\n\t\t$group = $this->getGroupByID($id);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$ret = $this->deleteEntriesByGroupID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_groups WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\t$this->groupCache[$id] = null;\n\t\t$this->groupsCache = null;\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully deleted\"));\n\t}\n\n\t/**\n\t * Add group\n\t * @param {string} $name            The group name\n\t * @param {string} $type='internal' The type of group, can be internal or external\n\t * @param {int} $owner           =             -1 The group owner, if -1 then everyone owns\n\t */\n\tpublic function addGroup($name, $type='internal', $owner = -1) {\n\t\tif (!$name || empty($name)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group name can not be blank\"));\n\t\t}\n\t\t$sql = \"INSERT INTO contactmanager_groups (`name`, `owner`, `type`) VALUES (:name, :owner, :type)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':name' => $name,\n\t\t':owner' => $owner,\n\t\t':type' => $type,\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\n\t\tif ($type == 'internal') {\n\t\t\t$groups = $this->userman->getAllGroups();\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByGID($group['id'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\tif(in_array(\"*\",$showingroups)) {\n\t\t\t\t\tforeach ($users as $user) {\n\t\t\t\t\t\tif(in_array($user['id'],$group['users'])) {\n\t\t\t\t\t\t\t$user['user'] = $id;\n\t\t\t\t\t\t\t$this->addEntryByGroupID($id, $this->transformUsermanDataToEntry($user));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Update Group\n\t * @param {int} $id    The group ID\n\t * @param {string} $name  The updated group name\n\t * @param {int} $owner =             -1 The owner\n\t */\n\tpublic function updateGroup($id, $name, $owner = -1) {\n\t\t$group = $this->getGroupByID($id);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => sprintf(_(\"Group '%s' does not exist\"), $id));\n\t\t}\n\t\tif (!$name || empty($name)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group name can not be blank\"));\n\t\t}\n\t\t$sql = \"UPDATE contactmanager_groups SET `name` = :name, `owner` = :owner WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':name' => $name,\n\t\t':owner' => $owner,\n\t\t':id' => $id,\n\t\t));\n\n\t\t$this->groupCache[$id] = null;\n\t\t$this->groupsCache = null;\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully updated\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Get all information about an Entry\n\t * @param {int} $id The entry ID\n\t */\n\tpublic function getEntryByID($id) {\n\t\t$fields = array(\n\t\t'e.id',\n\t\t'e.id as uid',\n\t\t'e.groupid',\n\t\t'e.user',\n\t\t'e.displayname',\n\t\t'e.fname',\n\t\t'e.lname',\n\t\t'e.title',\n\t\t'e.company',\n\t\t'e.address as address',\n\t\t'g.type as type'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_group_entries as e, contactmanager_groups as g WHERE e.id = :id AND e.groupid = g.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$entry = $sth->fetch(\\PDO::FETCH_ASSOC);\n\n\t\t$numbers = $this->getNumbersByEntryID($id);\n\t\tif ($numbers) {\n\t\t\tforeach ($numbers as $number) {\n\t\t\t\t$number['flags'] = !empty($number['flags']) ? explode('|', $number['flags']) : array();\n\t\t\t\t$number['flags'][] = 'phone';\n\t\t\t\t$entry['numbers'][$number['id']] = array(\n\t\t\t\t'number' => $number['number'],\n\t\t\t\t'extension' => $number['extension'],\n\t\t\t\t'countrycode' => $number['countrycode'],\n\t\t\t\t'nationalnumber' => $number['nationalnumber'],\n\t\t\t\t'regioncode' => $number['regioncode'],\n\t\t\t\t'locale' => $number['locale'],\n\t\t\t\t'stripped' => $number['stripped'],\n\t\t\t\t'E164' => $number['E164'],\n\t\t\t\t'possibleshort' => $number['possibleshort'],\n\t\t\t\t'type' => $number['type'],\n\t\t\t\t'flags' => $number['flags'],\n\t\t\t\t'primary' => isset($number['flags'][0]) ? implode(\",\", $number['flags']) : 'phone',\n\t\t\t\t'speeddial' => $number['speeddial']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$xmpps = $this->getXMPPsByEntryID($id);\n\t\tif ($xmpps) {\n\t\t\tforeach ($xmpps as $xmpp) {\n\t\t\t\t$entry['xmpps'][$xmpp['id']] = array(\n\t\t\t\t'xmpp' => $xmpp['xmpp'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$emails = $this->getEmailsByEntryID($id);\n\t\tif ($emails) {\n\t\t\tforeach ($emails as $email) {\n\t\t\t\t$entry['emails'][$email['id']] = array(\n\t\t\t\t'email' => $email['email'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$websites = $this->getWebsitesByEntryID($id);\n\t\tif ($websites) {\n\t\t\tforeach ($websites as $website) {\n\t\t\t\t$entry['websites'][$website['id']] = array(\n\t\t\t\t'website' => $website['website'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\t\tswitch($group['type']) {\n\t\t\tcase \"private\" :\n\t\t\tcase \"external\":\n\t\t\t\t$email = !empty($entry['emails'][0]) ? $entry['emails'][0] : '';\n\t\t\t\t$image = $this->getImageByID($id, $email, 'external');\n\t\t\t\t$entry['image'] = $image;\n\t\t\t\t$entry['internal'] = false;\n\t\t\tbreak;\n\t\t\tcase \"internal\":\n\t\t\t\t$email = !empty($entry['emails'][0]) ? $entry['emails'][0] : '';\n\t\t\t\t$image = $this->getImageByID($entry['user'], $email, 'internal');\n\t\t\t\t$entry['image'] = $image;\n\t\t\t\t$entry['internal'] = true;\n\t\t\t\t$user = $this->userman->getUserByID($entry['user']);\n\t\t\t\t$entry['default_extension'] = $user['default_extension'];\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new \\Exception(\"Unknown type of {$group['type']}\");\n\t\t\tbreak;\n\t\t}\n\t\treturn $entry;\n\t}\n\n\t/**\n\t * Get all Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getEntriesByGroupID($groupid) {\n\t\t$entries = array();\n\t\t$sql = \"SELECT e.id, e.id as uid, e.groupid, e.user, e.displayname, e.fname, e.lname, e.title, e.company, e.address, g.type FROM contactmanager_group_entries e, contactmanager_groups g WHERE g.id = e.groupid AND e.groupid = :groupid ORDER BY e.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$ents = $sth->fetchAll(\\PDO::FETCH_ASSOC | \\PDO::FETCH_UNIQUE);\n\t\t$e = array();\n\t\tforeach($ents as $uid => $entry) {\n\t\t\t$entry = array_merge($entry,array(\n\t\t\t\t'xmpps' => array(\n\n\t\t\t\t),\n\t\t\t\t'emails' => array(\n\n\t\t\t\t),\n\t\t\t\t'websites' => array(\n\n\t\t\t\t),\n\t\t\t\t'numbers' => array(\n\n\t\t\t\t),\n\t\t\t\t'image' => false,\n\t\t\t\t'default_extension' => null,\n\t\t\t\t'internal' => $entry['type'] === 'internal' ? true : false\n\t\t\t));\n\n\t\t\t$e[$uid] = $entry;\n\t\t}\n\t\t//end cleanup\n\t\t$group = $this->getGroupByID($groupid);\n\t\t$entries = $e;\n\n\t\t$numbers = $this->getNumbersByGroupID($groupid);\n\t\tif ($numbers) {\n\t\t\tforeach ($numbers as $number) {\n\t\t\t\t$entries[$number['entryid']]['numbers'][$number['id']] = array(\n\t\t\t\t\t'number' => $number['number'],\n\t\t\t\t\t'extension' => $number['extension'],\n\t\t\t\t\t'countrycode' => $number['countrycode'],\n\t\t\t\t\t'nationalnumber' => $number['nationalnumber'],\n\t\t\t\t\t'regioncode' => $number['regioncode'],\n\t\t\t\t\t'locale' => $number['locale'],\n\t\t\t\t\t'stripped' => $number['stripped'],\n\t\t\t\t\t'E164' => $number['E164'],\n\t\t\t\t\t'possibleshort' => $number['possibleshort'],\n\t\t\t\t\t'type' => $number['type'],\n\t\t\t\t\t'flags' => $number['flags'] ? explode('|', $number['flags']) : array(),\n\t\t\t\t\t'speeddial' => $number['speeddial']\n\t\t\t\t);\n\t\t\t\tif($number['type'] === 'internal') {\n\t\t\t\t\t$entries[$number['entryid']]['default_extension'] = $number['number'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$xmpps = $this->getXMPPsByGroupID($groupid);\n\t\tif ($xmpps) {\n\t\t\tforeach ($xmpps as $xmpp) {\n\t\t\t\t$entries[$xmpp['entryid']]['xmpps'][$xmpp['id']] = array(\n\t\t\t\t'xmpp' => $xmpp['xmpp'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$emails = $this->getEmailsByGroupID($groupid);\n\t\tif ($emails) {\n\t\t\tforeach ($emails as $email) {\n\t\t\t\t$entries[$email['entryid']]['emails'][$email['id']] = array(\n\t\t\t\t'email' => $email['email'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$websites = $this->getWebsitesByGroupID($groupid);\n\t\tif ($websites) {\n\t\t\tforeach ($websites as $website) {\n\t\t\t\t$entries[$website['entryid']]['websites'][$website['id']] = array(\n\t\t\t\t'website' => $website['website'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tswitch($group['type']) {\n\t\t\tcase \"internal\":\n\t\t\t\t$images = $this->getImagesByGroupID($groupid,'internal');\n\t\t\t\t$hasImages = array();\n\t\t\t\tforeach($images as $image) {\n\t\t\t\t\t$hasImages[] = $image['uid'];\n\t\t\t\t}\n\t\t\t\t$users = $this->userman->getAllUsers();\n\t\t\t\tforeach($users as $user) {\n\t\t\t\t\tforeach($entries as &$entry) {\n\t\t\t\t\t\tif($entry['user'] === $user['id']) {\n\t\t\t\t\t\t\t$entry['default_extension'] = $user['default_extension'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(in_array($entry['user'],$hasImages)) {\n\t\t\t\t\t\t\t$entry['image'] = true; //we do this to not explode the size of the json\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase \"private\" :\n\t\t\tcase \"external\":\n\t\t\tdefault:\n\t\t\t\t$images = $this->getImagesByGroupID($groupid,'external');\n\t\t\t\tif($images) {\n\t\t\t\t\tforeach ($images as $image) {\n\t\t\t\t\t\t$entries[$image['entryid']]['image'] = true; //we do this to not explode the size of the json\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\n\t\treturn $entries;\n\t}\n\n\t/**\n\t * Delete Entry by ID\n\t * @param {int} $id The entry ID\n\t */\n\tpublic function deleteEntryByID($id) {\n\t\t//getEntryByID loops back here dont use it\n\t\t$sql = \"SELECT e.groupid, e.user FROM contactmanager_group_entries as e, contactmanager_groups as g WHERE e.id = :id AND e.groupid = g.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$entry = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(empty($entry)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\n\t\t$ret = $this->deleteNumbersByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteXMPPsByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteEmailsByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteWebsitesByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\tif($group['type'] == \"internal\") {\n\t\t\t$this->userman->setModuleSettingByID($entry['user'],'contactmanager','show', false);\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_group_entries WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteEntriesByGroupID($groupid) {\n\t\t$ret = $this->deleteNumbersByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteXMPPsByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteEmailsByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteWebsitesByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_group_entries WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entries successfully deleted\"));\n\t}\n\n\t/**\n\t * Update Group Entry by Group ID and User Data\n\t * @param  int $groupid The group ID\n\t * @param  array $entry   Array of entry data\n\t * @return [type]          [description]\n\t */\n\tpublic function updateUsermanEntryByGroupID($groupid, $entry) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"SELECT * FROM contactmanager_group_entries WHERE `user` = :user AND `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => $entry['userid']\n\t\t));\n\t\t$data = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(empty($data)) {\n\t\t\treturn $this->addEntryByGroupID($groupid, $entry);\n\t\t}\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `displayname` = :displayname, `fname` = :fname, `lname` = :lname, `title` = :title, `company` = :company, `address` = :address WHERE `user` = :user AND `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => $entry['userid'],\n\t\t':displayname' => !empty($entry['displayname']) ? $entry['displayname'] : '',\n\t\t':fname' => !empty($entry['fname']) ? $entry['fname'] : '',\n\t\t':lname' => !empty($entry['lname']) ? $entry['lname'] : '',\n\t\t':title' => !empty($entry['title']) ? $entry['title'] : '',\n\t\t':company' => !empty($entry['company']) ? $entry['company'] : '',\n\t\t':address' => !empty($entry['address']) ? $entry['address'] : '',\n\t\t));\n\n\t\t$this->updateImageByID($data['id'], !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$this->deleteNumbersByEntryID($data['id']);\n\n\t\t$this->deleteXMPPsByEntryID($data['id']);\n\n\t\t$this->deleteEmailsByEntryID($data['id']);\n\n\t\t$this->deleteWebsitesByEntryID($data['id']);\n\n\t\t$this->addNumbersByEntryID($data['id'], !empty($entry['numbers']) ? $entry['numbers'] : '');\n\n\t\t$this->addXMPPsByEntryID($data['id'], !empty($entry['xmpps']) ? $entry['xmpps'] : '');\n\n\t\t$this->addEmailsByEntryID($data['id'], !empty($entry['emails']) ? $entry['emails'] : '');\n\n\t\t$this->addWebsitesByEntryID($data['id'], !empty($entry['websites']) ? $entry['websites'] : '');\n\t\t$this->freepbx->Hooks->processHooks($data['id'], $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully updated\"), \"id\" => $data['id']);\n\t}\n\n\t/**\n\t * Add Entry to Group\n\t * @param {int} $groupid The group ID\n\t * @param {array} $entry   Array of Entry information\n\t */\n\tpublic function addEntryByGroupID($groupid, $entry) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_group_entries (`groupid`, `user`, `displayname`, `fname`, `lname`, `title`, `company`, `address`, `uuid`) VALUES (:groupid, :user, :displayname, :fname, :lname, :title, :company, :address, UUID())\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => !empty($entry['userid']) ? $entry['userid'] : -1,\n\t\t':displayname' => isset($entry['displayname']) ? $entry['displayname'] : \"\",\n\t\t':fname' => isset($entry['fname']) ? $entry['fname'] : \"\",\n\t\t':lname' => isset($entry['lname']) ? $entry['lname'] : \"\",\n\t\t':title' => isset($entry['title']) ? $entry['title'] : \"\",\n\t\t':company' => isset($entry['company']) ? $entry['company'] : \"\",\n\t\t':address' => isset($entry['address']) ? $entry['address'] : \"\"\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\n\t\t$this->updateImageByID($id, !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$this->deleteNumbersByEntryID($id);\n\n\t\t$this->deleteXMPPsByEntryID($id);\n\n\t\t$this->deleteEmailsByEntryID($id);\n\n\t\t$this->deleteWebsitesByEntryID($id);\n\n\t\tif(!empty($entry['numbers'])){\n\t\t\tforeach($entry['numbers'] as $numbers){\n\t\t\t\tif (empty($numbers['speeddial'])){\n\t\t\t\t\t\tunset($numbers['speeddial']);\n\t\t\t\t}\n\t\t\t\t$entrynum[] = $numbers;\n\t\t\t}\n\t\t}\n\n\t\t$this->addNumbersByEntryID($id, !empty($entrynum) ? $entrynum : '');\n\n\t\t$this->addXMPPsByEntryID($id, !empty($entry['xmpps']) ? $entry['xmpps'] : '');\n\n\t\t$this->addEmailsByEntryID($id, !empty($entry['emails']) ? $entry['emails'] : '');\n\n\t\t$this->addWebsitesByEntryID($id, !empty($entry['websites']) ? $entry['websites'] : '');\n\t\t$this->freepbx->Hooks->processHooks($id, $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Add Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t * @param {array} $entries Array of Entry data\n\t */\n\tpublic function addEntriesByGroupID($groupid, $entries) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\tforeach ($entries as $entry) {\n\t\t\t$this->addEntryByGroupID($groupid, $entry);\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entries successfully added\"));\n\t}\n\n\t/**\n\t * Update Entry\n\t * @param {int} $id    The entry ID\n\t * @param {array} $entry Array of Entry Data\n\t */\n\tpublic function updateEntry($id, $entry) {\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"SELECT owner FROM contactmanager_groups WHERE id = :groupid ;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $entry['groupid'],\n\t\t));\n\t\t$own = $sth->fetch(\\PDO::FETCH_ASSOC);\n\n\t\tif (!$this->getEntryByID($id)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `groupid` = :groupid, `user` = :user, `displayname` = :displayname, `fname` = :fname, `lname` = :lname, `title` = :title, `company` = :company, `address` = :address WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $entry['groupid'],\n\t\t':user' => !empty($entry['userid']) ? $entry['userid'] : -1,\n\t\t':displayname' => $entry['displayname'],\n\t\t':fname' => $entry['fname'],\n\t\t':lname' => $entry['lname'],\n\t\t':title' => $entry['title'],\n\t\t':company' => $entry['company'],\n\t\t':address' => $entry['address'],\n\t\t':id' => $id,\n\t\t));\n\n\t\t$entry['numbers'] = !empty($entry['numbers']) ? $entry['numbers'] : array();\n\t\t$entry['xmpps'] = !empty($entry['xmpps']) ? $entry['xmpps'] : array();\n\t\t$entry['emails'] = !empty($entry['emails']) ? $entry['emails'] : array();\n\t\t$entry['websites'] = !empty($entry['websites']) ? $entry['websites'] : array();\n\n\t\t$this->updateImageByID($id, !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$ret = $this->deleteNumbersByEntryID($id);\n\t\t$this->addNumbersByEntryID($id, $entry['numbers']);\n\n\t\t$ret = $this->deleteXMPPsByEntryID($id);\n\t\t$this->addXMPPsByEntryID($id, $entry['xmpps']);\n\n\t\t$ret = $this->deleteEmailsByEntryID($id);\n\t\t$this->addEmailsByEntryID($id, $entry['emails']);\n\n\t\t$ret = $this->deleteWebsitesByEntryID($id);\n\t\t$this->addWebsitesByEntryID($id, $entry['websites']);\n\t\t$this->freepbx->Hooks->processHooks($id, $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully updated\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Get all numbers by entry ID\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function getNumbersByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'n.id',\n\t\t'n.entryid',\n\t\t'n.number',\n\t\t'n.extension',\n\t\t'n.countrycode',\n\t\t'n.nationalnumber',\n\t\t'n.regioncode',\n\t\t'n.locale',\n\t\t'n.stripped',\n\t\t'n.E164',\n\t\t'n.possibleshort',\n\t\t'n.type',\n\t\t'n.flags',\n\t\t's.id as speeddial'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_numbers as n\n\t\tLEFT JOIN contactmanager_entry_speeddials as s ON (s.numberid = n.id) WHERE n.entryid = :entryid ORDER BY n.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Get all images by group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getImagesByGroupID($groupid,$type=\"internal\") {\n\t\tif($type == \"external\" || $type == \"private\") {\n\t\t\t$fields = array(\n\t\t\t'e.id',\n\t\t\t'n.entryid',\n\t\t\t'n.image',\n\t\t\t'n.format'\n\t\t\t);\n\t\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_images as n\n\t\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id\";\n\t\t} else {\n\t\t\t$fields = array(\n\t\t\t'e.id',\n\t\t\t'n.uid',\n\t\t\t'n.image',\n\t\t\t'n.format'\n\t\t\t);\n\t\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_userman_images as n\n\t\t\tLEFT JOIN contactmanager_group_entries as e ON (n.uid = e.user) WHERE `groupid` = :groupid ORDER BY e.id\";\n\t\t}\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Get allm numbers by group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getNumbersByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'n.id',\n\t\t'n.entryid',\n\t\t'n.number',\n\t\t'n.extension',\n\t\t'n.countrycode',\n\t\t'n.nationalnumber',\n\t\t'n.regioncode',\n\t\t'n.locale',\n\t\t'n.stripped',\n\t\t'n.E164',\n\t\t'n.possibleshort',\n\t\t'n.type',\n\t\t'n.flags',\n\t\t's.id as speeddial'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_numbers as n LEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) LEFT JOIN contactmanager_entry_speeddials as s ON(n.id = s.numberid) WHERE `groupid` = :groupid ORDER BY e.id, n.id \";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Delete a number by ID\n\t * @param {int} $id The number ID\n\t */\n\tpublic function deleteNumberByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_numbers WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\t$this->removeSpeedDialNumberByNumberID($id);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry number successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete all numbers by Entry ID\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function deleteNumbersByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_numbers WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\t$this->removeSpeedDialNumbersByEntryID($entryid);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete number from group\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteNumbersByGroupID($groupid) {\n\t\t$sql = \"DELETE n FROM contactmanager_entry_numbers as n\n\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\t$sql = \"DELETE n FROM contactmanager_entry_speeddials as n\n\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\t$this->syncSpeedDials();\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully deleted\"));\n\t}\n\n\t/**\n\t * Add Number by Entry ID\n\t * @param {int} $entryid The entry ID\n\t * @param {string} $number  The Number\n\t */\n\tpublic function addNumberByEntryID($entryid, $number) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_numbers (entryid, number, extension, type, flags) VALUES (:entryid, :number, :extension, :type, :flags)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':number' => $number['number'],\n\t\t':extension' => $number['extension'],\n\t\t':type' => $number['type'],\n\t\t':flags' => implode('|', $number['flags']),\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry number successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Update Image By Entry ID\n\t * @param  int $entryid The entry ID to update\n\t * @param  string $filename The image filename\n\t * @return array\n\t */\n\tpublic function updateImageByID($id, $filename, $gravatar = false, $type=\"external\") {\n\t\tif(empty($filename) || is_array($filename)) {\n\t\t\treturn;\n\t\t}\n\t\t$name = basename($filename);\n\t\tif(!file_exists($this->tmp.\"/\".$name)) {\n\t\t\treturn;\n\t\t}\n\t\tif($type == \"external\" || $type == \"private\" ) {\n\t\t\t$sql = \"REPLACE INTO contactmanager_entry_images (entryid, image, format, gravatar) VALUES (:id, :image, 'image/png', :gravatar)\";\n\t\t} else {\n\t\t\t$sql = \"REPLACE INTO contactmanager_entry_userman_images (uid, image, format, gravatar) VALUES (:id, :image, 'image/png', :gravatar)\";\n\t\t}\n\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $id,\n\t\t\t':image' => file_get_contents($this->tmp.\"/\".$name),\n\t\t\t':gravatar' => $gravatar ? 1 : 0\n\t\t));\n\n\t\tunlink($this->tmp.\"/\".$name);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry image successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Add Numbers by Entry ID\n\t * @param {int} $entryid The entry ID\n\t * @param {array} $numbers Array of numbers to add\n\t */\n\tpublic function addNumbersByEntryID($entryid, $numbers) {\n\t\tif(empty($numbers)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No Numbers to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\t$shortUtil = ShortNumberInfo::getInstance();\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_numbers (entryid, number, extension, type, flags, countrycode, nationalnumber, E164, regioncode, stripped, locale, possibleshort) VALUES (:entryid, :number, :extension, :type, :flags, :countrycode, :nationalnumber, :E164, :regioncode, :stripped, :locale, :possibleshort)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($numbers as $number) {\n\t\t\t$data = array(\n\t\t\t\t':entryid' => $entryid,\n\t\t\t\t':number' => $number['number'],\n\t\t\t\t':extension' => isset($number['extension']) ? $number['extension'] : \"\",\n\t\t\t\t':type' => isset($number['type']) ? $number['type'] : \"\",\n\t\t\t\t':flags' => !empty($number['flags']) ? implode('|', $number['flags']) : \"\",\n\t\t\t);\n\n\t\t\tif($number['type'] === 'internal' || empty($number['locale'])) {\n\t\t\t\t$data[':countrycode'] = null;\n\t\t\t\t$data[':nationalnumber'] = null;\n\t\t\t\t$data[':E164'] = null;\n\t\t\t\t$data[':regioncode'] = null;\n\t\t\t\t$data[':stripped'] = preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number']);\n\t\t\t\t$data[':locale'] = '';\n\t\t\t\t$data[':possibleshort'] = null;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif($number['locale'] === 'AUTO') {\n\t\t\t\t\t\t$info = $phoneUtil->parse($number['number']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$info = $phoneUtil->parse($number['number'], $number['locale']);\n\t\t\t\t\t}\n\t\t\t\t\t$data[':countrycode'] = $info->getCountryCode();\n\t\t\t\t\t$data[':nationalnumber'] = $info->getNationalNumber();\n\t\t\t\t\t$data[':extension'] = !empty($data[':extension']) ? $data[':extension'] : $info->getExtension();\n\t\t\t\t\t$data[':E164'] = $phoneUtil->format($info, PhoneNumberFormat::E164);\n\t\t\t\t\t$data[':regioncode'] = $phoneUtil->getRegionCodeForNumber($info);\n\t\t\t\t\t$data[':possibleshort'] = $shortUtil->isPossibleShortNumber($info) ? 1 : 0;\n\t\t\t\t\t$data[':stripped'] = !empty($data[':possibleshort']) ? preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number'])  : preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':E164']);\n\t\t\t\t\t$data[':locale'] = $phoneUtil->getRegionCodeForNumber($info);\n\t\t\t\t} catch (NumberParseException $e) {\n\t\t\t\t\t$data[':countrycode'] = null;\n\t\t\t\t\t$data[':nationalnumber'] = null;\n\t\t\t\t\t$data[':E164'] = null;\n\t\t\t\t\t$data[':regioncode'] = null;\n\t\t\t\t\t$data[':stripped'] = preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number']);\n\t\t\t\t\t$data[':locale'] = '';\n\t\t\t\t\t$data[':possibleshort'] = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sth->execute($data);\n\n\t\t\tif(isset($number['speeddial'])) {\n\t\t\t\t$numberid = $this->db->lastInsertId();\n\t\t\t\tif(trim($number['speeddial']) !== \"\") {\n\t\t\t\t\t$this->addSpeedDialNumber($entryid,$numberid,$number['speeddial']);\n\t\t\t\t} else {\n\t\t\t\t\t$this->removeSpeedDialNumberByNumberID($numberid);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully added\"));\n\t}\n\n\tpublic function getSpeedDialByID($id) {\n\t\t$sql = \"SELECT s.*, n.number, e.fname, e.lname, e.title, e.company, n.type as numbertype, g.type as grouptype, e.groupid FROM contactmanager_entry_speeddials s, contactmanager_group_entries e, contactmanager_entry_numbers n, contactmanager_groups g WHERE e.groupid = g.id AND e.id = s.entryid AND n.id = s.numberid AND s.id = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $id\n\t\t));\n\t\treturn $sth->fetch(\\PDO::FETCH_ASSOC);\n\t}\n\n\tpublic function addSpeedDialNumber($entryid, $numberid,$speeddial) {\n\t\t$sql = \"REPLACE INTO contactmanager_entry_speeddials (id, entryid, numberid) VALUES (:id, :entryid, :numberid)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $speeddial,\n\t\t\t':entryid' => $entryid,\n\t\t\t':numberid' => $numberid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\tpublic function removeSpeedDialNumberByNumberID($numberid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_speeddials WHERE numberid = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t\":id\" => $numberid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\tpublic function removeSpeedDialNumbersByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_speeddials WHERE entryid = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t\":id\" => $entryid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\t/**\n\t * Get Image By Entry ID\n\t * @param  int $entryid The entryid\n\t * @param  string $email   The email addres of entry (for automatic gravatar updates)\n\t * @return array          Array of information about the image\n\t */\n\tpublic function getImageByID($id, $email=false, $type='external') {\n\t\tif($type == 'external' || $type == 'private') {\n\t\t\t$sql = \"SELECT image, format, gravatar FROM contactmanager_entry_images WHERE `entryid` = :id\";\n\t\t} else {\n\t\t\t$sql = \"SELECT image, format, gravatar FROM contactmanager_entry_userman_images WHERE `uid` = :id\";\n\t\t}\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$image = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(!empty($image['gravatar']) && !empty($email)) {\n\t\t\t$data = $this->getGravatar($email);\n\t\t\tif(empty($data)) {\n\t\t\t\t$this->delImageByID($id, $type);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$rand = rand();\n\t\t\t\timagepng(imagecreatefromstring($data), $this->tmp.\"/\".$rand.\".png\");\n\t\t\t\t$image['image'] = file_get_contents($this->tmp.\"/\".$rand.\".png\");\n\t\t\t\t$this->updateImageByID($id, $this->tmp.\"/\".$rand.\".png\", true, $type);\n\t\t\t\treturn $image;\n\t\t\t}\n\t\t}\n\t\treturn $image;\n\t}\n\n\t/**\n\t * Delete image by Entry ID\n\t * @param  int $id The entry id\n\t * @param  int $type    The entry type\n\t */\n\tpublic function delImageByID($id, $type='external') {\n\t\tif($type == \"external\" || $type == \"private\") {\n\t\t\t$sql = \"DELETE FROM contactmanager_entry_images WHERE `entryid` = :id\";\n\t\t} else {\n\t\t\t$sql = \"DELETE FROM contactmanager_entry_userman_images WHERE `uid` = :id\";\n\t\t}\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t}\n\n\t/**\n\t * Get all XMPP information about an entry\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function getXMPPsByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'xmpp',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_xmpps WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$xmpps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $xmpps;\n\t}\n\n\t/**\n\t * Get all XMPPs By Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getXMPPsByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'x.id',\n\t\t'x.entryid',\n\t\t'x.xmpp',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_xmpps as x\n\t\tLEFT JOIN contactmanager_group_entries as e ON (x.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, x.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$xmpps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $xmpps;\n\t}\n\n\t/**\n\t * Delete XMPP information by id\n\t * @param {int} $id The XMPP ID\n\t */\n\tpublic function deleteXMPPByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_xmpps WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPP successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete XMPPs by Entry ID\n\t * @param {int} $entryid The Entry ID\n\t */\n\tpublic function deleteXMPPsByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_xmpps WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete all XMPPS from a group\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteXMPPsByGroupID($groupid) {\n\t\t$sql = \"DELETE x FROM contactmanager_entry_xmpps as x\n\t\tLEFT JOIN contactmanager_group_entries as e ON (x.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully deleted\"));\n\t}\n\n\t/**\n\t * Add XMPP Entry by ID\n\t * @param {int} $entryid The entry ID\n\t * @param {string} $xmpp    The xmpp user\n\t */\n\tpublic function addXMPPByEntryID($entryid, $xmpp) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_xmpps (entryid, xmpp) VALUES (:entryid, :xmpp)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':xmpp' => $xmpp['xmpp'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPP successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * All mulitple xmpps per user\n\t * @param {int} $entryid The Entry ID\n\t * @param {array} $xmpps   Array of Xmpps\n\t */\n\tpublic function addXMPPsByEntryID($entryid, $xmpps) {\n\t\tif(empty($xmpps)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No XMPPs to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_xmpps (entryid, xmpp) VALUES (:entryid, :xmpp)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($xmpps as $xmpp) {\n\t\t\tif(empty($xmpp['xmpp'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':xmpp' => $xmpp['xmpp'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully added\"));\n\t}\n\n\t/**\n\t * Get emails by Entry ID\n\t * @param {int} $entryid The Entry ID\n\t */\n\tpublic function getEmailsByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'email',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_emails WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$emails = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $emails;\n\t}\n\n\tpublic function getEmailsByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'm.id',\n\t\t'm.entryid',\n\t\t'm.email',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_emails as m\n\t\tLEFT JOIN contactmanager_group_entries as e ON (m.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, m.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$emails = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $emails;\n\t}\n\n\tpublic function deleteEmailByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_emails WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mail successfully deleted\"));\n\t}\n\n\tpublic function deleteEmailsByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_emails WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully deleted\"));\n\t}\n\n\tpublic function deleteEmailsByGroupID($groupid) {\n\t\t$sql = \"DELETE m FROM contactmanager_entry_emails as m\n\t\tLEFT JOIN contactmanager_group_entries as e ON (m.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully deleted\"));\n\t}\n\n\tpublic function addEmailByEntryID($entryid, $email) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_emails (entryid, email) VALUES (:entryid, :email)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':email' => $email['email'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mail successfully added\"), \"id\" => $id);\n\t}\n\n\tpublic function addEmailsByEntryID($entryid, $emails) {\n\t\tif(empty($emails)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No E-Mails to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_emails (entryid, email) VALUES (:entryid, :email)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($emails as $email) {\n\t\t\tif(empty($email['email'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':email' => $email['email'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully added\"));\n\t}\n\n\tpublic function getWebsitesByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'website',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_websites WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$websites = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $websites;\n\t}\n\n\tpublic function getWebsitesByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'w.id',\n\t\t'w.entryid',\n\t\t'w.website',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_websites as w\n\t\tLEFT JOIN contactmanager_group_entries as e ON (w.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, w.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$websites = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $websites;\n\t}\n\n\tpublic function deleteWebsiteByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_websites WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Website successfully deleted\"));\n\t}\n\n\tpublic function deleteWebsitesByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_websites WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully deleted\"));\n\t}\n\n\tpublic function deleteWebsitesByGroupID($groupid) {\n\t\t$sql = \"DELETE w FROM contactmanager_entry_websites as w\n\t\tLEFT JOIN contactmanager_group_entries as e ON (w.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully deleted\"));\n\t}\n\n\tpublic function addWebsiteByEntryID($entryid, $website) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_websites (entryid, website) VALUES (:entryid, :website)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':website' => $website['website'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Website successfully added\"), \"id\" => $id);\n\t}\n\n\tpublic function addWebsitesByEntryID($entryid, $websites) {\n\t\tif(empty($websites)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No Websites to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_websites (entryid, website) VALUES (:entryid, :website)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($websites as $website) {\n\t\t\tif(empty($website['website'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':website' => $website['website'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully added\"));\n\t}\n\n\t/**\n\t * Get all contacts for a userman user ID\n\t * @param {int} $id A valid userman ID\n\t */\n\tpublic function getContactsByUserID($id) {\n\t\tif(!empty($this->contactsCache)) {\n\t\t\treturn $this->contactsCache;\n\t\t}\n\t\t$umentries = $this->freepbx->Userman->getAllContactInfo();\n\t\tif($id == -1) {\n\t\t\t$groups = $this->getGroups();\n\t\t} else {\n\t\t\t$groups = $this->getGroupsByOwner($id);\n\t\t}\n\t\t$contacts = array();\n\t\t$entries = array();\n\n\t\tforeach($groups as $group) {\n\t\t\tswitch($group['type']) {\n\t\t\t\tcase \"internal\":\n\t\t\t\tcase \"private\" :\n\t\t\t\tcase \"external\":\n\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\tif(!empty($entries) && is_array($entries)) {\n\t\t\t\t\t\t$final = array();\n\t\t\t\t\t\tforeach($entries as $id => $entry) {\n\t\t\t\t\t\t\t$numbers = array();\n\t\t\t\t\t\t\t$numbers_info = array();\n\t\t\t\t\t\t\tif(!empty($entry['numbers']) && is_array($entry['numbers'])) {\n\t\t\t\t\t\t\t\t$numbers_info = $entry['numbers'];\n\t\t\t\t\t\t\t\tforeach($entry['numbers'] as $number) {\n\t\t\t\t\t\t\t\t\t//TODO: this is terrible. Multiple numbers are allowed in the GUI but dont display right\n\t\t\t\t\t\t\t\t\t//TODO: To conform for OLD hooks we need to be a string... sigh\n\t\t\t\t\t\t\t\t\tif(isset($numbers[$number['type']])) {\n\t\t\t\t\t\t\t\t\t\tif(!is_array($numbers[$number['type']])) {\n\t\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']] = array($numbers[$number['type']]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']][] = preg_replace(\"/[^0-9\\*#]/\",\"\",$number['number']);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']] = preg_replace(\"/[^0-9\\*#]/\",\"\",$number['number']);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$xmpps = array();\n\t\t\t\t\t\t\tif(!empty($entry['xmpps'])) {\n\t\t\t\t\t\t\t\tforeach($entry['xmpps'] as $xmpp) {\n\t\t\t\t\t\t\t\t\t$xmpps[] = $xmpp['xmpp'];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tunset($entry['emails']);\n\t\t\t\t\t\t\tunset($entry['websites']);\n\t\t\t\t\t\t\tunset($entry['numbers']);\n\t\t\t\t\t\t\tunset($entry['xmpps']);\n\t\t\t\t\t\t\t$entry['xmpps'] = $xmpps;\n\t\t\t\t\t\t\t$entry['numbers'] = $numbers;\n\t\t\t\t\t\t\t$entry['numbers_info'] = $numbers_info;\n\t\t\t\t\t\t\t$entry['displayname'] = !empty($entry['displayname']) ? $entry['displayname'] : $entry['fname'] . \" \" . $entry['lname'];\n\t\t\t\t\t\t\t$entry['type'] = $group['type'];\n\t\t\t\t\t\t\t$entry['groupid'] = $group['id'];\n\t\t\t\t\t\t\t$entry['groupname'] = $group['name'];\n\t\t\t\t\t\t\t$entry['id'] = $entry['uid'];\n\t\t\t\t\t\t\t$contacts[] = $entry;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$this->contactsCache = $contacts;\n\t\treturn $this->contactsCache;\n\t}\n\n\tpublic function lookupNumberByUserID($id, $number) {\n\t\t$number = preg_replace(\"/[^0-9\\*#]/\",\"\",$number);\n\t\t$number = trim($number);\n\t\tif($number == \"\") {\n\t\t\treturn false;\n\t\t}\n\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\n\t\t//quickly look up the number in the database\n\t\tif($id === -1) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_numbers n, contactmanager_group_entries e, contactmanager_groups g WHERE g.owner = -1 AND g.id = e.groupid AND n.entryid = e.id AND n.stripped AND ((n.stripped LIKE :strippedlike AND CHAR_LENGTH(n.stripped) >= :lookuplength) OR (n.stripped = :stripped))\";\n\t\t\t$sth = $this->freepbx->Database->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t\":strippedlike\" => '%'.$number.'%',\n\t\t\t\t\":stripped\" => $number,\n\t\t\t\t\":lookuplength\" => $lookuplen\n\t\t\t));\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_numbers n, contactmanager_group_entries e, contactmanager_groups g WHERE (g.owner = -1 OR g.owner = :id) AND g.id = e.groupid AND n.entryid = e.id AND ((n.stripped LIKE :strippedlike AND CHAR_LENGTH(n.stripped) >= :lookuplength) OR (n.stripped = :stripped))\";\n\t\t\t$sth = $this->freepbx->Database->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t\":id\" => $id,\n\t\t\t\t\":strippedlike\" => '%'.$number.'%',\n\t\t\t\t\":stripped\" => $number,\n\t\t\t\t\":lookuplength\" => $lookuplen\n\t\t\t));\n\t\t}\n\n\n\t\t$quickResults = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\tif(!empty($quickResults)) {\n\t\t\tif(count($quickResults) === 1 && $number === $quickResults[0]['stripped']) {\n\t\t\t\treturn $this->getEntryByID($quickResults[0]['entryid']);\n\t\t\t} else {\n\t\t\t\tforeach($quickResults as $result) {\n\t\t\t\t\tswitch($phoneUtil->isNumberMatch((string)$number,(string)$result['stripped'])) {\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NSN_MATCH:\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::EXACT_MATCH:\n\t\t\t\t\t\t\treturn $this->getEntryByID($result['entryid']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::SHORT_NSN_MATCH:\n\t\t\t\t\t\t\tif(strlen($number) < $lookuplen) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn $this->getEntryByID($result['entryid']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NOT_A_NUMBER:\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NO_MATCH:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$contactsmapped = array();\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\tforeach($contacts as $key => $contact) {\n\t\t\tif(empty($contact['numbers_info'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tforeach($contact['numbers_info'] as $info) {\n\t\t\t\tif(!empty($info['number'])) {\n\t\t\t\t\t$info['uid'] = $contact['uid'];\n\t\t\t\t\t$info['key'] = $key;\n\t\t\t\t\t$contactsmapped[] = $info;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach($contactsmapped as $contactnumber) {\n\t\t\t$search = empty($contactnumber['possibleshort']) ? $contactnumber['E164'] : $contactnumber['stripped'];\n\t\t\tswitch($phoneUtil->isNumberMatch((string)$number,(string)$search)) {\n\t\t\t\tcase \\libphonenumber\\MatchType::NSN_MATCH:\n\t\t\t\tcase \\libphonenumber\\MatchType::EXACT_MATCH:\n\t\t\t\t\treturn $contacts[$contactnumber['key']];\n\t\t\t\tbreak;\n\t\t\t\tcase \\libphonenumber\\MatchType::SHORT_NSN_MATCH:\n\t\t\t\t\tif(strlen($number) < $lookuplen) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn $contacts[$contactnumber['key']];\n\t\t\t\tbreak;\n\t\t\t\tcase \\libphonenumber\\MatchType::NOT_A_NUMBER:\n\t\t\t\tcase \\libphonenumber\\MatchType::NO_MATCH:\n\t\t\t\tdefault:\n\t\t\t\t\tcontinue;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lookup a contact in the global and local directory\n\t * @param {int} $id The userman user id\n\t * @param {string} $search search string\n\t * @param {string} $regexp Regular Expression pattern to replace\n\t * @param {boolean} $regexpsearch Allow regular expressions to be passed into search. Make sure you preg_quote!\n\t */\n\tpublic function lookupByUserID($id, $search, $regexp = null, $regexpsearch = false) {\n\t\tif(trim($search) == \"\") {\n\t\t\treturn false;\n\t\t}\n\t\t$skip = array(\n\t\t\t\"uid\",\n\t\t\t\"groupid\",\n\t\t\t\"user\",\n\t\t\t\"id\",\n\t\t\t\"auth\",\n\t\t\t\"authid\",\n\t\t\t\"password\",\n\t\t\t\"primary_group\",\n\t\t\t\"permissions\",\n\t\t\t\"type\",\n\t\t\t\"image\"\n\t\t);\n\t\tif(!$regexpsearch) {\n\t\t\t$search = preg_quote($search,\"/\");\n\t\t}\n\t\t$search = trim($search);\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\t$iterator = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($contacts));\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\t\tforeach($iterator as $key => $value) {\n\t\t\tif(in_array($key,$skip)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$value = !empty($regexp) ? preg_replace($regexp,'',$value) : $value;\n\t\t\t$value = trim($value);\n\t\t\tif(empty($value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(preg_match('/^' . $search . '$/i',$value) || (strlen($search) > $lookuplen && preg_match('/' . $search . '/i',$value))) {\n\t\t\t\t$k = $iterator->getSubIterator(0)->key();\n\t\t\t\treturn $contacts[$k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lookup a contact in the global and local directory\n\t * @param {int} $id The userman user id\n\t * @param {string} $search search string\n\t * @param {string} $regexp Regular Expression pattern to replace\n\t * @param {boolean} $regexpsearch Allow regular expressions to be passed into search. Make sure you preg_quote!\n\t */\n\tpublic function lookupMultipleByUserID($id, $search, $regexp = null, $regexpsearch = false) {\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\t$final = array();\n\t\t$list = array();\n\t\t$skip = array(\n\t\t\t\"uid\",\n\t\t\t\"groupid\",\n\t\t\t\"user\",\n\t\t\t\"id\",\n\t\t\t\"auth\",\n\t\t\t\"authid\",\n\t\t\t\"password\",\n\t\t\t\"primary_group\",\n\t\t\t\"permissions\",\n\t\t\t\"type\"\n\t\t);\n\t\tif(!$regexpsearch) {\n\t\t\t$search = preg_quote($search,\"/\");\n\t\t}\n\t\t$search = trim($search);\n\t\t$iterator = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($contacts));\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\t\tforeach($iterator as $key => $value) {\n\t\t\tif(in_array($key,$skip)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$value = !empty($regexp) ? preg_replace($regexp,'',$value) : $value;\n\t\t\t$value = trim($value);\n\t\t\t$k = $iterator->getSubIterator(0)->key();\n\t\t\tif(empty($value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(!in_array($k, $list) && (preg_match('/' . $search . '/i',$value) || (strlen($search) > $lookuplen && preg_match('/' . $search . '/i',$value)))) {\n\t\t\t\t$final[] = $contacts[$k];\n\t\t\t\t$list[] = $k;\n\t\t\t}\n\t\t}\n\t\treturn $final;\n\t}\n\n\tpublic function usermanUserDetails($user) {\n\t\t$image = $this->getImageByID($user['id'], $user['email'], 'internal');\n\t\t$user['image'] = $image;\n\t\treturn array(load_view(dirname(__FILE__).'/views/user_details_hook.php',array(\"dialinglocale\" => $this->getConfig('userLocale',$user['id']), \"cmdata\" => $user, \"regionlist\" => $this->getRegionList())));\n\t}\n\n\t/**\n\t * Userman Page hook\n\t */\n\tpublic function usermanShowPage() {\n\t\tif(isset($_REQUEST['action'])) {\n\t\t\t$groups = $this->getUnrestrictedGroupsbyOwner(-1);\n\t\t\t$visiblegroups = array();\n\t\t\tforeach($groups as $group) {\n\t\t\t\tif($group['type'] != \"internal\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$visiblegroups[] = $group;\n\t\t\t}\n\t\t\tarray_unshift($visiblegroups,array(\n\t\t\t\t'id' => '*',\n\t\t\t\t'owner' => '*',\n\t\t\t\t'name' => _(\"All Internal Groups\"),\n\t\t\t\t'type' => '*'\n\t\t\t));\n\t\t\t$visiblegroups[] = array(\n\t\t\t\t'id' => 'false',\n\t\t\t\t'owner' => 'false',\n\t\t\t\t'name' => _(\"None\"),\n\t\t\t\t'type' => 'false'\n\t\t\t);\n\t\t\tarray_unshift($groups,array(\n\t\t\t\t'id' => '*',\n\t\t\t\t'owner' => '*',\n\t\t\t\t'name' => _(\"All Public Groups\"),\n\t\t\t\t'type' => '*'\n\t\t\t));\n\t\t\t$groups[] = array(\n\t\t\t\t'id' => 'false',\n\t\t\t\t'owner' => 'false',\n\t\t\t\t'name' => _(\"None\"),\n\t\t\t\t'type' => 'false'\n\t\t\t);\n\t\t\tswitch($_REQUEST['action']) {\n\t\t\t\tcase 'showgroup':\n\t\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByGID((int) $_REQUEST['group'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\t\t$assigned = $this->freepbx->Userman->getModuleSettingByGID((int) $_REQUEST['group'],\"contactmanager\",\"groups\",true);\n\t\t\t\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => $showingroups, \"mode\" => \"group\", \"groups\" => $groups, \"enabled\" => $this->userman->getModuleSettingByGID((int) $_REQUEST['group'],'contactmanager','show')))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tcase 'addgroup':\n\t\t\t\t\t$assigned = array(\"*\");\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => array(), \"mode\" => \"group\", \"groups\" => $groups, \"enabled\" => true))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tcase 'adduser':\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => array(), \"mode\" => \"user\", \"groups\" => $groups, \"enabled\" => true))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tcase 'showuser':\n\t\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByID($_REQUEST['user'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\t\t$assigned = $this->freepbx->Userman->getModuleSettingByID($_REQUEST['user'],\"contactmanager\",\"groups\",true);\n\t\t\t\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => $showingroups, \"mode\" => \"user\", \"groups\" => $groups))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function bulkhandlerGetTypes() {\n\t\treturn array(\n\t\t\t'contacts' => array(\n\t\t\t\t'name' => _('Contacts'),\n\t\t\t\t'description' => _('Contacts and internal/external groups from the Contact Manager module.')\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic function bulkhandlerGetHeaders($type) {\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\treturn array(\n\t\t\t\t'groupname' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Group Name'),\n\t\t\t\t\t'description' => _('Name of group for contact.  If group does not exist, it will be created.'),\n\t\t\t\t),\n\t\t\t\t'grouptype' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Group Type'),\n\t\t\t\t\t'description' => _('Type of group for contact.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'internal' => _('Internal'),\n\t\t\t\t\t\t'external' => _('External'),\n\t\t\t\t\t\t'private' => _('Private'),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'displayname' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Display Name'),\n\t\t\t\t\t'description' => _('Display Name'),\n\t\t\t\t),\n\t\t\t\t'fname' => array('description' => _('First Name')),\n\t\t\t\t'lname' => array('description' => _('Last Name')),\n\t\t\t\t'title' => array('description' => _('Title')),\n\t\t\t\t'company' => array('description' => _('Company')),\n\t\t\t\t'address' => array('description' => _('Address')),\n\t\t\t\t'userman_username' => array('description' => _('User Manager username this contact should point to.  Internal contacts only.')),\n\t\t\t\t'phone_1_number' => array(\n\t\t\t\t\t\t'required' => true,\n\t\t\t\t\t\t'description' => _('Phone number.  External contacts only.')\n\t\t\t\t\t\t),\n\t\t\t\t'phone_1_type' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_1_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_1_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_1_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_1_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'phone_2_number' => array('description' => _('Phone number.  External contacts only.')),\n\t\t\t\t'phone_2_type' => array(\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_2_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_2_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_2_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_2_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'phone_3_number' => array('description' => _('Phone number.  External contacts only.')),\n\t\t\t\t'phone_3_type' => array(\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_3_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_3_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_3_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_3_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'email_1' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t\t'email_2' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t\t'email_3' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t);\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic function bulkhandlerImport($type, $rawData, $replaceExisting = true) {\n\t\t$ret = NULL;\n\t\t$g_found = false;\n\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\tforeach ($rawData as $data) {\n\t\t\t\tif (empty($data['groupname'])) {\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t'message' => _('Group name is required.'),\n\t\t\t\t\t\t    );\n\t\t\t\t}\n\n\t\t\t\tif (empty($data['grouptype'])) {\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t'message' => _('Group type is required.'),\n\t\t\t\t\t\t    );\n\t\t\t\t}\n\n\t\t\t\tif($data['grouptype'] === 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$group = NULL;\n\n\t\t\t\t$groups = $this->getGroups();\n\t\t\t\tforeach ($groups as $g) {\n\t\t\t\t\tif ($g['name'] == $data['groupname'] && $g['type'] == $data['grouptype']) {\n\t\t\t\t\t\t/* Found an existing group.  Let's bail. */\n\t\t\t\t\t\t$group = $g;\n\t\t\t\t\t\t$g_found= true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$group) {\n\t\t\t\t\t$res = $this->addGroup($data['groupname'], $data['grouptype']);\n\t\t\t\t\tif ($res['status'] && $res['id']) {\n\t\t\t\t\t\t$group = $this->getGroupByID($res['id']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = array(\n\t\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t\t'message' => _('Group not found and could not be created.'),\n\t\t\t\t\t\t\t    );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$contact = array(\n\t\t\t\t\t\t'id' => '',\n\t\t\t\t\t\t'groupid' => $group['id'],\n\t\t\t\t\t\t'user' => -1,\n\t\t\t\t\t\t'displayname' => $data['displayname'],\n\t\t\t\t\t\t'fname' => isset($data['fname'])?$data['fname']:'',\n\t\t\t\t\t\t'lname' => isset($data['lname'])?$data['lname']:'',\n\t\t\t\t\t\t'title' => isset($data['title'])?$data['title']:'',\n\t\t\t\t\t\t'company' => isset($data['company'])?$data['company']:'',\n\t\t\t\t\t\t'address' => isset($data['address'])?$data['address']:'',\n\t\t\t\t\t\t'image' => ''\n\t\t\t\t\t\t);\n\n\t\t\t\t$grep = preg_grep('/^\\D+_\\d+/', array_keys($data));\n\t\t\t\tif(!empty($grep) && is_array($grep)){\n\t\t\t\t\tforeach ($grep as $key) {\n\t\t\t\t\t\tif (preg_match('/^(.*)_(\\d+)_(.*)$/', $key, $matches)) {\n\t\t\t\t\t\t\t$extras[$matches[1]][$matches[2] - 1][$matches[3]] = $data[$key];\n\t\t\t\t\t\t} else if (preg_match('/^(.*)_(\\d+)$/', $key, $matches)) {\n\t\t\t\t\t\t\t$extras[$matches[1]][$matches[2] - 1] = $data[$key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($extras as $key => $type) {\n\t\t\t\t\t\tforeach ($type as $value) {\n\t\t\t\t\t\t\tswitch ($key) {\n\t\t\t\t\t\t\t\tcase 'phone':\n\t\t\t\t\t\t\t\t\t$contact['numbers'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'number' => $value['number'],\n\t\t\t\t\t\t\t\t\t\t\t'type' => isset($value['type']) ? $value['type'] : 'other',\n\t\t\t\t\t\t\t\t\t\t\t'extension' => isset($value['extension']) ? $value['extension'] : '',\n\t\t\t\t\t\t\t\t\t\t\t'flags' => isset($value['flags']) ? explode(',', $value['flags']) : array(),\n\t\t\t\t\t\t\t\t\t\t\t'speeddial' => isset($value['speeddial']) ? $value['speeddial'] : '',\n\t\t\t\t\t\t\t\t\t\t\t'locale' => isset($value['locale']) ? $value['locale'] : '',\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'email':\n\t\t\t\t\t\t\t\t\t$contact['emails'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'email' => $value,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'website':\n\t\t\t\t\t\t\t\t\t$contact['websites'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'website' => $value,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Unknown data type.\"));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->addEntryByGroupID($group['id'], $contact);\n\n\t\t\t\t$ret = array(\n\t\t\t\t\t\t'status' => true,\n\t\t\t\t\t    );\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\tpublic function bulkhandlerExport($type) {\n\t\t$data = NULL;\n\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] === 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach ($entries as $entry) {\n\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? array_values($entry['numbers']) : array();\n\t\t\t\t\t$entry['emails'] = !empty($entry['emails']) ? array_values($entry['emails']) : array();\n\t\t\t\t\t$entry['websites'] = !empty($entry['websites']) ? array_values($entry['websites']) : array();\n\n\t\t\t\t\t$contact = array(\n\t\t\t\t\t\t\"groupname\" => $group['name'],\n\t\t\t\t\t\t\"grouptype\" => $group['type'],\n\t\t\t\t\t\t\"displayname\" => $entry['displayname'],\n\t\t\t\t\t\t\"fname\" => $entry['fname'],\n\t\t\t\t\t\t\"lname\" => $entry['lname'],\n\t\t\t\t\t\t\"title\" => $entry['title'],\n\t\t\t\t\t\t\"company\" => $entry['company'],\n\t\t\t\t\t\t\"address\" => $entry['address'],\n\t\t\t\t\t);\n\n\t\t\t\t\tforeach ($entry['numbers'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_type\"] = $value['type'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_number\"] = $value['number'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_extension\"] = $value['extension'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_flags\"] = implode(',', $value['flags']);\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_speeddial\"] = $value['speeddial'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($entry['emails'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"email_\" . $id] = $value['email'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($entry['websites'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"website_\" . $id] = $value['website'];\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[] = $contact;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\tpublic function getNamebyNumber($number, $group = array()){\n\t\t$result = $this->lookupNumberByUserID(-1, $number);\n\t\tif($result && !empty($group)){\n\t\t\tif(!in_array($result['groupid'], $group)){\n\t\t\t\t$result = array();\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getRegionList() {\n\t\treturn array(\n\t\t\t\"AUTO\" => _(\"Automatically Determine\"),\n\t\t\t\"\" => _(\"Unknown\"),\n\t\t\t\"AF\" => \"Afghanistan\",\n\t\t\t\"AL\" => \"Albania\",\n\t\t\t\"DZ\" => \"Algeria\",\n\t\t\t\"AS\" => \"American Samoa\",\n\t\t\t\"AD\" => \"Andorra\",\n\t\t\t\"AO\" => \"Angola\",\n\t\t\t\"AI\" => \"Anguilla\",\n\t\t\t\"AQ\" => \"Antarctica\",\n\t\t\t\"AG\" => \"Antigua and Barbuda\",\n\t\t\t\"AR\" => \"Argentina\",\n\t\t\t\"AM\" => \"Armenia\",\n\t\t\t\"AW\" => \"Aruba\",\n\t\t\t\"AU\" => \"Australia\",\n\t\t\t\"AT\" => \"Austria\",\n\t\t\t\"AZ\" => \"Azerbaijan\",\n\t\t\t\"BS\" => \"Bahamas\",\n\t\t\t\"BH\" => \"Bahrain\",\n\t\t\t\"BD\" => \"Bangladesh\",\n\t\t\t\"BB\" => \"Barbados\",\n\t\t\t\"BY\" => \"Belarus\",\n\t\t\t\"BE\" => \"Belgium\",\n\t\t\t\"BZ\" => \"Belize\",\n\t\t\t\"BJ\" => \"Benin\",\n\t\t\t\"BM\" => \"Bermuda\",\n\t\t\t\"BT\" => \"Bhutan\",\n\t\t\t\"BO\" => \"Bolivia\",\n\t\t\t\"BA\" => \"Bosnia and Herzegovina\",\n\t\t\t\"BW\" => \"Botswana\",\n\t\t\t\"BV\" => \"Bouvet Island\",\n\t\t\t\"BR\" => \"Brazil\",\n\t\t\t\"BQ\" => \"British Antarctic Territory\",\n\t\t\t\"IO\" => \"British Indian Ocean Territory\",\n\t\t\t\"VG\" => \"British Virgin Islands\",\n\t\t\t\"BN\" => \"Brunei\",\n\t\t\t\"BG\" => \"Bulgaria\",\n\t\t\t\"BF\" => \"Burkina Faso\",\n\t\t\t\"BI\" => \"Burundi\",\n\t\t\t\"KH\" => \"Cambodia\",\n\t\t\t\"CM\" => \"Cameroon\",\n\t\t\t\"CA\" => \"Canada\",\n\t\t\t\"CT\" => \"Canton and Enderbury Islands\",\n\t\t\t\"CV\" => \"Cape Verde\",\n\t\t\t\"KY\" => \"Cayman Islands\",\n\t\t\t\"CF\" => \"Central African Republic\",\n\t\t\t\"TD\" => \"Chad\",\n\t\t\t\"CL\" => \"Chile\",\n\t\t\t\"CN\" => \"China\",\n\t\t\t\"CX\" => \"Christmas Island\",\n\t\t\t\"CC\" => \"Cocos [Keeling] Islands\",\n\t\t\t\"CO\" => \"Colombia\",\n\t\t\t\"KM\" => \"Comoros\",\n\t\t\t\"CG\" => \"Congo - Brazzaville\",\n\t\t\t\"CD\" => \"Congo - Kinshasa\",\n\t\t\t\"CK\" => \"Cook Islands\",\n\t\t\t\"CR\" => \"Costa Rica\",\n\t\t\t\"HR\" => \"Croatia\",\n\t\t\t\"CU\" => \"Cuba\",\n\t\t\t\"CY\" => \"Cyprus\",\n\t\t\t\"CZ\" => \"Czech Republic\",\n\t\t\t\"CI\" => \"C\u00f4te d\u2019Ivoire\",\n\t\t\t\"DK\" => \"Denmark\",\n\t\t\t\"DJ\" => \"Djibouti\",\n\t\t\t\"DM\" => \"Dominica\",\n\t\t\t\"DO\" => \"Dominican Republic\",\n\t\t\t\"NQ\" => \"Dronning Maud Land\",\n\t\t\t\"DD\" => \"East Germany\",\n\t\t\t\"EC\" => \"Ecuador\",\n\t\t\t\"EG\" => \"Egypt\",\n\t\t\t\"SV\" => \"El Salvador\",\n\t\t\t\"GQ\" => \"Equatorial Guinea\",\n\t\t\t\"ER\" => \"Eritrea\",\n\t\t\t\"EE\" => \"Estonia\",\n\t\t\t\"ET\" => \"Ethiopia\",\n\t\t\t\"FK\" => \"Falkland Islands\",\n\t\t\t\"FO\" => \"Faroe Islands\",\n\t\t\t\"FJ\" => \"Fiji\",\n\t\t\t\"FI\" => \"Finland\",\n\t\t\t\"FR\" => \"France\",\n\t\t\t\"GF\" => \"French Guiana\",\n\t\t\t\"PF\" => \"French Polynesia\",\n\t\t\t\"TF\" => \"French Southern Territories\",\n\t\t\t\"FQ\" => \"French Southern and Antarctic Territories\",\n\t\t\t\"GA\" => \"Gabon\",\n\t\t\t\"GM\" => \"Gambia\",\n\t\t\t\"GE\" => \"Georgia\",\n\t\t\t\"DE\" => \"Germany\",\n\t\t\t\"GH\" => \"Ghana\",\n\t\t\t\"GI\" => \"Gibraltar\",\n\t\t\t\"GR\" => \"Greece\",\n\t\t\t\"GL\" => \"Greenland\",\n\t\t\t\"GD\" => \"Grenada\",\n\t\t\t\"GP\" => \"Guadeloupe\",\n\t\t\t\"GU\" => \"Guam\",\n\t\t\t\"GT\" => \"Guatemala\",\n\t\t\t\"GG\" => \"Guernsey\",\n\t\t\t\"GN\" => \"Guinea\",\n\t\t\t\"GW\" => \"Guinea-Bissau\",\n\t\t\t\"GY\" => \"Guyana\",\n\t\t\t\"HT\" => \"Haiti\",\n\t\t\t\"HM\" => \"Heard Island and McDonald Islands\",\n\t\t\t\"HN\" => \"Honduras\",\n\t\t\t\"HK\" => \"Hong Kong SAR China\",\n\t\t\t\"HU\" => \"Hungary\",\n\t\t\t\"IS\" => \"Iceland\",\n\t\t\t\"IN\" => \"India\",\n\t\t\t\"ID\" => \"Indonesia\",\n\t\t\t\"IR\" => \"Iran\",\n\t\t\t\"IQ\" => \"Iraq\",\n\t\t\t\"IE\" => \"Ireland\",\n\t\t\t\"IM\" => \"Isle of Man\",\n\t\t\t\"IL\" => \"Israel\",\n\t\t\t\"IT\" => \"Italy\",\n\t\t\t\"JM\" => \"Jamaica\",\n\t\t\t\"JP\" => \"Japan\",\n\t\t\t\"JE\" => \"Jersey\",\n\t\t\t\"JT\" => \"Johnston Island\",\n\t\t\t\"JO\" => \"Jordan\",\n\t\t\t\"KZ\" => \"Kazakhstan\",\n\t\t\t\"KE\" => \"Kenya\",\n\t\t\t\"KI\" => \"Kiribati\",\n\t\t\t\"KW\" => \"Kuwait\",\n\t\t\t\"KG\" => \"Kyrgyzstan\",\n\t\t\t\"LA\" => \"Laos\",\n\t\t\t\"LV\" => \"Latvia\",\n\t\t\t\"LB\" => \"Lebanon\",\n\t\t\t\"LS\" => \"Lesotho\",\n\t\t\t\"LR\" => \"Liberia\",\n\t\t\t\"LY\" => \"Libya\",\n\t\t\t\"LI\" => \"Liechtenstein\",\n\t\t\t\"LT\" => \"Lithuania\",\n\t\t\t\"LU\" => \"Luxembourg\",\n\t\t\t\"MO\" => \"Macau SAR China\",\n\t\t\t\"MK\" => \"Macedonia\",\n\t\t\t\"MG\" => \"Madagascar\",\n\t\t\t\"MW\" => \"Malawi\",\n\t\t\t\"MY\" => \"Malaysia\",\n\t\t\t\"MV\" => \"Maldives\",\n\t\t\t\"ML\" => \"Mali\",\n\t\t\t\"MT\" => \"Malta\",\n\t\t\t\"MH\" => \"Marshall Islands\",\n\t\t\t\"MQ\" => \"Martinique\",\n\t\t\t\"MR\" => \"Mauritania\",\n\t\t\t\"MU\" => \"Mauritius\",\n\t\t\t\"YT\" => \"Mayotte\",\n\t\t\t\"FX\" => \"Metropolitan France\",\n\t\t\t\"MX\" => \"Mexico\",\n\t\t\t\"FM\" => \"Micronesia\",\n\t\t\t\"MI\" => \"Midway Islands\",\n\t\t\t\"MD\" => \"Moldova\",\n\t\t\t\"MC\" => \"Monaco\",\n\t\t\t\"MN\" => \"Mongolia\",\n\t\t\t\"ME\" => \"Montenegro\",\n\t\t\t\"MS\" => \"Montserrat\",\n\t\t\t\"MA\" => \"Morocco\",\n\t\t\t\"MZ\" => \"Mozambique\",\n\t\t\t\"MM\" => \"Myanmar [Burma]\",\n\t\t\t\"NA\" => \"Namibia\",\n\t\t\t\"NR\" => \"Nauru\",\n\t\t\t\"NP\" => \"Nepal\",\n\t\t\t\"NL\" => \"Netherlands\",\n\t\t\t\"AN\" => \"Netherlands Antilles\",\n\t\t\t\"NT\" => \"Neutral Zone\",\n\t\t\t\"NC\" => \"New Caledonia\",\n\t\t\t\"NZ\" => \"New Zealand\",\n\t\t\t\"NI\" => \"Nicaragua\",\n\t\t\t\"NE\" => \"Niger\",\n\t\t\t\"NG\" => \"Nigeria\",\n\t\t\t\"NU\" => \"Niue\",\n\t\t\t\"NF\" => \"Norfolk Island\",\n\t\t\t\"KP\" => \"North Korea\",\n\t\t\t\"VD\" => \"North Vietnam\",\n\t\t\t\"MP\" => \"Northern Mariana Islands\",\n\t\t\t\"NO\" => \"Norway\",\n\t\t\t\"OM\" => \"Oman\",\n\t\t\t\"PC\" => \"Pacific Islands Trust Territory\",\n\t\t\t\"PK\" => \"Pakistan\",\n\t\t\t\"PW\" => \"Palau\",\n\t\t\t\"PS\" => \"Palestinian Territories\",\n\t\t\t\"PA\" => \"Panama\",\n\t\t\t\"PZ\" => \"Panama Canal Zone\",\n\t\t\t\"PG\" => \"Papua New Guinea\",\n\t\t\t\"PY\" => \"Paraguay\",\n\t\t\t\"YD\" => \"People's Democratic Republic of Yemen\",\n\t\t\t\"PE\" => \"Peru\",\n\t\t\t\"PH\" => \"Philippines\",\n\t\t\t\"PN\" => \"Pitcairn Islands\",\n\t\t\t\"PL\" => \"Poland\",\n\t\t\t\"PT\" => \"Portugal\",\n\t\t\t\"PR\" => \"Puerto Rico\",\n\t\t\t\"QA\" => \"Qatar\",\n\t\t\t\"RO\" => \"Romania\",\n\t\t\t\"RU\" => \"Russia\",\n\t\t\t\"RW\" => \"Rwanda\",\n\t\t\t\"RE\" => \"R\u00e9union\",\n\t\t\t\"BL\" => \"Saint Barth\u00e9lemy\",\n\t\t\t\"SH\" => \"Saint Helena\",\n\t\t\t\"KN\" => \"Saint Kitts and Nevis\",\n\t\t\t\"LC\" => \"Saint Lucia\",\n\t\t\t\"MF\" => \"Saint Martin\",\n\t\t\t\"PM\" => \"Saint Pierre and Miquelon\",\n\t\t\t\"VC\" => \"Saint Vincent and the Grenadines\",\n\t\t\t\"WS\" => \"Samoa\",\n\t\t\t\"SM\" => \"San Marino\",\n\t\t\t\"SA\" => \"Saudi Arabia\",\n\t\t\t\"SN\" => \"Senegal\",\n\t\t\t\"RS\" => \"Serbia\",\n\t\t\t\"CS\" => \"Serbia and Montenegro\",\n\t\t\t\"SC\" => \"Seychelles\",\n\t\t\t\"SL\" => \"Sierra Leone\",\n\t\t\t\"SG\" => \"Singapore\",\n\t\t\t\"SK\" => \"Slovakia\",\n\t\t\t\"SI\" => \"Slovenia\",\n\t\t\t\"SB\" => \"Solomon Islands\",\n\t\t\t\"SO\" => \"Somalia\",\n\t\t\t\"ZA\" => \"South Africa\",\n\t\t\t\"GS\" => \"South Georgia and the South Sandwich Islands\",\n\t\t\t\"KR\" => \"South Korea\",\n\t\t\t\"ES\" => \"Spain\",\n\t\t\t\"LK\" => \"Sri Lanka\",\n\t\t\t\"SD\" => \"Sudan\",\n\t\t\t\"SR\" => \"Suriname\",\n\t\t\t\"SJ\" => \"Svalbard and Jan Mayen\",\n\t\t\t\"SZ\" => \"Swaziland\",\n\t\t\t\"SE\" => \"Sweden\",\n\t\t\t\"CH\" => \"Switzerland\",\n\t\t\t\"SY\" => \"Syria\",\n\t\t\t\"ST\" => \"S\u00e3o Tom\u00e9 and Pr\u00edncipe\",\n\t\t\t\"TW\" => \"Taiwan\",\n\t\t\t\"TJ\" => \"Tajikistan\",\n\t\t\t\"TZ\" => \"Tanzania\",\n\t\t\t\"TH\" => \"Thailand\",\n\t\t\t\"TL\" => \"Timor-Leste\",\n\t\t\t\"TG\" => \"Togo\",\n\t\t\t\"TK\" => \"Tokelau\",\n\t\t\t\"TO\" => \"Tonga\",\n\t\t\t\"TT\" => \"Trinidad and Tobago\",\n\t\t\t\"TN\" => \"Tunisia\",\n\t\t\t\"TR\" => \"Turkey\",\n\t\t\t\"TM\" => \"Turkmenistan\",\n\t\t\t\"TC\" => \"Turks and Caicos Islands\",\n\t\t\t\"TV\" => \"Tuvalu\",\n\t\t\t\"UM\" => \"U.S. Minor Outlying Islands\",\n\t\t\t\"PU\" => \"U.S. Miscellaneous Pacific Islands\",\n\t\t\t\"VI\" => \"U.S. Virgin Islands\",\n\t\t\t\"UG\" => \"Uganda\",\n\t\t\t\"UA\" => \"Ukraine\",\n\t\t\t\"SU\" => \"Union of Soviet Socialist Republics\",\n\t\t\t\"AE\" => \"United Arab Emirates\",\n\t\t\t\"GB\" => \"United Kingdom\",\n\t\t\t\"US\" => \"United States\",\n\t\t\t\"ZZ\" => \"Unknown or Invalid Region\",\n\t\t\t\"UY\" => \"Uruguay\",\n\t\t\t\"UZ\" => \"Uzbekistan\",\n\t\t\t\"VU\" => \"Vanuatu\",\n\t\t\t\"VA\" => \"Vatican City\",\n\t\t\t\"VE\" => \"Venezuela\",\n\t\t\t\"VN\" => \"Vietnam\",\n\t\t\t\"WK\" => \"Wake Island\",\n\t\t\t\"WF\" => \"Wallis and Futuna\",\n\t\t\t\"EH\" => \"Western Sahara\",\n\t\t\t\"YE\" => \"Yemen\",\n\t\t\t\"ZM\" => \"Zambia\",\n\t\t\t\"ZW\" => \"Zimbabwe\",\n\t\t\t\"AX\" => \"\u00c5land Islands\",\n\t\t);\n\t}\n}\n"], "fixing_code": ["<?php\n// vim: set ai ts=4 sw=4 ft=php:\n//\tLicense for all code of this FreePBX module can be found in the license file inside the module directory\n//\tCopyright 2014 Schmooze Com Inc.\n//\nnamespace FreePBX\\modules;\ninclude __DIR__.'/vendor/autoload.php';\nuse libphonenumber\\PhoneNumberUtil;\nuse libphonenumber\\NumberParseException;\nuse libphonenumber\\PhoneNumberFormat;\nuse libphonenumber\\ShortNumberInfo;\nclass Contactmanager extends \\FreePBX_Helpers implements \\BMO {\n\tprivate $message = '';\n\tprivate $lookupCache = array();\n\tprivate $contactsCache = array();\n\tprivate $types = array();\n\tprivate $groupCache = array();\n\tprivate $groupsCache = array();\n\tprivate $token = null;\n\tprivate $cachedSpeedDials = array();\n\tpublic $tmp;\n\tprivate $maxAvatar = 200; //this needs to be set in advanced settings (1-2048)\n\n\tpublic function __construct($freepbx = null) {\n\t\t$this->db = $freepbx->Database;\n\t\t$this->freepbx = $freepbx;\n\t\t$this->userman = $this->freepbx->Userman;\n\n\t\t$this->types = array(\n\t\t\t\"internal\" => array(\n\t\t\t\t\"name\" => _(\"Internal\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"fname\" => _(\"First Name\"),\n\t\t\t\t\t\"lname\" => _(\"Last Name\"),\n\t\t\t\t\t\"username\" => _(\"User\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t),\n\t\t\t\"external\" => array(\n\t\t\t\t\"name\" => _(\"External\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"company\" => _(\"Company\"),\n\t\t\t\t\t\"numbers\" => _(\"Numbers\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t),\n\t\t\t\"private\" => array(\n\t\t\t\t\"name\" => _(\"Private\"),\n\t\t\t\t\"fields\" => array(\n\t\t\t\t\t\"displayname\" => _(\"Display Name\"),\n\t\t\t\t\t\"company\" => _(\"Company\"),\n\t\t\t\t\t\"numbers\" => _(\"Numbers\"),\n\t\t\t\t\t\"actions\" => _(\"Actions\")\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\t$this->tmp = $this->freepbx->Config->get(\"ASTSPOOLDIR\") . \"/tmp\";\n\t}\n\n\tpublic function ucpDelGroup($id,$display,$data) {\n\t}\n\n\tpublic function ucpAddGroup($id, $display, $data) {\n\t\t$this->ucpUpdateGroup($id,$display,$data);\n\t}\n\n\tpublic function ucpUpdateGroup($id,$display,$data) {\n\t\tif($display == 'userman' && isset($_POST['type']) && $_POST['type'] == 'group') {\n\t\t\tif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"yes\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByGID($id,'Contactmanager','speeddial',true);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Ucp->setSettingByGID($id,'Contactmanager','speeddial',false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is deleted\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpDelUser($id, $display, $ucpStatus, $data) {\n\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is added\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpAddUser($id, $display, $ucpStatus, $data) {\n\t\t$this->ucpUpdateUser($id, $display, $ucpStatus, $data);\n\t}\n\n\t/**\n\t* Hook functionality from userman when a user is updated\n\t* @param {int} $id      The userman user id\n\t* @param {string} $display The display page name where this was executed\n\t* @param {array} $data    Array of data to be able to use\n\t*/\n\tpublic function ucpUpdateUser($id, $display, $ucpStatus, $data) {\n\t\tif($display == 'userman' && isset($_POST['type']) && $_POST['type'] == 'user') {\n\t\t\tif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"yes\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',true);\n\t\t\t} elseif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"no\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',false);\n\t\t\t} elseif(!empty($_POST['contactmanager_speeddial_enable']) && $_POST['contactmanager_speeddial_enable'] == \"inherit\") {\n\t\t\t\t$this->freepbx->Ucp->setSettingByID($id,'Contactmanager','speeddial',null);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function ucpConfigPage($mode, $user, $action) {\n\t\tif(empty($user)) {\n\t\t\t$speeddial = ($mode == 'group') ? true : null;\n\t\t} else {\n\t\t\tif($mode == \"group\") {\n\t\t\t\t$speeddial = $this->freepbx->Ucp->getSettingByGID($user['id'],'Contactmanager','speeddial');\n\t\t\t\t$speeddial = !($speeddial) ? false : true;\n\t\t\t} else {\n\t\t\t\t$speeddial = $this->freepbx->Ucp->getSettingByID($user['id'],'Contactmanager','speeddial');\n\t\t\t}\n\t\t}\n\n\t\t$html[0] = array(\n\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\"content\" => load_view(dirname(__FILE__).\"/views/ucp_config.php\",array(\"speeddial\" => $speeddial, \"mode\" => $mode))\n\t\t);\n\t\treturn $html;\n\t}\n\n\tpublic function usermanAddContactInfo($user) {\n\t\tif(empty($this->allImages)) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_userman_images\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute();\n\t\t\t$tmp = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t\t$this->allImages = array();\n\t\t\tforeach($tmp as $t) {\n\t\t\t\t$this->allImages[$t['uid']] = true;\n\t\t\t}\n\t\t}\n\t\tif(!empty($this->allImages[$user['id']])) {\n\t\t\t$user['image'] = true;\n\t\t}\n\t\treturn $user;\n\t}\n\n\tpublic function install() {\n\t\tglobal $db;\n\n\t\t$fcc = new \\featurecode('contactmanager', 'app-contactmanager-sd');\n\t\t$fcc->setDescription('Contact Manager Speed Dials');\n\t\t$fcc->setDefault('*10');\n\t\t$fcc->setProvideDest();\n\t\t$fcc->update();\n\t\tunset($fcc);\n\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE type = 'userman'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$oldgrps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\t$sql = \"UPDATE contactmanager_groups SET type = 'internal' WHERE type = 'userman'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `uuid` = UUID() WHERE `uuid` IS NULL\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\n\t\t$info = $this->freepbx->Modules->getInfo(\"contactmanager\");\n\t\t$newinstall = ($info['contactmanager']['status'] == MODULE_STATUS_NOTINSTALLED);\n\t\tif(empty($oldgrps) && $newinstall) {\n\t\t\t$ret = $this->addGroup(_(\"User Manager Group\"),\"internal\");\n\t\t\t$defaultgrp = $ret['id'];\n\t\t} elseif(isset($oldgrps[0])) {\n\t\t\t$defaultgrp = $oldgrps[0]['id'];\n\t\t}\n\n\t\tif(!empty($info['contactmanager']['dbversion']) && version_compare_freepbx($info['contactmanager']['dbversion'],\"13.0.37\",\"<\")) {\n\t\t\t$sql = \"SELECT e.* FROM contactmanager_group_entries e, contactmanager_groups g WHERE type = 'internal' AND e.groupid = g.id\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute();\n\t\t\t$entries = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t\tforeach($entries as $entry) {\n\t\t\t\t$uid = $entry['user'];\n\t\t\t\t$gs = $this->userman->getModuleSettingByID($uid,\"contactmanager\",\"showingroups\");\n\t\t\t\t$gs = is_array($gs) ? $gs : array();\n\t\t\t\tif(!in_array($entry['groupid'],$gs)) {\n\t\t\t\t\t$gs[] = $entry['groupid'];\n\t\t\t\t}\n\t\t\t\t$this->userman->setModuleSettingByID($uid,\"contactmanager\",\"showingroups\", $gs);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($defaultgrp) && !$newinstall) {\n\t\t\t//Now scan all the old users/groups from userman and get the setting\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\tforeach($users as $user) {\n\t\t\t\t$show = $this->userman->getModuleSettingByID($user['id'],\"contactmanager\",\"show\");\n\t\t\t\tif($show) {\n\t\t\t\t\t$gs = $this->userman->getModuleSettingByID($user['id'],\"contactmanager\",\"showingroups\");\n\t\t\t\t\t$gs = is_array($gs) ? $gs : array();\n\t\t\t\t\tif(!in_array($defaultgrp,$gs)) {\n\t\t\t\t\t\t$gs[] = $defaultgrp;\n\t\t\t\t\t}\n\t\t\t\t\t$this->userman->setModuleSettingByID($user['id'],\"contactmanager\",\"showingroups\", $gs);\n\t\t\t\t}\n\t\t\t\t$this->usermanUpdateUser($user['id'],'',$user);\n\t\t\t}\n\t\t\t$groups = $this->userman->getAllGroups();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$show = $this->userman->getModuleSettingByGID($group['id'],\"contactmanager\",\"show\");\n\t\t\t\tif($show) {\n\t\t\t\t\t$this->userman->setModuleSettingByGID($group['id'],\"contactmanager\",\"showingroups\", array($defaultgrp));\n\t\t\t\t}\n\t\t\t\t$this->usermanUpdateGroup($group['id'],'',$group);\n\t\t\t}\n\t\t} elseif($newinstall) {\n\t\t\t$id = $this->freepbx->Userman->getAutoGroup();\n\t\t\t$id = !empty($id) ? $id : 1;\n\t\t\t$group = $this->freepbx->Userman->getGroupByGID($id);\n\t\t\tif(!empty($group)) {\n\t\t\t\t$this->userman->setModuleSettingByGID($id,\"contactmanager\",\"showingroups\", array($defaultgrp));\n\t\t\t\t$this->usermanUpdateGroup($id,'',$group);\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT i.*, e.user FROM contactmanager_entry_images i, contactmanager_group_entries e, contactmanager_groups g WHERE i.entryid = e.id AND e.groupid = g.id AND g.type = 'internal'\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$entries = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t$sql = \"INSERT INTO contactmanager_entry_userman_images (`uid`,`image`,`format`,`gravatar`) VALUES (:uid, :image, :format, :gravatar)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sql1 = \"DELETE FROM contactmanager_entry_images WHERE entryid = :id\";\n\t\t$sth1 = $this->db->prepare($sql1);\n\t\tforeach($entries as $entry) {\n\t\t\ttry {\n\t\t\t\t$sth->execute(array(\n\t\t\t\t\t\"uid\" => $entry['user'],\n\t\t\t\t\t\"image\" => $entry['image'],\n\t\t\t\t\t\"format\" => $entry['format'],\n\t\t\t\t\t\"gravatar\" => $entry['gravatar']\n\t\t\t\t));\n\t\t\t} catch(\\Exception $e) {}\n\t\t\t$sth1->execute(array(\"id\" => $entry['entryid']));\n\t\t}\n\n\t\tif(!$this->getConfig(\"strippedUpgrade2\")) {\n\t\t\tset_time_limit(0);\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach($users as $user) {\n\t\t\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($user['id'],'contactmanager','showingroups');\n\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\tforeach ($groups as $group) {\n\t\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t\t$user['extraData'] = $user;\n\t\t\t\t\t\t$user['user'] = $user['id'];\n\t\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($user));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\t\t\tif ($entry['user'] == $user['id']) {\n\t\t\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$groups = $this->getGroups();\n\t\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\tif(empty($entry['numbers'])) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$this->deleteNumbersByEntryID($entry['uid']);\n\t\t\t\t\tforeach($entry['numbers'] as &$number) {\n\t\t\t\t\t\tif(empty($number['locale']) && $number['type'] !== 'internal') {\n\t\t\t\t\t\t\t$number['locale'] = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$this->addNumbersByEntryID($entry['uid'], $entry['numbers']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->setConfig(\"strippedUpgrade2\",true);\n\t\t}\n\n\t\t// CONTACTMANLOOKUPLENGTH in Advanced Settings of FreePBX\n\t\t//\n\t\t$set['value'] = 7;\n\t\t$set['defaultval'] =& $set['value'];\n\t\t$set['readonly'] = 0;\n\t\t$set['hidden'] = 0;\n\t\t$set['level'] = 1;\n\t\t$set['module'] = 'contactmanager'; //This will help delete the settings when module is uninstalled\n\t\t$set['category'] = 'Contact Manager Module';\n\t\t$set['emptyok'] = 0;\n\t\t$set['name'] = 'Partial Match Length';\n\t\t$set['description'] = 'How many digits should a number be before a partial match is used when looking up a contact';\n\t\t$set['type'] = CONF_TYPE_INT;\n\t\t$set['options'] = array(1,86400);\n\t\t$this->freepbx->Config->define_conf_setting('CONTACTMANLOOKUPLENGTH',$set,true);\n\t}\n\tpublic function uninstall() {\n\n\t}\n\tpublic function backup(){\n\n\t}\n\tpublic function restore($backup){\n\n\t}\n\n\tpublic function doDialplanHook(&$ext, $engine, $priority) {\n\t\t$contextname = 'app-contactmanager-sd';\n\t\t$fcc = new \\featurecode('contactmanager', $contextname);\n\t\t$code = $fcc->getCodeActive();\n\t\tunset($fcc);\n\n\t\tif (!empty($code)) {\n\t\t\t$this->syncSpeedDials();\n\n\t\t\t$entries = $this->getAllSpeedDials();\n\t\t\tforeach($entries as $entry) {\n\t\t\t\t$ext->add('ext-contactmanager-sd', $code.$entry['speeddial'], '', new \\ext_goto($contextname.',${EXTEN},1'));\n\t\t\t}\n\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_answer());\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_macro('user-callerid'));\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_gotoif('$[${DB_EXISTS(CM/speeddial/${EXTEN:'.strlen($code).'})}=1]','from-internal,${DB(CM/speeddial/${EXTEN:'.strlen($code).'})},1'));\n\t\t\t$ext->add($contextname, \"_\".$code.\"X!\", '', new \\ext_goto('bad-number,s,1'));\n\n\t\t\t$ext->addInclude('from-internal-additional', $contextname);\n\t\t}\n\t}\n\n\tpublic static function myDialplanHooks() {\n\t\treturn 400;\n\t}\n\n\t/**\n\t * Get the Contact Image URL\n\t * @param  integer $did The incoming DID to lookup\n\t * @param  integer $ext The local extension to use for lookups\n\t * @return string      The link to return\n\t */\n\tpublic function getExternalImageUrl($did,$ext=null) {\n\t\tif(!empty($ext)) {\n\t\t\treturn 'ajax.php?module=contactmanager&command=image&token='.$this->getToken().'&ext='.$ext.'&did='.$did;\n\t\t} else {\n\t\t\treturn 'ajax.php?module=contactmanager&command=image&token='.$this->getToken().'&did='.$did;\n\t\t}\n\t}\n\n\t/**\n\t * Get Token for unauthenticated Ajax requests\n\t * Will generate a token if one does not exist\n\t * @return string The Token\n\t */\n\tpublic function getToken() {\n\t\tif(!empty($this->token)) {\n\t\t\treturn $this->token;\n\t\t}\n\t\t$this->token = $this->getConfig(\"token\");\n\t\tif(empty($this->token)) {\n\t\t\t$this->token = bin2hex(openssl_random_pseudo_bytes(16));\n\t\t\t$this->setConfig(\"token\",$this->token);\n\t\t}\n\t\treturn $this->token;\n\t}\n\n\tpublic function ajaxRequest($req, &$setting) {\n\t\tswitch ($req) {\n\t\t\tcase 'image':\n\t\t\t\t$setting['authenticate'] = false;\n\t\t\t\t$setting['allowremote'] = true;\n\t\t\tcase 'limage':\n\t\t\tcase 'uploadimage':\n\t\t\tcase 'delimage':\n\t\t\tcase 'grid':\n\t\t\tcase 'getgravatar':\n\t\t\tcase 'checksd':\n\t\t\tcase 'sdgrid':\n\t\t\t\treturn true;\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function ajaxCustomHandler() {\n\t\tswitch($_REQUEST['command']) {\n\t\t\tcase \"image\":\n\t\t\t\t$token = !empty($_REQUEST['token']) ? $_REQUEST['token'] : \"\";\n\t\t\t\t$stoken = $this->getToken();\n\t\t\t\tif($token != $stoken) {\n\t\t\t\t\theader('HTTP/1.0 403 Forbidden');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\tcase \"limage\":\n\t\t\t\t$entryid = !empty($_REQUEST['entryid']) ? $_REQUEST['entryid'] : null;\n\t\t\t\t$type = !empty($_REQUEST['type']) ? $_REQUEST['type'] : null;\n\t\t\t\t$this->displayContactImage($entryid, $type);\n\t\t\t\treturn true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a Contact Image\n\t * @method getContactImage\n\t * @param  integer              $entryid The EntryID in Contact Manager\n\t * @param  string               $type    Type of Entry, Internal or External\n\t * @return string                   The image binary\n\t */\n\tpublic function getContactImage($entryid=null,$type=null) {\n\t\t$mods = $this->freepbx->Hooks->processHooks($entryid,$type);\n\t\tforeach($mods as $mod => $contents) {\n\t\t\tif(!empty($contents)) {\n\t\t\t\t$buffer = $contents;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(empty($buffer)) {\n\t\t\t$buffer = '';\n\t\t\tif(!empty($entryid)) {\n\t\t\t\tif(!empty($type)) {\n\t\t\t\t\tswitch($type) {\n\t\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t\t$data = $this->freepbx->Userman->getUserByID($entryid);\n\t\t\t\t\t\t\t$data = $this->getImageByID($data['id'], $data['email'], 'internal');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"private\" :\n\t\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t\t$data = $this->getEntryByID($entryid);\n\t\t\t\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t\t\t\t$data['image'] = $data['image']['image'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$data = $this->getEntryByID($entryid);\n\t\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t\t$data['image'] = $data['image']['image'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!empty($data['image'])) {\n\t\t\t\t\t$buffer = $data['image'];\n\t\t\t\t}\n\t\t\t} elseif(!empty($_REQUEST['temporary'])) {\n\t\t\t\t$name = basename($_REQUEST['name']);\n\t\t\t\t$buffer = file_get_contents($this->tmp.\"/\".$name);\n\t\t\t} elseif(!empty($_REQUEST['entryid'])) {\n\t\t\t\t$data = $this->getEntryByID($_REQUEST['entryid']);\n\t\t\t\tif(!empty($data['image']['image'])) {\n\t\t\t\t\t$buffer = $data['image']['image'];\n\t\t\t\t}\n\t\t\t} elseif(!empty($_REQUEST['did'])) {\n\t\t\t\t$parts = explode(\".\",$_REQUEST['did']);\n\t\t\t\t$did = $parts[0];\n\t\t\t\tif(!empty($did)) {\n\t\t\t\t\t$did = preg_replace(\"/[^0-9\\*#]/\",\"\",$parts[0]);\n\t\t\t\t\tif(!empty($_POST['ext'])) {\n\t\t\t\t\t\t$user = $this->userman->getUserByDefaultExtension($_POST['ext']);\n\t\t\t\t\t\tif(!empty($user)) {\n\t\t\t\t\t\t\t$data = $this->lookupNumberByUserID($user['id'], $did);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(empty($data)) {\n\t\t\t\t\t\t$data = $this->lookupNumberByUserID(-1, $did);\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($data) && !empty($data['image']['image'])) {\n\t\t\t\t\t\t$buffer = $data['image']['image'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $buffer;\n\t}\n\n\t/**\n\t * Display Contact Image in browser\n\t * @method displayContactImage\n\t * @param  integer              $entryid The EntryID in Contact Manager\n\t * @param  string              $type    Type of Entry, Internal or External\n\t */\n\tpublic function displayContactImage($entryid=null,$type=null) {\n\t\t$buffer = $this->getContactImage($entryid,$type);\n\t\tif(!empty($buffer)) {\n\t\t\t$finfo = new \\finfo(FILEINFO_MIME);\n\t\t\theader(\"Cache-Control: no-cache, must-revalidate\");\n\t\t\theader(\"Expires: Sat, 26 Jul 1997 05:00:00 GMT\");\n\t\t\theader(\"Content-type: \".$finfo->buffer($buffer));\n\t\t\techo $buffer;\n\t\t} else {\n\t\t\theader('HTTP/1.0 404 Not Found');\n\t\t}\n\t}\n\n\tpublic function getAllSpeedDials($cached=true) {\n\t\tif($cached && !empty($this->cachedSpeedDials)) {\n\t\t\treturn $this->cachedSpeedDials;\n\t\t}\n\t\t$sql = \"SELECT e.*, s.id as speeddial, n.number, n.type as numbertype, g.type as grouptype FROM contactmanager_entry_speeddials s, contactmanager_group_entries e, contactmanager_entry_numbers n, contactmanager_groups g WHERE e.groupid = g.id AND e.id = s.entryid AND n.id = s.numberid ORDER BY s.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$this->cachedSpeedDials = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $this->cachedSpeedDials;\n\t}\n\n\tpublic function syncSpeedDials() {\n\t\t$sds = $this->getAllSpeedDials(false);\n\t\t$active = array();\n\t\tforeach($sds as $sd) {\n\t\t\t$this->freepbx->astman->database_put(\"CM\",\"speeddial/\".$sd['speeddial'],$sd['number']);\n\t\t\t$active[] = '/CM/speeddial/'.$sd['speeddial'];\n\t\t}\n\t\t$all = $this->freepbx->astman->database_show('CM');\n\t\tforeach($all as $key => $value) {\n\t\t\tif(!in_array($key,$active)) {\n\t\t\t\tpreg_match('/^\\/CM\\/speeddial\\/(\\d+)$/',$key,$match);\n\t\t\t\t$this->freepbx->astman->database_del(\"CM\",\"speeddial/\".$match[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkSpeedDialConflict($id,$entryid=null) {\n\t\tif(is_null($entryid)) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_speeddials WHERE id = :id\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t':id' => $id\n\t\t\t));\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_speeddials WHERE id = :id AND entryid != :entryid\";\n\t\t\t$sth = $this->db->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t':id' => $id,\n\t\t\t\t':entryid' => $entryid\n\t\t\t));\n\t\t}\n\n\t\t$ret = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\treturn empty($ret);\n\t}\n\n\tpublic function ajaxHandler(){\n\t\tswitch ($_REQUEST['command']) {\n\t\t\tcase 'sdgrid':\n\t\t\t\treturn $this->getAllSpeedDials();\n\t\t\tbreak;\n\t\t\tcase 'checksd':\n\t\t\t\tif(empty($_POST['entryid'])) {\n\t\t\t\t\t$ret = $this->checkSpeedDialConflict($_POST['id']);\n\t\t\t\t} else {\n\t\t\t\t\t$ret = $this->checkSpeedDialConflict($_POST['id'],$_POST['entryid']);\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => $ret);\n\t\t\tbreak;\n\t\t\tcase 'getgravatar':\n\t\t\t\t$type = !empty($_POST['grouptype']) ? $_POST['grouptype'] : \"\";\n\t\t\t\t$id = !empty($_POST['id']) ? $_POST['id'] : \"\";\n\t\t\t\tswitch($type) {\n\t\t\t\t\tcase \"private\" :\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t$email = !empty($_POST['email']) ? $_POST['email'] : '';\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"userman\":\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t$email = !empty($_POST['email']) ? $_POST['email'] : '';\n\t\t\t\t\t\tif(empty($email)) {\n\t\t\t\t\t\t\t$data = $this->freepbx->Userman->getUserByID($id);\n\t\t\t\t\t\t\t$email = $data['email'];\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(empty($email)) {\n\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Please enter a valid email address\"));\n\t\t\t\t}\n\t\t\t\t$data = $this->getGravatar($email);\n\t\t\t\tif(!empty($data)) {\n\t\t\t\t\t$dname = \"cm-\".rand().\"-\".md5($email);\n\t\t\t\t\timagepng(imagecreatefromstring($data), $this->tmp.\"/\".$dname.\".png\");\n\t\t\t\t\treturn array(\"status\" => true, \"name\" => $dname, \"filename\" => $dname.\".png\");\n\t\t\t\t} else {\n\t\t\t\t\treturn array(\"status\" => false, \"message\" => sprintf(_(\"Unable to find gravatar for %s\"),$email));\n\t\t\t\t}\n\n\t\t\tbreak;\n\t\t\tcase \"delimage\":\n\t\t\t$type = !empty($_POST['type']) ? $_POST['type'] : 'external';\n\t\t\t\tif(!empty($_POST['id'])) {\n\t\t\t\t\t$this->delImageByID($_POST['id'],$type);\n\t\t\t\t\treturn array(\"status\" => true);\n\t\t\t\t} elseif(!empty($_POST['img'])) {\n\t\t\t\t\t$name = basename($_POST['img']);\n\t\t\t\t\tif(file_exists($this->tmp.\"/\".$name)) {\n\t\t\t\t\t\tunlink($this->tmp.\"/\".$name);\n\t\t\t\t\t\treturn array(\"status\" => true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Invalid\"));\n\t\t\tbreak;\n\t\t\tcase 'uploadimage':\n\t\t\t\t// XXX If the posted file was too large,\n\t\t\t\t// we will get here, but $_FILES is empty!\n\t\t\t\t// Specifically, if the file that was posted is\n\t\t\t\t// larger than 'post_max_size' in php.ini.\n\t\t\t\t// So, php will throw an error, as index\n\t\t\t\t// $_FILES[\"files\"] does not exist, because\n\t\t\t\t// $_FILES is empty.\n\t\t\t\tif (!isset($_FILES)) {\n\t\t\t\t\treturn array(\"status\" => false,\n\t\t\t\t\t\t\"message\" => _(\"File upload failed\"));\n\t\t\t\t}\n\t\t\t\t$this->freepbx->Media();\n\t\t\t\tforeach ($_FILES[\"files\"][\"error\"] as $key => $error) {\n\t\t\t\t\tswitch($error) {\n\t\t\t\t\t\tcase UPLOAD_ERR_OK:\n\t\t\t\t\t\t\t$extension = pathinfo($_FILES[\"files\"][\"name\"][$key], PATHINFO_EXTENSION);\n\t\t\t\t\t\t\t$extension = strtolower($extension);\n\t\t\t\t\t\t\t$supported = array(\"jpg\",\"png\");\n\t\t\t\t\t\t\tif(in_array($extension,$supported)) {\n\t\t\t\t\t\t\t\t$tmp_name = $_FILES[\"files\"][\"tmp_name\"][$key];\n\t\t\t\t\t\t\t\t$dname = \\Media\\Media::cleanFileName($_FILES[\"files\"][\"name\"][$key]);\n\t\t\t\t\t\t\t\t$dname = \"cm-\".rand().\"-\".pathinfo($dname,PATHINFO_FILENAME);\n\t\t\t\t\t\t\t\t//imagepng(imagecreatefromstring(file_get_contents($tmp_name)), $this->tmp.\"/\".$dname.\".png\");\n\t\t\t\t\t\t\t\t$this->resizeImage(file_get_contents($tmp_name),$dname);\n\t\t\t\t\t\t\t\treturn array(\"status\" => true, \"name\" => $dname, \"filename\" => $dname.\".png\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Unsupported file format\"));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_INI_SIZE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file exceeds the upload_max_filesize directive in php.ini\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_FORM_SIZE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_PARTIAL:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"The uploaded file was only partially uploaded\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_NO_FILE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"No file was uploaded\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_NO_TMP_DIR:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Missing a temporary folder\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_CANT_WRITE:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Failed to write file to disk\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UPLOAD_ERR_EXTENSION:\n\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"A PHP extension stopped the file upload\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Can Not Find Uploaded Files\"));\n\t\t\tbreak;\n\t\t\tcase 'grid':\n\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\t\t\t\t$entries = $this->getEntriesByGroupID((int) $_REQUEST['group']);\n\t\t\t\t$entries = array_values($entries);\n\t\t\t\t$final = array();\n\t\t\t\tswitch($group['type']) {\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\t\t\tif(empty($entry['user'])) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$user = $this->freepbx->Userman->getUserByID($entry['user']);\n\t\t\t\t\t\t\t$final[$i] = $user;\n\t\t\t\t\t\t\t$final[$i]['displayname'] = !empty($user['displayname']) ? $user['displayname'] : $user['fname'] . \" \" . $user['lname'];\n\t\t\t\t\t\t\t$final[$i]['displayname'] = !empty($user['displayname']) ? $user['displayname'] . \" (\".$user['username'].\")\" : $user['username'];\n\t\t\t\t\t\t\t$final[$i]['actions'] = '<a href=\"config.php?display=userman&action=showuser&user='.$user['id'].'\"><i class=\"fa fa-edit fa-fw\"></i></a><a href=\"config.php?display=contactmanager&amp;action=delentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-ban fa-fw\"></i></a>';\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"private\":\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\tforeach($entries as $entry) {\n\t\t\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? $entry['numbers'] : array();\n\t\t\t\t\t\t\t$nums = array();\n\t\t\t\t\t\t\tforeach($entry['numbers'] as &$number) {\n\t\t\t\t\t\t\t\t$nums[] = $number['number'] . \"(\".$number['type'].\")\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? implode(\"<br>\",$nums) : \"\";\n\t\t\t\t\t\t\t$entry['actions'] = '<a href=\"config.php?display=contactmanager&amp;action=showentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-edit fa-fw\"></i></a><a href=\"config.php?display=contactmanager&amp;action=delentry&amp;group='.(int) $_REQUEST['group'].'&amp;entry='.$entry['uid'].'\"><i class=\"fa fa-ban fa-fw\"></i></a>';\n\t\t\t\t\t\t\t$final[$i] = $entry;\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn $final;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Resize and image using constraints\n\t * @param  string  $data         Binary image data\n\t * @param  string  $filename     The final filename\n\t * @return string                The basename of the filepath\n\t */\n\tpublic function resizeImage($data, $filename) {\n\t\t$thumb_width = $thumb_height = $this->maxAvatar;\n\t\t$image = imagecreatefromstring($data);\n\t\t$filename = $this->tmp.'/'.$filename.'.png';\n\t\t$width = imagesx($image);\n\t\t$height = imagesy($image);\n\t\t$original_aspect = $width / $height;\n\t\t$thumb_aspect = $thumb_width / $thumb_height;\n\t\tif ( $original_aspect >= $thumb_aspect ) {\n\t\t\t// If image is wider than thumbnail (in aspect ratio sense)\n\t\t\t$new_height = $thumb_height;\n\t\t\t$new_width = $width / ($height / $thumb_height);\n\t\t} else {\n\t\t\t// If the thumbnail is wider than the image\n\t\t\t$new_width = $thumb_width;\n\t\t\t$new_height = $height / ($width / $thumb_width);\n\t\t}\n\t\t$thumb = imagecreatetruecolor( $thumb_width, $thumb_height );\n\t\t// Resize and crop\n\t\timagecopyresampled($thumb,\n\t\t$image,\n\t\t0 - ($new_width - $thumb_width) / 2, // Center the image horizontally\n\t\t0 - ($new_height - $thumb_height) / 2, // Center the image vertically\n\t\t0, 0,\n\t\t$new_width, $new_height,\n\t\t$width, $height);\n\t\timagepng($thumb, $filename, 9);\n\t\treturn basename($filename);\n\t}\n\n\t/**\n\t * Get either a Gravatar URL or complete image tag for a specified email address.\n\t *\n\t * @param string $email The email address\n\t * @source https://gravatar.com/site/implement/images/php/\n\t */\n\tfunction getGravatar($email) {\n\t\t$s = $this->maxAvatar; //Size in pixels, defaults to 80px [ 1 - 2048 ]\n\t\t$d = '404'; //Default imageset to use [ 404 | mm | identicon | monsterid | wavatar ]\n\t\t$r = 'g'; //Maximum rating (inclusive) [ g | pg | r | x ]\n\t\t$pest = new \\Pest('https://www.gravatar.com/avatar/');\n\t\t$email = md5( strtolower( trim( $email ) ) );\n\t\ttry{\n\t\t\treturn $pest->get($email.'?s='.$s.'&d='.$d.'&r='.$r);\n\t\t} catch(\\Exception $e) {\n\t\t\tswitch(get_class($e)) {\n\t\t\t\tcase \"Pest_NotFound\":\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Get Inital Display\n\t * @param {string} $display The Page name\n\t */\n\tpublic function doConfigPageInit($display) {\n\t\tif (isset($_REQUEST['action'])) {\n\t\t\tswitch ($_REQUEST['action']) {\n\t\t\tcase \"delgroup\":\n\t\t\t\t$ret = $this->deleteGroupByID((int) $_REQUEST['group']);\n\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\tcase \"delentry\":\n\t\t\t\t$ret = $this->deleteEntryByID($_REQUEST['entry']);\n\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (isset($_POST['group'])) {\n\n\t\t\t$group = !empty($_POST['group']) ? $_POST['group'] : '';\n\n\t\t\tif (!isset($_POST['entry'])) {\n\t\t\t\t$entry = !empty($_POST['entry']) ? $_POST['entry'] : '';\n\t\t\t\t$grouptype = !empty($_POST['grouptype']) ? $_POST['grouptype'] : '';\n\t\t\t\t$groupname = !empty($_POST['groupname']) ? $_POST['groupname'] : '';\n\t\t\t\t$groupowner = !empty($_POST['owner']) ? $_POST['owner'] : '';\n\n\t\t\t\tif ($groupname) {\n\t\t\t\t\tif ($group) {\n\t\t\t\t\t\t$ret = $this->updateGroup($group, $groupname,$groupowner);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = $this->addGroup($groupname, $grouptype);\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => $ret['message'],\n\t\t\t\t\t'type' => $ret['type']\n\t\t\t\t\t);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t$this->message = array(\n\t\t\t\t\t'message' => _('Group name can not be blank'),\n\t\t\t\t\t'type' => 'danger'\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$grouptype = !empty($_POST['grouptype']) ? $_POST['grouptype'] : '';\n\t\t\t\t$image = !empty($_POST['image']) ? $_POST['image'] : '';\n\t\t\t\t$gravatar = !empty($_POST['gravatar']) && $_POST['gravatar'] == 'on' ? true : false;\n\t\t\t\t$numbers = array();\n\t\t\t\tif(!empty($_POST['number']) && is_array($_POST['number'])) {\n\t\t\t\t\tforeach ($_POST['number'] as $index => $number) {\n\t\t\t\t\t\tif (!$number) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$numbers[$index]['number'] = $number;\n\t\t\t\t\t\t$numbers[$index]['extension'] = $_POST['extension'][$index];\n\t\t\t\t\t\t$numbers[$index]['type'] = $_POST['numbertype'][$index];\n\t\t\t\t\t\t$numbers[$index]['locale'] = $_POST['numberlocale'][$index];\n\t\t\t\t\t\tif ($_POST['sms'][$index]) {\n\t\t\t\t\t\t\t$numbers[$index]['flags'][] = 'sms';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($_POST['fax'][$index]) {\n\t\t\t\t\t\t\t$numbers[$index]['flags'][] = 'fax';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$numbers[$index]['speeddial'] = isset($_POST['numbersde'][$index]) ? $_POST['numbersd'][$index] : \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$xmpps = array();\n\t\t\t\tif(!empty($_POST['xmpp']) && is_array($_POST['xmpp'])) {\n\t\t\t\t\tforeach ($_POST['xmpp'] as $index => $xmpp) {\n\t\t\t\t\t\tif (!$xmpp) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$xmpps[$index]['xmpp'] = $xmpp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$emails = array();\n\t\t\t\tif(!empty($_POST['email']) && is_array($_POST['email'])) {\n\t\t\t\t\tforeach ($_POST['email'] as $index => $email) {\n\t\t\t\t\t\tif (!$email) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$emails[$index]['email'] = $email;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$website = array();\n\t\t\t\tif(!empty($_POST['website']) && is_array($_POST['website'])) {\n\t\t\t\t\tforeach ($_POST['website'] as $index => $website) {\n\t\t\t\t\t\tif (!$website) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$websites[$index]['website'] = $website;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$entry = array(\n\t\t\t\t\t'id' => $_POST['entry'] ? $_POST['entry'] : '',\n\t\t\t\t\t'groupid' => $group,\n\t\t\t\t\t'user' => -1,\n\t\t\t\t\t'numbers' => $numbers,\n\t\t\t\t\t'xmpps' => $xmpps,\n\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t'websites' => $websites,\n\t\t\t\t\t'displayname' => $_POST['displayname'] ? $_POST['displayname'] : '',\n\t\t\t\t\t'fname' => $_POST['fname'] ? $_POST['fname'] : '',\n\t\t\t\t\t'lname' => $_POST['lname'] ? $_POST['lname'] : '',\n\t\t\t\t\t'title' => $_POST['title'] ? $_POST['title'] : '',\n\t\t\t\t\t'company' => $_POST['company'] ? $_POST['company'] : '',\n\t\t\t\t\t'address' => $_POST['address'] ? $_POST['address'] : '',\n\t\t\t\t\t'image' => $image,\n\t\t\t\t\t'gravatar' => $gravatar\n\t\t\t\t);\n\n\t\t\t\tswitch ($grouptype) {\n\t\t\t\t\tcase \"internal\":\n\t\t\t\t\t\tthrow new \\Exception(\"Cant add users this way\");\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"private\":\n\t\t\t\t\tcase \"external\":\n\t\t\t\t\tif (count($entry['numbers']) < 1) {\n\t\t\t\t\t\t$this->message = array(\n\t\t\t\t\t\t'message' => _('An entry must have numbers.'),\n\t\t\t\t\t\t'type' => 'danger'\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ($entry['id']) {\n\t\t\t\t\t$ret = $this->updateEntry($entry['id'], $entry);\n\t\t\t\t} else {\n\t\t\t\t\t$ret = $this->addEntryByGroupID($group, $entry);\n\t\t\t\t}\n\n\t\t\t\t$this->message = array(\n\t\t\t\t'message' => $ret['message'],\n\t\t\t\t'type' => $ret['type']\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getFeatureCodeStatus() {\n\t\t$fcc = new \\featurecode('contactmanager', 'app-contactmanager-sd');\n\t\treturn array(\n\t\t\t\"code\" => $fcc->getCode(),\n\t\t\t\"enabled\" => $fcc->isEnabled()\n\t\t);\n\t}\n\n\tpublic function getRightNav($request) {\n\t\t$action = '';\n\t\t$rnav = load_view(dirname(__FILE__).'/views/rnav.php', array(\"action\" => $action));\n\t\treturn $rnav;\n\t}\n\n\t/**\n\t * Function used in page.contactmanager.php\n\t */\n\tpublic function myShowPage() {\n\t\t$groups = $this->getGroupsGroupedByType();\n\t\t$users = $this->userman->getAllUsers();\n\n\t\t$action = !empty($_REQUEST['action']) ? $_REQUEST['action'] : '';\n\t\tif ($action == \"delentry\") {\n\t\t\t$action = \"\";\n\t\t}\n\n\t\t$numbertypes = array(\n\t\t\t'work' => _('Work'),\n\t\t\t'home' => _('Home'),\n\t\t\t'cell' => _('Cell'),\n\t\t\t'other' => _('Other'),\n\t\t);\n\n\t\t$content = '';\n\t\t//\n\n\t\tswitch($action) {\n\t\t\tcase \"speeddials\":\n\t\t\t\t$speeddialcode = $this->getFeatureCodeStatus();\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/speeddial-grid.php', array(\"speeddialcode\" => $speeddialcode));\n\t\t\tbreak;\n\t\t\tcase \"showgroup\":\n\t\t\tcase \"addgroup\":\n\t\t\t\tif ($action == \"showgroup\" && !empty($_REQUEST['group'])) {\n\t\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\t\t\t\t\t$entries = $this->getEntriesByGroupID((int) $_REQUEST['group']);\n\t\t\t\t}\n\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/group.php', array(\"group\" => $group, \"entries\" => $entries, \"users\" => $users, \"message\" => $this->message));\n\t\t\tbreak;\n\t\t\tcase \"showentry\":\n\t\t\tcase \"addentry\":\n\t\t\t\tif (!empty($_REQUEST['group'])) {\n\t\t\t\t\t$group = $this->getGroupByID((int) $_REQUEST['group']);\n\n\t\t\t\t\tif ($action == \"showentry\" && !empty($_REQUEST['entry'])) {\n\t\t\t\t\t\t$entry = $this->getEntryByID($_REQUEST['entry']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$entry = array();\n\t\t\t\t\t}\n\t\t\t\t\t$speeddialcode = $this->getFeatureCodeStatus();\n\t\t\t\t\t$content = load_view(dirname(__FILE__).'/views/entry.php', array(\"regionlist\" => $this->getRegionList(), \"speeddialcode\" => $speeddialcode, \"numbertypes\" => $numbertypes, \"group\" => $group, \"entry\" => $entry, \"users\" => $users, \"message\" => $this->message));\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$file['post'] = ini_get('post_max_size');\n\t\t\t\t$file['upload'] = ini_get('upload_max_filesize');\n\t\t\t\t$content = load_view(dirname(__FILE__).'/views/grid.php', array(\"groups\" => $groups, \"types\" => $this->types, \"file\" => $file));\n\t\t\tbreak;\n\t\t}\n\n\t\treturn load_view(dirname(__FILE__).'/views/main.php', array(\"message\" => $this->message, \"content\" => $content));\n\t}\n\n\tpublic function getActionBar($request) {\n\t\t$buttons = array();\n\n\t\tswitch ($request['display']) {\n\t\tcase 'contactmanager':\n\t\t\tswitch($request['action']) {\n\t\t\tcase 'delentry':\n\t\t\t\tbreak;\n\t\t\tcase 'showgroup':\n\t\t\t\t$buttons['delete'] = array(\n\t\t\t\t\t'name' => 'delete',\n\t\t\t\t\t'id' => 'delete',\n\t\t\t\t\t'value' => _('Delete')\n\t\t\t\t);\n\t\t\t/* Fall through */\n\t\t\tcase 'addgroup':\n\t\t\t\t$buttons['reset'] = array(\n\t\t\t\t\t'name' => 'reset',\n\t\t\t\t\t'id' => 'reset',\n\t\t\t\t\t'value' => _('Reset')\n\t\t\t\t);\n\t\t\t\t$buttons['submit'] = array(\n\t\t\t\t\t'name' => 'submit',\n\t\t\t\t\t'id' => 'submit',\n\t\t\t\t\t'value' => _('Submit')\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'showentry':\n\t\t\t\t$buttons['delete'] = array(\n\t\t\t\t\t'name' => 'delete',\n\t\t\t\t\t'id' => 'delete',\n\t\t\t\t\t'value' => _('Delete')\n\t\t\t\t);\n\t\t\t/* Fall through */\n\t\t\tcase 'addentry':\n\t\t\t\t$buttons['reset'] = array(\n\t\t\t\t\t'name' => 'reset',\n\t\t\t\t\t'id' => 'reset',\n\t\t\t\t\t'value' => _('Reset')\n\t\t\t\t);\n\t\t\t\t$buttons['submit'] = array(\n\t\t\t\t\t'name' => 'submit',\n\t\t\t\t\t'id' => 'submit',\n\t\t\t\t\t'value' => _('Submit')\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $buttons;\n\t}\n\n\tpublic function usermanDelGroup($id,$display,$data) {\n\t\t$groups = $this->getGroups();\n\t\tforeach($data['users'] as $user) {\n\t\t\tif($this->freepbx->Userman->getCombinedModuleSettingByID($user,'contactmanager','show')) {\n\t\t\t\tforeach ($groups as $group) {\n\t\t\t\t\tif ($group['type'] == 'internal') {\n\t\t\t\t\t\t$data = $this->userman->getUserByID($user);\n\t\t\t\t\t\t$data['extraData'] = $data;\n\t\t\t\t\t\t$data['user'] = $user;\n\t\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanAddGroup($id, $display, $data) {\n\t\t$this->usermanUpdateGroup($id,$display,$data);\n\t}\n\n\tpublic function usermanUpdateGroup($id,$display,$data) {\n\t\tif($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByGID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t}\n\t\t$groups = $this->getGroups();\n\t\tforeach($data['users'] as $user) {\n\t\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($user,'contactmanager','showingroups');\n\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t$data = $this->userman->getUserByID($user);\n\t\t\t\t\t$data['extraData'] = $data;\n\t\t\t\t\t$data['user'] = $user;\n\t\t\t\t\t$this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t} else {\n\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\t\tif ($entry['user'] == $user) {\n\t\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Call to be run when user is deleted from user manager\n\t * @param {int} $id      The usermanager id\n\t * @param {string} $display The page executing this command\n\t * @param {array} $data    Array of data about the user\n\t */\n\tpublic function usermanDelUser($id, $display, $data) {\n\t\t$groups = $this->getGroups();\n\t\tforeach ($groups as $group) {\n\t\t\tif ($group['owner'] == $id) {\n\t\t\t\t/* Remove groups owned by user. */\n\t\t\t\t$this->deleteGroupByID($group['id']);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* Remove user from all groups they're in. */\n\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\tif ($entry['user'] == $id) {\n\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanAddUser($id, $display, $data) {\n\t\tif($display == 'extensions' || $display == 'users') {\n\t\t} else if($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t\tif(isset($_POST['contactmanager_image'])) {\n\t\t\t\t$this->updateImageByID($id, $_POST['contactmanager_image'], ($_POST['contactmanager_gravatar'] == \"on\" ? 1 : 0), 'internal');\n\t\t\t}\n\t\t\t$this->setConfig('userLocale', $_POST['contactmanager_dialinglocale'], $id);\n\t\t}\n\n\n\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($id,'contactmanager','showingroups');\n\t\tif(!empty($showingroups)) {\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t\t$data['user'] = $id;\n\t\t\t\t\t$out = $this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function usermanUpdateUser($id, $display, $data) {\n\t\tif($display == 'userman') {\n\t\t\tif(!empty($_POST['contactmanager_showingroups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_showingroups']) ? $_POST['contactmanager_showingroups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_showingroups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','showingroups',null);\n\t\t\t}\n\t\t\tif(!empty($_POST['contactmanager_groups'])) {\n\t\t\t\t$grps = !in_array(\"*\",$_POST['contactmanager_groups']) ? $_POST['contactmanager_groups'] : array(\"*\");\n\t\t\t\t$grps = in_array(\"false\",$_POST['contactmanager_groups']) ? array('false') : $grps;\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',$grps);\n\t\t\t} else {\n\t\t\t\t$this->freepbx->Userman->setModuleSettingByID($id,'contactmanager','groups',null);\n\t\t\t}\n\t\t\tif(isset($_POST['contactmanager_image'])) {\n\t\t\t\t$this->updateImageByID($id, $_POST['contactmanager_image'], ($_POST['contactmanager_gravatar'] == \"on\" ? 1 : 0), 'internal');\n\t\t\t}\n\t\t\t$this->setConfig('userLocale', $_POST['contactmanager_dialinglocale'], $id);\n\t\t}\n\n\t\t$showingroups = $this->freepbx->Userman->getCombinedModuleSettingByID($id,'contactmanager','showingroups');\n\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t$groups = $this->getGroups();\n\t\tforeach ($groups as $group) {\n\t\t\tif ($group['type'] != 'internal') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (in_array($group['id'],$showingroups) || in_array(\"*\",$showingroups)) {\n\t\t\t\t$data['user'] = $id;\n\t\t\t\t$out = $this->updateUsermanEntryByGroupID($group['id'], $this->transformUsermanDataToEntry($data));\n\t\t\t} else {\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach ($entries as $entryid => $entry) {\n\t\t\t\t\tif ($entry['user'] == $id) {\n\t\t\t\t\t\t$this->deleteEntryByID($entryid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function transformUsermanDataToEntry($data) {\n\t\t$entry = array(\n\t\t\t'userid' => $data['id'],\n\t\t\t'displayname' => !empty($data['extraData']['displayname']) ? $data['extraData']['displayname'] : '',\n\t\t\t'fname' => !empty($data['extraData']['fname']) ? $data['extraData']['fname'] : '',\n\t\t\t'lname' => !empty($data['extraData']['lname']) ? $data['extraData']['lname'] : '',\n\t\t\t'title' => !empty($data['extraData']['title']) ? $data['extraData']['title'] : '',\n\t\t\t'company' => !empty($data['extraData']['company']) ? $data['extraData']['company'] : '',\n\t\t\t'address' => !empty($data['extraData']['address']) ? $data['extraData']['address'] : '',\n\t\t\t'numbers' => array(\n\n\t\t\t),\n\t\t\t'emails' => array(\n\n\t\t\t)\n\t\t);\n\t\tif(!empty($data['extraData']['email'])) {\n\t\t\t$entry['emails'][] = array(\n\t\t\t\t'email' => $data['extraData']['email']\n\t\t\t);\n\t\t}\n\n\t\t$locale = $this->getConfig('userLocale',$data['id']);\n\n\t\t$types = array(\"cell\",\"work\",\"home\");\n\t\tforeach($types as $type) {\n\t\t\tif(!empty($data['extraData'][$type])) {\n\t\t\t\t$number = array(\n\t\t\t\t\t'number' => $data['extraData'][$type],\n\t\t\t\t\t'type' => $type\n\t\t\t\t);\n\t\t\t\tif(!empty($locale)) {\n\t\t\t\t\t$number['locale'] = $locale;\n\t\t\t\t}\n\t\t\t\t$entry['numbers'][] = $number;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($data['extraData']['fax'])) {\n\t\t\t$number = array(\n\t\t\t\t'number' => $data['extraData']['fax'],\n\t\t\t\t'type' => 'other',\n\t\t\t\t'flags' => array(\n\t\t\t\t\t'fax'\n\t\t\t\t)\n\t\t\t);\n\t\t\tif(!empty($locale)) {\n\t\t\t\t$number['locale'] = $locale;\n\t\t\t}\n\t\t\t$entry['numbers'][] = $number;\n\t\t}\n\n\t\t$user = $this->userman->getUserByID($data['id']);\n\n\t\tif($user['default_extension'] !== 'none') {\n\t\t\t$number = array(\n\t\t\t\t'number' => $user['default_extension'],\n\t\t\t\t'type' => 'internal'\n\t\t\t);\n\t\t\t$entry['numbers'][] = $number;\n\t\t}\n\n\t\treturn $entry;\n\t}\n\n\t/**\n\t * Get All Groups\n\t *\n\t * Get a List of all groups and their data\n\t *\n\t * @return array\n\t */\n\tpublic function getGroups() {\n\t\tif(!empty($this->groupsCache)) {\n\t\t\treturn $this->groupsCache;\n\t\t}\n\t\t$sql = \"UPDATE contactmanager_groups SET `type` = 'private' WHERE owner != -1;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$sql = \"SELECT * FROM contactmanager_groups ORDER BY `id`\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$this->groupsCache = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $this->groupsCache;\n\t}\n\n\tpublic function getGroupsGroupedByType() {\n\t\t$final = array();\n\t\t$sql = \"UPDATE contactmanager_groups SET `type` = 'private' WHERE owner != -1;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$sql = \"SELECT * FROM contactmanager_groups ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute();\n\t\t$array = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\tforeach($array as $a) {\n\t\t\t$final[$a['type']][] = $a;\n\t\t}\n\t\treturn $final;\n\t}\n\n\t/**\n\t * Get all groups by owner\n\t * @param {int} $owner The owner ID\n\t */\n\tpublic function getGroupsbyOwner($owner) {\n\t\t$user = $this->freepbx->Userman->getUserByID($owner);\n\t\tif(empty($user)) {\n\t\t\treturn array();\n\t\t}\n\t\t$assigned = $this->freepbx->Userman->getCombinedModuleSettingByID($user['id'],'contactmanager','groups');\n\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `owner` = :id\";\n\t\tif (!empty($assigned) && !in_array(\"*\",$assigned) && !in_array(\"false\",$assigned)) {\n\t\t\t$impode = implode(',',$assigned);\n\t\t\tif(!empty($impode)) {\n\t\t\t\t$sql .= \" OR `id` IN (\".implode(',',$assigned).\")\";\n\t\t\t}\n\t\t} else if(!empty($assigned) && in_array(\"*\",$assigned) && !in_array(\"false\",$assigned)) {\n\t\t\t$sql .= \" OR `owner` = -1\";\n\t\t}\n\t\t$sql .= \" ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $owner));\n\t\t$ret = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * Get all groups by owner unrestricted by Userman Settings\n\t * @param  int $owner Owner ID (-1 for all)\n\t * @return array        Array of groups\n\t */\n\tpublic function getUnrestrictedGroupsbyOwner($owner) {\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `owner` = :id ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $owner));\n\t\treturn $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t}\n\n\t/**\n\t * Get Group Information by Group ID\n\t *\n\t * This gets group information by Contact Manager Group ID\n\t *\n\t * @param string $id The ID of the group from Contact Manager\n\t * @return array\n\t */\n\tpublic function getGroupByID($id) {\n\t\tif(!empty($this->groupCache[$id])) {\n\t\t\treturn $this->groupCache[$id];\n\t\t}\n\t\t$sql = \"SELECT * FROM contactmanager_groups WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$group = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\t$this->groupCache[$id] = $group;\n\t\treturn $group;\n\t}\n\n\t/**\n\t * Delete Group by ID\n\t * @param {int} $id The group ID\n\t */\n\tpublic function deleteGroupByID($id) {\n\t\t$group = $this->getGroupByID($id);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$ret = $this->deleteEntriesByGroupID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_groups WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\t$this->groupCache[$id] = null;\n\t\t$this->groupsCache = null;\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully deleted\"));\n\t}\n\n\t/**\n\t * Add group\n\t * @param {string} $name            The group name\n\t * @param {string} $type='internal' The type of group, can be internal or external\n\t * @param {int} $owner           =             -1 The group owner, if -1 then everyone owns\n\t */\n\tpublic function addGroup($name, $type='internal', $owner = -1) {\n\t\tif (!$name || empty($name)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group name can not be blank\"));\n\t\t}\n\t\t$sql = \"INSERT INTO contactmanager_groups (`name`, `owner`, `type`) VALUES (:name, :owner, :type)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':name' => $name,\n\t\t':owner' => $owner,\n\t\t':type' => $type,\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\n\t\tif ($type == 'internal') {\n\t\t\t$groups = $this->userman->getAllGroups();\n\t\t\t$users = $this->userman->getAllUsers();\n\t\t\tforeach($groups as $group) {\n\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByGID($group['id'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\tif(in_array(\"*\",$showingroups)) {\n\t\t\t\t\tforeach ($users as $user) {\n\t\t\t\t\t\tif(in_array($user['id'],$group['users'])) {\n\t\t\t\t\t\t\t$user['user'] = $id;\n\t\t\t\t\t\t\t$this->addEntryByGroupID($id, $this->transformUsermanDataToEntry($user));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Update Group\n\t * @param {int} $id    The group ID\n\t * @param {string} $name  The updated group name\n\t * @param {int} $owner =             -1 The owner\n\t */\n\tpublic function updateGroup($id, $name, $owner = -1) {\n\t\t$group = $this->getGroupByID($id);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => sprintf(_(\"Group '%s' does not exist\"), $id));\n\t\t}\n\t\tif (!$name || empty($name)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group name can not be blank\"));\n\t\t}\n\t\t$sql = \"UPDATE contactmanager_groups SET `name` = :name, `owner` = :owner WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':name' => $name,\n\t\t':owner' => $owner,\n\t\t':id' => $id,\n\t\t));\n\n\t\t$this->groupCache[$id] = null;\n\t\t$this->groupsCache = null;\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group successfully updated\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Get all information about an Entry\n\t * @param {int} $id The entry ID\n\t */\n\tpublic function getEntryByID($id) {\n\t\t$fields = array(\n\t\t'e.id',\n\t\t'e.id as uid',\n\t\t'e.groupid',\n\t\t'e.user',\n\t\t'e.displayname',\n\t\t'e.fname',\n\t\t'e.lname',\n\t\t'e.title',\n\t\t'e.company',\n\t\t'e.address as address',\n\t\t'g.type as type'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_group_entries as e, contactmanager_groups as g WHERE e.id = :id AND e.groupid = g.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$entry = $sth->fetch(\\PDO::FETCH_ASSOC);\n\n\t\t$numbers = $this->getNumbersByEntryID($id);\n\t\tif ($numbers) {\n\t\t\tforeach ($numbers as $number) {\n\t\t\t\t$number['flags'] = !empty($number['flags']) ? explode('|', $number['flags']) : array();\n\t\t\t\t$number['flags'][] = 'phone';\n\t\t\t\t$entry['numbers'][$number['id']] = array(\n\t\t\t\t'number' => $number['number'],\n\t\t\t\t'extension' => $number['extension'],\n\t\t\t\t'countrycode' => $number['countrycode'],\n\t\t\t\t'nationalnumber' => $number['nationalnumber'],\n\t\t\t\t'regioncode' => $number['regioncode'],\n\t\t\t\t'locale' => $number['locale'],\n\t\t\t\t'stripped' => $number['stripped'],\n\t\t\t\t'E164' => $number['E164'],\n\t\t\t\t'possibleshort' => $number['possibleshort'],\n\t\t\t\t'type' => $number['type'],\n\t\t\t\t'flags' => $number['flags'],\n\t\t\t\t'primary' => isset($number['flags'][0]) ? implode(\",\", $number['flags']) : 'phone',\n\t\t\t\t'speeddial' => $number['speeddial']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$xmpps = $this->getXMPPsByEntryID($id);\n\t\tif ($xmpps) {\n\t\t\tforeach ($xmpps as $xmpp) {\n\t\t\t\t$entry['xmpps'][$xmpp['id']] = array(\n\t\t\t\t'xmpp' => $xmpp['xmpp'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$emails = $this->getEmailsByEntryID($id);\n\t\tif ($emails) {\n\t\t\tforeach ($emails as $email) {\n\t\t\t\t$entry['emails'][$email['id']] = array(\n\t\t\t\t'email' => $email['email'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$websites = $this->getWebsitesByEntryID($id);\n\t\tif ($websites) {\n\t\t\tforeach ($websites as $website) {\n\t\t\t\t$entry['websites'][$website['id']] = array(\n\t\t\t\t'website' => $website['website'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\t\tswitch($group['type']) {\n\t\t\tcase \"private\" :\n\t\t\tcase \"external\":\n\t\t\t\t$email = !empty($entry['emails'][0]) ? $entry['emails'][0] : '';\n\t\t\t\t$image = $this->getImageByID($id, $email, 'external');\n\t\t\t\t$entry['image'] = $image;\n\t\t\t\t$entry['internal'] = false;\n\t\t\tbreak;\n\t\t\tcase \"internal\":\n\t\t\t\t$email = !empty($entry['emails'][0]) ? $entry['emails'][0] : '';\n\t\t\t\t$image = $this->getImageByID($entry['user'], $email, 'internal');\n\t\t\t\t$entry['image'] = $image;\n\t\t\t\t$entry['internal'] = true;\n\t\t\t\t$user = $this->userman->getUserByID($entry['user']);\n\t\t\t\t$entry['default_extension'] = $user['default_extension'];\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new \\Exception(\"Unknown type of {$group['type']}\");\n\t\t\tbreak;\n\t\t}\n\t\treturn $entry;\n\t}\n\n\t/**\n\t * Get all Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getEntriesByGroupID($groupid) {\n\t\t$entries = array();\n\t\t$sql = \"SELECT e.id, e.id as uid, e.groupid, e.user, e.displayname, e.fname, e.lname, e.title, e.company, e.address, g.type FROM contactmanager_group_entries e, contactmanager_groups g WHERE g.id = e.groupid AND e.groupid = :groupid ORDER BY e.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$ents = $sth->fetchAll(\\PDO::FETCH_ASSOC | \\PDO::FETCH_UNIQUE);\n\t\t$e = array();\n\t\tforeach($ents as $uid => $entry) {\n\t\t\t$entry = array_merge($entry,array(\n\t\t\t\t'xmpps' => array(\n\n\t\t\t\t),\n\t\t\t\t'emails' => array(\n\n\t\t\t\t),\n\t\t\t\t'websites' => array(\n\n\t\t\t\t),\n\t\t\t\t'numbers' => array(\n\n\t\t\t\t),\n\t\t\t\t'image' => false,\n\t\t\t\t'default_extension' => null,\n\t\t\t\t'internal' => $entry['type'] === 'internal' ? true : false\n\t\t\t));\n\n\t\t\t$e[$uid] = $entry;\n\t\t}\n\t\t//end cleanup\n\t\t$group = $this->getGroupByID($groupid);\n\t\t$entries = $e;\n\n\t\t$numbers = $this->getNumbersByGroupID($groupid);\n\t\tif ($numbers) {\n\t\t\tforeach ($numbers as $number) {\n\t\t\t\t$entries[$number['entryid']]['numbers'][$number['id']] = array(\n\t\t\t\t\t'number' => $number['number'],\n\t\t\t\t\t'extension' => $number['extension'],\n\t\t\t\t\t'countrycode' => $number['countrycode'],\n\t\t\t\t\t'nationalnumber' => $number['nationalnumber'],\n\t\t\t\t\t'regioncode' => $number['regioncode'],\n\t\t\t\t\t'locale' => $number['locale'],\n\t\t\t\t\t'stripped' => $number['stripped'],\n\t\t\t\t\t'E164' => $number['E164'],\n\t\t\t\t\t'possibleshort' => $number['possibleshort'],\n\t\t\t\t\t'type' => $number['type'],\n\t\t\t\t\t'flags' => $number['flags'] ? explode('|', $number['flags']) : array(),\n\t\t\t\t\t'speeddial' => $number['speeddial']\n\t\t\t\t);\n\t\t\t\tif($number['type'] === 'internal') {\n\t\t\t\t\t$entries[$number['entryid']]['default_extension'] = $number['number'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$xmpps = $this->getXMPPsByGroupID($groupid);\n\t\tif ($xmpps) {\n\t\t\tforeach ($xmpps as $xmpp) {\n\t\t\t\t$entries[$xmpp['entryid']]['xmpps'][$xmpp['id']] = array(\n\t\t\t\t'xmpp' => $xmpp['xmpp'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$emails = $this->getEmailsByGroupID($groupid);\n\t\tif ($emails) {\n\t\t\tforeach ($emails as $email) {\n\t\t\t\t$entries[$email['entryid']]['emails'][$email['id']] = array(\n\t\t\t\t'email' => $email['email'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$websites = $this->getWebsitesByGroupID($groupid);\n\t\tif ($websites) {\n\t\t\tforeach ($websites as $website) {\n\t\t\t\t$entries[$website['entryid']]['websites'][$website['id']] = array(\n\t\t\t\t'website' => $website['website'],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tswitch($group['type']) {\n\t\t\tcase \"internal\":\n\t\t\t\t$images = $this->getImagesByGroupID($groupid,'internal');\n\t\t\t\t$hasImages = array();\n\t\t\t\tforeach($images as $image) {\n\t\t\t\t\t$hasImages[] = $image['uid'];\n\t\t\t\t}\n\t\t\t\t$users = $this->userman->getAllUsers();\n\t\t\t\tforeach($users as $user) {\n\t\t\t\t\tforeach($entries as &$entry) {\n\t\t\t\t\t\tif($entry['user'] === $user['id']) {\n\t\t\t\t\t\t\t$entry['default_extension'] = $user['default_extension'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(in_array($entry['user'],$hasImages)) {\n\t\t\t\t\t\t\t$entry['image'] = true; //we do this to not explode the size of the json\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\t\t\tcase \"private\" :\n\t\t\tcase \"external\":\n\t\t\tdefault:\n\t\t\t\t$images = $this->getImagesByGroupID($groupid,'external');\n\t\t\t\tif($images) {\n\t\t\t\t\tforeach ($images as $image) {\n\t\t\t\t\t\t$entries[$image['entryid']]['image'] = true; //we do this to not explode the size of the json\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\n\t\treturn $entries;\n\t}\n\n\t/**\n\t * Delete Entry by ID\n\t * @param {int} $id The entry ID\n\t */\n\tpublic function deleteEntryByID($id) {\n\t\t//getEntryByID loops back here dont use it\n\t\t$sql = \"SELECT e.groupid, e.user FROM contactmanager_group_entries as e, contactmanager_groups as g WHERE e.id = :id AND e.groupid = g.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$entry = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(empty($entry)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\n\t\t$ret = $this->deleteNumbersByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteXMPPsByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteEmailsByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteWebsitesByEntryID($id);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\tif($group['type'] == \"internal\") {\n\t\t\t$this->userman->setModuleSettingByID($entry['user'],'contactmanager','show', false);\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_group_entries WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteEntriesByGroupID($groupid) {\n\t\t$ret = $this->deleteNumbersByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteXMPPsByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteEmailsByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$ret = $this->deleteWebsitesByGroupID($groupid);\n\t\tif (!$ret['status']) {\n\t\t\treturn $ret;\n\t\t}\n\n\t\t$sql = \"DELETE FROM contactmanager_group_entries WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$this->freepbx->Hooks->processHooks($id);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entries successfully deleted\"));\n\t}\n\n\t/**\n\t * Update Group Entry by Group ID and User Data\n\t * @param  int $groupid The group ID\n\t * @param  array $entry   Array of entry data\n\t * @return [type]          [description]\n\t */\n\tpublic function updateUsermanEntryByGroupID($groupid, $entry) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"SELECT * FROM contactmanager_group_entries WHERE `user` = :user AND `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => $entry['userid']\n\t\t));\n\t\t$data = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(empty($data)) {\n\t\t\treturn $this->addEntryByGroupID($groupid, $entry);\n\t\t}\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `displayname` = :displayname, `fname` = :fname, `lname` = :lname, `title` = :title, `company` = :company, `address` = :address WHERE `user` = :user AND `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => $entry['userid'],\n\t\t':displayname' => !empty($entry['displayname']) ? $entry['displayname'] : '',\n\t\t':fname' => !empty($entry['fname']) ? $entry['fname'] : '',\n\t\t':lname' => !empty($entry['lname']) ? $entry['lname'] : '',\n\t\t':title' => !empty($entry['title']) ? $entry['title'] : '',\n\t\t':company' => !empty($entry['company']) ? $entry['company'] : '',\n\t\t':address' => !empty($entry['address']) ? $entry['address'] : '',\n\t\t));\n\n\t\t$this->updateImageByID($data['id'], !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$this->deleteNumbersByEntryID($data['id']);\n\n\t\t$this->deleteXMPPsByEntryID($data['id']);\n\n\t\t$this->deleteEmailsByEntryID($data['id']);\n\n\t\t$this->deleteWebsitesByEntryID($data['id']);\n\n\t\t$this->addNumbersByEntryID($data['id'], !empty($entry['numbers']) ? $entry['numbers'] : '');\n\n\t\t$this->addXMPPsByEntryID($data['id'], !empty($entry['xmpps']) ? $entry['xmpps'] : '');\n\n\t\t$this->addEmailsByEntryID($data['id'], !empty($entry['emails']) ? $entry['emails'] : '');\n\n\t\t$this->addWebsitesByEntryID($data['id'], !empty($entry['websites']) ? $entry['websites'] : '');\n\t\t$this->freepbx->Hooks->processHooks($data['id'], $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully updated\"), \"id\" => $data['id']);\n\t}\n\n\t/**\n\t * Add Entry to Group\n\t * @param {int} $groupid The group ID\n\t * @param {array} $entry   Array of Entry information\n\t */\n\tpublic function addEntryByGroupID($groupid, $entry) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_group_entries (`groupid`, `user`, `displayname`, `fname`, `lname`, `title`, `company`, `address`, `uuid`) VALUES (:groupid, :user, :displayname, :fname, :lname, :title, :company, :address, UUID())\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $groupid,\n\t\t':user' => !empty($entry['userid']) ? $entry['userid'] : -1,\n\t\t':displayname' => isset($entry['displayname']) ? $entry['displayname'] : \"\",\n\t\t':fname' => isset($entry['fname']) ? $entry['fname'] : \"\",\n\t\t':lname' => isset($entry['lname']) ? $entry['lname'] : \"\",\n\t\t':title' => isset($entry['title']) ? $entry['title'] : \"\",\n\t\t':company' => isset($entry['company']) ? $entry['company'] : \"\",\n\t\t':address' => isset($entry['address']) ? $entry['address'] : \"\"\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\n\t\t$this->updateImageByID($id, !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$this->deleteNumbersByEntryID($id);\n\n\t\t$this->deleteXMPPsByEntryID($id);\n\n\t\t$this->deleteEmailsByEntryID($id);\n\n\t\t$this->deleteWebsitesByEntryID($id);\n\n\t\tif(!empty($entry['numbers'])){\n\t\t\tforeach($entry['numbers'] as $numbers){\n\t\t\t\tif (empty($numbers['speeddial'])){\n\t\t\t\t\t\tunset($numbers['speeddial']);\n\t\t\t\t}\n\t\t\t\t$entrynum[] = $numbers;\n\t\t\t}\n\t\t}\n\n\t\t$this->addNumbersByEntryID($id, !empty($entrynum) ? $entrynum : '');\n\n\t\t$this->addXMPPsByEntryID($id, !empty($entry['xmpps']) ? $entry['xmpps'] : '');\n\n\t\t$this->addEmailsByEntryID($id, !empty($entry['emails']) ? $entry['emails'] : '');\n\n\t\t$this->addWebsitesByEntryID($id, !empty($entry['websites']) ? $entry['websites'] : '');\n\t\t$this->freepbx->Hooks->processHooks($id, $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Add Entries by Group ID\n\t * @param {int} $groupid The group ID\n\t * @param {array} $entries Array of Entry data\n\t */\n\tpublic function addEntriesByGroupID($groupid, $entries) {\n\t\t$group = $this->getGroupByID($groupid);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\tforeach ($entries as $entry) {\n\t\t\t$this->addEntryByGroupID($groupid, $entry);\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entries successfully added\"));\n\t}\n\n\t/**\n\t * Update Entry\n\t * @param {int} $id    The entry ID\n\t * @param {array} $entry Array of Entry Data\n\t */\n\tpublic function updateEntry($id, $entry) {\n\t\t$group = $this->getGroupByID($entry['groupid']);\n\t\tif (!$group) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group does not exist\"));\n\t\t}\n\n\t\t$sql = \"SELECT owner FROM contactmanager_groups WHERE id = :groupid ;\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $entry['groupid'],\n\t\t));\n\t\t$own = $sth->fetch(\\PDO::FETCH_ASSOC);\n\n\t\tif (!$this->getEntryByID($id)) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"UPDATE contactmanager_group_entries SET `groupid` = :groupid, `user` = :user, `displayname` = :displayname, `fname` = :fname, `lname` = :lname, `title` = :title, `company` = :company, `address` = :address WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':groupid' => $entry['groupid'],\n\t\t':user' => !empty($entry['userid']) ? $entry['userid'] : -1,\n\t\t':displayname' => $entry['displayname'],\n\t\t':fname' => $entry['fname'],\n\t\t':lname' => $entry['lname'],\n\t\t':title' => $entry['title'],\n\t\t':company' => $entry['company'],\n\t\t':address' => $entry['address'],\n\t\t':id' => $id,\n\t\t));\n\n\t\t$entry['numbers'] = !empty($entry['numbers']) ? $entry['numbers'] : array();\n\t\t$entry['xmpps'] = !empty($entry['xmpps']) ? $entry['xmpps'] : array();\n\t\t$entry['emails'] = !empty($entry['emails']) ? $entry['emails'] : array();\n\t\t$entry['websites'] = !empty($entry['websites']) ? $entry['websites'] : array();\n\n\t\t$this->updateImageByID($id, !empty($entry['image']) ? $entry['image'] : '', !empty($entry['gravatar']) ? $entry['gravatar'] : '', 'external');\n\n\t\t$ret = $this->deleteNumbersByEntryID($id);\n\t\t$this->addNumbersByEntryID($id, $entry['numbers']);\n\n\t\t$ret = $this->deleteXMPPsByEntryID($id);\n\t\t$this->addXMPPsByEntryID($id, $entry['xmpps']);\n\n\t\t$ret = $this->deleteEmailsByEntryID($id);\n\t\t$this->addEmailsByEntryID($id, $entry['emails']);\n\n\t\t$ret = $this->deleteWebsitesByEntryID($id);\n\t\t$this->addWebsitesByEntryID($id, $entry['websites']);\n\t\t$this->freepbx->Hooks->processHooks($id, $entry);\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry successfully updated\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Get all numbers by entry ID\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function getNumbersByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'n.id',\n\t\t'n.entryid',\n\t\t'n.number',\n\t\t'n.extension',\n\t\t'n.countrycode',\n\t\t'n.nationalnumber',\n\t\t'n.regioncode',\n\t\t'n.locale',\n\t\t'n.stripped',\n\t\t'n.E164',\n\t\t'n.possibleshort',\n\t\t'n.type',\n\t\t'n.flags',\n\t\t's.id as speeddial'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_numbers as n\n\t\tLEFT JOIN contactmanager_entry_speeddials as s ON (s.numberid = n.id) WHERE n.entryid = :entryid ORDER BY n.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Get all images by group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getImagesByGroupID($groupid,$type=\"internal\") {\n\t\tif($type == \"external\" || $type == \"private\") {\n\t\t\t$fields = array(\n\t\t\t'e.id',\n\t\t\t'n.entryid',\n\t\t\t'n.image',\n\t\t\t'n.format'\n\t\t\t);\n\t\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_images as n\n\t\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id\";\n\t\t} else {\n\t\t\t$fields = array(\n\t\t\t'e.id',\n\t\t\t'n.uid',\n\t\t\t'n.image',\n\t\t\t'n.format'\n\t\t\t);\n\t\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_userman_images as n\n\t\t\tLEFT JOIN contactmanager_group_entries as e ON (n.uid = e.user) WHERE `groupid` = :groupid ORDER BY e.id\";\n\t\t}\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Get allm numbers by group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getNumbersByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'n.id',\n\t\t'n.entryid',\n\t\t'n.number',\n\t\t'n.extension',\n\t\t'n.countrycode',\n\t\t'n.nationalnumber',\n\t\t'n.regioncode',\n\t\t'n.locale',\n\t\t'n.stripped',\n\t\t'n.E164',\n\t\t'n.possibleshort',\n\t\t'n.type',\n\t\t'n.flags',\n\t\t's.id as speeddial'\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_numbers as n LEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) LEFT JOIN contactmanager_entry_speeddials as s ON(n.id = s.numberid) WHERE `groupid` = :groupid ORDER BY e.id, n.id \";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$numbers = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $numbers;\n\t}\n\n\t/**\n\t * Delete a number by ID\n\t * @param {int} $id The number ID\n\t */\n\tpublic function deleteNumberByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_numbers WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\t$this->removeSpeedDialNumberByNumberID($id);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry number successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete all numbers by Entry ID\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function deleteNumbersByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_numbers WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\t$this->removeSpeedDialNumbersByEntryID($entryid);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete number from group\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteNumbersByGroupID($groupid) {\n\t\t$sql = \"DELETE n FROM contactmanager_entry_numbers as n\n\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\t$sql = \"DELETE n FROM contactmanager_entry_speeddials as n\n\t\tLEFT JOIN contactmanager_group_entries as e ON (n.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\t$this->syncSpeedDials();\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully deleted\"));\n\t}\n\n\t/**\n\t * Add Number by Entry ID\n\t * @param {int} $entryid The entry ID\n\t * @param {string} $number  The Number\n\t */\n\tpublic function addNumberByEntryID($entryid, $number) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_numbers (entryid, number, extension, type, flags) VALUES (:entryid, :number, :extension, :type, :flags)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':number' => $number['number'],\n\t\t':extension' => $number['extension'],\n\t\t':type' => $number['type'],\n\t\t':flags' => implode('|', $number['flags']),\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry number successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Update Image By Entry ID\n\t * @param  int $entryid The entry ID to update\n\t * @param  string $filename The image filename\n\t * @return array\n\t */\n\tpublic function updateImageByID($id, $filename, $gravatar = false, $type=\"external\") {\n\t\tif(empty($filename) || is_array($filename)) {\n\t\t\treturn;\n\t\t}\n\t\t$name = basename($filename);\n\t\tif(!file_exists($this->tmp.\"/\".$name)) {\n\t\t\treturn;\n\t\t}\n\t\tif($type == \"external\" || $type == \"private\" ) {\n\t\t\t$sql = \"REPLACE INTO contactmanager_entry_images (entryid, image, format, gravatar) VALUES (:id, :image, 'image/png', :gravatar)\";\n\t\t} else {\n\t\t\t$sql = \"REPLACE INTO contactmanager_entry_userman_images (uid, image, format, gravatar) VALUES (:id, :image, 'image/png', :gravatar)\";\n\t\t}\n\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $id,\n\t\t\t':image' => file_get_contents($this->tmp.\"/\".$name),\n\t\t\t':gravatar' => $gravatar ? 1 : 0\n\t\t));\n\n\t\tunlink($this->tmp.\"/\".$name);\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry image successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * Add Numbers by Entry ID\n\t * @param {int} $entryid The entry ID\n\t * @param {array} $numbers Array of numbers to add\n\t */\n\tpublic function addNumbersByEntryID($entryid, $numbers) {\n\t\tif(empty($numbers)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No Numbers to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\t$shortUtil = ShortNumberInfo::getInstance();\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_numbers (entryid, number, extension, type, flags, countrycode, nationalnumber, E164, regioncode, stripped, locale, possibleshort) VALUES (:entryid, :number, :extension, :type, :flags, :countrycode, :nationalnumber, :E164, :regioncode, :stripped, :locale, :possibleshort)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($numbers as $number) {\n\t\t\t$data = array(\n\t\t\t\t':entryid' => $entryid,\n\t\t\t\t':number' => $number['number'],\n\t\t\t\t':extension' => isset($number['extension']) ? $number['extension'] : \"\",\n\t\t\t\t':type' => isset($number['type']) ? $number['type'] : \"\",\n\t\t\t\t':flags' => !empty($number['flags']) ? implode('|', $number['flags']) : \"\",\n\t\t\t);\n\n\t\t\tif($number['type'] === 'internal' || empty($number['locale'])) {\n\t\t\t\t$data[':countrycode'] = null;\n\t\t\t\t$data[':nationalnumber'] = null;\n\t\t\t\t$data[':E164'] = null;\n\t\t\t\t$data[':regioncode'] = null;\n\t\t\t\t$data[':stripped'] = preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number']);\n\t\t\t\t$data[':locale'] = '';\n\t\t\t\t$data[':possibleshort'] = null;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif($number['locale'] === 'AUTO') {\n\t\t\t\t\t\t$info = $phoneUtil->parse($number['number']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$info = $phoneUtil->parse($number['number'], $number['locale']);\n\t\t\t\t\t}\n\t\t\t\t\t$data[':countrycode'] = $info->getCountryCode();\n\t\t\t\t\t$data[':nationalnumber'] = $info->getNationalNumber();\n\t\t\t\t\t$data[':extension'] = !empty($data[':extension']) ? $data[':extension'] : $info->getExtension();\n\t\t\t\t\t$data[':E164'] = $phoneUtil->format($info, PhoneNumberFormat::E164);\n\t\t\t\t\t$data[':regioncode'] = $phoneUtil->getRegionCodeForNumber($info);\n\t\t\t\t\t$data[':possibleshort'] = $shortUtil->isPossibleShortNumber($info) ? 1 : 0;\n\t\t\t\t\t$data[':stripped'] = !empty($data[':possibleshort']) ? preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number'])  : preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':E164']);\n\t\t\t\t\t$data[':locale'] = $phoneUtil->getRegionCodeForNumber($info);\n\t\t\t\t} catch (NumberParseException $e) {\n\t\t\t\t\t$data[':countrycode'] = null;\n\t\t\t\t\t$data[':nationalnumber'] = null;\n\t\t\t\t\t$data[':E164'] = null;\n\t\t\t\t\t$data[':regioncode'] = null;\n\t\t\t\t\t$data[':stripped'] = preg_replace(\"/[^0-9\\*#]/\",\"\",$data[':number']);\n\t\t\t\t\t$data[':locale'] = '';\n\t\t\t\t\t$data[':possibleshort'] = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sth->execute($data);\n\n\t\t\tif(isset($number['speeddial'])) {\n\t\t\t\t$numberid = $this->db->lastInsertId();\n\t\t\t\tif(trim($number['speeddial']) !== \"\") {\n\t\t\t\t\t$this->addSpeedDialNumber($entryid,$numberid,$number['speeddial']);\n\t\t\t\t} else {\n\t\t\t\t\t$this->removeSpeedDialNumberByNumberID($numberid);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry numbers successfully added\"));\n\t}\n\n\tpublic function getSpeedDialByID($id) {\n\t\t$sql = \"SELECT s.*, n.number, e.fname, e.lname, e.title, e.company, n.type as numbertype, g.type as grouptype, e.groupid FROM contactmanager_entry_speeddials s, contactmanager_group_entries e, contactmanager_entry_numbers n, contactmanager_groups g WHERE e.groupid = g.id AND e.id = s.entryid AND n.id = s.numberid AND s.id = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $id\n\t\t));\n\t\treturn $sth->fetch(\\PDO::FETCH_ASSOC);\n\t}\n\n\tpublic function addSpeedDialNumber($entryid, $numberid,$speeddial) {\n\t\t$sql = \"REPLACE INTO contactmanager_entry_speeddials (id, entryid, numberid) VALUES (:id, :entryid, :numberid)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t':id' => $speeddial,\n\t\t\t':entryid' => $entryid,\n\t\t\t':numberid' => $numberid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\tpublic function removeSpeedDialNumberByNumberID($numberid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_speeddials WHERE numberid = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t\":id\" => $numberid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\tpublic function removeSpeedDialNumbersByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_speeddials WHERE entryid = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t\t\":id\" => $entryid\n\t\t));\n\t\t$this->syncSpeedDials();\n\t}\n\n\t/**\n\t * Get Image By Entry ID\n\t * @param  int $entryid The entryid\n\t * @param  string $email   The email addres of entry (for automatic gravatar updates)\n\t * @return array          Array of information about the image\n\t */\n\tpublic function getImageByID($id, $email=false, $type='external') {\n\t\tif($type == 'external' || $type == 'private') {\n\t\t\t$sql = \"SELECT image, format, gravatar FROM contactmanager_entry_images WHERE `entryid` = :id\";\n\t\t} else {\n\t\t\t$sql = \"SELECT image, format, gravatar FROM contactmanager_entry_userman_images WHERE `uid` = :id\";\n\t\t}\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t\t$image = $sth->fetch(\\PDO::FETCH_ASSOC);\n\t\tif(!empty($image['gravatar']) && !empty($email)) {\n\t\t\t$data = $this->getGravatar($email);\n\t\t\tif(empty($data)) {\n\t\t\t\t$this->delImageByID($id, $type);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$rand = rand();\n\t\t\t\timagepng(imagecreatefromstring($data), $this->tmp.\"/\".$rand.\".png\");\n\t\t\t\t$image['image'] = file_get_contents($this->tmp.\"/\".$rand.\".png\");\n\t\t\t\t$this->updateImageByID($id, $this->tmp.\"/\".$rand.\".png\", true, $type);\n\t\t\t\treturn $image;\n\t\t\t}\n\t\t}\n\t\treturn $image;\n\t}\n\n\t/**\n\t * Delete image by Entry ID\n\t * @param  int $id The entry id\n\t * @param  int $type    The entry type\n\t */\n\tpublic function delImageByID($id, $type='external') {\n\t\tif($type == \"external\" || $type == \"private\") {\n\t\t\t$sql = \"DELETE FROM contactmanager_entry_images WHERE `entryid` = :id\";\n\t\t} else {\n\t\t\t$sql = \"DELETE FROM contactmanager_entry_userman_images WHERE `uid` = :id\";\n\t\t}\n\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\t}\n\n\t/**\n\t * Get all XMPP information about an entry\n\t * @param {int} $entryid The entry ID\n\t */\n\tpublic function getXMPPsByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'xmpp',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_xmpps WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$xmpps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $xmpps;\n\t}\n\n\t/**\n\t * Get all XMPPs By Group ID\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function getXMPPsByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'x.id',\n\t\t'x.entryid',\n\t\t'x.xmpp',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_xmpps as x\n\t\tLEFT JOIN contactmanager_group_entries as e ON (x.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, x.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$xmpps = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $xmpps;\n\t}\n\n\t/**\n\t * Delete XMPP information by id\n\t * @param {int} $id The XMPP ID\n\t */\n\tpublic function deleteXMPPByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_xmpps WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPP successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete XMPPs by Entry ID\n\t * @param {int} $entryid The Entry ID\n\t */\n\tpublic function deleteXMPPsByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_xmpps WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully deleted\"));\n\t}\n\n\t/**\n\t * Delete all XMPPS from a group\n\t * @param {int} $groupid The group ID\n\t */\n\tpublic function deleteXMPPsByGroupID($groupid) {\n\t\t$sql = \"DELETE x FROM contactmanager_entry_xmpps as x\n\t\tLEFT JOIN contactmanager_group_entries as e ON (x.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully deleted\"));\n\t}\n\n\t/**\n\t * Add XMPP Entry by ID\n\t * @param {int} $entryid The entry ID\n\t * @param {string} $xmpp    The xmpp user\n\t */\n\tpublic function addXMPPByEntryID($entryid, $xmpp) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_xmpps (entryid, xmpp) VALUES (:entryid, :xmpp)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':xmpp' => $xmpp['xmpp'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPP successfully added\"), \"id\" => $id);\n\t}\n\n\t/**\n\t * All mulitple xmpps per user\n\t * @param {int} $entryid The Entry ID\n\t * @param {array} $xmpps   Array of Xmpps\n\t */\n\tpublic function addXMPPsByEntryID($entryid, $xmpps) {\n\t\tif(empty($xmpps)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No XMPPs to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_xmpps (entryid, xmpp) VALUES (:entryid, :xmpp)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($xmpps as $xmpp) {\n\t\t\tif(empty($xmpp['xmpp'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':xmpp' => $xmpp['xmpp'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry XMPPs successfully added\"));\n\t}\n\n\t/**\n\t * Get emails by Entry ID\n\t * @param {int} $entryid The Entry ID\n\t */\n\tpublic function getEmailsByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'email',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_emails WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$emails = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $emails;\n\t}\n\n\tpublic function getEmailsByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'm.id',\n\t\t'm.entryid',\n\t\t'm.email',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_emails as m\n\t\tLEFT JOIN contactmanager_group_entries as e ON (m.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, m.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$emails = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $emails;\n\t}\n\n\tpublic function deleteEmailByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_emails WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mail successfully deleted\"));\n\t}\n\n\tpublic function deleteEmailsByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_emails WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully deleted\"));\n\t}\n\n\tpublic function deleteEmailsByGroupID($groupid) {\n\t\t$sql = \"DELETE m FROM contactmanager_entry_emails as m\n\t\tLEFT JOIN contactmanager_group_entries as e ON (m.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully deleted\"));\n\t}\n\n\tpublic function addEmailByEntryID($entryid, $email) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_emails (entryid, email) VALUES (:entryid, :email)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':email' => $email['email'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mail successfully added\"), \"id\" => $id);\n\t}\n\n\tpublic function addEmailsByEntryID($entryid, $emails) {\n\t\tif(empty($emails)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No E-Mails to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_emails (entryid, email) VALUES (:entryid, :email)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($emails as $email) {\n\t\t\tif(empty($email['email'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':email' => $email['email'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry E-Mails successfully added\"));\n\t}\n\n\tpublic function getWebsitesByEntryID($entryid) {\n\t\t$fields = array(\n\t\t'id',\n\t\t'entryid',\n\t\t'website',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_websites WHERE `entryid` = :entryid ORDER BY id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\t\t$websites = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $websites;\n\t}\n\n\tpublic function getWebsitesByGroupID($groupid) {\n\t\t$fields = array(\n\t\t'w.id',\n\t\t'w.entryid',\n\t\t'w.website',\n\t\t);\n\t\t$sql = \"SELECT \" . implode(', ', $fields) . \" FROM contactmanager_entry_websites as w\n\t\tLEFT JOIN contactmanager_group_entries as e ON (w.entryid = e.id) WHERE `groupid` = :groupid ORDER BY e.id, w.id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\t\t$websites = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\n\t\treturn $websites;\n\t}\n\n\tpublic function deleteWebsiteByID($id) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_websites WHERE `id` = :id\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':id' => $id));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Website successfully deleted\"));\n\t}\n\n\tpublic function deleteWebsitesByEntryID($entryid) {\n\t\t$sql = \"DELETE FROM contactmanager_entry_websites WHERE `entryid` = :entryid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':entryid' => $entryid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully deleted\"));\n\t}\n\n\tpublic function deleteWebsitesByGroupID($groupid) {\n\t\t$sql = \"DELETE w FROM contactmanager_entry_websites as w\n\t\tLEFT JOIN contactmanager_group_entries as e ON (w.entryid = e.id) WHERE `groupid` = :groupid\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(':groupid' => $groupid));\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully deleted\"));\n\t}\n\n\tpublic function addWebsiteByEntryID($entryid, $website) {\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_websites (entryid, website) VALUES (:entryid, :website)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\t$sth->execute(array(\n\t\t':entryid' => $entryid,\n\t\t':website' => $website['website'],\n\t\t));\n\n\t\t$id = $this->db->lastInsertId();\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Website successfully added\"), \"id\" => $id);\n\t}\n\n\tpublic function addWebsitesByEntryID($entryid, $websites) {\n\t\tif(empty($websites)) {\n\t\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"No Websites to add\"));\n\t\t}\n\t\t$entry = $this->getEntryByID($entryid);\n\t\tif (!$entry) {\n\t\t\treturn array(\"status\" => false, \"type\" => \"danger\", \"message\" => _(\"Group entry does not exist\"));\n\t\t}\n\n\t\t$sql = \"INSERT INTO contactmanager_entry_websites (entryid, website) VALUES (:entryid, :website)\";\n\t\t$sth = $this->db->prepare($sql);\n\t\tforeach ($websites as $website) {\n\t\t\tif(empty($website['website'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$sth->execute(array(\n\t\t\t':entryid' => $entryid,\n\t\t\t':website' => $website['website'],\n\t\t\t));\n\t\t}\n\n\t\treturn array(\"status\" => true, \"type\" => \"success\", \"message\" => _(\"Group entry Websites successfully added\"));\n\t}\n\n\t/**\n\t * Get all contacts for a userman user ID\n\t * @param {int} $id A valid userman ID\n\t */\n\tpublic function getContactsByUserID($id) {\n\t\tif(!empty($this->contactsCache)) {\n\t\t\treturn $this->contactsCache;\n\t\t}\n\t\t$umentries = $this->freepbx->Userman->getAllContactInfo();\n\t\tif($id == -1) {\n\t\t\t$groups = $this->getGroups();\n\t\t} else {\n\t\t\t$groups = $this->getGroupsByOwner($id);\n\t\t}\n\t\t$contacts = array();\n\t\t$entries = array();\n\n\t\tforeach($groups as $group) {\n\t\t\tswitch($group['type']) {\n\t\t\t\tcase \"internal\":\n\t\t\t\tcase \"private\" :\n\t\t\t\tcase \"external\":\n\t\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\t\tif(!empty($entries) && is_array($entries)) {\n\t\t\t\t\t\t$final = array();\n\t\t\t\t\t\tforeach($entries as $id => $entry) {\n\t\t\t\t\t\t\t$numbers = array();\n\t\t\t\t\t\t\t$numbers_info = array();\n\t\t\t\t\t\t\tif(!empty($entry['numbers']) && is_array($entry['numbers'])) {\n\t\t\t\t\t\t\t\t$numbers_info = $entry['numbers'];\n\t\t\t\t\t\t\t\tforeach($entry['numbers'] as $number) {\n\t\t\t\t\t\t\t\t\t//TODO: this is terrible. Multiple numbers are allowed in the GUI but dont display right\n\t\t\t\t\t\t\t\t\t//TODO: To conform for OLD hooks we need to be a string... sigh\n\t\t\t\t\t\t\t\t\tif(isset($numbers[$number['type']])) {\n\t\t\t\t\t\t\t\t\t\tif(!is_array($numbers[$number['type']])) {\n\t\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']] = array($numbers[$number['type']]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']][] = preg_replace(\"/[^0-9\\*#]/\",\"\",$number['number']);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$numbers[$number['type']] = preg_replace(\"/[^0-9\\*#]/\",\"\",$number['number']);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$xmpps = array();\n\t\t\t\t\t\t\tif(!empty($entry['xmpps'])) {\n\t\t\t\t\t\t\t\tforeach($entry['xmpps'] as $xmpp) {\n\t\t\t\t\t\t\t\t\t$xmpps[] = $xmpp['xmpp'];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tunset($entry['emails']);\n\t\t\t\t\t\t\tunset($entry['websites']);\n\t\t\t\t\t\t\tunset($entry['numbers']);\n\t\t\t\t\t\t\tunset($entry['xmpps']);\n\t\t\t\t\t\t\t$entry['xmpps'] = $xmpps;\n\t\t\t\t\t\t\t$entry['numbers'] = $numbers;\n\t\t\t\t\t\t\t$entry['numbers_info'] = $numbers_info;\n\t\t\t\t\t\t\t$entry['displayname'] = !empty($entry['displayname']) ? $entry['displayname'] : $entry['fname'] . \" \" . $entry['lname'];\n\t\t\t\t\t\t\t$entry['type'] = $group['type'];\n\t\t\t\t\t\t\t$entry['groupid'] = $group['id'];\n\t\t\t\t\t\t\t$entry['groupname'] = $group['name'];\n\t\t\t\t\t\t\t$entry['id'] = $entry['uid'];\n\t\t\t\t\t\t\t$contacts[] = $entry;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$this->contactsCache = $contacts;\n\t\treturn $this->contactsCache;\n\t}\n\n\tpublic function lookupNumberByUserID($id, $number) {\n\t\t$number = preg_replace(\"/[^0-9\\*#]/\",\"\",$number);\n\t\t$number = trim($number);\n\t\tif($number == \"\") {\n\t\t\treturn false;\n\t\t}\n\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\n\t\t//quickly look up the number in the database\n\t\tif($id === -1) {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_numbers n, contactmanager_group_entries e, contactmanager_groups g WHERE g.owner = -1 AND g.id = e.groupid AND n.entryid = e.id AND n.stripped AND ((n.stripped LIKE :strippedlike AND CHAR_LENGTH(n.stripped) >= :lookuplength) OR (n.stripped = :stripped))\";\n\t\t\t$sth = $this->freepbx->Database->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t\":strippedlike\" => '%'.$number.'%',\n\t\t\t\t\":stripped\" => $number,\n\t\t\t\t\":lookuplength\" => $lookuplen\n\t\t\t));\n\t\t} else {\n\t\t\t$sql = \"SELECT * FROM contactmanager_entry_numbers n, contactmanager_group_entries e, contactmanager_groups g WHERE (g.owner = -1 OR g.owner = :id) AND g.id = e.groupid AND n.entryid = e.id AND ((n.stripped LIKE :strippedlike AND CHAR_LENGTH(n.stripped) >= :lookuplength) OR (n.stripped = :stripped))\";\n\t\t\t$sth = $this->freepbx->Database->prepare($sql);\n\t\t\t$sth->execute(array(\n\t\t\t\t\":id\" => $id,\n\t\t\t\t\":strippedlike\" => '%'.$number.'%',\n\t\t\t\t\":stripped\" => $number,\n\t\t\t\t\":lookuplength\" => $lookuplen\n\t\t\t));\n\t\t}\n\n\n\t\t$quickResults = $sth->fetchAll(\\PDO::FETCH_ASSOC);\n\t\t$phoneUtil = PhoneNumberUtil::getInstance();\n\t\tif(!empty($quickResults)) {\n\t\t\tif(count($quickResults) === 1 && $number === $quickResults[0]['stripped']) {\n\t\t\t\treturn $this->getEntryByID($quickResults[0]['entryid']);\n\t\t\t} else {\n\t\t\t\tforeach($quickResults as $result) {\n\t\t\t\t\tswitch($phoneUtil->isNumberMatch((string)$number,(string)$result['stripped'])) {\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NSN_MATCH:\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::EXACT_MATCH:\n\t\t\t\t\t\t\treturn $this->getEntryByID($result['entryid']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::SHORT_NSN_MATCH:\n\t\t\t\t\t\t\tif(strlen($number) < $lookuplen) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn $this->getEntryByID($result['entryid']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NOT_A_NUMBER:\n\t\t\t\t\t\tcase \\libphonenumber\\MatchType::NO_MATCH:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$contactsmapped = array();\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\tforeach($contacts as $key => $contact) {\n\t\t\tif(empty($contact['numbers_info'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tforeach($contact['numbers_info'] as $info) {\n\t\t\t\tif(!empty($info['number'])) {\n\t\t\t\t\t$info['uid'] = $contact['uid'];\n\t\t\t\t\t$info['key'] = $key;\n\t\t\t\t\t$contactsmapped[] = $info;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach($contactsmapped as $contactnumber) {\n\t\t\t$search = empty($contactnumber['possibleshort']) ? $contactnumber['E164'] : $contactnumber['stripped'];\n\t\t\tswitch($phoneUtil->isNumberMatch((string)$number,(string)$search)) {\n\t\t\t\tcase \\libphonenumber\\MatchType::NSN_MATCH:\n\t\t\t\tcase \\libphonenumber\\MatchType::EXACT_MATCH:\n\t\t\t\t\treturn $contacts[$contactnumber['key']];\n\t\t\t\tbreak;\n\t\t\t\tcase \\libphonenumber\\MatchType::SHORT_NSN_MATCH:\n\t\t\t\t\tif(strlen($number) < $lookuplen) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn $contacts[$contactnumber['key']];\n\t\t\t\tbreak;\n\t\t\t\tcase \\libphonenumber\\MatchType::NOT_A_NUMBER:\n\t\t\t\tcase \\libphonenumber\\MatchType::NO_MATCH:\n\t\t\t\tdefault:\n\t\t\t\t\tcontinue;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lookup a contact in the global and local directory\n\t * @param {int} $id The userman user id\n\t * @param {string} $search search string\n\t * @param {string} $regexp Regular Expression pattern to replace\n\t * @param {boolean} $regexpsearch Allow regular expressions to be passed into search. Make sure you preg_quote!\n\t */\n\tpublic function lookupByUserID($id, $search, $regexp = null, $regexpsearch = false) {\n\t\tif(trim($search) == \"\") {\n\t\t\treturn false;\n\t\t}\n\t\t$skip = array(\n\t\t\t\"uid\",\n\t\t\t\"groupid\",\n\t\t\t\"user\",\n\t\t\t\"id\",\n\t\t\t\"auth\",\n\t\t\t\"authid\",\n\t\t\t\"password\",\n\t\t\t\"primary_group\",\n\t\t\t\"permissions\",\n\t\t\t\"type\",\n\t\t\t\"image\"\n\t\t);\n\t\tif(!$regexpsearch) {\n\t\t\t$search = preg_quote($search,\"/\");\n\t\t}\n\t\t$search = trim($search);\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\t$iterator = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($contacts));\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\t\tforeach($iterator as $key => $value) {\n\t\t\tif(in_array($key,$skip)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$value = !empty($regexp) ? preg_replace($regexp,'',$value) : $value;\n\t\t\t$value = trim($value);\n\t\t\tif(empty($value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(preg_match('/^' . $search . '$/i',$value) || (strlen($search) > $lookuplen && preg_match('/' . $search . '/i',$value))) {\n\t\t\t\t$k = $iterator->getSubIterator(0)->key();\n\t\t\t\treturn $contacts[$k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lookup a contact in the global and local directory\n\t * @param {int} $id The userman user id\n\t * @param {string} $search search string\n\t * @param {string} $regexp Regular Expression pattern to replace\n\t * @param {boolean} $regexpsearch Allow regular expressions to be passed into search. Make sure you preg_quote!\n\t */\n\tpublic function lookupMultipleByUserID($id, $search, $regexp = null, $regexpsearch = false) {\n\t\t$contacts = $this->getContactsByUserID($id);\n\t\t$final = array();\n\t\t$list = array();\n\t\t$skip = array(\n\t\t\t\"uid\",\n\t\t\t\"groupid\",\n\t\t\t\"user\",\n\t\t\t\"id\",\n\t\t\t\"auth\",\n\t\t\t\"authid\",\n\t\t\t\"password\",\n\t\t\t\"primary_group\",\n\t\t\t\"permissions\",\n\t\t\t\"type\"\n\t\t);\n\t\tif(!$regexpsearch) {\n\t\t\t$search = preg_quote($search,\"/\");\n\t\t}\n\t\t$search = trim($search);\n\t\t$iterator = new \\RecursiveIteratorIterator(new \\RecursiveArrayIterator($contacts));\n\t\t$lookuplen = (int)$this->freepbx->Config->get('CONTACTMANLOOKUPLENGTH');\n\t\tforeach($iterator as $key => $value) {\n\t\t\tif(in_array($key,$skip)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$value = !empty($regexp) ? preg_replace($regexp,'',$value) : $value;\n\t\t\t$value = trim($value);\n\t\t\t$k = $iterator->getSubIterator(0)->key();\n\t\t\tif(empty($value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(!in_array($k, $list) && (preg_match('/' . $search . '/i',$value) || (strlen($search) > $lookuplen && preg_match('/' . $search . '/i',$value)))) {\n\t\t\t\t$final[] = $contacts[$k];\n\t\t\t\t$list[] = $k;\n\t\t\t}\n\t\t}\n\t\treturn $final;\n\t}\n\n\tpublic function usermanUserDetails($user) {\n\t\t$image = $this->getImageByID($user['id'], $user['email'], 'internal');\n\t\t$user['image'] = $image;\n\t\treturn array(load_view(dirname(__FILE__).'/views/user_details_hook.php',array(\"dialinglocale\" => $this->getConfig('userLocale',$user['id']), \"cmdata\" => $user, \"regionlist\" => $this->getRegionList())));\n\t}\n\n\t/**\n\t * Userman Page hook\n\t */\n\tpublic function usermanShowPage() {\n\t\tif(isset($_REQUEST['action'])) {\n\t\t\t$groups = $this->getUnrestrictedGroupsbyOwner(-1);\n\t\t\t$visiblegroups = array();\n\t\t\tforeach($groups as $group) {\n\t\t\t\tif($group['type'] != \"internal\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$visiblegroups[] = $group;\n\t\t\t}\n\t\t\tarray_unshift($visiblegroups,array(\n\t\t\t\t'id' => '*',\n\t\t\t\t'owner' => '*',\n\t\t\t\t'name' => _(\"All Internal Groups\"),\n\t\t\t\t'type' => '*'\n\t\t\t));\n\t\t\t$visiblegroups[] = array(\n\t\t\t\t'id' => 'false',\n\t\t\t\t'owner' => 'false',\n\t\t\t\t'name' => _(\"None\"),\n\t\t\t\t'type' => 'false'\n\t\t\t);\n\t\t\tarray_unshift($groups,array(\n\t\t\t\t'id' => '*',\n\t\t\t\t'owner' => '*',\n\t\t\t\t'name' => _(\"All Public Groups\"),\n\t\t\t\t'type' => '*'\n\t\t\t));\n\t\t\t$groups[] = array(\n\t\t\t\t'id' => 'false',\n\t\t\t\t'owner' => 'false',\n\t\t\t\t'name' => _(\"None\"),\n\t\t\t\t'type' => 'false'\n\t\t\t);\n\t\t\tswitch($_REQUEST['action']) {\n\t\t\t\tcase 'showgroup':\n\t\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByGID((int) $_REQUEST['group'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\t\t$assigned = $this->freepbx->Userman->getModuleSettingByGID((int) $_REQUEST['group'],\"contactmanager\",\"groups\",true);\n\t\t\t\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => $showingroups, \"mode\" => \"group\", \"groups\" => $groups, \"enabled\" => $this->userman->getModuleSettingByGID((int) $_REQUEST['group'],'contactmanager','show')))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tcase 'addgroup':\n\t\t\t\t\t$assigned = array(\"*\");\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => array(), \"mode\" => \"group\", \"groups\" => $groups, \"enabled\" => true))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tcase 'adduser':\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = false;\n\t\t\t\t\t}\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => array(), \"mode\" => \"user\", \"groups\" => $groups, \"enabled\" => true))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tcase 'showuser':\n\t\t\t\t\t$showingroups = $this->freepbx->Userman->getModuleSettingByID($_REQUEST['user'],\"contactmanager\",\"showingroups\",true);\n\t\t\t\t\t$showingroups = is_array($showingroups) ? $showingroups : array();\n\t\t\t\t\t$assigned = $this->freepbx->Userman->getModuleSettingByID($_REQUEST['user'],\"contactmanager\",\"groups\",true);\n\t\t\t\t\t$assigned = is_array($assigned) ? $assigned : array();\n\t\t\t\t\tforeach($groups as $k=>$group) {\n\t\t\t\t\t\t$groups[$k]['selected'] = in_array($group['id'],$assigned);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\"title\" => _(\"Contact Manager\"),\n\t\t\t\t\t\t\t\"rawname\" => \"contactmanager\",\n\t\t\t\t\t\t\t\"content\" => load_view(dirname(__FILE__).'/views/userman_hook.php',array(\"visiblegroups\" => $visiblegroups, \"showingroups\" => $showingroups, \"mode\" => \"user\", \"groups\" => $groups))\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function bulkhandlerGetTypes() {\n\t\treturn array(\n\t\t\t'contacts' => array(\n\t\t\t\t'name' => _('Contacts'),\n\t\t\t\t'description' => _('Contacts and internal/external groups from the Contact Manager module.')\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic function bulkhandlerGetHeaders($type) {\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\treturn array(\n\t\t\t\t'groupname' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Group Name'),\n\t\t\t\t\t'description' => _('Name of group for contact.  If group does not exist, it will be created.'),\n\t\t\t\t),\n\t\t\t\t'grouptype' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Group Type'),\n\t\t\t\t\t'description' => _('Type of group for contact.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'internal' => _('Internal'),\n\t\t\t\t\t\t'external' => _('External'),\n\t\t\t\t\t\t'private' => _('Private'),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'displayname' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'identifier' => _('Display Name'),\n\t\t\t\t\t'description' => _('Display Name'),\n\t\t\t\t),\n\t\t\t\t'fname' => array('description' => _('First Name')),\n\t\t\t\t'lname' => array('description' => _('Last Name')),\n\t\t\t\t'title' => array('description' => _('Title')),\n\t\t\t\t'company' => array('description' => _('Company')),\n\t\t\t\t'address' => array('description' => _('Address')),\n\t\t\t\t'userman_username' => array('description' => _('User Manager username this contact should point to.  Internal contacts only.')),\n\t\t\t\t'phone_1_number' => array(\n\t\t\t\t\t\t'required' => true,\n\t\t\t\t\t\t'description' => _('Phone number.  External contacts only.')\n\t\t\t\t\t\t),\n\t\t\t\t'phone_1_type' => array(\n\t\t\t\t\t'required' => true,\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_1_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_1_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_1_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_1_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'phone_2_number' => array('description' => _('Phone number.  External contacts only.')),\n\t\t\t\t'phone_2_type' => array(\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_2_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_2_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_2_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_2_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'phone_3_number' => array('description' => _('Phone number.  External contacts only.')),\n\t\t\t\t'phone_3_type' => array(\n\t\t\t\t\t'description' => _('Type of phone number.  External contacts only.'),\n\t\t\t\t\t'values' => array(\n\t\t\t\t\t\t'work' => _('Work'),\n\t\t\t\t\t\t'home' => _('Home'),\n\t\t\t\t\t\t'cell' => _('Cell'),\n\t\t\t\t\t\t'other' => _('Other')\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'phone_3_extension' => array('description' => _('Extension.  External contacts only.')),\n\t\t\t\t'phone_3_flags' => array('description' => _('Comma-delimited list of flags.  (Example: sms,fax)  External contacts only.')),\n\t\t\t\t'phone_3_speeddial' => array('description' => _('Speed Dial')),\n\t\t\t\t'phone_3_locale' => array('description' => _('Country Code  Or you can put AUTO , which will fill the Country code automatically. External contacts only. ')),\n\t\t\t\t'email_1' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t\t'email_2' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t\t'email_3' => array('description' => _('E-mail address.  External contacts only.')),\n\t\t\t);\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic function bulkhandlerImport($type, $rawData, $replaceExisting = true) {\n\t\t$ret = NULL;\n\t\t$g_found = false;\n\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\tforeach ($rawData as $data) {\n\t\t\t\tif (empty($data['groupname'])) {\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t'message' => _('Group name is required.'),\n\t\t\t\t\t\t    );\n\t\t\t\t}\n\n\t\t\t\tif (empty($data['grouptype'])) {\n\t\t\t\t\treturn array(\n\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t'message' => _('Group type is required.'),\n\t\t\t\t\t\t    );\n\t\t\t\t}\n\n\t\t\t\tif($data['grouptype'] === 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$group = NULL;\n\n\t\t\t\t$groups = $this->getGroups();\n\t\t\t\tforeach ($groups as $g) {\n\t\t\t\t\tif ($g['name'] == $data['groupname'] && $g['type'] == $data['grouptype']) {\n\t\t\t\t\t\t/* Found an existing group.  Let's bail. */\n\t\t\t\t\t\t$group = $g;\n\t\t\t\t\t\t$g_found= true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$group) {\n\t\t\t\t\t$res = $this->addGroup($data['groupname'], $data['grouptype']);\n\t\t\t\t\tif ($res['status'] && $res['id']) {\n\t\t\t\t\t\t$group = $this->getGroupByID($res['id']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret = array(\n\t\t\t\t\t\t\t\t'status' => false,\n\t\t\t\t\t\t\t\t'message' => _('Group not found and could not be created.'),\n\t\t\t\t\t\t\t    );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$contact = array(\n\t\t\t\t\t\t'id' => '',\n\t\t\t\t\t\t'groupid' => $group['id'],\n\t\t\t\t\t\t'user' => -1,\n\t\t\t\t\t\t'displayname' => $data['displayname'],\n\t\t\t\t\t\t'fname' => isset($data['fname'])?$data['fname']:'',\n\t\t\t\t\t\t'lname' => isset($data['lname'])?$data['lname']:'',\n\t\t\t\t\t\t'title' => isset($data['title'])?$data['title']:'',\n\t\t\t\t\t\t'company' => isset($data['company'])?$data['company']:'',\n\t\t\t\t\t\t'address' => isset($data['address'])?$data['address']:'',\n\t\t\t\t\t\t'image' => ''\n\t\t\t\t\t\t);\n\n\t\t\t\t$grep = preg_grep('/^\\D+_\\d+/', array_keys($data));\n\t\t\t\tif(!empty($grep) && is_array($grep)){\n\t\t\t\t\tforeach ($grep as $key) {\n\t\t\t\t\t\tif (preg_match('/^(.*)_(\\d+)_(.*)$/', $key, $matches)) {\n\t\t\t\t\t\t\t$extras[$matches[1]][$matches[2] - 1][$matches[3]] = $data[$key];\n\t\t\t\t\t\t} else if (preg_match('/^(.*)_(\\d+)$/', $key, $matches)) {\n\t\t\t\t\t\t\t$extras[$matches[1]][$matches[2] - 1] = $data[$key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($extras as $key => $type) {\n\t\t\t\t\t\tforeach ($type as $value) {\n\t\t\t\t\t\t\tswitch ($key) {\n\t\t\t\t\t\t\t\tcase 'phone':\n\t\t\t\t\t\t\t\t\t$contact['numbers'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'number' => $value['number'],\n\t\t\t\t\t\t\t\t\t\t\t'type' => isset($value['type']) ? $value['type'] : 'other',\n\t\t\t\t\t\t\t\t\t\t\t'extension' => isset($value['extension']) ? $value['extension'] : '',\n\t\t\t\t\t\t\t\t\t\t\t'flags' => isset($value['flags']) ? explode(',', $value['flags']) : array(),\n\t\t\t\t\t\t\t\t\t\t\t'speeddial' => isset($value['speeddial']) ? $value['speeddial'] : '',\n\t\t\t\t\t\t\t\t\t\t\t'locale' => isset($value['locale']) ? $value['locale'] : '',\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'email':\n\t\t\t\t\t\t\t\t\t$contact['emails'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'email' => $value,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'website':\n\t\t\t\t\t\t\t\t\t$contact['websites'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'website' => $value,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn array(\"status\" => false, \"message\" => _(\"Unknown data type.\"));\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->addEntryByGroupID($group['id'], $contact);\n\n\t\t\t\t$ret = array(\n\t\t\t\t\t\t'status' => true,\n\t\t\t\t\t    );\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $ret;\n\t}\n\n\tpublic function bulkhandlerExport($type) {\n\t\t$data = NULL;\n\n\t\tswitch ($type) {\n\t\tcase 'contacts':\n\t\t\t$groups = $this->getGroups();\n\t\t\tforeach ($groups as $group) {\n\t\t\t\tif ($group['type'] === 'internal') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$entries = $this->getEntriesByGroupID($group['id']);\n\t\t\t\tforeach ($entries as $entry) {\n\t\t\t\t\t$entry['numbers'] = !empty($entry['numbers']) ? array_values($entry['numbers']) : array();\n\t\t\t\t\t$entry['emails'] = !empty($entry['emails']) ? array_values($entry['emails']) : array();\n\t\t\t\t\t$entry['websites'] = !empty($entry['websites']) ? array_values($entry['websites']) : array();\n\n\t\t\t\t\t$contact = array(\n\t\t\t\t\t\t\"groupname\" => $group['name'],\n\t\t\t\t\t\t\"grouptype\" => $group['type'],\n\t\t\t\t\t\t\"displayname\" => $entry['displayname'],\n\t\t\t\t\t\t\"fname\" => $entry['fname'],\n\t\t\t\t\t\t\"lname\" => $entry['lname'],\n\t\t\t\t\t\t\"title\" => $entry['title'],\n\t\t\t\t\t\t\"company\" => $entry['company'],\n\t\t\t\t\t\t\"address\" => $entry['address'],\n\t\t\t\t\t);\n\n\t\t\t\t\tforeach ($entry['numbers'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_type\"] = $value['type'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_number\"] = $value['number'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_extension\"] = $value['extension'];\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_flags\"] = implode(',', $value['flags']);\n\t\t\t\t\t\t$contact[\"phone_\" . $id . \"_speeddial\"] = $value['speeddial'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($entry['emails'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"email_\" . $id] = $value['email'];\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ($entry['websites'] as $key => $value) {\n\t\t\t\t\t\t$id = $key + 1;\n\t\t\t\t\t\t$contact[\"website_\" . $id] = $value['website'];\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[] = $contact;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\tpublic function getNamebyNumber($number, $group = array()){\n\t\t$result = $this->lookupNumberByUserID(-1, $number);\n\t\tif($result && !empty($group)){\n\t\t\tif(!in_array($result['groupid'], $group)){\n\t\t\t\t$result = array();\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getRegionList() {\n\t\treturn array(\n\t\t\t\"AUTO\" => _(\"Automatically Determine\"),\n\t\t\t\"\" => _(\"Unknown\"),\n\t\t\t\"AF\" => \"Afghanistan\",\n\t\t\t\"AL\" => \"Albania\",\n\t\t\t\"DZ\" => \"Algeria\",\n\t\t\t\"AS\" => \"American Samoa\",\n\t\t\t\"AD\" => \"Andorra\",\n\t\t\t\"AO\" => \"Angola\",\n\t\t\t\"AI\" => \"Anguilla\",\n\t\t\t\"AQ\" => \"Antarctica\",\n\t\t\t\"AG\" => \"Antigua and Barbuda\",\n\t\t\t\"AR\" => \"Argentina\",\n\t\t\t\"AM\" => \"Armenia\",\n\t\t\t\"AW\" => \"Aruba\",\n\t\t\t\"AU\" => \"Australia\",\n\t\t\t\"AT\" => \"Austria\",\n\t\t\t\"AZ\" => \"Azerbaijan\",\n\t\t\t\"BS\" => \"Bahamas\",\n\t\t\t\"BH\" => \"Bahrain\",\n\t\t\t\"BD\" => \"Bangladesh\",\n\t\t\t\"BB\" => \"Barbados\",\n\t\t\t\"BY\" => \"Belarus\",\n\t\t\t\"BE\" => \"Belgium\",\n\t\t\t\"BZ\" => \"Belize\",\n\t\t\t\"BJ\" => \"Benin\",\n\t\t\t\"BM\" => \"Bermuda\",\n\t\t\t\"BT\" => \"Bhutan\",\n\t\t\t\"BO\" => \"Bolivia\",\n\t\t\t\"BA\" => \"Bosnia and Herzegovina\",\n\t\t\t\"BW\" => \"Botswana\",\n\t\t\t\"BV\" => \"Bouvet Island\",\n\t\t\t\"BR\" => \"Brazil\",\n\t\t\t\"BQ\" => \"British Antarctic Territory\",\n\t\t\t\"IO\" => \"British Indian Ocean Territory\",\n\t\t\t\"VG\" => \"British Virgin Islands\",\n\t\t\t\"BN\" => \"Brunei\",\n\t\t\t\"BG\" => \"Bulgaria\",\n\t\t\t\"BF\" => \"Burkina Faso\",\n\t\t\t\"BI\" => \"Burundi\",\n\t\t\t\"KH\" => \"Cambodia\",\n\t\t\t\"CM\" => \"Cameroon\",\n\t\t\t\"CA\" => \"Canada\",\n\t\t\t\"CT\" => \"Canton and Enderbury Islands\",\n\t\t\t\"CV\" => \"Cape Verde\",\n\t\t\t\"KY\" => \"Cayman Islands\",\n\t\t\t\"CF\" => \"Central African Republic\",\n\t\t\t\"TD\" => \"Chad\",\n\t\t\t\"CL\" => \"Chile\",\n\t\t\t\"CN\" => \"China\",\n\t\t\t\"CX\" => \"Christmas Island\",\n\t\t\t\"CC\" => \"Cocos [Keeling] Islands\",\n\t\t\t\"CO\" => \"Colombia\",\n\t\t\t\"KM\" => \"Comoros\",\n\t\t\t\"CG\" => \"Congo - Brazzaville\",\n\t\t\t\"CD\" => \"Congo - Kinshasa\",\n\t\t\t\"CK\" => \"Cook Islands\",\n\t\t\t\"CR\" => \"Costa Rica\",\n\t\t\t\"HR\" => \"Croatia\",\n\t\t\t\"CU\" => \"Cuba\",\n\t\t\t\"CY\" => \"Cyprus\",\n\t\t\t\"CZ\" => \"Czech Republic\",\n\t\t\t\"CI\" => \"C\u00f4te d\u2019Ivoire\",\n\t\t\t\"DK\" => \"Denmark\",\n\t\t\t\"DJ\" => \"Djibouti\",\n\t\t\t\"DM\" => \"Dominica\",\n\t\t\t\"DO\" => \"Dominican Republic\",\n\t\t\t\"NQ\" => \"Dronning Maud Land\",\n\t\t\t\"DD\" => \"East Germany\",\n\t\t\t\"EC\" => \"Ecuador\",\n\t\t\t\"EG\" => \"Egypt\",\n\t\t\t\"SV\" => \"El Salvador\",\n\t\t\t\"GQ\" => \"Equatorial Guinea\",\n\t\t\t\"ER\" => \"Eritrea\",\n\t\t\t\"EE\" => \"Estonia\",\n\t\t\t\"ET\" => \"Ethiopia\",\n\t\t\t\"FK\" => \"Falkland Islands\",\n\t\t\t\"FO\" => \"Faroe Islands\",\n\t\t\t\"FJ\" => \"Fiji\",\n\t\t\t\"FI\" => \"Finland\",\n\t\t\t\"FR\" => \"France\",\n\t\t\t\"GF\" => \"French Guiana\",\n\t\t\t\"PF\" => \"French Polynesia\",\n\t\t\t\"TF\" => \"French Southern Territories\",\n\t\t\t\"FQ\" => \"French Southern and Antarctic Territories\",\n\t\t\t\"GA\" => \"Gabon\",\n\t\t\t\"GM\" => \"Gambia\",\n\t\t\t\"GE\" => \"Georgia\",\n\t\t\t\"DE\" => \"Germany\",\n\t\t\t\"GH\" => \"Ghana\",\n\t\t\t\"GI\" => \"Gibraltar\",\n\t\t\t\"GR\" => \"Greece\",\n\t\t\t\"GL\" => \"Greenland\",\n\t\t\t\"GD\" => \"Grenada\",\n\t\t\t\"GP\" => \"Guadeloupe\",\n\t\t\t\"GU\" => \"Guam\",\n\t\t\t\"GT\" => \"Guatemala\",\n\t\t\t\"GG\" => \"Guernsey\",\n\t\t\t\"GN\" => \"Guinea\",\n\t\t\t\"GW\" => \"Guinea-Bissau\",\n\t\t\t\"GY\" => \"Guyana\",\n\t\t\t\"HT\" => \"Haiti\",\n\t\t\t\"HM\" => \"Heard Island and McDonald Islands\",\n\t\t\t\"HN\" => \"Honduras\",\n\t\t\t\"HK\" => \"Hong Kong SAR China\",\n\t\t\t\"HU\" => \"Hungary\",\n\t\t\t\"IS\" => \"Iceland\",\n\t\t\t\"IN\" => \"India\",\n\t\t\t\"ID\" => \"Indonesia\",\n\t\t\t\"IR\" => \"Iran\",\n\t\t\t\"IQ\" => \"Iraq\",\n\t\t\t\"IE\" => \"Ireland\",\n\t\t\t\"IM\" => \"Isle of Man\",\n\t\t\t\"IL\" => \"Israel\",\n\t\t\t\"IT\" => \"Italy\",\n\t\t\t\"JM\" => \"Jamaica\",\n\t\t\t\"JP\" => \"Japan\",\n\t\t\t\"JE\" => \"Jersey\",\n\t\t\t\"JT\" => \"Johnston Island\",\n\t\t\t\"JO\" => \"Jordan\",\n\t\t\t\"KZ\" => \"Kazakhstan\",\n\t\t\t\"KE\" => \"Kenya\",\n\t\t\t\"KI\" => \"Kiribati\",\n\t\t\t\"KW\" => \"Kuwait\",\n\t\t\t\"KG\" => \"Kyrgyzstan\",\n\t\t\t\"LA\" => \"Laos\",\n\t\t\t\"LV\" => \"Latvia\",\n\t\t\t\"LB\" => \"Lebanon\",\n\t\t\t\"LS\" => \"Lesotho\",\n\t\t\t\"LR\" => \"Liberia\",\n\t\t\t\"LY\" => \"Libya\",\n\t\t\t\"LI\" => \"Liechtenstein\",\n\t\t\t\"LT\" => \"Lithuania\",\n\t\t\t\"LU\" => \"Luxembourg\",\n\t\t\t\"MO\" => \"Macau SAR China\",\n\t\t\t\"MK\" => \"Macedonia\",\n\t\t\t\"MG\" => \"Madagascar\",\n\t\t\t\"MW\" => \"Malawi\",\n\t\t\t\"MY\" => \"Malaysia\",\n\t\t\t\"MV\" => \"Maldives\",\n\t\t\t\"ML\" => \"Mali\",\n\t\t\t\"MT\" => \"Malta\",\n\t\t\t\"MH\" => \"Marshall Islands\",\n\t\t\t\"MQ\" => \"Martinique\",\n\t\t\t\"MR\" => \"Mauritania\",\n\t\t\t\"MU\" => \"Mauritius\",\n\t\t\t\"YT\" => \"Mayotte\",\n\t\t\t\"FX\" => \"Metropolitan France\",\n\t\t\t\"MX\" => \"Mexico\",\n\t\t\t\"FM\" => \"Micronesia\",\n\t\t\t\"MI\" => \"Midway Islands\",\n\t\t\t\"MD\" => \"Moldova\",\n\t\t\t\"MC\" => \"Monaco\",\n\t\t\t\"MN\" => \"Mongolia\",\n\t\t\t\"ME\" => \"Montenegro\",\n\t\t\t\"MS\" => \"Montserrat\",\n\t\t\t\"MA\" => \"Morocco\",\n\t\t\t\"MZ\" => \"Mozambique\",\n\t\t\t\"MM\" => \"Myanmar [Burma]\",\n\t\t\t\"NA\" => \"Namibia\",\n\t\t\t\"NR\" => \"Nauru\",\n\t\t\t\"NP\" => \"Nepal\",\n\t\t\t\"NL\" => \"Netherlands\",\n\t\t\t\"AN\" => \"Netherlands Antilles\",\n\t\t\t\"NT\" => \"Neutral Zone\",\n\t\t\t\"NC\" => \"New Caledonia\",\n\t\t\t\"NZ\" => \"New Zealand\",\n\t\t\t\"NI\" => \"Nicaragua\",\n\t\t\t\"NE\" => \"Niger\",\n\t\t\t\"NG\" => \"Nigeria\",\n\t\t\t\"NU\" => \"Niue\",\n\t\t\t\"NF\" => \"Norfolk Island\",\n\t\t\t\"KP\" => \"North Korea\",\n\t\t\t\"VD\" => \"North Vietnam\",\n\t\t\t\"MP\" => \"Northern Mariana Islands\",\n\t\t\t\"NO\" => \"Norway\",\n\t\t\t\"OM\" => \"Oman\",\n\t\t\t\"PC\" => \"Pacific Islands Trust Territory\",\n\t\t\t\"PK\" => \"Pakistan\",\n\t\t\t\"PW\" => \"Palau\",\n\t\t\t\"PS\" => \"Palestinian Territories\",\n\t\t\t\"PA\" => \"Panama\",\n\t\t\t\"PZ\" => \"Panama Canal Zone\",\n\t\t\t\"PG\" => \"Papua New Guinea\",\n\t\t\t\"PY\" => \"Paraguay\",\n\t\t\t\"YD\" => \"People's Democratic Republic of Yemen\",\n\t\t\t\"PE\" => \"Peru\",\n\t\t\t\"PH\" => \"Philippines\",\n\t\t\t\"PN\" => \"Pitcairn Islands\",\n\t\t\t\"PL\" => \"Poland\",\n\t\t\t\"PT\" => \"Portugal\",\n\t\t\t\"PR\" => \"Puerto Rico\",\n\t\t\t\"QA\" => \"Qatar\",\n\t\t\t\"RO\" => \"Romania\",\n\t\t\t\"RU\" => \"Russia\",\n\t\t\t\"RW\" => \"Rwanda\",\n\t\t\t\"RE\" => \"R\u00e9union\",\n\t\t\t\"BL\" => \"Saint Barth\u00e9lemy\",\n\t\t\t\"SH\" => \"Saint Helena\",\n\t\t\t\"KN\" => \"Saint Kitts and Nevis\",\n\t\t\t\"LC\" => \"Saint Lucia\",\n\t\t\t\"MF\" => \"Saint Martin\",\n\t\t\t\"PM\" => \"Saint Pierre and Miquelon\",\n\t\t\t\"VC\" => \"Saint Vincent and the Grenadines\",\n\t\t\t\"WS\" => \"Samoa\",\n\t\t\t\"SM\" => \"San Marino\",\n\t\t\t\"SA\" => \"Saudi Arabia\",\n\t\t\t\"SN\" => \"Senegal\",\n\t\t\t\"RS\" => \"Serbia\",\n\t\t\t\"CS\" => \"Serbia and Montenegro\",\n\t\t\t\"SC\" => \"Seychelles\",\n\t\t\t\"SL\" => \"Sierra Leone\",\n\t\t\t\"SG\" => \"Singapore\",\n\t\t\t\"SK\" => \"Slovakia\",\n\t\t\t\"SI\" => \"Slovenia\",\n\t\t\t\"SB\" => \"Solomon Islands\",\n\t\t\t\"SO\" => \"Somalia\",\n\t\t\t\"ZA\" => \"South Africa\",\n\t\t\t\"GS\" => \"South Georgia and the South Sandwich Islands\",\n\t\t\t\"KR\" => \"South Korea\",\n\t\t\t\"ES\" => \"Spain\",\n\t\t\t\"LK\" => \"Sri Lanka\",\n\t\t\t\"SD\" => \"Sudan\",\n\t\t\t\"SR\" => \"Suriname\",\n\t\t\t\"SJ\" => \"Svalbard and Jan Mayen\",\n\t\t\t\"SZ\" => \"Swaziland\",\n\t\t\t\"SE\" => \"Sweden\",\n\t\t\t\"CH\" => \"Switzerland\",\n\t\t\t\"SY\" => \"Syria\",\n\t\t\t\"ST\" => \"S\u00e3o Tom\u00e9 and Pr\u00edncipe\",\n\t\t\t\"TW\" => \"Taiwan\",\n\t\t\t\"TJ\" => \"Tajikistan\",\n\t\t\t\"TZ\" => \"Tanzania\",\n\t\t\t\"TH\" => \"Thailand\",\n\t\t\t\"TL\" => \"Timor-Leste\",\n\t\t\t\"TG\" => \"Togo\",\n\t\t\t\"TK\" => \"Tokelau\",\n\t\t\t\"TO\" => \"Tonga\",\n\t\t\t\"TT\" => \"Trinidad and Tobago\",\n\t\t\t\"TN\" => \"Tunisia\",\n\t\t\t\"TR\" => \"Turkey\",\n\t\t\t\"TM\" => \"Turkmenistan\",\n\t\t\t\"TC\" => \"Turks and Caicos Islands\",\n\t\t\t\"TV\" => \"Tuvalu\",\n\t\t\t\"UM\" => \"U.S. Minor Outlying Islands\",\n\t\t\t\"PU\" => \"U.S. Miscellaneous Pacific Islands\",\n\t\t\t\"VI\" => \"U.S. Virgin Islands\",\n\t\t\t\"UG\" => \"Uganda\",\n\t\t\t\"UA\" => \"Ukraine\",\n\t\t\t\"SU\" => \"Union of Soviet Socialist Republics\",\n\t\t\t\"AE\" => \"United Arab Emirates\",\n\t\t\t\"GB\" => \"United Kingdom\",\n\t\t\t\"US\" => \"United States\",\n\t\t\t\"ZZ\" => \"Unknown or Invalid Region\",\n\t\t\t\"UY\" => \"Uruguay\",\n\t\t\t\"UZ\" => \"Uzbekistan\",\n\t\t\t\"VU\" => \"Vanuatu\",\n\t\t\t\"VA\" => \"Vatican City\",\n\t\t\t\"VE\" => \"Venezuela\",\n\t\t\t\"VN\" => \"Vietnam\",\n\t\t\t\"WK\" => \"Wake Island\",\n\t\t\t\"WF\" => \"Wallis and Futuna\",\n\t\t\t\"EH\" => \"Western Sahara\",\n\t\t\t\"YE\" => \"Yemen\",\n\t\t\t\"ZM\" => \"Zambia\",\n\t\t\t\"ZW\" => \"Zimbabwe\",\n\t\t\t\"AX\" => \"\u00c5land Islands\",\n\t\t);\n\t}\n}\n"], "filenames": ["Contactmanager.class.php"], "buggy_code_start_loc": [978], "buggy_code_end_loc": [988], "fixing_code_start_loc": [978], "fixing_code_end_loc": [988], "type": "CWE-79", "message": "An issue was discovered in Contactmanager 13.x before 13.0.45.3, 14.x before 14.0.5.12, and 15.x before 15.0.8.21 for FreePBX 14.0.10.3. In the Contactmanager class (html\\admin\\modules\\contactmanager\\Contactmanager.class.php), an unsanitized group variable coming from the URL is reflected in HTML on 2 occasions, leading to XSS. It can be requested via a GET request to /admin/ajax.php?module=contactmanager.", "other": {"cve": {"id": "CVE-2019-16966", "sourceIdentifier": "cve@mitre.org", "published": "2019-10-21T19:15:11.030", "lastModified": "2019-12-10T17:08:12.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Contactmanager 13.x before 13.0.45.3, 14.x before 14.0.5.12, and 15.x before 15.0.8.21 for FreePBX 14.0.10.3. In the Contactmanager class (html\\admin\\modules\\contactmanager\\Contactmanager.class.php), an unsanitized group variable coming from the URL is reflected in HTML on 2 occasions, leading to XSS. It can be requested via a GET request to /admin/ajax.php?module=contactmanager."}, {"lang": "es", "value": "Se detect\u00f3 un problema en Contactmanager versiones 13.x anteriores a 13.0.45.3, versiones 14.x anteriores a 14.0.5.12 y versiones 15.x anteriores a 15.0.8.21 para FreePBX versi\u00f3n 14.0.10.3. En la clase Contactmanager (archivo html\\admin\\modules\\contactmanager\\Contactmanager.class.php), una variable group no saneada que proviene de la URL es reflejada en HTML en 2 ocasiones, conllevando a una vulnerabilidad de tipo XSS. Que puede ser solicitada mediante una petici\u00f3n GET en /admin/ajax.php?module=contactmanager."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:*:*:*:*:*:freepbx:*:*", "versionStartIncluding": "13.0.2", "versionEndExcluding": "13.0.45.3", "matchCriteriaId": "59979723-3B4E-45EA-BD04-E25E9A8BACEE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:*:*:*:*:*:freepbx:*:*", "versionStartIncluding": "14.0.1.1", "versionEndExcluding": "14.0.5.12", "matchCriteriaId": "B7EF4F25-9015-499C-8265-4119AA15CA44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:*:*:*:*:*:freepbx:*:*", "versionStartIncluding": "15.0.2", "versionEndExcluding": "15.0.8.21", "matchCriteriaId": "FE24C29C-53AE-4746-B742-15A5A7E8B57A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:13.0.0:beta1:*:*:*:freepbx:*:*", "matchCriteriaId": "458222C4-7AF6-4D74-98E3-CC0C308B6085"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:13.0.0:beta2:*:*:*:freepbx:*:*", "matchCriteriaId": "8968630F-6F4F-47FF-AD3E-6AC121597791"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:13.0.0:beta3:*:*:*:freepbx:*:*", "matchCriteriaId": "E087BBAD-8491-4E67-B6FF-3481D9746463"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:13.0.0:beta4:*:*:*:freepbx:*:*", "matchCriteriaId": "E82BD63A-259A-4F71-B5B6-DC8BA24412E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:13.0.0:beta5:*:*:*:freepbx:*:*", "matchCriteriaId": "B844666B-D752-4018-A795-42223B50E7CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:-:*:*:*:freepbx:*:*", "matchCriteriaId": "2FDA6DD1-E454-4B35-8B3A-F9897C709A24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:alpha1:*:*:*:freepbx:*:*", "matchCriteriaId": "29E6AFB9-B604-418F-9521-5827F1483D76"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:alpha2:*:*:*:freepbx:*:*", "matchCriteriaId": "8B0541CE-673E-4DE8-8319-61EA95756BFB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:beta1:*:*:*:freepbx:*:*", "matchCriteriaId": "697B337D-3DD3-484D-8AAF-11596EE5A05B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:beta2:*:*:*:freepbx:*:*", "matchCriteriaId": "18ABD7D8-B6E9-4877-883B-B8932FC9D5ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:freepbx:contactmanager:14.0.1:beta3:*:*:*:freepbx:*:*", "matchCriteriaId": "FA5D2378-F16E-485C-85EC-46F26A01A475"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sangoma:freepbx:14.0.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "CE03D797-BB0A-4820-922B-53B35B546259"}]}]}], "references": [{"url": "https://github.com/FreePBX/contactmanager/commit/99e5aa0050224289cfe64c9036f38ce2531bf633", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://issues.freepbx.org/browse/FREEPBX-20437", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://resp3ctblog.wordpress.com/2019/10/19/freepbx-xss-1/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/FreePBX/contactmanager/commit/99e5aa0050224289cfe64c9036f38ce2531bf633"}}