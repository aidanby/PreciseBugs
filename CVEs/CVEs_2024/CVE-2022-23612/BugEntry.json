{"buggy_code": ["/**\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n *\n * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n * graphic logo is a trademark of OpenMRS Inc.\n */\npackage org.openmrs.web.filter;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.velocity.VelocityContext;\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.runtime.RuntimeConstants;\nimport org.apache.velocity.runtime.log.CommonsLogLogChute;\nimport org.apache.velocity.tools.Scope;\nimport org.apache.velocity.tools.ToolContext;\nimport org.apache.velocity.tools.ToolManager;\nimport org.apache.velocity.tools.config.DefaultKey;\nimport org.apache.velocity.tools.config.FactoryConfiguration;\nimport org.apache.velocity.tools.config.ToolConfiguration;\nimport org.apache.velocity.tools.config.ToolboxConfiguration;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.openmrs.OpenmrsCharacterEscapes;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.util.*;\nimport org.openmrs.web.WebConstants;\nimport org.openmrs.web.filter.initialization.InitializationFilter;\nimport org.openmrs.web.filter.update.UpdateFilter;\nimport org.openmrs.web.filter.util.FilterUtil;\nimport org.openmrs.web.filter.util.LocalizationTool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Abstract class used when a small wizard is needed before Spring, jsp, etc has been started up.\n *\n * @see UpdateFilter\n * @see InitializationFilter\n */\npublic abstract class StartupFilter implements Filter {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(StartupFilter.class);\n\t\n\tprotected static VelocityEngine velocityEngine = null;\n\t\n\tpublic static final String AUTO_RUN_OPENMRS = \"auto_run_openmrs\";\n\t\n\t/**\n\t * Set by the {@link #init(FilterConfig)} method so that we have access to the current\n\t * {@link ServletContext}\n\t */\n\tprotected FilterConfig filterConfig = null;\n\t\n\t/**\n\t * Records errors that will be displayed to the user\n\t */\n\tprotected Map<String, Object[]> errors = new HashMap<>();\n\t\n\t/**\n\t * Messages that will be displayed to the user\n\t */\n\tprotected Map<String, Object[]> msgs = new HashMap<>();\n\t\n\t/**\n\t * Used for configuring tools within velocity toolbox\n\t */\n\tprivate ToolContext toolContext = null;\n\t\n\t/**\n\t * The web.xml file sets this {@link StartupFilter} to be the first filter for all requests.\n\t *\n\t * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse,\n\t *      javax.servlet.FilterChain)\n\t */\n\t@Override\n\tpublic final void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t        throws IOException, ServletException {\n\t\tif (skipFilter((HttpServletRequest) request)) {\n\t\t\tchain.doFilter(request, response);\n\t\t} else {\n\t\t\t\n\t\t\tHttpServletRequest httpRequest = (HttpServletRequest) request;\n\t\t\tHttpServletResponse httpResponse = (HttpServletResponse) response;\n\t\t\t\n\t\t\tString servletPath = httpRequest.getServletPath();\n\t\t\t// for all /images and /initfilter/scripts files, write the path\n\t\t\t// (the \"/initfilter\" part is needed so that the openmrs_static_context-servlet.xml file doesn't\n\t\t\t//  get instantiated early, before the locale messages are all set up)\n\t\t\tif (servletPath.startsWith(\"/images\") || servletPath.startsWith(\"/initfilter/scripts\")) {\n\t\t\t\tservletPath = servletPath.replaceFirst(\"/initfilter\", \"/WEB-INF/view\"); // strip out the /initfilter part\n\t\t\t\t// writes the actual image file path to the response\n\t\t\t\tFile file = new File(filterConfig.getServletContext().getRealPath(servletPath));\n\t\t\t\tif (httpRequest.getPathInfo() != null) {\n\t\t\t\t\tfile = new File(file, httpRequest.getPathInfo());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tInputStream imageFileInputStream = null;\n\t\t\t\ttry {\n\t\t\t\t\timageFileInputStream = new FileInputStream(file);\n\t\t\t\t\tOpenmrsUtil.copyFile(imageFileInputStream, httpResponse.getOutputStream());\n\t\t\t\t}\n\t\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\tlog.error(\"Unable to find file: \" + file.getAbsolutePath());\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tif (imageFileInputStream != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\timageFileInputStream.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException io) {\n\t\t\t\t\t\t\tlog.warn(\"Couldn't close imageFileInputStream: \" + io);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (servletPath.startsWith(\"/scripts\")) {\n\t\t\t\tlog.error(\n\t\t\t\t    \"Calling /scripts during the initializationfilter pages will cause the openmrs_static_context-servlet.xml to initialize too early and cause errors after startup.  Use '/initfilter\"\n\t\t\t\t            + servletPath + \"' instead.\");\n\t\t\t}\n\t\t\t// for anything but /initialsetup\n\t\t\telse if (!httpRequest.getServletPath().equals(\"/\" + WebConstants.SETUP_PAGE_URL)\n\t\t\t        && !httpRequest.getServletPath().equals(\"/\" + AUTO_RUN_OPENMRS)) {\n\t\t\t\t// send the user to the setup page\n\t\t\t\thttpResponse.sendRedirect(\"/\" + WebConstants.WEBAPP_NAME + \"/\" + WebConstants.SETUP_PAGE_URL);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tif (\"GET\".equals(httpRequest.getMethod())) {\n\t\t\t\t\tdoGet(httpRequest, httpResponse);\n\t\t\t\t} else if (\"POST\".equals(httpRequest.getMethod())) {\n\t\t\t\t\t// only clear errors before POSTS so that redirects can show errors too.\n\t\t\t\t\terrors.clear();\n\t\t\t\t\tmsgs.clear();\n\t\t\t\t\tdoPost(httpRequest, httpResponse);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Don't continue down the filter chain otherwise Spring complains\n\t\t\t// that it hasn't been set up yet.\n\t\t\t// The jsp and servlet filter are also on this chain, so writing to\n\t\t\t// the response directly here is the only option\n\t\t}\n\t}\n\t\n\t/**\n\t * Convenience method to set up the velocity context properly\n\t */\n\tprivate void initializeVelocity() {\n\t\tif (velocityEngine == null) {\n\t\t\tvelocityEngine = new VelocityEngine();\n\t\t\t\n\t\t\tProperties props = new Properties();\n\t\t\tprops.setProperty(RuntimeConstants.RUNTIME_LOG, \"startup_wizard_vel.log\");\n\t\t\t// Linux requires setting logging properties to initialize Velocity Context.\n\t\t\tprops.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,\n\t\t\t    \"org.apache.velocity.runtime.log.CommonsLogLogChute\");\n\t\t\tprops.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME, \"initial_wizard_velocity\");\n\t\t\t\n\t\t\t// so the vm pages can import the header/footer\n\t\t\tprops.setProperty(RuntimeConstants.RESOURCE_LOADER, \"class\");\n\t\t\tprops.setProperty(\"class.resource.loader.description\", \"Velocity Classpath Resource Loader\");\n\t\t\tprops.setProperty(\"class.resource.loader.class\",\n\t\t\t    \"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\");\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvelocityEngine.init(props);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlog.error(\"velocity init failed, because: \" + e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Called by {@link #doFilter(ServletRequest, ServletResponse, FilterChain)} on GET requests\n\t *\n\t * @param httpRequest\n\t * @param httpResponse\n\t */\n\tprotected abstract void doGet(HttpServletRequest httpRequest, HttpServletResponse httpResponse)\n\t        throws IOException, ServletException;\n\t\n\t/**\n\t * Called by {@link #doFilter(ServletRequest, ServletResponse, FilterChain)} on POST requests\n\t *\n\t * @param httpRequest\n\t * @param httpResponse\n\t */\n\tprotected abstract void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse)\n\t        throws IOException, ServletException;\n\t\n\t/**\n\t * All private attributes on this class are returned to the template via the velocity context and\n\t * reflection\n\t *\n\t * @param templateName the name of the velocity file to render. This name is prepended with\n\t *            {@link #getTemplatePrefix()}\n\t * @param referenceMap\n\t * @param httpResponse\n\t */\n\tprotected void renderTemplate(String templateName, Map<String, Object> referenceMap, HttpServletResponse httpResponse)\n\t        throws IOException {\n\t\t// first we should get velocity tools context for current client request (within\n\t\t// his http session) and merge that tools context with basic velocity context\n\t\tif (referenceMap == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tObject locale = referenceMap.get(FilterUtil.LOCALE_ATTRIBUTE);\n\t\tToolContext velocityToolContext = getToolContext(\n\t\t    locale != null ? locale.toString() : Context.getLocale().toString());\n\t\tVelocityContext velocityContext = new VelocityContext(velocityToolContext);\n\t\t\n\t\tfor (Map.Entry<String, Object> entry : referenceMap.entrySet()) {\n\t\t\tvelocityContext.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tObject model = getUpdateFilterModel();\n\t\t\n\t\t// put each of the private varibles into the template for convenience\n\t\tfor (Field field : model.getClass().getDeclaredFields()) {\n\t\t\ttry {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\tvelocityContext.put(field.getName(), field.get(model));\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\tlog.error(\"Error generated while getting field value: \" + field.getName(), e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tString fullTemplatePath = getTemplatePrefix() + templateName;\n\t\tInputStream templateInputStream = getClass().getClassLoader().getResourceAsStream(fullTemplatePath);\n\t\tif (templateInputStream == null) {\n\t\t\tthrow new IOException(\"Unable to find \" + fullTemplatePath);\n\t\t}\n\t\t\n\t\tvelocityContext.put(\"errors\", errors);\n\t\tvelocityContext.put(\"msgs\", msgs);\n\t\t\n\t\t// explicitly set the content type for the response because some servlet containers are assuming text/plain\n\t\thttpResponse.setContentType(\"text/html\");\n\t\t\n\t\ttry {\n\t\t\tvelocityEngine.evaluate(velocityContext, httpResponse.getWriter(), this.getClass().getName(),\n\t\t\t    new InputStreamReader(templateInputStream, StandardCharsets.UTF_8));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new APIException(\"Unable to process template: \" + fullTemplatePath, e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n\t */\n\t@Override\n\tpublic void init(FilterConfig filterConfig) throws ServletException {\n\t\tthis.filterConfig = filterConfig;\n\t\tinitializeVelocity();\n\t}\n\t\n\t/**\n\t * @see javax.servlet.Filter#destroy()\n\t */\n\t@Override\n\tpublic void destroy() {\n\t}\n\t\n\t/**\n\t * This string is prepended to all templateNames passed to\n\t * {@link #renderTemplate(String, Map, HttpServletResponse)}\n\t *\n\t * @return string to prepend as the path for the templates\n\t */\n\tprotected String getTemplatePrefix() {\n\t\treturn \"org/openmrs/web/filter/\";\n\t}\n\t\n\t/**\n\t * The model that is used as the backer for all pages in this startup wizard. Should never return\n\t * null.\n\t *\n\t * @return the stored formbacking/model object\n\t */\n\tprotected abstract Object getUpdateFilterModel();\n\t\n\t/**\n\t * If this returns true, this filter fails early and quickly. All logic is skipped and startup and\n\t * usage continue normally.\n\t *\n\t * @return true if this filter can be skipped\n\t */\n\tpublic abstract boolean skipFilter(HttpServletRequest request);\n\n\t/**\n\t * Convenience method to read the last 5 log lines from the MemoryAppender\n\t * \n\t * The log lines will be added to the \"logLines\" key\n\t * \n\t * @param result A map to be returned as a JSON document\n\t */\n\tprotected void addLogLinesToResponse(Map<String, Object> result) {\n\t\tMemoryAppender appender = OpenmrsUtil.getMemoryAppender();\n\t\tif (appender != null) {\n\t\t\tList<String> logLines = appender.getLogLines();\n\t\t\t\n\t\t\t// truncate the list to the last five so we don't overwhelm jquery\n\t\t\tif (logLines.size() > 5) {\n\t\t\t\tlogLines = logLines.subList(logLines.size() - 5, logLines.size());\n\t\t\t}\n\t\t\t\n\t\t\tresult.put(\"logLines\", logLines);\n\t\t} else {\n\t\t\tresult.put(\"logLines\", Collections.emptyList());\n\t\t}\n\t}\n\t\n\t/**\n\t * Convenience method to convert the given object to a JSON string. Supports Maps, Lists, Strings,\n\t * Boolean, Double\n\t *\n\t * @param object object to convert to json\n\t * @return JSON string to be eval'd in javascript\n\t */\n\tprotected String toJSONString(Object object) {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tmapper.getJsonFactory().setCharacterEscapes(new OpenmrsCharacterEscapes());\n\t\ttry {\n\t\t\treturn mapper.writeValueAsString(object);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlog.error(\"Failed to convert object to JSON\");\n\t\t\tthrow new APIException(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets tool context for specified locale parameter. If context does not exists, it creates new\n\t * context, configured for that locale. Otherwise, it changes locale property of\n\t * {@link LocalizationTool} object, that is being contained in tools context\n\t *\n\t * @param locale the string with locale parameter for configuring tools context\n\t * @return the tool context object\n\t */\n\tpublic ToolContext getToolContext(String locale) {\n\t\tLocale systemLocale = LocaleUtility.fromSpecification(locale);\n\t\t//Defaults to en if systemLocale is null or invalid e.g en_GBs\n\t\tif (systemLocale == null || !ArrayUtils.contains(Locale.getAvailableLocales(), systemLocale)) {\n\t\t\tsystemLocale = Locale.ENGLISH;\n\t\t}\n\t\t// If tool context has not been configured yet\n\t\tif (toolContext == null) {\n\t\t\t// first we are creating manager for tools, factory for configuring tools \n\t\t\t// and empty configuration object for velocity tool box\n\t\t\tToolManager velocityToolManager = new ToolManager();\n\t\t\tFactoryConfiguration factoryConfig = new FactoryConfiguration();\n\t\t\t// since we are using one tool box for all request within wizard\n\t\t\t// we should propagate toolbox's scope on all application \n\t\t\tToolboxConfiguration toolbox = new ToolboxConfiguration();\n\t\t\ttoolbox.setScope(Scope.APPLICATION);\n\t\t\t// next we are directly configuring custom localization tool by\n\t\t\t// setting its class name, locale property etc.\n\t\t\tToolConfiguration localizationTool = new ToolConfiguration();\n\t\t\tlocalizationTool.setClassname(LocalizationTool.class.getName());\n\t\t\tlocalizationTool.setProperty(ToolContext.LOCALE_KEY, systemLocale);\n\t\t\tlocalizationTool.setProperty(LocalizationTool.BUNDLES_KEY, \"messages\");\n\t\t\t// and finally we are adding just configured tool into toolbox\n\t\t\t// and creating tool context for this toolbox\n\t\t\ttoolbox.addTool(localizationTool);\n\t\t\tfactoryConfig.addToolbox(toolbox);\n\t\t\tvelocityToolManager.configure(factoryConfig);\n\t\t\ttoolContext = velocityToolManager.createContext();\n\t\t\ttoolContext.setUserCanOverwriteTools(true);\n\t\t} else {\n\t\t\t// if it already has been configured, we just pull out our custom localization tool \n\t\t\t// from tool context, then changing its locale property and putting this tool back to the context\n\t\t\t// First, we need to obtain the value of default key annotation of our localization tool\n\t\t\t// class using reflection\n\t\t\tAnnotation annotation = LocalizationTool.class.getAnnotation(DefaultKey.class);\n\t\t\tDefaultKey defaultKeyAnnotation = (DefaultKey) annotation;\n\t\t\tString key = defaultKeyAnnotation.value();\n\t\t\t//\n\t\t\tLocalizationTool localizationTool = (LocalizationTool) toolContext.get(key);\n\t\t\tlocalizationTool.setLocale(systemLocale);\n\t\t\ttoolContext.put(key, localizationTool);\n\t\t}\n\t\treturn toolContext;\n\t}\n}\n"], "fixing_code": ["/**\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n *\n * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n * graphic logo is a trademark of OpenMRS Inc.\n */\npackage org.openmrs.web.filter;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.velocity.VelocityContext;\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.runtime.RuntimeConstants;\nimport org.apache.velocity.runtime.log.CommonsLogLogChute;\nimport org.apache.velocity.tools.Scope;\nimport org.apache.velocity.tools.ToolContext;\nimport org.apache.velocity.tools.ToolManager;\nimport org.apache.velocity.tools.config.DefaultKey;\nimport org.apache.velocity.tools.config.FactoryConfiguration;\nimport org.apache.velocity.tools.config.ToolConfiguration;\nimport org.apache.velocity.tools.config.ToolboxConfiguration;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.openmrs.OpenmrsCharacterEscapes;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.util.*;\nimport org.openmrs.web.WebConstants;\nimport org.openmrs.web.filter.initialization.InitializationFilter;\nimport org.openmrs.web.filter.update.UpdateFilter;\nimport org.openmrs.web.filter.util.FilterUtil;\nimport org.openmrs.web.filter.util.LocalizationTool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Abstract class used when a small wizard is needed before Spring, jsp, etc has been started up.\n *\n * @see UpdateFilter\n * @see InitializationFilter\n */\npublic abstract class StartupFilter implements Filter {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(StartupFilter.class);\n\t\n\tprotected static VelocityEngine velocityEngine = null;\n\t\n\tpublic static final String AUTO_RUN_OPENMRS = \"auto_run_openmrs\";\n\t\n\t/**\n\t * Set by the {@link #init(FilterConfig)} method so that we have access to the current\n\t * {@link ServletContext}\n\t */\n\tprotected FilterConfig filterConfig = null;\n\t\n\t/**\n\t * Records errors that will be displayed to the user\n\t */\n\tprotected Map<String, Object[]> errors = new HashMap<>();\n\t\n\t/**\n\t * Messages that will be displayed to the user\n\t */\n\tprotected Map<String, Object[]> msgs = new HashMap<>();\n\t\n\t/**\n\t * Used for configuring tools within velocity toolbox\n\t */\n\tprivate ToolContext toolContext = null;\n\t\n\t/**\n\t * The web.xml file sets this {@link StartupFilter} to be the first filter for all requests.\n\t *\n\t * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse,\n\t *      javax.servlet.FilterChain)\n\t */\n\t@Override\n\tpublic final void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t        throws IOException, ServletException {\n\t\tif (skipFilter((HttpServletRequest) request)) {\n\t\t\tchain.doFilter(request, response);\n\t\t} else {\n\t\t\t\n\t\t\tHttpServletRequest httpRequest = (HttpServletRequest) request;\n\t\t\tHttpServletResponse httpResponse = (HttpServletResponse) response;\n\t\t\t\n\t\t\tString servletPath = httpRequest.getServletPath();\n\t\t\t// for all /images and /initfilter/scripts files, write the path\n\t\t\t// (the \"/initfilter\" part is needed so that the openmrs_static_context-servlet.xml file doesn't\n\t\t\t//  get instantiated early, before the locale messages are all set up)\n\t\t\tif (servletPath.startsWith(\"/images\") || servletPath.startsWith(\"/initfilter/scripts\")) {\n\t\t\t\t// strip out the /initfilter part\n\t\t\t\tservletPath = servletPath.replaceFirst(\"/initfilter\", \"/WEB-INF/view\");\n\t\t\t\t// writes the actual image file path to the response\n\t\t\t\tPath filePath = Paths.get(filterConfig.getServletContext().getRealPath(servletPath)).normalize();\n\t\t\t\tPath fullFilePath = filePath;\n\t\t\t\tif (httpRequest.getPathInfo() != null) {\n\t\t\t\t\tfullFilePath = fullFilePath.resolve(httpRequest.getPathInfo());\n\t\t\t\t\tif (!(fullFilePath.normalize().startsWith(filePath))) {\n\t\t\t\t\t\tlog.warn(\"Detected attempted directory traversal in request for {}\", httpRequest.getPathInfo());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttry (InputStream imageFileInputStream = new FileInputStream(fullFilePath.normalize().toFile())) {\n\t\t\t\t\tOpenmrsUtil.copyFile(imageFileInputStream, httpResponse.getOutputStream());\n\t\t\t\t}\n\t\t\t\tcatch (FileNotFoundException e) {\n\t\t\t\t\tlog.error(\"Unable to find file: {}\", filePath, e);\n\t\t\t\t}\n\t\t\t\tcatch (IOException e) {\n\t\t\t\t\tlog.warn(\"An error occurred while handling file {}\", filePath, e);\n\t\t\t\t}\n\t\t\t} else if (servletPath.startsWith(\"/scripts\")) {\n\t\t\t\tlog.error(\n\t\t\t\t    \"Calling /scripts during the initializationfilter pages will cause the openmrs_static_context-servlet.xml to initialize too early and cause errors after startup.  Use '/initfilter\"\n\t\t\t\t            + servletPath + \"' instead.\");\n\t\t\t}\n\t\t\t// for anything but /initialsetup\n\t\t\telse if (!httpRequest.getServletPath().equals(\"/\" + WebConstants.SETUP_PAGE_URL)\n\t\t\t        && !httpRequest.getServletPath().equals(\"/\" + AUTO_RUN_OPENMRS)) {\n\t\t\t\t// send the user to the setup page\n\t\t\t\thttpResponse.sendRedirect(\"/\" + WebConstants.WEBAPP_NAME + \"/\" + WebConstants.SETUP_PAGE_URL);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tif (\"GET\".equals(httpRequest.getMethod())) {\n\t\t\t\t\tdoGet(httpRequest, httpResponse);\n\t\t\t\t} else if (\"POST\".equals(httpRequest.getMethod())) {\n\t\t\t\t\t// only clear errors before POSTS so that redirects can show errors too.\n\t\t\t\t\terrors.clear();\n\t\t\t\t\tmsgs.clear();\n\t\t\t\t\tdoPost(httpRequest, httpResponse);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Don't continue down the filter chain otherwise Spring complains\n\t\t\t// that it hasn't been set up yet.\n\t\t\t// The jsp and servlet filter are also on this chain, so writing to\n\t\t\t// the response directly here is the only option\n\t\t}\n\t}\n\t\n\t/**\n\t * Convenience method to set up the velocity context properly\n\t */\n\tprivate void initializeVelocity() {\n\t\tif (velocityEngine == null) {\n\t\t\tvelocityEngine = new VelocityEngine();\n\t\t\t\n\t\t\tProperties props = new Properties();\n\t\t\tprops.setProperty(RuntimeConstants.RUNTIME_LOG, \"startup_wizard_vel.log\");\n\t\t\t// Linux requires setting logging properties to initialize Velocity Context.\n\t\t\tprops.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,\n\t\t\t    \"org.apache.velocity.runtime.log.CommonsLogLogChute\");\n\t\t\tprops.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME, \"initial_wizard_velocity\");\n\t\t\t\n\t\t\t// so the vm pages can import the header/footer\n\t\t\tprops.setProperty(RuntimeConstants.RESOURCE_LOADER, \"class\");\n\t\t\tprops.setProperty(\"class.resource.loader.description\", \"Velocity Classpath Resource Loader\");\n\t\t\tprops.setProperty(\"class.resource.loader.class\",\n\t\t\t    \"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\");\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvelocityEngine.init(props);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tlog.error(\"velocity init failed, because: {}\", e, e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Called by {@link #doFilter(ServletRequest, ServletResponse, FilterChain)} on GET requests\n\t *\n\t * @param httpRequest\n\t * @param httpResponse\n\t */\n\tprotected abstract void doGet(HttpServletRequest httpRequest, HttpServletResponse httpResponse)\n\t        throws IOException, ServletException;\n\t\n\t/**\n\t * Called by {@link #doFilter(ServletRequest, ServletResponse, FilterChain)} on POST requests\n\t *\n\t * @param httpRequest\n\t * @param httpResponse\n\t */\n\tprotected abstract void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse)\n\t        throws IOException, ServletException;\n\t\n\t/**\n\t * All private attributes on this class are returned to the template via the velocity context and\n\t * reflection\n\t *\n\t * @param templateName the name of the velocity file to render. This name is prepended with\n\t *            {@link #getTemplatePrefix()}\n\t * @param referenceMap\n\t * @param httpResponse\n\t */\n\tprotected void renderTemplate(String templateName, Map<String, Object> referenceMap, HttpServletResponse httpResponse)\n\t        throws IOException {\n\t\t// first we should get velocity tools context for current client request (within\n\t\t// his http session) and merge that tools context with basic velocity context\n\t\tif (referenceMap == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tObject locale = referenceMap.get(FilterUtil.LOCALE_ATTRIBUTE);\n\t\tToolContext velocityToolContext = getToolContext(\n\t\t    locale != null ? locale.toString() : Context.getLocale().toString());\n\t\tVelocityContext velocityContext = new VelocityContext(velocityToolContext);\n\t\t\n\t\tfor (Map.Entry<String, Object> entry : referenceMap.entrySet()) {\n\t\t\tvelocityContext.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tObject model = getUpdateFilterModel();\n\t\t\n\t\t// put each of the private varibles into the template for convenience\n\t\tfor (Field field : model.getClass().getDeclaredFields()) {\n\t\t\ttry {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\tvelocityContext.put(field.getName(), field.get(model));\n\t\t\t}\n\t\t\tcatch (IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\tlog.error(\"Error generated while getting field value: \" + field.getName(), e);\n\t\t\t}\n\t\t}\n\t\t\n\t\tString fullTemplatePath = getTemplatePrefix() + templateName;\n\t\tInputStream templateInputStream = getClass().getClassLoader().getResourceAsStream(fullTemplatePath);\n\t\tif (templateInputStream == null) {\n\t\t\tthrow new IOException(\"Unable to find \" + fullTemplatePath);\n\t\t}\n\t\t\n\t\tvelocityContext.put(\"errors\", errors);\n\t\tvelocityContext.put(\"msgs\", msgs);\n\t\t\n\t\t// explicitly set the content type for the response because some servlet containers are assuming text/plain\n\t\thttpResponse.setContentType(\"text/html\");\n\t\t\n\t\ttry {\n\t\t\tvelocityEngine.evaluate(velocityContext, httpResponse.getWriter(), this.getClass().getName(),\n\t\t\t    new InputStreamReader(templateInputStream, StandardCharsets.UTF_8));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new APIException(\"Unable to process template: \" + fullTemplatePath, e);\n\t\t}\n\t}\n\t\n\t/**\n\t * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)\n\t */\n\t@Override\n\tpublic void init(FilterConfig filterConfig) throws ServletException {\n\t\tthis.filterConfig = filterConfig;\n\t\tinitializeVelocity();\n\t}\n\t\n\t/**\n\t * @see javax.servlet.Filter#destroy()\n\t */\n\t@Override\n\tpublic void destroy() {\n\t}\n\t\n\t/**\n\t * This string is prepended to all templateNames passed to\n\t * {@link #renderTemplate(String, Map, HttpServletResponse)}\n\t *\n\t * @return string to prepend as the path for the templates\n\t */\n\tprotected String getTemplatePrefix() {\n\t\treturn \"org/openmrs/web/filter/\";\n\t}\n\t\n\t/**\n\t * The model that is used as the backer for all pages in this startup wizard. Should never return\n\t * null.\n\t *\n\t * @return the stored formbacking/model object\n\t */\n\tprotected abstract Object getUpdateFilterModel();\n\t\n\t/**\n\t * If this returns true, this filter fails early and quickly. All logic is skipped and startup and\n\t * usage continue normally.\n\t *\n\t * @return true if this filter can be skipped\n\t */\n\tpublic abstract boolean skipFilter(HttpServletRequest request);\n\n\t/**\n\t * Convenience method to read the last 5 log lines from the MemoryAppender\n\t * \n\t * The log lines will be added to the \"logLines\" key\n\t * \n\t * @param result A map to be returned as a JSON document\n\t */\n\tprotected void addLogLinesToResponse(Map<String, Object> result) {\n\t\tMemoryAppender appender = OpenmrsUtil.getMemoryAppender();\n\t\tif (appender != null) {\n\t\t\tList<String> logLines = appender.getLogLines();\n\t\t\t\n\t\t\t// truncate the list to the last five so we don't overwhelm jquery\n\t\t\tif (logLines.size() > 5) {\n\t\t\t\tlogLines = logLines.subList(logLines.size() - 5, logLines.size());\n\t\t\t}\n\t\t\t\n\t\t\tresult.put(\"logLines\", logLines);\n\t\t} else {\n\t\t\tresult.put(\"logLines\", Collections.emptyList());\n\t\t}\n\t}\n\t\n\t/**\n\t * Convenience method to convert the given object to a JSON string. Supports Maps, Lists, Strings,\n\t * Boolean, Double\n\t *\n\t * @param object object to convert to json\n\t * @return JSON string to be eval'd in javascript\n\t */\n\tprotected String toJSONString(Object object) {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tmapper.getJsonFactory().setCharacterEscapes(new OpenmrsCharacterEscapes());\n\t\ttry {\n\t\t\treturn mapper.writeValueAsString(object);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tlog.error(\"Failed to convert object to JSON\");\n\t\t\tthrow new APIException(e);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets tool context for specified locale parameter. If context does not exists, it creates new\n\t * context, configured for that locale. Otherwise, it changes locale property of\n\t * {@link LocalizationTool} object, that is being contained in tools context\n\t *\n\t * @param locale the string with locale parameter for configuring tools context\n\t * @return the tool context object\n\t */\n\tpublic ToolContext getToolContext(String locale) {\n\t\tLocale systemLocale = LocaleUtility.fromSpecification(locale);\n\t\t//Defaults to en if systemLocale is null or invalid e.g en_GBs\n\t\tif (systemLocale == null || !ArrayUtils.contains(Locale.getAvailableLocales(), systemLocale)) {\n\t\t\tsystemLocale = Locale.ENGLISH;\n\t\t}\n\t\t// If tool context has not been configured yet\n\t\tif (toolContext == null) {\n\t\t\t// first we are creating manager for tools, factory for configuring tools \n\t\t\t// and empty configuration object for velocity tool box\n\t\t\tToolManager velocityToolManager = new ToolManager();\n\t\t\tFactoryConfiguration factoryConfig = new FactoryConfiguration();\n\t\t\t// since we are using one tool box for all request within wizard\n\t\t\t// we should propagate toolbox's scope on all application \n\t\t\tToolboxConfiguration toolbox = new ToolboxConfiguration();\n\t\t\ttoolbox.setScope(Scope.APPLICATION);\n\t\t\t// next we are directly configuring custom localization tool by\n\t\t\t// setting its class name, locale property etc.\n\t\t\tToolConfiguration localizationTool = new ToolConfiguration();\n\t\t\tlocalizationTool.setClassname(LocalizationTool.class.getName());\n\t\t\tlocalizationTool.setProperty(ToolContext.LOCALE_KEY, systemLocale);\n\t\t\tlocalizationTool.setProperty(LocalizationTool.BUNDLES_KEY, \"messages\");\n\t\t\t// and finally we are adding just configured tool into toolbox\n\t\t\t// and creating tool context for this toolbox\n\t\t\ttoolbox.addTool(localizationTool);\n\t\t\tfactoryConfig.addToolbox(toolbox);\n\t\t\tvelocityToolManager.configure(factoryConfig);\n\t\t\ttoolContext = velocityToolManager.createContext();\n\t\t\ttoolContext.setUserCanOverwriteTools(true);\n\t\t} else {\n\t\t\t// if it already has been configured, we just pull out our custom localization tool \n\t\t\t// from tool context, then changing its locale property and putting this tool back to the context\n\t\t\t// First, we need to obtain the value of default key annotation of our localization tool\n\t\t\t// class using reflection\n\t\t\tAnnotation annotation = LocalizationTool.class.getAnnotation(DefaultKey.class);\n\t\t\tDefaultKey defaultKeyAnnotation = (DefaultKey) annotation;\n\t\t\tString key = defaultKeyAnnotation.value();\n\t\t\t//\n\t\t\tLocalizationTool localizationTool = (LocalizationTool) toolContext.get(key);\n\t\t\tlocalizationTool.setLocale(systemLocale);\n\t\t\ttoolContext.put(key, localizationTool);\n\t\t}\n\t\treturn toolContext;\n\t}\n}\n"], "filenames": ["web/src/main/java/org/openmrs/web/filter/StartupFilter.java"], "buggy_code_start_loc": [20], "buggy_code_end_loc": [197], "fixing_code_start_loc": [21], "fixing_code_end_loc": [196], "type": "CWE-22", "message": "OpenMRS is a patient-based medical record system focusing on giving providers a free customizable electronic medical record system. Affected versions are subject to arbitrary file exfiltration due to failure to sanitize request when satisfying GET requests for `/images` & `/initfilter/scripts`. This can allow an attacker to access any file on a system running OpenMRS that is accessible to the user id OpenMRS is running under. Affected implementations should update to the latest patch version of OpenMRS Core for the minor version they use. These are: 2.1.5, 2.2.1, 2.3.5, 2.4.5 and 2.5.3. As a general rule, this vulnerability is already mitigated by Tomcat's URL normalization in Tomcat 7.0.28+. Users on older versions of Tomcat should consider upgrading their Tomcat instance as well as their OpenMRS instance.", "other": {"cve": {"id": "CVE-2022-23612", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-22T23:15:11.400", "lastModified": "2022-03-02T14:17:24.563", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMRS is a patient-based medical record system focusing on giving providers a free customizable electronic medical record system. Affected versions are subject to arbitrary file exfiltration due to failure to sanitize request when satisfying GET requests for `/images` & `/initfilter/scripts`. This can allow an attacker to access any file on a system running OpenMRS that is accessible to the user id OpenMRS is running under. Affected implementations should update to the latest patch version of OpenMRS Core for the minor version they use. These are: 2.1.5, 2.2.1, 2.3.5, 2.4.5 and 2.5.3. As a general rule, this vulnerability is already mitigated by Tomcat's URL normalization in Tomcat 7.0.28+. Users on older versions of Tomcat should consider upgrading their Tomcat instance as well as their OpenMRS instance."}, {"lang": "es", "value": "OpenMRS es un sistema de registro m\u00e9dico basado en el paciente que se centra en ofrecer a los proveedores un sistema de registro m\u00e9dico electr\u00f3nico gratuito y personalizable. Las versiones afectadas est\u00e1n sujetas a la exfiltraci\u00f3n arbitraria de archivos debido a un fallo en el saneo de la petici\u00f3n cuando son satisfechas peticiones GET para \"/images\" &amp; \"/initfilter/scripts\". Esto puede permitir a un atacante acceder a cualquier archivo en un sistema que ejecute OpenMRS que sea accesible para el ID de usuario con el que es ejecutado OpenMRS. Las implementaciones afectadas deben actualizar a la \u00faltima versi\u00f3n del parche de OpenMRS Core para la versi\u00f3n menor que usan. Estas son: 2.1.5, 2.2.1, 2.3.5, 2.4.5 y 2.5.3. Como regla general, esta vulnerabilidad ya est\u00e1 mitigada por la normalizaci\u00f3n de URL de Tomcat en Tomcat versi\u00f3n 7.0.28+. Los usuarios de versiones anteriores de Tomcat deber\u00edan considerar la posibilidad de actualizar su instancia de Tomcat, as\u00ed como su instancia de OpenMRS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:openmrs:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.6", "versionEndExcluding": "2.1.5", "matchCriteriaId": "CC9D911E-1D03-4348-A3E8-42EF336C3CB1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:openmrs:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.1", "matchCriteriaId": "AB9FD95F-109C-46B6-9997-1467E85C2EA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:openmrs:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.5", "matchCriteriaId": "3CDFE507-8377-4B9E-A91E-4EAEB3893CAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:openmrs:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.5", "matchCriteriaId": "DE611740-A309-4E76-BFE2-A18978D9C50A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:openmrs:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.5.0", "versionEndExcluding": "2.5.3", "matchCriteriaId": "E69117E5-4694-44D3-8DC4-AE189857C002"}]}]}], "references": [{"url": "https://github.com/openmrs/openmrs-core/blob/ee3373a7a775bfdfa263e2e912c72e64342fb4f0/web/src/main/java/org/openmrs/web/filter/StartupFilter.java#L123", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-core/commit/db8454bf19a092a78d53ee4dba2af628b730a6e7#diff-7c64d9f61d4d4e2ddba92920d7cf63ec96091b308d43904956b3846bc0c26d80R128", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-core/security/advisories/GHSA-8rgr-ww69-jv65", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://lgtm.com/projects/g/openmrs/openmrs-core/snapshot/fb1335c925ca4c94be5a546707b90d2c1efa4dcc/files/web/src/main/java/org/openmrs/web/filter/StartupFilter.java#L123", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openmrs/openmrs-core/commit/db8454bf19a092a78d53ee4dba2af628b730a6e7#diff-7c64d9f61d4d4e2ddba92920d7cf63ec96091b308d43904956b3846bc0c26d80R128"}}