{"buggy_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nStatus RaggedGatherShapeFn(InferenceContext* c);\n\n//==============================================================================\n// Registered Ops\n//==============================================================================\n\nREGISTER_OP(\"RaggedGather\")\n    .Input(\"params_nested_splits: PARAMS_RAGGED_RANK * Tsplits\")\n    .Input(\"params_dense_values: Tvalues\")\n    .Input(\"indices: Tindices\")\n    .Output(\"output_nested_splits: OUTPUT_RAGGED_RANK * Tsplits\")\n    .Output(\"output_dense_values: Tvalues\")\n    .Attr(\"Tvalues: type\")\n    .Attr(\"Tindices: {int32, int64}\")\n    .Attr(\"Tsplits: {int32, int64} = DT_INT64\")\n    .Attr(\"PARAMS_RAGGED_RANK: int >= 1\")\n    .Attr(\"OUTPUT_RAGGED_RANK: int >= 0\")\n    .SetShapeFn(RaggedGatherShapeFn);\n\nREGISTER_OP(\"RaggedCross\")\n    .Input(\"ragged_values: ragged_values_types\")\n    .Input(\"ragged_row_splits: ragged_splits_types\")\n    .Input(\"sparse_indices: Nsparse * int64\")\n    .Input(\"sparse_values: sparse_values_types\")\n    .Input(\"sparse_shape: Nsparse * int64\")\n    .Input(\"dense_inputs: dense_types\")\n    .Output(\"output_values: out_values_type\")\n    .Output(\"output_row_splits: out_row_splits_type\")\n    .Attr(\"Nsparse: int >= 0\")\n    .Attr(\"input_order: string\")\n    .Attr(\"hashed_output: bool\")\n    .Attr(\"num_buckets: int >= 0\")\n    .Attr(\"hash_key: int\")\n    .Attr(\"ragged_values_types: list({int64, string}) >= 0\")\n    .Attr(\"ragged_splits_types: list({int32, int64}) >= 0\")\n    .Attr(\"sparse_values_types: list({int64, string}) >= 0\")\n    .Attr(\"dense_types: list({int64, string}) >= 0\")\n    .Attr(\"out_values_type: {int64, string}\")\n    .Attr(\"out_row_splits_type: {int32, int64}\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      std::vector<DataType> ragged_values_types;\n      std::vector<DataType> ragged_splits_types;\n      std::vector<DataType> dense_types;\n\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_values_types\", &ragged_values_types));\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_splits_types\", &ragged_splits_types));\n      TF_RETURN_IF_ERROR(c->GetAttr(\"dense_types\", &dense_types));\n\n      int num_ragged = ragged_values_types.size();\n      if (num_ragged != ragged_splits_types.size()) {\n        return errors::InvalidArgument(\n            \"Parameters `values` and `row_splits` must be the same length\");\n      }\n\n      int num_sparse;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Nsparse\", &num_sparse));\n\n      ShapeHandle out_values = c->UnknownShapeOfRank(1);\n      ShapeHandle out_splits = c->UnknownShapeOfRank(1);\n\n      // Merge the shapes of row_splits from ragged inputs.  (This is one plus\n      // the batch size.)\n      int ragged_splits_start = num_ragged;\n      for (int i = 0; i < ragged_splits_types.size(); ++i) {\n        ShapeHandle row_splits = c->input(i + ragged_splits_start);\n        if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n          return errors::InvalidArgument(\n              \"inputs must all have the same batch dimension size.\");\n        }\n      }\n\n      // Merge the batch size of each dense input into out_splits.\n      int dense_start = num_ragged * 2 + num_sparse * 3;\n      for (int i = 0; i < dense_types.size(); ++i) {\n        ShapeHandle dense_input = c->input(i + dense_start);\n        int64_t batch_size = c->Value(c->Dim(dense_input, 0));\n        if (batch_size != InferenceContext::kUnknownDim) {\n          ShapeHandle row_splits = c->Vector(batch_size + 1);\n          if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n            return errors::InvalidArgument(\n                \"inputs must all have the same batch dimension size.\");\n          }\n        }\n      }\n\n      c->set_output(0, out_values);\n      c->set_output(1, out_splits);\n      return Status::OK();\n    });\n\n//==============================================================================\n// Shape Functions\n//==============================================================================\n\nStatus RaggedGatherShapeFn(InferenceContext* c) {\n  int num_splits;\n  int64_t PARAMS_RAGGED_RANK;\n  TF_RETURN_IF_ERROR(\n      c->GetAttr<int64_t>(\"PARAMS_RAGGED_RANK\", &PARAMS_RAGGED_RANK));\n  TF_RETURN_IF_ERROR(c->GetAttr<int>(\"OUTPUT_RAGGED_RANK\", &num_splits));\n\n  // Check rank of `indices`.\n  ShapeHandle indices = c->input(PARAMS_RAGGED_RANK + 1);\n  TF_RETURN_IF_ERROR(\n      c->WithRank(indices, num_splits - PARAMS_RAGGED_RANK + 1, &indices));\n\n  // Check that all params_nested_splits have rank 1.\n  for (int64_t i = 0; i < PARAMS_RAGGED_RANK; ++i) {\n    ShapeHandle splits = c->input(i);\n    TF_RETURN_IF_ERROR(c->WithRank(splits, 1, &splits));\n  }\n\n  // Check that `params_dense_values` has rank>=1.\n  ShapeHandle params_dense_values = c->input(PARAMS_RAGGED_RANK);\n  TF_RETURN_IF_ERROR(\n      c->WithRankAtLeast(params_dense_values, 1, &params_dense_values));\n\n  // Set the rank for the `splits` outputs.\n  for (int i = 0; i < num_splits; ++i) {\n    c->set_output(i, c->UnknownShapeOfRank(1));\n  }\n\n  // Calculate the `values` shape.\n  ShapeHandle value = c->UnknownShape();\n  ShapeHandle values = c->UnknownShape();\n  TF_RETURN_IF_ERROR(c->Subshape(params_dense_values, 1, &value));\n  TF_RETURN_IF_ERROR(c->Concatenate(c->UnknownShapeOfRank(1), value, &values));\n  c->set_output(num_splits, values);\n\n  return Status::OK();\n}\n\n}  // namespace tensorflow\n", "# Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tf.ragged.cross and tf.ragged.cross_hashed.\"\"\"\n\nfrom absl.testing import parameterized\n\nimport numpy as np\n\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import sparse_ops\nfrom tensorflow.python.ops.ragged import ragged_array_ops\nfrom tensorflow.python.ops.ragged import ragged_factory_ops\nfrom tensorflow.python.ops.ragged import ragged_tensor\nfrom tensorflow.python.platform import googletest\n\nragged_const = ragged_factory_ops.constant_value\ndense_const = np.array\n\n\ndef sparse_const(matrix):\n  indices = []\n  values = []\n  for i, row in enumerate(matrix):\n    for j, val in enumerate(row):\n      indices.append([i, j])\n      values.append(val)\n  shape = [len(matrix), max(len(row) for row in matrix)] if matrix else [0, 0]\n  if not values:\n    indices = np.zeros([0, 2], dtype=np.int64)\n    values = np.zeros([0], dtype=np.int64)\n  return sparse_tensor.SparseTensorValue(indices, values, shape)\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RaggedCrossOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='NoInputs',\n          inputs=[],\n          expected=ragged_const([], ragged_rank=1, dtype=dtypes.int32)),\n      dict(\n          testcase_name='OneInput_RaggedStr',\n          inputs=[ragged_const([['a', 'b'], [], ['c']])],\n          expected=ragged_const([[b'a', b'b'], [], [b'c']])),\n      dict(\n          testcase_name='OneInput_RaggedInt',\n          inputs=[ragged_const([[1, 2, 3], [4, 5]])],\n          expected=ragged_const([[b'1', b'2', b'3'], [b'4', b'5']])),\n      dict(\n          testcase_name='OneInput_DenseInt',\n          inputs=[dense_const([[1, 2, 3], [4, 5, 6]])],\n          expected=ragged_const([[b'1', b'2', b'3'], [b'4', b'5', b'6']])),\n      dict(\n          testcase_name='OneInput_SparseStr',\n          inputs=[sparse_const([['a', 'b'], [], ['c']])],\n          expected=ragged_const([[b'a', b'b'], [], [b'c']])),\n      dict(\n          testcase_name='TwoInputs_RaggedStr_RaggedStr',\n          inputs=[\n              ragged_const([['a', 'b'], [], ['c']]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'a_X_d', b'a_X_e', b'b_X_d', b'b_X_e'], [],\n                                 [b'c_X_g']])),\n      dict(\n          testcase_name='TwoInputs_RaggedInt_RaggedInt',\n          inputs=[\n              ragged_const([[1, 2], [], [3]]),\n              ragged_const([[4, 5, 6], [], [7]])\n          ],\n          expected=ragged_const(\n              [[b'1_X_4', b'1_X_5', b'1_X_6', b'2_X_4', b'2_X_5', b'2_X_6'], [],\n               [b'3_X_7']])),\n      dict(\n          testcase_name='TwoInputs_RaggedStr_RaggedInt',\n          inputs=[\n              ragged_const([['a', 'b'], [], ['c']]),\n              ragged_const([['1', '2'], ['3'], ['4']])\n          ],\n          expected=ragged_const([[b'a_X_1', b'a_X_2', b'b_X_1', b'b_X_2'], [],\n                                 [b'c_X_4']])),\n      dict(\n          testcase_name='TwoInputs_SparseStr_SparseStr',\n          inputs=[\n              sparse_const([['a', 'b'], [], ['c']]),\n              sparse_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'a_X_d', b'a_X_e', b'b_X_d', b'b_X_e'], [],\n                                 [b'c_X_g']])),\n      dict(\n          testcase_name='TwoInputs_DenseInt_DenseInt',\n          inputs=[dense_const([[1, 2], [3, 4]]),\n                  dense_const([[5, 6], [7, 8]])],\n          expected=ragged_const([[b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8', b'4_X_7', b'4_X_8']])),\n      dict(\n          testcase_name='TwoInputs_DenseInt_DenseStr',\n          inputs=[\n              dense_const([[1, 2], [3, 4]]),\n              dense_const([[b'5', b'6'], [b'7', b'8']])\n          ],\n          expected=ragged_const([[b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8', b'4_X_7', b'4_X_8']])),\n      dict(\n          testcase_name='TwoInputs_RaggedInt_DenseInt',\n          inputs=[\n              ragged_const([[], [], [1, 2], [3]]),\n              dense_const([[1, 2], [3, 4], [5, 6], [7, 8]])\n          ],\n          expected=ragged_const([[], [],\n                                 [b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8']])),\n      dict(\n          # This test exercises `input_order`.\n          testcase_name='TwoInputs_DenseInt_RaggedStr',\n          inputs=[\n              dense_const([[1, 2], [3, 4], [5, 6]]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'1_X_d', b'1_X_e', b'2_X_d', b'2_X_e'],\n                                 [b'3_X_f', b'4_X_f'], [b'5_X_g', b'6_X_g']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          # This test exercises `input_order`.\n          testcase_name='TwoInputs_SparseInt_RaggedStr',\n          inputs=[\n              sparse_const([[1, 2], [3, 4], [5, 6]]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'1_X_d', b'1_X_e', b'2_X_d', b'2_X_e'],\n                                 [b'3_X_f', b'4_X_f'], [b'5_X_g', b'6_X_g']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          testcase_name='ThreeInputs_RaggedInt_RaggedInt_RaggedInt',\n          inputs=[\n              ragged_const([[11], [12, 13], [], [14, 15]]),\n              ragged_const([[21, 22], [23], [24, 25], [26, 27]]),\n              ragged_const([[31], [32, 33], [34, 35], [36, 37]])\n          ],\n          expected=ragged_const([[b'11_X_21_X_31', b'11_X_22_X_31'],\n                                 [\n                                     b'12_X_23_X_32', b'12_X_23_X_33',\n                                     b'13_X_23_X_32', b'13_X_23_X_33'\n                                 ], [],\n                                 [\n                                     b'14_X_26_X_36', b'14_X_26_X_37',\n                                     b'14_X_27_X_36', b'14_X_27_X_37',\n                                     b'15_X_26_X_36', b'15_X_26_X_37',\n                                     b'15_X_27_X_36', b'15_X_27_X_37'\n                                 ]])),\n      dict(\n          testcase_name='ThreeInputs_RaggedInt_SparseInt_DenseInt',\n          inputs=[\n              ragged_const([[11], [12, 13], [], [14, 15]]),\n              sparse_const([[21, 22], [23], [24, 25], [26, 27]]),\n              dense_const([[31], [32], [33], [34]])\n          ],\n          expected=ragged_const([[b'11_X_21_X_31', b'11_X_22_X_31'],\n                                 [\n                                     b'12_X_23_X_32',\n                                     b'13_X_23_X_32',\n                                 ], [],\n                                 [\n                                     b'14_X_26_X_34',\n                                     b'14_X_27_X_34',\n                                     b'15_X_26_X_34',\n                                     b'15_X_27_X_34',\n                                 ]])),\n      dict(\n          testcase_name='FiveInputs',\n          inputs=[\n              ragged_const([[1]]),\n              dense_const([[2]]),\n              ragged_const([[3]]),\n              sparse_const([[4]]),\n              ragged_const([[5]])\n          ],\n          expected=ragged_const([[b'1_X_2_X_3_X_4_X_5']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          testcase_name='Permutation_3x3x3',\n          inputs=[[['11', '12', '13']], [['21', '22', '23']],\n                  [['31', '32', '33']]],\n          expected=[[\n              b'11_X_21_X_31', b'11_X_21_X_32', b'11_X_21_X_33',\n              b'11_X_22_X_31', b'11_X_22_X_32', b'11_X_22_X_33',\n              b'11_X_23_X_31', b'11_X_23_X_32', b'11_X_23_X_33',\n              b'12_X_21_X_31', b'12_X_21_X_32', b'12_X_21_X_33',\n              b'12_X_22_X_31', b'12_X_22_X_32', b'12_X_22_X_33',\n              b'12_X_23_X_31', b'12_X_23_X_32', b'12_X_23_X_33',\n              b'13_X_21_X_31', b'13_X_21_X_32', b'13_X_21_X_33',\n              b'13_X_22_X_31', b'13_X_22_X_32', b'13_X_22_X_33',\n              b'13_X_23_X_31', b'13_X_23_X_32', b'13_X_23_X_33'\n          ]]),\n      dict(\n          testcase_name='BatchSizeZero',\n          inputs=[\n              ragged_const([], ragged_rank=1, dtype=dtypes.int32),\n              sparse_const([]),\n              np.zeros([0, 3], dtype=np.int32),\n          ],\n          expected=ragged_const([], ragged_rank=1, dtype=dtypes.int32)),\n      dict(\n          testcase_name='ThreeInputs_OneEmpty',\n          inputs=[\n              ragged_const([[1, 2]]),\n              ragged_const([[]], dtype=dtypes.int32),\n              ragged_const([[3, 4]])\n          ],\n          expected=ragged_const([[]], dtype=dtypes.string)),\n      dict(\n          testcase_name='ThreeInputs_AllEmpty',\n          inputs=[\n              ragged_const([[]], dtype=dtypes.int64),\n              ragged_const([[]], dtype=dtypes.string),\n              ragged_const([[]], dtype=dtypes.int32)\n          ],\n          expected=ragged_const([[]], ragged_rank=1, dtype=dtypes.string)),\n      dict(\n          testcase_name='HashedZeroBucketsDefaultKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          expected_hashed=ragged_const([[1971693436396284976]])),\n      dict(\n          testcase_name='Hashed100BucketsDefaultKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          num_buckets=100,\n          expected_hashed=ragged_const([[83]])),\n      dict(\n          testcase_name='HashedZeroBucketsCustomKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          hash_key=ragged_array_ops._DEFAULT_CROSS_HASH_KEY + 1,\n          expected_hashed=ragged_const([[4847552627144134031]])),\n      dict(\n          testcase_name='Hashed100BucketsCustomKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          num_buckets=100,\n          hash_key=ragged_array_ops._DEFAULT_CROSS_HASH_KEY + 1,\n          expected_hashed=ragged_const([[31]])),\n      dict(\n          testcase_name='HashedZeroKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          hash_key=0,\n          expected_hashed=ragged_const([[9077905385164735582]]),\n          matches_sparse_cross=False  # sparse treats hash_key=0 as None.\n      ),\n      dict(\n          testcase_name='UInt64',\n          inputs=[ragged_const([[2**64 - 1]], dtype=dtypes.uint64)],\n          expected=ragged_const([[b'-1']])),\n  ])\n  def testRaggedCross(self,\n                      inputs,\n                      num_buckets=0,\n                      hash_key=None,\n                      expected=None,\n                      expected_hashed=None,\n                      matches_sparse_cross=True):\n    ragged_cross = ragged_array_ops.cross(inputs)\n    ragged_cross_hashed = ragged_array_ops.cross_hashed(inputs, num_buckets,\n                                                        hash_key)\n\n    if expected is not None:\n      self.assertAllEqual(ragged_cross, expected)\n    if expected_hashed is not None:\n      self.assertAllEqual(ragged_cross_hashed, expected_hashed)\n\n    if matches_sparse_cross:\n      # Check that ragged.cross & sparse.cross match.\n      sparse_inputs = [self._ragged_to_sparse(t) for t in inputs]\n      sparse_cross = sparse_ops.sparse_cross(sparse_inputs)\n      self.assertAllEqual(ragged_cross,\n                          ragged_tensor.RaggedTensor.from_sparse(sparse_cross))\n\n      # Check that ragged.cross_hashed & sparse.cross_hashed match.\n      sparse_inputs = [self._ragged_to_sparse(t) for t in inputs]\n      sparse_cross_hashed = sparse_ops.sparse_cross_hashed(\n          sparse_inputs, num_buckets, hash_key)\n      self.assertAllEqual(\n          ragged_cross_hashed,\n          ragged_tensor.RaggedTensor.from_sparse(sparse_cross_hashed))\n\n  def testRaggedCrossLargeBatch(self):\n    batch_size = 5000\n    inputs = [\n        ragged_const([[1, 2, 3]] * batch_size),\n        ragged_const([[b'4']] * batch_size),\n        dense_const([[5]] * batch_size),\n        sparse_const([[6, 7]] * batch_size)\n    ]\n\n    expected = [[\n        b'1_X_4_X_5_X_6', b'1_X_4_X_5_X_7', b'2_X_4_X_5_X_6', b'2_X_4_X_5_X_7',\n        b'3_X_4_X_5_X_6', b'3_X_4_X_5_X_7'\n    ]] * batch_size\n\n    ragged_cross = ragged_array_ops.cross(inputs)\n\n    # Note: we don't use assertAllEqual here because if they don't match,\n    # then the code in assertAllEqual that tries to build the error message\n    # is very slow, causing the test to timeout.\n    # pylint: disable=g-generic-assert\n    self.assertTrue(self.evaluate(ragged_cross).to_list() == expected)\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='BadDType',\n          inputs=[ragged_const([[1.1], [2.2, 3.3]])],\n          message=r'Unexpected dtype for inputs\\[0\\]'),\n      dict(\n          testcase_name='StaticBatchSizeMismatch1',\n          inputs=[ragged_const([[1]]),\n                  ragged_const([[2], [3]])],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='inputs must all have the same batch dimension size'),\n      dict(\n          testcase_name='StaticBatchSizeMismatch2',\n          inputs=[ragged_const([[1]]),\n                  dense_const([[2], [3]])],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='inputs must all have the same batch dimension size'),\n  ])\n  def testStaticError(self, inputs, exception=ValueError, message=None):\n    with self.assertRaisesRegex(exception, message):\n      ragged_array_ops.cross(inputs)\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='3DRaggedTensor',\n          inputs=[ragged_const([[[1]]], ragged_rank=1)],\n          message='tf.ragged.cross only supports inputs with rank=2'),\n      dict(\n          testcase_name='3DDenseTensor',\n          inputs=[dense_const([[[1]]])],\n          message='tf.ragged.cross only supports inputs with rank=2'),\n  ])\n  def testRuntimeError(self,\n                       inputs,\n                       exception=errors.InvalidArgumentError,\n                       message=None):\n    with self.assertRaisesRegex(exception, message):\n      self.evaluate(ragged_array_ops.cross(inputs))\n\n  def _ragged_to_sparse(self, t):\n    if ragged_tensor.is_ragged(t):\n      return ragged_tensor.convert_to_tensor_or_ragged_tensor(t).to_sparse()\n    elif sparse_tensor.is_sparse(t):\n      return sparse_tensor.SparseTensor.from_value(t)\n    else:\n      return ops.convert_to_tensor(t)\n\n\nif __name__ == '__main__':\n  googletest.main()\n"], "fixing_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n\nnamespace tensorflow {\n\nusing shape_inference::DimensionHandle;\nusing shape_inference::InferenceContext;\nusing shape_inference::ShapeHandle;\n\nStatus RaggedGatherShapeFn(InferenceContext* c);\n\n//==============================================================================\n// Registered Ops\n//==============================================================================\n\nREGISTER_OP(\"RaggedGather\")\n    .Input(\"params_nested_splits: PARAMS_RAGGED_RANK * Tsplits\")\n    .Input(\"params_dense_values: Tvalues\")\n    .Input(\"indices: Tindices\")\n    .Output(\"output_nested_splits: OUTPUT_RAGGED_RANK * Tsplits\")\n    .Output(\"output_dense_values: Tvalues\")\n    .Attr(\"Tvalues: type\")\n    .Attr(\"Tindices: {int32, int64}\")\n    .Attr(\"Tsplits: {int32, int64} = DT_INT64\")\n    .Attr(\"PARAMS_RAGGED_RANK: int >= 1\")\n    .Attr(\"OUTPUT_RAGGED_RANK: int >= 0\")\n    .SetShapeFn(RaggedGatherShapeFn);\n\nREGISTER_OP(\"RaggedCross\")\n    .Input(\"ragged_values: ragged_values_types\")\n    .Input(\"ragged_row_splits: ragged_splits_types\")\n    .Input(\"sparse_indices: Nsparse * int64\")\n    .Input(\"sparse_values: sparse_values_types\")\n    .Input(\"sparse_shape: Nsparse * int64\")\n    .Input(\"dense_inputs: dense_types\")\n    .Output(\"output_values: out_values_type\")\n    .Output(\"output_row_splits: out_row_splits_type\")\n    .Attr(\"Nsparse: int >= 0\")\n    .Attr(\"input_order: string\")\n    .Attr(\"hashed_output: bool\")\n    .Attr(\"num_buckets: int >= 0\")\n    .Attr(\"hash_key: int\")\n    .Attr(\"ragged_values_types: list({int64, string}) >= 0\")\n    .Attr(\"ragged_splits_types: list({int32, int64}) >= 0\")\n    .Attr(\"sparse_values_types: list({int64, string}) >= 0\")\n    .Attr(\"dense_types: list({int64, string}) >= 0\")\n    .Attr(\"out_values_type: {int64, string}\")\n    .Attr(\"out_row_splits_type: {int32, int64}\")\n    .SetShapeFn([](shape_inference::InferenceContext* c) {\n      std::vector<DataType> ragged_values_types;\n      std::vector<DataType> ragged_splits_types;\n      std::vector<DataType> dense_types;\n\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_values_types\", &ragged_values_types));\n      TF_RETURN_IF_ERROR(\n          c->GetAttr(\"ragged_splits_types\", &ragged_splits_types));\n      TF_RETURN_IF_ERROR(c->GetAttr(\"dense_types\", &dense_types));\n\n      int num_ragged = ragged_values_types.size();\n      if (num_ragged != ragged_splits_types.size()) {\n        return errors::InvalidArgument(\n            \"Parameters `values` and `row_splits` must be the same length\");\n      }\n\n      int num_sparse;\n      TF_RETURN_IF_ERROR(c->GetAttr(\"Nsparse\", &num_sparse));\n\n      ShapeHandle out_values = c->UnknownShapeOfRank(1);\n      ShapeHandle out_splits = c->UnknownShapeOfRank(1);\n\n      // Merge the shapes of row_splits from ragged inputs.  (This is one plus\n      // the batch size.)\n      int ragged_splits_start = num_ragged;\n      for (int i = 0; i < ragged_splits_types.size(); ++i) {\n        ShapeHandle row_splits = c->input(i + ragged_splits_start);\n        if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n          return errors::InvalidArgument(\n              \"inputs must all have the same batch dimension size.\");\n        }\n      }\n\n      // Merge the batch size of each dense input into out_splits.\n      int dense_start = num_ragged * 2 + num_sparse * 3;\n      for (int i = 0; i < dense_types.size(); ++i) {\n        ShapeHandle dense_input = c->input(i + dense_start);\n        int32 rank = c->Rank(dense_input);\n        if (rank == InferenceContext::kUnknownRank) {\n          continue;\n        } else if (rank != 2) {\n          return errors::InvalidArgument(\n              \"tf.ragged.cross only supports inputs with rank=2\");\n        }\n        int64_t batch_size = c->Value(c->Dim(dense_input, 0));\n        if (batch_size != InferenceContext::kUnknownDim) {\n          ShapeHandle row_splits = c->Vector(batch_size + 1);\n          if (!c->Merge(out_splits, row_splits, &out_splits).ok()) {\n            return errors::InvalidArgument(\n                \"inputs must all have the same batch dimension size.\");\n          }\n        }\n      }\n\n      c->set_output(0, out_values);\n      c->set_output(1, out_splits);\n      return Status::OK();\n    });\n\n//==============================================================================\n// Shape Functions\n//==============================================================================\n\nStatus RaggedGatherShapeFn(InferenceContext* c) {\n  int num_splits;\n  int64_t PARAMS_RAGGED_RANK;\n  TF_RETURN_IF_ERROR(\n      c->GetAttr<int64_t>(\"PARAMS_RAGGED_RANK\", &PARAMS_RAGGED_RANK));\n  TF_RETURN_IF_ERROR(c->GetAttr<int>(\"OUTPUT_RAGGED_RANK\", &num_splits));\n\n  // Check rank of `indices`.\n  ShapeHandle indices = c->input(PARAMS_RAGGED_RANK + 1);\n  TF_RETURN_IF_ERROR(\n      c->WithRank(indices, num_splits - PARAMS_RAGGED_RANK + 1, &indices));\n\n  // Check that all params_nested_splits have rank 1.\n  for (int64_t i = 0; i < PARAMS_RAGGED_RANK; ++i) {\n    ShapeHandle splits = c->input(i);\n    TF_RETURN_IF_ERROR(c->WithRank(splits, 1, &splits));\n  }\n\n  // Check that `params_dense_values` has rank>=1.\n  ShapeHandle params_dense_values = c->input(PARAMS_RAGGED_RANK);\n  TF_RETURN_IF_ERROR(\n      c->WithRankAtLeast(params_dense_values, 1, &params_dense_values));\n\n  // Set the rank for the `splits` outputs.\n  for (int i = 0; i < num_splits; ++i) {\n    c->set_output(i, c->UnknownShapeOfRank(1));\n  }\n\n  // Calculate the `values` shape.\n  ShapeHandle value = c->UnknownShape();\n  ShapeHandle values = c->UnknownShape();\n  TF_RETURN_IF_ERROR(c->Subshape(params_dense_values, 1, &value));\n  TF_RETURN_IF_ERROR(c->Concatenate(c->UnknownShapeOfRank(1), value, &values));\n  c->set_output(num_splits, values);\n\n  return Status::OK();\n}\n\n}  // namespace tensorflow\n", "# Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for tf.ragged.cross and tf.ragged.cross_hashed.\"\"\"\n\nfrom absl.testing import parameterized\n\nimport numpy as np\n\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.framework import tensor_spec\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import sparse_ops\nfrom tensorflow.python.ops.ragged import ragged_array_ops\nfrom tensorflow.python.ops.ragged import ragged_factory_ops\nfrom tensorflow.python.ops.ragged import ragged_tensor\nfrom tensorflow.python.platform import googletest\n\nragged_const = ragged_factory_ops.constant_value\ndense_const = np.array\n\n\ndef sparse_const(matrix):\n  indices = []\n  values = []\n  for i, row in enumerate(matrix):\n    for j, val in enumerate(row):\n      indices.append([i, j])\n      values.append(val)\n  shape = [len(matrix), max(len(row) for row in matrix)] if matrix else [0, 0]\n  if not values:\n    indices = np.zeros([0, 2], dtype=np.int64)\n    values = np.zeros([0], dtype=np.int64)\n  return sparse_tensor.SparseTensorValue(indices, values, shape)\n\n\n@test_util.run_all_in_graph_and_eager_modes\nclass RaggedCrossOpTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='NoInputs',\n          inputs=[],\n          expected=ragged_const([], ragged_rank=1, dtype=dtypes.int32)),\n      dict(\n          testcase_name='OneInput_RaggedStr',\n          inputs=[ragged_const([['a', 'b'], [], ['c']])],\n          expected=ragged_const([[b'a', b'b'], [], [b'c']])),\n      dict(\n          testcase_name='OneInput_RaggedInt',\n          inputs=[ragged_const([[1, 2, 3], [4, 5]])],\n          expected=ragged_const([[b'1', b'2', b'3'], [b'4', b'5']])),\n      dict(\n          testcase_name='OneInput_DenseInt',\n          inputs=[dense_const([[1, 2, 3], [4, 5, 6]])],\n          expected=ragged_const([[b'1', b'2', b'3'], [b'4', b'5', b'6']])),\n      dict(\n          testcase_name='OneInput_SparseStr',\n          inputs=[sparse_const([['a', 'b'], [], ['c']])],\n          expected=ragged_const([[b'a', b'b'], [], [b'c']])),\n      dict(\n          testcase_name='TwoInputs_RaggedStr_RaggedStr',\n          inputs=[\n              ragged_const([['a', 'b'], [], ['c']]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'a_X_d', b'a_X_e', b'b_X_d', b'b_X_e'], [],\n                                 [b'c_X_g']])),\n      dict(\n          testcase_name='TwoInputs_RaggedInt_RaggedInt',\n          inputs=[\n              ragged_const([[1, 2], [], [3]]),\n              ragged_const([[4, 5, 6], [], [7]])\n          ],\n          expected=ragged_const(\n              [[b'1_X_4', b'1_X_5', b'1_X_6', b'2_X_4', b'2_X_5', b'2_X_6'], [],\n               [b'3_X_7']])),\n      dict(\n          testcase_name='TwoInputs_RaggedStr_RaggedInt',\n          inputs=[\n              ragged_const([['a', 'b'], [], ['c']]),\n              ragged_const([['1', '2'], ['3'], ['4']])\n          ],\n          expected=ragged_const([[b'a_X_1', b'a_X_2', b'b_X_1', b'b_X_2'], [],\n                                 [b'c_X_4']])),\n      dict(\n          testcase_name='TwoInputs_SparseStr_SparseStr',\n          inputs=[\n              sparse_const([['a', 'b'], [], ['c']]),\n              sparse_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'a_X_d', b'a_X_e', b'b_X_d', b'b_X_e'], [],\n                                 [b'c_X_g']])),\n      dict(\n          testcase_name='TwoInputs_DenseInt_DenseInt',\n          inputs=[dense_const([[1, 2], [3, 4]]),\n                  dense_const([[5, 6], [7, 8]])],\n          expected=ragged_const([[b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8', b'4_X_7', b'4_X_8']])),\n      dict(\n          testcase_name='TwoInputs_DenseInt_DenseStr',\n          inputs=[\n              dense_const([[1, 2], [3, 4]]),\n              dense_const([[b'5', b'6'], [b'7', b'8']])\n          ],\n          expected=ragged_const([[b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8', b'4_X_7', b'4_X_8']])),\n      dict(\n          testcase_name='TwoInputs_RaggedInt_DenseInt',\n          inputs=[\n              ragged_const([[], [], [1, 2], [3]]),\n              dense_const([[1, 2], [3, 4], [5, 6], [7, 8]])\n          ],\n          expected=ragged_const([[], [],\n                                 [b'1_X_5', b'1_X_6', b'2_X_5', b'2_X_6'],\n                                 [b'3_X_7', b'3_X_8']])),\n      dict(\n          # This test exercises `input_order`.\n          testcase_name='TwoInputs_DenseInt_RaggedStr',\n          inputs=[\n              dense_const([[1, 2], [3, 4], [5, 6]]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'1_X_d', b'1_X_e', b'2_X_d', b'2_X_e'],\n                                 [b'3_X_f', b'4_X_f'], [b'5_X_g', b'6_X_g']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          # This test exercises `input_order`.\n          testcase_name='TwoInputs_SparseInt_RaggedStr',\n          inputs=[\n              sparse_const([[1, 2], [3, 4], [5, 6]]),\n              ragged_const([['d', 'e'], ['f'], ['g']])\n          ],\n          expected=ragged_const([[b'1_X_d', b'1_X_e', b'2_X_d', b'2_X_e'],\n                                 [b'3_X_f', b'4_X_f'], [b'5_X_g', b'6_X_g']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          testcase_name='ThreeInputs_RaggedInt_RaggedInt_RaggedInt',\n          inputs=[\n              ragged_const([[11], [12, 13], [], [14, 15]]),\n              ragged_const([[21, 22], [23], [24, 25], [26, 27]]),\n              ragged_const([[31], [32, 33], [34, 35], [36, 37]])\n          ],\n          expected=ragged_const([[b'11_X_21_X_31', b'11_X_22_X_31'],\n                                 [\n                                     b'12_X_23_X_32', b'12_X_23_X_33',\n                                     b'13_X_23_X_32', b'13_X_23_X_33'\n                                 ], [],\n                                 [\n                                     b'14_X_26_X_36', b'14_X_26_X_37',\n                                     b'14_X_27_X_36', b'14_X_27_X_37',\n                                     b'15_X_26_X_36', b'15_X_26_X_37',\n                                     b'15_X_27_X_36', b'15_X_27_X_37'\n                                 ]])),\n      dict(\n          testcase_name='ThreeInputs_RaggedInt_SparseInt_DenseInt',\n          inputs=[\n              ragged_const([[11], [12, 13], [], [14, 15]]),\n              sparse_const([[21, 22], [23], [24, 25], [26, 27]]),\n              dense_const([[31], [32], [33], [34]])\n          ],\n          expected=ragged_const([[b'11_X_21_X_31', b'11_X_22_X_31'],\n                                 [\n                                     b'12_X_23_X_32',\n                                     b'13_X_23_X_32',\n                                 ], [],\n                                 [\n                                     b'14_X_26_X_34',\n                                     b'14_X_27_X_34',\n                                     b'15_X_26_X_34',\n                                     b'15_X_27_X_34',\n                                 ]])),\n      dict(\n          testcase_name='FiveInputs',\n          inputs=[\n              ragged_const([[1]]),\n              dense_const([[2]]),\n              ragged_const([[3]]),\n              sparse_const([[4]]),\n              ragged_const([[5]])\n          ],\n          expected=ragged_const([[b'1_X_2_X_3_X_4_X_5']]),\n          matches_sparse_cross=False  # sparse doesn't preserve input order.\n      ),\n      dict(\n          testcase_name='Permutation_3x3x3',\n          inputs=[[['11', '12', '13']], [['21', '22', '23']],\n                  [['31', '32', '33']]],\n          expected=[[\n              b'11_X_21_X_31', b'11_X_21_X_32', b'11_X_21_X_33',\n              b'11_X_22_X_31', b'11_X_22_X_32', b'11_X_22_X_33',\n              b'11_X_23_X_31', b'11_X_23_X_32', b'11_X_23_X_33',\n              b'12_X_21_X_31', b'12_X_21_X_32', b'12_X_21_X_33',\n              b'12_X_22_X_31', b'12_X_22_X_32', b'12_X_22_X_33',\n              b'12_X_23_X_31', b'12_X_23_X_32', b'12_X_23_X_33',\n              b'13_X_21_X_31', b'13_X_21_X_32', b'13_X_21_X_33',\n              b'13_X_22_X_31', b'13_X_22_X_32', b'13_X_22_X_33',\n              b'13_X_23_X_31', b'13_X_23_X_32', b'13_X_23_X_33'\n          ]]),\n      dict(\n          testcase_name='BatchSizeZero',\n          inputs=[\n              ragged_const([], ragged_rank=1, dtype=dtypes.int32),\n              sparse_const([]),\n              np.zeros([0, 3], dtype=np.int32),\n          ],\n          expected=ragged_const([], ragged_rank=1, dtype=dtypes.int32)),\n      dict(\n          testcase_name='ThreeInputs_OneEmpty',\n          inputs=[\n              ragged_const([[1, 2]]),\n              ragged_const([[]], dtype=dtypes.int32),\n              ragged_const([[3, 4]])\n          ],\n          expected=ragged_const([[]], dtype=dtypes.string)),\n      dict(\n          testcase_name='ThreeInputs_AllEmpty',\n          inputs=[\n              ragged_const([[]], dtype=dtypes.int64),\n              ragged_const([[]], dtype=dtypes.string),\n              ragged_const([[]], dtype=dtypes.int32)\n          ],\n          expected=ragged_const([[]], ragged_rank=1, dtype=dtypes.string)),\n      dict(\n          testcase_name='HashedZeroBucketsDefaultKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          expected_hashed=ragged_const([[1971693436396284976]])),\n      dict(\n          testcase_name='Hashed100BucketsDefaultKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          num_buckets=100,\n          expected_hashed=ragged_const([[83]])),\n      dict(\n          testcase_name='HashedZeroBucketsCustomKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          hash_key=ragged_array_ops._DEFAULT_CROSS_HASH_KEY + 1,\n          expected_hashed=ragged_const([[4847552627144134031]])),\n      dict(\n          testcase_name='Hashed100BucketsCustomKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          num_buckets=100,\n          hash_key=ragged_array_ops._DEFAULT_CROSS_HASH_KEY + 1,\n          expected_hashed=ragged_const([[31]])),\n      dict(\n          testcase_name='HashedZeroKey',\n          inputs=[\n              ragged_const([['batch1-FC1-F1']]),\n              ragged_const([['batch1-FC2-F1']]),\n              ragged_const([['batch1-FC3-F1']])\n          ],\n          hash_key=0,\n          expected_hashed=ragged_const([[9077905385164735582]]),\n          matches_sparse_cross=False  # sparse treats hash_key=0 as None.\n      ),\n      dict(\n          testcase_name='UInt64',\n          inputs=[ragged_const([[2**64 - 1]], dtype=dtypes.uint64)],\n          expected=ragged_const([[b'-1']])),\n  ])\n  def testRaggedCross(self,\n                      inputs,\n                      num_buckets=0,\n                      hash_key=None,\n                      expected=None,\n                      expected_hashed=None,\n                      matches_sparse_cross=True):\n    ragged_cross = ragged_array_ops.cross(inputs)\n    ragged_cross_hashed = ragged_array_ops.cross_hashed(inputs, num_buckets,\n                                                        hash_key)\n\n    if expected is not None:\n      self.assertAllEqual(ragged_cross, expected)\n    if expected_hashed is not None:\n      self.assertAllEqual(ragged_cross_hashed, expected_hashed)\n\n    if matches_sparse_cross:\n      # Check that ragged.cross & sparse.cross match.\n      sparse_inputs = [self._ragged_to_sparse(t) for t in inputs]\n      sparse_cross = sparse_ops.sparse_cross(sparse_inputs)\n      self.assertAllEqual(ragged_cross,\n                          ragged_tensor.RaggedTensor.from_sparse(sparse_cross))\n\n      # Check that ragged.cross_hashed & sparse.cross_hashed match.\n      sparse_inputs = [self._ragged_to_sparse(t) for t in inputs]\n      sparse_cross_hashed = sparse_ops.sparse_cross_hashed(\n          sparse_inputs, num_buckets, hash_key)\n      self.assertAllEqual(\n          ragged_cross_hashed,\n          ragged_tensor.RaggedTensor.from_sparse(sparse_cross_hashed))\n\n  def testRaggedCrossLargeBatch(self):\n    batch_size = 5000\n    inputs = [\n        ragged_const([[1, 2, 3]] * batch_size),\n        ragged_const([[b'4']] * batch_size),\n        dense_const([[5]] * batch_size),\n        sparse_const([[6, 7]] * batch_size)\n    ]\n\n    expected = [[\n        b'1_X_4_X_5_X_6', b'1_X_4_X_5_X_7', b'2_X_4_X_5_X_6', b'2_X_4_X_5_X_7',\n        b'3_X_4_X_5_X_6', b'3_X_4_X_5_X_7'\n    ]] * batch_size\n\n    ragged_cross = ragged_array_ops.cross(inputs)\n\n    # Note: we don't use assertAllEqual here because if they don't match,\n    # then the code in assertAllEqual that tries to build the error message\n    # is very slow, causing the test to timeout.\n    # pylint: disable=g-generic-assert\n    self.assertTrue(self.evaluate(ragged_cross).to_list() == expected)\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='BadDType',\n          inputs=[ragged_const([[1.1], [2.2, 3.3]])],\n          message=r'Unexpected dtype for inputs\\[0\\]'),\n      dict(\n          testcase_name='StaticBatchSizeMismatch1',\n          inputs=[ragged_const([[1]]),\n                  ragged_const([[2], [3]])],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='inputs must all have the same batch dimension size'),\n      dict(\n          testcase_name='StaticBatchSizeMismatch2',\n          inputs=[ragged_const([[1]]),\n                  dense_const([[2], [3]])],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='inputs must all have the same batch dimension size'),\n      dict(\n          testcase_name='3DDenseTensor',\n          inputs=[dense_const([[[1]]])],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='tf.ragged.cross only supports inputs with rank=2'),\n      dict(\n          testcase_name='0DDenseTensor',\n          inputs=[dense_const(1)],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='tf.ragged.cross only supports inputs with rank=2'),\n  ])\n  def testStaticError(self, inputs, exception=ValueError, message=None):\n    with self.assertRaisesRegex(exception, message):\n      ragged_array_ops.cross(inputs)\n\n  @parameterized.named_parameters([\n      dict(\n          testcase_name='3DRaggedTensor',\n          inputs=[ragged_const([[[1]]], ragged_rank=1)],\n          message='tf.ragged.cross only supports inputs with rank=2'),\n      dict(\n          testcase_name='0DDenseTensor',\n          inputs=[dense_const(1)],\n          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='tf.ragged.cross only supports inputs with rank=2'),\n      dict(\n          testcase_name='1DDenseTensor',\n          inputs=[dense_const([1])],\n          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='tf.ragged.cross only supports inputs with rank=2'),\n      dict(\n          testcase_name='3DDenseTensor',\n          inputs=[dense_const([[[1]]])],\n          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n          exception=(ValueError, errors.InvalidArgumentError),\n          message='tf.ragged.cross only supports inputs with rank=2'),\n  ])\n  def testRuntimeError(self,\n                       inputs,\n                       exception=errors.InvalidArgumentError,\n                       message=None,\n                       signature=None):\n    @def_function.function(input_signature=signature)\n    def fn(x):\n      return ragged_array_ops.cross(x)\n\n    with self.assertRaisesRegex(exception, message):\n      self.evaluate(fn(inputs))\n\n  def _ragged_to_sparse(self, t):\n    if ragged_tensor.is_ragged(t):\n      return ragged_tensor.convert_to_tensor_or_ragged_tensor(t).to_sparse()\n    elif sparse_tensor.is_sparse(t):\n      return sparse_tensor.SparseTensor.from_value(t)\n    else:\n      return ops.convert_to_tensor(t)\n\n\nif __name__ == '__main__':\n  googletest.main()\n"], "filenames": ["tensorflow/core/ops/ragged_array_ops.cc", "tensorflow/python/ops/ragged/ragged_cross_op_test.py"], "buggy_code_start_loc": [101, 20], "buggy_code_end_loc": [101, 382], "fixing_code_start_loc": [102, 21], "fixing_code_end_loc": [109, 413], "type": "CWE-824", "message": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for `tf.ragged.cross` has an undefined behavior due to binding a reference to `nullptr`. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-41214", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-05T21:15:08.940", "lastModified": "2021-11-09T16:16:07.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for `tf.ragged.cross` has an undefined behavior due to binding a reference to `nullptr`. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. En las versiones afectadas el c\u00f3digo de inferencia de formas para \"tf.ragged.cross\" presenta un comportamiento indefinido debido a la vinculaci\u00f3n de una referencia a \"nullptr\". La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.7.0. Tambi\u00e9n ser\u00e1 incluida este commit en TensorFlow versi\u00f3n 2.6.1, TensorFlow versi\u00f3n 2.5.2, y TensorFlow versi\u00f3n 2.4.4, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-824"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-824"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.4", "matchCriteriaId": "455FB550-4C9C-4BD6-9F76-A627B62AB332"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.5.0", "versionEndExcluding": "2.5.2", "matchCriteriaId": "035CDF63-1548-4FB4-B8A9-B8D328FAF910"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "651EA851-E660-4E53-9F3E-B6B69D91326B"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-vwhq-49r4-gj9v", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"}}