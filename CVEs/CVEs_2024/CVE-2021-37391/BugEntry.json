{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CourseBundle\\Entity\\CForumPost;\nuse Chamilo\\CourseBundle\\Entity\\CForumThread;\nuse ChamiloSession as Session;\nuse Zend\\Feed\\Reader\\Entry\\Rss;\nuse Zend\\Feed\\Reader\\Reader;\n\n/**\n * Class SocialManager.\n *\n * This class provides methods for the social network management.\n * Include/require it in your code to use its features.\n */\nclass SocialManager extends UserManager\n{\n    const DEFAULT_WALL_POSTS = 10;\n    const DEFAULT_SCROLL_NEW_POST = 5;\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Allow to see contacts list.\n     *\n     * @author isaac flores paz\n     *\n     * @return array\n     */\n    public static function show_list_type_friends()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_FRIEND_RELATION_TYPE);\n        $sql = 'SELECT id, title FROM '.$table.'\n                WHERE id<>6\n                ORDER BY id ASC';\n        $result = Database::query($sql);\n        $friend_relation_list = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $friend_relation_list[] = $row;\n        }\n        $count_list = count($friend_relation_list);\n        if ($count_list == 0) {\n            $friend_relation_list[] = get_lang('Unknown');\n        } else {\n            return $friend_relation_list;\n        }\n    }\n\n    /**\n     * Get the kind of relation between contacts.\n     *\n     * @param int  $user_id     user id\n     * @param int  $user_friend user friend id\n     * @param bool $includeRH   include the RH relationship\n     *\n     * @return int\n     *\n     * @author isaac flores paz\n     */\n    public static function get_relation_between_contacts($user_id, $user_friend, $includeRH = false)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_FRIEND_RELATION_TYPE);\n        $userRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        if ($includeRH == false) {\n            $sql = 'SELECT rt.id as id\n                FROM '.$table.' rt\n                WHERE rt.id = (\n                    SELECT uf.relation_type\n                    FROM '.$userRelUserTable.' uf\n                    WHERE\n                        user_id='.((int) $user_id).' AND\n                        friend_user_id='.((int) $user_friend).' AND\n                        uf.relation_type <> '.USER_RELATION_TYPE_RRHH.'\n                    LIMIT 1\n                )';\n        } else {\n            $sql = 'SELECT rt.id as id\n                FROM '.$table.' rt\n                WHERE rt.id = (\n                    SELECT uf.relation_type\n                    FROM '.$userRelUserTable.' uf\n                    WHERE\n                        user_id='.((int) $user_id).' AND\n                        friend_user_id='.((int) $user_friend).'\n                    LIMIT 1\n                )';\n        }\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['id'];\n        } else {\n            if (api_get_configuration_value('social_make_teachers_friend_all')) {\n                $adminsList = UserManager::get_all_administrators();\n                foreach ($adminsList as $admin) {\n                    if (api_get_user_id() == $admin['user_id']) {\n                        return USER_RELATION_TYPE_GOODFRIEND;\n                    }\n                }\n                $targetUserCoursesList = CourseManager::get_courses_list_by_user_id(\n                    $user_id,\n                    true,\n                    false\n                );\n                $currentUserId = api_get_user_id();\n                foreach ($targetUserCoursesList as $course) {\n                    $teachersList = CourseManager::get_teacher_list_from_course_code($course['code']);\n                    foreach ($teachersList as $teacher) {\n                        if ($currentUserId == $teacher['user_id']) {\n                            return USER_RELATION_TYPE_GOODFRIEND;\n                        }\n                    }\n                }\n            } else {\n                return USER_UNKNOWN;\n            }\n        }\n    }\n\n    /**\n     * Get count of friends from user.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountFriends($userId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        $userId = (int) $userId;\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $sql = 'SELECT count(friend_user_id) count\n                FROM '.$table.'\n                WHERE\n                    relation_type NOT IN ('.USER_RELATION_TYPE_DELETED.', '.USER_RELATION_TYPE_RRHH.') AND\n                    friend_user_id<>'.$userId.' AND\n                    user_id='.$userId;\n        $res = Database::query($sql);\n        if (Database::num_rows($res)) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Gets friends id list.\n     *\n     * @param int  user id\n     * @param int group id\n     * @param string name to search\n     * @param bool true will load firstname, lastname, and image name\n     *\n     * @return array\n     *\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code, function renamed, $load_extra_info option added\n     * @author isaac flores paz\n     */\n    public static function get_friends(\n        $user_id,\n        $id_group = null,\n        $search_name = null,\n        $load_extra_info = true\n    ) {\n        $user_id = (int) $user_id;\n\n        $tbl_my_friend = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        $tbl_my_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = 'SELECT friend_user_id FROM '.$tbl_my_friend.'\n                WHERE\n                    relation_type NOT IN ('.USER_RELATION_TYPE_DELETED.', '.USER_RELATION_TYPE_RRHH.') AND\n                    friend_user_id<>'.$user_id.' AND\n                    user_id='.$user_id;\n        if (isset($id_group) && $id_group > 0) {\n            $sql .= ' AND relation_type='.$id_group;\n        }\n        if (isset($search_name)) {\n            $search_name = trim($search_name);\n            $search_name = str_replace(' ', '', $search_name);\n            $sql .= ' AND friend_user_id IN (\n                SELECT user_id FROM '.$tbl_my_user.'\n                WHERE\n                    firstName LIKE \"%'.Database::escape_string($search_name).'%\" OR\n                    lastName LIKE \"%'.Database::escape_string($search_name).'%\" OR\n                    '.(api_is_western_name_order() ? 'concat(firstName, lastName)' : 'concat(lastName, firstName)').' LIKE concat(\"%\",\"'.Database::escape_string($search_name).'\",\"%\")\n                ) ';\n        }\n\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            if ($load_extra_info) {\n                $userInfo = api_get_user_info($row['friend_user_id']);\n                $list[] = [\n                    'friend_user_id' => $row['friend_user_id'],\n                    'firstName' => $userInfo['firstName'],\n                    'lastName' => $userInfo['lastName'],\n                    'username' => $userInfo['username'],\n                    'image' => $userInfo['avatar'],\n                    'user_info' => $userInfo,\n                ];\n            } else {\n                $list[] = $row;\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * get web path of user invitate.\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya setting variable array\n     *\n     * @param int user id\n     *\n     * @return array\n     */\n    public static function get_list_web_path_user_invitation_by_user_id($user_id)\n    {\n        $list_ids = self::get_list_invitation_of_friends_by_user_id($user_id);\n        $list = [];\n        foreach ($list_ids as $values_ids) {\n            $list[] = UserManager::get_user_picture_path_by_id(\n                $values_ids['user_sender_id'],\n                'web'\n            );\n        }\n\n        return $list;\n    }\n\n    /**\n     * Sends an invitation to contacts.\n     *\n     * @param int user id\n     * @param int user friend id\n     * @param string title of the message\n     * @param string content of the message\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function send_invitation_friend(\n        $user_id,\n        $friend_id,\n        $message_title,\n        $message_content\n    ) {\n        $tbl_message = Database::get_main_table(TABLE_MESSAGE);\n        $user_id = (int) $user_id;\n        $friend_id = (int) $friend_id;\n\n        //Just in case we replace the and \\n and \\n\\r while saving in the DB\n        $message_content = str_replace([\"\\n\", \"\\n\\r\"], '<br />', $message_content);\n\n        $clean_message_content = Database::escape_string($message_content);\n        $now = api_get_utc_datetime();\n        $sql = 'SELECT COUNT(*) AS count FROM '.$tbl_message.'\n                WHERE\n                    user_sender_id='.$user_id.' AND\n                    user_receiver_id='.$friend_id.' AND\n                    msg_status IN('.MESSAGE_STATUS_INVITATION_PENDING.', '.MESSAGE_STATUS_INVITATION_ACCEPTED.', '.MESSAGE_STATUS_INVITATION_DENIED.');\n                ';\n        $res_exist = Database::query($sql);\n        $row_exist = Database::fetch_array($res_exist, 'ASSOC');\n\n        if ($row_exist['count'] == 0) {\n            $params = [\n                'user_sender_id' => $user_id,\n                'user_receiver_id' => $friend_id,\n                'msg_status' => MESSAGE_STATUS_INVITATION_PENDING,\n                'send_date' => $now,\n                'title' => $message_title,\n                'content' => $message_content,\n                'group_id' => 0,\n                'parent_id' => 0,\n                'update_date' => $now,\n            ];\n            $messageId = Database::insert($tbl_message, $params);\n\n            $senderInfo = api_get_user_info($user_id);\n            $notification = new Notification();\n            $notification->saveNotification(\n                $messageId,\n                Notification::NOTIFICATION_TYPE_INVITATION,\n                [$friend_id],\n                $message_title,\n                $message_content,\n                $senderInfo\n            );\n\n            return true;\n        } else {\n            // invitation already exist\n            $sql = 'SELECT COUNT(*) AS count, id FROM '.$tbl_message.'\n                    WHERE\n                        user_sender_id='.$user_id.' AND\n                        user_receiver_id='.$friend_id.' AND\n                        msg_status = 7';\n            $res_if_exist = Database::query($sql);\n            $row_if_exist = Database::fetch_array($res_if_exist, 'ASSOC');\n            if ($row_if_exist['count'] == 1) {\n                $sql = 'UPDATE '.$tbl_message.' SET\n                            msg_status = 5, content = \"'.$clean_message_content.'\"\n                        WHERE\n                            user_sender_id='.$user_id.' AND\n                            user_receiver_id='.$friend_id.' AND\n                            msg_status = 7 ';\n                Database::query($sql);\n\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Get number messages of the inbox.\n     *\n     * @author isaac flores paz\n     *\n     * @param int $userId user receiver id\n     *\n     * @return int\n     */\n    public static function get_message_number_invitation_by_user_id($userId)\n    {\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $userId = (int) $userId;\n        $sql = 'SELECT COUNT(*) as count_message_in_box FROM '.$table.'\n                WHERE\n                    user_receiver_id='.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        $row = Database::fetch_array($res, 'ASSOC');\n        if ($row) {\n            return (int) $row['count_message_in_box'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get number of messages sent to other users.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountMessagesSent($userId)\n    {\n        $userId = (int) $userId;\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*) FROM '.$table.'\n                WHERE\n                    user_sender_id='.$userId.' AND\n                    msg_status < 5';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get number of messages received from other users.\n     *\n     * @param int $receiver_id\n     *\n     * @return int\n     */\n    public static function getCountMessagesReceived($receiver_id)\n    {\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*) FROM '.$table.'\n                WHERE\n                    user_receiver_id='.intval($receiver_id).' AND\n                    msg_status < 4';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get number of messages posted on own wall.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountWallPostedMessages($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*)\n                FROM '.$table.'\n                WHERE\n                    user_sender_id='.$userId.' AND\n                    (msg_status = '.MESSAGE_STATUS_WALL.' OR\n                    msg_status = '.MESSAGE_STATUS_WALL_POST.') AND\n                    parent_id = 0';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get invitation list received by user.\n     *\n     * @author isaac flores paz\n     *\n     * @param int $userId\n     * @param int $limit\n     *\n     * @return array\n     */\n    public static function get_list_invitation_of_friends_by_user_id($userId, $limit = 0)\n    {\n        $userId = (int) $userId;\n        $limit = (int) $limit;\n\n        if (empty($userId)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT user_sender_id, send_date, title, content\n                FROM '.$table.'\n                WHERE\n                    user_receiver_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        if ($limit != null && $limit > 0) {\n            $sql .= ' LIMIT '.$limit;\n        }\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get invitation list sent by user.\n     *\n     * @author Julio Montoya <gugli100@gmail.com>\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function get_list_invitation_sent_by_user_id($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT user_receiver_id, send_date,title,content\n                FROM '.$table.'\n                WHERE\n                    user_sender_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            $list[$row['user_receiver_id']] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get count invitation sent by user.\n     *\n     * @author Julio Montoya <gugli100@gmail.com>\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountInvitationSent($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT count(user_receiver_id) count\n                FROM '.$table.'\n                WHERE\n                    user_sender_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        if (Database::num_rows($res)) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Accepts invitation.\n     *\n     * @param int $user_send_id\n     * @param int $user_receiver_id\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function invitation_accepted($user_send_id, $user_receiver_id)\n    {\n        if (empty($user_send_id) || empty($user_receiver_id)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = \"UPDATE $table\n                SET msg_status = \".MESSAGE_STATUS_INVITATION_ACCEPTED.\"\n                WHERE\n                    user_sender_id = \".((int) $user_send_id).\" AND\n                    user_receiver_id=\".((int) $user_receiver_id).\" AND\n                    msg_status = \".MESSAGE_STATUS_INVITATION_PENDING;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Denies invitation.\n     *\n     * @param int user sender id\n     * @param int user receiver id\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function invitation_denied($user_send_id, $user_receiver_id)\n    {\n        if (empty($user_send_id) || empty($user_receiver_id)) {\n            return false;\n        }\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'DELETE FROM '.$table.'\n                WHERE\n                    user_sender_id =  '.((int) $user_send_id).' AND\n                    user_receiver_id='.((int) $user_receiver_id).' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Get user's feeds.\n     *\n     * @param int $user  User ID\n     * @param int $limit Limit of posts per feed\n     *\n     * @return string HTML section with all feeds included\n     *\n     * @author  Yannick Warnier\n     *\n     * @since   Dokeos 1.8.6.1\n     */\n    public static function getUserRssFeed($user, $limit = 5)\n    {\n        $feed = UserManager::get_extra_user_data_by_field($user, 'rssfeeds');\n\n        if (empty($feed)) {\n            return '';\n        }\n        $feeds = explode(';', $feed['rssfeeds']);\n        if (0 == count($feeds)) {\n            return '';\n        }\n        $res = '';\n        foreach ($feeds as $url) {\n            if (empty($url)) {\n                continue;\n            }\n            try {\n                $channel = Reader::import($url);\n                $i = 1;\n                if (!empty($channel)) {\n                    $iconRss = '';\n                    if (!empty($feed)) {\n                        $iconRss = Display::url(\n                            Display::return_icon('social_rss.png', '', [], 22),\n                            Security::remove_XSS($feed['rssfeeds']),\n                            ['target' => '_blank']\n                        );\n                    }\n\n                    $res .= '<h3 class=\"title-rss\">'.$iconRss.' '.$channel->getTitle().'</h3>';\n                    $res .= '<div class=\"rss-items\">';\n                    /** @var Rss $item */\n                    foreach ($channel as $item) {\n                        if ($limit >= 0 and $i > $limit) {\n                            break;\n                        }\n                        $res .= '<h4 class=\"rss-title\"><a href=\"'.$item->getLink().'\">'.$item->getTitle().'</a></h4>';\n                        $res .= '<div class=\"rss-date\">'.api_get_local_time($item->getDateCreated()).'</div>';\n                        $res .= '<div class=\"rss-content\"><p>'.$item->getDescription().'</p></div>';\n                        $i++;\n                    }\n                    $res .= '</div>';\n                }\n            } catch (Exception $e) {\n                error_log($e->getMessage());\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Sends invitations to friends.\n     *\n     * @param int    $userId\n     * @param string $subject\n     * @param string $content\n     *\n     * @return bool\n     */\n    public static function sendInvitationToUser($userId, $subject = '', $content = '')\n    {\n        $user_info = api_get_user_info($userId);\n        $success = get_lang('MessageSentTo');\n        $success .= ' : '.api_get_person_name($user_info['firstName'], $user_info['lastName']);\n\n        if (isset($subject) && isset($content) && isset($userId)) {\n            $result = MessageManager::send_message($userId, $subject, $content);\n\n            if ($result) {\n                Display::addFlash(\n                    Display::return_message($success, 'normal', false)\n                );\n            } else {\n                Display::addFlash(\n                    Display::return_message(get_lang('ErrorSendingMessage'), 'error', false)\n                );\n            }\n\n            return false;\n        } elseif (isset($userId) && !isset($subject)) {\n            if (isset($userId) && $userId > 0) {\n                $count = self::send_invitation_friend(\n                    api_get_user_id(),\n                    $userId,\n                    get_lang('Invitation'),\n                    $content\n                );\n\n                if ($count) {\n                    Display::addFlash(\n                        Display::return_message(\n                            api_htmlentities(get_lang('InvitationHasBeenSent')),\n                            'normal',\n                            false\n                        )\n                    );\n                } else {\n                    Display::addFlash(\n                        Display::return_message(\n                            api_htmlentities(get_lang('YouAlreadySentAnInvitation')),\n                            'warning',\n                            false\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper functions definition.\n     */\n    public static function get_logged_user_course_html($my_course, $count)\n    {\n        $result = '';\n        $count = (int) $count;\n\n        // Table definitions\n        $main_user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $course_directory = $my_course['course_info']['directory'];\n        $course_title = $my_course['course_info']['title'];\n        $course_visibility = $my_course['course_info']['visibility'];\n\n        $user_in_course_status = CourseManager::getUserInCourseStatus(\n            api_get_user_id(),\n            $my_course['course_info']['real_id']\n        );\n\n        $course_path = api_get_path(SYS_COURSE_PATH).$course_directory; // course path\n        if (api_get_setting('course_images_in_courses_list') === 'true') {\n            if (file_exists($course_path.'/course-pic85x85.png')) {\n                $image = $my_course['course_info']['course_image'];\n                $imageCourse = Display::img($image, $course_title, ['class' => 'img-course']);\n            } else {\n                $imageCourse = Display::return_icon(\n                    'session_default_small.png',\n                    $course_title,\n                    ['class' => 'img-course']\n                );\n            }\n        } else {\n            $imageCourse = Display::return_icon(\n                'course.png',\n                get_lang('Course'),\n                ['class' => 'img-default']\n            );\n        }\n\n        //display course entry\n        if (api_get_setting('course_images_in_courses_list') === 'true') {\n            $result .= '<li id=\"course_'.$count.'\" class=\"list-group-item\" style=\"min-height:65px;\">';\n        } else {\n            $result .= '<li id=\"course_'.$count.'\" class=\"list-group-item\" style=\"min-height:44px;\">';\n        }\n        $result .= $imageCourse;\n\n        //show a hyperlink to the course, unless the course is closed and user is not course admin\n        if ($course_visibility != COURSE_VISIBILITY_HIDDEN &&\n            ($course_visibility != COURSE_VISIBILITY_CLOSED || $user_in_course_status == COURSEMANAGER)\n        ) {\n            $result .= '<span class=\"title\">'.$course_title.'<span>';\n        } else {\n            $result .= $course_title.' '.get_lang('CourseClosed');\n        }\n\n        $result .= '</li>';\n        $session = '';\n        if (!empty($my_course['session_name']) && !empty($my_course['id_session'])) {\n            // Request for the name of the general coach\n            $sql = 'SELECT lastname, firstname\n                    FROM '.$tbl_session.' ts\n                    LEFT JOIN '.$main_user_table.' tu\n                    ON ts.id_coach = tu.user_id\n                    WHERE ts.id='.(int) $my_course['id_session'].' LIMIT 1';\n            $rs = Database::query($sql);\n            $sessioncoach = Database::store_result($rs);\n            $sessioncoach = $sessioncoach[0];\n\n            $session = [];\n            $session['title'] = $my_course['session_name'];\n            if ($my_course['access_start_date'] == '0000-00-00') {\n                $session['dates'] = get_lang('WithoutTimeLimits');\n                if (api_get_setting('show_session_coach') === 'true') {\n                    $session['coach'] = get_lang('GeneralCoach').': '.\n                        api_get_person_name($sessioncoach['firstname'], $sessioncoach['lastname']);\n                }\n            } else {\n                $session['dates'] = ' - '.get_lang('From').' '.$my_course['access_start_date'].' '.get_lang('To').' '.$my_course['access_end_date'];\n                if (api_get_setting('show_session_coach') === 'true') {\n                    $session['coach'] = get_lang('GeneralCoach').': '.\n                        api_get_person_name($sessioncoach['firstname'], $sessioncoach['lastname']);\n                }\n            }\n        }\n\n        $my_course['id_session'] = isset($my_course['id_session']) ? $my_course['id_session'] : 0;\n        $output = [\n            $my_course['user_course_cat'],\n            $result,\n            $my_course['id_session'],\n            $session,\n        ];\n\n        return $output;\n    }\n\n    /**\n     * Shows the avatar block in social pages.\n     *\n     * @param string $show     highlight link possible values:\n     *                         group_add,\n     *                         home,\n     *                         messages,\n     *                         messages_inbox,\n     *                         messages_compose,\n     *                         messages_outbox,\n     *                         invitations,\n     *                         shared_profile,\n     *                         friends,\n     *                         groups search\n     * @param int    $group_id\n     * @param int    $user_id\n     */\n    public static function show_social_avatar_block($show = '', $group_id = 0, $user_id = 0)\n    {\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n\n        $show_groups = [\n            'groups',\n            'group_messages',\n            'messages_list',\n            'group_add',\n            'mygroups',\n            'group_edit',\n            'member_list',\n            'invite_friends',\n            'waiting_list',\n            'browse_groups',\n        ];\n\n        $template = new Template(null, false, false, false, false, false);\n\n        if (in_array($show, $show_groups) && !empty($group_id)) {\n            // Group image\n            $userGroup = new UserGroup();\n            $group_info = $userGroup->get($group_id);\n\n            $userGroupImage = $userGroup->get_picture_group(\n                $group_id,\n                $group_info['picture'],\n                128,\n                GROUP_IMAGE_SIZE_BIG\n            );\n\n            $template->assign('show_group', true);\n            $template->assign('group_id', $group_id);\n            $template->assign('user_group_image', $userGroupImage);\n            $template->assign(\n                'user_is_group_admin',\n                $userGroup->is_group_admin(\n                    $group_id,\n                    api_get_user_id()\n                )\n            );\n        } else {\n            $template->assign('show_group', false);\n            $template->assign('show_user', true);\n            $template->assign(\n                'user_image',\n                [\n                    'big' => UserManager::getUserPicture(\n                        $user_id,\n                        USER_IMAGE_SIZE_BIG\n                    ),\n                    'normal' => UserManager::getUserPicture(\n                        $user_id,\n                        USER_IMAGE_SIZE_MEDIUM\n                    ),\n                ]\n            );\n        }\n\n        return $template->fetch($template->get_template('social/avatar_block.tpl'));\n    }\n\n    /**\n     * Shows the right menu of the Social Network tool.\n     *\n     * @param string $show                       highlight link possible values:\n     *                                           group_add,\n     *                                           home,\n     *                                           messages,\n     *                                           messages_inbox,\n     *                                           messages_compose ,\n     *                                           messages_outbox,\n     *                                           invitations,\n     *                                           shared_profile,\n     *                                           friends,\n     *                                           groups search\n     * @param int    $group_id                   group id\n     * @param int    $user_id                    user id\n     * @param bool   $show_full_profile          show profile or not (show or hide the user image/information)\n     * @param bool   $show_delete_account_button\n     */\n    public static function show_social_menu(\n        $show = '',\n        $group_id = 0,\n        $user_id = 0,\n        $show_full_profile = false,\n        $show_delete_account_button = false\n    ) {\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n        $settingExtendedProfileEnabled = api_get_setting('extended_profile');\n\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n\n        $myExtendedProfileEdit = '';\n        if ($user_id == api_get_user_id()) {\n            $myExtendedProfileEdit .= '<a href=\"/main/auth/profile.php?type=extended#openarea\" style=\"display:initial\">'.\n                Display::return_icon('edit.png', get_lang('EditExtendProfile'), '', 16).'</a>';\n        }\n        $usergroup = new UserGroup();\n        $show_groups = [\n            'groups',\n            'group_messages',\n            'messages_list',\n            'group_add',\n            'mygroups',\n            'group_edit',\n            'member_list',\n            'invite_friends',\n            'waiting_list',\n            'browse_groups',\n        ];\n\n        // get count unread message and total invitations\n        $count_unread_message = MessageManager::getCountNewMessagesFromDB(api_get_user_id());\n        $count_unread_message = !empty($count_unread_message) ? Display::badge($count_unread_message) : null;\n\n        $number_of_new_messages_of_friend = self::get_message_number_invitation_by_user_id(api_get_user_id());\n        $group_pending_invitations = $usergroup->get_groups_by_user(\n            api_get_user_id(),\n            GROUP_USER_PERMISSION_PENDING_INVITATION,\n            false\n        );\n        $group_pending_invitations = count($group_pending_invitations);\n        $total_invitations = $number_of_new_messages_of_friend + $group_pending_invitations;\n        $total_invitations = (!empty($total_invitations) ? Display::badge($total_invitations) : '');\n\n        $filesIcon = Display::return_icon('sn-files.png', get_lang('MyFiles'), null, ICON_SIZE_SMALL);\n        $friendsIcon = Display::return_icon('sn-friends.png', get_lang('Friends'), null, ICON_SIZE_SMALL);\n        $groupsIcon = Display::return_icon('sn-groups.png', get_lang('SocialGroups'), null, ICON_SIZE_SMALL);\n        $homeIcon = Display::return_icon('sn-home.png', get_lang('Home'), null, ICON_SIZE_SMALL);\n        $invitationsIcon = Display::return_icon('sn-invitations.png', get_lang('Invitations'), null, ICON_SIZE_SMALL);\n        $messagesIcon = Display::return_icon('sn-message.png', get_lang('Messages'), null, ICON_SIZE_SMALL);\n        $sharedProfileIcon = Display::return_icon('sn-profile.png', get_lang('ViewMySharedProfile'));\n        $searchIcon = Display::return_icon('sn-search.png', get_lang('Search'), null, ICON_SIZE_SMALL);\n        $portfolioIcon = Display::return_icon('wiki_task.png', get_lang('Portfolio'));\n        $personalDataIcon = Display::return_icon('database.png', get_lang('PersonalDataReport'));\n        $messageSocialIcon = Display::return_icon('promoted_message.png', get_lang('PromotedMessages'));\n        $portfolio = Display::return_icon('portfolio.png', get_lang('Portfolio '));\n\n        $allowPortfolioTool = api_get_configuration_value('allow_portfolio_tool');\n\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n        $groupUrl = api_get_path(WEB_CODE_PATH).'social/groups.php';\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n            if (!empty($courseInfo)) {\n                $groupUrl = api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$courseInfo['code'];\n            }\n        }\n\n        $html = '';\n        $active = null;\n        if (!in_array(\n            $show,\n            ['shared_profile', 'groups', 'group_edit', 'member_list', 'waiting_list', 'invite_friends']\n        )) {\n            $links = '<ul class=\"nav nav-pills nav-stacked\">';\n            $active = $show === 'home' ? 'active' : null;\n            $links .= '\n                <li class=\"home-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/home.php\">\n                        '.$homeIcon.' '.get_lang('Home').'\n                    </a>\n                </li>';\n            $active = $show === 'messages' ? 'active' : null;\n            $links .= '\n                <li class=\"messages-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'messages/inbox.php\">\n                        '.$messagesIcon.' '.get_lang('Messages').$count_unread_message.'\n                    </a>\n                </li>';\n            if ($allowPortfolioTool) {\n                $links .= '\n                    <li class=\"portoflio-icon '.($show === 'portfolio' ? 'active' : '').'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php\">\n                            '.$portfolioIcon.' '.get_lang('Portfolio').'\n                        </a>\n                    </li>\n                ';\n            } else {\n                if ($settingExtendedProfileEnabled == true) {\n                    $active = $show === 'portfolio' ? 'active' : null;\n                    $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                        '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                }\n            }\n\n            // Invitations\n            $active = $show === 'invitations' ? 'active' : null;\n            $links .= '\n                <li class=\"invitations-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">\n                        '.$invitationsIcon.' '.get_lang('Invitations').$total_invitations.'\n                    </a>\n                </li>';\n\n            // Shared profile and groups\n            $active = $show === 'shared_profile' ? 'active' : null;\n            $links .= '\n                <li class=\"shared-profile-icon'.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php\">\n                        '.$sharedProfileIcon.' '.get_lang('ViewMySharedProfile').'\n                    </a>\n                </li>';\n            $active = $show === 'friends' ? 'active' : null;\n            $links .= '\n                <li class=\"friends-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/friends.php\">\n                        '.$friendsIcon.' '.get_lang('Friends').'\n                    </a>\n                </li>';\n            $active = $show === 'browse_groups' ? 'active' : null;\n            $links .= '\n                <li class=\"browse-groups-icon '.$active.'\">\n                    <a href=\"'.$groupUrl.'\">\n                        '.$groupsIcon.' '.get_lang('SocialGroups').'\n                    </a>\n                </li>';\n\n            // Search users\n            $active = $show === 'search' ? 'active' : null;\n            $links .= '\n                <li class=\"search-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/search.php\">\n                        '.$searchIcon.' '.get_lang('Search').'\n                    </a>\n                </li>';\n\n            // My files\n            $active = $show === 'myfiles' ? 'active' : null;\n\n            $myFiles = '\n                <li class=\"myfiles-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/myfiles.php\">\n                        '.$filesIcon.' '.get_lang('MyFiles').'\n                    </a>\n                </li>';\n\n            if (api_get_setting('allow_my_files') === 'false') {\n                $myFiles = '';\n            }\n            $links .= $myFiles;\n\n            if (!api_get_configuration_value('disable_gdpr')) {\n                $active = $show === 'personal-data' ? 'active' : null;\n                $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/personal_data.php\">\n                            '.$personalDataIcon.' '.get_lang('PersonalDataReport').'\n                        </a>\n                    </li>';\n                $links .= $personalData;\n            }\n\n            if (api_is_platform_admin()) {\n                $active = $show === 'promoted_messages' ? 'active' : null;\n                $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/promoted_messages.php\">\n                            '.$messageSocialIcon.' '.get_lang('PromotedMessages').'\n                        </a>\n                    </li>';\n                $links .= $personalData;\n            }\n            $links .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialNetwork'),\n                $links,\n                'social-network-menu',\n                null,\n                'sn-sidebar',\n                'sn-sidebar-collapse'\n            );\n        }\n\n        if (!empty($group_id) && in_array($show, $show_groups)) {\n            $html .= $usergroup->show_group_column_information(\n                $group_id,\n                api_get_user_id(),\n                $show\n            );\n        }\n\n        if ($show === 'shared_profile') {\n            $links = '<ul class=\"nav nav-pills nav-stacked\">';\n            // My own profile\n            if ($show_full_profile && $user_id == api_get_user_id()) {\n                $links .= '\n                    <li class=\"home-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/home.php\">\n                            '.$homeIcon.' '.get_lang('Home').'\n                        </a>\n                    </li>\n                    <li class=\"messages-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'messages/inbox.php\">\n                            '.$messagesIcon.' '.get_lang('Messages').$count_unread_message.'\n                        </a>\n                    </li>';\n                if ($allowPortfolioTool) {\n                    $links .= '\n                        <li class=\"portoflio-icon '.($show == 'portfolio' ? 'active' : '').'\">\n                            <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php\">\n                                '.$portfolioIcon.' '.get_lang('Portfolio').'\n                            </a>\n                        </li>\n                    ';\n                } else {\n                    if ($settingExtendedProfileEnabled == true) {\n                        $active = $show === 'portfolio' ? 'active' : null;\n                        $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                      '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                    }\n                }\n                $active = $show === 'invitations' ? 'active' : null;\n                $links .= '\n                    <li class=\"invitations-icon'.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">\n                            '.$invitationsIcon.' '.get_lang('Invitations').$total_invitations.'\n                        </a>\n                    </li>';\n\n                $links .= '\n                    <li class=\"shared-profile-icon active\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php\">\n                            '.$sharedProfileIcon.' '.get_lang('ViewMySharedProfile').'\n                        </a>\n                    </li>\n                    <li class=\"friends-icon\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/friends.php\">\n                            '.$friendsIcon.' '.get_lang('Friends').'\n                        </a>\n                    </li>';\n\n                $links .= '<li class=\"browse-groups-icon\">\n                        <a href=\"'.$groupUrl.'\">\n                            '.$groupsIcon.' '.get_lang('SocialGroups').'\n                        </a>\n                        </li>';\n\n                $active = $show == 'search' ? 'active' : null;\n                $links .= '\n                    <li class=\"search-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/search.php\">\n                            '.$searchIcon.' '.get_lang('Search').'\n                        </a>\n                    </li>';\n                $active = $show == 'myfiles' ? 'active' : null;\n\n                $myFiles = '\n                    <li class=\"myfiles-icon '.$active.'\">\n                     <a href=\"'.api_get_path(WEB_CODE_PATH).'social/myfiles.php\">\n                            '.$filesIcon.' '.get_lang('MyFiles').'\n                        </a>\n                    </li>';\n\n                if (api_get_setting('allow_my_files') === 'false') {\n                    $myFiles = '';\n                }\n                $links .= $myFiles;\n\n                if (!api_get_configuration_value('disable_gdpr')) {\n                    $active = $show == 'personal-data' ? 'active' : null;\n                    $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/personal_data.php\">\n                            '.$personalDataIcon.' '.get_lang('PersonalDataReport').'\n                        </a>\n                    </li>';\n                    $links .= $personalData;\n                    $links .= '</ul>';\n                }\n            }\n\n            // My friend profile.\n            if ($user_id != api_get_user_id()) {\n                $sendMessageText = get_lang('SendMessage');\n                $sendMessageIcon = Display::return_icon(\n                    'new-message.png',\n                    $sendMessageText\n                );\n                $sendMessageUrl = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?'.http_build_query([\n                    'a' => 'get_user_popup',\n                    'user_id' => $user_id,\n                ]);\n\n                $links .= '<li>';\n                $links .= Display::url(\n                    \"$sendMessageIcon $sendMessageText\",\n                    $sendMessageUrl,\n                    [\n                        'class' => 'ajax',\n                        'title' => $sendMessageText,\n                        'data-title' => $sendMessageText,\n                    ]\n                );\n                if ($allowPortfolioTool) {\n                    $links .= '\n                        <li class=\"portoflio-icon '.($show == 'portfolio' ? 'active' : '').'\">\n                            <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php?user='.$user_id.'\">\n                                '.$portfolioIcon.' '.get_lang('Portfolio').'\n                            </a>\n                        </li>\n                    ';\n                } else {\n                    if ($settingExtendedProfileEnabled == true) {\n                        $active = $show === 'portfolio' ? 'active' : null;\n                        $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                        '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                    }\n                }\n            }\n\n            // Check if I already sent an invitation message\n            $invitationSentList = self::get_list_invitation_sent_by_user_id(api_get_user_id());\n\n            if (isset($invitationSentList[$user_id]) && is_array($invitationSentList[$user_id]) &&\n                count($invitationSentList[$user_id]) > 0\n            ) {\n                $links .= '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">'.\n                    Display::return_icon('invitation.png', get_lang('YouAlreadySentAnInvitation'))\n                    .'&nbsp;&nbsp;'.get_lang('YouAlreadySentAnInvitation').'</a></li>';\n            } else {\n                if (!$show_full_profile) {\n                    $links .= '<li>\n                        <a class=\"btn-to-send-invitation\" href=\"#\" data-send-to=\"'.$user_id.'\" title=\"'.get_lang('SendInvitation').'\">'.\n                        Display::return_icon('invitation.png', get_lang('SocialInvitationToFriends')).'&nbsp;'.get_lang('SendInvitation').\n                        '</a></li>';\n                }\n            }\n\n            $links .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialNetwork'),\n                $links,\n                'social-network-menu',\n                null,\n                'sn-sidebar',\n                'sn-sidebar-collapse'\n            );\n\n            if ($show_full_profile && $user_id == api_get_user_id()) {\n                // Announcements\n                $announcements = [];\n                $announcementsByCourse = AnnouncementManager::getAnnoucementCourseTotalByUser($user_id);\n                if (!empty($announcementsByCourse)) {\n                    foreach ($announcementsByCourse as $announcement) {\n                        $url = Display::url(\n                            Display::return_icon(\n                                'announcement.png',\n                                get_lang('Announcements')\n                            ).$announcement['course']['name'].' ('.$announcement['count'].')',\n                            api_get_path(WEB_CODE_PATH).'announcements/announcements.php?cidReq='.$announcement['course']['code']\n                        );\n                        $announcements[] = Display::tag('li', $url);\n                    }\n                }\n\n                if (!empty($announcements)) {\n                    $html .= '<div class=\"social_menu_items\">';\n                    $html .= '<ul>';\n                    foreach ($announcements as $announcement) {\n                        $html .= $announcement;\n                    }\n                    $html .= '</ul>';\n                    $html .= '</div>';\n                }\n            }\n        }\n\n        if ($show_delete_account_button) {\n            $html .= '<div class=\"panel panel-default\"><div class=\"panel-body\">';\n            $html .= '<ul class=\"nav nav-pills nav-stacked\"><li>';\n            $url = api_get_path(WEB_CODE_PATH).'auth/unsubscribe_account.php';\n            $html .= Display::url(\n                Display::return_icon(\n                    'delete.png',\n                    get_lang('Unsubscribe'),\n                    [],\n                    ICON_SIZE_TINY\n                ).get_lang('Unsubscribe'),\n                $url\n            );\n            $html .= '</li></ul>';\n            $html .= '</div></div>';\n        }\n        $html .= '';\n\n        return $html;\n    }\n\n    /**\n     * Displays a sortable table with the list of online users.\n     *\n     * @param array $user_list The list of users to be shown\n     * @param bool  $wrap      Whether we want the function to wrap the spans list in a div or not\n     *\n     * @return string HTML block or null if and ID was defined\n     * @assert (null) === false\n     */\n    public static function display_user_list($user_list, $wrap = true)\n    {\n        $html = '';\n\n        if (isset($_GET['id']) || count($user_list) < 1) {\n            return false;\n        }\n\n        $course_url = '';\n        if (isset($_GET['cidReq']) && strlen($_GET['cidReq']) > 0) {\n            $course_url = '&amp;cidReq='.Security::remove_XSS($_GET['cidReq']);\n        }\n\n        $hide = api_get_configuration_value('hide_complete_name_in_whoisonline');\n        foreach ($user_list as $uid) {\n            $user_info = api_get_user_info($uid, true);\n            $lastname = $user_info['lastname'];\n            $firstname = $user_info['firstname'];\n            $completeName = $firstname.', '.$lastname;\n            $user_rol = $user_info['status'] == 1 ? Display::return_icon('teacher.png', get_lang('Teacher'), null, ICON_SIZE_TINY) : Display::return_icon('user.png', get_lang('Student'), null, ICON_SIZE_TINY);\n            $status_icon_chat = null;\n            if (isset($user_info['user_is_online_in_chat']) && $user_info['user_is_online_in_chat'] == 1) {\n                $status_icon_chat = Display::return_icon('online.png', get_lang('Online'));\n            } else {\n                $status_icon_chat = Display::return_icon('offline.png', get_lang('Offline'));\n            }\n\n            $userPicture = $user_info['avatar'];\n            $officialCode = '';\n            if (api_get_setting('show_official_code_whoisonline') == 'true') {\n                $officialCode .= '<div class=\"items-user-official-code\"><p style=\"min-height: 30px;\" title=\"'.get_lang('OfficialCode').'\">'.$user_info['official_code'].'</p></div>';\n            }\n\n            if ($hide === true) {\n                $completeName = '';\n                $firstname = '';\n                $lastname = '';\n            }\n\n            $img = '<img class=\"img-responsive img-circle\" title=\"'.$completeName.'\" alt=\"'.$completeName.'\" src=\"'.$userPicture.'\">';\n\n            $url = null;\n            // Anonymous users can't have access to the profile\n            if (!api_is_anonymous()) {\n                if (api_get_setting('allow_social_tool') === 'true') {\n                    $url = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$uid.$course_url;\n                } else {\n                    $url = '?id='.$uid.$course_url;\n                }\n            } else {\n                $url = null;\n            }\n            $name = '<a href=\"'.$url.'\">'.$firstname.'<br>'.$lastname.'</a>';\n\n            $html .= '<div class=\"col-xs-6 col-md-2\">\n                        <div class=\"items-user\">\n                            <div class=\"items-user-avatar\"><a href=\"'.$url.'\">'.$img.'</a></div>\n                            <div class=\"items-user-name\">\n                            '.$name.'\n                            </div>\n                            '.$officialCode.'\n                            <div class=\"items-user-status\">'.$status_icon_chat.' '.$user_rol.'</div>\n                        </div>\n                      </div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Displays the information of an individual user.\n     *\n     * @param int $user_id\n     *\n     * @return string\n     */\n    public static function display_individual_user($user_id)\n    {\n        global $interbreadcrumb;\n        $safe_user_id = (int) $user_id;\n        $currentUserId = api_get_user_id();\n\n        $user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = \"SELECT * FROM $user_table WHERE user_id = \".$safe_user_id;\n        $result = Database::query($sql);\n        $html = null;\n        if (Database::num_rows($result) == 1) {\n            $user_object = Database::fetch_object($result);\n            $userInfo = api_get_user_info($user_id);\n            $alt = $userInfo['complete_name'].($currentUserId == $user_id ? '&nbsp;('.get_lang('Me').')' : '');\n            $status = get_status_from_code($user_object->status);\n            $interbreadcrumb[] = ['url' => 'whoisonline.php', 'name' => get_lang('UsersOnLineList')];\n\n            $html .= '<div class =\"thumbnail\">';\n            $fullurl = $userInfo['avatar'];\n\n            $html .= '<img src=\"'.$fullurl.'\" alt=\"'.$alt.'\" />';\n\n            if (!empty($status)) {\n                $html .= '<div class=\"caption\">'.$status.'</div>';\n            }\n            $html .= '</div>';\n\n            if (api_get_setting('show_email_addresses') == 'true') {\n                $html .= Display::encrypted_mailto_link($user_object->email, $user_object->email).'<br />';\n            }\n            //    MY PERSONAL OPEN AREA\n            if ($user_object->openarea) {\n                $html .= Display::page_subheader(get_lang('MyPersonalOpenArea'));\n                $html .= '<p>'.$user_object->openarea.'</p>';\n            }\n            //    MY COMPETENCES\n            if ($user_object->competences) {\n                $html .= Display::page_subheader(get_lang('MyCompetences'));\n                $html .= '<p>'.$user_object->competences.'</p>';\n            }\n            //    MY DIPLOMAS\n            if ($user_object->diplomas) {\n                $html .= Display::page_subheader(get_lang('MyDiplomas'));\n                $html .= '<p>'.$user_object->diplomas.'</p>';\n            }\n            // WHAT I AM ABLE TO TEACH\n            if ($user_object->teach) {\n                $html .= Display::page_subheader(get_lang('MyTeach'));\n                $html .= '<p>'.$user_object->teach.'</p>';\n            }\n            //    MY PRODUCTIONS\n            self::display_productions($user_object->user_id);\n        } else {\n            $html .= '<div class=\"actions-title\">';\n            $html .= get_lang('UsersOnLineList');\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Display productions in who is online.\n     *\n     * @param int $user_id User id\n     */\n    public static function display_productions($user_id)\n    {\n        $webdir_array = UserManager::get_user_picture_path_by_id($user_id, 'web');\n        $sysdir = UserManager::getUserPathById($user_id, 'system');\n        $webdir = UserManager::getUserPathById($user_id, 'web');\n\n        if (!is_dir($sysdir)) {\n            mkdir($sysdir, api_get_permissions_for_new_directories(), true);\n        }\n\n        $productions = UserManager::get_user_productions($user_id);\n\n        if (count($productions) > 0) {\n            echo '<dt><strong>'.get_lang('Productions').'</strong></dt>';\n            echo '<dd><ul>';\n            foreach ($productions as $file) {\n                // Only display direct file links to avoid browsing an empty directory\n                if (is_file($sysdir.$file) && $file != $webdir_array['file']) {\n                    echo '<li><a href=\"'.$webdir.urlencode($file).'\" target=_blank>'.$file.'</a></li>';\n                }\n                // Real productions are under a subdirectory by the User's id\n                if (is_dir($sysdir.$file)) {\n                    $subs = scandir($sysdir.$file);\n                    foreach ($subs as $my => $sub) {\n                        if (substr($sub, 0, 1) != '.' && is_file($sysdir.$file.'/'.$sub)) {\n                            echo '<li><a href=\"'.$webdir.urlencode($file).'/'.urlencode($sub).'\" target=_blank>'.$sub.'</a></li>';\n                        }\n                    }\n                }\n            }\n            echo '</ul></dd>';\n        }\n    }\n\n    /**\n     * @param string $content\n     * @param string $span_count\n     *\n     * @return string\n     */\n    public static function social_wrapper_div($content, $span_count)\n    {\n        $span_count = (int) $span_count;\n        $html = '<div class=\"span'.$span_count.'\">';\n        $html .= '<div class=\"well_border\">';\n        $html .= $content;\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    /**\n     * Dummy function.\n     */\n    public static function get_plugins($place = SOCIAL_CENTER_PLUGIN)\n    {\n        $content = '';\n        switch ($place) {\n            case SOCIAL_CENTER_PLUGIN:\n                $social_plugins = [1, 2];\n                if (is_array($social_plugins) && count($social_plugins) > 0) {\n                    $content .= '<div id=\"social-plugins\">';\n                    foreach ($social_plugins as $plugin) {\n                        $content .= '<div class=\"social-plugin-item\">';\n                        $content .= $plugin;\n                        $content .= '</div>';\n                    }\n                    $content .= '</div>';\n                }\n                break;\n            case SOCIAL_LEFT_PLUGIN:\n                break;\n            case SOCIAL_RIGHT_PLUGIN:\n                break;\n        }\n\n        return $content;\n    }\n\n    /**\n     * Sends a message to someone's wall.\n     *\n     * @param int    $userId         id of author\n     * @param int    $friendId       id where we send the message\n     * @param string $messageContent of the message\n     * @param int    $messageId      id parent\n     * @param string $messageStatus  status type of message\n     *\n     * @return int\n     *\n     * @author Yannick Warnier\n     */\n    public static function sendWallMessage(\n        $userId,\n        $friendId,\n        $messageContent,\n        $messageId = 0,\n        $messageStatus = ''\n    ) {\n        $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n        $userId = (int) $userId;\n        $friendId = (int) $friendId;\n        $messageId = (int) $messageId;\n\n        if (empty($userId) || empty($friendId)) {\n            return 0;\n        }\n\n        // Just in case we replace the and \\n and \\n\\r while saving in the DB\n        $messageContent = str_replace([\"\\n\", \"\\n\\r\"], '<br />', $messageContent);\n        $now = api_get_utc_datetime();\n\n        $attributes = [\n            'user_sender_id' => $userId,\n            'user_receiver_id' => $friendId,\n            'msg_status' => $messageStatus,\n            'send_date' => $now,\n            'title' => '',\n            'content' => $messageContent,\n            'parent_id' => $messageId,\n            'group_id' => 0,\n            'update_date' => $now,\n        ];\n\n        return Database::insert($tblMessage, $attributes);\n    }\n\n    /**\n     * Send File attachment (jpg,png).\n     *\n     * @author Anibal Copitan\n     *\n     * @param int    $userId      id user\n     * @param array  $fileAttach\n     * @param int    $messageId   id message (relation with main message)\n     * @param string $fileComment description attachment file\n     *\n     * @return bool|int\n     */\n    public static function sendWallMessageAttachmentFile(\n        $userId,\n        $fileAttach,\n        $messageId,\n        $fileComment = ''\n    ) {\n        $safeFileName = Database::escape_string($fileAttach['name']);\n\n        $extension = strtolower(substr(strrchr($safeFileName, '.'), 1));\n        $allowedTypes = api_get_supported_image_extensions();\n\n        $allowedTypes[] = 'mp4';\n        $allowedTypes[] = 'webm';\n        $allowedTypes[] = 'ogg';\n\n        if (in_array($extension, $allowedTypes)) {\n            return MessageManager::saveMessageAttachmentFile($fileAttach, $fileComment, $messageId, $userId);\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets all messages from someone's wall (within specific limits).\n     *\n     * @param int        $userId     id of wall shown\n     * @param int|string $parentId   id message (Post main)\n     * @param int|array  $groupId\n     * @param int|array  $friendId\n     * @param string     $startDate  Date from which we want to show the messages, in UTC time\n     * @param int        $start      Limit for the number of parent messages we want to show\n     * @param int        $length     Wall message query offset\n     * @param bool       $getCount\n     * @param array      $threadList\n     *\n     * @return array|int\n     *\n     * @author Yannick Warnier\n     */\n    public static function getWallMessages(\n        $userId,\n        $parentId = 0,\n        $groupId = 0,\n        $friendId = 0,\n        $startDate = '',\n        $start = 0,\n        $length = 10,\n        $getCount = false,\n        $threadList = []\n    ) {\n        $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n\n        $parentId = (int) $parentId;\n        $userId = (int) $userId;\n        $start = (int) $start;\n        $length = (int) $length;\n\n        $select = \" SELECT\n                    id,\n                    user_sender_id,\n                    user_receiver_id,\n                    send_date,\n                    content,\n                    parent_id,\n                    msg_status,\n                    group_id,\n                    '' as forum_id,\n                    '' as thread_id,\n                    '' as c_id\n                  \";\n\n        if ($getCount) {\n            $select = ' SELECT count(id) as count_items ';\n        }\n\n        $sqlBase = \"$select FROM $tblMessage m WHERE \";\n        $sql = [];\n        $sql[1] = $sqlBase.\"msg_status <> \".MESSAGE_STATUS_WALL_DELETE.' AND ';\n\n        // Get my own posts\n        $userReceiverCondition = ' (\n            user_receiver_id = '.$userId.' AND\n            msg_status IN ('.MESSAGE_STATUS_WALL_POST.', '.MESSAGE_STATUS_WALL.') AND\n            parent_id = '.$parentId.'\n        )';\n\n        $sql[1] .= $userReceiverCondition;\n\n        $sql[2] = $sqlBase.' msg_status = '.MESSAGE_STATUS_PROMOTED.' ';\n\n        // Get my group posts\n        $groupCondition = '';\n        if (!empty($groupId)) {\n            if (is_array($groupId)) {\n                $groupId = array_map('intval', $groupId);\n                $groupId = implode(\",\", $groupId);\n                $groupCondition = \" ( group_id IN ($groupId) \";\n            } else {\n                $groupId = (int) $groupId;\n                $groupCondition = \" ( group_id = $groupId \";\n            }\n            $groupCondition .= ' AND (msg_status = '.MESSAGE_STATUS_NEW.' OR msg_status = '.MESSAGE_STATUS_UNREAD.')) ';\n        }\n        if (!empty($groupCondition)) {\n            $sql[3] = $sqlBase.$groupCondition;\n        }\n\n        // Get my friend posts\n        $friendCondition = '';\n        if (!empty($friendId)) {\n            if (is_array($friendId)) {\n                $friendId = array_map('intval', $friendId);\n                $friendId = implode(\",\", $friendId);\n                $friendCondition = \" ( user_receiver_id IN ($friendId) \";\n            } else {\n                $friendId = (int) $friendId;\n                $friendCondition = \" ( user_receiver_id = $friendId \";\n            }\n            $friendCondition .= ' AND msg_status = '.MESSAGE_STATUS_WALL_POST.' AND parent_id = 0) ';\n        }\n        if (!empty($friendCondition)) {\n            $sql[4] = $sqlBase.$friendCondition;\n        }\n\n        if (!empty($threadList)) {\n            if ($getCount) {\n                $select = ' SELECT count(iid) count_items ';\n            } else {\n                $select = \" SELECT\n                                iid as id,\n                                poster_id as user_sender_id,\n                                '' as user_receiver_id,\n                                post_date as send_date,\n                                post_text as content,\n                                '' as parent_id,\n                                \".MESSAGE_STATUS_FORUM.\" as msg_status,\n                                '' as group_id,\n                                forum_id,\n                                thread_id,\n                                c_id\n                            \";\n            }\n\n            $threadList = array_map('intval', $threadList);\n            $threadList = implode(\"','\", $threadList);\n            $condition = \" thread_id IN ('$threadList') \";\n            $sql[5] = \"$select\n                    FROM c_forum_post\n                    WHERE $condition\n                \";\n        }\n\n        if ($getCount) {\n            $count = 0;\n            foreach ($sql as $oneQuery) {\n                if (!empty($oneQuery)) {\n                    $res = Database::query($oneQuery);\n                    $row = Database::fetch_array($res);\n                    $count += (int) $row['count_items'];\n                }\n            }\n\n            return $count;\n        }\n\n        $sqlOrder = ' ORDER BY send_date DESC ';\n        $sqlLimit = \" LIMIT $start, $length \";\n        $messages = [];\n        foreach ($sql as $index => $oneQuery) {\n            if ($index === 5) {\n                // Exception only for the forum query above (field name change)\n                $oneQuery .= ' ORDER BY post_date DESC '.$sqlLimit;\n            } else {\n                $oneQuery .= $sqlOrder.$sqlLimit;\n            }\n            $res = Database::query($oneQuery);\n            $em = Database::getManager();\n            if (Database::num_rows($res) > 0) {\n                $repo = $em->getRepository('ChamiloCourseBundle:CForumPost');\n                $repoThread = $em->getRepository('ChamiloCourseBundle:CForumThread');\n                $groups = [];\n                $userGroup = new UserGroup();\n                $urlGroup = api_get_path(WEB_CODE_PATH).'social/group_view.php?id=';\n                while ($row = Database::fetch_array($res, 'ASSOC')) {\n                    $row['group_info'] = [];\n                    if (!empty($row['group_id'])) {\n                        if (!in_array($row['group_id'], $groups)) {\n                            $group = $userGroup->get($row['group_id']);\n                            $group['url'] = $urlGroup.$group['id'];\n                            $groups[$row['group_id']] = $group;\n                            $row['group_info'] = $group;\n                        } else {\n                            $row['group_info'] = $groups[$row['group_id']];\n                        }\n                    }\n\n                    // Forums\n                    $row['post_title'] = '';\n                    $row['forum_title'] = '';\n                    $row['thread_url'] = '';\n                    if ($row['msg_status'] == MESSAGE_STATUS_FORUM) {\n                        /** @var CForumPost $post */\n                        $post = $repo->find($row['id']);\n                        /** @var CForumThread $thread */\n                        $thread = $repoThread->find($row['thread_id']);\n                        if ($post && $thread) {\n                            $courseInfo = api_get_course_info_by_id($post->getCId());\n                            $row['post_title'] = $post->getForumId();\n                            $row['forum_title'] = $thread->getThreadTitle();\n                            $row['thread_url'] = api_get_path(WEB_CODE_PATH).'forum/viewthread.php?'.http_build_query([\n                                    'cidReq' => $courseInfo['code'],\n                                    'forum' => $post->getForumId(),\n                                    'thread' => $post->getThreadId(),\n                                    'post_id' => $post->getIid(),\n                                ]).'#post_id_'.$post->getIid();\n                        }\n                    }\n\n                    $messages[$row['id']] = $row;\n                }\n            }\n        }\n        // Reordering messages by ID (reverse order) is enough to have the\n        // latest first, as there is currently no option to edit messages\n        // afterwards\n        krsort($messages);\n\n        return $messages;\n    }\n\n    /**\n     * Gets all messages from someone's wall (within specific limits), formatted.\n     *\n     * @param int    $userId      USER ID of the person's wall\n     * @param array  $messageInfo\n     * @param string $start       Start date (from when we want the messages until today)\n     * @param int    $limit       Limit to the number of messages we want\n     * @param int    $offset      Wall messages offset\n     *\n     * @return string HTML formatted string to show messages\n     */\n    public static function getWallPostComments(\n        $userId,\n        $messageInfo,\n        $start = null,\n        $limit = 10,\n        $offset = 0\n    ) {\n        $messageId = $messageInfo['id'];\n        $messages = MessageManager::getMessagesByParent($messageInfo['id'], 0, $offset, $limit);\n        $formattedList = '<div class=\"sub-mediapost row\">';\n        $users = [];\n\n        // The messages are ordered by date descendant, for comments we need ascendant\n        krsort($messages);\n        foreach ($messages as $message) {\n            $userIdLoop = $message['user_sender_id'];\n            if (!isset($users[$userIdLoop])) {\n                $users[$userIdLoop] = api_get_user_info($userIdLoop);\n            }\n            $media = self::processPostComment($message, $users);\n            $formattedList .= $media;\n        }\n\n        $formattedList .= '</div>';\n        $formattedList .= '<div class=\"mediapost-form row\">';\n        $formattedList .= '<form class=\"form-horizontal\" id=\"form_comment_'.$messageId.'\" name=\"post_comment\" method=\"POST\">\n                <div class=\"col-sm-9\">\n                <label for=\"comment\" class=\"hide\">'.get_lang('SocialWriteNewComment').'</label>\n                <input type=\"hidden\" name = \"messageId\" value=\"'.$messageId.'\" />\n                <textarea rows=\"3\" class=\"form-control\" placeholder=\"'.get_lang('SocialWriteNewComment').'\" name=\"comment\" rows=\"1\" ></textarea>\n                </div>\n                <div class=\"col-sm-3 pull-right\">\n                <a onclick=\"submitComment('.$messageId.');\" href=\"javascript:void(0);\" name=\"social_wall_new_msg_submit\" class=\"btn btn-default btn-post\">\n                    <em class=\"fa fa-pencil\"></em> '.get_lang('Post').'\n                </a>\n                </div>\n                </form>';\n        $formattedList .= '</div>';\n\n        return $formattedList;\n    }\n\n    /**\n     * @param array $message\n     * @param array $users\n     *\n     * @return string\n     */\n    public static function processPostComment($message, $users = [])\n    {\n        if (empty($message)) {\n            return false;\n        }\n\n        $date = Display::dateToStringAgoAndLongDate($message['send_date']);\n        $currentUserId = api_get_user_id();\n        $userIdLoop = $message['user_sender_id'];\n        $receiverId = $message['user_receiver_id'];\n\n        if (!isset($users[$userIdLoop])) {\n            $users[$userIdLoop] = api_get_user_info($userIdLoop);\n        }\n\n        $iconStatus = $users[$userIdLoop]['icon_status'];\n        $nameComplete = $users[$userIdLoop]['complete_name'];\n        $url = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$userIdLoop;\n\n        $comment = '<div class=\"rep-post col-md-12\">';\n        $comment .= '<div class=\"col-md-2 col-xs-2 social-post-answers\">';\n        $comment .= '<div class=\"user-image pull-right\">';\n        $comment .= '<a href=\"'.$url.'\">\n                        <img src=\"'.$users[$userIdLoop]['avatar'].'\"\n                        alt=\"'.$users[$userIdLoop]['complete_name'].'\"\n                        class=\"avatar-thumb\">\n                     </a>';\n        $comment .= '</div>';\n        $comment .= '</div>';\n        $comment .= '<div class=\"col-md-7 col-xs-7 social-post-answers\">';\n        $comment .= '<div class=\"user-data\">';\n        $comment .= $iconStatus;\n        $comment .= '<div class=\"username\"><a href=\"'.$url.'\">'.$nameComplete.'</a>\n                        <span>'.Security::remove_XSS($message['content']).'</span>\n                       </div>';\n        $comment .= '<div>'.$date.'</div>';\n        $comment .= '<br />';\n        $comment .= '</div>';\n        $comment .= '</div>';\n\n        $comment .= '<div class=\"col-md-3 col-xs-3 social-post-answers\">';\n        $comment .= '<div class=\"pull-right btn-group btn-group-sm\">';\n\n        $comment .= MessageManager::getLikesButton(\n            $message['id'],\n            $currentUserId\n        );\n\n        $isOwnWall = $currentUserId == $userIdLoop || $currentUserId == $receiverId;\n        if ($isOwnWall) {\n            $comment .= Display::url(\n                    Display::returnFontAwesomeIcon('trash', '', true),\n                'javascript:void(0)',\n                [\n                    'id' => 'message_'.$message['id'],\n                    'title' => get_lang('SocialMessageDelete'),\n                    'onclick' => 'deleteComment('.$message['id'].')',\n                    'class' => 'btn btn-default',\n                ]\n            );\n        }\n        $comment .= '</div>';\n        $comment .= '</div>';\n        $comment .= '</div>';\n\n        return $comment;\n    }\n\n    /**\n     * @param array $message\n     *\n     * @return array\n     */\n    public static function getAttachmentPreviewList($message)\n    {\n        $messageId = $message['id'];\n\n        $list = [];\n\n        if (empty($message['group_id'])) {\n            $files = MessageManager::getAttachmentList($messageId);\n            if ($files) {\n                $downloadUrl = api_get_path(WEB_CODE_PATH).'social/download.php?message_id='.$messageId;\n                foreach ($files as $row_file) {\n                    $url = $downloadUrl.'&attachment_id='.$row_file['id'];\n                    $display = Display::fileHtmlGuesser($row_file['filename'], $url);\n                    $list[] = $display;\n                }\n            }\n        } else {\n            $list = MessageManager::getAttachmentLinkList($messageId, 0);\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param array $message\n     *\n     * @return string\n     */\n    public static function getPostAttachment($message)\n    {\n        $previews = self::getAttachmentPreviewList($message);\n\n        if (empty($previews)) {\n            return '';\n        }\n\n        return implode('', $previews);\n    }\n\n    /**\n     * @param array $messages\n     *\n     * @return array\n     */\n    public static function formatWallMessages($messages)\n    {\n        $data = [];\n        $users = [];\n        foreach ($messages as $key => $message) {\n            $userIdLoop = $message['user_sender_id'];\n            $userFriendIdLoop = $message['user_receiver_id'];\n            if (!isset($users[$userIdLoop])) {\n                $users[$userIdLoop] = api_get_user_info($userIdLoop);\n            }\n\n            if (!isset($users[$userFriendIdLoop])) {\n                $users[$userFriendIdLoop] = api_get_user_info($userFriendIdLoop);\n            }\n\n            $html = self::headerMessagePost(\n                $users[$userIdLoop],\n                $users[$userFriendIdLoop],\n                $message\n            );\n\n            $data[$key] = $message;\n            $data[$key]['html'] = $html;\n        }\n\n        return $data;\n    }\n\n    /**\n     * get html data with OpenGrap passing the URL.\n     *\n     * @param $link url\n     *\n     * @return string data html\n     */\n    public static function readContentWithOpenGraph($link)\n    {\n        if (strpos($link, \"://\") === false && substr($link, 0, 1) != \"/\") {\n            $link = \"http://\".$link;\n        }\n        $graph = OpenGraph::fetch($link);\n        $link = parse_url($link);\n        $host = $link['host'] ? strtoupper($link['host']) : $link['path'];\n        if (!$graph) {\n            return false;\n        }\n        $url = $graph->url;\n        $image = $graph->image;\n        $description = $graph->description;\n        $title = $graph->title;\n        $html = '<div class=\"thumbnail social-thumbnail\">';\n        $html .= empty($image) ? '' : '<a target=\"_blank\" href=\"'.$url.'\">\n                <img class=\"img-responsive social-image\" src=\"'.$image.'\" /></a>';\n        $html .= '<div class=\"social-description\">';\n        $html .= '<a target=\"_blank\" href=\"'.$url.'\"><h5 class=\"social-title\"><b>'.$title.'</b></h5></a>';\n        $html .= empty($description) ? '' : '<span>'.$description.'</span>';\n        $html .= empty($host) ? '' : '<p>'.$host.'</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * verify if Url Exist - Using Curl.\n     *\n     * @param $uri url\n     *\n     * @return bool\n     */\n    public static function verifyUrl($uri)\n    {\n        $curl = curl_init($uri);\n        curl_setopt($curl, CURLOPT_FAILONERROR, true);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 15);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);\n        $response = curl_exec($curl);\n        curl_close($curl);\n        if (!empty($response)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Soft delete a message and his chidren.\n     *\n     * @param int $id id message to delete\n     *\n     * @return bool status query\n     */\n    public static function deleteMessage($id)\n    {\n        $id = (int) $id;\n        $messageInfo = MessageManager::get_message_by_id($id);\n        if (!empty($messageInfo)) {\n            // Delete comments too\n            $messages = MessageManager::getMessagesByParent($id);\n            if (!empty($messages)) {\n                foreach ($messages as $message) {\n                    self::deleteMessage($message['id']);\n                }\n            }\n\n            // Soft delete message\n            $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n            $statusMessage = MESSAGE_STATUS_WALL_DELETE;\n            $sql = \"UPDATE $tblMessage SET msg_status = '$statusMessage' WHERE id = '{$id}' \";\n            Database::query($sql);\n\n            MessageManager::delete_message_attachment_file($id, $messageInfo['user_sender_id']);\n            MessageManager::delete_message_attachment_file($id, $messageInfo['user_receiver_id']);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Generate the social block for a user.\n     *\n     * @param int    $userId            The user id\n     * @param string $groupBlock        Optional. Highlight link possible values:\n     *                                  group_add, home, messages, messages_inbox, messages_compose,\n     *                                  messages_outbox, invitations, shared_profile, friends, groups, search\n     * @param int    $groupId           Optional. Group ID\n     * @param bool   $show_full_profile\n     *\n     * @return string The HTML code with the social block\n     */\n    public static function setSocialUserBlock(\n        Template $template,\n        $userId,\n        $groupBlock = '',\n        $groupId = 0,\n        $show_full_profile = true\n    ) {\n        if (api_get_setting('allow_social_tool') !== 'true') {\n            return '';\n        }\n\n        $currentUserId = api_get_user_id();\n        $userId = (int) $userId;\n        $userRelationType = 0;\n\n        $socialAvatarBlock = self::show_social_avatar_block(\n            $groupBlock,\n            $groupId,\n            $userId\n        );\n\n        $profileEditionLink = null;\n        if ($currentUserId === $userId) {\n            $profileEditionLink = Display::getProfileEditionLink($userId);\n        } else {\n            $userRelationType = self::get_relation_between_contacts($currentUserId, $userId);\n        }\n\n        $options = api_get_configuration_value('profile_fields_visibility');\n        if (isset($options['options'])) {\n            $options = $options['options'];\n        }\n\n        $vCardUserLink = Display::getVCardUserLink($userId);\n        if (isset($options['vcard']) && $options['vcard'] === false) {\n            $vCardUserLink = '';\n        }\n\n        $userInfo = api_get_user_info($userId, true, false, true, true);\n\n        if (isset($options['firstname']) && $options['firstname'] === false) {\n            $userInfo['firstname'] = '';\n        }\n        if (isset($options['lastname']) && $options['lastname'] === false) {\n            $userInfo['lastname'] = '';\n        }\n\n        if (isset($options['email']) && $options['email'] === false) {\n            $userInfo['email'] = '';\n        }\n\n        // Ofaj\n        $hasCertificates = Certificate::getCertificateByUser($userId);\n        $userInfo['has_certificates'] = 0;\n        if (!empty($hasCertificates)) {\n            $userInfo['has_certificates'] = 1;\n        }\n\n        $userInfo['is_admin'] = UserManager::is_admin($userId);\n\n        $languageId = api_get_language_id($userInfo['language']);\n        $languageInfo = api_get_language_info($languageId);\n        if ($languageInfo) {\n            $userInfo['language'] = [\n                'label' => $languageInfo['original_name'],\n                'value' => $languageInfo['english_name'],\n                'code' => $languageInfo['isocode'],\n            ];\n        }\n\n        if (isset($options['language']) && $options['language'] === false) {\n            $userInfo['language'] = '';\n        }\n\n        if (isset($options['photo']) && $options['photo'] === false) {\n            $socialAvatarBlock = '';\n        }\n\n        $extraFieldBlock = self::getExtraFieldBlock($userId, true);\n        $showLanguageFlag = api_get_configuration_value('social_show_language_flag_in_profile');\n\n        $template->assign('user', $userInfo);\n        $template->assign('show_language_flag', $showLanguageFlag);\n        $template->assign('extra_info', $extraFieldBlock);\n        $template->assign('social_avatar_block', $socialAvatarBlock);\n        $template->assign('profile_edition_link', $profileEditionLink);\n        //Added the link to export the vCard to the Template\n\n        //If not friend $show_full_profile is False and the user can't see Email Address and Vcard Download Link\n        if ($show_full_profile) {\n            $template->assign('vcard_user_link', $vCardUserLink);\n        }\n\n        if (api_get_setting('gamification_mode') === '1') {\n            $gamificationPoints = GamificationUtils::getTotalUserPoints(\n                $userId,\n                $userInfo['status']\n            );\n\n            $template->assign('gamification_points', $gamificationPoints);\n        }\n        $chatEnabled = api_is_global_chat_enabled();\n\n        if (isset($options['chat']) && $options['chat'] === false) {\n            $chatEnabled = '';\n        }\n\n        $template->assign('chat_enabled', $chatEnabled);\n        $template->assign('user_relation', $userRelationType);\n        $template->assign('user_relation_type_friend', USER_RELATION_TYPE_FRIEND);\n        $template->assign('show_full_profile', $show_full_profile);\n\n        $templateName = $template->get_template('social/user_block.tpl');\n\n        if (in_array($groupBlock, ['groups', 'group_edit', 'member_list'])) {\n            $templateName = $template->get_template('social/group_block.tpl');\n        }\n\n        $template->assign('social_avatar_block', $template->fetch($templateName));\n    }\n\n    /**\n     * @param int $user_id\n     * @param $link_shared\n     * @param bool $showLinkToChat\n     *\n     * @return string\n     */\n    public static function listMyFriendsBlock($user_id, $link_shared = '', $showLinkToChat = false)\n    {\n        //SOCIALGOODFRIEND , USER_RELATION_TYPE_FRIEND, USER_RELATION_TYPE_PARENT\n        $friends = self::get_friends($user_id, USER_RELATION_TYPE_FRIEND);\n        $numberFriends = count($friends);\n        $friendHtml = '';\n\n        if (!empty($numberFriends)) {\n            $friendHtml .= '<div class=\"list-group contact-list\">';\n            $j = 1;\n\n            usort(\n                $friends,\n                function ($a, $b) {\n                    return strcmp($b['user_info']['user_is_online_in_chat'], $a['user_info']['user_is_online_in_chat']);\n                }\n            );\n\n            foreach ($friends as $friend) {\n                if ($j > $numberFriends) {\n                    break;\n                }\n                $name_user = api_get_person_name($friend['firstName'], $friend['lastName']);\n                $user_info_friend = api_get_user_info($friend['friend_user_id'], true);\n\n                $statusIcon = Display::return_icon('statusoffline.png', get_lang('Offline'));\n                $status = 0;\n                if (!empty($user_info_friend['user_is_online_in_chat'])) {\n                    $statusIcon = Display::return_icon('statusonline.png', get_lang('Online'));\n                    $status = 1;\n                }\n\n                $friendAvatarMedium = UserManager::getUserPicture(\n                    $friend['friend_user_id'],\n                    USER_IMAGE_SIZE_MEDIUM\n                );\n                $friendAvatarSmall = UserManager::getUserPicture(\n                    $friend['friend_user_id'],\n                    USER_IMAGE_SIZE_SMALL\n                );\n                $friend_avatar = '<img src=\"'.$friendAvatarMedium.'\" id=\"imgfriend_'.$friend['friend_user_id'].'\" title=\"'.$name_user.'\" class=\"user-image\"/>';\n\n                $relation = self::get_relation_between_contacts(\n                    $friend['friend_user_id'],\n                    api_get_user_id()\n                );\n\n                if ($showLinkToChat) {\n                    $friendHtml .= '<a onclick=\"javascript:chatWith(\\''.$friend['friend_user_id'].'\\', \\''.$name_user.'\\', \\''.$status.'\\',\\''.$friendAvatarSmall.'\\')\" href=\"javascript:void(0);\" class=\"list-group-item\">';\n                    $friendHtml .= $friend_avatar.' <span class=\"username\">'.$name_user.'</span>';\n                    $friendHtml .= '<span class=\"status\">'.$statusIcon.'</span>';\n                } else {\n                    $link_shared = empty($link_shared) ? '' : '&'.$link_shared;\n                    $friendHtml .= '<a href=\"profile.php?'.'u='.$friend['friend_user_id'].$link_shared.'\" class=\"list-group-item\">';\n                    $friendHtml .= $friend_avatar.' <span class=\"username\">'.$name_user.'</span>';\n                    $friendHtml .= '<span class=\"status\">'.$statusIcon.'</span>';\n                }\n\n                $friendHtml .= '</a>';\n\n                $j++;\n            }\n            $friendHtml .= '</div>';\n        } else {\n            $friendHtml = Display::return_message(get_lang('NoFriendsInYourContactList'), 'warning');\n        }\n\n        return $friendHtml;\n    }\n\n    /**\n     * @return string Get the JS code necessary for social wall to load open graph from URLs.\n     */\n    public static function getScriptToGetOpenGraph()\n    {\n        return '<script>\n            $(function() {\n                $(\"[name=\\'social_wall_new_msg_main\\']\").on(\"paste\", function(e) {\n                    $.ajax({\n                        contentType: \"application/x-www-form-urlencoded\",\n                        beforeSend: function() {\n                            $(\"[name=\\'wall_post_button\\']\").prop( \"disabled\", true );\n                            $(\".panel-preview\").hide();\n                            $(\".spinner\").html(\"'\n                                .'<div class=\\'text-center\\'>'\n                                .'<em class=\\'fa fa-spinner fa-pulse fa-1x\\'></em>'\n                                .'<p>'.get_lang('Loading').' '.get_lang('Preview').'</p>'\n                                .'</div>'\n                            .'\");\n                        },\n                        type: \"POST\",\n                        url: \"'.api_get_path(WEB_AJAX_PATH).'social.ajax.php?a=read_url_with_open_graph\",\n                        data: \"social_wall_new_msg_main=\" + e.originalEvent.clipboardData.getData(\"text\"),\n                        success: function(response) {\n                            $(\"[name=\\'wall_post_button\\']\").prop(\"disabled\", false);\n                            if (!response == false) {\n                                $(\".spinner\").html(\"\");\n                                $(\".panel-preview\").show();\n                                $(\".url_preview\").html(response);\n                                $(\"[name=\\'url_content\\']\").val(response);\n                                $(\".url_preview img\").addClass(\"img-responsive\");\n                            } else {\n                                $(\".spinner\").html(\"\");\n                            }\n                        }\n                    });\n                });\n            });\n        </script>';\n    }\n\n    /**\n     * @param string $urlForm\n     *\n     * @return string\n     */\n    public static function getWallForm($urlForm)\n    {\n        $userId = isset($_GET['u']) ? '?u='.intval($_GET['u']) : '';\n        $form = new FormValidator(\n            'social_wall_main',\n            'post',\n            $urlForm.$userId,\n            null,\n            ['enctype' => 'multipart/form-data'],\n            FormValidator::LAYOUT_HORIZONTAL\n        );\n\n        $socialWallPlaceholder = isset($_GET['u']) ? get_lang('SocialWallWriteNewPostToFriend') : get_lang(\n            'SocialWallWhatAreYouThinkingAbout'\n        );\n\n        $form->addTextarea(\n            'social_wall_new_msg_main',\n            null,\n            [\n                'placeholder' => $socialWallPlaceholder,\n                'cols-size' => [1, 12, 1],\n                'aria-label' => $socialWallPlaceholder,\n            ]\n        );\n        $form->addHtml('<div class=\"form-group\">');\n        $form->addHtml('<div class=\"col-sm-6\">');\n        $form->addFile('picture', get_lang('UploadFile'), ['custom' => true]);\n        $form->addHtml('</div>');\n        $form->addHtml('<div class=\"col-sm-6 \"><div class=\"pull-right\">');\n        $form->addButtonSend(\n            get_lang('Post'),\n            'wall_post_button',\n            false,\n            [\n                'cols-size' => [1, 10, 1],\n                'custom' => true,\n            ]\n        );\n        $form->addHtml('</div></div>');\n        $form->addHtml('</div>');\n        $form->addHidden('url_content', '');\n\n        return Display::panel($form->returnForm(), get_lang('SocialWall'));\n    }\n\n    /**\n     * Show middle section for Portfolio extended.\n     * Must be active on main/admin/settings.php?category=User into extended_profile.\n     *\n     * @param string $urlForm\n     *\n     * @return string\n     */\n    public static function getWallFormPortfolio($urlForm)\n    {\n        $userId = isset($_GET['u']) ? (int) $_GET['u'] : 0;\n        $userId = $userId !== 0 ? $userId : api_get_user_id();\n        $user_info = api_get_user_info($userId);\n        $friend = true;\n        $editPorfolioLink = '';\n        if ($userId != api_get_user_id()) {\n            $friend = self::get_relation_between_contacts(api_get_user_id(), $userId);\n        } else {\n            $editPorfolioLink .= \"<div class=\\\"pull-right\\\" style='margin-top: -5px'>\".\n                '<a href=\"/main/auth/profile.php?type=extended#openarea\" class=\"btn btn-default btn-sm btn-social-edit\">'.\n                \"<i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\".\n                '</a>'.\n                \"</div>\";\n        }\n        if ($friend == 0) {\n            /* if has not relation, get current user */\n            $userId = api_get_user_id();\n            $user_info = api_get_user_info($userId);\n        }\n        // Images uploaded by course\n        $more_info = '';\n\n        // Productions\n        $production_list = UserManager::build_production_list($userId);\n\n        $form = new FormValidator(\n            'social_wall_main',\n            'post',\n            $urlForm.$userId,\n            null,\n            ['enctype' => 'multipart/form-data'],\n            FormValidator::LAYOUT_HORIZONTAL\n        );\n\n        $socialWallPlaceholder = isset($_GET['u']) ? get_lang('SocialWallWriteNewPostToFriend') : get_lang(\n            'SocialWallWhatAreYouThinkingAbout'\n        );\n\n        if (!empty($user_info['competences']) || !empty($user_info['diplomas'])\n            || !empty($user_info['openarea']) || !empty($user_info['teach'])) {\n            // $more_info .= '<div><h3>'.get_lang('MoreInformation').'</h3></div>';\n            //    MY PERSONAL OPEN AREA\n            if (!empty($user_info['openarea'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyPersonalOpenArea').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['openarea'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY COMPETENCES\n            if (!empty($user_info['competences'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyCompetences').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['competences'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY DIPLOMAS\n            if (!empty($user_info['diplomas'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyDiplomas').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['diplomas'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY PRODUCTIONS\n            if (!empty($production_list)) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyProductions').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$production_list.'</div>';\n                $more_info .= '<br />';\n            }\n            // WHAT I AM ABLE TO TEACH\n            if (!empty($user_info['teach'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyTeach').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['teach'].'</div>';\n                $more_info .= '<br />';\n            }\n        }\n\n        $form->addTextarea(\n            'social_wall_new_msg_main',\n            null,\n            [\n                'placeholder' => $socialWallPlaceholder,\n                'cols-size' => [1, 12, 1],\n                'aria-label' => $socialWallPlaceholder,\n            ]\n        );\n        $form->addHtml('<div class=\"form-group\">');\n        $form->addHtml('<div class=\"col-sm-6\">');\n        $form->addFile('picture', get_lang('UploadFile'), ['custom' => true]);\n        $form->addHtml('</div>');\n        $form->addHtml('<div class=\"col-sm-6 \"><div class=\"pull-right\">');\n        $form->addButtonSend(\n            get_lang('Post'),\n            'wall_post_button',\n            false,\n            [\n                'cols-size' => [1, 10, 1],\n                'custom' => true,\n            ]\n        );\n        $form->addHtml('</div></div>');\n        $form->addHtml('</div>');\n        $form->addHidden('url_content', '');\n\n        return Display::panel($more_info, get_lang('Portfolio').$editPorfolioLink);\n    }\n\n    /**\n     * @param int   $userId\n     * @param int   $start\n     * @param int   $length\n     * @param array $threadList\n     *\n     * @return array\n     */\n    public static function getMyWallMessages($userId, $start = 0, $length = 10, $threadList = [])\n    {\n        $userGroup = new UserGroup();\n        $groups = $userGroup->get_groups_by_user($userId, [GROUP_USER_PERMISSION_READER, GROUP_USER_PERMISSION_ADMIN]);\n        $groupList = [];\n        if (!empty($groups)) {\n            $groupList = array_column($groups, 'id');\n        }\n\n        $friends = self::get_friends($userId, USER_RELATION_TYPE_FRIEND);\n        $friendList = [];\n        if (!empty($friends)) {\n            $friendList = array_column($friends, 'friend_user_id');\n        }\n\n        $messages = self::getWallMessages(\n            $userId,\n            0,\n            $groupList,\n            $friendList,\n            '',\n            $start,\n            $length,\n            false,\n            $threadList\n        );\n\n        $countPost = self::getCountWallMessagesByUser($userId, $groupList, $friendList, $threadList);\n        $messages = self::formatWallMessages($messages);\n\n        $html = '';\n        foreach ($messages as $message) {\n            $post = $message['html'];\n            $comments = '';\n            if (in_array($message['msg_status'], [MESSAGE_STATUS_WALL_POST, MESSAGE_STATUS_PROMOTED])) {\n                $comments = self::getWallPostComments($userId, $message);\n            }\n\n            $html .= self::wrapPost($message, $post.$comments);\n        }\n\n        return [\n            'posts' => $html,\n            'count' => $countPost,\n        ];\n    }\n\n    /**\n     * @param string $message\n     * @param string $content\n     *\n     * @return string\n     */\n    public static function wrapPost($message, $content)\n    {\n        $class = '';\n        if ($message['msg_status'] === MESSAGE_STATUS_PROMOTED) {\n            $class = 'promoted_post';\n        }\n\n        return Display::panel($content, '',\n            '',\n            'default',\n            '',\n            'post_'.$message['id'],\n            null,\n            $class\n        );\n    }\n\n    /**\n     * @param int   $userId\n     * @param array $groupList\n     * @param array $friendList\n     * @param array $threadList\n     *\n     * @return int\n     */\n    public static function getCountWallMessagesByUser($userId, $groupList = [], $friendList = [], $threadList = [])\n    {\n        return self::getWallMessages(\n            $userId,\n            0,\n            $groupList,\n            $friendList,\n            '',\n            0,\n            0,\n            true,\n            $threadList\n        );\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getWallMessagesByUser($userId)\n    {\n        $messages = self::getWallMessages($userId);\n        $messages = self::formatWallMessages($messages);\n\n        $html = '';\n        foreach ($messages as $message) {\n            $post = $message['html'];\n            $comments = self::getWallPostComments($userId, $message);\n            $html .= self::wrapPost($message, $post.$comments);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Get HTML code block for user skills.\n     *\n     * @param int    $userId      The user ID\n     * @param string $orientation\n     *\n     * @return string\n     */\n    public static function getSkillBlock($userId, $orientation = 'horizontal')\n    {\n        if (Skill::isAllowed($userId, false) === false) {\n            return '';\n        }\n\n        $skill = new Skill();\n        $ranking = $skill->getUserSkillRanking($userId);\n\n        $template = new Template(null, false, false, false, false, false);\n        $template->assign('ranking', $ranking);\n        $template->assign('orientation', $orientation);\n        $template->assign('skills', $skill->getUserSkillsTable($userId, 0, 0, false)['skills']);\n        $template->assign('user_id', $userId);\n        $template->assign('show_skills_report_link', api_is_student() || api_is_student_boss() || api_is_drh());\n\n        $skillBlock = $template->get_template('social/skills_block.tpl');\n\n        return $template->fetch($skillBlock);\n    }\n\n    /**\n     * @param int  $user_id\n     * @param bool $isArray\n     *\n     * @return string|array\n     */\n    public static function getExtraFieldBlock($user_id, $isArray = false)\n    {\n        $fieldVisibility = api_get_configuration_value('profile_fields_visibility');\n        $fieldVisibilityKeys = [];\n        if (isset($fieldVisibility['options'])) {\n            $fieldVisibility = $fieldVisibility['options'];\n            $fieldVisibilityKeys = array_keys($fieldVisibility);\n        }\n\n        $t_ufo = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $extra_user_data = UserManager::get_extra_user_data($user_id);\n\n        $extra_information = '';\n        if (is_array($extra_user_data) && count($extra_user_data) > 0) {\n            $extra_information_value = '';\n            $extraField = new ExtraField('user');\n            $listType = [];\n            $extraFieldItem = [];\n            foreach ($extra_user_data as $key => $data) {\n                if (empty($data)) {\n                    continue;\n                }\n                if (in_array($key, $fieldVisibilityKeys) && $fieldVisibility[$key] === false) {\n                    continue;\n                }\n\n                // Avoiding parameters\n                if (in_array(\n                    $key,\n                    [\n                        'mail_notify_invitation',\n                        'mail_notify_message',\n                        'mail_notify_group_message',\n                    ]\n                )) {\n                    continue;\n                }\n                // get display text, visibility and type from user_field table\n                $field_variable = str_replace('extra_', '', $key);\n\n                $extraFieldInfo = $extraField->get_handler_field_info_by_field_variable(\n                    $field_variable\n                );\n\n                if (in_array($extraFieldInfo['variable'], ['skype', 'linkedin_url'])) {\n                    continue;\n                }\n\n                // if is not visible skip\n                if ($extraFieldInfo['visible_to_self'] != 1) {\n                    continue;\n                }\n\n                // if is not visible to others skip also\n                if ($extraFieldInfo['visible_to_others'] != 1) {\n                    continue;\n                }\n\n                if (is_array($data)) {\n                    switch ($extraFieldInfo['field_type']) {\n                        case ExtraField::FIELD_TYPE_RADIO:\n                            $objEfOption = new ExtraFieldOption('user');\n                            $value = $data['extra_'.$extraFieldInfo['variable']];\n                            $optionInfo = $objEfOption->get_field_option_by_field_and_option(\n                                $extraFieldInfo['id'],\n                                $value\n                            );\n\n                            if ($optionInfo && isset($optionInfo[0])) {\n                                $optionInfo = $optionInfo[0];\n                                $extraFieldItem = [\n                                    'variable' => $extraFieldInfo['variable'],\n                                    'label' => ucfirst($extraFieldInfo['display_text']),\n                                    'value' => $optionInfo['display_text'],\n                                ];\n                            } else {\n                                $extraFieldItem = [\n                                    'variable' => $extraFieldInfo['variable'],\n                                    'label' => ucfirst($extraFieldInfo['display_text']),\n                                    'value' => implode(',', $data),\n                                ];\n                            }\n                            break;\n                        default:\n                            $extra_information_value .=\n                                '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).' '\n                                .' '.implode(',', $data).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => implode(',', $data),\n                            ];\n                            break;\n                    }\n                } else {\n                    switch ($extraFieldInfo['field_type']) {\n                        case ExtraField::FIELD_TYPE_RADIO:\n                            $objEfOption = new ExtraFieldOption('user');\n                            $optionInfo = $objEfOption->get_field_option_by_field_and_option($extraFieldInfo['id'], $extraFieldInfo['value']);\n                            break;\n                        case ExtraField::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                        case ExtraField::FIELD_TYPE_GEOLOCALIZATION:\n                            $data = explode('::', $data);\n                            $data = $data[0];\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_DOUBLE_SELECT:\n                            $id_options = explode('::', $data);\n                            $value_options = [];\n                            // get option display text from user_field_options table\n                            foreach ($id_options as $id_option) {\n                                $sql = \"SELECT display_text\n                                    FROM $t_ufo\n                                    WHERE id = '$id_option'\";\n                                $res_options = Database::query($sql);\n                                $row_options = Database::fetch_row($res_options);\n                                $value_options[] = $row_options[0];\n                            }\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '\n                                .' '.implode(' ', $value_options).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $value_options,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_TAG:\n                            $user_tags = UserManager::get_user_tags($user_id, $extraFieldInfo['id']);\n\n                            $tag_tmp = '';\n                            foreach ($user_tags as $tags) {\n                                $tag_tmp .= '<a class=\"label label_tag\"'\n                                    .' href=\"'.api_get_path(WEB_PATH).'main/social/search.php?q='.$tags['tag'].'\">'\n                                    .$tags['tag']\n                                    .'</a>';\n                            }\n                            if (is_array($user_tags) && count($user_tags) > 0) {\n                                $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '\n                                    .' '.$tag_tmp.'</li>';\n                            }\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $tag_tmp,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_SOCIAL_PROFILE:\n                            $icon_path = UserManager::get_favicon_from_url($data);\n                            if (self::verifyUrl($icon_path) == false) {\n                                break;\n                            }\n                            $bottom = '0.2';\n                            //quick hack for hi5\n                            $domain = parse_url($icon_path, PHP_URL_HOST);\n                            if ($domain == 'www.hi5.com' || $domain == 'hi5.com') {\n                                $bottom = '-0.8';\n                            }\n                            $data = '<a href=\"'.$data.'\">'\n                                .'<img src=\"'.$icon_path.'\" alt=\"icon\"'\n                                .' style=\"margin-right:0.5em;margin-bottom:'.$bottom.'em;\" />'\n                                .$extraFieldInfo['display_text']\n                                .'</a>';\n                            $extra_information_value .= '<li class=\"list-group-item\">'.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $parsedData = explode('::', $data);\n\n                            if (!$parsedData) {\n                                break;\n                            }\n\n                            $objEfOption = new ExtraFieldOption('user');\n                            $optionInfo = $objEfOption->get($parsedData[0]);\n\n                            $extra_information_value .= '<li class=\"list-group-item\">'\n                                .$optionInfo['display_text'].': '\n                                .$parsedData[1].'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $parsedData[1],\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_TRIPLE_SELECT:\n                            $optionIds = explode(';', $data);\n                            $optionValues = [];\n\n                            foreach ($optionIds as $optionId) {\n                                $objEfOption = new ExtraFieldOption('user');\n                                $optionInfo = $objEfOption->get($optionId);\n\n                                $optionValues[] = $optionInfo['display_text'];\n                            }\n                            $extra_information_value .= '<li class=\"list-group-item\">'\n                                .ucfirst($extraFieldInfo['display_text']).': '\n                                .implode(' ', $optionValues).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => implode(' ', $optionValues),\n                            ];\n                            break;\n                        default:\n                            // Ofaj\n                            // Converts \"Date of birth\" into \"age\"\n                            if ($key === 'terms_datedenaissance') {\n                                $dataArray = date_to_str_ago($data, 'UTC', true);\n                                $dataToString = isset($dataArray['years']) && !empty($dataArray['years']) ? $dataArray['years'] : 0;\n                                if (!empty($dataToString)) {\n                                    $data = $dataToString;\n                                    $extraFieldInfo['display_text'] = get_lang('Age');\n                                }\n                            }\n\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                    }\n                }\n\n                $listType[] = $extraFieldItem;\n            }\n\n            if ($isArray) {\n                return $listType;\n            } else {\n                // if there are information to show\n                if (!empty($extra_information_value)) {\n                    $extra_information_value = '<ul class=\"list-group\">'.$extra_information_value.'</ul>';\n                    $extra_information .= Display::panelCollapse(\n                        get_lang('ExtraInformation'),\n                        $extra_information_value,\n                        'sn-extra-information',\n                        null,\n                        'sn-extra-accordion',\n                        'sn-extra-collapse'\n                    );\n                }\n            }\n        }\n\n        return $extra_information;\n    }\n\n    /**\n     * @param string $url\n     */\n    public static function handlePosts($url)\n    {\n        $friendId = isset($_GET['u']) ? (int) $_GET['u'] : api_get_user_id();\n        $url = Security::remove_XSS($url);\n\n        // Main post\n        if (!empty($_POST['social_wall_new_msg_main']) || !empty($_FILES['picture']['tmp_name'])) {\n            $messageContent = $_POST['social_wall_new_msg_main'];\n            if (!empty($_POST['url_content'])) {\n                $messageContent = $_POST['social_wall_new_msg_main'].'<br /><br />'.$_POST['url_content'];\n            }\n\n            $messageId = self::sendWallMessage(\n                api_get_user_id(),\n                $friendId,\n                $messageContent,\n                0,\n                MESSAGE_STATUS_WALL_POST\n            );\n\n            if ($messageId && !empty($_FILES['picture']['tmp_name'])) {\n                self::sendWallMessageAttachmentFile(\n                    api_get_user_id(),\n                    $_FILES['picture'],\n                    $messageId\n                );\n            }\n\n            Display::addFlash(Display::return_message(get_lang('MessageSent')));\n            header('Location: '.$url);\n            exit;\n        }\n    }\n\n    /**\n     * @param int   $countPost\n     * @param array $htmlHeadXtra\n     */\n    public static function getScrollJs($countPost, &$htmlHeadXtra)\n    {\n        // $ajax_url = api_get_path(WEB_AJAX_PATH).'message.ajax.php';\n        $socialAjaxUrl = api_get_path(WEB_AJAX_PATH).'social.ajax.php';\n        $javascriptDir = api_get_path(LIBRARY_PATH).'javascript/';\n        $locale = api_get_language_isocode();\n\n        // Add Jquery scroll pagination plugin\n        $htmlHeadXtra[] = api_get_js('jscroll/jquery.jscroll.js');\n        // Add Jquery Time ago plugin\n        $htmlHeadXtra[] = api_get_asset('jquery-timeago/jquery.timeago.js');\n        $timeAgoLocaleDir = $javascriptDir.'jquery-timeago/locales/jquery.timeago.'.$locale.'.js';\n        if (file_exists($timeAgoLocaleDir)) {\n            $htmlHeadXtra[] = api_get_js('jquery-timeago/locales/jquery.timeago.'.$locale.'.js');\n        }\n\n        if ($countPost > self::DEFAULT_WALL_POSTS) {\n            $htmlHeadXtra[] = '<script>\n            $(function() {\n                var container = $(\"#wallMessages\");\n                container.jscroll({\n                    loadingHtml: \"<div class=\\\"well_border\\\">'.get_lang('Loading').' </div>\",\n                    nextSelector: \"a.nextPage:last\",\n                    contentSelector: \"\",\n                    callback: timeAgo\n                });\n            });\n            </script>';\n        }\n\n        $htmlHeadXtra[] = '<script>\n            function deleteMessage(id)\n            {\n                $.ajax({\n                    url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#message_\" + id).parent().parent().parent().parent().html(result);\n                        }\n                    }\n                });\n            }\n\n            function deleteComment(id)\n            {\n                $.ajax({\n                    url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#message_\" + id).parent().parent().parent().html(result);\n                        }\n                    }\n                });\n            }\n\n            function submitComment(messageId)\n            {\n                var data = $(\"#form_comment_\"+messageId).serializeArray();\n                $.ajax({\n                    type : \"POST\",\n                    url: \"'.$socialAjaxUrl.'?a=send_comment\" + \"&id=\" + messageId,\n                    data: data,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#post_\" + messageId + \" textarea\").val(\"\");\n                            $(\"#post_\" + messageId + \" .sub-mediapost\").prepend(result);\n                            $(\"#post_\" + messageId + \" .sub-mediapost\").append(\n                                $(\\'<div id=result_\\' + messageId +\\'>'.addslashes(get_lang('Saved')).'</div>\\')\n                            );\n\n                            $(\"#result_\" + messageId + \"\").fadeIn(\"fast\", function() {\n                                $(\"#result_\" + messageId + \"\").delay(1000).fadeOut(\"fast\", function() {\n                                    $(this).remove();\n                                });\n                            });\n                        }\n                    }\n                });\n            }\n\n            $(function() {\n                timeAgo();\n\n                /*$(\".delete_message\").on(\"click\", function() {\n                    var id = $(this).attr(\"id\");\n                    id = id.split(\"_\")[1];\n                    $.ajax({\n                        url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                        success: function (result) {\n                            if (result) {\n                                $(\"#message_\" + id).parent().parent().parent().parent().html(result);\n                            }\n                        }\n                    });\n                });\n\n\n                $(\".delete_comment\").on(\"click\", function() {\n                    var id = $(this).attr(\"id\");\n                    id = id.split(\"_\")[1];\n                    $.ajax({\n                        url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                        success: function (result) {\n                            if (result) {\n                                $(\"#message_\" + id).parent().parent().parent().html(result);\n                            }\n                        }\n                    });\n                });\n                */\n            });\n\n            function timeAgo() {\n                $(\".timeago\").timeago();\n            }\n            </script>';\n    }\n\n    /**\n     * @param int $userId\n     * @param int $countPost\n     *\n     * @return string\n     */\n    public static function getAutoExtendLink($userId, $countPost)\n    {\n        $userId = (int) $userId;\n        $socialAjaxUrl = api_get_path(WEB_AJAX_PATH).'social.ajax.php';\n        $socialAutoExtendLink = '';\n        if ($countPost > self::DEFAULT_WALL_POSTS) {\n            $socialAutoExtendLink = Display::url(\n                get_lang('SeeMore'),\n                $socialAjaxUrl.'?u='.$userId.'&a=list_wall_message&start='.\n                self::DEFAULT_WALL_POSTS.'&length='.self::DEFAULT_SCROLL_NEW_POST,\n                [\n                    'class' => 'nextPage next',\n                ]\n            );\n        }\n\n        return $socialAutoExtendLink;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getThreadList($userId)\n    {\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $threads = [];\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n            getNotificationsPerUser($userId, true, $forumCourseId);\n            $notification = Session::read('forum_notification');\n            Session::erase('forum_notification');\n\n            $threadUrlBase = api_get_path(WEB_CODE_PATH).'forum/viewthread.php?'.http_build_query([\n                'cidReq' => $courseInfo['code'],\n            ]).'&';\n            if (isset($notification['thread']) && !empty($notification['thread'])) {\n                $threadList = array_filter(array_unique($notification['thread']));\n                $em = Database::getManager();\n                $repo = $em->getRepository('ChamiloCourseBundle:CForumThread');\n                foreach ($threadList as $threadId) {\n                    /** @var \\Chamilo\\CourseBundle\\Entity\\CForumThread $thread */\n                    $thread = $repo->find($threadId);\n                    if ($thread) {\n                        $threadUrl = $threadUrlBase.http_build_query([\n                            'forum' => $thread->getForumId(),\n                            'thread' => $thread->getIid(),\n                        ]);\n                        $threads[] = [\n                            'id' => $threadId,\n                            'url' => Display::url(\n                                $thread->getThreadTitle(),\n                                $threadUrl\n                            ),\n                            'name' => Display::url(\n                                $thread->getThreadTitle(),\n                                $threadUrl\n                            ),\n                            'description' => '',\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $threads;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getGroupBlock($userId)\n    {\n        $threadList = self::getThreadList($userId);\n        $userGroup = new UserGroup();\n\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n        $courseInfo = null;\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n        }\n\n        $social_group_block = '';\n        if (!empty($courseInfo)) {\n            if (!empty($threadList)) {\n                $social_group_block .= '<div class=\"list-group\">';\n                foreach ($threadList as $group) {\n                    $social_group_block .= ' <li class=\"list-group-item\">';\n                    $social_group_block .= $group['name'];\n                    $social_group_block .= '</li>';\n                }\n                $social_group_block .= '</div>';\n            }\n\n            $social_group_block .= Display::url(\n                get_lang('SeeAllCommunities'),\n                api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$courseInfo['code']\n            );\n\n            if (!empty($social_group_block)) {\n                $social_group_block = Display::panelCollapse(\n                    get_lang('MyCommunities'),\n                    $social_group_block,\n                    'sm-groups',\n                    null,\n                    'grups-acordion',\n                    'groups-collapse'\n                );\n            }\n        } else {\n            // Load my groups\n            $results = $userGroup->get_groups_by_user(\n                $userId,\n                [\n                    GROUP_USER_PERMISSION_ADMIN,\n                    GROUP_USER_PERMISSION_READER,\n                    GROUP_USER_PERMISSION_MODERATOR,\n                    GROUP_USER_PERMISSION_HRM,\n                ]\n            );\n\n            $myGroups = [];\n            if (!empty($results)) {\n                foreach ($results as $result) {\n                    $id = $result['id'];\n                    $result['description'] = Security::remove_XSS($result['description'], STUDENT, true);\n                    $result['name'] = Security::remove_XSS($result['name'], STUDENT, true);\n\n                    $group_url = \"group_view.php?id=$id\";\n\n                    $link = Display::url(\n                        api_ucwords(cut($result['name'], 40, true)),\n                        $group_url\n                    );\n\n                    $result['name'] = $link;\n\n                    $picture = $userGroup->get_picture_group(\n                        $id,\n                        $result['picture'],\n                        null,\n                        GROUP_IMAGE_SIZE_BIG\n                    );\n\n                    $result['picture'] = '<img class=\"img-responsive\" src=\"'.$picture['file'].'\" />';\n                    $group_actions = '<div class=\"group-more\"><a class=\"btn btn-default\" href=\"groups.php?#tab_browse-2\">'.\n                        get_lang('SeeMore').'</a></div>';\n                    $group_info = '<div class=\"description\"><p>'.cut($result['description'], 120, true).\"</p></div>\";\n                    $myGroups[] = [\n                        'url' => Display::url(\n                            $result['picture'],\n                            $group_url\n                        ),\n                        'name' => $result['name'],\n                        'description' => $group_info.$group_actions,\n                    ];\n                }\n\n                $social_group_block .= '<div class=\"list-group\">';\n                foreach ($myGroups as $group) {\n                    $social_group_block .= ' <li class=\"list-group-item\">';\n                    $social_group_block .= $group['name'];\n                    $social_group_block .= '</li>';\n                }\n                $social_group_block .= '</div>';\n\n                $form = new FormValidator(\n                    'find_groups_form',\n                    'get',\n                    api_get_path(WEB_CODE_PATH).'social/search.php?search_type=2',\n                    null,\n                    null,\n                    FormValidator::LAYOUT_BOX_NO_LABEL\n                );\n                $form->addHidden('search_type', 2);\n\n                $form->addText(\n                    'q',\n                    get_lang('Search'),\n                    false,\n                    [\n                        'aria-label' => get_lang('Search'),\n                        'custom' => true,\n                        'placeholder' => get_lang('Search'),\n                    ]\n                );\n\n                $social_group_block .= $form->returnForm();\n\n                if (!empty($social_group_block)) {\n                    $social_group_block = Display::panelCollapse(\n                        get_lang('MyGroups'),\n                        $social_group_block,\n                        'sm-groups',\n                        null,\n                        'grups-acordion',\n                        'groups-collapse'\n                    );\n                }\n            }\n        }\n\n        return $social_group_block;\n    }\n\n    /**\n     * @param string $selected\n     *\n     * @return string\n     */\n    public static function getHomeProfileTabs($selected = 'home')\n    {\n        $headers = [\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/profile.php',\n                'content' => get_lang('Profile'),\n            ],\n        ];\n        $allowJustification = api_get_plugin_setting('justification', 'tool_enable') === 'true';\n        if ($allowJustification) {\n            $plugin = Justification::create();\n            $headers[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/justification.php',\n                'content' => $plugin->get_lang('Justification'),\n            ];\n        }\n\n        $allowPauseTraining = api_get_plugin_setting('pausetraining', 'tool_enable') === 'true';\n        $allowEdit = api_get_plugin_setting('pausetraining', 'allow_users_to_edit_pause_formation') === 'true';\n        if ($allowPauseTraining && $allowEdit) {\n            $plugin = PauseTraining::create();\n            $headers[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/pausetraining.php',\n                'content' => $plugin->get_lang('PauseTraining'),\n            ];\n        }\n\n        $selectedItem = 1;\n        foreach ($headers as $header) {\n            $info = pathinfo($header['url']);\n            if ($selected === $info['filename']) {\n                break;\n            }\n            $selectedItem++;\n        }\n\n        $tabs = '';\n        if (count($headers) > 1) {\n            $tabs = Display::tabsOnlyLink($headers, $selectedItem);\n        }\n\n        return $tabs;\n    }\n\n    /**\n     * Returns the formatted header message post.\n     *\n     * @param int   $authorInfo\n     * @param int   $receiverInfo\n     * @param array $message      Message data\n     *\n     * @return string $html       The formatted header message post\n     */\n    private static function headerMessagePost($authorInfo, $receiverInfo, $message)\n    {\n        $currentUserId = api_get_user_id();\n        $authorId = (int) $authorInfo['user_id'];\n        $receiverId = (int) $receiverInfo['user_id'];\n        $iconStatus = $authorInfo['icon_status'];\n\n        $date = Display::dateToStringAgoAndLongDate($message['send_date']);\n        $avatarAuthor = $authorInfo['avatar'];\n        $urlAuthor = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$authorId;\n        $nameCompleteAuthor = $authorInfo['complete_name'];\n\n        $urlReceiver = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$receiverId;\n        $nameCompleteReceiver = $receiverInfo['complete_name'];\n\n        $htmlReceiver = '';\n        if ($authorId !== $receiverId) {\n            $htmlReceiver = ' > <a href=\"'.$urlReceiver.'\">'.$nameCompleteReceiver.'</a> ';\n        }\n\n        if (!empty($message['group_info'])) {\n            $htmlReceiver = ' > <a href=\"'.$message['group_info']['url'].'\">'.$message['group_info']['name'].'</a> ';\n        }\n        $canEdit = ($currentUserId == $authorInfo['user_id'] || $currentUserId == $receiverInfo['user_id']) && empty($message['group_info']);\n\n        if (!empty($message['thread_id'])) {\n            $htmlReceiver = ' > <a href=\"'.$message['thread_url'].'\">'.$message['forum_title'].'</a> ';\n            $canEdit = false;\n        }\n\n        $postAttachment = self::getPostAttachment($message);\n\n        $html = '<div class=\"top-mediapost\" >';\n        $html .= '<div class=\"pull-right btn-group btn-group-sm\">';\n\n        $html .= MessageManager::getLikesButton(\n            $message['id'],\n            $currentUserId,\n            !empty($message['group_info']['id']) ? (int) $message['group_info']['id'] : 0\n        );\n\n        if ($canEdit) {\n            $htmlDelete = Display::url(\n                Display::returnFontAwesomeIcon('trash', '', true),\n                'javascript:void(0)',\n                [\n                    'id' => 'message_'.$message['id'],\n                    'title' => get_lang('SocialMessageDelete'),\n                    'onclick' => 'deleteMessage('.$message['id'].')',\n                    'class' => 'btn btn-default',\n                ]\n            );\n\n            $html .= $htmlDelete;\n        }\n        $html .= '</div>';\n\n        $html .= '<div class=\"user-image\" >';\n        $html .= '<a href=\"'.$urlAuthor.'\">\n                    <img class=\"avatar-thumb\" src=\"'.$avatarAuthor.'\" alt=\"'.$nameCompleteAuthor.'\"></a>';\n        $html .= '</div>';\n        $html .= '<div class=\"user-data\">';\n        $html .= $iconStatus;\n        $html .= '<div class=\"username\"><a href=\"'.$urlAuthor.'\">'.$nameCompleteAuthor.'</a>'.$htmlReceiver.'</div>';\n        $html .= '<div class=\"post-date\">'.$date.'</div>';\n        $html .= '</div>';\n        $html .= '<div class=\"msg-content\">';\n        if (!empty($postAttachment)) {\n            $html .= '<div class=\"post-attachment thumbnail\">';\n            $html .= $postAttachment;\n            $html .= '</div>';\n        }\n        $html .= '<div>'.Security::remove_XSS($message['content']).'</div>';\n        $html .= '</div>';\n        $html .= '</div>'; // end mediaPost\n\n        // Popularity post functionality\n        $html .= '<div class=\"popularity-mediapost\"></div>';\n\n        return $html;\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CourseBundle\\Entity\\CForumPost;\nuse Chamilo\\CourseBundle\\Entity\\CForumThread;\nuse ChamiloSession as Session;\nuse Zend\\Feed\\Reader\\Entry\\Rss;\nuse Zend\\Feed\\Reader\\Reader;\n\n/**\n * Class SocialManager.\n *\n * This class provides methods for the social network management.\n * Include/require it in your code to use its features.\n */\nclass SocialManager extends UserManager\n{\n    const DEFAULT_WALL_POSTS = 10;\n    const DEFAULT_SCROLL_NEW_POST = 5;\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Allow to see contacts list.\n     *\n     * @author isaac flores paz\n     *\n     * @return array\n     */\n    public static function show_list_type_friends()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_FRIEND_RELATION_TYPE);\n        $sql = 'SELECT id, title FROM '.$table.'\n                WHERE id<>6\n                ORDER BY id ASC';\n        $result = Database::query($sql);\n        $friend_relation_list = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $friend_relation_list[] = $row;\n        }\n        $count_list = count($friend_relation_list);\n        if ($count_list == 0) {\n            $friend_relation_list[] = get_lang('Unknown');\n        } else {\n            return $friend_relation_list;\n        }\n    }\n\n    /**\n     * Get the kind of relation between contacts.\n     *\n     * @param int  $user_id     user id\n     * @param int  $user_friend user friend id\n     * @param bool $includeRH   include the RH relationship\n     *\n     * @return int\n     *\n     * @author isaac flores paz\n     */\n    public static function get_relation_between_contacts($user_id, $user_friend, $includeRH = false)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_FRIEND_RELATION_TYPE);\n        $userRelUserTable = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        if ($includeRH == false) {\n            $sql = 'SELECT rt.id as id\n                FROM '.$table.' rt\n                WHERE rt.id = (\n                    SELECT uf.relation_type\n                    FROM '.$userRelUserTable.' uf\n                    WHERE\n                        user_id='.((int) $user_id).' AND\n                        friend_user_id='.((int) $user_friend).' AND\n                        uf.relation_type <> '.USER_RELATION_TYPE_RRHH.'\n                    LIMIT 1\n                )';\n        } else {\n            $sql = 'SELECT rt.id as id\n                FROM '.$table.' rt\n                WHERE rt.id = (\n                    SELECT uf.relation_type\n                    FROM '.$userRelUserTable.' uf\n                    WHERE\n                        user_id='.((int) $user_id).' AND\n                        friend_user_id='.((int) $user_friend).'\n                    LIMIT 1\n                )';\n        }\n        $res = Database::query($sql);\n        if (Database::num_rows($res) > 0) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['id'];\n        } else {\n            if (api_get_configuration_value('social_make_teachers_friend_all')) {\n                $adminsList = UserManager::get_all_administrators();\n                foreach ($adminsList as $admin) {\n                    if (api_get_user_id() == $admin['user_id']) {\n                        return USER_RELATION_TYPE_GOODFRIEND;\n                    }\n                }\n                $targetUserCoursesList = CourseManager::get_courses_list_by_user_id(\n                    $user_id,\n                    true,\n                    false\n                );\n                $currentUserId = api_get_user_id();\n                foreach ($targetUserCoursesList as $course) {\n                    $teachersList = CourseManager::get_teacher_list_from_course_code($course['code']);\n                    foreach ($teachersList as $teacher) {\n                        if ($currentUserId == $teacher['user_id']) {\n                            return USER_RELATION_TYPE_GOODFRIEND;\n                        }\n                    }\n                }\n            } else {\n                return USER_UNKNOWN;\n            }\n        }\n    }\n\n    /**\n     * Get count of friends from user.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountFriends($userId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        $userId = (int) $userId;\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $sql = 'SELECT count(friend_user_id) count\n                FROM '.$table.'\n                WHERE\n                    relation_type NOT IN ('.USER_RELATION_TYPE_DELETED.', '.USER_RELATION_TYPE_RRHH.') AND\n                    friend_user_id<>'.$userId.' AND\n                    user_id='.$userId;\n        $res = Database::query($sql);\n        if (Database::num_rows($res)) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Gets friends id list.\n     *\n     * @param int  user id\n     * @param int group id\n     * @param string name to search\n     * @param bool true will load firstname, lastname, and image name\n     *\n     * @return array\n     *\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code, function renamed, $load_extra_info option added\n     * @author isaac flores paz\n     */\n    public static function get_friends(\n        $user_id,\n        $id_group = null,\n        $search_name = null,\n        $load_extra_info = true\n    ) {\n        $user_id = (int) $user_id;\n\n        $tbl_my_friend = Database::get_main_table(TABLE_MAIN_USER_REL_USER);\n        $tbl_my_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = 'SELECT friend_user_id FROM '.$tbl_my_friend.'\n                WHERE\n                    relation_type NOT IN ('.USER_RELATION_TYPE_DELETED.', '.USER_RELATION_TYPE_RRHH.') AND\n                    friend_user_id<>'.$user_id.' AND\n                    user_id='.$user_id;\n        if (isset($id_group) && $id_group > 0) {\n            $sql .= ' AND relation_type='.$id_group;\n        }\n        if (isset($search_name)) {\n            $search_name = trim($search_name);\n            $search_name = str_replace(' ', '', $search_name);\n            $sql .= ' AND friend_user_id IN (\n                SELECT user_id FROM '.$tbl_my_user.'\n                WHERE\n                    firstName LIKE \"%'.Database::escape_string($search_name).'%\" OR\n                    lastName LIKE \"%'.Database::escape_string($search_name).'%\" OR\n                    '.(api_is_western_name_order() ? 'concat(firstName, lastName)' : 'concat(lastName, firstName)').' LIKE concat(\"%\",\"'.Database::escape_string($search_name).'\",\"%\")\n                ) ';\n        }\n\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            if ($load_extra_info) {\n                $userInfo = api_get_user_info($row['friend_user_id']);\n                $list[] = [\n                    'friend_user_id' => $row['friend_user_id'],\n                    'firstName' => $userInfo['firstName'],\n                    'lastName' => $userInfo['lastName'],\n                    'username' => $userInfo['username'],\n                    'image' => $userInfo['avatar'],\n                    'user_info' => $userInfo,\n                ];\n            } else {\n                $list[] = $row;\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * get web path of user invitate.\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya setting variable array\n     *\n     * @param int user id\n     *\n     * @return array\n     */\n    public static function get_list_web_path_user_invitation_by_user_id($user_id)\n    {\n        $list_ids = self::get_list_invitation_of_friends_by_user_id($user_id);\n        $list = [];\n        foreach ($list_ids as $values_ids) {\n            $list[] = UserManager::get_user_picture_path_by_id(\n                $values_ids['user_sender_id'],\n                'web'\n            );\n        }\n\n        return $list;\n    }\n\n    /**\n     * Sends an invitation to contacts.\n     *\n     * @param int user id\n     * @param int user friend id\n     * @param string title of the message\n     * @param string content of the message\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function send_invitation_friend(\n        $user_id,\n        $friend_id,\n        $message_title,\n        $message_content\n    ) {\n        $tbl_message = Database::get_main_table(TABLE_MESSAGE);\n        $user_id = (int) $user_id;\n        $friend_id = (int) $friend_id;\n\n        //Just in case we replace the and \\n and \\n\\r while saving in the DB\n        $message_content = str_replace([\"\\n\", \"\\n\\r\"], '<br />', $message_content);\n\n        $clean_message_content = Database::escape_string($message_content);\n        $now = api_get_utc_datetime();\n        $sql = 'SELECT COUNT(*) AS count FROM '.$tbl_message.'\n                WHERE\n                    user_sender_id='.$user_id.' AND\n                    user_receiver_id='.$friend_id.' AND\n                    msg_status IN('.MESSAGE_STATUS_INVITATION_PENDING.', '.MESSAGE_STATUS_INVITATION_ACCEPTED.', '.MESSAGE_STATUS_INVITATION_DENIED.');\n                ';\n        $res_exist = Database::query($sql);\n        $row_exist = Database::fetch_array($res_exist, 'ASSOC');\n\n        if ($row_exist['count'] == 0) {\n            $params = [\n                'user_sender_id' => $user_id,\n                'user_receiver_id' => $friend_id,\n                'msg_status' => MESSAGE_STATUS_INVITATION_PENDING,\n                'send_date' => $now,\n                'title' => $message_title,\n                'content' => $message_content,\n                'group_id' => 0,\n                'parent_id' => 0,\n                'update_date' => $now,\n            ];\n            $messageId = Database::insert($tbl_message, $params);\n\n            $senderInfo = api_get_user_info($user_id);\n            $notification = new Notification();\n            $notification->saveNotification(\n                $messageId,\n                Notification::NOTIFICATION_TYPE_INVITATION,\n                [$friend_id],\n                $message_title,\n                $message_content,\n                $senderInfo\n            );\n\n            return true;\n        } else {\n            // invitation already exist\n            $sql = 'SELECT COUNT(*) AS count, id FROM '.$tbl_message.'\n                    WHERE\n                        user_sender_id='.$user_id.' AND\n                        user_receiver_id='.$friend_id.' AND\n                        msg_status = 7';\n            $res_if_exist = Database::query($sql);\n            $row_if_exist = Database::fetch_array($res_if_exist, 'ASSOC');\n            if ($row_if_exist['count'] == 1) {\n                $sql = 'UPDATE '.$tbl_message.' SET\n                            msg_status = 5, content = \"'.$clean_message_content.'\"\n                        WHERE\n                            user_sender_id='.$user_id.' AND\n                            user_receiver_id='.$friend_id.' AND\n                            msg_status = 7 ';\n                Database::query($sql);\n\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Get number messages of the inbox.\n     *\n     * @author isaac flores paz\n     *\n     * @param int $userId user receiver id\n     *\n     * @return int\n     */\n    public static function get_message_number_invitation_by_user_id($userId)\n    {\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $userId = (int) $userId;\n        $sql = 'SELECT COUNT(*) as count_message_in_box FROM '.$table.'\n                WHERE\n                    user_receiver_id='.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        $row = Database::fetch_array($res, 'ASSOC');\n        if ($row) {\n            return (int) $row['count_message_in_box'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get number of messages sent to other users.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountMessagesSent($userId)\n    {\n        $userId = (int) $userId;\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*) FROM '.$table.'\n                WHERE\n                    user_sender_id='.$userId.' AND\n                    msg_status < 5';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get number of messages received from other users.\n     *\n     * @param int $receiver_id\n     *\n     * @return int\n     */\n    public static function getCountMessagesReceived($receiver_id)\n    {\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*) FROM '.$table.'\n                WHERE\n                    user_receiver_id='.intval($receiver_id).' AND\n                    msg_status < 4';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get number of messages posted on own wall.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountWallPostedMessages($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT COUNT(*)\n                FROM '.$table.'\n                WHERE\n                    user_sender_id='.$userId.' AND\n                    (msg_status = '.MESSAGE_STATUS_WALL.' OR\n                    msg_status = '.MESSAGE_STATUS_WALL_POST.') AND\n                    parent_id = 0';\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * Get invitation list received by user.\n     *\n     * @author isaac flores paz\n     *\n     * @param int $userId\n     * @param int $limit\n     *\n     * @return array\n     */\n    public static function get_list_invitation_of_friends_by_user_id($userId, $limit = 0)\n    {\n        $userId = (int) $userId;\n        $limit = (int) $limit;\n\n        if (empty($userId)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT user_sender_id, send_date, title, content\n                FROM '.$table.'\n                WHERE\n                    user_receiver_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        if ($limit != null && $limit > 0) {\n            $sql .= ' LIMIT '.$limit;\n        }\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            $list[] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get invitation list sent by user.\n     *\n     * @author Julio Montoya <gugli100@gmail.com>\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function get_list_invitation_sent_by_user_id($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return [];\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT user_receiver_id, send_date,title,content\n                FROM '.$table.'\n                WHERE\n                    user_sender_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        $list = [];\n        while ($row = Database::fetch_array($res, 'ASSOC')) {\n            $list[$row['user_receiver_id']] = $row;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Get count invitation sent by user.\n     *\n     * @author Julio Montoya <gugli100@gmail.com>\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getCountInvitationSent($userId)\n    {\n        $userId = (int) $userId;\n\n        if (empty($userId)) {\n            return 0;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'SELECT count(user_receiver_id) count\n                FROM '.$table.'\n                WHERE\n                    user_sender_id = '.$userId.' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        $res = Database::query($sql);\n        if (Database::num_rows($res)) {\n            $row = Database::fetch_array($res, 'ASSOC');\n\n            return (int) $row['count'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Accepts invitation.\n     *\n     * @param int $user_send_id\n     * @param int $user_receiver_id\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function invitation_accepted($user_send_id, $user_receiver_id)\n    {\n        if (empty($user_send_id) || empty($user_receiver_id)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = \"UPDATE $table\n                SET msg_status = \".MESSAGE_STATUS_INVITATION_ACCEPTED.\"\n                WHERE\n                    user_sender_id = \".((int) $user_send_id).\" AND\n                    user_receiver_id=\".((int) $user_receiver_id).\" AND\n                    msg_status = \".MESSAGE_STATUS_INVITATION_PENDING;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Denies invitation.\n     *\n     * @param int user sender id\n     * @param int user receiver id\n     *\n     * @return bool\n     *\n     * @author isaac flores paz\n     * @author Julio Montoya <gugli100@gmail.com> Cleaning code\n     */\n    public static function invitation_denied($user_send_id, $user_receiver_id)\n    {\n        if (empty($user_send_id) || empty($user_receiver_id)) {\n            return false;\n        }\n        $table = Database::get_main_table(TABLE_MESSAGE);\n        $sql = 'DELETE FROM '.$table.'\n                WHERE\n                    user_sender_id =  '.((int) $user_send_id).' AND\n                    user_receiver_id='.((int) $user_receiver_id).' AND\n                    msg_status = '.MESSAGE_STATUS_INVITATION_PENDING;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Get user's feeds.\n     *\n     * @param int $user  User ID\n     * @param int $limit Limit of posts per feed\n     *\n     * @return string HTML section with all feeds included\n     *\n     * @author  Yannick Warnier\n     *\n     * @since   Dokeos 1.8.6.1\n     */\n    public static function getUserRssFeed($user, $limit = 5)\n    {\n        $feed = UserManager::get_extra_user_data_by_field($user, 'rssfeeds');\n\n        if (empty($feed)) {\n            return '';\n        }\n        $feeds = explode(';', $feed['rssfeeds']);\n        if (0 == count($feeds)) {\n            return '';\n        }\n        $res = '';\n        foreach ($feeds as $url) {\n            if (empty($url)) {\n                continue;\n            }\n            try {\n                $channel = Reader::import($url);\n                $i = 1;\n                if (!empty($channel)) {\n                    $iconRss = '';\n                    if (!empty($feed)) {\n                        $iconRss = Display::url(\n                            Display::return_icon('social_rss.png', '', [], 22),\n                            Security::remove_XSS($feed['rssfeeds']),\n                            ['target' => '_blank']\n                        );\n                    }\n\n                    $res .= '<h3 class=\"title-rss\">'.$iconRss.' '.$channel->getTitle().'</h3>';\n                    $res .= '<div class=\"rss-items\">';\n                    /** @var Rss $item */\n                    foreach ($channel as $item) {\n                        if ($limit >= 0 and $i > $limit) {\n                            break;\n                        }\n                        $res .= '<h4 class=\"rss-title\"><a href=\"'.$item->getLink().'\">'.$item->getTitle().'</a></h4>';\n                        $res .= '<div class=\"rss-date\">'.api_get_local_time($item->getDateCreated()).'</div>';\n                        $res .= '<div class=\"rss-content\"><p>'.$item->getDescription().'</p></div>';\n                        $i++;\n                    }\n                    $res .= '</div>';\n                }\n            } catch (Exception $e) {\n                error_log($e->getMessage());\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Sends invitations to friends.\n     *\n     * @param int    $userId\n     * @param string $subject\n     * @param string $content\n     *\n     * @return bool\n     */\n    public static function sendInvitationToUser($userId, $subject = '', $content = '')\n    {\n        $user_info = api_get_user_info($userId);\n        $success = get_lang('MessageSentTo');\n        $success .= ' : '.api_get_person_name($user_info['firstName'], $user_info['lastName']);\n        $content = strip_tags($content);\n\n        if (isset($subject) && isset($content) && isset($userId)) {\n            $result = MessageManager::send_message($userId, $subject, $content);\n\n            if ($result) {\n                Display::addFlash(\n                    Display::return_message($success, 'normal', false)\n                );\n            } else {\n                Display::addFlash(\n                    Display::return_message(get_lang('ErrorSendingMessage'), 'error', false)\n                );\n            }\n\n            return false;\n        } elseif (isset($userId) && !isset($subject)) {\n            if (isset($userId) && $userId > 0) {\n                $count = self::send_invitation_friend(\n                    api_get_user_id(),\n                    $userId,\n                    get_lang('Invitation'),\n                    $content\n                );\n\n                if ($count) {\n                    Display::addFlash(\n                        Display::return_message(\n                            api_htmlentities(get_lang('InvitationHasBeenSent')),\n                            'normal',\n                            false\n                        )\n                    );\n                } else {\n                    Display::addFlash(\n                        Display::return_message(\n                            api_htmlentities(get_lang('YouAlreadySentAnInvitation')),\n                            'warning',\n                            false\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper functions definition.\n     */\n    public static function get_logged_user_course_html($my_course, $count)\n    {\n        $result = '';\n        $count = (int) $count;\n\n        // Table definitions\n        $main_user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $course_directory = $my_course['course_info']['directory'];\n        $course_title = $my_course['course_info']['title'];\n        $course_visibility = $my_course['course_info']['visibility'];\n\n        $user_in_course_status = CourseManager::getUserInCourseStatus(\n            api_get_user_id(),\n            $my_course['course_info']['real_id']\n        );\n\n        $course_path = api_get_path(SYS_COURSE_PATH).$course_directory; // course path\n        if (api_get_setting('course_images_in_courses_list') === 'true') {\n            if (file_exists($course_path.'/course-pic85x85.png')) {\n                $image = $my_course['course_info']['course_image'];\n                $imageCourse = Display::img($image, $course_title, ['class' => 'img-course']);\n            } else {\n                $imageCourse = Display::return_icon(\n                    'session_default_small.png',\n                    $course_title,\n                    ['class' => 'img-course']\n                );\n            }\n        } else {\n            $imageCourse = Display::return_icon(\n                'course.png',\n                get_lang('Course'),\n                ['class' => 'img-default']\n            );\n        }\n\n        //display course entry\n        if (api_get_setting('course_images_in_courses_list') === 'true') {\n            $result .= '<li id=\"course_'.$count.'\" class=\"list-group-item\" style=\"min-height:65px;\">';\n        } else {\n            $result .= '<li id=\"course_'.$count.'\" class=\"list-group-item\" style=\"min-height:44px;\">';\n        }\n        $result .= $imageCourse;\n\n        //show a hyperlink to the course, unless the course is closed and user is not course admin\n        if ($course_visibility != COURSE_VISIBILITY_HIDDEN &&\n            ($course_visibility != COURSE_VISIBILITY_CLOSED || $user_in_course_status == COURSEMANAGER)\n        ) {\n            $result .= '<span class=\"title\">'.$course_title.'<span>';\n        } else {\n            $result .= $course_title.' '.get_lang('CourseClosed');\n        }\n\n        $result .= '</li>';\n        $session = '';\n        if (!empty($my_course['session_name']) && !empty($my_course['id_session'])) {\n            // Request for the name of the general coach\n            $sql = 'SELECT lastname, firstname\n                    FROM '.$tbl_session.' ts\n                    LEFT JOIN '.$main_user_table.' tu\n                    ON ts.id_coach = tu.user_id\n                    WHERE ts.id='.(int) $my_course['id_session'].' LIMIT 1';\n            $rs = Database::query($sql);\n            $sessioncoach = Database::store_result($rs);\n            $sessioncoach = $sessioncoach[0];\n\n            $session = [];\n            $session['title'] = $my_course['session_name'];\n            if ($my_course['access_start_date'] == '0000-00-00') {\n                $session['dates'] = get_lang('WithoutTimeLimits');\n                if (api_get_setting('show_session_coach') === 'true') {\n                    $session['coach'] = get_lang('GeneralCoach').': '.\n                        api_get_person_name($sessioncoach['firstname'], $sessioncoach['lastname']);\n                }\n            } else {\n                $session['dates'] = ' - '.get_lang('From').' '.$my_course['access_start_date'].' '.get_lang('To').' '.$my_course['access_end_date'];\n                if (api_get_setting('show_session_coach') === 'true') {\n                    $session['coach'] = get_lang('GeneralCoach').': '.\n                        api_get_person_name($sessioncoach['firstname'], $sessioncoach['lastname']);\n                }\n            }\n        }\n\n        $my_course['id_session'] = isset($my_course['id_session']) ? $my_course['id_session'] : 0;\n        $output = [\n            $my_course['user_course_cat'],\n            $result,\n            $my_course['id_session'],\n            $session,\n        ];\n\n        return $output;\n    }\n\n    /**\n     * Shows the avatar block in social pages.\n     *\n     * @param string $show     highlight link possible values:\n     *                         group_add,\n     *                         home,\n     *                         messages,\n     *                         messages_inbox,\n     *                         messages_compose,\n     *                         messages_outbox,\n     *                         invitations,\n     *                         shared_profile,\n     *                         friends,\n     *                         groups search\n     * @param int    $group_id\n     * @param int    $user_id\n     */\n    public static function show_social_avatar_block($show = '', $group_id = 0, $user_id = 0)\n    {\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n\n        $show_groups = [\n            'groups',\n            'group_messages',\n            'messages_list',\n            'group_add',\n            'mygroups',\n            'group_edit',\n            'member_list',\n            'invite_friends',\n            'waiting_list',\n            'browse_groups',\n        ];\n\n        $template = new Template(null, false, false, false, false, false);\n\n        if (in_array($show, $show_groups) && !empty($group_id)) {\n            // Group image\n            $userGroup = new UserGroup();\n            $group_info = $userGroup->get($group_id);\n\n            $userGroupImage = $userGroup->get_picture_group(\n                $group_id,\n                $group_info['picture'],\n                128,\n                GROUP_IMAGE_SIZE_BIG\n            );\n\n            $template->assign('show_group', true);\n            $template->assign('group_id', $group_id);\n            $template->assign('user_group_image', $userGroupImage);\n            $template->assign(\n                'user_is_group_admin',\n                $userGroup->is_group_admin(\n                    $group_id,\n                    api_get_user_id()\n                )\n            );\n        } else {\n            $template->assign('show_group', false);\n            $template->assign('show_user', true);\n            $template->assign(\n                'user_image',\n                [\n                    'big' => UserManager::getUserPicture(\n                        $user_id,\n                        USER_IMAGE_SIZE_BIG\n                    ),\n                    'normal' => UserManager::getUserPicture(\n                        $user_id,\n                        USER_IMAGE_SIZE_MEDIUM\n                    ),\n                ]\n            );\n        }\n\n        return $template->fetch($template->get_template('social/avatar_block.tpl'));\n    }\n\n    /**\n     * Shows the right menu of the Social Network tool.\n     *\n     * @param string $show                       highlight link possible values:\n     *                                           group_add,\n     *                                           home,\n     *                                           messages,\n     *                                           messages_inbox,\n     *                                           messages_compose ,\n     *                                           messages_outbox,\n     *                                           invitations,\n     *                                           shared_profile,\n     *                                           friends,\n     *                                           groups search\n     * @param int    $group_id                   group id\n     * @param int    $user_id                    user id\n     * @param bool   $show_full_profile          show profile or not (show or hide the user image/information)\n     * @param bool   $show_delete_account_button\n     */\n    public static function show_social_menu(\n        $show = '',\n        $group_id = 0,\n        $user_id = 0,\n        $show_full_profile = false,\n        $show_delete_account_button = false\n    ) {\n        $user_id = (int) $user_id;\n        $group_id = (int) $group_id;\n        $settingExtendedProfileEnabled = api_get_setting('extended_profile');\n\n        if (empty($user_id)) {\n            $user_id = api_get_user_id();\n        }\n\n        $myExtendedProfileEdit = '';\n        if ($user_id == api_get_user_id()) {\n            $myExtendedProfileEdit .= '<a href=\"/main/auth/profile.php?type=extended#openarea\" style=\"display:initial\">'.\n                Display::return_icon('edit.png', get_lang('EditExtendProfile'), '', 16).'</a>';\n        }\n        $usergroup = new UserGroup();\n        $show_groups = [\n            'groups',\n            'group_messages',\n            'messages_list',\n            'group_add',\n            'mygroups',\n            'group_edit',\n            'member_list',\n            'invite_friends',\n            'waiting_list',\n            'browse_groups',\n        ];\n\n        // get count unread message and total invitations\n        $count_unread_message = MessageManager::getCountNewMessagesFromDB(api_get_user_id());\n        $count_unread_message = !empty($count_unread_message) ? Display::badge($count_unread_message) : null;\n\n        $number_of_new_messages_of_friend = self::get_message_number_invitation_by_user_id(api_get_user_id());\n        $group_pending_invitations = $usergroup->get_groups_by_user(\n            api_get_user_id(),\n            GROUP_USER_PERMISSION_PENDING_INVITATION,\n            false\n        );\n        $group_pending_invitations = count($group_pending_invitations);\n        $total_invitations = $number_of_new_messages_of_friend + $group_pending_invitations;\n        $total_invitations = (!empty($total_invitations) ? Display::badge($total_invitations) : '');\n\n        $filesIcon = Display::return_icon('sn-files.png', get_lang('MyFiles'), null, ICON_SIZE_SMALL);\n        $friendsIcon = Display::return_icon('sn-friends.png', get_lang('Friends'), null, ICON_SIZE_SMALL);\n        $groupsIcon = Display::return_icon('sn-groups.png', get_lang('SocialGroups'), null, ICON_SIZE_SMALL);\n        $homeIcon = Display::return_icon('sn-home.png', get_lang('Home'), null, ICON_SIZE_SMALL);\n        $invitationsIcon = Display::return_icon('sn-invitations.png', get_lang('Invitations'), null, ICON_SIZE_SMALL);\n        $messagesIcon = Display::return_icon('sn-message.png', get_lang('Messages'), null, ICON_SIZE_SMALL);\n        $sharedProfileIcon = Display::return_icon('sn-profile.png', get_lang('ViewMySharedProfile'));\n        $searchIcon = Display::return_icon('sn-search.png', get_lang('Search'), null, ICON_SIZE_SMALL);\n        $portfolioIcon = Display::return_icon('wiki_task.png', get_lang('Portfolio'));\n        $personalDataIcon = Display::return_icon('database.png', get_lang('PersonalDataReport'));\n        $messageSocialIcon = Display::return_icon('promoted_message.png', get_lang('PromotedMessages'));\n        $portfolio = Display::return_icon('portfolio.png', get_lang('Portfolio '));\n\n        $allowPortfolioTool = api_get_configuration_value('allow_portfolio_tool');\n\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n        $groupUrl = api_get_path(WEB_CODE_PATH).'social/groups.php';\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n            if (!empty($courseInfo)) {\n                $groupUrl = api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$courseInfo['code'];\n            }\n        }\n\n        $html = '';\n        $active = null;\n        if (!in_array(\n            $show,\n            ['shared_profile', 'groups', 'group_edit', 'member_list', 'waiting_list', 'invite_friends']\n        )) {\n            $links = '<ul class=\"nav nav-pills nav-stacked\">';\n            $active = $show === 'home' ? 'active' : null;\n            $links .= '\n                <li class=\"home-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/home.php\">\n                        '.$homeIcon.' '.get_lang('Home').'\n                    </a>\n                </li>';\n            $active = $show === 'messages' ? 'active' : null;\n            $links .= '\n                <li class=\"messages-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'messages/inbox.php\">\n                        '.$messagesIcon.' '.get_lang('Messages').$count_unread_message.'\n                    </a>\n                </li>';\n            if ($allowPortfolioTool) {\n                $links .= '\n                    <li class=\"portoflio-icon '.($show === 'portfolio' ? 'active' : '').'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php\">\n                            '.$portfolioIcon.' '.get_lang('Portfolio').'\n                        </a>\n                    </li>\n                ';\n            } else {\n                if ($settingExtendedProfileEnabled == true) {\n                    $active = $show === 'portfolio' ? 'active' : null;\n                    $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                        '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                }\n            }\n\n            // Invitations\n            $active = $show === 'invitations' ? 'active' : null;\n            $links .= '\n                <li class=\"invitations-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">\n                        '.$invitationsIcon.' '.get_lang('Invitations').$total_invitations.'\n                    </a>\n                </li>';\n\n            // Shared profile and groups\n            $active = $show === 'shared_profile' ? 'active' : null;\n            $links .= '\n                <li class=\"shared-profile-icon'.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php\">\n                        '.$sharedProfileIcon.' '.get_lang('ViewMySharedProfile').'\n                    </a>\n                </li>';\n            $active = $show === 'friends' ? 'active' : null;\n            $links .= '\n                <li class=\"friends-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/friends.php\">\n                        '.$friendsIcon.' '.get_lang('Friends').'\n                    </a>\n                </li>';\n            $active = $show === 'browse_groups' ? 'active' : null;\n            $links .= '\n                <li class=\"browse-groups-icon '.$active.'\">\n                    <a href=\"'.$groupUrl.'\">\n                        '.$groupsIcon.' '.get_lang('SocialGroups').'\n                    </a>\n                </li>';\n\n            // Search users\n            $active = $show === 'search' ? 'active' : null;\n            $links .= '\n                <li class=\"search-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/search.php\">\n                        '.$searchIcon.' '.get_lang('Search').'\n                    </a>\n                </li>';\n\n            // My files\n            $active = $show === 'myfiles' ? 'active' : null;\n\n            $myFiles = '\n                <li class=\"myfiles-icon '.$active.'\">\n                    <a href=\"'.api_get_path(WEB_CODE_PATH).'social/myfiles.php\">\n                        '.$filesIcon.' '.get_lang('MyFiles').'\n                    </a>\n                </li>';\n\n            if (api_get_setting('allow_my_files') === 'false') {\n                $myFiles = '';\n            }\n            $links .= $myFiles;\n\n            if (!api_get_configuration_value('disable_gdpr')) {\n                $active = $show === 'personal-data' ? 'active' : null;\n                $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/personal_data.php\">\n                            '.$personalDataIcon.' '.get_lang('PersonalDataReport').'\n                        </a>\n                    </li>';\n                $links .= $personalData;\n            }\n\n            if (api_is_platform_admin()) {\n                $active = $show === 'promoted_messages' ? 'active' : null;\n                $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/promoted_messages.php\">\n                            '.$messageSocialIcon.' '.get_lang('PromotedMessages').'\n                        </a>\n                    </li>';\n                $links .= $personalData;\n            }\n            $links .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialNetwork'),\n                $links,\n                'social-network-menu',\n                null,\n                'sn-sidebar',\n                'sn-sidebar-collapse'\n            );\n        }\n\n        if (!empty($group_id) && in_array($show, $show_groups)) {\n            $html .= $usergroup->show_group_column_information(\n                $group_id,\n                api_get_user_id(),\n                $show\n            );\n        }\n\n        if ($show === 'shared_profile') {\n            $links = '<ul class=\"nav nav-pills nav-stacked\">';\n            // My own profile\n            if ($show_full_profile && $user_id == api_get_user_id()) {\n                $links .= '\n                    <li class=\"home-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/home.php\">\n                            '.$homeIcon.' '.get_lang('Home').'\n                        </a>\n                    </li>\n                    <li class=\"messages-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'messages/inbox.php\">\n                            '.$messagesIcon.' '.get_lang('Messages').$count_unread_message.'\n                        </a>\n                    </li>';\n                if ($allowPortfolioTool) {\n                    $links .= '\n                        <li class=\"portoflio-icon '.($show == 'portfolio' ? 'active' : '').'\">\n                            <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php\">\n                                '.$portfolioIcon.' '.get_lang('Portfolio').'\n                            </a>\n                        </li>\n                    ';\n                } else {\n                    if ($settingExtendedProfileEnabled == true) {\n                        $active = $show === 'portfolio' ? 'active' : null;\n                        $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                      '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                    }\n                }\n                $active = $show === 'invitations' ? 'active' : null;\n                $links .= '\n                    <li class=\"invitations-icon'.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">\n                            '.$invitationsIcon.' '.get_lang('Invitations').$total_invitations.'\n                        </a>\n                    </li>';\n\n                $links .= '\n                    <li class=\"shared-profile-icon active\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php\">\n                            '.$sharedProfileIcon.' '.get_lang('ViewMySharedProfile').'\n                        </a>\n                    </li>\n                    <li class=\"friends-icon\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/friends.php\">\n                            '.$friendsIcon.' '.get_lang('Friends').'\n                        </a>\n                    </li>';\n\n                $links .= '<li class=\"browse-groups-icon\">\n                        <a href=\"'.$groupUrl.'\">\n                            '.$groupsIcon.' '.get_lang('SocialGroups').'\n                        </a>\n                        </li>';\n\n                $active = $show == 'search' ? 'active' : null;\n                $links .= '\n                    <li class=\"search-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/search.php\">\n                            '.$searchIcon.' '.get_lang('Search').'\n                        </a>\n                    </li>';\n                $active = $show == 'myfiles' ? 'active' : null;\n\n                $myFiles = '\n                    <li class=\"myfiles-icon '.$active.'\">\n                     <a href=\"'.api_get_path(WEB_CODE_PATH).'social/myfiles.php\">\n                            '.$filesIcon.' '.get_lang('MyFiles').'\n                        </a>\n                    </li>';\n\n                if (api_get_setting('allow_my_files') === 'false') {\n                    $myFiles = '';\n                }\n                $links .= $myFiles;\n\n                if (!api_get_configuration_value('disable_gdpr')) {\n                    $active = $show == 'personal-data' ? 'active' : null;\n                    $personalData = '\n                    <li class=\"personal-data-icon '.$active.'\">\n                        <a href=\"'.api_get_path(WEB_CODE_PATH).'social/personal_data.php\">\n                            '.$personalDataIcon.' '.get_lang('PersonalDataReport').'\n                        </a>\n                    </li>';\n                    $links .= $personalData;\n                    $links .= '</ul>';\n                }\n            }\n\n            // My friend profile.\n            if ($user_id != api_get_user_id()) {\n                $sendMessageText = get_lang('SendMessage');\n                $sendMessageIcon = Display::return_icon(\n                    'new-message.png',\n                    $sendMessageText\n                );\n                $sendMessageUrl = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?'.http_build_query([\n                    'a' => 'get_user_popup',\n                    'user_id' => $user_id,\n                ]);\n\n                $links .= '<li>';\n                $links .= Display::url(\n                    \"$sendMessageIcon $sendMessageText\",\n                    $sendMessageUrl,\n                    [\n                        'class' => 'ajax',\n                        'title' => $sendMessageText,\n                        'data-title' => $sendMessageText,\n                    ]\n                );\n                if ($allowPortfolioTool) {\n                    $links .= '\n                        <li class=\"portoflio-icon '.($show == 'portfolio' ? 'active' : '').'\">\n                            <a href=\"'.api_get_path(WEB_CODE_PATH).'portfolio/index.php?user='.$user_id.'\">\n                                '.$portfolioIcon.' '.get_lang('Portfolio').'\n                            </a>\n                        </li>\n                    ';\n                } else {\n                    if ($settingExtendedProfileEnabled == true) {\n                        $active = $show === 'portfolio' ? 'active' : null;\n                        $links .= '\n                <li class=\"portfolio-icon '.$active.'\">\n                      <a href=\"'.api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$user_id.'&p=1\">\n                        '.$portfolio.' '.get_lang('Portfolio').'\n                    </a>\n                </li>';\n                    }\n                }\n            }\n\n            // Check if I already sent an invitation message\n            $invitationSentList = self::get_list_invitation_sent_by_user_id(api_get_user_id());\n\n            if (isset($invitationSentList[$user_id]) && is_array($invitationSentList[$user_id]) &&\n                count($invitationSentList[$user_id]) > 0\n            ) {\n                $links .= '<li><a href=\"'.api_get_path(WEB_CODE_PATH).'social/invitations.php\">'.\n                    Display::return_icon('invitation.png', get_lang('YouAlreadySentAnInvitation'))\n                    .'&nbsp;&nbsp;'.get_lang('YouAlreadySentAnInvitation').'</a></li>';\n            } else {\n                if (!$show_full_profile) {\n                    $links .= '<li>\n                        <a class=\"btn-to-send-invitation\" href=\"#\" data-send-to=\"'.$user_id.'\" title=\"'.get_lang('SendInvitation').'\">'.\n                        Display::return_icon('invitation.png', get_lang('SocialInvitationToFriends')).'&nbsp;'.get_lang('SendInvitation').\n                        '</a></li>';\n                }\n            }\n\n            $links .= '</ul>';\n            $html .= Display::panelCollapse(\n                get_lang('SocialNetwork'),\n                $links,\n                'social-network-menu',\n                null,\n                'sn-sidebar',\n                'sn-sidebar-collapse'\n            );\n\n            if ($show_full_profile && $user_id == api_get_user_id()) {\n                // Announcements\n                $announcements = [];\n                $announcementsByCourse = AnnouncementManager::getAnnoucementCourseTotalByUser($user_id);\n                if (!empty($announcementsByCourse)) {\n                    foreach ($announcementsByCourse as $announcement) {\n                        $url = Display::url(\n                            Display::return_icon(\n                                'announcement.png',\n                                get_lang('Announcements')\n                            ).$announcement['course']['name'].' ('.$announcement['count'].')',\n                            api_get_path(WEB_CODE_PATH).'announcements/announcements.php?cidReq='.$announcement['course']['code']\n                        );\n                        $announcements[] = Display::tag('li', $url);\n                    }\n                }\n\n                if (!empty($announcements)) {\n                    $html .= '<div class=\"social_menu_items\">';\n                    $html .= '<ul>';\n                    foreach ($announcements as $announcement) {\n                        $html .= $announcement;\n                    }\n                    $html .= '</ul>';\n                    $html .= '</div>';\n                }\n            }\n        }\n\n        if ($show_delete_account_button) {\n            $html .= '<div class=\"panel panel-default\"><div class=\"panel-body\">';\n            $html .= '<ul class=\"nav nav-pills nav-stacked\"><li>';\n            $url = api_get_path(WEB_CODE_PATH).'auth/unsubscribe_account.php';\n            $html .= Display::url(\n                Display::return_icon(\n                    'delete.png',\n                    get_lang('Unsubscribe'),\n                    [],\n                    ICON_SIZE_TINY\n                ).get_lang('Unsubscribe'),\n                $url\n            );\n            $html .= '</li></ul>';\n            $html .= '</div></div>';\n        }\n        $html .= '';\n\n        return $html;\n    }\n\n    /**\n     * Displays a sortable table with the list of online users.\n     *\n     * @param array $user_list The list of users to be shown\n     * @param bool  $wrap      Whether we want the function to wrap the spans list in a div or not\n     *\n     * @return string HTML block or null if and ID was defined\n     * @assert (null) === false\n     */\n    public static function display_user_list($user_list, $wrap = true)\n    {\n        $html = '';\n\n        if (isset($_GET['id']) || count($user_list) < 1) {\n            return false;\n        }\n\n        $course_url = '';\n        if (isset($_GET['cidReq']) && strlen($_GET['cidReq']) > 0) {\n            $course_url = '&amp;cidReq='.Security::remove_XSS($_GET['cidReq']);\n        }\n\n        $hide = api_get_configuration_value('hide_complete_name_in_whoisonline');\n        foreach ($user_list as $uid) {\n            $user_info = api_get_user_info($uid, true);\n            $lastname = $user_info['lastname'];\n            $firstname = $user_info['firstname'];\n            $completeName = $firstname.', '.$lastname;\n            $user_rol = $user_info['status'] == 1 ? Display::return_icon('teacher.png', get_lang('Teacher'), null, ICON_SIZE_TINY) : Display::return_icon('user.png', get_lang('Student'), null, ICON_SIZE_TINY);\n            $status_icon_chat = null;\n            if (isset($user_info['user_is_online_in_chat']) && $user_info['user_is_online_in_chat'] == 1) {\n                $status_icon_chat = Display::return_icon('online.png', get_lang('Online'));\n            } else {\n                $status_icon_chat = Display::return_icon('offline.png', get_lang('Offline'));\n            }\n\n            $userPicture = $user_info['avatar'];\n            $officialCode = '';\n            if (api_get_setting('show_official_code_whoisonline') == 'true') {\n                $officialCode .= '<div class=\"items-user-official-code\"><p style=\"min-height: 30px;\" title=\"'.get_lang('OfficialCode').'\">'.$user_info['official_code'].'</p></div>';\n            }\n\n            if ($hide === true) {\n                $completeName = '';\n                $firstname = '';\n                $lastname = '';\n            }\n\n            $img = '<img class=\"img-responsive img-circle\" title=\"'.$completeName.'\" alt=\"'.$completeName.'\" src=\"'.$userPicture.'\">';\n\n            $url = null;\n            // Anonymous users can't have access to the profile\n            if (!api_is_anonymous()) {\n                if (api_get_setting('allow_social_tool') === 'true') {\n                    $url = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$uid.$course_url;\n                } else {\n                    $url = '?id='.$uid.$course_url;\n                }\n            } else {\n                $url = null;\n            }\n            $name = '<a href=\"'.$url.'\">'.$firstname.'<br>'.$lastname.'</a>';\n\n            $html .= '<div class=\"col-xs-6 col-md-2\">\n                        <div class=\"items-user\">\n                            <div class=\"items-user-avatar\"><a href=\"'.$url.'\">'.$img.'</a></div>\n                            <div class=\"items-user-name\">\n                            '.$name.'\n                            </div>\n                            '.$officialCode.'\n                            <div class=\"items-user-status\">'.$status_icon_chat.' '.$user_rol.'</div>\n                        </div>\n                      </div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Displays the information of an individual user.\n     *\n     * @param int $user_id\n     *\n     * @return string\n     */\n    public static function display_individual_user($user_id)\n    {\n        global $interbreadcrumb;\n        $safe_user_id = (int) $user_id;\n        $currentUserId = api_get_user_id();\n\n        $user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = \"SELECT * FROM $user_table WHERE user_id = \".$safe_user_id;\n        $result = Database::query($sql);\n        $html = null;\n        if (Database::num_rows($result) == 1) {\n            $user_object = Database::fetch_object($result);\n            $userInfo = api_get_user_info($user_id);\n            $alt = $userInfo['complete_name'].($currentUserId == $user_id ? '&nbsp;('.get_lang('Me').')' : '');\n            $status = get_status_from_code($user_object->status);\n            $interbreadcrumb[] = ['url' => 'whoisonline.php', 'name' => get_lang('UsersOnLineList')];\n\n            $html .= '<div class =\"thumbnail\">';\n            $fullurl = $userInfo['avatar'];\n\n            $html .= '<img src=\"'.$fullurl.'\" alt=\"'.$alt.'\" />';\n\n            if (!empty($status)) {\n                $html .= '<div class=\"caption\">'.$status.'</div>';\n            }\n            $html .= '</div>';\n\n            if (api_get_setting('show_email_addresses') == 'true') {\n                $html .= Display::encrypted_mailto_link($user_object->email, $user_object->email).'<br />';\n            }\n            //    MY PERSONAL OPEN AREA\n            if ($user_object->openarea) {\n                $html .= Display::page_subheader(get_lang('MyPersonalOpenArea'));\n                $html .= '<p>'.$user_object->openarea.'</p>';\n            }\n            //    MY COMPETENCES\n            if ($user_object->competences) {\n                $html .= Display::page_subheader(get_lang('MyCompetences'));\n                $html .= '<p>'.$user_object->competences.'</p>';\n            }\n            //    MY DIPLOMAS\n            if ($user_object->diplomas) {\n                $html .= Display::page_subheader(get_lang('MyDiplomas'));\n                $html .= '<p>'.$user_object->diplomas.'</p>';\n            }\n            // WHAT I AM ABLE TO TEACH\n            if ($user_object->teach) {\n                $html .= Display::page_subheader(get_lang('MyTeach'));\n                $html .= '<p>'.$user_object->teach.'</p>';\n            }\n            //    MY PRODUCTIONS\n            self::display_productions($user_object->user_id);\n        } else {\n            $html .= '<div class=\"actions-title\">';\n            $html .= get_lang('UsersOnLineList');\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Display productions in who is online.\n     *\n     * @param int $user_id User id\n     */\n    public static function display_productions($user_id)\n    {\n        $webdir_array = UserManager::get_user_picture_path_by_id($user_id, 'web');\n        $sysdir = UserManager::getUserPathById($user_id, 'system');\n        $webdir = UserManager::getUserPathById($user_id, 'web');\n\n        if (!is_dir($sysdir)) {\n            mkdir($sysdir, api_get_permissions_for_new_directories(), true);\n        }\n\n        $productions = UserManager::get_user_productions($user_id);\n\n        if (count($productions) > 0) {\n            echo '<dt><strong>'.get_lang('Productions').'</strong></dt>';\n            echo '<dd><ul>';\n            foreach ($productions as $file) {\n                // Only display direct file links to avoid browsing an empty directory\n                if (is_file($sysdir.$file) && $file != $webdir_array['file']) {\n                    echo '<li><a href=\"'.$webdir.urlencode($file).'\" target=_blank>'.$file.'</a></li>';\n                }\n                // Real productions are under a subdirectory by the User's id\n                if (is_dir($sysdir.$file)) {\n                    $subs = scandir($sysdir.$file);\n                    foreach ($subs as $my => $sub) {\n                        if (substr($sub, 0, 1) != '.' && is_file($sysdir.$file.'/'.$sub)) {\n                            echo '<li><a href=\"'.$webdir.urlencode($file).'/'.urlencode($sub).'\" target=_blank>'.$sub.'</a></li>';\n                        }\n                    }\n                }\n            }\n            echo '</ul></dd>';\n        }\n    }\n\n    /**\n     * @param string $content\n     * @param string $span_count\n     *\n     * @return string\n     */\n    public static function social_wrapper_div($content, $span_count)\n    {\n        $span_count = (int) $span_count;\n        $html = '<div class=\"span'.$span_count.'\">';\n        $html .= '<div class=\"well_border\">';\n        $html .= $content;\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    /**\n     * Dummy function.\n     */\n    public static function get_plugins($place = SOCIAL_CENTER_PLUGIN)\n    {\n        $content = '';\n        switch ($place) {\n            case SOCIAL_CENTER_PLUGIN:\n                $social_plugins = [1, 2];\n                if (is_array($social_plugins) && count($social_plugins) > 0) {\n                    $content .= '<div id=\"social-plugins\">';\n                    foreach ($social_plugins as $plugin) {\n                        $content .= '<div class=\"social-plugin-item\">';\n                        $content .= $plugin;\n                        $content .= '</div>';\n                    }\n                    $content .= '</div>';\n                }\n                break;\n            case SOCIAL_LEFT_PLUGIN:\n                break;\n            case SOCIAL_RIGHT_PLUGIN:\n                break;\n        }\n\n        return $content;\n    }\n\n    /**\n     * Sends a message to someone's wall.\n     *\n     * @param int    $userId         id of author\n     * @param int    $friendId       id where we send the message\n     * @param string $messageContent of the message\n     * @param int    $messageId      id parent\n     * @param string $messageStatus  status type of message\n     *\n     * @return int\n     *\n     * @author Yannick Warnier\n     */\n    public static function sendWallMessage(\n        $userId,\n        $friendId,\n        $messageContent,\n        $messageId = 0,\n        $messageStatus = ''\n    ) {\n        $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n        $userId = (int) $userId;\n        $friendId = (int) $friendId;\n        $messageId = (int) $messageId;\n\n        if (empty($userId) || empty($friendId)) {\n            return 0;\n        }\n\n        // Just in case we replace the and \\n and \\n\\r while saving in the DB\n        $messageContent = str_replace([\"\\n\", \"\\n\\r\"], '<br />', $messageContent);\n        $now = api_get_utc_datetime();\n\n        $attributes = [\n            'user_sender_id' => $userId,\n            'user_receiver_id' => $friendId,\n            'msg_status' => $messageStatus,\n            'send_date' => $now,\n            'title' => '',\n            'content' => $messageContent,\n            'parent_id' => $messageId,\n            'group_id' => 0,\n            'update_date' => $now,\n        ];\n\n        return Database::insert($tblMessage, $attributes);\n    }\n\n    /**\n     * Send File attachment (jpg,png).\n     *\n     * @author Anibal Copitan\n     *\n     * @param int    $userId      id user\n     * @param array  $fileAttach\n     * @param int    $messageId   id message (relation with main message)\n     * @param string $fileComment description attachment file\n     *\n     * @return bool|int\n     */\n    public static function sendWallMessageAttachmentFile(\n        $userId,\n        $fileAttach,\n        $messageId,\n        $fileComment = ''\n    ) {\n        $safeFileName = Database::escape_string($fileAttach['name']);\n\n        $extension = strtolower(substr(strrchr($safeFileName, '.'), 1));\n        $allowedTypes = api_get_supported_image_extensions();\n\n        $allowedTypes[] = 'mp4';\n        $allowedTypes[] = 'webm';\n        $allowedTypes[] = 'ogg';\n\n        if (in_array($extension, $allowedTypes)) {\n            return MessageManager::saveMessageAttachmentFile($fileAttach, $fileComment, $messageId, $userId);\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets all messages from someone's wall (within specific limits).\n     *\n     * @param int        $userId     id of wall shown\n     * @param int|string $parentId   id message (Post main)\n     * @param int|array  $groupId\n     * @param int|array  $friendId\n     * @param string     $startDate  Date from which we want to show the messages, in UTC time\n     * @param int        $start      Limit for the number of parent messages we want to show\n     * @param int        $length     Wall message query offset\n     * @param bool       $getCount\n     * @param array      $threadList\n     *\n     * @return array|int\n     *\n     * @author Yannick Warnier\n     */\n    public static function getWallMessages(\n        $userId,\n        $parentId = 0,\n        $groupId = 0,\n        $friendId = 0,\n        $startDate = '',\n        $start = 0,\n        $length = 10,\n        $getCount = false,\n        $threadList = []\n    ) {\n        $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n\n        $parentId = (int) $parentId;\n        $userId = (int) $userId;\n        $start = (int) $start;\n        $length = (int) $length;\n\n        $select = \" SELECT\n                    id,\n                    user_sender_id,\n                    user_receiver_id,\n                    send_date,\n                    content,\n                    parent_id,\n                    msg_status,\n                    group_id,\n                    '' as forum_id,\n                    '' as thread_id,\n                    '' as c_id\n                  \";\n\n        if ($getCount) {\n            $select = ' SELECT count(id) as count_items ';\n        }\n\n        $sqlBase = \"$select FROM $tblMessage m WHERE \";\n        $sql = [];\n        $sql[1] = $sqlBase.\"msg_status <> \".MESSAGE_STATUS_WALL_DELETE.' AND ';\n\n        // Get my own posts\n        $userReceiverCondition = ' (\n            user_receiver_id = '.$userId.' AND\n            msg_status IN ('.MESSAGE_STATUS_WALL_POST.', '.MESSAGE_STATUS_WALL.') AND\n            parent_id = '.$parentId.'\n        )';\n\n        $sql[1] .= $userReceiverCondition;\n\n        $sql[2] = $sqlBase.' msg_status = '.MESSAGE_STATUS_PROMOTED.' ';\n\n        // Get my group posts\n        $groupCondition = '';\n        if (!empty($groupId)) {\n            if (is_array($groupId)) {\n                $groupId = array_map('intval', $groupId);\n                $groupId = implode(\",\", $groupId);\n                $groupCondition = \" ( group_id IN ($groupId) \";\n            } else {\n                $groupId = (int) $groupId;\n                $groupCondition = \" ( group_id = $groupId \";\n            }\n            $groupCondition .= ' AND (msg_status = '.MESSAGE_STATUS_NEW.' OR msg_status = '.MESSAGE_STATUS_UNREAD.')) ';\n        }\n        if (!empty($groupCondition)) {\n            $sql[3] = $sqlBase.$groupCondition;\n        }\n\n        // Get my friend posts\n        $friendCondition = '';\n        if (!empty($friendId)) {\n            if (is_array($friendId)) {\n                $friendId = array_map('intval', $friendId);\n                $friendId = implode(\",\", $friendId);\n                $friendCondition = \" ( user_receiver_id IN ($friendId) \";\n            } else {\n                $friendId = (int) $friendId;\n                $friendCondition = \" ( user_receiver_id = $friendId \";\n            }\n            $friendCondition .= ' AND msg_status = '.MESSAGE_STATUS_WALL_POST.' AND parent_id = 0) ';\n        }\n        if (!empty($friendCondition)) {\n            $sql[4] = $sqlBase.$friendCondition;\n        }\n\n        if (!empty($threadList)) {\n            if ($getCount) {\n                $select = ' SELECT count(iid) count_items ';\n            } else {\n                $select = \" SELECT\n                                iid as id,\n                                poster_id as user_sender_id,\n                                '' as user_receiver_id,\n                                post_date as send_date,\n                                post_text as content,\n                                '' as parent_id,\n                                \".MESSAGE_STATUS_FORUM.\" as msg_status,\n                                '' as group_id,\n                                forum_id,\n                                thread_id,\n                                c_id\n                            \";\n            }\n\n            $threadList = array_map('intval', $threadList);\n            $threadList = implode(\"','\", $threadList);\n            $condition = \" thread_id IN ('$threadList') \";\n            $sql[5] = \"$select\n                    FROM c_forum_post\n                    WHERE $condition\n                \";\n        }\n\n        if ($getCount) {\n            $count = 0;\n            foreach ($sql as $oneQuery) {\n                if (!empty($oneQuery)) {\n                    $res = Database::query($oneQuery);\n                    $row = Database::fetch_array($res);\n                    $count += (int) $row['count_items'];\n                }\n            }\n\n            return $count;\n        }\n\n        $sqlOrder = ' ORDER BY send_date DESC ';\n        $sqlLimit = \" LIMIT $start, $length \";\n        $messages = [];\n        foreach ($sql as $index => $oneQuery) {\n            if ($index === 5) {\n                // Exception only for the forum query above (field name change)\n                $oneQuery .= ' ORDER BY post_date DESC '.$sqlLimit;\n            } else {\n                $oneQuery .= $sqlOrder.$sqlLimit;\n            }\n            $res = Database::query($oneQuery);\n            $em = Database::getManager();\n            if (Database::num_rows($res) > 0) {\n                $repo = $em->getRepository('ChamiloCourseBundle:CForumPost');\n                $repoThread = $em->getRepository('ChamiloCourseBundle:CForumThread');\n                $groups = [];\n                $userGroup = new UserGroup();\n                $urlGroup = api_get_path(WEB_CODE_PATH).'social/group_view.php?id=';\n                while ($row = Database::fetch_array($res, 'ASSOC')) {\n                    $row['group_info'] = [];\n                    if (!empty($row['group_id'])) {\n                        if (!in_array($row['group_id'], $groups)) {\n                            $group = $userGroup->get($row['group_id']);\n                            $group['url'] = $urlGroup.$group['id'];\n                            $groups[$row['group_id']] = $group;\n                            $row['group_info'] = $group;\n                        } else {\n                            $row['group_info'] = $groups[$row['group_id']];\n                        }\n                    }\n\n                    // Forums\n                    $row['post_title'] = '';\n                    $row['forum_title'] = '';\n                    $row['thread_url'] = '';\n                    if ($row['msg_status'] == MESSAGE_STATUS_FORUM) {\n                        /** @var CForumPost $post */\n                        $post = $repo->find($row['id']);\n                        /** @var CForumThread $thread */\n                        $thread = $repoThread->find($row['thread_id']);\n                        if ($post && $thread) {\n                            $courseInfo = api_get_course_info_by_id($post->getCId());\n                            $row['post_title'] = $post->getForumId();\n                            $row['forum_title'] = $thread->getThreadTitle();\n                            $row['thread_url'] = api_get_path(WEB_CODE_PATH).'forum/viewthread.php?'.http_build_query([\n                                    'cidReq' => $courseInfo['code'],\n                                    'forum' => $post->getForumId(),\n                                    'thread' => $post->getThreadId(),\n                                    'post_id' => $post->getIid(),\n                                ]).'#post_id_'.$post->getIid();\n                        }\n                    }\n\n                    $messages[$row['id']] = $row;\n                }\n            }\n        }\n        // Reordering messages by ID (reverse order) is enough to have the\n        // latest first, as there is currently no option to edit messages\n        // afterwards\n        krsort($messages);\n\n        return $messages;\n    }\n\n    /**\n     * Gets all messages from someone's wall (within specific limits), formatted.\n     *\n     * @param int    $userId      USER ID of the person's wall\n     * @param array  $messageInfo\n     * @param string $start       Start date (from when we want the messages until today)\n     * @param int    $limit       Limit to the number of messages we want\n     * @param int    $offset      Wall messages offset\n     *\n     * @return string HTML formatted string to show messages\n     */\n    public static function getWallPostComments(\n        $userId,\n        $messageInfo,\n        $start = null,\n        $limit = 10,\n        $offset = 0\n    ) {\n        $messageId = $messageInfo['id'];\n        $messages = MessageManager::getMessagesByParent($messageInfo['id'], 0, $offset, $limit);\n        $formattedList = '<div class=\"sub-mediapost row\">';\n        $users = [];\n\n        // The messages are ordered by date descendant, for comments we need ascendant\n        krsort($messages);\n        foreach ($messages as $message) {\n            $userIdLoop = $message['user_sender_id'];\n            if (!isset($users[$userIdLoop])) {\n                $users[$userIdLoop] = api_get_user_info($userIdLoop);\n            }\n            $media = self::processPostComment($message, $users);\n            $formattedList .= $media;\n        }\n\n        $formattedList .= '</div>';\n        $formattedList .= '<div class=\"mediapost-form row\">';\n        $formattedList .= '<form class=\"form-horizontal\" id=\"form_comment_'.$messageId.'\" name=\"post_comment\" method=\"POST\">\n                <div class=\"col-sm-9\">\n                <label for=\"comment\" class=\"hide\">'.get_lang('SocialWriteNewComment').'</label>\n                <input type=\"hidden\" name = \"messageId\" value=\"'.$messageId.'\" />\n                <textarea rows=\"3\" class=\"form-control\" placeholder=\"'.get_lang('SocialWriteNewComment').'\" name=\"comment\" rows=\"1\" ></textarea>\n                </div>\n                <div class=\"col-sm-3 pull-right\">\n                <a onclick=\"submitComment('.$messageId.');\" href=\"javascript:void(0);\" name=\"social_wall_new_msg_submit\" class=\"btn btn-default btn-post\">\n                    <em class=\"fa fa-pencil\"></em> '.get_lang('Post').'\n                </a>\n                </div>\n                </form>';\n        $formattedList .= '</div>';\n\n        return $formattedList;\n    }\n\n    /**\n     * @param array $message\n     * @param array $users\n     *\n     * @return string\n     */\n    public static function processPostComment($message, $users = [])\n    {\n        if (empty($message)) {\n            return false;\n        }\n\n        $date = Display::dateToStringAgoAndLongDate($message['send_date']);\n        $currentUserId = api_get_user_id();\n        $userIdLoop = $message['user_sender_id'];\n        $receiverId = $message['user_receiver_id'];\n\n        if (!isset($users[$userIdLoop])) {\n            $users[$userIdLoop] = api_get_user_info($userIdLoop);\n        }\n\n        $iconStatus = $users[$userIdLoop]['icon_status'];\n        $nameComplete = $users[$userIdLoop]['complete_name'];\n        $url = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$userIdLoop;\n\n        $comment = '<div class=\"rep-post col-md-12\">';\n        $comment .= '<div class=\"col-md-2 col-xs-2 social-post-answers\">';\n        $comment .= '<div class=\"user-image pull-right\">';\n        $comment .= '<a href=\"'.$url.'\">\n                        <img src=\"'.$users[$userIdLoop]['avatar'].'\"\n                        alt=\"'.$users[$userIdLoop]['complete_name'].'\"\n                        class=\"avatar-thumb\">\n                     </a>';\n        $comment .= '</div>';\n        $comment .= '</div>';\n        $comment .= '<div class=\"col-md-7 col-xs-7 social-post-answers\">';\n        $comment .= '<div class=\"user-data\">';\n        $comment .= $iconStatus;\n        $comment .= '<div class=\"username\"><a href=\"'.$url.'\">'.$nameComplete.'</a>\n                        <span>'.Security::remove_XSS($message['content']).'</span>\n                       </div>';\n        $comment .= '<div>'.$date.'</div>';\n        $comment .= '<br />';\n        $comment .= '</div>';\n        $comment .= '</div>';\n\n        $comment .= '<div class=\"col-md-3 col-xs-3 social-post-answers\">';\n        $comment .= '<div class=\"pull-right btn-group btn-group-sm\">';\n\n        $comment .= MessageManager::getLikesButton(\n            $message['id'],\n            $currentUserId\n        );\n\n        $isOwnWall = $currentUserId == $userIdLoop || $currentUserId == $receiverId;\n        if ($isOwnWall) {\n            $comment .= Display::url(\n                    Display::returnFontAwesomeIcon('trash', '', true),\n                'javascript:void(0)',\n                [\n                    'id' => 'message_'.$message['id'],\n                    'title' => get_lang('SocialMessageDelete'),\n                    'onclick' => 'deleteComment('.$message['id'].')',\n                    'class' => 'btn btn-default',\n                ]\n            );\n        }\n        $comment .= '</div>';\n        $comment .= '</div>';\n        $comment .= '</div>';\n\n        return $comment;\n    }\n\n    /**\n     * @param array $message\n     *\n     * @return array\n     */\n    public static function getAttachmentPreviewList($message)\n    {\n        $messageId = $message['id'];\n\n        $list = [];\n\n        if (empty($message['group_id'])) {\n            $files = MessageManager::getAttachmentList($messageId);\n            if ($files) {\n                $downloadUrl = api_get_path(WEB_CODE_PATH).'social/download.php?message_id='.$messageId;\n                foreach ($files as $row_file) {\n                    $url = $downloadUrl.'&attachment_id='.$row_file['id'];\n                    $display = Display::fileHtmlGuesser($row_file['filename'], $url);\n                    $list[] = $display;\n                }\n            }\n        } else {\n            $list = MessageManager::getAttachmentLinkList($messageId, 0);\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param array $message\n     *\n     * @return string\n     */\n    public static function getPostAttachment($message)\n    {\n        $previews = self::getAttachmentPreviewList($message);\n\n        if (empty($previews)) {\n            return '';\n        }\n\n        return implode('', $previews);\n    }\n\n    /**\n     * @param array $messages\n     *\n     * @return array\n     */\n    public static function formatWallMessages($messages)\n    {\n        $data = [];\n        $users = [];\n        foreach ($messages as $key => $message) {\n            $userIdLoop = $message['user_sender_id'];\n            $userFriendIdLoop = $message['user_receiver_id'];\n            if (!isset($users[$userIdLoop])) {\n                $users[$userIdLoop] = api_get_user_info($userIdLoop);\n            }\n\n            if (!isset($users[$userFriendIdLoop])) {\n                $users[$userFriendIdLoop] = api_get_user_info($userFriendIdLoop);\n            }\n\n            $html = self::headerMessagePost(\n                $users[$userIdLoop],\n                $users[$userFriendIdLoop],\n                $message\n            );\n\n            $data[$key] = $message;\n            $data[$key]['html'] = $html;\n        }\n\n        return $data;\n    }\n\n    /**\n     * get html data with OpenGrap passing the URL.\n     *\n     * @param $link url\n     *\n     * @return string data html\n     */\n    public static function readContentWithOpenGraph($link)\n    {\n        if (strpos($link, \"://\") === false && substr($link, 0, 1) != \"/\") {\n            $link = \"http://\".$link;\n        }\n        $graph = OpenGraph::fetch($link);\n        $link = parse_url($link);\n        $host = $link['host'] ? strtoupper($link['host']) : $link['path'];\n        if (!$graph) {\n            return false;\n        }\n        $url = $graph->url;\n        $image = $graph->image;\n        $description = $graph->description;\n        $title = $graph->title;\n        $html = '<div class=\"thumbnail social-thumbnail\">';\n        $html .= empty($image) ? '' : '<a target=\"_blank\" href=\"'.$url.'\">\n                <img class=\"img-responsive social-image\" src=\"'.$image.'\" /></a>';\n        $html .= '<div class=\"social-description\">';\n        $html .= '<a target=\"_blank\" href=\"'.$url.'\"><h5 class=\"social-title\"><b>'.$title.'</b></h5></a>';\n        $html .= empty($description) ? '' : '<span>'.$description.'</span>';\n        $html .= empty($host) ? '' : '<p>'.$host.'</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * verify if Url Exist - Using Curl.\n     *\n     * @param $uri url\n     *\n     * @return bool\n     */\n    public static function verifyUrl($uri)\n    {\n        $curl = curl_init($uri);\n        curl_setopt($curl, CURLOPT_FAILONERROR, true);\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 15);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);\n        $response = curl_exec($curl);\n        curl_close($curl);\n        if (!empty($response)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Soft delete a message and his chidren.\n     *\n     * @param int $id id message to delete\n     *\n     * @return bool status query\n     */\n    public static function deleteMessage($id)\n    {\n        $id = (int) $id;\n        $messageInfo = MessageManager::get_message_by_id($id);\n        if (!empty($messageInfo)) {\n            // Delete comments too\n            $messages = MessageManager::getMessagesByParent($id);\n            if (!empty($messages)) {\n                foreach ($messages as $message) {\n                    self::deleteMessage($message['id']);\n                }\n            }\n\n            // Soft delete message\n            $tblMessage = Database::get_main_table(TABLE_MESSAGE);\n            $statusMessage = MESSAGE_STATUS_WALL_DELETE;\n            $sql = \"UPDATE $tblMessage SET msg_status = '$statusMessage' WHERE id = '{$id}' \";\n            Database::query($sql);\n\n            MessageManager::delete_message_attachment_file($id, $messageInfo['user_sender_id']);\n            MessageManager::delete_message_attachment_file($id, $messageInfo['user_receiver_id']);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Generate the social block for a user.\n     *\n     * @param int    $userId            The user id\n     * @param string $groupBlock        Optional. Highlight link possible values:\n     *                                  group_add, home, messages, messages_inbox, messages_compose,\n     *                                  messages_outbox, invitations, shared_profile, friends, groups, search\n     * @param int    $groupId           Optional. Group ID\n     * @param bool   $show_full_profile\n     *\n     * @return string The HTML code with the social block\n     */\n    public static function setSocialUserBlock(\n        Template $template,\n        $userId,\n        $groupBlock = '',\n        $groupId = 0,\n        $show_full_profile = true\n    ) {\n        if (api_get_setting('allow_social_tool') !== 'true') {\n            return '';\n        }\n\n        $currentUserId = api_get_user_id();\n        $userId = (int) $userId;\n        $userRelationType = 0;\n\n        $socialAvatarBlock = self::show_social_avatar_block(\n            $groupBlock,\n            $groupId,\n            $userId\n        );\n\n        $profileEditionLink = null;\n        if ($currentUserId === $userId) {\n            $profileEditionLink = Display::getProfileEditionLink($userId);\n        } else {\n            $userRelationType = self::get_relation_between_contacts($currentUserId, $userId);\n        }\n\n        $options = api_get_configuration_value('profile_fields_visibility');\n        if (isset($options['options'])) {\n            $options = $options['options'];\n        }\n\n        $vCardUserLink = Display::getVCardUserLink($userId);\n        if (isset($options['vcard']) && $options['vcard'] === false) {\n            $vCardUserLink = '';\n        }\n\n        $userInfo = api_get_user_info($userId, true, false, true, true);\n\n        if (isset($options['firstname']) && $options['firstname'] === false) {\n            $userInfo['firstname'] = '';\n        }\n        if (isset($options['lastname']) && $options['lastname'] === false) {\n            $userInfo['lastname'] = '';\n        }\n\n        if (isset($options['email']) && $options['email'] === false) {\n            $userInfo['email'] = '';\n        }\n\n        // Ofaj\n        $hasCertificates = Certificate::getCertificateByUser($userId);\n        $userInfo['has_certificates'] = 0;\n        if (!empty($hasCertificates)) {\n            $userInfo['has_certificates'] = 1;\n        }\n\n        $userInfo['is_admin'] = UserManager::is_admin($userId);\n\n        $languageId = api_get_language_id($userInfo['language']);\n        $languageInfo = api_get_language_info($languageId);\n        if ($languageInfo) {\n            $userInfo['language'] = [\n                'label' => $languageInfo['original_name'],\n                'value' => $languageInfo['english_name'],\n                'code' => $languageInfo['isocode'],\n            ];\n        }\n\n        if (isset($options['language']) && $options['language'] === false) {\n            $userInfo['language'] = '';\n        }\n\n        if (isset($options['photo']) && $options['photo'] === false) {\n            $socialAvatarBlock = '';\n        }\n\n        $extraFieldBlock = self::getExtraFieldBlock($userId, true);\n        $showLanguageFlag = api_get_configuration_value('social_show_language_flag_in_profile');\n\n        $template->assign('user', $userInfo);\n        $template->assign('show_language_flag', $showLanguageFlag);\n        $template->assign('extra_info', $extraFieldBlock);\n        $template->assign('social_avatar_block', $socialAvatarBlock);\n        $template->assign('profile_edition_link', $profileEditionLink);\n        //Added the link to export the vCard to the Template\n\n        //If not friend $show_full_profile is False and the user can't see Email Address and Vcard Download Link\n        if ($show_full_profile) {\n            $template->assign('vcard_user_link', $vCardUserLink);\n        }\n\n        if (api_get_setting('gamification_mode') === '1') {\n            $gamificationPoints = GamificationUtils::getTotalUserPoints(\n                $userId,\n                $userInfo['status']\n            );\n\n            $template->assign('gamification_points', $gamificationPoints);\n        }\n        $chatEnabled = api_is_global_chat_enabled();\n\n        if (isset($options['chat']) && $options['chat'] === false) {\n            $chatEnabled = '';\n        }\n\n        $template->assign('chat_enabled', $chatEnabled);\n        $template->assign('user_relation', $userRelationType);\n        $template->assign('user_relation_type_friend', USER_RELATION_TYPE_FRIEND);\n        $template->assign('show_full_profile', $show_full_profile);\n\n        $templateName = $template->get_template('social/user_block.tpl');\n\n        if (in_array($groupBlock, ['groups', 'group_edit', 'member_list'])) {\n            $templateName = $template->get_template('social/group_block.tpl');\n        }\n\n        $template->assign('social_avatar_block', $template->fetch($templateName));\n    }\n\n    /**\n     * @param int $user_id\n     * @param $link_shared\n     * @param bool $showLinkToChat\n     *\n     * @return string\n     */\n    public static function listMyFriendsBlock($user_id, $link_shared = '', $showLinkToChat = false)\n    {\n        //SOCIALGOODFRIEND , USER_RELATION_TYPE_FRIEND, USER_RELATION_TYPE_PARENT\n        $friends = self::get_friends($user_id, USER_RELATION_TYPE_FRIEND);\n        $numberFriends = count($friends);\n        $friendHtml = '';\n\n        if (!empty($numberFriends)) {\n            $friendHtml .= '<div class=\"list-group contact-list\">';\n            $j = 1;\n\n            usort(\n                $friends,\n                function ($a, $b) {\n                    return strcmp($b['user_info']['user_is_online_in_chat'], $a['user_info']['user_is_online_in_chat']);\n                }\n            );\n\n            foreach ($friends as $friend) {\n                if ($j > $numberFriends) {\n                    break;\n                }\n                $name_user = api_get_person_name($friend['firstName'], $friend['lastName']);\n                $user_info_friend = api_get_user_info($friend['friend_user_id'], true);\n\n                $statusIcon = Display::return_icon('statusoffline.png', get_lang('Offline'));\n                $status = 0;\n                if (!empty($user_info_friend['user_is_online_in_chat'])) {\n                    $statusIcon = Display::return_icon('statusonline.png', get_lang('Online'));\n                    $status = 1;\n                }\n\n                $friendAvatarMedium = UserManager::getUserPicture(\n                    $friend['friend_user_id'],\n                    USER_IMAGE_SIZE_MEDIUM\n                );\n                $friendAvatarSmall = UserManager::getUserPicture(\n                    $friend['friend_user_id'],\n                    USER_IMAGE_SIZE_SMALL\n                );\n                $friend_avatar = '<img src=\"'.$friendAvatarMedium.'\" id=\"imgfriend_'.$friend['friend_user_id'].'\" title=\"'.$name_user.'\" class=\"user-image\"/>';\n\n                $relation = self::get_relation_between_contacts(\n                    $friend['friend_user_id'],\n                    api_get_user_id()\n                );\n\n                if ($showLinkToChat) {\n                    $friendHtml .= '<a onclick=\"javascript:chatWith(\\''.$friend['friend_user_id'].'\\', \\''.$name_user.'\\', \\''.$status.'\\',\\''.$friendAvatarSmall.'\\')\" href=\"javascript:void(0);\" class=\"list-group-item\">';\n                    $friendHtml .= $friend_avatar.' <span class=\"username\">'.$name_user.'</span>';\n                    $friendHtml .= '<span class=\"status\">'.$statusIcon.'</span>';\n                } else {\n                    $link_shared = empty($link_shared) ? '' : '&'.$link_shared;\n                    $friendHtml .= '<a href=\"profile.php?'.'u='.$friend['friend_user_id'].$link_shared.'\" class=\"list-group-item\">';\n                    $friendHtml .= $friend_avatar.' <span class=\"username\">'.$name_user.'</span>';\n                    $friendHtml .= '<span class=\"status\">'.$statusIcon.'</span>';\n                }\n\n                $friendHtml .= '</a>';\n\n                $j++;\n            }\n            $friendHtml .= '</div>';\n        } else {\n            $friendHtml = Display::return_message(get_lang('NoFriendsInYourContactList'), 'warning');\n        }\n\n        return $friendHtml;\n    }\n\n    /**\n     * @return string Get the JS code necessary for social wall to load open graph from URLs.\n     */\n    public static function getScriptToGetOpenGraph()\n    {\n        return '<script>\n            $(function() {\n                $(\"[name=\\'social_wall_new_msg_main\\']\").on(\"paste\", function(e) {\n                    $.ajax({\n                        contentType: \"application/x-www-form-urlencoded\",\n                        beforeSend: function() {\n                            $(\"[name=\\'wall_post_button\\']\").prop( \"disabled\", true );\n                            $(\".panel-preview\").hide();\n                            $(\".spinner\").html(\"'\n                                .'<div class=\\'text-center\\'>'\n                                .'<em class=\\'fa fa-spinner fa-pulse fa-1x\\'></em>'\n                                .'<p>'.get_lang('Loading').' '.get_lang('Preview').'</p>'\n                                .'</div>'\n                            .'\");\n                        },\n                        type: \"POST\",\n                        url: \"'.api_get_path(WEB_AJAX_PATH).'social.ajax.php?a=read_url_with_open_graph\",\n                        data: \"social_wall_new_msg_main=\" + e.originalEvent.clipboardData.getData(\"text\"),\n                        success: function(response) {\n                            $(\"[name=\\'wall_post_button\\']\").prop(\"disabled\", false);\n                            if (!response == false) {\n                                $(\".spinner\").html(\"\");\n                                $(\".panel-preview\").show();\n                                $(\".url_preview\").html(response);\n                                $(\"[name=\\'url_content\\']\").val(response);\n                                $(\".url_preview img\").addClass(\"img-responsive\");\n                            } else {\n                                $(\".spinner\").html(\"\");\n                            }\n                        }\n                    });\n                });\n            });\n        </script>';\n    }\n\n    /**\n     * @param string $urlForm\n     *\n     * @return string\n     */\n    public static function getWallForm($urlForm)\n    {\n        $userId = isset($_GET['u']) ? '?u='.intval($_GET['u']) : '';\n        $form = new FormValidator(\n            'social_wall_main',\n            'post',\n            $urlForm.$userId,\n            null,\n            ['enctype' => 'multipart/form-data'],\n            FormValidator::LAYOUT_HORIZONTAL\n        );\n\n        $socialWallPlaceholder = isset($_GET['u']) ? get_lang('SocialWallWriteNewPostToFriend') : get_lang(\n            'SocialWallWhatAreYouThinkingAbout'\n        );\n\n        $form->addTextarea(\n            'social_wall_new_msg_main',\n            null,\n            [\n                'placeholder' => $socialWallPlaceholder,\n                'cols-size' => [1, 12, 1],\n                'aria-label' => $socialWallPlaceholder,\n            ]\n        );\n        $form->addHtml('<div class=\"form-group\">');\n        $form->addHtml('<div class=\"col-sm-6\">');\n        $form->addFile('picture', get_lang('UploadFile'), ['custom' => true]);\n        $form->addHtml('</div>');\n        $form->addHtml('<div class=\"col-sm-6 \"><div class=\"pull-right\">');\n        $form->addButtonSend(\n            get_lang('Post'),\n            'wall_post_button',\n            false,\n            [\n                'cols-size' => [1, 10, 1],\n                'custom' => true,\n            ]\n        );\n        $form->addHtml('</div></div>');\n        $form->addHtml('</div>');\n        $form->addHidden('url_content', '');\n\n        return Display::panel($form->returnForm(), get_lang('SocialWall'));\n    }\n\n    /**\n     * Show middle section for Portfolio extended.\n     * Must be active on main/admin/settings.php?category=User into extended_profile.\n     *\n     * @param string $urlForm\n     *\n     * @return string\n     */\n    public static function getWallFormPortfolio($urlForm)\n    {\n        $userId = isset($_GET['u']) ? (int) $_GET['u'] : 0;\n        $userId = $userId !== 0 ? $userId : api_get_user_id();\n        $user_info = api_get_user_info($userId);\n        $friend = true;\n        $editPorfolioLink = '';\n        if ($userId != api_get_user_id()) {\n            $friend = self::get_relation_between_contacts(api_get_user_id(), $userId);\n        } else {\n            $editPorfolioLink .= \"<div class=\\\"pull-right\\\" style='margin-top: -5px'>\".\n                '<a href=\"/main/auth/profile.php?type=extended#openarea\" class=\"btn btn-default btn-sm btn-social-edit\">'.\n                \"<i class=\\\"fa fa-pencil\\\" aria-hidden=\\\"true\\\"></i>\".\n                '</a>'.\n                \"</div>\";\n        }\n        if ($friend == 0) {\n            /* if has not relation, get current user */\n            $userId = api_get_user_id();\n            $user_info = api_get_user_info($userId);\n        }\n        // Images uploaded by course\n        $more_info = '';\n\n        // Productions\n        $production_list = UserManager::build_production_list($userId);\n\n        $form = new FormValidator(\n            'social_wall_main',\n            'post',\n            $urlForm.$userId,\n            null,\n            ['enctype' => 'multipart/form-data'],\n            FormValidator::LAYOUT_HORIZONTAL\n        );\n\n        $socialWallPlaceholder = isset($_GET['u']) ? get_lang('SocialWallWriteNewPostToFriend') : get_lang(\n            'SocialWallWhatAreYouThinkingAbout'\n        );\n\n        if (!empty($user_info['competences']) || !empty($user_info['diplomas'])\n            || !empty($user_info['openarea']) || !empty($user_info['teach'])) {\n            // $more_info .= '<div><h3>'.get_lang('MoreInformation').'</h3></div>';\n            //    MY PERSONAL OPEN AREA\n            if (!empty($user_info['openarea'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyPersonalOpenArea').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['openarea'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY COMPETENCES\n            if (!empty($user_info['competences'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyCompetences').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['competences'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY DIPLOMAS\n            if (!empty($user_info['diplomas'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyDiplomas').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['diplomas'].'</div>';\n                $more_info .= '<br />';\n            }\n            //    MY PRODUCTIONS\n            if (!empty($production_list)) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyProductions').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$production_list.'</div>';\n                $more_info .= '<br />';\n            }\n            // WHAT I AM ABLE TO TEACH\n            if (!empty($user_info['teach'])) {\n                $more_info .= '<div class=\"social-actions-message\"><strong>'.get_lang('MyTeach').'</strong></div>';\n                $more_info .= '<div class=\"social-profile-extended\">'.$user_info['teach'].'</div>';\n                $more_info .= '<br />';\n            }\n        }\n\n        $form->addTextarea(\n            'social_wall_new_msg_main',\n            null,\n            [\n                'placeholder' => $socialWallPlaceholder,\n                'cols-size' => [1, 12, 1],\n                'aria-label' => $socialWallPlaceholder,\n            ]\n        );\n        $form->addHtml('<div class=\"form-group\">');\n        $form->addHtml('<div class=\"col-sm-6\">');\n        $form->addFile('picture', get_lang('UploadFile'), ['custom' => true]);\n        $form->addHtml('</div>');\n        $form->addHtml('<div class=\"col-sm-6 \"><div class=\"pull-right\">');\n        $form->addButtonSend(\n            get_lang('Post'),\n            'wall_post_button',\n            false,\n            [\n                'cols-size' => [1, 10, 1],\n                'custom' => true,\n            ]\n        );\n        $form->addHtml('</div></div>');\n        $form->addHtml('</div>');\n        $form->addHidden('url_content', '');\n\n        return Display::panel($more_info, get_lang('Portfolio').$editPorfolioLink);\n    }\n\n    /**\n     * @param int   $userId\n     * @param int   $start\n     * @param int   $length\n     * @param array $threadList\n     *\n     * @return array\n     */\n    public static function getMyWallMessages($userId, $start = 0, $length = 10, $threadList = [])\n    {\n        $userGroup = new UserGroup();\n        $groups = $userGroup->get_groups_by_user($userId, [GROUP_USER_PERMISSION_READER, GROUP_USER_PERMISSION_ADMIN]);\n        $groupList = [];\n        if (!empty($groups)) {\n            $groupList = array_column($groups, 'id');\n        }\n\n        $friends = self::get_friends($userId, USER_RELATION_TYPE_FRIEND);\n        $friendList = [];\n        if (!empty($friends)) {\n            $friendList = array_column($friends, 'friend_user_id');\n        }\n\n        $messages = self::getWallMessages(\n            $userId,\n            0,\n            $groupList,\n            $friendList,\n            '',\n            $start,\n            $length,\n            false,\n            $threadList\n        );\n\n        $countPost = self::getCountWallMessagesByUser($userId, $groupList, $friendList, $threadList);\n        $messages = self::formatWallMessages($messages);\n\n        $html = '';\n        foreach ($messages as $message) {\n            $post = $message['html'];\n            $comments = '';\n            if (in_array($message['msg_status'], [MESSAGE_STATUS_WALL_POST, MESSAGE_STATUS_PROMOTED])) {\n                $comments = self::getWallPostComments($userId, $message);\n            }\n\n            $html .= self::wrapPost($message, $post.$comments);\n        }\n\n        return [\n            'posts' => $html,\n            'count' => $countPost,\n        ];\n    }\n\n    /**\n     * @param string $message\n     * @param string $content\n     *\n     * @return string\n     */\n    public static function wrapPost($message, $content)\n    {\n        $class = '';\n        if ($message['msg_status'] === MESSAGE_STATUS_PROMOTED) {\n            $class = 'promoted_post';\n        }\n\n        return Display::panel($content, '',\n            '',\n            'default',\n            '',\n            'post_'.$message['id'],\n            null,\n            $class\n        );\n    }\n\n    /**\n     * @param int   $userId\n     * @param array $groupList\n     * @param array $friendList\n     * @param array $threadList\n     *\n     * @return int\n     */\n    public static function getCountWallMessagesByUser($userId, $groupList = [], $friendList = [], $threadList = [])\n    {\n        return self::getWallMessages(\n            $userId,\n            0,\n            $groupList,\n            $friendList,\n            '',\n            0,\n            0,\n            true,\n            $threadList\n        );\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getWallMessagesByUser($userId)\n    {\n        $messages = self::getWallMessages($userId);\n        $messages = self::formatWallMessages($messages);\n\n        $html = '';\n        foreach ($messages as $message) {\n            $post = $message['html'];\n            $comments = self::getWallPostComments($userId, $message);\n            $html .= self::wrapPost($message, $post.$comments);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Get HTML code block for user skills.\n     *\n     * @param int    $userId      The user ID\n     * @param string $orientation\n     *\n     * @return string\n     */\n    public static function getSkillBlock($userId, $orientation = 'horizontal')\n    {\n        if (Skill::isAllowed($userId, false) === false) {\n            return '';\n        }\n\n        $skill = new Skill();\n        $ranking = $skill->getUserSkillRanking($userId);\n\n        $template = new Template(null, false, false, false, false, false);\n        $template->assign('ranking', $ranking);\n        $template->assign('orientation', $orientation);\n        $template->assign('skills', $skill->getUserSkillsTable($userId, 0, 0, false)['skills']);\n        $template->assign('user_id', $userId);\n        $template->assign('show_skills_report_link', api_is_student() || api_is_student_boss() || api_is_drh());\n\n        $skillBlock = $template->get_template('social/skills_block.tpl');\n\n        return $template->fetch($skillBlock);\n    }\n\n    /**\n     * @param int  $user_id\n     * @param bool $isArray\n     *\n     * @return string|array\n     */\n    public static function getExtraFieldBlock($user_id, $isArray = false)\n    {\n        $fieldVisibility = api_get_configuration_value('profile_fields_visibility');\n        $fieldVisibilityKeys = [];\n        if (isset($fieldVisibility['options'])) {\n            $fieldVisibility = $fieldVisibility['options'];\n            $fieldVisibilityKeys = array_keys($fieldVisibility);\n        }\n\n        $t_ufo = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n        $extra_user_data = UserManager::get_extra_user_data($user_id);\n\n        $extra_information = '';\n        if (is_array($extra_user_data) && count($extra_user_data) > 0) {\n            $extra_information_value = '';\n            $extraField = new ExtraField('user');\n            $listType = [];\n            $extraFieldItem = [];\n            foreach ($extra_user_data as $key => $data) {\n                if (empty($data)) {\n                    continue;\n                }\n                if (in_array($key, $fieldVisibilityKeys) && $fieldVisibility[$key] === false) {\n                    continue;\n                }\n\n                // Avoiding parameters\n                if (in_array(\n                    $key,\n                    [\n                        'mail_notify_invitation',\n                        'mail_notify_message',\n                        'mail_notify_group_message',\n                    ]\n                )) {\n                    continue;\n                }\n                // get display text, visibility and type from user_field table\n                $field_variable = str_replace('extra_', '', $key);\n\n                $extraFieldInfo = $extraField->get_handler_field_info_by_field_variable(\n                    $field_variable\n                );\n\n                if (in_array($extraFieldInfo['variable'], ['skype', 'linkedin_url'])) {\n                    continue;\n                }\n\n                // if is not visible skip\n                if ($extraFieldInfo['visible_to_self'] != 1) {\n                    continue;\n                }\n\n                // if is not visible to others skip also\n                if ($extraFieldInfo['visible_to_others'] != 1) {\n                    continue;\n                }\n\n                if (is_array($data)) {\n                    switch ($extraFieldInfo['field_type']) {\n                        case ExtraField::FIELD_TYPE_RADIO:\n                            $objEfOption = new ExtraFieldOption('user');\n                            $value = $data['extra_'.$extraFieldInfo['variable']];\n                            $optionInfo = $objEfOption->get_field_option_by_field_and_option(\n                                $extraFieldInfo['id'],\n                                $value\n                            );\n\n                            if ($optionInfo && isset($optionInfo[0])) {\n                                $optionInfo = $optionInfo[0];\n                                $extraFieldItem = [\n                                    'variable' => $extraFieldInfo['variable'],\n                                    'label' => ucfirst($extraFieldInfo['display_text']),\n                                    'value' => $optionInfo['display_text'],\n                                ];\n                            } else {\n                                $extraFieldItem = [\n                                    'variable' => $extraFieldInfo['variable'],\n                                    'label' => ucfirst($extraFieldInfo['display_text']),\n                                    'value' => implode(',', $data),\n                                ];\n                            }\n                            break;\n                        default:\n                            $extra_information_value .=\n                                '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).' '\n                                .' '.implode(',', $data).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => implode(',', $data),\n                            ];\n                            break;\n                    }\n                } else {\n                    switch ($extraFieldInfo['field_type']) {\n                        case ExtraField::FIELD_TYPE_RADIO:\n                            $objEfOption = new ExtraFieldOption('user');\n                            $optionInfo = $objEfOption->get_field_option_by_field_and_option($extraFieldInfo['id'], $extraFieldInfo['value']);\n                            break;\n                        case ExtraField::FIELD_TYPE_GEOLOCALIZATION_COORDINATES:\n                        case ExtraField::FIELD_TYPE_GEOLOCALIZATION:\n                            $data = explode('::', $data);\n                            $data = $data[0];\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_DOUBLE_SELECT:\n                            $id_options = explode('::', $data);\n                            $value_options = [];\n                            // get option display text from user_field_options table\n                            foreach ($id_options as $id_option) {\n                                $sql = \"SELECT display_text\n                                    FROM $t_ufo\n                                    WHERE id = '$id_option'\";\n                                $res_options = Database::query($sql);\n                                $row_options = Database::fetch_row($res_options);\n                                $value_options[] = $row_options[0];\n                            }\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '\n                                .' '.implode(' ', $value_options).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $value_options,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_TAG:\n                            $user_tags = UserManager::get_user_tags($user_id, $extraFieldInfo['id']);\n\n                            $tag_tmp = '';\n                            foreach ($user_tags as $tags) {\n                                $tag_tmp .= '<a class=\"label label_tag\"'\n                                    .' href=\"'.api_get_path(WEB_PATH).'main/social/search.php?q='.$tags['tag'].'\">'\n                                    .$tags['tag']\n                                    .'</a>';\n                            }\n                            if (is_array($user_tags) && count($user_tags) > 0) {\n                                $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '\n                                    .' '.$tag_tmp.'</li>';\n                            }\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $tag_tmp,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_SOCIAL_PROFILE:\n                            $icon_path = UserManager::get_favicon_from_url($data);\n                            if (self::verifyUrl($icon_path) == false) {\n                                break;\n                            }\n                            $bottom = '0.2';\n                            //quick hack for hi5\n                            $domain = parse_url($icon_path, PHP_URL_HOST);\n                            if ($domain == 'www.hi5.com' || $domain == 'hi5.com') {\n                                $bottom = '-0.8';\n                            }\n                            $data = '<a href=\"'.$data.'\">'\n                                .'<img src=\"'.$icon_path.'\" alt=\"icon\"'\n                                .' style=\"margin-right:0.5em;margin-bottom:'.$bottom.'em;\" />'\n                                .$extraFieldInfo['display_text']\n                                .'</a>';\n                            $extra_information_value .= '<li class=\"list-group-item\">'.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_SELECT_WITH_TEXT_FIELD:\n                            $parsedData = explode('::', $data);\n\n                            if (!$parsedData) {\n                                break;\n                            }\n\n                            $objEfOption = new ExtraFieldOption('user');\n                            $optionInfo = $objEfOption->get($parsedData[0]);\n\n                            $extra_information_value .= '<li class=\"list-group-item\">'\n                                .$optionInfo['display_text'].': '\n                                .$parsedData[1].'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $parsedData[1],\n                            ];\n                            break;\n                        case ExtraField::FIELD_TYPE_TRIPLE_SELECT:\n                            $optionIds = explode(';', $data);\n                            $optionValues = [];\n\n                            foreach ($optionIds as $optionId) {\n                                $objEfOption = new ExtraFieldOption('user');\n                                $optionInfo = $objEfOption->get($optionId);\n\n                                $optionValues[] = $optionInfo['display_text'];\n                            }\n                            $extra_information_value .= '<li class=\"list-group-item\">'\n                                .ucfirst($extraFieldInfo['display_text']).': '\n                                .implode(' ', $optionValues).'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => implode(' ', $optionValues),\n                            ];\n                            break;\n                        default:\n                            // Ofaj\n                            // Converts \"Date of birth\" into \"age\"\n                            if ($key === 'terms_datedenaissance') {\n                                $dataArray = date_to_str_ago($data, 'UTC', true);\n                                $dataToString = isset($dataArray['years']) && !empty($dataArray['years']) ? $dataArray['years'] : 0;\n                                if (!empty($dataToString)) {\n                                    $data = $dataToString;\n                                    $extraFieldInfo['display_text'] = get_lang('Age');\n                                }\n                            }\n\n                            $extra_information_value .= '<li class=\"list-group-item\">'.ucfirst($extraFieldInfo['display_text']).': '.$data.'</li>';\n                            $extraFieldItem = [\n                                'variable' => $extraFieldInfo['variable'],\n                                'label' => ucfirst($extraFieldInfo['display_text']),\n                                'value' => $data,\n                            ];\n                            break;\n                    }\n                }\n\n                $listType[] = $extraFieldItem;\n            }\n\n            if ($isArray) {\n                return $listType;\n            } else {\n                // if there are information to show\n                if (!empty($extra_information_value)) {\n                    $extra_information_value = '<ul class=\"list-group\">'.$extra_information_value.'</ul>';\n                    $extra_information .= Display::panelCollapse(\n                        get_lang('ExtraInformation'),\n                        $extra_information_value,\n                        'sn-extra-information',\n                        null,\n                        'sn-extra-accordion',\n                        'sn-extra-collapse'\n                    );\n                }\n            }\n        }\n\n        return $extra_information;\n    }\n\n    /**\n     * @param string $url\n     */\n    public static function handlePosts($url)\n    {\n        $friendId = isset($_GET['u']) ? (int) $_GET['u'] : api_get_user_id();\n        $url = Security::remove_XSS($url);\n\n        // Main post\n        if (!empty($_POST['social_wall_new_msg_main']) || !empty($_FILES['picture']['tmp_name'])) {\n            $messageContent = $_POST['social_wall_new_msg_main'];\n            if (!empty($_POST['url_content'])) {\n                $messageContent = $_POST['social_wall_new_msg_main'].'<br /><br />'.$_POST['url_content'];\n            }\n\n            $messageId = self::sendWallMessage(\n                api_get_user_id(),\n                $friendId,\n                $messageContent,\n                0,\n                MESSAGE_STATUS_WALL_POST\n            );\n\n            if ($messageId && !empty($_FILES['picture']['tmp_name'])) {\n                self::sendWallMessageAttachmentFile(\n                    api_get_user_id(),\n                    $_FILES['picture'],\n                    $messageId\n                );\n            }\n\n            Display::addFlash(Display::return_message(get_lang('MessageSent')));\n            header('Location: '.$url);\n            exit;\n        }\n    }\n\n    /**\n     * @param int   $countPost\n     * @param array $htmlHeadXtra\n     */\n    public static function getScrollJs($countPost, &$htmlHeadXtra)\n    {\n        // $ajax_url = api_get_path(WEB_AJAX_PATH).'message.ajax.php';\n        $socialAjaxUrl = api_get_path(WEB_AJAX_PATH).'social.ajax.php';\n        $javascriptDir = api_get_path(LIBRARY_PATH).'javascript/';\n        $locale = api_get_language_isocode();\n\n        // Add Jquery scroll pagination plugin\n        $htmlHeadXtra[] = api_get_js('jscroll/jquery.jscroll.js');\n        // Add Jquery Time ago plugin\n        $htmlHeadXtra[] = api_get_asset('jquery-timeago/jquery.timeago.js');\n        $timeAgoLocaleDir = $javascriptDir.'jquery-timeago/locales/jquery.timeago.'.$locale.'.js';\n        if (file_exists($timeAgoLocaleDir)) {\n            $htmlHeadXtra[] = api_get_js('jquery-timeago/locales/jquery.timeago.'.$locale.'.js');\n        }\n\n        if ($countPost > self::DEFAULT_WALL_POSTS) {\n            $htmlHeadXtra[] = '<script>\n            $(function() {\n                var container = $(\"#wallMessages\");\n                container.jscroll({\n                    loadingHtml: \"<div class=\\\"well_border\\\">'.get_lang('Loading').' </div>\",\n                    nextSelector: \"a.nextPage:last\",\n                    contentSelector: \"\",\n                    callback: timeAgo\n                });\n            });\n            </script>';\n        }\n\n        $htmlHeadXtra[] = '<script>\n            function deleteMessage(id)\n            {\n                $.ajax({\n                    url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#message_\" + id).parent().parent().parent().parent().html(result);\n                        }\n                    }\n                });\n            }\n\n            function deleteComment(id)\n            {\n                $.ajax({\n                    url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#message_\" + id).parent().parent().parent().html(result);\n                        }\n                    }\n                });\n            }\n\n            function submitComment(messageId)\n            {\n                var data = $(\"#form_comment_\"+messageId).serializeArray();\n                $.ajax({\n                    type : \"POST\",\n                    url: \"'.$socialAjaxUrl.'?a=send_comment\" + \"&id=\" + messageId,\n                    data: data,\n                    success: function (result) {\n                        if (result) {\n                            $(\"#post_\" + messageId + \" textarea\").val(\"\");\n                            $(\"#post_\" + messageId + \" .sub-mediapost\").prepend(result);\n                            $(\"#post_\" + messageId + \" .sub-mediapost\").append(\n                                $(\\'<div id=result_\\' + messageId +\\'>'.addslashes(get_lang('Saved')).'</div>\\')\n                            );\n\n                            $(\"#result_\" + messageId + \"\").fadeIn(\"fast\", function() {\n                                $(\"#result_\" + messageId + \"\").delay(1000).fadeOut(\"fast\", function() {\n                                    $(this).remove();\n                                });\n                            });\n                        }\n                    }\n                });\n            }\n\n            $(function() {\n                timeAgo();\n\n                /*$(\".delete_message\").on(\"click\", function() {\n                    var id = $(this).attr(\"id\");\n                    id = id.split(\"_\")[1];\n                    $.ajax({\n                        url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                        success: function (result) {\n                            if (result) {\n                                $(\"#message_\" + id).parent().parent().parent().parent().html(result);\n                            }\n                        }\n                    });\n                });\n\n\n                $(\".delete_comment\").on(\"click\", function() {\n                    var id = $(this).attr(\"id\");\n                    id = id.split(\"_\")[1];\n                    $.ajax({\n                        url: \"'.$socialAjaxUrl.'?a=delete_message\" + \"&id=\" + id,\n                        success: function (result) {\n                            if (result) {\n                                $(\"#message_\" + id).parent().parent().parent().html(result);\n                            }\n                        }\n                    });\n                });\n                */\n            });\n\n            function timeAgo() {\n                $(\".timeago\").timeago();\n            }\n            </script>';\n    }\n\n    /**\n     * @param int $userId\n     * @param int $countPost\n     *\n     * @return string\n     */\n    public static function getAutoExtendLink($userId, $countPost)\n    {\n        $userId = (int) $userId;\n        $socialAjaxUrl = api_get_path(WEB_AJAX_PATH).'social.ajax.php';\n        $socialAutoExtendLink = '';\n        if ($countPost > self::DEFAULT_WALL_POSTS) {\n            $socialAutoExtendLink = Display::url(\n                get_lang('SeeMore'),\n                $socialAjaxUrl.'?u='.$userId.'&a=list_wall_message&start='.\n                self::DEFAULT_WALL_POSTS.'&length='.self::DEFAULT_SCROLL_NEW_POST,\n                [\n                    'class' => 'nextPage next',\n                ]\n            );\n        }\n\n        return $socialAutoExtendLink;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getThreadList($userId)\n    {\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n\n        require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n\n        $threads = [];\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n            getNotificationsPerUser($userId, true, $forumCourseId);\n            $notification = Session::read('forum_notification');\n            Session::erase('forum_notification');\n\n            $threadUrlBase = api_get_path(WEB_CODE_PATH).'forum/viewthread.php?'.http_build_query([\n                'cidReq' => $courseInfo['code'],\n            ]).'&';\n            if (isset($notification['thread']) && !empty($notification['thread'])) {\n                $threadList = array_filter(array_unique($notification['thread']));\n                $em = Database::getManager();\n                $repo = $em->getRepository('ChamiloCourseBundle:CForumThread');\n                foreach ($threadList as $threadId) {\n                    /** @var \\Chamilo\\CourseBundle\\Entity\\CForumThread $thread */\n                    $thread = $repo->find($threadId);\n                    if ($thread) {\n                        $threadUrl = $threadUrlBase.http_build_query([\n                            'forum' => $thread->getForumId(),\n                            'thread' => $thread->getIid(),\n                        ]);\n                        $threads[] = [\n                            'id' => $threadId,\n                            'url' => Display::url(\n                                $thread->getThreadTitle(),\n                                $threadUrl\n                            ),\n                            'name' => Display::url(\n                                $thread->getThreadTitle(),\n                                $threadUrl\n                            ),\n                            'description' => '',\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $threads;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return string\n     */\n    public static function getGroupBlock($userId)\n    {\n        $threadList = self::getThreadList($userId);\n        $userGroup = new UserGroup();\n\n        $forumCourseId = api_get_configuration_value('global_forums_course_id');\n        $courseInfo = null;\n        if (!empty($forumCourseId)) {\n            $courseInfo = api_get_course_info_by_id($forumCourseId);\n        }\n\n        $social_group_block = '';\n        if (!empty($courseInfo)) {\n            if (!empty($threadList)) {\n                $social_group_block .= '<div class=\"list-group\">';\n                foreach ($threadList as $group) {\n                    $social_group_block .= ' <li class=\"list-group-item\">';\n                    $social_group_block .= $group['name'];\n                    $social_group_block .= '</li>';\n                }\n                $social_group_block .= '</div>';\n            }\n\n            $social_group_block .= Display::url(\n                get_lang('SeeAllCommunities'),\n                api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$courseInfo['code']\n            );\n\n            if (!empty($social_group_block)) {\n                $social_group_block = Display::panelCollapse(\n                    get_lang('MyCommunities'),\n                    $social_group_block,\n                    'sm-groups',\n                    null,\n                    'grups-acordion',\n                    'groups-collapse'\n                );\n            }\n        } else {\n            // Load my groups\n            $results = $userGroup->get_groups_by_user(\n                $userId,\n                [\n                    GROUP_USER_PERMISSION_ADMIN,\n                    GROUP_USER_PERMISSION_READER,\n                    GROUP_USER_PERMISSION_MODERATOR,\n                    GROUP_USER_PERMISSION_HRM,\n                ]\n            );\n\n            $myGroups = [];\n            if (!empty($results)) {\n                foreach ($results as $result) {\n                    $id = $result['id'];\n                    $result['description'] = Security::remove_XSS($result['description'], STUDENT, true);\n                    $result['name'] = Security::remove_XSS($result['name'], STUDENT, true);\n\n                    $group_url = \"group_view.php?id=$id\";\n\n                    $link = Display::url(\n                        api_ucwords(cut($result['name'], 40, true)),\n                        $group_url\n                    );\n\n                    $result['name'] = $link;\n\n                    $picture = $userGroup->get_picture_group(\n                        $id,\n                        $result['picture'],\n                        null,\n                        GROUP_IMAGE_SIZE_BIG\n                    );\n\n                    $result['picture'] = '<img class=\"img-responsive\" src=\"'.$picture['file'].'\" />';\n                    $group_actions = '<div class=\"group-more\"><a class=\"btn btn-default\" href=\"groups.php?#tab_browse-2\">'.\n                        get_lang('SeeMore').'</a></div>';\n                    $group_info = '<div class=\"description\"><p>'.cut($result['description'], 120, true).\"</p></div>\";\n                    $myGroups[] = [\n                        'url' => Display::url(\n                            $result['picture'],\n                            $group_url\n                        ),\n                        'name' => $result['name'],\n                        'description' => $group_info.$group_actions,\n                    ];\n                }\n\n                $social_group_block .= '<div class=\"list-group\">';\n                foreach ($myGroups as $group) {\n                    $social_group_block .= ' <li class=\"list-group-item\">';\n                    $social_group_block .= $group['name'];\n                    $social_group_block .= '</li>';\n                }\n                $social_group_block .= '</div>';\n\n                $form = new FormValidator(\n                    'find_groups_form',\n                    'get',\n                    api_get_path(WEB_CODE_PATH).'social/search.php?search_type=2',\n                    null,\n                    null,\n                    FormValidator::LAYOUT_BOX_NO_LABEL\n                );\n                $form->addHidden('search_type', 2);\n\n                $form->addText(\n                    'q',\n                    get_lang('Search'),\n                    false,\n                    [\n                        'aria-label' => get_lang('Search'),\n                        'custom' => true,\n                        'placeholder' => get_lang('Search'),\n                    ]\n                );\n\n                $social_group_block .= $form->returnForm();\n\n                if (!empty($social_group_block)) {\n                    $social_group_block = Display::panelCollapse(\n                        get_lang('MyGroups'),\n                        $social_group_block,\n                        'sm-groups',\n                        null,\n                        'grups-acordion',\n                        'groups-collapse'\n                    );\n                }\n            }\n        }\n\n        return $social_group_block;\n    }\n\n    /**\n     * @param string $selected\n     *\n     * @return string\n     */\n    public static function getHomeProfileTabs($selected = 'home')\n    {\n        $headers = [\n            [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/profile.php',\n                'content' => get_lang('Profile'),\n            ],\n        ];\n        $allowJustification = api_get_plugin_setting('justification', 'tool_enable') === 'true';\n        if ($allowJustification) {\n            $plugin = Justification::create();\n            $headers[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/justification.php',\n                'content' => $plugin->get_lang('Justification'),\n            ];\n        }\n\n        $allowPauseTraining = api_get_plugin_setting('pausetraining', 'tool_enable') === 'true';\n        $allowEdit = api_get_plugin_setting('pausetraining', 'allow_users_to_edit_pause_formation') === 'true';\n        if ($allowPauseTraining && $allowEdit) {\n            $plugin = PauseTraining::create();\n            $headers[] = [\n                'url' => api_get_path(WEB_CODE_PATH).'auth/pausetraining.php',\n                'content' => $plugin->get_lang('PauseTraining'),\n            ];\n        }\n\n        $selectedItem = 1;\n        foreach ($headers as $header) {\n            $info = pathinfo($header['url']);\n            if ($selected === $info['filename']) {\n                break;\n            }\n            $selectedItem++;\n        }\n\n        $tabs = '';\n        if (count($headers) > 1) {\n            $tabs = Display::tabsOnlyLink($headers, $selectedItem);\n        }\n\n        return $tabs;\n    }\n\n    /**\n     * Returns the formatted header message post.\n     *\n     * @param int   $authorInfo\n     * @param int   $receiverInfo\n     * @param array $message      Message data\n     *\n     * @return string $html       The formatted header message post\n     */\n    private static function headerMessagePost($authorInfo, $receiverInfo, $message)\n    {\n        $currentUserId = api_get_user_id();\n        $authorId = (int) $authorInfo['user_id'];\n        $receiverId = (int) $receiverInfo['user_id'];\n        $iconStatus = $authorInfo['icon_status'];\n\n        $date = Display::dateToStringAgoAndLongDate($message['send_date']);\n        $avatarAuthor = $authorInfo['avatar'];\n        $urlAuthor = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$authorId;\n        $nameCompleteAuthor = $authorInfo['complete_name'];\n\n        $urlReceiver = api_get_path(WEB_CODE_PATH).'social/profile.php?u='.$receiverId;\n        $nameCompleteReceiver = $receiverInfo['complete_name'];\n\n        $htmlReceiver = '';\n        if ($authorId !== $receiverId) {\n            $htmlReceiver = ' > <a href=\"'.$urlReceiver.'\">'.$nameCompleteReceiver.'</a> ';\n        }\n\n        if (!empty($message['group_info'])) {\n            $htmlReceiver = ' > <a href=\"'.$message['group_info']['url'].'\">'.$message['group_info']['name'].'</a> ';\n        }\n        $canEdit = ($currentUserId == $authorInfo['user_id'] || $currentUserId == $receiverInfo['user_id']) && empty($message['group_info']);\n\n        if (!empty($message['thread_id'])) {\n            $htmlReceiver = ' > <a href=\"'.$message['thread_url'].'\">'.$message['forum_title'].'</a> ';\n            $canEdit = false;\n        }\n\n        $postAttachment = self::getPostAttachment($message);\n\n        $html = '<div class=\"top-mediapost\" >';\n        $html .= '<div class=\"pull-right btn-group btn-group-sm\">';\n\n        $html .= MessageManager::getLikesButton(\n            $message['id'],\n            $currentUserId,\n            !empty($message['group_info']['id']) ? (int) $message['group_info']['id'] : 0\n        );\n\n        if ($canEdit) {\n            $htmlDelete = Display::url(\n                Display::returnFontAwesomeIcon('trash', '', true),\n                'javascript:void(0)',\n                [\n                    'id' => 'message_'.$message['id'],\n                    'title' => get_lang('SocialMessageDelete'),\n                    'onclick' => 'deleteMessage('.$message['id'].')',\n                    'class' => 'btn btn-default',\n                ]\n            );\n\n            $html .= $htmlDelete;\n        }\n        $html .= '</div>';\n\n        $html .= '<div class=\"user-image\" >';\n        $html .= '<a href=\"'.$urlAuthor.'\">\n                    <img class=\"avatar-thumb\" src=\"'.$avatarAuthor.'\" alt=\"'.$nameCompleteAuthor.'\"></a>';\n        $html .= '</div>';\n        $html .= '<div class=\"user-data\">';\n        $html .= $iconStatus;\n        $html .= '<div class=\"username\"><a href=\"'.$urlAuthor.'\">'.$nameCompleteAuthor.'</a>'.$htmlReceiver.'</div>';\n        $html .= '<div class=\"post-date\">'.$date.'</div>';\n        $html .= '</div>';\n        $html .= '<div class=\"msg-content\">';\n        if (!empty($postAttachment)) {\n            $html .= '<div class=\"post-attachment thumbnail\">';\n            $html .= $postAttachment;\n            $html .= '</div>';\n        }\n        $html .= '<div>'.Security::remove_XSS($message['content']).'</div>';\n        $html .= '</div>';\n        $html .= '</div>'; // end mediaPost\n\n        // Popularity post functionality\n        $html .= '<div class=\"popularity-mediapost\"></div>';\n\n        return $html;\n    }\n}\n"], "filenames": ["main/inc/lib/social.lib.php"], "buggy_code_start_loc": [664], "buggy_code_end_loc": [664], "fixing_code_start_loc": [665], "fixing_code_end_loc": [666], "type": "CWE-79", "message": "A user without privileges in Chamilo LMS 1.11.14 can send an invitation message to another user, e.g., the administrator, through main/social/search.php, main/inc/lib/social.lib.php and steal cookies or execute arbitrary code on the administration side via a stored XSS vulnerability via social network the send invitation feature.", "other": {"cve": {"id": "CVE-2021-37391", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-10T20:15:08.683", "lastModified": "2021-08-19T17:05:21.940", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A user without privileges in Chamilo LMS 1.11.14 can send an invitation message to another user, e.g., the administrator, through main/social/search.php, main/inc/lib/social.lib.php and steal cookies or execute arbitrary code on the administration side via a stored XSS vulnerability via social network the send invitation feature."}, {"lang": "es", "value": "Un usuario sin privilegios en Chamilo LMS versi\u00f3n 1.11.14, puede enviar un mensaje de invitaci\u00f3n a otro usuario, por ejemplo, el administrador, mediante los archivos main/social/search.php, main/inc/lib/social.lib.php y robar cookies o ejecutar c\u00f3digo arbitrario en el lado de la administraci\u00f3n por medio de una vulnerabilidad de tipo XSS almacenado por medio de la red social la funcionalidad send invitation de la red social"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndExcluding": "1.11.14", "matchCriteriaId": "B79B8491-2A28-4733-BF89-EC1864A98B8F"}]}]}], "references": [{"url": "https://gitbook.seguranca-informatica.pt/cve-and-exploits/cves/chamilo-lms-1.11.14-xss-vulnerabilities", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/de43a77049771cce08ea7234c5c1510b5af65bc8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/de43a77049771cce08ea7234c5c1510b5af65bc8"}}