{"buggy_code": ["import Component from \"@ember/component\";\nimport I18n from \"I18n\";\nimport discourseLater from \"discourse-common/lib/later\";\nimport { isEmpty } from \"@ember/utils\";\nimport discourseComputed from \"discourse-common/utils/decorators\";\nimport { action } from \"@ember/object\";\nimport { equal } from \"@ember/object/computed\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport {\n  EXISTING_TOPIC_SELECTION,\n  NEW_TOPIC_SELECTION,\n} from \"discourse/plugins/discourse-chat/discourse/components/chat-to-topic-selector\";\nimport { CHANNEL_STATUSES } from \"discourse/plugins/discourse-chat/discourse/models/chat-channel\";\nimport { htmlSafe } from \"@ember/template\";\nimport { escapeExpression } from \"discourse/lib/utilities\";\n\nexport default Component.extend({\n  chat: service(),\n  tagName: \"\",\n  chatChannel: null,\n\n  selection: \"newTopic\",\n  newTopic: equal(\"selection\", NEW_TOPIC_SELECTION),\n  existingTopic: equal(\"selection\", EXISTING_TOPIC_SELECTION),\n\n  saving: false,\n\n  topicTitle: null,\n  categoryId: null,\n  tags: null,\n  selectedTopicId: null,\n\n  @action\n  archiveChannel() {\n    this.set(\"saving\", true);\n    return ajax({\n      url: `/chat/chat_channels/${this.chatChannel.id}/archive.json`,\n      type: \"PUT\",\n      data: this._data(),\n    })\n      .then(() => {\n        this.appEvents.trigger(\"modal-body:flash\", {\n          text: I18n.t(\"chat.channel_archive.process_started\"),\n          messageClass: \"success\",\n        });\n\n        this.chatChannel.set(\"status\", CHANNEL_STATUSES.archived);\n\n        discourseLater(() => {\n          this.closeModal();\n        }, 3000);\n      })\n      .catch(popupAjaxError)\n      .finally(() => this.set(\"saving\", false));\n  },\n\n  _data() {\n    const data = {\n      type: this.selection,\n      chat_channel_id: this.chatChannel.id,\n    };\n    if (this.newTopic) {\n      data.title = this.topicTitle;\n      data.category_id = this.categoryId;\n      data.tags = this.tags;\n    }\n    if (this.existingTopic) {\n      data.topic_id = this.selectedTopicId;\n    }\n    return data;\n  },\n\n  @discourseComputed(\"saving\", \"selectedTopicId\", \"topicTitle\", \"selection\")\n  buttonDisabled(saving, selectedTopicId, topicTitle) {\n    if (saving) {\n      return true;\n    }\n    if (\n      this.newTopic &&\n      (!topicTitle ||\n        topicTitle.length < this.siteSettings.min_topic_title_length ||\n        topicTitle.length > this.siteSettings.max_topic_title_length)\n    ) {\n      return true;\n    }\n\n    if (this.existingTopic && isEmpty(selectedTopicId)) {\n      return true;\n    }\n    return false;\n  },\n\n  @discourseComputed()\n  instructionLabels() {\n    const labels = {};\n    labels[NEW_TOPIC_SELECTION] = I18n.t(\n      \"chat.selection.new_topic.instructions_channel_archive\"\n    );\n    labels[EXISTING_TOPIC_SELECTION] = I18n.t(\n      \"chat.selection.existing_topic.instructions_channel_archive\"\n    );\n    return labels;\n  },\n\n  @discourseComputed()\n  instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.channel_archive.instructions\", {\n        channelTitle: escapeExpression(this.chatChannel.title),\n      })\n    );\n  },\n});\n", "import Component from \"@ember/component\";\nimport { isEmpty } from \"@ember/utils\";\nimport I18n from \"I18n\";\nimport discourseComputed from \"discourse-common/utils/decorators\";\nimport { action } from \"@ember/object\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport discourseLater from \"discourse-common/lib/later\";\nimport { htmlSafe } from \"@ember/template\";\nimport { escapeExpression } from \"discourse/lib/utilities\";\n\nexport default Component.extend({\n  chat: service(),\n  router: service(),\n  tagName: \"\",\n  chatChannel: null,\n  channelNameConfirmation: null,\n  deleting: false,\n  confirmed: false,\n\n  @discourseComputed(\"deleting\", \"channelNameConfirmation\", \"confirmed\")\n  buttonDisabled(deleting, channelNameConfirmation, confirmed) {\n    if (deleting || confirmed) {\n      return true;\n    }\n\n    if (\n      isEmpty(channelNameConfirmation) ||\n      escapeExpression(channelNameConfirmation).toLowerCase() !==\n        this.escapedTitle.toLowerCase()\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  @action\n  deleteChannel() {\n    this.set(\"deleting\", true);\n    return ajax(`/chat/chat_channels/${this.chatChannel.id}.json`, {\n      method: \"DELETE\",\n      data: { channel_name_confirmation: this.channelNameConfirmation },\n    })\n      .then(() => {\n        this.set(\"confirmed\", true);\n        this.appEvents.trigger(\"modal-body:flash\", {\n          text: I18n.t(\"chat.channel_delete.process_started\"),\n          messageClass: \"success\",\n        });\n\n        discourseLater(() => {\n          this.closeModal();\n          this.router.transitionTo(\"chat\");\n        }, 3000);\n      })\n      .catch(popupAjaxError)\n      .finally(() => this.set(\"deleting\", false));\n  },\n\n  @discourseComputed()\n  instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.channel_delete.instructions\", {\n        name: this.escapedTitle,\n      })\n    );\n  },\n\n  @discourseComputed()\n  escapedTitle() {\n    return escapeExpression(this.chatChannel.title);\n  },\n});\n", "import Component from \"@ember/component\";\nimport I18n from \"I18n\";\nimport { reads } from \"@ember/object/computed\";\nimport { isBlank } from \"@ember/utils\";\nimport { action, computed } from \"@ember/object\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport { htmlSafe } from \"@ember/template\";\nimport { escapeExpression } from \"discourse/lib/utilities\";\n\nexport default class MoveToChannelModalInner extends Component {\n  @service chat;\n  @service router;\n  tagName = \"\";\n  sourceChannel = null;\n  destinationChannelId = null;\n  selectedMessageIds = null;\n\n  @reads(\"selectedMessageIds.length\") selectedMessageCount;\n\n  @computed(\"destinationChannelId\")\n  get disableMoveButton() {\n    return isBlank(this.destinationChannelId);\n  }\n\n  @computed(\"chat.publicChannels.[]\")\n  get availableChannels() {\n    return this.chat.publicChannels.rejectBy(\"id\", this.sourceChannel.id);\n  }\n\n  @action\n  moveMessages() {\n    return ajax(\n      `/chat/${this.sourceChannel.id}/move_messages_to_channel.json`,\n      {\n        method: \"PUT\",\n        data: {\n          message_ids: this.selectedMessageIds,\n          destination_channel_id: this.destinationChannelId,\n        },\n      }\n    )\n      .then((response) => {\n        this.router.transitionTo(\n          \"chat.channel\",\n          response.destination_channel_id,\n          response.destination_channel_title,\n          {\n            queryParams: { messageId: response.first_moved_message_id },\n          }\n        );\n      })\n      .catch(popupAjaxError);\n  }\n\n  @computed()\n  get instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.move_to_channel.instructions\", {\n        channelTitle: escapeExpression(this.sourceChannel.title),\n        count: this.selectedMessageCount,\n      })\n    );\n  }\n}\n", "import { htmlSafe } from \"@ember/template\";\nimport slugifyChannel from \"discourse/plugins/discourse-chat/discourse/lib/slugify-channel\";\nimport { withPluginApi } from \"discourse/lib/plugin-api\";\nimport I18n from \"I18n\";\nimport { bind } from \"discourse-common/utils/decorators\";\nimport { tracked } from \"@glimmer/tracking\";\nimport { DRAFT_CHANNEL_VIEW } from \"discourse/plugins/discourse-chat/discourse/services/chat\";\nimport { avatarUrl, escapeExpression } from \"discourse/lib/utilities\";\nimport { dasherize } from \"@ember/string\";\nimport { emojiUnescape } from \"discourse/lib/text\";\nimport { decorateUsername } from \"discourse/helpers/decorate-username-selector\";\nimport { until } from \"discourse/lib/formatter\";\nimport { inject as service } from \"@ember/service\";\n\nexport default {\n  name: \"chat-sidebar\",\n  initialize(container) {\n    this.chatService = container.lookup(\"service:chat\");\n\n    if (!this.chatService.userCanChat) {\n      return;\n    }\n\n    withPluginApi(\"1.3.0\", (api) => {\n      const currentUser = api.getCurrentUser();\n      const hasPublicChannels =\n        currentUser?.chat_channels?.public_channels?.length;\n      const shouldDisplayPublicChannelsSection = hasPublicChannels\n        ? true\n        : currentUser?.staff || currentUser?.has_joinable_public_channels;\n\n      shouldDisplayPublicChannelsSection &&\n        api.addSidebarSection(\n          (BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {\n            const SidebarChatChannelsSectionLink = class extends BaseCustomSidebarSectionLink {\n              @tracked chatChannelTrackingState =\n                this.chatService.currentUser.chat_channel_tracking_state[\n                  this.channel.id\n                ];\n\n              constructor({ channel, chatService }) {\n                super(...arguments);\n                this.channel = channel;\n                this.chatService = chatService;\n\n                this.chatService.appEvents.on(\n                  \"chat:user-tracking-state-changed\",\n                  this._refreshTrackingState\n                );\n              }\n\n              @bind\n              willDestroy() {\n                this.chatService.appEvents.off(\n                  \"chat:user-tracking-state-changed\",\n                  this._refreshTrackingState\n                );\n              }\n\n              @bind\n              _refreshTrackingState() {\n                this.chatChannelTrackingState =\n                  this.chatService.currentUser.chat_channel_tracking_state[\n                    this.channel.id\n                  ];\n              }\n\n              get name() {\n                return dasherize(slugifyChannel(this.title));\n              }\n\n              get route() {\n                return \"chat.channel\";\n              }\n\n              get models() {\n                return [this.channel.id, slugifyChannel(this.title)];\n              }\n\n              get title() {\n                return escapeExpression(this.channel.title);\n              }\n\n              get text() {\n                return htmlSafe(emojiUnescape(this.title));\n              }\n\n              get prefixType() {\n                return \"icon\";\n              }\n\n              get prefixValue() {\n                return \"hashtag\";\n              }\n\n              get prefixColor() {\n                return this.channel.chatable.color;\n              }\n\n              get prefixBadge() {\n                return this.channel.chatable.read_restricted ? \"lock\" : \"\";\n              }\n\n              get suffixType() {\n                return \"icon\";\n              }\n\n              get suffixValue() {\n                return this.chatChannelTrackingState?.unread_count > 0\n                  ? \"circle\"\n                  : \"\";\n              }\n\n              get suffixCSSClass() {\n                return this.chatChannelTrackingState?.unread_mentions > 0\n                  ? \"urgent\"\n                  : \"unread\";\n              }\n            };\n\n            const SidebarChatChannelsSection = class extends BaseCustomSidebarSection {\n              @tracked sectionLinks = [];\n\n              @tracked sectionIndicator =\n                this.chatService.publicChannels &&\n                this.chatService.publicChannels[0].current_user_membership\n                  .unread_count;\n\n              constructor() {\n                super(...arguments);\n\n                if (container.isDestroyed) {\n                  return;\n                }\n                this.chatService = container.lookup(\"service:chat\");\n                this.chatService.appEvents.on(\n                  \"chat:refresh-channels\",\n                  this._refreshChannels\n                );\n                this._refreshChannels();\n              }\n\n              @bind\n              willDestroy() {\n                if (!this.chatService) {\n                  return;\n                }\n                this.chatService.appEvents.off(\n                  \"chat:refresh-channels\",\n                  this._refreshChannels\n                );\n              }\n\n              @bind\n              _refreshChannels() {\n                const newSectionLinks = [];\n                this.chatService.getChannels().then((channels) => {\n                  channels.publicChannels.forEach((channel) => {\n                    newSectionLinks.push(\n                      new SidebarChatChannelsSectionLink({\n                        channel,\n                        chatService: this.chatService,\n                      })\n                    );\n                  });\n                  this.sectionLinks = newSectionLinks;\n                });\n              }\n\n              get name() {\n                return \"chat-channels\";\n              }\n\n              get title() {\n                return I18n.t(\"chat.chat_channels\");\n              }\n\n              get text() {\n                return I18n.t(\"chat.chat_channels\");\n              }\n\n              get actions() {\n                return [\n                  {\n                    id: \"browseChannels\",\n                    title: I18n.t(\"chat.channels_list_popup.browse\"),\n                    action: () => {\n                      this.chatService.router.transitionTo(\"chat.browse\");\n                    },\n                  },\n                ];\n              }\n\n              get actionsIcon() {\n                return \"pencil-alt\";\n              }\n\n              get links() {\n                return this.sectionLinks;\n              }\n            };\n\n            return SidebarChatChannelsSection;\n          }\n        );\n\n      api.addSidebarSection(\n        (BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {\n          const SidebarChatDirectMessagesSectionLink = class extends BaseCustomSidebarSectionLink {\n            @tracked chatChannelTrackingState =\n              this.chatService.currentUser.chat_channel_tracking_state[\n                this.channel.id\n              ];\n\n            constructor({ channel, chatService }) {\n              super(...arguments);\n              this.channel = channel;\n              this.chatService = chatService;\n\n              if (this.oneOnOneMessage) {\n                this.channel.chatable.users[0].trackStatus();\n              }\n            }\n\n            @bind\n            willDestroy() {\n              if (this.oneOnOneMessage) {\n                this.channel.chatable.users[0].stopTrackingStatus();\n              }\n            }\n\n            get name() {\n              return dasherize(this.title);\n            }\n\n            get route() {\n              return \"chat.channel\";\n            }\n\n            get models() {\n              return [this.channel.id, slugifyChannel(this.title)];\n            }\n\n            get title() {\n              return escapeExpression(this.channel.title);\n            }\n\n            get oneOnOneMessage() {\n              return this.channel.chatable.users.length === 1;\n            }\n\n            get text() {\n              const username = this.title.replaceAll(\"@\", \"\");\n              if (this.oneOnOneMessage) {\n                const status = this.channel.chatable.users[0].get(\"status\");\n                const statusHtml = status ? this._userStatusHtml(status) : \"\";\n                return htmlSafe(\n                  `${escapeExpression(\n                    username\n                  )}${statusHtml} ${decorateUsername(\n                    escapeExpression(username)\n                  )}`\n                );\n              } else {\n                return username;\n              }\n            }\n\n            get prefixType() {\n              if (this.oneOnOneMessage) {\n                return \"image\";\n              } else {\n                return \"text\";\n              }\n            }\n\n            get prefixValue() {\n              if (this.channel.chatable.users.length === 1) {\n                return avatarUrl(\n                  this.channel.chatable.users[0].avatar_template,\n                  \"tiny\"\n                );\n              } else {\n                return this.channel.chatable.users.length;\n              }\n            }\n\n            get prefixCSSClass() {\n              const activeUsers = this.chatService.presenceChannel.users;\n              const user = this.channel.chatable.users[0];\n              if (\n                !!activeUsers?.findBy(\"id\", user?.id) ||\n                !!activeUsers?.findBy(\"username\", user?.username)\n              ) {\n                return \"active\";\n              }\n              return \"\";\n            }\n\n            get suffixType() {\n              return \"icon\";\n            }\n\n            get suffixValue() {\n              return this.chatChannelTrackingState?.unread_count > 0\n                ? \"circle\"\n                : \"\";\n            }\n\n            get suffixCSSClass() {\n              return \"urgent\";\n            }\n\n            get hoverType() {\n              return \"icon\";\n            }\n\n            get hoverValue() {\n              return \"times\";\n            }\n\n            get hoverAction() {\n              return () => {\n                this.chatService.unfollowChannel(this.channel);\n              };\n            }\n\n            get hoverTitle() {\n              return I18n.t(\"chat.direct_messages.leave\");\n            }\n\n            _userStatusHtml(status) {\n              const emoji = escapeExpression(`:${status.emoji}:`);\n              const title = this._userStatusTitle(status);\n              return `<span class=\"user-status\">${emojiUnescape(emoji, {\n                title,\n              })}</span>`;\n            }\n\n            _userStatusTitle(status) {\n              let title = `${escapeExpression(status.description)}`;\n\n              if (status.ends_at) {\n                const untilFormatted = until(\n                  status.ends_at,\n                  this.chatService.currentUser.timezone,\n                  this.chatService.currentUser.locale\n                );\n                title += ` ${untilFormatted}`;\n              }\n\n              return title;\n            }\n          };\n\n          const SidebarChatDirectMessagesSection = class extends BaseCustomSidebarSection {\n            @service site;\n            @tracked sectionLinks = [];\n\n            constructor() {\n              super(...arguments);\n\n              if (container.isDestroyed) {\n                return;\n              }\n              this.chatService = container.lookup(\"service:chat\");\n              this.chatService.appEvents.on(\n                \"chat:user-tracking-state-changed\",\n                this._refreshPms\n              );\n              this._refreshPms();\n            }\n\n            @bind\n            willDestroy() {\n              if (container.isDestroyed) {\n                return;\n              }\n              this.chatService.appEvents.off(\n                \"chat:user-tracking-state-changed\",\n                this._refreshPms\n              );\n            }\n\n            @bind\n            _refreshPms() {\n              const newSectionLinks = [];\n              this.chatService.getChannels().then((channels) => {\n                this.chatService\n                  .truncateDirectMessageChannels(channels.directMessageChannels)\n                  .forEach((channel) => {\n                    newSectionLinks.push(\n                      new SidebarChatDirectMessagesSectionLink({\n                        channel,\n                        chatService: this.chatService,\n                      })\n                    );\n                  });\n                this.sectionLinks = newSectionLinks;\n              });\n            }\n\n            get name() {\n              return \"chat-dms\";\n            }\n\n            get title() {\n              return I18n.t(\"chat.direct_messages.title\");\n            }\n\n            get text() {\n              return I18n.t(\"chat.direct_messages.title\");\n            }\n\n            get actions() {\n              return [\n                {\n                  id: \"startDm\",\n                  title: I18n.t(\"chat.direct_messages.new\"),\n                  action: () => {\n                    if (\n                      this.site.mobileView ||\n                      this.chatService.router.currentRouteName.startsWith(\"\")\n                    ) {\n                      this.chatService.router.transitionTo(\n                        \"chat.draft-channel\"\n                      );\n                    } else {\n                      this.appEvents.trigger(\n                        \"chat:open-view\",\n                        DRAFT_CHANNEL_VIEW\n                      );\n                    }\n                  },\n                },\n              ];\n            }\n\n            get actionsIcon() {\n              return \"plus\";\n            }\n\n            get links() {\n              return this.sectionLinks;\n            }\n          };\n\n          return SidebarChatDirectMessagesSection;\n        }\n      );\n    });\n  },\n};\n", "import RestModel from \"discourse/models/rest\";\nimport I18n from \"I18n\";\nimport { computed } from \"@ember/object\";\nimport User from \"discourse/models/user\";\nimport UserChatChannelMembership from \"discourse/plugins/discourse-chat/discourse/models/user-chat-channel-membership\";\nimport { ajax } from \"discourse/lib/ajax\";\n\nexport const CHATABLE_TYPES = {\n  directMessageChannel: \"DirectMessageChannel\",\n  categoryChannel: \"Category\",\n};\nexport const CHANNEL_STATUSES = {\n  open: \"open\",\n  readOnly: \"read_only\",\n  closed: \"closed\",\n  archived: \"archived\",\n};\n\nexport function channelStatusName(channelStatus) {\n  switch (channelStatus) {\n    case CHANNEL_STATUSES.open:\n      return I18n.t(\"chat.channel_status.open\");\n    case CHANNEL_STATUSES.readOnly:\n      return I18n.t(\"chat.channel_status.read_only\");\n    case CHANNEL_STATUSES.closed:\n      return I18n.t(\"chat.channel_status.closed\");\n    case CHANNEL_STATUSES.archived:\n      return I18n.t(\"chat.channel_status.archived\");\n  }\n}\n\nexport function channelStatusIcon(channelStatus) {\n  if (channelStatus === CHANNEL_STATUSES.open) {\n    return null;\n  }\n\n  switch (channelStatus) {\n    case CHANNEL_STATUSES.closed:\n      return \"lock\";\n      break;\n    case CHANNEL_STATUSES.readOnly:\n      return \"comment-slash\";\n      break;\n    case CHANNEL_STATUSES.archived:\n      return \"archive\";\n      break;\n  }\n}\n\nconst STAFF_READONLY_STATUSES = [\n  CHANNEL_STATUSES.readOnly,\n  CHANNEL_STATUSES.archived,\n];\n\nconst READONLY_STATUSES = [\n  CHANNEL_STATUSES.closed,\n  CHANNEL_STATUSES.readOnly,\n  CHANNEL_STATUSES.archived,\n];\n\nexport default class ChatChannel extends RestModel {\n  isDraft = false;\n  lastSendReadMessageId = null;\n\n  @computed(\"chatable_type\")\n  get isDirectMessageChannel() {\n    return this.chatable_type === CHATABLE_TYPES.directMessageChannel;\n  }\n\n  @computed(\"chatable_type\")\n  get isCategoryChannel() {\n    return this.chatable_type === CHATABLE_TYPES.categoryChannel;\n  }\n\n  @computed(\"status\")\n  get isOpen() {\n    return !this.status || this.status === CHANNEL_STATUSES.open;\n  }\n\n  @computed(\"status\")\n  get isReadOnly() {\n    return this.status === CHANNEL_STATUSES.readOnly;\n  }\n\n  @computed(\"status\")\n  get isClosed() {\n    return this.status === CHANNEL_STATUSES.closed;\n  }\n\n  @computed(\"status\")\n  get isArchived() {\n    return this.status === CHANNEL_STATUSES.archived;\n  }\n\n  @computed(\"isArchived\", \"isOpen\")\n  get isJoinable() {\n    return this.isOpen && !this.isArchived;\n  }\n\n  @computed(\"memberships_count\")\n  get membershipsCount() {\n    return this.memberships_count;\n  }\n\n  @computed(\"current_user_membership.following\")\n  get isFollowing() {\n    return this.current_user_membership.following;\n  }\n\n  canModifyMessages(user) {\n    if (user.staff) {\n      return !STAFF_READONLY_STATUSES.includes(this.status);\n    }\n\n    return !READONLY_STATUSES.includes(this.status);\n  }\n\n  updateMembership(membership) {\n    this.current_user_membership.setProperties({\n      following: membership.following,\n      muted: membership.muted,\n      desktop_notification_level: membership.desktop_notification_level,\n      mobile_notification_level: membership.mobile_notification_level,\n    });\n  }\n\n  updateLastReadMessage(messageId) {\n    if (!this.isFollowing || !messageId) {\n      return;\n    }\n\n    return ajax(`/chat/${this.id}/read/${messageId}.json`, {\n      method: \"PUT\",\n    }).then(() => {\n      this.set(\"lastSendReadMessageId\", messageId);\n    });\n  }\n}\n\nChatChannel.reopenClass({\n  create(args) {\n    args = args || {};\n    this._initUserModels(args);\n    this._initUserMembership(args);\n\n    args.lastSendReadMessageId =\n      args.current_user_membership?.last_read_message_id;\n\n    return this._super(args);\n  },\n\n  _initUserModels(args) {\n    if (args.chatable?.users?.length) {\n      for (let i = 0; i < args.chatable?.users?.length; i++) {\n        const userData = args.chatable.users[i];\n        args.chatable.users[i] = User.create(userData);\n      }\n    }\n  },\n\n  _initUserMembership(args) {\n    if (args.current_user_membership instanceof UserChatChannelMembership) {\n      return;\n    }\n\n    args.current_user_membership = UserChatChannelMembership.create(\n      args.current_user_membership || {\n        following: false,\n        muted: false,\n        unread_count: 0,\n        unread_mentions: 0,\n      }\n    );\n  },\n});\n\nexport function createDirectMessageChannelDraft() {\n  return ChatChannel.create({\n    isDraft: true,\n    chatable_type: CHATABLE_TYPES.directMessageChannel,\n    chatable: {\n      users: [],\n    },\n  });\n}\n", "{{#if channel.isCategoryChannel}}\n  <div class=\"chat-form__section\">\n    <div class=\"chat-form__field\">\n      <label class=\"chat-form__label\">\n        {{i18n \"chat.about_view.associated_category\"}}\n      </label>\n      <div class=\"chat-form__control\">\n        {{category-badge channel.chatable link=true allowUncategorized=true}}\n      </div>\n    </div>\n  </div>\n{{/if}}\n\n<div class=\"chat-form__section\">\n  <div class=\"chat-form__field\">\n    <label class=\"chat-form__label\">\n      <span>{{i18n \"chat.about_view.title\"}}</span>\n      {{#if (chat-guardian \"can-edit-chat-channel\")}}\n        <div class=\"chat-form__label-actions\">\n          {{d-button\n            class=\"edit-title-btn btn-flat\"\n            label=\"chat.channel_settings.edit\"\n            action=(if onEditChatChannelTitle onEditChatChannelTitle)\n          }}\n        </div>\n      {{/if}}\n    </label>\n    <div class=\"chat-form__control\">\n      <div class=\"channel-info-about-view__title\">\n        {{replace-emoji channel.title}}\n      </div>\n    </div>\n  </div>\n</div>\n\n{{#if (or (chat-guardian \"can-edit-chat-channel\") channel.description.length)}}\n  <div class=\"chat-form__section\">\n    <div class=\"chat-form__field\">\n      <label class=\"chat-form__label\">\n        <span>{{i18n \"chat.about_view.description\"}}</span>\n        {{#if (chat-guardian \"can-edit-chat-channel\")}}\n          <div class=\"chat-form__label-actions\">\n            {{d-button\n              class=\"edit-description-btn btn-flat\"\n              label=(if\n                channel.description.length\n                \"chat.channel_settings.edit\"\n                \"chat.channel_settings.add\"\n              )\n              action=(if\n                onEditChatChannelDescription onEditChatChannelDescription\n              )\n            }}\n          </div>\n        {{/if}}\n      </label>\n\n      <div class=\"chat-form__control\">\n        <div class=\"channel-info-about-view__description\">\n          {{#if channel.description.length}}\n            {{channel.description}}\n          {{else}}\n            <div class=\"channel-info-about-view__description__helper-text\">\n              {{i18n \"chat.channel_edit_description_modal.description\"}}\n            </div>\n          {{/if}}\n        </div>\n      </div>\n    </div>\n  </div>\n{{/if}}\n\n<div class=\"chat-form__section\">\n  <ToggleChannelMembershipButton\n    @channel={{this.channel}}\n    @onToggle={{action \"afterMembershipToggle\"}}\n    @options={{hash joinClass=\"btn-primary\" leaveClass=\"btn-flat\" joinIcon=\"sign-in-alt\" leaveIcon=\"sign-out-alt\"}}\n  />\n</div>\n", "{{#if channel}}\n  <div\n    class={{concat\n      \"chat-channel-card\"\n      (if channel.isClosed \" -closed\")\n      (if channel.isArchived \" -archived\")\n    }}\n    style={{border-color channel.chatable.color}}\n  >\n    {{#link-to\n      \"chat.channel.info.settings\"\n      channel.id\n      (slugify-channel channel.title)\n      class=\"chat-channel-card__setting\"\n      tabindex=\"-1\"\n    }}\n      {{d-icon \"cog\"}}\n    {{/link-to}}\n\n    {{#link-to\n      \"chat.channel\"\n      channel.id\n      (slugify-channel channel.title)\n      class=\"chat-channel-card__name-container\"\n    }}\n      <span class=\"chat-channel-card__name\">\n        {{replace-emoji channel.title}}\n      </span>\n      {{#if channel.chatable.read_restricted}}\n        {{d-icon \"lock\" class=\"chat-channel-card__read-restricted\"}}\n      {{/if}}\n    {{/link-to}}\n\n    {{#if channel.description}}\n      <div class=\"chat-channel-card__description\">\n        {{replace-emoji channel.description}}\n      </div>\n    {{/if}}\n\n    <div class=\"chat-channel-card__cta\">\n      {{#if channel.isFollowing}}\n        <div class=\"chat-channel-card__tags\">\n          <span class=\"chat-channel-card__tag -joined\">\n            {{i18n \"chat.joined\"}}\n          </span>\n\n          {{#if channel.current_user_membership.muted}}\n            {{#link-to\n              \"chat.channel.info.settings\"\n              channel.id\n              (slugify-channel channel.title)\n              class=\"chat-channel-card__tag -muted\"\n              tabindex=\"-1\"\n            }}\n              {{i18n \"chat.muted\"}}\n            {{/link-to}}\n          {{/if}}\n        </div>\n      {{else if channel.isJoinable}}\n        <ToggleChannelMembershipButton\n          @channel={{this.channel}}\n          @onToggle={{action \"afterMembershipToggle\"}}\n          @options={{hash joinClass=\"btn-primary btn-small chat-channel-card__join-btn\" labelType=\"short\"}}\n        />\n      {{/if}}\n\n      {{#if (gt channel.membershipsCount 0)}}\n        {{#link-to\n          \"chat.channel.info.members\"\n          channel.id\n          (slugify-channel channel.title)\n          class=\"chat-channel-card__members\"\n          tabindex=\"-1\"\n        }}\n          {{i18n\n            \"chat.channel.memberships_count\"\n            count=channel.membershipsCount\n          }}\n        {{/link-to}}\n      {{/if}}\n    </div>\n  </div>\n{{/if}}\n", "{{#if channel.isDraft}}\n  <div class=\"chat-channel-title is-draft\">\n    <span class=\"chat-channel-title__name\">{{channel.title}}</span>\n    {{#if (has-block)}}\n      {{yield}}\n    {{/if}}\n  </div>\n{{else}}\n  {{#if channel.isDirectMessageChannel}}\n    <div class=\"chat-channel-title is-dm\">\n      {{#if multiDm}}\n        <span class=\"chat-channel-title__users-count\">\n          {{channel.chatable.users.length}}\n        </span>\n        <span class=\"chat-channel-title__name\">{{usernames}}</span>\n      {{else}}\n        {{chat-user-avatar user=channel.chatable.users.firstObject}}\n        <span class=\"chat-channel-title__usernames\">\n          {{#let channel.chatable.users.firstObject as |user|}}\n            <span class=\"chat-channel-title__name\">{{user.username}}</span>\n            {{plugin-outlet\n              name=\"after-chat-channel-username\"\n              args=(hash user=user)\n              tagName=\"\"\n              connectorTagName=\"\"\n            }}\n          {{/let}}\n        </span>\n      {{/if}}\n\n      {{#if (has-block)}}\n        {{yield}}\n      {{/if}}\n    </div>\n  {{else if channel.isCategoryChannel}}\n    <div class=\"chat-channel-title is-category\">\n      <span\n        class=\"chat-channel-title__category-badge\"\n        style={{this.channelColorStyle}}\n      >\n        {{d-icon \"hashtag\"}}\n        {{#if channel.chatable.read_restricted}}\n          {{d-icon \"lock\" class=\"chat-channel-title__restricted-category-icon\"}}\n        {{/if}}\n      </span>\n      <span class=\"chat-channel-title__name\">\n        {{replace-emoji channel.title}}\n      </span>\n\n      {{#if (has-block)}}\n        {{yield}}\n      {{/if}}\n    </div>\n  {{/if}}\n\n  {{#if unreadIndicator}}\n    {{chat-channel-unread-indicator channel=channel}}\n  {{/if}}\n{{/if}}\n"], "fixing_code": ["import Component from \"@ember/component\";\nimport I18n from \"I18n\";\nimport discourseLater from \"discourse-common/lib/later\";\nimport { isEmpty } from \"@ember/utils\";\nimport discourseComputed from \"discourse-common/utils/decorators\";\nimport { action } from \"@ember/object\";\nimport { equal } from \"@ember/object/computed\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport {\n  EXISTING_TOPIC_SELECTION,\n  NEW_TOPIC_SELECTION,\n} from \"discourse/plugins/discourse-chat/discourse/components/chat-to-topic-selector\";\nimport { CHANNEL_STATUSES } from \"discourse/plugins/discourse-chat/discourse/models/chat-channel\";\nimport { htmlSafe } from \"@ember/template\";\n\nexport default Component.extend({\n  chat: service(),\n  tagName: \"\",\n  chatChannel: null,\n\n  selection: \"newTopic\",\n  newTopic: equal(\"selection\", NEW_TOPIC_SELECTION),\n  existingTopic: equal(\"selection\", EXISTING_TOPIC_SELECTION),\n\n  saving: false,\n\n  topicTitle: null,\n  categoryId: null,\n  tags: null,\n  selectedTopicId: null,\n\n  @action\n  archiveChannel() {\n    this.set(\"saving\", true);\n    return ajax({\n      url: `/chat/chat_channels/${this.chatChannel.id}/archive.json`,\n      type: \"PUT\",\n      data: this._data(),\n    })\n      .then(() => {\n        this.appEvents.trigger(\"modal-body:flash\", {\n          text: I18n.t(\"chat.channel_archive.process_started\"),\n          messageClass: \"success\",\n        });\n\n        this.chatChannel.set(\"status\", CHANNEL_STATUSES.archived);\n\n        discourseLater(() => {\n          this.closeModal();\n        }, 3000);\n      })\n      .catch(popupAjaxError)\n      .finally(() => this.set(\"saving\", false));\n  },\n\n  _data() {\n    const data = {\n      type: this.selection,\n      chat_channel_id: this.chatChannel.id,\n    };\n    if (this.newTopic) {\n      data.title = this.topicTitle;\n      data.category_id = this.categoryId;\n      data.tags = this.tags;\n    }\n    if (this.existingTopic) {\n      data.topic_id = this.selectedTopicId;\n    }\n    return data;\n  },\n\n  @discourseComputed(\"saving\", \"selectedTopicId\", \"topicTitle\", \"selection\")\n  buttonDisabled(saving, selectedTopicId, topicTitle) {\n    if (saving) {\n      return true;\n    }\n    if (\n      this.newTopic &&\n      (!topicTitle ||\n        topicTitle.length < this.siteSettings.min_topic_title_length ||\n        topicTitle.length > this.siteSettings.max_topic_title_length)\n    ) {\n      return true;\n    }\n\n    if (this.existingTopic && isEmpty(selectedTopicId)) {\n      return true;\n    }\n    return false;\n  },\n\n  @discourseComputed()\n  instructionLabels() {\n    const labels = {};\n    labels[NEW_TOPIC_SELECTION] = I18n.t(\n      \"chat.selection.new_topic.instructions_channel_archive\"\n    );\n    labels[EXISTING_TOPIC_SELECTION] = I18n.t(\n      \"chat.selection.existing_topic.instructions_channel_archive\"\n    );\n    return labels;\n  },\n\n  @discourseComputed()\n  instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.channel_archive.instructions\", {\n        channelTitle: this.chatChannel.escapedTitle,\n      })\n    );\n  },\n});\n", "import Component from \"@ember/component\";\nimport { isEmpty } from \"@ember/utils\";\nimport I18n from \"I18n\";\nimport discourseComputed from \"discourse-common/utils/decorators\";\nimport { action } from \"@ember/object\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport discourseLater from \"discourse-common/lib/later\";\nimport { htmlSafe } from \"@ember/template\";\n\nexport default Component.extend({\n  chat: service(),\n  router: service(),\n  tagName: \"\",\n  chatChannel: null,\n  channelNameConfirmation: null,\n  deleting: false,\n  confirmed: false,\n\n  @discourseComputed(\"deleting\", \"channelNameConfirmation\", \"confirmed\")\n  buttonDisabled(deleting, channelNameConfirmation, confirmed) {\n    if (deleting || confirmed) {\n      return true;\n    }\n\n    if (\n      isEmpty(channelNameConfirmation) ||\n      channelNameConfirmation.toLowerCase() !==\n        this.chatChannel.title.toLowerCase()\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  @action\n  deleteChannel() {\n    this.set(\"deleting\", true);\n    return ajax(`/chat/chat_channels/${this.chatChannel.id}.json`, {\n      method: \"DELETE\",\n      data: { channel_name_confirmation: this.channelNameConfirmation },\n    })\n      .then(() => {\n        this.set(\"confirmed\", true);\n        this.appEvents.trigger(\"modal-body:flash\", {\n          text: I18n.t(\"chat.channel_delete.process_started\"),\n          messageClass: \"success\",\n        });\n\n        discourseLater(() => {\n          this.closeModal();\n          this.router.transitionTo(\"chat\");\n        }, 3000);\n      })\n      .catch(popupAjaxError)\n      .finally(() => this.set(\"deleting\", false));\n  },\n\n  @discourseComputed()\n  instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.channel_delete.instructions\", {\n        name: this.chatChannel.escapedTitle,\n      })\n    );\n  },\n});\n", "import Component from \"@ember/component\";\nimport I18n from \"I18n\";\nimport { reads } from \"@ember/object/computed\";\nimport { isBlank } from \"@ember/utils\";\nimport { action, computed } from \"@ember/object\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { inject as service } from \"@ember/service\";\nimport { popupAjaxError } from \"discourse/lib/ajax-error\";\nimport { htmlSafe } from \"@ember/template\";\n\nexport default class MoveToChannelModalInner extends Component {\n  @service chat;\n  @service router;\n  tagName = \"\";\n  sourceChannel = null;\n  destinationChannelId = null;\n  selectedMessageIds = null;\n\n  @reads(\"selectedMessageIds.length\") selectedMessageCount;\n\n  @computed(\"destinationChannelId\")\n  get disableMoveButton() {\n    return isBlank(this.destinationChannelId);\n  }\n\n  @computed(\"chat.publicChannels.[]\")\n  get availableChannels() {\n    return this.chat.publicChannels.rejectBy(\"id\", this.sourceChannel.id);\n  }\n\n  @action\n  moveMessages() {\n    return ajax(\n      `/chat/${this.sourceChannel.id}/move_messages_to_channel.json`,\n      {\n        method: \"PUT\",\n        data: {\n          message_ids: this.selectedMessageIds,\n          destination_channel_id: this.destinationChannelId,\n        },\n      }\n    )\n      .then((response) => {\n        this.router.transitionTo(\n          \"chat.channel\",\n          response.destination_channel_id,\n          response.destination_channel_title,\n          {\n            queryParams: { messageId: response.first_moved_message_id },\n          }\n        );\n      })\n      .catch(popupAjaxError);\n  }\n\n  @computed()\n  get instructionsText() {\n    return htmlSafe(\n      I18n.t(\"chat.move_to_channel.instructions\", {\n        channelTitle: this.sourceChannel.escapedTitle,\n        count: this.selectedMessageCount,\n      })\n    );\n  }\n}\n", "import { htmlSafe } from \"@ember/template\";\nimport slugifyChannel from \"discourse/plugins/discourse-chat/discourse/lib/slugify-channel\";\nimport { withPluginApi } from \"discourse/lib/plugin-api\";\nimport I18n from \"I18n\";\nimport { bind } from \"discourse-common/utils/decorators\";\nimport { tracked } from \"@glimmer/tracking\";\nimport { DRAFT_CHANNEL_VIEW } from \"discourse/plugins/discourse-chat/discourse/services/chat\";\nimport { avatarUrl, escapeExpression } from \"discourse/lib/utilities\";\nimport { dasherize } from \"@ember/string\";\nimport { emojiUnescape } from \"discourse/lib/text\";\nimport { decorateUsername } from \"discourse/helpers/decorate-username-selector\";\nimport { until } from \"discourse/lib/formatter\";\nimport { inject as service } from \"@ember/service\";\n\nexport default {\n  name: \"chat-sidebar\",\n  initialize(container) {\n    this.chatService = container.lookup(\"service:chat\");\n\n    if (!this.chatService.userCanChat) {\n      return;\n    }\n\n    withPluginApi(\"1.3.0\", (api) => {\n      const currentUser = api.getCurrentUser();\n      const hasPublicChannels =\n        currentUser?.chat_channels?.public_channels?.length;\n      const shouldDisplayPublicChannelsSection = hasPublicChannels\n        ? true\n        : currentUser?.staff || currentUser?.has_joinable_public_channels;\n\n      shouldDisplayPublicChannelsSection &&\n        api.addSidebarSection(\n          (BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {\n            const SidebarChatChannelsSectionLink = class extends BaseCustomSidebarSectionLink {\n              @tracked chatChannelTrackingState =\n                this.chatService.currentUser.chat_channel_tracking_state[\n                  this.channel.id\n                ];\n\n              constructor({ channel, chatService }) {\n                super(...arguments);\n                this.channel = channel;\n                this.chatService = chatService;\n\n                this.chatService.appEvents.on(\n                  \"chat:user-tracking-state-changed\",\n                  this._refreshTrackingState\n                );\n              }\n\n              @bind\n              willDestroy() {\n                this.chatService.appEvents.off(\n                  \"chat:user-tracking-state-changed\",\n                  this._refreshTrackingState\n                );\n              }\n\n              @bind\n              _refreshTrackingState() {\n                this.chatChannelTrackingState =\n                  this.chatService.currentUser.chat_channel_tracking_state[\n                    this.channel.id\n                  ];\n              }\n\n              get name() {\n                return dasherize(slugifyChannel(this.title));\n              }\n\n              get route() {\n                return \"chat.channel\";\n              }\n\n              get models() {\n                return [this.channel.id, slugifyChannel(this.title)];\n              }\n\n              get title() {\n                return this.channel.escapedTitle;\n              }\n\n              get text() {\n                return htmlSafe(emojiUnescape(this.title));\n              }\n\n              get prefixType() {\n                return \"icon\";\n              }\n\n              get prefixValue() {\n                return \"hashtag\";\n              }\n\n              get prefixColor() {\n                return this.channel.chatable.color;\n              }\n\n              get prefixBadge() {\n                return this.channel.chatable.read_restricted ? \"lock\" : \"\";\n              }\n\n              get suffixType() {\n                return \"icon\";\n              }\n\n              get suffixValue() {\n                return this.chatChannelTrackingState?.unread_count > 0\n                  ? \"circle\"\n                  : \"\";\n              }\n\n              get suffixCSSClass() {\n                return this.chatChannelTrackingState?.unread_mentions > 0\n                  ? \"urgent\"\n                  : \"unread\";\n              }\n            };\n\n            const SidebarChatChannelsSection = class extends BaseCustomSidebarSection {\n              @tracked sectionLinks = [];\n\n              @tracked sectionIndicator =\n                this.chatService.publicChannels &&\n                this.chatService.publicChannels[0].current_user_membership\n                  .unread_count;\n\n              constructor() {\n                super(...arguments);\n\n                if (container.isDestroyed) {\n                  return;\n                }\n                this.chatService = container.lookup(\"service:chat\");\n                this.chatService.appEvents.on(\n                  \"chat:refresh-channels\",\n                  this._refreshChannels\n                );\n                this._refreshChannels();\n              }\n\n              @bind\n              willDestroy() {\n                if (!this.chatService) {\n                  return;\n                }\n                this.chatService.appEvents.off(\n                  \"chat:refresh-channels\",\n                  this._refreshChannels\n                );\n              }\n\n              @bind\n              _refreshChannels() {\n                const newSectionLinks = [];\n                this.chatService.getChannels().then((channels) => {\n                  channels.publicChannels.forEach((channel) => {\n                    newSectionLinks.push(\n                      new SidebarChatChannelsSectionLink({\n                        channel,\n                        chatService: this.chatService,\n                      })\n                    );\n                  });\n                  this.sectionLinks = newSectionLinks;\n                });\n              }\n\n              get name() {\n                return \"chat-channels\";\n              }\n\n              get title() {\n                return I18n.t(\"chat.chat_channels\");\n              }\n\n              get text() {\n                return I18n.t(\"chat.chat_channels\");\n              }\n\n              get actions() {\n                return [\n                  {\n                    id: \"browseChannels\",\n                    title: I18n.t(\"chat.channels_list_popup.browse\"),\n                    action: () => {\n                      this.chatService.router.transitionTo(\"chat.browse\");\n                    },\n                  },\n                ];\n              }\n\n              get actionsIcon() {\n                return \"pencil-alt\";\n              }\n\n              get links() {\n                return this.sectionLinks;\n              }\n            };\n\n            return SidebarChatChannelsSection;\n          }\n        );\n\n      api.addSidebarSection(\n        (BaseCustomSidebarSection, BaseCustomSidebarSectionLink) => {\n          const SidebarChatDirectMessagesSectionLink = class extends BaseCustomSidebarSectionLink {\n            @tracked chatChannelTrackingState =\n              this.chatService.currentUser.chat_channel_tracking_state[\n                this.channel.id\n              ];\n\n            constructor({ channel, chatService }) {\n              super(...arguments);\n              this.channel = channel;\n              this.chatService = chatService;\n\n              if (this.oneOnOneMessage) {\n                this.channel.chatable.users[0].trackStatus();\n              }\n            }\n\n            @bind\n            willDestroy() {\n              if (this.oneOnOneMessage) {\n                this.channel.chatable.users[0].stopTrackingStatus();\n              }\n            }\n\n            get name() {\n              return dasherize(this.title);\n            }\n\n            get route() {\n              return \"chat.channel\";\n            }\n\n            get models() {\n              return [this.channel.id, slugifyChannel(this.title)];\n            }\n\n            get title() {\n              return this.channel.escapedTitle;\n            }\n\n            get oneOnOneMessage() {\n              return this.channel.chatable.users.length === 1;\n            }\n\n            get text() {\n              const username = this.title.replaceAll(\"@\", \"\");\n              if (this.oneOnOneMessage) {\n                const status = this.channel.chatable.users[0].get(\"status\");\n                const statusHtml = status ? this._userStatusHtml(status) : \"\";\n                return htmlSafe(\n                  `${escapeExpression(\n                    username\n                  )}${statusHtml} ${decorateUsername(\n                    escapeExpression(username)\n                  )}`\n                );\n              } else {\n                return username;\n              }\n            }\n\n            get prefixType() {\n              if (this.oneOnOneMessage) {\n                return \"image\";\n              } else {\n                return \"text\";\n              }\n            }\n\n            get prefixValue() {\n              if (this.channel.chatable.users.length === 1) {\n                return avatarUrl(\n                  this.channel.chatable.users[0].avatar_template,\n                  \"tiny\"\n                );\n              } else {\n                return this.channel.chatable.users.length;\n              }\n            }\n\n            get prefixCSSClass() {\n              const activeUsers = this.chatService.presenceChannel.users;\n              const user = this.channel.chatable.users[0];\n              if (\n                !!activeUsers?.findBy(\"id\", user?.id) ||\n                !!activeUsers?.findBy(\"username\", user?.username)\n              ) {\n                return \"active\";\n              }\n              return \"\";\n            }\n\n            get suffixType() {\n              return \"icon\";\n            }\n\n            get suffixValue() {\n              return this.chatChannelTrackingState?.unread_count > 0\n                ? \"circle\"\n                : \"\";\n            }\n\n            get suffixCSSClass() {\n              return \"urgent\";\n            }\n\n            get hoverType() {\n              return \"icon\";\n            }\n\n            get hoverValue() {\n              return \"times\";\n            }\n\n            get hoverAction() {\n              return () => {\n                this.chatService.unfollowChannel(this.channel);\n              };\n            }\n\n            get hoverTitle() {\n              return I18n.t(\"chat.direct_messages.leave\");\n            }\n\n            _userStatusHtml(status) {\n              const emoji = escapeExpression(`:${status.emoji}:`);\n              const title = this._userStatusTitle(status);\n              return `<span class=\"user-status\">${emojiUnescape(emoji, {\n                title,\n              })}</span>`;\n            }\n\n            _userStatusTitle(status) {\n              let title = `${escapeExpression(status.description)}`;\n\n              if (status.ends_at) {\n                const untilFormatted = until(\n                  status.ends_at,\n                  this.chatService.currentUser.timezone,\n                  this.chatService.currentUser.locale\n                );\n                title += ` ${untilFormatted}`;\n              }\n\n              return title;\n            }\n          };\n\n          const SidebarChatDirectMessagesSection = class extends BaseCustomSidebarSection {\n            @service site;\n            @tracked sectionLinks = [];\n\n            constructor() {\n              super(...arguments);\n\n              if (container.isDestroyed) {\n                return;\n              }\n              this.chatService = container.lookup(\"service:chat\");\n              this.chatService.appEvents.on(\n                \"chat:user-tracking-state-changed\",\n                this._refreshPms\n              );\n              this._refreshPms();\n            }\n\n            @bind\n            willDestroy() {\n              if (container.isDestroyed) {\n                return;\n              }\n              this.chatService.appEvents.off(\n                \"chat:user-tracking-state-changed\",\n                this._refreshPms\n              );\n            }\n\n            @bind\n            _refreshPms() {\n              const newSectionLinks = [];\n              this.chatService.getChannels().then((channels) => {\n                this.chatService\n                  .truncateDirectMessageChannels(channels.directMessageChannels)\n                  .forEach((channel) => {\n                    newSectionLinks.push(\n                      new SidebarChatDirectMessagesSectionLink({\n                        channel,\n                        chatService: this.chatService,\n                      })\n                    );\n                  });\n                this.sectionLinks = newSectionLinks;\n              });\n            }\n\n            get name() {\n              return \"chat-dms\";\n            }\n\n            get title() {\n              return I18n.t(\"chat.direct_messages.title\");\n            }\n\n            get text() {\n              return I18n.t(\"chat.direct_messages.title\");\n            }\n\n            get actions() {\n              return [\n                {\n                  id: \"startDm\",\n                  title: I18n.t(\"chat.direct_messages.new\"),\n                  action: () => {\n                    if (\n                      this.site.mobileView ||\n                      this.chatService.router.currentRouteName.startsWith(\"\")\n                    ) {\n                      this.chatService.router.transitionTo(\n                        \"chat.draft-channel\"\n                      );\n                    } else {\n                      this.appEvents.trigger(\n                        \"chat:open-view\",\n                        DRAFT_CHANNEL_VIEW\n                      );\n                    }\n                  },\n                },\n              ];\n            }\n\n            get actionsIcon() {\n              return \"plus\";\n            }\n\n            get links() {\n              return this.sectionLinks;\n            }\n          };\n\n          return SidebarChatDirectMessagesSection;\n        }\n      );\n    });\n  },\n};\n", "import RestModel from \"discourse/models/rest\";\nimport I18n from \"I18n\";\nimport { computed } from \"@ember/object\";\nimport User from \"discourse/models/user\";\nimport UserChatChannelMembership from \"discourse/plugins/discourse-chat/discourse/models/user-chat-channel-membership\";\nimport { ajax } from \"discourse/lib/ajax\";\nimport { escapeExpression } from \"discourse/lib/utilities\";\n\nexport const CHATABLE_TYPES = {\n  directMessageChannel: \"DirectMessageChannel\",\n  categoryChannel: \"Category\",\n};\nexport const CHANNEL_STATUSES = {\n  open: \"open\",\n  readOnly: \"read_only\",\n  closed: \"closed\",\n  archived: \"archived\",\n};\n\nexport function channelStatusName(channelStatus) {\n  switch (channelStatus) {\n    case CHANNEL_STATUSES.open:\n      return I18n.t(\"chat.channel_status.open\");\n    case CHANNEL_STATUSES.readOnly:\n      return I18n.t(\"chat.channel_status.read_only\");\n    case CHANNEL_STATUSES.closed:\n      return I18n.t(\"chat.channel_status.closed\");\n    case CHANNEL_STATUSES.archived:\n      return I18n.t(\"chat.channel_status.archived\");\n  }\n}\n\nexport function channelStatusIcon(channelStatus) {\n  if (channelStatus === CHANNEL_STATUSES.open) {\n    return null;\n  }\n\n  switch (channelStatus) {\n    case CHANNEL_STATUSES.closed:\n      return \"lock\";\n      break;\n    case CHANNEL_STATUSES.readOnly:\n      return \"comment-slash\";\n      break;\n    case CHANNEL_STATUSES.archived:\n      return \"archive\";\n      break;\n  }\n}\n\nconst STAFF_READONLY_STATUSES = [\n  CHANNEL_STATUSES.readOnly,\n  CHANNEL_STATUSES.archived,\n];\n\nconst READONLY_STATUSES = [\n  CHANNEL_STATUSES.closed,\n  CHANNEL_STATUSES.readOnly,\n  CHANNEL_STATUSES.archived,\n];\n\nexport default class ChatChannel extends RestModel {\n  isDraft = false;\n  lastSendReadMessageId = null;\n\n  @computed(\"title\")\n  get escapedTitle() {\n    return escapeExpression(this.title);\n  }\n\n  @computed(\"description\")\n  get escapedDescription() {\n    return escapeExpression(this.description);\n  }\n\n  @computed(\"chatable_type\")\n  get isDirectMessageChannel() {\n    return this.chatable_type === CHATABLE_TYPES.directMessageChannel;\n  }\n\n  @computed(\"chatable_type\")\n  get isCategoryChannel() {\n    return this.chatable_type === CHATABLE_TYPES.categoryChannel;\n  }\n\n  @computed(\"status\")\n  get isOpen() {\n    return !this.status || this.status === CHANNEL_STATUSES.open;\n  }\n\n  @computed(\"status\")\n  get isReadOnly() {\n    return this.status === CHANNEL_STATUSES.readOnly;\n  }\n\n  @computed(\"status\")\n  get isClosed() {\n    return this.status === CHANNEL_STATUSES.closed;\n  }\n\n  @computed(\"status\")\n  get isArchived() {\n    return this.status === CHANNEL_STATUSES.archived;\n  }\n\n  @computed(\"isArchived\", \"isOpen\")\n  get isJoinable() {\n    return this.isOpen && !this.isArchived;\n  }\n\n  @computed(\"memberships_count\")\n  get membershipsCount() {\n    return this.memberships_count;\n  }\n\n  @computed(\"current_user_membership.following\")\n  get isFollowing() {\n    return this.current_user_membership.following;\n  }\n\n  canModifyMessages(user) {\n    if (user.staff) {\n      return !STAFF_READONLY_STATUSES.includes(this.status);\n    }\n\n    return !READONLY_STATUSES.includes(this.status);\n  }\n\n  updateMembership(membership) {\n    this.current_user_membership.setProperties({\n      following: membership.following,\n      muted: membership.muted,\n      desktop_notification_level: membership.desktop_notification_level,\n      mobile_notification_level: membership.mobile_notification_level,\n    });\n  }\n\n  updateLastReadMessage(messageId) {\n    if (!this.isFollowing || !messageId) {\n      return;\n    }\n\n    return ajax(`/chat/${this.id}/read/${messageId}.json`, {\n      method: \"PUT\",\n    }).then(() => {\n      this.set(\"lastSendReadMessageId\", messageId);\n    });\n  }\n}\n\nChatChannel.reopenClass({\n  create(args) {\n    args = args || {};\n    this._initUserModels(args);\n    this._initUserMembership(args);\n\n    args.lastSendReadMessageId =\n      args.current_user_membership?.last_read_message_id;\n\n    return this._super(args);\n  },\n\n  _initUserModels(args) {\n    if (args.chatable?.users?.length) {\n      for (let i = 0; i < args.chatable?.users?.length; i++) {\n        const userData = args.chatable.users[i];\n        args.chatable.users[i] = User.create(userData);\n      }\n    }\n  },\n\n  _initUserMembership(args) {\n    if (args.current_user_membership instanceof UserChatChannelMembership) {\n      return;\n    }\n\n    args.current_user_membership = UserChatChannelMembership.create(\n      args.current_user_membership || {\n        following: false,\n        muted: false,\n        unread_count: 0,\n        unread_mentions: 0,\n      }\n    );\n  },\n});\n\nexport function createDirectMessageChannelDraft() {\n  return ChatChannel.create({\n    isDraft: true,\n    chatable_type: CHATABLE_TYPES.directMessageChannel,\n    chatable: {\n      users: [],\n    },\n  });\n}\n", "{{#if channel.isCategoryChannel}}\n  <div class=\"chat-form__section\">\n    <div class=\"chat-form__field\">\n      <label class=\"chat-form__label\">\n        {{i18n \"chat.about_view.associated_category\"}}\n      </label>\n      <div class=\"chat-form__control\">\n        {{category-badge channel.chatable link=true allowUncategorized=true}}\n      </div>\n    </div>\n  </div>\n{{/if}}\n\n<div class=\"chat-form__section\">\n  <div class=\"chat-form__field\">\n    <label class=\"chat-form__label\">\n      <span>{{i18n \"chat.about_view.title\"}}</span>\n      {{#if (chat-guardian \"can-edit-chat-channel\")}}\n        <div class=\"chat-form__label-actions\">\n          {{d-button\n            class=\"edit-title-btn btn-flat\"\n            label=\"chat.channel_settings.edit\"\n            action=(if onEditChatChannelTitle onEditChatChannelTitle)\n          }}\n        </div>\n      {{/if}}\n    </label>\n    <div class=\"chat-form__control\">\n      <div class=\"channel-info-about-view__title\">\n        {{replace-emoji channel.escapedTitle}}\n      </div>\n    </div>\n  </div>\n</div>\n\n{{#if (or (chat-guardian \"can-edit-chat-channel\") channel.description.length)}}\n  <div class=\"chat-form__section\">\n    <div class=\"chat-form__field\">\n      <label class=\"chat-form__label\">\n        <span>{{i18n \"chat.about_view.description\"}}</span>\n        {{#if (chat-guardian \"can-edit-chat-channel\")}}\n          <div class=\"chat-form__label-actions\">\n            {{d-button\n              class=\"edit-description-btn btn-flat\"\n              label=(if\n                channel.description.length\n                \"chat.channel_settings.edit\"\n                \"chat.channel_settings.add\"\n              )\n              action=(if\n                onEditChatChannelDescription onEditChatChannelDescription\n              )\n            }}\n          </div>\n        {{/if}}\n      </label>\n\n      <div class=\"chat-form__control\">\n        <div class=\"channel-info-about-view__description\">\n          {{#if channel.description.length}}\n            {{channel.description}}\n          {{else}}\n            <div class=\"channel-info-about-view__description__helper-text\">\n              {{i18n \"chat.channel_edit_description_modal.description\"}}\n            </div>\n          {{/if}}\n        </div>\n      </div>\n    </div>\n  </div>\n{{/if}}\n\n<div class=\"chat-form__section\">\n  <ToggleChannelMembershipButton\n    @channel={{this.channel}}\n    @onToggle={{action \"afterMembershipToggle\"}}\n    @options={{hash joinClass=\"btn-primary\" leaveClass=\"btn-flat\" joinIcon=\"sign-in-alt\" leaveIcon=\"sign-out-alt\"}}\n  />\n</div>\n", "{{#if channel}}\n  <div\n    class={{concat\n      \"chat-channel-card\"\n      (if channel.isClosed \" -closed\")\n      (if channel.isArchived \" -archived\")\n    }}\n    style={{border-color channel.chatable.color}}\n  >\n    {{#link-to\n      \"chat.channel.info.settings\"\n      channel.id\n      (slugify-channel channel.title)\n      class=\"chat-channel-card__setting\"\n      tabindex=\"-1\"\n    }}\n      {{d-icon \"cog\"}}\n    {{/link-to}}\n\n    {{#link-to\n      \"chat.channel\"\n      channel.id\n      (slugify-channel channel.title)\n      class=\"chat-channel-card__name-container\"\n    }}\n      <span class=\"chat-channel-card__name\">\n        {{replace-emoji channel.escapedTitle}}\n      </span>\n      {{#if channel.chatable.read_restricted}}\n        {{d-icon \"lock\" class=\"chat-channel-card__read-restricted\"}}\n      {{/if}}\n    {{/link-to}}\n\n    {{#if channel.description}}\n      <div class=\"chat-channel-card__description\">\n        {{replace-emoji channel.escapedDescription}}\n      </div>\n    {{/if}}\n\n    <div class=\"chat-channel-card__cta\">\n      {{#if channel.isFollowing}}\n        <div class=\"chat-channel-card__tags\">\n          <span class=\"chat-channel-card__tag -joined\">\n            {{i18n \"chat.joined\"}}\n          </span>\n\n          {{#if channel.current_user_membership.muted}}\n            {{#link-to\n              \"chat.channel.info.settings\"\n              channel.id\n              (slugify-channel channel.title)\n              class=\"chat-channel-card__tag -muted\"\n              tabindex=\"-1\"\n            }}\n              {{i18n \"chat.muted\"}}\n            {{/link-to}}\n          {{/if}}\n        </div>\n      {{else if channel.isJoinable}}\n        <ToggleChannelMembershipButton\n          @channel={{this.channel}}\n          @onToggle={{action \"afterMembershipToggle\"}}\n          @options={{hash joinClass=\"btn-primary btn-small chat-channel-card__join-btn\" labelType=\"short\"}}\n        />\n      {{/if}}\n\n      {{#if (gt channel.membershipsCount 0)}}\n        {{#link-to\n          \"chat.channel.info.members\"\n          channel.id\n          (slugify-channel channel.title)\n          class=\"chat-channel-card__members\"\n          tabindex=\"-1\"\n        }}\n          {{i18n\n            \"chat.channel.memberships_count\"\n            count=channel.membershipsCount\n          }}\n        {{/link-to}}\n      {{/if}}\n    </div>\n  </div>\n{{/if}}\n", "{{#if channel.isDraft}}\n  <div class=\"chat-channel-title is-draft\">\n    <span class=\"chat-channel-title__name\">{{channel.title}}</span>\n    {{#if (has-block)}}\n      {{yield}}\n    {{/if}}\n  </div>\n{{else}}\n  {{#if channel.isDirectMessageChannel}}\n    <div class=\"chat-channel-title is-dm\">\n      {{#if multiDm}}\n        <span class=\"chat-channel-title__users-count\">\n          {{channel.chatable.users.length}}\n        </span>\n        <span class=\"chat-channel-title__name\">{{usernames}}</span>\n      {{else}}\n        {{chat-user-avatar user=channel.chatable.users.firstObject}}\n        <span class=\"chat-channel-title__usernames\">\n          {{#let channel.chatable.users.firstObject as |user|}}\n            <span class=\"chat-channel-title__name\">{{user.username}}</span>\n            {{plugin-outlet\n              name=\"after-chat-channel-username\"\n              args=(hash user=user)\n              tagName=\"\"\n              connectorTagName=\"\"\n            }}\n          {{/let}}\n        </span>\n      {{/if}}\n\n      {{#if (has-block)}}\n        {{yield}}\n      {{/if}}\n    </div>\n  {{else if channel.isCategoryChannel}}\n    <div class=\"chat-channel-title is-category\">\n      <span\n        class=\"chat-channel-title__category-badge\"\n        style={{this.channelColorStyle}}\n      >\n        {{d-icon \"hashtag\"}}\n        {{#if channel.chatable.read_restricted}}\n          {{d-icon \"lock\" class=\"chat-channel-title__restricted-category-icon\"}}\n        {{/if}}\n      </span>\n      <span class=\"chat-channel-title__name\">\n        {{replace-emoji channel.escapedTitle}}\n      </span>\n\n      {{#if (has-block)}}\n        {{yield}}\n      {{/if}}\n    </div>\n  {{/if}}\n\n  {{#if unreadIndicator}}\n    {{chat-channel-unread-indicator channel=channel}}\n  {{/if}}\n{{/if}}\n"], "filenames": ["assets/javascripts/discourse/components/chat-channel-archive-modal-inner.js", "assets/javascripts/discourse/components/chat-channel-delete-modal-inner.js", "assets/javascripts/discourse/components/chat-message-move-to-channel-modal-inner.js", "assets/javascripts/discourse/initializers/chat-sidebar.js", "assets/javascripts/discourse/models/chat-channel.js", "assets/javascripts/discourse/templates/components/chat-channel-about-view.hbs", "assets/javascripts/discourse/templates/components/chat-channel-card.hbs", "assets/javascripts/discourse/templates/components/chat-channel-title.hbs"], "buggy_code_start_loc": [17, 11, 10, 81, 6, 30, 27, 47], "buggy_code_end_loc": [112, 74, 62, 246, 63, 31, 37, 48], "fixing_code_start_loc": [16, 10, 9, 81, 7, 30, 27, 47], "fixing_code_end_loc": [111, 67, 61, 246, 75, 31, 37, 48], "type": "CWE-79", "message": "discourse-chat is a plugin for the Discourse message board which adds chat functionality. In versions prior to 0.9 some places render a chat channel's name and description in an unsafe way, allowing staff members to cause an cross site scripting (XSS) attack by inserting unsafe HTML into them. Version 0.9 has addressed this issue. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-39279", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-06T20:15:34.980", "lastModified": "2022-10-11T14:50:10.867", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "discourse-chat is a plugin for the Discourse message board which adds chat functionality. In versions prior to 0.9 some places render a chat channel's name and description in an unsafe way, allowing staff members to cause an cross site scripting (XSS) attack by inserting unsafe HTML into them. Version 0.9 has addressed this issue. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "discourse-chat es un plugin para el tablero de mensajes Discourse que a\u00f1ade funcionalidad de chat. En versiones anteriores a 0.9, algunos lugares muestran el nombre y la descripci\u00f3n de un canal de chat de forma no segura, permitiendo a miembros del personal causar un ataque de tipo cross site scripting (XSS) al insertar HTML no seguro en ellos. La versi\u00f3n 0.9 ha abordado este problema. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse-chat:*:*:*:*:*:discourse:*:*", "versionEndExcluding": "0.9", "matchCriteriaId": "A2BA9C99-E117-4FE3-A2A2-40CC2D9B19B0"}]}]}], "references": [{"url": "https://github.com/discourse/discourse-chat/commit/25737733af48e5b9fa60b0561d7fde14bea13cce", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse-chat/security/advisories/GHSA-qp62-8m3c-9jgj", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse-chat/commit/25737733af48e5b9fa60b0561d7fde14bea13cce"}}