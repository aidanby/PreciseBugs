{"buggy_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserCredentialController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserCredentialController extends BaseController\n{\n    /**\n     * Password modification form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changePassword(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        return $this->response->html($this->helper->layout->user('user_credential/password', array(\n            'values' => $values + array('id' => $user['id']),\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save new password\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function savePassword()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        list($valid, $errors) = $this->userValidator->validatePasswordModification($values);\n\n        if (! $this->userSession->isAdmin()) {\n            $values['id'] = $this->userSession->getId();\n        }\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('Password modified successfully.'));\n                $this->userLockingModel->resetFailedLogin($user['username']);\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to change the password.'));\n            }\n        }\n\n        $this->changePassword($values, $errors);\n    }\n\n    /**\n     * Display a form to edit authentication\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changeAuthentication(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_credential/authentication', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save authentication\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function saveAuthentication()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues() + array('disable_login_form' => 0, 'is_ldap_user' => 0);\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserCredentialController', 'changeAuthentication', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->changeAuthentication($values, $errors);\n    }\n\n    /**\n     * Unlock user\n     */\n    public function unlock()\n    {\n        $user = $this->getUser();\n        $this->checkCSRFParam();\n\n        if ($this->userLockingModel->resetFailedLogin($user['username'])) {\n            $this->flash->success(t('User unlocked successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to unlock the user.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserModificationController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserModificationController extends BaseController\n{\n    /**\n     * Display a form to edit user information\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_modification/show', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n            'timezones' => $this->timezoneModel->getTimezones(true),\n            'languages' => $this->languageModel->getLanguages(true),\n            'roles' => $this->role->getApplicationRoles(),\n        )));\n    }\n\n    /**\n     * Save user information\n     */\n    public function save()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        if (! $this->userSession->isAdmin()) {\n            if (isset($values['role'])) {\n                unset($values['role']);\n            }\n        }\n\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->show($values, $errors);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserCredentialController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserCredentialController extends BaseController\n{\n    /**\n     * Password modification form\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changePassword(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        return $this->response->html($this->helper->layout->user('user_credential/password', array(\n            'values' => $values + array('id' => $user['id']),\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save new password\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function savePassword()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        list($valid, $errors) = $this->userValidator->validatePasswordModification($values);\n\n        if (! $this->userSession->isAdmin()) {\n            $values = array(\n                'id' => $this->userSession->getId(),\n                'password' => isset($values['password']) ? $values['password'] : '',\n                'confirmation' => isset($values['confirmation']) ? $values['confirmation'] : '',\n            );\n        }\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('Password modified successfully.'));\n                $this->userLockingModel->resetFailedLogin($user['username']);\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to change the password.'));\n            }\n        }\n\n        $this->changePassword($values, $errors);\n    }\n\n    /**\n     * Display a form to edit authentication\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function changeAuthentication(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_credential/authentication', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n        )));\n    }\n\n    /**\n     * Save authentication\n     *\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function saveAuthentication()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues() + array('disable_login_form' => 0, 'is_ldap_user' => 0);\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserCredentialController', 'changeAuthentication', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->changeAuthentication($values, $errors);\n    }\n\n    /**\n     * Unlock user\n     */\n    public function unlock()\n    {\n        $user = $this->getUser();\n        $this->checkCSRFParam();\n\n        if ($this->userLockingModel->resetFailedLogin($user['username'])) {\n            $this->flash->success(t('User unlocked successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to unlock the user.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class UserModificationController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass UserModificationController extends BaseController\n{\n    /**\n     * Display a form to edit user information\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $user = $this->getUser();\n\n        if (empty($values)) {\n            $values = $user;\n            unset($values['password']);\n        }\n\n        return $this->response->html($this->helper->layout->user('user_modification/show', array(\n            'values' => $values,\n            'errors' => $errors,\n            'user' => $user,\n            'timezones' => $this->timezoneModel->getTimezones(true),\n            'languages' => $this->languageModel->getLanguages(true),\n            'roles' => $this->role->getApplicationRoles(),\n        )));\n    }\n\n    /**\n     * Save user information\n     */\n    public function save()\n    {\n        $user = $this->getUser();\n        $values = $this->request->getValues();\n\n        if (! $this->userSession->isAdmin()) {\n            $values = array(\n                'id' => $this->userSession->getId(),\n                'username' => isset($values['username']) ? $values['username'] : '',\n                'name' => isset($values['name']) ? $values['name'] : '',\n                'email' => isset($values['email']) ? $values['email'] : '',\n                'timezone' => isset($values['timezone']) ? $values['timezone'] : '',\n                'language' => isset($values['language']) ? $values['language'] : '',\n            );\n        }\n\n        list($valid, $errors) = $this->userValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->userModel->update($values)) {\n                $this->flash->success(t('User updated successfully.'));\n                $this->response->redirect($this->helper->url->to('UserViewController', 'show', array('user_id' => $user['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this user.'));\n            }\n        }\n\n        $this->show($values, $errors);\n    }\n}\n"], "filenames": ["app/Controller/UserCredentialController.php", "app/Controller/UserModificationController.php"], "buggy_code_start_loc": [47, 50], "buggy_code_end_loc": [48, 53], "fixing_code_start_loc": [47, 50], "fixing_code_end_loc": [52, 58], "type": "CWE-640", "message": "An authenticated standard user could reset the password of the admin by altering form data. Affects kanboard before 1.0.46.", "other": {"cve": {"id": "CVE-2017-12851", "sourceIdentifier": "cve@mitre.org", "published": "2017-08-14T20:29:00.217", "lastModified": "2017-08-24T15:52:08.290", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An authenticated standard user could reset the password of the admin by altering form data. Affects kanboard before 1.0.46."}, {"lang": "es", "value": "Un usuario est\u00e1ndar autenticado podr\u00eda resetear la contrase\u00f1a del administrador alterando los datos del formulario. Afecta a kanboard en versiones anteriores a la 1.0.46."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-640"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.0.45", "matchCriteriaId": "BF0BD9E9-7C97-4DAD-842F-0D05D1EF2EF9"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/100352", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/kanboard/kanboard/commit/b79b18efd7a1a8b591753a4eddd473f88d55b7df", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/b79b18efd7a1a8b591753a4eddd473f88d55b7df"}}