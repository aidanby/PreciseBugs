{"buggy_code": ["<?php\n/**\n * This file gets used to access {@link Plugin} methods that are marked to be accessible this\n * way. See {@link Plugin::GetHtsrvMethods()}.\n *\n * This file is part of the evoCore framework - {@link http://evocore.net/}\n * See also {@link https://github.com/b2evolution/b2evolution}.\n *\n * @license GNU GPL v2 - {@link http://b2evolution.net/about/gnu-gpl-license}\n *\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n * Parts of this file are copyright (c)2004-2006 by Daniel HAHLER - {@link http://thequod.de/contact}.\n *\n * @package htsrv\n */\n\n\n/**\n * Initialize:\n * TODO: Don't do a full init!\n */\nrequire_once dirname(__FILE__).'/../conf/_config.php';\nrequire_once $inc_path.'_main.inc.php';\n\n\nparam( 'plugin_ID', 'integer', true );\n// fp> it is probably unnecessary complexity to handle a method here\n// instead of calling handle_htsrv_action() all the time\n// and letting the plugin deal with its methods internally.\nparam( 'method', 'string', '' );\nparam( 'params', 'string', null ); // serialized\n\nif( is_null($params) )\n{ // Default:\n\t$params = array();\n}\nelse\n{ // params given. This may result in \"false\", but this means that unserializing failed.\n\t$params = @unserialize($params);\n}\n\n\nif( $plugin_ID )\n{\n\t$Plugin = & $Plugins->get_by_ID( $plugin_ID );\n\n\tif( ! $Plugin )\n\t{\n\t\tbad_request_die( 'Invalid Plugin! (maybe not enabled?)' );\n\t}\n\n\n\tif( method_exists( $Plugin, 'get_htsrv_methods' ) )\n\t{ // TODO: get_htsrv_methods is deprecated, but should stay here for transformation! (blueyed, 2006-04-27)\n\t\tif( ! in_array( $method, $Plugin->get_htsrv_methods() ) )\n\t\t{\n\t\t\tbad_request_die( 'Call to non-htsrv Plugin method!' );\n\t\t}\n\t}\n\telse\n\tif( ! in_array( $method, $Plugin->GetHtsrvMethods() ) )\n\t{\n\t\tbad_request_die( 'Call to non-htsrv Plugin method!' );\n\t}\n\telseif( ! method_exists( $Plugin, 'htsrv_'.$method ) )\n\t{\n\t\tbad_request_die( 'htsrv method does not exist!' );\n\t}\n\n\t// Call the method:\n\t$Plugins->call_method( $Plugin->ID, 'htsrv_'.$method, $params );\n}\n\n?>"], "fixing_code": ["<?php\n/**\n * This file gets used to access {@link Plugin} methods that are marked to be accessible this\n * way. See {@link Plugin::GetHtsrvMethods()}.\n *\n * This file is part of the evoCore framework - {@link http://evocore.net/}\n * See also {@link https://github.com/b2evolution/b2evolution}.\n *\n * @license GNU GPL v2 - {@link http://b2evolution.net/about/gnu-gpl-license}\n *\n * @copyright (c)2003-2016 by Francois Planque - {@link http://fplanque.com/}\n * Parts of this file are copyright (c)2004-2006 by Daniel HAHLER - {@link http://thequod.de/contact}.\n *\n * @package htsrv\n */\n\n\n/**\n * Initialize:\n * TODO: Don't do a full init!\n */\nrequire_once dirname(__FILE__).'/../conf/_config.php';\nrequire_once $inc_path.'_main.inc.php';\n\n\nparam( 'plugin_ID', 'integer', true );\n// fp> it is probably unnecessary complexity to handle a method here\n// instead of calling handle_htsrv_action() all the time\n// and letting the plugin deal with its methods internally.\nparam( 'method', 'string', '' );\nparam( 'params', 'string', null ); // serialized\n\nif( is_null( $params ) )\n{\t// Use empty array by default if params are not sent by request:\n\t$params = array();\n}\nelse\n{\t// Params given:\n\tif( substr( $params, 0, 2 ) == 'a:' )\n\t{\t// Allow to unserialize only arrays, to avoid object injection vulnerability:\n\t\t// (This may result in \"false\", but this means that unserializing failed)\n\t\t$params = @unserialize( $params );\n\t}\n\telse\n\t{\t// Restrict all non array params to empty array:\n\t\t$params = array();\n\t}\n}\n\n\nif( $plugin_ID )\n{\n\t$Plugin = & $Plugins->get_by_ID( $plugin_ID );\n\n\tif( ! $Plugin )\n\t{\n\t\tbad_request_die( 'Invalid Plugin! (maybe not enabled?)' );\n\t}\n\n\n\tif( method_exists( $Plugin, 'get_htsrv_methods' ) )\n\t{ // TODO: get_htsrv_methods is deprecated, but should stay here for transformation! (blueyed, 2006-04-27)\n\t\tif( ! in_array( $method, $Plugin->get_htsrv_methods() ) )\n\t\t{\n\t\t\tbad_request_die( 'Call to non-htsrv Plugin method!' );\n\t\t}\n\t}\n\telse\n\tif( ! in_array( $method, $Plugin->GetHtsrvMethods() ) )\n\t{\n\t\tbad_request_die( 'Call to non-htsrv Plugin method!' );\n\t}\n\telseif( ! method_exists( $Plugin, 'htsrv_'.$method ) )\n\t{\n\t\tbad_request_die( 'htsrv method does not exist!' );\n\t}\n\n\t// Call the method:\n\t$Plugins->call_method( $Plugin->ID, 'htsrv_'.$method, $params );\n}\n\n?>"], "filenames": ["htsrv/call_plugin.php"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [40], "fixing_code_start_loc": [33], "fixing_code_end_loc": [48], "type": "CWE-74", "message": "b2evolution 6.7.6 suffer from an Object Injection vulnerability in /htsrv/call_plugin.php.", "other": {"cve": {"id": "CVE-2016-8901", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-23T18:29:00.247", "lastModified": "2019-05-28T15:49:28.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "b2evolution 6.7.6 suffer from an Object Injection vulnerability in /htsrv/call_plugin.php."}, {"lang": "es", "value": "b2evolution versi\u00f3n 6.7.6, sufre de una vulnerabilidad de Inyecci\u00f3n de Objeto en /htsrv/call_plugin.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:b2evolution:b2evolution:6.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "C71FD8FE-845F-453F-B519-572E35E212D5"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/09/30/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Exploit", "Third Party Advisory"]}, {"url": "https://github.com/b2evolution/b2evolution/commit/25c21cf9cc4261324001f9039509710b37ee2c4d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/b2evolution/b2evolution/commit/999b5ad1d59760d7e450ceb541f55432fc74cd27", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/b2evolution/b2evolution/commit/25c21cf9cc4261324001f9039509710b37ee2c4d"}}