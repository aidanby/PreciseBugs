{"buggy_code": ["/*\n *   fs/cifs/smb2pdu.c\n *\n *   Copyright (C) International Business Machines  Corp., 2009, 2013\n *                 Etersoft, 2012\n *   Author(s): Steve French (sfrench@us.ibm.com)\n *              Pavel Shilovsky (pshilovsky@samba.org) 2012\n *\n *   Contains the routines for constructing the SMB2 PDUs themselves\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as published\n *   by the Free Software Foundation; either version 2.1 of the License, or\n *   (at your option) any later version.\n *\n *   This library is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n *   the GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public License\n *   along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\n\n /* SMB2 PDU handling routines here - except for leftovers (eg session setup) */\n /* Note that there are handle based routines which must be\t\t      */\n /* treated slightly differently for reconnection purposes since we never     */\n /* want to reuse a stale file handle and only the caller knows the file info */\n\n#include <linux/fs.h>\n#include <linux/kernel.h>\n#include <linux/vfs.h>\n#include <linux/task_io_accounting_ops.h>\n#include <linux/uaccess.h>\n#include <linux/uuid.h>\n#include <linux/pagemap.h>\n#include <linux/xattr.h>\n#include \"smb2pdu.h\"\n#include \"cifsglob.h\"\n#include \"cifsacl.h\"\n#include \"cifsproto.h\"\n#include \"smb2proto.h\"\n#include \"cifs_unicode.h\"\n#include \"cifs_debug.h\"\n#include \"ntlmssp.h\"\n#include \"smb2status.h\"\n#include \"smb2glob.h\"\n#include \"cifspdu.h\"\n#include \"cifs_spnego.h\"\n#include \"smbdirect.h\"\n#include \"trace.h\"\n#ifdef CONFIG_CIFS_DFS_UPCALL\n#include \"dfs_cache.h\"\n#endif\n\n/*\n *  The following table defines the expected \"StructureSize\" of SMB2 requests\n *  in order by SMB2 command.  This is similar to \"wct\" in SMB/CIFS requests.\n *\n *  Note that commands are defined in smb2pdu.h in le16 but the array below is\n *  indexed by command in host byte order.\n */\nstatic const int smb2_req_struct_sizes[NUMBER_OF_SMB2_COMMANDS] = {\n\t/* SMB2_NEGOTIATE */ 36,\n\t/* SMB2_SESSION_SETUP */ 25,\n\t/* SMB2_LOGOFF */ 4,\n\t/* SMB2_TREE_CONNECT */\t9,\n\t/* SMB2_TREE_DISCONNECT */ 4,\n\t/* SMB2_CREATE */ 57,\n\t/* SMB2_CLOSE */ 24,\n\t/* SMB2_FLUSH */ 24,\n\t/* SMB2_READ */\t49,\n\t/* SMB2_WRITE */ 49,\n\t/* SMB2_LOCK */\t48,\n\t/* SMB2_IOCTL */ 57,\n\t/* SMB2_CANCEL */ 4,\n\t/* SMB2_ECHO */ 4,\n\t/* SMB2_QUERY_DIRECTORY */ 33,\n\t/* SMB2_CHANGE_NOTIFY */ 32,\n\t/* SMB2_QUERY_INFO */ 41,\n\t/* SMB2_SET_INFO */ 33,\n\t/* SMB2_OPLOCK_BREAK */ 24 /* BB this is 36 for LEASE_BREAK variant */\n};\n\nint smb3_encryption_required(const struct cifs_tcon *tcon)\n{\n\tif (!tcon)\n\t\treturn 0;\n\tif ((tcon->ses->session_flags & SMB2_SESSION_FLAG_ENCRYPT_DATA) ||\n\t    (tcon->share_flags & SHI1005_FLAGS_ENCRYPT_DATA))\n\t\treturn 1;\n\tif (tcon->seal &&\n\t    (tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))\n\t\treturn 1;\n\treturn 0;\n}\n\nstatic void\nsmb2_hdr_assemble(struct smb2_sync_hdr *shdr, __le16 smb2_cmd,\n\t\t  const struct cifs_tcon *tcon)\n{\n\tshdr->ProtocolId = SMB2_PROTO_NUMBER;\n\tshdr->StructureSize = cpu_to_le16(64);\n\tshdr->Command = smb2_cmd;\n\tif (tcon && tcon->ses && tcon->ses->server) {\n\t\tstruct TCP_Server_Info *server = tcon->ses->server;\n\n\t\tspin_lock(&server->req_lock);\n\t\t/* Request up to 10 credits but don't go over the limit. */\n\t\tif (server->credits >= server->max_credits)\n\t\t\tshdr->CreditRequest = cpu_to_le16(0);\n\t\telse\n\t\t\tshdr->CreditRequest = cpu_to_le16(\n\t\t\t\tmin_t(int, server->max_credits -\n\t\t\t\t\t\tserver->credits, 10));\n\t\tspin_unlock(&server->req_lock);\n\t} else {\n\t\tshdr->CreditRequest = cpu_to_le16(2);\n\t}\n\tshdr->ProcessId = cpu_to_le32((__u16)current->tgid);\n\n\tif (!tcon)\n\t\tgoto out;\n\n\t/* GLOBAL_CAP_LARGE_MTU will only be set if dialect > SMB2.02 */\n\t/* See sections 2.2.4 and 3.2.4.1.5 of MS-SMB2 */\n\tif ((tcon->ses) && (tcon->ses->server) &&\n\t    (tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_LARGE_MTU))\n\t\tshdr->CreditCharge = cpu_to_le16(1);\n\t/* else CreditCharge MBZ */\n\n\tshdr->TreeId = tcon->tid;\n\t/* Uid is not converted */\n\tif (tcon->ses)\n\t\tshdr->SessionId = tcon->ses->Suid;\n\n\t/*\n\t * If we would set SMB2_FLAGS_DFS_OPERATIONS on open we also would have\n\t * to pass the path on the Open SMB prefixed by \\\\server\\share.\n\t * Not sure when we would need to do the augmented path (if ever) and\n\t * setting this flag breaks the SMB2 open operation since it is\n\t * illegal to send an empty path name (without \\\\server\\share prefix)\n\t * when the DFS flag is set in the SMB open header. We could\n\t * consider setting the flag on all operations other than open\n\t * but it is safer to net set it for now.\n\t */\n/*\tif (tcon->share_flags & SHI1005_FLAGS_DFS)\n\t\tshdr->Flags |= SMB2_FLAGS_DFS_OPERATIONS; */\n\n\tif (tcon->ses && tcon->ses->server && tcon->ses->server->sign &&\n\t    !smb3_encryption_required(tcon))\n\t\tshdr->Flags |= SMB2_FLAGS_SIGNED;\nout:\n\treturn;\n}\n\n#ifdef CONFIG_CIFS_DFS_UPCALL\nstatic int __smb2_reconnect(const struct nls_table *nlsc,\n\t\t\t    struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct dfs_cache_tgt_list tl;\n\tstruct dfs_cache_tgt_iterator *it = NULL;\n\tchar *tree;\n\tconst char *tcp_host;\n\tsize_t tcp_host_len;\n\tconst char *dfs_host;\n\tsize_t dfs_host_len;\n\n\ttree = kzalloc(MAX_TREE_SIZE, GFP_KERNEL);\n\tif (!tree)\n\t\treturn -ENOMEM;\n\n\tif (tcon->ipc) {\n\t\tscnprintf(tree, MAX_TREE_SIZE, \"\\\\\\\\%s\\\\IPC$\",\n\t\t\t  tcon->ses->server->hostname);\n\t\trc = SMB2_tcon(0, tcon->ses, tree, tcon, nlsc);\n\t\tgoto out;\n\t}\n\n\tif (!tcon->dfs_path) {\n\t\trc = SMB2_tcon(0, tcon->ses, tcon->treeName, tcon, nlsc);\n\t\tgoto out;\n\t}\n\n\trc = dfs_cache_noreq_find(tcon->dfs_path + 1, NULL, &tl);\n\tif (rc)\n\t\tgoto out;\n\n\textract_unc_hostname(tcon->ses->server->hostname, &tcp_host,\n\t\t\t     &tcp_host_len);\n\n\tfor (it = dfs_cache_get_tgt_iterator(&tl); it;\n\t     it = dfs_cache_get_next_tgt(&tl, it)) {\n\t\tconst char *tgt = dfs_cache_get_tgt_name(it);\n\n\t\textract_unc_hostname(tgt, &dfs_host, &dfs_host_len);\n\n\t\tif (dfs_host_len != tcp_host_len\n\t\t    || strncasecmp(dfs_host, tcp_host, dfs_host_len) != 0) {\n\t\t\tcifs_dbg(FYI, \"%s: skipping %.*s, doesn't match %.*s\",\n\t\t\t\t __func__,\n\t\t\t\t (int)dfs_host_len, dfs_host,\n\t\t\t\t (int)tcp_host_len, tcp_host);\n\t\t\tcontinue;\n\t\t}\n\n\t\tscnprintf(tree, MAX_TREE_SIZE, \"\\\\%s\", tgt);\n\n\t\trc = SMB2_tcon(0, tcon->ses, tree, tcon, nlsc);\n\t\tif (!rc)\n\t\t\tbreak;\n\t\tif (rc == -EREMOTE)\n\t\t\tbreak;\n\t}\n\n\tif (!rc) {\n\t\tif (it)\n\t\t\trc = dfs_cache_noreq_update_tgthint(tcon->dfs_path + 1,\n\t\t\t\t\t\t\t    it);\n\t\telse\n\t\t\trc = -ENOENT;\n\t}\n\tdfs_cache_free_tgts(&tl);\nout:\n\tkfree(tree);\n\treturn rc;\n}\n#else\nstatic inline int __smb2_reconnect(const struct nls_table *nlsc,\n\t\t\t\t   struct cifs_tcon *tcon)\n{\n\treturn SMB2_tcon(0, tcon->ses, tcon->treeName, tcon, nlsc);\n}\n#endif\n\nstatic int\nsmb2_reconnect(__le16 smb2_command, struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct nls_table *nls_codepage;\n\tstruct cifs_ses *ses;\n\tstruct TCP_Server_Info *server;\n\tint retries;\n\n\t/*\n\t * SMB2s NegProt, SessSetup, Logoff do not have tcon yet so\n\t * check for tcp and smb session status done differently\n\t * for those three - in the calling routine.\n\t */\n\tif (tcon == NULL)\n\t\treturn 0;\n\n\tif (smb2_command == SMB2_TREE_CONNECT)\n\t\treturn 0;\n\n\tif (tcon->tidStatus == CifsExiting) {\n\t\t/*\n\t\t * only tree disconnect, open, and write,\n\t\t * (and ulogoff which does not have tcon)\n\t\t * are allowed as we start force umount.\n\t\t */\n\t\tif ((smb2_command != SMB2_WRITE) &&\n\t\t   (smb2_command != SMB2_CREATE) &&\n\t\t   (smb2_command != SMB2_TREE_DISCONNECT)) {\n\t\t\tcifs_dbg(FYI, \"can not send cmd %d while umounting\\n\",\n\t\t\t\t smb2_command);\n\t\t\treturn -ENODEV;\n\t\t}\n\t}\n\tif ((!tcon->ses) || (tcon->ses->status == CifsExiting) ||\n\t    (!tcon->ses->server))\n\t\treturn -EIO;\n\n\tses = tcon->ses;\n\tserver = ses->server;\n\n\tretries = server->nr_targets;\n\n\t/*\n\t * Give demultiplex thread up to 10 seconds to each target available for\n\t * reconnect -- should be greater than cifs socket timeout which is 7\n\t * seconds.\n\t */\n\twhile (server->tcpStatus == CifsNeedReconnect) {\n\t\t/*\n\t\t * Return to caller for TREE_DISCONNECT and LOGOFF and CLOSE\n\t\t * here since they are implicitly done when session drops.\n\t\t */\n\t\tswitch (smb2_command) {\n\t\t/*\n\t\t * BB Should we keep oplock break and add flush to exceptions?\n\t\t */\n\t\tcase SMB2_TREE_DISCONNECT:\n\t\tcase SMB2_CANCEL:\n\t\tcase SMB2_CLOSE:\n\t\tcase SMB2_OPLOCK_BREAK:\n\t\t\treturn -EAGAIN;\n\t\t}\n\n\t\trc = wait_event_interruptible_timeout(server->response_q,\n\t\t\t\t\t\t      (server->tcpStatus != CifsNeedReconnect),\n\t\t\t\t\t\t      10 * HZ);\n\t\tif (rc < 0) {\n\t\t\tcifs_dbg(FYI, \"%s: aborting reconnect due to a received\"\n\t\t\t\t \" signal by the process\\n\", __func__);\n\t\t\treturn -ERESTARTSYS;\n\t\t}\n\n\t\t/* are we still trying to reconnect? */\n\t\tif (server->tcpStatus != CifsNeedReconnect)\n\t\t\tbreak;\n\n\t\tif (--retries)\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * on \"soft\" mounts we wait once. Hard mounts keep\n\t\t * retrying until process is killed or server comes\n\t\t * back on-line\n\t\t */\n\t\tif (!tcon->retry) {\n\t\t\tcifs_dbg(FYI, \"gave up waiting on reconnect in smb_init\\n\");\n\t\t\treturn -EHOSTDOWN;\n\t\t}\n\t\tretries = server->nr_targets;\n\t}\n\n\tif (!tcon->ses->need_reconnect && !tcon->need_reconnect)\n\t\treturn 0;\n\n\tnls_codepage = load_nls_default();\n\n\t/*\n\t * need to prevent multiple threads trying to simultaneously reconnect\n\t * the same SMB session\n\t */\n\tmutex_lock(&tcon->ses->session_mutex);\n\n\t/*\n\t * Recheck after acquire mutex. If another thread is negotiating\n\t * and the server never sends an answer the socket will be closed\n\t * and tcpStatus set to reconnect.\n\t */\n\tif (server->tcpStatus == CifsNeedReconnect) {\n\t\trc = -EHOSTDOWN;\n\t\tmutex_unlock(&tcon->ses->session_mutex);\n\t\tgoto out;\n\t}\n\n\trc = cifs_negotiate_protocol(0, tcon->ses);\n\tif (!rc && tcon->ses->need_reconnect)\n\t\trc = cifs_setup_session(0, tcon->ses, nls_codepage);\n\n\tif (rc || !tcon->need_reconnect) {\n\t\tmutex_unlock(&tcon->ses->session_mutex);\n\t\tgoto out;\n\t}\n\n\tcifs_mark_open_files_invalid(tcon);\n\tif (tcon->use_persistent)\n\t\ttcon->need_reopen_files = true;\n\n\trc = __smb2_reconnect(nls_codepage, tcon);\n\tmutex_unlock(&tcon->ses->session_mutex);\n\n\tcifs_dbg(FYI, \"reconnect tcon rc = %d\\n\", rc);\n\tif (rc) {\n\t\t/* If sess reconnected but tcon didn't, something strange ... */\n\t\tprintk_once(KERN_WARNING \"reconnect tcon failed rc = %d\\n\", rc);\n\t\tgoto out;\n\t}\n\n\tif (smb2_command != SMB2_INTERNAL_CMD)\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 0);\n\n\tatomic_inc(&tconInfoReconnectCount);\nout:\n\t/*\n\t * Check if handle based operation so we know whether we can continue\n\t * or not without returning to caller to reset file handle.\n\t */\n\t/*\n\t * BB Is flush done by server on drop of tcp session? Should we special\n\t * case it and skip above?\n\t */\n\tswitch (smb2_command) {\n\tcase SMB2_FLUSH:\n\tcase SMB2_READ:\n\tcase SMB2_WRITE:\n\tcase SMB2_LOCK:\n\tcase SMB2_IOCTL:\n\tcase SMB2_QUERY_DIRECTORY:\n\tcase SMB2_CHANGE_NOTIFY:\n\tcase SMB2_QUERY_INFO:\n\tcase SMB2_SET_INFO:\n\t\trc = -EAGAIN;\n\t}\n\tunload_nls(nls_codepage);\n\treturn rc;\n}\n\nstatic void\nfill_small_buf(__le16 smb2_command, struct cifs_tcon *tcon, void *buf,\n\t       unsigned int *total_len)\n{\n\tstruct smb2_sync_pdu *spdu = (struct smb2_sync_pdu *)buf;\n\t/* lookup word count ie StructureSize from table */\n\t__u16 parmsize = smb2_req_struct_sizes[le16_to_cpu(smb2_command)];\n\n\t/*\n\t * smaller than SMALL_BUFFER_SIZE but bigger than fixed area of\n\t * largest operations (Create)\n\t */\n\tmemset(buf, 0, 256);\n\n\tsmb2_hdr_assemble(&spdu->sync_hdr, smb2_command, tcon);\n\tspdu->StructureSize2 = cpu_to_le16(parmsize);\n\n\t*total_len = parmsize + sizeof(struct smb2_sync_hdr);\n}\n\n/*\n * Allocate and return pointer to an SMB request hdr, and set basic\n * SMB information in the SMB header. If the return code is zero, this\n * function must have filled in request_buf pointer.\n */\nstatic int\nsmb2_plain_req_init(__le16 smb2_command, struct cifs_tcon *tcon,\n\t\t    void **request_buf, unsigned int *total_len)\n{\n\tint rc;\n\n\trc = smb2_reconnect(smb2_command, tcon);\n\tif (rc)\n\t\treturn rc;\n\n\t/* BB eventually switch this to SMB2 specific small buf size */\n\tif (smb2_command == SMB2_SET_INFO)\n\t\t*request_buf = cifs_buf_get();\n\telse\n\t\t*request_buf = cifs_small_buf_get();\n\tif (*request_buf == NULL) {\n\t\t/* BB should we add a retry in here if not a writepage? */\n\t\treturn -ENOMEM;\n\t}\n\n\tfill_small_buf(smb2_command, tcon,\n\t\t       (struct smb2_sync_hdr *)(*request_buf),\n\t\t       total_len);\n\n\tif (tcon != NULL) {\n\t\tuint16_t com_code = le16_to_cpu(smb2_command);\n\t\tcifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_sent[com_code]);\n\t\tcifs_stats_inc(&tcon->num_smbs_sent);\n\t}\n\n\treturn rc;\n}\n\n\n#define SMB2_PREAUTH_INTEGRITY_CAPABILITIES\tcpu_to_le16(1)\n#define SMB2_ENCRYPTION_CAPABILITIES\t\tcpu_to_le16(2)\n#define SMB2_POSIX_EXTENSIONS_AVAILABLE\t\tcpu_to_le16(0x100)\n\nstatic void\nbuild_preauth_ctxt(struct smb2_preauth_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_PREAUTH_INTEGRITY_CAPABILITIES;\n\tpneg_ctxt->DataLength = cpu_to_le16(38);\n\tpneg_ctxt->HashAlgorithmCount = cpu_to_le16(1);\n\tpneg_ctxt->SaltLength = cpu_to_le16(SMB311_SALT_SIZE);\n\tget_random_bytes(pneg_ctxt->Salt, SMB311_SALT_SIZE);\n\tpneg_ctxt->HashAlgorithms = SMB2_PREAUTH_INTEGRITY_SHA512;\n}\n\nstatic void\nbuild_encrypt_ctxt(struct smb2_encryption_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_ENCRYPTION_CAPABILITIES;\n\tpneg_ctxt->DataLength = cpu_to_le16(4); /* Cipher Count + le16 cipher */\n\tpneg_ctxt->CipherCount = cpu_to_le16(1);\n/* pneg_ctxt->Ciphers[0] = SMB2_ENCRYPTION_AES128_GCM;*/ /* not supported yet */\n\tpneg_ctxt->Ciphers[0] = SMB2_ENCRYPTION_AES128_CCM;\n}\n\nstatic void\nbuild_posix_ctxt(struct smb2_posix_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_POSIX_EXTENSIONS_AVAILABLE;\n\tpneg_ctxt->DataLength = cpu_to_le16(POSIX_CTXT_DATA_LEN);\n\t/* SMB2_CREATE_TAG_POSIX is \"0x93AD25509CB411E7B42383DE968BCD7C\" */\n\tpneg_ctxt->Name[0] = 0x93;\n\tpneg_ctxt->Name[1] = 0xAD;\n\tpneg_ctxt->Name[2] = 0x25;\n\tpneg_ctxt->Name[3] = 0x50;\n\tpneg_ctxt->Name[4] = 0x9C;\n\tpneg_ctxt->Name[5] = 0xB4;\n\tpneg_ctxt->Name[6] = 0x11;\n\tpneg_ctxt->Name[7] = 0xE7;\n\tpneg_ctxt->Name[8] = 0xB4;\n\tpneg_ctxt->Name[9] = 0x23;\n\tpneg_ctxt->Name[10] = 0x83;\n\tpneg_ctxt->Name[11] = 0xDE;\n\tpneg_ctxt->Name[12] = 0x96;\n\tpneg_ctxt->Name[13] = 0x8B;\n\tpneg_ctxt->Name[14] = 0xCD;\n\tpneg_ctxt->Name[15] = 0x7C;\n}\n\nstatic void\nassemble_neg_contexts(struct smb2_negotiate_req *req,\n\t\t      unsigned int *total_len)\n{\n\tchar *pneg_ctxt = (char *)req;\n\tunsigned int ctxt_len;\n\n\tif (*total_len > 200) {\n\t\t/* In case length corrupted don't want to overrun smb buffer */\n\t\tcifs_dbg(VFS, \"Bad frame length assembling neg contexts\\n\");\n\t\treturn;\n\t}\n\n\t/*\n\t * round up total_len of fixed part of SMB3 negotiate request to 8\n\t * byte boundary before adding negotiate contexts\n\t */\n\t*total_len = roundup(*total_len, 8);\n\n\tpneg_ctxt = (*total_len) + (char *)req;\n\treq->NegotiateContextOffset = cpu_to_le32(*total_len);\n\n\tbuild_preauth_ctxt((struct smb2_preauth_neg_context *)pneg_ctxt);\n\tctxt_len = DIV_ROUND_UP(sizeof(struct smb2_preauth_neg_context), 8) * 8;\n\t*total_len += ctxt_len;\n\tpneg_ctxt += ctxt_len;\n\n\tbuild_encrypt_ctxt((struct smb2_encryption_neg_context *)pneg_ctxt);\n\tctxt_len = DIV_ROUND_UP(sizeof(struct smb2_encryption_neg_context), 8) * 8;\n\t*total_len += ctxt_len;\n\tpneg_ctxt += ctxt_len;\n\n\tbuild_posix_ctxt((struct smb2_posix_neg_context *)pneg_ctxt);\n\t*total_len += sizeof(struct smb2_posix_neg_context);\n\n\treq->NegotiateContextCount = cpu_to_le16(3);\n}\n\nstatic void decode_preauth_context(struct smb2_preauth_neg_context *ctxt)\n{\n\tunsigned int len = le16_to_cpu(ctxt->DataLength);\n\n\t/* If invalid preauth context warn but use what we requested, SHA-512 */\n\tif (len < MIN_PREAUTH_CTXT_DATA_LEN) {\n\t\tprintk_once(KERN_WARNING \"server sent bad preauth context\\n\");\n\t\treturn;\n\t}\n\tif (le16_to_cpu(ctxt->HashAlgorithmCount) != 1)\n\t\tprintk_once(KERN_WARNING \"illegal SMB3 hash algorithm count\\n\");\n\tif (ctxt->HashAlgorithms != SMB2_PREAUTH_INTEGRITY_SHA512)\n\t\tprintk_once(KERN_WARNING \"unknown SMB3 hash algorithm\\n\");\n}\n\nstatic int decode_encrypt_ctx(struct TCP_Server_Info *server,\n\t\t\t      struct smb2_encryption_neg_context *ctxt)\n{\n\tunsigned int len = le16_to_cpu(ctxt->DataLength);\n\n\tcifs_dbg(FYI, \"decode SMB3.11 encryption neg context of len %d\\n\", len);\n\tif (len < MIN_ENCRYPT_CTXT_DATA_LEN) {\n\t\tprintk_once(KERN_WARNING \"server sent bad crypto ctxt len\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tif (le16_to_cpu(ctxt->CipherCount) != 1) {\n\t\tprintk_once(KERN_WARNING \"illegal SMB3.11 cipher count\\n\");\n\t\treturn -EINVAL;\n\t}\n\tcifs_dbg(FYI, \"SMB311 cipher type:%d\\n\", le16_to_cpu(ctxt->Ciphers[0]));\n\tif ((ctxt->Ciphers[0] != SMB2_ENCRYPTION_AES128_CCM) &&\n\t    (ctxt->Ciphers[0] != SMB2_ENCRYPTION_AES128_GCM)) {\n\t\tprintk_once(KERN_WARNING \"invalid SMB3.11 cipher returned\\n\");\n\t\treturn -EINVAL;\n\t}\n\tserver->cipher_type = ctxt->Ciphers[0];\n\tserver->capabilities |= SMB2_GLOBAL_CAP_ENCRYPTION;\n\treturn 0;\n}\n\nstatic int smb311_decode_neg_context(struct smb2_negotiate_rsp *rsp,\n\t\t\t\t     struct TCP_Server_Info *server,\n\t\t\t\t     unsigned int len_of_smb)\n{\n\tstruct smb2_neg_context *pctx;\n\tunsigned int offset = le32_to_cpu(rsp->NegotiateContextOffset);\n\tunsigned int ctxt_cnt = le16_to_cpu(rsp->NegotiateContextCount);\n\tunsigned int len_of_ctxts, i;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"decoding %d negotiate contexts\\n\", ctxt_cnt);\n\tif (len_of_smb <= offset) {\n\t\tcifs_dbg(VFS, \"Invalid response: negotiate context offset\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tlen_of_ctxts = len_of_smb - offset;\n\n\tfor (i = 0; i < ctxt_cnt; i++) {\n\t\tint clen;\n\t\t/* check that offset is not beyond end of SMB */\n\t\tif (len_of_ctxts == 0)\n\t\t\tbreak;\n\n\t\tif (len_of_ctxts < sizeof(struct smb2_neg_context))\n\t\t\tbreak;\n\n\t\tpctx = (struct smb2_neg_context *)(offset + (char *)rsp);\n\t\tclen = le16_to_cpu(pctx->DataLength);\n\t\tif (clen > len_of_ctxts)\n\t\t\tbreak;\n\n\t\tif (pctx->ContextType == SMB2_PREAUTH_INTEGRITY_CAPABILITIES)\n\t\t\tdecode_preauth_context(\n\t\t\t\t(struct smb2_preauth_neg_context *)pctx);\n\t\telse if (pctx->ContextType == SMB2_ENCRYPTION_CAPABILITIES)\n\t\t\trc = decode_encrypt_ctx(server,\n\t\t\t\t(struct smb2_encryption_neg_context *)pctx);\n\t\telse if (pctx->ContextType == SMB2_POSIX_EXTENSIONS_AVAILABLE)\n\t\t\tserver->posix_ext_supported = true;\n\t\telse\n\t\t\tcifs_dbg(VFS, \"unknown negcontext of type %d ignored\\n\",\n\t\t\t\tle16_to_cpu(pctx->ContextType));\n\n\t\tif (rc)\n\t\t\tbreak;\n\t\t/* offsets must be 8 byte aligned */\n\t\tclen = (clen + 7) & ~0x7;\n\t\toffset += clen + sizeof(struct smb2_neg_context);\n\t\tlen_of_ctxts -= clen;\n\t}\n\treturn rc;\n}\n\nstatic struct create_posix *\ncreate_posix_buf(umode_t mode)\n{\n\tstruct create_posix *buf;\n\n\tbuf = kzalloc(sizeof(struct create_posix),\n\t\t\tGFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset =\n\t\tcpu_to_le16(offsetof(struct create_posix, Mode));\n\tbuf->ccontext.DataLength = cpu_to_le32(4);\n\tbuf->ccontext.NameOffset =\n\t\tcpu_to_le16(offsetof(struct create_posix, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(16);\n\n\t/* SMB2_CREATE_TAG_POSIX is \"0x93AD25509CB411E7B42383DE968BCD7C\" */\n\tbuf->Name[0] = 0x93;\n\tbuf->Name[1] = 0xAD;\n\tbuf->Name[2] = 0x25;\n\tbuf->Name[3] = 0x50;\n\tbuf->Name[4] = 0x9C;\n\tbuf->Name[5] = 0xB4;\n\tbuf->Name[6] = 0x11;\n\tbuf->Name[7] = 0xE7;\n\tbuf->Name[8] = 0xB4;\n\tbuf->Name[9] = 0x23;\n\tbuf->Name[10] = 0x83;\n\tbuf->Name[11] = 0xDE;\n\tbuf->Name[12] = 0x96;\n\tbuf->Name[13] = 0x8B;\n\tbuf->Name[14] = 0xCD;\n\tbuf->Name[15] = 0x7C;\n\tbuf->Mode = cpu_to_le32(mode);\n\tcifs_dbg(FYI, \"mode on posix create 0%o\", mode);\n\treturn buf;\n}\n\nstatic int\nadd_posix_context(struct kvec *iov, unsigned int *num_iovec, umode_t mode)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_posix_buf(mode);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_posix);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_posix));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\n\n/*\n *\n *\tSMB2 Worker functions follow:\n *\n *\tThe general structure of the worker functions is:\n *\t1) Call smb2_init (assembles SMB2 header)\n *\t2) Initialize SMB2 command specific fields in fixed length area of SMB\n *\t3) Call smb_sendrcv2 (sends request on socket and waits for response)\n *\t4) Decode SMB2 command specific fields in the fixed length area\n *\t5) Decode variable length data area (if any for this SMB2 command type)\n *\t6) Call free smb buffer\n *\t7) return\n *\n */\n\nint\nSMB2_negotiate(const unsigned int xid, struct cifs_ses *ses)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_negotiate_req *req;\n\tstruct smb2_negotiate_rsp *rsp;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct TCP_Server_Info *server = ses->server;\n\tint blob_offset, blob_length;\n\tchar *security_blob;\n\tint flags = CIFS_NEG_OP;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Negotiate protocol\\n\");\n\n\tif (!server) {\n\t\tWARN(1, \"%s: server is NULL!\\n\", __func__);\n\t\treturn -EIO;\n\t}\n\n\trc = smb2_plain_req_init(SMB2_NEGOTIATE, NULL, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.SessionId = 0;\n\n\tmemset(server->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);\n\tmemset(ses->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);\n\n\tif (strcmp(ses->server->vals->version_string,\n\t\t   SMB3ANY_VERSION_STRING) == 0) {\n\t\treq->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);\n\t\treq->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);\n\t\treq->DialectCount = cpu_to_le16(2);\n\t\ttotal_len += 4;\n\t} else if (strcmp(ses->server->vals->version_string,\n\t\t   SMBDEFAULT_VERSION_STRING) == 0) {\n\t\treq->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);\n\t\treq->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);\n\t\treq->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);\n\t\treq->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);\n\t\treq->DialectCount = cpu_to_le16(4);\n\t\ttotal_len += 8;\n\t} else {\n\t\t/* otherwise send specific dialect */\n\t\treq->Dialects[0] = cpu_to_le16(ses->server->vals->protocol_id);\n\t\treq->DialectCount = cpu_to_le16(1);\n\t\ttotal_len += 2;\n\t}\n\n\t/* only one of SMB2 signing flags may be set in SMB2 request */\n\tif (ses->sign)\n\t\treq->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_REQUIRED);\n\telse if (global_secflags & CIFSSEC_MAY_SIGN)\n\t\treq->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_ENABLED);\n\telse\n\t\treq->SecurityMode = 0;\n\n\treq->Capabilities = cpu_to_le32(ses->server->vals->req_capabilities);\n\n\t/* ClientGUID must be zero for SMB2.02 dialect */\n\tif (ses->server->vals->protocol_id == SMB20_PROT_ID)\n\t\tmemset(req->ClientGUID, 0, SMB2_CLIENT_GUID_SIZE);\n\telse {\n\t\tmemcpy(req->ClientGUID, server->client_guid,\n\t\t\tSMB2_CLIENT_GUID_SIZE);\n\t\tif ((ses->server->vals->protocol_id == SMB311_PROT_ID) ||\n\t\t    (strcmp(ses->server->vals->version_string,\n\t\t     SMBDEFAULT_VERSION_STRING) == 0))\n\t\t\tassemble_neg_contexts(req, &total_len);\n\t}\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_negotiate_rsp *)rsp_iov.iov_base;\n\t/*\n\t * No tcon so can't do\n\t * cifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_fail[SMB2...]);\n\t */\n\tif (rc == -EOPNOTSUPP) {\n\t\tcifs_dbg(VFS, \"Dialect not supported by server. Consider \"\n\t\t\t\"specifying vers=1.0 or vers=2.0 on mount for accessing\"\n\t\t\t\" older servers\\n\");\n\t\tgoto neg_exit;\n\t} else if (rc != 0)\n\t\tgoto neg_exit;\n\n\tif (strcmp(ses->server->vals->version_string,\n\t\t   SMB3ANY_VERSION_STRING) == 0) {\n\t\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2.1 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t}\n\t} else if (strcmp(ses->server->vals->version_string,\n\t\t   SMBDEFAULT_VERSION_STRING) == 0) {\n\t\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {\n\t\t\t/* ops set to 3.0 by default for default so update */\n\t\t\tses->server->ops = &smb21_operations;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))\n\t\t\tses->server->ops = &smb311_operations;\n\t} else if (le16_to_cpu(rsp->DialectRevision) !=\n\t\t\t\tses->server->vals->protocol_id) {\n\t\t/* if requested single dialect ensure returned dialect matched */\n\t\tcifs_dbg(VFS, \"Illegal 0x%x dialect returned: not requested\\n\",\n\t\t\tle16_to_cpu(rsp->DialectRevision));\n\t\treturn -EIO;\n\t}\n\n\tcifs_dbg(FYI, \"mode 0x%x\\n\", rsp->SecurityMode);\n\n\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb2.0 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb2.1 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB30_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.0 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB302_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.02 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.1.1 dialect\\n\");\n\telse {\n\t\tcifs_dbg(VFS, \"Illegal dialect returned by server 0x%x\\n\",\n\t\t\t le16_to_cpu(rsp->DialectRevision));\n\t\trc = -EIO;\n\t\tgoto neg_exit;\n\t}\n\tserver->dialect = le16_to_cpu(rsp->DialectRevision);\n\n\t/*\n\t * Keep a copy of the hash after negprot. This hash will be\n\t * the starting hash value for all sessions made from this\n\t * server.\n\t */\n\tmemcpy(server->preauth_sha_hash, ses->preauth_sha_hash,\n\t       SMB2_PREAUTH_HASH_SIZE);\n\n\t/* SMB2 only has an extended negflavor */\n\tserver->negflavor = CIFS_NEGFLAVOR_EXTENDED;\n\t/* set it to the maximum buffer size value we can send with 1 credit */\n\tserver->maxBuf = min_t(unsigned int, le32_to_cpu(rsp->MaxTransactSize),\n\t\t\t       SMB2_MAX_BUFFER_SIZE);\n\tserver->max_read = le32_to_cpu(rsp->MaxReadSize);\n\tserver->max_write = le32_to_cpu(rsp->MaxWriteSize);\n\tserver->sec_mode = le16_to_cpu(rsp->SecurityMode);\n\tif ((server->sec_mode & SMB2_SEC_MODE_FLAGS_ALL) != server->sec_mode)\n\t\tcifs_dbg(FYI, \"Server returned unexpected security mode 0x%x\\n\",\n\t\t\t\tserver->sec_mode);\n\tserver->capabilities = le32_to_cpu(rsp->Capabilities);\n\t/* Internal types */\n\tserver->capabilities |= SMB2_NT_FIND | SMB2_LARGE_FILES;\n\n\tsecurity_blob = smb2_get_data_area_len(&blob_offset, &blob_length,\n\t\t\t\t\t       (struct smb2_sync_hdr *)rsp);\n\t/*\n\t * See MS-SMB2 section 2.2.4: if no blob, client picks default which\n\t * for us will be\n\t *\tses->sectype = RawNTLMSSP;\n\t * but for time being this is our only auth choice so doesn't matter.\n\t * We just found a server which sets blob length to zero expecting raw.\n\t */\n\tif (blob_length == 0) {\n\t\tcifs_dbg(FYI, \"missing security blob on negprot\\n\");\n\t\tserver->sec_ntlmssp = true;\n\t}\n\n\trc = cifs_enable_signing(server, ses->sign);\n\tif (rc)\n\t\tgoto neg_exit;\n\tif (blob_length) {\n\t\trc = decode_negTokenInit(security_blob, blob_length, server);\n\t\tif (rc == 1)\n\t\t\trc = 0;\n\t\telse if (rc == 0)\n\t\t\trc = -EIO;\n\t}\n\n\tif (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID)) {\n\t\tif (rsp->NegotiateContextCount)\n\t\t\trc = smb311_decode_neg_context(rsp, server,\n\t\t\t\t\t\t       rsp_iov.iov_len);\n\t\telse\n\t\t\tcifs_dbg(VFS, \"Missing expected negotiate contexts\\n\");\n\t}\nneg_exit:\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint smb3_validate_negotiate(const unsigned int xid, struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct validate_negotiate_info_req *pneg_inbuf;\n\tstruct validate_negotiate_info_rsp *pneg_rsp = NULL;\n\tu32 rsplen;\n\tu32 inbuflen; /* max of 4 dialects */\n\n\tcifs_dbg(FYI, \"validate negotiate\\n\");\n\n\t/* In SMB3.11 preauth integrity supersedes validate negotiate */\n\tif (tcon->ses->server->dialect == SMB311_PROT_ID)\n\t\treturn 0;\n\n\t/*\n\t * validation ioctl must be signed, so no point sending this if we\n\t * can not sign it (ie are not known user).  Even if signing is not\n\t * required (enabled but not negotiated), in those cases we selectively\n\t * sign just this, the first and only signed request on a connection.\n\t * Having validation of negotiate info  helps reduce attack vectors.\n\t */\n\tif (tcon->ses->session_flags & SMB2_SESSION_FLAG_IS_GUEST)\n\t\treturn 0; /* validation requires signing */\n\n\tif (tcon->ses->user_name == NULL) {\n\t\tcifs_dbg(FYI, \"Can't validate negotiate: null user mount\\n\");\n\t\treturn 0; /* validation requires signing */\n\t}\n\n\tif (tcon->ses->session_flags & SMB2_SESSION_FLAG_IS_NULL)\n\t\tcifs_dbg(VFS, \"Unexpected null user (anonymous) auth flag sent by server\\n\");\n\n\tpneg_inbuf = kmalloc(sizeof(*pneg_inbuf), GFP_NOFS);\n\tif (!pneg_inbuf)\n\t\treturn -ENOMEM;\n\n\tpneg_inbuf->Capabilities =\n\t\t\tcpu_to_le32(tcon->ses->server->vals->req_capabilities);\n\tmemcpy(pneg_inbuf->Guid, tcon->ses->server->client_guid,\n\t\t\t\t\tSMB2_CLIENT_GUID_SIZE);\n\n\tif (tcon->ses->sign)\n\t\tpneg_inbuf->SecurityMode =\n\t\t\tcpu_to_le16(SMB2_NEGOTIATE_SIGNING_REQUIRED);\n\telse if (global_secflags & CIFSSEC_MAY_SIGN)\n\t\tpneg_inbuf->SecurityMode =\n\t\t\tcpu_to_le16(SMB2_NEGOTIATE_SIGNING_ENABLED);\n\telse\n\t\tpneg_inbuf->SecurityMode = 0;\n\n\n\tif (strcmp(tcon->ses->server->vals->version_string,\n\t\tSMB3ANY_VERSION_STRING) == 0) {\n\t\tpneg_inbuf->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);\n\t\tpneg_inbuf->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(2);\n\t\t/* structure is big enough for 3 dialects, sending only 2 */\n\t\tinbuflen = sizeof(*pneg_inbuf) -\n\t\t\t\t(2 * sizeof(pneg_inbuf->Dialects[0]));\n\t} else if (strcmp(tcon->ses->server->vals->version_string,\n\t\tSMBDEFAULT_VERSION_STRING) == 0) {\n\t\tpneg_inbuf->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);\n\t\tpneg_inbuf->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);\n\t\tpneg_inbuf->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);\n\t\tpneg_inbuf->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(4);\n\t\t/* structure is big enough for 3 dialects */\n\t\tinbuflen = sizeof(*pneg_inbuf);\n\t} else {\n\t\t/* otherwise specific dialect was requested */\n\t\tpneg_inbuf->Dialects[0] =\n\t\t\tcpu_to_le16(tcon->ses->server->vals->protocol_id);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(1);\n\t\t/* structure is big enough for 3 dialects, sending only 1 */\n\t\tinbuflen = sizeof(*pneg_inbuf) -\n\t\t\t\tsizeof(pneg_inbuf->Dialects[0]) * 2;\n\t}\n\n\trc = SMB2_ioctl(xid, tcon, NO_FILE_ID, NO_FILE_ID,\n\t\tFSCTL_VALIDATE_NEGOTIATE_INFO, true /* is_fsctl */,\n\t\t(char *)pneg_inbuf, inbuflen, CIFSMaxBufSize,\n\t\t(char **)&pneg_rsp, &rsplen);\n\tif (rc == -EOPNOTSUPP) {\n\t\t/*\n\t\t * Old Windows versions or Netapp SMB server can return\n\t\t * not supported error. Client should accept it.\n\t\t */\n\t\tcifs_dbg(VFS, \"Server does not support validate negotiate\\n\");\n\t\treturn 0;\n\t} else if (rc != 0) {\n\t\tcifs_dbg(VFS, \"validate protocol negotiate failed: %d\\n\", rc);\n\t\trc = -EIO;\n\t\tgoto out_free_inbuf;\n\t}\n\n\trc = -EIO;\n\tif (rsplen != sizeof(*pneg_rsp)) {\n\t\tcifs_dbg(VFS, \"invalid protocol negotiate response size: %d\\n\",\n\t\t\t rsplen);\n\n\t\t/* relax check since Mac returns max bufsize allowed on ioctl */\n\t\tif (rsplen > CIFSMaxBufSize || rsplen < sizeof(*pneg_rsp))\n\t\t\tgoto out_free_rsp;\n\t}\n\n\t/* check validate negotiate info response matches what we got earlier */\n\tif (pneg_rsp->Dialect != cpu_to_le16(tcon->ses->server->dialect))\n\t\tgoto vneg_out;\n\n\tif (pneg_rsp->SecurityMode != cpu_to_le16(tcon->ses->server->sec_mode))\n\t\tgoto vneg_out;\n\n\t/* do not validate server guid because not saved at negprot time yet */\n\n\tif ((le32_to_cpu(pneg_rsp->Capabilities) | SMB2_NT_FIND |\n\t      SMB2_LARGE_FILES) != tcon->ses->server->capabilities)\n\t\tgoto vneg_out;\n\n\t/* validate negotiate successful */\n\trc = 0;\n\tcifs_dbg(FYI, \"validate negotiate info successful\\n\");\n\tgoto out_free_rsp;\n\nvneg_out:\n\tcifs_dbg(VFS, \"protocol revalidation - security settings mismatch\\n\");\nout_free_rsp:\n\tkfree(pneg_rsp);\nout_free_inbuf:\n\tkfree(pneg_inbuf);\n\treturn rc;\n}\n\nenum securityEnum\nsmb2_select_sectype(struct TCP_Server_Info *server, enum securityEnum requested)\n{\n\tswitch (requested) {\n\tcase Kerberos:\n\tcase RawNTLMSSP:\n\t\treturn requested;\n\tcase NTLMv2:\n\t\treturn RawNTLMSSP;\n\tcase Unspecified:\n\t\tif (server->sec_ntlmssp &&\n\t\t\t(global_secflags & CIFSSEC_MAY_NTLMSSP))\n\t\t\treturn RawNTLMSSP;\n\t\tif ((server->sec_kerberos || server->sec_mskerberos) &&\n\t\t\t(global_secflags & CIFSSEC_MAY_KRB5))\n\t\t\treturn Kerberos;\n\t\t/* Fallthrough */\n\tdefault:\n\t\treturn Unspecified;\n\t}\n}\n\nstruct SMB2_sess_data {\n\tunsigned int xid;\n\tstruct cifs_ses *ses;\n\tstruct nls_table *nls_cp;\n\tvoid (*func)(struct SMB2_sess_data *);\n\tint result;\n\tu64 previous_session;\n\n\t/* we will send the SMB in three pieces:\n\t * a fixed length beginning part, an optional\n\t * SPNEGO blob (which can be zero length), and a\n\t * last part which will include the strings\n\t * and rest of bcc area. This allows us to avoid\n\t * a large buffer 17K allocation\n\t */\n\tint buf0_type;\n\tstruct kvec iov[2];\n};\n\nstatic int\nSMB2_sess_alloc_buffer(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_req *req;\n\tstruct TCP_Server_Info *server = ses->server;\n\tunsigned int total_len;\n\n\trc = smb2_plain_req_init(SMB2_SESSION_SETUP, NULL, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\t/* First session, not a reauthenticate */\n\treq->sync_hdr.SessionId = 0;\n\n\t/* if reconnect, we need to send previous sess id, otherwise it is 0 */\n\treq->PreviousSessionId = sess_data->previous_session;\n\n\treq->Flags = 0; /* MBZ */\n\n\t/* enough to enable echos and oplocks and one max size write */\n\treq->sync_hdr.CreditRequest = cpu_to_le16(130);\n\n\t/* only one of SMB2 signing flags may be set in SMB2 request */\n\tif (server->sign)\n\t\treq->SecurityMode = SMB2_NEGOTIATE_SIGNING_REQUIRED;\n\telse if (global_secflags & CIFSSEC_MAY_SIGN) /* one flag unlike MUST_ */\n\t\treq->SecurityMode = SMB2_NEGOTIATE_SIGNING_ENABLED;\n\telse\n\t\treq->SecurityMode = 0;\n\n\treq->Capabilities = 0;\n\treq->Channel = 0; /* MBZ */\n\n\tsess_data->iov[0].iov_base = (char *)req;\n\t/* 1 for pad */\n\tsess_data->iov[0].iov_len = total_len - 1;\n\t/*\n\t * This variable will be used to clear the buffer\n\t * allocated above in case of any error in the calling function.\n\t */\n\tsess_data->buf0_type = CIFS_SMALL_BUFFER;\n\n\treturn 0;\n}\n\nstatic void\nSMB2_sess_free_buffer(struct SMB2_sess_data *sess_data)\n{\n\tfree_rsp_buf(sess_data->buf0_type, sess_data->iov[0].iov_base);\n\tsess_data->buf0_type = CIFS_NO_BUFFER;\n}\n\nstatic int\nSMB2_sess_sendreceive(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct smb_rqst rqst;\n\tstruct smb2_sess_setup_req *req = sess_data->iov[0].iov_base;\n\tstruct kvec rsp_iov = { NULL, 0 };\n\n\t/* Testing shows that buffer offset must be at location of Buffer[0] */\n\treq->SecurityBufferOffset =\n\t\tcpu_to_le16(sizeof(struct smb2_sess_setup_req) - 1 /* pad */);\n\treq->SecurityBufferLength = cpu_to_le16(sess_data->iov[1].iov_len);\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = sess_data->iov;\n\trqst.rq_nvec = 2;\n\n\t/* BB add code to build os and lm fields */\n\trc = cifs_send_recv(sess_data->xid, sess_data->ses,\n\t\t\t    &rqst,\n\t\t\t    &sess_data->buf0_type,\n\t\t\t    CIFS_LOG_ERROR | CIFS_NEG_OP, &rsp_iov);\n\tcifs_small_buf_release(sess_data->iov[0].iov_base);\n\tmemcpy(&sess_data->iov[0], &rsp_iov, sizeof(struct kvec));\n\n\treturn rc;\n}\n\nstatic int\nSMB2_sess_establish_session(struct SMB2_sess_data *sess_data)\n{\n\tint rc = 0;\n\tstruct cifs_ses *ses = sess_data->ses;\n\n\tmutex_lock(&ses->server->srv_mutex);\n\tif (ses->server->ops->generate_signingkey) {\n\t\trc = ses->server->ops->generate_signingkey(ses);\n\t\tif (rc) {\n\t\t\tcifs_dbg(FYI,\n\t\t\t\t\"SMB3 session key generation failed\\n\");\n\t\t\tmutex_unlock(&ses->server->srv_mutex);\n\t\t\treturn rc;\n\t\t}\n\t}\n\tif (!ses->server->session_estab) {\n\t\tses->server->sequence_number = 0x2;\n\t\tses->server->session_estab = true;\n\t}\n\tmutex_unlock(&ses->server->srv_mutex);\n\n\tcifs_dbg(FYI, \"SMB2/3 session established successfully\\n\");\n\tspin_lock(&GlobalMid_Lock);\n\tses->status = CifsGood;\n\tses->need_reconnect = false;\n\tspin_unlock(&GlobalMid_Lock);\n\treturn rc;\n}\n\n#ifdef CONFIG_CIFS_UPCALL\nstatic void\nSMB2_auth_kerberos(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct cifs_spnego_msg *msg;\n\tstruct key *spnego_key = NULL;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\tspnego_key = cifs_get_spnego_key(ses);\n\tif (IS_ERR(spnego_key)) {\n\t\trc = PTR_ERR(spnego_key);\n\t\tspnego_key = NULL;\n\t\tgoto out;\n\t}\n\n\tmsg = spnego_key->payload.data[0];\n\t/*\n\t * check version field to make sure that cifs.upcall is\n\t * sending us a response in an expected form\n\t */\n\tif (msg->version != CIFS_SPNEGO_UPCALL_VERSION) {\n\t\tcifs_dbg(VFS,\n\t\t\t  \"bad cifs.upcall version. Expected %d got %d\",\n\t\t\t  CIFS_SPNEGO_UPCALL_VERSION, msg->version);\n\t\trc = -EKEYREJECTED;\n\t\tgoto out_put_spnego_key;\n\t}\n\n\tses->auth_key.response = kmemdup(msg->data, msg->sesskey_len,\n\t\t\t\t\t GFP_KERNEL);\n\tif (!ses->auth_key.response) {\n\t\tcifs_dbg(VFS,\n\t\t\t\"Kerberos can't allocate (%u bytes) memory\",\n\t\t\tmsg->sesskey_len);\n\t\trc = -ENOMEM;\n\t\tgoto out_put_spnego_key;\n\t}\n\tses->auth_key.len = msg->sesskey_len;\n\n\tsess_data->iov[1].iov_base = msg->data + msg->sesskey_len;\n\tsess_data->iov[1].iov_len = msg->secblob_len;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\tif (rc)\n\t\tgoto out_put_spnego_key;\n\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\tses->Suid = rsp->sync_hdr.SessionId;\n\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\n\trc = SMB2_sess_establish_session(sess_data);\nout_put_spnego_key:\n\tkey_invalidate(spnego_key);\n\tkey_put(spnego_key);\nout:\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n\tSMB2_sess_free_buffer(sess_data);\n}\n#else\nstatic void\nSMB2_auth_kerberos(struct SMB2_sess_data *sess_data)\n{\n\tcifs_dbg(VFS, \"Kerberos negotiated but upcall support disabled!\\n\");\n\tsess_data->result = -EOPNOTSUPP;\n\tsess_data->func = NULL;\n}\n#endif\n\nstatic void\nSMB2_sess_auth_rawntlmssp_authenticate(struct SMB2_sess_data *sess_data);\n\nstatic void\nSMB2_sess_auth_rawntlmssp_negotiate(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\tchar *ntlmssp_blob = NULL;\n\tbool use_spnego = false; /* else use raw ntlmssp */\n\tu16 blob_length = 0;\n\n\t/*\n\t * If memory allocation is successful, caller of this function\n\t * frees it.\n\t */\n\tses->ntlmssp = kmalloc(sizeof(struct ntlmssp_auth), GFP_KERNEL);\n\tif (!ses->ntlmssp) {\n\t\trc = -ENOMEM;\n\t\tgoto out_err;\n\t}\n\tses->ntlmssp->sesskey_per_smbsess = true;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out_err;\n\n\tntlmssp_blob = kmalloc(sizeof(struct _NEGOTIATE_MESSAGE),\n\t\t\t       GFP_KERNEL);\n\tif (ntlmssp_blob == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tbuild_ntlmssp_negotiate_blob(ntlmssp_blob, ses);\n\tif (use_spnego) {\n\t\t/* BB eventually need to add this */\n\t\tcifs_dbg(VFS, \"spnego not supported for SMB2 yet\\n\");\n\t\trc = -EOPNOTSUPP;\n\t\tgoto out;\n\t} else {\n\t\tblob_length = sizeof(struct _NEGOTIATE_MESSAGE);\n\t\t/* with raw NTLMSSP we don't encapsulate in SPNEGO */\n\t}\n\tsess_data->iov[1].iov_base = ntlmssp_blob;\n\tsess_data->iov[1].iov_len = blob_length;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\n\t/* If true, rc here is expected and not an error */\n\tif (sess_data->buf0_type != CIFS_NO_BUFFER &&\n\t\trsp->sync_hdr.Status == STATUS_MORE_PROCESSING_REQUIRED)\n\t\trc = 0;\n\n\tif (rc)\n\t\tgoto out;\n\n\tif (offsetof(struct smb2_sess_setup_rsp, Buffer) !=\n\t\t\tle16_to_cpu(rsp->SecurityBufferOffset)) {\n\t\tcifs_dbg(VFS, \"Invalid security buffer offset %d\\n\",\n\t\t\tle16_to_cpu(rsp->SecurityBufferOffset));\n\t\trc = -EIO;\n\t\tgoto out;\n\t}\n\trc = decode_ntlmssp_challenge(rsp->Buffer,\n\t\t\tle16_to_cpu(rsp->SecurityBufferLength), ses);\n\tif (rc)\n\t\tgoto out;\n\n\tcifs_dbg(FYI, \"rawntlmssp session setup challenge phase\\n\");\n\n\n\tses->Suid = rsp->sync_hdr.SessionId;\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\nout:\n\tkfree(ntlmssp_blob);\n\tSMB2_sess_free_buffer(sess_data);\n\tif (!rc) {\n\t\tsess_data->result = 0;\n\t\tsess_data->func = SMB2_sess_auth_rawntlmssp_authenticate;\n\t\treturn;\n\t}\nout_err:\n\tkfree(ses->ntlmssp);\n\tses->ntlmssp = NULL;\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n}\n\nstatic void\nSMB2_sess_auth_rawntlmssp_authenticate(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_req *req;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\tunsigned char *ntlmssp_blob = NULL;\n\tbool use_spnego = false; /* else use raw ntlmssp */\n\tu16 blob_length = 0;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\treq = (struct smb2_sess_setup_req *) sess_data->iov[0].iov_base;\n\treq->sync_hdr.SessionId = ses->Suid;\n\n\trc = build_ntlmssp_auth_blob(&ntlmssp_blob, &blob_length, ses,\n\t\t\t\t\tsess_data->nls_cp);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"build_ntlmssp_auth_blob failed %d\\n\", rc);\n\t\tgoto out;\n\t}\n\n\tif (use_spnego) {\n\t\t/* BB eventually need to add this */\n\t\tcifs_dbg(VFS, \"spnego not supported for SMB2 yet\\n\");\n\t\trc = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\tsess_data->iov[1].iov_base = ntlmssp_blob;\n\tsess_data->iov[1].iov_len = blob_length;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\n\tses->Suid = rsp->sync_hdr.SessionId;\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\n\trc = SMB2_sess_establish_session(sess_data);\nout:\n\tkfree(ntlmssp_blob);\n\tSMB2_sess_free_buffer(sess_data);\n\tkfree(ses->ntlmssp);\n\tses->ntlmssp = NULL;\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n}\n\nstatic int\nSMB2_select_sec(struct cifs_ses *ses, struct SMB2_sess_data *sess_data)\n{\n\tint type;\n\n\ttype = smb2_select_sectype(ses->server, ses->sectype);\n\tcifs_dbg(FYI, \"sess setup type %d\\n\", type);\n\tif (type == Unspecified) {\n\t\tcifs_dbg(VFS,\n\t\t\t\"Unable to select appropriate authentication method!\");\n\t\treturn -EINVAL;\n\t}\n\n\tswitch (type) {\n\tcase Kerberos:\n\t\tsess_data->func = SMB2_auth_kerberos;\n\t\tbreak;\n\tcase RawNTLMSSP:\n\t\tsess_data->func = SMB2_sess_auth_rawntlmssp_negotiate;\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"secType %d not supported!\\n\", type);\n\t\treturn -EOPNOTSUPP;\n\t}\n\n\treturn 0;\n}\n\nint\nSMB2_sess_setup(const unsigned int xid, struct cifs_ses *ses,\n\t\tconst struct nls_table *nls_cp)\n{\n\tint rc = 0;\n\tstruct TCP_Server_Info *server = ses->server;\n\tstruct SMB2_sess_data *sess_data;\n\n\tcifs_dbg(FYI, \"Session Setup\\n\");\n\n\tif (!server) {\n\t\tWARN(1, \"%s: server is NULL!\\n\", __func__);\n\t\treturn -EIO;\n\t}\n\n\tsess_data = kzalloc(sizeof(struct SMB2_sess_data), GFP_KERNEL);\n\tif (!sess_data)\n\t\treturn -ENOMEM;\n\n\trc = SMB2_select_sec(ses, sess_data);\n\tif (rc)\n\t\tgoto out;\n\tsess_data->xid = xid;\n\tsess_data->ses = ses;\n\tsess_data->buf0_type = CIFS_NO_BUFFER;\n\tsess_data->nls_cp = (struct nls_table *) nls_cp;\n\tsess_data->previous_session = ses->Suid;\n\n\t/*\n\t * Initialize the session hash with the server one.\n\t */\n\tmemcpy(ses->preauth_sha_hash, ses->server->preauth_sha_hash,\n\t       SMB2_PREAUTH_HASH_SIZE);\n\n\twhile (sess_data->func)\n\t\tsess_data->func(sess_data);\n\n\tif ((ses->session_flags & SMB2_SESSION_FLAG_IS_GUEST) && (ses->sign))\n\t\tcifs_dbg(VFS, \"signing requested but authenticated as guest\\n\");\n\trc = sess_data->result;\nout:\n\tkfree(sess_data);\n\treturn rc;\n}\n\nint\nSMB2_logoff(const unsigned int xid, struct cifs_ses *ses)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_logoff_req *req; /* response is also trivial struct */\n\tint rc = 0;\n\tstruct TCP_Server_Info *server;\n\tint flags = 0;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"disconnect session %p\\n\", ses);\n\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\t/* no need to send SMB logoff if uid already closed due to reconnect */\n\tif (ses->need_reconnect)\n\t\tgoto smb2_session_already_dead;\n\n\trc = smb2_plain_req_init(SMB2_LOGOFF, NULL, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\t /* since no tcon, smb2_init can not do this, so do here */\n\treq->sync_hdr.SessionId = ses->Suid;\n\n\tif (ses->session_flags & SMB2_SESSION_FLAG_ENCRYPT_DATA)\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\telse if (server->sign)\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\t/*\n\t * No tcon so can't do\n\t * cifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_fail[SMB2...]);\n\t */\n\nsmb2_session_already_dead:\n\treturn rc;\n}\n\nstatic inline void cifs_stats_fail_inc(struct cifs_tcon *tcon, uint16_t code)\n{\n\tcifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_failed[code]);\n}\n\n#define MAX_SHARENAME_LENGTH (255 /* server */ + 80 /* share */ + 1 /* NULL */)\n\n/* These are similar values to what Windows uses */\nstatic inline void init_copy_chunk_defaults(struct cifs_tcon *tcon)\n{\n\ttcon->max_chunks = 256;\n\ttcon->max_bytes_chunk = 1048576;\n\ttcon->max_bytes_copy = 16777216;\n}\n\nint\nSMB2_tcon(const unsigned int xid, struct cifs_ses *ses, const char *tree,\n\t  struct cifs_tcon *tcon, const struct nls_table *cp)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_tree_connect_req *req;\n\tstruct smb2_tree_connect_rsp *rsp = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov = { NULL, 0 };\n\tint rc = 0;\n\tint resp_buftype;\n\tint unc_path_len;\n\t__le16 *unc_path = NULL;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"TCON\\n\");\n\n\tif (!(ses->server) || !tree)\n\t\treturn -EIO;\n\n\tunc_path = kmalloc(MAX_SHARENAME_LENGTH * 2, GFP_KERNEL);\n\tif (unc_path == NULL)\n\t\treturn -ENOMEM;\n\n\tunc_path_len = cifs_strtoUTF16(unc_path, tree, strlen(tree), cp) + 1;\n\tunc_path_len *= 2;\n\tif (unc_path_len < 2) {\n\t\tkfree(unc_path);\n\t\treturn -EINVAL;\n\t}\n\n\t/* SMB2 TREE_CONNECT request must be called with TreeId == 0 */\n\ttcon->tid = 0;\n\tatomic_set(&tcon->num_remote_opens, 0);\n\trc = smb2_plain_req_init(SMB2_TREE_CONNECT, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc) {\n\t\tkfree(unc_path);\n\t\treturn rc;\n\t}\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for pad */\n\tiov[0].iov_len = total_len - 1;\n\n\t/* Testing shows that buffer offset must be at location of Buffer[0] */\n\treq->PathOffset = cpu_to_le16(sizeof(struct smb2_tree_connect_req)\n\t\t\t- 1 /* pad */);\n\treq->PathLength = cpu_to_le16(unc_path_len - 2);\n\tiov[1].iov_base = unc_path;\n\tiov[1].iov_len = unc_path_len;\n\n\t/*\n\t * 3.11 tcon req must be signed if not encrypted. See MS-SMB2 3.2.4.1.1\n\t * unless it is guest or anonymous user. See MS-SMB2 3.2.5.3.1\n\t * (Samba servers don't always set the flag so also check if null user)\n\t */\n\tif ((ses->server->dialect == SMB311_PROT_ID) &&\n\t    !smb3_encryption_required(tcon) &&\n\t    !(ses->session_flags &\n\t\t    (SMB2_SESSION_FLAG_IS_GUEST|SMB2_SESSION_FLAG_IS_NULL)) &&\n\t    ((ses->user_name != NULL) || (ses->sectype == Kerberos)))\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\t/* Need 64 for max size write so ask for more in case not there yet */\n\treq->sync_hdr.CreditRequest = cpu_to_le16(64);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_tree_connect_rsp *)rsp_iov.iov_base;\n\ttrace_smb3_tcon(xid, tcon->tid, ses->Suid, tree, rc);\n\tif (rc != 0) {\n\t\tif (tcon) {\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_TREE_CONNECT_HE);\n\t\t\ttcon->need_reconnect = true;\n\t\t}\n\t\tgoto tcon_error_exit;\n\t}\n\n\tswitch (rsp->ShareType) {\n\tcase SMB2_SHARE_TYPE_DISK:\n\t\tcifs_dbg(FYI, \"connection to disk share\\n\");\n\t\tbreak;\n\tcase SMB2_SHARE_TYPE_PIPE:\n\t\ttcon->pipe = true;\n\t\tcifs_dbg(FYI, \"connection to pipe share\\n\");\n\t\tbreak;\n\tcase SMB2_SHARE_TYPE_PRINT:\n\t\ttcon->print = true;\n\t\tcifs_dbg(FYI, \"connection to printer\\n\");\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"unknown share type %d\\n\", rsp->ShareType);\n\t\trc = -EOPNOTSUPP;\n\t\tgoto tcon_error_exit;\n\t}\n\n\ttcon->share_flags = le32_to_cpu(rsp->ShareFlags);\n\ttcon->capabilities = rsp->Capabilities; /* we keep caps little endian */\n\ttcon->maximal_access = le32_to_cpu(rsp->MaximalAccess);\n\ttcon->tidStatus = CifsGood;\n\ttcon->need_reconnect = false;\n\ttcon->tid = rsp->sync_hdr.TreeId;\n\tstrlcpy(tcon->treeName, tree, sizeof(tcon->treeName));\n\n\tif ((rsp->Capabilities & SMB2_SHARE_CAP_DFS) &&\n\t    ((tcon->share_flags & SHI1005_FLAGS_DFS) == 0))\n\t\tcifs_dbg(VFS, \"DFS capability contradicts DFS flag\\n\");\n\n\tif (tcon->seal &&\n\t    !(tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))\n\t\tcifs_dbg(VFS, \"Encryption is requested but not supported\\n\");\n\n\tinit_copy_chunk_defaults(tcon);\n\tif (tcon->ses->server->ops->validate_negotiate)\n\t\trc = tcon->ses->server->ops->validate_negotiate(xid, tcon);\ntcon_exit:\n\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(unc_path);\n\treturn rc;\n\ntcon_error_exit:\n\tif (rsp && rsp->sync_hdr.Status == STATUS_BAD_NETWORK_NAME) {\n\t\tcifs_dbg(VFS, \"BAD_NETWORK_NAME: %s\\n\", tree);\n\t}\n\tgoto tcon_exit;\n}\n\nint\nSMB2_tdis(const unsigned int xid, struct cifs_tcon *tcon)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_tree_disconnect_req *req; /* response is trivial */\n\tint rc = 0;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"Tree Disconnect\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif ((tcon->need_reconnect) || (tcon->ses->need_reconnect))\n\t\treturn 0;\n\n\trc = smb2_plain_req_init(SMB2_TREE_DISCONNECT, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\tif (rc)\n\t\tcifs_stats_fail_inc(tcon, SMB2_TREE_DISCONNECT_HE);\n\n\treturn rc;\n}\n\n\nstatic struct create_durable *\ncreate_durable_buf(void)\n{\n\tstruct create_durable *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable, Data));\n\tbuf->ccontext.DataLength = cpu_to_le32(16);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\t/* SMB2_CREATE_DURABLE_HANDLE_REQUEST is \"DHnQ\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = 'n';\n\tbuf->Name[3] = 'Q';\n\treturn buf;\n}\n\nstatic struct create_durable *\ncreate_reconnect_durable_buf(struct cifs_fid *fid)\n{\n\tstruct create_durable *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable, Data));\n\tbuf->ccontext.DataLength = cpu_to_le32(16);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\tbuf->Data.Fid.PersistentFileId = fid->persistent_fid;\n\tbuf->Data.Fid.VolatileFileId = fid->volatile_fid;\n\t/* SMB2_CREATE_DURABLE_HANDLE_RECONNECT is \"DHnC\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = 'n';\n\tbuf->Name[3] = 'C';\n\treturn buf;\n}\n\n__u8\nsmb2_parse_lease_state(struct TCP_Server_Info *server,\n\t\t       struct smb2_create_rsp *rsp,\n\t\t       unsigned int *epoch, char *lease_key)\n{\n\tchar *data_offset;\n\tstruct create_context *cc;\n\tunsigned int next;\n\tunsigned int remaining;\n\tchar *name;\n\n\tdata_offset = (char *)rsp + le32_to_cpu(rsp->CreateContextsOffset);\n\tremaining = le32_to_cpu(rsp->CreateContextsLength);\n\tcc = (struct create_context *)data_offset;\n\twhile (remaining >= sizeof(struct create_context)) {\n\t\tname = le16_to_cpu(cc->NameOffset) + (char *)cc;\n\t\tif (le16_to_cpu(cc->NameLength) == 4 &&\n\t\t    strncmp(name, \"RqLs\", 4) == 0)\n\t\t\treturn server->ops->parse_lease_buf(cc, epoch,\n\t\t\t\t\t\t\t    lease_key);\n\n\t\tnext = le32_to_cpu(cc->Next);\n\t\tif (!next)\n\t\t\tbreak;\n\t\tremaining -= next;\n\t\tcc = (struct create_context *)((char *)cc + next);\n\t}\n\n\treturn 0;\n}\n\nstatic int\nadd_lease_context(struct TCP_Server_Info *server, struct kvec *iov,\n\t\t  unsigned int *num_iovec, u8 *lease_key, __u8 *oplock)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = server->ops->create_lease_buf(lease_key, *oplock);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = server->vals->create_lease_size;\n\treq->RequestedOplockLevel = SMB2_OPLOCK_LEVEL_LEASE;\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength,\n\t\t     server->vals->create_lease_size);\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic struct create_durable_v2 *\ncreate_durable_v2_buf(struct cifs_open_parms *oparms)\n{\n\tstruct cifs_fid *pfid = oparms->fid;\n\tstruct create_durable_v2 *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable_v2), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable_v2, dcontext));\n\tbuf->ccontext.DataLength = cpu_to_le32(sizeof(struct durable_context_v2));\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable_v2, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\n\t/*\n\t * NB: Handle timeout defaults to 0, which allows server to choose\n\t * (most servers default to 120 seconds) and most clients default to 0.\n\t * This can be overridden at mount (\"handletimeout=\") if the user wants\n\t * a different persistent (or resilient) handle timeout for all opens\n\t * opens on a particular SMB3 mount.\n\t */\n\tbuf->dcontext.Timeout = cpu_to_le32(oparms->tcon->handle_timeout);\n\tbuf->dcontext.Flags = cpu_to_le32(SMB2_DHANDLE_FLAG_PERSISTENT);\n\tgenerate_random_uuid(buf->dcontext.CreateGuid);\n\tmemcpy(pfid->create_guid, buf->dcontext.CreateGuid, 16);\n\n\t/* SMB2_CREATE_DURABLE_HANDLE_REQUEST is \"DH2Q\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = '2';\n\tbuf->Name[3] = 'Q';\n\treturn buf;\n}\n\nstatic struct create_durable_handle_reconnect_v2 *\ncreate_reconnect_durable_v2_buf(struct cifs_fid *fid)\n{\n\tstruct create_durable_handle_reconnect_v2 *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable_handle_reconnect_v2),\n\t\t\tGFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset =\n\t\tcpu_to_le16(offsetof(struct create_durable_handle_reconnect_v2,\n\t\t\t\t     dcontext));\n\tbuf->ccontext.DataLength =\n\t\tcpu_to_le32(sizeof(struct durable_reconnect_context_v2));\n\tbuf->ccontext.NameOffset =\n\t\tcpu_to_le16(offsetof(struct create_durable_handle_reconnect_v2,\n\t\t\t    Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\n\tbuf->dcontext.Fid.PersistentFileId = fid->persistent_fid;\n\tbuf->dcontext.Fid.VolatileFileId = fid->volatile_fid;\n\tbuf->dcontext.Flags = cpu_to_le32(SMB2_DHANDLE_FLAG_PERSISTENT);\n\tmemcpy(buf->dcontext.CreateGuid, fid->create_guid, 16);\n\n\t/* SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 is \"DH2C\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = '2';\n\tbuf->Name[3] = 'C';\n\treturn buf;\n}\n\nstatic int\nadd_durable_v2_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_durable_v2_buf(oparms);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable_v2);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_durable_v2));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nadd_durable_reconnect_v2_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\t/* indicate that we don't need to relock the file */\n\toparms->reconnect = false;\n\n\tiov[num].iov_base = create_reconnect_durable_v2_buf(oparms->fid);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable_handle_reconnect_v2);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength,\n\t\t\tsizeof(struct create_durable_handle_reconnect_v2));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nadd_durable_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms, bool use_persistent)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tif (use_persistent) {\n\t\tif (oparms->reconnect)\n\t\t\treturn add_durable_reconnect_v2_context(iov, num_iovec,\n\t\t\t\t\t\t\t\toparms);\n\t\telse\n\t\t\treturn add_durable_v2_context(iov, num_iovec, oparms);\n\t}\n\n\tif (oparms->reconnect) {\n\t\tiov[num].iov_base = create_reconnect_durable_buf(oparms->fid);\n\t\t/* indicate that we don't need to relock the file */\n\t\toparms->reconnect = false;\n\t} else\n\t\tiov[num].iov_base = create_durable_buf();\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_durable));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\n/* See MS-SMB2 2.2.13.2.7 */\nstatic struct crt_twarp_ctxt *\ncreate_twarp_buf(__u64 timewarp)\n{\n\tstruct crt_twarp_ctxt *buf;\n\n\tbuf = kzalloc(sizeof(struct crt_twarp_ctxt), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct crt_twarp_ctxt, Timestamp));\n\tbuf->ccontext.DataLength = cpu_to_le32(8);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct crt_twarp_ctxt, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\t/* SMB2_CREATE_TIMEWARP_TOKEN is \"TWrp\" */\n\tbuf->Name[0] = 'T';\n\tbuf->Name[1] = 'W';\n\tbuf->Name[2] = 'r';\n\tbuf->Name[3] = 'p';\n\tbuf->Timestamp = cpu_to_le64(timewarp);\n\treturn buf;\n}\n\n/* See MS-SMB2 2.2.13.2.7 */\nstatic int\nadd_twarp_context(struct kvec *iov, unsigned int *num_iovec, __u64 timewarp)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_twarp_buf(timewarp);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct crt_twarp_ctxt);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct crt_twarp_ctxt));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nalloc_path_with_tree_prefix(__le16 **out_path, int *out_size, int *out_len,\n\t\t\t    const char *treename, const __le16 *path)\n{\n\tint treename_len, path_len;\n\tstruct nls_table *cp;\n\tconst __le16 sep[] = {cpu_to_le16('\\\\'), cpu_to_le16(0x0000)};\n\n\t/*\n\t * skip leading \"\\\\\"\n\t */\n\ttreename_len = strlen(treename);\n\tif (treename_len < 2 || !(treename[0] == '\\\\' && treename[1] == '\\\\'))\n\t\treturn -EINVAL;\n\n\ttreename += 2;\n\ttreename_len -= 2;\n\n\tpath_len = UniStrnlen((wchar_t *)path, PATH_MAX);\n\n\t/*\n\t * make room for one path separator between the treename and\n\t * path\n\t */\n\t*out_len = treename_len + 1 + path_len;\n\n\t/*\n\t * final path needs to be null-terminated UTF16 with a\n\t * size aligned to 8\n\t */\n\n\t*out_size = roundup((*out_len+1)*2, 8);\n\t*out_path = kzalloc(*out_size, GFP_KERNEL);\n\tif (!*out_path)\n\t\treturn -ENOMEM;\n\n\tcp = load_nls_default();\n\tcifs_strtoUTF16(*out_path, treename, treename_len, cp);\n\tUniStrcat(*out_path, sep);\n\tUniStrcat(*out_path, path);\n\tunload_nls(cp);\n\n\treturn 0;\n}\n\nint smb311_posix_mkdir(const unsigned int xid, struct inode *inode,\n\t\t\t       umode_t mode, struct cifs_tcon *tcon,\n\t\t\t       const char *full_path,\n\t\t\t       struct cifs_sb_info *cifs_sb)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_create_req *req;\n\tstruct smb2_create_rsp *rsp = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[3]; /* make sure at least one for each open context */\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype;\n\tint uni_path_len;\n\t__le16 *copy_path = NULL;\n\tint copy_size;\n\tint rc = 0;\n\tunsigned int n_iov = 2;\n\t__u32 file_attributes = 0;\n\tchar *pc_buf = NULL;\n\tint flags = 0;\n\tunsigned int total_len;\n\t__le16 *utf16_path = NULL;\n\n\tcifs_dbg(FYI, \"mkdir\\n\");\n\n\t/* resource #1: path allocation */\n\tutf16_path = cifs_convert_path_to_utf16(full_path, cifs_sb);\n\tif (!utf16_path)\n\t\treturn -ENOMEM;\n\n\tif (!ses || !(ses->server)) {\n\t\trc = -EIO;\n\t\tgoto err_free_path;\n\t}\n\n\t/* resource #2: request */\n\trc = smb2_plain_req_init(SMB2_CREATE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\tgoto err_free_path;\n\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->ImpersonationLevel = IL_IMPERSONATION;\n\treq->DesiredAccess = cpu_to_le32(FILE_WRITE_ATTRIBUTES);\n\t/* File attributes ignored on open (used in create though) */\n\treq->FileAttributes = cpu_to_le32(file_attributes);\n\treq->ShareAccess = FILE_SHARE_ALL_LE;\n\treq->CreateDisposition = cpu_to_le32(FILE_CREATE);\n\treq->CreateOptions = cpu_to_le32(CREATE_NOT_FILE);\n\n\tiov[0].iov_base = (char *)req;\n\t/* -1 since last byte is buf[0] which is sent below (path) */\n\tiov[0].iov_len = total_len - 1;\n\n\treq->NameOffset = cpu_to_le16(sizeof(struct smb2_create_req));\n\n\t/* [MS-SMB2] 2.2.13 NameOffset:\n\t * If SMB2_FLAGS_DFS_OPERATIONS is set in the Flags field of\n\t * the SMB2 header, the file name includes a prefix that will\n\t * be processed during DFS name normalization as specified in\n\t * section 3.3.5.9. Otherwise, the file name is relative to\n\t * the share that is identified by the TreeId in the SMB2\n\t * header.\n\t */\n\tif (tcon->share_flags & SHI1005_FLAGS_DFS) {\n\t\tint name_len;\n\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_DFS_OPERATIONS;\n\t\trc = alloc_path_with_tree_prefix(&copy_path, &copy_size,\n\t\t\t\t\t\t &name_len,\n\t\t\t\t\t\t tcon->treeName, utf16_path);\n\t\tif (rc)\n\t\t\tgoto err_free_req;\n\n\t\treq->NameLength = cpu_to_le16(name_len * 2);\n\t\tuni_path_len = copy_size;\n\t\t/* free before overwriting resource */\n\t\tkfree(utf16_path);\n\t\tutf16_path = copy_path;\n\t} else {\n\t\tuni_path_len = (2 * UniStrnlen((wchar_t *)utf16_path, PATH_MAX)) + 2;\n\t\t/* MUST set path len (NameLength) to 0 opening root of share */\n\t\treq->NameLength = cpu_to_le16(uni_path_len - 2);\n\t\tif (uni_path_len % 8 != 0) {\n\t\t\tcopy_size = roundup(uni_path_len, 8);\n\t\t\tcopy_path = kzalloc(copy_size, GFP_KERNEL);\n\t\t\tif (!copy_path) {\n\t\t\t\trc = -ENOMEM;\n\t\t\t\tgoto err_free_req;\n\t\t\t}\n\t\t\tmemcpy((char *)copy_path, (const char *)utf16_path,\n\t\t\t       uni_path_len);\n\t\t\tuni_path_len = copy_size;\n\t\t\t/* free before overwriting resource */\n\t\t\tkfree(utf16_path);\n\t\t\tutf16_path = copy_path;\n\t\t}\n\t}\n\n\tiov[1].iov_len = uni_path_len;\n\tiov[1].iov_base = utf16_path;\n\treq->RequestedOplockLevel = SMB2_OPLOCK_LEVEL_NONE;\n\n\tif (tcon->posix_extensions) {\n\t\t/* resource #3: posix buf */\n\t\trc = add_posix_context(iov, &n_iov, mode);\n\t\tif (rc)\n\t\t\tgoto err_free_req;\n\t\tpc_buf = iov[n_iov-1].iov_base;\n\t}\n\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = n_iov;\n\n\ttrace_smb3_posix_mkdir_enter(xid, tcon->tid, ses->Suid, CREATE_NOT_FILE,\n\t\t\t\t    FILE_WRITE_ATTRIBUTES);\n\t/* resource #4: response buffer */\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CREATE_HE);\n\t\ttrace_smb3_posix_mkdir_err(xid, tcon->tid, ses->Suid,\n\t\t\t\t\t   CREATE_NOT_FILE,\n\t\t\t\t\t   FILE_WRITE_ATTRIBUTES, rc);\n\t\tgoto err_free_rsp_buf;\n\t}\n\n\trsp = (struct smb2_create_rsp *)rsp_iov.iov_base;\n\ttrace_smb3_posix_mkdir_done(xid, rsp->PersistentFileId, tcon->tid,\n\t\t\t\t    ses->Suid, CREATE_NOT_FILE,\n\t\t\t\t    FILE_WRITE_ATTRIBUTES);\n\n\tSMB2_close(xid, tcon, rsp->PersistentFileId, rsp->VolatileFileId);\n\n\t/* Eventually save off posix specific response info and timestaps */\n\nerr_free_rsp_buf:\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(pc_buf);\nerr_free_req:\n\tcifs_small_buf_release(req);\nerr_free_path:\n\tkfree(utf16_path);\n\treturn rc;\n}\n\nint\nSMB2_open_init(struct cifs_tcon *tcon, struct smb_rqst *rqst, __u8 *oplock,\n\t       struct cifs_open_parms *oparms, __le16 *path)\n{\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct smb2_create_req *req;\n\tunsigned int n_iov = 2;\n\t__u32 file_attributes = 0;\n\tint copy_size;\n\tint uni_path_len;\n\tunsigned int total_len;\n\tstruct kvec *iov = rqst->rq_iov;\n\t__le16 *copy_path;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_CREATE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tiov[0].iov_base = (char *)req;\n\t/* -1 since last byte is buf[0] which is sent below (path) */\n\tiov[0].iov_len = total_len - 1;\n\n\tif (oparms->create_options & CREATE_OPTION_READONLY)\n\t\tfile_attributes |= ATTR_READONLY;\n\tif (oparms->create_options & CREATE_OPTION_SPECIAL)\n\t\tfile_attributes |= ATTR_SYSTEM;\n\n\treq->ImpersonationLevel = IL_IMPERSONATION;\n\treq->DesiredAccess = cpu_to_le32(oparms->desired_access);\n\t/* File attributes ignored on open (used in create though) */\n\treq->FileAttributes = cpu_to_le32(file_attributes);\n\treq->ShareAccess = FILE_SHARE_ALL_LE;\n\treq->CreateDisposition = cpu_to_le32(oparms->disposition);\n\treq->CreateOptions = cpu_to_le32(oparms->create_options & CREATE_OPTIONS_MASK);\n\treq->NameOffset = cpu_to_le16(sizeof(struct smb2_create_req));\n\n\t/* [MS-SMB2] 2.2.13 NameOffset:\n\t * If SMB2_FLAGS_DFS_OPERATIONS is set in the Flags field of\n\t * the SMB2 header, the file name includes a prefix that will\n\t * be processed during DFS name normalization as specified in\n\t * section 3.3.5.9. Otherwise, the file name is relative to\n\t * the share that is identified by the TreeId in the SMB2\n\t * header.\n\t */\n\tif (tcon->share_flags & SHI1005_FLAGS_DFS) {\n\t\tint name_len;\n\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_DFS_OPERATIONS;\n\t\trc = alloc_path_with_tree_prefix(&copy_path, &copy_size,\n\t\t\t\t\t\t &name_len,\n\t\t\t\t\t\t tcon->treeName, path);\n\t\tif (rc)\n\t\t\treturn rc;\n\t\treq->NameLength = cpu_to_le16(name_len * 2);\n\t\tuni_path_len = copy_size;\n\t\tpath = copy_path;\n\t} else {\n\t\tuni_path_len = (2 * UniStrnlen((wchar_t *)path, PATH_MAX)) + 2;\n\t\t/* MUST set path len (NameLength) to 0 opening root of share */\n\t\treq->NameLength = cpu_to_le16(uni_path_len - 2);\n\t\tcopy_size = uni_path_len;\n\t\tif (copy_size % 8 != 0)\n\t\t\tcopy_size = roundup(copy_size, 8);\n\t\tcopy_path = kzalloc(copy_size, GFP_KERNEL);\n\t\tif (!copy_path)\n\t\t\treturn -ENOMEM;\n\t\tmemcpy((char *)copy_path, (const char *)path,\n\t\t       uni_path_len);\n\t\tuni_path_len = copy_size;\n\t\tpath = copy_path;\n\t}\n\n\tiov[1].iov_len = uni_path_len;\n\tiov[1].iov_base = path;\n\n\tif (!server->oplocks)\n\t\t*oplock = SMB2_OPLOCK_LEVEL_NONE;\n\n\tif (!(server->capabilities & SMB2_GLOBAL_CAP_LEASING) ||\n\t    *oplock == SMB2_OPLOCK_LEVEL_NONE)\n\t\treq->RequestedOplockLevel = *oplock;\n\telse if (!(server->capabilities & SMB2_GLOBAL_CAP_DIRECTORY_LEASING) &&\n\t\t  (oparms->create_options & CREATE_NOT_FILE))\n\t\treq->RequestedOplockLevel = *oplock; /* no srv lease support */\n\telse {\n\t\trc = add_lease_context(server, iov, &n_iov,\n\t\t\t\t       oparms->fid->lease_key, oplock);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (*oplock == SMB2_OPLOCK_LEVEL_BATCH) {\n\t\t/* need to set Next field of lease context if we request it */\n\t\tif (server->capabilities & SMB2_GLOBAL_CAP_LEASING) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(server->vals->create_lease_size);\n\t\t}\n\n\t\trc = add_durable_context(iov, &n_iov, oparms,\n\t\t\t\t\ttcon->use_persistent);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (tcon->posix_extensions) {\n\t\tif (n_iov > 2) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(iov[n_iov-1].iov_len);\n\t\t}\n\n\t\trc = add_posix_context(iov, &n_iov, oparms->mode);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (tcon->snapshot_time) {\n\t\tcifs_dbg(FYI, \"adding snapshot context\\n\");\n\t\tif (n_iov > 2) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(iov[n_iov-1].iov_len);\n\t\t}\n\n\t\trc = add_twarp_context(iov, &n_iov, tcon->snapshot_time);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\n\trqst->rq_nvec = n_iov;\n\treturn 0;\n}\n\n/* rq_iov[0] is the request and is released by cifs_small_buf_release().\n * All other vectors are freed by kfree().\n */\nvoid\nSMB2_open_free(struct smb_rqst *rqst)\n{\n\tint i;\n\n\tif (rqst && rqst->rq_iov) {\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base);\n\t\tfor (i = 1; i < rqst->rq_nvec; i++)\n\t\t\tif (rqst->rq_iov[i].iov_base != smb2_padding)\n\t\t\t\tkfree(rqst->rq_iov[i].iov_base);\n\t}\n}\n\nint\nSMB2_open(const unsigned int xid, struct cifs_open_parms *oparms, __le16 *path,\n\t  __u8 *oplock, struct smb2_file_all_info *buf,\n\t  struct kvec *err_iov, int *buftype)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_create_rsp *rsp = NULL;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_tcon *tcon = oparms->tcon;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[SMB2_CREATE_IOV_SIZE];\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\tint flags = 0;\n\n\tcifs_dbg(FYI, \"create/open\\n\");\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = SMB2_CREATE_IOV_SIZE;\n\n\trc = SMB2_open_init(tcon, &rqst, oplock, oparms, path);\n\tif (rc)\n\t\tgoto creat_exit;\n\n\ttrace_smb3_open_enter(xid, tcon->tid, tcon->ses->Suid,\n\t\toparms->create_options, oparms->desired_access);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\trsp = (struct smb2_create_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CREATE_HE);\n\t\tif (err_iov && rsp) {\n\t\t\t*err_iov = rsp_iov;\n\t\t\t*buftype = resp_buftype;\n\t\t\tresp_buftype = CIFS_NO_BUFFER;\n\t\t\trsp = NULL;\n\t\t}\n\t\ttrace_smb3_open_err(xid, tcon->tid, ses->Suid,\n\t\t\t\t    oparms->create_options, oparms->desired_access, rc);\n\t\tgoto creat_exit;\n\t} else\n\t\ttrace_smb3_open_done(xid, rsp->PersistentFileId, tcon->tid,\n\t\t\t\t     ses->Suid, oparms->create_options,\n\t\t\t\t     oparms->desired_access);\n\n\tatomic_inc(&tcon->num_remote_opens);\n\toparms->fid->persistent_fid = rsp->PersistentFileId;\n\toparms->fid->volatile_fid = rsp->VolatileFileId;\n#ifdef CONFIG_CIFS_DEBUG2\n\toparms->fid->mid = le64_to_cpu(rsp->sync_hdr.MessageId);\n#endif /* CIFS_DEBUG2 */\n\n\tif (buf) {\n\t\tmemcpy(buf, &rsp->CreationTime, 32);\n\t\tbuf->AllocationSize = rsp->AllocationSize;\n\t\tbuf->EndOfFile = rsp->EndofFile;\n\t\tbuf->Attributes = rsp->FileAttributes;\n\t\tbuf->NumberOfLinks = cpu_to_le32(1);\n\t\tbuf->DeletePending = 0;\n\t}\n\n\tif (rsp->OplockLevel == SMB2_OPLOCK_LEVEL_LEASE)\n\t\t*oplock = smb2_parse_lease_state(server, rsp,\n\t\t\t\t\t\t &oparms->fid->epoch,\n\t\t\t\t\t\t oparms->fid->lease_key);\n\telse\n\t\t*oplock = rsp->OplockLevel;\ncreat_exit:\n\tSMB2_open_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_ioctl_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\tu64 persistent_fid, u64 volatile_fid, u32 opcode,\n\t\tbool is_fsctl, char *in_data, u32 indatalen,\n\t\t__u32 max_response_size)\n{\n\tstruct smb2_ioctl_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_IOCTL, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->CtlCode = cpu_to_le32(opcode);\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tiov[0].iov_base = (char *)req;\n\t/*\n\t * If no input data, the size of ioctl struct in\n\t * protocol spec still includes a 1 byte data buffer,\n\t * but if input data passed to ioctl, we do not\n\t * want to double count this, so we do not send\n\t * the dummy one byte of data in iovec[0] if sending\n\t * input data (in iovec[1]).\n\t */\n\tif (indatalen) {\n\t\treq->InputCount = cpu_to_le32(indatalen);\n\t\t/* do not set InputOffset if no input data */\n\t\treq->InputOffset =\n\t\t       cpu_to_le32(offsetof(struct smb2_ioctl_req, Buffer));\n\t\trqst->rq_nvec = 2;\n\t\tiov[0].iov_len = total_len - 1;\n\t\tiov[1].iov_base = in_data;\n\t\tiov[1].iov_len = indatalen;\n\t} else {\n\t\trqst->rq_nvec = 1;\n\t\tiov[0].iov_len = total_len;\n\t}\n\n\treq->OutputOffset = 0;\n\treq->OutputCount = 0; /* MBZ */\n\n\t/*\n\t * In most cases max_response_size is set to 16K (CIFSMaxBufSize)\n\t * We Could increase default MaxOutputResponse, but that could require\n\t * more credits. Windows typically sets this smaller, but for some\n\t * ioctls it may be useful to allow server to send more. No point\n\t * limiting what the server can send as long as fits in one credit\n\t * We can not handle more than CIFS_MAX_BUF_SIZE yet but may want\n\t * to increase this limit up in the future.\n\t * Note that for snapshot queries that servers like Azure expect that\n\t * the first query be minimal size (and just used to get the number/size\n\t * of previous versions) so response size must be specified as EXACTLY\n\t * sizeof(struct snapshot_array) which is 16 when rounded up to multiple\n\t * of eight bytes.  Currently that is the only case where we set max\n\t * response size smaller.\n\t */\n\treq->MaxOutputResponse = cpu_to_le32(max_response_size);\n\n\tif (is_fsctl)\n\t\treq->Flags = cpu_to_le32(SMB2_0_IOCTL_IS_FSCTL);\n\telse\n\t\treq->Flags = 0;\n\n\t/* validate negotiate request must be signed - see MS-SMB2 3.2.5.5 */\n\tif (opcode == FSCTL_VALIDATE_NEGOTIATE_INFO)\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\treturn 0;\n}\n\nvoid\nSMB2_ioctl_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\n\n/*\n *\tSMB2 IOCTL is used for both IOCTLs and FSCTLs\n */\nint\nSMB2_ioctl(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t   u64 volatile_fid, u32 opcode, bool is_fsctl,\n\t   char *in_data, u32 indatalen, u32 max_out_data_len,\n\t   char **out_data, u32 *plen /* returned data len */)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_ioctl_rsp *rsp = NULL;\n\tstruct cifs_ses *ses;\n\tstruct kvec iov[SMB2_IOCTL_IOV_SIZE];\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\tint flags = 0;\n\n\tcifs_dbg(FYI, \"SMB2 IOCTL\\n\");\n\n\tif (out_data != NULL)\n\t\t*out_data = NULL;\n\n\t/* zero out returned data len, in case of error */\n\tif (plen)\n\t\t*plen = 0;\n\n\tif (tcon)\n\t\tses = tcon->ses;\n\telse\n\t\treturn -EIO;\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = SMB2_IOCTL_IOV_SIZE;\n\n\trc = SMB2_ioctl_init(tcon, &rqst, persistent_fid, volatile_fid, opcode,\n\t\t\t     is_fsctl, in_data, indatalen, max_out_data_len);\n\tif (rc)\n\t\tgoto ioctl_exit;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\trsp = (struct smb2_ioctl_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0)\n\t\ttrace_smb3_fsctl_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, 0, opcode, rc);\n\n\tif ((rc != 0) && (rc != -EINVAL)) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);\n\t\tgoto ioctl_exit;\n\t} else if (rc == -EINVAL) {\n\t\tif ((opcode != FSCTL_SRV_COPYCHUNK_WRITE) &&\n\t\t    (opcode != FSCTL_SRV_COPYCHUNK)) {\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);\n\t\t\tgoto ioctl_exit;\n\t\t}\n\t}\n\n\t/* check if caller wants to look at return data or just return rc */\n\tif ((plen == NULL) || (out_data == NULL))\n\t\tgoto ioctl_exit;\n\n\t*plen = le32_to_cpu(rsp->OutputCount);\n\n\t/* We check for obvious errors in the output buffer length and offset */\n\tif (*plen == 0)\n\t\tgoto ioctl_exit; /* server returned no data */\n\telse if (*plen > rsp_iov.iov_len || *plen > 0xFF00) {\n\t\tcifs_dbg(VFS, \"srv returned invalid ioctl length: %d\\n\", *plen);\n\t\t*plen = 0;\n\t\trc = -EIO;\n\t\tgoto ioctl_exit;\n\t}\n\n\tif (rsp_iov.iov_len - *plen < le32_to_cpu(rsp->OutputOffset)) {\n\t\tcifs_dbg(VFS, \"Malformed ioctl resp: len %d offset %d\\n\", *plen,\n\t\t\tle32_to_cpu(rsp->OutputOffset));\n\t\t*plen = 0;\n\t\trc = -EIO;\n\t\tgoto ioctl_exit;\n\t}\n\n\t*out_data = kmemdup((char *)rsp + le32_to_cpu(rsp->OutputOffset),\n\t\t\t    *plen, GFP_KERNEL);\n\tif (*out_data == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto ioctl_exit;\n\t}\n\nioctl_exit:\n\tSMB2_ioctl_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\n/*\n *   Individual callers to ioctl worker function follow\n */\n\nint\nSMB2_set_compression(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t     u64 persistent_fid, u64 volatile_fid)\n{\n\tint rc;\n\tstruct  compress_ioctl fsctl_input;\n\tchar *ret_data = NULL;\n\n\tfsctl_input.CompressionState =\n\t\t\tcpu_to_le16(COMPRESSION_FORMAT_DEFAULT);\n\n\trc = SMB2_ioctl(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tFSCTL_SET_COMPRESSION, true /* is_fsctl */,\n\t\t\t(char *)&fsctl_input /* data input */,\n\t\t\t2 /* in data len */, CIFSMaxBufSize /* max out data */,\n\t\t\t&ret_data /* out data */, NULL);\n\n\tcifs_dbg(FYI, \"set compression rc %d\\n\", rc);\n\n\treturn rc;\n}\n\nint\nSMB2_close_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\tu64 persistent_fid, u64 volatile_fid)\n{\n\tstruct smb2_close_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_CLOSE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\treturn 0;\n}\n\nvoid\nSMB2_close_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nint\nSMB2_close_flags(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t u64 persistent_fid, u64 volatile_fid, int flags)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_close_rsp *rsp = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"Close\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = SMB2_close_init(tcon, &rqst, persistent_fid, volatile_fid);\n\tif (rc)\n\t\tgoto close_exit;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_close_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CLOSE_HE);\n\t\ttrace_smb3_close_err(xid, persistent_fid, tcon->tid, ses->Suid,\n\t\t\t\t     rc);\n\t\tgoto close_exit;\n\t}\n\n\tatomic_dec(&tcon->num_remote_opens);\n\n\t/* BB FIXME - decode close response, update inode for caching */\n\nclose_exit:\n\tSMB2_close_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_close(const unsigned int xid, struct cifs_tcon *tcon,\n\t   u64 persistent_fid, u64 volatile_fid)\n{\n\treturn SMB2_close_flags(xid, tcon, persistent_fid, volatile_fid, 0);\n}\n\nint\nsmb2_validate_iov(unsigned int offset, unsigned int buffer_length,\n\t\t  struct kvec *iov, unsigned int min_buf_size)\n{\n\tunsigned int smb_len = iov->iov_len;\n\tchar *end_of_smb = smb_len + (char *)iov->iov_base;\n\tchar *begin_of_buf = offset + (char *)iov->iov_base;\n\tchar *end_of_buf = begin_of_buf + buffer_length;\n\n\n\tif (buffer_length < min_buf_size) {\n\t\tcifs_dbg(VFS, \"buffer length %d smaller than minimum size %d\\n\",\n\t\t\t buffer_length, min_buf_size);\n\t\treturn -EINVAL;\n\t}\n\n\t/* check if beyond RFC1001 maximum length */\n\tif ((smb_len > 0x7FFFFF) || (buffer_length > 0x7FFFFF)) {\n\t\tcifs_dbg(VFS, \"buffer length %d or smb length %d too large\\n\",\n\t\t\t buffer_length, smb_len);\n\t\treturn -EINVAL;\n\t}\n\n\tif ((begin_of_buf > end_of_smb) || (end_of_buf > end_of_smb)) {\n\t\tcifs_dbg(VFS, \"illegal server response, bad offset to data\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}\n\n/*\n * If SMB buffer fields are valid, copy into temporary buffer to hold result.\n * Caller must free buffer.\n */\nint\nsmb2_validate_and_copy_iov(unsigned int offset, unsigned int buffer_length,\n\t\t\t   struct kvec *iov, unsigned int minbufsize,\n\t\t\t   char *data)\n{\n\tchar *begin_of_buf = offset + (char *)iov->iov_base;\n\tint rc;\n\n\tif (!data)\n\t\treturn -EINVAL;\n\n\trc = smb2_validate_iov(offset, buffer_length, iov, minbufsize);\n\tif (rc)\n\t\treturn rc;\n\n\tmemcpy(data, begin_of_buf, buffer_length);\n\n\treturn 0;\n}\n\nint\nSMB2_query_info_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\t     u64 persistent_fid, u64 volatile_fid,\n\t\t     u8 info_class, u8 info_type, u32 additional_info,\n\t\t     size_t output_len, size_t input_len, void *input)\n{\n\tstruct smb2_query_info_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_INFO, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->InfoType = info_type;\n\treq->FileInfoClass = info_class;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\treq->AdditionalInformation = cpu_to_le32(additional_info);\n\n\treq->OutputBufferLength = cpu_to_le32(output_len);\n\tif (input_len) {\n\t\treq->InputBufferLength = cpu_to_le32(input_len);\n\t\t/* total_len for smb query request never close to le16 max */\n\t\treq->InputBufferOffset = cpu_to_le16(total_len - 1);\n\t\tmemcpy(req->Buffer, input, input_len);\n\t}\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1 + input_len;\n\treturn 0;\n}\n\nvoid\nSMB2_query_info_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nstatic int\nquery_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t   u64 persistent_fid, u64 volatile_fid, u8 info_class, u8 info_type,\n\t   u32 additional_info, size_t output_len, size_t min_len, void **data,\n\t\tu32 *dlen)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\tbool allocated = false;\n\n\tcifs_dbg(FYI, \"Query Info\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = SMB2_query_info_init(tcon, &rqst, persistent_fid, volatile_fid,\n\t\t\t\t  info_class, info_type, additional_info,\n\t\t\t\t  output_len, 0, NULL);\n\tif (rc)\n\t\tgoto qinf_exit;\n\n\ttrace_smb3_query_info_enter(xid, persistent_fid, tcon->tid,\n\t\t\t\t    ses->Suid, info_class, (__u32)info_type);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\ttrace_smb3_query_info_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type, rc);\n\t\tgoto qinf_exit;\n\t}\n\n\ttrace_smb3_query_info_done(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type);\n\n\tif (dlen) {\n\t\t*dlen = le32_to_cpu(rsp->OutputBufferLength);\n\t\tif (!*data) {\n\t\t\t*data = kmalloc(*dlen, GFP_KERNEL);\n\t\t\tif (!*data) {\n\t\t\t\tcifs_dbg(VFS,\n\t\t\t\t\t\"Error %d allocating memory for acl\\n\",\n\t\t\t\t\trc);\n\t\t\t\t*dlen = 0;\n\t\t\t\trc = -ENOMEM;\n\t\t\t\tgoto qinf_exit;\n\t\t\t}\n\t\t\tallocated = true;\n\t\t}\n\t}\n\n\trc = smb2_validate_and_copy_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t\t\tle32_to_cpu(rsp->OutputBufferLength),\n\t\t\t\t\t&rsp_iov, min_len, *data);\n\tif (rc && allocated) {\n\t\tkfree(*data);\n\t\t*data = NULL;\n\t\t*dlen = 0;\n\t}\n\nqinf_exit:\n\tSMB2_query_info_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint SMB2_query_info(const unsigned int xid, struct cifs_tcon *tcon,\n\tu64 persistent_fid, u64 volatile_fid, struct smb2_file_all_info *data)\n{\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  FILE_ALL_INFORMATION, SMB2_O_INFO_FILE, 0,\n\t\t\t  sizeof(struct smb2_file_all_info) + PATH_MAX * 2,\n\t\t\t  sizeof(struct smb2_file_all_info), (void **)&data,\n\t\t\t  NULL);\n}\n\nint\nSMB2_query_acl(const unsigned int xid, struct cifs_tcon *tcon,\n\t\tu64 persistent_fid, u64 volatile_fid,\n\t\tvoid **data, u32 *plen)\n{\n\t__u32 additional_info = OWNER_SECINFO | GROUP_SECINFO | DACL_SECINFO;\n\t*plen = 0;\n\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  0, SMB2_O_INFO_SECURITY, additional_info,\n\t\t\t  SMB2_MAX_BUFFER_SIZE, MIN_SEC_DESC_LEN, data, plen);\n}\n\nint\nSMB2_get_srv_num(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t u64 persistent_fid, u64 volatile_fid, __le64 *uniqueid)\n{\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  FILE_INTERNAL_INFORMATION, SMB2_O_INFO_FILE, 0,\n\t\t\t  sizeof(struct smb2_file_internal_info),\n\t\t\t  sizeof(struct smb2_file_internal_info),\n\t\t\t  (void **)&uniqueid, NULL);\n}\n\n/*\n * This is a no-op for now. We're not really interested in the reply, but\n * rather in the fact that the server sent one and that server->lstrp\n * gets updated.\n *\n * FIXME: maybe we should consider checking that the reply matches request?\n */\nstatic void\nsmb2_echo_callback(struct mid_q_entry *mid)\n{\n\tstruct TCP_Server_Info *server = mid->callback_data;\n\tstruct smb2_echo_rsp *rsp = (struct smb2_echo_rsp *)mid->resp_buf;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\n\tif (mid->mid_state == MID_RESPONSE_RECEIVED\n\t    || mid->mid_state == MID_RESPONSE_MALFORMED) {\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t}\n\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, CIFS_ECHO_OP);\n}\n\nvoid smb2_reconnect_server(struct work_struct *work)\n{\n\tstruct TCP_Server_Info *server = container_of(work,\n\t\t\t\t\tstruct TCP_Server_Info, reconnect.work);\n\tstruct cifs_ses *ses;\n\tstruct cifs_tcon *tcon, *tcon2;\n\tstruct list_head tmp_list;\n\tint tcon_exist = false;\n\tint rc;\n\tint resched = false;\n\n\n\t/* Prevent simultaneous reconnects that can corrupt tcon->rlist list */\n\tmutex_lock(&server->reconnect_mutex);\n\n\tINIT_LIST_HEAD(&tmp_list);\n\tcifs_dbg(FYI, \"Need negotiate, reconnecting tcons\\n\");\n\n\tspin_lock(&cifs_tcp_ses_lock);\n\tlist_for_each_entry(ses, &server->smb_ses_list, smb_ses_list) {\n\t\tlist_for_each_entry(tcon, &ses->tcon_list, tcon_list) {\n\t\t\tif (tcon->need_reconnect || tcon->need_reopen_files) {\n\t\t\t\ttcon->tc_count++;\n\t\t\t\tlist_add_tail(&tcon->rlist, &tmp_list);\n\t\t\t\ttcon_exist = true;\n\t\t\t}\n\t\t}\n\t\tif (ses->tcon_ipc && ses->tcon_ipc->need_reconnect) {\n\t\t\tlist_add_tail(&ses->tcon_ipc->rlist, &tmp_list);\n\t\t\ttcon_exist = true;\n\t\t}\n\t}\n\t/*\n\t * Get the reference to server struct to be sure that the last call of\n\t * cifs_put_tcon() in the loop below won't release the server pointer.\n\t */\n\tif (tcon_exist)\n\t\tserver->srv_count++;\n\n\tspin_unlock(&cifs_tcp_ses_lock);\n\n\tlist_for_each_entry_safe(tcon, tcon2, &tmp_list, rlist) {\n\t\trc = smb2_reconnect(SMB2_INTERNAL_CMD, tcon);\n\t\tif (!rc)\n\t\t\tcifs_reopen_persistent_handles(tcon);\n\t\telse\n\t\t\tresched = true;\n\t\tlist_del_init(&tcon->rlist);\n\t\tcifs_put_tcon(tcon);\n\t}\n\n\tcifs_dbg(FYI, \"Reconnecting tcons finished\\n\");\n\tif (resched)\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 2 * HZ);\n\tmutex_unlock(&server->reconnect_mutex);\n\n\t/* now we can safely release srv struct */\n\tif (tcon_exist)\n\t\tcifs_put_tcp_session(server, 1);\n}\n\nint\nSMB2_echo(struct TCP_Server_Info *server)\n{\n\tstruct smb2_echo_req *req;\n\tint rc = 0;\n\tstruct kvec iov[1];\n\tstruct smb_rqst rqst = { .rq_iov = iov,\n\t\t\t\t .rq_nvec = 1 };\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"In echo request\\n\");\n\n\tif (server->tcpStatus == CifsNeedNegotiate) {\n\t\t/* No need to send echo on newly established connections */\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 0);\n\t\treturn rc;\n\t}\n\n\trc = smb2_plain_req_init(SMB2_ECHO, NULL, (void **)&req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\n\tiov[0].iov_len = total_len;\n\tiov[0].iov_base = (char *)req;\n\n\trc = cifs_call_async(server, &rqst, NULL, smb2_echo_callback, NULL,\n\t\t\t     server, CIFS_ECHO_OP, NULL);\n\tif (rc)\n\t\tcifs_dbg(FYI, \"Echo request failed: %d\\n\", rc);\n\n\tcifs_small_buf_release(req);\n\treturn rc;\n}\n\nint\nSMB2_flush(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t   u64 volatile_fid)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_flush_req *req;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buftype;\n\tint rc = 0;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Flush\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_FLUSH, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_FLUSH_HE);\n\t\ttrace_smb3_flush_err(xid, persistent_fid, tcon->tid, ses->Suid,\n\t\t\t\t     rc);\n\t}\n\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\n/*\n * To form a chain of read requests, any read requests after the first should\n * have the end_of_chain boolean set to true.\n */\nstatic int\nsmb2_new_read_req(void **buf, unsigned int *total_len,\n\tstruct cifs_io_parms *io_parms, struct cifs_readdata *rdata,\n\tunsigned int remaining_bytes, int request_type)\n{\n\tint rc = -EACCES;\n\tstruct smb2_read_plain_req *req = NULL;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct TCP_Server_Info *server;\n\n\trc = smb2_plain_req_init(SMB2_READ, io_parms->tcon, (void **) &req,\n\t\t\t\t total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tserver = io_parms->tcon->ses->server;\n\tif (server == NULL)\n\t\treturn -ECONNABORTED;\n\n\tshdr = &req->sync_hdr;\n\tshdr->ProcessId = cpu_to_le32(io_parms->pid);\n\n\treq->PersistentFileId = io_parms->persistent_fid;\n\treq->VolatileFileId = io_parms->volatile_fid;\n\treq->ReadChannelInfoOffset = 0; /* reserved */\n\treq->ReadChannelInfoLength = 0; /* reserved */\n\treq->Channel = 0; /* reserved */\n\treq->MinimumCount = 0;\n\treq->Length = cpu_to_le32(io_parms->length);\n\treq->Offset = cpu_to_le64(io_parms->offset);\n\n\ttrace_smb3_read_enter(0 /* xid */,\n\t\t\tio_parms->persistent_fid,\n\t\t\tio_parms->tcon->tid, io_parms->tcon->ses->Suid,\n\t\t\tio_parms->offset, io_parms->length);\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If we want to do a RDMA write, fill in and append\n\t * smbd_buffer_descriptor_v1 to the end of read request\n\t */\n\tif (server->rdma && rdata && !server->sign &&\n\t\trdata->bytes >= server->smbd_conn->rdma_readwrite_threshold) {\n\n\t\tstruct smbd_buffer_descriptor_v1 *v1;\n\t\tbool need_invalidate =\n\t\t\tio_parms->tcon->ses->server->dialect == SMB30_PROT_ID;\n\n\t\trdata->mr = smbd_register_mr(\n\t\t\t\tserver->smbd_conn, rdata->pages,\n\t\t\t\trdata->nr_pages, rdata->page_offset,\n\t\t\t\trdata->tailsz, true, need_invalidate);\n\t\tif (!rdata->mr)\n\t\t\treturn -ENOBUFS;\n\n\t\treq->Channel = SMB2_CHANNEL_RDMA_V1_INVALIDATE;\n\t\tif (need_invalidate)\n\t\t\treq->Channel = SMB2_CHANNEL_RDMA_V1;\n\t\treq->ReadChannelInfoOffset =\n\t\t\tcpu_to_le16(offsetof(struct smb2_read_plain_req, Buffer));\n\t\treq->ReadChannelInfoLength =\n\t\t\tcpu_to_le16(sizeof(struct smbd_buffer_descriptor_v1));\n\t\tv1 = (struct smbd_buffer_descriptor_v1 *) &req->Buffer[0];\n\t\tv1->offset = cpu_to_le64(rdata->mr->mr->iova);\n\t\tv1->token = cpu_to_le32(rdata->mr->mr->rkey);\n\t\tv1->length = cpu_to_le32(rdata->mr->mr->length);\n\n\t\t*total_len += sizeof(*v1) - 1;\n\t}\n#endif\n\tif (request_type & CHAINED_REQUEST) {\n\t\tif (!(request_type & END_OF_CHAIN)) {\n\t\t\t/* next 8-byte aligned request */\n\t\t\t*total_len = DIV_ROUND_UP(*total_len, 8) * 8;\n\t\t\tshdr->NextCommand = cpu_to_le32(*total_len);\n\t\t} else /* END_OF_CHAIN */\n\t\t\tshdr->NextCommand = 0;\n\t\tif (request_type & RELATED_REQUEST) {\n\t\t\tshdr->Flags |= SMB2_FLAGS_RELATED_OPERATIONS;\n\t\t\t/*\n\t\t\t * Related requests use info from previous read request\n\t\t\t * in chain.\n\t\t\t */\n\t\t\tshdr->SessionId = 0xFFFFFFFF;\n\t\t\tshdr->TreeId = 0xFFFFFFFF;\n\t\t\treq->PersistentFileId = 0xFFFFFFFF;\n\t\t\treq->VolatileFileId = 0xFFFFFFFF;\n\t\t}\n\t}\n\tif (remaining_bytes > io_parms->length)\n\t\treq->RemainingBytes = cpu_to_le32(remaining_bytes);\n\telse\n\t\treq->RemainingBytes = 0;\n\n\t*buf = req;\n\treturn rc;\n}\n\nstatic void\nsmb2_readv_callback(struct mid_q_entry *mid)\n{\n\tstruct cifs_readdata *rdata = mid->callback_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(rdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct smb2_sync_hdr *shdr =\n\t\t\t\t(struct smb2_sync_hdr *)rdata->iov[0].iov_base;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\tstruct smb_rqst rqst = { .rq_iov = rdata->iov,\n\t\t\t\t .rq_nvec = 2,\n\t\t\t\t .rq_pages = rdata->pages,\n\t\t\t\t .rq_offset = rdata->page_offset,\n\t\t\t\t .rq_npages = rdata->nr_pages,\n\t\t\t\t .rq_pagesz = rdata->pagesz,\n\t\t\t\t .rq_tailsz = rdata->tailsz };\n\n\tcifs_dbg(FYI, \"%s: mid=%llu state=%d result=%d bytes=%u\\n\",\n\t\t __func__, mid->mid, mid->mid_state, rdata->result,\n\t\t rdata->bytes);\n\n\tswitch (mid->mid_state) {\n\tcase MID_RESPONSE_RECEIVED:\n\t\tcredits.value = le16_to_cpu(shdr->CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* result already set, check signature */\n\t\tif (server->sign && !mid->decrypted) {\n\t\t\tint rc;\n\n\t\t\trc = smb2_verify_signature(&rqst, server);\n\t\t\tif (rc)\n\t\t\t\tcifs_dbg(VFS, \"SMB signature verification returned error = %d\\n\",\n\t\t\t\t\t rc);\n\t\t}\n\t\t/* FIXME: should this be counted toward the initiating task? */\n\t\ttask_io_account_read(rdata->got_bytes);\n\t\tcifs_stats_bytes_read(tcon, rdata->got_bytes);\n\t\tbreak;\n\tcase MID_REQUEST_SUBMITTED:\n\tcase MID_RETRY_NEEDED:\n\t\trdata->result = -EAGAIN;\n\t\tif (server->sign && rdata->got_bytes)\n\t\t\t/* reset bytes number since we can not check a sign */\n\t\t\trdata->got_bytes = 0;\n\t\t/* FIXME: should this be counted toward the initiating task? */\n\t\ttask_io_account_read(rdata->got_bytes);\n\t\tcifs_stats_bytes_read(tcon, rdata->got_bytes);\n\t\tbreak;\n\tcase MID_RESPONSE_MALFORMED:\n\t\tcredits.value = le16_to_cpu(shdr->CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* fall through */\n\tdefault:\n\t\trdata->result = -EIO;\n\t}\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If this rdata has a memmory registered, the MR can be freed\n\t * MR needs to be freed as soon as I/O finishes to prevent deadlock\n\t * because they have limited number and are used for future I/Os\n\t */\n\tif (rdata->mr) {\n\t\tsmbd_deregister_mr(rdata->mr);\n\t\trdata->mr = NULL;\n\t}\n#endif\n\tif (rdata->result && rdata->result != -ENODATA) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_READ_HE);\n\t\ttrace_smb3_read_err(0 /* xid */,\n\t\t\t\t    rdata->cfile->fid.persistent_fid,\n\t\t\t\t    tcon->tid, tcon->ses->Suid, rdata->offset,\n\t\t\t\t    rdata->bytes, rdata->result);\n\t} else\n\t\ttrace_smb3_read_done(0 /* xid */,\n\t\t\t\t     rdata->cfile->fid.persistent_fid,\n\t\t\t\t     tcon->tid, tcon->ses->Suid,\n\t\t\t\t     rdata->offset, rdata->got_bytes);\n\n\tqueue_work(cifsiod_wq, &rdata->work);\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, 0);\n}\n\n/* smb2_async_readv - send an async read, and set up mid to handle result */\nint\nsmb2_async_readv(struct cifs_readdata *rdata)\n{\n\tint rc, flags = 0;\n\tchar *buf;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct cifs_io_parms io_parms;\n\tstruct smb_rqst rqst = { .rq_iov = rdata->iov,\n\t\t\t\t .rq_nvec = 1 };\n\tstruct TCP_Server_Info *server;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"%s: offset=%llu bytes=%u\\n\",\n\t\t __func__, rdata->offset, rdata->bytes);\n\n\tio_parms.tcon = tlink_tcon(rdata->cfile->tlink);\n\tio_parms.offset = rdata->offset;\n\tio_parms.length = rdata->bytes;\n\tio_parms.persistent_fid = rdata->cfile->fid.persistent_fid;\n\tio_parms.volatile_fid = rdata->cfile->fid.volatile_fid;\n\tio_parms.pid = rdata->pid;\n\n\tserver = io_parms.tcon->ses->server;\n\n\trc = smb2_new_read_req(\n\t\t(void **) &buf, &total_len, &io_parms, rdata, 0, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(io_parms.tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\trdata->iov[0].iov_base = buf;\n\trdata->iov[0].iov_len = total_len;\n\n\tshdr = (struct smb2_sync_hdr *)buf;\n\n\tif (rdata->credits.value > 0) {\n\t\tshdr->CreditCharge = cpu_to_le16(DIV_ROUND_UP(rdata->bytes,\n\t\t\t\t\t\tSMB2_MAX_BUFFER_SIZE));\n\t\tshdr->CreditRequest =\n\t\t\tcpu_to_le16(le16_to_cpu(shdr->CreditCharge) + 1);\n\n\t\trc = adjust_credits(server, &rdata->credits, rdata->bytes);\n\t\tif (rc)\n\t\t\tgoto async_readv_out;\n\n\t\tflags |= CIFS_HAS_CREDITS;\n\t}\n\n\tkref_get(&rdata->refcount);\n\trc = cifs_call_async(io_parms.tcon->ses->server, &rqst,\n\t\t\t     cifs_readv_receive, smb2_readv_callback,\n\t\t\t     smb3_handle_read_data, rdata, flags,\n\t\t\t     &rdata->credits);\n\tif (rc) {\n\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t\tcifs_stats_fail_inc(io_parms.tcon, SMB2_READ_HE);\n\t\ttrace_smb3_read_err(0 /* xid */, io_parms.persistent_fid,\n\t\t\t\t    io_parms.tcon->tid,\n\t\t\t\t    io_parms.tcon->ses->Suid,\n\t\t\t\t    io_parms.offset, io_parms.length, rc);\n\t}\n\nasync_readv_out:\n\tcifs_small_buf_release(buf);\n\treturn rc;\n}\n\nint\nSMB2_read(const unsigned int xid, struct cifs_io_parms *io_parms,\n\t  unsigned int *nbytes, char **buf, int *buf_type)\n{\n\tstruct smb_rqst rqst;\n\tint resp_buftype, rc = -EACCES;\n\tstruct smb2_read_plain_req *req = NULL;\n\tstruct smb2_read_rsp *rsp = NULL;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tunsigned int total_len;\n\tint flags = CIFS_LOG_ERROR;\n\tstruct cifs_ses *ses = io_parms->tcon->ses;\n\n\t*nbytes = 0;\n\trc = smb2_new_read_req((void **)&req, &total_len, io_parms, NULL, 0, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(io_parms->tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\trsp = (struct smb2_read_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tif (rc != -ENODATA) {\n\t\t\tcifs_stats_fail_inc(io_parms->tcon, SMB2_READ_HE);\n\t\t\tcifs_dbg(VFS, \"Send error in read = %d\\n\", rc);\n\t\t\ttrace_smb3_read_err(xid, req->PersistentFileId,\n\t\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t\t    io_parms->offset, io_parms->length,\n\t\t\t\t\t    rc);\n\t\t} else\n\t\t\ttrace_smb3_read_done(xid, req->PersistentFileId,\n\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t    io_parms->offset, 0);\n\t\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\t\treturn rc == -ENODATA ? 0 : rc;\n\t} else\n\t\ttrace_smb3_read_done(xid, req->PersistentFileId,\n\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t    io_parms->offset, io_parms->length);\n\n\t*nbytes = le32_to_cpu(rsp->DataLength);\n\tif ((*nbytes > CIFS_MAX_MSGSIZE) ||\n\t    (*nbytes > io_parms->length)) {\n\t\tcifs_dbg(FYI, \"bad length %d for count %d\\n\",\n\t\t\t *nbytes, io_parms->length);\n\t\trc = -EIO;\n\t\t*nbytes = 0;\n\t}\n\n\tif (*buf) {\n\t\tmemcpy(*buf, (char *)rsp + rsp->DataOffset, *nbytes);\n\t\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\t} else if (resp_buftype != CIFS_NO_BUFFER) {\n\t\t*buf = rsp_iov.iov_base;\n\t\tif (resp_buftype == CIFS_SMALL_BUFFER)\n\t\t\t*buf_type = CIFS_SMALL_BUFFER;\n\t\telse if (resp_buftype == CIFS_LARGE_BUFFER)\n\t\t\t*buf_type = CIFS_LARGE_BUFFER;\n\t}\n\treturn rc;\n}\n\n/*\n * Check the mid_state and signature on received buffer (if any), and queue the\n * workqueue completion task.\n */\nstatic void\nsmb2_writev_callback(struct mid_q_entry *mid)\n{\n\tstruct cifs_writedata *wdata = mid->callback_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(wdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tunsigned int written;\n\tstruct smb2_write_rsp *rsp = (struct smb2_write_rsp *)mid->resp_buf;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\n\tswitch (mid->mid_state) {\n\tcase MID_RESPONSE_RECEIVED:\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\twdata->result = smb2_check_receive(mid, server, 0);\n\t\tif (wdata->result != 0)\n\t\t\tbreak;\n\n\t\twritten = le32_to_cpu(rsp->DataLength);\n\t\t/*\n\t\t * Mask off high 16 bits when bytes written as returned\n\t\t * by the server is greater than bytes requested by the\n\t\t * client. OS/2 servers are known to set incorrect\n\t\t * CountHigh values.\n\t\t */\n\t\tif (written > wdata->bytes)\n\t\t\twritten &= 0xFFFF;\n\n\t\tif (written < wdata->bytes)\n\t\t\twdata->result = -ENOSPC;\n\t\telse\n\t\t\twdata->bytes = written;\n\t\tbreak;\n\tcase MID_REQUEST_SUBMITTED:\n\tcase MID_RETRY_NEEDED:\n\t\twdata->result = -EAGAIN;\n\t\tbreak;\n\tcase MID_RESPONSE_MALFORMED:\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* fall through */\n\tdefault:\n\t\twdata->result = -EIO;\n\t\tbreak;\n\t}\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If this wdata has a memory registered, the MR can be freed\n\t * The number of MRs available is limited, it's important to recover\n\t * used MR as soon as I/O is finished. Hold MR longer in the later\n\t * I/O process can possibly result in I/O deadlock due to lack of MR\n\t * to send request on I/O retry\n\t */\n\tif (wdata->mr) {\n\t\tsmbd_deregister_mr(wdata->mr);\n\t\twdata->mr = NULL;\n\t}\n#endif\n\tif (wdata->result) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_WRITE_HE);\n\t\ttrace_smb3_write_err(0 /* no xid */,\n\t\t\t\t     wdata->cfile->fid.persistent_fid,\n\t\t\t\t     tcon->tid, tcon->ses->Suid, wdata->offset,\n\t\t\t\t     wdata->bytes, wdata->result);\n\t} else\n\t\ttrace_smb3_write_done(0 /* no xid */,\n\t\t\t\t      wdata->cfile->fid.persistent_fid,\n\t\t\t\t      tcon->tid, tcon->ses->Suid,\n\t\t\t\t      wdata->offset, wdata->bytes);\n\n\tqueue_work(cifsiod_wq, &wdata->work);\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, 0);\n}\n\n/* smb2_async_writev - send an async write, and set up mid to handle result */\nint\nsmb2_async_writev(struct cifs_writedata *wdata,\n\t\t  void (*release)(struct kref *kref))\n{\n\tint rc = -EACCES, flags = 0;\n\tstruct smb2_write_req *req = NULL;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct cifs_tcon *tcon = tlink_tcon(wdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct kvec iov[1];\n\tstruct smb_rqst rqst = { };\n\tunsigned int total_len;\n\n\trc = smb2_plain_req_init(SMB2_WRITE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tshdr = (struct smb2_sync_hdr *)req;\n\tshdr->ProcessId = cpu_to_le32(wdata->cfile->pid);\n\n\treq->PersistentFileId = wdata->cfile->fid.persistent_fid;\n\treq->VolatileFileId = wdata->cfile->fid.volatile_fid;\n\treq->WriteChannelInfoOffset = 0;\n\treq->WriteChannelInfoLength = 0;\n\treq->Channel = 0;\n\treq->Offset = cpu_to_le64(wdata->offset);\n\treq->DataOffset = cpu_to_le16(\n\t\t\t\toffsetof(struct smb2_write_req, Buffer));\n\treq->RemainingBytes = 0;\n\n\ttrace_smb3_write_enter(0 /* xid */, wdata->cfile->fid.persistent_fid,\n\t\ttcon->tid, tcon->ses->Suid, wdata->offset, wdata->bytes);\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If we want to do a server RDMA read, fill in and append\n\t * smbd_buffer_descriptor_v1 to the end of write request\n\t */\n\tif (server->rdma && !server->sign && wdata->bytes >=\n\t\tserver->smbd_conn->rdma_readwrite_threshold) {\n\n\t\tstruct smbd_buffer_descriptor_v1 *v1;\n\t\tbool need_invalidate = server->dialect == SMB30_PROT_ID;\n\n\t\twdata->mr = smbd_register_mr(\n\t\t\t\tserver->smbd_conn, wdata->pages,\n\t\t\t\twdata->nr_pages, wdata->page_offset,\n\t\t\t\twdata->tailsz, false, need_invalidate);\n\t\tif (!wdata->mr) {\n\t\t\trc = -ENOBUFS;\n\t\t\tgoto async_writev_out;\n\t\t}\n\t\treq->Length = 0;\n\t\treq->DataOffset = 0;\n\t\tif (wdata->nr_pages > 1)\n\t\t\treq->RemainingBytes =\n\t\t\t\tcpu_to_le32(\n\t\t\t\t\t(wdata->nr_pages - 1) * wdata->pagesz -\n\t\t\t\t\twdata->page_offset + wdata->tailsz\n\t\t\t\t);\n\t\telse\n\t\t\treq->RemainingBytes = cpu_to_le32(wdata->tailsz);\n\t\treq->Channel = SMB2_CHANNEL_RDMA_V1_INVALIDATE;\n\t\tif (need_invalidate)\n\t\t\treq->Channel = SMB2_CHANNEL_RDMA_V1;\n\t\treq->WriteChannelInfoOffset =\n\t\t\tcpu_to_le16(offsetof(struct smb2_write_req, Buffer));\n\t\treq->WriteChannelInfoLength =\n\t\t\tcpu_to_le16(sizeof(struct smbd_buffer_descriptor_v1));\n\t\tv1 = (struct smbd_buffer_descriptor_v1 *) &req->Buffer[0];\n\t\tv1->offset = cpu_to_le64(wdata->mr->mr->iova);\n\t\tv1->token = cpu_to_le32(wdata->mr->mr->rkey);\n\t\tv1->length = cpu_to_le32(wdata->mr->mr->length);\n\t}\n#endif\n\tiov[0].iov_len = total_len - 1;\n\tiov[0].iov_base = (char *)req;\n\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\trqst.rq_pages = wdata->pages;\n\trqst.rq_offset = wdata->page_offset;\n\trqst.rq_npages = wdata->nr_pages;\n\trqst.rq_pagesz = wdata->pagesz;\n\trqst.rq_tailsz = wdata->tailsz;\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\tif (wdata->mr) {\n\t\tiov[0].iov_len += sizeof(struct smbd_buffer_descriptor_v1);\n\t\trqst.rq_npages = 0;\n\t}\n#endif\n\tcifs_dbg(FYI, \"async write at %llu %u bytes\\n\",\n\t\t wdata->offset, wdata->bytes);\n\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/* For RDMA read, I/O size is in RemainingBytes not in Length */\n\tif (!wdata->mr)\n\t\treq->Length = cpu_to_le32(wdata->bytes);\n#else\n\treq->Length = cpu_to_le32(wdata->bytes);\n#endif\n\n\tif (wdata->credits.value > 0) {\n\t\tshdr->CreditCharge = cpu_to_le16(DIV_ROUND_UP(wdata->bytes,\n\t\t\t\t\t\t    SMB2_MAX_BUFFER_SIZE));\n\t\tshdr->CreditRequest =\n\t\t\tcpu_to_le16(le16_to_cpu(shdr->CreditCharge) + 1);\n\n\t\trc = adjust_credits(server, &wdata->credits, wdata->bytes);\n\t\tif (rc)\n\t\t\tgoto async_writev_out;\n\n\t\tflags |= CIFS_HAS_CREDITS;\n\t}\n\n\tkref_get(&wdata->refcount);\n\trc = cifs_call_async(server, &rqst, NULL, smb2_writev_callback, NULL,\n\t\t\t     wdata, flags, &wdata->credits);\n\n\tif (rc) {\n\t\ttrace_smb3_write_err(0 /* no xid */, req->PersistentFileId,\n\t\t\t\t     tcon->tid, tcon->ses->Suid, wdata->offset,\n\t\t\t\t     wdata->bytes, rc);\n\t\tkref_put(&wdata->refcount, release);\n\t\tcifs_stats_fail_inc(tcon, SMB2_WRITE_HE);\n\t}\n\nasync_writev_out:\n\tcifs_small_buf_release(req);\n\treturn rc;\n}\n\n/*\n * SMB2_write function gets iov pointer to kvec array with n_vec as a length.\n * The length field from io_parms must be at least 1 and indicates a number of\n * elements with data to write that begins with position 1 in iov array. All\n * data length is specified by count.\n */\nint\nSMB2_write(const unsigned int xid, struct cifs_io_parms *io_parms,\n\t   unsigned int *nbytes, struct kvec *iov, int n_vec)\n{\n\tstruct smb_rqst rqst;\n\tint rc = 0;\n\tstruct smb2_write_req *req = NULL;\n\tstruct smb2_write_rsp *rsp = NULL;\n\tint resp_buftype;\n\tstruct kvec rsp_iov;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\t*nbytes = 0;\n\n\tif (n_vec < 1)\n\t\treturn rc;\n\n\trc = smb2_plain_req_init(SMB2_WRITE, io_parms->tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (io_parms->tcon->ses->server == NULL)\n\t\treturn -ECONNABORTED;\n\n\tif (smb3_encryption_required(io_parms->tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(io_parms->pid);\n\n\treq->PersistentFileId = io_parms->persistent_fid;\n\treq->VolatileFileId = io_parms->volatile_fid;\n\treq->WriteChannelInfoOffset = 0;\n\treq->WriteChannelInfoLength = 0;\n\treq->Channel = 0;\n\treq->Length = cpu_to_le32(io_parms->length);\n\treq->Offset = cpu_to_le64(io_parms->offset);\n\treq->DataOffset = cpu_to_le16(\n\t\t\t\toffsetof(struct smb2_write_req, Buffer));\n\treq->RemainingBytes = 0;\n\n\ttrace_smb3_write_enter(xid, io_parms->persistent_fid,\n\t\tio_parms->tcon->tid, io_parms->tcon->ses->Suid,\n\t\tio_parms->offset, io_parms->length);\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = n_vec + 1;\n\n\trc = cifs_send_recv(xid, io_parms->tcon->ses, &rqst,\n\t\t\t    &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_write_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\ttrace_smb3_write_err(xid, req->PersistentFileId,\n\t\t\t\t     io_parms->tcon->tid,\n\t\t\t\t     io_parms->tcon->ses->Suid,\n\t\t\t\t     io_parms->offset, io_parms->length, rc);\n\t\tcifs_stats_fail_inc(io_parms->tcon, SMB2_WRITE_HE);\n\t\tcifs_dbg(VFS, \"Send error in write = %d\\n\", rc);\n\t} else {\n\t\t*nbytes = le32_to_cpu(rsp->DataLength);\n\t\ttrace_smb3_write_done(xid, req->PersistentFileId,\n\t\t\t\t     io_parms->tcon->tid,\n\t\t\t\t     io_parms->tcon->ses->Suid,\n\t\t\t\t     io_parms->offset, *nbytes);\n\t}\n\n\tcifs_small_buf_release(req);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nstatic unsigned int\nnum_entries(char *bufstart, char *end_of_buf, char **lastentry, size_t size)\n{\n\tint len;\n\tunsigned int entrycount = 0;\n\tunsigned int next_offset = 0;\n\tchar *entryptr;\n\tFILE_DIRECTORY_INFO *dir_info;\n\n\tif (bufstart == NULL)\n\t\treturn 0;\n\n\tentryptr = bufstart;\n\n\twhile (1) {\n\t\tif (entryptr + next_offset < entryptr ||\n\t\t    entryptr + next_offset > end_of_buf ||\n\t\t    entryptr + next_offset + size > end_of_buf) {\n\t\t\tcifs_dbg(VFS, \"malformed search entry would overflow\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tentryptr = entryptr + next_offset;\n\t\tdir_info = (FILE_DIRECTORY_INFO *)entryptr;\n\n\t\tlen = le32_to_cpu(dir_info->FileNameLength);\n\t\tif (entryptr + len < entryptr ||\n\t\t    entryptr + len > end_of_buf ||\n\t\t    entryptr + len + size > end_of_buf) {\n\t\t\tcifs_dbg(VFS, \"directory entry name would overflow frame end of buf %p\\n\",\n\t\t\t\t end_of_buf);\n\t\t\tbreak;\n\t\t}\n\n\t\t*lastentry = entryptr;\n\t\tentrycount++;\n\n\t\tnext_offset = le32_to_cpu(dir_info->NextEntryOffset);\n\t\tif (!next_offset)\n\t\t\tbreak;\n\t}\n\n\treturn entrycount;\n}\n\n/*\n * Readdir/FindFirst\n */\nint\nSMB2_query_directory(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t     u64 persistent_fid, u64 volatile_fid, int index,\n\t\t     struct cifs_search_info *srch_inf)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_directory_req *req;\n\tstruct smb2_query_directory_rsp *rsp = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint len;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tunsigned char *bufptr;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_ses *ses = tcon->ses;\n\t__le16 asteriks = cpu_to_le16('*');\n\tchar *end_of_smb;\n\tunsigned int output_size = CIFSMaxBufSize;\n\tsize_t info_buf_size;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_DIRECTORY, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tswitch (srch_inf->info_level) {\n\tcase SMB_FIND_FILE_DIRECTORY_INFO:\n\t\treq->FileInformationClass = FILE_DIRECTORY_INFORMATION;\n\t\tinfo_buf_size = sizeof(FILE_DIRECTORY_INFO) - 1;\n\t\tbreak;\n\tcase SMB_FIND_FILE_ID_FULL_DIR_INFO:\n\t\treq->FileInformationClass = FILEID_FULL_DIRECTORY_INFORMATION;\n\t\tinfo_buf_size = sizeof(SEARCH_ID_FULL_DIR_INFO) - 1;\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"info level %u isn't supported\\n\",\n\t\t\t srch_inf->info_level);\n\t\trc = -EINVAL;\n\t\tgoto qdir_exit;\n\t}\n\n\treq->FileIndex = cpu_to_le32(index);\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tlen = 0x2;\n\tbufptr = req->Buffer;\n\tmemcpy(bufptr, &asteriks, len);\n\n\treq->FileNameOffset =\n\t\tcpu_to_le16(sizeof(struct smb2_query_directory_req) - 1);\n\treq->FileNameLength = cpu_to_le16(len);\n\t/*\n\t * BB could be 30 bytes or so longer if we used SMB2 specific\n\t * buffer lengths, but this is safe and close enough.\n\t */\n\toutput_size = min_t(unsigned int, output_size, server->maxBuf);\n\toutput_size = min_t(unsigned int, output_size, 2 << 15);\n\treq->OutputBufferLength = cpu_to_le32(output_size);\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tiov[1].iov_base = (char *)(req->Buffer);\n\tiov[1].iov_len = len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\ttrace_smb3_query_dir_enter(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, output_size);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_query_directory_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tif (rc == -ENODATA &&\n\t\t    rsp->sync_hdr.Status == STATUS_NO_MORE_FILES) {\n\t\t\ttrace_smb3_query_dir_done(xid, persistent_fid,\n\t\t\t\ttcon->tid, tcon->ses->Suid, index, 0);\n\t\t\tsrch_inf->endOfSearch = true;\n\t\t\trc = 0;\n\t\t} else {\n\t\t\ttrace_smb3_query_dir_err(xid, persistent_fid, tcon->tid,\n\t\t\t\ttcon->ses->Suid, index, 0, rc);\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_DIRECTORY_HE);\n\t\t}\n\t\tgoto qdir_exit;\n\t}\n\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       info_buf_size);\n\tif (rc) {\n\t\ttrace_smb3_query_dir_err(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, 0, rc);\n\t\tgoto qdir_exit;\n\t}\n\n\tsrch_inf->unicode = true;\n\n\tif (srch_inf->ntwrk_buf_start) {\n\t\tif (srch_inf->smallBuf)\n\t\t\tcifs_small_buf_release(srch_inf->ntwrk_buf_start);\n\t\telse\n\t\t\tcifs_buf_release(srch_inf->ntwrk_buf_start);\n\t}\n\tsrch_inf->ntwrk_buf_start = (char *)rsp;\n\tsrch_inf->srch_entries_start = srch_inf->last_entry =\n\t\t(char *)rsp + le16_to_cpu(rsp->OutputBufferOffset);\n\tend_of_smb = rsp_iov.iov_len + (char *)rsp;\n\tsrch_inf->entries_in_buffer =\n\t\t\tnum_entries(srch_inf->srch_entries_start, end_of_smb,\n\t\t\t\t    &srch_inf->last_entry, info_buf_size);\n\tsrch_inf->index_of_last_entry += srch_inf->entries_in_buffer;\n\tcifs_dbg(FYI, \"num entries %d last_index %lld srch start %p srch end %p\\n\",\n\t\t srch_inf->entries_in_buffer, srch_inf->index_of_last_entry,\n\t\t srch_inf->srch_entries_start, srch_inf->last_entry);\n\tif (resp_buftype == CIFS_LARGE_BUFFER)\n\t\tsrch_inf->smallBuf = false;\n\telse if (resp_buftype == CIFS_SMALL_BUFFER)\n\t\tsrch_inf->smallBuf = true;\n\telse\n\t\tcifs_dbg(VFS, \"illegal search buffer type\\n\");\n\n\ttrace_smb3_query_dir_done(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, srch_inf->entries_in_buffer);\n\treturn rc;\n\nqdir_exit:\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_set_info_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t       u64 persistent_fid, u64 volatile_fid, u32 pid, u8 info_class,\n\t       u8 info_type, u32 additional_info,\n\t\tvoid **data, unsigned int *size)\n{\n\tstruct smb2_set_info_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int i, total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_SET_INFO, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(pid);\n\treq->InfoType = info_type;\n\treq->FileInfoClass = info_class;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\treq->AdditionalInformation = cpu_to_le32(additional_info);\n\n\treq->BufferOffset =\n\t\t\tcpu_to_le16(sizeof(struct smb2_set_info_req) - 1);\n\treq->BufferLength = cpu_to_le32(*size);\n\n\tmemcpy(req->Buffer, *data, *size);\n\ttotal_len += *size;\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tfor (i = 1; i < rqst->rq_nvec; i++) {\n\t\tle32_add_cpu(&req->BufferLength, size[i]);\n\t\tiov[i].iov_base = (char *)data[i];\n\t\tiov[i].iov_len = size[i];\n\t}\n\n\treturn 0;\n}\n\nvoid\nSMB2_set_info_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nstatic int\nsend_set_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t       u64 persistent_fid, u64 volatile_fid, u32 pid, u8 info_class,\n\t       u8 info_type, u32 additional_info, unsigned int num,\n\t\tvoid **data, unsigned int *size)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_set_info_rsp *rsp = NULL;\n\tstruct kvec *iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (!num)\n\t\treturn -EINVAL;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov = kmalloc_array(num, sizeof(struct kvec), GFP_KERNEL);\n\tif (!iov)\n\t\treturn -ENOMEM;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = num;\n\n\trc = SMB2_set_info_init(tcon, &rqst, persistent_fid, volatile_fid, pid,\n\t\t\t\tinfo_class, info_type, additional_info,\n\t\t\t\tdata, size);\n\tif (rc) {\n\t\tkfree(iov);\n\t\treturn rc;\n\t}\n\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\tSMB2_set_info_free(&rqst);\n\trsp = (struct smb2_set_info_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_SET_INFO_HE);\n\t\ttrace_smb3_set_info_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type, rc);\n\t}\n\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(iov);\n\treturn rc;\n}\n\nint\nSMB2_set_eof(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t     u64 volatile_fid, u32 pid, __le64 *eof)\n{\n\tstruct smb2_file_eof_info info;\n\tvoid *data;\n\tunsigned int size;\n\n\tinfo.EndOfFile = *eof;\n\n\tdata = &info;\n\tsize = sizeof(struct smb2_file_eof_info);\n\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tpid, FILE_END_OF_FILE_INFORMATION, SMB2_O_INFO_FILE,\n\t\t\t0, 1, &data, &size);\n}\n\nint\nSMB2_set_acl(const unsigned int xid, struct cifs_tcon *tcon,\n\t\tu64 persistent_fid, u64 volatile_fid,\n\t\tstruct cifs_ntsd *pnntsd, int pacllen, int aclflag)\n{\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tcurrent->tgid, 0, SMB2_O_INFO_SECURITY, aclflag,\n\t\t\t1, (void **)&pnntsd, &pacllen);\n}\n\nint\nSMB2_set_ea(const unsigned int xid, struct cifs_tcon *tcon,\n\t    u64 persistent_fid, u64 volatile_fid,\n\t    struct smb2_file_full_ea_info *buf, int len)\n{\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\tcurrent->tgid, FILE_FULL_EA_INFORMATION, SMB2_O_INFO_FILE,\n\t\t0, 1, (void **)&buf, &len);\n}\n\nint\nSMB2_oplock_break(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t  const u64 persistent_fid, const u64 volatile_fid,\n\t\t  __u8 oplock_level)\n{\n\tstruct smb_rqst rqst;\n\tint rc;\n\tstruct smb2_oplock_break *req = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = CIFS_OBREAK_OP;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"SMB2_oplock_break\\n\");\n\trc = smb2_plain_req_init(SMB2_OPLOCK_BREAK, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->VolatileFid = volatile_fid;\n\treq->PersistentFid = persistent_fid;\n\treq->OplockLevel = oplock_level;\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_OPLOCK_BREAK_HE);\n\t\tcifs_dbg(FYI, \"Send error in Oplock Break = %d\\n\", rc);\n\t}\n\n\treturn rc;\n}\n\nvoid\nsmb2_copy_fs_info_to_kstatfs(struct smb2_fs_full_size_info *pfs_inf,\n\t\t\t     struct kstatfs *kst)\n{\n\tkst->f_bsize = le32_to_cpu(pfs_inf->BytesPerSector) *\n\t\t\t  le32_to_cpu(pfs_inf->SectorsPerAllocationUnit);\n\tkst->f_blocks = le64_to_cpu(pfs_inf->TotalAllocationUnits);\n\tkst->f_bfree  = kst->f_bavail =\n\t\t\tle64_to_cpu(pfs_inf->CallerAvailableAllocationUnits);\n\treturn;\n}\n\nstatic void\ncopy_posix_fs_info_to_kstatfs(FILE_SYSTEM_POSIX_INFO *response_data,\n\t\t\tstruct kstatfs *kst)\n{\n\tkst->f_bsize = le32_to_cpu(response_data->BlockSize);\n\tkst->f_blocks = le64_to_cpu(response_data->TotalBlocks);\n\tkst->f_bfree =  le64_to_cpu(response_data->BlocksAvail);\n\tif (response_data->UserBlocksAvail == cpu_to_le64(-1))\n\t\tkst->f_bavail = kst->f_bfree;\n\telse\n\t\tkst->f_bavail = le64_to_cpu(response_data->UserBlocksAvail);\n\tif (response_data->TotalFileNodes != cpu_to_le64(-1))\n\t\tkst->f_files = le64_to_cpu(response_data->TotalFileNodes);\n\tif (response_data->FreeFileNodes != cpu_to_le64(-1))\n\t\tkst->f_ffree = le64_to_cpu(response_data->FreeFileNodes);\n\n\treturn;\n}\n\nstatic int\nbuild_qfs_info_req(struct kvec *iov, struct cifs_tcon *tcon, int level,\n\t\t   int outbuf_len, u64 persistent_fid, u64 volatile_fid)\n{\n\tint rc;\n\tstruct smb2_query_info_req *req;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Query FSInfo level %d\\n\", level);\n\n\tif ((tcon->ses == NULL) || (tcon->ses->server == NULL))\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_INFO, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->InfoType = SMB2_O_INFO_FILESYSTEM;\n\treq->FileInfoClass = level;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\t/* 1 for pad */\n\treq->InputBufferOffset =\n\t\t\tcpu_to_le16(sizeof(struct smb2_query_info_req) - 1);\n\treq->OutputBufferLength = cpu_to_le32(\n\t\toutbuf_len + sizeof(struct smb2_query_info_rsp) - 1);\n\n\tiov->iov_base = (char *)req;\n\tiov->iov_len = total_len;\n\treturn 0;\n}\n\nint\nSMB311_posix_qfs_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, struct kstatfs *fsdata)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tFILE_SYSTEM_POSIX_INFO *info = NULL;\n\tint flags = 0;\n\n\trc = build_qfs_info_req(&iov, tcon, FS_POSIX_INFORMATION,\n\t\t\t\tsizeof(FILE_SYSTEM_POSIX_INFO),\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto posix_qfsinf_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tinfo = (FILE_SYSTEM_POSIX_INFO *)(\n\t\tle16_to_cpu(rsp->OutputBufferOffset) + (char *)rsp);\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       sizeof(FILE_SYSTEM_POSIX_INFO));\n\tif (!rc)\n\t\tcopy_posix_fs_info_to_kstatfs(info, fsdata);\n\nposix_qfsinf_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nSMB2_QFS_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, struct kstatfs *fsdata)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct smb2_fs_full_size_info *info = NULL;\n\tint flags = 0;\n\n\trc = build_qfs_info_req(&iov, tcon, FS_FULL_SIZE_INFORMATION,\n\t\t\t\tsizeof(struct smb2_fs_full_size_info),\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto qfsinf_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tinfo = (struct smb2_fs_full_size_info *)(\n\t\tle16_to_cpu(rsp->OutputBufferOffset) + (char *)rsp);\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       sizeof(struct smb2_fs_full_size_info));\n\tif (!rc)\n\t\tsmb2_copy_fs_info_to_kstatfs(info, fsdata);\n\nqfsinf_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nSMB2_QFS_attr(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, int level)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype, max_len, min_len;\n\tstruct cifs_ses *ses = tcon->ses;\n\tunsigned int rsp_len, offset;\n\tint flags = 0;\n\n\tif (level == FS_DEVICE_INFORMATION) {\n\t\tmax_len = sizeof(FILE_SYSTEM_DEVICE_INFO);\n\t\tmin_len = sizeof(FILE_SYSTEM_DEVICE_INFO);\n\t} else if (level == FS_ATTRIBUTE_INFORMATION) {\n\t\tmax_len = sizeof(FILE_SYSTEM_ATTRIBUTE_INFO);\n\t\tmin_len = MIN_FS_ATTR_INFO_SIZE;\n\t} else if (level == FS_SECTOR_SIZE_INFORMATION) {\n\t\tmax_len = sizeof(struct smb3_fs_ss_info);\n\t\tmin_len = sizeof(struct smb3_fs_ss_info);\n\t} else if (level == FS_VOLUME_INFORMATION) {\n\t\tmax_len = sizeof(struct smb3_fs_vol_info) + MAX_VOL_LABEL_LEN;\n\t\tmin_len = sizeof(struct smb3_fs_vol_info);\n\t} else {\n\t\tcifs_dbg(FYI, \"Invalid qfsinfo level %d\\n\", level);\n\t\treturn -EINVAL;\n\t}\n\n\trc = build_qfs_info_req(&iov, tcon, level, max_len,\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto qfsattr_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\trsp_len = le32_to_cpu(rsp->OutputBufferLength);\n\toffset = le16_to_cpu(rsp->OutputBufferOffset);\n\trc = smb2_validate_iov(offset, rsp_len, &rsp_iov, min_len);\n\tif (rc)\n\t\tgoto qfsattr_exit;\n\n\tif (level == FS_ATTRIBUTE_INFORMATION)\n\t\tmemcpy(&tcon->fsAttrInfo, offset\n\t\t\t+ (char *)rsp, min_t(unsigned int,\n\t\t\trsp_len, max_len));\n\telse if (level == FS_DEVICE_INFORMATION)\n\t\tmemcpy(&tcon->fsDevInfo, offset\n\t\t\t+ (char *)rsp, sizeof(FILE_SYSTEM_DEVICE_INFO));\n\telse if (level == FS_SECTOR_SIZE_INFORMATION) {\n\t\tstruct smb3_fs_ss_info *ss_info = (struct smb3_fs_ss_info *)\n\t\t\t(offset + (char *)rsp);\n\t\ttcon->ss_flags = le32_to_cpu(ss_info->Flags);\n\t\ttcon->perf_sector_size =\n\t\t\tle32_to_cpu(ss_info->PhysicalBytesPerSectorForPerf);\n\t} else if (level == FS_VOLUME_INFORMATION) {\n\t\tstruct smb3_fs_vol_info *vol_info = (struct smb3_fs_vol_info *)\n\t\t\t(offset + (char *)rsp);\n\t\ttcon->vol_serial_number = vol_info->VolumeSerialNumber;\n\t\ttcon->vol_create_time = vol_info->VolumeCreationTime;\n\t}\n\nqfsattr_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nsmb2_lockv(const unsigned int xid, struct cifs_tcon *tcon,\n\t   const __u64 persist_fid, const __u64 volatile_fid, const __u32 pid,\n\t   const __u32 num_lock, struct smb2_lock_element *buf)\n{\n\tstruct smb_rqst rqst;\n\tint rc = 0;\n\tstruct smb2_lock_req *req = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\tunsigned int count;\n\tint flags = CIFS_NO_RESP;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"smb2_lockv num lock %d\\n\", num_lock);\n\n\trc = smb2_plain_req_init(SMB2_LOCK, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(pid);\n\treq->LockCount = cpu_to_le16(num_lock);\n\n\treq->PersistentFileId = persist_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tcount = num_lock * sizeof(struct smb2_lock_element);\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len - sizeof(struct smb2_lock_element);\n\tiov[1].iov_base = (char *)buf;\n\tiov[1].iov_len = count;\n\n\tcifs_stats_inc(&tcon->stats.cifs_stats.num_locks);\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\trc = cifs_send_recv(xid, tcon->ses, &rqst, &resp_buf_type, flags,\n\t\t\t    &rsp_iov);\n\tcifs_small_buf_release(req);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"Send error in smb2_lockv = %d\\n\", rc);\n\t\tcifs_stats_fail_inc(tcon, SMB2_LOCK_HE);\n\t\ttrace_smb3_lock_err(xid, persist_fid, tcon->tid,\n\t\t\t\t    tcon->ses->Suid, rc);\n\t}\n\n\treturn rc;\n}\n\nint\nSMB2_lock(const unsigned int xid, struct cifs_tcon *tcon,\n\t  const __u64 persist_fid, const __u64 volatile_fid, const __u32 pid,\n\t  const __u64 length, const __u64 offset, const __u32 lock_flags,\n\t  const bool wait)\n{\n\tstruct smb2_lock_element lock;\n\n\tlock.Offset = cpu_to_le64(offset);\n\tlock.Length = cpu_to_le64(length);\n\tlock.Flags = cpu_to_le32(lock_flags);\n\tif (!wait && lock_flags != SMB2_LOCKFLAG_UNLOCK)\n\t\tlock.Flags |= cpu_to_le32(SMB2_LOCKFLAG_FAIL_IMMEDIATELY);\n\n\treturn smb2_lockv(xid, tcon, persist_fid, volatile_fid, pid, 1, &lock);\n}\n\nint\nSMB2_lease_break(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t __u8 *lease_key, const __le32 lease_state)\n{\n\tstruct smb_rqst rqst;\n\tint rc;\n\tstruct smb2_lease_ack *req = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = CIFS_OBREAK_OP;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\t__u64 *please_key_high;\n\t__u64 *please_key_low;\n\n\tcifs_dbg(FYI, \"SMB2_lease_break\\n\");\n\trc = smb2_plain_req_init(SMB2_OPLOCK_BREAK, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\treq->StructureSize = cpu_to_le16(36);\n\ttotal_len += 12;\n\n\tmemcpy(req->LeaseKey, lease_key, 16);\n\treq->LeaseState = lease_state;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tplease_key_low = (__u64 *)lease_key;\n\tplease_key_high = (__u64 *)(lease_key+8);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_OPLOCK_BREAK_HE);\n\t\ttrace_smb3_lease_err(le32_to_cpu(lease_state), tcon->tid,\n\t\t\tses->Suid, *please_key_low, *please_key_high, rc);\n\t\tcifs_dbg(FYI, \"Send error in Lease Break = %d\\n\", rc);\n\t} else\n\t\ttrace_smb3_lease_done(le32_to_cpu(lease_state), tcon->tid,\n\t\t\tses->Suid, *please_key_low, *please_key_high);\n\n\treturn rc;\n}\n"], "fixing_code": ["/*\n *   fs/cifs/smb2pdu.c\n *\n *   Copyright (C) International Business Machines  Corp., 2009, 2013\n *                 Etersoft, 2012\n *   Author(s): Steve French (sfrench@us.ibm.com)\n *              Pavel Shilovsky (pshilovsky@samba.org) 2012\n *\n *   Contains the routines for constructing the SMB2 PDUs themselves\n *\n *   This library is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU Lesser General Public License as published\n *   by the Free Software Foundation; either version 2.1 of the License, or\n *   (at your option) any later version.\n *\n *   This library is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n *   the GNU Lesser General Public License for more details.\n *\n *   You should have received a copy of the GNU Lesser General Public License\n *   along with this library; if not, write to the Free Software\n *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n */\n\n /* SMB2 PDU handling routines here - except for leftovers (eg session setup) */\n /* Note that there are handle based routines which must be\t\t      */\n /* treated slightly differently for reconnection purposes since we never     */\n /* want to reuse a stale file handle and only the caller knows the file info */\n\n#include <linux/fs.h>\n#include <linux/kernel.h>\n#include <linux/vfs.h>\n#include <linux/task_io_accounting_ops.h>\n#include <linux/uaccess.h>\n#include <linux/uuid.h>\n#include <linux/pagemap.h>\n#include <linux/xattr.h>\n#include \"smb2pdu.h\"\n#include \"cifsglob.h\"\n#include \"cifsacl.h\"\n#include \"cifsproto.h\"\n#include \"smb2proto.h\"\n#include \"cifs_unicode.h\"\n#include \"cifs_debug.h\"\n#include \"ntlmssp.h\"\n#include \"smb2status.h\"\n#include \"smb2glob.h\"\n#include \"cifspdu.h\"\n#include \"cifs_spnego.h\"\n#include \"smbdirect.h\"\n#include \"trace.h\"\n#ifdef CONFIG_CIFS_DFS_UPCALL\n#include \"dfs_cache.h\"\n#endif\n\n/*\n *  The following table defines the expected \"StructureSize\" of SMB2 requests\n *  in order by SMB2 command.  This is similar to \"wct\" in SMB/CIFS requests.\n *\n *  Note that commands are defined in smb2pdu.h in le16 but the array below is\n *  indexed by command in host byte order.\n */\nstatic const int smb2_req_struct_sizes[NUMBER_OF_SMB2_COMMANDS] = {\n\t/* SMB2_NEGOTIATE */ 36,\n\t/* SMB2_SESSION_SETUP */ 25,\n\t/* SMB2_LOGOFF */ 4,\n\t/* SMB2_TREE_CONNECT */\t9,\n\t/* SMB2_TREE_DISCONNECT */ 4,\n\t/* SMB2_CREATE */ 57,\n\t/* SMB2_CLOSE */ 24,\n\t/* SMB2_FLUSH */ 24,\n\t/* SMB2_READ */\t49,\n\t/* SMB2_WRITE */ 49,\n\t/* SMB2_LOCK */\t48,\n\t/* SMB2_IOCTL */ 57,\n\t/* SMB2_CANCEL */ 4,\n\t/* SMB2_ECHO */ 4,\n\t/* SMB2_QUERY_DIRECTORY */ 33,\n\t/* SMB2_CHANGE_NOTIFY */ 32,\n\t/* SMB2_QUERY_INFO */ 41,\n\t/* SMB2_SET_INFO */ 33,\n\t/* SMB2_OPLOCK_BREAK */ 24 /* BB this is 36 for LEASE_BREAK variant */\n};\n\nint smb3_encryption_required(const struct cifs_tcon *tcon)\n{\n\tif (!tcon)\n\t\treturn 0;\n\tif ((tcon->ses->session_flags & SMB2_SESSION_FLAG_ENCRYPT_DATA) ||\n\t    (tcon->share_flags & SHI1005_FLAGS_ENCRYPT_DATA))\n\t\treturn 1;\n\tif (tcon->seal &&\n\t    (tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))\n\t\treturn 1;\n\treturn 0;\n}\n\nstatic void\nsmb2_hdr_assemble(struct smb2_sync_hdr *shdr, __le16 smb2_cmd,\n\t\t  const struct cifs_tcon *tcon)\n{\n\tshdr->ProtocolId = SMB2_PROTO_NUMBER;\n\tshdr->StructureSize = cpu_to_le16(64);\n\tshdr->Command = smb2_cmd;\n\tif (tcon && tcon->ses && tcon->ses->server) {\n\t\tstruct TCP_Server_Info *server = tcon->ses->server;\n\n\t\tspin_lock(&server->req_lock);\n\t\t/* Request up to 10 credits but don't go over the limit. */\n\t\tif (server->credits >= server->max_credits)\n\t\t\tshdr->CreditRequest = cpu_to_le16(0);\n\t\telse\n\t\t\tshdr->CreditRequest = cpu_to_le16(\n\t\t\t\tmin_t(int, server->max_credits -\n\t\t\t\t\t\tserver->credits, 10));\n\t\tspin_unlock(&server->req_lock);\n\t} else {\n\t\tshdr->CreditRequest = cpu_to_le16(2);\n\t}\n\tshdr->ProcessId = cpu_to_le32((__u16)current->tgid);\n\n\tif (!tcon)\n\t\tgoto out;\n\n\t/* GLOBAL_CAP_LARGE_MTU will only be set if dialect > SMB2.02 */\n\t/* See sections 2.2.4 and 3.2.4.1.5 of MS-SMB2 */\n\tif ((tcon->ses) && (tcon->ses->server) &&\n\t    (tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_LARGE_MTU))\n\t\tshdr->CreditCharge = cpu_to_le16(1);\n\t/* else CreditCharge MBZ */\n\n\tshdr->TreeId = tcon->tid;\n\t/* Uid is not converted */\n\tif (tcon->ses)\n\t\tshdr->SessionId = tcon->ses->Suid;\n\n\t/*\n\t * If we would set SMB2_FLAGS_DFS_OPERATIONS on open we also would have\n\t * to pass the path on the Open SMB prefixed by \\\\server\\share.\n\t * Not sure when we would need to do the augmented path (if ever) and\n\t * setting this flag breaks the SMB2 open operation since it is\n\t * illegal to send an empty path name (without \\\\server\\share prefix)\n\t * when the DFS flag is set in the SMB open header. We could\n\t * consider setting the flag on all operations other than open\n\t * but it is safer to net set it for now.\n\t */\n/*\tif (tcon->share_flags & SHI1005_FLAGS_DFS)\n\t\tshdr->Flags |= SMB2_FLAGS_DFS_OPERATIONS; */\n\n\tif (tcon->ses && tcon->ses->server && tcon->ses->server->sign &&\n\t    !smb3_encryption_required(tcon))\n\t\tshdr->Flags |= SMB2_FLAGS_SIGNED;\nout:\n\treturn;\n}\n\n#ifdef CONFIG_CIFS_DFS_UPCALL\nstatic int __smb2_reconnect(const struct nls_table *nlsc,\n\t\t\t    struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct dfs_cache_tgt_list tl;\n\tstruct dfs_cache_tgt_iterator *it = NULL;\n\tchar *tree;\n\tconst char *tcp_host;\n\tsize_t tcp_host_len;\n\tconst char *dfs_host;\n\tsize_t dfs_host_len;\n\n\ttree = kzalloc(MAX_TREE_SIZE, GFP_KERNEL);\n\tif (!tree)\n\t\treturn -ENOMEM;\n\n\tif (tcon->ipc) {\n\t\tscnprintf(tree, MAX_TREE_SIZE, \"\\\\\\\\%s\\\\IPC$\",\n\t\t\t  tcon->ses->server->hostname);\n\t\trc = SMB2_tcon(0, tcon->ses, tree, tcon, nlsc);\n\t\tgoto out;\n\t}\n\n\tif (!tcon->dfs_path) {\n\t\trc = SMB2_tcon(0, tcon->ses, tcon->treeName, tcon, nlsc);\n\t\tgoto out;\n\t}\n\n\trc = dfs_cache_noreq_find(tcon->dfs_path + 1, NULL, &tl);\n\tif (rc)\n\t\tgoto out;\n\n\textract_unc_hostname(tcon->ses->server->hostname, &tcp_host,\n\t\t\t     &tcp_host_len);\n\n\tfor (it = dfs_cache_get_tgt_iterator(&tl); it;\n\t     it = dfs_cache_get_next_tgt(&tl, it)) {\n\t\tconst char *tgt = dfs_cache_get_tgt_name(it);\n\n\t\textract_unc_hostname(tgt, &dfs_host, &dfs_host_len);\n\n\t\tif (dfs_host_len != tcp_host_len\n\t\t    || strncasecmp(dfs_host, tcp_host, dfs_host_len) != 0) {\n\t\t\tcifs_dbg(FYI, \"%s: skipping %.*s, doesn't match %.*s\",\n\t\t\t\t __func__,\n\t\t\t\t (int)dfs_host_len, dfs_host,\n\t\t\t\t (int)tcp_host_len, tcp_host);\n\t\t\tcontinue;\n\t\t}\n\n\t\tscnprintf(tree, MAX_TREE_SIZE, \"\\\\%s\", tgt);\n\n\t\trc = SMB2_tcon(0, tcon->ses, tree, tcon, nlsc);\n\t\tif (!rc)\n\t\t\tbreak;\n\t\tif (rc == -EREMOTE)\n\t\t\tbreak;\n\t}\n\n\tif (!rc) {\n\t\tif (it)\n\t\t\trc = dfs_cache_noreq_update_tgthint(tcon->dfs_path + 1,\n\t\t\t\t\t\t\t    it);\n\t\telse\n\t\t\trc = -ENOENT;\n\t}\n\tdfs_cache_free_tgts(&tl);\nout:\n\tkfree(tree);\n\treturn rc;\n}\n#else\nstatic inline int __smb2_reconnect(const struct nls_table *nlsc,\n\t\t\t\t   struct cifs_tcon *tcon)\n{\n\treturn SMB2_tcon(0, tcon->ses, tcon->treeName, tcon, nlsc);\n}\n#endif\n\nstatic int\nsmb2_reconnect(__le16 smb2_command, struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct nls_table *nls_codepage;\n\tstruct cifs_ses *ses;\n\tstruct TCP_Server_Info *server;\n\tint retries;\n\n\t/*\n\t * SMB2s NegProt, SessSetup, Logoff do not have tcon yet so\n\t * check for tcp and smb session status done differently\n\t * for those three - in the calling routine.\n\t */\n\tif (tcon == NULL)\n\t\treturn 0;\n\n\tif (smb2_command == SMB2_TREE_CONNECT)\n\t\treturn 0;\n\n\tif (tcon->tidStatus == CifsExiting) {\n\t\t/*\n\t\t * only tree disconnect, open, and write,\n\t\t * (and ulogoff which does not have tcon)\n\t\t * are allowed as we start force umount.\n\t\t */\n\t\tif ((smb2_command != SMB2_WRITE) &&\n\t\t   (smb2_command != SMB2_CREATE) &&\n\t\t   (smb2_command != SMB2_TREE_DISCONNECT)) {\n\t\t\tcifs_dbg(FYI, \"can not send cmd %d while umounting\\n\",\n\t\t\t\t smb2_command);\n\t\t\treturn -ENODEV;\n\t\t}\n\t}\n\tif ((!tcon->ses) || (tcon->ses->status == CifsExiting) ||\n\t    (!tcon->ses->server))\n\t\treturn -EIO;\n\n\tses = tcon->ses;\n\tserver = ses->server;\n\n\tretries = server->nr_targets;\n\n\t/*\n\t * Give demultiplex thread up to 10 seconds to each target available for\n\t * reconnect -- should be greater than cifs socket timeout which is 7\n\t * seconds.\n\t */\n\twhile (server->tcpStatus == CifsNeedReconnect) {\n\t\t/*\n\t\t * Return to caller for TREE_DISCONNECT and LOGOFF and CLOSE\n\t\t * here since they are implicitly done when session drops.\n\t\t */\n\t\tswitch (smb2_command) {\n\t\t/*\n\t\t * BB Should we keep oplock break and add flush to exceptions?\n\t\t */\n\t\tcase SMB2_TREE_DISCONNECT:\n\t\tcase SMB2_CANCEL:\n\t\tcase SMB2_CLOSE:\n\t\tcase SMB2_OPLOCK_BREAK:\n\t\t\treturn -EAGAIN;\n\t\t}\n\n\t\trc = wait_event_interruptible_timeout(server->response_q,\n\t\t\t\t\t\t      (server->tcpStatus != CifsNeedReconnect),\n\t\t\t\t\t\t      10 * HZ);\n\t\tif (rc < 0) {\n\t\t\tcifs_dbg(FYI, \"%s: aborting reconnect due to a received\"\n\t\t\t\t \" signal by the process\\n\", __func__);\n\t\t\treturn -ERESTARTSYS;\n\t\t}\n\n\t\t/* are we still trying to reconnect? */\n\t\tif (server->tcpStatus != CifsNeedReconnect)\n\t\t\tbreak;\n\n\t\tif (--retries)\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * on \"soft\" mounts we wait once. Hard mounts keep\n\t\t * retrying until process is killed or server comes\n\t\t * back on-line\n\t\t */\n\t\tif (!tcon->retry) {\n\t\t\tcifs_dbg(FYI, \"gave up waiting on reconnect in smb_init\\n\");\n\t\t\treturn -EHOSTDOWN;\n\t\t}\n\t\tretries = server->nr_targets;\n\t}\n\n\tif (!tcon->ses->need_reconnect && !tcon->need_reconnect)\n\t\treturn 0;\n\n\tnls_codepage = load_nls_default();\n\n\t/*\n\t * need to prevent multiple threads trying to simultaneously reconnect\n\t * the same SMB session\n\t */\n\tmutex_lock(&tcon->ses->session_mutex);\n\n\t/*\n\t * Recheck after acquire mutex. If another thread is negotiating\n\t * and the server never sends an answer the socket will be closed\n\t * and tcpStatus set to reconnect.\n\t */\n\tif (server->tcpStatus == CifsNeedReconnect) {\n\t\trc = -EHOSTDOWN;\n\t\tmutex_unlock(&tcon->ses->session_mutex);\n\t\tgoto out;\n\t}\n\n\trc = cifs_negotiate_protocol(0, tcon->ses);\n\tif (!rc && tcon->ses->need_reconnect)\n\t\trc = cifs_setup_session(0, tcon->ses, nls_codepage);\n\n\tif (rc || !tcon->need_reconnect) {\n\t\tmutex_unlock(&tcon->ses->session_mutex);\n\t\tgoto out;\n\t}\n\n\tcifs_mark_open_files_invalid(tcon);\n\tif (tcon->use_persistent)\n\t\ttcon->need_reopen_files = true;\n\n\trc = __smb2_reconnect(nls_codepage, tcon);\n\tmutex_unlock(&tcon->ses->session_mutex);\n\n\tcifs_dbg(FYI, \"reconnect tcon rc = %d\\n\", rc);\n\tif (rc) {\n\t\t/* If sess reconnected but tcon didn't, something strange ... */\n\t\tprintk_once(KERN_WARNING \"reconnect tcon failed rc = %d\\n\", rc);\n\t\tgoto out;\n\t}\n\n\tif (smb2_command != SMB2_INTERNAL_CMD)\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 0);\n\n\tatomic_inc(&tconInfoReconnectCount);\nout:\n\t/*\n\t * Check if handle based operation so we know whether we can continue\n\t * or not without returning to caller to reset file handle.\n\t */\n\t/*\n\t * BB Is flush done by server on drop of tcp session? Should we special\n\t * case it and skip above?\n\t */\n\tswitch (smb2_command) {\n\tcase SMB2_FLUSH:\n\tcase SMB2_READ:\n\tcase SMB2_WRITE:\n\tcase SMB2_LOCK:\n\tcase SMB2_IOCTL:\n\tcase SMB2_QUERY_DIRECTORY:\n\tcase SMB2_CHANGE_NOTIFY:\n\tcase SMB2_QUERY_INFO:\n\tcase SMB2_SET_INFO:\n\t\trc = -EAGAIN;\n\t}\n\tunload_nls(nls_codepage);\n\treturn rc;\n}\n\nstatic void\nfill_small_buf(__le16 smb2_command, struct cifs_tcon *tcon, void *buf,\n\t       unsigned int *total_len)\n{\n\tstruct smb2_sync_pdu *spdu = (struct smb2_sync_pdu *)buf;\n\t/* lookup word count ie StructureSize from table */\n\t__u16 parmsize = smb2_req_struct_sizes[le16_to_cpu(smb2_command)];\n\n\t/*\n\t * smaller than SMALL_BUFFER_SIZE but bigger than fixed area of\n\t * largest operations (Create)\n\t */\n\tmemset(buf, 0, 256);\n\n\tsmb2_hdr_assemble(&spdu->sync_hdr, smb2_command, tcon);\n\tspdu->StructureSize2 = cpu_to_le16(parmsize);\n\n\t*total_len = parmsize + sizeof(struct smb2_sync_hdr);\n}\n\n/*\n * Allocate and return pointer to an SMB request hdr, and set basic\n * SMB information in the SMB header. If the return code is zero, this\n * function must have filled in request_buf pointer.\n */\nstatic int\nsmb2_plain_req_init(__le16 smb2_command, struct cifs_tcon *tcon,\n\t\t    void **request_buf, unsigned int *total_len)\n{\n\tint rc;\n\n\trc = smb2_reconnect(smb2_command, tcon);\n\tif (rc)\n\t\treturn rc;\n\n\t/* BB eventually switch this to SMB2 specific small buf size */\n\tif (smb2_command == SMB2_SET_INFO)\n\t\t*request_buf = cifs_buf_get();\n\telse\n\t\t*request_buf = cifs_small_buf_get();\n\tif (*request_buf == NULL) {\n\t\t/* BB should we add a retry in here if not a writepage? */\n\t\treturn -ENOMEM;\n\t}\n\n\tfill_small_buf(smb2_command, tcon,\n\t\t       (struct smb2_sync_hdr *)(*request_buf),\n\t\t       total_len);\n\n\tif (tcon != NULL) {\n\t\tuint16_t com_code = le16_to_cpu(smb2_command);\n\t\tcifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_sent[com_code]);\n\t\tcifs_stats_inc(&tcon->num_smbs_sent);\n\t}\n\n\treturn rc;\n}\n\n\n#define SMB2_PREAUTH_INTEGRITY_CAPABILITIES\tcpu_to_le16(1)\n#define SMB2_ENCRYPTION_CAPABILITIES\t\tcpu_to_le16(2)\n#define SMB2_POSIX_EXTENSIONS_AVAILABLE\t\tcpu_to_le16(0x100)\n\nstatic void\nbuild_preauth_ctxt(struct smb2_preauth_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_PREAUTH_INTEGRITY_CAPABILITIES;\n\tpneg_ctxt->DataLength = cpu_to_le16(38);\n\tpneg_ctxt->HashAlgorithmCount = cpu_to_le16(1);\n\tpneg_ctxt->SaltLength = cpu_to_le16(SMB311_SALT_SIZE);\n\tget_random_bytes(pneg_ctxt->Salt, SMB311_SALT_SIZE);\n\tpneg_ctxt->HashAlgorithms = SMB2_PREAUTH_INTEGRITY_SHA512;\n}\n\nstatic void\nbuild_encrypt_ctxt(struct smb2_encryption_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_ENCRYPTION_CAPABILITIES;\n\tpneg_ctxt->DataLength = cpu_to_le16(4); /* Cipher Count + le16 cipher */\n\tpneg_ctxt->CipherCount = cpu_to_le16(1);\n/* pneg_ctxt->Ciphers[0] = SMB2_ENCRYPTION_AES128_GCM;*/ /* not supported yet */\n\tpneg_ctxt->Ciphers[0] = SMB2_ENCRYPTION_AES128_CCM;\n}\n\nstatic void\nbuild_posix_ctxt(struct smb2_posix_neg_context *pneg_ctxt)\n{\n\tpneg_ctxt->ContextType = SMB2_POSIX_EXTENSIONS_AVAILABLE;\n\tpneg_ctxt->DataLength = cpu_to_le16(POSIX_CTXT_DATA_LEN);\n\t/* SMB2_CREATE_TAG_POSIX is \"0x93AD25509CB411E7B42383DE968BCD7C\" */\n\tpneg_ctxt->Name[0] = 0x93;\n\tpneg_ctxt->Name[1] = 0xAD;\n\tpneg_ctxt->Name[2] = 0x25;\n\tpneg_ctxt->Name[3] = 0x50;\n\tpneg_ctxt->Name[4] = 0x9C;\n\tpneg_ctxt->Name[5] = 0xB4;\n\tpneg_ctxt->Name[6] = 0x11;\n\tpneg_ctxt->Name[7] = 0xE7;\n\tpneg_ctxt->Name[8] = 0xB4;\n\tpneg_ctxt->Name[9] = 0x23;\n\tpneg_ctxt->Name[10] = 0x83;\n\tpneg_ctxt->Name[11] = 0xDE;\n\tpneg_ctxt->Name[12] = 0x96;\n\tpneg_ctxt->Name[13] = 0x8B;\n\tpneg_ctxt->Name[14] = 0xCD;\n\tpneg_ctxt->Name[15] = 0x7C;\n}\n\nstatic void\nassemble_neg_contexts(struct smb2_negotiate_req *req,\n\t\t      unsigned int *total_len)\n{\n\tchar *pneg_ctxt = (char *)req;\n\tunsigned int ctxt_len;\n\n\tif (*total_len > 200) {\n\t\t/* In case length corrupted don't want to overrun smb buffer */\n\t\tcifs_dbg(VFS, \"Bad frame length assembling neg contexts\\n\");\n\t\treturn;\n\t}\n\n\t/*\n\t * round up total_len of fixed part of SMB3 negotiate request to 8\n\t * byte boundary before adding negotiate contexts\n\t */\n\t*total_len = roundup(*total_len, 8);\n\n\tpneg_ctxt = (*total_len) + (char *)req;\n\treq->NegotiateContextOffset = cpu_to_le32(*total_len);\n\n\tbuild_preauth_ctxt((struct smb2_preauth_neg_context *)pneg_ctxt);\n\tctxt_len = DIV_ROUND_UP(sizeof(struct smb2_preauth_neg_context), 8) * 8;\n\t*total_len += ctxt_len;\n\tpneg_ctxt += ctxt_len;\n\n\tbuild_encrypt_ctxt((struct smb2_encryption_neg_context *)pneg_ctxt);\n\tctxt_len = DIV_ROUND_UP(sizeof(struct smb2_encryption_neg_context), 8) * 8;\n\t*total_len += ctxt_len;\n\tpneg_ctxt += ctxt_len;\n\n\tbuild_posix_ctxt((struct smb2_posix_neg_context *)pneg_ctxt);\n\t*total_len += sizeof(struct smb2_posix_neg_context);\n\n\treq->NegotiateContextCount = cpu_to_le16(3);\n}\n\nstatic void decode_preauth_context(struct smb2_preauth_neg_context *ctxt)\n{\n\tunsigned int len = le16_to_cpu(ctxt->DataLength);\n\n\t/* If invalid preauth context warn but use what we requested, SHA-512 */\n\tif (len < MIN_PREAUTH_CTXT_DATA_LEN) {\n\t\tprintk_once(KERN_WARNING \"server sent bad preauth context\\n\");\n\t\treturn;\n\t}\n\tif (le16_to_cpu(ctxt->HashAlgorithmCount) != 1)\n\t\tprintk_once(KERN_WARNING \"illegal SMB3 hash algorithm count\\n\");\n\tif (ctxt->HashAlgorithms != SMB2_PREAUTH_INTEGRITY_SHA512)\n\t\tprintk_once(KERN_WARNING \"unknown SMB3 hash algorithm\\n\");\n}\n\nstatic int decode_encrypt_ctx(struct TCP_Server_Info *server,\n\t\t\t      struct smb2_encryption_neg_context *ctxt)\n{\n\tunsigned int len = le16_to_cpu(ctxt->DataLength);\n\n\tcifs_dbg(FYI, \"decode SMB3.11 encryption neg context of len %d\\n\", len);\n\tif (len < MIN_ENCRYPT_CTXT_DATA_LEN) {\n\t\tprintk_once(KERN_WARNING \"server sent bad crypto ctxt len\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tif (le16_to_cpu(ctxt->CipherCount) != 1) {\n\t\tprintk_once(KERN_WARNING \"illegal SMB3.11 cipher count\\n\");\n\t\treturn -EINVAL;\n\t}\n\tcifs_dbg(FYI, \"SMB311 cipher type:%d\\n\", le16_to_cpu(ctxt->Ciphers[0]));\n\tif ((ctxt->Ciphers[0] != SMB2_ENCRYPTION_AES128_CCM) &&\n\t    (ctxt->Ciphers[0] != SMB2_ENCRYPTION_AES128_GCM)) {\n\t\tprintk_once(KERN_WARNING \"invalid SMB3.11 cipher returned\\n\");\n\t\treturn -EINVAL;\n\t}\n\tserver->cipher_type = ctxt->Ciphers[0];\n\tserver->capabilities |= SMB2_GLOBAL_CAP_ENCRYPTION;\n\treturn 0;\n}\n\nstatic int smb311_decode_neg_context(struct smb2_negotiate_rsp *rsp,\n\t\t\t\t     struct TCP_Server_Info *server,\n\t\t\t\t     unsigned int len_of_smb)\n{\n\tstruct smb2_neg_context *pctx;\n\tunsigned int offset = le32_to_cpu(rsp->NegotiateContextOffset);\n\tunsigned int ctxt_cnt = le16_to_cpu(rsp->NegotiateContextCount);\n\tunsigned int len_of_ctxts, i;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"decoding %d negotiate contexts\\n\", ctxt_cnt);\n\tif (len_of_smb <= offset) {\n\t\tcifs_dbg(VFS, \"Invalid response: negotiate context offset\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tlen_of_ctxts = len_of_smb - offset;\n\n\tfor (i = 0; i < ctxt_cnt; i++) {\n\t\tint clen;\n\t\t/* check that offset is not beyond end of SMB */\n\t\tif (len_of_ctxts == 0)\n\t\t\tbreak;\n\n\t\tif (len_of_ctxts < sizeof(struct smb2_neg_context))\n\t\t\tbreak;\n\n\t\tpctx = (struct smb2_neg_context *)(offset + (char *)rsp);\n\t\tclen = le16_to_cpu(pctx->DataLength);\n\t\tif (clen > len_of_ctxts)\n\t\t\tbreak;\n\n\t\tif (pctx->ContextType == SMB2_PREAUTH_INTEGRITY_CAPABILITIES)\n\t\t\tdecode_preauth_context(\n\t\t\t\t(struct smb2_preauth_neg_context *)pctx);\n\t\telse if (pctx->ContextType == SMB2_ENCRYPTION_CAPABILITIES)\n\t\t\trc = decode_encrypt_ctx(server,\n\t\t\t\t(struct smb2_encryption_neg_context *)pctx);\n\t\telse if (pctx->ContextType == SMB2_POSIX_EXTENSIONS_AVAILABLE)\n\t\t\tserver->posix_ext_supported = true;\n\t\telse\n\t\t\tcifs_dbg(VFS, \"unknown negcontext of type %d ignored\\n\",\n\t\t\t\tle16_to_cpu(pctx->ContextType));\n\n\t\tif (rc)\n\t\t\tbreak;\n\t\t/* offsets must be 8 byte aligned */\n\t\tclen = (clen + 7) & ~0x7;\n\t\toffset += clen + sizeof(struct smb2_neg_context);\n\t\tlen_of_ctxts -= clen;\n\t}\n\treturn rc;\n}\n\nstatic struct create_posix *\ncreate_posix_buf(umode_t mode)\n{\n\tstruct create_posix *buf;\n\n\tbuf = kzalloc(sizeof(struct create_posix),\n\t\t\tGFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset =\n\t\tcpu_to_le16(offsetof(struct create_posix, Mode));\n\tbuf->ccontext.DataLength = cpu_to_le32(4);\n\tbuf->ccontext.NameOffset =\n\t\tcpu_to_le16(offsetof(struct create_posix, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(16);\n\n\t/* SMB2_CREATE_TAG_POSIX is \"0x93AD25509CB411E7B42383DE968BCD7C\" */\n\tbuf->Name[0] = 0x93;\n\tbuf->Name[1] = 0xAD;\n\tbuf->Name[2] = 0x25;\n\tbuf->Name[3] = 0x50;\n\tbuf->Name[4] = 0x9C;\n\tbuf->Name[5] = 0xB4;\n\tbuf->Name[6] = 0x11;\n\tbuf->Name[7] = 0xE7;\n\tbuf->Name[8] = 0xB4;\n\tbuf->Name[9] = 0x23;\n\tbuf->Name[10] = 0x83;\n\tbuf->Name[11] = 0xDE;\n\tbuf->Name[12] = 0x96;\n\tbuf->Name[13] = 0x8B;\n\tbuf->Name[14] = 0xCD;\n\tbuf->Name[15] = 0x7C;\n\tbuf->Mode = cpu_to_le32(mode);\n\tcifs_dbg(FYI, \"mode on posix create 0%o\", mode);\n\treturn buf;\n}\n\nstatic int\nadd_posix_context(struct kvec *iov, unsigned int *num_iovec, umode_t mode)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_posix_buf(mode);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_posix);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_posix));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\n\n/*\n *\n *\tSMB2 Worker functions follow:\n *\n *\tThe general structure of the worker functions is:\n *\t1) Call smb2_init (assembles SMB2 header)\n *\t2) Initialize SMB2 command specific fields in fixed length area of SMB\n *\t3) Call smb_sendrcv2 (sends request on socket and waits for response)\n *\t4) Decode SMB2 command specific fields in the fixed length area\n *\t5) Decode variable length data area (if any for this SMB2 command type)\n *\t6) Call free smb buffer\n *\t7) return\n *\n */\n\nint\nSMB2_negotiate(const unsigned int xid, struct cifs_ses *ses)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_negotiate_req *req;\n\tstruct smb2_negotiate_rsp *rsp;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct TCP_Server_Info *server = ses->server;\n\tint blob_offset, blob_length;\n\tchar *security_blob;\n\tint flags = CIFS_NEG_OP;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Negotiate protocol\\n\");\n\n\tif (!server) {\n\t\tWARN(1, \"%s: server is NULL!\\n\", __func__);\n\t\treturn -EIO;\n\t}\n\n\trc = smb2_plain_req_init(SMB2_NEGOTIATE, NULL, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.SessionId = 0;\n\n\tmemset(server->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);\n\tmemset(ses->preauth_sha_hash, 0, SMB2_PREAUTH_HASH_SIZE);\n\n\tif (strcmp(ses->server->vals->version_string,\n\t\t   SMB3ANY_VERSION_STRING) == 0) {\n\t\treq->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);\n\t\treq->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);\n\t\treq->DialectCount = cpu_to_le16(2);\n\t\ttotal_len += 4;\n\t} else if (strcmp(ses->server->vals->version_string,\n\t\t   SMBDEFAULT_VERSION_STRING) == 0) {\n\t\treq->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);\n\t\treq->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);\n\t\treq->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);\n\t\treq->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);\n\t\treq->DialectCount = cpu_to_le16(4);\n\t\ttotal_len += 8;\n\t} else {\n\t\t/* otherwise send specific dialect */\n\t\treq->Dialects[0] = cpu_to_le16(ses->server->vals->protocol_id);\n\t\treq->DialectCount = cpu_to_le16(1);\n\t\ttotal_len += 2;\n\t}\n\n\t/* only one of SMB2 signing flags may be set in SMB2 request */\n\tif (ses->sign)\n\t\treq->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_REQUIRED);\n\telse if (global_secflags & CIFSSEC_MAY_SIGN)\n\t\treq->SecurityMode = cpu_to_le16(SMB2_NEGOTIATE_SIGNING_ENABLED);\n\telse\n\t\treq->SecurityMode = 0;\n\n\treq->Capabilities = cpu_to_le32(ses->server->vals->req_capabilities);\n\n\t/* ClientGUID must be zero for SMB2.02 dialect */\n\tif (ses->server->vals->protocol_id == SMB20_PROT_ID)\n\t\tmemset(req->ClientGUID, 0, SMB2_CLIENT_GUID_SIZE);\n\telse {\n\t\tmemcpy(req->ClientGUID, server->client_guid,\n\t\t\tSMB2_CLIENT_GUID_SIZE);\n\t\tif ((ses->server->vals->protocol_id == SMB311_PROT_ID) ||\n\t\t    (strcmp(ses->server->vals->version_string,\n\t\t     SMBDEFAULT_VERSION_STRING) == 0))\n\t\t\tassemble_neg_contexts(req, &total_len);\n\t}\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_negotiate_rsp *)rsp_iov.iov_base;\n\t/*\n\t * No tcon so can't do\n\t * cifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_fail[SMB2...]);\n\t */\n\tif (rc == -EOPNOTSUPP) {\n\t\tcifs_dbg(VFS, \"Dialect not supported by server. Consider \"\n\t\t\t\"specifying vers=1.0 or vers=2.0 on mount for accessing\"\n\t\t\t\" older servers\\n\");\n\t\tgoto neg_exit;\n\t} else if (rc != 0)\n\t\tgoto neg_exit;\n\n\tif (strcmp(ses->server->vals->version_string,\n\t\t   SMB3ANY_VERSION_STRING) == 0) {\n\t\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2.1 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t}\n\t} else if (strcmp(ses->server->vals->version_string,\n\t\t   SMBDEFAULT_VERSION_STRING) == 0) {\n\t\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID)) {\n\t\t\tcifs_dbg(VFS,\n\t\t\t\t\"SMB2 dialect returned but not requested\\n\");\n\t\t\treturn -EIO;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID)) {\n\t\t\t/* ops set to 3.0 by default for default so update */\n\t\t\tses->server->ops = &smb21_operations;\n\t\t} else if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))\n\t\t\tses->server->ops = &smb311_operations;\n\t} else if (le16_to_cpu(rsp->DialectRevision) !=\n\t\t\t\tses->server->vals->protocol_id) {\n\t\t/* if requested single dialect ensure returned dialect matched */\n\t\tcifs_dbg(VFS, \"Illegal 0x%x dialect returned: not requested\\n\",\n\t\t\tle16_to_cpu(rsp->DialectRevision));\n\t\treturn -EIO;\n\t}\n\n\tcifs_dbg(FYI, \"mode 0x%x\\n\", rsp->SecurityMode);\n\n\tif (rsp->DialectRevision == cpu_to_le16(SMB20_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb2.0 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB21_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb2.1 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB30_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.0 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB302_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.02 dialect\\n\");\n\telse if (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID))\n\t\tcifs_dbg(FYI, \"negotiated smb3.1.1 dialect\\n\");\n\telse {\n\t\tcifs_dbg(VFS, \"Illegal dialect returned by server 0x%x\\n\",\n\t\t\t le16_to_cpu(rsp->DialectRevision));\n\t\trc = -EIO;\n\t\tgoto neg_exit;\n\t}\n\tserver->dialect = le16_to_cpu(rsp->DialectRevision);\n\n\t/*\n\t * Keep a copy of the hash after negprot. This hash will be\n\t * the starting hash value for all sessions made from this\n\t * server.\n\t */\n\tmemcpy(server->preauth_sha_hash, ses->preauth_sha_hash,\n\t       SMB2_PREAUTH_HASH_SIZE);\n\n\t/* SMB2 only has an extended negflavor */\n\tserver->negflavor = CIFS_NEGFLAVOR_EXTENDED;\n\t/* set it to the maximum buffer size value we can send with 1 credit */\n\tserver->maxBuf = min_t(unsigned int, le32_to_cpu(rsp->MaxTransactSize),\n\t\t\t       SMB2_MAX_BUFFER_SIZE);\n\tserver->max_read = le32_to_cpu(rsp->MaxReadSize);\n\tserver->max_write = le32_to_cpu(rsp->MaxWriteSize);\n\tserver->sec_mode = le16_to_cpu(rsp->SecurityMode);\n\tif ((server->sec_mode & SMB2_SEC_MODE_FLAGS_ALL) != server->sec_mode)\n\t\tcifs_dbg(FYI, \"Server returned unexpected security mode 0x%x\\n\",\n\t\t\t\tserver->sec_mode);\n\tserver->capabilities = le32_to_cpu(rsp->Capabilities);\n\t/* Internal types */\n\tserver->capabilities |= SMB2_NT_FIND | SMB2_LARGE_FILES;\n\n\tsecurity_blob = smb2_get_data_area_len(&blob_offset, &blob_length,\n\t\t\t\t\t       (struct smb2_sync_hdr *)rsp);\n\t/*\n\t * See MS-SMB2 section 2.2.4: if no blob, client picks default which\n\t * for us will be\n\t *\tses->sectype = RawNTLMSSP;\n\t * but for time being this is our only auth choice so doesn't matter.\n\t * We just found a server which sets blob length to zero expecting raw.\n\t */\n\tif (blob_length == 0) {\n\t\tcifs_dbg(FYI, \"missing security blob on negprot\\n\");\n\t\tserver->sec_ntlmssp = true;\n\t}\n\n\trc = cifs_enable_signing(server, ses->sign);\n\tif (rc)\n\t\tgoto neg_exit;\n\tif (blob_length) {\n\t\trc = decode_negTokenInit(security_blob, blob_length, server);\n\t\tif (rc == 1)\n\t\t\trc = 0;\n\t\telse if (rc == 0)\n\t\t\trc = -EIO;\n\t}\n\n\tif (rsp->DialectRevision == cpu_to_le16(SMB311_PROT_ID)) {\n\t\tif (rsp->NegotiateContextCount)\n\t\t\trc = smb311_decode_neg_context(rsp, server,\n\t\t\t\t\t\t       rsp_iov.iov_len);\n\t\telse\n\t\t\tcifs_dbg(VFS, \"Missing expected negotiate contexts\\n\");\n\t}\nneg_exit:\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint smb3_validate_negotiate(const unsigned int xid, struct cifs_tcon *tcon)\n{\n\tint rc;\n\tstruct validate_negotiate_info_req *pneg_inbuf;\n\tstruct validate_negotiate_info_rsp *pneg_rsp = NULL;\n\tu32 rsplen;\n\tu32 inbuflen; /* max of 4 dialects */\n\n\tcifs_dbg(FYI, \"validate negotiate\\n\");\n\n\t/* In SMB3.11 preauth integrity supersedes validate negotiate */\n\tif (tcon->ses->server->dialect == SMB311_PROT_ID)\n\t\treturn 0;\n\n\t/*\n\t * validation ioctl must be signed, so no point sending this if we\n\t * can not sign it (ie are not known user).  Even if signing is not\n\t * required (enabled but not negotiated), in those cases we selectively\n\t * sign just this, the first and only signed request on a connection.\n\t * Having validation of negotiate info  helps reduce attack vectors.\n\t */\n\tif (tcon->ses->session_flags & SMB2_SESSION_FLAG_IS_GUEST)\n\t\treturn 0; /* validation requires signing */\n\n\tif (tcon->ses->user_name == NULL) {\n\t\tcifs_dbg(FYI, \"Can't validate negotiate: null user mount\\n\");\n\t\treturn 0; /* validation requires signing */\n\t}\n\n\tif (tcon->ses->session_flags & SMB2_SESSION_FLAG_IS_NULL)\n\t\tcifs_dbg(VFS, \"Unexpected null user (anonymous) auth flag sent by server\\n\");\n\n\tpneg_inbuf = kmalloc(sizeof(*pneg_inbuf), GFP_NOFS);\n\tif (!pneg_inbuf)\n\t\treturn -ENOMEM;\n\n\tpneg_inbuf->Capabilities =\n\t\t\tcpu_to_le32(tcon->ses->server->vals->req_capabilities);\n\tmemcpy(pneg_inbuf->Guid, tcon->ses->server->client_guid,\n\t\t\t\t\tSMB2_CLIENT_GUID_SIZE);\n\n\tif (tcon->ses->sign)\n\t\tpneg_inbuf->SecurityMode =\n\t\t\tcpu_to_le16(SMB2_NEGOTIATE_SIGNING_REQUIRED);\n\telse if (global_secflags & CIFSSEC_MAY_SIGN)\n\t\tpneg_inbuf->SecurityMode =\n\t\t\tcpu_to_le16(SMB2_NEGOTIATE_SIGNING_ENABLED);\n\telse\n\t\tpneg_inbuf->SecurityMode = 0;\n\n\n\tif (strcmp(tcon->ses->server->vals->version_string,\n\t\tSMB3ANY_VERSION_STRING) == 0) {\n\t\tpneg_inbuf->Dialects[0] = cpu_to_le16(SMB30_PROT_ID);\n\t\tpneg_inbuf->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(2);\n\t\t/* structure is big enough for 3 dialects, sending only 2 */\n\t\tinbuflen = sizeof(*pneg_inbuf) -\n\t\t\t\t(2 * sizeof(pneg_inbuf->Dialects[0]));\n\t} else if (strcmp(tcon->ses->server->vals->version_string,\n\t\tSMBDEFAULT_VERSION_STRING) == 0) {\n\t\tpneg_inbuf->Dialects[0] = cpu_to_le16(SMB21_PROT_ID);\n\t\tpneg_inbuf->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);\n\t\tpneg_inbuf->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);\n\t\tpneg_inbuf->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(4);\n\t\t/* structure is big enough for 3 dialects */\n\t\tinbuflen = sizeof(*pneg_inbuf);\n\t} else {\n\t\t/* otherwise specific dialect was requested */\n\t\tpneg_inbuf->Dialects[0] =\n\t\t\tcpu_to_le16(tcon->ses->server->vals->protocol_id);\n\t\tpneg_inbuf->DialectCount = cpu_to_le16(1);\n\t\t/* structure is big enough for 3 dialects, sending only 1 */\n\t\tinbuflen = sizeof(*pneg_inbuf) -\n\t\t\t\tsizeof(pneg_inbuf->Dialects[0]) * 2;\n\t}\n\n\trc = SMB2_ioctl(xid, tcon, NO_FILE_ID, NO_FILE_ID,\n\t\tFSCTL_VALIDATE_NEGOTIATE_INFO, true /* is_fsctl */,\n\t\t(char *)pneg_inbuf, inbuflen, CIFSMaxBufSize,\n\t\t(char **)&pneg_rsp, &rsplen);\n\tif (rc == -EOPNOTSUPP) {\n\t\t/*\n\t\t * Old Windows versions or Netapp SMB server can return\n\t\t * not supported error. Client should accept it.\n\t\t */\n\t\tcifs_dbg(VFS, \"Server does not support validate negotiate\\n\");\n\t\treturn 0;\n\t} else if (rc != 0) {\n\t\tcifs_dbg(VFS, \"validate protocol negotiate failed: %d\\n\", rc);\n\t\trc = -EIO;\n\t\tgoto out_free_inbuf;\n\t}\n\n\trc = -EIO;\n\tif (rsplen != sizeof(*pneg_rsp)) {\n\t\tcifs_dbg(VFS, \"invalid protocol negotiate response size: %d\\n\",\n\t\t\t rsplen);\n\n\t\t/* relax check since Mac returns max bufsize allowed on ioctl */\n\t\tif (rsplen > CIFSMaxBufSize || rsplen < sizeof(*pneg_rsp))\n\t\t\tgoto out_free_rsp;\n\t}\n\n\t/* check validate negotiate info response matches what we got earlier */\n\tif (pneg_rsp->Dialect != cpu_to_le16(tcon->ses->server->dialect))\n\t\tgoto vneg_out;\n\n\tif (pneg_rsp->SecurityMode != cpu_to_le16(tcon->ses->server->sec_mode))\n\t\tgoto vneg_out;\n\n\t/* do not validate server guid because not saved at negprot time yet */\n\n\tif ((le32_to_cpu(pneg_rsp->Capabilities) | SMB2_NT_FIND |\n\t      SMB2_LARGE_FILES) != tcon->ses->server->capabilities)\n\t\tgoto vneg_out;\n\n\t/* validate negotiate successful */\n\trc = 0;\n\tcifs_dbg(FYI, \"validate negotiate info successful\\n\");\n\tgoto out_free_rsp;\n\nvneg_out:\n\tcifs_dbg(VFS, \"protocol revalidation - security settings mismatch\\n\");\nout_free_rsp:\n\tkfree(pneg_rsp);\nout_free_inbuf:\n\tkfree(pneg_inbuf);\n\treturn rc;\n}\n\nenum securityEnum\nsmb2_select_sectype(struct TCP_Server_Info *server, enum securityEnum requested)\n{\n\tswitch (requested) {\n\tcase Kerberos:\n\tcase RawNTLMSSP:\n\t\treturn requested;\n\tcase NTLMv2:\n\t\treturn RawNTLMSSP;\n\tcase Unspecified:\n\t\tif (server->sec_ntlmssp &&\n\t\t\t(global_secflags & CIFSSEC_MAY_NTLMSSP))\n\t\t\treturn RawNTLMSSP;\n\t\tif ((server->sec_kerberos || server->sec_mskerberos) &&\n\t\t\t(global_secflags & CIFSSEC_MAY_KRB5))\n\t\t\treturn Kerberos;\n\t\t/* Fallthrough */\n\tdefault:\n\t\treturn Unspecified;\n\t}\n}\n\nstruct SMB2_sess_data {\n\tunsigned int xid;\n\tstruct cifs_ses *ses;\n\tstruct nls_table *nls_cp;\n\tvoid (*func)(struct SMB2_sess_data *);\n\tint result;\n\tu64 previous_session;\n\n\t/* we will send the SMB in three pieces:\n\t * a fixed length beginning part, an optional\n\t * SPNEGO blob (which can be zero length), and a\n\t * last part which will include the strings\n\t * and rest of bcc area. This allows us to avoid\n\t * a large buffer 17K allocation\n\t */\n\tint buf0_type;\n\tstruct kvec iov[2];\n};\n\nstatic int\nSMB2_sess_alloc_buffer(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_req *req;\n\tstruct TCP_Server_Info *server = ses->server;\n\tunsigned int total_len;\n\n\trc = smb2_plain_req_init(SMB2_SESSION_SETUP, NULL, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\t/* First session, not a reauthenticate */\n\treq->sync_hdr.SessionId = 0;\n\n\t/* if reconnect, we need to send previous sess id, otherwise it is 0 */\n\treq->PreviousSessionId = sess_data->previous_session;\n\n\treq->Flags = 0; /* MBZ */\n\n\t/* enough to enable echos and oplocks and one max size write */\n\treq->sync_hdr.CreditRequest = cpu_to_le16(130);\n\n\t/* only one of SMB2 signing flags may be set in SMB2 request */\n\tif (server->sign)\n\t\treq->SecurityMode = SMB2_NEGOTIATE_SIGNING_REQUIRED;\n\telse if (global_secflags & CIFSSEC_MAY_SIGN) /* one flag unlike MUST_ */\n\t\treq->SecurityMode = SMB2_NEGOTIATE_SIGNING_ENABLED;\n\telse\n\t\treq->SecurityMode = 0;\n\n\treq->Capabilities = 0;\n\treq->Channel = 0; /* MBZ */\n\n\tsess_data->iov[0].iov_base = (char *)req;\n\t/* 1 for pad */\n\tsess_data->iov[0].iov_len = total_len - 1;\n\t/*\n\t * This variable will be used to clear the buffer\n\t * allocated above in case of any error in the calling function.\n\t */\n\tsess_data->buf0_type = CIFS_SMALL_BUFFER;\n\n\treturn 0;\n}\n\nstatic void\nSMB2_sess_free_buffer(struct SMB2_sess_data *sess_data)\n{\n\tfree_rsp_buf(sess_data->buf0_type, sess_data->iov[0].iov_base);\n\tsess_data->buf0_type = CIFS_NO_BUFFER;\n}\n\nstatic int\nSMB2_sess_sendreceive(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct smb_rqst rqst;\n\tstruct smb2_sess_setup_req *req = sess_data->iov[0].iov_base;\n\tstruct kvec rsp_iov = { NULL, 0 };\n\n\t/* Testing shows that buffer offset must be at location of Buffer[0] */\n\treq->SecurityBufferOffset =\n\t\tcpu_to_le16(sizeof(struct smb2_sess_setup_req) - 1 /* pad */);\n\treq->SecurityBufferLength = cpu_to_le16(sess_data->iov[1].iov_len);\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = sess_data->iov;\n\trqst.rq_nvec = 2;\n\n\t/* BB add code to build os and lm fields */\n\trc = cifs_send_recv(sess_data->xid, sess_data->ses,\n\t\t\t    &rqst,\n\t\t\t    &sess_data->buf0_type,\n\t\t\t    CIFS_LOG_ERROR | CIFS_NEG_OP, &rsp_iov);\n\tcifs_small_buf_release(sess_data->iov[0].iov_base);\n\tmemcpy(&sess_data->iov[0], &rsp_iov, sizeof(struct kvec));\n\n\treturn rc;\n}\n\nstatic int\nSMB2_sess_establish_session(struct SMB2_sess_data *sess_data)\n{\n\tint rc = 0;\n\tstruct cifs_ses *ses = sess_data->ses;\n\n\tmutex_lock(&ses->server->srv_mutex);\n\tif (ses->server->ops->generate_signingkey) {\n\t\trc = ses->server->ops->generate_signingkey(ses);\n\t\tif (rc) {\n\t\t\tcifs_dbg(FYI,\n\t\t\t\t\"SMB3 session key generation failed\\n\");\n\t\t\tmutex_unlock(&ses->server->srv_mutex);\n\t\t\treturn rc;\n\t\t}\n\t}\n\tif (!ses->server->session_estab) {\n\t\tses->server->sequence_number = 0x2;\n\t\tses->server->session_estab = true;\n\t}\n\tmutex_unlock(&ses->server->srv_mutex);\n\n\tcifs_dbg(FYI, \"SMB2/3 session established successfully\\n\");\n\tspin_lock(&GlobalMid_Lock);\n\tses->status = CifsGood;\n\tses->need_reconnect = false;\n\tspin_unlock(&GlobalMid_Lock);\n\treturn rc;\n}\n\n#ifdef CONFIG_CIFS_UPCALL\nstatic void\nSMB2_auth_kerberos(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct cifs_spnego_msg *msg;\n\tstruct key *spnego_key = NULL;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\tspnego_key = cifs_get_spnego_key(ses);\n\tif (IS_ERR(spnego_key)) {\n\t\trc = PTR_ERR(spnego_key);\n\t\tspnego_key = NULL;\n\t\tgoto out;\n\t}\n\n\tmsg = spnego_key->payload.data[0];\n\t/*\n\t * check version field to make sure that cifs.upcall is\n\t * sending us a response in an expected form\n\t */\n\tif (msg->version != CIFS_SPNEGO_UPCALL_VERSION) {\n\t\tcifs_dbg(VFS,\n\t\t\t  \"bad cifs.upcall version. Expected %d got %d\",\n\t\t\t  CIFS_SPNEGO_UPCALL_VERSION, msg->version);\n\t\trc = -EKEYREJECTED;\n\t\tgoto out_put_spnego_key;\n\t}\n\n\tses->auth_key.response = kmemdup(msg->data, msg->sesskey_len,\n\t\t\t\t\t GFP_KERNEL);\n\tif (!ses->auth_key.response) {\n\t\tcifs_dbg(VFS,\n\t\t\t\"Kerberos can't allocate (%u bytes) memory\",\n\t\t\tmsg->sesskey_len);\n\t\trc = -ENOMEM;\n\t\tgoto out_put_spnego_key;\n\t}\n\tses->auth_key.len = msg->sesskey_len;\n\n\tsess_data->iov[1].iov_base = msg->data + msg->sesskey_len;\n\tsess_data->iov[1].iov_len = msg->secblob_len;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\tif (rc)\n\t\tgoto out_put_spnego_key;\n\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\tses->Suid = rsp->sync_hdr.SessionId;\n\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\n\trc = SMB2_sess_establish_session(sess_data);\nout_put_spnego_key:\n\tkey_invalidate(spnego_key);\n\tkey_put(spnego_key);\nout:\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n\tSMB2_sess_free_buffer(sess_data);\n}\n#else\nstatic void\nSMB2_auth_kerberos(struct SMB2_sess_data *sess_data)\n{\n\tcifs_dbg(VFS, \"Kerberos negotiated but upcall support disabled!\\n\");\n\tsess_data->result = -EOPNOTSUPP;\n\tsess_data->func = NULL;\n}\n#endif\n\nstatic void\nSMB2_sess_auth_rawntlmssp_authenticate(struct SMB2_sess_data *sess_data);\n\nstatic void\nSMB2_sess_auth_rawntlmssp_negotiate(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\tchar *ntlmssp_blob = NULL;\n\tbool use_spnego = false; /* else use raw ntlmssp */\n\tu16 blob_length = 0;\n\n\t/*\n\t * If memory allocation is successful, caller of this function\n\t * frees it.\n\t */\n\tses->ntlmssp = kmalloc(sizeof(struct ntlmssp_auth), GFP_KERNEL);\n\tif (!ses->ntlmssp) {\n\t\trc = -ENOMEM;\n\t\tgoto out_err;\n\t}\n\tses->ntlmssp->sesskey_per_smbsess = true;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out_err;\n\n\tntlmssp_blob = kmalloc(sizeof(struct _NEGOTIATE_MESSAGE),\n\t\t\t       GFP_KERNEL);\n\tif (ntlmssp_blob == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tbuild_ntlmssp_negotiate_blob(ntlmssp_blob, ses);\n\tif (use_spnego) {\n\t\t/* BB eventually need to add this */\n\t\tcifs_dbg(VFS, \"spnego not supported for SMB2 yet\\n\");\n\t\trc = -EOPNOTSUPP;\n\t\tgoto out;\n\t} else {\n\t\tblob_length = sizeof(struct _NEGOTIATE_MESSAGE);\n\t\t/* with raw NTLMSSP we don't encapsulate in SPNEGO */\n\t}\n\tsess_data->iov[1].iov_base = ntlmssp_blob;\n\tsess_data->iov[1].iov_len = blob_length;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\n\t/* If true, rc here is expected and not an error */\n\tif (sess_data->buf0_type != CIFS_NO_BUFFER &&\n\t\trsp->sync_hdr.Status == STATUS_MORE_PROCESSING_REQUIRED)\n\t\trc = 0;\n\n\tif (rc)\n\t\tgoto out;\n\n\tif (offsetof(struct smb2_sess_setup_rsp, Buffer) !=\n\t\t\tle16_to_cpu(rsp->SecurityBufferOffset)) {\n\t\tcifs_dbg(VFS, \"Invalid security buffer offset %d\\n\",\n\t\t\tle16_to_cpu(rsp->SecurityBufferOffset));\n\t\trc = -EIO;\n\t\tgoto out;\n\t}\n\trc = decode_ntlmssp_challenge(rsp->Buffer,\n\t\t\tle16_to_cpu(rsp->SecurityBufferLength), ses);\n\tif (rc)\n\t\tgoto out;\n\n\tcifs_dbg(FYI, \"rawntlmssp session setup challenge phase\\n\");\n\n\n\tses->Suid = rsp->sync_hdr.SessionId;\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\nout:\n\tkfree(ntlmssp_blob);\n\tSMB2_sess_free_buffer(sess_data);\n\tif (!rc) {\n\t\tsess_data->result = 0;\n\t\tsess_data->func = SMB2_sess_auth_rawntlmssp_authenticate;\n\t\treturn;\n\t}\nout_err:\n\tkfree(ses->ntlmssp);\n\tses->ntlmssp = NULL;\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n}\n\nstatic void\nSMB2_sess_auth_rawntlmssp_authenticate(struct SMB2_sess_data *sess_data)\n{\n\tint rc;\n\tstruct cifs_ses *ses = sess_data->ses;\n\tstruct smb2_sess_setup_req *req;\n\tstruct smb2_sess_setup_rsp *rsp = NULL;\n\tunsigned char *ntlmssp_blob = NULL;\n\tbool use_spnego = false; /* else use raw ntlmssp */\n\tu16 blob_length = 0;\n\n\trc = SMB2_sess_alloc_buffer(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\treq = (struct smb2_sess_setup_req *) sess_data->iov[0].iov_base;\n\treq->sync_hdr.SessionId = ses->Suid;\n\n\trc = build_ntlmssp_auth_blob(&ntlmssp_blob, &blob_length, ses,\n\t\t\t\t\tsess_data->nls_cp);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"build_ntlmssp_auth_blob failed %d\\n\", rc);\n\t\tgoto out;\n\t}\n\n\tif (use_spnego) {\n\t\t/* BB eventually need to add this */\n\t\tcifs_dbg(VFS, \"spnego not supported for SMB2 yet\\n\");\n\t\trc = -EOPNOTSUPP;\n\t\tgoto out;\n\t}\n\tsess_data->iov[1].iov_base = ntlmssp_blob;\n\tsess_data->iov[1].iov_len = blob_length;\n\n\trc = SMB2_sess_sendreceive(sess_data);\n\tif (rc)\n\t\tgoto out;\n\n\trsp = (struct smb2_sess_setup_rsp *)sess_data->iov[0].iov_base;\n\n\tses->Suid = rsp->sync_hdr.SessionId;\n\tses->session_flags = le16_to_cpu(rsp->SessionFlags);\n\n\trc = SMB2_sess_establish_session(sess_data);\nout:\n\tkfree(ntlmssp_blob);\n\tSMB2_sess_free_buffer(sess_data);\n\tkfree(ses->ntlmssp);\n\tses->ntlmssp = NULL;\n\tsess_data->result = rc;\n\tsess_data->func = NULL;\n}\n\nstatic int\nSMB2_select_sec(struct cifs_ses *ses, struct SMB2_sess_data *sess_data)\n{\n\tint type;\n\n\ttype = smb2_select_sectype(ses->server, ses->sectype);\n\tcifs_dbg(FYI, \"sess setup type %d\\n\", type);\n\tif (type == Unspecified) {\n\t\tcifs_dbg(VFS,\n\t\t\t\"Unable to select appropriate authentication method!\");\n\t\treturn -EINVAL;\n\t}\n\n\tswitch (type) {\n\tcase Kerberos:\n\t\tsess_data->func = SMB2_auth_kerberos;\n\t\tbreak;\n\tcase RawNTLMSSP:\n\t\tsess_data->func = SMB2_sess_auth_rawntlmssp_negotiate;\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"secType %d not supported!\\n\", type);\n\t\treturn -EOPNOTSUPP;\n\t}\n\n\treturn 0;\n}\n\nint\nSMB2_sess_setup(const unsigned int xid, struct cifs_ses *ses,\n\t\tconst struct nls_table *nls_cp)\n{\n\tint rc = 0;\n\tstruct TCP_Server_Info *server = ses->server;\n\tstruct SMB2_sess_data *sess_data;\n\n\tcifs_dbg(FYI, \"Session Setup\\n\");\n\n\tif (!server) {\n\t\tWARN(1, \"%s: server is NULL!\\n\", __func__);\n\t\treturn -EIO;\n\t}\n\n\tsess_data = kzalloc(sizeof(struct SMB2_sess_data), GFP_KERNEL);\n\tif (!sess_data)\n\t\treturn -ENOMEM;\n\n\trc = SMB2_select_sec(ses, sess_data);\n\tif (rc)\n\t\tgoto out;\n\tsess_data->xid = xid;\n\tsess_data->ses = ses;\n\tsess_data->buf0_type = CIFS_NO_BUFFER;\n\tsess_data->nls_cp = (struct nls_table *) nls_cp;\n\tsess_data->previous_session = ses->Suid;\n\n\t/*\n\t * Initialize the session hash with the server one.\n\t */\n\tmemcpy(ses->preauth_sha_hash, ses->server->preauth_sha_hash,\n\t       SMB2_PREAUTH_HASH_SIZE);\n\n\twhile (sess_data->func)\n\t\tsess_data->func(sess_data);\n\n\tif ((ses->session_flags & SMB2_SESSION_FLAG_IS_GUEST) && (ses->sign))\n\t\tcifs_dbg(VFS, \"signing requested but authenticated as guest\\n\");\n\trc = sess_data->result;\nout:\n\tkfree(sess_data);\n\treturn rc;\n}\n\nint\nSMB2_logoff(const unsigned int xid, struct cifs_ses *ses)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_logoff_req *req; /* response is also trivial struct */\n\tint rc = 0;\n\tstruct TCP_Server_Info *server;\n\tint flags = 0;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"disconnect session %p\\n\", ses);\n\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\t/* no need to send SMB logoff if uid already closed due to reconnect */\n\tif (ses->need_reconnect)\n\t\tgoto smb2_session_already_dead;\n\n\trc = smb2_plain_req_init(SMB2_LOGOFF, NULL, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\t /* since no tcon, smb2_init can not do this, so do here */\n\treq->sync_hdr.SessionId = ses->Suid;\n\n\tif (ses->session_flags & SMB2_SESSION_FLAG_ENCRYPT_DATA)\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\telse if (server->sign)\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\t/*\n\t * No tcon so can't do\n\t * cifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_fail[SMB2...]);\n\t */\n\nsmb2_session_already_dead:\n\treturn rc;\n}\n\nstatic inline void cifs_stats_fail_inc(struct cifs_tcon *tcon, uint16_t code)\n{\n\tcifs_stats_inc(&tcon->stats.smb2_stats.smb2_com_failed[code]);\n}\n\n#define MAX_SHARENAME_LENGTH (255 /* server */ + 80 /* share */ + 1 /* NULL */)\n\n/* These are similar values to what Windows uses */\nstatic inline void init_copy_chunk_defaults(struct cifs_tcon *tcon)\n{\n\ttcon->max_chunks = 256;\n\ttcon->max_bytes_chunk = 1048576;\n\ttcon->max_bytes_copy = 16777216;\n}\n\nint\nSMB2_tcon(const unsigned int xid, struct cifs_ses *ses, const char *tree,\n\t  struct cifs_tcon *tcon, const struct nls_table *cp)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_tree_connect_req *req;\n\tstruct smb2_tree_connect_rsp *rsp = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov = { NULL, 0 };\n\tint rc = 0;\n\tint resp_buftype;\n\tint unc_path_len;\n\t__le16 *unc_path = NULL;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"TCON\\n\");\n\n\tif (!(ses->server) || !tree)\n\t\treturn -EIO;\n\n\tunc_path = kmalloc(MAX_SHARENAME_LENGTH * 2, GFP_KERNEL);\n\tif (unc_path == NULL)\n\t\treturn -ENOMEM;\n\n\tunc_path_len = cifs_strtoUTF16(unc_path, tree, strlen(tree), cp) + 1;\n\tunc_path_len *= 2;\n\tif (unc_path_len < 2) {\n\t\tkfree(unc_path);\n\t\treturn -EINVAL;\n\t}\n\n\t/* SMB2 TREE_CONNECT request must be called with TreeId == 0 */\n\ttcon->tid = 0;\n\tatomic_set(&tcon->num_remote_opens, 0);\n\trc = smb2_plain_req_init(SMB2_TREE_CONNECT, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc) {\n\t\tkfree(unc_path);\n\t\treturn rc;\n\t}\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for pad */\n\tiov[0].iov_len = total_len - 1;\n\n\t/* Testing shows that buffer offset must be at location of Buffer[0] */\n\treq->PathOffset = cpu_to_le16(sizeof(struct smb2_tree_connect_req)\n\t\t\t- 1 /* pad */);\n\treq->PathLength = cpu_to_le16(unc_path_len - 2);\n\tiov[1].iov_base = unc_path;\n\tiov[1].iov_len = unc_path_len;\n\n\t/*\n\t * 3.11 tcon req must be signed if not encrypted. See MS-SMB2 3.2.4.1.1\n\t * unless it is guest or anonymous user. See MS-SMB2 3.2.5.3.1\n\t * (Samba servers don't always set the flag so also check if null user)\n\t */\n\tif ((ses->server->dialect == SMB311_PROT_ID) &&\n\t    !smb3_encryption_required(tcon) &&\n\t    !(ses->session_flags &\n\t\t    (SMB2_SESSION_FLAG_IS_GUEST|SMB2_SESSION_FLAG_IS_NULL)) &&\n\t    ((ses->user_name != NULL) || (ses->sectype == Kerberos)))\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\t/* Need 64 for max size write so ask for more in case not there yet */\n\treq->sync_hdr.CreditRequest = cpu_to_le16(64);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_tree_connect_rsp *)rsp_iov.iov_base;\n\ttrace_smb3_tcon(xid, tcon->tid, ses->Suid, tree, rc);\n\tif (rc != 0) {\n\t\tif (tcon) {\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_TREE_CONNECT_HE);\n\t\t\ttcon->need_reconnect = true;\n\t\t}\n\t\tgoto tcon_error_exit;\n\t}\n\n\tswitch (rsp->ShareType) {\n\tcase SMB2_SHARE_TYPE_DISK:\n\t\tcifs_dbg(FYI, \"connection to disk share\\n\");\n\t\tbreak;\n\tcase SMB2_SHARE_TYPE_PIPE:\n\t\ttcon->pipe = true;\n\t\tcifs_dbg(FYI, \"connection to pipe share\\n\");\n\t\tbreak;\n\tcase SMB2_SHARE_TYPE_PRINT:\n\t\ttcon->print = true;\n\t\tcifs_dbg(FYI, \"connection to printer\\n\");\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"unknown share type %d\\n\", rsp->ShareType);\n\t\trc = -EOPNOTSUPP;\n\t\tgoto tcon_error_exit;\n\t}\n\n\ttcon->share_flags = le32_to_cpu(rsp->ShareFlags);\n\ttcon->capabilities = rsp->Capabilities; /* we keep caps little endian */\n\ttcon->maximal_access = le32_to_cpu(rsp->MaximalAccess);\n\ttcon->tidStatus = CifsGood;\n\ttcon->need_reconnect = false;\n\ttcon->tid = rsp->sync_hdr.TreeId;\n\tstrlcpy(tcon->treeName, tree, sizeof(tcon->treeName));\n\n\tif ((rsp->Capabilities & SMB2_SHARE_CAP_DFS) &&\n\t    ((tcon->share_flags & SHI1005_FLAGS_DFS) == 0))\n\t\tcifs_dbg(VFS, \"DFS capability contradicts DFS flag\\n\");\n\n\tif (tcon->seal &&\n\t    !(tcon->ses->server->capabilities & SMB2_GLOBAL_CAP_ENCRYPTION))\n\t\tcifs_dbg(VFS, \"Encryption is requested but not supported\\n\");\n\n\tinit_copy_chunk_defaults(tcon);\n\tif (tcon->ses->server->ops->validate_negotiate)\n\t\trc = tcon->ses->server->ops->validate_negotiate(xid, tcon);\ntcon_exit:\n\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(unc_path);\n\treturn rc;\n\ntcon_error_exit:\n\tif (rsp && rsp->sync_hdr.Status == STATUS_BAD_NETWORK_NAME) {\n\t\tcifs_dbg(VFS, \"BAD_NETWORK_NAME: %s\\n\", tree);\n\t}\n\tgoto tcon_exit;\n}\n\nint\nSMB2_tdis(const unsigned int xid, struct cifs_tcon *tcon)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_tree_disconnect_req *req; /* response is trivial */\n\tint rc = 0;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"Tree Disconnect\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif ((tcon->need_reconnect) || (tcon->ses->need_reconnect))\n\t\treturn 0;\n\n\trc = smb2_plain_req_init(SMB2_TREE_DISCONNECT, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\tif (rc)\n\t\tcifs_stats_fail_inc(tcon, SMB2_TREE_DISCONNECT_HE);\n\n\treturn rc;\n}\n\n\nstatic struct create_durable *\ncreate_durable_buf(void)\n{\n\tstruct create_durable *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable, Data));\n\tbuf->ccontext.DataLength = cpu_to_le32(16);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\t/* SMB2_CREATE_DURABLE_HANDLE_REQUEST is \"DHnQ\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = 'n';\n\tbuf->Name[3] = 'Q';\n\treturn buf;\n}\n\nstatic struct create_durable *\ncreate_reconnect_durable_buf(struct cifs_fid *fid)\n{\n\tstruct create_durable *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable, Data));\n\tbuf->ccontext.DataLength = cpu_to_le32(16);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\tbuf->Data.Fid.PersistentFileId = fid->persistent_fid;\n\tbuf->Data.Fid.VolatileFileId = fid->volatile_fid;\n\t/* SMB2_CREATE_DURABLE_HANDLE_RECONNECT is \"DHnC\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = 'n';\n\tbuf->Name[3] = 'C';\n\treturn buf;\n}\n\n__u8\nsmb2_parse_lease_state(struct TCP_Server_Info *server,\n\t\t       struct smb2_create_rsp *rsp,\n\t\t       unsigned int *epoch, char *lease_key)\n{\n\tchar *data_offset;\n\tstruct create_context *cc;\n\tunsigned int next;\n\tunsigned int remaining;\n\tchar *name;\n\n\tdata_offset = (char *)rsp + le32_to_cpu(rsp->CreateContextsOffset);\n\tremaining = le32_to_cpu(rsp->CreateContextsLength);\n\tcc = (struct create_context *)data_offset;\n\twhile (remaining >= sizeof(struct create_context)) {\n\t\tname = le16_to_cpu(cc->NameOffset) + (char *)cc;\n\t\tif (le16_to_cpu(cc->NameLength) == 4 &&\n\t\t    strncmp(name, \"RqLs\", 4) == 0)\n\t\t\treturn server->ops->parse_lease_buf(cc, epoch,\n\t\t\t\t\t\t\t    lease_key);\n\n\t\tnext = le32_to_cpu(cc->Next);\n\t\tif (!next)\n\t\t\tbreak;\n\t\tremaining -= next;\n\t\tcc = (struct create_context *)((char *)cc + next);\n\t}\n\n\treturn 0;\n}\n\nstatic int\nadd_lease_context(struct TCP_Server_Info *server, struct kvec *iov,\n\t\t  unsigned int *num_iovec, u8 *lease_key, __u8 *oplock)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = server->ops->create_lease_buf(lease_key, *oplock);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = server->vals->create_lease_size;\n\treq->RequestedOplockLevel = SMB2_OPLOCK_LEVEL_LEASE;\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength,\n\t\t     server->vals->create_lease_size);\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic struct create_durable_v2 *\ncreate_durable_v2_buf(struct cifs_open_parms *oparms)\n{\n\tstruct cifs_fid *pfid = oparms->fid;\n\tstruct create_durable_v2 *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable_v2), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct create_durable_v2, dcontext));\n\tbuf->ccontext.DataLength = cpu_to_le32(sizeof(struct durable_context_v2));\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct create_durable_v2, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\n\t/*\n\t * NB: Handle timeout defaults to 0, which allows server to choose\n\t * (most servers default to 120 seconds) and most clients default to 0.\n\t * This can be overridden at mount (\"handletimeout=\") if the user wants\n\t * a different persistent (or resilient) handle timeout for all opens\n\t * opens on a particular SMB3 mount.\n\t */\n\tbuf->dcontext.Timeout = cpu_to_le32(oparms->tcon->handle_timeout);\n\tbuf->dcontext.Flags = cpu_to_le32(SMB2_DHANDLE_FLAG_PERSISTENT);\n\tgenerate_random_uuid(buf->dcontext.CreateGuid);\n\tmemcpy(pfid->create_guid, buf->dcontext.CreateGuid, 16);\n\n\t/* SMB2_CREATE_DURABLE_HANDLE_REQUEST is \"DH2Q\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = '2';\n\tbuf->Name[3] = 'Q';\n\treturn buf;\n}\n\nstatic struct create_durable_handle_reconnect_v2 *\ncreate_reconnect_durable_v2_buf(struct cifs_fid *fid)\n{\n\tstruct create_durable_handle_reconnect_v2 *buf;\n\n\tbuf = kzalloc(sizeof(struct create_durable_handle_reconnect_v2),\n\t\t\tGFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset =\n\t\tcpu_to_le16(offsetof(struct create_durable_handle_reconnect_v2,\n\t\t\t\t     dcontext));\n\tbuf->ccontext.DataLength =\n\t\tcpu_to_le32(sizeof(struct durable_reconnect_context_v2));\n\tbuf->ccontext.NameOffset =\n\t\tcpu_to_le16(offsetof(struct create_durable_handle_reconnect_v2,\n\t\t\t    Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\n\tbuf->dcontext.Fid.PersistentFileId = fid->persistent_fid;\n\tbuf->dcontext.Fid.VolatileFileId = fid->volatile_fid;\n\tbuf->dcontext.Flags = cpu_to_le32(SMB2_DHANDLE_FLAG_PERSISTENT);\n\tmemcpy(buf->dcontext.CreateGuid, fid->create_guid, 16);\n\n\t/* SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 is \"DH2C\" */\n\tbuf->Name[0] = 'D';\n\tbuf->Name[1] = 'H';\n\tbuf->Name[2] = '2';\n\tbuf->Name[3] = 'C';\n\treturn buf;\n}\n\nstatic int\nadd_durable_v2_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_durable_v2_buf(oparms);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable_v2);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_durable_v2));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nadd_durable_reconnect_v2_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\t/* indicate that we don't need to relock the file */\n\toparms->reconnect = false;\n\n\tiov[num].iov_base = create_reconnect_durable_v2_buf(oparms->fid);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable_handle_reconnect_v2);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength,\n\t\t\tsizeof(struct create_durable_handle_reconnect_v2));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nadd_durable_context(struct kvec *iov, unsigned int *num_iovec,\n\t\t    struct cifs_open_parms *oparms, bool use_persistent)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tif (use_persistent) {\n\t\tif (oparms->reconnect)\n\t\t\treturn add_durable_reconnect_v2_context(iov, num_iovec,\n\t\t\t\t\t\t\t\toparms);\n\t\telse\n\t\t\treturn add_durable_v2_context(iov, num_iovec, oparms);\n\t}\n\n\tif (oparms->reconnect) {\n\t\tiov[num].iov_base = create_reconnect_durable_buf(oparms->fid);\n\t\t/* indicate that we don't need to relock the file */\n\t\toparms->reconnect = false;\n\t} else\n\t\tiov[num].iov_base = create_durable_buf();\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct create_durable);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset =\n\t\t\tcpu_to_le32(sizeof(struct smb2_create_req) +\n\t\t\t\t\t\t\t\tiov[1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct create_durable));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\n/* See MS-SMB2 2.2.13.2.7 */\nstatic struct crt_twarp_ctxt *\ncreate_twarp_buf(__u64 timewarp)\n{\n\tstruct crt_twarp_ctxt *buf;\n\n\tbuf = kzalloc(sizeof(struct crt_twarp_ctxt), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\n\tbuf->ccontext.DataOffset = cpu_to_le16(offsetof\n\t\t\t\t\t(struct crt_twarp_ctxt, Timestamp));\n\tbuf->ccontext.DataLength = cpu_to_le32(8);\n\tbuf->ccontext.NameOffset = cpu_to_le16(offsetof\n\t\t\t\t(struct crt_twarp_ctxt, Name));\n\tbuf->ccontext.NameLength = cpu_to_le16(4);\n\t/* SMB2_CREATE_TIMEWARP_TOKEN is \"TWrp\" */\n\tbuf->Name[0] = 'T';\n\tbuf->Name[1] = 'W';\n\tbuf->Name[2] = 'r';\n\tbuf->Name[3] = 'p';\n\tbuf->Timestamp = cpu_to_le64(timewarp);\n\treturn buf;\n}\n\n/* See MS-SMB2 2.2.13.2.7 */\nstatic int\nadd_twarp_context(struct kvec *iov, unsigned int *num_iovec, __u64 timewarp)\n{\n\tstruct smb2_create_req *req = iov[0].iov_base;\n\tunsigned int num = *num_iovec;\n\n\tiov[num].iov_base = create_twarp_buf(timewarp);\n\tif (iov[num].iov_base == NULL)\n\t\treturn -ENOMEM;\n\tiov[num].iov_len = sizeof(struct crt_twarp_ctxt);\n\tif (!req->CreateContextsOffset)\n\t\treq->CreateContextsOffset = cpu_to_le32(\n\t\t\t\tsizeof(struct smb2_create_req) +\n\t\t\t\tiov[num - 1].iov_len);\n\tle32_add_cpu(&req->CreateContextsLength, sizeof(struct crt_twarp_ctxt));\n\t*num_iovec = num + 1;\n\treturn 0;\n}\n\nstatic int\nalloc_path_with_tree_prefix(__le16 **out_path, int *out_size, int *out_len,\n\t\t\t    const char *treename, const __le16 *path)\n{\n\tint treename_len, path_len;\n\tstruct nls_table *cp;\n\tconst __le16 sep[] = {cpu_to_le16('\\\\'), cpu_to_le16(0x0000)};\n\n\t/*\n\t * skip leading \"\\\\\"\n\t */\n\ttreename_len = strlen(treename);\n\tif (treename_len < 2 || !(treename[0] == '\\\\' && treename[1] == '\\\\'))\n\t\treturn -EINVAL;\n\n\ttreename += 2;\n\ttreename_len -= 2;\n\n\tpath_len = UniStrnlen((wchar_t *)path, PATH_MAX);\n\n\t/*\n\t * make room for one path separator between the treename and\n\t * path\n\t */\n\t*out_len = treename_len + 1 + path_len;\n\n\t/*\n\t * final path needs to be null-terminated UTF16 with a\n\t * size aligned to 8\n\t */\n\n\t*out_size = roundup((*out_len+1)*2, 8);\n\t*out_path = kzalloc(*out_size, GFP_KERNEL);\n\tif (!*out_path)\n\t\treturn -ENOMEM;\n\n\tcp = load_nls_default();\n\tcifs_strtoUTF16(*out_path, treename, treename_len, cp);\n\tUniStrcat(*out_path, sep);\n\tUniStrcat(*out_path, path);\n\tunload_nls(cp);\n\n\treturn 0;\n}\n\nint smb311_posix_mkdir(const unsigned int xid, struct inode *inode,\n\t\t\t       umode_t mode, struct cifs_tcon *tcon,\n\t\t\t       const char *full_path,\n\t\t\t       struct cifs_sb_info *cifs_sb)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_create_req *req;\n\tstruct smb2_create_rsp *rsp = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[3]; /* make sure at least one for each open context */\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype;\n\tint uni_path_len;\n\t__le16 *copy_path = NULL;\n\tint copy_size;\n\tint rc = 0;\n\tunsigned int n_iov = 2;\n\t__u32 file_attributes = 0;\n\tchar *pc_buf = NULL;\n\tint flags = 0;\n\tunsigned int total_len;\n\t__le16 *utf16_path = NULL;\n\n\tcifs_dbg(FYI, \"mkdir\\n\");\n\n\t/* resource #1: path allocation */\n\tutf16_path = cifs_convert_path_to_utf16(full_path, cifs_sb);\n\tif (!utf16_path)\n\t\treturn -ENOMEM;\n\n\tif (!ses || !(ses->server)) {\n\t\trc = -EIO;\n\t\tgoto err_free_path;\n\t}\n\n\t/* resource #2: request */\n\trc = smb2_plain_req_init(SMB2_CREATE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\tgoto err_free_path;\n\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->ImpersonationLevel = IL_IMPERSONATION;\n\treq->DesiredAccess = cpu_to_le32(FILE_WRITE_ATTRIBUTES);\n\t/* File attributes ignored on open (used in create though) */\n\treq->FileAttributes = cpu_to_le32(file_attributes);\n\treq->ShareAccess = FILE_SHARE_ALL_LE;\n\treq->CreateDisposition = cpu_to_le32(FILE_CREATE);\n\treq->CreateOptions = cpu_to_le32(CREATE_NOT_FILE);\n\n\tiov[0].iov_base = (char *)req;\n\t/* -1 since last byte is buf[0] which is sent below (path) */\n\tiov[0].iov_len = total_len - 1;\n\n\treq->NameOffset = cpu_to_le16(sizeof(struct smb2_create_req));\n\n\t/* [MS-SMB2] 2.2.13 NameOffset:\n\t * If SMB2_FLAGS_DFS_OPERATIONS is set in the Flags field of\n\t * the SMB2 header, the file name includes a prefix that will\n\t * be processed during DFS name normalization as specified in\n\t * section 3.3.5.9. Otherwise, the file name is relative to\n\t * the share that is identified by the TreeId in the SMB2\n\t * header.\n\t */\n\tif (tcon->share_flags & SHI1005_FLAGS_DFS) {\n\t\tint name_len;\n\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_DFS_OPERATIONS;\n\t\trc = alloc_path_with_tree_prefix(&copy_path, &copy_size,\n\t\t\t\t\t\t &name_len,\n\t\t\t\t\t\t tcon->treeName, utf16_path);\n\t\tif (rc)\n\t\t\tgoto err_free_req;\n\n\t\treq->NameLength = cpu_to_le16(name_len * 2);\n\t\tuni_path_len = copy_size;\n\t\t/* free before overwriting resource */\n\t\tkfree(utf16_path);\n\t\tutf16_path = copy_path;\n\t} else {\n\t\tuni_path_len = (2 * UniStrnlen((wchar_t *)utf16_path, PATH_MAX)) + 2;\n\t\t/* MUST set path len (NameLength) to 0 opening root of share */\n\t\treq->NameLength = cpu_to_le16(uni_path_len - 2);\n\t\tif (uni_path_len % 8 != 0) {\n\t\t\tcopy_size = roundup(uni_path_len, 8);\n\t\t\tcopy_path = kzalloc(copy_size, GFP_KERNEL);\n\t\t\tif (!copy_path) {\n\t\t\t\trc = -ENOMEM;\n\t\t\t\tgoto err_free_req;\n\t\t\t}\n\t\t\tmemcpy((char *)copy_path, (const char *)utf16_path,\n\t\t\t       uni_path_len);\n\t\t\tuni_path_len = copy_size;\n\t\t\t/* free before overwriting resource */\n\t\t\tkfree(utf16_path);\n\t\t\tutf16_path = copy_path;\n\t\t}\n\t}\n\n\tiov[1].iov_len = uni_path_len;\n\tiov[1].iov_base = utf16_path;\n\treq->RequestedOplockLevel = SMB2_OPLOCK_LEVEL_NONE;\n\n\tif (tcon->posix_extensions) {\n\t\t/* resource #3: posix buf */\n\t\trc = add_posix_context(iov, &n_iov, mode);\n\t\tif (rc)\n\t\t\tgoto err_free_req;\n\t\tpc_buf = iov[n_iov-1].iov_base;\n\t}\n\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = n_iov;\n\n\ttrace_smb3_posix_mkdir_enter(xid, tcon->tid, ses->Suid, CREATE_NOT_FILE,\n\t\t\t\t    FILE_WRITE_ATTRIBUTES);\n\t/* resource #4: response buffer */\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CREATE_HE);\n\t\ttrace_smb3_posix_mkdir_err(xid, tcon->tid, ses->Suid,\n\t\t\t\t\t   CREATE_NOT_FILE,\n\t\t\t\t\t   FILE_WRITE_ATTRIBUTES, rc);\n\t\tgoto err_free_rsp_buf;\n\t}\n\n\trsp = (struct smb2_create_rsp *)rsp_iov.iov_base;\n\ttrace_smb3_posix_mkdir_done(xid, rsp->PersistentFileId, tcon->tid,\n\t\t\t\t    ses->Suid, CREATE_NOT_FILE,\n\t\t\t\t    FILE_WRITE_ATTRIBUTES);\n\n\tSMB2_close(xid, tcon, rsp->PersistentFileId, rsp->VolatileFileId);\n\n\t/* Eventually save off posix specific response info and timestaps */\n\nerr_free_rsp_buf:\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(pc_buf);\nerr_free_req:\n\tcifs_small_buf_release(req);\nerr_free_path:\n\tkfree(utf16_path);\n\treturn rc;\n}\n\nint\nSMB2_open_init(struct cifs_tcon *tcon, struct smb_rqst *rqst, __u8 *oplock,\n\t       struct cifs_open_parms *oparms, __le16 *path)\n{\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct smb2_create_req *req;\n\tunsigned int n_iov = 2;\n\t__u32 file_attributes = 0;\n\tint copy_size;\n\tint uni_path_len;\n\tunsigned int total_len;\n\tstruct kvec *iov = rqst->rq_iov;\n\t__le16 *copy_path;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_CREATE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tiov[0].iov_base = (char *)req;\n\t/* -1 since last byte is buf[0] which is sent below (path) */\n\tiov[0].iov_len = total_len - 1;\n\n\tif (oparms->create_options & CREATE_OPTION_READONLY)\n\t\tfile_attributes |= ATTR_READONLY;\n\tif (oparms->create_options & CREATE_OPTION_SPECIAL)\n\t\tfile_attributes |= ATTR_SYSTEM;\n\n\treq->ImpersonationLevel = IL_IMPERSONATION;\n\treq->DesiredAccess = cpu_to_le32(oparms->desired_access);\n\t/* File attributes ignored on open (used in create though) */\n\treq->FileAttributes = cpu_to_le32(file_attributes);\n\treq->ShareAccess = FILE_SHARE_ALL_LE;\n\treq->CreateDisposition = cpu_to_le32(oparms->disposition);\n\treq->CreateOptions = cpu_to_le32(oparms->create_options & CREATE_OPTIONS_MASK);\n\treq->NameOffset = cpu_to_le16(sizeof(struct smb2_create_req));\n\n\t/* [MS-SMB2] 2.2.13 NameOffset:\n\t * If SMB2_FLAGS_DFS_OPERATIONS is set in the Flags field of\n\t * the SMB2 header, the file name includes a prefix that will\n\t * be processed during DFS name normalization as specified in\n\t * section 3.3.5.9. Otherwise, the file name is relative to\n\t * the share that is identified by the TreeId in the SMB2\n\t * header.\n\t */\n\tif (tcon->share_flags & SHI1005_FLAGS_DFS) {\n\t\tint name_len;\n\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_DFS_OPERATIONS;\n\t\trc = alloc_path_with_tree_prefix(&copy_path, &copy_size,\n\t\t\t\t\t\t &name_len,\n\t\t\t\t\t\t tcon->treeName, path);\n\t\tif (rc)\n\t\t\treturn rc;\n\t\treq->NameLength = cpu_to_le16(name_len * 2);\n\t\tuni_path_len = copy_size;\n\t\tpath = copy_path;\n\t} else {\n\t\tuni_path_len = (2 * UniStrnlen((wchar_t *)path, PATH_MAX)) + 2;\n\t\t/* MUST set path len (NameLength) to 0 opening root of share */\n\t\treq->NameLength = cpu_to_le16(uni_path_len - 2);\n\t\tcopy_size = uni_path_len;\n\t\tif (copy_size % 8 != 0)\n\t\t\tcopy_size = roundup(copy_size, 8);\n\t\tcopy_path = kzalloc(copy_size, GFP_KERNEL);\n\t\tif (!copy_path)\n\t\t\treturn -ENOMEM;\n\t\tmemcpy((char *)copy_path, (const char *)path,\n\t\t       uni_path_len);\n\t\tuni_path_len = copy_size;\n\t\tpath = copy_path;\n\t}\n\n\tiov[1].iov_len = uni_path_len;\n\tiov[1].iov_base = path;\n\n\tif (!server->oplocks)\n\t\t*oplock = SMB2_OPLOCK_LEVEL_NONE;\n\n\tif (!(server->capabilities & SMB2_GLOBAL_CAP_LEASING) ||\n\t    *oplock == SMB2_OPLOCK_LEVEL_NONE)\n\t\treq->RequestedOplockLevel = *oplock;\n\telse if (!(server->capabilities & SMB2_GLOBAL_CAP_DIRECTORY_LEASING) &&\n\t\t  (oparms->create_options & CREATE_NOT_FILE))\n\t\treq->RequestedOplockLevel = *oplock; /* no srv lease support */\n\telse {\n\t\trc = add_lease_context(server, iov, &n_iov,\n\t\t\t\t       oparms->fid->lease_key, oplock);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (*oplock == SMB2_OPLOCK_LEVEL_BATCH) {\n\t\t/* need to set Next field of lease context if we request it */\n\t\tif (server->capabilities & SMB2_GLOBAL_CAP_LEASING) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(server->vals->create_lease_size);\n\t\t}\n\n\t\trc = add_durable_context(iov, &n_iov, oparms,\n\t\t\t\t\ttcon->use_persistent);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (tcon->posix_extensions) {\n\t\tif (n_iov > 2) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(iov[n_iov-1].iov_len);\n\t\t}\n\n\t\trc = add_posix_context(iov, &n_iov, oparms->mode);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tif (tcon->snapshot_time) {\n\t\tcifs_dbg(FYI, \"adding snapshot context\\n\");\n\t\tif (n_iov > 2) {\n\t\t\tstruct create_context *ccontext =\n\t\t\t    (struct create_context *)iov[n_iov-1].iov_base;\n\t\t\tccontext->Next =\n\t\t\t\tcpu_to_le32(iov[n_iov-1].iov_len);\n\t\t}\n\n\t\trc = add_twarp_context(iov, &n_iov, tcon->snapshot_time);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\n\trqst->rq_nvec = n_iov;\n\treturn 0;\n}\n\n/* rq_iov[0] is the request and is released by cifs_small_buf_release().\n * All other vectors are freed by kfree().\n */\nvoid\nSMB2_open_free(struct smb_rqst *rqst)\n{\n\tint i;\n\n\tif (rqst && rqst->rq_iov) {\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base);\n\t\tfor (i = 1; i < rqst->rq_nvec; i++)\n\t\t\tif (rqst->rq_iov[i].iov_base != smb2_padding)\n\t\t\t\tkfree(rqst->rq_iov[i].iov_base);\n\t}\n}\n\nint\nSMB2_open(const unsigned int xid, struct cifs_open_parms *oparms, __le16 *path,\n\t  __u8 *oplock, struct smb2_file_all_info *buf,\n\t  struct kvec *err_iov, int *buftype)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_create_rsp *rsp = NULL;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_tcon *tcon = oparms->tcon;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[SMB2_CREATE_IOV_SIZE];\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\tint flags = 0;\n\n\tcifs_dbg(FYI, \"create/open\\n\");\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = SMB2_CREATE_IOV_SIZE;\n\n\trc = SMB2_open_init(tcon, &rqst, oplock, oparms, path);\n\tif (rc)\n\t\tgoto creat_exit;\n\n\ttrace_smb3_open_enter(xid, tcon->tid, tcon->ses->Suid,\n\t\toparms->create_options, oparms->desired_access);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\trsp = (struct smb2_create_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CREATE_HE);\n\t\tif (err_iov && rsp) {\n\t\t\t*err_iov = rsp_iov;\n\t\t\t*buftype = resp_buftype;\n\t\t\tresp_buftype = CIFS_NO_BUFFER;\n\t\t\trsp = NULL;\n\t\t}\n\t\ttrace_smb3_open_err(xid, tcon->tid, ses->Suid,\n\t\t\t\t    oparms->create_options, oparms->desired_access, rc);\n\t\tgoto creat_exit;\n\t} else\n\t\ttrace_smb3_open_done(xid, rsp->PersistentFileId, tcon->tid,\n\t\t\t\t     ses->Suid, oparms->create_options,\n\t\t\t\t     oparms->desired_access);\n\n\tatomic_inc(&tcon->num_remote_opens);\n\toparms->fid->persistent_fid = rsp->PersistentFileId;\n\toparms->fid->volatile_fid = rsp->VolatileFileId;\n#ifdef CONFIG_CIFS_DEBUG2\n\toparms->fid->mid = le64_to_cpu(rsp->sync_hdr.MessageId);\n#endif /* CIFS_DEBUG2 */\n\n\tif (buf) {\n\t\tmemcpy(buf, &rsp->CreationTime, 32);\n\t\tbuf->AllocationSize = rsp->AllocationSize;\n\t\tbuf->EndOfFile = rsp->EndofFile;\n\t\tbuf->Attributes = rsp->FileAttributes;\n\t\tbuf->NumberOfLinks = cpu_to_le32(1);\n\t\tbuf->DeletePending = 0;\n\t}\n\n\tif (rsp->OplockLevel == SMB2_OPLOCK_LEVEL_LEASE)\n\t\t*oplock = smb2_parse_lease_state(server, rsp,\n\t\t\t\t\t\t &oparms->fid->epoch,\n\t\t\t\t\t\t oparms->fid->lease_key);\n\telse\n\t\t*oplock = rsp->OplockLevel;\ncreat_exit:\n\tSMB2_open_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_ioctl_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\tu64 persistent_fid, u64 volatile_fid, u32 opcode,\n\t\tbool is_fsctl, char *in_data, u32 indatalen,\n\t\t__u32 max_response_size)\n{\n\tstruct smb2_ioctl_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_IOCTL, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->CtlCode = cpu_to_le32(opcode);\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tiov[0].iov_base = (char *)req;\n\t/*\n\t * If no input data, the size of ioctl struct in\n\t * protocol spec still includes a 1 byte data buffer,\n\t * but if input data passed to ioctl, we do not\n\t * want to double count this, so we do not send\n\t * the dummy one byte of data in iovec[0] if sending\n\t * input data (in iovec[1]).\n\t */\n\tif (indatalen) {\n\t\treq->InputCount = cpu_to_le32(indatalen);\n\t\t/* do not set InputOffset if no input data */\n\t\treq->InputOffset =\n\t\t       cpu_to_le32(offsetof(struct smb2_ioctl_req, Buffer));\n\t\trqst->rq_nvec = 2;\n\t\tiov[0].iov_len = total_len - 1;\n\t\tiov[1].iov_base = in_data;\n\t\tiov[1].iov_len = indatalen;\n\t} else {\n\t\trqst->rq_nvec = 1;\n\t\tiov[0].iov_len = total_len;\n\t}\n\n\treq->OutputOffset = 0;\n\treq->OutputCount = 0; /* MBZ */\n\n\t/*\n\t * In most cases max_response_size is set to 16K (CIFSMaxBufSize)\n\t * We Could increase default MaxOutputResponse, but that could require\n\t * more credits. Windows typically sets this smaller, but for some\n\t * ioctls it may be useful to allow server to send more. No point\n\t * limiting what the server can send as long as fits in one credit\n\t * We can not handle more than CIFS_MAX_BUF_SIZE yet but may want\n\t * to increase this limit up in the future.\n\t * Note that for snapshot queries that servers like Azure expect that\n\t * the first query be minimal size (and just used to get the number/size\n\t * of previous versions) so response size must be specified as EXACTLY\n\t * sizeof(struct snapshot_array) which is 16 when rounded up to multiple\n\t * of eight bytes.  Currently that is the only case where we set max\n\t * response size smaller.\n\t */\n\treq->MaxOutputResponse = cpu_to_le32(max_response_size);\n\n\tif (is_fsctl)\n\t\treq->Flags = cpu_to_le32(SMB2_0_IOCTL_IS_FSCTL);\n\telse\n\t\treq->Flags = 0;\n\n\t/* validate negotiate request must be signed - see MS-SMB2 3.2.5.5 */\n\tif (opcode == FSCTL_VALIDATE_NEGOTIATE_INFO)\n\t\treq->sync_hdr.Flags |= SMB2_FLAGS_SIGNED;\n\n\treturn 0;\n}\n\nvoid\nSMB2_ioctl_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\n\n/*\n *\tSMB2 IOCTL is used for both IOCTLs and FSCTLs\n */\nint\nSMB2_ioctl(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t   u64 volatile_fid, u32 opcode, bool is_fsctl,\n\t   char *in_data, u32 indatalen, u32 max_out_data_len,\n\t   char **out_data, u32 *plen /* returned data len */)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_ioctl_rsp *rsp = NULL;\n\tstruct cifs_ses *ses;\n\tstruct kvec iov[SMB2_IOCTL_IOV_SIZE];\n\tstruct kvec rsp_iov = {NULL, 0};\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\tint flags = 0;\n\n\tcifs_dbg(FYI, \"SMB2 IOCTL\\n\");\n\n\tif (out_data != NULL)\n\t\t*out_data = NULL;\n\n\t/* zero out returned data len, in case of error */\n\tif (plen)\n\t\t*plen = 0;\n\n\tif (tcon)\n\t\tses = tcon->ses;\n\telse\n\t\treturn -EIO;\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = SMB2_IOCTL_IOV_SIZE;\n\n\trc = SMB2_ioctl_init(tcon, &rqst, persistent_fid, volatile_fid, opcode,\n\t\t\t     is_fsctl, in_data, indatalen, max_out_data_len);\n\tif (rc)\n\t\tgoto ioctl_exit;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\trsp = (struct smb2_ioctl_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0)\n\t\ttrace_smb3_fsctl_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, 0, opcode, rc);\n\n\tif ((rc != 0) && (rc != -EINVAL)) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);\n\t\tgoto ioctl_exit;\n\t} else if (rc == -EINVAL) {\n\t\tif ((opcode != FSCTL_SRV_COPYCHUNK_WRITE) &&\n\t\t    (opcode != FSCTL_SRV_COPYCHUNK)) {\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_IOCTL_HE);\n\t\t\tgoto ioctl_exit;\n\t\t}\n\t}\n\n\t/* check if caller wants to look at return data or just return rc */\n\tif ((plen == NULL) || (out_data == NULL))\n\t\tgoto ioctl_exit;\n\n\t*plen = le32_to_cpu(rsp->OutputCount);\n\n\t/* We check for obvious errors in the output buffer length and offset */\n\tif (*plen == 0)\n\t\tgoto ioctl_exit; /* server returned no data */\n\telse if (*plen > rsp_iov.iov_len || *plen > 0xFF00) {\n\t\tcifs_dbg(VFS, \"srv returned invalid ioctl length: %d\\n\", *plen);\n\t\t*plen = 0;\n\t\trc = -EIO;\n\t\tgoto ioctl_exit;\n\t}\n\n\tif (rsp_iov.iov_len - *plen < le32_to_cpu(rsp->OutputOffset)) {\n\t\tcifs_dbg(VFS, \"Malformed ioctl resp: len %d offset %d\\n\", *plen,\n\t\t\tle32_to_cpu(rsp->OutputOffset));\n\t\t*plen = 0;\n\t\trc = -EIO;\n\t\tgoto ioctl_exit;\n\t}\n\n\t*out_data = kmemdup((char *)rsp + le32_to_cpu(rsp->OutputOffset),\n\t\t\t    *plen, GFP_KERNEL);\n\tif (*out_data == NULL) {\n\t\trc = -ENOMEM;\n\t\tgoto ioctl_exit;\n\t}\n\nioctl_exit:\n\tSMB2_ioctl_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\n/*\n *   Individual callers to ioctl worker function follow\n */\n\nint\nSMB2_set_compression(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t     u64 persistent_fid, u64 volatile_fid)\n{\n\tint rc;\n\tstruct  compress_ioctl fsctl_input;\n\tchar *ret_data = NULL;\n\n\tfsctl_input.CompressionState =\n\t\t\tcpu_to_le16(COMPRESSION_FORMAT_DEFAULT);\n\n\trc = SMB2_ioctl(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tFSCTL_SET_COMPRESSION, true /* is_fsctl */,\n\t\t\t(char *)&fsctl_input /* data input */,\n\t\t\t2 /* in data len */, CIFSMaxBufSize /* max out data */,\n\t\t\t&ret_data /* out data */, NULL);\n\n\tcifs_dbg(FYI, \"set compression rc %d\\n\", rc);\n\n\treturn rc;\n}\n\nint\nSMB2_close_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\tu64 persistent_fid, u64 volatile_fid)\n{\n\tstruct smb2_close_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_CLOSE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\treturn 0;\n}\n\nvoid\nSMB2_close_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nint\nSMB2_close_flags(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t u64 persistent_fid, u64 volatile_fid, int flags)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_close_rsp *rsp = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tint rc = 0;\n\n\tcifs_dbg(FYI, \"Close\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = SMB2_close_init(tcon, &rqst, persistent_fid, volatile_fid);\n\tif (rc)\n\t\tgoto close_exit;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_close_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_CLOSE_HE);\n\t\ttrace_smb3_close_err(xid, persistent_fid, tcon->tid, ses->Suid,\n\t\t\t\t     rc);\n\t\tgoto close_exit;\n\t}\n\n\tatomic_dec(&tcon->num_remote_opens);\n\n\t/* BB FIXME - decode close response, update inode for caching */\n\nclose_exit:\n\tSMB2_close_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_close(const unsigned int xid, struct cifs_tcon *tcon,\n\t   u64 persistent_fid, u64 volatile_fid)\n{\n\treturn SMB2_close_flags(xid, tcon, persistent_fid, volatile_fid, 0);\n}\n\nint\nsmb2_validate_iov(unsigned int offset, unsigned int buffer_length,\n\t\t  struct kvec *iov, unsigned int min_buf_size)\n{\n\tunsigned int smb_len = iov->iov_len;\n\tchar *end_of_smb = smb_len + (char *)iov->iov_base;\n\tchar *begin_of_buf = offset + (char *)iov->iov_base;\n\tchar *end_of_buf = begin_of_buf + buffer_length;\n\n\n\tif (buffer_length < min_buf_size) {\n\t\tcifs_dbg(VFS, \"buffer length %d smaller than minimum size %d\\n\",\n\t\t\t buffer_length, min_buf_size);\n\t\treturn -EINVAL;\n\t}\n\n\t/* check if beyond RFC1001 maximum length */\n\tif ((smb_len > 0x7FFFFF) || (buffer_length > 0x7FFFFF)) {\n\t\tcifs_dbg(VFS, \"buffer length %d or smb length %d too large\\n\",\n\t\t\t buffer_length, smb_len);\n\t\treturn -EINVAL;\n\t}\n\n\tif ((begin_of_buf > end_of_smb) || (end_of_buf > end_of_smb)) {\n\t\tcifs_dbg(VFS, \"illegal server response, bad offset to data\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}\n\n/*\n * If SMB buffer fields are valid, copy into temporary buffer to hold result.\n * Caller must free buffer.\n */\nint\nsmb2_validate_and_copy_iov(unsigned int offset, unsigned int buffer_length,\n\t\t\t   struct kvec *iov, unsigned int minbufsize,\n\t\t\t   char *data)\n{\n\tchar *begin_of_buf = offset + (char *)iov->iov_base;\n\tint rc;\n\n\tif (!data)\n\t\treturn -EINVAL;\n\n\trc = smb2_validate_iov(offset, buffer_length, iov, minbufsize);\n\tif (rc)\n\t\treturn rc;\n\n\tmemcpy(data, begin_of_buf, buffer_length);\n\n\treturn 0;\n}\n\nint\nSMB2_query_info_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t\t     u64 persistent_fid, u64 volatile_fid,\n\t\t     u8 info_class, u8 info_type, u32 additional_info,\n\t\t     size_t output_len, size_t input_len, void *input)\n{\n\tstruct smb2_query_info_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_INFO, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->InfoType = info_type;\n\treq->FileInfoClass = info_class;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\treq->AdditionalInformation = cpu_to_le32(additional_info);\n\n\treq->OutputBufferLength = cpu_to_le32(output_len);\n\tif (input_len) {\n\t\treq->InputBufferLength = cpu_to_le32(input_len);\n\t\t/* total_len for smb query request never close to le16 max */\n\t\treq->InputBufferOffset = cpu_to_le16(total_len - 1);\n\t\tmemcpy(req->Buffer, input, input_len);\n\t}\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1 + input_len;\n\treturn 0;\n}\n\nvoid\nSMB2_query_info_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_small_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nstatic int\nquery_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t   u64 persistent_fid, u64 volatile_fid, u8 info_class, u8 info_type,\n\t   u32 additional_info, size_t output_len, size_t min_len, void **data,\n\t\tu32 *dlen)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\tbool allocated = false;\n\n\tcifs_dbg(FYI, \"Query Info\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\tmemset(&iov, 0, sizeof(iov));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = SMB2_query_info_init(tcon, &rqst, persistent_fid, volatile_fid,\n\t\t\t\t  info_class, info_type, additional_info,\n\t\t\t\t  output_len, 0, NULL);\n\tif (rc)\n\t\tgoto qinf_exit;\n\n\ttrace_smb3_query_info_enter(xid, persistent_fid, tcon->tid,\n\t\t\t\t    ses->Suid, info_class, (__u32)info_type);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\ttrace_smb3_query_info_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type, rc);\n\t\tgoto qinf_exit;\n\t}\n\n\ttrace_smb3_query_info_done(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type);\n\n\tif (dlen) {\n\t\t*dlen = le32_to_cpu(rsp->OutputBufferLength);\n\t\tif (!*data) {\n\t\t\t*data = kmalloc(*dlen, GFP_KERNEL);\n\t\t\tif (!*data) {\n\t\t\t\tcifs_dbg(VFS,\n\t\t\t\t\t\"Error %d allocating memory for acl\\n\",\n\t\t\t\t\trc);\n\t\t\t\t*dlen = 0;\n\t\t\t\trc = -ENOMEM;\n\t\t\t\tgoto qinf_exit;\n\t\t\t}\n\t\t\tallocated = true;\n\t\t}\n\t}\n\n\trc = smb2_validate_and_copy_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t\t\tle32_to_cpu(rsp->OutputBufferLength),\n\t\t\t\t\t&rsp_iov, min_len, *data);\n\tif (rc && allocated) {\n\t\tkfree(*data);\n\t\t*data = NULL;\n\t\t*dlen = 0;\n\t}\n\nqinf_exit:\n\tSMB2_query_info_free(&rqst);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint SMB2_query_info(const unsigned int xid, struct cifs_tcon *tcon,\n\tu64 persistent_fid, u64 volatile_fid, struct smb2_file_all_info *data)\n{\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  FILE_ALL_INFORMATION, SMB2_O_INFO_FILE, 0,\n\t\t\t  sizeof(struct smb2_file_all_info) + PATH_MAX * 2,\n\t\t\t  sizeof(struct smb2_file_all_info), (void **)&data,\n\t\t\t  NULL);\n}\n\nint\nSMB2_query_acl(const unsigned int xid, struct cifs_tcon *tcon,\n\t\tu64 persistent_fid, u64 volatile_fid,\n\t\tvoid **data, u32 *plen)\n{\n\t__u32 additional_info = OWNER_SECINFO | GROUP_SECINFO | DACL_SECINFO;\n\t*plen = 0;\n\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  0, SMB2_O_INFO_SECURITY, additional_info,\n\t\t\t  SMB2_MAX_BUFFER_SIZE, MIN_SEC_DESC_LEN, data, plen);\n}\n\nint\nSMB2_get_srv_num(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t u64 persistent_fid, u64 volatile_fid, __le64 *uniqueid)\n{\n\treturn query_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\t  FILE_INTERNAL_INFORMATION, SMB2_O_INFO_FILE, 0,\n\t\t\t  sizeof(struct smb2_file_internal_info),\n\t\t\t  sizeof(struct smb2_file_internal_info),\n\t\t\t  (void **)&uniqueid, NULL);\n}\n\n/*\n * This is a no-op for now. We're not really interested in the reply, but\n * rather in the fact that the server sent one and that server->lstrp\n * gets updated.\n *\n * FIXME: maybe we should consider checking that the reply matches request?\n */\nstatic void\nsmb2_echo_callback(struct mid_q_entry *mid)\n{\n\tstruct TCP_Server_Info *server = mid->callback_data;\n\tstruct smb2_echo_rsp *rsp = (struct smb2_echo_rsp *)mid->resp_buf;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\n\tif (mid->mid_state == MID_RESPONSE_RECEIVED\n\t    || mid->mid_state == MID_RESPONSE_MALFORMED) {\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t}\n\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, CIFS_ECHO_OP);\n}\n\nvoid smb2_reconnect_server(struct work_struct *work)\n{\n\tstruct TCP_Server_Info *server = container_of(work,\n\t\t\t\t\tstruct TCP_Server_Info, reconnect.work);\n\tstruct cifs_ses *ses;\n\tstruct cifs_tcon *tcon, *tcon2;\n\tstruct list_head tmp_list;\n\tint tcon_exist = false;\n\tint rc;\n\tint resched = false;\n\n\n\t/* Prevent simultaneous reconnects that can corrupt tcon->rlist list */\n\tmutex_lock(&server->reconnect_mutex);\n\n\tINIT_LIST_HEAD(&tmp_list);\n\tcifs_dbg(FYI, \"Need negotiate, reconnecting tcons\\n\");\n\n\tspin_lock(&cifs_tcp_ses_lock);\n\tlist_for_each_entry(ses, &server->smb_ses_list, smb_ses_list) {\n\t\tlist_for_each_entry(tcon, &ses->tcon_list, tcon_list) {\n\t\t\tif (tcon->need_reconnect || tcon->need_reopen_files) {\n\t\t\t\ttcon->tc_count++;\n\t\t\t\tlist_add_tail(&tcon->rlist, &tmp_list);\n\t\t\t\ttcon_exist = true;\n\t\t\t}\n\t\t}\n\t\tif (ses->tcon_ipc && ses->tcon_ipc->need_reconnect) {\n\t\t\tlist_add_tail(&ses->tcon_ipc->rlist, &tmp_list);\n\t\t\ttcon_exist = true;\n\t\t}\n\t}\n\t/*\n\t * Get the reference to server struct to be sure that the last call of\n\t * cifs_put_tcon() in the loop below won't release the server pointer.\n\t */\n\tif (tcon_exist)\n\t\tserver->srv_count++;\n\n\tspin_unlock(&cifs_tcp_ses_lock);\n\n\tlist_for_each_entry_safe(tcon, tcon2, &tmp_list, rlist) {\n\t\trc = smb2_reconnect(SMB2_INTERNAL_CMD, tcon);\n\t\tif (!rc)\n\t\t\tcifs_reopen_persistent_handles(tcon);\n\t\telse\n\t\t\tresched = true;\n\t\tlist_del_init(&tcon->rlist);\n\t\tcifs_put_tcon(tcon);\n\t}\n\n\tcifs_dbg(FYI, \"Reconnecting tcons finished\\n\");\n\tif (resched)\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 2 * HZ);\n\tmutex_unlock(&server->reconnect_mutex);\n\n\t/* now we can safely release srv struct */\n\tif (tcon_exist)\n\t\tcifs_put_tcp_session(server, 1);\n}\n\nint\nSMB2_echo(struct TCP_Server_Info *server)\n{\n\tstruct smb2_echo_req *req;\n\tint rc = 0;\n\tstruct kvec iov[1];\n\tstruct smb_rqst rqst = { .rq_iov = iov,\n\t\t\t\t .rq_nvec = 1 };\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"In echo request\\n\");\n\n\tif (server->tcpStatus == CifsNeedNegotiate) {\n\t\t/* No need to send echo on newly established connections */\n\t\tqueue_delayed_work(cifsiod_wq, &server->reconnect, 0);\n\t\treturn rc;\n\t}\n\n\trc = smb2_plain_req_init(SMB2_ECHO, NULL, (void **)&req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\n\tiov[0].iov_len = total_len;\n\tiov[0].iov_base = (char *)req;\n\n\trc = cifs_call_async(server, &rqst, NULL, smb2_echo_callback, NULL,\n\t\t\t     server, CIFS_ECHO_OP, NULL);\n\tif (rc)\n\t\tcifs_dbg(FYI, \"Echo request failed: %d\\n\", rc);\n\n\tcifs_small_buf_release(req);\n\treturn rc;\n}\n\nint\nSMB2_flush(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t   u64 volatile_fid)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_flush_req *req;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buftype;\n\tint rc = 0;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Flush\\n\");\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_FLUSH, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_FLUSH_HE);\n\t\ttrace_smb3_flush_err(xid, persistent_fid, tcon->tid, ses->Suid,\n\t\t\t\t     rc);\n\t}\n\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\n/*\n * To form a chain of read requests, any read requests after the first should\n * have the end_of_chain boolean set to true.\n */\nstatic int\nsmb2_new_read_req(void **buf, unsigned int *total_len,\n\tstruct cifs_io_parms *io_parms, struct cifs_readdata *rdata,\n\tunsigned int remaining_bytes, int request_type)\n{\n\tint rc = -EACCES;\n\tstruct smb2_read_plain_req *req = NULL;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct TCP_Server_Info *server;\n\n\trc = smb2_plain_req_init(SMB2_READ, io_parms->tcon, (void **) &req,\n\t\t\t\t total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tserver = io_parms->tcon->ses->server;\n\tif (server == NULL)\n\t\treturn -ECONNABORTED;\n\n\tshdr = &req->sync_hdr;\n\tshdr->ProcessId = cpu_to_le32(io_parms->pid);\n\n\treq->PersistentFileId = io_parms->persistent_fid;\n\treq->VolatileFileId = io_parms->volatile_fid;\n\treq->ReadChannelInfoOffset = 0; /* reserved */\n\treq->ReadChannelInfoLength = 0; /* reserved */\n\treq->Channel = 0; /* reserved */\n\treq->MinimumCount = 0;\n\treq->Length = cpu_to_le32(io_parms->length);\n\treq->Offset = cpu_to_le64(io_parms->offset);\n\n\ttrace_smb3_read_enter(0 /* xid */,\n\t\t\tio_parms->persistent_fid,\n\t\t\tio_parms->tcon->tid, io_parms->tcon->ses->Suid,\n\t\t\tio_parms->offset, io_parms->length);\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If we want to do a RDMA write, fill in and append\n\t * smbd_buffer_descriptor_v1 to the end of read request\n\t */\n\tif (server->rdma && rdata && !server->sign &&\n\t\trdata->bytes >= server->smbd_conn->rdma_readwrite_threshold) {\n\n\t\tstruct smbd_buffer_descriptor_v1 *v1;\n\t\tbool need_invalidate =\n\t\t\tio_parms->tcon->ses->server->dialect == SMB30_PROT_ID;\n\n\t\trdata->mr = smbd_register_mr(\n\t\t\t\tserver->smbd_conn, rdata->pages,\n\t\t\t\trdata->nr_pages, rdata->page_offset,\n\t\t\t\trdata->tailsz, true, need_invalidate);\n\t\tif (!rdata->mr)\n\t\t\treturn -ENOBUFS;\n\n\t\treq->Channel = SMB2_CHANNEL_RDMA_V1_INVALIDATE;\n\t\tif (need_invalidate)\n\t\t\treq->Channel = SMB2_CHANNEL_RDMA_V1;\n\t\treq->ReadChannelInfoOffset =\n\t\t\tcpu_to_le16(offsetof(struct smb2_read_plain_req, Buffer));\n\t\treq->ReadChannelInfoLength =\n\t\t\tcpu_to_le16(sizeof(struct smbd_buffer_descriptor_v1));\n\t\tv1 = (struct smbd_buffer_descriptor_v1 *) &req->Buffer[0];\n\t\tv1->offset = cpu_to_le64(rdata->mr->mr->iova);\n\t\tv1->token = cpu_to_le32(rdata->mr->mr->rkey);\n\t\tv1->length = cpu_to_le32(rdata->mr->mr->length);\n\n\t\t*total_len += sizeof(*v1) - 1;\n\t}\n#endif\n\tif (request_type & CHAINED_REQUEST) {\n\t\tif (!(request_type & END_OF_CHAIN)) {\n\t\t\t/* next 8-byte aligned request */\n\t\t\t*total_len = DIV_ROUND_UP(*total_len, 8) * 8;\n\t\t\tshdr->NextCommand = cpu_to_le32(*total_len);\n\t\t} else /* END_OF_CHAIN */\n\t\t\tshdr->NextCommand = 0;\n\t\tif (request_type & RELATED_REQUEST) {\n\t\t\tshdr->Flags |= SMB2_FLAGS_RELATED_OPERATIONS;\n\t\t\t/*\n\t\t\t * Related requests use info from previous read request\n\t\t\t * in chain.\n\t\t\t */\n\t\t\tshdr->SessionId = 0xFFFFFFFF;\n\t\t\tshdr->TreeId = 0xFFFFFFFF;\n\t\t\treq->PersistentFileId = 0xFFFFFFFF;\n\t\t\treq->VolatileFileId = 0xFFFFFFFF;\n\t\t}\n\t}\n\tif (remaining_bytes > io_parms->length)\n\t\treq->RemainingBytes = cpu_to_le32(remaining_bytes);\n\telse\n\t\treq->RemainingBytes = 0;\n\n\t*buf = req;\n\treturn rc;\n}\n\nstatic void\nsmb2_readv_callback(struct mid_q_entry *mid)\n{\n\tstruct cifs_readdata *rdata = mid->callback_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(rdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct smb2_sync_hdr *shdr =\n\t\t\t\t(struct smb2_sync_hdr *)rdata->iov[0].iov_base;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\tstruct smb_rqst rqst = { .rq_iov = rdata->iov,\n\t\t\t\t .rq_nvec = 2,\n\t\t\t\t .rq_pages = rdata->pages,\n\t\t\t\t .rq_offset = rdata->page_offset,\n\t\t\t\t .rq_npages = rdata->nr_pages,\n\t\t\t\t .rq_pagesz = rdata->pagesz,\n\t\t\t\t .rq_tailsz = rdata->tailsz };\n\n\tcifs_dbg(FYI, \"%s: mid=%llu state=%d result=%d bytes=%u\\n\",\n\t\t __func__, mid->mid, mid->mid_state, rdata->result,\n\t\t rdata->bytes);\n\n\tswitch (mid->mid_state) {\n\tcase MID_RESPONSE_RECEIVED:\n\t\tcredits.value = le16_to_cpu(shdr->CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* result already set, check signature */\n\t\tif (server->sign && !mid->decrypted) {\n\t\t\tint rc;\n\n\t\t\trc = smb2_verify_signature(&rqst, server);\n\t\t\tif (rc)\n\t\t\t\tcifs_dbg(VFS, \"SMB signature verification returned error = %d\\n\",\n\t\t\t\t\t rc);\n\t\t}\n\t\t/* FIXME: should this be counted toward the initiating task? */\n\t\ttask_io_account_read(rdata->got_bytes);\n\t\tcifs_stats_bytes_read(tcon, rdata->got_bytes);\n\t\tbreak;\n\tcase MID_REQUEST_SUBMITTED:\n\tcase MID_RETRY_NEEDED:\n\t\trdata->result = -EAGAIN;\n\t\tif (server->sign && rdata->got_bytes)\n\t\t\t/* reset bytes number since we can not check a sign */\n\t\t\trdata->got_bytes = 0;\n\t\t/* FIXME: should this be counted toward the initiating task? */\n\t\ttask_io_account_read(rdata->got_bytes);\n\t\tcifs_stats_bytes_read(tcon, rdata->got_bytes);\n\t\tbreak;\n\tcase MID_RESPONSE_MALFORMED:\n\t\tcredits.value = le16_to_cpu(shdr->CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* fall through */\n\tdefault:\n\t\trdata->result = -EIO;\n\t}\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If this rdata has a memmory registered, the MR can be freed\n\t * MR needs to be freed as soon as I/O finishes to prevent deadlock\n\t * because they have limited number and are used for future I/Os\n\t */\n\tif (rdata->mr) {\n\t\tsmbd_deregister_mr(rdata->mr);\n\t\trdata->mr = NULL;\n\t}\n#endif\n\tif (rdata->result && rdata->result != -ENODATA) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_READ_HE);\n\t\ttrace_smb3_read_err(0 /* xid */,\n\t\t\t\t    rdata->cfile->fid.persistent_fid,\n\t\t\t\t    tcon->tid, tcon->ses->Suid, rdata->offset,\n\t\t\t\t    rdata->bytes, rdata->result);\n\t} else\n\t\ttrace_smb3_read_done(0 /* xid */,\n\t\t\t\t     rdata->cfile->fid.persistent_fid,\n\t\t\t\t     tcon->tid, tcon->ses->Suid,\n\t\t\t\t     rdata->offset, rdata->got_bytes);\n\n\tqueue_work(cifsiod_wq, &rdata->work);\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, 0);\n}\n\n/* smb2_async_readv - send an async read, and set up mid to handle result */\nint\nsmb2_async_readv(struct cifs_readdata *rdata)\n{\n\tint rc, flags = 0;\n\tchar *buf;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct cifs_io_parms io_parms;\n\tstruct smb_rqst rqst = { .rq_iov = rdata->iov,\n\t\t\t\t .rq_nvec = 1 };\n\tstruct TCP_Server_Info *server;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"%s: offset=%llu bytes=%u\\n\",\n\t\t __func__, rdata->offset, rdata->bytes);\n\n\tio_parms.tcon = tlink_tcon(rdata->cfile->tlink);\n\tio_parms.offset = rdata->offset;\n\tio_parms.length = rdata->bytes;\n\tio_parms.persistent_fid = rdata->cfile->fid.persistent_fid;\n\tio_parms.volatile_fid = rdata->cfile->fid.volatile_fid;\n\tio_parms.pid = rdata->pid;\n\n\tserver = io_parms.tcon->ses->server;\n\n\trc = smb2_new_read_req(\n\t\t(void **) &buf, &total_len, &io_parms, rdata, 0, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(io_parms.tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\trdata->iov[0].iov_base = buf;\n\trdata->iov[0].iov_len = total_len;\n\n\tshdr = (struct smb2_sync_hdr *)buf;\n\n\tif (rdata->credits.value > 0) {\n\t\tshdr->CreditCharge = cpu_to_le16(DIV_ROUND_UP(rdata->bytes,\n\t\t\t\t\t\tSMB2_MAX_BUFFER_SIZE));\n\t\tshdr->CreditRequest =\n\t\t\tcpu_to_le16(le16_to_cpu(shdr->CreditCharge) + 1);\n\n\t\trc = adjust_credits(server, &rdata->credits, rdata->bytes);\n\t\tif (rc)\n\t\t\tgoto async_readv_out;\n\n\t\tflags |= CIFS_HAS_CREDITS;\n\t}\n\n\tkref_get(&rdata->refcount);\n\trc = cifs_call_async(io_parms.tcon->ses->server, &rqst,\n\t\t\t     cifs_readv_receive, smb2_readv_callback,\n\t\t\t     smb3_handle_read_data, rdata, flags,\n\t\t\t     &rdata->credits);\n\tif (rc) {\n\t\tkref_put(&rdata->refcount, cifs_readdata_release);\n\t\tcifs_stats_fail_inc(io_parms.tcon, SMB2_READ_HE);\n\t\ttrace_smb3_read_err(0 /* xid */, io_parms.persistent_fid,\n\t\t\t\t    io_parms.tcon->tid,\n\t\t\t\t    io_parms.tcon->ses->Suid,\n\t\t\t\t    io_parms.offset, io_parms.length, rc);\n\t}\n\nasync_readv_out:\n\tcifs_small_buf_release(buf);\n\treturn rc;\n}\n\nint\nSMB2_read(const unsigned int xid, struct cifs_io_parms *io_parms,\n\t  unsigned int *nbytes, char **buf, int *buf_type)\n{\n\tstruct smb_rqst rqst;\n\tint resp_buftype, rc = -EACCES;\n\tstruct smb2_read_plain_req *req = NULL;\n\tstruct smb2_read_rsp *rsp = NULL;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tunsigned int total_len;\n\tint flags = CIFS_LOG_ERROR;\n\tstruct cifs_ses *ses = io_parms->tcon->ses;\n\n\t*nbytes = 0;\n\trc = smb2_new_read_req((void **)&req, &total_len, io_parms, NULL, 0, 0);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(io_parms->tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_read_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tif (rc != -ENODATA) {\n\t\t\tcifs_stats_fail_inc(io_parms->tcon, SMB2_READ_HE);\n\t\t\tcifs_dbg(VFS, \"Send error in read = %d\\n\", rc);\n\t\t\ttrace_smb3_read_err(xid, req->PersistentFileId,\n\t\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t\t    io_parms->offset, io_parms->length,\n\t\t\t\t\t    rc);\n\t\t} else\n\t\t\ttrace_smb3_read_done(xid, req->PersistentFileId,\n\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t    io_parms->offset, 0);\n\t\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\t\treturn rc == -ENODATA ? 0 : rc;\n\t} else\n\t\ttrace_smb3_read_done(xid, req->PersistentFileId,\n\t\t\t\t    io_parms->tcon->tid, ses->Suid,\n\t\t\t\t    io_parms->offset, io_parms->length);\n\n\tcifs_small_buf_release(req);\n\n\t*nbytes = le32_to_cpu(rsp->DataLength);\n\tif ((*nbytes > CIFS_MAX_MSGSIZE) ||\n\t    (*nbytes > io_parms->length)) {\n\t\tcifs_dbg(FYI, \"bad length %d for count %d\\n\",\n\t\t\t *nbytes, io_parms->length);\n\t\trc = -EIO;\n\t\t*nbytes = 0;\n\t}\n\n\tif (*buf) {\n\t\tmemcpy(*buf, (char *)rsp + rsp->DataOffset, *nbytes);\n\t\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\t} else if (resp_buftype != CIFS_NO_BUFFER) {\n\t\t*buf = rsp_iov.iov_base;\n\t\tif (resp_buftype == CIFS_SMALL_BUFFER)\n\t\t\t*buf_type = CIFS_SMALL_BUFFER;\n\t\telse if (resp_buftype == CIFS_LARGE_BUFFER)\n\t\t\t*buf_type = CIFS_LARGE_BUFFER;\n\t}\n\treturn rc;\n}\n\n/*\n * Check the mid_state and signature on received buffer (if any), and queue the\n * workqueue completion task.\n */\nstatic void\nsmb2_writev_callback(struct mid_q_entry *mid)\n{\n\tstruct cifs_writedata *wdata = mid->callback_data;\n\tstruct cifs_tcon *tcon = tlink_tcon(wdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tunsigned int written;\n\tstruct smb2_write_rsp *rsp = (struct smb2_write_rsp *)mid->resp_buf;\n\tstruct cifs_credits credits = { .value = 0, .instance = 0 };\n\n\tswitch (mid->mid_state) {\n\tcase MID_RESPONSE_RECEIVED:\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\twdata->result = smb2_check_receive(mid, server, 0);\n\t\tif (wdata->result != 0)\n\t\t\tbreak;\n\n\t\twritten = le32_to_cpu(rsp->DataLength);\n\t\t/*\n\t\t * Mask off high 16 bits when bytes written as returned\n\t\t * by the server is greater than bytes requested by the\n\t\t * client. OS/2 servers are known to set incorrect\n\t\t * CountHigh values.\n\t\t */\n\t\tif (written > wdata->bytes)\n\t\t\twritten &= 0xFFFF;\n\n\t\tif (written < wdata->bytes)\n\t\t\twdata->result = -ENOSPC;\n\t\telse\n\t\t\twdata->bytes = written;\n\t\tbreak;\n\tcase MID_REQUEST_SUBMITTED:\n\tcase MID_RETRY_NEEDED:\n\t\twdata->result = -EAGAIN;\n\t\tbreak;\n\tcase MID_RESPONSE_MALFORMED:\n\t\tcredits.value = le16_to_cpu(rsp->sync_hdr.CreditRequest);\n\t\tcredits.instance = server->reconnect_instance;\n\t\t/* fall through */\n\tdefault:\n\t\twdata->result = -EIO;\n\t\tbreak;\n\t}\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If this wdata has a memory registered, the MR can be freed\n\t * The number of MRs available is limited, it's important to recover\n\t * used MR as soon as I/O is finished. Hold MR longer in the later\n\t * I/O process can possibly result in I/O deadlock due to lack of MR\n\t * to send request on I/O retry\n\t */\n\tif (wdata->mr) {\n\t\tsmbd_deregister_mr(wdata->mr);\n\t\twdata->mr = NULL;\n\t}\n#endif\n\tif (wdata->result) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_WRITE_HE);\n\t\ttrace_smb3_write_err(0 /* no xid */,\n\t\t\t\t     wdata->cfile->fid.persistent_fid,\n\t\t\t\t     tcon->tid, tcon->ses->Suid, wdata->offset,\n\t\t\t\t     wdata->bytes, wdata->result);\n\t} else\n\t\ttrace_smb3_write_done(0 /* no xid */,\n\t\t\t\t      wdata->cfile->fid.persistent_fid,\n\t\t\t\t      tcon->tid, tcon->ses->Suid,\n\t\t\t\t      wdata->offset, wdata->bytes);\n\n\tqueue_work(cifsiod_wq, &wdata->work);\n\tDeleteMidQEntry(mid);\n\tadd_credits(server, &credits, 0);\n}\n\n/* smb2_async_writev - send an async write, and set up mid to handle result */\nint\nsmb2_async_writev(struct cifs_writedata *wdata,\n\t\t  void (*release)(struct kref *kref))\n{\n\tint rc = -EACCES, flags = 0;\n\tstruct smb2_write_req *req = NULL;\n\tstruct smb2_sync_hdr *shdr;\n\tstruct cifs_tcon *tcon = tlink_tcon(wdata->cfile->tlink);\n\tstruct TCP_Server_Info *server = tcon->ses->server;\n\tstruct kvec iov[1];\n\tstruct smb_rqst rqst = { };\n\tunsigned int total_len;\n\n\trc = smb2_plain_req_init(SMB2_WRITE, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tshdr = (struct smb2_sync_hdr *)req;\n\tshdr->ProcessId = cpu_to_le32(wdata->cfile->pid);\n\n\treq->PersistentFileId = wdata->cfile->fid.persistent_fid;\n\treq->VolatileFileId = wdata->cfile->fid.volatile_fid;\n\treq->WriteChannelInfoOffset = 0;\n\treq->WriteChannelInfoLength = 0;\n\treq->Channel = 0;\n\treq->Offset = cpu_to_le64(wdata->offset);\n\treq->DataOffset = cpu_to_le16(\n\t\t\t\toffsetof(struct smb2_write_req, Buffer));\n\treq->RemainingBytes = 0;\n\n\ttrace_smb3_write_enter(0 /* xid */, wdata->cfile->fid.persistent_fid,\n\t\ttcon->tid, tcon->ses->Suid, wdata->offset, wdata->bytes);\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/*\n\t * If we want to do a server RDMA read, fill in and append\n\t * smbd_buffer_descriptor_v1 to the end of write request\n\t */\n\tif (server->rdma && !server->sign && wdata->bytes >=\n\t\tserver->smbd_conn->rdma_readwrite_threshold) {\n\n\t\tstruct smbd_buffer_descriptor_v1 *v1;\n\t\tbool need_invalidate = server->dialect == SMB30_PROT_ID;\n\n\t\twdata->mr = smbd_register_mr(\n\t\t\t\tserver->smbd_conn, wdata->pages,\n\t\t\t\twdata->nr_pages, wdata->page_offset,\n\t\t\t\twdata->tailsz, false, need_invalidate);\n\t\tif (!wdata->mr) {\n\t\t\trc = -ENOBUFS;\n\t\t\tgoto async_writev_out;\n\t\t}\n\t\treq->Length = 0;\n\t\treq->DataOffset = 0;\n\t\tif (wdata->nr_pages > 1)\n\t\t\treq->RemainingBytes =\n\t\t\t\tcpu_to_le32(\n\t\t\t\t\t(wdata->nr_pages - 1) * wdata->pagesz -\n\t\t\t\t\twdata->page_offset + wdata->tailsz\n\t\t\t\t);\n\t\telse\n\t\t\treq->RemainingBytes = cpu_to_le32(wdata->tailsz);\n\t\treq->Channel = SMB2_CHANNEL_RDMA_V1_INVALIDATE;\n\t\tif (need_invalidate)\n\t\t\treq->Channel = SMB2_CHANNEL_RDMA_V1;\n\t\treq->WriteChannelInfoOffset =\n\t\t\tcpu_to_le16(offsetof(struct smb2_write_req, Buffer));\n\t\treq->WriteChannelInfoLength =\n\t\t\tcpu_to_le16(sizeof(struct smbd_buffer_descriptor_v1));\n\t\tv1 = (struct smbd_buffer_descriptor_v1 *) &req->Buffer[0];\n\t\tv1->offset = cpu_to_le64(wdata->mr->mr->iova);\n\t\tv1->token = cpu_to_le32(wdata->mr->mr->rkey);\n\t\tv1->length = cpu_to_le32(wdata->mr->mr->length);\n\t}\n#endif\n\tiov[0].iov_len = total_len - 1;\n\tiov[0].iov_base = (char *)req;\n\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\trqst.rq_pages = wdata->pages;\n\trqst.rq_offset = wdata->page_offset;\n\trqst.rq_npages = wdata->nr_pages;\n\trqst.rq_pagesz = wdata->pagesz;\n\trqst.rq_tailsz = wdata->tailsz;\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\tif (wdata->mr) {\n\t\tiov[0].iov_len += sizeof(struct smbd_buffer_descriptor_v1);\n\t\trqst.rq_npages = 0;\n\t}\n#endif\n\tcifs_dbg(FYI, \"async write at %llu %u bytes\\n\",\n\t\t wdata->offset, wdata->bytes);\n\n#ifdef CONFIG_CIFS_SMB_DIRECT\n\t/* For RDMA read, I/O size is in RemainingBytes not in Length */\n\tif (!wdata->mr)\n\t\treq->Length = cpu_to_le32(wdata->bytes);\n#else\n\treq->Length = cpu_to_le32(wdata->bytes);\n#endif\n\n\tif (wdata->credits.value > 0) {\n\t\tshdr->CreditCharge = cpu_to_le16(DIV_ROUND_UP(wdata->bytes,\n\t\t\t\t\t\t    SMB2_MAX_BUFFER_SIZE));\n\t\tshdr->CreditRequest =\n\t\t\tcpu_to_le16(le16_to_cpu(shdr->CreditCharge) + 1);\n\n\t\trc = adjust_credits(server, &wdata->credits, wdata->bytes);\n\t\tif (rc)\n\t\t\tgoto async_writev_out;\n\n\t\tflags |= CIFS_HAS_CREDITS;\n\t}\n\n\tkref_get(&wdata->refcount);\n\trc = cifs_call_async(server, &rqst, NULL, smb2_writev_callback, NULL,\n\t\t\t     wdata, flags, &wdata->credits);\n\n\tif (rc) {\n\t\ttrace_smb3_write_err(0 /* no xid */, req->PersistentFileId,\n\t\t\t\t     tcon->tid, tcon->ses->Suid, wdata->offset,\n\t\t\t\t     wdata->bytes, rc);\n\t\tkref_put(&wdata->refcount, release);\n\t\tcifs_stats_fail_inc(tcon, SMB2_WRITE_HE);\n\t}\n\nasync_writev_out:\n\tcifs_small_buf_release(req);\n\treturn rc;\n}\n\n/*\n * SMB2_write function gets iov pointer to kvec array with n_vec as a length.\n * The length field from io_parms must be at least 1 and indicates a number of\n * elements with data to write that begins with position 1 in iov array. All\n * data length is specified by count.\n */\nint\nSMB2_write(const unsigned int xid, struct cifs_io_parms *io_parms,\n\t   unsigned int *nbytes, struct kvec *iov, int n_vec)\n{\n\tstruct smb_rqst rqst;\n\tint rc = 0;\n\tstruct smb2_write_req *req = NULL;\n\tstruct smb2_write_rsp *rsp = NULL;\n\tint resp_buftype;\n\tstruct kvec rsp_iov;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\t*nbytes = 0;\n\n\tif (n_vec < 1)\n\t\treturn rc;\n\n\trc = smb2_plain_req_init(SMB2_WRITE, io_parms->tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (io_parms->tcon->ses->server == NULL)\n\t\treturn -ECONNABORTED;\n\n\tif (smb3_encryption_required(io_parms->tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(io_parms->pid);\n\n\treq->PersistentFileId = io_parms->persistent_fid;\n\treq->VolatileFileId = io_parms->volatile_fid;\n\treq->WriteChannelInfoOffset = 0;\n\treq->WriteChannelInfoLength = 0;\n\treq->Channel = 0;\n\treq->Length = cpu_to_le32(io_parms->length);\n\treq->Offset = cpu_to_le64(io_parms->offset);\n\treq->DataOffset = cpu_to_le16(\n\t\t\t\toffsetof(struct smb2_write_req, Buffer));\n\treq->RemainingBytes = 0;\n\n\ttrace_smb3_write_enter(xid, io_parms->persistent_fid,\n\t\tio_parms->tcon->tid, io_parms->tcon->ses->Suid,\n\t\tio_parms->offset, io_parms->length);\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = n_vec + 1;\n\n\trc = cifs_send_recv(xid, io_parms->tcon->ses, &rqst,\n\t\t\t    &resp_buftype, flags, &rsp_iov);\n\trsp = (struct smb2_write_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\ttrace_smb3_write_err(xid, req->PersistentFileId,\n\t\t\t\t     io_parms->tcon->tid,\n\t\t\t\t     io_parms->tcon->ses->Suid,\n\t\t\t\t     io_parms->offset, io_parms->length, rc);\n\t\tcifs_stats_fail_inc(io_parms->tcon, SMB2_WRITE_HE);\n\t\tcifs_dbg(VFS, \"Send error in write = %d\\n\", rc);\n\t} else {\n\t\t*nbytes = le32_to_cpu(rsp->DataLength);\n\t\ttrace_smb3_write_done(xid, req->PersistentFileId,\n\t\t\t\t     io_parms->tcon->tid,\n\t\t\t\t     io_parms->tcon->ses->Suid,\n\t\t\t\t     io_parms->offset, *nbytes);\n\t}\n\n\tcifs_small_buf_release(req);\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nstatic unsigned int\nnum_entries(char *bufstart, char *end_of_buf, char **lastentry, size_t size)\n{\n\tint len;\n\tunsigned int entrycount = 0;\n\tunsigned int next_offset = 0;\n\tchar *entryptr;\n\tFILE_DIRECTORY_INFO *dir_info;\n\n\tif (bufstart == NULL)\n\t\treturn 0;\n\n\tentryptr = bufstart;\n\n\twhile (1) {\n\t\tif (entryptr + next_offset < entryptr ||\n\t\t    entryptr + next_offset > end_of_buf ||\n\t\t    entryptr + next_offset + size > end_of_buf) {\n\t\t\tcifs_dbg(VFS, \"malformed search entry would overflow\\n\");\n\t\t\tbreak;\n\t\t}\n\n\t\tentryptr = entryptr + next_offset;\n\t\tdir_info = (FILE_DIRECTORY_INFO *)entryptr;\n\n\t\tlen = le32_to_cpu(dir_info->FileNameLength);\n\t\tif (entryptr + len < entryptr ||\n\t\t    entryptr + len > end_of_buf ||\n\t\t    entryptr + len + size > end_of_buf) {\n\t\t\tcifs_dbg(VFS, \"directory entry name would overflow frame end of buf %p\\n\",\n\t\t\t\t end_of_buf);\n\t\t\tbreak;\n\t\t}\n\n\t\t*lastentry = entryptr;\n\t\tentrycount++;\n\n\t\tnext_offset = le32_to_cpu(dir_info->NextEntryOffset);\n\t\tif (!next_offset)\n\t\t\tbreak;\n\t}\n\n\treturn entrycount;\n}\n\n/*\n * Readdir/FindFirst\n */\nint\nSMB2_query_directory(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t     u64 persistent_fid, u64 volatile_fid, int index,\n\t\t     struct cifs_search_info *srch_inf)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_directory_req *req;\n\tstruct smb2_query_directory_rsp *rsp = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint len;\n\tint resp_buftype = CIFS_NO_BUFFER;\n\tunsigned char *bufptr;\n\tstruct TCP_Server_Info *server;\n\tstruct cifs_ses *ses = tcon->ses;\n\t__le16 asteriks = cpu_to_le16('*');\n\tchar *end_of_smb;\n\tunsigned int output_size = CIFSMaxBufSize;\n\tsize_t info_buf_size;\n\tint flags = 0;\n\tunsigned int total_len;\n\n\tif (ses && (ses->server))\n\t\tserver = ses->server;\n\telse\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_DIRECTORY, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tswitch (srch_inf->info_level) {\n\tcase SMB_FIND_FILE_DIRECTORY_INFO:\n\t\treq->FileInformationClass = FILE_DIRECTORY_INFORMATION;\n\t\tinfo_buf_size = sizeof(FILE_DIRECTORY_INFO) - 1;\n\t\tbreak;\n\tcase SMB_FIND_FILE_ID_FULL_DIR_INFO:\n\t\treq->FileInformationClass = FILEID_FULL_DIRECTORY_INFORMATION;\n\t\tinfo_buf_size = sizeof(SEARCH_ID_FULL_DIR_INFO) - 1;\n\t\tbreak;\n\tdefault:\n\t\tcifs_dbg(VFS, \"info level %u isn't supported\\n\",\n\t\t\t srch_inf->info_level);\n\t\trc = -EINVAL;\n\t\tgoto qdir_exit;\n\t}\n\n\treq->FileIndex = cpu_to_le32(index);\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tlen = 0x2;\n\tbufptr = req->Buffer;\n\tmemcpy(bufptr, &asteriks, len);\n\n\treq->FileNameOffset =\n\t\tcpu_to_le16(sizeof(struct smb2_query_directory_req) - 1);\n\treq->FileNameLength = cpu_to_le16(len);\n\t/*\n\t * BB could be 30 bytes or so longer if we used SMB2 specific\n\t * buffer lengths, but this is safe and close enough.\n\t */\n\toutput_size = min_t(unsigned int, output_size, server->maxBuf);\n\toutput_size = min_t(unsigned int, output_size, 2 << 15);\n\treq->OutputBufferLength = cpu_to_le32(output_size);\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tiov[1].iov_base = (char *)(req->Buffer);\n\tiov[1].iov_len = len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\ttrace_smb3_query_dir_enter(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, output_size);\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\trsp = (struct smb2_query_directory_rsp *)rsp_iov.iov_base;\n\n\tif (rc) {\n\t\tif (rc == -ENODATA &&\n\t\t    rsp->sync_hdr.Status == STATUS_NO_MORE_FILES) {\n\t\t\ttrace_smb3_query_dir_done(xid, persistent_fid,\n\t\t\t\ttcon->tid, tcon->ses->Suid, index, 0);\n\t\t\tsrch_inf->endOfSearch = true;\n\t\t\trc = 0;\n\t\t} else {\n\t\t\ttrace_smb3_query_dir_err(xid, persistent_fid, tcon->tid,\n\t\t\t\ttcon->ses->Suid, index, 0, rc);\n\t\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_DIRECTORY_HE);\n\t\t}\n\t\tgoto qdir_exit;\n\t}\n\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       info_buf_size);\n\tif (rc) {\n\t\ttrace_smb3_query_dir_err(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, 0, rc);\n\t\tgoto qdir_exit;\n\t}\n\n\tsrch_inf->unicode = true;\n\n\tif (srch_inf->ntwrk_buf_start) {\n\t\tif (srch_inf->smallBuf)\n\t\t\tcifs_small_buf_release(srch_inf->ntwrk_buf_start);\n\t\telse\n\t\t\tcifs_buf_release(srch_inf->ntwrk_buf_start);\n\t}\n\tsrch_inf->ntwrk_buf_start = (char *)rsp;\n\tsrch_inf->srch_entries_start = srch_inf->last_entry =\n\t\t(char *)rsp + le16_to_cpu(rsp->OutputBufferOffset);\n\tend_of_smb = rsp_iov.iov_len + (char *)rsp;\n\tsrch_inf->entries_in_buffer =\n\t\t\tnum_entries(srch_inf->srch_entries_start, end_of_smb,\n\t\t\t\t    &srch_inf->last_entry, info_buf_size);\n\tsrch_inf->index_of_last_entry += srch_inf->entries_in_buffer;\n\tcifs_dbg(FYI, \"num entries %d last_index %lld srch start %p srch end %p\\n\",\n\t\t srch_inf->entries_in_buffer, srch_inf->index_of_last_entry,\n\t\t srch_inf->srch_entries_start, srch_inf->last_entry);\n\tif (resp_buftype == CIFS_LARGE_BUFFER)\n\t\tsrch_inf->smallBuf = false;\n\telse if (resp_buftype == CIFS_SMALL_BUFFER)\n\t\tsrch_inf->smallBuf = true;\n\telse\n\t\tcifs_dbg(VFS, \"illegal search buffer type\\n\");\n\n\ttrace_smb3_query_dir_done(xid, persistent_fid, tcon->tid,\n\t\t\ttcon->ses->Suid, index, srch_inf->entries_in_buffer);\n\treturn rc;\n\nqdir_exit:\n\tfree_rsp_buf(resp_buftype, rsp);\n\treturn rc;\n}\n\nint\nSMB2_set_info_init(struct cifs_tcon *tcon, struct smb_rqst *rqst,\n\t       u64 persistent_fid, u64 volatile_fid, u32 pid, u8 info_class,\n\t       u8 info_type, u32 additional_info,\n\t\tvoid **data, unsigned int *size)\n{\n\tstruct smb2_set_info_req *req;\n\tstruct kvec *iov = rqst->rq_iov;\n\tunsigned int i, total_len;\n\tint rc;\n\n\trc = smb2_plain_req_init(SMB2_SET_INFO, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(pid);\n\treq->InfoType = info_type;\n\treq->FileInfoClass = info_class;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\treq->AdditionalInformation = cpu_to_le32(additional_info);\n\n\treq->BufferOffset =\n\t\t\tcpu_to_le16(sizeof(struct smb2_set_info_req) - 1);\n\treq->BufferLength = cpu_to_le32(*size);\n\n\tmemcpy(req->Buffer, *data, *size);\n\ttotal_len += *size;\n\n\tiov[0].iov_base = (char *)req;\n\t/* 1 for Buffer */\n\tiov[0].iov_len = total_len - 1;\n\n\tfor (i = 1; i < rqst->rq_nvec; i++) {\n\t\tle32_add_cpu(&req->BufferLength, size[i]);\n\t\tiov[i].iov_base = (char *)data[i];\n\t\tiov[i].iov_len = size[i];\n\t}\n\n\treturn 0;\n}\n\nvoid\nSMB2_set_info_free(struct smb_rqst *rqst)\n{\n\tif (rqst && rqst->rq_iov)\n\t\tcifs_buf_release(rqst->rq_iov[0].iov_base); /* request */\n}\n\nstatic int\nsend_set_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t       u64 persistent_fid, u64 volatile_fid, u32 pid, u8 info_class,\n\t       u8 info_type, u32 additional_info, unsigned int num,\n\t\tvoid **data, unsigned int *size)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_set_info_rsp *rsp = NULL;\n\tstruct kvec *iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = 0;\n\n\tif (!ses || !(ses->server))\n\t\treturn -EIO;\n\n\tif (!num)\n\t\treturn -EINVAL;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tiov = kmalloc_array(num, sizeof(struct kvec), GFP_KERNEL);\n\tif (!iov)\n\t\treturn -ENOMEM;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = num;\n\n\trc = SMB2_set_info_init(tcon, &rqst, persistent_fid, volatile_fid, pid,\n\t\t\t\tinfo_class, info_type, additional_info,\n\t\t\t\tdata, size);\n\tif (rc) {\n\t\tkfree(iov);\n\t\treturn rc;\n\t}\n\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags,\n\t\t\t    &rsp_iov);\n\tSMB2_set_info_free(&rqst);\n\trsp = (struct smb2_set_info_rsp *)rsp_iov.iov_base;\n\n\tif (rc != 0) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_SET_INFO_HE);\n\t\ttrace_smb3_set_info_err(xid, persistent_fid, tcon->tid,\n\t\t\t\tses->Suid, info_class, (__u32)info_type, rc);\n\t}\n\n\tfree_rsp_buf(resp_buftype, rsp);\n\tkfree(iov);\n\treturn rc;\n}\n\nint\nSMB2_set_eof(const unsigned int xid, struct cifs_tcon *tcon, u64 persistent_fid,\n\t     u64 volatile_fid, u32 pid, __le64 *eof)\n{\n\tstruct smb2_file_eof_info info;\n\tvoid *data;\n\tunsigned int size;\n\n\tinfo.EndOfFile = *eof;\n\n\tdata = &info;\n\tsize = sizeof(struct smb2_file_eof_info);\n\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tpid, FILE_END_OF_FILE_INFORMATION, SMB2_O_INFO_FILE,\n\t\t\t0, 1, &data, &size);\n}\n\nint\nSMB2_set_acl(const unsigned int xid, struct cifs_tcon *tcon,\n\t\tu64 persistent_fid, u64 volatile_fid,\n\t\tstruct cifs_ntsd *pnntsd, int pacllen, int aclflag)\n{\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\t\tcurrent->tgid, 0, SMB2_O_INFO_SECURITY, aclflag,\n\t\t\t1, (void **)&pnntsd, &pacllen);\n}\n\nint\nSMB2_set_ea(const unsigned int xid, struct cifs_tcon *tcon,\n\t    u64 persistent_fid, u64 volatile_fid,\n\t    struct smb2_file_full_ea_info *buf, int len)\n{\n\treturn send_set_info(xid, tcon, persistent_fid, volatile_fid,\n\t\tcurrent->tgid, FILE_FULL_EA_INFORMATION, SMB2_O_INFO_FILE,\n\t\t0, 1, (void **)&buf, &len);\n}\n\nint\nSMB2_oplock_break(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t  const u64 persistent_fid, const u64 volatile_fid,\n\t\t  __u8 oplock_level)\n{\n\tstruct smb_rqst rqst;\n\tint rc;\n\tstruct smb2_oplock_break *req = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = CIFS_OBREAK_OP;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\n\tcifs_dbg(FYI, \"SMB2_oplock_break\\n\");\n\trc = smb2_plain_req_init(SMB2_OPLOCK_BREAK, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->VolatileFid = volatile_fid;\n\treq->PersistentFid = persistent_fid;\n\treq->OplockLevel = oplock_level;\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_OPLOCK_BREAK_HE);\n\t\tcifs_dbg(FYI, \"Send error in Oplock Break = %d\\n\", rc);\n\t}\n\n\treturn rc;\n}\n\nvoid\nsmb2_copy_fs_info_to_kstatfs(struct smb2_fs_full_size_info *pfs_inf,\n\t\t\t     struct kstatfs *kst)\n{\n\tkst->f_bsize = le32_to_cpu(pfs_inf->BytesPerSector) *\n\t\t\t  le32_to_cpu(pfs_inf->SectorsPerAllocationUnit);\n\tkst->f_blocks = le64_to_cpu(pfs_inf->TotalAllocationUnits);\n\tkst->f_bfree  = kst->f_bavail =\n\t\t\tle64_to_cpu(pfs_inf->CallerAvailableAllocationUnits);\n\treturn;\n}\n\nstatic void\ncopy_posix_fs_info_to_kstatfs(FILE_SYSTEM_POSIX_INFO *response_data,\n\t\t\tstruct kstatfs *kst)\n{\n\tkst->f_bsize = le32_to_cpu(response_data->BlockSize);\n\tkst->f_blocks = le64_to_cpu(response_data->TotalBlocks);\n\tkst->f_bfree =  le64_to_cpu(response_data->BlocksAvail);\n\tif (response_data->UserBlocksAvail == cpu_to_le64(-1))\n\t\tkst->f_bavail = kst->f_bfree;\n\telse\n\t\tkst->f_bavail = le64_to_cpu(response_data->UserBlocksAvail);\n\tif (response_data->TotalFileNodes != cpu_to_le64(-1))\n\t\tkst->f_files = le64_to_cpu(response_data->TotalFileNodes);\n\tif (response_data->FreeFileNodes != cpu_to_le64(-1))\n\t\tkst->f_ffree = le64_to_cpu(response_data->FreeFileNodes);\n\n\treturn;\n}\n\nstatic int\nbuild_qfs_info_req(struct kvec *iov, struct cifs_tcon *tcon, int level,\n\t\t   int outbuf_len, u64 persistent_fid, u64 volatile_fid)\n{\n\tint rc;\n\tstruct smb2_query_info_req *req;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"Query FSInfo level %d\\n\", level);\n\n\tif ((tcon->ses == NULL) || (tcon->ses->server == NULL))\n\t\treturn -EIO;\n\n\trc = smb2_plain_req_init(SMB2_QUERY_INFO, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\treq->InfoType = SMB2_O_INFO_FILESYSTEM;\n\treq->FileInfoClass = level;\n\treq->PersistentFileId = persistent_fid;\n\treq->VolatileFileId = volatile_fid;\n\t/* 1 for pad */\n\treq->InputBufferOffset =\n\t\t\tcpu_to_le16(sizeof(struct smb2_query_info_req) - 1);\n\treq->OutputBufferLength = cpu_to_le32(\n\t\toutbuf_len + sizeof(struct smb2_query_info_rsp) - 1);\n\n\tiov->iov_base = (char *)req;\n\tiov->iov_len = total_len;\n\treturn 0;\n}\n\nint\nSMB311_posix_qfs_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, struct kstatfs *fsdata)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tFILE_SYSTEM_POSIX_INFO *info = NULL;\n\tint flags = 0;\n\n\trc = build_qfs_info_req(&iov, tcon, FS_POSIX_INFORMATION,\n\t\t\t\tsizeof(FILE_SYSTEM_POSIX_INFO),\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto posix_qfsinf_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tinfo = (FILE_SYSTEM_POSIX_INFO *)(\n\t\tle16_to_cpu(rsp->OutputBufferOffset) + (char *)rsp);\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       sizeof(FILE_SYSTEM_POSIX_INFO));\n\tif (!rc)\n\t\tcopy_posix_fs_info_to_kstatfs(info, fsdata);\n\nposix_qfsinf_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nSMB2_QFS_info(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, struct kstatfs *fsdata)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype;\n\tstruct cifs_ses *ses = tcon->ses;\n\tstruct smb2_fs_full_size_info *info = NULL;\n\tint flags = 0;\n\n\trc = build_qfs_info_req(&iov, tcon, FS_FULL_SIZE_INFORMATION,\n\t\t\t\tsizeof(struct smb2_fs_full_size_info),\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto qfsinf_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\tinfo = (struct smb2_fs_full_size_info *)(\n\t\tle16_to_cpu(rsp->OutputBufferOffset) + (char *)rsp);\n\trc = smb2_validate_iov(le16_to_cpu(rsp->OutputBufferOffset),\n\t\t\t       le32_to_cpu(rsp->OutputBufferLength), &rsp_iov,\n\t\t\t       sizeof(struct smb2_fs_full_size_info));\n\tif (!rc)\n\t\tsmb2_copy_fs_info_to_kstatfs(info, fsdata);\n\nqfsinf_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nSMB2_QFS_attr(const unsigned int xid, struct cifs_tcon *tcon,\n\t      u64 persistent_fid, u64 volatile_fid, int level)\n{\n\tstruct smb_rqst rqst;\n\tstruct smb2_query_info_rsp *rsp = NULL;\n\tstruct kvec iov;\n\tstruct kvec rsp_iov;\n\tint rc = 0;\n\tint resp_buftype, max_len, min_len;\n\tstruct cifs_ses *ses = tcon->ses;\n\tunsigned int rsp_len, offset;\n\tint flags = 0;\n\n\tif (level == FS_DEVICE_INFORMATION) {\n\t\tmax_len = sizeof(FILE_SYSTEM_DEVICE_INFO);\n\t\tmin_len = sizeof(FILE_SYSTEM_DEVICE_INFO);\n\t} else if (level == FS_ATTRIBUTE_INFORMATION) {\n\t\tmax_len = sizeof(FILE_SYSTEM_ATTRIBUTE_INFO);\n\t\tmin_len = MIN_FS_ATTR_INFO_SIZE;\n\t} else if (level == FS_SECTOR_SIZE_INFORMATION) {\n\t\tmax_len = sizeof(struct smb3_fs_ss_info);\n\t\tmin_len = sizeof(struct smb3_fs_ss_info);\n\t} else if (level == FS_VOLUME_INFORMATION) {\n\t\tmax_len = sizeof(struct smb3_fs_vol_info) + MAX_VOL_LABEL_LEN;\n\t\tmin_len = sizeof(struct smb3_fs_vol_info);\n\t} else {\n\t\tcifs_dbg(FYI, \"Invalid qfsinfo level %d\\n\", level);\n\t\treturn -EINVAL;\n\t}\n\n\trc = build_qfs_info_req(&iov, tcon, level, max_len,\n\t\t\t\tpersistent_fid, volatile_fid);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = &iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buftype, flags, &rsp_iov);\n\tcifs_small_buf_release(iov.iov_base);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_QUERY_INFO_HE);\n\t\tgoto qfsattr_exit;\n\t}\n\trsp = (struct smb2_query_info_rsp *)rsp_iov.iov_base;\n\n\trsp_len = le32_to_cpu(rsp->OutputBufferLength);\n\toffset = le16_to_cpu(rsp->OutputBufferOffset);\n\trc = smb2_validate_iov(offset, rsp_len, &rsp_iov, min_len);\n\tif (rc)\n\t\tgoto qfsattr_exit;\n\n\tif (level == FS_ATTRIBUTE_INFORMATION)\n\t\tmemcpy(&tcon->fsAttrInfo, offset\n\t\t\t+ (char *)rsp, min_t(unsigned int,\n\t\t\trsp_len, max_len));\n\telse if (level == FS_DEVICE_INFORMATION)\n\t\tmemcpy(&tcon->fsDevInfo, offset\n\t\t\t+ (char *)rsp, sizeof(FILE_SYSTEM_DEVICE_INFO));\n\telse if (level == FS_SECTOR_SIZE_INFORMATION) {\n\t\tstruct smb3_fs_ss_info *ss_info = (struct smb3_fs_ss_info *)\n\t\t\t(offset + (char *)rsp);\n\t\ttcon->ss_flags = le32_to_cpu(ss_info->Flags);\n\t\ttcon->perf_sector_size =\n\t\t\tle32_to_cpu(ss_info->PhysicalBytesPerSectorForPerf);\n\t} else if (level == FS_VOLUME_INFORMATION) {\n\t\tstruct smb3_fs_vol_info *vol_info = (struct smb3_fs_vol_info *)\n\t\t\t(offset + (char *)rsp);\n\t\ttcon->vol_serial_number = vol_info->VolumeSerialNumber;\n\t\ttcon->vol_create_time = vol_info->VolumeCreationTime;\n\t}\n\nqfsattr_exit:\n\tfree_rsp_buf(resp_buftype, rsp_iov.iov_base);\n\treturn rc;\n}\n\nint\nsmb2_lockv(const unsigned int xid, struct cifs_tcon *tcon,\n\t   const __u64 persist_fid, const __u64 volatile_fid, const __u32 pid,\n\t   const __u32 num_lock, struct smb2_lock_element *buf)\n{\n\tstruct smb_rqst rqst;\n\tint rc = 0;\n\tstruct smb2_lock_req *req = NULL;\n\tstruct kvec iov[2];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\tunsigned int count;\n\tint flags = CIFS_NO_RESP;\n\tunsigned int total_len;\n\n\tcifs_dbg(FYI, \"smb2_lockv num lock %d\\n\", num_lock);\n\n\trc = smb2_plain_req_init(SMB2_LOCK, tcon, (void **) &req, &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.ProcessId = cpu_to_le32(pid);\n\treq->LockCount = cpu_to_le16(num_lock);\n\n\treq->PersistentFileId = persist_fid;\n\treq->VolatileFileId = volatile_fid;\n\n\tcount = num_lock * sizeof(struct smb2_lock_element);\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len - sizeof(struct smb2_lock_element);\n\tiov[1].iov_base = (char *)buf;\n\tiov[1].iov_len = count;\n\n\tcifs_stats_inc(&tcon->stats.cifs_stats.num_locks);\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 2;\n\n\trc = cifs_send_recv(xid, tcon->ses, &rqst, &resp_buf_type, flags,\n\t\t\t    &rsp_iov);\n\tcifs_small_buf_release(req);\n\tif (rc) {\n\t\tcifs_dbg(FYI, \"Send error in smb2_lockv = %d\\n\", rc);\n\t\tcifs_stats_fail_inc(tcon, SMB2_LOCK_HE);\n\t\ttrace_smb3_lock_err(xid, persist_fid, tcon->tid,\n\t\t\t\t    tcon->ses->Suid, rc);\n\t}\n\n\treturn rc;\n}\n\nint\nSMB2_lock(const unsigned int xid, struct cifs_tcon *tcon,\n\t  const __u64 persist_fid, const __u64 volatile_fid, const __u32 pid,\n\t  const __u64 length, const __u64 offset, const __u32 lock_flags,\n\t  const bool wait)\n{\n\tstruct smb2_lock_element lock;\n\n\tlock.Offset = cpu_to_le64(offset);\n\tlock.Length = cpu_to_le64(length);\n\tlock.Flags = cpu_to_le32(lock_flags);\n\tif (!wait && lock_flags != SMB2_LOCKFLAG_UNLOCK)\n\t\tlock.Flags |= cpu_to_le32(SMB2_LOCKFLAG_FAIL_IMMEDIATELY);\n\n\treturn smb2_lockv(xid, tcon, persist_fid, volatile_fid, pid, 1, &lock);\n}\n\nint\nSMB2_lease_break(const unsigned int xid, struct cifs_tcon *tcon,\n\t\t __u8 *lease_key, const __le32 lease_state)\n{\n\tstruct smb_rqst rqst;\n\tint rc;\n\tstruct smb2_lease_ack *req = NULL;\n\tstruct cifs_ses *ses = tcon->ses;\n\tint flags = CIFS_OBREAK_OP;\n\tunsigned int total_len;\n\tstruct kvec iov[1];\n\tstruct kvec rsp_iov;\n\tint resp_buf_type;\n\t__u64 *please_key_high;\n\t__u64 *please_key_low;\n\n\tcifs_dbg(FYI, \"SMB2_lease_break\\n\");\n\trc = smb2_plain_req_init(SMB2_OPLOCK_BREAK, tcon, (void **) &req,\n\t\t\t     &total_len);\n\tif (rc)\n\t\treturn rc;\n\n\tif (smb3_encryption_required(tcon))\n\t\tflags |= CIFS_TRANSFORM_REQ;\n\n\treq->sync_hdr.CreditRequest = cpu_to_le16(1);\n\treq->StructureSize = cpu_to_le16(36);\n\ttotal_len += 12;\n\n\tmemcpy(req->LeaseKey, lease_key, 16);\n\treq->LeaseState = lease_state;\n\n\tflags |= CIFS_NO_RESP;\n\n\tiov[0].iov_base = (char *)req;\n\tiov[0].iov_len = total_len;\n\n\tmemset(&rqst, 0, sizeof(struct smb_rqst));\n\trqst.rq_iov = iov;\n\trqst.rq_nvec = 1;\n\n\trc = cifs_send_recv(xid, ses, &rqst, &resp_buf_type, flags, &rsp_iov);\n\tcifs_small_buf_release(req);\n\n\tplease_key_low = (__u64 *)lease_key;\n\tplease_key_high = (__u64 *)(lease_key+8);\n\tif (rc) {\n\t\tcifs_stats_fail_inc(tcon, SMB2_OPLOCK_BREAK_HE);\n\t\ttrace_smb3_lease_err(le32_to_cpu(lease_state), tcon->tid,\n\t\t\tses->Suid, *please_key_low, *please_key_high, rc);\n\t\tcifs_dbg(FYI, \"Send error in Lease Break = %d\\n\", rc);\n\t} else\n\t\ttrace_smb3_lease_done(le32_to_cpu(lease_state), tcon->tid,\n\t\t\tses->Suid, *please_key_low, *please_key_high);\n\n\treturn rc;\n}\n"], "filenames": ["fs/cifs/smb2pdu.c"], "buggy_code_start_loc": [3451], "buggy_code_end_loc": [3472], "fixing_code_start_loc": [3450], "fixing_code_end_loc": [3473], "type": "CWE-416", "message": "An issue was discovered in the Linux kernel before 5.0.10. SMB2_read in fs/cifs/smb2pdu.c has a use-after-free. NOTE: this was not fixed correctly in 5.0.10; see the 5.0.11 ChangeLog, which documents a memory leak.", "other": {"cve": {"id": "CVE-2019-15920", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-04T19:15:12.130", "lastModified": "2019-12-11T19:33:55.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in the Linux kernel before 5.0.10. SMB2_read in fs/cifs/smb2pdu.c has a use-after-free. NOTE: this was not fixed correctly in 5.0.10; see the 5.0.11 ChangeLog, which documents a memory leak."}, {"lang": "es", "value": "Se detect\u00f3 un problema en el kernel de Linux versiones anteriores a 5.0.10. La funci\u00f3n SMB2_read en el archivo fs/cifs/smb2pdu.c presenta un uso de la memoria previamente liberada. NOTA: esto no se corrigi\u00f3 correctamente en la versi\u00f3n 5.0.10; vea el ChangeLog versi\u00f3n 5.0.11, que documenta una p\u00e9rdida de memoria."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.10", "matchCriteriaId": "995B7430-4BA4-4979-BD8E-8907622852A8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "F1E78106-58E6-4D59-990F-75DA575BFAD9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00064.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00066.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.0.10", "source": "cve@mitre.org", "tags": ["Mailing List", "Vendor Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/088aaf17aa79300cab14dbee2569c58cfafd7d6e", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20191004-0001/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/088aaf17aa79300cab14dbee2569c58cfafd7d6e"}}