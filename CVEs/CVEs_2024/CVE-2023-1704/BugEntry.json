{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.editor\");\npimcore.settings.translation.editor = Class.create({\n    \n    initialize: function (context, field, translationType, editorType) {\n\n        Ext.WindowManager.each(function(window, idx, length) {\n            window.destroy();\n        });\n\n        this.field = field;\n        this.context = context;\n        let value = field.getValue();\n\n        let bbar = [];\n\n        if (editorType === 'wysiwyg') {\n            this.editableDivId = \"translationeditor_\" + uniqid();\n\n            var html = '<div class=\"pimcore_editable_wysiwyg\" id=\"' + this.editableDivId + '\" contenteditable=\"true\">' + value + '</div>';\n            var pConf = {\n                html: html,\n                border: true,\n                style: \"margin-bottom: 10px\",\n                height: '100%',\n                autoScroll: true\n            };\n\n            this.component = new Ext.Panel(pConf);\n\n            this.component.on(\"beforedestroy\", function () {\n                    if (this.ckeditor) {\n                        this.ckeditor.destroy();\n                        this.ckeditor = null;\n                    }\n                }\n            );\n\n            this.component.on(\"afterlayout\", this.initCkEditor.bind(this));\n        } else {\n            this.component = new Ext.form.TextArea({\n                width: '100%',\n                height: '100%',\n                value: value,\n            });\n\n            if(translationType === 'custom') {\n                bbar.push({\n                    xtype: \"displayfield\",\n                    value: t('symfony_translation_link')\n                });\n            }\n        }\n\n        bbar.push({\n            text: t(\"save\"),\n            iconCls: 'pimcore_icon_save',\n            handler: function () {\n                let newValue = '';\n                if (editorType == \"wysiwyg\") {\n                    try {\n                        if (this.ckeditor) {\n                            newValue = this.ckeditor.getData();\n                        }\n                    }\n                    catch (e) {\n                    }\n                } else {\n                    newValue = this.component.getValue();\n                }\n\n                this.field.setValue(newValue);\n                this.context.setValueStatus(this.field, newValue);\n\n                this.editWin.close();\n            }.bind(this)\n        });\n\n        bbar.push({\n            text: t(\"cancel\"),\n            iconCls: 'pimcore_icon_cancel',\n            handler: function () {\n                this.editWin.close();\n            }.bind(this)\n        });\n\n        this.editWin = new Ext.Window({\n            modal: false,\n            items: [this.component],\n            bodyStyle: \"background: #fff; padding: 10px\",\n            width: 700,\n            height: 400,\n            layout: 'fit',\n            closeAction: 'method-destroy',\n            autoScroll: true,\n            preventRefocus: true,      // nasty hack because this is an internal property\n                                       // for html grid cell values with hrefs this prevents that the cell\n                                       // gets refocused which would then trigger another editor window\n                                       // upon close of this instance\n            bbar: bbar\n        });\n\n\n        this.editWin.show();\n        this.editWin.updateLayout();\n    },\n\n    destroy: function () {\n        if (this.editWin) {\n            this.editWin.destroy();\n        }\n    },\n\n    initCkEditor: function () {\n\n        if (this.ckeditor) {\n            return;\n        }\n\n        // add drop zone, use the parent panel here (container), otherwise this can cause problems when specifying a fixed height on the wysiwyg\n        var dd = new Ext.dd.DropZone(Ext.get(this.editableDivId).parent(), {\n            ddGroup: \"element\",\n\n            getTargetFromEvent: function(e) {\n                return this.getEl();\n            },\n\n            onNodeOver : function(target, dd, e, data) {\n                if (data.records.length == 1) {\n                    var record = data.records[0];\n                    data = record.data;\n                    if (this.dndAllowed(data)) {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                }\n                return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n            }.bind(this),\n\n            onNodeDrop : this.onNodeDrop.bind(this)\n        });\n\n\n        var eConfig = {};\n\n        eConfig.toolbarGroups = [\n            {name: 'basicstyles', groups: ['undo', 'find', 'basicstyles', 'list']},\n            '/',\n            {name: 'paragraph', groups: ['align', 'indent']},\n            {name: 'blocks'},\n            {name: 'links'},\n            {name: 'insert'},\n            '/',\n            {name: 'styles'},\n            {name: 'tools', groups: ['colors', 'tools', 'cleanup', 'mode', 'others']}\n        ];\n\n        //prevent override important settings!\n        eConfig.resize_enabled = false;\n        eConfig.enterMode = CKEDITOR.ENTER_BR;\n        eConfig.entities = false;\n        eConfig.entities_greek = false;\n        eConfig.entities_latin = false;\n        eConfig.extraAllowedContent = \"*[pimcore_type,pimcore_id]\";\n        eConfig.baseFloatZIndex = 40000;   // prevent that the editor gets displayed behind the grid cell editor window\n\n        if (eConfig.hasOwnProperty('removePlugins')) {\n            eConfig.removePlugins += \",tableresize\";\n        }\n        else {\n            eConfig.removePlugins = \"tableresize\";\n        }\n\n\n        try {\n            this.ckeditor = CKEDITOR.inline(this.editableDivId, eConfig);\n\n            // disable URL field in image dialog\n            this.ckeditor.on(\"dialogShow\", function (e) {\n                var urlField = e.data.getElement().findOne(\"input\");\n                if (urlField && urlField.getValue()) {\n                    if (urlField.getValue().indexOf(\"/image-thumbnails/\") > 1) {\n                        urlField.getParent().getParent().getParent().hide();\n                    }\n                } else if (urlField) {\n                    urlField.getParent().getParent().getParent().show();\n                }\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    onNodeDrop: function (target, dd, e, data) {\n        if (!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n            return;\n        }\n\n        if (!this.ckeditor) {\n            return;\n        }\n\n        this.ckeditor.focus();\n\n        var node = data.records[0];\n\n        if (!this.ckeditor ||!this.dndAllowed(node.data)) {\n            return;\n        }\n\n        var wrappedText = node.data.text;\n        var textIsSelected = false;\n\n        try {\n            var selection = this.ckeditor.getSelection();\n            var bookmarks = selection.createBookmarks();\n            var range = selection.getRanges()[ 0 ];\n            var fragment = range.clone().cloneContents();\n\n            selection.selectBookmarks(bookmarks);\n            var retval = \"\";\n            var childList = fragment.getChildren();\n            var childCount = childList.count();\n\n            for (var i = 0; i < childCount; i++) {\n                var child = childList.getItem(i);\n                retval += ( child.getOuterHtml ?\n                    child.getOuterHtml() : child.getText() );\n            }\n\n            if (retval.length > 0) {\n                wrappedText = retval;\n                textIsSelected = true;\n            }\n        }\n        catch (e2) {\n        }\n\n\n        // remove existing links out of the wrapped text\n        wrappedText = wrappedText.replace(/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi, function ($0, $1) {\n            if($1.toLowerCase() == \"a\") {\n                return \"\";\n            }\n            return $0;\n        });\n\n        var id = node.data.id;\n        var uri = node.data.path;\n        var browserPossibleExtensions = [\"jpg\",\"jpeg\",\"gif\",\"png\"];\n\n        if (node.data.elementType == \"asset\") {\n            if (node.data.type == \"image\" && textIsSelected == false) {\n                // images bigger than 600px or formats which cannot be displayed by the browser directly will be\n                // converted by the pimcore thumbnailing service so that they can be displayed in the editor\n                var defaultWidth = 600;\n                var additionalAttributes = \"\";\n                uri = Routing.generate('pimcore_admin_asset_getimagethumbnail') + \"?id=\" + id + \"&width=\" + defaultWidth + \"&aspectratio=true\";\n\n                if(typeof node.data.imageWidth != \"undefined\") {\n                    if(node.data.imageWidth < defaultWidth\n                        && in_arrayi(pimcore.helpers.getFileExtension(node.data.text),\n                            browserPossibleExtensions)) {\n                        uri = node.data.path;\n                        additionalAttributes += ' pimcore_disable_thumbnail=\"true\"';\n                    }\n\n                    if(node.data.imageWidth < defaultWidth) {\n                        defaultWidth = node.data.imageWidth;\n                    }\n                }\n\n                this.ckeditor.insertHtml('<img src=\"' + uri + '\" pimcore_type=\"asset\" pimcore_id=\"' + id\n                    + '\" style=\"width:' + defaultWidth + 'px;\"' + additionalAttributes + ' />');\n                return true;\n            }\n            else {\n                this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"asset\" pimcore_id=\"'\n                    + id + '\">' + wrappedText + '</a>');\n                return true;\n            }\n        }\n\n        if (node.data.elementType == \"document\" && (node.data.type==\"page\"\n                || node.data.type==\"hardlink\" || node.data.type==\"link\")){\n            this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"document\" pimcore_id=\"'\n                + id + '\">' + wrappedText + '</a>');\n            return true;\n        }\n\n        if (node.data.elementType == \"object\"){\n            this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"object\" pimcore_id=\"'\n                + id + '\">' + wrappedText + '</a>');\n            return true;\n        }\n\n    },\n\n    dndAllowed: function(data) {\n\n        if (data.elementType == \"document\" && (data.type==\"page\"\n                || data.type==\"hardlink\" || data.type==\"link\")){\n            return true;\n        } else if (data.elementType==\"asset\" && data.type != \"folder\"){\n            return true;\n        } else if (data.elementType==\"object\" && data.type != \"folder\"){\n            return true;\n        }\n\n        return false;\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.editor\");\npimcore.settings.translation.editor = Class.create({\n    \n    initialize: function (context, field, translationType, editorType) {\n\n        Ext.WindowManager.each(function(window, idx, length) {\n            window.destroy();\n        });\n\n        this.field = field;\n        this.context = context;\n        let value = field.getValue();\n\n        let bbar = [];\n\n        if (editorType === 'wysiwyg') {\n            this.editableDivId = \"translationeditor_\" + uniqid();\n\n            var html = '<div class=\"pimcore_editable_wysiwyg\" id=\"' + this.editableDivId + '\" contenteditable=\"true\"></div>';\n            var pConf = {\n                html: html,\n                border: true,\n                style: \"margin-bottom: 10px\",\n                height: '100%',\n                autoScroll: true\n            };\n\n            this.component = new Ext.Panel(pConf);\n\n            this.component.on(\"beforedestroy\", function () {\n                    if (this.ckeditor) {\n                        this.ckeditor.destroy();\n                        this.ckeditor = null;\n                    }\n                }\n            );\n\n            this.component.on(\"afterlayout\", this.initCkEditor.bind(this));\n        } else {\n            this.component = new Ext.form.TextArea({\n                width: '100%',\n                height: '100%',\n                value: value,\n            });\n\n            if(translationType === 'custom') {\n                bbar.push({\n                    xtype: \"displayfield\",\n                    value: t('symfony_translation_link')\n                });\n            }\n        }\n\n        bbar.push({\n            text: t(\"save\"),\n            iconCls: 'pimcore_icon_save',\n            handler: function () {\n                let newValue = '';\n                if (editorType == \"wysiwyg\") {\n                    try {\n                        if (this.ckeditor) {\n                            newValue = this.ckeditor.getData();\n                        }\n                    }\n                    catch (e) {\n                    }\n                } else {\n                    newValue = this.component.getValue();\n                }\n\n                this.field.setValue(newValue);\n                this.context.setValueStatus(this.field, newValue);\n\n                this.editWin.close();\n            }.bind(this)\n        });\n\n        bbar.push({\n            text: t(\"cancel\"),\n            iconCls: 'pimcore_icon_cancel',\n            handler: function () {\n                this.editWin.close();\n            }.bind(this)\n        });\n\n        this.editWin = new Ext.Window({\n            modal: false,\n            items: [this.component],\n            bodyStyle: \"background: #fff; padding: 10px\",\n            width: 700,\n            height: 400,\n            layout: 'fit',\n            closeAction: 'method-destroy',\n            autoScroll: true,\n            preventRefocus: true,      // nasty hack because this is an internal property\n                                       // for html grid cell values with hrefs this prevents that the cell\n                                       // gets refocused which would then trigger another editor window\n                                       // upon close of this instance\n            bbar: bbar\n        });\n\n\n        this.editWin.show();\n        this.editWin.updateLayout();\n    },\n\n    destroy: function () {\n        if (this.editWin) {\n            this.editWin.destroy();\n        }\n    },\n\n    initCkEditor: function () {\n\n        if (this.ckeditor) {\n            return;\n        }\n\n        // add drop zone, use the parent panel here (container), otherwise this can cause problems when specifying a fixed height on the wysiwyg\n        var dd = new Ext.dd.DropZone(Ext.get(this.editableDivId).parent(), {\n            ddGroup: \"element\",\n\n            getTargetFromEvent: function(e) {\n                return this.getEl();\n            },\n\n            onNodeOver : function(target, dd, e, data) {\n                if (data.records.length == 1) {\n                    var record = data.records[0];\n                    data = record.data;\n                    if (this.dndAllowed(data)) {\n                        return Ext.dd.DropZone.prototype.dropAllowed;\n                    }\n                }\n                return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n            }.bind(this),\n\n            onNodeDrop : this.onNodeDrop.bind(this)\n        });\n\n\n        var eConfig = {};\n\n        eConfig.toolbarGroups = [\n            {name: 'basicstyles', groups: ['undo', 'find', 'basicstyles', 'list']},\n            '/',\n            {name: 'paragraph', groups: ['align', 'indent']},\n            {name: 'blocks'},\n            {name: 'links'},\n            {name: 'insert'},\n            '/',\n            {name: 'styles'},\n            {name: 'tools', groups: ['colors', 'tools', 'cleanup', 'mode', 'others']}\n        ];\n\n        //prevent override important settings!\n        eConfig.resize_enabled = false;\n        eConfig.enterMode = CKEDITOR.ENTER_BR;\n        eConfig.entities = false;\n        eConfig.entities_greek = false;\n        eConfig.entities_latin = false;\n        eConfig.extraAllowedContent = \"*[pimcore_type,pimcore_id]\";\n        eConfig.baseFloatZIndex = 40000;   // prevent that the editor gets displayed behind the grid cell editor window\n\n        if (eConfig.hasOwnProperty('removePlugins')) {\n            eConfig.removePlugins += \",tableresize\";\n        }\n        else {\n            eConfig.removePlugins = \"tableresize\";\n        }\n\n\n        try {\n            this.ckeditor = CKEDITOR.inline(this.editableDivId, eConfig);\n            this.ckeditor.setData(this.field.getValue());\n\n            // disable URL field in image dialog\n            this.ckeditor.on(\"dialogShow\", function (e) {\n                var urlField = e.data.getElement().findOne(\"input\");\n                if (urlField && urlField.getValue()) {\n                    if (urlField.getValue().indexOf(\"/image-thumbnails/\") > 1) {\n                        urlField.getParent().getParent().getParent().hide();\n                    }\n                } else if (urlField) {\n                    urlField.getParent().getParent().getParent().show();\n                }\n            });\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    onNodeDrop: function (target, dd, e, data) {\n        if (!pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n            return;\n        }\n\n        if (!this.ckeditor) {\n            return;\n        }\n\n        this.ckeditor.focus();\n\n        var node = data.records[0];\n\n        if (!this.ckeditor ||!this.dndAllowed(node.data)) {\n            return;\n        }\n\n        var wrappedText = node.data.text;\n        var textIsSelected = false;\n\n        try {\n            var selection = this.ckeditor.getSelection();\n            var bookmarks = selection.createBookmarks();\n            var range = selection.getRanges()[ 0 ];\n            var fragment = range.clone().cloneContents();\n\n            selection.selectBookmarks(bookmarks);\n            var retval = \"\";\n            var childList = fragment.getChildren();\n            var childCount = childList.count();\n\n            for (var i = 0; i < childCount; i++) {\n                var child = childList.getItem(i);\n                retval += ( child.getOuterHtml ?\n                    child.getOuterHtml() : child.getText() );\n            }\n\n            if (retval.length > 0) {\n                wrappedText = retval;\n                textIsSelected = true;\n            }\n        }\n        catch (e2) {\n        }\n\n\n        // remove existing links out of the wrapped text\n        wrappedText = wrappedText.replace(/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi, function ($0, $1) {\n            if($1.toLowerCase() == \"a\") {\n                return \"\";\n            }\n            return $0;\n        });\n\n        var id = node.data.id;\n        var uri = node.data.path;\n        var browserPossibleExtensions = [\"jpg\",\"jpeg\",\"gif\",\"png\"];\n\n        if (node.data.elementType == \"asset\") {\n            if (node.data.type == \"image\" && textIsSelected == false) {\n                // images bigger than 600px or formats which cannot be displayed by the browser directly will be\n                // converted by the pimcore thumbnailing service so that they can be displayed in the editor\n                var defaultWidth = 600;\n                var additionalAttributes = \"\";\n                uri = Routing.generate('pimcore_admin_asset_getimagethumbnail') + \"?id=\" + id + \"&width=\" + defaultWidth + \"&aspectratio=true\";\n\n                if(typeof node.data.imageWidth != \"undefined\") {\n                    if(node.data.imageWidth < defaultWidth\n                        && in_arrayi(pimcore.helpers.getFileExtension(node.data.text),\n                            browserPossibleExtensions)) {\n                        uri = node.data.path;\n                        additionalAttributes += ' pimcore_disable_thumbnail=\"true\"';\n                    }\n\n                    if(node.data.imageWidth < defaultWidth) {\n                        defaultWidth = node.data.imageWidth;\n                    }\n                }\n\n                this.ckeditor.insertHtml('<img src=\"' + uri + '\" pimcore_type=\"asset\" pimcore_id=\"' + id\n                    + '\" style=\"width:' + defaultWidth + 'px;\"' + additionalAttributes + ' />');\n                return true;\n            }\n            else {\n                this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"asset\" pimcore_id=\"'\n                    + id + '\">' + wrappedText + '</a>');\n                return true;\n            }\n        }\n\n        if (node.data.elementType == \"document\" && (node.data.type==\"page\"\n                || node.data.type==\"hardlink\" || node.data.type==\"link\")){\n            this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"document\" pimcore_id=\"'\n                + id + '\">' + wrappedText + '</a>');\n            return true;\n        }\n\n        if (node.data.elementType == \"object\"){\n            this.ckeditor.insertHtml('<a href=\"' + uri + '\" pimcore_type=\"object\" pimcore_id=\"'\n                + id + '\">' + wrappedText + '</a>');\n            return true;\n        }\n\n    },\n\n    dndAllowed: function(data) {\n\n        if (data.elementType == \"document\" && (data.type==\"page\"\n                || data.type==\"hardlink\" || data.type==\"link\")){\n            return true;\n        } else if (data.elementType==\"asset\" && data.type != \"folder\"){\n            return true;\n        } else if (data.elementType==\"object\" && data.type != \"folder\"){\n            return true;\n        }\n\n        return false;\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/translationEditor.js"], "buggy_code_start_loc": [32], "buggy_code_end_loc": [188], "fixing_code_start_loc": [32], "fixing_code_end_loc": [190], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.20.", "other": {"cve": {"id": "CVE-2023-1704", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-29T16:15:07.403", "lastModified": "2023-04-03T18:22:13.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.20."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.3, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.20", "matchCriteriaId": "98C7372B-CF43-42C5-9227-9ED728BF03F5"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/295f5e8d108b68198e36399bea0f69598eb108a0", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/84419c7b-ae29-401b-bdfd-5d0c498d320f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/295f5e8d108b68198e36399bea0f69598eb108a0"}}