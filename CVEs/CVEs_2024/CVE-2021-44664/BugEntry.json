{"buggy_code": ["<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire_once(dirname(__FILE__) . \"/../config.php\");\n_load_language_file(\"/editor/uploadImage.inc\");\n\nfunction sanitizeName($file, &$response)\n{\n    $filename = str_replace(' ', '_', $file);\n    if ($filename != $file) {\n        $mesg = RENAMED;\n        $mesg = str_replace('{0}', $file, $mesg);\n        $mesg = str_replace('{1}', $filename, $mesg);\n        $response['error'] = $mesg;\n    }\n\n   return $filename;\n}\n\n// Not used, left as legacy\n/*function return_bytes($val) {\n    $val = trim($val);\n    $last = strtolower($val[strlen($val)-1]);\n    switch($last) {\n        // The 'G' modifier is available since PHP 5.1.0\n        case 'g':\n            $val *= 1024;\n        case 'm':\n            $val *= 1024;\n        case 'k':\n            $val *= 1024;\n    }\n\n    return $val;\n}*/\n\nif (!isset($_SESSION['toolkits_logon_username']) && !is_user_admin())\n{\n    _debug(\"Session is invalid or expired\");\n    die(\"Session is invalid or expired\");\n}\n\n$response = new StdClass();\n\n//_debug(\"upload: \" . print_r($_FILES, true));\n\n// Check uploaded file. It has to be an image. otherwise we'll reject it\nif (!isset($_FILES['upload']))\n{\n    $response->uploaded = 0;\n    $response->error = IMAGEUPOLOAD_NOT_UPLOADED;\n\n    echo json_encode($response);\n    exit(-1);\n}\n\nif (isset($_FILES['upload']['error']) && $_FILES['upload']['error'] != 0)\n{\n    switch($_FILES['upload']['error']) {\n        case UPLOAD_ERR_INI_SIZE:\n            $mesg = IMAGEUPLOAD_TOO_LARGE;\n            $mesg = str_replace('{0}', $_FILES['upload']['size'], $mesg);\n            $mesg = str_replace('{1}', min(ini_get('upload_max_filesize'), ini_get('post_max_size')), $mesg);\n            $response->error = $mesg;\n            break;\n        case UPLOAD_ERR_FORM_SIZE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_FORM_SIZE;\n            break;\n        case UPLOAD_ERR_PARTIAL:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_PARTIAL_FILE;\n            break;\n        case UPLOAD_ERR_NO_FILE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_NO_FILE;\n            break;\n        case UPLOAD_ERR_NO_TMP_DIR:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_NO_TMP_DIR;\n            break;\n        case UPLOAD_ERR_CANT_WRITE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_CANT_WRITE;\n            break;\n        case UPLOAD_ERR_EXTENSION:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_EXTENSION;\n            break;\n    }\n    $response->uploaded = 0;\n    echo json_encode($response);\n    exit(-1);\n}\n\nswitch($_FILES['upload']['type'])\n{\n    case \"image/png\":\n        $paste_ext = \".png\";\n        break;\n    case \"image/jpg\":\n    case \"image/jpeg\":\n        $paste_ext = \".jpg\";\n        break;\n    case \"image/gif\":\n        $paste_ext = \".gif\";\n        break;\n    case \"image/bmp\":\n        $paste_ext = \".bmp\";\n        break;\n    default:\n        $response->uploaded = 0;\n        $response->error = INVALID_FORMAT;\n\n        echo json_encode($response);\n        exit(-1);\n}\n\n$filename = sanitizeName($_FILES['upload']['name'], $response);\n// Add path to the $filename\n$paste = \"image\";\n// Check if pasted filename already exists, if so add a count until we find a name that is available\nif ($filename == $paste . $paste_ext) {\n    $final = $paste . $paste_ext;\n    $count = 1;\n    while (file_exists($_REQUEST['uploadPath'] . \"media/\" . $final)) {\n        $final =  $paste . \"(\" . $count . \")\" . $paste_ext;\n        $count++;\n    }\n    $filename = $final;\n}\n\n$response->uploaded = 1;\n$response->url = $_REQUEST['uploadURL'] . \"/media/\" . $filename;\n$response->fileName = $_REQUEST['uploadPath'] . \"media/\" . $filename;\n\n// Move file to the correct location\n$res = move_uploaded_file($_FILES['upload']['tmp_name'], $response->fileName);\n//_debug(\"upload: \" . print_r($_POST, true));\n\n// _debug(\"File uploaded: \" . print_r($response, true|));\necho json_encode($response);\n", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n/**\n *\n * upload page, used by xerte to upload a file\n *\n * @author Patrick Lockley, tweaked by John Smith, GCU\n * @version 1.2\n * @package\n */\n/**\n *\n * Spoof the session if we are using Firefox\n * Gets around the Flash Cookie Bug\n *\n */\nif ($_GET['BROWSER'] == 'firefox' || $_GET['BROWSER'] == 'safari') {\n    if ($_GET['AUTH'] == 'moodle') {\n        if (!isset($_COOKIE['MoodleSession']) || !isset($_COOKIE['MOODLEID1_'])) {\n            $temp = explode('; ', $_GET['COOKIE']);\n            if (!empty($temp)) {\n                $cookie = array();\n                foreach ($temp as $key => $value) {\n                    $pair = explode('=', $value);\n                    $cookie[$pair[0]] = $pair[1];\n                }\n                $_COOKIE = $cookie; // We want to overwrite all\n            }\n        }\n    } else {\n        if (\n                (!isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID'])) ||\n                ( isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID']) && ($_COOKIE['PHPSESSID'] != $_GET['PHPSESSID']))) {\n            session_id($_GET['PHPSESSID']);\n        }\n    }\n}\n\n\n/**\n * \tNow bring in config.php\n */\nrequire_once(\"../../../config.php\");\n\nrequire_once(\"../../../plugins.php\");\n\n/**\n * \tNow we check that the session has a valid, logged in user\n */\nif (!isset($_SESSION['toolkits_logon_username'])) {\n    die(\"Not logged in; perhaps session has timed out?\");\n}\n\n\nif (!empty($_FILES)) {\n    if(!apply_filters('editor_upload_file', $_FILES)) {\n        /* Show the last file check error if possible. */\n        if (isset($last_file_check_error) && !empty($last_file_check_error)) {\n            $err_string = implode(\"\\n\", $last_file_check_error);\n            _debug(\"File upload for \" . print_r($_FILES, true) . \" failed: \" . $err_string);\n        }\n        else {\n            _debug(\"File upload for \" . print_r($_FILES, true) . \" failed.\");\n        }\n\n        die(\"File upload failed; check server logs.\");\n    }\n}\nelse {\n    die(\"No file(s) uploaded\");\n}\n\n/**\n *  These checks remain from R708\n */\n$pass = true;\nif (strpos($_FILES['Filedata']['name'], '../') !== false)\n    $pass = false;\nif (strpos($_FILES['Filedata']['name'], '...') !== false)\n    $pass = false;\n\nif ($pass === false) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Invalid filename: \" . $_FILES['Filedata']['name'], \"Invalid filename: \" . $_FILES['Filedata']['name']);\n    exit();\n}\n\n/**\n *  Passed all the checks so lets try to write the file\n */\n$new_file_name = $xerte_toolkits_site->root_file_path . $_GET['path'] . $_FILES['Filedata']['name'];\nif (!move_uploaded_file($_FILES['Filedata']['tmp_name'], $new_file_name)) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Error saving file: \" . $new_file_name, \"Error saving file: \" . error_get_last());\n    die(\"Couldn't move uploaded file into place.\");\n}\n\napply_filters('editor_post_upload_file', $new_file_name);\n", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n/**\n *\n * upload page, used by xerte to upload a file\n *\n * @author Patrick Lockley, tweaked by John Smith, GCU\n * @version 1.2\n * @package\n */\n/**\n *\n * Spoof the session if we are using Firefox\n * Gets around the Flash Cookie Bug\n *\n */\nif ($_GET['BROWSER'] == 'firefox' || $_GET['BROWSER'] == 'safari') {\n    if ($_GET['AUTH'] == 'moodle') {\n        if (!isset($_COOKIE['MoodleSession']) || !isset($_COOKIE['MOODLEID1_'])) {\n            $temp = explode('; ', $_GET['COOKIE']);\n            if (!empty($temp)) {\n                $cookie = array();\n                foreach ($temp as $key => $value) {\n                    $pair = explode('=', $value);\n                    $cookie[$pair[0]] = $pair[1];\n                }\n                $_COOKIE = $cookie; // We want to overwrite all\n            }\n        }\n    } else {\n        if (\n                (!isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID'])) ||\n                ( isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID']) && ($_COOKIE['PHPSESSID'] != $_GET['PHPSESSID']))) {\n            session_id($_GET['PHPSESSID']);\n        }\n    }\n}\n\n\n/**\n * \tNow bring in config.php\n */\nrequire_once(\"../../../config.php\");\n\n/**\n * \tNow we check that the session has a valid, logged in user\n */\nif (!isset($_SESSION['toolkits_logon_username'])) {\n    die(\"Not logged in; perhaps session has timed out?\");\n}\n\nif (empty($_FILES)) {\n    die(\"No file(s) uploaded\");\n}\n\n/**\n *  These checks remain from R708\n */\n$pass = true;\nif (strpos($_FILES['Filedata']['name'], '../') !== false)\n    $pass = false;\nif (strpos($_FILES['Filedata']['name'], '...') !== false)\n    $pass = false;\n\nif ($pass === false) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Invalid filename: \" . $_FILES['Filedata']['name'], \"Invalid filename: \" . $_FILES['Filedata']['name']);\n    exit();\n}\n\n/**\n *  Passed all the checks so lets try to write the file\n */\n$new_file_name = $xerte_toolkits_site->root_file_path . $_GET['path'] . $_FILES['Filedata']['name'];\nif (!move_uploaded_file($_FILES['Filedata']['tmp_name'], $new_file_name)) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Error saving file: \" . $new_file_name, \"Error saving file: \" . error_get_last());\n    die(\"Couldn't move uploaded file into place.\");\n}", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire_once(dirname(__FILE__) . \"/../../../config.php\");\nrequire_once(dirname(__FILE__) . \"/../../../plugins.php\");\n\n/*\n * Function to convert a size string - e.g '128MB' - to the\n * actual number of bytes.\n *\n * Provided by 'John V' at https://stackoverflow.com/questions/11807115/php-convert-kb-mb-gb-tb-etc-to-bytes\n */\n\nfunction convertToBytes(string $from): ?int {\n    $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n\n    $number = substr($from, 0, -2);\n\n    $suffix = strtoupper(substr($from,-2));\n\n    //B or no suffix\n\n    if(is_numeric(substr($suffix, 0, 1))) {\n        return preg_replace('/[^\\d]/', '', $from);\n    }\n\n    $exponent = array_flip($units)[$suffix] ?? null;\n\n    if($exponent === null) {\n        return null;\n    }\n\n    return $number * (1024 ** $exponent);\n}\n\n\nif (!isset($_SESSION['toolkits_logon_username']))\n{\n    _debug(\"Session is invalid or expired\");\n    die(\"Session is invalid or expired\");\n}\n\n_load_language_file(\"/website_code/php/import/fileupload.inc\");\n\nif(apply_filters('editor_upload_file', $_FILES)){\n\n    if($_FILES['filenameuploaded']['type']==\"text/html\"){\n\n        $php_check = file_get_contents($_FILES['filenameuploaded']['tmp_name']);\n\n        if(!stripos($php_check,\"<?PHP\")){\n\n            $new_file_name = $_POST['mediapath'] . $_FILES['filenameuploaded']['name'];\n\n            if(@move_uploaded_file($_FILES['filenameuploaded']['tmp_name'], $new_file_name)){\n\n                echo FILE_UPLOAD_SUCCESS . \"****\";\n\n            }else{\n\n                echo FILE_UPLOAD_ZIP_FAIL . \"****\";\n\n            }\n\n        }else{\n\n            echo FILE_UPLOAD_HTML_FAIL . \"****\";\t\t\t\t\n\n        }\n\n    }else{\n\n        $new_file_name = $_POST['mediapath'] . $_FILES['filenameuploaded']['name'];\n\n        if(@move_uploaded_file($_FILES['filenameuploaded']['tmp_name'], $new_file_name)){\n\n            echo FILE_UPLOAD_SUCCESS . \"****\";\n\n        }else{\n\n            echo FILE_UPLOAD_ZIP_FAIL . \"****\";\n\n        }\n\n    }\n\n\n}else{\n\n    /* Show the last file check error if possible. */\n    if (isset($last_file_check_error) && !empty($last_file_check_error)) {\n        $err_string = implode(\"\\n\", $last_file_check_error);\n\n        echo $err_string . \"****\";\n    }\n    elseif (isset($_SERVER['CONTENT_LENGTH']) && (int) $_SERVER['CONTENT_LENGTH'] > convertToBytes(ini_get('upload_max_filesize'))) {\n        echo \"File is too large. Maximum size allowed is: \" . ini_get('upload_max_filesize') . \"B****\";\n    }\n    else {\n        echo FILE_UPLOAD_MIME_FAIL . \" - \" . $_FILES['filenameuploaded']['type'] . \"****\";\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire_once(dirname(__FILE__) . \"/../config.php\");\n_load_language_file(\"/editor/uploadImage.inc\");\n\nfunction sanitizeName($file, &$response)\n{\n    $filename = str_replace(' ', '_', $file);\n    if ($filename != $file) {\n        $mesg = RENAMED;\n        $mesg = str_replace('{0}', $file, $mesg);\n        $mesg = str_replace('{1}', $filename, $mesg);\n        $response['error'] = $mesg;\n    }\n\n   return $filename;\n}\n\n// Not used, left as legacy\n/*function return_bytes($val) {\n    $val = trim($val);\n    $last = strtolower($val[strlen($val)-1]);\n    switch($last) {\n        // The 'G' modifier is available since PHP 5.1.0\n        case 'g':\n            $val *= 1024;\n        case 'm':\n            $val *= 1024;\n        case 'k':\n            $val *= 1024;\n    }\n\n    return $val;\n}*/\n\nif (!isset($_SESSION['toolkits_logon_username']) && !is_user_admin())\n{\n    _debug(\"Session is invalid or expired\");\n    die(\"Session is invalid or expired\");\n}\n\n$response = new StdClass();\n\n//_debug(\"upload: \" . print_r($_FILES, true));\n\n// Check uploaded file. It has to be an image. otherwise we'll reject it\nif (!isset($_FILES['upload']))\n{\n    $response->uploaded = 0;\n    $response->error = IMAGEUPOLOAD_NOT_UPLOADED;\n\n    echo json_encode($response);\n    exit(-1);\n}\n\n// Check upload path, should contain USER-FILES\nif (strpos($_REQUEST['uploadURL'], 'USER-FILES') === false)\n{\n    // Invalid folder, reject!\n    $response->uploaded = 0;\n    $response->error = IMAGEUPOLOAD_NOT_UPLOADED;\n\n    echo json_encode($response);\n    exit(-1);\n}\n\nif (isset($_FILES['upload']['error']) && $_FILES['upload']['error'] != 0)\n{\n    switch($_FILES['upload']['error']) {\n        case UPLOAD_ERR_INI_SIZE:\n            $mesg = IMAGEUPLOAD_TOO_LARGE;\n            $mesg = str_replace('{0}', $_FILES['upload']['size'], $mesg);\n            $mesg = str_replace('{1}', min(ini_get('upload_max_filesize'), ini_get('post_max_size')), $mesg);\n            $response->error = $mesg;\n            break;\n        case UPLOAD_ERR_FORM_SIZE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_FORM_SIZE;\n            break;\n        case UPLOAD_ERR_PARTIAL:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_PARTIAL_FILE;\n            break;\n        case UPLOAD_ERR_NO_FILE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_NO_FILE;\n            break;\n        case UPLOAD_ERR_NO_TMP_DIR:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_NO_TMP_DIR;\n            break;\n        case UPLOAD_ERR_CANT_WRITE:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_CANT_WRITE;\n            break;\n        case UPLOAD_ERR_EXTENSION:\n            $response->error = IMAGEUPLOAD_ERROR . IMAGEUPLOAD_EXTENSION;\n            break;\n    }\n    $response->uploaded = 0;\n    echo json_encode($response);\n    exit(-1);\n}\n\nswitch($_FILES['upload']['type'])\n{\n    case \"image/png\":\n        $paste_ext = \".png\";\n        break;\n    case \"image/jpg\":\n    case \"image/jpeg\":\n        $paste_ext = \".jpg\";\n        break;\n    case \"image/gif\":\n        $paste_ext = \".gif\";\n        break;\n    case \"image/bmp\":\n        $paste_ext = \".bmp\";\n        break;\n    default:\n        $response->uploaded = 0;\n        $response->error = INVALID_FORMAT;\n\n        echo json_encode($response);\n        exit(-1);\n}\n\n$filename = sanitizeName($_FILES['upload']['name'], $response);\n// Add path to the $filename\n$paste = \"image\";\n// Check if pasted filename already exists, if so add a count until we find a name that is available\nif ($filename == $paste . $paste_ext) {\n    $final = $paste . $paste_ext;\n    $count = 1;\n    while (file_exists($_REQUEST['uploadPath'] . \"media/\" . $final)) {\n        $final =  $paste . \"(\" . $count . \")\" . $paste_ext;\n        $count++;\n    }\n    $filename = $final;\n}\n\n$response->uploaded = 1;\n$response->url = $_REQUEST['uploadURL'] . \"/media/\" . $filename;\n$response->fileName = $_REQUEST['uploadPath'] . \"media/\" . $filename;\n\n// Move file to the correct location\n$res = move_uploaded_file($_FILES['upload']['tmp_name'], $response->fileName);\n//_debug(\"upload: \" . print_r($_POST, true));\n\n// _debug(\"File uploaded: \" . print_r($response, true|));\necho json_encode($response);\n", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n/**\n *\n * upload page, used by xerte to upload a file\n *\n * @author Patrick Lockley, tweaked by John Smith, GCU\n * @version 1.2\n * @package\n */\n/**\n *\n * Spoof the session if we are using Firefox\n * Gets around the Flash Cookie Bug\n *\n */\nif ($_GET['BROWSER'] == 'firefox' || $_GET['BROWSER'] == 'safari') {\n    if ($_GET['AUTH'] == 'moodle') {\n        if (!isset($_COOKIE['MoodleSession']) || !isset($_COOKIE['MOODLEID1_'])) {\n            $temp = explode('; ', $_GET['COOKIE']);\n            if (!empty($temp)) {\n                $cookie = array();\n                foreach ($temp as $key => $value) {\n                    $pair = explode('=', $value);\n                    $cookie[$pair[0]] = $pair[1];\n                }\n                $_COOKIE = $cookie; // We want to overwrite all\n            }\n        }\n    } else {\n        if (\n                (!isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID'])) ||\n                ( isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID']) && ($_COOKIE['PHPSESSID'] != $_GET['PHPSESSID']))) {\n            session_id($_GET['PHPSESSID']);\n        }\n    }\n}\n\n\n/**\n * \tNow bring in config.php\n */\nrequire_once(\"../../../config.php\");\n\nrequire_once(\"../../../plugins.php\");\n\n/**\n * \tNow we check that the session has a valid, logged in user\n */\nif (!isset($_SESSION['toolkits_logon_username'])) {\n    die(\"Not logged in; perhaps session has timed out?\");\n}\n\n\nif (!empty($_FILES)) {\n    if(!apply_filters('editor_upload_file', $_FILES)) {\n        /* Show the last file check error if possible. */\n        if (isset($last_file_check_error) && !empty($last_file_check_error)) {\n            $err_string = implode(\"\\n\", $last_file_check_error);\n            _debug(\"File upload for \" . print_r($_FILES, true) . \" failed: \" . $err_string);\n        }\n        else {\n            _debug(\"File upload for \" . print_r($_FILES, true) . \" failed.\");\n        }\n\n        die(\"File upload failed; check server logs.\");\n    }\n}\nelse {\n    die(\"No file(s) uploaded\");\n}\n\n/**\n *  These checks remain from R708\n */\n$pass = true;\nif (strpos($_FILES['Filedata']['name'], '../') !== false)\n    $pass = false;\nif (strpos($_FILES['Filedata']['name'], '...') !== false)\n    $pass = false;\nif (strpos($_GET['path'], 'USER-FILES') === false)\n    $pass = false;\n\nif ($pass === false) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Invalid filename: \" . $_FILES['Filedata']['name'], \"Invalid filename: \" . $_FILES['Filedata']['name']);\n    exit();\n}\n\n/**\n *  Passed all the checks so lets try to write the file\n */\n$new_file_name = $xerte_toolkits_site->root_file_path . $_GET['path'] . $_FILES['Filedata']['name'];\nif (!move_uploaded_file($_FILES['Filedata']['tmp_name'], $new_file_name)) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Error saving file: \" . $new_file_name, \"Error saving file: \" . error_get_last());\n    die(\"Couldn't move uploaded file into place.\");\n}\n\napply_filters('editor_post_upload_file', $new_file_name);\n", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n \n/**\n *\n * upload page, used by xerte to upload a file\n *\n * @author Patrick Lockley, tweaked by John Smith, GCU\n * @version 1.2\n * @package\n */\n/**\n *\n * Spoof the session if we are using Firefox\n * Gets around the Flash Cookie Bug\n *\n */\nif ($_GET['BROWSER'] == 'firefox' || $_GET['BROWSER'] == 'safari') {\n    if ($_GET['AUTH'] == 'moodle') {\n        if (!isset($_COOKIE['MoodleSession']) || !isset($_COOKIE['MOODLEID1_'])) {\n            $temp = explode('; ', $_GET['COOKIE']);\n            if (!empty($temp)) {\n                $cookie = array();\n                foreach ($temp as $key => $value) {\n                    $pair = explode('=', $value);\n                    $cookie[$pair[0]] = $pair[1];\n                }\n                $_COOKIE = $cookie; // We want to overwrite all\n            }\n        }\n    } else {\n        if (\n                (!isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID'])) ||\n                ( isset($_COOKIE['PHPSESSID']) && isset($_GET['PHPSESSID']) && ($_COOKIE['PHPSESSID'] != $_GET['PHPSESSID']))) {\n            session_id($_GET['PHPSESSID']);\n        }\n    }\n}\n\n\n/**\n * \tNow bring in config.php\n */\nrequire_once(\"../../../config.php\");\n\n/**\n * \tNow we check that the session has a valid, logged in user\n */\nif (!isset($_SESSION['toolkits_logon_username'])) {\n    die(\"Not logged in; perhaps session has timed out?\");\n}\n\nif (empty($_FILES)) {\n    die(\"No file(s) uploaded\");\n}\n\n/**\n *  These checks remain from R708\n */\n$pass = true;\nif (strpos($_FILES['Filedata']['name'], '../') !== false)\n    $pass = false;\nif (strpos($_FILES['Filedata']['name'], '...') !== false)\n    $pass = false;\nif (strpos($_GET['path'], 'USER-FILES') === false)\n    $pass = false;\n\nif ($pass === false) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Invalid filename: \" . $_FILES['Filedata']['name'], \"Invalid filename: \" . $_FILES['Filedata']['name']);\n    exit();\n}\n\n/**\n *  Passed all the checks so lets try to write the file\n */\n$new_file_name = $xerte_toolkits_site->root_file_path . $_GET['path'] . $_FILES['Filedata']['name'];\nif (!move_uploaded_file($_FILES['Filedata']['tmp_name'], $new_file_name)) {\n    receive_message($_SESSION['toolkits_logon_username'], \"UPLOAD\", \"CRITICAL\", \"Error saving file: \" . $new_file_name, \"Error saving file: \" . error_get_last());\n    die(\"Couldn't move uploaded file into place.\");\n}", "<?php\n/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n\n * The Apereo Foundation licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at:\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire_once(dirname(__FILE__) . \"/../../../config.php\");\nrequire_once(dirname(__FILE__) . \"/../../../plugins.php\");\n\n/*\n * Function to convert a size string - e.g '128MB' - to the\n * actual number of bytes.\n *\n * Provided by 'John V' at https://stackoverflow.com/questions/11807115/php-convert-kb-mb-gb-tb-etc-to-bytes\n */\n\nfunction convertToBytes(string $from): ?int {\n    $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n\n    $number = substr($from, 0, -2);\n\n    $suffix = strtoupper(substr($from,-2));\n\n    //B or no suffix\n\n    if(is_numeric(substr($suffix, 0, 1))) {\n        return preg_replace('/[^\\d]/', '', $from);\n    }\n\n    $exponent = array_flip($units)[$suffix] ?? null;\n\n    if($exponent === null) {\n        return null;\n    }\n\n    return $number * (1024 ** $exponent);\n}\n\n\nif (!isset($_SESSION['toolkits_logon_username']))\n{\n    _debug(\"Session is invalid or expired\");\n    die(\"Session is invalid or expired\");\n}\nif (strpos($_POST['mediapath'], 'USER-FILES') === false)\n{\n    // Invalid upload path\n    _debug(\"Invalid or illegal mediapath\");\n    die(\"Invalid or illegal mediapath\");\n}\n\n_load_language_file(\"/website_code/php/import/fileupload.inc\");\n\nif(apply_filters('editor_upload_file', $_FILES)){\n\n    if($_FILES['filenameuploaded']['type']==\"text/html\"){\n\n        $php_check = file_get_contents($_FILES['filenameuploaded']['tmp_name']);\n\n        if(!stripos($php_check,\"<?PHP\")){\n\n            $new_file_name = $_POST['mediapath'] . $_FILES['filenameuploaded']['name'];\n\n            if(@move_uploaded_file($_FILES['filenameuploaded']['tmp_name'], $new_file_name)){\n\n                echo FILE_UPLOAD_SUCCESS . \"****\";\n\n            }else{\n\n                echo FILE_UPLOAD_ZIP_FAIL . \"****\";\n\n            }\n\n        }else{\n\n            echo FILE_UPLOAD_HTML_FAIL . \"****\";\t\t\t\t\n\n        }\n\n    }else{\n\n        $new_file_name = $_POST['mediapath'] . $_FILES['filenameuploaded']['name'];\n\n        if(@move_uploaded_file($_FILES['filenameuploaded']['tmp_name'], $new_file_name)){\n\n            echo FILE_UPLOAD_SUCCESS . \"****\";\n\n        }else{\n\n            echo FILE_UPLOAD_ZIP_FAIL . \"****\";\n\n        }\n\n    }\n\n\n}else{\n\n    /* Show the last file check error if possible. */\n    if (isset($last_file_check_error) && !empty($last_file_check_error)) {\n        $err_string = implode(\"\\n\", $last_file_check_error);\n\n        echo $err_string . \"****\";\n    }\n    elseif (isset($_SERVER['CONTENT_LENGTH']) && (int) $_SERVER['CONTENT_LENGTH'] > convertToBytes(ini_get('upload_max_filesize'))) {\n        echo \"File is too large. Maximum size allowed is: \" . ini_get('upload_max_filesize') . \"B****\";\n    }\n    else {\n        echo FILE_UPLOAD_MIME_FAIL . \" - \" . $_FILES['filenameuploaded']['type'] . \"****\";\n    }\n}\n?>\n"], "filenames": ["editor/uploadImage.php", "modules/decision/engine/upload.php", "modules/site/engine/upload.php", "website_code/php/import/fileupload.php"], "buggy_code_start_loc": [66, 98, 81, 56], "buggy_code_end_loc": [66, 98, 81, 56], "fixing_code_start_loc": [67, 99, 82, 57], "fixing_code_end_loc": [78, 101, 84, 63], "type": "CWE-22", "message": "An Authenticated Remote Code Exection (RCE) vulnerability exists in Xerte through 3.9 in website_code/php/import/fileupload.php by uploading a maliciously crafted PHP file though the project interface disguised as a language file to bypasses the upload filters. Attackers can manipulate the files destination by abusing path traversal in the 'mediapath' variable.", "other": {"cve": {"id": "CVE-2021-44664", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-24T21:15:07.623", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An Authenticated Remote Code Exection (RCE) vulnerability exists in Xerte through 3.9 in website_code/php/import/fileupload.php by uploading a maliciously crafted PHP file though the project interface disguised as a language file to bypasses the upload filters. Attackers can manipulate the files destination by abusing path traversal in the 'mediapath' variable."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de Ejecuci\u00f3n de C\u00f3digo Remoto Autenticado (RCE) en Xerte versiones hasta 3.9, en el archivo website_code/php/import/fileupload.php al subir un archivo PHP maliciosamente dise\u00f1ado mediante la interfaz del proyecto disfrazado como un archivo de lenguaje para omitir los filtros de subida. Los atacantes pueden manipular el destino de los archivos al abusar del salto de ruta en la variable \"mediapath\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xerte:xerte:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.9", "matchCriteriaId": "3D2AAB65-A809-4779-8476-15D5332073F9"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/166182/Xerte-3.9-Remote-Code-Execution.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/thexerteproject/xerteonlinetoolkits/commit/1672d6f46bbd6f6d42f0903ce9a313927ae2836b#diff-27433bb0be90e431d40986f9afebe9ee2f8d1025a7f9e55c3cd7a86f1f8e3fdc", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/thexerteproject/xerteonlinetoolkits/commit/6daeb81d089d4a561e22f931fff1327660a7d1b5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://riklutz.nl/2021/11/03/authenticated-file-upload-to-remote-code-execution-in-xerte/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thexerteproject/xerteonlinetoolkits/commit/1672d6f46bbd6f6d42f0903ce9a313927ae2836b#diff-27433bb0be90e431d40986f9afebe9ee2f8d1025a7f9e55c3cd7a86f1f8e3fdc"}}