{"buggy_code": ["Change Log\n----------\n\n0.99999999/1.0b9\n~~~~~~~~~~~~~~~~\n\nReleased on XXX\n\n* **Added ordereddict as a mandatory dependency on Python 2.6.**\n\n* Added ``lxml``, ``genshi``, ``datrie``, ``charade``, and ``all``\n  extras that will do the right thing based on the specific\n  interpreter implementation.\n\n* Now requires the ``mock`` package for the testsuite.\n\n* Cease supporting DATrie under PyPy.\n\n* **Remove ``PullDOM`` support, as this hasn't ever been properly\n  tested, doesn't entirely work, and as far as I can tell is\n  completely unused by anyone.**\n\n* Move testsuite to ``py.test``.\n\n* **Fix #124: move to webencodings for decoding the input byte stream;\n  this makes html5lib compliant with the Encoding Standard, and\n  introduces a required dependency on webencodings.**\n\n* **Cease supporting Python 3.2 (in both CPython and PyPy forms).**\n\n* **Fix comments containing double-dash with lxml 3.5 and above.**\n\n* **Use scripting disabled by default (as we don't implement\n  scripting).**\n\n\n0.9999999/1.0b8\n~~~~~~~~~~~~~~~\n\nReleased on September 10, 2015\n\n* Fix #195: fix the sanitizer to drop broken URLs (it threw an\n  exception between 0.9999 and 0.999999).\n\n\n0.999999/1.0b7\n~~~~~~~~~~~~~~\n\nReleased on July 7, 2015\n\n* Fix #189: fix the sanitizer to allow relative URLs again (as it did\n  prior to 0.9999/1.0b5).\n\n\n0.99999/1.0b6\n~~~~~~~~~~~~~\n\nReleased on April 30, 2015\n\n* Fix #188: fix the sanitizer to not throw an exception when sanitizing\n  bogus data URLs.\n\n\n0.9999/1.0b5\n~~~~~~~~~~~~\n\nReleased on April 29, 2015\n\n* Fix #153: Sanitizer fails to treat some attributes as URLs. Despite how\n  this sounds, this has no known security implications.  No known version\n  of IE (5.5 to current), Firefox (3 to current), Safari (6 to current),\n  Chrome (1 to current), or Opera (12 to current) will run any script\n  provided in these attributes.\n\n* Pass error message to the ParseError exception in strict parsing mode.\n\n* Allow data URIs in the sanitizer, with a whitelist of content-types.\n\n* Add support for Python implementations that don't support lone\n  surrogates (read: Jython). Fixes #2.\n\n* Remove localization of error messages. This functionality was totally\n  unused (and untested that everything was localizable), so we may as\n  well follow numerous browsers in not supporting translating technical\n  strings.\n\n* Expose treewalkers.pprint as a public API.\n\n* Add a documentEncoding property to HTML5Parser, fix #121.\n\n\n0.999\n~~~~~\n\nReleased on December 23, 2013\n\n* Fix #127: add work-around for CPython issue #20007: .read(0) on\n  http.client.HTTPResponse drops the rest of the content.\n\n* Fix #115: lxml treewalker can now deal with fragments containing, at\n  their root level, text nodes with non-ASCII characters on Python 2.\n\n\n0.99\n~~~~\n\nReleased on September 10, 2013\n\n* No library changes from 1.0b3; released as 0.99 as pip has changed\n  behaviour from 1.4 to avoid installing pre-release versions per\n  PEP 440.\n\n\n1.0b3\n~~~~~\n\nReleased on July 24, 2013\n\n* Removed ``RecursiveTreeWalker`` from ``treewalkers._base``. Any\n  implementation using it should be moved to\n  ``NonRecursiveTreeWalker``, as everything bundled with html5lib has\n  for years.\n\n* Fix #67 so that ``BufferedStream`` to correctly returns a bytes\n  object, thereby fixing any case where html5lib is passed a\n  non-seekable RawIOBase-like object.\n\n\n1.0b2\n~~~~~\n\nReleased on June 27, 2013\n\n* Removed reordering of attributes within the serializer. There is now\n  an ``alphabetical_attributes`` option which preserves the previous\n  behaviour through a new filter. This allows attribute order to be\n  preserved through html5lib if the tree builder preserves order.\n\n* Removed ``dom2sax`` from DOM treebuilders. It has been replaced by\n  ``treeadapters.sax.to_sax`` which is generic and supports any\n  treewalker; it also resolves all known bugs with ``dom2sax``.\n\n* Fix treewalker assertions on hitting bytes strings on\n  Python 2. Previous to 1.0b1, treewalkers coped with mixed\n  bytes/unicode data on Python 2; this reintroduces this prior\n  behaviour on Python 2. Behaviour is unchanged on Python 3.\n\n\n1.0b1\n~~~~~\n\nReleased on May 17, 2013\n\n* Implementation updated to implement the `HTML specification\n  <http://www.whatwg.org/specs/web-apps/current-work/>`_ as of 5th May\n  2013 (`SVN <http://svn.whatwg.org/webapps/>`_ revision r7867).\n\n* Python 3.2+ supported in a single codebase using the ``six`` library.\n\n* Removed support for Python 2.5 and older.\n\n* Removed the deprecated Beautiful Soup 3 treebuilder.\n  ``beautifulsoup4`` can use ``html5lib`` as a parser instead. Note that\n  since it doesn't support namespaces, foreign content like SVG and\n  MathML is parsed incorrectly.\n\n* Removed ``simpletree`` from the package. The default tree builder is\n  now ``etree`` (using the ``xml.etree.cElementTree`` implementation if\n  available, and ``xml.etree.ElementTree`` otherwise).\n\n* Removed the ``XHTMLSerializer`` as it never actually guaranteed its\n  output was well-formed XML, and hence provided little of use.\n\n* Removed default DOM treebuilder, so ``html5lib.treebuilders.dom`` is no\n  longer supported. ``html5lib.treebuilders.getTreeBuilder(\"dom\")`` will\n  return the default DOM treebuilder, which uses ``xml.dom.minidom``.\n\n* Optional heuristic character encoding detection now based on\n  ``charade`` for Python 2.6 - 3.3 compatibility.\n\n* Optional ``Genshi`` treewalker support fixed.\n\n* Many bugfixes, including:\n\n  * #33: null in attribute value breaks XML AttValue;\n\n  * #4: nested, indirect descendant, <button> causes infinite loop;\n\n  * `Google Code 215\n    <http://code.google.com/p/html5lib/issues/detail?id=215>`_: Properly\n    detect seekable streams;\n\n  * `Google Code 206\n    <http://code.google.com/p/html5lib/issues/detail?id=206>`_: add\n    support for <video preload=...>, <audio preload=...>;\n\n  * `Google Code 205\n    <http://code.google.com/p/html5lib/issues/detail?id=205>`_: add\n    support for <video poster=...>;\n\n  * `Google Code 202\n    <http://code.google.com/p/html5lib/issues/detail?id=202>`_: Unicode\n    file breaks InputStream.\n\n* Source code is now mostly PEP 8 compliant.\n\n* Test harness has been improved and now depends on ``nose``.\n\n* Documentation updated and moved to http://html5lib.readthedocs.org/.\n\n\n0.95\n~~~~\n\nReleased on February 11, 2012\n\n\n0.90\n~~~~\n\nReleased on January 17, 2010\n\n\n0.11.1\n~~~~~~\n\nReleased on June 12, 2008\n\n\n0.11\n~~~~\n\nReleased on June 10, 2008\n\n\n0.10\n~~~~\n\nReleased on October 7, 2007\n\n\n0.9\n~~~\n\nReleased on March 11, 2007\n\n\n0.2\n~~~\n\nReleased on January 8, 2007\n", "from __future__ import absolute_import, division, unicode_literals\nfrom six import text_type\n\nimport re\n\nfrom ..constants import voidElements, booleanAttributes, spaceCharacters\nfrom ..constants import rcdataElements, entities, xmlEntities\nfrom .. import utils\nfrom xml.sax.saxutils import escape\n\nspaceCharacters = \"\".join(spaceCharacters)\n\nquoteAttributeSpec = re.compile(\"[\" + spaceCharacters + \"\\\"'=<>`]\")\n\ntry:\n    from codecs import register_error, xmlcharrefreplace_errors\nexcept ImportError:\n    unicode_encode_errors = \"strict\"\nelse:\n    unicode_encode_errors = \"htmlentityreplace\"\n\n    encode_entity_map = {}\n    is_ucs4 = len(\"\\U0010FFFF\") == 1\n    for k, v in list(entities.items()):\n        # skip multi-character entities\n        if ((is_ucs4 and len(v) > 1) or\n                (not is_ucs4 and len(v) > 2)):\n            continue\n        if v != \"&\":\n            if len(v) == 2:\n                v = utils.surrogatePairToCodepoint(v)\n            else:\n                v = ord(v)\n            if v not in encode_entity_map or k.islower():\n                # prefer &lt; over &LT; and similarly for &amp;, &gt;, etc.\n                encode_entity_map[v] = k\n\n    def htmlentityreplace_errors(exc):\n        if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):\n            res = []\n            codepoints = []\n            skip = False\n            for i, c in enumerate(exc.object[exc.start:exc.end]):\n                if skip:\n                    skip = False\n                    continue\n                index = i + exc.start\n                if utils.isSurrogatePair(exc.object[index:min([exc.end, index + 2])]):\n                    codepoint = utils.surrogatePairToCodepoint(exc.object[index:index + 2])\n                    skip = True\n                else:\n                    codepoint = ord(c)\n                codepoints.append(codepoint)\n            for cp in codepoints:\n                e = encode_entity_map.get(cp)\n                if e:\n                    res.append(\"&\")\n                    res.append(e)\n                    if not e.endswith(\";\"):\n                        res.append(\";\")\n                else:\n                    res.append(\"&#x%s;\" % (hex(cp)[2:]))\n            return (\"\".join(res), exc.end)\n        else:\n            return xmlcharrefreplace_errors(exc)\n\n    register_error(unicode_encode_errors, htmlentityreplace_errors)\n\n    del register_error\n\n\nclass HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = False\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=True|False\n          Whether to quote attribute values that don't require quoting\n          per HTML5 parsing rules.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values:\n                            quote_attr = True\n                        else:\n                            quote_attr = len(v) == 0 or quoteAttributeSpec.search(v)\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError\n\n\ndef SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass\n", "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test \\\"with\\\" &amp;quot;'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test \\\"with\\\" &quot;\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value escaping\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo<bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo<bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with <)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo=bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo=bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with =)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo>bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo>bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with >)\"\n        },\n        {\n            \"expected\": [\n                \"<span title='foo\\\"bar'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\\"bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with \\\")\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar&quot;baz\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\\\"baz\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with both \\\" and ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with space)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\tbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\tbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with tab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\nbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\nbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with LF)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\rbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\rbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with CR)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo\\u000bbar>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\u000bbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with linetab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\fbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\fbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with form feed)\"\n        },\n        {\n            \"expected\": [\n                \"<img>\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"void element (as EmptyTag token)\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE foo>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"foo\"\n                ]\n            ],\n            \"description\": \"doctype in error\"\n        },\n        {\n            \"expected\": [\n                \"a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"character data\",\n            \"options\": {\n                \"encoding\": \"utf-8\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a<b>c&d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\"\n                ]\n            ],\n            \"description\": \"doctype\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\",\n                    \"http://www.w3.org/TR/html4/strict.dtd\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE without system identifer\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE html SYSTEM \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"html\",\n                    \"\",\n                    \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"\n                ]\n            ],\n            \"description\": \"IBM DOCTYPE without public identifer\"\n        }\n    ]\n}\n", "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test &#39;with&#39; quote_char'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test 'with' quote_char\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_char=\\\"'\\\"\",\n            \"options\": {\n                \"quote_char\": \"'\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<button disabled>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"button\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"disabled\",\n                            \"value\": \"disabled\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values=true\",\n            \"options\": {\n                \"quote_attr_values\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values=true with irrelevant\",\n            \"options\": {\n                \"quote_attr_values\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<img />\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with non-void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=\\\"\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false with empty value\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<a title=\\\"a&lt;b>c&amp;d\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"a\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"a<b>c&d\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"escape less than signs in attribute values\",\n            \"options\": {\n                \"escape_lt_in_attrs\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\",\n            \"options\": {\n                \"escape_rcdata\": true\n            }\n        }\n    ]\n}", "from __future__ import absolute_import, division, unicode_literals\n\nimport os\nimport json\n\nimport pytest\n\nfrom .support import get_data_files\n\nfrom html5lib import constants\nfrom html5lib.filters.lint import Filter as Lint\nfrom html5lib.serializer import HTMLSerializer, serialize\nfrom html5lib.treewalkers._base import TreeWalker\n\noptionals_loaded = []\n\ntry:\n    from lxml import etree\n    optionals_loaded.append(\"lxml\")\nexcept ImportError:\n    pass\n\ndefault_namespace = constants.namespaces[\"html\"]\n\n\nclass JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs\n\n\ndef serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))\n\n\ndef runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)\n\n\ndef throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})\n\n\ndef testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])\n\n\ndef testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])\n\n\ndef testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])\n\n\ndef testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])\n\n\ndef testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])\n\n\ndef testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])\n\n\ndef testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])\n\n\n@pytest.fixture\ndef lxml_parser():\n    return etree.XMLParser(resolve_entities=False)\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityReplacement(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>\\u03B2</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityXML(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityNoResolve(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False,\n                                  resolve_entities=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n\n\ndef test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})\n"], "fixing_code": ["Change Log\n----------\n\n0.99999999/1.0b9\n~~~~~~~~~~~~~~~~\n\nReleased on XXX\n\n* **Added ordereddict as a mandatory dependency on Python 2.6.**\n\n* Added ``lxml``, ``genshi``, ``datrie``, ``charade``, and ``all``\n  extras that will do the right thing based on the specific\n  interpreter implementation.\n\n* Now requires the ``mock`` package for the testsuite.\n\n* Cease supporting DATrie under PyPy.\n\n* **Remove ``PullDOM`` support, as this hasn't ever been properly\n  tested, doesn't entirely work, and as far as I can tell is\n  completely unused by anyone.**\n\n* Move testsuite to ``py.test``.\n\n* **Fix #124: move to webencodings for decoding the input byte stream;\n  this makes html5lib compliant with the Encoding Standard, and\n  introduces a required dependency on webencodings.**\n\n* **Cease supporting Python 3.2 (in both CPython and PyPy forms).**\n\n* **Fix comments containing double-dash with lxml 3.5 and above.**\n\n* **Use scripting disabled by default (as we don't implement\n  scripting).**\n\n* **Fix #11, avoiding the XSS bug potentially caused by serializer\n  allowing attribute values to be escaped out of in old browser versions,\n  changing the quote_attr_values option on serializer to take one of\n  three values, \"always\" (the old True value), \"legacy\" (the new option,\n  and the new default), and \"spec\" (the old False value, and the old\n  default).**\n\n\n0.9999999/1.0b8\n~~~~~~~~~~~~~~~\n\nReleased on September 10, 2015\n\n* Fix #195: fix the sanitizer to drop broken URLs (it threw an\n  exception between 0.9999 and 0.999999).\n\n\n0.999999/1.0b7\n~~~~~~~~~~~~~~\n\nReleased on July 7, 2015\n\n* Fix #189: fix the sanitizer to allow relative URLs again (as it did\n  prior to 0.9999/1.0b5).\n\n\n0.99999/1.0b6\n~~~~~~~~~~~~~\n\nReleased on April 30, 2015\n\n* Fix #188: fix the sanitizer to not throw an exception when sanitizing\n  bogus data URLs.\n\n\n0.9999/1.0b5\n~~~~~~~~~~~~\n\nReleased on April 29, 2015\n\n* Fix #153: Sanitizer fails to treat some attributes as URLs. Despite how\n  this sounds, this has no known security implications.  No known version\n  of IE (5.5 to current), Firefox (3 to current), Safari (6 to current),\n  Chrome (1 to current), or Opera (12 to current) will run any script\n  provided in these attributes.\n\n* Pass error message to the ParseError exception in strict parsing mode.\n\n* Allow data URIs in the sanitizer, with a whitelist of content-types.\n\n* Add support for Python implementations that don't support lone\n  surrogates (read: Jython). Fixes #2.\n\n* Remove localization of error messages. This functionality was totally\n  unused (and untested that everything was localizable), so we may as\n  well follow numerous browsers in not supporting translating technical\n  strings.\n\n* Expose treewalkers.pprint as a public API.\n\n* Add a documentEncoding property to HTML5Parser, fix #121.\n\n\n0.999\n~~~~~\n\nReleased on December 23, 2013\n\n* Fix #127: add work-around for CPython issue #20007: .read(0) on\n  http.client.HTTPResponse drops the rest of the content.\n\n* Fix #115: lxml treewalker can now deal with fragments containing, at\n  their root level, text nodes with non-ASCII characters on Python 2.\n\n\n0.99\n~~~~\n\nReleased on September 10, 2013\n\n* No library changes from 1.0b3; released as 0.99 as pip has changed\n  behaviour from 1.4 to avoid installing pre-release versions per\n  PEP 440.\n\n\n1.0b3\n~~~~~\n\nReleased on July 24, 2013\n\n* Removed ``RecursiveTreeWalker`` from ``treewalkers._base``. Any\n  implementation using it should be moved to\n  ``NonRecursiveTreeWalker``, as everything bundled with html5lib has\n  for years.\n\n* Fix #67 so that ``BufferedStream`` to correctly returns a bytes\n  object, thereby fixing any case where html5lib is passed a\n  non-seekable RawIOBase-like object.\n\n\n1.0b2\n~~~~~\n\nReleased on June 27, 2013\n\n* Removed reordering of attributes within the serializer. There is now\n  an ``alphabetical_attributes`` option which preserves the previous\n  behaviour through a new filter. This allows attribute order to be\n  preserved through html5lib if the tree builder preserves order.\n\n* Removed ``dom2sax`` from DOM treebuilders. It has been replaced by\n  ``treeadapters.sax.to_sax`` which is generic and supports any\n  treewalker; it also resolves all known bugs with ``dom2sax``.\n\n* Fix treewalker assertions on hitting bytes strings on\n  Python 2. Previous to 1.0b1, treewalkers coped with mixed\n  bytes/unicode data on Python 2; this reintroduces this prior\n  behaviour on Python 2. Behaviour is unchanged on Python 3.\n\n\n1.0b1\n~~~~~\n\nReleased on May 17, 2013\n\n* Implementation updated to implement the `HTML specification\n  <http://www.whatwg.org/specs/web-apps/current-work/>`_ as of 5th May\n  2013 (`SVN <http://svn.whatwg.org/webapps/>`_ revision r7867).\n\n* Python 3.2+ supported in a single codebase using the ``six`` library.\n\n* Removed support for Python 2.5 and older.\n\n* Removed the deprecated Beautiful Soup 3 treebuilder.\n  ``beautifulsoup4`` can use ``html5lib`` as a parser instead. Note that\n  since it doesn't support namespaces, foreign content like SVG and\n  MathML is parsed incorrectly.\n\n* Removed ``simpletree`` from the package. The default tree builder is\n  now ``etree`` (using the ``xml.etree.cElementTree`` implementation if\n  available, and ``xml.etree.ElementTree`` otherwise).\n\n* Removed the ``XHTMLSerializer`` as it never actually guaranteed its\n  output was well-formed XML, and hence provided little of use.\n\n* Removed default DOM treebuilder, so ``html5lib.treebuilders.dom`` is no\n  longer supported. ``html5lib.treebuilders.getTreeBuilder(\"dom\")`` will\n  return the default DOM treebuilder, which uses ``xml.dom.minidom``.\n\n* Optional heuristic character encoding detection now based on\n  ``charade`` for Python 2.6 - 3.3 compatibility.\n\n* Optional ``Genshi`` treewalker support fixed.\n\n* Many bugfixes, including:\n\n  * #33: null in attribute value breaks XML AttValue;\n\n  * #4: nested, indirect descendant, <button> causes infinite loop;\n\n  * `Google Code 215\n    <http://code.google.com/p/html5lib/issues/detail?id=215>`_: Properly\n    detect seekable streams;\n\n  * `Google Code 206\n    <http://code.google.com/p/html5lib/issues/detail?id=206>`_: add\n    support for <video preload=...>, <audio preload=...>;\n\n  * `Google Code 205\n    <http://code.google.com/p/html5lib/issues/detail?id=205>`_: add\n    support for <video poster=...>;\n\n  * `Google Code 202\n    <http://code.google.com/p/html5lib/issues/detail?id=202>`_: Unicode\n    file breaks InputStream.\n\n* Source code is now mostly PEP 8 compliant.\n\n* Test harness has been improved and now depends on ``nose``.\n\n* Documentation updated and moved to http://html5lib.readthedocs.org/.\n\n\n0.95\n~~~~\n\nReleased on February 11, 2012\n\n\n0.90\n~~~~\n\nReleased on January 17, 2010\n\n\n0.11.1\n~~~~~~\n\nReleased on June 12, 2008\n\n\n0.11\n~~~~\n\nReleased on June 10, 2008\n\n\n0.10\n~~~~\n\nReleased on October 7, 2007\n\n\n0.9\n~~~\n\nReleased on March 11, 2007\n\n\n0.2\n~~~\n\nReleased on January 8, 2007\n", "from __future__ import absolute_import, division, unicode_literals\nfrom six import text_type\n\nimport re\n\nfrom ..constants import voidElements, booleanAttributes, spaceCharacters\nfrom ..constants import rcdataElements, entities, xmlEntities\nfrom .. import utils\nfrom xml.sax.saxutils import escape\n\nspaceCharacters = \"\".join(spaceCharacters)\n\nquoteAttributeSpecChars = spaceCharacters + \"\\\"'=<>`\"\nquoteAttributeSpec = re.compile(\"[\" + quoteAttributeSpecChars + \"]\")\nquoteAttributeLegacy = re.compile(\"[\" + quoteAttributeSpecChars +\n                                  \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n                                  \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n                                  \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n                                  \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n                                  \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n                                  \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n                                  \"\\u3000]\")\n\ntry:\n    from codecs import register_error, xmlcharrefreplace_errors\nexcept ImportError:\n    unicode_encode_errors = \"strict\"\nelse:\n    unicode_encode_errors = \"htmlentityreplace\"\n\n    encode_entity_map = {}\n    is_ucs4 = len(\"\\U0010FFFF\") == 1\n    for k, v in list(entities.items()):\n        # skip multi-character entities\n        if ((is_ucs4 and len(v) > 1) or\n                (not is_ucs4 and len(v) > 2)):\n            continue\n        if v != \"&\":\n            if len(v) == 2:\n                v = utils.surrogatePairToCodepoint(v)\n            else:\n                v = ord(v)\n            if v not in encode_entity_map or k.islower():\n                # prefer &lt; over &LT; and similarly for &amp;, &gt;, etc.\n                encode_entity_map[v] = k\n\n    def htmlentityreplace_errors(exc):\n        if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):\n            res = []\n            codepoints = []\n            skip = False\n            for i, c in enumerate(exc.object[exc.start:exc.end]):\n                if skip:\n                    skip = False\n                    continue\n                index = i + exc.start\n                if utils.isSurrogatePair(exc.object[index:min([exc.end, index + 2])]):\n                    codepoint = utils.surrogatePairToCodepoint(exc.object[index:index + 2])\n                    skip = True\n                else:\n                    codepoint = ord(c)\n                codepoints.append(codepoint)\n            for cp in codepoints:\n                e = encode_entity_map.get(cp)\n                if e:\n                    res.append(\"&\")\n                    res.append(e)\n                    if not e.endswith(\";\"):\n                        res.append(\";\")\n                else:\n                    res.append(\"&#x%s;\" % (hex(cp)[2:]))\n            return (\"\".join(res), exc.end)\n        else:\n            return xmlcharrefreplace_errors(exc)\n\n    register_error(unicode_encode_errors, htmlentityreplace_errors)\n\n    del register_error\n\n\nclass HTMLSerializer(object):\n\n    # attribute quoting options\n    quote_attr_values = \"legacy\"  # be secure by default\n    quote_char = '\"'\n    use_best_quote_char = True\n\n    # tag syntax options\n    omit_optional_tags = True\n    minimize_boolean_attributes = True\n    use_trailing_solidus = False\n    space_before_trailing_solidus = True\n\n    # escaping options\n    escape_lt_in_attrs = False\n    escape_rcdata = False\n    resolve_entities = True\n\n    # miscellaneous options\n    alphabetical_attributes = False\n    inject_meta_charset = True\n    strip_whitespace = False\n    sanitize = False\n\n    options = (\"quote_attr_values\", \"quote_char\", \"use_best_quote_char\",\n               \"omit_optional_tags\", \"minimize_boolean_attributes\",\n               \"use_trailing_solidus\", \"space_before_trailing_solidus\",\n               \"escape_lt_in_attrs\", \"escape_rcdata\", \"resolve_entities\",\n               \"alphabetical_attributes\", \"inject_meta_charset\",\n               \"strip_whitespace\", \"sanitize\")\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize HTMLSerializer.\n\n        Keyword options (default given first unless specified) include:\n\n        inject_meta_charset=True|False\n          Whether it insert a meta element to define the character set of the\n          document.\n        quote_attr_values=\"legacy\"|\"spec\"|\"always\"\n          Whether to quote attribute values that don't require quoting\n          per legacy browser behaviour, when required by the standard, or always.\n        quote_char=u'\"'|u\"'\"\n          Use given quote character for attribute quoting. Default is to\n          use double quote unless attribute value contains a double quote,\n          in which case single quotes are used instead.\n        escape_lt_in_attrs=False|True\n          Whether to escape < in attribute values.\n        escape_rcdata=False|True\n          Whether to escape characters that need to be escaped within normal\n          elements within rcdata elements such as style.\n        resolve_entities=True|False\n          Whether to resolve named character entities that appear in the\n          source tree. The XML predefined entities &lt; &gt; &amp; &quot; &apos;\n          are unaffected by this setting.\n        strip_whitespace=False|True\n          Whether to remove semantically meaningless whitespace. (This\n          compresses all whitespace to a single space except within pre.)\n        minimize_boolean_attributes=True|False\n          Shortens boolean attributes to give just the attribute value,\n          for example <input disabled=\"disabled\"> becomes <input disabled>.\n        use_trailing_solidus=False|True\n          Includes a close-tag slash at the end of the start tag of void\n          elements (empty elements whose end tag is forbidden). E.g. <hr/>.\n        space_before_trailing_solidus=True|False\n          Places a space immediately before the closing slash in a tag\n          using a trailing solidus. E.g. <hr />. Requires use_trailing_solidus.\n        sanitize=False|True\n          Strip all unsafe or unknown constructs from output.\n          See `html5lib user documentation`_\n        omit_optional_tags=True|False\n          Omit start/end tags that are optional.\n        alphabetical_attributes=False|True\n          Reorder attributes to be in alphabetical order.\n\n        .. _html5lib user documentation: http://code.google.com/p/html5lib/wiki/UserDocumentation\n        \"\"\"\n        if 'quote_char' in kwargs:\n            self.use_best_quote_char = False\n        for attr in self.options:\n            setattr(self, attr, kwargs.get(attr, getattr(self, attr)))\n        self.errors = []\n        self.strict = False\n\n    def encode(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, unicode_encode_errors)\n        else:\n            return string\n\n    def encodeStrict(self, string):\n        assert(isinstance(string, text_type))\n        if self.encoding:\n            return string.encode(self.encoding, \"strict\")\n        else:\n            return string\n\n    def serialize(self, treewalker, encoding=None):\n        self.encoding = encoding\n        in_cdata = False\n        self.errors = []\n\n        if encoding and self.inject_meta_charset:\n            from ..filters.inject_meta_charset import Filter\n            treewalker = Filter(treewalker, encoding)\n        # WhitespaceFilter should be used before OptionalTagFilter\n        # for maximum efficiently of this latter filter\n        if self.strip_whitespace:\n            from ..filters.whitespace import Filter\n            treewalker = Filter(treewalker)\n        if self.sanitize:\n            from ..filters.sanitizer import Filter\n            treewalker = Filter(treewalker)\n        if self.omit_optional_tags:\n            from ..filters.optionaltags import Filter\n            treewalker = Filter(treewalker)\n        # Alphabetical attributes must be last, as other filters\n        # could add attributes and alter the order\n        if self.alphabetical_attributes:\n            from ..filters.alphabeticalattributes import Filter\n            treewalker = Filter(treewalker)\n\n        for token in treewalker:\n            type = token[\"type\"]\n            if type == \"Doctype\":\n                doctype = \"<!DOCTYPE %s\" % token[\"name\"]\n\n                if token[\"publicId\"]:\n                    doctype += ' PUBLIC \"%s\"' % token[\"publicId\"]\n                elif token[\"systemId\"]:\n                    doctype += \" SYSTEM\"\n                if token[\"systemId\"]:\n                    if token[\"systemId\"].find('\"') >= 0:\n                        if token[\"systemId\"].find(\"'\") >= 0:\n                            self.serializeError(\"System identifer contains both single and double quote characters\")\n                        quote_char = \"'\"\n                    else:\n                        quote_char = '\"'\n                    doctype += \" %s%s%s\" % (quote_char, token[\"systemId\"], quote_char)\n\n                doctype += \">\"\n                yield self.encodeStrict(doctype)\n\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                if type == \"SpaceCharacters\" or in_cdata:\n                    if in_cdata and token[\"data\"].find(\"</\") >= 0:\n                        self.serializeError(\"Unexpected </ in CDATA\")\n                    yield self.encode(token[\"data\"])\n                else:\n                    yield self.encode(escape(token[\"data\"]))\n\n            elif type in (\"StartTag\", \"EmptyTag\"):\n                name = token[\"name\"]\n                yield self.encodeStrict(\"<%s\" % name)\n                if name in rcdataElements and not self.escape_rcdata:\n                    in_cdata = True\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                for (attr_namespace, attr_name), attr_value in token[\"data\"].items():\n                    # TODO: Add namespace support here\n                    k = attr_name\n                    v = attr_value\n                    yield self.encodeStrict(' ')\n\n                    yield self.encodeStrict(k)\n                    if not self.minimize_boolean_attributes or \\\n                        (k not in booleanAttributes.get(name, tuple()) and\n                         k not in booleanAttributes.get(\"\", tuple())):\n                        yield self.encodeStrict(\"=\")\n                        if self.quote_attr_values == \"always\" or len(v) == 0:\n                            quote_attr = True\n                        elif self.quote_attr_values == \"spec\":\n                            quote_attr = quoteAttributeSpec.search(v) is not None\n                        elif self.quote_attr_values == \"legacy\":\n                            quote_attr = quoteAttributeLegacy.search(v) is not None\n                        else:\n                            raise ValueError(\"quote_attr_values must be one of: \"\n                                             \"'always', 'spec', or 'legacy'\")\n                        v = v.replace(\"&\", \"&amp;\")\n                        if self.escape_lt_in_attrs:\n                            v = v.replace(\"<\", \"&lt;\")\n                        if quote_attr:\n                            quote_char = self.quote_char\n                            if self.use_best_quote_char:\n                                if \"'\" in v and '\"' not in v:\n                                    quote_char = '\"'\n                                elif '\"' in v and \"'\" not in v:\n                                    quote_char = \"'\"\n                            if quote_char == \"'\":\n                                v = v.replace(\"'\", \"&#39;\")\n                            else:\n                                v = v.replace('\"', \"&quot;\")\n                            yield self.encodeStrict(quote_char)\n                            yield self.encode(v)\n                            yield self.encodeStrict(quote_char)\n                        else:\n                            yield self.encode(v)\n                if name in voidElements and self.use_trailing_solidus:\n                    if self.space_before_trailing_solidus:\n                        yield self.encodeStrict(\" /\")\n                    else:\n                        yield self.encodeStrict(\"/\")\n                yield self.encode(\">\")\n\n            elif type == \"EndTag\":\n                name = token[\"name\"]\n                if name in rcdataElements:\n                    in_cdata = False\n                elif in_cdata:\n                    self.serializeError(\"Unexpected child element of a CDATA element\")\n                yield self.encodeStrict(\"</%s>\" % name)\n\n            elif type == \"Comment\":\n                data = token[\"data\"]\n                if data.find(\"--\") >= 0:\n                    self.serializeError(\"Comment contains --\")\n                yield self.encodeStrict(\"<!--%s-->\" % token[\"data\"])\n\n            elif type == \"Entity\":\n                name = token[\"name\"]\n                key = name + \";\"\n                if key not in entities:\n                    self.serializeError(\"Entity %s not recognized\" % name)\n                if self.resolve_entities and key not in xmlEntities:\n                    data = entities[key]\n                else:\n                    data = \"&%s;\" % name\n                yield self.encodeStrict(data)\n\n            else:\n                self.serializeError(token[\"data\"])\n\n    def render(self, treewalker, encoding=None):\n        if encoding:\n            return b\"\".join(list(self.serialize(treewalker, encoding)))\n        else:\n            return \"\".join(list(self.serialize(treewalker)))\n\n    def serializeError(self, data=\"XXX ERROR MESSAGE NEEDED\"):\n        # XXX The idea is to make data mandatory.\n        self.errors.append(data)\n        if self.strict:\n            raise SerializeError\n\n\ndef SerializeError(Exception):\n    \"\"\"Error in serialized tree\"\"\"\n    pass\n", "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test \\\"with\\\" &amp;quot;'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test \\\"with\\\" &quot;\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value escaping\"\n        },\n        {\n            \"expected\": [\n                \"<span title=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo<bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo<bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with <)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo=bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo=bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with =)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo>bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo>bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with >)\"\n        },\n        {\n            \"expected\": [\n                \"<span title='foo\\\"bar'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\\"bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with \\\")\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo'bar&quot;baz\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo'bar\\\"baz\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with both \\\" and ')\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo bar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo bar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with space)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\tbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\tbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with tab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\nbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\nbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with LF)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\rbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\rbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with CR)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\u000bbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\u000bbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value non-quoting (with linetab)\"\n        },\n        {\n            \"expected\": [\n                \"<span title=\\\"foo\\fbar\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"foo\\fbar\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"proper attribute value quoting (with form feed)\"\n        },\n        {\n            \"expected\": [\n                \"<img>\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"void element (as EmptyTag token)\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE foo>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"foo\"\n                ]\n            ],\n            \"description\": \"doctype in error\"\n        },\n        {\n            \"expected\": [\n                \"a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"character data\",\n            \"options\": {\n                \"encoding\": \"utf-8\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a<b>c&d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML>\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\"\n                ]\n            ],\n            \"description\": \"doctype\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\" \\\"http://www.w3.org/TR/html4/strict.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\",\n                    \"http://www.w3.org/TR/html4/strict.dtd\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"HTML\",\n                    \"-//W3C//DTD HTML 4.01//EN\"\n                ]\n            ],\n            \"description\": \"HTML 4.01 DOCTYPE without system identifer\"\n        },\n        {\n            \"expected\": [\n                \"<!DOCTYPE html SYSTEM \\\"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"Doctype\",\n                    \"html\",\n                    \"\",\n                    \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"\n                ]\n            ],\n            \"description\": \"IBM DOCTYPE without public identifer\"\n        }\n    ]\n}\n", "{\n    \"tests\": [\n        {\n            \"expected\": [\n                \"<span title='test &#39;with&#39; quote_char'>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"span\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"test 'with' quote_char\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_char=\\\"'\\\"\",\n            \"options\": {\n                \"quote_char\": \"'\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<button disabled>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"button\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"disabled\",\n                            \"value\": \"disabled\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values='always'\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"quote_attr_values='always' with irrelevant\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=\\\"foo\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='always'\",\n            \"options\": {\n                \"quote_attr_values\": \"always\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='legacy'\",\n            \"options\": {\n                \"quote_attr_values\": \"legacy\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<div class=foo>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"class\",\n                            \"value\": \"foo\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"non-minimized quote_attr_values='spec'\",\n            \"options\": {\n                \"quote_attr_values\": \"spec\"\n            }\n        },\n        {\n            \"expected\": [\n                \"<img />\"\n            ],\n            \"input\": [\n                [\n                    \"EmptyTag\",\n                    \"img\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    {}\n                ]\n            ],\n            \"description\": \"use_trailing_solidus=true with non-void element\",\n            \"options\": {\n                \"use_trailing_solidus\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=irrelevant>\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"irrelevant\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<div irrelevant=\\\"\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"div\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"irrelevant\",\n                            \"value\": \"\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"minimize_boolean_attributes=false with empty value\",\n            \"options\": {\n                \"minimize_boolean_attributes\": false\n            }\n        },\n        {\n            \"expected\": [\n                \"<a title=\\\"a&lt;b>c&amp;d\\\">\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"a\",\n                    [\n                        {\n                            \"namespace\": null,\n                            \"name\": \"title\",\n                            \"value\": \"a<b>c&d\"\n                        }\n                    ]\n                ]\n            ],\n            \"description\": \"escape less than signs in attribute values\",\n            \"options\": {\n                \"escape_lt_in_attrs\": true\n            }\n        },\n        {\n            \"expected\": [\n                \"<script>a&lt;b&gt;c&amp;d\"\n            ],\n            \"input\": [\n                [\n                    \"StartTag\",\n                    \"http://www.w3.org/1999/xhtml\",\n                    \"script\",\n                    {}\n                ],\n                [\n                    \"Characters\",\n                    \"a<b>c&d\"\n                ]\n            ],\n            \"description\": \"rcdata\",\n            \"options\": {\n                \"escape_rcdata\": true\n            }\n        }\n    ]\n}", "from __future__ import absolute_import, division, unicode_literals\n\nimport os\nimport json\n\nimport pytest\n\nfrom .support import get_data_files\n\nfrom html5lib import constants\nfrom html5lib.filters.lint import Filter as Lint\nfrom html5lib.serializer import HTMLSerializer, serialize\nfrom html5lib.treewalkers._base import TreeWalker\n\noptionals_loaded = []\n\ntry:\n    from lxml import etree\n    optionals_loaded.append(\"lxml\")\nexcept ImportError:\n    pass\n\ndefault_namespace = constants.namespaces[\"html\"]\n\n\nclass JsonWalker(TreeWalker):\n    def __iter__(self):\n        for token in self.tree:\n            type = token[0]\n            if type == \"StartTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:4]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:3]\n                yield self.startTag(namespace, name, self._convertAttrib(attrib))\n            elif type == \"EndTag\":\n                if len(token) == 3:\n                    namespace, name = token[1:3]\n                else:\n                    namespace = default_namespace\n                    name = token[1]\n                yield self.endTag(namespace, name)\n            elif type == \"EmptyTag\":\n                if len(token) == 4:\n                    namespace, name, attrib = token[1:]\n                else:\n                    namespace = default_namespace\n                    name, attrib = token[1:]\n                for token in self.emptyTag(namespace, name, self._convertAttrib(attrib)):\n                    yield token\n            elif type == \"Comment\":\n                yield self.comment(token[1])\n            elif type in (\"Characters\", \"SpaceCharacters\"):\n                for token in self.text(token[1]):\n                    yield token\n            elif type == \"Doctype\":\n                if len(token) == 4:\n                    yield self.doctype(token[1], token[2], token[3])\n                elif len(token) == 3:\n                    yield self.doctype(token[1], token[2])\n                else:\n                    yield self.doctype(token[1])\n            else:\n                raise ValueError(\"Unknown token type: \" + type)\n\n    def _convertAttrib(self, attribs):\n        \"\"\"html5lib tree-walkers use a dict of (namespace, name): value for\n        attributes, but JSON cannot represent this. Convert from the format\n        in the serializer tests (a list of dicts with \"namespace\", \"name\",\n        and \"value\" as keys) to html5lib's tree-walker format.\"\"\"\n        attrs = {}\n        for attrib in attribs:\n            name = (attrib[\"namespace\"], attrib[\"name\"])\n            assert(name not in attrs)\n            attrs[name] = attrib[\"value\"]\n        return attrs\n\n\ndef serialize_html(input, options):\n    options = dict([(str(k), v) for k, v in options.items()])\n    stream = Lint(JsonWalker(input), False)\n    serializer = HTMLSerializer(alphabetical_attributes=True, **options)\n    return serializer.render(stream, options.get(\"encoding\", None))\n\n\ndef runSerializerTest(input, expected, options):\n    encoding = options.get(\"encoding\", None)\n\n    if encoding:\n        expected = list(map(lambda x: x.encode(encoding), expected))\n\n    result = serialize_html(input, options)\n    if len(expected) == 1:\n        assert expected[0] == result, \"Expected:\\n%s\\nActual:\\n%s\\nOptions:\\n%s\" % (expected[0], result, str(options))\n    elif result not in expected:\n        assert False, \"Expected: %s, Received: %s\" % (expected, result)\n\n\ndef throwsWithLatin1(input):\n    with pytest.raises(UnicodeEncodeError):\n        serialize_html(input, {\"encoding\": \"iso-8859-1\"})\n\n\ndef testDoctypeName():\n    throwsWithLatin1([[\"Doctype\", \"\\u0101\"]])\n\n\ndef testDoctypePublicId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"\\u0101\"]])\n\n\ndef testDoctypeSystemId():\n    throwsWithLatin1([[\"Doctype\", \"potato\", \"potato\", \"\\u0101\"]])\n\n\ndef testCdataCharacters():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"style\", {}], [\"Characters\", \"\\u0101\"]],\n                      [\"<style>&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testCharacters():\n    runSerializerTest([[\"Characters\", \"\\u0101\"]],\n                      [\"&amacr;\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testStartTagName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\", []]])\n\n\ndef testAttributeName():\n    throwsWithLatin1([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\", [{\"namespace\": None, \"name\": \"\\u0101\", \"value\": \"potato\"}]]])\n\n\ndef testAttributeValue():\n    runSerializerTest([[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n                        [{\"namespace\": None, \"name\": \"potato\", \"value\": \"\\u0101\"}]]],\n                      [\"<span potato=&amacr;>\"], {\"encoding\": \"iso-8859-1\"})\n\n\ndef testEndTagName():\n    throwsWithLatin1([[\"EndTag\", \"http://www.w3.org/1999/xhtml\", \"\\u0101\"]])\n\n\ndef testComment():\n    throwsWithLatin1([[\"Comment\", \"\\u0101\"]])\n\n\n@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"))\ndef testSpecQuoteAttribute(c):\n    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n    if c == '\"':\n        output_ = [\"<span foo='%s'>\" % c]\n    else:\n        output_ = ['<span foo=\"%s\">' % c]\n    options_ = {\"quote_attr_values\": \"spec\"}\n    runSerializerTest(input_, output_, options_)\n\n\n@pytest.mark.parametrize(\"c\", list(\"\\t\\n\\u000C\\x20\\r\\\"'=<>`\"\n                                   \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\"\n                                   \"\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\"\n                                   \"\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n                                   \"\\x20\\x2f\\x60\\xa0\\u1680\\u180e\\u180f\\u2000\"\n                                   \"\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\"\n                                   \"\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\"\n                                   \"\\u3000\"))\ndef testLegacyQuoteAttribute(c):\n    input_ = [[\"StartTag\", \"http://www.w3.org/1999/xhtml\", \"span\",\n               [{\"namespace\": None, \"name\": \"foo\", \"value\": c}]]]\n    if c == '\"':\n        output_ = [\"<span foo='%s'>\" % c]\n    else:\n        output_ = ['<span foo=\"%s\">' % c]\n    options_ = {\"quote_attr_values\": \"legacy\"}\n    runSerializerTest(input_, output_, options_)\n\n\n@pytest.fixture\ndef lxml_parser():\n    return etree.XMLParser(resolve_entities=False)\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityReplacement(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>\\u03B2</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityXML(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&gt;</html>'\n\n\n@pytest.mark.skipif(\"lxml\" not in optionals_loaded, reason=\"lxml not importable\")\ndef testEntityNoResolve(lxml_parser):\n    doc = '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n    tree = etree.fromstring(doc, parser=lxml_parser).getroottree()\n    result = serialize(tree, tree=\"lxml\", omit_optional_tags=False,\n                                  resolve_entities=False)\n    assert result == '<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html>&beta;</html>'\n\n\ndef test_serializer():\n    for filename in get_data_files('serializer-testdata', '*.test', os.path.dirname(__file__)):\n        with open(filename) as fp:\n            tests = json.load(fp)\n            for index, test in enumerate(tests['tests']):\n                yield runSerializerTest, test[\"input\"], test[\"expected\"], test.get(\"options\", {})\n"], "filenames": ["CHANGES.rst", "html5lib/serializer/htmlserializer.py", "html5lib/tests/serializer-testdata/core.test", "html5lib/tests/serializer-testdata/options.test", "html5lib/tests/test_serializer.py"], "buggy_code_start_loc": [34, 13, 245, 44, 148], "buggy_code_end_loc": [34, 246, 246, 70, 148], "fixing_code_start_loc": [35, 13, 245, 44, 149], "fixing_code_end_loc": [42, 260, 246, 139, 180], "type": "CWE-79", "message": "The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of the < (less than) character in attribute values.", "other": {"cve": {"id": "CVE-2016-9909", "sourceIdentifier": "secalert@redhat.com", "published": "2017-02-22T16:59:00.380", "lastModified": "2017-02-23T18:56:21.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The serializer in html5lib before 0.99999999 might allow remote attackers to conduct cross-site scripting (XSS) attacks by leveraging mishandling of the < (less than) character in attribute values."}, {"lang": "es", "value": "El serializador en html5lib en versiones anteriores a 0.99999999 podr\u00eda permitir a atacantes remotos llevar a cabo ataques de XSS aprovechando el manejo incorrecto del car\u00e1cter < (menor que) en valores de atributo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:html5lib:html5lib:*:1.0b8:*:*:*:*:*:*", "versionEndIncluding": "0.99999999", "matchCriteriaId": "18761624-335A-475D-A79F-625735B9FF3D"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/12/06/5", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2016/12/08/8", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95132", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/html5lib/html5lib-python/issues/11", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/html5lib/html5lib-python/issues/12", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://html5lib.readthedocs.io/en/latest/changes.html#b9", "source": "secalert@redhat.com", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/html5lib/html5lib-python/commit/9b8d8eb5afbc066b7fac9390f5ec75e5e8a7cab7"}}