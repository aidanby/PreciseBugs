{"buggy_code": ["# Changelog\n\n## [Unreleased][unreleased]\n\n## [0.0.1][] - 2022-05-13\n\n- First simple implementation\n- Implement Math namespace\n\n## [0.0.0][] - 2022-05-12\n\n- Library stucture\n\n[unreleased]: https://github.com/metarhia/metacalc/compare/v0.0.1...HEAD\n[0.0.1]: https://github.com/metarhia/metacalc/compare/v0.0.0...v0.0.1\n[0.0.0]: https://github.com/metarhia/metacalc/releases/tag/v0.0.0\n", "'use strict';\n\nconst metavm = require('metavm');\n\nconst getValue = (target, prop) => {\n  if (prop === 'Math') return Math;\n  const { expressions, data } = target;\n  if (!expressions.has(prop)) return data.get(prop);\n  const expression = expressions.get(prop);\n  return expression();\n};\n\nconst getCell = (target, prop) => {\n  const { expressions, data } = target;\n  const collection = expressions.has(prop) ? expressions : data;\n  return collection.get(prop);\n};\n\nconst setCell = (target, prop, value) => {\n  if (typeof value === 'string' && value[0] === '=') {\n    const src = '() => ' + value.substring(1);\n    const options = { context: target.context };\n    const script = metavm.createScript(prop, src, options);\n    target.expressions.set(prop, script.exports);\n  } else {\n    target.data.set(prop, value);\n  }\n  return true;\n};\n\nclass Sheet {\n  constructor() {\n    this.data = new Map();\n    this.expressions = new Map();\n    this.values = new Proxy(this, { get: getValue });\n    this.context = metavm.createContext(this.values);\n    this.cells = new Proxy(this, { get: getCell, set: setCell });\n  }\n}\n\nmodule.exports = { Sheet };\n", "'use strict';\n\nconst metatests = require('metatests');\nconst { Sheet } = require('..');\n\nmetatests.test('Simple expressions', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = 2;\n  sheet.cells['C1'] = '=A1*B1';\n  sheet.cells['D1'] = '=(A1 / B1) - 5';\n  sheet.cells['E1'] = '=-A1';\n  test.strictSame(sheet.values['C1'], 200);\n  test.strictSame(sheet.values['D1'], 45);\n  test.strictSame(sheet.values['E1'], -100);\n  test.end();\n});\n\nmetatests.test('Expression chain', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = 2;\n  sheet.cells['C1'] = '=A1*B1';\n  sheet.cells['D1'] = '=C1+8';\n  sheet.cells['E1'] = '=D1/2';\n  test.strictSame(sheet.values['D1'], 208);\n  test.strictSame(sheet.values['E1'], 104);\n  test.end();\n});\n\nmetatests.test('JavaScript Math', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = -2;\n  sheet.cells['C1'] = '=Math.abs(B1)';\n  sheet.cells['D1'] = '=Math.exp(A1)';\n  sheet.cells['E1'] = '=Math.max(A1, B1)';\n  sheet.cells['F1'] = '=Math.pow(A1, 2)';\n  sheet.cells['G1'] = '=Math.sin(A1)';\n  sheet.cells['H1'] = '=Math.sqrt(A1)';\n  sheet.cells['I1'] = '=Math.sin(Math.sqrt(Math.pow(A1, B1)))';\n  test.strictSame(sheet.values['C1'], 2);\n  test.strictSame(sheet.values['D1'], Math.exp(100));\n  test.strictSame(sheet.values['E1'], 100);\n  test.strictSame(sheet.values['F1'], 10000);\n  test.strictSame(sheet.values['G1'], Math.sin(100));\n  test.strictSame(sheet.values['H1'], Math.sqrt(100));\n  test.strictSame(sheet.values['I1'], Math.sin(Math.sqrt(Math.pow(100, -2))));\n  test.end();\n});\n"], "fixing_code": ["# Changelog\n\n## [Unreleased][unreleased]\n\n- Prevent arbitrary js code execution\n\n## [0.0.1][] - 2022-05-13\n\n- First simple implementation\n- Implement Math namespace\n\n## [0.0.0][] - 2022-05-12\n\n- Library stucture\n\n[unreleased]: https://github.com/metarhia/metacalc/compare/v0.0.1...HEAD\n[0.0.1]: https://github.com/metarhia/metacalc/compare/v0.0.0...v0.0.1\n[0.0.0]: https://github.com/metarhia/metacalc/releases/tag/v0.0.0\n", "'use strict';\n\nconst metavm = require('metavm');\n\nconst wrap = (target) =>\n  new Proxy(target, {\n    get: (target, prop) => {\n      if (prop === 'constructor') return null;\n      const value = target[prop];\n      if (typeof value === 'number') return value;\n      return wrap(value);\n    },\n  });\n\nconst math = wrap(Math);\n\nconst getValue = (target, prop) => {\n  if (prop === 'Math') return math;\n  const { expressions, data } = target;\n  if (!expressions.has(prop)) return data.get(prop);\n  const expression = expressions.get(prop);\n  return expression();\n};\n\nconst getCell = (target, prop) => {\n  const { expressions, data } = target;\n  const collection = expressions.has(prop) ? expressions : data;\n  return collection.get(prop);\n};\n\nconst setCell = (target, prop, value) => {\n  if (typeof value === 'string' && value[0] === '=') {\n    const src = '() => ' + value.substring(1);\n    const options = { context: target.context };\n    const script = metavm.createScript(prop, src, options);\n    target.expressions.set(prop, script.exports);\n  } else {\n    target.data.set(prop, value);\n  }\n  return true;\n};\n\nclass Sheet {\n  constructor() {\n    this.data = new Map();\n    this.expressions = new Map();\n    this.values = new Proxy(this, { get: getValue });\n    this.context = metavm.createContext(this.values);\n    this.cells = new Proxy(this, { get: getCell, set: setCell });\n  }\n}\n\nmodule.exports = { Sheet };\n", "'use strict';\n\nconst metatests = require('metatests');\nconst { Sheet } = require('..');\n\nmetatests.test('Simple expressions', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = 2;\n  sheet.cells['C1'] = '=A1*B1';\n  sheet.cells['D1'] = '=(A1 / B1) - 5';\n  sheet.cells['E1'] = '=-A1';\n  test.strictSame(sheet.values['C1'], 200);\n  test.strictSame(sheet.values['D1'], 45);\n  test.strictSame(sheet.values['E1'], -100);\n  test.end();\n});\n\nmetatests.test('Expression chain', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = 2;\n  sheet.cells['C1'] = '=A1*B1';\n  sheet.cells['D1'] = '=C1+8';\n  sheet.cells['E1'] = '=D1/2';\n  test.strictSame(sheet.values['D1'], 208);\n  test.strictSame(sheet.values['E1'], 104);\n  test.end();\n});\n\nmetatests.test('JavaScript Math', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] = 100;\n  sheet.cells['B1'] = -2;\n  sheet.cells['C1'] = '=Math.abs(B1)';\n  sheet.cells['D1'] = '=Math.exp(A1)';\n  sheet.cells['E1'] = '=Math.max(A1, B1)';\n  sheet.cells['F1'] = '=Math.pow(A1, 2)';\n  sheet.cells['G1'] = '=Math.sin(A1)';\n  sheet.cells['H1'] = '=Math.sqrt(A1)';\n  sheet.cells['I1'] = '=Math.sin(Math.sqrt(Math.pow(A1, B1)))';\n  test.strictSame(sheet.values['C1'], 2);\n  test.strictSame(sheet.values['D1'], Math.exp(100));\n  test.strictSame(sheet.values['E1'], 100);\n  test.strictSame(sheet.values['F1'], 10000);\n  test.strictSame(sheet.values['G1'], Math.sin(100));\n  test.strictSame(sheet.values['H1'], Math.sqrt(100));\n  test.strictSame(sheet.values['I1'], Math.sin(Math.sqrt(Math.pow(100, -2))));\n  test.end();\n});\n\nmetatests.test('Prevent arbitrary js code execution', async (test) => {\n  const sheet = new Sheet();\n  sheet.cells['A1'] =\n    '=Math.constructor.constructor(\"console.log(\\\\\"Hello, World!\\\\\")\")();';\n  try {\n    const res = sheet.values['A1'];\n    test.strictSame(res, undefined);\n  } catch (error) {\n    test.strictSame(\n      error.message,\n      `Cannot read property '${'constructor'}' of null`\n    );\n  }\n  test.end();\n});\n"], "filenames": ["CHANGELOG.md", "lib/sheet.js", "test/unit.js"], "buggy_code_start_loc": [3, 4, 50], "buggy_code_end_loc": [3, 7, 50], "fixing_code_start_loc": [4, 5, 51], "fixing_code_end_loc": [6, 19, 67], "type": "CWE-94", "message": "The package metacalc before 0.0.2 are vulnerable to Arbitrary Code Execution when it exposes JavaScript's Math class to the v8 context. As the Math class is exposed to user-land, it can be used to get access to JavaScript's Function constructor.", "other": {"cve": {"id": "CVE-2022-21122", "sourceIdentifier": "report@snyk.io", "published": "2022-06-08T09:15:08.470", "lastModified": "2022-06-17T00:59:22.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package metacalc before 0.0.2 are vulnerable to Arbitrary Code Execution when it exposes JavaScript's Math class to the v8 context. As the Math class is exposed to user-land, it can be used to get access to JavaScript's Function constructor."}, {"lang": "es", "value": "El paquete metacalc versiones anteriores a 0.0.2, es vulnerable a una ejecuci\u00f3n arbitraria de c\u00f3digo cuando expone la clase Math de JavaScript al contexto v8. Como la clase Math est\u00e1 expuesta al contexto del usuario, puede ser usada para conseguir acceso al constructor de funciones de JavaScript"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.2, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:metarhia:metacalc:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.0.2", "matchCriteriaId": "515FDC04-65C9-4337-ADFB-BFBC356A2DE1"}]}]}], "references": [{"url": "https://github.com/metarhia/metacalc/commit/625c23d63eabfa16fc815f5832b147b08d2144bd", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/metarhia/metacalc/pull/16", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-METACALC-2826197", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/metarhia/metacalc/commit/625c23d63eabfa16fc815f5832b147b08d2144bd"}}