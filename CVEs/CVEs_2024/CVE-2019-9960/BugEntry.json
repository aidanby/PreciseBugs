{"buggy_code": ["<?php if (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n* LimeSurvey\n* Copyright (C) 2007-2017 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n*/\n\n/**\n* Export Action\n*\n* This controller performs export actions\n*\n* @package        LimeSurvey\n* @subpackage    Backend\n*/\nclass export extends Survey_Common_Action\n{\n\n    public function __construct($controller, $id)\n    {\n        parent::__construct($controller, $id);\n\n        Yii::app()->loadHelper('export');\n        Yii::import('application.controllers.admin.printablesurvey', 1);\n    }\n\n    public function survey()\n    {\n        $action = Yii::app()->request->getParam('action');\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n\n        if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'export')) {\n            $this->_surveyexport($action, $iSurveyID);\n            return;\n        }\n    }\n\n    /**\n     * This function exports a ZIP archives of several ZIP archives - it is used in the listSurvey controller\n     * The SIDs are read from session flashdata.\n     *\n     */\n    public function surveyarchives()\n    {\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            safeDie('Access denied.');\n        }\n\n        $aSurveyIDs = $this->session->flashdata('sids');\n        $aExportedFiles = array();\n\n        foreach ($aSurveyIDs as $iSurveyID) {\n            $iSurveyID = (int) $iSurveyID;\n\n            if ($iSurveyID > 0) {\n                $aExportedFiles[$iSurveyID] = $this->_exportarchive($iSurveyID, false);\n            }\n        }\n\n        if (count($aExportedFiles) > 0) {\n            $aZIPFileName = $this->config->item(\"tempdir\").DIRECTORY_SEPARATOR.randomChars(30);\n\n            $this->load->library(\"admin/pclzip\", array('p_zipname' => $aZIPFileName));\n\n            $zip = new PclZip($aZIPFileName);\n            foreach ($aExportedFiles as $iSurveyID=>$sFileName) {\n                $zip->add(\n                array(\n                array(\n                PCLZIP_ATT_FILE_NAME => $sFileName,\n                PCLZIP_ATT_FILE_NEW_FULL_NAME => 'survey_archive_'.$iSurveyID.'.zip')\n                )\n                );\n\n                unlink($sFileName);\n            }\n        }\n\n        if (is_file($aZIPFileName)) {\n            //Send the file for download!\n            header(\"Pragma: public\");\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=survey_archives_pack.zip\");\n            header(\"Content-Description: File Transfer\");\n            @readfile($aZIPFileName);\n\n            //Delete the temporary file\n            unlink($aZIPFileName);\n            return;\n        }\n    }\n\n    public function group()\n    {\n        $gid = sanitize_int(Yii::app()->request->getParam('gid'));\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n\n        group_export(\"exportstructurecsvGroup\", $iSurveyID, $gid);\n\n        return;\n    }\n\n    public function question()\n    {\n        $gid = sanitize_int(Yii::app()->request->getParam('gid'));\n        $qid = sanitize_int(Yii::app()->request->getParam('qid'));\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        questionExport(\"exportstructurecsvQuestion\", $iSurveyID, $gid, $qid);\n    }\n\n    public function exportresults()\n    {\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n\n        if (!isset($imageurl)) { $imageurl = \"./images\"; }\n        if (!isset($iSurveyID)) { $iSurveyID = returnGlobal('sid'); }\n\n        if (!isset($convertyto1)) { $convertyto1 = returnGlobal('convertyto1'); }\n        if (!isset($convertnto2)) { $convertnto2 = returnGlobal('convertnto2'); }\n        if (!isset($convertyto)) { $convertyto = returnGlobal('convertyto'); }\n        if (!isset($convertnto)) { $convertnto = returnGlobal('convertnto'); }\n\n\n\n        if (!Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export')) {\n            $this->getController()->error('Access denied!');\n        }\n\n        Yii::app()->loadHelper(\"admin/exportresults\");\n\n        App()->getClientScript()->registerScriptFile(App()->getConfig('generalscripts').'/expressions/em_javascript.js');\n        App()->getClientScript()->registerScriptFile(App()->getConfig('adminscripts').'/exportresults.js');\n\n        $sExportType = Yii::app()->request->getPost('type');\n        $sHeadingFormat = Yii::app()->request->getPost('headstyle');\n        $sAnswerFormat = Yii::app()->request->getPost('answers');\n        $bHeaderSpacesToUnderscores = Yii::app()->request->getPost('headspacetounderscores');\n        $bConvertY = Yii::app()->request->getPost('converty');\n        $bConvertN = Yii::app()->request->getPost('convertn');\n        $sYValue = Yii::app()->request->getPost('convertyto');\n        $sNValue = Yii::app()->request->getPost('convertnto');\n\n        $surveybaselang = $survey->language;\n        $exportoutput = \"\";\n\n        // Get info about the survey\n        $thissurvey = getSurveyInfo($iSurveyID);\n\n        // Load ExportSurveyResultsService so we know what exports are available\n        $resultsService = new ExportSurveyResultsService();\n        $exports = $resultsService->getExports();\n\n        if (!$sExportType) {\n            $aFieldMap = createFieldMap($survey, 'full', false, false, $survey->language);\n\n            if ($thissurvey['savetimings'] === \"Y\") {\n                //Append survey timings to the fieldmap array\n                $aFieldMap = $aFieldMap + createTimingsFieldMap($iSurveyID, 'full', false, false, $survey->language);\n            }\n            $iFieldCount = count($aFieldMap);\n\n            $selecthide = \"\";\n            $selectshow = \"\";\n            $selectinc = \"\";\n            if (incompleteAnsFilterState() == \"complete\") {\n                $selecthide = \"selected='selected'\";\n            } elseif (incompleteAnsFilterState() == \"incomplete\") {\n                $selectinc = \"selected='selected'\";\n            } else {\n                $selectshow = \"selected='selected'\";\n            }\n\n            $aFields = array();\n            $aFieldsOptions = array();\n            foreach ($aFieldMap as $sFieldName=>$fieldinfo) {\n                $sCode = viewHelper::getFieldCode($fieldinfo);\n                $aFields[$sFieldName] = $sCode.' - '.htmlspecialchars(ellipsize(html_entity_decode(viewHelper::getFieldText($fieldinfo)), 40, .6, '...'));\n                $aFieldsOptions[$sFieldName] = array('title'=>viewHelper::getFieldText($fieldinfo), 'data-fieldname'=>$fieldinfo['fieldname'], 'data-emcode'=>viewHelper::getFieldCode($fieldinfo, array('LEMcompat'=>true))); // No need to filter title : Yii do it (remove all tag)\n            }\n\n            $data['SingleResponse'] = (int) returnGlobal('id');\n            $data['selecthide'] = $selecthide;\n            $data['selectshow'] = $selectshow;\n            $data['selectinc'] = $selectinc;\n            $data['afieldcount'] = $iFieldCount;\n            $data['aFields'] = $aFields;\n            $data['aFieldsOptions'] = $aFieldsOptions;\n            //get max number of datasets\n            $iMaximum = SurveyDynamic::model($iSurveyID)->getMaxId();\n            //get min number of datasets\n            $iMinimum = SurveyDynamic::model($iSurveyID)->getMinId();\n\n            $data['max_datasets'] = $iMaximum;\n            $data['min_datasets'] = $iMinimum;\n            $data['surveyid'] = $iSurveyID;\n            $data['imageurl'] = Yii::app()->getConfig('imageurl');\n            $data['thissurvey'] = $thissurvey;\n            $data['display']['menu_bars']['browse'] = gT(\"Export results\");\n\n            // Export plugins, leave out all entries that are not plugin\n            $exports = array_filter($exports);\n            $exportData = array();\n            foreach ($exports as $key => $plugin) {\n                $event = new PluginEvent('listExportOptions');\n                $event->set('type', $key);\n                $oPluginManager = App()->getPluginManager();\n                $oPluginManager->dispatchEvent($event, $plugin);\n                $exportData[$key] = array(\n                    'onclick' => $event->get('onclick'),\n                    'label'   => $event->get('label'),\n                    'tooltip' => $event->get('tooltip', null)\n                );\n                if($event->get('default', false)) {\n                    $default = $event->get('label');\n                }\n            }\n            $data['exports'] = $exportData; // Pass available exports\n            $data['defaultexport'] = $default;\n            $data['headexports'] = array(\n                'code'=>array('label'=>gT(\"Question code\"), 'help'=>null, 'checked'=>false),\n                'abbreviated'=>array('label'=>gT(\"Abbreviated question text\"), 'help'=>null, 'checked'=>false),\n                'full'=>array('label'=>gT(\"Full question text\"), 'help'=>null, 'checked'=>true),\n                'codetext'=>array('label'=>gT(\"Question code & question text\"), 'help'=>null, 'checked'=>false),\n            );\n            // Add a plugin for adding headexports : a public function getRegistereddPlugins($event) can help here.\n            $aLanguagesCode = Survey::model()->findByPk($iSurveyID)->getAllLanguages();\n            $aLanguages = array();\n            foreach ($aLanguagesCode as $sLanguage) {\n                $aLanguages[$sLanguage] = getLanguageNameFromCode($sLanguage, false);\n            }\n            $data['aLanguages'] = $aLanguages; // Pass available exports\n\n            $data['aCsvFieldSeparator'] = array(\n                chr(44) => gT(\"Comma\"),\n                chr(59) => gT(\"Semicolon\"),\n                chr(9) => gT(\"Tab\"),\n            );\n\n            $data['sidemenu']['state'] = false;\n            $data['menu']['edition'] = true;\n            $data['menu']['export'] = true;\n            $data['menu']['close'] = true;\n\n            $data['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $data['title_bar']['title'] = gT('Browse responses').': '.$survey->currentLanguageSettings->surveyls_title;\n            $data['subaction'] = gT('Export results');\n\n            $this->_renderWrappedTemplate('export', 'exportresults_view', $data);\n\n            return;\n        }\n\n        // Export Language is set by default to surveybaselang\n        // * the explang language code is used in SQL queries\n        // * the alang object is used to translate headers and hardcoded answers\n        // In the future it might be possible to 'post' the 'export language' from\n        // the exportresults form\n        $explang = Yii::app()->request->getPost('exportlang', $surveybaselang);\n\n        //Get together our FormattingOptions and then call into the exportSurvey\n        //function.\n        $options = new FormattingOptions();\n        $options->selectedColumns = Yii::app()->request->getPost('colselect');\n        $options->responseMinRecord = sanitize_int(Yii::app()->request->getPost('export_from'));\n        $options->responseMaxRecord = sanitize_int(Yii::app()->request->getPost('export_to'));\n        $options->aResponses = nice_addslashes(Yii::app()->request->getPost('responses_id'));\n        $options->answerFormat = $sAnswerFormat;\n        $options->convertY = $bConvertY;\n        $options->yValue = ($bConvertY) ? $sYValue : null;\n        $options->convertN = $bConvertN;\n        $options->nValue = ($bConvertN) ? $sNValue : null;\n        $options->headingTextLength = (Yii::app()->request->getPost('abbreviatedtext')) ? (int) Yii::app()->request->getPost('abbreviatedtextto') : null;\n        $options->useEMCode = Yii::app()->request->getPost('emcode');\n        $options->headCodeTextSeparator = Yii::app()->request->getPost('codetextseparator');\n        $options->csvFieldSeparator = Yii::app()->request->getPost('csvfieldseparator');\n        $options->stripHtmlCode = Yii::app()->request->getPost('striphtmlcode');\n\n        $options->headerSpacesToUnderscores = $bHeaderSpacesToUnderscores;\n        $options->headingFormat = $sHeadingFormat;\n        $options->responseCompletionState = incompleteAnsFilterState();\n        $options->output = 'display';\n\n        // Replace token information by the column name\n        if (in_array('first_name', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"firstname\";\n        }\n\n        if (in_array('last_name', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"lastname\";\n        }\n\n        if (in_array('email_address', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"email\";\n        }\n        $attributeFields = array_keys(getTokenFieldsAndNames($iSurveyID, true));\n        foreach ($attributeFields as $attr_name) {\n            if (in_array($attr_name, Yii::app()->request->getPost('attribute_select', array()))) {\n                $options->selectedColumns[] = $attr_name;\n            }\n        }\n\n        if (Yii::app()->request->getPost('response_id')) {\n                    $sFilter = \"{{survey_{$iSurveyID}}}.id=\".(int) Yii::app()->request->getPost('response_id');\n        } elseif (App()->request->getQuery('statfilter') && is_array(Yii::app()->session['statistics_selects_'.$iSurveyID])) {\n            $sFilter = Yii::app()->session['statistics_selects_'.$iSurveyID];\n        } else {\n            $sFilter = '';\n        }\n\n        viewHelper::disableHtmlLogging();\n        $resultsService->exportSurvey($iSurveyID, $explang, $sExportType, $options, $sFilter);\n\n        Yii::app()->end();\n    }\n\n    /*\n    * The SPSS DATA LIST / BEGIN DATA parser is rather simple minded, the number after the type\n    * specifier identifies the field width (maximum number of characters to scan)\n    * It will stop short of that number of characters, honouring quote delimited\n    * space separated strings, however if the width is too small the remaining data in the current\n    * line becomes part of the next column.  Since we want to restrict this script to ONE scan of\n    * the data (scan & output at same time), the information needed to construct the\n    * DATA LIST is held in the $fields array, while the actual data is written to a\n    * to a temporary location, updating length (size) values in the $fields array as\n    * the tmp file is generated (uses @fwrite's return value rather than strlen).\n    * Final output renders $fields to a DATA LIST, and then stitches in the tmp file data.\n    *\n    * Optimization opportunities remain in the VALUE LABELS section, which runs a query / column\n    */\n    public function exportspss()\n    {\n        global $length_vallabel;\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('sid'));\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        //for scale 1=nominal, 2=ordinal, 3=scale\n\n        //        $typeMap = $this->_getTypeMap();\n\n        $filterstate = incompleteAnsFilterState();\n        if (!Yii::app()->session['spssversion']) {\n// Default to 2 (16 and up)\n            Yii::app()->session['spssversion'] = 2;\n        }\n        $spssver = Yii::app()->request->getParam('spssver', Yii::app()->session['spssversion']);\n        Yii::app()->session['spssversion'] = $spssver;\n\n        $length_varlabel = '231'; // Set the max text length of Variable Labels\n        $length_vallabel = '120'; // Set the max text length of Value Labels\n\n        switch ($spssver) {\n            case 1:    //<16\n                $iLength = '255'; // Set the max text length of the Value\n                break;\n            case 2:    //>=16\n            default:\n                $iLength = '16384'; // Set the max text length of the Value\n        }\n\n        $headerComment = '*$Rev: 121017 $'.\" $filterstate $spssver.\\n\";\n\n        if (Yii::app()->request->getPost('dldata')) {\n            $subaction = \"dldata\";\n        }\n        if (Yii::app()->request->getPost('dlstructure')) {\n            $subaction = \"dlstructure\";\n        }\n\n        if (!isset($subaction)) {\n            $selecthide = \"\";\n            $selectshow = \"\";\n            $selectinc = \"\";\n\n            switch ($filterstate) {\n                case \"incomplete\":\n                    $selectinc = \"selected='selected'\";\n                    break;\n                case \"complete\":\n                    $selecthide = \"selected='selected'\";\n                    break;\n                default:\n                    $selectshow = \"selected='selected'\";\n            }\n\n            $data['selectinc'] = $selectinc;\n            $data['selecthide'] = $selecthide;\n            $data['selectshow'] = $selectshow;\n            $data['spssver'] = $spssver;\n            $data['surveyid'] = $iSurveyID;\n            $data['display']['menu_bars']['browse'] = gT('Export results');\n\n            $data['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $data['title_bar']['title'] = gT('Browse responses').': '.$oSurvey->currentLanguageSettings->surveyls_title;\n            $data['sBaseLanguage'] = $oSurvey->language;\n\n            $aLanguages = array();\n            $aLanguagesCodes = $oSurvey->getAllLanguages();\n            foreach ($aLanguagesCodes as $sLanguage) {\n                $aLanguages[$sLanguage] = getLanguageNameFromCode($sLanguage, false);\n            }\n            $data['aLanguages'] = $aLanguages; // Pass available exports\n\n            $data['sidemenu']['state'] = false;\n\n            $data['menu']['edition'] = true;\n            $data['menu']['close'] = true;\n\n            $this->_renderWrappedTemplate('export', 'spss_view', $data);\n            return;\n        }\n\n        // Get Base language:\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        $sLanguage = Yii::app()->request->getParam('exportlang');\n        $aLanguagesCodes = $oSurvey->getAllLanguages();\n        if (!in_array($sLanguage, $aLanguagesCodes)) {\n            $sLanguage = $oSurvey->language;\n        }\n        App()->setLanguage($sLanguage);\n\n        Yii::app()->loadHelper(\"admin/exportresults\");\n        viewHelper::disableHtmlLogging();\n\n        if ($subaction == 'dldata') {\n            header(\"Content-Disposition: attachment; filename=survey_\".$iSurveyID.\"_SPSS_data_file.dat\");\n            header(\"Content-type: text/comma-separated-values; charset=UTF-8\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: public\");\n\n            if ($spssver == 2) {\n                echo \"\\xEF\\xBB\\xBF\";\n            }\n\n            $sNoAnswerValue = (isset($_POST['noanswervalue']) && $_POST['noanswervalue'] != '') ? '\\''.$_POST['noanswervalue'].'\\'' : '';\n            SPSSExportData($iSurveyID, $iLength, $sNoAnswerValue, '\\'', false, $sLanguage);\n\n            App()->end();\n        }\n\n        if ($subaction == 'dlstructure') {\n            header(\"Content-Disposition: attachment; filename=survey_\".$iSurveyID.\"_SPSS_syntax_file.sps\");\n            header(\"Content-type: application/download; charset=UTF-8\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: public\");\n            $fields = SPSSFieldMap($iSurveyID, 'V', $sLanguage);\n\n            if ($spssver == 2) {\n                echo \"\\xEF\\xBB\\xBF\";\n            }\n            echo $headerComment;\n\n            if ($spssver == 2) {\n                echo \"SET UNICODE=ON.\\n\";\n            }\n\n            echo \"SHOW LOCALE.\\n\";\n            echo \"PRESERVE LOCALE.\\n\";\n            echo \"SET LOCALE='en_UK'.\\n\";\n\n            echo \"GET DATA\\n\"\n            .\" /TYPE=TXT\\n\"\n            .\" /FILE='survey_\".$iSurveyID.\"_SPSS_data_file.dat'\\n\"\n            .\" /DELCASE=LINE\\n\"\n            .\" /DELIMITERS=\\\",\\\"\\n\"\n            .\" /QUALIFIER=\\\"'\\\"\\n\"\n            .\" /ARRANGEMENT=DELIMITED\\n\"\n            .\" /FIRSTCASE=1\\n\"\n            .\" /IMPORTCASE=ALL\\n\"\n            .\" /VARIABLES=\";\n\n            foreach ($fields as $field) {\n                if ($field['SPSStype'] == 'DATETIME23.2') {\n                    $field['size'] = '';\n                }\n                if (!$field['hide']) {\n                    echo \"\\n {$field['id']} {$field['SPSStype']}{$field['size']}\";\n                }\n            }\n\n            echo \".\\nCACHE.\\n\"\n            .\"EXECUTE.\\n\";\n\n            //Create the variable labels:\n            echo \"*Define Variable Properties.\\n\";\n            foreach ($fields as $field) {\n                if (!$field['hide']) {\n                    $label_parts = strSplitUnicode(str_replace('\"', '\"\"', stripTagsFull($field['VariableLabel'])), $length_varlabel - strlen($field['id']));\n                    //if replaced quotes are splitted by, we need to mve the first quote to the next row\n                    foreach ($label_parts as $idx => $label_part) {\n                        if ($idx != count($label_parts) && substr($label_part, -1) == '\"' && substr($label_part, -2) != '\"') {\n                            $label_parts[$idx] = rtrim($label_part, '\"');\n                            if (array_key_exists($idx + 1, $label_parts)){\n                                $label_parts[$idx + 1] = '\"'.$label_parts[$idx + 1];\n                            }\n                        }\n                    }\n                    echo \"VARIABLE LABELS \".$field['id'].\" \\\"\".implode(\"\\\"+\\n\\\"\", $label_parts).\"\\\".\\n\";\n                }\n            }\n\n            // Create our Value Labels!\n            echo \"*Define Value labels.\\n\";\n            foreach ($fields as $field) {\n                if (isset($field['answers'])) {\n                    $answers = $field['answers'];\n\n                    //print out the value labels!\n                    echo \"VALUE LABELS  {$field['id']}\\n\";\n\n                    $i = 0;\n                    foreach ($answers as $answer) {\n                        $i++;\n\n                        if ($field['SPSStype'] == \"F\" && isNumericExtended($answer['code'])) {\n                            $str = \"{$answer['code']}\";\n                        } else {\n                            $str = \"\\\"{$answer['code']}\\\"\";\n                        }\n\n                        if ($i < count($answers)) {\n                            echo \" $str \\\"{$answer['value']}\\\"\\n\";\n                        } else {\n                            echo \" $str \\\"{$answer['value']}\\\".\\n\";\n                        }\n                    }\n                }\n            }\n\n            foreach ($fields as $field) {\n                if ($field['scale'] !== '') {\n                    switch ($field['scale']) {\n                        case 2:\n                            echo \"VARIABLE LEVEL {$field['id']}(ORDINAL).\\n\";\n                            break;\n                        case 3:\n                            echo \"VARIABLE LEVEL {$field['id']}(SCALE).\\n\";\n                    }\n                }\n            }\n\n            //Rename the Variables (in case somethings goes wrong, we still have the OLD values\n            foreach ($fields as $field) {\n                if (isset($field['sql_name']) && $field['hide'] === 0) {\n                    $ftitle = $field['title'];\n\n                    if (!preg_match(\"/^([a-z]|[A-Z])+.*$/\", $ftitle)) {\n                        $ftitle = \"q_\".$ftitle;\n                    }\n\n                    $ftitle = str_replace(array(\" \", \"-\", \":\", \";\", \"!\", \"/\", \"\\\\\", \"'\"), array(\"_\", \"_hyph_\", \"_dd_\", \"_dc_\", \"_excl_\", \"_fs_\", \"_bs_\", '_qu_'), $ftitle);\n\n                    if ($ftitle != $field['title']) {\n                        echo \"* Variable name was incorrect and was changed from {$field['title']} to $ftitle .\\n\";\n                    }\n\n                    echo \"RENAME VARIABLE ( \".$field['id'].' = '.$ftitle.\" ).\\n\";\n                }\n            }\n            echo \"RESTORE LOCALE.\\n\";\n            App()->end();\n        }\n    }\n\n    public function vvexport()\n    {\n        $iSurveyId = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        $survey = Survey::model()->findByPk($iSurveyId);\n        $subaction = Yii::app()->request->getParam('subaction');\n\n        /** @var Survey $oSurvey */\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n\n        //Exports all responses to a survey in special \"Verified Voting\" format.\n        if (!Permission::model()->hasSurveyPermission($iSurveyId, 'responses', 'export')) {\n            Yii::app()->session['flashmessage'] = gT(\"You do not have permission to access this page.\");\n            $this->getController()->redirect($this->getController()->createUrl(\"/admin/survey/sa/view/surveyid/{$iSurveyId}\"));\n        }\n\n        if ($subaction != \"export\") {\n            $aData['selectincansstate'] = incompleteAnsFilterState();\n            $aData['surveyid'] = $iSurveyId;\n            $aData['display']['menu_bars']['browse'] = gT(\"Export VV file\");\n            $fieldmap = createFieldMap($survey, 'full', false, false, $survey->language);\n\n            $surveytable = \"{{survey_$iSurveyId}}\";\n            // Control if fieldcode are unique\n            $fieldnames = Yii::app()->db->schema->getTable($surveytable)->getColumnNames();\n            foreach ($fieldnames as $field) {\n                $fielddata = arraySearchByKey($field, $fieldmap, \"fieldname\", 1);\n                $fieldcode[] = viewHelper::getFieldCode($fielddata, array(\"LEMcompat\"=>true));\n            }\n            $aData['uniquefieldcode'] = (count(array_unique($fieldcode)) == count($fieldcode)); // Did we need more control ?\n            $aData['vvversionseleted'] = ($aData['uniquefieldcode']) ? 2 : 1;\n\n            $aData['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $aData['title_bar']['title'] = gT('Browse responses').': '.$survey->currentLanguageSettings->surveyls_title;\n            $aData['subaction'] = gt('Export a VV survey file');\n\n            $aData['sidemenu']['state'] = false;\n            $aData['menu']['edition'] = true;\n            $aData['menu']['export'] = true;\n            $aData['menu']['close'] = true;\n\n            $this->_renderWrappedTemplate('export', 'vv_view', $aData);\n        } elseif (isset($iSurveyId) && $iSurveyId) {\n            //Export is happening\n            $extension = sanitize_paranoid_string(returnGlobal('extension'));\n            $vvVersion = (int) Yii::app()->request->getPost('vvversion');\n            $vvVersion = (in_array($vvVersion, array(1, 2))) ? $vvVersion : 2; // Only 2 version actually, default to 2\n            $fn = \"vvexport_$iSurveyId.\".$extension;\n\n            $this->_addHeaders($fn, \"text/comma-separated-values\", 0, \"cache\");\n\n            $s = \"\\t\";\n\n            $fieldmap = createFieldMap($survey, 'full', false, false, $survey->language);\n            $surveytable = \"{{survey_$iSurveyId}}\";\n\n\n            $fieldnames = Yii::app()->db->schema->getTable($surveytable)->getColumnNames();\n\n            //Create the human friendly first line\n            $firstline = \"\";\n            $secondline = \"\";\n            foreach ($fieldnames as $field) {\n                $fielddata = arraySearchByKey($field, $fieldmap, \"fieldname\", 1);\n\n                if (count($fielddata) < 1) {\n                    $firstline .= $field;\n                } else {\n                    $firstline .= preg_replace('/\\s+/', ' ', flattenText($fielddata['question'],false,true,'UTF-8',true));\n                }\n                $firstline .= $s;\n                if ($vvVersion == 2) {\n                    $fieldcode = viewHelper::getFieldCode($fielddata, array(\"LEMcompat\"=>true));\n                    $fieldcode = ($fieldcode) ? $fieldcode : $field; // $fieldcode is empty for token if there are no survey participants table\n                } else {\n                    $fieldcode = $field;\n                }\n                $secondline .= $fieldcode.$s;\n            }\n\n            $vvoutput = $firstline.\"\\n\";\n            $vvoutput .= $secondline.\"\\n\";\n            $query = \"SELECT * FROM \".Yii::app()->db->quoteTableName($surveytable);\n\n            if (incompleteAnsFilterState() == \"incomplete\") {\n                $query .= \" WHERE submitdate IS NULL \";\n            } elseif (incompleteAnsFilterState() == \"complete\") {\n                $query .= \" WHERE submitdate >= '01/01/1980' \";\n            }\n            $result = Yii::app()->db->createCommand($query)->query();\n\n            echo $vvoutput;\n            foreach ($result as $row) {\n                foreach ($fieldnames as $field) {\n                    if (is_null($row[$field])) {\n                        $value = '{question_not_shown}';\n                    } else {\n                        $value = trim($row[$field]);\n                        // sunscreen for the value. necessary for the beach.\n                        // careful about the order of these arrays:\n                        // lbrace has to be substituted *first*\n                        $value = str_replace(\n                        array(\n                        \"{\",\n                        \"\\n\",\n                        \"\\r\",\n                        \"\\t\"),\n                        array(\"{lbrace}\",\n                        \"{newline}\",\n                        \"{cr}\",\n                        \"{tab}\"\n                        ),\n                        $value\n                        );\n                    }\n\n                    // one last tweak: excel likes to quote values when it\n                    // exports as tab-delimited (esp if value contains a comma,\n                    // oddly enough).  So we're going to encode a leading quote,\n                    // if it occurs, so that we can tell the difference between\n                    // strings that \"really are\" quoted, and those that excel quotes\n                    // for us.\n                    $value = preg_replace('/^\"/', '{quote}', $value);\n                    // yay!  that nasty soab won't hurt us now!\n                    if ($field == \"submitdate\" && !$value) { $value = \"NULL\"; }\n\n                    $sun[] = $value;\n                }\n\n                /* it is important here to stream output data, line by line\n                 * in order to avoid huge memory consumption when exporting large\n                 * quantities of answers */\n                echo implode($s, $sun).\"\\n\";\n\n                unset($sun);\n            }\n            Yii::app()->end();\n        }\n    }\n\n\n    public function resources()\n    {\n        switch (Yii::app()->request->getParam('export')) {\n            case 'survey' :\n                $iSurveyID = sanitize_int(Yii::app()->getRequest()->getParam('surveyid'));\n                $resourcesdir = 'surveys/'.$iSurveyID;\n                $zipfilename = \"resources-survey-$iSurveyID.zip\";\n                break;\n            case 'label' :\n                $lid = sanitize_int(Yii::app()->getRequest()->getParam('lid'));\n                $resourcesdir = 'labels/'.$lid;\n                $zipfilename = \"resources-labelset-$lid.zip\";\n                break;\n        }\n\n        if (!empty($zipfilename) && !empty($resourcesdir)) {\n            $resourcesdir = Yii::app()->getConfig('uploaddir').\"/{$resourcesdir}/\";\n            $tmpdir = Yii::app()->getConfig('tempdir').'/';\n            $zipfilepath = $tmpdir.$zipfilename;\n            Yii::app()->loadLibrary('admin.pclzip');\n            $zip = new PclZip($zipfilepath);\n            $zipdirs = array();\n            foreach (array('files', 'flash', 'images') as $zipdir) {\n                if (is_dir($resourcesdir.$zipdir)) {\n                                    $zipdirs[] = $resourcesdir.$zipdir.'/';\n                }\n            }\n            if ($zip->create($zipdirs, PCLZIP_OPT_REMOVE_PATH, $resourcesdir) === 0) {\n                safeDie(\"Error : \".$zip->errorInfo(true));\n            } elseif (file_exists($zipfilepath)) {\n                $this->_addHeaders($zipfilename, 'application/force-download', 0);\n                readfile($zipfilepath);\n                unlink($zipfilepath);\n                Yii::app()->end();\n            }\n        }\n    }\n\n    public function dumplabel()\n    {\n        if (!Permission::model()->hasGlobalPermission('labelsets', 'export')) {\n            safeDie('No permission.');\n        }\n        $lid = sanitize_int(Yii::app()->request->getParam('lid'));\n        // DUMP THE RELATED DATA FOR A SINGLE QUESTION INTO A SQL FILE FOR IMPORTING LATER ON OR\n        // ON ANOTHER SURVEY SETUP DUMP ALL DATA WITH RELATED QID FROM THE FOLLOWING TABLES\n        // 1. questions\n        // 2. answers\n\n        $lids = returnGlobal('lids');\n\n        if (!$lid && !$lids) {\n            safeDie('No LID has been provided. Cannot dump label set.');\n        }\n\n        if ($lid) {\n            $lids = array($lid);\n        }\n\n        $lids = array_map('sanitize_int', $lids);\n\n        $fn = \"limesurvey_labelset_\".implode('_', $lids).\".lsl\";\n        $xml = getXMLWriter();\n\n        $this->_addHeaders($fn, \"application/force-download\", \"Mon, 26 Jul 1997 05:00:00 GMT\", \"cache\");\n\n        $xml->openURI('php://output');\n\n        $xml->setIndent(true);\n        $xml->startDocument('1.0', 'UTF-8');\n        $xml->startElement('document');\n        $xml->writeElement('LimeSurveyDocType', 'Label set');\n        $xml->writeElement('DBVersion', getGlobalSetting(\"DBVersion\"));\n\n        // Label sets table\n        $lsquery = \"SELECT * FROM {{labelsets}} WHERE lid=\".implode(' or lid=', $lids);\n        buildXMLFromQuery($xml, $lsquery, 'labelsets');\n\n        // Labels\n        $lquery = \"SELECT lid, code, title, sortorder, language, assessment_value FROM {{labels}} WHERE lid=\".implode(' or lid=', $lids);\n        buildXMLFromQuery($xml, $lquery, 'labels');\n        $xml->endElement(); // close columns\n        $xml->endDocument();\n        Yii::app()->end();\n    }\n\n    /**\n     * Export multiple surveys structure. Called via ajax from surveys list massive action\n     */\n    public function exportMultipleStructureSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'structure');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n\n    /**\n     * Export multiple surveys structure. Called via ajax from surveys list massive action\n     */\n    public function exportMultiplePrintableSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'printable');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n    /**\n     * Export multiple surveys archives. Called via ajax from surveys list massive action\n     */\n    public function exportMultipleArchiveSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'archive');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n\n\n    /**\n     * @param string $sExportType\n     */\n    public function exportMultipleSurveys($sSurveys, $sExportType)\n    {\n        $aSurveys = json_decode($sSurveys);\n        $aResults = array();\n        Yii::import('application.libraries.admin.pclzip', true);\n        $bArchiveIsEmpty = true;\n        $sTempDir        = Yii::app()->getConfig(\"tempdir\");\n        $sZip            = randomChars(30);\n        $aZIPFilePath    = $sTempDir.DIRECTORY_SEPARATOR.$sZip;\n        $zip             = new PclZip($aZIPFilePath);\n\n        foreach ($aSurveys as $iSurveyID) {\n            $iSurveyID = filter_var($iSurveyID, FILTER_VALIDATE_INT);\n            if ($iSurveyID === false) {\n                continue;\n            }\n            if (Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export')) {\n                $archiveName                    = \"\";\n                $oSurvey                        = Survey::model()->findByPk($iSurveyID);\n                $aResults[$iSurveyID]['title']  = ellipsize($oSurvey->correct_relation_defaultlanguage->surveyls_title, 30);\n                $aResults[$iSurveyID]['result'] = false;\n\n                // Specific to each kind of export\n                switch ($sExportType) {\n                    // Export archives for active surveys\n                    case 'archive':\n                        if ($oSurvey->isActive) {\n                            $archiveName = $this->_exportarchive($iSurveyID, false);\n\n                            if (is_file($archiveName)) {\n                                $aResults[$iSurveyID]['result'] = true;\n                                $aResults[$iSurveyID]['file']   = $archiveName;\n                                $bArchiveIsEmpty                = false;\n                                $archiveFile                    = $archiveName;\n                                $newArchiveFileFullName         = 'survey_archive_'.$iSurveyID.'.lsa';\n                                $this->_addToZip($zip, $archiveFile, $newArchiveFileFullName);\n                                unlink($archiveFile);\n                            } else {\n                                $aResults[$iSurveyID]['error'] = gT(\"Unknown error\");\n                            }\n                        } else {\n                            $aResults[$iSurveyID]['error'] = gT(\"Not active.\");\n                        }\n                    break;\n                    // Export printable archives for all selected surveys\n                    case 'printable':\n                        $archiveName = $this->_exportPrintableHtmls($iSurveyID, false);\n                        if (is_file($archiveName)) {\n                            $aResults[$iSurveyID]['result'] = true;\n                            $aResults[$iSurveyID]['file']   = $archiveName;\n                            $bArchiveIsEmpty                = false;\n                            $archiveFile                    = $archiveName;\n                            $newArchiveFileFullName         = 'survey_printables_'.$iSurveyID.'.zip';\n                            $this->_addToZip($zip, $archiveFile, $newArchiveFileFullName);\n                            unlink($archiveFile);\n                        } else {\n                            $aResults[$iSurveyID]['error'] = gT(\"Unknown error\");\n                        }\n                        break;\n\n                    // Export structure for survey\n                    default:\n                        $aResults[$iSurveyID]['result'] = true;\n                        $bArchiveIsEmpty                = false;\n\n                        $lssFileName = \"limesurvey_survey_{$iSurveyID}.lss\";\n                        $archiveFile = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n                        file_put_contents($archiveFile, surveyGetXMLData($iSurveyID));\n                        $this->_addToZip($zip, $archiveFile, $lssFileName);\n                        unlink($archiveFile);\n                    break;\n                }\n            } else {\n                $aResults[$iSurveyID]['error'] = gT(\"We are sorry but you don't have permissions to do this.\");\n            }\n        }\n        return array('aResults'=>$aResults, 'sZip'=>$sZip, 'bArchiveIsEmpty'=>$bArchiveIsEmpty);\n    }\n\n    /**\n     * Download an archive file\n     * @param string $sZip name of zip file to download (will be downloaded as \"surveys_archive.zip\")\n     */\n    public function downloadZip($sZip)\n    {\n        $sTempDir     = Yii::app()->getConfig(\"tempdir\");\n        $aZIPFileName = $sTempDir.DIRECTORY_SEPARATOR.$sZip;\n\n        if (is_file($aZIPFileName)) {\n            $fn = \"surveys_archive.zip\";\n\n            //Send the file for download!\n            $this->_addHeaders($fn, \"application/force-download\", 0);\n\n            @readfile($aZIPFileName);\n\n            return;\n        }\n    }\n\n    /**\n     * Exports a archive (ZIP) of the current survey (structure, responses, timings, tokens)\n     *\n     * @param integer $iSurveyID  The ID of the survey to export\n     * @param boolean $bSendToBrowser If TRUE (default) then the ZIP file is sent to the browser\n     * @return string Full path of the ZIP filename if $bSendToBrowser is set to TRUE, otherwise no return value\n     */\n    private function _exportarchive($iSurveyID, $bSendToBrowser = true)\n    {\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n        $aSurveyInfo = getSurveyInfo($iSurveyID);\n\n        $sTempDir = Yii::app()->getConfig(\"tempdir\");\n\n        $aZIPFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSSFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSRFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSTFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSIFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n\n        Yii::import('application.libraries.admin.pclzip', true);\n        $zip = new PclZip($aZIPFileName);\n\n        file_put_contents($sLSSFileName, surveyGetXMLData($iSurveyID));\n\n        $this->_addToZip($zip, $sLSSFileName, 'survey_'.$iSurveyID.'.lss');\n\n        unlink($sLSSFileName);\n\n        if ($survey->isActive) {\n            getXMLDataSingleTable($iSurveyID, 'survey_'.$iSurveyID, 'Responses', 'responses', $sLSRFileName, false);\n            $this->_addToZip($zip, $sLSRFileName, 'survey_'.$iSurveyID.'_responses.lsr');\n            unlink($sLSRFileName);\n        }\n\n        if ($survey->hasTokensTable) {\n            getXMLDataSingleTable($iSurveyID, 'tokens_'.$iSurveyID, 'Tokens', 'tokens', $sLSTFileName);\n            $this->_addToZip($zip, $sLSTFileName, 'survey_'.$iSurveyID.'_tokens.lst');\n            unlink($sLSTFileName);\n        }\n\n        if (isset($survey->hasTimingsTable) && $survey->hasTimingsTable == 'Y') {\n            getXMLDataSingleTable($iSurveyID, 'survey_'.$iSurveyID.'_timings', 'Timings', 'timings', $sLSIFileName);\n            $this->_addToZip($zip, $sLSIFileName, 'survey_'.$iSurveyID.'_timings.lsi');\n            unlink($sLSIFileName);\n        }\n\n        if (is_file($aZIPFileName)) {\n            if ($bSendToBrowser) {\n                $fn = \"survey_archive_{$iSurveyID}.lsa\";\n\n                //Send the file for download!\n                $this->_addHeaders($fn, \"application/force-download\", 0);\n\n                @readfile($aZIPFileName);\n\n                //Delete the temporary file\n                unlink($aZIPFileName);\n\n                return;\n            } else {\n                return($aZIPFileName);\n            }\n        }\n    }\n\n    /**\n     * @param PclZip $zip\n     * @param string $name\n     * @param string $full_name\n     */\n    private function _addToZip($zip, $name, $full_name)\n    {\n        $zip->add(\n        array(\n        array(\n        PCLZIP_ATT_FILE_NAME => $name,\n        PCLZIP_ATT_FILE_NEW_FULL_NAME => $full_name\n        )\n        )\n        );\n    }\n\n    private function _surveyexport($action, $iSurveyID)\n    {\n        viewHelper::disableHtmlLogging();\n        if ($action == \"exportstructurexml\") {\n            $fn = \"limesurvey_survey_{$iSurveyID}.lss\";\n\n            $this->_addHeaders($fn, \"text/xml\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n\n            echo surveyGetXMLData($iSurveyID);\n            Yii::app()->end();\n        } elseif ($action == \"exportstructurejson\") {\n            $fn = \"limesurvey_survey_{$iSurveyID}.json\";\n            $this->_addHeaders($fn, \"application/json\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n            $surveyInXmlFormat = surveyGetXMLData($iSurveyID);\n            // now convert this xml into json format and then return\n            echo _xmlToJson($surveyInXmlFormat);\n            Yii::app()->end();\n        } elseif ($action == \"exportstructurequexml\") {\n            if (isset($surveyprintlang) && !empty($surveyprintlang)) {\n                $quexmllang = $surveyprintlang;\n            } else {\n                $quexmllang = Survey::model()->findByPk($iSurveyID)->language;\n            }\n\n            if (!(isset($noheader) && $noheader == true)) {\n                $fn = \"survey_{$iSurveyID}_{$quexmllang}.xml\";\n\n                $this->_addHeaders($fn, \"text/xml\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n\n                echo quexml_export($iSurveyID, $quexmllang);\n                Yii::app()->end();\n            }\n        } elseif ($action == 'exportstructuretsv') {\n            $this->_exporttsv($iSurveyID);\n        } elseif ($action == \"exportarchive\") {\n            $this->_exportarchive($iSurveyID);\n        } elseif ($action == \"exportprintables\") {\n            $this->_exportPrintableHtmls($iSurveyID);\n        }\n    }\n\n    /**\n     * Return a list of queXML settings\n     *\n     * @access private\n     * @return string[] queXML settings\n     */\n    private function _quexmlsettings()\n    {\n        return array('queXMLBackgroundColourQuestion',\n            'queXMLPageFormat',\n            'queXMLPageOrientation',\n            'queXMLEdgeDetectionFormat',\n            'queXMLBackgroundColourSection',\n            'queXMLSectionHeight',\n            'queXMLResponseLabelFontSize',\n            'queXMLResponseLabelFontSizeSmall',\n            'queXMLResponseTextFontSize',\n            'queXMLQuestionnaireInfoMargin',\n            'queXMLSingleResponseHorizontalHeight',\n            'queXMLSingleResponseAreaHeight',\n            'queXMLStyle',\n            'queXMLAllowSplittingVas',\n            'queXMLAllowSplittingMatrixText',\n            'queXMLAllowSplittingSingleChoiceVertical',\n            'queXMLAllowSplittingSingleChoiceHorizontal');\n    }\n\n    /**\n     * Clear queXML settings from settings table\n     *\n     * @access public\n     * @param int $iSurveyID\n     * @return void\n     */\n    public function quexmlclear($iSurveyID)\n    {\n        $queXMLSettings = $this->_quexmlsettings();\n        foreach ($queXMLSettings as $s) {\n            SettingGlobal::setSetting($s, '');\n        }\n        $this->getController()->redirect($this->getController()->createUrl(\"/admin/export/sa/quexml/surveyid/{$iSurveyID}\"));\n    }\n\n    /**\n     * Generate a queXML PDF document with provided styles/settings\n     *\n     * @access public\n     * @param int $iSurveyID\n     * @return void\n     */\n    public function quexml($iSurveyID)\n    {\n        $iSurveyID = (int) $iSurveyID;\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n        $queXMLSettings = $this->_quexmlsettings();\n        $aData = array();\n        $aData['surveyid'] = $iSurveyID;\n        $aData['slangs'] = Survey::model()->findByPk($iSurveyID)->additionalLanguages;\n        $aData['baselang'] = Survey::model()->findByPk($iSurveyID)->language;\n        $aData['surveybar']['closebutton']['url'] = 'admin/survey/sa/view/surveyid/'.$iSurveyID; // Close button\n        $aData['sidemenu']['state'] = false;\n        $aData['title_bar']['subaction'] = gt('queXML PDF export');\n        $aData['subaction'] = gt('queXML PDF export');\n        $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title.\" (\".gT(\"ID\").\":\".$iSurveyID.\")\";\n\n        array_unshift($aData['slangs'], $aData['baselang']);\n\n        Yii::import(\"application.libraries.admin.quexmlpdf\", true);\n        $defaultquexmlpdf = new quexmlpdf($this->getController());\n\n        foreach ($queXMLSettings as $s) {\n            $aData[$s] = getGlobalSetting($s);\n\n            if ($aData[$s] === null || trim($aData[$s]) === '') {\n                $method = str_replace(\"queXML\", \"get\", $s);\n                $aData[$s] = $defaultquexmlpdf->$method();\n            }\n        }\n\n        if (empty($_POST['ok'])) {\n            $this->_renderWrappedTemplate('survey', 'queXMLSurvey_view', $aData);\n        } else {\n            $quexmlpdf = new quexmlpdf($this->getController());\n\n            //Save settings globally and generate queXML document\n            foreach ($queXMLSettings as $s) {\n                if ($s !== 'queXMLStyle') {\n                    SettingGlobal::setSetting($s, Yii::app()->request->getPost($s));\n                }\n\n                $method = str_replace(\"queXML\", \"set\", $s);\n\n\n\n                $quexmlpdf->$method(Yii::app()->request->getPost($s));\n            }\n\n\n            $lang = Yii::app()->request->getPost('save_language');\n\n\n            // Setting the selected language for printout\n            App()->setLanguage($lang);\n\n            $quexmlpdf->setLanguage($lang);\n\n            set_time_limit(120);\n\n            Yii::app()->loadHelper('export');\n\n\n            $quexml = quexml_export($iSurveyID, $lang);\n\n            $quexmlpdf->create($quexmlpdf->createqueXML($quexml));\n\n            //NEED TO GET QID from $quexmlpdf\n            $qid = intval($quexmlpdf->getQuestionnaireId());\n\n            Yii::import('application.helpers.common_helper', true);\n            $zipdir = createRandomTempDir();\n\n\n            $f1 = \"$zipdir/quexf_banding_{$qid}_{$lang}.xml\";\n            $f2 = \"$zipdir/quexmlpdf_{$qid}_{$lang}.pdf\";\n            $f3 = \"$zipdir/quexml_{$qid}_{$lang}.xml\";\n            $f4 = \"$zipdir/readme.txt\";\n            $f5 = \"$zipdir/quexmlpdf_style_{$qid}_{$lang}.xml\";\n\n            file_put_contents($f5, $quexmlpdf->exportStyleXML());\n            file_put_contents($f1, $quexmlpdf->getLayout());\n            file_put_contents($f2, $quexmlpdf->Output(\"quexml_$qid.pdf\", 'S'));\n            file_put_contents($f3, $quexml);\n            file_put_contents($f4, gT('This archive contains a PDF file of the survey, the queXML file of the survey and a queXF banding XML file which can be used with queXF: http://quexf.sourceforge.net/ for processing scanned surveys.'));\n\n\n            Yii::app()->loadLibrary('admin.pclzip');\n            $zipfile = Yii::app()->getConfig(\"tempdir\").DIRECTORY_SEPARATOR.\"quexmlpdf_{$qid}_{$lang}.zip\";\n            $z = new PclZip($zipfile);\n            $z->create($zipdir, PCLZIP_OPT_REMOVE_PATH, $zipdir);\n\n            unlink($f1);\n            unlink($f2);\n            unlink($f3);\n            unlink($f4);\n            unlink($f5);\n            rmdir($zipdir);\n\n            $fn = \"quexmlpdf_{$qid}_{$lang}.zip\";\n            $this->_addHeaders($fn, \"application/zip\", 0);\n            header('Content-Transfer-Encoding: binary');\n\n            // load the file to send:\n            readfile($zipfile);\n            unlink($zipfile);\n        }\n    }\n\n\n    /**\n     * Get a Zipped version of  survey print version in all languages\n     * (including the template html assets)\n     *\n     * @param integer $iSurveyID Survey ID\n     * @param bool $readFile Whether we read the file for direct download (or not as in massive actions)\n     * @return string\n     */\n    private function _exportPrintableHtmls($iSurveyID, $readFile = true)\n    {\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        $assetsDir = substr(Template::getTemplateURL($oSurvey->template), 1);\n        $fullAssetsDir = Template::getTemplatePath($oSurvey->template);\n        $aLanguages = $oSurvey->getAllLanguages();\n\n        Yii::import('application.helpers.common_helper', true);\n        $zipdir = createRandomTempDir();\n\n        $fn = \"printable_survey_\".preg_replace('([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])','',$oSurvey->currentLanguageSettings->surveyls_title).\"_{$oSurvey->primaryKey}.zip\";\n\n        $tempdir = Yii::app()->getConfig(\"tempdir\");\n        $zipfile = \"$tempdir/\".$fn;\n\n        Yii::app()->loadLibrary('admin.pclzip');\n        $z = new PclZip($zipfile);\n        $z->create($zipdir, PCLZIP_OPT_REMOVE_PATH, $zipdir);\n        $z->add($fullAssetsDir, PCLZIP_OPT_REMOVE_PATH, $fullAssetsDir, PCLZIP_OPT_ADD_PATH, $assetsDir);\n\n        // Store current language\n        $siteLanguage = Yii::app()->language;\n        foreach ($aLanguages as $language) {\n            $file = $this->_exportPrintableHtml($oSurvey, $language, $tempdir);\n            $z->add($file, PCLZIP_OPT_REMOVE_PATH, $tempdir);\n            unlink($file);\n        }\n        // set language back (get's changed in loop above)\n        Yii::app()->language = $siteLanguage;\n\n        $this->_addHeaders($fn, \"application/zip\", 0);\n        // if ($readFile) {\n            header('Content-Transfer-Encoding: binary');\n            header(\"Content-disposition: attachment; filename=\\\"\".$fn.\"\\\"\");\n            readfile($zipfile);\n            unlink($zipfile);\n            Yii::app()->end();\n        // }\n        //return $zipfile;\n\n    }\n\n    /**\n     * Get a the printable html questionnaire in specified language and store\n     * the file in the specified directory\n     *\n     * @param Survey $oSurvey\n     * @param string $language\n     * @param string $tempdir the directory the file will be stored in\n     * @return string File name where the data is stored\n     */\n    private function _exportPrintableHtml($oSurvey, $language, $tempdir)\n    {\n        $printableSurvey = new printablesurvey();\n\n        $response = $printableSurvey->index($oSurvey->primaryKey, $language, true);\n\n        $file = \"$tempdir/questionnaire_{$oSurvey->getPrimaryKey()}_{$language}.html\";\n\n        // remove first slash to get local path for local storage for template assets\n        $templateDir = Template::getTemplateURL($oSurvey->template);\n        $response = str_replace($templateDir, substr($templateDir, 1), $response);\n\n        file_put_contents($file, $response);\n        return $file;\n\n    }\n\n    /**\n     * Generate an TSV (tab-separated value) file for the survey structure\n     * @param type $surveyid\n     */\n    private function _exporttsv($surveyid)\n    {\n        $fn = \"limesurvey_survey_$surveyid.txt\";\n        header(\"Content-Type: text/tab-separated-values charset=UTF-8\");\n        header(\"Content-Disposition: attachment; filename=$fn\");\n        header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); // Date in the past\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Pragma: public\"); // HTTP/1.0\n\n        tsvSurveyExport($surveyid);\n    }\n\n    /**\n     * @param string $content_type\n     */\n    private function _addHeaders($filename, $content_type, $expires, $pragma = \"public\")\n    {\n        header(\"Content-Type: {$content_type}; charset=UTF-8\");\n        header(\"Content-Disposition: attachment; filename={$filename}\");\n        header(\"Expires: {$expires}\"); // Date in the past\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Pragma: {$pragma}\"); // HTTP/1.0\n    }\n\n    private function _xmlToJson($fileContents)\n    {\n        $bOldEntityLoaderState = libxml_disable_entity_loader(true); // @see: http://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-external-entity-injection\n\n        $fileContents          = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $fileContents);\n        $fileContents          = trim(str_replace('\"', \"'\", $fileContents));\n        $simpleXml             = simplexml_load_string($fileContents, 'SimpleXMLElement', LIBXML_NOCDATA);\n        $json                  = json_encode($simpleXml);\n\n        libxml_disable_entity_loader($bOldEntityLoaderState); // Put back entity loader to its original state, to avoid contagion to other applications on the server\n        return $json;\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param string $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = 'export', $aViewUrls = array(), $aData = array(), $sRenderFile = false)\n    {\n        $aData['display']['menu_bars']['gid_action'] = 'exportstructureGroup';\n        parent::_renderWrappedTemplate($sAction, $aViewUrls, $aData, $sRenderFile);\n    }\n}\n"], "fixing_code": ["<?php if (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n* LimeSurvey\n* Copyright (C) 2007-2017 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n*/\n\n/**\n* Export Action\n*\n* This controller performs export actions\n*\n* @package        LimeSurvey\n* @subpackage    Backend\n*/\nclass export extends Survey_Common_Action\n{\n\n    public function __construct($controller, $id)\n    {\n        parent::__construct($controller, $id);\n\n        Yii::app()->loadHelper('export');\n        Yii::import('application.controllers.admin.printablesurvey', 1);\n    }\n\n    public function survey()\n    {\n        $action = Yii::app()->request->getParam('action');\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n\n        if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'export')) {\n            $this->_surveyexport($action, $iSurveyID);\n            return;\n        }\n    }\n\n    /**\n     * This function exports a ZIP archives of several ZIP archives - it is used in the listSurvey controller\n     * The SIDs are read from session flashdata.\n     *\n     */\n    public function surveyarchives()\n    {\n        if (!Permission::model()->hasGlobalPermission('superadmin', 'read')) {\n            safeDie('Access denied.');\n        }\n\n        $aSurveyIDs = $this->session->flashdata('sids');\n        $aExportedFiles = array();\n\n        foreach ($aSurveyIDs as $iSurveyID) {\n            $iSurveyID = (int) $iSurveyID;\n\n            if ($iSurveyID > 0) {\n                $aExportedFiles[$iSurveyID] = $this->_exportarchive($iSurveyID, false);\n            }\n        }\n\n        if (count($aExportedFiles) > 0) {\n            $aZIPFileName = $this->config->item(\"tempdir\").DIRECTORY_SEPARATOR.randomChars(30);\n\n            $this->load->library(\"admin/pclzip\", array('p_zipname' => $aZIPFileName));\n\n            $zip = new PclZip($aZIPFileName);\n            foreach ($aExportedFiles as $iSurveyID=>$sFileName) {\n                $zip->add(\n                array(\n                array(\n                PCLZIP_ATT_FILE_NAME => $sFileName,\n                PCLZIP_ATT_FILE_NEW_FULL_NAME => 'survey_archive_'.$iSurveyID.'.zip')\n                )\n                );\n\n                unlink($sFileName);\n            }\n        }\n\n        if (is_file($aZIPFileName)) {\n            //Send the file for download!\n            header(\"Pragma: public\");\n            header(\"Expires: 0\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n\n            header(\"Content-Type: application/force-download\");\n            header(\"Content-Disposition: attachment; filename=survey_archives_pack.zip\");\n            header(\"Content-Description: File Transfer\");\n            @readfile($aZIPFileName);\n\n            //Delete the temporary file\n            unlink($aZIPFileName);\n            return;\n        }\n    }\n\n    public function group()\n    {\n        $gid = sanitize_int(Yii::app()->request->getParam('gid'));\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n\n        group_export(\"exportstructurecsvGroup\", $iSurveyID, $gid);\n\n        return;\n    }\n\n    public function question()\n    {\n        $gid = sanitize_int(Yii::app()->request->getParam('gid'));\n        $qid = sanitize_int(Yii::app()->request->getParam('qid'));\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        questionExport(\"exportstructurecsvQuestion\", $iSurveyID, $gid, $qid);\n    }\n\n    public function exportresults()\n    {\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n\n        if (!isset($imageurl)) { $imageurl = \"./images\"; }\n        if (!isset($iSurveyID)) { $iSurveyID = returnGlobal('sid'); }\n\n        if (!isset($convertyto1)) { $convertyto1 = returnGlobal('convertyto1'); }\n        if (!isset($convertnto2)) { $convertnto2 = returnGlobal('convertnto2'); }\n        if (!isset($convertyto)) { $convertyto = returnGlobal('convertyto'); }\n        if (!isset($convertnto)) { $convertnto = returnGlobal('convertnto'); }\n\n\n\n        if (!Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export')) {\n            $this->getController()->error('Access denied!');\n        }\n\n        Yii::app()->loadHelper(\"admin/exportresults\");\n\n        App()->getClientScript()->registerScriptFile(App()->getConfig('generalscripts').'/expressions/em_javascript.js');\n        App()->getClientScript()->registerScriptFile(App()->getConfig('adminscripts').'/exportresults.js');\n\n        $sExportType = Yii::app()->request->getPost('type');\n        $sHeadingFormat = Yii::app()->request->getPost('headstyle');\n        $sAnswerFormat = Yii::app()->request->getPost('answers');\n        $bHeaderSpacesToUnderscores = Yii::app()->request->getPost('headspacetounderscores');\n        $bConvertY = Yii::app()->request->getPost('converty');\n        $bConvertN = Yii::app()->request->getPost('convertn');\n        $sYValue = Yii::app()->request->getPost('convertyto');\n        $sNValue = Yii::app()->request->getPost('convertnto');\n\n        $surveybaselang = $survey->language;\n        $exportoutput = \"\";\n\n        // Get info about the survey\n        $thissurvey = getSurveyInfo($iSurveyID);\n\n        // Load ExportSurveyResultsService so we know what exports are available\n        $resultsService = new ExportSurveyResultsService();\n        $exports = $resultsService->getExports();\n\n        if (!$sExportType) {\n            $aFieldMap = createFieldMap($survey, 'full', false, false, $survey->language);\n\n            if ($thissurvey['savetimings'] === \"Y\") {\n                //Append survey timings to the fieldmap array\n                $aFieldMap = $aFieldMap + createTimingsFieldMap($iSurveyID, 'full', false, false, $survey->language);\n            }\n            $iFieldCount = count($aFieldMap);\n\n            $selecthide = \"\";\n            $selectshow = \"\";\n            $selectinc = \"\";\n            if (incompleteAnsFilterState() == \"complete\") {\n                $selecthide = \"selected='selected'\";\n            } elseif (incompleteAnsFilterState() == \"incomplete\") {\n                $selectinc = \"selected='selected'\";\n            } else {\n                $selectshow = \"selected='selected'\";\n            }\n\n            $aFields = array();\n            $aFieldsOptions = array();\n            foreach ($aFieldMap as $sFieldName=>$fieldinfo) {\n                $sCode = viewHelper::getFieldCode($fieldinfo);\n                $aFields[$sFieldName] = $sCode.' - '.htmlspecialchars(ellipsize(html_entity_decode(viewHelper::getFieldText($fieldinfo)), 40, .6, '...'));\n                $aFieldsOptions[$sFieldName] = array('title'=>viewHelper::getFieldText($fieldinfo), 'data-fieldname'=>$fieldinfo['fieldname'], 'data-emcode'=>viewHelper::getFieldCode($fieldinfo, array('LEMcompat'=>true))); // No need to filter title : Yii do it (remove all tag)\n            }\n\n            $data['SingleResponse'] = (int) returnGlobal('id');\n            $data['selecthide'] = $selecthide;\n            $data['selectshow'] = $selectshow;\n            $data['selectinc'] = $selectinc;\n            $data['afieldcount'] = $iFieldCount;\n            $data['aFields'] = $aFields;\n            $data['aFieldsOptions'] = $aFieldsOptions;\n            //get max number of datasets\n            $iMaximum = SurveyDynamic::model($iSurveyID)->getMaxId();\n            //get min number of datasets\n            $iMinimum = SurveyDynamic::model($iSurveyID)->getMinId();\n\n            $data['max_datasets'] = $iMaximum;\n            $data['min_datasets'] = $iMinimum;\n            $data['surveyid'] = $iSurveyID;\n            $data['imageurl'] = Yii::app()->getConfig('imageurl');\n            $data['thissurvey'] = $thissurvey;\n            $data['display']['menu_bars']['browse'] = gT(\"Export results\");\n\n            // Export plugins, leave out all entries that are not plugin\n            $exports = array_filter($exports);\n            $exportData = array();\n            foreach ($exports as $key => $plugin) {\n                $event = new PluginEvent('listExportOptions');\n                $event->set('type', $key);\n                $oPluginManager = App()->getPluginManager();\n                $oPluginManager->dispatchEvent($event, $plugin);\n                $exportData[$key] = array(\n                    'onclick' => $event->get('onclick'),\n                    'label'   => $event->get('label'),\n                    'tooltip' => $event->get('tooltip', null)\n                );\n                if($event->get('default', false)) {\n                    $default = $event->get('label');\n                }\n            }\n            $data['exports'] = $exportData; // Pass available exports\n            $data['defaultexport'] = $default;\n            $data['headexports'] = array(\n                'code'=>array('label'=>gT(\"Question code\"), 'help'=>null, 'checked'=>false),\n                'abbreviated'=>array('label'=>gT(\"Abbreviated question text\"), 'help'=>null, 'checked'=>false),\n                'full'=>array('label'=>gT(\"Full question text\"), 'help'=>null, 'checked'=>true),\n                'codetext'=>array('label'=>gT(\"Question code & question text\"), 'help'=>null, 'checked'=>false),\n            );\n            // Add a plugin for adding headexports : a public function getRegistereddPlugins($event) can help here.\n            $aLanguagesCode = Survey::model()->findByPk($iSurveyID)->getAllLanguages();\n            $aLanguages = array();\n            foreach ($aLanguagesCode as $sLanguage) {\n                $aLanguages[$sLanguage] = getLanguageNameFromCode($sLanguage, false);\n            }\n            $data['aLanguages'] = $aLanguages; // Pass available exports\n\n            $data['aCsvFieldSeparator'] = array(\n                chr(44) => gT(\"Comma\"),\n                chr(59) => gT(\"Semicolon\"),\n                chr(9) => gT(\"Tab\"),\n            );\n\n            $data['sidemenu']['state'] = false;\n            $data['menu']['edition'] = true;\n            $data['menu']['export'] = true;\n            $data['menu']['close'] = true;\n\n            $data['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $data['title_bar']['title'] = gT('Browse responses').': '.$survey->currentLanguageSettings->surveyls_title;\n            $data['subaction'] = gT('Export results');\n\n            $this->_renderWrappedTemplate('export', 'exportresults_view', $data);\n\n            return;\n        }\n\n        // Export Language is set by default to surveybaselang\n        // * the explang language code is used in SQL queries\n        // * the alang object is used to translate headers and hardcoded answers\n        // In the future it might be possible to 'post' the 'export language' from\n        // the exportresults form\n        $explang = Yii::app()->request->getPost('exportlang', $surveybaselang);\n\n        //Get together our FormattingOptions and then call into the exportSurvey\n        //function.\n        $options = new FormattingOptions();\n        $options->selectedColumns = Yii::app()->request->getPost('colselect');\n        $options->responseMinRecord = sanitize_int(Yii::app()->request->getPost('export_from'));\n        $options->responseMaxRecord = sanitize_int(Yii::app()->request->getPost('export_to'));\n        $options->aResponses = nice_addslashes(Yii::app()->request->getPost('responses_id'));\n        $options->answerFormat = $sAnswerFormat;\n        $options->convertY = $bConvertY;\n        $options->yValue = ($bConvertY) ? $sYValue : null;\n        $options->convertN = $bConvertN;\n        $options->nValue = ($bConvertN) ? $sNValue : null;\n        $options->headingTextLength = (Yii::app()->request->getPost('abbreviatedtext')) ? (int) Yii::app()->request->getPost('abbreviatedtextto') : null;\n        $options->useEMCode = Yii::app()->request->getPost('emcode');\n        $options->headCodeTextSeparator = Yii::app()->request->getPost('codetextseparator');\n        $options->csvFieldSeparator = Yii::app()->request->getPost('csvfieldseparator');\n        $options->stripHtmlCode = Yii::app()->request->getPost('striphtmlcode');\n\n        $options->headerSpacesToUnderscores = $bHeaderSpacesToUnderscores;\n        $options->headingFormat = $sHeadingFormat;\n        $options->responseCompletionState = incompleteAnsFilterState();\n        $options->output = 'display';\n\n        // Replace token information by the column name\n        if (in_array('first_name', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"firstname\";\n        }\n\n        if (in_array('last_name', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"lastname\";\n        }\n\n        if (in_array('email_address', Yii::app()->request->getPost('attribute_select', array()))) {\n            $options->selectedColumns[] = \"email\";\n        }\n        $attributeFields = array_keys(getTokenFieldsAndNames($iSurveyID, true));\n        foreach ($attributeFields as $attr_name) {\n            if (in_array($attr_name, Yii::app()->request->getPost('attribute_select', array()))) {\n                $options->selectedColumns[] = $attr_name;\n            }\n        }\n\n        if (Yii::app()->request->getPost('response_id')) {\n                    $sFilter = \"{{survey_{$iSurveyID}}}.id=\".(int) Yii::app()->request->getPost('response_id');\n        } elseif (App()->request->getQuery('statfilter') && is_array(Yii::app()->session['statistics_selects_'.$iSurveyID])) {\n            $sFilter = Yii::app()->session['statistics_selects_'.$iSurveyID];\n        } else {\n            $sFilter = '';\n        }\n\n        viewHelper::disableHtmlLogging();\n        $resultsService->exportSurvey($iSurveyID, $explang, $sExportType, $options, $sFilter);\n\n        Yii::app()->end();\n    }\n\n    /*\n    * The SPSS DATA LIST / BEGIN DATA parser is rather simple minded, the number after the type\n    * specifier identifies the field width (maximum number of characters to scan)\n    * It will stop short of that number of characters, honouring quote delimited\n    * space separated strings, however if the width is too small the remaining data in the current\n    * line becomes part of the next column.  Since we want to restrict this script to ONE scan of\n    * the data (scan & output at same time), the information needed to construct the\n    * DATA LIST is held in the $fields array, while the actual data is written to a\n    * to a temporary location, updating length (size) values in the $fields array as\n    * the tmp file is generated (uses @fwrite's return value rather than strlen).\n    * Final output renders $fields to a DATA LIST, and then stitches in the tmp file data.\n    *\n    * Optimization opportunities remain in the VALUE LABELS section, which runs a query / column\n    */\n    public function exportspss()\n    {\n        global $length_vallabel;\n        $iSurveyID = sanitize_int(Yii::app()->request->getParam('sid'));\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        //for scale 1=nominal, 2=ordinal, 3=scale\n\n        //        $typeMap = $this->_getTypeMap();\n\n        $filterstate = incompleteAnsFilterState();\n        if (!Yii::app()->session['spssversion']) {\n// Default to 2 (16 and up)\n            Yii::app()->session['spssversion'] = 2;\n        }\n        $spssver = Yii::app()->request->getParam('spssver', Yii::app()->session['spssversion']);\n        Yii::app()->session['spssversion'] = $spssver;\n\n        $length_varlabel = '231'; // Set the max text length of Variable Labels\n        $length_vallabel = '120'; // Set the max text length of Value Labels\n\n        switch ($spssver) {\n            case 1:    //<16\n                $iLength = '255'; // Set the max text length of the Value\n                break;\n            case 2:    //>=16\n            default:\n                $iLength = '16384'; // Set the max text length of the Value\n        }\n\n        $headerComment = '*$Rev: 121017 $'.\" $filterstate $spssver.\\n\";\n\n        if (Yii::app()->request->getPost('dldata')) {\n            $subaction = \"dldata\";\n        }\n        if (Yii::app()->request->getPost('dlstructure')) {\n            $subaction = \"dlstructure\";\n        }\n\n        if (!isset($subaction)) {\n            $selecthide = \"\";\n            $selectshow = \"\";\n            $selectinc = \"\";\n\n            switch ($filterstate) {\n                case \"incomplete\":\n                    $selectinc = \"selected='selected'\";\n                    break;\n                case \"complete\":\n                    $selecthide = \"selected='selected'\";\n                    break;\n                default:\n                    $selectshow = \"selected='selected'\";\n            }\n\n            $data['selectinc'] = $selectinc;\n            $data['selecthide'] = $selecthide;\n            $data['selectshow'] = $selectshow;\n            $data['spssver'] = $spssver;\n            $data['surveyid'] = $iSurveyID;\n            $data['display']['menu_bars']['browse'] = gT('Export results');\n\n            $data['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $data['title_bar']['title'] = gT('Browse responses').': '.$oSurvey->currentLanguageSettings->surveyls_title;\n            $data['sBaseLanguage'] = $oSurvey->language;\n\n            $aLanguages = array();\n            $aLanguagesCodes = $oSurvey->getAllLanguages();\n            foreach ($aLanguagesCodes as $sLanguage) {\n                $aLanguages[$sLanguage] = getLanguageNameFromCode($sLanguage, false);\n            }\n            $data['aLanguages'] = $aLanguages; // Pass available exports\n\n            $data['sidemenu']['state'] = false;\n\n            $data['menu']['edition'] = true;\n            $data['menu']['close'] = true;\n\n            $this->_renderWrappedTemplate('export', 'spss_view', $data);\n            return;\n        }\n\n        // Get Base language:\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        $sLanguage = Yii::app()->request->getParam('exportlang');\n        $aLanguagesCodes = $oSurvey->getAllLanguages();\n        if (!in_array($sLanguage, $aLanguagesCodes)) {\n            $sLanguage = $oSurvey->language;\n        }\n        App()->setLanguage($sLanguage);\n\n        Yii::app()->loadHelper(\"admin/exportresults\");\n        viewHelper::disableHtmlLogging();\n\n        if ($subaction == 'dldata') {\n            header(\"Content-Disposition: attachment; filename=survey_\".$iSurveyID.\"_SPSS_data_file.dat\");\n            header(\"Content-type: text/comma-separated-values; charset=UTF-8\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: public\");\n\n            if ($spssver == 2) {\n                echo \"\\xEF\\xBB\\xBF\";\n            }\n\n            $sNoAnswerValue = (isset($_POST['noanswervalue']) && $_POST['noanswervalue'] != '') ? '\\''.$_POST['noanswervalue'].'\\'' : '';\n            SPSSExportData($iSurveyID, $iLength, $sNoAnswerValue, '\\'', false, $sLanguage);\n\n            App()->end();\n        }\n\n        if ($subaction == 'dlstructure') {\n            header(\"Content-Disposition: attachment; filename=survey_\".$iSurveyID.\"_SPSS_syntax_file.sps\");\n            header(\"Content-type: application/download; charset=UTF-8\");\n            header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n            header(\"Pragma: public\");\n            $fields = SPSSFieldMap($iSurveyID, 'V', $sLanguage);\n\n            if ($spssver == 2) {\n                echo \"\\xEF\\xBB\\xBF\";\n            }\n            echo $headerComment;\n\n            if ($spssver == 2) {\n                echo \"SET UNICODE=ON.\\n\";\n            }\n\n            echo \"SHOW LOCALE.\\n\";\n            echo \"PRESERVE LOCALE.\\n\";\n            echo \"SET LOCALE='en_UK'.\\n\";\n\n            echo \"GET DATA\\n\"\n            .\" /TYPE=TXT\\n\"\n            .\" /FILE='survey_\".$iSurveyID.\"_SPSS_data_file.dat'\\n\"\n            .\" /DELCASE=LINE\\n\"\n            .\" /DELIMITERS=\\\",\\\"\\n\"\n            .\" /QUALIFIER=\\\"'\\\"\\n\"\n            .\" /ARRANGEMENT=DELIMITED\\n\"\n            .\" /FIRSTCASE=1\\n\"\n            .\" /IMPORTCASE=ALL\\n\"\n            .\" /VARIABLES=\";\n\n            foreach ($fields as $field) {\n                if ($field['SPSStype'] == 'DATETIME23.2') {\n                    $field['size'] = '';\n                }\n                if (!$field['hide']) {\n                    echo \"\\n {$field['id']} {$field['SPSStype']}{$field['size']}\";\n                }\n            }\n\n            echo \".\\nCACHE.\\n\"\n            .\"EXECUTE.\\n\";\n\n            //Create the variable labels:\n            echo \"*Define Variable Properties.\\n\";\n            foreach ($fields as $field) {\n                if (!$field['hide']) {\n                    $label_parts = strSplitUnicode(str_replace('\"', '\"\"', stripTagsFull($field['VariableLabel'])), $length_varlabel - strlen($field['id']));\n                    //if replaced quotes are splitted by, we need to mve the first quote to the next row\n                    foreach ($label_parts as $idx => $label_part) {\n                        if ($idx != count($label_parts) && substr($label_part, -1) == '\"' && substr($label_part, -2) != '\"') {\n                            $label_parts[$idx] = rtrim($label_part, '\"');\n                            if (array_key_exists($idx + 1, $label_parts)){\n                                $label_parts[$idx + 1] = '\"'.$label_parts[$idx + 1];\n                            }\n                        }\n                    }\n                    echo \"VARIABLE LABELS \".$field['id'].\" \\\"\".implode(\"\\\"+\\n\\\"\", $label_parts).\"\\\".\\n\";\n                }\n            }\n\n            // Create our Value Labels!\n            echo \"*Define Value labels.\\n\";\n            foreach ($fields as $field) {\n                if (isset($field['answers'])) {\n                    $answers = $field['answers'];\n\n                    //print out the value labels!\n                    echo \"VALUE LABELS  {$field['id']}\\n\";\n\n                    $i = 0;\n                    foreach ($answers as $answer) {\n                        $i++;\n\n                        if ($field['SPSStype'] == \"F\" && isNumericExtended($answer['code'])) {\n                            $str = \"{$answer['code']}\";\n                        } else {\n                            $str = \"\\\"{$answer['code']}\\\"\";\n                        }\n\n                        if ($i < count($answers)) {\n                            echo \" $str \\\"{$answer['value']}\\\"\\n\";\n                        } else {\n                            echo \" $str \\\"{$answer['value']}\\\".\\n\";\n                        }\n                    }\n                }\n            }\n\n            foreach ($fields as $field) {\n                if ($field['scale'] !== '') {\n                    switch ($field['scale']) {\n                        case 2:\n                            echo \"VARIABLE LEVEL {$field['id']}(ORDINAL).\\n\";\n                            break;\n                        case 3:\n                            echo \"VARIABLE LEVEL {$field['id']}(SCALE).\\n\";\n                    }\n                }\n            }\n\n            //Rename the Variables (in case somethings goes wrong, we still have the OLD values\n            foreach ($fields as $field) {\n                if (isset($field['sql_name']) && $field['hide'] === 0) {\n                    $ftitle = $field['title'];\n\n                    if (!preg_match(\"/^([a-z]|[A-Z])+.*$/\", $ftitle)) {\n                        $ftitle = \"q_\".$ftitle;\n                    }\n\n                    $ftitle = str_replace(array(\" \", \"-\", \":\", \";\", \"!\", \"/\", \"\\\\\", \"'\"), array(\"_\", \"_hyph_\", \"_dd_\", \"_dc_\", \"_excl_\", \"_fs_\", \"_bs_\", '_qu_'), $ftitle);\n\n                    if ($ftitle != $field['title']) {\n                        echo \"* Variable name was incorrect and was changed from {$field['title']} to $ftitle .\\n\";\n                    }\n\n                    echo \"RENAME VARIABLE ( \".$field['id'].' = '.$ftitle.\" ).\\n\";\n                }\n            }\n            echo \"RESTORE LOCALE.\\n\";\n            App()->end();\n        }\n    }\n\n    public function vvexport()\n    {\n        $iSurveyId = sanitize_int(Yii::app()->request->getParam('surveyid'));\n        $survey = Survey::model()->findByPk($iSurveyId);\n        $subaction = Yii::app()->request->getParam('subaction');\n\n        /** @var Survey $oSurvey */\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n\n        //Exports all responses to a survey in special \"Verified Voting\" format.\n        if (!Permission::model()->hasSurveyPermission($iSurveyId, 'responses', 'export')) {\n            Yii::app()->session['flashmessage'] = gT(\"You do not have permission to access this page.\");\n            $this->getController()->redirect($this->getController()->createUrl(\"/admin/survey/sa/view/surveyid/{$iSurveyId}\"));\n        }\n\n        if ($subaction != \"export\") {\n            $aData['selectincansstate'] = incompleteAnsFilterState();\n            $aData['surveyid'] = $iSurveyId;\n            $aData['display']['menu_bars']['browse'] = gT(\"Export VV file\");\n            $fieldmap = createFieldMap($survey, 'full', false, false, $survey->language);\n\n            $surveytable = \"{{survey_$iSurveyId}}\";\n            // Control if fieldcode are unique\n            $fieldnames = Yii::app()->db->schema->getTable($surveytable)->getColumnNames();\n            foreach ($fieldnames as $field) {\n                $fielddata = arraySearchByKey($field, $fieldmap, \"fieldname\", 1);\n                $fieldcode[] = viewHelper::getFieldCode($fielddata, array(\"LEMcompat\"=>true));\n            }\n            $aData['uniquefieldcode'] = (count(array_unique($fieldcode)) == count($fieldcode)); // Did we need more control ?\n            $aData['vvversionseleted'] = ($aData['uniquefieldcode']) ? 2 : 1;\n\n            $aData['display']['menu_bars']['browse'] = gT('Browse responses'); // browse is independent of the above\n            $aData['title_bar']['title'] = gT('Browse responses').': '.$survey->currentLanguageSettings->surveyls_title;\n            $aData['subaction'] = gt('Export a VV survey file');\n\n            $aData['sidemenu']['state'] = false;\n            $aData['menu']['edition'] = true;\n            $aData['menu']['export'] = true;\n            $aData['menu']['close'] = true;\n\n            $this->_renderWrappedTemplate('export', 'vv_view', $aData);\n        } elseif (isset($iSurveyId) && $iSurveyId) {\n            //Export is happening\n            $extension = sanitize_paranoid_string(returnGlobal('extension'));\n            $vvVersion = (int) Yii::app()->request->getPost('vvversion');\n            $vvVersion = (in_array($vvVersion, array(1, 2))) ? $vvVersion : 2; // Only 2 version actually, default to 2\n            $fn = \"vvexport_$iSurveyId.\".$extension;\n\n            $this->_addHeaders($fn, \"text/comma-separated-values\", 0, \"cache\");\n\n            $s = \"\\t\";\n\n            $fieldmap = createFieldMap($survey, 'full', false, false, $survey->language);\n            $surveytable = \"{{survey_$iSurveyId}}\";\n\n\n            $fieldnames = Yii::app()->db->schema->getTable($surveytable)->getColumnNames();\n\n            //Create the human friendly first line\n            $firstline = \"\";\n            $secondline = \"\";\n            foreach ($fieldnames as $field) {\n                $fielddata = arraySearchByKey($field, $fieldmap, \"fieldname\", 1);\n\n                if (count($fielddata) < 1) {\n                    $firstline .= $field;\n                } else {\n                    $firstline .= preg_replace('/\\s+/', ' ', flattenText($fielddata['question'],false,true,'UTF-8',true));\n                }\n                $firstline .= $s;\n                if ($vvVersion == 2) {\n                    $fieldcode = viewHelper::getFieldCode($fielddata, array(\"LEMcompat\"=>true));\n                    $fieldcode = ($fieldcode) ? $fieldcode : $field; // $fieldcode is empty for token if there are no survey participants table\n                } else {\n                    $fieldcode = $field;\n                }\n                $secondline .= $fieldcode.$s;\n            }\n\n            $vvoutput = $firstline.\"\\n\";\n            $vvoutput .= $secondline.\"\\n\";\n            $query = \"SELECT * FROM \".Yii::app()->db->quoteTableName($surveytable);\n\n            if (incompleteAnsFilterState() == \"incomplete\") {\n                $query .= \" WHERE submitdate IS NULL \";\n            } elseif (incompleteAnsFilterState() == \"complete\") {\n                $query .= \" WHERE submitdate >= '01/01/1980' \";\n            }\n            $result = Yii::app()->db->createCommand($query)->query();\n\n            echo $vvoutput;\n            foreach ($result as $row) {\n                foreach ($fieldnames as $field) {\n                    if (is_null($row[$field])) {\n                        $value = '{question_not_shown}';\n                    } else {\n                        $value = trim($row[$field]);\n                        // sunscreen for the value. necessary for the beach.\n                        // careful about the order of these arrays:\n                        // lbrace has to be substituted *first*\n                        $value = str_replace(\n                        array(\n                        \"{\",\n                        \"\\n\",\n                        \"\\r\",\n                        \"\\t\"),\n                        array(\"{lbrace}\",\n                        \"{newline}\",\n                        \"{cr}\",\n                        \"{tab}\"\n                        ),\n                        $value\n                        );\n                    }\n\n                    // one last tweak: excel likes to quote values when it\n                    // exports as tab-delimited (esp if value contains a comma,\n                    // oddly enough).  So we're going to encode a leading quote,\n                    // if it occurs, so that we can tell the difference between\n                    // strings that \"really are\" quoted, and those that excel quotes\n                    // for us.\n                    $value = preg_replace('/^\"/', '{quote}', $value);\n                    // yay!  that nasty soab won't hurt us now!\n                    if ($field == \"submitdate\" && !$value) { $value = \"NULL\"; }\n\n                    $sun[] = $value;\n                }\n\n                /* it is important here to stream output data, line by line\n                 * in order to avoid huge memory consumption when exporting large\n                 * quantities of answers */\n                echo implode($s, $sun).\"\\n\";\n\n                unset($sun);\n            }\n            Yii::app()->end();\n        }\n    }\n\n\n    public function resources()\n    {\n        switch (Yii::app()->request->getParam('export')) {\n            case 'survey' :\n                $iSurveyID = sanitize_int(Yii::app()->getRequest()->getParam('surveyid'));\n                $resourcesdir = 'surveys/'.$iSurveyID;\n                $zipfilename = \"resources-survey-$iSurveyID.zip\";\n                break;\n            case 'label' :\n                $lid = sanitize_int(Yii::app()->getRequest()->getParam('lid'));\n                $resourcesdir = 'labels/'.$lid;\n                $zipfilename = \"resources-labelset-$lid.zip\";\n                break;\n        }\n\n        if (!empty($zipfilename) && !empty($resourcesdir)) {\n            $resourcesdir = Yii::app()->getConfig('uploaddir').\"/{$resourcesdir}/\";\n            $tmpdir = Yii::app()->getConfig('tempdir').'/';\n            $zipfilepath = $tmpdir.$zipfilename;\n            Yii::app()->loadLibrary('admin.pclzip');\n            $zip = new PclZip($zipfilepath);\n            $zipdirs = array();\n            foreach (array('files', 'flash', 'images') as $zipdir) {\n                if (is_dir($resourcesdir.$zipdir)) {\n                                    $zipdirs[] = $resourcesdir.$zipdir.'/';\n                }\n            }\n            if ($zip->create($zipdirs, PCLZIP_OPT_REMOVE_PATH, $resourcesdir) === 0) {\n                safeDie(\"Error : \".$zip->errorInfo(true));\n            } elseif (file_exists($zipfilepath)) {\n                $this->_addHeaders($zipfilename, 'application/force-download', 0);\n                readfile($zipfilepath);\n                unlink($zipfilepath);\n                Yii::app()->end();\n            }\n        }\n    }\n\n    public function dumplabel()\n    {\n        if (!Permission::model()->hasGlobalPermission('labelsets', 'export')) {\n            safeDie('No permission.');\n        }\n        $lid = sanitize_int(Yii::app()->request->getParam('lid'));\n        // DUMP THE RELATED DATA FOR A SINGLE QUESTION INTO A SQL FILE FOR IMPORTING LATER ON OR\n        // ON ANOTHER SURVEY SETUP DUMP ALL DATA WITH RELATED QID FROM THE FOLLOWING TABLES\n        // 1. questions\n        // 2. answers\n\n        $lids = returnGlobal('lids');\n\n        if (!$lid && !$lids) {\n            safeDie('No LID has been provided. Cannot dump label set.');\n        }\n\n        if ($lid) {\n            $lids = array($lid);\n        }\n\n        $lids = array_map('sanitize_int', $lids);\n\n        $fn = \"limesurvey_labelset_\".implode('_', $lids).\".lsl\";\n        $xml = getXMLWriter();\n\n        $this->_addHeaders($fn, \"application/force-download\", \"Mon, 26 Jul 1997 05:00:00 GMT\", \"cache\");\n\n        $xml->openURI('php://output');\n\n        $xml->setIndent(true);\n        $xml->startDocument('1.0', 'UTF-8');\n        $xml->startElement('document');\n        $xml->writeElement('LimeSurveyDocType', 'Label set');\n        $xml->writeElement('DBVersion', getGlobalSetting(\"DBVersion\"));\n\n        // Label sets table\n        $lsquery = \"SELECT * FROM {{labelsets}} WHERE lid=\".implode(' or lid=', $lids);\n        buildXMLFromQuery($xml, $lsquery, 'labelsets');\n\n        // Labels\n        $lquery = \"SELECT lid, code, title, sortorder, language, assessment_value FROM {{labels}} WHERE lid=\".implode(' or lid=', $lids);\n        buildXMLFromQuery($xml, $lquery, 'labels');\n        $xml->endElement(); // close columns\n        $xml->endDocument();\n        Yii::app()->end();\n    }\n\n    /**\n     * Export multiple surveys structure. Called via ajax from surveys list massive action\n     */\n    public function exportMultipleStructureSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'structure');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n\n    /**\n     * Export multiple surveys structure. Called via ajax from surveys list massive action\n     */\n    public function exportMultiplePrintableSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'printable');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n    /**\n     * Export multiple surveys archives. Called via ajax from surveys list massive action\n     */\n    public function exportMultipleArchiveSurveys()\n    {\n        $sSurveys = $_POST['sItems'];\n        $exportResult = $this->exportMultipleSurveys($sSurveys, 'archive');\n        Yii::app()->getController()->renderPartial('ext.admin.survey.ListSurveysWidget.views.massive_actions._export_archive_results', array('aResults'=>$exportResult['aResults'], 'sZip'=>$exportResult['sZip'], 'bArchiveIsEmpty'=>$exportResult['bArchiveIsEmpty']));\n    }\n\n\n    /**\n     * @param string $sExportType\n     */\n    public function exportMultipleSurveys($sSurveys, $sExportType)\n    {\n        $aSurveys = json_decode($sSurveys);\n        $aResults = array();\n        Yii::import('application.libraries.admin.pclzip', true);\n        $bArchiveIsEmpty = true;\n        $sTempDir        = Yii::app()->getConfig(\"tempdir\");\n        $sZip            = randomChars(30);\n        $aZIPFilePath    = $sTempDir.DIRECTORY_SEPARATOR.$sZip;\n        $zip             = new PclZip($aZIPFilePath);\n\n        foreach ($aSurveys as $iSurveyID) {\n            $iSurveyID = filter_var($iSurveyID, FILTER_VALIDATE_INT);\n            if ($iSurveyID === false) {\n                continue;\n            }\n            if (Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export')) {\n                $archiveName                    = \"\";\n                $oSurvey                        = Survey::model()->findByPk($iSurveyID);\n                $aResults[$iSurveyID]['title']  = ellipsize($oSurvey->correct_relation_defaultlanguage->surveyls_title, 30);\n                $aResults[$iSurveyID]['result'] = false;\n\n                // Specific to each kind of export\n                switch ($sExportType) {\n                    // Export archives for active surveys\n                    case 'archive':\n                        if ($oSurvey->isActive) {\n                            $archiveName = $this->_exportarchive($iSurveyID, false);\n\n                            if (is_file($archiveName)) {\n                                $aResults[$iSurveyID]['result'] = true;\n                                $aResults[$iSurveyID]['file']   = $archiveName;\n                                $bArchiveIsEmpty                = false;\n                                $archiveFile                    = $archiveName;\n                                $newArchiveFileFullName         = 'survey_archive_'.$iSurveyID.'.lsa';\n                                $this->_addToZip($zip, $archiveFile, $newArchiveFileFullName);\n                                unlink($archiveFile);\n                            } else {\n                                $aResults[$iSurveyID]['error'] = gT(\"Unknown error\");\n                            }\n                        } else {\n                            $aResults[$iSurveyID]['error'] = gT(\"Not active.\");\n                        }\n                    break;\n                    // Export printable archives for all selected surveys\n                    case 'printable':\n                        $archiveName = $this->_exportPrintableHtmls($iSurveyID, false);\n                        if (is_file($archiveName)) {\n                            $aResults[$iSurveyID]['result'] = true;\n                            $aResults[$iSurveyID]['file']   = $archiveName;\n                            $bArchiveIsEmpty                = false;\n                            $archiveFile                    = $archiveName;\n                            $newArchiveFileFullName         = 'survey_printables_'.$iSurveyID.'.zip';\n                            $this->_addToZip($zip, $archiveFile, $newArchiveFileFullName);\n                            unlink($archiveFile);\n                        } else {\n                            $aResults[$iSurveyID]['error'] = gT(\"Unknown error\");\n                        }\n                        break;\n\n                    // Export structure for survey\n                    default:\n                        $aResults[$iSurveyID]['result'] = true;\n                        $bArchiveIsEmpty                = false;\n\n                        $lssFileName = \"limesurvey_survey_{$iSurveyID}.lss\";\n                        $archiveFile = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n                        file_put_contents($archiveFile, surveyGetXMLData($iSurveyID));\n                        $this->_addToZip($zip, $archiveFile, $lssFileName);\n                        unlink($archiveFile);\n                    break;\n                }\n            } else {\n                $aResults[$iSurveyID]['error'] = gT(\"We are sorry but you don't have permissions to do this.\");\n            }\n        }\n        return array('aResults'=>$aResults, 'sZip'=>$sZip, 'bArchiveIsEmpty'=>$bArchiveIsEmpty);\n    }\n\n    /**\n     * Download an archive file\n     * @param string $sZip name of zip file to download (will be downloaded as \"surveys_archive.zip\")\n     */\n    public function downloadZip($sZip)\n    {\n        $sTempDir     = Yii::app()->getConfig(\"tempdir\");\n        $sZip         = get_absolute_path($sZip);\n        $aZIPFileName = $sTempDir.DIRECTORY_SEPARATOR.$sZip;\n\n        if (is_file($aZIPFileName)) {\n            $fn = \"surveys_archive.zip\";\n\n            //Send the file for download!\n            $this->_addHeaders($fn, \"application/force-download\", 0);\n\n            @readfile($aZIPFileName);\n\n            return;\n        }\n    }\n\n    /**\n     * Exports a archive (ZIP) of the current survey (structure, responses, timings, tokens)\n     *\n     * @param integer $iSurveyID  The ID of the survey to export\n     * @param boolean $bSendToBrowser If TRUE (default) then the ZIP file is sent to the browser\n     * @return string Full path of the ZIP filename if $bSendToBrowser is set to TRUE, otherwise no return value\n     */\n    private function _exportarchive($iSurveyID, $bSendToBrowser = true)\n    {\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n        $aSurveyInfo = getSurveyInfo($iSurveyID);\n\n        $sTempDir = Yii::app()->getConfig(\"tempdir\");\n\n        $aZIPFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSSFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSRFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSTFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n        $sLSIFileName = $sTempDir.DIRECTORY_SEPARATOR.randomChars(30);\n\n        Yii::import('application.libraries.admin.pclzip', true);\n        $zip = new PclZip($aZIPFileName);\n\n        file_put_contents($sLSSFileName, surveyGetXMLData($iSurveyID));\n\n        $this->_addToZip($zip, $sLSSFileName, 'survey_'.$iSurveyID.'.lss');\n\n        unlink($sLSSFileName);\n\n        if ($survey->isActive) {\n            getXMLDataSingleTable($iSurveyID, 'survey_'.$iSurveyID, 'Responses', 'responses', $sLSRFileName, false);\n            $this->_addToZip($zip, $sLSRFileName, 'survey_'.$iSurveyID.'_responses.lsr');\n            unlink($sLSRFileName);\n        }\n\n        if ($survey->hasTokensTable) {\n            getXMLDataSingleTable($iSurveyID, 'tokens_'.$iSurveyID, 'Tokens', 'tokens', $sLSTFileName);\n            $this->_addToZip($zip, $sLSTFileName, 'survey_'.$iSurveyID.'_tokens.lst');\n            unlink($sLSTFileName);\n        }\n\n        if (isset($survey->hasTimingsTable) && $survey->hasTimingsTable == 'Y') {\n            getXMLDataSingleTable($iSurveyID, 'survey_'.$iSurveyID.'_timings', 'Timings', 'timings', $sLSIFileName);\n            $this->_addToZip($zip, $sLSIFileName, 'survey_'.$iSurveyID.'_timings.lsi');\n            unlink($sLSIFileName);\n        }\n\n        if (is_file($aZIPFileName)) {\n            if ($bSendToBrowser) {\n                $fn = \"survey_archive_{$iSurveyID}.lsa\";\n\n                //Send the file for download!\n                $this->_addHeaders($fn, \"application/force-download\", 0);\n\n                @readfile($aZIPFileName);\n\n                //Delete the temporary file\n                unlink($aZIPFileName);\n\n                return;\n            } else {\n                return($aZIPFileName);\n            }\n        }\n    }\n\n    /**\n     * @param PclZip $zip\n     * @param string $name\n     * @param string $full_name\n     */\n    private function _addToZip($zip, $name, $full_name)\n    {\n        $zip->add(\n        array(\n        array(\n        PCLZIP_ATT_FILE_NAME => $name,\n        PCLZIP_ATT_FILE_NEW_FULL_NAME => $full_name\n        )\n        )\n        );\n    }\n\n    private function _surveyexport($action, $iSurveyID)\n    {\n        viewHelper::disableHtmlLogging();\n        if ($action == \"exportstructurexml\") {\n            $fn = \"limesurvey_survey_{$iSurveyID}.lss\";\n\n            $this->_addHeaders($fn, \"text/xml\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n\n            echo surveyGetXMLData($iSurveyID);\n            Yii::app()->end();\n        } elseif ($action == \"exportstructurejson\") {\n            $fn = \"limesurvey_survey_{$iSurveyID}.json\";\n            $this->_addHeaders($fn, \"application/json\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n            $surveyInXmlFormat = surveyGetXMLData($iSurveyID);\n            // now convert this xml into json format and then return\n            echo _xmlToJson($surveyInXmlFormat);\n            Yii::app()->end();\n        } elseif ($action == \"exportstructurequexml\") {\n            if (isset($surveyprintlang) && !empty($surveyprintlang)) {\n                $quexmllang = $surveyprintlang;\n            } else {\n                $quexmllang = Survey::model()->findByPk($iSurveyID)->language;\n            }\n\n            if (!(isset($noheader) && $noheader == true)) {\n                $fn = \"survey_{$iSurveyID}_{$quexmllang}.xml\";\n\n                $this->_addHeaders($fn, \"text/xml\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n\n                echo quexml_export($iSurveyID, $quexmllang);\n                Yii::app()->end();\n            }\n        } elseif ($action == 'exportstructuretsv') {\n            $this->_exporttsv($iSurveyID);\n        } elseif ($action == \"exportarchive\") {\n            $this->_exportarchive($iSurveyID);\n        } elseif ($action == \"exportprintables\") {\n            $this->_exportPrintableHtmls($iSurveyID);\n        }\n    }\n\n    /**\n     * Return a list of queXML settings\n     *\n     * @access private\n     * @return string[] queXML settings\n     */\n    private function _quexmlsettings()\n    {\n        return array('queXMLBackgroundColourQuestion',\n            'queXMLPageFormat',\n            'queXMLPageOrientation',\n            'queXMLEdgeDetectionFormat',\n            'queXMLBackgroundColourSection',\n            'queXMLSectionHeight',\n            'queXMLResponseLabelFontSize',\n            'queXMLResponseLabelFontSizeSmall',\n            'queXMLResponseTextFontSize',\n            'queXMLQuestionnaireInfoMargin',\n            'queXMLSingleResponseHorizontalHeight',\n            'queXMLSingleResponseAreaHeight',\n            'queXMLStyle',\n            'queXMLAllowSplittingVas',\n            'queXMLAllowSplittingMatrixText',\n            'queXMLAllowSplittingSingleChoiceVertical',\n            'queXMLAllowSplittingSingleChoiceHorizontal');\n    }\n\n    /**\n     * Clear queXML settings from settings table\n     *\n     * @access public\n     * @param int $iSurveyID\n     * @return void\n     */\n    public function quexmlclear($iSurveyID)\n    {\n        $queXMLSettings = $this->_quexmlsettings();\n        foreach ($queXMLSettings as $s) {\n            SettingGlobal::setSetting($s, '');\n        }\n        $this->getController()->redirect($this->getController()->createUrl(\"/admin/export/sa/quexml/surveyid/{$iSurveyID}\"));\n    }\n\n    /**\n     * Generate a queXML PDF document with provided styles/settings\n     *\n     * @access public\n     * @param int $iSurveyID\n     * @return void\n     */\n    public function quexml($iSurveyID)\n    {\n        $iSurveyID = (int) $iSurveyID;\n        $survey = Survey::model()->findByPk($iSurveyID);\n\n        $queXMLSettings = $this->_quexmlsettings();\n        $aData = array();\n        $aData['surveyid'] = $iSurveyID;\n        $aData['slangs'] = Survey::model()->findByPk($iSurveyID)->additionalLanguages;\n        $aData['baselang'] = Survey::model()->findByPk($iSurveyID)->language;\n        $aData['surveybar']['closebutton']['url'] = 'admin/survey/sa/view/surveyid/'.$iSurveyID; // Close button\n        $aData['sidemenu']['state'] = false;\n        $aData['title_bar']['subaction'] = gt('queXML PDF export');\n        $aData['subaction'] = gt('queXML PDF export');\n        $aData['title_bar']['title'] = $survey->currentLanguageSettings->surveyls_title.\" (\".gT(\"ID\").\":\".$iSurveyID.\")\";\n\n        array_unshift($aData['slangs'], $aData['baselang']);\n\n        Yii::import(\"application.libraries.admin.quexmlpdf\", true);\n        $defaultquexmlpdf = new quexmlpdf($this->getController());\n\n        foreach ($queXMLSettings as $s) {\n            $aData[$s] = getGlobalSetting($s);\n\n            if ($aData[$s] === null || trim($aData[$s]) === '') {\n                $method = str_replace(\"queXML\", \"get\", $s);\n                $aData[$s] = $defaultquexmlpdf->$method();\n            }\n        }\n\n        if (empty($_POST['ok'])) {\n            $this->_renderWrappedTemplate('survey', 'queXMLSurvey_view', $aData);\n        } else {\n            $quexmlpdf = new quexmlpdf($this->getController());\n\n            //Save settings globally and generate queXML document\n            foreach ($queXMLSettings as $s) {\n                if ($s !== 'queXMLStyle') {\n                    SettingGlobal::setSetting($s, Yii::app()->request->getPost($s));\n                }\n\n                $method = str_replace(\"queXML\", \"set\", $s);\n\n\n\n                $quexmlpdf->$method(Yii::app()->request->getPost($s));\n            }\n\n\n            $lang = Yii::app()->request->getPost('save_language');\n\n\n            // Setting the selected language for printout\n            App()->setLanguage($lang);\n\n            $quexmlpdf->setLanguage($lang);\n\n            set_time_limit(120);\n\n            Yii::app()->loadHelper('export');\n\n\n            $quexml = quexml_export($iSurveyID, $lang);\n\n            $quexmlpdf->create($quexmlpdf->createqueXML($quexml));\n\n            //NEED TO GET QID from $quexmlpdf\n            $qid = intval($quexmlpdf->getQuestionnaireId());\n\n            Yii::import('application.helpers.common_helper', true);\n            $zipdir = createRandomTempDir();\n\n\n            $f1 = \"$zipdir/quexf_banding_{$qid}_{$lang}.xml\";\n            $f2 = \"$zipdir/quexmlpdf_{$qid}_{$lang}.pdf\";\n            $f3 = \"$zipdir/quexml_{$qid}_{$lang}.xml\";\n            $f4 = \"$zipdir/readme.txt\";\n            $f5 = \"$zipdir/quexmlpdf_style_{$qid}_{$lang}.xml\";\n\n            file_put_contents($f5, $quexmlpdf->exportStyleXML());\n            file_put_contents($f1, $quexmlpdf->getLayout());\n            file_put_contents($f2, $quexmlpdf->Output(\"quexml_$qid.pdf\", 'S'));\n            file_put_contents($f3, $quexml);\n            file_put_contents($f4, gT('This archive contains a PDF file of the survey, the queXML file of the survey and a queXF banding XML file which can be used with queXF: http://quexf.sourceforge.net/ for processing scanned surveys.'));\n\n\n            Yii::app()->loadLibrary('admin.pclzip');\n            $zipfile = Yii::app()->getConfig(\"tempdir\").DIRECTORY_SEPARATOR.\"quexmlpdf_{$qid}_{$lang}.zip\";\n            $z = new PclZip($zipfile);\n            $z->create($zipdir, PCLZIP_OPT_REMOVE_PATH, $zipdir);\n\n            unlink($f1);\n            unlink($f2);\n            unlink($f3);\n            unlink($f4);\n            unlink($f5);\n            rmdir($zipdir);\n\n            $fn = \"quexmlpdf_{$qid}_{$lang}.zip\";\n            $this->_addHeaders($fn, \"application/zip\", 0);\n            header('Content-Transfer-Encoding: binary');\n\n            // load the file to send:\n            readfile($zipfile);\n            unlink($zipfile);\n        }\n    }\n\n\n    /**\n     * Get a Zipped version of  survey print version in all languages\n     * (including the template html assets)\n     *\n     * @param integer $iSurveyID Survey ID\n     * @param bool $readFile Whether we read the file for direct download (or not as in massive actions)\n     * @return string\n     */\n    private function _exportPrintableHtmls($iSurveyID, $readFile = true)\n    {\n        $oSurvey = Survey::model()->findByPk($iSurveyID);\n        $assetsDir = substr(Template::getTemplateURL($oSurvey->template), 1);\n        $fullAssetsDir = Template::getTemplatePath($oSurvey->template);\n        $aLanguages = $oSurvey->getAllLanguages();\n\n        Yii::import('application.helpers.common_helper', true);\n        $zipdir = createRandomTempDir();\n\n        $fn = \"printable_survey_\".preg_replace('([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])','',$oSurvey->currentLanguageSettings->surveyls_title).\"_{$oSurvey->primaryKey}.zip\";\n\n        $tempdir = Yii::app()->getConfig(\"tempdir\");\n        $zipfile = \"$tempdir/\".$fn;\n\n        Yii::app()->loadLibrary('admin.pclzip');\n        $z = new PclZip($zipfile);\n        $z->create($zipdir, PCLZIP_OPT_REMOVE_PATH, $zipdir);\n        $z->add($fullAssetsDir, PCLZIP_OPT_REMOVE_PATH, $fullAssetsDir, PCLZIP_OPT_ADD_PATH, $assetsDir);\n\n        // Store current language\n        $siteLanguage = Yii::app()->language;\n        foreach ($aLanguages as $language) {\n            $file = $this->_exportPrintableHtml($oSurvey, $language, $tempdir);\n            $z->add($file, PCLZIP_OPT_REMOVE_PATH, $tempdir);\n            unlink($file);\n        }\n        // set language back (get's changed in loop above)\n        Yii::app()->language = $siteLanguage;\n\n        $this->_addHeaders($fn, \"application/zip\", 0);\n        // if ($readFile) {\n            header('Content-Transfer-Encoding: binary');\n            header(\"Content-disposition: attachment; filename=\\\"\".$fn.\"\\\"\");\n            readfile($zipfile);\n            unlink($zipfile);\n            Yii::app()->end();\n        // }\n        //return $zipfile;\n\n    }\n\n    /**\n     * Get a the printable html questionnaire in specified language and store\n     * the file in the specified directory\n     *\n     * @param Survey $oSurvey\n     * @param string $language\n     * @param string $tempdir the directory the file will be stored in\n     * @return string File name where the data is stored\n     */\n    private function _exportPrintableHtml($oSurvey, $language, $tempdir)\n    {\n        $printableSurvey = new printablesurvey();\n\n        $response = $printableSurvey->index($oSurvey->primaryKey, $language, true);\n\n        $file = \"$tempdir/questionnaire_{$oSurvey->getPrimaryKey()}_{$language}.html\";\n\n        // remove first slash to get local path for local storage for template assets\n        $templateDir = Template::getTemplateURL($oSurvey->template);\n        $response = str_replace($templateDir, substr($templateDir, 1), $response);\n\n        file_put_contents($file, $response);\n        return $file;\n\n    }\n\n    /**\n     * Generate an TSV (tab-separated value) file for the survey structure\n     * @param type $surveyid\n     */\n    private function _exporttsv($surveyid)\n    {\n        $fn = \"limesurvey_survey_$surveyid.txt\";\n        header(\"Content-Type: text/tab-separated-values charset=UTF-8\");\n        header(\"Content-Disposition: attachment; filename=$fn\");\n        header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); // Date in the past\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Pragma: public\"); // HTTP/1.0\n\n        tsvSurveyExport($surveyid);\n    }\n\n    /**\n     * @param string $content_type\n     */\n    private function _addHeaders($filename, $content_type, $expires, $pragma = \"public\")\n    {\n        header(\"Content-Type: {$content_type}; charset=UTF-8\");\n        header(\"Content-Disposition: attachment; filename={$filename}\");\n        header(\"Expires: {$expires}\"); // Date in the past\n        header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Pragma: {$pragma}\"); // HTTP/1.0\n    }\n\n    private function _xmlToJson($fileContents)\n    {\n        $bOldEntityLoaderState = libxml_disable_entity_loader(true); // @see: http://phpsecurity.readthedocs.io/en/latest/Injection-Attacks.html#xml-external-entity-injection\n\n        $fileContents          = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $fileContents);\n        $fileContents          = trim(str_replace('\"', \"'\", $fileContents));\n        $simpleXml             = simplexml_load_string($fileContents, 'SimpleXMLElement', LIBXML_NOCDATA);\n        $json                  = json_encode($simpleXml);\n\n        libxml_disable_entity_loader($bOldEntityLoaderState); // Put back entity loader to its original state, to avoid contagion to other applications on the server\n        return $json;\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param string $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = 'export', $aViewUrls = array(), $aData = array(), $sRenderFile = false)\n    {\n        $aData['display']['menu_bars']['gid_action'] = 'exportstructureGroup';\n        parent::_renderWrappedTemplate($sAction, $aViewUrls, $aData, $sRenderFile);\n    }\n}\n"], "filenames": ["application/controllers/admin/export.php"], "buggy_code_start_loc": [921], "buggy_code_end_loc": [921], "fixing_code_start_loc": [922], "fixing_code_end_loc": [923], "type": "CWE-22", "message": "The downloadZip function in application/controllers/admin/export.php in LimeSurvey through 3.16.1+190225 allows a relative path.", "other": {"cve": {"id": "CVE-2019-9960", "sourceIdentifier": "cve@mitre.org", "published": "2019-03-24T01:29:00.213", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The downloadZip function in application/controllers/admin/export.php in LimeSurvey through 3.16.1+190225 allows a relative path."}, {"lang": "es", "value": "La funci\u00f3n downloadZip en application/controllers/admin/export.php en LimeSurvey, hasta la versi\u00f3n 3.16.1+190225, permite una ruta relativa."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.16.1\\+190225", "matchCriteriaId": "5A5A7AE5-3991-4354-8BCF-F4D791870CF7"}]}]}], "references": [{"url": "https://github.com/LimeSurvey/LimeSurvey/commit/1ed10d3c423187712b8f6a8cb2bc9d5cc3b2deb8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/1ed10d3c423187712b8f6a8cb2bc9d5cc3b2deb8"}}