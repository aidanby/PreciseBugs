{"buggy_code": ["<?php\nclass PEAR_Bug_Accountrequest\n{\n    var $dbh;\n    var $id;\n    var $created_on;\n    var $handle;\n    var $salt;\n    var $email;\n\n    function __construct($handle = false)\n    {\n        $this->dbh = &$GLOBALS['dbh'];\n        if ($handle) {\n            $this->handle = $handle;\n        } else {\n            $this->handle = isset($GLOBALS['auth_user']) ? $GLOBALS['auth_user']->handle : false;\n        }\n        $this->cleanOldRequests();\n    }\n\n    function pending()\n    {\n        if (!$this->handle) {\n            return false;\n        }\n\n        $sql = 'SELECT handle FROM bug_account_request WHERE handle = ?';\n        $request = $this->dbh->getOne($sql, array($this->handle));\n\n        if ($request) {\n            return true;\n        }\n        return false;\n    }\n\n    function sendEmail()\n    {\n        if (!$this->handle) {\n            throw new Exception('Internal fault: user was not set when sending email,\n                                please report to ' . PEAR_DEV_EMAIL);\n        }\n\n        $sql  = 'SELECT salt FROM bug_account_request WHERE handle = ?';\n        $salt = $this->dbh->getOne($sql, array($this->handle));\n        if (!$salt) {\n            throw new Exception('No such handle ' .\n            $this->handle . ' found, cannot send confirmation email');\n        }\n\n        $sql   = 'SELECT email FROM bug_account_request WHERE salt = ?';\n        $email = $this->dbh->getOne($sql, array($salt));\n        if (!$email) {\n            throw new Exception('No such salt found, cannot send confirmation email');\n        }\n        $mailData = array(\n            'salt' => $salt,\n        );\n        require_once 'Damblan/Mailer.php';\n        $mailer = Damblan_Mailer::create('pearweb_account_request_bug', $mailData);\n        $additionalHeaders['To'] = $email;\n        PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n        if (!DEVBOX) {\n            $e = $mailer->send($additionalHeaders);\n        }\n        PEAR::popErrorHandling();\n        if (!DEVBOX && PEAR::isError($e)) {\n            throw new Exception('Cannot send confirmation email: ' . $e->getMessage());\n        }\n        return true;\n    }\n\n    function _makeSalt($handle)\n    {\n        list($usec, $sec) = explode(' ', microtime());\n        return md5($handle . ((float)$usec + (float)$sec));\n    }\n\n    function find($salt)\n    {\n        if (!$salt) {\n            return false;\n        }\n        $request = $this->dbh->getRow('\n            SELECT id, created_on, salt, handle, email\n            FROM bug_account_request\n            WHERE salt = ?', array($salt), DB_FETCHMODE_ASSOC);\n\n        if (count($request) > 0) {\n            foreach ($request as $field => $value) {\n                $this->$field = $value;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Adds a request in the DB\n     *\n     * @return string salt\n     */\n    function addRequest($email)\n    {\n        $salt = $this->_makeSalt($email);\n        $handle = '#' . substr($salt, 0, 19);\n        $created_on = gmdate('Y-m-d H:i:s');\n\n        $test = $this->dbh->getOne('SELECT email from users where email = ?', array($email));\n        if ($test === $email) {\n            return PEAR::raiseError('Email is already in use for an existing account');\n        }\n        $test = $this->dbh->getOne('SELECT email from bug_account_request where email = ?',\n            array($email));\n        if ($test === $email) {\n            // re-use existing request\n            $salt = $this->dbh->getOne('SELECT salt FROM bug_account_request WHERE email = ?',\n                array($email));\n            $this->find($salt);\n            return $salt;\n        }\n        $query = 'INSERT INTO bug_account_request (created_on, handle, email, salt)\n        VALUES (?, ?, ?, ?)';\n\n        $res = $this->dbh->query($query, array($created_on, $handle, $email, $salt));\n        if (DB::isError($res)) {\n            return $res;\n        }\n\n        $sql = 'SELECT handle FROM bug_account_request WHERE salt = ?';\n        $this->handle = $this->dbh->getOne($sql, array($salt));\n        return $salt;\n    }\n\n    function deleteRequest()\n    {\n        $query = 'DELETE FROM bug_account_request WHERE salt = ?';\n        return $this->dbh->query($query, array($this->salt));\n    }\n\n    function validateRequest($handle, $password, $password2, $name)\n    {\n        $errors = array();\n        if (empty($handle) || !preg_match('/^[0-9a-z_]{2,20}\\z/', $handle)) {\n            $errors[] = 'Username is invalid.';\n            $display_form = true;\n        }\n\n        if ($password == md5('') || empty($password)) {\n            $errors[] = 'Password must not be empty';\n        }\n        if ($password !== $password2) {\n            $errors[] = 'Passwords do not match';\n        }\n\n        include_once 'pear-database-user.php';\n        if (user::exists($handle)) {\n            $errors[] = 'User name \"' . $handle .\n                '\" already exists, please choose another user name';\n        }\n\n        $name_parts = explode(' ', $name, 2);\n        if (count($name_parts) == 2) {\n            $firstname = $name_parts[0];\n            $lastname = $name_parts[1];\n        } else {\n            $firstname = $name_parts[0];\n            $lastname = null;\n        }\n\n        // First- and lastname must be longer than 1 character\n        if (strlen($firstname) == 1) {\n            $errors[] = 'Your firstname appears to be too short.';\n        }\n        if (strlen($lastname) == 1) {\n            $errors[] = 'Your lastname appears to be too short.';\n        }\n\n        // No names with only uppercase letters\n        if ($firstname === strtoupper($firstname)) {\n            $errors[] = 'Your firstname must not consist of only uppercase letters.';\n        }\n        if ($lastname === strtoupper($lastname)) {\n            $errors[] = 'Your lastname must not consist of only uppercase letters.';\n        }\n        return $errors;\n    }\n\n    function confirmRequest($handle, $password, $name)\n    {\n        $sql = 'SELECT handle FROM users WHERE handle = ?';\n        if ($handle == $this->dbh->getOne($sql, array($handle))) {\n            $id = $this->dbh->nextId(\"karma\");\n\n            $query = 'INSERT INTO karma VALUES (?, ?, ?, ?, NOW())';\n            $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.bug', 'pearweb'));\n            return true;\n        }\n\n        list($firstname, $lastname) = explode(' ', $name, 2);\n        $data = array(\n            'handle'     => $handle,\n            'firstname'  => $firstname,\n            'lastname'   => $lastname,\n            'email'      => $this->email,\n            'purpose'    => 'bug tracker',\n            'password'   => $password,\n            'password2'  => $password,\n            'purpose'    => 'Open/Comment on bugs',\n            'moreinfo'   => 'Automatic Account Request',\n            'homepage'   => '',\n        );\n\n        include_once 'pear-database-user.php';\n        $useradd = user::add($data, true, true);\n        if ($useradd !== true) {\n            return $useradd;\n        }\n\n        $sql = 'SELECT handle from bug_account_request WHERE salt = ?';\n        $temphandle = $this->dbh->getOne($sql, array($this->salt));\n        // update all relevant records to the new handle\n        $this->dbh->query('UPDATE bugdb_comments set reporter_name = ? WHERE handle = ?', array($name, $temphandle));\n        $this->dbh->query('UPDATE bugdb set reporter_name = ? WHERE handle = ?', array($name, $temphandle));\n        $this->dbh->query('UPDATE users set handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb set registered = 1, handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb_comments set handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb_patchtracker set developer = ? WHERE developer = ?', array($handle, $temphandle));\n        $this->handle = $handle;\n        // activate the handle and grant karma\n        // implicitly without human intervention\n        // copied from the user class and Damblan_Karma\n\n        include_once 'pear-database-user.php';\n        $user = user::info($handle, null, 0);\n        if (!isset($user['registered'])) {\n            return false;\n        }\n        @$arr = unserialize($user['userinfo']);\n\n        include_once 'pear-database-note.php';\n        note::removeAll($handle);\n\n        $data = array();\n        $data['registered'] = 1;\n        $data['password']   = $password;\n        $data['name']       = $name;\n        if (is_array($arr)) {\n            $data['userinfo'] = $arr[1];\n        }\n        $data['create']   = gmdate('Y-m-d');\n        $data['createBy'] = SITE . 'web';\n        $data['handle']   = $handle;\n\n        user::update($data, true);\n\n        $query = 'INSERT INTO karma VALUES (?, ?, ?, ?, NOW())';\n\n        $id = $this->dbh->nextId('karma');\n        $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.bug', SITE . 'web'));\n        $id = $this->dbh->nextId('karma');\n        $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.voter', SITE . 'web'));\n\n        if (!DB::isError($sth)) {\n            require_once 'bugs/pear-bugs-utils.php';\n            $pbu = new PEAR_Bugs_Utils;\n            note::add($this->handle, 'Account opened', SITE . 'web');\n            $bugs = $this->dbh->getAll('SELECT * FROM bugdb WHERE handle = ?',\n                array($this->handle), DB_FETCHMODE_ASSOC);\n            foreach ($bugs as $bug) {\n                $this->sendBugEmail($bug);\n            }\n            $patches = $this->dbh->getAll('SELECT bugdb.package_name, bugdb_patchtracker.*\n                FROM bugdb_patchtracker, bugdb\n                WHERE bugdb_patchtracker.developer = ?\n                    AND bugdb.id = bugdb_patchtracker.bugdb_id', array($this->handle),\n                    DB_FETCHMODE_ASSOC);\n            foreach ($patches as $patch) {\n                $pbu->sendPatchEmail($patch);\n            }\n            $bugs = $this->dbh->getAll('SELECT bugdb_comments.email,bugdb_comments.comment,\n                    bugdb_comments.reporter_name, bugdb.id,\n                    bugdb.bug_type,bugdb.package_name,bugdb.sdesc,\n                    bugdb.ldesc,bugdb.php_version, bugdb.php_os,bugdb.status,\n                    bugdb.assign,bugdb.package_version\n                 FROM bugdb_comments, bugdb\n                 WHERE bugdb.id = bugdb_comments.bug AND\n                 bugdb_comments.handle = ?',\n                array($this->handle), DB_FETCHMODE_ASSOC);\n            foreach ($bugs as $bug) {\n                $this->sendBugCommentEmail($bug);\n            }\n            $msg = \"Your PEAR bug tracker account has been opened.\\n\"\n                . \"Bugs you have opened will now be displayed, and you can\\n\"\n                . \"add new comments to existing bugs\";\n            $xhdr = \"From: \" . PEAR_WEBMASTER_EMAIL;\n            if (!DEVBOX) {\n                mail($user['email'], \"Your PEAR Bug Tracker Account Request\", $msg, $xhdr, \"-f \" . PEAR_BOUNCE_EMAIL);\n            }\n            $this->deleteRequest();\n            return true;\n        }\n\n        return false;\n    }\n\n    function listRequests()\n    {\n    }\n\n    function cleanOldRequests()\n    {\n        $old = gmdate('Y-m-d', strtotime('-1 Day'));\n        $query = 'SELECT handle FROM bug_account_request WHERE created_on < ?';\n        $all = $this->dbh->getAll($query, array($old));\n        require_once 'bugs/patchtracker.php';\n        $p = new Bugs_Patchtracker;\n        // purge reserved usernames as well as their account requests\n        if (is_array($all)) {\n            foreach ($all as $data) {\n                $this->dbh->query('\n                    DELETE FROM users WHERE handle = ?\n                ', array($data[0]));\n                $this->dbh->query('\n                    DELETE FROM bugdb WHERE handle = ?\n                ', array($data[0]));\n                $this->dbh->query('\n                    DELETE FROM bugdb_comments WHERE handle = ?\n                ', array($data[0]));\n                $sql = 'SELECT * FROM bugdb_patchtracker WHERE developer = ?';\n                $patches = $this->dbh->getAll($sql, array($data[0]), DB_FETCHMODE_ASSOC);\n                foreach ($patches as $patch) {\n                    $p->detach($patch['bugdb_id'], $patch['patch'], $patch['revision']);\n                }\n            }\n        }\n        $query = 'DELETE FROM bug_account_request WHERE created_on < ?';\n        // purge out-of-date account requests\n        return $this->dbh->query($query, array($old));\n    }\n\n    function sendBugCommentEmail($bug)\n    {\n        include_once 'pear-bugs-utils.php';\n        $pbu = new PEAR_Bugs_Utils;\n        $ncomment = trim($bug['comment']);\n        $tla = array(\n            'Open'        => 'Opn',\n            'Bogus'       => 'Bgs',\n            'Feedback'    => 'Fbk',\n            'No Feedback' => 'NoF',\n            'Wont fix'    => 'WFx',\n            'Duplicate'   => 'Dup',\n            'Critical'    => 'Ctl',\n            'Assigned'    => 'Asn',\n            'Analyzed'    => 'Ana',\n            'Verified'    => 'Ver',\n            'Suspended'   => 'Sus',\n            'Closed'      => 'Csd',\n            'Spam'        => 'Spm',\n        );\n        $types = array(\n            'Bug'                     => 'Bug',\n            'Feature/Change Request'  => 'Req',\n            'Documentation Problem'   => 'Doc',\n        );\n\n        $headers = $text = array();\n\n        /* Default addresses */\n        list($mailto,$mailfrom, $Bcc) = $pbu->getPackageMail($bug['package_name'], $bug['id']);\n\n        $headers[] = array(\" ID\", $bug['id']);\n\n        $headers[] = array(\" Comment by\", $this->handle);\n        $from = \"\\\"$this->handle\\\" <$this->email>\";\n\n        $prefix = \" \";\n        if ($f = $pbu->spamProtect($this->email, 'text')) {\n            $headers[] = array($prefix.'Reported By', $f);\n        }\n\n        $fields = array(\n            'sdesc'            => 'Summary',\n            'status'           => 'Status',\n            'bug_type'         => 'Type',\n            'package_name'     => 'Package',\n            'php_os'           => 'Operating System',\n            'package_version'  => 'Package Version',\n            'php_version'      => 'PHP Version',\n            'assign'           => 'Assigned To'\n        );\n\n        foreach ($fields as $name => $desc) {\n            $prefix = \" \";\n            /* only fields that are set get added. */\n            if ($f = $bug[$name]) {\n                $headers[] = array($prefix . $desc, $f);\n            }\n        }\n\n        # make header output aligned\n        $actlength = $maxlength = 0;\n        foreach ($headers as $v) {\n            $actlength = strlen($v[0]) + 1;\n            $maxlength = (($maxlength < $actlength) ? $actlength : $maxlength);\n        }\n\n        # align header content with headers (if a header contains\n        # more than one line, wrap it intelligently)\n        $header_text = \"\";\n        $spaces = str_repeat(\" \", $maxlength + 1);\n        foreach ($headers as $v) {\n            $hcontent = wordwrap($v[1], 72-$maxlength, \"\\n$spaces\"); # wrap and indent\n            $hcontent = rtrim($hcontent); # wordwrap may add spacer to last line\n            $header_text .= str_pad($v[0] . \":\", $maxlength) . \" \" . $hcontent . \"\\n\";\n        }\n\n        if ($ncomment) {\n            $text[] = \" New Comment:\\n\\n\".$ncomment;\n        }\n\n        $text[] = $pbu->getOldComments($bug['id'], empty($ncomment));\n\n        /* format mail so it looks nice, use 72 to make piners happy */\n        $wrapped_text = wordwrap(join(\"\\n\",$text), 72);\n\n        /* developer text with headers, previous messages, and edit link */\n        $dev_text = 'Edit report at ' .\n                    \"http://pear.php.net/bugs/bug.php?id=$bug[id]&edit=1\\n\\n\" .\n                    $header_text .\n                    $wrapped_text .\n                    \"\\n-- \\nEdit this bug report at \" .\n                    \"http://pear.php.net/bugs/bug.php?id=$bug[id]&edit=1\\n\";\n\n        $user_text = $dev_text;\n\n        $subj = $types[$bug['bug_type']];\n\n        $new_status = $bug['status'];\n\n        $subj .= \" #{$bug['id']} [Com]: \";\n\n        # the user gets sent mail with an envelope sender that ignores bounces\n        if (DEVBOX === false) {\n            @mail($bug['email'],\n                  \"[PEAR-BUG] \" . $subj . $bug['sdesc'],\n                  $user_text,\n                  \"From: PEAR Bug Database <$mailfrom>\\n\".\n                  \"Bcc: $Bcc\\n\" .\n                  \"X-PHP-Bug: $bug[id]\\n\".\n                  \"In-Reply-To: <bug-$bug[id]@pear.php.net>\",\n                  \"-f \". PEAR_BOUNCE_EMAIL);\n            # but we go ahead and let the default sender get used for the list\n\n            @mail($mailto,\n                  \"[PEAR-BUG] \" . $subj . $bug['sdesc'],\n                  $dev_text,\n                  \"From: $from\\n\".\n                  \"X-PHP-Bug: $bug[id]\\n\".\n                  \"X-PHP-Type: \"       . $bug['bug_type']    . \"\\n\" .\n                  \"X-PHP-PackageVersion: \"    . $bug['package_version'] . \"\\n\" .\n                  \"X-PHP-Version: \"    . $bug['php_version'] . \"\\n\" .\n                  \"X-PHP-Category: \"   . $bug['package_name']    . \"\\n\" .\n                  \"X-PHP-OS: \"         . $bug['php_os']      . \"\\n\" .\n                  \"X-PHP-Status: \"     . $new_status . \"\\n\" .\n                  \"In-Reply-To: <bug-$bug[id]@pear.php.net>\",\n                  \"-f \" . PEAR_BOUNCE_EMAIL);\n        }\n    }\n\n    function sendBugEmail($buginfo)\n    {\n        $report  = '';\n        $report .= 'From:             ' . $this->handle . \"\\n\";\n        $report .= 'Operating system: ' . $buginfo['php_os'] . \"\\n\";\n        $report .= 'Package version:  ' . $buginfo['package_version'] . \"\\n\";\n        $report .= 'PHP version:      ' . $buginfo['php_version'] . \"\\n\";\n        $report .= 'Package:          ' . $buginfo['package_name'] . \"\\n\";\n        $report .= 'Bug Type:         ' . $buginfo['bug_type'] . \"\\n\";\n        $report .= 'Bug description:  ';\n\n        $fdesc = $buginfo['ldesc'];\n        $sdesc = $buginfo['sdesc'];\n\n        $ascii_report  = \"$report$sdesc\\n\\n\" . wordwrap($fdesc);\n        $ascii_report .= \"\\n-- \\nEdit bug report at \";\n        $ascii_report .= \"http://\" . PEAR_CHANNELNAME . \"/bugs/bug.php?id=$buginfo[id]&edit=\";\n\n        include_once 'bugs/pear-bugs-utils.php';\n        $pbu = new PEAR_Bugs_Utils;\n        list($mailto, $mailfrom) = $pbu->getPackageMail($buginfo['package_name']);\n\n        $email = $this->email;\n        $protected_email  = '\"' . $pbu->spamProtect($email, 'text') . '\"';\n        $protected_email .= '<' . $mailfrom . '>';\n\n        if ((!isset($email) || !isset($mailfrom)) && (isset($buginfo['reporter_name']))) {\n            $protected_email = '\"' . $buginfo['reporter_name'] . '\" <' . $pbu->spamProtect($buginfo['email']) . '>';\n        }\n\n        $extra_headers  = 'From: '           . $protected_email . \"\\n\";\n        $extra_headers .= 'X-PHP-BugTracker: PEARbug' . \"\\n\";\n        $extra_headers .= 'X-PHP-Bug: '      . $buginfo['id'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Type: '     . $buginfo['bug_type'] . \"\\n\";\n        $extra_headers .= 'X-PHP-PackageVersion: '  . $buginfo['package_version'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Version: '  . $buginfo['php_version'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Category: ' . $buginfo['package_name'] . \"\\n\";\n        $extra_headers .= 'X-PHP-OS: '       . $buginfo['php_os'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Status: Open' . \"\\n\";\n        $extra_headers .= 'Message-ID: <bug-' . $buginfo['id'] . '@' . PEAR_CHANNELNAME . '>';\n\n        $types = array(\n            'Bug'                     => 'Bug',\n            'Feature/Change Request'  => 'Req',\n            'Documentation Problem'   => 'Doc',\n        );\n        $type = @$types[$buginfo['bug_type']];\n\n        if (!DEVBOX) {\n            // mail to package developers\n            @mail($mailto, \"[PEAR-BUG] $buginfo[bug_type] #$buginfo[id] [NEW]: $sdesc\",\n                  $ascii_report . \"1\\n-- \\n\", $extra_headers,\n                  '-f ' . PEAR_BOUNCE_EMAIL);\n            // mail to reporter\n            @mail($email, \"[PEAR-BUG] $buginfo[bug_type] #$buginfo[id]: $sdesc\",\n                  $ascii_report . \"2\\n\",\n                  \"From: \" . PEAR_CHANNELNAME . \" Bug Database <$mailfrom>\\n\" .\n                  \"X-PHP-Bug: $buginfo[id]\\n\" .\n                  \"Message-ID: <bug-$buginfo[id]@\" . PEAR_CHANNELNAME . \">\",\n                  '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n    }\n}\n", "<?php\n\nclass user\n{\n    static function remove($uid)\n    {\n        global $dbh;\n\n        include_once 'pear-database-note.php';\n        note::removeAll($uid);\n\n        include_once 'pear-rest.php';\n        $pear_rest = new pearweb_Channel_REST_Generator(PEAR_REST_PATH, $dbh);\n        $pear_rest->deleteMaintainerREST($uid);\n        $pear_rest->saveAllMaintainersREST();\n        $dbh->query('DELETE FROM users WHERE handle = ?', array($uid));\n        return ($dbh->affectedRows() > 0);\n    }\n\n    static function rejectRequest($uid, $reason)\n    {\n        global $dbh, $auth_user;\n        list($email) = $dbh->getRow('SELECT email FROM users WHERE handle = ?',\n                                    array($uid));\n\n        include_once 'pear-database-note.php';\n        note::add($uid, \"Account rejected: $reason\");\n        $msg = \"Your PEAR account request was rejected by \" . $auth_user->handle . \":\\n\\n\".\n             \"$reason\\n\";\n        $xhdr = 'From: ' . $auth_user->handle . '@php.net';\n        if (!DEVBOX) {\n            mail($email, \"Your PEAR Account Request\", $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n        return true;\n    }\n\n    static function activate($uid, $karmalevel = 'pear.dev')\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh, $auth_user;\n\n        $karma = new Damblan_Karma($dbh);\n\n        $user = user::info($uid, null, 0);\n        if (!isset($user['registered'])) {\n            return false;\n        }\n        @$arr = unserialize($user['userinfo']);\n\n        include_once 'pear-database-note.php';\n        note::removeAll($uid);\n\n        $data = array();\n        $data['registered'] = 1;\n        $data['active']     = 1;\n        /* $data['ppp_only'] = 0; */\n        if (is_array($arr)) {\n            $data['userinfo'] = $arr[1];\n        }\n        $data['created']   = gmdate('Y-m-d H:i');\n        $data['createdby'] = $auth_user->handle;\n        $data['handle']    = $user['handle'];\n\n        user::update($data, true);\n\n        $karma->grant($user['handle'], $karmalevel);\n        if ($karma->has($user['handle'], 'pear.dev')) {\n            include_once 'pear-rest.php';\n            $pear_rest = new pearweb_Channel_REST_Generator(PEAR_REST_PATH, $dbh);\n            $pear_rest->saveMaintainerREST($user['handle']);\n            $pear_rest->saveAllMaintainersREST();\n        }\n\n        include_once 'pear-database-note.php';\n        note::add($uid, \"Account opened\");\n        $msg = \"Your PEAR account request has been opened.\\n\".\n             \"To log in, go to http://\" . PEAR_CHANNELNAME . \"/ and click on \\\"login\\\" in\\n\".\n             \"the top-right menu.\\n\";\n        $xhdr = 'From: ' . $auth_user->handle . '@php.net';\n        if (!DEVBOX) {\n            mail($user['email'], \"Your PEAR Account Request\", $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n        return true;\n    }\n\n    static function isAdmin($handle)\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh;\n        $karma = new Damblan_Karma($dbh);\n        return $karma->has($handle, 'pear.admin');\n    }\n\n    static function isQA($handle)\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh;\n        $karma = new Damblan_Karma($dbh);\n        return $karma->has($handle, 'pear.qa');\n    }\n\n    static function exists($handle)\n    {\n        global $dbh;\n        $sql = 'SELECT handle FROM users WHERE handle = ?';\n        $res = $dbh->query($sql, array($handle));\n        return ($res->numRows() > 0);\n    }\n\n    static function maintains($user, $pkgid, $role = 'any')\n    {\n        global $dbh;\n        include_once 'pear-database-package.php';\n\n        $package_id = package::info($pkgid, 'id');\n        if ($role == 'any') {\n            return $dbh->getOne('SELECT role FROM maintains WHERE handle = ? '.\n                                'AND package = ?', array($user, $package_id));\n        }\n\n        if (is_array($role)) {\n            $res = $dbh->getOne('SELECT role FROM maintains WHERE handle = ? AND package = ? '.\n                                'AND role IN (\"' . implode('\", \"', $role) . '\")', array($user, $package_id));\n            return $res;\n        }\n\n        return $dbh->getOne('SELECT role FROM maintains WHERE handle = ? AND package = ? '.\n                            'AND role = ?', array($user, $package_id, $role));\n    }\n\n    static function getPackages($user, $onlyApprovedPackages = false)\n    {\n        global $dbh;\n        $query = 'SELECT p.id, p.name, m.role, m.active'\n            . ' FROM packages p, maintains m'\n            . ' WHERE m.handle = ? AND p.id = m.package AND p.package_type = ?'\n            . (($onlyApprovedPackages) ? ' AND approved = 1' : '')\n            . ' ORDER BY p.name';\n\n        return $dbh->getAll($query, array($user, SITE));\n    }\n\n    static function getProposals($user)\n    {\n        global $dbh;\n\n        $query = 'SELECT id, pkg_name, status,'\n            . ' draft_date, proposal_date, vote_date'\n            . ' FROM package_proposals'\n            . ' WHERE user_handle = ? ORDER BY draft_date ASC';\n\n        return $dbh->getAll($query, array($user));\n    }\n\n    static function info($user, $field = null, $registered = true, $hidePassword = true)\n    {\n        global $dbh;\n        \n        if (!$dbh) {\n            return null;\n        }\n\n        $handle = strpos($user, '@') ? 'email' : 'handle';\n\n        if ($field === null) {\n            $sql  = 'SELECT * FROM users WHERE ' . $handle . ' = ?';\n            $data = array($user);\n            if ($registered !== 'any') {\n                $sql.= ' AND registered = ?';\n                $data[] = $registered === true ? '1' : '0';\n            }\n\n            $row = $dbh->getRow($sql, $data, DB_FETCHMODE_ASSOC);\n\n            if ($hidePassword) {\n                unset($row['password']);\n            }\n            return $row;\n        }\n\n        if (($field == 'password' && $hidePassword) || preg_match('/[^0-9a-z]/', $user)) {\n            return null;\n        }\n\n        $sql = 'SELECT ! FROM users WHERE handle = ?';\n        $data = array($field, $user);\n        if ($registered !== 'any') {\n            $sql.= ' AND registered = ?';\n            $data[] = $registered === true ? '1' : '0';\n        }\n\n        return $dbh->getRow($sql, $data, DB_FETCHMODE_ASSOC);\n    }\n\n    static function listAll($registered_only = true)\n    {\n        global $dbh;\n        $query = 'SELECT * FROM users';\n        if ($registered_only === true) {\n            $query .= ' WHERE registered = 1';\n        }\n        $query .= ' ORDER BY handle';\n        return $dbh->getAll($query, null, DB_FETCHMODE_ASSOC);\n    }\n\n    static function listRecentUsersByKarma($karma, $limit)\n    {\n        global $dbh;\n        $query = 'SELECT * FROM users u\n                    JOIN karma k ON k.user = u.handle\n                    WHERE k.level = ? \n                    ORDER BY granted_at DESC LIMIT ?';\n\n        return $dbh->getAll($query, array($karma, $limit), DB_FETCHMODE_ASSOC);\n    }\n\n\n    static function listAllHandles($registered_only = true)\n    {\n        global $dbh;\n        $query = 'SELECT handle FROM users';\n        if ($registered_only === true) {\n            $query .= ' WHERE registered = 1';\n        }\n        $query .= ' ORDER BY handle';\n        return $dbh->getAll($query, null, DB_FETCHMODE_ASSOC);\n    }\n\n    /**\n     * Add a new user account\n     *\n     * During most of this method's operation, PEAR's error handling\n     * is set to PEAR_ERROR_RETURN.\n     *\n     * @param array   $data  Information about the user\n     * @param boolean $md5ed true if the password has been hashed already\n     * @param boolean $automatic true if this is an automatic account request\n     *\n     * @return mixed  true if there are no problems, false if sending the\n     *                email failed, 'set error' if DB_storage::set() failed\n     *                or an array of error messages for other problems\n     *\n     * @access public\n     */\n    static function add(&$data, $md5ed = false, $automatic = false)\n    {\n        global $dbh;\n\n        PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n        $errors = array();\n\n        $required = array(\n            'handle'     => 'Username',\n            'firstname'  => 'First Name',\n            'lastname'   => 'Last Name',\n            'email'      => 'Email address',\n            'purpose'    => 'Intended purpose',\n        );\n\n        $name = $data['firstname'] . \" \" . $data['lastname'];\n\n        foreach ($required as $field => $desc) {\n            if (empty($data[$field])) {\n                $data['jumpto'] = $field;\n                $errors[] = 'Please enter ' . $desc;\n            }\n        }\n\n        if (!preg_match(PEAR_COMMON_USER_NAME_REGEX, $data['handle'])) {\n            $errors[] = 'Username must start with a letter and contain'\n                      . ' only letters and digits';\n        }\n\n        // Basic name validation\n\n        // First- and lastname must be longer than 1 character\n        if (strlen($data['firstname']) == 1) {\n            $errors[] = 'Your firstname appears to be too short.';\n        }\n        if (strlen($data['lastname']) == 1) {\n            $errors[] = 'Your lastname appears to be too short.';\n        }\n\n        // No names with only uppercase letters\n        if ($data['firstname'] === strtoupper($data['firstname'])) {\n            $errors[] = 'Your firstname must not consist of only uppercase letters.';\n        }\n        if ($data['lastname'] === strtoupper($data['lastname'])) {\n            $errors[] = 'Your lastname must not consist of only uppercase letters.';\n        }\n\n        if ($data['password'] != $data['password2']) {\n            $data['password'] = $data['password2'] = \"\";\n            $data['jumpto'] = \"password\";\n            $errors[] = 'Passwords did not match';\n        }\n\n        if (!$data['password']) {\n            $data['jumpto'] = \"password\";\n            $errors[] = 'Empty passwords not allowed';\n        }\n\n        $handle = strtolower($data['handle']);\n        $info   = user::info($handle, null, 'any');\n\n        if (is_array($info) && isset($info['created'])) {\n            $data['jumpto'] = \"handle\";\n            $errors[] = 'Sorry, that username is already taken';\n        }\n\n        if ($errors) {\n            $data['display_form'] = true;\n            return $errors;\n        }\n\n        $data['display_form'] = false;\n        $md5pw = $md5ed ? $data['password'] : md5($data['password']);\n        $showemail = @(bool)$data['showemail'];\n        // hack to temporarily embed the \"purpose\" in\n        // the user's \"userinfo\" column\n        $userinfo = serialize(array($data['purpose'], $data['moreinfo']));\n        $set_vars = array(\n            'handle'     => $handle,\n            'name'       => $name,\n            'email'      => $data['email'],\n            'homepage'   => $data['homepage'],\n            'showemail'  => $showemail,\n            'password'   => $md5pw,\n            'registered' => 0,\n            'userinfo'   => $userinfo,\n            'from_site'  => SITE,\n        );\n\n        $dbh->expectError(DB_ERROR_CONSTRAINT);\n        PEAR::pushErrorHandling(PEAR_ERROR_CALLBACK, 'report_warning');\n\n        $sql = '\n            INSERT INTO users\n                (handle, name, email, homepage, showemail, password, registered, userinfo, from_site)\n            VALUES\n                (?, ?, ?, ?, ?, ?, ?, ?, ?)';\n\n        $err = $dbh->query($sql, $set_vars);\n        $dbh->popExpect();\n        if (DB::isError($err)) {\n            return $err;\n        }\n\n        PEAR::popErrorHandling();\n\n        $msg = \"Requested from:   {$_SERVER['REMOTE_ADDR']}\\n\".\n               \"Username:         {$handle}\\n\".\n               \"Real Name:        {$name}\\n\".\n               (isset($data['showemail']) ? \"Email:            {$data['email']}\\n\" : \"\") .\n               \"Purpose:\\n\".\n               \"{$data['purpose']}\\n\\n\".\n               \"To handle: http://{$_SERVER['SERVER_NAME']}/admin/?acreq={$handle}\\n\";\n\n        if ($data['moreinfo']) {\n            $msg .= \"\\nMore info:\\n{$data['moreinfo']}\\n\";\n        }\n\n        $xhdr = \"From: $name <{$data['email']}>\\nMessage-Id: <account-request-{$handle}@\" .\n            PEAR_CHANNELNAME . \">\\n\";\n        // $xhdr .= \"\\nBCC: \" . PEAR_GROUP_EMAIL;\n        $subject = \"PEAR Account Request: {$handle}\";\n\n        $ok = true;\n        if (!DEVBOX && !$automatic && PEAR_CHANNELNAME == 'pear.php.net') {\n            $ok = @mail(PEAR_GROUP_EMAIL, $subject, $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n\n        PEAR::popErrorHandling();\n\n        return $ok;\n    }\n\n    /**\n     * Update user information\n     *\n     * @access public\n     * @param  array User information\n     * @return object|boolean DB error object on failure, true on success\n     */\n    static function update($data, $admin = false)\n    {\n        global $dbh;\n\n        if (!isset($data['handle'])) {\n            return false;\n        }\n\n        $fields = array(\n            'name',\n            'email',\n            'homepage',\n            'showemail',\n            'userinfo',\n            'pgpkeyid',\n            'wishlist',\n            'latitude',\n            'longitude',\n            'active',\n            'password',\n            'from_site',\n        );\n\n        if ($admin) {\n            $fields[] = 'registered';\n            $fields[] = 'created';\n            $fields[] = 'createdby';\n        }\n        $info = user::info($data['handle'], null, 'any');\n        // In case a active value isn't passed in\n        $active = isset($info['active']) ? $info['active'] : true;\n\n        $change_k = $change_v = array();\n        foreach ($data as $key => $value) {\n            if (!in_array($key, $fields)) {\n                continue;\n            }\n            $change_k[] = $key;\n            $change_v[] = $value;\n        }\n\n        $sql = 'UPDATE users SET ' . \"\\n\";\n        foreach ($change_k as $k) {\n            $sql .= $k . ' = ?,' . \"\\n\";\n        }\n        $sql = substr($sql, 0, -2);\n        $sql.= ' WHERE handle = ?';\n\n        $change_v[] = $data['handle'];\n        $err = $dbh->query($sql, $change_v);\n        if (DB::isError($err)) {\n            return $err;\n        }\n\n        if (isset($data['active']) && $data['active'] === 0 && $active) {\n            // this user is completely inactive, so mark all maintains as not active.\n            $dbh->query('UPDATE maintains SET active = 0 WHERE handle = ?', array($info['handle']));\n        }\n        return true;\n    }\n\n    /**\n     * Get recent releases for the given user\n     *\n     * @access public\n     * @param  string Handle of the user\n     * @param  int    Number of releases (default is 10)\n     * @return array\n     */\n    static function getRecentReleases($handle, $n = 10)\n    {\n        global $dbh;\n        $recent = array();\n\n        $query = '\n            SELECT\n                p.id AS id,\n                p.name AS name,\n                p.summary AS summary,\n                r.version AS version,\n                r.releasedate AS releasedate,\n                r.releasenotes AS releasenotes,\n                r.doneby AS doneby,\n                r.state AS state\n            FROM packages p, releases r, maintains m\n            WHERE\n                p.package_type = ?\n                AND p.id = r.package\n                AND p.id = m.package\n                AND m.handle = ?\n            ORDER BY r.releasedate DESC';\n\n        $sth = $dbh->limitQuery($query, 0, $n, array(SITE, $handle));\n        while ($sth->fetchInto($row, DB_FETCHMODE_ASSOC)) {\n            $recent[] = $row;\n        }\n        return $recent;\n    }\n}\n", "<?php\n/**\n * Establishes the procedures, objects and variables used throughout PEPr.\n *\n * The <var>$proposalReviewsMap</var> arrays is defined here.\n *\n * NOTE: Proposal constants are defined in pearweb/include/pear-config.php.\n *\n * This source file is subject to version 3.0 of the PHP license,\n * that is bundled with this package in the file LICENSE, and is\n * available through the world-wide-web at the following URI:\n * http://www.php.net/license/3_0.txt.\n * If you did not receive a copy of the PHP license and are unable to\n * obtain it through the world-wide-web, please send a note to\n * license@php.net so we can mail you a copy immediately.\n *\n * @category  pearweb\n * @package   PEPr\n * @author    Tobias Schlitt <toby@php.net>\n * @author    Daniel Convissor <danielc@php.net>\n * @copyright Copyright (c) 1997-2005 The PHP Group\n * @license   http://www.php.net/license/3_0.txt  PHP License\n * @version   $Id$\n */\n\nglobal $proposalReviewsMap;\n$proposalReviewsMap = array(\n                            'cursory'   => 'Cursory source review',\n                            'deep'      => 'Deep source review',\n                            'test'      => 'Run examples');\n\nclass ppVote\n{\n    var $pkg_prop_id;\n    var $user_handle;\n    var $value;\n    var $reviews = array();\n    var $is_conditional;\n    var $comment;\n    var $timestamp;\n\n    function __construct($dbhResArr)\n    {\n        foreach ($dbhResArr as $name => $value) {\n            $this->$name = $value;\n        }\n    }\n\n    function get(&$dbh, $proposalId, $handle)\n    {\n        $sql = \"SELECT *, UNIX_TIMESTAMP(timestamp) AS timestamp FROM package_proposal_votes WHERE pkg_prop_id = \". $dbh->quoteSmart($proposalId) .\" AND user_handle= \". $dbh->quoteSmart($handle);\n        $res = $dbh->query($sql);\n        if (DB::isError($res)) {\n            return $res;\n        }\n        if (!$res->numRows()) {\n            return null;\n        }\n        $set = $res->fetchRow(DB_FETCHMODE_ASSOC);\n        $set['reviews'] = unserialize($set['reviews']);\n        $vote = new ppVote($set);\n        return $vote;\n    }\n\n    function &getAll(&$dbh, $proposalId)\n    {\n        $sql = \"SELECT *, UNIX_TIMESTAMP(timestamp) AS timestamp FROM package_proposal_votes WHERE pkg_prop_id = \". $dbh->quoteSmart($proposalId) .\" ORDER BY timestamp ASC\";\n        $res = $dbh->query($sql);\n        if (DB::isError($res)) {\n            return $res;\n        }\n        $votes = array();\n        while ($set = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n            $set['reviews'] = unserialize($set['reviews']);\n            $votes[$set['user_handle']] = new ppVote($set);\n        }\n        return $votes;\n    }\n\n    function store($dbh, $proposalId)\n    {\n        if (empty($this->user_handle)) {\n            return PEAR::raiseError(\"Not initialized\");\n        }\n        $sql = \"INSERT INTO package_proposal_votes (pkg_prop_id, user_handle, value, is_conditional, comment, reviews)\n                    VALUES (\". $dbh->quoteSmart($proposalId).\", \".$dbh->quoteSmart($this->user_handle).\", \".$this->value.\", \".(int)$this->is_conditional.\", \".$dbh->quoteSmart($this->comment).\", \".$dbh->quoteSmart(serialize($this->reviews)).\")\";\n        $res = $dbh->query($sql);\n        return $res;\n    }\n\n    function getReviews($humanReadable = false)\n    {\n        if ($humanReadable) {\n            $res = array();\n            if (!empty($this->reviews)) {\n                foreach ((array)$this->reviews as $review) {\n                    $res[] = $GLOBALS['proposalReviewsMap'][$review];\n                }\n            }\n            return $res;\n        }\n        return $this->reviews;\n    }\n\n    function getSum($dbh, $proposalId)\n    {\n        $sql = \"SELECT SUM(value) FROM package_proposal_votes WHERE pkg_prop_id = \".$proposalId.\" GROUP BY pkg_prop_id\";\n        $result = $dbh->getOne($sql);\n        $res['all'] = (is_numeric($result)) ? $result : 0;\n        $sql = \"SELECT SUM(value) FROM package_proposal_votes WHERE pkg_prop_id = \".$proposalId.\" AND is_conditional = 1 GROUP BY pkg_prop_id\";\n        $result = $dbh->getOne($sql);\n        $res['conditional'] = (is_numeric($result)) ? $result : 0;\n        return $res;\n    }\n\n    function getCount($dbh, $proposalId)\n    {\n        $sql = \"SELECT COUNT(user_handle) FROM package_proposal_votes WHERE pkg_prop_id = \".$dbh->quoteSmart($proposalId).\" GROUP BY pkg_prop_id\";\n        $res = $dbh->getOne($sql);\n        return (!empty($res)) ? $res: \" 0\";\n    }\n\n    function hasVoted($dbh, $userHandle, $proposalId)\n    {\n        $sql = \"SELECT count(pkg_prop_id) as votecount FROM package_proposal_votes\n                    WHERE pkg_prop_id = \".$dbh->quoteSmart($proposalId).\" AND user_handle = \".$dbh->quoteSmart($userHandle).\"\n                    GROUP BY pkg_prop_id\";\n        $votes = $dbh->query($sql);\n        return (bool)($votes->numRows());\n    }\n\n}\n", "<?php\nclass Users_PasswordManage\n{\n    var $_dbh;\n    var $_mailer;\n    function __construct()\n    {\n        $this->_dbh = &$GLOBALS['dbh'];\n    }\n\n    /**\n     * Confirm the user's request to reset the password\n     *\n     * @param string $user\n     * @param string $salt\n     * @return array\n     */\n    function confirmReset($user, $salt)\n    {\n        $errors = array();\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $e = $this->_dbh->getOne('SELECT newpassword FROM lostpassword WHERE\n            handle=? AND salt=?', array($user, $salt));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            return array($e->getMessage());\n        }\n\n        if (!$e) {\n            return array('Could not retrieve password based on username/salt combination');\n        }\n\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $e = $this->_dbh->query('UPDATE users set password = ? WHERE handle = ?', array($e, $user));\n        if (!PEAR::isError($e)) {\n            $this->_dbh->query('DELETE FROM lostpassword WHERE handle = ?', array($user));\n        }\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            return array($e->getMessage());\n        }\n\n        return array();\n    }\n\n    /**\n     * Mark a user for password resetting\n     *\n     * @param string $user\n     * @param string $pass1\n     * @param string $pass2\n     * @return array\n     */\n    function resetPassword($user, $pass1, $pass2)\n    {\n        require_once 'Damblan/Mailer.php';\n        $errors = array();\n        $salt = md5(mt_rand(4,13) . $user . time() . $pass1);\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $this->_dbh->query('DELETE FROM lostpassword WHERE handle=?', array($user));\n        $e = $this->_dbh->query('INSERT INTO lostpassword\n            (handle, newpassword, salt, requested)\n            VALUES(?,?,?,NOW())', array($user, md5($pass1), $salt));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            $errors[] = 'Could not change password: ' . $e->getMessage();\n        } else {\n            include_once 'pear-database-user.php';\n            $info = user::info($user);\n            $this->_mailer = Damblan_mailer::create(array(\n        'To'       => array($info['name'] . ' <' . $info['email'] . '>'),\n        'Reply-To' => array('PEAR QA <' . PEAR_QA_EMAIL . '>'),\n        'Subject' => '[PEAR-ACCOUNT-PASSWORD] Your password reset request : %username%',\n        'Body' => 'A request has been made to reset your password for %username%\nat pear.php.net.\n\nIf you intended to reset the password, please navigate to this page:\n  https://' . PEAR_CHANNELNAME . '/account/password-confirm-change.php\nand follow the instructions.  Your password reset code is:\n\n%salt%\n\nIf you have received this email by mistake or did not request a\npassword change, no further action is necessary.  Your password\nwill NOT change until you confirm the change, and it cannot be changed\nwithout the password reset code.  Password change requests are automatically\npurged after 24 hours.\n\nPEAR Quality Assurance.'), array('username' => $user, 'salt' => $salt));\n            $this->_mailer->send();\n        }\n        return $errors;\n    }\n}", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n            case 'askhttpd' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('httpdconf');\n                }\n                return true;\n                break;\n            case 'httpdconf' :\n                return $this->setupHttpdconf($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n                  \n        // for upgrade purposes\n        $updir = '@www-dir@/pear.php.net/sql/.pearweb-upgrade';\n        if (!file_exists($updir)) {\n            if (!mkdir($updir)) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/pear.php.net/sql/pearweb_mdb2schema.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name'] = $answers['database'];\n        $c['create'] = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/pear.php.net/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        \n        $serfile = $updir . $answers['database'] . '-@version@.ser';\n        if (!file_exists($serfile)) {\n            $fp = fopen($serfile, 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            $curdef = unserialize(file_get_contents($updir .\n              $answers['database'] . '-' . $oldversion . '.ser'));\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This helper function parses httpd.conf and adds needed information\n     * for pearweb to run.\n     *\n     * In essence, this takes the contents of docs/apache_setup.txt and\n     * adds them to httpd.conf with paths replaced that are needed to\n     * make the thing work.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function setupHttpdconf($answers)\n    {\n        // TODO handle ports properly\n        $eol = PHP_EOL;\n        if (!realpath($answers['path']) || !file_exists($answers['path'])) {\n            $this->_ui->outputData('No such file: \"' . $answers['path'] . '\"');\n            return false;\n        }\n        $httpdconf = file(realpath($answers['path']));\n        $found = array();\n        foreach ($httpdconf as $num => $line) {\n            $line = trim($line);\n            if (!$line) {\n                continue;\n            }\n            if (strpos($line, 'NameVirtualHost') === 0) {\n                $found['NameVirtualHost'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) start') === 0) {\n                $found['start'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) end') === 0) {\n                $found['end'] = $num;\n            }\n        }\n        if (strtolower($answers['addnamev']) == 'yes') {\n            if (array_key_exists('NameVirtualHost', $found)) {\n                $httpdconf[$found['NameVirtualHost']] =\n                    'NameVirtualHost ' . $answers['namehost'] . $eol;\n            } else {\n                if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n                    $one = array_slice($httpdconf, 0, $found['start'] - 1);\n                    $found['start']++;\n                    $one[] = $eol . 'NameVirtualHost ' . $answers['namehost'] . $eol;\n                    $two = array_slice($httpdconf, $found['start']);\n                    $httpdconf = array_merge($one, $two);\n                } else {\n                    $httpdconf[] = $eol . 'NameVirtualHost ' . $answers['namehost'] . $eol;\n                }\n            }\n        }\n        if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n            $one = array_slice($httpdconf, 0, $found['start'] - 1);\n            $two = array_slice($httpdconf, $found['end'] + 1);\n        } else {\n            $one = $httpdconf;\n            $two = array();\n        }\n\n        // here we go...\n        $middle = array();\n        $middle[] = $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) start' . $eol;\n        $middle[] = '<VirtualHost ' . $answers['namehost'] . '>' . $eol;\n        $middle[] = ' ServerName ' . $answers['pear'] . $eol;\n        $middle[] = $eol;\n        // apache requires all path separators to be \"/\" even on windows\n        $middle[] = ' DocumentRoot ' . str_replace('\\\\', '/', '@www-dir@') . '/pear.php.net' . $eol;\n        $middle[] = ' DirectoryIndex index.php index.html' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' php_value include_path .' . PATH_SEPARATOR .\n            str_replace('\\\\', '/', '@www-dir@')\n            . '/pear.php.net/include' . PATH_SEPARATOR . str_replace('\\\\', '/', '@php-dir@') . $eol;\n        $middle[] = ' php_value auto_prepend_file pear-prepend.php' . $eol;\n        $middle[] = ' php_flag magic_quotes_gpc off' . $eol;\n        $middle[] = ' php_flag magic_quotes_runtime off' . $eol;\n        $middle[] = ' php_flag register_globals Off' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' ErrorDocument 404 /error/404.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Alias /package ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/package-info.php' . $eol;\n        $middle[] = ' Alias /user    ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/account-info.php' . $eol;\n        $middle[] = ' Alias /sidebar/pear.gif ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/gifs/pear_item.gif' . $eol;\n        $middle[] = ' Alias /distributions/manual/chm /var/lib/pear/chm' . $eol;\n        $middle[] = ' Alias /reference /var/lib/pear/apidoc' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RedirectPermanent /download-docs.php          http://'\n            . $answers['pear'] . '/manual/' . $eol;\n        $middle[] = ' RedirectPermanent /rss.php                    http://'\n            . $answers['pear'] . '/feeds/latest.rss' . $eol;\n        $middle[] = ' RedirectPermanent /weeklynews.php             http://'\n            . $answers['pear'] . '/' . $eol;\n        $middle[] = ' RedirectPermanent /support.php                http://'\n            . $answers['pear'] . '/support/' . $eol;\n        $middle[] = ' RedirectPermanent /credits.php                http://'\n            . $answers['pear'] . '/about/credits.php' . $eol;\n        $middle[] = ' RedirectPermanent /pepr/pepr-overview.php     http://'\n            . $answers['pear'] . '/pepr/' . $eol;\n        $middle[] = ' RedirectPermanent /faq.php                    http://'\n            . $answers['pear'] . '/manual/en/faq.php' . $eol;\n        $middle[] = ' RedirectPermanent /doc/index.php              http://'\n            . $answers['pear'] . '/manual/en/' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # xmlrpc.php was removed 1 Jan 2008 and won\\'t come back' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Redirect gone /xmlrpc.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteEngine On' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rules for the RSS feeds' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /feeds/(.+)\\.rss$ /feeds/feeds.php?type=$1' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the API documentation' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /package/([a-zA-Z0-9_]+)/docs/(.+)($/|$) /reference/$1-$2 [PT]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the Bug system' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /bugs/([0-9]+)/*$ /bugs/bug.php?id=$1 [R]\n' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the manual' . $eol;\n        $middle[] = ' # throw pecl doc people to the php manual' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /manual/[a-z]{2}/pecl.([a-zA-Z0-9_-]+)\\.php$ http://www.php.net/$1 [R=301]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' SetEnvIf User-Agent \"MS Search 4\\.0 Robot\\)$\" badrobot' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Directory />' . $eol;\n        $middle[] = '  order deny,allow' . $eol;\n        $middle[] = '  deny from env=badrobot' . $eol;\n        $middle[] = ' </Directory>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /get>' . $eol;\n        $middle[] = '  ForceType application/x-httpd-php' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  Deny From 194.51.105.35' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /manual>' . $eol;\n        $middle[] = '  ErrorDocument 404 /error/404-manual.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /bugs/include>' . $eol;\n        $middle[] = '  deny from all' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /trackback>' . $eol;\n        $middle[] = '  DirectoryIndex trackback.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = '</VirtualHost>' . $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) end' . $eol;\n\n        $one = array_merge($one, $middle);\n        $httpdconf = array_merge($one, $two);\n        $this->_ui->outputData('opening ' . $answers['path'] . ' for writing');\n        $fp = fopen(realpath($answers['path']), 'w');\n        $this->_ui->outputData('writing data...');\n        fwrite($fp, implode('', $httpdconf));\n        fclose($fp);\n        $this->_ui->outputData('...done');\n        return true;\n    }\n}", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_election_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] == 'n') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        //include_once dirname(__FILE__) . 'include/pear-config.php';\n        //$a = MDB2_Schema::factory(PEAR_DATABASE_DSN,\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n        // for upgrade purposes\n        if (!file_exists('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n            '.pearweb-upgrade')) {\n            if (!mkdir('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n                  '.pearweb-upgrade')) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/sql/pearweb_election.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name']      = $answers['database'];\n        $c['create']    = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        if (!file_exists('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-@version@.ser')) {\n            $fp = fopen('@www-dir@/sql/.pearweb-upgrade/' .\n                $answers['database'] . '-@version@.ser', 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            $curdef = unserialize(file_get_contents('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-' . $oldversion . '.ser'));\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n}", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_pepr_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n            case 'askhttpd' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('httpdconf');\n                }\n                return true;\n                break;\n            case 'httpdconf' :\n                return $this->setupHttpdconf($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n        // for upgrade purposes\n        if (!file_exists('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n            '.pearweb-upgrade')) {\n            if (!mkdir('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n                  '.pearweb-upgrade')) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/sql/pearweb_mdb2schema.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name']      = $answers['database'];\n        $c['create']    = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        if (!file_exists('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-@version@.ser')) {\n            $fp = fopen('@www-dir@/sql/.pearweb-upgrade/' .\n                $answers['database'] . '-@version@.ser', 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            $curdef = unserialize(file_get_contents('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-' . $oldversion . '.ser'));\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This helper function parses httpd.conf and adds needed information\n     * for pearweb to run.\n     *\n     * In essence, this takes the contents of docs/apache_setup.txt and\n     * adds them to httpd.conf with paths replaced that are needed to\n     * make the thing work.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function setupHttpdconf($answers)\n    {\n        $eol = defined('PHP_EOL') ? PHP_EOL : (OS_WINDOWS ? \"\\r\\n\" : \"\\n\");\n        if (!realpath($answers['path']) || !file_exists($answers['path'])) {\n            $this->_ui->outputData('No such file: \"' . $answers['path'] . '\"');\n            return false;\n        }\n        $httpdconf = file(realpath($answers['path']));\n        $found = array();\n        foreach ($httpdconf as $num => $line) {\n            $line = trim($line);\n            if (!$line) {\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) start') === 0) {\n                $found['start'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) end') === 0) {\n                $found['end'] = $num;\n            }\n        }\n        if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n            $one = array_slice($httpdconf, 0, $found['start'] - 1);\n            $two = array_slice($httpdconf, $found['end'] + 1);\n        } else {\n            $one = $httpdconf;\n            $two = array();\n        }\n        // here we go...\n        $middle = array();\n        $middle[] = $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) start' . $eol;\n        $middle[] = '<VirtualHost ' . $answers['namehost'] . '>' . $eol;\n        $middle[] = ' ServerName ' . $answers['pear'] . $eol;\n        $middle[] = $eol;\n        // apache requires all path separators to be \"/\" even on windows\n        $middle[] = ' DocumentRoot ' . str_replace('\\\\', '/', '@www-dir@') . '/public_html' . $eol;\n        $middle[] = ' DirectoryIndex index.php index.html' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' php_value include_path .' . PATH_SEPARATOR .\n            str_replace('\\\\', '/', '@www-dir@')\n            . '/include' . PATH_SEPARATOR . str_replace('\\\\', '/', '@php-dir@') . $eol;\n        $middle[] = ' php_value auto_prepend_file pear-prepend.php' . $eol;\n        $middle[] = ' php_flag magic_quotes_gpc off' . $eol;\n        $middle[] = ' php_flag magic_quotes_runtime off' . $eol;\n        $middle[] = ' php_flag register_globals Off' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' ErrorDocument 404 /error/404.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Alias /package ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/package-info.php' . $eol;\n        $middle[] = ' Alias /user    ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/account-info.php' . $eol;\n        $middle[] = ' Alias /sidebar/pear.gif ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/gifs/pear_item.gif' . $eol;\n        $middle[] = ' Alias /distributions/manual/chm /var/lib/pear/chm' . $eol;\n        $middle[] = ' Alias /reference /var/lib/pear/apidoc' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RedirectPermanent /download-docs.php          http://'\n            . $answers['pear'] . '/manual/' . $eol;\n        $middle[] = ' RedirectPermanent /rss.php                    http://'\n            . $answers['pear'] . '/feeds/latest.rss' . $eol;\n        $middle[] = ' RedirectPermanent /weeklynews.php             http://'\n            . $answers['pear'] . '/' . $eol;\n        $middle[] = ' RedirectPermanent /support.php                http://'\n            . $answers['pear'] . '/support/' . $eol;\n        $middle[] = ' RedirectPermanent /credits.php                http://'\n            . $answers['pear'] . '/about/credits.php' . $eol;\n        $middle[] = ' RedirectPermanent /pepr/pepr-overview.php     http://'\n            . $answers['pear'] . '/pepr/' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteEngine On' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rules for the RSS feeds' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /feeds/(.+)\\.rss$ /feeds/feeds.php?type=$1' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the API documentation' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /package/([a-zA-Z0-9_]+)/docs/(.+)($/|$) /reference/$1-$2 [PT]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the Bug system' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /bugs/([0-9]+)/*$ /bugs/bug.php?id=$1 [R]\n' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the manual' . $eol;\n        $middle[] = ' # throw pecl doc people to the php manual' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  RewriteRule   /manual/[a-z]{2}/pecl.([a-zA-Z0-9_-]+)\\.php$ http://www.php.net/$1 [R=301]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' SetEnvIf User-Agent \"MS Search 4\\.0 Robot\\)$\" badrobot' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Directory />' . $eol;\n        $middle[] = '  order deny,allow' . $eol;\n        $middle[] = '  deny from env=badrobot' . $eol;\n        $middle[] = ' </Directory>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /get>' . $eol;\n        $middle[] = '  ForceType application/x-httpd-php' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  Deny From 194.51.105.35' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /manual>' . $eol;\n        $middle[] = '  ErrorDocument 404 /error/404-manual.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /bugs/include>' . $eol;\n        $middle[] = '  deny from all' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /trackback>' . $eol;\n        $middle[] = '  DirectoryIndex trackback.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = '</VirtualHost>' . $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) end' . $eol;\n        $one = array_merge($one, $middle);\n        $httpdconf = array_merge($one, $two);\n        $this->_ui->outputData('opening ' . $answers['path'] . ' for writing');\n        $fp = fopen(realpath($answers['path']), 'w');\n        $this->_ui->outputData('writing data...');\n        fwrite($fp, implode('', $httpdconf));\n        fclose($fp);\n        $this->_ui->outputData('...done');\n        return true;\n    }\n}", "<?php\n/*\n   +----------------------------------------------------------------------+\n   | PEAR Web site version 1.0                                            |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 2001-2005 The PHP Group                                |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 2.02 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available at through the world-wide-web at                           |\n   | http://www.php.net/license/2_02.txt.                                 |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Authors: Martin Jansen <mj@php.net>                                  |\n   +----------------------------------------------------------------------+\n   $Id$\n*/\n\nredirect_to_https();\nauth_require(true);\nrequire_once 'HTML/Table.php';\n\nif (!empty($_GET['phpinfo'])) {\n    phpinfo();\n    exit();\n}\n\nclass BorderBox\n{\n    function __construct($title, $width = '90%', $indent = '', $cols = 1,\n        $open = false\n    ) {\n        $this->title  = $title;\n        $this->width  = $width;\n        $this->indent = $indent;\n        $this->cols   = $cols;\n        $this->open   = $open;\n        $this->start();\n    }\n\n    function start()\n    {\n        $title = $this->title;\n        if (is_array($title)) {\n            $title = implode('</th><th>', $title);\n        }\n        $i = $this->indent;\n        echo \"<!-- border box starts -->\\n\";\n        echo \"$i<table cellpadding=\\\"0\\\" style=\\\"width: $this->width; border: 0px;\\\">\\n\";\n        echo \"$i <tr>\\n\";\n        echo \"$i  <td>\\n\";\n        echo \"$i   <table cellpadding=\\\"2\\\" style=\\\"width: 100%; border: 0px;\\\">\\n\";\n        echo \"$i    <tr style=\\\"background-color: #CCCCCC;\\\">\\n\";\n        echo \"$i     <th\";\n        if ($this->cols > 1) {\n            echo \" colspan=\\\"$this->cols\\\"\";\n        }\n        echo \">$title</th>\\n\";\n        echo \"$i    </tr>\\n\";\n        if (!$this->open) {\n            echo \"$i    <tr style=\\\"background-color: #FFFFFF;\\\">\\n\";\n            echo \"$i     <td>\\n\";\n        }\n    }\n\n    function end()\n    {\n        $i = $this->indent;\n        if (!$this->open) {\n            echo \"$i     </td>\\n\";\n            echo \"$i    </tr>\\n\";\n        }\n        echo \"$i   </table>\\n\";\n        echo \"$i  </td>\\n\";\n        echo \"$i </tr>\\n\";\n        echo \"$i</table>\\n\";\n        echo \"<!-- border box ends -->\\n\";\n    }\n\n    function horizHeadRow($heading /* ... */)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        echo \"$i     <th style=\\\"vertical-align: top; background-color: #CCCCCC;\\\">$heading</th>\\n\";\n        for ($j = 0; $j < $this->cols-1; $j++) {\n            echo \"$i     <td style=\\\"vertical-align: top; background-color: #E8E8E8\\\">\";\n            $data = @func_get_arg($j + 1);\n            echo !isset($data) ? \"&nbsp;\" : $data;\n            echo \"</td>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n\n    }\n\n    function headRow()\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        for ($j = 0; $j < $this->cols; $j++) {\n            echo \"$i     <th style=\\\"vertical-align: top; background-color: #FFFFFF;\\\">\";\n            $data = @func_get_arg($j);\n            if (empty($data)) {\n                echo '&nbsp;';\n            } else {\n                print $data;\n            }\n            echo \"</th>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n    }\n\n    function plainRow(/* ... */)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        for ($j = 0; $j < $this->cols; $j++) {\n            echo \"$i     <td style=\\\"vertical-align: top; background-color: #FFFFFF;\\\">\";\n            $data = @func_get_arg($j);\n            if (empty($data)) {\n                echo '&nbsp;';\n            } else {\n                print $data;\n            }\n            echo \"</td>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n    }\n\n    function fullRow($text)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        echo \"$i     <td style=\\\"background-color: #E8E8E8;\\\"\";\n        if ($this->cols > 1) {\n            echo \" colspan=\\\"$this->cols\\\"\";\n        }\n        echo \">$text</td>\\n\";\n        echo \"$i    </tr>\\n\";\n\n    }\n}\n\nresponse_header('PEAR Administration');\n\n// {{{ adding and deleting notes\nif (!empty($_REQUEST['cmd'])) {\n    if ($_REQUEST['cmd'] == \"Add note\" && !empty($_REQUEST['note']) && !empty($_REQUEST['id'])) {\n        include_once 'pear-database-note.php';\n        note::add($_REQUEST['id'], $_REQUEST['note']);\n        unset($_REQUEST['cmd']);\n\n    } elseif ($_REQUEST['cmd'] == \"Delete note\" && !empty($_REQUEST['id'])) {\n        include_once 'pear-database-note.php';\n\n        // Delete note\n        note::remove($_REQUEST['id']);\n\n    } elseif ($_REQUEST['cmd'] == \"Open Account\" && !empty($_REQUEST['uid'])) {\n        /**\n         * Open account\n         */\n\n        $karmalevel = (empty($_REQUEST['karma'])) ? 'pear.pepr' : $_REQUEST['karma'];\n        // another hack to remove the temporary \"purpose\" field\n        // from the user's \"userinfo\"\n        include_once 'pear-database-user.php';\n        if (user::activate($_REQUEST['uid'], $karmalevel)) {\n            $uid = strip_tags(htmlspecialchars($_REQUEST['uid']));\n            print \"<p>Opened account $uid...</p>\\n\";\n        }\n\n    } elseif ($_REQUEST['cmd'] == \"Reject Request\" && !empty($_REQUEST['uid'])) {\n        // Reject account request\n        include_once 'pear-database-user.php';\n        if (is_array($_REQUEST['uid'])) {\n            foreach ($_REQUEST['uid'] as $uid) {\n                user::rejectRequest((int) $uid, $_REQUEST['reason']);\n                echo 'Account rejected: ' . (int) $uid . '<br />';\n            }\n\n        } elseif (user::rejectRequest($_REQUEST['uid'], $_REQUEST['reason'])) {\n            print \"<p>Rejected account request for $uid...</p>\\n\";\n        }\n\n    } elseif ($_REQUEST['cmd'] == \"Delete Request\" && !empty($_REQUEST['uid'])) {\n        // Delete account request\n        include_once 'pear-database-user.php';\n        if (is_array($_REQUEST['uid'])) {\n            foreach ($_REQUEST['uid'] as $uid) {\n                user::remove((int) $uid);\n                echo 'Account request deleted: ';\n                echo filter_var($uid, FILTER_SANITIZE_STRING) . '<br />';\n            }\n\n\n        } elseif (user::remove((int) $_REQUEST['uid'])) {\n            print \"<p>Deleted account request for \\\"$uid\\\"...</p>\";\n        }\n    } elseif ($_REQUEST['cmd'] == 'Move'  && !empty($_REQUEST['acreq'])\n        && isset($_REQUEST['from_site'])\n        && in_array($_REQUEST['from_site'], ['pear', 'pecl'])\n    ) {\n        include_once 'pear-database-user.php';\n        $data = array(\n            'handle'    => $_REQUEST['acreq'],\n            'from_site' => $_REQUEST['from_site'],\n        );\n\n        $res = user::update($data);\n        if (DB::isError($res)) {\n            echo 'DB error: ' .  $res->getMessage();\n        } else {\n            $to = strtoupper($_REQUEST['from_site']);\n            echo 'User has been moved to ' . $to;\n        }\n    }\n}\n\n// }}}\n\n// {{{ javascript functions\n\n?>\n<script type=\"text/javascript\">\n<!--\n\nfunction confirmed_goto(url, message) {\n    if (confirm(message)) {\n        location = url;\n    }\n}\n\nfunction confirmed_submit(button, action, required, errormsg) {\n    if (required && required.value == '') {\n        alert(errormsg);\n        return;\n    }\n    if (confirm('Are you sure you want to ' + action + '?')) {\n        button.form.cmd.value = button.value;\n        button.form.submit();\n    }\n}\n\nfunction updateRejectReason(selectObj) {\n    if (selectObj.selectedIndex != 0) {\n        document.forms['account_form'].reason.value = selectObj.options[selectObj.selectedIndex].value;\n    }\n    selectObj.selectedIndex = 0;\n}\n// -->\n</script>\n<?php\n\n// }}}\n\n$self = htmlspecialchars($_SERVER['PHP_SELF']);\n$acreq = isset($_GET['acreq']) ? strip_tags(htmlspecialchars($_GET['acreq'])) : '';\ndo {\n\n    // {{{ \"approve account request\" form\n\n    if (!empty($acreq)) {\n        include_once 'pear-database-user.php';\n        $requser = user::info($acreq, null, false);\n        if (empty($requser['name']) || $requser['from_site'] == 'pecl') {\n            break;\n        }\n        list($purpose, $moreinfo) = @unserialize($requser['userinfo']);\n\n        $bb = new BorderBox('Account request from ' . $requser['name'] . ' &lt;' . $requser['email'] . '&gt;', \"100%\", '', 2, true);\n        $bb->horizHeadRow(\"Requested username:\", $requser['handle']);\n        $bb->horizHeadRow(\"Realname:\", $requser['name']);\n        $bb->horizHeadRow(\"Email address:\", '<a href=\"mailto:' . $requser['email'] . '\">' . $requser['email'] . \"</a>\");\n        $bb->horizHeadRow(\"Purpose of account:\", $purpose);\n        $bb->horizHeadRow(\"More information:\", $moreinfo);\n        $bb->end();\n\n        $i = \"      \";\n        print \"<br />\\n\";\n        print \"$i<form action=\\\"$self\\\" method=\\\"POST\\\">\\n\";\n        print $i . '   <input type=\"hidden\" name=\"id\" value=\"' . $requser['handle'] . \"\\\" />\\n\";\n        print \"$i   <input type=\\\"hidden\\\" name=\\\"acreq\\\" value=\\\"$acreq\\\" />\\n\";\n        print $i . ' <select name=\"from_site\"> ' . \"\\n\";\n        print $i . '  <option value=\"pear\">PEAR</option>' . \"\\n\";\n        print $i . '  <option value=\"pecl\">PECL</option>' . \"\\n\";\n        print $i . ' </select> ' . \"\\n\";\n        print \"$i   <input type=\\\"submit\\\" value=\\\"Move\\\" name=\\\"cmd\\\" />\\n\";\n        print \"$i</form>\\n\";\n        print \"<br />\\n\";\n        $bb = new BorderBox('Notes for user ' . $requser['handle']);\n        $notes = $dbh->getAssoc(\n            \"SELECT id,nby,UNIX_TIMESTAMP(ntime) AS ntime,note FROM notes \".\n                    \"WHERE uid = ? ORDER BY ntime\", true,\n            array($requser['handle'])\n        );\n\n        if (is_array($notes) && sizeof($notes) > 0) {\n            print \"$i<table cellpadding=\\\"2\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\\n\";\n            foreach ($notes as $nid => $data) {\n                list($nby, $ntime, $note) = $data;\n                print \"$i <tr>\\n\";\n                print \"$i  <td>\\n\";\n                print \"$i   <b>$nby \" . date('H:i jS F Y', $ntime) . \":</b>\";\n                if ($nby == $auth_user->handle) {\n                    $url = \"$self?acreq=$acreq&cmd=Delete+note&id=$nid\";\n                    $msg = \"Are you sure you want to delete this note?\";\n                    print \"[<a href=\\\"javascript:confirmed_goto('$url', '$msg')\\\">delete your note</a>]\";\n                }\n                print \"<br />\\n\";\n                print \"$i   \".htmlspecialchars($note).\"\\n\";\n                print \"$i  </td>\\n\";\n                print \"$i </tr>\\n\";\n                print \"$i <tr><td>&nbsp;</td></tr>\\n\";\n            }\n            print \"$i</table>\\n\";\n        } else {\n            print \"No notes.\";\n        }\n        print \"$i<form action=\\\"$self\\\" method=\\\"POST\\\">\\n\";\n        print \"$i<table cellpadding=\\\"2\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\\n\";\n        print \"$i <tr>\\n\";\n        print \"$i  <td>\\n\";\n        print \"$i   To add a note, enter it here:<br />\\n\";\n        print \"$i    <textarea rows=\\\"3\\\" cols=\\\"55\\\" name=\\\"note\\\"></textarea><br />\\n\";\n        print \"$i   <input type=\\\"submit\\\" value=\\\"Add note\\\" name=\\\"cmd\\\" />\\n\";\n        print $i . '   <input type=\"hidden\" name=\"id\" value=\"' . $requser['handle'] . \"\\\" />\\n\";\n        print \"$i   <input type=\\\"hidden\\\" name=\\\"acreq\\\" value=\\\"$acreq\\\" />\\n\";\n        print \"$i  </td>\\n\";\n        print \"$i </tr>\\n\";\n        print \"$i</table>\\n\";\n        print \"$i</form>\\n\";\n\n        $bb->end();\n?>\n\n<form action=\"<?php echo $self; ?>\" method=\"POST\" name=\"account_form\">\n<input type=\"hidden\" name=\"cmd\" value=\"\" />\n<input type=\"hidden\" name=\"uid\" value=\"<?php echo $requser['handle'] ?>\" />\n<table cellpadding=\"3\" cellspacing=\"0\" border=\"0\" width=\"90%\">\n <tr>\n <td align=\"left\" colspan=\"3\">\n Select Karma Level:\n </td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.pepr\" name=\"karma\" checked=\"checked\" /> PEAR Proposer</td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.dev\" name=\"karma\" /> PEAR Developer</td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.voter\" name=\"karma\" /> PEAR Voter <strong>only</strong></td>\n </tr>\n <tr>\n  <td align=\"center\"><input type=\"button\" value=\"Open Account\" onclick=\"confirmed_submit(this, 'open this account')\" /></td>\n  <td align=\"center\"><input type=\"button\" value=\"Reject Request\" onclick=\"confirmed_submit(this, 'reject this request', this.form.reason, 'You must give a reason for rejecting the request.')\" /></td>\n  <td align=\"center\"><input type=\"button\" value=\"Delete Request\" onclick=\"confirmed_submit(this, 'delete this request')\" /></td>\n </tr>\n <tr>\n  <td colspan=\"3\">\n   If dismissing an account request, enter the reason here\n   (will be emailed to <?php echo $requser['email'] ?>):<br />\n   <textarea rows=\"3\" cols=\"60\" name=\"reason\"></textarea><br />\n\n<?php\n$reasons = array(\"You don't need a PEAR account to use PEAR or PEAR packages.\\n\\n\" .\n                 \"As part of our ongoing Quality Assurance we would be interested in\\n\" .\n                 \"hearing what could be added  on the form to prevent someone making a\\n\" .\n                 \"similar mistake.\",\n\n                 \"Please fill out a bug report at http://\" . PEAR_CHANNELNAME . \"/bugs/ for all\\n\" .\n                 \"bugs or patches.\",\n\n                 \"Please supply valid credentials, including your full name and a\\n\" .\n                 \"descriptive reason for an account.\"\n                 );\n?>\n\n    <select onchange=\"return updateRejectReason(this)\">\n           <option>Select reason...</option>\n<?php\nforeach ($reasons as $reason) {\n    echo \"<option value=\\\"\" . $reason . \"\\\">\" . substr($reason, 0, 90) . \"</option>\\n\";\n}\n?>\n   </select>\n\n  </td>\n</table>\n</form>\n\n<?php\n    // }}}\n    // {{{ admin menu\n    } else {\n    ?>\n        <script type=\"text/javascript\">\n        <!--\n            /**\n            * This code is *nasty* (nastyCode)\n            */\n\n            function highlightAccountRow(spanObj)\n            {\n                var highlightColor = '#cfffb7';\n                var mycolor = spanObj.parentNode.parentNode.childNodes[3].style.backgroundColor;\n\n                if (typeof(arguments[1]) == 'undefined') {\n                    if (mycolor.charAt(0) != '#') {\n                        mycolor = mycolor.replace(/ /g,'');\n                        mycolor = mycolor.toLowerCase();\n                        var bits = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mycolor);\n                        r = parseInt(bits[1]);\n                        g = parseInt(bits[2]);\n                        b = parseInt(bits[3]);\n                        r = r.toString(16);\n                        g = g.toString(16);\n                        b = b.toString(16);\n                        if (r.length == 1) r = '0' + r;\n                        if (g.length == 1) g = '0' + g;\n                        if (b.length == 1) b = '0' + b;\n                        mycolor = '#'+r+g+b;\n                    }\n                    if (mycolor != highlightColor) {\n                        spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked = true;\n                        action = true;\n                    } else {\n                        spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked = false;\n                        action = false;\n                    }\n                } else {\n                    action = !spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked;\n                }\n\n                if (document.getElementById) {\n                    for (var i=0; i<spanObj.parentNode.parentNode.childNodes.length; i++) {\n                        if (!spanObj.parentNode.parentNode.childNodes[i].style) {\n                            continue;\n                        }\n                        if (action) {\n                            spanObj.parentNode.parentNode.childNodes[i].style.backgroundColor = highlightColor;\n                        } else {\n                            spanObj.parentNode.parentNode.childNodes[i].style.backgroundColor = '#ffffff';\n                        }\n                    }\n                }\n                return true;\n            }\n\n            allSelected = false;\n\n            function toggleSelectAll(linkElement)\n            {\n                tableBodyElement = linkElement.parentNode.parentNode.parentNode.parentNode;\n\n                for (var i=0; i<tableBodyElement.childNodes.length; i++) {\n                    if (tableBodyElement.childNodes[i].childNodes[0].childNodes[0].tagName == 'INPUT') {\n                        highlightAccountRow(tableBodyElement.childNodes[i].childNodes[1].childNodes[0], !allSelected);\n                    }\n                }\n\n                allSelected = !allSelected;\n            }\n\n            function setCmdInput(mode)\n            {\n                switch (mode) {\n                    case 'reject':\n                        if (document.forms['mass_reject_form'].reason.selectedIndex == 0) {\n                            alert('Please select a reason to reject the accounts!');\n\n                        } else if (confirm('Are you sure you want to reject these account requests ?')) {\n                            document.forms['mass_reject_form'].cmd.value = 'Reject Request';\n                            return true;\n                        }\n                        break;\n\n                    case 'delete':\n                        if (confirm('Are you sure you want to delete these account requests ?')) {\n                            document.forms['mass_reject_form'].cmd.value = 'Delete Request';\n                            return true;\n                        }\n                        break;\n                }\n\n                return false;\n            }\n        //-->\n        </script>\n        <form action=\"<?php echo $self; ?>\" name=\"mass_reject_form\" method=\"post\">\n        <input type=\"hidden\" value=\"\" name=\"cmd\"/>\n    <?php\n\n        $table = new HTML_Table('style=\"width: 100%\" cellspacing=\"2\"');\n        $table->setCaption('Account Requests', 'style=\"background-color: #CCCCCC;\"');\n        $requests = $dbh->getAssoc(\n            \"SELECT u.handle,u.name,n.note,u.userinfo FROM users u \".\n                                   \"LEFT JOIN notes n ON n.uid = u.handle \".\n            \"WHERE u.registered = 0\"\n        );\n    if (is_array($requests) && sizeof($requests) > 0) {\n        $head = array(\n        \"<a href=\\\"#\\\" onclick=\\\"toggleSelectAll(this)\\\">&#x2713;</a>\",\n        \"Name\", \"Handle\", \"Account Purpose\", \"Status\", \"&nbsp;\"\n        );\n        $table->addRow($head, null, 'th');\n\n        foreach ($requests as $handle => $data) {\n            list($name, $note, $userinfo) = $data;\n\n                // Grab userinfo/request purpose\n            if (@unserialize($userinfo)) {\n                $userinfo = @unserialize($userinfo);\n                $account_purpose = $userinfo[0];\n            } else {\n                $account_purpose = $userinfo;\n            }\n\n            $rejected = (preg_match(\"/^Account rejected:/\", $note));\n            if ($rejected) {\n                continue;\n            }\n            $table->addRow(\n                array(\n                '<input type=\"checkbox\" value=\"' . $handle . '\" name=\"uid[]\" onclick=\"return highlightAccountRow(this)\"/>',\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $name),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $handle),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $account_purpose),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', ($rejected ? \"rejected\" : \"<font color=\\\"#c00000\\\"><strong>Outstanding</strong></font>\")),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', \"<a onclick=\\\"event.cancelBubble = true\\\" href=\\\"$self?acreq=$handle\\\">\" . make_image(\"edit.gif\") . \"</a>\")\n                )\n            );\n        }\n\n    } else {\n        print \"No account requests.\";\n    }\n        $table->setAllAttributes('style=\"vertical-align: top;\"');\n        echo $table->toHTML();\n\n    ?>\n        <br />\n        <table align=\"center\">\n        <tr>\n            <td>\n                <select name=\"reason\">\n                    <option value=\"\">Select rejection reason...</option>\n                    <option value=\"Account not needed\">Account not needed</option>\n                </select>\n            </td>\n            <td><input type=\"submit\" value=\"Reject selected accounts\" onclick=\"return setCmdInput('reject')\" /></td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n            <td><input type=\"submit\" value=\"Delete selected accounts\" onclick=\"return setCmdInput('delete')\" /></td>\n        </tr>\n        </table>\n\n        </form>\n<?php\n    }\n\n    // }}}\n\n} while (false);\n\nresponse_footer();\n", "#!/usr/bin/env php\n<?php\nrequire_once 'MDB2.php';\n$dsn  = 'mysql://root:@localhost/pear';\n\ntry {\n    $proposal_id = (int) $argv[1];\n    if ($proposal_id < 1) {\n        throw InvalidArgumentException(\"Please supply a number: ./rollback.php NUM\");\n    }\n\n    $mdb2 = MDB2::connect($dsn);\n    if (MDB2::isError($mdb2)) {\n        throw new RuntimeException(\"Could not connect to database: {$e->getDebugInfo()}\");\n    }\n    $pearweb = new Pearweb_Rollback($proposal_id, $mdb2);\n    $pearweb->rollback();\n\n} catch (Exception $e) {\n    echo $e->getMessage();\n    exit(1);\n}\n\necho \"All is well.\\n\";\nexit;\n\nclass Pearweb_Rollback\n{\n    protected $mdb2;\n    protected $proposal;\n\n    public function __construct($proposal, MDB2_Driver_Common $mdb2)\n    {\n        if (!is_int($proposal)) {\n            throw new InvalidArgumentException('$proposal must be an int');\n        }\n        $this->proposal = $proposal;\n        $this->mdb2     = $mdb2;\n    }\n\n    public function rollback()\n    {\n        $this->moveVotes();\n        echo \"Moved votes to comments...\\n\";\n\n        $this->resetDate();\n        echo \"Reset vote date...\\n\";\n\n        $this->resetStatus();\n        echo \"Reset status...\\n\";\n    }\n\n    protected function moveVotes()\n    {\n        $sql = \"SELECT * FROM package_proposal_votes WHERE pkg_prop_id = {$this->proposal}\";\n        $res = $this->mdb2->query($sql);\n        if (MDB2::isError($res)) {\n            throw new RuntimeException(\"DB error occurred: {$res->getDebugInfo()}\");\n        }\n        if ($res->numRows() == 0) {\n            return; // nothing to do\n        }\n\n        $insert  = \"INSERT INTO package_proposal_comments (\";\n        $insert .= \"user_handle, pkg_prop_id, timestamp, comment\";\n        $insert .= \") VALUES(%s, {$this->proposal}, %d, %s)\";\n\n        $delete  = \"DELETE FROM package_proposal_votes WHERE\";\n        $delete .= \" pkg_prop_id = {$this->proposal}\";\n        $delete .= \" AND user_handle = %s\";\n\n        while ($row = $res->fetchRow(MDB2_FETCHMODE_OBJECT)) {\n\n            $comment  = \"Original vote: {$row->value}\\n\";\n            $comment .= \"Conditional vote: \" . ($row->is_conditional != 0)?'yes':'no' . \"\\n\";\n            $comment .= \"Comment on vote: \" . $row->comment . \"\\n\\n\";\n            $comment .= \"Reviewed: \" . implode(\", \", unserialize($row->reviews));\n\n            $sql = sprintf(\n                $insert,\n                $this->mdb2->quote($row->user_handle),\n                $row->timestamp,\n                $this->mdb2->quote($comment)\n            );\n            $this->queryChange($sql);\n\n            $sql = sprintf(\n                $delete,\n                $this->mdb2->quote($row->user_handle)\n            );\n            $this->queryChange($sql);\n        }\n\n        $res->free();\n        return true;\n    }\n\n    protected function queryChange($sql)\n    {\n        $affected = $this->mdb2->exec($sql);\n        if (MDB2::isError($affected)) {\n            throw new RuntimeException(\"DB error occurred: \" . $affected->getDebugInfo());\n        }\n        if ($affected < 1) {\n            throw new UnexpectedValueException(\"No rows affected. Invalid proposal ID?\");\n        }\n        return true;\n    }\n\n    protected function resetDate()\n    {\n        $sql = \"UPDATE package_proposals SET vote_date = null WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n\n    protected function resetStatus()\n    {\n        $sql = \"UPDATE proposal SET status='proposal' WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n}\n", "#!/usr/bin/env php\n<?php\nrequire_once 'MDB2.php';\n$dsn  = 'mysqli://pear:pear@localhost/pear';\n\ntry {\n    $proposal_id = (int) $argv[1];\n    if ($proposal_id < 1) {\n        throw new InvalidArgumentException(\"Please supply a number: ./rollback.php NUM\");\n    }\n\n    $mdb2 = MDB2::connect($dsn);\n    if (MDB2::isError($mdb2)) {\n        throw new RuntimeException(\"Could not connect to database: {$mdb2->getDebugInfo()}\");\n    }\n    $pearweb = new Pearweb_Rollback($proposal_id, $mdb2);\n    $pearweb->rollback();\n\n} catch (Exception $e) {\n    echo $e->getMessage();\n    exit(1);\n}\n\necho \"All is well.\\n\";\nexit;\n\nclass Pearweb_Rollback\n{\n    protected $mdb2;\n    protected $proposal;\n\n    public function __construct($proposal, MDB2_Driver_Common $mdb2)\n    {\n        if (!is_int($proposal)) {\n            throw new InvalidArgumentException('$proposal must be an int');\n        }\n        $this->proposal = $proposal;\n        $this->mdb2     = $mdb2;\n    }\n\n    public function rollback()\n    {\n        $this->moveVotes();\n        echo \"Moved votes to comments...\\n\";\n\n        $this->resetDate();\n        echo \"Reset vote date...\\n\";\n\n        $this->resetStatus();\n        echo \"Reset status...\\n\";\n    }\n\n    protected function moveVotes()\n    {\n        $sql = \"SELECT * FROM package_proposal_votes WHERE pkg_prop_id = {$this->proposal}\";\n        $res = $this->mdb2->query($sql);\n        if (MDB2::isError($res)) {\n            throw new RuntimeException(\"DB error occurred: {$res->getDebugInfo()}\");\n        }\n        if ($res->numRows() == 0) {\n            return; // nothing to do\n        }\n\n        $insert  = \"INSERT INTO package_proposal_comments (\";\n        $insert .= \"user_handle, pkg_prop_id, timestamp, comment\";\n        $insert .= \") VALUES(%s, {$this->proposal}, %d, %s)\";\n\n        $delete  = \"DELETE FROM package_proposal_votes WHERE\";\n        $delete .= \" pkg_prop_id = {$this->proposal}\";\n        $delete .= \" AND user_handle = %s\";\n\n        while ($row = $res->fetchRow(MDB2_FETCHMODE_OBJECT)) {\n\n            $comment  = \"Original vote: {$row->value}\\n\";\n            $comment .= \"Conditional vote: \" . (($row->is_conditional != 0)?'yes':'no') . \"\\n\";\n            $comment .= \"Comment on vote: \" . $row->comment . \"\\n\";\n            $comment .= \"Reviewed: \" . implode(\", \", unserialize($row->reviews));\n\n            $sql = sprintf(\n                $insert,\n                $this->mdb2->quote($row->user_handle),\n                $row->timestamp,\n                $this->mdb2->quote($comment)\n            );\n            $this->queryChange($sql);\n\n            $sql = sprintf(\n                $delete,\n                $this->mdb2->quote($row->user_handle)\n            );\n            $this->queryChange($sql);\n        }\n\n        $res->free();\n        return true;\n    }\n\n    protected function queryChange($sql)\n    {\n        $affected = $this->mdb2->exec($sql);\n        if (MDB2::isError($affected)) {\n            throw new RuntimeException(\"DB error occurred: \" . $affected->getDebugInfo());\n        }\n        if ($affected < 1) {\n            throw new UnexpectedValueException(\"No rows affected. Invalid proposal ID?\");\n        }\n        return true;\n    }\n\n    protected function resetDate()\n    {\n        $sql = \"UPDATE package_proposals SET vote_date = null WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n\n    protected function resetStatus()\n    {\n        $sql = \"UPDATE package_proposals SET status='proposal' WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n}\n"], "fixing_code": ["<?php\nclass PEAR_Bug_Accountrequest\n{\n    var $dbh;\n    var $id;\n    var $created_on;\n    var $handle;\n    var $salt;\n    var $email;\n\n    function __construct($handle = false)\n    {\n        $this->dbh = &$GLOBALS['dbh'];\n        if ($handle) {\n            $this->handle = $handle;\n        } else {\n            $this->handle = isset($GLOBALS['auth_user']) ? $GLOBALS['auth_user']->handle : false;\n        }\n        $this->cleanOldRequests();\n    }\n\n    function pending()\n    {\n        if (!$this->handle) {\n            return false;\n        }\n\n        $sql = 'SELECT handle FROM bug_account_request WHERE handle = ?';\n        $request = $this->dbh->getOne($sql, array($this->handle));\n\n        if ($request) {\n            return true;\n        }\n        return false;\n    }\n\n    function sendEmail()\n    {\n        if (!$this->handle) {\n            throw new Exception('Internal fault: user was not set when sending email,\n                                please report to ' . PEAR_DEV_EMAIL);\n        }\n\n        $sql  = 'SELECT salt FROM bug_account_request WHERE handle = ?';\n        $salt = $this->dbh->getOne($sql, array($this->handle));\n        if (!$salt) {\n            throw new Exception('No such handle ' .\n            $this->handle . ' found, cannot send confirmation email');\n        }\n\n        $sql   = 'SELECT email FROM bug_account_request WHERE salt = ?';\n        $email = $this->dbh->getOne($sql, array($salt));\n        if (!$email) {\n            throw new Exception('No such salt found, cannot send confirmation email');\n        }\n        $mailData = array(\n            'salt' => $salt,\n        );\n        require_once 'Damblan/Mailer.php';\n        $mailer = Damblan_Mailer::create('pearweb_account_request_bug', $mailData);\n        $additionalHeaders['To'] = $email;\n        PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n        if (!DEVBOX) {\n            $e = $mailer->send($additionalHeaders);\n        }\n        PEAR::popErrorHandling();\n        if (!DEVBOX && PEAR::isError($e)) {\n            throw new Exception('Cannot send confirmation email: ' . $e->getMessage());\n        }\n        return true;\n    }\n\n    function _makeSalt($handle)\n    {\n        list($usec, $sec) = explode(' ', microtime());\n        return md5($handle . ((float)$usec + (float)$sec));\n    }\n\n    function find($salt)\n    {\n        if (!$salt) {\n            return false;\n        }\n        $request = $this->dbh->getRow('\n            SELECT id, created_on, salt, handle, email\n            FROM bug_account_request\n            WHERE salt = ?', array($salt), DB_FETCHMODE_ASSOC);\n\n        if (count($request) > 0) {\n            foreach ($request as $field => $value) {\n                $this->$field = $value;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Adds a request in the DB\n     *\n     * @return string salt\n     */\n    function addRequest($email)\n    {\n        $salt = $this->_makeSalt($email);\n        $handle = '#' . substr($salt, 0, 19);\n        $created_on = gmdate('Y-m-d H:i:s');\n\n        $test = $this->dbh->getOne('SELECT email from users where email = ?', array($email));\n        if ($test === $email) {\n            return PEAR::raiseError('Email is already in use for an existing account');\n        }\n        $test = $this->dbh->getOne('SELECT email from bug_account_request where email = ?',\n            array($email));\n        if ($test === $email) {\n            // re-use existing request\n            $salt = $this->dbh->getOne('SELECT salt FROM bug_account_request WHERE email = ?',\n                array($email));\n            $this->find($salt);\n            return $salt;\n        }\n        $query = 'INSERT INTO bug_account_request (created_on, handle, email, salt)\n        VALUES (?, ?, ?, ?)';\n\n        $res = $this->dbh->query($query, array($created_on, $handle, $email, $salt));\n        if (DB::isError($res)) {\n            return $res;\n        }\n\n        $sql = 'SELECT handle FROM bug_account_request WHERE salt = ?';\n        $this->handle = $this->dbh->getOne($sql, array($salt));\n        return $salt;\n    }\n\n    function deleteRequest()\n    {\n        $query = 'DELETE FROM bug_account_request WHERE salt = ?';\n        return $this->dbh->query($query, array($this->salt));\n    }\n\n    function validateRequest($handle, $password, $password2, $name)\n    {\n        $errors = array();\n        if (empty($handle) || !preg_match('/^[0-9a-z_]{2,20}\\z/', $handle)) {\n            $errors[] = 'Username is invalid.';\n            $display_form = true;\n        }\n\n        if ($password == md5('') || empty($password)) {\n            $errors[] = 'Password must not be empty';\n        }\n        if ($password !== $password2) {\n            $errors[] = 'Passwords do not match';\n        }\n\n        include_once 'pear-database-user.php';\n        if (user::exists($handle)) {\n            $errors[] = 'User name \"' . $handle .\n                '\" already exists, please choose another user name';\n        }\n\n        $name_parts = explode(' ', $name, 2);\n        if (count($name_parts) == 2) {\n            $firstname = $name_parts[0];\n            $lastname = $name_parts[1];\n        } else {\n            $firstname = $name_parts[0];\n            $lastname = null;\n        }\n\n        // First- and lastname must be longer than 1 character\n        if (strlen($firstname) == 1) {\n            $errors[] = 'Your firstname appears to be too short.';\n        }\n        if (strlen($lastname) == 1) {\n            $errors[] = 'Your lastname appears to be too short.';\n        }\n\n        // No names with only uppercase letters\n        if ($firstname === strtoupper($firstname)) {\n            $errors[] = 'Your firstname must not consist of only uppercase letters.';\n        }\n        if ($lastname === strtoupper($lastname)) {\n            $errors[] = 'Your lastname must not consist of only uppercase letters.';\n        }\n        return $errors;\n    }\n\n    function confirmRequest($handle, $password, $name)\n    {\n        $sql = 'SELECT handle FROM users WHERE handle = ?';\n        if ($handle == $this->dbh->getOne($sql, array($handle))) {\n            $id = $this->dbh->nextId(\"karma\");\n\n            $query = 'INSERT INTO karma VALUES (?, ?, ?, ?, NOW())';\n            $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.bug', 'pearweb'));\n            return true;\n        }\n\n        list($firstname, $lastname) = explode(' ', $name, 2);\n        $data = array(\n            'handle'     => $handle,\n            'firstname'  => $firstname,\n            'lastname'   => $lastname,\n            'email'      => $this->email,\n            'purpose'    => 'bug tracker',\n            'password'   => $password,\n            'password2'  => $password,\n            'purpose'    => 'Open/Comment on bugs',\n            'moreinfo'   => 'Automatic Account Request',\n            'homepage'   => '',\n        );\n\n        include_once 'pear-database-user.php';\n        $useradd = user::add($data, true, true);\n        if ($useradd !== true) {\n            return $useradd;\n        }\n\n        $sql = 'SELECT handle from bug_account_request WHERE salt = ?';\n        $temphandle = $this->dbh->getOne($sql, array($this->salt));\n        // update all relevant records to the new handle\n        $this->dbh->query('UPDATE bugdb_comments set reporter_name = ? WHERE handle = ?', array($name, $temphandle));\n        $this->dbh->query('UPDATE bugdb set reporter_name = ? WHERE handle = ?', array($name, $temphandle));\n        $this->dbh->query('UPDATE users set handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb set registered = 1, handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb_comments set handle = ? WHERE handle = ?', array($handle, $temphandle));\n        $this->dbh->query('UPDATE bugdb_patchtracker set developer = ? WHERE developer = ?', array($handle, $temphandle));\n        $this->handle = $handle;\n        // activate the handle and grant karma\n        // implicitly without human intervention\n        // copied from the user class and Damblan_Karma\n\n        include_once 'pear-database-user.php';\n        $user = user::info($handle, null, 0);\n        if (!isset($user['registered'])) {\n            return false;\n        }\n        try {\n            @$arr = unserialize($user['userinfo'], ['allowed_classes' => false]);\n        } catch (Exception $ex) {\n            $arr = false;\n        }\n\n        include_once 'pear-database-note.php';\n        note::removeAll($handle);\n\n        $data = array();\n        $data['registered'] = 1;\n        $data['password']   = $password;\n        $data['name']       = $name;\n        if (is_array($arr)) {\n            $data['userinfo'] = $arr[1];\n        }\n        $data['create']   = gmdate('Y-m-d');\n        $data['createBy'] = SITE . 'web';\n        $data['handle']   = $handle;\n\n        user::update($data, true);\n\n        $query = 'INSERT INTO karma VALUES (?, ?, ?, ?, NOW())';\n\n        $id = $this->dbh->nextId('karma');\n        $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.bug', SITE . 'web'));\n        $id = $this->dbh->nextId('karma');\n        $sth = $this->dbh->query($query, array($id, $this->handle, 'pear.voter', SITE . 'web'));\n\n        if (!DB::isError($sth)) {\n            require_once 'bugs/pear-bugs-utils.php';\n            $pbu = new PEAR_Bugs_Utils;\n            note::add($this->handle, 'Account opened', SITE . 'web');\n            $bugs = $this->dbh->getAll('SELECT * FROM bugdb WHERE handle = ?',\n                array($this->handle), DB_FETCHMODE_ASSOC);\n            foreach ($bugs as $bug) {\n                $this->sendBugEmail($bug);\n            }\n            $patches = $this->dbh->getAll('SELECT bugdb.package_name, bugdb_patchtracker.*\n                FROM bugdb_patchtracker, bugdb\n                WHERE bugdb_patchtracker.developer = ?\n                    AND bugdb.id = bugdb_patchtracker.bugdb_id', array($this->handle),\n                    DB_FETCHMODE_ASSOC);\n            foreach ($patches as $patch) {\n                $pbu->sendPatchEmail($patch);\n            }\n            $bugs = $this->dbh->getAll('SELECT bugdb_comments.email,bugdb_comments.comment,\n                    bugdb_comments.reporter_name, bugdb.id,\n                    bugdb.bug_type,bugdb.package_name,bugdb.sdesc,\n                    bugdb.ldesc,bugdb.php_version, bugdb.php_os,bugdb.status,\n                    bugdb.assign,bugdb.package_version\n                 FROM bugdb_comments, bugdb\n                 WHERE bugdb.id = bugdb_comments.bug AND\n                 bugdb_comments.handle = ?',\n                array($this->handle), DB_FETCHMODE_ASSOC);\n            foreach ($bugs as $bug) {\n                $this->sendBugCommentEmail($bug);\n            }\n            $msg = \"Your PEAR bug tracker account has been opened.\\n\"\n                . \"Bugs you have opened will now be displayed, and you can\\n\"\n                . \"add new comments to existing bugs\";\n            $xhdr = \"From: \" . PEAR_WEBMASTER_EMAIL;\n            if (!DEVBOX) {\n                mail($user['email'], \"Your PEAR Bug Tracker Account Request\", $msg, $xhdr, \"-f \" . PEAR_BOUNCE_EMAIL);\n            }\n            $this->deleteRequest();\n            return true;\n        }\n\n        return false;\n    }\n\n    function listRequests()\n    {\n    }\n\n    function cleanOldRequests()\n    {\n        $old = gmdate('Y-m-d', strtotime('-1 Day'));\n        $query = 'SELECT handle FROM bug_account_request WHERE created_on < ?';\n        $all = $this->dbh->getAll($query, array($old));\n        require_once 'bugs/patchtracker.php';\n        $p = new Bugs_Patchtracker;\n        // purge reserved usernames as well as their account requests\n        if (is_array($all)) {\n            foreach ($all as $data) {\n                $this->dbh->query('\n                    DELETE FROM users WHERE handle = ?\n                ', array($data[0]));\n                $this->dbh->query('\n                    DELETE FROM bugdb WHERE handle = ?\n                ', array($data[0]));\n                $this->dbh->query('\n                    DELETE FROM bugdb_comments WHERE handle = ?\n                ', array($data[0]));\n                $sql = 'SELECT * FROM bugdb_patchtracker WHERE developer = ?';\n                $patches = $this->dbh->getAll($sql, array($data[0]), DB_FETCHMODE_ASSOC);\n                foreach ($patches as $patch) {\n                    $p->detach($patch['bugdb_id'], $patch['patch'], $patch['revision']);\n                }\n            }\n        }\n        $query = 'DELETE FROM bug_account_request WHERE created_on < ?';\n        // purge out-of-date account requests\n        return $this->dbh->query($query, array($old));\n    }\n\n    function sendBugCommentEmail($bug)\n    {\n        include_once 'pear-bugs-utils.php';\n        $pbu = new PEAR_Bugs_Utils;\n        $ncomment = trim($bug['comment']);\n        $tla = array(\n            'Open'        => 'Opn',\n            'Bogus'       => 'Bgs',\n            'Feedback'    => 'Fbk',\n            'No Feedback' => 'NoF',\n            'Wont fix'    => 'WFx',\n            'Duplicate'   => 'Dup',\n            'Critical'    => 'Ctl',\n            'Assigned'    => 'Asn',\n            'Analyzed'    => 'Ana',\n            'Verified'    => 'Ver',\n            'Suspended'   => 'Sus',\n            'Closed'      => 'Csd',\n            'Spam'        => 'Spm',\n        );\n        $types = array(\n            'Bug'                     => 'Bug',\n            'Feature/Change Request'  => 'Req',\n            'Documentation Problem'   => 'Doc',\n        );\n\n        $headers = $text = array();\n\n        /* Default addresses */\n        list($mailto,$mailfrom, $Bcc) = $pbu->getPackageMail($bug['package_name'], $bug['id']);\n\n        $headers[] = array(\" ID\", $bug['id']);\n\n        $headers[] = array(\" Comment by\", $this->handle);\n        $from = \"\\\"$this->handle\\\" <$this->email>\";\n\n        $prefix = \" \";\n        if ($f = $pbu->spamProtect($this->email, 'text')) {\n            $headers[] = array($prefix.'Reported By', $f);\n        }\n\n        $fields = array(\n            'sdesc'            => 'Summary',\n            'status'           => 'Status',\n            'bug_type'         => 'Type',\n            'package_name'     => 'Package',\n            'php_os'           => 'Operating System',\n            'package_version'  => 'Package Version',\n            'php_version'      => 'PHP Version',\n            'assign'           => 'Assigned To'\n        );\n\n        foreach ($fields as $name => $desc) {\n            $prefix = \" \";\n            /* only fields that are set get added. */\n            if ($f = $bug[$name]) {\n                $headers[] = array($prefix . $desc, $f);\n            }\n        }\n\n        # make header output aligned\n        $actlength = $maxlength = 0;\n        foreach ($headers as $v) {\n            $actlength = strlen($v[0]) + 1;\n            $maxlength = (($maxlength < $actlength) ? $actlength : $maxlength);\n        }\n\n        # align header content with headers (if a header contains\n        # more than one line, wrap it intelligently)\n        $header_text = \"\";\n        $spaces = str_repeat(\" \", $maxlength + 1);\n        foreach ($headers as $v) {\n            $hcontent = wordwrap($v[1], 72-$maxlength, \"\\n$spaces\"); # wrap and indent\n            $hcontent = rtrim($hcontent); # wordwrap may add spacer to last line\n            $header_text .= str_pad($v[0] . \":\", $maxlength) . \" \" . $hcontent . \"\\n\";\n        }\n\n        if ($ncomment) {\n            $text[] = \" New Comment:\\n\\n\".$ncomment;\n        }\n\n        $text[] = $pbu->getOldComments($bug['id'], empty($ncomment));\n\n        /* format mail so it looks nice, use 72 to make piners happy */\n        $wrapped_text = wordwrap(join(\"\\n\",$text), 72);\n\n        /* developer text with headers, previous messages, and edit link */\n        $dev_text = 'Edit report at ' .\n                    \"http://pear.php.net/bugs/bug.php?id=$bug[id]&edit=1\\n\\n\" .\n                    $header_text .\n                    $wrapped_text .\n                    \"\\n-- \\nEdit this bug report at \" .\n                    \"http://pear.php.net/bugs/bug.php?id=$bug[id]&edit=1\\n\";\n\n        $user_text = $dev_text;\n\n        $subj = $types[$bug['bug_type']];\n\n        $new_status = $bug['status'];\n\n        $subj .= \" #{$bug['id']} [Com]: \";\n\n        # the user gets sent mail with an envelope sender that ignores bounces\n        if (DEVBOX === false) {\n            @mail($bug['email'],\n                  \"[PEAR-BUG] \" . $subj . $bug['sdesc'],\n                  $user_text,\n                  \"From: PEAR Bug Database <$mailfrom>\\n\".\n                  \"Bcc: $Bcc\\n\" .\n                  \"X-PHP-Bug: $bug[id]\\n\".\n                  \"In-Reply-To: <bug-$bug[id]@pear.php.net>\",\n                  \"-f \". PEAR_BOUNCE_EMAIL);\n            # but we go ahead and let the default sender get used for the list\n\n            @mail($mailto,\n                  \"[PEAR-BUG] \" . $subj . $bug['sdesc'],\n                  $dev_text,\n                  \"From: $from\\n\".\n                  \"X-PHP-Bug: $bug[id]\\n\".\n                  \"X-PHP-Type: \"       . $bug['bug_type']    . \"\\n\" .\n                  \"X-PHP-PackageVersion: \"    . $bug['package_version'] . \"\\n\" .\n                  \"X-PHP-Version: \"    . $bug['php_version'] . \"\\n\" .\n                  \"X-PHP-Category: \"   . $bug['package_name']    . \"\\n\" .\n                  \"X-PHP-OS: \"         . $bug['php_os']      . \"\\n\" .\n                  \"X-PHP-Status: \"     . $new_status . \"\\n\" .\n                  \"In-Reply-To: <bug-$bug[id]@pear.php.net>\",\n                  \"-f \" . PEAR_BOUNCE_EMAIL);\n        }\n    }\n\n    function sendBugEmail($buginfo)\n    {\n        $report  = '';\n        $report .= 'From:             ' . $this->handle . \"\\n\";\n        $report .= 'Operating system: ' . $buginfo['php_os'] . \"\\n\";\n        $report .= 'Package version:  ' . $buginfo['package_version'] . \"\\n\";\n        $report .= 'PHP version:      ' . $buginfo['php_version'] . \"\\n\";\n        $report .= 'Package:          ' . $buginfo['package_name'] . \"\\n\";\n        $report .= 'Bug Type:         ' . $buginfo['bug_type'] . \"\\n\";\n        $report .= 'Bug description:  ';\n\n        $fdesc = $buginfo['ldesc'];\n        $sdesc = $buginfo['sdesc'];\n\n        $ascii_report  = \"$report$sdesc\\n\\n\" . wordwrap($fdesc);\n        $ascii_report .= \"\\n-- \\nEdit bug report at \";\n        $ascii_report .= \"http://\" . PEAR_CHANNELNAME . \"/bugs/bug.php?id=$buginfo[id]&edit=\";\n\n        include_once 'bugs/pear-bugs-utils.php';\n        $pbu = new PEAR_Bugs_Utils;\n        list($mailto, $mailfrom) = $pbu->getPackageMail($buginfo['package_name']);\n\n        $email = $this->email;\n        $protected_email  = '\"' . $pbu->spamProtect($email, 'text') . '\"';\n        $protected_email .= '<' . $mailfrom . '>';\n\n        if ((!isset($email) || !isset($mailfrom)) && (isset($buginfo['reporter_name']))) {\n            $protected_email = '\"' . $buginfo['reporter_name'] . '\" <' . $pbu->spamProtect($buginfo['email']) . '>';\n        }\n\n        $extra_headers  = 'From: '           . $protected_email . \"\\n\";\n        $extra_headers .= 'X-PHP-BugTracker: PEARbug' . \"\\n\";\n        $extra_headers .= 'X-PHP-Bug: '      . $buginfo['id'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Type: '     . $buginfo['bug_type'] . \"\\n\";\n        $extra_headers .= 'X-PHP-PackageVersion: '  . $buginfo['package_version'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Version: '  . $buginfo['php_version'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Category: ' . $buginfo['package_name'] . \"\\n\";\n        $extra_headers .= 'X-PHP-OS: '       . $buginfo['php_os'] . \"\\n\";\n        $extra_headers .= 'X-PHP-Status: Open' . \"\\n\";\n        $extra_headers .= 'Message-ID: <bug-' . $buginfo['id'] . '@' . PEAR_CHANNELNAME . '>';\n\n        $types = array(\n            'Bug'                     => 'Bug',\n            'Feature/Change Request'  => 'Req',\n            'Documentation Problem'   => 'Doc',\n        );\n        $type = @$types[$buginfo['bug_type']];\n\n        if (!DEVBOX) {\n            // mail to package developers\n            @mail($mailto, \"[PEAR-BUG] $buginfo[bug_type] #$buginfo[id] [NEW]: $sdesc\",\n                  $ascii_report . \"1\\n-- \\n\", $extra_headers,\n                  '-f ' . PEAR_BOUNCE_EMAIL);\n            // mail to reporter\n            @mail($email, \"[PEAR-BUG] $buginfo[bug_type] #$buginfo[id]: $sdesc\",\n                  $ascii_report . \"2\\n\",\n                  \"From: \" . PEAR_CHANNELNAME . \" Bug Database <$mailfrom>\\n\" .\n                  \"X-PHP-Bug: $buginfo[id]\\n\" .\n                  \"Message-ID: <bug-$buginfo[id]@\" . PEAR_CHANNELNAME . \">\",\n                  '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n    }\n}\n", "<?php\n\nclass user\n{\n    static function remove($uid)\n    {\n        global $dbh;\n\n        include_once 'pear-database-note.php';\n        note::removeAll($uid);\n\n        include_once 'pear-rest.php';\n        $pear_rest = new pearweb_Channel_REST_Generator(PEAR_REST_PATH, $dbh);\n        $pear_rest->deleteMaintainerREST($uid);\n        $pear_rest->saveAllMaintainersREST();\n        $dbh->query('DELETE FROM users WHERE handle = ?', array($uid));\n        return ($dbh->affectedRows() > 0);\n    }\n\n    static function rejectRequest($uid, $reason)\n    {\n        global $dbh, $auth_user;\n        list($email) = $dbh->getRow('SELECT email FROM users WHERE handle = ?',\n                                    array($uid));\n\n        include_once 'pear-database-note.php';\n        note::add($uid, \"Account rejected: $reason\");\n        $msg = \"Your PEAR account request was rejected by \" . $auth_user->handle . \":\\n\\n\".\n             \"$reason\\n\";\n        $xhdr = 'From: ' . $auth_user->handle . '@php.net';\n        if (!DEVBOX) {\n            mail($email, \"Your PEAR Account Request\", $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n        return true;\n    }\n\n    static function activate($uid, $karmalevel = 'pear.dev')\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh, $auth_user;\n\n        $karma = new Damblan_Karma($dbh);\n\n        $user = user::info($uid, null, 0);\n        if (!isset($user['registered'])) {\n            return false;\n        }\n        try {\n            @$arr = unserialize($user['userinfo'], ['allowed_classes' => false]);\n        } catch (Exception $ex) {\n            $arr = false;\n        }\n\n        include_once 'pear-database-note.php';\n        note::removeAll($uid);\n\n        $data = array();\n        $data['registered'] = 1;\n        $data['active']     = 1;\n        /* $data['ppp_only'] = 0; */\n        if (is_array($arr)) {\n            $data['userinfo'] = $arr[1];\n        }\n        $data['created']   = gmdate('Y-m-d H:i');\n        $data['createdby'] = $auth_user->handle;\n        $data['handle']    = $user['handle'];\n\n        user::update($data, true);\n\n        $karma->grant($user['handle'], $karmalevel);\n        if ($karma->has($user['handle'], 'pear.dev')) {\n            include_once 'pear-rest.php';\n            $pear_rest = new pearweb_Channel_REST_Generator(PEAR_REST_PATH, $dbh);\n            $pear_rest->saveMaintainerREST($user['handle']);\n            $pear_rest->saveAllMaintainersREST();\n        }\n\n        include_once 'pear-database-note.php';\n        note::add($uid, \"Account opened\");\n        $msg = \"Your PEAR account request has been opened.\\n\".\n             \"To log in, go to http://\" . PEAR_CHANNELNAME . \"/ and click on \\\"login\\\" in\\n\".\n             \"the top-right menu.\\n\";\n        $xhdr = 'From: ' . $auth_user->handle . '@php.net';\n        if (!DEVBOX) {\n            mail($user['email'], \"Your PEAR Account Request\", $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n        return true;\n    }\n\n    static function isAdmin($handle)\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh;\n        $karma = new Damblan_Karma($dbh);\n        return $karma->has($handle, 'pear.admin');\n    }\n\n    static function isQA($handle)\n    {\n        require_once 'Damblan/Karma.php';\n\n        global $dbh;\n        $karma = new Damblan_Karma($dbh);\n        return $karma->has($handle, 'pear.qa');\n    }\n\n    static function exists($handle)\n    {\n        global $dbh;\n        $sql = 'SELECT handle FROM users WHERE handle = ?';\n        $res = $dbh->query($sql, array($handle));\n        return ($res->numRows() > 0);\n    }\n\n    static function maintains($user, $pkgid, $role = 'any')\n    {\n        global $dbh;\n        include_once 'pear-database-package.php';\n\n        $package_id = package::info($pkgid, 'id');\n        if ($role == 'any') {\n            return $dbh->getOne('SELECT role FROM maintains WHERE handle = ? '.\n                                'AND package = ?', array($user, $package_id));\n        }\n\n        if (is_array($role)) {\n            $res = $dbh->getOne('SELECT role FROM maintains WHERE handle = ? AND package = ? '.\n                                'AND role IN (\"' . implode('\", \"', $role) . '\")', array($user, $package_id));\n            return $res;\n        }\n\n        return $dbh->getOne('SELECT role FROM maintains WHERE handle = ? AND package = ? '.\n                            'AND role = ?', array($user, $package_id, $role));\n    }\n\n    static function getPackages($user, $onlyApprovedPackages = false)\n    {\n        global $dbh;\n        $query = 'SELECT p.id, p.name, m.role, m.active'\n            . ' FROM packages p, maintains m'\n            . ' WHERE m.handle = ? AND p.id = m.package AND p.package_type = ?'\n            . (($onlyApprovedPackages) ? ' AND approved = 1' : '')\n            . ' ORDER BY p.name';\n\n        return $dbh->getAll($query, array($user, SITE));\n    }\n\n    static function getProposals($user)\n    {\n        global $dbh;\n\n        $query = 'SELECT id, pkg_name, status,'\n            . ' draft_date, proposal_date, vote_date'\n            . ' FROM package_proposals'\n            . ' WHERE user_handle = ? ORDER BY draft_date ASC';\n\n        return $dbh->getAll($query, array($user));\n    }\n\n    static function info($user, $field = null, $registered = true, $hidePassword = true)\n    {\n        global $dbh;\n        \n        if (!$dbh) {\n            return null;\n        }\n\n        $handle = strpos($user, '@') ? 'email' : 'handle';\n\n        if ($field === null) {\n            $sql  = 'SELECT * FROM users WHERE ' . $handle . ' = ?';\n            $data = array($user);\n            if ($registered !== 'any') {\n                $sql.= ' AND registered = ?';\n                $data[] = $registered === true ? '1' : '0';\n            }\n\n            $row = $dbh->getRow($sql, $data, DB_FETCHMODE_ASSOC);\n\n            if ($hidePassword) {\n                unset($row['password']);\n            }\n            return $row;\n        }\n\n        if (($field == 'password' && $hidePassword) || preg_match('/[^0-9a-z]/', $user)) {\n            return null;\n        }\n\n        $sql = 'SELECT ! FROM users WHERE handle = ?';\n        $data = array($field, $user);\n        if ($registered !== 'any') {\n            $sql.= ' AND registered = ?';\n            $data[] = $registered === true ? '1' : '0';\n        }\n\n        return $dbh->getRow($sql, $data, DB_FETCHMODE_ASSOC);\n    }\n\n    static function listAll($registered_only = true)\n    {\n        global $dbh;\n        $query = 'SELECT * FROM users';\n        if ($registered_only === true) {\n            $query .= ' WHERE registered = 1';\n        }\n        $query .= ' ORDER BY handle';\n        return $dbh->getAll($query, null, DB_FETCHMODE_ASSOC);\n    }\n\n    static function listRecentUsersByKarma($karma, $limit)\n    {\n        global $dbh;\n        $query = 'SELECT * FROM users u\n                    JOIN karma k ON k.user = u.handle\n                    WHERE k.level = ? \n                    ORDER BY granted_at DESC LIMIT ?';\n\n        return $dbh->getAll($query, array($karma, $limit), DB_FETCHMODE_ASSOC);\n    }\n\n\n    static function listAllHandles($registered_only = true)\n    {\n        global $dbh;\n        $query = 'SELECT handle FROM users';\n        if ($registered_only === true) {\n            $query .= ' WHERE registered = 1';\n        }\n        $query .= ' ORDER BY handle';\n        return $dbh->getAll($query, null, DB_FETCHMODE_ASSOC);\n    }\n\n    /**\n     * Add a new user account\n     *\n     * During most of this method's operation, PEAR's error handling\n     * is set to PEAR_ERROR_RETURN.\n     *\n     * @param array   $data  Information about the user\n     * @param boolean $md5ed true if the password has been hashed already\n     * @param boolean $automatic true if this is an automatic account request\n     *\n     * @return mixed  true if there are no problems, false if sending the\n     *                email failed, 'set error' if DB_storage::set() failed\n     *                or an array of error messages for other problems\n     *\n     * @access public\n     */\n    static function add(&$data, $md5ed = false, $automatic = false)\n    {\n        global $dbh;\n\n        PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n        $errors = array();\n\n        $required = array(\n            'handle'     => 'Username',\n            'firstname'  => 'First Name',\n            'lastname'   => 'Last Name',\n            'email'      => 'Email address',\n            'purpose'    => 'Intended purpose',\n        );\n\n        $name = $data['firstname'] . \" \" . $data['lastname'];\n\n        foreach ($required as $field => $desc) {\n            if (empty($data[$field])) {\n                $data['jumpto'] = $field;\n                $errors[] = 'Please enter ' . $desc;\n            }\n        }\n\n        if (!preg_match(PEAR_COMMON_USER_NAME_REGEX, $data['handle'])) {\n            $errors[] = 'Username must start with a letter and contain'\n                      . ' only letters and digits';\n        }\n\n        // Basic name validation\n\n        // First- and lastname must be longer than 1 character\n        if (strlen($data['firstname']) == 1) {\n            $errors[] = 'Your firstname appears to be too short.';\n        }\n        if (strlen($data['lastname']) == 1) {\n            $errors[] = 'Your lastname appears to be too short.';\n        }\n\n        // No names with only uppercase letters\n        if ($data['firstname'] === strtoupper($data['firstname'])) {\n            $errors[] = 'Your firstname must not consist of only uppercase letters.';\n        }\n        if ($data['lastname'] === strtoupper($data['lastname'])) {\n            $errors[] = 'Your lastname must not consist of only uppercase letters.';\n        }\n\n        if ($data['password'] != $data['password2']) {\n            $data['password'] = $data['password2'] = \"\";\n            $data['jumpto'] = \"password\";\n            $errors[] = 'Passwords did not match';\n        }\n\n        if (!$data['password']) {\n            $data['jumpto'] = \"password\";\n            $errors[] = 'Empty passwords not allowed';\n        }\n\n        $handle = strtolower($data['handle']);\n        $info   = user::info($handle, null, 'any');\n\n        if (is_array($info) && isset($info['created'])) {\n            $data['jumpto'] = \"handle\";\n            $errors[] = 'Sorry, that username is already taken';\n        }\n\n        if ($errors) {\n            $data['display_form'] = true;\n            return $errors;\n        }\n\n        $data['display_form'] = false;\n        $md5pw = $md5ed ? $data['password'] : md5($data['password']);\n        $showemail = @(bool)$data['showemail'];\n        // hack to temporarily embed the \"purpose\" in\n        // the user's \"userinfo\" column\n        $userinfo = serialize(array($data['purpose'], $data['moreinfo']));\n        $set_vars = array(\n            'handle'     => $handle,\n            'name'       => $name,\n            'email'      => $data['email'],\n            'homepage'   => $data['homepage'],\n            'showemail'  => $showemail,\n            'password'   => $md5pw,\n            'registered' => 0,\n            'userinfo'   => $userinfo,\n            'from_site'  => SITE,\n        );\n\n        $dbh->expectError(DB_ERROR_CONSTRAINT);\n        PEAR::pushErrorHandling(PEAR_ERROR_CALLBACK, 'report_warning');\n\n        $sql = '\n            INSERT INTO users\n                (handle, name, email, homepage, showemail, password, registered, userinfo, from_site)\n            VALUES\n                (?, ?, ?, ?, ?, ?, ?, ?, ?)';\n\n        $err = $dbh->query($sql, $set_vars);\n        $dbh->popExpect();\n        if (DB::isError($err)) {\n            return $err;\n        }\n\n        PEAR::popErrorHandling();\n\n        $msg = \"Requested from:   {$_SERVER['REMOTE_ADDR']}\\n\".\n               \"Username:         {$handle}\\n\".\n               \"Real Name:        {$name}\\n\".\n               (isset($data['showemail']) ? \"Email:            {$data['email']}\\n\" : \"\") .\n               \"Purpose:\\n\".\n               \"{$data['purpose']}\\n\\n\".\n               \"To handle: http://{$_SERVER['SERVER_NAME']}/admin/?acreq={$handle}\\n\";\n\n        if ($data['moreinfo']) {\n            $msg .= \"\\nMore info:\\n{$data['moreinfo']}\\n\";\n        }\n\n        $xhdr = \"From: $name <{$data['email']}>\\nMessage-Id: <account-request-{$handle}@\" .\n            PEAR_CHANNELNAME . \">\\n\";\n        // $xhdr .= \"\\nBCC: \" . PEAR_GROUP_EMAIL;\n        $subject = \"PEAR Account Request: {$handle}\";\n\n        $ok = true;\n        if (!DEVBOX && !$automatic && PEAR_CHANNELNAME == 'pear.php.net') {\n            $ok = @mail(PEAR_GROUP_EMAIL, $subject, $msg, $xhdr, '-f ' . PEAR_BOUNCE_EMAIL);\n        }\n\n        PEAR::popErrorHandling();\n\n        return $ok;\n    }\n\n    /**\n     * Update user information\n     *\n     * @access public\n     * @param  array User information\n     * @return object|boolean DB error object on failure, true on success\n     */\n    static function update($data, $admin = false)\n    {\n        global $dbh;\n\n        if (!isset($data['handle'])) {\n            return false;\n        }\n\n        $fields = array(\n            'name',\n            'email',\n            'homepage',\n            'showemail',\n            'userinfo',\n            'pgpkeyid',\n            'wishlist',\n            'latitude',\n            'longitude',\n            'active',\n            'password',\n            'from_site',\n        );\n\n        if ($admin) {\n            $fields[] = 'registered';\n            $fields[] = 'created';\n            $fields[] = 'createdby';\n        }\n        $info = user::info($data['handle'], null, 'any');\n        // In case a active value isn't passed in\n        $active = isset($info['active']) ? $info['active'] : true;\n\n        $change_k = $change_v = array();\n        foreach ($data as $key => $value) {\n            if (!in_array($key, $fields)) {\n                continue;\n            }\n            $change_k[] = $key;\n            $change_v[] = $value;\n        }\n\n        $sql = 'UPDATE users SET ' . \"\\n\";\n        foreach ($change_k as $k) {\n            $sql .= $k . ' = ?,' . \"\\n\";\n        }\n        $sql = substr($sql, 0, -2);\n        $sql.= ' WHERE handle = ?';\n\n        $change_v[] = $data['handle'];\n        $err = $dbh->query($sql, $change_v);\n        if (DB::isError($err)) {\n            return $err;\n        }\n\n        if (isset($data['active']) && $data['active'] === 0 && $active) {\n            // this user is completely inactive, so mark all maintains as not active.\n            $dbh->query('UPDATE maintains SET active = 0 WHERE handle = ?', array($info['handle']));\n        }\n        return true;\n    }\n\n    /**\n     * Get recent releases for the given user\n     *\n     * @access public\n     * @param  string Handle of the user\n     * @param  int    Number of releases (default is 10)\n     * @return array\n     */\n    static function getRecentReleases($handle, $n = 10)\n    {\n        global $dbh;\n        $recent = array();\n\n        $query = '\n            SELECT\n                p.id AS id,\n                p.name AS name,\n                p.summary AS summary,\n                r.version AS version,\n                r.releasedate AS releasedate,\n                r.releasenotes AS releasenotes,\n                r.doneby AS doneby,\n                r.state AS state\n            FROM packages p, releases r, maintains m\n            WHERE\n                p.package_type = ?\n                AND p.id = r.package\n                AND p.id = m.package\n                AND m.handle = ?\n            ORDER BY r.releasedate DESC';\n\n        $sth = $dbh->limitQuery($query, 0, $n, array(SITE, $handle));\n        while ($sth->fetchInto($row, DB_FETCHMODE_ASSOC)) {\n            $recent[] = $row;\n        }\n        return $recent;\n    }\n}\n", "<?php\n/**\n * Establishes the procedures, objects and variables used throughout PEPr.\n *\n * The <var>$proposalReviewsMap</var> arrays is defined here.\n *\n * NOTE: Proposal constants are defined in pearweb/include/pear-config.php.\n *\n * This source file is subject to version 3.0 of the PHP license,\n * that is bundled with this package in the file LICENSE, and is\n * available through the world-wide-web at the following URI:\n * http://www.php.net/license/3_0.txt.\n * If you did not receive a copy of the PHP license and are unable to\n * obtain it through the world-wide-web, please send a note to\n * license@php.net so we can mail you a copy immediately.\n *\n * @category  pearweb\n * @package   PEPr\n * @author    Tobias Schlitt <toby@php.net>\n * @author    Daniel Convissor <danielc@php.net>\n * @copyright Copyright (c) 1997-2005 The PHP Group\n * @license   http://www.php.net/license/3_0.txt  PHP License\n * @version   $Id$\n */\n\nglobal $proposalReviewsMap;\n$proposalReviewsMap = array(\n                            'cursory'   => 'Cursory source review',\n                            'deep'      => 'Deep source review',\n                            'test'      => 'Run examples');\n\nclass ppVote\n{\n    var $pkg_prop_id;\n    var $user_handle;\n    var $value;\n    var $reviews = array();\n    var $is_conditional;\n    var $comment;\n    var $timestamp;\n\n    function __construct($dbhResArr)\n    {\n        foreach ($dbhResArr as $name => $value) {\n            $this->$name = $value;\n        }\n    }\n\n    function get(&$dbh, $proposalId, $handle)\n    {\n        $sql = \"SELECT *, UNIX_TIMESTAMP(timestamp) AS timestamp FROM package_proposal_votes WHERE pkg_prop_id = \". $dbh->quoteSmart($proposalId) .\" AND user_handle= \". $dbh->quoteSmart($handle);\n        $res = $dbh->query($sql);\n        if (DB::isError($res)) {\n            return $res;\n        }\n        if (!$res->numRows()) {\n            return null;\n        }\n        $set = $res->fetchRow(DB_FETCHMODE_ASSOC);\n        try {\n            $unserialised = unserialize($set['reviews'], ['allowed_classes' => false]);\n            if ($unserialised !== false) {\n                $set['reviews'] = $unserialised;\n            }\n        } catch (Exception $ex) {\n            $set['reviews'] = array();\n        }\n        $vote = new ppVote($set);\n        return $vote;\n    }\n\n    function &getAll(&$dbh, $proposalId)\n    {\n        $sql = \"SELECT *, UNIX_TIMESTAMP(timestamp) AS timestamp FROM package_proposal_votes WHERE pkg_prop_id = \". $dbh->quoteSmart($proposalId) .\" ORDER BY timestamp ASC\";\n        $res = $dbh->query($sql);\n        if (DB::isError($res)) {\n            return $res;\n        }\n        $votes = array();\n        while ($set = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n            $uReviews = unserialize($set['reviews'], ['allowed_classes' => false]);\n            if ($uReviews !== false) {\n                $set['reviews'] = $uReviews;\n            }\n            $votes[$set['user_handle']] = new ppVote($set);\n        }\n        return $votes;\n    }\n\n    function store($dbh, $proposalId)\n    {\n        if (empty($this->user_handle)) {\n            return PEAR::raiseError(\"Not initialized\");\n        }\n        $sql = \"INSERT INTO package_proposal_votes (pkg_prop_id, user_handle, value, is_conditional, comment, reviews)\n                    VALUES (\". $dbh->quoteSmart($proposalId).\", \".$dbh->quoteSmart($this->user_handle).\", \".$this->value.\", \".(int)$this->is_conditional.\", \".$dbh->quoteSmart($this->comment).\", \".$dbh->quoteSmart(serialize($this->reviews)).\")\";\n        $res = $dbh->query($sql);\n        return $res;\n    }\n\n    function getReviews($humanReadable = false)\n    {\n        if ($humanReadable) {\n            $res = array();\n            if (!empty($this->reviews)) {\n                foreach ((array)$this->reviews as $review) {\n                    $res[] = $GLOBALS['proposalReviewsMap'][$review];\n                }\n            }\n            return $res;\n        }\n        return $this->reviews;\n    }\n\n    function getSum($dbh, $proposalId)\n    {\n        $sql = \"SELECT SUM(value) FROM package_proposal_votes WHERE pkg_prop_id = \".$proposalId.\" GROUP BY pkg_prop_id\";\n        $result = $dbh->getOne($sql);\n        $res['all'] = (is_numeric($result)) ? $result : 0;\n        $sql = \"SELECT SUM(value) FROM package_proposal_votes WHERE pkg_prop_id = \".$proposalId.\" AND is_conditional = 1 GROUP BY pkg_prop_id\";\n        $result = $dbh->getOne($sql);\n        $res['conditional'] = (is_numeric($result)) ? $result : 0;\n        return $res;\n    }\n\n    function getCount($dbh, $proposalId)\n    {\n        $sql = \"SELECT COUNT(user_handle) FROM package_proposal_votes WHERE pkg_prop_id = \".$dbh->quoteSmart($proposalId).\" GROUP BY pkg_prop_id\";\n        $res = $dbh->getOne($sql);\n        return (!empty($res)) ? $res: \" 0\";\n    }\n\n    function hasVoted($dbh, $userHandle, $proposalId)\n    {\n        $sql = \"SELECT count(pkg_prop_id) as votecount FROM package_proposal_votes\n                    WHERE pkg_prop_id = \".$dbh->quoteSmart($proposalId).\" AND user_handle = \".$dbh->quoteSmart($userHandle).\"\n                    GROUP BY pkg_prop_id\";\n        $votes = $dbh->query($sql);\n        return (bool)($votes->numRows());\n    }\n\n}\n", "<?php\nclass Users_PasswordManage\n{\n    var $_dbh;\n    var $_mailer;\n    function __construct()\n    {\n        $this->_dbh = &$GLOBALS['dbh'];\n    }\n\n    /**\n     * Confirm the user's request to reset the password\n     *\n     * @param string $user\n     * @param string $salt\n     * @return array\n     */\n    function confirmReset($user, $salt)\n    {\n        $errors = array();\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $e = $this->_dbh->getOne('SELECT newpassword FROM lostpassword WHERE\n            handle=? AND salt=?', array($user, $salt));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            return array($e->getMessage());\n        }\n\n        if (!$e) {\n            return array('Could not retrieve password based on username/salt combination');\n        }\n\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $e = $this->_dbh->query('UPDATE users set password = ? WHERE handle = ?', array($e, $user));\n        if (!PEAR::isError($e)) {\n            $this->_dbh->query('DELETE FROM lostpassword WHERE handle = ?', array($user));\n        }\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            return array($e->getMessage());\n        }\n\n        return array();\n    }\n\n    /**\n     * Mark a user for password resetting\n     *\n     * @param string $user\n     * @param string $pass1\n     * @param string $pass2\n     * @return array\n     */\n    function resetPassword($user, $pass1, $pass2)\n    {\n        require_once 'Damblan/Mailer.php';\n        $errors = array();\n        $random_bytes = openssl_random_pseudo_bytes(16, $strong);\n        if ($random_bytes === false || $strong === false) {\n            $errors[] = \"Could not generate a safe password token\";\n            return $errors;\n        }\n        $salt = md5($rand_bytes);\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $this->_dbh->query('DELETE FROM lostpassword WHERE handle=?', array($user));\n        $e = $this->_dbh->query('INSERT INTO lostpassword\n            (handle, newpassword, salt, requested)\n            VALUES(?,?,?,NOW())', array($user, md5($pass1), $salt));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($e)) {\n            $errors[] = 'Could not change password: ' . $e->getMessage();\n        } else {\n            include_once 'pear-database-user.php';\n            $info = user::info($user);\n            $this->_mailer = Damblan_mailer::create(array(\n        'To'       => array($info['name'] . ' <' . $info['email'] . '>'),\n        'Reply-To' => array('PEAR QA <' . PEAR_QA_EMAIL . '>'),\n        'Subject' => '[PEAR-ACCOUNT-PASSWORD] Your password reset request : %username%',\n        'Body' => 'A request has been made to reset your password for %username%\nat pear.php.net.\n\nIf you intended to reset the password, please navigate to this page:\n  https://' . PEAR_CHANNELNAME . '/account/password-confirm-change.php\nand follow the instructions.  Your password reset code is:\n\n%salt%\n\nIf you have received this email by mistake or did not request a\npassword change, no further action is necessary.  Your password\nwill NOT change until you confirm the change, and it cannot be changed\nwithout the password reset code.  Password change requests are automatically\npurged after 24 hours.\n\nPEAR Quality Assurance.'), array('username' => $user, 'salt' => $salt));\n            $this->_mailer->send();\n        }\n        return $errors;\n    }\n}\n", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n            case 'askhttpd' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('httpdconf');\n                }\n                return true;\n                break;\n            case 'httpdconf' :\n                return $this->setupHttpdconf($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n                  \n        // for upgrade purposes\n        $updir = '@www-dir@/pear.php.net/sql/.pearweb-upgrade';\n        if (!file_exists($updir)) {\n            if (!mkdir($updir)) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/pear.php.net/sql/pearweb_mdb2schema.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name'] = $answers['database'];\n        $c['create'] = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/pear.php.net/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        \n        $serfile = $updir . $answers['database'] . '-@version@.ser';\n        if (!file_exists($serfile)) {\n            $fp = fopen($serfile, 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            $sFile = $updir . $answers['database'] . '-' . $oldversion . '.ser';\n            try {\n                $curdef = unserialize(file_get_contents($sFile), ['allowed_classes' => false]);\n            } catch (Exception $ex) {\n                $curdef = false;\n            }\n\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This helper function parses httpd.conf and adds needed information\n     * for pearweb to run.\n     *\n     * In essence, this takes the contents of docs/apache_setup.txt and\n     * adds them to httpd.conf with paths replaced that are needed to\n     * make the thing work.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function setupHttpdconf($answers)\n    {\n        // TODO handle ports properly\n        $eol = PHP_EOL;\n        if (!realpath($answers['path']) || !file_exists($answers['path'])) {\n            $this->_ui->outputData('No such file: \"' . $answers['path'] . '\"');\n            return false;\n        }\n        $httpdconf = file(realpath($answers['path']));\n        $found = array();\n        foreach ($httpdconf as $num => $line) {\n            $line = trim($line);\n            if (!$line) {\n                continue;\n            }\n            if (strpos($line, 'NameVirtualHost') === 0) {\n                $found['NameVirtualHost'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) start') === 0) {\n                $found['start'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) end') === 0) {\n                $found['end'] = $num;\n            }\n        }\n        if (strtolower($answers['addnamev']) == 'yes') {\n            if (array_key_exists('NameVirtualHost', $found)) {\n                $httpdconf[$found['NameVirtualHost']] =\n                    'NameVirtualHost ' . $answers['namehost'] . $eol;\n            } else {\n                if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n                    $one = array_slice($httpdconf, 0, $found['start'] - 1);\n                    $found['start']++;\n                    $one[] = $eol . 'NameVirtualHost ' . $answers['namehost'] . $eol;\n                    $two = array_slice($httpdconf, $found['start']);\n                    $httpdconf = array_merge($one, $two);\n                } else {\n                    $httpdconf[] = $eol . 'NameVirtualHost ' . $answers['namehost'] . $eol;\n                }\n            }\n        }\n        if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n            $one = array_slice($httpdconf, 0, $found['start'] - 1);\n            $two = array_slice($httpdconf, $found['end'] + 1);\n        } else {\n            $one = $httpdconf;\n            $two = array();\n        }\n\n        // here we go...\n        $middle = array();\n        $middle[] = $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) start' . $eol;\n        $middle[] = '<VirtualHost ' . $answers['namehost'] . '>' . $eol;\n        $middle[] = ' ServerName ' . $answers['pear'] . $eol;\n        $middle[] = $eol;\n        // apache requires all path separators to be \"/\" even on windows\n        $middle[] = ' DocumentRoot ' . str_replace('\\\\', '/', '@www-dir@') . '/pear.php.net' . $eol;\n        $middle[] = ' DirectoryIndex index.php index.html' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' php_value include_path .' . PATH_SEPARATOR .\n            str_replace('\\\\', '/', '@www-dir@')\n            . '/pear.php.net/include' . PATH_SEPARATOR . str_replace('\\\\', '/', '@php-dir@') . $eol;\n        $middle[] = ' php_value auto_prepend_file pear-prepend.php' . $eol;\n        $middle[] = ' php_flag magic_quotes_gpc off' . $eol;\n        $middle[] = ' php_flag magic_quotes_runtime off' . $eol;\n        $middle[] = ' php_flag register_globals Off' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' ErrorDocument 404 /error/404.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Alias /package ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/package-info.php' . $eol;\n        $middle[] = ' Alias /user    ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/account-info.php' . $eol;\n        $middle[] = ' Alias /sidebar/pear.gif ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/gifs/pear_item.gif' . $eol;\n        $middle[] = ' Alias /distributions/manual/chm /var/lib/pear/chm' . $eol;\n        $middle[] = ' Alias /reference /var/lib/pear/apidoc' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RedirectPermanent /download-docs.php          http://'\n            . $answers['pear'] . '/manual/' . $eol;\n        $middle[] = ' RedirectPermanent /rss.php                    http://'\n            . $answers['pear'] . '/feeds/latest.rss' . $eol;\n        $middle[] = ' RedirectPermanent /weeklynews.php             http://'\n            . $answers['pear'] . '/' . $eol;\n        $middle[] = ' RedirectPermanent /support.php                http://'\n            . $answers['pear'] . '/support/' . $eol;\n        $middle[] = ' RedirectPermanent /credits.php                http://'\n            . $answers['pear'] . '/about/credits.php' . $eol;\n        $middle[] = ' RedirectPermanent /pepr/pepr-overview.php     http://'\n            . $answers['pear'] . '/pepr/' . $eol;\n        $middle[] = ' RedirectPermanent /faq.php                    http://'\n            . $answers['pear'] . '/manual/en/faq.php' . $eol;\n        $middle[] = ' RedirectPermanent /doc/index.php              http://'\n            . $answers['pear'] . '/manual/en/' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # xmlrpc.php was removed 1 Jan 2008 and won\\'t come back' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Redirect gone /xmlrpc.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteEngine On' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rules for the RSS feeds' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /feeds/(.+)\\.rss$ /feeds/feeds.php?type=$1' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the API documentation' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /package/([a-zA-Z0-9_]+)/docs/(.+)($/|$) /reference/$1-$2 [PT]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the Bug system' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /bugs/([0-9]+)/*$ /bugs/bug.php?id=$1 [R]\n' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the manual' . $eol;\n        $middle[] = ' # throw pecl doc people to the php manual' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /manual/[a-z]{2}/pecl.([a-zA-Z0-9_-]+)\\.php$ http://www.php.net/$1 [R=301]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' SetEnvIf User-Agent \"MS Search 4\\.0 Robot\\)$\" badrobot' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Directory />' . $eol;\n        $middle[] = '  order deny,allow' . $eol;\n        $middle[] = '  deny from env=badrobot' . $eol;\n        $middle[] = ' </Directory>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /get>' . $eol;\n        $middle[] = '  ForceType application/x-httpd-php' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  Deny From 194.51.105.35' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /manual>' . $eol;\n        $middle[] = '  ErrorDocument 404 /error/404-manual.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /bugs/include>' . $eol;\n        $middle[] = '  deny from all' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /trackback>' . $eol;\n        $middle[] = '  DirectoryIndex trackback.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = '</VirtualHost>' . $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) end' . $eol;\n\n        $one = array_merge($one, $middle);\n        $httpdconf = array_merge($one, $two);\n        $this->_ui->outputData('opening ' . $answers['path'] . ' for writing');\n        $fp = fopen(realpath($answers['path']), 'w');\n        $this->_ui->outputData('writing data...');\n        fwrite($fp, implode('', $httpdconf));\n        fclose($fp);\n        $this->_ui->outputData('...done');\n        return true;\n    }\n}\n", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_election_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] == 'n') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        //include_once dirname(__FILE__) . 'include/pear-config.php';\n        //$a = MDB2_Schema::factory(PEAR_DATABASE_DSN,\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n        // for upgrade purposes\n        if (!file_exists('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n            '.pearweb-upgrade')) {\n            if (!mkdir('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n                  '.pearweb-upgrade')) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/sql/pearweb_election.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name']      = $answers['database'];\n        $c['create']    = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        if (!file_exists('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-@version@.ser')) {\n            $fp = fopen('@www-dir@/sql/.pearweb-upgrade/' .\n                $answers['database'] . '-@version@.ser', 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            $sFile = '@www-dir@/sql/.pearweb-upgrade/' . $answers['database'] . '-' . $oldversion . '.ser';\n            try {\n                $curdef = unserialize(file_get_contents($sFile), ['allowed_classes' => false]);\n            } catch (Exception $ex) {\n                $curdef = false;\n            }\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n}\n", "<?php\nrequire_once 'MDB2/Schema.php';\nclass pearweb_pepr_postinstall\n{\n    var $lastversion;\n    var $dsn;\n    /**\n     * Frontend object\n     * @var PEAR_Frontend\n     * @access private\n     */\n    var $_ui;\n\n    function init(&$config, &$pkg, $lastversion)\n    {\n        $this->_ui = &PEAR_Frontend::singleton();\n        $this->lastversion = $lastversion;\n        return true;\n    }\n\n    function run($answers, $phase)\n    {\n        switch ($phase) {\n            case 'askdb' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('init');\n                }\n                return true;\n                break;\n            case 'init' :\n                PEAR::pushErrorHandling(PEAR_ERROR_RETURN);\n                if (PEAR::isError($err = MDB2::loadFile('Driver' . DIRECTORY_SEPARATOR .\n                      $answers['driver']))) {\n                    PEAR::popErrorHandling();\n                    $this->_ui->outputData('ERROR: Unknown MDB2 driver \"' .\n                        $answers['driver'] . '\": ' .\n                        $err->getUserInfo() . '. Be sure you have installed ' .\n                        'MDB2_Driver_' . $answers['driver']);\n                    return false;\n                }\n                PEAR::popErrorHandling();\n                if ($answers['driver'] !== 'mysqli') {\n                    $this->_ui->outputData('pearweb only supports mysqli, ' .\n                        'not ' . $answers['driver']);\n                    return false;\n                }\n                return $this->initializeDatabase($answers);\n                break;\n            case 'askhttpd' :\n                if ($answers['yesno'] != 'y') {\n                    $this->_ui->skipParamgroup('httpdconf');\n                }\n                return true;\n                break;\n            case 'httpdconf' :\n                return $this->setupHttpdconf($answers);\n                break;\n        }\n        return true;\n    }\n\n    /**\n     * Create or upgrade the database needed for pearweb\n     *\n     * This helper function scans for previous database versions,\n     * and upgrades the database based on differences between the\n     * previous version's schema and the one distributed with this\n     * version.\n     *\n     * If the database has never been created, then it is created.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function initializeDatabase($answers)\n    {\n        $this->dsn = array(\n            'phptype' => $answers['driver'],\n            'username' => $answers['user'],\n            'password' => $answers['password'],\n            'hostspec' => $answers['host'],\n            'database' => $answers['database']);\n        $a = MDB2_Schema::factory($this->dsn,\n            array('idxname_format' => '%s',\n                  'seqname_format' => 'id',\n                  'quote_identifier' => true));\n        // for upgrade purposes\n        if (!file_exists('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n            '.pearweb-upgrade')) {\n            if (!mkdir('@www-dir@' . DIRECTORY_SEPARATOR . 'sql' . DIRECTORY_SEPARATOR .\n                  '.pearweb-upgrade')) {\n                $this->_ui->outputData('error - make sure we can create directories');\n                return false;\n            }\n        }\n        PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n        $c = $a->parseDatabaseDefinitionFile(\n            realpath('@www-dir@/sql/pearweb_mdb2schema.xml'));\n        PEAR::staticPopErrorHandling();\n        if (PEAR::isError($c)) {\n            $extra = '';\n            if (MDB2_Schema::isError($c) || MDB2::isError($c)) {\n                $extra = \"\\n\" . $c->getUserInfo();\n            }\n            $this->_ui->outputData('ERROR: ' . $c->getMessage() . $extra);\n            return false;\n        }\n        $c['name']      = $answers['database'];\n        $c['create']    = 1;\n        $c['overwrite'] = 0;\n        $dir = opendir('@www-dir@/sql/.pearweb-upgrade');\n        $oldversion = false;\n        while (false !== ($entry = readdir($dir))) {\n            if ($entry[0] === '.') {\n                continue;\n            }\n            if (strpos($entry, $answers['database']) === 0) {\n                // this is one of ours\n                // strip databasename-\n                $entry = substr($entry, strlen($answers['database']) + 1);\n                // strip \".ser\"\n                $entry = substr($entry, 0, strlen($entry) - 4);\n                // ... and we're left with just the version\n                if (!$oldversion) {\n                    $oldversion = $entry;\n                    continue;\n                }\n                if (version_compare($entry, $oldversion, '>')) {\n                    $oldversion = $entry;\n                }\n            }\n        }\n        if (!file_exists('@www-dir@/sql/.pearweb-upgrade/' .\n              $answers['database'] . '-@version@.ser')) {\n            $fp = fopen('@www-dir@/sql/.pearweb-upgrade/' .\n                $answers['database'] . '-@version@.ser', 'w');\n            fwrite($fp, serialize($c));\n            fclose($fp);\n        }\n        if ($oldversion == '@version@') {\n            // this is where to change if we need to add a \"force upgrade of\n            // structure\" option\n            // we would uncomment the following line:\n            //$c['overwrite'] = true;\n            $oldversion = false;\n        }\n        if ($oldversion) {\n            try {\n                $sFile = '@www-dir@/sql/.pearweb-upgrade/' . $answers['database'] . '-' . $oldversion . '.ser';\n                $curdef = unserialize(file_get_contents($sFile), ['allowed_classes' => false]);\n            } catch (Exception $ex) {\n                $curdef = false;\n            }\n            if (!is_array($curdef)) {\n                $this->_ui->outputData('invalid data returned from previous version');\n            }\n            // get a database diff (MDB2_Schema is very useful here)\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $c = $a->compareDefinitions($c, $curdef);\n            if (PEAR::isError($c)) {\n                $this->_ui->outputData($err->getMessage());\n                $this->_ui->outputData($err->getUserInfo());\n                $this->_ui->outputData('Unable to automatically update database');\n                return false;\n            }\n            $err = $a->updateDatabase($curdef, $c);\n            PEAR::staticPopErrorHandling();\n        } else {\n            PEAR::staticPushErrorHandling(PEAR_ERROR_RETURN);\n            $err = $a->createDatabase($c);\n            PEAR::staticPopErrorHandling();\n        }\n        if (PEAR::isError($err)) {\n            $this->_ui->outputData($err->getUserInfo());\n            $this->_ui->outputData($err->getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This helper function parses httpd.conf and adds needed information\n     * for pearweb to run.\n     *\n     * In essence, this takes the contents of docs/apache_setup.txt and\n     * adds them to httpd.conf with paths replaced that are needed to\n     * make the thing work.\n     *\n     * @param array $answers\n     * @return boolean\n     */\n    function setupHttpdconf($answers)\n    {\n        $eol = defined('PHP_EOL') ? PHP_EOL : (OS_WINDOWS ? \"\\r\\n\" : \"\\n\");\n        if (!realpath($answers['path']) || !file_exists($answers['path'])) {\n            $this->_ui->outputData('No such file: \"' . $answers['path'] . '\"');\n            return false;\n        }\n        $httpdconf = file(realpath($answers['path']));\n        $found = array();\n        foreach ($httpdconf as $num => $line) {\n            $line = trim($line);\n            if (!$line) {\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) start') === 0) {\n                $found['start'] = $num;\n                continue;\n            }\n            if (strpos($line, '# inserted by pearweb #### (do not remove) end') === 0) {\n                $found['end'] = $num;\n            }\n        }\n        if (array_key_exists('start', $found) && array_key_exists('end', $found)) {\n            $one = array_slice($httpdconf, 0, $found['start'] - 1);\n            $two = array_slice($httpdconf, $found['end'] + 1);\n        } else {\n            $one = $httpdconf;\n            $two = array();\n        }\n        // here we go...\n        $middle = array();\n        $middle[] = $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) start' . $eol;\n        $middle[] = '<VirtualHost ' . $answers['namehost'] . '>' . $eol;\n        $middle[] = ' ServerName ' . $answers['pear'] . $eol;\n        $middle[] = $eol;\n        // apache requires all path separators to be \"/\" even on windows\n        $middle[] = ' DocumentRoot ' . str_replace('\\\\', '/', '@www-dir@') . '/public_html' . $eol;\n        $middle[] = ' DirectoryIndex index.php index.html' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' php_value include_path .' . PATH_SEPARATOR .\n            str_replace('\\\\', '/', '@www-dir@')\n            . '/include' . PATH_SEPARATOR . str_replace('\\\\', '/', '@php-dir@') . $eol;\n        $middle[] = ' php_value auto_prepend_file pear-prepend.php' . $eol;\n        $middle[] = ' php_flag magic_quotes_gpc off' . $eol;\n        $middle[] = ' php_flag magic_quotes_runtime off' . $eol;\n        $middle[] = ' php_flag register_globals Off' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' ErrorDocument 404 /error/404.php' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' Alias /package ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/package-info.php' . $eol;\n        $middle[] = ' Alias /user    ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/account-info.php' . $eol;\n        $middle[] = ' Alias /sidebar/pear.gif ' . str_replace('\\\\', '/', '@www-dir@')\n            . '/public_html/gifs/pear_item.gif' . $eol;\n        $middle[] = ' Alias /distributions/manual/chm /var/lib/pear/chm' . $eol;\n        $middle[] = ' Alias /reference /var/lib/pear/apidoc' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RedirectPermanent /download-docs.php          http://'\n            . $answers['pear'] . '/manual/' . $eol;\n        $middle[] = ' RedirectPermanent /rss.php                    http://'\n            . $answers['pear'] . '/feeds/latest.rss' . $eol;\n        $middle[] = ' RedirectPermanent /weeklynews.php             http://'\n            . $answers['pear'] . '/' . $eol;\n        $middle[] = ' RedirectPermanent /support.php                http://'\n            . $answers['pear'] . '/support/' . $eol;\n        $middle[] = ' RedirectPermanent /credits.php                http://'\n            . $answers['pear'] . '/about/credits.php' . $eol;\n        $middle[] = ' RedirectPermanent /pepr/pepr-overview.php     http://'\n            . $answers['pear'] . '/pepr/' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteEngine On' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rules for the RSS feeds' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /feeds/(.+)\\.rss$ /feeds/feeds.php?type=$1' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the API documentation' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /package/([a-zA-Z0-9_]+)/docs/(.+)($/|$) /reference/$1-$2 [PT]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the Bug system' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' RewriteRule   /bugs/([0-9]+)/*$ /bugs/bug.php?id=$1 [R]\n' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = ' # Rewriting rule for the manual' . $eol;\n        $middle[] = ' # throw pecl doc people to the php manual' . $eol;\n        $middle[] = ' #' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  RewriteRule   /manual/[a-z]{2}/pecl.([a-zA-Z0-9_-]+)\\.php$ http://www.php.net/$1 [R=301]' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' SetEnvIf User-Agent \"MS Search 4\\.0 Robot\\)$\" badrobot' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Directory />' . $eol;\n        $middle[] = '  order deny,allow' . $eol;\n        $middle[] = '  deny from env=badrobot' . $eol;\n        $middle[] = ' </Directory>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /get>' . $eol;\n        $middle[] = '  ForceType application/x-httpd-php' . $eol;\n        $middle[] = $eol;\n        $middle[] = '  Deny From 194.51.105.35' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /manual>' . $eol;\n        $middle[] = '  ErrorDocument 404 /error/404-manual.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /bugs/include>' . $eol;\n        $middle[] = '  deny from all' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = ' <Location /trackback>' . $eol;\n        $middle[] = '  DirectoryIndex trackback.php' . $eol;\n        $middle[] = ' </Location>' . $eol;\n        $middle[] = $eol;\n        $middle[] = '</VirtualHost>' . $eol;\n        $middle[] = '# inserted by pearweb #### (do not remove) end' . $eol;\n        $one = array_merge($one, $middle);\n        $httpdconf = array_merge($one, $two);\n        $this->_ui->outputData('opening ' . $answers['path'] . ' for writing');\n        $fp = fopen(realpath($answers['path']), 'w');\n        $this->_ui->outputData('writing data...');\n        fwrite($fp, implode('', $httpdconf));\n        fclose($fp);\n        $this->_ui->outputData('...done');\n        return true;\n    }\n}\n", "<?php\n/*\n   +----------------------------------------------------------------------+\n   | PEAR Web site version 1.0                                            |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 2001-2005 The PHP Group                                |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 2.02 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available at through the world-wide-web at                           |\n   | http://www.php.net/license/2_02.txt.                                 |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Authors: Martin Jansen <mj@php.net>                                  |\n   +----------------------------------------------------------------------+\n   $Id$\n*/\n\nredirect_to_https();\nauth_require(true);\nrequire_once 'HTML/Table.php';\n\nif (!empty($_GET['phpinfo'])) {\n    phpinfo();\n    exit();\n}\n\nclass BorderBox\n{\n    function __construct($title, $width = '90%', $indent = '', $cols = 1,\n        $open = false\n    ) {\n        $this->title  = $title;\n        $this->width  = $width;\n        $this->indent = $indent;\n        $this->cols   = $cols;\n        $this->open   = $open;\n        $this->start();\n    }\n\n    function start()\n    {\n        $title = $this->title;\n        if (is_array($title)) {\n            $title = implode('</th><th>', $title);\n        }\n        $i = $this->indent;\n        echo \"<!-- border box starts -->\\n\";\n        echo \"$i<table cellpadding=\\\"0\\\" style=\\\"width: $this->width; border: 0px;\\\">\\n\";\n        echo \"$i <tr>\\n\";\n        echo \"$i  <td>\\n\";\n        echo \"$i   <table cellpadding=\\\"2\\\" style=\\\"width: 100%; border: 0px;\\\">\\n\";\n        echo \"$i    <tr style=\\\"background-color: #CCCCCC;\\\">\\n\";\n        echo \"$i     <th\";\n        if ($this->cols > 1) {\n            echo \" colspan=\\\"$this->cols\\\"\";\n        }\n        echo \">$title</th>\\n\";\n        echo \"$i    </tr>\\n\";\n        if (!$this->open) {\n            echo \"$i    <tr style=\\\"background-color: #FFFFFF;\\\">\\n\";\n            echo \"$i     <td>\\n\";\n        }\n    }\n\n    function end()\n    {\n        $i = $this->indent;\n        if (!$this->open) {\n            echo \"$i     </td>\\n\";\n            echo \"$i    </tr>\\n\";\n        }\n        echo \"$i   </table>\\n\";\n        echo \"$i  </td>\\n\";\n        echo \"$i </tr>\\n\";\n        echo \"$i</table>\\n\";\n        echo \"<!-- border box ends -->\\n\";\n    }\n\n    function horizHeadRow($heading /* ... */)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        echo \"$i     <th style=\\\"vertical-align: top; background-color: #CCCCCC;\\\">$heading</th>\\n\";\n        for ($j = 0; $j < $this->cols-1; $j++) {\n            echo \"$i     <td style=\\\"vertical-align: top; background-color: #E8E8E8\\\">\";\n            $data = @func_get_arg($j + 1);\n            echo !isset($data) ? \"&nbsp;\" : $data;\n            echo \"</td>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n\n    }\n\n    function headRow()\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        for ($j = 0; $j < $this->cols; $j++) {\n            echo \"$i     <th style=\\\"vertical-align: top; background-color: #FFFFFF;\\\">\";\n            $data = @func_get_arg($j);\n            if (empty($data)) {\n                echo '&nbsp;';\n            } else {\n                print $data;\n            }\n            echo \"</th>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n    }\n\n    function plainRow(/* ... */)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        for ($j = 0; $j < $this->cols; $j++) {\n            echo \"$i     <td style=\\\"vertical-align: top; background-color: #FFFFFF;\\\">\";\n            $data = @func_get_arg($j);\n            if (empty($data)) {\n                echo '&nbsp;';\n            } else {\n                print $data;\n            }\n            echo \"</td>\\n\";\n        }\n        echo \"$i    </tr>\\n\";\n    }\n\n    function fullRow($text)\n    {\n        $i = $this->indent;\n        echo \"$i    <tr>\\n\";\n        echo \"$i     <td style=\\\"background-color: #E8E8E8;\\\"\";\n        if ($this->cols > 1) {\n            echo \" colspan=\\\"$this->cols\\\"\";\n        }\n        echo \">$text</td>\\n\";\n        echo \"$i    </tr>\\n\";\n\n    }\n}\n\nresponse_header('PEAR Administration');\n\n// {{{ adding and deleting notes\nif (!empty($_REQUEST['cmd'])) {\n    if ($_REQUEST['cmd'] == \"Add note\" && !empty($_REQUEST['note']) && !empty($_REQUEST['id'])) {\n        include_once 'pear-database-note.php';\n        note::add($_REQUEST['id'], $_REQUEST['note']);\n        unset($_REQUEST['cmd']);\n\n    } elseif ($_REQUEST['cmd'] == \"Delete note\" && !empty($_REQUEST['id'])) {\n        include_once 'pear-database-note.php';\n\n        // Delete note\n        note::remove($_REQUEST['id']);\n\n    } elseif ($_REQUEST['cmd'] == \"Open Account\" && !empty($_REQUEST['uid'])) {\n        /**\n         * Open account\n         */\n\n        $karmalevel = (empty($_REQUEST['karma'])) ? 'pear.pepr' : $_REQUEST['karma'];\n        // another hack to remove the temporary \"purpose\" field\n        // from the user's \"userinfo\"\n        include_once 'pear-database-user.php';\n        if (user::activate($_REQUEST['uid'], $karmalevel)) {\n            $uid = strip_tags(htmlspecialchars($_REQUEST['uid']));\n            print \"<p>Opened account $uid...</p>\\n\";\n        }\n\n    } elseif ($_REQUEST['cmd'] == \"Reject Request\" && !empty($_REQUEST['uid'])) {\n        // Reject account request\n        include_once 'pear-database-user.php';\n        if (is_array($_REQUEST['uid'])) {\n            foreach ($_REQUEST['uid'] as $uid) {\n                user::rejectRequest((int) $uid, $_REQUEST['reason']);\n                echo 'Account rejected: ' . (int) $uid . '<br />';\n            }\n\n        } elseif (user::rejectRequest($_REQUEST['uid'], $_REQUEST['reason'])) {\n            print \"<p>Rejected account request for $uid...</p>\\n\";\n        }\n\n    } elseif ($_REQUEST['cmd'] == \"Delete Request\" && !empty($_REQUEST['uid'])) {\n        // Delete account request\n        include_once 'pear-database-user.php';\n        if (is_array($_REQUEST['uid'])) {\n            foreach ($_REQUEST['uid'] as $uid) {\n                user::remove((int) $uid);\n                echo 'Account request deleted: ';\n                echo filter_var($uid, FILTER_SANITIZE_STRING) . '<br />';\n            }\n\n\n        } elseif (user::remove((int) $_REQUEST['uid'])) {\n            print \"<p>Deleted account request for \\\"$uid\\\"...</p>\";\n        }\n    } elseif ($_REQUEST['cmd'] == 'Move'  && !empty($_REQUEST['acreq'])\n        && isset($_REQUEST['from_site'])\n        && in_array($_REQUEST['from_site'], ['pear', 'pecl'])\n    ) {\n        include_once 'pear-database-user.php';\n        $data = array(\n            'handle'    => $_REQUEST['acreq'],\n            'from_site' => $_REQUEST['from_site'],\n        );\n\n        $res = user::update($data);\n        if (DB::isError($res)) {\n            echo 'DB error: ' .  $res->getMessage();\n        } else {\n            $to = strtoupper($_REQUEST['from_site']);\n            echo 'User has been moved to ' . $to;\n        }\n    }\n}\n\n// }}}\n\n// {{{ javascript functions\n\n?>\n<script type=\"text/javascript\">\n<!--\n\nfunction confirmed_goto(url, message) {\n    if (confirm(message)) {\n        location = url;\n    }\n}\n\nfunction confirmed_submit(button, action, required, errormsg) {\n    if (required && required.value == '') {\n        alert(errormsg);\n        return;\n    }\n    if (confirm('Are you sure you want to ' + action + '?')) {\n        button.form.cmd.value = button.value;\n        button.form.submit();\n    }\n}\n\nfunction updateRejectReason(selectObj) {\n    if (selectObj.selectedIndex != 0) {\n        document.forms['account_form'].reason.value = selectObj.options[selectObj.selectedIndex].value;\n    }\n    selectObj.selectedIndex = 0;\n}\n// -->\n</script>\n<?php\n\n// }}}\n\n$self = htmlspecialchars($_SERVER['PHP_SELF']);\n$acreq = isset($_GET['acreq']) ? strip_tags(htmlspecialchars($_GET['acreq'])) : '';\ndo {\n\n    // {{{ \"approve account request\" form\n\n    if (!empty($acreq)) {\n        include_once 'pear-database-user.php';\n        $requser = user::info($acreq, null, false);\n        if (empty($requser['name']) || $requser['from_site'] == 'pecl') {\n            break;\n        }\n        try {\n            $uInfo = @unserialize($requser['userinfo'], ['allowed_classes' => false]);\n            if ($uInfo !== false) {\n                list($purpose, $moreinfo) = $uInfo;\n            }\n        } catch (Exception $ex) {\n            $purpose = 'n/a';\n            $moreinfo = 'n/a';\n        }\n\n        $bb = new BorderBox('Account request from ' . $requser['name'] . ' &lt;' . $requser['email'] . '&gt;', \"100%\", '', 2, true);\n        $bb->horizHeadRow(\"Requested username:\", $requser['handle']);\n        $bb->horizHeadRow(\"Realname:\", $requser['name']);\n        $bb->horizHeadRow(\"Email address:\", '<a href=\"mailto:' . $requser['email'] . '\">' . $requser['email'] . \"</a>\");\n        $bb->horizHeadRow(\"Purpose of account:\", $purpose);\n        $bb->horizHeadRow(\"More information:\", $moreinfo);\n        $bb->end();\n\n        $i = \"      \";\n        print \"<br />\\n\";\n        print \"$i<form action=\\\"$self\\\" method=\\\"POST\\\">\\n\";\n        print $i . '   <input type=\"hidden\" name=\"id\" value=\"' . $requser['handle'] . \"\\\" />\\n\";\n        print \"$i   <input type=\\\"hidden\\\" name=\\\"acreq\\\" value=\\\"$acreq\\\" />\\n\";\n        print $i . ' <select name=\"from_site\"> ' . \"\\n\";\n        print $i . '  <option value=\"pear\">PEAR</option>' . \"\\n\";\n        print $i . '  <option value=\"pecl\">PECL</option>' . \"\\n\";\n        print $i . ' </select> ' . \"\\n\";\n        print \"$i   <input type=\\\"submit\\\" value=\\\"Move\\\" name=\\\"cmd\\\" />\\n\";\n        print \"$i</form>\\n\";\n        print \"<br />\\n\";\n        $bb = new BorderBox('Notes for user ' . $requser['handle']);\n        $notes = $dbh->getAssoc(\n            \"SELECT id,nby,UNIX_TIMESTAMP(ntime) AS ntime,note FROM notes \".\n                    \"WHERE uid = ? ORDER BY ntime\", true,\n            array($requser['handle'])\n        );\n\n        if (is_array($notes) && sizeof($notes) > 0) {\n            print \"$i<table cellpadding=\\\"2\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\\n\";\n            foreach ($notes as $nid => $data) {\n                list($nby, $ntime, $note) = $data;\n                print \"$i <tr>\\n\";\n                print \"$i  <td>\\n\";\n                print \"$i   <b>$nby \" . date('H:i jS F Y', $ntime) . \":</b>\";\n                if ($nby == $auth_user->handle) {\n                    $url = \"$self?acreq=$acreq&cmd=Delete+note&id=$nid\";\n                    $msg = \"Are you sure you want to delete this note?\";\n                    print \"[<a href=\\\"javascript:confirmed_goto('$url', '$msg')\\\">delete your note</a>]\";\n                }\n                print \"<br />\\n\";\n                print \"$i   \".htmlspecialchars($note).\"\\n\";\n                print \"$i  </td>\\n\";\n                print \"$i </tr>\\n\";\n                print \"$i <tr><td>&nbsp;</td></tr>\\n\";\n            }\n            print \"$i</table>\\n\";\n        } else {\n            print \"No notes.\";\n        }\n        print \"$i<form action=\\\"$self\\\" method=\\\"POST\\\">\\n\";\n        print \"$i<table cellpadding=\\\"2\\\" cellspacing=\\\"0\\\" border=\\\"0\\\">\\n\";\n        print \"$i <tr>\\n\";\n        print \"$i  <td>\\n\";\n        print \"$i   To add a note, enter it here:<br />\\n\";\n        print \"$i    <textarea rows=\\\"3\\\" cols=\\\"55\\\" name=\\\"note\\\"></textarea><br />\\n\";\n        print \"$i   <input type=\\\"submit\\\" value=\\\"Add note\\\" name=\\\"cmd\\\" />\\n\";\n        print $i . '   <input type=\"hidden\" name=\"id\" value=\"' . $requser['handle'] . \"\\\" />\\n\";\n        print \"$i   <input type=\\\"hidden\\\" name=\\\"acreq\\\" value=\\\"$acreq\\\" />\\n\";\n        print \"$i  </td>\\n\";\n        print \"$i </tr>\\n\";\n        print \"$i</table>\\n\";\n        print \"$i</form>\\n\";\n\n        $bb->end();\n?>\n\n<form action=\"<?php echo $self; ?>\" method=\"POST\" name=\"account_form\">\n<input type=\"hidden\" name=\"cmd\" value=\"\" />\n<input type=\"hidden\" name=\"uid\" value=\"<?php echo $requser['handle'] ?>\" />\n<table cellpadding=\"3\" cellspacing=\"0\" border=\"0\" width=\"90%\">\n <tr>\n <td align=\"left\" colspan=\"3\">\n Select Karma Level:\n </td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.pepr\" name=\"karma\" checked=\"checked\" /> PEAR Proposer</td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.dev\" name=\"karma\" /> PEAR Developer</td>\n </tr>\n <tr>\n  <td align=\"left\" colspan=\"3\"><input type=\"radio\" value=\"pear.voter\" name=\"karma\" /> PEAR Voter <strong>only</strong></td>\n </tr>\n <tr>\n  <td align=\"center\"><input type=\"button\" value=\"Open Account\" onclick=\"confirmed_submit(this, 'open this account')\" /></td>\n  <td align=\"center\"><input type=\"button\" value=\"Reject Request\" onclick=\"confirmed_submit(this, 'reject this request', this.form.reason, 'You must give a reason for rejecting the request.')\" /></td>\n  <td align=\"center\"><input type=\"button\" value=\"Delete Request\" onclick=\"confirmed_submit(this, 'delete this request')\" /></td>\n </tr>\n <tr>\n  <td colspan=\"3\">\n   If dismissing an account request, enter the reason here\n   (will be emailed to <?php echo $requser['email'] ?>):<br />\n   <textarea rows=\"3\" cols=\"60\" name=\"reason\"></textarea><br />\n\n<?php\n$reasons = array(\"You don't need a PEAR account to use PEAR or PEAR packages.\\n\\n\" .\n                 \"As part of our ongoing Quality Assurance we would be interested in\\n\" .\n                 \"hearing what could be added  on the form to prevent someone making a\\n\" .\n                 \"similar mistake.\",\n\n                 \"Please fill out a bug report at http://\" . PEAR_CHANNELNAME . \"/bugs/ for all\\n\" .\n                 \"bugs or patches.\",\n\n                 \"Please supply valid credentials, including your full name and a\\n\" .\n                 \"descriptive reason for an account.\"\n                 );\n?>\n\n    <select onchange=\"return updateRejectReason(this)\">\n           <option>Select reason...</option>\n<?php\nforeach ($reasons as $reason) {\n    echo \"<option value=\\\"\" . $reason . \"\\\">\" . substr($reason, 0, 90) . \"</option>\\n\";\n}\n?>\n   </select>\n\n  </td>\n</table>\n</form>\n\n<?php\n    // }}}\n    // {{{ admin menu\n    } else {\n    ?>\n        <script type=\"text/javascript\">\n        <!--\n            /**\n            * This code is *nasty* (nastyCode)\n            */\n\n            function highlightAccountRow(spanObj)\n            {\n                var highlightColor = '#cfffb7';\n                var mycolor = spanObj.parentNode.parentNode.childNodes[3].style.backgroundColor;\n\n                if (typeof(arguments[1]) == 'undefined') {\n                    if (mycolor.charAt(0) != '#') {\n                        mycolor = mycolor.replace(/ /g,'');\n                        mycolor = mycolor.toLowerCase();\n                        var bits = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mycolor);\n                        r = parseInt(bits[1]);\n                        g = parseInt(bits[2]);\n                        b = parseInt(bits[3]);\n                        r = r.toString(16);\n                        g = g.toString(16);\n                        b = b.toString(16);\n                        if (r.length == 1) r = '0' + r;\n                        if (g.length == 1) g = '0' + g;\n                        if (b.length == 1) b = '0' + b;\n                        mycolor = '#'+r+g+b;\n                    }\n                    if (mycolor != highlightColor) {\n                        spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked = true;\n                        action = true;\n                    } else {\n                        spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked = false;\n                        action = false;\n                    }\n                } else {\n                    action = !spanObj.parentNode.parentNode.childNodes[1].childNodes[0].checked;\n                }\n\n                if (document.getElementById) {\n                    for (var i=0; i<spanObj.parentNode.parentNode.childNodes.length; i++) {\n                        if (!spanObj.parentNode.parentNode.childNodes[i].style) {\n                            continue;\n                        }\n                        if (action) {\n                            spanObj.parentNode.parentNode.childNodes[i].style.backgroundColor = highlightColor;\n                        } else {\n                            spanObj.parentNode.parentNode.childNodes[i].style.backgroundColor = '#ffffff';\n                        }\n                    }\n                }\n                return true;\n            }\n\n            allSelected = false;\n\n            function toggleSelectAll(linkElement)\n            {\n                tableBodyElement = linkElement.parentNode.parentNode.parentNode.parentNode;\n\n                for (var i=0; i<tableBodyElement.childNodes.length; i++) {\n                    if (tableBodyElement.childNodes[i].childNodes[0].childNodes[0].tagName == 'INPUT') {\n                        highlightAccountRow(tableBodyElement.childNodes[i].childNodes[1].childNodes[0], !allSelected);\n                    }\n                }\n\n                allSelected = !allSelected;\n            }\n\n            function setCmdInput(mode)\n            {\n                switch (mode) {\n                    case 'reject':\n                        if (document.forms['mass_reject_form'].reason.selectedIndex == 0) {\n                            alert('Please select a reason to reject the accounts!');\n\n                        } else if (confirm('Are you sure you want to reject these account requests ?')) {\n                            document.forms['mass_reject_form'].cmd.value = 'Reject Request';\n                            return true;\n                        }\n                        break;\n\n                    case 'delete':\n                        if (confirm('Are you sure you want to delete these account requests ?')) {\n                            document.forms['mass_reject_form'].cmd.value = 'Delete Request';\n                            return true;\n                        }\n                        break;\n                }\n\n                return false;\n            }\n        //-->\n        </script>\n        <form action=\"<?php echo $self; ?>\" name=\"mass_reject_form\" method=\"post\">\n        <input type=\"hidden\" value=\"\" name=\"cmd\"/>\n    <?php\n\n        $table = new HTML_Table('style=\"width: 100%\" cellspacing=\"2\"');\n        $table->setCaption('Account Requests', 'style=\"background-color: #CCCCCC;\"');\n        $requests = $dbh->getAssoc(\n            \"SELECT u.handle,u.name,n.note,u.userinfo FROM users u \".\n                                   \"LEFT JOIN notes n ON n.uid = u.handle \".\n            \"WHERE u.registered = 0\"\n        );\n    if (is_array($requests) && sizeof($requests) > 0) {\n        $head = array(\n        \"<a href=\\\"#\\\" onclick=\\\"toggleSelectAll(this)\\\">&#x2713;</a>\",\n        \"Name\", \"Handle\", \"Account Purpose\", \"Status\", \"&nbsp;\"\n        );\n        $table->addRow($head, null, 'th');\n\n        foreach ($requests as $handle => $data) {\n            list($name, $note, $userinfo) = $data;\n\n                // Grab userinfo/request purpose\n            if (@unserialize($userinfo, ['allowed_classes' => false])) {\n                $userinfo = @unserialize($userinfo, ['allowed_classes' => false]);\n                $account_purpose = $userinfo[0];\n            } else {\n                $account_purpose = $userinfo;\n            }\n\n            $rejected = (preg_match(\"/^Account rejected:/\", $note));\n            if ($rejected) {\n                continue;\n            }\n            $table->addRow(\n                array(\n                '<input type=\"checkbox\" value=\"' . $handle . '\" name=\"uid[]\" onclick=\"return highlightAccountRow(this)\"/>',\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $name),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $handle),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', $account_purpose),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', ($rejected ? \"rejected\" : \"<font color=\\\"#c00000\\\"><strong>Outstanding</strong></font>\")),\n                sprintf('<span style=\"cursor: hand\" onclick=\"return highlightAccountRow(this)\">%s</span>', \"<a onclick=\\\"event.cancelBubble = true\\\" href=\\\"$self?acreq=$handle\\\">\" . make_image(\"edit.gif\") . \"</a>\")\n                )\n            );\n        }\n\n    } else {\n        print \"No account requests.\";\n    }\n        $table->setAllAttributes('style=\"vertical-align: top;\"');\n        echo $table->toHTML();\n\n    ?>\n        <br />\n        <table align=\"center\">\n        <tr>\n            <td>\n                <select name=\"reason\">\n                    <option value=\"\">Select rejection reason...</option>\n                    <option value=\"Account not needed\">Account not needed</option>\n                </select>\n            </td>\n            <td><input type=\"submit\" value=\"Reject selected accounts\" onclick=\"return setCmdInput('reject')\" /></td>\n        </tr>\n        <tr>\n            <td>&nbsp;</td>\n            <td><input type=\"submit\" value=\"Delete selected accounts\" onclick=\"return setCmdInput('delete')\" /></td>\n        </tr>\n        </table>\n\n        </form>\n<?php\n    }\n\n    // }}}\n\n} while (false);\n\nresponse_footer();\n", "#!/usr/bin/env php\n<?php\nrequire_once 'MDB2.php';\n$dsn  = 'mysql://root:@localhost/pear';\n\ntry {\n    $proposal_id = (int) $argv[1];\n    if ($proposal_id < 1) {\n        throw InvalidArgumentException(\"Please supply a number: ./rollback.php NUM\");\n    }\n\n    $mdb2 = MDB2::connect($dsn);\n    if (MDB2::isError($mdb2)) {\n        throw new RuntimeException(\"Could not connect to database: {$e->getDebugInfo()}\");\n    }\n    $pearweb = new Pearweb_Rollback($proposal_id, $mdb2);\n    $pearweb->rollback();\n\n} catch (Exception $e) {\n    echo $e->getMessage();\n    exit(1);\n}\n\necho \"All is well.\\n\";\nexit;\n\nclass Pearweb_Rollback\n{\n    protected $mdb2;\n    protected $proposal;\n\n    public function __construct($proposal, MDB2_Driver_Common $mdb2)\n    {\n        if (!is_int($proposal)) {\n            throw new InvalidArgumentException('$proposal must be an int');\n        }\n        $this->proposal = $proposal;\n        $this->mdb2     = $mdb2;\n    }\n\n    public function rollback()\n    {\n        $this->moveVotes();\n        echo \"Moved votes to comments...\\n\";\n\n        $this->resetDate();\n        echo \"Reset vote date...\\n\";\n\n        $this->resetStatus();\n        echo \"Reset status...\\n\";\n    }\n\n    protected function moveVotes()\n    {\n        $sql = \"SELECT * FROM package_proposal_votes WHERE pkg_prop_id = {$this->proposal}\";\n        $res = $this->mdb2->query($sql);\n        if (MDB2::isError($res)) {\n            throw new RuntimeException(\"DB error occurred: {$res->getDebugInfo()}\");\n        }\n        if ($res->numRows() == 0) {\n            return; // nothing to do\n        }\n\n        $insert  = \"INSERT INTO package_proposal_comments (\";\n        $insert .= \"user_handle, pkg_prop_id, timestamp, comment\";\n        $insert .= \") VALUES(%s, {$this->proposal}, %d, %s)\";\n\n        $delete  = \"DELETE FROM package_proposal_votes WHERE\";\n        $delete .= \" pkg_prop_id = {$this->proposal}\";\n        $delete .= \" AND user_handle = %s\";\n\n        while ($row = $res->fetchRow(MDB2_FETCHMODE_OBJECT)) {\n\n            $comment  = \"Original vote: {$row->value}\\n\";\n            $comment .= \"Conditional vote: \" . ($row->is_conditional != 0)?'yes':'no' . \"\\n\";\n            $comment .= \"Comment on vote: \" . $row->comment . \"\\n\\n\";\n            $reviewed = \"Reviewed: n/a\";\n            try {\n                $uInfo = unserialize($row->reviews, ['allowed_classes' => false]);\n                if ($uInfo !== false) {\n                    $reviewed = \"Reviewed: \" . implode(\", \", $uInfo);\n                }\n            } catch (Exception $ex) {\n                // do nothing\n            }\n            $comment .= $reviewed;\n\n            $sql = sprintf(\n                $insert,\n                $this->mdb2->quote($row->user_handle),\n                $row->timestamp,\n                $this->mdb2->quote($comment)\n            );\n            $this->queryChange($sql);\n\n            $sql = sprintf(\n                $delete,\n                $this->mdb2->quote($row->user_handle)\n            );\n            $this->queryChange($sql);\n        }\n\n        $res->free();\n        return true;\n    }\n\n    protected function queryChange($sql)\n    {\n        $affected = $this->mdb2->exec($sql);\n        if (MDB2::isError($affected)) {\n            throw new RuntimeException(\"DB error occurred: \" . $affected->getDebugInfo());\n        }\n        if ($affected < 1) {\n            throw new UnexpectedValueException(\"No rows affected. Invalid proposal ID?\");\n        }\n        return true;\n    }\n\n    protected function resetDate()\n    {\n        $sql = \"UPDATE package_proposals SET vote_date = null WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n\n    protected function resetStatus()\n    {\n        $sql = \"UPDATE proposal SET status='proposal' WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n}\n", "#!/usr/bin/env php\n<?php\nrequire_once 'MDB2.php';\n$dsn  = 'mysqli://pear:pear@localhost/pear';\n\ntry {\n    $proposal_id = (int) $argv[1];\n    if ($proposal_id < 1) {\n        throw new InvalidArgumentException(\"Please supply a number: ./rollback.php NUM\");\n    }\n\n    $mdb2 = MDB2::connect($dsn);\n    if (MDB2::isError($mdb2)) {\n        throw new RuntimeException(\"Could not connect to database: {$mdb2->getDebugInfo()}\");\n    }\n    $pearweb = new Pearweb_Rollback($proposal_id, $mdb2);\n    $pearweb->rollback();\n\n} catch (Exception $e) {\n    echo $e->getMessage();\n    exit(1);\n}\n\necho \"All is well.\\n\";\nexit;\n\nclass Pearweb_Rollback\n{\n    protected $mdb2;\n    protected $proposal;\n\n    public function __construct($proposal, MDB2_Driver_Common $mdb2)\n    {\n        if (!is_int($proposal)) {\n            throw new InvalidArgumentException('$proposal must be an int');\n        }\n        $this->proposal = $proposal;\n        $this->mdb2     = $mdb2;\n    }\n\n    public function rollback()\n    {\n        $this->moveVotes();\n        echo \"Moved votes to comments...\\n\";\n\n        $this->resetDate();\n        echo \"Reset vote date...\\n\";\n\n        $this->resetStatus();\n        echo \"Reset status...\\n\";\n    }\n\n    protected function moveVotes()\n    {\n        $sql = \"SELECT * FROM package_proposal_votes WHERE pkg_prop_id = {$this->proposal}\";\n        $res = $this->mdb2->query($sql);\n        if (MDB2::isError($res)) {\n            throw new RuntimeException(\"DB error occurred: {$res->getDebugInfo()}\");\n        }\n        if ($res->numRows() == 0) {\n            return; // nothing to do\n        }\n\n        $insert  = \"INSERT INTO package_proposal_comments (\";\n        $insert .= \"user_handle, pkg_prop_id, timestamp, comment\";\n        $insert .= \") VALUES(%s, {$this->proposal}, %d, %s)\";\n\n        $delete  = \"DELETE FROM package_proposal_votes WHERE\";\n        $delete .= \" pkg_prop_id = {$this->proposal}\";\n        $delete .= \" AND user_handle = %s\";\n\n        while ($row = $res->fetchRow(MDB2_FETCHMODE_OBJECT)) {\n\n            $comment  = \"Original vote: {$row->value}\\n\";\n            $comment .= \"Conditional vote: \" . (($row->is_conditional != 0)?'yes':'no') . \"\\n\";\n            $comment .= \"Comment on vote: \" . $row->comment . \"\\n\";\n            $reviewed = \"Reviewed: n/a\";\n            try {\n                $uInfo = unserialize($row->reviews, ['allowed_classes' => false]);\n                if ($uInfo !== false) {\n                    $reviewed = \"Reviewed: \" . implode(\", \", $uInfo);\n                }\n            } catch (Exception $ex) {\n                // do nothing\n            }\n            $comment .= $reviewed;\n\n            $sql = sprintf(\n                $insert,\n                $this->mdb2->quote($row->user_handle),\n                $row->timestamp,\n                $this->mdb2->quote($comment)\n            );\n            $this->queryChange($sql);\n\n            $sql = sprintf(\n                $delete,\n                $this->mdb2->quote($row->user_handle)\n            );\n            $this->queryChange($sql);\n        }\n\n        $res->free();\n        return true;\n    }\n\n    protected function queryChange($sql)\n    {\n        $affected = $this->mdb2->exec($sql);\n        if (MDB2::isError($affected)) {\n            throw new RuntimeException(\"DB error occurred: \" . $affected->getDebugInfo());\n        }\n        if ($affected < 1) {\n            throw new UnexpectedValueException(\"No rows affected. Invalid proposal ID?\");\n        }\n        return true;\n    }\n\n    protected function resetDate()\n    {\n        $sql = \"UPDATE package_proposals SET vote_date = null WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n\n    protected function resetStatus()\n    {\n        $sql = \"UPDATE package_proposals SET status='proposal' WHERE id = {$this->proposal}\";\n        return $this->queryChange($sql);\n    }\n}\n"], "filenames": ["include/bugs/pear-bug-accountrequest.php", "include/pear-database-user.php", "include/pepr/pepr-ppvote.php", "include/users/passwordmanage.php", "pearweb.php", "pearweb_election.php", "pearweb_pepr.php", "public_html/admin/index.php", "rollback.php", "scripts/rollbackProposal.php"], "buggy_code_start_loc": [239, 49, 60, 58, 148, 141, 148, 270, 77, 77], "buggy_code_end_loc": [240, 50, 75, 95, 359, 170, 326, 516, 78, 78], "fixing_code_start_loc": [239, 49, 60, 58, 148, 141, 148, 270, 77, 77], "fixing_code_end_loc": [244, 54, 85, 100, 364, 174, 330, 524, 87, 87], "type": "CWE-502", "message": "pearweb < 1.32 suffers from Deserialization of Untrusted Data.", "other": {"cve": {"id": "CVE-2022-27158", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-15T18:15:10.227", "lastModified": "2022-04-22T15:35:32.143", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pearweb < 1.32 suffers from Deserialization of Untrusted Data."}, {"lang": "es", "value": "pearweb versiones anteriores a 1.32 sufre de una Deserializaci\u00f3n de Datos No Confiables"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php:pearweb:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.32.0", "matchCriteriaId": "DE5C22CF-A6B3-47BB-A84E-B3B88EAA2B1C"}]}]}], "references": [{"url": "https://github.com/pear/pearweb/commit/6447c174a6b4bd76d28ecca8543cbd24bf394f99", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pear/pearweb/commit/6447c174a6b4bd76d28ecca8543cbd24bf394f99"}}