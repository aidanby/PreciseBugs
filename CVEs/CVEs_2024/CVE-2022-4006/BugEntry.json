{"buggy_code": ["<?php\n/**\n * WBCE CMS\n * Way Better Content Editing.\n * Visit https://wbce.org to learn more and to join the community.\n *\n * @copyright Ryan Djurovich (2004-2009)\n * @copyright WebsiteBaker Org. e.V. (2009-2015)\n * @copyright WBCE Project (2015-)\n * @license GNU GPL2 (or any later version)\n */\n\n// Prevent this file from being accessed directly\nif (!defined('WB_PATH')) {\n    require_once dirname(__FILE__) . '/globalExceptionHandler.php';\n    throw new IllegalFileException();\n}\n\n// Load class Admin\nrequire_once WB_PATH . \"/framework/class.admin.php\";\n\nclass Login extends Admin\n{\n    private $_oMsgBox = null;\n    private $username;\n    private $password;\n\n    public function __construct($aConfig)\n    {\n        global $MESSAGE, $database;\n\n        parent::__construct();\n\n        $this->_oMsgBox = new MessageBox();\n        if (!defined('WB_FRONTEND')) {\n            $this->_oMsgBox->closeBtn = '';\n        }\n\n        // Get configuration values and turn them into properties\n        foreach ($aConfig as $key => $value) {\n            $this->{(strtolower($key))} = $value;\n        }\n\n        if (!isset($this->redirect_url)) {\n            $this->redirect_url = '';\n        }\n\n        // Get the supplied username and password\n        if ($this->get_post('username_fieldname') != '') {\n            $sUsername = $this->get_post('username_fieldname');\n            $sPassword = $this->get_post('password_fieldname');\n        } else {\n            $sUsername = 'username';\n            $sPassword = 'password';\n        }\n\n        // this makes only sense if a username is provided\n        if(filter_input(INPUT_POST, $sUsername)) {\n            $this->username = htmlspecialchars(strtolower($this->get_post($sUsername)), ENT_QUOTES);\n            $this->password = $this->get_post($sPassword);\n\n            // Figure out if the \"remember me\" option has been checked\n            if ($this->get_post('remember') == 'true') {\n                $this->remember = $this->get_post('remember');\n            } else {\n                $this->remember = false;\n            }\n\n            // Get the length of the supplied username and password\n            if ($this->get_post($sUsername) != '') {\n                $this->username_len = strlen($this->username);\n                $this->password_len = strlen($this->password);\n            }\n        }\n        // If the url is blank, set it to the default url\n        $this->url = $this->get_post('url');\n        if ($this->redirect_url != '') {\n            $this->url = $this->redirect_url;\n        }\n        if (empty($this->url)) {\n            $this->url = $aConfig['DEFAULT_URL'];\n        }\n        if ($this->is_authenticated() == true) {\n            // User already logged-in, redirect to preset url\n            header('Location: ' . $this->url);\n            exit();\n        } elseif ($this->is_remembered() == true) {\n            // User has been \"remembered\" Get the users password\n            $sSql = \"SELECT * FROM `{TP}users` 'WHERE `user_id`= %d\";\n            $resUser = $database->query(sprintf($sSql, $this->get_safe_remember_key()));\n            $aUserData = $resUser->fetchRow(MYSQLI_ASSOC);\n            $this->username = $aUserData['username'];\n            $this->password = $aUserData['password'];\n            // Check if the user exists (authenticate them)\n            if ($this->authenticate(true)) {\n                // Authentication successful\n                header(\"Location: \" . $this->url);\n                exit(0);\n            } else {\n                $this->_oMsgBox->error($MESSAGE['LOGIN_AUTHENTICATION_FAILED']);\n                $this->increase_attempts();\n            }\n        } elseif ($this->username == '' && $this->password == '') {\n            $this->_oMsgBox->info($MESSAGE['LOGIN_BOTH_BLANK'], 0, 1);\n            $this->display_login();\n        } elseif ($this->username == '') {\n            $this->_oMsgBox->error($MESSAGE['LOGIN_USERNAME_BLANK']);\n            $this->increase_attempts();\n        } elseif ($this->password == '') {\n            $this->_oMsgBox->error($MESSAGE['LOGIN_PASSWORD_BLANK']);\n            $this->increase_attempts();\n        } else {\n            // Check if the user exists (authenticate them)\n            if ($this->authenticate()) {\n                // Authentication successful\n                header(\"Location: \" . $this->url);\n                exit(0);\n            } else {\n                $this->_oMsgBox->error($MESSAGE['LOGIN_AUTHENTICATION_FAILED']);\n                $this->increase_attempts();\n            }\n        }\n    }\n\n    public function is_remembered()\n    {\n        return false;\n\n        // global $database;\n        // // add if get_safe_remember_key not empty\n        // if(isset($_COOKIE['REMEMBER_KEY']) && ($_COOKIE['REMEMBER_KEY'] != '') && ($this->get_safe_remember_key() <> '')){\n        //        // Check if the remember key is correct\n        //        // $database = new database();\n        //        $sql = \"SELECT `user_id` FROM `{TP}users` WHERE `remember_key` = '\";\n        //        $sql .= $this->get_safe_remember_key() . \"' LIMIT 1\";\n        //        $check_query = $database->query($sql);\n        //\n        //        if($check_query->numRows() > 0) {\n        //            $check_fetch = $check_query->fetchRow();\n        //            $iUserID = $check_fetch['user_id'];\n        //            // Check the remember key prefix\n        //            $remember_key_prefix = '';\n        //            $length = 11-strlen($iUserID);\n        //            if($length > 0) {\n        //                for($i = 1; $i <= $length; $i++) {\n        //                    $remember_key_prefix .= '0';\n        //                }\n        //        }\n        //        $remember_key_prefix .= $iUserID.'_';\n        //        $length = strlen($remember_key_prefix);\n        //        if(substr($_COOKIE['REMEMBER_KEY'], 0, $length) == $remember_key_prefix) {\n        //            return true;\n        //        } else {\n        //            return false;\n        //        }\n        //    } else {\n        //        return false;\n        //    }\n        // } else {\n        //    return false;\n        // }\n    }\n\n    /**\n     * @brief   Sanities the REMEMBER_KEY cookie to avoid SQL injection\n     *\n     * @return  string\n     */\n    public function get_safe_remember_key()\n    {\n        if (!((strlen($_COOKIE['REMEMBER_KEY']) == 23) && (substr($_COOKIE['REMEMBER_KEY'], 11, 1) == '_'))) {\n            return '';\n        }\n\n        // create a clean cookie (XXXXXXXXXXX_YYYYYYYYYYY) where X:= numeric, Y:= hash\n        $clean_cookie = sprintf('%011d', (int)substr($_COOKIE['REMEMBER_KEY'], 0, 11)) . substr($_COOKIE['REMEMBER_KEY'], 11);\n        return ($clean_cookie == $_COOKIE['REMEMBER_KEY']) ? $this->add_slashes($clean_cookie) : '';\n    }\n\n    /**\n     * @brief   Authenticate the user on login, write users data into $_SESSION\n     *          and write into the database the last login time\n     *\n     * @return  int     ammount of grroups the user is member of\n     * @global  object $database\n     */\n    public function authenticate($bRemembered = false)\n    {\n        global $database;\n        $sLoginname = preg_match('/[\\;\\=\\&\\|\\<\\> ]/', $this->username) ? '' : $this->username;\n\n        // Get user information\n        $sSql = \"SELECT * FROM `{TP}users` WHERE `username`='%s' AND `active` = 1\";\n        if ($bRemembered) {\n            $sSql .= \" AND `password` = '\" . $this->password . \"'\";\n        }\n        $resUsers = $database->query(sprintf($sSql, $sLoginname));\n        $aUserData = $resUsers->fetchRow(MYSQLI_ASSOC);\n        $iNumRows = $resUsers->numRows();\n\n        // Check if password is correct\n        if ($iNumRows == 1 && !$bRemembered) {\n            if ($this->doCheckPassword($aUserData['user_id'], $this->password) === false) {\n                $iNumRows = 0;\n            }\n        }\n\n        if ($iNumRows == 1) {\n            $iUserID = $aUserData['user_id'];\n            $this->user_id = $iUserID;\n            $_SESSION['USER_ID'] = $iUserID;\n            $_SESSION['GROUP_ID'] = $aUserData['group_id'];\n            $_SESSION['GROUPS_ID'] = $aUserData['groups_id'];\n            $_SESSION['USERNAME'] = $aUserData['username'];\n            $_SESSION['DISPLAY_NAME'] = $aUserData['display_name'];\n            $_SESSION['EMAIL'] = $aUserData['email'];\n            $_SESSION['HOME_FOLDER'] = $aUserData['home_folder'];\n\n            // Run remember function if needed\n            if ($this->remember == true) {\n                $this->password = $aUserData['password'];\n                $this->remember($this->user_id);\n            }\n\n            // Set language\n            if ($aUserData['language'] != '') {\n                $_SESSION['LANGUAGE'] = $aUserData['language'];\n            }\n\n            // Set timezone\n            if ($aUserData['timezone'] != '') {\n                $_SESSION['TIMEZONE'] = $aUserData['timezone'];\n            } else {\n                // Set a session var so apps can tell user is using default tz\n                $_SESSION['USE_DEFAULT_TIMEZONE'] = true;\n            }\n\n            // Set date format\n            if ($aUserData['date_format'] != '') {\n                $_SESSION['DATE_FORMAT'] = $aUserData['date_format'];\n            } else {\n                // Set a session var so apps can tell user is using default date format\n                $_SESSION['USE_DEFAULT_DATE_FORMAT'] = true;\n            }\n\n            // Set time format\n            if ($aUserData['time_format'] != '') {\n                $_SESSION['TIME_FORMAT'] = $aUserData['time_format'];\n            } else {\n                // Set a session var so apps can tell user is using default time format\n                $_SESSION['USE_DEFAULT_TIME_FORMAT'] = true;\n            }\n\n            // Get group information\n            $_SESSION['SYSTEM_PERMISSIONS'] = array();\n            $_SESSION['MODULE_PERMISSIONS'] = array();\n            $_SESSION['TEMPLATE_PERMISSIONS'] = array();\n            $_SESSION['GROUP_NAME'] = array();\n\n            $bFirstGroup = true;\n            foreach (explode(\",\", $this->get_session('GROUPS_ID')) as $iCurrGroupID) {\n                $sSql = \"SELECT * FROM `{TP}groups` WHERE `group_id` = %d\";\n                $resGroup = $database->query(sprintf($sSql, $iCurrGroupID));\n                $aGroup = $resGroup->fetchRow(MYSQLI_ASSOC);\n                $_SESSION['GROUP_NAME'][$iCurrGroupID] = $aGroup['name'];\n                // Set system permissions\n                if ($aGroup['system_permissions'] != '') {\n                    $_SESSION['SYSTEM_PERMISSIONS'] = array_merge($_SESSION['SYSTEM_PERMISSIONS'], explode(',', $aGroup['system_permissions']));\n                }\n                // Set module permissions\n                if ($aGroup['module_permissions'] != '') {\n                    if ($bFirstGroup) {\n                        $_SESSION['MODULE_PERMISSIONS'] = explode(',', $aGroup['module_permissions']);\n                    } else {\n                        $_SESSION['MODULE_PERMISSIONS'] = array_intersect($_SESSION['MODULE_PERMISSIONS'], explode(',', $aGroup['module_permissions']));\n                    }\n                }\n                // Set template permissions\n                if ($aGroup['template_permissions'] != '') {\n                    if ($bFirstGroup) {\n                        $_SESSION['TEMPLATE_PERMISSIONS'] = explode(',', $aGroup['template_permissions']);\n                    } else {\n                        $_SESSION['TEMPLATE_PERMISSIONS'] = array_intersect($_SESSION['TEMPLATE_PERMISSIONS'], explode(',', $aGroup['template_permissions']));\n                    }\n                }\n                $bFirstGroup = false;\n            }\n\n            // Update the users table with current ip and timestamp\n            $aUpdateUser = array(\n                'user_id' => $iUserID,\n                'login_when' => time(),\n                'login_ip' => $_SERVER['REMOTE_ADDR']\n            );\n            $database->updateRow('{TP}users', 'user_id', $aUpdateUser);\n        } else {\n            $iNumRows = 0;\n        }\n        // Return if the user exists or not\n        return $iNumRows;\n    }\n\n    public function remember($iUserID)\n    {\n        return true;\n\n        // global $database;\n        // $remember_key = '';\n        // // Generate user id to append to the remember key\n        // $length = 11-strlen($iUserID);\n        // if($length > 0) {\n        //    for($i = 1; $i <= $length; $i++) {\n        //        $remember_key .= '0';\n        //    }\n        // }\n        // // Generate remember key\n        // $remember_key .= $iUserID.'_';\n        // $salt = \"abchefghjkmnpqrstuvwxyz0123456789\";\n        // srand((double)microtime()*1000000);\n        // $i = 0;\n        // while ($i <= 10) {\n        //    $num = rand() % 33;\n        //    $tmp = substr($salt, $num, 1);\n        //    $remember_key = $remember_key . $tmp;\n        //    $i++;\n        // }\n        // $remember_key = $remember_key;\n        // // Update the remember key in the db\n        // // $database = new database();\n        // $database->query(\"UPDATE \".$this->users_table.\" SET remember_key = '$remember_key' WHERE user_id = '$iUserID' LIMIT 1\");\n        // if($database->is_error()) {\n        //    return false;\n        // } else {\n        //    // Workout options for the cookie\n        //    $cookie_name = 'REMEMBER_KEY';\n        //    $cookie_value = $remember_key;\n        //    $cookie_expire = time()+60*60*24*30;\n        //    // Set the cookie\n        //    if(setcookie($cookie_name, $cookie_value, $cookie_expire, '/')) {\n        //        return true;\n        //    } else {\n        //        return false;\n        //    }\n        // }\n    }\n\n    /**\n     * @brief  Increase the count for login attempts\n     */\n    public function increase_attempts($increment = 1)\n    {\n        // we shall store them in the database and fetch them from there\n        // because an attacker can easily open plenty of new sessions\n        global $database;\n\n        $client_ip = md5($this->get_client_ip());\n        $attempts = 0;\n        $timestamp = 0;\n\n        $sql = \"SELECT * FROM `\" . TABLE_PREFIX . \"blocking` WHERE `source_ip` = '\" . $client_ip . \"' LIMIT 1\";\n        $check_query = $database->query($sql);\n\n        $now = time();\n\n        if ($check_query != null && $check_query->numRows() > 0) {\n            $check_fetch = $check_query->fetchRow();\n            $attempts = $check_fetch['attempts'] + $increment;\n            $timestamp = $check_fetch['timestamp'];\n        } else {\n            $timestamp = $now;\n            $attempts = $increment;\n            $sql = \"INSERT INTO `\" . TABLE_PREFIX . \"blocking` SET `attempts` = '$attempts', `timestamp` = '$timestamp', `source_ip` = '$client_ip'\";\n            $database->query($sql);\n        }\n\n        $interval = $now - $timestamp;\n\n        if ($interval > $this->timeframe + 2 * pow(2, ($attempts - $this->max_attempts)) * $this->login_delay) {\n            // it's too long ago, forget the db entry and reset to the first attempt\n            $attempts = $increment;\n        }\n\n        $timestamp = time();\n\n        // update the database\n        $sql = \"UPDATE `\" . TABLE_PREFIX . \"blocking` SET `attempts` = '$attempts', `timestamp` = '$timestamp' WHERE `source_ip` = '$client_ip'\";\n        $database->query($sql);\n\n        if ($interval > $this->timeframe + pow(2, ($attempts - $this->max_attempts)) * $this->login_delay && $attempts > $this->max_attempts) {\n            // it's too long ago, reduce at least to allow one more attempt\n            $attempts = $this->max_attempts;\n        }\n\n        // to clean up database from old entries, use the occasion and discard everything we have not seen for more than a week\n        $timestamp = $now - 7 * 24 * 3600;\n        $sql = \"DELETE FROM `\" . TABLE_PREFIX . \"blocking` WHERE `timestamp` < '$timestamp'\";\n        $database->query($sql);\n\n        $_SESSION['ATTEMPTS'] = $attempts;\n\n        if ($this->get_session('ATTEMPTS') > $this->max_attempts) {\n            $this->warn();\n        } else {\n            $this->display_login();\n        }\n    }\n\n    /**\n     * @brief  get the client ip address from various php or environment variables\n     */\n    private function get_client_ip()\n    {\n        $ipaddress = '';\n        if (isset($_SERVER['HTTP_CLIENT_IP'])) {\n            $ipaddress = $this->get_server('HTTP_CLIENT_IP');\n        } elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            $ipaddress = $this->get_server('HTTP_X_FORWARDED_FOR');\n        } elseif (isset($_SERVER['HTTP_X_FORWARDED'])) {\n            $ipaddress = $this->get_server('HTTP_X_FORWARDED');\n        } elseif (isset($_SERVER['HTTP_FORWARDED_FOR'])) {\n            $ipaddress = $this->get_server('HTTP_FORWARDED_FOR');\n        } elseif (isset($_SERVER['HTTP_FORWARDED'])) {\n            $ipaddress = $this->get_server('HTTP_FORWARDED');\n        } elseif (isset($_SERVER['REMOTE_ADDR'])) {\n            $ipaddress = $this->get_server('REMOTE_ADDR');\n        } elseif (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n        } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n        } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n        } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n        } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n        } elseif (getenv('REMOTE_ADDR')) {\n            $ipaddress = getenv('REMOTE_ADDR');\n        } else {\n            $ipaddress = 'UNKNOWN';\n        }\n\n        return $ipaddress;\n    }\n\n    // ********************************************************************* //\n    // The two methods below are currently not in use\n    // ********************************************************************* //\n\n    // Function to set a \"remembering\" cookie for the user\n\n    /**\n     * @brief    Warn user that they have had too many login attempts\n     */\n    public function warn()\n    {\n        header('Location: ' . $this->warning_url);\n        exit(0);\n    }\n\n    // Function to check if a user has been remembered\n\n    /**\n     * @brief   Display the login screen\n     *\n     * @return  void  implements template object\n     * @global  array $MENU\n     * @global  array $TEXT\n     * @global  array $MESSAGE\n     */\n    public function display_login()\n    {\n        // Get language vars\n        global $MESSAGE, $MENU, $TEXT, $database;\n\n        if (!isset($_SESSION['ATTEMPTS']) || ($this->get_session('ATTEMPTS') > $this->max_attempts)) {\n            $this->increase_attempts($increment = 0);\n            return;\n        }\n\n        // Show the login form\n        if ($this->frontend != true) {\n            // Setup template object, parse vars to it, then parse it\n            require_once WB_PATH . '/include/phplib/template.inc';\n            $oTemplate = new Template(dirname($this->correct_theme_source($this->template_file)));\n            $oTemplate->set_file('page', $this->template_file);\n            $oTemplate->set_block('page', 'mainBlock', 'main');\n            if ($this->remember_me_option != true) {\n                $oTemplate->set_var('DISPLAY_REMEMBER_ME', 'display: none;');\n            } else {\n                $oTemplate->set_var('DISPLAY_REMEMBER_ME', '');\n            }\n            $aTextStrings = array(\n                'FORGOTTEN_DETAILS',\n                'USERNAME',\n                'PASSWORD',\n                'REMEMBER_ME',\n                'LOGIN',\n                'HOME'\n            );\n            foreach ($aTextStrings as $sToken) {\n                $oTemplate->set_var('TEXT_' . $sToken, $TEXT[$sToken]);\n            }\n            $oTemplate->set_var(array(\n                'WB_URL' => WB_URL,\n                'THEME_URL' => THEME_URL,\n                'VERSION' => VERSION,\n                'REVISION' => REVISION,\n                'PAGES_DIRECTORY' => PAGES_DIRECTORY,\n                'ACTION_URL' => $this->login_url,\n                'ATTEMPTS' => $this->get_session('ATTEMPTS'),\n                'USERNAME' => $this->username,\n                'USERNAME_FIELDNAME' => $this->username_fieldname,\n                'PASSWORD_FIELDNAME' => $this->password_fieldname,\n                //'MESSAGE' => $this->message,\n                'MESSAGE' => $this->_oMsgBox->fetchDisplay(),\n                'INTERFACE_DIR_URL' => ADMIN_URL . '/interface',\n                'MAX_USERNAME_LEN' => $this->max_username_len,\n                'MAX_PASSWORD_LEN' => $this->max_password_len,\n                'LANGUAGE' => strtolower(LANGUAGE),\n                'FORGOTTEN_DETAILS_APP' => $this->forgotten_details_app,\n                'SECTION_LOGIN' => $MENU['LOGIN'],\n                'CHARSET' => (defined('DEFAULT_CHARSET') ? DEFAULT_CHARSET : 'utf-8')\n            ));\n\n            $oTemplate->parse('main', 'mainBlock', false);\n            $oTemplate->pparse('output', 'page');\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * WBCE CMS\n * Way Better Content Editing.\n * Visit https://wbce.org to learn more and to join the community.\n *\n * @copyright Ryan Djurovich (2004-2009)\n * @copyright WebsiteBaker Org. e.V. (2009-2015)\n * @copyright WBCE Project (2015-)\n * @license GNU GPL2 (or any later version)\n */\n\n// Prevent this file from being accessed directly\nif (!defined('WB_PATH')) {\n    require_once dirname(__FILE__) . '/globalExceptionHandler.php';\n    throw new IllegalFileException();\n}\n\n// Load class Admin\nrequire_once WB_PATH . \"/framework/class.admin.php\";\n\nclass Login extends Admin\n{\n    private $_oMsgBox = null;\n    private $username;\n    private $password;\n\n    public function __construct($aConfig)\n    {\n        global $MESSAGE, $database;\n\n        parent::__construct();\n\n        $this->_oMsgBox = new MessageBox();\n        if (!defined('WB_FRONTEND')) {\n            $this->_oMsgBox->closeBtn = '';\n        }\n\n        // Get configuration values and turn them into properties\n        foreach ($aConfig as $key => $value) {\n            $this->{(strtolower($key))} = $value;\n        }\n\n        if (!isset($this->redirect_url)) {\n            $this->redirect_url = '';\n        }\n\n        // Get the supplied username and password\n        if ($this->get_post('username_fieldname') != '') {\n            $sUsername = $this->get_post('username_fieldname');\n            $sPassword = $this->get_post('password_fieldname');\n        } else {\n            $sUsername = 'username';\n            $sPassword = 'password';\n        }\n\n        // this makes only sense if a username is provided\n        if(filter_input(INPUT_POST, $sUsername)) {\n            $this->username = htmlspecialchars(strtolower($this->get_post($sUsername)), ENT_QUOTES);\n            $this->password = $this->get_post($sPassword);\n\n            // Figure out if the \"remember me\" option has been checked\n            if ($this->get_post('remember') == 'true') {\n                $this->remember = $this->get_post('remember');\n            } else {\n                $this->remember = false;\n            }\n\n            // Get the length of the supplied username and password\n            if ($this->get_post($sUsername) != '') {\n                $this->username_len = strlen($this->username);\n                $this->password_len = strlen($this->password);\n            }\n        }\n        // If the url is blank, set it to the default url\n        $this->url = $this->get_post('url');\n        if ($this->redirect_url != '') {\n            $this->url = $this->redirect_url;\n        }\n        if (empty($this->url)) {\n            $this->url = $aConfig['DEFAULT_URL'];\n        }\n        if ($this->is_authenticated() == true) {\n            // User already logged-in, redirect to preset url\n            header('Location: ' . $this->url);\n            exit();\n        } elseif ($this->is_remembered() == true) {\n            // User has been \"remembered\" Get the users password\n            $sSql = \"SELECT * FROM `{TP}users` 'WHERE `user_id`= %d\";\n            $resUser = $database->query(sprintf($sSql, $this->get_safe_remember_key()));\n            $aUserData = $resUser->fetchRow(MYSQLI_ASSOC);\n            $this->username = $aUserData['username'];\n            $this->password = $aUserData['password'];\n            // Check if the user exists (authenticate them)\n            if ($this->authenticate(true)) {\n                // Authentication successful\n                header(\"Location: \" . $this->url);\n                exit(0);\n            } else {\n                $this->_oMsgBox->error($MESSAGE['LOGIN_AUTHENTICATION_FAILED']);\n                $this->increase_attempts();\n            }\n        } elseif ($this->username == '' && $this->password == '') {\n            $this->_oMsgBox->info($MESSAGE['LOGIN_BOTH_BLANK'], 0, 1);\n            $this->display_login();\n        } elseif ($this->username == '') {\n            $this->_oMsgBox->error($MESSAGE['LOGIN_USERNAME_BLANK']);\n            $this->increase_attempts();\n        } elseif ($this->password == '') {\n            $this->_oMsgBox->error($MESSAGE['LOGIN_PASSWORD_BLANK']);\n            $this->increase_attempts();\n        } else {\n            // Check if the user exists (authenticate them)\n            if ($this->authenticate()) {\n                // Authentication successful\n                header(\"Location: \" . $this->url);\n                exit(0);\n            } else {\n                $this->_oMsgBox->error($MESSAGE['LOGIN_AUTHENTICATION_FAILED']);\n                $this->increase_attempts();\n            }\n        }\n    }\n\n    public function is_remembered()\n    {\n        return false;\n\n        // global $database;\n        // // add if get_safe_remember_key not empty\n        // if(isset($_COOKIE['REMEMBER_KEY']) && ($_COOKIE['REMEMBER_KEY'] != '') && ($this->get_safe_remember_key() <> '')){\n        //        // Check if the remember key is correct\n        //        // $database = new database();\n        //        $sql = \"SELECT `user_id` FROM `{TP}users` WHERE `remember_key` = '\";\n        //        $sql .= $this->get_safe_remember_key() . \"' LIMIT 1\";\n        //        $check_query = $database->query($sql);\n        //\n        //        if($check_query->numRows() > 0) {\n        //            $check_fetch = $check_query->fetchRow();\n        //            $iUserID = $check_fetch['user_id'];\n        //            // Check the remember key prefix\n        //            $remember_key_prefix = '';\n        //            $length = 11-strlen($iUserID);\n        //            if($length > 0) {\n        //                for($i = 1; $i <= $length; $i++) {\n        //                    $remember_key_prefix .= '0';\n        //                }\n        //        }\n        //        $remember_key_prefix .= $iUserID.'_';\n        //        $length = strlen($remember_key_prefix);\n        //        if(substr($_COOKIE['REMEMBER_KEY'], 0, $length) == $remember_key_prefix) {\n        //            return true;\n        //        } else {\n        //            return false;\n        //        }\n        //    } else {\n        //        return false;\n        //    }\n        // } else {\n        //    return false;\n        // }\n    }\n\n    /**\n     * @brief   Sanities the REMEMBER_KEY cookie to avoid SQL injection\n     *\n     * @return  string\n     */\n    public function get_safe_remember_key()\n    {\n        if (!((strlen($_COOKIE['REMEMBER_KEY']) == 23) && (substr($_COOKIE['REMEMBER_KEY'], 11, 1) == '_'))) {\n            return '';\n        }\n\n        // create a clean cookie (XXXXXXXXXXX_YYYYYYYYYYY) where X:= numeric, Y:= hash\n        $clean_cookie = sprintf('%011d', (int)substr($_COOKIE['REMEMBER_KEY'], 0, 11)) . substr($_COOKIE['REMEMBER_KEY'], 11);\n        return ($clean_cookie == $_COOKIE['REMEMBER_KEY']) ? $this->add_slashes($clean_cookie) : '';\n    }\n\n    /**\n     * @brief   Authenticate the user on login, write users data into $_SESSION\n     *          and write into the database the last login time\n     *\n     * @return  int     ammount of grroups the user is member of\n     * @global  object $database\n     */\n    public function authenticate($bRemembered = false)\n    {\n        global $database;\n        $sLoginname = preg_match('/[\\;\\=\\&\\|\\<\\> ]/', $this->username) ? '' : $this->username;\n\n        // Get user information\n        $sSql = \"SELECT * FROM `{TP}users` WHERE `username`='%s' AND `active` = 1\";\n        if ($bRemembered) {\n            $sSql .= \" AND `password` = '\" . $this->password . \"'\";\n        }\n        $resUsers = $database->query(sprintf($sSql, $sLoginname));\n        $aUserData = $resUsers->fetchRow(MYSQLI_ASSOC);\n        $iNumRows = $resUsers->numRows();\n\n        // Check if password is correct\n        if ($iNumRows == 1 && !$bRemembered) {\n            if ($this->doCheckPassword($aUserData['user_id'], $this->password) === false) {\n                $iNumRows = 0;\n            }\n        }\n\n        if ($iNumRows == 1) {\n            $iUserID = $aUserData['user_id'];\n            $this->user_id = $iUserID;\n            $_SESSION['USER_ID'] = $iUserID;\n            $_SESSION['GROUP_ID'] = $aUserData['group_id'];\n            $_SESSION['GROUPS_ID'] = $aUserData['groups_id'];\n            $_SESSION['USERNAME'] = $aUserData['username'];\n            $_SESSION['DISPLAY_NAME'] = $aUserData['display_name'];\n            $_SESSION['EMAIL'] = $aUserData['email'];\n            $_SESSION['HOME_FOLDER'] = $aUserData['home_folder'];\n\n            // Run remember function if needed\n            if ($this->remember == true) {\n                $this->password = $aUserData['password'];\n                $this->remember($this->user_id);\n            }\n\n            // Set language\n            if ($aUserData['language'] != '') {\n                $_SESSION['LANGUAGE'] = $aUserData['language'];\n            }\n\n            // Set timezone\n            if ($aUserData['timezone'] != '') {\n                $_SESSION['TIMEZONE'] = $aUserData['timezone'];\n            } else {\n                // Set a session var so apps can tell user is using default tz\n                $_SESSION['USE_DEFAULT_TIMEZONE'] = true;\n            }\n\n            // Set date format\n            if ($aUserData['date_format'] != '') {\n                $_SESSION['DATE_FORMAT'] = $aUserData['date_format'];\n            } else {\n                // Set a session var so apps can tell user is using default date format\n                $_SESSION['USE_DEFAULT_DATE_FORMAT'] = true;\n            }\n\n            // Set time format\n            if ($aUserData['time_format'] != '') {\n                $_SESSION['TIME_FORMAT'] = $aUserData['time_format'];\n            } else {\n                // Set a session var so apps can tell user is using default time format\n                $_SESSION['USE_DEFAULT_TIME_FORMAT'] = true;\n            }\n\n            // Get group information\n            $_SESSION['SYSTEM_PERMISSIONS'] = array();\n            $_SESSION['MODULE_PERMISSIONS'] = array();\n            $_SESSION['TEMPLATE_PERMISSIONS'] = array();\n            $_SESSION['GROUP_NAME'] = array();\n\n            $bFirstGroup = true;\n            foreach (explode(\",\", $this->get_session('GROUPS_ID')) as $iCurrGroupID) {\n                $sSql = \"SELECT * FROM `{TP}groups` WHERE `group_id` = %d\";\n                $resGroup = $database->query(sprintf($sSql, $iCurrGroupID));\n                $aGroup = $resGroup->fetchRow(MYSQLI_ASSOC);\n                $_SESSION['GROUP_NAME'][$iCurrGroupID] = $aGroup['name'];\n                // Set system permissions\n                if ($aGroup['system_permissions'] != '') {\n                    $_SESSION['SYSTEM_PERMISSIONS'] = array_merge($_SESSION['SYSTEM_PERMISSIONS'], explode(',', $aGroup['system_permissions']));\n                }\n                // Set module permissions\n                if ($aGroup['module_permissions'] != '') {\n                    if ($bFirstGroup) {\n                        $_SESSION['MODULE_PERMISSIONS'] = explode(',', $aGroup['module_permissions']);\n                    } else {\n                        $_SESSION['MODULE_PERMISSIONS'] = array_intersect($_SESSION['MODULE_PERMISSIONS'], explode(',', $aGroup['module_permissions']));\n                    }\n                }\n                // Set template permissions\n                if ($aGroup['template_permissions'] != '') {\n                    if ($bFirstGroup) {\n                        $_SESSION['TEMPLATE_PERMISSIONS'] = explode(',', $aGroup['template_permissions']);\n                    } else {\n                        $_SESSION['TEMPLATE_PERMISSIONS'] = array_intersect($_SESSION['TEMPLATE_PERMISSIONS'], explode(',', $aGroup['template_permissions']));\n                    }\n                }\n                $bFirstGroup = false;\n            }\n\n            // Update the users table with current ip and timestamp\n            $aUpdateUser = array(\n                'user_id' => $iUserID,\n                'login_when' => time(),\n                'login_ip' => $_SERVER['REMOTE_ADDR']\n            );\n            $database->updateRow('{TP}users', 'user_id', $aUpdateUser);\n        } else {\n            $iNumRows = 0;\n        }\n        // Return if the user exists or not\n        return $iNumRows;\n    }\n\n    public function remember($iUserID)\n    {\n        return true;\n\n        // global $database;\n        // $remember_key = '';\n        // // Generate user id to append to the remember key\n        // $length = 11-strlen($iUserID);\n        // if($length > 0) {\n        //    for($i = 1; $i <= $length; $i++) {\n        //        $remember_key .= '0';\n        //    }\n        // }\n        // // Generate remember key\n        // $remember_key .= $iUserID.'_';\n        // $salt = \"abchefghjkmnpqrstuvwxyz0123456789\";\n        // srand((double)microtime()*1000000);\n        // $i = 0;\n        // while ($i <= 10) {\n        //    $num = rand() % 33;\n        //    $tmp = substr($salt, $num, 1);\n        //    $remember_key = $remember_key . $tmp;\n        //    $i++;\n        // }\n        // $remember_key = $remember_key;\n        // // Update the remember key in the db\n        // // $database = new database();\n        // $database->query(\"UPDATE \".$this->users_table.\" SET remember_key = '$remember_key' WHERE user_id = '$iUserID' LIMIT 1\");\n        // if($database->is_error()) {\n        //    return false;\n        // } else {\n        //    // Workout options for the cookie\n        //    $cookie_name = 'REMEMBER_KEY';\n        //    $cookie_value = $remember_key;\n        //    $cookie_expire = time()+60*60*24*30;\n        //    // Set the cookie\n        //    if(setcookie($cookie_name, $cookie_value, $cookie_expire, '/')) {\n        //        return true;\n        //    } else {\n        //        return false;\n        //    }\n        // }\n    }\n\n    /**\n     * @brief  Increase the count for login attempts\n     */\n    public function increase_attempts($increment = 1)\n    {\n        // we shall store them in the database and fetch them from there\n        // because an attacker can easily open plenty of new sessions\n        global $database;\n\n        $client_ip = md5($this->get_client_ip());\n        $attempts = 0;\n        $timestamp = 0;\n\n        $sql = \"SELECT * FROM `\" . TABLE_PREFIX . \"blocking` WHERE `source_ip` = '\" . $client_ip . \"' LIMIT 1\";\n        $check_query = $database->query($sql);\n\n        $now = time();\n\n        if ($check_query != null && $check_query->numRows() > 0) {\n            $check_fetch = $check_query->fetchRow();\n            $attempts = $check_fetch['attempts'] + $increment;\n            $timestamp = $check_fetch['timestamp'];\n        } else {\n            $timestamp = $now;\n            $attempts = $increment;\n            $sql = \"INSERT INTO `\" . TABLE_PREFIX . \"blocking` SET `attempts` = '$attempts', `timestamp` = '$timestamp', `source_ip` = '$client_ip'\";\n            $database->query($sql);\n        }\n\n        $interval = $now - $timestamp;\n\n        if ($interval > $this->timeframe + 2 * pow(2, ($attempts - $this->max_attempts)) * $this->login_delay) {\n            // it's too long ago, forget the db entry and reset to the first attempt\n            $attempts = $increment;\n        }\n\n        $timestamp = time();\n\n        // update the database\n        $sql = \"UPDATE `\" . TABLE_PREFIX . \"blocking` SET `attempts` = '$attempts', `timestamp` = '$timestamp' WHERE `source_ip` = '$client_ip'\";\n        $database->query($sql);\n\n        if ($interval > $this->timeframe + pow(2, ($attempts - $this->max_attempts)) * $this->login_delay && $attempts > $this->max_attempts) {\n            // it's too long ago, reduce at least to allow one more attempt\n            $attempts = $this->max_attempts;\n        }\n\n        // to clean up database from old entries, use the occasion and discard everything we have not seen for more than a week\n        $timestamp = $now - 7 * 24 * 3600;\n        $sql = \"DELETE FROM `\" . TABLE_PREFIX . \"blocking` WHERE `timestamp` < '$timestamp'\";\n        $database->query($sql);\n\n        $_SESSION['ATTEMPTS'] = $attempts;\n\n        if ($this->get_session('ATTEMPTS') > $this->max_attempts) {\n            $this->warn();\n        } else {\n            $this->display_login();\n        }\n    }\n\n    /**\n     * @brief  get the client ip address from various php or environment variables\n     */\n    private function get_client_ip()\n    {\n\t$ipaddress = '';\n\t// for security reasons first check remote_addr which is more difficult to fake:\n\tif (isset($_SERVER['REMOTE_ADDR'])) {\n\t    $ipaddress = $this->get_server('REMOTE_ADDR');\n\t} elseif (getenv('REMOTE_ADDR')) {\n\t    $ipaddress = getenv('REMOTE_ADDR');\n\t} elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {\n            $ipaddress = $this->get_server('HTTP_CLIENT_IP');\n        } elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            $ipaddress = $this->get_server('HTTP_X_FORWARDED_FOR');\n        } elseif (isset($_SERVER['HTTP_X_FORWARDED'])) {\n            $ipaddress = $this->get_server('HTTP_X_FORWARDED');\n        } elseif (isset($_SERVER['HTTP_FORWARDED_FOR'])) {\n            $ipaddress = $this->get_server('HTTP_FORWARDED_FOR');\n        } elseif (isset($_SERVER['HTTP_FORWARDED'])) {\n            $ipaddress = $this->get_server('HTTP_FORWARDED');\n        } elseif (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n        } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n        } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n        } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n        } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n        } else {\n            $ipaddress = 'UNKNOWN';\n        }\n\n        return $ipaddress;\n    }\n\n    // ********************************************************************* //\n    // The two methods below are currently not in use\n    // ********************************************************************* //\n\n    // Function to set a \"remembering\" cookie for the user\n\n    /**\n     * @brief    Warn user that they have had too many login attempts\n     */\n    public function warn()\n    {\n        header('Location: ' . $this->warning_url);\n        exit(0);\n    }\n\n    // Function to check if a user has been remembered\n\n    /**\n     * @brief   Display the login screen\n     *\n     * @return  void  implements template object\n     * @global  array $MENU\n     * @global  array $TEXT\n     * @global  array $MESSAGE\n     */\n    public function display_login()\n    {\n        // Get language vars\n        global $MESSAGE, $MENU, $TEXT, $database;\n\n        if (!isset($_SESSION['ATTEMPTS']) || ($this->get_session('ATTEMPTS') > $this->max_attempts)) {\n            $this->increase_attempts($increment = 0);\n            return;\n        }\n\n        // Show the login form\n        if ($this->frontend != true) {\n            // Setup template object, parse vars to it, then parse it\n            require_once WB_PATH . '/include/phplib/template.inc';\n            $oTemplate = new Template(dirname($this->correct_theme_source($this->template_file)));\n            $oTemplate->set_file('page', $this->template_file);\n            $oTemplate->set_block('page', 'mainBlock', 'main');\n            if ($this->remember_me_option != true) {\n                $oTemplate->set_var('DISPLAY_REMEMBER_ME', 'display: none;');\n            } else {\n                $oTemplate->set_var('DISPLAY_REMEMBER_ME', '');\n            }\n            $aTextStrings = array(\n                'FORGOTTEN_DETAILS',\n                'USERNAME',\n                'PASSWORD',\n                'REMEMBER_ME',\n                'LOGIN',\n                'HOME'\n            );\n            foreach ($aTextStrings as $sToken) {\n                $oTemplate->set_var('TEXT_' . $sToken, $TEXT[$sToken]);\n            }\n            $oTemplate->set_var(array(\n                'WB_URL' => WB_URL,\n                'THEME_URL' => THEME_URL,\n                'VERSION' => VERSION,\n                'REVISION' => REVISION,\n                'PAGES_DIRECTORY' => PAGES_DIRECTORY,\n                'ACTION_URL' => $this->login_url,\n                'ATTEMPTS' => $this->get_session('ATTEMPTS'),\n                'USERNAME' => $this->username,\n                'USERNAME_FIELDNAME' => $this->username_fieldname,\n                'PASSWORD_FIELDNAME' => $this->password_fieldname,\n                //'MESSAGE' => $this->message,\n                'MESSAGE' => $this->_oMsgBox->fetchDisplay(),\n                'INTERFACE_DIR_URL' => ADMIN_URL . '/interface',\n                'MAX_USERNAME_LEN' => $this->max_username_len,\n                'MAX_PASSWORD_LEN' => $this->max_password_len,\n                'LANGUAGE' => strtolower(LANGUAGE),\n                'FORGOTTEN_DETAILS_APP' => $this->forgotten_details_app,\n                'SECTION_LOGIN' => $MENU['LOGIN'],\n                'CHARSET' => (defined('DEFAULT_CHARSET') ? DEFAULT_CHARSET : 'utf-8')\n            ));\n\n            $oTemplate->parse('main', 'mainBlock', false);\n            $oTemplate->pparse('output', 'page');\n        }\n    }\n}\n"], "filenames": ["wbce/framework/class.login.php"], "buggy_code_start_loc": [413], "buggy_code_end_loc": [438], "fixing_code_start_loc": [413], "fixing_code_end_loc": [438], "type": "CWE-307", "message": "A vulnerability, which was classified as problematic, has been found in WBCE CMS. Affected by this issue is the function increase_attempts of the file wbce/framework/class.login.php of the component Header Handler. The manipulation of the argument X-Forwarded-For leads to improper restriction of excessive authentication attempts. The attack may be launched remotely. The name of the patch is d394ba39a7bfeb31eda797b6195fd90ef74b2e75. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213716.", "other": {"cve": {"id": "CVE-2022-4006", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-15T22:15:19.167", "lastModified": "2022-11-18T19:46:28.513", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in WBCE CMS. Affected by this issue is the function increase_attempts of the file wbce/framework/class.login.php of the component Header Handler. The manipulation of the argument X-Forwarded-For leads to improper restriction of excessive authentication attempts. The attack may be launched remotely. The name of the patch is d394ba39a7bfeb31eda797b6195fd90ef74b2e75. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213716."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 2.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-307"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-307"}, {"lang": "en", "value": "CWE-400"}, {"lang": "en", "value": "CWE-799"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wbce:wbce_cms:-:*:*:*:*:*:*:*", "matchCriteriaId": "0F44EFA8-B748-450F-A765-E455F227D1E9"}]}]}], "references": [{"url": "https://github.com/WBCE/WBCE_CMS/issues/524", "source": "cna@vuldb.com", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/wbce/wbce_cms/commit/d394ba39a7bfeb31eda797b6195fd90ef74b2e75", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.213716", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wbce/wbce_cms/commit/d394ba39a7bfeb31eda797b6195fd90ef74b2e75"}}