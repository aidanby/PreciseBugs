{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\Recyclebin;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @internal\n */\nclass RecyclebinController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/recyclebin/list\", name=\"pimcore_admin_recyclebin_list\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request)\n    {\n        if ($request->get('xaction') == 'destroy') {\n            $item = Recyclebin\\Item::getById(\\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::getRecordIdForGridRequest($request->get('data')));\n\n            if ($item) {\n                $item->delete();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => []]);\n        } else {\n            $db = \\Pimcore\\Db::get();\n\n            $list = new Recyclebin\\Item\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $list->setOrderKey('date');\n            $list->setOrder('DESC');\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            $conditionFilters = [];\n\n            if ($request->get('filterFullText')) {\n                $conditionFilters[] = 'path LIKE ' . $list->quote('%'. $list->escapeLike($request->get('filterFullText')) .'%');\n            }\n\n            $filters = $request->get('filter');\n            if ($filters) {\n                $filters = $this->decodeJson($filters);\n\n                foreach ($filters as $filter) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'numeric') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int) $filter['value'];\n                    }\n                    // system field\n                    $value = $filter['value'];\n                    if ($operator == 'LIKE') {\n                        $value = '%' . $value . '%';\n                    }\n\n                    $field = '`' . $filterField . '` ';\n                    if ($filter['field'] == 'fullpath') {\n                        $field = 'CONCAT(path,filename)';\n                    }\n\n                    if ($filter['type'] == 'date' && $operator == '=') {\n                        $maxTime = $value + (86400 - 1); //specifies the top point of the range used in the condition\n                        $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                        $conditionFilters[] = $condition;\n                    } else {\n                        $conditionFilters[] = $field . $operator . \" '\" . $value . \"' \";\n                    }\n                }\n            }\n\n            if (!empty($conditionFilters)) {\n                $condition = implode(' AND ', $conditionFilters);\n                $list->setCondition($condition);\n            }\n\n            $items = $list->load();\n            $data = [];\n            if (is_array($items)) {\n                /** @var Recyclebin\\Item $item */\n                foreach ($items as $item) {\n                    $data[] = $item->getObjectVars();\n                }\n            }\n\n            return $this->adminJson(['data' => $data, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n    }\n\n    /**\n     * @Route(\"/recyclebin/restore\", name=\"pimcore_admin_recyclebin_restore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function restoreAction(Request $request)\n    {\n        $item = Recyclebin\\Item::getById($request->get('id'));\n        $item->restore();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/flush\", name=\"pimcore_admin_recyclebin_flush\", methods={\"DELETE\"})\n     *\n     * @return JsonResponse\n     */\n    public function flushAction()\n    {\n        $bin = new Element\\Recyclebin();\n        $bin->flush();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/add\", name=\"pimcore_admin_recyclebin_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n\n            if ($element) {\n                $list = $element::getList(['unpublished' => true]);\n                $list->setCondition((($request->get('type') === 'object') ? 'o_' : '') . 'path LIKE ' . $list->quote($list->escapeLike($element->getRealFullPath()) . '/%'));\n                $children = $list->getTotalCount();\n\n                if ($children <= 100) {\n                    Recyclebin\\Item::create($element, $this->getAdminUser());\n                }\n            }\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // recyclebin actions might take some time (save & restore)\n        $timeout = 600; // 10 minutes\n        @ini_set('max_execution_time', $timeout);\n        set_time_limit($timeout);\n\n        // check permissions\n        $this->checkActionPermission($event, 'recyclebin', ['addAction']);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\Recyclebin;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @internal\n */\nclass RecyclebinController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/recyclebin/list\", name=\"pimcore_admin_recyclebin_list\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request)\n    {\n        if ($request->get('xaction') == 'destroy') {\n            $item = Recyclebin\\Item::getById(\\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::getRecordIdForGridRequest($request->get('data')));\n\n            if ($item) {\n                $item->delete();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => []]);\n        } else {\n            $db = \\Pimcore\\Db::get();\n\n            $list = new Recyclebin\\Item\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $list->setOrderKey('date');\n            $list->setOrder('DESC');\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            $conditionFilters = [];\n\n            if ($request->get('filterFullText')) {\n                $conditionFilters[] = 'path LIKE ' . $list->quote('%'. $list->escapeLike($request->get('filterFullText')) .'%');\n            }\n\n            $filters = $request->get('filter');\n            if ($filters) {\n                $filters = $this->decodeJson($filters);\n\n                foreach ($filters as $filter) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'numeric') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int) $filter['value'];\n                    }\n                    // system field\n                    $value = $filter['value'];\n                    if ($operator == 'LIKE') {\n                        $value = '%' . $value . '%';\n                    }\n\n                    $field = '`' . $filterField . '` ';\n                    if ($filter['field'] == 'fullpath') {\n                        $field = 'CONCAT(path,filename)';\n                    }\n\n                    if ($filter['type'] == 'date' && $operator == '=') {\n                        $maxTime = $value + (86400 - 1); //specifies the top point of the range used in the condition\n                        $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                        $conditionFilters[] = $condition;\n                    } else {\n                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);\n                    }\n                }\n            }\n\n            if (!empty($conditionFilters)) {\n                $condition = implode(' AND ', $conditionFilters);\n                $list->setCondition($condition);\n            }\n\n            $items = $list->load();\n            $data = [];\n            if (is_array($items)) {\n                /** @var Recyclebin\\Item $item */\n                foreach ($items as $item) {\n                    $data[] = $item->getObjectVars();\n                }\n            }\n\n            return $this->adminJson(['data' => $data, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n    }\n\n    /**\n     * @Route(\"/recyclebin/restore\", name=\"pimcore_admin_recyclebin_restore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function restoreAction(Request $request)\n    {\n        $item = Recyclebin\\Item::getById($request->get('id'));\n        $item->restore();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/flush\", name=\"pimcore_admin_recyclebin_flush\", methods={\"DELETE\"})\n     *\n     * @return JsonResponse\n     */\n    public function flushAction()\n    {\n        $bin = new Element\\Recyclebin();\n        $bin->flush();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/add\", name=\"pimcore_admin_recyclebin_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n\n            if ($element) {\n                $list = $element::getList(['unpublished' => true]);\n                $list->setCondition((($request->get('type') === 'object') ? 'o_' : '') . 'path LIKE ' . $list->quote($list->escapeLike($element->getRealFullPath()) . '/%'));\n                $children = $list->getTotalCount();\n\n                if ($children <= 100) {\n                    Recyclebin\\Item::create($element, $this->getAdminUser());\n                }\n            }\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // recyclebin actions might take some time (save & restore)\n        $timeout = 600; // 10 minutes\n        @ini_set('max_execution_time', $timeout);\n        set_time_limit($timeout);\n\n        // check permissions\n        $this->checkActionPermission($event, 'recyclebin', ['addAction']);\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/RecyclebinController.php"], "buggy_code_start_loc": [122], "buggy_code_end_loc": [123], "fixing_code_start_loc": [122], "fixing_code_end_loc": [123], "type": "CWE-89", "message": "SQL injection in RecyclebinController.php in GitHub repository pimcore/pimcore prior to 10.3.5. This vulnerability is capable of steal the data", "other": {"cve": {"id": "CVE-2022-1219", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-08T09:15:10.933", "lastModified": "2022-04-13T20:40:26.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection in RecyclebinController.php in GitHub repository pimcore/pimcore prior to 10.3.5. This vulnerability is capable of steal the data"}, {"lang": "es", "value": "Una inyecci\u00f3n SQL en el archivo RecyclebinController.php en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.3.5. Esta vulnerabilidad es capaz de robar los datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.3.5", "matchCriteriaId": "387ECA45-96DC-47F3-8115-D9B0D44E2DBF"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/a697830359df06246acca502ee2455614de68017", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f700bd18-1fd3-4a05-867f-07176aebc7f6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/a697830359df06246acca502ee2455614de68017"}}