{"buggy_code": ["<?php\n\n// Icinga Web Jira Integration | (c) 2023 Icinga GmbH | GPLv2\n\nnamespace Icinga\\Module\\Jira\\Forms\\Config;\n\nuse Icinga\\Application\\Config;\nuse Icinga\\Module\\Jira\\RestApi;\nuse Icinga\\Web\\Session;\nuse ipl\\Html\\Contract\\FormSubmitElement;\nuse ipl\\Validator\\CallbackValidator;\nuse ipl\\Web\\Common\\CsrfCounterMeasure;\nuse ipl\\Web\\Compat\\CompatForm;\n\nclass FieldConfigForm extends CompatForm\n{\n    use CsrfCounterMeasure;\n\n    /** @var RestApi */\n    private $jira;\n\n    /** @var array|null */\n    protected $fields = [];\n\n    /** @var Config */\n    protected $templateConfig;\n\n    /** @var string */\n    protected $fieldValue;\n\n    /** @var string */\n    protected $templateName;\n\n    /** @var bool Hack used for delete button */\n    protected $callOnSuccess;\n\n    /** @var string */\n    protected $fieldId;\n\n    public function __construct(RestApi $jira, string $templateName, $fieldId = null)\n    {\n        $this->jira = $jira;\n        $this->fields = $this->enumAllowedFields();\n\n        $this->templateConfig = Config::module('jira', 'templates');\n\n        $this->templateName = $templateName;\n\n        if ($fieldId !== null) {\n            if (! array_key_exists($fieldId, $this->fields)) {\n                $this->fieldId = array_search($fieldId, $this->fields);\n            } else {\n                $this->fieldId = $fieldId;\n            }\n\n            $templateFields = $this->templateConfig->getSection($templateName)->toArray();\n\n            $this->fieldValue = $templateFields[$fieldId];\n        }\n    }\n\n    /**\n     * Returns fieldId-fieldLabel pairs of all the custom fields including duedate field\n     *\n     * Supported field types are string, array, number and date\n     *\n     * @return array\n     *\n     * @throws \\Icinga\\Exception\\NotFoundError\n     */\n    public function enumAllowedFields(): array\n    {\n        $fieldTypes = ['string', 'number', 'array', 'date'];\n        $fields = [];\n\n        foreach ($this->jira->get('field')->getResult() as $field) {\n            if ($field->custom && in_array($field->schema->type, $fieldTypes)) {\n                if ($field->schema->type === 'array' && $field->schema->items !== 'string') {\n                    continue;\n                }\n\n                $fields[$field->id] = $field->name;\n            }\n        }\n\n        $fields['duedate'] = 'Due Date';\n\n        $icingaKey = Config::module('jira')\n            ->get('key_fields', 'icingaKey', 'icingaKey');\n\n        $icingaStatus = Config::module('jira')\n            ->get('key_fields', 'icingaStatus', 'icingaStatus');\n\n        if (($key = array_search($icingaKey, $fields)) !== false) {\n            unset($fields[$key]);\n        }\n\n        if (($status = array_search($icingaStatus, $fields)) !== false) {\n            unset($fields[$status]);\n        }\n\n        return $fields;\n    }\n\n    protected function assemble()\n    {\n        $this->addElement($this->createCsrfCounterMeasure(Session::getSession()->getId()));\n\n        $this->addElement(\n            'select',\n            'fields',\n            [\n                'label'      => $this->translate('Jira Field'),\n                'class'      => 'autosubmit',\n                'options'    => $this->optionalEnum($this->fields),\n                'required'   => true,\n                'validators' => [\n                    'Callback' => function ($value, $validator) {\n                        /** @var CallbackValidator $validator */\n                        $templateFieldKeys = $this->templateConfig->getSection($this->templateName)->keys();\n                        $selected = $this->fields[$value];\n\n                        if (\n                            $value !== $this->fieldId\n                            && (in_array($value, $templateFieldKeys) || in_array($selected, $templateFieldKeys))\n                        ) {\n                            $validator->addMessage(sprintf(\n                                $this->translate('Field \"%s\" already exists in the template \"%s\"'),\n                                $selected,\n                                $this->templateName\n                            ));\n\n                            return false;\n                        }\n\n                        return true;\n                    }\n                ]\n            ]\n        );\n\n        if ($this->fieldId !== null) {\n            $this->getElement('fields')\n                ->setValue($this->fieldId)\n                ->addAttributes(['disabled' => true]);\n        }\n\n        $isFieldsDisabled = $this->getElement('fields')\n            ->getAttributes()\n            ->get('disabled');\n\n        if (($this->hasBeenSent() || $isFieldsDisabled) && $this->getValue('fields') !== null) {\n            $fieldsAssociation = [\n                'hostgroup'    => $this->translate('Host Group'),\n                'servicegroup' => $this->translate('Service Group'),\n                'customvar'    => $this->translate('Custom Variable'),\n            ];\n\n            $this->addElement(\n                'text',\n                'type',\n                [\n                    'label'    => $this->translate('Field Type'),\n                    'disabled' => true,\n                    'required' => true,\n                ]\n            );\n\n            $this->getElement('type')->setValue($this->jira->getFieldType($this->getValue('fields')));\n\n            if ($this->getValue('type') !== 'array') {\n                $fieldsAssociation['other'] = $this->translate('Others');\n            }\n\n            $this->addElement(\n                'select',\n                'associated',\n                [\n                    'label'      => $this->translate('Associated Icinga Object Property'),\n                    'class'      => 'autosubmit',\n                    'options'    => $this->optionalEnum($fieldsAssociation),\n                    'required'   => true,\n                    'validators' => [\n                        'Callback' => function ($value, $validator) use ($fieldsAssociation) {\n                            /** @var CallbackValidator $validator */\n                            if (\n                                ($value === 'hostgroup' || $value === 'servicegroup')\n                                && $this->getValue('type') !== 'array'\n                            ) {\n                                $validator->addMessage(sprintf(\n                                    $this->translate('%s can only be an array type field.'),\n                                    $fieldsAssociation[$value]\n                                ));\n\n                                return false;\n                            }\n\n                            return true;\n                        }\n                    ]\n                ]\n            );\n\n            $matches = [];\n            if ($this->fieldId !== null && ! $this->hasBeenSent()) {\n                if (preg_match('/\\${([^}\\s]+)}/', $this->fieldValue, $matches)) {\n                    if (preg_match('/^(?:host|service)\\./', $matches[1])) {\n                        $this->getElement('associated')->setValue('customvar');\n                    } elseif ($matches[1] === 'hostgroup' || $matches[1] === 'servicegroup') {\n                        $this->getElement('associated')->setValue($matches[1]);\n                    } else {\n                        $this->getElement('associated')->setValue('other');\n                    }\n                } else {\n                    $this->getElement('associated')->setValue('other');\n                }\n            }\n\n            if (($this->hasBeenSent() || $this->fieldId !== null)) {\n                if ($this->getValue('associated') === 'customvar') {\n                    $this->addElement(\n                        'text',\n                        $this->getValue('fields') . '_cv',\n                        [\n                            'label'       => $this->translate('Custom Variable'),\n                            'required'    => true,\n                            'description' => $this->translate(\n                                'Enter appropriate custom variable. For example host.vars.customvar or'\n                                . ' service.vars.customvar.'\n                            ),\n                            'placeholder' => 'host.vars.customvar / service.vars.customvar'\n                        ]\n                    );\n                }\n\n                if ($this->getValue('associated') === 'other') {\n                    $this->addElement(\n                        'text',\n                        $this->getValue('fields') . '_value',\n                        [\n                            'label'       => $this->translate('Field Value'),\n                            'required'    => true,\n                            'description' => $this->translate(\n                                'Enter the value for the field.'\n                            ),\n                            'validators'  => [\n                                'Callback' => function ($value, $validator) use ($fieldsAssociation) {\n                                    /** @var CallbackValidator $validator */\n\n                                    if ($value !== null) {\n                                        if (\n                                            $this->getValue('type') === 'number'\n                                            && ! is_numeric($value)\n                                        ) {\n                                            $validator->addMessage(sprintf(\n                                                $this->translate('Field %s expects a numeric value.'),\n                                                $this->enumAllowedFields()[$this->getValue('fields')]\n                                            ));\n\n                                            return false;\n                                        }\n\n                                        if (\n                                            $this->getValue('type') === 'date'\n                                            && ! strtotime($value)\n                                        ) {\n                                            $validator->addMessage(sprintf(\n                                                $this->translate('Field %s expects english textual datetime.'),\n                                                $this->enumAllowedFields()[$this->getValue('fields')]\n                                            ));\n\n                                            return false;\n                                        }\n\n                                        if (preg_match('/\\${([^}\\s]+)}/', $value, $matches)) {\n                                            if (preg_match('/^(?:host|service)\\./', $matches[1])) {\n                                                $validator->addMessage(sprintf(\n                                                    $this->translate('Field %s cannot be a custom variable.'),\n                                                    $this->enumAllowedFields()[$this->getValue('fields')]\n                                                ));\n\n                                                return false;\n                                            } elseif ($matches[1] === 'hostgroup' || $matches[1] === 'servicegroup') {\n                                                $validator->addMessage(sprintf(\n                                                    $this->translate('Field %s cannot be %s.'),\n                                                    $this->enumAllowedFields()[$this->getValue('fields')],\n                                                    strtolower($fieldsAssociation[$matches[1]])\n                                                ));\n\n                                                return false;\n                                            }\n                                        }\n                                    }\n\n                                    return true;\n                                }\n                            ]\n                        ]\n                    );\n                }\n\n                if (! $this->hasBeenSent() && $this->fieldId !== null) {\n                    if ($this->getValue('associated') === 'other') {\n                        $this->getElement($this->getValue('fields') . '_value')\n                            ->setValue($this->fieldValue);\n                    }\n\n                    if ($this->getValue('associated') === 'customvar' && ! empty($matches)) {\n                        $this->getElement($this->getValue('fields') . '_cv')\n                            ->setValue($matches[1]);\n                    }\n                }\n            }\n        }\n\n        $this->addElement(\n            'submit',\n            'submit',\n            [\n                'label' => $this->fieldId ? $this->translate('Edit Field') : $this->translate('Add Field')\n            ]\n        );\n\n        if ($this->fieldId !== null) {\n            /** @var FormSubmitElement $deleteButton */\n            $deleteButton = $this->createElement(\n                'submit',\n                'delete',\n                [\n                    'label'          => $this->translate('Delete'),\n                    'class'          => 'btn-remove',\n                    'formnovalidate' => true\n                ]\n            );\n\n            $this->registerElement($deleteButton);\n            $this->getElement('submit')\n                ->getWrapper()\n                ->prepend($deleteButton);\n\n            if ($deleteButton->hasBeenPressed()) {\n                $templateFields =  $this->templateConfig->getSection($this->templateName)->toArray();\n\n                $field = isset($templateFields[$this->fieldId]) ? $this->fieldId : $this->fields[$this->fieldId];\n\n                unset($templateFields[$field]);\n\n                $this->templateConfig->setSection($this->templateName, $templateFields);\n                $this->templateConfig->saveIni();\n                $this->getSubmitButton()->setValue($this->getSubmitButton()->getButtonLabel());\n\n                $this->callOnSuccess = false;\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Appends a null option to the given key-value pairs\n     *\n     * @param $enum\n     * @param $nullLabel\n     *\n     * @return array|null[]\n     */\n    public function optionalEnum($enum, $nullLabel = null)\n    {\n        if ($nullLabel === null) {\n            $nullLabel = $this->translate('- please choose -');\n        }\n\n        return [null => $nullLabel] + $enum;\n    }\n\n    public function onSuccess()\n    {\n        if ($this->callOnSuccess === false) {\n            $this->getPressedSubmitElement()->setValue($this->getElement('delete')->getLabel());\n\n            return;\n        }\n\n        $fields = $this->templateConfig->getSection($this->templateName)->toArray();\n\n        $fieldId = $this->getValue('fields');\n        $fieldName = isset($fields[$fieldId]) ? $fieldId : $this->fields[$fieldId];\n        $associated = $this->getValue('associated');\n\n        if ($associated === 'hostgroup' || $associated === 'servicegroup') {\n            $fieldValue = '${' . $associated . '}';\n        } elseif ($associated === 'customvar') {\n            $fieldValue = $this->getValue($fieldId . '_cv');\n            $fieldValue = '${' . $fieldValue . '}';\n        } else {\n            $fieldValue = $this->getValue($fieldId . '_value');\n        }\n\n        if ($fieldId === 'duedate') {\n            $fields[$fieldId] = $fieldValue;\n        } else {\n            $fields[$fieldName] = $fieldValue;\n        }\n\n        $this->templateConfig->setSection($this->templateName, $fields);\n        $this->templateConfig->saveIni();\n    }\n}\n", "<?php\n\n// Icinga Web Jira Integration | (c) 2023 Icinga GmbH | GPLv2\n\nnamespace Icinga\\Module\\Jira\\Forms\\Config;\n\nuse Icinga\\Application\\Config;\nuse Icinga\\Web\\Session;\nuse ipl\\Html\\Contract\\FormSubmitElement;\nuse ipl\\Validator\\CallbackValidator;\nuse ipl\\Web\\Common\\CsrfCounterMeasure;\nuse ipl\\Web\\Compat\\CompatForm;\n\nclass TemplateConfigForm extends CompatForm\n{\n    use CsrfCounterMeasure;\n\n    /** @var Config */\n    protected $config;\n\n    /** @var string|null */\n    protected $templateName;\n\n    /** @var bool Hack used for delete button */\n    protected $callOnSuccess;\n\n    public function __construct($templateName = null)\n    {\n        $this->config = Config::module('jira', 'templates');\n\n        $this->templateName = $templateName;\n\n        if ($this->templateName !== null) {\n            $this->populate(['template' => $templateName]);\n        }\n    }\n\n    protected function assemble()\n    {\n        $this->addElement($this->createCsrfCounterMeasure(Session::getSession()->getId()));\n\n        $this->addElement(\n            'text',\n            'template',\n            [\n                'label'      => $this->translate('Template'),\n                'required'   => true,\n                'validators' => [\n                    'Callback' => function ($value, $validator) {\n                        /** @var CallbackValidator $validator */\n                        if ($value !== $this->templateName && in_array($value, $this->config->keys())) {\n                            $validator->addMessage(sprintf(\n                                $this->translate('Template with name \"%s\" already exists'),\n                                $value\n                            ));\n\n                            return false;\n                        }\n\n                        return true;\n                    }\n                ]\n            ]\n        );\n\n        $this->addElement(\n            'submit',\n            'submit',\n            [\n                'label' => $this->templateName ? $this->translate('Save Changes') : $this->translate('Add Template')\n            ]\n        );\n\n        if ($this->templateName !== null) {\n            /** @var FormSubmitElement $deleteButton */\n            $deleteButton = $this->createElement(\n                'submit',\n                'delete',\n                [\n                    'label'          => $this->translate('Delete'),\n                    'class'          => 'btn-remove',\n                    'formnovalidate' => true\n                ]\n            );\n\n            $this->registerElement($deleteButton);\n            $this->getElement('submit')->getWrapper()->prepend($deleteButton);\n\n            if ($deleteButton->hasBeenPressed()) {\n                $this->config->removeSection($this->templateName);\n                $this->config->saveIni();\n\n                // Stupid cheat because ipl/html is not capable of multiple submit buttons\n                $this->getSubmitButton()->setValue($this->getSubmitButton()->getButtonLabel());\n                $this->callOnSuccess = false;\n\n                return;\n            }\n        }\n    }\n\n    public function onSuccess()\n    {\n        if ($this->callOnSuccess === false) {\n            $this->getSubmitButton()->setValue($this->getElement('delete')->getButtonLabel());\n            return;\n        }\n\n        $templateConfig = Config::fromIni($this->config->getConfigFile());\n        $value = $this->getValue('template');\n\n        if ($this->templateName !== null && $value !== $this->templateName) {\n            $template = $templateConfig->getSection($this->templateName);\n            $templateConfig->removeSection($this->templateName);\n            $templateConfig->setSection($value, $template);\n        } else {\n            $template = $templateConfig->getSection($value);\n            $templateConfig->setSection($this->getValue('template'), $template);\n        }\n\n        $templateConfig->saveIni($templateConfig->getConfigFile());\n    }\n}\n"], "fixing_code": ["<?php\n\n// Icinga Web Jira Integration | (c) 2023 Icinga GmbH | GPLv2\n\nnamespace Icinga\\Module\\Jira\\Forms\\Config;\n\nuse Icinga\\Application\\Config;\nuse Icinga\\Module\\Jira\\RestApi;\nuse Icinga\\Web\\Session;\nuse ipl\\Html\\Contract\\FormSubmitElement;\nuse ipl\\Validator\\CallbackValidator;\nuse ipl\\Web\\Common\\CsrfCounterMeasure;\nuse ipl\\Web\\Compat\\CompatForm;\n\nclass FieldConfigForm extends CompatForm\n{\n    use CsrfCounterMeasure;\n\n    /** @var RestApi */\n    private $jira;\n\n    /** @var array|null */\n    protected $fields = [];\n\n    /** @var Config */\n    protected $templateConfig;\n\n    /** @var string */\n    protected $fieldValue;\n\n    /** @var string */\n    protected $templateName;\n\n    /** @var string */\n    protected $fieldId;\n\n    public function __construct(RestApi $jira, string $templateName, $fieldId = null)\n    {\n        $this->jira = $jira;\n        $this->fields = $this->enumAllowedFields();\n\n        $this->templateConfig = Config::module('jira', 'templates');\n\n        $this->templateName = $templateName;\n\n        if ($fieldId !== null) {\n            // obtain field key in case the fieldId is field label\n            if (! array_key_exists($fieldId, $this->fields)) {\n                $this->fieldId = array_search($fieldId, $this->fields) ?: $fieldId;\n            } else {\n                $this->fieldId = $fieldId;\n            }\n\n            $templateFields = $this->templateConfig->getSection($templateName)->toArray();\n\n            $this->fieldValue = $templateFields[$fieldId];\n        }\n    }\n\n    /**\n     * Returns fieldId-fieldLabel pairs of all the custom fields including duedate field\n     *\n     * Supported field types are string, array, number and date\n     *\n     * @return array\n     *\n     * @throws \\Icinga\\Exception\\NotFoundError\n     */\n    public function enumAllowedFields(): array\n    {\n        $fieldTypes = ['string', 'number', 'array', 'date'];\n        $fields = [];\n\n        foreach ($this->jira->get('field')->getResult() as $field) {\n            if ($field->custom && in_array($field->schema->type, $fieldTypes)) {\n                if ($field->schema->type === 'array' && $field->schema->items !== 'string') {\n                    continue;\n                }\n\n                $fields[$field->id] = $field->name;\n            }\n        }\n\n        $fields['duedate'] = 'Due Date';\n\n        $icingaKey = Config::module('jira')\n            ->get('key_fields', 'icingaKey', 'icingaKey');\n\n        $icingaStatus = Config::module('jira')\n            ->get('key_fields', 'icingaStatus', 'icingaStatus');\n\n        if (($key = array_search($icingaKey, $fields)) !== false) {\n            unset($fields[$key]);\n        }\n\n        if (($status = array_search($icingaStatus, $fields)) !== false) {\n            unset($fields[$status]);\n        }\n\n        return $fields;\n    }\n\n    protected function assemble()\n    {\n        $this->addElement($this->createCsrfCounterMeasure(Session::getSession()->getId()));\n\n        $this->addElement(\n            'select',\n            'fields',\n            [\n                'label'      => $this->translate('Jira Field'),\n                'class'      => 'autosubmit',\n                'options'    => $this->optionalEnum($this->fields),\n                'required'   => true,\n                'validators' => [\n                    'Callback' => function ($value, $validator) {\n                        /** @var CallbackValidator $validator */\n                        $templateFieldKeys = $this->templateConfig->getSection($this->templateName)->keys();\n\n                        $selected = $this->fields[$value];\n\n                        if (\n                            $value !== $this->fieldId\n                            && (in_array($value, $templateFieldKeys) || in_array($selected, $templateFieldKeys))\n                        ) {\n                            $validator->addMessage(sprintf(\n                                $this->translate('Field \"%s\" already exists in the template \"%s\"'),\n                                $selected,\n                                $this->templateName\n                            ));\n\n                            return false;\n                        }\n\n                        return true;\n                    }\n                ]\n            ]\n        );\n\n        if ($this->fieldId !== null) {\n            $this->getElement('fields')\n                ->setValue($this->fieldId)\n                ->addAttributes(['disabled' => true]);\n        }\n\n        $isFieldsDisabled = $this->getElement('fields')\n            ->getAttributes()\n            ->get('disabled');\n\n        if (($this->hasBeenSent() || $isFieldsDisabled) && $this->getValue('fields') !== null) {\n            $fieldsAssociation = [\n                'hostgroup'    => $this->translate('Host Group'),\n                'servicegroup' => $this->translate('Service Group'),\n                'customvar'    => $this->translate('Custom Variable'),\n            ];\n\n            $this->addElement(\n                'text',\n                'type',\n                [\n                    'label'    => $this->translate('Field Type'),\n                    'disabled' => true,\n                    'required' => true,\n                ]\n            );\n\n            $this->getElement('type')->setValue($this->jira->getFieldType($this->getValue('fields')));\n\n            if ($this->getValue('type') !== 'array') {\n                $fieldsAssociation['other'] = $this->translate('Others');\n            }\n\n            $this->addElement(\n                'select',\n                'associated',\n                [\n                    'label'      => $this->translate('Associated Icinga Object Property'),\n                    'class'      => 'autosubmit',\n                    'options'    => $this->optionalEnum($fieldsAssociation),\n                    'required'   => true,\n                    'validators' => [\n                        'Callback' => function ($value, $validator) use ($fieldsAssociation) {\n                            /** @var CallbackValidator $validator */\n                            if (\n                                ($value === 'hostgroup' || $value === 'servicegroup')\n                                && $this->getValue('type') !== 'array'\n                            ) {\n                                $validator->addMessage(sprintf(\n                                    $this->translate('%s can only be an array type field.'),\n                                    $fieldsAssociation[$value]\n                                ));\n\n                                return false;\n                            }\n\n                            return true;\n                        }\n                    ]\n                ]\n            );\n\n            $matches = [];\n            if ($this->fieldId !== null && ! $this->hasBeenSent()) {\n                if (preg_match('/\\${([^}\\s]+)}/', $this->fieldValue, $matches)) {\n                    if (preg_match('/^(?:host|service)\\./', $matches[1])) {\n                        $this->getElement('associated')->setValue('customvar');\n                    } elseif ($matches[1] === 'hostgroup' || $matches[1] === 'servicegroup') {\n                        $this->getElement('associated')->setValue($matches[1]);\n                    } else {\n                        $this->getElement('associated')->setValue('other');\n                    }\n                } else {\n                    $this->getElement('associated')->setValue('other');\n                }\n            }\n\n            if (($this->hasBeenSent() || $this->fieldId !== null)) {\n                if ($this->getValue('associated') === 'customvar') {\n                    $this->addElement(\n                        'text',\n                        $this->getValue('fields') . '_cv',\n                        [\n                            'label'       => $this->translate('Custom Variable'),\n                            'required'    => true,\n                            'description' => $this->translate(\n                                'Enter appropriate custom variable. For example host.vars.customvar or'\n                                . ' service.vars.customvar.'\n                            ),\n                            'placeholder' => 'host.vars.customvar / service.vars.customvar'\n                        ]\n                    );\n                }\n\n                if ($this->getValue('associated') === 'other') {\n                    $this->addElement(\n                        'text',\n                        $this->getValue('fields') . '_value',\n                        [\n                            'label'       => $this->translate('Field Value'),\n                            'required'    => true,\n                            'description' => $this->translate(\n                                'Enter the value for the field.'\n                            ),\n                            'validators'  => [\n                                'Callback' => function ($value, $validator) use ($fieldsAssociation) {\n                                    /** @var CallbackValidator $validator */\n\n                                    if ($value !== null) {\n                                        if (\n                                            $this->getValue('type') === 'number'\n                                            && ! is_numeric($value)\n                                        ) {\n                                            $validator->addMessage(sprintf(\n                                                $this->translate('Field %s expects a numeric value.'),\n                                                $this->enumAllowedFields()[$this->getValue('fields')]\n                                            ));\n\n                                            return false;\n                                        }\n\n                                        if (\n                                            $this->getValue('type') === 'date'\n                                            && ! strtotime($value)\n                                        ) {\n                                            $validator->addMessage(sprintf(\n                                                $this->translate('Field %s expects english textual datetime.'),\n                                                $this->enumAllowedFields()[$this->getValue('fields')]\n                                            ));\n\n                                            return false;\n                                        }\n\n                                        if (preg_match('/\\${([^}\\s]+)}/', $value, $matches)) {\n                                            if (preg_match('/^(?:host|service)\\./', $matches[1])) {\n                                                $validator->addMessage(sprintf(\n                                                    $this->translate('Field %s cannot be a custom variable.'),\n                                                    $this->enumAllowedFields()[$this->getValue('fields')]\n                                                ));\n\n                                                return false;\n                                            } elseif ($matches[1] === 'hostgroup' || $matches[1] === 'servicegroup') {\n                                                $validator->addMessage(sprintf(\n                                                    $this->translate('Field %s cannot be %s.'),\n                                                    $this->enumAllowedFields()[$this->getValue('fields')],\n                                                    strtolower($fieldsAssociation[$matches[1]])\n                                                ));\n\n                                                return false;\n                                            }\n                                        }\n                                    }\n\n                                    return true;\n                                }\n                            ]\n                        ]\n                    );\n                }\n\n                if (! $this->hasBeenSent() && $this->fieldId !== null) {\n                    if ($this->getValue('associated') === 'other') {\n                        $this->getElement($this->getValue('fields') . '_value')\n                            ->setValue($this->fieldValue);\n                    }\n\n                    if ($this->getValue('associated') === 'customvar' && ! empty($matches)) {\n                        $this->getElement($this->getValue('fields') . '_cv')\n                            ->setValue($matches[1]);\n                    }\n                }\n            }\n        }\n\n        $this->addElement(\n            'submit',\n            'submit',\n            [\n                'label' => $this->fieldId ? $this->translate('Edit Field') : $this->translate('Add Field')\n            ]\n        );\n\n        if ($this->fieldId !== null) {\n            /** @var FormSubmitElement $deleteButton */\n            $deleteButton = $this->createElement(\n                'submit',\n                'delete',\n                [\n                    'label'          => $this->translate('Delete'),\n                    'class'          => 'btn-remove',\n                    'formnovalidate' => true\n                ]\n            );\n\n            $this->registerElement($deleteButton);\n            $this->getElement('submit')\n                ->getWrapper()\n                ->prepend($deleteButton);\n        }\n    }\n\n    public function hasBeenSubmitted()\n    {\n        if ($this->getPressedSubmitElement() !== null && $this->getPressedSubmitElement()->getName() === 'delete') {\n            return true;\n        }\n\n        return parent::hasBeenSubmitted();\n    }\n\n    public function isValid()\n    {\n        if ($this->getPressedSubmitElement()->getName() === 'delete') {\n            $csrfElement = $this->getElement('CSRFToken');\n\n            if (! $csrfElement->isValid()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return parent::isValid();\n    }\n\n    /**\n     * Appends a null option to the given key-value pairs\n     *\n     * @param $enum\n     * @param $nullLabel\n     *\n     * @return array|null[]\n     */\n    public function optionalEnum($enum, $nullLabel = null)\n    {\n        if ($nullLabel === null) {\n            $nullLabel = $this->translate('- please choose -');\n        }\n\n        return [null => $nullLabel] + $enum;\n    }\n\n    public function onSuccess()\n    {\n        if ($this->getPressedSubmitElement()->getName() === 'delete') {\n            $templateFields =  $this->templateConfig->getSection($this->templateName)->toArray();\n\n            $field = isset($templateFields[$this->fieldId]) ? $this->fieldId : $this->fields[$this->fieldId];\n\n            unset($templateFields[$field]);\n\n            $this->templateConfig->setSection($this->templateName, $templateFields);\n            $this->templateConfig->saveIni();\n\n            return;\n        }\n\n        $fields = $this->templateConfig->getSection($this->templateName)->toArray();\n\n        $fieldId = $this->getValue('fields');\n        $fieldName = isset($fields[$fieldId]) ? $fieldId : $this->fields[$fieldId];\n        $associated = $this->getValue('associated');\n\n        if ($associated === 'hostgroup' || $associated === 'servicegroup') {\n            $fieldValue = '${' . $associated . '}';\n        } elseif ($associated === 'customvar') {\n            $fieldValue = $this->getValue($fieldId . '_cv');\n            $fieldValue = '${' . $fieldValue . '}';\n        } else {\n            $fieldValue = $this->getValue($fieldId . '_value');\n        }\n\n        if ($fieldId === 'duedate') {\n            $fields[$fieldId] = $fieldValue;\n        } else {\n            $fields[$fieldName] = $fieldValue;\n        }\n\n        $this->templateConfig->setSection($this->templateName, $fields);\n        $this->templateConfig->saveIni();\n    }\n}\n", "<?php\n\n// Icinga Web Jira Integration | (c) 2023 Icinga GmbH | GPLv2\n\nnamespace Icinga\\Module\\Jira\\Forms\\Config;\n\nuse Icinga\\Application\\Config;\nuse Icinga\\Web\\Session;\nuse ipl\\Html\\Contract\\FormSubmitElement;\nuse ipl\\Validator\\CallbackValidator;\nuse ipl\\Web\\Common\\CsrfCounterMeasure;\nuse ipl\\Web\\Compat\\CompatForm;\n\nclass TemplateConfigForm extends CompatForm\n{\n    use CsrfCounterMeasure;\n\n    /** @var Config */\n    protected $config;\n\n    /** @var string|null */\n    protected $templateName;\n\n    public function __construct($templateName = null)\n    {\n        $this->config = Config::module('jira', 'templates');\n\n        $this->templateName = $templateName;\n\n        if ($this->templateName !== null) {\n            $this->populate(['template' => $templateName]);\n        }\n    }\n\n    protected function assemble()\n    {\n        $this->addElement($this->createCsrfCounterMeasure(Session::getSession()->getId()));\n\n        $this->addElement(\n            'text',\n            'template',\n            [\n                'label'      => $this->translate('Template'),\n                'required'   => true,\n                'validators' => [\n                    'Callback' => function ($value, $validator) {\n                        /** @var CallbackValidator $validator */\n                        if ($value !== $this->templateName && in_array($value, $this->config->keys())) {\n                            $validator->addMessage(sprintf(\n                                $this->translate('Template with name \"%s\" already exists'),\n                                $value\n                            ));\n\n                            return false;\n                        }\n\n                        return true;\n                    }\n                ]\n            ]\n        );\n\n        $this->addElement(\n            'submit',\n            'submit',\n            [\n                'label' => $this->templateName ? $this->translate('Save Changes') : $this->translate('Add Template')\n            ]\n        );\n\n        if ($this->templateName !== null) {\n            /** @var FormSubmitElement $deleteButton */\n            $deleteButton = $this->createElement(\n                'submit',\n                'delete',\n                [\n                    'label'          => $this->translate('Delete'),\n                    'class'          => 'btn-remove',\n                    'formnovalidate' => true\n                ]\n            );\n\n            $this->registerElement($deleteButton);\n            $this->getElement('submit')\n                ->getWrapper()\n                ->prepend($deleteButton);\n        }\n    }\n\n    public function hasBeenSubmitted()\n    {\n        if ($this->getPressedSubmitElement() !== null && $this->getPressedSubmitElement()->getName() === 'delete') {\n            return true;\n        }\n\n        return parent::hasBeenSubmitted();\n    }\n\n    public function isValid()\n    {\n        if ($this->getPressedSubmitElement()->getName() === 'delete') {\n            $csrfElement = $this->getElement('CSRFToken');\n\n            if (! $csrfElement->isValid()) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return parent::isValid();\n    }\n\n    public function onSuccess()\n    {\n        if ($this->getPressedSubmitElement()->getName() === 'delete') {\n            $this->config->removeSection($this->templateName);\n            $this->config->saveIni();\n\n            return;\n        }\n\n        $templateConfig = Config::fromIni($this->config->getConfigFile());\n        $value = $this->getValue('template');\n\n        if ($this->templateName !== null && $value !== $this->templateName) {\n            $template = $templateConfig->getSection($this->templateName);\n            $templateConfig->removeSection($this->templateName);\n            $templateConfig->setSection($value, $template);\n        } else {\n            $template = $templateConfig->getSection($value);\n            $templateConfig->setSection($this->getValue('template'), $template);\n        }\n\n        $templateConfig->saveIni($templateConfig->getConfigFile());\n    }\n}\n"], "filenames": ["application/forms/Config/FieldConfigForm.php", "application/forms/Config/TemplateConfigForm.php"], "buggy_code_start_loc": [34, 23], "buggy_code_end_loc": [380, 106], "fixing_code_start_loc": [33, 22], "fixing_code_end_loc": [394, 120], "type": "CWE-352", "message": "icingaweb2-module-jira provides integration with Atlassian Jira. Starting in version 1.3.0 and prior to version 1.3.2, template and field configuration forms perform the deletion action before user input is validated, including the cross site request forgery token. This issue is fixed in version 1.3.2. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-30607", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-05T18:15:10.070", "lastModified": "2023-07-11T18:16:32.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "icingaweb2-module-jira provides integration with Atlassian Jira. Starting in version 1.3.0 and prior to version 1.3.2, template and field configuration forms perform the deletion action before user input is validated, including the cross site request forgery token. This issue is fixed in version 1.3.2. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:icinga:icinga_web_jira_integration:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.3.0", "versionEndExcluding": "1.3.2", "matchCriteriaId": "D88AABE1-39B8-4D52-AE35-33C401F14E34"}]}]}], "references": [{"url": "https://github.com/Icinga/icingaweb2-module-jira/commit/7f0c53b7a3e87be2f4c2e8840805d7b7c9762424", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Icinga/icingaweb2-module-jira/releases/tag/v1.3.2", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/Icinga/icingaweb2-module-jira/security/advisories/GHSA-gh7w-7f7j-gwp5", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Icinga/icingaweb2-module-jira/commit/7f0c53b7a3e87be2f4c2e8840805d7b7c9762424"}}