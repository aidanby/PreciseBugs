{"buggy_code": ["# Copyright (C) 2009 Werner Dittman\n#\n# This file is free software; as a special exception the author gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n#\ncmake_minimum_required(VERSION 2.6)\n\nPROJECT(libzrtpcpp)\n\nSET(CPACK_PACKAGE_VERSION_MAJOR 3)\nSET(CPACK_PACKAGE_VERSION_MINOR 1)\nSET(CPACK_PACKAGE_VERSION_PATCH 0)\n\nset (VERSION 3.1.0)\nset (SOVERSION 3)\n\n# Define supported command line parameters.\n#\n# Example to build the tivi client: cmake -DTIVI=true ..\n# Without any options cmake generates libzrtpcpp for use with GNU ccRTP\n#\noption(CCRTP \"Build library to use with GNU ccRTP.\" OFF)\noption(CRYPTO_STANDALONE \"Use embedded crypto and big number modules.\" ON)\noption(TIVI \"Build library for the tivi client, implies '-DCRYPTO_STNDALONE=true'.\" OFF)\noption(SQLITE \"Use SQLite DB as backend for ZRTP cache.\" OFF)\n\noption(ANDROID \"Generate Android makefiles (Android.mk)\" ON)\noption(JAVA \"Generate Java support files (requires JDK and SWIG)\" OFF)\n\n\n# **** Check what and how to build ****\n#\nif (CCRTP AND TIVI)\n    MESSAGE(FATAL_ERROR \"Cannot build more than one client at once. Use different build directories.\")\nendif()\n\nif (CCRTP)\n    set (PACKAGE libzrtpcpp)\n    set(zrtplibName zrtpcpp)\nelseif (TIVI)\n    set (PACKAGE libzrtptivi)\n    set(zrtplibName zrtptivi)\n    set(CRYPTO_STANDALONE true)\n    set(SQLITE true)\nelse()\n    MESSAGE(WARNING \"No client defined, building for GNU ccRTP.\")\n    set (PACKAGE libzrtpcpp)\n    set(CCRTP true)\n    set(zrtplibName zrtpcpp)\nendif()\n\n\nif(MSVC60)\n    set(BUILD_STATIC ON CACHE BOOL \"static linking only\" FORCE)\n    MARK_AS_ADVANCED(BUILD_STATIC)\nelse()\n    option(BUILD_STATIC \"Set to OFF to build shared libraries\" OFF)\nendif()\n\n# set to true for debug and trace during CMakeLists development\n# set(CMAKE_VERBOSE_MAKEFILE TRUE)\n\nMESSAGE( STATUS \"Configuring GNU ${PROJECT_NAME} ${VERSION} for ${PACKAGE}...\")\n\n# include most of the fine stuff we need\ninclude(FindPkgConfig)\ninclude(CheckLibraryExists)\ninclude(CheckIncludeFiles)\ninclude(CheckFunctionExists)\n\nif (NOT LIB_SUFFIX)\n    set(LIBDIRNAME \"lib\")\n    # this caused problems in debian where it has to always be lib....\n    if (NOT EXISTS /etc/debian_version)\n        if ( \"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\" )\n            set(LIBDIRNAME \"lib64\")\n        endif()\n    endif()\nelse()\n    set(LIBDIRNAME \"lib${LIB_SUFFIX}\")\nendif()\n\ncheck_include_files(stdlib.h HAVE_STDLIB_H)\ncheck_include_files(string.h HAVE_STRING_H)\n\nif (NOT CRYPTO_STANDALONE)\n    pkg_check_modules(OPENSSL libcrypto>=0.9.8)\n    if (OPENSSL_FOUND)\n      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${OPENSSL_INCLUDE_DIRS}) #update include files search directory\n      check_include_files(openssl/bn.h HAVE_OPENSSL_BN_H)\n      check_include_files(openssl/aes.h HAVE_OPENSSL_AES_H)\n      check_include_files(openssl/sha.h HAVE_OPENSSL_SHA_H)\n      check_library_exists(crypto EVP_CipherInit_ex \"${OPENSSL_LIBDIR}\" HAVE_SSL_CRYPT) #use search lib directory from pkg-config\n      set(LIBS ${LIBS} -lcrypto)\n      set(CRYPTOBACKEND \"libcrypto >= 0.9.8\")\n      set(BUILD_REQ \"libopenssl-devel >= 0.9.8\")\n      set(PACKAGE_REQ \"libopenssl >= 0.9.8\")\n      include_directories(${OPENSSL_INCLUDE_DIRS}) #update includes directory from pkg-config\n  else()\n      message(FATAL_ERROR \"No crypto library found\")\n  endif()\nelse()\n    # For crypto standalone mode we need to configure the bnlib. In a first step\n    # without the tests and demos.\n    check_include_files(stdint.h HAVE_STDINT_H)\n    check_include_files(stdint.h HAVE_ASSERT_H)\n    check_include_files(limits.h HAVE_LIMITS_H)\n\n    check_function_exists(memmove HAVE_MEMMOVE)\n    check_function_exists(memcpy HAVE_MEMCPY)\n\n    # TODO: check if we compile the tests for bnlib\n    #\n    # check_function_exists(clock_gettime HAVE_CLOCK_GETTIME)\n    # check_function_exists(getrusage HAVE_GETRUSAGE)\n    # check_function_exists(clock HAVE_CLOCK)\n    # check_function_exists(time HAVE_TIME)\n\n    # Check if Solaris-style gethrvtime() is available\n    # check_function_exists(gethrvtime HAVE_GETHRVTIME)\n    #\n    # until here\n\n    # necessary and required modules checked, ready to generate config.h\n    configure_file(${CMAKE_SOURCE_DIR}/bnlib/bnconfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/bnconfig.h)\nendif()\n\nif (SQLITE)\n    pkg_check_modules(SQLITE3 sqlite3>=3.7)\n    if (SQLITE3_FOUND)\n        check_include_files(sqlite3.h HAVE_SQLITE_H)\n        set(LIBS ${LIBS} -lsqlite3)\n    else()\n      message(FATAL_ERROR \"SQLite3 library not found\")\n    endif()\nendif()\n\n# necessary and required modules checked, ready to generate config.h in top-level build directory\nconfigure_file(config.h.cmake ${CMAKE_BINARY_DIR}/config.h)\n\nadd_definitions(-g -O2 -fno-strict-aliasing)\nif(CMAKE_COMPILER_IS_GNUCXX)\n  add_definitions(-Wno-long-long -Wno-char-subscripts)\n  add_definitions(-Wall -ansi -pedantic)\n  add_definitions(-DNEW_STDCPP)\nendif()\n\ninclude_directories(BEFORE ${CMAKE_BINARY_DIR})\ninclude_directories (${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/zrtp)\nif(CRYPTO_STANDALONE)\n    include_directories (${CMAKE_SOURCE_DIR}/bnlib)\nendif()\n\nif (NOT CCRTP)\n    set (sdes_src ${CMAKE_SOURCE_DIR}/zrtp/ZrtpSdesStream.cpp)\nendif()\n\n# **** The following source files a common for all clients ****\n#\nset(zrtp_src_no_cache\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCallbackWrapper.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZRtp.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCrc32.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketCommit.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketConf2Ack.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketConfirm.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketDHPart.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketGoClear.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketClearAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketHelloAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketHello.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketError.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketErrorAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketPingAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketPing.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketSASrelay.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketRelayAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpStateClass.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpTextData.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpConfigure.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCWrapper.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/Base32.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/zrtpB64Encode.c\n    ${CMAKE_SOURCE_DIR}/zrtp/zrtpB64Decode.c\n    ${CMAKE_SOURCE_DIR}/common/osSpecifics.c ${sdes_src})\n\nset(bnlib_src\n    ${CMAKE_SOURCE_DIR}/bnlib/bn00.c\n    ${CMAKE_SOURCE_DIR}/bnlib/lbn00.c\n    ${CMAKE_SOURCE_DIR}/bnlib/bn.c\n    ${CMAKE_SOURCE_DIR}/bnlib/lbnmem.c\n    ${CMAKE_SOURCE_DIR}/bnlib/sieve.c\n    ${CMAKE_SOURCE_DIR}/bnlib/prime.c\n    ${CMAKE_SOURCE_DIR}/bnlib/bnprint.c\n    ${CMAKE_SOURCE_DIR}/bnlib/jacobi.c\n    ${CMAKE_SOURCE_DIR}/bnlib/germain.c\n    ${CMAKE_SOURCE_DIR}/bnlib/ec/ec.c\n    ${CMAKE_SOURCE_DIR}/bnlib/ec/ecdh.c)\n\nset(zrtp_crypto_src\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/zrtpDH.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/hmac256.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha256.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/hmac384.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha384.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/aesCFB.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/twoCFB.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha2.c)\n\nif (NOT SQLITE)\n    set(zrtp_src ${zrtp_src_no_cache}\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDCacheFile.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDRecordFile.cpp)\nelse()\n    set(zrtp_src ${zrtp_src_no_cache}\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDCacheDb.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDRecordDb.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/zrtpCacheSqliteBackend.c)\n\nendif()\n\nif (CCRTP)\n    add_subdirectory(clients/ccrtp)\nendif()\n\nadd_subdirectory(demo)\n\nif (TIVI)\n    add_subdirectory(clients/tivi)\nendif()\n\n##very usefull for macosx, specially when using gtkosx bundler\nif(APPLE)\n    if (NOT CMAKE_INSTALL_NAME_DIR)\n        set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE STRING \"CMAKE_INSTALL_NAME_DIR set for macosx\" )\n    endif (NOT CMAKE_INSTALL_NAME_DIR)\nendif(APPLE)\n", "== GNU ZRTP 2.0.0 ==\n\nModify some files to use the new uCommon/commoncpp libraries instead\nof the GNU CC++ commoncpp2. This affects the ccRTP depended modules\nsuch as ZrtpQueue and the Timeout stuff.\n\nUpdated to version 2.0.0 to be in synch with the ccRTP version number\nscheme.\n\n\n== GNU ZRTP 1.6.0 ==\n\nThis version implements the Elliptic Curve Diffie-Helman (ECDH) \npublic-key algorithm. \n\nZRTP also supports new algorithms which are defined as optional\nin the ZRTP RFC. These are:\n- Skein Hash\n- Skein MAC for authentication\n- Twofish symmetric ciphers\n\nTwofish ciphers and Skein MAC are supported by GNU ccRTP SRTP \nimplmentation as well.\n\n\n== GNU ZRTP 1.5.4 ==\n\nThe changes in this release affect the ZRTP Configure mechanism only.\nSome housekeeping stuff (desctructors) was added and the C Wrapper\nhow support ZRTP configure as well.\n\nBecause of some API changes (added destructors) clients must be compiled \nand linked with the new library.\n\n\n== GNU ZRTP 1.5.2 ==\n\nQuite a lot of enhancements:\n- a CMake based build process was added\n- a C wrapper was added to enable C programs to use GNU ZRTP\n- some fixes in the code (race condition solved)\n- better support of multi-stream mode\n- change the old cxx file extension to cpp, some build system don't\n  like the old cxx (Android NDK for example)\n- and much more\n\nBecause of API changes clients must be compiled and linked with the new \nlibrary.\n\n== GNU ZRTP 1.5.0 ==\n\nAdds a first version of a ZrtpConfigure class that provides applications\nto select which crypto and hash methods to use.\n\nBecause of API changes clients must be compiled and linked with the new \nlibrary.\n\n== GNU ZRTP 1.4.5 ==\n\nModify the Hello repeat timer handling to accomodate slow connections and/or\nslow devices. \n\nFix a problem when the other party sends only ZRTP packets at the beginning\nof a RTP session.\n\n=== Interface changes in 1.4.5 ===\n\nNo external interfaces were changed, external API and ABI remain stable.\nInternal interface modifications only to implement Ping/PingAck handling.\n\n\n== GNU ZRTP 1.4.4 ==\n\nImplement the Ping/PingAck packets and associated protocol extensions\nas defined in [http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-15].\n\n=== Interface changes in 1.4.4 ===\n\nNo external interfaces were changed, external API and ABI remain stable.\nInternal interface modifications only to implement Ping/PingAck handling.\n\n\n== GNU ZRTP 1.4.2 ==\n\nIntroduce the Key Derivation Function (KDF) as defined in\n[http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-12].\n\nThe ZRTP protocol version was updated to 1.10.\n\n=== Interface changes in 1.4.2 ===\n\nNo interfaces were changed, API and ABI remain stable.\n\n\n== GNU ZRTP 1.4.0 ==\n\nThis is the first release that is conformant to the ZRTP specification\nthat eventually will become a RFC. See:\n[http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-10]\n\nThe ZRTP protocol version was updated to 1.00.\n\n\n=== Interface changes in 1.4.0 ===\n\nThe ZrtpQueue and ZRtp classes implement a new method to get the other\nparty's ZID (ZRTP identifier). An application, for example a SIP or XMPP\nclient, may use this method to get the other party's ZID and store it\ntogether in a contact list. This enable the application to check the ZID\nif the user calls the other party again. A client shall implement such\na feature to enhance security if user's don't compare the SAS on every\ncall after they confirmed a SAS once.\n\nClients must be compiled and linked with the new library.\n\n\n== GNU ZRTP 1.3.1 ==\n\nThis is an update to version 1.3.0 and implements the ZRTP multi-stream\nmode handshake. The ZRTP protocl version was updated to 0.90 and\ninteroperability tests using the latest Zfone build and Zfone Beta\n(dated September 6, 2008) were successful.\n\nNo changes in the external API and ABI with respect to 1.3.0 - thus no\nrecompile or rebuild of clients are necessary if they use 1.3.0.\n\nTo checkout version 1.3.1 specify revision 494 (-r 494).\n\n\n== GNU ZRTP 1.3.0 ==\n\nThis version is and update to version 1.1.0 an implements the latest\nchanges define in the ZRTP draft. The changes resulted in an update of the\nAPI, therefore existing applications must be recompiled.\n\nThis version of GNU ZRTP is compatible to and was tested to work with\nthe latest Zfone beta (dated June, 10, see Zfone project site). Only\nin one specific error case is a slight incompatibility that will be\nfixed with the next Zfone beta. This incompatibility results in a \nsevere error information at the client. The error only happens if\nsomeone modified the first retained shared secret entry in the\nretained secret cache, for example disk/storage read error. This is\na very unlikely situation.\n\n=== Interface changes in Version 1.3.0 ===\n\nThe Method ''setSipsSecret(...)'' is no longer available. ZRTP does\nnot support this additional secret anymore.\n\nThe method ''setOtherSecret(...)'' was renamed to ''setPbxSecret(...)''\nto reflect the modification in the draft.\n\nThe methos ''setSrtpsSecret(...)'' is was renamed to ''setAuxSecret(...)''\nto reflect the modification in the draft.\n\n\n== GNU ZRTP 1.1.0 ==\n\nGNU ZRTP 1.1.0 implements the basic ZRTP as specificied in the document\n''draft-zimmermann-avt-zrtp-06x''. You may access this at this URL:\n[http://zfoneproject.com/zrtp_ietf.html]\n\nThis version of GNU ZRTP does not support the additiona featur of ZRTP\nsuch as Multi-stream mode, Pre-shared mode, PBX enrollement, and SAS\nSignature.  However, to keep the external interface as stable as\npossible I already implmented stubs for the additional features. Some\nlater versions may have these features implemented, depending if they\nare required by the community.\n\nThe current version of GNU ZRTP is compatible and was tested to work\nwith the latest Zfone beta (dated April, 2nd) (see Zfone project\nsite).\n\n=== Interface changes ==\n\nThe ''SymmetricZRTPSession'' implements some new methods to control\nZRTP and its new features. An application usually uses only a few\nmethods to setup GNU ZRTP. All others are optional and an application\nmay use them only if it requires a special feature (which are not yet\nimplemented :-) ).\n\nThe ''ZrtpUserCallback'' class was modified as well. From an\napplication's point of view\n\n * The methods in ''ZrtpUserCallback'' are not pure virtual anymore\n   but just virtual and have a default implementation, usually a\n   simple return. An application may extend this class and overwrite\n   only those methods it requires.\n\n * Change of the constructor - remove the queue parameter thus we have\n  a very simple standard constructor. This modifcation may requires a\n  small change in the application or class that uses or extends\n  ''ZrtpUserCallback''.\n\n * The method showSAS has an additional parameter:\n\n     showSAS(std::string sas, bool verified);\n\n  the verified flag is set to true in SAS is verified, false if not verified.\n  This allows a more flexible support to display the SAS even if SAS is\n  verified. Formerly ZRTP did not call \"showSAS()\" if SAS was verified. Now\n  ZRTP always calls showSAS and provides the verification information\n  explicitly.\n\n* The siganture of the following user callback methods was changed:\n\n        showMessage(GnuZrtpCodes::MessageSeverity sev, int32_t subCode)\n\n        zrtpNegotiationFailed(GnuZrtpCodes::MessageSeverity severity,\n                                           int32_t subCode)\n\n  The GNU ZRTP core and the ZRTP ccRTP extension do not contain\n  message strings anymore. Both use codes to inform an application\n  about events, problems or failure. The folder ''demo'' contains a\n  small demo program that shows one way how to map the codes to\n  strings. Delegating string handling and formating to the application\n  simplifies internationalization etc.\n\nPlaese note: some new callback methods and ''SymmetricZRTPSession''\nmethods are only stubs in the currect version. The real implementation\n(filling the stubs with real code) will be done some time later (see\nabove about unsupported features).\n\n=== Header files ===\n\nThe new version greatly reduces the number of header files installed\nin the include directory. In the new version I decoupled the internal\nheader files and implementation from the external classes and\ninterfaces an application requires. Only six header files are\ninstalled in GNU ZRTP's include directory (libzrtpcpp subdirectory in\nthe usual include paths)\n\n== Demo program ==\n\nThe new folder ''demo'' contains a small demo program that shows\nvarious ways how to use GNU ZRTP to setup secure RTP (SRTP) sessions\neven without signaling protocols\n\n", "## GNU ZRTP C++\n\nThis package provides a library that adds ZRTP support to the GNU\nccRTP stack. Phil Zimmermann developed ZRTP to allow ad-hoc, easy to\nuse key negotiation to setup Secure RTP (SRTP) sessions. GNU ZRTP works\ntogether with GNU ccRTP (1.5.0 or later) and provides a ZRTP\nimplementation that can be directly embedded into client and server\napplications.\n\nThe GNU ZRTP implementation is compliant to [RFC 6189][]. Currently GNU ZRTP\nC++ supports the following features:\n\n* multi-stream mode\n* Finite field Diffie-Helman with 2048 and 3072 bit primes\n* Elliptic curve Diffie-Helman with 256 and 384 bit curves\n* AES-128 and AES-256 symmetric cipher\n* Twofish-128 and Twofish-256 bit symmetric ciphers\n* The SRTP authentication methods HMAC-SHA1 with 32 bit and 80 bit length and\n  the Skein MAC with 32 bit and 64 bit length\n* The Short Authentication String (SAS) type with base 32 encoding (4\n  characters)\n\nEnhanced features like PBX SAS relay aka *trusted Man-in-the-Middle* or\npreshared mode are not supported but the GNU ZRTP C++ implementation defines\nthe necessary external interfaces and functions for these enhanced features\n(stubs only).\n\n### SDES support\nThis release also provides SDES support. The SDES implementation does not\nsupport all of the fancy stuff but is usable in most cases. This implementation\nhowever supports the new SDES crypto mixing to overcome some security issues\nfor SIP forking. Please look for `draft-zimmermann-mmusic-sdesc-mix-00`.\n\n### Interoperability\nDuring the development of ZRTP and its sister implementation ZRTP4J (the Java\nversion of the ZRTP) Phil Zimmermann, his developers, and I worked together to\nmake sure Phil's [Zfone][] implementation and the GNU ZRTP implementations can\nwork together.\n\n[zfone]: http://zfoneproject.com/index.html\n\n\n### Other implementations based on GNU ZRTP C++ \n\nThe ZRTP4J implementation is a copycat of the original C++ code. I used the\nsame overall class structure and copied a lot of C++ functionality to Java. Of\ncourse some Java adaptation were done, for example to overcome the problem of\nnon-existing pointers :-), thus I use some non-obvious array handling. If you\nare interessted in the Java implementation of ZRTP then you may have a look\n[here][javazrtp]. The Jitsi project uses the Java implementation. Jitsi is a\npowerfull communication client and is definitely worth a [look][jitsi].\n\nTo enable C based code to use ZRTP C++ I did a C wrapper that offers the same\nfunctionality to C based RTP implementations. The first use of the ZRTP C\nwrapper was for the [PJSIP][] library, actually the RTP part of this\nlibrary. The ZRTP handler for PJSIP is [here][pjzrtp]. This port enables PJSIP\nbased clients to use ZRTP. One of the first clients that uses this feature is\n*[CSipSimple][]*, an very good open source Android SIP client.\n\n[pjsip]: http://www.pjsip.org\n[pjzrtp]: https://github.com/wernerd/ZRTP4PJ\n[javazrtp]: https://github.com/wernerd/ZRTP4J\n[jitsi]: http://www.jitsi.org\n[csipsimple]: http://code.google.com/p/csipsimple\n\n\n### Some notes on GNU ZRTP C++ history\nThe first application that demonstrated the embedded ZRTP was Minisp (now\ndefunct). Minisip has it's own RTP stack and the very first version of this\nembedded ZRTP implementation worked together with this specific RTP stack. \n\nA few weeks later I implemented the GNU ccRTP glue code and ZRTP became part\nof the official GNU ccRTP project and was named GNU ZRTP C++. The Twinkle\nsoftphone uses GNU ccRTP and GNU ZRTP C++ since it's 0.8.2 release and Michel\nde Boer, the implementor of Twinkle, created a nice user interface. All\nfollowing versions of Twinkle include GNU ZRTP C++ as well.\n\n\n### License and further information\nPlease note, most this library is licensed under the GNU GPL, version 3 or \nlater.\n\nFor further information refer to the [ZRTP FAQ][zrtpfaq] and the\n[GNU ZRTP howto][zrtphow]. Both are part of the GNU Telephony wiki and are\nlocated in its documentation category.\n\nSource code in the directory `clients/tivi` and below is not licensed under the\nGNU GPL and is for reference and review only. Refer to the copyright statments\nof the source code in these directories, in particular the sqlite3 sources which\nhave their own license.\n\n[zrtphow]:  http://www.gnutelephony.org/index.php/GNU_ZRTP_How_To\n[zrtpfaq]:  http://www.gnutelephony.org/index.php/ZRTP_FAQ\n[rfc 6189]: http://tools.ietf.org/html/rfc6189\n\n## Building GNU ZRTP C++ \nSince version 1.6 GNU ZRTP C++ supports the *cmake* based build process\nonly. The cmake build process is simpler than the GNU automake/autoconf\nprocess. To build GNU ZRTP C++ perform the following steps after you unpacked\nthe source archive or pulled the source from [Github][]:\n\n    cd <zrtpsrc_dir>\n\tmkdir build\n\tcd build\n\tcmake ..\n\tmake\n\nThe CMakeLists.txt supports several options. If you don't specify any options\nthen `cmake` generates the build that supports GNU ccRTP library and it uses\nthe standalone cryptographic modules, thus no it's not necessary to install an\ncryptographic library on the system. Optionally you may configure ZRTP to use\n_sqlite3_ instead of a simple file to store the ZRTP cache data. For example\n\n    cmake -DSQLITE=true ..\n\ncreates the build files that use _sqlite3_.\n\nPlease have a look at the `CMakeLists.txt` for other options.\n\nRunning cmake in a separate `build` directory is the preferred way. Cmake and\nthe following `make` generate all files in or below the build directory. Thus\nthe base directory and the source directories are not polluted with `*.o`,\n`*.la`, or other files that result from the build process. You may delete the\nbuild directory and create a new one to start from fresh (this is the ultimate\n`make clean` :-) ) or you may create a second directory to build with\ndifferent settings without mixing the two builds.\n\n[github]: http://github.com/wernerd/ZRTPCPP\n"], "fixing_code": ["# Copyright (C) 2009 Werner Dittman\n#\n# This file is free software; as a special exception the author gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n#\ncmake_minimum_required(VERSION 2.6)\n\nPROJECT(libzrtpcpp)\n\nSET(CPACK_PACKAGE_VERSION_MAJOR 3)\nSET(CPACK_PACKAGE_VERSION_MINOR 2)\nSET(CPACK_PACKAGE_VERSION_PATCH 0)\n\nset (VERSION 3.2.0)\nset (SOVERSION 3)\n\n# Define supported command line parameters.\n#\n# Example to build the tivi client: cmake -DTIVI=true ..\n# Without any options cmake generates libzrtpcpp for use with GNU ccRTP\n#\noption(CCRTP \"Build library to use with GNU ccRTP.\" OFF)\noption(CRYPTO_STANDALONE \"Use embedded crypto and big number modules.\" ON)\noption(TIVI \"Build library for the tivi client, implies '-DCRYPTO_STNDALONE=true'.\" OFF)\noption(SQLITE \"Use SQLite DB as backend for ZRTP cache.\" OFF)\n\noption(ANDROID \"Generate Android makefiles (Android.mk)\" ON)\noption(JAVA \"Generate Java support files (requires JDK and SWIG)\" OFF)\n\n\n# **** Check what and how to build ****\n#\nif (CCRTP AND TIVI)\n    MESSAGE(FATAL_ERROR \"Cannot build more than one client at once. Use different build directories.\")\nendif()\n\nif (CCRTP)\n    set (PACKAGE libzrtpcpp)\n    set(zrtplibName zrtpcpp)\nelseif (TIVI)\n    set (PACKAGE libzrtptivi)\n    set(zrtplibName zrtptivi)\n    set(CRYPTO_STANDALONE true)\n    set(SQLITE true)\nelse()\n    MESSAGE(WARNING \"No client defined, building for GNU ccRTP.\")\n    set (PACKAGE libzrtpcpp)\n    set(CCRTP true)\n    set(zrtplibName zrtpcpp)\nendif()\n\n\nif(MSVC60)\n    set(BUILD_STATIC ON CACHE BOOL \"static linking only\" FORCE)\n    MARK_AS_ADVANCED(BUILD_STATIC)\nelse()\n    option(BUILD_STATIC \"Set to OFF to build shared libraries\" OFF)\nendif()\n\n# set to true for debug and trace during CMakeLists development\n# set(CMAKE_VERBOSE_MAKEFILE TRUE)\n\nMESSAGE( STATUS \"Configuring GNU ${PROJECT_NAME} ${VERSION} for ${PACKAGE}...\")\n\n# include most of the fine stuff we need\ninclude(FindPkgConfig)\ninclude(CheckLibraryExists)\ninclude(CheckIncludeFiles)\ninclude(CheckFunctionExists)\n\nif (NOT LIB_SUFFIX)\n    set(LIBDIRNAME \"lib\")\n    # this caused problems in debian where it has to always be lib....\n    if (NOT EXISTS /etc/debian_version)\n        if ( \"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\" )\n            set(LIBDIRNAME \"lib64\")\n        endif()\n    endif()\nelse()\n    set(LIBDIRNAME \"lib${LIB_SUFFIX}\")\nendif()\n\ncheck_include_files(stdlib.h HAVE_STDLIB_H)\ncheck_include_files(string.h HAVE_STRING_H)\n\nif (NOT CRYPTO_STANDALONE)\n    pkg_check_modules(OPENSSL libcrypto>=0.9.8)\n    if (OPENSSL_FOUND)\n      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${OPENSSL_INCLUDE_DIRS}) #update include files search directory\n      check_include_files(openssl/bn.h HAVE_OPENSSL_BN_H)\n      check_include_files(openssl/aes.h HAVE_OPENSSL_AES_H)\n      check_include_files(openssl/sha.h HAVE_OPENSSL_SHA_H)\n      check_library_exists(crypto EVP_CipherInit_ex \"${OPENSSL_LIBDIR}\" HAVE_SSL_CRYPT) #use search lib directory from pkg-config\n      set(LIBS ${LIBS} -lcrypto)\n      set(CRYPTOBACKEND \"libcrypto >= 0.9.8\")\n      set(BUILD_REQ \"libopenssl-devel >= 0.9.8\")\n      set(PACKAGE_REQ \"libopenssl >= 0.9.8\")\n      include_directories(${OPENSSL_INCLUDE_DIRS}) #update includes directory from pkg-config\n  else()\n      message(FATAL_ERROR \"No crypto library found\")\n  endif()\nelse()\n    # For crypto standalone mode we need to configure the bnlib. In a first step\n    # without the tests and demos.\n    check_include_files(stdint.h HAVE_STDINT_H)\n    check_include_files(stdint.h HAVE_ASSERT_H)\n    check_include_files(limits.h HAVE_LIMITS_H)\n\n    check_function_exists(memmove HAVE_MEMMOVE)\n    check_function_exists(memcpy HAVE_MEMCPY)\n\n    # TODO: check if we compile the tests for bnlib\n    #\n    # check_function_exists(clock_gettime HAVE_CLOCK_GETTIME)\n    # check_function_exists(getrusage HAVE_GETRUSAGE)\n    # check_function_exists(clock HAVE_CLOCK)\n    # check_function_exists(time HAVE_TIME)\n\n    # Check if Solaris-style gethrvtime() is available\n    # check_function_exists(gethrvtime HAVE_GETHRVTIME)\n    #\n    # until here\n\n    # necessary and required modules checked, ready to generate config.h\n    configure_file(${CMAKE_SOURCE_DIR}/bnlib/bnconfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/bnconfig.h)\nendif()\n\nif (SQLITE)\n    pkg_check_modules(SQLITE3 sqlite3>=3.7)\n    if (SQLITE3_FOUND)\n        check_include_files(sqlite3.h HAVE_SQLITE_H)\n        set(LIBS ${LIBS} -lsqlite3)\n    else()\n      message(FATAL_ERROR \"SQLite3 library not found\")\n    endif()\nendif()\n\n# necessary and required modules checked, ready to generate config.h in top-level build directory\nconfigure_file(config.h.cmake ${CMAKE_BINARY_DIR}/config.h)\n\nadd_definitions(-g -O2 -fno-strict-aliasing)\nif(CMAKE_COMPILER_IS_GNUCXX)\n  add_definitions(-Wno-long-long -Wno-char-subscripts)\n  add_definitions(-Wall -ansi -pedantic)\n  add_definitions(-DNEW_STDCPP)\nendif()\n\ninclude_directories(BEFORE ${CMAKE_BINARY_DIR})\ninclude_directories (${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/zrtp)\nif(CRYPTO_STANDALONE)\n    include_directories (${CMAKE_SOURCE_DIR}/bnlib)\nendif()\n\nif (NOT CCRTP)\n    set (sdes_src ${CMAKE_SOURCE_DIR}/zrtp/ZrtpSdesStream.cpp)\nendif()\n\n# **** The following source files a common for all clients ****\n#\nset(zrtp_src_no_cache\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCallbackWrapper.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZRtp.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCrc32.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketCommit.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketConf2Ack.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketConfirm.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketDHPart.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketGoClear.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketClearAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketHelloAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketHello.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketError.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketErrorAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketPingAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketPing.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketSASrelay.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpPacketRelayAck.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpStateClass.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpTextData.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpConfigure.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/ZrtpCWrapper.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/Base32.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/zrtpB64Encode.c\n    ${CMAKE_SOURCE_DIR}/zrtp/zrtpB64Decode.c\n    ${CMAKE_SOURCE_DIR}/common/osSpecifics.c ${sdes_src})\n\nset(bnlib_src\n    ${CMAKE_SOURCE_DIR}/bnlib/bn00.c\n    ${CMAKE_SOURCE_DIR}/bnlib/lbn00.c\n    ${CMAKE_SOURCE_DIR}/bnlib/bn.c\n    ${CMAKE_SOURCE_DIR}/bnlib/lbnmem.c\n    ${CMAKE_SOURCE_DIR}/bnlib/sieve.c\n    ${CMAKE_SOURCE_DIR}/bnlib/prime.c\n    ${CMAKE_SOURCE_DIR}/bnlib/bnprint.c\n    ${CMAKE_SOURCE_DIR}/bnlib/jacobi.c\n    ${CMAKE_SOURCE_DIR}/bnlib/germain.c\n    ${CMAKE_SOURCE_DIR}/bnlib/ec/ec.c\n    ${CMAKE_SOURCE_DIR}/bnlib/ec/ecdh.c)\n\nset(zrtp_crypto_src\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/zrtpDH.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/hmac256.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha256.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/hmac384.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha384.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/aesCFB.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/twoCFB.cpp\n    ${CMAKE_SOURCE_DIR}/zrtp/crypto/sha2.c)\n\nif (NOT SQLITE)\n    set(zrtp_src ${zrtp_src_no_cache}\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDCacheFile.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDRecordFile.cpp)\nelse()\n    set(zrtp_src ${zrtp_src_no_cache}\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDCacheDb.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/ZIDRecordDb.cpp\n        ${CMAKE_SOURCE_DIR}/zrtp/zrtpCacheSqliteBackend.c)\n\nendif()\n\nif (CCRTP)\n    add_subdirectory(clients/ccrtp)\nendif()\n\nadd_subdirectory(demo)\n\nif (TIVI)\n    add_subdirectory(clients/tivi)\nendif()\n\n##very usefull for macosx, specially when using gtkosx bundler\nif(APPLE)\n    if (NOT CMAKE_INSTALL_NAME_DIR)\n        set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE STRING \"CMAKE_INSTALL_NAME_DIR set for macosx\" )\n    endif (NOT CMAKE_INSTALL_NAME_DIR)\nendif(APPLE)\n", "\n== GNU ZRTP 3.2.0 ==\n\nThe main ZRTP modules contain fixes for three vulnerabilities found by Mark\nDowd. Thus we advise application developers to use this version of the\nlibrary. The vulnerabilities may lead to application crashes during ZRTP\nnegotiation if an attacker sends prepared ZRTP packets. The fixes remove these\nattack vectors.\n\nSome small other enhancements and cleanup, mainly inside client code.\n\nSome enhancements in cache handling and the handling of retained shared\nsecrets. This change was proposed by Phil, is a slight security enhacement and\nis fully backward comaptible.\n\nBecause of some API changes clients must be compiled and linked with the new\nlibrary.\n\nFor details please refer to the Git logs.\n\n\n== GNU ZRTP 3.1.0 ==\n\nThis version adds some new features and code that supports some other\nclient and this accounts for the most changes inside this release. \n\nThe ZRTP core functionality was not changed as much (bug fixes, cleanup\nmainly) and remains fully backward compatible with older library\nversions. However, one nice enhancement was done: the addition of a standalone\nSDES support module. This module supports basic SDES only without the fancy\nstuff like many other SDES implementations. Thus it's pretty interoperable.\n\nSome other features are:\n- add some android support for a client, may serve as template for others\n- documentation and code cleanup\n\nBecause of some API changes clients must be compiled and linked with the new\nlibrary.\n\n\n== GNU ZRTP 3.0.0 ==\n\nThis is a major enhancement and restructuring of the overall ZRTP\ndistribution. This was necessary because more and more other clients use ZRTP\nand add their specific glue code. Also some clients are not prepared to use\nopenSSL or other crypto libraries to their code and distributions. \n\nHere a summary of the changes\n- a new directory layout to accomodate various clients\n- add standalone crypto modules, for example for AES, to have a real\n  standalone ZRTP/SRTP library that does not require any other crypto library\n  (optional via CMake configuration)\n- Re-structure ZRTP cache and add SQlite3 as optional storage backend\n\nThe default settings for CMake build the normal ZRTP library that use openSSL\nas crypto backend, use the normal file based cache and include the GNU ccRTP\nmodules. This is a librray that is to a large degree compatible with the\nearlier builds.\n\nPlease refer to the top level CMakeFile.txt for options how to switch on the\nstandalone crypto mode or the SQlite3 based cache storage.\n\n\n== GNU ZRTP 2.3.0 ==\n\nAdd a \"paranoid\" mode to ZRTP. If and applications switches to this mode then\nthe ZRTP stack _always_ asks the user to confirm the SAS thus ZRTP behaves as\nif it does not have a cache to store the retained secrets. However, setting\nthe paranoid mode does not diable the cache, only the GUI behaviour.\n\nEnhance the CMake scripts to build a ZRTP library that does not contain GNU\nccRTP modules and does not require ccRTP dependencies.\n\n== GNU ZRTP 2.2.0 ==\n\nAdd stubs, callbacks and other provisions to prepare the full implementation\nof the SAS signing feature, see RFC6189, section 7.2. This feature needs\nsupport from applications and is rarely used if at all.\n\nAs usual smaller fixes, code clean up etc.\n\nBecause of some API changes clients must be compiled and linked with the new\nlibrary.\n\n== GNU ZRTP 2.1.2 ==\n\nThe main topic of this release was to add SRTCP support and some missing\noptional features of ZRTP. \n\nAs such I've added some new API and classes that applications may use to add\nSRTCP or to use the new ZRTP features. the ZRTP stack now supports PBX\nhandling, refer to RFC6189 section 7.3ff.\n\nBecause of some API changes clients must be compiled and linked with the new\nlibrary.\n\n== GNU ZRTP 2.0.0 ==\n\nModify some files to use the new uCommon/commoncpp libraries instead\nof the GNU CC++ commoncpp2. This affects the ccRTP depended modules\nsuch as ZrtpQueue and the Timeout stuff.\n\nUpdated to version 2.0.0 to be in synch with the ccRTP version number\nscheme.\n\n\n== GNU ZRTP 1.6.0 ==\n\nThis version implements the Elliptic Curve Diffie-Helman (ECDH) \npublic-key algorithm. \n\nZRTP also supports new algorithms which are defined as optional\nin the ZRTP RFC. These are:\n- Skein Hash\n- Skein MAC for authentication\n- Twofish symmetric ciphers\n\nTwofish ciphers and Skein MAC are supported by GNU ccRTP SRTP \nimplmentation as well.\n\n\n== GNU ZRTP 1.5.4 ==\n\nThe changes in this release affect the ZRTP Configure mechanism only.\nSome housekeeping stuff (desctructors) was added and the C Wrapper\nhow support ZRTP configure as well.\n\nBecause of some API changes (added destructors) clients must be compiled \nand linked with the new library.\n\n\n== GNU ZRTP 1.5.2 ==\n\nQuite a lot of enhancements:\n- a CMake based build process was added\n- a C wrapper was added to enable C programs to use GNU ZRTP\n- some fixes in the code (race condition solved)\n- better support of multi-stream mode\n- change the old cxx file extension to cpp, some build system don't\n  like the old cxx (Android NDK for example)\n- and much more\n\nBecause of API changes clients must be compiled and linked with the new \nlibrary.\n\n== GNU ZRTP 1.5.0 ==\n\nAdds a first version of a ZrtpConfigure class that provides applications\nto select which crypto and hash methods to use.\n\nBecause of API changes clients must be compiled and linked with the new \nlibrary.\n\n== GNU ZRTP 1.4.5 ==\n\nModify the Hello repeat timer handling to accomodate slow connections and/or\nslow devices. \n\nFix a problem when the other party sends only ZRTP packets at the beginning\nof a RTP session.\n\n=== Interface changes in 1.4.5 ===\n\nNo external interfaces were changed, external API and ABI remain stable.\nInternal interface modifications only to implement Ping/PingAck handling.\n\n\n== GNU ZRTP 1.4.4 ==\n\nImplement the Ping/PingAck packets and associated protocol extensions\nas defined in [http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-15].\n\n=== Interface changes in 1.4.4 ===\n\nNo external interfaces were changed, external API and ABI remain stable.\nInternal interface modifications only to implement Ping/PingAck handling.\n\n\n== GNU ZRTP 1.4.2 ==\n\nIntroduce the Key Derivation Function (KDF) as defined in\n[http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-12].\n\nThe ZRTP protocol version was updated to 1.10.\n\n=== Interface changes in 1.4.2 ===\n\nNo interfaces were changed, API and ABI remain stable.\n\n\n== GNU ZRTP 1.4.0 ==\n\nThis is the first release that is conformant to the ZRTP specification\nthat eventually will become a RFC. See:\n[http://tools.ietf.org/html/draft-zimmermann-avt-zrtp-10]\n\nThe ZRTP protocol version was updated to 1.00.\n\n\n=== Interface changes in 1.4.0 ===\n\nThe ZrtpQueue and ZRtp classes implement a new method to get the other\nparty's ZID (ZRTP identifier). An application, for example a SIP or XMPP\nclient, may use this method to get the other party's ZID and store it\ntogether in a contact list. This enable the application to check the ZID\nif the user calls the other party again. A client shall implement such\na feature to enhance security if user's don't compare the SAS on every\ncall after they confirmed a SAS once.\n\nClients must be compiled and linked with the new library.\n\n\n== GNU ZRTP 1.3.1 ==\n\nThis is an update to version 1.3.0 and implements the ZRTP multi-stream\nmode handshake. The ZRTP protocl version was updated to 0.90 and\ninteroperability tests using the latest Zfone build and Zfone Beta\n(dated September 6, 2008) were successful.\n\nNo changes in the external API and ABI with respect to 1.3.0 - thus no\nrecompile or rebuild of clients are necessary if they use 1.3.0.\n\nTo checkout version 1.3.1 specify revision 494 (-r 494).\n\n\n== GNU ZRTP 1.3.0 ==\n\nThis version is and update to version 1.1.0 an implements the latest\nchanges define in the ZRTP draft. The changes resulted in an update of the\nAPI, therefore existing applications must be recompiled.\n\nThis version of GNU ZRTP is compatible to and was tested to work with\nthe latest Zfone beta (dated June, 10, see Zfone project site). Only\nin one specific error case is a slight incompatibility that will be\nfixed with the next Zfone beta. This incompatibility results in a \nsevere error information at the client. The error only happens if\nsomeone modified the first retained shared secret entry in the\nretained secret cache, for example disk/storage read error. This is\na very unlikely situation.\n\n=== Interface changes in Version 1.3.0 ===\n\nThe Method ''setSipsSecret(...)'' is no longer available. ZRTP does\nnot support this additional secret anymore.\n\nThe method ''setOtherSecret(...)'' was renamed to ''setPbxSecret(...)''\nto reflect the modification in the draft.\n\nThe methos ''setSrtpsSecret(...)'' is was renamed to ''setAuxSecret(...)''\nto reflect the modification in the draft.\n\n\n== GNU ZRTP 1.1.0 ==\n\nGNU ZRTP 1.1.0 implements the basic ZRTP as specificied in the document\n''draft-zimmermann-avt-zrtp-06x''. You may access this at this URL:\n[http://zfoneproject.com/zrtp_ietf.html]\n\nThis version of GNU ZRTP does not support the additiona featur of ZRTP\nsuch as Multi-stream mode, Pre-shared mode, PBX enrollement, and SAS\nSignature.  However, to keep the external interface as stable as\npossible I already implmented stubs for the additional features. Some\nlater versions may have these features implemented, depending if they\nare required by the community.\n\nThe current version of GNU ZRTP is compatible and was tested to work\nwith the latest Zfone beta (dated April, 2nd) (see Zfone project\nsite).\n\n=== Interface changes ==\n\nThe ''SymmetricZRTPSession'' implements some new methods to control\nZRTP and its new features. An application usually uses only a few\nmethods to setup GNU ZRTP. All others are optional and an application\nmay use them only if it requires a special feature (which are not yet\nimplemented :-) ).\n\nThe ''ZrtpUserCallback'' class was modified as well. From an\napplication's point of view\n\n * The methods in ''ZrtpUserCallback'' are not pure virtual anymore\n   but just virtual and have a default implementation, usually a\n   simple return. An application may extend this class and overwrite\n   only those methods it requires.\n\n * Change of the constructor - remove the queue parameter thus we have\n  a very simple standard constructor. This modifcation may requires a\n  small change in the application or class that uses or extends\n  ''ZrtpUserCallback''.\n\n * The method showSAS has an additional parameter:\n\n     showSAS(std::string sas, bool verified);\n\n  the verified flag is set to true in SAS is verified, false if not verified.\n  This allows a more flexible support to display the SAS even if SAS is\n  verified. Formerly ZRTP did not call \"showSAS()\" if SAS was verified. Now\n  ZRTP always calls showSAS and provides the verification information\n  explicitly.\n\n* The siganture of the following user callback methods was changed:\n\n        showMessage(GnuZrtpCodes::MessageSeverity sev, int32_t subCode)\n\n        zrtpNegotiationFailed(GnuZrtpCodes::MessageSeverity severity,\n                                           int32_t subCode)\n\n  The GNU ZRTP core and the ZRTP ccRTP extension do not contain\n  message strings anymore. Both use codes to inform an application\n  about events, problems or failure. The folder ''demo'' contains a\n  small demo program that shows one way how to map the codes to\n  strings. Delegating string handling and formating to the application\n  simplifies internationalization etc.\n\nPlaese note: some new callback methods and ''SymmetricZRTPSession''\nmethods are only stubs in the currect version. The real implementation\n(filling the stubs with real code) will be done some time later (see\nabove about unsupported features).\n\n=== Header files ===\n\nThe new version greatly reduces the number of header files installed\nin the include directory. In the new version I decoupled the internal\nheader files and implementation from the external classes and\ninterfaces an application requires. Only six header files are\ninstalled in GNU ZRTP's include directory (libzrtpcpp subdirectory in\nthe usual include paths)\n\n== Demo program ==\n\nThe new folder ''demo'' contains a small demo program that shows\nvarious ways how to use GNU ZRTP to setup secure RTP (SRTP) sessions\neven without signaling protocols\n\n", "## GNU ZRTP C++\n\nThis package provides a library that adds ZRTP support to the GNU\nccRTP stack. Phil Zimmermann developed ZRTP to allow ad-hoc, easy to\nuse key negotiation to setup Secure RTP (SRTP) sessions. GNU ZRTP works\ntogether with GNU ccRTP (1.5.0 or later) and provides a ZRTP\nimplementation that can be directly embedded into client and server\napplications.\n\nThe GNU ZRTP implementation is compliant to [RFC 6189][]. Currently GNU ZRTP\nC++ supports the following features:\n\n* multi-stream mode\n* Finite field Diffie-Helman with 2048 and 3072 bit primes\n* Elliptic curve Diffie-Helman with 256 and 384 bit curves\n* AES-128 and AES-256 symmetric cipher\n* Twofish-128 and Twofish-256 bit symmetric ciphers\n* The SRTP authentication methods HMAC-SHA1 with 32 bit and 80 bit length and\n  the Skein MAC with 32 bit and 64 bit length\n* The Short Authentication String (SAS) type with base 32 encoding (4\n  characters)\n\nSome features like preshared mode or signed SAS are not supported but the GNU\nZRTP C++ implementation defines the necessary external interfaces and\nfunctions for these enhanced features (stubs only).\n\n### SDES support\nThis release also provides SDES support. The SDES implementation does not\nsupport all of the fancy stuff but is usable in most cases. This implementation\nhowever supports the new SDES crypto mixing to overcome some security issues\nfor SIP forking. Please look for `draft-zimmermann-mmusic-sdesc-mix-00`.\n\n### Interoperability\nDuring the development of ZRTP and its sister implementation ZRTP4J (the Java\nversion of the ZRTP) Phil Zimmermann, his developers, and I worked together to\nmake sure Phil's [Zfone][] implementation and the GNU ZRTP implementations can\nwork together.\n\n[zfone]: http://zfoneproject.com/index.html\n\n\n### Other implementations based on GNU ZRTP C++ \n\nThe ZRTP4J implementation is a copycat of the original C++ code. I used the\nsame overall class structure and copied a lot of C++ functionality to Java. Of\ncourse some Java adaptation were done, for example to overcome the problem of\nnon-existing pointers :-), thus I use some non-obvious array handling. If you\nare interessted in the Java implementation of ZRTP then you may have a look\n[here][javazrtp]. The Jitsi project uses the Java implementation. Jitsi is a\npowerfull communication client and is definitely worth a [look][jitsi].\n\nTo enable C based code to use ZRTP C++ I did a C wrapper that offers the same\nfunctionality to C based RTP implementations. The first use of the ZRTP C\nwrapper was for the [PJSIP][] library, actually the RTP part of this\nlibrary. The ZRTP handler for PJSIP is [here][pjzrtp]. This port enables PJSIP\nbased clients to use ZRTP. One of the first clients that uses this feature is\n*[CSipSimple][]*, an very good open source Android SIP client.\n\n[pjsip]: http://www.pjsip.org\n[pjzrtp]: https://github.com/wernerd/ZRTP4PJ\n[javazrtp]: https://github.com/wernerd/ZRTP4J\n[jitsi]: http://www.jitsi.org\n[csipsimple]: http://code.google.com/p/csipsimple\n\n\n### Some notes on GNU ZRTP C++ history\nThe first application that demonstrated the embedded ZRTP was Minisp (now\ndefunct). Minisip has it's own RTP stack and the very first version of this\nembedded ZRTP implementation worked together with this specific RTP stack. \n\nA few weeks later I implemented the GNU ccRTP glue code and ZRTP became part\nof the official GNU ccRTP project and was named GNU ZRTP C++. The Twinkle\nsoftphone uses GNU ccRTP and GNU ZRTP C++ since it's 0.8.2 release and Michel\nde Boer, the implementor of Twinkle, created a nice user interface. All\nfollowing versions of Twinkle include GNU ZRTP C++ as well.\n\n\n### License and further information\nPlease note, most this library is licensed under the GNU GPL, version 3 or \nlater.\n\nFor further information refer to the [ZRTP FAQ][zrtpfaq] and the\n[GNU ZRTP howto][zrtphow]. Both are part of the GNU Telephony wiki and are\nlocated in its documentation category.\n\nSource code in the directory `clients/tivi` and below is not licensed under the\nGNU GPL and is for reference and review only. Refer to the copyright statments\nof the source code in these directories, in particular the sqlite3 sources which\nhave their own license.\n\n[zrtphow]:  http://www.gnutelephony.org/index.php/GNU_ZRTP_How_To\n[zrtpfaq]:  http://www.gnutelephony.org/index.php/ZRTP_FAQ\n[rfc 6189]: http://tools.ietf.org/html/rfc6189\n\n## Building GNU ZRTP C++ \nSince version 1.6 GNU ZRTP C++ supports the *cmake* based build process\nonly. The cmake build process is simpler than the GNU automake/autoconf\nprocess. To build GNU ZRTP C++ perform the following steps after you unpacked\nthe source archive or pulled the source from [Github][]:\n\n    cd <zrtpsrc_dir>\n\tmkdir build\n\tcd build\n\tcmake ..\n\tmake\n\nThe CMakeLists.txt supports several options. If you don't specify any options\nthen `cmake` generates the build that supports GNU ccRTP library and it uses\nthe standalone cryptographic modules, thus no it's not necessary to install an\ncryptographic library on the system. Optionally you may configure ZRTP to use\n_sqlite3_ instead of a simple file to store the ZRTP cache data. For example\n\n    cmake -DSQLITE=true ..\n\ncreates the build files that use _sqlite3_.\n\nPlease have a look at the `CMakeLists.txt` for other options.\n\nRunning cmake in a separate `build` directory is the preferred way. Cmake and\nthe following `make` generate all files in or below the build directory. Thus\nthe base directory and the source directories are not polluted with `*.o`,\n`*.la`, or other files that result from the build process. You may delete the\nbuild directory and create a new one to start from fresh (this is the ultimate\n`make clean` :-) ) or you may create a second directory to build with\ndifferent settings without mixing the two builds.\n\n[github]: http://github.com/wernerd/ZRTPCPP\n"], "filenames": ["CMakeLists.txt", "NEWS", "README.md"], "buggy_code_start_loc": [16, 0, 23], "buggy_code_end_loc": [20, 0, 27], "fixing_code_start_loc": [16, 1, 23], "fixing_code_end_loc": [20, 97, 26], "type": "CWE-119", "message": "GNU ZRTPCPP before 3.2.0 allows remote attackers to obtain sensitive information (uninitialized heap memory) or cause a denial of service (out-of-bounds read) via a crafted packet, as demonstrated by a truncated Ping packet that is not properly handled by the getEpHash function.", "other": {"cve": {"id": "CVE-2013-2223", "sourceIdentifier": "secalert@redhat.com", "published": "2013-10-04T17:55:09.587", "lastModified": "2018-01-09T02:29:03.440", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "GNU ZRTPCPP before 3.2.0 allows remote attackers to obtain sensitive information (uninitialized heap memory) or cause a denial of service (out-of-bounds read) via a crafted packet, as demonstrated by a truncated Ping packet that is not properly handled by the getEpHash function."}, {"lang": "es", "value": "GNU ZRTPCPP anterior a la versi\u00f3n 3.2.0 permite a atacantes remotos obtener informaci\u00f3n sensible (memoria din\u00e1mica sin inicializar) o provocar una denegaci\u00f3n de servicio (lectura fuera de l\u00edmite) a trav\u00e9s de un paquete manipulado, como se demostr\u00f3 con un Ping truncado que no es manejado adecuadamente por la funci\u00f3n getEpHash."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.1", "matchCriteriaId": "91D694E9-06A4-403E-908A-A953237E1EA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:2.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "F3F4A3FA-4EC9-4CC5-ABCA-4858D2228242"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "DB27C7A4-7124-4B7B-85E4-A5E196B697E0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "5932ACB9-2B8B-4C50-B175-734F4843F455"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:3.0.0:alpha:*:*:*:*:*:*", "matchCriteriaId": "68C2369A-8E40-45E2-84BC-B4DC6D01DB36"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "224FED2C-D300-409F-B424-9BB65735B986"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wernerd:zrtpcpp:3.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "C9BFF3A4-44CF-48DC-BA1B-D11B3F49FC00"}]}]}], "references": [{"url": "http://blog.azimuthsecurity.com/2013/06/attacking-crypto-phones-weaknesses-in.html", "source": "secalert@redhat.com", "tags": ["Exploit"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2013-10/msg00052.html", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-updates/2013-10/msg00053.html", "source": "secalert@redhat.com"}, {"url": "http://seclists.org/oss-sec/2013/q2/638", "source": "secalert@redhat.com"}, {"url": "http://security.gentoo.org/glsa/glsa-201309-13.xml", "source": "secalert@redhat.com"}, {"url": "https://github.com/wernerd/ZRTPCPP/commit/4654f330317c9948bb61d138eb24d49690ca4637", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/wernerd/ZRTPCPP/commit/4654f330317c9948bb61d138eb24d49690ca4637"}}