{"buggy_code": ["<?php\n/* Copyright (C) 2001-2007\tRodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2016\tLaurent Destailleur\t <eldy@users.sourceforge.net>\n * Copyright (C) 2005\t\tEric Seigne\t\t     <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t <regis.houssin@capnetworks.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t <acianfa@free.fr>\n * Copyright (C) 2006\t\tAuguria SARL\t\t <info@auguria.org>\n * Copyright (C) 2010-2015\tJuanjo Menent\t\t <jmenent@2byte.es>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t <marcosgdf@gmail.com>\n * Copyright (C) 2012-2013\tC\u00e9dric Salvador\t\t <csalvador@gpcsolutions.fr>\n * Copyright (C) 2011-2020\tAlexandre Spangaro\t <aspangaro@open-dsi.fr>\n * Copyright (C) 2014\t\tC\u00e9dric Gross\t\t <c.gross@kreiz-it.fr>\n * Copyright (C) 2014-2015\tFerran Marcet\t\t <fmarcet@2byte.es>\n * Copyright (C) 2015\t\tJean-Fran\u00e7ois Ferry\t <jfefe@aternatik.fr>\n * Copyright (C) 2015\t\tRapha\u00ebl Doursenaud\t <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2016\t\tCharlie Benke\t\t <charlie@patas-monkey.com>\n * Copyright (C) 2016\t\tMeziane Sof\t\t     <virtualsof@yahoo.fr>\n * Copyright (C) 2017\t\tJosep Llu\u00eds Amador\t <joseplluis@lliuretic.cat>\n * Copyright (C) 2019-2021  Fr\u00e9d\u00e9ric France      <frederic.france@netlogic.fr>\n * Copyright (C) 2019-2020  Thibault FOUCART     <support@ptibogxiv.net>\n * Copyright (C) 2020  \t\tPierre Ardoin     \t <mapiolca@me.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/product/card.php\n *  \\ingroup    product\n *  \\brief      Page to show product\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/canvas.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/html.formproduct.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/genericobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/modules/product/modules_product.class.php';\n\nif (!empty($conf->propal->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/comm/propal/class/propal.class.php';\n}\nif (!empty($conf->facture->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/compta/facture/class/facture.class.php';\n}\nif (!empty($conf->commande->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/commande/class/commande.class.php';\n}\nif (!empty($conf->accounting->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formaccounting.class.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/accountancy/class/accountingaccount.class.php';\n}\nif (!empty($conf->bom->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/bom/class/bom.class.php';\n}\n\n// Load translation files required by the page\n$langs->loadLangs(array('products', 'other'));\nif (!empty($conf->stock->enabled)) {\n\t$langs->load(\"stocks\");\n}\nif (!empty($conf->facture->enabled)) {\n\t$langs->load(\"bills\");\n}\nif (!empty($conf->productbatch->enabled)) {\n\t$langs->load(\"productbatch\");\n}\n\n$mesg = ''; $error = 0; $errors = array();\n\n$refalreadyexists = 0;\n\n$id = GETPOST('id', 'int');\n$ref = (GETPOSTISSET('ref') ? GETPOST('ref', 'alpha') : null);\n$type = (GETPOSTISSET('type') ? GETPOST('type', 'int') : Product::TYPE_PRODUCT);\n$action = (GETPOST('action', 'alpha') ? GETPOST('action', 'alpha') : 'view');\n$cancel = GETPOST('cancel', 'alpha');\n$backtopage = GETPOST('backtopage', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n$socid = GETPOST('socid', 'int');\n$duration_value = GETPOST('duration_value', 'int');\n$duration_unit = GETPOST('duration_unit', 'alpha');\n\n$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\n$checkmandatory = GETPOST('accountancy_code_buy_export', 'alpha');\n// by default 'alphanohtml' (better security); hidden conf MAIN_SECURITY_ALLOW_UNSECURED_LABELS_WITH_HTML allows basic html\n$label_security_check = empty($conf->global->MAIN_SECURITY_ALLOW_UNSECURED_LABELS_WITH_HTML) ? 'alphanohtml' : 'restricthtml';\n\nif (!empty($user->socid)) {\n\t$socid = $user->socid;\n}\n\n// Load object modCodeProduct\n$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\nif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t$module = substr($module, 0, dol_strlen($module) - 4);\n}\n$result = dol_include_once('/core/modules/product/'.$module.'.php');\nif ($result > 0) {\n\t$modCodeProduct = new $module();\n}\n\n$object = new Product($db);\n$object->type = $type; // so test later to fill $usercancxxx is correct\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n\nif ($id > 0 || !empty($ref)) {\n\t$result = $object->fetch($id, $ref);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error, $object->errors);\n\t}\n\tif (!empty($conf->product->enabled)) {\n\t\t$upload_dir = $conf->product->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);\n\t} elseif (!empty($conf->service->enabled)) {\n\t\t$upload_dir = $conf->service->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);\n\t}\n\n\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {    // For backward compatiblity, we scan also old dirs\n\t\tif (!empty($conf->product->enabled)) {\n\t\t\t$upload_dirold = $conf->product->multidir_output[$object->entity].'/'.substr(substr(\"000\".$object->id, -2), 1, 1).'/'.substr(substr(\"000\".$object->id, -2), 0, 1).'/'.$object->id.\"/photos\";\n\t\t} else {\n\t\t\t$upload_dirold = $conf->service->multidir_output[$object->entity].'/'.substr(substr(\"000\".$object->id, -2), 1, 1).'/'.substr(substr(\"000\".$object->id, -2), 0, 1).'/'.$object->id.\"/photos\";\n\t\t}\n\t}\n}\n\n$modulepart = 'product';\n\n// Get object canvas (By default, this is not defined, so standard usage of dolibarr)\n$canvas = !empty($object->canvas) ? $object->canvas : GETPOST(\"canvas\");\n$objcanvas = null;\nif (!empty($canvas)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/canvas.class.php';\n\t$objcanvas = new Canvas($db, $action);\n\t$objcanvas->getCanvas('product', 'card', $canvas);\n}\n\n// Security check\n$fieldvalue = (!empty($id) ? $id : (!empty($ref) ? $ref : ''));\n$fieldtype = (!empty($id) ? 'rowid' : 'ref');\n\nif ($object->id > 0) {\n\tif ($object->type == $object::TYPE_PRODUCT) {\n\t\trestrictedArea($user, 'produit', $object->id, 'product&product', '', '');\n\t}\n\tif ($object->type == $object::TYPE_SERVICE) {\n\t\trestrictedArea($user, 'service', $object->id, 'product&product', '', '');\n\t}\n} else {\n\trestrictedArea($user, 'produit|service', $fieldvalue, 'product&product', '', '', $fieldtype);\n}\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('productcard', 'globalcard'));\n\n$usercanread = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->lire) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->lire));\n$usercancreate = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->creer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->creer));\n$usercandelete = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->supprimer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->supprimer));\n\n\n/*\n * Actions\n */\n\nif ($cancel) {\n\t$action = '';\n}\n\n$createbarcode = empty($conf->barcode->enabled) ? 0 : 1;\nif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->creer_advance)) {\n\t$createbarcode = 0;\n}\n\n$parameters = array('id'=>$id, 'ref'=>$ref, 'objcanvas'=>$objcanvas);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\t$backurlforlist = DOL_URL_ROOT.'/product/list.php?type='.$type;\n\n\tif (empty($backtopage) || ($cancel && empty($id))) {\n\t\tif (empty($backtopage) || ($cancel && strpos($backtopage, '__ID__'))) {\n\t\t\tif (empty($id) && (($action != 'add' && $action != 'create') || $cancel)) {\n\t\t\t\t$backtopage = $backurlforlist;\n\t\t\t} else {\n\t\t\t\t$backtopage = DOL_URL_ROOT.'/product/card.php?id='.((!empty($id) && $id > 0) ? $id : '__ID__');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($cancel) {\n\t\tif (!empty($backtopageforcancel)) {\n\t\t\theader(\"Location: \".$backtopageforcancel);\n\t\t\texit;\n\t\t} elseif (!empty($backtopage)) {\n\t\t\theader(\"Location: \".$backtopage);\n\t\t\texit;\n\t\t}\n\t\t$action = '';\n\t}\n\n\t// Type\n\tif ($action == 'setfk_product_type' && $usercancreate) {\n\t\t$result = $object->setValueFrom('fk_product_type', GETPOST('fk_product_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\texit;\n\t}\n\n\t// Actions to build doc\n\t$upload_dir = $conf->product->dir_output;\n\t$permissiontoadd = $usercancreate;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_printing.inc.php';\n\n\t// Barcode type\n\tif ($action == 'setfk_barcode_type' && $createbarcode) {\n\t\t$result = $object->setValueFrom('fk_barcode_type', GETPOST('fk_barcode_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\texit;\n\t}\n\n\t// Barcode value\n\tif ($action == 'setbarcode' && $createbarcode) {\n\t\t$result = $object->check_barcode(GETPOST('barcode'), GETPOST('barcode_type_code'));\n\n\t\tif ($result >= 0) {\n\t\t\t$result = $object->setValueFrom('barcode', GETPOST('barcode'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\t\texit;\n\t\t} else {\n\t\t\t$langs->load(\"errors\");\n\t\t\tif ($result == -1) {\n\t\t\t\t$errors[] = 'ErrorBadBarCodeSyntax';\n\t\t\t} elseif ($result == -2) {\n\t\t\t\t$errors[] = 'ErrorBarCodeRequired';\n\t\t\t} elseif ($result == -3) {\n\t\t\t\t$errors[] = 'ErrorBarCodeAlreadyUsed';\n\t\t\t} else {\n\t\t\t\t$errors[] = 'FailedToValidateBarCode';\n\t\t\t}\n\n\t\t\t$error++;\n\t\t\tsetEventMessages($errors, null, 'errors');\n\t\t}\n\t}\n\n\t// Add a product or service\n\tif ($action == 'add' && $usercancreate) {\n\t\t$error = 0;\n\n\t\tif (!GETPOST('label', $label_security_check)) {\n\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Label')), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\t\tif (empty($ref)) {\n\t\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Ref')), null, 'errors');\n\t\t\t\t\t$action = \"create\";\n\t\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\t\tif (!empty($duration_value) && empty($duration_unit)) {\n\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Unit')), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$units = GETPOST('units', 'int');\n\n\t\t\t$object->ref                   = $ref;\n\t\t\t$object->label                 = GETPOST('label', $label_security_check);\n\t\t\t$object->price_base_type       = GETPOST('price_base_type', 'aZ09');\n\t\t\t$object->mandatory_period \t   = !empty(GETPOST(\"mandatoryperiod\", 'alpha')) ? 1 : 0;\n\t\t\tif ($object->price_base_type == 'TTC') {\n\t\t\t\t$object->price_ttc = GETPOST('price');\n\t\t\t} else {\n\t\t\t\t$object->price = GETPOST('price');\n\t\t\t}\n\t\t\tif ($object->price_base_type == 'TTC') {\n\t\t\t\t$object->price_min_ttc = GETPOST('price_min');\n\t\t\t} else {\n\t\t\t\t$object->price_min = GETPOST('price_min');\n\t\t\t}\n\n\t\t\t$tva_tx_txt = GETPOST('tva_tx', 'alpha'); // tva_tx can be '8.5'  or  '8.5*'  or  '8.5 (XXX)' or '8.5* (XXX)'\n\n\t\t\t// We must define tva_tx, npr and local taxes\n\t\t\t$vatratecode = '';\n\t\t\t$tva_tx = preg_replace('/[^0-9\\.].*$/', '', $tva_tx_txt); // keep remove all after the numbers and dot\n\t\t\t$npr = preg_match('/\\*/', $tva_tx_txt) ? 1 : 0;\n\t\t\t$localtax1 = 0; $localtax2 = 0; $localtax1_type = '0'; $localtax2_type = '0';\n\t\t\t// If value contains the unique code of vat line (new recommanded method), we use it to find npr and local taxes\n\t\t\t$reg = array();\n\t\t\tif (preg_match('/\\((.*)\\)/', $tva_tx_txt, $reg)) {\n\t\t\t\t// We look into database using code (we can't use get_localtax() because it depends on buyer that is not known). Same in update price.\n\t\t\t\t$vatratecode = $reg[1];\n\t\t\t\t// Get record from code\n\t\t\t\t$sql = \"SELECT t.rowid, t.code, t.recuperableonly, t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t\t\t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($mysoc->country_code).\"'\";\n\t\t\t\t$sql .= \" AND t.taux = \".((float) $tva_tx).\" AND t.active = 1\";\n\t\t\t\t$sql .= \" AND t.code = '\".$db->escape($vatratecode).\"'\";\n\t\t\t\t$resql = $db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$obj = $db->fetch_object($resql);\n\t\t\t\t\t$npr = $obj->recuperableonly;\n\t\t\t\t\t$localtax1 = $obj->localtax1;\n\t\t\t\t\t$localtax2 = $obj->localtax2;\n\t\t\t\t\t$localtax1_type = $obj->localtax1_type;\n\t\t\t\t\t$localtax2_type = $obj->localtax2_type;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$object->default_vat_code = $vatratecode;\n\t\t\t$object->tva_tx = $tva_tx;\n\t\t\t$object->tva_npr = $npr;\n\t\t\t$object->localtax1_tx = $localtax1;\n\t\t\t$object->localtax2_tx = $localtax2;\n\t\t\t$object->localtax1_type = $localtax1_type;\n\t\t\t$object->localtax2_type = $localtax2_type;\n\n\t\t\t$object->type               \t = $type;\n\t\t\t$object->status             \t = GETPOST('statut');\n\t\t\t$object->status_buy = GETPOST('statut_buy');\n\t\t\t$object->status_batch = GETPOST('status_batch');\n\t\t\t$object->batch_mask = GETPOST('batch_mask');\n\n\t\t\t$object->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t$object->barcode = GETPOST('barcode');\n\t\t\t// Set barcode_type_xxx from barcode_type id\n\t\t\t$stdobject = new GenericObject($db);\n\t\t\t$stdobject->element = 'product';\n\t\t\t$stdobject->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t$result = $stdobject->fetch_barcode();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\t$mesg = 'Failed to get bar code type information ';\n\t\t\t\tsetEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');\n\t\t\t}\n\t\t\t$object->barcode_type_code      = $stdobject->barcode_type_code;\n\t\t\t$object->barcode_type_coder     = $stdobject->barcode_type_coder;\n\t\t\t$object->barcode_type_label     = $stdobject->barcode_type_label;\n\n\t\t\t$object->description        \t = dol_htmlcleanlastbr(GETPOST('desc', 'restricthtml'));\n\t\t\t$object->url = GETPOST('url');\n\t\t\t$object->note_private          \t = dol_htmlcleanlastbr(GETPOST('note_private', 'restricthtml'));\n\t\t\t$object->note               \t = $object->note_private; // deprecated\n\t\t\t$object->customcode              = GETPOST('customcode', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->lifetime               = GETPOST('lifetime', 'int');\n\t\t\t$object->qc_frequency           = GETPOST('qc_frequency', 'int');\n\t\t\t$object->duration_value     \t = $duration_value;\n\t\t\t$object->duration_unit      \t = $duration_unit;\n\t\t\t$object->fk_default_warehouse\t = GETPOST('fk_default_warehouse');\n\t\t\t$object->seuil_stock_alerte \t = GETPOST('seuil_stock_alerte') ?GETPOST('seuil_stock_alerte') : 0;\n\t\t\t$object->desiredstock          = GETPOST('desiredstock') ?GETPOST('desiredstock') : 0;\n\t\t\t$object->canvas             \t = GETPOST('canvas');\n\t\t\t$object->net_measure           = GETPOST('net_measure');\n\t\t\t$object->net_measure_units     = GETPOST('net_measure_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->weight             \t = GETPOST('weight');\n\t\t\t$object->weight_units       \t = GETPOST('weight_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->length             \t = GETPOST('size');\n\t\t\t$object->length_units       \t = GETPOST('size_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->width = GETPOST('sizewidth');\n\t\t\t$object->height             \t = GETPOST('sizeheight');\n\t\t\t$object->surface            \t = GETPOST('surface');\n\t\t\t$object->surface_units      \t = GETPOST('surface_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->volume             \t = GETPOST('volume');\n\t\t\t$object->volume_units       \t = GETPOST('volume_units'); // This is not the fk_unit but the power of unit\n\t\t\t$finished = GETPOST('finished', 'int');\n\t\t\tif ($finished > 0) {\n\t\t\t\t$object->finished = $finished;\n\t\t\t} else {\n\t\t\t\t$object->finished = null;\n\t\t\t}\n\n\t\t\t$units = GETPOST('units', 'int');\n\t\t\tif ($units > 0) {\n\t\t\t\t$object->fk_unit = $units;\n\t\t\t} else {\n\t\t\t\t$object->fk_unit = null;\n\t\t\t}\n\n\t\t\t$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n\t\t\t$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n\t\t\t$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n\t\t\t$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n\t\t\t$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n\t\t\t$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\n\t\t\tif (empty($accountancy_code_sell) || $accountancy_code_sell == '-1') {\n\t\t\t\t$object->accountancy_code_sell = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_sell_intra) || $accountancy_code_sell_intra == '-1') {\n\t\t\t\t$object->accountancy_code_sell_intra = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_sell_export) || $accountancy_code_sell_export == '-1') {\n\t\t\t\t$object->accountancy_code_sell_export = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy) || $accountancy_code_buy == '-1') {\n\t\t\t\t$object->accountancy_code_buy = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy_intra) || $accountancy_code_buy_intra == '-1') {\n\t\t\t\t$object->accountancy_code_buy_intra = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy_export) || $accountancy_code_buy_export == '-1') {\n\t\t\t\t$object->accountancy_code_buy_export = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t}\n\n\t\t\t// MultiPrix\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\tfor ($i = 2; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\tif (GETPOSTISSET(\"price_\".$i)) {\n\t\t\t\t\t\t$object->multiprices[\"$i\"] = price2num(GETPOST(\"price_\".$i), 'MU');\n\t\t\t\t\t\t$object->multiprices_base_type[\"$i\"] = GETPOST(\"multiprices_base_type_\".$i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->multiprices[\"$i\"] = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif (!$ref && !empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t// Generate ref...\n\t\t\t\t$ref = $modCodeProduct->getNextValue($object, $type);\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$id = $object->create($user);\n\t\t\t}\n\n\t\t\tif ($id > 0) {\n\t\t\t\t// Category association\n\t\t\t\t$categories = GETPOST('categories', 'array');\n\t\t\t\t$object->setCategories($categories);\n\n\t\t\t\tif (!empty($backtopage)) {\n\t\t\t\t\t$backtopage = preg_replace('/__ID__/', $object->id, $backtopage); // New method to autoselect project after a New on another form object creation\n\t\t\t\t\tif (preg_match('/\\?/', $backtopage)) {\n\t\t\t\t\t\t$backtopage .= '&socid='.$object->id; // Old method\n\t\t\t\t\t}\n\t\t\t\t\theader(\"Location: \".$backtopage);\n\t\t\t\t\texit;\n\t\t\t\t} else {\n\t\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$id);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t}\n\t\t\t\t$action = \"create\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update a product or service\n\tif ($action == 'update' && $usercancreate) {\n\t\tif (GETPOST('cancel', 'alpha')) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tif ($object->id > 0) {\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t\t$object->ref                = $ref;\n\t\t\t\t}\n\t\t\t\t$object->label                  = GETPOST('label', $label_security_check);\n\n\t\t\t\t$desc = dol_htmlcleanlastbr(preg_replace('/&nbsp;$/', '', GETPOST('desc', 'restricthtml')));\n\t\t\t\t$object->description            = $desc;\n\n\t\t\t\t$object->url = GETPOST('url');\n\t\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\t\t$object->note_private = dol_htmlcleanlastbr(GETPOST('note_private', 'restricthtml'));\n\t\t\t\t\t$object->note = $object->note_private;\n\t\t\t\t}\n\t\t\t\t$object->customcode             = GETPOST('customcode', 'alpha');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->lifetime               = GETPOST('lifetime', 'int');\n\t\t\t\t$object->qc_frequency           = GETPOST('qc_frequency', 'int');\n\t\t\t\t$object->status                 = GETPOST('statut', 'int');\n\t\t\t\t$object->status_buy             = GETPOST('statut_buy', 'int');\n\t\t\t\t$object->status_batch = GETPOST('status_batch', 'aZ09');\n\t\t\t\t$object->batch_mask = GETPOST('batch_mask', 'alpha');\n\t\t\t\t$object->fk_default_warehouse   = GETPOST('fk_default_warehouse');\n\t\t\t\t// removed from update view so GETPOST always empty\n\t\t\t\t/*\n\t\t\t\t$object->seuil_stock_alerte     = GETPOST('seuil_stock_alerte');\n\t\t\t\t$object->desiredstock           = GETPOST('desiredstock');\n\t\t\t\t*/\n\t\t\t\t$object->duration_value         = GETPOST('duration_value', 'int');\n\t\t\t\t$object->duration_unit          = GETPOST('duration_unit', 'alpha');\n\n\t\t\t\t$object->canvas                 = GETPOST('canvas');\n\t\t\t\t$object->net_measure            = GETPOST('net_measure');\n\t\t\t\t$object->net_measure_units      = GETPOST('net_measure_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->weight                 = GETPOST('weight');\n\t\t\t\t$object->weight_units           = GETPOST('weight_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->length                 = GETPOST('size');\n\t\t\t\t$object->length_units           = GETPOST('size_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->width = GETPOST('sizewidth');\n\t\t\t\t$object->height = GETPOST('sizeheight');\n\n\t\t\t\t$object->surface                = GETPOST('surface');\n\t\t\t\t$object->surface_units          = GETPOST('surface_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->volume                 = GETPOST('volume');\n\t\t\t\t$object->volume_units           = GETPOST('volume_units'); // This is not the fk_unit but the power of unit\n\n\t\t\t\t$finished = GETPOST('finished', 'int');\n\t\t\t\tif ($finished >= 0) {\n\t\t\t\t\t$object->finished = $finished;\n\t\t\t\t} else {\n\t\t\t\t\t$object->finished = null;\n\t\t\t\t}\n\n\t\t\t\t$fk_default_bom = GETPOST('fk_default_bom', 'int');\n\t\t\t\tif ($fk_default_bom >= 0) {\n\t\t\t\t\t$object->fk_default_bom = $fk_default_bom;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fk_default_bom = null;\n\t\t\t\t}\n\n\t\t\t\t$units = GETPOST('units', 'int');\n\t\t\t\tif ($units > 0) {\n\t\t\t\t\t$object->fk_unit = $units;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fk_unit = null;\n\t\t\t\t}\n\n\t\t\t\t$object->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t$object->barcode = GETPOST('barcode');\n\t\t\t\t// Set barcode_type_xxx from barcode_type id\n\t\t\t\t$stdobject = new GenericObject($db);\n\t\t\t\t$stdobject->element = 'product';\n\t\t\t\t$stdobject->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t$result = $stdobject->fetch_barcode();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$mesg = 'Failed to get bar code type information ';\n\t\t\t\t\tsetEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');\n\t\t\t\t}\n\t\t\t\t$object->barcode_type_code      = $stdobject->barcode_type_code;\n\t\t\t\t$object->barcode_type_coder     = $stdobject->barcode_type_coder;\n\t\t\t\t$object->barcode_type_label     = $stdobject->barcode_type_label;\n\n\t\t\t\t$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n\t\t\t\t$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n\t\t\t\t$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n\t\t\t\t$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n\t\t\t\t$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n\t\t\t\t$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\t\t\t\t$checkmandatory = GETPOST('mandatoryperiod', 'alpha');\n\t\t\t\tif (empty($accountancy_code_sell) || $accountancy_code_sell == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_sell_intra) || $accountancy_code_sell_intra == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell_intra = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_sell_export) || $accountancy_code_sell_export == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell_export = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy) || $accountancy_code_buy == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy_intra) || $accountancy_code_buy_intra == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy_intra = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy_export) || $accountancy_code_buy_export == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy_export = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t\t}\n\t\t\t\tif ($object->isService()) {\n\t\t\t\t\t$object->mandatory_period =  (!empty($checkmandatory)) ? 1 : 0 ;\n\t\t\t\t}\n\n\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object, '@GETPOSTISSET');\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\tif (!$error && $object->check()) {\n\t\t\t\t\tif ($object->update($object->id, $user) > 0) {\n\t\t\t\t\t\t// Category association\n\t\t\t\t\t\t$categories = GETPOST('categories', 'array');\n\t\t\t\t\t\t$object->setCategories($categories);\n\n\t\t\t\t\t\t$action = 'view';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$action = 'edit';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorProductBadRefOrLabel\"), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t\t$action = 'edit';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action clone object\n\tif ($action == 'confirm_clone' && $confirm != 'yes') {\n\t\t$action = '';\n\t}\n\tif ($action == 'confirm_clone' && $confirm == 'yes' && $usercancreate) {\n\t\tif (!GETPOST('clone_content') && !GETPOST('clone_prices')) {\n\t\t\tsetEventMessages($langs->trans(\"NoCloneOptionsSpecified\"), null, 'errors');\n\t\t} else {\n\t\t\t$db->begin();\n\n\t\t\t$originalId = $id;\n\t\t\tif ($object->id > 0) {\n\t\t\t\t$object->ref = GETPOST('clone_ref', 'alphanohtml');\n\t\t\t\t$object->status = 0;\n\t\t\t\t$object->status_buy = 0;\n\t\t\t\t$object->id = null;\n\t\t\t\t$object->barcode = -1;\n\n\t\t\t\tif ($object->check()) {\n\t\t\t\t\t$object->context['createfromclone'] = 'createfromclone';\n\t\t\t\t\t$id = $object->create($user);\n\t\t\t\t\tif ($id > 0) {\n\t\t\t\t\t\tif (GETPOST('clone_composition')) {\n\t\t\t\t\t\t\t$result = $object->clone_associations($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$originalId);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (GETPOST('clone_categories')) {\n\t\t\t\t\t\t\t$result = $object->cloneCategories($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$originalId);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (GETPOST('clone_prices')) {\n\t\t\t\t\t\t\t$result = $object->clone_price($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader('Location: '.$_SERVER['PHP_SELF'].'?id='.$originalId);\n\t\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// $object->clone_fournisseurs($originalId, $id);\n\n\t\t\t\t\t\t$db->commit();\n\t\t\t\t\t\t$db->close();\n\n\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$id);\n\t\t\t\t\t\texit;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$id = $originalId;\n\n\t\t\t\t\t\tif ($object->error == 'ErrorProductAlreadyExists') {\n\t\t\t\t\t\t\t$db->rollback();\n\n\t\t\t\t\t\t\t$refalreadyexists++;\n\t\t\t\t\t\t\t$action = \"\";\n\n\t\t\t\t\t\t\t$mesg = $langs->trans(\"ErrorProductAlreadyExists\", $object->ref);\n\t\t\t\t\t\t\t$mesg .= ' <a href=\"'.$_SERVER[\"PHP_SELF\"].'?ref='.$object->ref.'\">'.$langs->trans(\"ShowCardHere\").'</a>.';\n\t\t\t\t\t\t\tsetEventMessages($mesg, null, 'errors');\n\t\t\t\t\t\t\t$object->fetch($id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t\t\tdol_print_error($db, $object->errors);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t\t\t\t\tdol_print_error($db, $object->error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($object->context['createfromclone']);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$db->rollback();\n\t\t\t\tdol_print_error($db, $object->error);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Delete a product\n\tif ($action == 'confirm_delete' && $confirm != 'yes') {\n\t\t$action = '';\n\t}\n\tif ($action == 'confirm_delete' && $confirm == 'yes' && $usercandelete) {\n\t\t$result = $object->delete($user);\n\n\t\tif ($result > 0) {\n\t\t\theader('Location: '.DOL_URL_ROOT.'/product/list.php?type='.$object->type.'&delprod='.urlencode($object->ref));\n\t\t\texit;\n\t\t} else {\n\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t$reload = 0;\n\t\t\t$action = '';\n\t\t}\n\t}\n\n\n\t// Add product into object\n\tif ($object->id > 0 && $action == 'addin') {\n\t\t$thirpdartyid = 0;\n\t\tif (GETPOST('propalid') > 0) {\n\t\t\t$propal = new Propal($db);\n\t\t\t$result = $propal->fetch(GETPOST('propalid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $propal->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $propal->socid;\n\t\t} elseif (GETPOST('commandeid') > 0) {\n\t\t\t$commande = new Commande($db);\n\t\t\t$result = $commande->fetch(GETPOST('commandeid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $commande->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $commande->socid;\n\t\t} elseif (GETPOST('factureid') > 0) {\n\t\t\t$facture = new Facture($db);\n\t\t\t$result = $facture->fetch(GETPOST('factureid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $facture->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $facture->socid;\n\t\t}\n\n\t\tif ($thirpdartyid > 0) {\n\t\t\t$soc = new Societe($db);\n\t\t\t$result = $soc->fetch($thirpdartyid);\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $soc->error);\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\t$desc = $object->description;\n\n\t\t\t$tva_tx = get_default_tva($mysoc, $soc, $object->id);\n\t\t\t$tva_npr = get_default_npr($mysoc, $soc, $object->id);\n\t\t\tif (empty($tva_tx)) {\n\t\t\t\t$tva_npr = 0;\n\t\t\t}\n\t\t\t$localtax1_tx = get_localtax($tva_tx, 1, $soc, $mysoc, $tva_npr);\n\t\t\t$localtax2_tx = get_localtax($tva_tx, 2, $soc, $mysoc, $tva_npr);\n\n\t\t\t$pu_ht = $object->price;\n\t\t\t$pu_ttc = $object->price_ttc;\n\t\t\t$price_base_type = $object->price_base_type;\n\n\t\t\t// If multiprice\n\t\t\tif ($conf->global->PRODUIT_MULTIPRICES && $soc->price_level) {\n\t\t\t\t$pu_ht = $object->multiprices[$soc->price_level];\n\t\t\t\t$pu_ttc = $object->multiprices_ttc[$soc->price_level];\n\t\t\t\t$price_base_type = $object->multiprices_base_type[$soc->price_level];\n\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/productcustomerprice.class.php';\n\n\t\t\t\t$prodcustprice = new Productcustomerprice($db);\n\n\t\t\t\t$filter = array('t.fk_product' => $object->id, 't.fk_soc' => $soc->id);\n\n\t\t\t\t$result = $prodcustprice->fetch_all('', '', 0, 0, $filter);\n\t\t\t\tif ($result) {\n\t\t\t\t\tif (count($prodcustprice->lines) > 0) {\n\t\t\t\t\t\t$pu_ht = price($prodcustprice->lines [0]->price);\n\t\t\t\t\t\t$pu_ttc = price($prodcustprice->lines [0]->price_ttc);\n\t\t\t\t\t\t$price_base_type = $prodcustprice->lines [0]->price_base_type;\n\t\t\t\t\t\t$tva_tx = $prodcustprice->lines [0]->tva_tx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$tmpvat = price2num(preg_replace('/\\s*\\(.*\\)/', '', $tva_tx));\n\t\t\t$tmpprodvat = price2num(preg_replace('/\\s*\\(.*\\)/', '', $prod->tva_tx));\n\n\t\t\t// On reevalue prix selon taux tva car taux tva transaction peut etre different\n\t\t\t// de ceux du produit par defaut (par exemple si pays different entre vendeur et acheteur).\n\t\t\tif ($tmpvat != $tmpprodvat) {\n\t\t\t\tif ($price_base_type != 'HT') {\n\t\t\t\t\t$pu_ht = price2num($pu_ttc / (1 + ($tmpvat / 100)), 'MU');\n\t\t\t\t} else {\n\t\t\t\t\t$pu_ttc = price2num($pu_ht * (1 + ($tmpvat / 100)), 'MU');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (GETPOST('propalid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $propal->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $propal->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx, // localtax1\n\t\t\t\t\t$localtax2_tx, // localtax2\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/comm/propal/card.php?id=\".$propal->id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUnknown\").\": $result\", null, 'errors');\n\t\t\t} elseif (GETPOST('commandeid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $commande->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $commande->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx, // localtax1\n\t\t\t\t\t$localtax2_tx, // localtax2\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tnull,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/commande/card.php?id=\".urlencode($commande->id));\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t} elseif (GETPOST('factureid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $facture->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $facture->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx,\n\t\t\t\t\t$localtax2_tx,\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\tFacture::TYPE_STANDARD,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tnull,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t100,\n\t\t\t\t\t'',\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/compta/facture/card.php?facid=\".$facture->id);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$action = \"\";\n\t\t\tsetEventMessages($langs->trans(\"WarningSelectOneDocument\"), null, 'warnings');\n\t\t}\n\t}\n}\n\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n$formproduct = new FormProduct($db);\n$formcompany = new FormCompany($db);\nif (!empty($conf->accounting->enabled)) {\n\t$formaccounting = new FormAccounting($db);\n}\n\n\n$title = $langs->trans('ProductServiceCard');\n$help_url = '';\n$shortlabel = dol_trunc($object->label, 16);\nif (GETPOST(\"type\") == '0' || ($object->type == Product::TYPE_PRODUCT)) {\n\t$title = $langs->trans('Product').\" \".$shortlabel.\" - \".$langs->trans('Card');\n\t$help_url = 'EN:Module_Products|FR:Module_Produits|ES:M&oacute;dulo_Productos|DE:Modul_Produkte';\n}\nif (GETPOST(\"type\") == '1' || ($object->type == Product::TYPE_SERVICE)) {\n\t$title = $langs->trans('Service').\" \".$shortlabel.\" - \".$langs->trans('Card');\n\t$help_url = 'EN:Module_Services_En|FR:Module_Services|ES:M&oacute;dulo_Servicios|DE:Modul_Leistungen';\n}\n\nllxHeader('', $title, $help_url);\n\n// Load object modBarCodeProduct\n$res = 0;\nif (!empty($conf->barcode->enabled) && !empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t$module = strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\t$dirbarcode = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\tforeach ($dirbarcode as $dirroot) {\n\t\t$res = dol_include_once($dirroot.$module.'.php');\n\t\tif ($res) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($res > 0) {\n\t\t\t$modBarCodeProduct = new $module();\n\t}\n}\n\n\nif (is_object($objcanvas) && $objcanvas->displayCanvasExists($action)) {\n\t// -----------------------------------------\n\t// When used with CANVAS\n\t// -----------------------------------------\n\tif (empty($object->error) && $id) {\n\t\t$result = $object->fetch($id);\n\t\tif ($result <= 0) {\n\t\t\tdol_print_error('', $object->error);\n\t\t}\n\t}\n\t$objcanvas->assign_values($action, $object->id, $object->ref); // Set value for templates\n\t$objcanvas->display_canvas($action); // Show template\n} else {\n\t// -----------------------------------------\n\t// When used in standard mode\n\t// -----------------------------------------\n\tif ($action == 'create' && $usercancreate) {\n\t\t//WYSIWYG Editor\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint '<script type=\"text/javascript\">';\n\t\t\tprint '$(document).ready(function () {\n                        $(\"#selectcountry_id\").change(function() {\n                        \tdocument.formprod.action.value=\"create\";\n                        \tdocument.formprod.submit();\n                        });\n                     });';\n\t\t\tprint '</script>'.\"\\n\";\n\t\t}\n\n\t\t// Load object modCodeProduct\n\t\t$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\n\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t\t\t$module = substr($module, 0, dol_strlen($module) - 4);\n\t\t}\n\t\t$result = dol_include_once('/core/modules/product/'.$module.'.php');\n\t\tif ($result > 0) {\n\t\t\t$modCodeProduct = new $module();\n\t\t}\n\n\t\tdol_set_focus('input[name=\"ref\"]');\n\n\t\tprint '<form action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\" name=\"formprod\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\t\tprint '<input type=\"hidden\" name=\"type\" value=\"'.$type.'\">'.\"\\n\";\n\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\tprint '<input type=\"hidden\" name=\"code_auto\" value=\"1\">';\n\t\t}\n\t\tif (!empty($modBarCodeProduct->code_auto)) {\n\t\t\tprint '<input type=\"hidden\" name=\"barcode_auto\" value=\"1\">';\n\t\t}\n\t\tprint '<input type=\"hidden\" name=\"backtopage\" value=\"'.$backtopage.'\">';\n\n\t\tif ($type == 1) {\n\t\t\t$picto = 'service';\n\t\t\t$title = $langs->trans(\"NewService\");\n\t\t} else {\n\t\t\t$picto = 'product';\n\t\t\t$title = $langs->trans(\"NewProduct\");\n\t\t}\n\t\t$linkback = \"\";\n\t\tprint load_fiche_titre($title, $linkback, $picto);\n\n\t\t// We set country_id, country_code and country for the selected country\n\t\t$object->country_id = GETPOSTISSET('country_id') ? GETPOST('country_id', 'int') : null;\n\t\tif ($object->country_id > 0) {\n\t\t\t$tmparray = getCountry($object->country_id, 'all');\n\t\t\t$object->country_code = $tmparray['code'];\n\t\t\t$object->country = $tmparray['label'];\n\t\t}\n\n\t\tprint dol_get_fiche_head('');\n\n\t\tprint '<table class=\"border centpercent\">';\n\n\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\tprint '<tr>';\n\t\t\t$tmpcode = '';\n\t\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\t\t$tmpcode = $modCodeProduct->getNextValue($object, $type);\n\t\t\t}\n\t\t\tprint '<td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Ref\").'</td><td><input id=\"ref\" name=\"ref\" class=\"maxwidth200\" maxlength=\"128\" value=\"'.dol_escape_htmltag(GETPOSTISSET('ref') ? GETPOST('ref', 'alphanohtml') : $tmpcode).'\">';\n\t\t\tif ($refalreadyexists) {\n\t\t\t\tprint $langs->trans(\"RefAlreadyExists\");\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Label\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Label\").'</td><td><input name=\"label\" class=\"minwidth300 maxwidth400onsmartphone\" maxlength=\"255\" value=\"'.dol_escape_htmltag(GETPOST('label', $label_security_check)).'\"></td></tr>';\n\n\t\t// On sell\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").')</td><td>';\n\t\t$statutarray = array('1' => $langs->trans(\"OnSell\"), '0' => $langs->trans(\"NotOnSell\"));\n\t\tprint $form->selectarray('statut', $statutarray, GETPOST('statut'));\n\t\tprint '</td></tr>';\n\n\t\t// To buy\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").')</td><td>';\n\t\t$statutarray = array('1' => $langs->trans(\"ProductStatusOnBuy\"), '0' => $langs->trans(\"ProductStatusNotOnBuy\"));\n\t\tprint $form->selectarray('statut_buy', $statutarray, GETPOST('statut_buy'));\n\t\tprint '</td></tr>';\n\n\t\t// Batch number management\n\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t$statutarray = array('0' => $langs->trans(\"ProductStatusNotOnBatch\"), '1' => $langs->trans(\"ProductStatusOnBatch\"), '2' => $langs->trans(\"ProductStatusOnSerial\"));\n\t\t\tprint $form->selectarray('status_batch', $statutarray, GETPOST('status_batch'));\n\t\t\tprint '</td></tr>';\n\t\t\t// Product specific batch number management\n\t\t\t$status_batch = GETPOST('status_batch');\n\t\t\tif ($status_batch !== '0') {\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\t$tooltip = $langs->trans(\"GenericMaskCodes\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes2\");\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes3\");\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes4a\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes5\");\n\t\t\t\tif ((!empty($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced')\n\t\t\t\t\t|| (!empty($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced')) {\n\t\t\t\t\tprint '<tr><td id=\"mask_option\">'.$langs->trans(\"ManageLotMask\").'</td>';\n\t\t\t\t\t$inherited_mask_lot = $conf->global->LOT_ADVANCED_MASK;\n\t\t\t\t\t$inherited_mask_sn = $conf->global->SN_ADVANCED_MASK;\n\t\t\t\t\tprint '<td id=\"field_mask\">';\n\t\t\t\t\tprint $form->textwithpicto('<input type=\"text\" class=\"flat minwidth175\" name=\"batch_mask\" id=\"batch_mask_input\">', $tooltip, 1, 1);\n\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").addClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t$(\"#status_batch\").on(\"change\", function () {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"We change batch status\");\n\t\t\t\t\t\t\t\t\t\tvar optionSelected = $(\"option:selected\", this);\n\t\t\t\t\t\t\t\t\t\tvar valueSelected = this.value;\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").addClass(\"hideobject\");\n\t\t\t\t\t';\n\t\t\t\t\tif ($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced') {\n\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t\tif (this.value == 1) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").toggleClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_lot.'\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t';\n\t\t\t\t\t}\n\t\t\t\t\tif ($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced') {\n\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t\tif (this.value == 2) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").toggleClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_sn.'\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t';\n\t\t\t\t\t}\n\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t</script>';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t$showbarcode = 0;\n\t\t}\n\n\t\tif ($showbarcode) {\n\t\t\tprint '<tr><td>'.$langs->trans('BarcodeType').'</td><td>';\n\t\t\tif (GETPOSTISSET('fk_barcode_type')) {\n\t\t\t\t$fk_barcode_type = GETPOST('fk_barcode_type')?GETPOST('fk_barcode_type'):0;\n\t\t\t} else {\n\t\t\t\tif (empty($fk_barcode_type) && !empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) {\n\t\t\t\t\t$fk_barcode_type = getDolGlobalInt(\"PRODUIT_DEFAULT_BARCODE_TYPE\");\n\t\t\t\t} else {\n\t\t\t\t\t$fk_barcode_type=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\tprint $formbarcode->selectBarcodeType($fk_barcode_type, 'fk_barcode_type', 1);\n\t\t\tprint '</td>';\n\t\t\tprint '</tr><tr>';\n\t\t\tprint '<td>'.$langs->trans(\"BarcodeValue\").'</td><td>';\n\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t}\n\t\t\tprint '<input class=\"maxwidth100\" type=\"text\" name=\"barcode\" value=\"'.dol_escape_htmltag($tmpcode).'\">';\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Description (used in invoice, propal...)\n\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>';\n\n\t\t$doleditor = new DolEditor('desc', GETPOST('desc', 'restricthtml'), '', 160, 'dolibarr_details', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_PRODUCTDESC'), ROWS_4, '90%');\n\t\t$doleditor->Create();\n\n\t\tprint \"</td></tr>\";\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t// Public URL\n\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\tprint img_picto('', 'globe', 'class=\"pictofixedwidth\"');\n\t\t\tprint '<input type=\"text\" name=\"url\" class=\"quatrevingtpercent\" value=\"'.GETPOST('url').'\">';\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\tif ($type != 1 && !empty($conf->stock->enabled)) {\n\t\t\t// Default warehouse\n\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\tprint img_picto($langs->trans(\"DefaultWarehouse\"), 'stock', 'class=\"pictofixedwidth\"');\n\t\t\tprint $formproduct->selectWarehouses(GETPOST('fk_default_warehouse', 'int'), 'fk_default_warehouse', 'warehouseopen', 1, 0, 0, '', 0, 0, array(), 'minwidth300 widthcentpercentminusxx maxwidth500');\n\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&token='.newToken().'&backtopage='.urlencode($_SERVER['PHP_SELF'].'?id='.$object->id.'&action=edit&token='.newToken()).'\">';\n\t\t\tprint '<span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span>';\n\t\t\tprint '</a>';\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STOCK_LEVELS)) {\n\t\t\t\t// Stock min level\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"StockLimit\"), $langs->trans(\"StockLimitDesc\"), 1).'</td><td>';\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" class=\"maxwidth50\" value=\"'.GETPOST('seuil_stock_alerte').'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\n\t\t\t\t// Stock desired level\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"DesiredStock\"), $langs->trans(\"DesiredStockDesc\"), 1).'</td><td>';\n\t\t\t\tprint '<input name=\"desiredstock\" class=\"maxwidth50\" value=\"'.GETPOST('desiredstock').'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t} else {\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STOCK_LEVELS)) {\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" type=\"hidden\" value=\"0\">';\n\t\t\t\tprint '<input name=\"desiredstock\" type=\"hidden\" value=\"0\">';\n\t\t\t}\n\t\t}\n\n\t\t// Duration\n\t\tif ($type == 1) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\tprint '<input name=\"duration_value\" size=\"4\" value=\"'.GETPOST('duration_value', 'int').'\">';\n\t\t\tprint $formproduct->selectMeasuringUnits(\"duration_unit\", \"time\", (GETPOSTISSET('duration_value') ? GETPOSTISSET('duration_value', 'alpha') : 'h'), 0, 1);\n\n\t\t\t// Mandatory period\n\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\tprint '<input type=\"checkbox\" id=\"mandatoryperiod\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').'>';\n\t\t\tprint '<label for=\"mandatoryperiod\">';\n\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\t\t\tprint '</label>';\n\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\tif ($type != 1) {\t// Nature, Weight and volume only applies to products and not to services\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t// Nature\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\tprint $formproduct->selectProductNature('finished', $object->finished);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\n\t\tif ($type != 1) {\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t// Brut Weight\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\tprint '<input name=\"weight\" size=\"4\" value=\"'.GETPOST('weight').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"weight_units\", \"weight\", GETPOSTISSET('weight_units') ?GETPOST('weight_units', 'alpha') : (empty($conf->global->MAIN_WEIGHT_DEFAULT_UNIT) ? 0 : $conf->global->MAIN_WEIGHT_DEFAULT_UNIT), 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Brut Length\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\tprint '<input name=\"size\" class=\"width50\" value=\"'.GETPOST('size').'\"> x ';\n\t\t\t\tprint '<input name=\"sizewidth\" class=\"width50\" value=\"'.GETPOST('sizewidth').'\"> x ';\n\t\t\t\tprint '<input name=\"sizeheight\" class=\"width50\" value=\"'.GETPOST('sizeheight').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"size_units\", \"size\", GETPOSTISSET('size_units') ?GETPOST('size_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t// Brut Surface\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\tprint '<input name=\"surface\" size=\"4\" value=\"'.GETPOST('surface').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"surface_units\", \"surface\", GETPOSTISSET('surface_units') ?GETPOST('surface_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t// Brut Volume\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\tprint '<input name=\"volume\" size=\"4\" value=\"'.GETPOST('volume').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"volume_units\", \"volume\", GETPOSTISSET('volume_units') ?GETPOST('volume_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t// Net Measure\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\tprint '<input name=\"net_measure\" size=\"4\" value=\"'.GETPOST('net_measure').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"net_measure_units\", '', GETPOSTISSET('net_measure_units') ?GETPOST('net_measure_units', 'alpha') : (empty($conf->global->MAIN_WEIGHT_DEFAULT_UNIT) ? 0 : $conf->global->MAIN_WEIGHT_DEFAULT_UNIT), 0, 0);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\n\t\t// Units\n\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->selectUnits(empty($line->fk_unit) ? $conf->global->PRODUCT_USE_UNITS : $line->fk_unit, 'units');\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Custom code\n\t\tif (empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO) && empty($type)) {\n\t\t\tprint '<tr><td class=\"wordbreak\">'.$langs->trans(\"CustomCode\").'</td><td><input name=\"customcode\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('customcode').'\"></td></tr>';\n\n\t\t\t// Origin country\n\t\t\tprint '<tr><td>'.$langs->trans(\"CountryOrigin\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"');\n\t\t\tprint $form->select_country((GETPOSTISSET('country_id') ? GETPOST('country_id') : $object->country_id), 'country_id', '', 0, 'minwidth300 widthcentpercentminusx maxwidth500');\n\t\t\tif ($user->admin) {\n\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STATE)) {\n\t\t\t\tprint '<tr>';\n\t\t\t\tif (!empty($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT) && ($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 1 || $conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 2)) {\n\t\t\t\t\tprint '<td>'.$form->editfieldkey('RegionStateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<td>'.$form->editfieldkey('StateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t}\n\n\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint $formcompany->select_state($object->state_id, $object->country_code);\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\t\t}\n\n\t\t// Quality control\n\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td><input name=\"lifetime\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('lifetime').'\"></td></tr>';\n\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td><input name=\"qc_frequency\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('qc_frequency').'\"></td></tr>';\n\t\t}\n\n\t\t// Other attributes\n\t\t$parameters = array('colspan' => ' colspan=\"2\"', 'cols'=>2);\n\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\tprint $hookmanager->resPrint;\n\t\tif (empty($reshook)) {\n\t\t\tprint $object->showOptionals($extrafields, 'create', $parameters);\n\t\t}\n\n\t\t// Note (private, no output on invoices, propales...)\n\t\t//if (! empty($conf->global->MAIN_DISABLE_NOTES_TAB))       available in create mode\n\t\t//{\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NoteNotVisibleOnBill\").'</td><td>';\n\n\t\t\t// We use dolibarr_details as type of DolEditor here, because we must not accept images as description is included into PDF and not accepted by TCPDF.\n\t\t\t$doleditor = new DolEditor('note_private', GETPOST('note_private', 'restricthtml'), '', 140, 'dolibarr_details', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_PRODUCTDESC'), ROWS_8, '90%');\n\t\t\t$doleditor->Create();\n\n\t\t\tprint \"</td></tr>\";\n\t\t//}\n\n\t\tif (!empty($conf->categorie->enabled)) {\n\t\t\t// Categories\n\t\t\tprint '<tr><td>'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);\n\t\t\tprint img_picto('', 'category').$form->multiselectarray('categories', $cate_arbo, GETPOST('categories', 'array'), '', 0, 'quatrevingtpercent widthcentpercentminusx', 0, 0);\n\t\t\tprint \"</td></tr>\";\n\t\t}\n\n\t\tprint '</table>';\n\n\t\tprint '<hr>';\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_PRICES)) {\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\t// We do no show price array on create when multiprices enabled.\n\t\t\t\t// We must set them on prices tab.\n\t\t\t\tprint '<table class=\"border centpercent\">';\n\t\t\t\t// VAT\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"VATRate\").'</td><td>';\n\t\t\t\t$defaultva = get_default_tva($mysoc, $mysoc);\n\t\t\t\tprint $form->load_tva(\"tva_tx\", $defaultva, $mysoc, $mysoc, 0, 0, '', false, 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\tprint '</table>';\n\n\t\t\t\tprint '<br>';\n\t\t\t} else {\n\t\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\t\t// Price\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"SellingPrice\").'</td>';\n\t\t\t\tprint '<td><input name=\"price\" class=\"maxwidth50\" value=\"'.$object->price.'\">';\n\t\t\t\tprint $form->selectPriceBaseType($conf->global->PRODUCT_PRICE_BASE_TYPE, \"price_base_type\");\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Min price\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"MinPrice\").'</td>';\n\t\t\t\tprint '<td><input name=\"price_min\" class=\"maxwidth50\" value=\"'.$object->price_min.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// VAT\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"VATRate\").'</td><td>';\n\t\t\t\t$defaultva = get_default_tva($mysoc, $mysoc);\n\t\t\t\tprint $form->load_tva(\"tva_tx\", $defaultva, $mysoc, $mysoc, 0, 0, '', false, 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\tprint '</table>';\n\n\t\t\t\tprint '<br>';\n\t\t\t}\n\t\t}\n\n\t\t// Accountancy codes\n\t\tprint '<!-- accountancy codes -->'.\"\\n\";\n\t\tprint '<table class=\"border centpercent\">';\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_ACCOUNTING)) {\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t// Accountancy_code_sell\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_sell = (GETPOSTISSET('accountancy_code_sell') ? GETPOST('accountancy_code_sell', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_sell = (GETPOSTISSET('accountancy_code_sell') ? GETPOST('accountancy_code_sell', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell, 'accountancy_code_sell', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tif ($type == 0) {\n\t\t\t\t\t\t$accountancy_code_sell_intra = (GETPOSTISSET('accountancy_code_sell_intra') ? GETPOST('accountancy_code_sell_intra', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_INTRA_ACCOUNT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountancy_code_sell_intra = (GETPOSTISSET('accountancy_code_sell_intra') ? GETPOST('accountancy_code_sell_intra', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_INTRA_ACCOUNT);\n\t\t\t\t\t}\n\t\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell_intra, 'accountancy_code_sell_intra', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_sell_export = (GETPOST('accountancy_code_sell_export') ? GETPOST('accountancy_code_sell_export', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_EXPORT_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_sell_export = (GETPOST('accountancy_code_sell_export') ? GETPOST('accountancy_code_sell_export', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_EXPORT_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell_export, 'accountancy_code_sell_export', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_buy = (GETPOST('accountancy_code_buy', 'alpha') ? (GETPOST('accountancy_code_buy', 'alpha')) : $conf->global->ACCOUNTING_PRODUCT_BUY_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_buy = (GETPOST('accountancy_code_buy', 'alpha') ? (GETPOST('accountancy_code_buy', 'alpha')) : $conf->global->ACCOUNTING_SERVICE_BUY_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy, 'accountancy_code_buy', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tif ($type == 0) {\n\t\t\t\t\t\t$accountancy_code_buy_intra = (GETPOSTISSET('accountancy_code_buy_intra') ? GETPOST('accountancy_code_buy_intra', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_BUY_INTRA_ACCOUNT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountancy_code_buy_intra = (GETPOSTISSET('accountancy_code_buy_intra') ? GETPOST('accountancy_code_buy_intra', 'alpha') : $conf->global->ACCOUNTING_SERVICE_BUY_INTRA_ACCOUNT);\n\t\t\t\t\t}\n\t\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy_intra, 'accountancy_code_buy_intra', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_buy_export = (GETPOST('accountancy_code_buy_export') ? GETPOST('accountancy_code_buy_export', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_BUY_EXPORT_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_buy_export = (GETPOST('accountancy_code_buy_export') ? GETPOST('accountancy_code_buy_export', 'alpha') : $conf->global->ACCOUNTING_SERVICE_BUY_EXPORT_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy_export, 'accountancy_code_buy_export', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {// For external software\n\t\t\t\tif (!empty($accountancy_code_sell)) {\n\t\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_sell_intra)) {\n\t\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_sell_export)) {\n\t\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy)) {\n\t\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy_intra)) {\n\t\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy_export)) {\n\t\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell\" value=\"'.$object->accountancy_code_sell.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell_intra\" value=\"'.$object->accountancy_code_sell_intra.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell_export\" value=\"'.$object->accountancy_code_sell_export.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy\" value=\"'.$object->accountancy_code_buy.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy_intra\" value=\"'.$object->accountancy_code_buy_intra.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy_export\" value=\"'.$object->accountancy_code_buy_export.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\t\tprint '</table>';\n\n\t\tprint dol_get_fiche_end();\n\n\t\tprint $form->buttonsSaveCancel(\"Create\");\n\n\t\tprint '</form>';\n\t} elseif ($object->id > 0) {\n\t\t/*\n\t\t * Product card\n\t\t */\n\n\t\t// Fiche en mode edition\n\t\tif ($action == 'edit' && $usercancreate) {\n\t\t\t//WYSIWYG Editor\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\tprint '<script type=\"text/javascript\">';\n\t\t\t\tprint '$(document).ready(function () {\n                        $(\"#selectcountry_id\").change(function () {\n                        \tdocument.formprod.action.value=\"edit\";\n                        \tdocument.formprod.submit();\n                        });\n\t\t\t\t});';\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// We set country_id, country_code and country for the selected country\n\t\t\t$object->country_id = GETPOST('country_id') ? GETPOST('country_id') : $object->country_id;\n\t\t\tif ($object->country_id) {\n\t\t\t\t$tmparray = getCountry($object->country_id, 'all');\n\t\t\t\t$object->country_code = $tmparray['code'];\n\t\t\t\t$object->country = $tmparray['label'];\n\t\t\t}\n\n\t\t\t$type = $langs->trans('Product');\n\t\t\tif ($object->isService()) {\n\t\t\t\t$type = $langs->trans('Service');\n\t\t\t}\n\t\t\t//print load_fiche_titre($langs->trans('Modify').' '.$type.' : '.(is_object($object->oldcopy)?$object->oldcopy->ref:$object->ref), \"\");\n\n\t\t\t// Main official, simple, and not duplicated code\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"formprod\">'.\"\\n\";\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"id\" value=\"'.$object->id.'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"canvas\" value=\"'.$object->canvas.'\">';\n\n\t\t\t$head = product_prepare_head($object);\n\t\t\t$titre = $langs->trans(\"CardProduct\".$object->type);\n\t\t\t$picto = ($object->type == Product::TYPE_SERVICE ? 'service' : 'product');\n\t\t\tprint dol_get_fiche_head($head, 'card', $titre, 0, $picto);\n\n\n\t\t\tprint '<table class=\"border allwidth\">';\n\n\t\t\t// Ref\n\t\t\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Ref\").'</td><td colspan=\"3\"><input name=\"ref\" class=\"maxwidth200\" maxlength=\"128\" value=\"'.dol_escape_htmltag($object->ref).'\"></td></tr>';\n\n\t\t\t// Label\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Label\").'</td><td colspan=\"3\"><input name=\"label\" class=\"minwidth300 maxwidth400onsmartphone\" maxlength=\"255\" value=\"'.dol_escape_htmltag($object->label).'\"></td></tr>';\n\n\t\t\t// Status To sell\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").')</td><td colspan=\"3\">';\n\t\t\tprint '<select class=\"flat\" name=\"statut\">';\n\t\t\tif ($object->status) {\n\t\t\t\tprint '<option value=\"1\" selected>'.$langs->trans(\"OnSell\").'</option>';\n\t\t\t\tprint '<option value=\"0\">'.$langs->trans(\"NotOnSell\").'</option>';\n\t\t\t} else {\n\t\t\t\tprint '<option value=\"1\">'.$langs->trans(\"OnSell\").'</option>';\n\t\t\t\tprint '<option value=\"0\" selected>'.$langs->trans(\"NotOnSell\").'</option>';\n\t\t\t}\n\t\t\tprint '</select>';\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Status To Buy\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").')</td><td colspan=\"3\">';\n\t\t\tprint '<select class=\"flat\" name=\"statut_buy\">';\n\t\t\tif ($object->status_buy) {\n\t\t\t\tprint '<option value=\"1\" selected>'.$langs->trans(\"ProductStatusOnBuy\").'</option>';\n\t\t\t\tprint '<option value=\"0\">'.$langs->trans(\"ProductStatusNotOnBuy\").'</option>';\n\t\t\t} else {\n\t\t\t\tprint '<option value=\"1\">'.$langs->trans(\"ProductStatusOnBuy\").'</option>';\n\t\t\t\tprint '<option value=\"0\" selected>'.$langs->trans(\"ProductStatusNotOnBuy\").'</option>';\n\t\t\t}\n\t\t\tprint '</select>';\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Batch number managment\n\t\t\tif ($conf->productbatch->enabled) {\n\t\t\t\tif ($object->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t\t\t$statutarray = array('0' => $langs->trans(\"ProductStatusNotOnBatch\"), '1' => $langs->trans(\"ProductStatusOnBatch\"), '2' => $langs->trans(\"ProductStatusOnSerial\"));\n\t\t\t\t\tprint $form->selectarray('status_batch', $statutarray, $object->status_batch);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\tif (!empty($object->status_batch) || !empty($conf->use_javascript_ajax)) {\n\t\t\t\t\t\t$langs->load(\"admin\");\n\t\t\t\t\t\t$tooltip = $langs->trans(\"GenericMaskCodes\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes2\");\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes3\");\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes4a\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes5\");\n\t\t\t\t\t\tprint '<tr><td id=\"mask_option\">'.$langs->trans(\"ManageLotMask\").'</td>';\n\t\t\t\t\t\tif ($object->status_batch == '1' && getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_LOT_ADDON') == 'mod_lot_advanced') {\n\t\t\t\t\t\t\t$mask = !empty($object->batch_mask) ? $object->batch_mask : getDolGlobalString('LOT_ADVANCED_MASK');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($object->status_batch == '2' && getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_SN_ADDON') == 'mod_sn_advanced') {\n\t\t\t\t\t\t\t$mask = !empty($object->batch_mask) ? $object->batch_mask : getDolGlobalString('SN_ADVANCED_MASK');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$inherited_mask_lot = getDolGlobalString('LOT_ADVANCED_MASK');\n\t\t\t\t\t\t$inherited_mask_sn = getDolGlobalString('SN_ADVANCED_MASK');\n\t\t\t\t\t\tprint '<td id=\"field_mask\">';\n\t\t\t\t\t\tprint $form->textwithpicto('<input type=\"text\" class=\"flat minwidth175\" name=\"batch_mask\" id=\"batch_mask_input\" value=\"'.$mask.'\">', $tooltip, 1, 1);\n\t\t\t\t\t\t// Add javascript to sho/hide field for custom mask\n\t\t\t\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().addClass(\"hideobject\");\n\t\t\t\t\t\t\t\tvar preselect = document.getElementById(\"status_batch\");';\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS')) {\n\t\t\t\t\t\t\t\tprint 'if (preselect.value == \"2\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t}';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS')) {\n\t\t\t\t\t\t\t\tprint 'if (preselect.value == \"1\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t}';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprint '$(\"#status_batch\").on(\"change\", function () {\n\t\t\t\t\t\t\t\t\tvar optionSelected = $(\"option:selected\", this);\n\t\t\t\t\t\t\t\t\tvar valueSelected = this.value;\n\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().addClass(\"hideobject\");\n\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_LOT_ADDON') == 'mod_lot_advanced') {\n\t\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\tif (this.value == 1) {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_lot.'\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_SN_ADDON') == 'mod_sn_advanced') {\n\t\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\tif (this.value == 2) {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_sn.'\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Barcode\n\t\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t\t$showbarcode = 0;\n\t\t\t}\n\n\t\t\tif ($showbarcode) {\n\t\t\t\tprint '<tr><td>'.$langs->trans('BarcodeType').'</td><td>';\n\t\t\t\tif (GETPOSTISSET('fk_barcode_type')) {\n\t\t\t\t\t$fk_barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t} else {\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t\tif (empty($fk_barcode_type) && !empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) {\n\t\t\t\t\t\t$fk_barcode_type = $conf->global->PRODUIT_DEFAULT_BARCODE_TYPE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\t\tprint $formbarcode->selectBarcodeType($fk_barcode_type, 'fk_barcode_type', 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"BarcodeValue\").'</td><td>';\n\t\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t\t}\n\t\t\t\tprint '<input class=\"maxwidth150 maxwidthonsmartphone\" type=\"text\" name=\"barcode\" value=\"'.dol_escape_htmltag($tmpcode).'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Description (used in invoice, propal...)\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>';\n\n\t\t\t// We use dolibarr_details as type of DolEditor here, because we must not accept images as description is included into PDF and not accepted by TCPDF.\n\t\t\t$doleditor = new DolEditor('desc', $object->description, '', 160, 'dolibarr_details', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');\n\t\t\t$doleditor->Create();\n\n\t\t\tprint \"</td></tr>\";\n\t\t\tprint \"\\n\";\n\n\t\t\t// Public Url\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\t\tprint img_picto('', 'globe', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint '<input type=\"text\" name=\"url\" class=\"quatrevingtpercent\" value=\"'.$object->url.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Stock\n\t\t\tif ($object->isProduct() && !empty($conf->stock->enabled)) {\n\t\t\t\t// Default warehouse\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint img_picto($langs->trans(\"DefaultWarehouse\"), 'stock', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint $formproduct->selectWarehouses($object->fk_default_warehouse, 'fk_default_warehouse', 'warehouseopen', 1);\n\t\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&amp;backtopage='.urlencode($_SERVER['PHP_SELF'].'?action=create&type='.GETPOST('type', 'int')).'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span></a>';\n\t\t\t\tprint '</td></tr>';\n\t\t\t\t/*\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"StockLimit\").'</td><td>';\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" size=\"4\" value=\"'.$object->seuil_stock_alerte.'\">';\n\t\t\t\tprint '</td>';\n\n\t\t\t\tprint '<td>'.$langs->trans(\"DesiredStock\").'</td><td>';\n\t\t\t\tprint '<input name=\"desiredstock\" size=\"4\" value=\"'.$object->desiredstock.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t\t*/\n\t\t\t}\n\t\t\t/*\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" type=\"hidden\" value=\"'.$object->seuil_stock_alerte.'\">';\n\t\t\t\tprint '<input name=\"desiredstock\" type=\"hidden\" value=\"'.$object->desiredstock.'\">';\n\t\t\t}*/\n\n\t\t\tif ($object->isService()) {\n\t\t\t\t// Duration\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\t\tprint '<input name=\"duration_value\" size=\"5\" value=\"'.$object->duration_value.'\"> ';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"duration_unit\", \"time\", $object->duration_unit, 0, 1);\n\n\t\t\t\t// Mandatory period\n\t\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\t\tprint '<input type=\"checkbox\" id=\"mandatoryperiod\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').'>';\n\t\t\t\tprint '<label for=\"mandatoryperiod\">';\n\t\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\t\t\t\tprint '</label>';\n\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t\t// Nature\n\t\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\t\tprint $formproduct->selectProductNature('finished', $object->finished);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$object->isService() && !empty($conf->bom->enabled)) {\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"DefaultBOM\"), $langs->trans(\"DefaultBOMDesc\", $langs->transnoentitiesnoconv(\"Finished\"))).'</td><td>';\n\t\t\t\t$bomkey = \"Bom:bom/class/bom.class.php:0:t.status=1 AND t.fk_product=\".((int) $object->id);\n\t\t\t\tprint $form->selectForForms($bomkey, 'fk_default_bom', $object->fk_default_bom, 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!$object->isService()) {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t\t// Brut Weight\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"weight\" size=\"5\" value=\"'.$object->weight.'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"weight_units\", \"weight\", $object->weight_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\t\t// Brut Length\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"size\" size=\"5\" value=\"'.$object->length.'\">x';\n\t\t\t\t\tprint '<input name=\"sizewidth\" size=\"5\" value=\"'.$object->width.'\">x';\n\t\t\t\t\tprint '<input name=\"sizeheight\" size=\"5\" value=\"'.$object->height.'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"size_units\", \"size\", $object->length_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t\t// Brut Surface\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"surface\" size=\"5\" value=\"'.$object->surface.'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"surface_units\", \"surface\", $object->surface_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t\t// Brut Volume\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"volume\" size=\"5\" value=\"'.$object->volume.'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"volume_units\", \"volume\", $object->volume_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t\t// Net Measure\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"net_measure\" size=\"5\" value=\"'.$object->net_measure.'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"net_measure_units\", \"\", $object->net_measure_units, 0, 0);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Units\n\t\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $form->selectUnits($object->fk_unit, 'units');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Custom code\n\t\t\tif (!$object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO)) {\n\t\t\t\tprint '<tr><td class=\"wordbreak\">'.$langs->trans(\"CustomCode\").'</td><td><input name=\"customcode\" class=\"maxwidth100onsmartphone\" value=\"'.$object->customcode.'\"></td></tr>';\n\t\t\t\t// Origin country\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"CountryOrigin\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"');\n\t\t\t\tprint $form->select_country(GETPOSTISSET('country_id') ? GETPOST('country_id', 'int') : $object->country_id, 'country_id', '', 0, 'minwidth100 maxwidthonsmartphone');\n\t\t\t\tif ($user->admin) {\n\t\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// State\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STATE)) {\n\t\t\t\t\tprint '<tr>';\n\t\t\t\t\tif (!empty($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT) && ($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 1 || $conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 2)) {\n\t\t\t\t\t\tprint '<td>'.$form->editfieldkey('RegionStateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<td>'.$form->editfieldkey('StateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t\t}\n\n\t\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\t\tprint $formcompany->select_state(GETPOSTISSET('state_id') ? GETPOST('state_id', 'int') : $object->state_id, $object->country_code);\n\t\t\t\t\tprint '</td>';\n\t\t\t\t\tprint '</tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Quality control\n\t\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td><input name=\"lifetime\" class=\"maxwidth100onsmartphone\" value=\"'.$object->lifetime.'\"></td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td><input name=\"qc_frequency\" class=\"maxwidth100onsmartphone\" value=\"'.$object->qc_frequency.'\"></td></tr>';\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array('colspan' => ' colspan=\"2\"', 'cols' => 2);\n\t\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook)) {\n\t\t\t\tprint $object->showOptionals($extrafields, 'edit', $parameters);\n\t\t\t}\n\n\t\t\t// Tags-Categories\n\t\t\tif ($conf->categorie->enabled) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);\n\t\t\t\t$c = new Categorie($db);\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_PRODUCT);\n\t\t\t\t$arrayselected = array();\n\t\t\t\tif (is_array($cats)) {\n\t\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint img_picto('', 'category').$form->multiselectarray('categories', $cate_arbo, $arrayselected, '', 0, 'quatrevingtpercent widthcentpercentminusx', 0, 0);\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Note private\n\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NoteNotVisibleOnBill\").'</td><td>';\n\n\t\t\t\t$doleditor = new DolEditor('note_private', $object->note_private, '', 140, 'dolibarr_notes', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');\n\t\t\t\t$doleditor->Create();\n\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '<br>';\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_ACCOUNTING)) {\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\t// Accountancy_code_sell\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell, 'accountancy_code_sell', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell_intra, 'accountancy_code_sell_intra', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell_export, 'accountancy_code_sell_export', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy, 'accountancy_code_buy', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy_intra, 'accountancy_code_buy_intra', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy_export, 'accountancy_code_buy_export', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t} else {\n\t\t\t\t\t// For external software\n\t\t\t\t\t// Accountancy_code_sell\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell_intra\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell_intra.'\">';\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell_export\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell_export.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy_intra\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy_intra.'\">';\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy_export\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy_export.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</table>';\n\n\t\t\tprint dol_get_fiche_end();\n\n\t\t\tprint $form->buttonsSaveCancel();\n\n\t\t\tprint '</form>';\n\t\t} else {\n\t\t\t// Fiche en mode visu\n\n\t\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t\t$showbarcode = 0;\n\t\t\t}\n\n\t\t\t$head = product_prepare_head($object);\n\t\t\t$titre = $langs->trans(\"CardProduct\".$object->type);\n\t\t\t$picto = ($object->type == Product::TYPE_SERVICE ? 'service' : 'product');\n\n\t\t\tprint dol_get_fiche_head($head, 'card', $titre, -1, $picto);\n\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/product/list.php?restore_lastsearch_values=1&type='.$object->type.'\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t$object->next_prev_filter = \" fk_product_type = \".$object->type;\n\n\t\t\t$shownav = 1;\n\t\t\tif ($user->socid && !in_array('product', explode(',', $conf->global->MAIN_MODULES_FOR_EXTERNAL))) {\n\t\t\t\t$shownav = 0;\n\t\t\t}\n\n\t\t\tdol_banner_tab($object, 'ref', $linkback, $shownav, 'ref');\n\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\t// Type\n\t\t\tif (!empty($conf->product->enabled) && !empty($conf->service->enabled)) {\n\t\t\t\t$typeformat = 'select;0:'.$langs->trans(\"Product\").',1:'.$langs->trans(\"Service\");\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\tprint (empty($conf->global->PRODUCT_DENY_CHANGE_PRODUCT_TYPE)) ? $form->editfieldkey(\"Type\", 'fk_product_type', $object->type, $object, $usercancreate, $typeformat) : $langs->trans('Type');\n\t\t\t\tprint '</td><td>';\n\t\t\t\tprint $form->editfieldval(\"Type\", 'fk_product_type', $object->type, $object, $usercancreate, $typeformat);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif ($showbarcode) {\n\t\t\t\t// Barcode type\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint '<table width=\"100%\" class=\"nobordernopadding\"><tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"BarcodeType\");\n\t\t\t\tprint '</td>';\n\t\t\t\tif (($action != 'editbarcodetype') && $usercancreate && $createbarcode) {\n\t\t\t\t\tprint '<td class=\"right\"><a class=\"editfielda\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=editbarcodetype&id='.$object->id.'&token='.newToken().'\">'.img_edit($langs->trans('Edit'), 1).'</a></td>';\n\t\t\t\t}\n\t\t\t\tprint '</tr></table>';\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif ($action == 'editbarcodetype' || $action == 'editbarcode') {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\t\t}\n\n\t\t\t\t$fk_barcode_type = '';\n\t\t\t\tif ($action == 'editbarcodetype') {\n\t\t\t\t\tprint $formbarcode->formBarcodeType($_SERVER['PHP_SELF'].'?id='.$object->id, $object->barcode_type, 'fk_barcode_type');\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fetch_barcode();\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t\tprint $object->barcode_type_label ? $object->barcode_type_label : ($object->barcode ? '<div class=\"warning\">'.$langs->trans(\"SetDefaultBarcodeType\").'<div>' : '');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t\t// Barcode value\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint '<table width=\"100%\" class=\"nobordernopadding\"><tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"BarcodeValue\");\n\t\t\t\tprint '</td>';\n\t\t\t\tif (($action != 'editbarcode') && $usercancreate && $createbarcode) {\n\t\t\t\t\tprint '<td class=\"right\"><a class=\"editfielda\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=editbarcode&id='.$object->id.'&token='.newToken().'\">'.img_edit($langs->trans('Edit'), 1).'</a></td>';\n\t\t\t\t}\n\t\t\t\tprint '</tr></table>';\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif ($action == 'editbarcode') {\n\t\t\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t\t\t}\n\n\t\t\t\t\tprint '<form method=\"post\" action=\"'.$_SERVER[\"PHP_SELF\"].'?id='.$object->id.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"setbarcode\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"barcode_type_code\" value=\"'.$object->barcode_type_code.'\">';\n\t\t\t\t\tprint '<input size=\"40\" class=\"maxwidthonsmartphone\" type=\"text\" name=\"barcode\" value=\"'.$tmpcode.'\">';\n\t\t\t\t\tprint '&nbsp;<input type=\"submit\" class=\"button smallpaddingimp\" value=\"'.$langs->trans(\"Modify\").'\">';\n\t\t\t\t\tprint '</form>';\n\t\t\t\t} else {\n\t\t\t\t\tprint showValueWithClipboardCPButton($object->barcode);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Batch number management (to batch)\n\t\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t\tif ($object->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t\t\tprint $object->getLibStatut(0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\tif ((($object->status_batch == '1' && !empty($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced')\n\t\t\t\t\t\t|| ($object->status_batch == '2' && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced' && !empty($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS)))) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotMask\").'</td><td>';\n\t\t\t\t\t\tprint $object->batch_mask;\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Accountancy sell code\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancySellCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_sell)) {\n\t\t\t\t\t$accountingaccount = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount->fetch('', $object->accountancy_code_sell, 1);\n\n\t\t\t\t\tprint $accountingaccount->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_sell;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy sell code intra-community\n\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"ProductAccountancySellIntraCode\");\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\tif (!empty($object->accountancy_code_sell_intra)) {\n\t\t\t\t\t\t$accountingaccount2 = new AccountingAccount($db);\n\t\t\t\t\t\t$accountingaccount2->fetch('', $object->accountancy_code_sell_intra, 1);\n\n\t\t\t\t\t\tprint $accountingaccount2->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Accountancy sell code export\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancySellExportCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_sell_export)) {\n\t\t\t\t\t$accountingaccount3 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount3->fetch('', $object->accountancy_code_sell_export, 1);\n\n\t\t\t\t\tprint $accountingaccount3->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_sell_export;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy buy code\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancyBuyCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_buy)) {\n\t\t\t\t\t$accountingaccount4 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount4->fetch('', $object->accountancy_code_buy, 1);\n\n\t\t\t\t\tprint $accountingaccount4->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_buy;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy buy code intra-community\n\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"ProductAccountancyBuyIntraCode\");\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\tif (!empty($object->accountancy_code_buy_intra)) {\n\t\t\t\t\t\t$accountingaccount5 = new AccountingAccount($db);\n\t\t\t\t\t\t$accountingaccount5->fetch('', $object->accountancy_code_buy_intra, 1);\n\n\t\t\t\t\t\tprint $accountingaccount5->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Accountancy buy code export\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancyBuyExportCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_buy_export)) {\n\t\t\t\t\t$accountingaccount6 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount6->fetch('', $object->accountancy_code_buy_export, 1);\n\n\t\t\t\t\tprint $accountingaccount6->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_buy_export;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Description\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>'.(dol_textishtml($object->description) ? $object->description : dol_nl2br($object->description, 1, true)).'</td></tr>';\n\n\t\t\t// Public URL\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\t\tprint dol_print_url($object->url, '_blank', 128);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Default warehouse\n\t\t\tif ($object->isProduct() && !empty($conf->stock->enabled)) {\n\t\t\t\t$warehouse = new Entrepot($db);\n\t\t\t\t$warehouse->fetch($object->fk_default_warehouse);\n\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint (!empty($warehouse->id) ? $warehouse->getNomUrl(1) : '');\n\t\t\t\tprint '</td>';\n\t\t\t}\n\n\t\t\t// Parent product.\n\t\t\tif (!empty($conf->variants->enabled) && ($object->isProduct() || $object->isService())) {\n\t\t\t\t$combination = new ProductCombination($db);\n\n\t\t\t\tif ($combination->fetchByFkProductChild($object->id) > 0) {\n\t\t\t\t\t$prodstatic = new Product($db);\n\t\t\t\t\t$prodstatic->fetch($combination->fk_product_parent);\n\n\t\t\t\t\t// Parent product\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ParentProduct\").'</td><td>';\n\t\t\t\t\tprint $prodstatic->getNomUrl(1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint '</table>';\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\tif ($object->isService()) {\n\t\t\t\t// Duration\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\t\tprint $object->duration_value;\n\t\t\t\tif ($object->duration_value > 1) {\n\t\t\t\t\t$dur = array(\"i\"=>$langs->trans(\"Minute\"), \"h\"=>$langs->trans(\"Hours\"), \"d\"=>$langs->trans(\"Days\"), \"w\"=>$langs->trans(\"Weeks\"), \"m\"=>$langs->trans(\"Months\"), \"y\"=>$langs->trans(\"Years\"));\n\t\t\t\t} elseif ($object->duration_value > 0) {\n\t\t\t\t\t$dur = array(\"i\"=>$langs->trans(\"Minute\"), \"h\"=>$langs->trans(\"Hour\"), \"d\"=>$langs->trans(\"Day\"), \"w\"=>$langs->trans(\"Week\"), \"m\"=>$langs->trans(\"Month\"), \"y\"=>$langs->trans(\"Year\"));\n\t\t\t\t}\n\t\t\t\tprint (!empty($object->duration_unit) && isset($dur[$object->duration_unit]) ? \"&nbsp;\".$langs->trans($dur[$object->duration_unit]).\"&nbsp;\" : '');\n\n\t\t\t\t// Mandatory period\n\t\t\t\tif ($object->duration_value > 0) {\n\t\t\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\t\t}\n\t\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\t\tprint '<input type=\"checkbox\" class=\"\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').' disabled>';\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t\t// Nature\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\t\tprint $object->getLibFinished();\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$object->isService() && !empty($conf->bom->enabled) && $object->finished) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$form->textwithpicto($langs->trans(\"DefaultBOM\"), $langs->trans(\"DefaultBOMDesc\", $langs->transnoentitiesnoconv(\"Finished\"))).'</td><td>';\n\t\t\t\tif ($object->fk_default_bom) {\n\t\t\t\t\t$bom_static = new BOM($db);\n\t\t\t\t\t$bom_static->fetch($object->fk_default_bom);\n\t\t\t\t\tprint $bom_static->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!$object->isService()) {\n\t\t\t\t// Brut Weight\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\t\tif ($object->weight != '') {\n\t\t\t\t\t\tprint $object->weight.\" \".measuringUnitString(0, \"weight\", $object->weight_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\t\t// Brut Length\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\t\tif ($object->length != '' || $object->width != '' || $object->height != '') {\n\t\t\t\t\t\tprint $object->length;\n\t\t\t\t\t\tif ($object->width) {\n\t\t\t\t\t\t\tprint \" x \".$object->width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($object->height) {\n\t\t\t\t\t\t\tprint \" x \".$object->height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint ' '.measuringUnitString(0, \"size\", $object->length_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t\t// Brut Surface\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\t\tif ($object->surface != '') {\n\t\t\t\t\t\tprint $object->surface.\" \".measuringUnitString(0, \"surface\", $object->surface_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t\t// Brut Volume\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\t\tif ($object->volume != '') {\n\t\t\t\t\t\tprint $object->volume.\" \".measuringUnitString(0, \"volume\", $object->volume_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t\t// Net Measure\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\t\tif ($object->net_measure != '') {\n\t\t\t\t\t\tprint $object->net_measure.\" \".measuringUnitString($object->net_measure_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Unit\n\t\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\t\t$unit = $object->getLabelOfUnit();\n\n\t\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td><td>';\n\t\t\t\tif ($unit !== '') {\n\t\t\t\t\tprint $langs->trans($unit);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Custom code\n\t\t\tif (!$object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"CustomCode\").'</td><td>'.$object->customcode.'</td>';\n\n\t\t\t\t// Origin country code\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Origin\").'</td><td>'.getCountry($object->country_id, 0, $db);\n\t\t\t\tif (!empty($object->state_id)) {\n\t\t\t\t\tprint ' - '.getState($object->state_id, 0, $db);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t}\n\n\t\t\t// Quality Control\n\t\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td\">'.$object->lifetime.'</td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td>'.$object->qc_frequency.'</td></tr>';\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array();\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Categories\n\t\t\tif ($conf->categorie->enabled) {\n\t\t\t\tprint '<tr><td class=\"valignmiddle\">'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_PRODUCT, 1);\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Note private\n\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\tprint '<!-- show Note --> '.\"\\n\";\n\t\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NotePrivate\").'</td><td>'.(dol_textishtml($object->note_private) ? $object->note_private : dol_nl2br($object->note_private, 1, true)).'</td></tr>'.\"\\n\";\n\t\t\t\tprint '<!-- End show Note --> '.\"\\n\";\n\t\t\t}\n\n\t\t\tprint \"</table>\\n\";\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\t\t\tprint dol_get_fiche_end();\n\t\t}\n\t} elseif ($action != 'create') {\n\t\texit;\n\t}\n}\n\n$tmpcode = '';\nif (!empty($modCodeProduct->code_auto)) {\n\t$tmpcode = $modCodeProduct->getNextValue($object, $object->type);\n}\n\n$formconfirm = '';\n\n// Confirm delete product\nif (($action == 'delete' && (empty($conf->use_javascript_ajax) || !empty($conf->dol_use_jmobile)))\t// Output when action = clone if jmobile or no js\n\t|| (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))) {\t\t\t\t\t\t\t// Always output when not jmobile nor js\n\t$formconfirm = $form->formconfirm(\"card.php?id=\".$object->id, $langs->trans(\"DeleteProduct\"), $langs->trans(\"ConfirmDeleteProduct\"), \"confirm_delete\", '', 0, \"action-delete\");\n}\n\n// Clone confirmation\nif (($action == 'clone' && (empty($conf->use_javascript_ajax) || !empty($conf->dol_use_jmobile)))\t\t// Output when action = clone if jmobile or no js\n\t|| (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))) {\t\t\t\t\t\t\t// Always output when not jmobile nor js\n\t// Define confirmation messages\n\t$formquestionclone = array(\n\t\t'text' => $langs->trans(\"ConfirmClone\"),\n\t\tarray('type' => 'text', 'name' => 'clone_ref', 'label' => $langs->trans(\"NewRefForClone\"), 'value' => empty($tmpcode) ? $langs->trans(\"CopyOf\").' '.$object->ref : $tmpcode, 'morecss'=>'width150'),\n\t\tarray('type' => 'checkbox', 'name' => 'clone_content', 'label' => $langs->trans(\"CloneContentProduct\"), 'value' => 1),\n\t\tarray('type' => 'checkbox', 'name' => 'clone_categories', 'label' => $langs->trans(\"CloneCategoriesProduct\"), 'value' => 1),\n\t);\n\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t$formquestionclone[] = array('type' => 'checkbox', 'name' => 'clone_prices', 'label' => $langs->trans(\"ClonePricesProduct\").' ('.$langs->trans(\"CustomerPrices\").')', 'value' => 0);\n\t}\n\tif (!empty($conf->global->PRODUIT_SOUSPRODUITS)) {\n\t\t$formquestionclone[] = array('type' => 'checkbox', 'name' => 'clone_composition', 'label' => $langs->trans('CloneCompositionProduct'), 'value' => 1);\n\t}\n\n\t$formconfirm .= $form->formconfirm($_SERVER[\"PHP_SELF\"].'?id='.$object->id, $langs->trans('ToClone'), $langs->trans('ConfirmCloneProduct', $object->ref), 'confirm_clone', $formquestionclone, 'yes', 'action-clone', 350, 600);\n}\n\n// Call Hook formConfirm\n$parameters = array('formConfirm' => $formconfirm, 'object' => $object);\n$reshook = $hookmanager->executeHooks('formConfirm', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\nif (empty($reshook)) {\n\t$formconfirm .= $hookmanager->resPrint;\n} elseif ($reshook > 0) {\n\t$formconfirm = $hookmanager->resPrint;\n}\n\n// Print form confirm\nprint $formconfirm;\n\n/*\n * Action bar\n */\nif ($action != 'create' && $action != 'edit') {\n\tprint \"\\n\".'<div class=\"tabsAction\">'.\"\\n\";\n\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('addMoreActionsButtons', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tif (empty($reshook)) {\n\t\tif ($usercancreate) {\n\t\t\tif (!isset($object->no_button_edit) || $object->no_button_edit <> 1) {\n\t\t\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"Modify\").'</a>';\n\t\t\t}\n\n\t\t\tif (!isset($object->no_button_copy) || $object->no_button_copy <> 1) {\n\t\t\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)) {\n\t\t\t\t\tprint '<span id=\"action-clone\" class=\"butAction\">'.$langs->trans('ToClone').'</span>'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=clone&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"ToClone\").'</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$object_is_used = $object->isObjectUsed($object->id);\n\n\t\tif ($usercandelete) {\n\t\t\tif (empty($object_is_used) && (!isset($object->no_button_delete) || $object->no_button_delete <> 1)) {\n\t\t\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)) {\n\t\t\t\t\tprint '<span id=\"action-delete\" class=\"butActionDelete\">'.$langs->trans('Delete').'</span>'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint '<a class=\"butActionDelete\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=delete&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint '<a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"ProductIsUsed\").'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t\t}\n\t\t} else {\n\t\t\tprint '<a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"NotEnoughPermissions\").'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t}\n\t}\n\n\tprint \"\\n</div>\\n\";\n}\n\n\n/*\n * All the \"Add to\" areas if PRODUCT_ADD_FORM_ADD_TO is set\n */\n\nif (!empty($conf->global->PRODUCT_ADD_FORM_ADD_TO) && $object->id && ($action == '' || $action == 'view') && $object->status) {\n\t//Variable used to check if any text is going to be printed\n\t$html = '';\n\t//print '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t// Propals\n\tif (!empty($conf->propal->enabled) && $user->rights->propale->creer) {\n\t\t$propal = new Propal($db);\n\n\t\t$langs->load(\"propal\");\n\n\t\t$otherprop = $propal->liste_array(2, 1, 0);\n\n\t\tif (is_array($otherprop) && count($otherprop)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftProposals\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"propalid\", $otherprop, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftProposals\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftProposals\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t// Commande\n\tif (!empty($conf->commande->enabled) && $user->rights->commande->creer) {\n\t\t$commande = new Commande($db);\n\n\t\t$langs->load(\"orders\");\n\n\t\t$othercom = $commande->liste_array(2, 1, null);\n\t\tif (is_array($othercom) && count($othercom)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftOrders\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"commandeid\", $othercom, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftOrders\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftOrders\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t// Factures\n\tif (!empty($conf->facture->enabled) && $user->rights->facture->creer) {\n\t\t$invoice = new Facture($db);\n\n\t\t$langs->load(\"bills\");\n\n\t\t$otherinvoice = $invoice->liste_array(2, 1, null);\n\t\tif (is_array($otherinvoice) && count($otherinvoice)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftInvoices\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"factureid\", $otherinvoice, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftInvoices\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftInvoices\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t//If any text is going to be printed, then we show the table\n\tif (!empty($html)) {\n\t\tprint '<form method=\"POST\" action=\"'.$_SERVER[\"PHP_SELF\"].'?id='.$object->id.'\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addin\">';\n\n\t\tprint load_fiche_titre($langs->trans(\"AddToDraft\"), '', '');\n\n\t\tprint dol_get_fiche_head('');\n\n\t\t$html .= '<tr><td class=\"nowrap\">'.$langs->trans(\"Quantity\").' ';\n\t\t$html .= '<input type=\"text\" class=\"flat\" name=\"qty\" size=\"1\" value=\"1\"></td>';\n\t\t$html .= '<td class=\"nowrap\">'.$langs->trans(\"ReductionShort\").'(%) ';\n\t\t$html .= '<input type=\"text\" class=\"flat\" name=\"remise_percent\" size=\"1\" value=\"0\">';\n\t\t$html .= '</td></tr>';\n\n\t\tprint '<table width=\"100%\" class=\"border\">';\n\t\tprint $html;\n\t\tprint '</table>';\n\n\t\tprint '<div class=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button button-add\" value=\"'.$langs->trans(\"Add\").'\">';\n\t\tprint '</div>';\n\n\t\tprint dol_get_fiche_end();\n\n\t\tprint '</form>';\n\t}\n}\n\n\n/*\n * Generated documents\n */\n\nif ($action != 'create' && $action != 'edit' && $action != 'delete') {\n\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\tprint '<a name=\"builddoc\"></a>'; // ancre\n\n\t// Documents\n\t$objectref = dol_sanitizeFileName($object->ref);\n\tif (!empty($conf->product->multidir_output[$object->entity])) {\n\t\t$filedir = $conf->product->multidir_output[$object->entity].'/'.$objectref; //Check repertories of current entities\n\t} else {\n\t\t$filedir = $conf->product->dir_output.'/'.$objectref;\n\t}\n\t$urlsource = $_SERVER[\"PHP_SELF\"].\"?id=\".$object->id;\n\t$genallowed = $usercanread;\n\t$delallowed = $usercancreate;\n\n\tprint $formfile->showdocuments($modulepart, $object->ref, $filedir, $urlsource, $genallowed, $delallowed, '', 0, 0, 0, 28, 0, '', 0, '', $langs->getDefaultLang(), '', $object);\n\t$somethingshown = $formfile->numoffiles;\n\n\tprint '</div><div class=\"fichehalfright\">';\n\n\t$MAXEVENT = 10;\n\n\t$morehtmlcenter = dolGetButtonTitle($langs->trans('SeeAll'), '', 'fa fa-list-alt imgforviewmode', DOL_URL_ROOT.'/product/agenda.php?id='.$object->id);\n\n\t// List of actions on element\n\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.formactions.class.php';\n\t$formactions = new FormActions($db);\n\t$somethingshown = $formactions->showactions($object, 'product', 0, 1, '', $MAXEVENT, '', $morehtmlcenter); // Show all action for product\n\n\tprint '</div></div>';\n}\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2001-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2014\tLaurent Destailleur\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t\t<acianfa@free.fr>\n * Copyright (C) 2007-2011\tJean Heimburger\t\t\t<jean@tiaris.info>\n * Copyright (C) 2010-2018\tJuanjo Menent\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2012       Cedric Salvador         <csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2014\tCedric GROSS\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2011-2021\tOpen-DSI\t\t\t\t<support@open-dsi.fr>\n * Copyright (C) 2014\t\tHenry Florian\t\t\t<florian.henry@open-concept.pro>\n * Copyright (C) 2014-2016\tPhilippe Grand\t\t\t<philippe.grand@atoo-net.com>\n * Copyright (C) 2014\t\tIon agorria\t\t\t    <ion@agorria.com>\n * Copyright (C) 2016-2018\tFerran Marcet\t\t\t<fmarcet@2byte.es>\n * Copyright (C) 2017\t\tGustavo Novaro\n * Copyright (C) 2019-2021  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *    \\file       htdocs/product/class/product.class.php\n *    \\ingroup    produit\n *    \\brief      File of class to manage predefined products or services\n */\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/productbatch.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\n/**\n * Class to manage products or services\n */\nclass Product extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'product';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'product';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_product';\n\n\t/**\n\t * @var array\tList of child tables. To test if we can delete object.\n\t */\n\tprotected $childtables = array(\n\t\t'supplier_proposaldet',\n\t\t'propaldet',\n\t\t'commandedet',\n\t\t'facturedet',\n\t\t'contratdet',\n\t\t'facture_fourn_det',\n\t\t'commande_fournisseurdet'\n\t);\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t *\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string picto\n\t */\n\tpublic $picto = 'product';\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected $table_ref_field = 'ref';\n\n\tpublic $regeximgext = '\\.gif|\\.jpg|\\.jpeg|\\.png|\\.bmp|\\.webp|\\.xpm|\\.xbm'; // See also into images.lib.php\n\n\t/**\n\t * @deprecated\n\t * @see $label\n\t */\n\tpublic $libelle;\n\n\t/**\n\t * Product label\n\t *\n\t * @var string\n\t */\n\tpublic $label;\n\n\t/**\n\t * Product description\n\t *\n\t * @var string\n\t */\n\tpublic $description;\n\n\t/**\n\t * Product other fields PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION\n\t *\n\t * @var string\n\t */\n\tpublic $other;\n\n\t/**\n\t * Check TYPE constants\n\t *\n\t * @var int\n\t */\n\tpublic $type = self::TYPE_PRODUCT;\n\n\t/**\n\t * Selling price\n\t *\n\t * @var float\n\t */\n\tpublic $price; // Price net\n\n\t/**\n\t * Price with tax\n\t *\n\t * @var float\n\t */\n\tpublic $price_ttc;\n\n\t/**\n\t * Minimum price net\n\t *\n\t * @var float\n\t */\n\tpublic $price_min;\n\n\t/**\n\t * Minimum price with tax\n\t *\n\t * @var float\n\t */\n\tpublic $price_min_ttc;\n\n\t/**\n\t * Base price ('TTC' for price including tax or 'HT' for net price)\n\t * @var string\n\t */\n\tpublic $price_base_type;\n\n\t//! Arrays for multiprices\n\tpublic $multiprices = array();\n\tpublic $multiprices_ttc = array();\n\tpublic $multiprices_base_type = array();\n\tpublic $multiprices_min = array();\n\tpublic $multiprices_min_ttc = array();\n\tpublic $multiprices_tva_tx = array();\n\tpublic $multiprices_recuperableonly = array();\n\n\t//! Price by quantity arrays\n\tpublic $price_by_qty;\n\tpublic $prices_by_qty = array();\n\tpublic $prices_by_qty_id = array();\n\tpublic $prices_by_qty_list = array();\n\n\t//! Array for multilangs\n\tpublic $multilangs = array();\n\n\t//! Default VAT code for product (link to code into llx_c_tva but without foreign keys)\n\tpublic $default_vat_code;\n\n\t//! Default VAT rate of product\n\tpublic $tva_tx;\n\n\t//! French VAT NPR (0 or 1)\n\tpublic $tva_npr = 0;\n\n\t//! Other local taxes\n\tpublic $localtax1_tx;\n\tpublic $localtax2_tx;\n\tpublic $localtax1_type;\n\tpublic $localtax2_type;\n\n\tpublic $lifetime;\n\n\tpublic $qc_frequency;\n\n\t/**\n\t * Stock real\n\t *\n\t * @var int\n\t */\n\tpublic $stock_reel = 0;\n\n\t/**\n\t * Stock virtual\n\t *\n\t * @var int\n\t */\n\tpublic $stock_theorique;\n\n\t/**\n\t * Cost price\n\t *\n\t * @var float\n\t */\n\tpublic $cost_price;\n\n\t//! Average price value for product entry into stock (PMP)\n\tpublic $pmp;\n\n\t/**\n\t * Stock alert\n\t *\n\t * @var float\n\t */\n\tpublic $seuil_stock_alerte = 0;\n\n\t/**\n\t * Ask for replenishment when $desiredstock < $stock_reel\n\t */\n\tpublic $desiredstock = 0;\n\n\t/*\n\t * Service expiration\n\t */\n\tpublic $duration_value;\n\n\t/**\n\t * Exoiration unit\n\t */\n\tpublic $duration_unit;\n\n\t/**\n\t * Status indicates whether the product is on sale '1' or not '0'\n\t *\n\t * @var int\n\t */\n\tpublic $status = 0;\n\n\t/**\n\t * Status indicate whether the product is available for purchase '1' or not '0'\n\t *\n\t * @var int\n\t */\n\tpublic $status_buy = 0;\n\n\t/**\n\t * Status indicates whether the product is a finished product '1' or a raw material '0'\n\t *\n\t * @var int\n\t */\n\tpublic $finished;\n\n\t\t/**\n\t * fk_default_bom indicates the default bom\n\t *\n\t * @var int\n\t */\n\tpublic $fk_default_bom;\n\n\t/**\n\t * We must manage lot/batch number, sell-by date and so on : '1':yes '0':no\n\t *\n\t * @var int\n\t */\n\tpublic $status_batch = 0;\n\n\t/**\n\t * If allowed, we can edit batch or serial number mask for each product\n\t *\n\t * @var string\n\t */\n\tpublic $batch_mask = '';\n\n\t/**\n\t * Customs code\n\t *\n\t * @var string\n\t */\n\tpublic $customcode;\n\n\t/**\n\t * Product URL\n\t *\n\t * @var string\n\t */\n\tpublic $url;\n\n\t//! Metric of products\n\tpublic $weight;\n\tpublic $weight_units;\t// scale -3, 0, 3, 6\n\tpublic $length;\n\tpublic $length_units;\t// scale -3, 0, 3, 6\n\tpublic $width;\n\tpublic $width_units;\t// scale -3, 0, 3, 6\n\tpublic $height;\n\tpublic $height_units;\t// scale -3, 0, 3, 6\n\tpublic $surface;\n\tpublic $surface_units;\t// scale -3, 0, 3, 6\n\tpublic $volume;\n\tpublic $volume_units;\t// scale -3, 0, 3, 6\n\n\tpublic $net_measure;\n\tpublic $net_measure_units;\t// scale -3, 0, 3, 6\n\n\tpublic $accountancy_code_sell;\n\tpublic $accountancy_code_sell_intra;\n\tpublic $accountancy_code_sell_export;\n\tpublic $accountancy_code_buy;\n\tpublic $accountancy_code_buy_intra;\n\tpublic $accountancy_code_buy_export;\n\n\t/**\n\t * Main Barcode value\n\t *\n\t * @var string\n\t */\n\tpublic $barcode;\n\n\t/**\n\t * Main Barcode type ID\n\t *\n\t * @var int\n\t */\n\tpublic $barcode_type;\n\n\t/**\n\t * Main Barcode type code\n\t *\n\t * @var string\n\t */\n\tpublic $barcode_type_code;\n\n\tpublic $stats_propale = array();\n\tpublic $stats_commande = array();\n\tpublic $stats_contrat = array();\n\tpublic $stats_facture = array();\n\tpublic $stats_commande_fournisseur = array();\n\tpublic $stats_reception = array();\n\tpublic $stats_mrptoconsume = array();\n\tpublic $stats_mrptoproduce = array();\n\n\t//! Size of image\n\tpublic $imgWidth;\n\tpublic $imgHeight;\n\n\t/**\n\t * @var integer|string date_creation\n\t */\n\tpublic $date_creation;\n\n\t/**\n\t * @var integer|string date_modification\n\t */\n\tpublic $date_modification;\n\n\t//! Id du fournisseur\n\tpublic $product_fourn_id;\n\n\t//! Product ID already linked to a reference supplier\n\tpublic $product_id_already_linked;\n\n\tpublic $nbphoto = 0;\n\n\t//! Contains detail of stock of product into each warehouse\n\tpublic $stock_warehouse = array();\n\n\tpublic $oldcopy;\n\n\t/**\n\t * @var int Default warehouse Id\n\t */\n\tpublic $fk_default_warehouse;\n\t/**\n\t * @var int ID\n\t */\n\tpublic $fk_price_expression;\n\n\t/* To store supplier price found */\n\tpublic $fourn_pu;\n\tpublic $fourn_price_base_type;\n\tpublic $fourn_socid;\n\n\t/**\n\t * @deprecated\n\t * @see        $ref_supplier\n\t */\n\tpublic $ref_fourn;\n\n\t/**\n\t * @var string ref supplier\n\t */\n\tpublic $ref_supplier;\n\n\t/**\n\t * Unit code ('km', 'm', 'l', 'p', ...)\n\t *\n\t * @var string\n\t */\n\tpublic $fk_unit;\n\n\t/**\n\t * Price is generated using multiprice rules\n\t *\n\t * @var int\n\t */\n\tpublic $price_autogen = 0;\n\n\t/**\n\t * Array with list of supplier prices of product\n\t *\n\t * @var array\n\t */\n\tpublic $supplierprices;\n\n\t/**\n\t * Property set to save result of isObjectUsed(). Used for example by Product API.\n\t *\n\t * @var boolean\n\t */\n\tpublic $is_object_used;\n\n\n\t/**\n\t *\n\t *\n\t *\n\t */\n\t public $mandatory_period;\n\n\t/**\n\t *  'type' if the field format ('integer', 'integer:ObjectClass:PathToClass[:AddCreateButtonOrNot[:Filter]]', 'varchar(x)', 'double(24,8)', 'real', 'price', 'text', 'html', 'date', 'datetime', 'timestamp', 'duration', 'mail', 'phone', 'url', 'password')\n\t *         Note: Filter can be a string like \"(t.ref:like:'SO-%') or (t.date_creation:<:'20160101') or (t.nature:is:NULL)\"\n\t *  'label' the translation key.\n\t *  'enabled' is a condition when the field must be managed (Example: 1 or '$conf->global->MY_SETUP_PARAM)\n\t *  'position' is the sort order of field.\n\t *  'notnull' is set to 1 if not null in database. Set to -1 if we must set data to null if empty ('' or 0).\n\t *  'visible' says if field is visible in list (Examples: 0=Not visible, 1=Visible on list and create/update/view forms, 2=Visible on list only, 3=Visible on create/update/view form only (not list), 4=Visible on list and update/view form only (not create). 5=Visible on list and view only (not create/not update). Using a negative value means field is not shown by default on list but can be selected for viewing)\n\t *  'noteditable' says if field is not editable (1 or 0)\n\t *  'default' is a default value for creation (can still be overwrote by the Setup of Default Values if field is editable in creation form). Note: If default is set to '(PROV)' and field is 'ref', the default value will be set to '(PROVid)' where id is rowid when a new record is created.\n\t *  'index' if we want an index in database.\n\t *  'foreignkey'=>'tablename.field' if the field is a foreign key (it is recommanded to name the field fk_...).\n\t *  'searchall' is 1 if we want to search in this field when making a search from the quick search button.\n\t *  'isameasure' must be set to 1 if you want to have a total on list for this field. Field type must be summable like integer or double(24,8).\n\t *  'css' is the CSS style to use on field. For example: 'maxwidth200'\n\t *  'help' is a string visible as a tooltip on field\n\t *  'showoncombobox' if value of the field must be visible into the label of the combobox that list record\n\t *  'disabled' is 1 if we want to have the field locked by a 'disabled' attribute. In most cases, this is never set into the definition of $fields into class, but is set dynamically by some part of code.\n\t *  'arrayofkeyval' to set list of value if type is a list of predefined values. For example: array(\"0\"=>\"Draft\",\"1\"=>\"Active\",\"-1\"=>\"Cancel\")\n\t *  'autofocusoncreate' to have field having the focus on a create form. Only 1 field should have this property set to 1.\n\t *  'comment' is not used. You can store here any text of your choice. It is not used by application.\n\t *\n\t *  Note: To have value dynamic, you can set value to 0 in definition and edit the value on the fly into the constructor.\n\t */\n\n\t/**\n\t * @var array fields of object product\n\t */\n\tpublic $fields = array(\n\t\t'rowid' => array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'index'=>1, 'position'=>1, 'comment'=>'Id'),\n\t\t'ref'           =>array('type'=>'varchar(128)', 'label'=>'Ref', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1, 'comment'=>'Reference of object'),\n\t\t'entity'        =>array('type'=>'integer', 'label'=>'Entity', 'enabled'=>1, 'visible'=>0, 'default'=>1, 'notnull'=>1, 'index'=>1, 'position'=>5),\n\t\t'label'         =>array('type'=>'varchar(255)', 'label'=>'Label', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>2, 'position'=>15),\n\t\t'barcode'       =>array('type'=>'varchar(255)', 'label'=>'Barcode', 'enabled'=>'!empty($conf->barcode->enabled)', 'position'=>20, 'visible'=>-1, 'showoncombobox'=>3),\n\t\t'fk_barcode_type' => array('type'=>'integer', 'label'=>'BarcodeType', 'enabled'=>'1', 'position'=>21, 'notnull'=>0, 'visible'=>-1,),\n\t\t'note_public'   =>array('type'=>'html', 'label'=>'NotePublic', 'enabled'=>1, 'visible'=>0, 'position'=>61),\n\t\t'note'          =>array('type'=>'html', 'label'=>'NotePrivate', 'enabled'=>1, 'visible'=>0, 'position'=>62),\n\t\t'datec'         =>array('type'=>'datetime', 'label'=>'DateCreation', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>500),\n\t\t'tms'           =>array('type'=>'timestamp', 'label'=>'DateModification', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>501),\n\t\t//'date_valid'    =>array('type'=>'datetime',     'label'=>'DateCreation',     'enabled'=>1, 'visible'=>-2, 'position'=>502),\n\t\t'fk_user_author'=>array('type'=>'integer', 'label'=>'UserAuthor', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>510, 'foreignkey'=>'llx_user.rowid'),\n\t\t'fk_user_modif' =>array('type'=>'integer', 'label'=>'UserModif', 'enabled'=>1, 'visible'=>-2, 'notnull'=>-1, 'position'=>511),\n\t\t//'fk_user_valid' =>array('type'=>'integer',      'label'=>'UserValidation',        'enabled'=>1, 'visible'=>-1, 'position'=>512),\n\t\t'localtax1_tx' => array('type'=>'double(6,3)', 'label'=>'Localtax1tx', 'enabled'=>'1', 'position'=>150, 'notnull'=>0, 'visible'=>-1,),\n\t\t'localtax1_type' => array('type'=>'varchar(10)', 'label'=>'Localtax1type', 'enabled'=>'1', 'position'=>155, 'notnull'=>1, 'visible'=>-1,),\n\t\t'localtax2_tx' => array('type'=>'double(6,3)', 'label'=>'Localtax2tx', 'enabled'=>'1', 'position'=>160, 'notnull'=>0, 'visible'=>-1,),\n\t\t'localtax2_type' => array('type'=>'varchar(10)', 'label'=>'Localtax2type', 'enabled'=>'1', 'position'=>165, 'notnull'=>1, 'visible'=>-1,),\n\t\t'import_key'    =>array('type'=>'varchar(14)', 'label'=>'ImportId', 'enabled'=>1, 'visible'=>-2, 'notnull'=>-1, 'index'=>0, 'position'=>1000),\n\t\t//'tosell'       =>array('type'=>'integer',      'label'=>'Status',           'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000, 'arrayofkeyval'=>array(0=>'Draft', 1=>'Active', -1=>'Cancel')),\n\t\t//'tobuy'        =>array('type'=>'integer',      'label'=>'Status',           'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000, 'arrayofkeyval'=>array(0=>'Draft', 1=>'Active', -1=>'Cancel')),\n\t\t'mandatory_period'        =>array('type'=>'integer', 'label'=>'mandatory_period', 'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000),\n\n\t);\n\n\t/**\n\t * Regular product\n\t */\n\tconst TYPE_PRODUCT = 0;\n\t/**\n\t * Service\n\t */\n\tconst TYPE_SERVICE = 1;\n\t/**\n\t * Advanced feature: assembly kit\n\t */\n\tconst TYPE_ASSEMBLYKIT = 2;\n\t/**\n\t * Advanced feature: stock kit\n\t */\n\tconst TYPE_STOCKKIT = 3;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t * @param DoliDB $db Database handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t$this->db = $db;\n\t\t$this->canvas = '';\n\t}\n\n\t/**\n\t *    Check that ref and label are ok\n\t *\n\t * @return int         >1 if OK, <=0 if KO\n\t */\n\tpublic function check()\n\t{\n\t\t$this->ref = dol_sanitizeFileName(stripslashes($this->ref));\n\n\t\t$err = 0;\n\t\tif (dol_strlen(trim($this->ref)) == 0) {\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->label)) == 0) {\n\t\t\t$err++;\n\t\t}\n\n\t\tif ($err > 0) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *    Insert product into database\n\t *\n\t * @param  User $user      User making insert\n\t * @param  int  $notrigger Disable triggers\n\t * @return int                         Id of product/service if OK, < 0 if KO\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_sanitizeFileName(dol_string_nospecial(trim($this->ref)));\n\t\t$this->label = trim($this->label);\n\t\t$this->price_ttc = price2num($this->price_ttc);\n\t\t$this->price = price2num($this->price);\n\t\t$this->price_min_ttc = price2num($this->price_min_ttc);\n\t\t$this->price_min = price2num($this->price_min);\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($this->tva_npr)) {\n\t\t\t$this->tva_npr = 0;\n\t\t}\n\t\t//Local taxes\n\t\tif (empty($this->localtax1_tx)) {\n\t\t\t$this->localtax1_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax2_tx)) {\n\t\t\t$this->localtax2_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax1_type)) {\n\t\t\t$this->localtax1_type = '0';\n\t\t}\n\t\tif (empty($this->localtax2_type)) {\n\t\t\t$this->localtax2_type = '0';\n\t\t}\n\t\tif (empty($this->price)) {\n\t\t\t$this->price = 0;\n\t\t}\n\t\tif (empty($this->price_min)) {\n\t\t\t$this->price_min = 0;\n\t\t}\n\t\t// Price by quantity\n\t\tif (empty($this->price_by_qty)) {\n\t\t\t$this->price_by_qty = 0;\n\t\t}\n\n\t\tif (empty($this->status)) {\n\t\t\t$this->status = 0;\n\t\t}\n\t\tif (empty($this->status_buy)) {\n\t\t\t$this->status_buy = 0;\n\t\t}\n\n\t\t$price_ht = 0;\n\t\t$price_ttc = 0;\n\t\t$price_min_ht = 0;\n\t\t$price_min_ttc = 0;\n\n\t\t//\n\t\tif ($this->price_base_type == 'TTC' && $this->price_ttc > 0) {\n\t\t\t$price_ttc = price2num($this->price_ttc, 'MU');\n\t\t\t$price_ht = price2num($this->price_ttc / (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif ($this->price_base_type != 'TTC' && $this->price > 0) {\n\t\t\t$price_ht = price2num($this->price, 'MU');\n\t\t\t$price_ttc = price2num($this->price * (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min_ttc > 0) && ($this->price_base_type == 'TTC')) {\n\t\t\t$price_min_ttc = price2num($this->price_min_ttc, 'MU');\n\t\t\t$price_min_ht = price2num($this->price_min_ttc / (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min > 0) && ($this->price_base_type != 'TTC')) {\n\t\t\t$price_min_ht = price2num($this->price_min, 'MU');\n\t\t\t$price_min_ttc = price2num($this->price_min * (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_buy_intra = trim($this->accountancy_code_buy_intra);\n\t\t$this->accountancy_code_buy_export = trim($this->accountancy_code_buy_export);\n\t\t$this->accountancy_code_sell = trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra = trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export = trim($this->accountancy_code_sell_export);\n\n\t\t// Barcode value\n\t\t$this->barcode = trim($this->barcode);\n\t\t$this->mandatory_period = empty($this->mandatory_period) ? 0 : $this->mandatory_period;\n\t\t// Check parameters\n\t\tif (empty($this->label)) {\n\t\t\t$this->error = 'ErrorMandatoryParametersNotProvided';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($this->ref) || $this->ref == 'auto') {\n\t\t\t// Load object modCodeProduct\n\t\t\t$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\n\t\t\tif ($module != 'mod_codeproduct_leopard') {    // Do not load module file for leopard\n\t\t\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t\t\t\t\t$module = substr($module, 0, dol_strlen($module) - 4);\n\t\t\t\t}\n\t\t\t\tdol_include_once('/core/modules/product/'.$module.'.php');\n\t\t\t\t$modCodeProduct = new $module;\n\t\t\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\t\t\t$this->ref = $modCodeProduct->getNextValue($this, $this->type);\n\t\t\t\t}\n\t\t\t\tunset($modCodeProduct);\n\t\t\t}\n\n\t\t\tif (empty($this->ref)) {\n\t\t\t\t$this->error = 'ProductModuleNotSetupForAutoRef';\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create ref=\".$this->ref.\" price=\".$this->price.\" price_ttc=\".$this->price_ttc.\" tva_tx=\".$this->tva_tx.\" price_base_type=\".$this->price_base_type, LOG_DEBUG);\n\n\t\t$now = dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// For automatic creation during create action (not used by Dolibarr GUI, can be used by scripts)\n\t\tif ($this->barcode == -1) {\n\t\t\t$this->barcode = $this->get_barcode($this, $this->barcode_type_code);\n\t\t}\n\n\t\t// Check more parameters\n\t\t// If error, this->errors[] is filled\n\t\t$result = $this->verify();\n\n\t\tif ($result >= 0) {\n\t\t\t$sql = \"SELECT count(*) as nb\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql .= \" WHERE entity IN (\".getEntity('product').\")\";\n\t\t\t$sql .= \" AND ref = '\".$this->db->escape($this->ref).\"'\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\tif ($obj->nb == 0) {\n\t\t\t\t\t// Produit non deja existant\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product (\";\n\t\t\t\t\t$sql .= \"datec\";\n\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t$sql .= \", ref\";\n\t\t\t\t\t$sql .= \", ref_ext\";\n\t\t\t\t\t$sql .= \", price_min\";\n\t\t\t\t\t$sql .= \", price_min_ttc\";\n\t\t\t\t\t$sql .= \", label\";\n\t\t\t\t\t$sql .= \", fk_user_author\";\n\t\t\t\t\t$sql .= \", fk_product_type\";\n\t\t\t\t\t$sql .= \", price\";\n\t\t\t\t\t$sql .= \", price_ttc\";\n\t\t\t\t\t$sql .= \", price_base_type\";\n\t\t\t\t\t$sql .= \", tobuy\";\n\t\t\t\t\t$sql .= \", tosell\";\n\t\t\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql .= \", canvas\";\n\t\t\t\t\t$sql .= \", finished\";\n\t\t\t\t\t$sql .= \", tobatch\";\n\t\t\t\t\t$sql .= \", batch_mask\";\n\t\t\t\t\t$sql .= \", fk_unit\";\n\t\t\t\t\t$sql .= \", mandatory_period\";\n\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t$sql .= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t\t$sql .= \", \".((int) $conf->entity);\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->ref).\"'\";\n\t\t\t\t\t$sql .= \", \".(!empty($this->ref_ext) ? \"'\".$this->db->escape($this->ref_ext).\"'\" : \"null\");\n\t\t\t\t\t$sql .= \", \".price2num($price_min_ht);\n\t\t\t\t\t$sql .= \", \".price2num($price_min_ttc);\n\t\t\t\t\t$sql .= \", \".(!empty($this->label) ? \"'\".$this->db->escape($this->label).\"'\" : \"null\");\n\t\t\t\t\t$sql .= \", \".((int) $user->id);\n\t\t\t\t\t$sql .= \", \".((int) $this->type);\n\t\t\t\t\t$sql .= \", \".price2num($price_ht, 'MT');\n\t\t\t\t\t$sql .= \", \".price2num($price_ttc, 'MT');\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->price_base_type).\"'\";\n\t\t\t\t\t$sql .= \", \".((int) $this->status);\n\t\t\t\t\t$sql .= \", \".((int) $this->status_buy);\n\t\t\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy_intra).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy_export).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->canvas).\"'\";\n\t\t\t\t\t$sql .= \", \".((!isset($this->finished) || $this->finished < 0 || $this->finished == '') ? 'NULL' : (int) $this->finished);\n\t\t\t\t\t$sql .= \", \".((empty($this->status_batch) || $this->status_batch < 0) ? '0' : ((int) $this->status_batch));\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->batch_mask).\"'\";\n\t\t\t\t\t$sql .= \", \".($this->fk_unit > 0 ? ((int) $this->fk_unit) : 'NULL');\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->mandatory_period).\"'\";\n\t\t\t\t\t$sql .= \")\";\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::Create\", LOG_DEBUG);\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif ($result) {\n\t\t\t\t\t\t$id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product\");\n\n\t\t\t\t\t\tif ($id > 0) {\n\t\t\t\t\t\t\t$this->id = $id;\n\t\t\t\t\t\t\t$this->price            = $price_ht;\n\t\t\t\t\t\t\t$this->price_ttc        = $price_ttc;\n\t\t\t\t\t\t\t$this->price_min        = $price_min_ht;\n\t\t\t\t\t\t\t$this->price_min_ttc    = $price_min_ttc;\n\n\t\t\t\t\t\t\t$result = $this->_log_price($user);\n\t\t\t\t\t\t\tif ($result > 0) {\n\t\t\t\t\t\t\t\tif ($this->update($id, $user, true, 'add') <= 0) {\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// update accountancy for this entity\n\t\t\t\t\t\t\tif (!$error && !empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t\t\t$this->db->query(\"DELETE FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \" .((int) $this->id) . \" AND entity = \" . ((int) $conf->entity));\n\n\t\t\t\t\t\t\t\t$sql = \"INSERT INTO \" . MAIN_DB_PREFIX . \"product_perentity (\";\n\t\t\t\t\t\t\t\t$sql .= \" fk_product\";\n\t\t\t\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t\t\t\t$sql .= $this->id;\n\t\t\t\t\t\t\t\t$sql .= \", \" . $conf->entity;\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t\t$this->error = 'ErrorFailedToInsertAccountancyForEntity';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->error = 'ErrorFailedToGetInsertedId';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Product already exists with this ref\n\t\t\t\t\t$langs->load(\"products\");\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->error = \"ErrorProductAlreadyExists\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Create fails verify \".join(',', $this->errors), LOG_WARNING);\n\t\t\treturn -3;\n\t\t}\n\t}\n\n\n\t/**\n\t *    Check properties of product are ok (like name, barcode, ...).\n\t *    All properties must be already loaded on object (this->barcode, this->barcode_type_code, ...).\n\t *\n\t * @return int        0 if OK, <0 if KO\n\t */\n\tpublic function verify()\n\t{\n\t\t$this->errors = array();\n\n\t\t$result = 0;\n\t\t$this->ref = trim($this->ref);\n\n\t\tif (!$this->ref) {\n\t\t\t$this->errors[] = 'ErrorBadRef';\n\t\t\t$result = -2;\n\t\t}\n\n\t\t$rescode = $this->check_barcode($this->barcode, $this->barcode_type_code);\n\t\tif ($rescode) {\n\t\t\tif ($rescode == -1) {\n\t\t\t\t$this->errors[] = 'ErrorBadBarCodeSyntax';\n\t\t\t} elseif ($rescode == -2) {\n\t\t\t\t$this->errors[] = 'ErrorBarCodeRequired';\n\t\t\t} elseif ($rescode == -3) {\n\t\t\t\t// Note: Common usage is to have barcode unique. For variants, we should have a different barcode.\n\t\t\t\t$this->errors[] = 'ErrorBarCodeAlreadyUsed';\n\t\t\t}\n\n\t\t\t$result = -3;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Check barcode\n\t *\n\t * @param  string $valuetotest Value to test\n\t * @param  string $typefortest Type of barcode (ISBN, EAN, ...)\n\t * @return int                        0 if OK\n\t *                                     -1 ErrorBadBarCodeSyntax\n\t *                                     -2 ErrorBarCodeRequired\n\t *                                     -3 ErrorBarCodeAlreadyUsed\n\t */\n\tpublic function check_barcode($valuetotest, $typefortest)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tif (!empty($conf->barcode->enabled) && !empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t\t\t$module = strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\n\t\t\t$dirsociete = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\t\t\tforeach ($dirsociete as $dirroot) {\n\t\t\t\t$res = dol_include_once($dirroot.$module.'.php');\n\t\t\t\tif ($res) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$mod = new $module();\n\n\t\t\tdol_syslog(get_class($this).\"::check_barcode value=\".$valuetotest.\" type=\".$typefortest.\" module=\".$module);\n\t\t\t$result = $mod->verif($this->db, $valuetotest, $this, 0, $typefortest);\n\t\t\treturn $result;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update a record into database.\n\t *  If batch flag is set to on, we create records into llx_product_batch\n\t *\n\t * @param  int     $id          Id of product\n\t * @param  User    $user        Object user making update\n\t * @param  int     $notrigger   Disable triggers\n\t * @param  string  $action      Current action for hookmanager ('add' or 'update')\n\t * @param  boolean $updatetype  Update product type\n\t * @return int                  1 if OK, -1 if ref already exists, -2 if other error\n\t */\n\tpublic function update($id, $user, $notrigger = false, $action = 'update', $updatetype = false)\n\t{\n\t\tglobal $langs, $conf, $hookmanager;\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif (!$this->label) {\n\t\t\t$this->label = 'MISSING LABEL';\n\t\t}\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->description = trim($this->description);\n\t\t$this->note = (isset($this->note) ? trim($this->note) : null);\n\t\t$this->net_measure = price2num($this->net_measure);\n\t\t$this->net_measure_units = trim($this->net_measure_units);\n\t\t$this->weight = price2num($this->weight);\n\t\t$this->weight_units = trim($this->weight_units);\n\t\t$this->length = price2num($this->length);\n\t\t$this->length_units = trim($this->length_units);\n\t\t$this->width = price2num($this->width);\n\t\t$this->width_units = trim($this->width_units);\n\t\t$this->height = price2num($this->height);\n\t\t$this->height_units = trim($this->height_units);\n\t\t$this->surface = price2num($this->surface);\n\t\t$this->surface_units = trim($this->surface_units);\n\t\t$this->volume = price2num($this->volume);\n\t\t$this->volume_units = trim($this->volume_units);\n\n\t\t// set unit not defined\n\t\tif (is_numeric($this->length_units)) {\n\t\t\t$this->width_units = $this->length_units; // Not used yet\n\t\t}\n\t\tif (is_numeric($this->length_units)) {\n\t\t\t$this->height_units = $this->length_units; // Not used yet\n\t\t}\n\n\t\t// Automated compute surface and volume if not filled\n\t\tif (empty($this->surface) && !empty($this->length) && !empty($this->width) && $this->length_units == $this->width_units) {\n\t\t\t$this->surface = $this->length * $this->width;\n\t\t\t$this->surface_units = measuring_units_squared($this->length_units);\n\t\t}\n\t\tif (empty($this->volume) && !empty($this->surface) && !empty($this->height) && $this->length_units == $this->height_units) {\n\t\t\t$this->volume = $this->surface * $this->height;\n\t\t\t$this->volume_units = measuring_units_cubed($this->height_units);\n\t\t}\n\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($this->tva_npr)) {\n\t\t\t$this->tva_npr = 0;\n\t\t}\n\t\tif (empty($this->localtax1_tx)) {\n\t\t\t$this->localtax1_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax2_tx)) {\n\t\t\t$this->localtax2_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax1_type)) {\n\t\t\t$this->localtax1_type = '0';\n\t\t}\n\t\tif (empty($this->localtax2_type)) {\n\t\t\t$this->localtax2_type = '0';\n\t\t}\n\t\tif (empty($this->status)) {\n\t\t\t$this->status = 0;\n\t\t}\n\t\tif (empty($this->status_buy)) {\n\t\t\t$this->status_buy = 0;\n\t\t}\n\n\t\tif (empty($this->country_id)) {\n\t\t\t$this->country_id = 0;\n\t\t}\n\n\t\tif (empty($this->state_id)) {\n\t\t\t$this->state_id = 0;\n\t\t}\n\n\t\t// Barcode value\n\t\t$this->barcode = trim($this->barcode);\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_buy_intra = trim($this->accountancy_code_buy_intra);\n\t\t$this->accountancy_code_buy_export = trim($this->accountancy_code_buy_export);\n\t\t$this->accountancy_code_sell = trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra = trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export = trim($this->accountancy_code_sell_export);\n\n\n\t\t$this->db->begin();\n\n\t\t$result = 0;\n\t\t// Check name is required and codes are ok or unique. If error, this->errors[] is filled\n\t\tif ($action != 'add') {\n\t\t\t$result = $this->verify(); // We don't check when update called during a create because verify was already done\n\t\t} else {\n\t\t\t// we can continue\n\t\t\t$result = 0;\n\t\t}\n\n\t\tif ($result >= 0) {\n\t\t\tif (empty($this->oldcopy)) {\n\t\t\t\t$org = new self($this->db);\n\t\t\t\t$org->fetch($this->id);\n\t\t\t\t$this->oldcopy = $org;\n\t\t\t}\n\n\t\t\t// Test if batch management is activated on existing product\n\t\t\t// If yes, we create missing entries into product_batch\n\t\t\tif ($this->hasbatch() && !$this->oldcopy->hasbatch()) {\n\t\t\t\t//$valueforundefinedlot = 'Undefined';  // In previous version, 39 and lower\n\t\t\t\t$valueforundefinedlot = '000000';\n\t\t\t\tif (!empty($conf->global->STOCK_DEFAULT_BATCH)) {\n\t\t\t\t\t$valueforundefinedlot = $conf->global->STOCK_DEFAULT_BATCH;\n\t\t\t\t}\n\n\t\t\t\tdol_syslog(\"Flag batch of product id=\".$this->id.\" is set to ON, so we will create missing records into product_batch\");\n\n\t\t\t\t$this->load_stock();\n\t\t\t\tforeach ($this->stock_warehouse as $idW => $ObjW) {   // For each warehouse where we have stocks defined for this product (for each lines in product_stock)\n\t\t\t\t\t$qty_batch = 0;\n\t\t\t\t\tforeach ($ObjW->detail_batch as $detail) {    // Each lines of detail in product_batch of the current $ObjW = product_stock\n\t\t\t\t\t\tif ($detail->batch == $valueforundefinedlot || $detail->batch == 'Undefined') {\n\t\t\t\t\t\t\t// We discard this line, we will create it later\n\t\t\t\t\t\t\t$sqlclean = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_batch WHERE batch in('Undefined', '\".$this->db->escape($valueforundefinedlot).\"') AND fk_product_stock = \".((int) $ObjW->id);\n\t\t\t\t\t\t\t$result = $this->db->query($sqlclean);\n\t\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$qty_batch += $detail->qty;\n\t\t\t\t\t}\n\t\t\t\t\t// Quantities in batch details are not same as stock quantity,\n\t\t\t\t\t// so we add a default batch record to complete and get same qty in parent and child table\n\t\t\t\t\tif ($ObjW->real <> $qty_batch) {\n\t\t\t\t\t\t$ObjBatch = new Productbatch($this->db);\n\t\t\t\t\t\t$ObjBatch->batch = $valueforundefinedlot;\n\t\t\t\t\t\t$ObjBatch->qty = ($ObjW->real - $qty_batch);\n\t\t\t\t\t\t$ObjBatch->fk_product_stock = $ObjW->id;\n\n\t\t\t\t\t\tif ($ObjBatch->create($user, 1) < 0) {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->errors = $ObjBatch->errors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For automatic creation\n\t\t\tif ($this->barcode == -1) {\n\t\t\t\t$this->barcode = $this->get_barcode($this, $this->barcode_type_code);\n\t\t\t}\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql .= \" SET label = '\".$this->db->escape($this->label).\"'\";\n\n\t\t\tif ($updatetype && ($this->isProduct() || $this->isService())) {\n\t\t\t\t$sql .= \", fk_product_type = \".((int) $this->type);\n\t\t\t}\n\n\t\t\t$sql .= \", ref = '\".$this->db->escape($this->ref).\"'\";\n\t\t\t$sql .= \", ref_ext = \".(!empty($this->ref_ext) ? \"'\".$this->db->escape($this->ref_ext).\"'\" : \"null\");\n\t\t\t$sql .= \", default_vat_code = \".($this->default_vat_code ? \"'\".$this->db->escape($this->default_vat_code).\"'\" : \"null\");\n\t\t\t$sql .= \", tva_tx = \".((float) $this->tva_tx);\n\t\t\t$sql .= \", recuperableonly = \".((int) $this->tva_npr);\n\t\t\t$sql .= \", localtax1_tx = \".((float) $this->localtax1_tx);\n\t\t\t$sql .= \", localtax2_tx = \".((float) $this->localtax2_tx);\n\t\t\t$sql .= \", localtax1_type = \".($this->localtax1_type != '' ? \"'\".$this->db->escape($this->localtax1_type).\"'\" : \"'0'\");\n\t\t\t$sql .= \", localtax2_type = \".($this->localtax2_type != '' ? \"'\".$this->db->escape($this->localtax2_type).\"'\" : \"'0'\");\n\n\t\t\t$sql .= \", barcode = \".(empty($this->barcode) ? \"null\" : \"'\".$this->db->escape($this->barcode).\"'\");\n\t\t\t$sql .= \", fk_barcode_type = \".(empty($this->barcode_type) ? \"null\" : $this->db->escape($this->barcode_type));\n\n\t\t\t$sql .= \", tosell = \".(int) $this->status;\n\t\t\t$sql .= \", tobuy = \".(int) $this->status_buy;\n\t\t\t$sql .= \", tobatch = \".((empty($this->status_batch) || $this->status_batch < 0) ? '0' : (int) $this->status_batch);\n\t\t\t$sql .= \", batch_mask = '\".$this->db->escape($this->batch_mask).\"'\";\n\n\t\t\t$sql .= \", finished = \".((!isset($this->finished) || $this->finished < 0 || $this->finished == '') ? \"null\" : (int) $this->finished);\n\t\t\t$sql .= \", fk_default_bom = \".((!isset($this->fk_default_bom) || $this->fk_default_bom < 0 || $this->fk_default_bom == '') ? \"null\" : (int) $this->fk_default_bom);\n\t\t\t$sql .= \", net_measure = \".($this->net_measure != '' ? \"'\".$this->db->escape($this->net_measure).\"'\" : 'null');\n\t\t\t$sql .= \", net_measure_units = \".($this->net_measure_units != '' ? \"'\".$this->db->escape($this->net_measure_units).\"'\" : 'null');\n\t\t\t$sql .= \", weight = \".($this->weight != '' ? \"'\".$this->db->escape($this->weight).\"'\" : 'null');\n\t\t\t$sql .= \", weight_units = \".($this->weight_units != '' ? \"'\".$this->db->escape($this->weight_units).\"'\" : 'null');\n\t\t\t$sql .= \", length = \".($this->length != '' ? \"'\".$this->db->escape($this->length).\"'\" : 'null');\n\t\t\t$sql .= \", length_units = \".($this->length_units != '' ? \"'\".$this->db->escape($this->length_units).\"'\" : 'null');\n\t\t\t$sql .= \", width= \".($this->width != '' ? \"'\".$this->db->escape($this->width).\"'\" : 'null');\n\t\t\t$sql .= \", width_units = \".($this->width_units != '' ? \"'\".$this->db->escape($this->width_units).\"'\" : 'null');\n\t\t\t$sql .= \", height = \".($this->height != '' ? \"'\".$this->db->escape($this->height).\"'\" : 'null');\n\t\t\t$sql .= \", height_units = \".($this->height_units != '' ? \"'\".$this->db->escape($this->height_units).\"'\" : 'null');\n\t\t\t$sql .= \", surface = \".($this->surface != '' ? \"'\".$this->db->escape($this->surface).\"'\" : 'null');\n\t\t\t$sql .= \", surface_units = \".($this->surface_units != '' ? \"'\".$this->db->escape($this->surface_units).\"'\" : 'null');\n\t\t\t$sql .= \", volume = \".($this->volume != '' ? \"'\".$this->db->escape($this->volume).\"'\" : 'null');\n\t\t\t$sql .= \", volume_units = \".($this->volume_units != '' ? \"'\".$this->db->escape($this->volume_units).\"'\" : 'null');\n\t\t\t$sql .= \", fk_default_warehouse = \".($this->fk_default_warehouse > 0 ? $this->db->escape($this->fk_default_warehouse) : 'null');\n\t\t\t$sql .= \", seuil_stock_alerte = \".((isset($this->seuil_stock_alerte) && is_numeric($this->seuil_stock_alerte)) ? (float) $this->seuil_stock_alerte : 'null');\n\t\t\t$sql .= \", description = '\".$this->db->escape($this->description).\"'\";\n\t\t\t$sql .= \", url = \".($this->url ? \"'\".$this->db->escape($this->url).\"'\" : 'null');\n\t\t\t$sql .= \", customcode = '\".$this->db->escape($this->customcode).\"'\";\n\t\t\t$sql .= \", fk_country = \".($this->country_id > 0 ? (int) $this->country_id : 'null');\n\t\t\t$sql .= \", fk_state = \".($this->state_id > 0 ? (int) $this->state_id : 'null');\n\t\t\t$sql .= \", lifetime = \".($this->lifetime > 0 ? (int) $this->lifetime : 'null');\n\t\t\t$sql .= \", qc_frequency = \".($this->qc_frequency > 0 ? (int) $this->qc_frequency : 'null');\n\t\t\t$sql .= \", note = \".(isset($this->note) ? \"'\".$this->db->escape($this->note).\"'\" : 'null');\n\t\t\t$sql .= \", duration = '\".$this->db->escape($this->duration_value.$this->duration_unit).\"'\";\n\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t$sql .= \", accountancy_code_buy = '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_buy_intra = '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_buy_export = '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell= '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell_intra= '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell_export= '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t}\n\t\t\t$sql .= \", desiredstock = \".((isset($this->desiredstock) && is_numeric($this->desiredstock)) ? (float) $this->desiredstock : \"null\");\n\t\t\t$sql .= \", cost_price = \".($this->cost_price != '' ? $this->db->escape($this->cost_price) : 'null');\n\t\t\t$sql .= \", fk_unit= \".(!$this->fk_unit ? 'NULL' : (int) $this->fk_unit);\n\t\t\t$sql .= \", price_autogen = \".(!$this->price_autogen ? 0 : 1);\n\t\t\t$sql .= \", fk_price_expression = \".($this->fk_price_expression != 0 ? (int) $this->fk_price_expression : 'NULL');\n\t\t\t$sql .= \", fk_user_modif = \".($user->id > 0 ? $user->id : 'NULL');\n\t\t\t$sql .= \", mandatory_period = \".($this->mandatory_period );\n\t\t\t// stock field is not here because it is a denormalized value from product_stock.\n\t\t\t$sql .= \" WHERE rowid = \".((int) $id);\n\n\t\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$this->id = $id;\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\t\tif ($this->setMultiLangs($user) < 0) {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t\treturn -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$action = 'update';\n\n\t\t\t\t// update accountancy for this entity\n\t\t\t\tif (!$error && !empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t$this->db->query(\"DELETE FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \" . ((int) $this->id) . \" AND entity = \" . ((int) $conf->entity));\n\n\t\t\t\t\t$sql = \"INSERT INTO \" . MAIN_DB_PREFIX . \"product_perentity (\";\n\t\t\t\t\t$sql .= \" fk_product\";\n\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t$sql .= $this->id;\n\t\t\t\t\t$sql .= \", \" . $conf->entity;\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error = 'ErrorFailedToUpdateAccountancyForEntity';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Actions on extra fields\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t\t// Call trigger\n\t\t\t\t\t$result = $this->call_trigger('PRODUCT_MODIFY', $user);\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t// End call triggers\n\t\t\t\t}\n\n\t\t\t\tif (!$error && (is_object($this->oldcopy) && $this->oldcopy->ref !== $this->ref)) {\n\t\t\t\t\t// We remove directory\n\t\t\t\t\tif ($conf->product->dir_output) {\n\t\t\t\t\t\t$olddir = $conf->product->dir_output.\"/\".dol_sanitizeFileName($this->oldcopy->ref);\n\t\t\t\t\t\t$newdir = $conf->product->dir_output.\"/\".dol_sanitizeFileName($this->ref);\n\t\t\t\t\t\tif (file_exists($olddir)) {\n\t\t\t\t\t\t\t//include_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\t\t\t\t\t\t\t//$res = dol_move($olddir, $newdir);\n\t\t\t\t\t\t\t// do not use dol_move with directory\n\t\t\t\t\t\t\t$res = @rename($olddir, $newdir);\n\t\t\t\t\t\t\tif (!$res) {\n\t\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\t\t$this->error = $langs->trans('ErrorFailToRenameDir', $olddir, $newdir);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\tif (!empty($conf->variants->enabled)) {\n\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\n\t\t\t\t\t\t$comb = new ProductCombination($this->db);\n\n\t\t\t\t\t\tforeach ($comb->fetchAllByFkProductParent($this->id) as $currcomb) {\n\t\t\t\t\t\t\t$currcomb->updateProperties($this, $user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -$error;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($this->db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\tif (empty($conf->barcode->enabled) || empty($this->barcode)) {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductAlreadyExists\", $this->ref);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductBarCodeAlreadyExists\", $this->barcode);\n\t\t\t\t\t}\n\t\t\t\t\t$this->errors[] = $this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t$this->errors[] = $this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Update fails verify \".join(',', $this->errors), LOG_WARNING);\n\t\t\treturn -3;\n\t\t}\n\t}\n\n\t/**\n\t *  Delete a product from database (if not used)\n\t *\n\t * @param  User $user      User (object) deleting product\n\t * @param  int  $notrigger Do not execute trigger\n\t * @return int                    < 0 if KO, 0 = Not possible, > 0 if OK\n\t */\n\tpublic function delete(User $user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif (empty($this->id)) {\n\t\t\t$this->error = \"Object must be fetched before calling delete\";\n\t\t\treturn -1;\n\t\t}\n\t\tif (($this->type == Product::TYPE_PRODUCT && empty($user->rights->produit->supprimer)) || ($this->type == Product::TYPE_SERVICE && empty($user->rights->service->supprimer))) {\n\t\t\t$this->error = \"ErrorForbidden\";\n\t\t\treturn 0;\n\t\t}\n\n\t\t$objectisused = $this->isObjectUsed($this->id);\n\t\tif (empty($objectisused)) {\n\t\t\t$this->db->begin();\n\n\t\t\tif (!$error && empty($notrigger)) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_DELETE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\t// Delete from product_batch on product delete\n\t\t\tif (!$error) {\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.'product_batch';\n\t\t\t\t$sql .= \" WHERE fk_product_stock IN (\";\n\t\t\t\t$sql .= \"SELECT rowid FROM \".MAIN_DB_PREFIX.'product_stock';\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id).\")\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (!$result) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete all child tables\n\t\t\tif (!$error) {\n\t\t\t\t$elements = array('product_fournisseur_price', 'product_price', 'product_lang', 'categorie_product', 'product_stock', 'product_customer_price', 'product_lot'); // product_batch is done before\n\t\t\t\tforeach ($elements as $table) {\n\t\t\t\t\tif (!$error) {\n\t\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.$table;\n\t\t\t\t\t\t$sql .= \" WHERE fk_product = \".(int) $this->id;\n\n\t\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination2ValuePair.class.php';\n\n\t\t\t\t//If it is a parent product, then we remove the association with child products\n\t\t\t\t$prodcomb = new ProductCombination($this->db);\n\n\t\t\t\tif ($prodcomb->deleteByFkProductParent($user, $this->id) < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting combinations';\n\t\t\t\t}\n\n\t\t\t\t//We also check if it is a child product\n\t\t\t\tif (!$error && ($prodcomb->fetchByFkProductChild($this->id) > 0) && ($prodcomb->delete($user) < 0)) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting child combination';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete from product_association\n\t\t\tif (!$error) {\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql .= \" WHERE fk_product_pere = \".(int) $this->id.\" OR fk_product_fils = \".(int) $this->id;\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (!$result) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove extrafields\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->deleteExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete product\n\t\t\tif (!$error) {\n\t\t\t\t$sqlz = \"DELETE FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t\t$sqlz .= \" WHERE rowid = \".(int) $this->id;\n\n\t\t\t\t$resultz = $this->db->query($sqlz);\n\t\t\t\tif (!$resultz) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t// We remove directory\n\t\t\t\t$ref = dol_sanitizeFileName($this->ref);\n\t\t\t\tif ($conf->product->dir_output) {\n\t\t\t\t\t$dir = $conf->product->dir_output.\"/\".$ref;\n\t\t\t\t\tif (file_exists($dir)) {\n\t\t\t\t\t\t$res = @dol_delete_dir_recursive($dir);\n\t\t\t\t\t\tif (!$res) {\n\t\t\t\t\t\t\t$this->errors[] = 'ErrorFailToDeleteDir';\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tforeach ($this->errors as $errmsg) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t\t$this->error .= ($this->error ? ', '.$errmsg : $errmsg);\n\t\t\t\t}\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = \"ErrorRecordIsUsedCantDelete\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *    Update or add a translation for a product\n\t *\n\t * @param  User $user Object user making update\n\t * @return int        <0 if KO, >0 if OK\n\t */\n\tpublic function setMultiLangs($user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs_available = $langs->get_available_languages(DOL_DOCUMENT_ROOT, 0, 2);\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\tforeach ($langs_available as $key => $value) {\n\t\t\tif ($key == $current_lang) {\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t$sql .= \" AND lang = '\".$this->db->escape($key).\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) { // if there is already a description line for this language\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2 .= \" SET \";\n\t\t\t\t\t$sql2 .= \" label='\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2 .= \" description='\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note='\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($key).\"'\";\n\t\t\t\t} else {\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t\t$sql2 .= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2 .= \" '\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", '\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t}\n\t\t\t\tdol_syslog(get_class($this).'::setMultiLangs key = current_lang = '.$key);\n\t\t\t\tif (!$this->db->query($sql2)) {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} elseif (isset($this->multilangs[$key])) {\n\t\t\t\tif (empty($this->multilangs[\"$key\"][\"label\"])) {\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Label\"));\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t$sql .= \" AND lang = '\".$this->db->escape($key).\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) { // if there is already a description line for this language\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2 .= \" SET \";\n\t\t\t\t\t$sql2 .= \" label = '\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2 .= \" description = '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note = '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($key).\"'\";\n\t\t\t\t} else {\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t\t$sql2 .= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2 .= \" '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t}\n\n\t\t\t\t// We do not save if main fields are empty\n\t\t\t\tif ($this->multilangs[\"$key\"][\"label\"] || $this->multilangs[\"$key\"][\"description\"]) {\n\t\t\t\t\tif (!$this->db->query($sql2)) {\n\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// language is not current language and we didn't provide a multilang description for this language\n\t\t\t}\n\t\t}\n\n\t\t// Call trigger\n\t\t$result = $this->call_trigger('PRODUCT_SET_MULTILANGS', $user);\n\t\tif ($result < 0) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\t// End call triggers\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *    Delete a language for this product\n\t *\n\t * @param string $langtodelete Language code to delete\n\t * @param User   $user         Object user making delete\n\t *\n\t * @return int                            <0 if KO, >0 if OK\n\t */\n\tpublic function delMultiLangs($langtodelete, $user)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($langtodelete).\"'\";\n\n\t\tdol_syslog(get_class($this).'::delMultiLangs', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_DEL_MULTILANGS', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets an accountancy code for a product.\n\t * Also calls PRODUCT_MODIFY trigger when modified\n\t *\n\t * @param \tstring $type \tIt can be 'buy', 'buy_intra', 'buy_export', 'sell', 'sell_intra' or 'sell_export'\n\t * @param \tstring $value \tAccountancy code\n\t * @return \tint \t\t\t<0 KO >0 OK\n\t */\n\tpublic function setAccountancyCode($type, $value)\n\t{\n\t\tglobal $user, $langs, $conf;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\tif ($type == 'buy') {\n\t\t\t$field = 'accountancy_code_buy';\n\t\t} elseif ($type == 'buy_intra') {\n\t\t\t$field = 'accountancy_code_buy_intra';\n\t\t} elseif ($type == 'buy_export') {\n\t\t\t$field = 'accountancy_code_buy_export';\n\t\t} elseif ($type == 'sell') {\n\t\t\t$field = 'accountancy_code_sell';\n\t\t} elseif ($type == 'sell_intra') {\n\t\t\t$field = 'accountancy_code_sell_intra';\n\t\t} elseif ($type == 'sell_export') {\n\t\t\t$field = 'accountancy_code_sell_export';\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET \";\n\t\t$sql .= \"$field = '\".$this->db->escape($value).\"'\";\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\n\t\tdol_syslog(__METHOD__.\"\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\n\t\tif ($resql) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\tif ($error) {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t$this->$field = $value;\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *    Load array this->multilangs\n\t *\n\t * @return int        <0 if KO, >0 if OK\n\t */\n\tpublic function getMultiLangs()\n\t{\n\t\tglobal $langs;\n\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\t$sql = \"SELECT lang, label, description, note as other\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\twhile ($obj = $this->db->fetch_object($result)) {\n\t\t\t\t//print 'lang='.$obj->lang.' current='.$current_lang.'<br>';\n\t\t\t\tif ($obj->lang == $current_lang) {  // si on a les traduct. dans la langue courante on les charge en infos principales.\n\t\t\t\t\t$this->label        = $obj->label;\n\t\t\t\t\t$this->description = $obj->description;\n\t\t\t\t\t$this->other        = $obj->other;\n\t\t\t\t}\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"label\"]        = $obj->label;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"description\"] = $obj->description;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"other\"]        = $obj->other;\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = \"Error: \".$this->db->lasterror().\" - \".$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  used to check if price have really change to avoid log pollution\n\t *\n\t * @param  int  $level price level to change\n\t * @return array\n\t */\n\tprivate function getArrayForPriceCompare($level = 0)\n\t{\n\n\t\t$testExit = array('multiprices','multiprices_ttc','multiprices_base_type','multiprices_min','multiprices_min_ttc','multiprices_tva_tx','multiprices_recuperableonly');\n\n\t\tforeach ($testExit as $field) {\n\t\t\tif (!isset($this->$field[$level])) {\n\t\t\t\treturn array();\n\t\t\t}\n\t\t}\n\n\t\t$lastPrice = array(\n\t\t\t'level' => $level ? $level : 1,\n\t\t\t'multiprices' => doubleval($this->multiprices[$level]),\n\t\t\t'multiprices_ttc' => doubleval($this->multiprices_ttc[$level]),\n\t\t\t'multiprices_base_type' => $this->multiprices_base_type[$level],\n\t\t\t'multiprices_min' => doubleval($this->multiprices_min[$level]),\n\t\t\t'multiprices_min_ttc' => doubleval($this->multiprices_min_ttc[$level]),\n\t\t\t'multiprices_tva_tx' => doubleval($this->multiprices_tva_tx[$level]),\n\t\t\t'multiprices_recuperableonly' => doubleval($this->multiprices_recuperableonly[$level]),\n\t\t);\n\n\t\treturn $lastPrice;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Insert a track that we changed a customer price\n\t *\n\t * @param  User $user  User making change\n\t * @param  int  $level price level to change\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tprivate function _log_price($user, $level = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$now = dol_now();\n\n\t\t// Clean parameters\n\t\tif (empty($this->price_by_qty)) {\n\t\t\t$this->price_by_qty = 0;\n\t\t}\n\n\t\t// Add new price\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price(price_level,date_price, fk_product, fk_user_author, price, price_ttc, price_base_type,tosell, tva_tx, default_vat_code, recuperableonly,\";\n\t\t$sql .= \" localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, price_min,price_min_ttc,price_by_qty,entity,fk_price_expression) \";\n\t\t$sql .= \" VALUES(\".($level ? ((int) $level) : 1).\", '\".$this->db->idate($now).\"', \".((int) $this->id).\", \".((int) $user->id).\", \".((float) price2num($this->price)).\", \".((float) price2num($this->price_ttc)).\",'\".$this->db->escape($this->price_base_type).\"',\".((int) $this->status).\", \".((float) price2num($this->tva_tx)).\", \".($this->default_vat_code ? (\"'\".$this->db->escape($this->default_vat_code).\"'\") : \"null\").\", \".((int) $this->tva_npr).\",\";\n\t\t$sql .= \" \".price2num($this->localtax1_tx).\", \".price2num($this->localtax2_tx).\", '\".$this->db->escape($this->localtax1_type).\"', '\".$this->db->escape($this->localtax2_type).\"', \".price2num($this->price_min).\", \".price2num($this->price_min_ttc).\", \".price2num($this->price_by_qty).\", \".((int) $conf->entity).\",\".($this->fk_price_expression > 0 ? ((int) $this->fk_price_expression) : 'null');\n\t\t$sql .= \")\";\n\n\t\tdol_syslog(get_class($this).\"::_log_price\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Delete a price line\n\t *\n\t * @param  User $user  Object user\n\t * @param  int  $rowid Line id to delete\n\t * @return int                <0 if KO, >0 if OK\n\t */\n\tpublic function log_price_delete($user, $rowid)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t$sql .= \" WHERE fk_product_price = \".((int) $rowid);\n\t\t$resql = $this->db->query($sql);\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql .= \" WHERE rowid=\".((int) $rowid);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Return price of sell of a product for a seller/buyer/product.\n\t *\n\t * @param\tSociete\t\t$thirdparty_seller\t\tSeller\n\t * @param\tSociete\t\t$thirdparty_buyer\t\tBuyer\n\t * @param\tint\t\t\t$pqp\t\t\t\t\tId of product price per quantity if a selection was done of such a price\n\t * @return\tarray\t\t\t\t\t\t\t\tArray of price information array('pu_ht'=> , 'pu_ttc'=> , 'tva_tx'=>'X.Y (code)', ...), 'tva_npr'=>0, ...)\n\t * @see get_buyprice(), find_min_price_product_fournisseur()\n\t */\n\tpublic function getSellPrice($thirdparty_seller, $thirdparty_buyer, $pqp = 0)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t// Update if prices fields are defined\n\t\t$tva_tx = get_default_tva($thirdparty_seller, $thirdparty_buyer, $this->id);\n\t\t$tva_npr = get_default_npr($thirdparty_seller, $thirdparty_buyer, $this->id);\n\t\tif (empty($tva_tx)) {\n\t\t\t$tva_npr = 0;\n\t\t}\n\n\t\t$pu_ht = $this->price;\n\t\t$pu_ttc = $this->price_ttc;\n\t\t$price_min = $this->price_min;\n\t\t$price_base_type = $this->price_base_type;\n\n\t\t// If price per segment\n\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES) && !empty($thirdparty_buyer->price_level)) {\n\t\t\t$pu_ht = $this->multiprices[$thirdparty_buyer->price_level];\n\t\t\t$pu_ttc = $this->multiprices_ttc[$thirdparty_buyer->price_level];\n\t\t\t$price_min = $this->multiprices_min[$thirdparty_buyer->price_level];\n\t\t\t$price_base_type = $this->multiprices_base_type[$thirdparty_buyer->price_level];\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL)) {  // using this option is a bug. kept for backward compatibility\n\t\t\t\tif (isset($this->multiprices_tva_tx[$thirdparty_buyer->price_level])) {\n\t\t\t\t\t$tva_tx = $this->multiprices_tva_tx[$thirdparty_buyer->price_level];\n\t\t\t\t}\n\t\t\t\tif (isset($this->multiprices_recuperableonly[$thirdparty_buyer->price_level])) {\n\t\t\t\t\t$tva_npr = $this->multiprices_recuperableonly[$thirdparty_buyer->price_level];\n\t\t\t\t}\n\t\t\t\tif (empty($tva_tx)) {\n\t\t\t\t\t$tva_npr = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES)) {\n\t\t\t// If price per customer\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/productcustomerprice.class.php';\n\n\t\t\t$prodcustprice = new Productcustomerprice($this->db);\n\n\t\t\t$filter = array('t.fk_product' => $this->id, 't.fk_soc' => $thirdparty_buyer->id);\n\n\t\t\t$result = $prodcustprice->fetch_all('', '', 0, 0, $filter);\n\t\t\tif ($result) {\n\t\t\t\tif (count($prodcustprice->lines) > 0) {\n\t\t\t\t\t$pu_ht = price($prodcustprice->lines[0]->price);\n\t\t\t\t\t$price_min = price($prodcustprice->lines[0]->price_min);\n\t\t\t\t\t$pu_ttc = price($prodcustprice->lines[0]->price_ttc);\n\t\t\t\t\t$price_base_type = $prodcustprice->lines[0]->price_base_type;\n\t\t\t\t\t$tva_tx = $prodcustprice->lines[0]->tva_tx;\n\t\t\t\t\tif ($prodcustprice->lines[0]->default_vat_code && !preg_match('/\\(.*\\)/', $tva_tx)) {\n\t\t\t\t\t\t$tva_tx .= ' ('.$prodcustprice->lines[0]->default_vat_code.')';\n\t\t\t\t\t}\n\t\t\t\t\t$tva_npr = $prodcustprice->lines[0]->recuperableonly;\n\t\t\t\t\tif (empty($tva_tx)) {\n\t\t\t\t\t\t$tva_npr = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY)) {\n\t\t\t// If price per quantity\n\t\t\tif ($this->prices_by_qty[0]) {\n\t\t\t\t// yes, this product has some prices per quantity\n\t\t\t\t// Search price into product_price_by_qty from $this->id\n\t\t\t\tforeach ($this->prices_by_qty_list[0] as $priceforthequantityarray) {\n\t\t\t\t\tif ($priceforthequantityarray['rowid'] != $pqp) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// We found the price\n\t\t\t\t\tif ($priceforthequantityarray['price_base_type'] == 'HT') {\n\t\t\t\t\t\t$pu_ht = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$pu_ttc = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) {\n\t\t\t// If price per quantity and customer\n\t\t\tif ($this->prices_by_qty[$thirdparty_buyer->price_level]) {\n\t\t\t\t// yes, this product has some prices per quantity\n\t\t\t\t// Search price into product_price_by_qty from $this->id\n\t\t\t\tforeach ($this->prices_by_qty_list[$thirdparty_buyer->price_level] as $priceforthequantityarray) {\n\t\t\t\t\tif ($priceforthequantityarray['rowid'] != $pqp) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// We found the price\n\t\t\t\t\tif ($priceforthequantityarray['price_base_type'] == 'HT') {\n\t\t\t\t\t\t$pu_ht = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$pu_ttc = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn array('pu_ht'=>$pu_ht, 'pu_ttc'=>$pu_ttc, 'price_min'=>$price_min, 'price_base_type'=>$price_base_type, 'tva_tx'=>$tva_tx, 'tva_npr'=>$tva_npr);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Read price used by a provider.\n\t * We enter as input couple prodfournprice/qty or triplet qty/product_id/fourn_ref.\n\t * This also set some properties on product like ->buyprice, ->fourn_pu, ...\n\t *\n\t * @param  int    $prodfournprice Id du tarif = rowid table product_fournisseur_price\n\t * @param  double $qty            Quantity asked or -1 to get first entry found\n\t * @param  int    $product_id     Filter on a particular product id\n\t * @param  string $fourn_ref      Filter on a supplier price ref. 'none' to exclude ref in search.\n\t * @param  int    $fk_soc         If of supplier\n\t * @return int                    <-1 if KO, -1 if qty not enough, 0 if OK but nothing found, id_product if OK and found. May also initialize some properties like (->ref_supplier, buyprice, fourn_pu, vatrate_supplier...)\n\t * @see getSellPrice(), find_min_price_product_fournisseur()\n\t */\n\tpublic function get_buyprice($prodfournprice, $qty, $product_id = 0, $fourn_ref = '', $fk_soc = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\t$result = 0;\n\n\t\t// We do a first seach with a select by searching with couple prodfournprice and qty only (later we will search on triplet qty/product_id/fourn_ref)\n\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent,\";\n\t\t$sql .= \" pfp.fk_product, pfp.ref_fourn, pfp.desc_fourn, pfp.fk_soc, pfp.tva_tx, pfp.fk_supplier_price_expression,\";\n\t\t$sql .= \" pfp.default_vat_code,\";\n\t\t$sql .= \" pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t$sql .= \", pfp.packaging\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t$sql .= \" WHERE pfp.rowid = \".((int) $prodfournprice);\n\t\tif ($qty > 0) {\n\t\t\t$sql .= \" AND pfp.quantity <= \".((float) $qty);\n\t\t}\n\t\t$sql .= \" ORDER BY pfp.quantity DESC\";\n\n\t\tdol_syslog(get_class($this).\"::get_buyprice first search by prodfournprice/qty\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj && $obj->quantity > 0) {        // If we found a supplier prices from the id of supplier price\n\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression)) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t$prod_supplier = new ProductFournisseur($this->db);\n\t\t\t\t\t$prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t$prod_supplier->id = $obj->fk_product;\n\t\t\t\t\t$prod_supplier->fourn_qty = $obj->quantity;\n\t\t\t\t\t$prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t\t\t\t$prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t$price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t\t\t\tif ($price_result >= 0) {\n\t\t\t\t\t\t$obj->price = $price_result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t$this->buyprice = $obj->price; // deprecated\n\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity; // Unit price of product of supplier\n\t\t\t\t$this->fourn_price_base_type = 'HT'; // Price base type\n\t\t\t\t$this->fourn_socid = $obj->fk_soc; // Company that offer this price\n\t\t\t\t$this->ref_fourn = $obj->ref_fourn; // deprecated\n\t\t\t\t$this->ref_supplier = $obj->ref_fourn; // Ref supplier\n\t\t\t\t$this->desc_supplier = $obj->desc_fourn; // desc supplier\n\t\t\t\t$this->remise_percent = $obj->remise_percent; // remise percent if present and not typed\n\t\t\t\t$this->vatrate_supplier = $obj->tva_tx; // Vat ref supplier\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code; // Vat code supplier\n\t\t\t\t$this->fourn_multicurrency_price       = $obj->multicurrency_price;\n\t\t\t\t$this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n\t\t\t\t$this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n\t\t\t\t$this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n\t\t\t\t$this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t\t\t$this->packaging = $obj->packaging;\n\t\t\t\t}\n\t\t\t\t$result = $obj->fk_product;\n\t\t\t\treturn $result;\n\t\t\t} else { // If not found\n\t\t\t\t// We do a second search by doing a select again but searching with less reliable criteria: couple qty/id product, and if set fourn_ref or fk_soc.\n\t\t\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent, pfp.fk_soc,\";\n\t\t\t\t$sql .= \" pfp.fk_product, pfp.ref_fourn as ref_supplier, pfp.desc_fourn as desc_supplier, pfp.tva_tx, pfp.fk_supplier_price_expression,\";\n\t\t\t\t$sql .= \" pfp.default_vat_code,\";\n\t\t\t\t$sql .= \" pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code,\";\n\t\t\t\t$sql .= \" pfp.packaging\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t\t\t$sql .= \" WHERE pfp.fk_product = \".((int) $product_id);\n\t\t\t\tif ($fourn_ref != 'none') {\n\t\t\t\t\t$sql .= \" AND pfp.ref_fourn = '\".$this->db->escape($fourn_ref).\"'\";\n\t\t\t\t}\n\t\t\t\tif ($fk_soc > 0) {\n\t\t\t\t\t$sql .= \" AND pfp.fk_soc = \".((int) $fk_soc);\n\t\t\t\t}\n\t\t\t\tif ($qty > 0) {\n\t\t\t\t\t$sql .= \" AND pfp.quantity <= \".((float) $qty);\n\t\t\t\t}\n\t\t\t\t$sql .= \" ORDER BY pfp.quantity DESC\";\n\t\t\t\t$sql .= \" LIMIT 1\";\n\n\t\t\t\tdol_syslog(get_class($this).\"::get_buyprice second search from qty/ref/product_id\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\tif ($obj && $obj->quantity > 0) {        // If found\n\t\t\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression)) {\n\t\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t\t\t$prod_supplier = new ProductFournisseur($this->db);\n\t\t\t\t\t\t\t$prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t\t$prod_supplier->id = $obj->fk_product;\n\t\t\t\t\t\t\t$prod_supplier->fourn_qty = $obj->quantity;\n\t\t\t\t\t\t\t$prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t\t\t\t\t\t$prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t\t\t$price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t\t\t$obj->price = $price_result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t$this->buyprice = $obj->price; // deprecated\n\t\t\t\t\t\t$this->fourn_qty = $obj->quantity; // min quantity for price for a virtual supplier\n\t\t\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity; // Unit price of product for a virtual supplier\n\t\t\t\t\t\t$this->fourn_price_base_type = 'HT'; // Price base type for a virtual supplier\n\t\t\t\t\t\t$this->fourn_socid = $obj->fk_soc; // Company that offer this price\n\t\t\t\t\t\t$this->ref_fourn = $obj->ref_supplier; // deprecated\n\t\t\t\t\t\t$this->ref_supplier = $obj->ref_supplier; // Ref supplier\n\t\t\t\t\t\t$this->desc_supplier = $obj->desc_supplier; // desc supplier\n\t\t\t\t\t\t$this->remise_percent = $obj->remise_percent; // remise percent if present and not typed\n\t\t\t\t\t\t$this->vatrate_supplier = $obj->tva_tx; // Vat ref supplier\n\t\t\t\t\t\t$this->default_vat_code = $obj->default_vat_code; // Vat code supplier\n\t\t\t\t\t\t$this->fourn_multicurrency_price       = $obj->multicurrency_price;\n\t\t\t\t\t\t$this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n\t\t\t\t\t\t$this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n\t\t\t\t\t\t$this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n\t\t\t\t\t\t$this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t\t\t\t\t$this->packaging = $obj->packaging;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$result = $obj->fk_product;\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn -1; // Ce produit n'existe pas avec cet id tarif fournisseur ou existe mais qte insuffisante, ni pour le couple produit/ref fournisseur dans la quantit\u00e9.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t * Modify customer price of a product/Service\n\t *\n\t * @param  double $newprice          New price\n\t * @param  string $newpricebase      HT or TTC\n\t * @param  User   $user              Object user that make change\n\t * @param  double $newvat            New VAT Rate (For example 8.5. Should not be a string)\n\t * @param  double $newminprice       New price min\n\t * @param  int    $level             0=standard, >0 = level if multilevel prices\n\t * @param  int    $newnpr            0=Standard vat rate, 1=Special vat rate for French NPR VAT\n\t * @param  int    $newpbq            1 if it has price by quantity\n\t * @param  int    $ignore_autogen    Used to avoid infinite loops\n\t * @param  array  $localtaxes_array  Array with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).\n\t * @param  string $newdefaultvatcode Default vat code\n\t * @return int                            <0 if KO, >0 if OK\n\t */\n\tpublic function updatePrice($newprice, $newpricebase, $user, $newvat = '', $newminprice = 0, $level = 0, $newnpr = 0, $newpbq = 0, $ignore_autogen = 0, $localtaxes_array = array(), $newdefaultvatcode = '')\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$lastPriceData = $this->getArrayForPriceCompare($level); // temporary store current price before update\n\n\t\t$id = $this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_price id=\".$id.\" newprice=\".$newprice.\" newpricebase=\".$newpricebase.\" newminprice=\".$newminprice.\" level=\".$level.\" npr=\".$newnpr.\" newdefaultvatcode=\".$newdefaultvatcode);\n\n\t\t// Clean parameters\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($newnpr)) {\n\t\t\t$newnpr = 0;\n\t\t}\n\t\tif (empty($newminprice)) {\n\t\t\t$newminprice = 0;\n\t\t}\n\t\tif (empty($newminprice)) {\n\t\t\t$newminprice = 0;\n\t\t}\n\n\t\t// Check parameters\n\t\tif ($newvat == '') {\n\t\t\t$newvat = $this->tva_tx;\n\t\t}\n\n\t\t// If multiprices are enabled, then we check if the current product is subject to price autogeneration\n\t\t// Price will be modified ONLY when the first one is the one that is being modified\n\t\tif ((!empty($conf->global->PRODUIT_MULTIPRICES) || !empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) && !$ignore_autogen && $this->price_autogen && ($level == 1)) {\n\t\t\treturn $this->generateMultiprices($user, $newprice, $newpricebase, $newvat, $newnpr, $newpbq);\n\t\t}\n\n\t\tif (!empty($newminprice) && ($newminprice > $newprice)) {\n\t\t\t$this->error = 'ErrorPriceCantBeLowerThanMinPrice';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ($newprice !== '' || $newprice === 0) {\n\t\t\tif ($newpricebase == 'TTC') {\n\t\t\t\t$price_ttc = price2num($newprice, 'MU');\n\t\t\t\t$price = price2num($newprice) / (1 + ($newvat / 100));\n\t\t\t\t$price = price2num($price, 'MU');\n\n\t\t\t\tif ($newminprice != '' || $newminprice == 0) {\n\t\t\t\t\t$price_min_ttc = price2num($newminprice, 'MU');\n\t\t\t\t\t$price_min = price2num($newminprice) / (1 + ($newvat / 100));\n\t\t\t\t\t$price_min = price2num($price_min, 'MU');\n\t\t\t\t} else {\n\t\t\t\t\t$price_min = 0;\n\t\t\t\t\t$price_min_ttc = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$price = price2num($newprice, 'MU');\n\t\t\t\t$price_ttc = ($newnpr != 1) ? price2num($newprice) * (1 + ($newvat / 100)) : $price;\n\t\t\t\t$price_ttc = price2num($price_ttc, 'MU');\n\n\t\t\t\tif ($newminprice !== '' || $newminprice === 0) {\n\t\t\t\t\t$price_min = price2num($newminprice, 'MU');\n\t\t\t\t\t$price_min_ttc = price2num($newminprice) * (1 + ($newvat / 100));\n\t\t\t\t\t$price_min_ttc = price2num($price_min_ttc, 'MU');\n\t\t\t\t\t//print 'X'.$newminprice.'-'.$price_min;\n\t\t\t\t} else {\n\t\t\t\t\t$price_min = 0;\n\t\t\t\t\t$price_min_ttc = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//print 'x'.$id.'-'.$newprice.'-'.$newpricebase.'-'.$price.'-'.$price_ttc.'-'.$price_min.'-'.$price_min_ttc;\n\n\t\t\tif (count($localtaxes_array) > 0) {\n\t\t\t\t$localtaxtype1 = $localtaxes_array['0'];\n\t\t\t\t$localtax1 = $localtaxes_array['1'];\n\t\t\t\t$localtaxtype2 = $localtaxes_array['2'];\n\t\t\t\t$localtax2 = $localtaxes_array['3'];\n\t\t\t} else // old method. deprecated because ot can't retrieve type\n\t\t\t{\n\t\t\t\t$localtaxtype1 = '0';\n\t\t\t\t$localtax1 = get_localtax($newvat, 1);\n\t\t\t\t$localtaxtype2 = '0';\n\t\t\t\t$localtax2 = get_localtax($newvat, 2);\n\t\t\t}\n\t\t\tif (empty($localtax1)) {\n\t\t\t\t$localtax1 = 0; // If = '' then = 0\n\t\t\t}\n\t\t\tif (empty($localtax2)) {\n\t\t\t\t$localtax2 = 0; // If = '' then = 0\n\t\t\t}\n\n\t\t\t$this->db->begin();\n\n\t\t\t// Ne pas mettre de quote sur les numeriques decimaux.\n\t\t\t// Ceci provoque des stockages avec arrondis en base au lieu des valeurs exactes.\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product SET\";\n\t\t\t$sql .= \" price_base_type='\".$this->db->escape($newpricebase).\"',\";\n\t\t\t$sql .= \" price=\".$price.\",\";\n\t\t\t$sql .= \" price_ttc=\".$price_ttc.\",\";\n\t\t\t$sql .= \" price_min=\".$price_min.\",\";\n\t\t\t$sql .= \" price_min_ttc=\".$price_min_ttc.\",\";\n\t\t\t$sql .= \" localtax1_tx=\".($localtax1 >= 0 ? $localtax1 : 'NULL').\",\";\n\t\t\t$sql .= \" localtax2_tx=\".($localtax2 >= 0 ? $localtax2 : 'NULL').\",\";\n\t\t\t$sql .= \" localtax1_type=\".($localtaxtype1 != '' ? \"'\".$this->db->escape($localtaxtype1).\"'\" : \"'0'\").\",\";\n\t\t\t$sql .= \" localtax2_type=\".($localtaxtype2 != '' ? \"'\".$this->db->escape($localtaxtype2).\"'\" : \"'0'\").\",\";\n\t\t\t$sql .= \" default_vat_code=\".($newdefaultvatcode ? \"'\".$this->db->escape($newdefaultvatcode).\"'\" : \"null\").\",\";\n\t\t\t$sql .= \" tva_tx='\".price2num($newvat).\"',\";\n\t\t\t$sql .= \" recuperableonly='\".$this->db->escape($newnpr).\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".((int) $id);\n\n\t\t\tdol_syslog(get_class($this).\"::update_price\", LOG_DEBUG);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$this->multiprices[$level] = $price;\n\t\t\t\t$this->multiprices_ttc[$level] = $price_ttc;\n\t\t\t\t$this->multiprices_min[$level] = $price_min;\n\t\t\t\t$this->multiprices_min_ttc[$level] = $price_min_ttc;\n\t\t\t\t$this->multiprices_base_type[$level] = $newpricebase;\n\t\t\t\t$this->multiprices_default_vat_code[$level] = $newdefaultvatcode;\n\t\t\t\t$this->multiprices_tva_tx[$level] = $newvat;\n\t\t\t\t$this->multiprices_recuperableonly[$level] = $newnpr;\n\n\t\t\t\t$this->price = $price;\n\t\t\t\t$this->price_ttc = $price_ttc;\n\t\t\t\t$this->price_min = $price_min;\n\t\t\t\t$this->price_min_ttc = $price_min_ttc;\n\t\t\t\t$this->price_base_type = $newpricebase;\n\t\t\t\t$this->default_vat_code = $newdefaultvatcode;\n\t\t\t\t$this->tva_tx = $newvat;\n\t\t\t\t$this->tva_npr = $newnpr;\n\t\t\t\t//Local taxes\n\t\t\t\t$this->localtax1_tx = $localtax1;\n\t\t\t\t$this->localtax2_tx = $localtax2;\n\t\t\t\t$this->localtax1_type = $localtaxtype1;\n\t\t\t\t$this->localtax2_type = $localtaxtype2;\n\n\t\t\t\t// Price by quantity\n\t\t\t\t$this->price_by_qty = $newpbq;\n\n\t\t\t\t// check if price have really change before log\n\t\t\t\t$newPriceData = $this->getArrayForPriceCompare($level);\n\t\t\t\tif (!empty(array_diff_assoc($newPriceData, $lastPriceData)) || empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\t\t$this->_log_price($user, $level); // Save price for level into table product_price\n\t\t\t\t}\n\n\t\t\t\t$this->level = $level; // Store level of price edited for trigger\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_PRICE_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Sets the supplier price expression\n\t *\n\t * @param      int $expression_id Expression\n\t * @return     int                     <0 if KO, >0 if OK\n\t * @deprecated Use Product::update instead\n\t */\n\tpublic function setPriceExpression($expression_id)\n\t{\n\t\tglobal $user;\n\n\t\t$this->fk_price_expression = $expression_id;\n\n\t\treturn $this->update($this->id, $user);\n\t}\n\n\t/**\n\t *  Load a product in memory from database\n\t *\n\t * @param  int    $id                Id of product/service to load\n\t * @param  string $ref               Ref of product/service to load\n\t * @param  string $ref_ext           Ref ext of product/service to load\n\t * @param  string $barcode           Barcode of product/service to load\n\t * @param  int    $ignore_expression When module dynamicprices is on, ignores the math expression for calculating price and uses the db value instead\n\t * @param  int    $ignore_price_load Load product without loading $this->multiprices... array (when we are sure we don't need them)\n\t * @param  int    $ignore_lang_load  Load product without loading $this->multilangs language arrays (when we are sure we don't need them)\n\t * @return int                       <0 if KO, 0 if not found, >0 if OK\n\t */\n\tpublic function fetch($id = '', $ref = '', $ref_ext = '', $barcode = '', $ignore_expression = 0, $ignore_price_load = 0, $ignore_lang_load = 0)\n\t{\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t\tglobal $langs, $conf;\n\n\t\tdol_syslog(get_class($this).\"::fetch id=\".$id.\" ref=\".$ref.\" ref_ext=\".$ref_ext);\n\n\t\t// Check parameters\n\t\tif (!$id && !$ref && !$ref_ext && !$barcode) {\n\t\t\t$this->error = 'ErrorWrongParameters';\n\t\t\tdol_syslog(get_class($this).\"::fetch \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT p.rowid, p.ref, p.ref_ext, p.label, p.description, p.url, p.note_public, p.note as note_private, p.customcode, p.fk_country, p.fk_state, p.lifetime, p.qc_frequency, p.price, p.price_ttc,\";\n\t\t$sql .= \" p.price_min, p.price_min_ttc, p.price_base_type, p.cost_price, p.default_vat_code, p.tva_tx, p.recuperableonly as tva_npr, p.localtax1_tx, p.localtax2_tx, p.localtax1_type, p.localtax2_type, p.tosell,\";\n\t\t$sql .= \" p.tobuy, p.fk_product_type, p.duration, p.fk_default_warehouse, p.seuil_stock_alerte, p.canvas, p.net_measure, p.net_measure_units, p.weight, p.weight_units,\";\n\t\t$sql .= \" p.length, p.length_units, p.width, p.width_units, p.height, p.height_units,\";\n\t\t$sql .= \" p.surface, p.surface_units, p.volume, p.volume_units, p.barcode, p.fk_barcode_type, p.finished, p.fk_default_bom, p.mandatory_period,\";\n\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t$sql .= \" p.accountancy_code_buy, p.accountancy_code_buy_intra, p.accountancy_code_buy_export, p.accountancy_code_sell, p.accountancy_code_sell_intra, p.accountancy_code_sell_export,\";\n\t\t} else {\n\t\t\t$sql .= \" ppe.accountancy_code_buy, ppe.accountancy_code_buy_intra, ppe.accountancy_code_buy_export, ppe.accountancy_code_sell, ppe.accountancy_code_sell_intra, ppe.accountancy_code_sell_export,\";\n\t\t}\n\n\t\t//For MultiCompany\n\t\t//PMP per entity & Stocks Sharings stock_reel includes only stocks shared with this entity\n\t\t$separatedEntityPMP = false;\t// Set to true to get the AWP from table llx_product_perentity instead of field 'pmp' into llx_product.\n\t\t$separatedStock = false;\t\t// Set to true will count stock from subtable llx_product_stock. It is slower than using denormalized field 'stock', but it is required when using multientity and shared warehouses.\n\t\tif (!empty($conf->global->MULTICOMPANY_PRODUCT_SHARING_ENABLED)) {\n\t\t\tif (!empty($conf->global->MULTICOMPANY_PMP_PER_ENTITY_ENABLED)) {\n\t\t\t\t$checkPMPPerEntity = $this->db->query(\"SELECT pmp FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \".((int) $id).\" AND entity = \".(int) $conf->entity);\n\t\t\t\tif ($this->db->num_rows($checkPMPPerEntity)>0) {\n\t\t\t\t\t$separatedEntityPMP = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tglobal $mc;\n\t\t\t$separatedStock = true;\n\t\t\t$visibleWarehousesEntities = $conf->entity;\n\t\t\tif (isset($mc->sharings['stock']) && !empty($mc->sharings['stock'])) {\n\t\t\t\t$visibleWarehousesEntities .= \",\" . implode(\",\", $mc->sharings['stock']);\n\t\t\t}\n\t\t}\n\t\tif ($separatedEntityPMP) {\n\t\t\t$sql .= \" ppe.pmp,\";\n\t\t} else {\n\t\t\t$sql .= \" p.pmp,\";\n\t\t}\n\t\t$sql .= \" p.datec, p.tms, p.import_key, p.entity, p.desiredstock, p.tobatch, p.batch_mask, p.fk_unit,\";\n\t\t$sql .= \" p.fk_price_expression, p.price_autogen, p.model_pdf,\";\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" SUM(sp.reel) as stock\";\n\t\t} else {\n\t\t\t$sql .= \" p.stock\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED) || $separatedEntityPMP) {\n\t\t\t$sql .= \" LEFT JOIN \" . MAIN_DB_PREFIX . \"product_perentity as ppe ON ppe.fk_product = p.rowid AND ppe.entity = \" . ((int) $conf->entity);\n\t\t}\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" LEFT JOIN \" . MAIN_DB_PREFIX . \"product_stock as sp ON sp.fk_product = p.rowid AND sp.fk_entrepot IN (SELECT rowid FROM \".MAIN_DB_PREFIX.\"entrepot WHERE entity IN (\".$this->db->sanitize($visibleWarehousesEntities).\"))\";\n\t\t}\n\n\t\tif ($id) {\n\t\t\t$sql .= \" WHERE p.rowid = \".((int) $id);\n\t\t} else {\n\t\t\t$sql .= \" WHERE p.entity IN (\".getEntity($this->element).\")\";\n\t\t\tif ($ref) {\n\t\t\t\t$sql .= \" AND p.ref = '\".$this->db->escape($ref).\"'\";\n\t\t\t} elseif ($ref_ext) {\n\t\t\t\t$sql .= \" AND p.ref_ext = '\".$this->db->escape($ref_ext).\"'\";\n\t\t\t} elseif ($barcode) {\n\t\t\t\t$sql .= \" AND p.barcode = '\".$this->db->escape($barcode).\"'\";\n\t\t\t}\n\t\t}\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" GROUP BY p.rowid, p.ref, p.ref_ext, p.label, p.description, p.url, p.note_public, p.note, p.customcode, p.fk_country, p.fk_state, p.lifetime, p.qc_frequency, p.price, p.price_ttc,\";\n\t\t\t$sql .= \" p.price_min, p.price_min_ttc, p.price_base_type, p.cost_price, p.default_vat_code, p.tva_tx, p.recuperableonly, p.localtax1_tx, p.localtax2_tx, p.localtax1_type, p.localtax2_type, p.tosell,\";\n\t\t\t$sql .= \" p.tobuy, p.fk_product_type, p.duration, p.fk_default_warehouse, p.seuil_stock_alerte, p.canvas, p.net_measure, p.net_measure_units, p.weight, p.weight_units,\";\n\t\t\t$sql .= \" p.length, p.length_units, p.width, p.width_units, p.height, p.height_units,\";\n\t\t\t$sql .= \" p.surface, p.surface_units, p.volume, p.volume_units, p.barcode, p.fk_barcode_type, p.finished,\";\n\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t$sql .= \" p.accountancy_code_buy, p.accountancy_code_buy_intra, p.accountancy_code_buy_export, p.accountancy_code_sell, p.accountancy_code_sell_intra, p.accountancy_code_sell_export,\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" ppe.accountancy_code_buy, ppe.accountancy_code_buy_intra, ppe.accountancy_code_buy_export, ppe.accountancy_code_sell, ppe.accountancy_code_sell_intra, ppe.accountancy_code_sell_export,\";\n\t\t\t}\n\t\t\tif ($separatedEntityPMP) {\n\t\t\t\t$sql .= \" ppe.pmp,\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" p.pmp,\";\n\t\t\t}\n\t\t\t$sql .= \" p.datec, p.tms, p.import_key, p.entity, p.desiredstock, p.tobatch, p.batch_mask, p.fk_unit,\";\n\t\t\t$sql .= \" p.fk_price_expression, p.price_autogen, p.model_pdf\";\n\t\t\tif (!$separatedStock) {\n\t\t\t\t$sql .= \", p.stock\";\n\t\t\t}\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tunset($this->oldcopy);\n\n\t\t\tif ($this->db->num_rows($resql) > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\t$this->ref                            = $obj->ref;\n\t\t\t\t$this->ref_ext                        = $obj->ref_ext;\n\t\t\t\t$this->label                          = $obj->label;\n\t\t\t\t$this->description                    = $obj->description;\n\t\t\t\t$this->url                            = $obj->url;\n\t\t\t\t$this->note_public                    = $obj->note_public;\n\t\t\t\t$this->note_private                   = $obj->note_private;\n\t\t\t\t$this->note                           = $obj->note_private; // deprecated\n\n\t\t\t\t$this->type                            = $obj->fk_product_type;\n\t\t\t\t$this->status                        = $obj->tosell;\n\t\t\t\t$this->status_buy                    = $obj->tobuy;\n\t\t\t\t$this->status_batch                    = $obj->tobatch;\n\t\t\t\t$this->batch_mask                    = $obj->batch_mask;\n\n\t\t\t\t$this->customcode                    = $obj->customcode;\n\t\t\t\t$this->country_id                    = $obj->fk_country;\n\t\t\t\t$this->country_code = getCountry($this->country_id, 2, $this->db);\n\t\t\t\t$this->state_id = $obj->fk_state;\n\t\t\t\t$this->lifetime                     = $obj->lifetime;\n\t\t\t\t$this->qc_frequency                 = $obj->qc_frequency;\n\t\t\t\t$this->price                        = $obj->price;\n\t\t\t\t$this->price_ttc                    = $obj->price_ttc;\n\t\t\t\t$this->price_min                    = $obj->price_min;\n\t\t\t\t$this->price_min_ttc                = $obj->price_min_ttc;\n\t\t\t\t$this->price_base_type = $obj->price_base_type;\n\t\t\t\t$this->cost_price                    = $obj->cost_price;\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code;\n\t\t\t\t$this->tva_tx                        = $obj->tva_tx;\n\t\t\t\t//! French VAT NPR\n\t\t\t\t$this->tva_npr                        = $obj->tva_npr;\n\t\t\t\t$this->recuperableonly                = $obj->tva_npr; // For backward compatibility\n\t\t\t\t//! Local taxes\n\t\t\t\t$this->localtax1_tx                    = $obj->localtax1_tx;\n\t\t\t\t$this->localtax2_tx                    = $obj->localtax2_tx;\n\t\t\t\t$this->localtax1_type                = $obj->localtax1_type;\n\t\t\t\t$this->localtax2_type                = $obj->localtax2_type;\n\n\t\t\t\t$this->finished                        = $obj->finished;\n\t\t\t\t$this->fk_default_bom                  = $obj->fk_default_bom;\n\n\t\t\t\t$this->duration                        = $obj->duration;\n\t\t\t\t$this->duration_value                = substr($obj->duration, 0, dol_strlen($obj->duration) - 1);\n\t\t\t\t$this->duration_unit = substr($obj->duration, -1);\n\t\t\t\t$this->canvas                        = $obj->canvas;\n\t\t\t\t$this->net_measure = $obj->net_measure;\n\t\t\t\t$this->net_measure_units = $obj->net_measure_units;\n\t\t\t\t$this->weight                        = $obj->weight;\n\t\t\t\t$this->weight_units                    = $obj->weight_units;\n\t\t\t\t$this->length                        = $obj->length;\n\t\t\t\t$this->length_units                    = $obj->length_units;\n\t\t\t\t$this->width = $obj->width;\n\t\t\t\t$this->width_units = $obj->width_units;\n\t\t\t\t$this->height = $obj->height;\n\t\t\t\t$this->height_units = $obj->height_units;\n\n\t\t\t\t$this->surface = $obj->surface;\n\t\t\t\t$this->surface_units = $obj->surface_units;\n\t\t\t\t$this->volume = $obj->volume;\n\t\t\t\t$this->volume_units                    = $obj->volume_units;\n\t\t\t\t$this->barcode = $obj->barcode;\n\t\t\t\t$this->barcode_type                    = $obj->fk_barcode_type;\n\n\t\t\t\t$this->accountancy_code_buy\t\t\t\t= $obj->accountancy_code_buy;\n\t\t\t\t$this->accountancy_code_buy_intra\t\t= $obj->accountancy_code_buy_intra;\n\t\t\t\t$this->accountancy_code_buy_export\t\t= $obj->accountancy_code_buy_export;\n\t\t\t\t$this->accountancy_code_sell\t\t\t= $obj->accountancy_code_sell;\n\t\t\t\t$this->accountancy_code_sell_intra\t\t= $obj->accountancy_code_sell_intra;\n\t\t\t\t$this->accountancy_code_sell_export\t\t= $obj->accountancy_code_sell_export;\n\n\t\t\t\t$this->fk_default_warehouse            = $obj->fk_default_warehouse;\n\t\t\t\t$this->seuil_stock_alerte            = $obj->seuil_stock_alerte;\n\t\t\t\t$this->desiredstock                    = $obj->desiredstock;\n\t\t\t\t$this->stock_reel                    = $obj->stock;\n\t\t\t\t$this->pmp = $obj->pmp;\n\n\t\t\t\t$this->date_creation                = $obj->datec;\n\t\t\t\t$this->date_modification            = $obj->tms;\n\t\t\t\t$this->import_key                    = $obj->import_key;\n\t\t\t\t$this->entity                        = $obj->entity;\n\n\t\t\t\t$this->ref_ext                        = $obj->ref_ext;\n\t\t\t\t$this->fk_price_expression            = $obj->fk_price_expression;\n\t\t\t\t$this->fk_unit                        = $obj->fk_unit;\n\t\t\t\t$this->price_autogen = $obj->price_autogen;\n\t\t\t\t$this->model_pdf = $obj->model_pdf;\n\n\t\t\t\t$this->mandatory_period = $obj->mandatory_period;\n\n\t\t\t\t$this->db->free($resql);\n\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (!empty($conf->global->MAIN_MULTILANGS) && empty($ignore_lang_load)) {\n\t\t\t\t\t$this->getMultiLangs();\n\t\t\t\t}\n\n\t\t\t\t// Load multiprices array\n\t\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES) && empty($ignore_price_load)) {                // prices per segment\n\t\t\t\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql .= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql .= \" AND price_level=\".((int) $i);\n\t\t\t\t\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\t// Get the most recent line\n\t\t\t\t\t\t$sql .= \" LIMIT 1\";\t\t\t\t\t\t\t\t\t// Only the first one\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i] = $result ? $result[\"price\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i] = $result ? $result[\"price_ttc\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_min[$i] =  $result ? $result[\"price_min\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i] = $result ? $result[\"price_min_ttc\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i] = $result ? $result[\"price_base_type\"] : null;\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i] = $result ? $result[\"tva_tx\"].($result ? ' ('.$result['default_vat_code'].')' : '') : null;\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i] = $result ? $result[\"recuperableonly\"] : null;\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t $this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t $this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t // R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\t if ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t $sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t $sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t $sql.= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[$i]);\n\t\t\t\t\t\t\t $sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t $resultat=array();\n\t\t\t\t\t\t\t $resql = $this->db->query($sql);\n\t\t\t\t\t\t\t if ($resql)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t $ii=0;\n\t\t\t\t\t\t\t while ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t $resultat[$ii]=array();\n\t\t\t\t\t\t\t $resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"remise\"]= $result[\"remise\"];                    // deprecated\n\t\t\t\t\t\t\t $resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t $ii++;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t $this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t dol_print_error($this->db);\n\t\t\t\t\t\t\t return -1;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }*/\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES) && empty($ignore_price_load)) {            // prices per customers\n\t\t\t\t\t// Nothing loaded by default. List may be very long.\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY) && empty($ignore_price_load)) {    // prices per quantity\n\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid\";\n\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t$sql .= \" LIMIT 1\";\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t$this->prices_by_qty[0] = $result[\"price_by_qty\"];\n\t\t\t\t\t\t$this->prices_by_qty_id[0] = $result[\"rowid\"];\n\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\tif ($this->prices_by_qty[0] == 1) {\n\t\t\t\t\t\t\t$sql = \"SELECT rowid,price, unitprice, quantity, remise_percent, remise, remise, price_base_type\";\n\t\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t$sql .= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[0]);\n\t\t\t\t\t\t\t$sql .= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t$resultat = array();\n\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t\t$ii = 0;\n\t\t\t\t\t\t\t\twhile ($result = $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t$resultat[$ii] = array();\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"] = $result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"] = $result[\"price\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"] = $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"] = $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"] = $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t//$resultat[$ii][\"remise\"]= $result[\"remise\"];                    // deprecated\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->prices_by_qty_list[0] = $resultat;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES) && empty($ignore_price_load)) {    // prices per customer and quantity\n\t\t\t\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql .= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql .= \" AND price_level=\".((int) $i);\n\t\t\t\t\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql .= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i] = $result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i] = $result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i] = $result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i] = $result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i] = $result[\"tva_tx\"]; // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i] = $result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t$this->prices_by_qty[$i] = $result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i] = $result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1) {\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql .= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[$i]);\n\t\t\t\t\t\t\t\t$sql .= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat = array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t\t\t$ii = 0;\n\t\t\t\t\t\t\t\t\twhile ($result = $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii] = array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"] = $result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"] = $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"] = $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"] = $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"] = $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"] = $result[\"remise\"]; // deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i] = $resultat;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($this->fk_price_expression) && empty($ignore_expression)) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t$price_result = $priceparser->parseProduct($this);\n\t\t\t\t\tif ($price_result >= 0) {\n\t\t\t\t\t\t$this->price = $price_result;\n\t\t\t\t\t\t// Calculate the VAT\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price) * (1 + ($this->tva_tx / 100));\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price_ttc, 'MU');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We should not load stock during the fetch. If someone need stock of product, he must call load_stock after fetching product.\n\t\t\t\t// Instead we just init the stock_warehouse array\n\t\t\t\t$this->stock_warehouse = array();\n\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats OF pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_mo, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_mo($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $user, $hookmanager, $action;\n\n\t\t$error = 0;\n\n\t\tforeach (array('toconsume', 'consumed', 'toproduce', 'produced') as $role) {\n\t\t\t$this->stats_mo['customers_'.$role] = 0;\n\t\t\t$this->stats_mo['nb_'.$role] = 0;\n\t\t\t$this->stats_mo['qty_'.$role] = 0;\n\n\t\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t\t$sql .= \" SUM(mp.qty) as qty\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_mo as c\";\n\t\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"mrp_production as mp ON mp.fk_mo=c.rowid\";\n\t\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t\t$sql .= \"INNER JOIN \".MAIN_DB_PREFIX.\"societe_commerciaux as sc ON sc.fk_soc=c.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t\t}\n\t\t\t$sql .= \" WHERE \";\n\t\t\t$sql .= \" c.entity IN (\".getEntity('mo').\")\";\n\n\t\t\t$sql .= \" AND mp.fk_product = \".((int) $this->id);\n\t\t\t$sql .= \" AND mp.role ='\".$this->db->escape($role).\"'\";\n\t\t\tif ($socid > 0) {\n\t\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->stats_mo['customers_'.$role] = $obj->nb_customers ? $obj->nb_customers : 0;\n\t\t\t\t$this->stats_mo['nb_'.$role] = $obj->nb ? $obj->nb : 0;\n\t\t\t\t$this->stats_mo['qty_'.$role] = $obj->qty ? price2num($obj->qty, 'MS') : 0;\t\t// qty may be a float due to the SUM()\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($error)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$parameters = array('socid' => $socid);\n\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerMO', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stats_mo = $hookmanager->resArray['stats_mo'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats OF pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_bom, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_bom($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $user, $hookmanager;\n\n\t\t$error = 0;\n\n\t\t$this->stats_bom['nb_toproduce'] = 0;\n\t\t$this->stats_bom['nb_toconsume'] = 0;\n\t\t$this->stats_bom['qty_toproduce'] = 0;\n\t\t$this->stats_bom['qty_toconsume'] = 0;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT b.rowid) as nb_toproduce,\";\n\t\t$sql .= \" SUM(b.qty) as qty_toproduce\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"bom_bom as b\";\n\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"bom_bomline as bl ON bl.fk_bom=b.rowid\";\n\t\t$sql .= \" WHERE \";\n\t\t$sql .= \" b.entity IN (\".getEntity('bom').\")\";\n\t\t$sql .= \" AND b.fk_product =\".((int) $this->id);\n\t\t$sql .= \" GROUP BY b.rowid\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_bom['nb_toproduce'] = !empty($obj->nb_toproduce) ? $obj->nb_toproduce : 0;\n\t\t\t$this->stats_bom['qty_toproduce'] = !empty($obj->qty_toproduce) ? price2num($obj->qty_toproduce) : 0;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\t$error++;\n\t\t}\n\n\t\t$sql = \"SELECT COUNT(DISTINCT bl.rowid) as nb_toconsume,\";\n\t\t$sql .= \" SUM(bl.qty) as qty_toconsume\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"bom_bom as b\";\n\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"bom_bomline as bl ON bl.fk_bom=b.rowid\";\n\t\t$sql .= \" WHERE \";\n\t\t$sql .= \" b.entity IN (\".getEntity('bom').\")\";\n\t\t$sql .= \" AND bl.fk_product =\".((int) $this->id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_bom['nb_toconsume'] = !empty($obj->nb_toconsume) ? $obj->nb_toconsume : 0;\n\t\t\t$this->stats_bom['qty_toconsume'] = !empty($obj->qty_toconsume) ? price2num($obj->qty_toconsume) : 0;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!empty($error)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$parameters = array('socid' => $socid);\n\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerMO', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stats_bom = $hookmanager->resArray['stats_bom'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_propale, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_propale($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_customers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql .= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"propaldet as pd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"propal as p\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = pd.fk_propal\";\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\t$sql .= \" AND pd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_propale['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_propale['nb'] = $obj->nb;\n\t\t\t$this->stats_propale['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_propale['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in proposal by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_propale($socid);\n\n\t\t\t\t\t\t\t$this->stats_propale['customers'] += $pFather->stats_propale['customers'];\n\t\t\t\t\t\t\t$this->stats_propale['nb'] += $pFather->stats_propale['nb'];\n\t\t\t\t\t\t\t$this->stats_propale['rows'] += $pFather->stats_propale['rows'];\n\t\t\t\t\t\t\t$this->stats_propale['qty'] += $pFather->stats_propale['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerProposal', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_propale = $hookmanager->resArray['stats_propale'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t * @param  int $socid Id thirdparty\n\t * @return int                     Array of stats in $this->stats_proposal_supplier, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_proposal_supplier($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_suppliers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql .= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as pd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"supplier_proposal as p\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = pd.fk_supplier_proposal\";\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\t$sql .= \" AND pd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_proposal_supplier['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_proposal_supplier['nb'] = $obj->nb;\n\t\t\t$this->stats_proposal_supplier['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_proposal_supplier['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierProposal', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_proposal_supplier = $hookmanager->resArray['stats_proposal_supplier'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats commande client pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return integer                 Array of stats in $this->stats_commande (nb=nb of order, qty=qty ordered), <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_commande($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'commande').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND c.fk_statut in (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_commande['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_commande['nb'] = $obj->nb;\n\t\t\t$this->stats_commande['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_commande['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in order by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_commande($socid, $filtrestatut);\n\n\t\t\t\t\t\t\t$this->stats_commande['customers'] += $pFather->stats_commande['customers'];\n\t\t\t\t\t\t\t$this->stats_commande['nb'] += $pFather->stats_commande['nb'];\n\t\t\t\t\t\t\t$this->stats_commande['rows'] += $pFather->stats_commande['rows'];\n\t\t\t\t\t\t\t$this->stats_commande['qty'] += $pFather->stats_commande['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If stock decrease is on invoice validation, the theorical stock continue to\n\t\t\t// count the orders to ship in theorical stock when some are already removed b invoice validation.\n\t\t\t// If option DECREASE_ONLY_UNINVOICEDPRODUCTS is on, we make a compensation.\n\t\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n\t\t\t\tif (!empty($conf->global->DECREASE_ONLY_UNINVOICEDPRODUCTS)) {\n\t\t\t\t\t$adeduire = 0;\n\t\t\t\t\t$sql = \"SELECT sum(fd.qty) as count FROM \".MAIN_DB_PREFIX.\"facturedet fd \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"facture f ON fd.fk_facture = f.rowid \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"element_element el ON el.fk_target = f.rowid and el.targettype = 'facture' and sourcetype = 'commande'\";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"commande c ON el.fk_source = c.rowid \";\n\t\t\t\t\t$sql .= \" WHERE c.fk_statut IN (\".$this->db->sanitize($filtrestatut).\") AND c.facture = 0 AND fd.fk_product = \".((int) $this->id);\n\t\t\t\t\tdol_syslog(__METHOD__.\":: sql $sql\", LOG_NOTICE);\n\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\tif ($this->db->num_rows($resql) > 0) {\n\t\t\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t\t\t$adeduire += $obj->count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->stats_commande['qty'] -= $adeduire;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerOrder', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_commande = $hookmanager->resArray['stats_commande'];\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats commande fournisseur pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id des statuts pour filtrer sur des statuts\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return int                     Array of stats in $this->stats_commande_fournisseur, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_commande_fournisseur($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_suppliers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'supplier_order').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut != '') {\n\t\t\t$sql .= \" AND c.fk_statut in (\".$this->db->sanitize($filtrestatut).\")\"; // Peut valoir 0\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_commande_fournisseur['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_commande_fournisseur['nb'] = $obj->nb;\n\t\t\t$this->stats_commande_fournisseur['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_commande_fournisseur['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierOrder', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_commande_fournisseur = $hookmanager->resArray['stats_commande_fournisseur'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats expedition client pour le produit/service\n\t *\n\t * @param   int         $socid                  Id societe pour filtrer sur une societe\n\t * @param   string      $filtrestatut           [=''] Ids order status separated by comma\n\t * @param   int         $forVirtualStock        Ignore rights filter for virtual stock calculation.\n\t * @param   string      $filterShipmentStatus   [=''] Ids shipment status separated by comma\n\t * @return  int                                 Array of stats in $this->stats_expedition, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_sending($socid = 0, $filtrestatut = '', $forVirtualStock = 0, $filterShipmentStatus = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT e.fk_soc) as nb_customers, COUNT(DISTINCT e.rowid) as nb,\";\n\t\t$sql .= \" COUNT(ed.rowid) as nb_rows, SUM(ed.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"expeditiondet as ed\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"expedition as e\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE e.rowid = ed.fk_expedition\";\n\t\t$sql .= \" AND c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND e.fk_soc = s.rowid\";\n\t\t$sql .= \" AND e.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'expedition').\")\";\n\t\t$sql .= \" AND ed.fk_origin_line = cd.rowid\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND e.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND e.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND c.fk_statut IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\t\tif (!empty($filterShipmentStatus)) {\n\t\t\t$sql .= \" AND e.fk_statut IN (\".$this->db->sanitize($filterShipmentStatus).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_expedition['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_expedition['nb'] = $obj->nb;\n\t\t\t$this->stats_expedition['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_expedition['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in sending by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_sending($socid, $filtrestatut, $forVirtualStock);\n\n\t\t\t\t\t\t\t$this->stats_expedition['customers'] += $pFather->stats_expedition['customers'];\n\t\t\t\t\t\t\t$this->stats_expedition['nb'] += $pFather->stats_expedition['nb'];\n\t\t\t\t\t\t\t$this->stats_expedition['rows'] += $pFather->stats_expedition['rows'];\n\t\t\t\t\t\t\t$this->stats_expedition['qty'] += $pFather->stats_expedition['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock, 'filterShipmentStatus' => $filterShipmentStatus);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSending', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_expedition = $hookmanager->resArray['stats_expedition'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats r\u00e9ception fournisseur pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return int                     Array of stats in $this->stats_reception, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_reception($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT cf.fk_soc) as nb_suppliers, COUNT(DISTINCT cf.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseur_dispatch as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as cf\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE cf.rowid = fd.fk_commande\";\n\t\t$sql .= \" AND cf.fk_soc = s.rowid\";\n\t\t$sql .= \" AND cf.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'supplier_order').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND cf.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND cf.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND cf.fk_statut IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_reception['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_reception['nb'] = $obj->nb;\n\t\t\t$this->stats_reception['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_reception['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsReception', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_reception = $hookmanager->resArray['stats_reception'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats production pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return integer                 Array of stats in $this->stats_mrptoproduce (nb=nb of order, qty=qty ordered), <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_inproduction($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT m.fk_soc) as nb_customers, COUNT(DISTINCT m.rowid) as nb,\";\n\t\t$sql .= \" COUNT(mp.rowid) as nb_rows, SUM(mp.qty) as qty, role\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_production as mp\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"mrp_mo as m\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"societe as s ON s.rowid = m.fk_soc\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE m.rowid = mp.fk_mo\";\n\t\t$sql .= \" AND m.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'mrp').\")\";\n\t\t$sql .= \" AND mp.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND m.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND m.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND m.status IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\t\t$sql .= \" GROUP BY role\";\n\n\t\t$this->stats_mrptoconsume['customers'] = 0;\n\t\t$this->stats_mrptoconsume['nb'] = 0;\n\t\t$this->stats_mrptoconsume['rows'] = 0;\n\t\t$this->stats_mrptoconsume['qty'] = 0;\n\t\t$this->stats_mrptoproduce['customers'] = 0;\n\t\t$this->stats_mrptoproduce['nb'] = 0;\n\t\t$this->stats_mrptoproduce['rows'] = 0;\n\t\t$this->stats_mrptoproduce['qty'] = 0;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\twhile ($obj = $this->db->fetch_object($result)) {\n\t\t\t\tif ($obj->role == 'toconsume') {\n\t\t\t\t\t$this->stats_mrptoconsume['customers'] += $obj->nb_customers;\n\t\t\t\t\t$this->stats_mrptoconsume['nb'] += $obj->nb;\n\t\t\t\t\t$this->stats_mrptoconsume['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoconsume['qty'] += ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'consumed') {\n\t\t\t\t\t//$this->stats_mrptoconsume['customers'] += $obj->nb_customers;\n\t\t\t\t\t//$this->stats_mrptoconsume['nb'] += $obj->nb;\n\t\t\t\t\t//$this->stats_mrptoconsume['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoconsume['qty'] -= ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'toproduce') {\n\t\t\t\t\t$this->stats_mrptoproduce['customers'] += $obj->nb_customers;\n\t\t\t\t\t$this->stats_mrptoproduce['nb'] += $obj->nb;\n\t\t\t\t\t$this->stats_mrptoproduce['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoproduce['qty'] += ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'produced') {\n\t\t\t\t\t//$this->stats_mrptoproduce['customers'] += $obj->nb_customers;\n\t\t\t\t\t//$this->stats_mrptoproduce['nb'] += $obj->nb;\n\t\t\t\t\t//$this->stats_mrptoproduce['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoproduce['qty'] -= ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean data\n\t\t\tif ($this->stats_mrptoconsume['qty'] < 0) {\n\t\t\t\t$this->stats_mrptoconsume['qty'] = 0;\n\t\t\t}\n\t\t\tif ($this->stats_mrptoproduce['qty'] < 0) {\n\t\t\t\t$this->stats_mrptoproduce['qty'] = 0;\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsInProduction', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_mrptoproduce = $hookmanager->resArray['stats_mrptoproduce'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats contrat pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_contrat, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_contrat($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"contratdet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"contrat as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_contrat\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND c.statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_contrat['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_contrat['nb'] = $obj->nb;\n\t\t\t$this->stats_contrat['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_contrat['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in contract by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_contrat($socid);\n\n\t\t\t\t\t\t\t$this->stats_contrat['customers'] += $pFather->stats_contrat['customers'];\n\t\t\t\t\t\t\t$this->stats_contrat['nb'] += $pFather->stats_contrat['nb'];\n\t\t\t\t\t\t\t$this->stats_contrat['rows'] += $pFather->stats_contrat['rows'];\n\t\t\t\t\t\t\t$this->stats_contrat['qty'] += $pFather->stats_contrat['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsContract', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_contrat = $hookmanager->resArray['stats_contrat'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_facture, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_facture($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $db, $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_customers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(\".$this->db->ifsql('f.type != 2', 'fd.qty', 'fd.qty * -1').\") as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facturedet as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"facture as f\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = fd.fk_facture\";\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('invoice').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_facture['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_facture['nb'] = $obj->nb;\n\t\t\t$this->stats_facture['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_facture['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in invoice by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_facture($socid);\n\n\t\t\t\t\t\t\t$this->stats_facture['customers'] += $pFather->stats_facture['customers'];\n\t\t\t\t\t\t\t$this->stats_facture['nb'] += $pFather->stats_facture['nb'];\n\t\t\t\t\t\t\t$this->stats_facture['rows'] += $pFather->stats_facture['rows'];\n\t\t\t\t\t\t\t$this->stats_facture['qty'] += $pFather->stats_facture['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerInvoice', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_facture = $hookmanager->resArray['stats_facture'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_facture_fournisseur, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_facture_fournisseur($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_suppliers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"facture_fourn as f\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = fd.fk_facture_fourn\";\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_facture_fournisseur['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_facture_fournisseur['nb'] = $obj->nb;\n\t\t\t$this->stats_facture_fournisseur['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_facture_fournisseur['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierInvoice', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_facture_fournisseur = $hookmanager->resArray['stats_facture_fournisseur'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return an array formated for showing graphs\n\t *\n\t * @param  string $sql  \t\tRequest to execute\n\t * @param  string $mode \t\t'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $year \t\tYear (0=current year, -1=all years)\n\t * @return array|int           \t<0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tprivate function _get_stats($sql, $mode, $year = 0)\n\t{\n\t\t// phpcs:enable\n\t\t$tab = array();\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$arr = $this->db->fetch_array($resql);\n\t\t\t\t$keyfortab = (string) $arr[1];\n\t\t\t\tif ($year == -1) {\n\t\t\t\t\t$keyfortab = substr($keyfortab, -2);\n\t\t\t\t}\n\n\t\t\t\tif ($mode == 'byunit') {\n\t\t\t\t\t$tab[$keyfortab] = (empty($tab[$keyfortab]) ? 0 : $tab[$keyfortab]) + $arr[0]; // 1st field\n\t\t\t\t} elseif ($mode == 'bynumber') {\n\t\t\t\t\t$tab[$keyfortab] = (empty($tab[$keyfortab]) ? 0 : $tab[$keyfortab]) + $arr[2]; // 3rd field\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($year)) {\n\t\t\t$year = strftime('%Y', time());\n\t\t\t$month = strftime('%m', time());\n\t\t} elseif ($year == -1) {\n\t\t\t$year = '';\n\t\t\t$month = 12; // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t} else {\n\t\t\t$month = 12; // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t}\n\n\t\t$result = array();\n\n\t\tfor ($j = 0; $j < 12; $j++) {\n\t\t\t// $ids is 'D', 'N', 'O', 'S', ... (First letter of month in user language)\n\t\t\t$idx = ucfirst(dol_trunc(dol_print_date(dol_mktime(12, 0, 0, $month, 1, 1970), \"%b\"), 1, 'right', 'UTF-8', 1));\n\n\t\t\t//print $idx.'-'.$year.'-'.$month.'<br>';\n\t\t\t$result[$j] = array($idx, isset($tab[$year.$month]) ? $tab[$year.$month] : 0);\n\t\t\t//            $result[$j] = array($monthnum,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\n\t\t\t$month = \"0\".($month - 1);\n\t\t\tif (dol_strlen($month) == 3) {\n\t\t\t\t$month = substr($month, 1);\n\t\t\t}\n\t\t\tif ($month == 0) {\n\t\t\t\t$month = 12;\n\t\t\t\t$year = $year - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn array_reverse($result);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units or customers invoices in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_vente($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT f.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facturedet as d, \".MAIN_DB_PREFIX.\"facture as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = d.fk_facture\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('invoice').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = $socid\";\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units or supplier invoices in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_achat($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT f.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as d, \".MAIN_DB_PREFIX.\"facture_fourn as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = d.fk_facture_fourn\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = $socid\";\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return nb of units in proposals in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_propal($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.datep, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT p.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"propaldet as d, \".MAIN_DB_PREFIX.\"propal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = d.fk_propal\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND prod.rowid = d.fk_product AND prod.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(p.datep,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(p.datep,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in proposals in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_propalsupplier($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT p.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as d, \".MAIN_DB_PREFIX.\"supplier_proposal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = d.fk_supplier_proposal\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND prod.rowid = d.fk_product AND prod.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(p.date_valid,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(p.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_order($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commandedet as d, \".MAIN_DB_PREFIX.\"commande as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_ordersupplier($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as d, \".MAIN_DB_PREFIX.\"commande_fournisseur as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_contract($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_contrat, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"contratdet as d, \".MAIN_DB_PREFIX.\"contrat as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\n\t\t$sql .= \" WHERE c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql .= \" AND c.rowid = d.fk_contrat\";\n\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_contrat,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_contrat,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_mos($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(d.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT d.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_mo as d LEFT JOIN  \".MAIN_DB_PREFIX.\"societe as s ON d.fk_soc = s.rowid\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\n\t\t$sql .= \" WHERE d.entity IN (\".getEntity('mo').\")\";\n\t\t$sql .= \" AND d.status > 0\";\n\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND d.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND d.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(d.date_valid,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(d.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Link a product/service to a parent product/service\n\t *\n\t * @param  int $id_pere Id of parent product/service\n\t * @param  int $id_fils Id of child product/service\n\t * @param  int $qty     Quantity\n\t * @param  int $incdec  1=Increase/decrease stock of child when parent stock increase/decrease\n\t * @return int                < 0 if KO, > 0 if OK\n\t */\n\tpublic function add_sousproduit($id_pere, $id_fils, $qty, $incdec = 1)\n\t{\n\t\t// phpcs:enable\n\t\t// Clean parameters\n\t\tif (!is_numeric($id_pere)) {\n\t\t\t$id_pere = 0;\n\t\t}\n\t\tif (!is_numeric($id_fils)) {\n\t\t\t$id_fils = 0;\n\t\t}\n\t\tif (!is_numeric($incdec)) {\n\t\t\t$incdec = 0;\n\t\t}\n\n\t\t$result = $this->del_sousproduit($id_pere, $id_fils);\n\t\tif ($result < 0) {\n\t\t\treturn $result;\n\t\t}\n\n\t\t// Check not already father of id_pere (to avoid father -> child -> father links)\n\t\t$sql = \"SELECT fk_product_pere from \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere = \".((int) $id_fils).\" AND fk_product_fils = \".((int) $id_pere);\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t//Selection of the highest row\n\t\t\t$sql = \"SELECT MAX(rang) as max_rank FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $id_pere);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$rank = $obj->max_rank + 1;\n\t\t\t\t//Addition of a product with the highest rank +1\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_association(fk_product_pere,fk_product_fils,qty,incdec,rang)\";\n\t\t\t\t$sql .= \" VALUES (\".((int) $id_pere).\", \".((int) $id_fils).\", \".price2num($qty, 'MS').\", \".price2num($incdec, 'MS').\", \".((int) $rank).\")\";\n\t\t\t\tif (! $this->db->query($sql)) {\n\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Modify composed product\n\t *\n\t * @param  int $id_pere Id of parent product/service\n\t * @param  int $id_fils Id of child product/service\n\t * @param  int $qty     Quantity\n\t * @param  int $incdec  1=Increase/decrease stock of child when parent stock increase/decrease\n\t * @return int                < 0 if KO, > 0 if OK\n\t */\n\tpublic function update_sousproduit($id_pere, $id_fils, $qty, $incdec = 1)\n\t{\n\t\t// phpcs:enable\n\t\t// Clean parameters\n\t\tif (!is_numeric($id_pere)) {\n\t\t\t$id_pere = 0;\n\t\t}\n\t\tif (!is_numeric($id_fils)) {\n\t\t\t$id_fils = 0;\n\t\t}\n\t\tif (!is_numeric($incdec)) {\n\t\t\t$incdec = 1;\n\t\t}\n\t\tif (!is_numeric($qty)) {\n\t\t\t$qty = 1;\n\t\t}\n\n\t\t$sql = 'UPDATE '.MAIN_DB_PREFIX.'product_association SET ';\n\t\t$sql .= 'qty = '.price2num($qty, 'MS');\n\t\t$sql .= ',incdec = '.price2num($incdec, 'MS');\n\t\t$sql .= ' WHERE fk_product_pere = '.((int) $id_pere).' AND fk_product_fils = '.((int) $id_fils);\n\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Remove a link between a subproduct and a parent product/service\n\t *\n\t * @param  int $fk_parent Id of parent product (child will no more be linked to it)\n\t * @param  int $fk_child  Id of child product\n\t * @return int            < 0 if KO, > 0 if OK\n\t */\n\tpublic function del_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t// phpcs:enable\n\t\tif (!is_numeric($fk_parent)) {\n\t\t\t$fk_parent = 0;\n\t\t}\n\t\tif (!is_numeric($fk_child)) {\n\t\t\t$fk_child = 0;\n\t\t}\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $fk_parent);\n\t\t$sql .= \" AND fk_product_fils = \".((int) $fk_child);\n\n\t\tdol_syslog(get_class($this).'::del_sousproduit', LOG_DEBUG);\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Updated ranks so that none are missing\n\t\t$sqlrank = \"SELECT rowid, rang FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sqlrank.= \" WHERE fk_product_pere = \".((int) $fk_parent);\n\t\t$sqlrank.= \" ORDER BY rang\";\n\t\t$resqlrank = $this->db->query($sqlrank);\n\t\tif ($resqlrank) {\n\t\t\t$cpt = 0;\n\t\t\twhile ($objrank = $this->db->fetch_object($resqlrank)) {\n\t\t\t\t$cpt++;\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql.= \" SET rang = \".((int) $cpt);\n\t\t\t\t$sql.= \" WHERE rowid = \".((int) $objrank->rowid);\n\t\t\t\tif (! $this->db->query($sql)) {\n\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Check if it is a sub-product into a kit\n\t *\n\t * @param  int \t$fk_parent \t\tId of parent kit product\n\t * @param  int \t$fk_child  \t\tId of child product\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tpublic function is_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT fk_product_pere, qty, incdec\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $fk_parent);\n\t\t$sql .= \" AND fk_product_fils = \".((int) $fk_child);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\n\t\t\tif ($num > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->is_sousproduit_qty = $obj->qty;\n\t\t\t\t$this->is_sousproduit_incdec = $obj->incdec;\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Add a supplier price for the product.\n\t *  Note: Duplicate ref is accepted for different quantity only, or for different companies.\n\t *\n\t * @param  User   $user      User that make link\n\t * @param  int    $id_fourn  Supplier id\n\t * @param  string $ref_fourn Supplier ref\n\t * @param  float  $quantity  Quantity minimum for price\n\t * @return int               < 0 if KO, 0 if link already exists for this product, > 0 if OK\n\t */\n\tpublic function add_fournisseur($user, $id_fourn, $ref_fourn, $quantity)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$now = dol_now();\n\n\t\tdol_syslog(get_class($this).\"::add_fournisseur id_fourn = \".$id_fourn.\" ref_fourn=\".$ref_fourn.\" quantity=\".$quantity, LOG_DEBUG);\n\n\t\t// Clean parameters\n\t\t$quantity = price2num($quantity, 'MS');\n\n\t\tif ($ref_fourn) {\n\t\t\t$sql = \"SELECT rowid, fk_product\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t\t$sql .= \" WHERE fk_soc = \".((int) $id_fourn);\n\t\t\t$sql .= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t$sql .= \" AND fk_product <> \".((int) $this->id);\n\t\t\t$sql .= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\tif ($obj) {\n\t\t\t\t\t// If the supplier ref already exists but for another product (duplicate ref is accepted for different quantity only or different companies)\n\t\t\t\t\t$this->product_id_already_linked = $obj->fk_product;\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql .= \" WHERE fk_soc = \".((int) $id_fourn);\n\t\tif ($ref_fourn) {\n\t\t\t$sql .= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\t} else {\n\t\t\t$sql .= \" AND (ref_fourn = '' OR ref_fourn IS NULL)\";\n\t\t}\n\t\t$sql .= \" AND quantity = \".((float) $quantity);\n\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t$sql .= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t// The reference supplier does not exist, we create it for this product.\n\t\t\tif (empty($obj)) {\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_fournisseur_price(\";\n\t\t\t\t$sql .= \"datec\";\n\t\t\t\t$sql .= \", entity\";\n\t\t\t\t$sql .= \", fk_product\";\n\t\t\t\t$sql .= \", fk_soc\";\n\t\t\t\t$sql .= \", ref_fourn\";\n\t\t\t\t$sql .= \", quantity\";\n\t\t\t\t$sql .= \", fk_user\";\n\t\t\t\t$sql .= \", tva_tx\";\n\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t$sql .= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t$sql .= \", \".$conf->entity;\n\t\t\t\t$sql .= \", \".$this->id;\n\t\t\t\t$sql .= \", \".$id_fourn;\n\t\t\t\t$sql .= \", '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t\t$sql .= \", \".$quantity;\n\t\t\t\t$sql .= \", \".$user->id;\n\t\t\t\t$sql .= \", 0\";\n\t\t\t\t$sql .= \")\";\n\n\t\t\t\tif ($this->db->query($sql)) {\n\t\t\t\t\t$this->product_fourn_price_id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product_fournisseur_price\");\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If the supplier price already exists for this product and quantity\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return list of suppliers providing the product or service\n\t *\n\t * @return array        Array of vendor ids\n\t */\n\tpublic function list_suppliers()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$list = array();\n\n\t\t$sql = \"SELECT DISTINCT p.fk_soc\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as p\";\n\t\t$sql .= \" WHERE p.fk_product = \".((int) $this->id);\n\t\t$sql .= \" AND p.entity = \".((int) $conf->entity);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$list[$i] = $obj->fk_soc;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Recopie les prix d'un produit/service sur un autre\n\t *\n\t * @param  int $fromId Id product source\n\t * @param  int $toId   Id product target\n\t * @return int                     < 0 if KO, > 0 if OK\n\t */\n\tpublic function clone_price($fromId, $toId)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$now = dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// prices\n\t\t$sql  = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price (\";\n\t\t$sql .= \" entity\";\n\t\t$sql .= \", fk_product\";\n\t\t$sql .= \", date_price\";\n\t\t$sql .= \", price_level\";\n\t\t$sql .= \", price\";\n\t\t$sql .= \", price_ttc\";\n\t\t$sql .= \", price_min\";\n\t\t$sql .= \", price_min_ttc\";\n\t\t$sql .= \", price_base_type\";\n\t\t$sql .= \", default_vat_code\";\n\t\t$sql .= \", tva_tx\";\n\t\t$sql .= \", recuperableonly\";\n\t\t$sql .= \", localtax1_tx\";\n\t\t$sql .= \", localtax1_type\";\n\t\t$sql .= \", localtax2_tx\";\n\t\t$sql .= \", localtax2_type\";\n\t\t$sql .= \", fk_user_author\";\n\t\t$sql .= \", tosell\";\n\t\t$sql .= \", price_by_qty\";\n\t\t$sql .= \", fk_price_expression\";\n\t\t$sql .= \", fk_multicurrency\";\n\t\t$sql .= \", multicurrency_code\";\n\t\t$sql .= \", multicurrency_tx\";\n\t\t$sql .= \", multicurrency_price\";\n\t\t$sql .= \", multicurrency_price_ttc\";\n\t\t$sql .= \")\";\n\t\t$sql .= \" SELECT\";\n\t\t$sql .= \" entity\";\n\t\t$sql .= \", \".$toId;\n\t\t$sql .= \", '\".$this->db->idate($now).\"'\";\n\t\t$sql .= \", price_level\";\n\t\t$sql .= \", price\";\n\t\t$sql .= \", price_ttc\";\n\t\t$sql .= \", price_min\";\n\t\t$sql .= \", price_min_ttc\";\n\t\t$sql .= \", price_base_type\";\n\t\t$sql .= \", default_vat_code\";\n\t\t$sql .= \", tva_tx\";\n\t\t$sql .= \", recuperableonly\";\n\t\t$sql .= \", localtax1_tx\";\n\t\t$sql .= \", localtax1_type\";\n\t\t$sql .= \", localtax2_tx\";\n\t\t$sql .= \", localtax2_type\";\n\t\t$sql .= \", \".$user->id;\n\t\t$sql .= \", tosell\";\n\t\t$sql .= \", price_by_qty\";\n\t\t$sql .= \", fk_price_expression\";\n\t\t$sql .= \", fk_multicurrency\";\n\t\t$sql .= \", multicurrency_code\";\n\t\t$sql .= \", multicurrency_tx\";\n\t\t$sql .= \", multicurrency_price\";\n\t\t$sql .= \", multicurrency_price_ttc\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $fromId);\n\t\t$sql .= \" ORDER BY date_price DESC\";\n\t\tif ($conf->global->PRODUIT_MULTIPRICES_LIMIT > 0) {\n\t\t\t$sql .= \" LIMIT \".$conf->global->PRODUIT_MULTIPRICES_LIMIT;\n\t\t}\n\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Clone links between products\n\t *\n\t * @param  int $fromId Product id\n\t * @param  int $toId   Product id\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tpublic function clone_associations($fromId, $toId)\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association (fk_product_pere, fk_product_fils, qty)';\n\t\t$sql .= \" SELECT \".$toId.\", fk_product_fils, qty FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere = \".((int) $fromId);\n\n\t\tdol_syslog(get_class($this).'::clone_association', LOG_DEBUG);\n\t\tif (!$this->db->query($sql)) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Recopie les fournisseurs et prix fournisseurs d'un produit/service sur un autre\n\t *\n\t * @param  int $fromId Id produit source\n\t * @param  int $toId   Id produit cible\n\t * @return int                 < 0 si erreur, > 0 si ok\n\t */\n\tpublic function clone_fournisseurs($fromId, $toId)\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$now = dol_now();\n\n\t\t// les fournisseurs\n\t\t/*$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur (\"\n\t\t . \" datec, fk_product, fk_soc, ref_fourn, fk_user_author )\"\n\t\t . \" SELECT '\".$this->db->idate($now).\"', \".$toId.\", fk_soc, ref_fourn, fk_user_author\"\n\t\t . \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur\"\n\t\t . \" WHERE fk_product = \".((int) $fromId);\n\n\t\t if ( ! $this->db->query($sql ) )\n\t\t {\n\t\t $this->db->rollback();\n\t\t return -1;\n\t\t }*/\n\n\t\t// les prix de fournisseurs.\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur_price (\";\n\t\t$sql .= \" datec, fk_product, fk_soc, price, quantity, fk_user)\";\n\t\t$sql .= \" SELECT '\".$this->db->idate($now).\"', \".((int) $toId).\", fk_soc, price, quantity, fk_user\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $fromId);\n\n\t\tdol_syslog(get_class($this).'::clone_fournisseurs', LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Fonction recursive uniquement utilisee par get_arbo_each_prod, recompose l'arborescence des sousproduits\n\t *  Define value of this->res\n\t *\n\t * @param  array  $prod       \t\t\tProducts array\n\t * @param  string $compl_path \t\t\tDirectory path of parents to add before\n\t * @param  int    $multiply   \t\t\tBecause each sublevel must be multiplicated by parent nb\n\t * @param  int    $level      \t\t\tInit level\n\t * @param  int    $id_parent  \t\t\tId parent\n\t * @param  int    $ignore_stock_load \tIgnore stock load\n\t * @return void\n\t */\n\tpublic function fetch_prod_arbo($prod, $compl_path = '', $multiply = 1, $level = 1, $id_parent = 0, $ignore_stock_load = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$tmpproduct = null;\n\t\t//var_dump($prod);\n\t\tforeach ($prod as $id_product => $desc_pere) {    // $id_product is 0 (first call starting with root top) or an id of a sub_product\n\t\t\tif (is_array($desc_pere)) {    // If desc_pere is an array, this means it's a child\n\t\t\t\t$id = (!empty($desc_pere[0]) ? $desc_pere[0] : '');\n\t\t\t\t$nb = (!empty($desc_pere[1]) ? $desc_pere[1] : '');\n\t\t\t\t$type = (!empty($desc_pere[2]) ? $desc_pere[2] : '');\n\t\t\t\t$label = (!empty($desc_pere[3]) ? $desc_pere[3] : '');\n\t\t\t\t$incdec = (!empty($desc_pere[4]) ? $desc_pere[4] : 0);\n\n\t\t\t\tif ($multiply < 1) {\n\t\t\t\t\t$multiply = 1;\n\t\t\t\t}\n\n\t\t\t\t//print \"XXX We add id=\".$id.\" - label=\".$label.\" - nb=\".$nb.\" - multiply=\".$multiply.\" fullpath=\".$compl_path.$label.\"\\n\";\n\t\t\t\tif (is_null($tmpproduct)) {\n\t\t\t\t\t$tmpproduct = new Product($this->db); // So we initialize tmpproduct only once for all loop.\n\t\t\t\t}\n\t\t\t\t$tmpproduct->fetch($id); // Load product to get ->ref\n\n\t\t\t\tif (empty($ignore_stock_load) && ($tmpproduct->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES))) {\n\t\t\t\t\t$tmpproduct->load_stock('nobatch,novirtual'); // Load stock to get true ->stock_reel\n\t\t\t\t}\n\n\t\t\t\t$this->res[] = array(\n\t\t\t\t\t'id'=>$id, // Id product\n\t\t\t\t\t'id_parent'=>$id_parent,\n\t\t\t\t\t'ref'=>$tmpproduct->ref, // Ref product\n\t\t\t\t\t'nb'=>$nb, // Nb of units that compose parent product\n\t\t\t\t\t'nb_total'=>$nb * $multiply, // Nb of units for all nb of product\n\t\t\t\t\t'stock'=>$tmpproduct->stock_reel, // Stock\n\t\t\t\t\t'stock_alert'=>$tmpproduct->seuil_stock_alerte, // Stock alert\n\t\t\t\t\t'label'=>$label,\n\t\t\t\t\t'fullpath'=>$compl_path.$label, // Label\n\t\t\t\t\t'type'=>$type, // Nb of units that compose parent product\n\t\t\t\t\t'desiredstock'=>$tmpproduct->desiredstock,\n\t\t\t\t\t'level'=>$level,\n\t\t\t\t\t'incdec'=>$incdec,\n\t\t\t\t\t'entity'=>$tmpproduct->entity\n\t\t\t\t);\n\n\t\t\t\t// Recursive call if there is childs to child\n\t\t\t\tif (is_array($desc_pere['childs'])) {\n\t\t\t\t\t//print 'YYY We go down for '.$desc_pere[3].\" -> \\n\";\n\t\t\t\t\t$this->fetch_prod_arbo($desc_pere['childs'], $compl_path.$desc_pere[3].\" -> \", $desc_pere[1] * $multiply, $level + 1, $id, $ignore_stock_load);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Build the tree of subproducts into an array ->res and return it.\n\t *  this->sousprods must have been loaded by this->get_sousproduits_arbo()\n\t *\n\t * @param  int \t\t$multiply \t\t\tBecause each sublevel must be multiplicated by parent nb\n\t * @param  int    \t$ignore_stock_load \tIgnore stock load\n\t * @return array                    \t$this->res\n\t */\n\tpublic function get_arbo_each_prod($multiply = 1, $ignore_stock_load = 0)\n\t{\n\t\t// phpcs:enable\n\t\t$this->res = array();\n\t\tif (isset($this->sousprods) && is_array($this->sousprods)) {\n\t\t\tforeach ($this->sousprods as $prod_name => $desc_product) {\n\t\t\t\tif (is_array($desc_product)) {\n\t\t\t\t\t$this->fetch_prod_arbo($desc_product, \"\", $multiply, 1, $this->id, $ignore_stock_load);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//var_dump($this->res);\n\t\treturn $this->res;\n\t}\n\n\t/**\n\t * Count all parent and children products for current product (first level only)\n\t *\n\t * @param\tint\t\t$mode\t0=Both parent and child, -1=Parents only, 1=Children only\n\t * @return \tint            \tNb of father + child\n\t * @see getFather(), get_sousproduits_arbo()\n\t */\n\tpublic function hasFatherOrChild($mode = 0)\n\t{\n\t\t$nb = 0;\n\n\t\t$sql = \"SELECT COUNT(pa.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\tif ($mode == 0) {\n\t\t\t$sql .= \" WHERE pa.fk_product_fils = \".((int) $this->id).\" OR pa.fk_product_pere = \".((int) $this->id);\n\t\t} elseif ($mode == -1) {\n\t\t\t$sql .= \" WHERE pa.fk_product_fils = \".((int) $this->id); // We are a child, so we found lines that link to parents (can have several parents)\n\t\t} elseif ($mode == 1) {\n\t\t\t$sql .= \" WHERE pa.fk_product_pere = \".((int) $this->id); // We are a parent, so we found lines that link to children (can have several children)\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) {\n\t\t\t\t$nb = $obj->nb;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\t/**\n\t * Return if a product has variants or not\n\t *\n\t * @return int        Number of variants\n\t */\n\tpublic function hasVariants()\n\t{\n\t\t$nb = 0;\n\t\t$sql = \"SELECT count(rowid) as nb FROM \".MAIN_DB_PREFIX.\"product_attribute_combination WHERE fk_product_parent = \".((int) $this->id);\n\t\t$sql .= \" AND entity IN (\".getEntity('product').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) {\n\t\t\t\t$nb = $obj->nb;\n\t\t\t}\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\n\t/**\n\t * Return if loaded product is a variant\n\t *\n\t * @return int\n\t */\n\tpublic function isVariant()\n\t{\n\t\tglobal $conf;\n\t\tif (!empty($conf->variants->enabled)) {\n\t\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"product_attribute_combination WHERE fk_product_child = \".((int) $this->id).\" AND entity IN (\".getEntity('product').\")\";\n\n\t\t\t$query = $this->db->query($sql);\n\n\t\t\tif ($query) {\n\t\t\t\tif (!$this->db->num_rows($query)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t * @return array         Array of product\n\t * @see hasFatherOrChild()\n\t */\n\tpublic function getFather()\n\t{\n\t\t$sql = \"SELECT p.rowid, p.label as label, p.ref as ref, pa.fk_product_pere as id, p.fk_product_type, pa.qty, pa.incdec, p.entity\";\n\t\t$sql .= \", p.tosell as status, p.tobuy as status_buy\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql .= \" WHERE p.rowid = pa.fk_product_pere\";\n\t\t$sql .= \" AND pa.fk_product_fils = \".((int) $this->id);\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$prods = array();\n\t\t\twhile ($record = $this->db->fetch_array($res)) {\n\t\t\t\t// $record['id'] = $record['rowid'] = id of father\n\t\t\t\t$prods[$record['id']]['id'] = $record['rowid'];\n\t\t\t\t$prods[$record['id']]['ref'] = $record['ref'];\n\t\t\t\t$prods[$record['id']]['label'] = $record['label'];\n\t\t\t\t$prods[$record['id']]['qty'] = $record['qty'];\n\t\t\t\t$prods[$record['id']]['incdec'] = $record['incdec'];\n\t\t\t\t$prods[$record['id']]['fk_product_type'] = $record['fk_product_type'];\n\t\t\t\t$prods[$record['id']]['entity'] = $record['entity'];\n\t\t\t\t$prods[$record['id']]['status'] = $record['status'];\n\t\t\t\t$prods[$record['id']]['status_buy'] = $record['status_buy'];\n\t\t\t}\n\t\t\treturn $prods;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return childs of product $id\n\t *\n\t * @param  int $id             \t\tId of product to search childs of\n\t * @param  int $firstlevelonly \t\tReturn only direct child\n\t * @param  int $level          \t\tLevel of recursing call (start to 1)\n\t * @return array                    Return array(prodid=>array(0=prodid, 1=>qty, 2=>product type, 3=>label, 4=>incdec, 5=>product ref)\n\t */\n\tpublic function getChildsArbo($id, $firstlevelonly = 0, $level = 1)\n\t{\n\t\tglobal $alreadyfound;\n\n\t\tif (empty($id)) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$sql = \"SELECT p.rowid, p.ref, p.label as label, p.fk_product_type,\";\n\t\t$sql .= \" pa.qty as qty, pa.fk_product_fils as id, pa.incdec,\";\n\t\t$sql .= \" pa.rowid as fk_association, pa.rang\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql .= \" WHERE p.rowid = pa.fk_product_fils\";\n\t\t$sql .= \" AND pa.fk_product_pere = \".((int) $id);\n\t\t$sql .= \" AND pa.fk_product_fils <> \".((int) $id); // This should not happens, it is to avoid infinite loop if it happens\n\t\t$sql.= \" ORDER BY pa.rang\";\n\n\t\tdol_syslog(get_class($this).'::getChildsArbo id='.$id.' level='.$level, LOG_DEBUG);\n\n\t\tif ($level == 1) {\n\t\t\t$alreadyfound = array($id=>1); // We init array of found object to start of tree, so if we found it later (should not happened), we stop immediatly\n\t\t}\n\t\t// Protection against infinite loop\n\t\tif ($level > 30) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$prods = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res)) {\n\t\t\t\tif (!empty($alreadyfound[$rec['rowid']])) {\n\t\t\t\t\tdol_syslog(get_class($this).'::getChildsArbo the product id='.$rec['rowid'].' was already found at a higher level in tree. We discard to avoid infinite loop', LOG_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$alreadyfound[$rec['rowid']] = 1;\n\t\t\t\t$prods[$rec['rowid']] = array(\n\t\t\t\t\t0=>$rec['rowid'],\n\t\t\t\t\t1=>$rec['qty'],\n\t\t\t\t\t2=>$rec['fk_product_type'],\n\t\t\t\t\t3=>$this->db->escape($rec['label']),\n\t\t\t\t\t4=>$rec['incdec'],\n\t\t\t\t\t5=>$rec['ref'],\n\t\t\t\t\t6=>$rec['fk_association'],\n\t\t\t\t\t7=>$rec['rang']\n\t\t\t\t);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty'],2=>$rec['fk_product_type']);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty']);\n\t\t\t\tif (empty($firstlevelonly)) {\n\t\t\t\t\t$listofchilds = $this->getChildsArbo($rec['rowid'], 0, $level + 1);\n\t\t\t\t\tforeach ($listofchilds as $keyChild => $valueChild) {\n\t\t\t\t\t\t$prods[$rec['rowid']]['childs'][$keyChild] = $valueChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $prods;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *     Return tree of all subproducts for product. Tree contains array of array(0=prodid, 1=>qty, 2=>product type, 3=>label, 4=>incdec, 5=>product ref)\n\t *     Set this->sousprods\n\t *\n\t * @return void\n\t */\n\tpublic function get_sousproduits_arbo()\n\t{\n\t\t// phpcs:enable\n\t\t$parent = array();\n\n\t\tforeach ($this->getChildsArbo($this->id) as $keyChild => $valueChild) {    // Warning. getChildsArbo can call getChildsArbo recursively. Starting point is $value[0]=id of product\n\t\t\t$parent[$this->label][$keyChild] = $valueChild;\n\t\t}\n\t\tforeach ($parent as $key => $value) {        // key=label, value is array of childs\n\t\t\t$this->sousprods[$key] = $value;\n\t\t}\n\t}\n\n\t/**\n\t *    Return clicable link of object (with eventually picto)\n\t *\n\t * @param  int    $withpicto             Add picto into link\n\t * @param  string $option                Where point the link ('stock', 'composition', 'category', 'supplier', '')\n\t * @param  int    $maxlength             Maxlength of ref\n\t * @param  int    $save_lastsearch_value -1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t * @param  int    $notooltip\t\t\t No tooltip\n\t * @return string                                String with URL\n\t */\n\tpublic function getNomUrl($withpicto = 0, $option = '', $maxlength = 0, $save_lastsearch_value = -1, $notooltip = 0)\n\t{\n\t\tglobal $conf, $langs, $hookmanager;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\t\t$result = ''; $label = '';\n\n\t\t$newref = $this->ref;\n\t\tif ($maxlength) {\n\t\t\t$newref = dol_trunc($newref, $maxlength, 'middle');\n\t\t}\n\n\t\tif (!empty($this->entity)) {\n\t\t\t$tmpphoto = $this->show_photos('product', $conf->product->multidir_output[$this->entity], 1, 1, 0, 0, 0, 80);\n\t\t\tif ($this->nbphoto > 0) {\n\t\t\t\t$label .= '<div class=\"photointooltip floatright\">';\n\t\t\t\t$label .= $tmpphoto;\n\t\t\t\t$label .= '</div>';\n\t\t\t\t//$label .= '<div style=\"clear: both;\"></div>';\n\t\t\t}\n\t\t}\n\n\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\t$label .= img_picto('', 'product').' <u class=\"paddingrightonly\">'.$langs->trans(\"Product\").'</u>';\n\t\t} elseif ($this->type == Product::TYPE_SERVICE) {\n\t\t\t$label .= img_picto('', 'service').' <u class=\"paddingrightonly\">'.$langs->trans(\"Service\").'</u>';\n\t\t}\n\t\tif (isset($this->status) && isset($this->status_buy)) {\n\t\t\t$label .= ' '.$this->getLibStatut(5, 0);\n\t\t\t$label .= ' '.$this->getLibStatut(5, 1);\n\t\t}\n\n\t\tif (!empty($this->ref)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductRef').':</b> '.$this->ref;\n\t\t}\n\t\tif (!empty($this->label)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductLabel').':</b> '.$this->label;\n\t\t}\n\t\tif ($this->type == Product::TYPE_PRODUCT || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t\t$langs->load(\"productbatch\");\n\t\t\t\t$label .= \"<br><b>\".$langs->trans(\"ManageLotSerial\").'</b>: '.$this->getLibStatut(0, 2);\n\t\t\t}\n\t\t}\n\t\tif (!empty($conf->barcode->enabled)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('BarCode').':</b> '.$this->barcode;\n\t\t}\n\n\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\tif ($this->weight) {\n\t\t\t\t$label .= \"<br><b>\".$langs->trans(\"Weight\").'</b>: '.$this->weight.' '.measuringUnitString(0, \"weight\", $this->weight_units);\n\t\t\t}\n\t\t\t$labelsize = \"\";\n\t\t\tif ($this->length) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Length\").'</b>: '.$this->length.' '.measuringUnitString(0, 'size', $this->length_units);\n\t\t\t}\n\t\t\tif ($this->width) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Width\").'</b>: '.$this->width.' '.measuringUnitString(0, 'size', $this->width_units);\n\t\t\t}\n\t\t\tif ($this->height) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Height\").'</b>: '.$this->height.' '.measuringUnitString(0, 'size', $this->height_units);\n\t\t\t}\n\t\t\tif ($labelsize) {\n\t\t\t\t$label .= \"<br>\".$labelsize;\n\t\t\t}\n\n\t\t\t$labelsurfacevolume = \"\";\n\t\t\tif ($this->surface) {\n\t\t\t\t$labelsurfacevolume .= ($labelsurfacevolume ? \" - \" : \"\").\"<b>\".$langs->trans(\"Surface\").'</b>: '.$this->surface.' '.measuringUnitString(0, 'surface', $this->surface_units);\n\t\t\t}\n\t\t\tif ($this->volume) {\n\t\t\t\t$labelsurfacevolume .= ($labelsurfacevolume ? \" - \" : \"\").\"<b>\".$langs->trans(\"Volume\").'</b>: '.$this->volume.' '.measuringUnitString(0, 'volume', $this->volume_units);\n\t\t\t}\n\t\t\tif ($labelsurfacevolume) {\n\t\t\t\t$label .= \"<br>\".$labelsurfacevolume;\n\t\t\t}\n\t\t}\n\t\tif (!empty($this->pmp) && $this->pmp) {\n\t\t\t$label .= \"<br><b>\".$langs->trans(\"PMPValue\").'</b>: '.price($this->pmp, 0, '', 1, -1, -1, $conf->currency);\n\t\t}\n\n\t\tif (!empty($conf->accounting->enabled) && $this->status) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellCode').':</b> '.length_accountg($this->accountancy_code_sell);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellIntraCode').':</b> '.length_accountg($this->accountancy_code_sell_intra);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellExportCode').':</b> '.length_accountg($this->accountancy_code_sell_export);\n\t\t}\n\t\tif (!empty($conf->accounting->enabled) && $this->status_buy) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyCode').':</b> '.length_accountg($this->accountancy_code_buy);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyIntraCode').':</b> '.length_accountg($this->accountancy_code_buy_intra);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyExportCode').':</b> '.length_accountg($this->accountancy_code_buy_export);\n\t\t}\n\n\t\t$linkclose = '';\n\t\tif (empty($notooltip)) {\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$label = $langs->trans(\"ShowProduct\");\n\t\t\t\t$linkclose .= ' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\n\t\t\t$linkclose .= ' title=\"'.dol_escape_htmltag($label, 1, 1).'\"';\n\t\t\t$linkclose .= ' class=\"nowraponall classfortooltip\"';\n\t\t} else {\n\t\t\t$linkclose = ' class=\"nowraponall\"';\n\t\t}\n\n\t\tif ($option == 'supplier' || $option == 'category') {\n\t\t\t$url = DOL_URL_ROOT.'/product/fournisseurs.php?id='.$this->id;\n\t\t} elseif ($option == 'stock') {\n\t\t\t$url = DOL_URL_ROOT.'/product/stock/product.php?id='.$this->id;\n\t\t} elseif ($option == 'composition') {\n\t\t\t$url = DOL_URL_ROOT.'/product/composition/card.php?id='.$this->id;\n\t\t} else {\n\t\t\t$url = DOL_URL_ROOT.'/product/card.php?id='.$this->id;\n\t\t}\n\n\t\tif ($option !== 'nolink') {\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t\t$add_save_lastsearch_values = 1;\n\t\t\t}\n\t\t\tif ($add_save_lastsearch_values) {\n\t\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t\t}\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\"';\n\t\t$linkstart .= $linkclose.'>';\n\t\t$linkend = '</a>';\n\n\t\t$result .= $linkstart;\n\t\tif ($withpicto) {\n\t\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\t\t$result .= (img_object(($notooltip ? '' : $label), 'product', ($notooltip ? 'class=\"paddingright\"' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1));\n\t\t\t}\n\t\t\tif ($this->type == Product::TYPE_SERVICE) {\n\t\t\t\t$result .= (img_object(($notooltip ? '' : $label), 'service', ($notooltip ? 'class=\"paddingright\"' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1));\n\t\t\t}\n\t\t}\n\t\t$result .= $newref;\n\t\t$result .= $linkend;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters = array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook = $hookmanager->executeHooks('getNomUrl', $parameters, $this, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\t$result = $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$result .= $hookmanager->resPrint;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * @param  string    $modele      Force model to use ('' to not force)\n\t * @param  Translate $outputlangs Object langs to use for output\n\t * @param  int       $hidedetails Hide details of lines\n\t * @param  int       $hidedesc    Hide description\n\t * @param  int       $hideref     Hide ref\n\t * @return int                         0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$langs->load(\"products\");\n\t\t$outputlangs->load(\"products\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (!dol_strlen($modele)) {\n\t\t\tif (!empty($conf->global->PRODUCT_ADDON_PDF)) {\n\t\t\t\t$modele = $conf->global->PRODUCT_ADDON_PDF;\n\t\t\t} else {\n\t\t\t\t$modele = 'strato';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/product/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t}\n\n\t/**\n\t *    Return label of status of object\n\t *\n\t * @param  int $mode 0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t * @param  int $type 0=Sell, 1=Buy, 2=Batch Number management\n\t * @return string          Label of status\n\t */\n\tpublic function getLibStatut($mode = 0, $type = 0)\n\t{\n\t\tswitch ($type) {\n\t\t\tcase 0:\n\t\t\t\treturn $this->LibStatut($this->status, $mode, $type);\n\t\t\tcase 1:\n\t\t\t\treturn $this->LibStatut($this->status_buy, $mode, $type);\n\t\t\tcase 2:\n\t\t\t\treturn $this->LibStatut($this->status_batch, $mode, $type);\n\t\t\tdefault:\n\t\t\t\t//Simulate previous behavior but should return an error string\n\t\t\t\treturn $this->LibStatut($this->status_buy, $mode, $type);\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Return label of a given status\n\t *\n\t * @param  int \t\t$status \tStatut\n\t * @param  int\t\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t * @param  int \t\t$type   \t0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t * @return string              \tLabel of status\n\t */\n\tpublic function LibStatut($status, $mode = 0, $type = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$labelStatus = $labelStatusShort = '';\n\n\t\t$langs->load('products');\n\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t$langs->load(\"productbatch\");\n\t\t}\n\n\t\tif ($type == 2) {\n\t\t\tswitch ($mode) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$label = ($status == 0 ? $langs->transnoentitiesnoconv('ProductStatusNotOnBatch') : ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatch') : $langs->transnoentitiesnoconv('ProductStatusOnSerial')));\n\t\t\t\t\treturn dolGetStatus($label);\n\t\t\t\tcase 1:\n\t\t\t\t\t$label = ($status == 0 ? $langs->transnoentitiesnoconv('ProductStatusNotOnBatchShort') : ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatchShort') : $langs->transnoentitiesnoconv('ProductStatusOnSerialShort')));\n\t\t\t\t\treturn dolGetStatus($label);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn $this->LibStatut($status, 3, 2).' '.$this->LibStatut($status, 1, 2);\n\t\t\t\tcase 3:\n\t\t\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('ProductStatusNotOnBatch'), '', '', empty($status) ? 'status5' : 'status4', 3, 'dot');\n\t\t\t\tcase 4:\n\t\t\t\t\treturn $this->LibStatut($status, 3, 2).' '.$this->LibStatut($status, 0, 2);\n\t\t\t\tcase 5:\n\t\t\t\t\treturn $this->LibStatut($status, 1, 2).' '.$this->LibStatut($status, 3, 2);\n\t\t\t\tdefault:\n\t\t\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('Unknown'));\n\t\t\t}\n\t\t}\n\n\t\t$statuttrans = empty($status) ? 'status5' : 'status4';\n\n\t\tif ($status == 0) {\n\t\t\t// $type   0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t\t\tif ($type == 0) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnSellShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnSell');\n\t\t\t} elseif ($type == 1) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnBuyShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnBuy');\n\t\t\t} elseif ($type == 2) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnBatch');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnBatchShort');\n\t\t\t}\n\t\t} elseif ($status == 1) {\n\t\t\t// $type   0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t\t\tif ($type == 0) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnSellShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnSell');\n\t\t\t} elseif ($type == 1) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnBuyShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnBuy');\n\t\t\t} elseif ($type == 2) {\n\t\t\t\t$labelStatus = ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatch') : $langs->transnoentitiesnoconv('ProductStatusOnSerial'));\n\t\t\t\t$labelStatusShort = ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatchShort') : $langs->transnoentitiesnoconv('ProductStatusOnSerialShort'));\n\t\t\t}\n\t\t} elseif ( $type == 2 && $status == 2 ) {\n\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnSerial');\n\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnSerialShort');\n\t\t}\n\n\t\tif ($mode > 6) {\n\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('Unknown'), '', '', 'status0', 0);\n\t\t} else {\n\t\t\treturn dolGetStatus($labelStatus, $labelStatusShort, '', $statuttrans, $mode);\n\t\t}\n\t}\n\n\n\t/**\n\t *  Retour label of nature of product\n\t *\n\t * @return string        Label\n\t */\n\tpublic function getLibFinished()\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('products');\n\n\t\tif (isset($this->finished) && $this->finished >= 0) {\n\t\t\t$sql = \"SELECT label, code FROM \".MAIN_DB_PREFIX.\"c_product_nature where code = \".((int) $this->finished).\" AND active=1\";\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql && $this->db->num_rows($resql) > 0) {\n\t\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t\t$label = $langs->trans($res['label']);\n\t\t\t\t$this->db->free($resql);\n\t\t\t\treturn $label;\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\t\tdol_syslog(__METHOD__.' Error '.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Adjust stock in a warehouse for product\n\t *\n\t * @param  User   $user           user asking change\n\t * @param  int    $id_entrepot    id of warehouse\n\t * @param  double $nbpiece        nb of units (should be always positive, use $movement to decide if we add or remove)\n\t * @param  int    $movement       0 = add, 1 = remove\n\t * @param  string $label          Label of stock movement\n\t * @param  double $price          Unit price HT of product, used to calculate average weighted price (PMP in french). If 0, average weighted price is not changed.\n\t * @param  string $inventorycode  Inventory code\n\t * @param  string $origin_element Origin element type\n\t * @param  int    $origin_id      Origin id of element\n\t * @param  int\t  $disablestockchangeforsubproduct\tDisable stock change for sub-products of kit (usefull only if product is a subproduct)\n\t * @param  array  $extrafields\t  Array of extrafields\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tpublic function correct_stock($user, $id_entrepot, $nbpiece, $movement, $label = '', $price = 0, $inventorycode = '', $origin_element = '', $origin_id = null, $disablestockchangeforsubproduct = 0, $extrafields = null)\n\t{\n\t\t// phpcs:enable\n\t\tif ($id_entrepot) {\n\t\t\t$this->db->begin();\n\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/stock/class/mouvementstock.class.php';\n\n\t\t\tif ($nbpiece < 0) {\n\t\t\t\tif (!$movement) {\n\t\t\t\t\t$movement = 1;\n\t\t\t\t}\n\t\t\t\t$nbpiece = abs($nbpiece);\n\t\t\t}\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock = new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id); // Set ->origin_type and ->origin_id\n\t\t\t$result = $movementstock->_create($user, $this->id, $id_entrepot, $op[$movement], $movement, $price, $label, $inventorycode, '', '', '', '', false, 0, $disablestockchangeforsubproduct);\n\n\t\t\tif ($result >= 0) {\n\t\t\t\tif ($extrafields) {\n\t\t\t\t\t$array_options = $extrafields->getOptionalsFromPost('stock_mouvement');\n\t\t\t\t\t$movementstock->array_options = $array_options;\n\t\t\t\t\t$movementstock->insertExtraFields();\n\t\t\t\t}\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$this->error = $movementstock->error;\n\t\t\t\t$this->errors = $movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Adjust stock in a warehouse for product with batch number\n\t *\n\t * @param  User     $user           user asking change\n\t * @param  int      $id_entrepot    id of warehouse\n\t * @param  double   $nbpiece        nb of units (should be always positive, use $movement to decide if we add or remove)\n\t * @param  int      $movement       0 = add, 1 = remove\n\t * @param  string   $label          Label of stock movement\n\t * @param  double   $price          Price to use for stock eval\n\t * @param  integer  $dlc            eat-by date\n\t * @param  integer  $dluo           sell-by date\n\t * @param  string   $lot            Lot number\n\t * @param  string   $inventorycode  Inventory code\n\t * @param  string   $origin_element Origin element type\n\t * @param  int      $origin_id      Origin id of element\n\t * @param  int\t    $disablestockchangeforsubproduct\tDisable stock change for sub-products of kit (usefull only if product is a subproduct)\n\t * @param  array    $extrafields\tArray of extrafields\n\t * @return int                      <0 if KO, >0 if OK\n\t */\n\tpublic function correct_stock_batch($user, $id_entrepot, $nbpiece, $movement, $label = '', $price = 0, $dlc = '', $dluo = '', $lot = '', $inventorycode = '', $origin_element = '', $origin_id = null, $disablestockchangeforsubproduct = 0, $extrafields = null)\n\t{\n\t\t// phpcs:enable\n\t\tif ($id_entrepot) {\n\t\t\t$this->db->begin();\n\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/stock/class/mouvementstock.class.php';\n\n\t\t\tif ($nbpiece < 0) {\n\t\t\t\tif (!$movement) {\n\t\t\t\t\t$movement = 1;\n\t\t\t\t}\n\t\t\t\t$nbpiece = abs($nbpiece);\n\t\t\t}\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock = new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id); // Set ->origin_type and ->fk_origin\n\t\t\t$result = $movementstock->_create($user, $this->id, $id_entrepot, $op[$movement], $movement, $price, $label, $inventorycode, '', $dlc, $dluo, $lot, false, 0, $disablestockchangeforsubproduct);\n\n\t\t\tif ($result >= 0) {\n\t\t\t\tif ($extrafields) {\n\t\t\t\t\t$array_options = $extrafields->getOptionalsFromPost('stock_mouvement');\n\t\t\t\t\t$movementstock->array_options = $array_options;\n\t\t\t\t\t$movementstock->insertExtraFields();\n\t\t\t\t}\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$this->error = $movementstock->error;\n\t\t\t\t$this->errors = $movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Load information about stock of a product into ->stock_reel, ->stock_warehouse[] (including stock_warehouse[idwarehouse]->detail_batch for batch products)\n\t * This function need a lot of load. If you use it on list, use a cache to execute it once for each product id.\n\t * If ENTREPOT_EXTRA_STATUS is set, filtering on warehouse status is possible.\n\t *\n\t * @param  \tstring \t$option \t\t\t\t\t'' = Load all stock info, also from closed and internal warehouses, 'nobatch', 'novirtual'\n\t * \t\t\t\t\t\t\t\t\t\t\t\tYou can also filter on 'warehouseclosed', 'warehouseopen', 'warehouseinternal'\n\t * @param\tint\t\t$includedraftpoforvirtual\tInclude draft status of PO for virtual stock calculation\n\t * @return \tint                  \t\t\t\t< 0 if KO, > 0 if OK\n\t * @see    \tload_virtual_stock(), loadBatchInfo()\n\t */\n\tpublic function load_stock($option = '', $includedraftpoforvirtual = null)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$this->stock_reel = 0;\n\t\t$this->stock_warehouse = array();\n\t\t$this->stock_theorique = 0;\n\n\t\t// Set filter on warehouse status\n\t\t$warehouseStatus = array();\n\t\tif (preg_match('/warehouseclosed/', $option)) {\n\t\t\t$warehouseStatus[Entrepot::STATUS_CLOSED] = Entrepot::STATUS_CLOSED;\n\t\t}\n\t\tif (preg_match('/warehouseopen/', $option)) {\n\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_ALL] = Entrepot::STATUS_OPEN_ALL;\n\t\t}\n\t\tif (preg_match('/warehouseinternal/', $option)) {\n\t\t\tif (!empty($conf->global->ENTREPOT_EXTRA_STATUS)) {\n\t\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_INTERNAL] = Entrepot::STATUS_OPEN_INTERNAL;\n\t\t\t} else {\n\t\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_ALL] = Entrepot::STATUS_OPEN_ALL;\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT ps.rowid, ps.reel, ps.fk_entrepot\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"entrepot as w\";\n\t\t$sql .= \" WHERE w.entity IN (\".getEntity('stock').\")\";\n\t\t$sql .= \" AND w.rowid = ps.fk_entrepot\";\n\t\t$sql .= \" AND ps.fk_product = \".((int) $this->id);\n\t\tif (count($warehouseStatus)) {\n\t\t\t$sql .= \" AND w.statut IN (\".$this->db->sanitize(implode(',', $warehouseStatus)).\")\";\n\t\t}\n\n\t\t$sql .= \" ORDER BY ps.reel \".(!empty($conf->global->DO_NOT_TRY_TO_DEFRAGMENT_STOCKS_WAREHOUSE)?'DESC':'ASC'); // Note : qty ASC is important for expedition card, to avoid stock fragmentation;\n\n\t\tdol_syslog(get_class($this).\"::load_stock\", LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i = 0;\n\t\t\tif ($num > 0) {\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$row = $this->db->fetch_object($result);\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot] = new stdClass();\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->real = $row->reel;\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->id = $row->rowid;\n\t\t\t\t\tif ((!preg_match('/nobatch/', $option)) && $this->hasbatch()) {\n\t\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->detail_batch = Productbatch::findAll($this->db, $row->rowid, 1, $this->id);\n\t\t\t\t\t}\n\t\t\t\t\t$this->stock_reel += $row->reel;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($result);\n\n\t\t\tif (!preg_match('/novirtual/', $option)) {\n\t\t\t\t$this->load_virtual_stock($includedraftpoforvirtual); // This also load all arrays stats_xxx...\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load value ->stock_theorique of a product. Property this->id must be defined.\n\t *  This function need a lot of load. If you use it on list, use a cache to execute it one for each product id.\n\t *\n\t * \t@param\tint\t\t$includedraftpoforvirtual\tInclude draft status and not yet approved Purchase Orders for virtual stock calculation\n\t *  @return int     \t\t\t\t\t\t\t< 0 if KO, > 0 if OK\n\t *  @see\tload_stock(), loadBatchInfo()\n\t */\n\tpublic function load_virtual_stock($includedraftpoforvirtual = null)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $hookmanager, $action;\n\n\t\t$stock_commande_client = 0;\n\t\t$stock_commande_fournisseur = 0;\n\t\t$stock_sending_client = 0;\n\t\t$stock_reception_fournisseur = 0;\n\t\t$stock_inproduction = 0;\n\n\t\t//dol_syslog(\"load_virtual_stock\");\n\n\t\tif (!empty($conf->commande->enabled)) {\n\t\t\t$result = $this->load_stats_commande(0, '1,2', 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_commande_client = $this->stats_commande['qty'];\n\t\t}\n\t\tif (!empty($conf->expedition->enabled)) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/expedition/class/expedition.class.php';\n\t\t\t$filterShipmentStatus = '';\n\t\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT)) {\n\t\t\t\t$filterShipmentStatus = Expedition::STATUS_VALIDATED.','.Expedition::STATUS_CLOSED;\n\t\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n\t\t\t\t$filterShipmentStatus = Expedition::STATUS_CLOSED;\n\t\t\t}\n\t\t\t$result = $this->load_stats_sending(0, '1,2', 1, $filterShipmentStatus);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_sending_client = $this->stats_expedition['qty'];\n\t\t}\n\t\tif ((!empty($conf->fournisseur->enabled) && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD)) || !empty($conf->supplier_order->enabled)) {\n\t\t\t$filterStatus = empty($conf->global->SUPPLIER_ORDER_STATUS_FOR_VIRTUAL_STOCK) ? '3,4' : $conf->global->SUPPLIER_ORDER_STATUS_FOR_VIRTUAL_STOCK;\n\t\t\tif (isset($includedraftpoforvirtual)) {\n\t\t\t\t$filterStatus = '0,1,2,'.$filterStatus;\t// 1,2 may have already been inside $filterStatus but it is better to have twice than missing $filterStatus does not include them\n\t\t\t}\n\t\t\t$result = $this->load_stats_commande_fournisseur(0, $filterStatus, 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_commande_fournisseur = $this->stats_commande_fournisseur['qty'];\n\t\t}\n\t\tif (((!empty($conf->fournisseur->enabled) && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD)) || !empty($conf->supplier_order->enabled) || !empty($conf->supplier_invoice->enabled)) && !empty($conf->reception->enabled)) {\n\t\t\t$filterStatus = '4';\n\t\t\tif (isset($includedraftpoforvirtual)) {\n\t\t\t\t$filterStatus = '0,'.$filterStatus;\n\t\t\t}\n\t\t\t$result = $this->load_stats_reception(0, $filterStatus, 1); // Use same tables than when module reception is not used.\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_reception_fournisseur = $this->stats_reception['qty'];\n\t\t}\n\t\tif (!empty($conf->mrp->enabled)) {\n\t\t\t$result = $this->load_stats_inproduction(0, '1,2', 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_inproduction = $this->stats_mrptoproduce['qty'] - $this->stats_mrptoconsume['qty'];\n\t\t}\n\n\t\t$this->stock_theorique = $this->stock_reel + $stock_inproduction;\n\n\t\t// Stock decrease mode\n\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT) || !empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n\t\t\t$this->stock_theorique -= ($stock_commande_client - $stock_sending_client);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_VALIDATE_ORDER)) {\n\t\t\t$this->stock_theorique += 0;\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n\t\t\t$this->stock_theorique -= $stock_commande_client;\n\t\t}\n\t\t// Stock Increase mode\n\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_RECEPTION) || !empty($conf->global->STOCK_CALCULATE_ON_RECEPTION_CLOSE)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_DISPATCH_ORDER)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_VALIDATE_ORDER)) {\n\t\t\t$this->stock_theorique -= $stock_reception_fournisseur;\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_BILL)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t}\n\n\t\tif (!is_object($hookmanager)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/hookmanager.class.php';\n\t\t\t$hookmanager = new HookManager($this->db);\n\t\t}\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters = array('id'=>$this->id, 'includedraftpoforvirtual' => $includedraftpoforvirtual);\n\t\t// Note that $action and $object may have been modified by some hooks\n\t\t$reshook = $hookmanager->executeHooks('loadvirtualstock', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stock_theorique = $hookmanager->resArray['stock_theorique'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\n\t/**\n\t *  Load existing information about a serial\n\t *\n\t * @param  string $batch Lot/serial number\n\t * @return array                    Array with record into product_batch\n\t * @see    load_stock(), load_virtual_stock()\n\t */\n\tpublic function loadBatchInfo($batch)\n\t{\n\t\t$result = array();\n\n\t\t$sql = \"SELECT pb.batch, pb.eatby, pb.sellby, SUM(pb.qty) AS qty FROM \".MAIN_DB_PREFIX.\"product_batch as pb, \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql .= \" WHERE pb.fk_product_stock = ps.rowid AND ps.fk_product = \".((int) $this->id).\" AND pb.batch = '\".$this->db->escape($batch).\"'\";\n\t\t$sql .= \" GROUP BY pb.batch, pb.eatby, pb.sellby\";\n\t\tdol_syslog(get_class($this).\"::loadBatchInfo load first entry found for lot/serial = \".$batch, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$result[] = array('batch'=>$batch, 'eatby'=>$this->db->jdate($obj->eatby), 'sellby'=>$this->db->jdate($obj->sellby), 'qty'=>$obj->qty);\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\treturn $result;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->db->rollback();\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Move an uploaded file described into $file array into target directory $sdir.\n\t *\n\t * @param  string $sdir Target directory\n\t * @param  string $file Array of file info of file to upload: array('name'=>..., 'tmp_name'=>...)\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tpublic function add_photo($sdir, $file)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$result = 0;\n\n\t\t$dir = $sdir;\n\t\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {\n\t\t\t$dir .= '/'.get_exdir($this->id, 2, 0, 0, $this, 'product').$this->id.\"/photos\";\n\t\t} else {\n\t\t\t$dir .= '/'.get_exdir(0, 0, 0, 0, $this, 'product').dol_sanitizeFileName($this->ref);\n\t\t}\n\n\t\tdol_mkdir($dir);\n\n\t\t$dir_osencoded = $dir;\n\n\t\tif (is_dir($dir_osencoded)) {\n\t\t\t$originImage = $dir.'/'.$file['name'];\n\n\t\t\t// Cree fichier en taille origine\n\t\t\t$result = dol_move_uploaded_file($file['tmp_name'], $originImage, 1);\n\n\t\t\tif (file_exists(dol_osencode($originImage))) {\n\t\t\t\t// Create thumbs\n\t\t\t\t$this->addThumbs($originImage);\n\t\t\t}\n\t\t}\n\n\t\tif (is_numeric($result) && $result > 0) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return if at least one photo is available\n\t *\n\t * @param  string $sdir Directory to scan\n\t * @return boolean                 True if at least one photo is available, False if not\n\t */\n\tpublic function is_photo_available($sdir)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\tglobal $conf;\n\n\t\t$dir = $sdir;\n\t\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {\n\t\t\t$dir .= '/'.get_exdir($this->id, 2, 0, 0, $this, 'product').$this->id.\"/photos/\";\n\t\t} else {\n\t\t\t$dir .= '/'.get_exdir(0, 0, 0, 0, $this, 'product');\n\t\t}\n\n\t\t$nbphoto = 0;\n\n\t\t$dir_osencoded = dol_osencode($dir);\n\t\tif (file_exists($dir_osencoded)) {\n\t\t\t$handle = opendir($dir_osencoded);\n\t\t\tif (is_resource($handle)) {\n\t\t\t\twhile (($file = readdir($handle)) !== false) {\n\t\t\t\t\tif (!utf8_check($file)) {\n\t\t\t\t\t\t$file = utf8_encode($file); // To be sure data is stored in UTF8 in memory\n\t\t\t\t\t}\n\t\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return an array with all photos of product found on disk. There is no sorting criteria.\n\t *\n\t * @param  string $dir   \tDirectory to scan\n\t * @param  int    $nbmax \tNumber maxium of photos (0=no maximum)\n\t * @return array            Array of photos\n\t */\n\tpublic function liste_photos($dir, $nbmax = 0)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$nbphoto = 0;\n\t\t$tabobj = array();\n\n\t\t$dir_osencoded = dol_osencode($dir);\n\t\t$handle = @opendir($dir_osencoded);\n\t\tif (is_resource($handle)) {\n\t\t\twhile (($file = readdir($handle)) !== false) {\n\t\t\t\tif (!utf8_check($file)) {\n\t\t\t\t\t$file = utf8_encode($file); // readdir returns ISO\n\t\t\t\t}\n\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0) {\n\t\t\t\t\t$nbphoto++;\n\n\t\t\t\t\t// We forge name of thumb.\n\t\t\t\t\t$photo = $file;\n\t\t\t\t\t$photo_vignette = '';\n\t\t\t\t\t$regs = array();\n\t\t\t\t\tif (preg_match('/('.$this->regeximgext.')$/i', $photo, $regs)) {\n\t\t\t\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $photo).'_small'.$regs[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t$dirthumb = $dir.'thumbs/';\n\n\t\t\t\t\t// Objet\n\t\t\t\t\t$obj = array();\n\t\t\t\t\t$obj['photo'] = $photo;\n\t\t\t\t\tif ($photo_vignette && dol_is_file($dirthumb.$photo_vignette)) {\n\t\t\t\t\t\t$obj['photo_vignette'] = 'thumbs/'.$photo_vignette;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$obj['photo_vignette'] = \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t$tabobj[$nbphoto - 1] = $obj;\n\n\t\t\t\t\t// Do we have to continue with next photo ?\n\t\t\t\t\tif ($nbmax && $nbphoto >= $nbmax) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclosedir($handle);\n\t\t}\n\n\t\treturn $tabobj;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Delete a photo and its thumbs\n\t *\n\t * @param  string $file \tPath to image file\n\t * @return void\n\t */\n\tpublic function delete_photo($file)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$dir = dirname($file).'/'; // Chemin du dossier contenant l'image d'origine\n\t\t$dirthumb = $dir.'/thumbs/'; // Chemin du dossier contenant la vignette\n\t\t$filename = preg_replace('/'.preg_quote($dir, '/').'/i', '', $file); // Nom du fichier\n\n\t\t// On efface l'image d'origine\n\t\tdol_delete_file($file, 0, 0, 0, $this); // For triggers\n\n\t\t// Si elle existe, on efface la vignette\n\t\tif (preg_match('/('.$this->regeximgext.')$/i', $filename, $regs)) {\n\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $filename).'_small'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette))) {\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\n\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $filename).'_mini'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette))) {\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load size of image file\n\t *\n\t * @param  string $file Path to file\n\t * @return void\n\t */\n\tpublic function get_image_size($file)\n\t{\n\t\t// phpcs:enable\n\t\t$file_osencoded = dol_osencode($file);\n\t\t$infoImg = getimagesize($file_osencoded); // Get information on image\n\t\t$this->imgWidth = $infoImg[0]; // Largeur de l'image\n\t\t$this->imgHeight = $infoImg[1]; // Hauteur de l'image\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load indicators this->nb for the dashboard\n\t *\n\t * @return int                 <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(p.rowid) as nb, fk_product_type\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql .= ' WHERE p.entity IN ('.getEntity($this->element, 1).')';\n\t\t// Add where from hooks\n\t\tif (is_object($hookmanager)) {\n\t\t\t$parameters = array();\n\t\t\t$reshook = $hookmanager->executeHooks('printFieldListWhere', $parameters); // Note that $action and $object may have been modified by hook\n\t\t\t$sql .= $hookmanager->resPrint;\n\t\t}\n\t\t$sql .= ' GROUP BY fk_product_type';\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\tif ($obj->fk_product_type == 1) {\n\t\t\t\t\t$this->nb[\"services\"] = $obj->nb;\n\t\t\t\t} else {\n\t\t\t\t\t$this->nb[\"products\"] = $obj->nb;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return if object is a product\n\t *\n\t * @return boolean     True if it's a product\n\t */\n\tpublic function isProduct()\n\t{\n\t\treturn ($this->type == Product::TYPE_PRODUCT ? true : false);\n\t}\n\n\t/**\n\t * Return if object is a product\n\t *\n\t * @return boolean     True if it's a service\n\t */\n\tpublic function isService()\n\t{\n\t\treturn ($this->type == Product::TYPE_SERVICE ? true : false);\n\t}\n\n\n\t/**\n\t * Return if  object have a constraint on mandatory_period\n\t *\n\t * @return boolean     True if mandatory_period setted to 1\n\t */\n\tpublic function isMandatoryPeriod()\n\t{\n\t\treturn ($this->mandatory_period == 1 ? true : false);\n\t}\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Get a barcode from the module to generate barcode values.\n\t *  Return value is stored into this->barcode\n\t *\n\t * @param  Product $object Object product or service\n\t * @param  string  $type   Barcode type (ean, isbn, ...)\n\t * @return string\n\t */\n\tpublic function get_barcode($object, $type = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$result = '';\n\t\tif (!empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t\t\t$dirsociete = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\t\t\tforeach ($dirsociete as $dirroot) {\n\t\t\t\t$res = dol_include_once($dirroot.$conf->global->BARCODE_PRODUCT_ADDON_NUM.'.php');\n\t\t\t\tif ($res) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$var = $conf->global->BARCODE_PRODUCT_ADDON_NUM;\n\t\t\t$mod = new $var;\n\n\t\t\t$result = $mod->getNextValue($object, $type);\n\n\t\t\tdol_syslog(get_class($this).\"::get_barcode barcode=\".$result.\" module=\".$var);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *    id must be 0 if object instance is a specimen.\n\t *\n\t * @return void\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $user, $langs, $conf, $mysoc;\n\n\t\t$now = dol_now();\n\n\t\t// Initialize parameters\n\t\t$this->specimen = 1;\n\t\t$this->id = 0;\n\t\t$this->ref = 'PRODUCT_SPEC';\n\t\t$this->label = 'PRODUCT SPECIMEN';\n\t\t$this->description = 'This is description of this product specimen that was created the '.dol_print_date($now, 'dayhourlog').'.';\n\t\t$this->specimen = 1;\n\t\t$this->country_id = 1;\n\t\t$this->tosell = 1;\n\t\t$this->tobuy = 1;\n\t\t$this->tobatch = 0;\n\t\t$this->note = 'This is a comment (private)';\n\t\t$this->date_creation = $now;\n\t\t$this->date_modification = $now;\n\n\t\t$this->weight = 4;\n\t\t$this->weight_units = 3;\n\n\t\t$this->length = 5;\n\t\t$this->length_units = 1;\n\t\t$this->width = 6;\n\t\t$this->width_units = 0;\n\t\t$this->height = null;\n\t\t$this->height_units = null;\n\n\t\t$this->surface = 30;\n\t\t$this->surface_units = 0;\n\t\t$this->volume = 300;\n\t\t$this->volume_units = 0;\n\n\t\t$this->barcode = -1; // Create barcode automatically\n\t}\n\n\t/**\n\t *    Returns the text label from units dictionary\n\t *\n\t * @param  string $type Label type (long or short)\n\t * @return string|int <0 if ko, label if ok\n\t */\n\tpublic function getLabelOfUnit($type = 'long')\n\t{\n\t\tglobal $langs;\n\n\t\tif (!$this->fk_unit) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$langs->load('products');\n\n\t\t$label_type = 'label';\n\t\tif ($type == 'short') {\n\t\t\t$label_type = 'short_label';\n\t\t}\n\n\t\t$sql = \"SELECT \".$label_type.\", code from \".MAIN_DB_PREFIX.\"c_units where rowid = \".((int) $this->fk_unit);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql && $this->db->num_rows($resql) > 0) {\n\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t$label = ($label_type == 'short_label' ? $res[$label_type] : 'unit'.$res['code']);\n\t\t\t$this->db->free($resql);\n\t\t\treturn $label;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\tdol_syslog(get_class($this).\"::getLabelOfUnit Error \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return if object has a sell-by date or eat-by date\n\t *\n\t * @return boolean     True if it's has\n\t */\n\tpublic function hasbatch()\n\t{\n\t\treturn ($this->status_batch > 0 ? true : false);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return minimum product recommended price\n\t *\n\t * @return int            Minimum recommanded price that is higher price among all suppliers * PRODUCT_MINIMUM_RECOMMENDED_PRICE\n\t */\n\tpublic function min_recommended_price()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$maxpricesupplier = 0;\n\n\t\tif (!empty($conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t\t$product_fourn = new ProductFournisseur($this->db);\n\t\t\t$product_fourn_list = $product_fourn->list_product_fournisseur_price($this->id, '', '');\n\n\t\t\tif (is_array($product_fourn_list) && count($product_fourn_list) > 0) {\n\t\t\t\tforeach ($product_fourn_list as $productfourn) {\n\t\t\t\t\tif ($productfourn->fourn_unitprice > $maxpricesupplier) {\n\t\t\t\t\t\t$maxpricesupplier = $productfourn->fourn_unitprice;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$maxpricesupplier *= $conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE;\n\t\t\t}\n\t\t}\n\n\t\treturn $maxpricesupplier;\n\t}\n\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param  int[]|int $categories Category or categories IDs\n\t * @return void\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\t\treturn parent::setCategoriesCommon($categories, Categorie::TYPE_PRODUCT);\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param  DoliDB $db        Database handler\n\t * @param  int    $origin_id Old thirdparty id\n\t * @param  int    $dest_id   New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'product_customer_price',\n\t\t\t'product_customer_price_log'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Generates prices for a product based on product multiprice generation rules\n\t *\n\t * @param  User   $user       User that updates the prices\n\t * @param  float  $baseprice  Base price\n\t * @param  string $price_type Base price type\n\t * @param  float  $price_vat  VAT % tax\n\t * @param  int    $npr        NPR\n\t * @param  string $psq        \u00bf?\n\t * @return int -1 KO, 1 OK\n\t */\n\tpublic function generateMultiprices(User $user, $baseprice, $price_type, $price_vat, $npr, $psq)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t$sql = \"SELECT rowid, level, fk_level, var_percent, var_min_percent FROM \".MAIN_DB_PREFIX.\"product_pricerules\";\n\t\t$query = $this->db->query($sql);\n\n\t\t$rules = array();\n\n\t\twhile ($result = $this->db->fetch_object($query)) {\n\t\t\t$rules[$result->level] = $result;\n\t\t}\n\n\t\t//Because prices can be based on other level's prices, we temporarily store them\n\t\t$prices = array(\n\t\t\t1 => $baseprice\n\t\t);\n\n\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t$price = $baseprice;\n\t\t\t$price_min = $baseprice;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\t//First price level only allows changing min_price\n\t\t\tif ($i > 1 && isset($rules[$i]->var_percent) && $rules[$i]->var_percent) {\n\t\t\t\t$price = $prices[$rules[$i]->fk_level] * (1 + ($rules[$i]->var_percent / 100));\n\t\t\t}\n\n\t\t\t$prices[$i] = $price;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\tif (isset($rules[$i]->var_min_percent) && $rules[$i]->var_min_percent) {\n\t\t\t\t$price_min = $price * (1 - ($rules[$i]->var_min_percent / 100));\n\t\t\t}\n\n\t\t\t//Little check to make sure the price is modified before triggering generation\n\t\t\t$check_amount = (($price == $this->multiprices[$i]) && ($price_min == $this->multiprices_min[$i]));\n\t\t\t$check_type = ($baseprice == $this->multiprices_base_type[$i]);\n\n\t\t\tif ($check_amount && $check_type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($this->updatePrice($price, $price_type, $user, $price_vat, $price_min, $i, $npr, $psq, true) < 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Returns the rights used for this class\n\t *\n\t * @return Object\n\t */\n\tpublic function getRights()\n\t{\n\t\tglobal $user;\n\n\t\tif ($this->isProduct()) {\n\t\t\treturn $user->rights->produit;\n\t\t} else {\n\t\t\treturn $user->rights->service;\n\t\t}\n\t}\n\n\t/**\n\t *  Load information for tab info\n\t *\n\t * @param  int $id Id of thirdparty to load\n\t * @return void\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = \"SELECT p.rowid, p.ref, p.datec as date_creation, p.tms as date_modification,\";\n\t\t$sql .= \" p.fk_user_author, p.fk_user_modif\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as p\";\n\t\t$sql .= \" WHERE p.rowid = \".((int) $id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\tif ($obj->fk_user_author) {\n\t\t\t\t\t$cuser = new User($this->db);\n\t\t\t\t\t$cuser->fetch($obj->fk_user_author);\n\t\t\t\t\t$this->user_creation = $cuser;\n\t\t\t\t}\n\n\t\t\t\tif ($obj->fk_user_modif) {\n\t\t\t\t\t$muser = new User($this->db);\n\t\t\t\t\t$muser->fetch($obj->fk_user_modif);\n\t\t\t\t\t$this->user_modification = $muser;\n\t\t\t\t}\n\n\t\t\t\t$this->ref = $obj->ref;\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->date_creation);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n}\n\n\n\n/**\n * Class to manage products or services.\n * Do not use 'Service' as class name since it is already used by APIs.\n */\nclass ProductService extends Product\n{\n\tpublic $picto = 'service';\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2001-2007\tRodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2016\tLaurent Destailleur\t <eldy@users.sourceforge.net>\n * Copyright (C) 2005\t\tEric Seigne\t\t     <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t <regis.houssin@capnetworks.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t <acianfa@free.fr>\n * Copyright (C) 2006\t\tAuguria SARL\t\t <info@auguria.org>\n * Copyright (C) 2010-2015\tJuanjo Menent\t\t <jmenent@2byte.es>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t <marcosgdf@gmail.com>\n * Copyright (C) 2012-2013\tC\u00e9dric Salvador\t\t <csalvador@gpcsolutions.fr>\n * Copyright (C) 2011-2020\tAlexandre Spangaro\t <aspangaro@open-dsi.fr>\n * Copyright (C) 2014\t\tC\u00e9dric Gross\t\t <c.gross@kreiz-it.fr>\n * Copyright (C) 2014-2015\tFerran Marcet\t\t <fmarcet@2byte.es>\n * Copyright (C) 2015\t\tJean-Fran\u00e7ois Ferry\t <jfefe@aternatik.fr>\n * Copyright (C) 2015\t\tRapha\u00ebl Doursenaud\t <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2016\t\tCharlie Benke\t\t <charlie@patas-monkey.com>\n * Copyright (C) 2016\t\tMeziane Sof\t\t     <virtualsof@yahoo.fr>\n * Copyright (C) 2017\t\tJosep Llu\u00eds Amador\t <joseplluis@lliuretic.cat>\n * Copyright (C) 2019-2021  Fr\u00e9d\u00e9ric France      <frederic.france@netlogic.fr>\n * Copyright (C) 2019-2020  Thibault FOUCART     <support@ptibogxiv.net>\n * Copyright (C) 2020  \t\tPierre Ardoin     \t <mapiolca@me.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/product/card.php\n *  \\ingroup    product\n *  \\brief      Page to show product\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/canvas.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/product.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/html.formproduct.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/genericobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/modules/product/modules_product.class.php';\n\nif (!empty($conf->propal->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/comm/propal/class/propal.class.php';\n}\nif (!empty($conf->facture->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/compta/facture/class/facture.class.php';\n}\nif (!empty($conf->commande->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/commande/class/commande.class.php';\n}\nif (!empty($conf->accounting->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formaccounting.class.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/accountancy/class/accountingaccount.class.php';\n}\nif (!empty($conf->bom->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/bom/class/bom.class.php';\n}\n\n// Load translation files required by the page\n$langs->loadLangs(array('products', 'other'));\nif (!empty($conf->stock->enabled)) {\n\t$langs->load(\"stocks\");\n}\nif (!empty($conf->facture->enabled)) {\n\t$langs->load(\"bills\");\n}\nif (!empty($conf->productbatch->enabled)) {\n\t$langs->load(\"productbatch\");\n}\n\n$mesg = ''; $error = 0; $errors = array();\n\n$refalreadyexists = 0;\n\n$id = GETPOST('id', 'int');\n$ref = (GETPOSTISSET('ref') ? GETPOST('ref', 'alpha') : null);\n$type = (GETPOSTISSET('type') ? GETPOST('type', 'int') : Product::TYPE_PRODUCT);\n$action = (GETPOST('action', 'alpha') ? GETPOST('action', 'alpha') : 'view');\n$cancel = GETPOST('cancel', 'alpha');\n$backtopage = GETPOST('backtopage', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n$socid = GETPOST('socid', 'int');\n$duration_value = GETPOST('duration_value', 'int');\n$duration_unit = GETPOST('duration_unit', 'alpha');\n\n$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\n$checkmandatory = GETPOST('accountancy_code_buy_export', 'alpha');\n// by default 'alphanohtml' (better security); hidden conf MAIN_SECURITY_ALLOW_UNSECURED_LABELS_WITH_HTML allows basic html\n$label_security_check = empty($conf->global->MAIN_SECURITY_ALLOW_UNSECURED_LABELS_WITH_HTML) ? 'alphanohtml' : 'restricthtml';\n\nif (!empty($user->socid)) {\n\t$socid = $user->socid;\n}\n\n// Load object modCodeProduct\n$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\nif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t$module = substr($module, 0, dol_strlen($module) - 4);\n}\n$result = dol_include_once('/core/modules/product/'.$module.'.php');\nif ($result > 0) {\n\t$modCodeProduct = new $module();\n}\n\n$object = new Product($db);\n$object->type = $type; // so test later to fill $usercancxxx is correct\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n\nif ($id > 0 || !empty($ref)) {\n\t$result = $object->fetch($id, $ref);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error, $object->errors);\n\t}\n\tif (!empty($conf->product->enabled)) {\n\t\t$upload_dir = $conf->product->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);\n\t} elseif (!empty($conf->service->enabled)) {\n\t\t$upload_dir = $conf->service->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);\n\t}\n\n\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {    // For backward compatiblity, we scan also old dirs\n\t\tif (!empty($conf->product->enabled)) {\n\t\t\t$upload_dirold = $conf->product->multidir_output[$object->entity].'/'.substr(substr(\"000\".$object->id, -2), 1, 1).'/'.substr(substr(\"000\".$object->id, -2), 0, 1).'/'.$object->id.\"/photos\";\n\t\t} else {\n\t\t\t$upload_dirold = $conf->service->multidir_output[$object->entity].'/'.substr(substr(\"000\".$object->id, -2), 1, 1).'/'.substr(substr(\"000\".$object->id, -2), 0, 1).'/'.$object->id.\"/photos\";\n\t\t}\n\t}\n}\n\n$modulepart = 'product';\n\n// Get object canvas (By default, this is not defined, so standard usage of dolibarr)\n$canvas = !empty($object->canvas) ? $object->canvas : GETPOST(\"canvas\");\n$objcanvas = null;\nif (!empty($canvas)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/canvas.class.php';\n\t$objcanvas = new Canvas($db, $action);\n\t$objcanvas->getCanvas('product', 'card', $canvas);\n}\n\n// Security check\n$fieldvalue = (!empty($id) ? $id : (!empty($ref) ? $ref : ''));\n$fieldtype = (!empty($id) ? 'rowid' : 'ref');\n\nif ($object->id > 0) {\n\tif ($object->type == $object::TYPE_PRODUCT) {\n\t\trestrictedArea($user, 'produit', $object->id, 'product&product', '', '');\n\t}\n\tif ($object->type == $object::TYPE_SERVICE) {\n\t\trestrictedArea($user, 'service', $object->id, 'product&product', '', '');\n\t}\n} else {\n\trestrictedArea($user, 'produit|service', $fieldvalue, 'product&product', '', '', $fieldtype);\n}\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('productcard', 'globalcard'));\n\n$usercanread = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->lire) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->lire));\n$usercancreate = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->creer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->creer));\n$usercandelete = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->supprimer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->supprimer));\n\n\n/*\n * Actions\n */\n\nif ($cancel) {\n\t$action = '';\n}\n\n$createbarcode = empty($conf->barcode->enabled) ? 0 : 1;\nif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->creer_advance)) {\n\t$createbarcode = 0;\n}\n\n$parameters = array('id'=>$id, 'ref'=>$ref, 'objcanvas'=>$objcanvas);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\t$backurlforlist = DOL_URL_ROOT.'/product/list.php?type='.$type;\n\n\tif (empty($backtopage) || ($cancel && empty($id))) {\n\t\tif (empty($backtopage) || ($cancel && strpos($backtopage, '__ID__'))) {\n\t\t\tif (empty($id) && (($action != 'add' && $action != 'create') || $cancel)) {\n\t\t\t\t$backtopage = $backurlforlist;\n\t\t\t} else {\n\t\t\t\t$backtopage = DOL_URL_ROOT.'/product/card.php?id='.((!empty($id) && $id > 0) ? $id : '__ID__');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($cancel) {\n\t\tif (!empty($backtopageforcancel)) {\n\t\t\theader(\"Location: \".$backtopageforcancel);\n\t\t\texit;\n\t\t} elseif (!empty($backtopage)) {\n\t\t\theader(\"Location: \".$backtopage);\n\t\t\texit;\n\t\t}\n\t\t$action = '';\n\t}\n\n\t// Type\n\tif ($action == 'setfk_product_type' && $usercancreate) {\n\t\t$result = $object->setValueFrom('fk_product_type', GETPOST('fk_product_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\texit;\n\t}\n\n\t// Actions to build doc\n\t$upload_dir = $conf->product->dir_output;\n\t$permissiontoadd = $usercancreate;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_printing.inc.php';\n\n\t// Barcode type\n\tif ($action == 'setfk_barcode_type' && $createbarcode) {\n\t\t$result = $object->setValueFrom('fk_barcode_type', GETPOST('fk_barcode_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\texit;\n\t}\n\n\t// Barcode value\n\tif ($action == 'setbarcode' && $createbarcode) {\n\t\t$result = $object->check_barcode(GETPOST('barcode'), GETPOST('barcode_type_code'));\n\n\t\tif ($result >= 0) {\n\t\t\t$result = $object->setValueFrom('barcode', GETPOST('barcode'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\t\texit;\n\t\t} else {\n\t\t\t$langs->load(\"errors\");\n\t\t\tif ($result == -1) {\n\t\t\t\t$errors[] = 'ErrorBadBarCodeSyntax';\n\t\t\t} elseif ($result == -2) {\n\t\t\t\t$errors[] = 'ErrorBarCodeRequired';\n\t\t\t} elseif ($result == -3) {\n\t\t\t\t$errors[] = 'ErrorBarCodeAlreadyUsed';\n\t\t\t} else {\n\t\t\t\t$errors[] = 'FailedToValidateBarCode';\n\t\t\t}\n\n\t\t\t$error++;\n\t\t\tsetEventMessages($errors, null, 'errors');\n\t\t}\n\t}\n\n\t// Add a product or service\n\tif ($action == 'add' && $usercancreate) {\n\t\t$error = 0;\n\n\t\tif (!GETPOST('label', $label_security_check)) {\n\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Label')), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\t\tif (empty($ref)) {\n\t\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Ref')), null, 'errors');\n\t\t\t\t\t$action = \"create\";\n\t\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\t\tif (!empty($duration_value) && empty($duration_unit)) {\n\t\t\tsetEventMessages($langs->trans('ErrorFieldRequired', $langs->transnoentities('Unit')), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$units = GETPOST('units', 'int');\n\n\t\t\t$object->ref                   = $ref;\n\t\t\t$object->label                 = GETPOST('label', $label_security_check);\n\t\t\t$object->price_base_type       = GETPOST('price_base_type', 'aZ09');\n\t\t\t$object->mandatory_period \t   = !empty(GETPOST(\"mandatoryperiod\", 'alpha')) ? 1 : 0;\n\t\t\tif ($object->price_base_type == 'TTC') {\n\t\t\t\t$object->price_ttc = GETPOST('price');\n\t\t\t} else {\n\t\t\t\t$object->price = GETPOST('price');\n\t\t\t}\n\t\t\tif ($object->price_base_type == 'TTC') {\n\t\t\t\t$object->price_min_ttc = GETPOST('price_min');\n\t\t\t} else {\n\t\t\t\t$object->price_min = GETPOST('price_min');\n\t\t\t}\n\n\t\t\t$tva_tx_txt = GETPOST('tva_tx', 'alpha'); // tva_tx can be '8.5'  or  '8.5*'  or  '8.5 (XXX)' or '8.5* (XXX)'\n\n\t\t\t// We must define tva_tx, npr and local taxes\n\t\t\t$vatratecode = '';\n\t\t\t$tva_tx = preg_replace('/[^0-9\\.].*$/', '', $tva_tx_txt); // keep remove all after the numbers and dot\n\t\t\t$npr = preg_match('/\\*/', $tva_tx_txt) ? 1 : 0;\n\t\t\t$localtax1 = 0; $localtax2 = 0; $localtax1_type = '0'; $localtax2_type = '0';\n\t\t\t// If value contains the unique code of vat line (new recommanded method), we use it to find npr and local taxes\n\t\t\t$reg = array();\n\t\t\tif (preg_match('/\\((.*)\\)/', $tva_tx_txt, $reg)) {\n\t\t\t\t// We look into database using code (we can't use get_localtax() because it depends on buyer that is not known). Same in update price.\n\t\t\t\t$vatratecode = $reg[1];\n\t\t\t\t// Get record from code\n\t\t\t\t$sql = \"SELECT t.rowid, t.code, t.recuperableonly, t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_country as c\";\n\t\t\t\t$sql .= \" WHERE t.fk_pays = c.rowid AND c.code = '\".$db->escape($mysoc->country_code).\"'\";\n\t\t\t\t$sql .= \" AND t.taux = \".((float) $tva_tx).\" AND t.active = 1\";\n\t\t\t\t$sql .= \" AND t.code = '\".$db->escape($vatratecode).\"'\";\n\t\t\t\t$resql = $db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$obj = $db->fetch_object($resql);\n\t\t\t\t\t$npr = $obj->recuperableonly;\n\t\t\t\t\t$localtax1 = $obj->localtax1;\n\t\t\t\t\t$localtax2 = $obj->localtax2;\n\t\t\t\t\t$localtax1_type = $obj->localtax1_type;\n\t\t\t\t\t$localtax2_type = $obj->localtax2_type;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$object->default_vat_code = $vatratecode;\n\t\t\t$object->tva_tx = $tva_tx;\n\t\t\t$object->tva_npr = $npr;\n\t\t\t$object->localtax1_tx = $localtax1;\n\t\t\t$object->localtax2_tx = $localtax2;\n\t\t\t$object->localtax1_type = $localtax1_type;\n\t\t\t$object->localtax2_type = $localtax2_type;\n\n\t\t\t$object->type               \t = $type;\n\t\t\t$object->status             \t = GETPOST('statut');\n\t\t\t$object->status_buy = GETPOST('statut_buy');\n\t\t\t$object->status_batch = GETPOST('status_batch');\n\t\t\t$object->batch_mask = GETPOST('batch_mask');\n\n\t\t\t$object->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t$object->barcode = GETPOST('barcode');\n\t\t\t// Set barcode_type_xxx from barcode_type id\n\t\t\t$stdobject = new GenericObject($db);\n\t\t\t$stdobject->element = 'product';\n\t\t\t$stdobject->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t$result = $stdobject->fetch_barcode();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\t$mesg = 'Failed to get bar code type information ';\n\t\t\t\tsetEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');\n\t\t\t}\n\t\t\t$object->barcode_type_code      = $stdobject->barcode_type_code;\n\t\t\t$object->barcode_type_coder     = $stdobject->barcode_type_coder;\n\t\t\t$object->barcode_type_label     = $stdobject->barcode_type_label;\n\n\t\t\t$object->description        \t = dol_htmlcleanlastbr(GETPOST('desc', 'restricthtml'));\n\t\t\t$object->url = GETPOST('url');\n\t\t\t$object->note_private          \t = dol_htmlcleanlastbr(GETPOST('note_private', 'restricthtml'));\n\t\t\t$object->note               \t = $object->note_private; // deprecated\n\t\t\t$object->customcode              = GETPOST('customcode', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->lifetime               = GETPOST('lifetime', 'int');\n\t\t\t$object->qc_frequency           = GETPOST('qc_frequency', 'int');\n\t\t\t$object->duration_value     \t = $duration_value;\n\t\t\t$object->duration_unit      \t = $duration_unit;\n\t\t\t$object->fk_default_warehouse\t = GETPOST('fk_default_warehouse');\n\t\t\t$object->seuil_stock_alerte \t = GETPOST('seuil_stock_alerte') ?GETPOST('seuil_stock_alerte') : 0;\n\t\t\t$object->desiredstock          = GETPOST('desiredstock') ?GETPOST('desiredstock') : 0;\n\t\t\t$object->canvas             \t = GETPOST('canvas');\n\t\t\t$object->net_measure           = GETPOST('net_measure');\n\t\t\t$object->net_measure_units     = GETPOST('net_measure_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->weight             \t = GETPOST('weight');\n\t\t\t$object->weight_units       \t = GETPOST('weight_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->length             \t = GETPOST('size');\n\t\t\t$object->length_units       \t = GETPOST('size_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->width = GETPOST('sizewidth');\n\t\t\t$object->height             \t = GETPOST('sizeheight');\n\t\t\t$object->surface            \t = GETPOST('surface');\n\t\t\t$object->surface_units      \t = GETPOST('surface_units'); // This is not the fk_unit but the power of unit\n\t\t\t$object->volume             \t = GETPOST('volume');\n\t\t\t$object->volume_units       \t = GETPOST('volume_units'); // This is not the fk_unit but the power of unit\n\t\t\t$finished = GETPOST('finished', 'int');\n\t\t\tif ($finished > 0) {\n\t\t\t\t$object->finished = $finished;\n\t\t\t} else {\n\t\t\t\t$object->finished = null;\n\t\t\t}\n\n\t\t\t$units = GETPOST('units', 'int');\n\t\t\tif ($units > 0) {\n\t\t\t\t$object->fk_unit = $units;\n\t\t\t} else {\n\t\t\t\t$object->fk_unit = null;\n\t\t\t}\n\n\t\t\t$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n\t\t\t$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n\t\t\t$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n\t\t\t$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n\t\t\t$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n\t\t\t$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\n\t\t\tif (empty($accountancy_code_sell) || $accountancy_code_sell == '-1') {\n\t\t\t\t$object->accountancy_code_sell = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_sell_intra) || $accountancy_code_sell_intra == '-1') {\n\t\t\t\t$object->accountancy_code_sell_intra = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_sell_export) || $accountancy_code_sell_export == '-1') {\n\t\t\t\t$object->accountancy_code_sell_export = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy) || $accountancy_code_buy == '-1') {\n\t\t\t\t$object->accountancy_code_buy = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy_intra) || $accountancy_code_buy_intra == '-1') {\n\t\t\t\t$object->accountancy_code_buy_intra = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t}\n\t\t\tif (empty($accountancy_code_buy_export) || $accountancy_code_buy_export == '-1') {\n\t\t\t\t$object->accountancy_code_buy_export = '';\n\t\t\t} else {\n\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t}\n\n\t\t\t// MultiPrix\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\tfor ($i = 2; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\tif (GETPOSTISSET(\"price_\".$i)) {\n\t\t\t\t\t\t$object->multiprices[\"$i\"] = price2num(GETPOST(\"price_\".$i), 'MU');\n\t\t\t\t\t\t$object->multiprices_base_type[\"$i\"] = GETPOST(\"multiprices_base_type_\".$i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->multiprices[\"$i\"] = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif (!$ref && !empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t// Generate ref...\n\t\t\t\t$ref = $modCodeProduct->getNextValue($object, $type);\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$id = $object->create($user);\n\t\t\t}\n\n\t\t\tif ($id > 0) {\n\t\t\t\t// Category association\n\t\t\t\t$categories = GETPOST('categories', 'array');\n\t\t\t\t$object->setCategories($categories);\n\n\t\t\t\tif (!empty($backtopage)) {\n\t\t\t\t\t$backtopage = preg_replace('/__ID__/', $object->id, $backtopage); // New method to autoselect project after a New on another form object creation\n\t\t\t\t\tif (preg_match('/\\?/', $backtopage)) {\n\t\t\t\t\t\t$backtopage .= '&socid='.$object->id; // Old method\n\t\t\t\t\t}\n\t\t\t\t\theader(\"Location: \".$backtopage);\n\t\t\t\t\texit;\n\t\t\t\t} else {\n\t\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$id);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t}\n\t\t\t\t$action = \"create\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update a product or service\n\tif ($action == 'update' && $usercancreate) {\n\t\tif (GETPOST('cancel', 'alpha')) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tif ($object->id > 0) {\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\t\t\t$object->ref                = $ref;\n\t\t\t\t}\n\t\t\t\t$object->label                  = GETPOST('label', $label_security_check);\n\n\t\t\t\t$desc = dol_htmlcleanlastbr(preg_replace('/&nbsp;$/', '', GETPOST('desc', 'restricthtml')));\n\t\t\t\t$object->description            = $desc;\n\n\t\t\t\t$object->url = GETPOST('url');\n\t\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\t\t$object->note_private = dol_htmlcleanlastbr(GETPOST('note_private', 'restricthtml'));\n\t\t\t\t\t$object->note = $object->note_private;\n\t\t\t\t}\n\t\t\t\t$object->customcode             = GETPOST('customcode', 'alpha');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->lifetime               = GETPOST('lifetime', 'int');\n\t\t\t\t$object->qc_frequency           = GETPOST('qc_frequency', 'int');\n\t\t\t\t$object->status                 = GETPOST('statut', 'int');\n\t\t\t\t$object->status_buy             = GETPOST('statut_buy', 'int');\n\t\t\t\t$object->status_batch = GETPOST('status_batch', 'aZ09');\n\t\t\t\t$object->batch_mask = GETPOST('batch_mask', 'alpha');\n\t\t\t\t$object->fk_default_warehouse   = GETPOST('fk_default_warehouse');\n\t\t\t\t// removed from update view so GETPOST always empty\n\t\t\t\t/*\n\t\t\t\t$object->seuil_stock_alerte     = GETPOST('seuil_stock_alerte');\n\t\t\t\t$object->desiredstock           = GETPOST('desiredstock');\n\t\t\t\t*/\n\t\t\t\t$object->duration_value         = GETPOST('duration_value', 'int');\n\t\t\t\t$object->duration_unit          = GETPOST('duration_unit', 'alpha');\n\n\t\t\t\t$object->canvas                 = GETPOST('canvas');\n\t\t\t\t$object->net_measure            = GETPOST('net_measure');\n\t\t\t\t$object->net_measure_units      = GETPOST('net_measure_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->weight                 = GETPOST('weight');\n\t\t\t\t$object->weight_units           = GETPOST('weight_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->length                 = GETPOST('size');\n\t\t\t\t$object->length_units           = GETPOST('size_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->width = GETPOST('sizewidth');\n\t\t\t\t$object->height = GETPOST('sizeheight');\n\n\t\t\t\t$object->surface                = GETPOST('surface');\n\t\t\t\t$object->surface_units          = GETPOST('surface_units'); // This is not the fk_unit but the power of unit\n\t\t\t\t$object->volume                 = GETPOST('volume');\n\t\t\t\t$object->volume_units           = GETPOST('volume_units'); // This is not the fk_unit but the power of unit\n\n\t\t\t\t$finished = GETPOST('finished', 'int');\n\t\t\t\tif ($finished >= 0) {\n\t\t\t\t\t$object->finished = $finished;\n\t\t\t\t} else {\n\t\t\t\t\t$object->finished = null;\n\t\t\t\t}\n\n\t\t\t\t$fk_default_bom = GETPOST('fk_default_bom', 'int');\n\t\t\t\tif ($fk_default_bom >= 0) {\n\t\t\t\t\t$object->fk_default_bom = $fk_default_bom;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fk_default_bom = null;\n\t\t\t\t}\n\n\t\t\t\t$units = GETPOST('units', 'int');\n\t\t\t\tif ($units > 0) {\n\t\t\t\t\t$object->fk_unit = $units;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fk_unit = null;\n\t\t\t\t}\n\n\t\t\t\t$object->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t$object->barcode = GETPOST('barcode');\n\t\t\t\t// Set barcode_type_xxx from barcode_type id\n\t\t\t\t$stdobject = new GenericObject($db);\n\t\t\t\t$stdobject->element = 'product';\n\t\t\t\t$stdobject->barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t$result = $stdobject->fetch_barcode();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$mesg = 'Failed to get bar code type information ';\n\t\t\t\t\tsetEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');\n\t\t\t\t}\n\t\t\t\t$object->barcode_type_code      = $stdobject->barcode_type_code;\n\t\t\t\t$object->barcode_type_coder     = $stdobject->barcode_type_coder;\n\t\t\t\t$object->barcode_type_label     = $stdobject->barcode_type_label;\n\n\t\t\t\t$accountancy_code_sell = GETPOST('accountancy_code_sell', 'alpha');\n\t\t\t\t$accountancy_code_sell_intra = GETPOST('accountancy_code_sell_intra', 'alpha');\n\t\t\t\t$accountancy_code_sell_export = GETPOST('accountancy_code_sell_export', 'alpha');\n\t\t\t\t$accountancy_code_buy = GETPOST('accountancy_code_buy', 'alpha');\n\t\t\t\t$accountancy_code_buy_intra = GETPOST('accountancy_code_buy_intra', 'alpha');\n\t\t\t\t$accountancy_code_buy_export = GETPOST('accountancy_code_buy_export', 'alpha');\n\t\t\t\t$checkmandatory = GETPOST('mandatoryperiod', 'alpha');\n\t\t\t\tif (empty($accountancy_code_sell) || $accountancy_code_sell == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_sell_intra) || $accountancy_code_sell_intra == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell_intra = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_sell_export) || $accountancy_code_sell_export == '-1') {\n\t\t\t\t\t$object->accountancy_code_sell_export = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy) || $accountancy_code_buy == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy_intra) || $accountancy_code_buy_intra == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy_intra = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tif (empty($accountancy_code_buy_export) || $accountancy_code_buy_export == '-1') {\n\t\t\t\t\t$object->accountancy_code_buy_export = '';\n\t\t\t\t} else {\n\t\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t\t}\n\t\t\t\tif ($object->isService()) {\n\t\t\t\t\t$object->mandatory_period =  (!empty($checkmandatory)) ? 1 : 0 ;\n\t\t\t\t}\n\n\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object, '@GETPOSTISSET');\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\tif (!$error && $object->check()) {\n\t\t\t\t\tif ($object->update($object->id, $user) > 0) {\n\t\t\t\t\t\t// Category association\n\t\t\t\t\t\t$categories = GETPOST('categories', 'array');\n\t\t\t\t\t\t$object->setCategories($categories);\n\n\t\t\t\t\t\t$action = 'view';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$action = 'edit';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorProductBadRefOrLabel\"), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t\t$action = 'edit';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action clone object\n\tif ($action == 'confirm_clone' && $confirm != 'yes') {\n\t\t$action = '';\n\t}\n\tif ($action == 'confirm_clone' && $confirm == 'yes' && $usercancreate) {\n\t\tif (!GETPOST('clone_content') && !GETPOST('clone_prices')) {\n\t\t\tsetEventMessages($langs->trans(\"NoCloneOptionsSpecified\"), null, 'errors');\n\t\t} else {\n\t\t\t$db->begin();\n\n\t\t\t$originalId = $id;\n\t\t\tif ($object->id > 0) {\n\t\t\t\t$object->ref = GETPOST('clone_ref', 'alphanohtml');\n\t\t\t\t$object->status = 0;\n\t\t\t\t$object->status_buy = 0;\n\t\t\t\t$object->id = null;\n\t\t\t\t$object->barcode = -1;\n\n\t\t\t\tif ($object->check()) {\n\t\t\t\t\t$object->context['createfromclone'] = 'createfromclone';\n\t\t\t\t\t$id = $object->create($user);\n\t\t\t\t\tif ($id > 0) {\n\t\t\t\t\t\tif (GETPOST('clone_composition')) {\n\t\t\t\t\t\t\t$result = $object->clone_associations($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$originalId);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (GETPOST('clone_categories')) {\n\t\t\t\t\t\t\t$result = $object->cloneCategories($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$originalId);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (GETPOST('clone_prices')) {\n\t\t\t\t\t\t\t$result = $object->clone_price($originalId, $id);\n\n\t\t\t\t\t\t\tif ($result < 1) {\n\t\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans('ErrorProductClone'), null, 'errors');\n\t\t\t\t\t\t\t\theader('Location: '.$_SERVER['PHP_SELF'].'?id='.$originalId);\n\t\t\t\t\t\t\t\texit();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// $object->clone_fournisseurs($originalId, $id);\n\n\t\t\t\t\t\t$db->commit();\n\t\t\t\t\t\t$db->close();\n\n\t\t\t\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].\"?id=\".$id);\n\t\t\t\t\t\texit;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$id = $originalId;\n\n\t\t\t\t\t\tif ($object->error == 'ErrorProductAlreadyExists') {\n\t\t\t\t\t\t\t$db->rollback();\n\n\t\t\t\t\t\t\t$refalreadyexists++;\n\t\t\t\t\t\t\t$action = \"\";\n\n\t\t\t\t\t\t\t$mesg = $langs->trans(\"ErrorProductAlreadyExists\", $object->ref);\n\t\t\t\t\t\t\t$mesg .= ' <a href=\"'.$_SERVER[\"PHP_SELF\"].'?ref='.$object->ref.'\">'.$langs->trans(\"ShowCardHere\").'</a>.';\n\t\t\t\t\t\t\tsetEventMessages($mesg, null, 'errors');\n\t\t\t\t\t\t\t$object->fetch($id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$db->rollback();\n\t\t\t\t\t\t\tif (count($object->errors)) {\n\t\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t\t\tdol_print_error($db, $object->errors);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t\t\t\t\t\tdol_print_error($db, $object->error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($object->context['createfromclone']);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$db->rollback();\n\t\t\t\tdol_print_error($db, $object->error);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Delete a product\n\tif ($action == 'confirm_delete' && $confirm != 'yes') {\n\t\t$action = '';\n\t}\n\tif ($action == 'confirm_delete' && $confirm == 'yes' && $usercandelete) {\n\t\t$result = $object->delete($user);\n\n\t\tif ($result > 0) {\n\t\t\theader('Location: '.DOL_URL_ROOT.'/product/list.php?type='.$object->type.'&delprod='.urlencode($object->ref));\n\t\t\texit;\n\t\t} else {\n\t\t\tsetEventMessages($langs->trans($object->error), null, 'errors');\n\t\t\t$reload = 0;\n\t\t\t$action = '';\n\t\t}\n\t}\n\n\n\t// Add product into object\n\tif ($object->id > 0 && $action == 'addin') {\n\t\t$thirpdartyid = 0;\n\t\tif (GETPOST('propalid') > 0) {\n\t\t\t$propal = new Propal($db);\n\t\t\t$result = $propal->fetch(GETPOST('propalid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $propal->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $propal->socid;\n\t\t} elseif (GETPOST('commandeid') > 0) {\n\t\t\t$commande = new Commande($db);\n\t\t\t$result = $commande->fetch(GETPOST('commandeid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $commande->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $commande->socid;\n\t\t} elseif (GETPOST('factureid') > 0) {\n\t\t\t$facture = new Facture($db);\n\t\t\t$result = $facture->fetch(GETPOST('factureid'));\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $facture->error);\n\t\t\t\texit;\n\t\t\t}\n\t\t\t$thirpdartyid = $facture->socid;\n\t\t}\n\n\t\tif ($thirpdartyid > 0) {\n\t\t\t$soc = new Societe($db);\n\t\t\t$result = $soc->fetch($thirpdartyid);\n\t\t\tif ($result <= 0) {\n\t\t\t\tdol_print_error($db, $soc->error);\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\t$desc = $object->description;\n\n\t\t\t$tva_tx = get_default_tva($mysoc, $soc, $object->id);\n\t\t\t$tva_npr = get_default_npr($mysoc, $soc, $object->id);\n\t\t\tif (empty($tva_tx)) {\n\t\t\t\t$tva_npr = 0;\n\t\t\t}\n\t\t\t$localtax1_tx = get_localtax($tva_tx, 1, $soc, $mysoc, $tva_npr);\n\t\t\t$localtax2_tx = get_localtax($tva_tx, 2, $soc, $mysoc, $tva_npr);\n\n\t\t\t$pu_ht = $object->price;\n\t\t\t$pu_ttc = $object->price_ttc;\n\t\t\t$price_base_type = $object->price_base_type;\n\n\t\t\t// If multiprice\n\t\t\tif ($conf->global->PRODUIT_MULTIPRICES && $soc->price_level) {\n\t\t\t\t$pu_ht = $object->multiprices[$soc->price_level];\n\t\t\t\t$pu_ttc = $object->multiprices_ttc[$soc->price_level];\n\t\t\t\t$price_base_type = $object->multiprices_base_type[$soc->price_level];\n\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/productcustomerprice.class.php';\n\n\t\t\t\t$prodcustprice = new Productcustomerprice($db);\n\n\t\t\t\t$filter = array('t.fk_product' => $object->id, 't.fk_soc' => $soc->id);\n\n\t\t\t\t$result = $prodcustprice->fetch_all('', '', 0, 0, $filter);\n\t\t\t\tif ($result) {\n\t\t\t\t\tif (count($prodcustprice->lines) > 0) {\n\t\t\t\t\t\t$pu_ht = price($prodcustprice->lines [0]->price);\n\t\t\t\t\t\t$pu_ttc = price($prodcustprice->lines [0]->price_ttc);\n\t\t\t\t\t\t$price_base_type = $prodcustprice->lines [0]->price_base_type;\n\t\t\t\t\t\t$tva_tx = $prodcustprice->lines [0]->tva_tx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$tmpvat = price2num(preg_replace('/\\s*\\(.*\\)/', '', $tva_tx));\n\t\t\t$tmpprodvat = price2num(preg_replace('/\\s*\\(.*\\)/', '', $prod->tva_tx));\n\n\t\t\t// On reevalue prix selon taux tva car taux tva transaction peut etre different\n\t\t\t// de ceux du produit par defaut (par exemple si pays different entre vendeur et acheteur).\n\t\t\tif ($tmpvat != $tmpprodvat) {\n\t\t\t\tif ($price_base_type != 'HT') {\n\t\t\t\t\t$pu_ht = price2num($pu_ttc / (1 + ($tmpvat / 100)), 'MU');\n\t\t\t\t} else {\n\t\t\t\t\t$pu_ttc = price2num($pu_ht * (1 + ($tmpvat / 100)), 'MU');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (GETPOST('propalid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $propal->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $propal->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx, // localtax1\n\t\t\t\t\t$localtax2_tx, // localtax2\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/comm/propal/card.php?id=\".$propal->id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUnknown\").\": $result\", null, 'errors');\n\t\t\t} elseif (GETPOST('commandeid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $commande->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $commande->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx, // localtax1\n\t\t\t\t\t$localtax2_tx, // localtax2\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tnull,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/commande/card.php?id=\".urlencode($commande->id));\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t} elseif (GETPOST('factureid') > 0) {\n\t\t\t\t// Define cost price for margin calculation\n\t\t\t\t$buyprice = 0;\n\t\t\t\tif (($result = $facture->defineBuyPrice($pu_ht, price2num(GETPOST('remise_percent'), '', 2), $object->id)) < 0) {\n\t\t\t\t\tdol_syslog($langs->trans('FailedToGetCostPrice'));\n\t\t\t\t\tsetEventMessages($langs->trans('FailedToGetCostPrice'), null, 'errors');\n\t\t\t\t} else {\n\t\t\t\t\t$buyprice = $result;\n\t\t\t\t}\n\n\t\t\t\t$result = $facture->addline(\n\t\t\t\t\t$desc,\n\t\t\t\t\t$pu_ht,\n\t\t\t\t\tprice2num(GETPOST('qty'), 'MS'),\n\t\t\t\t\t$tva_tx,\n\t\t\t\t\t$localtax1_tx,\n\t\t\t\t\t$localtax2_tx,\n\t\t\t\t\t$object->id,\n\t\t\t\t\tprice2num(GETPOST('remise_percent'), '', 2),\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t$price_base_type,\n\t\t\t\t\t$pu_ttc,\n\t\t\t\t\tFacture::TYPE_STANDARD,\n\t\t\t\t\t-1,\n\t\t\t\t\t0,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\tnull,\n\t\t\t\t\t$buyprice,\n\t\t\t\t\t'',\n\t\t\t\t\t0,\n\t\t\t\t\t100,\n\t\t\t\t\t'',\n\t\t\t\t\t$object->fk_unit\n\t\t\t\t);\n\n\t\t\t\tif ($result > 0) {\n\t\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/compta/facture/card.php?facid=\".$facture->id);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$action = \"\";\n\t\t\tsetEventMessages($langs->trans(\"WarningSelectOneDocument\"), null, 'warnings');\n\t\t}\n\t}\n}\n\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n$formproduct = new FormProduct($db);\n$formcompany = new FormCompany($db);\nif (!empty($conf->accounting->enabled)) {\n\t$formaccounting = new FormAccounting($db);\n}\n\n\n$title = $langs->trans('ProductServiceCard');\n$help_url = '';\n$shortlabel = dol_trunc($object->label, 16);\nif (GETPOST(\"type\") == '0' || ($object->type == Product::TYPE_PRODUCT)) {\n\t$title = $langs->trans('Product').\" \".$shortlabel.\" - \".$langs->trans('Card');\n\t$help_url = 'EN:Module_Products|FR:Module_Produits|ES:M&oacute;dulo_Productos|DE:Modul_Produkte';\n}\nif (GETPOST(\"type\") == '1' || ($object->type == Product::TYPE_SERVICE)) {\n\t$title = $langs->trans('Service').\" \".$shortlabel.\" - \".$langs->trans('Card');\n\t$help_url = 'EN:Module_Services_En|FR:Module_Services|ES:M&oacute;dulo_Servicios|DE:Modul_Leistungen';\n}\n\nllxHeader('', $title, $help_url);\n\n// Load object modBarCodeProduct\n$res = 0;\nif (!empty($conf->barcode->enabled) && !empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t$module = strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\t$dirbarcode = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\tforeach ($dirbarcode as $dirroot) {\n\t\t$res = dol_include_once($dirroot.$module.'.php');\n\t\tif ($res) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($res > 0) {\n\t\t\t$modBarCodeProduct = new $module();\n\t}\n}\n\n\nif (is_object($objcanvas) && $objcanvas->displayCanvasExists($action)) {\n\t// -----------------------------------------\n\t// When used with CANVAS\n\t// -----------------------------------------\n\tif (empty($object->error) && $id) {\n\t\t$result = $object->fetch($id);\n\t\tif ($result <= 0) {\n\t\t\tdol_print_error('', $object->error);\n\t\t}\n\t}\n\t$objcanvas->assign_values($action, $object->id, $object->ref); // Set value for templates\n\t$objcanvas->display_canvas($action); // Show template\n} else {\n\t// -----------------------------------------\n\t// When used in standard mode\n\t// -----------------------------------------\n\tif ($action == 'create' && $usercancreate) {\n\t\t//WYSIWYG Editor\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint '<script type=\"text/javascript\">';\n\t\t\tprint '$(document).ready(function () {\n                        $(\"#selectcountry_id\").change(function() {\n                        \tdocument.formprod.action.value=\"create\";\n                        \tdocument.formprod.submit();\n                        });\n                     });';\n\t\t\tprint '</script>'.\"\\n\";\n\t\t}\n\n\t\t// Load object modCodeProduct\n\t\t$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\n\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t\t\t$module = substr($module, 0, dol_strlen($module) - 4);\n\t\t}\n\t\t$result = dol_include_once('/core/modules/product/'.$module.'.php');\n\t\tif ($result > 0) {\n\t\t\t$modCodeProduct = new $module();\n\t\t}\n\n\t\tdol_set_focus('input[name=\"ref\"]');\n\n\t\tprint '<form action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\" name=\"formprod\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\t\tprint '<input type=\"hidden\" name=\"type\" value=\"'.$type.'\">'.\"\\n\";\n\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\tprint '<input type=\"hidden\" name=\"code_auto\" value=\"1\">';\n\t\t}\n\t\tif (!empty($modBarCodeProduct->code_auto)) {\n\t\t\tprint '<input type=\"hidden\" name=\"barcode_auto\" value=\"1\">';\n\t\t}\n\t\tprint '<input type=\"hidden\" name=\"backtopage\" value=\"'.$backtopage.'\">';\n\n\t\tif ($type == 1) {\n\t\t\t$picto = 'service';\n\t\t\t$title = $langs->trans(\"NewService\");\n\t\t} else {\n\t\t\t$picto = 'product';\n\t\t\t$title = $langs->trans(\"NewProduct\");\n\t\t}\n\t\t$linkback = \"\";\n\t\tprint load_fiche_titre($title, $linkback, $picto);\n\n\t\t// We set country_id, country_code and country for the selected country\n\t\t$object->country_id = GETPOSTISSET('country_id') ? GETPOST('country_id', 'int') : null;\n\t\tif ($object->country_id > 0) {\n\t\t\t$tmparray = getCountry($object->country_id, 'all');\n\t\t\t$object->country_code = $tmparray['code'];\n\t\t\t$object->country = $tmparray['label'];\n\t\t}\n\n\t\tprint dol_get_fiche_head('');\n\n\t\tprint '<table class=\"border centpercent\">';\n\n\t\tif (empty($conf->global->PRODUCT_GENERATE_REF_AFTER_FORM)) {\n\t\t\tprint '<tr>';\n\t\t\t$tmpcode = '';\n\t\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\t\t$tmpcode = $modCodeProduct->getNextValue($object, $type);\n\t\t\t}\n\t\t\tprint '<td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Ref\").'</td><td><input id=\"ref\" name=\"ref\" class=\"maxwidth200\" maxlength=\"128\" value=\"'.dol_escape_htmltag(GETPOSTISSET('ref') ? GETPOST('ref', 'alphanohtml') : $tmpcode).'\">';\n\t\t\tif ($refalreadyexists) {\n\t\t\t\tprint $langs->trans(\"RefAlreadyExists\");\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Label\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Label\").'</td><td><input name=\"label\" class=\"minwidth300 maxwidth400onsmartphone\" maxlength=\"255\" value=\"'.dol_escape_htmltag(GETPOST('label', $label_security_check)).'\"></td></tr>';\n\n\t\t// On sell\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").')</td><td>';\n\t\t$statutarray = array('1' => $langs->trans(\"OnSell\"), '0' => $langs->trans(\"NotOnSell\"));\n\t\tprint $form->selectarray('statut', $statutarray, GETPOST('statut'));\n\t\tprint '</td></tr>';\n\n\t\t// To buy\n\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").')</td><td>';\n\t\t$statutarray = array('1' => $langs->trans(\"ProductStatusOnBuy\"), '0' => $langs->trans(\"ProductStatusNotOnBuy\"));\n\t\tprint $form->selectarray('statut_buy', $statutarray, GETPOST('statut_buy'));\n\t\tprint '</td></tr>';\n\n\t\t// Batch number management\n\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t$statutarray = array('0' => $langs->trans(\"ProductStatusNotOnBatch\"), '1' => $langs->trans(\"ProductStatusOnBatch\"), '2' => $langs->trans(\"ProductStatusOnSerial\"));\n\t\t\tprint $form->selectarray('status_batch', $statutarray, GETPOST('status_batch'));\n\t\t\tprint '</td></tr>';\n\t\t\t// Product specific batch number management\n\t\t\t$status_batch = GETPOST('status_batch');\n\t\t\tif ($status_batch !== '0') {\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\t$tooltip = $langs->trans(\"GenericMaskCodes\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes2\");\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes3\");\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes4a\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes5\");\n\t\t\t\tif ((!empty($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced')\n\t\t\t\t\t|| (!empty($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced')) {\n\t\t\t\t\tprint '<tr><td id=\"mask_option\">'.$langs->trans(\"ManageLotMask\").'</td>';\n\t\t\t\t\t$inherited_mask_lot = $conf->global->LOT_ADVANCED_MASK;\n\t\t\t\t\t$inherited_mask_sn = $conf->global->SN_ADVANCED_MASK;\n\t\t\t\t\tprint '<td id=\"field_mask\">';\n\t\t\t\t\tprint $form->textwithpicto('<input type=\"text\" class=\"flat minwidth175\" name=\"batch_mask\" id=\"batch_mask_input\">', $tooltip, 1, 1);\n\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").addClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t$(\"#status_batch\").on(\"change\", function () {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"We change batch status\");\n\t\t\t\t\t\t\t\t\t\tvar optionSelected = $(\"option:selected\", this);\n\t\t\t\t\t\t\t\t\t\tvar valueSelected = this.value;\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").addClass(\"hideobject\");\n\t\t\t\t\t';\n\t\t\t\t\tif ($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced') {\n\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t\tif (this.value == 1) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").toggleClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_lot.'\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t';\n\t\t\t\t\t}\n\t\t\t\t\tif ($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced') {\n\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t\tif (this.value == 2) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"#field_mask, #mask_option\").toggleClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_sn.'\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t';\n\t\t\t\t\t}\n\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t</script>';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t$showbarcode = 0;\n\t\t}\n\n\t\tif ($showbarcode) {\n\t\t\tprint '<tr><td>'.$langs->trans('BarcodeType').'</td><td>';\n\t\t\tif (GETPOSTISSET('fk_barcode_type')) {\n\t\t\t\t$fk_barcode_type = GETPOST('fk_barcode_type')?GETPOST('fk_barcode_type'):0;\n\t\t\t} else {\n\t\t\t\tif (empty($fk_barcode_type) && !empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) {\n\t\t\t\t\t$fk_barcode_type = getDolGlobalInt(\"PRODUIT_DEFAULT_BARCODE_TYPE\");\n\t\t\t\t} else {\n\t\t\t\t\t$fk_barcode_type=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\tprint $formbarcode->selectBarcodeType($fk_barcode_type, 'fk_barcode_type', 1);\n\t\t\tprint '</td>';\n\t\t\tprint '</tr><tr>';\n\t\t\tprint '<td>'.$langs->trans(\"BarcodeValue\").'</td><td>';\n\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t}\n\t\t\tprint '<input class=\"maxwidth100\" type=\"text\" name=\"barcode\" value=\"'.dol_escape_htmltag($tmpcode).'\">';\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Description (used in invoice, propal...)\n\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>';\n\n\t\t$doleditor = new DolEditor('desc', GETPOST('desc', 'restricthtml'), '', 160, 'dolibarr_details', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_PRODUCTDESC'), ROWS_4, '90%');\n\t\t$doleditor->Create();\n\n\t\tprint \"</td></tr>\";\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t// Public URL\n\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\tprint img_picto('', 'globe', 'class=\"pictofixedwidth\"');\n\t\t\tprint '<input type=\"text\" name=\"url\" class=\"quatrevingtpercent\" value=\"'.GETPOST('url').'\">';\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\tif ($type != 1 && !empty($conf->stock->enabled)) {\n\t\t\t// Default warehouse\n\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\tprint img_picto($langs->trans(\"DefaultWarehouse\"), 'stock', 'class=\"pictofixedwidth\"');\n\t\t\tprint $formproduct->selectWarehouses(GETPOST('fk_default_warehouse', 'int'), 'fk_default_warehouse', 'warehouseopen', 1, 0, 0, '', 0, 0, array(), 'minwidth300 widthcentpercentminusxx maxwidth500');\n\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&token='.newToken().'&backtopage='.urlencode($_SERVER['PHP_SELF'].'?id='.$object->id.'&action=edit&token='.newToken()).'\">';\n\t\t\tprint '<span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span>';\n\t\t\tprint '</a>';\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STOCK_LEVELS)) {\n\t\t\t\t// Stock min level\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"StockLimit\"), $langs->trans(\"StockLimitDesc\"), 1).'</td><td>';\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" class=\"maxwidth50\" value=\"'.GETPOST('seuil_stock_alerte').'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\n\t\t\t\t// Stock desired level\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"DesiredStock\"), $langs->trans(\"DesiredStockDesc\"), 1).'</td><td>';\n\t\t\t\tprint '<input name=\"desiredstock\" class=\"maxwidth50\" value=\"'.GETPOST('desiredstock').'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t} else {\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STOCK_LEVELS)) {\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" type=\"hidden\" value=\"0\">';\n\t\t\t\tprint '<input name=\"desiredstock\" type=\"hidden\" value=\"0\">';\n\t\t\t}\n\t\t}\n\n\t\t// Duration\n\t\tif ($type == 1) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\tprint '<input name=\"duration_value\" size=\"4\" value=\"'.GETPOST('duration_value', 'int').'\">';\n\t\t\tprint $formproduct->selectMeasuringUnits(\"duration_unit\", \"time\", (GETPOSTISSET('duration_value') ? GETPOSTISSET('duration_value', 'alpha') : 'h'), 0, 1);\n\n\t\t\t// Mandatory period\n\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\tprint '<input type=\"checkbox\" id=\"mandatoryperiod\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').'>';\n\t\t\tprint '<label for=\"mandatoryperiod\">';\n\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\t\t\tprint '</label>';\n\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\tif ($type != 1) {\t// Nature, Weight and volume only applies to products and not to services\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t// Nature\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\tprint $formproduct->selectProductNature('finished', $object->finished);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\n\t\tif ($type != 1) {\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t// Brut Weight\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\tprint '<input name=\"weight\" size=\"4\" value=\"'.GETPOST('weight').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"weight_units\", \"weight\", GETPOSTISSET('weight_units') ?GETPOST('weight_units', 'alpha') : (empty($conf->global->MAIN_WEIGHT_DEFAULT_UNIT) ? 0 : $conf->global->MAIN_WEIGHT_DEFAULT_UNIT), 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Brut Length\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\tprint '<input name=\"size\" class=\"width50\" value=\"'.GETPOST('size').'\"> x ';\n\t\t\t\tprint '<input name=\"sizewidth\" class=\"width50\" value=\"'.GETPOST('sizewidth').'\"> x ';\n\t\t\t\tprint '<input name=\"sizeheight\" class=\"width50\" value=\"'.GETPOST('sizeheight').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"size_units\", \"size\", GETPOSTISSET('size_units') ?GETPOST('size_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t// Brut Surface\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\tprint '<input name=\"surface\" size=\"4\" value=\"'.GETPOST('surface').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"surface_units\", \"surface\", GETPOSTISSET('surface_units') ?GETPOST('surface_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t// Brut Volume\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\tprint '<input name=\"volume\" size=\"4\" value=\"'.GETPOST('volume').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"volume_units\", \"volume\", GETPOSTISSET('volume_units') ?GETPOST('volume_units', 'alpha') : '0', 0, 2);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t// Net Measure\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\tprint '<input name=\"net_measure\" size=\"4\" value=\"'.GETPOST('net_measure').'\">';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"net_measure_units\", '', GETPOSTISSET('net_measure_units') ?GETPOST('net_measure_units', 'alpha') : (empty($conf->global->MAIN_WEIGHT_DEFAULT_UNIT) ? 0 : $conf->global->MAIN_WEIGHT_DEFAULT_UNIT), 0, 0);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\n\t\t// Units\n\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->selectUnits(empty($line->fk_unit) ? $conf->global->PRODUCT_USE_UNITS : $line->fk_unit, 'units');\n\t\t\tprint '</td></tr>';\n\t\t}\n\n\t\t// Custom code\n\t\tif (empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO) && empty($type)) {\n\t\t\tprint '<tr><td class=\"wordbreak\">'.$langs->trans(\"CustomCode\").'</td><td><input name=\"customcode\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('customcode').'\"></td></tr>';\n\n\t\t\t// Origin country\n\t\t\tprint '<tr><td>'.$langs->trans(\"CountryOrigin\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"');\n\t\t\tprint $form->select_country((GETPOSTISSET('country_id') ? GETPOST('country_id') : $object->country_id), 'country_id', '', 0, 'minwidth300 widthcentpercentminusx maxwidth500');\n\t\t\tif ($user->admin) {\n\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STATE)) {\n\t\t\t\tprint '<tr>';\n\t\t\t\tif (!empty($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT) && ($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 1 || $conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 2)) {\n\t\t\t\t\tprint '<td>'.$form->editfieldkey('RegionStateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<td>'.$form->editfieldkey('StateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t}\n\n\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint $formcompany->select_state($object->state_id, $object->country_code);\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\t\t}\n\n\t\t// Quality control\n\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td><input name=\"lifetime\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('lifetime').'\"></td></tr>';\n\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td><input name=\"qc_frequency\" class=\"maxwidth100onsmartphone\" value=\"'.GETPOST('qc_frequency').'\"></td></tr>';\n\t\t}\n\n\t\t// Other attributes\n\t\t$parameters = array('colspan' => ' colspan=\"2\"', 'cols'=>2);\n\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\tprint $hookmanager->resPrint;\n\t\tif (empty($reshook)) {\n\t\t\tprint $object->showOptionals($extrafields, 'create', $parameters);\n\t\t}\n\n\t\t// Note (private, no output on invoices, propales...)\n\t\t//if (! empty($conf->global->MAIN_DISABLE_NOTES_TAB))       available in create mode\n\t\t//{\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NoteNotVisibleOnBill\").'</td><td>';\n\n\t\t\t// We use dolibarr_details as type of DolEditor here, because we must not accept images as description is included into PDF and not accepted by TCPDF.\n\t\t\t$doleditor = new DolEditor('note_private', GETPOST('note_private', 'restricthtml'), '', 140, 'dolibarr_details', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_PRODUCTDESC'), ROWS_8, '90%');\n\t\t\t$doleditor->Create();\n\n\t\t\tprint \"</td></tr>\";\n\t\t//}\n\n\t\tif (!empty($conf->categorie->enabled)) {\n\t\t\t// Categories\n\t\t\tprint '<tr><td>'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);\n\t\t\tprint img_picto('', 'category').$form->multiselectarray('categories', $cate_arbo, GETPOST('categories', 'array'), '', 0, 'quatrevingtpercent widthcentpercentminusx', 0, 0);\n\t\t\tprint \"</td></tr>\";\n\t\t}\n\n\t\tprint '</table>';\n\n\t\tprint '<hr>';\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_PRICES)) {\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\t// We do no show price array on create when multiprices enabled.\n\t\t\t\t// We must set them on prices tab.\n\t\t\t\tprint '<table class=\"border centpercent\">';\n\t\t\t\t// VAT\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"VATRate\").'</td><td>';\n\t\t\t\t$defaultva = get_default_tva($mysoc, $mysoc);\n\t\t\t\tprint $form->load_tva(\"tva_tx\", $defaultva, $mysoc, $mysoc, 0, 0, '', false, 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\tprint '</table>';\n\n\t\t\t\tprint '<br>';\n\t\t\t} else {\n\t\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\t\t// Price\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"SellingPrice\").'</td>';\n\t\t\t\tprint '<td><input name=\"price\" class=\"maxwidth50\" value=\"'.$object->price.'\">';\n\t\t\t\tprint $form->selectPriceBaseType($conf->global->PRODUCT_PRICE_BASE_TYPE, \"price_base_type\");\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Min price\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"MinPrice\").'</td>';\n\t\t\t\tprint '<td><input name=\"price_min\" class=\"maxwidth50\" value=\"'.$object->price_min.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// VAT\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"VATRate\").'</td><td>';\n\t\t\t\t$defaultva = get_default_tva($mysoc, $mysoc);\n\t\t\t\tprint $form->load_tva(\"tva_tx\", $defaultva, $mysoc, $mysoc, 0, 0, '', false, 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\tprint '</table>';\n\n\t\t\t\tprint '<br>';\n\t\t\t}\n\t\t}\n\n\t\t// Accountancy codes\n\t\tprint '<!-- accountancy codes -->'.\"\\n\";\n\t\tprint '<table class=\"border centpercent\">';\n\n\t\tif (empty($conf->global->PRODUCT_DISABLE_ACCOUNTING)) {\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t// Accountancy_code_sell\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_sell = (GETPOSTISSET('accountancy_code_sell') ? GETPOST('accountancy_code_sell', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_sell = (GETPOSTISSET('accountancy_code_sell') ? GETPOST('accountancy_code_sell', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell, 'accountancy_code_sell', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tif ($type == 0) {\n\t\t\t\t\t\t$accountancy_code_sell_intra = (GETPOSTISSET('accountancy_code_sell_intra') ? GETPOST('accountancy_code_sell_intra', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_INTRA_ACCOUNT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountancy_code_sell_intra = (GETPOSTISSET('accountancy_code_sell_intra') ? GETPOST('accountancy_code_sell_intra', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_INTRA_ACCOUNT);\n\t\t\t\t\t}\n\t\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell_intra, 'accountancy_code_sell_intra', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_sell_export = (GETPOST('accountancy_code_sell_export') ? GETPOST('accountancy_code_sell_export', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_SOLD_EXPORT_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_sell_export = (GETPOST('accountancy_code_sell_export') ? GETPOST('accountancy_code_sell_export', 'alpha') : $conf->global->ACCOUNTING_SERVICE_SOLD_EXPORT_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_sell_export, 'accountancy_code_sell_export', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_buy = (GETPOST('accountancy_code_buy', 'alpha') ? (GETPOST('accountancy_code_buy', 'alpha')) : $conf->global->ACCOUNTING_PRODUCT_BUY_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_buy = (GETPOST('accountancy_code_buy', 'alpha') ? (GETPOST('accountancy_code_buy', 'alpha')) : $conf->global->ACCOUNTING_SERVICE_BUY_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy, 'accountancy_code_buy', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tif ($type == 0) {\n\t\t\t\t\t\t$accountancy_code_buy_intra = (GETPOSTISSET('accountancy_code_buy_intra') ? GETPOST('accountancy_code_buy_intra', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_BUY_INTRA_ACCOUNT);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$accountancy_code_buy_intra = (GETPOSTISSET('accountancy_code_buy_intra') ? GETPOST('accountancy_code_buy_intra', 'alpha') : $conf->global->ACCOUNTING_SERVICE_BUY_INTRA_ACCOUNT);\n\t\t\t\t\t}\n\t\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy_intra, 'accountancy_code_buy_intra', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($type == 0) {\n\t\t\t\t\t$accountancy_code_buy_export = (GETPOST('accountancy_code_buy_export') ? GETPOST('accountancy_code_buy_export', 'alpha') : $conf->global->ACCOUNTING_PRODUCT_BUY_EXPORT_ACCOUNT);\n\t\t\t\t} else {\n\t\t\t\t\t$accountancy_code_buy_export = (GETPOST('accountancy_code_buy_export') ? GETPOST('accountancy_code_buy_export', 'alpha') : $conf->global->ACCOUNTING_SERVICE_BUY_EXPORT_ACCOUNT);\n\t\t\t\t}\n\t\t\t\tprint $formaccounting->select_account($accountancy_code_buy_export, 'accountancy_code_buy_export', 1, null, 1, 1, 'minwidth150 maxwidth300', 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {// For external software\n\t\t\t\tif (!empty($accountancy_code_sell)) {\n\t\t\t\t\t$object->accountancy_code_sell = $accountancy_code_sell;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_sell_intra)) {\n\t\t\t\t\t$object->accountancy_code_sell_intra = $accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_sell_export)) {\n\t\t\t\t\t$object->accountancy_code_sell_export = $accountancy_code_sell_export;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy)) {\n\t\t\t\t\t$object->accountancy_code_buy = $accountancy_code_buy;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy_intra)) {\n\t\t\t\t\t$object->accountancy_code_buy_intra = $accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tif (!empty($accountancy_code_buy_export)) {\n\t\t\t\t\t$object->accountancy_code_buy_export = $accountancy_code_buy_export;\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell\" value=\"'.$object->accountancy_code_sell.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell_intra\" value=\"'.$object->accountancy_code_sell_intra.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_sell_export\" value=\"'.$object->accountancy_code_sell_export.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy\" value=\"'.$object->accountancy_code_buy.'\">';\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy_intra\" value=\"'.$object->accountancy_code_buy_intra.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\tprint '<td class=\"maxwidthonsmartphone\"><input class=\"minwidth150\" name=\"accountancy_code_buy_export\" value=\"'.$object->accountancy_code_buy_export.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\t\t}\n\t\tprint '</table>';\n\n\t\tprint dol_get_fiche_end();\n\n\t\tprint $form->buttonsSaveCancel(\"Create\");\n\n\t\tprint '</form>';\n\t} elseif ($object->id > 0) {\n\t\t/*\n\t\t * Product card\n\t\t */\n\n\t\t// Fiche en mode edition\n\t\tif ($action == 'edit' && $usercancreate) {\n\t\t\t//WYSIWYG Editor\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\tprint '<script type=\"text/javascript\">';\n\t\t\t\tprint '$(document).ready(function () {\n                        $(\"#selectcountry_id\").change(function () {\n                        \tdocument.formprod.action.value=\"edit\";\n                        \tdocument.formprod.submit();\n                        });\n\t\t\t\t});';\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// We set country_id, country_code and country for the selected country\n\t\t\t$object->country_id = GETPOST('country_id') ? GETPOST('country_id') : $object->country_id;\n\t\t\tif ($object->country_id) {\n\t\t\t\t$tmparray = getCountry($object->country_id, 'all');\n\t\t\t\t$object->country_code = $tmparray['code'];\n\t\t\t\t$object->country = $tmparray['label'];\n\t\t\t}\n\n\t\t\t$type = $langs->trans('Product');\n\t\t\tif ($object->isService()) {\n\t\t\t\t$type = $langs->trans('Service');\n\t\t\t}\n\t\t\t//print load_fiche_titre($langs->trans('Modify').' '.$type.' : '.(is_object($object->oldcopy)?$object->oldcopy->ref:$object->ref), \"\");\n\n\t\t\t// Main official, simple, and not duplicated code\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"formprod\">'.\"\\n\";\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"id\" value=\"'.$object->id.'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"canvas\" value=\"'.$object->canvas.'\">';\n\n\t\t\t$head = product_prepare_head($object);\n\t\t\t$titre = $langs->trans(\"CardProduct\".$object->type);\n\t\t\t$picto = ($object->type == Product::TYPE_SERVICE ? 'service' : 'product');\n\t\t\tprint dol_get_fiche_head($head, 'card', $titre, 0, $picto);\n\n\n\t\t\tprint '<table class=\"border allwidth\">';\n\n\t\t\t// Ref\n\t\t\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Ref\").'</td><td colspan=\"3\"><input name=\"ref\" class=\"maxwidth200\" maxlength=\"128\" value=\"'.dol_escape_htmltag($object->ref).'\"></td></tr>';\n\n\t\t\t// Label\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Label\").'</td><td colspan=\"3\"><input name=\"label\" class=\"minwidth300 maxwidth400onsmartphone\" maxlength=\"255\" value=\"'.dol_escape_htmltag($object->label).'\"></td></tr>';\n\n\t\t\t// Status To sell\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Sell\").')</td><td colspan=\"3\">';\n\t\t\tprint '<select class=\"flat\" name=\"statut\">';\n\t\t\tif ($object->status) {\n\t\t\t\tprint '<option value=\"1\" selected>'.$langs->trans(\"OnSell\").'</option>';\n\t\t\t\tprint '<option value=\"0\">'.$langs->trans(\"NotOnSell\").'</option>';\n\t\t\t} else {\n\t\t\t\tprint '<option value=\"1\">'.$langs->trans(\"OnSell\").'</option>';\n\t\t\t\tprint '<option value=\"0\" selected>'.$langs->trans(\"NotOnSell\").'</option>';\n\t\t\t}\n\t\t\tprint '</select>';\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Status To Buy\n\t\t\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Status\").' ('.$langs->trans(\"Buy\").')</td><td colspan=\"3\">';\n\t\t\tprint '<select class=\"flat\" name=\"statut_buy\">';\n\t\t\tif ($object->status_buy) {\n\t\t\t\tprint '<option value=\"1\" selected>'.$langs->trans(\"ProductStatusOnBuy\").'</option>';\n\t\t\t\tprint '<option value=\"0\">'.$langs->trans(\"ProductStatusNotOnBuy\").'</option>';\n\t\t\t} else {\n\t\t\t\tprint '<option value=\"1\">'.$langs->trans(\"ProductStatusOnBuy\").'</option>';\n\t\t\t\tprint '<option value=\"0\" selected>'.$langs->trans(\"ProductStatusNotOnBuy\").'</option>';\n\t\t\t}\n\t\t\tprint '</select>';\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Batch number managment\n\t\t\tif ($conf->productbatch->enabled) {\n\t\t\t\tif ($object->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t\t\t$statutarray = array('0' => $langs->trans(\"ProductStatusNotOnBatch\"), '1' => $langs->trans(\"ProductStatusOnBatch\"), '2' => $langs->trans(\"ProductStatusOnSerial\"));\n\t\t\t\t\tprint $form->selectarray('status_batch', $statutarray, $object->status_batch);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\tif (!empty($object->status_batch) || !empty($conf->use_javascript_ajax)) {\n\t\t\t\t\t\t$langs->load(\"admin\");\n\t\t\t\t\t\t$tooltip = $langs->trans(\"GenericMaskCodes\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes2\");\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes3\");\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes4a\", $langs->transnoentities(\"Batch\"), $langs->transnoentities(\"Batch\"));\n\t\t\t\t\t\t$tooltip .= '<br>'.$langs->trans(\"GenericMaskCodes5\");\n\t\t\t\t\t\tprint '<tr><td id=\"mask_option\">'.$langs->trans(\"ManageLotMask\").'</td>';\n\t\t\t\t\t\tif ($object->status_batch == '1' && getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_LOT_ADDON') == 'mod_lot_advanced') {\n\t\t\t\t\t\t\t$mask = !empty($object->batch_mask) ? $object->batch_mask : getDolGlobalString('LOT_ADVANCED_MASK');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($object->status_batch == '2' && getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_SN_ADDON') == 'mod_sn_advanced') {\n\t\t\t\t\t\t\t$mask = !empty($object->batch_mask) ? $object->batch_mask : getDolGlobalString('SN_ADVANCED_MASK');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$inherited_mask_lot = getDolGlobalString('LOT_ADVANCED_MASK');\n\t\t\t\t\t\t$inherited_mask_sn = getDolGlobalString('SN_ADVANCED_MASK');\n\t\t\t\t\t\tprint '<td id=\"field_mask\">';\n\t\t\t\t\t\tprint $form->textwithpicto('<input type=\"text\" class=\"flat minwidth175\" name=\"batch_mask\" id=\"batch_mask_input\" value=\"'.$mask.'\">', $tooltip, 1, 1);\n\t\t\t\t\t\t// Add javascript to sho/hide field for custom mask\n\t\t\t\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().addClass(\"hideobject\");\n\t\t\t\t\t\t\t\tvar preselect = document.getElementById(\"status_batch\");';\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS')) {\n\t\t\t\t\t\t\t\tprint 'if (preselect.value == \"2\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t}';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS')) {\n\t\t\t\t\t\t\t\tprint 'if (preselect.value == \"1\") {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t}';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprint '$(\"#status_batch\").on(\"change\", function () {\n\t\t\t\t\t\t\t\t\tvar optionSelected = $(\"option:selected\", this);\n\t\t\t\t\t\t\t\t\tvar valueSelected = this.value;\n\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().addClass(\"hideobject\");\n\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_LOT_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_LOT_ADDON') == 'mod_lot_advanced') {\n\t\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\tif (this.value == 1) {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_lot.'\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (getDolGlobalString('PRODUCTBATCH_SN_USE_PRODUCT_MASKS') && getDolGlobalString('PRODUCTBATCH_SN_ADDON') == 'mod_sn_advanced') {\n\t\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t\tif (this.value == 2) {\n\t\t\t\t\t\t\t\t\t\t$(\"#field_mask\").parent().removeClass(\"hideobject\");\n\t\t\t\t\t\t\t\t\t\t$(\"#batch_mask_input\").val(\"'.$inherited_mask_sn.'\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprint '\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Barcode\n\t\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t\t$showbarcode = 0;\n\t\t\t}\n\n\t\t\tif ($showbarcode) {\n\t\t\t\tprint '<tr><td>'.$langs->trans('BarcodeType').'</td><td>';\n\t\t\t\tif (GETPOSTISSET('fk_barcode_type')) {\n\t\t\t\t\t$fk_barcode_type = GETPOST('fk_barcode_type');\n\t\t\t\t} else {\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t\tif (empty($fk_barcode_type) && !empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) {\n\t\t\t\t\t\t$fk_barcode_type = $conf->global->PRODUIT_DEFAULT_BARCODE_TYPE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\t\tprint $formbarcode->selectBarcodeType($fk_barcode_type, 'fk_barcode_type', 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"BarcodeValue\").'</td><td>';\n\t\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t\t}\n\t\t\t\tprint '<input class=\"maxwidth150 maxwidthonsmartphone\" type=\"text\" name=\"barcode\" value=\"'.dol_escape_htmltag($tmpcode).'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Description (used in invoice, propal...)\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>';\n\n\t\t\t// We use dolibarr_details as type of DolEditor here, because we must not accept images as description is included into PDF and not accepted by TCPDF.\n\t\t\t$doleditor = new DolEditor('desc', $object->description, '', 160, 'dolibarr_details', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');\n\t\t\t$doleditor->Create();\n\n\t\t\tprint \"</td></tr>\";\n\t\t\tprint \"\\n\";\n\n\t\t\t// Public Url\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\t\tprint img_picto('', 'globe', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint '<input type=\"text\" name=\"url\" class=\"quatrevingtpercent\" value=\"'.$object->url.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Stock\n\t\t\tif ($object->isProduct() && !empty($conf->stock->enabled)) {\n\t\t\t\t// Default warehouse\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint img_picto($langs->trans(\"DefaultWarehouse\"), 'stock', 'class=\"pictofixedwidth\"');\n\t\t\t\tprint $formproduct->selectWarehouses($object->fk_default_warehouse, 'fk_default_warehouse', 'warehouseopen', 1);\n\t\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&amp;backtopage='.urlencode($_SERVER['PHP_SELF'].'?action=create&type='.GETPOST('type', 'int')).'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span></a>';\n\t\t\t\tprint '</td></tr>';\n\t\t\t\t/*\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"StockLimit\").'</td><td>';\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" size=\"4\" value=\"'.$object->seuil_stock_alerte.'\">';\n\t\t\t\tprint '</td>';\n\n\t\t\t\tprint '<td>'.$langs->trans(\"DesiredStock\").'</td><td>';\n\t\t\t\tprint '<input name=\"desiredstock\" size=\"4\" value=\"'.$object->desiredstock.'\">';\n\t\t\t\tprint '</td></tr>';\n\t\t\t\t*/\n\t\t\t}\n\t\t\t/*\n\t\t\telse\n\t\t\t{\n\t\t\t\tprint '<input name=\"seuil_stock_alerte\" type=\"hidden\" value=\"'.$object->seuil_stock_alerte.'\">';\n\t\t\t\tprint '<input name=\"desiredstock\" type=\"hidden\" value=\"'.$object->desiredstock.'\">';\n\t\t\t}*/\n\n\t\t\tif ($object->isService()) {\n\t\t\t\t// Duration\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\t\tprint '<input name=\"duration_value\" size=\"5\" value=\"'.$object->duration_value.'\"> ';\n\t\t\t\tprint $formproduct->selectMeasuringUnits(\"duration_unit\", \"time\", $object->duration_unit, 0, 1);\n\n\t\t\t\t// Mandatory period\n\t\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\t\tprint '<input type=\"checkbox\" id=\"mandatoryperiod\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').'>';\n\t\t\t\tprint '<label for=\"mandatoryperiod\">';\n\t\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\t\t\t\tprint '</label>';\n\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t\t// Nature\n\t\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\t\tprint $formproduct->selectProductNature('finished', $object->finished);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$object->isService() && !empty($conf->bom->enabled)) {\n\t\t\t\tprint '<tr><td>'.$form->textwithpicto($langs->trans(\"DefaultBOM\"), $langs->trans(\"DefaultBOMDesc\", $langs->transnoentitiesnoconv(\"Finished\"))).'</td><td>';\n\t\t\t\t$bomkey = \"Bom:bom/class/bom.class.php:0:t.status=1 AND t.fk_product=\".((int) $object->id);\n\t\t\t\tprint $form->selectForForms($bomkey, 'fk_default_bom', $object->fk_default_bom, 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!$object->isService()) {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t\t// Brut Weight\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"weight\" size=\"5\" value=\"'.(GETPOSTISSET('weight') ? GETPOST('weight') : $object->weight).'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"weight_units\", \"weight\", GETPOSTISSET('weight_units') ? GETPOST('weight_units') : $object->weight_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\t\t// Brut Length\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"size\" size=\"5\" value=\"'.(GETPOSTISSET('size') ? GETPOST('size') : $object->length).'\">x';\n\t\t\t\t\tprint '<input name=\"sizewidth\" size=\"5\" value=\"'.(GETPOSTISSET('sizewidth') ? GETPOST('sizewidth') : $object->width).'\">x';\n\t\t\t\t\tprint '<input name=\"sizeheight\" size=\"5\" value=\"'.(GETPOSTISSET('sizeheight') ? GETPOST('sizeheight') : $object->height).'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"size_units\", \"size\", GETPOSTISSET('size_units') ? GETPOST('size_units') : $object->length_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t\t// Brut Surface\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"surface\" size=\"5\" value=\"'.(GETPOSTISSET('surface') ? GETPOST('surface') : $object->surface).'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"surface_units\", \"surface\", GETPOSTISSET('surface_units') ? GETPOST('surface_units') : $object->surface_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t\t// Brut Volume\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"volume\" size=\"5\" value=\"'.(GETPOSTISSET('volume') ? GETPOST('volume') : $object->volume).'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"volume_units\", \"volume\", GETPOSTISSET('volume_units') ? GETPOST('volume_units') : $object->volume_units, 0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t\t// Net Measure\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\t\tprint '<input name=\"net_measure\" size=\"5\" value=\"'.(GETPOSTISSET('net_measure') ? GETPOST('net_measure') : $object->net_measure).'\"> ';\n\t\t\t\t\tprint $formproduct->selectMeasuringUnits(\"net_measure_units\", \"\", GETPOSTISSET('net_measure_units') ? GETPOST('net_measure_units') : $object->net_measure_units, 0, 0);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Units\n\t\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $form->selectUnits($object->fk_unit, 'units');\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Custom code\n\t\t\tif (!$object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO)) {\n\t\t\t\tprint '<tr><td class=\"wordbreak\">'.$langs->trans(\"CustomCode\").'</td><td><input name=\"customcode\" class=\"maxwidth100onsmartphone\" value=\"'.$object->customcode.'\"></td></tr>';\n\t\t\t\t// Origin country\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"CountryOrigin\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"');\n\t\t\t\tprint $form->select_country(GETPOSTISSET('country_id') ? GETPOST('country_id', 'int') : $object->country_id, 'country_id', '', 0, 'minwidth100 maxwidthonsmartphone');\n\t\t\t\tif ($user->admin) {\n\t\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t// State\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_STATE)) {\n\t\t\t\t\tprint '<tr>';\n\t\t\t\t\tif (!empty($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT) && ($conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 1 || $conf->global->MAIN_SHOW_REGION_IN_STATE_SELECT == 2)) {\n\t\t\t\t\t\tprint '<td>'.$form->editfieldkey('RegionStateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<td>'.$form->editfieldkey('StateOrigin', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\t\t}\n\n\t\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\t\tprint $formcompany->select_state(GETPOSTISSET('state_id') ? GETPOST('state_id', 'int') : $object->state_id, $object->country_code);\n\t\t\t\t\tprint '</td>';\n\t\t\t\t\tprint '</tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Quality control\n\t\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td><input name=\"lifetime\" class=\"maxwidth100onsmartphone\" value=\"'.$object->lifetime.'\"></td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td><input name=\"qc_frequency\" class=\"maxwidth100onsmartphone\" value=\"'.$object->qc_frequency.'\"></td></tr>';\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array('colspan' => ' colspan=\"2\"', 'cols' => 2);\n\t\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook)) {\n\t\t\t\tprint $object->showOptionals($extrafields, 'edit', $parameters);\n\t\t\t}\n\n\t\t\t// Tags-Categories\n\t\t\tif ($conf->categorie->enabled) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);\n\t\t\t\t$c = new Categorie($db);\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_PRODUCT);\n\t\t\t\t$arrayselected = array();\n\t\t\t\tif (is_array($cats)) {\n\t\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint img_picto('', 'category').$form->multiselectarray('categories', $cate_arbo, $arrayselected, '', 0, 'quatrevingtpercent widthcentpercentminusx', 0, 0);\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Note private\n\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NoteNotVisibleOnBill\").'</td><td>';\n\n\t\t\t\t$doleditor = new DolEditor('note_private', $object->note_private, '', 140, 'dolibarr_notes', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');\n\t\t\t\t$doleditor->Create();\n\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '<br>';\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_ACCOUNTING)) {\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\t// Accountancy_code_sell\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell, 'accountancy_code_sell', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell_intra, 'accountancy_code_sell_intra', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_sell_export, 'accountancy_code_sell_export', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy, 'accountancy_code_buy', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy_intra, 'accountancy_code_buy_intra', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\t\tprint '<td>';\n\t\t\t\t\tprint $formaccounting->select_account($object->accountancy_code_buy_export, 'accountancy_code_buy_export', 1, '', 1, 1, 'minwidth150 maxwidth300');\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t} else {\n\t\t\t\t\t// For external software\n\t\t\t\t\t// Accountancy_code_sell\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_sell_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell_intra\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell_intra.'\">';\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_sell_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancySellExportCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_sell_export\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_sell_export.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ProductAccountancyBuyCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\n\t\t\t\t\t// Accountancy_code_buy_intra\n\t\t\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyIntraCode\").'</td>';\n\t\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy_intra\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy_intra.'\">';\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accountancy_code_buy_export\n\t\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ProductAccountancyBuyExportCode\").'</td>';\n\t\t\t\t\tprint '<td><input name=\"accountancy_code_buy_export\" class=\"maxwidth200\" value=\"'.$object->accountancy_code_buy_export.'\">';\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</table>';\n\n\t\t\tprint dol_get_fiche_end();\n\n\t\t\tprint $form->buttonsSaveCancel();\n\n\t\t\tprint '</form>';\n\t\t} else {\n\t\t\t// Fiche en mode visu\n\n\t\t\t$showbarcode = empty($conf->barcode->enabled) ? 0 : 1;\n\t\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) {\n\t\t\t\t$showbarcode = 0;\n\t\t\t}\n\n\t\t\t$head = product_prepare_head($object);\n\t\t\t$titre = $langs->trans(\"CardProduct\".$object->type);\n\t\t\t$picto = ($object->type == Product::TYPE_SERVICE ? 'service' : 'product');\n\n\t\t\tprint dol_get_fiche_head($head, 'card', $titre, -1, $picto);\n\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/product/list.php?restore_lastsearch_values=1&type='.$object->type.'\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t$object->next_prev_filter = \" fk_product_type = \".$object->type;\n\n\t\t\t$shownav = 1;\n\t\t\tif ($user->socid && !in_array('product', explode(',', $conf->global->MAIN_MODULES_FOR_EXTERNAL))) {\n\t\t\t\t$shownav = 0;\n\t\t\t}\n\n\t\t\tdol_banner_tab($object, 'ref', $linkback, $shownav, 'ref');\n\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\t// Type\n\t\t\tif (!empty($conf->product->enabled) && !empty($conf->service->enabled)) {\n\t\t\t\t$typeformat = 'select;0:'.$langs->trans(\"Product\").',1:'.$langs->trans(\"Service\");\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\tprint (empty($conf->global->PRODUCT_DENY_CHANGE_PRODUCT_TYPE)) ? $form->editfieldkey(\"Type\", 'fk_product_type', $object->type, $object, $usercancreate, $typeformat) : $langs->trans('Type');\n\t\t\t\tprint '</td><td>';\n\t\t\t\tprint $form->editfieldval(\"Type\", 'fk_product_type', $object->type, $object, $usercancreate, $typeformat);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif ($showbarcode) {\n\t\t\t\t// Barcode type\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint '<table width=\"100%\" class=\"nobordernopadding\"><tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"BarcodeType\");\n\t\t\t\tprint '</td>';\n\t\t\t\tif (($action != 'editbarcodetype') && $usercancreate && $createbarcode) {\n\t\t\t\t\tprint '<td class=\"right\"><a class=\"editfielda\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=editbarcodetype&id='.$object->id.'&token='.newToken().'\">'.img_edit($langs->trans('Edit'), 1).'</a></td>';\n\t\t\t\t}\n\t\t\t\tprint '</tr></table>';\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif ($action == 'editbarcodetype' || $action == 'editbarcode') {\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formbarcode.class.php';\n\t\t\t\t\t$formbarcode = new FormBarCode($db);\n\t\t\t\t}\n\n\t\t\t\t$fk_barcode_type = '';\n\t\t\t\tif ($action == 'editbarcodetype') {\n\t\t\t\t\tprint $formbarcode->formBarcodeType($_SERVER['PHP_SELF'].'?id='.$object->id, $object->barcode_type, 'fk_barcode_type');\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t} else {\n\t\t\t\t\t$object->fetch_barcode();\n\t\t\t\t\t$fk_barcode_type = $object->barcode_type;\n\t\t\t\t\tprint $object->barcode_type_label ? $object->barcode_type_label : ($object->barcode ? '<div class=\"warning\">'.$langs->trans(\"SetDefaultBarcodeType\").'<div>' : '');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t\t// Barcode value\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint '<table width=\"100%\" class=\"nobordernopadding\"><tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"BarcodeValue\");\n\t\t\t\tprint '</td>';\n\t\t\t\tif (($action != 'editbarcode') && $usercancreate && $createbarcode) {\n\t\t\t\t\tprint '<td class=\"right\"><a class=\"editfielda\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=editbarcode&id='.$object->id.'&token='.newToken().'\">'.img_edit($langs->trans('Edit'), 1).'</a></td>';\n\t\t\t\t}\n\t\t\t\tprint '</tr></table>';\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif ($action == 'editbarcode') {\n\t\t\t\t\t$tmpcode = GETPOSTISSET('barcode') ? GETPOST('barcode') : $object->barcode;\n\t\t\t\t\tif (empty($tmpcode) && !empty($modBarCodeProduct->code_auto)) {\n\t\t\t\t\t\t$tmpcode = $modBarCodeProduct->getNextValue($object, $fk_barcode_type);\n\t\t\t\t\t}\n\n\t\t\t\t\tprint '<form method=\"post\" action=\"'.$_SERVER[\"PHP_SELF\"].'?id='.$object->id.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"setbarcode\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"barcode_type_code\" value=\"'.$object->barcode_type_code.'\">';\n\t\t\t\t\tprint '<input size=\"40\" class=\"maxwidthonsmartphone\" type=\"text\" name=\"barcode\" value=\"'.$tmpcode.'\">';\n\t\t\t\t\tprint '&nbsp;<input type=\"submit\" class=\"button smallpaddingimp\" value=\"'.$langs->trans(\"Modify\").'\">';\n\t\t\t\t\tprint '</form>';\n\t\t\t\t} else {\n\t\t\t\t\tprint showValueWithClipboardCPButton($object->barcode);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Batch number management (to batch)\n\t\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t\tif ($object->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotSerial\").'</td><td>';\n\t\t\t\t\tprint $object->getLibStatut(0, 2);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\tif ((($object->status_batch == '1' && !empty($conf->global->PRODUCTBATCH_LOT_USE_PRODUCT_MASKS) && $conf->global->PRODUCTBATCH_LOT_ADDON == 'mod_lot_advanced')\n\t\t\t\t\t\t|| ($object->status_batch == '2' && $conf->global->PRODUCTBATCH_SN_ADDON == 'mod_sn_advanced' && !empty($conf->global->PRODUCTBATCH_SN_USE_PRODUCT_MASKS)))) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ManageLotMask\").'</td><td>';\n\t\t\t\t\t\tprint $object->batch_mask;\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Accountancy sell code\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancySellCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_sell)) {\n\t\t\t\t\t$accountingaccount = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount->fetch('', $object->accountancy_code_sell, 1);\n\n\t\t\t\t\tprint $accountingaccount->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_sell;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy sell code intra-community\n\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"ProductAccountancySellIntraCode\");\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\tif (!empty($object->accountancy_code_sell_intra)) {\n\t\t\t\t\t\t$accountingaccount2 = new AccountingAccount($db);\n\t\t\t\t\t\t$accountingaccount2->fetch('', $object->accountancy_code_sell_intra, 1);\n\n\t\t\t\t\t\tprint $accountingaccount2->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->accountancy_code_sell_intra;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Accountancy sell code export\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancySellExportCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_sell_export)) {\n\t\t\t\t\t$accountingaccount3 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount3->fetch('', $object->accountancy_code_sell_export, 1);\n\n\t\t\t\t\tprint $accountingaccount3->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_sell_export;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy buy code\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancyBuyCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_buy)) {\n\t\t\t\t\t$accountingaccount4 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount4->fetch('', $object->accountancy_code_buy, 1);\n\n\t\t\t\t\tprint $accountingaccount4->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_buy;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Accountancy buy code intra-community\n\t\t\tif ($mysoc->isInEEC()) {\n\t\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\t\tprint $langs->trans(\"ProductAccountancyBuyIntraCode\");\n\t\t\t\tprint '</td><td>';\n\t\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\t\tif (!empty($object->accountancy_code_buy_intra)) {\n\t\t\t\t\t\t$accountingaccount5 = new AccountingAccount($db);\n\t\t\t\t\t\t$accountingaccount5->fetch('', $object->accountancy_code_buy_intra, 1);\n\n\t\t\t\t\t\tprint $accountingaccount5->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->accountancy_code_buy_intra;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Accountancy buy code export\n\t\t\tprint '<tr><td class=\"nowrap\">';\n\t\t\tprint $langs->trans(\"ProductAccountancyBuyExportCode\");\n\t\t\tprint '</td><td>';\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tif (!empty($object->accountancy_code_buy_export)) {\n\t\t\t\t\t$accountingaccount6 = new AccountingAccount($db);\n\t\t\t\t\t$accountingaccount6->fetch('', $object->accountancy_code_buy_export, 1);\n\n\t\t\t\t\tprint $accountingaccount6->getNomUrl(0, 1, 1, '', 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint $object->accountancy_code_buy_export;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Description\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Description\").'</td><td>'.(dol_textishtml($object->description) ? $object->description : dol_nl2br($object->description, 1, true)).'</td></tr>';\n\n\t\t\t// Public URL\n\t\t\tif (empty($conf->global->PRODUCT_DISABLE_PUBLIC_URL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"PublicUrl\").'</td><td>';\n\t\t\t\tprint dol_print_url($object->url, '_blank', 128);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Default warehouse\n\t\t\tif ($object->isProduct() && !empty($conf->stock->enabled)) {\n\t\t\t\t$warehouse = new Entrepot($db);\n\t\t\t\t$warehouse->fetch($object->fk_default_warehouse);\n\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint (!empty($warehouse->id) ? $warehouse->getNomUrl(1) : '');\n\t\t\t\tprint '</td>';\n\t\t\t}\n\n\t\t\t// Parent product.\n\t\t\tif (!empty($conf->variants->enabled) && ($object->isProduct() || $object->isService())) {\n\t\t\t\t$combination = new ProductCombination($db);\n\n\t\t\t\tif ($combination->fetchByFkProductChild($object->id) > 0) {\n\t\t\t\t\t$prodstatic = new Product($db);\n\t\t\t\t\t$prodstatic->fetch($combination->fk_product_parent);\n\n\t\t\t\t\t// Parent product\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"ParentProduct\").'</td><td>';\n\t\t\t\t\tprint $prodstatic->getNomUrl(1);\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint '</table>';\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\tif ($object->isService()) {\n\t\t\t\t// Duration\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Duration\").'</td><td>';\n\t\t\t\tprint $object->duration_value;\n\t\t\t\tif ($object->duration_value > 1) {\n\t\t\t\t\t$dur = array(\"i\"=>$langs->trans(\"Minute\"), \"h\"=>$langs->trans(\"Hours\"), \"d\"=>$langs->trans(\"Days\"), \"w\"=>$langs->trans(\"Weeks\"), \"m\"=>$langs->trans(\"Months\"), \"y\"=>$langs->trans(\"Years\"));\n\t\t\t\t} elseif ($object->duration_value > 0) {\n\t\t\t\t\t$dur = array(\"i\"=>$langs->trans(\"Minute\"), \"h\"=>$langs->trans(\"Hour\"), \"d\"=>$langs->trans(\"Day\"), \"w\"=>$langs->trans(\"Week\"), \"m\"=>$langs->trans(\"Month\"), \"y\"=>$langs->trans(\"Year\"));\n\t\t\t\t}\n\t\t\t\tprint (!empty($object->duration_unit) && isset($dur[$object->duration_unit]) ? \"&nbsp;\".$langs->trans($dur[$object->duration_unit]).\"&nbsp;\" : '');\n\n\t\t\t\t// Mandatory period\n\t\t\t\tif ($object->duration_value > 0) {\n\t\t\t\t\tprint ' &nbsp; &nbsp; &nbsp; ';\n\t\t\t\t}\n\t\t\t\t$htmltooltip = $langs->trans(\"mandatoryHelper\");\n\t\t\t\tprint '<input type=\"checkbox\" class=\"\" name=\"mandatoryperiod\"'.($object->mandatory_period == 1 ? ' checked=\"checked\"' : '').' disabled>';\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"mandatoryperiod\"), $htmltooltip, 1, 0);\n\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_NATURE)) {\n\t\t\t\t\t// Nature\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$form->textwithpicto($langs->trans(\"NatureOfProductShort\"), $langs->trans(\"NatureOfProductDesc\")).'</td><td>';\n\t\t\t\t\tprint $object->getLibFinished();\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$object->isService() && !empty($conf->bom->enabled) && $object->finished) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$form->textwithpicto($langs->trans(\"DefaultBOM\"), $langs->trans(\"DefaultBOMDesc\", $langs->transnoentitiesnoconv(\"Finished\"))).'</td><td>';\n\t\t\t\tif ($object->fk_default_bom) {\n\t\t\t\t\t$bom_static = new BOM($db);\n\t\t\t\t\t$bom_static->fetch($object->fk_default_bom);\n\t\t\t\t\tprint $bom_static->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (!$object->isService()) {\n\t\t\t\t// Brut Weight\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_WEIGHT)) {\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Weight\").'</td><td>';\n\t\t\t\t\tif ($object->weight != '') {\n\t\t\t\t\t\tprint $object->weight.\" \".measuringUnitString(0, \"weight\", $object->weight_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SIZE)) {\n\t\t\t\t\t// Brut Length\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Length\").' x '.$langs->trans(\"Width\").' x '.$langs->trans(\"Height\").'</td><td>';\n\t\t\t\t\tif ($object->length != '' || $object->width != '' || $object->height != '') {\n\t\t\t\t\t\tprint $object->length;\n\t\t\t\t\t\tif ($object->width) {\n\t\t\t\t\t\t\tprint \" x \".$object->width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($object->height) {\n\t\t\t\t\t\t\tprint \" x \".$object->height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint ' '.measuringUnitString(0, \"size\", $object->length_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_SURFACE)) {\n\t\t\t\t\t// Brut Surface\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Surface\").'</td><td>';\n\t\t\t\t\tif ($object->surface != '') {\n\t\t\t\t\t\tprint $object->surface.\" \".measuringUnitString(0, \"surface\", $object->surface_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\t\t\t\tif (empty($conf->global->PRODUCT_DISABLE_VOLUME)) {\n\t\t\t\t\t// Brut Volume\n\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Volume\").'</td><td>';\n\t\t\t\t\tif ($object->volume != '') {\n\t\t\t\t\t\tprint $object->volume.\" \".measuringUnitString(0, \"volume\", $object->volume_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->global->PRODUCT_ADD_NET_MEASURE)) {\n\t\t\t\t\t// Net Measure\n\t\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"NetMeasure\").'</td><td>';\n\t\t\t\t\tif ($object->net_measure != '') {\n\t\t\t\t\t\tprint $object->net_measure.\" \".measuringUnitString($object->net_measure_units);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '&nbsp;';\n\t\t\t\t\t}\n\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Unit\n\t\t\tif (!empty($conf->global->PRODUCT_USE_UNITS)) {\n\t\t\t\t$unit = $object->getLabelOfUnit();\n\n\t\t\t\tprint '<tr><td>'.$langs->trans('DefaultUnitToShow').'</td><td>';\n\t\t\t\tif ($unit !== '') {\n\t\t\t\t\tprint $langs->trans($unit);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Custom code\n\t\t\tif (!$object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"CustomCode\").'</td><td>'.$object->customcode.'</td>';\n\n\t\t\t\t// Origin country code\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Origin\").'</td><td>'.getCountry($object->country_id, 0, $db);\n\t\t\t\tif (!empty($object->state_id)) {\n\t\t\t\t\tprint ' - '.getState($object->state_id, 0, $db);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t}\n\n\t\t\t// Quality Control\n\t\t\tif (!empty($conf->global->PRODUCT_LOT_ENABLE_QUALITY_CONTROL)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LifeTime\").'</td><td\">'.$object->lifetime.'</td></tr>';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"QCFrequency\").'</td><td>'.$object->qc_frequency.'</td></tr>';\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array();\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Categories\n\t\t\tif ($conf->categorie->enabled) {\n\t\t\t\tprint '<tr><td class=\"valignmiddle\">'.$langs->trans(\"Categories\").'</td><td>';\n\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_PRODUCT, 1);\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Note private\n\t\t\tif (!empty($conf->global->MAIN_DISABLE_NOTES_TAB)) {\n\t\t\t\tprint '<!-- show Note --> '.\"\\n\";\n\t\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"NotePrivate\").'</td><td>'.(dol_textishtml($object->note_private) ? $object->note_private : dol_nl2br($object->note_private, 1, true)).'</td></tr>'.\"\\n\";\n\t\t\t\tprint '<!-- End show Note --> '.\"\\n\";\n\t\t\t}\n\n\t\t\tprint \"</table>\\n\";\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\t\t\tprint dol_get_fiche_end();\n\t\t}\n\t} elseif ($action != 'create') {\n\t\texit;\n\t}\n}\n\n$tmpcode = '';\nif (!empty($modCodeProduct->code_auto)) {\n\t$tmpcode = $modCodeProduct->getNextValue($object, $object->type);\n}\n\n$formconfirm = '';\n\n// Confirm delete product\nif (($action == 'delete' && (empty($conf->use_javascript_ajax) || !empty($conf->dol_use_jmobile)))\t// Output when action = clone if jmobile or no js\n\t|| (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))) {\t\t\t\t\t\t\t// Always output when not jmobile nor js\n\t$formconfirm = $form->formconfirm(\"card.php?id=\".$object->id, $langs->trans(\"DeleteProduct\"), $langs->trans(\"ConfirmDeleteProduct\"), \"confirm_delete\", '', 0, \"action-delete\");\n}\n\n// Clone confirmation\nif (($action == 'clone' && (empty($conf->use_javascript_ajax) || !empty($conf->dol_use_jmobile)))\t\t// Output when action = clone if jmobile or no js\n\t|| (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))) {\t\t\t\t\t\t\t// Always output when not jmobile nor js\n\t// Define confirmation messages\n\t$formquestionclone = array(\n\t\t'text' => $langs->trans(\"ConfirmClone\"),\n\t\tarray('type' => 'text', 'name' => 'clone_ref', 'label' => $langs->trans(\"NewRefForClone\"), 'value' => empty($tmpcode) ? $langs->trans(\"CopyOf\").' '.$object->ref : $tmpcode, 'morecss'=>'width150'),\n\t\tarray('type' => 'checkbox', 'name' => 'clone_content', 'label' => $langs->trans(\"CloneContentProduct\"), 'value' => 1),\n\t\tarray('type' => 'checkbox', 'name' => 'clone_categories', 'label' => $langs->trans(\"CloneCategoriesProduct\"), 'value' => 1),\n\t);\n\tif (!empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t$formquestionclone[] = array('type' => 'checkbox', 'name' => 'clone_prices', 'label' => $langs->trans(\"ClonePricesProduct\").' ('.$langs->trans(\"CustomerPrices\").')', 'value' => 0);\n\t}\n\tif (!empty($conf->global->PRODUIT_SOUSPRODUITS)) {\n\t\t$formquestionclone[] = array('type' => 'checkbox', 'name' => 'clone_composition', 'label' => $langs->trans('CloneCompositionProduct'), 'value' => 1);\n\t}\n\n\t$formconfirm .= $form->formconfirm($_SERVER[\"PHP_SELF\"].'?id='.$object->id, $langs->trans('ToClone'), $langs->trans('ConfirmCloneProduct', $object->ref), 'confirm_clone', $formquestionclone, 'yes', 'action-clone', 350, 600);\n}\n\n// Call Hook formConfirm\n$parameters = array('formConfirm' => $formconfirm, 'object' => $object);\n$reshook = $hookmanager->executeHooks('formConfirm', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\nif (empty($reshook)) {\n\t$formconfirm .= $hookmanager->resPrint;\n} elseif ($reshook > 0) {\n\t$formconfirm = $hookmanager->resPrint;\n}\n\n// Print form confirm\nprint $formconfirm;\n\n/*\n * Action bar\n */\nif ($action != 'create' && $action != 'edit') {\n\tprint \"\\n\".'<div class=\"tabsAction\">'.\"\\n\";\n\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('addMoreActionsButtons', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tif (empty($reshook)) {\n\t\tif ($usercancreate) {\n\t\t\tif (!isset($object->no_button_edit) || $object->no_button_edit <> 1) {\n\t\t\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"Modify\").'</a>';\n\t\t\t}\n\n\t\t\tif (!isset($object->no_button_copy) || $object->no_button_copy <> 1) {\n\t\t\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)) {\n\t\t\t\t\tprint '<span id=\"action-clone\" class=\"butAction\">'.$langs->trans('ToClone').'</span>'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=clone&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"ToClone\").'</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$object_is_used = $object->isObjectUsed($object->id);\n\n\t\tif ($usercandelete) {\n\t\t\tif (empty($object_is_used) && (!isset($object->no_button_delete) || $object->no_button_delete <> 1)) {\n\t\t\t\tif (!empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)) {\n\t\t\t\t\tprint '<span id=\"action-delete\" class=\"butActionDelete\">'.$langs->trans('Delete').'</span>'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint '<a class=\"butActionDelete\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=delete&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint '<a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"ProductIsUsed\").'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t\t}\n\t\t} else {\n\t\t\tprint '<a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"NotEnoughPermissions\").'\">'.$langs->trans(\"Delete\").'</a>';\n\t\t}\n\t}\n\n\tprint \"\\n</div>\\n\";\n}\n\n\n/*\n * All the \"Add to\" areas if PRODUCT_ADD_FORM_ADD_TO is set\n */\n\nif (!empty($conf->global->PRODUCT_ADD_FORM_ADD_TO) && $object->id && ($action == '' || $action == 'view') && $object->status) {\n\t//Variable used to check if any text is going to be printed\n\t$html = '';\n\t//print '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t// Propals\n\tif (!empty($conf->propal->enabled) && $user->rights->propale->creer) {\n\t\t$propal = new Propal($db);\n\n\t\t$langs->load(\"propal\");\n\n\t\t$otherprop = $propal->liste_array(2, 1, 0);\n\n\t\tif (is_array($otherprop) && count($otherprop)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftProposals\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"propalid\", $otherprop, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftProposals\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftProposals\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t// Commande\n\tif (!empty($conf->commande->enabled) && $user->rights->commande->creer) {\n\t\t$commande = new Commande($db);\n\n\t\t$langs->load(\"orders\");\n\n\t\t$othercom = $commande->liste_array(2, 1, null);\n\t\tif (is_array($othercom) && count($othercom)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftOrders\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"commandeid\", $othercom, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftOrders\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftOrders\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t// Factures\n\tif (!empty($conf->facture->enabled) && $user->rights->facture->creer) {\n\t\t$invoice = new Facture($db);\n\n\t\t$langs->load(\"bills\");\n\n\t\t$otherinvoice = $invoice->liste_array(2, 1, null);\n\t\tif (is_array($otherinvoice) && count($otherinvoice)) {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftInvoices\").'</td><td>';\n\t\t\t$html .= $form->selectarray(\"factureid\", $otherinvoice, 0, 1);\n\t\t\t$html .= '</td></tr>';\n\t\t} else {\n\t\t\t$html .= '<tr><td style=\"width: 200px;\">';\n\t\t\t$html .= $langs->trans(\"AddToDraftInvoices\").'</td><td>';\n\t\t\t$html .= $langs->trans(\"NoDraftInvoices\");\n\t\t\t$html .= '</td></tr>';\n\t\t}\n\t}\n\n\t//If any text is going to be printed, then we show the table\n\tif (!empty($html)) {\n\t\tprint '<form method=\"POST\" action=\"'.$_SERVER[\"PHP_SELF\"].'?id='.$object->id.'\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addin\">';\n\n\t\tprint load_fiche_titre($langs->trans(\"AddToDraft\"), '', '');\n\n\t\tprint dol_get_fiche_head('');\n\n\t\t$html .= '<tr><td class=\"nowrap\">'.$langs->trans(\"Quantity\").' ';\n\t\t$html .= '<input type=\"text\" class=\"flat\" name=\"qty\" size=\"1\" value=\"1\"></td>';\n\t\t$html .= '<td class=\"nowrap\">'.$langs->trans(\"ReductionShort\").'(%) ';\n\t\t$html .= '<input type=\"text\" class=\"flat\" name=\"remise_percent\" size=\"1\" value=\"0\">';\n\t\t$html .= '</td></tr>';\n\n\t\tprint '<table width=\"100%\" class=\"border\">';\n\t\tprint $html;\n\t\tprint '</table>';\n\n\t\tprint '<div class=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button button-add\" value=\"'.$langs->trans(\"Add\").'\">';\n\t\tprint '</div>';\n\n\t\tprint dol_get_fiche_end();\n\n\t\tprint '</form>';\n\t}\n}\n\n\n/*\n * Generated documents\n */\n\nif ($action != 'create' && $action != 'edit' && $action != 'delete') {\n\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\tprint '<a name=\"builddoc\"></a>'; // ancre\n\n\t// Documents\n\t$objectref = dol_sanitizeFileName($object->ref);\n\tif (!empty($conf->product->multidir_output[$object->entity])) {\n\t\t$filedir = $conf->product->multidir_output[$object->entity].'/'.$objectref; //Check repertories of current entities\n\t} else {\n\t\t$filedir = $conf->product->dir_output.'/'.$objectref;\n\t}\n\t$urlsource = $_SERVER[\"PHP_SELF\"].\"?id=\".$object->id;\n\t$genallowed = $usercanread;\n\t$delallowed = $usercancreate;\n\n\tprint $formfile->showdocuments($modulepart, $object->ref, $filedir, $urlsource, $genallowed, $delallowed, '', 0, 0, 0, 28, 0, '', 0, '', $langs->getDefaultLang(), '', $object);\n\t$somethingshown = $formfile->numoffiles;\n\n\tprint '</div><div class=\"fichehalfright\">';\n\n\t$MAXEVENT = 10;\n\n\t$morehtmlcenter = dolGetButtonTitle($langs->trans('SeeAll'), '', 'fa fa-list-alt imgforviewmode', DOL_URL_ROOT.'/product/agenda.php?id='.$object->id);\n\n\t// List of actions on element\n\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.formactions.class.php';\n\t$formactions = new FormActions($db);\n\t$somethingshown = $formactions->showactions($object, 'product', 0, 1, '', $MAXEVENT, '', $morehtmlcenter); // Show all action for product\n\n\tprint '</div></div>';\n}\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2001-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2014\tLaurent Destailleur\t\t<eldy@users.sourceforge.net>\n * Copyright (C) 2005-2015\tRegis Houssin\t\t\t<regis.houssin@inodbox.com>\n * Copyright (C) 2006\t\tAndre Cianfarani\t\t<acianfa@free.fr>\n * Copyright (C) 2007-2011\tJean Heimburger\t\t\t<jean@tiaris.info>\n * Copyright (C) 2010-2018\tJuanjo Menent\t\t\t<jmenent@2byte.es>\n * Copyright (C) 2012       Cedric Salvador         <csalvador@gpcsolutions.fr>\n * Copyright (C) 2013-2014\tCedric GROSS\t\t\t<c.gross@kreiz-it.fr>\n * Copyright (C) 2013-2016\tMarcos Garc\u00eda\t\t\t<marcosgdf@gmail.com>\n * Copyright (C) 2011-2021\tOpen-DSI\t\t\t\t<support@open-dsi.fr>\n * Copyright (C) 2014\t\tHenry Florian\t\t\t<florian.henry@open-concept.pro>\n * Copyright (C) 2014-2016\tPhilippe Grand\t\t\t<philippe.grand@atoo-net.com>\n * Copyright (C) 2014\t\tIon agorria\t\t\t    <ion@agorria.com>\n * Copyright (C) 2016-2018\tFerran Marcet\t\t\t<fmarcet@2byte.es>\n * Copyright (C) 2017\t\tGustavo Novaro\n * Copyright (C) 2019-2021  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *    \\file       htdocs/product/class/product.class.php\n *    \\ingroup    produit\n *    \\brief      File of class to manage predefined products or services\n */\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/class/productbatch.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\n/**\n * Class to manage products or services\n */\nclass Product extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'product';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'product';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_product';\n\n\t/**\n\t * @var array\tList of child tables. To test if we can delete object.\n\t */\n\tprotected $childtables = array(\n\t\t'supplier_proposaldet',\n\t\t'propaldet',\n\t\t'commandedet',\n\t\t'facturedet',\n\t\t'contratdet',\n\t\t'facture_fourn_det',\n\t\t'commande_fournisseurdet'\n\t);\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t *\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string picto\n\t */\n\tpublic $picto = 'product';\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected $table_ref_field = 'ref';\n\n\tpublic $regeximgext = '\\.gif|\\.jpg|\\.jpeg|\\.png|\\.bmp|\\.webp|\\.xpm|\\.xbm'; // See also into images.lib.php\n\n\t/**\n\t * @deprecated\n\t * @see $label\n\t */\n\tpublic $libelle;\n\n\t/**\n\t * Product label\n\t *\n\t * @var string\n\t */\n\tpublic $label;\n\n\t/**\n\t * Product description\n\t *\n\t * @var string\n\t */\n\tpublic $description;\n\n\t/**\n\t * Product other fields PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION\n\t *\n\t * @var string\n\t */\n\tpublic $other;\n\n\t/**\n\t * Check TYPE constants\n\t *\n\t * @var int\n\t */\n\tpublic $type = self::TYPE_PRODUCT;\n\n\t/**\n\t * Selling price\n\t *\n\t * @var float\n\t */\n\tpublic $price; // Price net\n\n\t/**\n\t * Price with tax\n\t *\n\t * @var float\n\t */\n\tpublic $price_ttc;\n\n\t/**\n\t * Minimum price net\n\t *\n\t * @var float\n\t */\n\tpublic $price_min;\n\n\t/**\n\t * Minimum price with tax\n\t *\n\t * @var float\n\t */\n\tpublic $price_min_ttc;\n\n\t/**\n\t * Base price ('TTC' for price including tax or 'HT' for net price)\n\t * @var string\n\t */\n\tpublic $price_base_type;\n\n\t//! Arrays for multiprices\n\tpublic $multiprices = array();\n\tpublic $multiprices_ttc = array();\n\tpublic $multiprices_base_type = array();\n\tpublic $multiprices_min = array();\n\tpublic $multiprices_min_ttc = array();\n\tpublic $multiprices_tva_tx = array();\n\tpublic $multiprices_recuperableonly = array();\n\n\t//! Price by quantity arrays\n\tpublic $price_by_qty;\n\tpublic $prices_by_qty = array();\n\tpublic $prices_by_qty_id = array();\n\tpublic $prices_by_qty_list = array();\n\n\t//! Array for multilangs\n\tpublic $multilangs = array();\n\n\t//! Default VAT code for product (link to code into llx_c_tva but without foreign keys)\n\tpublic $default_vat_code;\n\n\t//! Default VAT rate of product\n\tpublic $tva_tx;\n\n\t//! French VAT NPR (0 or 1)\n\tpublic $tva_npr = 0;\n\n\t//! Other local taxes\n\tpublic $localtax1_tx;\n\tpublic $localtax2_tx;\n\tpublic $localtax1_type;\n\tpublic $localtax2_type;\n\n\tpublic $lifetime;\n\n\tpublic $qc_frequency;\n\n\t/**\n\t * Stock real\n\t *\n\t * @var int\n\t */\n\tpublic $stock_reel = 0;\n\n\t/**\n\t * Stock virtual\n\t *\n\t * @var int\n\t */\n\tpublic $stock_theorique;\n\n\t/**\n\t * Cost price\n\t *\n\t * @var float\n\t */\n\tpublic $cost_price;\n\n\t//! Average price value for product entry into stock (PMP)\n\tpublic $pmp;\n\n\t/**\n\t * Stock alert\n\t *\n\t * @var float\n\t */\n\tpublic $seuil_stock_alerte = 0;\n\n\t/**\n\t * Ask for replenishment when $desiredstock < $stock_reel\n\t */\n\tpublic $desiredstock = 0;\n\n\t/*\n\t * Service expiration\n\t */\n\tpublic $duration_value;\n\n\t/**\n\t * Exoiration unit\n\t */\n\tpublic $duration_unit;\n\n\t/**\n\t * Status indicates whether the product is on sale '1' or not '0'\n\t *\n\t * @var int\n\t */\n\tpublic $status = 0;\n\n\t/**\n\t * Status indicate whether the product is available for purchase '1' or not '0'\n\t *\n\t * @var int\n\t */\n\tpublic $status_buy = 0;\n\n\t/**\n\t * Status indicates whether the product is a finished product '1' or a raw material '0'\n\t *\n\t * @var int\n\t */\n\tpublic $finished;\n\n\t\t/**\n\t * fk_default_bom indicates the default bom\n\t *\n\t * @var int\n\t */\n\tpublic $fk_default_bom;\n\n\t/**\n\t * We must manage lot/batch number, sell-by date and so on : '1':yes '0':no\n\t *\n\t * @var int\n\t */\n\tpublic $status_batch = 0;\n\n\t/**\n\t * If allowed, we can edit batch or serial number mask for each product\n\t *\n\t * @var string\n\t */\n\tpublic $batch_mask = '';\n\n\t/**\n\t * Customs code\n\t *\n\t * @var string\n\t */\n\tpublic $customcode;\n\n\t/**\n\t * Product URL\n\t *\n\t * @var string\n\t */\n\tpublic $url;\n\n\t//! Metric of products\n\tpublic $weight;\n\tpublic $weight_units;\t// scale -3, 0, 3, 6\n\tpublic $length;\n\tpublic $length_units;\t// scale -3, 0, 3, 6\n\tpublic $width;\n\tpublic $width_units;\t// scale -3, 0, 3, 6\n\tpublic $height;\n\tpublic $height_units;\t// scale -3, 0, 3, 6\n\tpublic $surface;\n\tpublic $surface_units;\t// scale -3, 0, 3, 6\n\tpublic $volume;\n\tpublic $volume_units;\t// scale -3, 0, 3, 6\n\n\tpublic $net_measure;\n\tpublic $net_measure_units;\t// scale -3, 0, 3, 6\n\n\tpublic $accountancy_code_sell;\n\tpublic $accountancy_code_sell_intra;\n\tpublic $accountancy_code_sell_export;\n\tpublic $accountancy_code_buy;\n\tpublic $accountancy_code_buy_intra;\n\tpublic $accountancy_code_buy_export;\n\n\t/**\n\t * Main Barcode value\n\t *\n\t * @var string\n\t */\n\tpublic $barcode;\n\n\t/**\n\t * Main Barcode type ID\n\t *\n\t * @var int\n\t */\n\tpublic $barcode_type;\n\n\t/**\n\t * Main Barcode type code\n\t *\n\t * @var string\n\t */\n\tpublic $barcode_type_code;\n\n\tpublic $stats_propale = array();\n\tpublic $stats_commande = array();\n\tpublic $stats_contrat = array();\n\tpublic $stats_facture = array();\n\tpublic $stats_commande_fournisseur = array();\n\tpublic $stats_reception = array();\n\tpublic $stats_mrptoconsume = array();\n\tpublic $stats_mrptoproduce = array();\n\n\t//! Size of image\n\tpublic $imgWidth;\n\tpublic $imgHeight;\n\n\t/**\n\t * @var integer|string date_creation\n\t */\n\tpublic $date_creation;\n\n\t/**\n\t * @var integer|string date_modification\n\t */\n\tpublic $date_modification;\n\n\t//! Id du fournisseur\n\tpublic $product_fourn_id;\n\n\t//! Product ID already linked to a reference supplier\n\tpublic $product_id_already_linked;\n\n\tpublic $nbphoto = 0;\n\n\t//! Contains detail of stock of product into each warehouse\n\tpublic $stock_warehouse = array();\n\n\tpublic $oldcopy;\n\n\t/**\n\t * @var int Default warehouse Id\n\t */\n\tpublic $fk_default_warehouse;\n\t/**\n\t * @var int ID\n\t */\n\tpublic $fk_price_expression;\n\n\t/* To store supplier price found */\n\tpublic $fourn_pu;\n\tpublic $fourn_price_base_type;\n\tpublic $fourn_socid;\n\n\t/**\n\t * @deprecated\n\t * @see        $ref_supplier\n\t */\n\tpublic $ref_fourn;\n\n\t/**\n\t * @var string ref supplier\n\t */\n\tpublic $ref_supplier;\n\n\t/**\n\t * Unit code ('km', 'm', 'l', 'p', ...)\n\t *\n\t * @var string\n\t */\n\tpublic $fk_unit;\n\n\t/**\n\t * Price is generated using multiprice rules\n\t *\n\t * @var int\n\t */\n\tpublic $price_autogen = 0;\n\n\t/**\n\t * Array with list of supplier prices of product\n\t *\n\t * @var array\n\t */\n\tpublic $supplierprices;\n\n\t/**\n\t * Property set to save result of isObjectUsed(). Used for example by Product API.\n\t *\n\t * @var boolean\n\t */\n\tpublic $is_object_used;\n\n\n\t/**\n\t *\n\t *\n\t *\n\t */\n\t public $mandatory_period;\n\n\t/**\n\t *  'type' if the field format ('integer', 'integer:ObjectClass:PathToClass[:AddCreateButtonOrNot[:Filter]]', 'varchar(x)', 'double(24,8)', 'real', 'price', 'text', 'html', 'date', 'datetime', 'timestamp', 'duration', 'mail', 'phone', 'url', 'password')\n\t *         Note: Filter can be a string like \"(t.ref:like:'SO-%') or (t.date_creation:<:'20160101') or (t.nature:is:NULL)\"\n\t *  'label' the translation key.\n\t *  'enabled' is a condition when the field must be managed (Example: 1 or '$conf->global->MY_SETUP_PARAM)\n\t *  'position' is the sort order of field.\n\t *  'notnull' is set to 1 if not null in database. Set to -1 if we must set data to null if empty ('' or 0).\n\t *  'visible' says if field is visible in list (Examples: 0=Not visible, 1=Visible on list and create/update/view forms, 2=Visible on list only, 3=Visible on create/update/view form only (not list), 4=Visible on list and update/view form only (not create). 5=Visible on list and view only (not create/not update). Using a negative value means field is not shown by default on list but can be selected for viewing)\n\t *  'noteditable' says if field is not editable (1 or 0)\n\t *  'default' is a default value for creation (can still be overwrote by the Setup of Default Values if field is editable in creation form). Note: If default is set to '(PROV)' and field is 'ref', the default value will be set to '(PROVid)' where id is rowid when a new record is created.\n\t *  'index' if we want an index in database.\n\t *  'foreignkey'=>'tablename.field' if the field is a foreign key (it is recommanded to name the field fk_...).\n\t *  'searchall' is 1 if we want to search in this field when making a search from the quick search button.\n\t *  'isameasure' must be set to 1 if you want to have a total on list for this field. Field type must be summable like integer or double(24,8).\n\t *  'css' is the CSS style to use on field. For example: 'maxwidth200'\n\t *  'help' is a string visible as a tooltip on field\n\t *  'showoncombobox' if value of the field must be visible into the label of the combobox that list record\n\t *  'disabled' is 1 if we want to have the field locked by a 'disabled' attribute. In most cases, this is never set into the definition of $fields into class, but is set dynamically by some part of code.\n\t *  'arrayofkeyval' to set list of value if type is a list of predefined values. For example: array(\"0\"=>\"Draft\",\"1\"=>\"Active\",\"-1\"=>\"Cancel\")\n\t *  'autofocusoncreate' to have field having the focus on a create form. Only 1 field should have this property set to 1.\n\t *  'comment' is not used. You can store here any text of your choice. It is not used by application.\n\t *\n\t *  Note: To have value dynamic, you can set value to 0 in definition and edit the value on the fly into the constructor.\n\t */\n\n\t/**\n\t * @var array fields of object product\n\t */\n\tpublic $fields = array(\n\t\t'rowid' => array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'index'=>1, 'position'=>1, 'comment'=>'Id'),\n\t\t'ref'           =>array('type'=>'varchar(128)', 'label'=>'Ref', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1, 'comment'=>'Reference of object'),\n\t\t'entity'        =>array('type'=>'integer', 'label'=>'Entity', 'enabled'=>1, 'visible'=>0, 'default'=>1, 'notnull'=>1, 'index'=>1, 'position'=>5),\n\t\t'label'         =>array('type'=>'varchar(255)', 'label'=>'Label', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>2, 'position'=>15),\n\t\t'barcode'       =>array('type'=>'varchar(255)', 'label'=>'Barcode', 'enabled'=>'!empty($conf->barcode->enabled)', 'position'=>20, 'visible'=>-1, 'showoncombobox'=>3),\n\t\t'fk_barcode_type' => array('type'=>'integer', 'label'=>'BarcodeType', 'enabled'=>'1', 'position'=>21, 'notnull'=>0, 'visible'=>-1,),\n\t\t'note_public'   =>array('type'=>'html', 'label'=>'NotePublic', 'enabled'=>1, 'visible'=>0, 'position'=>61),\n\t\t'note'          =>array('type'=>'html', 'label'=>'NotePrivate', 'enabled'=>1, 'visible'=>0, 'position'=>62),\n\t\t'datec'         =>array('type'=>'datetime', 'label'=>'DateCreation', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>500),\n\t\t'tms'           =>array('type'=>'timestamp', 'label'=>'DateModification', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>501),\n\t\t//'date_valid'    =>array('type'=>'datetime',     'label'=>'DateCreation',     'enabled'=>1, 'visible'=>-2, 'position'=>502),\n\t\t'fk_user_author'=>array('type'=>'integer', 'label'=>'UserAuthor', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'position'=>510, 'foreignkey'=>'llx_user.rowid'),\n\t\t'fk_user_modif' =>array('type'=>'integer', 'label'=>'UserModif', 'enabled'=>1, 'visible'=>-2, 'notnull'=>-1, 'position'=>511),\n\t\t//'fk_user_valid' =>array('type'=>'integer',      'label'=>'UserValidation',        'enabled'=>1, 'visible'=>-1, 'position'=>512),\n\t\t'localtax1_tx' => array('type'=>'double(6,3)', 'label'=>'Localtax1tx', 'enabled'=>'1', 'position'=>150, 'notnull'=>0, 'visible'=>-1,),\n\t\t'localtax1_type' => array('type'=>'varchar(10)', 'label'=>'Localtax1type', 'enabled'=>'1', 'position'=>155, 'notnull'=>1, 'visible'=>-1,),\n\t\t'localtax2_tx' => array('type'=>'double(6,3)', 'label'=>'Localtax2tx', 'enabled'=>'1', 'position'=>160, 'notnull'=>0, 'visible'=>-1,),\n\t\t'localtax2_type' => array('type'=>'varchar(10)', 'label'=>'Localtax2type', 'enabled'=>'1', 'position'=>165, 'notnull'=>1, 'visible'=>-1,),\n\t\t'import_key'    =>array('type'=>'varchar(14)', 'label'=>'ImportId', 'enabled'=>1, 'visible'=>-2, 'notnull'=>-1, 'index'=>0, 'position'=>1000),\n\t\t//'tosell'       =>array('type'=>'integer',      'label'=>'Status',           'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000, 'arrayofkeyval'=>array(0=>'Draft', 1=>'Active', -1=>'Cancel')),\n\t\t//'tobuy'        =>array('type'=>'integer',      'label'=>'Status',           'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000, 'arrayofkeyval'=>array(0=>'Draft', 1=>'Active', -1=>'Cancel')),\n\t\t'mandatory_period'        =>array('type'=>'integer', 'label'=>'mandatory_period', 'enabled'=>1, 'visible'=>1,  'notnull'=>1, 'default'=>0, 'index'=>1,  'position'=>1000),\n\n\t);\n\n\t/**\n\t * Regular product\n\t */\n\tconst TYPE_PRODUCT = 0;\n\t/**\n\t * Service\n\t */\n\tconst TYPE_SERVICE = 1;\n\t/**\n\t * Advanced feature: assembly kit\n\t */\n\tconst TYPE_ASSEMBLYKIT = 2;\n\t/**\n\t * Advanced feature: stock kit\n\t */\n\tconst TYPE_STOCKKIT = 3;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t * @param DoliDB $db Database handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t$this->db = $db;\n\t\t$this->canvas = '';\n\t}\n\n\t/**\n\t *    Check that ref and label are ok\n\t *\n\t * @return int         >1 if OK, <=0 if KO\n\t */\n\tpublic function check()\n\t{\n\t\t$this->ref = dol_sanitizeFileName(stripslashes($this->ref));\n\n\t\t$err = 0;\n\t\tif (dol_strlen(trim($this->ref)) == 0) {\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->label)) == 0) {\n\t\t\t$err++;\n\t\t}\n\n\t\tif ($err > 0) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t *    Insert product into database\n\t *\n\t * @param  User $user      User making insert\n\t * @param  int  $notrigger Disable triggers\n\t * @return int                         Id of product/service if OK, < 0 if KO\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_sanitizeFileName(dol_string_nospecial(trim($this->ref)));\n\t\t$this->label = trim($this->label);\n\t\t$this->price_ttc = price2num($this->price_ttc);\n\t\t$this->price = price2num($this->price);\n\t\t$this->price_min_ttc = price2num($this->price_min_ttc);\n\t\t$this->price_min = price2num($this->price_min);\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($this->tva_npr)) {\n\t\t\t$this->tva_npr = 0;\n\t\t}\n\t\t//Local taxes\n\t\tif (empty($this->localtax1_tx)) {\n\t\t\t$this->localtax1_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax2_tx)) {\n\t\t\t$this->localtax2_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax1_type)) {\n\t\t\t$this->localtax1_type = '0';\n\t\t}\n\t\tif (empty($this->localtax2_type)) {\n\t\t\t$this->localtax2_type = '0';\n\t\t}\n\t\tif (empty($this->price)) {\n\t\t\t$this->price = 0;\n\t\t}\n\t\tif (empty($this->price_min)) {\n\t\t\t$this->price_min = 0;\n\t\t}\n\t\t// Price by quantity\n\t\tif (empty($this->price_by_qty)) {\n\t\t\t$this->price_by_qty = 0;\n\t\t}\n\n\t\tif (empty($this->status)) {\n\t\t\t$this->status = 0;\n\t\t}\n\t\tif (empty($this->status_buy)) {\n\t\t\t$this->status_buy = 0;\n\t\t}\n\n\t\t$price_ht = 0;\n\t\t$price_ttc = 0;\n\t\t$price_min_ht = 0;\n\t\t$price_min_ttc = 0;\n\n\t\t//\n\t\tif ($this->price_base_type == 'TTC' && $this->price_ttc > 0) {\n\t\t\t$price_ttc = price2num($this->price_ttc, 'MU');\n\t\t\t$price_ht = price2num($this->price_ttc / (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif ($this->price_base_type != 'TTC' && $this->price > 0) {\n\t\t\t$price_ht = price2num($this->price, 'MU');\n\t\t\t$price_ttc = price2num($this->price * (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min_ttc > 0) && ($this->price_base_type == 'TTC')) {\n\t\t\t$price_min_ttc = price2num($this->price_min_ttc, 'MU');\n\t\t\t$price_min_ht = price2num($this->price_min_ttc / (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t//\n\t\tif (($this->price_min > 0) && ($this->price_base_type != 'TTC')) {\n\t\t\t$price_min_ht = price2num($this->price_min, 'MU');\n\t\t\t$price_min_ttc = price2num($this->price_min * (1 + ($this->tva_tx / 100)), 'MU');\n\t\t}\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_buy_intra = trim($this->accountancy_code_buy_intra);\n\t\t$this->accountancy_code_buy_export = trim($this->accountancy_code_buy_export);\n\t\t$this->accountancy_code_sell = trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra = trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export = trim($this->accountancy_code_sell_export);\n\n\t\t// Barcode value\n\t\t$this->barcode = trim($this->barcode);\n\t\t$this->mandatory_period = empty($this->mandatory_period) ? 0 : $this->mandatory_period;\n\t\t// Check parameters\n\t\tif (empty($this->label)) {\n\t\t\t$this->error = 'ErrorMandatoryParametersNotProvided';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($this->ref) || $this->ref == 'auto') {\n\t\t\t// Load object modCodeProduct\n\t\t\t$module = (!empty($conf->global->PRODUCT_CODEPRODUCT_ADDON) ? $conf->global->PRODUCT_CODEPRODUCT_ADDON : 'mod_codeproduct_leopard');\n\t\t\tif ($module != 'mod_codeproduct_leopard') {    // Do not load module file for leopard\n\t\t\t\tif (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php') {\n\t\t\t\t\t$module = substr($module, 0, dol_strlen($module) - 4);\n\t\t\t\t}\n\t\t\t\tdol_include_once('/core/modules/product/'.$module.'.php');\n\t\t\t\t$modCodeProduct = new $module;\n\t\t\t\tif (!empty($modCodeProduct->code_auto)) {\n\t\t\t\t\t$this->ref = $modCodeProduct->getNextValue($this, $this->type);\n\t\t\t\t}\n\t\t\t\tunset($modCodeProduct);\n\t\t\t}\n\n\t\t\tif (empty($this->ref)) {\n\t\t\t\t$this->error = 'ProductModuleNotSetupForAutoRef';\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create ref=\".$this->ref.\" price=\".$this->price.\" price_ttc=\".$this->price_ttc.\" tva_tx=\".$this->tva_tx.\" price_base_type=\".$this->price_base_type, LOG_DEBUG);\n\n\t\t$now = dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// For automatic creation during create action (not used by Dolibarr GUI, can be used by scripts)\n\t\tif ($this->barcode == -1) {\n\t\t\t$this->barcode = $this->get_barcode($this, $this->barcode_type_code);\n\t\t}\n\n\t\t// Check more parameters\n\t\t// If error, this->errors[] is filled\n\t\t$result = $this->verify();\n\n\t\tif ($result >= 0) {\n\t\t\t$sql = \"SELECT count(*) as nb\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql .= \" WHERE entity IN (\".getEntity('product').\")\";\n\t\t\t$sql .= \" AND ref = '\".$this->db->escape($this->ref).\"'\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\tif ($obj->nb == 0) {\n\t\t\t\t\t// Produit non deja existant\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product (\";\n\t\t\t\t\t$sql .= \"datec\";\n\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t$sql .= \", ref\";\n\t\t\t\t\t$sql .= \", ref_ext\";\n\t\t\t\t\t$sql .= \", price_min\";\n\t\t\t\t\t$sql .= \", price_min_ttc\";\n\t\t\t\t\t$sql .= \", label\";\n\t\t\t\t\t$sql .= \", fk_user_author\";\n\t\t\t\t\t$sql .= \", fk_product_type\";\n\t\t\t\t\t$sql .= \", price\";\n\t\t\t\t\t$sql .= \", price_ttc\";\n\t\t\t\t\t$sql .= \", price_base_type\";\n\t\t\t\t\t$sql .= \", tobuy\";\n\t\t\t\t\t$sql .= \", tosell\";\n\t\t\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql .= \", canvas\";\n\t\t\t\t\t$sql .= \", finished\";\n\t\t\t\t\t$sql .= \", tobatch\";\n\t\t\t\t\t$sql .= \", batch_mask\";\n\t\t\t\t\t$sql .= \", fk_unit\";\n\t\t\t\t\t$sql .= \", mandatory_period\";\n\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t$sql .= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t\t$sql .= \", \".((int) $conf->entity);\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->ref).\"'\";\n\t\t\t\t\t$sql .= \", \".(!empty($this->ref_ext) ? \"'\".$this->db->escape($this->ref_ext).\"'\" : \"null\");\n\t\t\t\t\t$sql .= \", \".price2num($price_min_ht);\n\t\t\t\t\t$sql .= \", \".price2num($price_min_ttc);\n\t\t\t\t\t$sql .= \", \".(!empty($this->label) ? \"'\".$this->db->escape($this->label).\"'\" : \"null\");\n\t\t\t\t\t$sql .= \", \".((int) $user->id);\n\t\t\t\t\t$sql .= \", \".((int) $this->type);\n\t\t\t\t\t$sql .= \", \".price2num($price_ht, 'MT');\n\t\t\t\t\t$sql .= \", \".price2num($price_ttc, 'MT');\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->price_base_type).\"'\";\n\t\t\t\t\t$sql .= \", \".((int) $this->status);\n\t\t\t\t\t$sql .= \", \".((int) $this->status_buy);\n\t\t\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy_intra).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_buy_export).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell_intra).\"'\";\n\t\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->accountancy_code_sell_export).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->canvas).\"'\";\n\t\t\t\t\t$sql .= \", \".((!isset($this->finished) || $this->finished < 0 || $this->finished == '') ? 'NULL' : (int) $this->finished);\n\t\t\t\t\t$sql .= \", \".((empty($this->status_batch) || $this->status_batch < 0) ? '0' : ((int) $this->status_batch));\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->batch_mask).\"'\";\n\t\t\t\t\t$sql .= \", \".($this->fk_unit > 0 ? ((int) $this->fk_unit) : 'NULL');\n\t\t\t\t\t$sql .= \", '\".$this->db->escape($this->mandatory_period).\"'\";\n\t\t\t\t\t$sql .= \")\";\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::Create\", LOG_DEBUG);\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif ($result) {\n\t\t\t\t\t\t$id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product\");\n\n\t\t\t\t\t\tif ($id > 0) {\n\t\t\t\t\t\t\t$this->id = $id;\n\t\t\t\t\t\t\t$this->price            = $price_ht;\n\t\t\t\t\t\t\t$this->price_ttc        = $price_ttc;\n\t\t\t\t\t\t\t$this->price_min        = $price_min_ht;\n\t\t\t\t\t\t\t$this->price_min_ttc    = $price_min_ttc;\n\n\t\t\t\t\t\t\t$result = $this->_log_price($user);\n\t\t\t\t\t\t\tif ($result > 0) {\n\t\t\t\t\t\t\t\tif ($this->update($id, $user, true, 'add') <= 0) {\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// update accountancy for this entity\n\t\t\t\t\t\t\tif (!$error && !empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t\t\t\t$this->db->query(\"DELETE FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \" .((int) $this->id) . \" AND entity = \" . ((int) $conf->entity));\n\n\t\t\t\t\t\t\t\t$sql = \"INSERT INTO \" . MAIN_DB_PREFIX . \"product_perentity (\";\n\t\t\t\t\t\t\t\t$sql .= \" fk_product\";\n\t\t\t\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t\t\t\t$sql .= $this->id;\n\t\t\t\t\t\t\t\t$sql .= \", \" . $conf->entity;\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t\t\t$this->error = 'ErrorFailedToInsertAccountancyForEntity';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->error = 'ErrorFailedToGetInsertedId';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Product already exists with this ref\n\t\t\t\t\t$langs->load(\"products\");\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->error = \"ErrorProductAlreadyExists\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Create fails verify \".join(',', $this->errors), LOG_WARNING);\n\t\t\treturn -3;\n\t\t}\n\t}\n\n\n\t/**\n\t *    Check properties of product are ok (like name, barcode, ...).\n\t *    All properties must be already loaded on object (this->barcode, this->barcode_type_code, ...).\n\t *\n\t * @return int        0 if OK, <0 if KO\n\t */\n\tpublic function verify()\n\t{\n\t\tglobal $langs;\n\n\t\t$this->errors = array();\n\n\t\t$result = 0;\n\t\t$this->ref = trim($this->ref);\n\n\t\tif (!$this->ref) {\n\t\t\t$this->errors[] = 'ErrorBadRef';\n\t\t\t$result = -2;\n\t\t}\n\n\t\t$arrayofnonnegativevalue = array('weight'=>'Weight', 'width'=>'Width', 'height'=>'Height', 'length'=>'Length', 'surface'=>'Surface', 'volume'=>'Volume');\n\t\tforeach ($arrayofnonnegativevalue as $key => $value) {\n\t\t\tif (property_exists($this, $key) && $this->$key < 0) {\n\t\t\t\t$langs->load(\"other\");\n\t\t\t\t$this->errors[] = $langs->trans(\"FieldCannotBeNegative\", $langs->transnoentitiesnoconv($value));\n\t\t\t\t$result = -4;\n\t\t\t}\n\t\t}\n\n\t\t$rescode = $this->check_barcode($this->barcode, $this->barcode_type_code);\n\t\tif ($rescode) {\n\t\t\tif ($rescode == -1) {\n\t\t\t\t$this->errors[] = 'ErrorBadBarCodeSyntax';\n\t\t\t} elseif ($rescode == -2) {\n\t\t\t\t$this->errors[] = 'ErrorBarCodeRequired';\n\t\t\t} elseif ($rescode == -3) {\n\t\t\t\t// Note: Common usage is to have barcode unique. For variants, we should have a different barcode.\n\t\t\t\t$this->errors[] = 'ErrorBarCodeAlreadyUsed';\n\t\t\t}\n\n\t\t\t$result = -3;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Check barcode\n\t *\n\t * @param  string $valuetotest Value to test\n\t * @param  string $typefortest Type of barcode (ISBN, EAN, ...)\n\t * @return int                        0 if OK\n\t *                                     -1 ErrorBadBarCodeSyntax\n\t *                                     -2 ErrorBarCodeRequired\n\t *                                     -3 ErrorBarCodeAlreadyUsed\n\t */\n\tpublic function check_barcode($valuetotest, $typefortest)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tif (!empty($conf->barcode->enabled) && !empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t\t\t$module = strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);\n\n\t\t\t$dirsociete = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\t\t\tforeach ($dirsociete as $dirroot) {\n\t\t\t\t$res = dol_include_once($dirroot.$module.'.php');\n\t\t\t\tif ($res) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$mod = new $module();\n\n\t\t\tdol_syslog(get_class($this).\"::check_barcode value=\".$valuetotest.\" type=\".$typefortest.\" module=\".$module);\n\t\t\t$result = $mod->verif($this->db, $valuetotest, $this, 0, $typefortest);\n\t\t\treturn $result;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *  Update a record into database.\n\t *  If batch flag is set to on, we create records into llx_product_batch\n\t *\n\t * @param  int     $id          Id of product\n\t * @param  User    $user        Object user making update\n\t * @param  int     $notrigger   Disable triggers\n\t * @param  string  $action      Current action for hookmanager ('add' or 'update')\n\t * @param  boolean $updatetype  Update product type\n\t * @return int                  1 if OK, -1 if ref already exists, -2 if other error\n\t */\n\tpublic function update($id, $user, $notrigger = false, $action = 'update', $updatetype = false)\n\t{\n\t\tglobal $langs, $conf, $hookmanager;\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif (!$this->label) {\n\t\t\t$this->label = 'MISSING LABEL';\n\t\t}\n\n\t\t// Clean parameters\n\t\t$this->ref = dol_string_nospecial(trim($this->ref));\n\t\t$this->label = trim($this->label);\n\t\t$this->description = trim($this->description);\n\t\t$this->note = (isset($this->note) ? trim($this->note) : null);\n\t\t$this->net_measure = price2num($this->net_measure);\n\t\t$this->net_measure_units = trim($this->net_measure_units);\n\t\t$this->weight = price2num($this->weight);\n\t\t$this->weight_units = trim($this->weight_units);\n\t\t$this->length = price2num($this->length);\n\t\t$this->length_units = trim($this->length_units);\n\t\t$this->width = price2num($this->width);\n\t\t$this->width_units = trim($this->width_units);\n\t\t$this->height = price2num($this->height);\n\t\t$this->height_units = trim($this->height_units);\n\t\t$this->surface = price2num($this->surface);\n\t\t$this->surface_units = trim($this->surface_units);\n\t\t$this->volume = price2num($this->volume);\n\t\t$this->volume_units = trim($this->volume_units);\n\n\t\t// set unit not defined\n\t\tif (is_numeric($this->length_units)) {\n\t\t\t$this->width_units = $this->length_units; // Not used yet\n\t\t}\n\t\tif (is_numeric($this->length_units)) {\n\t\t\t$this->height_units = $this->length_units; // Not used yet\n\t\t}\n\n\t\t// Automated compute surface and volume if not filled\n\t\tif (empty($this->surface) && !empty($this->length) && !empty($this->width) && $this->length_units == $this->width_units) {\n\t\t\t$this->surface = $this->length * $this->width;\n\t\t\t$this->surface_units = measuring_units_squared($this->length_units);\n\t\t}\n\t\tif (empty($this->volume) && !empty($this->surface) && !empty($this->height) && $this->length_units == $this->height_units) {\n\t\t\t$this->volume = $this->surface * $this->height;\n\t\t\t$this->volume_units = measuring_units_cubed($this->height_units);\n\t\t}\n\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($this->tva_npr)) {\n\t\t\t$this->tva_npr = 0;\n\t\t}\n\t\tif (empty($this->localtax1_tx)) {\n\t\t\t$this->localtax1_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax2_tx)) {\n\t\t\t$this->localtax2_tx = 0;\n\t\t}\n\t\tif (empty($this->localtax1_type)) {\n\t\t\t$this->localtax1_type = '0';\n\t\t}\n\t\tif (empty($this->localtax2_type)) {\n\t\t\t$this->localtax2_type = '0';\n\t\t}\n\t\tif (empty($this->status)) {\n\t\t\t$this->status = 0;\n\t\t}\n\t\tif (empty($this->status_buy)) {\n\t\t\t$this->status_buy = 0;\n\t\t}\n\n\t\tif (empty($this->country_id)) {\n\t\t\t$this->country_id = 0;\n\t\t}\n\n\t\tif (empty($this->state_id)) {\n\t\t\t$this->state_id = 0;\n\t\t}\n\n\t\t// Barcode value\n\t\t$this->barcode = trim($this->barcode);\n\n\t\t$this->accountancy_code_buy = trim($this->accountancy_code_buy);\n\t\t$this->accountancy_code_buy_intra = trim($this->accountancy_code_buy_intra);\n\t\t$this->accountancy_code_buy_export = trim($this->accountancy_code_buy_export);\n\t\t$this->accountancy_code_sell = trim($this->accountancy_code_sell);\n\t\t$this->accountancy_code_sell_intra = trim($this->accountancy_code_sell_intra);\n\t\t$this->accountancy_code_sell_export = trim($this->accountancy_code_sell_export);\n\n\n\t\t$this->db->begin();\n\n\t\t$result = 0;\n\t\t// Check name is required and codes are ok or unique. If error, this->errors[] is filled\n\t\tif ($action != 'add') {\n\t\t\t$result = $this->verify(); // We don't check when update called during a create because verify was already done\n\t\t} else {\n\t\t\t// we can continue\n\t\t\t$result = 0;\n\t\t}\n\n\t\tif ($result >= 0) {\n\t\t\tif (empty($this->oldcopy)) {\n\t\t\t\t$org = new self($this->db);\n\t\t\t\t$org->fetch($this->id);\n\t\t\t\t$this->oldcopy = $org;\n\t\t\t}\n\n\t\t\t// Test if batch management is activated on existing product\n\t\t\t// If yes, we create missing entries into product_batch\n\t\t\tif ($this->hasbatch() && !$this->oldcopy->hasbatch()) {\n\t\t\t\t//$valueforundefinedlot = 'Undefined';  // In previous version, 39 and lower\n\t\t\t\t$valueforundefinedlot = '000000';\n\t\t\t\tif (!empty($conf->global->STOCK_DEFAULT_BATCH)) {\n\t\t\t\t\t$valueforundefinedlot = $conf->global->STOCK_DEFAULT_BATCH;\n\t\t\t\t}\n\n\t\t\t\tdol_syslog(\"Flag batch of product id=\".$this->id.\" is set to ON, so we will create missing records into product_batch\");\n\n\t\t\t\t$this->load_stock();\n\t\t\t\tforeach ($this->stock_warehouse as $idW => $ObjW) {   // For each warehouse where we have stocks defined for this product (for each lines in product_stock)\n\t\t\t\t\t$qty_batch = 0;\n\t\t\t\t\tforeach ($ObjW->detail_batch as $detail) {    // Each lines of detail in product_batch of the current $ObjW = product_stock\n\t\t\t\t\t\tif ($detail->batch == $valueforundefinedlot || $detail->batch == 'Undefined') {\n\t\t\t\t\t\t\t// We discard this line, we will create it later\n\t\t\t\t\t\t\t$sqlclean = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_batch WHERE batch in('Undefined', '\".$this->db->escape($valueforundefinedlot).\"') AND fk_product_stock = \".((int) $ObjW->id);\n\t\t\t\t\t\t\t$result = $this->db->query($sqlclean);\n\t\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$qty_batch += $detail->qty;\n\t\t\t\t\t}\n\t\t\t\t\t// Quantities in batch details are not same as stock quantity,\n\t\t\t\t\t// so we add a default batch record to complete and get same qty in parent and child table\n\t\t\t\t\tif ($ObjW->real <> $qty_batch) {\n\t\t\t\t\t\t$ObjBatch = new Productbatch($this->db);\n\t\t\t\t\t\t$ObjBatch->batch = $valueforundefinedlot;\n\t\t\t\t\t\t$ObjBatch->qty = ($ObjW->real - $qty_batch);\n\t\t\t\t\t\t$ObjBatch->fk_product_stock = $ObjW->id;\n\n\t\t\t\t\t\tif ($ObjBatch->create($user, 1) < 0) {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->errors = $ObjBatch->errors;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For automatic creation\n\t\t\tif ($this->barcode == -1) {\n\t\t\t\t$this->barcode = $this->get_barcode($this, $this->barcode_type_code);\n\t\t\t}\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product\";\n\t\t\t$sql .= \" SET label = '\".$this->db->escape($this->label).\"'\";\n\n\t\t\tif ($updatetype && ($this->isProduct() || $this->isService())) {\n\t\t\t\t$sql .= \", fk_product_type = \".((int) $this->type);\n\t\t\t}\n\n\t\t\t$sql .= \", ref = '\".$this->db->escape($this->ref).\"'\";\n\t\t\t$sql .= \", ref_ext = \".(!empty($this->ref_ext) ? \"'\".$this->db->escape($this->ref_ext).\"'\" : \"null\");\n\t\t\t$sql .= \", default_vat_code = \".($this->default_vat_code ? \"'\".$this->db->escape($this->default_vat_code).\"'\" : \"null\");\n\t\t\t$sql .= \", tva_tx = \".((float) $this->tva_tx);\n\t\t\t$sql .= \", recuperableonly = \".((int) $this->tva_npr);\n\t\t\t$sql .= \", localtax1_tx = \".((float) $this->localtax1_tx);\n\t\t\t$sql .= \", localtax2_tx = \".((float) $this->localtax2_tx);\n\t\t\t$sql .= \", localtax1_type = \".($this->localtax1_type != '' ? \"'\".$this->db->escape($this->localtax1_type).\"'\" : \"'0'\");\n\t\t\t$sql .= \", localtax2_type = \".($this->localtax2_type != '' ? \"'\".$this->db->escape($this->localtax2_type).\"'\" : \"'0'\");\n\n\t\t\t$sql .= \", barcode = \".(empty($this->barcode) ? \"null\" : \"'\".$this->db->escape($this->barcode).\"'\");\n\t\t\t$sql .= \", fk_barcode_type = \".(empty($this->barcode_type) ? \"null\" : $this->db->escape($this->barcode_type));\n\n\t\t\t$sql .= \", tosell = \".(int) $this->status;\n\t\t\t$sql .= \", tobuy = \".(int) $this->status_buy;\n\t\t\t$sql .= \", tobatch = \".((empty($this->status_batch) || $this->status_batch < 0) ? '0' : (int) $this->status_batch);\n\t\t\t$sql .= \", batch_mask = '\".$this->db->escape($this->batch_mask).\"'\";\n\n\t\t\t$sql .= \", finished = \".((!isset($this->finished) || $this->finished < 0 || $this->finished == '') ? \"null\" : (int) $this->finished);\n\t\t\t$sql .= \", fk_default_bom = \".((!isset($this->fk_default_bom) || $this->fk_default_bom < 0 || $this->fk_default_bom == '') ? \"null\" : (int) $this->fk_default_bom);\n\t\t\t$sql .= \", net_measure = \".($this->net_measure != '' ? \"'\".$this->db->escape($this->net_measure).\"'\" : 'null');\n\t\t\t$sql .= \", net_measure_units = \".($this->net_measure_units != '' ? \"'\".$this->db->escape($this->net_measure_units).\"'\" : 'null');\n\t\t\t$sql .= \", weight = \".($this->weight != '' ? \"'\".$this->db->escape($this->weight).\"'\" : 'null');\n\t\t\t$sql .= \", weight_units = \".($this->weight_units != '' ? \"'\".$this->db->escape($this->weight_units).\"'\" : 'null');\n\t\t\t$sql .= \", length = \".($this->length != '' ? \"'\".$this->db->escape($this->length).\"'\" : 'null');\n\t\t\t$sql .= \", length_units = \".($this->length_units != '' ? \"'\".$this->db->escape($this->length_units).\"'\" : 'null');\n\t\t\t$sql .= \", width= \".($this->width != '' ? \"'\".$this->db->escape($this->width).\"'\" : 'null');\n\t\t\t$sql .= \", width_units = \".($this->width_units != '' ? \"'\".$this->db->escape($this->width_units).\"'\" : 'null');\n\t\t\t$sql .= \", height = \".($this->height != '' ? \"'\".$this->db->escape($this->height).\"'\" : 'null');\n\t\t\t$sql .= \", height_units = \".($this->height_units != '' ? \"'\".$this->db->escape($this->height_units).\"'\" : 'null');\n\t\t\t$sql .= \", surface = \".($this->surface != '' ? \"'\".$this->db->escape($this->surface).\"'\" : 'null');\n\t\t\t$sql .= \", surface_units = \".($this->surface_units != '' ? \"'\".$this->db->escape($this->surface_units).\"'\" : 'null');\n\t\t\t$sql .= \", volume = \".($this->volume != '' ? \"'\".$this->db->escape($this->volume).\"'\" : 'null');\n\t\t\t$sql .= \", volume_units = \".($this->volume_units != '' ? \"'\".$this->db->escape($this->volume_units).\"'\" : 'null');\n\t\t\t$sql .= \", fk_default_warehouse = \".($this->fk_default_warehouse > 0 ? $this->db->escape($this->fk_default_warehouse) : 'null');\n\t\t\t$sql .= \", seuil_stock_alerte = \".((isset($this->seuil_stock_alerte) && is_numeric($this->seuil_stock_alerte)) ? (float) $this->seuil_stock_alerte : 'null');\n\t\t\t$sql .= \", description = '\".$this->db->escape($this->description).\"'\";\n\t\t\t$sql .= \", url = \".($this->url ? \"'\".$this->db->escape($this->url).\"'\" : 'null');\n\t\t\t$sql .= \", customcode = '\".$this->db->escape($this->customcode).\"'\";\n\t\t\t$sql .= \", fk_country = \".($this->country_id > 0 ? (int) $this->country_id : 'null');\n\t\t\t$sql .= \", fk_state = \".($this->state_id > 0 ? (int) $this->state_id : 'null');\n\t\t\t$sql .= \", lifetime = \".($this->lifetime > 0 ? (int) $this->lifetime : 'null');\n\t\t\t$sql .= \", qc_frequency = \".($this->qc_frequency > 0 ? (int) $this->qc_frequency : 'null');\n\t\t\t$sql .= \", note = \".(isset($this->note) ? \"'\".$this->db->escape($this->note).\"'\" : 'null');\n\t\t\t$sql .= \", duration = '\".$this->db->escape($this->duration_value.$this->duration_unit).\"'\";\n\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t$sql .= \", accountancy_code_buy = '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_buy_intra = '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_buy_export = '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell= '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell_intra= '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t$sql .= \", accountancy_code_sell_export= '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t}\n\t\t\t$sql .= \", desiredstock = \".((isset($this->desiredstock) && is_numeric($this->desiredstock)) ? (float) $this->desiredstock : \"null\");\n\t\t\t$sql .= \", cost_price = \".($this->cost_price != '' ? $this->db->escape($this->cost_price) : 'null');\n\t\t\t$sql .= \", fk_unit= \".(!$this->fk_unit ? 'NULL' : (int) $this->fk_unit);\n\t\t\t$sql .= \", price_autogen = \".(!$this->price_autogen ? 0 : 1);\n\t\t\t$sql .= \", fk_price_expression = \".($this->fk_price_expression != 0 ? (int) $this->fk_price_expression : 'NULL');\n\t\t\t$sql .= \", fk_user_modif = \".($user->id > 0 ? $user->id : 'NULL');\n\t\t\t$sql .= \", mandatory_period = \".($this->mandatory_period );\n\t\t\t// stock field is not here because it is a denormalized value from product_stock.\n\t\t\t$sql .= \" WHERE rowid = \".((int) $id);\n\n\t\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$this->id = $id;\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\t\tif ($this->setMultiLangs($user) < 0) {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t\treturn -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$action = 'update';\n\n\t\t\t\t// update accountancy for this entity\n\t\t\t\tif (!$error && !empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t\t$this->db->query(\"DELETE FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \" . ((int) $this->id) . \" AND entity = \" . ((int) $conf->entity));\n\n\t\t\t\t\t$sql = \"INSERT INTO \" . MAIN_DB_PREFIX . \"product_perentity (\";\n\t\t\t\t\t$sql .= \" fk_product\";\n\t\t\t\t\t$sql .= \", entity\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy_intra\";\n\t\t\t\t\t$sql .= \", accountancy_code_buy_export\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell_intra\";\n\t\t\t\t\t$sql .= \", accountancy_code_sell_export\";\n\t\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t\t$sql .= $this->id;\n\t\t\t\t\t$sql .= \", \" . $conf->entity;\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_intra) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_buy_export) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_intra) . \"'\";\n\t\t\t\t\t$sql .= \", '\" . $this->db->escape($this->accountancy_code_sell_export) . \"'\";\n\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$this->error = 'ErrorFailedToUpdateAccountancyForEntity';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Actions on extra fields\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t\t// Call trigger\n\t\t\t\t\t$result = $this->call_trigger('PRODUCT_MODIFY', $user);\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t// End call triggers\n\t\t\t\t}\n\n\t\t\t\tif (!$error && (is_object($this->oldcopy) && $this->oldcopy->ref !== $this->ref)) {\n\t\t\t\t\t// We remove directory\n\t\t\t\t\tif ($conf->product->dir_output) {\n\t\t\t\t\t\t$olddir = $conf->product->dir_output.\"/\".dol_sanitizeFileName($this->oldcopy->ref);\n\t\t\t\t\t\t$newdir = $conf->product->dir_output.\"/\".dol_sanitizeFileName($this->ref);\n\t\t\t\t\t\tif (file_exists($olddir)) {\n\t\t\t\t\t\t\t//include_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';\n\t\t\t\t\t\t\t//$res = dol_move($olddir, $newdir);\n\t\t\t\t\t\t\t// do not use dol_move with directory\n\t\t\t\t\t\t\t$res = @rename($olddir, $newdir);\n\t\t\t\t\t\t\tif (!$res) {\n\t\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\t\t$this->error = $langs->trans('ErrorFailToRenameDir', $olddir, $newdir);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\tif (!empty($conf->variants->enabled)) {\n\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\n\t\t\t\t\t\t$comb = new ProductCombination($this->db);\n\n\t\t\t\t\t\tforeach ($comb->fetchAllByFkProductParent($this->id) as $currcomb) {\n\t\t\t\t\t\t\t$currcomb->updateProperties($this, $user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -$error;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($this->db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\tif (empty($conf->barcode->enabled) || empty($this->barcode)) {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductAlreadyExists\", $this->ref);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$langs->trans(\"ErrorProductBarCodeAlreadyExists\", $this->barcode);\n\t\t\t\t\t}\n\t\t\t\t\t$this->errors[] = $this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $langs->trans(\"Error\").\" : \".$this->db->error().\" - \".$sql;\n\t\t\t\t\t$this->errors[] = $this->error;\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -2;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Update fails verify \".join(',', $this->errors), LOG_WARNING);\n\t\t\treturn -3;\n\t\t}\n\t}\n\n\t/**\n\t *  Delete a product from database (if not used)\n\t *\n\t * @param  User $user      User (object) deleting product\n\t * @param  int  $notrigger Do not execute trigger\n\t * @return int                    < 0 if KO, 0 = Not possible, > 0 if OK\n\t */\n\tpublic function delete(User $user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif (empty($this->id)) {\n\t\t\t$this->error = \"Object must be fetched before calling delete\";\n\t\t\treturn -1;\n\t\t}\n\t\tif (($this->type == Product::TYPE_PRODUCT && empty($user->rights->produit->supprimer)) || ($this->type == Product::TYPE_SERVICE && empty($user->rights->service->supprimer))) {\n\t\t\t$this->error = \"ErrorForbidden\";\n\t\t\treturn 0;\n\t\t}\n\n\t\t$objectisused = $this->isObjectUsed($this->id);\n\t\tif (empty($objectisused)) {\n\t\t\t$this->db->begin();\n\n\t\t\tif (!$error && empty($notrigger)) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_DELETE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\t// Delete from product_batch on product delete\n\t\t\tif (!$error) {\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.'product_batch';\n\t\t\t\t$sql .= \" WHERE fk_product_stock IN (\";\n\t\t\t\t$sql .= \"SELECT rowid FROM \".MAIN_DB_PREFIX.'product_stock';\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id).\")\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (!$result) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete all child tables\n\t\t\tif (!$error) {\n\t\t\t\t$elements = array('product_fournisseur_price', 'product_price', 'product_lang', 'categorie_product', 'product_stock', 'product_customer_price', 'product_lot'); // product_batch is done before\n\t\t\t\tforeach ($elements as $table) {\n\t\t\t\t\tif (!$error) {\n\t\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.$table;\n\t\t\t\t\t\t$sql .= \" WHERE fk_product = \".(int) $this->id;\n\n\t\t\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\t\t\tif (!$result) {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination.class.php';\n\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/variants/class/ProductCombination2ValuePair.class.php';\n\n\t\t\t\t//If it is a parent product, then we remove the association with child products\n\t\t\t\t$prodcomb = new ProductCombination($this->db);\n\n\t\t\t\tif ($prodcomb->deleteByFkProductParent($user, $this->id) < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting combinations';\n\t\t\t\t}\n\n\t\t\t\t//We also check if it is a child product\n\t\t\t\tif (!$error && ($prodcomb->fetchByFkProductChild($this->id) > 0) && ($prodcomb->delete($user) < 0)) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = 'Error deleting child combination';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete from product_association\n\t\t\tif (!$error) {\n\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql .= \" WHERE fk_product_pere = \".(int) $this->id.\" OR fk_product_fils = \".(int) $this->id;\n\n\t\t\t\t$result = $this->db->query($sql);\n\t\t\t\tif (!$result) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove extrafields\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->deleteExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Delete product\n\t\t\tif (!$error) {\n\t\t\t\t$sqlz = \"DELETE FROM \".MAIN_DB_PREFIX.\"product\";\n\t\t\t\t$sqlz .= \" WHERE rowid = \".(int) $this->id;\n\n\t\t\t\t$resultz = $this->db->query($sqlz);\n\t\t\t\tif (!$resultz) {\n\t\t\t\t\t$error++;\n\t\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t// We remove directory\n\t\t\t\t$ref = dol_sanitizeFileName($this->ref);\n\t\t\t\tif ($conf->product->dir_output) {\n\t\t\t\t\t$dir = $conf->product->dir_output.\"/\".$ref;\n\t\t\t\t\tif (file_exists($dir)) {\n\t\t\t\t\t\t$res = @dol_delete_dir_recursive($dir);\n\t\t\t\t\t\tif (!$res) {\n\t\t\t\t\t\t\t$this->errors[] = 'ErrorFailToDeleteDir';\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tforeach ($this->errors as $errmsg) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t\t$this->error .= ($this->error ? ', '.$errmsg : $errmsg);\n\t\t\t\t}\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -$error;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = \"ErrorRecordIsUsedCantDelete\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t *    Update or add a translation for a product\n\t *\n\t * @param  User $user Object user making update\n\t * @return int        <0 if KO, >0 if OK\n\t */\n\tpublic function setMultiLangs($user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs_available = $langs->get_available_languages(DOL_DOCUMENT_ROOT, 0, 2);\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\tforeach ($langs_available as $key => $value) {\n\t\t\tif ($key == $current_lang) {\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t$sql .= \" AND lang = '\".$this->db->escape($key).\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) { // if there is already a description line for this language\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2 .= \" SET \";\n\t\t\t\t\t$sql2 .= \" label='\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2 .= \" description='\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note='\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($key).\"'\";\n\t\t\t\t} else {\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t\t$sql2 .= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\".$this->db->escape($this->label).\"',\";\n\t\t\t\t\t$sql2 .= \" '\".$this->db->escape($this->description).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", '\".$this->db->escape($this->other).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t}\n\t\t\t\tdol_syslog(get_class($this).'::setMultiLangs key = current_lang = '.$key);\n\t\t\t\tif (!$this->db->query($sql2)) {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} elseif (isset($this->multilangs[$key])) {\n\t\t\t\tif (empty($this->multilangs[\"$key\"][\"label\"])) {\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Label\"));\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\t$sql = \"SELECT rowid\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t$sql .= \" AND lang = '\".$this->db->escape($key).\"'\";\n\n\t\t\t\t$result = $this->db->query($sql);\n\n\t\t\t\tif ($this->db->num_rows($result)) { // if there is already a description line for this language\n\t\t\t\t\t$sql2 = \"UPDATE \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t\t\t\t$sql2 .= \" SET \";\n\t\t\t\t\t$sql2 .= \" label = '\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2 .= \" description = '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note = '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($key).\"'\";\n\t\t\t\t} else {\n\t\t\t\t\t$sql2 = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_lang (fk_product, lang, label, description\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", note\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t\t$sql2 .= \" VALUES(\".$this->id.\",'\".$this->db->escape($key).\"','\".$this->db->escape($this->multilangs[\"$key\"][\"label\"]).\"',\";\n\t\t\t\t\t$sql2 .= \" '\".$this->db->escape($this->multilangs[\"$key\"][\"description\"]).\"'\";\n\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_OTHER_FIELD_IN_TRANSLATION)) {\n\t\t\t\t\t\t$sql2 .= \", '\".$this->db->escape($this->multilangs[\"$key\"][\"other\"]).\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$sql2 .= \")\";\n\t\t\t\t}\n\n\t\t\t\t// We do not save if main fields are empty\n\t\t\t\tif ($this->multilangs[\"$key\"][\"label\"] || $this->multilangs[\"$key\"][\"description\"]) {\n\t\t\t\t\tif (!$this->db->query($sql2)) {\n\t\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// language is not current language and we didn't provide a multilang description for this language\n\t\t\t}\n\t\t}\n\n\t\t// Call trigger\n\t\t$result = $this->call_trigger('PRODUCT_SET_MULTILANGS', $user);\n\t\tif ($result < 0) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t\t// End call triggers\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *    Delete a language for this product\n\t *\n\t * @param string $langtodelete Language code to delete\n\t * @param User   $user         Object user making delete\n\t *\n\t * @return int                            <0 if KO, >0 if OK\n\t */\n\tpublic function delMultiLangs($langtodelete, $user)\n\t{\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $this->id).\" AND lang = '\".$this->db->escape($langtodelete).\"'\";\n\n\t\tdol_syslog(get_class($this).'::delMultiLangs', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_DEL_MULTILANGS', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\tdol_syslog(get_class($this).'::delMultiLangs error='.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets an accountancy code for a product.\n\t * Also calls PRODUCT_MODIFY trigger when modified\n\t *\n\t * @param \tstring $type \tIt can be 'buy', 'buy_intra', 'buy_export', 'sell', 'sell_intra' or 'sell_export'\n\t * @param \tstring $value \tAccountancy code\n\t * @return \tint \t\t\t<0 KO >0 OK\n\t */\n\tpublic function setAccountancyCode($type, $value)\n\t{\n\t\tglobal $user, $langs, $conf;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\tif ($type == 'buy') {\n\t\t\t$field = 'accountancy_code_buy';\n\t\t} elseif ($type == 'buy_intra') {\n\t\t\t$field = 'accountancy_code_buy_intra';\n\t\t} elseif ($type == 'buy_export') {\n\t\t\t$field = 'accountancy_code_buy_export';\n\t\t} elseif ($type == 'sell') {\n\t\t\t$field = 'accountancy_code_sell';\n\t\t} elseif ($type == 'sell_intra') {\n\t\t\t$field = 'accountancy_code_sell_intra';\n\t\t} elseif ($type == 'sell_export') {\n\t\t\t$field = 'accountancy_code_sell_export';\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.$this->table_element.\" SET \";\n\t\t$sql .= \"$field = '\".$this->db->escape($value).\"'\";\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\n\t\tdol_syslog(__METHOD__.\"\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\n\t\tif ($resql) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('PRODUCT_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\tif ($error) {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t$this->$field = $value;\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *    Load array this->multilangs\n\t *\n\t * @return int        <0 if KO, >0 if OK\n\t */\n\tpublic function getMultiLangs()\n\t{\n\t\tglobal $langs;\n\n\t\t$current_lang = $langs->getDefaultLang();\n\n\t\t$sql = \"SELECT lang, label, description, note as other\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_lang\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\twhile ($obj = $this->db->fetch_object($result)) {\n\t\t\t\t//print 'lang='.$obj->lang.' current='.$current_lang.'<br>';\n\t\t\t\tif ($obj->lang == $current_lang) {  // si on a les traduct. dans la langue courante on les charge en infos principales.\n\t\t\t\t\t$this->label        = $obj->label;\n\t\t\t\t\t$this->description = $obj->description;\n\t\t\t\t\t$this->other        = $obj->other;\n\t\t\t\t}\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"label\"]        = $obj->label;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"description\"] = $obj->description;\n\t\t\t\t$this->multilangs[\"$obj->lang\"][\"other\"]        = $obj->other;\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = \"Error: \".$this->db->lasterror().\" - \".$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  used to check if price have really change to avoid log pollution\n\t *\n\t * @param  int  $level price level to change\n\t * @return array\n\t */\n\tprivate function getArrayForPriceCompare($level = 0)\n\t{\n\n\t\t$testExit = array('multiprices','multiprices_ttc','multiprices_base_type','multiprices_min','multiprices_min_ttc','multiprices_tva_tx','multiprices_recuperableonly');\n\n\t\tforeach ($testExit as $field) {\n\t\t\tif (!isset($this->$field[$level])) {\n\t\t\t\treturn array();\n\t\t\t}\n\t\t}\n\n\t\t$lastPrice = array(\n\t\t\t'level' => $level ? $level : 1,\n\t\t\t'multiprices' => doubleval($this->multiprices[$level]),\n\t\t\t'multiprices_ttc' => doubleval($this->multiprices_ttc[$level]),\n\t\t\t'multiprices_base_type' => $this->multiprices_base_type[$level],\n\t\t\t'multiprices_min' => doubleval($this->multiprices_min[$level]),\n\t\t\t'multiprices_min_ttc' => doubleval($this->multiprices_min_ttc[$level]),\n\t\t\t'multiprices_tva_tx' => doubleval($this->multiprices_tva_tx[$level]),\n\t\t\t'multiprices_recuperableonly' => doubleval($this->multiprices_recuperableonly[$level]),\n\t\t);\n\n\t\treturn $lastPrice;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Insert a track that we changed a customer price\n\t *\n\t * @param  User $user  User making change\n\t * @param  int  $level price level to change\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tprivate function _log_price($user, $level = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$now = dol_now();\n\n\t\t// Clean parameters\n\t\tif (empty($this->price_by_qty)) {\n\t\t\t$this->price_by_qty = 0;\n\t\t}\n\n\t\t// Add new price\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price(price_level,date_price, fk_product, fk_user_author, price, price_ttc, price_base_type,tosell, tva_tx, default_vat_code, recuperableonly,\";\n\t\t$sql .= \" localtax1_tx, localtax2_tx, localtax1_type, localtax2_type, price_min,price_min_ttc,price_by_qty,entity,fk_price_expression) \";\n\t\t$sql .= \" VALUES(\".($level ? ((int) $level) : 1).\", '\".$this->db->idate($now).\"', \".((int) $this->id).\", \".((int) $user->id).\", \".((float) price2num($this->price)).\", \".((float) price2num($this->price_ttc)).\",'\".$this->db->escape($this->price_base_type).\"',\".((int) $this->status).\", \".((float) price2num($this->tva_tx)).\", \".($this->default_vat_code ? (\"'\".$this->db->escape($this->default_vat_code).\"'\") : \"null\").\", \".((int) $this->tva_npr).\",\";\n\t\t$sql .= \" \".price2num($this->localtax1_tx).\", \".price2num($this->localtax2_tx).\", '\".$this->db->escape($this->localtax1_type).\"', '\".$this->db->escape($this->localtax2_type).\"', \".price2num($this->price_min).\", \".price2num($this->price_min_ttc).\", \".price2num($this->price_by_qty).\", \".((int) $conf->entity).\",\".($this->fk_price_expression > 0 ? ((int) $this->fk_price_expression) : 'null');\n\t\t$sql .= \")\";\n\n\t\tdol_syslog(get_class($this).\"::_log_price\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Delete a price line\n\t *\n\t * @param  User $user  Object user\n\t * @param  int  $rowid Line id to delete\n\t * @return int                <0 if KO, >0 if OK\n\t */\n\tpublic function log_price_delete($user, $rowid)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t$sql .= \" WHERE fk_product_price = \".((int) $rowid);\n\t\t$resql = $this->db->query($sql);\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql .= \" WHERE rowid=\".((int) $rowid);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Return price of sell of a product for a seller/buyer/product.\n\t *\n\t * @param\tSociete\t\t$thirdparty_seller\t\tSeller\n\t * @param\tSociete\t\t$thirdparty_buyer\t\tBuyer\n\t * @param\tint\t\t\t$pqp\t\t\t\t\tId of product price per quantity if a selection was done of such a price\n\t * @return\tarray\t\t\t\t\t\t\t\tArray of price information array('pu_ht'=> , 'pu_ttc'=> , 'tva_tx'=>'X.Y (code)', ...), 'tva_npr'=>0, ...)\n\t * @see get_buyprice(), find_min_price_product_fournisseur()\n\t */\n\tpublic function getSellPrice($thirdparty_seller, $thirdparty_buyer, $pqp = 0)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t// Update if prices fields are defined\n\t\t$tva_tx = get_default_tva($thirdparty_seller, $thirdparty_buyer, $this->id);\n\t\t$tva_npr = get_default_npr($thirdparty_seller, $thirdparty_buyer, $this->id);\n\t\tif (empty($tva_tx)) {\n\t\t\t$tva_npr = 0;\n\t\t}\n\n\t\t$pu_ht = $this->price;\n\t\t$pu_ttc = $this->price_ttc;\n\t\t$price_min = $this->price_min;\n\t\t$price_base_type = $this->price_base_type;\n\n\t\t// If price per segment\n\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES) && !empty($thirdparty_buyer->price_level)) {\n\t\t\t$pu_ht = $this->multiprices[$thirdparty_buyer->price_level];\n\t\t\t$pu_ttc = $this->multiprices_ttc[$thirdparty_buyer->price_level];\n\t\t\t$price_min = $this->multiprices_min[$thirdparty_buyer->price_level];\n\t\t\t$price_base_type = $this->multiprices_base_type[$thirdparty_buyer->price_level];\n\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL)) {  // using this option is a bug. kept for backward compatibility\n\t\t\t\tif (isset($this->multiprices_tva_tx[$thirdparty_buyer->price_level])) {\n\t\t\t\t\t$tva_tx = $this->multiprices_tva_tx[$thirdparty_buyer->price_level];\n\t\t\t\t}\n\t\t\t\tif (isset($this->multiprices_recuperableonly[$thirdparty_buyer->price_level])) {\n\t\t\t\t\t$tva_npr = $this->multiprices_recuperableonly[$thirdparty_buyer->price_level];\n\t\t\t\t}\n\t\t\t\tif (empty($tva_tx)) {\n\t\t\t\t\t$tva_npr = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES)) {\n\t\t\t// If price per customer\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/class/productcustomerprice.class.php';\n\n\t\t\t$prodcustprice = new Productcustomerprice($this->db);\n\n\t\t\t$filter = array('t.fk_product' => $this->id, 't.fk_soc' => $thirdparty_buyer->id);\n\n\t\t\t$result = $prodcustprice->fetch_all('', '', 0, 0, $filter);\n\t\t\tif ($result) {\n\t\t\t\tif (count($prodcustprice->lines) > 0) {\n\t\t\t\t\t$pu_ht = price($prodcustprice->lines[0]->price);\n\t\t\t\t\t$price_min = price($prodcustprice->lines[0]->price_min);\n\t\t\t\t\t$pu_ttc = price($prodcustprice->lines[0]->price_ttc);\n\t\t\t\t\t$price_base_type = $prodcustprice->lines[0]->price_base_type;\n\t\t\t\t\t$tva_tx = $prodcustprice->lines[0]->tva_tx;\n\t\t\t\t\tif ($prodcustprice->lines[0]->default_vat_code && !preg_match('/\\(.*\\)/', $tva_tx)) {\n\t\t\t\t\t\t$tva_tx .= ' ('.$prodcustprice->lines[0]->default_vat_code.')';\n\t\t\t\t\t}\n\t\t\t\t\t$tva_npr = $prodcustprice->lines[0]->recuperableonly;\n\t\t\t\t\tif (empty($tva_tx)) {\n\t\t\t\t\t\t$tva_npr = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY)) {\n\t\t\t// If price per quantity\n\t\t\tif ($this->prices_by_qty[0]) {\n\t\t\t\t// yes, this product has some prices per quantity\n\t\t\t\t// Search price into product_price_by_qty from $this->id\n\t\t\t\tforeach ($this->prices_by_qty_list[0] as $priceforthequantityarray) {\n\t\t\t\t\tif ($priceforthequantityarray['rowid'] != $pqp) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// We found the price\n\t\t\t\t\tif ($priceforthequantityarray['price_base_type'] == 'HT') {\n\t\t\t\t\t\t$pu_ht = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$pu_ttc = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) {\n\t\t\t// If price per quantity and customer\n\t\t\tif ($this->prices_by_qty[$thirdparty_buyer->price_level]) {\n\t\t\t\t// yes, this product has some prices per quantity\n\t\t\t\t// Search price into product_price_by_qty from $this->id\n\t\t\t\tforeach ($this->prices_by_qty_list[$thirdparty_buyer->price_level] as $priceforthequantityarray) {\n\t\t\t\t\tif ($priceforthequantityarray['rowid'] != $pqp) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// We found the price\n\t\t\t\t\tif ($priceforthequantityarray['price_base_type'] == 'HT') {\n\t\t\t\t\t\t$pu_ht = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$pu_ttc = $priceforthequantityarray['unitprice'];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn array('pu_ht'=>$pu_ht, 'pu_ttc'=>$pu_ttc, 'price_min'=>$price_min, 'price_base_type'=>$price_base_type, 'tva_tx'=>$tva_tx, 'tva_npr'=>$tva_npr);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Read price used by a provider.\n\t * We enter as input couple prodfournprice/qty or triplet qty/product_id/fourn_ref.\n\t * This also set some properties on product like ->buyprice, ->fourn_pu, ...\n\t *\n\t * @param  int    $prodfournprice Id du tarif = rowid table product_fournisseur_price\n\t * @param  double $qty            Quantity asked or -1 to get first entry found\n\t * @param  int    $product_id     Filter on a particular product id\n\t * @param  string $fourn_ref      Filter on a supplier price ref. 'none' to exclude ref in search.\n\t * @param  int    $fk_soc         If of supplier\n\t * @return int                    <-1 if KO, -1 if qty not enough, 0 if OK but nothing found, id_product if OK and found. May also initialize some properties like (->ref_supplier, buyprice, fourn_pu, vatrate_supplier...)\n\t * @see getSellPrice(), find_min_price_product_fournisseur()\n\t */\n\tpublic function get_buyprice($prodfournprice, $qty, $product_id = 0, $fourn_ref = '', $fk_soc = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\t$result = 0;\n\n\t\t// We do a first seach with a select by searching with couple prodfournprice and qty only (later we will search on triplet qty/product_id/fourn_ref)\n\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent,\";\n\t\t$sql .= \" pfp.fk_product, pfp.ref_fourn, pfp.desc_fourn, pfp.fk_soc, pfp.tva_tx, pfp.fk_supplier_price_expression,\";\n\t\t$sql .= \" pfp.default_vat_code,\";\n\t\t$sql .= \" pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code\";\n\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t$sql .= \", pfp.packaging\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t$sql .= \" WHERE pfp.rowid = \".((int) $prodfournprice);\n\t\tif ($qty > 0) {\n\t\t\t$sql .= \" AND pfp.quantity <= \".((float) $qty);\n\t\t}\n\t\t$sql .= \" ORDER BY pfp.quantity DESC\";\n\n\t\tdol_syslog(get_class($this).\"::get_buyprice first search by prodfournprice/qty\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj && $obj->quantity > 0) {        // If we found a supplier prices from the id of supplier price\n\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression)) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t$prod_supplier = new ProductFournisseur($this->db);\n\t\t\t\t\t$prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t$prod_supplier->id = $obj->fk_product;\n\t\t\t\t\t$prod_supplier->fourn_qty = $obj->quantity;\n\t\t\t\t\t$prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t\t\t\t$prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t$price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t\t\t\tif ($price_result >= 0) {\n\t\t\t\t\t\t$obj->price = $price_result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t$this->buyprice = $obj->price; // deprecated\n\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity; // Unit price of product of supplier\n\t\t\t\t$this->fourn_price_base_type = 'HT'; // Price base type\n\t\t\t\t$this->fourn_socid = $obj->fk_soc; // Company that offer this price\n\t\t\t\t$this->ref_fourn = $obj->ref_fourn; // deprecated\n\t\t\t\t$this->ref_supplier = $obj->ref_fourn; // Ref supplier\n\t\t\t\t$this->desc_supplier = $obj->desc_fourn; // desc supplier\n\t\t\t\t$this->remise_percent = $obj->remise_percent; // remise percent if present and not typed\n\t\t\t\t$this->vatrate_supplier = $obj->tva_tx; // Vat ref supplier\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code; // Vat code supplier\n\t\t\t\t$this->fourn_multicurrency_price       = $obj->multicurrency_price;\n\t\t\t\t$this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n\t\t\t\t$this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n\t\t\t\t$this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n\t\t\t\t$this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t\t\t$this->packaging = $obj->packaging;\n\t\t\t\t}\n\t\t\t\t$result = $obj->fk_product;\n\t\t\t\treturn $result;\n\t\t\t} else { // If not found\n\t\t\t\t// We do a second search by doing a select again but searching with less reliable criteria: couple qty/id product, and if set fourn_ref or fk_soc.\n\t\t\t\t$sql = \"SELECT pfp.rowid, pfp.price as price, pfp.quantity as quantity, pfp.remise_percent, pfp.fk_soc,\";\n\t\t\t\t$sql .= \" pfp.fk_product, pfp.ref_fourn as ref_supplier, pfp.desc_fourn as desc_supplier, pfp.tva_tx, pfp.fk_supplier_price_expression,\";\n\t\t\t\t$sql .= \" pfp.default_vat_code,\";\n\t\t\t\t$sql .= \" pfp.multicurrency_price, pfp.multicurrency_unitprice, pfp.multicurrency_tx, pfp.fk_multicurrency, pfp.multicurrency_code,\";\n\t\t\t\t$sql .= \" pfp.packaging\";\n\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as pfp\";\n\t\t\t\t$sql .= \" WHERE pfp.fk_product = \".((int) $product_id);\n\t\t\t\tif ($fourn_ref != 'none') {\n\t\t\t\t\t$sql .= \" AND pfp.ref_fourn = '\".$this->db->escape($fourn_ref).\"'\";\n\t\t\t\t}\n\t\t\t\tif ($fk_soc > 0) {\n\t\t\t\t\t$sql .= \" AND pfp.fk_soc = \".((int) $fk_soc);\n\t\t\t\t}\n\t\t\t\tif ($qty > 0) {\n\t\t\t\t\t$sql .= \" AND pfp.quantity <= \".((float) $qty);\n\t\t\t\t}\n\t\t\t\t$sql .= \" ORDER BY pfp.quantity DESC\";\n\t\t\t\t$sql .= \" LIMIT 1\";\n\n\t\t\t\tdol_syslog(get_class($this).\"::get_buyprice second search from qty/ref/product_id\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\tif ($obj && $obj->quantity > 0) {        // If found\n\t\t\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($obj->fk_supplier_price_expression)) {\n\t\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t\t\t$prod_supplier = new ProductFournisseur($this->db);\n\t\t\t\t\t\t\t$prod_supplier->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t\t$prod_supplier->id = $obj->fk_product;\n\t\t\t\t\t\t\t$prod_supplier->fourn_qty = $obj->quantity;\n\t\t\t\t\t\t\t$prod_supplier->fourn_tva_tx = $obj->tva_tx;\n\t\t\t\t\t\t\t$prod_supplier->fk_supplier_price_expression = $obj->fk_supplier_price_expression;\n\t\t\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t\t\t$price_result = $priceparser->parseProductSupplier($prod_supplier);\n\t\t\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t\t\t$obj->price = $price_result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\t\t\t$this->buyprice = $obj->price; // deprecated\n\t\t\t\t\t\t$this->fourn_qty = $obj->quantity; // min quantity for price for a virtual supplier\n\t\t\t\t\t\t$this->fourn_pu = $obj->price / $obj->quantity; // Unit price of product for a virtual supplier\n\t\t\t\t\t\t$this->fourn_price_base_type = 'HT'; // Price base type for a virtual supplier\n\t\t\t\t\t\t$this->fourn_socid = $obj->fk_soc; // Company that offer this price\n\t\t\t\t\t\t$this->ref_fourn = $obj->ref_supplier; // deprecated\n\t\t\t\t\t\t$this->ref_supplier = $obj->ref_supplier; // Ref supplier\n\t\t\t\t\t\t$this->desc_supplier = $obj->desc_supplier; // desc supplier\n\t\t\t\t\t\t$this->remise_percent = $obj->remise_percent; // remise percent if present and not typed\n\t\t\t\t\t\t$this->vatrate_supplier = $obj->tva_tx; // Vat ref supplier\n\t\t\t\t\t\t$this->default_vat_code = $obj->default_vat_code; // Vat code supplier\n\t\t\t\t\t\t$this->fourn_multicurrency_price       = $obj->multicurrency_price;\n\t\t\t\t\t\t$this->fourn_multicurrency_unitprice   = $obj->multicurrency_unitprice;\n\t\t\t\t\t\t$this->fourn_multicurrency_tx          = $obj->multicurrency_tx;\n\t\t\t\t\t\t$this->fourn_multicurrency_id          = $obj->fk_multicurrency;\n\t\t\t\t\t\t$this->fourn_multicurrency_code        = $obj->multicurrency_code;\n\t\t\t\t\t\tif (!empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING)) {\n\t\t\t\t\t\t\t$this->packaging = $obj->packaging;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$result = $obj->fk_product;\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn -1; // Ce produit n'existe pas avec cet id tarif fournisseur ou existe mais qte insuffisante, ni pour le couple produit/ref fournisseur dans la quantit\u00e9.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t/**\n\t * Modify customer price of a product/Service\n\t *\n\t * @param  double $newprice          New price\n\t * @param  string $newpricebase      HT or TTC\n\t * @param  User   $user              Object user that make change\n\t * @param  double $newvat            New VAT Rate (For example 8.5. Should not be a string)\n\t * @param  double $newminprice       New price min\n\t * @param  int    $level             0=standard, >0 = level if multilevel prices\n\t * @param  int    $newnpr            0=Standard vat rate, 1=Special vat rate for French NPR VAT\n\t * @param  int    $newpbq            1 if it has price by quantity\n\t * @param  int    $ignore_autogen    Used to avoid infinite loops\n\t * @param  array  $localtaxes_array  Array with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).\n\t * @param  string $newdefaultvatcode Default vat code\n\t * @return int                            <0 if KO, >0 if OK\n\t */\n\tpublic function updatePrice($newprice, $newpricebase, $user, $newvat = '', $newminprice = 0, $level = 0, $newnpr = 0, $newpbq = 0, $ignore_autogen = 0, $localtaxes_array = array(), $newdefaultvatcode = '')\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$lastPriceData = $this->getArrayForPriceCompare($level); // temporary store current price before update\n\n\t\t$id = $this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_price id=\".$id.\" newprice=\".$newprice.\" newpricebase=\".$newpricebase.\" newminprice=\".$newminprice.\" level=\".$level.\" npr=\".$newnpr.\" newdefaultvatcode=\".$newdefaultvatcode);\n\n\t\t// Clean parameters\n\t\tif (empty($this->tva_tx)) {\n\t\t\t$this->tva_tx = 0;\n\t\t}\n\t\tif (empty($newnpr)) {\n\t\t\t$newnpr = 0;\n\t\t}\n\t\tif (empty($newminprice)) {\n\t\t\t$newminprice = 0;\n\t\t}\n\t\tif (empty($newminprice)) {\n\t\t\t$newminprice = 0;\n\t\t}\n\n\t\t// Check parameters\n\t\tif ($newvat == '') {\n\t\t\t$newvat = $this->tva_tx;\n\t\t}\n\n\t\t// If multiprices are enabled, then we check if the current product is subject to price autogeneration\n\t\t// Price will be modified ONLY when the first one is the one that is being modified\n\t\tif ((!empty($conf->global->PRODUIT_MULTIPRICES) || !empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES)) && !$ignore_autogen && $this->price_autogen && ($level == 1)) {\n\t\t\treturn $this->generateMultiprices($user, $newprice, $newpricebase, $newvat, $newnpr, $newpbq);\n\t\t}\n\n\t\tif (!empty($newminprice) && ($newminprice > $newprice)) {\n\t\t\t$this->error = 'ErrorPriceCantBeLowerThanMinPrice';\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ($newprice !== '' || $newprice === 0) {\n\t\t\tif ($newpricebase == 'TTC') {\n\t\t\t\t$price_ttc = price2num($newprice, 'MU');\n\t\t\t\t$price = price2num($newprice) / (1 + ($newvat / 100));\n\t\t\t\t$price = price2num($price, 'MU');\n\n\t\t\t\tif ($newminprice != '' || $newminprice == 0) {\n\t\t\t\t\t$price_min_ttc = price2num($newminprice, 'MU');\n\t\t\t\t\t$price_min = price2num($newminprice) / (1 + ($newvat / 100));\n\t\t\t\t\t$price_min = price2num($price_min, 'MU');\n\t\t\t\t} else {\n\t\t\t\t\t$price_min = 0;\n\t\t\t\t\t$price_min_ttc = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$price = price2num($newprice, 'MU');\n\t\t\t\t$price_ttc = ($newnpr != 1) ? price2num($newprice) * (1 + ($newvat / 100)) : $price;\n\t\t\t\t$price_ttc = price2num($price_ttc, 'MU');\n\n\t\t\t\tif ($newminprice !== '' || $newminprice === 0) {\n\t\t\t\t\t$price_min = price2num($newminprice, 'MU');\n\t\t\t\t\t$price_min_ttc = price2num($newminprice) * (1 + ($newvat / 100));\n\t\t\t\t\t$price_min_ttc = price2num($price_min_ttc, 'MU');\n\t\t\t\t\t//print 'X'.$newminprice.'-'.$price_min;\n\t\t\t\t} else {\n\t\t\t\t\t$price_min = 0;\n\t\t\t\t\t$price_min_ttc = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//print 'x'.$id.'-'.$newprice.'-'.$newpricebase.'-'.$price.'-'.$price_ttc.'-'.$price_min.'-'.$price_min_ttc;\n\n\t\t\tif (count($localtaxes_array) > 0) {\n\t\t\t\t$localtaxtype1 = $localtaxes_array['0'];\n\t\t\t\t$localtax1 = $localtaxes_array['1'];\n\t\t\t\t$localtaxtype2 = $localtaxes_array['2'];\n\t\t\t\t$localtax2 = $localtaxes_array['3'];\n\t\t\t} else // old method. deprecated because ot can't retrieve type\n\t\t\t{\n\t\t\t\t$localtaxtype1 = '0';\n\t\t\t\t$localtax1 = get_localtax($newvat, 1);\n\t\t\t\t$localtaxtype2 = '0';\n\t\t\t\t$localtax2 = get_localtax($newvat, 2);\n\t\t\t}\n\t\t\tif (empty($localtax1)) {\n\t\t\t\t$localtax1 = 0; // If = '' then = 0\n\t\t\t}\n\t\t\tif (empty($localtax2)) {\n\t\t\t\t$localtax2 = 0; // If = '' then = 0\n\t\t\t}\n\n\t\t\t$this->db->begin();\n\n\t\t\t// Ne pas mettre de quote sur les numeriques decimaux.\n\t\t\t// Ceci provoque des stockages avec arrondis en base au lieu des valeurs exactes.\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product SET\";\n\t\t\t$sql .= \" price_base_type='\".$this->db->escape($newpricebase).\"',\";\n\t\t\t$sql .= \" price=\".$price.\",\";\n\t\t\t$sql .= \" price_ttc=\".$price_ttc.\",\";\n\t\t\t$sql .= \" price_min=\".$price_min.\",\";\n\t\t\t$sql .= \" price_min_ttc=\".$price_min_ttc.\",\";\n\t\t\t$sql .= \" localtax1_tx=\".($localtax1 >= 0 ? $localtax1 : 'NULL').\",\";\n\t\t\t$sql .= \" localtax2_tx=\".($localtax2 >= 0 ? $localtax2 : 'NULL').\",\";\n\t\t\t$sql .= \" localtax1_type=\".($localtaxtype1 != '' ? \"'\".$this->db->escape($localtaxtype1).\"'\" : \"'0'\").\",\";\n\t\t\t$sql .= \" localtax2_type=\".($localtaxtype2 != '' ? \"'\".$this->db->escape($localtaxtype2).\"'\" : \"'0'\").\",\";\n\t\t\t$sql .= \" default_vat_code=\".($newdefaultvatcode ? \"'\".$this->db->escape($newdefaultvatcode).\"'\" : \"null\").\",\";\n\t\t\t$sql .= \" tva_tx='\".price2num($newvat).\"',\";\n\t\t\t$sql .= \" recuperableonly='\".$this->db->escape($newnpr).\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".((int) $id);\n\n\t\t\tdol_syslog(get_class($this).\"::update_price\", LOG_DEBUG);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$this->multiprices[$level] = $price;\n\t\t\t\t$this->multiprices_ttc[$level] = $price_ttc;\n\t\t\t\t$this->multiprices_min[$level] = $price_min;\n\t\t\t\t$this->multiprices_min_ttc[$level] = $price_min_ttc;\n\t\t\t\t$this->multiprices_base_type[$level] = $newpricebase;\n\t\t\t\t$this->multiprices_default_vat_code[$level] = $newdefaultvatcode;\n\t\t\t\t$this->multiprices_tva_tx[$level] = $newvat;\n\t\t\t\t$this->multiprices_recuperableonly[$level] = $newnpr;\n\n\t\t\t\t$this->price = $price;\n\t\t\t\t$this->price_ttc = $price_ttc;\n\t\t\t\t$this->price_min = $price_min;\n\t\t\t\t$this->price_min_ttc = $price_min_ttc;\n\t\t\t\t$this->price_base_type = $newpricebase;\n\t\t\t\t$this->default_vat_code = $newdefaultvatcode;\n\t\t\t\t$this->tva_tx = $newvat;\n\t\t\t\t$this->tva_npr = $newnpr;\n\t\t\t\t//Local taxes\n\t\t\t\t$this->localtax1_tx = $localtax1;\n\t\t\t\t$this->localtax2_tx = $localtax2;\n\t\t\t\t$this->localtax1_type = $localtaxtype1;\n\t\t\t\t$this->localtax2_type = $localtaxtype2;\n\n\t\t\t\t// Price by quantity\n\t\t\t\t$this->price_by_qty = $newpbq;\n\n\t\t\t\t// check if price have really change before log\n\t\t\t\t$newPriceData = $this->getArrayForPriceCompare($level);\n\t\t\t\tif (!empty(array_diff_assoc($newPriceData, $lastPriceData)) || empty($conf->global->PRODUIT_MULTIPRICES)) {\n\t\t\t\t\t$this->_log_price($user, $level); // Save price for level into table product_price\n\t\t\t\t}\n\n\t\t\t\t$this->level = $level; // Store level of price edited for trigger\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('PRODUCT_PRICE_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Sets the supplier price expression\n\t *\n\t * @param      int $expression_id Expression\n\t * @return     int                     <0 if KO, >0 if OK\n\t * @deprecated Use Product::update instead\n\t */\n\tpublic function setPriceExpression($expression_id)\n\t{\n\t\tglobal $user;\n\n\t\t$this->fk_price_expression = $expression_id;\n\n\t\treturn $this->update($this->id, $user);\n\t}\n\n\t/**\n\t *  Load a product in memory from database\n\t *\n\t * @param  int    $id                Id of product/service to load\n\t * @param  string $ref               Ref of product/service to load\n\t * @param  string $ref_ext           Ref ext of product/service to load\n\t * @param  string $barcode           Barcode of product/service to load\n\t * @param  int    $ignore_expression When module dynamicprices is on, ignores the math expression for calculating price and uses the db value instead\n\t * @param  int    $ignore_price_load Load product without loading $this->multiprices... array (when we are sure we don't need them)\n\t * @param  int    $ignore_lang_load  Load product without loading $this->multilangs language arrays (when we are sure we don't need them)\n\t * @return int                       <0 if KO, 0 if not found, >0 if OK\n\t */\n\tpublic function fetch($id = '', $ref = '', $ref_ext = '', $barcode = '', $ignore_expression = 0, $ignore_price_load = 0, $ignore_lang_load = 0)\n\t{\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\n\n\t\tglobal $langs, $conf;\n\n\t\tdol_syslog(get_class($this).\"::fetch id=\".$id.\" ref=\".$ref.\" ref_ext=\".$ref_ext);\n\n\t\t// Check parameters\n\t\tif (!$id && !$ref && !$ref_ext && !$barcode) {\n\t\t\t$this->error = 'ErrorWrongParameters';\n\t\t\tdol_syslog(get_class($this).\"::fetch \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT p.rowid, p.ref, p.ref_ext, p.label, p.description, p.url, p.note_public, p.note as note_private, p.customcode, p.fk_country, p.fk_state, p.lifetime, p.qc_frequency, p.price, p.price_ttc,\";\n\t\t$sql .= \" p.price_min, p.price_min_ttc, p.price_base_type, p.cost_price, p.default_vat_code, p.tva_tx, p.recuperableonly as tva_npr, p.localtax1_tx, p.localtax2_tx, p.localtax1_type, p.localtax2_type, p.tosell,\";\n\t\t$sql .= \" p.tobuy, p.fk_product_type, p.duration, p.fk_default_warehouse, p.seuil_stock_alerte, p.canvas, p.net_measure, p.net_measure_units, p.weight, p.weight_units,\";\n\t\t$sql .= \" p.length, p.length_units, p.width, p.width_units, p.height, p.height_units,\";\n\t\t$sql .= \" p.surface, p.surface_units, p.volume, p.volume_units, p.barcode, p.fk_barcode_type, p.finished, p.fk_default_bom, p.mandatory_period,\";\n\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t$sql .= \" p.accountancy_code_buy, p.accountancy_code_buy_intra, p.accountancy_code_buy_export, p.accountancy_code_sell, p.accountancy_code_sell_intra, p.accountancy_code_sell_export,\";\n\t\t} else {\n\t\t\t$sql .= \" ppe.accountancy_code_buy, ppe.accountancy_code_buy_intra, ppe.accountancy_code_buy_export, ppe.accountancy_code_sell, ppe.accountancy_code_sell_intra, ppe.accountancy_code_sell_export,\";\n\t\t}\n\n\t\t//For MultiCompany\n\t\t//PMP per entity & Stocks Sharings stock_reel includes only stocks shared with this entity\n\t\t$separatedEntityPMP = false;\t// Set to true to get the AWP from table llx_product_perentity instead of field 'pmp' into llx_product.\n\t\t$separatedStock = false;\t\t// Set to true will count stock from subtable llx_product_stock. It is slower than using denormalized field 'stock', but it is required when using multientity and shared warehouses.\n\t\tif (!empty($conf->global->MULTICOMPANY_PRODUCT_SHARING_ENABLED)) {\n\t\t\tif (!empty($conf->global->MULTICOMPANY_PMP_PER_ENTITY_ENABLED)) {\n\t\t\t\t$checkPMPPerEntity = $this->db->query(\"SELECT pmp FROM \" . MAIN_DB_PREFIX . \"product_perentity WHERE fk_product = \".((int) $id).\" AND entity = \".(int) $conf->entity);\n\t\t\t\tif ($this->db->num_rows($checkPMPPerEntity)>0) {\n\t\t\t\t\t$separatedEntityPMP = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tglobal $mc;\n\t\t\t$separatedStock = true;\n\t\t\t$visibleWarehousesEntities = $conf->entity;\n\t\t\tif (isset($mc->sharings['stock']) && !empty($mc->sharings['stock'])) {\n\t\t\t\t$visibleWarehousesEntities .= \",\" . implode(\",\", $mc->sharings['stock']);\n\t\t\t}\n\t\t}\n\t\tif ($separatedEntityPMP) {\n\t\t\t$sql .= \" ppe.pmp,\";\n\t\t} else {\n\t\t\t$sql .= \" p.pmp,\";\n\t\t}\n\t\t$sql .= \" p.datec, p.tms, p.import_key, p.entity, p.desiredstock, p.tobatch, p.batch_mask, p.fk_unit,\";\n\t\t$sql .= \" p.fk_price_expression, p.price_autogen, p.model_pdf,\";\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" SUM(sp.reel) as stock\";\n\t\t} else {\n\t\t\t$sql .= \" p.stock\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\tif (!empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED) || $separatedEntityPMP) {\n\t\t\t$sql .= \" LEFT JOIN \" . MAIN_DB_PREFIX . \"product_perentity as ppe ON ppe.fk_product = p.rowid AND ppe.entity = \" . ((int) $conf->entity);\n\t\t}\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" LEFT JOIN \" . MAIN_DB_PREFIX . \"product_stock as sp ON sp.fk_product = p.rowid AND sp.fk_entrepot IN (SELECT rowid FROM \".MAIN_DB_PREFIX.\"entrepot WHERE entity IN (\".$this->db->sanitize($visibleWarehousesEntities).\"))\";\n\t\t}\n\n\t\tif ($id) {\n\t\t\t$sql .= \" WHERE p.rowid = \".((int) $id);\n\t\t} else {\n\t\t\t$sql .= \" WHERE p.entity IN (\".getEntity($this->element).\")\";\n\t\t\tif ($ref) {\n\t\t\t\t$sql .= \" AND p.ref = '\".$this->db->escape($ref).\"'\";\n\t\t\t} elseif ($ref_ext) {\n\t\t\t\t$sql .= \" AND p.ref_ext = '\".$this->db->escape($ref_ext).\"'\";\n\t\t\t} elseif ($barcode) {\n\t\t\t\t$sql .= \" AND p.barcode = '\".$this->db->escape($barcode).\"'\";\n\t\t\t}\n\t\t}\n\t\tif ($separatedStock) {\n\t\t\t$sql .= \" GROUP BY p.rowid, p.ref, p.ref_ext, p.label, p.description, p.url, p.note_public, p.note, p.customcode, p.fk_country, p.fk_state, p.lifetime, p.qc_frequency, p.price, p.price_ttc,\";\n\t\t\t$sql .= \" p.price_min, p.price_min_ttc, p.price_base_type, p.cost_price, p.default_vat_code, p.tva_tx, p.recuperableonly, p.localtax1_tx, p.localtax2_tx, p.localtax1_type, p.localtax2_type, p.tosell,\";\n\t\t\t$sql .= \" p.tobuy, p.fk_product_type, p.duration, p.fk_default_warehouse, p.seuil_stock_alerte, p.canvas, p.net_measure, p.net_measure_units, p.weight, p.weight_units,\";\n\t\t\t$sql .= \" p.length, p.length_units, p.width, p.width_units, p.height, p.height_units,\";\n\t\t\t$sql .= \" p.surface, p.surface_units, p.volume, p.volume_units, p.barcode, p.fk_barcode_type, p.finished,\";\n\t\t\tif (empty($conf->global->MAIN_PRODUCT_PERENTITY_SHARED)) {\n\t\t\t\t$sql .= \" p.accountancy_code_buy, p.accountancy_code_buy_intra, p.accountancy_code_buy_export, p.accountancy_code_sell, p.accountancy_code_sell_intra, p.accountancy_code_sell_export,\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" ppe.accountancy_code_buy, ppe.accountancy_code_buy_intra, ppe.accountancy_code_buy_export, ppe.accountancy_code_sell, ppe.accountancy_code_sell_intra, ppe.accountancy_code_sell_export,\";\n\t\t\t}\n\t\t\tif ($separatedEntityPMP) {\n\t\t\t\t$sql .= \" ppe.pmp,\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" p.pmp,\";\n\t\t\t}\n\t\t\t$sql .= \" p.datec, p.tms, p.import_key, p.entity, p.desiredstock, p.tobatch, p.batch_mask, p.fk_unit,\";\n\t\t\t$sql .= \" p.fk_price_expression, p.price_autogen, p.model_pdf\";\n\t\t\tif (!$separatedStock) {\n\t\t\t\t$sql .= \", p.stock\";\n\t\t\t}\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tunset($this->oldcopy);\n\n\t\t\tif ($this->db->num_rows($resql) > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\t$this->ref                            = $obj->ref;\n\t\t\t\t$this->ref_ext                        = $obj->ref_ext;\n\t\t\t\t$this->label                          = $obj->label;\n\t\t\t\t$this->description                    = $obj->description;\n\t\t\t\t$this->url                            = $obj->url;\n\t\t\t\t$this->note_public                    = $obj->note_public;\n\t\t\t\t$this->note_private                   = $obj->note_private;\n\t\t\t\t$this->note                           = $obj->note_private; // deprecated\n\n\t\t\t\t$this->type                            = $obj->fk_product_type;\n\t\t\t\t$this->status                        = $obj->tosell;\n\t\t\t\t$this->status_buy                    = $obj->tobuy;\n\t\t\t\t$this->status_batch                    = $obj->tobatch;\n\t\t\t\t$this->batch_mask                    = $obj->batch_mask;\n\n\t\t\t\t$this->customcode                    = $obj->customcode;\n\t\t\t\t$this->country_id                    = $obj->fk_country;\n\t\t\t\t$this->country_code = getCountry($this->country_id, 2, $this->db);\n\t\t\t\t$this->state_id = $obj->fk_state;\n\t\t\t\t$this->lifetime                     = $obj->lifetime;\n\t\t\t\t$this->qc_frequency                 = $obj->qc_frequency;\n\t\t\t\t$this->price                        = $obj->price;\n\t\t\t\t$this->price_ttc                    = $obj->price_ttc;\n\t\t\t\t$this->price_min                    = $obj->price_min;\n\t\t\t\t$this->price_min_ttc                = $obj->price_min_ttc;\n\t\t\t\t$this->price_base_type = $obj->price_base_type;\n\t\t\t\t$this->cost_price                    = $obj->cost_price;\n\t\t\t\t$this->default_vat_code = $obj->default_vat_code;\n\t\t\t\t$this->tva_tx                        = $obj->tva_tx;\n\t\t\t\t//! French VAT NPR\n\t\t\t\t$this->tva_npr                        = $obj->tva_npr;\n\t\t\t\t$this->recuperableonly                = $obj->tva_npr; // For backward compatibility\n\t\t\t\t//! Local taxes\n\t\t\t\t$this->localtax1_tx                    = $obj->localtax1_tx;\n\t\t\t\t$this->localtax2_tx                    = $obj->localtax2_tx;\n\t\t\t\t$this->localtax1_type                = $obj->localtax1_type;\n\t\t\t\t$this->localtax2_type                = $obj->localtax2_type;\n\n\t\t\t\t$this->finished                        = $obj->finished;\n\t\t\t\t$this->fk_default_bom                  = $obj->fk_default_bom;\n\n\t\t\t\t$this->duration                        = $obj->duration;\n\t\t\t\t$this->duration_value                = substr($obj->duration, 0, dol_strlen($obj->duration) - 1);\n\t\t\t\t$this->duration_unit = substr($obj->duration, -1);\n\t\t\t\t$this->canvas                        = $obj->canvas;\n\t\t\t\t$this->net_measure = $obj->net_measure;\n\t\t\t\t$this->net_measure_units = $obj->net_measure_units;\n\t\t\t\t$this->weight                        = $obj->weight;\n\t\t\t\t$this->weight_units                    = $obj->weight_units;\n\t\t\t\t$this->length                        = $obj->length;\n\t\t\t\t$this->length_units                    = $obj->length_units;\n\t\t\t\t$this->width = $obj->width;\n\t\t\t\t$this->width_units = $obj->width_units;\n\t\t\t\t$this->height = $obj->height;\n\t\t\t\t$this->height_units = $obj->height_units;\n\n\t\t\t\t$this->surface = $obj->surface;\n\t\t\t\t$this->surface_units = $obj->surface_units;\n\t\t\t\t$this->volume = $obj->volume;\n\t\t\t\t$this->volume_units                    = $obj->volume_units;\n\t\t\t\t$this->barcode = $obj->barcode;\n\t\t\t\t$this->barcode_type                    = $obj->fk_barcode_type;\n\n\t\t\t\t$this->accountancy_code_buy\t\t\t\t= $obj->accountancy_code_buy;\n\t\t\t\t$this->accountancy_code_buy_intra\t\t= $obj->accountancy_code_buy_intra;\n\t\t\t\t$this->accountancy_code_buy_export\t\t= $obj->accountancy_code_buy_export;\n\t\t\t\t$this->accountancy_code_sell\t\t\t= $obj->accountancy_code_sell;\n\t\t\t\t$this->accountancy_code_sell_intra\t\t= $obj->accountancy_code_sell_intra;\n\t\t\t\t$this->accountancy_code_sell_export\t\t= $obj->accountancy_code_sell_export;\n\n\t\t\t\t$this->fk_default_warehouse            = $obj->fk_default_warehouse;\n\t\t\t\t$this->seuil_stock_alerte            = $obj->seuil_stock_alerte;\n\t\t\t\t$this->desiredstock                    = $obj->desiredstock;\n\t\t\t\t$this->stock_reel                    = $obj->stock;\n\t\t\t\t$this->pmp = $obj->pmp;\n\n\t\t\t\t$this->date_creation                = $obj->datec;\n\t\t\t\t$this->date_modification            = $obj->tms;\n\t\t\t\t$this->import_key                    = $obj->import_key;\n\t\t\t\t$this->entity                        = $obj->entity;\n\n\t\t\t\t$this->ref_ext                        = $obj->ref_ext;\n\t\t\t\t$this->fk_price_expression            = $obj->fk_price_expression;\n\t\t\t\t$this->fk_unit                        = $obj->fk_unit;\n\t\t\t\t$this->price_autogen = $obj->price_autogen;\n\t\t\t\t$this->model_pdf = $obj->model_pdf;\n\n\t\t\t\t$this->mandatory_period = $obj->mandatory_period;\n\n\t\t\t\t$this->db->free($resql);\n\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t// Multilangs\n\t\t\t\tif (!empty($conf->global->MAIN_MULTILANGS) && empty($ignore_lang_load)) {\n\t\t\t\t\t$this->getMultiLangs();\n\t\t\t\t}\n\n\t\t\t\t// Load multiprices array\n\t\t\t\tif (!empty($conf->global->PRODUIT_MULTIPRICES) && empty($ignore_price_load)) {                // prices per segment\n\t\t\t\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql .= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql .= \" AND price_level=\".((int) $i);\n\t\t\t\t\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\t// Get the most recent line\n\t\t\t\t\t\t$sql .= \" LIMIT 1\";\t\t\t\t\t\t\t\t\t// Only the first one\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i] = $result ? $result[\"price\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i] = $result ? $result[\"price_ttc\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_min[$i] =  $result ? $result[\"price_min\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i] = $result ? $result[\"price_min_ttc\"] : null;\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i] = $result ? $result[\"price_base_type\"] : null;\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i] = $result ? $result[\"tva_tx\"].($result ? ' ('.$result['default_vat_code'].')' : '') : null;\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i] = $result ? $result[\"recuperableonly\"] : null;\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t $this->prices_by_qty[$i]=$result[\"price_by_qty\"];\n\t\t\t\t\t\t\t $this->prices_by_qty_id[$i]=$result[\"rowid\"];\n\t\t\t\t\t\t\t // R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\t if ($this->prices_by_qty[$i] == 1)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t $sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t $sql.= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t $sql.= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[$i]);\n\t\t\t\t\t\t\t $sql.= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t $resultat=array();\n\t\t\t\t\t\t\t $resql = $this->db->query($sql);\n\t\t\t\t\t\t\t if ($resql)\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t $ii=0;\n\t\t\t\t\t\t\t while ($result= $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t $resultat[$ii]=array();\n\t\t\t\t\t\t\t $resultat[$ii][\"rowid\"]=$result[\"rowid\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"price\"]= $result[\"price\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"unitprice\"]= $result[\"unitprice\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"quantity\"]= $result[\"quantity\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"remise_percent\"]= $result[\"remise_percent\"];\n\t\t\t\t\t\t\t $resultat[$ii][\"remise\"]= $result[\"remise\"];                    // deprecated\n\t\t\t\t\t\t\t $resultat[$ii][\"price_base_type\"]= $result[\"price_base_type\"];\n\t\t\t\t\t\t\t $ii++;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t $this->prices_by_qty_list[$i]=$resultat;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t {\n\t\t\t\t\t\t\t dol_print_error($this->db);\n\t\t\t\t\t\t\t return -1;\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t }*/\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES) && empty($ignore_price_load)) {            // prices per customers\n\t\t\t\t\t// Nothing loaded by default. List may be very long.\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY) && empty($ignore_price_load)) {    // prices per quantity\n\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid\";\n\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t$sql .= \" WHERE fk_product = \".((int) $this->id);\n\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t$sql .= \" LIMIT 1\";\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t$this->prices_by_qty[0] = $result[\"price_by_qty\"];\n\t\t\t\t\t\t$this->prices_by_qty_id[0] = $result[\"rowid\"];\n\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\tif ($this->prices_by_qty[0] == 1) {\n\t\t\t\t\t\t\t$sql = \"SELECT rowid,price, unitprice, quantity, remise_percent, remise, remise, price_base_type\";\n\t\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t$sql .= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[0]);\n\t\t\t\t\t\t\t$sql .= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t$resultat = array();\n\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t\t$ii = 0;\n\t\t\t\t\t\t\t\twhile ($result = $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t$resultat[$ii] = array();\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"] = $result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"] = $result[\"price\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"] = $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"] = $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"] = $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t//$resultat[$ii][\"remise\"]= $result[\"remise\"];                    // deprecated\n\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->prices_by_qty_list[0] = $resultat;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES_BY_QTY_MULTIPRICES) && empty($ignore_price_load)) {    // prices per customer and quantity\n\t\t\t\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t\t\t\t$sql = \"SELECT price, price_ttc, price_min, price_min_ttc,\";\n\t\t\t\t\t\t$sql .= \" price_base_type, tva_tx, default_vat_code, tosell, price_by_qty, rowid, recuperableonly\";\n\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t\t\t\t\t$sql .= \" WHERE entity IN (\".getEntity('productprice').\")\";\n\t\t\t\t\t\t$sql .= \" AND price_level=\".((int) $i);\n\t\t\t\t\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t\t\t\t\t$sql .= \" ORDER BY date_price DESC, rowid DESC\";\n\t\t\t\t\t\t$sql .= \" LIMIT 1\";\n\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t$result = $this->db->fetch_array($resql);\n\n\t\t\t\t\t\t\t$this->multiprices[$i] = $result[\"price\"];\n\t\t\t\t\t\t\t$this->multiprices_ttc[$i] = $result[\"price_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_min[$i] = $result[\"price_min\"];\n\t\t\t\t\t\t\t$this->multiprices_min_ttc[$i] = $result[\"price_min_ttc\"];\n\t\t\t\t\t\t\t$this->multiprices_base_type[$i] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t// Next two fields are used only if PRODUIT_MULTIPRICES_USE_VAT_PER_LEVEL is on\n\t\t\t\t\t\t\t$this->multiprices_tva_tx[$i] = $result[\"tva_tx\"]; // TODO Add ' ('.$result['default_vat_code'].')'\n\t\t\t\t\t\t\t$this->multiprices_recuperableonly[$i] = $result[\"recuperableonly\"];\n\n\t\t\t\t\t\t\t// Price by quantity\n\t\t\t\t\t\t\t$this->prices_by_qty[$i] = $result[\"price_by_qty\"];\n\t\t\t\t\t\t\t$this->prices_by_qty_id[$i] = $result[\"rowid\"];\n\t\t\t\t\t\t\t// R\u00e9cuperation de la liste des prix selon qty si flag positionn\u00e9\n\t\t\t\t\t\t\tif ($this->prices_by_qty[$i] == 1) {\n\t\t\t\t\t\t\t\t$sql = \"SELECT rowid, price, unitprice, quantity, remise_percent, remise, price_base_type\";\n\t\t\t\t\t\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price_by_qty\";\n\t\t\t\t\t\t\t\t$sql .= \" WHERE fk_product_price = \".((int) $this->prices_by_qty_id[$i]);\n\t\t\t\t\t\t\t\t$sql .= \" ORDER BY quantity ASC\";\n\t\t\t\t\t\t\t\t$resultat = array();\n\t\t\t\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\t\t\t\t$ii = 0;\n\t\t\t\t\t\t\t\t\twhile ($result = $this->db->fetch_array($resql)) {\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii] = array();\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"rowid\"] = $result[\"rowid\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price\"] = $result[\"price\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"unitprice\"] = $result[\"unitprice\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"quantity\"] = $result[\"quantity\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise_percent\"] = $result[\"remise_percent\"];\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"remise\"] = $result[\"remise\"]; // deprecated\n\t\t\t\t\t\t\t\t\t\t$resultat[$ii][\"price_base_type\"] = $result[\"price_base_type\"];\n\t\t\t\t\t\t\t\t\t\t$ii++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$this->prices_by_qty_list[$i] = $resultat;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $this->db->lasterror;\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!empty($conf->dynamicprices->enabled) && !empty($this->fk_price_expression) && empty($ignore_expression)) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/dynamic_price/class/price_parser.class.php';\n\t\t\t\t\t$priceparser = new PriceParser($this->db);\n\t\t\t\t\t$price_result = $priceparser->parseProduct($this);\n\t\t\t\t\tif ($price_result >= 0) {\n\t\t\t\t\t\t$this->price = $price_result;\n\t\t\t\t\t\t// Calculate the VAT\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price) * (1 + ($this->tva_tx / 100));\n\t\t\t\t\t\t$this->price_ttc = price2num($this->price_ttc, 'MU');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We should not load stock during the fetch. If someone need stock of product, he must call load_stock after fetching product.\n\t\t\t\t// Instead we just init the stock_warehouse array\n\t\t\t\t$this->stock_warehouse = array();\n\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats OF pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_mo, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_mo($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $user, $hookmanager, $action;\n\n\t\t$error = 0;\n\n\t\tforeach (array('toconsume', 'consumed', 'toproduce', 'produced') as $role) {\n\t\t\t$this->stats_mo['customers_'.$role] = 0;\n\t\t\t$this->stats_mo['nb_'.$role] = 0;\n\t\t\t$this->stats_mo['qty_'.$role] = 0;\n\n\t\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t\t$sql .= \" SUM(mp.qty) as qty\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_mo as c\";\n\t\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"mrp_production as mp ON mp.fk_mo=c.rowid\";\n\t\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t\t$sql .= \"INNER JOIN \".MAIN_DB_PREFIX.\"societe_commerciaux as sc ON sc.fk_soc=c.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t\t}\n\t\t\t$sql .= \" WHERE \";\n\t\t\t$sql .= \" c.entity IN (\".getEntity('mo').\")\";\n\n\t\t\t$sql .= \" AND mp.fk_product = \".((int) $this->id);\n\t\t\t$sql .= \" AND mp.role ='\".$this->db->escape($role).\"'\";\n\t\t\tif ($socid > 0) {\n\t\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->stats_mo['customers_'.$role] = $obj->nb_customers ? $obj->nb_customers : 0;\n\t\t\t\t$this->stats_mo['nb_'.$role] = $obj->nb ? $obj->nb : 0;\n\t\t\t\t$this->stats_mo['qty_'.$role] = $obj->qty ? price2num($obj->qty, 'MS') : 0;\t\t// qty may be a float due to the SUM()\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($error)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$parameters = array('socid' => $socid);\n\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerMO', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stats_mo = $hookmanager->resArray['stats_mo'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats OF pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_bom, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_bom($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $user, $hookmanager;\n\n\t\t$error = 0;\n\n\t\t$this->stats_bom['nb_toproduce'] = 0;\n\t\t$this->stats_bom['nb_toconsume'] = 0;\n\t\t$this->stats_bom['qty_toproduce'] = 0;\n\t\t$this->stats_bom['qty_toconsume'] = 0;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT b.rowid) as nb_toproduce,\";\n\t\t$sql .= \" SUM(b.qty) as qty_toproduce\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"bom_bom as b\";\n\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"bom_bomline as bl ON bl.fk_bom=b.rowid\";\n\t\t$sql .= \" WHERE \";\n\t\t$sql .= \" b.entity IN (\".getEntity('bom').\")\";\n\t\t$sql .= \" AND b.fk_product =\".((int) $this->id);\n\t\t$sql .= \" GROUP BY b.rowid\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_bom['nb_toproduce'] = !empty($obj->nb_toproduce) ? $obj->nb_toproduce : 0;\n\t\t\t$this->stats_bom['qty_toproduce'] = !empty($obj->qty_toproduce) ? price2num($obj->qty_toproduce) : 0;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\t$error++;\n\t\t}\n\n\t\t$sql = \"SELECT COUNT(DISTINCT bl.rowid) as nb_toconsume,\";\n\t\t$sql .= \" SUM(bl.qty) as qty_toconsume\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"bom_bom as b\";\n\t\t$sql .= \" INNER JOIN \".MAIN_DB_PREFIX.\"bom_bomline as bl ON bl.fk_bom=b.rowid\";\n\t\t$sql .= \" WHERE \";\n\t\t$sql .= \" b.entity IN (\".getEntity('bom').\")\";\n\t\t$sql .= \" AND bl.fk_product =\".((int) $this->id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_bom['nb_toconsume'] = !empty($obj->nb_toconsume) ? $obj->nb_toconsume : 0;\n\t\t\t$this->stats_bom['qty_toconsume'] = !empty($obj->qty_toconsume) ? price2num($obj->qty_toconsume) : 0;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!empty($error)) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$parameters = array('socid' => $socid);\n\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerMO', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stats_bom = $hookmanager->resArray['stats_bom'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_propale, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_propale($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_customers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql .= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"propaldet as pd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"propal as p\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = pd.fk_propal\";\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\t$sql .= \" AND pd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_propale['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_propale['nb'] = $obj->nb;\n\t\t\t$this->stats_propale['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_propale['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in proposal by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_propale($socid);\n\n\t\t\t\t\t\t\t$this->stats_propale['customers'] += $pFather->stats_propale['customers'];\n\t\t\t\t\t\t\t$this->stats_propale['nb'] += $pFather->stats_propale['nb'];\n\t\t\t\t\t\t\t$this->stats_propale['rows'] += $pFather->stats_propale['rows'];\n\t\t\t\t\t\t\t$this->stats_propale['qty'] += $pFather->stats_propale['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerProposal', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_propale = $hookmanager->resArray['stats_propale'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats propale pour le produit/service\n\t *\n\t * @param  int $socid Id thirdparty\n\t * @return int                     Array of stats in $this->stats_proposal_supplier, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_proposal_supplier($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT p.fk_soc) as nb_suppliers, COUNT(DISTINCT p.rowid) as nb,\";\n\t\t$sql .= \" COUNT(pd.rowid) as nb_rows, SUM(pd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as pd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"supplier_proposal as p\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = pd.fk_supplier_proposal\";\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\t$sql .= \" AND pd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND pr.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_proposal_supplier['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_proposal_supplier['nb'] = $obj->nb;\n\t\t\t$this->stats_proposal_supplier['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_proposal_supplier['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierProposal', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_proposal_supplier = $hookmanager->resArray['stats_proposal_supplier'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats commande client pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return integer                 Array of stats in $this->stats_commande (nb=nb of order, qty=qty ordered), <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_commande($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'commande').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND c.fk_statut in (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_commande['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_commande['nb'] = $obj->nb;\n\t\t\t$this->stats_commande['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_commande['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in order by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_commande($socid, $filtrestatut);\n\n\t\t\t\t\t\t\t$this->stats_commande['customers'] += $pFather->stats_commande['customers'];\n\t\t\t\t\t\t\t$this->stats_commande['nb'] += $pFather->stats_commande['nb'];\n\t\t\t\t\t\t\t$this->stats_commande['rows'] += $pFather->stats_commande['rows'];\n\t\t\t\t\t\t\t$this->stats_commande['qty'] += $pFather->stats_commande['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If stock decrease is on invoice validation, the theorical stock continue to\n\t\t\t// count the orders to ship in theorical stock when some are already removed b invoice validation.\n\t\t\t// If option DECREASE_ONLY_UNINVOICEDPRODUCTS is on, we make a compensation.\n\t\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n\t\t\t\tif (!empty($conf->global->DECREASE_ONLY_UNINVOICEDPRODUCTS)) {\n\t\t\t\t\t$adeduire = 0;\n\t\t\t\t\t$sql = \"SELECT sum(fd.qty) as count FROM \".MAIN_DB_PREFIX.\"facturedet fd \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"facture f ON fd.fk_facture = f.rowid \";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"element_element el ON el.fk_target = f.rowid and el.targettype = 'facture' and sourcetype = 'commande'\";\n\t\t\t\t\t$sql .= \" JOIN \".MAIN_DB_PREFIX.\"commande c ON el.fk_source = c.rowid \";\n\t\t\t\t\t$sql .= \" WHERE c.fk_statut IN (\".$this->db->sanitize($filtrestatut).\") AND c.facture = 0 AND fd.fk_product = \".((int) $this->id);\n\t\t\t\t\tdol_syslog(__METHOD__.\":: sql $sql\", LOG_NOTICE);\n\n\t\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\t\tif ($resql) {\n\t\t\t\t\t\tif ($this->db->num_rows($resql) > 0) {\n\t\t\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t\t\t$adeduire += $obj->count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->stats_commande['qty'] -= $adeduire;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerOrder', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_commande = $hookmanager->resArray['stats_commande'];\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats commande fournisseur pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id des statuts pour filtrer sur des statuts\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return int                     Array of stats in $this->stats_commande_fournisseur, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_commande_fournisseur($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_suppliers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'supplier_order').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut != '') {\n\t\t\t$sql .= \" AND c.fk_statut in (\".$this->db->sanitize($filtrestatut).\")\"; // Peut valoir 0\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_commande_fournisseur['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_commande_fournisseur['nb'] = $obj->nb;\n\t\t\t$this->stats_commande_fournisseur['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_commande_fournisseur['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierOrder', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_commande_fournisseur = $hookmanager->resArray['stats_commande_fournisseur'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats expedition client pour le produit/service\n\t *\n\t * @param   int         $socid                  Id societe pour filtrer sur une societe\n\t * @param   string      $filtrestatut           [=''] Ids order status separated by comma\n\t * @param   int         $forVirtualStock        Ignore rights filter for virtual stock calculation.\n\t * @param   string      $filterShipmentStatus   [=''] Ids shipment status separated by comma\n\t * @return  int                                 Array of stats in $this->stats_expedition, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_sending($socid = 0, $filtrestatut = '', $forVirtualStock = 0, $filterShipmentStatus = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT e.fk_soc) as nb_customers, COUNT(DISTINCT e.rowid) as nb,\";\n\t\t$sql .= \" COUNT(ed.rowid) as nb_rows, SUM(ed.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"expeditiondet as ed\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commandedet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"expedition as e\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE e.rowid = ed.fk_expedition\";\n\t\t$sql .= \" AND c.rowid = cd.fk_commande\";\n\t\t$sql .= \" AND e.fk_soc = s.rowid\";\n\t\t$sql .= \" AND e.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'expedition').\")\";\n\t\t$sql .= \" AND ed.fk_origin_line = cd.rowid\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND e.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND e.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND c.fk_statut IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\t\tif (!empty($filterShipmentStatus)) {\n\t\t\t$sql .= \" AND e.fk_statut IN (\".$this->db->sanitize($filterShipmentStatus).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_expedition['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_expedition['nb'] = $obj->nb;\n\t\t\t$this->stats_expedition['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_expedition['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in sending by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_sending($socid, $filtrestatut, $forVirtualStock);\n\n\t\t\t\t\t\t\t$this->stats_expedition['customers'] += $pFather->stats_expedition['customers'];\n\t\t\t\t\t\t\t$this->stats_expedition['nb'] += $pFather->stats_expedition['nb'];\n\t\t\t\t\t\t\t$this->stats_expedition['rows'] += $pFather->stats_expedition['rows'];\n\t\t\t\t\t\t\t$this->stats_expedition['qty'] += $pFather->stats_expedition['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock, 'filterShipmentStatus' => $filterShipmentStatus);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSending', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_expedition = $hookmanager->resArray['stats_expedition'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats r\u00e9ception fournisseur pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return int                     Array of stats in $this->stats_reception, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_reception($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT cf.fk_soc) as nb_suppliers, COUNT(DISTINCT cf.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseur_dispatch as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"commande_fournisseur as cf\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE cf.rowid = fd.fk_commande\";\n\t\t$sql .= \" AND cf.fk_soc = s.rowid\";\n\t\t$sql .= \" AND cf.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'supplier_order').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND cf.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND cf.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND cf.fk_statut IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_reception['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_reception['nb'] = $obj->nb;\n\t\t\t$this->stats_reception['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_reception['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsReception', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_reception = $hookmanager->resArray['stats_reception'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats production pour le produit/service\n\t *\n\t * @param  int    $socid           Id societe pour filtrer sur une societe\n\t * @param  string $filtrestatut    Id statut pour filtrer sur un statut\n\t * @param  int    $forVirtualStock Ignore rights filter for virtual stock calculation.\n\t * @return integer                 Array of stats in $this->stats_mrptoproduce (nb=nb of order, qty=qty ordered), <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_inproduction($socid = 0, $filtrestatut = '', $forVirtualStock = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT m.fk_soc) as nb_customers, COUNT(DISTINCT m.rowid) as nb,\";\n\t\t$sql .= \" COUNT(mp.rowid) as nb_rows, SUM(mp.qty) as qty, role\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_production as mp\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"mrp_mo as m\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"societe as s ON s.rowid = m.fk_soc\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE m.rowid = mp.fk_mo\";\n\t\t$sql .= \" AND m.entity IN (\".getEntity($forVirtualStock && !empty($conf->global->STOCK_CALCULATE_VIRTUAL_STOCK_TRANSVERSE_MODE) ? 'stock' : 'mrp').\")\";\n\t\t$sql .= \" AND mp.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid && !$forVirtualStock) {\n\t\t\t$sql .= \" AND m.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND m.fk_soc = \".((int) $socid);\n\t\t}\n\t\tif ($filtrestatut <> '') {\n\t\t\t$sql .= \" AND m.status IN (\".$this->db->sanitize($filtrestatut).\")\";\n\t\t}\n\t\t$sql .= \" GROUP BY role\";\n\n\t\t$this->stats_mrptoconsume['customers'] = 0;\n\t\t$this->stats_mrptoconsume['nb'] = 0;\n\t\t$this->stats_mrptoconsume['rows'] = 0;\n\t\t$this->stats_mrptoconsume['qty'] = 0;\n\t\t$this->stats_mrptoproduce['customers'] = 0;\n\t\t$this->stats_mrptoproduce['nb'] = 0;\n\t\t$this->stats_mrptoproduce['rows'] = 0;\n\t\t$this->stats_mrptoproduce['qty'] = 0;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\twhile ($obj = $this->db->fetch_object($result)) {\n\t\t\t\tif ($obj->role == 'toconsume') {\n\t\t\t\t\t$this->stats_mrptoconsume['customers'] += $obj->nb_customers;\n\t\t\t\t\t$this->stats_mrptoconsume['nb'] += $obj->nb;\n\t\t\t\t\t$this->stats_mrptoconsume['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoconsume['qty'] += ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'consumed') {\n\t\t\t\t\t//$this->stats_mrptoconsume['customers'] += $obj->nb_customers;\n\t\t\t\t\t//$this->stats_mrptoconsume['nb'] += $obj->nb;\n\t\t\t\t\t//$this->stats_mrptoconsume['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoconsume['qty'] -= ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'toproduce') {\n\t\t\t\t\t$this->stats_mrptoproduce['customers'] += $obj->nb_customers;\n\t\t\t\t\t$this->stats_mrptoproduce['nb'] += $obj->nb;\n\t\t\t\t\t$this->stats_mrptoproduce['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoproduce['qty'] += ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t\tif ($obj->role == 'produced') {\n\t\t\t\t\t//$this->stats_mrptoproduce['customers'] += $obj->nb_customers;\n\t\t\t\t\t//$this->stats_mrptoproduce['nb'] += $obj->nb;\n\t\t\t\t\t//$this->stats_mrptoproduce['rows'] += $obj->nb_rows;\n\t\t\t\t\t$this->stats_mrptoproduce['qty'] -= ($obj->qty ? $obj->qty : 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clean data\n\t\t\tif ($this->stats_mrptoconsume['qty'] < 0) {\n\t\t\t\t$this->stats_mrptoconsume['qty'] = 0;\n\t\t\t}\n\t\t\tif ($this->stats_mrptoproduce['qty'] < 0) {\n\t\t\t\t$this->stats_mrptoproduce['qty'] = 0;\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid, 'filtrestatut' => $filtrestatut, 'forVirtualStock' => $forVirtualStock);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsInProduction', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_mrptoproduce = $hookmanager->resArray['stats_mrptoproduce'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats contrat pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_contrat, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_contrat($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT c.fk_soc) as nb_customers, COUNT(DISTINCT c.rowid) as nb,\";\n\t\t$sql .= \" COUNT(cd.rowid) as nb_rows, SUM(cd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"contratdet as cd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"contrat as c\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = cd.fk_contrat\";\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql .= \" AND cd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND c.statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_contrat['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_contrat['nb'] = $obj->nb;\n\t\t\t$this->stats_contrat['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_contrat['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in contract by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_contrat($socid);\n\n\t\t\t\t\t\t\t$this->stats_contrat['customers'] += $pFather->stats_contrat['customers'];\n\t\t\t\t\t\t\t$this->stats_contrat['nb'] += $pFather->stats_contrat['nb'];\n\t\t\t\t\t\t\t$this->stats_contrat['rows'] += $pFather->stats_contrat['rows'];\n\t\t\t\t\t\t\t$this->stats_contrat['qty'] += $pFather->stats_contrat['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsContract', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_contrat = $hookmanager->resArray['stats_contrat'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_facture, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_facture($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $db, $conf, $user, $hookmanager;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_customers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(\".$this->db->ifsql('f.type != 2', 'fd.qty', 'fd.qty * -1').\") as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facturedet as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"facture as f\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = fd.fk_facture\";\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('invoice').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_facture['customers'] = $obj->nb_customers;\n\t\t\t$this->stats_facture['nb'] = $obj->nb;\n\t\t\t$this->stats_facture['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_facture['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t// if it's a virtual product, maybe it is in invoice by extension\n\t\t\tif (!empty($conf->global->PRODUCT_STATS_WITH_PARENT_PROD_IF_INCDEC)) {\n\t\t\t\t$TFather = $this->getFather();\n\t\t\t\tif (is_array($TFather) && !empty($TFather)) {\n\t\t\t\t\tforeach ($TFather as &$fatherData) {\n\t\t\t\t\t\t$pFather = new Product($this->db);\n\t\t\t\t\t\t$pFather->id = $fatherData['id'];\n\t\t\t\t\t\t$qtyCoef = $fatherData['qty'];\n\n\t\t\t\t\t\tif ($fatherData['incdec']) {\n\t\t\t\t\t\t\t$pFather->load_stats_facture($socid);\n\n\t\t\t\t\t\t\t$this->stats_facture['customers'] += $pFather->stats_facture['customers'];\n\t\t\t\t\t\t\t$this->stats_facture['nb'] += $pFather->stats_facture['nb'];\n\t\t\t\t\t\t\t$this->stats_facture['rows'] += $pFather->stats_facture['rows'];\n\t\t\t\t\t\t\t$this->stats_facture['qty'] += $pFather->stats_facture['qty'] * $qtyCoef;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsCustomerInvoice', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_facture = $hookmanager->resArray['stats_facture'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Charge tableau des stats facture pour le produit/service\n\t *\n\t * @param  int $socid Id societe\n\t * @return int                     Array of stats in $this->stats_facture_fournisseur, <0 if ko or >0 if ok\n\t */\n\tpublic function load_stats_facture_fournisseur($socid = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager, $action;\n\n\t\t$sql = \"SELECT COUNT(DISTINCT f.fk_soc) as nb_suppliers, COUNT(DISTINCT f.rowid) as nb,\";\n\t\t$sql .= \" COUNT(fd.rowid) as nb_rows, SUM(fd.qty) as qty\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as fd\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"facture_fourn as f\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = fd.fk_facture_fourn\";\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\t$sql .= \" AND fd.fk_product = \".((int) $this->id);\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\t//$sql.= \" AND f.fk_statut != 0\";\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = \".((int) $socid);\n\t\t}\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t$this->stats_facture_fournisseur['suppliers'] = $obj->nb_suppliers;\n\t\t\t$this->stats_facture_fournisseur['nb'] = $obj->nb;\n\t\t\t$this->stats_facture_fournisseur['rows'] = $obj->nb_rows;\n\t\t\t$this->stats_facture_fournisseur['qty'] = $obj->qty ? $obj->qty : 0;\n\n\t\t\t$parameters = array('socid' => $socid);\n\t\t\t$reshook = $hookmanager->executeHooks('loadStatsSupplierInvoice', $parameters, $this, $action);\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$this->stats_facture_fournisseur = $hookmanager->resArray['stats_facture_fournisseur'];\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return an array formated for showing graphs\n\t *\n\t * @param  string $sql  \t\tRequest to execute\n\t * @param  string $mode \t\t'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $year \t\tYear (0=current year, -1=all years)\n\t * @return array|int           \t<0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tprivate function _get_stats($sql, $mode, $year = 0)\n\t{\n\t\t// phpcs:enable\n\t\t$tab = array();\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$arr = $this->db->fetch_array($resql);\n\t\t\t\t$keyfortab = (string) $arr[1];\n\t\t\t\tif ($year == -1) {\n\t\t\t\t\t$keyfortab = substr($keyfortab, -2);\n\t\t\t\t}\n\n\t\t\t\tif ($mode == 'byunit') {\n\t\t\t\t\t$tab[$keyfortab] = (empty($tab[$keyfortab]) ? 0 : $tab[$keyfortab]) + $arr[0]; // 1st field\n\t\t\t\t} elseif ($mode == 'bynumber') {\n\t\t\t\t\t$tab[$keyfortab] = (empty($tab[$keyfortab]) ? 0 : $tab[$keyfortab]) + $arr[2]; // 3rd field\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (empty($year)) {\n\t\t\t$year = strftime('%Y', time());\n\t\t\t$month = strftime('%m', time());\n\t\t} elseif ($year == -1) {\n\t\t\t$year = '';\n\t\t\t$month = 12; // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t} else {\n\t\t\t$month = 12; // We imagine we are at end of year, so we get last 12 month before, so all correct year.\n\t\t}\n\n\t\t$result = array();\n\n\t\tfor ($j = 0; $j < 12; $j++) {\n\t\t\t// $ids is 'D', 'N', 'O', 'S', ... (First letter of month in user language)\n\t\t\t$idx = ucfirst(dol_trunc(dol_print_date(dol_mktime(12, 0, 0, $month, 1, 1970), \"%b\"), 1, 'right', 'UTF-8', 1));\n\n\t\t\t//print $idx.'-'.$year.'-'.$month.'<br>';\n\t\t\t$result[$j] = array($idx, isset($tab[$year.$month]) ? $tab[$year.$month] : 0);\n\t\t\t//            $result[$j] = array($monthnum,isset($tab[$year.$month])?$tab[$year.$month]:0);\n\n\t\t\t$month = \"0\".($month - 1);\n\t\t\tif (dol_strlen($month) == 3) {\n\t\t\t\t$month = substr($month, 1);\n\t\t\t}\n\t\t\tif ($month == 0) {\n\t\t\t\t$month = 12;\n\t\t\t\t$year = $year - 1;\n\t\t\t}\n\t\t}\n\n\t\treturn array_reverse($result);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units or customers invoices in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_vente($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT f.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facturedet as d, \".MAIN_DB_PREFIX.\"facture as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = d.fk_facture\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('invoice').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = $socid\";\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units or supplier invoices in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_achat($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(f.datef, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT f.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"facture_fourn_det as d, \".MAIN_DB_PREFIX.\"facture_fourn as f, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE f.rowid = d.fk_facture_fourn\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND f.fk_soc = s.rowid\";\n\t\t$sql .= \" AND f.entity IN (\".getEntity('facture_fourn').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND f.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND f.fk_soc = $socid\";\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(f.datef,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(f.datef,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return nb of units in proposals in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_propal($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.datep, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT p.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"propaldet as d, \".MAIN_DB_PREFIX.\"propal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = d.fk_propal\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND prod.rowid = d.fk_product AND prod.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('propal').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(p.datep,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(p.datep,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in proposals in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_propalsupplier($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\tglobal $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(p.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT p.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"supplier_proposaldet as d, \".MAIN_DB_PREFIX.\"supplier_proposal as p, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as prod\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE p.rowid = d.fk_supplier_proposal\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND prod.rowid = d.fk_product AND prod.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND p.fk_soc = s.rowid\";\n\t\t$sql .= \" AND p.entity IN (\".getEntity('supplier_proposal').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND p.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND p.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(p.date_valid,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(p.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_order($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commandedet as d, \".MAIN_DB_PREFIX.\"commande as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('commande').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_ordersupplier($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_commande, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"commande_fournisseurdet as d, \".MAIN_DB_PREFIX.\"commande_fournisseur as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\t\t$sql .= \" WHERE c.rowid = d.fk_commande\";\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\t\t$sql .= \" AND c.entity IN (\".getEntity('supplier_order').\")\";\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_commande,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_commande,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_contract($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(c.date_contrat, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT c.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"contratdet as d, \".MAIN_DB_PREFIX.\"contrat as c, \".MAIN_DB_PREFIX.\"societe as s\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\n\t\t$sql .= \" WHERE c.entity IN (\".getEntity('contract').\")\";\n\t\t$sql .= \" AND c.rowid = d.fk_contrat\";\n\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\t\t$sql .= \" AND c.fk_soc = s.rowid\";\n\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND c.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND c.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(c.date_contrat,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(c.date_contrat,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return nb of units in orders in which product is included\n\t *\n\t * @param  int    $socid               Limit count on a particular third party id\n\t * @param  string $mode                'byunit'=number of unit, 'bynumber'=nb of entities\n\t * @param  int    $filteronproducttype 0=To filter on product only, 1=To filter on services only\n\t * @param  int    $year                Year (0=last 12 month, -1=all years)\n\t * @param  string $morefilter          More sql filters\n\t * @return array                       <0 if KO, result[month]=array(valuex,valuey) where month is 0 to 11\n\t */\n\tpublic function get_nb_mos($socid, $mode, $filteronproducttype = -1, $year = 0, $morefilter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT sum(d.qty), date_format(d.date_valid, '%Y%m')\";\n\t\tif ($mode == 'bynumber') {\n\t\t\t$sql .= \", count(DISTINCT d.rowid)\";\n\t\t}\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mrp_mo as d LEFT JOIN  \".MAIN_DB_PREFIX.\"societe as s ON d.fk_soc = s.rowid\";\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"product as p\";\n\t\t}\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \", \".MAIN_DB_PREFIX.\"societe_commerciaux as sc\";\n\t\t}\n\n\t\t$sql .= \" WHERE d.entity IN (\".getEntity('mo').\")\";\n\t\t$sql .= \" AND d.status > 0\";\n\n\t\tif ($this->id > 0) {\n\t\t\t$sql .= \" AND d.fk_product = \".((int) $this->id);\n\t\t} else {\n\t\t\t$sql .= \" AND d.fk_product > 0\";\n\t\t}\n\t\tif ($filteronproducttype >= 0) {\n\t\t\t$sql .= \" AND p.rowid = d.fk_product AND p.fk_product_type = \".((int) $filteronproducttype);\n\t\t}\n\n\t\tif (empty($user->rights->societe->client->voir) && !$socid) {\n\t\t\t$sql .= \" AND d.fk_soc = sc.fk_soc AND sc.fk_user = \".((int) $user->id);\n\t\t}\n\t\tif ($socid > 0) {\n\t\t\t$sql .= \" AND d.fk_soc = \".((int) $socid);\n\t\t}\n\t\t$sql .= $morefilter;\n\t\t$sql .= \" GROUP BY date_format(d.date_valid,'%Y%m')\";\n\t\t$sql .= \" ORDER BY date_format(d.date_valid,'%Y%m') DESC\";\n\n\t\treturn $this->_get_stats($sql, $mode, $year);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Link a product/service to a parent product/service\n\t *\n\t * @param  int $id_pere Id of parent product/service\n\t * @param  int $id_fils Id of child product/service\n\t * @param  int $qty     Quantity\n\t * @param  int $incdec  1=Increase/decrease stock of child when parent stock increase/decrease\n\t * @return int                < 0 if KO, > 0 if OK\n\t */\n\tpublic function add_sousproduit($id_pere, $id_fils, $qty, $incdec = 1)\n\t{\n\t\t// phpcs:enable\n\t\t// Clean parameters\n\t\tif (!is_numeric($id_pere)) {\n\t\t\t$id_pere = 0;\n\t\t}\n\t\tif (!is_numeric($id_fils)) {\n\t\t\t$id_fils = 0;\n\t\t}\n\t\tif (!is_numeric($incdec)) {\n\t\t\t$incdec = 0;\n\t\t}\n\n\t\t$result = $this->del_sousproduit($id_pere, $id_fils);\n\t\tif ($result < 0) {\n\t\t\treturn $result;\n\t\t}\n\n\t\t// Check not already father of id_pere (to avoid father -> child -> father links)\n\t\t$sql = \"SELECT fk_product_pere from \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere = \".((int) $id_fils).\" AND fk_product_fils = \".((int) $id_pere);\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t//Selection of the highest row\n\t\t\t$sql = \"SELECT MAX(rang) as max_rank FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $id_pere);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$rank = $obj->max_rank + 1;\n\t\t\t\t//Addition of a product with the highest rank +1\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_association(fk_product_pere,fk_product_fils,qty,incdec,rang)\";\n\t\t\t\t$sql .= \" VALUES (\".((int) $id_pere).\", \".((int) $id_fils).\", \".price2num($qty, 'MS').\", \".price2num($incdec, 'MS').\", \".((int) $rank).\")\";\n\t\t\t\tif (! $this->db->query($sql)) {\n\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\treturn -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Modify composed product\n\t *\n\t * @param  int $id_pere Id of parent product/service\n\t * @param  int $id_fils Id of child product/service\n\t * @param  int $qty     Quantity\n\t * @param  int $incdec  1=Increase/decrease stock of child when parent stock increase/decrease\n\t * @return int                < 0 if KO, > 0 if OK\n\t */\n\tpublic function update_sousproduit($id_pere, $id_fils, $qty, $incdec = 1)\n\t{\n\t\t// phpcs:enable\n\t\t// Clean parameters\n\t\tif (!is_numeric($id_pere)) {\n\t\t\t$id_pere = 0;\n\t\t}\n\t\tif (!is_numeric($id_fils)) {\n\t\t\t$id_fils = 0;\n\t\t}\n\t\tif (!is_numeric($incdec)) {\n\t\t\t$incdec = 1;\n\t\t}\n\t\tif (!is_numeric($qty)) {\n\t\t\t$qty = 1;\n\t\t}\n\n\t\t$sql = 'UPDATE '.MAIN_DB_PREFIX.'product_association SET ';\n\t\t$sql .= 'qty = '.price2num($qty, 'MS');\n\t\t$sql .= ',incdec = '.price2num($incdec, 'MS');\n\t\t$sql .= ' WHERE fk_product_pere = '.((int) $id_pere).' AND fk_product_fils = '.((int) $id_fils);\n\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Remove a link between a subproduct and a parent product/service\n\t *\n\t * @param  int $fk_parent Id of parent product (child will no more be linked to it)\n\t * @param  int $fk_child  Id of child product\n\t * @return int            < 0 if KO, > 0 if OK\n\t */\n\tpublic function del_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t// phpcs:enable\n\t\tif (!is_numeric($fk_parent)) {\n\t\t\t$fk_parent = 0;\n\t\t}\n\t\tif (!is_numeric($fk_child)) {\n\t\t\t$fk_child = 0;\n\t\t}\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $fk_parent);\n\t\t$sql .= \" AND fk_product_fils = \".((int) $fk_child);\n\n\t\tdol_syslog(get_class($this).'::del_sousproduit', LOG_DEBUG);\n\t\tif (!$this->db->query($sql)) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Updated ranks so that none are missing\n\t\t$sqlrank = \"SELECT rowid, rang FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sqlrank.= \" WHERE fk_product_pere = \".((int) $fk_parent);\n\t\t$sqlrank.= \" ORDER BY rang\";\n\t\t$resqlrank = $this->db->query($sqlrank);\n\t\tif ($resqlrank) {\n\t\t\t$cpt = 0;\n\t\t\twhile ($objrank = $this->db->fetch_object($resqlrank)) {\n\t\t\t\t$cpt++;\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"product_association\";\n\t\t\t\t$sql.= \" SET rang = \".((int) $cpt);\n\t\t\t\t$sql.= \" WHERE rowid = \".((int) $objrank->rowid);\n\t\t\t\tif (! $this->db->query($sql)) {\n\t\t\t\t\tdol_print_error($this->db);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Check if it is a sub-product into a kit\n\t *\n\t * @param  int \t$fk_parent \t\tId of parent kit product\n\t * @param  int \t$fk_child  \t\tId of child product\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tpublic function is_sousproduit($fk_parent, $fk_child)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT fk_product_pere, qty, incdec\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere  = \".((int) $fk_parent);\n\t\t$sql .= \" AND fk_product_fils = \".((int) $fk_child);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\n\t\t\tif ($num > 0) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->is_sousproduit_qty = $obj->qty;\n\t\t\t\t$this->is_sousproduit_incdec = $obj->incdec;\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Add a supplier price for the product.\n\t *  Note: Duplicate ref is accepted for different quantity only, or for different companies.\n\t *\n\t * @param  User   $user      User that make link\n\t * @param  int    $id_fourn  Supplier id\n\t * @param  string $ref_fourn Supplier ref\n\t * @param  float  $quantity  Quantity minimum for price\n\t * @return int               < 0 if KO, 0 if link already exists for this product, > 0 if OK\n\t */\n\tpublic function add_fournisseur($user, $id_fourn, $ref_fourn, $quantity)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$now = dol_now();\n\n\t\tdol_syslog(get_class($this).\"::add_fournisseur id_fourn = \".$id_fourn.\" ref_fourn=\".$ref_fourn.\" quantity=\".$quantity, LOG_DEBUG);\n\n\t\t// Clean parameters\n\t\t$quantity = price2num($quantity, 'MS');\n\n\t\tif ($ref_fourn) {\n\t\t\t$sql = \"SELECT rowid, fk_product\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t\t$sql .= \" WHERE fk_soc = \".((int) $id_fourn);\n\t\t\t$sql .= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t$sql .= \" AND fk_product <> \".((int) $this->id);\n\t\t\t$sql .= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\tif ($obj) {\n\t\t\t\t\t// If the supplier ref already exists but for another product (duplicate ref is accepted for different quantity only or different companies)\n\t\t\t\t\t$this->product_id_already_linked = $obj->fk_product;\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql .= \" WHERE fk_soc = \".((int) $id_fourn);\n\t\tif ($ref_fourn) {\n\t\t\t$sql .= \" AND ref_fourn = '\".$this->db->escape($ref_fourn).\"'\";\n\t\t} else {\n\t\t\t$sql .= \" AND (ref_fourn = '' OR ref_fourn IS NULL)\";\n\t\t}\n\t\t$sql .= \" AND quantity = \".((float) $quantity);\n\t\t$sql .= \" AND fk_product = \".((int) $this->id);\n\t\t$sql .= \" AND entity IN (\".getEntity('productsupplierprice').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t// The reference supplier does not exist, we create it for this product.\n\t\t\tif (empty($obj)) {\n\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_fournisseur_price(\";\n\t\t\t\t$sql .= \"datec\";\n\t\t\t\t$sql .= \", entity\";\n\t\t\t\t$sql .= \", fk_product\";\n\t\t\t\t$sql .= \", fk_soc\";\n\t\t\t\t$sql .= \", ref_fourn\";\n\t\t\t\t$sql .= \", quantity\";\n\t\t\t\t$sql .= \", fk_user\";\n\t\t\t\t$sql .= \", tva_tx\";\n\t\t\t\t$sql .= \") VALUES (\";\n\t\t\t\t$sql .= \"'\".$this->db->idate($now).\"'\";\n\t\t\t\t$sql .= \", \".$conf->entity;\n\t\t\t\t$sql .= \", \".$this->id;\n\t\t\t\t$sql .= \", \".$id_fourn;\n\t\t\t\t$sql .= \", '\".$this->db->escape($ref_fourn).\"'\";\n\t\t\t\t$sql .= \", \".$quantity;\n\t\t\t\t$sql .= \", \".$user->id;\n\t\t\t\t$sql .= \", 0\";\n\t\t\t\t$sql .= \")\";\n\n\t\t\t\tif ($this->db->query($sql)) {\n\t\t\t\t\t$this->product_fourn_price_id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"product_fournisseur_price\");\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If the supplier price already exists for this product and quantity\n\t\t\t\t$this->product_fourn_price_id = $obj->rowid;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return list of suppliers providing the product or service\n\t *\n\t * @return array        Array of vendor ids\n\t */\n\tpublic function list_suppliers()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$list = array();\n\n\t\t$sql = \"SELECT DISTINCT p.fk_soc\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price as p\";\n\t\t$sql .= \" WHERE p.fk_product = \".((int) $this->id);\n\t\t$sql .= \" AND p.entity = \".((int) $conf->entity);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$list[$i] = $obj->fk_soc;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\n\t\treturn $list;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Recopie les prix d'un produit/service sur un autre\n\t *\n\t * @param  int $fromId Id product source\n\t * @param  int $toId   Id product target\n\t * @return int                     < 0 if KO, > 0 if OK\n\t */\n\tpublic function clone_price($fromId, $toId)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$now = dol_now();\n\n\t\t$this->db->begin();\n\n\t\t// prices\n\t\t$sql  = \"INSERT INTO \".MAIN_DB_PREFIX.\"product_price (\";\n\t\t$sql .= \" entity\";\n\t\t$sql .= \", fk_product\";\n\t\t$sql .= \", date_price\";\n\t\t$sql .= \", price_level\";\n\t\t$sql .= \", price\";\n\t\t$sql .= \", price_ttc\";\n\t\t$sql .= \", price_min\";\n\t\t$sql .= \", price_min_ttc\";\n\t\t$sql .= \", price_base_type\";\n\t\t$sql .= \", default_vat_code\";\n\t\t$sql .= \", tva_tx\";\n\t\t$sql .= \", recuperableonly\";\n\t\t$sql .= \", localtax1_tx\";\n\t\t$sql .= \", localtax1_type\";\n\t\t$sql .= \", localtax2_tx\";\n\t\t$sql .= \", localtax2_type\";\n\t\t$sql .= \", fk_user_author\";\n\t\t$sql .= \", tosell\";\n\t\t$sql .= \", price_by_qty\";\n\t\t$sql .= \", fk_price_expression\";\n\t\t$sql .= \", fk_multicurrency\";\n\t\t$sql .= \", multicurrency_code\";\n\t\t$sql .= \", multicurrency_tx\";\n\t\t$sql .= \", multicurrency_price\";\n\t\t$sql .= \", multicurrency_price_ttc\";\n\t\t$sql .= \")\";\n\t\t$sql .= \" SELECT\";\n\t\t$sql .= \" entity\";\n\t\t$sql .= \", \".$toId;\n\t\t$sql .= \", '\".$this->db->idate($now).\"'\";\n\t\t$sql .= \", price_level\";\n\t\t$sql .= \", price\";\n\t\t$sql .= \", price_ttc\";\n\t\t$sql .= \", price_min\";\n\t\t$sql .= \", price_min_ttc\";\n\t\t$sql .= \", price_base_type\";\n\t\t$sql .= \", default_vat_code\";\n\t\t$sql .= \", tva_tx\";\n\t\t$sql .= \", recuperableonly\";\n\t\t$sql .= \", localtax1_tx\";\n\t\t$sql .= \", localtax1_type\";\n\t\t$sql .= \", localtax2_tx\";\n\t\t$sql .= \", localtax2_type\";\n\t\t$sql .= \", \".$user->id;\n\t\t$sql .= \", tosell\";\n\t\t$sql .= \", price_by_qty\";\n\t\t$sql .= \", fk_price_expression\";\n\t\t$sql .= \", fk_multicurrency\";\n\t\t$sql .= \", multicurrency_code\";\n\t\t$sql .= \", multicurrency_tx\";\n\t\t$sql .= \", multicurrency_price\";\n\t\t$sql .= \", multicurrency_price_ttc\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_price\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $fromId);\n\t\t$sql .= \" ORDER BY date_price DESC\";\n\t\tif ($conf->global->PRODUIT_MULTIPRICES_LIMIT > 0) {\n\t\t\t$sql .= \" LIMIT \".$conf->global->PRODUIT_MULTIPRICES_LIMIT;\n\t\t}\n\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Clone links between products\n\t *\n\t * @param  int $fromId Product id\n\t * @param  int $toId   Product id\n\t * @return int                  <0 if KO, >0 if OK\n\t */\n\tpublic function clone_associations($fromId, $toId)\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$sql = 'INSERT INTO '.MAIN_DB_PREFIX.'product_association (fk_product_pere, fk_product_fils, qty)';\n\t\t$sql .= \" SELECT \".$toId.\", fk_product_fils, qty FROM \".MAIN_DB_PREFIX.\"product_association\";\n\t\t$sql .= \" WHERE fk_product_pere = \".((int) $fromId);\n\n\t\tdol_syslog(get_class($this).'::clone_association', LOG_DEBUG);\n\t\tif (!$this->db->query($sql)) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->commit();\n\t\treturn 1;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Recopie les fournisseurs et prix fournisseurs d'un produit/service sur un autre\n\t *\n\t * @param  int $fromId Id produit source\n\t * @param  int $toId   Id produit cible\n\t * @return int                 < 0 si erreur, > 0 si ok\n\t */\n\tpublic function clone_fournisseurs($fromId, $toId)\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$now = dol_now();\n\n\t\t// les fournisseurs\n\t\t/*$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur (\"\n\t\t . \" datec, fk_product, fk_soc, ref_fourn, fk_user_author )\"\n\t\t . \" SELECT '\".$this->db->idate($now).\"', \".$toId.\", fk_soc, ref_fourn, fk_user_author\"\n\t\t . \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur\"\n\t\t . \" WHERE fk_product = \".((int) $fromId);\n\n\t\t if ( ! $this->db->query($sql ) )\n\t\t {\n\t\t $this->db->rollback();\n\t\t return -1;\n\t\t }*/\n\n\t\t// les prix de fournisseurs.\n\t\t$sql = \"INSERT \".MAIN_DB_PREFIX.\"product_fournisseur_price (\";\n\t\t$sql .= \" datec, fk_product, fk_soc, price, quantity, fk_user)\";\n\t\t$sql .= \" SELECT '\".$this->db->idate($now).\"', \".((int) $toId).\", fk_soc, price, quantity, fk_user\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_fournisseur_price\";\n\t\t$sql .= \" WHERE fk_product = \".((int) $fromId);\n\n\t\tdol_syslog(get_class($this).'::clone_fournisseurs', LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Fonction recursive uniquement utilisee par get_arbo_each_prod, recompose l'arborescence des sousproduits\n\t *  Define value of this->res\n\t *\n\t * @param  array  $prod       \t\t\tProducts array\n\t * @param  string $compl_path \t\t\tDirectory path of parents to add before\n\t * @param  int    $multiply   \t\t\tBecause each sublevel must be multiplicated by parent nb\n\t * @param  int    $level      \t\t\tInit level\n\t * @param  int    $id_parent  \t\t\tId parent\n\t * @param  int    $ignore_stock_load \tIgnore stock load\n\t * @return void\n\t */\n\tpublic function fetch_prod_arbo($prod, $compl_path = '', $multiply = 1, $level = 1, $id_parent = 0, $ignore_stock_load = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$tmpproduct = null;\n\t\t//var_dump($prod);\n\t\tforeach ($prod as $id_product => $desc_pere) {    // $id_product is 0 (first call starting with root top) or an id of a sub_product\n\t\t\tif (is_array($desc_pere)) {    // If desc_pere is an array, this means it's a child\n\t\t\t\t$id = (!empty($desc_pere[0]) ? $desc_pere[0] : '');\n\t\t\t\t$nb = (!empty($desc_pere[1]) ? $desc_pere[1] : '');\n\t\t\t\t$type = (!empty($desc_pere[2]) ? $desc_pere[2] : '');\n\t\t\t\t$label = (!empty($desc_pere[3]) ? $desc_pere[3] : '');\n\t\t\t\t$incdec = (!empty($desc_pere[4]) ? $desc_pere[4] : 0);\n\n\t\t\t\tif ($multiply < 1) {\n\t\t\t\t\t$multiply = 1;\n\t\t\t\t}\n\n\t\t\t\t//print \"XXX We add id=\".$id.\" - label=\".$label.\" - nb=\".$nb.\" - multiply=\".$multiply.\" fullpath=\".$compl_path.$label.\"\\n\";\n\t\t\t\tif (is_null($tmpproduct)) {\n\t\t\t\t\t$tmpproduct = new Product($this->db); // So we initialize tmpproduct only once for all loop.\n\t\t\t\t}\n\t\t\t\t$tmpproduct->fetch($id); // Load product to get ->ref\n\n\t\t\t\tif (empty($ignore_stock_load) && ($tmpproduct->isProduct() || !empty($conf->global->STOCK_SUPPORTS_SERVICES))) {\n\t\t\t\t\t$tmpproduct->load_stock('nobatch,novirtual'); // Load stock to get true ->stock_reel\n\t\t\t\t}\n\n\t\t\t\t$this->res[] = array(\n\t\t\t\t\t'id'=>$id, // Id product\n\t\t\t\t\t'id_parent'=>$id_parent,\n\t\t\t\t\t'ref'=>$tmpproduct->ref, // Ref product\n\t\t\t\t\t'nb'=>$nb, // Nb of units that compose parent product\n\t\t\t\t\t'nb_total'=>$nb * $multiply, // Nb of units for all nb of product\n\t\t\t\t\t'stock'=>$tmpproduct->stock_reel, // Stock\n\t\t\t\t\t'stock_alert'=>$tmpproduct->seuil_stock_alerte, // Stock alert\n\t\t\t\t\t'label'=>$label,\n\t\t\t\t\t'fullpath'=>$compl_path.$label, // Label\n\t\t\t\t\t'type'=>$type, // Nb of units that compose parent product\n\t\t\t\t\t'desiredstock'=>$tmpproduct->desiredstock,\n\t\t\t\t\t'level'=>$level,\n\t\t\t\t\t'incdec'=>$incdec,\n\t\t\t\t\t'entity'=>$tmpproduct->entity\n\t\t\t\t);\n\n\t\t\t\t// Recursive call if there is childs to child\n\t\t\t\tif (is_array($desc_pere['childs'])) {\n\t\t\t\t\t//print 'YYY We go down for '.$desc_pere[3].\" -> \\n\";\n\t\t\t\t\t$this->fetch_prod_arbo($desc_pere['childs'], $compl_path.$desc_pere[3].\" -> \", $desc_pere[1] * $multiply, $level + 1, $id, $ignore_stock_load);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Build the tree of subproducts into an array ->res and return it.\n\t *  this->sousprods must have been loaded by this->get_sousproduits_arbo()\n\t *\n\t * @param  int \t\t$multiply \t\t\tBecause each sublevel must be multiplicated by parent nb\n\t * @param  int    \t$ignore_stock_load \tIgnore stock load\n\t * @return array                    \t$this->res\n\t */\n\tpublic function get_arbo_each_prod($multiply = 1, $ignore_stock_load = 0)\n\t{\n\t\t// phpcs:enable\n\t\t$this->res = array();\n\t\tif (isset($this->sousprods) && is_array($this->sousprods)) {\n\t\t\tforeach ($this->sousprods as $prod_name => $desc_product) {\n\t\t\t\tif (is_array($desc_product)) {\n\t\t\t\t\t$this->fetch_prod_arbo($desc_product, \"\", $multiply, 1, $this->id, $ignore_stock_load);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//var_dump($this->res);\n\t\treturn $this->res;\n\t}\n\n\t/**\n\t * Count all parent and children products for current product (first level only)\n\t *\n\t * @param\tint\t\t$mode\t0=Both parent and child, -1=Parents only, 1=Children only\n\t * @return \tint            \tNb of father + child\n\t * @see getFather(), get_sousproduits_arbo()\n\t */\n\tpublic function hasFatherOrChild($mode = 0)\n\t{\n\t\t$nb = 0;\n\n\t\t$sql = \"SELECT COUNT(pa.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\tif ($mode == 0) {\n\t\t\t$sql .= \" WHERE pa.fk_product_fils = \".((int) $this->id).\" OR pa.fk_product_pere = \".((int) $this->id);\n\t\t} elseif ($mode == -1) {\n\t\t\t$sql .= \" WHERE pa.fk_product_fils = \".((int) $this->id); // We are a child, so we found lines that link to parents (can have several parents)\n\t\t} elseif ($mode == 1) {\n\t\t\t$sql .= \" WHERE pa.fk_product_pere = \".((int) $this->id); // We are a parent, so we found lines that link to children (can have several children)\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) {\n\t\t\t\t$nb = $obj->nb;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\t/**\n\t * Return if a product has variants or not\n\t *\n\t * @return int        Number of variants\n\t */\n\tpublic function hasVariants()\n\t{\n\t\t$nb = 0;\n\t\t$sql = \"SELECT count(rowid) as nb FROM \".MAIN_DB_PREFIX.\"product_attribute_combination WHERE fk_product_parent = \".((int) $this->id);\n\t\t$sql .= \" AND entity IN (\".getEntity('product').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\tif ($obj) {\n\t\t\t\t$nb = $obj->nb;\n\t\t\t}\n\t\t}\n\n\t\treturn $nb;\n\t}\n\n\n\t/**\n\t * Return if loaded product is a variant\n\t *\n\t * @return int\n\t */\n\tpublic function isVariant()\n\t{\n\t\tglobal $conf;\n\t\tif (!empty($conf->variants->enabled)) {\n\t\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"product_attribute_combination WHERE fk_product_child = \".((int) $this->id).\" AND entity IN (\".getEntity('product').\")\";\n\n\t\t\t$query = $this->db->query($sql);\n\n\t\t\tif ($query) {\n\t\t\t\tif (!$this->db->num_rows($query)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t *  Return all parent products for current product (first level only)\n\t *\n\t * @return array         Array of product\n\t * @see hasFatherOrChild()\n\t */\n\tpublic function getFather()\n\t{\n\t\t$sql = \"SELECT p.rowid, p.label as label, p.ref as ref, pa.fk_product_pere as id, p.fk_product_type, pa.qty, pa.incdec, p.entity\";\n\t\t$sql .= \", p.tosell as status, p.tobuy as status_buy\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_association as pa,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql .= \" WHERE p.rowid = pa.fk_product_pere\";\n\t\t$sql .= \" AND pa.fk_product_fils = \".((int) $this->id);\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$prods = array();\n\t\t\twhile ($record = $this->db->fetch_array($res)) {\n\t\t\t\t// $record['id'] = $record['rowid'] = id of father\n\t\t\t\t$prods[$record['id']]['id'] = $record['rowid'];\n\t\t\t\t$prods[$record['id']]['ref'] = $record['ref'];\n\t\t\t\t$prods[$record['id']]['label'] = $record['label'];\n\t\t\t\t$prods[$record['id']]['qty'] = $record['qty'];\n\t\t\t\t$prods[$record['id']]['incdec'] = $record['incdec'];\n\t\t\t\t$prods[$record['id']]['fk_product_type'] = $record['fk_product_type'];\n\t\t\t\t$prods[$record['id']]['entity'] = $record['entity'];\n\t\t\t\t$prods[$record['id']]['status'] = $record['status'];\n\t\t\t\t$prods[$record['id']]['status_buy'] = $record['status_buy'];\n\t\t\t}\n\t\t\treturn $prods;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return childs of product $id\n\t *\n\t * @param  int $id             \t\tId of product to search childs of\n\t * @param  int $firstlevelonly \t\tReturn only direct child\n\t * @param  int $level          \t\tLevel of recursing call (start to 1)\n\t * @return array                    Return array(prodid=>array(0=prodid, 1=>qty, 2=>product type, 3=>label, 4=>incdec, 5=>product ref)\n\t */\n\tpublic function getChildsArbo($id, $firstlevelonly = 0, $level = 1)\n\t{\n\t\tglobal $alreadyfound;\n\n\t\tif (empty($id)) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$sql = \"SELECT p.rowid, p.ref, p.label as label, p.fk_product_type,\";\n\t\t$sql .= \" pa.qty as qty, pa.fk_product_fils as id, pa.incdec,\";\n\t\t$sql .= \" pa.rowid as fk_association, pa.rang\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"product_association as pa\";\n\t\t$sql .= \" WHERE p.rowid = pa.fk_product_fils\";\n\t\t$sql .= \" AND pa.fk_product_pere = \".((int) $id);\n\t\t$sql .= \" AND pa.fk_product_fils <> \".((int) $id); // This should not happens, it is to avoid infinite loop if it happens\n\t\t$sql.= \" ORDER BY pa.rang\";\n\n\t\tdol_syslog(get_class($this).'::getChildsArbo id='.$id.' level='.$level, LOG_DEBUG);\n\n\t\tif ($level == 1) {\n\t\t\t$alreadyfound = array($id=>1); // We init array of found object to start of tree, so if we found it later (should not happened), we stop immediatly\n\t\t}\n\t\t// Protection against infinite loop\n\t\tif ($level > 30) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$prods = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res)) {\n\t\t\t\tif (!empty($alreadyfound[$rec['rowid']])) {\n\t\t\t\t\tdol_syslog(get_class($this).'::getChildsArbo the product id='.$rec['rowid'].' was already found at a higher level in tree. We discard to avoid infinite loop', LOG_WARNING);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$alreadyfound[$rec['rowid']] = 1;\n\t\t\t\t$prods[$rec['rowid']] = array(\n\t\t\t\t\t0=>$rec['rowid'],\n\t\t\t\t\t1=>$rec['qty'],\n\t\t\t\t\t2=>$rec['fk_product_type'],\n\t\t\t\t\t3=>$this->db->escape($rec['label']),\n\t\t\t\t\t4=>$rec['incdec'],\n\t\t\t\t\t5=>$rec['ref'],\n\t\t\t\t\t6=>$rec['fk_association'],\n\t\t\t\t\t7=>$rec['rang']\n\t\t\t\t);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty'],2=>$rec['fk_product_type']);\n\t\t\t\t//$prods[$this->db->escape($rec['label'])]= array(0=>$rec['id'],1=>$rec['qty']);\n\t\t\t\tif (empty($firstlevelonly)) {\n\t\t\t\t\t$listofchilds = $this->getChildsArbo($rec['rowid'], 0, $level + 1);\n\t\t\t\t\tforeach ($listofchilds as $keyChild => $valueChild) {\n\t\t\t\t\t\t$prods[$rec['rowid']]['childs'][$keyChild] = $valueChild;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $prods;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *     Return tree of all subproducts for product. Tree contains array of array(0=prodid, 1=>qty, 2=>product type, 3=>label, 4=>incdec, 5=>product ref)\n\t *     Set this->sousprods\n\t *\n\t * @return void\n\t */\n\tpublic function get_sousproduits_arbo()\n\t{\n\t\t// phpcs:enable\n\t\t$parent = array();\n\n\t\tforeach ($this->getChildsArbo($this->id) as $keyChild => $valueChild) {    // Warning. getChildsArbo can call getChildsArbo recursively. Starting point is $value[0]=id of product\n\t\t\t$parent[$this->label][$keyChild] = $valueChild;\n\t\t}\n\t\tforeach ($parent as $key => $value) {        // key=label, value is array of childs\n\t\t\t$this->sousprods[$key] = $value;\n\t\t}\n\t}\n\n\t/**\n\t *    Return clicable link of object (with eventually picto)\n\t *\n\t * @param  int    $withpicto             Add picto into link\n\t * @param  string $option                Where point the link ('stock', 'composition', 'category', 'supplier', '')\n\t * @param  int    $maxlength             Maxlength of ref\n\t * @param  int    $save_lastsearch_value -1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t * @param  int    $notooltip\t\t\t No tooltip\n\t * @return string                                String with URL\n\t */\n\tpublic function getNomUrl($withpicto = 0, $option = '', $maxlength = 0, $save_lastsearch_value = -1, $notooltip = 0)\n\t{\n\t\tglobal $conf, $langs, $hookmanager;\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/product.lib.php';\n\n\t\t$result = ''; $label = '';\n\n\t\t$newref = $this->ref;\n\t\tif ($maxlength) {\n\t\t\t$newref = dol_trunc($newref, $maxlength, 'middle');\n\t\t}\n\n\t\tif (!empty($this->entity)) {\n\t\t\t$tmpphoto = $this->show_photos('product', $conf->product->multidir_output[$this->entity], 1, 1, 0, 0, 0, 80);\n\t\t\tif ($this->nbphoto > 0) {\n\t\t\t\t$label .= '<div class=\"photointooltip floatright\">';\n\t\t\t\t$label .= $tmpphoto;\n\t\t\t\t$label .= '</div>';\n\t\t\t\t//$label .= '<div style=\"clear: both;\"></div>';\n\t\t\t}\n\t\t}\n\n\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\t$label .= img_picto('', 'product').' <u class=\"paddingrightonly\">'.$langs->trans(\"Product\").'</u>';\n\t\t} elseif ($this->type == Product::TYPE_SERVICE) {\n\t\t\t$label .= img_picto('', 'service').' <u class=\"paddingrightonly\">'.$langs->trans(\"Service\").'</u>';\n\t\t}\n\t\tif (isset($this->status) && isset($this->status_buy)) {\n\t\t\t$label .= ' '.$this->getLibStatut(5, 0);\n\t\t\t$label .= ' '.$this->getLibStatut(5, 1);\n\t\t}\n\n\t\tif (!empty($this->ref)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductRef').':</b> '.$this->ref;\n\t\t}\n\t\tif (!empty($this->label)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductLabel').':</b> '.$this->label;\n\t\t}\n\t\tif ($this->type == Product::TYPE_PRODUCT || !empty($conf->global->STOCK_SUPPORTS_SERVICES)) {\n\t\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t\t$langs->load(\"productbatch\");\n\t\t\t\t$label .= \"<br><b>\".$langs->trans(\"ManageLotSerial\").'</b>: '.$this->getLibStatut(0, 2);\n\t\t\t}\n\t\t}\n\t\tif (!empty($conf->barcode->enabled)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('BarCode').':</b> '.$this->barcode;\n\t\t}\n\n\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\tif ($this->weight) {\n\t\t\t\t$label .= \"<br><b>\".$langs->trans(\"Weight\").'</b>: '.$this->weight.' '.measuringUnitString(0, \"weight\", $this->weight_units);\n\t\t\t}\n\t\t\t$labelsize = \"\";\n\t\t\tif ($this->length) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Length\").'</b>: '.$this->length.' '.measuringUnitString(0, 'size', $this->length_units);\n\t\t\t}\n\t\t\tif ($this->width) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Width\").'</b>: '.$this->width.' '.measuringUnitString(0, 'size', $this->width_units);\n\t\t\t}\n\t\t\tif ($this->height) {\n\t\t\t\t$labelsize .= ($labelsize ? \" - \" : \"\").\"<b>\".$langs->trans(\"Height\").'</b>: '.$this->height.' '.measuringUnitString(0, 'size', $this->height_units);\n\t\t\t}\n\t\t\tif ($labelsize) {\n\t\t\t\t$label .= \"<br>\".$labelsize;\n\t\t\t}\n\n\t\t\t$labelsurfacevolume = \"\";\n\t\t\tif ($this->surface) {\n\t\t\t\t$labelsurfacevolume .= ($labelsurfacevolume ? \" - \" : \"\").\"<b>\".$langs->trans(\"Surface\").'</b>: '.$this->surface.' '.measuringUnitString(0, 'surface', $this->surface_units);\n\t\t\t}\n\t\t\tif ($this->volume) {\n\t\t\t\t$labelsurfacevolume .= ($labelsurfacevolume ? \" - \" : \"\").\"<b>\".$langs->trans(\"Volume\").'</b>: '.$this->volume.' '.measuringUnitString(0, 'volume', $this->volume_units);\n\t\t\t}\n\t\t\tif ($labelsurfacevolume) {\n\t\t\t\t$label .= \"<br>\".$labelsurfacevolume;\n\t\t\t}\n\t\t}\n\t\tif (!empty($this->pmp) && $this->pmp) {\n\t\t\t$label .= \"<br><b>\".$langs->trans(\"PMPValue\").'</b>: '.price($this->pmp, 0, '', 1, -1, -1, $conf->currency);\n\t\t}\n\n\t\tif (!empty($conf->accounting->enabled) && $this->status) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellCode').':</b> '.length_accountg($this->accountancy_code_sell);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellIntraCode').':</b> '.length_accountg($this->accountancy_code_sell_intra);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancySellExportCode').':</b> '.length_accountg($this->accountancy_code_sell_export);\n\t\t}\n\t\tif (!empty($conf->accounting->enabled) && $this->status_buy) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyCode').':</b> '.length_accountg($this->accountancy_code_buy);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyIntraCode').':</b> '.length_accountg($this->accountancy_code_buy_intra);\n\t\t\t$label .= '<br><b>'.$langs->trans('ProductAccountancyBuyExportCode').':</b> '.length_accountg($this->accountancy_code_buy_export);\n\t\t}\n\n\t\t$linkclose = '';\n\t\tif (empty($notooltip)) {\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$label = $langs->trans(\"ShowProduct\");\n\t\t\t\t$linkclose .= ' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\n\t\t\t$linkclose .= ' title=\"'.dol_escape_htmltag($label, 1, 1).'\"';\n\t\t\t$linkclose .= ' class=\"nowraponall classfortooltip\"';\n\t\t} else {\n\t\t\t$linkclose = ' class=\"nowraponall\"';\n\t\t}\n\n\t\tif ($option == 'supplier' || $option == 'category') {\n\t\t\t$url = DOL_URL_ROOT.'/product/fournisseurs.php?id='.$this->id;\n\t\t} elseif ($option == 'stock') {\n\t\t\t$url = DOL_URL_ROOT.'/product/stock/product.php?id='.$this->id;\n\t\t} elseif ($option == 'composition') {\n\t\t\t$url = DOL_URL_ROOT.'/product/composition/card.php?id='.$this->id;\n\t\t} else {\n\t\t\t$url = DOL_URL_ROOT.'/product/card.php?id='.$this->id;\n\t\t}\n\n\t\tif ($option !== 'nolink') {\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t\t$add_save_lastsearch_values = 1;\n\t\t\t}\n\t\t\tif ($add_save_lastsearch_values) {\n\t\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t\t}\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\"';\n\t\t$linkstart .= $linkclose.'>';\n\t\t$linkend = '</a>';\n\n\t\t$result .= $linkstart;\n\t\tif ($withpicto) {\n\t\t\tif ($this->type == Product::TYPE_PRODUCT) {\n\t\t\t\t$result .= (img_object(($notooltip ? '' : $label), 'product', ($notooltip ? 'class=\"paddingright\"' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1));\n\t\t\t}\n\t\t\tif ($this->type == Product::TYPE_SERVICE) {\n\t\t\t\t$result .= (img_object(($notooltip ? '' : $label), 'service', ($notooltip ? 'class=\"paddingright\"' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1));\n\t\t\t}\n\t\t}\n\t\t$result .= $newref;\n\t\t$result .= $linkend;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters = array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook = $hookmanager->executeHooks('getNomUrl', $parameters, $this, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\t$result = $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$result .= $hookmanager->resPrint;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * @param  string    $modele      Force model to use ('' to not force)\n\t * @param  Translate $outputlangs Object langs to use for output\n\t * @param  int       $hidedetails Hide details of lines\n\t * @param  int       $hidedesc    Hide description\n\t * @param  int       $hideref     Hide ref\n\t * @return int                         0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$langs->load(\"products\");\n\t\t$outputlangs->load(\"products\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (!dol_strlen($modele)) {\n\t\t\tif (!empty($conf->global->PRODUCT_ADDON_PDF)) {\n\t\t\t\t$modele = $conf->global->PRODUCT_ADDON_PDF;\n\t\t\t} else {\n\t\t\t\t$modele = 'strato';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/product/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t}\n\n\t/**\n\t *    Return label of status of object\n\t *\n\t * @param  int $mode 0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto\n\t * @param  int $type 0=Sell, 1=Buy, 2=Batch Number management\n\t * @return string          Label of status\n\t */\n\tpublic function getLibStatut($mode = 0, $type = 0)\n\t{\n\t\tswitch ($type) {\n\t\t\tcase 0:\n\t\t\t\treturn $this->LibStatut($this->status, $mode, $type);\n\t\t\tcase 1:\n\t\t\t\treturn $this->LibStatut($this->status_buy, $mode, $type);\n\t\t\tcase 2:\n\t\t\t\treturn $this->LibStatut($this->status_batch, $mode, $type);\n\t\t\tdefault:\n\t\t\t\t//Simulate previous behavior but should return an error string\n\t\t\t\treturn $this->LibStatut($this->status_buy, $mode, $type);\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Return label of a given status\n\t *\n\t * @param  int \t\t$status \tStatut\n\t * @param  int\t\t$mode       0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t * @param  int \t\t$type   \t0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t * @return string              \tLabel of status\n\t */\n\tpublic function LibStatut($status, $mode = 0, $type = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$labelStatus = $labelStatusShort = '';\n\n\t\t$langs->load('products');\n\t\tif (!empty($conf->productbatch->enabled)) {\n\t\t\t$langs->load(\"productbatch\");\n\t\t}\n\n\t\tif ($type == 2) {\n\t\t\tswitch ($mode) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$label = ($status == 0 ? $langs->transnoentitiesnoconv('ProductStatusNotOnBatch') : ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatch') : $langs->transnoentitiesnoconv('ProductStatusOnSerial')));\n\t\t\t\t\treturn dolGetStatus($label);\n\t\t\t\tcase 1:\n\t\t\t\t\t$label = ($status == 0 ? $langs->transnoentitiesnoconv('ProductStatusNotOnBatchShort') : ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatchShort') : $langs->transnoentitiesnoconv('ProductStatusOnSerialShort')));\n\t\t\t\t\treturn dolGetStatus($label);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn $this->LibStatut($status, 3, 2).' '.$this->LibStatut($status, 1, 2);\n\t\t\t\tcase 3:\n\t\t\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('ProductStatusNotOnBatch'), '', '', empty($status) ? 'status5' : 'status4', 3, 'dot');\n\t\t\t\tcase 4:\n\t\t\t\t\treturn $this->LibStatut($status, 3, 2).' '.$this->LibStatut($status, 0, 2);\n\t\t\t\tcase 5:\n\t\t\t\t\treturn $this->LibStatut($status, 1, 2).' '.$this->LibStatut($status, 3, 2);\n\t\t\t\tdefault:\n\t\t\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('Unknown'));\n\t\t\t}\n\t\t}\n\n\t\t$statuttrans = empty($status) ? 'status5' : 'status4';\n\n\t\tif ($status == 0) {\n\t\t\t// $type   0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t\t\tif ($type == 0) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnSellShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnSell');\n\t\t\t} elseif ($type == 1) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnBuyShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnBuy');\n\t\t\t} elseif ($type == 2) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusNotOnBatch');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusNotOnBatchShort');\n\t\t\t}\n\t\t} elseif ($status == 1) {\n\t\t\t// $type   0=Status \"to sell\", 1=Status \"to buy\", 2=Status \"to Batch\"\n\t\t\tif ($type == 0) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnSellShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnSell');\n\t\t\t} elseif ($type == 1) {\n\t\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnBuyShort');\n\t\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnBuy');\n\t\t\t} elseif ($type == 2) {\n\t\t\t\t$labelStatus = ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatch') : $langs->transnoentitiesnoconv('ProductStatusOnSerial'));\n\t\t\t\t$labelStatusShort = ($status == 1 ? $langs->transnoentitiesnoconv('ProductStatusOnBatchShort') : $langs->transnoentitiesnoconv('ProductStatusOnSerialShort'));\n\t\t\t}\n\t\t} elseif ( $type == 2 && $status == 2 ) {\n\t\t\t$labelStatus = $langs->transnoentitiesnoconv('ProductStatusOnSerial');\n\t\t\t$labelStatusShort = $langs->transnoentitiesnoconv('ProductStatusOnSerialShort');\n\t\t}\n\n\t\tif ($mode > 6) {\n\t\t\treturn dolGetStatus($langs->transnoentitiesnoconv('Unknown'), '', '', 'status0', 0);\n\t\t} else {\n\t\t\treturn dolGetStatus($labelStatus, $labelStatusShort, '', $statuttrans, $mode);\n\t\t}\n\t}\n\n\n\t/**\n\t *  Retour label of nature of product\n\t *\n\t * @return string        Label\n\t */\n\tpublic function getLibFinished()\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('products');\n\n\t\tif (isset($this->finished) && $this->finished >= 0) {\n\t\t\t$sql = \"SELECT label, code FROM \".MAIN_DB_PREFIX.\"c_product_nature where code = \".((int) $this->finished).\" AND active=1\";\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql && $this->db->num_rows($resql) > 0) {\n\t\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t\t$label = $langs->trans($res['label']);\n\t\t\t\t$this->db->free($resql);\n\t\t\t\treturn $label;\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error().' sql='.$sql;\n\t\t\t\tdol_syslog(__METHOD__.' Error '.$this->error, LOG_ERR);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Adjust stock in a warehouse for product\n\t *\n\t * @param  User   $user           user asking change\n\t * @param  int    $id_entrepot    id of warehouse\n\t * @param  double $nbpiece        nb of units (should be always positive, use $movement to decide if we add or remove)\n\t * @param  int    $movement       0 = add, 1 = remove\n\t * @param  string $label          Label of stock movement\n\t * @param  double $price          Unit price HT of product, used to calculate average weighted price (PMP in french). If 0, average weighted price is not changed.\n\t * @param  string $inventorycode  Inventory code\n\t * @param  string $origin_element Origin element type\n\t * @param  int    $origin_id      Origin id of element\n\t * @param  int\t  $disablestockchangeforsubproduct\tDisable stock change for sub-products of kit (usefull only if product is a subproduct)\n\t * @param  array  $extrafields\t  Array of extrafields\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tpublic function correct_stock($user, $id_entrepot, $nbpiece, $movement, $label = '', $price = 0, $inventorycode = '', $origin_element = '', $origin_id = null, $disablestockchangeforsubproduct = 0, $extrafields = null)\n\t{\n\t\t// phpcs:enable\n\t\tif ($id_entrepot) {\n\t\t\t$this->db->begin();\n\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/stock/class/mouvementstock.class.php';\n\n\t\t\tif ($nbpiece < 0) {\n\t\t\t\tif (!$movement) {\n\t\t\t\t\t$movement = 1;\n\t\t\t\t}\n\t\t\t\t$nbpiece = abs($nbpiece);\n\t\t\t}\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock = new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id); // Set ->origin_type and ->origin_id\n\t\t\t$result = $movementstock->_create($user, $this->id, $id_entrepot, $op[$movement], $movement, $price, $label, $inventorycode, '', '', '', '', false, 0, $disablestockchangeforsubproduct);\n\n\t\t\tif ($result >= 0) {\n\t\t\t\tif ($extrafields) {\n\t\t\t\t\t$array_options = $extrafields->getOptionalsFromPost('stock_mouvement');\n\t\t\t\t\t$movementstock->array_options = $array_options;\n\t\t\t\t\t$movementstock->insertExtraFields();\n\t\t\t\t}\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$this->error = $movementstock->error;\n\t\t\t\t$this->errors = $movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Adjust stock in a warehouse for product with batch number\n\t *\n\t * @param  User     $user           user asking change\n\t * @param  int      $id_entrepot    id of warehouse\n\t * @param  double   $nbpiece        nb of units (should be always positive, use $movement to decide if we add or remove)\n\t * @param  int      $movement       0 = add, 1 = remove\n\t * @param  string   $label          Label of stock movement\n\t * @param  double   $price          Price to use for stock eval\n\t * @param  integer  $dlc            eat-by date\n\t * @param  integer  $dluo           sell-by date\n\t * @param  string   $lot            Lot number\n\t * @param  string   $inventorycode  Inventory code\n\t * @param  string   $origin_element Origin element type\n\t * @param  int      $origin_id      Origin id of element\n\t * @param  int\t    $disablestockchangeforsubproduct\tDisable stock change for sub-products of kit (usefull only if product is a subproduct)\n\t * @param  array    $extrafields\tArray of extrafields\n\t * @return int                      <0 if KO, >0 if OK\n\t */\n\tpublic function correct_stock_batch($user, $id_entrepot, $nbpiece, $movement, $label = '', $price = 0, $dlc = '', $dluo = '', $lot = '', $inventorycode = '', $origin_element = '', $origin_id = null, $disablestockchangeforsubproduct = 0, $extrafields = null)\n\t{\n\t\t// phpcs:enable\n\t\tif ($id_entrepot) {\n\t\t\t$this->db->begin();\n\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/product/stock/class/mouvementstock.class.php';\n\n\t\t\tif ($nbpiece < 0) {\n\t\t\t\tif (!$movement) {\n\t\t\t\t\t$movement = 1;\n\t\t\t\t}\n\t\t\t\t$nbpiece = abs($nbpiece);\n\t\t\t}\n\n\t\t\t$op[0] = \"+\".trim($nbpiece);\n\t\t\t$op[1] = \"-\".trim($nbpiece);\n\n\t\t\t$movementstock = new MouvementStock($this->db);\n\t\t\t$movementstock->setOrigin($origin_element, $origin_id); // Set ->origin_type and ->fk_origin\n\t\t\t$result = $movementstock->_create($user, $this->id, $id_entrepot, $op[$movement], $movement, $price, $label, $inventorycode, '', $dlc, $dluo, $lot, false, 0, $disablestockchangeforsubproduct);\n\n\t\t\tif ($result >= 0) {\n\t\t\t\tif ($extrafields) {\n\t\t\t\t\t$array_options = $extrafields->getOptionalsFromPost('stock_mouvement');\n\t\t\t\t\t$movementstock->array_options = $array_options;\n\t\t\t\t\t$movementstock->insertExtraFields();\n\t\t\t\t}\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$this->error = $movementstock->error;\n\t\t\t\t$this->errors = $movementstock->errors;\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Load information about stock of a product into ->stock_reel, ->stock_warehouse[] (including stock_warehouse[idwarehouse]->detail_batch for batch products)\n\t * This function need a lot of load. If you use it on list, use a cache to execute it once for each product id.\n\t * If ENTREPOT_EXTRA_STATUS is set, filtering on warehouse status is possible.\n\t *\n\t * @param  \tstring \t$option \t\t\t\t\t'' = Load all stock info, also from closed and internal warehouses, 'nobatch', 'novirtual'\n\t * \t\t\t\t\t\t\t\t\t\t\t\tYou can also filter on 'warehouseclosed', 'warehouseopen', 'warehouseinternal'\n\t * @param\tint\t\t$includedraftpoforvirtual\tInclude draft status of PO for virtual stock calculation\n\t * @return \tint                  \t\t\t\t< 0 if KO, > 0 if OK\n\t * @see    \tload_virtual_stock(), loadBatchInfo()\n\t */\n\tpublic function load_stock($option = '', $includedraftpoforvirtual = null)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$this->stock_reel = 0;\n\t\t$this->stock_warehouse = array();\n\t\t$this->stock_theorique = 0;\n\n\t\t// Set filter on warehouse status\n\t\t$warehouseStatus = array();\n\t\tif (preg_match('/warehouseclosed/', $option)) {\n\t\t\t$warehouseStatus[Entrepot::STATUS_CLOSED] = Entrepot::STATUS_CLOSED;\n\t\t}\n\t\tif (preg_match('/warehouseopen/', $option)) {\n\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_ALL] = Entrepot::STATUS_OPEN_ALL;\n\t\t}\n\t\tif (preg_match('/warehouseinternal/', $option)) {\n\t\t\tif (!empty($conf->global->ENTREPOT_EXTRA_STATUS)) {\n\t\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_INTERNAL] = Entrepot::STATUS_OPEN_INTERNAL;\n\t\t\t} else {\n\t\t\t\t$warehouseStatus[Entrepot::STATUS_OPEN_ALL] = Entrepot::STATUS_OPEN_ALL;\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"SELECT ps.rowid, ps.reel, ps.fk_entrepot\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"entrepot as w\";\n\t\t$sql .= \" WHERE w.entity IN (\".getEntity('stock').\")\";\n\t\t$sql .= \" AND w.rowid = ps.fk_entrepot\";\n\t\t$sql .= \" AND ps.fk_product = \".((int) $this->id);\n\t\tif (count($warehouseStatus)) {\n\t\t\t$sql .= \" AND w.statut IN (\".$this->db->sanitize(implode(',', $warehouseStatus)).\")\";\n\t\t}\n\n\t\t$sql .= \" ORDER BY ps.reel \".(!empty($conf->global->DO_NOT_TRY_TO_DEFRAGMENT_STOCKS_WAREHOUSE)?'DESC':'ASC'); // Note : qty ASC is important for expedition card, to avoid stock fragmentation;\n\n\t\tdol_syslog(get_class($this).\"::load_stock\", LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$num = $this->db->num_rows($result);\n\t\t\t$i = 0;\n\t\t\tif ($num > 0) {\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$row = $this->db->fetch_object($result);\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot] = new stdClass();\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->real = $row->reel;\n\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->id = $row->rowid;\n\t\t\t\t\tif ((!preg_match('/nobatch/', $option)) && $this->hasbatch()) {\n\t\t\t\t\t\t$this->stock_warehouse[$row->fk_entrepot]->detail_batch = Productbatch::findAll($this->db, $row->rowid, 1, $this->id);\n\t\t\t\t\t}\n\t\t\t\t\t$this->stock_reel += $row->reel;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($result);\n\n\t\t\tif (!preg_match('/novirtual/', $option)) {\n\t\t\t\t$this->load_virtual_stock($includedraftpoforvirtual); // This also load all arrays stats_xxx...\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load value ->stock_theorique of a product. Property this->id must be defined.\n\t *  This function need a lot of load. If you use it on list, use a cache to execute it one for each product id.\n\t *\n\t * \t@param\tint\t\t$includedraftpoforvirtual\tInclude draft status and not yet approved Purchase Orders for virtual stock calculation\n\t *  @return int     \t\t\t\t\t\t\t< 0 if KO, > 0 if OK\n\t *  @see\tload_stock(), loadBatchInfo()\n\t */\n\tpublic function load_virtual_stock($includedraftpoforvirtual = null)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $hookmanager, $action;\n\n\t\t$stock_commande_client = 0;\n\t\t$stock_commande_fournisseur = 0;\n\t\t$stock_sending_client = 0;\n\t\t$stock_reception_fournisseur = 0;\n\t\t$stock_inproduction = 0;\n\n\t\t//dol_syslog(\"load_virtual_stock\");\n\n\t\tif (!empty($conf->commande->enabled)) {\n\t\t\t$result = $this->load_stats_commande(0, '1,2', 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_commande_client = $this->stats_commande['qty'];\n\t\t}\n\t\tif (!empty($conf->expedition->enabled)) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/expedition/class/expedition.class.php';\n\t\t\t$filterShipmentStatus = '';\n\t\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT)) {\n\t\t\t\t$filterShipmentStatus = Expedition::STATUS_VALIDATED.','.Expedition::STATUS_CLOSED;\n\t\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n\t\t\t\t$filterShipmentStatus = Expedition::STATUS_CLOSED;\n\t\t\t}\n\t\t\t$result = $this->load_stats_sending(0, '1,2', 1, $filterShipmentStatus);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_sending_client = $this->stats_expedition['qty'];\n\t\t}\n\t\tif ((!empty($conf->fournisseur->enabled) && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD)) || !empty($conf->supplier_order->enabled)) {\n\t\t\t$filterStatus = empty($conf->global->SUPPLIER_ORDER_STATUS_FOR_VIRTUAL_STOCK) ? '3,4' : $conf->global->SUPPLIER_ORDER_STATUS_FOR_VIRTUAL_STOCK;\n\t\t\tif (isset($includedraftpoforvirtual)) {\n\t\t\t\t$filterStatus = '0,1,2,'.$filterStatus;\t// 1,2 may have already been inside $filterStatus but it is better to have twice than missing $filterStatus does not include them\n\t\t\t}\n\t\t\t$result = $this->load_stats_commande_fournisseur(0, $filterStatus, 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_commande_fournisseur = $this->stats_commande_fournisseur['qty'];\n\t\t}\n\t\tif (((!empty($conf->fournisseur->enabled) && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD)) || !empty($conf->supplier_order->enabled) || !empty($conf->supplier_invoice->enabled)) && !empty($conf->reception->enabled)) {\n\t\t\t$filterStatus = '4';\n\t\t\tif (isset($includedraftpoforvirtual)) {\n\t\t\t\t$filterStatus = '0,'.$filterStatus;\n\t\t\t}\n\t\t\t$result = $this->load_stats_reception(0, $filterStatus, 1); // Use same tables than when module reception is not used.\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_reception_fournisseur = $this->stats_reception['qty'];\n\t\t}\n\t\tif (!empty($conf->mrp->enabled)) {\n\t\t\t$result = $this->load_stats_inproduction(0, '1,2', 1);\n\t\t\tif ($result < 0) {\n\t\t\t\tdol_print_error($this->db, $this->error);\n\t\t\t}\n\t\t\t$stock_inproduction = $this->stats_mrptoproduce['qty'] - $this->stats_mrptoconsume['qty'];\n\t\t}\n\n\t\t$this->stock_theorique = $this->stock_reel + $stock_inproduction;\n\n\t\t// Stock decrease mode\n\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT) || !empty($conf->global->STOCK_CALCULATE_ON_SHIPMENT_CLOSE)) {\n\t\t\t$this->stock_theorique -= ($stock_commande_client - $stock_sending_client);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_VALIDATE_ORDER)) {\n\t\t\t$this->stock_theorique += 0;\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_BILL)) {\n\t\t\t$this->stock_theorique -= $stock_commande_client;\n\t\t}\n\t\t// Stock Increase mode\n\t\tif (!empty($conf->global->STOCK_CALCULATE_ON_RECEPTION) || !empty($conf->global->STOCK_CALCULATE_ON_RECEPTION_CLOSE)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_DISPATCH_ORDER)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_VALIDATE_ORDER)) {\n\t\t\t$this->stock_theorique -= $stock_reception_fournisseur;\n\t\t} elseif (!empty($conf->global->STOCK_CALCULATE_ON_SUPPLIER_BILL)) {\n\t\t\t$this->stock_theorique += ($stock_commande_fournisseur - $stock_reception_fournisseur);\n\t\t}\n\n\t\tif (!is_object($hookmanager)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/hookmanager.class.php';\n\t\t\t$hookmanager = new HookManager($this->db);\n\t\t}\n\t\t$hookmanager->initHooks(array('productdao'));\n\t\t$parameters = array('id'=>$this->id, 'includedraftpoforvirtual' => $includedraftpoforvirtual);\n\t\t// Note that $action and $object may have been modified by some hooks\n\t\t$reshook = $hookmanager->executeHooks('loadvirtualstock', $parameters, $this, $action);\n\t\tif ($reshook > 0) {\n\t\t\t$this->stock_theorique = $hookmanager->resArray['stock_theorique'];\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\n\t/**\n\t *  Load existing information about a serial\n\t *\n\t * @param  string $batch Lot/serial number\n\t * @return array                    Array with record into product_batch\n\t * @see    load_stock(), load_virtual_stock()\n\t */\n\tpublic function loadBatchInfo($batch)\n\t{\n\t\t$result = array();\n\n\t\t$sql = \"SELECT pb.batch, pb.eatby, pb.sellby, SUM(pb.qty) AS qty FROM \".MAIN_DB_PREFIX.\"product_batch as pb, \".MAIN_DB_PREFIX.\"product_stock as ps\";\n\t\t$sql .= \" WHERE pb.fk_product_stock = ps.rowid AND ps.fk_product = \".((int) $this->id).\" AND pb.batch = '\".$this->db->escape($batch).\"'\";\n\t\t$sql .= \" GROUP BY pb.batch, pb.eatby, pb.sellby\";\n\t\tdol_syslog(get_class($this).\"::loadBatchInfo load first entry found for lot/serial = \".$batch, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t$result[] = array('batch'=>$batch, 'eatby'=>$this->db->jdate($obj->eatby), 'sellby'=>$this->db->jdate($obj->sellby), 'qty'=>$obj->qty);\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\treturn $result;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->db->rollback();\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Move an uploaded file described into $file array into target directory $sdir.\n\t *\n\t * @param  string $sdir Target directory\n\t * @param  string $file Array of file info of file to upload: array('name'=>..., 'tmp_name'=>...)\n\t * @return int                    <0 if KO, >0 if OK\n\t */\n\tpublic function add_photo($sdir, $file)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$result = 0;\n\n\t\t$dir = $sdir;\n\t\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {\n\t\t\t$dir .= '/'.get_exdir($this->id, 2, 0, 0, $this, 'product').$this->id.\"/photos\";\n\t\t} else {\n\t\t\t$dir .= '/'.get_exdir(0, 0, 0, 0, $this, 'product').dol_sanitizeFileName($this->ref);\n\t\t}\n\n\t\tdol_mkdir($dir);\n\n\t\t$dir_osencoded = $dir;\n\n\t\tif (is_dir($dir_osencoded)) {\n\t\t\t$originImage = $dir.'/'.$file['name'];\n\n\t\t\t// Cree fichier en taille origine\n\t\t\t$result = dol_move_uploaded_file($file['tmp_name'], $originImage, 1);\n\n\t\t\tif (file_exists(dol_osencode($originImage))) {\n\t\t\t\t// Create thumbs\n\t\t\t\t$this->addThumbs($originImage);\n\t\t\t}\n\t\t}\n\n\t\tif (is_numeric($result) && $result > 0) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return if at least one photo is available\n\t *\n\t * @param  string $sdir Directory to scan\n\t * @return boolean                 True if at least one photo is available, False if not\n\t */\n\tpublic function is_photo_available($sdir)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\tglobal $conf;\n\n\t\t$dir = $sdir;\n\t\tif (!empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO)) {\n\t\t\t$dir .= '/'.get_exdir($this->id, 2, 0, 0, $this, 'product').$this->id.\"/photos/\";\n\t\t} else {\n\t\t\t$dir .= '/'.get_exdir(0, 0, 0, 0, $this, 'product');\n\t\t}\n\n\t\t$nbphoto = 0;\n\n\t\t$dir_osencoded = dol_osencode($dir);\n\t\tif (file_exists($dir_osencoded)) {\n\t\t\t$handle = opendir($dir_osencoded);\n\t\t\tif (is_resource($handle)) {\n\t\t\t\twhile (($file = readdir($handle)) !== false) {\n\t\t\t\t\tif (!utf8_check($file)) {\n\t\t\t\t\t\t$file = utf8_encode($file); // To be sure data is stored in UTF8 in memory\n\t\t\t\t\t}\n\t\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return an array with all photos of product found on disk. There is no sorting criteria.\n\t *\n\t * @param  string $dir   \tDirectory to scan\n\t * @param  int    $nbmax \tNumber maxium of photos (0=no maximum)\n\t * @return array            Array of photos\n\t */\n\tpublic function liste_photos($dir, $nbmax = 0)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$nbphoto = 0;\n\t\t$tabobj = array();\n\n\t\t$dir_osencoded = dol_osencode($dir);\n\t\t$handle = @opendir($dir_osencoded);\n\t\tif (is_resource($handle)) {\n\t\t\twhile (($file = readdir($handle)) !== false) {\n\t\t\t\tif (!utf8_check($file)) {\n\t\t\t\t\t$file = utf8_encode($file); // readdir returns ISO\n\t\t\t\t}\n\t\t\t\tif (dol_is_file($dir.$file) && image_format_supported($file) >= 0) {\n\t\t\t\t\t$nbphoto++;\n\n\t\t\t\t\t// We forge name of thumb.\n\t\t\t\t\t$photo = $file;\n\t\t\t\t\t$photo_vignette = '';\n\t\t\t\t\t$regs = array();\n\t\t\t\t\tif (preg_match('/('.$this->regeximgext.')$/i', $photo, $regs)) {\n\t\t\t\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $photo).'_small'.$regs[0];\n\t\t\t\t\t}\n\n\t\t\t\t\t$dirthumb = $dir.'thumbs/';\n\n\t\t\t\t\t// Objet\n\t\t\t\t\t$obj = array();\n\t\t\t\t\t$obj['photo'] = $photo;\n\t\t\t\t\tif ($photo_vignette && dol_is_file($dirthumb.$photo_vignette)) {\n\t\t\t\t\t\t$obj['photo_vignette'] = 'thumbs/'.$photo_vignette;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$obj['photo_vignette'] = \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\t$tabobj[$nbphoto - 1] = $obj;\n\n\t\t\t\t\t// Do we have to continue with next photo ?\n\t\t\t\t\tif ($nbmax && $nbphoto >= $nbmax) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclosedir($handle);\n\t\t}\n\n\t\treturn $tabobj;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Delete a photo and its thumbs\n\t *\n\t * @param  string $file \tPath to image file\n\t * @return void\n\t */\n\tpublic function delete_photo($file)\n\t{\n\t\t// phpcs:enable\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\n\n\t\t$dir = dirname($file).'/'; // Chemin du dossier contenant l'image d'origine\n\t\t$dirthumb = $dir.'/thumbs/'; // Chemin du dossier contenant la vignette\n\t\t$filename = preg_replace('/'.preg_quote($dir, '/').'/i', '', $file); // Nom du fichier\n\n\t\t// On efface l'image d'origine\n\t\tdol_delete_file($file, 0, 0, 0, $this); // For triggers\n\n\t\t// Si elle existe, on efface la vignette\n\t\tif (preg_match('/('.$this->regeximgext.')$/i', $filename, $regs)) {\n\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $filename).'_small'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette))) {\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\n\t\t\t$photo_vignette = preg_replace('/'.$regs[0].'/i', '', $filename).'_mini'.$regs[0];\n\t\t\tif (file_exists(dol_osencode($dirthumb.$photo_vignette))) {\n\t\t\t\tdol_delete_file($dirthumb.$photo_vignette);\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load size of image file\n\t *\n\t * @param  string $file Path to file\n\t * @return void\n\t */\n\tpublic function get_image_size($file)\n\t{\n\t\t// phpcs:enable\n\t\t$file_osencoded = dol_osencode($file);\n\t\t$infoImg = getimagesize($file_osencoded); // Get information on image\n\t\t$this->imgWidth = $infoImg[0]; // Largeur de l'image\n\t\t$this->imgHeight = $infoImg[1]; // Hauteur de l'image\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Load indicators this->nb for the dashboard\n\t *\n\t * @return int                 <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $hookmanager;\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(p.rowid) as nb, fk_product_type\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"product as p\";\n\t\t$sql .= ' WHERE p.entity IN ('.getEntity($this->element, 1).')';\n\t\t// Add where from hooks\n\t\tif (is_object($hookmanager)) {\n\t\t\t$parameters = array();\n\t\t\t$reshook = $hookmanager->executeHooks('printFieldListWhere', $parameters); // Note that $action and $object may have been modified by hook\n\t\t\t$sql .= $hookmanager->resPrint;\n\t\t}\n\t\t$sql .= ' GROUP BY fk_product_type';\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\tif ($obj->fk_product_type == 1) {\n\t\t\t\t\t$this->nb[\"services\"] = $obj->nb;\n\t\t\t\t} else {\n\t\t\t\t\t$this->nb[\"products\"] = $obj->nb;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return if object is a product\n\t *\n\t * @return boolean     True if it's a product\n\t */\n\tpublic function isProduct()\n\t{\n\t\treturn ($this->type == Product::TYPE_PRODUCT ? true : false);\n\t}\n\n\t/**\n\t * Return if object is a product\n\t *\n\t * @return boolean     True if it's a service\n\t */\n\tpublic function isService()\n\t{\n\t\treturn ($this->type == Product::TYPE_SERVICE ? true : false);\n\t}\n\n\n\t/**\n\t * Return if  object have a constraint on mandatory_period\n\t *\n\t * @return boolean     True if mandatory_period setted to 1\n\t */\n\tpublic function isMandatoryPeriod()\n\t{\n\t\treturn ($this->mandatory_period == 1 ? true : false);\n\t}\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Get a barcode from the module to generate barcode values.\n\t *  Return value is stored into this->barcode\n\t *\n\t * @param  Product $object Object product or service\n\t * @param  string  $type   Barcode type (ean, isbn, ...)\n\t * @return string\n\t */\n\tpublic function get_barcode($object, $type = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$result = '';\n\t\tif (!empty($conf->global->BARCODE_PRODUCT_ADDON_NUM)) {\n\t\t\t$dirsociete = array_merge(array('/core/modules/barcode/'), $conf->modules_parts['barcode']);\n\t\t\tforeach ($dirsociete as $dirroot) {\n\t\t\t\t$res = dol_include_once($dirroot.$conf->global->BARCODE_PRODUCT_ADDON_NUM.'.php');\n\t\t\t\tif ($res) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$var = $conf->global->BARCODE_PRODUCT_ADDON_NUM;\n\t\t\t$mod = new $var;\n\n\t\t\t$result = $mod->getNextValue($object, $type);\n\n\t\t\tdol_syslog(get_class($this).\"::get_barcode barcode=\".$result.\" module=\".$var);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *    id must be 0 if object instance is a specimen.\n\t *\n\t * @return void\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $user, $langs, $conf, $mysoc;\n\n\t\t$now = dol_now();\n\n\t\t// Initialize parameters\n\t\t$this->specimen = 1;\n\t\t$this->id = 0;\n\t\t$this->ref = 'PRODUCT_SPEC';\n\t\t$this->label = 'PRODUCT SPECIMEN';\n\t\t$this->description = 'This is description of this product specimen that was created the '.dol_print_date($now, 'dayhourlog').'.';\n\t\t$this->specimen = 1;\n\t\t$this->country_id = 1;\n\t\t$this->tosell = 1;\n\t\t$this->tobuy = 1;\n\t\t$this->tobatch = 0;\n\t\t$this->note = 'This is a comment (private)';\n\t\t$this->date_creation = $now;\n\t\t$this->date_modification = $now;\n\n\t\t$this->weight = 4;\n\t\t$this->weight_units = 3;\n\n\t\t$this->length = 5;\n\t\t$this->length_units = 1;\n\t\t$this->width = 6;\n\t\t$this->width_units = 0;\n\t\t$this->height = null;\n\t\t$this->height_units = null;\n\n\t\t$this->surface = 30;\n\t\t$this->surface_units = 0;\n\t\t$this->volume = 300;\n\t\t$this->volume_units = 0;\n\n\t\t$this->barcode = -1; // Create barcode automatically\n\t}\n\n\t/**\n\t *    Returns the text label from units dictionary\n\t *\n\t * @param  string $type Label type (long or short)\n\t * @return string|int <0 if ko, label if ok\n\t */\n\tpublic function getLabelOfUnit($type = 'long')\n\t{\n\t\tglobal $langs;\n\n\t\tif (!$this->fk_unit) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$langs->load('products');\n\n\t\t$label_type = 'label';\n\t\tif ($type == 'short') {\n\t\t\t$label_type = 'short_label';\n\t\t}\n\n\t\t$sql = \"SELECT \".$label_type.\", code from \".MAIN_DB_PREFIX.\"c_units where rowid = \".((int) $this->fk_unit);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql && $this->db->num_rows($resql) > 0) {\n\t\t\t$res = $this->db->fetch_array($resql);\n\t\t\t$label = ($label_type == 'short_label' ? $res[$label_type] : 'unit'.$res['code']);\n\t\t\t$this->db->free($resql);\n\t\t\treturn $label;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\tdol_syslog(get_class($this).\"::getLabelOfUnit Error \".$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return if object has a sell-by date or eat-by date\n\t *\n\t * @return boolean     True if it's has\n\t */\n\tpublic function hasbatch()\n\t{\n\t\treturn ($this->status_batch > 0 ? true : false);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return minimum product recommended price\n\t *\n\t * @return int            Minimum recommanded price that is higher price among all suppliers * PRODUCT_MINIMUM_RECOMMENDED_PRICE\n\t */\n\tpublic function min_recommended_price()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$maxpricesupplier = 0;\n\n\t\tif (!empty($conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/fourn/class/fournisseur.product.class.php';\n\t\t\t$product_fourn = new ProductFournisseur($this->db);\n\t\t\t$product_fourn_list = $product_fourn->list_product_fournisseur_price($this->id, '', '');\n\n\t\t\tif (is_array($product_fourn_list) && count($product_fourn_list) > 0) {\n\t\t\t\tforeach ($product_fourn_list as $productfourn) {\n\t\t\t\t\tif ($productfourn->fourn_unitprice > $maxpricesupplier) {\n\t\t\t\t\t\t$maxpricesupplier = $productfourn->fourn_unitprice;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$maxpricesupplier *= $conf->global->PRODUCT_MINIMUM_RECOMMENDED_PRICE;\n\t\t\t}\n\t\t}\n\n\t\treturn $maxpricesupplier;\n\t}\n\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param  int[]|int $categories Category or categories IDs\n\t * @return void\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\t\treturn parent::setCategoriesCommon($categories, Categorie::TYPE_PRODUCT);\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param  DoliDB $db        Database handler\n\t * @param  int    $origin_id Old thirdparty id\n\t * @param  int    $dest_id   New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'product_customer_price',\n\t\t\t'product_customer_price_log'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Generates prices for a product based on product multiprice generation rules\n\t *\n\t * @param  User   $user       User that updates the prices\n\t * @param  float  $baseprice  Base price\n\t * @param  string $price_type Base price type\n\t * @param  float  $price_vat  VAT % tax\n\t * @param  int    $npr        NPR\n\t * @param  string $psq        \u00bf?\n\t * @return int -1 KO, 1 OK\n\t */\n\tpublic function generateMultiprices(User $user, $baseprice, $price_type, $price_vat, $npr, $psq)\n\t{\n\t\tglobal $conf, $db;\n\n\t\t$sql = \"SELECT rowid, level, fk_level, var_percent, var_min_percent FROM \".MAIN_DB_PREFIX.\"product_pricerules\";\n\t\t$query = $this->db->query($sql);\n\n\t\t$rules = array();\n\n\t\twhile ($result = $this->db->fetch_object($query)) {\n\t\t\t$rules[$result->level] = $result;\n\t\t}\n\n\t\t//Because prices can be based on other level's prices, we temporarily store them\n\t\t$prices = array(\n\t\t\t1 => $baseprice\n\t\t);\n\n\t\tfor ($i = 1; $i <= $conf->global->PRODUIT_MULTIPRICES_LIMIT; $i++) {\n\t\t\t$price = $baseprice;\n\t\t\t$price_min = $baseprice;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\t//First price level only allows changing min_price\n\t\t\tif ($i > 1 && isset($rules[$i]->var_percent) && $rules[$i]->var_percent) {\n\t\t\t\t$price = $prices[$rules[$i]->fk_level] * (1 + ($rules[$i]->var_percent / 100));\n\t\t\t}\n\n\t\t\t$prices[$i] = $price;\n\n\t\t\t//We have to make sure it does exist and it is > 0\n\t\t\tif (isset($rules[$i]->var_min_percent) && $rules[$i]->var_min_percent) {\n\t\t\t\t$price_min = $price * (1 - ($rules[$i]->var_min_percent / 100));\n\t\t\t}\n\n\t\t\t//Little check to make sure the price is modified before triggering generation\n\t\t\t$check_amount = (($price == $this->multiprices[$i]) && ($price_min == $this->multiprices_min[$i]));\n\t\t\t$check_type = ($baseprice == $this->multiprices_base_type[$i]);\n\n\t\t\tif ($check_amount && $check_type) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ($this->updatePrice($price, $price_type, $user, $price_vat, $price_min, $i, $npr, $psq, true) < 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Returns the rights used for this class\n\t *\n\t * @return Object\n\t */\n\tpublic function getRights()\n\t{\n\t\tglobal $user;\n\n\t\tif ($this->isProduct()) {\n\t\t\treturn $user->rights->produit;\n\t\t} else {\n\t\t\treturn $user->rights->service;\n\t\t}\n\t}\n\n\t/**\n\t *  Load information for tab info\n\t *\n\t * @param  int $id Id of thirdparty to load\n\t * @return void\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = \"SELECT p.rowid, p.ref, p.datec as date_creation, p.tms as date_modification,\";\n\t\t$sql .= \" p.fk_user_author, p.fk_user_modif\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.$this->table_element.\" as p\";\n\t\t$sql .= \" WHERE p.rowid = \".((int) $id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\tif ($obj->fk_user_author) {\n\t\t\t\t\t$cuser = new User($this->db);\n\t\t\t\t\t$cuser->fetch($obj->fk_user_author);\n\t\t\t\t\t$this->user_creation = $cuser;\n\t\t\t\t}\n\n\t\t\t\tif ($obj->fk_user_modif) {\n\t\t\t\t\t$muser = new User($this->db);\n\t\t\t\t\t$muser->fetch($obj->fk_user_modif);\n\t\t\t\t\t$this->user_modification = $muser;\n\t\t\t\t}\n\n\t\t\t\t$this->ref = $obj->ref;\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->date_creation);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n}\n\n\n\n/**\n * Class to manage products or services.\n * Do not use 'Service' as class name since it is already used by APIs.\n */\nclass ProductService extends Product\n{\n\tpublic $picto = 'service';\n}\n"], "filenames": ["htdocs/product/card.php", "htdocs/product/class/product.class.php"], "buggy_code_start_loc": [1873, 862], "buggy_code_end_loc": [1907, 870], "fixing_code_start_loc": [1873, 863], "fixing_code_end_loc": [1907, 882], "type": "CWE-840", "message": "Business Logic Errors in Packagist dolibarr/dolibarr prior to 16.0.", "other": {"cve": {"id": "CVE-2022-0414", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-31T11:15:07.993", "lastModified": "2022-11-17T17:44:03.530", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in Packagist dolibarr/dolibarr prior to 16.0."}, {"lang": "es", "value": "Unos Errores de L\u00f3gica de Negocio en el paquete dolibarr/dolibarr versiones anteriores a 16.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-840"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:*:*:*:*:*:*:*", "versionEndExcluding": "16.0.0", "matchCriteriaId": "2A8BD8F5-3FDF-4FF2-8291-C5C9F6C2310A"}]}]}], "references": [{"url": "https://github.com/dolibarr/dolibarr/commit/37fb02ee760cfff18c795ba468da1ba1c53f4684", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/76f3b405-9f5d-44b1-8434-b52b56ee395f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dolibarr/dolibarr/commit/37fb02ee760cfff18c795ba468da1ba1c53f4684"}}