{"buggy_code": ["<?php\n\n/**\n * ViewFactory class.\n */\n\nnamespace Alltube\\Factory;\n\nuse Alltube\\LocaleManager;\nuse Junker\\DebugBar\\Bridge\\SmartyCollector;\nuse Psr\\Container\\ContainerInterface;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Uri;\nuse Slim\\Views\\Smarty;\nuse Slim\\Views\\SmartyPlugins;\nuse SmartyException;\n\n/**\n * Create Smarty view object.\n */\nclass ViewFactory\n{\n    /**\n     * Generate the canonical URL of the current page.\n     *\n     * @param Request $request PSR-7 Request\n     *\n     * @return string URL\n     */\n    private static function getCanonicalUrl(Request $request): string\n    {\n        /** @var Uri $uri */\n        $uri = $request->getUri();\n\n        return $uri->withBasePath('')\n            ->withHost('alltubedownload.net')\n            ->withScheme('https');\n    }\n\n    /**\n     * Create Smarty view object.\n     *\n     * @param ContainerInterface $container Slim dependency container\n     * @param Request|null $request PSR-7 request\n     *\n     * @return Smarty\n     * @throws SmartyException\n     */\n    public static function create(ContainerInterface $container, Request $request = null): Smarty\n    {\n        if (!isset($request)) {\n            $request = $container->get('request');\n        }\n\n        $view = new Smarty($container->get('root_path') . '/templates/');\n\n        /** @var Uri $uri */\n        $uri = $request->getUri();\n        if (in_array('https', $request->getHeader('X-Forwarded-Proto'))) {\n            $uri = $uri->withScheme('https')->withPort(443);\n        }\n\n        // set values from X-Forwarded-* headers\n        if ($host = current($request->getHeader('X-Forwarded-Host'))) {\n            $uri = $uri->withHost($host);\n        }\n\n        if ($port = current($request->getHeader('X-Forwarded-Port'))) {\n            $uri = $uri->withPort(intVal($port));\n        }\n\n        if ($path = current($request->getHeader('X-Forwarded-Path'))) {\n            $uri = $uri->withBasePath($path);\n        }\n\n        /** @var LocaleManager $localeManager */\n        $localeManager = $container->get('locale');\n\n        $smartyPlugins = new SmartyPlugins($container->get('router'), $uri->withUserInfo(''));\n        $view->registerPlugin('function', 'path_for', [$smartyPlugins, 'pathFor']);\n        $view->registerPlugin('function', 'base_url', [$smartyPlugins, 'baseUrl']);\n        $view->registerPlugin('block', 't', [$localeManager, 'smartyTranslate']);\n\n        $view->offsetSet('canonical', self::getCanonicalUrl($request));\n        $view->offsetSet('locale', $container->get('locale'));\n        $view->offsetSet('config', $container->get('config'));\n        $view->offsetSet('domain', $uri->withBasePath('')->getBaseUrl());\n\n        if ($container->has('debugbar')) {\n            $debugBar = $container->get('debugbar');\n\n            $debugBar->addCollector(new SmartyCollector($view->getSmarty()));\n\n            $view->offsetSet(\n                'debug_render',\n                $debugBar->getJavascriptRenderer(\n                    $uri->getBaseUrl() . '/vendor/maximebf/debugbar/src/DebugBar/Resources/'\n                )\n            );\n        }\n\n        return $view;\n    }\n}\n", "<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Alltube\\App;\nuse Alltube\\ErrorHandler;\n\nif (isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], '/index.php') !== false) {\n    header('Location: ' . str_ireplace('/index.php', '/', $_SERVER['REQUEST_URI']));\n    die;\n}\n\ntry {\n    // Create app.\n    $app = new App();\n\n    $app->run();\n} catch (Throwable $e) {\n    ErrorHandler::handle($e);\n}\n", "<h1 class=\"logobis\">\n    <a class=\"logocompatible\" href=\"{base_url}\">\n        <span class=\"logocompatiblemask\"><img src=\"{base_url}/img/logocompatiblemask.png\" width=\"447\" height=\"107\"\n                                              alt=\"{$config->appName}\"/></span>\n    </a></h1>\n"], "fixing_code": ["<?php\n\n/**\n * ViewFactory class.\n */\n\nnamespace Alltube\\Factory;\n\nuse Alltube\\LocaleManager;\nuse Junker\\DebugBar\\Bridge\\SmartyCollector;\nuse Psr\\Container\\ContainerInterface;\nuse Slim\\Http\\Request;\nuse Slim\\Http\\Uri;\nuse Slim\\Views\\Smarty;\nuse Slim\\Views\\SmartyPlugins;\nuse SmartyException;\n\n/**\n * Create Smarty view object.\n */\nclass ViewFactory\n{\n    /**\n     * Generate the canonical URL of the current page.\n     *\n     * @param Request $request PSR-7 Request\n     *\n     * @return string URL\n     */\n    private static function getCanonicalUrl(Request $request): string\n    {\n        /** @var Uri $uri */\n        $uri = $request->getUri();\n\n        return $uri->withBasePath('')\n            ->withHost('alltubedownload.net')\n            ->withScheme('https');\n    }\n\n    /**\n     * @param Uri $uri\n     * @return Uri\n     */\n    private static function cleanBasePath(Uri $uri): Uri\n    {\n        $basePath = $uri->getBasePath();\n        if (str_ends_with($basePath, 'index.php')) {\n            /*\n             * When the base path ends with index.php,\n             * routing works correctly, but it breaks the URL of static assets using {base_url}.\n             * So we alter the base path but only in the URI used by SmartyPlugins.\n             */\n            $uri = $uri->withBasePath(dirname($basePath));\n        }\n\n        return $uri;\n    }\n\n    /**\n     * Create Smarty view object.\n     *\n     * @param ContainerInterface $container Slim dependency container\n     * @param Request|null $request PSR-7 request\n     *\n     * @return Smarty\n     * @throws SmartyException\n     */\n    public static function create(ContainerInterface $container, Request $request = null): Smarty\n    {\n        if (!isset($request)) {\n            $request = $container->get('request');\n        }\n\n        $view = new Smarty($container->get('root_path') . '/templates/');\n\n        /** @var Uri $uri */\n        $uri = $request->getUri();\n        if (in_array('https', $request->getHeader('X-Forwarded-Proto'))) {\n            $uri = $uri->withScheme('https')->withPort(443);\n        }\n\n        // set values from X-Forwarded-* headers\n        if ($host = current($request->getHeader('X-Forwarded-Host'))) {\n            $uri = $uri->withHost($host);\n        }\n\n        if ($port = current($request->getHeader('X-Forwarded-Port'))) {\n            $uri = $uri->withPort(intVal($port));\n        }\n\n        if ($path = current($request->getHeader('X-Forwarded-Path'))) {\n            $uri = $uri->withBasePath($path);\n        }\n\n        /** @var LocaleManager $localeManager */\n        $localeManager = $container->get('locale');\n\n        $uri = self::cleanBasePath($uri);\n\n        $smartyPlugins = new SmartyPlugins($container->get('router'), $uri->withUserInfo(''));\n        $view->registerPlugin('function', 'path_for', [$smartyPlugins, 'pathFor']);\n        $view->registerPlugin('function', 'base_url', [$smartyPlugins, 'baseUrl']);\n        $view->registerPlugin('block', 't', [$localeManager, 'smartyTranslate']);\n\n        $view->offsetSet('canonical', self::getCanonicalUrl($request));\n        $view->offsetSet('locale', $container->get('locale'));\n        $view->offsetSet('config', $container->get('config'));\n        $view->offsetSet('domain', $uri->withBasePath('')->getBaseUrl());\n\n        if ($container->has('debugbar')) {\n            $debugBar = $container->get('debugbar');\n\n            $debugBar->addCollector(new SmartyCollector($view->getSmarty()));\n\n            $view->offsetSet(\n                'debug_render',\n                $debugBar->getJavascriptRenderer(\n                    $uri->getBaseUrl() . '/vendor/maximebf/debugbar/src/DebugBar/Resources/'\n                )\n            );\n        }\n\n        return $view;\n    }\n}\n", "<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Alltube\\App;\nuse Alltube\\ErrorHandler;\n\ntry {\n    // Create app.\n    $app = new App();\n\n    $app->run();\n} catch (Throwable $e) {\n    ErrorHandler::handle($e);\n}\n", "<h1 class=\"logobis\">\n    <a class=\"logocompatible\" href=\"{path_for name=\"index\"}\">\n        <span class=\"logocompatiblemask\"><img src=\"{base_url}/img/logocompatiblemask.png\" width=\"447\" height=\"107\"\n                                              alt=\"{$config->appName}\"/></span>\n    </a></h1>\n"], "filenames": ["classes/Factory/ViewFactory.php", "index.php", "templates/inc/logo.tpl"], "buggy_code_start_loc": [37, 7, 2], "buggy_code_end_loc": [78, 12, 3], "fixing_code_start_loc": [38, 6, 2], "fixing_code_end_loc": [100, 6, 3], "type": "CWE-601", "message": "Open Redirect on Rudloff/alltube in Packagist rudloff/alltube prior to 3.0.1.", "other": {"cve": {"id": "CVE-2022-0692", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-21T13:15:15.503", "lastModified": "2022-02-28T23:13:40.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Open Redirect on Rudloff/alltube in Packagist rudloff/alltube prior to 3.0.1."}, {"lang": "es", "value": "Un Redireccionamiento Abierto en Rudloff/alltube en Packagist rudloff/alltube versiones anteriores a 3.0.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alltube_project:alltube:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.1", "matchCriteriaId": "C8F0A1FE-4F4F-4A36-8BB8-C5F5A15D51CF"}]}]}], "references": [{"url": "https://github.com/rudloff/alltube/commit/bc14b6e45c766c05757fb607ef8d444cbbfba71a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/4fb39400-e08b-47af-8c1f-5093c9a51203", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rudloff/alltube/commit/bc14b6e45c766c05757fb607ef8d444cbbfba71a"}}