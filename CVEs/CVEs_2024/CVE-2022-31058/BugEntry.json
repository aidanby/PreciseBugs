{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2017 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\AgileDashboard\\FormElement;\n\nuse AgileDashboard_Semantic_InitialEffortFactory;\nuse EventManager;\nuse PFUser;\nuse Psr\\Log\\LoggerInterface;\nuse SystemEventManager;\nuse TemplateRendererFactory;\nuse Tracker_Artifact_Changeset;\nuse Tracker_Artifact_ChangesetFactoryBuilder;\nuse Tracker_Artifact_ChangesetValue;\nuse Tracker_ArtifactFactory;\nuse Tracker_FormElement_Chart_Field_Exception;\nuse Tracker_FormElement_Field;\nuse Tracker_FormElement_Field_ReadOnly;\nuse Tracker_FormElement_FieldVisitor;\nuse Tracker_FormElementFactory;\nuse Tracker_HierarchyFactory;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsCacheDao;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsCalculator;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsModeChecker;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\ProjectsCountModeDao;\nuse Tuleap\\AgileDashboard\\v1\\Artifact\\BurnupRepresentation;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\ChartCachedDaysComparator;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationFieldRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueChecker;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartFieldUsage;\nuse Tuleap\\Tracker\\FormElement\\ChartMessageFetcher;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneDao;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneFactory;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneValueChecker;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse UserManager;\n\nclass Burnup extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly, TrackerFormElementExternalField\n{\n    public const TYPE = 'burnup';\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitExternalField($this);\n    }\n\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new ViewAdminBurnupField($element, $used_element);\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    /**\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $field_usage = $this->getChartFieldUsage();\n\n        $html  = $this->getChartMessageFetcher()->fetchWarnings($this, $field_usage);\n        $html .= '<img src=\"' . AGILEDASHBOARD_BASE_URL . '/images/fake-burnup-admin.png\" />';\n\n        return $html;\n    }\n\n    private function getChartMessageFetcher()\n    {\n        return new ChartMessageFetcher(\n            Tracker_HierarchyFactory::instance(),\n            $this->getConfigurationFieldRetriever(),\n            EventManager::instance(),\n            UserManager::instance()\n        );\n    }\n\n    private function getConfigurationFieldRetriever()\n    {\n        return new ChartConfigurationFieldRetriever(\n            $this->getFormElementFactory(),\n            SemanticTimeframeBuilder::build(),\n            $this->getLogger()\n        );\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n    }\n\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n    }\n\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $user                      = UserManager::instance()->getCurrentUser();\n        $can_burnup_be_regenerated = $artifact->getTracker()->userIsAdmin($user);\n        $burnup_presenter          = $this->buildPresenter($artifact, $can_burnup_be_regenerated, $user);\n\n        $renderer = TemplateRendererFactory::build()->getRenderer(AGILEDASHBOARD_TEMPLATE_DIR);\n\n        return $renderer->renderToString('formelement/burnup-field', $burnup_presenter);\n    }\n\n    public function buildPresenter(Artifact $artifact, $can_burnup_be_regenerated, PFUser $user)\n    {\n        $warning     = \"\";\n        $burnup_data = null;\n        try {\n            $burnup_data = $this->getBurnupDataBuilder()->buildBurnupData($artifact, $user);\n\n            if ($burnup_data->isBeingCalculated()) {\n                $warning = dgettext(\n                    'tuleap-agiledashboard',\n                    \"Burnup is under calculation. It will be available in few minutes.\"\n                );\n            }\n        } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n            $warning = $e->getMessage();\n        }\n\n        $include_assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/agiledashboard'\n        );\n        $GLOBALS['HTML']->includeFooterJavascriptFile($include_assets->getFileURL('burnup-chart.js'));\n\n        $capacity              = $this->getConfigurationValueRetriever()->getCapacity($artifact, $user);\n        $burnup_representation = new BurnupRepresentation($capacity, $burnup_data);\n        $css_file_url          = $include_assets->getFileURL('burnup-chart.css');\n\n        return new BurnupFieldPresenter(\n            $this->getCountElementsModeChecker(),\n            $burnup_representation,\n            $artifact,\n            $can_burnup_be_regenerated,\n            $css_file_url,\n            $user->getLocale(),\n            $warning\n        );\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n    }\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n    }\n\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n    }\n\n    protected function getDao()\n    {\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the burnup chart for the artifact');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burnup--plus.png');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burnup.png');\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-agiledashboard', 'Burnup Chart');\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    public function getQueryFrom()\n    {\n    }\n\n    public function getQuerySelect()\n    {\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact = $changeset->getArtifact();\n        try {\n            $burnup_data = $this->getBurnupDataBuilder()->buildBurnupData($artifact, $user);\n        } catch (Tracker_FormElement_Chart_Field_Exception $ex) {\n            $burnup_data = null;\n        }\n        $capacity = null;\n        if ($this->getConfigurationFieldRetriever()->doesCapacityFieldExist($artifact->getTracker())) {\n            $capacity = $this->getConfigurationValueRetriever()->getCapacity($artifact, $user);\n        }\n\n        $burnup_representation = new BurnupRepresentation($capacity, $burnup_data);\n        $formelement_field     = $this->getFormElementFactory()->getFormElementById($this->getId());\n\n        $field_representation = new ArtifactFieldValueFullRepresentation();\n        $field_representation->build($this->getId(), $this->getFormElementFactory()->getType($formelement_field), $this->getLabel(), $burnup_representation);\n\n        return $field_representation;\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    protected function getValueDao()\n    {\n    }\n\n    protected function keepValue(\n        $artifact,\n        $changeset_value_id,\n        Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n    ) {\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    public function testImport()\n    {\n        return true;\n    }\n\n    /**\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * @return ChartFieldUsage\n     */\n    private function getChartFieldUsage()\n    {\n        $use_start_date       = true;\n        $use_duration         = true;\n        $use_capacity         = true;\n        $use_hierarchy        = false;\n        $use_remaining_effort = false;\n\n        return new ChartFieldUsage(\n            $use_start_date,\n            $use_duration,\n            $use_capacity,\n            $use_hierarchy,\n            $use_remaining_effort\n        );\n    }\n\n    /**\n     * @return BurnupDataBuilder\n     */\n    private function getBurnupDataBuilder()\n    {\n        $burnup_cache_dao = new BurnupCacheDao();\n\n        return new BurnupDataBuilder(\n            $this->getLogger(),\n            new BurnupCacheChecker(\n                new BurnupCacheGenerator(\n                    SystemEventManager::instance()\n                ),\n                new ChartConfigurationValueChecker(\n                    $this->getConfigurationFieldRetriever(),\n                    $this->getConfigurationValueRetriever()\n                ),\n                $burnup_cache_dao,\n                new ChartCachedDaysComparator($this->getLogger())\n            ),\n            $this->getConfigurationValueRetriever(),\n            $burnup_cache_dao,\n            $this->getBurnupCalculator(),\n            new CountElementsCacheDao(),\n            new CountElementsCalculator(\n                Tracker_Artifact_ChangesetFactoryBuilder::build(),\n                Tracker_ArtifactFactory::instance(),\n                Tracker_FormElementFactory::instance(),\n                new BurnupDao()\n            ),\n            $this->getCountElementsModeChecker()\n        );\n    }\n\n    /**\n     * @return BurnupCalculator\n     */\n    private function getBurnupCalculator()\n    {\n        $changeset_factory = Tracker_Artifact_ChangesetFactoryBuilder::build();\n\n        return new BurnupCalculator(\n            $changeset_factory,\n            Tracker_ArtifactFactory::instance(),\n            new BurnupDao(),\n            AgileDashboard_Semantic_InitialEffortFactory::instance(),\n            new SemanticDoneFactory(new SemanticDoneDao(), new SemanticDoneValueChecker())\n        );\n    }\n\n    private function getLogger(): LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger('burnup_syslog');\n    }\n\n    /**\n     * @return ChartConfigurationValueRetriever\n     */\n    private function getConfigurationValueRetriever()\n    {\n        $semantic_timeframe = SemanticTimeframeBuilder::build()->getSemantic($this->getTracker());\n\n        return new ChartConfigurationValueRetriever(\n            $this->getConfigurationFieldRetriever(),\n            $semantic_timeframe->getTimeframeCalculator(),\n            $this->getLogger()\n        );\n    }\n\n    private function getCountElementsModeChecker(): CountElementsModeChecker\n    {\n        return new CountElementsModeChecker(new ProjectsCountModeDao());\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\TestManagement\\Step\\Execution\\Field;\n\nuse Codendi_HTMLPurifier;\nuse TemplateRendererFactory;\nuse Tracker_Artifact_ChangesetValue;\nuse Tracker_FormElement_Field;\nuse Tracker_FormElement_FieldVisitor;\nuse Tuleap\\TestManagement\\Step\\Execution\\StepResult;\nuse Tuleap\\TestManagement\\Step\\Execution\\StepResultPresenter;\nuse Tuleap\\TestManagement\\Step\\Step;\nuse Tuleap\\TestManagement\\Step\\StepPresenter;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\n\nclass StepExecution extends Tracker_FormElement_Field implements TrackerFormElementExternalField\n{\n    public const TYPE             = 'ttmstepexec';\n    public const UPDATE_VALUE_KEY = 'steps_results';\n\n    /**\n     * @return void\n     */\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        $visitor->visitExternalField($this);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-testmanagement', 'Step execution');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-testmanagement', 'Execution result of a step');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return TESTMANAGEMENT_BASE_URL . '/images/ic/tick-circle.png';\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return TESTMANAGEMENT_BASE_URL . '/images/ic/tick-circle--plus.png';\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    protected function fetchAdminFormElement()\n    {\n        return '<ol><li><span>First step definition</span> <span class=\"label\">passed</span></li></ol>';\n    }\n\n    /**\n     * @return null\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return false\n     */\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    /**\n     * @return false\n     */\n    public function canBeUsedAsReportColumn()\n    {\n        return false;\n    }\n\n    /**\n     * @param mixed $criteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return null;\n    }\n\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"alert\">'\n            . dgettext(\n                'tuleap-testmanagement',\n                'Direct edition of steps results is not allowed. Please use TestManagement service instead.'\n            )\n            . '</div>'\n            . $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $renderer = TemplateRendererFactory::build()->getRenderer(TESTMANAGEMENT_BASE_DIR . '/templates');\n\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $no_value_label = $this->getNoValueLabel();\n\n        return $renderer->renderToString(\n            'step-exec-readonly',\n            [\n                'steps'                   => $this->getStepResultPresentersFromChangesetValue($value),\n                'purified_no_value_label' => $purifier->purify($no_value_label, CODENDI_PURIFIER_FULL),\n            ]\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        array $submitted_values = [],\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        return '';\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '';\n    }\n\n    public function fetchAddTooltip($used, $prefix = '')\n    {\n        return '';\n    }\n\n    /**\n     * @return StepExecutionChangesetValueDao\n     */\n    protected function getValueDao()\n    {\n        return new StepExecutionChangesetValueDao();\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function hasChanges(\n        Artifact $artifact,\n        Tracker_Artifact_ChangesetValue $old_value,\n        $new_value,\n    ) {\n        $old_values = [];\n        /** @var StepResult[] $old_steps */\n        $old_steps = $old_value->getValue();\n        foreach ($old_steps as $step_result) {\n            $old_values[$step_result->getStep()->getId()] = $step_result->getStatus();\n        }\n        $new_values = $new_value[self::UPDATE_VALUE_KEY];\n\n        return array_diff_assoc($new_values, $old_values) !== [] || array_diff_assoc($old_values, $new_values) !== [];\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value[self::UPDATE_VALUE_KEY]);\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $steps = [];\n        foreach ($this->getValueDao()->searchById($value_id) as $row) {\n            $step = new Step(\n                $row['id'],\n                $row['description'],\n                $row['description_format'],\n                $row['expected_results'],\n                $row['expected_results_format'],\n                $row['rank']\n            );\n\n            $steps[] = new StepResult($step, $row['status']);\n        }\n\n        return new StepExecutionChangesetValue($value_id, $changeset, $this, $has_changed, $steps);\n    }\n\n    /**\n     * @param null $from_aid\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n        return '';\n    }\n\n    /**\n     * @return ViewAdmin\n     */\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new ViewAdmin($element, $used_element);\n    }\n\n    /**\n     *\n     * @return StepResultPresenter[]\n     */\n    private function getStepResultPresentersFromChangesetValue(?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $step_results = [];\n        if ($value) {\n            $step_results = $value->getValue();\n        }\n\n        $tracker = $this->getTracker();\n        if (! $tracker) {\n            return [];\n        }\n\n        return array_map(\n            static function (StepResult $step_result) use ($tracker) {\n                $step_presenter = new StepPresenter($step_result->getStep(), $tracker->getProject());\n\n                return new StepResultPresenter($step_presenter, $step_result);\n            },\n            $step_results\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\XMLCriteriaValueCache;\nuse Tuleap\\Tracker\\Rule\\TrackerRulesDateValidator;\nuse Tuleap\\Tracker\\Rule\\TrackerRulesListValidator;\nuse Tuleap\\Tracker\\Semantic\\CollectionOfSemanticsUsingAParticularTrackerField;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldDetector;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldsDao;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldsRetriever;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\SimpleWorkflowDao;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\StateFactory;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\TransitionExtractor;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\TransitionRetriever;\n\n/**\n * The base class for fields in trackers. From int and string to selectboxes.\n * Composite fields are excluded.\n */\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field extends Tracker_FormElement implements Tracker_Report_Field, Tracker_FormElement_IAcceptFieldVisitor\n{\n    protected $has_errors = false;\n\n    /**\n     * Display the field value as a criteria\n     * @return string\n     * @see fetchCriteria\n     */\n    abstract public function fetchCriteriaValue($criteria);\n\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * Please override this method for specific field (if needed)\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string the value of the field for artifact_id and changeset_id, formatted for CSV\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchChangesetValue($artifact_id, $changeset_id, $value, $report);\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    abstract public function fetchRawValue($value);\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     */\n    abstract public function getCriteriaFrom($criteria);\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     * @see getCriteriaFrom\n     */\n    abstract public function getCriteriaWhere($criteria);\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao|null\n     */\n    abstract protected function getCriteriaDao();\n\n    protected $criteria_value;\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (! isset($this->criteria_value[$criteria->getReport()->getId()])) {\n            $this->criteria_value[$criteria->getReport()->getId()] = null;\n            $dao                                                   = $this->getCriteriaDao();\n            if ($dao && $v = $dao->searchByCriteriaId($criteria->id)->getRow()) {\n                $this->criteria_value[$criteria->getReport()->getId()] = $v['value'];\n            }\n        }\n        return $this->criteria_value[$criteria->getReport()->getId()];\n    }\n\n    public function setCriteriaValue($criteria_value, $report_id)\n    {\n        $this->criteria_value[$report_id] = $criteria_value;\n    }\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $value    = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        if ($operator !== Tracker_Report_REST::OPERATOR_CONTAINS) {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Unallowed operator for criterion field '$this->name' ($this->id). Allowed operators: [\" . Tracker_Report_REST::OPERATOR_CONTAINS . \"]\");\n        }\n\n        if (! is_string($value) && ! is_numeric($value)) {\n            throw new Tracker_Report_InvalidRESTCriterionException('Invalid value for field \"' . $this->name . '\"');\n        }\n\n        $this->setCriteriaValue($value, $criteria->report->id);\n        return true;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        return $value;\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if ((string) $criteria_value !== '') {\n            $cdata_factory = new XML_SimpleXMLCDATAFactory();\n            $cdata_factory->insertWithAttributes(\n                $xml_criteria,\n                'criteria_value',\n                (string) $criteria_value,\n                ['type' => 'text']\n            );\n        }\n    }\n\n    public function setCriteriaValueFromXML(\n        Tracker_Report_Criteria $criteria,\n        SimpleXMLElement $xml_criteria_value,\n        array $xml_field_mapping,\n    ) {\n        if ((string) $xml_criteria_value['type'] !== 'text') {\n            return;\n        }\n        $string_value = (string) $xml_criteria_value;\n\n        $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n        $cache->set($criteria->getReport()->getId(), $string_value);\n    }\n\n    public function saveCriteriaValueFromXML(Tracker_Report_Criteria $criteria)\n    {\n        $report_id = $criteria->getReport()->getId();\n        $cache     = XMLCriteriaValueCache::instance(spl_object_id($this));\n\n        if (! $cache->has($report_id)) {\n            return;\n        }\n\n        $value = $cache->get($criteria->getReport()->getId());\n        $this->updateCriteriaValue($criteria, $value);\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        $R = 'R_' . $this->id;\n        return \"$R.value_id AS `\" . $this->name . \"`\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        $R = 'R_' . $this->id;\n        return \"INNER JOIN tracker_changeset_value AS $R ON ($R.changeset_id = c.id)\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        return '`' . $this->name . '`';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R = 'R_' . $this->id;\n        return \"$R.value_id\";\n    }\n\n    public function fetchCriteria(Tracker_Report_Criteria $criteria)\n    {\n        return $this->buildReportCriteria($criteria, $this->criteriaCanBeAdvanced());\n    }\n\n    public function fetchCriteriaWithoutExpandFunctionnality(Tracker_Report_Criteria $criteria)\n    {\n        return $this->buildReportCriteria($criteria, false);\n    }\n\n    private function buildReportCriteria(Tracker_Report_Criteria $criteria, $advanced_criteria)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if ($advanced_criteria) {\n            $html .= '<table cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>';\n            $html .= $GLOBALS['HTML']->getImage(\n                'ic/toggle_' . ($criteria->is_advanced ? 'minus' : 'plus' ) . '.png',\n                ['class' => 'tracker_report_criteria_advanced_toggle']\n            );\n            $html .= '</td><td>';\n        }\n        $html .= '<label for=\"tracker_report_criteria_' . $purifier->purify($this->id) . '\" title=\"#' .\n            $purifier->purify($this->id) . '\">' . $purifier->purify($this->getLabel());\n        $html .= '<input type=\"hidden\" id=\"tracker_report_criteria_' . $purifier->purify($this->id) .\n            '_parent\" value=\"' . $purifier->purify($this->parent_id) . '\" />';\n        $html .= '</label>';\n\n        if ($advanced_criteria) {\n            $html .=  '<div class=\"tracker_report_criteria\">';\n        }\n        $html .= $this->fetchCriteriaValue($criteria);\n        if ($advanced_criteria) {\n            $html .= '</div></td></tr></tbody></table>';\n        }\n        return $html;\n    }\n\n    /**\n     * Return the fieldset of this field\n     * @return Tracker_FormElement_Field|null\n     */\n    public function getParent()\n    {\n        return Tracker_FormElementFactory::instance()->getFieldById($this->parent_id);\n    }\n\n    /**\n     * Add some additionnal information beside the field in the artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @param $value the changeset value\n     *\n     * @return string\n     */\n    public function fetchArtifactAdditionnalInfo(?Tracker_Artifact_ChangesetValue $value, array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Add some additionnal information beside the field in the submit new artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchSubmitAdditionnalInfo(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        return $this->getValueDao()->delete($changeset_value_id);\n    }\n\n    /**\n     * Delete the criteria value\n     * @param Criteria $criteria the corresponding criteria\n     */\n    public function deleteCriteriaValue($criteria)\n    {\n        $this->getCriteriaDao()->delete($criteria->report->id, $criteria->id);\n        return $this;\n    }\n\n    /**\n     * Update the criteria value\n     * @param Tracker_Report_Criteria $criteria\n     * @param mixed $value\n     */\n    public function updateCriteriaValue($criteria, $value)\n    {\n        $dao = $this->getCriteriaDao();\n        if ($dao === null) {\n            return;\n        }\n        $dao->save($criteria->id, $value);\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return false;\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        return false;\n    }\n    public function getQueryFromAggregate()\n    {\n        return $this->getQueryFrom();\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Get the html code to display the field for the given artifact\n     *\n     *\n     * @return string html\n     */\n    public function fetchArtifact(\n        Artifact $artifact,\n        array $submitted_values,\n        array $additional_classes,\n    ) {\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            $last_changeset = $artifact->getLastChangeset();\n            if ($last_changeset) {\n                $value       = $last_changeset->getValue($this);\n                $html_value  = $this->fetchArtifactValue($artifact, $value, $submitted_values);\n                $html_value .= $this->fetchArtifactAdditionnalInfo($value, $submitted_values);\n                return $this->fetchArtifactField($artifact, $html_value, $additional_classes);\n            }\n            return '';\n        }\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifact($artifact, $submitted_values, ['field-in-modal']);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return $this->fetchSubmit($submitted_values);\n    }\n\n    /**\n     * Get the html code to display the field for the given artifact in read only mode\n     *\n     *\n     * @return string html\n     */\n    public function fetchArtifactReadOnly(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value       = $last_changeset->getValue($this);\n            $html_value  = $this->fetchArtifactValueForWebDisplay($artifact, $value, $submitted_values);\n            $html_value .= $this->fetchArtifactAdditionnalInfo($value, $submitted_values);\n            return $this->fetchArtifactField($artifact, $html_value, []);\n        }\n        return '';\n    }\n\n    /**\n     * @see Tracker_FormElement::fetchArtifactCopyMode\n     */\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    /**\n     * @param string           $html_value in html\n     *\n     * @return string html\n     */\n    private function fetchArtifactField(Artifact $artifact, $html_value, array $additional_classes)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if ($this->userCanRead()) {\n            $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n            $required           = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html              .= '<div class=\"' . $this->getClassNames($additional_classes, $is_field_read_only) . '\"\n                data-field-id=\"' . $this->id . '\"\n                data-test=\"tracker-artifact-value-' . $this->getName() . '\"\n                data-is-required=\"' . ($this->required ? 'true' : 'false') . '\">';\n\n            if (! $is_field_read_only && $this->userCanUpdate()) {\n                $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n                $html .= '<button type=\"button\" title=\"' . $title . '\"\n                                class=\"tracker_formelement_edit\"\n                                data-test=\"edit-field-' . $this->getName() . '\">' .\n                    $purifier->purify($this->getLabel()) . $required .\n                    '</button>';\n            }\n\n            $html .= '<label id=\"tracker_artifact_' . $this->id . '\" for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) . '\" class=\"tracker_formelement_label\">' .  $purifier->purify($this->getLabel())  . $required . '</label>';\n\n            $html .= $html_value;\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function fetchMailArtifact($recipient, Artifact $artifact, $format = 'text', $ignore_perms = false)\n    {\n        if (! $ignore_perms && ! $this->userCanRead($recipient)) {\n            return '';\n        }\n\n        $value                = $artifact->getLastChangeset()->getValue($this);\n        $mail_formatted_value = $this->fetchMailArtifactValue($artifact, $recipient, $ignore_perms, $value, $format);\n\n        if ($format == 'text') {\n            $output = ' * ' . $this->getLabel() . ' : ' . $mail_formatted_value;\n        } else {\n            $hp     = Codendi_HTMLPurifier::instance();\n            $output = '<tr>\n                <td valign=\"top\" align=\"left\" >\n                    <label id = \"tracker_artifact_' . $this->id . '\"\n                        for = \"tracker_artifact_' . $this->id . '\"\n                        title = \"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"\n                        class = \"tracker_formelement_label\"\n                    >\n                        <b>' .\n                            $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML) . '\n                        </b>\n                    </label>\n                </td>\n                <td align = \"left\">' .\n                    $mail_formatted_value . '\n                </td>\n            </tr>';\n        }\n        return $output;\n    }\n\n\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanSubmit()) {\n            $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html    .= '<div class=\"' . $this->getClassNamesForSubmit() . '\"\n                data-field-id=\"' . $this->id . '\"\n                data-is-required=\"' . ($this->required ? 'true' : 'false') . '\">';\n            $html    .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"  class=\"tracker_formelement_label\">' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . $required . '</label>';\n\n            $html .= $this->fetchSubmitValue($submitted_values);\n            $html .= $this->fetchSubmitAdditionnalInfo($submitted_values);\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    protected function getTargetFieldsIds(): array\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return [];\n        }\n\n        $tracker_formelement_factory = Tracker_FormElementFactory::instance();\n        $tracker_rules_manager       = new Tracker_RulesManager(\n            $tracker,\n            $tracker_formelement_factory,\n            new FrozenFieldsDao(),\n            new TrackerRulesListValidator($tracker_formelement_factory),\n            new TrackerRulesDateValidator($tracker_formelement_factory),\n            TrackerFactory::instance()\n        );\n        return $tracker_rules_manager->getFieldTargets($this);\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanUpdate()) {\n            $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html    .= '<div class=\"field-masschange ' . $this->getClassNames([], false) . '\">';\n            $html    .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"  class=\"tracker_formelement_label\">' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . $required . '</label>';\n\n            $html .= $this->fetchSubmitValueMasschange();\n            $html .= $this->fetchSubmitAdditionnalInfo([]);\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    private function getClassNames(array $additional_classes, bool $is_field_read_only)\n    {\n        $classnames  = 'tracker_artifact_field';\n        $classnames .= ' tracker_artifact_field-' . $this->getFormElementFactory()->getType($this);\n        if ($this->has_errors) {\n            $classnames .= ' has_errors';\n        }\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            $classnames .= ' editable';\n        }\n\n        foreach ($additional_classes as $additional_class) {\n            $classnames .= \" $additional_class\";\n        }\n\n        return $classnames;\n    }\n\n    private function getClassNamesForSubmit()\n    {\n        $classnames  = 'tracker_artifact_field';\n        $classnames .= ' tracker_artifact_field-' . $this->getFormElementFactory()->getType($this);\n        if ($this->has_errors) {\n            $classnames .= ' has_errors';\n        }\n\n        return $classnames;\n    }\n\n    /**\n     * Get the html code to display the field in a tooltip\n     *\n     * @param Artifact $artifact\n     *\n     * @return string html\n     */\n    public function fetchTooltip($artifact)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanRead()) {\n            $html .= '<tr><td>';\n            $html .= '<label>' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML) . '</label>';\n            $html .= '</td><td>';\n            $value = $artifact->getLastChangeset()->getValue($this);\n            $html .= $this->fetchTooltipValue($artifact, $value);\n            $html .= '</td></tr>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @return string\n     */\n    abstract protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    );\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    abstract public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null);\n\n    /**\n     * Fetch the HMTL code to display the field in the web browser\n     *\n     * @return string\n     */\n    public function fetchArtifactValueForWebDisplay(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n        }\n\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    protected function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    protected function getNoValueLabel()\n    {\n        return \"<span class='empty_value'>\" . dgettext('tuleap-tracker', 'Empty') . \"</span>\";\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' .\n            $this->getId() . '\">' .\n            $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            '</div>';\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    abstract protected function fetchSubmitValue(array $submitted_values);\n\n    /**\n     * Return a value from user submitted request (if any) or from default value (if any)\n     *\n     * @return mixed\n     */\n    protected function getValueFromSubmitOrDefault(array $submitted_values)\n    {\n        $value = '';\n        if (isset($submitted_values[$this->getId()])) {\n            $value = $submitted_values[$this->getId()];\n        } elseif ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        return $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    abstract protected function fetchSubmitValueMasschange();\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     * @return string\n     */\n    abstract protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null);\n\n    /**\n     * Fetch the html code to display the field value in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        return $this->fetchTooltipValue($artifact, $artifact->getLastChangeset()->getValue($this));\n    }\n\n    /**\n     * Fetch the html code to display the field in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCard(Artifact $artifact, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        $value           = $this->fetchCardValue($artifact, $display_preferences);\n        $data_field_id   = '';\n        $data_field_type = '';\n\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($this->userCanUpdate() && ! $is_field_frozen) {\n            $data_field_id   = 'data-field-id=\"' . $purifier->purify($this->getId()) . '\"';\n            $data_field_type = 'data-field-type=\"' . $purifier->purify($this->getFormElementFactory()->getType($this)) . '\"';\n        }\n\n        $html = '<tr>\n                    <td>' . $purifier->purify($this->getLabel()) . ':\n                    </td>\n                    <td class=\"valueOf_' . $purifier->purify($this->getName()) . '\"' .\n                        $data_field_id .\n                        $data_field_type .\n                        '>' .\n                        $value .\n                    '</td>\n                </tr>';\n\n        return $html;\n    }\n\n    /**\n     * Get the value corresponding to the $value_id\n     * @param int $value_id\n     * @return array\n     */\n    public function getValue($value_id)\n    {\n        return $this->getValueDao()->searchById($value_id, $this->id)->getRow();\n    }\n\n    abstract protected function getValueDao();\n\n    /**\n     * Returns null because a Field object is not of the type FieldComposite\n     *\n     * @return null\n     */\n    public function getFields()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    abstract public function fetchRawValueFromChangeset($changeset);\n\n    public function fetchAdmin($tracker)\n    {\n        $hp       = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $usage_in_semantics = $this->getUsagesInSemantics();\n\n        $html         .= '<div class=\"tracker-admin-field\" id=\"tracker-admin-formElements_' . $this->id . '\">';\n        $html         .= '<div class=\"tracker-admin-field-controls\">';\n                $html .= '<a class=\"edit-field\" href=\"' . $this->getAdminEditUrl() . '\">' . $GLOBALS['HTML']->getImage('ic/edit.png', ['alt' => 'edit']) . '</a> ';\n        if ($usage_in_semantics->areThereSemanticsUsingField() === false && $this->canBeRemovedFromUsage()) {\n            $html .= '<a href=\"?' . http_build_query([\n                'tracker'  => $tracker->id,\n                'func'     => 'admin-formElement-remove',\n                'formElement'    => $this->id,\n            ]) . '\">' . $GLOBALS['HTML']->getImage('ic/cross.png', ['alt' => 'remove']) . '</a>';\n        } else {\n            $cannot_remove_message = $usage_in_semantics->getUsages() . ' ' . $this->getCannotRemoveMessage();\n            $html                 .= '<span style=\"color:gray;\" title=\"' . $cannot_remove_message . '\">';\n            $html                 .= $GLOBALS['HTML']->getImage('ic/cross-disabled.png', ['alt' => 'remove']);\n            $html                 .= '</span>';\n        }\n        $html .= '</div>';\n\n        $html .= '<label title=\"' . $hp->purify($this->description) . '\" class=\"tracker_formelement_label\">' .\n            $hp->purify($this->getLabel()) . $required . '</label>';\n        $html .= $this->fetchAdminFormElement();\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return false;\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return false;\n    }\n\n    /**\n     * Fetch the \"add criteria\" box\n     *\n     * @param array $used Current used fields as criteria.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddCriteria($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $class    = 'tracker_report_add_criteria_unused';\n        if (isset($used[$this->id])) {\n            $class = 'tracker_report_add_criteria_used';\n        }\n        $html .= '<option value=\"' . $this->id . '\" class=\"' . $class . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        return $html;\n    }\n\n    /**\n     * Fetch the \"add column\" box in table renderer\n     *\n     * @param array $used Current used fields as column.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddColumn($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $class    = 'tracker_report_table_add_column_unused';\n        if (isset($used[$this->id])) {\n            $class = 'tracker_report_table_add_column_used';\n        }\n        $html .= '<option value=\"' . $this->id . '\" class=\"' . $class . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        return $html;\n    }\n\n    /**\n     * Fetch the \"add tooltip\" box in admin\n     *\n     * @param array $used Current used fields as column.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddTooltip($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if (! isset($used[$this->id])) {\n            $html .= '<option value=\"' . $this->id . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        }\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    public function getUsagesInSemantics(): CollectionOfSemanticsUsingAParticularTrackerField\n    {\n        $sm = new Tracker_SemanticManager($this->getTracker());\n        return $sm->getSemanticsTheFieldBelongsTo($this);\n    }\n\n    /**\n     * Is the field used in workflow?\n     *\n     * @return bool returns true if the field is used in workflow, false otherwise\n     */\n    public function isUsedInWorkflow()\n    {\n        return $this->getWorkflowFactory()->isFieldUsedInWorkflow($this);\n    }\n\n    /** @return WorkflowFactory */\n    protected function getWorkflowFactory()\n    {\n        return WorkflowFactory::instance();\n    }\n\n     /**\n     * Is the field used in a field dependency?\n     *\n     * @return bool returns true if the field is used in field dependency, false otherwise\n     */\n    public function isUsedInFieldDependency()\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return false;\n        }\n\n        $tracker_formelement_factory = Tracker_FormElementFactory::instance();\n        $tracker_rules_manager       = new Tracker_RulesManager(\n            $tracker,\n            $tracker_formelement_factory,\n            new FrozenFieldsDao(),\n            new TrackerRulesListValidator($tracker_formelement_factory),\n            new TrackerRulesDateValidator($tracker_formelement_factory),\n            TrackerFactory::instance()\n        );\n        return $tracker_rules_manager->isUsedInFieldDependency($this);\n    }\n\n    /**\n     * Is the form element can be removed from usage?\n     * This method is to prevent tracker inconsistency\n     *\n     * @return string returns null if the field can be unused, a message otherwise\n     */\n    public function getCannotRemoveMessage()\n    {\n        $message = '';\n\n        if ($this->isUsedInWorkflow()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (used in workflow)') . ' ';\n        }\n\n        if ($this->isUsedInTrigger()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (used in triggers)') . ' ';\n        }\n\n        if ($this->isUsedInFieldDependency()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (field dependencies)') . ' ';\n        }\n\n        return $message;\n    }\n\n    /**\n     *\n     * @return bool\n     */\n    public function canBeRemovedFromUsage()\n    {\n        $is_used = $this->isUsedInWorkflow() ||\n            $this->isUsedInFieldDependency() ||\n            $this->isUsedInTrigger();\n\n        if ($is_used === true) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @return bool true if the field is considered to be required\n     */\n    public function isRequired()\n    {\n        return $this->required;\n    }\n\n    /**\n     * Validate a field and check perms and if it has a value if it is required\n     *\n     * @param mixed                           $submitted_value      The submitted value\n     * @param bool $is_submission true if artifact submission, false if artifact update\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(Artifact $artifact, $submitted_value, PFUser $user, ?Tracker_Artifact_ChangesetValue $last_changeset_value = null, ?bool $is_submission = null)\n    {\n        $is_valid      = true;\n        $hasPermission = $this->userCanUpdate($user);\n        if ($is_submission) {\n            $hasPermission = $this->userCanSubmit($user);\n        }\n        if ($last_changeset_value === null && ((! is_array($submitted_value) && $submitted_value === null) || (is_array($submitted_value) && empty($submitted_value))) && $hasPermission && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif (((! is_array($submitted_value) && $submitted_value !== null) || (is_array($submitted_value) && ! empty($submitted_value))) && ! $hasPermission) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'You are not allowed to update the field %1$s.'), $this->getLabel()));\n        } elseif ($submitted_value !== null && $hasPermission) {\n            $is_valid = $this->isValidRegardingRequiredProperty($artifact, $submitted_value) && $this->validateField($artifact, $submitted_value);\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if (($submitted_value === null || $submitted_value === '') && $this->isRequired()) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function addRequiredError()\n    {\n        $this->has_errors = true;\n        $GLOBALS['Response']->addFeedback(\n            'error',\n            sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')')\n        );\n    }\n\n    /**\n     * Validate a field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateField(Artifact $artifact, $submitted_value)\n    {\n        $is_valid = true;\n        if ($submitted_value !== null) {\n            $is_valid = $this->isValid($artifact, $submitted_value);\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! ($this->validate($artifact, $value));\n\n        return (! $this->has_errors);\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return ($value === null || $value === '');\n    }\n\n    /**\n     * @return bool true if the field has errors. Default is false\n     * @see isValid\n     */\n    public function hasErrors()\n    {\n        return $this->has_errors;\n    }\n\n    /**\n     * Force the has_error flag for the field\n     *\n     * @param boolean true if the field has errors. Default is false\n     *\n     * @return void\n     */\n    public function setHasErrors($has_errors)\n    {\n        $this->has_errors = $has_errors;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    abstract protected function validate(Artifact $artifact, $value);\n\n    /**\n     * Save the value submitted by the user in the new changeset\n     *\n     * @param Artifact                   $artifact           The artifact\n     * @param Tracker_Artifact_Changeset $old_changeset      The old changeset. null if it is the first one\n     * @param int                        $new_changeset_id   The id of the new changeset\n     * @param mixed                      $submitted_value    The value submitted by the user\n     * @param PFUser                     $submitter          The user who made the modification\n     * @param bool                       $is_submission      True if artifact submission, false if artifact update\n     * @param bool                       $bypass_permissions If true, permissions to update/submit the value on field is not checked\n     *\n     * @return bool true if success\n     */\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $updated        = false;\n        $save_new_value = false;\n        $dao            = $this->getChangesetValueDao();\n\n        if ($this instanceof Tracker_FormElement_Field_ReadOnly) {\n            return true;\n        }\n\n        if ($bypass_permissions) {\n            $hasPermission = true;\n        } else {\n            $hasPermission = $this->userCanUpdate($submitter);\n            //If a field is not submitable, but has a required default value, the value has to  be submitted ...\n            if ($is_submission) {\n                $hasPermission = $this->userCanSubmit($submitter) ||\n                    (! $this->userCanSubmit($submitter) && $this->isrequired() && $this->getDefaultValue() != null);\n            }\n        }\n\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n        if ($previous_changesetvalue) {\n            if ($submitted_value === null || ! $hasPermission || ! $this->hasChanges($artifact, $previous_changesetvalue, $submitted_value)) {\n                //keep the old value\n                if ($changeset_value_id = $dao->save($new_changeset_id, $this->id, 0)) {\n                    $updated = $this->keepValue($artifact, $changeset_value_id, $previous_changesetvalue);\n                }\n            } else {\n                $save_new_value = true;\n            }\n        } elseif ($submitted_value === null) {\n            return true;\n        } elseif ($submitted_value !== null && $hasPermission) {\n            $save_new_value = true;\n        }\n\n        if ($save_new_value) {\n            //Save the new value\n            if ($changeset_value_id = $dao->save($new_changeset_id, $this->id, 1)) {\n                $updated = $this->saveValue($artifact, $changeset_value_id, $submitted_value, $previous_changesetvalue, $url_mapping);\n            }\n        }\n\n        return $updated;\n    }\n\n    protected function getChangesetValueDao()\n    {\n        return new Tracker_Artifact_Changeset_ValueDao();\n    }\n\n\n    protected function getPreviousChangesetValue($old_changeset)\n    {\n        $previous_changesetvalue = null;\n        if ($old_changeset) {\n            $previous_changesetvalue = $old_changeset->getValue($this);\n        }\n        return $previous_changesetvalue;\n    }\n\n    /**\n     * Save the value and return the id\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param mixed                           $value                   The value submitted by the user\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return bool\n     */\n    abstract protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    );\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        return $this->getValueDao()->keep($previous_changesetvalue->getId(), $changeset_value_id);\n    }\n\n    /**\n     * Check if there are changes between old and new value for this field\n     *\n     * @param Artifact                        $artifact  The current artifact\n     * @param Tracker_Artifact_ChangesetValue $old_value The data stored in the db\n     * @param mixed                           $new_value May be string or array\n     *\n     * @return bool true if there are differences\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return false;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue|null null if not found\n     */\n    abstract public function getChangesetValue($changeset, $value_id, $has_changed);\n\n    /**\n     * Return REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    /**\n     * Return full REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value = $changeset->getValue($this);\n        if ($value) {\n            return $value->getFullRESTValue($user);\n        }\n        return null;\n    }\n\n    public function getJsonValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        if ($this->userCanRead($user)) {\n            $value = $changeset->getValue($this);\n            return $value ? $value->getJsonValue() : '';\n        }\n        return null;\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    public function getFieldData($value)\n    {\n        // for atomic fields, the field data is the value (int, float, date, string, text)\n        return $value;\n    }\n\n    public function getRestFieldData($value)\n    {\n        return $this->getFieldData($value);\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @param array    $value    PHP representation of submitted Json value\n     * @param Artifact $artifact Artifact to update if any (null during creation)\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (! isset($value['value'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'Expected format for field ' . $this->id .\n                 ' : {\"field_id\" : 15458, \"value\" : some_value'\n            );\n        }\n\n        return $this->getRestFieldData($value['value']);\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        if (! array_key_exists('value', $value)) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'value attribute is missing for field ' . $this->id\n            );\n        }\n\n        return $this->getRestFieldData($value['value']);\n    }\n\n    /**\n     * Get data from CSV value in order to be saved in DB (create/update DB)\n     *\n     * @param string $csv_value\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value);\n    }\n\n    /**\n     * Get the field data for CSV import\n     *\n     * @param string the CSV field value\n     *\n     * @return string the field data corresponding to the CSV preview value for CSV import\n     */\n    public function getFieldDataForCSVPreview($csv_value)\n    {\n        // for most of atomic fields, the field data is the same value (int, float, string, text)\n        $purifier = Codendi_HTMLPurifier::instance();\n        return $purifier->purify($csv_value, CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * Returns true if field has a default value defined, false otherwise\n     *\n     * @return bool true if field has a default value defined, false otherwise\n     */\n    public function hasDefaultValue()\n    {\n        return ($this->getProperty('default_value') !== null);\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        return $this->getProperty('default_value');\n    }\n\n    public function getDefaultRESTValue()\n    {\n        return $this->getDefaultValue();\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        //Do nothing for the majority of fields\n    }\n\n    /**\n     * get the permissions for this field\n     *\n     * @return array\n     */\n    public function getPermissionsByUgroupId()\n    {\n        if (! $this->cache_permissions) {\n            $this->cache_permissions = [];\n            //berk... legacy permission code... legacy db functions... berk!\n            $sql = \"SELECT ugroup_id, permission_type\n                  FROM permissions\n                  WHERE permission_type LIKE 'PLUGIN_TRACKER_FIELD%'\n                    AND object_id='\" . db_ei($this->getId()) . \"'\n                  ORDER BY ugroup_id\";\n\n            $res = db_query($sql);\n            if (db_numrows($res) > 0) {\n                while ($row = db_fetch_array($res)) {\n                    $this->cache_permissions[$row['ugroup_id']][] = $row['permission_type'];\n                }\n            }\n        }\n        return $this->cache_permissions;\n    }\n\n    /**\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        if (! $tracker_is_empty) {\n            $value_dao = $this->getValueDao();\n            if ($value_dao) {\n                $value_dao->createNoneValue($this->getTrackerId(), $this->id);\n            }\n        }\n    }\n\n    /**\n     * Get the last ChangesetValue of the field\n     *\n     * @return Tracker_Artifact_ChangesetValue|null\n     */\n    public function getLastChangesetValue(Artifact $artifact)\n    {\n        return $artifact->getValue($this);\n    }\n\n    /**\n     * Do something after *all* fields are saved as new changset\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return true;\n    }\n\n    public function canBeUsedAsReportColumn()\n    {\n        return true;\n    }\n\n    /**\n     * @return bool\n     */\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    /** @return bool */\n    public function hasCustomFormatForAggregateResults()\n    {\n        return false;\n    }\n\n    /**\n     * Please note that the result may be not a DataAccessResult:\n     *\n     * In case of a simple query that can be computed alongside others, result will be a string (the result from mysql).\n     * In case of a complex query that must be run alone, result will be the DataAccessResult.\n     *\n     * @see Tracker_Report_Renderer_Table::fetchAddAggregatesUsedFunctionsValue()\n     *\n     * @param string                  $function AVG, SUM, \u2026\n     * @param DataAccessResult|string $result\n     *\n     * @return string\n     */\n    public function formatAggregateResult($function, $result)\n    {\n        return '';\n    }\n\n    /**\n     * @return FrozenFieldDetector\n     */\n    protected function getFrozenFieldDetector()\n    {\n        return new FrozenFieldDetector(\n            new TransitionRetriever(\n                new StateFactory(\n                    TransitionFactory::instance(),\n                    new SimpleWorkflowDao()\n                ),\n                new TransitionExtractor()\n            ),\n            FrozenFieldsRetriever::instance(),\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Codendi.\n *\n * Codendi is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Codendi is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Codendi. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n/**\n * Base class for alphanumeric fields (Int, Float, String, Text)\n */\nabstract class Tracker_FormElement_Field_Alphanum extends Tracker_FormElement_Field\n{\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr    = '';\n        $matches = [];\n        // If it is sourrounded by /.../ then assume a regexp\n        if (preg_match('#(!?)/(.*)/#', $criteria_value, $matches)) {\n            //if it has a ! at the beginning then assume negation\n            // !/toto/ => will search all content that doesn't contain the word 'toto'\n            $not = '';\n            if ($matches[1]) {\n                $not = ' NOT';\n            }\n            $expr = $field_name . $not . \" RLIKE \" . $this->quote($matches[2]);\n        }\n        return $expr;\n    }\n\n    protected function quote($string)\n    {\n        $criteria_dao = $this->getCriteriaDao();\n        if ($criteria_dao === null) {\n            return '';\n        }\n        return $criteria_dao->getDa()->quoteSmart($string);\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    public function fetchAdvancedCriteriaValue($criteria)\n    {\n        return null;\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value\";\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            if ($row = $this->getValueDao()->searchById($v->getId(), $this->id)->getRow()) {\n                $value = $row['value'];\n            }\n        }\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2010. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\n\nclass Tracker_FormElement_Field_ArtifactId extends Tracker_FormElement_Field_Integer implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression(\"c.artifact_id\", $criteria_value);\n        }\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return \"a.id AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        return \"a.id\";\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $changeset->getArtifact()->getId()\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        if ($from_aid != null) {\n            return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $value]) . '&from_aid=' . $from_aid . '\">' . $value . '</a>';\n        }\n        return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $value]) . '\">' . $value . '</a>';\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<a href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">#' . (int) $artifact->id . '</a>';\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<a href=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">#' . (int) $artifact->id . '</a>';\n                break;\n            default:\n                $output .= '#' . $artifact->id;\n                break;\n        }\n        return $output;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<a href=\"#' . TRACKER_BASE_URL . '/?aid=123\" onclick=\"return false;\">#42</a>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact ID');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the id of the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/tracker-aid.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/tracker-aid--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html  = '';\n        $html .= $artifact->getId();\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactId($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValue\\ArtifactLink\\ChangesetValueArtifactLinkDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRender;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRenderForPerTrackerTable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkValueSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\FieldDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ParentLinkAction;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PossibleParentSelectorRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PostSaveNewChangesetLinkParentArtifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\RequestDataAugmentor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueConvertor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\ArtifactInTypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\CSVOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\HTMLOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\ValueFormatter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_ArtifactLink extends Tracker_FormElement_Field\n{\n    public const TYPE                    = 'art_link';\n    public const CREATE_NEW_PARENT_VALUE = -1;\n    public const NEW_VALUES_KEY          = 'new_values';\n    public const TYPE_IS_CHILD           = '_is_child';\n    public const FAKE_TYPE_IS_PARENT     = '_is_parent';\n    public const NO_TYPE                 = '';\n    public const FIELDS_DATA_PARENT_KEY  = 'parent';\n\n    /**\n     * Display some information at the top of the artifact link field value\n     *\n     * Parameters:\n     *   'html'                   => output string html\n     *   'artifact'               => input Tracker_Artifact\n     *   'current_user'           => input PFUser\n     *   'read_only'              => input boolean\n     *   'reverse_artifact_links' => input boolean\n     *   'additional_classes'     => input String[]\n     */\n    public const PREPEND_ARTIFACTLINK_INFORMATION = 'prepend_artifactlink_information';\n\n    /**\n     * Allow to add command to the queue that is processed after a changeset is created.\n     * Add PostSaveNewChangesetCommand objects to the queue.\n     *\n     * Parameters:\n     *    'queue' => input/output Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n     *    'field' => input Tracker_FormElement_Field\n     */\n    public const GET_POST_SAVE_NEW_CHANGESET_QUEUE = 'get_post_save_new_changeset_queue';\n\n    /**\n     * Called just after augmentDataFromRequest has been called.\n     *\n     * Parameters:\n     *    'fields_data' => input/output array\n     *    'field'       => input Tracker_FormElement_Field\n     */\n    public const AFTER_AUGMENT_DATA_FROM_REQUEST = 'after_augment_data_from_request';\n\n    /**\n     * @var Tracker_ArtifactFactory\n     */\n    private $artifact_factory;\n\n    private ?ChangesetValueArtifactLinkDao $cached_changeset_value_dao = null;\n\n    /**\n     * Display the html form in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" autocomplete=\"off\" />';\n        $html .= '<br />';\n        $html .= '<a href=\"#\">bug #123</a><br />';\n        $html .= '<a href=\"#\">bug #321</a><br />';\n        $html .= '<a href=\"#\">story #10234</a>';\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getLink();\n        }\n        $html = implode(', ', $arr);\n        return $html;\n    }\n\n    public function fetchChangesetValueForType(\n        $artifact_id,\n        $changeset_id,\n        $value,\n        $type,\n        $format,\n        $report = null,\n        $from_aid = null,\n    ) {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new HTMLOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getArtifactId();\n        }\n\n        return implode(',', $arr);\n    }\n\n    public function fetchCSVChangesetValueWithType($changeset_id, $type, $format)\n    {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new CSVOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        $artifact_id_array = $value->getArtifactIds();\n        return implode(\", \", $artifact_id_array);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return array\n     * @deprecated\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data (REST or CSV) for artifact submission\n     *\n     * @param string   $value    The rest field value\n     * @param Artifact $artifact The artifact the value is to be added/removed\n     *\n     * @return array\n     */\n    public function getFieldData($value, ?Artifact $artifact = null)\n    {\n        $submitted_ids = $this->getFieldDataBuilder()->getArrayOfIdsFromString($value);\n        return $this->getDataLikeWebUI($submitted_ids, [$value], $artifact);\n    }\n\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value, $artifact);\n    }\n\n    /**\n     * @param array $submitted_ids\n     * @param array $submitted_values\n     *\n     * @return array\n     */\n    private function getDataLikeWebUI(\n        array $submitted_ids,\n        array $submitted_values,\n        ?Artifact $artifact = null,\n    ) {\n        $existing_links = $this->getArtifactLinkIdsOfLastChangeset($artifact);\n        $new_values     = array_diff($submitted_ids, $existing_links);\n        $removed_values = array_diff($existing_links, $submitted_ids);\n\n        return $this->getFieldDataBuilder()->getDataLikeWebUI($new_values, $removed_values, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $user_manager   = UserManager::instance();\n        $user           = $user_manager->getCurrentUser();\n        $parent_tracker = $this->getTracker()->getParent();\n\n        if ($artifact->getParent($user) || ! $parent_tracker) {\n            return '';\n        }\n\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $parent_tracker = $this->getTracker()->getParent();\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        if (! $parent_tracker) {\n            return '';\n        }\n\n        if (isset($submitted_values['disable_artifact_link_field']) && $submitted_values['disable_artifact_link_field']) {\n            return '';\n        }\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    private function getArtifactLinkIdsOfLastChangeset(?Artifact $artifact = null)\n    {\n        $link_ids = [];\n\n        $current_user = $this->getCurrentUser();\n\n        if ($artifact && $artifact->getLastChangeset()) {\n            foreach ($this->getChangesetValues($current_user, (int) $artifact->getLastChangeset()->getId()) as $link_info) {\n                $link_ids[] = $link_info->getArtifactId();\n            }\n        }\n\n        return $link_ids;\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_artifactlink AS $b ON (\n                            $b.changeset_value_id = $a.id\n                            AND \" . $this->buildMatchExpression(\"$b.artifact_id\", $criteria_value) . \"\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    /**\n     * @var string\n     */\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr    = '';\n        $matches = [];\n        if (preg_match('/\\/(.*)\\//', $criteria_value, $matches)) {\n            // If it is sourrounded by /.../ then assume a regexp\n            $expr = $field_name . \" RLIKE \" . $this->getCriteriaDao()->da->quoteSmart($matches[1]);\n        }\n        if (! $expr) {\n            $matches = [];\n            if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // It's < or >,  = and a number then use as is\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' ' . $matches[1] . ' ' . $matches[2];\n            } elseif (preg_match(\"/^($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // It's a number so use  equality\n                $matches[1] = $this->cast($matches[1]);\n                $expr       = $field_name . ' = ' . $matches[1];\n            } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // it's a range number1-number2\n                $matches[1] = (string) ($this->cast($matches[1]));\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            } else {\n                // Invalid syntax - no condition\n                $expr = '1';\n            }\n        }\n        return $expr;\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_ArtifactLink_ValueDao();\n    }\n\n    private function renderParentSelector(\n        string $prefill_parent,\n        string $name,\n        \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector $possible_parents_selector,\n    ): string {\n        $renderer = PossibleParentSelectorRenderer::buildWithDefaultTemplateRenderer();\n        return $renderer->render($name, $prefill_parent, $possible_parents_selector);\n    }\n\n    private function getPossibleParentSelector(\n        PFUser $user,\n        bool $can_create,\n    ): \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector {\n        $retriever = new PossibleParentsRetriever($this->getArtifactFactory(), EventManager::instance());\n\n        return $retriever->getPossibleArtifactParents(\n            $this->getTracker(),\n            $user,\n            0,\n            0,\n            $can_create,\n        );\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param Artifact $artifact               Artifact on which we operate\n     * @param string   $name                   The name, if any\n     * @param string   $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param array    $prefill_removed_values Pre-remove values (what the user has submitted, if any)\n     * @param string   $prefill_parent         Prefilled parent (what the user has submitted, if any) - Only valid on submit\n     * @param bool     $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    private function fetchHtmlWidget(\n        Artifact $artifact,\n        $name,\n        ArtifactLinksToRender $artifact_links_to_render,\n        $prefill_new_values,\n        $prefill_removed_values,\n        $prefill_type,\n        $prefill_edited_types,\n        $prefill_parent,\n        $read_only,\n        array $additional_classes,\n        $from_aid = null,\n        $reverse_artifact_links = false,\n    ) {\n        $current_user = $this->getCurrentUser();\n        $html         = '';\n        if (! $read_only) {\n            $html = '<div class=\"tracker_formelement_read_and_edit\" data-test=\"artifact-link-section\">';\n        }\n\n        if ($reverse_artifact_links) {\n            $html .= '<div class=\"artifact-link-value-reverse\">';\n            $html .= '<a href=\"\" class=\"btn\" id=\"display-tracker-form-element-artifactlink-reverse\" data-test=\"display-reverse-links\">' . dgettext('tuleap-tracker', 'Display reverse artifact links') . '</a>';\n            $html .= '<div id=\"tracker-form-element-artifactlink-reverse\" data-test=\"reverse-link-section\" style=\"display: none\">';\n        } else {\n            $html .= '<div class=\"artifact-link-value\">';\n        }\n\n        EventManager::instance()->processEvent(\n            self::PREPEND_ARTIFACTLINK_INFORMATION,\n            [\n                'html'                   => &$html,\n                'artifact'               => $artifact,\n                'current_user'           => $current_user,\n                'read_only'              => $read_only,\n                'reverse_artifact_links' => $reverse_artifact_links,\n                'additional_classes'     => $additional_classes,\n            ]\n        );\n\n        $html .= '<h5 class=\"artifack_link_subtitle\">' . $this->getWidgetTitle($reverse_artifact_links) . '</h5>';\n\n        $html_name_new = '';\n\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n\n        $hp              = Codendi_HTMLPurifier::instance();\n        $read_only_class = 'read-only';\n\n        if (! $read_only) {\n            $read_only_class = '';\n            $classes         = implode(\" \", $additional_classes);\n            $html           .= '<section class=\"tracker_formelement_read_and_edit_edition_section tracker-form-element-artifactlink-section ' . $hp->purify($classes) . '\">';\n            $html           .= '<div>';\n            $html           .= '<div><span class=\"input-append\"><input type=\"text\"\n                             ' . $html_name_new . '\n                             class=\"tracker-form-element-artifactlink-new\"\n                             size=\"40\"\n                             data-test=\"artifact-link-submit\"\n                             data-preview-label=\"' . $hp->purify(dgettext('tuleap-tracker', 'Preview')) . '\"\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n\n            $possible_parents_selector = null;\n            if ($artifact->getParentWithoutPermissionChecking() === null) {\n                $can_create                = $artifact->getId() === -1;\n                $possible_parents_selector = $this->getPossibleParentSelector($current_user, $can_create);\n            }\n\n            if ($artifact->getTracker()->isProjectAllowedToUseType()) {\n                $renderer = new \\Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorRenderer(\n                    $this->getTypePresenterFactory(),\n                    $this->getTemplateRenderer(),\n                );\n                $html    .= $renderer->renderToString($artifact, $prefill_type, $name, $possible_parents_selector);\n            }\n            $html .= '</span>';\n            $html .= '</div>';\n\n            if ($possible_parents_selector) {\n                $html .= $this->renderParentSelector($prefill_parent, $name, $possible_parents_selector);\n            }\n            $html .= '</div>';\n            $html .= '</section>'; // end of tracker_formelement_read_and_edit_edition_section\n        }\n\n        $html .= '<div class=\"tracker-form-element-artifactlink-list ' . $read_only_class . '\" data-test=\"artifact-link-section\">';\n        if ($artifact_links_to_render->hasArtifactLinksToDisplay()) {\n            $this_project_id = $this->getTracker()->getProject()->getGroupId();\n            foreach ($artifact_links_to_render->getArtifactLinksForPerTrackerDisplay() as $artifact_links_per_tracker) {\n                /** @var ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker */\n                $renderer = $artifact_links_per_tracker->getRenderer();\n                if ($renderer === null) {\n                    $html .= dgettext('tuleap-tracker', 'No reports available');\n                    continue;\n                }\n\n                $html .= '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                $tracker = $artifact_links_per_tracker->getTracker();\n                $project = $tracker->getProject();\n\n                $project_name = '';\n                if ($project->getGroupId() != $this_project_id) {\n                    $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                    $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                    $project_name .= '</abbr>)';\n                }\n                $html .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                $html .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                $html .= '</h2>';\n\n                $json_encoded_data = json_encode(\n                    [\n                        'artifact_id'            => $artifact->getId(),\n                        'tracker_id'             => $tracker->getId(),\n                        'reverse_artifact_links' => $reverse_artifact_links,\n                        'read_only'              => $read_only,\n                        'from_aid'               => $from_aid,\n                        'prefill_removed_values' => $prefill_removed_values,\n                        'prefill_edited_types'   => $prefill_edited_types,\n                    ]\n                );\n\n                $html .= '<div\n                        class=\"tracker-form-element-artifactlink-renderer-async\"\n                        data-field-id=\"' . (int) $this->getId() . '\"\n                        data-renderer-data=\"' . Codendi_HTMLPurifier::instance()->purify($json_encoded_data) . '\"></div></div>';\n            }\n\n            $html .= $this->fetchTypeTables($artifact_links_to_render, $reverse_artifact_links);\n        } else {\n            $html .= $this->getNoValueLabel();\n        }\n        $html .= '</div>';\n\n        if ($reverse_artifact_links) {\n            $html .= '</div>';\n        }\n        $html .= '</div>';\n        if (! $read_only) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    private function fetchRendererAsArtifactLink(\n        ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_edited_types,\n        $reverse_artifact_links,\n        $from_aid,\n    ) {\n        $renderer = $artifact_links_per_tracker->getRenderer();\n        if (! $renderer) {\n            return '';\n        }\n\n        $matching_ids = $artifact_links_per_tracker->getMatchingIDs();\n\n        return $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $prefill_removed_values, $prefill_edited_types, $reverse_artifact_links, false, $from_aid);\n    }\n\n    private function fetchTypeTables(ArtifactLinksToRender $artifact_links_to_render, $is_reverse_artifact_links)\n    {\n        static $type_tables_cache = [];\n        if (isset($type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links])) {\n            return $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links];\n        }\n        $html              = '';\n        $template_renderer = $this->getTemplateRenderer();\n        foreach ($artifact_links_to_render->getArtifactLinksForPerTypeDisplay() as $artifact_links_per_type) {\n            $html .= $template_renderer->renderToString(\n                'artifactlink-type-table',\n                new TypeTablePresenter(\n                    $artifact_links_per_type->getTypePresenter(),\n                    $artifact_links_per_type->getArtifactLinks(),\n                    $is_reverse_artifact_links,\n                    $this\n                )\n            );\n        }\n        $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links] = $html;\n        return $html;\n    }\n\n    /**\n     *\n     * @param bool $reverse_artifact_links\n     */\n    private function getWidgetTitle($reverse_artifact_links)\n    {\n        if ($reverse_artifact_links) {\n            return dgettext('tuleap-tracker', 'Reverse artifact links');\n        }\n\n        return dgettext('tuleap-tracker', 'Artifact links');\n    }\n\n    /**\n     * Process the request\n     *\n     * @param Tracker_IDisplayTrackerLayout  $layout          Displays the page header and footer\n     * @param Codendi_Request                $request         The data coming from the user\n     * @param PFUser                           $current_user    The user who mades the request\n     *\n     * @return void\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case 'fetch-artifacts':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $prefill_edited_types   = [];\n                $only_rows              = true;\n                $this_project_id        = $this->getTracker()->getProject()->getGroupId();\n                $is_reverse             = false;\n                $hp                     = Codendi_HTMLPurifier::instance();\n\n                $ugroups = $current_user->getUgroups($this_project_id, []);\n\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $result  = [];\n                if ($this->getTracker()->isProjectAllowedToUseType()) {\n                    $type_shortname = $request->get('type');\n                    $type_presenter = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n                }\n                //We must retrieve the last changeset ids of each artifact id.\n                $dao = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n\n                    if ($tracker->userCanView() && ! $tracker->isDeleted()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                            foreach (explode(',', $matching_ids['id']) as $id) {\n                                $matching_ids['type'][$id] = $type_presenter;\n                            }\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key          = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $result[$key] = $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $is_reverse, $prefill_removed_values, $prefill_edited_types, $only_rows);\n                                    $head         = '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                                    $project_name = '';\n                                    if ($project->getGroupId() != $this_project_id) {\n                                        $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                                        $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                        $project_name .= '</abbr>)';\n                                    }\n                                    $head .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                                    $head .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                                    $head .= '</h2>';\n                                    //if ($artifact) {\n                                    //    $title = $hp->purify('link a '. $tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                    //    $head .= '<a href=\"'.TRACKER_BASE_URL.'/?tracker='.$tracker_id.'&func=new-artifact-link&id='.$artifact->getId().'\" class=\"tracker-form-element-artifactlink-link-new-artifact\">'. 'create a new '.$hp->purify($tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML)  .'</a>';\n                                    //}\n                                    $result[$key]['head'] = $head . $result[$key]['head'];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $this->appendTypeTable($request, $result);\n                if ($result) {\n                    $head = [];\n                    $rows = [];\n                    foreach ($result as $key => $value) {\n                        $head[$key] = $value[\"head\"];\n                        $rows[$key] = $value[\"rows\"];\n                    }\n                    $GLOBALS['HTML']->sendJSON(['head' => $head, 'rows' => $rows]);\n                }\n                exit();\n            case 'fetch-aggregates':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $only_rows              = true;\n                $only_one_column        = false;\n                $extracolumn            = Tracker_Report_Renderer_Table::EXTRACOLUMN_UNLINK;\n                $read_only              = true;\n                $use_data_from_db       = false;\n\n                $ugroups = $current_user->getUgroups($this->getTracker()->getGroupId(), []);\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $json    = ['tabs' => []];\n                $dao     = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n                    if ($tracker->userCanView()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key            = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $columns        = $renderer->getTableColumns($only_one_column, $use_data_from_db);\n                                    $json['tabs'][] = [\n                                        'key' => $key,\n                                        'src' => $renderer->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only),\n                                    ];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                $GLOBALS['HTML']->sendJSON($json);\n                exit();\n            case 'artifactlink-renderer-async':\n                session_write_close();\n                if (! $request->isAjax()) {\n                    return;\n                }\n\n                if (! $request->get('renderer_data')) {\n                    return;\n                }\n\n                $renderer_data = json_decode($request->get('renderer_data'), true);\n                if (! $renderer_data) {\n                    return;\n                }\n\n                $expected_keys                  = array_flip([\n                    'artifact_id',\n                    'tracker_id',\n                    'reverse_artifact_links',\n                    'read_only',\n                    'prefill_removed_values',\n                    'prefill_edited_types',\n                    'from_aid',\n                ]);\n                $are_expected_keys_part_of_data = empty(array_diff_key($expected_keys, $renderer_data));\n                if (! $are_expected_keys_part_of_data) {\n                    return;\n                }\n\n                $artifact_id = $renderer_data['artifact_id'];\n                $artifact    = $this->getArtifactFactory()->getArtifactByIdUserCanView($current_user, $artifact_id);\n                if (! $artifact) {\n                    return;\n                }\n\n                $target_tracker_id = $renderer_data['tracker_id'];\n                $tracker           = $this->getTrackerFactory()->getTrackerById($target_tracker_id);\n                if (! $tracker->userCanView($current_user)) {\n                    return;\n                }\n\n                if ($renderer_data['reverse_artifact_links']) {\n                    $artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n                } else {\n                    $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue(\n                        $artifact->getValue($this)\n                    );\n                }\n\n                $artifact_links_per_tracker = $artifact_links_to_render->getArtifactLinksForAGivenTracker($tracker);\n                if (! $artifact_links_per_tracker) {\n                    return;\n                }\n\n                echo $this->fetchRendererAsArtifactLink(\n                    $artifact_links_per_tracker,\n                    $renderer_data['read_only'],\n                    $renderer_data['prefill_removed_values'],\n                    $renderer_data['prefill_edited_types'],\n                    $renderer_data['reverse_artifact_links'],\n                    $renderer_data['from_aid']\n                );\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n                break;\n        }\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param string $name                   The name, if any\n     * @param array  $artifact_links         The current artifact links\n     * @param string $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param bool   $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    protected function fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only)\n    {\n        $html          = '';\n        $html_name_new = '';\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        if (! $read_only) {\n            $html .= '<input type=\"text\"\n                             ' . $html_name_new . '\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n            $html .= '<br />';\n        }\n        if ($artifact_links) {\n            $html .= '<ul class=\"tracker-form-element-artifactlink-list\">';\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>';\n                $html .= $artifact_link_info->getLink();\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $links_tab         = $this->fetchLinks($artifact, $this->getArtifactLinksToRenderFromChangesetValue($value), $submitted_values);\n        $reverse_links_tab = $this->fetchReverseLinks($artifact);\n\n        return $links_tab . $reverse_links_tab;\n    }\n\n    private function fetchLinks(\n        Artifact $artifact,\n        ArtifactLinksToRender $artifact_links_to_render,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()])) {\n            $submitted_value = $submitted_values[$this->getId()];\n        }\n\n        $prefill_new_values = '';\n        if (isset($submitted_value['new_values'])) {\n            $prefill_new_values = $submitted_value['new_values'];\n        }\n\n        $prefill_removed_values = [];\n        if (isset($submitted_value['removed_values'])) {\n            $prefill_removed_values = $submitted_value['removed_values'];\n        }\n\n        $prefill_type = '';\n        if (isset($submitted_value['type'])) {\n            $prefill_type = $submitted_value['type'];\n        }\n\n        $prefill_edited_types = [];\n        if (isset($submitted_value['types'])) {\n            $prefill_edited_types = $submitted_value['types'];\n        }\n\n        $read_only      = false;\n        $name           = 'artifact[' . $this->id . ']';\n        $from_aid       = $artifact->getId();\n        $prefill_parent = '';\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    private function getArtifactLinksToRenderFromChangesetValue(?Tracker_Artifact_ChangesetValue $value)\n    {\n        $artifact_links = [];\n        if ($value !== null) {\n            $artifact_links = $value->getValue();\n        }\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n    }\n\n    private function getReverseArtifactLinksToRender(Artifact $artifact)\n    {\n        $reverse_links = $this->getReverseLinks($artifact->getId());\n\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$reverse_links\n        );\n    }\n\n    private function fetchReverseLinks(Artifact $artifact)\n    {\n        $from_aid = $artifact->getId();\n\n        $reverse_artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            '',\n            $reverse_artifact_links_to_render,\n            '',\n            '',\n            '',\n            [],\n            '',\n            true,\n            [],\n            $from_aid,\n            true\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        ?ArtifactLinksToRender $artifact_links_to_render = null,\n    ) {\n        if ($artifact_links_to_render === null) {\n            $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue($value);\n        }\n        $links_tab_read_only = $this->fetchLinksReadOnly($artifact, $artifact_links_to_render);\n        $reverse_links_tab   = $this->fetchReverseLinks($artifact);\n\n        return $links_tab_read_only . $reverse_links_tab;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            \"<div class='tracker_hidden_edition_field' data-field-id=\" . $this->getId() . '></div>';\n    }\n\n    private function fetchLinksReadOnly(Artifact $artifact, ArtifactLinksToRender $artifact_links_to_render)\n    {\n        $read_only              = true;\n        $name                   = '';\n        $prefill_new_values     = '';\n        $prefill_removed_values = [];\n        $prefill_type           = '';\n        $prefill_edited_types   = [];\n        $prefill_parent         = '';\n        $from_aid               = $artifact->getId();\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html               = '';\n        $prefill_new_values = '';\n        if (isset($submitted_values[$this->getId()]['new_values'])) {\n            $prefill_new_values = $submitted_values[$this->getId()]['new_values'];\n        } elseif ($this->hasDefaultValue()) {\n            $prefill_new_values = $this->getDefaultValue();\n        }\n        $prefill_parent = '';\n        if (isset($submitted_values[$this->getId()]['parent'])) {\n            $prefill_parent = $submitted_values[$this->getId()]['parent'];\n        }\n        $prefill_type = '';\n        if (isset($submitted_values[$this->getId()]['type'])) {\n            $prefill_type = $submitted_values[$this->getId()]['type'];\n        }\n        $prefill_edited_types = [];\n        if (isset($submitted_values[$this->getId()]['types'])) {\n            $prefill_edited_types = $submitted_values[$this->getId()]['types'];\n        }\n        $read_only              = false;\n        $name                   = 'artifact[' . $this->id . ']';\n        $prefill_removed_values = [];\n        $artifact_links         = [];\n\n        // Well, shouldn't be here but API doesn't provide a Null Artifact on creation yet\n        // Here to avoid having to pass null arg for fetchHtmlWidget\n        $artifact = new Artifact(-1, $this->tracker_id, $this->getCurrentUser()->getId(), 0, false);\n\n        $artifact_links_to_render = new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [\"tracker_formelement_artifact_link_editable_on_submit\"]\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html               = '';\n        $prefill_new_values = dgettext('tuleap-tracker', 'Unchanged');\n        $read_only          = false;\n        $name               = 'artifact[' . $this->id . ']';\n        $artifact_links     = [];\n\n        return $this->fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only);\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     *\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value != null) {\n            $html           = '<ul>';\n            $artifact_links = $value->getValue();\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>' . $artifact_link_info->getLabel() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * @return ArtifactLinkFieldValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ArtifactLinkFieldValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getValue()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $artifactlink_infos = $value->getValue();\n                $url                = [];\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $url[] = $artifactlink_info->getLink();\n                    }\n                }\n                return implode(' , ', $url);\n            default:\n                $output             = PHP_EOL;\n                $artifactlink_infos = $value->getValue();\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $output .= $artifactlink_info->getLabel();\n                        $output .= PHP_EOL;\n                    }\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        // never used...\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $rows                   = $this->getValueDao()->searchById($value_id, $this->id);\n        $artifact_links         = $this->getArtifactLinkInfos($rows);\n        $reverse_artifact_links = [];\n\n        if ($changeset) {\n            $reverse_artifact_links = $this->getReverseLinks($changeset->getArtifact()->getId());\n        }\n\n        return new Tracker_Artifact_ChangesetValue_ArtifactLink(\n            $value_id,\n            $changeset,\n            $this,\n            $has_changed,\n            $artifact_links,\n            $reverse_artifact_links\n        );\n    }\n\n    private function getReverseLinks($artifact_id)\n    {\n        $links_data = $this->getValueDao()->searchReverseLinksById($artifact_id);\n\n        return $this->getArtifactLinkInfos($links_data);\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    private function getArtifactLinkInfos($data)\n    {\n        $artifact_links = [];\n        while ($row = $data->getRow()) {\n            $artifact_links[$row['artifact_id']] = new Tracker_ArtifactLinkInfo(\n                $row['artifact_id'],\n                $row['keyword'],\n                $row['group_id'],\n                $row['tracker_id'],\n                $row['last_changeset_id'],\n                $row['nature']\n            );\n        }\n\n        return $artifact_links;\n    }\n\n    /**\n     * @var array\n     */\n    protected $artifact_links_by_changeset = [];\n\n    /**\n     *\n     * @param int $changeset_id\n     *\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    protected function getChangesetValues(PFUser $user, $changeset_id): array\n    {\n        if (! isset($this->artifact_links_by_changeset[$changeset_id])) {\n            $this->artifact_links_by_changeset[$changeset_id] = [];\n\n            $dao = $this->getChangesetValueArtifactLinkDao();\n            foreach ($dao->searchChangesetValues($this->id, $changeset_id) as $row) {\n                $artifact_link_info = new Tracker_ArtifactLinkInfo(\n                    $row['artifact_id'],\n                    $row['keyword'],\n                    $row['group_id'],\n                    $row['tracker_id'],\n                    $row['last_changeset_id'],\n                    $row['nature']\n                );\n\n                if (! $artifact_link_info->userCanView($user)) {\n                    continue;\n                }\n\n                $this->artifact_links_by_changeset[$row['changeset_id']][] = $artifact_link_info;\n            }\n        }\n        return $this->artifact_links_by_changeset[$changeset_id];\n    }\n\n    private function getChangesetValueArtifactLinkDao(): ChangesetValueArtifactLinkDao\n    {\n        if (! $this->cached_changeset_value_dao) {\n            $this->cached_changeset_value_dao = new ChangesetValueArtifactLinkDao();\n        }\n\n        return $this->cached_changeset_value_dao;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        if (! $old_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink) {\n            return false;\n        }\n\n        $submitted_value = $this->getSubmittedValueConvertor()->convert(\n            $new_value,\n            $old_value\n        );\n\n        return $old_value->hasChanges($submitted_value);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact Link');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Links to other artifacts');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param array    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! $this->validate($artifact, $value);\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ((! is_array($submitted_value) || empty($value['new_values'])) && $this->isRequired()) {\n            if (! $this->isEmpty($submitted_value, $artifact)) {\n                // Field is required but there are values, so field is valid\n                $this->has_errors = false;\n            } else {\n                $this->addRequiredError();\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Say if the submitted value is empty\n     * if no last changeset values and empty submitted values : empty\n     * if not empty last changeset values and empty submitted values : not empty\n     * if empty new values and not empty last changeset values and not empty removed values have the same size: empty\n     *\n     * @param array            $submitted_value\n     *\n     * @return bool true if the submitted value is empty\n     */\n    public function isEmpty($submitted_value, Artifact $artifact)\n    {\n        $hasNoNewValues           = empty($submitted_value['new_values']);\n        $hasNoLastChangesetValues = true;\n        $last_changeset_values    = [];\n        $last_changeset_value     = $this->getLastChangesetValue($artifact);\n\n        if ($last_changeset_value) {\n            $last_changeset_values    = $last_changeset_value->getArtifactIds();\n            $hasNoLastChangesetValues = empty($last_changeset_values);\n        }\n\n        $hasLastChangesetValues = ! $hasNoLastChangesetValues;\n\n        if (\n            ($hasNoLastChangesetValues &&\n            $hasNoNewValues) ||\n             ($hasLastChangesetValues &&\n             $hasNoNewValues &&\n                $this->allLastChangesetValuesRemoved($last_changeset_values, $submitted_value))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Say if all values of the changeset have been removed\n     *\n     * @param array $last_changeset_values\n     * @param array $submitted_value\n     *\n     * @return bool true if all values have been removed\n     */\n    private function allLastChangesetValuesRemoved($last_changeset_values, $submitted_value)\n    {\n        return ! empty($submitted_value['removed_values'])\n            && count($last_changeset_values) == count($submitted_value['removed_values']);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param string   $value    data coming from the request. Should be artifact id separated by comma\n     *\n     * @return bool true if the value is considered ok\n     * @deprecated Use ArtifactLinkValidator instead\n     *\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function setArtifactFactory(Tracker_ArtifactFactory $artifact_factory)\n    {\n        $this->artifact_factory = $artifact_factory;\n    }\n\n    /**\n     * @return Tracker_ArtifactFactory\n     */\n    private function getArtifactFactory()\n    {\n        if (! $this->artifact_factory) {\n            $this->artifact_factory = Tracker_ArtifactFactory::instance();\n        }\n        return $this->artifact_factory;\n    }\n\n    public function getTrackerFactory()\n    {\n        return TrackerFactory::instance();\n    }\n\n    /**\n     * @return Tracker_HierarchyFactory\n     */\n    protected function getHierarchyFactory()\n    {\n        return Tracker_HierarchyFactory::instance();\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ): void {\n        $queue = $this->getPostNewChangesetQueue();\n        $queue->execute($artifact, $submitter, $new_changeset, $fields_data, $previous_changeset);\n    }\n\n    private function getPostNewChangesetQueue(): Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n    {\n        $queue = new Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue();\n        $queue->add($this->getProcessChildrenTriggersCommand());\n        $queue->add($this->getPostSaveNewChangesetLinkParentArtifact());\n\n        EventManager::instance()->processEvent(\n            self::GET_POST_SAVE_NEW_CHANGESET_QUEUE,\n            [\n                'field' => $this,\n                'queue' => $queue,\n            ]\n        );\n\n        return $queue;\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getProcessChildrenTriggersCommand(): Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand\n    {\n        return new Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand(\n            $this,\n            $this->getWorkflowFactory()->getTriggerRulesManager()\n        );\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getPostSaveNewChangesetLinkParentArtifact(): PostSaveNewChangesetLinkParentArtifact\n    {\n        return new PostSaveNewChangesetLinkParentArtifact(\n            new ParentLinkAction(\n                $this->getArtifactFactory(),\n            )\n        );\n    }\n\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n\n        $value = $this->getNormalizedSubmittedValue($submitted_value);\n\n        $convertor       = $this->getSubmittedValueConvertor();\n        $submitted_value = $convertor->convert(\n            $value,\n            $previous_changesetvalue\n        );\n\n        return parent::saveNewChangeset(\n            $artifact,\n            $old_changeset,\n            $new_changeset_id,\n            $submitted_value,\n            $submitter,\n            $is_submission,\n            $bypass_permissions,\n            $url_mapping\n        );\n    }\n\n    /**\n     * Sometimes, for example during a post action for a trigger, the workflow pass null as submitted value.\n     * ArtifactLinks don't like very much this null so force it to a decent, empty value.\n     */\n    private function getNormalizedSubmittedValue($value)\n    {\n        if (is_null($value)) {\n            $value = ['new_values' => ''];\n        }\n\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $submitted_value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $saver = $this->getArtifactLinkValueSaver();\n\n        return $saver->saveValue(\n            $this,\n            $this->getCurrentUser(),\n            $artifact,\n            $changeset_value_id,\n            $submitted_value\n        );\n    }\n\n    /** @return ArtifactLinkValueSaver */\n    private function getArtifactLinkValueSaver()\n    {\n        return new ArtifactLinkValueSaver(\n            Tracker_ArtifactFactory::instance(),\n            $this->getValueDao(),\n            new Tracker_ReferenceManager(\n                ReferenceManager::instance(),\n                Tracker_ArtifactFactory::instance()\n            ),\n            EventManager::instance(),\n            new ArtifactLinksUsageDao(),\n            $this->getTrackerFactory()->getTriggerRulesManager()\n        );\n    }\n\n    private function getSubmittedValueConvertor(): SubmittedValueConvertor\n    {\n        return new SubmittedValueConvertor(\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Retrieve linked artifacts according to user's permissions\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                       $user      The user who will see the artifacts\n     *\n     * @return Artifact[]\n     */\n    public function getLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user)\n    {\n        $artifacts       = [];\n        $changeset_value = $changeset->getValue($this);\n        if ($changeset_value) {\n            foreach ($changeset_value->getArtifactIds() as $id) {\n                $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n            }\n        }\n        return $artifacts;\n    }\n\n    /**\n     * Retrieve sliced linked artifacts according to user's permissions\n     *\n     * This is nearly the same as a paginated list however, for performance\n     * reasons, the total size may be different than the sum of total paginated\n     * artifacts.\n     *\n     * Example to illustrate the difference between paginated and sliced:\n     *\n     * Given that artifact links are [12, 13, 24, 39, 65, 69]\n     * And that the user cannot see artifact #39\n     * When I request linked artifacts by bunchs of 2\n     * Then I get [[12, 13], [24], [65, 69]]  # instead of [[12, 13], [24, 65], [69]]\n     * And total size will be 6               # instead of 5\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                     $user      The user who will see the artifacts\n     * @param int                        $limit     The number of artifact to fetch\n     * @param int                        $offset    The offset\n     *\n     * @return Tracker_Artifact_PaginatedArtifacts\n     */\n    public function getSlicedLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user, $limit, $offset)\n    {\n        $changeset_value = $changeset->getValue($this);\n        if (! $changeset_value) {\n            return new Tracker_Artifact_PaginatedArtifacts([], 0);\n        }\n\n        assert($changeset_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink);\n        $artifact_ids = $changeset_value->getArtifactIds();\n        $size         = count($artifact_ids);\n\n        $artifacts = [];\n        foreach (array_slice($artifact_ids, $offset, $limit) as $id) {\n            $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n        }\n\n        return new Tracker_Artifact_PaginatedArtifacts($artifacts, $size);\n    }\n\n    private function addArtifactUserCanViewFromId(array &$artifacts, $id, PFUser $user): void\n    {\n        $artifact = $this->getArtifactFactory()->getArtifactById($id);\n        if ($artifact && $artifact->userCanView($user)) {\n            $artifacts[] = $artifact;\n        }\n    }\n\n    /**\n     * If request come with a 'parent', it should be store in a cache\n     * that will be called after the artifact update to create the\n     * right _is_child link\n     *\n     * Please note that it only work on artifact creation.\n     *\n     * @param array $fields_data\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        $request_data_augmentor = new RequestDataAugmentor(\n            EventManager::instance()\n        );\n\n        $request_data_augmentor->augmentDataFromRequest(\n            $this,\n            $fields_data\n        );\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactLink($this);\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    protected function getTypePresenterFactory()\n    {\n        return new TypePresenterFactory(new TypeDao(), new ArtifactLinksUsageDao());\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function appendTypeTable(Codendi_Request $request, array &$result)\n    {\n        if (! $this->getTracker()->isProjectAllowedToUseType()) {\n            return;\n        }\n\n        $type_shortname = $request->get('type');\n        if (! $type_shortname) {\n            return;\n        }\n\n        $type_presenter        = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n        $key                   = \"type_$type_shortname\";\n        $art_factory           = $this->getArtifactFactory();\n        $artifact_html_classes = 'additional';\n        $type_html             = '';\n        $head_html             = '';\n        $ids                   = $request->get('ids');\n\n        foreach (explode(',', $ids) as $id) {\n            $artifact = $art_factory->getArtifactById(trim($id));\n\n            if (! is_null($artifact) && $artifact->getTracker()->isActive()) {\n                $type_html .= $this->getTemplateRenderer()->renderToString(\n                    'artifactlink-type-table-row',\n                    new ArtifactInTypeTablePresenter($artifact, $artifact_html_classes, $this)\n                );\n            }\n        }\n\n        if ($type_html !== '') {\n            $head_html = $this->getTemplateRenderer()->renderToString(\n                'artifactlink-type-table-head',\n                TypeTablePresenter::buildForHeader($type_presenter, $this)\n            );\n\n            $result[$key] = ['head' => $head_html, 'rows' => $type_html];\n        } else {\n            $result[$key] = [];\n        }\n    }\n\n    private function getFieldDataBuilder()\n    {\n        return new FieldDataBuilder();\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\BurndownCacheIsCurrentlyCalculatedException;\nuse Tuleap\\Tracker\\FormElement\\BurndownFieldPresenter;\nuse Tuleap\\Tracker\\FormElement\\ChartCachedDaysComparator;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationFieldRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueChecker;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartFieldUsage;\nuse Tuleap\\Tracker\\FormElement\\ChartMessageFetcher;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCacheGenerationChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCacheGenerator;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCommonDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownDataBuilderForLegacy;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownDataBuilderForREST;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownRemainingEffortAdderForLegacy;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownRemainingEffortAdderForREST;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\IComputeTimeframes;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse Tuleap\\Tracker\\UserWithReadAllPermissionBuilder;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Burndown extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly\n{\n    public const LOG_IDENTIFIER = 'burndown_syslog';\n\n    /**\n     * Request parameter to display burndown image\n     */\n    public const FUNC_SHOW_BURNDOWN = 'show_burndown';\n\n    /**\n     * @var Tracker_HierarchyFactory\n     */\n    private $hierarchy_factory;\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Burndown Chart');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the burndown chart for the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burndown.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burndown--plus.png');\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Returns the previously injected factory (e.g. in tests), or a new\n     * instance (e.g. in production).\n     *\n     * @return Tracker_HierarchyFactory\n     */\n    public function getHierarchyFactory()\n    {\n        if ($this->hierarchy_factory == null) {\n            $this->hierarchy_factory = Tracker_HierarchyFactory::instance();\n        }\n        return $this->hierarchy_factory;\n    }\n\n    /**\n     * Provides a way to inject the HierarchyFactory, since it cannot be done\n     * in the constructor.\n     *\n     * @param Tracker_HierarchyFactory $hierarchy_factory\n     */\n    public function setHierarchyFactory($hierarchy_factory)\n    {\n        $this->hierarchy_factory = $hierarchy_factory;\n    }\n\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $html  = $this->fetchBurndownReadOnly($artifact);\n        $html .= $this->fetchBurndownCacheGenerationButton($artifact);\n\n        return $html;\n    }\n\n    public function fetchBurndownReadOnly(Artifact $artifact)\n    {\n        $user               = $this->getCurrentUser();\n        $burndown_presenter = $this->buildPresenter($artifact, $user);\n\n        return $this->renderPresenter($burndown_presenter);\n    }\n\n    public function buildPresenter(Artifact $artifact, PFUser $user)\n    {\n        $warning                      = \"\";\n        $burndown_rest_representation = null;\n\n        try {\n            $value_retriever = $this->getBurndownConfigurationValueRetriever();\n\n            $burndown_data = $this->getBurndownData(\n                $artifact,\n                $user,\n                $value_retriever->getTimePeriod($artifact, $user)\n            );\n\n            if ($burndown_data->isBeingCalculated()) {\n                $warning = dgettext(\n                    'tuleap-tracker',\n                    'Burndown is under calculation. It will be available in a few minutes.'\n                );\n            }\n\n            $burndown_rest_representation = $burndown_data->getRESTRepresentation();\n        } catch (BurndownCacheIsCurrentlyCalculatedException $error) {\n            $burndown_representation = null;\n            $warning                 = $error->getMessage();\n        } catch (Tracker_FormElement_Chart_Field_Exception $error) {\n            $burndown_representation = null;\n            $warning                 = $error->getMessage();\n        }\n\n        $assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n\n        $css_file_url = $assets->getFileURL('burndown-chart.css');\n        $GLOBALS['HTML']->includeFooterJavascriptFile($assets->getFileURL('burndown-chart.js'));\n\n        return new BurndownFieldPresenter(\n            $user,\n            $css_file_url,\n            $warning,\n            $burndown_rest_representation\n        );\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $html    .= '<img src=\"' . $this->getBurndownImageUrl($artifact) . '\" alt=\"' .\n            $purifier->purify($this->getLabel()) . '\" width=\"390\" height=\"400\" />';\n\n        return $html;\n    }\n\n    private function fetchBurndownCacheGenerationButton(Artifact $artifact)\n    {\n        $user = $this->getCurrentUser();\n\n        $html = \"\";\n        if (\n            $user->isAdmin($artifact->getTracker()->getGroupId())\n            && $this->getBurndownCacheChecker()->isCacheBurndownAlreadyAsked($artifact) === false\n            && $this->getBurndownConfigurationValueChecker()->areBurndownFieldsCorrectlySet($artifact, $user)\n            && ! strpos($_SERVER['REQUEST_URI'], 'from_agiledashboard')\n        ) {\n            $html .= '<a class=\"btn chart-cache-button-generate\" data-toggle=\"modal\" href=\"#burndown-generate\">' .\n                dgettext('tuleap-tracker', 'Force cache regeneration') . '</a>';\n\n            $html .= $this->fetchBurndownGenerationModal($artifact);\n        }\n\n        return $html;\n    }\n\n    private function fetchBurndownGenerationModal(Artifact $artifact)\n    {\n        $header = dgettext('tuleap-tracker', 'Force cache regeneration');\n\n        $body = dgettext('tuleap-tracker', 'Do you really want to force burndown cache generation? Cache generation will end up on a non availability of burndown for few minutes.');\n\n        $cancel = dgettext('tuleap-tracker', 'Cancel');\n\n        $generate = dgettext('tuleap-tracker', 'Force cache regeneration');\n\n        return '<div id=\"burndown-generate\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-header\">\n                    <h3>' . $header . '</h3>\n                </div>\n                <div class=\"modal-body\">\n                   ' . $body . '\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">' . $cancel . '</button>\n                    <a href=\"?aid=' . $artifact->getId() . '&func=burndown-cache-generate&field=' . $this->getId() . '\"\n                        class=\"btn btn-primary force-burndown-generation\" name=\"add-keys\">' . $generate . '</a>\n                </div>\n            </div>';\n    }\n\n    /**\n     *\n     * @param Codendi_Request               $request\n     * @param PFUser                        $current_user\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case self::FUNC_SHOW_BURNDOWN:\n                try {\n                    $artifact_id = $request->getValidated('src_aid', 'uint', 0);\n                    $artifact    = $this->getArtifactFactory()->getArtifactById($artifact_id);\n                    if (! $artifact) {\n                        return;\n                    }\n                    $this->fetchBurndownImage($artifact, $current_user);\n                } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n                    $this->displayErrorImage($e->getMessage());\n                } catch (BurndownCacheIsCurrentlyCalculatedException $e) {\n                    $this->displayErrorImage(dgettext('tuleap-tracker', 'Burndown is under calculation. It will be available in few minutes.'));\n                }\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n        }\n    }\n\n    /**\n     * Render a burndown image based on $artifact artifact links\n     *\n     *\n     * @throws Tracker_FormElement_Chart_Field_Exception\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function fetchBurndownImage(Artifact $artifact, PFUser $user)\n    {\n        if ($this->userCanRead($user)) {\n            $burndown_data = $this->buildBurndownDataForLegacy($user, $artifact);\n\n            if ($burndown_data->isBeingCalculated() === true) {\n                throw new BurndownCacheIsCurrentlyCalculatedException();\n            } else {\n                $this->getBurndown($burndown_data)->display();\n            }\n        } else {\n            throw new Tracker_FormElement_Chart_Field_Exception(\n                dgettext('tuleap-tracker', 'You are not allowed to access this field.')\n            );\n        }\n    }\n\n    /**\n     * Export form element properties into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement &$root The root element of the form element\n     *\n     * @return void\n     */\n    public function exportPropertiesToXML(&$root)\n    {\n        $child = $root->addChild('properties');\n\n        $child->addAttribute('use_cache', '1');\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset): ArtifactFieldValueFullRepresentation\n    {\n        $artifact     = $changeset->getArtifact();\n        $form_element = $this->getFormElementFactory()->getFormElementById($this->getId());\n\n        $artifact_field_value_representation = new ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_representation->build(\n            $this->getId(),\n            $this->getFormElementFactory()->getType($form_element),\n            $this->getLabel(),\n            $this->getBurndownDataForREST(\n                $artifact,\n                $user,\n                $this->getTimePeriodForRESTRepresentation($artifact, $user)\n            )->getRESTRepresentation()\n        );\n\n        return $artifact_field_value_representation;\n    }\n\n    private function getTimePeriodForRESTRepresentation(Artifact $artifact, PFUser $user)\n    {\n        $calculator = $this->getTimeframeCalculator();\n\n        return $calculator->buildTimePeriodWithoutWeekendForArtifactForREST($artifact, $user, $this->getLogger());\n    }\n\n    protected function getLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger(self::LOG_IDENTIFIER);\n    }\n\n    /**\n     * @return Tracker_Chart_Data_Burndown\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function getBurndownData(Artifact $artifact, PFUser $user, TimePeriodWithoutWeekEnd $time_period)\n    {\n        $builder = $this->getBurndownDataBuilderForREST();\n        return $builder->build($artifact, $user, $time_period);\n    }\n\n    /**\n     * @return Tracker_Chart_Data_Burndown\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function getBurndownDataForREST(Artifact $artifact, PFUser $user, TimePeriodWithoutWeekEnd $time_period)\n    {\n        return $this->getBurndownData($artifact, $user, $time_period);\n    }\n\n\n    private function getSystemEventManager()\n    {\n        return SystemEventManager::instance();\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the element for the submit masschange form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $output   = '';\n        if ($format == Codendi_Mail::FORMAT_HTML) {\n            $output .= '<img src=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . $this->getBurndownImageUrl($artifact) . '\" alt=\"' . $purifier->purify($this->getLabel()) . '\" width=\"640\" height=\"480\" />';\n            $output .= '<p><em>' . dgettext('tuleap-tracker', 'Please note that the image above is rendered in real time so it represents burndown as of today, not as when the email was sent.') . '</em></p>';\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= $this->getBurndownMessageFetcher()->fetchWarnings($this, $this->getChartFieldUsage());\n        $html .= '<img src=\"' . TRACKER_BASE_URL . '/images/fake-burndown-admin.png\" />';\n        $html .= '<a class=\"btn chart-cache-button-generate\" disabled=\"disabled\">' .\n            dgettext('tuleap-tracker', 'Force cache regeneration') .\n            '</a>';\n\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n    }\n\n    public function getQuerySelect()\n    {\n    }\n\n    public function getQueryFrom()\n    {\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n    }\n\n    protected function getValueDao()\n    {\n    }\n\n    /**\n     * Display a png image with the given error message\n     *\n     * @param String $msg\n     */\n    protected function displayErrorImage($msg)\n    {\n        $error = new ErrorChart(dgettext('tuleap-tracker', 'Unable to render the chart'), $msg, 640, 480);\n        $error->Stroke();\n    }\n\n    /**\n     * Returns a Burndown rendering object for given data\n     *\n     *\n     * @return \\Tracker_Chart_BurndownView\n     */\n    protected function getBurndown(Tracker_Chart_Data_Burndown $burndown_data)\n    {\n        return new Tracker_Chart_BurndownView($burndown_data);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Integer $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Return the relative url to the burndown chart image.\n     *\n     *\n     * @return String\n     */\n    public function getBurndownImageUrl(Artifact $artifact)\n    {\n        $url_query = http_build_query(\n            [\n                'formElement' => $this->getId(),\n                'func'        => self::FUNC_SHOW_BURNDOWN,\n                'src_aid'     => $artifact->getId(),\n            ]\n        );\n\n        return TRACKER_BASE_URL . '/?' . $url_query;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitBurndown($this);\n    }\n\n    /**\n     * @return BurndownFieldDao The dao\n     */\n    protected function getDao()\n    {\n        return new BurndownFieldDao();\n    }\n    /**\n     * Return the Field_Date_Dao\n     *\n     * @return ComputedFieldDao The dao\n     */\n    protected function getComputedDao()\n    {\n        return new ComputedFieldDao();\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n        try {\n            if (\n                $previous_changeset !== null &&\n                $this->getBurndownCacheChecker()->isCacheBurndownAlreadyAsked($artifact) === false &&\n                $this->getBurdownConfigurationFieldRetriever()->getBurndownRemainingEffortField($artifact, $submitter)\n            ) {\n                if ($this->getBurndownConfigurationValueChecker()->hasConfigurationChange($artifact, $submitter, $new_changeset) === true) {\n                    $this->getBurndownCacheGenerator()->forceBurndownCacheGeneration($artifact->getId());\n                }\n            }\n        } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n        }\n    }\n\n    /**\n     * @return ChartConfigurationFieldRetriever\n     */\n    protected function getBurdownConfigurationFieldRetriever()\n    {\n        return new ChartConfigurationFieldRetriever(\n            $this->getFormElementFactory(),\n            SemanticTimeframeBuilder::build(),\n            $this->getLogger()\n        );\n    }\n\n    /**\n     * @return ChartConfigurationValueRetriever\n     */\n    private function getBurndownConfigurationValueRetriever()\n    {\n        return new ChartConfigurationValueRetriever(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getTimeframeCalculator(),\n            $this->getLogger()\n        );\n    }\n\n    /**\n     * @return ChartConfigurationValueChecker\n     */\n    private function getBurndownConfigurationValueChecker()\n    {\n        return new ChartConfigurationValueChecker(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueRetriever()\n        );\n    }\n\n    private function getBurndownMessageFetcher()\n    {\n        return new ChartMessageFetcher(\n            $this->getHierarchyFactory(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            EventManager::instance(),\n            UserManager::instance()\n        );\n    }\n\n    private function getChartFieldUsage()\n    {\n        $use_start_date       = true;\n        $use_duration         = true;\n        $use_capacity         = false;\n        $use_hierarchy        = true;\n        $use_remaining_effort = true;\n\n        return new ChartFieldUsage(\n            $use_start_date,\n            $use_duration,\n            $use_capacity,\n            $use_hierarchy,\n            $use_remaining_effort\n        );\n    }\n\n    /**\n     * @return ChartCachedDaysComparator\n     */\n    private function getCachedDaysComparator()\n    {\n        return new ChartCachedDaysComparator($this->getLogger());\n    }\n\n    /**\n     * For testing purpose\n     */\n    protected function renderPresenter(BurndownFieldPresenter $burndown_presenter)\n    {\n        $renderer = TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n\n        return $renderer->renderToString('burndown-field', $burndown_presenter);\n    }\n\n    /**\n     * @return BurndownDataBuilderForREST\n     */\n    private function getBurndownDataBuilderForREST()\n    {\n        return new BurndownDataBuilderForREST(\n            $this->getLogger(),\n            $this->getRemainingEffortAdder(),\n            new BurndownCommonDataBuilder(\n                $this->getLogger(),\n                $this->getBurdownConfigurationFieldRetriever(),\n                $this->getBurndownConfigurationValueRetriever(),\n                $this->getBurndownCacheChecker()\n            )\n        );\n    }\n\n    /**\n     * @return BurndownCacheGenerationChecker\n     */\n    private function getBurndownCacheChecker()\n    {\n        return new BurndownCacheGenerationChecker(\n            $this->getLogger(),\n            $this->getBurndownCacheGenerator(),\n            $this->getSystemEventManager(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueChecker(),\n            $this->getComputedDao(),\n            $this->getCachedDaysComparator(),\n            $this->getRemainingEffortAdder()\n        );\n    }\n\n    /**\n     * @return BurndownCacheGenerator\n     */\n    private function getBurndownCacheGenerator()\n    {\n        return new BurndownCacheGenerator($this->getSystemEventManager());\n    }\n\n    /**\n     * @return BurndownRemainingEffortAdderForREST\n     */\n    private function getRemainingEffortAdder()\n    {\n        return new BurndownRemainingEffortAdderForREST(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getComputedDao()\n        );\n    }\n\n    /**\n     * For testing purpose\n     */\n    protected function buildBurndownDataForLegacy(PFUser $user, Artifact $artifact)\n    {\n        $time_period = $this->getBurndownConfigurationValueRetriever()->getTimePeriod($artifact, $user);\n        $builder     = $this->getBurndownDataBuilderForLegacy();\n\n        return $builder->build($artifact, $user, $time_period);\n    }\n\n    private function getBurndownDataBuilderForLegacy()\n    {\n        return new BurndownDataBuilderForLegacy(\n            $this->getLogger(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueRetriever(),\n            $this->getBurndownCacheChecker(),\n            $this->getBurndownAdderForLegacy()\n        );\n    }\n\n    /**\n     * @return BurndownRemainingEffortAdderForLegacy\n     */\n    private function getBurndownAdderForLegacy()\n    {\n        return new BurndownRemainingEffortAdderForLegacy(\n            $this->getBurdownConfigurationFieldRetriever(),\n            new UserWithReadAllPermissionBuilder()\n        );\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getTimeframeCalculator(): IComputeTimeframes\n    {\n        return SemanticTimeframeBuilder::build()->getSemantic($this->getTracker())->getTimeframeCalculator();\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getArtifactFactory(): Tracker_ArtifactFactory\n    {\n        return Tracker_ArtifactFactory::instance();\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValueComputed;\nuse Tuleap\\Tracker\\DAO\\ComputedDao;\nuse Tuleap\\Tracker\\FormElement\\ComputedFieldCalculator;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDaoCache;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\FieldCalculator;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldComputedValueFullRepresentation;\n\nclass Tracker_FormElement_Field_Computed extends Tracker_FormElement_Field_Float //phpcs:ignore\n{\n    public const FIELD_VALUE_IS_AUTOCOMPUTED = 'is_autocomputed';\n    public const FIELD_VALUE_MANUAL          = 'manual_value';\n\n    public $default_properties = [\n        'target_field_name' => [\n            'value' => null,\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n        'fast_compute' => [\n            'value' => null,\n            'type'  => 'upgrade_button',\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n    ];\n\n    public function __construct(\n        $id,\n        $tracker_id,\n        $parent_id,\n        $name,\n        $label,\n        $description,\n        $use_it,\n        $scope,\n        $required,\n        $notifications,\n        $rank,\n        ?Tracker_FormElement $original_field = null,\n    ) {\n        parent::__construct(\n            $id,\n            $tracker_id,\n            $parent_id,\n            $name,\n            $label,\n            $description,\n            $use_it,\n            $scope,\n            $required,\n            $notifications,\n            $rank,\n            $original_field\n        );\n\n        $this->doNotDisplaySpecialPropertiesAtFieldCreation();\n    }\n\n    private function doNotDisplaySpecialPropertiesAtFieldCreation()\n    {\n        $this->clearFastCompute();\n        $this->clearTargetFieldName();\n        $this->clearCache();\n    }\n\n    private function clearFastCompute()\n    {\n        if ($this->getProperty('fast_compute') === null) {\n            unset($this->default_properties['fast_compute']);\n        }\n    }\n\n    private function clearTargetFieldName()\n    {\n        if ($this->getName() === null) {\n            unset($this->default_properties['target_field_name']);\n        }\n    }\n\n    private function clearCache()\n    {\n        $this->cache_specific_properties = null;\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n\n    /**\n     * @return float|null if there are no data (/!\\ it's on purpose, otherwise we can mean to distinguish if there is data but 0 vs no data at all, for the graph plot)\n     */\n    public function getComputedValue(\n        PFUser $user,\n        Artifact $artifact,\n        $timestamp = null,\n    ) {\n        return $this->getCalculator()->calculate(\n            [$artifact->getId()],\n            $timestamp,\n            true,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    public function getComputedValueWithNoStopOnManualValue(Artifact $artifact)\n    {\n        $computed_children_to_fetch    = [];\n        $artifact_ids_to_fetch         = [];\n        $has_manual_value_in_children  = false;\n        $target_field_name             = $this->getName();\n        $dar                           = $this->getDao()->getComputedFieldValues(\n            [$artifact->getId()],\n            $target_field_name,\n            $this->getId(),\n            false\n        );\n        $manual_value_for_current_node = $this->getValueDao()->getManuallySetValueForChangeset(\n            $artifact->getLastChangeset()->getId(),\n            $this->getId()\n        );\n\n        if ($dar) {\n            foreach ($dar as $row) {\n                if ($row['id'] !== null) {\n                    $artifact_ids_to_fetch[] = $row['id'];\n                }\n                if ($row['type'] === 'computed') {\n                    $computed_children_to_fetch[] = $row['id'];\n                }\n                if (isset($row[$row['type'] . '_value'])) {\n                    $has_manual_value_in_children = true;\n                }\n            }\n        }\n\n        if (($manual_value_for_current_node['value'] ?? null) !== null && $has_manual_value_in_children) {\n            $computed_children = 0;\n            if (count($computed_children_to_fetch) > 0) {\n                $computed_children = $this->getStandardCalculationMode($computed_children_to_fetch);\n            }\n            $manually_set_children = $this->getStopAtManualSetFieldMode([$artifact->getId()]);\n            return $manually_set_children + $computed_children;\n        }\n\n        if (count($artifact_ids_to_fetch) === 0 && $has_manual_value_in_children) {\n            return $this->getStopAtManualSetFieldMode([$artifact->getId()]);\n        }\n\n        if ($has_manual_value_in_children && ($manual_value_for_current_node['value'] ?? null) === null) {\n            return $this->getStandardCalculationMode([$artifact->getId()]);\n        }\n\n        if (count($artifact_ids_to_fetch) === 0) {\n            return null;\n        }\n\n        return $this->getStandardCalculationMode($artifact_ids_to_fetch);\n    }\n\n    public function getStopAtManualSetFieldMode(array $artifact_ids)\n    {\n        return $this->getCalculator()->calculate(\n            $artifact_ids,\n            null,\n            false,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    public function getFieldEmptyMessage()\n    {\n        return dgettext('tuleap-tracker', 'Empty');\n    }\n\n    public function getStandardCalculationMode(array $artifact_ids)\n    {\n        return $this->getCalculator()->calculate(\n            $artifact_ids,\n            null,\n            true,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    protected function getNoValueLabel()\n    {\n        return \"<span class='empty_value auto-computed-label'>\" . $this->getFieldEmptyMessage() . \"</span>\";\n    }\n\n    protected function getComputedValueWithNoLabel(Artifact $artifact, PFUser $user, $stop_on_manual_value)\n    {\n        if ($stop_on_manual_value) {\n            $empty_array    = [];\n            $computed_value = $this->getComputedValue($user, $artifact, null, $empty_array);\n        } else {\n            $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        }\n\n        return ($computed_value !== null) ? $computed_value : $this->getFieldEmptyMessage();\n    }\n\n    protected function processUpdate(\n        Tracker_IDisplayTrackerLayout $layout,\n        $request,\n        $current_user,\n        $redirect = false,\n    ) {\n        $formElement_data = $request->get('formElement_data');\n\n        if ($formElement_data !== false) {\n            $default_specific_properties   = [\n                'fast_compute'      => '1',\n                'target_field_name' => $formElement_data['name'],\n            ];\n            $submitted_specific_properties = isset($formElement_data['specific_properties']) ? $formElement_data['specific_properties'] : [];\n\n            $merged_specific_properties = array_merge(\n                $default_specific_properties,\n                $submitted_specific_properties\n            );\n\n            $formElement_data['specific_properties'] = $merged_specific_properties;\n            $request->set('formElement_data', $formElement_data);\n\n            $GLOBALS['Response']->addFeedback(\n                'warning',\n                sprintf(dgettext('tuleap-tracker', 'You will not able to edit by hand the field \"%1$s\" since no update and submit permissions will be granted.'), $this->getName())\n            );\n        }\n\n        parent::processUpdate(\n            $layout,\n            $request,\n            $current_user,\n            $redirect\n        );\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        $form_element_data['specific_properties']['fast_compute']      = '1';\n        $form_element_data['specific_properties']['target_field_name'] = $this->name;\n        $this->storeProperties($form_element_data['specific_properties']);\n\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function exportPropertiesToXML(&$root)\n    {\n        $default_value = $this->getDefaultValue();\n        if ($default_value === null) {\n            return;\n        }\n\n        $child_properties = $root->addChild('properties');\n        $child_properties->addAttribute('default_value', (string) $default_value[self::FIELD_VALUE_MANUAL]);\n    }\n\n    /**\n     * for testing purpose\n     *\n     * @return FieldCalculator\n     */\n    protected function getCalculator()\n    {\n        return new FieldCalculator(new ComputedFieldCalculator(new ComputedFieldDao()));\n    }\n\n\n    public function validateValue($value)\n    {\n        if (! is_array($value)) {\n            return false;\n        }\n\n        if (! isset($value[self::FIELD_VALUE_MANUAL]) && ! isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED])) {\n            return false;\n        }\n\n        if (\n            isset($value[self::FIELD_VALUE_MANUAL]) && isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) &&\n                $value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n        ) {\n            return $value[self::FIELD_VALUE_MANUAL] === '';\n        }\n\n        if (isset($value[self::FIELD_VALUE_MANUAL])) {\n            $is_a_float = preg_match('/^' . $this->pattern . '$/', $value[self::FIELD_VALUE_MANUAL]) === 1;\n            if (! $is_a_float) {\n                $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            }\n            return $is_a_float;\n        }\n\n        return true;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $current_user   = UserManager::instance()->getCurrentUser();\n        $computed_value = $this->getComputedValueWithNoLabel($artifact, $current_user, false);\n\n        $html  = '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $purifier->purify($this->getId()) . '\">\n                    <div class=\"input-append\">';\n        $html .= $this->fetchArtifactValue($artifact, $value, $submitted_values);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= $this->fetchComputedValueWithLabel($computed_value);\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function fetchBackToAutocomputedButton($is_disabled)\n    {\n        $disabled = '';\n        if ($is_disabled) {\n            $disabled = 'disabled=\"disabled\"';\n        }\n        $html  = '<a class=\"btn btn-small auto-compute\" ' . $disabled . ' data-test=\"switch-to-autocompute\">\n                    <i class=\"fas fa-redo fa-flip-horizontal\"></i>';\n        $html .= dgettext('tuleap-tracker', 'Auto-compute');\n        $html .= '</a>';\n\n        return $html;\n    }\n\n    private function fetchComputedValueWithLabel($computed_value)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        $html  = '<span class=\"original-value\">';\n        $html .= dgettext('tuleap-tracker', 'Computed value:');\n        $html .= $purifier->purify($computed_value) . '</span>';\n\n        return $html;\n    }\n\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $displayed_value = null;\n        $is_autocomputed = true;\n        if ($value !== null) {\n            $displayed_value = $value->getValue();\n            $is_autocomputed = ! $value->isManualValue();\n        }\n\n        if (isset($submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL])) {\n            $displayed_value = $submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL];\n        }\n\n        return $this->fetchComputedInputs($displayed_value, $is_autocomputed);\n    }\n\n    private function fetchComputedInputs($displayed_value, $is_autocomputed)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '<input type=\"text\" class=\"field-computed\"\n            data-test=\"' . $this->getName() . '\"\n            name=\"artifact[' . $purifier->purify($this->getId()) . '][' . self::FIELD_VALUE_MANUAL . ']\"\n            value=\"' . $purifier->purify($displayed_value) . '\" />';\n        $html    .= '<input type=\"hidden\"\n            name=\"artifact[' . $purifier->purify($this->getId()) . '][' . self::FIELD_VALUE_IS_AUTOCOMPUTED . ']\"\n            value=\"' . $purifier->purify((int) $is_autocomputed) . '\" />';\n\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $changeset_value = null,\n    ) {\n        $value    = null;\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($changeset_value && $changeset_value->isManualValue()) {\n            $value = $changeset_value->getValue();\n        }\n\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        if ($computed_value === null) {\n            $html_computed_value = '<span class=\"auto-computed\">' . $purifier->purify($this->getFieldEmptyMessage()) . '</span>';\n        } else {\n            $html_computed_value = $purifier->purify($computed_value);\n        }\n\n        $html_computed_complete_value = $html_computed_value . '<span class=\"auto-computed\"> (' .\n            dgettext('tuleap-tracker', 'autocomputed') . ')</span>';\n\n        if ($value === null) {\n            $value = $html_computed_complete_value;\n        }\n\n        $user              = $this->getCurrentUser();\n        $time_frame_helper = $this->getArtifactTimeframeHelper();\n\n        if ($time_frame_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $value = $value . '<span class=\"artifact-timeframe-helper\"> (' . $time_frame_helper->getEndDateArtifactHelperForReadOnlyView($user, $artifact) . ')</span>';\n        }\n\n        $html = '<div class=\"auto-computed-label\" data-test=\"computed-value\">' . $value . '</div>' .\n            '<div class=\"back-to-autocompute\">' . $html_computed_complete_value . '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $changeset      = $artifact->getLastChangesetWithFieldValue($this);\n        $computed_value = null;\n        if ($changeset !== null) {\n            $computed_value = $this->getComputedValue($user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n        }\n\n        return (string) ($computed_value ?? \"-\");\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $changeset      = $artifact->getLastChangesetWithFieldValue($this);\n        $computed_value = null;\n        if ($changeset !== null) {\n            $current_user   = UserManager::instance()->getCurrentUser();\n            $computed_value = $this->getComputedValue($current_user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n        }\n\n        return (string) ($computed_value ?? \"-\");\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $current_user = UserManager::instance()->getCurrentUser();\n        $artifact     = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n\n        $changeset = $this->getTrackerChangesetFactory()->getChangeset($artifact, $changeset_id);\n\n        return (string) $this->getComputedValue($current_user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($changeset->getArtifact());\n        $manual_value   = $this->getManualValueForChangeset($changeset);\n\n        $artifact_field_value_full_representation = new ArtifactFieldComputedValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $manual_value === null,\n            $computed_value,\n            $this->getManualValueForChangeset($changeset)\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * @return int|float|null\n     */\n    private function getManualValueForChangeset(Tracker_Artifact_Changeset $artifact_changeset)\n    {\n        $changeset_value = $artifact_changeset->getValue($this);\n        if ($changeset_value && $changeset_value->isManualValue()) {\n            return $changeset_value->getNumeric();\n        }\n\n        return null;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if ($this->isAutocomputedDisabledAndNoManualValueProvided($value) || isset($value['value'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'Expected format for a computed field ' .\n                ' : {\"field_id\" : 15458, \"manual_value\" : 12} or {\"field_id\" : 15458, \"is_autocomputed\" : true}'\n            );\n        }\n\n        return $this->getRestFieldData($value);\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAutocomputedDisabledAndNoManualValueProvided(array $value)\n    {\n        return isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) && $value[self::FIELD_VALUE_IS_AUTOCOMPUTED] === false\n            && (! isset($value[self::FIELD_VALUE_MANUAL]) || $value[self::FIELD_VALUE_MANUAL] === null);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $html = '<div class=\"input-append\">';\n\n        $default_value          = $this->getDefaultValue();\n        $default_value_in_input = '';\n        if ($default_value !== null) {\n            $default_value_in_input = (string) $default_value[self::FIELD_VALUE_MANUAL];\n        }\n\n        $html .= $this->fetchComputedInputs($default_value_in_input, true);\n        $html .= $this->fetchBackToAutocomputedButton(true);\n        $html .= $this->fetchComputedValueWithLabel($this->getFieldEmptyMessage());\n        $html .= \"</div>\";\n\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Computed value');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Compute value (sum of numerical field) from linked artifacts.<p><strong>Note</strong>: <ul><li>Calculation will not check linked artifacts permissions AND will only calculate the field values of linked artifacts that have the same field name.</li></ul>');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/sum.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/sum.png');\n    }\n\n    protected function getDao(): ComputedFieldDao\n    {\n        return new ComputedFieldDao();\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return $this->buildFieldForSubmission(\n            'tracker-formelement-edit-for-modal',\n            'auto-computed-for-modal'\n        );\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return $this->buildFieldForSubmission(\n            'tracker-formelement-edit-for-submit',\n            'auto-computed-for-submit'\n        );\n    }\n\n    private function buildFieldForSubmission(string $submit_class, string $auto_computed_class)\n    {\n        if (! $this->userCanSubmit()) {\n            return '';\n        }\n\n        $default_value = $this->getDefaultValue();\n        $extra_class   = '';\n        if ($default_value !== null) {\n            $extra_class = \"in-edition with-default-value\";\n        }\n\n        $purifier = Codendi_HTMLPurifier::instance();\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $html  = '<div>';\n        $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed editable ' . $extra_class . '\">';\n\n        $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n        $html .= '<button type=\"button\" title=\"' . $title . '\" class=\"tracker_formelement_edit ' . $submit_class . '\">' . $purifier->purify($this->getLabel())  . $required . '</button>';\n        $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n            '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel())  . $required . '</label>';\n\n        $html .= '<div class=\"input-append\" data-field-id=\"' . $this->getId() . '\">';\n\n        $default_value_in_input = '';\n        $is_autocomputed        = true;\n        if ($default_value !== null) {\n            $default_value_in_input = (string) $default_value[self::FIELD_VALUE_MANUAL];\n            $is_autocomputed        = false;\n        }\n\n        $html .= $this->fetchComputedInputs($default_value_in_input, $is_autocomputed);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= $this->fetchComputedValueWithLabel(\n            dgettext('tuleap-tracker', 'Empty')\n        );\n\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    /**\n     * Returns the default value for this field, or null if no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        $property = $this->getProperty('default_value');\n        if ($property === null) {\n            return null;\n        }\n\n        return [\n            self::FIELD_VALUE_IS_AUTOCOMPUTED => false,\n            self::FIELD_VALUE_MANUAL => (float) $property,\n        ];\n    }\n\n    public function getDefaultRESTValue()\n    {\n        $property = $this->getProperty('default_value');\n        if ($property === null) {\n            return null;\n        }\n\n        return [\n            'type'  => self::FIELD_VALUE_MANUAL,\n            'value' => (float) $property,\n        ];\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $required = $this->isRequired() ? ' <span class=\"highlight\">*</span>' : '';\n\n        if ($this->userCanUpdate()) {\n            $html .= '<div class=\"field-masschange tracker_artifact_field tracker_artifact_field-computed editable\"\n                         data-field-id=\"' . $purifier->purify($this->getId()) . '\">';\n\n            $html .= '<div class=\"edition-mass-change\">';\n            $html .= '<label for=\"tracker_artifact_' . $purifier->purify($this->getId()) . '\"\n                        title=\"' . $purifier->purify($this->description) . '\"  class=\"tracker_formelement_label\">' .\n                        $purifier->purify($this->getLabel()) . $required . '</label>';\n            $html .= '<div class=\" input-append\">';\n            $html .= $this->fetchSubmitValueMasschange();\n            $html .= '</div>';\n            $html .= '</div>';\n\n            $html .= '<div class=\"display-mass-change display-mass-change-hidden\">';\n            $html .= '<button class=\"tracker_formelement_edit edit-mass-change-autocompute\" type=\"button\">' .\n                        $purifier->purify($this->getLabel()) . $required . '</button>';\n            $html .= '<span class=\"auto-computed\">';\n            $html .= $purifier->purify(ucfirst(dgettext('tuleap-tracker', 'autocomputed')));\n            $html .= '</span>';\n            $html .= '</div>';\n\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n        $unchanged = dgettext('tuleap-tracker', 'Unchanged');\n        $html      = $this->fetchComputedInputs($unchanged, false);\n        $html     .= $this->fetchBackToAutocomputedButton(false);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        if ($computed_value === null) {\n            $computed_value = $this->getFieldEmptyMessage();\n        }\n        $autocomputed_label = ' (' . dgettext('tuleap-tracker', 'autocomputed') . ')';\n        $class              = 'auto-computed';\n\n        $last_changset = $artifact->getLastChangesetWithFieldValue($this);\n        $changeset     = null;\n        if ($last_changset) {\n            $changeset = $last_changset->getValue($this);\n        }\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $html = \"\";\n        if (! $this->userCanRead()) {\n            return $html;\n        }\n\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($is_field_read_only || ! $this->userCanUpdate()) {\n            if (isset($changeset) && $changeset->getValue() !== null) {\n                $computed_value     = $changeset->getValue();\n                $autocomputed_label = '';\n                $class              = '';\n            }\n\n            if (isset($submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL])) {\n                $computed_value     = $submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL];\n                $autocomputed_label = '';\n                $class              = '';\n            }\n\n            $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed\">';\n            $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n                    '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel()) . $required . '</label>';\n\n            $html .= '<span class=\"' . $class . '\">' . $computed_value . $autocomputed_label . '</span></div>';\n\n            return $html;\n        }\n\n        $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed editable\">';\n\n        $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n        $html .= '<button type=\"button\" title=\"' . $title . '\" class=\"tracker_formelement_edit tracker-formelement-edit-for-modal\">' . $purifier->purify($this->getLabel())  . $required . '</button>';\n        $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n                '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel()) . $required . '</label>';\n\n        $html .= '<span class=\"auto-computed auto-computed-for-modal\">' . $computed_value . ' (' .\n        dgettext('tuleap-tracker', 'autocomputed') . ')</span>';\n\n        $html .= '<div class=\"input-append add-field auto-computed-for-modal-append\" data-field-id=\"' . $this->getId() . '\">';\n        $html .= '<div>';\n        $html .= $this->fetchArtifactValue($artifact, $changeset, $submitted_values);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= '<div>';\n        $html .= $this->fetchComputedValueWithLabel($computed_value);\n        $html .= '</div>';\n\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    protected function getValueDao()\n    {\n        return new ComputedDao();\n    }\n\n    public function isArtifactValueAutocomputed(Artifact $artifact)\n    {\n        if (! $artifact->getLastChangeset()->getValue($this)) {\n            return true;\n        }\n        return $artifact->getLastChangeset()->getValue($this)->getValue() === null;\n    }\n\n    /**\n     * Fetch the html code to display the field in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCard(Artifact $artifact, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        $value                      = $this->fetchCardValue($artifact, $display_preferences);\n        $computed_value             = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        $data_field_id              = '';\n        $data_field_type            = '';\n        $data_field_is_autocomputed = '';\n        $data_field_old_value       = '';\n        $is_autocomputed            = $this->isArtifactValueAutocomputed($artifact);\n        $purifier                   = Codendi_HTMLPurifier::instance();\n\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($this->userCanUpdate() && ! $is_field_frozen) {\n            $data_field_id              = 'data-field-id=\"' . $purifier->purify($this->getId()) . '\"';\n            $data_field_type            = 'data-field-type=\"' . $purifier->purify($this->getFormElementFactory()->getType($this)) . '\"';\n            $data_field_is_autocomputed = 'data-field-is-autocomputed=\"' . $is_autocomputed . '\"';\n            $data_field_old_value       = 'data-field-old-value=\"' . $value . '\"';\n        }\n\n        $html = '<tr>\n                    <td>' . $purifier->purify($this->getLabel()) . ':\n                    </td>\n                    <td class=\"autocomputed_override\">' .\n                        $this->fetchComputedValueWithLabel($computed_value) .\n                        '<a href=\"#\" ' . $data_field_id . '><i class=\"fas fa-redo fa-flip-horizontal\"></i>' .\n                        dgettext('tuleap-tracker', 'Auto-compute')\n                        . '</a>' .\n                    '</td>\n                    <td class=\"valueOf_' . $purifier->purify($this->getName()) . '\"' .\n                        $data_field_id .\n                        $data_field_type .\n                        $data_field_is_autocomputed .\n                        $data_field_old_value .\n                    '>' .\n                        $value .\n                    '</td>\n                </tr>';\n\n        return $html;\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $row = $this->getValueDao()->searchById($value_id, $this->id)->getRow();\n\n        if ($row && $row['value'] !== null) {\n            $is_manual_value = true;\n\n            return new ChangesetValueComputed(\n                $value_id,\n                $changeset,\n                $this,\n                $has_changed,\n                $row['value'],\n                $is_manual_value\n            );\n        }\n\n        $user  = $this->getCurrentUser();\n        $value = $this->getComputedValue($user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n\n        $is_manual_value = false;\n\n        return new ChangesetValueComputed($value_id, $changeset, $this, $has_changed, $value, $is_manual_value);\n    }\n\n    private function getTrackerChangesetFactory()\n    {\n        $factory_builder = new Tracker_Artifact_ChangesetFactoryBuilder();\n        return $factory_builder::build();\n    }\n\n    /** For testing purpose */\n    protected function getCurrentUser()\n    {\n        return UserManager::instance()->getCurrentUser();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $user = $this->getCurrentUser();\n        if (! $this->userCanUpdate($user)) {\n            return true;\n        }\n        $new_value = $this->getStorableValue($value);\n\n        return $this->getValueDao()->create($changeset_value_id, $new_value);\n    }\n\n    private function getStorableValue($value)\n    {\n        $new_value = '';\n\n        if (! is_array($value)) {\n            return $this->retrieveValueFromJson($value);\n        }\n\n        if (isset($value[self::FIELD_VALUE_MANUAL])) {\n            $new_value = $value[self::FIELD_VALUE_MANUAL];\n        }\n\n        return $new_value;\n    }\n\n    private function retrieveValueFromJson($value)\n    {\n        $new_value = json_decode($value);\n\n        if (! isset($new_value->manual_value)) {\n            return null;\n        }\n        return $new_value->manual_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $previous_changeset_value, $value)\n    {\n        if (\n            ! $previous_changeset_value->isManualValue() &&\n            isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) &&\n            $value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n        ) {\n            return false;\n        }\n\n        $new_value = $this->getStorableValue($value);\n\n        if ($previous_changeset_value->getNumeric() === null && $new_value === '') {\n            return false;\n        }\n\n        if ($previous_changeset_value->getNumeric() === null && $new_value !== '') {\n            return true;\n        }\n\n        if ($new_value === '' && $previous_changeset_value->getNumeric() === 0.0) {\n            return true;\n        }\n\n        return (float) $previous_changeset_value->getNumeric() !== (float) $new_value;\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    public function testImport()\n    {\n        return true;\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->validateValue($value);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitComputed($this);\n    }\n\n    /**\n     * @return int | null if no value found\n     */\n    public function getCachedValue(PFUser $user, Artifact $artifact, $timestamp = null)\n    {\n        $dao   = ComputedFieldDaoCache::instance();\n        $value = $dao->getCachedFieldValueAtTimestamp($artifact->getId(), $this->getId(), $timestamp);\n\n        if ($value === false) {\n            return null;\n        }\n        return $value;\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $hasPermission = $this->userCanUpdate();\n        if ($is_submission) {\n            $hasPermission = $this->userCanSubmit();\n        }\n        if ($last_changeset_value === null && ( $this->isAnEmptyValue($submitted_value) || $this->isAnEmptyArray($submitted_value)) && $hasPermission && $this->isRequired()) {\n            $this->setHasErrors(true);\n\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n            return false;\n        } elseif ($hasPermission) {\n            if (\n                ! isset($submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED])\n                && ! isset($submitted_value[self::FIELD_VALUE_MANUAL])\n            ) {\n                return true;\n            }\n            if (\n                ! isset($submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED])\n                || ! $submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n            ) {\n                return $this->isValidRegardingRequiredProperty($artifact, $submitted_value)\n                    && $this->validateField($artifact, $submitted_value);\n            }\n        }\n\n        return true;\n    }\n\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ($this->isAnEmptyArray($submitted_value)) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    private function isAnEmptyArray($value)\n    {\n        return is_array($value) && empty($value);\n    }\n\n    private function isAnEmptyValue($value)\n    {\n        return ! is_array($value) && $value === null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012-present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\ConcurrentVersionsSystem\\CvsDao;\nuse Tuleap\\Date\\TlpRelativeDatePresenterBuilder;\nuse Tuleap\\Forum\\ForumDao;\nuse Tuleap\\Forum\\ForumRetriever;\nuse Tuleap\\Forum\\MessageRetriever;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\News\\NewsDao;\nuse Tuleap\\News\\NewsRetriever;\nuse Tuleap\\Project\\ProjectAccessChecker;\nuse Tuleap\\Project\\RestrictedUserCanAccessProjectVerifier;\nuse Tuleap\\Reference\\ByNature\\ConcurrentVersionsSystem\\CrossReferenceCvsOrganizer;\nuse Tuleap\\Reference\\ByNature\\CrossReferenceByNatureInCoreOrganizer;\nuse Tuleap\\Reference\\ByNature\\Forum\\CrossReferenceForumOrganizer;\nuse Tuleap\\Reference\\ByNature\\News\\CrossReferenceNewsOrganizer;\nuse Tuleap\\Reference\\ByNature\\Wiki\\CrossReferenceWikiOrganizer;\nuse Tuleap\\Reference\\ByNature\\Wiki\\WikiPageFromReferenceValueRetriever;\nuse Tuleap\\Reference\\CrossReferenceByDirectionPresenterBuilder;\nuse Tuleap\\Reference\\CrossReferencePresenterFactory;\nuse Tuleap\\Reference\\CrossReferencesDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\CrossReference\\CrossReferenceFieldRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\View\\Reference\\CrossReferenceFieldPresenterBuilder;\nuse Tuleap\\Reference\\ByNature\\FRS\\CrossReferenceFRSOrganizer;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_CrossReferences extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly\n{\n    public const REST_REF_INDEX          = 'ref';\n    public const REST_REF_URL            = 'url';\n    public const REST_REF_DIRECTION      = 'direction';\n    public const REST_REF_DIRECTION_IN   = 'in';\n    public const REST_REF_DIRECTION_OUT  = 'out';\n    public const REST_REF_DIRECTION_BOTH = 'both';\n\n    public $default_properties = [];\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $criteria_value = CodendiDataAccess::instance()->quoteSmart($criteria_value);\n                $a              = 'A_' . $this->id;\n                return \" INNER JOIN cross_references AS $a\n                         ON (artifact.id = $a.source_id AND $a.source_type = '\" . Artifact::REFERENCE_NATURE . \"' AND $a.target_id = $criteria_value\n                             OR\n                             artifact.id = $a.target_id AND $a.target_type = '\" . Artifact::REFERENCE_NATURE . \"' AND $a.source_id = $criteria_value\n                         )\n                \";\n            }\n        }\n        return '';\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $this->getCrossReferenceListForREST($changeset)\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    private function getCrossReferenceListForREST(Tracker_Artifact_Changeset $changeset)\n    {\n        $crf = new CrossReferenceFactory(\n            $changeset->getArtifact()->getId(),\n            Artifact::REFERENCE_NATURE,\n            $this->getTracker()->getGroupId()\n        );\n        $crf->fetchDatas();\n\n        $list = [];\n        $refs = $crf->getFormattedCrossReferences();\n        if (! empty($refs['target'])) {\n            foreach ($refs['target'] as $refTgt) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refTgt['ref'],\n                    self::REST_REF_URL       => $refTgt['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_OUT,\n                ];\n            }\n        }\n        if (! empty($refs['source'])) {\n            foreach ($refs['source'] as $refSrc) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refSrc['ref'],\n                    self::REST_REF_URL       => $refSrc['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_IN,\n                ];\n            }\n        }\n        if (! empty($refs['both'])) {\n            foreach ($refs['both'] as $refBoth) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refBoth['ref'],\n                    self::REST_REF_URL       => $refBoth['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_BOTH,\n                ];\n            }\n        }\n\n        return $list;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $crossref_fact = $this->getCrossReferencesFactory($artifact_id);\n\n        if ($crossref_fact->getNbReferences()) {\n            $html = $crossref_fact->getHTMLDisplayCrossRefs($with_links = true, $condensed = true);\n        } else {\n            $html = '';\n        }\n        return $html;\n    }\n\n    private function getCrossReferencesFactory($artifact_id)\n    {\n        $crossref_factory = new CrossReferenceFactory($artifact_id, Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crossref_factory->fetchDatas();\n\n        return $crossref_factory;\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report = null)\n    {\n        $html          = '';\n        $crossref_fact = $this->getCrossReferencesFactory($artifact_id);\n\n        if ($crossref_fact->getNbReferences()) {\n            $html = $crossref_fact->getHTMLCrossRefsForCSVExport();\n        }\n\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $value = $this->getCriteriaValue($criteria);\n        if (! $value) {\n            $value = '';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        return '<input type=\"text\" name=\"criteria[' . $this->id . ']\" value=\"' . $hp->purify($this->getCriteriaValue($criteria), CODENDI_PURIFIER_CONVERT_HTML) . '\" />';\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return 'references raw value';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Text_ValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    protected function getValueDao()\n    {\n        return new CrossReferenceDao();\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        //Nothing special to say here\n        return '';\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n       //The field is ReadOnly\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        return null;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $cross_ref_field_presenter_builder = new CrossReferenceFieldPresenterBuilder(\n            new CrossReferenceByDirectionPresenterBuilder(\n                EventManager::instance(),\n                ReferenceManager::instance(),\n                new CrossReferencePresenterFactory(\n                    new CrossReferencesDao(),\n                ),\n                ProjectManager::instance(),\n                new ProjectAccessChecker(\n                    new RestrictedUserCanAccessProjectVerifier(),\n                    EventManager::instance()\n                ),\n                new CrossReferenceByNatureInCoreOrganizer(\n                    new CrossReferenceWikiOrganizer(\n                        ProjectManager::instance(),\n                        new WikiPageFromReferenceValueRetriever(),\n                    ),\n                    new CrossReferenceCvsOrganizer(\n                        ProjectManager::instance(),\n                        new CvsDao(),\n                        new TlpRelativeDatePresenterBuilder(),\n                        UserManager::instance(),\n                        UserHelper::instance(),\n                    ),\n                    new CrossReferenceFRSOrganizer(\n                        new FRSPackageFactory(),\n                        new FRSReleaseFactory(),\n                        new FRSFileFactory()\n                    ),\n                    new CrossReferenceForumOrganizer(\n                        ProjectManager::instance(),\n                        new MessageRetriever(),\n                        new ForumRetriever(\n                            new ForumDao(),\n                        )\n                    ),\n                    new CrossReferenceNewsOrganizer(\n                        new NewsRetriever(\n                            new NewsDao(),\n                        )\n                    )\n                ),\n            )\n        );\n\n        $field_cross_ref_renderer = new CrossReferenceFieldRenderer(\n            TemplateRendererFactory::build(),\n            $cross_ref_field_presenter_builder\n        );\n\n        $include_assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n        $GLOBALS['HTML']->includeFooterJavascriptFile($include_assets->getFileURL('cross-references-fields.js'));\n\n        return $field_cross_ref_renderer->renderCrossReferences($artifact, $this->getCurrentUser());\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n\n        $crf = new CrossReferenceFactory($artifact->getId(), Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crf->fetchDatas();\n\n        switch ($format) {\n            case 'html':\n                if ($crf->getNbReferences()) {\n                    $output .= $crf->getHTMLCrossRefsForMail();\n                } else {\n                    $output .= '-';\n                }\n                break;\n            default:\n                $refs   = $crf->getFormattedCrossReferences();\n                $src    = '';\n                $tgt    = '';\n                $both   = '';\n                $output = PHP_EOL;\n                if (! empty($refs['target'])) {\n                    foreach ($refs['target'] as $refTgt) {\n                        $tgt .= $refTgt['ref'];\n                        $tgt .= PHP_EOL;\n                        $tgt .= $refTgt['url'];\n                        $tgt .= PHP_EOL;\n                    }\n                    $output .= ' -> Target : ' . PHP_EOL . $tgt;\n                    $output .= PHP_EOL;\n                }\n                if (! empty($refs['source'])) {\n                    foreach ($refs['source'] as $refSrc) {\n                        $src .= $refSrc['ref'];\n                        $src .= PHP_EOL;\n                        $src .= $refSrc['url'];\n                        $src .= PHP_EOL;\n                    }\n                    $output .= ' -> Source : ' . PHP_EOL . $src;\n                    $output .= PHP_EOL;\n                }\n                if (! empty($refs['both'])) {\n                    foreach ($refs['both'] as $refBoth) {\n                        $both .= $refBoth['ref'];\n                        $both .= PHP_EOL;\n                        $both .= $refBoth['url'];\n                        $both .= PHP_EOL;\n                    }\n                    $output .= ' -> Both   : ' . PHP_EOL . $both;\n                    $output .= PHP_EOL;\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . dgettext('tuleap-tracker', 'Display in & out references') . '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Cross References');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the cross references for the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/both_arrows.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/both_arrows.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Integer $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html          = '';\n        $crossref_fact = new CrossReferenceFactory($artifact->getId(), Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crossref_fact->fetchDatas();\n        if ($crossref_fact->getNbReferences()) {\n            $html .= $crossref_fact->getHTMLDisplayCrossRefs($with_links = false, $condensed = true);\n        } else {\n            $html .= '<div>' . dgettext('tuleap-tracker', 'References list is empty') . '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        return true;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Fetch the element for the submit masschange form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        $html = $this->fetchSubmitValueMassChange();\n        return $html;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitCrossReferences($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\ArtifactTimeframeHelper;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse Tuleap\\Tracker\\XML\\TrackerXmlImportFeedbackCollector;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Date extends Tracker_FormElement_Field\n{\n    public const DEFAULT_VALUE_TYPE_TODAY    = 0;\n    public const DEFAULT_VALUE_TYPE_REALDATE = 1;\n\n    public $default_properties = [\n        'default_value_type' => [\n            'type'    => 'radio',\n            'value'   => 0,      //default value is today\n            'choices' => [\n                'default_value_today' => [\n                    'radio_value' => 0,\n                    'type'        => 'label',\n                    'value'       => 'today',\n                ],\n                'default_value' => [\n                    'radio_value' => 1,\n                    'type'  => 'date',\n                    'value' => '',\n                ],\n            ],\n        ],\n        'display_time' => [\n            'value' => 0,\n            'type'  => 'checkbox',\n        ],\n    ];\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $searched_date = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator      = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        switch ($operator) {\n            case Tracker_Report_REST::DEFAULT_OPERATOR:\n            case Tracker_Report_REST::OPERATOR_CONTAINS:\n            case Tracker_Report_REST::OPERATOR_EQUALS:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '=';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_GREATER_THAN:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '>';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_LESS_THAN:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '<';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_BETWEEN:\n                if (! $this->areBetweenDatesValid($searched_date)) {\n                    return false;\n                }\n                $criteria->setIsAdvanced(true);\n                $op        = null;\n                $from_date = $searched_date[0];\n                $to_date   = $searched_date[1];\n                break;\n            default:\n                throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid operator for criterion field '$this->name' ($this->id). \"\n                    . \"Allowed operators: [\" . implode(' | ', [\n                        Tracker_Report_REST::OPERATOR_EQUALS,\n                        Tracker_Report_REST::OPERATOR_GREATER_THAN,\n                        Tracker_Report_REST::OPERATOR_LESS_THAN,\n                        Tracker_Report_REST::OPERATOR_BETWEEN,\n                    ]) . \"]\");\n        }\n\n        $criteria_value           = [\n            'op'        => $op,\n            'from_date' => $from_date,\n            'to_date'   => $to_date,\n        ];\n        $formatted_criteria_value = $this->getFormattedCriteriaValue($criteria_value);\n\n        $this->setCriteriaValue($formatted_criteria_value, $criteria->report->id);\n        return true;\n    }\n\n    private function extractStringifiedDate($date)\n    {\n        if (is_array($date) && count($date) == 1 && isset($date[0])) {\n            $date = $date[0];\n        }\n\n        if (! strtotime($date)) {\n            return null;\n        }\n\n        return $date;\n    }\n\n    private function areBetweenDatesValid($criteria_dates)\n    {\n        return is_array($criteria_dates)\n            && count($criteria_dates) == 2\n            && isset($criteria_dates[0]) && strtotime($criteria_dates[0])\n            && isset($criteria_dates[1]) && strtotime($criteria_dates[1]);\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return true;\n    }\n\n    /**\n     * Continue the initialisation from an xml (FormElementFactory is not smart enough to do all stuff.\n     * Polymorphism rulez!!!\n     *\n     * @param SimpleXMLElement $xml         containing the structure of the imported Tracker_FormElement\n     * @param array            &$xmlMapping where the newly created formElements indexed by their XML IDs are stored (and values)\n     *\n     * @return void\n     */\n    public function continueGetInstanceFromXML(\n        $xml,\n        &$xmlMapping,\n        User\\XML\\Import\\IFindUserFromXMLReference $user_finder,\n        TrackerXmlImportFeedbackCollector $feedback_collector,\n    ) {\n        parent::continueGetInstanceFromXML($xml, $xmlMapping, $user_finder, $feedback_collector);\n\n        // add children\n        if (isset($this->default_properties['default_value'])) {\n            if ($this->default_properties['default_value'] === 'today') {\n                $this->default_properties['default_value_type']['value'] = self::DEFAULT_VALUE_TYPE_TODAY;\n            } else {\n                $this->default_properties['default_value_type']['value']                             = self::DEFAULT_VALUE_TYPE_REALDATE;\n                $this->default_properties['default_value_type']['choices']['default_value']['value'] = $this->default_properties['default_value'];\n            }\n            unset($this->default_properties['default_value']);\n        } else {\n            $this->default_properties['default_value_type']['value']                             = self::DEFAULT_VALUE_TYPE_REALDATE;\n            $this->default_properties['default_value_type']['choices']['default_value']['value'] = '';\n        }\n    }\n\n    /**\n     * Export form element properties into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement &$root The root element of the form element\n     *\n     * @return void\n     */\n    public function exportPropertiesToXML(&$root)\n    {\n        $child = $root->addChild('properties');\n\n        foreach ($this->getProperties() as $name => $property) {\n            if ($name === 'default_value_type') {\n                $this->exportDefaultValueToXML($child, $property);\n                continue;\n            }\n\n            $this->exportDisplayTimeToXML($child);\n        }\n    }\n\n    private function exportDefaultValueToXML(SimpleXMLElement &$xml_element, array $property)\n    {\n        $value_type = $property['value'];\n        if ($value_type == '1') {\n            // a date\n            $prop = $property['choices']['default_value'];\n            if (! empty($prop['value'])) {\n                // a specific date\n                $xml_element->addAttribute('default_value', $prop['value']);\n            } // else no default value, nothing to do\n        } else {\n            // today\n            $prop = $property['choices']['default_value_today'];\n            // $prop['value'] is the string 'today'\n            $xml_element->addAttribute('default_value', $prop['value']);\n        }\n    }\n\n    private function exportDisplayTimeToXML(SimpleXMLElement &$xml_element)\n    {\n        $xml_element->addAttribute('display_time', $this->isTimeDisplayed() ? '1' : '0');\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        if ($this->getProperty('default_value_type')) {\n            $value = $this->formatDate(parent::getDefaultValue());\n        } else { //Get date of the current day\n            $value = $this->formatDate($_SERVER['REQUEST_TIME']);\n        }\n        return $value;\n    }\n\n    /**\n     * Return the Field_Date_Dao\n     *\n     * @return DateFieldDao The dao\n     */\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     *\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return $this->getDao()->delete($this->id);\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a                 = 'A_' . $this->id;\n                $b                 = 'B_' . $this->id;\n                $compare_date_stmt = $this->getSQLCompareDate(\n                    (bool) $criteria->is_advanced,\n                    $criteria_value['op'],\n                    $criteria_value['from_date'],\n                    $criteria_value['to_date'],\n                    $b . '.value'\n                );\n                return \" INNER JOIN tracker_changeset_value AS $a\n                         ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_date AS $b\n                         ON ($a.id = $b.changeset_value_id\n                             AND $compare_date_stmt\n                         ) \";\n            }\n        }\n\n        return '';\n    }\n\n     /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (! isset($this->criteria_value[$criteria->report->id])) {\n            $this->criteria_value[$criteria->report->id] = [];\n            $dao                                         = $this->getCriteriaDao();\n            if ($dao && $row = $dao->searchByCriteriaId($criteria->id)->getRow()) {\n                $this->criteria_value[$criteria->report->id]['op']        = $row['op'];\n                $this->criteria_value[$criteria->report->id]['from_date'] = $row['from_date'];\n                $this->criteria_value[$criteria->report->id]['to_date']   = $row['to_date'];\n            }\n        }\n        return $this->criteria_value[$criteria->report->id];\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        return;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        if (empty($value['to_date']) && empty($value['from_date'])) {\n            return '';\n        } else {\n            //from date\n            if (empty($value['from_date'])) {\n                $value['from_date'] = 0;\n            } else {\n                 $value['from_date'] = strtotime($value['from_date']);\n            }\n\n            //to date\n            if (empty($value['to_date'])) {\n                $value['to_date'] = 0;\n            } else {\n                 $value['to_date'] = strtotime($value['to_date']);\n            }\n\n            //Operator\n            if (empty($value['op']) || ($value['op'] !== '<' && $value['op'] !== '=' && $value['op'] !== '>')) {\n                $value['op'] = '=';\n            }\n\n            return $value;\n        }\n    }\n\n    /**\n     * Build the sql statement for date comparison\n     *\n     * @param bool   $is_advanced Are we in advanced mode ?\n     * @param string $op          The operator used for the comparison (not for advanced mode)\n     * @param int    $from        The $from date used for comparison (only for advanced mode)\n     * @param int    $to          The $to date used for comparison\n     * @param string $column      The column to look into. ex: \"A_234.value\" | \"c.submitted_on\" ...\n     *\n     * @return string sql statement\n     */\n    protected function getSQLCompareDate($is_advanced, $op, $from, $to, $column)\n    {\n        return $this->getSQLCompareDay($is_advanced, $op, $from, $to, $column);\n    }\n\n    private function getSQLCompareDay($is_advanced, $op, $from, $to, $column)\n    {\n        $seconds_in_a_day = DateHelper::SECONDS_IN_A_DAY;\n\n        if ($is_advanced) {\n            if (! $to) {\n                $to = $_SERVER['REQUEST_TIME'];\n            }\n            if (empty($from)) {\n                $to               = $this->getDao()->getDa()->escapeInt($to);\n                $and_compare_date = \"$column <=  $to + $seconds_in_a_day - 1 \";\n            } else {\n                $from             = $this->getDao()->getDa()->escapeInt($from);\n                $to               = $this->getDao()->getDa()->escapeInt($to);\n                $and_compare_date = \"$column BETWEEN $from\n                                             AND $to + $seconds_in_a_day - 1\";\n            }\n        } else {\n            switch ($op) {\n                case '<':\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column < $to\";\n                    break;\n                case '=':\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column BETWEEN $to\n                                                 AND $to + $seconds_in_a_day - 1\";\n                    break;\n                default:\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column > $to + $seconds_in_a_day - 1\";\n                    break;\n            }\n        }\n\n        return $and_compare_date;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_date AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value\";\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Date_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->formatDateForDisplay($value);\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->formatDateForCSV($value);\n    }\n\n    public function fetchAdvancedCriteriaValue($criteria)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        $html          .= '<div style=\"text-align:right\">';\n        $value          = isset($criteria_value['from_date']) ? $this->formatDateForReport($criteria_value['from_date']) : '';\n        $html          .= '<label>';\n        $html          .= dgettext('tuleap-tracker', 'Start') . ' ';\n        $html          .= $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"criteria_\" . $this->id . \"_from\",\n            \"criteria[\" . $this->id . \"][from_date]\",\n            $value,\n            [],\n            [],\n            false,\n            'date-time-' . $this->getName()\n        );\n        $html          .= '</label>';\n        $value          = isset($criteria_value['to_date']) ? $this->formatDateForReport($criteria_value['to_date']) : '';\n        $html          .= '<label>';\n        $html          .= dgettext('tuleap-tracker', 'End') . ' ';\n        $html          .= $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"criteria_\" . $this->id . \"_to\",\n            \"criteria[\" . $this->id . \"][to_date]\",\n            $value,\n            [],\n            [],\n            false,\n            'date-time-' . $this->getName()\n        );\n        $html          .= '</label>';\n        $html          .= '</div>';\n        return $html;\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '';\n        if ($criteria->is_advanced) {\n            $html = $this->fetchAdvancedCriteriaValue($criteria);\n        } else {\n            $hp             = Codendi_HTMLPurifier::instance();\n            $criteria_value = $this->getCriteriaValue($criteria);\n            $lt_selected    = '';\n            $eq_selected    = '';\n            $gt_selected    = '';\n            if ($criteria_value) {\n                if ($criteria_value['op'] == '<') {\n                    $lt_selected = 'selected=\"selected\"';\n                } elseif ($criteria_value['op'] == '>') {\n                    $gt_selected = 'selected=\"selected\"';\n                } else {\n                    $eq_selected = 'selected=\"selected\"';\n                }\n            } else {\n                $eq_selected = 'selected=\"selected\"';\n            }\n            $html .= '<div style=\"white-space:nowrap;\">';\n\n            $criteria_selector = [\n                \"name\"      => 'criteria[' . $this->id . '][op]',\n                \"criterias\" => [\n                    \">\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'After'),\n                        \"selected\"   => $gt_selected,\n\n                    ],\n                    \"=\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'As of'),\n                        \"selected\"   => $eq_selected,\n                    ],\n                    \"<\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'Before'),\n                        \"selected\"   => $lt_selected,\n                    ],\n                ],\n            ];\n\n            $value = $criteria_value ? $this->formatDateForReport($criteria_value['to_date']) : '';\n\n            $html .= $GLOBALS['HTML']->getBootstrapDatePicker(\n                \"tracker_report_criteria_\" . $this->id,\n                \"criteria[\" . $this->id . \"][to_date]\",\n                $value,\n                $criteria_selector,\n                [],\n                false,\n                'date-time-' . $this->getName()\n            );\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    private function formatDateForReport($criteria_value)\n    {\n        $date_formatter = new Tracker_FormElement_DateFormatter($this);\n        return $date_formatter->formatDate($criteria_value);\n    }\n\n    public function fetchMasschange()\n    {\n    }\n\n    /**\n     * Format a timestamp into Y-m-d H:i format\n     */\n    protected function formatDateTime($date)\n    {\n        return format_date(Tracker_FormElement_DateTimeFormatter::DATE_TIME_FORMAT, (float) $date, '');\n    }\n\n    /**\n     * Returns the CSV date format of the user regarding its preferences\n     * Returns either 'month_day_year' or 'day_month_year'\n     *\n     * @return string the CSV date format of the user regarding its preferences\n     */\n    public function _getUserCSVDateFormat() // phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $user = UserManager::instance()->getCurrentUser();\n        return (string) $user->getPreference('user_csv_dateformat');\n    }\n\n    protected function formatDateForCSV($date)\n    {\n        $date_csv_export_pref = $this->_getUserCSVDateFormat();\n        switch ($date_csv_export_pref) {\n            case \"month_day_year\":\n                $fmt = 'm/d/Y';\n                break;\n            case \"day_month_year\":\n                $fmt = 'd/m/Y';\n                break;\n            default:\n                $fmt = 'm/d/Y';\n                break;\n        }\n\n        if ($this->isTimeDisplayed()) {\n            $fmt .= ' H:i';\n        }\n\n        return format_date($fmt, (float) $date, '');\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->formatDate($value);\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = 0;\n        if ($v = $changeset->getValue($this)) {\n            if ($row = $this->getValueDao()->searchById($v->getId(), $this->id)->getRow()) {\n                $value = $row['value'];\n            }\n        }\n        return $this->formatDate($value);\n    }\n\n    protected function getValueDao()\n    {\n        return new DateValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $errors = $this->has_errors ? ['has_error'] : [];\n\n        return $this->getFormatter()->fetchSubmitValue($submitted_values, $errors);\n    }\n\n     /**\n     * Fetch the html code to display the field value in masschange submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return $this->getFormatter()->fetchSubmitValueMasschange();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $errors = $this->has_errors ? ['has_error'] : [];\n\n        return $this->getFormatter()->fetchArtifactValue($value, $submitted_values, $errors);\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getTimestamp()) {\n            return '-';\n        }\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    public function getNoValueLabel()\n    {\n        return parent::getNoValueLabel();\n    }\n\n    public function getValueFromSubmitOrDefault(array $submitted_values)\n    {\n        return parent::getValueFromSubmitOrDefault($submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $timeframe_helper = $this->getArtifactTimeframeHelper();\n        $html_value       = $this->getFormatter()->fetchArtifactValueReadOnly($artifact, $value);\n        $user             = $this->getCurrentUser();\n\n        if ($timeframe_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $html_value = $html_value\n                . '<span class=\"artifact-timeframe-helper\"> ('\n                . $timeframe_helper->getDurationArtifactHelperForReadOnlyView($user, $artifact)\n                . ')</span>';\n        }\n\n        return $html_value;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"tracker_admin_field_\" . $this->id,\n            '',\n            $this->hasDefaultValue() ? $this->getDefaultValue() : '',\n            [],\n            [],\n            $this->isTimeDisplayed(),\n            'date-time-' . $this->getName()\n        );\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Date');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Allows user to select a date with a calendar');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Date $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value && $value->getTimestamp()) {\n            $user  = HTTPRequest::instance()->getCurrentUser();\n            $html .= DateHelper::relativeDateInlineContext($value->getTimestamp() ?? 0, $user);\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->getFormatter()->validate($value);\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, strtotime($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return strtotime($this->formatDate($old_value->getTimestamp())) != strtotime($new_value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id, $this->id)->getRow()) {\n            $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $row['value']);\n        }\n        return $changeset_value;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Compute the number of digits of an int (could be private but I want to unit test it)\n     * 1 => 1\n     * 12 => 2\n     * 123 => 3\n     * 1999 => 4\n     * etc.\n     *\n     */\n    public function _nbDigits($int_value) // phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        return 1 + (int) (log($int_value) / log(10));\n    }\n\n    /**\n     * Explode a date in the form of (m/d/Y H:i or d/m/Y H:i) regarding the csv peference\n     * into its a list of 5 parts (YYYY,MM,DD,H,i)\n     * if DD and MM are not defined then default them to 1\n     *\n     *\n     * Please use function date_parse_from_format instead\n     * when codendi will run PHP >= 5.3\n     *\n     *\n     * @param string $date the date in the form of m/d/Y H:i or d/m/Y H:i\n     *\n     * @return array the five parts of the date array(YYYY,MM,DD,H,i)\n     */\n    public function explodeXlsDateFmt($date)\n    {\n        $user_preference = $this->_getUserCSVDateFormat();\n        $match           = [];\n\n        if (preg_match(\"/\\s*(\\d+)\\/(\\d+)\\/(\\d+) (\\d+):(\\d+)(?::(\\d+))?/\", $date, $match)) {\n            return $this->getCSVDateComponantsWithHours($match, $user_preference);\n        } elseif (preg_match(\"/\\s*(\\d+)\\/(\\d+)\\/(\\d+)/\", $date, $match)) {\n            return $this->getCSVDateComponantsWithoutHours($match, $user_preference);\n        }\n\n        return $this->getCSVDefaultDateComponants();\n    }\n\n    /**\n     * @return array\n     */\n    private function getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second)\n    {\n        if (checkdate($month, $day, $year) && $this->_nbDigits($year) ===  4) {\n            return [$year, $month, $day, $hour, $minute, $second];\n        }\n\n        return [];\n    }\n\n    private function getCSVDateComponantsWithoutHours(array $match, $user_preference)\n    {\n        $hour   = '0';\n        $minute = '0';\n        $second = '0';\n\n        if ($user_preference == \"day_month_year\") {\n            [, $day, $month, $year] = $match;\n        } else {\n            [, $month, $day, $year] = $match;\n        }\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second);\n    }\n\n    private function getCSVDateComponantsWithHours(array $match, $user_preference)\n    {\n        if ($user_preference == \"day_month_year\") {\n            [, $day, $month, $year, $hour, $minute] = $match;\n        } else {\n            [, $month, $day, $year, $hour, $minute] = $match;\n        }\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, '00');\n    }\n\n    private function getCSVDefaultDateComponants()\n    {\n        $year   = '1970';\n        $month  = '1';\n        $day    = '1';\n        $hour   = '0';\n        $minute = '0';\n        $second = '0';\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second);\n    }\n\n    /**\n     * Get the field data for CSV import\n     *\n     * @param string $data_cell the CSV field value (a date with the form dd/mm/YYYY or mm/dd/YYYY)\n     *\n     * @return string the date with the form YYYY-mm-dd corresponding to the date $data_cell, or null if date format is wrong or empty\n     */\n    public function getFieldDataForCSVPreview($data_cell)\n    {\n        if ($data_cell !== '') {\n            $date_explode = $this->explodeXlsDateFmt($data_cell);\n            if (isset($date_explode[0])) {\n                if ($this->_nbDigits($date_explode[0]) == 4) {\n                    return $this->getFormatter()->getFieldDataForCSVPreview($date_explode);\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return String the field data corresponding to the value for artifact submision, or null if date format is wrong\n     */\n    public function getFieldData($value)\n    {\n        if (strpos($value, '/') !== false) {\n            // Assume the format is either dd/mm/YYYY or mm/dd/YYYY depending on the user preferences.\n            return $this->getFieldDataForCSVPreview($value);\n        }\n\n        if (strpos($value, '-') !== false) {\n            // Assume the format is YYYY-mm-dd\n            $date_array = explode('-', $value);\n            if (count($date_array) == 3 && checkdate($date_array[1], $date_array[2], $date_array[0]) && $this->_nbDigits($date_array[0])) {\n                return $value;\n            }\n\n            return null;\n        }\n\n        if ((int) $value == $value) {\n            // Assume it's a timestamp\n            return $this->getFormatter()->formatDate((int) $value);\n        }\n\n        if (trim($value) === '') {\n            return '';\n        }\n\n        return null;\n    }\n\n    /**\n     * Convert ISO8601 into internal date needed by createNewChangeset\n     *\n     * @param array $value\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (! $value['value']) {\n            return '';\n        }\n\n        if ($this->isTimeDisplayed()) {\n            return date(Tracker_FormElement_DateTimeFormatter::DATE_TIME_FORMAT, strtotime($value['value']));\n        }\n\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, strtotime($value['value']));\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Return the field last value\n     *\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return $artifact->getValue($this)->getValue();\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new DateValueDao();\n        $dar       = $dao->getArtifactsByFieldAndValue($this->id, $date);\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitDate($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return ($this->getProperty('display_time') == 1);\n    }\n\n    public function formatDate($date)\n    {\n        return $this->getFormatter()->formatDate($date);\n    }\n\n    public function formatDateForDisplay($timestamp)\n    {\n        return $this->getFormatter()->formatDateForDisplay($timestamp);\n    }\n\n    /**\n     * @return Tracker_FormElement_DateFormatter\n     */\n    public function getFormatter()\n    {\n        if ($this->isTimeDisplayed()) {\n            return new Tracker_FormElement_DateTimeFormatter($this);\n        }\n\n        return new Tracker_FormElement_DateFormatter($this);\n    }\n\n    protected function getArtifactTimeframeHelper(): ArtifactTimeframeHelper\n    {\n        return new ArtifactTimeframeHelper(\n            SemanticTimeframeBuilder::build(),\n            \\BackendLogger::getDefaultLogger()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForRestCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTraditionalUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTusUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentToFinalPlaceMover;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\ChangesetValueFileSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FieldDataFromRESTBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileInfoForTusUploadedFileReadyToBeAttachedProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\FileOngoingUploadDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\Tus\\FileBeingUploadedInformationProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\UploadPathAllocator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_File extends Tracker_FormElement_Field\n{\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field  is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $da             = CodendiDataAccess::instance();\n                $criteria_value = $da->quoteLikeValueSurround($criteria_value);\n\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_file AS $b ON ($b.changeset_value_id = $a.id)\n                         INNER JOIN tracker_fileinfo AS $c ON (\n                            $c.id = $b.fileinfo_id\n                            AND (\n                                $c.description LIKE \" . $criteria_value . \"\n                                OR\n                                $c.filename LIKE \" . $criteria_value . \"\n                            )\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_File_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact_id, $this->getChangesetValues($changeset_id), $submitter_needed, []);\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchAllAttachmentForCSV($artifact_id, $this->getChangesetValues($changeset_id));\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            assert($v instanceof Tracker_Artifact_ChangesetValue_File);\n            if (isset($v['value_id'])) {\n                $v = [$v];\n            }\n            /** @psalm-var array{value_id:int} $val */\n            foreach ($v as $val) {\n                if ($val['value_id'] != 100) {\n                    if ($row = $this->getValueDao()->searchById($val['value_id'], $this->id)->getRow()) {\n                        if ($value) {\n                            $value .= ', ';\n                        }\n                        $value .= $row['filename'];\n                    }\n                }\n            }\n        }\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new FileFieldValueDao();\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $html             = '';\n        $submitter_needed = true;\n        $read_only        = false;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, $submitted_values, $read_only);\n        $html            .= $this->fetchSubmitValue($submitted_values);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value = $last_changeset->getValue($this);\n            return $this->fetchAllAttachmentTitleAndDescription($value);\n        }\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in Mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getFiles()) {\n            return '-';\n        }\n\n        return $this->fetchMailAllAttachment($artifact->id, $value, $format);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, []);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $html .= '<div class=\"add-attachement\">';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<div class=\"tracker_artifact_add_attachment\">';\n        $html .= '<p>';\n        $html .= '<input type=\"file\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][file]\" data-upload-is-enabled/>';\n        $html .= '<label>' . dgettext('tuleap-tracker', 'Description:');\n        $html .= '</label>';\n        $html .= ' <input type=\"text\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][description]\" />';\n        $html .= '</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n        if (isset($submitted_values[$this->id])) {\n            foreach ($submitted_values[$this->id] as $submitted_value) {\n                if (isset($submitted_value['tus-uploaded-id'])) {\n                    $html .= '<input\n                        type=\"hidden\"\n                        name=\"artifact[' . $this->id . '][][tus-uploaded-id]\"\n                        value=\"' . (int) $submitted_value['tus-uploaded-id'] . '\">';\n                }\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';  // deactivate mass change for file fields (see issue described in rev #15855)\n    }\n\n    public function fetchAllAttachment(\n        $artifact_id,\n        $values,\n        $submitter_needed,\n        array $submitted_values,\n        $read_only = true,\n        $lytebox_id = null,\n    ) {\n        $html = '';\n        if ($lytebox_id === null) {\n            $lytebox_id = $this->getId();\n        }\n        if ($values !== null && count($values) > 0) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $uh    = UserHelper::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n\n                $link_show = '<a href=\"' . $query_link . '\"' .\n                                 $this->getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id) . '\n                                 title=\"' . $sanitized_description . '\">';\n\n                $add = '<div class=\"tracker_artifact_attachment\">';\n                if (! $read_only) {\n                    $add .= $this->fetchDeleteCheckbox($fileinfo, $submitted_values);\n                }\n\n                $add .= '<div class=\"tracker_artifact_preview_attachment_hover\">';\n                if ($submitter_needed) {\n                    $add .= '<div class=\"tracker_artifact_attachment_submitter\">' . 'By ' . $uh->getLinkOnUserFromUserId($fileinfo->getSubmittedBy()) . '</div>';\n                }\n                $add .= '<div class=\"tracker_artifact_attachment_size\">(' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')</div>';\n                $add .= '<div>';\n                $add .= $link_show . '<i class=\"fa fa-eye\"></i></a>';\n                $add .= '<a href=\"' . $query_link . '\" download><i class=\"fa fa-download\"></i></a>';\n                $add .= '</div>';\n                $add .= '</div>';\n\n                if ($fileinfo->isImage()) {\n                    $query_add = $hp->purify($this->getFileHTMLPreviewUrl($fileinfo));\n\n                    $add .= '<div class=\"tracker_artifact_preview_attachment image\">';\n                    $add .= '<div style=\"background-image: url(\\'' . $query_add . '\\')\"></div>';\n                    $add .= '</div>';\n                } else {\n                    $add .= '<div class=\"tracker_artifact_preview_attachment\"></div>';\n                }\n\n                $link_goto = '<a href=\"' . $query_link . '\"' .\n                                 'title=\"' . $sanitized_description . '\">';\n                $add      .= '<div class=\"tracker_artifact_attachment_name\">' . $link_goto . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a></div>';\n\n                if ($sanitized_description) {\n                    $add .= '<div class=\"tracker_artifact_attachment_description\">' . $sanitized_description . '</div>';\n                }\n\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $html .= implode('', $added);\n        }\n\n        if ($read_only && ($values === null || count($values) === 0)) {\n            $html .= $this->getNoValueLabel();\n        }\n\n        return $html;\n    }\n\n    public function getFileHTMLUrl(Tracker_FileInfo $file_info)\n    {\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/' . $this->getFilenameSlug($file_info);\n    }\n\n    public function getFileHTMLPreviewUrl(Tracker_FileInfo $file_info)\n    {\n        if (! $file_info->isImage()) {\n            return;\n        }\n\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/preview/' . $this->getFilenameSlug($file_info);\n    }\n\n    /**\n     * @return string\n     */\n    private function getFilenameSlug(Tracker_FileInfo $file_info)\n    {\n        return (int) $file_info->getId() . '-' . rawurlencode($file_info->getFilename());\n    }\n\n    private function getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id)\n    {\n        if (! $fileinfo->isImage()) {\n            return '';\n        }\n\n        if ($read_only) {\n            return 'rel=\"lytebox[' . $lytebox_id . ']\"';\n        }\n\n        return 'data-rel=\"lytebox[' . $lytebox_id . ']\"';\n    }\n\n    private function fetchDeleteCheckbox(Tracker_FileInfo $fileinfo, array $submitted_values)\n    {\n        $html    = '';\n        $html   .= '<label class=\"pc_checkbox tracker_artifact_attachment_delete\">';\n        $checked = '';\n        if (isset($submitted_values[$this->id]) && ! empty($submitted_values[$this->id]['delete']) && in_array($fileinfo->getId(), $submitted_values[$this->id]['delete'])) {\n            $checked = 'checked=\"checked\"';\n        }\n        $html .= '<input type=\"checkbox\" name=\"artifact[' . $this->id . '][delete][]\" value=\"' . $fileinfo->getId() . '\" title=\"delete\" ' . $checked . ' />&nbsp;';\n        $html .= '</label>';\n        return $html;\n    }\n\n    protected function fetchAllAttachmentForCSV($artifact_id, $values)\n    {\n        $txt = '';\n        if (count($values)) {\n            $filenames = [];\n            foreach ($values as $fileinfo) {\n                $filenames[] = $fileinfo->getFilename();\n            }\n            $txt .= implode(',', $filenames);\n        }\n        return $txt;\n    }\n\n    protected function fetchAllAttachmentTitleAndDescription($values)\n    {\n        $html = '';\n        if ($values) {\n            $purifier = Codendi_HTMLPurifier::instance();\n            $html    .= '<div class=\"tracker-artifact-attachement-title-list tracker_artifact_field\"\n                              data-field-id=\"' . $this->id . '\"\n                              data-is-required=\"false\">';\n            $html    .= '<div class=\"disabled_field\">' . dgettext('tuleap-tracker', '\"Attachment\" type field cannot be modified during artifact copy.') . '</div>';\n            $html    .= '<ul>';\n            foreach ($values as $value) {\n                $description = $value->getDescription();\n\n                $html .= '<li>';\n                $html .= '<span class=\"file-title\">';\n                $html .= $purifier->purify($value->getFileName());\n                $html .= '</span>';\n\n                if ($description) {\n                    $html .= '<span class=\"file-description\">';\n                    $html .= ' - ' . $purifier->purify($description);\n                    $html .= '</span>';\n                }\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch all attachements for Mail output\n     *\n     * @param int $artifact_id The artifact Id\n     * @param Array            $values     The actual value of the field\n     * @param String            $format       The mail format\n     *\n     * @return String\n     */\n    protected function fetchMailAllAttachment($artifact_id, $values, $format)\n    {\n        $output = '';\n        if (! count($values)) {\n            return '';\n        }\n\n        $uh = UserHelper::instance();\n\n        $url = \\Tuleap\\ServerHostname::HTTPSUrl();\n\n        if ($format == 'text') {\n            foreach ($values as $fileinfo) {\n                $query_link = $this->getFileHTMLUrl($fileinfo);\n\n                $link    = '<' . $url . $query_link . '>';\n                $output .= $fileinfo->getDescription();\n                $output .= ' | ';\n                $output .= $fileinfo->getFilename();\n                $output .= ' | ';\n                $output .= $fileinfo->getHumanReadableFilesize();\n                $output .= ' | ';\n                $output .= $uh->getDisplayNameFromUserId($fileinfo->getSubmittedBy());\n                $output .= PHP_EOL;\n                $output .= $link;\n                $output .= PHP_EOL;\n            }\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n                $link_show             = '<a href=\"' . $url . $query_link . '\"\n                                 title=\"' . $sanitized_description . '\">';\n\n                $info  = $link_show . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a>';\n                $info .= ' (' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')';\n\n                $add     = '<div class=\"tracker_artifact_attachment\">';\n                $add    .= '<table><tr><td>';\n                $add    .= $info;\n                $add    .= '</td></tr></table>';\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $output .= implode('', $added);\n        }\n        return $output;\n    }\n\n    /**\n     * @param int | string $changeset_id\n     * @return Tracker_FileInfo[]\n     */\n    protected function getChangesetValues($changeset_id): array\n    {\n        $da              = CodendiDataAccess::instance();\n        $changest_values = [];\n\n        $field_id     = $da->escapeInt($this->id);\n        $changeset_id = $da->escapeInt($changeset_id);\n        $sql          = \"SELECT c.changeset_id, c.has_changed, f.id\n                    FROM tracker_fileinfo as f\n                         INNER JOIN tracker_changeset_value_file AS vf on (f.id = vf.fileinfo_id)\n                         INNER JOIN tracker_changeset_value AS c\n                         ON ( vf.changeset_value_id = c.id\n                          AND c.field_id = $field_id AND c.changeset_id= $changeset_id\n                         )\n                    ORDER BY f.id\";\n\n        $dao               = new DataAccessObject();\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n        foreach ($dao->retrieve($sql) as $row) {\n            $changest_values[] = $file_info_factory->getById($row['id']);\n        }\n        return $changest_values;\n    }\n\n    public function previewAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->isImage() && file_exists($fileinfo->getThumbnailPath())) {\n                header('Content-type: ' . $fileinfo->getFiletype());\n                readfile($fileinfo->getThumbnailPath());\n            }\n        }\n        exit();\n    }\n\n    public function showAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->fileExists()) {\n                $http = Codendi_HTTPPurifier::instance();\n                header('X-Content-Type-Options: nosniff');\n                header('Content-Type: ' . $http->purify($fileinfo->getFiletype()));\n                header('Content-Length: ' . $http->purify($fileinfo->getFilesize()));\n                header('Content-Disposition: attachment; filename=\"' . $http->purify($fileinfo->getFilename()) . '\"');\n                header('Content-Description: ' . $http->purify($fileinfo->getDescription()));\n                if (ob_get_level()) {\n                    ob_end_clean();\n                }\n                flush();\n                $file = fopen($fileinfo->getPath(), \"r\");\n                while (! feof($file)) {\n                    print fread($file, 30 * 1024);\n                    flush();\n                }\n                fclose($file);\n            }\n        }\n        exit();\n    }\n\n    public function getRootPath()\n    {\n        return $this->getGlobalTrackerRootPath() . $this->getId();\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<table class=\"tracker_artifact_add_attachment\">';\n        $html .= '<tr><td><label>' . dgettext('tuleap-tracker', 'Description:') . '</label></td><td><label>' . dgettext('tuleap-tracker', 'File:') . '</label></td></tr>';\n        $html .= '<tr><td><input type=\"text\" id=\"tracker_field_' . $this->id . '\" /></td>';\n        $html .= '<td><input type=\"file\" id=\"tracker_field_' . $this->id . '\" /></td></tr>';\n        $html .= '</table>';\n        $html .= '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'File upload');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Lets the user attach files to the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Artifact                    $artifact The artifact\n     * @param Tracker_ChangesetValue_File $value    The changeset value of this field\n     *\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value) {\n            $files_info = $value->getFiles();\n            if (count($files_info)) {\n                $html .= '<div class=\"cross-ref-tooltip-collection\">';\n\n                $hp = Codendi_HTMLPurifier::instance();\n\n                $added = [];\n                foreach ($files_info as $file_info) {\n                    $add = '';\n\n                    if ($file_info->isImage()) {\n                        $query = $this->getFileHTMLPreviewUrl($file_info);\n                        $add  .= '<img src=\"' . $hp->purify($query) . '\"\n                                      alt=\"' .  $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                                 >';\n                    } elseif ($file_info->getDescription()) {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    } else {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    }\n                    $added[] = $add;\n                }\n                $html .= implode('', $added) . '</div>';\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (is_array($value)) {\n            $this->checkAllFilesHaveBeenSuccessfullyUploaded($value);\n        }\n\n        return ! $this->has_errors;\n    }\n\n    private function checkAllFilesHaveBeenSuccessfullyUploaded($value)\n    {\n        $rule = new Rule_File();\n        foreach ($value as $i => $attachment) {\n            if ($this->isAttachmentNeedsToBeValidated($i, $attachment)) {\n                if (! $rule->isValid($attachment)) {\n                    $this->has_errors = true;\n                    $attachment_error = sprintf(dgettext('tuleap-tracker', 'Attachment #%1$s has not been saved:'), $i);\n                    $GLOBALS['Response']->addFeedback('error', $attachment_error . ' ' . $rule->getErrorMessage());\n                }\n            }\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAttachmentNeedsToBeValidated($attachment_index, array $attachment)\n    {\n        if ($attachment_index === 'delete' || isset($attachment['tus-uploaded-id'])) {\n            return false;\n        }\n\n        $is_file_uploaded             = ! empty($attachment['error']) && $attachment['error'] != UPLOAD_ERR_NO_FILE;\n        $is_file_description_provided = trim($attachment['description']);\n\n        return $is_file_uploaded || $is_file_description_provided;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (\n            is_array($value) &&\n            $this->isRequired() &&\n            ! $this->checkThatAtLeastOneFileIsUploaded($value) &&\n            $this->isPreviousChangesetEmpty($artifact, $value)\n        ) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Check that at least one file is sent\n     *\n     * @param array $files the files\n     *\n     * @return bool true if success\n     */\n    public function checkThatAtLeastOneFileIsUploaded($files)\n    {\n        $r              = new Rule_File();\n        $a_file_is_sent = false;\n        foreach ($files as $action => $attachment) {\n            if ($a_file_is_sent) {\n                break;\n            }\n            if ((string) $action === 'delete') {\n                continue;\n            }\n            $a_file_is_sent = isset($attachment['tus-uploaded-id']) || $r->isValid($attachment);\n        }\n        return $a_file_is_sent;\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        if (! isset($fields_data[$this->getId()]) || ! is_array($fields_data[$this->getId()])) {\n            $fields_data[$this->getId()] = [];\n        }\n        $files_infos = $this->getSubmittedInfoFromFILES();\n        if (isset($files_infos['name'][$this->getId()])) {\n            $info_keys = array_keys($files_infos); //name, type, error, ...\n            $nb        = count($files_infos['name'][$this->getId()]);\n            for ($i = 0; $i < $nb; ++$i) {\n                $tab = [];\n                foreach ($info_keys as $key) {\n                    $tab[$key] = $files_infos[$key][$this->getId()][$i]['file'];\n                }\n                if (isset($fields_data[$this->getId()][$i])) {\n                    $fields_data[$this->getId()][$i] = array_merge($fields_data[$this->getId()][$i], $tab);\n                } else {\n                    $fields_data[$this->getId()][] = $tab;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the array wich contains files submitted by the user\n     *\n     * @return null|array null if not found\n     */\n    protected function getSubmittedInfoFromFILES()\n    {\n        return isset($_FILES['artifact']) ? $_FILES['artifact'] : null;\n    }\n\n    protected $files_info_from_request = null;\n    /**\n     * Extract the file information (name, error, tmp, ...) from the request\n     *\n     * @return array Array of file info\n     */\n    protected function extractFilesFromRequest()\n    {\n        if (! $this->files_info_from_request) {\n        }\n        return $this->files_info_from_request;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $mover              = new AttachmentToFinalPlaceMover();\n        $rule_file          = new Rule_File();\n        $ongoing_upload_dao = new FileOngoingUploadDao();\n        $attachment_creator = new AttachmentForTusUploadCreator(\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider($ongoing_upload_dao),\n            $ongoing_upload_dao,\n            new AttachmentForRestCreator(\n                $mover,\n                $this->getTemporaryFileManager(),\n                new AttachmentForTraditionalUploadCreator($mover, $rule_file),\n                $rule_file\n            )\n        );\n\n        $saver = new ChangesetValueFileSaver($this->getValueDao(), $attachment_creator);\n\n        assert($previous_changesetvalue instanceof Tracker_Artifact_ChangesetValue_File || $previous_changesetvalue === null);\n        return $saver->saveValue(\n            $this->getCurrentUser(),\n            $this,\n            $changeset_value_id,\n            $value,\n            $previous_changesetvalue,\n            $url_mapping\n        );\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //\"old\" and \"new\" value are irrelevant in this context.\n        //We just have to know if there is at least one file successfully uploaded\n        return $this->checkThatAtLeastOneFileIsUploaded($new_value) || ! empty($new_value['delete']);\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     *\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return true;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed): Tracker_Artifact_ChangesetValue_File\n    {\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n\n        $files      = [];\n        $file_value = $this->getValueDao()->searchById($value_id);\n        foreach ($file_value as $row) {\n            $file = $file_info_factory->getById($row['fileinfo_id']);\n            if ($file !== null) {\n                $files[] = $file;\n            }\n        }\n        return new Tracker_Artifact_ChangesetValue_File($value_id, $changeset, $this, $has_changed, $files);\n    }\n\n    /**\n     * Get the file dao\n     *\n     * @return Tracker_FileInfoDao\n     */\n    protected function getFileInfoDao()\n    {\n        return new Tracker_FileInfoDao();\n    }\n\n    /**\n     * Get file info factory\n     *\n     * @return Tracker_FileInfoFactory\n     */\n    protected function getFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            $this->getFileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Override default value as it's not possible to import a file via CSV\n     *\n     * @param type $csv_value\n     *\n     * @return array\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValue(array $rest_value, ?Artifact $artifact = null)\n    {\n        //Transform array to object\n        $value = json_decode(json_encode($rest_value), false);\n\n        $this->validateDataFromREST($value);\n\n        $builder = new FieldDataFromRESTBuilder(\n            $this->getUserManager(),\n            $this->getFormElementFactory(),\n            $this->getTrackerFileInfoFactory(),\n            $this->getTemporaryFileManager(),\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider(new FileOngoingUploadDao())\n        );\n        return $builder->buildFieldDataFromREST($value, $this, $artifact);\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    private function validateDataFromREST($data)\n    {\n        if (! property_exists($data, 'value') || ! is_array($data->value)) {\n            throw new Tracker_FormElement_InvalidFieldException('Invalid format for file field \"' . $data->field_id . '\". '\n                . ' Correct format is {\"field_id\" : 425, \"value\" : [457, 258]}');\n        }\n    }\n\n    /**\n     * @return Tracker_Artifact_Attachment_TemporaryFileManager\n     */\n    private function getTemporaryFileManager()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManager(\n            $this->getUserManager(),\n            new Tracker_Artifact_Attachment_TemporaryFileManagerDao(),\n            new System_Command(),\n            ForgeConfig::get('sys_file_deletion_delay'),\n            new \\Tuleap\\DB\\DBTransactionExecutorWithConnection(\\Tuleap\\DB\\DBFactory::getMainTuleapDBConnection())\n        );\n    }\n\n    private function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    protected function getTrackerFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            new Tracker_FileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    protected function getTemporaryFileManagerDao()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManagerDao();\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        $values = $this->getChangesetValue($changeset, $changeset_value_id, false);\n        foreach ($values as $fileinfo) {\n            $fileinfo->delete();\n        }\n        parent::deleteChangesetValue($changeset, $changeset_value_id);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    protected function isPreviousChangesetEmpty(Artifact $artifact, $value)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n\n        if (\n            $last_changeset &&\n            ! is_a($last_changeset, Tracker_Artifact_Changeset_Null::class) &&\n            count($last_changeset->getValue($this)->getFiles()) > 0\n        ) {\n            return $this->areAllFilesDeletedFromPreviousChangeset($last_changeset, $value);\n        }\n        return true;\n    }\n\n    private function areAllFilesDeletedFromPreviousChangeset($last_changeset, $value)\n    {\n        $files = $last_changeset->getValue($this)->getFiles();\n        if (isset($value['delete']) && (count($files) == count($value['delete']))) {\n            return true;\n        }\n        return false;\n    }\n\n    public function isEmpty($value, $artifact)\n    {\n        $is_empty = ! $this->checkThatAtLeastOneFileIsUploaded($value);\n        if ($is_empty) {\n            $is_empty = $this->isPreviousChangesetEmpty($artifact, $value);\n        }\n        return $is_empty;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGlobalTrackerRootPath()\n    {\n        return ForgeConfig::get('sys_data_dir') . '/tracker/';\n    }\n\n    protected function getFileInfoForTusUploadedFileReadyToBeAttachedProvider(FileOngoingUploadDao $ongoing_upload_dao): FileInfoForTusUploadedFileReadyToBeAttachedProvider\n    {\n        return new FileInfoForTusUploadedFileReadyToBeAttachedProvider(\n            new FileBeingUploadedInformationProvider(\n                new UploadPathAllocator(\n                    $ongoing_upload_dao,\n                    Tracker_FormElementFactory::instance()\n                ),\n                $ongoing_upload_dao\n            ),\n            $ongoing_upload_dao\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\nclass Tracker_FormElement_Field_LastModifiedBy extends Tracker_FormElement_Field_List implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    /**\n     * Dynamic value does not really get deleted\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        $form_element_data['bind-type'] = 'users';\n        $form_element_data['bind']      = [\n            'value_function' => [\n                'artifact_modifiers',\n            ],\n        ];\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $a             = 'A_' . $this->id;\n            $b             = 'B_' . $this->id;\n            $ids_to_search = array_intersect(\n                array_values($criteria_value),\n                array_merge([100], array_keys($this->getBind()->getAllValues()))\n            );\n            if (count($ids_to_search) > 1) {\n                return \" c.submitted_by IN(\" . $this->getCriteriaDao()->getDa()->escapeIntImplode($ids_to_search) . \") \";\n            } elseif (count($ids_to_search)) {\n                return \" c.submitted_by = \" . $this->getCriteriaDao()->getDa()->escapeInt($ids_to_search[0]) . \" \";\n            }\n        }\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return \"c.submitted_by AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function getQueryFromAggregate()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \" LEFT JOIN  user AS $R2 ON ($R2.user_id = c.submitted_by ) \";\n    }\n\n    public function getQueryGroupby()\n    {\n        return '';\n    }\n\n    public function getQueryOrderby()\n    {\n        return $this->name;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Last Updated By');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'The last person to update the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        return null;\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $last_modified_by = $changeset->getArtifact()->getLastModifiedBy();\n        $value            = new Tracker_FormElement_Field_List_Bind_UsersValue($last_modified_by);\n        if ($changeset->getArtifact()->wasLastModifiedByAnonymous()) {\n            $submitted_by_value = $value->getFullRESTValueForAnonymous($changeset);\n        } else {\n            $submitted_by_value = $value->getFullRESTValue($this);\n        }\n\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $submitted_by_value\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($artifact->wasLastModifiedByAnonymous()) {\n            $label = $purifier->purify($artifact->getLastModifiedBy());\n        } else {\n            $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n            $label = $purifier->purify($value->getLabel());\n        }\n\n        return $label;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact);\n                break;\n            default:\n                $output = $this->getBind()->formatMailArtifactValue($value->getId());\n                break;\n        }\n        return $output;\n    }\n\n    public function isValid(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        if ($submitted_value !== null) {\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n\n        return true;\n    }\n\n    protected function fetchAdminFormElement()\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $fake_value = new Tracker_FormElement_Field_List_Bind_UsersValue(UserManager::instance()->getCurrentUser()->getId());\n        $html      .= $purifier->purify($fake_value->getLabel()) . '<br />';\n        $html      .= '<span class=\"tracker-admin-form-element-help\">';\n        $html      .= dgettext('tuleap-tracker', 'The field is automatically set to the last person who modified the artifact');\n        $html      .= '</span>';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        if (! $value) {\n            $artifact_factory  = Tracker_ArtifactFactory::instance();\n            $builder           = new Tracker_Artifact_ChangesetFactoryBuilder();\n            $changeset_factory = $builder->build();\n\n            $changeset = $changeset_factory->getChangeset(\n                $artifact_factory->getArtifactById($artifact_id),\n                $changeset_id\n            );\n\n            return $changeset->getEmail();\n        }\n\n        return $this->getBind()->formatChangesetValue(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchTooltipValue()\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * Display the field for CSV\n     * Used in CSV data export\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->getBind()->formatChangesetValueForCSV(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return false;\n    }\n\n    public function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n     /**\n     * Get the field data for artifact submission\n     * Check if the user name exists in the platform\n     *\n     * @param string the user name\n     *\n     * @return null|int the user id\n     */\n    public function getFieldData($value)\n    {\n        $um = $this->getUserManager();\n        $u  = $um->getUserByUserName($value);\n        if ($u) {\n            return $u->getId();\n        } else {\n            return null;\n        }\n    }\n\n    public function isNone($value)\n    {\n        return false;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitLastModifiedBy($this);\n    }\n\n    public function getDefaultValue()\n    {\n        return Tracker_FormElement_Field_List_Bind::NONE_VALUE;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_LastUpdateDate extends Tracker_FormElement_Field_Date implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            //Last update date is stored in the changeset (the date of the changeset)\n            return $this->getSQLCompareDate(\n                (bool) $criteria->is_advanced,\n                $criteria_value['op'],\n                $criteria_value['from_date'],\n                $criteria_value['to_date'],\n                'c.submitted_on'\n            );\n        }\n\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return \"c.submitted_on AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return 'c.submitted_on';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->formatDate($changeset->getSubmittedOn());\n    }\n\n    protected function getValueDao()\n    {\n        return null;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Last Update Date');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the last update date of the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $changeset->getSubmittedOn());\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //The last update date is never updated\n        return false;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     *@todo Pass the changeset to not necessarily retrieve the last update date from the *last* chagneset (audit)\n     *\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if (! $value) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $timestamp = $value->getTimestamp();\n        $value     = $timestamp ? $this->formatDateForDisplay($timestamp) : '';\n        $html     .= $value;\n\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value)) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getTimestamp();\n                $output = $value ? $this->formatDate($value) : '';\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if (! $value) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n\n        return parent::fetchTooltipValue($artifact, $value);\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed  $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . $this->formatDateTime(time()) . '</div>';\n        $html .= '<span class=\"tracker-admin-form-element-help\">';\n        $html .= dgettext('tuleap-tracker', 'The field is automatically set to last artifact update date');\n        $html .= '</span>';\n        return $html;\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Retreive The last date Field value\n     *\n     * @param Artifact $artifact The artifact\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, (int) $artifact->getLastChangeset()->getSubmittedOn());\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new Tracker_Artifact_ChangesetDao();\n        $dar       = $dao->getArtifactsByFieldAndLastUpdateDate($trackerId, $date);\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitLastUpdateDate($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return true;\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            date('c', $changeset->getArtifact()->getLastUpdateDate())\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2014 - present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticValueUnchanged;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ItemsDataset\\ItemsDatasetBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ListFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ListValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\XMLCriteriaValueCache;\nuse Tuleap\\Tracker\\FormElement\\TransitionListValidator;\nuse Tuleap\\Tracker\\XML\\TrackerXmlImportFeedbackCollector;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field_List extends Tracker_FormElement_Field implements Tracker_FormElement_Field_Shareable\n{\n    public const NONE_VALUE = 100;\n\n    protected $bind;\n\n    /**\n     * @return array\n     */\n    public function getFormElementDataForCreation($parent_id): array\n    {\n        $form_element_data = parent::getFormElementDataForCreation($parent_id);\n\n        if ($this->getBind()) {\n            $form_element_data['bind-type'] = $this->getBind()->getType();\n        }\n\n        return $form_element_data;\n    }\n\n    /**\n     * Return true if submitted value is None\n     */\n    abstract public function isNone($value);\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind|null\n     * @psalm-ignore-nullable-return\n     */\n    public function getBind()\n    {\n        if (! $this->bind) {\n            $this->bind = null;\n            //retrieve the type of the bind first...\n            $dao = new ListFieldDao();\n            if ($row = $dao->searchByFieldId($this->id)->getRow()) {\n                //...and build the bind\n                $bind_factory = $this->getFormElementFieldListBindFactory();\n                $this->bind   = $bind_factory->getBind($this, $row['bind_type']);\n            }\n        }\n        return $this->bind;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindFactory\n     */\n    protected function getFormElementFieldListBindFactory()\n    {\n        return new Tracker_FormElement_Field_List_BindFactory();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    public function getDecorators(): array\n    {\n        return $this->getBind()->getDecorators();\n    }\n\n    public function setBind($bind)\n    {\n        $this->bind = $bind;\n    }\n\n    /**\n     * Duplicate a field. If the field has custom properties,\n     * they should be propagated to the new one\n     * @param int $from_field_id\n     * @return array the mapping between old values and new ones\n     */\n    public function duplicate($from_field_id)\n    {\n        $dao = new ListFieldDao();\n        if ($dao->duplicate($from_field_id, $this->id)) {\n            $bf = new Tracker_FormElement_Field_List_BindFactory();\n            return $bf->duplicate($from_field_id, $this->id);\n        }\n        return [];\n    }\n\n    /**\n     * @return bool\n     */\n    public function isMultiple()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return ! $this->isMultiple();\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            return $this->getBind()->getCriteriaFrom($this->getCriteriaValue($criteria));\n        }\n\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     *\n     * @see getCriteriaFrom\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return $this->getBind()->getCriteriaWhere($this->getCriteriaValue($criteria));\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     *\n     * @see getQueryFrom\n     *\n     * @return string\n     */\n    public function getQuerySelect()\n    {\n        return $this->getBind()->getQuerySelect();\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values with the RGB values of their decorator\n     * Has no sense for fields other than lists\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getBind()->getQuerySelectWithDecorator();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        return $this->getBind()->getQueryFrom();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFromWithDecorator()\n    {\n        return $this->getBind()->getQueryFromWithDecorator();\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        return $this->getBind()->getQueryOrderby();\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        return $this->getBind()->getQueryGroupby();\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        return $this->getBind()->getQuerySelectAggregate($functions);\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return ['COUNT', 'COUNT_GRBY'];\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_List_ValueDao();\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        static $cache = [];\n\n        if (isset($cache[$this->getId()][$changeset_id])) {\n            return $cache[$this->getId()][$changeset_id];\n        }\n\n        //We have to fetch all values of the changeset as we are a list of value\n        //This is the case only if we are multiple but an old changeset may\n        //contain multiple values\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($changeset_id) as $v) {\n            $val = $this->getBind()->formatChangesetValue($v);\n            if ($val != '') {\n                $values[] = $val;\n            }\n        }\n        $changeset_value                      = implode(', ', $values);\n        $cache[$this->getId()][$changeset_id] = $changeset_value;\n        return $changeset_value;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($changeset_id) as $v) {\n            $values[] = $this->getBind()->formatChangesetValueForCSV($v);\n        }\n        return implode(',', $values);\n    }\n\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (empty($this->criteria_value) || empty($this->criteria_value[$criteria->getReport()->getId()])) {\n            $this->criteria_value = [];\n\n            if (empty($this->criteria_value[$criteria->getReport()->getId()])) {\n                $this->criteria_value[$criteria->getReport()->getId()] = [];\n\n                if ($criteria->id > 0) {\n                    foreach ($this->getCriteriaDao()->searchByCriteriaId($criteria->id) as $row) {\n                        $this->criteria_value[$criteria->getReport()->getId()][] = $row['value'];\n                    }\n                }\n            }\n        } elseif (in_array('', $this->criteria_value[$criteria->getReport()->getId()])) {\n            return '';\n        }\n\n        return $this->criteria_value[$criteria->getReport()->getId()];\n    }\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $searched_field_values = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator              = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        if ($operator !== Tracker_Report_REST::OPERATOR_CONTAINS) {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Unallowed operator for criterion field '$this->name' ($this->id). Allowed operators: [\" . Tracker_Report_REST::OPERATOR_CONTAINS . \"]\");\n        }\n\n        if (is_numeric($searched_field_values)) {\n            $values_to_match = [(int) $searched_field_values];\n        } elseif (is_array($searched_field_values)) {\n            $values_to_match = $searched_field_values;\n        } else {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid format for criterion field '$this->name' ($this->id)\");\n        }\n\n        $criterias = [];\n\n        foreach ($values_to_match as $value_to_match) {\n            if (! is_numeric($value_to_match)) {\n                throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid format for criterion field '$this->name' ($this->id)\");\n            }\n\n            if ($value_to_match == self::NONE_VALUE) {\n                continue;\n            }\n\n            $criterias[] = $this->formatCriteriaValue($value_to_match);\n        }\n\n        $this->setCriteriaValue($criterias, $criteria->getReport()->getId());\n\n        return count($criterias) > 0;\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        $bind = $this->getBind();\n        if (! $bind instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if (is_array($criteria_value) && count($criteria_value) > 0) {\n            $criteria_value_node = $xml_criteria->addChild('criteria_value');\n            $criteria_value_node->addAttribute('type', 'list');\n\n            foreach ($criteria_value as $value_id) {\n                if ($value_id == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n                    $criteria_value_node->addChild('none_value');\n                } else {\n                    try {\n                        $bind->getValue($value_id);\n                    } catch (Tracker_FormElement_InvalidFieldValueException $exception) {\n                        continue;\n                    }\n                    $selected_value_node = $criteria_value_node->addChild('selected_value');\n                    $selected_value_node->addAttribute('REF', 'V' . $value_id);\n                }\n            }\n        }\n    }\n\n    public function setCriteriaValueFromXML(\n        Tracker_Report_Criteria $criteria,\n        SimpleXMLElement $xml_criteria_value,\n        array $xml_field_mapping,\n    ) {\n        if (! $this->getBind() instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        if ((string) $xml_criteria_value['type'] !== 'list') {\n            return;\n        }\n\n        $criteria_list_value = [];\n        foreach ($xml_criteria_value->selected_value as $xml_selected_value) {\n            $ref_value = (string) $xml_selected_value['REF'];\n\n            if (! isset($xml_field_mapping[$ref_value])) {\n                continue;\n            }\n\n            $field_value = $xml_field_mapping[$ref_value];\n            assert($field_value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n\n            $criteria_list_value[] = $field_value;\n        }\n\n        if (isset($xml_criteria_value->none_value)) {\n            $criteria_list_value[] = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n        }\n\n        if (count($criteria_list_value) > 0) {\n            $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n            $cache->set($criteria->getReport()->getId(), $criteria_list_value);\n        }\n    }\n\n    public function saveCriteriaValueFromXML(Tracker_Report_Criteria $criteria)\n    {\n        if (! $this->getBind() instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        $report_id = $criteria->getReport()->getId();\n\n        $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n\n        if (! $cache->has($report_id)) {\n            return;\n        }\n\n        $value_in_field_value     = $cache->get($criteria->getReport()->getId());\n        $formatted_criteria_value = [];\n        foreach ($value_in_field_value as $field_value) {\n            assert($field_value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n            $formatted_criteria_value[] = (int) $field_value->getId();\n        }\n\n        $this->updateCriteriaValue($criteria, $formatted_criteria_value);\n    }\n\n    protected function formatCriteriaValue($value_to_match)\n    {\n        return $value_to_match;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        if (empty($value['values'])) {\n            $value['values'] = [''];\n        }\n        return $value['values'];\n    }\n\n    /**\n     * Display the field value as a criteria\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if (! is_array($criteria_value)) {\n            $criteria_value = [$criteria_value];\n        }\n\n        $multiple    = ' ';\n        $size        = ' ';\n        $prefix_name = \"criteria[$this->id][values]\";\n        $name        = $prefix_name . '[]';\n\n        $tracker_form_element_field_list_bind = $this->getBind();\n        if (! $tracker_form_element_field_list_bind) {\n            throw new LogicException(sprintf('List field with id %d should have a bind but no bind could be found.', $this->getId()));\n        }\n\n        if ($criteria->is_advanced) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min(7, count($tracker_form_element_field_list_bind->getAllValues()) + 2) . '\" ';\n        }\n\n        $html .= '<input type=\"hidden\" name=\"' . $hp->purify($prefix_name) . '\" />';\n        $html .= '<select id=\"tracker_report_criteria_' . ($criteria->is_advanced ? 'adv_' : '') . $hp->purify($this->id) . '\"\n                          name=\"' . $hp->purify($name) . '\" ' .\n                          $size .\n                          $multiple . '>';\n        //Any value\n        $selected = count($criteria_value) && ! in_array('', $criteria_value) ? '' : 'selected=\"selected\"';\n        $html    .= '<option value=\"\" ' . $selected . ' title=\"' . $GLOBALS['Language']->getText('global', 'any') . '\">' . $GLOBALS['Language']->getText('global', 'any') . '</option>';\n        //None value\n        $selected = in_array(Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID, $criteria_value) ? 'selected=\"selected\"' : '';\n        $styles   = $tracker_form_element_field_list_bind->getSelectOptionStyles(Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID);\n\n        $html .= $this->buildOptionHTML(\n            Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID,\n            $selected,\n            $styles,\n            $GLOBALS['Language']->getText('global', 'none')\n        );\n\n        //Field values\n        foreach ($tracker_form_element_field_list_bind->getAllValues() as $id => $value) {\n            $selected = in_array($id, $criteria_value) ? 'selected=\"selected\"' : '';\n\n            $styles = $tracker_form_element_field_list_bind->getSelectOptionStyles($id);\n\n            $html .= $this->buildOptionHTML(\n                $id,\n                $selected,\n                $styles,\n                $tracker_form_element_field_list_bind->formatCriteriaValue($id)\n            );\n        }\n        $html .= '</select>';\n\n        return $html;\n    }\n\n    private function buildOptionHTML(\n        int $id,\n        string $selected,\n        array $styles,\n        string $label,\n    ): string {\n        $hp = Codendi_HTMLPurifier::instance();\n\n        return '<option value=\"' . $hp->purify($id) . '\"\n                        title=\"' . $label . '\"\n                        ' . $hp->purify($selected) . '\n                        style=\"' . $hp->purify($styles['inline-styles']) . '\"\n                        class=\"' . $hp->purify($styles['classes']) . '\">' . $label . '</option>';\n    }\n\n    /**\n     * Add some additionnal information beside the field in the artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchArtifactAdditionnalInfo(?Tracker_Artifact_ChangesetValue $value, array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Add some additionnal information beside the field in the submit new artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchSubmitAdditionnalInfo(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->getBind()->fetchRawValue($value);\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->getBind()->fetchRawValueFromChangeset($changeset);\n    }\n\n    /**\n     * @return ListValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ListValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $selected_values = isset($submitted_values[$this->id]) ? $submitted_values[$this->id] : [];\n        $default_values  = $this->getSubmitDefaultValues();\n\n        return $this->_fetchField(\n            'tracker_field_' . $this->id,\n            'artifact[' . $this->id . ']',\n            $default_values,\n            $selected_values\n        );\n    }\n\n    private function getSubmitDefaultValues()\n    {\n        if ($this->fieldHasEnableWorkflow()) {\n            return [];\n        }\n\n        return $this->getBind()->getDefaultValues();\n    }\n\n     /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return $this->_fetchFieldMasschange('tracker_field_' . $this->id, 'artifact[' . $this->id . ']', $this->getBind()->getDefaultValues());\n    }\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $values          = $submitted_values[$this->id] ?? [];\n        $selected_values = $value ? $value->getListValues() : [];\n        return $this->_fetchField(\n            'tracker_field_' . $this->id,\n            'artifact[' . $this->id . ']',\n            $selected_values,\n            $values\n        );\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                if (empty($value) || ! $value->getListValues()) {\n                    return '-';\n                }\n                $output = $this->fetchArtifactValueReadOnlyForMail($artifact, $value);\n                break;\n            default:\n                $tablo           = [];\n                $selected_values = ! empty($value) ? $value->getListValues() : [];\n                foreach ($selected_values as $value) {\n                    $tablo[] = $this->getBind()->formatMailArtifactValue($value->getId());\n                }\n                $output = implode(', ', $tablo);\n                break;\n        }\n        return $output;\n    }\n\n    protected function fetchArtifactValueReadOnlyForMail(Artifact $artifact, Tracker_Artifact_ChangesetValue $value): string\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html            = '';\n        $selected_values = $value ? $value->getListValues() : [];\n        $tablo           = [];\n\n        if (empty($selected_values)) {\n            return $this->getNoValueLabel();\n        }\n\n        if (count($selected_values) === 1 && isset($selected_values[Tracker_FormElement_Field_List_Bind::NONE_VALUE])) {\n            return $this->getNoValueLabel();\n        }\n\n        foreach ($selected_values as $id => $selected) {\n            $tablo[] = $this->getBind()->formatArtifactValue($id);\n        }\n        $html .= implode(', ', $tablo);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Indicate if a workflow is defined and enabled on a field_id.\n     * @param $id the field_id\n     * @return bool , true if a workflow is defined and enabled on the field_id\n     */\n    public function fieldHasEnableWorkflow()\n    {\n        $workflow = $this->getWorkflow();\n        if (! empty($workflow) && $workflow->is_used) {\n            return $workflow->field_id === $this->id;\n        }\n        return false;\n    }\n\n     /**\n     * Indicate if a workflow is defined on a field_id.\n     * @param $id the field_id\n     * @return bool , true if a workflow is defined on the field_id\n     */\n    public function fieldHasDefineWorkflow()\n    {\n        $workflow = $this->getWorkflow();\n        if (! empty($workflow)) {\n            return $workflow->field_id === $this->id;\n        }\n        return false;\n    }\n\n    /**\n     * Get the workflow of the tracker.\n     * @return Workflow Object\n     */\n    public function getWorkflow()\n    {\n        return $this->getTracker()->getWorkflow();\n    }\n\n    /**\n     * Validate a value\n     * @param mixed $value data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        $valid          = true;\n        $field_value_to = null;\n\n        if ($this->fieldHasEnableWorkflow()) {\n            $last_changeset = $artifact->getLastChangeset();\n\n            try {\n                $field_value_to = $this->getBind()->getValue($value);\n                if (! $last_changeset) {\n                    if (! $this->isTransitionValid(null, $field_value_to)) {\n                           $this->has_errors = true;\n                           $valid            = false;\n                    }\n                } else {\n                    if ($last_changeset->getValue($this) != null) {\n                        foreach ($last_changeset->getValue($this)->getListValues() as $id => $value) {\n                            if ($value != $field_value_to) {\n                                if (! $this->isTransitionValid($value, $field_value_to)) {\n                                    $this->has_errors = true;\n                                    $valid            = false;\n                                }\n                            }\n                        }\n                    } else {\n                        if (! $this->isTransitionValid(null, $field_value_to)) {\n                            $this->has_errors = true;\n                            $valid            = false;\n                        }\n                    }\n                }\n            } catch (Tracker_FormElement_InvalidFieldValueException $exexption) {\n                $valid = false;\n            }\n\n            if ($valid) {\n                $valid = $this->getTransitionListValidator()->checkTransition(\n                    $this,\n                    $value,\n                    $last_changeset\n                );\n            }\n        }\n\n        if ($valid) {\n            return true;\n        } else {\n            if ($field_value_to !== null && ! is_array($field_value_to)) {\n                if (is_array($field_value_to)) {\n                    $GLOBALS['Response']->addFeedback(Feedback::ERROR, dgettext('tuleap-tracker', 'The transition is not valid.'));\n                } else {\n                    $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The transition to the value \"%1$s\" is not valid.'), $field_value_to->getLabel()));\n                }\n            } else {\n                $GLOBALS['Response']->addFeedback('error', dgettext('tuleap-tracker', 'The transition to the value \"None\" is not valid.'));\n            }\n            return false;\n        }\n    }\n\n\n    protected function isTransitionValid($field_value_from, $field_value_to)\n    {\n        if (! $this->fieldHasEnableWorkflow()) {\n            return true;\n        } else {\n            $workflow = $this->getWorkflow();\n            if ($workflow->isTransitionExist($field_value_from, $field_value_to)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    protected function getSelectedValue($selected_values)\n    {\n        if ($this->getBind()) {\n            foreach ($this->getBind()->getBindValues() as $id => $value) {\n                if (isset($selected_values[$id])) {\n                    $from = $value;\n                    return $from;\n                }\n            }\n            return null;\n        }\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getTransitionListValidator(): TransitionListValidator\n    {\n        return new TransitionListValidator(TransitionFactory::instance());\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValues()\n    {\n        return $this->getBind()->getAllValues();\n    }\n\n    /**\n     * @return array\n     */\n    public function getAllVisibleValues()\n    {\n        return $this->getBind()->getAllVisibleValues();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[] array of BindValues that are not hidden + none value if any\n     */\n    public function getVisibleValuesPlusNoneIfAny()\n    {\n        $values = $this->getAllVisibleValues();\n\n        if ($values) {\n            if (! $this->isRequired()) {\n                $none   = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n                $values = [$none->getId() => $none] + $values;\n            }\n        }\n\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Value|null null if not found\n     */\n    public function getListValueById($value_id)\n    {\n        foreach ($this->getVisibleValuesPlusNoneIfAny() as $value) {\n            if ($value->getId() == $value_id) {\n                return $value;\n            }\n        }\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function getFirstValueFor(Tracker_Artifact_Changeset $changeset)\n    {\n        if ($this->userCanRead()) {\n            $value = $changeset->getValue($this);\n            if ($value && ($last_values = $value->getListValues())) {\n                // let's assume there is no more that one status\n                if ($label = array_shift($last_values)->getLabel()) {\n                    return $label;\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array  $selected_values\n     * @param mixed  $submitted_values_for_this_list\n     *\n     * @return string\n     */\n    protected function _fetchField(string $id, string $name, $selected_values, $submitted_values_for_this_list = []) //phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $html     = '';\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($name) {\n            if ($this->isMultiple()) {\n                $name .= '[]';\n            }\n            $name = 'name=\"' . $purifier->purify($name) . '\"';\n        }\n\n        if ($id) {\n            $id = 'id=\"' . $id . '\"';\n        }\n\n        $data_target_fields_ids = '';\n        $target_fields_ids      = $this->getTargetFieldsIds();\n        if (count($target_fields_ids) > 0) {\n            $data_target_fields_ids = \"data-target-fields-ids='\" . json_encode($target_fields_ids) . \"'\";\n        }\n\n        $html .= $this->fetchFieldContainerStart($id, $name, $data_target_fields_ids);\n\n        $from = $this->getSelectedValue($selected_values);\n        if ($from == null && ! isset($submitted_values_for_this_list)) {\n            $none_is_selected = isset($selected_values[Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID]);\n        } else {\n            $none_is_selected = ($submitted_values_for_this_list == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID);\n        }\n\n        if (! $this->fieldHasEnableWorkflow()) {\n            $none_value = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n            $html      .= $this->fetchFieldValue($none_value, $name, $none_is_selected);\n        }\n\n        if (($submitted_values_for_this_list) && ! is_array($submitted_values_for_this_list)) {\n            $submitted_values_array[]       = $submitted_values_for_this_list;\n            $submitted_values_for_this_list = $submitted_values_array;\n        }\n\n        foreach ($this->getBind()->getAllValues() as $id => $value) {\n            $transition_id = null;\n            if ($this->isTransitionValid($from, $value)) {\n                $transition_id = $this->getTransitionId($from, $value->getId());\n                if (! empty($submitted_values_for_this_list)) {\n                    $is_selected = in_array($id, array_values($submitted_values_for_this_list));\n                } else {\n                    $is_selected = isset($selected_values[$id]);\n                }\n                if ($this->userCanMakeTransition($transition_id)) {\n                    if (! $value->isHidden() || $value === $from) {\n                        $html .= $this->fetchFieldValue($value, $name, $is_selected);\n                    }\n                }\n            }\n        }\n\n        $html .= $this->fetchFieldContainerEnd();\n        return $html;\n    }\n\n    protected function fetchFieldContainerStart(string $id, string $name, string $data_target_fields_ids): string\n    {\n        $html      = '';\n        $multiple  = '';\n        $size      = '';\n        $required  = '';\n        $bind_type = 'data-bind-type=\"' . $this->getBind()->getType() . '\"';\n\n        if ($this->isMultiple()) {\n            $multiple = 'multiple=\"multiple\"';\n            $size     = 'size=\"' . min($this->getMaxSize(), count($this->getBind()->getBindValues()) + 2) . '\"';\n        }\n        if ($this->isRequired()) {\n            $required = 'required ';\n        }\n\n        $html .= \"<select $id $name $multiple $size $bind_type $required\";\n        if ($data_target_fields_ids !== '') {\n            $html .= $data_target_fields_ids;\n        }\n        return $html . '>';\n    }\n\n    protected function fetchFieldValue(Tracker_FormElement_Field_List_Value $value, $name, $is_selected)\n    {\n        $value_id  = $value->getId();\n        $list_bind = $this->getBind();\n        if ($value_id == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n            $label = $value->getLabel();\n        } else {\n            $label = $list_bind->formatArtifactValue($value_id);\n        }\n\n        $styles       = $list_bind->getSelectOptionStyles($value_id);\n        $selected     = $is_selected ? 'selected=\"selected\"' : '';\n        $option_start = '<option value=\"'\n                        . $value_id\n                        . '\" '\n                        . $selected\n                        . ' title=\"'\n                        . $label\n                        . '\" style=\"'\n                        . $styles['inline-styles']\n                        . '\" class=\"'\n                        . $styles['classes']\n                        . '\"';\n\n        $dataset = ItemsDatasetBuilder::buildDataAttributesForValue($this, $value);\n\n        return $option_start . $dataset . '>' . $label . '</option>';\n    }\n\n    protected function fetchFieldContainerEnd()\n    {\n        return '</select>';\n    }\n\n\n    protected function _fetchFieldMasschange($id, $name, $selected_values) //phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $multiple   = ' ';\n        $size       = ' ';\n        $bind_type  = 'data-bind-type=\"' . $this->getBind()->getType() . '\"';\n        $has_colors = count($this->getDecorators()) > 0;\n\n        if ($this->isMultiple()) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min($this->getMaxSize(), count($this->getBind()->getAllValues()) + 2) . '\" ';\n            if ($name) {\n                $name .= '[]';\n            }\n        }\n        $html .= '<select ';\n        if ($id) {\n            $html .= 'id=\"' . $id . '\" ';\n        }\n        if ($name) {\n            $html .= 'name=\"' . $name . '\" ';\n        }\n        $html .= $size . $multiple . $bind_type . '>';\n\n        $html .= '<option value=\"' . $purifier->purify(BindStaticValueUnchanged::VALUE_ID) . '\" selected=\"selected\">' .\n            $GLOBALS['Language']->getText('global', 'unchanged') . '</option>';\n        $html .= '<option value=\"' . Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID . '\">' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n\n        foreach ($this->getBind()->getAllValues() as $id => $value) {\n            if (! $value->isHidden()) {\n                $styles  = $this->getBind()->getSelectOptionStyles($id);\n                $dataset = ItemsDatasetBuilder::buildDataAttributesForValue($this, $value);\n                $html   .= '<option value=\"' . $id . '\" title=\"' . $this->getBind()->formatArtifactValue($id) . '\" style=\"' . $styles['inline-styles'] . '\" class=\"' . $styles['classes'] . '\"' . $dataset . '\">';\n                $html   .= $this->getBind()->formatArtifactValue($id);\n                $html   .= '</option>';\n            }\n        }\n\n        $html .= '</select>';\n        return $html;\n    }\n\n\n    protected function getMaxSize()\n    {\n        return 7;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= $this->_fetchField('', '', $this->getBind()->getDefaultValues());\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     * @param Tracker_Artifact_ChangesetValue_List $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html           = '';\n        $last_changeset = $artifact->getLastChangeset();\n        if ($value && $last_changeset !== null) {\n            $html .= $this->fetchChangesetValue($artifact->id, (int) $last_changeset->getId(), $value);\n        }\n        return $html;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(\n        Artifact $artifact,\n        ?Tracker_CardDisplayPreferences $display_preferences = null,\n    ) {\n        $html = '';\n        //We have to fetch all values of the changeset as we are a list of value\n        //This is the case only if we are multiple but an old changeset may\n        //contain multiple values\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($artifact->getLastChangeset()->id) as $v) {\n            $val = $this->getBind()->formatCardValue($v, $display_preferences);\n            if ($val != '') {\n                $values[] = $val;\n            }\n        }\n        $html .= implode(' ', $values);\n\n        return $html;\n    }\n\n    /**\n     * Update the form element.\n     * Override the parent function to handle binds\n     */\n    protected function processUpdate(Tracker_IDisplayTrackerLayout $layout, $request, $current_user, $redirect = false)\n    {\n        $redirect = false;\n        if ($request->exist('bind')) {\n            $params = $request->get('bind');\n            if ($request->get('formElement_data')) {\n                $params = array_merge($params, $request->get('formElement_data'));\n            }\n            $redirect = $this->getBind()->process($params, $no_redirect = true);\n        }\n        parent::processUpdate($layout, $request, $current_user, $redirect);\n    }\n\n    /**\n     * Hook called after a creation of a field\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n        $type      = isset($form_element_data['bind-type']) ? $form_element_data['bind-type'] : '';\n        $bind_data = isset($form_element_data['bind']) ? $form_element_data['bind'] : [];\n\n        $bf = new Tracker_FormElement_Field_List_BindFactory();\n        if ($this->bind = $bf->createBind($this, $type, $bind_data)) {\n            $dao = new ListFieldDao();\n            $dao->save($this->getId(), $bf->getType($this->bind));\n        }\n    }\n\n    /**\n     * Transforms FormElement_List into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $parent_node,\n        array &$xmlMapping,\n        bool $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ): SimpleXMLElement {\n        $node = parent::exportToXML($parent_node, $xmlMapping, $project_export_context, $user_xml_exporter);\n        if ($this->getBind() && $this->shouldBeBindXML()) {\n            $child = $node->addChild('bind');\n            $bf    = new Tracker_FormElement_Field_List_BindFactory();\n            $child->addAttribute('type', $bf->getType($this->getBind()));\n            $this->getBind()->exportToXML($child, $xmlMapping, $project_export_context, $user_xml_exporter);\n        }\n        return $node;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return true;\n    }\n\n    /**\n     * Continue the initialisation from an xml (FormElementFactory is not smart enough to do all stuff.\n     * Polymorphism rulez!!!\n     *\n     * @param SimpleXMLElement                          $xml         containing the structure of the imported Tracker_FormElement\n     * @param array                                     &$xmlMapping where the newly created formElements indexed by their XML IDs are stored (and values)\n     */\n    public function continueGetInstanceFromXML(\n        $xml,\n        &$xmlMapping,\n        User\\XML\\Import\\IFindUserFromXMLReference $user_finder,\n        TrackerXmlImportFeedbackCollector $feedback_collector,\n    ) {\n        parent::continueGetInstanceFromXML($xml, $xmlMapping, $user_finder, $feedback_collector);\n        // if field is a list add bind\n        if ($xml->bind) {\n            $bind = $this->getBindFactory()->getInstanceFromXML($xml->bind, $this, $xmlMapping, $user_finder);\n            $this->setBind($bind);\n        }\n    }\n\n    /**\n     * Callback called after factory::saveObject. Use this to do post-save actions\n     *\n     * @param Tracker $tracker The tracker\n     * @param bool $tracker_is_empty\n     */\n    public function afterSaveObject(Tracker $tracker, $tracker_is_empty, $force_absolute_ranking)\n    {\n        $bind = $this->getBind();\n        $this->getListDao()->save($this->getId(), $this->getBindFactory()->getType($bind));\n        $bind->saveObject();\n    }\n\n    /**\n     * Get an instance of Tracker_FormElement_Field_ListDao\n     *\n     * @return ListFieldDao\n     */\n    public function getListDao()\n    {\n        return new ListFieldDao();\n    }\n\n    /**\n     * Get an instance of Tracker_FormElement_Field_List_BindFactory\n     *\n     * @return Tracker_FormElement_Field_List_BindFactory\n     */\n    public function getBindFactory()\n    {\n        return new Tracker_FormElement_Field_List_BindFactory();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        $value_ids       = $this->getValueDao()->searchById($value_id, $this->id);\n        $bindvalue_ids   = [];\n        if ($value_ids) {\n            foreach ($value_ids as $v) {\n                $bindvalue_ids[] = $v['bindvalue_id'];\n            }\n        }\n        $bind_values = [];\n        if (count($bindvalue_ids)) {\n            $bind_values = $this->getBind()->getBindValues($bindvalue_ids);\n        }\n        $changeset_value = new Tracker_Artifact_ChangesetValue_List($value_id, $changeset, $this, $has_changed, $bind_values);\n        return $changeset_value;\n    }\n\n    public function getRESTBindingProperties()\n    {\n        $bind = $this->getBind();\n        return $bind->getRESTBindingProperties();\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (array_key_exists('bind_value_ids', $value) && is_array($value['bind_value_ids'])) {\n            return array_map('intval', $value['bind_value_ids']);\n        }\n        throw new Tracker_FormElement_InvalidFieldValueException('List fields values must be passed as an array of ids (integer) in \\'bind_value_ids\\''\n           . ' Example: {\"field_id\": 1548, \"bind_value_ids\": [457]}');\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string the rest field value\n     *\n     * @return mixed the field data corresponding to the rest_value for artifact submision\n     */\n    public function getFieldData($value)\n    {\n        if ($value === $GLOBALS['Language']->getText('global', 'none')) {\n            return Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID;\n        }\n\n        $bind = $this->getBind();\n        if ($bind != null) {\n            $value = $bind->getFieldData($value, $this->isMultiple());\n            if ($value != null) {\n                return $value;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $previous_changesetvalue, $new_value)\n    {\n        if (! is_array($new_value)) {\n            $new_value = [$new_value];\n        }\n        if (empty($new_value)) {\n            $new_value = [Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID];\n        }\n        if ($previous_changesetvalue) {\n            $old_value = $previous_changesetvalue->getValue();\n        }\n        if (empty($old_value)) {\n            $old_value = [Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID];\n        }\n        sort($old_value);\n        sort($new_value);\n        return $old_value != $new_value;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        if ($b = $this->getBind()) {\n            return $b->isNotificationsSupported();\n        }\n        return false;\n    }\n\n    protected function permission_is_authorized($type, $transition_id, $user_id, $group_id) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        include_once __DIR__ . '/../../../../../src/www/project/admin/permissions.php';\n\n        return permission_is_authorized($type, $transition_id, $user_id, $group_id);\n    }\n\n    /**\n     * Check if the user can make the transition\n     *\n     * @param int  $transition_id The id of the transition\n     * @param PFUser $user          The user. If null, take the current user\n     *\n     *@return bool true if user has permission on this field\n     */\n    public function userCanMakeTransition($transition_id, ?PFUser $user = null)\n    {\n        if ($transition_id) {\n            $group_id = $this->getTracker()->getGroupId();\n\n            if (! $user) {\n                $user = $this->getCurrentUser();\n            }\n            return $this->permission_is_authorized('PLUGIN_TRACKER_WORKFLOW_TRANSITION', $transition_id, $user->getId(), $group_id);\n        }\n        return true;\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        return $this->getBind()->getRecipients($changeset_value);\n    }\n\n    protected function getTransitionId($from, $to)\n    {\n        return TransitionFactory::instance()->getTransitionId($this->getTracker(), $from, $to);\n    }\n\n    public function getDefaultValue()\n    {\n        $default_array = $this->getBind()->getDefaultValues();\n        if (! $default_array) {\n            return [Tracker_FormElement_Field_List_Bind::NONE_VALUE];\n        }\n        return array_keys($default_array);\n    }\n\n\n    public function getDefaultRESTValue()\n    {\n        return $this->getBind()->getDefaultRESTValues();\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! ($this->isPossibleValue($value) && $this->validate($artifact, $value));\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isPossibleValue($value)\n    {\n        $is_possible_value = true;\n\n        if (is_array($value)) {\n            foreach ($value as $id) {\n                $is_possible_value = $is_possible_value && $this->checkValueExists($id);\n            }\n        } else {\n            $is_possible_value = $this->checkValueExists($value);\n        }\n\n        return $is_possible_value;\n    }\n\n    public function checkValueExists(?string $value_id): bool\n    {\n        return $this->getBind()->isExistingValue($value_id) ||\n               $value_id === (string) self::NONE_VALUE ||\n               $value_id === null;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if ($this->isEmpty($value, $artifact) && $this->isRequired()) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return $this->isNone($value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        $this->getBind()->fixOriginalValueIds($value_mapping);\n    }\n\n    /**\n     * @see Tracker_FormElement::process()\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        parent::process($layout, $request, $current_user);\n        if ($request->get('func') == 'get-values') {\n            $GLOBALS['Response']->sendJSON($this->getBind()->fetchFormattedForJson());\n        }\n    }\n\n    public function fetchFormattedForJson()\n    {\n        $json           = parent::fetchFormattedForJson();\n        $json['values'] = $this->getBind()->fetchFormattedForJson();\n        return $json;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $values = null;\n        $bind   = $this->getBind();\n        if ($bind != null) {\n            $values = $bind->getRESTAvailableValues();\n        }\n        return $values;\n    }\n\n    /**\n     * @param string $new_value\n     *\n     * @return int | null\n     */\n    public function addBindValue($new_value)\n    {\n        return $this->getBind()->addValue($new_value);\n    }\n\n    /**\n     * Get the html to select a default value\n     *\n     * @return string html\n     */\n    public function getSelectDefaultValues($default_values)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n\n        //Select default values\n        $html .= '<p>';\n        $html .= '<strong>' . dgettext('tuleap-tracker', 'Select default value') . '</strong><br />';\n        $html .= '<select name=\"bind[default][]\" class=\"bind_default_values\" size=\"7\" multiple=\"multiple\">';\n        foreach ($this->getAllVisibleValues() as $v) {\n            $selected = isset($default_values[$v->getId()]) ? 'selected=\"selected\"' : '';\n            $html    .= '<option value=\"' . $v->getId() . '\" ' . $selected . '>' . $hp->purify($v->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . '</option>';\n        }\n        $html .= '</select>';\n        $html .= '</p>';\n\n        return $html;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BoundDecoratorEditor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BoundDecoratorSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindDefaultValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindDecoratorDao;\nuse Tuleap\\Tracker\\REST\\FieldValueRepresentation;\n\n/**\n * @template ListValueBinding of Tracker_FormElement_Field_List_Value\n */\nabstract class Tracker_FormElement_Field_List_Bind implements //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n    Tracker_FormElement_Field_Shareable,\n    Tracker_IProvideJsonFormatOfMyself,\n    BindVisitable\n{\n    public const REST_ID_KEY    = 'bind_value_id';\n    public const REST_LABEL_KEY = 'bind_value_label';\n    public const REST_TYPE_KEY  = 'bind_type';\n    public const REST_LIST_KEY  = 'bind_list';\n\n    public const NONE_VALUE = 100;\n\n    /**\n     * @var BindDefaultValueDao\n     */\n    protected $default_value_dao;\n\n    protected $default_values;\n    /**\n     * @var Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    protected $decorators;\n\n    /** @var Tracker_FormElement_Field */\n    protected $field;\n\n    public function __construct($field, $default_values, $decorators)\n    {\n        $this->field          = $field;\n        $this->default_values = $default_values;\n        $this->decorators     = $decorators;\n    }\n\n    /**\n     * Get the default values definition of the bind\n     *\n     * @return array (123 => 1, 234 => 1, 345 => 1)\n     */\n    public function getDefaultValues()\n    {\n        return $this->checkDefaultValueValidity($this->default_values);\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValues(array_keys($this->getDefaultValues()));\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = new FieldValueRepresentation();\n            $representation->build([\n                self::REST_ID_KEY    => $value->getId(),\n                self::REST_LABEL_KEY => $value->getAPIValue(),\n            ]);\n            $rest_array[] = $representation;\n        }\n        return $rest_array;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    public function getDecorators()\n    {\n        return $this->decorators;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getAllValues();\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getAllValuesWithActiveUsersOnly(): array;\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllVisibleValues()\n    {\n        $values = $this->getAllValues();\n        foreach ($values as $key => $value) {\n            if ($value->isHidden()) {\n                unset($values[$key]);\n            }\n        }\n\n        return $values;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isExistingValue($value_id)\n    {\n        return array_key_exists($value_id, $this->getAllValues());\n    }\n\n    public function fetchFormattedForJson()\n    {\n        $values = [];\n        foreach ($this->getAllValues() as $value) {\n            $values[] = $value->fetchFormattedForJson();\n        }\n        return $values;\n    }\n\n    public function getRESTBindingProperties()\n    {\n        $bind_factory = new Tracker_FormElement_Field_List_BindFactory();\n        $bind_type    = $bind_factory->getType($this);\n        return [\n            self::REST_TYPE_KEY => $bind_type,\n            self::REST_LIST_KEY => $this->getRESTBindingList(),\n        ];\n    }\n\n    /**\n     *\n     * @return array\n     */\n    abstract protected function getRESTBindingList();\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    abstract public function getFieldData($submitted_value, $is_multiple);\n    /**\n     * @return array|Tracker_FormElement_Field_List_BindValue|null\n     * @throws Tracker_FormElement_InvalidFieldValueException\n     */\n    abstract public function getValue($value_id);\n    /**\n     * @return array\n     */\n    abstract public function getChangesetValues($changeset_id);\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    abstract public function fetchRawValue($value);\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    abstract public function fetchRawValueFromChangeset($changeset);\n\n    /**\n     * @return string\n     */\n    abstract public function formatCriteriaValue($value_id);\n\n    /**\n     * @return string\n     */\n    abstract public function formatMailCriteriaValue($value_id);\n\n    /**\n     * @return string\n     */\n    abstract public function formatChangesetValue($value);\n\n    /**\n     * @return string\n     */\n    public function formatCardValue($value, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        return $this->formatChangesetValue($value);\n    }\n\n\n    /**\n     * @return string\n     */\n    abstract public function formatChangesetValueForCSV($value);\n\n    /**\n     * Formatted changeset are considered without link by default.\n     * Classes that format with a link (i.e. userBind) must override this.\n     * @return string\n     */\n    public function formatChangesetValueWithoutLink($value)\n    {\n        return $this->formatChangesetValue($value);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatArtifactValue($value_id)\n    {\n        if ($value_id && $value_id != self::NONE_VALUE) {\n            return $this->formatCriteriaValue($value_id);\n        } else {\n            return '-';\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailArtifactvalue($value_id)\n    {\n        return $this->formatMailCriteriaValue($value_id);\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param array $criteria_value array of criteria_value (which are array)\n     * @return string\n     */\n    public function getCriteriaFrom($criteria_value)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value) {\n            $a = 'A_' . $this->field->id;\n            $b = 'B_' . $this->field->id;\n            if ($this->isSearchingNone($criteria_value)) {\n                return \" LEFT JOIN (\n                    tracker_changeset_value AS $a\n                    INNER JOIN tracker_changeset_value_list AS $b ON (\n                        $b.changeset_value_id = $a.id\n                    )\n                ) ON ($a.changeset_id = c.id\n                    AND $a.field_id = \" . $this->field->id . \"\n                )\";\n            }\n\n            return \" INNER JOIN tracker_changeset_value AS $a\n                     ON ($a.changeset_id = c.id\n                         AND $a.field_id = \" . $this->field->id . \"\n                     )\n                     INNER JOIN tracker_changeset_value_list AS $b ON (\n                        $b.changeset_value_id = $a.id\n                     ) \";\n        }\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param array $criteria_value array of id => criteria_value (which are array)\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria_value)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value) {\n            $a = 'A_' . $this->field->id;\n            $b = 'B_' . $this->field->id;\n\n            $data_access = CodendiDataAccess::instance();\n\n            if ($this->isSearchingNone($criteria_value)) {\n                $values_id = $data_access->escapeIntImplode(array_values($criteria_value));\n\n                return \" $b.bindvalue_id IN (\" . $values_id . \") OR $b.bindvalue_id IS NULL \";\n            }\n\n            $ids_to_search = $data_access->escapeIntImplode($this->getIdsToSearch($criteria_value));\n\n            if ($ids_to_search === '') {\n                return '';\n            }\n\n            return \" $b.bindvalue_id IN(\" . $ids_to_search . \") \";\n        }\n        return '';\n    }\n\n    protected function getIdsToSearch($criteria_value)\n    {\n        return array_intersect(\n            array_values($criteria_value),\n            array_merge(\n                [100],\n                array_keys($this->getAllValues())\n            )\n        );\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    abstract public function getQuerySelect();\n\n    /**\n     * Get the \"select\" statement to retrieve field values with their decorator if they exist\n     * @return string\n     * @see getQuerySelect\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getQuerySelect();\n    }\n\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    abstract public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list');\n\n    public function getQueryFromWithDecorator($changesetvalue_table = 'tracker_changeset_value_list'): string\n    {\n        return $this->getQueryFrom($changesetvalue_table);\n    }\n\n    /**\n     * Get the field\n     *\n     * @return Tracker_FormElement_Field_List\n     */\n    public function getField()\n    {\n        return $this->field;\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    abstract public function getValueFromRow($row);\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'bindtable_select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'bindtable_select_nb'  => 3,\n     *                  'bindtable_from'       => 'user',\n     *                  'bindtable_join_on_id' => 'user.user_id',\n     *              }\n     */\n    abstract public function getBindtableSqlFragment();\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    abstract public function getQueryOrderby();\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    abstract public function getQueryGroupby();\n\n    public function getSelectOptionStyles($value_id)\n    {\n        $default_styles = ['classes' => '', 'inline-styles' => ''];\n\n        if (count($this->decorators)) {\n            if (isset($this->decorators[$value_id])) {\n                return $this->decorators[$value_id]->decorateSelectOptionWithStyles();\n            } else {\n                $default_styles['classes'] = 'select-option-not-colored';\n\n                return $default_styles;\n            }\n        } else {\n            return $default_styles;\n        }\n    }\n\n    abstract public function getDao();\n    abstract public function getValueDao();\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    abstract public function fetchAdminEditForm();\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return bool true if we want to redirect\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $decorator_editor = new BoundDecoratorEditor(new BindDecoratorDao());\n\n        if (isset($params['decorator'])) {\n            foreach ($params['decorator'] as $value_id => $hexacolor) {\n                if ($hexacolor) {\n                    $decorator_editor->update($this->field, $value_id, $hexacolor, $params['required']);\n                } else {\n                    Tracker_FormElement_Field_List_BindDecorator::delete($this->field->getId(), $value_id);\n                }\n            }\n        }\n\n        $default = $this->extractDefaultValues($params);\n\n        $this->getDefaultValueDao()->save($this->field->getId(), $default);\n\n        if (! $no_redirect) {\n            $tracker = $this->field->getTracker();\n            if ($tracker === null) {\n                $GLOBALS['Response']->redirect('/');\n                return true;\n            }\n            $GLOBALS['Response']->redirect('?' . http_build_query([\n                    'tracker'            => $tracker->getId(),\n                    'func'               => 'admin-formElements',\n            ]));\n        }\n        return true;\n    }\n\n    private function extractDefaultValues(array $params): array\n    {\n        if (! isset($params['default'])) {\n            return [];\n        }\n\n        return $this->filterDefaultValues($params['default']);\n    }\n\n    protected function filterDefaultValues(array $bind_default): array\n    {\n        return array_intersect($bind_default, array_keys($this->getAllVisibleValues()));\n    }\n\n    /**\n     * @return BindDefaultValueDao\n     */\n    protected function getDefaultValueDao()\n    {\n        if (! $this->default_value_dao) {\n            $this->default_value_dao = new BindDefaultValueDao();\n        }\n        return $this->default_value_dao;\n    }\n\n    public function setDefaultValueDao(BindDefaultValueDao $dao)\n    {\n        $this->default_value_dao = $dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    abstract public static function fetchAdminCreateForm($field);\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    abstract public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    );\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    abstract public function getBindValues($bindvalue_ids = null);\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getBindValuesForIds(array $bindvalue_ids);\n\n    /**\n     * @return string\n     */\n    abstract public function getType();\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    abstract public function getBindValueById($bindvalue_id);\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    abstract public function getQuerySelectAggregate($functions);\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        if (is_array($this->default_values)) {\n            $t = [];\n            foreach ($this->default_values as $value) {\n                $t[$value->getId()] = $value;\n            }\n            $this->default_values = $t;\n\n            if (count($this->default_values)) {\n                $this->getDefaultValueDao()->save($this->field->getId(), array_keys($this->default_values));\n            }\n        }\n\n        if (is_array($this->decorators) && ! empty($this->decorators)) {\n            $saver  = $this->getBoundDecoratorSaver();\n            $values = $this->getBindValues();\n            foreach ($this->decorators as $decorator) {\n                if (! $decorator->isUsingOldPalette()) {\n                    $color = $decorator->tlp_color_name;\n                } else {\n                    $color = ColorHelper::RGBtoHexa($decorator->r, $decorator->g, $decorator->b);\n                }\n\n                if (isset($values[$decorator->value_id])) {\n                    $value_id = $values[$decorator->value_id]->getId();\n                } else {\n                    $value_id = $decorator->value_id;\n                }\n\n                $saver->save($this->field, $value_id, $color);\n            }\n        }\n    }\n\n    private function getBoundDecoratorSaver(): BoundDecoratorSaver\n    {\n        return new BoundDecoratorSaver(new BindDecoratorDao());\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        return [];\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return false;\n    }\n\n    /**\n     * Retrieve all values which match the keyword\n     *\n     * @param string $keyword The keyword to search\n     * @param int    $limit   The max number of values to return. Default is 10\n     *\n     * @return array\n     */\n    public function getValuesByKeyword($keyword, $limit = 10)\n    {\n        $values = [];\n        //pretty slow, but we do not have a better way to filter a value function\n        foreach ($this->getAllValues($keyword) as $v) {\n            if (false !== stripos($v->getLabel(), $keyword)) {\n                $values[] = $v;\n                if (--$limit === 0) {\n                    break;\n                }\n            }\n        }\n        return $values;\n    }\n\n    /**\n     * Retrieve all the numeric values of the binded values\n     *\n     * @return array of numeric bind values\n     */\n    abstract public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value);\n\n    /**\n     * @psalm-param ListValueBinding $value\n     */\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $representation = new FieldValueRepresentation();\n        $values         = [\n            self::REST_ID_KEY    => $value->getId(),\n            self::REST_LABEL_KEY => $value->getAPIValue(),\n        ];\n        $representation->build($values);\n        return $representation;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $rest_values = [];\n        foreach ($this->getAllValues() as $value) {\n            $rest_values[] = $this->getRESTBindValue($value);\n        }\n        return $rest_values;\n    }\n\n    abstract public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value);\n\n    abstract public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field);\n\n    public function getFieldDataFromRESTValue($value): int\n    {\n        return (int) $value;\n    }\n\n    public function addValue($new_value)\n    {\n        return;\n    }\n\n    protected function isSearchingNone($criteria_value)\n    {\n        if (empty($criteria_value)) {\n            return true;\n        }\n\n        if (\n            is_array($criteria_value)\n            && in_array(Tracker_FormElement_Field_List::NONE_VALUE, $criteria_value)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private function checkDefaultValueValidity(array $default_values): array\n    {\n        if (empty($default_values)) {\n            return $default_values;\n        }\n\n        return array_intersect_key($default_values, $this->getAllVisibleValues());\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\n\nclass Tracker_FormElement_Field_List_Bind_Null extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'null';\n\n    public function __construct($field)\n    {\n        parent::__construct($field, [], []);\n    }\n\n    /**\n     * @return array all values of the field\n     */\n    public function getAllValues()\n    {\n        return [];\n    }\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return [];\n    }\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the alue for artifact submision\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        return [];\n    }\n    /**\n     * @return array\n     */\n    public function getValue($value_id)\n    {\n        return [];\n    }\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        return [];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param array $criteria_value array of criteria_value (which are array)\n     * @return string\n     */\n    public function getCriteriaFrom($criteria_value)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param array $criteria array of id => criteria_value (which are array)\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        return '';\n    }\n\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        return null;\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'bindtable_select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'bindtable_select_nb'  => 3,\n     *                  'bindtable_from'       => 'user',\n     *                  'bindtable_join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [];\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        return '';\n    }\n\n\n    public function getDao()\n    {\n        return null;\n    }\n    public function getValueDao()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        return '';\n    }\n\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return '';\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        return '';\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        return [];\n    }\n\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return [];\n    }\n\n    /**\n     * Fixes original value ids after field duplication.\n     *\n     * @param array $value_mapping An array associating old value ids to new value ids.\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        return [];\n    }\n\n    public function getQuerySelectAggregate($functions)\n    {\n        return [];\n    }\n\n    protected function getRESTBindingList()\n    {\n        return [];\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        return;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        return;\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindNull($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        return new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Colorpicker\\ColorpickerMountPointPresenter;\nuse Tuleap\\Tracker\\Events\\IsFieldUsedInASemanticEvent;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticXmlExporter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\OpenListValueDao;\nuse Tuleap\\Tracker\\FormElement\\View\\Admin\\Field\\ListFields\\BindValuesAdder;\nuse Tuleap\\Tracker\\FormElement\\FormElementListValueAdminViewPresenterBuilder;\nuse Tuleap\\Tracker\\REST\\FieldListStaticValueRepresentation;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_List_Bind_Static extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'static';\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_StaticValue[]\n     */\n    protected $values;\n\n    protected $is_rank_alpha;\n\n    /**\n     * @var BindStaticValueDao\n     */\n    private $value_dao = null;\n\n    public function __construct($field, $is_rank_alpha, $values, $default_values, $decorators)\n    {\n        parent::__construct($field, $default_values, $decorators);\n\n        $this->is_rank_alpha = $is_rank_alpha;\n        $this->values        = $values;\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($value->getLabel(), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue\n     */\n    public function getValueFromRow($row)\n    {\n        return new Tracker_FormElement_Field_List_Bind_StaticValue(\n            $row['id'],\n            $row['label'],\n            $row['description'],\n            $row['rank'],\n            $row['is_hidden']\n        );\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"tracker_field_list_bind_static_value.id,\n                             tracker_field_list_bind_static_value.label,\n                             tracker_field_list_bind_static_value.description,\n                             tracker_field_list_bind_static_value.rank,\n                             tracker_field_list_bind_static_value.is_hidden\",\n            'select_nb'  => 5,\n            'from'       => 'tracker_field_list_bind_static_value',\n            'join_on_id' => 'tracker_field_list_bind_static_value.id',\n        ];\n    }\n\n    protected function getRESTBindingList()\n    {\n        // returns empty array as static are already listed in 'values'\n        return [];\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n         return $this->format($this->values[$value_id]);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        // Should receive only valid value object but keep it as is for compatibility reasons\n        if (is_array($value)) {\n            if (isset($this->values[$value['id']])) {\n                $value = $this->values[$value['id']];\n            } elseif ($value['id'] == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n                $value = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n            }\n        }\n        if ($value) {\n            assert($value instanceof Tracker_FormElement_Field_List_Value);\n            return $this->formatChangesetValueObject($value);\n        }\n    }\n\n    private function formatChangesetValueObject(Tracker_FormElement_Field_List_Value $value)\n    {\n        if (isset($this->decorators[$value->getId()])) {\n            return $this->decorators[$value->getId()]->decorate($this->format($value));\n        }\n        return $this->format($value);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        if ($value['id'] == 100 || ! array_key_exists($value['id'], $this->values)) {\n            return '';\n        } else {\n            return $this->values[$value['id']]->getLabel();\n        }\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue[]\n     */\n    public function getAllValues()\n    {\n        return $this->values;\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value the field value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(\",\", $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getLabel(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getLabel() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * @param int $value_id\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue\n     * @throws Tracker_FormElement_InvalidFieldValueException\n     */\n    public function getValue($value_id)\n    {\n        if (! isset($this->values[$value_id])) {\n            throw new Tracker_FormElement_InvalidFieldValueException();\n        }\n\n        return $this->values[$value_id];\n    }\n\n    public function getIsRankAlpha()\n    {\n        return $this->is_rank_alpha;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->values[$value]->getLabel();\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $values = [];\n        foreach ($this->getValueDao()->searchChangesetValues($changeset_id, $this->field->id, $this->is_rank_alpha) as $row) {\n            $values[] = $row;\n        }\n        return $values;\n    }\n\n    protected function getIdsToSearch($criteria_value)\n    {\n        return array_values($criteria_value);\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id AS `\" . $this->field->name . \"`\";\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values with the RGB values of their decorator\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getQuerySelect() . \", color.red, color.green, color.blue, color.tlp_color_name\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n\n        return \"LEFT JOIN (\n                    tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN tracker_field_list_bind_static_value AS $R2 ON ($R2.id = $R3.bindvalue_id AND $R2.field_id = \" . $this->field->id . \" )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\n               \";\n    }\n\n    public function getQueryFromWithDecorator($changesetvalue_table = 'tracker_changeset_value_list'): string\n    {\n        $current_field_id = $this->field->id;\n        $R2               = 'R2_' . $current_field_id;\n        $none_value       = (int) self::NONE_VALUE;\n\n        $sql = \"LEFT OUTER JOIN tracker_field_list_bind_decorator AS color ON (\n                ($R2.field_id = color.field_id AND color.value_id = $R2.id)\n                OR ($R2.field_id IS null AND color.value_id = $none_value AND color.field_id = $current_field_id)\n            )\";\n\n        return $this->getQueryFrom($changesetvalue_table) . $sql;\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return $this->is_rank_alpha ? \"$R2.label\" : \"$R2.rank\";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.label AS label, count(*) AS value\",\n                        'group_by' => \"$R2.label\",\n                    ];\n                } else {\n                    $select = \"$f($R2.label) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    public function getDao()\n    {\n        return new BindStaticDao();\n    }\n\n    private function getOpenValueDao()\n    {\n        return new OpenListValueDao();\n    }\n\n    private function getTemplateRenderer(): TemplateRenderer\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function getFormElementListAdminViewBuilder(): FormElementListValueAdminViewPresenterBuilder\n    {\n        return new FormElementListValueAdminViewPresenterBuilder($this->getValueDao());\n    }\n\n    private function getAdminEditRowModifiable(\n        Tracker_FormElement_Field_List_Value $value,\n        ?ColorpickerMountPointPresenter $decorator,\n        bool $is_custom_value,\n    ): string {\n        return $this->getTemplateRenderer()->renderToString(\n            'admin-edit-row-modifiable',\n            $this->getFormElementListAdminViewBuilder()->buildPresenter(\n                $this->field,\n                $value,\n                $decorator,\n                $is_custom_value\n            )\n        );\n    }\n\n    /**\n     * @return BindStaticValueDao\n     */\n    public function getValueDao()\n    {\n        if ($this->value_dao === null) {\n            $this->value_dao = new BindStaticValueDao();\n        }\n        return $this->value_dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        $html = '';\n        $h    = new HTML_Element_Input_Checkbox(dgettext('tuleap-tracker', 'alphabetically sort values'), 'bind[is_rank_alpha]', 0);\n        $h->setId('is_rank_alpha');\n        $html .= '<p>' . $h->render() . '</p>';\n        $html .= '<p>';\n        $html .= '<textarea name=\"formElement_data[bind][add]\" rows=\"5\" cols=\"30\"></textarea><br />';\n        $html .= '<span style=\"color:#999; font-size:0.8em;\">' . dgettext('tuleap-tracker', 'Add one value per row') . '</span>';\n        $html .= '</p>';\n        return $html;\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     */\n    public function fetchAdminEditForm(): string\n    {\n        if ($this->field->isTargetSharedField()) {\n            return $this->fetchAdminEditFormNotModifiable();\n        } else {\n            return $this->fetchAdminEditFormModifiable();\n        }\n    }\n\n    private function fetchAdminEditFormModifiable(): string\n    {\n        $html = '';\n\n        $html .= $this->fetchAdminEditFormModifiableWithUsersValues();\n\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Static values') . '</h3>';\n\n        $h = new HTML_Element_Input_Checkbox(\n            dgettext('tuleap-tracker', 'alphabetically sort values'),\n            'bind[is_rank_alpha]',\n            $this->is_rank_alpha\n        );\n        $h->setId('is_rank_alpha');\n        $h->addParam('class', 'is_rank_alpha');\n        $html .= '<p>' . $h->render() . '</p>';\n\n        $html .= '<table><tr><td>';\n        $html .= '<input type=\"hidden\" name=\"bind[order]\" class=\"bind_order_values\" value=\"\" />';\n        $html .= '<ul class=\"tracker-admin-bindvalue_list tracker-admin-bindvalue_list_sortable\">';\n\n        $retriever       = new BindValuesAdder();\n        $possible_values = $retriever->addNoneValue($this->getAllValues());\n\n        foreach ($possible_values as $v) {\n            $html .= $this->fetchAdminEditRowModifiable($v);\n        }\n        $html .= '</ul>';\n        $html .= '</td></tr></table>';\n\n        //Add new values\n        $html .= '<p id=\"tracker-admin-bind-static-addnew\">';\n        $html .= '<strong>' . dgettext('tuleap-tracker', 'Add new values') . '</strong><br />';\n        $html .= '<textarea name=\"bind[add]\" rows=\"5\" cols=\"30\"></textarea><br />';\n        $html .= '<span style=\"color:#999; font-size:0.8em;\">' . dgettext(\n            'tuleap-tracker',\n            'Add one value per row'\n        ) . '</span><br />';\n        $html .= '</p>';\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    private function fetchAdminEditFormModifiableWithUsersValues(): string\n    {\n        $html            = '';\n        $user_row_values = $this->getOpenValueDao()->searchByFieldId($this->getField()->getId());\n\n        if ($user_row_values->count() === 0) {\n            return $html;\n        }\n\n        $html       .= '<h3>' . dgettext('tuleap-tracker', 'Values added by users') . '</h3>';\n        $user_values = [];\n\n        foreach ($user_row_values as $row_value) {\n            $user_values[] = new Tracker_FormElement_Field_List_OpenValue(\n                $row_value['id'],\n                $row_value['label'],\n                $row_value['is_hidden']\n            );\n        }\n\n        $html .= '<table><tr><td>';\n        $html .= '<input type=\"hidden\" name=\"bind[order]\" value=\"\" />';\n        $html .= '<ul class=\"tracker-admin-bindvalue_list\">';\n\n        foreach ($user_values as $value) {\n            $html .= $this->getAdminEditRowModifiable($value, null, true);\n        }\n\n        $html .= '</ul>';\n        $html .= '</td></tr></table>';\n\n        return $html;\n    }\n\n    private function fetchAdminEditRowModifiable(Tracker_FormElement_Field_List_Value $value): string\n    {\n        assert($value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n\n        $event = new IsFieldUsedInASemanticEvent($this->field);\n\n        EventManager::instance()->processEvent($event);\n\n        $is_used_in_semantics = $event->isUsed();\n        if (isset($this->decorators[$value->getId()])) {\n            $decorator = $this->decorators[$value->getId()]->decorateEdit($is_used_in_semantics);\n        } else {\n            $decorator = Tracker_FormElement_Field_List_BindDecorator::noDecoratorEdit(\n                $this->field->id,\n                $value->getId(),\n                $is_used_in_semantics\n            );\n        }\n\n        return $this->getAdminEditRowModifiable($value, $decorator, false);\n    }\n\n    private function fetchAdminEditFormNotModifiable()\n    {\n        $html = '';\n\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Static values') . '</h3>';\n        $html .= '<table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">';\n        foreach ($this->getAllValues() as $v) {\n            $html .= $this->fetchAdminEditRowNotModifiable($v);\n        }\n        $html .= '</table>';\n\n        // @todo: Show default value ?\n\n        return $html;\n    }\n\n    private function fetchAdminEditRowNotModifiable(Tracker_FormElement_Field_List_Value $v)\n    {\n        $html  = '';\n        $html .= '<tr valign=\"top\" class=\"' . ($v->isHidden() ? 'tracker_admin_static_value_hidden' : '') . '\">';\n        $html .= '<td>' . $this->formatChangesetValue(['id' => $v->getId()]) . '</td>';\n        $html .= '</tr>';\n        return $html;\n    }\n\n    /**\n     * Say if a value can be hidden without checking the semantic status\n     *\n     * @param Tracker_FormElement_Field_List_Bind_StaticValue $value the value\n     *\n     * @return bool true if the value can be hidden\n     */\n    public function canValueBeHiddenWithoutCheckingSemanticStatus(Tracker_FormElement_Field_List_Bind_StaticValue $value)\n    {\n        return $this->getValueDao()->canValueBeHiddenWithoutCheckingSemanticStatus($this->field, $value->getId());\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $hp        = Codendi_HTMLPurifier::instance();\n        $value_dao = $this->getValueDao();\n        foreach ($params as $key => $value) {\n            switch ($key) {\n                case 'is_rank_alpha':\n                    $is_rank_alpha = $value ? 1 : 0;\n                    if ($this->is_rank_alpha != $is_rank_alpha) {\n                        $this->getDao()->save($this->field->id, $is_rank_alpha);\n                        if (! empty($this->field->getSharedTargets())) {\n                            $this->getDao()->updateChildrenAlphaRank($this->field->id, $is_rank_alpha);\n                        }\n                        $GLOBALS['Response']->addFeedback('info', dgettext('tuleap-tracker', 'Alpha Ranking updated'));\n                    }\n                    break;\n                case 'delete':\n                    if (($row = $value_dao->searchById((int) $value)->getRow()) && $value_dao->delete($this->field, (int) $value)) {\n                        $params['decorator'] = [(int) $value => null];\n                        $GLOBALS['Response']->addFeedback(\n                            Feedback::INFO,\n                            sprintf(\n                                dgettext('tuleap-tracker', 'Value %s deleted'),\n                                $hp->purify($row['label'], CODENDI_PURIFIER_CONVERT_HTML),\n                            )\n                        );\n                    }\n                    break;\n                case 'order':\n                    if (is_string($value) && $value != '') {\n                        $ids_in_right_order = explode(',', $value);\n                        $value_dao->reorder($ids_in_right_order);\n                    }\n                    break;\n                case 'edit':\n                    foreach ($value as $value_id => $info) {\n                        if (isset($this->values[$value_id])) {\n                            $bind_static_value = $this->values[$value_id];\n\n                            $new_label       = null;\n                            $new_description = null;\n                            $new_is_hidden   = null;\n                            if (isset($info['label']) && trim($info['label']) != $bind_static_value->getLabel()) {\n                                if (empty(trim($info['label']))) {\n                                    $GLOBALS['Response']->addFeedback(\n                                        Feedback::WARN,\n                                        dgettext('tuleap-tracker', 'Field value cannot be empty')\n                                    );\n                                } else {\n                                    $new_label = trim($info['label']);\n                                }\n                            }\n                            if (isset($info['description']) && trim($info['description']) != $bind_static_value->getDescription()) {\n                                $new_description = trim($info['description']);\n                            }\n\n                            if ($value_dao->canValueBeHidden($this->field, (int) $value_id)) {\n                                $new_is_hidden = ! isset($info['is_hidden']);\n                            }\n\n                            if ($new_label !== null || $new_description !== null || $new_is_hidden !== null) {\n                                $original_value = $this->value_dao->searchById($value_id)->getRow();\n                                //something has changed. we can save it\n                                $value_dao->save(\n                                    $value_id,\n                                    $this->field->getId(),\n                                    isset($new_label) ? $new_label : $bind_static_value->getLabel(),\n                                    isset($new_description) ? $new_description : $bind_static_value->getDescription(),\n                                    $original_value['rank'],\n                                    isset($new_is_hidden) ? $new_is_hidden : $bind_static_value->isHidden()\n                                );\n                                unset($new_label, $new_description);\n                            }\n                        }\n                    }\n                    break;\n                case \"edit_custom\":\n                    $values = $this->getOpenValueDao()->searchByFieldId($this->field->getId());\n                    foreach ($values as $row) {\n                        $new_is_hidden = ! isset($value[$row['id']]['is_hidden']);\n                        $this->getOpenValueDao()->updateOpenValue(\n                            (int) $row['id'],\n                            $new_is_hidden,\n                            $value[$row['id']]['label']\n                        );\n                    }\n                    break;\n                case 'add':\n                    $valueMapping = [];\n                    foreach (explode(\"\\n\", $value) as $new_value) {\n                        $id = $this->addValue($new_value);\n                        if ($id) {\n                            $this->values[$id] = $this->getValueFromRow($value_dao->searchById($id)->getRow());\n                            $valueMapping[]    = $id;\n                        }\n                    }\n                    if (isset($params['decorators'])) {\n                        $params['decorator'] = [];\n                        foreach ($params['decorators'] as $key => $deco) {\n                            $params['decorator'][$valueMapping[$key]] =\n                                   ColorHelper::RGBtoHexa($deco->r, $deco->g, $deco->b);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return parent::process($params, $no_redirect);\n    }\n\n    /**\n     * @param string $new_value\n     *\n     * @return int | null\n     */\n    public function addValue($new_value)\n    {\n        $value_dao = $this->getValueDao();\n        //remove the \\r submitted by the user\n        $new_value = trim(str_replace(\"\\r\", '', $new_value));\n        if (! $new_value) {\n            return;\n        }\n        $id = $value_dao->create($this->field->getId(), $new_value, '', 'end', 0);\n        if (! $id) {\n            return;\n        }\n        $this->propagateCreation($this->field, $id);\n\n        return $id;\n    }\n\n    public function propagateCreation($field, $original_value_id)\n    {\n        $value_dao = $this->getValueDao();\n        $value_dao->propagateCreation($field, $original_value_id);\n    }\n\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        $root->addAttribute('is_rank_alpha', $this->is_rank_alpha ? \"1\" : \"0\");\n        if (! $this->getAllValues()) {\n            return;\n        }\n\n        $exporter = new BindStaticXmlExporter(new XML_SimpleXMLCDATAFactory());\n        $exporter->exportToXml(\n            $root,\n            $this->getAllValues(),\n            $this->decorators,\n            $this->default_values,\n            $xmlMapping\n        );\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        if ($bindvalue_ids === null) {\n            return $this->values;\n        } else {\n            return $this->extractBindValuesByIds($bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return $this->extractBindValuesByIds($bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($this->values[$i])) {\n                $list_of_bindvalues[$i] = $this->values[$i];\n            }\n        }\n\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        $dao = new BindStaticDao();\n        if ($dao->save($this->field->getId(), $this->is_rank_alpha)) {\n            $value_dao = $this->getValueDao();\n            foreach ($this->getAllValues() as $v) {\n                if ($id = $value_dao->create($this->field->getId(), $v->getLabel(), $v->getDescription(), 'end', $v->isHidden())) {\n                    $v->setId($id);\n                }\n            }\n        }\n        parent::saveObject();\n    }\n\n    public function isValid($value)\n    {\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        $value_dao = $this->getValueDao();\n        $field_id  = $this->getField()->getId();\n\n        foreach ($value_mapping as $old_original_value_id => $new_original_value_id) {\n            $value_dao->updateOriginalValueId($field_id, $old_original_value_id, $new_original_value_id);\n        }\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        $bind_values = $this->getBindValues($changeset_value->getValue());\n\n        return $this->extractNumericValues($bind_values);\n    }\n\n    private function extractNumericValues(array $bind_values)\n    {\n        $numeric_values = [];\n\n        foreach ($bind_values as $bind_value) {\n            $value = $bind_value->getLabel();\n\n            if (is_numeric($value)) {\n                $numeric_values[] = $value;\n            }\n        }\n\n        return $numeric_values;\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        if (isset($rest_data['id']) && is_numeric($rest_data['id'])) {\n            $id = (int) $rest_data['id'];\n            try {\n                $this->getValue($id);\n            } catch (Tracker_FormElement_InvalidFieldValueException $e) {\n                if (! $this->getOpenValueDao()->searchById($field->getId(), $id)->getRow()) {\n                    throw new Tracker_FormElement_InvalidFieldValueException('Bind Value with ID ' . $id . ' does not exist for field ID ' . $field->getId());\n                }\n\n                return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $id;\n            }\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $id;\n        }\n        if (isset($rest_data['label'])) {\n            $identifier = (string) $rest_data['label'];\n        } else {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList static fields values should be passed as an object with at least one of the properties \"id\" or \"label\"');\n        }\n\n        $row = $this->getOpenValueDao()->searchByExactLabel($field->getId(), $identifier)->getRow();\n        if ($row) {\n            return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $row['id'];\n        }\n\n        return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $rest_values = [];\n        foreach ($this->getAllValues() as $value) {\n            $rest_values[] = $this->getRESTBindValue($value);\n        }\n\n        $new_values = $this->getOpenValueDao()->searchByFieldId($this->getField()->getId());\n        foreach ($new_values as $row_value) {\n            $bind_value    = new Tracker_FormElement_Field_List_Bind_StaticValue(\n                $row_value['id'],\n                $row_value['label'],\n                '',\n                '',\n                ''\n            );\n            $rest_values[] = $this->getRESTBindValue($bind_value);\n        }\n\n        return $rest_values;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $value_color = null;\n        if (isset($this->decorators[$value->getId()])) {\n            $value_color = $this->decorators[$value->getId()]->getCurrentColor();\n        }\n        $representation = new FieldListStaticValueRepresentation();\n        $representation->build($value, Codendi_HTMLPurifier::instance()->purify($value_color));\n\n        return $representation;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        return [\n            'label' => $value->getLabel(),\n            'id'    => $value->getId(),\n        ];\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindStatic($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        $dao = new BindStaticValueDao();\n        $row = $dao->searchById($bindvalue_id)->getRow();\n\n        return $this->getValueFromRow($row);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Project\\REST\\MinimalUserGroupRepresentation;\nuse Tuleap\\Project\\REST\\UserGroupRepresentation;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindUgroupsValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\OpenListValueDao;\nuse Tuleap\\Tracker\\REST\\FieldListBindUGroupValueRepresentation;\n\n/**\n * @template-extends Tracker_FormElement_Field_List_Bind<Tracker_FormElement_Field_List_Bind_UgroupsValue>\n */\nclass Tracker_FormElement_Field_List_Bind_Ugroups extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'ugroups';\n\n    /**\n     * @var UGroupManager\n     */\n    private $ugroup_manager;\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_UgroupsValue[]\n     */\n    private $values;\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_UgroupsValue[]\n     */\n    private $values_indexed_by_ugroup_id;\n\n    /**\n     * @var BindUgroupsValueDao\n     */\n    protected $value_dao;\n\n    public function __construct($field, $values, $default_values, $decorators, UGroupManager $ugroup_manager, BindUgroupsValueDao $value_dao)\n    {\n        parent::__construct($field, $default_values, $decorators);\n        $this->values         = $values;\n        $this->ugroup_manager = $ugroup_manager;\n        $this->value_dao      = $value_dao;\n\n        $this->values_indexed_by_ugroup_id = [];\n        foreach ($values as $value) {\n            $this->values_indexed_by_ugroup_id[$value->getUGroupId()] = $value;\n        }\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        return $value->getLabel();\n    }\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($this->format($this->getValue($value_id)), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @param Tracker_FormElement_Field_List_Bind_UsersValue $value the value of the field\n     *\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        return $value->fetchFormatted();\n    }\n\n    /**\n     *\n     * @param Tracker_FormElement_Field_List_Bind_UgroupsValue $value\n     *\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        return $value->getUGroupName();\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $values = [];\n        foreach ($this->getValueDao()->searchChangesetValues($changeset_id, $this->field->id) as $row) {\n            $values[] = $this->getValueFromRow($row);\n        }\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UgroupsValue|null\n     */\n    public function getValue($value_id)\n    {\n        $vs = $this->getAllValues();\n        $v  = null;\n        if (isset($vs[$value_id])) {\n            $v = $vs[$value_id];\n        }\n        return $v;\n    }\n\n    /**\n     * @param string $keyword\n     *\n     * @return array\n     */\n    public function getAllValues()\n    {\n        return $this->values;\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * Duplicate of BindFactory::getUgroupsValueInstance\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        $ugroup = $this->ugroup_manager->getUGroup($this->field->getTracker()->getProject(), $row['ugroup_id']);\n        if ($ugroup) {\n            $is_hidden = isset($row['is_hidden']) ? $row['is_hidden'] : false;\n\n            return new Tracker_FormElement_Field_List_Bind_UgroupsValue($row['id'], $ugroup, $is_hidden);\n        }\n        return new Tracker_FormElement_Field_List_Bind_UgroupsValue(-1, new ProjectUGroup(['ugroup_id' => 0, 'name' => \"\"]), true);\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"tracker_field_list_bind_ugroups_value.id,\n                             tracker_field_list_bind_ugroups_value.ugroup_id\",\n            'select_nb'  => 2,\n            'from'       => 'tracker_field_list_bind_ugroups_value',\n            'join_on_id' => 'tracker_field_list_bind_ugroups_value.id',\n        ];\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string  $submitted_value the field value (username(s))\n     * @param bool $is_multiple if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision (user_id)\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(',', $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getUGroupName(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getUGroupName() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        return \"$R2.id AS `\" . $this->field->name . \"`\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        $R4 = 'R4_' . $this->field->id;\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN tracker_field_list_bind_ugroups_value AS $R2 ON ($R2.id = $R3.bindvalue_id AND $R2.field_id = \" . $this->field->id . \" )\n                    INNER JOIN ugroup AS $R4 ON ($R4.ugroup_id = $R2.ugroup_id AND (\n                        ($R4.ugroup_id > 100 AND $R4.group_id = \" . $this->field->getTracker()->getProject()->getID() . \" )\n                        OR\n                        ($R4.ugroup_id <= 100 AND $R4.group_id = 100))\n                    )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        $uh = UserHelper::instance();\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.ugroup_id\";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $R3       = 'R3_' . $this->field->id;\n        $R4       = 'R4_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R4.name AS label, count(*) AS value\",\n                        'group_by' => \"$R4.name\",\n                    ];\n                } else {\n                    $select = \"$f($R4.name) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->format($this->getValue($value));\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    public function getDao()\n    {\n        //return new Tracker_FormElement_Field_List_Bind_UsersDao();\n    }\n\n    private function getOpenValueDao()\n    {\n        return new OpenListValueDao();\n    }\n\n    public function getValueDao()\n    {\n        return $this->value_dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return self::fetchSelectUgroups('formElement_data[bind][values][]', $field, []);\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        $html  = '';\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Bind to user groups') . '</h3>';\n        $html .= self::fetchSelectUgroups('bind[values][]', $this->field, $this->values);\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    protected static function fetchSelectUgroups($select_name, $field, $values)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $ugroup_manager = new UGroupManager();\n\n        $ugroups = $ugroup_manager->getUGroups(\n            $field->getTracker()->getProject(),\n            [ProjectUGroup::NONE, ProjectUGroup::ANONYMOUS, ProjectUGroup::REGISTERED, ProjectUGroup::DOCUMENT_ADMIN, ProjectUGroup::DOCUMENT_TECH]\n        );\n\n        $html  = '';\n        $html .= '<input type=\"hidden\" name=\"' . $select_name . '\" value=\"\" />';\n        $html .= '<select multiple=\"multiple\" name=\"' . $select_name . '\" size=\"' . min(9, max(5, count($ugroups))) . '\">';\n\n        $selected_ugroup_ids = array_map(\n            static function ($value) {\n                return self::getSelectedUgroupIds($value);\n            },\n            $values\n        );\n        foreach ($ugroups as $ugroup) {\n            $selected = \"\";\n            if (in_array($ugroup->getId(), $selected_ugroup_ids)) {\n                $selected = 'selected=\"selected\"';\n            }\n            $html .= '<option value=\"' . $ugroup->getId() . '\" ' . $selected . '>';\n            $html .= $hp->purify($ugroup->getTranslatedName());\n            $html .= '</option>';\n        }\n        $html .= '</select>';\n        return $html;\n    }\n\n    private static function getSelectedUgroupIds($value)\n    {\n        if (! $value->isHidden()) {\n            return $value->getUgroupId();\n        }\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $value_dao = $this->getValueDao();\n        foreach ($params as $key => $param_value) {\n            switch ($key) {\n                case 'values':\n                    $wanted_ugroup_ids = array_filter($param_value);\n                    $this->hideUnwantedValues($wanted_ugroup_ids);\n                    foreach ($wanted_ugroup_ids as $ugroup_id) {\n                        $value = $this->getValueByUGroupId($ugroup_id);\n                        if ($value) {\n                            if ($value->isHidden()) {\n                                $value_dao->show($value->getId());\n                            }\n                        } else {\n                            $value_dao->create($this->field->getId(), $ugroup_id, false);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        return parent::process($params, $no_redirect);\n    }\n\n    private function hideUnwantedValues(array $wanted_ugroup_ids)\n    {\n        foreach ($this->getAllValues() as $value) {\n            if (! in_array($value->getUGroupId(), $wanted_ugroup_ids)) {\n                $this->getValueDao()->hide($value->getId());\n            }\n        }\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UgroupsValue or null if no match\n     */\n    private function getValueByUGroupId($ugroup_id)\n    {\n        if (isset($this->values_indexed_by_ugroup_id[$ugroup_id])) {\n            return $this->values_indexed_by_ugroup_id[$ugroup_id];\n        }\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        foreach ($this->values as $value) {\n            if ($id = $this->getValueDao()->create($this->field->getId(), $value->getUgroupId(), $value->isHidden())) {\n                $value->setId($id);\n            }\n        }\n        parent::saveObject();\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        $items = $root->addChild('items');\n        foreach ($this->values as $value) {\n            $item = $items->addChild('item');\n            $id   = $value->getXMLId();\n            $item->addAttribute('ID', $id);\n            $xmlMapping['values'][$id] = $value->getId();\n            $item->addAttribute('label', $value->getUGroupName());\n            $item->addAttribute('is_hidden', (int) $value->isHidden());\n        }\n        if ($this->default_values) {\n            $default_child = $root->addChild('default_values');\n            foreach ($this->default_values as $id => $nop) {\n                if ($ref = array_search($id, $xmlMapping['values'])) {\n                    $default_child->addChild('value')->addAttribute('REF', $ref);\n                }\n            }\n        }\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        $values = $this->getAllValues();\n        if ($bindvalue_ids === null) {\n            return $values;\n        } else {\n            return $this->extractBindValuesByIds($values, $bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return $this->extractBindValuesByIds($this->getAllValues(), $bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $values, array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($values[$i])) {\n                $list_of_bindvalues[$i] = $values[$i];\n            }\n        }\n\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        $recipients = [];\n        foreach ($changeset_value->getListValues() as $ugroups_value) {\n            if ($ugroups_value instanceof Tracker_FormElement_Field_List_Bind_UgroupsValue) {\n                $recipients = array_merge($recipients, $ugroups_value->getMembersName());\n            }\n        }\n        return $recipients;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    public function isValid($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        $separated_values = explode(',', $value);\n        foreach ($separated_values as $separated_value) {\n            if (strpos($separated_value, '!') === false) {\n                continue;\n            }\n            $user_group_name = substr($separated_value, 1);\n\n            $project = $this->getField()->getTracker()->getProject();\n            $ugroup  = $this->ugroup_manager->getUGroupByName($project, $user_group_name);\n\n            if ($ugroup === null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        // Nothing to do: user value ids stay the same accross projects.\n    }\n\n    protected function getRESTBindingList()\n    {\n        // returns empty array as ugroups are already listed in 'values'\n        return [];\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        // returns an empty array as it doesn't make sense with Ugroups\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $project = $value->getProject();\n        if (! $project) {\n            throw new Project_NotFoundException();\n        }\n        $ugroup = $this->ugroup_manager->getUGroup($project, $value->getUgroupId());\n        if (! $ugroup) {\n            throw new \\Tuleap\\Project\\UGroups\\InvalidUGroupException($value->getUgroupId());\n        }\n        $ugroup_representation = new MinimalUserGroupRepresentation((int) $project->getID(), $ugroup);\n\n        $representation = new FieldListBindUGroupValueRepresentation();\n        $representation->build($value, $ugroup_representation);\n        return $representation;\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValues(array_keys($this->getDefaultValues()));\n\n        $project_id = $this->getField()->getTracker()->getProject()->getID();\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = new MinimalUserGroupRepresentation((int) $project_id, $value->getUgroup());\n            $rest_array[]   = $representation;\n        }\n        return $rest_array;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        $project = $field->getTracker()->getProject();\n\n        $identifier = null;\n\n        if (isset($rest_data['id'])) {\n            $value = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($rest_data['id']);\n            $id    = $value['user_group_id'];\n\n            $bind_value = $this->getValueByUGroupId($id);\n            if ($bind_value) {\n                return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $bind_value->getId();\n            }\n\n            $user_group = $this->ugroup_manager->getUGroup($project, $id);\n            if (! $user_group) {\n                throw new Tracker_FormElement_InvalidFieldValueException('User Group with ID ' . $id . ' does not exist for field ID ' . $field->getId());\n            }\n\n            if (! $bind_value) {\n                $identifier = $user_group->getName();\n            }\n        } elseif (isset($rest_data['short_name'])) {\n            $name       = (string) $rest_data['short_name'];\n            $user_group = $this->ugroup_manager->getUGroupByName($project, $name);\n\n            if (! $user_group) {\n                throw new Tracker_FormElement_InvalidFieldValueException('User Group with short_name ' . $name . ' does not exist for field ID ' . $field->getId());\n            }\n\n            $identifier = $name;\n        } else {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList static fields values should be passed as an object with at least one of the properties \"id\" or \"short_name\"');\n        }\n\n        if ($identifier !== null) {\n            $row = $this->getOpenValueDao()->searchByExactLabel($field->getId(), $identifier)->getRow();\n            if ($row) {\n                return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $row['id'];\n            }\n        }\n\n        return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $ugroup_manager = new UGroupManager();\n        $project        = $this->getField()->getTracker()->getProject();\n        $user_group     = $ugroup_manager->getUGroupByName($project, $value->getLabel());\n\n        return new MinimalUserGroupRepresentation($project->getID(), $user_group);\n    }\n\n    public function getFieldDataFromRESTValue($rest_data): int\n    {\n        $value      = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($rest_data);\n        $ugroup_id  = $value['user_group_id'];\n        $bind_value = $this->getValueByUGroupId($ugroup_id);\n\n        if ($bind_value) {\n            return (int) $bind_value->getId();\n        }\n\n        return 0;\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindUgroups($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        $row = $this->value_dao->searchById($bindvalue_id)->getRow();\n\n        return $this->getValueFromRow($row);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindListUserValueGetter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindUsersDao;\nuse Tuleap\\Tracker\\Import\\Spotter;\nuse Tuleap\\Tracker\\REST\\FieldListBindUserValueRepresentation;\nuse Tuleap\\Tracker\\REST\\FormElement\\UserListValueRepresentation;\nuse Tuleap\\User\\REST\\UserRepresentation;\n\nclass Tracker_FormElement_Field_List_Bind_Users extends Tracker_FormElement_Field_List_Bind //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n{\n    public const TYPE = 'users';\n\n    public const REGISTERED_USERS_UGROUP_NAME = 'ugroup_2';\n\n    public const REST_BINDING_LIST_ID    = 'ugroup_id';\n    public const REST_BINDING_LIST_LABEL = 'name';\n\n    /** @var UserManager */\n    protected $userManager;\n    protected $value_function = [];\n    protected $values;\n\n\n    public function __construct($field, $value_function, $default_values, $decorators)\n    {\n        parent::__construct($field, $default_values, $decorators);\n\n        if (! empty($value_function)) {\n            $this->value_function = explode(',', $value_function);\n        }\n        $this->userManager = UserManager::instance();\n    }\n\n    /**\n     * @return bool\n     */\n    public function isExistingValue($value_id)\n    {\n        $import_spotter = Spotter::instance();\n        if ($import_spotter->isImportRunning()) {\n            $user = $this->getUserManager()->getUserById($value_id);\n            return $user !== null;\n        }\n        return parent::isExistingValue($value_id);\n    }\n\n    /**\n     * @return array of value_functions\n     */\n    public function getValueFunction()\n    {\n        return $this->value_function;\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        return $value->getLabel();\n    }\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($this->format($this->getValue($value_id)), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @param Tracker_FormElement_Field_List_Bind_UsersValue $value the value of the field\n     *\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        if ($value->getId() == 100) {\n            return '';\n        } else {\n            return $value->fetchFormatted();\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCardValue($value, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        if ($value->getId() == 100) {\n            return '';  // NULL value for CSV\n        } else {\n            return $value->getUsername();\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueWithoutLink($value)\n    {\n        return Codendi_HTMLPurifier::instance()->purify($value->getLabel());\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $uh     = UserHelper::instance();\n        $values = [];\n        foreach ($this->getDao()->searchChangesetValues($changeset_id, $this->field->id, $uh->getDisplayNameSQLQuery(), $uh->getDisplayNameSQLOrder()) as $row) {\n            $values[] =  new Tracker_FormElement_Field_List_Bind_UsersValue($row['id'], $row['user_name'], $row['full_name']);\n        }\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue | null\n     */\n    public function getValue($value_id)\n    {\n        if ($value_id == 100) {\n            $v = new Tracker_FormElement_Field_List_Bind_UsersValue(0);\n        } else {\n            $vs = $this->getAllValues();\n            $v  = null;\n            if (isset($vs[$value_id])) {\n                $v = $vs[$value_id];\n            } else {\n                // User not found in the binded ugroup. Look for users that are either:\n                //  1. not anymore active\n                //  2. not member of the binded ugroup\n                $v = $this->getAdditionnalValue($value_id);\n            }\n        }\n        return $v;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return array | null The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        $ugroups = [];\n\n        foreach ($this->value_function as $ugroup) {\n            if ($ugroup != self::REGISTERED_USERS_UGROUP_NAME && $ugroup != '') {\n                $ugroups[] = $ugroup;\n            }\n        }\n\n        $rest_values = [];\n        if (! empty($ugroups)) {\n            foreach ($this->getAllValuesByUGroupList($ugroups) as $value) {\n                $rest_values[] = $this->getRESTBindValue($value);\n            }\n        }\n        return $rest_values;\n    }\n\n    /**\n     * Get the list of of ugroups used in this field     *\n     *\n     * @return array the list of all ugroups with id and name\n     */\n    protected function getRESTBindingList()\n    {\n        $ugroups = [];\n        foreach ($this->value_function as $ugroup) {\n            if ($ugroup) {\n                switch ($ugroup) {\n                    case 'group_members':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => $GLOBALS['UGROUP_PROJECT_MEMBERS'],\n                            self::REST_BINDING_LIST_LABEL => \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) ugroup_get_name_from_id($GLOBALS['UGROUP_PROJECT_MEMBERS'])),\n                        ];\n                        break;\n                    case 'group_admins':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => $GLOBALS['UGROUP_PROJECT_ADMIN'],\n                            self::REST_BINDING_LIST_LABEL => \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) ugroup_get_name_from_id($GLOBALS['UGROUP_PROJECT_ADMIN'])),\n                        ];\n                        break;\n                    case 'artifact_submitters':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => 0,\n                            self::REST_BINDING_LIST_LABEL => $ugroup,\n                        ];\n                        break;\n                    default:\n                        if (preg_match('/ugroup_([0-9]+)/', $ugroup, $matches)) {\n                            $ugroup_data = db_fetch_array(ugroup_db_get_ugroup($matches[1]));\n                            if ($ugroup_data) {\n                                $user_group = new ProjectUGroup($ugroup_data);\n\n                                $ugroups[] = [\n                                    self::REST_BINDING_LIST_ID    => $matches[1],\n                                    self::REST_BINDING_LIST_LABEL => $user_group->getNormalizedName(),\n                                ];\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n        return $ugroups;\n    }\n\n    /**\n     * Get all values to be displayed in the field depending of a ugroup list\n     *\n     * @param array  $ugroups, a list of ugroups\n     * @param string $keyword\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    protected function getAllValuesByUGroupList($ugroups, $keyword = null)\n    {\n        if ($this->values === null) {\n            $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n            $this->values = $value_getter->getUsersValueByKeywordAndIds(\n                $ugroups,\n                $keyword,\n                [],\n                $this->field\n            );\n        }\n\n        return $this->values;\n    }\n\n    /**\n     * If all values for this field are already fetched, then returns the collection. Else perform a lookup to retrieve\n     * only the needed ids. This avoids to load ten thousands of users for nothing.\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    private function getValuesCollectionContainingIds(array $bindvalue_ids)\n    {\n        if ($this->values) {\n            return $this->values;\n        }\n\n        if (empty($bindvalue_ids)) {\n            return [];\n        }\n\n        $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n        return $value_getter->getUsersValueByKeywordAndIds(\n            $this->value_function,\n            null,\n            $bindvalue_ids,\n            $this->field\n        );\n    }\n\n    /**\n     * Get all values to be displayed in the field\n     *\n     * @param string $keyword\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    public function getAllValues($keyword = null)\n    {\n        return $this->getAllValuesByUGroupList($this->value_function, $keyword = null);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        if ($this->values === null) {\n            $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n            $this->values = $value_getter->getActiveUsersValue(\n                $this->value_function,\n                $this->field\n            );\n        }\n\n        return $this->values;\n    }\n\n    /**\n     * @var array of additionnal values (typically users that are not active or removed from the value_function)\n     */\n    protected $additionnal_values = [];\n\n    /**\n     * Return the addtionnal value\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue|null\n     */\n    protected function getAdditionnalValue($value_id)\n    {\n        if (! isset($this->additionnal_values[$value_id])) {\n            $this->additionnal_values[$value_id] = null;\n            if ($user = $this->userManager->getUserById($value_id)) {\n                $this->additionnal_values[$value_id] = new Tracker_FormElement_Field_List_Bind_UsersValue($user->getId());\n            }\n        }\n        return $this->additionnal_values[$value_id];\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        return new Tracker_FormElement_Field_List_Bind_UsersValue($row['id'], $row['user_name'], $row['full_name']);\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"user.user_name,\n                             user.realname,\n                             CONCAT(user.realname,' (',user.user_name,')') AS full_name\", //TODO: use UserHelper to respect user preferences\n            'select_nb'  => 3,\n            'from'       => 'user',\n            'join_on_id' => 'user.user_id',\n        ];\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string  $submitted_value\n     * @param bool $is_multiple if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision (user_id)\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(',', $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getUsername(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getUsername() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        return \"$R2.user_id AS `\" . $this->field->name . \"`\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN user AS $R2 ON ($R2.user_id = $R3.bindvalue_id )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        $uh = UserHelper::instance();\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return $R2 . \".\" . str_replace('user.', '', $uh->getDisplayNameSQLOrder());\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.user_id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.user_name AS label, count(*) AS value\",\n                        'group_by' => \"$R2.user_name\",\n                    ];\n                } else {\n                    $select = \"$f($R2.user_name) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->format($this->getValue($value));\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    public function getDao()\n    {\n        return new BindUsersDao();\n    }\n\n    /**\n     * for testing purpose\n     */\n    protected function getUserManager(): UserManager\n    {\n        return $this->userManager;\n    }\n\n    public function getValueDao()\n    {\n        return new UserDao();\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return self::fetchSelectUsers('formElement_data[bind][value_function][]', $field, []);\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        $html  = '';\n        $html .= '<h3>' . 'Bind to users' . '</h3>';\n        $html .= self::fetchSelectUsers('bind[value_function][]', $this->field, $this->value_function);\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    protected static function fetchSelectUsers($select_name, $field, $value_function)\n    {\n        $hp       = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $html    .= '<input type=\"hidden\" name=\"' . $select_name . '\" value=\"\" />';\n        $html    .= '<select multiple=\"multiple\" name=\"' . $select_name . '\">\n                  <option value=\"\">' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n        $selected = \"\";\n        if (in_array(\"artifact_submitters\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"artifact_submitters\" ' . $selected . '>' . dgettext('tuleap-tracker', 'Artifact submitters') . '</option>';\n\n        $selected   = \"\";\n        $ugroup_res = ugroup_db_get_ugroup($GLOBALS['UGROUP_PROJECT_MEMBERS']);\n        $name       = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, 0, 'name'));\n        if (in_array(\"group_members\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"group_members\" ' . $selected . '>' . $hp->purify($name, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n\n        $selected   = \"\";\n        $ugroup_res = ugroup_db_get_ugroup($GLOBALS['UGROUP_PROJECT_ADMIN']);\n        $name       = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, 0, 'name'));\n        if (in_array(\"group_admins\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"group_admins\" ' . $selected . '>' . $hp->purify($name, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n\n        /** @psalm-suppress DeprecatedFunction */\n        $ugroup_res = ugroup_db_get_existing_ugroups(100);\n        $rows       = db_numrows($ugroup_res);\n        for ($i = 0; $i < $rows; $i++) {\n            $ug       = db_result($ugroup_res, $i, 'ugroup_id');\n            $selected = \"\";\n            if (\n                ($ug == $GLOBALS['UGROUP_NONE']) ||\n                ($ug == $GLOBALS['UGROUP_ANONYMOUS']) ||\n                ($ug == $GLOBALS['UGROUP_PROJECT_MEMBERS']) ||\n                ($ug == $GLOBALS['UGROUP_PROJECT_ADMIN']) ||\n                ($ug == $GLOBALS['UGROUP_TRACKER_ADMIN'])\n            ) {\n                   continue;\n            }\n\n            $ugr = \"ugroup_\" . $ug;\n            if (in_array($ugr, $value_function)) {\n                $selected = 'selected=\"selected\"';\n            }\n            $html .= '<option value=\"' . $ugr . '\" ' . $selected . '>' . $hp->purify(\\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, $i, 'name')), CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n        }\n\n        $group_id = $field->getTracker()->getGroupId();\n        if ($group_id != 100) {\n            /** @psalm-suppress DeprecatedFunction */\n            $ugroup_res = ugroup_db_get_existing_ugroups($group_id);\n            $rows       = db_numrows($ugroup_res);\n            for ($i = 0; $i < $rows; $i++) {\n                $selected = \"\";\n                $ug       = db_result($ugroup_res, $i, 'ugroup_id');\n                $ugr      = \"ugroup_\" . $ug;\n                if (in_array($ugr, $value_function)) {\n                    $selected = 'selected=\"selected\"';\n                }\n                $html .= '<option value=\"' . $ugr . '\" ' . $selected . '>' . $hp->purify(\\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, $i, 'name')), CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n            }\n        }\n        $html .= '</select>';\n        return $html;\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        foreach ($params as $key => $value) {\n            switch ($key) {\n                case 'value_function':\n                    if (is_array($value) && $this->value_function != $value) {\n                        if ($this->getDao()->save($this->field->getId(), $value)) {\n                            $this->value_function = $value;\n                            if (! $no_redirect) {\n                                $GLOBALS['Response']->addFeedback('info', 'Values updated');\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        return parent::process($params, $no_redirect);\n    }\n\n    protected function filterDefaultValues(array $bind_default): array\n    {\n        if (empty($bind_default)) {\n            return $bind_default;\n        }\n\n        if (! $this->field instanceof Tracker_FormElement_Field_OpenList) {\n            return parent::filterDefaultValues($bind_default);\n        }\n\n        $bind_default = explode(',', $bind_default[0]);\n        foreach ($bind_default as $key => $value) {\n            $bind_default[$key] = str_replace(Tracker_FormElement_Field_OpenList::BIND_PREFIX, '', $value);\n        }\n\n        return parent::filterDefaultValues($bind_default);\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        if ($this->value_function) {\n            $child = $root->addChild('items');\n            foreach ($this->value_function as $vf) {\n                if ($vf) {\n                    $child->addChild('item')->addAttribute('label', $vf);\n                }\n            }\n\n            if ($project_export_context) {\n                $default_values_root = $root->addChild('default_values');\n                foreach ($this->default_values as $user_id => $default_value) {\n                    $user_xml_exporter->exportUserByUserId($user_id, $default_values_root, 'value');\n                }\n            }\n        }\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (static::class == 'Tracker_FormElement_Field_Text') {\n                if (! (isset($this->default_properties['rows']) && isset($this->default_properties['cols']))) {\n                    var_dump($this, 'Properties must be \"rows\" and \"cols\"');\n                    return false;\n                }\n            } elseif (static::class == 'Tracker_FormElement_Field_String') {\n                if (! (isset($this->default_properties['maxchars']) && isset($this->default_properties['size']))) {\n                    var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        $values = $this->getAllValuesWithActiveUsersOnly();\n        if ($bindvalue_ids === null) {\n            return $values;\n        } else {\n            return $this->extractBindValuesByIds($values, $bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        $values = $this->getValuesCollectionContainingIds($bindvalue_ids);\n\n        return $this->extractBindValuesByIds($values, $bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $values, array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($values[$i])) {\n                $list_of_bindvalues[$i] = $values[$i];\n            } else {\n                // User not found in the binded ugroup. Look for users that are either:\n                //  1. not anymore active\n                //  2. not member of the binded ugroup\n                $value = $this->getAdditionnalValue($i);\n                if ($value) {\n                    $list_of_bindvalues[$i] = $value;\n                }\n            }\n        }\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        $dao = new BindUsersDao();\n        $dao->save($this->field->getId(), $this->getValueFunction());\n        parent::saveObject();\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        $recipients = [];\n        foreach ($changeset_value->getListValues() as $user_value) {\n            if ($user_value->getId() != 100) {\n                $recipients[] = $user_value->getUsername();\n            }\n        }\n        return $recipients;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    public function isValid($value)\n    {\n        if ($value) {\n            $values = explode(',', $value);\n            foreach ($values as $v) {\n                if (stripos($v, '!') !== false) {\n                    //we check the string is an email\n                    $rule = new Rule_Email();\n                    if (! $rule->isValid($v)) {\n                        //we check the string correspond to a username\n                        if (! $this->userManager->getUserByIdentifier(substr($v, 1))) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        // Nothing to do: user value ids stay the same accross projects.\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        // returns an empty array as it doesn't make sense with Users\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $user_representation = new UserListValueRepresentation();\n        assert($value instanceof Tracker_FormElement_Field_List_Bind_UsersValue);\n        $user_representation->build($value);\n\n        $representation = new FieldListBindUserValueRepresentation();\n        $representation->build($value, $user_representation);\n\n        return $representation;\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValuesForIds(array_keys($this->getDefaultValues()));\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = \\Tuleap\\User\\REST\\UserRepresentation::build($value->getUser());\n            $rest_array[]   = $representation;\n        }\n        return $rest_array;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        if (isset($rest_data['id']) && is_numeric($rest_data['id'])) {\n            $id   = (int) $rest_data['id'];\n            $user = $this->getValue($id);\n\n            if (! $user) {\n                throw new Tracker_FormElement_InvalidFieldValueException('Cannot Bind to user with ID ' . $id . ' for field ID ' . $field->getId());\n            }\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $id;\n        }\n\n        if (isset($rest_data['username'])) {\n            $identifier = (string) $rest_data['username'];\n            $user       = $this->userManager->getUserByIdentifier($identifier);\n\n            if (! $user) {\n                throw new Tracker_FormElement_InvalidFieldValueException('Cannot Bind to user \"' . $identifier . '\" for field ID ' . $field->getId());\n            }\n\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $user->getId();\n        }\n\n        if (! isset($rest_data['email'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList user fields values should be passed as an object with at least one of the properties \"id\", \"username\" or \"email\"');\n        }\n\n        $identifier = (string) $rest_data['email'];\n        $user       = $this->userManager->getUserByIdentifier(\"email:$identifier\");\n\n        if (! $user) {\n            return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n        }\n        return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $user->getId();\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $user_manager = UserManager::instance();\n        $user         = $user_manager->getUserByUserName($value->getLabel());\n        if (! $user) {\n            $user = new PFUser();\n            $user->setEmail($value->getLabel());\n        }\n\n        return UserRepresentation::build($user);\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindUsers($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        return new Tracker_FormElement_Field_List_Bind_UsersValue($bindvalue_id);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\ArtifactTimeframeHelper;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field_Numeric extends Tracker_FormElement_Field_Alphanum implements Tracker_FormElement_IComputeValues\n{\n    public $default_properties = [\n        'maxchars'      => [\n            'value' => 0,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'size'          => [\n            'value' => 5,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n    ];\n\n    public function getComputedValue(\n        PFUser $user,\n        Artifact $artifact,\n        $timestamp = null,\n    ) {\n        if ($this->userCanRead($user)) {\n            if ($timestamp !== null) {\n                return $this->getComputedValueAt($artifact, $timestamp);\n            } else {\n                return $this->getCurrentComputedValue($artifact);\n            }\n        }\n    }\n\n    /**\n     * @param PFUser             $user\n     * @param int              $timestamp\n     *\n     * @return mixed\n     */\n    private function getComputedValueAt(Artifact $artifact, $timestamp)\n    {\n        $row = $this->getValueDao()->getValueAt($artifact->getId(), $this->getId(), $timestamp);\n        return $row['value'];\n    }\n\n    /**\n     * @param PFUser             $user\n     *\n     * @return mixed\n     */\n    private function getCurrentComputedValue(Artifact $artifact)\n    {\n        $row = $this->getValueDao()->getLastValue($artifact->getId(), $this->getId());\n        if ($row) {\n            return $row['value'];\n        }\n        return 0;\n    }\n\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS `\" . $this->name . \"`\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->id;\n        $R2       = 'R2_' . $this->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.value AS label, count(*) AS value\",\n                        'group_by' => \"$R2.value\",\n                    ];\n                } else {\n                    $same[] = \"$f($R2.value) AS `\" . $this->name . \"_$f`\";\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return ['AVG', 'COUNT', 'COUNT_GRBY', 'MAX', 'MIN', 'STD', 'SUM'];\n    }\n\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr = parent::buildMatchExpression($field_name, $criteria_value);\n        if (! $expr) {\n            $matches = [];\n            if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)$/\", $criteria_value, $matches)) {\n                // It's < or >,  = and a number then use as is\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' ' . $matches[1] . ' ' . $matches[2];\n            } elseif (preg_match(\"/^($this->pattern)$/\", $criteria_value, $matches)) {\n                // It's a number so use  equality\n                $matches[1] = $this->cast($matches[1]);\n                $expr       = $field_name . ' = ' . $matches[1];\n            } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)$/\", $criteria_value, $matches)) {\n                // it's a range number1-number2\n                $matches[1] = (string) ($this->cast($matches[1]));\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            } else {\n                // Invalid syntax - no condition\n                $expr = '1';\n            }\n        }\n        return $expr;\n    }\n\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         data-test=\"' . $hp->purify($this->getName()) . '\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html  = '';\n        $value = dgettext('tuleap-tracker', 'Unchanged');\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $html = '';\n        if (isset($submitted_values[$this->getId()])) {\n            $value = $submitted_values[$this->getId()];\n        } else {\n            if ($value != null) {\n                $value = $value->getValue();\n            }\n        }\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getNumeric()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getNumeric();\n                $output = $value;\n                break;\n        }\n        return $output;\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if ($value === null) {\n            return $this->getNoValueLabel();\n        }\n\n        $numeric_value = $value->getValue();\n        if ($numeric_value === null) {\n            return $this->getNoValueLabel();\n        }\n\n        $hp = Codendi_HTMLPurifier::instance();\n\n        $html_value = $hp->purify($numeric_value, CODENDI_PURIFIER_CONVERT_HTML);\n\n        $user              = $this->getCurrentUser();\n        $time_frame_helper = $this->getArtifactTimeframeHelper();\n\n        if ($time_frame_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $html_value = $html_value . '<span class=\"artifact-timeframe-helper\"> (' . $time_frame_helper->getEndDateArtifactHelperForReadOnlyView($user, $artifact) . ')</span>';\n        }\n\n        return $html_value;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return $old_value->getNumeric() !== $new_value;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" autocomplete=\"off\" />';\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->validateValue($value);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param mixed            $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function validateValue($value)\n    {\n        if ($value !== null && ! is_string($value) && ! is_int($value) && ! is_float($value)) {\n            $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            return false;\n        }\n        if ($value && ! preg_match('/^' . $this->pattern . '$/', $value)) {\n            $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @return string the i18n error message to display if the value submitted by the user is not valid\n     */\n    abstract protected function getValidatorErrorMessage();\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (! ($this->default_properties['maxchars'] && $this->default_properties['size'])) {\n                var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCachedValue(PFUser $user, Artifact $artifact, $timestamp = null)\n    {\n        return $this->getComputedValue($user, $artifact, $timestamp);\n    }\n\n    protected function getArtifactTimeframeHelper(): ArtifactTimeframeHelper\n    {\n        return new ArtifactTimeframeHelper(\n            SemanticTimeframeBuilder::build(),\n            \\BackendLogger::getDefaultLogger()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Tuleap, 2013. All Rights Reserved.\n *\n * Originally written by Yoann Celton, 2013. Jtekt Europe.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\n\nclass Tracker_FormElement_Field_PerTrackerArtifactId extends Tracker_FormElement_Field_ArtifactId\n{\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression(\"artifact.per_tracker_artifact_id\", $criteria_value);\n        }\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        return \"a.per_tracker_artifact_id AS `\" . $this->name . \"`\";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        return \"a.per_tracker_artifact_id\";\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $from_aid_content = \"\";\n        if ($from_aid != null) {\n            $from_aid_content = \"&from_aid=$from_aid\";\n        }\n\n        return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact_id]) . '\" $from_aid_content>' . $value . '</a>';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $changeset->getArtifact()->getPerTrackerArtifactId()\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<a href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">' . (int) $artifact->getPerTrackerArtifactId() . '</a>';\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<a href=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">' . $artifact->getPerTrackerArtifactId() . '</a>';\n                break;\n            default:\n                $output .= $artifact->getPerTrackerArtifactId();\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<a href=\"#' . TRACKER_BASE_URL . '/?aid=123\" onclick=\"return false;\">3</a>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Per tracker id');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the in-tracker numerotation');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-perTrackerId.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-perTrackerId--plus.png');\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html  = '';\n        $html .= $artifact->getPerTrackerArtifactId();\n        return $html;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPerTrackerArtifactId($this);\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\REST\\UserGroupRepresentation;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\ChangesChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\PermissionsOnArtifactFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUGroupRetriever;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUsageFormatter;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactValidator;\nuse Tuleap\\Tracker\\REST\\v1\\TrackerFieldsRepresentations\\PermissionsOnArtifacts;\nuse Tuleap\\User\\UserGroup\\NameTranslator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_PermissionsOnArtifact extends Tracker_FormElement_Field\n{\n    public const GRANTED_GROUPS     = 'granted_groups';\n    public const USE_IT             = 'use_artifact_permissions';\n    public const IS_USED_BY_DEFAULT = false;\n    public const PERMISSION_TYPE    = 'PLUGIN_TRACKER_ARTIFACT_ACCESS';\n\n    public $default_properties = [];\n\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n    }\n\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     *\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    /**\n     * @return string\n     */\n    private function fetchChangesetRegardingPermissions($artifact_id, $changeset_id)\n    {\n        $values   = [];\n        $artifact = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n        if ($artifact->useArtifactPermissions()) {\n            $dao = new Tracker_Artifact_Changeset_ValueDao();\n            $row = $dao->searchByFieldId($changeset_id, $this->id);\n            if ($row === null) {\n                return '';\n            }\n            $changeset_value_id = $row['id'];\n\n            foreach ($this->getValueDao()->searchById($changeset_value_id) ?: [] as $value) {\n                $values[] = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) $value['ugroup_name']);\n            }\n\n            return implode(',', $values);\n        }\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->values[$value]->getLabel();\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n   /**\n    * Returns the PermissionsOnArtifactDao\n    *\n    * @return PermissionsOnArtifactFieldValueDao The dao\n    */\n    protected function getValueDao()\n    {\n        return new PermissionsOnArtifactFieldValueDao();\n    }\n\n    private function getPermissionsOnArtifactUsageRetriever()\n    {\n        return new PermissionsOnArtifactUsageFormatter($this->getPermissionsValidator());\n    }\n\n    /**\n     * @param array $submitted_values\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n        $value = $this->getPermissionsOnArtifactUGroupRetriever()->initializeUGroupsIfNoUGroupsAreChoosen($value);\n\n        $is_disabled = false;\n        $is_checked  = ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true);\n\n        return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $is_checked  = false;\n        $is_disabled = false;\n\n        return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_read_only = false;\n        return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output    = '';\n        $separator = '&nbsp;';\n        if ($format == 'text') {\n            $separator = PHP_EOL;\n            $output   .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:');\n        }\n\n        $ugroups = permission_fetch_selected_ugroups(self::PERMISSION_TYPE, $artifact->getId(), $this->getTracker()->getGroupId());\n        $output .= $separator . implode(', ', $ugroups);\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $is_read_only = true;\n        return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, []);\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition(\n            $artifact,\n            $value,\n            $submitted_values\n        );\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $this->getId() . '\">' .\n                $this->fetchArtifactValueCommon($is_field_frozen, $artifact, $value, $submitted_values) .\n            '</div>';\n    }\n\n    private function getArtifactValueHTML($artifact_id, $can_user_restrict_permissions_to_nobody, $is_read_only)\n    {\n        $changeset_values   = $this->getLastChangesetValues($artifact_id);\n        $is_expecting_input = $this->isRequired() && empty($changeset_values);\n\n        $html  = $this->fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $is_read_only, $is_expecting_input);\n        $html .= $this->fetchUserGroupList($is_read_only, $changeset_values);\n\n        return $html;\n    }\n\n    private function fetchUserGroupList($is_read_only, array $changeset_values)\n    {\n        $field_id     = $this->getId();\n        $element_name = 'artifact[' . $field_id . '][u_groups][]';\n\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '<select '\n            . 'name=\"' . $hp->purify($element_name) . '\" '\n            . 'id=\"' . $hp->purify(str_replace('[]', '', $element_name)) . '\" '\n            . 'multiple '\n            . 'size=\"8\" '\n            . (($this->isRequired()) ? 'required=\"required\"' : '' )\n            . (($is_read_only) ? 'disabled=\"disabled\"' : '' )\n            . '>';\n        $html .= $this->getOptions($this->getAllUserGroups(), $changeset_values);\n        $html .= '</select>';\n\n        return $html;\n    }\n\n    private function getLastChangesetValues($artifact_id)\n    {\n        $user_group_ids = [];\n\n        $db_res = permission_db_authorized_ugroups(self::PERMISSION_TYPE, $artifact_id);\n        while ($row = db_fetch_array($db_res)) {\n            $user_group_ids[] = $row['ugroup_id'];\n        }\n\n        return $user_group_ids;\n    }\n\n    /**\n     * @see fetchArtifactValueReadOnly\n     * @see fetchArtifactValue\n     *\n     * @param bool                            $is_read_only\n     * @param array                           $submitted_values\n     *\n     * @return string html\n     */\n    protected function fetchArtifactValueCommon(\n        $is_read_only,\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()]) && is_array($submitted_values[$this->getId()])) {\n            $is_checked = $this->getPermissionsValidator()->isArtifactPermissionChecked($submitted_values[$this->getId()]);\n        } else {\n            $is_checked = $artifact->useArtifactPermissions();\n        }\n\n        return $this->getArtifactValueHTML($artifact->getId(), $is_checked, $is_read_only);\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchAdminFormElement()\n    {\n        $changeset_values = $this->getLastChangesetValues(0);\n\n        $html  = $this->fetchRestrictCheckbox(false, true, false);\n        $html .= $this->fetchUserGroupList(true, $changeset_values);\n\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Permissions on artifact');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Allow user to give permissions to an artefact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_PermissionsOnArtifact $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value && $artifact->useArtifactPermissions()) {\n            $ugroup_dao = $this->getUGroupDao();\n\n            $perms      = $value->getPerms();\n            $perms_name = [];\n            foreach ($perms as $perm) {\n                $row          = $ugroup_dao->searchByUGroupId($perm)->getRow();\n                $perms_name[] = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) $row['name']);\n            }\n            $html .= implode(\",\", $perms_name);\n        }\n        return $html;\n    }\n\n   /**\n    * Returns the UGroupDao\n    *\n    * @return UGroupDao The dao\n    */\n    protected function getUGroupDao()\n    {\n        return new UGroupDao(CodendiDataAccess::instance());\n    }\n\n   /**\n    * Get the \"from\" statement to allow search with this field\n    * You can join on 'c' which is a pseudo table used to retrieve\n    * the last changeset of all artifacts.\n    *\n    * @param Tracker_Report_Criteria $criteria\n    *\n    * @return string\n    */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            $criteria_value = $this->getCriteriaValue($criteria);\n            if ($criteria_value && count($criteria_value) === 1 && array_key_exists(\"100\", $criteria_value)) {\n                $a    = 'A_' . $this->id;\n                $b    = 'B_' . $this->id;\n                 $sql = \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = \" . $this->id . \")\n                          INNER JOIN tracker_artifact AS $b ON ($b.last_changeset_id = $a.changeset_id AND\n                            $b.use_artifact_permissions = 0) \";\n                return $sql;\n            } elseif ($criteria_value) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $ugroup_ids = CodendiDataAccess::instance()->escapeIntImplode(array_keys($criteria_value));\n\n                $sql = \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = \" . $this->id . \")\n                         INNER JOIN tracker_changeset_value_permissionsonartifact AS $b ON ($b.changeset_value_id = $a.id\n                            AND $b.ugroup_id IN ($ugroup_ids)\n                      )\";\n                return $sql;\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n     /**\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        return '';\n    }\n\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (isset($this->criteria_value[$criteria->report->id]) && $this->criteria_value[$criteria->report->id]) {\n            $values                                      = $this->criteria_value[$criteria->report->id];\n            $this->criteria_value[$criteria->report->id] = [];\n\n            foreach ($values as $value) {\n                foreach ($value as $v) {\n                    if ($v != '') {\n                        $this->criteria_value[$criteria->report->id][$v] = $value;\n                    } else {\n                        return '';\n                    }\n                }\n            }\n        } elseif (! isset($this->criteria_value[$criteria->report->id])) {\n            $this->criteria_value[$criteria->report->id] = [];\n            $dao                                         = $this->getCriteriaDao();\n            if ($dao !== null) {\n                foreach ($dao->searchByCriteriaId($criteria->id) as $row) {\n                    $this->criteria_value[$criteria->report->id][$row['value']] = $row;\n                }\n            }\n        }\n\n        return $this->criteria_value[$criteria->report->id];\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        return;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        $multiple       = ' ';\n        $size           = ' ';\n        $name           = \"criteria[$this->id][values][]\";\n\n        $user_groups = $this->getAllUserGroups();\n\n        if (! $user_groups) {\n            $html .= \"<p><b>\" . $GLOBALS['Language']->getText('global', 'error') . \"</b>: \" . $GLOBALS['Language']->getText('project_admin_permissions', 'perm_type_not_def', '');\n            return $html;\n        }\n\n        if ($criteria->is_advanced) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min(7, count($user_groups) + 2) . '\" ';\n        }\n\n        $html .= '<select id=\"tracker_report_criteria_' . ($criteria->is_advanced ? 'adv_' : '') . $this->id . '\"\n                          name=\"' . $name . '\" ' .\n                          $size .\n                          $multiple . '>';\n        //Any value\n        $selected = ($criteria_value !== '' && count($criteria_value)) ? '' : 'selected=\"selected\"';\n        $html    .= '<option value=\"\" ' . $selected . '>' . $GLOBALS['Language']->getText('global', 'any') . '</option>';\n        //None value\n        $selected = isset($criteria_value[100]) ? 'selected=\"selected\"' : '';\n        $html    .= '<option value=\"100\" ' . $selected . '>' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n\n        if (! is_array($criteria_value)) {\n            $criteria_value = [];\n        }\n\n        $html .= $this->getOptions($user_groups, array_keys($criteria_value));\n        $html .= '</select>';\n        return $html;\n    }\n\n    private function getOptions($user_groups, $selected_ids = [])\n    {\n        $options = '';\n        foreach ($user_groups as $user_group) {\n            $id       = $user_group->getId();\n            $selected = (in_array($id, $selected_ids)) ? 'selected=\"selected\"' : '';\n            $options .= '<option value=\"' . $id . '\" ' . $selected . '>';\n            $options .= NameTranslator::getUserGroupDisplayName($user_group->getName());\n            $options .= '</option>';\n        }\n\n        return $options;\n    }\n\n    /**\n     * @return ProjectUGroup[]\n     */\n    private function getAllUserGroups()\n    {\n        $user_groups     = [];\n        $permission_type = self::PERMISSION_TYPE;\n\n        $sql = \"SELECT ugroup_id FROM permissions_values WHERE permission_type='$permission_type'\";\n        $res = db_query($sql);\n\n        $predefined_ugroups = '';\n        if (db_numrows($res) < 1) {\n            return $user_groups;\n        } else {\n            while ($row = db_fetch_array($res)) {\n                if ($predefined_ugroups) {\n                    $predefined_ugroups .= ' ,';\n                }\n                $predefined_ugroups .= db_ei($row['ugroup_id']);\n            }\n        }\n\n        $sql = \"SELECT * FROM ugroup WHERE group_id=\" . db_ei($this->getTracker()->getGroupId()) . \" OR ugroup_id IN (\" . $predefined_ugroups . \") ORDER BY ugroup_id\";\n        $res = db_query($sql);\n\n        while ($row = db_fetch_array($res)) {\n            $user_groups[] = new ProjectUGroup($row);\n        }\n\n        return $user_groups;\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_PermissionsOnArtifact_ValueDao();\n    }\n\n    /**\n     * @param mixed            $value\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        if ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true) {\n            return $this->getPermissionsValidator()->isNoneGroupSelected($value) === false;\n        }\n\n        return $this->getPermissionsValidator()->hasAGroupSelected($value);\n    }\n\n    /**\n     * @param mixed $submitted_value\n     *\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        if ($last_changeset_value === null && $this->isRequired() === true && $this->isAtLeastOneUGroupSelected($submitted_value) === false) {\n            $this->addRequiredError();\n\n            return false;\n        }\n\n        if ($this->isSelectBoxChecked($submitted_value) === false) {\n            return true;\n        }\n\n        if ($this->isAtLeastOneUGroupSelected($submitted_value) === false) {\n            $this->addRequiredError();\n\n            return false;\n        }\n\n        return true;\n    }\n\n    private function isAtLeastOneUGroupSelected($submitted_value)\n    {\n        return isset($submitted_value['u_groups']) === true && count($submitted_value['u_groups']) > 0;\n    }\n\n    private function isSelectBoxChecked($submitted_value): bool\n    {\n        return (isset($submitted_value['use_artifact_permissions']) === true && (bool) $submitted_value['use_artifact_permissions'] === true);\n    }\n\n    private function getPermissionsValidator()\n    {\n        return new PermissionsOnArtifactValidator();\n    }\n\n    private function getPermissionsOnArtifactUGroupRetriever()\n    {\n        return new PermissionsOnArtifactUGroupRetriever();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $value = $this->getPermissionsOnArtifactUsageRetriever()->setRestrictAccessForArtifact($value, $this);\n        $value = $this->getPermissionsOnArtifactUGroupRetriever()->initializeUGroupsIfNoUGroupsAreChoosenWithRequiredCondition($value, $this);\n        $value = $this->getPermissionsOnArtifactUsageRetriever()->alwaysUseRestrictedPermissionsForRequiredField($value, $this);\n\n        $artifact->setUseArtifactPermissions($value[self::USE_IT]);\n        permission_clear_all($this->getTracker()->getGroupId(), self::PERMISSION_TYPE, $artifact->getId(), false);\n\n        if (! empty($value['u_groups'])) {\n            $this->addPermissions($value['u_groups'], $artifact->getId());\n\n            return $this->getValueDao()->create($changeset_value_id, $value[self::USE_IT], $value['u_groups']);\n        }\n\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        assert($old_value instanceof Tracker_Artifact_ChangesetValue_PermissionsOnArtifact);\n        return (new ChangesChecker())->hasChanges($old_value, $new_value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the previous one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $value_ids = $this->getValueDao()->searchById($value_id) ?: [];\n        $ugroups   = [];\n\n        foreach ($value_ids as $v) {\n            $ugroups[(int) $v['ugroup_id']] = $v['ugroup_name'];\n        }\n\n        return new Tracker_Artifact_ChangesetValue_PermissionsOnArtifact($value_id, $changeset, $this, $has_changed, $changeset->getArtifact()->useArtifactPermissions(), $ugroups);\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (isset($value['value'][self::GRANTED_GROUPS])) {\n            if (\n                isset($value['value']['is_used_by_default']) === true\n                && $value['value']['is_used_by_default'] === true\n                && count($value['value'][self::GRANTED_GROUPS]) === 0\n            ) {\n                throw new Tracker_FormElement_InvalidFieldException(\n                    'Permission field is required please choose a group in list'\n                );\n            }\n\n            $user_groups = $this->getUserGroupsFromREST($value['value'][self::GRANTED_GROUPS]);\n\n            return $this->getFieldDataFromArray($user_groups);\n        }\n        throw new Tracker_FormElement_InvalidFieldException(\n            'Permission field values must be passed as an array of ugroup ids e.g. \"value\" : {\"granted_groups\" : [158, \"142_3\"]}'\n        );\n    }\n\n    /**\n     * @return int[]\n     * @throws Tracker_FormElement_InvalidFieldException\n     */\n    private function getUserGroupsFromREST($user_groups)\n    {\n        if (! is_array($user_groups)) {\n            throw new Tracker_FormElement_InvalidFieldException(\"'granted_groups' must be an array. E.g. [2, '124_3']\");\n        }\n\n        $project_groups = [];\n        foreach ($user_groups as $user_group) {\n            try {\n                UserGroupRepresentation::checkRESTIdIsAppropriate($user_group);\n                $value = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($user_group);\n\n                if ($value['project_id'] && $value['project_id'] != $this->getTracker()->getProject()->getID()) {\n                    throw new Tracker_FormElement_InvalidFieldException('Invalid value \"' . $user_group . '\" for field ' . $this->getId());\n                }\n\n                $project_groups[] = $value['user_group_id'];\n            } catch (Exception $e) {\n                if (is_numeric($user_group) && $user_group < ProjectUGroup::DYNAMIC_UPPER_BOUNDARY) {\n                    $project_groups[] = $user_group;\n                } else {\n                    throw new Tracker_FormElement_InvalidFieldException($e->getMessage());\n                }\n            }\n        }\n\n        return $project_groups;\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n     /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return mixed the field data corresponding to the value for artifact submission\n     */\n    public function getFieldData($value)\n    {\n        return $this->getFieldDataFromArray(explode(',', $value));\n    }\n\n    private function getFieldDataFromArray(array $values)\n    {\n        $ugroup_ids = array_filter(array_map('intval', $values));\n        if (count($ugroup_ids) == 0) {\n            return [\n                self::USE_IT => 0,\n                'u_groups'   => [],\n            ];\n        } else {\n            return [\n                self::USE_IT => 1,\n                'u_groups'   => $ugroup_ids,\n            ];\n        }\n    }\n\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Adds permissions in the database\n     *\n     * @param Array $ugroups the list of ugroups\n     * @param int          $artifact_id  The id of the artifact\n     *\n     * @return bool\n     */\n    public function addPermissions($ugroups, $artifact_id)\n    {\n        $pm              = PermissionsManager::instance();\n        $permission_type = self::PERMISSION_TYPE;\n        foreach ($ugroups as $ugroup) {\n            if (! $pm->addPermission($permission_type, $artifact_id, $ugroup)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPermissionsOnArtifact($this);\n    }\n    /**\n     * Return REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value = $changeset->getValue($this);\n        if ($value) {\n            return $value->getFullRESTValue($user);\n        }\n    }\n\n    /**\n     * @return PermissionsOnArtifacts\n     */\n    public function getRESTAvailableValues()\n    {\n        $representation = new PermissionsOnArtifacts();\n        $project_id     = $this->getTracker()->getGroupId();\n        $representation->build($project_id, self::IS_USED_BY_DEFAULT, $this->getAllUserGroups());\n\n        return $representation;\n    }\n\n    /**\n     * @param bool $can_user_restrict_permissions_to_nobody\n     * @param bool $disabled\n     *\n     * @return string\n     */\n    private function fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $disabled, $is_expecting_input)\n    {\n        $empty_value_class = '';\n        if ($is_expecting_input) {\n            $empty_value_class = 'empty_value';\n        }\n\n        $html = '<p class=\"tracker_field_permissionsonartifact ' . $empty_value_class . '\">';\n        if ($this->isRequired() == false) {\n            if (! $disabled) {\n                $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\" value=\"0\" />';\n            }\n            $html .= '<label class=\"checkbox\" for=\"artifact_' . $this->getId() . '_use_artifact_permissions\">';\n            $html .= '<input type=\"checkbox\"\n                        name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\"\n                        id=\"artifact_' . $this->getId() . '_use_artifact_permissions\"\n                        value=\"1\" ' .\n                (($can_user_restrict_permissions_to_nobody == true) ? 'checked=\"checked\"' : '') .\n                (($disabled == true) ? 'disabled=\"disabled\"' : '') .\n                '/>';\n        } else {\n            $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId(\n            ) . '][use_artifact_permissions]\" value=\"1\" />';\n        }\n\n        $html .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:') . '</label>';\n        $html .= '</p>';\n\n        return $html;\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2014-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\n\nclass Tracker_FormElement_Field_Priority extends Tracker_FormElement_Field_Integer implements Tracker_FormElement_Field_ReadOnly\n{\n    /**\n     * @psalm-mutation-free\n     */\n    public function getLabel($report = null)\n    {\n        return $this->label;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return ' INNER JOIN tracker_artifact_priority_rank ON artifact.id = tracker_artifact_priority_rank.artifact_id';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression('tracker_artifact_priority_rank.`rank`', $criteria_value);\n        }\n        return '';\n    }\n\n    /**\n     * @param null|Tracker_Report|int $report\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $value = $this->getArtifactRank($artifact_id);\n\n        if (! $report instanceof Tracker_Report) {\n            return $value;\n        }\n\n        $augmented_value = $this->getAugmentedFieldValue($artifact_id, $report);\n        if ($augmented_value) {\n            return $augmented_value;\n        }\n\n        return '<span class=\"non-displayable\" title=\"' . dgettext('tuleap-tracker', 'The rank of an artifact only exists in the context of a milestone. You must filter by milestone to view artifact ranks.') . '\">' . dgettext('tuleap-tracker', 'N/A') . '</span>';\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $augmented_value = $this->getAugmentedFieldValue($artifact_id, $report);\n        if ($augmented_value) {\n            return $augmented_value;\n        }\n\n        return dgettext('tuleap-tracker', 'N/A');\n    }\n\n    private function getAugmentedFieldValue($artifact_id, Tracker_Report $report)\n    {\n        $result = '';\n\n        EventManager::instance()->processEvent(\n            TRACKER_EVENT_FIELD_AUGMENT_DATA_FOR_REPORT,\n            [\n                'additional_criteria' => $report->getAdditionalCriteria(),\n                'result'              => &$result,\n                'artifact_id'         => $artifact_id,\n                'field'               => $this,\n            ]\n        );\n\n        return $result;\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelect()\n    {\n        return \"R_{$this->id}.rank AS `$this->name`\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        return \"INNER JOIN tracker_artifact_priority_rank AS R_{$this->id} ON a.id = R_{$this->id}.artifact_id\";\n    }\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<span>' . $this->getArtifactRank($artifact->getID()) . '</span>';\n    }\n\n    private function getArtifactRank($artifact_id)\n    {\n        return $this->getPriorityManager()->getGlobalRank($artifact_id);\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<span>' . $this->getArtifactRank($artifact->getID()) . '</span>';\n                break;\n            default:\n                $output .= $this->getArtifactRank($artifact->getID());\n                break;\n        }\n        return $output;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return '<span>314116</span>';\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Rank');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Rank');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/priority.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/priority.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->getArtifactRank($artifact->getID());\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPriority($this);\n    }\n\n    /**\n     * Return REST value of the priority\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $this->getArtifactRank($changeset->getArtifact()->getID())\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    private function getPriorityManager()\n    {\n        return new Tracker_Artifact_PriorityManager(\n            new Tracker_Artifact_PriorityDao(),\n            new Tracker_Artifact_PriorityHistoryDao(),\n            UserManager::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Validate a field\n     *\n     * @param Artifact                        $artifact             The artifact to check\n     * @param mixed                           $submitted_value      The submitted value\n     * @param Tracker_Artifact_ChangesetValue $last_changeset_value The last changeset value of the field (give null if no old value)\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n\n        if ($submitted_value !== null && ! $this->userCanUpdate($user)) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Fetch the html code to display the field value in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        //return $this->fetchTooltipValue($artifact, $artifact->getLastChangeset()->getValue($this));\n\n        $artifact_id  = $artifact->getId();\n        $changeset_id = $artifact->getLastChangeset()->getId();\n        $value        = $artifact->getLastChangeset()->getValue($this);\n        $report       = Tracker_ReportFactory::instance()->getDefaultReportsByTrackerId($artifact->getTracker()->getId());\n        $request      = HTTPRequest::instance();\n\n        if ($request->exist('report')) {\n            $report = Tracker_ReportFactory::instance()->getReportById(\n                $request->get('report'),\n                UserManager::instance()->getCurrentUser()->getId()\n            );\n        }\n\n        return $this->fetchChangesetValue($artifact_id, $changeset_id, $value, $report);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2013 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\nclass Tracker_FormElement_Field_SubmittedBy extends Tracker_FormElement_Field_List implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $a             = 'A_' . $this->id;\n            $b             = 'B_' . $this->id;\n            $ids_to_search = array_values(array_intersect(\n                array_values($criteria_value),\n                array_merge([100], array_keys($this->getBind()->getAllValues()))\n            ));\n            if (count($ids_to_search) > 1) {\n                return \" artifact.submitted_by IN(\" . $this->getCriteriaDao()->getDa()->escapeIntImplode($ids_to_search) . \") \";\n            } else {\n                $id_to_search = isset($ids_to_search[0]) ? $ids_to_search[0] : null;\n                return \" artifact.submitted_by = \" . $this->getCriteriaDao()->getDa()->escapeInt($id_to_search) . \" \";\n            }\n        }\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        // SubmittedOn is stored in the artifact\n        return \"a.submitted_by AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n    public function getQueryFromAggregate()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \" LEFT JOIN  user AS $R2 ON ($R2.user_id = a.submitted_by ) \";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        // SubmittedOn is stored in the artifact\n        return 'a.submitted_by';\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby()\n    {\n        return $this->name;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Submitted By');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the user who submitted the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        // user can not change the value of this field\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Hook called after a creation of a field\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     * @return void\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        //force the bind\n        $form_element_data['bind-type'] = 'users';\n        $form_element_data['bind']      = [\n            'value_function' => [\n                'artifact_submitters',\n            ],\n        ];\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value              = new Tracker_FormElement_Field_List_Bind_UsersValue($changeset->getArtifact()->getSubmittedBy());\n        $submitted_by_value = $value->getFullRESTValue($this);\n\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $submitted_by_value\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $value    = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n        $value    = $purifier->purify($value->getLabel());\n        $html    .= $value;\n        return $html;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n\n        switch ($format) {\n            case 'html':\n                $output .= $this->fetchArtifactValueReadOnly($artifact);\n                break;\n            default:\n                $output = $this->getBind()->formatMailArtifactValue($value->getId());\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $fake_value = new Tracker_FormElement_Field_List_Bind_UsersValue(UserManager::instance()->getCurrentUser()->getId());\n        $html      .= $purifier->purify($fake_value->getLabel()) . '<br />';\n        $html      .= '<span class=\"tracker-admin-form-element-help\">';\n        $html      .= dgettext('tuleap-tracker', 'The field is automatically set to artifact submission user');\n        $html      .= '</span>';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->getBind()->formatChangesetValue(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchTooltipValue()\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * Display the field for CSV\n     * Used in CSV data export\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->getBind()->formatChangesetValueForCSV(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return false;\n    }\n\n    public function getUserManager()\n    {\n        return UserManager::instance();\n    }\n     /**\n     * Get the field data for artifact submission\n     * Check if the user name exists in the platform\n     *\n     * @param string the user name\n     *\n     * @return int the user id\n     */\n    public function getFieldData($value)\n    {\n        $um = $this->getUserManager();\n        $u  = $um->getUserByUserName($value);\n        if ($u) {\n            return $u->getId();\n        } else {\n            return null;\n        }\n    }\n\n    public function isNone($value)\n    {\n        return false;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitSubmittedBy($this);\n    }\n\n    public function getDefaultValue()\n    {\n        return Tracker_FormElement_Field_List_Bind::NONE_VALUE;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_SubmittedOn extends Tracker_FormElement_Field_Date implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            // SubmittedOn is stored in the artifact\n            return $this->getSQLCompareDate(\n                (bool) $criteria->is_advanced,\n                $criteria_value['op'],\n                $criteria_value['from_date'],\n                $criteria_value['to_date'],\n                'artifact.submitted_on'\n            );\n        }\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        // SubmittedOn is stored in the artifact\n        return \"a.submitted_on AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby()\n    {\n        // SubmittedOn is stored in the artifact\n        return 'a.submitted_on';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->formatDate($changeset->getArtifact()->getSubmittedOn());\n    }\n\n    protected function getValueDao()\n    {\n        return null;\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            date('c', $changeset->getArtifact()->getSubmittedOn())\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Submitted On');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the date the artifact was submitted on');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        // user can not change the value of this field\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $changeset->getArtifact()->getSubmittedOn());\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        // Submitted On is never updated\n        return false;\n    }\n\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if (! $value) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $timestamp = $value->getTimestamp();\n        $value     = $timestamp ? $this->formatDateForDisplay($timestamp) : '';\n        $html     .= $value;\n\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if (! $value) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n\n        return parent::fetchTooltipValue($artifact, $value);\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value)) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getTimestamp();\n                $output = $value ? $this->formatDate($value) : '';\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . $this->formatDateTime(time()) . '</div>';\n        $html .= '<span class=\"tracker-admin-form-element-help\">';\n        $html .= dgettext('tuleap-tracker', 'The field is automatically set to artifact submission date');\n        $html .= '</span>';\n        return $html;\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Retreive The last date Field value\n     *\n     * @param Artifact $artifact The artifact\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, $artifact->getSubmittedOn());\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new Tracker_ArtifactDao();\n        $dar       = $dao->getArtifactsBySubmittedOnDate($trackerId, $date);\n\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitSubmittedOn($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return true;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\FileUploadDataProvider;\nuse Tuleap\\Tracker\\Artifact\\RichTextareaProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\Text\\TextFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Text\\TextValueDao;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Text extends Tracker_FormElement_Field_Alphanum\n{\n    public $default_properties = [\n        'rows'      => [\n            'value' => 10,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'cols'          => [\n            'value' => 50,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'text',\n            'size'  => 40,\n        ],\n    ];\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return $this->getDao()->delete($this->id);\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                return \" INNER JOIN tracker_changeset_value AS $a\n                         ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_text AS $b\n                         ON ($b.changeset_value_id = $a.id\n                             AND \" . $this->buildMatchExpression(\"$b.value\", $criteria_value) . \"\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS `\" . $this->name . \"`\";\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_text AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $matches = [];\n        $expr    = parent::buildMatchExpression($field_name, $criteria_value);\n        if (! $expr) {\n            // else transform into a series of LIKE %word%\n            if (is_array($criteria_value)) {\n                $split = preg_split('/\\s+/', $criteria_value['value']);\n            } else {\n                $split = preg_split('/\\s+/', $criteria_value);\n            }\n            $words        = [];\n            $criterie_dao = $this->getCriteriaDao();\n            if ($criterie_dao === null) {\n                return '';\n            }\n            foreach ($split as $w) {\n                $words[] = $field_name . \" LIKE \" . $criterie_dao->getDa()->quoteLikeValueSurround($w);\n            }\n            $expr = join(' AND ', $words);\n        }\n        return $expr;\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Text_ValueDao();\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return true;\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return '';\n        }\n        $project_id = $tracker->getGroupId();\n\n        static $cache = [];\n        if (isset($cache[$project_id][$value])) {\n            return $cache[$project_id][$value];\n        }\n\n        $artifact = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n        $format   = $this->getRightBodyFormat($artifact, $value);\n        $hp       = Codendi_HTMLPurifier::instance();\n\n        if ($format == Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $changeset_value = $hp->purify($value, CODENDI_PURIFIER_FULL, $project_id);\n        } else {\n            $changeset_value = $hp->purify($value, CODENDI_PURIFIER_BASIC, $project_id);\n        }\n\n        $cache[$project_id][$value] = $changeset_value;\n        return $changeset_value;\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new TextValueDao();\n    }\n    protected function getDao()\n    {\n        return new TextFieldDao();\n    }\n\n    /**\n     * Return true if this field is the semantic title field of the tracker,\n     * false otherwise if not or if there is no title field defined.\n     *\n     * @return bool true if the field is the 'title' of the tracker\n     */\n    protected function isSemanticTitle()\n    {\n        $semantic_manager = new Tracker_SemanticManager($this->getTracker());\n        $semantics        = $semantic_manager->getSemantics();\n        $field            = $semantics['title']->getField();\n        return ($field === $this);\n    }\n\n    private function getDefaultFormatForUser(PFUser $user): string\n    {\n        $user_preference = $user->getPreference(PFUser::EDITION_DEFAULT_FORMAT);\n\n        if (! $user_preference || $user_preference === Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT) {\n            return Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT;\n        }\n\n        if ($user_preference === Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT) {\n            return Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT;\n        }\n\n        return Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value  = $this->getValueFromSubmitOrDefault($submitted_values);\n        $format = $this->getDefaultFormatForUser($this->getCurrentUser());\n\n        if (isset($value['format'])) {\n            $format = $value['format'];\n        }\n\n        return $this->getRichTextarea(null, $format, $value['content']);\n    }\n\n     /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html  = '';\n        $value = dgettext('tuleap-tracker', 'Unchanged');\n\n        //check if this field is the title we do not allow to change it\n        if ($this->isSemanticTitle()) {\n            $html .= '<textarea readonly=\"readonly\" title=\"' . dgettext('tuleap-tracker', 'This field is the title of the artifact. It is not allowed to masschange it.') . '\">' . $value . '</textarea>';\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= '<textarea id = field_' . $this->id . ' class=\"user-mention\"\n                                name=\"artifact[' . $this->id . '][content]\"\n                                rows=\"' . $this->getProperty('rows') . '\"\n                                cols=\"' . $this->getProperty('cols') . '\">';\n            $html .= $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML);\n            $html .= '</textarea>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $content = '';\n\n        if ($value) {\n            assert($value instanceof Tracker_Artifact_ChangesetValue);\n            $format = $value->getFormat();\n        } else {\n            $default_value = $this->getDefaultValue();\n            $format        = $default_value['format'];\n        }\n\n        if (isset($submitted_values[$this->getId()])) {\n            $content = $submitted_values[$this->getId()]['content'];\n            $format  = $submitted_values[$this->getId()]['format'] == Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT ? Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT : Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT;\n        } elseif ($value != null) {\n            $content = $value->getText();\n        }\n\n        return $this->getRichTextarea($artifact, $format, $content);\n    }\n\n    /**\n     * @return string\n     */\n    private function getRichTextarea(?Artifact $artifact, string $format, string $content)\n    {\n        $tracker = $this->getTracker();\n        if (! $tracker) {\n            throw new LogicException(self::class . ' # ' . $this->getId() . ' must have a valid tracker');\n        }\n\n        $hp = Codendi_HTMLPurifier::instance();\n\n        $rich_textarea_provider = new RichTextareaProvider(\n            TemplateRendererFactory::build(),\n            new \\Tuleap\\Tracker\\Artifact\\UploadDataAttributesForRichTextEditorBuilder(\n                new FileUploadDataProvider($this->getFrozenFieldDetector(), Tracker_FormElementFactory::instance())\n            )\n        );\n\n        $html = '<input type=\"hidden\"\n             id=\"artifact[' . $this->id . ']_body_format\"\n             name=\"artifact[' . $this->id . '][format]\"\n             value=\"' . $hp->purify($format) . '\" />';\n\n        $html .= $rich_textarea_provider->getTextarea(\n            $tracker,\n            $artifact,\n            $this->getCurrentUser(),\n            'field_' . $this->id,\n            'artifact[' . $this->id . '][content]',\n            $this->getProperty('rows'),\n            $this->getProperty('cols'),\n            $content,\n            $this->isRequired(),\n        );\n\n        return $html;\n    }\n\n     /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || $value->getText() == '') {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $output = $value->getContentAsText();\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $text = $value ? $value->getValue() : '';\n\n        if ($text === '') {\n            return $this->getNoValueLabel();\n        }\n\n        return '<div class=\"textarea-value\">' . $text . '</div>';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp      = Codendi_HTMLPurifier::instance();\n        $html    = '';\n        $content = '';\n        if ($this->hasDefaultValue()) {\n            $content = $this->getProperty('default_value');\n        }\n        $html .= '<textarea rows=\"' . $this->getProperty('rows') . '\" cols=\"' . $this->getProperty('cols') . '\" autocomplete=\"off\">';\n        $html .=  $hp->purify($content, CODENDI_PURIFIER_CONVERT_HTML);\n        $html .= '</textarea>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Text');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Paragraph, long text field');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-spin.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-spin--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Text $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n\n        if ($value) {\n            $html .= $value->getValue();\n        }\n\n        return $html;\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return $this->getProperty('cols') > 40;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (static::class == 'Tracker_FormElement_Field_Text') {\n                if (! (isset($this->default_properties['rows']) && isset($this->default_properties['cols']))) {\n                    var_dump($this, 'Properties must be \"rows\" and \"cols\"');\n                    return false;\n                }\n            } elseif (static::class == 'Tracker_FormElement_Field_String') {\n                if (! (isset($this->default_properties['maxchars']) && isset($this->default_properties['size']))) {\n                    var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        $rule    = $this->getRuleString();\n        $content = $this->getRightContent($value);\n        if (! ($is_valid = $rule->isValid($content))) {\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', '%1$s is not a text.'), $this->getLabel()));\n        }\n        return $is_valid;\n    }\n\n    protected function getRuleString()\n    {\n        return new Rule_String();\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id, $this->id)->getRow()) {\n            $changeset_value = new Tracker_Artifact_ChangesetValue_Text($value_id, $changeset, $this, $has_changed, $row['value'], $row['body_format']);\n        }\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        assert($old_value instanceof Tracker_Artifact_ChangesetValue_Text);\n\n        if (is_array($new_value)) {\n            return $old_value->getText() !== (string) $new_value['content'];\n        }\n        return $old_value->getText() !== (string) $new_value;\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        if ($this->doesValueUseTheByFieldOutput($value)) {\n            $text_value = $this->formatValueWithTheByFieldOutput($value);\n\n            return $this->getRestFieldData($text_value);\n        }\n\n        return parent::getFieldDataFromRESTValueByField($value, $artifact);\n    }\n\n    private function formatValueWithTheByFieldOutput(array $value)\n    {\n        return [\n            'content' => $value['value'],\n            'format'  => $value['format'],\n        ];\n    }\n\n    private function doesValueUseTheByFieldOutput(array $value)\n    {\n        return array_key_exists('value', $value) &&\n               array_key_exists('format', $value) &&\n               ! is_array($value['value']);\n    }\n\n    public function getRestFieldData($value)\n    {\n        if ($this->isValueAlreadyWellFormatted($value)) {\n            return $value;\n        }\n\n        $data = $this->getDefaultValue();\n\n        if (is_array($value) && isset($value['content'])) {\n            $data['content'] = $value['content'];\n        } else {\n            $data['content'] = $value;\n        }\n\n        return $data;\n    }\n\n    private function isValueAlreadyWellFormatted($value): bool\n    {\n        return is_array($value) && isset($value['content']) && $this->isFormatValid($value['format']);\n    }\n\n    private function isFormatValid(?string $format): bool\n    {\n        return isset($format)\n            && in_array(\n                $format,\n                [\n                    Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT,\n                    Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT,\n                    Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT,\n                ]\n            );\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $content     = $this->getRightContent($value);\n        $body_format = $this->getRightBodyFormat($artifact, $value);\n\n        if ($body_format === Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $substitutor = new \\Tuleap\\Tracker\\FormElement\\Field\\File\\FileURLSubstitutor();\n            $content     = $substitutor->substituteURLsInHTML($content, $url_mapping);\n        }\n\n        return $this->getValueDao()->createWithBodyFormat($changeset_value_id, $content, $body_format) &&\n               $this->extractCrossRefs($artifact, $content);\n    }\n\n    private function getRightContent($value)\n    {\n        return is_array($value) ? $value['content'] : $value;\n    }\n\n    private function getRightBodyFormat(Artifact $artifact, $value)\n    {\n        $last_changeset_value = $this->getLastChangesetValue($artifact);\n        assert($last_changeset_value === null || $last_changeset_value instanceof Tracker_Artifact_ChangesetValue_Text);\n        $old_format = $last_changeset_value ? $last_changeset_value->getFormat() : null;\n        return is_array($value) ? $value['format'] : $old_format;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value): bool\n    {\n        if (! $this->isRequired()) {\n            return true;\n        }\n\n        if (empty($submitted_value)) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        if (\n            is_array($submitted_value) &&\n            (\n                ! isset($submitted_value[\"content\"]) ||\n                isset($submitted_value[\"content\"]) && empty($submitted_value[\"content\"])\n            )\n        ) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function extractCrossRefs($artifact, $content)\n    {\n        return ReferenceManager::instance()->extractCrossRef(\n            $content,\n            $artifact->getId(),\n            Artifact::REFERENCE_NATURE,\n            $this->getTracker()->getGroupID(),\n            UserManager::instance()->getCurrentUser()->getId(),\n            $this->getTracker()->getItemName()\n        );\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        $user           = $this->getCurrentUser();\n        $default_format = $this->getDefaultFormatForUser($user);\n\n        $default_value_in_text_format = $this->getProperty('default_value');\n        if ($default_format === Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $default_value = '<p>' . nl2br(htmlentities($default_value_in_text_format)) . '</p>';\n        } else {\n            $default_value = $default_value_in_text_format;\n        }\n\n        return [\n            'format'  => $default_format,\n            'content' => $default_value,\n        ];\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return trim($this->getRightContent($value)) === '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitText($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\date\\RelativeDatesAssetsRetriever;\nuse Tuleap\\DB\\Compat\\Legacy2018\\LegacyDataAccessResultInterface;\nuse Tuleap\\Layout\\CssAssetCollection;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Project\\MappingRegistry;\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorPresenter;\nuse Tuleap\\Tracker\\Report\\CSVExport\\CSVFieldUsageChecker;\nuse Tuleap\\Tracker\\Report\\Renderer\\Table\\GetExportOptionsMenuItemsEvent;\nuse Tuleap\\Tracker\\Report\\Renderer\\Table\\ProcessExportEvent;\nuse Tuleap\\Tracker\\Report\\WidgetAdditionalButtonPresenter;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_Report_Renderer_Table extends Tracker_Report_Renderer implements Tracker_Report_Renderer_ArtifactLinkable\n{\n    public const EXPORT_LIGHT = 1;\n    public const EXPORT_FULL  = 0;\n\n    public $chunksz;\n    public $multisort;\n    /**\n     * @var Tracker_Report_Session\n     */\n    private $report_session;\n\n    /**\n     * Constructor\n     *\n     * @param int $id the id of the renderer\n     * @param Tracker_Report $report the id of the report\n     * @param string $name the name of the renderer\n     * @param string $description the description of the renderer\n     * @param int $rank the rank\n     * @param int $chunksz the size of the chunk (Browse X at once)\n     * @param bool $multisort use multisort?\n     */\n    public function __construct($id, $report, $name, $description, $rank, $chunksz, $multisort)\n    {\n        parent::__construct($id, $report, $name, $description, $rank);\n        $this->chunksz   = $chunksz;\n        $this->multisort = $multisort;\n    }\n\n    public function initiateSession()\n    {\n        $this->report_session = new Tracker_Report_Session($this->report->id);\n        $this->report_session->changeSessionNamespace(\"renderers\");\n        $this->report_session->set(\"{$this->id}.chunksz\", $this->chunksz);\n        $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n    }\n\n    /**\n     * Delete the renderer\n     */\n    public function delete()\n    {\n        $this->getSortDao()->delete($this->id);\n        $this->getColumnsDao()->delete($this->id);\n        $this->getAggregatesDao()->deleteByRendererId($this->id);\n    }\n\n    protected $_sort;\n    /**\n     * @param array $sort\n     */\n    public function setSort($sort)\n    {\n        $this->_sort = $sort;\n    }\n    /**\n     * Get field ids used to (multi)sort results\n     * @return array [{'field_id' => 12, 'is_desc' => 0, 'rank' => 2}, [...]]\n     */\n    public function getSort($store_in_session = true)\n    {\n        $sort = null;\n        if ($store_in_session) {\n            if (isset($this->report_session)) {\n                $sort = $this->report_session->get(\"{$this->id}.sort\");\n            }\n        }\n\n        if ($sort) {\n                $ff = $this->report->getFormElementFactory();\n            foreach ($sort as $field_id => $properties) {\n                if ($properties) {\n                    if ($field = $ff->getFormElementById($field_id)) {\n                        if ($field->canBeUsedToSortReport() && $field->userCanRead()) {\n                            $this->_sort[$field_id]          = [\n                                   'renderer_id ' => $this->id,\n                                   'field_id'    => $field_id,\n                                   'is_desc'     => $properties['is_desc'],\n                                   'rank'        => $properties['rank'],\n                                ];\n                            $this->_sort[$field_id]['field'] = $field;\n                        }\n                    }\n                }\n            }\n        } elseif (! isset($this->report_session) || ! $this->report_session->hasChanged()) {\n            if (! is_array($this->_sort)) {\n                $ff          = $this->getFieldFactory();\n                $this->_sort = [];\n                foreach ($this->getSortDao()->searchByRendererId($this->id) as $row) {\n                    if ($field = $ff->getUsedFormElementById($row['field_id'])) {\n                        if ($field->canBeUsedToSortReport() && $field->userCanRead()) {\n                            $this->_sort[$row['field_id']]          = $row;\n                            $this->_sort[$row['field_id']]['field'] = $field;\n                        }\n                    }\n                }\n            }\n            $sort = $this->_sort;\n            if ($store_in_session && isset($this->report_session)) {\n                foreach ($sort as $field_id => $properties) {\n                    $this->report_session->set(\"{$this->id}.sort.{$field_id}.is_desc\", $properties['is_desc']);\n                    $this->report_session->set(\"{$this->id}.sort.{$field_id}.rank\", $properties['rank']);\n                }\n            }\n        } else {\n            $this->_sort = [];\n        }\n        return $this->_sort;\n    }\n    /**\n     * Adds sort values to database\n     *\n     * @param array $sort\n     */\n    public function saveSort($sort)\n    {\n        $dao = $this->getSortDao();\n        if (is_array($sort)) {\n            foreach ($sort as $key => $s) {\n                $dao->create($this->id, $s['field']->id);\n            }\n        }\n    }\n\n    protected $_columns;\n    /**\n     * @param array $cols\n     */\n    public function setColumns($cols)\n    {\n        $this->_columns = $cols;\n    }\n    /**\n     * Adds columns to database\n     *\n     * @param array $cols\n     */\n    public function saveColumns($cols)\n    {\n        $dao   = $this->getColumnsDao();\n        $rank  = -1;\n        $width = 0;\n\n        foreach ($cols as $key => $col) {\n            $rank++;\n\n            $artlink_nature        = (isset($col['artlink_nature']) ? $col['artlink_nature'] : null);\n            $artlink_nature_format = (isset($col['artlink_nature_format']) ? $col['artlink_nature_format'] : null);\n\n            $dao->create($this->id, $col['field']->id, $width, $rank, $artlink_nature, $artlink_nature_format);\n        }\n    }\n\n    /**\n     * Get field ids and width used to display results\n     * @return array  [{'field_id' => 12, 'width' => 33, 'rank' => 5}, [...]]\n     */\n    public function getColumns()\n    {\n        $session_renderer_table_columns = null;\n        if (isset($this->report_session)) {\n            $session_renderer_table_columns = $this->report_session->get(\"{$this->id}.columns\");\n        }\n\n        if ($session_renderer_table_columns) {\n            $columns        = $session_renderer_table_columns;\n            $ff             = $this->report->getFormElementFactory();\n            $this->_columns = [];\n            foreach ($columns as $key => $column) {\n                $field_id = $this->fallbackFieldId($key, $column);\n                if ($formElement = $ff->getUsedFormElementFieldById($field_id)) {\n                    if ($formElement->userCanRead()) {\n                        $artlink_nature        = null;\n                        $artlink_nature_format = null;\n                        if (isset($column['artlink_nature'])) {\n                            $artlink_nature = $column['artlink_nature'];\n                        }\n                        if (isset($column['artlink_nature_format'])) {\n                            $artlink_nature_format = $column['artlink_nature_format'];\n                        }\n                        $this->_columns[$key] = [\n                            'field'                 => $formElement,\n                            'field_id'              => $formElement->getId(),\n                            'width'                 => $column['width'],\n                            'rank'                  => $column['rank'],\n                            'artlink_nature'        => $artlink_nature,\n                            'artlink_nature_format' => $artlink_nature_format,\n                        ];\n                    }\n                }\n            }\n        } else {\n            if (empty($this->_columns)) {\n                $this->_columns = $this->getColumnsFromDb();\n            }\n        }\n\n        return $this->_columns;\n    }\n\n    protected $_aggregates;\n    /**\n     * @param array $aggs\n     */\n    public function setAggregates($aggs)\n    {\n        $this->_aggregates = $aggs;\n    }\n    /**\n     * Adds aggregates to database\n     *\n     * @param array $aggs\n     */\n    public function saveAggregates($aggs)\n    {\n        $dao = $this->getAggregatesDao();\n        foreach ($aggs as $field_id => $aggregates) {\n            foreach ($aggregates as $aggregate) {\n                $dao->create($this->id, $field_id, $aggregate);\n            }\n        }\n    }\n    public function getAggregates()\n    {\n        $session_renderer_table_functions = null;\n        if (isset($this->report_session)) {\n            $session_renderer_table_functions = &$this->report_session->get(\"{$this->id}.aggregates\");\n        }\n        if ($session_renderer_table_functions) {\n            $aggregates = $session_renderer_table_functions;\n            $ff         = $this->report->getFormElementFactory();\n            foreach ($aggregates as $field_id => $aggregates) {\n                if ($formElement = $ff->getFormElementById($field_id)) {\n                    if ($formElement->userCanRead()) {\n                        $this->_aggregates[$field_id] = $aggregates;\n                    }\n                }\n            }\n        } else {\n            if (empty($this->_aggregates)) {\n                $ff                = $this->getFieldFactory();\n                $this->_aggregates = [];\n                foreach ($this->getAggregatesDao()->searchByRendererId($this->id) as $row) {\n                    if ($field = $ff->getUsedFormElementById($row['field_id'])) {\n                        if ($field->userCanRead()) {\n                            if (! isset($this->_aggregates[$row['field_id']])) {\n                                $this->_aggregates[$row['field_id']] = [];\n                            }\n                            $this->_aggregates[$row['field_id']][] = $row;\n                        }\n                    }\n                }\n            }\n            if (isset($this->report_session)) {\n                $aggregates = $this->_aggregates;\n                foreach ($aggregates as $field_id => $agg) {\n                    $this->report_session->set(\"{$this->id}.aggregates.{$field_id}\", $agg);\n                }\n            }\n        }\n        return $this->_aggregates;\n    }\n\n    public function storeColumnsInSession()\n    {\n        $columns = $this->_columns;\n        foreach ($columns as $key => $column) {\n            $field_id = $this->fallbackFieldId($key, $column);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.field_id\", $field_id);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.width\", isset($column['width']) ? $column['width'] : 0);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.rank\", isset($column['rank']) ? $column['rank'] : 0);\n            $this->report_session->set(\n                \"{$this->id}.columns.{$key}.artlink_nature\",\n                isset($column['artlink_nature']) ? $column['artlink_nature'] : null\n            );\n            $this->report_session->set(\n                \"{$this->id}.columns.{$key}.artlink_nature_format\",\n                isset($column['artlink_nature_format']) ? $column['artlink_nature_format'] : null\n            );\n        }\n    }\n\n    /**\n     * Before, there was no field_id stored in session as the index of the column was the field id.\n     * Now that we can have '1234' and '1234_fixed_in' as indexes, we need to store it in the session.\n     *\n     * As we don't want to break existing session once the Tuleap server is upgraded to the new version,\n     * if we don't find any field_id information then we fallback on the key used as index.\n     */\n    private function fallbackFieldId($key, $column)\n    {\n        if (isset($column['field_id'])) {\n            return $column['field_id'];\n        }\n\n        return $key;\n    }\n\n     /**\n     * Get field ids and width used to display results\n     * @return array  [{'field_id' => 12, 'width' => 33, 'rank' => 5}, [...]]\n     */\n    public function getColumnsFromDb()\n    {\n        $ff             = $this->getFieldFactory();\n        $this->_columns = [];\n        foreach ($this->getColumnsDao()->searchByRendererId($this->id) as $row) {\n            if ($field = $ff->getUsedFormElementFieldById($row['field_id'])) {\n                if ($field->userCanRead()) {\n                    $key = $row['field_id'];\n                    if (! is_null($row['artlink_nature'])) {\n                        $key .= '_' . $row['artlink_nature'];\n                    }\n                    $this->_columns[$key]          = $row;\n                    $this->_columns[$key]['field'] = $field;\n                }\n            }\n        }\n        return $this->_columns;\n    }\n\n    protected function getSortDao()\n    {\n        return new Tracker_Report_Renderer_Table_SortDao();\n    }\n\n    protected function getColumnsDao()\n    {\n        return new Tracker_Report_Renderer_Table_ColumnsDao();\n    }\n\n    protected function getAggregatesDao()\n    {\n        return new Tracker_Report_Renderer_Table_FunctionsAggregatesDao();\n    }\n\n    /**\n     * Fetch content of the renderer\n     * @return string\n     */\n    public function fetch($matching_ids, $request, $report_can_be_modified, PFUser $user)\n    {\n        $html       = '';\n        $total_rows = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset     = (int) $request->get('offset');\n        if ($offset < 0) {\n            $offset = 0;\n        }\n        if ($request->get('renderer')) {\n            $renderer_data = $request->get('renderer');\n            if (isset($renderer_data[$this->id]) && isset($renderer_data[$this->id]['chunksz'])) {\n                $this->report_session->set(\"{$this->id}.chunksz\", $renderer_data[$this->id]['chunksz']);\n                $this->report_session->setHasChanged();\n                $this->chunksz = $renderer_data[$this->id]['chunksz'];\n            }\n        }\n\n        $extracolumn = self::EXTRACOLUMN_MASSCHANGE;\n        if ((int) $request->get('link-artifact-id')) {\n            $extracolumn = self::EXTRACOLUMN_LINK;\n        }\n\n        if ($report_can_be_modified) {\n            $with_sort_links = true;\n        } else {\n            $with_sort_links = false;\n        }\n        $only_one_column  = null;\n        $use_data_from_db = false;\n        $aggregates       = false;\n        $store_in_session = true;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchHeader($report_can_be_modified, $user, $total_rows, $queries);\n        $html .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links);\n        $html .= $this->fetchTBody($matching_ids, $total_rows, $queries, $columns, $offset, $extracolumn);\n\n        //Display next/previous\n        $html .= $this->fetchNextPrevious($total_rows, $offset, $report_can_be_modified, (int) $request->get('link-artifact-id'));\n\n        //Display masschange controls\n        if ((int) $request->get('link-artifact-id')) {\n            //TODO\n        } else {\n            $html .= $this->fetchMassChange($matching_ids, $total_rows, $offset);\n        }\n\n        return $html;\n    }\n\n    private function fetchHeader($report_can_be_modified, PFUser $user, $total_rows, array $queries)\n    {\n        $html = '';\n\n        $html .= $this->fetchViewButtons($report_can_be_modified, $user);\n\n        if ($this->sortHasUsedField() && ! $this->columnsCanBeTechnicallySorted($queries)) {\n            $html .= '<div class=\"tracker_report_renderer_table_sort_warning\">\n                <ul class=\"feedback_warning\">\n                    <li>' . dgettext('tuleap-tracker', 'You have too many columns, the sort won\\'t work. Please remove some columns (and refresh the page) to be able to sort.') . '</li>\n                </ul>\n            </div>';\n        }\n\n        //Display sort info\n        $html .= '<div class=\"tracker_report_renderer_table_information\">';\n        if ($report_can_be_modified) {\n            $html .= $this->fetchSort();\n        }\n\n        $html .= $this->fetchMatchingNumber($total_rows);\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Fetch content of the renderer\n     * @return string|string[]\n     */\n    public function fetchAsArtifactLink(\n        $matching_ids,\n        $field_id,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_types,\n        $is_reverse,\n        $only_rows = false,\n        $from_aid = null,\n    ) {\n        $html             = '';\n        $total_rows       = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset           = 0;\n        $use_data_from_db = true;\n        $extracolumn      = $read_only ? self::NO_EXTRACOLUMN : self::EXTRACOLUMN_UNLINK;\n        $with_sort_links  = false;\n        $only_one_column  = null;\n        $pagination       = false;\n        $store_in_session = true;\n        $head             = '';\n\n        //Display the head of the table\n        $is_type_col = isset($matching_ids['type']);\n        $suffix      = '_' . $field_id . '_' . $this->report->id . '_' . $this->id;\n        if ($is_reverse) {\n            $suffix .= '_reverse';\n        }\n        $head .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links, $use_data_from_db, $suffix, '', $is_type_col);\n        if (! $only_rows) {\n            $html .= $head;\n        }\n        //Display the body of the table\n        $aggregates = false;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchTBody(\n            $matching_ids,\n            $total_rows,\n            $queries,\n            $columns,\n            $offset,\n            $extracolumn,\n            $only_one_column,\n            $use_data_from_db,\n            $pagination,\n            $field_id,\n            $prefill_removed_values,\n            $prefill_types,\n            $only_rows,\n            $read_only,\n            $from_aid\n        );\n\n        if (! $only_rows) {\n            $html .= $this->fetchArtifactLinkGoToTracker();\n        }\n\n        if ($only_rows) {\n            return ['head' => $head, 'rows' => $html];\n        }\n        return $html;\n    }\n\n    /**\n     * Get the item of the menu options.\n     *\n     * If no items is returned, the menu won't be displayed.\n     *\n     * @return array of 'item_key' => {url: '', icon: '', label: ''}\n     */\n    public function getOptionsMenuItems(PFUser $current_user): array\n    {\n        if ($current_user->isAnonymous()) {\n            return parent::getOptionsMenuItems($current_user);\n        }\n\n        $my_items            = ['export' => ''];\n        $my_items['export'] .= '<div class=\"btn-group\">';\n        $my_items['export'] .= '<a class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">';\n        $my_items['export'] .= '<i class=\"fa fa-download\"></i> ';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export');\n        $my_items['export'] .= ' <span class=\"caret\"></span>';\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '<ul class=\"dropdown-menu\" role=\"menu\">';\n        $my_items['export'] .= '<li class=\"almost-tlp-menu-title\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'CSV');\n        $my_items['export'] .= '</li>';\n        $my_items['export'] .= '<li>';\n        $my_items['export'] .= '<a href=\"' . $this->getExportResultURL(self::EXPORT_LIGHT) . '\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export all report columns');\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '</li>';\n        $my_items['export'] .= '<li>';\n        $my_items['export'] .= '<a href=\"' . $this->getExportResultURL(self::EXPORT_FULL) . '\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export all columns');\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '</li>';\n\n        $event = new GetExportOptionsMenuItemsEvent($this);\n        EventManager::instance()->processEvent($event);\n        $my_items['export'] .= $event->getItems();\n\n        $my_items['export'] .= '</ul>';\n        $my_items['export'] .= '</div>';\n        $my_items['export'] .= $event->getAdditionalContentThatGoesOutsideOfTheMenu();\n\n        foreach ($event->getJavascriptAssets() as $javascript_asset) {\n            $GLOBALS['HTML']->addJavascriptAsset($javascript_asset);\n        }\n\n        return $my_items + parent::getOptionsMenuItems($current_user);\n    }\n\n    private function getExportResultURL($export_only_displayed_fields)\n    {\n        return TRACKER_BASE_URL . '/?' . http_build_query(\n            [\n                'report'         => $this->report->id,\n                'renderer'       => $this->id,\n                'func'           => 'renderer',\n                'renderer_table' => [\n                    'export'                       => 1,\n                    'export_only_displayed_fields' => $export_only_displayed_fields,\n                ],\n            ]\n        );\n    }\n\n    private function fetchFormStart($id = '', $func = 'renderer')\n    {\n        $html  = '';\n        $html .= '<form method=\"POST\" action=\"\" id=\"' . $id . '\" class=\"form-inline\">';\n        $html .= '<input type=\"hidden\" name=\"report\" value=\"' . $this->report->id . '\" />';\n        $html .= '<input type=\"hidden\" name=\"renderer\" value=\"' . $this->id . '\" />';\n        $html .= '<input type=\"hidden\" name=\"func\" value=\"' . $func . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch content to be displayed in widget\n     */\n    public function fetchWidget(PFUser $user)\n    {\n        $html                   = '';\n        $use_data_from_db       = true;\n        $store_in_session       = false;\n        $matching_ids           = $this->report->getMatchingIds(null, $use_data_from_db);\n        $total_rows             = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset                 = 0;\n        $extracolumn            = self::NO_EXTRACOLUMN;\n        $with_sort_links        = false;\n        $only_one_column        = null;\n        $pagination             = true;\n        $artifactlink_field_id  = null;\n        $prefill_removed_values = null;\n        $prefill_types          = [];\n        $only_rows              = false;\n        $read_only              = true;\n        $id_suffix              = '';\n        //Display the head of the table\n        $html .= $this->fetchAdditionnalButton($this->report->getTracker());\n        $html .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links, $use_data_from_db, $id_suffix, $store_in_session);\n\n        //Display the body of the table\n        $aggregates = false;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchTBody(\n            $matching_ids,\n            $total_rows,\n            $queries,\n            $columns,\n            $offset,\n            $extracolumn,\n            $only_one_column,\n            $use_data_from_db,\n            $pagination,\n            $artifactlink_field_id,\n            $prefill_removed_values,\n            $prefill_types,\n            $only_rows,\n            $read_only\n        );\n\n        //Display range\n        if ($total_rows > 0) {\n            $offset_last = min($offset + $this->chunksz - 1, $total_rows - 1);\n            $html       .= '<div class=\"tracker_report_table_pager\">';\n            $html       .= $this->fetchRange($offset + 1, $offset_last + 1, $total_rows, $this->fetchWidgetGoToReport());\n            $html       .= '</div>';\n        } else {\n            $html .= $this->fetchWidgetGoToReport();\n        }\n\n        return $html;\n    }\n\n    private function fetchMatchingNumber($total_rows)\n    {\n        $html = '<p>' . sprintf(dgettext('tuleap-tracker', 'Matching artifacts: <strong>%1$s</strong>'), $total_rows) . '</p>';\n        return $html;\n    }\n\n    private function fetchSort()\n    {\n        $purifier     = Codendi_HTMLPurifier::instance();\n        $html         = '<div class=\"tracker_report_table_sortby_panel\">';\n        $sort_columns = $this->getSort();\n        if ($this->sortHasUsedField()) {\n            $html .= dgettext('tuleap-tracker', 'Sort by:');\n            $html .= ' ';\n            $sort  = [];\n            foreach ($sort_columns as $row) {\n                if ($row['field'] && $row['field']->isUsed()) {\n                    $sort[] = '<a id=\"tracker_report_table_sort_by_' . $purifier->purify($row['field_id']) . '\"\n                                  href=\"?' .\n                            $purifier->purify(http_build_query([\n                                                   'report'                  => $this->report->id,\n                                                   'renderer'                => $this->id,\n                                                   'func'                    => 'renderer',\n                                                   'renderer_table[sort_by]' => $row['field_id'],\n                                                  ])) . '\">' .\n                            $purifier->purify($row['field']->getLabel()) .\n                            $this->getSortIcon($row['is_desc']) .\n                            '</a>';\n                }\n            }\n            $html .= implode(' <i class=\"fa fa-angle-right\"></i> ', $sort);\n        }\n        $html .= '</div>';\n        return $html;\n    }\n\n    private function fetchAddColumn()\n    {\n        $add_columns_presenter = new Templating_Presenter_ButtonDropdownsMini(\n            'tracker_report_add_columns_dropdown',\n            dgettext('tuleap-tracker', 'Columns'),\n            $this->report->getFieldsAsDropdownOptions('tracker_report_add_column', $this->getColumns(), Tracker_Report::TYPE_TABLE)\n        );\n        $add_columns_presenter->setIcon('fa fa-eye-slash');\n\n        return $this->report->getTemplateRenderer()->renderToString('button_dropdowns', $add_columns_presenter);\n    }\n\n    private function fetchRange($from, $to, $total_rows, $additionnal_html)\n    {\n        $html  = '';\n        $html .= '<span class=\"tracker_report_table_pager_range\">';\n        $html .= dgettext('tuleap-tracker', 'Items');\n        $html .= ' <strong>' . $from . '</strong> \u2013 <strong>' . $to . '</strong>';\n        $html .= ' ' . dgettext('tuleap-tracker', 'of') . ' <strong>' . $total_rows . '</strong>';\n        $html .= $additionnal_html;\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    private function fetchNextPrevious($total_rows, $offset, $report_can_be_modified, $link_artifact_id = null)\n    {\n        $html = '';\n        if ($total_rows) {\n            $parameters = [\n                'report'   => $this->report->id,\n                'renderer' => $this->id,\n            ];\n            if ($link_artifact_id) {\n                $parameters['link-artifact-id'] = (int) $link_artifact_id;\n                $parameters['only-renderer']    = 1;\n            }\n            //offset should be the last parameter to ease the concat later\n            $parameters['offset'] = '';\n            $url                  = '?' . http_build_query($parameters);\n\n            $chunk  = '<span class=\"tracker_report_table_pager_chunk\">';\n            $chunk .= dgettext('tuleap-tracker', 'Items per page :');\n            $chunk .= ' ';\n            if ($report_can_be_modified) {\n                $chunk .= '<div class=\"input-append\">';\n                $chunk .= '<input id=\"renderer_table_chunksz_input\" type=\"text\" name=\"renderer_table[chunksz]\" size=\"1\" maxlength=\"5\" value=\"' . (int) $this->chunksz . '\" />';\n                $chunk .= '<button type=\"submit\" class=\"btn btn-small\">Ok</button> ';\n                $chunk .= '</div> ';\n            } else {\n                $chunk .= (int) $this->chunksz;\n            }\n            $chunk .= '</span>';\n\n            $html .= $this->fetchFormStart('tracker_report_table_next_previous_form');\n            $html .= '<div class=\"tracker_report_table_pager\">';\n            if ($total_rows < $this->chunksz) {\n                $html .= $this->fetchRange(1, $total_rows, $total_rows, $chunk);\n            } else {\n                if ($offset > 0) {\n                    $html .= $this->getPagerButton($url . 0, 'begin');\n                    $html .= $this->getPagerButton($url . ($offset - $this->chunksz), 'prev');\n                } else {\n                    $html .= $this->getDisabledPagerButton('begin');\n                    $html .= $this->getDisabledPagerButton('prev');\n                }\n\n                $offset_last = min($offset + $this->chunksz - 1, $total_rows - 1);\n                $html       .= $this->fetchRange($offset + 1, $offset_last + 1, $total_rows, $chunk);\n\n                if (($offset + $this->chunksz) < $total_rows) {\n                    if ($this->chunksz > 0) {\n                        $offset_end = ($total_rows - ($total_rows % $this->chunksz));\n                    } else {\n                        $offset_end = PHP_INT_MAX; //weird! it will take many steps to reach the last page if the user is browsing 0 artifacts at once\n                    }\n                    if ($offset_end >= $total_rows) {\n                        $offset_end -= $this->chunksz;\n                    }\n                    $html .= $this->getPagerButton($url . ($offset + $this->chunksz), 'next');\n                    $html .= $this->getPagerButton($url . $offset_end, 'end');\n                } else {\n                    $html .= $this->getDisabledPagerButton('next');\n                    $html .= $this->getDisabledPagerButton('end');\n                }\n            }\n            $html .= '</div>';\n            $html .= '</form>';\n        }\n        return $html;\n    }\n\n    private function getDisabledPagerButton($direction)\n    {\n        $icons = [\n            'begin' => 'fa fa-angle-double-left',\n            'end'   => 'fa fa-angle-double-right',\n            'prev'  => 'fa fa-angle-left',\n            'next'  => 'fa fa-angle-right',\n        ];\n        $title = [\n            'begin' => $GLOBALS['Language']->getText('global', 'begin'),\n            'end'   => $GLOBALS['Language']->getText('global', 'end'),\n            'prev'  => $GLOBALS['Language']->getText('global', 'prev'),\n            'next'  => $GLOBALS['Language']->getText('global', 'next'),\n        ];\n        $html  = '';\n        $html .= '<button\n            class=\"btn disabled\"\n            type=\"button\"\n            title=\"' . $title[$direction] . '\"\n            >';\n        $html .= '<i class=\"' . $icons[$direction] . '\"></i>';\n        $html .= '</button> ';\n\n        return $html;\n    }\n\n    private function getPagerButton($url, $direction)\n    {\n        $icons = [\n            'begin' => 'fa fa-angle-double-left',\n            'end'   => 'fa fa-angle-double-right',\n            'prev'  => 'fa fa-angle-left',\n            'next'  => 'fa fa-angle-right',\n        ];\n        $title = [\n            'begin' => $GLOBALS['Language']->getText('global', 'begin'),\n            'end'   => $GLOBALS['Language']->getText('global', 'end'),\n            'prev'  => $GLOBALS['Language']->getText('global', 'prev'),\n            'next'  => $GLOBALS['Language']->getText('global', 'next'),\n        ];\n        $html  = '';\n        $html .= '<a\n            href=\"' . $url . '\"\n            class=\"btn\"\n            title=\"' . $title[$direction] . '\"\n            >';\n        $html .= '<i class=\"' . $icons[$direction] . '\"></i>';\n        $html .= '</a> ';\n\n        return $html;\n    }\n\n    protected function reorderColumnsByRank($columns)\n    {\n        $array_rank = [];\n        foreach ($columns as $key => $properties) {\n            $array_rank[$key] = $properties['rank'];\n        }\n        asort($array_rank);\n        $columns_sort = [];\n        foreach ($array_rank as $key => $rank) {\n            $columns_sort[$key] = $columns[$key];\n        }\n        return $columns_sort;\n    }\n\n    public const NO_EXTRACOLUMN         = 0;\n    public const EXTRACOLUMN_MASSCHANGE = 1;\n    public const EXTRACOLUMN_LINK       = 2;\n    public const EXTRACOLUMN_UNLINK     = 3;\n\n    private function fetchTHead($extracolumn = 1, $only_one_column = null, $with_sort_links = true, $use_data_from_db = false, $id_suffix = '', $store_in_session = true, $is_type_col = false)\n    {\n        $current_user = UserManager::instance()->getCurrentUser();\n\n        $html  = '';\n        $html .= '<table';\n        if (! $only_one_column) {\n            $html .= ' id=\"tracker_report_table' . $id_suffix . '\"  width=\"100%\" data-test=\"artifact-report-table\"';\n        }\n\n        $classnames = '';\n        if ($with_sort_links && ! $current_user->isAnonymous()) {\n            $classnames .= ' reorderable resizable';\n        }\n        $html .= ' class=\"tracker_report_table table tlp-table ' . $classnames . '\"';\n\n        $html .= '>';\n\n        $html .= '<thead class=\"table-sticky-header\">';\n\n        $html .= '<tr>';\n\n        if ($extracolumn) {\n            $display_extracolumn = true;\n            $classname           = 'tracker_report_table_';\n            $content             = '&nbsp';\n            if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                $classname .= 'masschange';\n            } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                $classname .= 'link';\n            } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                $classname .= 'unlink';\n                $content    = '<input type=\"checkbox\" disabled title=\"' . dgettext('tuleap-tracker', 'Mark all links to be removed') . '\" class=\"tracker-artifact-link-mass-unlink\">';\n            } else {\n                $display_extracolumn = false;\n            }\n\n            if ($display_extracolumn) {\n                $html .= '<th class=\"' . $classname . '\">' . $content . '</th>';\n            }\n        }\n\n        //the link to the artifact\n        if (! $only_one_column) {\n            $html .= '<th></th>';\n        }\n\n        $ff  = $this->getFieldFactory();\n        $url = '?' . http_build_query([\n                                           'report'                  => $this->report->id,\n                                           'renderer'                => $this->id,\n                                           'func'                    => 'renderer',\n                                           'renderer_table[sort_by]' => '',\n                                          ]);\n        if ($use_data_from_db) {\n            $all_columns = $this->reorderColumnsByRank($this->getColumnsFromDb());\n        } else {\n            $all_columns = $this->reorderColumnsByRank($this->getColumns());\n        }\n        if ($only_one_column) {\n            if (isset($all_columns[$only_one_column])) {\n                $columns = [$only_one_column => $all_columns[$only_one_column]];\n            } else {\n                $columns = [$only_one_column => [\n                    'width' => 0,\n                    'field' => $ff->getUsedFormElementById($only_one_column),\n                ]];\n            }\n        } else {\n            $columns = $all_columns;\n        }\n        $sort_columns = $this->getSort($store_in_session);\n\n        $purifier               = Codendi_HTMLPurifier::instance();\n        $type_presenter_factory = $this->getTypePresenterFactory();\n        foreach ($columns as $key => $column) {\n            if ($column['width']) {\n                $width = 'width=\"' . $purifier->purify($column['width'] . '%') . '\"';\n            } else {\n                $width = '';\n            }\n            if (! empty($column['field']) && $column['field']->isUsed()) {\n                $data_type        = '';\n                $data_type_format = '';\n                if (isset($column['artlink_nature'])) {\n                    $data_type = 'data-field-artlink-type=\"' . $purifier->purify($column['artlink_nature']) . '\"';\n                }\n                if (isset($column['artlink_nature_format'])) {\n                    $data_type_format = 'data-field-artlink-type-format=\"' . $purifier->purify($column['artlink_nature_format']) . '\"';\n                }\n                $html .= '<th class=\"tracker_report_table_column\"\n                    id=\"tracker_report_table_column_' . $purifier->purify($key) . '\"\n                    data-column-id=\"' . $purifier->purify($key) . '\"\n                    data-field-id=\"' . $purifier->purify($column['field']->id) . '\"\n                    ' . $data_type . '\n                    ' . $data_type_format . '\n                    ' . $width . '>';\n\n                $field_label = $column['field']->getLabel();\n                if (isset($column['artlink_nature'])) {\n                    $type = $type_presenter_factory->getFromShortname($column['artlink_nature']);\n                    if ($type) {\n                        $type_label = $type->forward_label;\n                        if (! $type_label) {\n                            $type_label = dgettext('tuleap-tracker', 'No type');\n                        }\n                        $field_label .= $purifier->purify(\" ($type_label)\");\n                    }\n                }\n                $label = $purifier->purify($field_label);\n\n                if ($with_sort_links) {\n                    $sort_url = $url . $column['field']->id;\n\n                    $html .= '<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr>';\n\n                    if (! $current_user->isAnonymous()) {\n                        $html .= '<td class=\"tracker_report_table_column_grip\">&nbsp;&nbsp;</td>';\n                    }\n\n                    $html .= '<td class=\"tracker_report_table_column_title\">';\n                    if (! isset($column['artlink_nature']) && $column['field']->canBeUsedToSortReport()) {\n                        $html .= '<a href=\"' . $purifier->purify($sort_url) . '\">';\n                        $html .= $label;\n                        $html .= '</a>';\n                    } else {\n                        $html .= $label;\n                    }\n                    $html .= '</td>';\n\n                    if (! isset($column['artlink_nature']) && isset($sort_columns[$key])) {\n                        $html .= '<td class=\"tracker_report_table_column_caret\">';\n                        if ($column['field']->canBeUsedToSortReport()) {\n                            $html .= '<a href=\"' . $purifier->purify($sort_url) . '\">';\n                            $html .= $this->getSortIcon($sort_columns[$column['field']->getId()]['is_desc']);\n                            $html .= '</a>';\n                        } else {\n                            $warning_message = dgettext(\n                                'tuleap-tracker',\n                                'The report was sorted against this column. This column can not be used to sort a report, the sort has been ignored. Please choose another column.'\n                            );\n                            $html           .= '<i class=\"fa fa-exclamation-triangle\" title=\"' . $warning_message . '\"></i>';\n                        }\n                        $html .= '</td>';\n                    }\n\n                    if (isset($column['artlink_nature']) && ! $current_user->isAnonymous()) {\n                        $column_editor_popover_placement = 'bottom';\n\n                        if (end($columns) === $column) {\n                            $column_editor_popover_placement = 'left';\n                        }\n\n                        $html .= '<td class=\"tracker_report_table_column_type_editor\">';\n                        $html .= '<a href=\"#\" class=\"type-column-editor\" data-placement=\"' . $column_editor_popover_placement . '\"><i class=\"fa fa-cog\"></i></a>';\n                        $html .= '</td>';\n                    }\n\n                    $html .= '</tr></tbody></table>';\n                } else {\n                    $html .= $label;\n                }\n                $html .= '</th>';\n            }\n        }\n        if ($is_type_col) {\n            $type_label = dgettext('tuleap-tracker', 'Type');\n            $html      .= \"<th>$type_label</th>\";\n        }\n        $html .= '</tr>';\n        $html .= '</thead>';\n        return $html;\n    }\n\n    private function fetchAdditionnalButton()\n    {\n        $is_a_table_renderer = true;\n\n        $html = $this->getTemplateRenderer()->renderToString(\n            'widget-additionnal-button',\n            new WidgetAdditionalButtonPresenter(\n                $this->report->getTracker(),\n                $is_a_table_renderer\n            )\n        );\n\n        return $html;\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR . '/report');\n    }\n\n    public function getTableColumns($only_one_column, $use_data_from_db, $store_in_session = true)\n    {\n        $columns = [];\n        if ($use_data_from_db) {\n            $all_columns = $this->reorderColumnsByRank($this->getColumnsFromDb());\n        } else {\n            $all_columns = $this->reorderColumnsByRank($this->getColumns());\n        }\n        if ($only_one_column) {\n            if (isset($all_columns[$only_one_column])) {\n                $columns = [$only_one_column => $all_columns[$only_one_column]];\n            } else {\n                $columns = [$only_one_column => [\n                    'width' => 0,\n                    'field' => $this->getFieldFactory()->getUsedFormElementFieldById($only_one_column),\n                ]];\n            }\n        } else {\n            $columns = $all_columns;\n        }\n        return $columns;\n    }\n\n    /**\n     * Display the body of the table\n     *\n     * @param array $matching_ids           The matching ids to display array('id' => '\"1,4,8,10\", 'last_matching_ids' => \"123,145,178,190\")\n     * @param int   $total_rows             The number of total rows (pagination powwwa)\n     * @param int   $offset                 The offset of the pagination\n     * @param int   $extracolumn            Need for an extracolumn? NO_EXTRACOLUMN | EXTRACOLUMN_MASSCHANGE | EXTRACOLUMN_LINK | EXTRACOLUMN_UNLINK. Default is EXTRACOLUMN_MASSCHANGE.\n     * @param int   $only_one_column        The column (field_id) to display. null if all columns are needed. Default is null\n     * @param bool  $use_data_from_db       true if we need to retrieve data from the db instead of the session. Default is false.\n     * @param bool  $pagination             true if we display the pagination. Default is true.\n     * @param int   $artifactlink_field_id  The artifactlink field id. Needed to display report in ArtifactLink field. Default is null\n     * @param array $prefill_removed_values Array of artifact_id to pre-check. array(123 => X, 345 => X, ...). Default is null\n     * @param bool  $only_rows              Display only rows, no aggregates or stuff like that. Default is false.\n     * @param bool  $read_only              Display the table in read only mode. Default is false.\n     *\n     * @return string html\n     */\n    private function fetchTBody(\n        $matching_ids,\n        $total_rows,\n        array $queries,\n        array $columns,\n        $offset,\n        $extracolumn = 1,\n        $only_one_column = null,\n        $use_data_from_db = false,\n        $pagination = true,\n        $artifactlink_field_id = null,\n        $prefill_removed_values = null,\n        $prefill_types = [],\n        $only_rows = false,\n        $read_only = false,\n        $from_aid = null,\n    ) {\n        $html = '';\n        if (! $only_rows) {\n            $html                .= \"\\n<!-- table renderer body -->\\n\";\n            $html                .= '<tbody>';\n            $additional_classname = '';\n        } else {\n            $additional_classname = 'additional';\n        }\n        if ($total_rows) {\n            $dao     = new DataAccessObject();\n            $results = [];\n            foreach ($queries as $sql) {\n                //Limit\n                if ($total_rows > $this->chunksz && $pagination) {\n                    $sql .= \" LIMIT \" . (int) $offset . \", \" . (int) $this->chunksz;\n                }\n                $results[] = $dao->retrieve($sql);\n            }\n            // test if first result is valid (if yes, we consider that others are valid too)\n            if (! empty($results[0])) {\n                $current_user                 = UserManager::instance()->getCurrentUser();\n                $artifact_factory             = Tracker_ArtifactFactory::instance();\n                $is_parent_selector_displayed = false;\n                if ($from_aid) {\n                    $artifact = $artifact_factory->getArtifactById((int) $from_aid);\n                    if ($artifact && $artifact->getParentWithoutPermissionChecking() === null) {\n                        $retriever = new PossibleParentsRetriever($artifact_factory, EventManager::instance());\n\n                        $possible_parents_selector = $retriever->getPossibleArtifactParents(\n                            $artifact->getTracker(),\n                            $current_user,\n                            0,\n                            0,\n                            false,\n                        );\n\n                        $is_parent_selector_displayed = $possible_parents_selector->isSelectorDisplayed();\n                    }\n                }\n\n                $renderer = TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n                $purifier = Codendi_HTMLPurifier::instance();\n                //extract the first results\n                $first_result = array_shift($results);\n                //loop through it\n                foreach ($first_result as $row) { //id, f1, f2\n                    //merge the row with the other results\n                    foreach ($results as $result) {\n                        if ($result === false) {\n                            continue;\n                        }\n                        //[id, f1, f2] + [id, f3, f4]\n                        $row = array_merge($row, $result->getRow());\n                        //row == id, f1, f2, f3, f4...\n                    }\n                    $html .= '<tr class=\"' . $additional_classname . '\" data-test=\"tracker-report-table-results-artifact\">';\n                    if ($extracolumn) {\n                        $display_extracolumn = true;\n                        $checked             = '';\n                        $classname           = 'tracker_report_table_';\n                        $name                = '';\n                        if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                            $classname .= 'masschange';\n                            $name       = 'masschange_aids';\n                        } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                            $classname .= 'link';\n                            $name       = 'link-artifact[search]';\n                        } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                            $classname .= 'unlink';\n                            $name       = 'artifact[' . (int) $artifactlink_field_id . '][removed_values][' . $row['id'] . ']';\n                            if (isset($prefill_removed_values[$row['id']])) {\n                                $checked = 'checked=\"checked\"';\n                            }\n                        } else {\n                            $display_extracolumn = false;\n                        }\n\n                        if ($display_extracolumn) {\n                            $html .= '<td class=\"' . $purifier->purify($classname) . '\" width=\"1\">';\n                            $html .= '<span><input type=\"checkbox\" name=\"' . $purifier->purify($name) . '[]\" value=\"' . $purifier->purify($row['id']) . '\" ' . $checked . ' /></span>';\n                            $html .= '</td>';\n                        }\n                    }\n                    if (! $only_one_column) {\n                        $params = [\n                            'aid' => $row['id'],\n                        ];\n                        if ($from_aid != null) {\n                            $params['from_aid'] = $from_aid;\n                        }\n                        $url = TRACKER_BASE_URL . '/?' . http_build_query($params);\n\n                        $html .= '<td>';\n                        $html .= '<a\n                            class=\"direct-link-to-artifact\"\n                            data-test=\"direct-link-to-artifact\"\n                            href=\"' . $purifier->purify($url) . '\"\n                            title=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Show') . ' artifact #' . $row['id']) . '\">';\n                        $html .= '<i class=\"fa fa-edit\"></i>';\n                        $html .= '</td>';\n                    }\n                    foreach ($columns as $key => $column) {\n                        if ($column['field']->isUsed()) {\n                            $field_name = $column['field']->name;\n                            $value      = isset($row[$field_name]) ? $row[$field_name] : null;\n                            $html      .= '<td data-column-id=\"' . $purifier->purify($key) . '\">';\n\n                            if (isset($column['artlink_nature'])) {\n                                $html .= $column['field']->fetchChangesetValueForType(\n                                    $row['id'],\n                                    $row['changeset_id'],\n                                    $value,\n                                    $column['artlink_nature'],\n                                    $column['artlink_nature_format'],\n                                    $this->report,\n                                    $from_aid\n                                );\n                            } else {\n                                $html .= $column['field']->fetchChangesetValue(\n                                    $row['id'],\n                                    $row['changeset_id'],\n                                    $value,\n                                    $this->report,\n                                    $from_aid\n                                );\n                            }\n                            $html .= '</td>';\n                        }\n                    }\n                    $artifact_id = $row['id'];\n                    if (isset($matching_ids['type'][$artifact_id])) {\n                        $type          = $matching_ids['type'][$artifact_id];\n                        $forward_label = $purifier->purify($type->forward_label);\n                        $html         .= '<td class=\"tracker_formelement_read_and_edit_read_section\">' . $forward_label . '</td>';\n                        if (! $read_only) {\n                            $project         = $this->report->getTracker()->getProject();\n                            $types           = $this->getAllUsableTypesInProjectWithCache($project);\n                            $types_presenter = [];\n                            $selected_type   = $type->shortname;\n                            if (isset($prefill_types[$artifact_id])) {\n                                $selected_type = $prefill_types[$artifact_id];\n                            }\n                            $is_a_usable_type_selected = false;\n                            foreach ($types as $type) {\n                                $should_select_current_type = $selected_type === $type->shortname;\n                                $is_a_usable_type_selected  = $is_a_usable_type_selected || $should_select_current_type;\n                                $types_presenter[]          = [\n                                    'shortname'     => $type->shortname,\n                                    'forward_label' => $type->forward_label,\n                                    'is_selected'   => $should_select_current_type,\n                                ];\n\n                                if ($is_parent_selector_displayed) {\n                                    continue;\n                                }\n\n                                if ($type->shortname === \\Tracker_FormElement_Field_ArtifactLink::TYPE_IS_CHILD) {\n                                    $should_select_current_type = \\Tracker_FormElement_Field_ArtifactLink::FAKE_TYPE_IS_PARENT === $selected_type;\n                                    $is_a_usable_type_selected  = $is_a_usable_type_selected || $should_select_current_type;\n                                    $types_presenter[]          = [\n                                        'shortname'     => \\Tracker_FormElement_Field_ArtifactLink::FAKE_TYPE_IS_PARENT,\n                                        'forward_label' => $type->reverse_label,\n                                        'is_selected'   => $should_select_current_type,\n                                    ];\n                                }\n                            }\n\n                            if (! $is_a_usable_type_selected) {\n                                $type = $this->getTypePresenterFactory()->getTypeEnabledInProjectFromShortname($project, $selected_type);\n                                if ($type !== null) {\n                                    $types_presenter[] = [\n                                        'shortname'     => $type->shortname,\n                                        'forward_label' => $type->forward_label,\n                                        'is_selected'   => true,\n                                    ];\n                                }\n                            }\n\n                            $name  = \"artifact[{$artifactlink_field_id}][types][{$row['id']}]\";\n                            $html .= '<td class=\"tracker_formelement_read_and_edit_edition_section\">';\n                            $html .= $renderer->renderToString(\n                                'artifactlink-type-selector',\n                                new TypeSelectorPresenter($types_presenter, $name, '')\n                            );\n                            $html .= '</td>';\n                        }\n                    }\n                    $html .= '</tr>';\n                }\n                if (! $only_rows) {\n                    $html .= $this->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only);\n                }\n            }\n        } else {\n            $html .= '<tr class=\"tracker_report_table_no_result\" data-test=\"tracker-report-table-empty-state\">\n                          <td class=\"tlp-table-cell-empty table-cell-empty\" colspan=\"' . (count($this->getColumns()) + 2)\n                          . '\" align=\"center\">' . dgettext('tuleap-tracker', 'No activity yet') . '\n                          </td>\n                      </tr>';\n        }\n        if (! $only_rows) {\n            $html .= '</tbody>';\n            $html .= '</table>';\n        }\n        return $html;\n    }\n\n    private function getAllUsableTypesInProjectWithCache(Project $project)\n    {\n        static $all_types_project_cache = [];\n        if (isset($all_types_project_cache[$project->getID()])) {\n            return $all_types_project_cache[$project->getID()];\n        }\n        $type_presenter_factory                     = $this->getTypePresenterFactory();\n        $all_types                                  = $type_presenter_factory->getAllUsableTypesInProject($project);\n        $all_types_project_cache[$project->getID()] = $all_types;\n        return $all_types;\n    }\n\n    public function fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only)\n    {\n        $html = '';\n\n        //We presume that if EXTRACOLUMN_LINK then it means that we are in the ArtifactLink selector so we force read only mode\n        if ($extracolumn === self::EXTRACOLUMN_LINK) {\n            $read_only = true;\n        }\n\n        $current_user = UserManager::instance()->getCurrentUser();\n        //Insert function aggregates\n        if ($use_data_from_db) {\n            $aggregate_functions_raw = [$this->getAggregatesDao()->searchByRendererId($this->getId())];\n        } else {\n            $aggregate_functions_raw = $this->getAggregates();\n        }\n        $aggregates = [];\n        foreach ($aggregate_functions_raw as $rows) {\n            if ($rows) {\n                foreach ($rows as $row) {\n                    //is the field used as a column?\n                    if (isset($columns[$row['field_id']])) {\n                        if (! isset($aggregates[$row['field_id']])) {\n                            $aggregates[$row['field_id']] = [];\n                        }\n                        $aggregates[$row['field_id']][] = $row['aggregate'];\n                    }\n                }\n            }\n        }\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, '', false);\n        $dao     = new DataAccessObject();\n        $results = [];\n        foreach ($queries as $key => $sql) {\n            if ($key === 'aggregates_group_by') {\n                foreach ($sql as $k => $s) {\n                    $results[$k] = $dao->retrieve($s);\n                }\n            } else {\n                if ($dar = $dao->retrieve($sql)) {\n                    $results = array_merge($results, $dar->getRow());\n                }\n            }\n        }\n\n        $is_first = true;\n        $html    .= '<tr valign=\"top\" class=\"tracker_report_table_aggregates\">';\n        $html    .= $this->fetchAggregatesExtraColumns($extracolumn, $only_one_column, $current_user);\n        foreach ($columns as $key => $column) {\n            $field = $column['field'];\n            if (! $field->isUsed()) {\n                continue;\n            }\n\n            $html  .= '<td data-column-id=\"' . $key . '\">';\n            $html  .= '<table><thead><tr>';\n            $html  .= $this->fetchAddAggregatesUsedFunctionsHeader($field, $aggregates, $results);\n            $html  .= '<th>';\n            $html  .= $this->fetchAddAggregatesButton($read_only, $field, $current_user, $aggregates, $is_first);\n            $html  .= '</th>';\n            $html  .= '</tr></thead><tbody><tr>';\n            $result = $this->fetchAddAggregatesUsedFunctionsValue($field, $aggregates, $results);\n            if (! $result) {\n                $html .= '<td></td>';\n            }\n            $html .= $result;\n            $html .= '</tr></tbody></table>';\n            $html .= '</td>';\n\n            $is_first = false;\n        }\n        if (isset($matching_ids['type'])) {\n            $html .= '<td><table><thead><tr><th></th></tr></thead><tbody><tr></tr></tbody></table></td>';\n        }\n        $html .= '</tr>';\n\n        return $html;\n    }\n\n    private function fetchAddAggregatesUsedFunctionsHeader(\n        Tracker_FormElement_Field $field,\n        array $used_aggregates,\n        array $results,\n    ) {\n        if (! isset($used_aggregates[$field->getId()])) {\n            return '';\n        }\n\n        $html = '';\n        foreach ($used_aggregates[$field->getId()] as $function) {\n            if (! isset($results[$field->getName() . '_' . $function])) {\n                continue;\n            }\n\n            $html .= '<th>';\n            $html .= $this->getAggregateLabel($function);\n            $html .= '</th>';\n        }\n\n        return $html;\n    }\n\n    private function getAggregateLabel(string $function): string\n    {\n        switch ($function) {\n            case 'AVG':\n                return dgettext('tuleap-tracker', 'Average');\n            case 'COUNT':\n                return dgettext('tuleap-tracker', 'Count');\n            case 'COUNT_GRBY':\n                return dgettext('tuleap-tracker', 'Count (group by)');\n            case 'MAX':\n                return dgettext('tuleap-tracker', 'Maximum');\n            case 'MIN':\n                return dgettext('tuleap-tracker', 'Minimum');\n            case 'STD':\n                return dgettext('tuleap-tracker', 'Std deviation');\n            case 'SUM':\n            default:\n                return dgettext('tuleap-tracker', 'Sum');\n        }\n    }\n\n    private function fetchAddAggregatesUsedFunctionsValue(\n        Tracker_FormElement_Field $field,\n        array $used_aggregates,\n        array $results,\n    ) {\n        if (! isset($used_aggregates[$field->getId()])) {\n            return '';\n        }\n\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        foreach ($used_aggregates[$field->getId()] as $function) {\n            $result_key = $field->getName() . '_' . $function;\n            if (! isset($results[$result_key])) {\n                continue;\n            }\n\n            $result = $results[$result_key];\n            $html  .= '<td>';\n            if ($field->hasCustomFormatForAggregateResults()) {\n                $html .= $field->formatAggregateResult($function, $result);\n            } else {\n                if ($result instanceof LegacyDataAccessResultInterface) {\n                    if ($row = $result->getRow()) {\n                        if (isset($row[$result_key])) {\n                            //this case is for multiple selectbox/count\n                            $html .= '<label  class=\"tracker-aggregate-single-line\">';\n                            $html .= $this->formatAggregateResult($row[$result_key]);\n                            $html .= '<label>';\n                        } else {\n                            foreach ($result as $row) {\n                                $html .= '<label  class=\"tracker-aggregate-single-line\">';\n                                if ($row['label'] === null) {\n                                    $html .= '<em>' . $GLOBALS['Language']->getText('global', 'null') . '</em>';\n                                } else {\n                                    $html .= $hp->purify($row['label']);\n                                }\n                                $html .= ':&nbsp;';\n                                $html .= $this->formatAggregateResult($row['value']);\n                                $html .= '</label>';\n                            }\n                        }\n                    }\n                } else {\n                    $html .= '<label>';\n                    $html .= $this->formatAggregateResult($result);\n                    $html .= '<label>';\n                }\n            }\n            $html .= '</td>';\n        }\n\n        return $html;\n    }\n\n    private function fetchAddAggregatesButton(\n        $read_only,\n        Tracker_FormElement_Field $field,\n        PFUser $current_user,\n        array $used_aggregates,\n        $is_first,\n    ) {\n        $aggregate_functions = $field->getAggregateFunctions();\n\n        if ($read_only || $current_user->isAnonymous()) {\n            return;\n        }\n\n        if (! $aggregate_functions) {\n            return;\n        }\n\n        $html  = '';\n        $html .= '<div class=\"btn-group\">';\n        $html .= '<a href=\"#\"\n            class=\"btn btn-mini dropdown-toggle\"\n            title=\"' . dgettext('tuleap-tracker', 'Toggle an aggregate function') . '\"\n            data-toggle=\"dropdown\">';\n        $html .= '<i class=\"fa fa-plus\"></i> ';\n        $html .= '<span class=\"caret\"></span>';\n        $html .= '</a>';\n        $html .= '<ul class=\"dropdown-menu ' . ($is_first ? '' : 'pull-right') . '\">';\n        foreach ($aggregate_functions as $function) {\n            $is_used = isset($used_aggregates[$field->getId()]) && in_array($function, $used_aggregates[$field->getId()]);\n            $url     = $this->getAggregateURL($field, $function);\n            $html   .= '<li>';\n            $html   .= '<a href=\"' . $url . '\">';\n            if ($is_used) {\n                $html .= '<i class=\"fa fa-check\"></i> ';\n            }\n            $html .= $this->getAggregateLabel($function);\n            $html .= '</a>';\n            $html .= '</li>';\n        }\n        $html .= '</ul>';\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function getAggregateURL($field, $function)\n    {\n        $field_id = $field->getId();\n        $params   = [\n            'func'       => 'renderer',\n            'report'     => $this->report->getId(),\n            'renderer'   => $this->getId(),\n            'renderer_table' => [\n                'add_aggregate' => [\n                    $field_id => $function,\n                ],\n            ],\n        ];\n        return TRACKER_BASE_URL . '/?' . http_build_query($params);\n    }\n\n    private function fetchAggregatesExtraColumns($extracolumn, $only_one_column, PFUser $current_user)\n    {\n        $html        = '';\n        $inner_table = '<table><thead><tr><th></th></tr></thead></table>';\n        if ($extracolumn) {\n            $display_extracolumn = true;\n            $classname           = 'tracker_report_table_';\n            if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                $classname .= 'masschange';\n            } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                $classname .= 'link';\n            } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                $classname .= 'unlink';\n            } else {\n                $display_extracolumn = false;\n            }\n\n            if ($display_extracolumn) {\n                $html .= '<td class=\"' . $classname . '\" width=\"1\">';\n                $html .= $inner_table;\n                $html .= '</td>';\n            }\n        }\n        if (! $only_one_column) {\n            $html .= '<td>' . $inner_table . '</td>';\n        }\n\n        return $html;\n    }\n\n    protected function formatAggregateResult($value)\n    {\n        if (is_numeric($value)) {\n            $decimals = 2;\n            if (round($value) == $value) {\n                $decimals = 0;\n            }\n            $value = round($value, $decimals);\n        } else {\n            $value = Codendi_HTMLPurifier::instance()->purify($value);\n        }\n\n        return '<span class=\"tracker_report_table_aggregates_value\">' . $value . '</span>';\n    }\n\n    /**\n     * Build oredered query\n     *\n     * @param array                       $matching_ids The artifact to display\n     *\n     * @return array of sql queries\n     */\n    public function buildOrderedQuery($matching_ids, $columns, $aggregates = false, $store_in_session = true)\n    {\n        if ($aggregates) {\n            $select = \" SELECT 1 \";\n        } else {\n            $select = \" SELECT a.id AS id, c.id AS changeset_id \";\n        }\n        $da = CodendiDataAccess::instance();\n\n        $changeset_ids = $da->escapeIntImplode(explode(',', $matching_ids['last_changeset_id']));\n\n        $from  = \" FROM tracker_artifact AS a INNER JOIN tracker_changeset AS c ON (c.artifact_id = a.id) \";\n        $where = \" WHERE c.id IN (\" . $changeset_ids . \") \";\n        if ($aggregates) {\n            $group_by = '';\n            $ordering = false;\n        } else {\n            $group_by = ' GROUP BY id ';\n            $ordering = true;\n        }\n\n        $additionnal_select = [];\n        $additionnal_from   = [];\n        $already_seen       = [];\n\n        foreach ($columns as $column) {\n            if (! $column['field']->isUsed()) {\n                continue;\n            }\n\n            if (isset($already_seen[$column['field']->getId()])) {\n                continue;\n            }\n            $already_seen[$column['field']->getId()] = true;\n\n            $sel = false;\n            if ($aggregates) {\n                if (isset($aggregates[$column['field']->getId()])) {\n                    if ($a = $column['field']->getQuerySelectAggregate($aggregates[$column['field']->getId()])) {\n                        $sel = $a['same_query'];\n                        if ($sel) {\n                            $additionnal_select[] = $sel;\n                            $additionnal_from[]   = $column['field']->getQueryFromAggregate();\n                        }\n                    }\n                }\n            } else {\n                $sel = $column['field']->getQuerySelect();\n                if ($sel) {\n                    $additionnal_select[] = $sel;\n                    $additionnal_from[]   = $column['field']->getQueryFrom();\n                }\n            }\n        }\n\n        //build an array of queries (due to mysql max join limit\n        $queries         = [];\n        $sys_server_join = ((int) ForgeConfig::get('sys_server_join')) - 3;\n        if ($sys_server_join <= 0) { //make sure that the admin is not dumb\n            $sys_server_join = 20; //default mysql 60 / 3 (max of 3 joins per field)\n        }\n\n        $additionnal_select_chunked = array_chunk($additionnal_select, $sys_server_join);\n        $additionnal_from_chunked   = array_chunk($additionnal_from, $sys_server_join);\n\n        //both arrays are not necessary the same size\n        $n = max(count($additionnal_select_chunked), count($additionnal_from_chunked));\n        for ($i = 0; $i < $n; ++$i) {\n            //init the select and the from...\n            $inner_select = $select;\n            $inner_from   = $from;\n\n            //... and populate them\n            if (isset($additionnal_select_chunked[$i]) && count($additionnal_select_chunked[$i])) {\n                $inner_select .= ', ' . implode(', ', $additionnal_select_chunked[$i]);\n            }\n            if (isset($additionnal_from_chunked[$i]) && count($additionnal_from_chunked[$i])) {\n                $inner_from .= implode(' ', $additionnal_from_chunked[$i]);\n            }\n\n            //build the query\n            $sql = $inner_select . $inner_from . $where . $group_by;\n\n            //add it to the pool\n            $queries[] = $sql;\n        }\n\n        //Add group by aggregates\n        if ($aggregates) {\n            foreach ($columns as $column) {\n                if ($column['field']->isUsed()) {\n                    if (isset($aggregates[$column['field']->getId()])) {\n                        if ($a = $column['field']->getQuerySelectAggregate($aggregates[$column['field']->getId()])) {\n                            foreach ($a['separate_queries'] as $sel) {\n                                $queries['aggregates_group_by'][$column['field']->getName() . '_' . $sel['function']] = \"SELECT \" .\n                                    $sel['select'] .\n                                    $from . ' ' . $column['field']->getQueryFromAggregate() .\n                                    $where .\n                                    ($sel['group_by'] ? \" GROUP BY \" . $sel['group_by'] : '');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        //only sort if we have 1 query\n        // (too complicated to sort on multiple queries)\n        if ($ordering && $this->columnsCanBeTechnicallySorted($queries)) {\n            $sort = $this->getSort($store_in_session);\n            if ($this->sortHasUsedField($store_in_session)) {\n                $order = [];\n                foreach ($sort as $s) {\n                    if (! empty($s['field']) && $s['field']->isUsed()) {\n                        $order[] = $s['field']->getQueryOrderby() . ' ' . ($s['is_desc'] ? 'DESC' : 'ASC');\n                    }\n                }\n                if (! empty($order)) {\n                    $queries[0] .= \" ORDER BY \" . implode(', ', $order);\n                }\n            }\n        }\n        if (empty($queries)) {\n            $queries[] = $select . $from . $where . $group_by;\n        }\n\n        return $queries;\n    }\n\n    private function fetchMassChange($matching_ids, $total_rows, $offset)\n    {\n        $html    = '';\n        $tracker = $this->report->getTracker();\n        if ($tracker->userIsAdmin()) {\n            $nb_art    = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n            $first_row = ($nb_art / $this->chunksz) + $offset;\n            $last_row  = $first_row + $this->chunksz;\n            $html     .= '<form method=\"POST\" action=\"\" id=\"tracker_report_table_masschange_form\">';\n            $html     .= '<input type=\"hidden\" name=\"func\" value=\"display-masschange-form\" />';\n            $html     .= '<div id=\"tracker_report_table_masschange_panel\">';\n            $html     .= '<input id=\"masschange_btn_checked\" type=\"submit\" class=\"btn\" name=\"renderer_table[masschange_checked]\" value=\"' . dgettext('tuleap-tracker', 'Mass Change Checked') . '\" /> ';\n            $html     .= '<input id=\"masschange_btn_all\" type=\"submit\" class=\"btn\" name=\"renderer_table[masschange_all]\" value=\"' . sprintf(dgettext('tuleap-tracker', 'Mass Change All (%1$s artifacts)'), $total_rows) . '\" />';\n            $html     .= '</div>';\n            $html     .= '</form>';\n        }\n        return $html;\n    }\n\n    protected function getFieldFactory()\n    {\n        return Tracker_FormElementFactory::instance();\n    }\n\n    /**\n     * Duplicate the renderer\n     */\n    public function duplicate($from_report_id, $field_mapping, MappingRegistry $mapping_registry): void\n    {\n        //duplicate sort\n        $this->getSortDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n        //duplicate columns\n        $this->getColumnsDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n        //duplicate aggregates\n        $this->getAggregatesDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n    }\n\n    public function getType()\n    {\n        return self::TABLE;\n    }\n\n    /**\n     * Process the request\n     * @param HTTPRequest $request\n     */\n    public function processRequest(TrackerManager $tracker_manager, $request, PFUser $current_user)\n    {\n        $ff = $this->getFieldFactory();\n\n        $renderer_parameters = $request->get('renderer_table');\n        $this->initiateSession();\n        if ($renderer_parameters && is_array($renderer_parameters)) {\n            //Update the chunksz parameter\n            if (isset($renderer_parameters['chunksz'])) {\n                $new_chunksz = abs((int) $renderer_parameters['chunksz']);\n                if ($new_chunksz && ($this->chunksz != $new_chunksz)) {\n                    $this->report_session->set(\"{$this->id}.chunksz\", $new_chunksz);\n                    $this->report_session->setHasChanged();\n                    $this->chunksz = $new_chunksz;\n                }\n            }\n\n            //Add an aggregate function\n            if (isset($renderer_parameters['add_aggregate']) && is_array($renderer_parameters['add_aggregate'])) {\n                $column_id = key($renderer_parameters['add_aggregate']);\n                $agg       = current($renderer_parameters['add_aggregate']);\n                //Is the field used by the tracker?\n                if ($field = $ff->getUsedFormElementById($column_id)) {\n                    //Has the field already an aggregate function?\n                    $aggregates = $this->getAggregates();\n                    if (isset($aggregates[$column_id])) {\n                        //Yes. Check if it has already the wanted aggregate function\n                        $found = false;\n                        foreach ($aggregates[$column_id] as $key => $row) {\n                            if ($row['aggregate'] === $agg) {\n                                $found = true;\n                                //remove it (toggle)\n                                unset($aggregates[$column_id][$key]);\n                                $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", $aggregates[$column_id]);\n                                break;\n                            }\n                        }\n                        if (! $found) {\n                            //Add it\n                            $aggregates[$column_id][] = ['renderer_id' => $this->id, 'field_id' => $column_id, 'aggregate' => $agg];\n                            $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", $aggregates[$column_id]);\n                        }\n                        $this->report_session->setHasChanged();\n                        //TODO\n                    } else {\n                        //No. Add it\n                        $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", [['renderer_id' => $this->id, 'field_id' => $column_id, 'aggregate' => $agg]]);\n                        $this->report_session->setHasChanged();\n                    }\n                }\n            }\n\n            //toggle a sort column\n            if (isset($renderer_parameters['sort_by'])) {\n                $sort_by = (int) $renderer_parameters['sort_by'];\n                if ($sort_by) {\n                    if ($field = $ff->getUsedFormElementById($sort_by)) {\n                        if ($this->isFieldUsedAsColumn($field)) {\n                            //Is the field already used to sort results?\n                            $sort_fields = $this->getSort();\n                            if (isset($sort_fields[$sort_by])) {\n                                $is_desc = &$this->report_session->get(\"{$this->id}.sort.{$sort_by}.is_desc\");\n                                //toggle\n                                $desc = 1;\n                                if ($is_desc == 1) {\n                                    $desc = 0;\n                                }\n                                $this->report_session->set(\"{$this->id}.sort.{$sort_by}.is_desc\", $desc);\n                                $this->report_session->setHasChanged();\n                            } else {\n                                if (! $this->multisort) {\n                                    //Drop existing sort\n                                    foreach ($sort_fields as $id => $sort_field) {\n                                        $this->report_session->remove(\"{$this->id}.sort\", $id);\n                                    }\n                                }\n                                //Add new sort\n                                $sort = $this->report_session->get(\"{$this->id}.sort\");\n                                $rank = 0;\n                                if ($sort !== null) {\n                                    $rank = count($sort);\n                                }\n                                $this->report_session->set(\"{$this->id}.sort.{$sort_by}\", ['is_desc' => 0, 'rank' => $rank]);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Reset sort\n            if (isset($renderer_parameters['resetsort'])) {\n                //Drop existing sort\n                $this->report_session->remove(\"{$this->id}\", \"sort\");\n                $this->report_session->setHasChanged();\n            }\n\n            //Toggle multisort\n            if (isset($renderer_parameters['multisort'])) {\n                $sort_fields     = $this->getSort();\n                $keep_it         = key($sort_fields);\n                $this->multisort = ! $this->multisort;\n                $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n                if (! $this->multisort) {\n                    $sort = $this->report_session->get(\"{$this->id}.sort\");\n                    foreach ($sort as $column_id => $properties) {\n                        if ($column_id != $keep_it) {\n                            $this->report_session->remove(\"{$this->id}.sort\", $column_id);\n                            $this->report_session->setHasChanged();\n                        }\n                    }\n                }\n            }\n\n            //Remove column\n            if (isset($renderer_parameters['remove-column'])) {\n                $column_id = $renderer_parameters['remove-column'];\n                if ($column_id) {\n                    $columns = $this->getColumns();\n                    if (isset($columns[$column_id])) {\n                        //Is the field already used to sort results?\n                        $sort_fields = $this->getSort();\n                        if (isset($sort_fields[$column_id])) {\n                            //remove from session\n                            $this->report_session->remove(\"{$this->id}.sort\", $column_id);\n                            $this->report_session->setHasChanged();\n                        }\n                        //remove from session\n                        $this->report_session->remove(\"{$this->id}.columns\", $column_id);\n                        $this->report_session->setHasChanged();\n                    }\n                }\n            }\n\n            //Add column\n            if (isset($renderer_parameters['add-column']['field-id'])) {\n                if ($field_id = (int) $renderer_parameters['add-column']['field-id']) {\n                    if ($field = $ff->getUsedFormElementById($field_id)) {\n                        $columns      = $this->getColumns();\n                        $key          = $field->getId();\n                        $artlink_type = null;\n                        if (isset($renderer_parameters['add-column']['artlink-type'])) {\n                            $artlink_type = $renderer_parameters['add-column']['artlink-type'];\n                            $key         .= '_' . $artlink_type;\n                        }\n                        if (! isset($columns[$key])) {\n                            $session_table_columns = $this->report_session->get(\"{$this->id}.columns\") ?? [];\n                            $nb_col                = count($session_table_columns);\n                            //Update session with new column\n                            $this->report_session->set(\n                                \"{$this->id}.columns.{$key}\",\n                                [\n                                    'field_id'              => $field_id,\n                                    'width'                 => 12,\n                                    'rank'                  => $nb_col,\n                                    'artlink_nature'        => $artlink_type,\n                                    'artlink_nature_format' => null,\n                                ]\n                            );\n                            $this->report_session->setHasChanged();\n\n                            if ($request->isAjax()) {\n                                $matching_ids     = $this->report->getMatchingIds();\n                                $offset           = (int) $request->get('offset');\n                                $extracolumn      = self::NO_EXTRACOLUMN;\n                                $total_rows       = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n                                $link_artifact_id = (int) $request->get('link-artifact-id');\n\n                                echo $this->fetchTHead($extracolumn, $key, ! $link_artifact_id);\n                                $use_data_from_db = false;\n                                $aggregates       = false;\n                                $store_in_session = true;\n\n                                $columns = $this->getTableColumns($key, $use_data_from_db);\n                                $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n                                echo $this->fetchTBody($matching_ids, $total_rows, $queries, $columns, $offset, $extracolumn, $key);\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Reorder columns\n            if (isset($renderer_parameters['reorder-column']) && is_array($renderer_parameters['reorder-column'])) {\n                $column_id    = key($renderer_parameters['reorder-column']);\n                $new_position = (int) current($renderer_parameters['reorder-column']);\n                if ($column_id) {\n                    $columns = $this->getColumns();\n                    if (isset($columns[$column_id])) {\n                        if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                            $columns = $this->report_session->get(\"{$this->id}.columns\") ?? [];\n                            if ($new_position == '-1') {\n                                //beginning\n                                foreach ($columns as $id => $properties) {\n                                    $columns[$id]['rank'] = $properties['rank'] + 1;\n                                    $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $columns[$id]['rank']);\n                                }\n                                $columns[$column_id]['rank'] = 0;\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.rank\", $columns[$column_id]['rank']);\n                            } elseif ($new_position == '-2') {\n                                //end\n                                $max = 0;\n                                foreach ($columns as $id => $properties) {\n                                    if ($properties['rank'] > $max) {\n                                        $max = $properties['rank'];\n                                    }\n                                    $properties['rank'] = $properties['rank'] - 1;\n                                    $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $properties['rank']);\n                                }\n                                $columns[$column_id]['rank'] = $max + 1;\n                                $this->report_session->set(\n                                    \"{$this->id}.columns.{$column_id}.rank\",\n                                    $columns[$column_id]['rank']\n                                );\n                            } else {\n                                //other case\n                                $replaced_rank = $columns[$new_position]['rank'] + 1;   // rank of the element to shift right\n                                foreach ($columns as $id => $properties) {\n                                    if ($properties['rank'] >= $replaced_rank && $id != $column_id) {\n                                        $columns[$id]['rank'] += 1;\n                                        $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $columns[$id]['rank']);\n                                    }\n                                }\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.rank\", $replaced_rank);\n                                $columns[$column_id]['rank'] = $replaced_rank;\n                            }\n                            $this->report_session->setHasChanged();\n                        }\n                    }\n                }\n            }\n\n            //Resize column\n            if (isset($renderer_parameters['resize-column']) && is_array($renderer_parameters['resize-column'])) {\n                foreach ($renderer_parameters['resize-column'] as $column_id => $new_width) {\n                    $new_width = (int) $new_width;\n                    if ($column_id) {\n                        $columns = $this->getColumns();\n                        if (isset($columns[$column_id])) {\n                            if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.width\", $new_width);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Define format of column\n            if (isset($renderer_parameters['configure-column']) && is_array($renderer_parameters['configure-column'])) {\n                foreach ($renderer_parameters['configure-column'] as $column_id => $format) {\n                    if ($column_id) {\n                        $columns = $this->getColumns();\n                        if (isset($columns[$column_id])) {\n                            if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.artlink_nature_format\", $format);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            //export\n            if (isset($renderer_parameters['export']) && ! $current_user->isAnonymous()) {\n                $event = new ProcessExportEvent($renderer_parameters, $this, $current_user, \\Tuleap\\ServerHostname::HTTPSUrl());\n                EventManager::instance()->processEvent($event);\n                $only_columns = isset($renderer_parameters['export_only_displayed_fields']) && $renderer_parameters['export_only_displayed_fields'];\n                $this->exportToCSV($only_columns);\n            }\n        }\n    }\n\n    private function getFieldWhenUsingTypes(SimpleXMLElement $node, array $field_info, $xmlMapping)\n    {\n        $field = null;\n\n        if (isset($field_info['artlink_nature']) || isset($field_info['artlink_nature_format'])) {\n            $ref = array_search($field_info['field_id'], $xmlMapping);\n            if ($ref) {\n                $field = $node->addChild('field');\n                $field->addAttribute('REF', $ref);\n                if (isset($field_info['artlink_nature'])) {\n                    $field->addAttribute('artlink-nature', $field_info['artlink_nature']);\n                }\n                if (isset($field_info['artlink_nature_format'])) {\n                    $field->addAttribute('artlink-nature-format', $field_info['artlink_nature_format']);\n                }\n            }\n        }\n\n        return $field;\n    }\n\n    private function getField(SimpleXMLElement $node, $exported_field_id, $xmlMapping)\n    {\n        $field = null;\n\n        $ref = array_search($exported_field_id, $xmlMapping);\n        if ($ref) {\n            $field = $node->addChild('field');\n            $field->addAttribute('REF', $ref);\n        }\n\n        return $field;\n    }\n\n    /**\n     * Transforms Tracker_Renderer into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement $root the node to which the renderer is attached (passed by reference)\n     */\n    public function exportToXml(SimpleXMLElement $root, array $xmlMapping)\n    {\n        parent::exportToXml($root, $xmlMapping);\n        $root->addAttribute('chunksz', $this->chunksz);\n        if ($this->multisort) {\n            $root->addAttribute('multisort', $this->multisort);\n        }\n\n        $child = $root->addChild('columns');\n        foreach ($this->getColumns() as $key => $col) {\n            $field = $this->getFieldWhenUsingTypes($child, $col, $xmlMapping);\n            if (! $field) {\n                $field = $this->getField($child, $key, $xmlMapping);\n            }\n        }\n\n        //TODO : add aggregates in XML export\n        /*if ($this->getAggregates()) {\n            $child = $root->addChild('aggregates');\n            foreach ($this->getAggregates() as $field_id => $aggregates) {\n                foreach ($aggregates as $aggregate) {\n                    $child->addChild('aggregate')->addAttribute('REF', array_search($field_id, $xmlMapping))\n                                                 ->addAttribute('function', $aggregate);\n                }\n            }\n        }*/\n\n        if ($this->getSort()) {\n            $child = $root->addChild('sort');\n            foreach ($this->getSort() as $key => $sort) {\n                 $child->addChild('field')->addAttribute('REF', array_search($key, $xmlMapping));\n            }\n        }\n    }\n\n    private function exportHeadAllReportColumns(array $column)\n    {\n        $title = $column['field']->getName();\n        if (isset($column['artlink_nature'])) {\n            $type = $column['artlink_nature'];\n            if (! $type) {\n                $type = dgettext('tuleap-tracker', 'No type');\n            }\n            $title .= \" (\" . $type . \")\";\n        }\n\n        return $title;\n    }\n\n    private function exportHeadReportColumn(array $column)\n    {\n        $head  = [];\n        $title = $column['field']->getName();\n        if ($this->report->getTracker()->isProjectAllowedToUseType()) {\n            if ($this->getFieldFactory()->getType($column['field']) === Tracker_FormElement_Field_ArtifactLink::TYPE) {\n                $head[] = $title;\n                foreach ($this->getTypePresenterFactory()->getAllUsedTypesByProject($this->report->getTracker()->getProject()) as $type) {\n                    if (! $type) {\n                        $type = dgettext('tuleap-tracker', 'No type');\n                    }\n                    $head[] = $title . \" (\" . $type . \")\";\n                }\n            } else {\n                $head[] = $title;\n            }\n        } else {\n            $head[] = $title;\n        }\n\n        return $head;\n    }\n\n    private function exportAllReportColumn(array $column, array $row)\n    {\n        $line = [];\n\n        $value  = isset($row[$column['field']->getName()]) ? $row[$column['field']->getName()] : null;\n        $line[] = $column['field']->fetchCSVChangesetValue($row['id'], $row['changeset_id'], $value, $this->report);\n\n        if (\n            $this->report->getTracker()->isProjectAllowedToUseType() &&\n            $this->getFieldFactory()->getType($column['field']) === Tracker_FormElement_Field_ArtifactLink::TYPE\n        ) {\n            foreach ($this->getTypePresenterFactory()->getAllUsedTypesByProject($this->report->getTracker()->getProject()) as $type) {\n                $line[] = $column['field']->fetchCSVChangesetValueWithType(\n                    $row['changeset_id'],\n                    $type,\n                    ''\n                );\n            }\n        }\n\n        return $line;\n    }\n\n    private function exportReportColumn(array $column, array $row)\n    {\n        $line = [];\n\n        if (isset($column['artlink_nature'])) {\n            $format = isset($column['artlink_nature_format']) ? $column['artlink_nature_format'] : '';\n            $line[] = $column['field']->fetchCSVChangesetValueWithType(\n                $row['changeset_id'],\n                $column['artlink_nature'],\n                $format\n            );\n        } else {\n            $value  = isset($row[$column['field']->getName()]) ? $row[$column['field']->getName()] : null;\n            $line[] = $column['field']->fetchCSVChangesetValue($row['id'], $row['changeset_id'], $value, $this->report);\n        }\n\n        return $line;\n    }\n\n    /**\n     * Export results to csv\n     *\n     * @param bool $only_columns True if we need to export only the displayed columns. False for all the fields.\n     *\n     * @return void\n     */\n    protected function exportToCSV($only_columns)\n    {\n        $matching_ids = $this->report->getMatchingIds();\n\n        if ($only_columns) {\n            $columns = $this->reorderColumnsByRank($this->getColumns());\n        } else {\n            $columns     = [];\n            $used_fields = $this->getFieldFactory()->getUsedFields($this->report->getTracker());\n            foreach ($used_fields as $field) {\n                $columns[]['field'] = $field;\n            }\n        }\n\n        $lines = [];\n        $head  = ['aid'];\n\n        foreach ($columns as $column) {\n            if (! CSVFieldUsageChecker::canFieldBeExportedToCSV($column['field'])) {\n                continue;\n            }\n\n            if ($only_columns) {\n                $head[] = $this->exportHeadAllReportColumns($column);\n            } else {\n                $head = array_merge($head, $this->exportHeadReportColumn($column));\n            }\n        }\n\n        $lines[] = $head;\n\n        $queries = $this->buildOrderedQuery($matching_ids, $columns);\n        $dao     = new DataAccessObject();\n        $results = [];\n        foreach ($queries as $sql) {\n            $results[] = $dao->retrieve($sql);\n        }\n\n        if (! empty($results[0])) {\n            //extract the first results\n            $first_result = array_shift($results);\n\n            foreach ($first_result as $row) { //id, f1, f2\n                //merge the row with the other results\n                foreach ($results as $result) {\n                    if ($result === false) {\n                        continue;\n                    }\n                    //[id, f1, f2] + [id, f3, f4]\n                    $row = array_merge($row, $result->getRow());\n                    //row == id, f1, f2, f3, f4...\n                }\n\n                //build the csv line\n                $line   = [];\n                $line[] = $row['id'];\n\n                foreach ($columns as $column) {\n                    if (! CSVFieldUsageChecker::canFieldBeExportedToCSV($column['field'])) {\n                        continue;\n                    }\n\n                    if ($only_columns) {\n                        $line = array_merge($line, $this->exportReportColumn($column, $row));\n                    } else {\n                        $line = array_merge($line, $this->exportAllReportColumn($column, $row));\n                    }\n                }\n\n                $lines[] = $line;\n            }\n\n            $separator                 = \",\";   // by default, comma.\n            $user                      = UserManager::instance()->getCurrentUser();\n            $separator_csv_export_pref = $user->getPreference('user_csv_separator');\n            switch ($separator_csv_export_pref) {\n                case \"comma\":\n                    $separator = ',';\n                    break;\n                case \"semicolon\":\n                    $separator = ';';\n                    break;\n                case \"tab\":\n                    $separator = chr(9);\n                    break;\n            }\n\n            $http      = Codendi_HTTPPurifier::instance();\n            $file_name = str_replace(' ', '_', 'artifact_' . $this->report->getTracker()->getItemName());\n            header('Content-Disposition: filename=' . $http->purify($file_name) . '_' . $this->report->getTracker()->getProject()->getUnixName() . '.csv');\n            header('Content-type: text/csv');\n            $csv_file = fopen(\"php://output\", \"a\");\n            $this->addBOMToCSVContent($csv_file);\n            foreach ($lines as $line) {\n                fputcsv($csv_file, $line, $separator, '\"');\n            }\n            die();\n        } else {\n            $GLOBALS['Response']->addFeedback('error', 'Unable to export (too many fields?)');\n        }\n    }\n\n    private function addBOMToCSVContent($csv_file)\n    {\n        $bom = (chr(0xEF) . chr(0xBB) . chr(0xBF));\n        fputs($csv_file, $bom);\n    }\n\n    /**\n     * Save columns in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveColumnsRenderer($renderer_id)\n    {\n        $columns = $this->getColumns();\n        if (! is_array($columns)) {\n            return;\n        }\n\n        $type_factory  = $this->getTypePresenterFactory();\n        $field_factory = $this->getFieldFactory();\n        foreach ($columns as $key => $properties) {\n            $field = $field_factory->getUsedFormElementById($properties['field_id']);\n            if (! $field) {\n                continue;\n            }\n\n            $type = $properties['artlink_nature'];\n            if (isset($type) && ! $type_factory->getFromShortname($type)) {\n                continue;\n            }\n\n            $this->getColumnsDao()->create(\n                $renderer_id,\n                $properties['field_id'],\n                $properties['width'],\n                $properties['rank'],\n                $properties['artlink_nature'],\n                $properties['artlink_nature_format']\n            );\n        }\n    }\n\n    /**\n     * Save aggregates in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveAggregatesRenderer($renderer_id)\n    {\n        $aggregates = $this->getAggregates();\n        $ff         = $this->getFieldFactory();\n        //Add columns in db\n        if (is_array($aggregates)) {\n            $dao = $this->getAggregatesDao();\n            foreach ($aggregates as $field_id => $aggs) {\n                if ($field = $ff->getUsedFormElementById($field_id)) {\n                    foreach ($aggs as $agg) {\n                        $dao->create($renderer_id, $field_id, $agg['aggregate']);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Save multisort/chunksz in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveRendererProperties($renderer_id)\n    {\n        $dao = new Tracker_Report_Renderer_TableDao();\n        if (! $dao->searchByRendererId($renderer_id)->getRow()) {\n            $dao->create($renderer_id, $this->chunksz);\n        }\n        $dao->save($renderer_id, $this->chunksz, $this->multisort);\n    }\n\n    /**\n     * Save sort in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveSortRenderer($renderer_id)\n    {\n        $sort = $this->getSort();\n        if (is_array($sort)) {\n            foreach ($sort as $field_id => $properties) {\n                $this->getSortDao()->create($renderer_id, $field_id, $properties['is_desc'], $properties['rank']);\n            }\n        }\n    }\n\n    /**\n     * Create a renderer - add in db\n     *\n     * @return bool true if success, false if failure\n     */\n    public function create()\n    {\n        $success = true;\n        $rrf     = Tracker_Report_RendererFactory::instance();\n\n        if ($renderer_id = $rrf->saveRenderer($this->report, $this->name, $this->description, $this->getType())) {\n            //columns\n            $this->saveColumnsRenderer($renderer_id);\n\n            //aggregates\n            $this->saveAggregatesRenderer($renderer_id);\n\n            //MultiSort/Chunksz\n            $this->saveRendererProperties($renderer_id);\n\n            //Sort\n            $this->saveSortRenderer($renderer_id);\n        }\n        return $success;\n    }\n\n\n    /**\n     * Update the renderer\n     *\n     * @return bool true if success, false if failure\n     */\n    public function update()\n    {\n        $success = true;\n        if ($this->id > 0) {\n            //first delete existing columns and sort\n            $this->getSortDao()->delete($this->id);\n            $this->getColumnsDao()->delete($this->id);\n            $this->getAggregatesDao()->deleteByRendererId($this->id);\n\n            //columns\n            $this->saveColumnsRenderer($this->id);\n\n            //aggregates\n            $this->saveAggregatesRenderer($this->id);\n\n            //MultiSort/Chunksz\n            $this->saveRendererProperties($this->id);\n\n            //Sort\n            $this->saveSortRenderer($this->id);\n        }\n        return $success;\n    }\n\n    /**\n     * Set the session\n     *\n     */\n    public function setSession($renderer_id = null)\n    {\n        if (! $renderer_id) {\n            $renderer_id = $this->id;\n        }\n        $this->report_session->set(\"{$this->id}.name\", $this->name);\n        $this->report_session->set(\"{$this->id}.description\", $this->description);\n        $this->report_session->set(\"{$this->id}.chunksz\", $this->chunksz);\n        $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n        $this->report_session->set(\"{$this->id}.rank\", $this->rank);\n    }\n\n    /**\n     * Finnish saving renderer to database by creating colunms\n     *\n     * @param Tracker_Report_Renderer $renderer containing the columns\n     */\n    public function afterSaveObject(Tracker_Report_Renderer $renderer)\n    {\n        $renderer->injectUnsavedColumnsInRendererDB($this);\n        $this->saveAggregates($renderer->getAggregates());\n        $this->saveSort($renderer->getSort());\n    }\n\n    public function injectUnsavedColumnsInRendererDB(Tracker_Report_Renderer_Table $renderer)\n    {\n        $renderer->saveColumns($this->_columns);\n    }\n\n    /**\n     *Test if sort contains at least one used field\n     *\n     * @return bool true f sort has at least one used field\n     */\n    public function sortHasUsedField($store_in_session = true)\n    {\n        $sort = $this->getSort($store_in_session);\n        foreach ($sort as $s) {\n            if (isset($s['field']) && $s['field']->isUsed()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *Test if multisort does not contain unused fields\n     *\n     *@return bool true if still multisort\n     */\n    public function isMultisort()\n    {\n        $sort = $this->getSort();\n        $used = 0;\n        foreach ($sort as $s) {\n            if ($s['field']->isUsed()) {\n                $used++;\n            }\n        }\n        if ($used < 2) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private function getSortIcon($is_desc)\n    {\n        return ' <i class=\"fa fa-caret-' . ( $is_desc ? 'down' : 'up' ) . '\"></i>';\n    }\n\n    public function getIcon()\n    {\n        return 'fa fa-list-ul';\n    }\n\n    private function fetchViewButtons($report_can_be_modified, PFUser $current_user)\n    {\n        $html  = '';\n        $html .= '<div id=\"tracker_report_renderer_view_controls\">';\n        if ($this->sortHasUsedField()) {\n            //reset sort\n            $reset_sort_params = [\n                'report'                    => $this->report->id,\n                'renderer'                  => $this->id,\n                'func'                      => 'renderer',\n                'renderer_table[resetsort]' => 1,\n            ];\n            $html             .= '<div class=\"btn-group\"><a class=\"btn btn-mini\" href=\"?' . http_build_query($reset_sort_params) . '\">'\n                . '<i class=\"fa fa-reply\"></i> '\n                . dgettext('tuleap-tracker', 'Reset sort')\n                . '</a></div> ';\n\n            //toggle multisort\n            $multisort_params = [\n                'report'                    => $this->report->id,\n                'renderer'                  => $this->id,\n                'func'                      => 'renderer',\n                'renderer_table[multisort]' => 1,\n            ];\n            $multisort_label  = dgettext('tuleap-tracker', 'Enable multisort');\n            if ($this->multisort) {\n                $multisort_label = dgettext('tuleap-tracker', 'Disable multisort');\n            }\n            $html .= '<div class=\"btn-group\"><a class=\"btn btn-mini\" href=\"?' . http_build_query($multisort_params) . '\">'\n                . '<i class=\"fa fa-sort\"></i> '\n                . $multisort_label\n                . '</a></div> ';\n        }\n\n        if ($report_can_be_modified && ! $current_user->isAnonymous()) {\n            $html .= $this->fetchAddColumn();\n        }\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function isFieldUsedAsColumn(Tracker_FormElement_Field $field)\n    {\n        $columns = $this->getColumns();\n        if (isset($columns[$field->getId()])) {\n            return true;\n        }\n\n        foreach ($columns as $column) {\n            if ($column['field_id'] == $field->getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private function columnsCanBeTechnicallySorted(array $queries)\n    {\n        return count($queries) <= 1;\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    private function getTypePresenterFactory()\n    {\n        $type_dao                = new TypeDao();\n        $artifact_link_usage_dao = new ArtifactLinksUsageDao();\n\n        return new TypePresenterFactory($type_dao, $artifact_link_usage_dao);\n    }\n\n    public function getJavascriptDependencies()\n    {\n        return [\n            ['file' => RelativeDatesAssetsRetriever::retrieveAssetsUrl(), 'unique-name' => 'tlp-relative-dates'],\n        ];\n    }\n\n    public function getStylesheetDependencies(): CssAssetCollection\n    {\n        $assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n        return new CssAssetCollection([new \\Tuleap\\Layout\\CssAssetWithoutVariantDeclinaisons($assets, 'tracker-bp')]);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2020-present. All rights reserved\n * Copyright (c) STMicroelectronics 2016. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\nuse Tuleap\\TrackerEncryption\\ChangesetValue;\nuse Tuleap\\TrackerEncryption\\Dao\\ValueDao;\n\nclass Tracker_FormElement_Field_Encrypted extends Tracker_FormElement_Field implements TrackerFormElementExternalField // @codingStandardsIgnoreLine\n{\n    /**\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n\n        $html  = '<div class=\"input-append encrypted-field\">';\n        $html .= $this->fetchInput($value, 'password');\n        $html .= $this->fetchButton();\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * @return string html\n     */\n    private function fetchButton()\n    {\n        $html = '<button class=\"btn\" type=\"button\" id=\"show_password_' . $this->id . '\">\n                     <span id=\"show_password_icon_' . $this->id . '\" class=\"fa fa-eye-slash\"></span>\n                 </button>';\n\n        return $html;\n    }\n\n    /**\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return $this->fetchSubmitValue([]);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker_encryption', 'Encrypted field');\n    }\n\n    public static function getFactoryDescription()\n    {\n          return dgettext('tuleap-tracker_encryption', 'Encrypted field');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        $last_changeset_value = $this->getLastChangesetValue($artifact);\n        if (\n            $last_changeset_value !== null\n            && $last_changeset_value->getValue() === $value\n        ) {\n            return true;\n        }\n\n        $maximum_characters_allowed = $this->getMaxSizeAllowed();\n        if ($maximum_characters_allowed !== 0 && mb_strlen($value) > $maximum_characters_allowed) {\n            $GLOBALS['Response']->addFeedback(\n                Feedback::ERROR,\n                sprintf(dgettext('tuleap-tracker', '%1$s can not contain more than %2$s characters.'), $this->getLabel(), $maximum_characters_allowed)\n            );\n            return false;\n        }\n        return true;\n    }\n\n    private function getMaxSizeAllowed()\n    {\n        $dao_pub_key = new TrackerPublicKeyDao();\n        $value_dao   = new ValueDao();\n        $tracker_key = new Tracker_Key($dao_pub_key, $value_dao, $this->getTrackerId());\n        $key         = $tracker_key->getKey();\n\n        return $tracker_key->getFieldSize($key);\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        if ($value != \"\") {\n            $dao_pub_key = new TrackerPublicKeyDao();\n            $value_dao   = new ValueDao();\n            $tracker_key = new Tracker_Key($dao_pub_key, $value_dao, $artifact->tracker_id);\n            try {\n                $encryption_manager = new Encryption_Manager($tracker_key);\n                return $this->getValueDao()->create($changeset_value_id, $encryption_manager->encrypt($value));\n            } catch (Tracker_EncryptionException $exception) {\n                return false;\n            }\n        } else {\n            return $this->getValueDao()->create($changeset_value_id, $value);\n        }\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitExternalField($this);\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_encrypted AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n\n    public function getQuerySelect()\n    {\n        $R2 = 'R2_' . $this->id;\n\n        return \"$R2.value AS `\" . $this->name . \"`\";\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        $html = '';\n        if (\n            is_array($submitted_values)\n            && isset($submitted_values[$this->getId()])\n            && $submitted_values[$this->getId()] !== false\n        ) {\n            $value = $submitted_values[$this->getId()];\n        } else {\n            if ($value != null) {\n                $value = $value->getValue();\n            }\n        }\n        $html .= $this->fetchEditInput($value);\n\n        return $html;\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        if (isset($value) === false || $value->getValue() === '') {\n            return $this->getNoValueLabel();\n        }\n\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return $purifier->purify($value->getValue());\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $this->getId() . '\">' .\n            $this->fetchArtifactValue($artifact, $value, $submitted_values) . '</div>';\n    }\n\n    private function fetchInput($value, $field_type)\n    {\n        $html_purifier = Codendi_HTMLPurifier::instance();\n\n        return '<input\n            type=\"' . $field_type . '\"\n            autocomplete=\"off\"\n            id=\"password_' . $this->id . '\"\n            class=\"form-control\"\n            name=\"artifact[' . $this->id . ']\"\n            maxlength=\"' . $this->getMaxSizeAllowed() . '\"\n            value= \"' . $html_purifier->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" />';\n    }\n\n    private function fetchEditInput($value)\n    {\n        return $this->fetchInput($value, 'text');\n    }\n\n    protected function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        return \"<div class='tracker-form-element-encrypted'>\" . $this->fetchArtifactValueReadOnly($artifact, $value) . \"</div>\" .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '';\n    }\n\n    protected function getValueDao()\n    {\n        return new ValueDao();\n    }\n\n    /**\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    /**\n     * @param Tracker_Artifact_Changeset $changeset\n     * @param int $value_id\n     * @param bool $has_changed\n     *\n     * @return Tracker_Artifact_ChangesetValue | null\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id)->getRow()) {\n            $changeset_value = new ChangesetValue($value_id, $changeset, $this, $has_changed, $row['value']);\n        }\n\n        return $changeset_value;\n    }\n\n    /**\n     * @param int $artifact_id\n     * @param int $changeset_id\n     * @param mixed $value\n     * @param int $report_id\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n        return $value;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return $old_value->getValue() !== $new_value;\n    }\n\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new Tracker_FormElement_View_Admin_Field($element, $used_element);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2017 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\AgileDashboard\\FormElement;\n\nuse AgileDashboard_Semantic_InitialEffortFactory;\nuse EventManager;\nuse PFUser;\nuse Psr\\Log\\LoggerInterface;\nuse SystemEventManager;\nuse TemplateRendererFactory;\nuse Tracker_Artifact_Changeset;\nuse Tracker_Artifact_ChangesetFactoryBuilder;\nuse Tracker_Artifact_ChangesetValue;\nuse Tracker_ArtifactFactory;\nuse Tracker_FormElement_Chart_Field_Exception;\nuse Tracker_FormElement_Field;\nuse Tracker_FormElement_Field_ReadOnly;\nuse Tracker_FormElement_FieldVisitor;\nuse Tracker_FormElementFactory;\nuse Tracker_HierarchyFactory;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsCacheDao;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsCalculator;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\CountElementsModeChecker;\nuse Tuleap\\AgileDashboard\\FormElement\\Burnup\\ProjectsCountModeDao;\nuse Tuleap\\AgileDashboard\\v1\\Artifact\\BurnupRepresentation;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\ChartCachedDaysComparator;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationFieldRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueChecker;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartFieldUsage;\nuse Tuleap\\Tracker\\FormElement\\ChartMessageFetcher;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneDao;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneFactory;\nuse Tuleap\\Tracker\\Semantic\\Status\\Done\\SemanticDoneValueChecker;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse UserManager;\n\nclass Burnup extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly, TrackerFormElementExternalField\n{\n    public const TYPE = 'burnup';\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitExternalField($this);\n    }\n\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new ViewAdminBurnupField($element, $used_element);\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    /**\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $field_usage = $this->getChartFieldUsage();\n\n        $html  = $this->getChartMessageFetcher()->fetchWarnings($this, $field_usage);\n        $html .= '<img src=\"' . AGILEDASHBOARD_BASE_URL . '/images/fake-burnup-admin.png\" />';\n\n        return $html;\n    }\n\n    private function getChartMessageFetcher()\n    {\n        return new ChartMessageFetcher(\n            Tracker_HierarchyFactory::instance(),\n            $this->getConfigurationFieldRetriever(),\n            EventManager::instance(),\n            UserManager::instance()\n        );\n    }\n\n    private function getConfigurationFieldRetriever()\n    {\n        return new ChartConfigurationFieldRetriever(\n            $this->getFormElementFactory(),\n            SemanticTimeframeBuilder::build(),\n            $this->getLogger()\n        );\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n    }\n\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n    }\n\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $user                      = UserManager::instance()->getCurrentUser();\n        $can_burnup_be_regenerated = $artifact->getTracker()->userIsAdmin($user);\n        $burnup_presenter          = $this->buildPresenter($artifact, $can_burnup_be_regenerated, $user);\n\n        $renderer = TemplateRendererFactory::build()->getRenderer(AGILEDASHBOARD_TEMPLATE_DIR);\n\n        return $renderer->renderToString('formelement/burnup-field', $burnup_presenter);\n    }\n\n    public function buildPresenter(Artifact $artifact, $can_burnup_be_regenerated, PFUser $user)\n    {\n        $warning     = \"\";\n        $burnup_data = null;\n        try {\n            $burnup_data = $this->getBurnupDataBuilder()->buildBurnupData($artifact, $user);\n\n            if ($burnup_data->isBeingCalculated()) {\n                $warning = dgettext(\n                    'tuleap-agiledashboard',\n                    \"Burnup is under calculation. It will be available in few minutes.\"\n                );\n            }\n        } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n            $warning = $e->getMessage();\n        }\n\n        $include_assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/agiledashboard'\n        );\n        $GLOBALS['HTML']->includeFooterJavascriptFile($include_assets->getFileURL('burnup-chart.js'));\n\n        $capacity              = $this->getConfigurationValueRetriever()->getCapacity($artifact, $user);\n        $burnup_representation = new BurnupRepresentation($capacity, $burnup_data);\n        $css_file_url          = $include_assets->getFileURL('burnup-chart.css');\n\n        return new BurnupFieldPresenter(\n            $this->getCountElementsModeChecker(),\n            $burnup_representation,\n            $artifact,\n            $can_burnup_be_regenerated,\n            $css_file_url,\n            $user->getLocale(),\n            $warning\n        );\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n    }\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n    }\n\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n    }\n\n    protected function getDao()\n    {\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the burnup chart for the artifact');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burnup--plus.png');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burnup.png');\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-agiledashboard', 'Burnup Chart');\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    public function getQueryFrom()\n    {\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact = $changeset->getArtifact();\n        try {\n            $burnup_data = $this->getBurnupDataBuilder()->buildBurnupData($artifact, $user);\n        } catch (Tracker_FormElement_Chart_Field_Exception $ex) {\n            $burnup_data = null;\n        }\n        $capacity = null;\n        if ($this->getConfigurationFieldRetriever()->doesCapacityFieldExist($artifact->getTracker())) {\n            $capacity = $this->getConfigurationValueRetriever()->getCapacity($artifact, $user);\n        }\n\n        $burnup_representation = new BurnupRepresentation($capacity, $burnup_data);\n        $formelement_field     = $this->getFormElementFactory()->getFormElementById($this->getId());\n\n        $field_representation = new ArtifactFieldValueFullRepresentation();\n        $field_representation->build($this->getId(), $this->getFormElementFactory()->getType($formelement_field), $this->getLabel(), $burnup_representation);\n\n        return $field_representation;\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    protected function getValueDao()\n    {\n    }\n\n    protected function keepValue(\n        $artifact,\n        $changeset_value_id,\n        Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n    ) {\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    public function testImport()\n    {\n        return true;\n    }\n\n    /**\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * @return ChartFieldUsage\n     */\n    private function getChartFieldUsage()\n    {\n        $use_start_date       = true;\n        $use_duration         = true;\n        $use_capacity         = true;\n        $use_hierarchy        = false;\n        $use_remaining_effort = false;\n\n        return new ChartFieldUsage(\n            $use_start_date,\n            $use_duration,\n            $use_capacity,\n            $use_hierarchy,\n            $use_remaining_effort\n        );\n    }\n\n    /**\n     * @return BurnupDataBuilder\n     */\n    private function getBurnupDataBuilder()\n    {\n        $burnup_cache_dao = new BurnupCacheDao();\n\n        return new BurnupDataBuilder(\n            $this->getLogger(),\n            new BurnupCacheChecker(\n                new BurnupCacheGenerator(\n                    SystemEventManager::instance()\n                ),\n                new ChartConfigurationValueChecker(\n                    $this->getConfigurationFieldRetriever(),\n                    $this->getConfigurationValueRetriever()\n                ),\n                $burnup_cache_dao,\n                new ChartCachedDaysComparator($this->getLogger())\n            ),\n            $this->getConfigurationValueRetriever(),\n            $burnup_cache_dao,\n            $this->getBurnupCalculator(),\n            new CountElementsCacheDao(),\n            new CountElementsCalculator(\n                Tracker_Artifact_ChangesetFactoryBuilder::build(),\n                Tracker_ArtifactFactory::instance(),\n                Tracker_FormElementFactory::instance(),\n                new BurnupDao()\n            ),\n            $this->getCountElementsModeChecker()\n        );\n    }\n\n    /**\n     * @return BurnupCalculator\n     */\n    private function getBurnupCalculator()\n    {\n        $changeset_factory = Tracker_Artifact_ChangesetFactoryBuilder::build();\n\n        return new BurnupCalculator(\n            $changeset_factory,\n            Tracker_ArtifactFactory::instance(),\n            new BurnupDao(),\n            AgileDashboard_Semantic_InitialEffortFactory::instance(),\n            new SemanticDoneFactory(new SemanticDoneDao(), new SemanticDoneValueChecker())\n        );\n    }\n\n    private function getLogger(): LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger('burnup_syslog');\n    }\n\n    /**\n     * @return ChartConfigurationValueRetriever\n     */\n    private function getConfigurationValueRetriever()\n    {\n        $semantic_timeframe = SemanticTimeframeBuilder::build()->getSemantic($this->getTracker());\n\n        return new ChartConfigurationValueRetriever(\n            $this->getConfigurationFieldRetriever(),\n            $semantic_timeframe->getTimeframeCalculator(),\n            $this->getLogger()\n        );\n    }\n\n    private function getCountElementsModeChecker(): CountElementsModeChecker\n    {\n        return new CountElementsModeChecker(new ProjectsCountModeDao());\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2018-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace Tuleap\\TestManagement\\Step\\Execution\\Field;\n\nuse Codendi_HTMLPurifier;\nuse TemplateRendererFactory;\nuse Tracker_Artifact_ChangesetValue;\nuse Tracker_FormElement_Field;\nuse Tracker_FormElement_FieldVisitor;\nuse Tuleap\\TestManagement\\Step\\Execution\\StepResult;\nuse Tuleap\\TestManagement\\Step\\Execution\\StepResultPresenter;\nuse Tuleap\\TestManagement\\Step\\Step;\nuse Tuleap\\TestManagement\\Step\\StepPresenter;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\n\nclass StepExecution extends Tracker_FormElement_Field implements TrackerFormElementExternalField\n{\n    public const TYPE             = 'ttmstepexec';\n    public const UPDATE_VALUE_KEY = 'steps_results';\n\n    /**\n     * @return void\n     */\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        $visitor->visitExternalField($this);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-testmanagement', 'Step execution');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-testmanagement', 'Execution result of a step');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return TESTMANAGEMENT_BASE_URL . '/images/ic/tick-circle.png';\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return TESTMANAGEMENT_BASE_URL . '/images/ic/tick-circle--plus.png';\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    protected function fetchAdminFormElement()\n    {\n        return '<ol><li><span>First step definition</span> <span class=\"label\">passed</span></li></ol>';\n    }\n\n    /**\n     * @return null\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return false\n     */\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    /**\n     * @return false\n     */\n    public function canBeUsedAsReportColumn()\n    {\n        return false;\n    }\n\n    /**\n     * @param mixed $criteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return null;\n    }\n\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"alert\">'\n            . dgettext(\n                'tuleap-testmanagement',\n                'Direct edition of steps results is not allowed. Please use TestManagement service instead.'\n            )\n            . '</div>'\n            . $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $renderer = TemplateRendererFactory::build()->getRenderer(TESTMANAGEMENT_BASE_DIR . '/templates');\n\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $no_value_label = $this->getNoValueLabel();\n\n        return $renderer->renderToString(\n            'step-exec-readonly',\n            [\n                'steps'                   => $this->getStepResultPresentersFromChangesetValue($value),\n                'purified_no_value_label' => $purifier->purify($no_value_label, CODENDI_PURIFIER_FULL),\n            ]\n        );\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        array $submitted_values = [],\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        return '';\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '';\n    }\n\n    public function fetchAddTooltip($used, $prefix = '')\n    {\n        return '';\n    }\n\n    /**\n     * @return StepExecutionChangesetValueDao\n     */\n    protected function getValueDao()\n    {\n        return new StepExecutionChangesetValueDao();\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function hasChanges(\n        Artifact $artifact,\n        Tracker_Artifact_ChangesetValue $old_value,\n        $new_value,\n    ) {\n        $old_values = [];\n        /** @var StepResult[] $old_steps */\n        $old_steps = $old_value->getValue();\n        foreach ($old_steps as $step_result) {\n            $old_values[$step_result->getStep()->getId()] = $step_result->getStatus();\n        }\n        $new_values = $new_value[self::UPDATE_VALUE_KEY];\n\n        return array_diff_assoc($new_values, $old_values) !== [] || array_diff_assoc($old_values, $new_values) !== [];\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value[self::UPDATE_VALUE_KEY]);\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $steps = [];\n        foreach ($this->getValueDao()->searchById($value_id) as $row) {\n            $step = new Step(\n                $row['id'],\n                $row['description'],\n                $row['description_format'],\n                $row['expected_results'],\n                $row['expected_results_format'],\n                $row['rank']\n            );\n\n            $steps[] = new StepResult($step, $row['status']);\n        }\n\n        return new StepExecutionChangesetValue($value_id, $changeset, $this, $has_changed, $steps);\n    }\n\n    /**\n     * @param null $from_aid\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n        return '';\n    }\n\n    /**\n     * @return ViewAdmin\n     */\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new ViewAdmin($element, $used_element);\n    }\n\n    /**\n     *\n     * @return StepResultPresenter[]\n     */\n    private function getStepResultPresentersFromChangesetValue(?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $step_results = [];\n        if ($value) {\n            $step_results = $value->getValue();\n        }\n\n        $tracker = $this->getTracker();\n        if (! $tracker) {\n            return [];\n        }\n\n        return array_map(\n            static function (StepResult $step_result) use ($tracker) {\n                $step_presenter = new StepPresenter($step_result->getStep(), $tracker->getProject());\n\n                return new StepResultPresenter($step_presenter, $step_result);\n            },\n            $step_results\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\XMLCriteriaValueCache;\nuse Tuleap\\Tracker\\Rule\\TrackerRulesDateValidator;\nuse Tuleap\\Tracker\\Rule\\TrackerRulesListValidator;\nuse Tuleap\\Tracker\\Semantic\\CollectionOfSemanticsUsingAParticularTrackerField;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldDetector;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldsDao;\nuse Tuleap\\Tracker\\Workflow\\PostAction\\FrozenFields\\FrozenFieldsRetriever;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\SimpleWorkflowDao;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\StateFactory;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\TransitionExtractor;\nuse Tuleap\\Tracker\\Workflow\\SimpleMode\\State\\TransitionRetriever;\n\n/**\n * The base class for fields in trackers. From int and string to selectboxes.\n * Composite fields are excluded.\n */\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field extends Tracker_FormElement implements Tracker_Report_Field, Tracker_FormElement_IAcceptFieldVisitor\n{\n    public const PREFIX_NAME_SQL_COLUMN = 'user_defined_';\n\n    protected $has_errors = false;\n\n    /**\n     * Display the field value as a criteria\n     * @return string\n     * @see fetchCriteria\n     */\n    abstract public function fetchCriteriaValue($criteria);\n\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * Please override this method for specific field (if needed)\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string the value of the field for artifact_id and changeset_id, formatted for CSV\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchChangesetValue($artifact_id, $changeset_id, $value, $report);\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    abstract public function fetchRawValue($value);\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     */\n    abstract public function getCriteriaFrom($criteria);\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     * @see getCriteriaFrom\n     */\n    abstract public function getCriteriaWhere($criteria);\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao|null\n     */\n    abstract protected function getCriteriaDao();\n\n    protected $criteria_value;\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (! isset($this->criteria_value[$criteria->getReport()->getId()])) {\n            $this->criteria_value[$criteria->getReport()->getId()] = null;\n            $dao                                                   = $this->getCriteriaDao();\n            if ($dao && $v = $dao->searchByCriteriaId($criteria->id)->getRow()) {\n                $this->criteria_value[$criteria->getReport()->getId()] = $v['value'];\n            }\n        }\n        return $this->criteria_value[$criteria->getReport()->getId()];\n    }\n\n    public function setCriteriaValue($criteria_value, $report_id)\n    {\n        $this->criteria_value[$report_id] = $criteria_value;\n    }\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $value    = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        if ($operator !== Tracker_Report_REST::OPERATOR_CONTAINS) {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Unallowed operator for criterion field '$this->name' ($this->id). Allowed operators: [\" . Tracker_Report_REST::OPERATOR_CONTAINS . \"]\");\n        }\n\n        if (! is_string($value) && ! is_numeric($value)) {\n            throw new Tracker_Report_InvalidRESTCriterionException('Invalid value for field \"' . $this->name . '\"');\n        }\n\n        $this->setCriteriaValue($value, $criteria->report->id);\n        return true;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        return $value;\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if ((string) $criteria_value !== '') {\n            $cdata_factory = new XML_SimpleXMLCDATAFactory();\n            $cdata_factory->insertWithAttributes(\n                $xml_criteria,\n                'criteria_value',\n                (string) $criteria_value,\n                ['type' => 'text']\n            );\n        }\n    }\n\n    public function setCriteriaValueFromXML(\n        Tracker_Report_Criteria $criteria,\n        SimpleXMLElement $xml_criteria_value,\n        array $xml_field_mapping,\n    ) {\n        if ((string) $xml_criteria_value['type'] !== 'text') {\n            return;\n        }\n        $string_value = (string) $xml_criteria_value;\n\n        $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n        $cache->set($criteria->getReport()->getId(), $string_value);\n    }\n\n    public function saveCriteriaValueFromXML(Tracker_Report_Criteria $criteria)\n    {\n        $report_id = $criteria->getReport()->getId();\n        $cache     = XMLCriteriaValueCache::instance(spl_object_id($this));\n\n        if (! $cache->has($report_id)) {\n            return;\n        }\n\n        $value = $cache->get($criteria->getReport()->getId());\n        $this->updateCriteriaValue($criteria, $value);\n    }\n\n    final public function getQuerySelectName(): string\n    {\n        return \\Tuleap\\DB\\DBFactory::getMainTuleapDBConnection()->getDB()->escapeIdentifier(self::PREFIX_NAME_SQL_COLUMN . $this->name);\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        $R = 'R_' . $this->id;\n        return \"$R.value_id AS \" . $this->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        $R = 'R_' . $this->id;\n        return \"INNER JOIN tracker_changeset_value AS $R ON ($R.changeset_id = c.id)\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        return $this->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R = 'R_' . $this->id;\n        return \"$R.value_id\";\n    }\n\n    public function fetchCriteria(Tracker_Report_Criteria $criteria)\n    {\n        return $this->buildReportCriteria($criteria, $this->criteriaCanBeAdvanced());\n    }\n\n    public function fetchCriteriaWithoutExpandFunctionnality(Tracker_Report_Criteria $criteria)\n    {\n        return $this->buildReportCriteria($criteria, false);\n    }\n\n    private function buildReportCriteria(Tracker_Report_Criteria $criteria, $advanced_criteria)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if ($advanced_criteria) {\n            $html .= '<table cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td>';\n            $html .= $GLOBALS['HTML']->getImage(\n                'ic/toggle_' . ($criteria->is_advanced ? 'minus' : 'plus' ) . '.png',\n                ['class' => 'tracker_report_criteria_advanced_toggle']\n            );\n            $html .= '</td><td>';\n        }\n        $html .= '<label for=\"tracker_report_criteria_' . $purifier->purify($this->id) . '\" title=\"#' .\n            $purifier->purify($this->id) . '\">' . $purifier->purify($this->getLabel());\n        $html .= '<input type=\"hidden\" id=\"tracker_report_criteria_' . $purifier->purify($this->id) .\n            '_parent\" value=\"' . $purifier->purify($this->parent_id) . '\" />';\n        $html .= '</label>';\n\n        if ($advanced_criteria) {\n            $html .=  '<div class=\"tracker_report_criteria\">';\n        }\n        $html .= $this->fetchCriteriaValue($criteria);\n        if ($advanced_criteria) {\n            $html .= '</div></td></tr></tbody></table>';\n        }\n        return $html;\n    }\n\n    /**\n     * Return the fieldset of this field\n     * @return Tracker_FormElement_Field|null\n     */\n    public function getParent()\n    {\n        return Tracker_FormElementFactory::instance()->getFieldById($this->parent_id);\n    }\n\n    /**\n     * Add some additionnal information beside the field in the artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @param $value the changeset value\n     *\n     * @return string\n     */\n    public function fetchArtifactAdditionnalInfo(?Tracker_Artifact_ChangesetValue $value, array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Add some additionnal information beside the field in the submit new artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchSubmitAdditionnalInfo(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        return $this->getValueDao()->delete($changeset_value_id);\n    }\n\n    /**\n     * Delete the criteria value\n     * @param Criteria $criteria the corresponding criteria\n     */\n    public function deleteCriteriaValue($criteria)\n    {\n        $this->getCriteriaDao()->delete($criteria->report->id, $criteria->id);\n        return $this;\n    }\n\n    /**\n     * Update the criteria value\n     * @param Tracker_Report_Criteria $criteria\n     * @param mixed $value\n     */\n    public function updateCriteriaValue($criteria, $value)\n    {\n        $dao = $this->getCriteriaDao();\n        if ($dao === null) {\n            return;\n        }\n        $dao->save($criteria->id, $value);\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return false;\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        return false;\n    }\n    public function getQueryFromAggregate()\n    {\n        return $this->getQueryFrom();\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Get the html code to display the field for the given artifact\n     *\n     *\n     * @return string html\n     */\n    public function fetchArtifact(\n        Artifact $artifact,\n        array $submitted_values,\n        array $additional_classes,\n    ) {\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            $last_changeset = $artifact->getLastChangeset();\n            if ($last_changeset) {\n                $value       = $last_changeset->getValue($this);\n                $html_value  = $this->fetchArtifactValue($artifact, $value, $submitted_values);\n                $html_value .= $this->fetchArtifactAdditionnalInfo($value, $submitted_values);\n                return $this->fetchArtifactField($artifact, $html_value, $additional_classes);\n            }\n            return '';\n        }\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifact($artifact, $submitted_values, ['field-in-modal']);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return $this->fetchSubmit($submitted_values);\n    }\n\n    /**\n     * Get the html code to display the field for the given artifact in read only mode\n     *\n     *\n     * @return string html\n     */\n    public function fetchArtifactReadOnly(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value       = $last_changeset->getValue($this);\n            $html_value  = $this->fetchArtifactValueForWebDisplay($artifact, $value, $submitted_values);\n            $html_value .= $this->fetchArtifactAdditionnalInfo($value, $submitted_values);\n            return $this->fetchArtifactField($artifact, $html_value, []);\n        }\n        return '';\n    }\n\n    /**\n     * @see Tracker_FormElement::fetchArtifactCopyMode\n     */\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    /**\n     * @param string           $html_value in html\n     *\n     * @return string html\n     */\n    private function fetchArtifactField(Artifact $artifact, $html_value, array $additional_classes)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if ($this->userCanRead()) {\n            $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n            $required           = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html              .= '<div class=\"' . $this->getClassNames($additional_classes, $is_field_read_only) . '\"\n                data-field-id=\"' . $this->id . '\"\n                data-test=\"tracker-artifact-value-' . $this->getName() . '\"\n                data-is-required=\"' . ($this->required ? 'true' : 'false') . '\">';\n\n            if (! $is_field_read_only && $this->userCanUpdate()) {\n                $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n                $html .= '<button type=\"button\" title=\"' . $title . '\"\n                                class=\"tracker_formelement_edit\"\n                                data-test=\"edit-field-' . $this->getName() . '\">' .\n                    $purifier->purify($this->getLabel()) . $required .\n                    '</button>';\n            }\n\n            $html .= '<label id=\"tracker_artifact_' . $this->id . '\" for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) . '\" class=\"tracker_formelement_label\">' .  $purifier->purify($this->getLabel())  . $required . '</label>';\n\n            $html .= $html_value;\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function fetchMailArtifact($recipient, Artifact $artifact, $format = 'text', $ignore_perms = false)\n    {\n        if (! $ignore_perms && ! $this->userCanRead($recipient)) {\n            return '';\n        }\n\n        $value                = $artifact->getLastChangeset()->getValue($this);\n        $mail_formatted_value = $this->fetchMailArtifactValue($artifact, $recipient, $ignore_perms, $value, $format);\n\n        if ($format == 'text') {\n            $output = ' * ' . $this->getLabel() . ' : ' . $mail_formatted_value;\n        } else {\n            $hp     = Codendi_HTMLPurifier::instance();\n            $output = '<tr>\n                <td valign=\"top\" align=\"left\" >\n                    <label id = \"tracker_artifact_' . $this->id . '\"\n                        for = \"tracker_artifact_' . $this->id . '\"\n                        title = \"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"\n                        class = \"tracker_formelement_label\"\n                    >\n                        <b>' .\n                            $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML) . '\n                        </b>\n                    </label>\n                </td>\n                <td align = \"left\">' .\n                    $mail_formatted_value . '\n                </td>\n            </tr>';\n        }\n        return $output;\n    }\n\n\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanSubmit()) {\n            $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html    .= '<div class=\"' . $this->getClassNamesForSubmit() . '\"\n                data-field-id=\"' . $this->id . '\"\n                data-is-required=\"' . ($this->required ? 'true' : 'false') . '\">';\n            $html    .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"  class=\"tracker_formelement_label\">' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . $required . '</label>';\n\n            $html .= $this->fetchSubmitValue($submitted_values);\n            $html .= $this->fetchSubmitAdditionnalInfo($submitted_values);\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    protected function getTargetFieldsIds(): array\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return [];\n        }\n\n        $tracker_formelement_factory = Tracker_FormElementFactory::instance();\n        $tracker_rules_manager       = new Tracker_RulesManager(\n            $tracker,\n            $tracker_formelement_factory,\n            new FrozenFieldsDao(),\n            new TrackerRulesListValidator($tracker_formelement_factory),\n            new TrackerRulesDateValidator($tracker_formelement_factory),\n            TrackerFactory::instance()\n        );\n        return $tracker_rules_manager->getFieldTargets($this);\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanUpdate()) {\n            $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n            $html    .= '<div class=\"field-masschange ' . $this->getClassNames([], false) . '\">';\n            $html    .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $hp->purify($this->description, CODENDI_PURIFIER_CONVERT_HTML) . '\"  class=\"tracker_formelement_label\">' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . $required . '</label>';\n\n            $html .= $this->fetchSubmitValueMasschange();\n            $html .= $this->fetchSubmitAdditionnalInfo([]);\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    private function getClassNames(array $additional_classes, bool $is_field_read_only)\n    {\n        $classnames  = 'tracker_artifact_field';\n        $classnames .= ' tracker_artifact_field-' . $this->getFormElementFactory()->getType($this);\n        if ($this->has_errors) {\n            $classnames .= ' has_errors';\n        }\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            $classnames .= ' editable';\n        }\n\n        foreach ($additional_classes as $additional_class) {\n            $classnames .= \" $additional_class\";\n        }\n\n        return $classnames;\n    }\n\n    private function getClassNamesForSubmit()\n    {\n        $classnames  = 'tracker_artifact_field';\n        $classnames .= ' tracker_artifact_field-' . $this->getFormElementFactory()->getType($this);\n        if ($this->has_errors) {\n            $classnames .= ' has_errors';\n        }\n\n        return $classnames;\n    }\n\n    /**\n     * Get the html code to display the field in a tooltip\n     *\n     * @param Artifact $artifact\n     *\n     * @return string html\n     */\n    public function fetchTooltip($artifact)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        if ($this->userCanRead()) {\n            $html .= '<tr><td>';\n            $html .= '<label>' .  $hp->purify($this->getLabel(), CODENDI_PURIFIER_CONVERT_HTML) . '</label>';\n            $html .= '</td><td>';\n            $value = $artifact->getLastChangeset()->getValue($this);\n            $html .= $this->fetchTooltipValue($artifact, $value);\n            $html .= '</td></tr>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @return string\n     */\n    abstract protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    );\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    abstract public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null);\n\n    /**\n     * Fetch the HMTL code to display the field in the web browser\n     *\n     * @return string\n     */\n    public function fetchArtifactValueForWebDisplay(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if (! $is_field_read_only && $this->userCanUpdate()) {\n            return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n        }\n\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    protected function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    protected function getNoValueLabel()\n    {\n        return \"<span class='empty_value'>\" . dgettext('tuleap-tracker', 'Empty') . \"</span>\";\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' .\n            $this->getId() . '\">' .\n            $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            '</div>';\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    abstract protected function fetchSubmitValue(array $submitted_values);\n\n    /**\n     * Return a value from user submitted request (if any) or from default value (if any)\n     *\n     * @return mixed\n     */\n    protected function getValueFromSubmitOrDefault(array $submitted_values)\n    {\n        $value = '';\n        if (isset($submitted_values[$this->getId()])) {\n            $value = $submitted_values[$this->getId()];\n        } elseif ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        return $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    abstract protected function fetchSubmitValueMasschange();\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     * @return string\n     */\n    abstract protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null);\n\n    /**\n     * Fetch the html code to display the field value in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        return $this->fetchTooltipValue($artifact, $artifact->getLastChangeset()->getValue($this));\n    }\n\n    /**\n     * Fetch the html code to display the field in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCard(Artifact $artifact, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        $value           = $this->fetchCardValue($artifact, $display_preferences);\n        $data_field_id   = '';\n        $data_field_type = '';\n\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($this->userCanUpdate() && ! $is_field_frozen) {\n            $data_field_id   = 'data-field-id=\"' . $purifier->purify($this->getId()) . '\"';\n            $data_field_type = 'data-field-type=\"' . $purifier->purify($this->getFormElementFactory()->getType($this)) . '\"';\n        }\n\n        $html = '<tr>\n                    <td>' . $purifier->purify($this->getLabel()) . ':\n                    </td>\n                    <td class=\"valueOf_' . $purifier->purify($this->getName()) . '\"' .\n                        $data_field_id .\n                        $data_field_type .\n                        '>' .\n                        $value .\n                    '</td>\n                </tr>';\n\n        return $html;\n    }\n\n    /**\n     * Get the value corresponding to the $value_id\n     * @param int $value_id\n     * @return array\n     */\n    public function getValue($value_id)\n    {\n        return $this->getValueDao()->searchById($value_id, $this->id)->getRow();\n    }\n\n    abstract protected function getValueDao();\n\n    /**\n     * Returns null because a Field object is not of the type FieldComposite\n     *\n     * @return null\n     */\n    public function getFields()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    abstract public function fetchRawValueFromChangeset($changeset);\n\n    public function fetchAdmin($tracker)\n    {\n        $hp       = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $usage_in_semantics = $this->getUsagesInSemantics();\n\n        $html         .= '<div class=\"tracker-admin-field\" id=\"tracker-admin-formElements_' . $this->id . '\">';\n        $html         .= '<div class=\"tracker-admin-field-controls\">';\n                $html .= '<a class=\"edit-field\" href=\"' . $this->getAdminEditUrl() . '\">' . $GLOBALS['HTML']->getImage('ic/edit.png', ['alt' => 'edit']) . '</a> ';\n        if ($usage_in_semantics->areThereSemanticsUsingField() === false && $this->canBeRemovedFromUsage()) {\n            $html .= '<a href=\"?' . http_build_query([\n                'tracker'  => $tracker->id,\n                'func'     => 'admin-formElement-remove',\n                'formElement'    => $this->id,\n            ]) . '\">' . $GLOBALS['HTML']->getImage('ic/cross.png', ['alt' => 'remove']) . '</a>';\n        } else {\n            $cannot_remove_message = $usage_in_semantics->getUsages() . ' ' . $this->getCannotRemoveMessage();\n            $html                 .= '<span style=\"color:gray;\" title=\"' . $cannot_remove_message . '\">';\n            $html                 .= $GLOBALS['HTML']->getImage('ic/cross-disabled.png', ['alt' => 'remove']);\n            $html                 .= '</span>';\n        }\n        $html .= '</div>';\n\n        $html .= '<label title=\"' . $hp->purify($this->description) . '\" class=\"tracker_formelement_label\">' .\n            $hp->purify($this->getLabel()) . $required . '</label>';\n        $html .= $this->fetchAdminFormElement();\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return false;\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return false;\n    }\n\n    /**\n     * Fetch the \"add criteria\" box\n     *\n     * @param array $used Current used fields as criteria.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddCriteria($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $class    = 'tracker_report_add_criteria_unused';\n        if (isset($used[$this->id])) {\n            $class = 'tracker_report_add_criteria_used';\n        }\n        $html .= '<option value=\"' . $this->id . '\" class=\"' . $class . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        return $html;\n    }\n\n    /**\n     * Fetch the \"add column\" box in table renderer\n     *\n     * @param array $used Current used fields as column.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddColumn($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $class    = 'tracker_report_table_add_column_unused';\n        if (isset($used[$this->id])) {\n            $class = 'tracker_report_table_add_column_used';\n        }\n        $html .= '<option value=\"' . $this->id . '\" class=\"' . $class . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        return $html;\n    }\n\n    /**\n     * Fetch the \"add tooltip\" box in admin\n     *\n     * @param array $used Current used fields as column.\n     * @param string $prefix Prefix to add before label in optgroups\n     *\n     * @return string\n     */\n    public function fetchAddTooltip($used, $prefix = '')\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        if (! isset($used[$this->id])) {\n            $html .= '<option value=\"' . $this->id . '\">' . $purifier->purify($this->getLabel()) . '</option>';\n        }\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    public function getUsagesInSemantics(): CollectionOfSemanticsUsingAParticularTrackerField\n    {\n        $sm = new Tracker_SemanticManager($this->getTracker());\n        return $sm->getSemanticsTheFieldBelongsTo($this);\n    }\n\n    /**\n     * Is the field used in workflow?\n     *\n     * @return bool returns true if the field is used in workflow, false otherwise\n     */\n    public function isUsedInWorkflow()\n    {\n        return $this->getWorkflowFactory()->isFieldUsedInWorkflow($this);\n    }\n\n    /** @return WorkflowFactory */\n    protected function getWorkflowFactory()\n    {\n        return WorkflowFactory::instance();\n    }\n\n     /**\n     * Is the field used in a field dependency?\n     *\n     * @return bool returns true if the field is used in field dependency, false otherwise\n     */\n    public function isUsedInFieldDependency()\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return false;\n        }\n\n        $tracker_formelement_factory = Tracker_FormElementFactory::instance();\n        $tracker_rules_manager       = new Tracker_RulesManager(\n            $tracker,\n            $tracker_formelement_factory,\n            new FrozenFieldsDao(),\n            new TrackerRulesListValidator($tracker_formelement_factory),\n            new TrackerRulesDateValidator($tracker_formelement_factory),\n            TrackerFactory::instance()\n        );\n        return $tracker_rules_manager->isUsedInFieldDependency($this);\n    }\n\n    /**\n     * Is the form element can be removed from usage?\n     * This method is to prevent tracker inconsistency\n     *\n     * @return string returns null if the field can be unused, a message otherwise\n     */\n    public function getCannotRemoveMessage()\n    {\n        $message = '';\n\n        if ($this->isUsedInWorkflow()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (used in workflow)') . ' ';\n        }\n\n        if ($this->isUsedInTrigger()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (used in triggers)') . ' ';\n        }\n\n        if ($this->isUsedInFieldDependency()) {\n            $message .= dgettext('tuleap-tracker', 'Impossible to delete this field (field dependencies)') . ' ';\n        }\n\n        return $message;\n    }\n\n    /**\n     *\n     * @return bool\n     */\n    public function canBeRemovedFromUsage()\n    {\n        $is_used = $this->isUsedInWorkflow() ||\n            $this->isUsedInFieldDependency() ||\n            $this->isUsedInTrigger();\n\n        if ($is_used === true) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @return bool true if the field is considered to be required\n     */\n    public function isRequired()\n    {\n        return $this->required;\n    }\n\n    /**\n     * Validate a field and check perms and if it has a value if it is required\n     *\n     * @param mixed                           $submitted_value      The submitted value\n     * @param bool $is_submission true if artifact submission, false if artifact update\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(Artifact $artifact, $submitted_value, PFUser $user, ?Tracker_Artifact_ChangesetValue $last_changeset_value = null, ?bool $is_submission = null)\n    {\n        $is_valid      = true;\n        $hasPermission = $this->userCanUpdate($user);\n        if ($is_submission) {\n            $hasPermission = $this->userCanSubmit($user);\n        }\n        if ($last_changeset_value === null && ((! is_array($submitted_value) && $submitted_value === null) || (is_array($submitted_value) && empty($submitted_value))) && $hasPermission && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif (((! is_array($submitted_value) && $submitted_value !== null) || (is_array($submitted_value) && ! empty($submitted_value))) && ! $hasPermission) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'You are not allowed to update the field %1$s.'), $this->getLabel()));\n        } elseif ($submitted_value !== null && $hasPermission) {\n            $is_valid = $this->isValidRegardingRequiredProperty($artifact, $submitted_value) && $this->validateField($artifact, $submitted_value);\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if (($submitted_value === null || $submitted_value === '') && $this->isRequired()) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function addRequiredError()\n    {\n        $this->has_errors = true;\n        $GLOBALS['Response']->addFeedback(\n            'error',\n            sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')')\n        );\n    }\n\n    /**\n     * Validate a field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateField(Artifact $artifact, $submitted_value)\n    {\n        $is_valid = true;\n        if ($submitted_value !== null) {\n            $is_valid = $this->isValid($artifact, $submitted_value);\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! ($this->validate($artifact, $value));\n\n        return (! $this->has_errors);\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return ($value === null || $value === '');\n    }\n\n    /**\n     * @return bool true if the field has errors. Default is false\n     * @see isValid\n     */\n    public function hasErrors()\n    {\n        return $this->has_errors;\n    }\n\n    /**\n     * Force the has_error flag for the field\n     *\n     * @param boolean true if the field has errors. Default is false\n     *\n     * @return void\n     */\n    public function setHasErrors($has_errors)\n    {\n        $this->has_errors = $has_errors;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    abstract protected function validate(Artifact $artifact, $value);\n\n    /**\n     * Save the value submitted by the user in the new changeset\n     *\n     * @param Artifact                   $artifact           The artifact\n     * @param Tracker_Artifact_Changeset $old_changeset      The old changeset. null if it is the first one\n     * @param int                        $new_changeset_id   The id of the new changeset\n     * @param mixed                      $submitted_value    The value submitted by the user\n     * @param PFUser                     $submitter          The user who made the modification\n     * @param bool                       $is_submission      True if artifact submission, false if artifact update\n     * @param bool                       $bypass_permissions If true, permissions to update/submit the value on field is not checked\n     *\n     * @return bool true if success\n     */\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $updated        = false;\n        $save_new_value = false;\n        $dao            = $this->getChangesetValueDao();\n\n        if ($this instanceof Tracker_FormElement_Field_ReadOnly) {\n            return true;\n        }\n\n        if ($bypass_permissions) {\n            $hasPermission = true;\n        } else {\n            $hasPermission = $this->userCanUpdate($submitter);\n            //If a field is not submitable, but has a required default value, the value has to  be submitted ...\n            if ($is_submission) {\n                $hasPermission = $this->userCanSubmit($submitter) ||\n                    (! $this->userCanSubmit($submitter) && $this->isrequired() && $this->getDefaultValue() != null);\n            }\n        }\n\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n        if ($previous_changesetvalue) {\n            if ($submitted_value === null || ! $hasPermission || ! $this->hasChanges($artifact, $previous_changesetvalue, $submitted_value)) {\n                //keep the old value\n                if ($changeset_value_id = $dao->save($new_changeset_id, $this->id, 0)) {\n                    $updated = $this->keepValue($artifact, $changeset_value_id, $previous_changesetvalue);\n                }\n            } else {\n                $save_new_value = true;\n            }\n        } elseif ($submitted_value === null) {\n            return true;\n        } elseif ($submitted_value !== null && $hasPermission) {\n            $save_new_value = true;\n        }\n\n        if ($save_new_value) {\n            //Save the new value\n            if ($changeset_value_id = $dao->save($new_changeset_id, $this->id, 1)) {\n                $updated = $this->saveValue($artifact, $changeset_value_id, $submitted_value, $previous_changesetvalue, $url_mapping);\n            }\n        }\n\n        return $updated;\n    }\n\n    protected function getChangesetValueDao()\n    {\n        return new Tracker_Artifact_Changeset_ValueDao();\n    }\n\n\n    protected function getPreviousChangesetValue($old_changeset)\n    {\n        $previous_changesetvalue = null;\n        if ($old_changeset) {\n            $previous_changesetvalue = $old_changeset->getValue($this);\n        }\n        return $previous_changesetvalue;\n    }\n\n    /**\n     * Save the value and return the id\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param mixed                           $value                   The value submitted by the user\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return bool\n     */\n    abstract protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    );\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        return $this->getValueDao()->keep($previous_changesetvalue->getId(), $changeset_value_id);\n    }\n\n    /**\n     * Check if there are changes between old and new value for this field\n     *\n     * @param Artifact                        $artifact  The current artifact\n     * @param Tracker_Artifact_ChangesetValue $old_value The data stored in the db\n     * @param mixed                           $new_value May be string or array\n     *\n     * @return bool true if there are differences\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return false;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue|null null if not found\n     */\n    abstract public function getChangesetValue($changeset, $value_id, $has_changed);\n\n    /**\n     * Return REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    /**\n     * Return full REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value = $changeset->getValue($this);\n        if ($value) {\n            return $value->getFullRESTValue($user);\n        }\n        return null;\n    }\n\n    public function getJsonValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        if ($this->userCanRead($user)) {\n            $value = $changeset->getValue($this);\n            return $value ? $value->getJsonValue() : '';\n        }\n        return null;\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    public function getFieldData($value)\n    {\n        // for atomic fields, the field data is the value (int, float, date, string, text)\n        return $value;\n    }\n\n    public function getRestFieldData($value)\n    {\n        return $this->getFieldData($value);\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @param array    $value    PHP representation of submitted Json value\n     * @param Artifact $artifact Artifact to update if any (null during creation)\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (! isset($value['value'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'Expected format for field ' . $this->id .\n                 ' : {\"field_id\" : 15458, \"value\" : some_value'\n            );\n        }\n\n        return $this->getRestFieldData($value['value']);\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        if (! array_key_exists('value', $value)) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'value attribute is missing for field ' . $this->id\n            );\n        }\n\n        return $this->getRestFieldData($value['value']);\n    }\n\n    /**\n     * Get data from CSV value in order to be saved in DB (create/update DB)\n     *\n     * @param string $csv_value\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value);\n    }\n\n    /**\n     * Get the field data for CSV import\n     *\n     * @param string the CSV field value\n     *\n     * @return string the field data corresponding to the CSV preview value for CSV import\n     */\n    public function getFieldDataForCSVPreview($csv_value)\n    {\n        // for most of atomic fields, the field data is the same value (int, float, string, text)\n        $purifier = Codendi_HTMLPurifier::instance();\n        return $purifier->purify($csv_value, CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * Returns true if field has a default value defined, false otherwise\n     *\n     * @return bool true if field has a default value defined, false otherwise\n     */\n    public function hasDefaultValue()\n    {\n        return ($this->getProperty('default_value') !== null);\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        return $this->getProperty('default_value');\n    }\n\n    public function getDefaultRESTValue()\n    {\n        return $this->getDefaultValue();\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        //Do nothing for the majority of fields\n    }\n\n    /**\n     * get the permissions for this field\n     *\n     * @return array\n     */\n    public function getPermissionsByUgroupId()\n    {\n        if (! $this->cache_permissions) {\n            $this->cache_permissions = [];\n            //berk... legacy permission code... legacy db functions... berk!\n            $sql = \"SELECT ugroup_id, permission_type\n                  FROM permissions\n                  WHERE permission_type LIKE 'PLUGIN_TRACKER_FIELD%'\n                    AND object_id='\" . db_ei($this->getId()) . \"'\n                  ORDER BY ugroup_id\";\n\n            $res = db_query($sql);\n            if (db_numrows($res) > 0) {\n                while ($row = db_fetch_array($res)) {\n                    $this->cache_permissions[$row['ugroup_id']][] = $row['permission_type'];\n                }\n            }\n        }\n        return $this->cache_permissions;\n    }\n\n    /**\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        if (! $tracker_is_empty) {\n            $value_dao = $this->getValueDao();\n            if ($value_dao) {\n                $value_dao->createNoneValue($this->getTrackerId(), $this->id);\n            }\n        }\n    }\n\n    /**\n     * Get the last ChangesetValue of the field\n     *\n     * @return Tracker_Artifact_ChangesetValue|null\n     */\n    public function getLastChangesetValue(Artifact $artifact)\n    {\n        return $artifact->getValue($this);\n    }\n\n    /**\n     * Do something after *all* fields are saved as new changset\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return true;\n    }\n\n    public function canBeUsedAsReportColumn()\n    {\n        return true;\n    }\n\n    /**\n     * @return bool\n     */\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    /** @return bool */\n    public function hasCustomFormatForAggregateResults()\n    {\n        return false;\n    }\n\n    /**\n     * Please note that the result may be not a DataAccessResult:\n     *\n     * In case of a simple query that can be computed alongside others, result will be a string (the result from mysql).\n     * In case of a complex query that must be run alone, result will be the DataAccessResult.\n     *\n     * @see Tracker_Report_Renderer_Table::fetchAddAggregatesUsedFunctionsValue()\n     *\n     * @param string                  $function AVG, SUM, \u2026\n     * @param DataAccessResult|string $result\n     *\n     * @return string\n     */\n    public function formatAggregateResult($function, $result)\n    {\n        return '';\n    }\n\n    /**\n     * @return FrozenFieldDetector\n     */\n    protected function getFrozenFieldDetector()\n    {\n        return new FrozenFieldDetector(\n            new TransitionRetriever(\n                new StateFactory(\n                    TransitionFactory::instance(),\n                    new SimpleWorkflowDao()\n                ),\n                new TransitionExtractor()\n            ),\n            FrozenFieldsRetriever::instance(),\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Codendi.\n *\n * Codendi is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Codendi is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Codendi. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n/**\n * Base class for alphanumeric fields (Int, Float, String, Text)\n */\nabstract class Tracker_FormElement_Field_Alphanum extends Tracker_FormElement_Field\n{\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr    = '';\n        $matches = [];\n        // If it is sourrounded by /.../ then assume a regexp\n        if (preg_match('#(!?)/(.*)/#', $criteria_value, $matches)) {\n            //if it has a ! at the beginning then assume negation\n            // !/toto/ => will search all content that doesn't contain the word 'toto'\n            $not = '';\n            if ($matches[1]) {\n                $not = ' NOT';\n            }\n            $expr = $field_name . $not . \" RLIKE \" . $this->quote($matches[2]);\n        }\n        return $expr;\n    }\n\n    protected function quote($string)\n    {\n        $criteria_dao = $this->getCriteriaDao();\n        if ($criteria_dao === null) {\n            return '';\n        }\n        return $criteria_dao->getDa()->quoteSmart($string);\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    public function fetchAdvancedCriteriaValue($criteria)\n    {\n        return null;\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value\";\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            if ($row = $this->getValueDao()->searchById($v->getId(), $this->id)->getRow()) {\n                $value = $row['value'];\n            }\n        }\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2010. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\n\nclass Tracker_FormElement_Field_ArtifactId extends Tracker_FormElement_Field_Integer implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression(\"c.artifact_id\", $criteria_value);\n        }\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return \"a.id AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        return \"a.id\";\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $changeset->getArtifact()->getId()\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        if ($from_aid != null) {\n            return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $value]) . '&from_aid=' . $from_aid . '\">' . $value . '</a>';\n        }\n        return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $value]) . '\">' . $value . '</a>';\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<a href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">#' . (int) $artifact->id . '</a>';\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<a href=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">#' . (int) $artifact->id . '</a>';\n                break;\n            default:\n                $output .= '#' . $artifact->id;\n                break;\n        }\n        return $output;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<a href=\"#' . TRACKER_BASE_URL . '/?aid=123\" onclick=\"return false;\">#42</a>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact ID');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the id of the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/tracker-aid.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/tracker-aid--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html  = '';\n        $html .= $artifact->getId();\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactId($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValue\\ArtifactLink\\ChangesetValueArtifactLinkDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRender;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinksToRenderForPerTrackerTable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ArtifactLinkValueSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\FieldDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\ParentLinkAction;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PossibleParentSelectorRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\PostSaveNewChangesetLinkParentArtifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\RequestDataAugmentor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\SubmittedValueConvertor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\ArtifactInTypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\CSVOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\HTMLOutputStrategy;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\CustomColumn\\ValueFormatter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeTablePresenter;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_ArtifactLink extends Tracker_FormElement_Field\n{\n    public const TYPE                    = 'art_link';\n    public const CREATE_NEW_PARENT_VALUE = -1;\n    public const NEW_VALUES_KEY          = 'new_values';\n    public const TYPE_IS_CHILD           = '_is_child';\n    public const FAKE_TYPE_IS_PARENT     = '_is_parent';\n    public const NO_TYPE                 = '';\n    public const FIELDS_DATA_PARENT_KEY  = 'parent';\n\n    /**\n     * Display some information at the top of the artifact link field value\n     *\n     * Parameters:\n     *   'html'                   => output string html\n     *   'artifact'               => input Tracker_Artifact\n     *   'current_user'           => input PFUser\n     *   'read_only'              => input boolean\n     *   'reverse_artifact_links' => input boolean\n     *   'additional_classes'     => input String[]\n     */\n    public const PREPEND_ARTIFACTLINK_INFORMATION = 'prepend_artifactlink_information';\n\n    /**\n     * Allow to add command to the queue that is processed after a changeset is created.\n     * Add PostSaveNewChangesetCommand objects to the queue.\n     *\n     * Parameters:\n     *    'queue' => input/output Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n     *    'field' => input Tracker_FormElement_Field\n     */\n    public const GET_POST_SAVE_NEW_CHANGESET_QUEUE = 'get_post_save_new_changeset_queue';\n\n    /**\n     * Called just after augmentDataFromRequest has been called.\n     *\n     * Parameters:\n     *    'fields_data' => input/output array\n     *    'field'       => input Tracker_FormElement_Field\n     */\n    public const AFTER_AUGMENT_DATA_FROM_REQUEST = 'after_augment_data_from_request';\n\n    /**\n     * @var Tracker_ArtifactFactory\n     */\n    private $artifact_factory;\n\n    private ?ChangesetValueArtifactLinkDao $cached_changeset_value_dao = null;\n\n    /**\n     * Display the html form in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" autocomplete=\"off\" />';\n        $html .= '<br />';\n        $html .= '<a href=\"#\">bug #123</a><br />';\n        $html .= '<a href=\"#\">bug #321</a><br />';\n        $html .= '<a href=\"#\">story #10234</a>';\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getLink();\n        }\n        $html = implode(', ', $arr);\n        return $html;\n    }\n\n    public function fetchChangesetValueForType(\n        $artifact_id,\n        $changeset_id,\n        $value,\n        $type,\n        $format,\n        $report = null,\n        $from_aid = null,\n    ) {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new HTMLOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $arr    = [];\n        $values = $this->getChangesetValues($this->getCurrentUser(), $changeset_id);\n        foreach ($values as $artifact_link_info) {\n            $arr[] = $artifact_link_info->getArtifactId();\n        }\n\n        return implode(',', $arr);\n    }\n\n    public function fetchCSVChangesetValueWithType($changeset_id, $type, $format)\n    {\n        $value_formatter = new ValueFormatter(\n            Tracker_FormElementFactory::instance(),\n            new CSVOutputStrategy(Codendi_HTMLPurifier::instance())\n        );\n\n        $current_user = $this->getCurrentUser();\n\n        return $value_formatter->fetchFormattedValue(\n            $current_user,\n            $this->getChangesetValues($current_user, $changeset_id),\n            $type,\n            $format\n        );\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        $artifact_id_array = $value->getArtifactIds();\n        return implode(\", \", $artifact_id_array);\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * @return array\n     * @deprecated\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data (REST or CSV) for artifact submission\n     *\n     * @param string   $value    The rest field value\n     * @param Artifact $artifact The artifact the value is to be added/removed\n     *\n     * @return array\n     */\n    public function getFieldData($value, ?Artifact $artifact = null)\n    {\n        $submitted_ids = $this->getFieldDataBuilder()->getArrayOfIdsFromString($value);\n        return $this->getDataLikeWebUI($submitted_ids, [$value], $artifact);\n    }\n\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return $this->getFieldData($csv_value, $artifact);\n    }\n\n    /**\n     * @param array $submitted_ids\n     * @param array $submitted_values\n     *\n     * @return array\n     */\n    private function getDataLikeWebUI(\n        array $submitted_ids,\n        array $submitted_values,\n        ?Artifact $artifact = null,\n    ) {\n        $existing_links = $this->getArtifactLinkIdsOfLastChangeset($artifact);\n        $new_values     = array_diff($submitted_ids, $existing_links);\n        $removed_values = array_diff($existing_links, $submitted_ids);\n\n        return $this->getFieldDataBuilder()->getDataLikeWebUI($new_values, $removed_values, $submitted_values);\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $user_manager   = UserManager::instance();\n        $user           = $user_manager->getCurrentUser();\n        $parent_tracker = $this->getTracker()->getParent();\n\n        if ($artifact->getParent($user) || ! $parent_tracker) {\n            return '';\n        }\n\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        $prefill_parent = '';\n        $name           = 'artifact[' . $this->id . ']';\n        $parent_tracker = $this->getTracker()->getParent();\n        $current_user   = $this->getCurrentUser();\n        $can_create     = false;\n\n        if (! $parent_tracker) {\n            return '';\n        }\n\n        if (isset($submitted_values['disable_artifact_link_field']) && $submitted_values['disable_artifact_link_field']) {\n            return '';\n        }\n\n        return $this->renderParentSelector($prefill_parent, $name, $this->getPossibleParentSelector($current_user, $can_create));\n    }\n\n    private function getArtifactLinkIdsOfLastChangeset(?Artifact $artifact = null)\n    {\n        $link_ids = [];\n\n        $current_user = $this->getCurrentUser();\n\n        if ($artifact && $artifact->getLastChangeset()) {\n            foreach ($this->getChangesetValues($current_user, (int) $artifact->getLastChangeset()->getId()) as $link_info) {\n                $link_ids[] = $link_info->getArtifactId();\n            }\n        }\n\n        return $link_ids;\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_artifactlink AS $b ON (\n                            $b.changeset_value_id = $a.id\n                            AND \" . $this->buildMatchExpression(\"$b.artifact_id\", $criteria_value) . \"\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    /**\n     * @var string\n     */\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr    = '';\n        $matches = [];\n        if (preg_match('/\\/(.*)\\//', $criteria_value, $matches)) {\n            // If it is sourrounded by /.../ then assume a regexp\n            $expr = $field_name . \" RLIKE \" . $this->getCriteriaDao()->da->quoteSmart($matches[1]);\n        }\n        if (! $expr) {\n            $matches = [];\n            if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // It's < or >,  = and a number then use as is\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' ' . $matches[1] . ' ' . $matches[2];\n            } elseif (preg_match(\"/^($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // It's a number so use  equality\n                $matches[1] = $this->cast($matches[1]);\n                $expr       = $field_name . ' = ' . $matches[1];\n            } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)\\$/\", $criteria_value, $matches)) {\n                // it's a range number1-number2\n                $matches[1] = (string) ($this->cast($matches[1]));\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            } else {\n                // Invalid syntax - no condition\n                $expr = '1';\n            }\n        }\n        return $expr;\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_ArtifactLink_ValueDao();\n    }\n\n    private function renderParentSelector(\n        string $prefill_parent,\n        string $name,\n        \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector $possible_parents_selector,\n    ): string {\n        $renderer = PossibleParentSelectorRenderer::buildWithDefaultTemplateRenderer();\n        return $renderer->render($name, $prefill_parent, $possible_parents_selector);\n    }\n\n    private function getPossibleParentSelector(\n        PFUser $user,\n        bool $can_create,\n    ): \\Tuleap\\Tracker\\Artifact\\PossibleParentSelector {\n        $retriever = new PossibleParentsRetriever($this->getArtifactFactory(), EventManager::instance());\n\n        return $retriever->getPossibleArtifactParents(\n            $this->getTracker(),\n            $user,\n            0,\n            0,\n            $can_create,\n        );\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param Artifact $artifact               Artifact on which we operate\n     * @param string   $name                   The name, if any\n     * @param string   $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param array    $prefill_removed_values Pre-remove values (what the user has submitted, if any)\n     * @param string   $prefill_parent         Prefilled parent (what the user has submitted, if any) - Only valid on submit\n     * @param bool     $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    private function fetchHtmlWidget(\n        Artifact $artifact,\n        $name,\n        ArtifactLinksToRender $artifact_links_to_render,\n        $prefill_new_values,\n        $prefill_removed_values,\n        $prefill_type,\n        $prefill_edited_types,\n        $prefill_parent,\n        $read_only,\n        array $additional_classes,\n        $from_aid = null,\n        $reverse_artifact_links = false,\n    ) {\n        $current_user = $this->getCurrentUser();\n        $html         = '';\n        if (! $read_only) {\n            $html = '<div class=\"tracker_formelement_read_and_edit\" data-test=\"artifact-link-section\">';\n        }\n\n        if ($reverse_artifact_links) {\n            $html .= '<div class=\"artifact-link-value-reverse\">';\n            $html .= '<a href=\"\" class=\"btn\" id=\"display-tracker-form-element-artifactlink-reverse\" data-test=\"display-reverse-links\">' . dgettext('tuleap-tracker', 'Display reverse artifact links') . '</a>';\n            $html .= '<div id=\"tracker-form-element-artifactlink-reverse\" data-test=\"reverse-link-section\" style=\"display: none\">';\n        } else {\n            $html .= '<div class=\"artifact-link-value\">';\n        }\n\n        EventManager::instance()->processEvent(\n            self::PREPEND_ARTIFACTLINK_INFORMATION,\n            [\n                'html'                   => &$html,\n                'artifact'               => $artifact,\n                'current_user'           => $current_user,\n                'read_only'              => $read_only,\n                'reverse_artifact_links' => $reverse_artifact_links,\n                'additional_classes'     => $additional_classes,\n            ]\n        );\n\n        $html .= '<h5 class=\"artifack_link_subtitle\">' . $this->getWidgetTitle($reverse_artifact_links) . '</h5>';\n\n        $html_name_new = '';\n\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n\n        $hp              = Codendi_HTMLPurifier::instance();\n        $read_only_class = 'read-only';\n\n        if (! $read_only) {\n            $read_only_class = '';\n            $classes         = implode(\" \", $additional_classes);\n            $html           .= '<section class=\"tracker_formelement_read_and_edit_edition_section tracker-form-element-artifactlink-section ' . $hp->purify($classes) . '\">';\n            $html           .= '<div>';\n            $html           .= '<div><span class=\"input-append\"><input type=\"text\"\n                             ' . $html_name_new . '\n                             class=\"tracker-form-element-artifactlink-new\"\n                             size=\"40\"\n                             data-test=\"artifact-link-submit\"\n                             data-preview-label=\"' . $hp->purify(dgettext('tuleap-tracker', 'Preview')) . '\"\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n\n            $possible_parents_selector = null;\n            if ($artifact->getParentWithoutPermissionChecking() === null) {\n                $can_create                = $artifact->getId() === -1;\n                $possible_parents_selector = $this->getPossibleParentSelector($current_user, $can_create);\n            }\n\n            if ($artifact->getTracker()->isProjectAllowedToUseType()) {\n                $renderer = new \\Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorRenderer(\n                    $this->getTypePresenterFactory(),\n                    $this->getTemplateRenderer(),\n                );\n                $html    .= $renderer->renderToString($artifact, $prefill_type, $name, $possible_parents_selector);\n            }\n            $html .= '</span>';\n            $html .= '</div>';\n\n            if ($possible_parents_selector) {\n                $html .= $this->renderParentSelector($prefill_parent, $name, $possible_parents_selector);\n            }\n            $html .= '</div>';\n            $html .= '</section>'; // end of tracker_formelement_read_and_edit_edition_section\n        }\n\n        $html .= '<div class=\"tracker-form-element-artifactlink-list ' . $read_only_class . '\" data-test=\"artifact-link-section\">';\n        if ($artifact_links_to_render->hasArtifactLinksToDisplay()) {\n            $this_project_id = $this->getTracker()->getProject()->getGroupId();\n            foreach ($artifact_links_to_render->getArtifactLinksForPerTrackerDisplay() as $artifact_links_per_tracker) {\n                /** @var ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker */\n                $renderer = $artifact_links_per_tracker->getRenderer();\n                if ($renderer === null) {\n                    $html .= dgettext('tuleap-tracker', 'No reports available');\n                    continue;\n                }\n\n                $html .= '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                $tracker = $artifact_links_per_tracker->getTracker();\n                $project = $tracker->getProject();\n\n                $project_name = '';\n                if ($project->getGroupId() != $this_project_id) {\n                    $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                    $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                    $project_name .= '</abbr>)';\n                }\n                $html .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                $html .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                $html .= '</h2>';\n\n                $json_encoded_data = json_encode(\n                    [\n                        'artifact_id'            => $artifact->getId(),\n                        'tracker_id'             => $tracker->getId(),\n                        'reverse_artifact_links' => $reverse_artifact_links,\n                        'read_only'              => $read_only,\n                        'from_aid'               => $from_aid,\n                        'prefill_removed_values' => $prefill_removed_values,\n                        'prefill_edited_types'   => $prefill_edited_types,\n                    ]\n                );\n\n                $html .= '<div\n                        class=\"tracker-form-element-artifactlink-renderer-async\"\n                        data-field-id=\"' . (int) $this->getId() . '\"\n                        data-renderer-data=\"' . Codendi_HTMLPurifier::instance()->purify($json_encoded_data) . '\"></div></div>';\n            }\n\n            $html .= $this->fetchTypeTables($artifact_links_to_render, $reverse_artifact_links);\n        } else {\n            $html .= $this->getNoValueLabel();\n        }\n        $html .= '</div>';\n\n        if ($reverse_artifact_links) {\n            $html .= '</div>';\n        }\n        $html .= '</div>';\n        if (! $read_only) {\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    private function fetchRendererAsArtifactLink(\n        ArtifactLinksToRenderForPerTrackerTable $artifact_links_per_tracker,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_edited_types,\n        $reverse_artifact_links,\n        $from_aid,\n    ) {\n        $renderer = $artifact_links_per_tracker->getRenderer();\n        if (! $renderer) {\n            return '';\n        }\n\n        $matching_ids = $artifact_links_per_tracker->getMatchingIDs();\n\n        return $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $prefill_removed_values, $prefill_edited_types, $reverse_artifact_links, false, $from_aid);\n    }\n\n    private function fetchTypeTables(ArtifactLinksToRender $artifact_links_to_render, $is_reverse_artifact_links)\n    {\n        static $type_tables_cache = [];\n        if (isset($type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links])) {\n            return $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links];\n        }\n        $html              = '';\n        $template_renderer = $this->getTemplateRenderer();\n        foreach ($artifact_links_to_render->getArtifactLinksForPerTypeDisplay() as $artifact_links_per_type) {\n            $html .= $template_renderer->renderToString(\n                'artifactlink-type-table',\n                new TypeTablePresenter(\n                    $artifact_links_per_type->getTypePresenter(),\n                    $artifact_links_per_type->getArtifactLinks(),\n                    $is_reverse_artifact_links,\n                    $this\n                )\n            );\n        }\n        $type_tables_cache[spl_object_hash($artifact_links_to_render)][$is_reverse_artifact_links] = $html;\n        return $html;\n    }\n\n    /**\n     *\n     * @param bool $reverse_artifact_links\n     */\n    private function getWidgetTitle($reverse_artifact_links)\n    {\n        if ($reverse_artifact_links) {\n            return dgettext('tuleap-tracker', 'Reverse artifact links');\n        }\n\n        return dgettext('tuleap-tracker', 'Artifact links');\n    }\n\n    /**\n     * Process the request\n     *\n     * @param Tracker_IDisplayTrackerLayout  $layout          Displays the page header and footer\n     * @param Codendi_Request                $request         The data coming from the user\n     * @param PFUser                           $current_user    The user who mades the request\n     *\n     * @return void\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case 'fetch-artifacts':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $prefill_edited_types   = [];\n                $only_rows              = true;\n                $this_project_id        = $this->getTracker()->getProject()->getGroupId();\n                $is_reverse             = false;\n                $hp                     = Codendi_HTMLPurifier::instance();\n\n                $ugroups = $current_user->getUgroups($this_project_id, []);\n\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $result  = [];\n                if ($this->getTracker()->isProjectAllowedToUseType()) {\n                    $type_shortname = $request->get('type');\n                    $type_presenter = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n                }\n                //We must retrieve the last changeset ids of each artifact id.\n                $dao = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n\n                    if ($tracker->userCanView() && ! $tracker->isDeleted()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                            foreach (explode(',', $matching_ids['id']) as $id) {\n                                $matching_ids['type'][$id] = $type_presenter;\n                            }\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key          = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $result[$key] = $renderer->fetchAsArtifactLink($matching_ids, $this->getId(), $read_only, $is_reverse, $prefill_removed_values, $prefill_edited_types, $only_rows);\n                                    $head         = '<div class=\"tracker-form-element-artifactlink-trackerpanel\">';\n\n                                    $project_name = '';\n                                    if ($project->getGroupId() != $this_project_id) {\n                                        $project_name  = ' (<abbr title=\"' . $hp->purify($project->getPublicName(), CODENDI_PURIFIER_CONVERT_HTML) . '\">';\n                                        $project_name .= $hp->purify($project->getUnixName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                        $project_name .= '</abbr>)';\n                                    }\n                                    $head .= '<h2 class=\"tracker-form-element-artifactlink-tracker_' . $tracker->getId() . '\">';\n                                    $head .= $hp->purify($tracker->getName(), CODENDI_PURIFIER_CONVERT_HTML) . $project_name;\n                                    $head .= '</h2>';\n                                    //if ($artifact) {\n                                    //    $title = $hp->purify('link a '. $tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML);\n                                    //    $head .= '<a href=\"'.TRACKER_BASE_URL.'/?tracker='.$tracker_id.'&func=new-artifact-link&id='.$artifact->getId().'\" class=\"tracker-form-element-artifactlink-link-new-artifact\">'. 'create a new '.$hp->purify($tracker->getItemName(), CODENDI_PURIFIER_CONVERT_HTML)  .'</a>';\n                                    //}\n                                    $result[$key]['head'] = $head . $result[$key]['head'];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                $this->appendTypeTable($request, $result);\n                if ($result) {\n                    $head = [];\n                    $rows = [];\n                    foreach ($result as $key => $value) {\n                        $head[$key] = $value[\"head\"];\n                        $rows[$key] = $value[\"rows\"];\n                    }\n                    $GLOBALS['HTML']->sendJSON(['head' => $head, 'rows' => $rows]);\n                }\n                exit();\n            case 'fetch-aggregates':\n                $read_only              = false;\n                $prefill_removed_values = [];\n                $only_rows              = true;\n                $only_one_column        = false;\n                $extracolumn            = Tracker_Report_Renderer_Table::EXTRACOLUMN_UNLINK;\n                $read_only              = true;\n                $use_data_from_db       = false;\n\n                $ugroups = $current_user->getUgroups($this->getTracker()->getGroupId(), []);\n                $ids     = $request->get('ids'); //2, 14, 15\n                $tracker = [];\n                $json    = ['tabs' => []];\n                $dao     = new Tracker_ArtifactDao();\n                foreach ($dao->searchLastChangesetIds($ids, $ugroups, $current_user->isSuperUser()) as $matching_ids) {\n                    $tracker_id = $matching_ids['tracker_id'];\n                    $tracker    = $this->getTrackerFactory()->getTrackerById($tracker_id);\n                    $project    = $tracker->getProject();\n                    if ($tracker->userCanView()) {\n                        if ($this->getTracker()->isProjectAllowedToUseType()) {\n                            $matching_ids['type'] = [];\n                        }\n                        $trf    = Tracker_ReportFactory::instance();\n                        $report = $trf->getDefaultReportsByTrackerId($tracker->getId());\n                        if ($report) {\n                            $renderers = $report->getRenderers();\n                            // looking for the first table renderer\n                            foreach ($renderers as $renderer) {\n                                if ($renderer->getType() === Tracker_Report_Renderer::TABLE) {\n                                    $key            = $this->id . '_' . $report->id . '_' . $renderer->getId();\n                                    $columns        = $renderer->getTableColumns($only_one_column, $use_data_from_db);\n                                    $json['tabs'][] = [\n                                        'key' => $key,\n                                        'src' => $renderer->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only),\n                                    ];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                $GLOBALS['HTML']->sendJSON($json);\n                exit();\n            case 'artifactlink-renderer-async':\n                session_write_close();\n                if (! $request->isAjax()) {\n                    return;\n                }\n\n                if (! $request->get('renderer_data')) {\n                    return;\n                }\n\n                $renderer_data = json_decode($request->get('renderer_data'), true);\n                if (! $renderer_data) {\n                    return;\n                }\n\n                $expected_keys                  = array_flip([\n                    'artifact_id',\n                    'tracker_id',\n                    'reverse_artifact_links',\n                    'read_only',\n                    'prefill_removed_values',\n                    'prefill_edited_types',\n                    'from_aid',\n                ]);\n                $are_expected_keys_part_of_data = empty(array_diff_key($expected_keys, $renderer_data));\n                if (! $are_expected_keys_part_of_data) {\n                    return;\n                }\n\n                $artifact_id = $renderer_data['artifact_id'];\n                $artifact    = $this->getArtifactFactory()->getArtifactByIdUserCanView($current_user, $artifact_id);\n                if (! $artifact) {\n                    return;\n                }\n\n                $target_tracker_id = $renderer_data['tracker_id'];\n                $tracker           = $this->getTrackerFactory()->getTrackerById($target_tracker_id);\n                if (! $tracker->userCanView($current_user)) {\n                    return;\n                }\n\n                if ($renderer_data['reverse_artifact_links']) {\n                    $artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n                } else {\n                    $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue(\n                        $artifact->getValue($this)\n                    );\n                }\n\n                $artifact_links_per_tracker = $artifact_links_to_render->getArtifactLinksForAGivenTracker($tracker);\n                if (! $artifact_links_per_tracker) {\n                    return;\n                }\n\n                echo $this->fetchRendererAsArtifactLink(\n                    $artifact_links_per_tracker,\n                    $renderer_data['read_only'],\n                    $renderer_data['prefill_removed_values'],\n                    $renderer_data['prefill_edited_types'],\n                    $renderer_data['reverse_artifact_links'],\n                    $renderer_data['from_aid']\n                );\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n                break;\n        }\n    }\n\n    /**\n     * Fetch the html widget for the field\n     *\n     * @param string $name                   The name, if any\n     * @param array  $artifact_links         The current artifact links\n     * @param string $prefill_new_values     Prefill new values field (what the user has submitted, if any)\n     * @param bool   $read_only              True if the user can't add or remove links\n     *\n     * @return string html\n     */\n    protected function fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only)\n    {\n        $html          = '';\n        $html_name_new = '';\n        if ($name) {\n            $html_name_new = 'name=\"' . $name . '[new_values]\"';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        if (! $read_only) {\n            $html .= '<input type=\"text\"\n                             ' . $html_name_new . '\n                             value=\"' .  $hp->purify($prefill_new_values, CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                             title=\"' . dgettext('tuleap-tracker', 'Enter artifact ids separated with a comma') . '\" />';\n            $html .= '<br />';\n        }\n        if ($artifact_links) {\n            $html .= '<ul class=\"tracker-form-element-artifactlink-list\">';\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>';\n                $html .= $artifact_link_info->getLink();\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $links_tab         = $this->fetchLinks($artifact, $this->getArtifactLinksToRenderFromChangesetValue($value), $submitted_values);\n        $reverse_links_tab = $this->fetchReverseLinks($artifact);\n\n        return $links_tab . $reverse_links_tab;\n    }\n\n    private function fetchLinks(\n        Artifact $artifact,\n        ArtifactLinksToRender $artifact_links_to_render,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()])) {\n            $submitted_value = $submitted_values[$this->getId()];\n        }\n\n        $prefill_new_values = '';\n        if (isset($submitted_value['new_values'])) {\n            $prefill_new_values = $submitted_value['new_values'];\n        }\n\n        $prefill_removed_values = [];\n        if (isset($submitted_value['removed_values'])) {\n            $prefill_removed_values = $submitted_value['removed_values'];\n        }\n\n        $prefill_type = '';\n        if (isset($submitted_value['type'])) {\n            $prefill_type = $submitted_value['type'];\n        }\n\n        $prefill_edited_types = [];\n        if (isset($submitted_value['types'])) {\n            $prefill_edited_types = $submitted_value['types'];\n        }\n\n        $read_only      = false;\n        $name           = 'artifact[' . $this->id . ']';\n        $from_aid       = $artifact->getId();\n        $prefill_parent = '';\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    private function getArtifactLinksToRenderFromChangesetValue(?Tracker_Artifact_ChangesetValue $value)\n    {\n        $artifact_links = [];\n        if ($value !== null) {\n            $artifact_links = $value->getValue();\n        }\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n    }\n\n    private function getReverseArtifactLinksToRender(Artifact $artifact)\n    {\n        $reverse_links = $this->getReverseLinks($artifact->getId());\n\n        return new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$reverse_links\n        );\n    }\n\n    private function fetchReverseLinks(Artifact $artifact)\n    {\n        $from_aid = $artifact->getId();\n\n        $reverse_artifact_links_to_render = $this->getReverseArtifactLinksToRender($artifact);\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            '',\n            $reverse_artifact_links_to_render,\n            '',\n            '',\n            '',\n            [],\n            '',\n            true,\n            [],\n            $from_aid,\n            true\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        ?ArtifactLinksToRender $artifact_links_to_render = null,\n    ) {\n        if ($artifact_links_to_render === null) {\n            $artifact_links_to_render = $this->getArtifactLinksToRenderFromChangesetValue($value);\n        }\n        $links_tab_read_only = $this->fetchLinksReadOnly($artifact, $artifact_links_to_render);\n        $reverse_links_tab   = $this->fetchReverseLinks($artifact);\n\n        return $links_tab_read_only . $reverse_links_tab;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValue($artifact, $value, $submitted_values) .\n            \"<div class='tracker_hidden_edition_field' data-field-id=\" . $this->getId() . '></div>';\n    }\n\n    private function fetchLinksReadOnly(Artifact $artifact, ArtifactLinksToRender $artifact_links_to_render)\n    {\n        $read_only              = true;\n        $name                   = '';\n        $prefill_new_values     = '';\n        $prefill_removed_values = [];\n        $prefill_type           = '';\n        $prefill_edited_types   = [];\n        $prefill_parent         = '';\n        $from_aid               = $artifact->getId();\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [],\n            $from_aid\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html               = '';\n        $prefill_new_values = '';\n        if (isset($submitted_values[$this->getId()]['new_values'])) {\n            $prefill_new_values = $submitted_values[$this->getId()]['new_values'];\n        } elseif ($this->hasDefaultValue()) {\n            $prefill_new_values = $this->getDefaultValue();\n        }\n        $prefill_parent = '';\n        if (isset($submitted_values[$this->getId()]['parent'])) {\n            $prefill_parent = $submitted_values[$this->getId()]['parent'];\n        }\n        $prefill_type = '';\n        if (isset($submitted_values[$this->getId()]['type'])) {\n            $prefill_type = $submitted_values[$this->getId()]['type'];\n        }\n        $prefill_edited_types = [];\n        if (isset($submitted_values[$this->getId()]['types'])) {\n            $prefill_edited_types = $submitted_values[$this->getId()]['types'];\n        }\n        $read_only              = false;\n        $name                   = 'artifact[' . $this->id . ']';\n        $prefill_removed_values = [];\n        $artifact_links         = [];\n\n        // Well, shouldn't be here but API doesn't provide a Null Artifact on creation yet\n        // Here to avoid having to pass null arg for fetchHtmlWidget\n        $artifact = new Artifact(-1, $this->tracker_id, $this->getCurrentUser()->getId(), 0, false);\n\n        $artifact_links_to_render = new ArtifactLinksToRender(\n            $this->getCurrentUser(),\n            $this,\n            $this->getTrackerFactory(),\n            Tracker_ReportFactory::instance(),\n            $this->getTypePresenterFactory(),\n            ...$artifact_links\n        );\n\n        return $this->fetchHtmlWidget(\n            $artifact,\n            $name,\n            $artifact_links_to_render,\n            $prefill_new_values,\n            $prefill_removed_values,\n            $prefill_type,\n            $prefill_edited_types,\n            $prefill_parent,\n            $read_only,\n            [\"tracker_formelement_artifact_link_editable_on_submit\"]\n        );\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html               = '';\n        $prefill_new_values = dgettext('tuleap-tracker', 'Unchanged');\n        $read_only          = false;\n        $name               = 'artifact[' . $this->id . ']';\n        $artifact_links     = [];\n\n        return $this->fetchHtmlWidgetMasschange($name, $artifact_links, $prefill_new_values, $read_only);\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of the field\n     *\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value != null) {\n            $html           = '<ul>';\n            $artifact_links = $value->getValue();\n            foreach ($artifact_links as $artifact_link_info) {\n                $html .= '<li>' . $artifact_link_info->getLabel() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n        return $html;\n    }\n\n    /**\n     * @return ArtifactLinkFieldValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ArtifactLinkFieldValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getValue()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $artifactlink_infos = $value->getValue();\n                $url                = [];\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $url[] = $artifactlink_info->getLink();\n                    }\n                }\n                return implode(' , ', $url);\n            default:\n                $output             = PHP_EOL;\n                $artifactlink_infos = $value->getValue();\n                foreach ($artifactlink_infos as $artifactlink_info) {\n                    if ($ignore_perms || $artifactlink_info->userCanView($user)) {\n                        $output .= $artifactlink_info->getLabel();\n                        $output .= PHP_EOL;\n                    }\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        // never used...\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $rows                   = $this->getValueDao()->searchById($value_id, $this->id);\n        $artifact_links         = $this->getArtifactLinkInfos($rows);\n        $reverse_artifact_links = [];\n\n        if ($changeset) {\n            $reverse_artifact_links = $this->getReverseLinks($changeset->getArtifact()->getId());\n        }\n\n        return new Tracker_Artifact_ChangesetValue_ArtifactLink(\n            $value_id,\n            $changeset,\n            $this,\n            $has_changed,\n            $artifact_links,\n            $reverse_artifact_links\n        );\n    }\n\n    private function getReverseLinks($artifact_id)\n    {\n        $links_data = $this->getValueDao()->searchReverseLinksById($artifact_id);\n\n        return $this->getArtifactLinkInfos($links_data);\n    }\n\n    /**\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    private function getArtifactLinkInfos($data)\n    {\n        $artifact_links = [];\n        while ($row = $data->getRow()) {\n            $artifact_links[$row['artifact_id']] = new Tracker_ArtifactLinkInfo(\n                $row['artifact_id'],\n                $row['keyword'],\n                $row['group_id'],\n                $row['tracker_id'],\n                $row['last_changeset_id'],\n                $row['nature']\n            );\n        }\n\n        return $artifact_links;\n    }\n\n    /**\n     * @var array\n     */\n    protected $artifact_links_by_changeset = [];\n\n    /**\n     *\n     * @param int $changeset_id\n     *\n     * @return Tracker_ArtifactLinkInfo[]\n     */\n    protected function getChangesetValues(PFUser $user, $changeset_id): array\n    {\n        if (! isset($this->artifact_links_by_changeset[$changeset_id])) {\n            $this->artifact_links_by_changeset[$changeset_id] = [];\n\n            $dao = $this->getChangesetValueArtifactLinkDao();\n            foreach ($dao->searchChangesetValues($this->id, $changeset_id) as $row) {\n                $artifact_link_info = new Tracker_ArtifactLinkInfo(\n                    $row['artifact_id'],\n                    $row['keyword'],\n                    $row['group_id'],\n                    $row['tracker_id'],\n                    $row['last_changeset_id'],\n                    $row['nature']\n                );\n\n                if (! $artifact_link_info->userCanView($user)) {\n                    continue;\n                }\n\n                $this->artifact_links_by_changeset[$row['changeset_id']][] = $artifact_link_info;\n            }\n        }\n        return $this->artifact_links_by_changeset[$changeset_id];\n    }\n\n    private function getChangesetValueArtifactLinkDao(): ChangesetValueArtifactLinkDao\n    {\n        if (! $this->cached_changeset_value_dao) {\n            $this->cached_changeset_value_dao = new ChangesetValueArtifactLinkDao();\n        }\n\n        return $this->cached_changeset_value_dao;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        if (! $old_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink) {\n            return false;\n        }\n\n        $submitted_value = $this->getSubmittedValueConvertor()->convert(\n            $new_value,\n            $old_value\n        );\n\n        return $old_value->hasChanges($submitted_value);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Artifact Link');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Links to other artifacts');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/artifact-chain--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param array    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! $this->validate($artifact, $value);\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ((! is_array($submitted_value) || empty($value['new_values'])) && $this->isRequired()) {\n            if (! $this->isEmpty($submitted_value, $artifact)) {\n                // Field is required but there are values, so field is valid\n                $this->has_errors = false;\n            } else {\n                $this->addRequiredError();\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Say if the submitted value is empty\n     * if no last changeset values and empty submitted values : empty\n     * if not empty last changeset values and empty submitted values : not empty\n     * if empty new values and not empty last changeset values and not empty removed values have the same size: empty\n     *\n     * @param array            $submitted_value\n     *\n     * @return bool true if the submitted value is empty\n     */\n    public function isEmpty($submitted_value, Artifact $artifact)\n    {\n        $hasNoNewValues           = empty($submitted_value['new_values']);\n        $hasNoLastChangesetValues = true;\n        $last_changeset_values    = [];\n        $last_changeset_value     = $this->getLastChangesetValue($artifact);\n\n        if ($last_changeset_value) {\n            $last_changeset_values    = $last_changeset_value->getArtifactIds();\n            $hasNoLastChangesetValues = empty($last_changeset_values);\n        }\n\n        $hasLastChangesetValues = ! $hasNoLastChangesetValues;\n\n        if (\n            ($hasNoLastChangesetValues &&\n            $hasNoNewValues) ||\n             ($hasLastChangesetValues &&\n             $hasNoNewValues &&\n                $this->allLastChangesetValuesRemoved($last_changeset_values, $submitted_value))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Say if all values of the changeset have been removed\n     *\n     * @param array $last_changeset_values\n     * @param array $submitted_value\n     *\n     * @return bool true if all values have been removed\n     */\n    private function allLastChangesetValuesRemoved($last_changeset_values, $submitted_value)\n    {\n        return ! empty($submitted_value['removed_values'])\n            && count($last_changeset_values) == count($submitted_value['removed_values']);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param string   $value    data coming from the request. Should be artifact id separated by comma\n     *\n     * @return bool true if the value is considered ok\n     * @deprecated Use ArtifactLinkValidator instead\n     *\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function setArtifactFactory(Tracker_ArtifactFactory $artifact_factory)\n    {\n        $this->artifact_factory = $artifact_factory;\n    }\n\n    /**\n     * @return Tracker_ArtifactFactory\n     */\n    private function getArtifactFactory()\n    {\n        if (! $this->artifact_factory) {\n            $this->artifact_factory = Tracker_ArtifactFactory::instance();\n        }\n        return $this->artifact_factory;\n    }\n\n    public function getTrackerFactory()\n    {\n        return TrackerFactory::instance();\n    }\n\n    /**\n     * @return Tracker_HierarchyFactory\n     */\n    protected function getHierarchyFactory()\n    {\n        return Tracker_HierarchyFactory::instance();\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ): void {\n        $queue = $this->getPostNewChangesetQueue();\n        $queue->execute($artifact, $submitter, $new_changeset, $fields_data, $previous_changeset);\n    }\n\n    private function getPostNewChangesetQueue(): Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue\n    {\n        $queue = new Tracker_FormElement_Field_ArtifactLink_PostSaveNewChangesetQueue();\n        $queue->add($this->getProcessChildrenTriggersCommand());\n        $queue->add($this->getPostSaveNewChangesetLinkParentArtifact());\n\n        EventManager::instance()->processEvent(\n            self::GET_POST_SAVE_NEW_CHANGESET_QUEUE,\n            [\n                'field' => $this,\n                'queue' => $queue,\n            ]\n        );\n\n        return $queue;\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getProcessChildrenTriggersCommand(): Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand\n    {\n        return new Tracker_FormElement_Field_ArtifactLink_ProcessChildrenTriggersCommand(\n            $this,\n            $this->getWorkflowFactory()->getTriggerRulesManager()\n        );\n    }\n\n    /**\n     * @protected for testing purpose\n     */\n    protected function getPostSaveNewChangesetLinkParentArtifact(): PostSaveNewChangesetLinkParentArtifact\n    {\n        return new PostSaveNewChangesetLinkParentArtifact(\n            new ParentLinkAction(\n                $this->getArtifactFactory(),\n            )\n        );\n    }\n\n    public function saveNewChangeset(\n        Artifact $artifact,\n        ?Tracker_Artifact_Changeset $old_changeset,\n        int $new_changeset_id,\n        $submitted_value,\n        PFUser $submitter,\n        bool $is_submission,\n        bool $bypass_permissions,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $previous_changesetvalue = $this->getPreviousChangesetValue($old_changeset);\n\n        $value = $this->getNormalizedSubmittedValue($submitted_value);\n\n        $convertor       = $this->getSubmittedValueConvertor();\n        $submitted_value = $convertor->convert(\n            $value,\n            $previous_changesetvalue\n        );\n\n        return parent::saveNewChangeset(\n            $artifact,\n            $old_changeset,\n            $new_changeset_id,\n            $submitted_value,\n            $submitter,\n            $is_submission,\n            $bypass_permissions,\n            $url_mapping\n        );\n    }\n\n    /**\n     * Sometimes, for example during a post action for a trigger, the workflow pass null as submitted value.\n     * ArtifactLinks don't like very much this null so force it to a decent, empty value.\n     */\n    private function getNormalizedSubmittedValue($value)\n    {\n        if (is_null($value)) {\n            $value = ['new_values' => ''];\n        }\n\n        return $value;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $submitted_value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $saver = $this->getArtifactLinkValueSaver();\n\n        return $saver->saveValue(\n            $this,\n            $this->getCurrentUser(),\n            $artifact,\n            $changeset_value_id,\n            $submitted_value\n        );\n    }\n\n    /** @return ArtifactLinkValueSaver */\n    private function getArtifactLinkValueSaver()\n    {\n        return new ArtifactLinkValueSaver(\n            Tracker_ArtifactFactory::instance(),\n            $this->getValueDao(),\n            new Tracker_ReferenceManager(\n                ReferenceManager::instance(),\n                Tracker_ArtifactFactory::instance()\n            ),\n            EventManager::instance(),\n            new ArtifactLinksUsageDao(),\n            $this->getTrackerFactory()->getTriggerRulesManager()\n        );\n    }\n\n    private function getSubmittedValueConvertor(): SubmittedValueConvertor\n    {\n        return new SubmittedValueConvertor(\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Retrieve linked artifacts according to user's permissions\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                       $user      The user who will see the artifacts\n     *\n     * @return Artifact[]\n     */\n    public function getLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user)\n    {\n        $artifacts       = [];\n        $changeset_value = $changeset->getValue($this);\n        if ($changeset_value) {\n            foreach ($changeset_value->getArtifactIds() as $id) {\n                $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n            }\n        }\n        return $artifacts;\n    }\n\n    /**\n     * Retrieve sliced linked artifacts according to user's permissions\n     *\n     * This is nearly the same as a paginated list however, for performance\n     * reasons, the total size may be different than the sum of total paginated\n     * artifacts.\n     *\n     * Example to illustrate the difference between paginated and sliced:\n     *\n     * Given that artifact links are [12, 13, 24, 39, 65, 69]\n     * And that the user cannot see artifact #39\n     * When I request linked artifacts by bunchs of 2\n     * Then I get [[12, 13], [24], [65, 69]]  # instead of [[12, 13], [24, 65], [69]]\n     * And total size will be 6               # instead of 5\n     *\n     * @param Tracker_Artifact_Changeset $changeset The changeset you want to retrieve artifact from\n     * @param PFUser                     $user      The user who will see the artifacts\n     * @param int                        $limit     The number of artifact to fetch\n     * @param int                        $offset    The offset\n     *\n     * @return Tracker_Artifact_PaginatedArtifacts\n     */\n    public function getSlicedLinkedArtifacts(Tracker_Artifact_Changeset $changeset, PFUser $user, $limit, $offset)\n    {\n        $changeset_value = $changeset->getValue($this);\n        if (! $changeset_value) {\n            return new Tracker_Artifact_PaginatedArtifacts([], 0);\n        }\n\n        assert($changeset_value instanceof Tracker_Artifact_ChangesetValue_ArtifactLink);\n        $artifact_ids = $changeset_value->getArtifactIds();\n        $size         = count($artifact_ids);\n\n        $artifacts = [];\n        foreach (array_slice($artifact_ids, $offset, $limit) as $id) {\n            $this->addArtifactUserCanViewFromId($artifacts, $id, $user);\n        }\n\n        return new Tracker_Artifact_PaginatedArtifacts($artifacts, $size);\n    }\n\n    private function addArtifactUserCanViewFromId(array &$artifacts, $id, PFUser $user): void\n    {\n        $artifact = $this->getArtifactFactory()->getArtifactById($id);\n        if ($artifact && $artifact->userCanView($user)) {\n            $artifacts[] = $artifact;\n        }\n    }\n\n    /**\n     * If request come with a 'parent', it should be store in a cache\n     * that will be called after the artifact update to create the\n     * right _is_child link\n     *\n     * Please note that it only work on artifact creation.\n     *\n     * @param array $fields_data\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        $request_data_augmentor = new RequestDataAugmentor(\n            EventManager::instance()\n        );\n\n        $request_data_augmentor->augmentDataFromRequest(\n            $this,\n            $fields_data\n        );\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitArtifactLink($this);\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    protected function getTypePresenterFactory()\n    {\n        return new TypePresenterFactory(new TypeDao(), new ArtifactLinksUsageDao());\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function appendTypeTable(Codendi_Request $request, array &$result)\n    {\n        if (! $this->getTracker()->isProjectAllowedToUseType()) {\n            return;\n        }\n\n        $type_shortname = $request->get('type');\n        if (! $type_shortname) {\n            return;\n        }\n\n        $type_presenter        = $this->getTypePresenterFactory()->getFromShortname($type_shortname);\n        $key                   = \"type_$type_shortname\";\n        $art_factory           = $this->getArtifactFactory();\n        $artifact_html_classes = 'additional';\n        $type_html             = '';\n        $head_html             = '';\n        $ids                   = $request->get('ids');\n\n        foreach (explode(',', $ids) as $id) {\n            $artifact = $art_factory->getArtifactById(trim($id));\n\n            if (! is_null($artifact) && $artifact->getTracker()->isActive()) {\n                $type_html .= $this->getTemplateRenderer()->renderToString(\n                    'artifactlink-type-table-row',\n                    new ArtifactInTypeTablePresenter($artifact, $artifact_html_classes, $this)\n                );\n            }\n        }\n\n        if ($type_html !== '') {\n            $head_html = $this->getTemplateRenderer()->renderToString(\n                'artifactlink-type-table-head',\n                TypeTablePresenter::buildForHeader($type_presenter, $this)\n            );\n\n            $result[$key] = ['head' => $head_html, 'rows' => $type_html];\n        } else {\n            $result[$key] = [];\n        }\n    }\n\n    private function getFieldDataBuilder()\n    {\n        return new FieldDataBuilder();\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\BurndownCacheIsCurrentlyCalculatedException;\nuse Tuleap\\Tracker\\FormElement\\BurndownFieldPresenter;\nuse Tuleap\\Tracker\\FormElement\\ChartCachedDaysComparator;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationFieldRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueChecker;\nuse Tuleap\\Tracker\\FormElement\\ChartConfigurationValueRetriever;\nuse Tuleap\\Tracker\\FormElement\\ChartFieldUsage;\nuse Tuleap\\Tracker\\FormElement\\ChartMessageFetcher;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCacheGenerationChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCacheGenerator;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownCommonDataBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownDataBuilderForLegacy;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownDataBuilderForREST;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownRemainingEffortAdderForLegacy;\nuse Tuleap\\Tracker\\FormElement\\Field\\Burndown\\BurndownRemainingEffortAdderForREST;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\IComputeTimeframes;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse Tuleap\\Tracker\\UserWithReadAllPermissionBuilder;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Burndown extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly\n{\n    public const LOG_IDENTIFIER = 'burndown_syslog';\n\n    /**\n     * Request parameter to display burndown image\n     */\n    public const FUNC_SHOW_BURNDOWN = 'show_burndown';\n\n    /**\n     * @var Tracker_HierarchyFactory\n     */\n    private $hierarchy_factory;\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Burndown Chart');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the burndown chart for the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burndown.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/burndown--plus.png');\n    }\n\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Returns the previously injected factory (e.g. in tests), or a new\n     * instance (e.g. in production).\n     *\n     * @return Tracker_HierarchyFactory\n     */\n    public function getHierarchyFactory()\n    {\n        if ($this->hierarchy_factory == null) {\n            $this->hierarchy_factory = Tracker_HierarchyFactory::instance();\n        }\n        return $this->hierarchy_factory;\n    }\n\n    /**\n     * Provides a way to inject the HierarchyFactory, since it cannot be done\n     * in the constructor.\n     *\n     * @param Tracker_HierarchyFactory $hierarchy_factory\n     */\n    public function setHierarchyFactory($hierarchy_factory)\n    {\n        $this->hierarchy_factory = $hierarchy_factory;\n    }\n\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        $html  = $this->fetchBurndownReadOnly($artifact);\n        $html .= $this->fetchBurndownCacheGenerationButton($artifact);\n\n        return $html;\n    }\n\n    public function fetchBurndownReadOnly(Artifact $artifact)\n    {\n        $user               = $this->getCurrentUser();\n        $burndown_presenter = $this->buildPresenter($artifact, $user);\n\n        return $this->renderPresenter($burndown_presenter);\n    }\n\n    public function buildPresenter(Artifact $artifact, PFUser $user)\n    {\n        $warning                      = \"\";\n        $burndown_rest_representation = null;\n\n        try {\n            $value_retriever = $this->getBurndownConfigurationValueRetriever();\n\n            $burndown_data = $this->getBurndownData(\n                $artifact,\n                $user,\n                $value_retriever->getTimePeriod($artifact, $user)\n            );\n\n            if ($burndown_data->isBeingCalculated()) {\n                $warning = dgettext(\n                    'tuleap-tracker',\n                    'Burndown is under calculation. It will be available in a few minutes.'\n                );\n            }\n\n            $burndown_rest_representation = $burndown_data->getRESTRepresentation();\n        } catch (BurndownCacheIsCurrentlyCalculatedException $error) {\n            $burndown_representation = null;\n            $warning                 = $error->getMessage();\n        } catch (Tracker_FormElement_Chart_Field_Exception $error) {\n            $burndown_representation = null;\n            $warning                 = $error->getMessage();\n        }\n\n        $assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n\n        $css_file_url = $assets->getFileURL('burndown-chart.css');\n        $GLOBALS['HTML']->includeFooterJavascriptFile($assets->getFileURL('burndown-chart.js'));\n\n        return new BurndownFieldPresenter(\n            $user,\n            $css_file_url,\n            $warning,\n            $burndown_rest_representation\n        );\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $html    .= '<img src=\"' . $this->getBurndownImageUrl($artifact) . '\" alt=\"' .\n            $purifier->purify($this->getLabel()) . '\" width=\"390\" height=\"400\" />';\n\n        return $html;\n    }\n\n    private function fetchBurndownCacheGenerationButton(Artifact $artifact)\n    {\n        $user = $this->getCurrentUser();\n\n        $html = \"\";\n        if (\n            $user->isAdmin($artifact->getTracker()->getGroupId())\n            && $this->getBurndownCacheChecker()->isCacheBurndownAlreadyAsked($artifact) === false\n            && $this->getBurndownConfigurationValueChecker()->areBurndownFieldsCorrectlySet($artifact, $user)\n            && ! strpos($_SERVER['REQUEST_URI'], 'from_agiledashboard')\n        ) {\n            $html .= '<a class=\"btn chart-cache-button-generate\" data-toggle=\"modal\" href=\"#burndown-generate\">' .\n                dgettext('tuleap-tracker', 'Force cache regeneration') . '</a>';\n\n            $html .= $this->fetchBurndownGenerationModal($artifact);\n        }\n\n        return $html;\n    }\n\n    private function fetchBurndownGenerationModal(Artifact $artifact)\n    {\n        $header = dgettext('tuleap-tracker', 'Force cache regeneration');\n\n        $body = dgettext('tuleap-tracker', 'Do you really want to force burndown cache generation? Cache generation will end up on a non availability of burndown for few minutes.');\n\n        $cancel = dgettext('tuleap-tracker', 'Cancel');\n\n        $generate = dgettext('tuleap-tracker', 'Force cache regeneration');\n\n        return '<div id=\"burndown-generate\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-header\">\n                    <h3>' . $header . '</h3>\n                </div>\n                <div class=\"modal-body\">\n                   ' . $body . '\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">' . $cancel . '</button>\n                    <a href=\"?aid=' . $artifact->getId() . '&func=burndown-cache-generate&field=' . $this->getId() . '\"\n                        class=\"btn btn-primary force-burndown-generation\" name=\"add-keys\">' . $generate . '</a>\n                </div>\n            </div>';\n    }\n\n    /**\n     *\n     * @param Codendi_Request               $request\n     * @param PFUser                        $current_user\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        switch ($request->get('func')) {\n            case self::FUNC_SHOW_BURNDOWN:\n                try {\n                    $artifact_id = $request->getValidated('src_aid', 'uint', 0);\n                    $artifact    = $this->getArtifactFactory()->getArtifactById($artifact_id);\n                    if (! $artifact) {\n                        return;\n                    }\n                    $this->fetchBurndownImage($artifact, $current_user);\n                } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n                    $this->displayErrorImage($e->getMessage());\n                } catch (BurndownCacheIsCurrentlyCalculatedException $e) {\n                    $this->displayErrorImage(dgettext('tuleap-tracker', 'Burndown is under calculation. It will be available in few minutes.'));\n                }\n                break;\n            default:\n                parent::process($layout, $request, $current_user);\n        }\n    }\n\n    /**\n     * Render a burndown image based on $artifact artifact links\n     *\n     *\n     * @throws Tracker_FormElement_Chart_Field_Exception\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function fetchBurndownImage(Artifact $artifact, PFUser $user)\n    {\n        if ($this->userCanRead($user)) {\n            $burndown_data = $this->buildBurndownDataForLegacy($user, $artifact);\n\n            if ($burndown_data->isBeingCalculated() === true) {\n                throw new BurndownCacheIsCurrentlyCalculatedException();\n            } else {\n                $this->getBurndown($burndown_data)->display();\n            }\n        } else {\n            throw new Tracker_FormElement_Chart_Field_Exception(\n                dgettext('tuleap-tracker', 'You are not allowed to access this field.')\n            );\n        }\n    }\n\n    /**\n     * Export form element properties into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement &$root The root element of the form element\n     *\n     * @return void\n     */\n    public function exportPropertiesToXML(&$root)\n    {\n        $child = $root->addChild('properties');\n\n        $child->addAttribute('use_cache', '1');\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset): ArtifactFieldValueFullRepresentation\n    {\n        $artifact     = $changeset->getArtifact();\n        $form_element = $this->getFormElementFactory()->getFormElementById($this->getId());\n\n        $artifact_field_value_representation = new ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_representation->build(\n            $this->getId(),\n            $this->getFormElementFactory()->getType($form_element),\n            $this->getLabel(),\n            $this->getBurndownDataForREST(\n                $artifact,\n                $user,\n                $this->getTimePeriodForRESTRepresentation($artifact, $user)\n            )->getRESTRepresentation()\n        );\n\n        return $artifact_field_value_representation;\n    }\n\n    private function getTimePeriodForRESTRepresentation(Artifact $artifact, PFUser $user)\n    {\n        $calculator = $this->getTimeframeCalculator();\n\n        return $calculator->buildTimePeriodWithoutWeekendForArtifactForREST($artifact, $user, $this->getLogger());\n    }\n\n    protected function getLogger(): \\Psr\\Log\\LoggerInterface\n    {\n        return \\BackendLogger::getDefaultLogger(self::LOG_IDENTIFIER);\n    }\n\n    /**\n     * @return Tracker_Chart_Data_Burndown\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function getBurndownData(Artifact $artifact, PFUser $user, TimePeriodWithoutWeekEnd $time_period)\n    {\n        $builder = $this->getBurndownDataBuilderForREST();\n        return $builder->build($artifact, $user, $time_period);\n    }\n\n    /**\n     * @return Tracker_Chart_Data_Burndown\n     * @throws BurndownCacheIsCurrentlyCalculatedException\n     */\n    public function getBurndownDataForREST(Artifact $artifact, PFUser $user, TimePeriodWithoutWeekEnd $time_period)\n    {\n        return $this->getBurndownData($artifact, $user, $time_period);\n    }\n\n\n    private function getSystemEventManager()\n    {\n        return SystemEventManager::instance();\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the element for the submit masschange form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $output   = '';\n        if ($format == Codendi_Mail::FORMAT_HTML) {\n            $output .= '<img src=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . $this->getBurndownImageUrl($artifact) . '\" alt=\"' . $purifier->purify($this->getLabel()) . '\" width=\"640\" height=\"480\" />';\n            $output .= '<p><em>' . dgettext('tuleap-tracker', 'Please note that the image above is rendered in real time so it represents burndown as of today, not as when the email was sent.') . '</em></p>';\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= $this->getBurndownMessageFetcher()->fetchWarnings($this, $this->getChartFieldUsage());\n        $html .= '<img src=\"' . TRACKER_BASE_URL . '/images/fake-burndown-admin.png\" />';\n        $html .= '<a class=\"btn chart-cache-button-generate\" disabled=\"disabled\">' .\n            dgettext('tuleap-tracker', 'Force cache regeneration') .\n            '</a>';\n\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n    }\n\n    protected function getValueDao()\n    {\n    }\n\n    /**\n     * Display a png image with the given error message\n     *\n     * @param String $msg\n     */\n    protected function displayErrorImage($msg)\n    {\n        $error = new ErrorChart(dgettext('tuleap-tracker', 'Unable to render the chart'), $msg, 640, 480);\n        $error->Stroke();\n    }\n\n    /**\n     * Returns a Burndown rendering object for given data\n     *\n     *\n     * @return \\Tracker_Chart_BurndownView\n     */\n    protected function getBurndown(Tracker_Chart_Data_Burndown $burndown_data)\n    {\n        return new Tracker_Chart_BurndownView($burndown_data);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Integer $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Return the relative url to the burndown chart image.\n     *\n     *\n     * @return String\n     */\n    public function getBurndownImageUrl(Artifact $artifact)\n    {\n        $url_query = http_build_query(\n            [\n                'formElement' => $this->getId(),\n                'func'        => self::FUNC_SHOW_BURNDOWN,\n                'src_aid'     => $artifact->getId(),\n            ]\n        );\n\n        return TRACKER_BASE_URL . '/?' . $url_query;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitBurndown($this);\n    }\n\n    /**\n     * @return BurndownFieldDao The dao\n     */\n    protected function getDao()\n    {\n        return new BurndownFieldDao();\n    }\n    /**\n     * Return the Field_Date_Dao\n     *\n     * @return ComputedFieldDao The dao\n     */\n    protected function getComputedDao()\n    {\n        return new ComputedFieldDao();\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::postSaveNewChangeset()\n     */\n    public function postSaveNewChangeset(\n        Artifact $artifact,\n        PFUser $submitter,\n        Tracker_Artifact_Changeset $new_changeset,\n        array $fields_data,\n        ?Tracker_Artifact_Changeset $previous_changeset = null,\n    ) {\n        try {\n            if (\n                $previous_changeset !== null &&\n                $this->getBurndownCacheChecker()->isCacheBurndownAlreadyAsked($artifact) === false &&\n                $this->getBurdownConfigurationFieldRetriever()->getBurndownRemainingEffortField($artifact, $submitter)\n            ) {\n                if ($this->getBurndownConfigurationValueChecker()->hasConfigurationChange($artifact, $submitter, $new_changeset) === true) {\n                    $this->getBurndownCacheGenerator()->forceBurndownCacheGeneration($artifact->getId());\n                }\n            }\n        } catch (Tracker_FormElement_Chart_Field_Exception $e) {\n        }\n    }\n\n    /**\n     * @return ChartConfigurationFieldRetriever\n     */\n    protected function getBurdownConfigurationFieldRetriever()\n    {\n        return new ChartConfigurationFieldRetriever(\n            $this->getFormElementFactory(),\n            SemanticTimeframeBuilder::build(),\n            $this->getLogger()\n        );\n    }\n\n    /**\n     * @return ChartConfigurationValueRetriever\n     */\n    private function getBurndownConfigurationValueRetriever()\n    {\n        return new ChartConfigurationValueRetriever(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getTimeframeCalculator(),\n            $this->getLogger()\n        );\n    }\n\n    /**\n     * @return ChartConfigurationValueChecker\n     */\n    private function getBurndownConfigurationValueChecker()\n    {\n        return new ChartConfigurationValueChecker(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueRetriever()\n        );\n    }\n\n    private function getBurndownMessageFetcher()\n    {\n        return new ChartMessageFetcher(\n            $this->getHierarchyFactory(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            EventManager::instance(),\n            UserManager::instance()\n        );\n    }\n\n    private function getChartFieldUsage()\n    {\n        $use_start_date       = true;\n        $use_duration         = true;\n        $use_capacity         = false;\n        $use_hierarchy        = true;\n        $use_remaining_effort = true;\n\n        return new ChartFieldUsage(\n            $use_start_date,\n            $use_duration,\n            $use_capacity,\n            $use_hierarchy,\n            $use_remaining_effort\n        );\n    }\n\n    /**\n     * @return ChartCachedDaysComparator\n     */\n    private function getCachedDaysComparator()\n    {\n        return new ChartCachedDaysComparator($this->getLogger());\n    }\n\n    /**\n     * For testing purpose\n     */\n    protected function renderPresenter(BurndownFieldPresenter $burndown_presenter)\n    {\n        $renderer = TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n\n        return $renderer->renderToString('burndown-field', $burndown_presenter);\n    }\n\n    /**\n     * @return BurndownDataBuilderForREST\n     */\n    private function getBurndownDataBuilderForREST()\n    {\n        return new BurndownDataBuilderForREST(\n            $this->getLogger(),\n            $this->getRemainingEffortAdder(),\n            new BurndownCommonDataBuilder(\n                $this->getLogger(),\n                $this->getBurdownConfigurationFieldRetriever(),\n                $this->getBurndownConfigurationValueRetriever(),\n                $this->getBurndownCacheChecker()\n            )\n        );\n    }\n\n    /**\n     * @return BurndownCacheGenerationChecker\n     */\n    private function getBurndownCacheChecker()\n    {\n        return new BurndownCacheGenerationChecker(\n            $this->getLogger(),\n            $this->getBurndownCacheGenerator(),\n            $this->getSystemEventManager(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueChecker(),\n            $this->getComputedDao(),\n            $this->getCachedDaysComparator(),\n            $this->getRemainingEffortAdder()\n        );\n    }\n\n    /**\n     * @return BurndownCacheGenerator\n     */\n    private function getBurndownCacheGenerator()\n    {\n        return new BurndownCacheGenerator($this->getSystemEventManager());\n    }\n\n    /**\n     * @return BurndownRemainingEffortAdderForREST\n     */\n    private function getRemainingEffortAdder()\n    {\n        return new BurndownRemainingEffortAdderForREST(\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getComputedDao()\n        );\n    }\n\n    /**\n     * For testing purpose\n     */\n    protected function buildBurndownDataForLegacy(PFUser $user, Artifact $artifact)\n    {\n        $time_period = $this->getBurndownConfigurationValueRetriever()->getTimePeriod($artifact, $user);\n        $builder     = $this->getBurndownDataBuilderForLegacy();\n\n        return $builder->build($artifact, $user, $time_period);\n    }\n\n    private function getBurndownDataBuilderForLegacy()\n    {\n        return new BurndownDataBuilderForLegacy(\n            $this->getLogger(),\n            $this->getBurdownConfigurationFieldRetriever(),\n            $this->getBurndownConfigurationValueRetriever(),\n            $this->getBurndownCacheChecker(),\n            $this->getBurndownAdderForLegacy()\n        );\n    }\n\n    /**\n     * @return BurndownRemainingEffortAdderForLegacy\n     */\n    private function getBurndownAdderForLegacy()\n    {\n        return new BurndownRemainingEffortAdderForLegacy(\n            $this->getBurdownConfigurationFieldRetriever(),\n            new UserWithReadAllPermissionBuilder()\n        );\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getTimeframeCalculator(): IComputeTimeframes\n    {\n        return SemanticTimeframeBuilder::build()->getSemantic($this->getTracker())->getTimeframeCalculator();\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getArtifactFactory(): Tracker_ArtifactFactory\n    {\n        return Tracker_ArtifactFactory::instance();\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\ChangesetValueComputed;\nuse Tuleap\\Tracker\\DAO\\ComputedDao;\nuse Tuleap\\Tracker\\FormElement\\ComputedFieldCalculator;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Computed\\ComputedFieldDaoCache;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\FieldCalculator;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldComputedValueFullRepresentation;\n\nclass Tracker_FormElement_Field_Computed extends Tracker_FormElement_Field_Float //phpcs:ignore\n{\n    public const FIELD_VALUE_IS_AUTOCOMPUTED = 'is_autocomputed';\n    public const FIELD_VALUE_MANUAL          = 'manual_value';\n\n    public $default_properties = [\n        'target_field_name' => [\n            'value' => null,\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n        'fast_compute' => [\n            'value' => null,\n            'type'  => 'upgrade_button',\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n    ];\n\n    public function __construct(\n        $id,\n        $tracker_id,\n        $parent_id,\n        $name,\n        $label,\n        $description,\n        $use_it,\n        $scope,\n        $required,\n        $notifications,\n        $rank,\n        ?Tracker_FormElement $original_field = null,\n    ) {\n        parent::__construct(\n            $id,\n            $tracker_id,\n            $parent_id,\n            $name,\n            $label,\n            $description,\n            $use_it,\n            $scope,\n            $required,\n            $notifications,\n            $rank,\n            $original_field\n        );\n\n        $this->doNotDisplaySpecialPropertiesAtFieldCreation();\n    }\n\n    private function doNotDisplaySpecialPropertiesAtFieldCreation()\n    {\n        $this->clearFastCompute();\n        $this->clearTargetFieldName();\n        $this->clearCache();\n    }\n\n    private function clearFastCompute()\n    {\n        if ($this->getProperty('fast_compute') === null) {\n            unset($this->default_properties['fast_compute']);\n        }\n    }\n\n    private function clearTargetFieldName()\n    {\n        if ($this->getName() === null) {\n            unset($this->default_properties['target_field_name']);\n        }\n    }\n\n    private function clearCache()\n    {\n        $this->cache_specific_properties = null;\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n\n    /**\n     * @return float|null if there are no data (/!\\ it's on purpose, otherwise we can mean to distinguish if there is data but 0 vs no data at all, for the graph plot)\n     */\n    public function getComputedValue(\n        PFUser $user,\n        Artifact $artifact,\n        $timestamp = null,\n    ) {\n        return $this->getCalculator()->calculate(\n            [$artifact->getId()],\n            $timestamp,\n            true,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    public function getComputedValueWithNoStopOnManualValue(Artifact $artifact)\n    {\n        $computed_children_to_fetch    = [];\n        $artifact_ids_to_fetch         = [];\n        $has_manual_value_in_children  = false;\n        $target_field_name             = $this->getName();\n        $dar                           = $this->getDao()->getComputedFieldValues(\n            [$artifact->getId()],\n            $target_field_name,\n            $this->getId(),\n            false\n        );\n        $manual_value_for_current_node = $this->getValueDao()->getManuallySetValueForChangeset(\n            $artifact->getLastChangeset()->getId(),\n            $this->getId()\n        );\n\n        if ($dar) {\n            foreach ($dar as $row) {\n                if ($row['id'] !== null) {\n                    $artifact_ids_to_fetch[] = $row['id'];\n                }\n                if ($row['type'] === 'computed') {\n                    $computed_children_to_fetch[] = $row['id'];\n                }\n                if (isset($row[$row['type'] . '_value'])) {\n                    $has_manual_value_in_children = true;\n                }\n            }\n        }\n\n        if (($manual_value_for_current_node['value'] ?? null) !== null && $has_manual_value_in_children) {\n            $computed_children = 0;\n            if (count($computed_children_to_fetch) > 0) {\n                $computed_children = $this->getStandardCalculationMode($computed_children_to_fetch);\n            }\n            $manually_set_children = $this->getStopAtManualSetFieldMode([$artifact->getId()]);\n            return $manually_set_children + $computed_children;\n        }\n\n        if (count($artifact_ids_to_fetch) === 0 && $has_manual_value_in_children) {\n            return $this->getStopAtManualSetFieldMode([$artifact->getId()]);\n        }\n\n        if ($has_manual_value_in_children && ($manual_value_for_current_node['value'] ?? null) === null) {\n            return $this->getStandardCalculationMode([$artifact->getId()]);\n        }\n\n        if (count($artifact_ids_to_fetch) === 0) {\n            return null;\n        }\n\n        return $this->getStandardCalculationMode($artifact_ids_to_fetch);\n    }\n\n    public function getStopAtManualSetFieldMode(array $artifact_ids)\n    {\n        return $this->getCalculator()->calculate(\n            $artifact_ids,\n            null,\n            false,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    public function getFieldEmptyMessage()\n    {\n        return dgettext('tuleap-tracker', 'Empty');\n    }\n\n    public function getStandardCalculationMode(array $artifact_ids)\n    {\n        return $this->getCalculator()->calculate(\n            $artifact_ids,\n            null,\n            true,\n            $this->getName(),\n            $this->getId()\n        );\n    }\n\n    protected function getNoValueLabel()\n    {\n        return \"<span class='empty_value auto-computed-label'>\" . $this->getFieldEmptyMessage() . \"</span>\";\n    }\n\n    protected function getComputedValueWithNoLabel(Artifact $artifact, PFUser $user, $stop_on_manual_value)\n    {\n        if ($stop_on_manual_value) {\n            $empty_array    = [];\n            $computed_value = $this->getComputedValue($user, $artifact, null, $empty_array);\n        } else {\n            $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        }\n\n        return ($computed_value !== null) ? $computed_value : $this->getFieldEmptyMessage();\n    }\n\n    protected function processUpdate(\n        Tracker_IDisplayTrackerLayout $layout,\n        $request,\n        $current_user,\n        $redirect = false,\n    ) {\n        $formElement_data = $request->get('formElement_data');\n\n        if ($formElement_data !== false) {\n            $default_specific_properties   = [\n                'fast_compute'      => '1',\n                'target_field_name' => $formElement_data['name'],\n            ];\n            $submitted_specific_properties = isset($formElement_data['specific_properties']) ? $formElement_data['specific_properties'] : [];\n\n            $merged_specific_properties = array_merge(\n                $default_specific_properties,\n                $submitted_specific_properties\n            );\n\n            $formElement_data['specific_properties'] = $merged_specific_properties;\n            $request->set('formElement_data', $formElement_data);\n\n            $GLOBALS['Response']->addFeedback(\n                'warning',\n                sprintf(dgettext('tuleap-tracker', 'You will not able to edit by hand the field \"%1$s\" since no update and submit permissions will be granted.'), $this->getName())\n            );\n        }\n\n        parent::processUpdate(\n            $layout,\n            $request,\n            $current_user,\n            $redirect\n        );\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        $form_element_data['specific_properties']['fast_compute']      = '1';\n        $form_element_data['specific_properties']['target_field_name'] = $this->name;\n        $this->storeProperties($form_element_data['specific_properties']);\n\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function exportPropertiesToXML(&$root)\n    {\n        $default_value = $this->getDefaultValue();\n        if ($default_value === null) {\n            return;\n        }\n\n        $child_properties = $root->addChild('properties');\n        $child_properties->addAttribute('default_value', (string) $default_value[self::FIELD_VALUE_MANUAL]);\n    }\n\n    /**\n     * for testing purpose\n     *\n     * @return FieldCalculator\n     */\n    protected function getCalculator()\n    {\n        return new FieldCalculator(new ComputedFieldCalculator(new ComputedFieldDao()));\n    }\n\n\n    public function validateValue($value)\n    {\n        if (! is_array($value)) {\n            return false;\n        }\n\n        if (! isset($value[self::FIELD_VALUE_MANUAL]) && ! isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED])) {\n            return false;\n        }\n\n        if (\n            isset($value[self::FIELD_VALUE_MANUAL]) && isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) &&\n                $value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n        ) {\n            return $value[self::FIELD_VALUE_MANUAL] === '';\n        }\n\n        if (isset($value[self::FIELD_VALUE_MANUAL])) {\n            $is_a_float = preg_match('/^' . $this->pattern . '$/', $value[self::FIELD_VALUE_MANUAL]) === 1;\n            if (! $is_a_float) {\n                $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            }\n            return $is_a_float;\n        }\n\n        return true;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $current_user   = UserManager::instance()->getCurrentUser();\n        $computed_value = $this->getComputedValueWithNoLabel($artifact, $current_user, false);\n\n        $html  = '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $purifier->purify($this->getId()) . '\">\n                    <div class=\"input-append\">';\n        $html .= $this->fetchArtifactValue($artifact, $value, $submitted_values);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= $this->fetchComputedValueWithLabel($computed_value);\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function fetchBackToAutocomputedButton($is_disabled)\n    {\n        $disabled = '';\n        if ($is_disabled) {\n            $disabled = 'disabled=\"disabled\"';\n        }\n        $html  = '<a class=\"btn btn-small auto-compute\" ' . $disabled . ' data-test=\"switch-to-autocompute\">\n                    <i class=\"fas fa-redo fa-flip-horizontal\"></i>';\n        $html .= dgettext('tuleap-tracker', 'Auto-compute');\n        $html .= '</a>';\n\n        return $html;\n    }\n\n    private function fetchComputedValueWithLabel($computed_value)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        $html  = '<span class=\"original-value\">';\n        $html .= dgettext('tuleap-tracker', 'Computed value:');\n        $html .= $purifier->purify($computed_value) . '</span>';\n\n        return $html;\n    }\n\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $displayed_value = null;\n        $is_autocomputed = true;\n        if ($value !== null) {\n            $displayed_value = $value->getValue();\n            $is_autocomputed = ! $value->isManualValue();\n        }\n\n        if (isset($submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL])) {\n            $displayed_value = $submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL];\n        }\n\n        return $this->fetchComputedInputs($displayed_value, $is_autocomputed);\n    }\n\n    private function fetchComputedInputs($displayed_value, $is_autocomputed)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '<input type=\"text\" class=\"field-computed\"\n            data-test=\"' . $this->getName() . '\"\n            name=\"artifact[' . $purifier->purify($this->getId()) . '][' . self::FIELD_VALUE_MANUAL . ']\"\n            value=\"' . $purifier->purify($displayed_value) . '\" />';\n        $html    .= '<input type=\"hidden\"\n            name=\"artifact[' . $purifier->purify($this->getId()) . '][' . self::FIELD_VALUE_IS_AUTOCOMPUTED . ']\"\n            value=\"' . $purifier->purify((int) $is_autocomputed) . '\" />';\n\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $changeset_value = null,\n    ) {\n        $value    = null;\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($changeset_value && $changeset_value->isManualValue()) {\n            $value = $changeset_value->getValue();\n        }\n\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        if ($computed_value === null) {\n            $html_computed_value = '<span class=\"auto-computed\">' . $purifier->purify($this->getFieldEmptyMessage()) . '</span>';\n        } else {\n            $html_computed_value = $purifier->purify($computed_value);\n        }\n\n        $html_computed_complete_value = $html_computed_value . '<span class=\"auto-computed\"> (' .\n            dgettext('tuleap-tracker', 'autocomputed') . ')</span>';\n\n        if ($value === null) {\n            $value = $html_computed_complete_value;\n        }\n\n        $user              = $this->getCurrentUser();\n        $time_frame_helper = $this->getArtifactTimeframeHelper();\n\n        if ($time_frame_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $value = $value . '<span class=\"artifact-timeframe-helper\"> (' . $time_frame_helper->getEndDateArtifactHelperForReadOnlyView($user, $artifact) . ')</span>';\n        }\n\n        $html = '<div class=\"auto-computed-label\" data-test=\"computed-value\">' . $value . '</div>' .\n            '<div class=\"back-to-autocompute\">' . $html_computed_complete_value . '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $changeset      = $artifact->getLastChangesetWithFieldValue($this);\n        $computed_value = null;\n        if ($changeset !== null) {\n            $computed_value = $this->getComputedValue($user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n        }\n\n        return (string) ($computed_value ?? \"-\");\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $changeset      = $artifact->getLastChangesetWithFieldValue($this);\n        $computed_value = null;\n        if ($changeset !== null) {\n            $current_user   = UserManager::instance()->getCurrentUser();\n            $computed_value = $this->getComputedValue($current_user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n        }\n\n        return (string) ($computed_value ?? \"-\");\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $current_user = UserManager::instance()->getCurrentUser();\n        $artifact     = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n\n        $changeset = $this->getTrackerChangesetFactory()->getChangeset($artifact, $changeset_id);\n\n        return (string) $this->getComputedValue($current_user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($changeset->getArtifact());\n        $manual_value   = $this->getManualValueForChangeset($changeset);\n\n        $artifact_field_value_full_representation = new ArtifactFieldComputedValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $manual_value === null,\n            $computed_value,\n            $this->getManualValueForChangeset($changeset)\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * @return int|float|null\n     */\n    private function getManualValueForChangeset(Tracker_Artifact_Changeset $artifact_changeset)\n    {\n        $changeset_value = $artifact_changeset->getValue($this);\n        if ($changeset_value && $changeset_value->isManualValue()) {\n            return $changeset_value->getNumeric();\n        }\n\n        return null;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if ($this->isAutocomputedDisabledAndNoManualValueProvided($value) || isset($value['value'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException(\n                'Expected format for a computed field ' .\n                ' : {\"field_id\" : 15458, \"manual_value\" : 12} or {\"field_id\" : 15458, \"is_autocomputed\" : true}'\n            );\n        }\n\n        return $this->getRestFieldData($value);\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAutocomputedDisabledAndNoManualValueProvided(array $value)\n    {\n        return isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) && $value[self::FIELD_VALUE_IS_AUTOCOMPUTED] === false\n            && (! isset($value[self::FIELD_VALUE_MANUAL]) || $value[self::FIELD_VALUE_MANUAL] === null);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    public function fetchAdminFormElement()\n    {\n        $html = '<div class=\"input-append\">';\n\n        $default_value          = $this->getDefaultValue();\n        $default_value_in_input = '';\n        if ($default_value !== null) {\n            $default_value_in_input = (string) $default_value[self::FIELD_VALUE_MANUAL];\n        }\n\n        $html .= $this->fetchComputedInputs($default_value_in_input, true);\n        $html .= $this->fetchBackToAutocomputedButton(true);\n        $html .= $this->fetchComputedValueWithLabel($this->getFieldEmptyMessage());\n        $html .= \"</div>\";\n\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Computed value');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Compute value (sum of numerical field) from linked artifacts.<p><strong>Note</strong>: <ul><li>Calculation will not check linked artifacts permissions AND will only calculate the field values of linked artifacts that have the same field name.</li></ul>');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/sum.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/sum.png');\n    }\n\n    protected function getDao(): ComputedFieldDao\n    {\n        return new ComputedFieldDao();\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    public function fetchRawValue($value)\n    {\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return $this->buildFieldForSubmission(\n            'tracker-formelement-edit-for-modal',\n            'auto-computed-for-modal'\n        );\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return $this->buildFieldForSubmission(\n            'tracker-formelement-edit-for-submit',\n            'auto-computed-for-submit'\n        );\n    }\n\n    private function buildFieldForSubmission(string $submit_class, string $auto_computed_class)\n    {\n        if (! $this->userCanSubmit()) {\n            return '';\n        }\n\n        $default_value = $this->getDefaultValue();\n        $extra_class   = '';\n        if ($default_value !== null) {\n            $extra_class = \"in-edition with-default-value\";\n        }\n\n        $purifier = Codendi_HTMLPurifier::instance();\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $html  = '<div>';\n        $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed editable ' . $extra_class . '\">';\n\n        $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n        $html .= '<button type=\"button\" title=\"' . $title . '\" class=\"tracker_formelement_edit ' . $submit_class . '\">' . $purifier->purify($this->getLabel())  . $required . '</button>';\n        $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n            '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel())  . $required . '</label>';\n\n        $html .= '<div class=\"input-append\" data-field-id=\"' . $this->getId() . '\">';\n\n        $default_value_in_input = '';\n        $is_autocomputed        = true;\n        if ($default_value !== null) {\n            $default_value_in_input = (string) $default_value[self::FIELD_VALUE_MANUAL];\n            $is_autocomputed        = false;\n        }\n\n        $html .= $this->fetchComputedInputs($default_value_in_input, $is_autocomputed);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= $this->fetchComputedValueWithLabel(\n            dgettext('tuleap-tracker', 'Empty')\n        );\n\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    /**\n     * Returns the default value for this field, or null if no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        $property = $this->getProperty('default_value');\n        if ($property === null) {\n            return null;\n        }\n\n        return [\n            self::FIELD_VALUE_IS_AUTOCOMPUTED => false,\n            self::FIELD_VALUE_MANUAL => (float) $property,\n        ];\n    }\n\n    public function getDefaultRESTValue()\n    {\n        $property = $this->getProperty('default_value');\n        if ($property === null) {\n            return null;\n        }\n\n        return [\n            'type'  => self::FIELD_VALUE_MANUAL,\n            'value' => (float) $property,\n        ];\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $required = $this->isRequired() ? ' <span class=\"highlight\">*</span>' : '';\n\n        if ($this->userCanUpdate()) {\n            $html .= '<div class=\"field-masschange tracker_artifact_field tracker_artifact_field-computed editable\"\n                         data-field-id=\"' . $purifier->purify($this->getId()) . '\">';\n\n            $html .= '<div class=\"edition-mass-change\">';\n            $html .= '<label for=\"tracker_artifact_' . $purifier->purify($this->getId()) . '\"\n                        title=\"' . $purifier->purify($this->description) . '\"  class=\"tracker_formelement_label\">' .\n                        $purifier->purify($this->getLabel()) . $required . '</label>';\n            $html .= '<div class=\" input-append\">';\n            $html .= $this->fetchSubmitValueMasschange();\n            $html .= '</div>';\n            $html .= '</div>';\n\n            $html .= '<div class=\"display-mass-change display-mass-change-hidden\">';\n            $html .= '<button class=\"tracker_formelement_edit edit-mass-change-autocompute\" type=\"button\">' .\n                        $purifier->purify($this->getLabel()) . $required . '</button>';\n            $html .= '<span class=\"auto-computed\">';\n            $html .= $purifier->purify(ucfirst(dgettext('tuleap-tracker', 'autocomputed')));\n            $html .= '</span>';\n            $html .= '</div>';\n\n            $html .= '</div>';\n        }\n\n        return $html;\n    }\n\n    protected function fetchSubmitValueMasschange()\n    {\n        $unchanged = dgettext('tuleap-tracker', 'Unchanged');\n        $html      = $this->fetchComputedInputs($unchanged, false);\n        $html     .= $this->fetchBackToAutocomputedButton(false);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        $purifier       = Codendi_HTMLPurifier::instance();\n        $computed_value = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        if ($computed_value === null) {\n            $computed_value = $this->getFieldEmptyMessage();\n        }\n        $autocomputed_label = ' (' . dgettext('tuleap-tracker', 'autocomputed') . ')';\n        $class              = 'auto-computed';\n\n        $last_changset = $artifact->getLastChangesetWithFieldValue($this);\n        $changeset     = null;\n        if ($last_changset) {\n            $changeset = $last_changset->getValue($this);\n        }\n        $required = $this->required ? ' <span class=\"highlight\">*</span>' : '';\n\n        $html = \"\";\n        if (! $this->userCanRead()) {\n            return $html;\n        }\n\n        $is_field_read_only = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($is_field_read_only || ! $this->userCanUpdate()) {\n            if (isset($changeset) && $changeset->getValue() !== null) {\n                $computed_value     = $changeset->getValue();\n                $autocomputed_label = '';\n                $class              = '';\n            }\n\n            if (isset($submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL])) {\n                $computed_value     = $submitted_values[$this->getId()][self::FIELD_VALUE_MANUAL];\n                $autocomputed_label = '';\n                $class              = '';\n            }\n\n            $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed\">';\n            $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n                    '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel()) . $required . '</label>';\n\n            $html .= '<span class=\"' . $class . '\">' . $computed_value . $autocomputed_label . '</span></div>';\n\n            return $html;\n        }\n\n        $html .= '<div class=\"tracker_artifact_field tracker_artifact_field-computed editable\">';\n\n        $title = $purifier->purify(sprintf(dgettext('tuleap-tracker', 'Edit the field \"%1$s\"'), $this->getLabel()));\n        $html .= '<button type=\"button\" title=\"' . $title . '\" class=\"tracker_formelement_edit tracker-formelement-edit-for-modal\">' . $purifier->purify($this->getLabel())  . $required . '</button>';\n        $html .= '<label for=\"tracker_artifact_' . $this->id . '\" title=\"' . $purifier->purify($this->description) .\n                '\" class=\"tracker_formelement_label\">' . $purifier->purify($this->getLabel()) . $required . '</label>';\n\n        $html .= '<span class=\"auto-computed auto-computed-for-modal\">' . $computed_value . ' (' .\n        dgettext('tuleap-tracker', 'autocomputed') . ')</span>';\n\n        $html .= '<div class=\"input-append add-field auto-computed-for-modal-append\" data-field-id=\"' . $this->getId() . '\">';\n        $html .= '<div>';\n        $html .= $this->fetchArtifactValue($artifact, $changeset, $submitted_values);\n        $html .= $this->fetchBackToAutocomputedButton(false);\n        $html .= '</div>';\n        $html .= '<div>';\n        $html .= $this->fetchComputedValueWithLabel($computed_value);\n        $html .= '</div>';\n\n        $html .= '</div></div>';\n\n        return $html;\n    }\n\n    protected function getValueDao()\n    {\n        return new ComputedDao();\n    }\n\n    public function isArtifactValueAutocomputed(Artifact $artifact)\n    {\n        if (! $artifact->getLastChangeset()->getValue($this)) {\n            return true;\n        }\n        return $artifact->getLastChangeset()->getValue($this)->getValue() === null;\n    }\n\n    /**\n     * Fetch the html code to display the field in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCard(Artifact $artifact, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        $value                      = $this->fetchCardValue($artifact, $display_preferences);\n        $computed_value             = $this->getComputedValueWithNoStopOnManualValue($artifact);\n        $data_field_id              = '';\n        $data_field_type            = '';\n        $data_field_is_autocomputed = '';\n        $data_field_old_value       = '';\n        $is_autocomputed            = $this->isArtifactValueAutocomputed($artifact);\n        $purifier                   = Codendi_HTMLPurifier::instance();\n\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n        if ($this->userCanUpdate() && ! $is_field_frozen) {\n            $data_field_id              = 'data-field-id=\"' . $purifier->purify($this->getId()) . '\"';\n            $data_field_type            = 'data-field-type=\"' . $purifier->purify($this->getFormElementFactory()->getType($this)) . '\"';\n            $data_field_is_autocomputed = 'data-field-is-autocomputed=\"' . $is_autocomputed . '\"';\n            $data_field_old_value       = 'data-field-old-value=\"' . $value . '\"';\n        }\n\n        $html = '<tr>\n                    <td>' . $purifier->purify($this->getLabel()) . ':\n                    </td>\n                    <td class=\"autocomputed_override\">' .\n                        $this->fetchComputedValueWithLabel($computed_value) .\n                        '<a href=\"#\" ' . $data_field_id . '><i class=\"fas fa-redo fa-flip-horizontal\"></i>' .\n                        dgettext('tuleap-tracker', 'Auto-compute')\n                        . '</a>' .\n                    '</td>\n                    <td class=\"valueOf_' . $purifier->purify($this->getName()) . '\"' .\n                        $data_field_id .\n                        $data_field_type .\n                        $data_field_is_autocomputed .\n                        $data_field_old_value .\n                    '>' .\n                        $value .\n                    '</td>\n                </tr>';\n\n        return $html;\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n    }\n\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $row = $this->getValueDao()->searchById($value_id, $this->id)->getRow();\n\n        if ($row && $row['value'] !== null) {\n            $is_manual_value = true;\n\n            return new ChangesetValueComputed(\n                $value_id,\n                $changeset,\n                $this,\n                $has_changed,\n                $row['value'],\n                $is_manual_value\n            );\n        }\n\n        $user  = $this->getCurrentUser();\n        $value = $this->getComputedValue($user, $changeset->getArtifact(), $changeset->getSubmittedOn());\n\n        $is_manual_value = false;\n\n        return new ChangesetValueComputed($value_id, $changeset, $this, $has_changed, $value, $is_manual_value);\n    }\n\n    private function getTrackerChangesetFactory()\n    {\n        $factory_builder = new Tracker_Artifact_ChangesetFactoryBuilder();\n        return $factory_builder::build();\n    }\n\n    /** For testing purpose */\n    protected function getCurrentUser()\n    {\n        return UserManager::instance()->getCurrentUser();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $user = $this->getCurrentUser();\n        if (! $this->userCanUpdate($user)) {\n            return true;\n        }\n        $new_value = $this->getStorableValue($value);\n\n        return $this->getValueDao()->create($changeset_value_id, $new_value);\n    }\n\n    private function getStorableValue($value)\n    {\n        $new_value = '';\n\n        if (! is_array($value)) {\n            return $this->retrieveValueFromJson($value);\n        }\n\n        if (isset($value[self::FIELD_VALUE_MANUAL])) {\n            $new_value = $value[self::FIELD_VALUE_MANUAL];\n        }\n\n        return $new_value;\n    }\n\n    private function retrieveValueFromJson($value)\n    {\n        $new_value = json_decode($value);\n\n        if (! isset($new_value->manual_value)) {\n            return null;\n        }\n        return $new_value->manual_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $previous_changeset_value, $value)\n    {\n        if (\n            ! $previous_changeset_value->isManualValue() &&\n            isset($value[self::FIELD_VALUE_IS_AUTOCOMPUTED]) &&\n            $value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n        ) {\n            return false;\n        }\n\n        $new_value = $this->getStorableValue($value);\n\n        if ($previous_changeset_value->getNumeric() === null && $new_value === '') {\n            return false;\n        }\n\n        if ($previous_changeset_value->getNumeric() === null && $new_value !== '') {\n            return true;\n        }\n\n        if ($new_value === '' && $previous_changeset_value->getNumeric() === 0.0) {\n            return true;\n        }\n\n        return (float) $previous_changeset_value->getNumeric() !== (float) $new_value;\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    public function testImport()\n    {\n        return true;\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->validateValue($value);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitComputed($this);\n    }\n\n    /**\n     * @return int | null if no value found\n     */\n    public function getCachedValue(PFUser $user, Artifact $artifact, $timestamp = null)\n    {\n        $dao   = ComputedFieldDaoCache::instance();\n        $value = $dao->getCachedFieldValueAtTimestamp($artifact->getId(), $this->getId(), $timestamp);\n\n        if ($value === false) {\n            return null;\n        }\n        return $value;\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return false;\n    }\n\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $hasPermission = $this->userCanUpdate();\n        if ($is_submission) {\n            $hasPermission = $this->userCanSubmit();\n        }\n        if ($last_changeset_value === null && ( $this->isAnEmptyValue($submitted_value) || $this->isAnEmptyArray($submitted_value)) && $hasPermission && $this->isRequired()) {\n            $this->setHasErrors(true);\n\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n            return false;\n        } elseif ($hasPermission) {\n            if (\n                ! isset($submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED])\n                && ! isset($submitted_value[self::FIELD_VALUE_MANUAL])\n            ) {\n                return true;\n            }\n            if (\n                ! isset($submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED])\n                || ! $submitted_value[self::FIELD_VALUE_IS_AUTOCOMPUTED]\n            ) {\n                return $this->isValidRegardingRequiredProperty($artifact, $submitted_value)\n                    && $this->validateField($artifact, $submitted_value);\n            }\n        }\n\n        return true;\n    }\n\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value)\n    {\n        if ($this->isAnEmptyArray($submitted_value)) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    private function isAnEmptyArray($value)\n    {\n        return is_array($value) && empty($value);\n    }\n\n    private function isAnEmptyValue($value)\n    {\n        return ! is_array($value) && $value === null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012-present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\ConcurrentVersionsSystem\\CvsDao;\nuse Tuleap\\Date\\TlpRelativeDatePresenterBuilder;\nuse Tuleap\\Forum\\ForumDao;\nuse Tuleap\\Forum\\ForumRetriever;\nuse Tuleap\\Forum\\MessageRetriever;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\News\\NewsDao;\nuse Tuleap\\News\\NewsRetriever;\nuse Tuleap\\Project\\ProjectAccessChecker;\nuse Tuleap\\Project\\RestrictedUserCanAccessProjectVerifier;\nuse Tuleap\\Reference\\ByNature\\ConcurrentVersionsSystem\\CrossReferenceCvsOrganizer;\nuse Tuleap\\Reference\\ByNature\\CrossReferenceByNatureInCoreOrganizer;\nuse Tuleap\\Reference\\ByNature\\Forum\\CrossReferenceForumOrganizer;\nuse Tuleap\\Reference\\ByNature\\News\\CrossReferenceNewsOrganizer;\nuse Tuleap\\Reference\\ByNature\\Wiki\\CrossReferenceWikiOrganizer;\nuse Tuleap\\Reference\\ByNature\\Wiki\\WikiPageFromReferenceValueRetriever;\nuse Tuleap\\Reference\\CrossReferenceByDirectionPresenterBuilder;\nuse Tuleap\\Reference\\CrossReferencePresenterFactory;\nuse Tuleap\\Reference\\CrossReferencesDao;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\CrossReference\\CrossReferenceFieldRenderer;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\View\\Reference\\CrossReferenceFieldPresenterBuilder;\nuse Tuleap\\Reference\\ByNature\\FRS\\CrossReferenceFRSOrganizer;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_CrossReferences extends Tracker_FormElement_Field implements Tracker_FormElement_Field_ReadOnly\n{\n    public const REST_REF_INDEX          = 'ref';\n    public const REST_REF_URL            = 'url';\n    public const REST_REF_DIRECTION      = 'direction';\n    public const REST_REF_DIRECTION_IN   = 'in';\n    public const REST_REF_DIRECTION_OUT  = 'out';\n    public const REST_REF_DIRECTION_BOTH = 'both';\n\n    public $default_properties = [];\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $criteria_value = CodendiDataAccess::instance()->quoteSmart($criteria_value);\n                $a              = 'A_' . $this->id;\n                return \" INNER JOIN cross_references AS $a\n                         ON (artifact.id = $a.source_id AND $a.source_type = '\" . Artifact::REFERENCE_NATURE . \"' AND $a.target_id = $criteria_value\n                             OR\n                             artifact.id = $a.target_id AND $a.target_type = '\" . Artifact::REFERENCE_NATURE . \"' AND $a.source_id = $criteria_value\n                         )\n                \";\n            }\n        }\n        return '';\n    }\n\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $this->getCrossReferenceListForREST($changeset)\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    private function getCrossReferenceListForREST(Tracker_Artifact_Changeset $changeset)\n    {\n        $crf = new CrossReferenceFactory(\n            $changeset->getArtifact()->getId(),\n            Artifact::REFERENCE_NATURE,\n            $this->getTracker()->getGroupId()\n        );\n        $crf->fetchDatas();\n\n        $list = [];\n        $refs = $crf->getFormattedCrossReferences();\n        if (! empty($refs['target'])) {\n            foreach ($refs['target'] as $refTgt) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refTgt['ref'],\n                    self::REST_REF_URL       => $refTgt['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_OUT,\n                ];\n            }\n        }\n        if (! empty($refs['source'])) {\n            foreach ($refs['source'] as $refSrc) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refSrc['ref'],\n                    self::REST_REF_URL       => $refSrc['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_IN,\n                ];\n            }\n        }\n        if (! empty($refs['both'])) {\n            foreach ($refs['both'] as $refBoth) {\n                $list[] = [\n                    self::REST_REF_INDEX     => $refBoth['ref'],\n                    self::REST_REF_URL       => $refBoth['url'],\n                    self::REST_REF_DIRECTION => self::REST_REF_DIRECTION_BOTH,\n                ];\n            }\n        }\n\n        return $list;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $crossref_fact = $this->getCrossReferencesFactory($artifact_id);\n\n        if ($crossref_fact->getNbReferences()) {\n            $html = $crossref_fact->getHTMLDisplayCrossRefs($with_links = true, $condensed = true);\n        } else {\n            $html = '';\n        }\n        return $html;\n    }\n\n    private function getCrossReferencesFactory($artifact_id)\n    {\n        $crossref_factory = new CrossReferenceFactory($artifact_id, Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crossref_factory->fetchDatas();\n\n        return $crossref_factory;\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report = null)\n    {\n        $html          = '';\n        $crossref_fact = $this->getCrossReferencesFactory($artifact_id);\n\n        if ($crossref_fact->getNbReferences()) {\n            $html = $crossref_fact->getHTMLCrossRefsForCSVExport();\n        }\n\n        return $html;\n    }\n\n    /**\n     * Display the field value as a criteria\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $value = $this->getCriteriaValue($criteria);\n        if (! $value) {\n            $value = '';\n        }\n        $hp = Codendi_HTMLPurifier::instance();\n        return '<input type=\"text\" name=\"criteria[' . $this->id . ']\" value=\"' . $hp->purify($this->getCriteriaValue($criteria), CODENDI_PURIFIER_CONVERT_HTML) . '\" />';\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return 'references raw value';\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Text_ValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    protected function getValueDao()\n    {\n        return new CrossReferenceDao();\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     *\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        //Nothing special to say here\n        return '';\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n       //The field is ReadOnly\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        return null;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    public function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $cross_ref_field_presenter_builder = new CrossReferenceFieldPresenterBuilder(\n            new CrossReferenceByDirectionPresenterBuilder(\n                EventManager::instance(),\n                ReferenceManager::instance(),\n                new CrossReferencePresenterFactory(\n                    new CrossReferencesDao(),\n                ),\n                ProjectManager::instance(),\n                new ProjectAccessChecker(\n                    new RestrictedUserCanAccessProjectVerifier(),\n                    EventManager::instance()\n                ),\n                new CrossReferenceByNatureInCoreOrganizer(\n                    new CrossReferenceWikiOrganizer(\n                        ProjectManager::instance(),\n                        new WikiPageFromReferenceValueRetriever(),\n                    ),\n                    new CrossReferenceCvsOrganizer(\n                        ProjectManager::instance(),\n                        new CvsDao(),\n                        new TlpRelativeDatePresenterBuilder(),\n                        UserManager::instance(),\n                        UserHelper::instance(),\n                    ),\n                    new CrossReferenceFRSOrganizer(\n                        new FRSPackageFactory(),\n                        new FRSReleaseFactory(),\n                        new FRSFileFactory()\n                    ),\n                    new CrossReferenceForumOrganizer(\n                        ProjectManager::instance(),\n                        new MessageRetriever(),\n                        new ForumRetriever(\n                            new ForumDao(),\n                        )\n                    ),\n                    new CrossReferenceNewsOrganizer(\n                        new NewsRetriever(\n                            new NewsDao(),\n                        )\n                    )\n                ),\n            )\n        );\n\n        $field_cross_ref_renderer = new CrossReferenceFieldRenderer(\n            TemplateRendererFactory::build(),\n            $cross_ref_field_presenter_builder\n        );\n\n        $include_assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n        $GLOBALS['HTML']->includeFooterJavascriptFile($include_assets->getFileURL('cross-references-fields.js'));\n\n        return $field_cross_ref_renderer->renderCrossReferences($artifact, $this->getCurrentUser());\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n\n        $crf = new CrossReferenceFactory($artifact->getId(), Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crf->fetchDatas();\n\n        switch ($format) {\n            case 'html':\n                if ($crf->getNbReferences()) {\n                    $output .= $crf->getHTMLCrossRefsForMail();\n                } else {\n                    $output .= '-';\n                }\n                break;\n            default:\n                $refs   = $crf->getFormattedCrossReferences();\n                $src    = '';\n                $tgt    = '';\n                $both   = '';\n                $output = PHP_EOL;\n                if (! empty($refs['target'])) {\n                    foreach ($refs['target'] as $refTgt) {\n                        $tgt .= $refTgt['ref'];\n                        $tgt .= PHP_EOL;\n                        $tgt .= $refTgt['url'];\n                        $tgt .= PHP_EOL;\n                    }\n                    $output .= ' -> Target : ' . PHP_EOL . $tgt;\n                    $output .= PHP_EOL;\n                }\n                if (! empty($refs['source'])) {\n                    foreach ($refs['source'] as $refSrc) {\n                        $src .= $refSrc['ref'];\n                        $src .= PHP_EOL;\n                        $src .= $refSrc['url'];\n                        $src .= PHP_EOL;\n                    }\n                    $output .= ' -> Source : ' . PHP_EOL . $src;\n                    $output .= PHP_EOL;\n                }\n                if (! empty($refs['both'])) {\n                    foreach ($refs['both'] as $refBoth) {\n                        $both .= $refBoth['ref'];\n                        $both .= PHP_EOL;\n                        $both .= $refBoth['url'];\n                        $both .= PHP_EOL;\n                    }\n                    $output .= ' -> Both   : ' . PHP_EOL . $both;\n                    $output .= PHP_EOL;\n                }\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . dgettext('tuleap-tracker', 'Display in & out references') . '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Cross References');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the cross references for the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/both_arrows.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/both_arrows.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Integer $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html          = '';\n        $crossref_fact = new CrossReferenceFactory($artifact->getId(), Artifact::REFERENCE_NATURE, $this->getTracker()->getGroupId());\n        $crossref_fact->fetchDatas();\n        if ($crossref_fact->getNbReferences()) {\n            $html .= $crossref_fact->getHTMLDisplayCrossRefs($with_links = false, $condensed = true);\n        } else {\n            $html .= '<div>' . dgettext('tuleap-tracker', 'References list is empty') . '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        return true;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        //No need to validate artifact id (read only for all)\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Fetch the element for the submit masschange form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        $html = $this->fetchSubmitValueMassChange();\n        return $html;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitCrossReferences($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\ArtifactTimeframeHelper;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\nuse Tuleap\\Tracker\\XML\\TrackerXmlImportFeedbackCollector;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Date extends Tracker_FormElement_Field\n{\n    public const DEFAULT_VALUE_TYPE_TODAY    = 0;\n    public const DEFAULT_VALUE_TYPE_REALDATE = 1;\n\n    public $default_properties = [\n        'default_value_type' => [\n            'type'    => 'radio',\n            'value'   => 0,      //default value is today\n            'choices' => [\n                'default_value_today' => [\n                    'radio_value' => 0,\n                    'type'        => 'label',\n                    'value'       => 'today',\n                ],\n                'default_value' => [\n                    'radio_value' => 1,\n                    'type'  => 'date',\n                    'value' => '',\n                ],\n            ],\n        ],\n        'display_time' => [\n            'value' => 0,\n            'type'  => 'checkbox',\n        ],\n    ];\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $searched_date = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator      = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        switch ($operator) {\n            case Tracker_Report_REST::DEFAULT_OPERATOR:\n            case Tracker_Report_REST::OPERATOR_CONTAINS:\n            case Tracker_Report_REST::OPERATOR_EQUALS:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '=';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_GREATER_THAN:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '>';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_LESS_THAN:\n                $searched_date = $this->extractStringifiedDate($searched_date);\n                if (! $searched_date) {\n                    return false;\n                }\n                $op        = '<';\n                $from_date = null;\n                $to_date   = $searched_date;\n                break;\n            case Tracker_Report_REST::OPERATOR_BETWEEN:\n                if (! $this->areBetweenDatesValid($searched_date)) {\n                    return false;\n                }\n                $criteria->setIsAdvanced(true);\n                $op        = null;\n                $from_date = $searched_date[0];\n                $to_date   = $searched_date[1];\n                break;\n            default:\n                throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid operator for criterion field '$this->name' ($this->id). \"\n                    . \"Allowed operators: [\" . implode(' | ', [\n                        Tracker_Report_REST::OPERATOR_EQUALS,\n                        Tracker_Report_REST::OPERATOR_GREATER_THAN,\n                        Tracker_Report_REST::OPERATOR_LESS_THAN,\n                        Tracker_Report_REST::OPERATOR_BETWEEN,\n                    ]) . \"]\");\n        }\n\n        $criteria_value           = [\n            'op'        => $op,\n            'from_date' => $from_date,\n            'to_date'   => $to_date,\n        ];\n        $formatted_criteria_value = $this->getFormattedCriteriaValue($criteria_value);\n\n        $this->setCriteriaValue($formatted_criteria_value, $criteria->report->id);\n        return true;\n    }\n\n    private function extractStringifiedDate($date)\n    {\n        if (is_array($date) && count($date) == 1 && isset($date[0])) {\n            $date = $date[0];\n        }\n\n        if (! strtotime($date)) {\n            return null;\n        }\n\n        return $date;\n    }\n\n    private function areBetweenDatesValid($criteria_dates)\n    {\n        return is_array($criteria_dates)\n            && count($criteria_dates) == 2\n            && isset($criteria_dates[0]) && strtotime($criteria_dates[0])\n            && isset($criteria_dates[1]) && strtotime($criteria_dates[1]);\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return true;\n    }\n\n    /**\n     * Continue the initialisation from an xml (FormElementFactory is not smart enough to do all stuff.\n     * Polymorphism rulez!!!\n     *\n     * @param SimpleXMLElement $xml         containing the structure of the imported Tracker_FormElement\n     * @param array            &$xmlMapping where the newly created formElements indexed by their XML IDs are stored (and values)\n     *\n     * @return void\n     */\n    public function continueGetInstanceFromXML(\n        $xml,\n        &$xmlMapping,\n        User\\XML\\Import\\IFindUserFromXMLReference $user_finder,\n        TrackerXmlImportFeedbackCollector $feedback_collector,\n    ) {\n        parent::continueGetInstanceFromXML($xml, $xmlMapping, $user_finder, $feedback_collector);\n\n        // add children\n        if (isset($this->default_properties['default_value'])) {\n            if ($this->default_properties['default_value'] === 'today') {\n                $this->default_properties['default_value_type']['value'] = self::DEFAULT_VALUE_TYPE_TODAY;\n            } else {\n                $this->default_properties['default_value_type']['value']                             = self::DEFAULT_VALUE_TYPE_REALDATE;\n                $this->default_properties['default_value_type']['choices']['default_value']['value'] = $this->default_properties['default_value'];\n            }\n            unset($this->default_properties['default_value']);\n        } else {\n            $this->default_properties['default_value_type']['value']                             = self::DEFAULT_VALUE_TYPE_REALDATE;\n            $this->default_properties['default_value_type']['choices']['default_value']['value'] = '';\n        }\n    }\n\n    /**\n     * Export form element properties into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement &$root The root element of the form element\n     *\n     * @return void\n     */\n    public function exportPropertiesToXML(&$root)\n    {\n        $child = $root->addChild('properties');\n\n        foreach ($this->getProperties() as $name => $property) {\n            if ($name === 'default_value_type') {\n                $this->exportDefaultValueToXML($child, $property);\n                continue;\n            }\n\n            $this->exportDisplayTimeToXML($child);\n        }\n    }\n\n    private function exportDefaultValueToXML(SimpleXMLElement &$xml_element, array $property)\n    {\n        $value_type = $property['value'];\n        if ($value_type == '1') {\n            // a date\n            $prop = $property['choices']['default_value'];\n            if (! empty($prop['value'])) {\n                // a specific date\n                $xml_element->addAttribute('default_value', $prop['value']);\n            } // else no default value, nothing to do\n        } else {\n            // today\n            $prop = $property['choices']['default_value_today'];\n            // $prop['value'] is the string 'today'\n            $xml_element->addAttribute('default_value', $prop['value']);\n        }\n    }\n\n    private function exportDisplayTimeToXML(SimpleXMLElement &$xml_element)\n    {\n        $xml_element->addAttribute('display_time', $this->isTimeDisplayed() ? '1' : '0');\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        if ($this->getProperty('default_value_type')) {\n            $value = $this->formatDate(parent::getDefaultValue());\n        } else { //Get date of the current day\n            $value = $this->formatDate($_SERVER['REQUEST_TIME']);\n        }\n        return $value;\n    }\n\n    /**\n     * Return the Field_Date_Dao\n     *\n     * @return DateFieldDao The dao\n     */\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     *\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return $this->getDao()->delete($this->id);\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a                 = 'A_' . $this->id;\n                $b                 = 'B_' . $this->id;\n                $compare_date_stmt = $this->getSQLCompareDate(\n                    (bool) $criteria->is_advanced,\n                    $criteria_value['op'],\n                    $criteria_value['from_date'],\n                    $criteria_value['to_date'],\n                    $b . '.value'\n                );\n                return \" INNER JOIN tracker_changeset_value AS $a\n                         ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_date AS $b\n                         ON ($a.id = $b.changeset_value_id\n                             AND $compare_date_stmt\n                         ) \";\n            }\n        }\n\n        return '';\n    }\n\n     /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (! isset($this->criteria_value[$criteria->report->id])) {\n            $this->criteria_value[$criteria->report->id] = [];\n            $dao                                         = $this->getCriteriaDao();\n            if ($dao && $row = $dao->searchByCriteriaId($criteria->id)->getRow()) {\n                $this->criteria_value[$criteria->report->id]['op']        = $row['op'];\n                $this->criteria_value[$criteria->report->id]['from_date'] = $row['from_date'];\n                $this->criteria_value[$criteria->report->id]['to_date']   = $row['to_date'];\n            }\n        }\n        return $this->criteria_value[$criteria->report->id];\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        return;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        if (empty($value['to_date']) && empty($value['from_date'])) {\n            return '';\n        } else {\n            //from date\n            if (empty($value['from_date'])) {\n                $value['from_date'] = 0;\n            } else {\n                 $value['from_date'] = strtotime($value['from_date']);\n            }\n\n            //to date\n            if (empty($value['to_date'])) {\n                $value['to_date'] = 0;\n            } else {\n                 $value['to_date'] = strtotime($value['to_date']);\n            }\n\n            //Operator\n            if (empty($value['op']) || ($value['op'] !== '<' && $value['op'] !== '=' && $value['op'] !== '>')) {\n                $value['op'] = '=';\n            }\n\n            return $value;\n        }\n    }\n\n    /**\n     * Build the sql statement for date comparison\n     *\n     * @param bool   $is_advanced Are we in advanced mode ?\n     * @param string $op          The operator used for the comparison (not for advanced mode)\n     * @param int    $from        The $from date used for comparison (only for advanced mode)\n     * @param int    $to          The $to date used for comparison\n     * @param string $column      The column to look into. ex: \"A_234.value\" | \"c.submitted_on\" ...\n     *\n     * @return string sql statement\n     */\n    protected function getSQLCompareDate($is_advanced, $op, $from, $to, $column)\n    {\n        return $this->getSQLCompareDay($is_advanced, $op, $from, $to, $column);\n    }\n\n    private function getSQLCompareDay($is_advanced, $op, $from, $to, $column)\n    {\n        $seconds_in_a_day = DateHelper::SECONDS_IN_A_DAY;\n\n        if ($is_advanced) {\n            if (! $to) {\n                $to = $_SERVER['REQUEST_TIME'];\n            }\n            if (empty($from)) {\n                $to               = $this->getDao()->getDa()->escapeInt($to);\n                $and_compare_date = \"$column <=  $to + $seconds_in_a_day - 1 \";\n            } else {\n                $from             = $this->getDao()->getDa()->escapeInt($from);\n                $to               = $this->getDao()->getDa()->escapeInt($to);\n                $and_compare_date = \"$column BETWEEN $from\n                                             AND $to + $seconds_in_a_day - 1\";\n            }\n        } else {\n            switch ($op) {\n                case '<':\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column < $to\";\n                    break;\n                case '=':\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column BETWEEN $to\n                                                 AND $to + $seconds_in_a_day - 1\";\n                    break;\n                default:\n                    $to               = $this->getDao()->getDa()->escapeInt($to);\n                    $and_compare_date = \"$column > $to + $seconds_in_a_day - 1\";\n                    break;\n            }\n        }\n\n        return $and_compare_date;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_date AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value\";\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Date_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->formatDateForDisplay($value);\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->formatDateForCSV($value);\n    }\n\n    public function fetchAdvancedCriteriaValue($criteria)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        $html          .= '<div style=\"text-align:right\">';\n        $value          = isset($criteria_value['from_date']) ? $this->formatDateForReport($criteria_value['from_date']) : '';\n        $html          .= '<label>';\n        $html          .= dgettext('tuleap-tracker', 'Start') . ' ';\n        $html          .= $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"criteria_\" . $this->id . \"_from\",\n            \"criteria[\" . $this->id . \"][from_date]\",\n            $value,\n            [],\n            [],\n            false,\n            'date-time-' . $this->getName()\n        );\n        $html          .= '</label>';\n        $value          = isset($criteria_value['to_date']) ? $this->formatDateForReport($criteria_value['to_date']) : '';\n        $html          .= '<label>';\n        $html          .= dgettext('tuleap-tracker', 'End') . ' ';\n        $html          .= $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"criteria_\" . $this->id . \"_to\",\n            \"criteria[\" . $this->id . \"][to_date]\",\n            $value,\n            [],\n            [],\n            false,\n            'date-time-' . $this->getName()\n        );\n        $html          .= '</label>';\n        $html          .= '</div>';\n        return $html;\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '';\n        if ($criteria->is_advanced) {\n            $html = $this->fetchAdvancedCriteriaValue($criteria);\n        } else {\n            $hp             = Codendi_HTMLPurifier::instance();\n            $criteria_value = $this->getCriteriaValue($criteria);\n            $lt_selected    = '';\n            $eq_selected    = '';\n            $gt_selected    = '';\n            if ($criteria_value) {\n                if ($criteria_value['op'] == '<') {\n                    $lt_selected = 'selected=\"selected\"';\n                } elseif ($criteria_value['op'] == '>') {\n                    $gt_selected = 'selected=\"selected\"';\n                } else {\n                    $eq_selected = 'selected=\"selected\"';\n                }\n            } else {\n                $eq_selected = 'selected=\"selected\"';\n            }\n            $html .= '<div style=\"white-space:nowrap;\">';\n\n            $criteria_selector = [\n                \"name\"      => 'criteria[' . $this->id . '][op]',\n                \"criterias\" => [\n                    \">\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'After'),\n                        \"selected\"   => $gt_selected,\n\n                    ],\n                    \"=\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'As of'),\n                        \"selected\"   => $eq_selected,\n                    ],\n                    \"<\" => [\n                        \"html_value\" => dgettext('tuleap-tracker', 'Before'),\n                        \"selected\"   => $lt_selected,\n                    ],\n                ],\n            ];\n\n            $value = $criteria_value ? $this->formatDateForReport($criteria_value['to_date']) : '';\n\n            $html .= $GLOBALS['HTML']->getBootstrapDatePicker(\n                \"tracker_report_criteria_\" . $this->id,\n                \"criteria[\" . $this->id . \"][to_date]\",\n                $value,\n                $criteria_selector,\n                [],\n                false,\n                'date-time-' . $this->getName()\n            );\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    private function formatDateForReport($criteria_value)\n    {\n        $date_formatter = new Tracker_FormElement_DateFormatter($this);\n        return $date_formatter->formatDate($criteria_value);\n    }\n\n    public function fetchMasschange()\n    {\n    }\n\n    /**\n     * Format a timestamp into Y-m-d H:i format\n     */\n    protected function formatDateTime($date)\n    {\n        return format_date(Tracker_FormElement_DateTimeFormatter::DATE_TIME_FORMAT, (float) $date, '');\n    }\n\n    /**\n     * Returns the CSV date format of the user regarding its preferences\n     * Returns either 'month_day_year' or 'day_month_year'\n     *\n     * @return string the CSV date format of the user regarding its preferences\n     */\n    public function _getUserCSVDateFormat() // phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $user = UserManager::instance()->getCurrentUser();\n        return (string) $user->getPreference('user_csv_dateformat');\n    }\n\n    protected function formatDateForCSV($date)\n    {\n        $date_csv_export_pref = $this->_getUserCSVDateFormat();\n        switch ($date_csv_export_pref) {\n            case \"month_day_year\":\n                $fmt = 'm/d/Y';\n                break;\n            case \"day_month_year\":\n                $fmt = 'd/m/Y';\n                break;\n            default:\n                $fmt = 'm/d/Y';\n                break;\n        }\n\n        if ($this->isTimeDisplayed()) {\n            $fmt .= ' H:i';\n        }\n\n        return format_date($fmt, (float) $date, '');\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->formatDate($value);\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = 0;\n        if ($v = $changeset->getValue($this)) {\n            if ($row = $this->getValueDao()->searchById($v->getId(), $this->id)->getRow()) {\n                $value = $row['value'];\n            }\n        }\n        return $this->formatDate($value);\n    }\n\n    protected function getValueDao()\n    {\n        return new DateValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $errors = $this->has_errors ? ['has_error'] : [];\n\n        return $this->getFormatter()->fetchSubmitValue($submitted_values, $errors);\n    }\n\n     /**\n     * Fetch the html code to display the field value in masschange submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return $this->getFormatter()->fetchSubmitValueMasschange();\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $errors = $this->has_errors ? ['has_error'] : [];\n\n        return $this->getFormatter()->fetchArtifactValue($value, $submitted_values, $errors);\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getTimestamp()) {\n            return '-';\n        }\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    public function getNoValueLabel()\n    {\n        return parent::getNoValueLabel();\n    }\n\n    public function getValueFromSubmitOrDefault(array $submitted_values)\n    {\n        return parent::getValueFromSubmitOrDefault($submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $timeframe_helper = $this->getArtifactTimeframeHelper();\n        $html_value       = $this->getFormatter()->fetchArtifactValueReadOnly($artifact, $value);\n        $user             = $this->getCurrentUser();\n\n        if ($timeframe_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $html_value = $html_value\n                . '<span class=\"artifact-timeframe-helper\"> ('\n                . $timeframe_helper->getDurationArtifactHelperForReadOnlyView($user, $artifact)\n                . ')</span>';\n        }\n\n        return $html_value;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return $GLOBALS['HTML']->getBootstrapDatePicker(\n            \"tracker_admin_field_\" . $this->id,\n            '',\n            $this->hasDefaultValue() ? $this->getDefaultValue() : '',\n            [],\n            [],\n            $this->isTimeDisplayed(),\n            'date-time-' . $this->getName()\n        );\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Date');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Allows user to select a date with a calendar');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Date $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value && $value->getTimestamp()) {\n            $user  = HTTPRequest::instance()->getCurrentUser();\n            $html .= DateHelper::relativeDateInlineContext($value->getTimestamp() ?? 0, $user);\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->getFormatter()->validate($value);\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, strtotime($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return strtotime($this->formatDate($old_value->getTimestamp())) != strtotime($new_value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id, $this->id)->getRow()) {\n            $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $row['value']);\n        }\n        return $changeset_value;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Compute the number of digits of an int (could be private but I want to unit test it)\n     * 1 => 1\n     * 12 => 2\n     * 123 => 3\n     * 1999 => 4\n     * etc.\n     *\n     */\n    public function _nbDigits($int_value) // phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        return 1 + (int) (log($int_value) / log(10));\n    }\n\n    /**\n     * Explode a date in the form of (m/d/Y H:i or d/m/Y H:i) regarding the csv peference\n     * into its a list of 5 parts (YYYY,MM,DD,H,i)\n     * if DD and MM are not defined then default them to 1\n     *\n     *\n     * Please use function date_parse_from_format instead\n     * when codendi will run PHP >= 5.3\n     *\n     *\n     * @param string $date the date in the form of m/d/Y H:i or d/m/Y H:i\n     *\n     * @return array the five parts of the date array(YYYY,MM,DD,H,i)\n     */\n    public function explodeXlsDateFmt($date)\n    {\n        $user_preference = $this->_getUserCSVDateFormat();\n        $match           = [];\n\n        if (preg_match(\"/\\s*(\\d+)\\/(\\d+)\\/(\\d+) (\\d+):(\\d+)(?::(\\d+))?/\", $date, $match)) {\n            return $this->getCSVDateComponantsWithHours($match, $user_preference);\n        } elseif (preg_match(\"/\\s*(\\d+)\\/(\\d+)\\/(\\d+)/\", $date, $match)) {\n            return $this->getCSVDateComponantsWithoutHours($match, $user_preference);\n        }\n\n        return $this->getCSVDefaultDateComponants();\n    }\n\n    /**\n     * @return array\n     */\n    private function getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second)\n    {\n        if (checkdate($month, $day, $year) && $this->_nbDigits($year) ===  4) {\n            return [$year, $month, $day, $hour, $minute, $second];\n        }\n\n        return [];\n    }\n\n    private function getCSVDateComponantsWithoutHours(array $match, $user_preference)\n    {\n        $hour   = '0';\n        $minute = '0';\n        $second = '0';\n\n        if ($user_preference == \"day_month_year\") {\n            [, $day, $month, $year] = $match;\n        } else {\n            [, $month, $day, $year] = $match;\n        }\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second);\n    }\n\n    private function getCSVDateComponantsWithHours(array $match, $user_preference)\n    {\n        if ($user_preference == \"day_month_year\") {\n            [, $day, $month, $year, $hour, $minute] = $match;\n        } else {\n            [, $month, $day, $year, $hour, $minute] = $match;\n        }\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, '00');\n    }\n\n    private function getCSVDefaultDateComponants()\n    {\n        $year   = '1970';\n        $month  = '1';\n        $day    = '1';\n        $hour   = '0';\n        $minute = '0';\n        $second = '0';\n\n        return $this->getCSVWellFormedDateComponants($month, $day, $year, $hour, $minute, $second);\n    }\n\n    /**\n     * Get the field data for CSV import\n     *\n     * @param string $data_cell the CSV field value (a date with the form dd/mm/YYYY or mm/dd/YYYY)\n     *\n     * @return string the date with the form YYYY-mm-dd corresponding to the date $data_cell, or null if date format is wrong or empty\n     */\n    public function getFieldDataForCSVPreview($data_cell)\n    {\n        if ($data_cell !== '') {\n            $date_explode = $this->explodeXlsDateFmt($data_cell);\n            if (isset($date_explode[0])) {\n                if ($this->_nbDigits($date_explode[0]) == 4) {\n                    return $this->getFormatter()->getFieldDataForCSVPreview($date_explode);\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return String the field data corresponding to the value for artifact submision, or null if date format is wrong\n     */\n    public function getFieldData($value)\n    {\n        if (strpos($value, '/') !== false) {\n            // Assume the format is either dd/mm/YYYY or mm/dd/YYYY depending on the user preferences.\n            return $this->getFieldDataForCSVPreview($value);\n        }\n\n        if (strpos($value, '-') !== false) {\n            // Assume the format is YYYY-mm-dd\n            $date_array = explode('-', $value);\n            if (count($date_array) == 3 && checkdate($date_array[1], $date_array[2], $date_array[0]) && $this->_nbDigits($date_array[0])) {\n                return $value;\n            }\n\n            return null;\n        }\n\n        if ((int) $value == $value) {\n            // Assume it's a timestamp\n            return $this->getFormatter()->formatDate((int) $value);\n        }\n\n        if (trim($value) === '') {\n            return '';\n        }\n\n        return null;\n    }\n\n    /**\n     * Convert ISO8601 into internal date needed by createNewChangeset\n     *\n     * @param array $value\n     */\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (! $value['value']) {\n            return '';\n        }\n\n        if ($this->isTimeDisplayed()) {\n            return date(Tracker_FormElement_DateTimeFormatter::DATE_TIME_FORMAT, strtotime($value['value']));\n        }\n\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, strtotime($value['value']));\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Return the field last value\n     *\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return $artifact->getValue($this)->getValue();\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new DateValueDao();\n        $dar       = $dao->getArtifactsByFieldAndValue($this->id, $date);\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitDate($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return ($this->getProperty('display_time') == 1);\n    }\n\n    public function formatDate($date)\n    {\n        return $this->getFormatter()->formatDate($date);\n    }\n\n    public function formatDateForDisplay($timestamp)\n    {\n        return $this->getFormatter()->formatDateForDisplay($timestamp);\n    }\n\n    /**\n     * @return Tracker_FormElement_DateFormatter\n     */\n    public function getFormatter()\n    {\n        if ($this->isTimeDisplayed()) {\n            return new Tracker_FormElement_DateTimeFormatter($this);\n        }\n\n        return new Tracker_FormElement_DateFormatter($this);\n    }\n\n    protected function getArtifactTimeframeHelper(): ArtifactTimeframeHelper\n    {\n        return new ArtifactTimeframeHelper(\n            SemanticTimeframeBuilder::build(),\n            \\BackendLogger::getDefaultLogger()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForRestCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTraditionalUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentForTusUploadCreator;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\AttachmentToFinalPlaceMover;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\ChangesetValueFileSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FieldDataFromRESTBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\FileInfoForTusUploadedFileReadyToBeAttachedProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\FileOngoingUploadDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\Tus\\FileBeingUploadedInformationProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\Upload\\UploadPathAllocator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_File extends Tracker_FormElement_Field\n{\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field  is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $da             = CodendiDataAccess::instance();\n                $criteria_value = $da->quoteLikeValueSurround($criteria_value);\n\n                return \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_file AS $b ON ($b.changeset_value_id = $a.id)\n                         INNER JOIN tracker_fileinfo AS $c ON (\n                            $c.id = $b.fileinfo_id\n                            AND (\n                                $c.description LIKE \" . $criteria_value . \"\n                                OR\n                                $c.filename LIKE \" . $criteria_value . \"\n                            )\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_File_ValueDao();\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact_id, $this->getChangesetValues($changeset_id), $submitter_needed, []);\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchAllAttachmentForCSV($artifact_id, $this->getChangesetValues($changeset_id));\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html = '<input type=\"text\" name=\"criteria[' . $this->id . ']\" id=\"tracker_report_criteria_' . $this->id . '\" value=\"';\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= $hp->purify($criteria_value, CODENDI_PURIFIER_CONVERT_HTML);\n        }\n        $html .= '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value = '';\n        if ($v = $changeset->getValue($this)) {\n            assert($v instanceof Tracker_Artifact_ChangesetValue_File);\n            if (isset($v['value_id'])) {\n                $v = [$v];\n            }\n            /** @psalm-var array{value_id:int} $val */\n            foreach ($v as $val) {\n                if ($val['value_id'] != 100) {\n                    if ($row = $this->getValueDao()->searchById($val['value_id'], $this->id)->getRow()) {\n                        if ($value) {\n                            $value .= ', ';\n                        }\n                        $value .= $row['filename'];\n                    }\n                }\n            }\n        }\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new FileFieldValueDao();\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $html             = '';\n        $submitter_needed = true;\n        $read_only        = false;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, $submitted_values, $read_only);\n        $html            .= $this->fetchSubmitValue($submitted_values);\n        return $html;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n        return $this->fetchArtifactReadOnly($artifact, $submitted_values);\n    }\n\n    public function fetchSubmitForOverlay(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n        if ($last_changeset) {\n            $value = $last_changeset->getValue($this);\n            return $this->fetchAllAttachmentTitleAndDescription($value);\n        }\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in Mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getFiles()) {\n            return '-';\n        }\n\n        return $this->fetchMailAllAttachment($artifact->id, $value, $format);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html             = '';\n        $submitter_needed = true;\n        $html            .= $this->fetchAllAttachment($artifact->id, $value, $submitter_needed, []);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $html .= '<div class=\"add-attachement\">';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<div class=\"tracker_artifact_add_attachment\">';\n        $html .= '<p>';\n        $html .= '<input type=\"file\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][file]\" data-upload-is-enabled/>';\n        $html .= '<label>' . dgettext('tuleap-tracker', 'Description:');\n        $html .= '</label>';\n        $html .= ' <input type=\"text\" id=\"tracker_field_' . $this->id . '\" name=\"artifact[' . $this->id . '][][description]\" />';\n        $html .= '</p>';\n        $html .= '</div>';\n        $html .= '</div>';\n        if (isset($submitted_values[$this->id])) {\n            foreach ($submitted_values[$this->id] as $submitted_value) {\n                if (isset($submitted_value['tus-uploaded-id'])) {\n                    $html .= '<input\n                        type=\"hidden\"\n                        name=\"artifact[' . $this->id . '][][tus-uploaded-id]\"\n                        value=\"' . (int) $submitted_value['tus-uploaded-id'] . '\">';\n                }\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';  // deactivate mass change for file fields (see issue described in rev #15855)\n    }\n\n    public function fetchAllAttachment(\n        $artifact_id,\n        $values,\n        $submitter_needed,\n        array $submitted_values,\n        $read_only = true,\n        $lytebox_id = null,\n    ) {\n        $html = '';\n        if ($lytebox_id === null) {\n            $lytebox_id = $this->getId();\n        }\n        if ($values !== null && count($values) > 0) {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $uh    = UserHelper::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n\n                $link_show = '<a href=\"' . $query_link . '\"' .\n                                 $this->getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id) . '\n                                 title=\"' . $sanitized_description . '\">';\n\n                $add = '<div class=\"tracker_artifact_attachment\">';\n                if (! $read_only) {\n                    $add .= $this->fetchDeleteCheckbox($fileinfo, $submitted_values);\n                }\n\n                $add .= '<div class=\"tracker_artifact_preview_attachment_hover\">';\n                if ($submitter_needed) {\n                    $add .= '<div class=\"tracker_artifact_attachment_submitter\">' . 'By ' . $uh->getLinkOnUserFromUserId($fileinfo->getSubmittedBy()) . '</div>';\n                }\n                $add .= '<div class=\"tracker_artifact_attachment_size\">(' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')</div>';\n                $add .= '<div>';\n                $add .= $link_show . '<i class=\"fa fa-eye\"></i></a>';\n                $add .= '<a href=\"' . $query_link . '\" download><i class=\"fa fa-download\"></i></a>';\n                $add .= '</div>';\n                $add .= '</div>';\n\n                if ($fileinfo->isImage()) {\n                    $query_add = $hp->purify($this->getFileHTMLPreviewUrl($fileinfo));\n\n                    $add .= '<div class=\"tracker_artifact_preview_attachment image\">';\n                    $add .= '<div style=\"background-image: url(\\'' . $query_add . '\\')\"></div>';\n                    $add .= '</div>';\n                } else {\n                    $add .= '<div class=\"tracker_artifact_preview_attachment\"></div>';\n                }\n\n                $link_goto = '<a href=\"' . $query_link . '\"' .\n                                 'title=\"' . $sanitized_description . '\">';\n                $add      .= '<div class=\"tracker_artifact_attachment_name\">' . $link_goto . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a></div>';\n\n                if ($sanitized_description) {\n                    $add .= '<div class=\"tracker_artifact_attachment_description\">' . $sanitized_description . '</div>';\n                }\n\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $html .= implode('', $added);\n        }\n\n        if ($read_only && ($values === null || count($values) === 0)) {\n            $html .= $this->getNoValueLabel();\n        }\n\n        return $html;\n    }\n\n    public function getFileHTMLUrl(Tracker_FileInfo $file_info)\n    {\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/' . $this->getFilenameSlug($file_info);\n    }\n\n    public function getFileHTMLPreviewUrl(Tracker_FileInfo $file_info)\n    {\n        if (! $file_info->isImage()) {\n            return;\n        }\n\n        $artifact = $this->getFileInfoFactory()->getArtifactByFileInfoId($file_info->getId());\n\n        if (! $artifact) {\n            return;\n        }\n\n        return TRACKER_BASE_URL . '/attachments/preview/' . $this->getFilenameSlug($file_info);\n    }\n\n    /**\n     * @return string\n     */\n    private function getFilenameSlug(Tracker_FileInfo $file_info)\n    {\n        return (int) $file_info->getId() . '-' . rawurlencode($file_info->getFilename());\n    }\n\n    private function getVisioningAttributeForLink($fileinfo, $read_only, $lytebox_id)\n    {\n        if (! $fileinfo->isImage()) {\n            return '';\n        }\n\n        if ($read_only) {\n            return 'rel=\"lytebox[' . $lytebox_id . ']\"';\n        }\n\n        return 'data-rel=\"lytebox[' . $lytebox_id . ']\"';\n    }\n\n    private function fetchDeleteCheckbox(Tracker_FileInfo $fileinfo, array $submitted_values)\n    {\n        $html    = '';\n        $html   .= '<label class=\"pc_checkbox tracker_artifact_attachment_delete\">';\n        $checked = '';\n        if (isset($submitted_values[$this->id]) && ! empty($submitted_values[$this->id]['delete']) && in_array($fileinfo->getId(), $submitted_values[$this->id]['delete'])) {\n            $checked = 'checked=\"checked\"';\n        }\n        $html .= '<input type=\"checkbox\" name=\"artifact[' . $this->id . '][delete][]\" value=\"' . $fileinfo->getId() . '\" title=\"delete\" ' . $checked . ' />&nbsp;';\n        $html .= '</label>';\n        return $html;\n    }\n\n    protected function fetchAllAttachmentForCSV($artifact_id, $values)\n    {\n        $txt = '';\n        if (count($values)) {\n            $filenames = [];\n            foreach ($values as $fileinfo) {\n                $filenames[] = $fileinfo->getFilename();\n            }\n            $txt .= implode(',', $filenames);\n        }\n        return $txt;\n    }\n\n    protected function fetchAllAttachmentTitleAndDescription($values)\n    {\n        $html = '';\n        if ($values) {\n            $purifier = Codendi_HTMLPurifier::instance();\n            $html    .= '<div class=\"tracker-artifact-attachement-title-list tracker_artifact_field\"\n                              data-field-id=\"' . $this->id . '\"\n                              data-is-required=\"false\">';\n            $html    .= '<div class=\"disabled_field\">' . dgettext('tuleap-tracker', '\"Attachment\" type field cannot be modified during artifact copy.') . '</div>';\n            $html    .= '<ul>';\n            foreach ($values as $value) {\n                $description = $value->getDescription();\n\n                $html .= '<li>';\n                $html .= '<span class=\"file-title\">';\n                $html .= $purifier->purify($value->getFileName());\n                $html .= '</span>';\n\n                if ($description) {\n                    $html .= '<span class=\"file-description\">';\n                    $html .= ' - ' . $purifier->purify($description);\n                    $html .= '</span>';\n                }\n                $html .= '</li>';\n            }\n            $html .= '</ul>';\n            $html .= '</div>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch all attachements for Mail output\n     *\n     * @param int $artifact_id The artifact Id\n     * @param Array            $values     The actual value of the field\n     * @param String            $format       The mail format\n     *\n     * @return String\n     */\n    protected function fetchMailAllAttachment($artifact_id, $values, $format)\n    {\n        $output = '';\n        if (! count($values)) {\n            return '';\n        }\n\n        $uh = UserHelper::instance();\n\n        $url = \\Tuleap\\ServerHostname::HTTPSUrl();\n\n        if ($format == 'text') {\n            foreach ($values as $fileinfo) {\n                $query_link = $this->getFileHTMLUrl($fileinfo);\n\n                $link    = '<' . $url . $query_link . '>';\n                $output .= $fileinfo->getDescription();\n                $output .= ' | ';\n                $output .= $fileinfo->getFilename();\n                $output .= ' | ';\n                $output .= $fileinfo->getHumanReadableFilesize();\n                $output .= ' | ';\n                $output .= $uh->getDisplayNameFromUserId($fileinfo->getSubmittedBy());\n                $output .= PHP_EOL;\n                $output .= $link;\n                $output .= PHP_EOL;\n            }\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $added = [];\n            foreach ($values as $fileinfo) {\n                $query_link            = $hp->purify($this->getFileHTMLUrl($fileinfo));\n                $sanitized_description = $hp->purify($fileinfo->getDescription(), CODENDI_PURIFIER_CONVERT_HTML);\n                $link_show             = '<a href=\"' . $url . $query_link . '\"\n                                 title=\"' . $sanitized_description . '\">';\n\n                $info  = $link_show . $hp->purify($fileinfo->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</a>';\n                $info .= ' (' . $hp->purify($fileinfo->getHumanReadableFilesize()) . ')';\n\n                $add     = '<div class=\"tracker_artifact_attachment\">';\n                $add    .= '<table><tr><td>';\n                $add    .= $info;\n                $add    .= '</td></tr></table>';\n                $add    .= '</div>';\n                $added[] = $add;\n            }\n            $output .= implode('', $added);\n        }\n        return $output;\n    }\n\n    /**\n     * @param int | string $changeset_id\n     * @return Tracker_FileInfo[]\n     */\n    protected function getChangesetValues($changeset_id): array\n    {\n        $da              = CodendiDataAccess::instance();\n        $changest_values = [];\n\n        $field_id     = $da->escapeInt($this->id);\n        $changeset_id = $da->escapeInt($changeset_id);\n        $sql          = \"SELECT c.changeset_id, c.has_changed, f.id\n                    FROM tracker_fileinfo as f\n                         INNER JOIN tracker_changeset_value_file AS vf on (f.id = vf.fileinfo_id)\n                         INNER JOIN tracker_changeset_value AS c\n                         ON ( vf.changeset_value_id = c.id\n                          AND c.field_id = $field_id AND c.changeset_id= $changeset_id\n                         )\n                    ORDER BY f.id\";\n\n        $dao               = new DataAccessObject();\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n        foreach ($dao->retrieve($sql) as $row) {\n            $changest_values[] = $file_info_factory->getById($row['id']);\n        }\n        return $changest_values;\n    }\n\n    public function previewAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->isImage() && file_exists($fileinfo->getThumbnailPath())) {\n                header('Content-type: ' . $fileinfo->getFiletype());\n                readfile($fileinfo->getThumbnailPath());\n            }\n        }\n        exit();\n    }\n\n    public function showAttachment($attachment_id)\n    {\n        if ($fileinfo = $this->getTrackerFileInfoFactory()->getById($attachment_id)) {\n            if ($fileinfo->fileExists()) {\n                $http = Codendi_HTTPPurifier::instance();\n                header('X-Content-Type-Options: nosniff');\n                header('Content-Type: ' . $http->purify($fileinfo->getFiletype()));\n                header('Content-Length: ' . $http->purify($fileinfo->getFilesize()));\n                header('Content-Disposition: attachment; filename=\"' . $http->purify($fileinfo->getFilename()) . '\"');\n                header('Content-Description: ' . $http->purify($fileinfo->getDescription()));\n                if (ob_get_level()) {\n                    ob_end_clean();\n                }\n                flush();\n                $file = fopen($fileinfo->getPath(), \"r\");\n                while (! feof($file)) {\n                    print fread($file, 30 * 1024);\n                    flush();\n                }\n                fclose($file);\n            }\n        }\n        exit();\n    }\n\n    public function getRootPath()\n    {\n        return $this->getGlobalTrackerRootPath() . $this->getId();\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>';\n        $html .= '<p>' . dgettext('tuleap-tracker', 'Add a new file:') . '</p>';\n        $html .= '<table class=\"tracker_artifact_add_attachment\">';\n        $html .= '<tr><td><label>' . dgettext('tuleap-tracker', 'Description:') . '</label></td><td><label>' . dgettext('tuleap-tracker', 'File:') . '</label></td></tr>';\n        $html .= '<tr><td><input type=\"text\" id=\"tracker_field_' . $this->id . '\" /></td>';\n        $html .= '<td><input type=\"file\" id=\"tracker_field_' . $this->id . '\" /></td></tr>';\n        $html .= '</table>';\n        $html .= '</div>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'File upload');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Lets the user attach files to the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/attach--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Artifact                    $artifact The artifact\n     * @param Tracker_ChangesetValue_File $value    The changeset value of this field\n     *\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value) {\n            $files_info = $value->getFiles();\n            if (count($files_info)) {\n                $html .= '<div class=\"cross-ref-tooltip-collection\">';\n\n                $hp = Codendi_HTMLPurifier::instance();\n\n                $added = [];\n                foreach ($files_info as $file_info) {\n                    $add = '';\n\n                    if ($file_info->isImage()) {\n                        $query = $this->getFileHTMLPreviewUrl($file_info);\n                        $add  .= '<img src=\"' . $hp->purify($query) . '\"\n                                      alt=\"' .  $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML)  . '\"\n                                 >';\n                    } elseif ($file_info->getDescription()) {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getDescription(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    } else {\n                        $add .= '<div class=\"cross-ref-tooltip-collection-item\">';\n                        $add .= '<i class=\"fa fa-paperclip\"></i>';\n                        $add .= '<p>' . $hp->purify($file_info->getFilename(), CODENDI_PURIFIER_CONVERT_HTML) . '</p>';\n                        $add .= '</div>';\n                    }\n                    $added[] = $add;\n                }\n                $html .= implode('', $added) . '</div>';\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (is_array($value)) {\n            $this->checkAllFilesHaveBeenSuccessfullyUploaded($value);\n        }\n\n        return ! $this->has_errors;\n    }\n\n    private function checkAllFilesHaveBeenSuccessfullyUploaded($value)\n    {\n        $rule = new Rule_File();\n        foreach ($value as $i => $attachment) {\n            if ($this->isAttachmentNeedsToBeValidated($i, $attachment)) {\n                if (! $rule->isValid($attachment)) {\n                    $this->has_errors = true;\n                    $attachment_error = sprintf(dgettext('tuleap-tracker', 'Attachment #%1$s has not been saved:'), $i);\n                    $GLOBALS['Response']->addFeedback('error', $attachment_error . ' ' . $rule->getErrorMessage());\n                }\n            }\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    private function isAttachmentNeedsToBeValidated($attachment_index, array $attachment)\n    {\n        if ($attachment_index === 'delete' || isset($attachment['tus-uploaded-id'])) {\n            return false;\n        }\n\n        $is_file_uploaded             = ! empty($attachment['error']) && $attachment['error'] != UPLOAD_ERR_NO_FILE;\n        $is_file_description_provided = trim($attachment['description']);\n\n        return $is_file_uploaded || $is_file_description_provided;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if (\n            is_array($value) &&\n            $this->isRequired() &&\n            ! $this->checkThatAtLeastOneFileIsUploaded($value) &&\n            $this->isPreviousChangesetEmpty($artifact, $value)\n        ) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * Check that at least one file is sent\n     *\n     * @param array $files the files\n     *\n     * @return bool true if success\n     */\n    public function checkThatAtLeastOneFileIsUploaded($files)\n    {\n        $r              = new Rule_File();\n        $a_file_is_sent = false;\n        foreach ($files as $action => $attachment) {\n            if ($a_file_is_sent) {\n                break;\n            }\n            if ((string) $action === 'delete') {\n                continue;\n            }\n            $a_file_is_sent = isset($attachment['tus-uploaded-id']) || $r->isValid($attachment);\n        }\n        return $a_file_is_sent;\n    }\n\n    /**\n     * Extract data from request\n     * Some fields like files doesn't have their value submitted in POST or GET\n     * Let them populate $fields_data[field_id] if needed\n     *\n     * @param array &$fields_data The user submitted value\n     *\n     * @return void\n     */\n    public function augmentDataFromRequest(&$fields_data)\n    {\n        if (! isset($fields_data[$this->getId()]) || ! is_array($fields_data[$this->getId()])) {\n            $fields_data[$this->getId()] = [];\n        }\n        $files_infos = $this->getSubmittedInfoFromFILES();\n        if (isset($files_infos['name'][$this->getId()])) {\n            $info_keys = array_keys($files_infos); //name, type, error, ...\n            $nb        = count($files_infos['name'][$this->getId()]);\n            for ($i = 0; $i < $nb; ++$i) {\n                $tab = [];\n                foreach ($info_keys as $key) {\n                    $tab[$key] = $files_infos[$key][$this->getId()][$i]['file'];\n                }\n                if (isset($fields_data[$this->getId()][$i])) {\n                    $fields_data[$this->getId()][$i] = array_merge($fields_data[$this->getId()][$i], $tab);\n                } else {\n                    $fields_data[$this->getId()][] = $tab;\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the array wich contains files submitted by the user\n     *\n     * @return null|array null if not found\n     */\n    protected function getSubmittedInfoFromFILES()\n    {\n        return isset($_FILES['artifact']) ? $_FILES['artifact'] : null;\n    }\n\n    protected $files_info_from_request = null;\n    /**\n     * Extract the file information (name, error, tmp, ...) from the request\n     *\n     * @return array Array of file info\n     */\n    protected function extractFilesFromRequest()\n    {\n        if (! $this->files_info_from_request) {\n        }\n        return $this->files_info_from_request;\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $mover              = new AttachmentToFinalPlaceMover();\n        $rule_file          = new Rule_File();\n        $ongoing_upload_dao = new FileOngoingUploadDao();\n        $attachment_creator = new AttachmentForTusUploadCreator(\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider($ongoing_upload_dao),\n            $ongoing_upload_dao,\n            new AttachmentForRestCreator(\n                $mover,\n                $this->getTemporaryFileManager(),\n                new AttachmentForTraditionalUploadCreator($mover, $rule_file),\n                $rule_file\n            )\n        );\n\n        $saver = new ChangesetValueFileSaver($this->getValueDao(), $attachment_creator);\n\n        assert($previous_changesetvalue instanceof Tracker_Artifact_ChangesetValue_File || $previous_changesetvalue === null);\n        return $saver->saveValue(\n            $this->getCurrentUser(),\n            $this,\n            $changeset_value_id,\n            $value,\n            $previous_changesetvalue,\n            $url_mapping\n        );\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //\"old\" and \"new\" value are irrelevant in this context.\n        //We just have to know if there is at least one file successfully uploaded\n        return $this->checkThatAtLeastOneFileIsUploaded($new_value) || ! empty($new_value['delete']);\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     *\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return true;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed): Tracker_Artifact_ChangesetValue_File\n    {\n        $file_info_factory = $this->getTrackerFileInfoFactory();\n\n        $files      = [];\n        $file_value = $this->getValueDao()->searchById($value_id);\n        foreach ($file_value as $row) {\n            $file = $file_info_factory->getById($row['fileinfo_id']);\n            if ($file !== null) {\n                $files[] = $file;\n            }\n        }\n        return new Tracker_Artifact_ChangesetValue_File($value_id, $changeset, $this, $has_changed, $files);\n    }\n\n    /**\n     * Get the file dao\n     *\n     * @return Tracker_FileInfoDao\n     */\n    protected function getFileInfoDao()\n    {\n        return new Tracker_FileInfoDao();\n    }\n\n    /**\n     * Get file info factory\n     *\n     * @return Tracker_FileInfoFactory\n     */\n    protected function getFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            $this->getFileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return null;\n    }\n\n    /**\n     * Override default value as it's not possible to import a file via CSV\n     *\n     * @param type $csv_value\n     *\n     * @return array\n     */\n    public function getFieldDataFromCSVValue($csv_value, ?Artifact $artifact = null)\n    {\n        return [];\n    }\n\n    public function getFieldDataFromRESTValue(array $rest_value, ?Artifact $artifact = null)\n    {\n        //Transform array to object\n        $value = json_decode(json_encode($rest_value), false);\n\n        $this->validateDataFromREST($value);\n\n        $builder = new FieldDataFromRESTBuilder(\n            $this->getUserManager(),\n            $this->getFormElementFactory(),\n            $this->getTrackerFileInfoFactory(),\n            $this->getTemporaryFileManager(),\n            $this->getFileInfoForTusUploadedFileReadyToBeAttachedProvider(new FileOngoingUploadDao())\n        );\n        return $builder->buildFieldDataFromREST($value, $this, $artifact);\n    }\n\n    public function getFieldDataFromRESTValueByField($value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    private function validateDataFromREST($data)\n    {\n        if (! property_exists($data, 'value') || ! is_array($data->value)) {\n            throw new Tracker_FormElement_InvalidFieldException('Invalid format for file field \"' . $data->field_id . '\". '\n                . ' Correct format is {\"field_id\" : 425, \"value\" : [457, 258]}');\n        }\n    }\n\n    /**\n     * @return Tracker_Artifact_Attachment_TemporaryFileManager\n     */\n    private function getTemporaryFileManager()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManager(\n            $this->getUserManager(),\n            new Tracker_Artifact_Attachment_TemporaryFileManagerDao(),\n            new System_Command(),\n            ForgeConfig::get('sys_file_deletion_delay'),\n            new \\Tuleap\\DB\\DBTransactionExecutorWithConnection(\\Tuleap\\DB\\DBFactory::getMainTuleapDBConnection())\n        );\n    }\n\n    private function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n    protected function getTrackerFileInfoFactory()\n    {\n        return new Tracker_FileInfoFactory(\n            new Tracker_FileInfoDao(),\n            Tracker_FormElementFactory::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    protected function getTemporaryFileManagerDao()\n    {\n        return new Tracker_Artifact_Attachment_TemporaryFileManagerDao();\n    }\n\n    public function deleteChangesetValue(Tracker_Artifact_Changeset $changeset, $changeset_value_id)\n    {\n        $values = $this->getChangesetValue($changeset, $changeset_value_id, false);\n        foreach ($values as $fileinfo) {\n            $fileinfo->delete();\n        }\n        parent::deleteChangesetValue($changeset, $changeset_value_id);\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitFile($this);\n    }\n\n    protected function isPreviousChangesetEmpty(Artifact $artifact, $value)\n    {\n        $last_changeset = $artifact->getLastChangeset();\n\n        if (\n            $last_changeset &&\n            ! is_a($last_changeset, Tracker_Artifact_Changeset_Null::class) &&\n            count($last_changeset->getValue($this)->getFiles()) > 0\n        ) {\n            return $this->areAllFilesDeletedFromPreviousChangeset($last_changeset, $value);\n        }\n        return true;\n    }\n\n    private function areAllFilesDeletedFromPreviousChangeset($last_changeset, $value)\n    {\n        $files = $last_changeset->getValue($this)->getFiles();\n        if (isset($value['delete']) && (count($files) == count($value['delete']))) {\n            return true;\n        }\n        return false;\n    }\n\n    public function isEmpty($value, $artifact)\n    {\n        $is_empty = ! $this->checkThatAtLeastOneFileIsUploaded($value);\n        if ($is_empty) {\n            $is_empty = $this->isPreviousChangesetEmpty($artifact, $value);\n        }\n        return $is_empty;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGlobalTrackerRootPath()\n    {\n        return ForgeConfig::get('sys_data_dir') . '/tracker/';\n    }\n\n    protected function getFileInfoForTusUploadedFileReadyToBeAttachedProvider(FileOngoingUploadDao $ongoing_upload_dao): FileInfoForTusUploadedFileReadyToBeAttachedProvider\n    {\n        return new FileInfoForTusUploadedFileReadyToBeAttachedProvider(\n            new FileBeingUploadedInformationProvider(\n                new UploadPathAllocator(\n                    $ongoing_upload_dao,\n                    Tracker_FormElementFactory::instance()\n                ),\n                $ongoing_upload_dao\n            ),\n            $ongoing_upload_dao\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\nclass Tracker_FormElement_Field_LastModifiedBy extends Tracker_FormElement_Field_List implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    /**\n     * Dynamic value does not really get deleted\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        $form_element_data['bind-type'] = 'users';\n        $form_element_data['bind']      = [\n            'value_function' => [\n                'artifact_modifiers',\n            ],\n        ];\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $a             = 'A_' . $this->id;\n            $b             = 'B_' . $this->id;\n            $ids_to_search = array_intersect(\n                array_values($criteria_value),\n                array_merge([100], array_keys($this->getBind()->getAllValues()))\n            );\n            if (count($ids_to_search) > 1) {\n                return \" c.submitted_by IN(\" . $this->getCriteriaDao()->getDa()->escapeIntImplode($ids_to_search) . \") \";\n            } elseif (count($ids_to_search)) {\n                return \" c.submitted_by = \" . $this->getCriteriaDao()->getDa()->escapeInt($ids_to_search[0]) . \" \";\n            }\n        }\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return \"c.submitted_by AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n    public function getQueryFromAggregate()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \" LEFT JOIN  user AS $R2 ON ($R2.user_id = c.submitted_by ) \";\n    }\n\n    public function getQueryGroupby(): string\n    {\n        return '';\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Last Updated By');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'The last person to update the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        return null;\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $last_modified_by = $changeset->getArtifact()->getLastModifiedBy();\n        $value            = new Tracker_FormElement_Field_List_Bind_UsersValue($last_modified_by);\n        if ($changeset->getArtifact()->wasLastModifiedByAnonymous()) {\n            $submitted_by_value = $value->getFullRESTValueForAnonymous($changeset);\n        } else {\n            $submitted_by_value = $value->getFullRESTValue($this);\n        }\n\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $submitted_by_value\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($artifact->wasLastModifiedByAnonymous()) {\n            $label = $purifier->purify($artifact->getLastModifiedBy());\n        } else {\n            $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n            $label = $purifier->purify($value->getLabel());\n        }\n\n        return $label;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact);\n                break;\n            default:\n                $output = $this->getBind()->formatMailArtifactValue($value->getId());\n                break;\n        }\n        return $output;\n    }\n\n    public function isValid(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        if ($submitted_value !== null) {\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n\n        return true;\n    }\n\n    protected function fetchAdminFormElement()\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $fake_value = new Tracker_FormElement_Field_List_Bind_UsersValue(UserManager::instance()->getCurrentUser()->getId());\n        $html      .= $purifier->purify($fake_value->getLabel()) . '<br />';\n        $html      .= '<span class=\"tracker-admin-form-element-help\">';\n        $html      .= dgettext('tuleap-tracker', 'The field is automatically set to the last person who modified the artifact');\n        $html      .= '</span>';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        if (! $value) {\n            $artifact_factory  = Tracker_ArtifactFactory::instance();\n            $builder           = new Tracker_Artifact_ChangesetFactoryBuilder();\n            $changeset_factory = $builder->build();\n\n            $changeset = $changeset_factory->getChangeset(\n                $artifact_factory->getArtifactById($artifact_id),\n                $changeset_id\n            );\n\n            return $changeset->getEmail();\n        }\n\n        return $this->getBind()->formatChangesetValue(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchTooltipValue()\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getLastModifiedBy());\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * Display the field for CSV\n     * Used in CSV data export\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->getBind()->formatChangesetValueForCSV(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return false;\n    }\n\n    public function getUserManager()\n    {\n        return UserManager::instance();\n    }\n\n     /**\n     * Get the field data for artifact submission\n     * Check if the user name exists in the platform\n     *\n     * @param string the user name\n     *\n     * @return null|int the user id\n     */\n    public function getFieldData($value)\n    {\n        $um = $this->getUserManager();\n        $u  = $um->getUserByUserName($value);\n        if ($u) {\n            return $u->getId();\n        } else {\n            return null;\n        }\n    }\n\n    public function isNone($value)\n    {\n        return false;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitLastModifiedBy($this);\n    }\n\n    public function getDefaultValue()\n    {\n        return Tracker_FormElement_Field_List_Bind::NONE_VALUE;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011 - Present. All rights reserved\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_LastUpdateDate extends Tracker_FormElement_Field_Date implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            //Last update date is stored in the changeset (the date of the changeset)\n            return $this->getSQLCompareDate(\n                (bool) $criteria->is_advanced,\n                $criteria_value['op'],\n                $criteria_value['from_date'],\n                $criteria_value['to_date'],\n                'c.submitted_on'\n            );\n        }\n\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return \"c.submitted_on AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        //Last update date is stored in the changeset (the date of the changeset)\n        return 'c.submitted_on';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->formatDate($changeset->getSubmittedOn());\n    }\n\n    protected function getValueDao()\n    {\n        return null;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Last Update Date');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the last update date of the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $changeset->getSubmittedOn());\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        //The last update date is never updated\n        return false;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     *@todo Pass the changeset to not necessarily retrieve the last update date from the *last* chagneset (audit)\n     *\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if (! $value) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $timestamp = $value->getTimestamp();\n        $value     = $timestamp ? $this->formatDateForDisplay($timestamp) : '';\n        $html     .= $value;\n\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value)) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getTimestamp();\n                $output = $value ? $this->formatDate($value) : '';\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if (! $value) {\n            // TODO use $changeset instead of $artifact->getLastChangeset()\n            // see @todo in the comment\n            $value = $this->getChangesetValue($artifact->getLastChangeset(), null, false);\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n\n        return parent::fetchTooltipValue($artifact, $value);\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed  $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . $this->formatDateTime(time()) . '</div>';\n        $html .= '<span class=\"tracker-admin-form-element-help\">';\n        $html .= dgettext('tuleap-tracker', 'The field is automatically set to last artifact update date');\n        $html .= '</span>';\n        return $html;\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Retreive The last date Field value\n     *\n     * @param Artifact $artifact The artifact\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, (int) $artifact->getLastChangeset()->getSubmittedOn());\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new Tracker_Artifact_ChangesetDao();\n        $dar       = $dao->getArtifactsByFieldAndLastUpdateDate($trackerId, $date);\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitLastUpdateDate($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return true;\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            date('c', $changeset->getArtifact()->getLastUpdateDate())\n        );\n\n        return $artifact_field_value_full_representation;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2014 - present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticValueUnchanged;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ItemsDataset\\ItemsDatasetBuilder;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ListFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\ListValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\XMLCriteriaValueCache;\nuse Tuleap\\Tracker\\FormElement\\TransitionListValidator;\nuse Tuleap\\Tracker\\XML\\TrackerXmlImportFeedbackCollector;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field_List extends Tracker_FormElement_Field implements Tracker_FormElement_Field_Shareable\n{\n    public const NONE_VALUE = 100;\n\n    protected $bind;\n\n    /**\n     * @return array\n     */\n    public function getFormElementDataForCreation($parent_id): array\n    {\n        $form_element_data = parent::getFormElementDataForCreation($parent_id);\n\n        if ($this->getBind()) {\n            $form_element_data['bind-type'] = $this->getBind()->getType();\n        }\n\n        return $form_element_data;\n    }\n\n    /**\n     * Return true if submitted value is None\n     */\n    abstract public function isNone($value);\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind|null\n     * @psalm-ignore-nullable-return\n     */\n    public function getBind()\n    {\n        if (! $this->bind) {\n            $this->bind = null;\n            //retrieve the type of the bind first...\n            $dao = new ListFieldDao();\n            if ($row = $dao->searchByFieldId($this->id)->getRow()) {\n                //...and build the bind\n                $bind_factory = $this->getFormElementFieldListBindFactory();\n                $this->bind   = $bind_factory->getBind($this, $row['bind_type']);\n            }\n        }\n        return $this->bind;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindFactory\n     */\n    protected function getFormElementFieldListBindFactory()\n    {\n        return new Tracker_FormElement_Field_List_BindFactory();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    public function getDecorators(): array\n    {\n        return $this->getBind()->getDecorators();\n    }\n\n    public function setBind($bind)\n    {\n        $this->bind = $bind;\n    }\n\n    /**\n     * Duplicate a field. If the field has custom properties,\n     * they should be propagated to the new one\n     * @param int $from_field_id\n     * @return array the mapping between old values and new ones\n     */\n    public function duplicate($from_field_id)\n    {\n        $dao = new ListFieldDao();\n        if ($dao->duplicate($from_field_id, $this->id)) {\n            $bf = new Tracker_FormElement_Field_List_BindFactory();\n            return $bf->duplicate($from_field_id, $this->id);\n        }\n        return [];\n    }\n\n    /**\n     * @return bool\n     */\n    public function isMultiple()\n    {\n        return false;\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return ! $this->isMultiple();\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            return $this->getBind()->getCriteriaFrom($this->getCriteriaValue($criteria));\n        }\n\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     *\n     * @see getCriteriaFrom\n     *\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return $this->getBind()->getCriteriaWhere($this->getCriteriaValue($criteria));\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     *\n     * @see getQueryFrom\n     *\n     */\n    public function getQuerySelect(): string\n    {\n        return $this->getBind()->getQuerySelect();\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values with the RGB values of their decorator\n     * Has no sense for fields other than lists\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getBind()->getQuerySelectWithDecorator();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        return $this->getBind()->getQueryFrom();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFromWithDecorator()\n    {\n        return $this->getBind()->getQueryFromWithDecorator();\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        return $this->getBind()->getQueryOrderby();\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        return $this->getBind()->getQueryGroupby();\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        return $this->getBind()->getQuerySelectAggregate($functions);\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return ['COUNT', 'COUNT_GRBY'];\n    }\n\n    /**\n     * Return the dao of the criteria value used with this field.\n     * @return Tracker_Report_Criteria_ValueDao\n     */\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_List_ValueDao();\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        static $cache = [];\n\n        if (isset($cache[$this->getId()][$changeset_id])) {\n            return $cache[$this->getId()][$changeset_id];\n        }\n\n        //We have to fetch all values of the changeset as we are a list of value\n        //This is the case only if we are multiple but an old changeset may\n        //contain multiple values\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($changeset_id) as $v) {\n            $val = $this->getBind()->formatChangesetValue($v);\n            if ($val != '') {\n                $values[] = $val;\n            }\n        }\n        $changeset_value                      = implode(', ', $values);\n        $cache[$this->getId()][$changeset_id] = $changeset_value;\n        return $changeset_value;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in CSV data export.\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($changeset_id) as $v) {\n            $values[] = $this->getBind()->formatChangesetValueForCSV($v);\n        }\n        return implode(',', $values);\n    }\n\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (empty($this->criteria_value) || empty($this->criteria_value[$criteria->getReport()->getId()])) {\n            $this->criteria_value = [];\n\n            if (empty($this->criteria_value[$criteria->getReport()->getId()])) {\n                $this->criteria_value[$criteria->getReport()->getId()] = [];\n\n                if ($criteria->id > 0) {\n                    foreach ($this->getCriteriaDao()->searchByCriteriaId($criteria->id) as $row) {\n                        $this->criteria_value[$criteria->getReport()->getId()][] = $row['value'];\n                    }\n                }\n            }\n        } elseif (in_array('', $this->criteria_value[$criteria->getReport()->getId()])) {\n            return '';\n        }\n\n        return $this->criteria_value[$criteria->getReport()->getId()];\n    }\n\n    /**\n     * @throws Tracker_Report_InvalidRESTCriterionException\n     */\n    public function setCriteriaValueFromREST(Tracker_Report_Criteria $criteria, array $rest_criteria_value)\n    {\n        $searched_field_values = $rest_criteria_value[Tracker_Report_REST::VALUE_PROPERTY_NAME];\n        $operator              = $rest_criteria_value[Tracker_Report_REST::OPERATOR_PROPERTY_NAME];\n\n        if ($operator !== Tracker_Report_REST::OPERATOR_CONTAINS) {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Unallowed operator for criterion field '$this->name' ($this->id). Allowed operators: [\" . Tracker_Report_REST::OPERATOR_CONTAINS . \"]\");\n        }\n\n        if (is_numeric($searched_field_values)) {\n            $values_to_match = [(int) $searched_field_values];\n        } elseif (is_array($searched_field_values)) {\n            $values_to_match = $searched_field_values;\n        } else {\n            throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid format for criterion field '$this->name' ($this->id)\");\n        }\n\n        $criterias = [];\n\n        foreach ($values_to_match as $value_to_match) {\n            if (! is_numeric($value_to_match)) {\n                throw new Tracker_Report_InvalidRESTCriterionException(\"Invalid format for criterion field '$this->name' ($this->id)\");\n            }\n\n            if ($value_to_match == self::NONE_VALUE) {\n                continue;\n            }\n\n            $criterias[] = $this->formatCriteriaValue($value_to_match);\n        }\n\n        $this->setCriteriaValue($criterias, $criteria->getReport()->getId());\n\n        return count($criterias) > 0;\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        $bind = $this->getBind();\n        if (! $bind instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if (is_array($criteria_value) && count($criteria_value) > 0) {\n            $criteria_value_node = $xml_criteria->addChild('criteria_value');\n            $criteria_value_node->addAttribute('type', 'list');\n\n            foreach ($criteria_value as $value_id) {\n                if ($value_id == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n                    $criteria_value_node->addChild('none_value');\n                } else {\n                    try {\n                        $bind->getValue($value_id);\n                    } catch (Tracker_FormElement_InvalidFieldValueException $exception) {\n                        continue;\n                    }\n                    $selected_value_node = $criteria_value_node->addChild('selected_value');\n                    $selected_value_node->addAttribute('REF', 'V' . $value_id);\n                }\n            }\n        }\n    }\n\n    public function setCriteriaValueFromXML(\n        Tracker_Report_Criteria $criteria,\n        SimpleXMLElement $xml_criteria_value,\n        array $xml_field_mapping,\n    ) {\n        if (! $this->getBind() instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        if ((string) $xml_criteria_value['type'] !== 'list') {\n            return;\n        }\n\n        $criteria_list_value = [];\n        foreach ($xml_criteria_value->selected_value as $xml_selected_value) {\n            $ref_value = (string) $xml_selected_value['REF'];\n\n            if (! isset($xml_field_mapping[$ref_value])) {\n                continue;\n            }\n\n            $field_value = $xml_field_mapping[$ref_value];\n            assert($field_value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n\n            $criteria_list_value[] = $field_value;\n        }\n\n        if (isset($xml_criteria_value->none_value)) {\n            $criteria_list_value[] = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n        }\n\n        if (count($criteria_list_value) > 0) {\n            $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n            $cache->set($criteria->getReport()->getId(), $criteria_list_value);\n        }\n    }\n\n    public function saveCriteriaValueFromXML(Tracker_Report_Criteria $criteria)\n    {\n        if (! $this->getBind() instanceof Tracker_FormElement_Field_List_Bind_Static) {\n            return;\n        }\n\n        $report_id = $criteria->getReport()->getId();\n\n        $cache = XMLCriteriaValueCache::instance(spl_object_id($this));\n\n        if (! $cache->has($report_id)) {\n            return;\n        }\n\n        $value_in_field_value     = $cache->get($criteria->getReport()->getId());\n        $formatted_criteria_value = [];\n        foreach ($value_in_field_value as $field_value) {\n            assert($field_value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n            $formatted_criteria_value[] = (int) $field_value->getId();\n        }\n\n        $this->updateCriteriaValue($criteria, $formatted_criteria_value);\n    }\n\n    protected function formatCriteriaValue($value_to_match)\n    {\n        return $value_to_match;\n    }\n\n    /**\n     * Format the criteria value submitted by the user for storage purpose (dao or session)\n     *\n     * @param mixed $value The criteria value submitted by the user\n     *\n     * @return mixed\n     */\n    public function getFormattedCriteriaValue($value)\n    {\n        if (empty($value['values'])) {\n            $value['values'] = [''];\n        }\n        return $value['values'];\n    }\n\n    /**\n     * Display the field value as a criteria\n     * @param Tracker_Report_Criteria $criteria\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        if (! is_array($criteria_value)) {\n            $criteria_value = [$criteria_value];\n        }\n\n        $multiple    = ' ';\n        $size        = ' ';\n        $prefix_name = \"criteria[$this->id][values]\";\n        $name        = $prefix_name . '[]';\n\n        $tracker_form_element_field_list_bind = $this->getBind();\n        if (! $tracker_form_element_field_list_bind) {\n            throw new LogicException(sprintf('List field with id %d should have a bind but no bind could be found.', $this->getId()));\n        }\n\n        if ($criteria->is_advanced) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min(7, count($tracker_form_element_field_list_bind->getAllValues()) + 2) . '\" ';\n        }\n\n        $html .= '<input type=\"hidden\" name=\"' . $hp->purify($prefix_name) . '\" />';\n        $html .= '<select id=\"tracker_report_criteria_' . ($criteria->is_advanced ? 'adv_' : '') . $hp->purify($this->id) . '\"\n                          name=\"' . $hp->purify($name) . '\" ' .\n                          $size .\n                          $multiple . '>';\n        //Any value\n        $selected = count($criteria_value) && ! in_array('', $criteria_value) ? '' : 'selected=\"selected\"';\n        $html    .= '<option value=\"\" ' . $selected . ' title=\"' . $GLOBALS['Language']->getText('global', 'any') . '\">' . $GLOBALS['Language']->getText('global', 'any') . '</option>';\n        //None value\n        $selected = in_array(Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID, $criteria_value) ? 'selected=\"selected\"' : '';\n        $styles   = $tracker_form_element_field_list_bind->getSelectOptionStyles(Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID);\n\n        $html .= $this->buildOptionHTML(\n            Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID,\n            $selected,\n            $styles,\n            $GLOBALS['Language']->getText('global', 'none')\n        );\n\n        //Field values\n        foreach ($tracker_form_element_field_list_bind->getAllValues() as $id => $value) {\n            $selected = in_array($id, $criteria_value) ? 'selected=\"selected\"' : '';\n\n            $styles = $tracker_form_element_field_list_bind->getSelectOptionStyles($id);\n\n            $html .= $this->buildOptionHTML(\n                $id,\n                $selected,\n                $styles,\n                $tracker_form_element_field_list_bind->formatCriteriaValue($id)\n            );\n        }\n        $html .= '</select>';\n\n        return $html;\n    }\n\n    private function buildOptionHTML(\n        int $id,\n        string $selected,\n        array $styles,\n        string $label,\n    ): string {\n        $hp = Codendi_HTMLPurifier::instance();\n\n        return '<option value=\"' . $hp->purify($id) . '\"\n                        title=\"' . $label . '\"\n                        ' . $hp->purify($selected) . '\n                        style=\"' . $hp->purify($styles['inline-styles']) . '\"\n                        class=\"' . $hp->purify($styles['classes']) . '\">' . $label . '</option>';\n    }\n\n    /**\n     * Add some additionnal information beside the field in the artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchArtifactAdditionnalInfo(?Tracker_Artifact_ChangesetValue $value, array $submitted_values)\n    {\n        return '';\n    }\n\n     /**\n     * Add some additionnal information beside the field in the submit new artifact form.\n     * This is up to the field. It can be html or inline javascript\n     * to enhance the user experience\n     * @return string\n     */\n    public function fetchSubmitAdditionnalInfo(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->getBind()->fetchRawValue($value);\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->getBind()->fetchRawValueFromChangeset($changeset);\n    }\n\n    /**\n     * @return ListValueDao\n     */\n    protected function getValueDao()\n    {\n        return new ListValueDao();\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $selected_values = isset($submitted_values[$this->id]) ? $submitted_values[$this->id] : [];\n        $default_values  = $this->getSubmitDefaultValues();\n\n        return $this->_fetchField(\n            'tracker_field_' . $this->id,\n            'artifact[' . $this->id . ']',\n            $default_values,\n            $selected_values\n        );\n    }\n\n    private function getSubmitDefaultValues()\n    {\n        if ($this->fieldHasEnableWorkflow()) {\n            return [];\n        }\n\n        return $this->getBind()->getDefaultValues();\n    }\n\n     /**\n     * Fetch the html code to display the field value in masschange submission form\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return $this->_fetchFieldMasschange('tracker_field_' . $this->id, 'artifact[' . $this->id . ']', $this->getBind()->getDefaultValues());\n    }\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $values          = $submitted_values[$this->id] ?? [];\n        $selected_values = $value ? $value->getListValues() : [];\n        return $this->_fetchField(\n            'tracker_field_' . $this->id,\n            'artifact[' . $this->id . ']',\n            $selected_values,\n            $values\n        );\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                if (empty($value) || ! $value->getListValues()) {\n                    return '-';\n                }\n                $output = $this->fetchArtifactValueReadOnlyForMail($artifact, $value);\n                break;\n            default:\n                $tablo           = [];\n                $selected_values = ! empty($value) ? $value->getListValues() : [];\n                foreach ($selected_values as $value) {\n                    $tablo[] = $this->getBind()->formatMailArtifactValue($value->getId());\n                }\n                $output = implode(', ', $tablo);\n                break;\n        }\n        return $output;\n    }\n\n    protected function fetchArtifactValueReadOnlyForMail(Artifact $artifact, Tracker_Artifact_ChangesetValue $value): string\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html            = '';\n        $selected_values = $value ? $value->getListValues() : [];\n        $tablo           = [];\n\n        if (empty($selected_values)) {\n            return $this->getNoValueLabel();\n        }\n\n        if (count($selected_values) === 1 && isset($selected_values[Tracker_FormElement_Field_List_Bind::NONE_VALUE])) {\n            return $this->getNoValueLabel();\n        }\n\n        foreach ($selected_values as $id => $selected) {\n            $tablo[] = $this->getBind()->formatArtifactValue($id);\n        }\n        $html .= implode(', ', $tablo);\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Indicate if a workflow is defined and enabled on a field_id.\n     * @param $id the field_id\n     * @return bool , true if a workflow is defined and enabled on the field_id\n     */\n    public function fieldHasEnableWorkflow()\n    {\n        $workflow = $this->getWorkflow();\n        if (! empty($workflow) && $workflow->is_used) {\n            return $workflow->field_id === $this->id;\n        }\n        return false;\n    }\n\n     /**\n     * Indicate if a workflow is defined on a field_id.\n     * @param $id the field_id\n     * @return bool , true if a workflow is defined on the field_id\n     */\n    public function fieldHasDefineWorkflow()\n    {\n        $workflow = $this->getWorkflow();\n        if (! empty($workflow)) {\n            return $workflow->field_id === $this->id;\n        }\n        return false;\n    }\n\n    /**\n     * Get the workflow of the tracker.\n     * @return Workflow Object\n     */\n    public function getWorkflow()\n    {\n        return $this->getTracker()->getWorkflow();\n    }\n\n    /**\n     * Validate a value\n     * @param mixed $value data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        $valid          = true;\n        $field_value_to = null;\n\n        if ($this->fieldHasEnableWorkflow()) {\n            $last_changeset = $artifact->getLastChangeset();\n\n            try {\n                $field_value_to = $this->getBind()->getValue($value);\n                if (! $last_changeset) {\n                    if (! $this->isTransitionValid(null, $field_value_to)) {\n                           $this->has_errors = true;\n                           $valid            = false;\n                    }\n                } else {\n                    if ($last_changeset->getValue($this) != null) {\n                        foreach ($last_changeset->getValue($this)->getListValues() as $id => $value) {\n                            if ($value != $field_value_to) {\n                                if (! $this->isTransitionValid($value, $field_value_to)) {\n                                    $this->has_errors = true;\n                                    $valid            = false;\n                                }\n                            }\n                        }\n                    } else {\n                        if (! $this->isTransitionValid(null, $field_value_to)) {\n                            $this->has_errors = true;\n                            $valid            = false;\n                        }\n                    }\n                }\n            } catch (Tracker_FormElement_InvalidFieldValueException $exexption) {\n                $valid = false;\n            }\n\n            if ($valid) {\n                $valid = $this->getTransitionListValidator()->checkTransition(\n                    $this,\n                    $value,\n                    $last_changeset\n                );\n            }\n        }\n\n        if ($valid) {\n            return true;\n        } else {\n            if ($field_value_to !== null && ! is_array($field_value_to)) {\n                if (is_array($field_value_to)) {\n                    $GLOBALS['Response']->addFeedback(Feedback::ERROR, dgettext('tuleap-tracker', 'The transition is not valid.'));\n                } else {\n                    $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The transition to the value \"%1$s\" is not valid.'), $field_value_to->getLabel()));\n                }\n            } else {\n                $GLOBALS['Response']->addFeedback('error', dgettext('tuleap-tracker', 'The transition to the value \"None\" is not valid.'));\n            }\n            return false;\n        }\n    }\n\n\n    protected function isTransitionValid($field_value_from, $field_value_to)\n    {\n        if (! $this->fieldHasEnableWorkflow()) {\n            return true;\n        } else {\n            $workflow = $this->getWorkflow();\n            if ($workflow->isTransitionExist($field_value_from, $field_value_to)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    protected function getSelectedValue($selected_values)\n    {\n        if ($this->getBind()) {\n            foreach ($this->getBind()->getBindValues() as $id => $value) {\n                if (isset($selected_values[$id])) {\n                    $from = $value;\n                    return $from;\n                }\n            }\n            return null;\n        }\n    }\n\n    /**\n     * protected for testing purpose\n     */\n    protected function getTransitionListValidator(): TransitionListValidator\n    {\n        return new TransitionListValidator(TransitionFactory::instance());\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValues()\n    {\n        return $this->getBind()->getAllValues();\n    }\n\n    /**\n     * @return array\n     */\n    public function getAllVisibleValues()\n    {\n        return $this->getBind()->getAllVisibleValues();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[] array of BindValues that are not hidden + none value if any\n     */\n    public function getVisibleValuesPlusNoneIfAny()\n    {\n        $values = $this->getAllVisibleValues();\n\n        if ($values) {\n            if (! $this->isRequired()) {\n                $none   = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n                $values = [$none->getId() => $none] + $values;\n            }\n        }\n\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Value|null null if not found\n     */\n    public function getListValueById($value_id)\n    {\n        foreach ($this->getVisibleValuesPlusNoneIfAny() as $value) {\n            if ($value->getId() == $value_id) {\n                return $value;\n            }\n        }\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function getFirstValueFor(Tracker_Artifact_Changeset $changeset)\n    {\n        if ($this->userCanRead()) {\n            $value = $changeset->getValue($this);\n            if ($value && ($last_values = $value->getListValues())) {\n                // let's assume there is no more that one status\n                if ($label = array_shift($last_values)->getLabel()) {\n                    return $label;\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array  $selected_values\n     * @param mixed  $submitted_values_for_this_list\n     *\n     * @return string\n     */\n    protected function _fetchField(string $id, string $name, $selected_values, $submitted_values_for_this_list = []) //phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $html     = '';\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        if ($name) {\n            if ($this->isMultiple()) {\n                $name .= '[]';\n            }\n            $name = 'name=\"' . $purifier->purify($name) . '\"';\n        }\n\n        if ($id) {\n            $id = 'id=\"' . $id . '\"';\n        }\n\n        $data_target_fields_ids = '';\n        $target_fields_ids      = $this->getTargetFieldsIds();\n        if (count($target_fields_ids) > 0) {\n            $data_target_fields_ids = \"data-target-fields-ids='\" . json_encode($target_fields_ids) . \"'\";\n        }\n\n        $html .= $this->fetchFieldContainerStart($id, $name, $data_target_fields_ids);\n\n        $from = $this->getSelectedValue($selected_values);\n        if ($from == null && ! isset($submitted_values_for_this_list)) {\n            $none_is_selected = isset($selected_values[Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID]);\n        } else {\n            $none_is_selected = ($submitted_values_for_this_list == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID);\n        }\n\n        if (! $this->fieldHasEnableWorkflow()) {\n            $none_value = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n            $html      .= $this->fetchFieldValue($none_value, $name, $none_is_selected);\n        }\n\n        if (($submitted_values_for_this_list) && ! is_array($submitted_values_for_this_list)) {\n            $submitted_values_array[]       = $submitted_values_for_this_list;\n            $submitted_values_for_this_list = $submitted_values_array;\n        }\n\n        foreach ($this->getBind()->getAllValues() as $id => $value) {\n            $transition_id = null;\n            if ($this->isTransitionValid($from, $value)) {\n                $transition_id = $this->getTransitionId($from, $value->getId());\n                if (! empty($submitted_values_for_this_list)) {\n                    $is_selected = in_array($id, array_values($submitted_values_for_this_list));\n                } else {\n                    $is_selected = isset($selected_values[$id]);\n                }\n                if ($this->userCanMakeTransition($transition_id)) {\n                    if (! $value->isHidden() || $value === $from) {\n                        $html .= $this->fetchFieldValue($value, $name, $is_selected);\n                    }\n                }\n            }\n        }\n\n        $html .= $this->fetchFieldContainerEnd();\n        return $html;\n    }\n\n    protected function fetchFieldContainerStart(string $id, string $name, string $data_target_fields_ids): string\n    {\n        $html      = '';\n        $multiple  = '';\n        $size      = '';\n        $required  = '';\n        $bind_type = 'data-bind-type=\"' . $this->getBind()->getType() . '\"';\n\n        if ($this->isMultiple()) {\n            $multiple = 'multiple=\"multiple\"';\n            $size     = 'size=\"' . min($this->getMaxSize(), count($this->getBind()->getBindValues()) + 2) . '\"';\n        }\n        if ($this->isRequired()) {\n            $required = 'required ';\n        }\n\n        $html .= \"<select $id $name $multiple $size $bind_type $required\";\n        if ($data_target_fields_ids !== '') {\n            $html .= $data_target_fields_ids;\n        }\n        return $html . '>';\n    }\n\n    protected function fetchFieldValue(Tracker_FormElement_Field_List_Value $value, $name, $is_selected)\n    {\n        $value_id  = $value->getId();\n        $list_bind = $this->getBind();\n        if ($value_id == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n            $label = $value->getLabel();\n        } else {\n            $label = $list_bind->formatArtifactValue($value_id);\n        }\n\n        $styles       = $list_bind->getSelectOptionStyles($value_id);\n        $selected     = $is_selected ? 'selected=\"selected\"' : '';\n        $option_start = '<option value=\"'\n                        . $value_id\n                        . '\" '\n                        . $selected\n                        . ' title=\"'\n                        . $label\n                        . '\" style=\"'\n                        . $styles['inline-styles']\n                        . '\" class=\"'\n                        . $styles['classes']\n                        . '\"';\n\n        $dataset = ItemsDatasetBuilder::buildDataAttributesForValue($this, $value);\n\n        return $option_start . $dataset . '>' . $label . '</option>';\n    }\n\n    protected function fetchFieldContainerEnd()\n    {\n        return '</select>';\n    }\n\n\n    protected function _fetchFieldMasschange($id, $name, $selected_values) //phpcs:ignore PSR2.Methods.MethodDeclaration.Underscore\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $multiple   = ' ';\n        $size       = ' ';\n        $bind_type  = 'data-bind-type=\"' . $this->getBind()->getType() . '\"';\n        $has_colors = count($this->getDecorators()) > 0;\n\n        if ($this->isMultiple()) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min($this->getMaxSize(), count($this->getBind()->getAllValues()) + 2) . '\" ';\n            if ($name) {\n                $name .= '[]';\n            }\n        }\n        $html .= '<select ';\n        if ($id) {\n            $html .= 'id=\"' . $id . '\" ';\n        }\n        if ($name) {\n            $html .= 'name=\"' . $name . '\" ';\n        }\n        $html .= $size . $multiple . $bind_type . '>';\n\n        $html .= '<option value=\"' . $purifier->purify(BindStaticValueUnchanged::VALUE_ID) . '\" selected=\"selected\">' .\n            $GLOBALS['Language']->getText('global', 'unchanged') . '</option>';\n        $html .= '<option value=\"' . Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID . '\">' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n\n        foreach ($this->getBind()->getAllValues() as $id => $value) {\n            if (! $value->isHidden()) {\n                $styles  = $this->getBind()->getSelectOptionStyles($id);\n                $dataset = ItemsDatasetBuilder::buildDataAttributesForValue($this, $value);\n                $html   .= '<option value=\"' . $id . '\" title=\"' . $this->getBind()->formatArtifactValue($id) . '\" style=\"' . $styles['inline-styles'] . '\" class=\"' . $styles['classes'] . '\"' . $dataset . '\">';\n                $html   .= $this->getBind()->formatArtifactValue($id);\n                $html   .= '</option>';\n            }\n        }\n\n        $html .= '</select>';\n        return $html;\n    }\n\n\n    protected function getMaxSize()\n    {\n        return 7;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= $this->_fetchField('', '', $this->getBind()->getDefaultValues());\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     * @param Tracker_Artifact_ChangesetValue_List $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html           = '';\n        $last_changeset = $artifact->getLastChangeset();\n        if ($value && $last_changeset !== null) {\n            $html .= $this->fetchChangesetValue($artifact->id, (int) $last_changeset->getId(), $value);\n        }\n        return $html;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(\n        Artifact $artifact,\n        ?Tracker_CardDisplayPreferences $display_preferences = null,\n    ) {\n        $html = '';\n        //We have to fetch all values of the changeset as we are a list of value\n        //This is the case only if we are multiple but an old changeset may\n        //contain multiple values\n        $values = [];\n        foreach ($this->getBind()->getChangesetValues($artifact->getLastChangeset()->id) as $v) {\n            $val = $this->getBind()->formatCardValue($v, $display_preferences);\n            if ($val != '') {\n                $values[] = $val;\n            }\n        }\n        $html .= implode(' ', $values);\n\n        return $html;\n    }\n\n    /**\n     * Update the form element.\n     * Override the parent function to handle binds\n     */\n    protected function processUpdate(Tracker_IDisplayTrackerLayout $layout, $request, $current_user, $redirect = false)\n    {\n        $redirect = false;\n        if ($request->exist('bind')) {\n            $params = $request->get('bind');\n            if ($request->get('formElement_data')) {\n                $params = array_merge($params, $request->get('formElement_data'));\n            }\n            $redirect = $this->getBind()->process($params, $no_redirect = true);\n        }\n        parent::processUpdate($layout, $request, $current_user, $redirect);\n    }\n\n    /**\n     * Hook called after a creation of a field\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n        $type      = isset($form_element_data['bind-type']) ? $form_element_data['bind-type'] : '';\n        $bind_data = isset($form_element_data['bind']) ? $form_element_data['bind'] : [];\n\n        $bf = new Tracker_FormElement_Field_List_BindFactory();\n        if ($this->bind = $bf->createBind($this, $type, $bind_data)) {\n            $dao = new ListFieldDao();\n            $dao->save($this->getId(), $bf->getType($this->bind));\n        }\n    }\n\n    /**\n     * Transforms FormElement_List into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $parent_node,\n        array &$xmlMapping,\n        bool $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ): SimpleXMLElement {\n        $node = parent::exportToXML($parent_node, $xmlMapping, $project_export_context, $user_xml_exporter);\n        if ($this->getBind() && $this->shouldBeBindXML()) {\n            $child = $node->addChild('bind');\n            $bf    = new Tracker_FormElement_Field_List_BindFactory();\n            $child->addAttribute('type', $bf->getType($this->getBind()));\n            $this->getBind()->exportToXML($child, $xmlMapping, $project_export_context, $user_xml_exporter);\n        }\n        return $node;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return true;\n    }\n\n    /**\n     * Continue the initialisation from an xml (FormElementFactory is not smart enough to do all stuff.\n     * Polymorphism rulez!!!\n     *\n     * @param SimpleXMLElement                          $xml         containing the structure of the imported Tracker_FormElement\n     * @param array                                     &$xmlMapping where the newly created formElements indexed by their XML IDs are stored (and values)\n     */\n    public function continueGetInstanceFromXML(\n        $xml,\n        &$xmlMapping,\n        User\\XML\\Import\\IFindUserFromXMLReference $user_finder,\n        TrackerXmlImportFeedbackCollector $feedback_collector,\n    ) {\n        parent::continueGetInstanceFromXML($xml, $xmlMapping, $user_finder, $feedback_collector);\n        // if field is a list add bind\n        if ($xml->bind) {\n            $bind = $this->getBindFactory()->getInstanceFromXML($xml->bind, $this, $xmlMapping, $user_finder);\n            $this->setBind($bind);\n        }\n    }\n\n    /**\n     * Callback called after factory::saveObject. Use this to do post-save actions\n     *\n     * @param Tracker $tracker The tracker\n     * @param bool $tracker_is_empty\n     */\n    public function afterSaveObject(Tracker $tracker, $tracker_is_empty, $force_absolute_ranking)\n    {\n        $bind = $this->getBind();\n        $this->getListDao()->save($this->getId(), $this->getBindFactory()->getType($bind));\n        $bind->saveObject();\n    }\n\n    /**\n     * Get an instance of Tracker_FormElement_Field_ListDao\n     *\n     * @return ListFieldDao\n     */\n    public function getListDao()\n    {\n        return new ListFieldDao();\n    }\n\n    /**\n     * Get an instance of Tracker_FormElement_Field_List_BindFactory\n     *\n     * @return Tracker_FormElement_Field_List_BindFactory\n     */\n    public function getBindFactory()\n    {\n        return new Tracker_FormElement_Field_List_BindFactory();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        return $this->getValueDao()->create($changeset_value_id, $value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        $value_ids       = $this->getValueDao()->searchById($value_id, $this->id);\n        $bindvalue_ids   = [];\n        if ($value_ids) {\n            foreach ($value_ids as $v) {\n                $bindvalue_ids[] = $v['bindvalue_id'];\n            }\n        }\n        $bind_values = [];\n        if (count($bindvalue_ids)) {\n            $bind_values = $this->getBind()->getBindValues($bindvalue_ids);\n        }\n        $changeset_value = new Tracker_Artifact_ChangesetValue_List($value_id, $changeset, $this, $has_changed, $bind_values);\n        return $changeset_value;\n    }\n\n    public function getRESTBindingProperties()\n    {\n        $bind = $this->getBind();\n        return $bind->getRESTBindingProperties();\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (array_key_exists('bind_value_ids', $value) && is_array($value['bind_value_ids'])) {\n            return array_map('intval', $value['bind_value_ids']);\n        }\n        throw new Tracker_FormElement_InvalidFieldValueException('List fields values must be passed as an array of ids (integer) in \\'bind_value_ids\\''\n           . ' Example: {\"field_id\": 1548, \"bind_value_ids\": [457]}');\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string the rest field value\n     *\n     * @return mixed the field data corresponding to the rest_value for artifact submision\n     */\n    public function getFieldData($value)\n    {\n        if ($value === $GLOBALS['Language']->getText('global', 'none')) {\n            return Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID;\n        }\n\n        $bind = $this->getBind();\n        if ($bind != null) {\n            $value = $bind->getFieldData($value, $this->isMultiple());\n            if ($value != null) {\n                return $value;\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $previous_changesetvalue, $new_value)\n    {\n        if (! is_array($new_value)) {\n            $new_value = [$new_value];\n        }\n        if (empty($new_value)) {\n            $new_value = [Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID];\n        }\n        if ($previous_changesetvalue) {\n            $old_value = $previous_changesetvalue->getValue();\n        }\n        if (empty($old_value)) {\n            $old_value = [Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID];\n        }\n        sort($old_value);\n        sort($new_value);\n        return $old_value != $new_value;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        if ($b = $this->getBind()) {\n            return $b->isNotificationsSupported();\n        }\n        return false;\n    }\n\n    protected function permission_is_authorized($type, $transition_id, $user_id, $group_id) //phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps\n    {\n        include_once __DIR__ . '/../../../../../src/www/project/admin/permissions.php';\n\n        return permission_is_authorized($type, $transition_id, $user_id, $group_id);\n    }\n\n    /**\n     * Check if the user can make the transition\n     *\n     * @param int  $transition_id The id of the transition\n     * @param PFUser $user          The user. If null, take the current user\n     *\n     *@return bool true if user has permission on this field\n     */\n    public function userCanMakeTransition($transition_id, ?PFUser $user = null)\n    {\n        if ($transition_id) {\n            $group_id = $this->getTracker()->getGroupId();\n\n            if (! $user) {\n                $user = $this->getCurrentUser();\n            }\n            return $this->permission_is_authorized('PLUGIN_TRACKER_WORKFLOW_TRANSITION', $transition_id, $user->getId(), $group_id);\n        }\n        return true;\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        return $this->getBind()->getRecipients($changeset_value);\n    }\n\n    protected function getTransitionId($from, $to)\n    {\n        return TransitionFactory::instance()->getTransitionId($this->getTracker(), $from, $to);\n    }\n\n    public function getDefaultValue()\n    {\n        $default_array = $this->getBind()->getDefaultValues();\n        if (! $default_array) {\n            return [Tracker_FormElement_Field_List_Bind::NONE_VALUE];\n        }\n        return array_keys($default_array);\n    }\n\n\n    public function getDefaultRESTValue()\n    {\n        return $this->getBind()->getDefaultRESTValues();\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        $this->has_errors = ! ($this->isPossibleValue($value) && $this->validate($artifact, $value));\n\n        return ! $this->has_errors;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isPossibleValue($value)\n    {\n        $is_possible_value = true;\n\n        if (is_array($value)) {\n            foreach ($value as $id) {\n                $is_possible_value = $is_possible_value && $this->checkValueExists($id);\n            }\n        } else {\n            $is_possible_value = $this->checkValueExists($value);\n        }\n\n        return $is_possible_value;\n    }\n\n    public function checkValueExists(?string $value_id): bool\n    {\n        return $this->getBind()->isExistingValue($value_id) ||\n               $value_id === (string) self::NONE_VALUE ||\n               $value_id === null;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact The artifact to check\n     * @param mixed    $value    The submitted value\n     *\n     * @return bool true on success or false on failure\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $value)\n    {\n        $this->has_errors = false;\n\n        if ($this->isEmpty($value, $artifact) && $this->isRequired()) {\n            $this->addRequiredError();\n        }\n\n        return ! $this->has_errors;\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return $this->isNone($value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        $this->getBind()->fixOriginalValueIds($value_mapping);\n    }\n\n    /**\n     * @see Tracker_FormElement::process()\n     */\n    public function process(Tracker_IDisplayTrackerLayout $layout, $request, $current_user)\n    {\n        parent::process($layout, $request, $current_user);\n        if ($request->get('func') == 'get-values') {\n            $GLOBALS['Response']->sendJSON($this->getBind()->fetchFormattedForJson());\n        }\n    }\n\n    public function fetchFormattedForJson()\n    {\n        $json           = parent::fetchFormattedForJson();\n        $json['values'] = $this->getBind()->fetchFormattedForJson();\n        return $json;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $values = null;\n        $bind   = $this->getBind();\n        if ($bind != null) {\n            $values = $bind->getRESTAvailableValues();\n        }\n        return $values;\n    }\n\n    /**\n     * @param string $new_value\n     *\n     * @return int | null\n     */\n    public function addBindValue($new_value)\n    {\n        return $this->getBind()->addValue($new_value);\n    }\n\n    /**\n     * Get the html to select a default value\n     *\n     * @return string html\n     */\n    public function getSelectDefaultValues($default_values)\n    {\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n\n        //Select default values\n        $html .= '<p>';\n        $html .= '<strong>' . dgettext('tuleap-tracker', 'Select default value') . '</strong><br />';\n        $html .= '<select name=\"bind[default][]\" class=\"bind_default_values\" size=\"7\" multiple=\"multiple\">';\n        foreach ($this->getAllVisibleValues() as $v) {\n            $selected = isset($default_values[$v->getId()]) ? 'selected=\"selected\"' : '';\n            $html    .= '<option value=\"' . $v->getId() . '\" ' . $selected . '>' . $hp->purify($v->getLabel(), CODENDI_PURIFIER_CONVERT_HTML)  . '</option>';\n        }\n        $html .= '</select>';\n        $html .= '</p>';\n\n        return $html;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BoundDecoratorEditor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BoundDecoratorSaver;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitable;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindDefaultValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindDecoratorDao;\nuse Tuleap\\Tracker\\REST\\FieldValueRepresentation;\n\n/**\n * @template ListValueBinding of Tracker_FormElement_Field_List_Value\n */\nabstract class Tracker_FormElement_Field_List_Bind implements //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n    Tracker_FormElement_Field_Shareable,\n    Tracker_IProvideJsonFormatOfMyself,\n    BindVisitable\n{\n    public const REST_ID_KEY    = 'bind_value_id';\n    public const REST_LABEL_KEY = 'bind_value_label';\n    public const REST_TYPE_KEY  = 'bind_type';\n    public const REST_LIST_KEY  = 'bind_list';\n\n    public const NONE_VALUE = 100;\n\n    /**\n     * @var BindDefaultValueDao\n     */\n    protected $default_value_dao;\n\n    protected $default_values;\n    /**\n     * @var Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    protected $decorators;\n\n    /** @var Tracker_FormElement_Field */\n    protected $field;\n\n    public function __construct($field, $default_values, $decorators)\n    {\n        $this->field          = $field;\n        $this->default_values = $default_values;\n        $this->decorators     = $decorators;\n    }\n\n    /**\n     * Get the default values definition of the bind\n     *\n     * @return array (123 => 1, 234 => 1, 345 => 1)\n     */\n    public function getDefaultValues()\n    {\n        return $this->checkDefaultValueValidity($this->default_values);\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValues(array_keys($this->getDefaultValues()));\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = new FieldValueRepresentation();\n            $representation->build([\n                self::REST_ID_KEY    => $value->getId(),\n                self::REST_LABEL_KEY => $value->getAPIValue(),\n            ]);\n            $rest_array[] = $representation;\n        }\n        return $rest_array;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindDecorator[]\n     */\n    public function getDecorators()\n    {\n        return $this->decorators;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getAllValues();\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getAllValuesWithActiveUsersOnly(): array;\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllVisibleValues()\n    {\n        $values = $this->getAllValues();\n        foreach ($values as $key => $value) {\n            if ($value->isHidden()) {\n                unset($values[$key]);\n            }\n        }\n\n        return $values;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isExistingValue($value_id)\n    {\n        return array_key_exists($value_id, $this->getAllValues());\n    }\n\n    public function fetchFormattedForJson()\n    {\n        $values = [];\n        foreach ($this->getAllValues() as $value) {\n            $values[] = $value->fetchFormattedForJson();\n        }\n        return $values;\n    }\n\n    public function getRESTBindingProperties()\n    {\n        $bind_factory = new Tracker_FormElement_Field_List_BindFactory();\n        $bind_type    = $bind_factory->getType($this);\n        return [\n            self::REST_TYPE_KEY => $bind_type,\n            self::REST_LIST_KEY => $this->getRESTBindingList(),\n        ];\n    }\n\n    /**\n     *\n     * @return array\n     */\n    abstract protected function getRESTBindingList();\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    abstract public function getFieldData($submitted_value, $is_multiple);\n    /**\n     * @return array|Tracker_FormElement_Field_List_BindValue|null\n     * @throws Tracker_FormElement_InvalidFieldValueException\n     */\n    abstract public function getValue($value_id);\n    /**\n     * @return array\n     */\n    abstract public function getChangesetValues($changeset_id);\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    abstract public function fetchRawValue($value);\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    abstract public function fetchRawValueFromChangeset($changeset);\n\n    /**\n     * @return string\n     */\n    abstract public function formatCriteriaValue($value_id);\n\n    /**\n     * @return string\n     */\n    abstract public function formatMailCriteriaValue($value_id);\n\n    /**\n     * @return string\n     */\n    abstract public function formatChangesetValue($value);\n\n    /**\n     * @return string\n     */\n    public function formatCardValue($value, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        return $this->formatChangesetValue($value);\n    }\n\n\n    /**\n     * @return string\n     */\n    abstract public function formatChangesetValueForCSV($value);\n\n    /**\n     * Formatted changeset are considered without link by default.\n     * Classes that format with a link (i.e. userBind) must override this.\n     * @return string\n     */\n    public function formatChangesetValueWithoutLink($value)\n    {\n        return $this->formatChangesetValue($value);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatArtifactValue($value_id)\n    {\n        if ($value_id && $value_id != self::NONE_VALUE) {\n            return $this->formatCriteriaValue($value_id);\n        } else {\n            return '-';\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailArtifactvalue($value_id)\n    {\n        return $this->formatMailCriteriaValue($value_id);\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param array $criteria_value array of criteria_value (which are array)\n     * @return string\n     */\n    public function getCriteriaFrom($criteria_value)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value) {\n            $a = 'A_' . $this->field->id;\n            $b = 'B_' . $this->field->id;\n            if ($this->isSearchingNone($criteria_value)) {\n                return \" LEFT JOIN (\n                    tracker_changeset_value AS $a\n                    INNER JOIN tracker_changeset_value_list AS $b ON (\n                        $b.changeset_value_id = $a.id\n                    )\n                ) ON ($a.changeset_id = c.id\n                    AND $a.field_id = \" . $this->field->id . \"\n                )\";\n            }\n\n            return \" INNER JOIN tracker_changeset_value AS $a\n                     ON ($a.changeset_id = c.id\n                         AND $a.field_id = \" . $this->field->id . \"\n                     )\n                     INNER JOIN tracker_changeset_value_list AS $b ON (\n                        $b.changeset_value_id = $a.id\n                     ) \";\n        }\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param array $criteria_value array of id => criteria_value (which are array)\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria_value)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value) {\n            $a = 'A_' . $this->field->id;\n            $b = 'B_' . $this->field->id;\n\n            $data_access = CodendiDataAccess::instance();\n\n            if ($this->isSearchingNone($criteria_value)) {\n                $values_id = $data_access->escapeIntImplode(array_values($criteria_value));\n\n                return \" $b.bindvalue_id IN (\" . $values_id . \") OR $b.bindvalue_id IS NULL \";\n            }\n\n            $ids_to_search = $data_access->escapeIntImplode($this->getIdsToSearch($criteria_value));\n\n            if ($ids_to_search === '') {\n                return '';\n            }\n\n            return \" $b.bindvalue_id IN(\" . $ids_to_search . \") \";\n        }\n        return '';\n    }\n\n    protected function getIdsToSearch($criteria_value)\n    {\n        return array_intersect(\n            array_values($criteria_value),\n            array_merge(\n                [100],\n                array_keys($this->getAllValues())\n            )\n        );\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    abstract public function getQuerySelect(): string;\n\n    /**\n     * Get the \"select\" statement to retrieve field values with their decorator if they exist\n     * @return string\n     * @see getQuerySelect\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getQuerySelect();\n    }\n\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    abstract public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list');\n\n    public function getQueryFromWithDecorator($changesetvalue_table = 'tracker_changeset_value_list'): string\n    {\n        return $this->getQueryFrom($changesetvalue_table);\n    }\n\n    /**\n     * Get the field\n     *\n     * @return Tracker_FormElement_Field_List\n     */\n    public function getField()\n    {\n        return $this->field;\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    abstract public function getValueFromRow($row);\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'bindtable_select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'bindtable_select_nb'  => 3,\n     *                  'bindtable_from'       => 'user',\n     *                  'bindtable_join_on_id' => 'user.user_id',\n     *              }\n     */\n    abstract public function getBindtableSqlFragment();\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    abstract public function getQueryOrderby(): string;\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    abstract public function getQueryGroupby(): string;\n\n    public function getSelectOptionStyles($value_id)\n    {\n        $default_styles = ['classes' => '', 'inline-styles' => ''];\n\n        if (count($this->decorators)) {\n            if (isset($this->decorators[$value_id])) {\n                return $this->decorators[$value_id]->decorateSelectOptionWithStyles();\n            } else {\n                $default_styles['classes'] = 'select-option-not-colored';\n\n                return $default_styles;\n            }\n        } else {\n            return $default_styles;\n        }\n    }\n\n    abstract public function getDao();\n    abstract public function getValueDao();\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    abstract public function fetchAdminEditForm();\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return bool true if we want to redirect\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $decorator_editor = new BoundDecoratorEditor(new BindDecoratorDao());\n\n        if (isset($params['decorator'])) {\n            foreach ($params['decorator'] as $value_id => $hexacolor) {\n                if ($hexacolor) {\n                    $decorator_editor->update($this->field, $value_id, $hexacolor, $params['required']);\n                } else {\n                    Tracker_FormElement_Field_List_BindDecorator::delete($this->field->getId(), $value_id);\n                }\n            }\n        }\n\n        $default = $this->extractDefaultValues($params);\n\n        $this->getDefaultValueDao()->save($this->field->getId(), $default);\n\n        if (! $no_redirect) {\n            $tracker = $this->field->getTracker();\n            if ($tracker === null) {\n                $GLOBALS['Response']->redirect('/');\n                return true;\n            }\n            $GLOBALS['Response']->redirect('?' . http_build_query([\n                    'tracker'            => $tracker->getId(),\n                    'func'               => 'admin-formElements',\n            ]));\n        }\n        return true;\n    }\n\n    private function extractDefaultValues(array $params): array\n    {\n        if (! isset($params['default'])) {\n            return [];\n        }\n\n        return $this->filterDefaultValues($params['default']);\n    }\n\n    protected function filterDefaultValues(array $bind_default): array\n    {\n        return array_intersect($bind_default, array_keys($this->getAllVisibleValues()));\n    }\n\n    /**\n     * @return BindDefaultValueDao\n     */\n    protected function getDefaultValueDao()\n    {\n        if (! $this->default_value_dao) {\n            $this->default_value_dao = new BindDefaultValueDao();\n        }\n        return $this->default_value_dao;\n    }\n\n    public function setDefaultValueDao(BindDefaultValueDao $dao)\n    {\n        $this->default_value_dao = $dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    abstract public static function fetchAdminCreateForm($field);\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    abstract public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    );\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    abstract public function getBindValues($bindvalue_ids = null);\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    abstract public function getBindValuesForIds(array $bindvalue_ids);\n\n    /**\n     * @return string\n     */\n    abstract public function getType();\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    abstract public function getBindValueById($bindvalue_id);\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    abstract public function getQuerySelectAggregate($functions);\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        if (is_array($this->default_values)) {\n            $t = [];\n            foreach ($this->default_values as $value) {\n                $t[$value->getId()] = $value;\n            }\n            $this->default_values = $t;\n\n            if (count($this->default_values)) {\n                $this->getDefaultValueDao()->save($this->field->getId(), array_keys($this->default_values));\n            }\n        }\n\n        if (is_array($this->decorators) && ! empty($this->decorators)) {\n            $saver  = $this->getBoundDecoratorSaver();\n            $values = $this->getBindValues();\n            foreach ($this->decorators as $decorator) {\n                if (! $decorator->isUsingOldPalette()) {\n                    $color = $decorator->tlp_color_name;\n                } else {\n                    $color = ColorHelper::RGBtoHexa($decorator->r, $decorator->g, $decorator->b);\n                }\n\n                if (isset($values[$decorator->value_id])) {\n                    $value_id = $values[$decorator->value_id]->getId();\n                } else {\n                    $value_id = $decorator->value_id;\n                }\n\n                $saver->save($this->field, $value_id, $color);\n            }\n        }\n    }\n\n    private function getBoundDecoratorSaver(): BoundDecoratorSaver\n    {\n        return new BoundDecoratorSaver(new BindDecoratorDao());\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        return [];\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return false;\n    }\n\n    /**\n     * Retrieve all values which match the keyword\n     *\n     * @param string $keyword The keyword to search\n     * @param int    $limit   The max number of values to return. Default is 10\n     *\n     * @return array\n     */\n    public function getValuesByKeyword($keyword, $limit = 10)\n    {\n        $values = [];\n        //pretty slow, but we do not have a better way to filter a value function\n        foreach ($this->getAllValues($keyword) as $v) {\n            if (false !== stripos($v->getLabel(), $keyword)) {\n                $values[] = $v;\n                if (--$limit === 0) {\n                    break;\n                }\n            }\n        }\n        return $values;\n    }\n\n    /**\n     * Retrieve all the numeric values of the binded values\n     *\n     * @return array of numeric bind values\n     */\n    abstract public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value);\n\n    /**\n     * @psalm-param ListValueBinding $value\n     */\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $representation = new FieldValueRepresentation();\n        $values         = [\n            self::REST_ID_KEY    => $value->getId(),\n            self::REST_LABEL_KEY => $value->getAPIValue(),\n        ];\n        $representation->build($values);\n        return $representation;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $rest_values = [];\n        foreach ($this->getAllValues() as $value) {\n            $rest_values[] = $this->getRESTBindValue($value);\n        }\n        return $rest_values;\n    }\n\n    abstract public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value);\n\n    abstract public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field);\n\n    public function getFieldDataFromRESTValue($value): int\n    {\n        return (int) $value;\n    }\n\n    public function addValue($new_value)\n    {\n        return;\n    }\n\n    protected function isSearchingNone($criteria_value)\n    {\n        if (empty($criteria_value)) {\n            return true;\n        }\n\n        if (\n            is_array($criteria_value)\n            && in_array(Tracker_FormElement_Field_List::NONE_VALUE, $criteria_value)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private function checkDefaultValueValidity(array $default_values): array\n    {\n        if (empty($default_values)) {\n            return $default_values;\n        }\n\n        return array_intersect_key($default_values, $this->getAllVisibleValues());\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\n\nclass Tracker_FormElement_Field_List_Bind_Null extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'null';\n\n    public function __construct($field)\n    {\n        parent::__construct($field, [], []);\n    }\n\n    /**\n     * @return array all values of the field\n     */\n    public function getAllValues()\n    {\n        return [];\n    }\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return mixed The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        return [];\n    }\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the alue for artifact submision\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        return [];\n    }\n    /**\n     * @return array\n     */\n    public function getValue($value_id)\n    {\n        return [];\n    }\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        return [];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"from\" statement to allow search with this field\n     * You can join on 'c' which is a pseudo table used to retrieve\n     * the last changeset of all artifacts.\n     * @param array $criteria_value array of criteria_value (which are array)\n     * @return string\n     */\n    public function getCriteriaFrom($criteria_value)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"where\" statement to allow search with this field\n     * @param array $criteria array of id => criteria_value (which are array)\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        return '';\n    }\n\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        return null;\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'bindtable_select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'bindtable_select_nb'  => 3,\n     *                  'bindtable_from'       => 'user',\n     *                  'bindtable_join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [];\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        return '';\n    }\n\n\n    public function getDao()\n    {\n        return null;\n    }\n    public function getValueDao()\n    {\n        return null;\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        return '';\n    }\n\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return '';\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        return '';\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        return [];\n    }\n\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return [];\n    }\n\n    /**\n     * Fixes original value ids after field duplication.\n     *\n     * @param array $value_mapping An array associating old value ids to new value ids.\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        return [];\n    }\n\n    public function getQuerySelectAggregate($functions)\n    {\n        return [];\n    }\n\n    protected function getRESTBindingList()\n    {\n        return [];\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        return;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        return;\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindNull($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        return new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Colorpicker\\ColorpickerMountPointPresenter;\nuse Tuleap\\Tracker\\Events\\IsFieldUsedInASemanticEvent;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticXmlExporter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindStaticValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\OpenListValueDao;\nuse Tuleap\\Tracker\\FormElement\\View\\Admin\\Field\\ListFields\\BindValuesAdder;\nuse Tuleap\\Tracker\\FormElement\\FormElementListValueAdminViewPresenterBuilder;\nuse Tuleap\\Tracker\\REST\\FieldListStaticValueRepresentation;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_List_Bind_Static extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'static';\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_StaticValue[]\n     */\n    protected $values;\n\n    protected $is_rank_alpha;\n\n    /**\n     * @var BindStaticValueDao\n     */\n    private $value_dao = null;\n\n    public function __construct($field, $is_rank_alpha, $values, $default_values, $decorators)\n    {\n        parent::__construct($field, $default_values, $decorators);\n\n        $this->is_rank_alpha = $is_rank_alpha;\n        $this->values        = $values;\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($value->getLabel(), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue\n     */\n    public function getValueFromRow($row)\n    {\n        return new Tracker_FormElement_Field_List_Bind_StaticValue(\n            $row['id'],\n            $row['label'],\n            $row['description'],\n            $row['rank'],\n            $row['is_hidden']\n        );\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"tracker_field_list_bind_static_value.id,\n                             tracker_field_list_bind_static_value.label,\n                             tracker_field_list_bind_static_value.description,\n                             tracker_field_list_bind_static_value.rank,\n                             tracker_field_list_bind_static_value.is_hidden\",\n            'select_nb'  => 5,\n            'from'       => 'tracker_field_list_bind_static_value',\n            'join_on_id' => 'tracker_field_list_bind_static_value.id',\n        ];\n    }\n\n    protected function getRESTBindingList()\n    {\n        // returns empty array as static are already listed in 'values'\n        return [];\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n         return $this->format($this->values[$value_id]);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        // Should receive only valid value object but keep it as is for compatibility reasons\n        if (is_array($value)) {\n            if (isset($this->values[$value['id']])) {\n                $value = $this->values[$value['id']];\n            } elseif ($value['id'] == Tracker_FormElement_Field_List_Bind_StaticValue_None::VALUE_ID) {\n                $value = new Tracker_FormElement_Field_List_Bind_StaticValue_None();\n            }\n        }\n        if ($value) {\n            assert($value instanceof Tracker_FormElement_Field_List_Value);\n            return $this->formatChangesetValueObject($value);\n        }\n    }\n\n    private function formatChangesetValueObject(Tracker_FormElement_Field_List_Value $value)\n    {\n        if (isset($this->decorators[$value->getId()])) {\n            return $this->decorators[$value->getId()]->decorate($this->format($value));\n        }\n        return $this->format($value);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        if ($value['id'] == 100 || ! array_key_exists($value['id'], $this->values)) {\n            return '';\n        } else {\n            return $this->values[$value['id']]->getLabel();\n        }\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue[]\n     */\n    public function getAllValues()\n    {\n        return $this->values;\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string $submitted_value the field value\n     * @param bool   $is_multiple     if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(\",\", $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getLabel(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getLabel() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * @param int $value_id\n     * @return Tracker_FormElement_Field_List_Bind_StaticValue\n     * @throws Tracker_FormElement_InvalidFieldValueException\n     */\n    public function getValue($value_id)\n    {\n        if (! isset($this->values[$value_id])) {\n            throw new Tracker_FormElement_InvalidFieldValueException();\n        }\n\n        return $this->values[$value_id];\n    }\n\n    public function getIsRankAlpha()\n    {\n        return $this->is_rank_alpha;\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->values[$value]->getLabel();\n    }\n\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $values = [];\n        foreach ($this->getValueDao()->searchChangesetValues($changeset_id, $this->field->id, $this->is_rank_alpha) as $row) {\n            $values[] = $row;\n        }\n        return $values;\n    }\n\n    protected function getIdsToSearch($criteria_value)\n    {\n        return array_values($criteria_value);\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id AS \" . $this->field->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values with the RGB values of their decorator\n     * @return string\n     * @see getQueryFrom\n     */\n    public function getQuerySelectWithDecorator()\n    {\n        return $this->getQuerySelect() . \", color.red, color.green, color.blue, color.tlp_color_name\";\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n\n        return \"LEFT JOIN (\n                    tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN tracker_field_list_bind_static_value AS $R2 ON ($R2.id = $R3.bindvalue_id AND $R2.field_id = \" . $this->field->id . \" )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\n               \";\n    }\n\n    public function getQueryFromWithDecorator($changesetvalue_table = 'tracker_changeset_value_list'): string\n    {\n        $current_field_id = $this->field->id;\n        $R2               = 'R2_' . $current_field_id;\n        $none_value       = (int) self::NONE_VALUE;\n\n        $sql = \"LEFT OUTER JOIN tracker_field_list_bind_decorator AS color ON (\n                ($R2.field_id = color.field_id AND color.value_id = $R2.id)\n                OR ($R2.field_id IS null AND color.value_id = $none_value AND color.field_id = $current_field_id)\n            )\";\n\n        return $this->getQueryFrom($changesetvalue_table) . $sql;\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return $this->is_rank_alpha ? \"$R2.label\" : \"$R2.rank\";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.label AS label, count(*) AS value\",\n                        'group_by' => \"$R2.label\",\n                    ];\n                } else {\n                    $select = \"$f($R2.label) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    public function getDao()\n    {\n        return new BindStaticDao();\n    }\n\n    private function getOpenValueDao()\n    {\n        return new OpenListValueDao();\n    }\n\n    private function getTemplateRenderer(): TemplateRenderer\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n    }\n\n    private function getFormElementListAdminViewBuilder(): FormElementListValueAdminViewPresenterBuilder\n    {\n        return new FormElementListValueAdminViewPresenterBuilder($this->getValueDao());\n    }\n\n    private function getAdminEditRowModifiable(\n        Tracker_FormElement_Field_List_Value $value,\n        ?ColorpickerMountPointPresenter $decorator,\n        bool $is_custom_value,\n    ): string {\n        return $this->getTemplateRenderer()->renderToString(\n            'admin-edit-row-modifiable',\n            $this->getFormElementListAdminViewBuilder()->buildPresenter(\n                $this->field,\n                $value,\n                $decorator,\n                $is_custom_value\n            )\n        );\n    }\n\n    /**\n     * @return BindStaticValueDao\n     */\n    public function getValueDao()\n    {\n        if ($this->value_dao === null) {\n            $this->value_dao = new BindStaticValueDao();\n        }\n        return $this->value_dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        $html = '';\n        $h    = new HTML_Element_Input_Checkbox(dgettext('tuleap-tracker', 'alphabetically sort values'), 'bind[is_rank_alpha]', 0);\n        $h->setId('is_rank_alpha');\n        $html .= '<p>' . $h->render() . '</p>';\n        $html .= '<p>';\n        $html .= '<textarea name=\"formElement_data[bind][add]\" rows=\"5\" cols=\"30\"></textarea><br />';\n        $html .= '<span style=\"color:#999; font-size:0.8em;\">' . dgettext('tuleap-tracker', 'Add one value per row') . '</span>';\n        $html .= '</p>';\n        return $html;\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     */\n    public function fetchAdminEditForm(): string\n    {\n        if ($this->field->isTargetSharedField()) {\n            return $this->fetchAdminEditFormNotModifiable();\n        } else {\n            return $this->fetchAdminEditFormModifiable();\n        }\n    }\n\n    private function fetchAdminEditFormModifiable(): string\n    {\n        $html = '';\n\n        $html .= $this->fetchAdminEditFormModifiableWithUsersValues();\n\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Static values') . '</h3>';\n\n        $h = new HTML_Element_Input_Checkbox(\n            dgettext('tuleap-tracker', 'alphabetically sort values'),\n            'bind[is_rank_alpha]',\n            $this->is_rank_alpha\n        );\n        $h->setId('is_rank_alpha');\n        $h->addParam('class', 'is_rank_alpha');\n        $html .= '<p>' . $h->render() . '</p>';\n\n        $html .= '<table><tr><td>';\n        $html .= '<input type=\"hidden\" name=\"bind[order]\" class=\"bind_order_values\" value=\"\" />';\n        $html .= '<ul class=\"tracker-admin-bindvalue_list tracker-admin-bindvalue_list_sortable\">';\n\n        $retriever       = new BindValuesAdder();\n        $possible_values = $retriever->addNoneValue($this->getAllValues());\n\n        foreach ($possible_values as $v) {\n            $html .= $this->fetchAdminEditRowModifiable($v);\n        }\n        $html .= '</ul>';\n        $html .= '</td></tr></table>';\n\n        //Add new values\n        $html .= '<p id=\"tracker-admin-bind-static-addnew\">';\n        $html .= '<strong>' . dgettext('tuleap-tracker', 'Add new values') . '</strong><br />';\n        $html .= '<textarea name=\"bind[add]\" rows=\"5\" cols=\"30\"></textarea><br />';\n        $html .= '<span style=\"color:#999; font-size:0.8em;\">' . dgettext(\n            'tuleap-tracker',\n            'Add one value per row'\n        ) . '</span><br />';\n        $html .= '</p>';\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    private function fetchAdminEditFormModifiableWithUsersValues(): string\n    {\n        $html            = '';\n        $user_row_values = $this->getOpenValueDao()->searchByFieldId($this->getField()->getId());\n\n        if ($user_row_values->count() === 0) {\n            return $html;\n        }\n\n        $html       .= '<h3>' . dgettext('tuleap-tracker', 'Values added by users') . '</h3>';\n        $user_values = [];\n\n        foreach ($user_row_values as $row_value) {\n            $user_values[] = new Tracker_FormElement_Field_List_OpenValue(\n                $row_value['id'],\n                $row_value['label'],\n                $row_value['is_hidden']\n            );\n        }\n\n        $html .= '<table><tr><td>';\n        $html .= '<input type=\"hidden\" name=\"bind[order]\" value=\"\" />';\n        $html .= '<ul class=\"tracker-admin-bindvalue_list\">';\n\n        foreach ($user_values as $value) {\n            $html .= $this->getAdminEditRowModifiable($value, null, true);\n        }\n\n        $html .= '</ul>';\n        $html .= '</td></tr></table>';\n\n        return $html;\n    }\n\n    private function fetchAdminEditRowModifiable(Tracker_FormElement_Field_List_Value $value): string\n    {\n        assert($value instanceof Tracker_FormElement_Field_List_Bind_StaticValue);\n\n        $event = new IsFieldUsedInASemanticEvent($this->field);\n\n        EventManager::instance()->processEvent($event);\n\n        $is_used_in_semantics = $event->isUsed();\n        if (isset($this->decorators[$value->getId()])) {\n            $decorator = $this->decorators[$value->getId()]->decorateEdit($is_used_in_semantics);\n        } else {\n            $decorator = Tracker_FormElement_Field_List_BindDecorator::noDecoratorEdit(\n                $this->field->id,\n                $value->getId(),\n                $is_used_in_semantics\n            );\n        }\n\n        return $this->getAdminEditRowModifiable($value, $decorator, false);\n    }\n\n    private function fetchAdminEditFormNotModifiable()\n    {\n        $html = '';\n\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Static values') . '</h3>';\n        $html .= '<table cellpadding=\"2\" cellspacing=\"0\" border=\"0\">';\n        foreach ($this->getAllValues() as $v) {\n            $html .= $this->fetchAdminEditRowNotModifiable($v);\n        }\n        $html .= '</table>';\n\n        // @todo: Show default value ?\n\n        return $html;\n    }\n\n    private function fetchAdminEditRowNotModifiable(Tracker_FormElement_Field_List_Value $v)\n    {\n        $html  = '';\n        $html .= '<tr valign=\"top\" class=\"' . ($v->isHidden() ? 'tracker_admin_static_value_hidden' : '') . '\">';\n        $html .= '<td>' . $this->formatChangesetValue(['id' => $v->getId()]) . '</td>';\n        $html .= '</tr>';\n        return $html;\n    }\n\n    /**\n     * Say if a value can be hidden without checking the semantic status\n     *\n     * @param Tracker_FormElement_Field_List_Bind_StaticValue $value the value\n     *\n     * @return bool true if the value can be hidden\n     */\n    public function canValueBeHiddenWithoutCheckingSemanticStatus(Tracker_FormElement_Field_List_Bind_StaticValue $value)\n    {\n        return $this->getValueDao()->canValueBeHiddenWithoutCheckingSemanticStatus($this->field, $value->getId());\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $hp        = Codendi_HTMLPurifier::instance();\n        $value_dao = $this->getValueDao();\n        foreach ($params as $key => $value) {\n            switch ($key) {\n                case 'is_rank_alpha':\n                    $is_rank_alpha = $value ? 1 : 0;\n                    if ($this->is_rank_alpha != $is_rank_alpha) {\n                        $this->getDao()->save($this->field->id, $is_rank_alpha);\n                        if (! empty($this->field->getSharedTargets())) {\n                            $this->getDao()->updateChildrenAlphaRank($this->field->id, $is_rank_alpha);\n                        }\n                        $GLOBALS['Response']->addFeedback('info', dgettext('tuleap-tracker', 'Alpha Ranking updated'));\n                    }\n                    break;\n                case 'delete':\n                    if (($row = $value_dao->searchById((int) $value)->getRow()) && $value_dao->delete($this->field, (int) $value)) {\n                        $params['decorator'] = [(int) $value => null];\n                        $GLOBALS['Response']->addFeedback(\n                            Feedback::INFO,\n                            sprintf(\n                                dgettext('tuleap-tracker', 'Value %s deleted'),\n                                $hp->purify($row['label'], CODENDI_PURIFIER_CONVERT_HTML),\n                            )\n                        );\n                    }\n                    break;\n                case 'order':\n                    if (is_string($value) && $value != '') {\n                        $ids_in_right_order = explode(',', $value);\n                        $value_dao->reorder($ids_in_right_order);\n                    }\n                    break;\n                case 'edit':\n                    foreach ($value as $value_id => $info) {\n                        if (isset($this->values[$value_id])) {\n                            $bind_static_value = $this->values[$value_id];\n\n                            $new_label       = null;\n                            $new_description = null;\n                            $new_is_hidden   = null;\n                            if (isset($info['label']) && trim($info['label']) != $bind_static_value->getLabel()) {\n                                if (empty(trim($info['label']))) {\n                                    $GLOBALS['Response']->addFeedback(\n                                        Feedback::WARN,\n                                        dgettext('tuleap-tracker', 'Field value cannot be empty')\n                                    );\n                                } else {\n                                    $new_label = trim($info['label']);\n                                }\n                            }\n                            if (isset($info['description']) && trim($info['description']) != $bind_static_value->getDescription()) {\n                                $new_description = trim($info['description']);\n                            }\n\n                            if ($value_dao->canValueBeHidden($this->field, (int) $value_id)) {\n                                $new_is_hidden = ! isset($info['is_hidden']);\n                            }\n\n                            if ($new_label !== null || $new_description !== null || $new_is_hidden !== null) {\n                                $original_value = $this->value_dao->searchById($value_id)->getRow();\n                                //something has changed. we can save it\n                                $value_dao->save(\n                                    $value_id,\n                                    $this->field->getId(),\n                                    isset($new_label) ? $new_label : $bind_static_value->getLabel(),\n                                    isset($new_description) ? $new_description : $bind_static_value->getDescription(),\n                                    $original_value['rank'],\n                                    isset($new_is_hidden) ? $new_is_hidden : $bind_static_value->isHidden()\n                                );\n                                unset($new_label, $new_description);\n                            }\n                        }\n                    }\n                    break;\n                case \"edit_custom\":\n                    $values = $this->getOpenValueDao()->searchByFieldId($this->field->getId());\n                    foreach ($values as $row) {\n                        $new_is_hidden = ! isset($value[$row['id']]['is_hidden']);\n                        $this->getOpenValueDao()->updateOpenValue(\n                            (int) $row['id'],\n                            $new_is_hidden,\n                            $value[$row['id']]['label']\n                        );\n                    }\n                    break;\n                case 'add':\n                    $valueMapping = [];\n                    foreach (explode(\"\\n\", $value) as $new_value) {\n                        $id = $this->addValue($new_value);\n                        if ($id) {\n                            $this->values[$id] = $this->getValueFromRow($value_dao->searchById($id)->getRow());\n                            $valueMapping[]    = $id;\n                        }\n                    }\n                    if (isset($params['decorators'])) {\n                        $params['decorator'] = [];\n                        foreach ($params['decorators'] as $key => $deco) {\n                            $params['decorator'][$valueMapping[$key]] =\n                                   ColorHelper::RGBtoHexa($deco->r, $deco->g, $deco->b);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return parent::process($params, $no_redirect);\n    }\n\n    /**\n     * @param string $new_value\n     *\n     * @return int | null\n     */\n    public function addValue($new_value)\n    {\n        $value_dao = $this->getValueDao();\n        //remove the \\r submitted by the user\n        $new_value = trim(str_replace(\"\\r\", '', $new_value));\n        if (! $new_value) {\n            return;\n        }\n        $id = $value_dao->create($this->field->getId(), $new_value, '', 'end', 0);\n        if (! $id) {\n            return;\n        }\n        $this->propagateCreation($this->field, $id);\n\n        return $id;\n    }\n\n    public function propagateCreation($field, $original_value_id)\n    {\n        $value_dao = $this->getValueDao();\n        $value_dao->propagateCreation($field, $original_value_id);\n    }\n\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        $root->addAttribute('is_rank_alpha', $this->is_rank_alpha ? \"1\" : \"0\");\n        if (! $this->getAllValues()) {\n            return;\n        }\n\n        $exporter = new BindStaticXmlExporter(new XML_SimpleXMLCDATAFactory());\n        $exporter->exportToXml(\n            $root,\n            $this->getAllValues(),\n            $this->decorators,\n            $this->default_values,\n            $xmlMapping\n        );\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        if ($bindvalue_ids === null) {\n            return $this->values;\n        } else {\n            return $this->extractBindValuesByIds($bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return $this->extractBindValuesByIds($bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($this->values[$i])) {\n                $list_of_bindvalues[$i] = $this->values[$i];\n            }\n        }\n\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        $dao = new BindStaticDao();\n        if ($dao->save($this->field->getId(), $this->is_rank_alpha)) {\n            $value_dao = $this->getValueDao();\n            foreach ($this->getAllValues() as $v) {\n                if ($id = $value_dao->create($this->field->getId(), $v->getLabel(), $v->getDescription(), 'end', $v->isHidden())) {\n                    $v->setId($id);\n                }\n            }\n        }\n        parent::saveObject();\n    }\n\n    public function isValid($value)\n    {\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        $value_dao = $this->getValueDao();\n        $field_id  = $this->getField()->getId();\n\n        foreach ($value_mapping as $old_original_value_id => $new_original_value_id) {\n            $value_dao->updateOriginalValueId($field_id, $old_original_value_id, $new_original_value_id);\n        }\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        $bind_values = $this->getBindValues($changeset_value->getValue());\n\n        return $this->extractNumericValues($bind_values);\n    }\n\n    private function extractNumericValues(array $bind_values)\n    {\n        $numeric_values = [];\n\n        foreach ($bind_values as $bind_value) {\n            $value = $bind_value->getLabel();\n\n            if (is_numeric($value)) {\n                $numeric_values[] = $value;\n            }\n        }\n\n        return $numeric_values;\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        if (isset($rest_data['id']) && is_numeric($rest_data['id'])) {\n            $id = (int) $rest_data['id'];\n            try {\n                $this->getValue($id);\n            } catch (Tracker_FormElement_InvalidFieldValueException $e) {\n                if (! $this->getOpenValueDao()->searchById($field->getId(), $id)->getRow()) {\n                    throw new Tracker_FormElement_InvalidFieldValueException('Bind Value with ID ' . $id . ' does not exist for field ID ' . $field->getId());\n                }\n\n                return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $id;\n            }\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $id;\n        }\n        if (isset($rest_data['label'])) {\n            $identifier = (string) $rest_data['label'];\n        } else {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList static fields values should be passed as an object with at least one of the properties \"id\" or \"label\"');\n        }\n\n        $row = $this->getOpenValueDao()->searchByExactLabel($field->getId(), $identifier)->getRow();\n        if ($row) {\n            return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $row['id'];\n        }\n\n        return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n    }\n\n    public function getRESTAvailableValues()\n    {\n        $rest_values = [];\n        foreach ($this->getAllValues() as $value) {\n            $rest_values[] = $this->getRESTBindValue($value);\n        }\n\n        $new_values = $this->getOpenValueDao()->searchByFieldId($this->getField()->getId());\n        foreach ($new_values as $row_value) {\n            $bind_value    = new Tracker_FormElement_Field_List_Bind_StaticValue(\n                $row_value['id'],\n                $row_value['label'],\n                '',\n                '',\n                ''\n            );\n            $rest_values[] = $this->getRESTBindValue($bind_value);\n        }\n\n        return $rest_values;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $value_color = null;\n        if (isset($this->decorators[$value->getId()])) {\n            $value_color = $this->decorators[$value->getId()]->getCurrentColor();\n        }\n        $representation = new FieldListStaticValueRepresentation();\n        $representation->build($value, Codendi_HTMLPurifier::instance()->purify($value_color));\n\n        return $representation;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        return [\n            'label' => $value->getLabel(),\n            'id'    => $value->getId(),\n        ];\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindStatic($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        $dao = new BindStaticValueDao();\n        $row = $dao->searchById($bindvalue_id)->getRow();\n\n        return $this->getValueFromRow($row);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Project\\REST\\MinimalUserGroupRepresentation;\nuse Tuleap\\Project\\REST\\UserGroupRepresentation;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindUgroupsValueDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\OpenListValueDao;\nuse Tuleap\\Tracker\\REST\\FieldListBindUGroupValueRepresentation;\n\n/**\n * @template-extends Tracker_FormElement_Field_List_Bind<Tracker_FormElement_Field_List_Bind_UgroupsValue>\n */\nclass Tracker_FormElement_Field_List_Bind_Ugroups extends Tracker_FormElement_Field_List_Bind\n{\n    public const TYPE = 'ugroups';\n\n    /**\n     * @var UGroupManager\n     */\n    private $ugroup_manager;\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_UgroupsValue[]\n     */\n    private $values;\n\n    /**\n     * @var Tracker_FormElement_Field_List_Bind_UgroupsValue[]\n     */\n    private $values_indexed_by_ugroup_id;\n\n    /**\n     * @var BindUgroupsValueDao\n     */\n    protected $value_dao;\n\n    public function __construct($field, $values, $default_values, $decorators, UGroupManager $ugroup_manager, BindUgroupsValueDao $value_dao)\n    {\n        parent::__construct($field, $default_values, $decorators);\n        $this->values         = $values;\n        $this->ugroup_manager = $ugroup_manager;\n        $this->value_dao      = $value_dao;\n\n        $this->values_indexed_by_ugroup_id = [];\n        foreach ($values as $value) {\n            $this->values_indexed_by_ugroup_id[$value->getUGroupId()] = $value;\n        }\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        return $value->getLabel();\n    }\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($this->format($this->getValue($value_id)), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @param Tracker_FormElement_Field_List_Bind_UsersValue $value the value of the field\n     *\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        return $value->fetchFormatted();\n    }\n\n    /**\n     *\n     * @param Tracker_FormElement_Field_List_Bind_UgroupsValue $value\n     *\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        return $value->getUGroupName();\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $values = [];\n        foreach ($this->getValueDao()->searchChangesetValues($changeset_id, $this->field->id) as $row) {\n            $values[] = $this->getValueFromRow($row);\n        }\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UgroupsValue|null\n     */\n    public function getValue($value_id)\n    {\n        $vs = $this->getAllValues();\n        $v  = null;\n        if (isset($vs[$value_id])) {\n            $v = $vs[$value_id];\n        }\n        return $v;\n    }\n\n    /**\n     * @param string $keyword\n     *\n     * @return array\n     */\n    public function getAllValues()\n    {\n        return $this->values;\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * Duplicate of BindFactory::getUgroupsValueInstance\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        $ugroup = $this->ugroup_manager->getUGroup($this->field->getTracker()->getProject(), $row['ugroup_id']);\n        if ($ugroup) {\n            $is_hidden = isset($row['is_hidden']) ? $row['is_hidden'] : false;\n\n            return new Tracker_FormElement_Field_List_Bind_UgroupsValue($row['id'], $ugroup, $is_hidden);\n        }\n        return new Tracker_FormElement_Field_List_Bind_UgroupsValue(-1, new ProjectUGroup(['ugroup_id' => 0, 'name' => \"\"]), true);\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"tracker_field_list_bind_ugroups_value.id,\n                             tracker_field_list_bind_ugroups_value.ugroup_id\",\n            'select_nb'  => 2,\n            'from'       => 'tracker_field_list_bind_ugroups_value',\n            'join_on_id' => 'tracker_field_list_bind_ugroups_value.id',\n        ];\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string  $submitted_value the field value (username(s))\n     * @param bool $is_multiple if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision (user_id)\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(',', $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getUGroupName(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getUGroupName() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id AS \" . $this->field->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        $R4 = 'R4_' . $this->field->id;\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN tracker_field_list_bind_ugroups_value AS $R2 ON ($R2.id = $R3.bindvalue_id AND $R2.field_id = \" . $this->field->id . \" )\n                    INNER JOIN ugroup AS $R4 ON ($R4.ugroup_id = $R2.ugroup_id AND (\n                        ($R4.ugroup_id > 100 AND $R4.group_id = \" . $this->field->getTracker()->getProject()->getID() . \" )\n                        OR\n                        ($R4.ugroup_id <= 100 AND $R4.group_id = 100))\n                    )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.ugroup_id\";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $R3       = 'R3_' . $this->field->id;\n        $R4       = 'R4_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R4.name AS label, count(*) AS value\",\n                        'group_by' => \"$R4.name\",\n                    ];\n                } else {\n                    $select = \"$f($R4.name) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->format($this->getValue($value));\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    public function getDao()\n    {\n        //return new Tracker_FormElement_Field_List_Bind_UsersDao();\n    }\n\n    private function getOpenValueDao()\n    {\n        return new OpenListValueDao();\n    }\n\n    public function getValueDao()\n    {\n        return $this->value_dao;\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return self::fetchSelectUgroups('formElement_data[bind][values][]', $field, []);\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        $html  = '';\n        $html .= '<h3>' . dgettext('tuleap-tracker', 'Bind to user groups') . '</h3>';\n        $html .= self::fetchSelectUgroups('bind[values][]', $this->field, $this->values);\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    protected static function fetchSelectUgroups($select_name, $field, $values)\n    {\n        $hp             = Codendi_HTMLPurifier::instance();\n        $ugroup_manager = new UGroupManager();\n\n        $ugroups = $ugroup_manager->getUGroups(\n            $field->getTracker()->getProject(),\n            [ProjectUGroup::NONE, ProjectUGroup::ANONYMOUS, ProjectUGroup::REGISTERED, ProjectUGroup::DOCUMENT_ADMIN, ProjectUGroup::DOCUMENT_TECH]\n        );\n\n        $html  = '';\n        $html .= '<input type=\"hidden\" name=\"' . $select_name . '\" value=\"\" />';\n        $html .= '<select multiple=\"multiple\" name=\"' . $select_name . '\" size=\"' . min(9, max(5, count($ugroups))) . '\">';\n\n        $selected_ugroup_ids = array_map(\n            static function ($value) {\n                return self::getSelectedUgroupIds($value);\n            },\n            $values\n        );\n        foreach ($ugroups as $ugroup) {\n            $selected = \"\";\n            if (in_array($ugroup->getId(), $selected_ugroup_ids)) {\n                $selected = 'selected=\"selected\"';\n            }\n            $html .= '<option value=\"' . $ugroup->getId() . '\" ' . $selected . '>';\n            $html .= $hp->purify($ugroup->getTranslatedName());\n            $html .= '</option>';\n        }\n        $html .= '</select>';\n        return $html;\n    }\n\n    private static function getSelectedUgroupIds($value)\n    {\n        if (! $value->isHidden()) {\n            return $value->getUgroupId();\n        }\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        $value_dao = $this->getValueDao();\n        foreach ($params as $key => $param_value) {\n            switch ($key) {\n                case 'values':\n                    $wanted_ugroup_ids = array_filter($param_value);\n                    $this->hideUnwantedValues($wanted_ugroup_ids);\n                    foreach ($wanted_ugroup_ids as $ugroup_id) {\n                        $value = $this->getValueByUGroupId($ugroup_id);\n                        if ($value) {\n                            if ($value->isHidden()) {\n                                $value_dao->show($value->getId());\n                            }\n                        } else {\n                            $value_dao->create($this->field->getId(), $ugroup_id, false);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        return parent::process($params, $no_redirect);\n    }\n\n    private function hideUnwantedValues(array $wanted_ugroup_ids)\n    {\n        foreach ($this->getAllValues() as $value) {\n            if (! in_array($value->getUGroupId(), $wanted_ugroup_ids)) {\n                $this->getValueDao()->hide($value->getId());\n            }\n        }\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UgroupsValue or null if no match\n     */\n    private function getValueByUGroupId($ugroup_id)\n    {\n        if (isset($this->values_indexed_by_ugroup_id[$ugroup_id])) {\n            return $this->values_indexed_by_ugroup_id[$ugroup_id];\n        }\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        foreach ($this->values as $value) {\n            if ($id = $this->getValueDao()->create($this->field->getId(), $value->getUgroupId(), $value->isHidden())) {\n                $value->setId($id);\n            }\n        }\n        parent::saveObject();\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        $items = $root->addChild('items');\n        foreach ($this->values as $value) {\n            $item = $items->addChild('item');\n            $id   = $value->getXMLId();\n            $item->addAttribute('ID', $id);\n            $xmlMapping['values'][$id] = $value->getId();\n            $item->addAttribute('label', $value->getUGroupName());\n            $item->addAttribute('is_hidden', (int) $value->isHidden());\n        }\n        if ($this->default_values) {\n            $default_child = $root->addChild('default_values');\n            foreach ($this->default_values as $id => $nop) {\n                if ($ref = array_search($id, $xmlMapping['values'])) {\n                    $default_child->addChild('value')->addAttribute('REF', $ref);\n                }\n            }\n        }\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return true if Tracler is ok\n     */\n    public function testImport()\n    {\n        return true;\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        $values = $this->getAllValues();\n        if ($bindvalue_ids === null) {\n            return $values;\n        } else {\n            return $this->extractBindValuesByIds($values, $bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        return $this->extractBindValuesByIds($this->getAllValues(), $bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $values, array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($values[$i])) {\n                $list_of_bindvalues[$i] = $values[$i];\n            }\n        }\n\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        $recipients = [];\n        foreach ($changeset_value->getListValues() as $ugroups_value) {\n            if ($ugroups_value instanceof Tracker_FormElement_Field_List_Bind_UgroupsValue) {\n                $recipients = array_merge($recipients, $ugroups_value->getMembersName());\n            }\n        }\n        return $recipients;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    public function isValid($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        $separated_values = explode(',', $value);\n        foreach ($separated_values as $separated_value) {\n            if (strpos($separated_value, '!') === false) {\n                continue;\n            }\n            $user_group_name = substr($separated_value, 1);\n\n            $project = $this->getField()->getTracker()->getProject();\n            $ugroup  = $this->ugroup_manager->getUGroupByName($project, $user_group_name);\n\n            if ($ugroup === null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        // Nothing to do: user value ids stay the same accross projects.\n    }\n\n    protected function getRESTBindingList()\n    {\n        // returns empty array as ugroups are already listed in 'values'\n        return [];\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        // returns an empty array as it doesn't make sense with Ugroups\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $project = $value->getProject();\n        if (! $project) {\n            throw new Project_NotFoundException();\n        }\n        $ugroup = $this->ugroup_manager->getUGroup($project, $value->getUgroupId());\n        if (! $ugroup) {\n            throw new \\Tuleap\\Project\\UGroups\\InvalidUGroupException($value->getUgroupId());\n        }\n        $ugroup_representation = new MinimalUserGroupRepresentation((int) $project->getID(), $ugroup);\n\n        $representation = new FieldListBindUGroupValueRepresentation();\n        $representation->build($value, $ugroup_representation);\n        return $representation;\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValues(array_keys($this->getDefaultValues()));\n\n        $project_id = $this->getField()->getTracker()->getProject()->getID();\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = new MinimalUserGroupRepresentation((int) $project_id, $value->getUgroup());\n            $rest_array[]   = $representation;\n        }\n        return $rest_array;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        $project = $field->getTracker()->getProject();\n\n        $identifier = null;\n\n        if (isset($rest_data['id'])) {\n            $value = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($rest_data['id']);\n            $id    = $value['user_group_id'];\n\n            $bind_value = $this->getValueByUGroupId($id);\n            if ($bind_value) {\n                return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $bind_value->getId();\n            }\n\n            $user_group = $this->ugroup_manager->getUGroup($project, $id);\n            if (! $user_group) {\n                throw new Tracker_FormElement_InvalidFieldValueException('User Group with ID ' . $id . ' does not exist for field ID ' . $field->getId());\n            }\n\n            if (! $bind_value) {\n                $identifier = $user_group->getName();\n            }\n        } elseif (isset($rest_data['short_name'])) {\n            $name       = (string) $rest_data['short_name'];\n            $user_group = $this->ugroup_manager->getUGroupByName($project, $name);\n\n            if (! $user_group) {\n                throw new Tracker_FormElement_InvalidFieldValueException('User Group with short_name ' . $name . ' does not exist for field ID ' . $field->getId());\n            }\n\n            $identifier = $name;\n        } else {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList static fields values should be passed as an object with at least one of the properties \"id\" or \"short_name\"');\n        }\n\n        if ($identifier !== null) {\n            $row = $this->getOpenValueDao()->searchByExactLabel($field->getId(), $identifier)->getRow();\n            if ($row) {\n                return Tracker_FormElement_Field_OpenList::OPEN_PREFIX . $row['id'];\n            }\n        }\n\n        return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $ugroup_manager = new UGroupManager();\n        $project        = $this->getField()->getTracker()->getProject();\n        $user_group     = $ugroup_manager->getUGroupByName($project, $value->getLabel());\n\n        return new MinimalUserGroupRepresentation($project->getID(), $user_group);\n    }\n\n    public function getFieldDataFromRESTValue($rest_data): int\n    {\n        $value      = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($rest_data);\n        $ugroup_id  = $value['user_group_id'];\n        $bind_value = $this->getValueByUGroupId($ugroup_id);\n\n        if ($bind_value) {\n            return (int) $bind_value->getId();\n        }\n\n        return 0;\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindUgroups($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        $row = $this->value_dao->searchById($bindvalue_id)->getRow();\n\n        return $this->getValueFromRow($row);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        return [];\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindListUserValueGetter;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindParameters;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindVisitor;\nuse Tuleap\\Tracker\\FormElement\\Field\\ListFields\\Bind\\BindUsersDao;\nuse Tuleap\\Tracker\\Import\\Spotter;\nuse Tuleap\\Tracker\\REST\\FieldListBindUserValueRepresentation;\nuse Tuleap\\Tracker\\REST\\FormElement\\UserListValueRepresentation;\nuse Tuleap\\User\\REST\\UserRepresentation;\n\nclass Tracker_FormElement_Field_List_Bind_Users extends Tracker_FormElement_Field_List_Bind //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\n{\n    public const TYPE = 'users';\n\n    public const REGISTERED_USERS_UGROUP_NAME = 'ugroup_2';\n\n    public const REST_BINDING_LIST_ID    = 'ugroup_id';\n    public const REST_BINDING_LIST_LABEL = 'name';\n\n    /** @var UserManager */\n    protected $userManager;\n    protected $value_function = [];\n    protected $values;\n\n\n    public function __construct($field, $value_function, $default_values, $decorators)\n    {\n        parent::__construct($field, $default_values, $decorators);\n\n        if (! empty($value_function)) {\n            $this->value_function = explode(',', $value_function);\n        }\n        $this->userManager = UserManager::instance();\n    }\n\n    /**\n     * @return bool\n     */\n    public function isExistingValue($value_id)\n    {\n        $import_spotter = Spotter::instance();\n        if ($import_spotter->isImportRunning()) {\n            $user = $this->getUserManager()->getUserById($value_id);\n            return $user !== null;\n        }\n        return parent::isExistingValue($value_id);\n    }\n\n    /**\n     * @return array of value_functions\n     */\n    public function getValueFunction()\n    {\n        return $this->value_function;\n    }\n\n    /**\n     * @return string\n     */\n    protected function format($value)\n    {\n        return $value->getLabel();\n    }\n    /**\n     * @return string\n     */\n    public function formatCriteriaValue($value_id)\n    {\n        $hp = Codendi_HTMLPurifier::instance();\n        return $hp->purify($this->format($this->getValue($value_id)), CODENDI_PURIFIER_CONVERT_HTML);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatMailCriteriaValue($value_id)\n    {\n        return $this->format($this->getValue($value_id));\n    }\n\n    /**\n     * @param Tracker_FormElement_Field_List_Bind_UsersValue $value the value of the field\n     *\n     * @return string\n     */\n    public function formatChangesetValue($value)\n    {\n        if ($value->getId() == 100) {\n            return '';\n        } else {\n            return $value->fetchFormatted();\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatCardValue($value, Tracker_CardDisplayPreferences $display_preferences)\n    {\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueForCSV($value)\n    {\n        if ($value->getId() == 100) {\n            return '';  // NULL value for CSV\n        } else {\n            return $value->getUsername();\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function formatChangesetValueWithoutLink($value)\n    {\n        return Codendi_HTMLPurifier::instance()->purify($value->getLabel());\n    }\n\n    /**\n     * @return array\n     */\n    public function getChangesetValues($changeset_id)\n    {\n        $uh     = UserHelper::instance();\n        $values = [];\n        foreach ($this->getDao()->searchChangesetValues($changeset_id, $this->field->id, $uh->getDisplayNameSQLQuery(), $uh->getDisplayNameSQLOrder()) as $row) {\n            $values[] =  new Tracker_FormElement_Field_List_Bind_UsersValue($row['id'], $row['user_name'], $row['full_name']);\n        }\n        return $values;\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue | null\n     */\n    public function getValue($value_id)\n    {\n        if ($value_id == 100) {\n            $v = new Tracker_FormElement_Field_List_Bind_UsersValue(0);\n        } else {\n            $vs = $this->getAllValues();\n            $v  = null;\n            if (isset($vs[$value_id])) {\n                $v = $vs[$value_id];\n            } else {\n                // User not found in the binded ugroup. Look for users that are either:\n                //  1. not anymore active\n                //  2. not member of the binded ugroup\n                $v = $this->getAdditionnalValue($value_id);\n            }\n        }\n        return $v;\n    }\n\n    /**\n     * Get available values of this field for REST usage\n     * Fields like int, float, date, string don't have available values\n     *\n     * @return array | null The values or null if there are no specific available values\n     */\n    public function getRESTAvailableValues()\n    {\n        $ugroups = [];\n\n        foreach ($this->value_function as $ugroup) {\n            if ($ugroup != self::REGISTERED_USERS_UGROUP_NAME && $ugroup != '') {\n                $ugroups[] = $ugroup;\n            }\n        }\n\n        $rest_values = [];\n        if (! empty($ugroups)) {\n            foreach ($this->getAllValuesByUGroupList($ugroups) as $value) {\n                $rest_values[] = $this->getRESTBindValue($value);\n            }\n        }\n        return $rest_values;\n    }\n\n    /**\n     * Get the list of of ugroups used in this field     *\n     *\n     * @return array the list of all ugroups with id and name\n     */\n    protected function getRESTBindingList()\n    {\n        $ugroups = [];\n        foreach ($this->value_function as $ugroup) {\n            if ($ugroup) {\n                switch ($ugroup) {\n                    case 'group_members':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => $GLOBALS['UGROUP_PROJECT_MEMBERS'],\n                            self::REST_BINDING_LIST_LABEL => \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) ugroup_get_name_from_id($GLOBALS['UGROUP_PROJECT_MEMBERS'])),\n                        ];\n                        break;\n                    case 'group_admins':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => $GLOBALS['UGROUP_PROJECT_ADMIN'],\n                            self::REST_BINDING_LIST_LABEL => \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) ugroup_get_name_from_id($GLOBALS['UGROUP_PROJECT_ADMIN'])),\n                        ];\n                        break;\n                    case 'artifact_submitters':\n                        $ugroups[] = [\n                            self::REST_BINDING_LIST_ID    => 0,\n                            self::REST_BINDING_LIST_LABEL => $ugroup,\n                        ];\n                        break;\n                    default:\n                        if (preg_match('/ugroup_([0-9]+)/', $ugroup, $matches)) {\n                            $ugroup_data = db_fetch_array(ugroup_db_get_ugroup($matches[1]));\n                            if ($ugroup_data) {\n                                $user_group = new ProjectUGroup($ugroup_data);\n\n                                $ugroups[] = [\n                                    self::REST_BINDING_LIST_ID    => $matches[1],\n                                    self::REST_BINDING_LIST_LABEL => $user_group->getNormalizedName(),\n                                ];\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n        return $ugroups;\n    }\n\n    /**\n     * Get all values to be displayed in the field depending of a ugroup list\n     *\n     * @param array  $ugroups, a list of ugroups\n     * @param string $keyword\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    protected function getAllValuesByUGroupList($ugroups, $keyword = null)\n    {\n        if ($this->values === null) {\n            $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n            $this->values = $value_getter->getUsersValueByKeywordAndIds(\n                $ugroups,\n                $keyword,\n                [],\n                $this->field\n            );\n        }\n\n        return $this->values;\n    }\n\n    /**\n     * If all values for this field are already fetched, then returns the collection. Else perform a lookup to retrieve\n     * only the needed ids. This avoids to load ten thousands of users for nothing.\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    private function getValuesCollectionContainingIds(array $bindvalue_ids)\n    {\n        if ($this->values) {\n            return $this->values;\n        }\n\n        if (empty($bindvalue_ids)) {\n            return [];\n        }\n\n        $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n        return $value_getter->getUsersValueByKeywordAndIds(\n            $this->value_function,\n            null,\n            $bindvalue_ids,\n            $this->field\n        );\n    }\n\n    /**\n     * Get all values to be displayed in the field\n     *\n     * @param string $keyword\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    public function getAllValues($keyword = null)\n    {\n        return $this->getAllValuesByUGroupList($this->value_function, $keyword = null);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue[]\n     */\n    public function getAllValuesWithActiveUsersOnly(): array\n    {\n        if ($this->values === null) {\n            $value_getter = new BindListUserValueGetter($this->getDefaultValueDao(), UserHelper::instance());\n            $this->values = $value_getter->getActiveUsersValue(\n                $this->value_function,\n                $this->field\n            );\n        }\n\n        return $this->values;\n    }\n\n    /**\n     * @var array of additionnal values (typically users that are not active or removed from the value_function)\n     */\n    protected $additionnal_values = [];\n\n    /**\n     * Return the addtionnal value\n     *\n     * @return Tracker_FormElement_Field_List_Bind_UsersValue|null\n     */\n    protected function getAdditionnalValue($value_id)\n    {\n        if (! isset($this->additionnal_values[$value_id])) {\n            $this->additionnal_values[$value_id] = null;\n            if ($user = $this->userManager->getUserById($value_id)) {\n                $this->additionnal_values[$value_id] = new Tracker_FormElement_Field_List_Bind_UsersValue($user->getId());\n            }\n        }\n        return $this->additionnal_values[$value_id];\n    }\n\n    /**\n     * Get a bindvalue by its row\n     *\n     * @param array $row The row identifying the bindvalue\n     *\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getValueFromRow($row)\n    {\n        return new Tracker_FormElement_Field_List_Bind_UsersValue($row['id'], $row['user_name'], $row['full_name']);\n    }\n\n    /**\n     * Get the sql fragment used to retrieve value for a changeset to display the bindvalue in table rows for example.\n     * Used by OpenList.\n     *\n     * @return array {\n     *                  'select'     => \"user.user_name, user.realname, CONCAT(user.realname,' (',user.user_name,')') AS full_name\",\n     *                  'select_nb'  => 3,\n     *                  'from'       => 'user',\n     *                  'join_on_id' => 'user.user_id',\n     *              }\n     */\n    public function getBindtableSqlFragment()\n    {\n        return [\n            'select'     => \"user.user_name,\n                             user.realname,\n                             CONCAT(user.realname,' (',user.user_name,')') AS full_name\", //TODO: use UserHelper to respect user preferences\n            'select_nb'  => 3,\n            'from'       => 'user',\n            'join_on_id' => 'user.user_id',\n        ];\n    }\n\n    /**\n     * Get the field data for artifact submission\n     *\n     * @param string  $submitted_value\n     * @param bool $is_multiple if the value is multiple or not\n     *\n     * @return mixed the field data corresponding to the value for artifact submision (user_id)\n     */\n    public function getFieldData($submitted_value, $is_multiple)\n    {\n        $values = $this->getAllValues();\n        if ($is_multiple) {\n            $return           = [];\n            $submitted_values = explode(',', $submitted_value);\n            foreach ($values as $id => $value) {\n                if (in_array($value->getUsername(), $submitted_values)) {\n                    $return[] = $id;\n                }\n            }\n            if (count($submitted_values) == count($return)) {\n                return $return;\n            } else {\n                // if one value was not found, return null\n                return null;\n            }\n        } else {\n            foreach ($values as $id => $value) {\n                if ($value->getUsername() == $submitted_value) {\n                    return $id;\n                }\n            }\n            // if not found, return null\n            return null;\n        }\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.user_id AS \" . $this->field->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     *\n     * @param string $changesetvalue_table The changeset value table to use\n     *\n     * @return string\n     */\n    public function getQueryFrom($changesetvalue_table = 'tracker_changeset_value_list')\n    {\n        $R1 = 'R1_' . $this->field->id;\n        $R2 = 'R2_' . $this->field->id;\n        $R3 = 'R3_' . $this->field->id;\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN $changesetvalue_table AS $R3 ON ($R3.changeset_value_id = $R1.id)\n                    LEFT JOIN user AS $R2 ON ($R2.user_id = $R3.bindvalue_id )\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->field->id . \" )\";\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        $uh = UserHelper::instance();\n        $R2 = 'R2_' . $this->field->id;\n        return $R2 . \".\" . str_replace('user.', '', $uh->getDisplayNameSQLOrder());\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        $R2 = 'R2_' . $this->field->id;\n        return \"$R2.user_id\";\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->field->id;\n        $R2       = 'R2_' . $this->field->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->field->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.user_name AS label, count(*) AS value\",\n                        'group_by' => \"$R2.user_name\",\n                    ];\n                } else {\n                    $select = \"$f($R2.user_name) AS `\" . $this->field->name . \"_$f`\";\n                    if ($this->field->isMultiple()) {\n                        $separate[] = [\n                            'function' => $f,\n                            'select'   => $select,\n                            'group_by' => null,\n                        ];\n                    } else {\n                        $same[] = $select;\n                    }\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->format($this->getValue($value));\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        $value        = '';\n        $values_array = [];\n        if ($v = $changeset->getValue($this->field)) {\n            $values = $v->getListValues();\n            foreach ($values as $val) {\n                $values_array[] = $val->getLabel();\n            }\n        }\n        return implode(\",\", $values_array);\n    }\n\n    public function getDao()\n    {\n        return new BindUsersDao();\n    }\n\n    /**\n     * for testing purpose\n     */\n    protected function getUserManager(): UserManager\n    {\n        return $this->userManager;\n    }\n\n    public function getValueDao()\n    {\n        return new UserDao();\n    }\n\n    /**\n     * Allow the user to define the bind\n     *\n     * @param Field $field\n     *\n     * @return string html\n     */\n    public static function fetchAdminCreateForm($field)\n    {\n        return self::fetchSelectUsers('formElement_data[bind][value_function][]', $field, []);\n    }\n\n    /**\n     * Fetch the form to edit the formElement\n     *\n     * @return string html\n     */\n    public function fetchAdminEditForm()\n    {\n        $html  = '';\n        $html .= '<h3>' . 'Bind to users' . '</h3>';\n        $html .= self::fetchSelectUsers('bind[value_function][]', $this->field, $this->value_function);\n\n        //Select default values\n        $html .= $this->getField()->getSelectDefaultValues($this->default_values);\n\n        return $html;\n    }\n\n    protected static function fetchSelectUsers($select_name, $field, $value_function)\n    {\n        $hp       = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $html    .= '<input type=\"hidden\" name=\"' . $select_name . '\" value=\"\" />';\n        $html    .= '<select multiple=\"multiple\" name=\"' . $select_name . '\">\n                  <option value=\"\">' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n        $selected = \"\";\n        if (in_array(\"artifact_submitters\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"artifact_submitters\" ' . $selected . '>' . dgettext('tuleap-tracker', 'Artifact submitters') . '</option>';\n\n        $selected   = \"\";\n        $ugroup_res = ugroup_db_get_ugroup($GLOBALS['UGROUP_PROJECT_MEMBERS']);\n        $name       = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, 0, 'name'));\n        if (in_array(\"group_members\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"group_members\" ' . $selected . '>' . $hp->purify($name, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n\n        $selected   = \"\";\n        $ugroup_res = ugroup_db_get_ugroup($GLOBALS['UGROUP_PROJECT_ADMIN']);\n        $name       = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, 0, 'name'));\n        if (in_array(\"group_admins\", $value_function)) {\n            $selected = 'selected=\"selected\"';\n        }\n        $html .= '<option value=\"group_admins\" ' . $selected . '>' . $hp->purify($name, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n\n        /** @psalm-suppress DeprecatedFunction */\n        $ugroup_res = ugroup_db_get_existing_ugroups(100);\n        $rows       = db_numrows($ugroup_res);\n        for ($i = 0; $i < $rows; $i++) {\n            $ug       = db_result($ugroup_res, $i, 'ugroup_id');\n            $selected = \"\";\n            if (\n                ($ug == $GLOBALS['UGROUP_NONE']) ||\n                ($ug == $GLOBALS['UGROUP_ANONYMOUS']) ||\n                ($ug == $GLOBALS['UGROUP_PROJECT_MEMBERS']) ||\n                ($ug == $GLOBALS['UGROUP_PROJECT_ADMIN']) ||\n                ($ug == $GLOBALS['UGROUP_TRACKER_ADMIN'])\n            ) {\n                   continue;\n            }\n\n            $ugr = \"ugroup_\" . $ug;\n            if (in_array($ugr, $value_function)) {\n                $selected = 'selected=\"selected\"';\n            }\n            $html .= '<option value=\"' . $ugr . '\" ' . $selected . '>' . $hp->purify(\\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, $i, 'name')), CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n        }\n\n        $group_id = $field->getTracker()->getGroupId();\n        if ($group_id != 100) {\n            /** @psalm-suppress DeprecatedFunction */\n            $ugroup_res = ugroup_db_get_existing_ugroups($group_id);\n            $rows       = db_numrows($ugroup_res);\n            for ($i = 0; $i < $rows; $i++) {\n                $selected = \"\";\n                $ug       = db_result($ugroup_res, $i, 'ugroup_id');\n                $ugr      = \"ugroup_\" . $ug;\n                if (in_array($ugr, $value_function)) {\n                    $selected = 'selected=\"selected\"';\n                }\n                $html .= '<option value=\"' . $ugr . '\" ' . $selected . '>' . $hp->purify(\\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) db_result($ugroup_res, $i, 'name')), CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n            }\n        }\n        $html .= '</select>';\n        return $html;\n    }\n\n    /**\n     * Process the request\n     *\n     * @param array $params the request parameters\n     * @param bool  $no_redirect true if we do not have to redirect the user\n     *\n     * @return void\n     */\n    public function process($params, $no_redirect = false)\n    {\n        foreach ($params as $key => $value) {\n            switch ($key) {\n                case 'value_function':\n                    if (is_array($value) && $this->value_function != $value) {\n                        if ($this->getDao()->save($this->field->getId(), $value)) {\n                            $this->value_function = $value;\n                            if (! $no_redirect) {\n                                $GLOBALS['Response']->addFeedback('info', 'Values updated');\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        return parent::process($params, $no_redirect);\n    }\n\n    protected function filterDefaultValues(array $bind_default): array\n    {\n        if (empty($bind_default)) {\n            return $bind_default;\n        }\n\n        if (! $this->field instanceof Tracker_FormElement_Field_OpenList) {\n            return parent::filterDefaultValues($bind_default);\n        }\n\n        $bind_default = explode(',', $bind_default[0]);\n        foreach ($bind_default as $key => $value) {\n            $bind_default[$key] = str_replace(Tracker_FormElement_Field_OpenList::BIND_PREFIX, '', $value);\n        }\n\n        return parent::filterDefaultValues($bind_default);\n    }\n\n    /**\n     * Transforms Bind into a SimpleXMLElement\n     */\n    public function exportToXml(\n        SimpleXMLElement $root,\n        &$xmlMapping,\n        $project_export_context,\n        UserXMLExporter $user_xml_exporter,\n    ) {\n        if ($this->value_function) {\n            $child = $root->addChild('items');\n            foreach ($this->value_function as $vf) {\n                if ($vf) {\n                    $child->addChild('item')->addAttribute('label', $vf);\n                }\n            }\n\n            if ($project_export_context) {\n                $default_values_root = $root->addChild('default_values');\n                foreach ($this->default_values as $user_id => $default_value) {\n                    $user_xml_exporter->exportUserByUserId($user_id, $default_values_root, 'value');\n                }\n            }\n        }\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (static::class == 'Tracker_FormElement_Field_Text') {\n                if (! (isset($this->default_properties['rows']) && isset($this->default_properties['cols']))) {\n                    var_dump($this, 'Properties must be \"rows\" and \"cols\"');\n                    return false;\n                }\n            } elseif (static::class == 'Tracker_FormElement_Field_String') {\n                if (! (isset($this->default_properties['maxchars']) && isset($this->default_properties['size']))) {\n                    var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is null then return all values.\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return array the BindValue(s)\n     */\n    public function getBindValues($bindvalue_ids = null)\n    {\n        $values = $this->getAllValuesWithActiveUsersOnly();\n        if ($bindvalue_ids === null) {\n            return $values;\n        } else {\n            return $this->extractBindValuesByIds($values, $bindvalue_ids);\n        }\n    }\n\n    /**\n     * Give an extract of the bindvalues defined. The extract is based on $bindvalue_ids.\n     * If the $bindvalue_ids is empty then return empty array\n     *\n     * @param array $bindvalue_ids The ids of BindValue to retrieve\n     *\n     * @Return Tracker_FormElement_Field_List_BindValue[]\n     */\n    public function getBindValuesForIds(array $bindvalue_ids)\n    {\n        $values = $this->getValuesCollectionContainingIds($bindvalue_ids);\n\n        return $this->extractBindValuesByIds($values, $bindvalue_ids);\n    }\n\n    /**\n     * @return Tracker_FormElement_Field_List_BindValue[]\n     */\n    private function extractBindValuesByIds(array $values, array $bindvalue_ids)\n    {\n        $list_of_bindvalues = [];\n        foreach ($bindvalue_ids as $i) {\n            if (isset($values[$i])) {\n                $list_of_bindvalues[$i] = $values[$i];\n            } else {\n                // User not found in the binded ugroup. Look for users that are either:\n                //  1. not anymore active\n                //  2. not member of the binded ugroup\n                $value = $this->getAdditionnalValue($i);\n                if ($value) {\n                    $list_of_bindvalues[$i] = $value;\n                }\n            }\n        }\n        return $list_of_bindvalues;\n    }\n\n    /**\n     * Saves a bind in the database\n     *\n     * @return void\n     */\n    public function saveObject()\n    {\n        $dao = new BindUsersDao();\n        $dao->save($this->field->getId(), $this->getValueFunction());\n        parent::saveObject();\n    }\n\n    /**\n     * Get a recipients list for notifications. This is filled by users fields for example.\n     *\n     * @param Tracker_Artifact_ChangesetValue_List $changeset_value The changeset\n     *\n     * @return string[]\n     */\n    public function getRecipients(Tracker_Artifact_ChangesetValue_List $changeset_value)\n    {\n        $recipients = [];\n        foreach ($changeset_value->getListValues() as $user_value) {\n            if ($user_value->getId() != 100) {\n                $recipients[] = $user_value->getUsername();\n            }\n        }\n        return $recipients;\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    public function isValid($value)\n    {\n        if ($value) {\n            $values = explode(',', $value);\n            foreach ($values as $v) {\n                if (stripos($v, '!') !== false) {\n                    //we check the string is an email\n                    $rule = new Rule_Email();\n                    if (! $rule->isValid($v)) {\n                        //we check the string correspond to a username\n                        if (! $this->userManager->getUserByIdentifier(substr($v, 1))) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field_Shareable\n     */\n    public function fixOriginalValueIds(array $value_mapping)\n    {\n        // Nothing to do: user value ids stay the same accross projects.\n    }\n\n    public function getNumericValues(Tracker_Artifact_ChangesetValue $changeset_value)\n    {\n        // returns an empty array as it doesn't make sense with Users\n        return [];\n    }\n\n    public function getType()\n    {\n        return self::TYPE;\n    }\n\n    protected function getRESTBindValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $user_representation = new UserListValueRepresentation();\n        assert($value instanceof Tracker_FormElement_Field_List_Bind_UsersValue);\n        $user_representation->build($value);\n\n        $representation = new FieldListBindUserValueRepresentation();\n        $representation->build($value, $user_representation);\n\n        return $representation;\n    }\n\n    public function getDefaultRESTValues()\n    {\n        $bind_values = $this->getBindValuesForIds(array_keys($this->getDefaultValues()));\n\n        $rest_array = [];\n        foreach ($bind_values as $value) {\n            $representation = \\Tuleap\\User\\REST\\UserRepresentation::build($value->getUser());\n            $rest_array[]   = $representation;\n        }\n        return $rest_array;\n    }\n\n    public function getFieldDataFromRESTObject(array $rest_data, Tracker_FormElement_Field_List $field)\n    {\n        if (isset($rest_data['id']) && is_numeric($rest_data['id'])) {\n            $id   = (int) $rest_data['id'];\n            $user = $this->getValue($id);\n\n            if (! $user) {\n                throw new Tracker_FormElement_InvalidFieldValueException('Cannot Bind to user with ID ' . $id . ' for field ID ' . $field->getId());\n            }\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $id;\n        }\n\n        if (isset($rest_data['username'])) {\n            $identifier = (string) $rest_data['username'];\n            $user       = $this->userManager->getUserByIdentifier($identifier);\n\n            if (! $user) {\n                throw new Tracker_FormElement_InvalidFieldValueException('Cannot Bind to user \"' . $identifier . '\" for field ID ' . $field->getId());\n            }\n\n            return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $user->getId();\n        }\n\n        if (! isset($rest_data['email'])) {\n            throw new Tracker_FormElement_InvalidFieldValueException('OpenList user fields values should be passed as an object with at least one of the properties \"id\", \"username\" or \"email\"');\n        }\n\n        $identifier = (string) $rest_data['email'];\n        $user       = $this->userManager->getUserByIdentifier(\"email:$identifier\");\n\n        if (! $user) {\n            return Tracker_FormElement_Field_OpenList::NEW_VALUE_PREFIX . $identifier;\n        }\n        return Tracker_FormElement_Field_OpenList::BIND_PREFIX . $user->getId();\n    }\n\n    public function getFullRESTValue(Tracker_FormElement_Field_List_Value $value)\n    {\n        $user_manager = UserManager::instance();\n        $user         = $user_manager->getUserByUserName($value->getLabel());\n        if (! $user) {\n            $user = new PFUser();\n            $user->setEmail($value->getLabel());\n        }\n\n        return UserRepresentation::build($user);\n    }\n\n    public function accept(BindVisitor $visitor, BindParameters $parameters)\n    {\n        return $visitor->visitListBindUsers($this, $parameters);\n    }\n\n    /**\n     * @param int $bindvalue_id\n     * @return Tracker_FormElement_Field_List_BindValue\n     */\n    public function getBindValueById($bindvalue_id)\n    {\n        return new Tracker_FormElement_Field_List_Bind_UsersValue($bindvalue_id);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\ArtifactTimeframeHelper;\nuse Tuleap\\Tracker\\Semantic\\Timeframe\\SemanticTimeframeBuilder;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nabstract class Tracker_FormElement_Field_Numeric extends Tracker_FormElement_Field_Alphanum implements Tracker_FormElement_IComputeValues\n{\n    public $default_properties = [\n        'maxchars'      => [\n            'value' => 0,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'size'          => [\n            'value' => 5,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'string',\n            'size'  => 40,\n        ],\n    ];\n\n    public function getComputedValue(\n        PFUser $user,\n        Artifact $artifact,\n        $timestamp = null,\n    ) {\n        if ($this->userCanRead($user)) {\n            if ($timestamp !== null) {\n                return $this->getComputedValueAt($artifact, $timestamp);\n            } else {\n                return $this->getCurrentComputedValue($artifact);\n            }\n        }\n    }\n\n    /**\n     * @param PFUser             $user\n     * @param int              $timestamp\n     *\n     * @return mixed\n     */\n    private function getComputedValueAt(Artifact $artifact, $timestamp)\n    {\n        $row = $this->getValueDao()->getValueAt($artifact->getId(), $this->getId(), $timestamp);\n        return $row['value'];\n    }\n\n    /**\n     * @param PFUser             $user\n     *\n     * @return mixed\n     */\n    private function getCurrentComputedValue(Artifact $artifact)\n    {\n        $row = $this->getValueDao()->getLastValue($artifact->getId(), $this->getId());\n        if ($row) {\n            return $row['value'];\n        }\n        return 0;\n    }\n\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS \" . $this->getQuerySelectName();\n    }\n\n    /**\n     * Fetch sql snippets needed to compute aggregate functions on this field.\n     *\n     * @param array $functions The needed function. @see getAggregateFunctions\n     *\n     * @return array of the form array('same_query' => string(sql snippets), 'separate' => array(sql snippets))\n     *               example:\n     *               array(\n     *                   'same_query'       => \"AVG(R2_1234.value) AS velocity_AVG, STD(R2_1234.value) AS velocity_AVG\",\n     *                   'separate_queries' => array(\n     *                       array(\n     *                           'function' => 'COUNT_GRBY',\n     *                           'select'   => \"R2_1234.value AS label, count(*) AS value\",\n     *                           'group_by' => \"R2_1234.value\",\n     *                       ),\n     *                       //...\n     *                   )\n     *              )\n     *\n     *              Same query handle all queries that can be run concurrently in one query. Example:\n     *               - numeric: avg, count, min, max, std, sum\n     *               - selectbox: count\n     *              Separate queries handle all queries that must be run spearately on their own. Example:\n     *               - numeric: count group by\n     *               - selectbox: count group by\n     *               - multiselectbox: all (else it breaks other computations)\n     */\n    public function getQuerySelectAggregate($functions)\n    {\n        $R1       = 'R1_' . $this->id;\n        $R2       = 'R2_' . $this->id;\n        $same     = [];\n        $separate = [];\n        foreach ($functions as $f) {\n            if (in_array($f, $this->getAggregateFunctions())) {\n                if (substr($f, -5) === '_GRBY') {\n                    $separate[] = [\n                        'function' => $f,\n                        'select'   => \"$R2.value AS label, count(*) AS value\",\n                        'group_by' => \"$R2.value\",\n                    ];\n                } else {\n                    $same[] = \"$f($R2.value) AS `\" . $this->name . \"_$f`\";\n                }\n            }\n        }\n        return [\n            'same_query'       => implode(', ', $same),\n            'separate_queries' => $separate,\n        ];\n    }\n\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return ['AVG', 'COUNT', 'COUNT_GRBY', 'MAX', 'MIN', 'STD', 'SUM'];\n    }\n\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $expr = parent::buildMatchExpression($field_name, $criteria_value);\n        if (! $expr) {\n            $matches = [];\n            if (preg_match(\"/^(<|>|>=|<=)\\s*($this->pattern)$/\", $criteria_value, $matches)) {\n                // It's < or >,  = and a number then use as is\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' ' . $matches[1] . ' ' . $matches[2];\n            } elseif (preg_match(\"/^($this->pattern)$/\", $criteria_value, $matches)) {\n                // It's a number so use  equality\n                $matches[1] = $this->cast($matches[1]);\n                $expr       = $field_name . ' = ' . $matches[1];\n            } elseif (preg_match(\"/^($this->pattern)\\s*-\\s*($this->pattern)$/\", $criteria_value, $matches)) {\n                // it's a range number1-number2\n                $matches[1] = (string) ($this->cast($matches[1]));\n                $matches[2] = (string) ($this->cast($matches[2]));\n                $expr       = $field_name . ' >= ' . $matches[1] . ' AND ' . $field_name . ' <= ' . $matches[2];\n            } else {\n                // Invalid syntax - no condition\n                $expr = '1';\n            }\n        }\n        return $expr;\n    }\n\n    protected $pattern = '[+\\-]*[0-9]+';\n    protected function cast($value)\n    {\n        return (int) $value;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $html  = '';\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         data-test=\"' . $hp->purify($this->getName()) . '\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html  = '';\n        $value = dgettext('tuleap-tracker', 'Unchanged');\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $html = '';\n        if (isset($submitted_values[$this->getId()])) {\n            $value = $submitted_values[$this->getId()];\n        } else {\n            if ($value != null) {\n                $value = $value->getValue();\n            }\n        }\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         name=\"artifact[' . $this->id . ']\"\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || ! $value->getNumeric()) {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getNumeric();\n                $output = $value;\n                break;\n        }\n        return $output;\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if ($value === null) {\n            return $this->getNoValueLabel();\n        }\n\n        $numeric_value = $value->getValue();\n        if ($numeric_value === null) {\n            return $this->getNoValueLabel();\n        }\n\n        $hp = Codendi_HTMLPurifier::instance();\n\n        $html_value = $hp->purify($numeric_value, CODENDI_PURIFIER_CONVERT_HTML);\n\n        $user              = $this->getCurrentUser();\n        $time_frame_helper = $this->getArtifactTimeframeHelper();\n\n        if ($time_frame_helper->artifactHelpShouldBeShownToUser($user, $this)) {\n            $html_value = $html_value . '<span class=\"artifact-timeframe-helper\"> (' . $time_frame_helper->getEndDateArtifactHelperForReadOnlyView($user, $artifact) . ')</span>';\n        }\n\n        return $html_value;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return $old_value->getNumeric() !== $new_value;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '';\n        $value = '';\n        if ($this->hasDefaultValue()) {\n            $value = $this->getDefaultValue();\n        }\n        $html .= '<input type=\"text\"\n                         size=\"' . $this->getProperty('size') . '\"\n                         ' . ($this->getProperty('maxchars') ? 'maxlength=\"' . $this->getProperty('maxchars') . '\"' : '')  . '\n                         value=\"' .  $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML)  . '\" autocomplete=\"off\" />';\n        return $html;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return $this->validateValue($value);\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param mixed            $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function validateValue($value)\n    {\n        if ($value !== null && ! is_string($value) && ! is_int($value) && ! is_float($value)) {\n            $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            return false;\n        }\n        if ($value && ! preg_match('/^' . $this->pattern . '$/', $value)) {\n            $GLOBALS['Response']->addFeedback('error', $this->getValidatorErrorMessage());\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @return string the i18n error message to display if the value submitted by the user is not valid\n     */\n    abstract protected function getValidatorErrorMessage();\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (! ($this->default_properties['maxchars'] && $this->default_properties['size'])) {\n                var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCachedValue(PFUser $user, Artifact $artifact, $timestamp = null)\n    {\n        return $this->getComputedValue($user, $artifact, $timestamp);\n    }\n\n    protected function getArtifactTimeframeHelper(): ArtifactTimeframeHelper\n    {\n        return new ArtifactTimeframeHelper(\n            SemanticTimeframeBuilder::build(),\n            \\BackendLogger::getDefaultLogger()\n        );\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2017-Present. All rights reserved\n * Copyright (c) Tuleap, 2013. All Rights Reserved.\n *\n * Originally written by Yoann Celton, 2013. Jtekt Europe.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation;\n\nclass Tracker_FormElement_Field_PerTrackerArtifactId extends Tracker_FormElement_Field_ArtifactId\n{\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression(\"artifact.per_tracker_artifact_id\", $criteria_value);\n        }\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        return \"a.per_tracker_artifact_id AS \" . $this->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        return \"a.per_tracker_artifact_id\";\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $from_aid_content = \"\";\n        if ($from_aid != null) {\n            $from_aid_content = \"&from_aid=$from_aid\";\n        }\n\n        return '<a class=\"direct-link-to-artifact\" href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact_id]) . '\" $from_aid_content>' . $value . '</a>';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $changeset->getArtifact()->getPerTrackerArtifactId()\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<a href=\"' . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">' . (int) $artifact->getPerTrackerArtifactId() . '</a>';\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<a href=\"' . \\Tuleap\\ServerHostname::HTTPSUrl() . TRACKER_BASE_URL . '/?' . http_build_query(['aid' => (int) $artifact->id]) . '\">' . $artifact->getPerTrackerArtifactId() . '</a>';\n                break;\n            default:\n                $output .= $artifact->getPerTrackerArtifactId();\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<a href=\"#' . TRACKER_BASE_URL . '/?aid=123\" onclick=\"return false;\">3</a>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Per tracker id');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the in-tracker numerotation');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-perTrackerId.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-perTrackerId--plus.png');\n    }\n\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html  = '';\n        $html .= $artifact->getPerTrackerArtifactId();\n        return $html;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPerTrackerArtifactId($this);\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Project\\REST\\UserGroupRepresentation;\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\ChangesChecker;\nuse Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\PermissionsOnArtifactFieldValueDao;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUGroupRetriever;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUsageFormatter;\nuse Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactValidator;\nuse Tuleap\\Tracker\\REST\\v1\\TrackerFieldsRepresentations\\PermissionsOnArtifacts;\nuse Tuleap\\User\\UserGroup\\NameTranslator;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_PermissionsOnArtifact extends Tracker_FormElement_Field\n{\n    public const GRANTED_GROUPS     = 'granted_groups';\n    public const USE_IT             = 'use_artifact_permissions';\n    public const IS_USED_BY_DEFAULT = false;\n    public const PERMISSION_TYPE    = 'PLUGIN_TRACKER_ARTIFACT_ACCESS';\n\n    public $default_properties = [];\n\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n    }\n\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     *\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    /**\n     * @return string\n     */\n    private function fetchChangesetRegardingPermissions($artifact_id, $changeset_id)\n    {\n        $values   = [];\n        $artifact = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n        if ($artifact->useArtifactPermissions()) {\n            $dao = new Tracker_Artifact_Changeset_ValueDao();\n            $row = $dao->searchByFieldId($changeset_id, $this->id);\n            if ($row === null) {\n                return '';\n            }\n            $changeset_value_id = $row['id'];\n\n            foreach ($this->getValueDao()->searchById($changeset_value_id) ?: [] as $value) {\n                $values[] = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) $value['ugroup_name']);\n            }\n\n            return implode(',', $values);\n        }\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);\n    }\n\n    /**\n     * Fetch the value\n     * @param mixed $value the value of the field\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return $this->values[$value]->getLabel();\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n   /**\n    * Returns the PermissionsOnArtifactDao\n    *\n    * @return PermissionsOnArtifactFieldValueDao The dao\n    */\n    protected function getValueDao()\n    {\n        return new PermissionsOnArtifactFieldValueDao();\n    }\n\n    private function getPermissionsOnArtifactUsageRetriever()\n    {\n        return new PermissionsOnArtifactUsageFormatter($this->getPermissionsValidator());\n    }\n\n    /**\n     * @param array $submitted_values\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n        $value = $this->getPermissionsOnArtifactUGroupRetriever()->initializeUGroupsIfNoUGroupsAreChoosen($value);\n\n        $is_disabled = false;\n        $is_checked  = ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true);\n\n        return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $is_checked  = false;\n        $is_disabled = false;\n\n        return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_read_only = false;\n        return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output    = '';\n        $separator = '&nbsp;';\n        if ($format == 'text') {\n            $separator = PHP_EOL;\n            $output   .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:');\n        }\n\n        $ugroups = permission_fetch_selected_ugroups(self::PERMISSION_TYPE, $artifact->getId(), $this->getTracker()->getGroupId());\n        $output .= $separator . implode(', ', $ugroups);\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $is_read_only = true;\n        return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, []);\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition(\n            $artifact,\n            $value,\n            $submitted_values\n        );\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $is_field_frozen = $this->getFrozenFieldDetector()->isFieldFrozen($artifact, $this);\n\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $this->getId() . '\">' .\n                $this->fetchArtifactValueCommon($is_field_frozen, $artifact, $value, $submitted_values) .\n            '</div>';\n    }\n\n    private function getArtifactValueHTML($artifact_id, $can_user_restrict_permissions_to_nobody, $is_read_only)\n    {\n        $changeset_values   = $this->getLastChangesetValues($artifact_id);\n        $is_expecting_input = $this->isRequired() && empty($changeset_values);\n\n        $html  = $this->fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $is_read_only, $is_expecting_input);\n        $html .= $this->fetchUserGroupList($is_read_only, $changeset_values);\n\n        return $html;\n    }\n\n    private function fetchUserGroupList($is_read_only, array $changeset_values)\n    {\n        $field_id     = $this->getId();\n        $element_name = 'artifact[' . $field_id . '][u_groups][]';\n\n        $hp    = Codendi_HTMLPurifier::instance();\n        $html  = '<select '\n            . 'name=\"' . $hp->purify($element_name) . '\" '\n            . 'id=\"' . $hp->purify(str_replace('[]', '', $element_name)) . '\" '\n            . 'multiple '\n            . 'size=\"8\" '\n            . (($this->isRequired()) ? 'required=\"required\"' : '' )\n            . (($is_read_only) ? 'disabled=\"disabled\"' : '' )\n            . '>';\n        $html .= $this->getOptions($this->getAllUserGroups(), $changeset_values);\n        $html .= '</select>';\n\n        return $html;\n    }\n\n    private function getLastChangesetValues($artifact_id)\n    {\n        $user_group_ids = [];\n\n        $db_res = permission_db_authorized_ugroups(self::PERMISSION_TYPE, $artifact_id);\n        while ($row = db_fetch_array($db_res)) {\n            $user_group_ids[] = $row['ugroup_id'];\n        }\n\n        return $user_group_ids;\n    }\n\n    /**\n     * @see fetchArtifactValueReadOnly\n     * @see fetchArtifactValue\n     *\n     * @param bool                            $is_read_only\n     * @param array                           $submitted_values\n     *\n     * @return string html\n     */\n    protected function fetchArtifactValueCommon(\n        $is_read_only,\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        if (isset($submitted_values[$this->getId()]) && is_array($submitted_values[$this->getId()])) {\n            $is_checked = $this->getPermissionsValidator()->isArtifactPermissionChecked($submitted_values[$this->getId()]);\n        } else {\n            $is_checked = $artifact->useArtifactPermissions();\n        }\n\n        return $this->getArtifactValueHTML($artifact->getId(), $is_checked, $is_read_only);\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchAdminFormElement()\n    {\n        $changeset_values = $this->getLastChangesetValues(0);\n\n        $html  = $this->fetchRestrictCheckbox(false, true, false);\n        $html .= $this->fetchUserGroupList(true, $changeset_values);\n\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Permissions on artifact');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Allow user to give permissions to an artefact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock--plus.png');\n    }\n\n    /**\n     * @return bool say if the field is a unique one\n     */\n    public static function getFactoryUniqueField()\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_PermissionsOnArtifact $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if ($value && $artifact->useArtifactPermissions()) {\n            $ugroup_dao = $this->getUGroupDao();\n\n            $perms      = $value->getPerms();\n            $perms_name = [];\n            foreach ($perms as $perm) {\n                $row          = $ugroup_dao->searchByUGroupId($perm)->getRow();\n                $perms_name[] = \\Tuleap\\User\\UserGroup\\NameTranslator::getUserGroupDisplayKey((string) $row['name']);\n            }\n            $html .= implode(\",\", $perms_name);\n        }\n        return $html;\n    }\n\n   /**\n    * Returns the UGroupDao\n    *\n    * @return UGroupDao The dao\n    */\n    protected function getUGroupDao()\n    {\n        return new UGroupDao(CodendiDataAccess::instance());\n    }\n\n   /**\n    * Get the \"from\" statement to allow search with this field\n    * You can join on 'c' which is a pseudo table used to retrieve\n    * the last changeset of all artifacts.\n    *\n    * @param Tracker_Report_Criteria $criteria\n    *\n    * @return string\n    */\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            $criteria_value = $this->getCriteriaValue($criteria);\n            if ($criteria_value && count($criteria_value) === 1 && array_key_exists(\"100\", $criteria_value)) {\n                $a    = 'A_' . $this->id;\n                $b    = 'B_' . $this->id;\n                 $sql = \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = \" . $this->id . \")\n                          INNER JOIN tracker_artifact AS $b ON ($b.last_changeset_id = $a.changeset_id AND\n                            $b.use_artifact_permissions = 0) \";\n                return $sql;\n            } elseif ($criteria_value) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                $c = 'C_' . $this->id;\n\n                $ugroup_ids = CodendiDataAccess::instance()->escapeIntImplode(array_keys($criteria_value));\n\n                $sql = \" INNER JOIN tracker_changeset_value AS $a ON ($a.changeset_id = c.id AND $a.field_id = \" . $this->id . \")\n                         INNER JOIN tracker_changeset_value_permissionsonartifact AS $b ON ($b.changeset_value_id = $a.id\n                            AND $b.ugroup_id IN ($ugroup_ids)\n                      )\";\n                return $sql;\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n\n    public function getQueryFrom()\n    {\n        return '';\n    }\n\n     /**\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        return '';\n    }\n\n    /**\n     * Search in the db the criteria value used to search against this field.\n     * @param Tracker_Report_Criteria $criteria\n     * @return mixed\n     */\n    public function getCriteriaValue($criteria)\n    {\n        if (! isset($this->criteria_value)) {\n            $this->criteria_value = [];\n        }\n\n        if (isset($this->criteria_value[$criteria->report->id]) && $this->criteria_value[$criteria->report->id]) {\n            $values                                      = $this->criteria_value[$criteria->report->id];\n            $this->criteria_value[$criteria->report->id] = [];\n\n            foreach ($values as $value) {\n                foreach ($value as $v) {\n                    if ($v != '') {\n                        $this->criteria_value[$criteria->report->id][$v] = $value;\n                    } else {\n                        return '';\n                    }\n                }\n            }\n        } elseif (! isset($this->criteria_value[$criteria->report->id])) {\n            $this->criteria_value[$criteria->report->id] = [];\n            $dao                                         = $this->getCriteriaDao();\n            if ($dao !== null) {\n                foreach ($dao->searchByCriteriaId($criteria->id) as $row) {\n                    $this->criteria_value[$criteria->report->id][$row['value']] = $row;\n                }\n            }\n        }\n\n        return $this->criteria_value[$criteria->report->id];\n    }\n\n    public function exportCriteriaValueToXML(Tracker_Report_Criteria $criteria, SimpleXMLElement $xml_criteria)\n    {\n        return;\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function fetchCriteriaValue($criteria)\n    {\n        $html           = '';\n        $criteria_value = $this->getCriteriaValue($criteria);\n        $multiple       = ' ';\n        $size           = ' ';\n        $name           = \"criteria[$this->id][values][]\";\n\n        $user_groups = $this->getAllUserGroups();\n\n        if (! $user_groups) {\n            $html .= \"<p><b>\" . $GLOBALS['Language']->getText('global', 'error') . \"</b>: \" . $GLOBALS['Language']->getText('project_admin_permissions', 'perm_type_not_def', '');\n            return $html;\n        }\n\n        if ($criteria->is_advanced) {\n            $multiple = ' multiple=\"multiple\" ';\n            $size     = ' size=\"' . min(7, count($user_groups) + 2) . '\" ';\n        }\n\n        $html .= '<select id=\"tracker_report_criteria_' . ($criteria->is_advanced ? 'adv_' : '') . $this->id . '\"\n                          name=\"' . $name . '\" ' .\n                          $size .\n                          $multiple . '>';\n        //Any value\n        $selected = ($criteria_value !== '' && count($criteria_value)) ? '' : 'selected=\"selected\"';\n        $html    .= '<option value=\"\" ' . $selected . '>' . $GLOBALS['Language']->getText('global', 'any') . '</option>';\n        //None value\n        $selected = isset($criteria_value[100]) ? 'selected=\"selected\"' : '';\n        $html    .= '<option value=\"100\" ' . $selected . '>' . $GLOBALS['Language']->getText('global', 'none') . '</option>';\n\n        if (! is_array($criteria_value)) {\n            $criteria_value = [];\n        }\n\n        $html .= $this->getOptions($user_groups, array_keys($criteria_value));\n        $html .= '</select>';\n        return $html;\n    }\n\n    private function getOptions($user_groups, $selected_ids = [])\n    {\n        $options = '';\n        foreach ($user_groups as $user_group) {\n            $id       = $user_group->getId();\n            $selected = (in_array($id, $selected_ids)) ? 'selected=\"selected\"' : '';\n            $options .= '<option value=\"' . $id . '\" ' . $selected . '>';\n            $options .= NameTranslator::getUserGroupDisplayName($user_group->getName());\n            $options .= '</option>';\n        }\n\n        return $options;\n    }\n\n    /**\n     * @return ProjectUGroup[]\n     */\n    private function getAllUserGroups()\n    {\n        $user_groups     = [];\n        $permission_type = self::PERMISSION_TYPE;\n\n        $sql = \"SELECT ugroup_id FROM permissions_values WHERE permission_type='$permission_type'\";\n        $res = db_query($sql);\n\n        $predefined_ugroups = '';\n        if (db_numrows($res) < 1) {\n            return $user_groups;\n        } else {\n            while ($row = db_fetch_array($res)) {\n                if ($predefined_ugroups) {\n                    $predefined_ugroups .= ' ,';\n                }\n                $predefined_ugroups .= db_ei($row['ugroup_id']);\n            }\n        }\n\n        $sql = \"SELECT * FROM ugroup WHERE group_id=\" . db_ei($this->getTracker()->getGroupId()) . \" OR ugroup_id IN (\" . $predefined_ugroups . \") ORDER BY ugroup_id\";\n        $res = db_query($sql);\n\n        while ($row = db_fetch_array($res)) {\n            $user_groups[] = new ProjectUGroup($row);\n        }\n\n        return $user_groups;\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_PermissionsOnArtifact_ValueDao();\n    }\n\n    /**\n     * @param mixed            $value\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        if ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true) {\n            return $this->getPermissionsValidator()->isNoneGroupSelected($value) === false;\n        }\n\n        return $this->getPermissionsValidator()->hasAGroupSelected($value);\n    }\n\n    /**\n     * @param mixed $submitted_value\n     *\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        if ($last_changeset_value === null && $this->isRequired() === true && $this->isAtLeastOneUGroupSelected($submitted_value) === false) {\n            $this->addRequiredError();\n\n            return false;\n        }\n\n        if ($this->isSelectBoxChecked($submitted_value) === false) {\n            return true;\n        }\n\n        if ($this->isAtLeastOneUGroupSelected($submitted_value) === false) {\n            $this->addRequiredError();\n\n            return false;\n        }\n\n        return true;\n    }\n\n    private function isAtLeastOneUGroupSelected($submitted_value)\n    {\n        return isset($submitted_value['u_groups']) === true && count($submitted_value['u_groups']) > 0;\n    }\n\n    private function isSelectBoxChecked($submitted_value): bool\n    {\n        return (isset($submitted_value['use_artifact_permissions']) === true && (bool) $submitted_value['use_artifact_permissions'] === true);\n    }\n\n    private function getPermissionsValidator()\n    {\n        return new PermissionsOnArtifactValidator();\n    }\n\n    private function getPermissionsOnArtifactUGroupRetriever()\n    {\n        return new PermissionsOnArtifactUGroupRetriever();\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $value = $this->getPermissionsOnArtifactUsageRetriever()->setRestrictAccessForArtifact($value, $this);\n        $value = $this->getPermissionsOnArtifactUGroupRetriever()->initializeUGroupsIfNoUGroupsAreChoosenWithRequiredCondition($value, $this);\n        $value = $this->getPermissionsOnArtifactUsageRetriever()->alwaysUseRestrictedPermissionsForRequiredField($value, $this);\n\n        $artifact->setUseArtifactPermissions($value[self::USE_IT]);\n        permission_clear_all($this->getTracker()->getGroupId(), self::PERMISSION_TYPE, $artifact->getId(), false);\n\n        if (! empty($value['u_groups'])) {\n            $this->addPermissions($value['u_groups'], $artifact->getId());\n\n            return $this->getValueDao()->create($changeset_value_id, $value[self::USE_IT], $value['u_groups']);\n        }\n\n        return true;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        assert($old_value instanceof Tracker_Artifact_ChangesetValue_PermissionsOnArtifact);\n        return (new ChangesChecker())->hasChanges($old_value, $new_value);\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the previous one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $value_ids = $this->getValueDao()->searchById($value_id) ?: [];\n        $ugroups   = [];\n\n        foreach ($value_ids as $v) {\n            $ugroups[(int) $v['ugroup_id']] = $v['ugroup_name'];\n        }\n\n        return new Tracker_Artifact_ChangesetValue_PermissionsOnArtifact($value_id, $changeset, $this, $has_changed, $changeset->getArtifact()->useArtifactPermissions(), $ugroups);\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n        if (isset($value['value'][self::GRANTED_GROUPS])) {\n            if (\n                isset($value['value']['is_used_by_default']) === true\n                && $value['value']['is_used_by_default'] === true\n                && count($value['value'][self::GRANTED_GROUPS]) === 0\n            ) {\n                throw new Tracker_FormElement_InvalidFieldException(\n                    'Permission field is required please choose a group in list'\n                );\n            }\n\n            $user_groups = $this->getUserGroupsFromREST($value['value'][self::GRANTED_GROUPS]);\n\n            return $this->getFieldDataFromArray($user_groups);\n        }\n        throw new Tracker_FormElement_InvalidFieldException(\n            'Permission field values must be passed as an array of ugroup ids e.g. \"value\" : {\"granted_groups\" : [158, \"142_3\"]}'\n        );\n    }\n\n    /**\n     * @return int[]\n     * @throws Tracker_FormElement_InvalidFieldException\n     */\n    private function getUserGroupsFromREST($user_groups)\n    {\n        if (! is_array($user_groups)) {\n            throw new Tracker_FormElement_InvalidFieldException(\"'granted_groups' must be an array. E.g. [2, '124_3']\");\n        }\n\n        $project_groups = [];\n        foreach ($user_groups as $user_group) {\n            try {\n                UserGroupRepresentation::checkRESTIdIsAppropriate($user_group);\n                $value = UserGroupRepresentation::getProjectAndUserGroupFromRESTId($user_group);\n\n                if ($value['project_id'] && $value['project_id'] != $this->getTracker()->getProject()->getID()) {\n                    throw new Tracker_FormElement_InvalidFieldException('Invalid value \"' . $user_group . '\" for field ' . $this->getId());\n                }\n\n                $project_groups[] = $value['user_group_id'];\n            } catch (Exception $e) {\n                if (is_numeric($user_group) && $user_group < ProjectUGroup::DYNAMIC_UPPER_BOUNDARY) {\n                    $project_groups[] = $user_group;\n                } else {\n                    throw new Tracker_FormElement_InvalidFieldException($e->getMessage());\n                }\n            }\n        }\n\n        return $project_groups;\n    }\n\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        throw new Tracker_FormElement_RESTValueByField_NotImplementedException();\n    }\n\n     /**\n     * Get the field data for artifact submission\n     *\n     * @param string $value\n     *\n     * @return mixed the field data corresponding to the value for artifact submission\n     */\n    public function getFieldData($value)\n    {\n        return $this->getFieldDataFromArray(explode(',', $value));\n    }\n\n    private function getFieldDataFromArray(array $values)\n    {\n        $ugroup_ids = array_filter(array_map('intval', $values));\n        if (count($ugroup_ids) == 0) {\n            return [\n                self::USE_IT => 0,\n                'u_groups'   => [],\n            ];\n        } else {\n            return [\n                self::USE_IT => 1,\n                'u_groups'   => $ugroup_ids,\n            ];\n        }\n    }\n\n\n    /**\n     * @return bool\n     */\n    protected function criteriaCanBeAdvanced()\n    {\n        return true;\n    }\n\n    /**\n     * Adds permissions in the database\n     *\n     * @param Array $ugroups the list of ugroups\n     * @param int          $artifact_id  The id of the artifact\n     *\n     * @return bool\n     */\n    public function addPermissions($ugroups, $artifact_id)\n    {\n        $pm              = PermissionsManager::instance();\n        $permission_type = self::PERMISSION_TYPE;\n        foreach ($ugroups as $ugroup) {\n            if (! $pm->addPermission($permission_type, $artifact_id, $ugroup)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPermissionsOnArtifact($this);\n    }\n    /**\n     * Return REST value of a field for a given changeset\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value = $changeset->getValue($this);\n        if ($value) {\n            return $value->getFullRESTValue($user);\n        }\n    }\n\n    /**\n     * @return PermissionsOnArtifacts\n     */\n    public function getRESTAvailableValues()\n    {\n        $representation = new PermissionsOnArtifacts();\n        $project_id     = $this->getTracker()->getGroupId();\n        $representation->build($project_id, self::IS_USED_BY_DEFAULT, $this->getAllUserGroups());\n\n        return $representation;\n    }\n\n    /**\n     * @param bool $can_user_restrict_permissions_to_nobody\n     * @param bool $disabled\n     *\n     * @return string\n     */\n    private function fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $disabled, $is_expecting_input)\n    {\n        $empty_value_class = '';\n        if ($is_expecting_input) {\n            $empty_value_class = 'empty_value';\n        }\n\n        $html = '<p class=\"tracker_field_permissionsonartifact ' . $empty_value_class . '\">';\n        if ($this->isRequired() == false) {\n            if (! $disabled) {\n                $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\" value=\"0\" />';\n            }\n            $html .= '<label class=\"checkbox\" for=\"artifact_' . $this->getId() . '_use_artifact_permissions\">';\n            $html .= '<input type=\"checkbox\"\n                        name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\"\n                        id=\"artifact_' . $this->getId() . '_use_artifact_permissions\"\n                        value=\"1\" ' .\n                (($can_user_restrict_permissions_to_nobody == true) ? 'checked=\"checked\"' : '') .\n                (($disabled == true) ? 'disabled=\"disabled\"' : '') .\n                '/>';\n        } else {\n            $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId(\n            ) . '][use_artifact_permissions]\" value=\"1\" />';\n        }\n\n        $html .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:') . '</label>';\n        $html .= '</p>';\n\n        return $html;\n    }\n\n    public function isCSVImportable(): bool\n    {\n        return false;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2014-Present. All Rights Reserved.\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\n\nclass Tracker_FormElement_Field_Priority extends Tracker_FormElement_Field_Integer implements Tracker_FormElement_Field_ReadOnly\n{\n    /**\n     * @psalm-mutation-free\n     */\n    public function getLabel($report = null)\n    {\n        return $this->label;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        return ' INNER JOIN tracker_artifact_priority_rank ON artifact.id = tracker_artifact_priority_rank.artifact_id';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            return $this->buildMatchExpression('tracker_artifact_priority_rank.`rank`', $criteria_value);\n        }\n        return '';\n    }\n\n    /**\n     * @param null|Tracker_Report|int $report\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $value = $this->getArtifactRank($artifact_id);\n\n        if (! $report instanceof Tracker_Report) {\n            return $value;\n        }\n\n        $augmented_value = $this->getAugmentedFieldValue($artifact_id, $report);\n        if ($augmented_value) {\n            return $augmented_value;\n        }\n\n        return '<span class=\"non-displayable\" title=\"' . dgettext('tuleap-tracker', 'The rank of an artifact only exists in the context of a milestone. You must filter by milestone to view artifact ranks.') . '\">' . dgettext('tuleap-tracker', 'N/A') . '</span>';\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        $augmented_value = $this->getAugmentedFieldValue($artifact_id, $report);\n        if ($augmented_value) {\n            return $augmented_value;\n        }\n\n        return dgettext('tuleap-tracker', 'N/A');\n    }\n\n    private function getAugmentedFieldValue($artifact_id, Tracker_Report $report)\n    {\n        $result = '';\n\n        EventManager::instance()->processEvent(\n            TRACKER_EVENT_FIELD_AUGMENT_DATA_FOR_REPORT,\n            [\n                'additional_criteria' => $report->getAdditionalCriteria(),\n                'result'              => &$result,\n                'artifact_id'         => $artifact_id,\n                'field'               => $this,\n            ]\n        );\n\n        return $result;\n    }\n\n    /**\n     * Get the \"select\" statement to retrieve field values\n     * @see getQueryFrom\n     */\n    public function getQuerySelect(): string\n    {\n        return \"R_{$this->id}.rank AS \" . $this->getQuerySelectName();\n    }\n\n    /**\n     * Get the \"from\" statement to retrieve field values\n     * You can join on artifact AS a, tracker_changeset AS c\n     * which tables used to retrieve the last changeset of matching artifacts.\n     * @return string\n     */\n    public function getQueryFrom()\n    {\n        return \"INNER JOIN tracker_artifact_priority_rank AS R_{$this->id} ON a.id = R_{$this->id}.artifact_id\";\n    }\n    /**\n     * @return array the available aggreagate functions for this field. empty array if none or irrelevant.\n     */\n    public function getAggregateFunctions()\n    {\n        return [];\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '<span>' . $this->getArtifactRank($artifact->getID()) . '</span>';\n    }\n\n    private function getArtifactRank($artifact_id)\n    {\n        return $this->getPriorityManager()->getGlobalRank($artifact_id);\n    }\n\n    /**\n     * Fetch artifact value for email\n     * @param bool $ignore_perms\n     * @param string $format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output .= '<span>' . $this->getArtifactRank($artifact->getID()) . '</span>';\n                break;\n            default:\n                $output .= $this->getArtifactRank($artifact->getID());\n                break;\n        }\n        return $output;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return '<span>314116</span>';\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Rank');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Rank');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/priority.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/priority.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->getArtifactRank($artifact->getID());\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        return true;\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmit(array $submitted_values)\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the element for the submit new artifact form\n     *\n     * @return string html\n     */\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitPriority($this);\n    }\n\n    /**\n     * Return REST value of the priority\n     *\n     *\n     * @return mixed | null if no values\n     */\n    public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        return $this->getFullRESTValue($user, $changeset);\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            (int) $this->getArtifactRank($changeset->getArtifact()->getID())\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    private function getPriorityManager()\n    {\n        return new Tracker_Artifact_PriorityManager(\n            new Tracker_Artifact_PriorityDao(),\n            new Tracker_Artifact_PriorityHistoryDao(),\n            UserManager::instance(),\n            Tracker_ArtifactFactory::instance()\n        );\n    }\n\n    /**\n     * Validate a field\n     *\n     * @param Artifact                        $artifact             The artifact to check\n     * @param mixed                           $submitted_value      The submitted value\n     * @param Tracker_Artifact_ChangesetValue $last_changeset_value The last changeset value of the field (give null if no old value)\n     *\n     * @return bool true on success or false on failure\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n\n        if ($submitted_value !== null && ! $this->userCanUpdate($user)) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Fetch the html code to display the field value in card\n     *\n     *\n     * @return string\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        //return $this->fetchTooltipValue($artifact, $artifact->getLastChangeset()->getValue($this));\n\n        $artifact_id  = $artifact->getId();\n        $changeset_id = $artifact->getLastChangeset()->getId();\n        $value        = $artifact->getLastChangeset()->getValue($this);\n        $report       = Tracker_ReportFactory::instance()->getDefaultReportsByTrackerId($artifact->getTracker()->getId());\n        $request      = HTTPRequest::instance();\n\n        if ($request->exist('report')) {\n            $report = Tracker_ReportFactory::instance()->getReportById(\n                $request->get('report'),\n                UserManager::instance()->getCurrentUser()->getId()\n            );\n        }\n\n        return $this->fetchChangesetValue($artifact_id, $changeset_id, $value, $report);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2013 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\nclass Tracker_FormElement_Field_SubmittedBy extends Tracker_FormElement_Field_List implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            $a             = 'A_' . $this->id;\n            $b             = 'B_' . $this->id;\n            $ids_to_search = array_values(array_intersect(\n                array_values($criteria_value),\n                array_merge([100], array_keys($this->getBind()->getAllValues()))\n            ));\n            if (count($ids_to_search) > 1) {\n                return \" artifact.submitted_by IN(\" . $this->getCriteriaDao()->getDa()->escapeIntImplode($ids_to_search) . \") \";\n            } else {\n                $id_to_search = isset($ids_to_search[0]) ? $ids_to_search[0] : null;\n                return \" artifact.submitted_by = \" . $this->getCriteriaDao()->getDa()->escapeInt($id_to_search) . \" \";\n            }\n        }\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        // SubmittedOn is stored in the artifact\n        return \"a.submitted_by AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n    public function getQueryFromAggregate()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n        return \" LEFT JOIN  user AS $R2 ON ($R2.user_id = a.submitted_by ) \";\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        // SubmittedOn is stored in the artifact\n        return 'a.submitted_by';\n    }\n\n    /**\n     * Get the \"order by\" statement to retrieve field values\n     */\n    public function getQueryOrderby(): string\n    {\n        return $this->getQuerySelectName();\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Submitted By');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the user who submitted the artifact');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/user-female--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        // user can not change the value of this field\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Hook called after a creation of a field\n     *\n     * @param array $form_element_data\n     * @param bool $tracker_is_empty\n     * @return void\n     */\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n        //force the bind\n        $form_element_data['bind-type'] = 'users';\n        $form_element_data['bind']      = [\n            'value_function' => [\n                'artifact_submitters',\n            ],\n        ];\n        parent::afterCreate($form_element_data, $tracker_is_empty);\n    }\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $value              = new Tracker_FormElement_Field_List_Bind_UsersValue($changeset->getArtifact()->getSubmittedBy());\n        $submitted_by_value = $value->getFullRESTValue($this);\n\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            $submitted_by_value\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $purifier = Codendi_HTMLPurifier::instance();\n        $html     = '';\n        $value    = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n        $value    = $purifier->purify($value->getLabel());\n        $html    .= $value;\n        return $html;\n    }\n\n    public function fetchArtifactCopyMode(Artifact $artifact, array $submitted_values)\n    {\n        return '';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n     /**\n     * Fetch the field value in artifact to be displayed in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   mail format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        $output = '';\n\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n\n        switch ($format) {\n            case 'html':\n                $output .= $this->fetchArtifactValueReadOnly($artifact);\n                break;\n            default:\n                $output = $this->getBind()->formatMailArtifactValue($value->getId());\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $purifier   = Codendi_HTMLPurifier::instance();\n        $html       = '';\n        $fake_value = new Tracker_FormElement_Field_List_Bind_UsersValue(UserManager::instance()->getCurrentUser()->getId());\n        $html      .= $purifier->purify($fake_value->getLabel()) . '<br />';\n        $html      .= '<span class=\"tracker-admin-form-element-help\">';\n        $html      .= dgettext('tuleap-tracker', 'The field is automatically set to artifact submission user');\n        $html      .= '</span>';\n        return $html;\n    }\n\n    /**\n     * Display the field as a Changeset value.\n     * Used in report table\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        return $this->getBind()->formatChangesetValue(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchTooltipValue()\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::fetchCardValue()\n     */\n    public function fetchCardValue(Artifact $artifact, ?Tracker_CardDisplayPreferences $display_preferences = null)\n    {\n        $value = new Tracker_FormElement_Field_List_Bind_UsersValue($artifact->getSubmittedBy());\n        return $value->fetchCard($display_preferences);\n    }\n\n    /**\n     * Display the field for CSV\n     * Used in CSV data export\n     *\n     * @param int $artifact_id the corresponding artifact id\n     * @param int $changeset_id the corresponding changeset\n     * @param mixed $value the value of the field\n     *\n     * @return string\n     */\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $this->getBind()->formatChangesetValueForCSV(new Tracker_FormElement_Field_List_Bind_UsersValue($value));\n    }\n\n    /**\n     * Say if this fields suport notifications\n     *\n     * @return bool\n     */\n    public function isNotificationsSupported()\n    {\n        return true;\n    }\n\n    /**\n     * Say if we export the bind in the XML\n     *\n     * @return bool\n     */\n    public function shouldBeBindXML()\n    {\n        return false;\n    }\n\n    public function getUserManager()\n    {\n        return UserManager::instance();\n    }\n     /**\n     * Get the field data for artifact submission\n     * Check if the user name exists in the platform\n     *\n     * @param string the user name\n     *\n     * @return int the user id\n     */\n    public function getFieldData($value)\n    {\n        $um = $this->getUserManager();\n        $u  = $um->getUserByUserName($value);\n        if ($u) {\n            return $u->getId();\n        } else {\n            return null;\n        }\n    }\n\n    public function isNone($value)\n    {\n        return false;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitSubmittedBy($this);\n    }\n\n    public function getDefaultValue()\n    {\n        return Tracker_FormElement_Field_List_Bind::NONE_VALUE;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2011-Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\Date\\DateFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\n\n//phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_SubmittedOn extends Tracker_FormElement_Field_Date implements Tracker_FormElement_Field_ReadOnly\n{\n    public $default_properties = [];\n\n    protected function getDao()\n    {\n        return new DateFieldDao();\n    }\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return true;\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        //Only filter query if criteria is valuated\n        if ($criteria_value = $this->getCriteriaValue($criteria)) {\n            // SubmittedOn is stored in the artifact\n            return $this->getSQLCompareDate(\n                (bool) $criteria->is_advanced,\n                $criteria_value['op'],\n                $criteria_value['from_date'],\n                $criteria_value['to_date'],\n                'artifact.submitted_on'\n            );\n        }\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        // SubmittedOn is stored in the artifact\n        return \"a.submitted_on AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        // SubmittedOn is stored in the artifact\n        return '';\n    }\n\n    /**\n     * Get the \"group by\" statement to retrieve field values\n     */\n    public function getQueryGroupby(): string\n    {\n        // SubmittedOn is stored in the artifact\n        return 'a.submitted_on';\n    }\n\n    /**\n     * Fetch the value in a specific changeset\n     * @param Tracker_Artifact_Changeset $changeset\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return $this->formatDate($changeset->getArtifact()->getSubmittedOn());\n    }\n\n    protected function getValueDao()\n    {\n        return null;\n    }\n\n    public function getFullRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)\n    {\n        $artifact_field_value_full_representation = new Tuleap\\Tracker\\REST\\Artifact\\ArtifactFieldValueFullRepresentation();\n        $artifact_field_value_full_representation->build(\n            $this->getId(),\n            Tracker_FormElementFactory::instance()->getType($this),\n            $this->getLabel(),\n            date('c', $changeset->getArtifact()->getSubmittedOn())\n        );\n        return $artifact_field_value_full_representation;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Submitted On');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Display the date the artifact was submitted on');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('calendar/cal--plus.png');\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        // user can not change the value of this field\n        return false;\n    }\n\n    /**\n     * Keep the value\n     *\n     * @param Artifact                        $artifact                The artifact\n     * @param int                             $changeset_value_id      The id of the changeset_value\n     * @param Tracker_Artifact_ChangesetValue $previous_changesetvalue The data previously stored in the db\n     *\n     * @return int or array of int\n     */\n    protected function keepValue($artifact, $changeset_value_id, Tracker_Artifact_ChangesetValue $previous_changesetvalue)\n    {\n        //The field is ReadOnly\n        return null;\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = new Tracker_Artifact_ChangesetValue_Date($value_id, $changeset, $this, $has_changed, $changeset->getArtifact()->getSubmittedOn());\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        // Submitted On is never updated\n        return false;\n    }\n\n\n    public function fetchSubmit(array $submitted_values)\n    {\n        // We do not display the field in the artifact submit form\n        return '';\n    }\n\n    public function fetchSubmitMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueWithEditionFormIfEditable($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n        if (! $value) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $timestamp = $value->getTimestamp();\n        $value     = $timestamp ? $this->formatDateForDisplay($timestamp) : '';\n        $html     .= $value;\n\n        return $html;\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value);\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue $value The changeset value for this field\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        if (! $value) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n\n        return parent::fetchTooltipValue($artifact, $value);\n    }\n\n     /**\n     * Validate a field\n     *\n     * @param mixed $submitted_value      The submitted value\n     */\n    public function validateFieldWithPermissionsAndRequiredStatus(\n        Artifact $artifact,\n        $submitted_value,\n        PFUser $user,\n        ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,\n        ?bool $is_submission = null,\n    ): bool {\n        $is_valid = true;\n        if ($last_changeset_value === null && $submitted_value === null && $this->isRequired()) {\n            $is_valid = false;\n            $this->setHasErrors(true);\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', 'The field %1$s is required.'), $this->getLabel() . ' (' . $this->getName() . ')'));\n        } elseif ($submitted_value !== null && ! $this->userCanUpdate()) {\n            $is_valid = true;\n            $GLOBALS['Response']->addFeedback('warning', sprintf(dgettext('tuleap-tracker', 'The field \"%1$s\" will not be taken into account.'), $this->getName()));\n        }\n        return $is_valid;\n    }\n\n    /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value)) {\n            $value = new Tracker_Artifact_ChangesetValue_Date(null, $artifact->getFirstChangeset(), $this, false, $artifact->getSubmittedOn());\n        }\n        assert($value instanceof Tracker_Artifact_ChangesetValue_Date);\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $value  = $value->getTimestamp();\n                $output = $value ? $this->formatDate($value) : '';\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Say if the value is valid. If not valid set the internal has_error to true.\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    public function isValid(Artifact $artifact, $value)\n    {\n        // this field is always valid as it is not filled by users.\n        return true;\n    }\n\n    /**\n     * Display the html field in the admin ui\n     *\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $html  = '';\n        $html .= '<div>' . $this->formatDateTime(time()) . '</div>';\n        $html .= '<span class=\"tracker-admin-form-element-help\">';\n        $html .= dgettext('tuleap-tracker', 'The field is automatically set to artifact submission date');\n        $html .= '</span>';\n        return $html;\n    }\n\n    public function afterCreate(array $form_element_data, $tracker_is_empty)\n    {\n    }\n\n    /**\n     * Retreive The last date Field value\n     *\n     * @param Artifact $artifact The artifact\n     *\n     * @return string|false\n     */\n    public function getLastValue(Artifact $artifact)\n    {\n        return date(Tracker_FormElement_DateFormatter::DATE_FORMAT, $artifact->getSubmittedOn());\n    }\n\n    /**\n     * Get artifacts that responds to some criteria\n     *\n     * @param date    $date      The date criteria\n     * @param int $trackerId The Tracker Id\n     *\n     * @return Array\n     */\n    public function getArtifactsByCriterias($date, $trackerId = null)\n    {\n        $artifacts = [];\n        $dao       = new Tracker_ArtifactDao();\n        $dar       = $dao->getArtifactsBySubmittedOnDate($trackerId, $date);\n\n        if ($dar && ! $dar->isError()) {\n            $artifactFactory = Tracker_ArtifactFactory::instance();\n            foreach ($dar as $row) {\n                $artifacts[] = $artifactFactory->getArtifactById($row['artifact_id']);\n            }\n        }\n        return $artifacts;\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitSubmittedOn($this);\n    }\n\n    public function isTimeDisplayed()\n    {\n        return true;\n    }\n\n    public function getFieldDataFromRESTValue(array $value, ?Artifact $artifact = null)\n    {\n         return null;\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2012 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\Artifact\\FileUploadDataProvider;\nuse Tuleap\\Tracker\\Artifact\\RichTextareaProvider;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\Field\\Text\\TextFieldDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\Text\\TextValueDao;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_FormElement_Field_Text extends Tracker_FormElement_Field_Alphanum\n{\n    public $default_properties = [\n        'rows'      => [\n            'value' => 10,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'cols'          => [\n            'value' => 50,\n            'type'  => 'string',\n            'size'  => 3,\n        ],\n        'default_value' => [\n            'value' => '',\n            'type'  => 'text',\n            'size'  => 40,\n        ],\n    ];\n\n    /**\n     * The field is permanently deleted from the db\n     * This hooks is here to delete specific properties,\n     * or specific values of the field.\n     * (The field itself will be deleted later)\n     * @return bool true if success\n     */\n    public function delete()\n    {\n        return $this->getDao()->delete($this->id);\n    }\n\n    public function getCriteriaFrom($criteria)\n    {\n        //Only filter query if field is used\n        if ($this->isUsed()) {\n            //Only filter query if criteria is valuated\n            if ($criteria_value = $this->getCriteriaValue($criteria)) {\n                $a = 'A_' . $this->id;\n                $b = 'B_' . $this->id;\n                return \" INNER JOIN tracker_changeset_value AS $a\n                         ON ($a.changeset_id = c.id AND $a.field_id = $this->id )\n                         INNER JOIN tracker_changeset_value_text AS $b\n                         ON ($b.changeset_value_id = $a.id\n                             AND \" . $this->buildMatchExpression(\"$b.value\", $criteria_value) . \"\n                         ) \";\n            }\n        }\n        return '';\n    }\n\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->id;\n        return \"$R2.value AS \" . $this->getQuerySelectName();\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_text AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n\n    protected function buildMatchExpression($field_name, $criteria_value)\n    {\n        $matches = [];\n        $expr    = parent::buildMatchExpression($field_name, $criteria_value);\n        if (! $expr) {\n            // else transform into a series of LIKE %word%\n            if (is_array($criteria_value)) {\n                $split = preg_split('/\\s+/', $criteria_value['value']);\n            } else {\n                $split = preg_split('/\\s+/', $criteria_value);\n            }\n            $words        = [];\n            $criterie_dao = $this->getCriteriaDao();\n            if ($criterie_dao === null) {\n                return '';\n            }\n            foreach ($split as $w) {\n                $words[] = $field_name . \" LIKE \" . $criterie_dao->getDa()->quoteLikeValueSurround($w);\n            }\n            $expr = join(' AND ', $words);\n        }\n        return $expr;\n    }\n\n    protected function getCriteriaDao()\n    {\n        return new Tracker_Report_Criteria_Text_ValueDao();\n    }\n\n    public function canBeUsedToSortReport()\n    {\n        return true;\n    }\n\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report = null, $from_aid = null)\n    {\n        $tracker = $this->getTracker();\n        if ($tracker === null) {\n            return '';\n        }\n        $project_id = $tracker->getGroupId();\n\n        static $cache = [];\n        if (isset($cache[$project_id][$value])) {\n            return $cache[$project_id][$value];\n        }\n\n        $artifact = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);\n        $format   = $this->getRightBodyFormat($artifact, $value);\n        $hp       = Codendi_HTMLPurifier::instance();\n\n        if ($format == Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $changeset_value = $hp->purify($value, CODENDI_PURIFIER_FULL, $project_id);\n        } else {\n            $changeset_value = $hp->purify($value, CODENDI_PURIFIER_BASIC, $project_id);\n        }\n\n        $cache[$project_id][$value] = $changeset_value;\n        return $changeset_value;\n    }\n\n    public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)\n    {\n        return $value;\n    }\n\n    protected function getValueDao()\n    {\n        return new TextValueDao();\n    }\n    protected function getDao()\n    {\n        return new TextFieldDao();\n    }\n\n    /**\n     * Return true if this field is the semantic title field of the tracker,\n     * false otherwise if not or if there is no title field defined.\n     *\n     * @return bool true if the field is the 'title' of the tracker\n     */\n    protected function isSemanticTitle()\n    {\n        $semantic_manager = new Tracker_SemanticManager($this->getTracker());\n        $semantics        = $semantic_manager->getSemantics();\n        $field            = $semantics['title']->getField();\n        return ($field === $this);\n    }\n\n    private function getDefaultFormatForUser(PFUser $user): string\n    {\n        $user_preference = $user->getPreference(PFUser::EDITION_DEFAULT_FORMAT);\n\n        if (! $user_preference || $user_preference === Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT) {\n            return Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT;\n        }\n\n        if ($user_preference === Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT) {\n            return Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT;\n        }\n\n        return Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT;\n    }\n\n    /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value  = $this->getValueFromSubmitOrDefault($submitted_values);\n        $format = $this->getDefaultFormatForUser($this->getCurrentUser());\n\n        if (isset($value['format'])) {\n            $format = $value['format'];\n        }\n\n        return $this->getRichTextarea(null, $format, $value['content']);\n    }\n\n     /**\n     * Fetch the html code to display the field value in new artifact submission form\n     * @param array $submitted_values the values already submitted\n     *\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        $html  = '';\n        $value = dgettext('tuleap-tracker', 'Unchanged');\n\n        //check if this field is the title we do not allow to change it\n        if ($this->isSemanticTitle()) {\n            $html .= '<textarea readonly=\"readonly\" title=\"' . dgettext('tuleap-tracker', 'This field is the title of the artifact. It is not allowed to masschange it.') . '\">' . $value . '</textarea>';\n        } else {\n            $hp    = Codendi_HTMLPurifier::instance();\n            $html .= '<textarea id = field_' . $this->id . ' class=\"user-mention\"\n                                name=\"artifact[' . $this->id . '][content]\"\n                                rows=\"' . $this->getProperty('rows') . '\"\n                                cols=\"' . $this->getProperty('cols') . '\">';\n            $html .= $hp->purify($value, CODENDI_PURIFIER_CONVERT_HTML);\n            $html .= '</textarea>';\n        }\n        return $html;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact\n     *\n     * @param Artifact                        $artifact         The artifact\n     * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field\n     * @param array                           $submitted_values The value already submitted by the user\n     *\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        $content = '';\n\n        if ($value) {\n            assert($value instanceof Tracker_Artifact_ChangesetValue);\n            $format = $value->getFormat();\n        } else {\n            $default_value = $this->getDefaultValue();\n            $format        = $default_value['format'];\n        }\n\n        if (isset($submitted_values[$this->getId()])) {\n            $content = $submitted_values[$this->getId()]['content'];\n            $format  = $submitted_values[$this->getId()]['format'] == Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT ? Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT : Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT;\n        } elseif ($value != null) {\n            $content = $value->getText();\n        }\n\n        return $this->getRichTextarea($artifact, $format, $content);\n    }\n\n    /**\n     * @return string\n     */\n    private function getRichTextarea(?Artifact $artifact, string $format, string $content)\n    {\n        $tracker = $this->getTracker();\n        if (! $tracker) {\n            throw new LogicException(self::class . ' # ' . $this->getId() . ' must have a valid tracker');\n        }\n\n        $hp = Codendi_HTMLPurifier::instance();\n\n        $rich_textarea_provider = new RichTextareaProvider(\n            TemplateRendererFactory::build(),\n            new \\Tuleap\\Tracker\\Artifact\\UploadDataAttributesForRichTextEditorBuilder(\n                new FileUploadDataProvider($this->getFrozenFieldDetector(), Tracker_FormElementFactory::instance())\n            )\n        );\n\n        $html = '<input type=\"hidden\"\n             id=\"artifact[' . $this->id . ']_body_format\"\n             name=\"artifact[' . $this->id . '][format]\"\n             value=\"' . $hp->purify($format) . '\" />';\n\n        $html .= $rich_textarea_provider->getTextarea(\n            $tracker,\n            $artifact,\n            $this->getCurrentUser(),\n            'field_' . $this->id,\n            'artifact[' . $this->id . '][content]',\n            $this->getProperty('rows'),\n            $this->getProperty('cols'),\n            $content,\n            $this->isRequired(),\n        );\n\n        return $html;\n    }\n\n     /**\n     * Fetch data to display the field value in mail\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param PFUser                          $user     The user who will receive the email\n     * @param bool                            $ignore_perms\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     * @param string                          $format   output format\n     *\n     * @return string\n     */\n    public function fetchMailArtifactValue(\n        Artifact $artifact,\n        PFUser $user,\n        $ignore_perms,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $format = 'text',\n    ) {\n        if (empty($value) || $value->getText() == '') {\n            return '-';\n        }\n        $output = '';\n        switch ($format) {\n            case 'html':\n                $output = $this->fetchArtifactValueReadOnly($artifact, $value);\n                break;\n            default:\n                $output = $value->getContentAsText();\n                break;\n        }\n        return $output;\n    }\n\n    /**\n     * Fetch the html code to display the field value in artifact in read only mode\n     *\n     * @param Artifact                        $artifact The artifact\n     * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field\n     *\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $text = $value ? $value->getValue() : '';\n\n        if ($text === '') {\n            return $this->getNoValueLabel();\n        }\n\n        return '<div class=\"textarea-value\">' . $text . '</div>';\n    }\n\n    public function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return $this->fetchArtifactValueReadOnly($artifact, $value) . $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * Display the html field in the admin ui\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        $hp      = Codendi_HTMLPurifier::instance();\n        $html    = '';\n        $content = '';\n        if ($this->hasDefaultValue()) {\n            $content = $this->getProperty('default_value');\n        }\n        $html .= '<textarea rows=\"' . $this->getProperty('rows') . '\" cols=\"' . $this->getProperty('cols') . '\" autocomplete=\"off\">';\n        $html .=  $hp->purify($content, CODENDI_PURIFIER_CONVERT_HTML);\n        $html .= '</textarea>';\n        return $html;\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker', 'Text');\n    }\n\n    public static function getFactoryDescription()\n    {\n        return dgettext('tuleap-tracker', 'Paragraph, long text field');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-spin.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/ui-spin--plus.png');\n    }\n\n    /**\n     * Fetch the html code to display the field value in tooltip\n     *\n     * @param Tracker_Artifact_ChangesetValue_Text $value The changeset value of this field\n     * @return string The html code to display the field value in tooltip\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        $html = '';\n\n        if ($value) {\n            $html .= $value->getValue();\n        }\n\n        return $html;\n    }\n\n    /**\n     * Tells if the field takes two columns\n     * Ugly legacy hack to display fields in columns\n     * @return bool\n     */\n    public function takesTwoColumns()\n    {\n        return $this->getProperty('cols') > 40;\n    }\n\n    /**\n     * Verifies the consistency of the imported Tracker\n     *\n     * @return bool true if Tracler is ok\n     */\n    public function testImport()\n    {\n        if (parent::testImport()) {\n            if (static::class == 'Tracker_FormElement_Field_Text') {\n                if (! (isset($this->default_properties['rows']) && isset($this->default_properties['cols']))) {\n                    var_dump($this, 'Properties must be \"rows\" and \"cols\"');\n                    return false;\n                }\n            } elseif (static::class == 'Tracker_FormElement_Field_String') {\n                if (! (isset($this->default_properties['maxchars']) && isset($this->default_properties['size']))) {\n                    var_dump($this, 'Properties must be \"maxchars\" and \"size\"');\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Validate a value\n     *\n     * @param Artifact $artifact The artifact\n     * @param mixed    $value    data coming from the request. May be string or array.\n     *\n     * @return bool true if the value is considered ok\n     */\n    protected function validate(Artifact $artifact, $value)\n    {\n        $rule    = $this->getRuleString();\n        $content = $this->getRightContent($value);\n        if (! ($is_valid = $rule->isValid($content))) {\n            $GLOBALS['Response']->addFeedback('error', sprintf(dgettext('tuleap-tracker', '%1$s is not a text.'), $this->getLabel()));\n        }\n        return $is_valid;\n    }\n\n    protected function getRuleString()\n    {\n        return new Rule_String();\n    }\n\n    /**\n     * Get the value of this field\n     *\n     * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)\n     * @param int                        $value_id    The id of the value\n     * @param bool $has_changed If the changeset value has changed from the rpevious one\n     *\n     * @return Tracker_Artifact_ChangesetValue or null if not found\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id, $this->id)->getRow()) {\n            $changeset_value = new Tracker_Artifact_ChangesetValue_Text($value_id, $changeset, $this, $has_changed, $row['value'], $row['body_format']);\n        }\n        return $changeset_value;\n    }\n\n    /**\n     * @see Tracker_FormElement_Field::hasChanges()\n     */\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        assert($old_value instanceof Tracker_Artifact_ChangesetValue_Text);\n\n        if (is_array($new_value)) {\n            return $old_value->getText() !== (string) $new_value['content'];\n        }\n        return $old_value->getText() !== (string) $new_value;\n    }\n\n    /**\n     * Transform REST representation of field into something that artifact createArtifact or updateArtifact can proceed\n     *\n     * @return mixed\n     */\n    public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)\n    {\n        if ($this->doesValueUseTheByFieldOutput($value)) {\n            $text_value = $this->formatValueWithTheByFieldOutput($value);\n\n            return $this->getRestFieldData($text_value);\n        }\n\n        return parent::getFieldDataFromRESTValueByField($value, $artifact);\n    }\n\n    private function formatValueWithTheByFieldOutput(array $value)\n    {\n        return [\n            'content' => $value['value'],\n            'format'  => $value['format'],\n        ];\n    }\n\n    private function doesValueUseTheByFieldOutput(array $value)\n    {\n        return array_key_exists('value', $value) &&\n               array_key_exists('format', $value) &&\n               ! is_array($value['value']);\n    }\n\n    public function getRestFieldData($value)\n    {\n        if ($this->isValueAlreadyWellFormatted($value)) {\n            return $value;\n        }\n\n        $data = $this->getDefaultValue();\n\n        if (is_array($value) && isset($value['content'])) {\n            $data['content'] = $value['content'];\n        } else {\n            $data['content'] = $value;\n        }\n\n        return $data;\n    }\n\n    private function isValueAlreadyWellFormatted($value): bool\n    {\n        return is_array($value) && isset($value['content']) && $this->isFormatValid($value['format']);\n    }\n\n    private function isFormatValid(?string $format): bool\n    {\n        return isset($format)\n            && in_array(\n                $format,\n                [\n                    Tracker_Artifact_ChangesetValue_Text::TEXT_CONTENT,\n                    Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT,\n                    Tracker_Artifact_ChangesetValue_Text::COMMONMARK_CONTENT,\n                ]\n            );\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        $content     = $this->getRightContent($value);\n        $body_format = $this->getRightBodyFormat($artifact, $value);\n\n        if ($body_format === Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $substitutor = new \\Tuleap\\Tracker\\FormElement\\Field\\File\\FileURLSubstitutor();\n            $content     = $substitutor->substituteURLsInHTML($content, $url_mapping);\n        }\n\n        return $this->getValueDao()->createWithBodyFormat($changeset_value_id, $content, $body_format) &&\n               $this->extractCrossRefs($artifact, $content);\n    }\n\n    private function getRightContent($value)\n    {\n        return is_array($value) ? $value['content'] : $value;\n    }\n\n    private function getRightBodyFormat(Artifact $artifact, $value)\n    {\n        $last_changeset_value = $this->getLastChangesetValue($artifact);\n        assert($last_changeset_value === null || $last_changeset_value instanceof Tracker_Artifact_ChangesetValue_Text);\n        $old_format = $last_changeset_value ? $last_changeset_value->getFormat() : null;\n        return is_array($value) ? $value['format'] : $old_format;\n    }\n\n    /**\n     * Validate a required field\n     *\n     * @param Artifact $artifact        The artifact to check\n     * @param mixed    $submitted_value The submitted value\n     */\n    public function isValidRegardingRequiredProperty(Artifact $artifact, $submitted_value): bool\n    {\n        if (! $this->isRequired()) {\n            return true;\n        }\n\n        if (empty($submitted_value)) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        if (\n            is_array($submitted_value) &&\n            (\n                ! isset($submitted_value[\"content\"]) ||\n                isset($submitted_value[\"content\"]) && empty($submitted_value[\"content\"])\n            )\n        ) {\n            $this->addRequiredError();\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function extractCrossRefs($artifact, $content)\n    {\n        return ReferenceManager::instance()->extractCrossRef(\n            $content,\n            $artifact->getId(),\n            Artifact::REFERENCE_NATURE,\n            $this->getTracker()->getGroupID(),\n            UserManager::instance()->getCurrentUser()->getId(),\n            $this->getTracker()->getItemName()\n        );\n    }\n\n    /**\n     * Returns the default value for this field, or nullif no default value defined\n     *\n     * @return mixed The default value for this field, or null if no default value defined\n     */\n    public function getDefaultValue()\n    {\n        $user           = $this->getCurrentUser();\n        $default_format = $this->getDefaultFormatForUser($user);\n\n        $default_value_in_text_format = $this->getProperty('default_value');\n        if ($default_format === Tracker_Artifact_ChangesetValue_Text::HTML_CONTENT) {\n            $default_value = '<p>' . nl2br(htmlentities($default_value_in_text_format)) . '</p>';\n        } else {\n            $default_value = $default_value_in_text_format;\n        }\n\n        return [\n            'format'  => $default_format,\n            'content' => $default_value,\n        ];\n    }\n\n    public function isEmpty($value, Artifact $artifact)\n    {\n        return trim($this->getRightContent($value)) === '';\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitText($this);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\date\\RelativeDatesAssetsRetriever;\nuse Tuleap\\DB\\Compat\\Legacy2018\\LegacyDataAccessResultInterface;\nuse Tuleap\\Layout\\CssAssetCollection;\nuse Tuleap\\Layout\\IncludeAssets;\nuse Tuleap\\Project\\MappingRegistry;\nuse Tuleap\\Tracker\\Admin\\ArtifactLinksUsageDao;\nuse Tuleap\\Tracker\\Artifact\\PossibleParentsRetriever;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeDao;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypePresenterFactory;\nuse Tuleap\\Tracker\\FormElement\\Field\\ArtifactLink\\Type\\TypeSelectorPresenter;\nuse Tuleap\\Tracker\\Report\\CSVExport\\CSVFieldUsageChecker;\nuse Tuleap\\Tracker\\Report\\Renderer\\Table\\GetExportOptionsMenuItemsEvent;\nuse Tuleap\\Tracker\\Report\\Renderer\\Table\\ProcessExportEvent;\nuse Tuleap\\Tracker\\Report\\WidgetAdditionalButtonPresenter;\n\n// phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace,Squiz.Classes.ValidClassName.NotCamelCaps\nclass Tracker_Report_Renderer_Table extends Tracker_Report_Renderer implements Tracker_Report_Renderer_ArtifactLinkable\n{\n    public const EXPORT_LIGHT = 1;\n    public const EXPORT_FULL  = 0;\n\n    public $chunksz;\n    public $multisort;\n    /**\n     * @var Tracker_Report_Session\n     */\n    private $report_session;\n\n    /**\n     * Constructor\n     *\n     * @param int $id the id of the renderer\n     * @param Tracker_Report $report the id of the report\n     * @param string $name the name of the renderer\n     * @param string $description the description of the renderer\n     * @param int $rank the rank\n     * @param int $chunksz the size of the chunk (Browse X at once)\n     * @param bool $multisort use multisort?\n     */\n    public function __construct($id, $report, $name, $description, $rank, $chunksz, $multisort)\n    {\n        parent::__construct($id, $report, $name, $description, $rank);\n        $this->chunksz   = $chunksz;\n        $this->multisort = $multisort;\n    }\n\n    public function initiateSession()\n    {\n        $this->report_session = new Tracker_Report_Session($this->report->id);\n        $this->report_session->changeSessionNamespace(\"renderers\");\n        $this->report_session->set(\"{$this->id}.chunksz\", $this->chunksz);\n        $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n    }\n\n    /**\n     * Delete the renderer\n     */\n    public function delete()\n    {\n        $this->getSortDao()->delete($this->id);\n        $this->getColumnsDao()->delete($this->id);\n        $this->getAggregatesDao()->deleteByRendererId($this->id);\n    }\n\n    protected $_sort;\n    /**\n     * @param array $sort\n     */\n    public function setSort($sort)\n    {\n        $this->_sort = $sort;\n    }\n    /**\n     * Get field ids used to (multi)sort results\n     * @return array [{'field_id' => 12, 'is_desc' => 0, 'rank' => 2}, [...]]\n     */\n    public function getSort($store_in_session = true)\n    {\n        $sort = null;\n        if ($store_in_session) {\n            if (isset($this->report_session)) {\n                $sort = $this->report_session->get(\"{$this->id}.sort\");\n            }\n        }\n\n        if ($sort) {\n                $ff = $this->report->getFormElementFactory();\n            foreach ($sort as $field_id => $properties) {\n                if ($properties) {\n                    if ($field = $ff->getFormElementById($field_id)) {\n                        if ($field->canBeUsedToSortReport() && $field->userCanRead()) {\n                            $this->_sort[$field_id]          = [\n                                   'renderer_id ' => $this->id,\n                                   'field_id'    => $field_id,\n                                   'is_desc'     => $properties['is_desc'],\n                                   'rank'        => $properties['rank'],\n                                ];\n                            $this->_sort[$field_id]['field'] = $field;\n                        }\n                    }\n                }\n            }\n        } elseif (! isset($this->report_session) || ! $this->report_session->hasChanged()) {\n            if (! is_array($this->_sort)) {\n                $ff          = $this->getFieldFactory();\n                $this->_sort = [];\n                foreach ($this->getSortDao()->searchByRendererId($this->id) as $row) {\n                    if ($field = $ff->getUsedFormElementById($row['field_id'])) {\n                        if ($field->canBeUsedToSortReport() && $field->userCanRead()) {\n                            $this->_sort[$row['field_id']]          = $row;\n                            $this->_sort[$row['field_id']]['field'] = $field;\n                        }\n                    }\n                }\n            }\n            $sort = $this->_sort;\n            if ($store_in_session && isset($this->report_session)) {\n                foreach ($sort as $field_id => $properties) {\n                    $this->report_session->set(\"{$this->id}.sort.{$field_id}.is_desc\", $properties['is_desc']);\n                    $this->report_session->set(\"{$this->id}.sort.{$field_id}.rank\", $properties['rank']);\n                }\n            }\n        } else {\n            $this->_sort = [];\n        }\n        return $this->_sort;\n    }\n    /**\n     * Adds sort values to database\n     *\n     * @param array $sort\n     */\n    public function saveSort($sort)\n    {\n        $dao = $this->getSortDao();\n        if (is_array($sort)) {\n            foreach ($sort as $key => $s) {\n                $dao->create($this->id, $s['field']->id);\n            }\n        }\n    }\n\n    protected $_columns;\n    /**\n     * @param array $cols\n     */\n    public function setColumns($cols)\n    {\n        $this->_columns = $cols;\n    }\n    /**\n     * Adds columns to database\n     *\n     * @param array $cols\n     */\n    public function saveColumns($cols)\n    {\n        $dao   = $this->getColumnsDao();\n        $rank  = -1;\n        $width = 0;\n\n        foreach ($cols as $key => $col) {\n            $rank++;\n\n            $artlink_nature        = (isset($col['artlink_nature']) ? $col['artlink_nature'] : null);\n            $artlink_nature_format = (isset($col['artlink_nature_format']) ? $col['artlink_nature_format'] : null);\n\n            $dao->create($this->id, $col['field']->id, $width, $rank, $artlink_nature, $artlink_nature_format);\n        }\n    }\n\n    /**\n     * Get field ids and width used to display results\n     * @return array  [{'field_id' => 12, 'width' => 33, 'rank' => 5}, [...]]\n     */\n    public function getColumns()\n    {\n        $session_renderer_table_columns = null;\n        if (isset($this->report_session)) {\n            $session_renderer_table_columns = $this->report_session->get(\"{$this->id}.columns\");\n        }\n\n        if ($session_renderer_table_columns) {\n            $columns        = $session_renderer_table_columns;\n            $ff             = $this->report->getFormElementFactory();\n            $this->_columns = [];\n            foreach ($columns as $key => $column) {\n                $field_id = $this->fallbackFieldId($key, $column);\n                if ($formElement = $ff->getUsedFormElementFieldById($field_id)) {\n                    if ($formElement->userCanRead()) {\n                        $artlink_nature        = null;\n                        $artlink_nature_format = null;\n                        if (isset($column['artlink_nature'])) {\n                            $artlink_nature = $column['artlink_nature'];\n                        }\n                        if (isset($column['artlink_nature_format'])) {\n                            $artlink_nature_format = $column['artlink_nature_format'];\n                        }\n                        $this->_columns[$key] = [\n                            'field'                 => $formElement,\n                            'field_id'              => $formElement->getId(),\n                            'width'                 => $column['width'],\n                            'rank'                  => $column['rank'],\n                            'artlink_nature'        => $artlink_nature,\n                            'artlink_nature_format' => $artlink_nature_format,\n                        ];\n                    }\n                }\n            }\n        } else {\n            if (empty($this->_columns)) {\n                $this->_columns = $this->getColumnsFromDb();\n            }\n        }\n\n        return $this->_columns;\n    }\n\n    protected $_aggregates;\n    /**\n     * @param array $aggs\n     */\n    public function setAggregates($aggs)\n    {\n        $this->_aggregates = $aggs;\n    }\n    /**\n     * Adds aggregates to database\n     *\n     * @param array $aggs\n     */\n    public function saveAggregates($aggs)\n    {\n        $dao = $this->getAggregatesDao();\n        foreach ($aggs as $field_id => $aggregates) {\n            foreach ($aggregates as $aggregate) {\n                $dao->create($this->id, $field_id, $aggregate);\n            }\n        }\n    }\n    public function getAggregates()\n    {\n        $session_renderer_table_functions = null;\n        if (isset($this->report_session)) {\n            $session_renderer_table_functions = &$this->report_session->get(\"{$this->id}.aggregates\");\n        }\n        if ($session_renderer_table_functions) {\n            $aggregates = $session_renderer_table_functions;\n            $ff         = $this->report->getFormElementFactory();\n            foreach ($aggregates as $field_id => $aggregates) {\n                if ($formElement = $ff->getFormElementById($field_id)) {\n                    if ($formElement->userCanRead()) {\n                        $this->_aggregates[$field_id] = $aggregates;\n                    }\n                }\n            }\n        } else {\n            if (empty($this->_aggregates)) {\n                $ff                = $this->getFieldFactory();\n                $this->_aggregates = [];\n                foreach ($this->getAggregatesDao()->searchByRendererId($this->id) as $row) {\n                    if ($field = $ff->getUsedFormElementById($row['field_id'])) {\n                        if ($field->userCanRead()) {\n                            if (! isset($this->_aggregates[$row['field_id']])) {\n                                $this->_aggregates[$row['field_id']] = [];\n                            }\n                            $this->_aggregates[$row['field_id']][] = $row;\n                        }\n                    }\n                }\n            }\n            if (isset($this->report_session)) {\n                $aggregates = $this->_aggregates;\n                foreach ($aggregates as $field_id => $agg) {\n                    $this->report_session->set(\"{$this->id}.aggregates.{$field_id}\", $agg);\n                }\n            }\n        }\n        return $this->_aggregates;\n    }\n\n    public function storeColumnsInSession()\n    {\n        $columns = $this->_columns;\n        foreach ($columns as $key => $column) {\n            $field_id = $this->fallbackFieldId($key, $column);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.field_id\", $field_id);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.width\", isset($column['width']) ? $column['width'] : 0);\n            $this->report_session->set(\"{$this->id}.columns.{$key}.rank\", isset($column['rank']) ? $column['rank'] : 0);\n            $this->report_session->set(\n                \"{$this->id}.columns.{$key}.artlink_nature\",\n                isset($column['artlink_nature']) ? $column['artlink_nature'] : null\n            );\n            $this->report_session->set(\n                \"{$this->id}.columns.{$key}.artlink_nature_format\",\n                isset($column['artlink_nature_format']) ? $column['artlink_nature_format'] : null\n            );\n        }\n    }\n\n    /**\n     * Before, there was no field_id stored in session as the index of the column was the field id.\n     * Now that we can have '1234' and '1234_fixed_in' as indexes, we need to store it in the session.\n     *\n     * As we don't want to break existing session once the Tuleap server is upgraded to the new version,\n     * if we don't find any field_id information then we fallback on the key used as index.\n     */\n    private function fallbackFieldId($key, $column)\n    {\n        if (isset($column['field_id'])) {\n            return $column['field_id'];\n        }\n\n        return $key;\n    }\n\n     /**\n     * Get field ids and width used to display results\n     * @return array  [{'field_id' => 12, 'width' => 33, 'rank' => 5}, [...]]\n     */\n    public function getColumnsFromDb()\n    {\n        $ff             = $this->getFieldFactory();\n        $this->_columns = [];\n        foreach ($this->getColumnsDao()->searchByRendererId($this->id) as $row) {\n            if ($field = $ff->getUsedFormElementFieldById($row['field_id'])) {\n                if ($field->userCanRead()) {\n                    $key = $row['field_id'];\n                    if (! is_null($row['artlink_nature'])) {\n                        $key .= '_' . $row['artlink_nature'];\n                    }\n                    $this->_columns[$key]          = $row;\n                    $this->_columns[$key]['field'] = $field;\n                }\n            }\n        }\n        return $this->_columns;\n    }\n\n    protected function getSortDao()\n    {\n        return new Tracker_Report_Renderer_Table_SortDao();\n    }\n\n    protected function getColumnsDao()\n    {\n        return new Tracker_Report_Renderer_Table_ColumnsDao();\n    }\n\n    protected function getAggregatesDao()\n    {\n        return new Tracker_Report_Renderer_Table_FunctionsAggregatesDao();\n    }\n\n    /**\n     * Fetch content of the renderer\n     * @return string\n     */\n    public function fetch($matching_ids, $request, $report_can_be_modified, PFUser $user)\n    {\n        $html       = '';\n        $total_rows = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset     = (int) $request->get('offset');\n        if ($offset < 0) {\n            $offset = 0;\n        }\n        if ($request->get('renderer')) {\n            $renderer_data = $request->get('renderer');\n            if (isset($renderer_data[$this->id]) && isset($renderer_data[$this->id]['chunksz'])) {\n                $this->report_session->set(\"{$this->id}.chunksz\", $renderer_data[$this->id]['chunksz']);\n                $this->report_session->setHasChanged();\n                $this->chunksz = $renderer_data[$this->id]['chunksz'];\n            }\n        }\n\n        $extracolumn = self::EXTRACOLUMN_MASSCHANGE;\n        if ((int) $request->get('link-artifact-id')) {\n            $extracolumn = self::EXTRACOLUMN_LINK;\n        }\n\n        if ($report_can_be_modified) {\n            $with_sort_links = true;\n        } else {\n            $with_sort_links = false;\n        }\n        $only_one_column  = null;\n        $use_data_from_db = false;\n        $aggregates       = false;\n        $store_in_session = true;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchHeader($report_can_be_modified, $user, $total_rows, $queries);\n        $html .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links);\n        $html .= $this->fetchTBody($matching_ids, $total_rows, $queries, $columns, $offset, $extracolumn);\n\n        //Display next/previous\n        $html .= $this->fetchNextPrevious($total_rows, $offset, $report_can_be_modified, (int) $request->get('link-artifact-id'));\n\n        //Display masschange controls\n        if ((int) $request->get('link-artifact-id')) {\n            //TODO\n        } else {\n            $html .= $this->fetchMassChange($matching_ids, $total_rows, $offset);\n        }\n\n        return $html;\n    }\n\n    private function fetchHeader($report_can_be_modified, PFUser $user, $total_rows, array $queries)\n    {\n        $html = '';\n\n        $html .= $this->fetchViewButtons($report_can_be_modified, $user);\n\n        if ($this->sortHasUsedField() && ! $this->columnsCanBeTechnicallySorted($queries)) {\n            $html .= '<div class=\"tracker_report_renderer_table_sort_warning\">\n                <ul class=\"feedback_warning\">\n                    <li>' . dgettext('tuleap-tracker', 'You have too many columns, the sort won\\'t work. Please remove some columns (and refresh the page) to be able to sort.') . '</li>\n                </ul>\n            </div>';\n        }\n\n        //Display sort info\n        $html .= '<div class=\"tracker_report_renderer_table_information\">';\n        if ($report_can_be_modified) {\n            $html .= $this->fetchSort();\n        }\n\n        $html .= $this->fetchMatchingNumber($total_rows);\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * Fetch content of the renderer\n     * @return string|string[]\n     */\n    public function fetchAsArtifactLink(\n        $matching_ids,\n        $field_id,\n        $read_only,\n        $prefill_removed_values,\n        $prefill_types,\n        $is_reverse,\n        $only_rows = false,\n        $from_aid = null,\n    ) {\n        $html             = '';\n        $total_rows       = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset           = 0;\n        $use_data_from_db = true;\n        $extracolumn      = $read_only ? self::NO_EXTRACOLUMN : self::EXTRACOLUMN_UNLINK;\n        $with_sort_links  = false;\n        $only_one_column  = null;\n        $pagination       = false;\n        $store_in_session = true;\n        $head             = '';\n\n        //Display the head of the table\n        $is_type_col = isset($matching_ids['type']);\n        $suffix      = '_' . $field_id . '_' . $this->report->id . '_' . $this->id;\n        if ($is_reverse) {\n            $suffix .= '_reverse';\n        }\n        $head .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links, $use_data_from_db, $suffix, '', $is_type_col);\n        if (! $only_rows) {\n            $html .= $head;\n        }\n        //Display the body of the table\n        $aggregates = false;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchTBody(\n            $matching_ids,\n            $total_rows,\n            $queries,\n            $columns,\n            $offset,\n            $extracolumn,\n            $only_one_column,\n            $use_data_from_db,\n            $pagination,\n            $field_id,\n            $prefill_removed_values,\n            $prefill_types,\n            $only_rows,\n            $read_only,\n            $from_aid\n        );\n\n        if (! $only_rows) {\n            $html .= $this->fetchArtifactLinkGoToTracker();\n        }\n\n        if ($only_rows) {\n            return ['head' => $head, 'rows' => $html];\n        }\n        return $html;\n    }\n\n    /**\n     * Get the item of the menu options.\n     *\n     * If no items is returned, the menu won't be displayed.\n     *\n     * @return array of 'item_key' => {url: '', icon: '', label: ''}\n     */\n    public function getOptionsMenuItems(PFUser $current_user): array\n    {\n        if ($current_user->isAnonymous()) {\n            return parent::getOptionsMenuItems($current_user);\n        }\n\n        $my_items            = ['export' => ''];\n        $my_items['export'] .= '<div class=\"btn-group\">';\n        $my_items['export'] .= '<a class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">';\n        $my_items['export'] .= '<i class=\"fa fa-download\"></i> ';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export');\n        $my_items['export'] .= ' <span class=\"caret\"></span>';\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '<ul class=\"dropdown-menu\" role=\"menu\">';\n        $my_items['export'] .= '<li class=\"almost-tlp-menu-title\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'CSV');\n        $my_items['export'] .= '</li>';\n        $my_items['export'] .= '<li>';\n        $my_items['export'] .= '<a href=\"' . $this->getExportResultURL(self::EXPORT_LIGHT) . '\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export all report columns');\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '</li>';\n        $my_items['export'] .= '<li>';\n        $my_items['export'] .= '<a href=\"' . $this->getExportResultURL(self::EXPORT_FULL) . '\">';\n        $my_items['export'] .= dgettext('tuleap-tracker', 'Export all columns');\n        $my_items['export'] .= '</a>';\n        $my_items['export'] .= '</li>';\n\n        $event = new GetExportOptionsMenuItemsEvent($this);\n        EventManager::instance()->processEvent($event);\n        $my_items['export'] .= $event->getItems();\n\n        $my_items['export'] .= '</ul>';\n        $my_items['export'] .= '</div>';\n        $my_items['export'] .= $event->getAdditionalContentThatGoesOutsideOfTheMenu();\n\n        foreach ($event->getJavascriptAssets() as $javascript_asset) {\n            $GLOBALS['HTML']->addJavascriptAsset($javascript_asset);\n        }\n\n        return $my_items + parent::getOptionsMenuItems($current_user);\n    }\n\n    private function getExportResultURL($export_only_displayed_fields)\n    {\n        return TRACKER_BASE_URL . '/?' . http_build_query(\n            [\n                'report'         => $this->report->id,\n                'renderer'       => $this->id,\n                'func'           => 'renderer',\n                'renderer_table' => [\n                    'export'                       => 1,\n                    'export_only_displayed_fields' => $export_only_displayed_fields,\n                ],\n            ]\n        );\n    }\n\n    private function fetchFormStart($id = '', $func = 'renderer')\n    {\n        $html  = '';\n        $html .= '<form method=\"POST\" action=\"\" id=\"' . $id . '\" class=\"form-inline\">';\n        $html .= '<input type=\"hidden\" name=\"report\" value=\"' . $this->report->id . '\" />';\n        $html .= '<input type=\"hidden\" name=\"renderer\" value=\"' . $this->id . '\" />';\n        $html .= '<input type=\"hidden\" name=\"func\" value=\"' . $func . '\" />';\n        return $html;\n    }\n\n    /**\n     * Fetch content to be displayed in widget\n     */\n    public function fetchWidget(PFUser $user)\n    {\n        $html                   = '';\n        $use_data_from_db       = true;\n        $store_in_session       = false;\n        $matching_ids           = $this->report->getMatchingIds(null, $use_data_from_db);\n        $total_rows             = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n        $offset                 = 0;\n        $extracolumn            = self::NO_EXTRACOLUMN;\n        $with_sort_links        = false;\n        $only_one_column        = null;\n        $pagination             = true;\n        $artifactlink_field_id  = null;\n        $prefill_removed_values = null;\n        $prefill_types          = [];\n        $only_rows              = false;\n        $read_only              = true;\n        $id_suffix              = '';\n        //Display the head of the table\n        $html .= $this->fetchAdditionnalButton($this->report->getTracker());\n        $html .= $this->fetchTHead($extracolumn, $only_one_column, $with_sort_links, $use_data_from_db, $id_suffix, $store_in_session);\n\n        //Display the body of the table\n        $aggregates = false;\n\n        $columns = $this->getTableColumns($only_one_column, $use_data_from_db);\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n        $html .= $this->fetchTBody(\n            $matching_ids,\n            $total_rows,\n            $queries,\n            $columns,\n            $offset,\n            $extracolumn,\n            $only_one_column,\n            $use_data_from_db,\n            $pagination,\n            $artifactlink_field_id,\n            $prefill_removed_values,\n            $prefill_types,\n            $only_rows,\n            $read_only\n        );\n\n        //Display range\n        if ($total_rows > 0) {\n            $offset_last = min($offset + $this->chunksz - 1, $total_rows - 1);\n            $html       .= '<div class=\"tracker_report_table_pager\">';\n            $html       .= $this->fetchRange($offset + 1, $offset_last + 1, $total_rows, $this->fetchWidgetGoToReport());\n            $html       .= '</div>';\n        } else {\n            $html .= $this->fetchWidgetGoToReport();\n        }\n\n        return $html;\n    }\n\n    private function fetchMatchingNumber($total_rows)\n    {\n        $html = '<p>' . sprintf(dgettext('tuleap-tracker', 'Matching artifacts: <strong>%1$s</strong>'), $total_rows) . '</p>';\n        return $html;\n    }\n\n    private function fetchSort()\n    {\n        $purifier     = Codendi_HTMLPurifier::instance();\n        $html         = '<div class=\"tracker_report_table_sortby_panel\">';\n        $sort_columns = $this->getSort();\n        if ($this->sortHasUsedField()) {\n            $html .= dgettext('tuleap-tracker', 'Sort by:');\n            $html .= ' ';\n            $sort  = [];\n            foreach ($sort_columns as $row) {\n                if ($row['field'] && $row['field']->isUsed()) {\n                    $sort[] = '<a id=\"tracker_report_table_sort_by_' . $purifier->purify($row['field_id']) . '\"\n                                  href=\"?' .\n                            $purifier->purify(http_build_query([\n                                                   'report'                  => $this->report->id,\n                                                   'renderer'                => $this->id,\n                                                   'func'                    => 'renderer',\n                                                   'renderer_table[sort_by]' => $row['field_id'],\n                                                  ])) . '\">' .\n                            $purifier->purify($row['field']->getLabel()) .\n                            $this->getSortIcon($row['is_desc']) .\n                            '</a>';\n                }\n            }\n            $html .= implode(' <i class=\"fa fa-angle-right\"></i> ', $sort);\n        }\n        $html .= '</div>';\n        return $html;\n    }\n\n    private function fetchAddColumn()\n    {\n        $add_columns_presenter = new Templating_Presenter_ButtonDropdownsMini(\n            'tracker_report_add_columns_dropdown',\n            dgettext('tuleap-tracker', 'Columns'),\n            $this->report->getFieldsAsDropdownOptions('tracker_report_add_column', $this->getColumns(), Tracker_Report::TYPE_TABLE)\n        );\n        $add_columns_presenter->setIcon('fa fa-eye-slash');\n\n        return $this->report->getTemplateRenderer()->renderToString('button_dropdowns', $add_columns_presenter);\n    }\n\n    private function fetchRange($from, $to, $total_rows, $additionnal_html)\n    {\n        $html  = '';\n        $html .= '<span class=\"tracker_report_table_pager_range\">';\n        $html .= dgettext('tuleap-tracker', 'Items');\n        $html .= ' <strong>' . $from . '</strong> \u2013 <strong>' . $to . '</strong>';\n        $html .= ' ' . dgettext('tuleap-tracker', 'of') . ' <strong>' . $total_rows . '</strong>';\n        $html .= $additionnal_html;\n        $html .= '</span>';\n\n        return $html;\n    }\n\n    private function fetchNextPrevious($total_rows, $offset, $report_can_be_modified, $link_artifact_id = null)\n    {\n        $html = '';\n        if ($total_rows) {\n            $parameters = [\n                'report'   => $this->report->id,\n                'renderer' => $this->id,\n            ];\n            if ($link_artifact_id) {\n                $parameters['link-artifact-id'] = (int) $link_artifact_id;\n                $parameters['only-renderer']    = 1;\n            }\n            //offset should be the last parameter to ease the concat later\n            $parameters['offset'] = '';\n            $url                  = '?' . http_build_query($parameters);\n\n            $chunk  = '<span class=\"tracker_report_table_pager_chunk\">';\n            $chunk .= dgettext('tuleap-tracker', 'Items per page :');\n            $chunk .= ' ';\n            if ($report_can_be_modified) {\n                $chunk .= '<div class=\"input-append\">';\n                $chunk .= '<input id=\"renderer_table_chunksz_input\" type=\"text\" name=\"renderer_table[chunksz]\" size=\"1\" maxlength=\"5\" value=\"' . (int) $this->chunksz . '\" />';\n                $chunk .= '<button type=\"submit\" class=\"btn btn-small\">Ok</button> ';\n                $chunk .= '</div> ';\n            } else {\n                $chunk .= (int) $this->chunksz;\n            }\n            $chunk .= '</span>';\n\n            $html .= $this->fetchFormStart('tracker_report_table_next_previous_form');\n            $html .= '<div class=\"tracker_report_table_pager\">';\n            if ($total_rows < $this->chunksz) {\n                $html .= $this->fetchRange(1, $total_rows, $total_rows, $chunk);\n            } else {\n                if ($offset > 0) {\n                    $html .= $this->getPagerButton($url . 0, 'begin');\n                    $html .= $this->getPagerButton($url . ($offset - $this->chunksz), 'prev');\n                } else {\n                    $html .= $this->getDisabledPagerButton('begin');\n                    $html .= $this->getDisabledPagerButton('prev');\n                }\n\n                $offset_last = min($offset + $this->chunksz - 1, $total_rows - 1);\n                $html       .= $this->fetchRange($offset + 1, $offset_last + 1, $total_rows, $chunk);\n\n                if (($offset + $this->chunksz) < $total_rows) {\n                    if ($this->chunksz > 0) {\n                        $offset_end = ($total_rows - ($total_rows % $this->chunksz));\n                    } else {\n                        $offset_end = PHP_INT_MAX; //weird! it will take many steps to reach the last page if the user is browsing 0 artifacts at once\n                    }\n                    if ($offset_end >= $total_rows) {\n                        $offset_end -= $this->chunksz;\n                    }\n                    $html .= $this->getPagerButton($url . ($offset + $this->chunksz), 'next');\n                    $html .= $this->getPagerButton($url . $offset_end, 'end');\n                } else {\n                    $html .= $this->getDisabledPagerButton('next');\n                    $html .= $this->getDisabledPagerButton('end');\n                }\n            }\n            $html .= '</div>';\n            $html .= '</form>';\n        }\n        return $html;\n    }\n\n    private function getDisabledPagerButton($direction)\n    {\n        $icons = [\n            'begin' => 'fa fa-angle-double-left',\n            'end'   => 'fa fa-angle-double-right',\n            'prev'  => 'fa fa-angle-left',\n            'next'  => 'fa fa-angle-right',\n        ];\n        $title = [\n            'begin' => $GLOBALS['Language']->getText('global', 'begin'),\n            'end'   => $GLOBALS['Language']->getText('global', 'end'),\n            'prev'  => $GLOBALS['Language']->getText('global', 'prev'),\n            'next'  => $GLOBALS['Language']->getText('global', 'next'),\n        ];\n        $html  = '';\n        $html .= '<button\n            class=\"btn disabled\"\n            type=\"button\"\n            title=\"' . $title[$direction] . '\"\n            >';\n        $html .= '<i class=\"' . $icons[$direction] . '\"></i>';\n        $html .= '</button> ';\n\n        return $html;\n    }\n\n    private function getPagerButton($url, $direction)\n    {\n        $icons = [\n            'begin' => 'fa fa-angle-double-left',\n            'end'   => 'fa fa-angle-double-right',\n            'prev'  => 'fa fa-angle-left',\n            'next'  => 'fa fa-angle-right',\n        ];\n        $title = [\n            'begin' => $GLOBALS['Language']->getText('global', 'begin'),\n            'end'   => $GLOBALS['Language']->getText('global', 'end'),\n            'prev'  => $GLOBALS['Language']->getText('global', 'prev'),\n            'next'  => $GLOBALS['Language']->getText('global', 'next'),\n        ];\n        $html  = '';\n        $html .= '<a\n            href=\"' . $url . '\"\n            class=\"btn\"\n            title=\"' . $title[$direction] . '\"\n            >';\n        $html .= '<i class=\"' . $icons[$direction] . '\"></i>';\n        $html .= '</a> ';\n\n        return $html;\n    }\n\n    protected function reorderColumnsByRank($columns)\n    {\n        $array_rank = [];\n        foreach ($columns as $key => $properties) {\n            $array_rank[$key] = $properties['rank'];\n        }\n        asort($array_rank);\n        $columns_sort = [];\n        foreach ($array_rank as $key => $rank) {\n            $columns_sort[$key] = $columns[$key];\n        }\n        return $columns_sort;\n    }\n\n    public const NO_EXTRACOLUMN         = 0;\n    public const EXTRACOLUMN_MASSCHANGE = 1;\n    public const EXTRACOLUMN_LINK       = 2;\n    public const EXTRACOLUMN_UNLINK     = 3;\n\n    private function fetchTHead($extracolumn = 1, $only_one_column = null, $with_sort_links = true, $use_data_from_db = false, $id_suffix = '', $store_in_session = true, $is_type_col = false)\n    {\n        $current_user = UserManager::instance()->getCurrentUser();\n\n        $html  = '';\n        $html .= '<table';\n        if (! $only_one_column) {\n            $html .= ' id=\"tracker_report_table' . $id_suffix . '\"  width=\"100%\" data-test=\"artifact-report-table\"';\n        }\n\n        $classnames = '';\n        if ($with_sort_links && ! $current_user->isAnonymous()) {\n            $classnames .= ' reorderable resizable';\n        }\n        $html .= ' class=\"tracker_report_table table tlp-table ' . $classnames . '\"';\n\n        $html .= '>';\n\n        $html .= '<thead class=\"table-sticky-header\">';\n\n        $html .= '<tr>';\n\n        if ($extracolumn) {\n            $display_extracolumn = true;\n            $classname           = 'tracker_report_table_';\n            $content             = '&nbsp';\n            if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                $classname .= 'masschange';\n            } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                $classname .= 'link';\n            } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                $classname .= 'unlink';\n                $content    = '<input type=\"checkbox\" disabled title=\"' . dgettext('tuleap-tracker', 'Mark all links to be removed') . '\" class=\"tracker-artifact-link-mass-unlink\">';\n            } else {\n                $display_extracolumn = false;\n            }\n\n            if ($display_extracolumn) {\n                $html .= '<th class=\"' . $classname . '\">' . $content . '</th>';\n            }\n        }\n\n        //the link to the artifact\n        if (! $only_one_column) {\n            $html .= '<th></th>';\n        }\n\n        $ff  = $this->getFieldFactory();\n        $url = '?' . http_build_query([\n                                           'report'                  => $this->report->id,\n                                           'renderer'                => $this->id,\n                                           'func'                    => 'renderer',\n                                           'renderer_table[sort_by]' => '',\n                                          ]);\n        if ($use_data_from_db) {\n            $all_columns = $this->reorderColumnsByRank($this->getColumnsFromDb());\n        } else {\n            $all_columns = $this->reorderColumnsByRank($this->getColumns());\n        }\n        if ($only_one_column) {\n            if (isset($all_columns[$only_one_column])) {\n                $columns = [$only_one_column => $all_columns[$only_one_column]];\n            } else {\n                $columns = [$only_one_column => [\n                    'width' => 0,\n                    'field' => $ff->getUsedFormElementById($only_one_column),\n                ]];\n            }\n        } else {\n            $columns = $all_columns;\n        }\n        $sort_columns = $this->getSort($store_in_session);\n\n        $purifier               = Codendi_HTMLPurifier::instance();\n        $type_presenter_factory = $this->getTypePresenterFactory();\n        foreach ($columns as $key => $column) {\n            if ($column['width']) {\n                $width = 'width=\"' . $purifier->purify($column['width'] . '%') . '\"';\n            } else {\n                $width = '';\n            }\n            if (! empty($column['field']) && $column['field']->isUsed()) {\n                $data_type        = '';\n                $data_type_format = '';\n                if (isset($column['artlink_nature'])) {\n                    $data_type = 'data-field-artlink-type=\"' . $purifier->purify($column['artlink_nature']) . '\"';\n                }\n                if (isset($column['artlink_nature_format'])) {\n                    $data_type_format = 'data-field-artlink-type-format=\"' . $purifier->purify($column['artlink_nature_format']) . '\"';\n                }\n                $html .= '<th class=\"tracker_report_table_column\"\n                    id=\"tracker_report_table_column_' . $purifier->purify($key) . '\"\n                    data-column-id=\"' . $purifier->purify($key) . '\"\n                    data-field-id=\"' . $purifier->purify($column['field']->id) . '\"\n                    ' . $data_type . '\n                    ' . $data_type_format . '\n                    ' . $width . '>';\n\n                $field_label = $column['field']->getLabel();\n                if (isset($column['artlink_nature'])) {\n                    $type = $type_presenter_factory->getFromShortname($column['artlink_nature']);\n                    if ($type) {\n                        $type_label = $type->forward_label;\n                        if (! $type_label) {\n                            $type_label = dgettext('tuleap-tracker', 'No type');\n                        }\n                        $field_label .= $purifier->purify(\" ($type_label)\");\n                    }\n                }\n                $label = $purifier->purify($field_label);\n\n                if ($with_sort_links) {\n                    $sort_url = $url . $column['field']->id;\n\n                    $html .= '<table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr>';\n\n                    if (! $current_user->isAnonymous()) {\n                        $html .= '<td class=\"tracker_report_table_column_grip\">&nbsp;&nbsp;</td>';\n                    }\n\n                    $html .= '<td class=\"tracker_report_table_column_title\">';\n                    if (! isset($column['artlink_nature']) && $column['field']->canBeUsedToSortReport()) {\n                        $html .= '<a href=\"' . $purifier->purify($sort_url) . '\">';\n                        $html .= $label;\n                        $html .= '</a>';\n                    } else {\n                        $html .= $label;\n                    }\n                    $html .= '</td>';\n\n                    if (! isset($column['artlink_nature']) && isset($sort_columns[$key])) {\n                        $html .= '<td class=\"tracker_report_table_column_caret\">';\n                        if ($column['field']->canBeUsedToSortReport()) {\n                            $html .= '<a href=\"' . $purifier->purify($sort_url) . '\">';\n                            $html .= $this->getSortIcon($sort_columns[$column['field']->getId()]['is_desc']);\n                            $html .= '</a>';\n                        } else {\n                            $warning_message = dgettext(\n                                'tuleap-tracker',\n                                'The report was sorted against this column. This column can not be used to sort a report, the sort has been ignored. Please choose another column.'\n                            );\n                            $html           .= '<i class=\"fa fa-exclamation-triangle\" title=\"' . $warning_message . '\"></i>';\n                        }\n                        $html .= '</td>';\n                    }\n\n                    if (isset($column['artlink_nature']) && ! $current_user->isAnonymous()) {\n                        $column_editor_popover_placement = 'bottom';\n\n                        if (end($columns) === $column) {\n                            $column_editor_popover_placement = 'left';\n                        }\n\n                        $html .= '<td class=\"tracker_report_table_column_type_editor\">';\n                        $html .= '<a href=\"#\" class=\"type-column-editor\" data-placement=\"' . $column_editor_popover_placement . '\"><i class=\"fa fa-cog\"></i></a>';\n                        $html .= '</td>';\n                    }\n\n                    $html .= '</tr></tbody></table>';\n                } else {\n                    $html .= $label;\n                }\n                $html .= '</th>';\n            }\n        }\n        if ($is_type_col) {\n            $type_label = dgettext('tuleap-tracker', 'Type');\n            $html      .= \"<th>$type_label</th>\";\n        }\n        $html .= '</tr>';\n        $html .= '</thead>';\n        return $html;\n    }\n\n    private function fetchAdditionnalButton()\n    {\n        $is_a_table_renderer = true;\n\n        $html = $this->getTemplateRenderer()->renderToString(\n            'widget-additionnal-button',\n            new WidgetAdditionalButtonPresenter(\n                $this->report->getTracker(),\n                $is_a_table_renderer\n            )\n        );\n\n        return $html;\n    }\n\n    private function getTemplateRenderer()\n    {\n        return TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR . '/report');\n    }\n\n    public function getTableColumns($only_one_column, $use_data_from_db, $store_in_session = true)\n    {\n        $columns = [];\n        if ($use_data_from_db) {\n            $all_columns = $this->reorderColumnsByRank($this->getColumnsFromDb());\n        } else {\n            $all_columns = $this->reorderColumnsByRank($this->getColumns());\n        }\n        if ($only_one_column) {\n            if (isset($all_columns[$only_one_column])) {\n                $columns = [$only_one_column => $all_columns[$only_one_column]];\n            } else {\n                $columns = [$only_one_column => [\n                    'width' => 0,\n                    'field' => $this->getFieldFactory()->getUsedFormElementFieldById($only_one_column),\n                ]];\n            }\n        } else {\n            $columns = $all_columns;\n        }\n        return $columns;\n    }\n\n    /**\n     * Display the body of the table\n     *\n     * @param array $matching_ids           The matching ids to display array('id' => '\"1,4,8,10\", 'last_matching_ids' => \"123,145,178,190\")\n     * @param int   $total_rows             The number of total rows (pagination powwwa)\n     * @param int   $offset                 The offset of the pagination\n     * @param int   $extracolumn            Need for an extracolumn? NO_EXTRACOLUMN | EXTRACOLUMN_MASSCHANGE | EXTRACOLUMN_LINK | EXTRACOLUMN_UNLINK. Default is EXTRACOLUMN_MASSCHANGE.\n     * @param int   $only_one_column        The column (field_id) to display. null if all columns are needed. Default is null\n     * @param bool  $use_data_from_db       true if we need to retrieve data from the db instead of the session. Default is false.\n     * @param bool  $pagination             true if we display the pagination. Default is true.\n     * @param int   $artifactlink_field_id  The artifactlink field id. Needed to display report in ArtifactLink field. Default is null\n     * @param array $prefill_removed_values Array of artifact_id to pre-check. array(123 => X, 345 => X, ...). Default is null\n     * @param bool  $only_rows              Display only rows, no aggregates or stuff like that. Default is false.\n     * @param bool  $read_only              Display the table in read only mode. Default is false.\n     *\n     * @return string html\n     */\n    private function fetchTBody(\n        $matching_ids,\n        $total_rows,\n        array $queries,\n        array $columns,\n        $offset,\n        $extracolumn = 1,\n        $only_one_column = null,\n        $use_data_from_db = false,\n        $pagination = true,\n        $artifactlink_field_id = null,\n        $prefill_removed_values = null,\n        $prefill_types = [],\n        $only_rows = false,\n        $read_only = false,\n        $from_aid = null,\n    ) {\n        $html = '';\n        if (! $only_rows) {\n            $html                .= \"\\n<!-- table renderer body -->\\n\";\n            $html                .= '<tbody>';\n            $additional_classname = '';\n        } else {\n            $additional_classname = 'additional';\n        }\n        if ($total_rows) {\n            $dao     = new DataAccessObject();\n            $results = [];\n            foreach ($queries as $sql) {\n                //Limit\n                if ($total_rows > $this->chunksz && $pagination) {\n                    $sql .= \" LIMIT \" . (int) $offset . \", \" . (int) $this->chunksz;\n                }\n                $results[] = $dao->retrieve($sql);\n            }\n            // test if first result is valid (if yes, we consider that others are valid too)\n            if (! empty($results[0])) {\n                $current_user                 = UserManager::instance()->getCurrentUser();\n                $artifact_factory             = Tracker_ArtifactFactory::instance();\n                $is_parent_selector_displayed = false;\n                if ($from_aid) {\n                    $artifact = $artifact_factory->getArtifactById((int) $from_aid);\n                    if ($artifact && $artifact->getParentWithoutPermissionChecking() === null) {\n                        $retriever = new PossibleParentsRetriever($artifact_factory, EventManager::instance());\n\n                        $possible_parents_selector = $retriever->getPossibleArtifactParents(\n                            $artifact->getTracker(),\n                            $current_user,\n                            0,\n                            0,\n                            false,\n                        );\n\n                        $is_parent_selector_displayed = $possible_parents_selector->isSelectorDisplayed();\n                    }\n                }\n\n                $renderer = TemplateRendererFactory::build()->getRenderer(TRACKER_TEMPLATE_DIR);\n                $purifier = Codendi_HTMLPurifier::instance();\n                //extract the first results\n                $first_result = array_shift($results);\n                //loop through it\n                foreach ($first_result as $row) { //id, f1, f2\n                    //merge the row with the other results\n                    foreach ($results as $result) {\n                        if ($result === false) {\n                            continue;\n                        }\n                        //[id, f1, f2] + [id, f3, f4]\n                        $row = array_merge($row, $result->getRow());\n                        //row == id, f1, f2, f3, f4...\n                    }\n                    $html .= '<tr class=\"' . $additional_classname . '\" data-test=\"tracker-report-table-results-artifact\">';\n                    if ($extracolumn) {\n                        $display_extracolumn = true;\n                        $checked             = '';\n                        $classname           = 'tracker_report_table_';\n                        $name                = '';\n                        if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                            $classname .= 'masschange';\n                            $name       = 'masschange_aids';\n                        } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                            $classname .= 'link';\n                            $name       = 'link-artifact[search]';\n                        } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                            $classname .= 'unlink';\n                            $name       = 'artifact[' . (int) $artifactlink_field_id . '][removed_values][' . $row['id'] . ']';\n                            if (isset($prefill_removed_values[$row['id']])) {\n                                $checked = 'checked=\"checked\"';\n                            }\n                        } else {\n                            $display_extracolumn = false;\n                        }\n\n                        if ($display_extracolumn) {\n                            $html .= '<td class=\"' . $purifier->purify($classname) . '\" width=\"1\">';\n                            $html .= '<span><input type=\"checkbox\" name=\"' . $purifier->purify($name) . '[]\" value=\"' . $purifier->purify($row['id']) . '\" ' . $checked . ' /></span>';\n                            $html .= '</td>';\n                        }\n                    }\n                    if (! $only_one_column) {\n                        $params = [\n                            'aid' => $row['id'],\n                        ];\n                        if ($from_aid != null) {\n                            $params['from_aid'] = $from_aid;\n                        }\n                        $url = TRACKER_BASE_URL . '/?' . http_build_query($params);\n\n                        $html .= '<td>';\n                        $html .= '<a\n                            class=\"direct-link-to-artifact\"\n                            data-test=\"direct-link-to-artifact\"\n                            href=\"' . $purifier->purify($url) . '\"\n                            title=\"' . $purifier->purify(dgettext('tuleap-tracker', 'Show') . ' artifact #' . $row['id']) . '\">';\n                        $html .= '<i class=\"fa fa-edit\"></i>';\n                        $html .= '</td>';\n                    }\n                    foreach ($columns as $key => $column) {\n                        if ($column['field']->isUsed()) {\n                            $field_name = Tracker_FormElement_Field::PREFIX_NAME_SQL_COLUMN . $column['field']->name;\n                            $value      = isset($row[$field_name]) ? $row[$field_name] : null;\n                            $html      .= '<td data-column-id=\"' . $purifier->purify($key) . '\">';\n\n                            if (isset($column['artlink_nature'])) {\n                                $html .= $column['field']->fetchChangesetValueForType(\n                                    $row['id'],\n                                    $row['changeset_id'],\n                                    $value,\n                                    $column['artlink_nature'],\n                                    $column['artlink_nature_format'],\n                                    $this->report,\n                                    $from_aid\n                                );\n                            } else {\n                                $html .= $column['field']->fetchChangesetValue(\n                                    $row['id'],\n                                    $row['changeset_id'],\n                                    $value,\n                                    $this->report,\n                                    $from_aid\n                                );\n                            }\n                            $html .= '</td>';\n                        }\n                    }\n                    $artifact_id = $row['id'];\n                    if (isset($matching_ids['type'][$artifact_id])) {\n                        $type          = $matching_ids['type'][$artifact_id];\n                        $forward_label = $purifier->purify($type->forward_label);\n                        $html         .= '<td class=\"tracker_formelement_read_and_edit_read_section\">' . $forward_label . '</td>';\n                        if (! $read_only) {\n                            $project         = $this->report->getTracker()->getProject();\n                            $types           = $this->getAllUsableTypesInProjectWithCache($project);\n                            $types_presenter = [];\n                            $selected_type   = $type->shortname;\n                            if (isset($prefill_types[$artifact_id])) {\n                                $selected_type = $prefill_types[$artifact_id];\n                            }\n                            $is_a_usable_type_selected = false;\n                            foreach ($types as $type) {\n                                $should_select_current_type = $selected_type === $type->shortname;\n                                $is_a_usable_type_selected  = $is_a_usable_type_selected || $should_select_current_type;\n                                $types_presenter[]          = [\n                                    'shortname'     => $type->shortname,\n                                    'forward_label' => $type->forward_label,\n                                    'is_selected'   => $should_select_current_type,\n                                ];\n\n                                if ($is_parent_selector_displayed) {\n                                    continue;\n                                }\n\n                                if ($type->shortname === \\Tracker_FormElement_Field_ArtifactLink::TYPE_IS_CHILD) {\n                                    $should_select_current_type = \\Tracker_FormElement_Field_ArtifactLink::FAKE_TYPE_IS_PARENT === $selected_type;\n                                    $is_a_usable_type_selected  = $is_a_usable_type_selected || $should_select_current_type;\n                                    $types_presenter[]          = [\n                                        'shortname'     => \\Tracker_FormElement_Field_ArtifactLink::FAKE_TYPE_IS_PARENT,\n                                        'forward_label' => $type->reverse_label,\n                                        'is_selected'   => $should_select_current_type,\n                                    ];\n                                }\n                            }\n\n                            if (! $is_a_usable_type_selected) {\n                                $type = $this->getTypePresenterFactory()->getTypeEnabledInProjectFromShortname($project, $selected_type);\n                                if ($type !== null) {\n                                    $types_presenter[] = [\n                                        'shortname'     => $type->shortname,\n                                        'forward_label' => $type->forward_label,\n                                        'is_selected'   => true,\n                                    ];\n                                }\n                            }\n\n                            $name  = \"artifact[{$artifactlink_field_id}][types][{$row['id']}]\";\n                            $html .= '<td class=\"tracker_formelement_read_and_edit_edition_section\">';\n                            $html .= $renderer->renderToString(\n                                'artifactlink-type-selector',\n                                new TypeSelectorPresenter($types_presenter, $name, '')\n                            );\n                            $html .= '</td>';\n                        }\n                    }\n                    $html .= '</tr>';\n                }\n                if (! $only_rows) {\n                    $html .= $this->fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only);\n                }\n            }\n        } else {\n            $html .= '<tr class=\"tracker_report_table_no_result\" data-test=\"tracker-report-table-empty-state\">\n                          <td class=\"tlp-table-cell-empty table-cell-empty\" colspan=\"' . (count($this->getColumns()) + 2)\n                          . '\" align=\"center\">' . dgettext('tuleap-tracker', 'No activity yet') . '\n                          </td>\n                      </tr>';\n        }\n        if (! $only_rows) {\n            $html .= '</tbody>';\n            $html .= '</table>';\n        }\n        return $html;\n    }\n\n    private function getAllUsableTypesInProjectWithCache(Project $project)\n    {\n        static $all_types_project_cache = [];\n        if (isset($all_types_project_cache[$project->getID()])) {\n            return $all_types_project_cache[$project->getID()];\n        }\n        $type_presenter_factory                     = $this->getTypePresenterFactory();\n        $all_types                                  = $type_presenter_factory->getAllUsableTypesInProject($project);\n        $all_types_project_cache[$project->getID()] = $all_types;\n        return $all_types;\n    }\n\n    public function fetchAggregates($matching_ids, $extracolumn, $only_one_column, $columns, $use_data_from_db, $read_only)\n    {\n        $html = '';\n\n        //We presume that if EXTRACOLUMN_LINK then it means that we are in the ArtifactLink selector so we force read only mode\n        if ($extracolumn === self::EXTRACOLUMN_LINK) {\n            $read_only = true;\n        }\n\n        $current_user = UserManager::instance()->getCurrentUser();\n        //Insert function aggregates\n        if ($use_data_from_db) {\n            $aggregate_functions_raw = [$this->getAggregatesDao()->searchByRendererId($this->getId())];\n        } else {\n            $aggregate_functions_raw = $this->getAggregates();\n        }\n        $aggregates = [];\n        foreach ($aggregate_functions_raw as $rows) {\n            if ($rows) {\n                foreach ($rows as $row) {\n                    //is the field used as a column?\n                    if (isset($columns[$row['field_id']])) {\n                        if (! isset($aggregates[$row['field_id']])) {\n                            $aggregates[$row['field_id']] = [];\n                        }\n                        $aggregates[$row['field_id']][] = $row['aggregate'];\n                    }\n                }\n            }\n        }\n        $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, '', false);\n        $dao     = new DataAccessObject();\n        $results = [];\n        foreach ($queries as $key => $sql) {\n            if ($key === 'aggregates_group_by') {\n                foreach ($sql as $k => $s) {\n                    $results[$k] = $dao->retrieve($s);\n                }\n            } else {\n                if ($dar = $dao->retrieve($sql)) {\n                    $results = array_merge($results, $dar->getRow());\n                }\n            }\n        }\n\n        $is_first = true;\n        $html    .= '<tr valign=\"top\" class=\"tracker_report_table_aggregates\">';\n        $html    .= $this->fetchAggregatesExtraColumns($extracolumn, $only_one_column, $current_user);\n        foreach ($columns as $key => $column) {\n            $field = $column['field'];\n            if (! $field->isUsed()) {\n                continue;\n            }\n\n            $html  .= '<td data-column-id=\"' . $key . '\">';\n            $html  .= '<table><thead><tr>';\n            $html  .= $this->fetchAddAggregatesUsedFunctionsHeader($field, $aggregates, $results);\n            $html  .= '<th>';\n            $html  .= $this->fetchAddAggregatesButton($read_only, $field, $current_user, $aggregates, $is_first);\n            $html  .= '</th>';\n            $html  .= '</tr></thead><tbody><tr>';\n            $result = $this->fetchAddAggregatesUsedFunctionsValue($field, $aggregates, $results);\n            if (! $result) {\n                $html .= '<td></td>';\n            }\n            $html .= $result;\n            $html .= '</tr></tbody></table>';\n            $html .= '</td>';\n\n            $is_first = false;\n        }\n        if (isset($matching_ids['type'])) {\n            $html .= '<td><table><thead><tr><th></th></tr></thead><tbody><tr></tr></tbody></table></td>';\n        }\n        $html .= '</tr>';\n\n        return $html;\n    }\n\n    private function fetchAddAggregatesUsedFunctionsHeader(\n        Tracker_FormElement_Field $field,\n        array $used_aggregates,\n        array $results,\n    ) {\n        if (! isset($used_aggregates[$field->getId()])) {\n            return '';\n        }\n\n        $html = '';\n        foreach ($used_aggregates[$field->getId()] as $function) {\n            if (! isset($results[$field->getName() . '_' . $function])) {\n                continue;\n            }\n\n            $html .= '<th>';\n            $html .= $this->getAggregateLabel($function);\n            $html .= '</th>';\n        }\n\n        return $html;\n    }\n\n    private function getAggregateLabel(string $function): string\n    {\n        switch ($function) {\n            case 'AVG':\n                return dgettext('tuleap-tracker', 'Average');\n            case 'COUNT':\n                return dgettext('tuleap-tracker', 'Count');\n            case 'COUNT_GRBY':\n                return dgettext('tuleap-tracker', 'Count (group by)');\n            case 'MAX':\n                return dgettext('tuleap-tracker', 'Maximum');\n            case 'MIN':\n                return dgettext('tuleap-tracker', 'Minimum');\n            case 'STD':\n                return dgettext('tuleap-tracker', 'Std deviation');\n            case 'SUM':\n            default:\n                return dgettext('tuleap-tracker', 'Sum');\n        }\n    }\n\n    private function fetchAddAggregatesUsedFunctionsValue(\n        Tracker_FormElement_Field $field,\n        array $used_aggregates,\n        array $results,\n    ) {\n        if (! isset($used_aggregates[$field->getId()])) {\n            return '';\n        }\n\n        $hp   = Codendi_HTMLPurifier::instance();\n        $html = '';\n        foreach ($used_aggregates[$field->getId()] as $function) {\n            $result_key = $field->getName() . '_' . $function;\n            if (! isset($results[$result_key])) {\n                continue;\n            }\n\n            $result = $results[$result_key];\n            $html  .= '<td>';\n            if ($field->hasCustomFormatForAggregateResults()) {\n                $html .= $field->formatAggregateResult($function, $result);\n            } else {\n                if ($result instanceof LegacyDataAccessResultInterface) {\n                    if ($row = $result->getRow()) {\n                        if (isset($row[$result_key])) {\n                            //this case is for multiple selectbox/count\n                            $html .= '<label  class=\"tracker-aggregate-single-line\">';\n                            $html .= $this->formatAggregateResult($row[$result_key]);\n                            $html .= '<label>';\n                        } else {\n                            foreach ($result as $row) {\n                                $html .= '<label  class=\"tracker-aggregate-single-line\">';\n                                if ($row['label'] === null) {\n                                    $html .= '<em>' . $GLOBALS['Language']->getText('global', 'null') . '</em>';\n                                } else {\n                                    $html .= $hp->purify($row['label']);\n                                }\n                                $html .= ':&nbsp;';\n                                $html .= $this->formatAggregateResult($row['value']);\n                                $html .= '</label>';\n                            }\n                        }\n                    }\n                } else {\n                    $html .= '<label>';\n                    $html .= $this->formatAggregateResult($result);\n                    $html .= '<label>';\n                }\n            }\n            $html .= '</td>';\n        }\n\n        return $html;\n    }\n\n    private function fetchAddAggregatesButton(\n        $read_only,\n        Tracker_FormElement_Field $field,\n        PFUser $current_user,\n        array $used_aggregates,\n        $is_first,\n    ) {\n        $aggregate_functions = $field->getAggregateFunctions();\n\n        if ($read_only || $current_user->isAnonymous()) {\n            return;\n        }\n\n        if (! $aggregate_functions) {\n            return;\n        }\n\n        $html  = '';\n        $html .= '<div class=\"btn-group\">';\n        $html .= '<a href=\"#\"\n            class=\"btn btn-mini dropdown-toggle\"\n            title=\"' . dgettext('tuleap-tracker', 'Toggle an aggregate function') . '\"\n            data-toggle=\"dropdown\">';\n        $html .= '<i class=\"fa fa-plus\"></i> ';\n        $html .= '<span class=\"caret\"></span>';\n        $html .= '</a>';\n        $html .= '<ul class=\"dropdown-menu ' . ($is_first ? '' : 'pull-right') . '\">';\n        foreach ($aggregate_functions as $function) {\n            $is_used = isset($used_aggregates[$field->getId()]) && in_array($function, $used_aggregates[$field->getId()]);\n            $url     = $this->getAggregateURL($field, $function);\n            $html   .= '<li>';\n            $html   .= '<a href=\"' . $url . '\">';\n            if ($is_used) {\n                $html .= '<i class=\"fa fa-check\"></i> ';\n            }\n            $html .= $this->getAggregateLabel($function);\n            $html .= '</a>';\n            $html .= '</li>';\n        }\n        $html .= '</ul>';\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function getAggregateURL($field, $function)\n    {\n        $field_id = $field->getId();\n        $params   = [\n            'func'       => 'renderer',\n            'report'     => $this->report->getId(),\n            'renderer'   => $this->getId(),\n            'renderer_table' => [\n                'add_aggregate' => [\n                    $field_id => $function,\n                ],\n            ],\n        ];\n        return TRACKER_BASE_URL . '/?' . http_build_query($params);\n    }\n\n    private function fetchAggregatesExtraColumns($extracolumn, $only_one_column, PFUser $current_user)\n    {\n        $html        = '';\n        $inner_table = '<table><thead><tr><th></th></tr></thead></table>';\n        if ($extracolumn) {\n            $display_extracolumn = true;\n            $classname           = 'tracker_report_table_';\n            if ($extracolumn === self::EXTRACOLUMN_MASSCHANGE && $this->report->getTracker()->userIsAdmin($current_user)) {\n                $classname .= 'masschange';\n            } elseif ($extracolumn === self::EXTRACOLUMN_LINK) {\n                $classname .= 'link';\n            } elseif ($extracolumn === self::EXTRACOLUMN_UNLINK) {\n                $classname .= 'unlink';\n            } else {\n                $display_extracolumn = false;\n            }\n\n            if ($display_extracolumn) {\n                $html .= '<td class=\"' . $classname . '\" width=\"1\">';\n                $html .= $inner_table;\n                $html .= '</td>';\n            }\n        }\n        if (! $only_one_column) {\n            $html .= '<td>' . $inner_table . '</td>';\n        }\n\n        return $html;\n    }\n\n    protected function formatAggregateResult($value)\n    {\n        if (is_numeric($value)) {\n            $decimals = 2;\n            if (round($value) == $value) {\n                $decimals = 0;\n            }\n            $value = round($value, $decimals);\n        } else {\n            $value = Codendi_HTMLPurifier::instance()->purify($value);\n        }\n\n        return '<span class=\"tracker_report_table_aggregates_value\">' . $value . '</span>';\n    }\n\n    /**\n     * Build oredered query\n     *\n     * @param array                       $matching_ids The artifact to display\n     *\n     * @return array of sql queries\n     */\n    public function buildOrderedQuery($matching_ids, $columns, $aggregates = false, $store_in_session = true)\n    {\n        if ($aggregates) {\n            $select = \" SELECT 1 \";\n        } else {\n            $select = \" SELECT a.id AS id, c.id AS changeset_id \";\n        }\n        $da = CodendiDataAccess::instance();\n\n        $changeset_ids = $da->escapeIntImplode(explode(',', $matching_ids['last_changeset_id']));\n\n        $from  = \" FROM tracker_artifact AS a INNER JOIN tracker_changeset AS c ON (c.artifact_id = a.id) \";\n        $where = \" WHERE c.id IN (\" . $changeset_ids . \") \";\n        if ($aggregates) {\n            $group_by = '';\n            $ordering = false;\n        } else {\n            $group_by = ' GROUP BY id ';\n            $ordering = true;\n        }\n\n        $additionnal_select = [];\n        $additionnal_from   = [];\n        $already_seen       = [];\n\n        foreach ($columns as $column) {\n            if (! $column['field']->isUsed()) {\n                continue;\n            }\n\n            if (isset($already_seen[$column['field']->getId()])) {\n                continue;\n            }\n            $already_seen[$column['field']->getId()] = true;\n\n            $sel = false;\n            if ($aggregates) {\n                if (isset($aggregates[$column['field']->getId()])) {\n                    if ($a = $column['field']->getQuerySelectAggregate($aggregates[$column['field']->getId()])) {\n                        $sel = $a['same_query'];\n                        if ($sel) {\n                            $additionnal_select[] = $sel;\n                            $additionnal_from[]   = $column['field']->getQueryFromAggregate();\n                        }\n                    }\n                }\n            } else {\n                $sel = $column['field']->getQuerySelect();\n                if ($sel) {\n                    $additionnal_select[] = $sel;\n                    $additionnal_from[]   = $column['field']->getQueryFrom();\n                }\n            }\n        }\n\n        //build an array of queries (due to mysql max join limit\n        $queries         = [];\n        $sys_server_join = ((int) ForgeConfig::get('sys_server_join')) - 3;\n        if ($sys_server_join <= 0) { //make sure that the admin is not dumb\n            $sys_server_join = 20; //default mysql 60 / 3 (max of 3 joins per field)\n        }\n\n        $additionnal_select_chunked = array_chunk($additionnal_select, $sys_server_join);\n        $additionnal_from_chunked   = array_chunk($additionnal_from, $sys_server_join);\n\n        //both arrays are not necessary the same size\n        $n = max(count($additionnal_select_chunked), count($additionnal_from_chunked));\n        for ($i = 0; $i < $n; ++$i) {\n            //init the select and the from...\n            $inner_select = $select;\n            $inner_from   = $from;\n\n            //... and populate them\n            if (isset($additionnal_select_chunked[$i]) && count($additionnal_select_chunked[$i])) {\n                $inner_select .= ', ' . implode(', ', $additionnal_select_chunked[$i]);\n            }\n            if (isset($additionnal_from_chunked[$i]) && count($additionnal_from_chunked[$i])) {\n                $inner_from .= implode(' ', $additionnal_from_chunked[$i]);\n            }\n\n            //build the query\n            $sql = $inner_select . $inner_from . $where . $group_by;\n\n            //add it to the pool\n            $queries[] = $sql;\n        }\n\n        //Add group by aggregates\n        if ($aggregates) {\n            foreach ($columns as $column) {\n                if ($column['field']->isUsed()) {\n                    if (isset($aggregates[$column['field']->getId()])) {\n                        if ($a = $column['field']->getQuerySelectAggregate($aggregates[$column['field']->getId()])) {\n                            foreach ($a['separate_queries'] as $sel) {\n                                $queries['aggregates_group_by'][$column['field']->getName() . '_' . $sel['function']] = \"SELECT \" .\n                                    $sel['select'] .\n                                    $from . ' ' . $column['field']->getQueryFromAggregate() .\n                                    $where .\n                                    ($sel['group_by'] ? \" GROUP BY \" . $sel['group_by'] : '');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        //only sort if we have 1 query\n        // (too complicated to sort on multiple queries)\n        if ($ordering && $this->columnsCanBeTechnicallySorted($queries)) {\n            $sort = $this->getSort($store_in_session);\n            if ($this->sortHasUsedField($store_in_session)) {\n                $order = [];\n                foreach ($sort as $s) {\n                    if (! empty($s['field']) && $s['field']->isUsed()) {\n                        $order[] = $s['field']->getQueryOrderby() . ' ' . ($s['is_desc'] ? 'DESC' : 'ASC');\n                    }\n                }\n                if (! empty($order)) {\n                    $queries[0] .= \" ORDER BY \" . implode(', ', $order);\n                }\n            }\n        }\n        if (empty($queries)) {\n            $queries[] = $select . $from . $where . $group_by;\n        }\n\n        return $queries;\n    }\n\n    private function fetchMassChange($matching_ids, $total_rows, $offset)\n    {\n        $html    = '';\n        $tracker = $this->report->getTracker();\n        if ($tracker->userIsAdmin()) {\n            $nb_art    = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n            $first_row = ($nb_art / $this->chunksz) + $offset;\n            $last_row  = $first_row + $this->chunksz;\n            $html     .= '<form method=\"POST\" action=\"\" id=\"tracker_report_table_masschange_form\">';\n            $html     .= '<input type=\"hidden\" name=\"func\" value=\"display-masschange-form\" />';\n            $html     .= '<div id=\"tracker_report_table_masschange_panel\">';\n            $html     .= '<input id=\"masschange_btn_checked\" type=\"submit\" class=\"btn\" name=\"renderer_table[masschange_checked]\" value=\"' . dgettext('tuleap-tracker', 'Mass Change Checked') . '\" /> ';\n            $html     .= '<input id=\"masschange_btn_all\" type=\"submit\" class=\"btn\" name=\"renderer_table[masschange_all]\" value=\"' . sprintf(dgettext('tuleap-tracker', 'Mass Change All (%1$s artifacts)'), $total_rows) . '\" />';\n            $html     .= '</div>';\n            $html     .= '</form>';\n        }\n        return $html;\n    }\n\n    protected function getFieldFactory()\n    {\n        return Tracker_FormElementFactory::instance();\n    }\n\n    /**\n     * Duplicate the renderer\n     */\n    public function duplicate($from_report_id, $field_mapping, MappingRegistry $mapping_registry): void\n    {\n        //duplicate sort\n        $this->getSortDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n        //duplicate columns\n        $this->getColumnsDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n        //duplicate aggregates\n        $this->getAggregatesDao()->duplicate($from_report_id->id, $this->id, $field_mapping);\n    }\n\n    public function getType()\n    {\n        return self::TABLE;\n    }\n\n    /**\n     * Process the request\n     * @param HTTPRequest $request\n     */\n    public function processRequest(TrackerManager $tracker_manager, $request, PFUser $current_user)\n    {\n        $ff = $this->getFieldFactory();\n\n        $renderer_parameters = $request->get('renderer_table');\n        $this->initiateSession();\n        if ($renderer_parameters && is_array($renderer_parameters)) {\n            //Update the chunksz parameter\n            if (isset($renderer_parameters['chunksz'])) {\n                $new_chunksz = abs((int) $renderer_parameters['chunksz']);\n                if ($new_chunksz && ($this->chunksz != $new_chunksz)) {\n                    $this->report_session->set(\"{$this->id}.chunksz\", $new_chunksz);\n                    $this->report_session->setHasChanged();\n                    $this->chunksz = $new_chunksz;\n                }\n            }\n\n            //Add an aggregate function\n            if (isset($renderer_parameters['add_aggregate']) && is_array($renderer_parameters['add_aggregate'])) {\n                $column_id = key($renderer_parameters['add_aggregate']);\n                $agg       = current($renderer_parameters['add_aggregate']);\n                //Is the field used by the tracker?\n                if ($field = $ff->getUsedFormElementById($column_id)) {\n                    //Has the field already an aggregate function?\n                    $aggregates = $this->getAggregates();\n                    if (isset($aggregates[$column_id])) {\n                        //Yes. Check if it has already the wanted aggregate function\n                        $found = false;\n                        foreach ($aggregates[$column_id] as $key => $row) {\n                            if ($row['aggregate'] === $agg) {\n                                $found = true;\n                                //remove it (toggle)\n                                unset($aggregates[$column_id][$key]);\n                                $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", $aggregates[$column_id]);\n                                break;\n                            }\n                        }\n                        if (! $found) {\n                            //Add it\n                            $aggregates[$column_id][] = ['renderer_id' => $this->id, 'field_id' => $column_id, 'aggregate' => $agg];\n                            $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", $aggregates[$column_id]);\n                        }\n                        $this->report_session->setHasChanged();\n                        //TODO\n                    } else {\n                        //No. Add it\n                        $this->report_session->set(\"{$this->id}.aggregates.{$column_id}\", [['renderer_id' => $this->id, 'field_id' => $column_id, 'aggregate' => $agg]]);\n                        $this->report_session->setHasChanged();\n                    }\n                }\n            }\n\n            //toggle a sort column\n            if (isset($renderer_parameters['sort_by'])) {\n                $sort_by = (int) $renderer_parameters['sort_by'];\n                if ($sort_by) {\n                    if ($field = $ff->getUsedFormElementById($sort_by)) {\n                        if ($this->isFieldUsedAsColumn($field)) {\n                            //Is the field already used to sort results?\n                            $sort_fields = $this->getSort();\n                            if (isset($sort_fields[$sort_by])) {\n                                $is_desc = &$this->report_session->get(\"{$this->id}.sort.{$sort_by}.is_desc\");\n                                //toggle\n                                $desc = 1;\n                                if ($is_desc == 1) {\n                                    $desc = 0;\n                                }\n                                $this->report_session->set(\"{$this->id}.sort.{$sort_by}.is_desc\", $desc);\n                                $this->report_session->setHasChanged();\n                            } else {\n                                if (! $this->multisort) {\n                                    //Drop existing sort\n                                    foreach ($sort_fields as $id => $sort_field) {\n                                        $this->report_session->remove(\"{$this->id}.sort\", $id);\n                                    }\n                                }\n                                //Add new sort\n                                $sort = $this->report_session->get(\"{$this->id}.sort\");\n                                $rank = 0;\n                                if ($sort !== null) {\n                                    $rank = count($sort);\n                                }\n                                $this->report_session->set(\"{$this->id}.sort.{$sort_by}\", ['is_desc' => 0, 'rank' => $rank]);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Reset sort\n            if (isset($renderer_parameters['resetsort'])) {\n                //Drop existing sort\n                $this->report_session->remove(\"{$this->id}\", \"sort\");\n                $this->report_session->setHasChanged();\n            }\n\n            //Toggle multisort\n            if (isset($renderer_parameters['multisort'])) {\n                $sort_fields     = $this->getSort();\n                $keep_it         = key($sort_fields);\n                $this->multisort = ! $this->multisort;\n                $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n                if (! $this->multisort) {\n                    $sort = $this->report_session->get(\"{$this->id}.sort\");\n                    foreach ($sort as $column_id => $properties) {\n                        if ($column_id != $keep_it) {\n                            $this->report_session->remove(\"{$this->id}.sort\", $column_id);\n                            $this->report_session->setHasChanged();\n                        }\n                    }\n                }\n            }\n\n            //Remove column\n            if (isset($renderer_parameters['remove-column'])) {\n                $column_id = $renderer_parameters['remove-column'];\n                if ($column_id) {\n                    $columns = $this->getColumns();\n                    if (isset($columns[$column_id])) {\n                        //Is the field already used to sort results?\n                        $sort_fields = $this->getSort();\n                        if (isset($sort_fields[$column_id])) {\n                            //remove from session\n                            $this->report_session->remove(\"{$this->id}.sort\", $column_id);\n                            $this->report_session->setHasChanged();\n                        }\n                        //remove from session\n                        $this->report_session->remove(\"{$this->id}.columns\", $column_id);\n                        $this->report_session->setHasChanged();\n                    }\n                }\n            }\n\n            //Add column\n            if (isset($renderer_parameters['add-column']['field-id'])) {\n                if ($field_id = (int) $renderer_parameters['add-column']['field-id']) {\n                    if ($field = $ff->getUsedFormElementById($field_id)) {\n                        $columns      = $this->getColumns();\n                        $key          = $field->getId();\n                        $artlink_type = null;\n                        if (isset($renderer_parameters['add-column']['artlink-type'])) {\n                            $artlink_type = $renderer_parameters['add-column']['artlink-type'];\n                            $key         .= '_' . $artlink_type;\n                        }\n                        if (! isset($columns[$key])) {\n                            $session_table_columns = $this->report_session->get(\"{$this->id}.columns\") ?? [];\n                            $nb_col                = count($session_table_columns);\n                            //Update session with new column\n                            $this->report_session->set(\n                                \"{$this->id}.columns.{$key}\",\n                                [\n                                    'field_id'              => $field_id,\n                                    'width'                 => 12,\n                                    'rank'                  => $nb_col,\n                                    'artlink_nature'        => $artlink_type,\n                                    'artlink_nature_format' => null,\n                                ]\n                            );\n                            $this->report_session->setHasChanged();\n\n                            if ($request->isAjax()) {\n                                $matching_ids     = $this->report->getMatchingIds();\n                                $offset           = (int) $request->get('offset');\n                                $extracolumn      = self::NO_EXTRACOLUMN;\n                                $total_rows       = $matching_ids['id'] ? substr_count($matching_ids['id'], ',') + 1 : 0;\n                                $link_artifact_id = (int) $request->get('link-artifact-id');\n\n                                echo $this->fetchTHead($extracolumn, $key, ! $link_artifact_id);\n                                $use_data_from_db = false;\n                                $aggregates       = false;\n                                $store_in_session = true;\n\n                                $columns = $this->getTableColumns($key, $use_data_from_db);\n                                $queries = $this->buildOrderedQuery($matching_ids, $columns, $aggregates, $store_in_session);\n\n                                echo $this->fetchTBody($matching_ids, $total_rows, $queries, $columns, $offset, $extracolumn, $key);\n                            }\n                        }\n                    }\n                }\n            }\n\n            //Reorder columns\n            if (isset($renderer_parameters['reorder-column']) && is_array($renderer_parameters['reorder-column'])) {\n                $column_id    = key($renderer_parameters['reorder-column']);\n                $new_position = (int) current($renderer_parameters['reorder-column']);\n                if ($column_id) {\n                    $columns = $this->getColumns();\n                    if (isset($columns[$column_id])) {\n                        if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                            $columns = $this->report_session->get(\"{$this->id}.columns\") ?? [];\n                            if ($new_position == '-1') {\n                                //beginning\n                                foreach ($columns as $id => $properties) {\n                                    $columns[$id]['rank'] = $properties['rank'] + 1;\n                                    $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $columns[$id]['rank']);\n                                }\n                                $columns[$column_id]['rank'] = 0;\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.rank\", $columns[$column_id]['rank']);\n                            } elseif ($new_position == '-2') {\n                                //end\n                                $max = 0;\n                                foreach ($columns as $id => $properties) {\n                                    if ($properties['rank'] > $max) {\n                                        $max = $properties['rank'];\n                                    }\n                                    $properties['rank'] = $properties['rank'] - 1;\n                                    $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $properties['rank']);\n                                }\n                                $columns[$column_id]['rank'] = $max + 1;\n                                $this->report_session->set(\n                                    \"{$this->id}.columns.{$column_id}.rank\",\n                                    $columns[$column_id]['rank']\n                                );\n                            } else {\n                                //other case\n                                $replaced_rank = $columns[$new_position]['rank'] + 1;   // rank of the element to shift right\n                                foreach ($columns as $id => $properties) {\n                                    if ($properties['rank'] >= $replaced_rank && $id != $column_id) {\n                                        $columns[$id]['rank'] += 1;\n                                        $this->report_session->set(\"{$this->id}.columns.{$id}.rank\", $columns[$id]['rank']);\n                                    }\n                                }\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.rank\", $replaced_rank);\n                                $columns[$column_id]['rank'] = $replaced_rank;\n                            }\n                            $this->report_session->setHasChanged();\n                        }\n                    }\n                }\n            }\n\n            //Resize column\n            if (isset($renderer_parameters['resize-column']) && is_array($renderer_parameters['resize-column'])) {\n                foreach ($renderer_parameters['resize-column'] as $column_id => $new_width) {\n                    $new_width = (int) $new_width;\n                    if ($column_id) {\n                        $columns = $this->getColumns();\n                        if (isset($columns[$column_id])) {\n                            if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.width\", $new_width);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Define format of column\n            if (isset($renderer_parameters['configure-column']) && is_array($renderer_parameters['configure-column'])) {\n                foreach ($renderer_parameters['configure-column'] as $column_id => $format) {\n                    if ($column_id) {\n                        $columns = $this->getColumns();\n                        if (isset($columns[$column_id])) {\n                            if ($ff->getUsedFormElementById($columns[$column_id]['field_id'])) {\n                                $this->report_session->set(\"{$this->id}.columns.{$column_id}.artlink_nature_format\", $format);\n                                $this->report_session->setHasChanged();\n                            }\n                        }\n                    }\n                }\n            }\n\n            //export\n            if (isset($renderer_parameters['export']) && ! $current_user->isAnonymous()) {\n                $event = new ProcessExportEvent($renderer_parameters, $this, $current_user, \\Tuleap\\ServerHostname::HTTPSUrl());\n                EventManager::instance()->processEvent($event);\n                $only_columns = isset($renderer_parameters['export_only_displayed_fields']) && $renderer_parameters['export_only_displayed_fields'];\n                $this->exportToCSV($only_columns);\n            }\n        }\n    }\n\n    private function getFieldWhenUsingTypes(SimpleXMLElement $node, array $field_info, $xmlMapping)\n    {\n        $field = null;\n\n        if (isset($field_info['artlink_nature']) || isset($field_info['artlink_nature_format'])) {\n            $ref = array_search($field_info['field_id'], $xmlMapping);\n            if ($ref) {\n                $field = $node->addChild('field');\n                $field->addAttribute('REF', $ref);\n                if (isset($field_info['artlink_nature'])) {\n                    $field->addAttribute('artlink-nature', $field_info['artlink_nature']);\n                }\n                if (isset($field_info['artlink_nature_format'])) {\n                    $field->addAttribute('artlink-nature-format', $field_info['artlink_nature_format']);\n                }\n            }\n        }\n\n        return $field;\n    }\n\n    private function getField(SimpleXMLElement $node, $exported_field_id, $xmlMapping)\n    {\n        $field = null;\n\n        $ref = array_search($exported_field_id, $xmlMapping);\n        if ($ref) {\n            $field = $node->addChild('field');\n            $field->addAttribute('REF', $ref);\n        }\n\n        return $field;\n    }\n\n    /**\n     * Transforms Tracker_Renderer into a SimpleXMLElement\n     *\n     * @param SimpleXMLElement $root the node to which the renderer is attached (passed by reference)\n     */\n    public function exportToXml(SimpleXMLElement $root, array $xmlMapping)\n    {\n        parent::exportToXml($root, $xmlMapping);\n        $root->addAttribute('chunksz', $this->chunksz);\n        if ($this->multisort) {\n            $root->addAttribute('multisort', $this->multisort);\n        }\n\n        $child = $root->addChild('columns');\n        foreach ($this->getColumns() as $key => $col) {\n            $field = $this->getFieldWhenUsingTypes($child, $col, $xmlMapping);\n            if (! $field) {\n                $field = $this->getField($child, $key, $xmlMapping);\n            }\n        }\n\n        //TODO : add aggregates in XML export\n        /*if ($this->getAggregates()) {\n            $child = $root->addChild('aggregates');\n            foreach ($this->getAggregates() as $field_id => $aggregates) {\n                foreach ($aggregates as $aggregate) {\n                    $child->addChild('aggregate')->addAttribute('REF', array_search($field_id, $xmlMapping))\n                                                 ->addAttribute('function', $aggregate);\n                }\n            }\n        }*/\n\n        if ($this->getSort()) {\n            $child = $root->addChild('sort');\n            foreach ($this->getSort() as $key => $sort) {\n                 $child->addChild('field')->addAttribute('REF', array_search($key, $xmlMapping));\n            }\n        }\n    }\n\n    private function exportHeadAllReportColumns(array $column)\n    {\n        $title = $column['field']->getName();\n        if (isset($column['artlink_nature'])) {\n            $type = $column['artlink_nature'];\n            if (! $type) {\n                $type = dgettext('tuleap-tracker', 'No type');\n            }\n            $title .= \" (\" . $type . \")\";\n        }\n\n        return $title;\n    }\n\n    private function exportHeadReportColumn(array $column)\n    {\n        $head  = [];\n        $title = $column['field']->getName();\n        if ($this->report->getTracker()->isProjectAllowedToUseType()) {\n            if ($this->getFieldFactory()->getType($column['field']) === Tracker_FormElement_Field_ArtifactLink::TYPE) {\n                $head[] = $title;\n                foreach ($this->getTypePresenterFactory()->getAllUsedTypesByProject($this->report->getTracker()->getProject()) as $type) {\n                    if (! $type) {\n                        $type = dgettext('tuleap-tracker', 'No type');\n                    }\n                    $head[] = $title . \" (\" . $type . \")\";\n                }\n            } else {\n                $head[] = $title;\n            }\n        } else {\n            $head[] = $title;\n        }\n\n        return $head;\n    }\n\n    private function exportAllReportColumn(array $column, array $row)\n    {\n        $line = [];\n\n        $value  = isset($row[$column['field']->getName()]) ? $row[$column['field']->getName()] : null;\n        $line[] = $column['field']->fetchCSVChangesetValue($row['id'], $row['changeset_id'], $value, $this->report);\n\n        if (\n            $this->report->getTracker()->isProjectAllowedToUseType() &&\n            $this->getFieldFactory()->getType($column['field']) === Tracker_FormElement_Field_ArtifactLink::TYPE\n        ) {\n            foreach ($this->getTypePresenterFactory()->getAllUsedTypesByProject($this->report->getTracker()->getProject()) as $type) {\n                $line[] = $column['field']->fetchCSVChangesetValueWithType(\n                    $row['changeset_id'],\n                    $type,\n                    ''\n                );\n            }\n        }\n\n        return $line;\n    }\n\n    private function exportReportColumn(array $column, array $row)\n    {\n        $line = [];\n\n        if (isset($column['artlink_nature'])) {\n            $format = isset($column['artlink_nature_format']) ? $column['artlink_nature_format'] : '';\n            $line[] = $column['field']->fetchCSVChangesetValueWithType(\n                $row['changeset_id'],\n                $column['artlink_nature'],\n                $format\n            );\n        } else {\n            $value  = isset($row[$column['field']->getName()]) ? $row[$column['field']->getName()] : null;\n            $line[] = $column['field']->fetchCSVChangesetValue($row['id'], $row['changeset_id'], $value, $this->report);\n        }\n\n        return $line;\n    }\n\n    /**\n     * Export results to csv\n     *\n     * @param bool $only_columns True if we need to export only the displayed columns. False for all the fields.\n     *\n     * @return void\n     */\n    protected function exportToCSV($only_columns)\n    {\n        $matching_ids = $this->report->getMatchingIds();\n\n        if ($only_columns) {\n            $columns = $this->reorderColumnsByRank($this->getColumns());\n        } else {\n            $columns     = [];\n            $used_fields = $this->getFieldFactory()->getUsedFields($this->report->getTracker());\n            foreach ($used_fields as $field) {\n                $columns[]['field'] = $field;\n            }\n        }\n\n        $lines = [];\n        $head  = ['aid'];\n\n        foreach ($columns as $column) {\n            if (! CSVFieldUsageChecker::canFieldBeExportedToCSV($column['field'])) {\n                continue;\n            }\n\n            if ($only_columns) {\n                $head[] = $this->exportHeadAllReportColumns($column);\n            } else {\n                $head = array_merge($head, $this->exportHeadReportColumn($column));\n            }\n        }\n\n        $lines[] = $head;\n\n        $queries = $this->buildOrderedQuery($matching_ids, $columns);\n        $dao     = new DataAccessObject();\n        $results = [];\n        foreach ($queries as $sql) {\n            $results[] = $dao->retrieve($sql);\n        }\n\n        if (! empty($results[0])) {\n            //extract the first results\n            $first_result = array_shift($results);\n\n            foreach ($first_result as $row) { //id, f1, f2\n                //merge the row with the other results\n                foreach ($results as $result) {\n                    if ($result === false) {\n                        continue;\n                    }\n                    //[id, f1, f2] + [id, f3, f4]\n                    $row = array_merge($row, $result->getRow());\n                    //row == id, f1, f2, f3, f4...\n                }\n\n                //build the csv line\n                $line   = [];\n                $line[] = $row['id'];\n\n                foreach ($columns as $column) {\n                    if (! CSVFieldUsageChecker::canFieldBeExportedToCSV($column['field'])) {\n                        continue;\n                    }\n\n                    if ($only_columns) {\n                        $line = array_merge($line, $this->exportReportColumn($column, $row));\n                    } else {\n                        $line = array_merge($line, $this->exportAllReportColumn($column, $row));\n                    }\n                }\n\n                $lines[] = $line;\n            }\n\n            $separator                 = \",\";   // by default, comma.\n            $user                      = UserManager::instance()->getCurrentUser();\n            $separator_csv_export_pref = $user->getPreference('user_csv_separator');\n            switch ($separator_csv_export_pref) {\n                case \"comma\":\n                    $separator = ',';\n                    break;\n                case \"semicolon\":\n                    $separator = ';';\n                    break;\n                case \"tab\":\n                    $separator = chr(9);\n                    break;\n            }\n\n            $http      = Codendi_HTTPPurifier::instance();\n            $file_name = str_replace(' ', '_', 'artifact_' . $this->report->getTracker()->getItemName());\n            header('Content-Disposition: filename=' . $http->purify($file_name) . '_' . $this->report->getTracker()->getProject()->getUnixName() . '.csv');\n            header('Content-type: text/csv');\n            $csv_file = fopen(\"php://output\", \"a\");\n            $this->addBOMToCSVContent($csv_file);\n            foreach ($lines as $line) {\n                fputcsv($csv_file, $line, $separator, '\"');\n            }\n            die();\n        } else {\n            $GLOBALS['Response']->addFeedback('error', 'Unable to export (too many fields?)');\n        }\n    }\n\n    private function addBOMToCSVContent($csv_file)\n    {\n        $bom = (chr(0xEF) . chr(0xBB) . chr(0xBF));\n        fputs($csv_file, $bom);\n    }\n\n    /**\n     * Save columns in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveColumnsRenderer($renderer_id)\n    {\n        $columns = $this->getColumns();\n        if (! is_array($columns)) {\n            return;\n        }\n\n        $type_factory  = $this->getTypePresenterFactory();\n        $field_factory = $this->getFieldFactory();\n        foreach ($columns as $key => $properties) {\n            $field = $field_factory->getUsedFormElementById($properties['field_id']);\n            if (! $field) {\n                continue;\n            }\n\n            $type = $properties['artlink_nature'];\n            if (isset($type) && ! $type_factory->getFromShortname($type)) {\n                continue;\n            }\n\n            $this->getColumnsDao()->create(\n                $renderer_id,\n                $properties['field_id'],\n                $properties['width'],\n                $properties['rank'],\n                $properties['artlink_nature'],\n                $properties['artlink_nature_format']\n            );\n        }\n    }\n\n    /**\n     * Save aggregates in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveAggregatesRenderer($renderer_id)\n    {\n        $aggregates = $this->getAggregates();\n        $ff         = $this->getFieldFactory();\n        //Add columns in db\n        if (is_array($aggregates)) {\n            $dao = $this->getAggregatesDao();\n            foreach ($aggregates as $field_id => $aggs) {\n                if ($field = $ff->getUsedFormElementById($field_id)) {\n                    foreach ($aggs as $agg) {\n                        $dao->create($renderer_id, $field_id, $agg['aggregate']);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Save multisort/chunksz in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveRendererProperties($renderer_id)\n    {\n        $dao = new Tracker_Report_Renderer_TableDao();\n        if (! $dao->searchByRendererId($renderer_id)->getRow()) {\n            $dao->create($renderer_id, $this->chunksz);\n        }\n        $dao->save($renderer_id, $this->chunksz, $this->multisort);\n    }\n\n    /**\n     * Save sort in db\n     *\n     * @param int $renderer_id the id of the renderer\n     */\n    protected function saveSortRenderer($renderer_id)\n    {\n        $sort = $this->getSort();\n        if (is_array($sort)) {\n            foreach ($sort as $field_id => $properties) {\n                $this->getSortDao()->create($renderer_id, $field_id, $properties['is_desc'], $properties['rank']);\n            }\n        }\n    }\n\n    /**\n     * Create a renderer - add in db\n     *\n     * @return bool true if success, false if failure\n     */\n    public function create()\n    {\n        $success = true;\n        $rrf     = Tracker_Report_RendererFactory::instance();\n\n        if ($renderer_id = $rrf->saveRenderer($this->report, $this->name, $this->description, $this->getType())) {\n            //columns\n            $this->saveColumnsRenderer($renderer_id);\n\n            //aggregates\n            $this->saveAggregatesRenderer($renderer_id);\n\n            //MultiSort/Chunksz\n            $this->saveRendererProperties($renderer_id);\n\n            //Sort\n            $this->saveSortRenderer($renderer_id);\n        }\n        return $success;\n    }\n\n\n    /**\n     * Update the renderer\n     *\n     * @return bool true if success, false if failure\n     */\n    public function update()\n    {\n        $success = true;\n        if ($this->id > 0) {\n            //first delete existing columns and sort\n            $this->getSortDao()->delete($this->id);\n            $this->getColumnsDao()->delete($this->id);\n            $this->getAggregatesDao()->deleteByRendererId($this->id);\n\n            //columns\n            $this->saveColumnsRenderer($this->id);\n\n            //aggregates\n            $this->saveAggregatesRenderer($this->id);\n\n            //MultiSort/Chunksz\n            $this->saveRendererProperties($this->id);\n\n            //Sort\n            $this->saveSortRenderer($this->id);\n        }\n        return $success;\n    }\n\n    /**\n     * Set the session\n     *\n     */\n    public function setSession($renderer_id = null)\n    {\n        if (! $renderer_id) {\n            $renderer_id = $this->id;\n        }\n        $this->report_session->set(\"{$this->id}.name\", $this->name);\n        $this->report_session->set(\"{$this->id}.description\", $this->description);\n        $this->report_session->set(\"{$this->id}.chunksz\", $this->chunksz);\n        $this->report_session->set(\"{$this->id}.multisort\", $this->multisort);\n        $this->report_session->set(\"{$this->id}.rank\", $this->rank);\n    }\n\n    /**\n     * Finnish saving renderer to database by creating colunms\n     *\n     * @param Tracker_Report_Renderer $renderer containing the columns\n     */\n    public function afterSaveObject(Tracker_Report_Renderer $renderer)\n    {\n        $renderer->injectUnsavedColumnsInRendererDB($this);\n        $this->saveAggregates($renderer->getAggregates());\n        $this->saveSort($renderer->getSort());\n    }\n\n    public function injectUnsavedColumnsInRendererDB(Tracker_Report_Renderer_Table $renderer)\n    {\n        $renderer->saveColumns($this->_columns);\n    }\n\n    /**\n     *Test if sort contains at least one used field\n     *\n     * @return bool true f sort has at least one used field\n     */\n    public function sortHasUsedField($store_in_session = true)\n    {\n        $sort = $this->getSort($store_in_session);\n        foreach ($sort as $s) {\n            if (isset($s['field']) && $s['field']->isUsed()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     *Test if multisort does not contain unused fields\n     *\n     *@return bool true if still multisort\n     */\n    public function isMultisort()\n    {\n        $sort = $this->getSort();\n        $used = 0;\n        foreach ($sort as $s) {\n            if ($s['field']->isUsed()) {\n                $used++;\n            }\n        }\n        if ($used < 2) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private function getSortIcon($is_desc)\n    {\n        return ' <i class=\"fa fa-caret-' . ( $is_desc ? 'down' : 'up' ) . '\"></i>';\n    }\n\n    public function getIcon()\n    {\n        return 'fa fa-list-ul';\n    }\n\n    private function fetchViewButtons($report_can_be_modified, PFUser $current_user)\n    {\n        $html  = '';\n        $html .= '<div id=\"tracker_report_renderer_view_controls\">';\n        if ($this->sortHasUsedField()) {\n            //reset sort\n            $reset_sort_params = [\n                'report'                    => $this->report->id,\n                'renderer'                  => $this->id,\n                'func'                      => 'renderer',\n                'renderer_table[resetsort]' => 1,\n            ];\n            $html             .= '<div class=\"btn-group\"><a class=\"btn btn-mini\" href=\"?' . http_build_query($reset_sort_params) . '\">'\n                . '<i class=\"fa fa-reply\"></i> '\n                . dgettext('tuleap-tracker', 'Reset sort')\n                . '</a></div> ';\n\n            //toggle multisort\n            $multisort_params = [\n                'report'                    => $this->report->id,\n                'renderer'                  => $this->id,\n                'func'                      => 'renderer',\n                'renderer_table[multisort]' => 1,\n            ];\n            $multisort_label  = dgettext('tuleap-tracker', 'Enable multisort');\n            if ($this->multisort) {\n                $multisort_label = dgettext('tuleap-tracker', 'Disable multisort');\n            }\n            $html .= '<div class=\"btn-group\"><a class=\"btn btn-mini\" href=\"?' . http_build_query($multisort_params) . '\">'\n                . '<i class=\"fa fa-sort\"></i> '\n                . $multisort_label\n                . '</a></div> ';\n        }\n\n        if ($report_can_be_modified && ! $current_user->isAnonymous()) {\n            $html .= $this->fetchAddColumn();\n        }\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    private function isFieldUsedAsColumn(Tracker_FormElement_Field $field)\n    {\n        $columns = $this->getColumns();\n        if (isset($columns[$field->getId()])) {\n            return true;\n        }\n\n        foreach ($columns as $column) {\n            if ($column['field_id'] == $field->getId()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private function columnsCanBeTechnicallySorted(array $queries)\n    {\n        return count($queries) <= 1;\n    }\n\n    /**\n     * @return TypePresenterFactory\n     */\n    private function getTypePresenterFactory()\n    {\n        $type_dao                = new TypeDao();\n        $artifact_link_usage_dao = new ArtifactLinksUsageDao();\n\n        return new TypePresenterFactory($type_dao, $artifact_link_usage_dao);\n    }\n\n    public function getJavascriptDependencies()\n    {\n        return [\n            ['file' => RelativeDatesAssetsRetriever::retrieveAssetsUrl(), 'unique-name' => 'tlp-relative-dates'],\n        ];\n    }\n\n    public function getStylesheetDependencies(): CssAssetCollection\n    {\n        $assets = new IncludeAssets(\n            __DIR__ . '/../../../frontend-assets',\n            '/assets/trackers'\n        );\n        return new CssAssetCollection([new \\Tuleap\\Layout\\CssAssetWithoutVariantDeclinaisons($assets, 'tracker-bp')]);\n    }\n}\n", "<?php\n/**\n * Copyright (c) Enalean 2020-present. All rights reserved\n * Copyright (c) STMicroelectronics 2016. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\Tracker\\Artifact\\Artifact;\nuse Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;\nuse Tuleap\\Tracker\\FormElement\\TrackerFormElementExternalField;\nuse Tuleap\\TrackerEncryption\\ChangesetValue;\nuse Tuleap\\TrackerEncryption\\Dao\\ValueDao;\n\nclass Tracker_FormElement_Field_Encrypted extends Tracker_FormElement_Field implements TrackerFormElementExternalField // @codingStandardsIgnoreLine\n{\n    /**\n     * @return string html\n     */\n    protected function fetchSubmitValue(array $submitted_values)\n    {\n        $value = $this->getValueFromSubmitOrDefault($submitted_values);\n\n        $html  = '<div class=\"input-append encrypted-field\">';\n        $html .= $this->fetchInput($value, 'password');\n        $html .= $this->fetchButton();\n        $html .= '</div>';\n\n        return $html;\n    }\n\n    /**\n     * @return string html\n     */\n    private function fetchButton()\n    {\n        $html = '<button class=\"btn\" type=\"button\" id=\"show_password_' . $this->id . '\">\n                     <span id=\"show_password_icon_' . $this->id . '\" class=\"fa fa-eye-slash\"></span>\n                 </button>';\n\n        return $html;\n    }\n\n    /**\n     * @return string html\n     */\n    protected function fetchAdminFormElement()\n    {\n        return $this->fetchSubmitValue([]);\n    }\n\n    public static function getFactoryLabel()\n    {\n        return dgettext('tuleap-tracker_encryption', 'Encrypted field');\n    }\n\n    public static function getFactoryDescription()\n    {\n          return dgettext('tuleap-tracker_encryption', 'Encrypted field');\n    }\n\n    public static function getFactoryIconUseIt()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    public static function getFactoryIconCreate()\n    {\n        return $GLOBALS['HTML']->getImagePath('ic/lock.png');\n    }\n\n    protected function validate(Artifact $artifact, $value)\n    {\n        $last_changeset_value = $this->getLastChangesetValue($artifact);\n        if (\n            $last_changeset_value !== null\n            && $last_changeset_value->getValue() === $value\n        ) {\n            return true;\n        }\n\n        $maximum_characters_allowed = $this->getMaxSizeAllowed();\n        if ($maximum_characters_allowed !== 0 && mb_strlen($value) > $maximum_characters_allowed) {\n            $GLOBALS['Response']->addFeedback(\n                Feedback::ERROR,\n                sprintf(dgettext('tuleap-tracker', '%1$s can not contain more than %2$s characters.'), $this->getLabel(), $maximum_characters_allowed)\n            );\n            return false;\n        }\n        return true;\n    }\n\n    private function getMaxSizeAllowed()\n    {\n        $dao_pub_key = new TrackerPublicKeyDao();\n        $value_dao   = new ValueDao();\n        $tracker_key = new Tracker_Key($dao_pub_key, $value_dao, $this->getTrackerId());\n        $key         = $tracker_key->getKey();\n\n        return $tracker_key->getFieldSize($key);\n    }\n\n    protected function saveValue(\n        $artifact,\n        $changeset_value_id,\n        $value,\n        ?Tracker_Artifact_ChangesetValue $previous_changesetvalue,\n        CreatedFileURLMapping $url_mapping,\n    ) {\n        if ($value != \"\") {\n            $dao_pub_key = new TrackerPublicKeyDao();\n            $value_dao   = new ValueDao();\n            $tracker_key = new Tracker_Key($dao_pub_key, $value_dao, $artifact->tracker_id);\n            try {\n                $encryption_manager = new Encryption_Manager($tracker_key);\n                return $this->getValueDao()->create($changeset_value_id, $encryption_manager->encrypt($value));\n            } catch (Tracker_EncryptionException $exception) {\n                return false;\n            }\n        } else {\n            return $this->getValueDao()->create($changeset_value_id, $value);\n        }\n    }\n\n    public function accept(Tracker_FormElement_FieldVisitor $visitor)\n    {\n        return $visitor->visitExternalField($this);\n    }\n\n    public function getRESTAvailableValues()\n    {\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see fetchCriteria\n     */\n    public function fetchCriteriaValue($criteria)\n    {\n        return '';\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function fetchRawValue($value)\n    {\n        return '';\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     */\n    public function getCriteriaFrom($criteria)\n    {\n        return '';\n    }\n\n    public function getQueryFrom()\n    {\n        $R1 = 'R1_' . $this->id;\n        $R2 = 'R2_' . $this->id;\n\n        return \"LEFT JOIN ( tracker_changeset_value AS $R1\n                    INNER JOIN tracker_changeset_value_encrypted AS $R2 ON ($R2.changeset_value_id = $R1.id)\n                ) ON ($R1.changeset_id = c.id AND $R1.field_id = \" . $this->id . \" )\";\n    }\n\n    public function getQuerySelect(): string\n    {\n        $R2 = 'R2_' . $this->id;\n\n        return \"$R2.value AS \" . $this->getQuerySelectName();\n    }\n\n    /**\n     * @param Tracker_Report_Criteria $criteria\n     *\n     * @return string\n     * @see getCriteriaFrom\n     */\n    public function getCriteriaWhere($criteria)\n    {\n        return '';\n    }\n\n    protected function getCriteriaDao()\n    {\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchArtifactValue(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        $html = '';\n        if (\n            is_array($submitted_values)\n            && isset($submitted_values[$this->getId()])\n            && $submitted_values[$this->getId()] !== false\n        ) {\n            $value = $submitted_values[$this->getId()];\n        } else {\n            if ($value != null) {\n                $value = $value->getValue();\n            }\n        }\n        $html .= $this->fetchEditInput($value);\n\n        return $html;\n    }\n\n    /**\n     * @return string\n     */\n    public function fetchArtifactValueReadOnly(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n    ) {\n        if (isset($value) === false || $value->getValue() === '') {\n            return $this->getNoValueLabel();\n        }\n\n        $purifier = Codendi_HTMLPurifier::instance();\n\n        return $purifier->purify($value->getValue());\n    }\n\n    protected function getHiddenArtifactValueForEdition(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value,\n        array $submitted_values,\n    ) {\n        return '<div class=\"tracker_hidden_edition_field\" data-field-id=\"' . $this->getId() . '\">' .\n            $this->fetchArtifactValue($artifact, $value, $submitted_values) . '</div>';\n    }\n\n    private function fetchInput($value, $field_type)\n    {\n        $html_purifier = Codendi_HTMLPurifier::instance();\n\n        return '<input\n            type=\"' . $field_type . '\"\n            autocomplete=\"off\"\n            id=\"password_' . $this->id . '\"\n            class=\"form-control\"\n            name=\"artifact[' . $this->id . ']\"\n            maxlength=\"' . $this->getMaxSizeAllowed() . '\"\n            value= \"' . $html_purifier->purify($value, CODENDI_PURIFIER_CONVERT_HTML) . '\" />';\n    }\n\n    private function fetchEditInput($value)\n    {\n        return $this->fetchInput($value, 'text');\n    }\n\n    protected function fetchArtifactValueWithEditionFormIfEditable(\n        Artifact $artifact,\n        ?Tracker_Artifact_ChangesetValue $value = null,\n        $submitted_values = [],\n    ) {\n        return \"<div class='tracker-form-element-encrypted'>\" . $this->fetchArtifactValueReadOnly($artifact, $value) . \"</div>\" .\n            $this->getHiddenArtifactValueForEdition($artifact, $value, $submitted_values);\n    }\n\n    /**\n     * @return string html\n     */\n    protected function fetchSubmitValueMasschange()\n    {\n        return '';\n    }\n\n    /**\n     * @return string\n     */\n    protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)\n    {\n        return '';\n    }\n\n    protected function getValueDao()\n    {\n        return new ValueDao();\n    }\n\n    /**\n     * @param Tracker_Artifact_Changeset $changeset\n     *\n     * @return string\n     */\n    public function fetchRawValueFromChangeset($changeset)\n    {\n        return '';\n    }\n\n    /**\n     * @param Tracker_Artifact_Changeset $changeset\n     * @param int $value_id\n     * @param bool $has_changed\n     *\n     * @return Tracker_Artifact_ChangesetValue | null\n     */\n    public function getChangesetValue($changeset, $value_id, $has_changed)\n    {\n        $changeset_value = null;\n        if ($row = $this->getValueDao()->searchById($value_id)->getRow()) {\n            $changeset_value = new ChangesetValue($value_id, $changeset, $this, $has_changed, $row['value']);\n        }\n\n        return $changeset_value;\n    }\n\n    /**\n     * @param int $artifact_id\n     * @param int $changeset_id\n     * @param mixed $value\n     * @param int $report_id\n     *\n     * @return string\n     */\n    public function fetchChangesetValue($artifact_id, $changeset_id, $value, $report_id = null, $from_aid = null)\n    {\n        return $value;\n    }\n\n    public function fetchArtifactForOverlay(Artifact $artifact, array $submitted_values)\n    {\n    }\n\n    public function canBeUsedAsReportCriterion()\n    {\n        return false;\n    }\n\n    public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)\n    {\n        return $old_value->getValue() !== $new_value;\n    }\n\n    public function getFormAdminVisitor(Tracker_FormElement_Field $element, array $used_element)\n    {\n        return new Tracker_FormElement_View_Admin_Field($element, $used_element);\n    }\n}\n"], "filenames": ["plugins/agiledashboard/include/AgileDashboard/FormElement/Burnup.php", "plugins/testmanagement/include/TestManagement/Step/Execution/Field/StepExecution.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Alphanum.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_ArtifactId.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_ArtifactLink.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Burndown.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Computed.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_CrossReferences.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Date.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_File.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_LastModifiedBy.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_LastUpdateDate.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List_Bind.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List_Bind_Null.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List_Bind_Static.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List_Bind_Ugroups.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_List_Bind_Users.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Numeric.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_PerTrackerArtifactIdclass.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_PermissionsOnArtifact.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Priority.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_SubmittedBy.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_SubmittedOn.php", "plugins/tracker/include/Tracker/FormElement/Tracker_FormElement_Field_Text.php", "plugins/tracker/include/Tracker/Report/Tracker_Report_Renderer_Table.class.php", "plugins/tracker_encryption/include/Tracker_FormElement_Field_Encrypted.class.php"], "buggy_code_start_loc": [288, 126, 43, 73, 41, 421, 450, 630, 142, 416, 72, 70, 71, 165, 329, 153, 277, 228, 421, 87, 38, 447, 94, 67, 70, 86, 1216, 188], "buggy_code_end_loc": [290, 127, 241, 76, 55, 422, 452, 631, 143, 438, 73, 95, 87, 217, 402, 217, 350, 282, 469, 92, 47, 451, 100, 100, 86, 91, 1217, 193], "fixing_code_start_loc": [288, 126, 44, 73, 41, 421, 450, 630, 142, 416, 72, 70, 71, 165, 328, 152, 276, 227, 420, 87, 38, 446, 93, 67, 70, 86, 1216, 188], "fixing_code_end_loc": [291, 127, 247, 74, 55, 422, 453, 631, 143, 436, 73, 90, 87, 216, 401, 216, 346, 276, 464, 91, 47, 450, 99, 100, 86, 90, 1217, 193], "type": "CWE-89", "message": "Tuleap is a Free & Open Source Suite to improve management of software developments and collaboration. In versions prior to 13.9.99.95 Tuleap does not sanitize properly user inputs when constructing the SQL query to retrieve data for the tracker reports. An attacker with the capability to create a new tracker can execute arbitrary SQL queries. Users are advised to upgrade. There is no known workaround for this issue.", "other": {"cve": {"id": "CVE-2022-31058", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-29T18:15:08.807", "lastModified": "2022-07-15T10:18:15.160", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tuleap is a Free & Open Source Suite to improve management of software developments and collaboration. In versions prior to 13.9.99.95 Tuleap does not sanitize properly user inputs when constructing the SQL query to retrieve data for the tracker reports. An attacker with the capability to create a new tracker can execute arbitrary SQL queries. Users are advised to upgrade. There is no known workaround for this issue."}, {"lang": "es", "value": "Tuleap es una suite libre y de c\u00f3digo abierto para mejorar la administraci\u00f3n de los desarrollos de software y la colaboraci\u00f3n. En versiones anteriores a 13.9.99.95, Tuleap no sanea apropiadamente las entradas del usuario cuando construye la consulta SQL para recuperar los datos de los informes de seguimiento. Un atacante con la capacidad de crear un nuevo rastreador puede ejecutar consultas SQL arbitrarias. Es recomendado a usuarios actualizar. No es conocida ninguna mitigaci\u00f3n para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "13.9.99.111", "matchCriteriaId": "290E08AF-5F26-4777-AD57-9343595B5B75"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.8.0", "versionEndExcluding": "13.8.6", "matchCriteriaId": "94F599E8-A949-4624-94D8-2B1AE92AFE64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "13.9.0", "versionEndExcluding": "13.9.3", "matchCriteriaId": "196F5F96-ACA8-4072-A5D7-A54914138D64"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/b91bcd57c8344ec2a4c1833629e400cef4dd901a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-4v2p-rwq9-3vjf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=b91bcd57c8344ec2a4c1833629e400cef4dd901a", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=27172", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/b91bcd57c8344ec2a4c1833629e400cef4dd901a"}}