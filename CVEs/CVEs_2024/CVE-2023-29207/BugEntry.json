{"buggy_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n###############################################################\n## Contains various standard Velocity macros automatically\n## loaded and usable everywhere (in Velocity).\n##\n## It actually extends the macros.vm defined in the templates\n## directory by redefining or adding new macros.\n##\n## Note that if you modify that file you will need to restart.\n###############################################################\n\n###\n###    Message box\n###\n#macro(xwikimessageboxstart $title $message)\n  <div class=\"centered panel panel-default xwikimessage\">\n    <div class=\"panel-heading\">\n      <div class=\"panel-title\">$title</div>\n    </div>\n    <div class=\"panel-body\">\n      #if (\"$!message\" != '')\n        <p class=\"xwikimessage\">$message</p>\n      #end\n#end\n#macro(xwikimessageboxend)\n    </div>##panel-body\n  </div>##panel\n#end\n\n#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)\n#xwikimessageboxstart($title $message)\n      <div class=\"buttons\"><a href=\"$urlyes\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgyes\" onclick=\"location='$urlyes'; return false;\"/></a> <a href=\"$urlno\" class=\"buttonwrapper\"><input type=\"button\" class=\"button secondary\" value=\"$msgno\" onclick=\"location='$urlno'; return false;\"/></a></div>\n#xwikimessageboxend()\n#end\n\n#**\n * Displays a submit button, i.e. an <tt>input</tt> element with <tt>type=submit</tt>.\n * For styling purposes, the button is wrapped in a span element.\n * @param name The value of the <tt>name</tt> attribute\n * @param shortcut The keyboard shortcut for this button. The value will be displayed\n *        as the title of the element. The actual shortcut is attached elsewhere, in\n *        the javascript code.\n * @param value The value of the <tt>value</tt> attribute, i.e. the text displayed on\n *        the button.\n * @param class The class to use.\n *#\n#macro(submitButton $name $shortcut $value $class)\n<input class=\"btn $!class\" type=\"submit\" name=\"$name\"#if($keyboardShortcutsEnabled) title=\"$shortcut\"#end value=\"$value\"/>\n#end\n#**\n * Displays a submit button for the editor. This macro calls submitButton,\n * composing all its parameters based on the action's identifier and the\n * identifier of the corresponding localized resources.\n * @param action The identifier of the button's action.\n * @param resourceIdentifier The key used to identify the localized resources.\n * @param class The class to use.\n *#\n#macro(editActionButton $action $resourceIdentifier $class)\n#submitButton(\"action_${action}\", $services.localization.render(\"core.shortcuts.edit.${resourceIdentifier}\"), $services.localization.render($resourceIdentifier), $class)\n<input type=\"hidden\" name=\"xaction\" value=\"$escapetool.xml($action)\" />\n#end\n\n#macro(livetable_html $divid $collist $colprops $options)\n  ##\n  ## SX deps.\n  ##\n  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))\n  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))\n  ##\n  ## Options / defaults\n  ##\n  #if(\"$!options.translationPrefix\" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end\n  #if(\"$!options.defaultOrder\" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end\n  #if(\"$!options.selectedColumn\" != '') #set($selectedColumn = $options.selectedColumn) #end\n  #if(\"$!options.tagCloud\" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end\n  #set ($topfilters = $options.topFilters)\n  #set ($hasTopFilters = \"$!topfilters\" !='')\n  #if(\"$options.pageSize\" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end\n  #set ($queryFilters = $options.queryFilters)\n  #if (!$queryFilters)\n    #set ($queryFilters = 'currentlanguage,hidden')\n  #end\n  #set($classname = \"$!options.className\")\n  ##\n  ## Columns informations\n  ##\n  #set ($dataColumns = [])\n  #set ($classParams = {})\n  #foreach($colname in $collist)\n    ## If the live table options don't specify which column to select then select the first non-special column.\n    #if(\"$!selectedColumn\" == '' && !$colname.startsWith('_'))\n      #set($selectedColumn = $colname)\n    #end\n    #if($colname != '_actions')\n      #set ($discard = $dataColumns.add($colname))\n      #set($propClassName = \"$!{colprops.get($colname).get('class')}\")\n      #if($propClassName != '')\n        #set ($discard = $classParams.put(\"${colname}_class\", $propClassName))\n      #end\n      #set ($propMatchType = \"$!colprops.get($colname).match\")\n      #if ($propMatchType != '')\n        #set ($discard = $classParams.put(\"${colname}_match\", $propMatchType))\n      #end\n    #end\n  #end\n  #if(\"$!options.url\" != '')\n    #set($dataurl = $options.url)\n  #else\n    #set ($parameters = {\n      'outputSyntax': 'plain',\n      'transprefix': $transprefix,\n      'classname': $classname,\n      'collist': $stringtool.join($dataColumns, ','),\n      'queryFilters': $queryFilters\n    })\n    #set ($discard = $parameters.putAll($classParams))\n    #set ($resultPage = $options.resultPage)\n    #if (\"$!resultPage\" == '')\n      #set ($resultPage = 'XWiki.LiveTableResults')\n    #end\n    #set ($dataurl = $xwiki.getURL($resultPage, 'get', \"$escapetool.url($parameters)&$!options.extraParams\"))\n  #end\n  ## Clone the column properties because we modify them.\n  #set ($macro.columnDescriptors = $jsontool.fromString($jsontool.serialize($colprops)))\n  #livetable_normalizeColumnDescriptors($macro.columnDescriptors $collist $transprefix)\n  #set ($macro.settings = {\n    'name': $options.javascriptName,\n    'url': $dataurl,\n    'columns': $collist,\n    'columnDescriptors': $macro.columnDescriptors,\n    'xclass': $classname,\n    'maxPages': $options.maxPages,\n    'hasPageSize': $hasPageSize,\n    'pageSizeBounds': $options.pageSizeBounds,\n    'limit': $options.rowCount,\n    'selectedTags': $options.selectedTags,\n    'hasTopFilters': $hasTopFilters,\n    'callback': $options.callback\n  })\n  ##\n  ## HTML Table\n  ##\n  #set ($htmlLiveTableId = $escapetool.xml($divid))\n<div class=\"xwiki-livetable-container\">\n  #if($tagcloud || $hasTopFilters)\n  <div class=\"tipfilters\">\n  #end\n  #if($hasTopFilters)\n  <div id=\"${htmlLiveTableId}-topfilters\" class=\"xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end\">\n    <div>\n      <div class=\"xwiki-livetable-topfilters-container\">\n      $topfilters\n      </div>\n      <div class=\"tippointer\">\n        <div></div>\n      </div>\n    </div>\n  </div>\n  #end\n  #if($tagcloud)\n    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))\n    <div id=\"${htmlLiveTableId}-tagcloud\" class=\"xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end\">\n      <div>\n        <div class=\"xwiki-livetable-tagcloud-container\">\n          <h2>$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')</h2>\n          <div class=\"xwiki-livetable-tagcloud\"></div>\n        </div>\n        <div class=\"tippointer\">\n          <div></div>\n        </div>\n      </div>\n    </div>\n  #end\n  #if($tagcloud || $hasTopFilters)\n  </div>\n  #end\n  <table id=\"${htmlLiveTableId}\" class=\"xwiki-livetable\"\n      data-settings=\"$escapetool.xml($jsontool.serialize($macro.settings))\" data-xwiki-lightbox=\"false\">\n    #if(\"$!options.description\" != '')\n      <caption class=\"sr-only\">$options.description</caption>\n    #end\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span id=\"${htmlLiveTableId}-limits\" class=\"xwiki-livetable-limits\"></span>\n  #if($hasPageSize)\n        <span id=\"${htmlLiveTableId}-pagesize\" class=\"xwiki-livetable-pagesize\">\n            <span>$services.localization.render('platform.livetable.pagesizeLabel')</span>\n            <span class=\"xwiki-livetable-pagesize-content\" ></span>\n        </span>\n  #end\n        <span id=\"${htmlLiveTableId}-ajax-loader\" class=\"xwiki-livetable-loader hidden\">\n          <img src=\"$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')\" alt=\"$escapetool.xml($services.localization.render('platform.livetable.loading'))\" title=\"\" />\n        </span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-display-container\">\n        <table class=\"xwiki-livetable-display\">\n          <thead class=\"xwiki-livetable-display-header\">\n            <tr>\n            #set($columnCount = 0)\n            #foreach($colname in $collist)\n              #set($colprop = $colprops.get($colname))\n              #set ($isFilterable = $colprop.filterable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              #set ($isSortable = $colprop.sortable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              ## Get the column's display name to use in the header.\n              #set($displayName = \"#getLivetableColumnDisplayName($colname, $colprop, $transprefix)\")\n              #set ($defaultHeaderClass = {'_actions': 'actions', '_avatar': 'avatar'})\n              #set ($discard = $colprop.putIfAbsent('headerClass', $defaultHeaderClass.get($colname)))\n              <th scope=\"col\" class=\"xwiki-livetable-display-header-text $!colprop.headerClass\n                  #if ($!colprop.type == 'hidden')hidden#end\n                  #if ($isSortable)sortable #if ($colname == $selectedColumn)selected $defaultOrder#else asc#end#end\">\n                #if($isFilterable)<label for=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\">#end\n                #if($isSortable)<a data-rel=\"${colname}\">#end\n                $displayName\n                #if($isSortable)</a>#end\n                #if($isFilterable)</label>#end\n                #set($columnCount = $mathtool.add($columnCount, 1))\n              </th>\n            #end\n            </tr>\n            #livetable_filters($collist $colprops $classname)\n            <tr class=\"xwiki-livetable-initial-message\">\n              <td colspan=\"${columnCount}\">\n                <div class=\"warningmessage\">$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')</div>\n              </td>\n            </tr>\n          </thead>\n          ## Use hyphenation in order to prevent the live table from overflowing the available width (e.g. when the\n          ## table cells contain long words that cannot be wrapped otherwise).\n          ## See https://justmarkup.com/articles/2015-07-31-dealing-with-long-words-in-css/\n          <tbody id=\"${htmlLiveTableId}-display\" class=\"xwiki-livetable-display-body hyphenate\">\n            <tr><td colspan=\"${columnCount}\">&nbsp;</td></tr>\n          </tbody>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span class=\"xwiki-livetable-limits\"></span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n  </table>\n  <div id=\"${htmlLiveTableId}-inaccessible-docs\" class=\"hidden\">\n    #info($services.localization.render('rightsmanager.documentrequireviewrights'))\n  </div>\n  <div id=\"${htmlLiveTableId}-computed-title-docs\" class=\"hidden\">\n    #info(\"(<span class='docTitleComputed'></span>)&nbsp;$services.localization.render('platform.livetable.docTitleComputedHint')\")\n  </div>\n</div>## xwiki-livetable-container\n#end## end-livetable-macro\n\n#macro (livetable_filter $column $columnProperties $xproperty)\n  #set ($filterType = $columnProperties.type)\n  #if (\"$!filterType\" == '')\n    ## Determine the filter type from the xproperty type.\n    #set ($filterTypeByXPropertyType = {\n      'Boolean': 'boolean',\n      'DBList': 'suggest',\n      'DBTreeList': 'suggest',\n      'Date': 'date',\n      'Email': 'text',\n      'Groups': 'suggest',\n      'Number': 'number',\n      'Page': 'suggest',\n      'StaticList': 'list',\n      'String': 'text',\n      'TextArea': 'text',\n      'Users': 'suggest'\n    })\n    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))\n    #if (\"$!filterType\" == '')\n      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text\n      ## filter in this case because it is the most generic.\n      #set ($filterType = 'text')\n    #end\n  #end\n  #if ($filterType == 'list' || $filterType == 'multilist')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\"\n      #if ($filterType == 'multilist')\n        #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetablemulti.js', true))\n        #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-select', 'css/bootstrap-select.css'),\n          {'type': 'text/css', 'rel': 'stylesheet'}))\n        class=\"xwiki-livetable-multilist\" multiple=\"multiple\">\n      #else\n        ><option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n        <option disabled=\"disabled\">\u2500\u2500\u2500\u2500</option>\n      #end\n    #set ($storedValues = $xproperty.listValues)\n    #set ($displayedValues = $xproperty.mapValues)\n    #foreach ($storedValue in $storedValues)\n      #set ($l10nKey = \"${xproperty.className}_${column}_$storedValue\")\n      #set ($displayedValue = $services.localization.render($l10nKey))\n      #if ($displayedValue == $l10nKey)\n        #set ($displayedValue = $displayedValues.get($storedValue).value)\n      #end\n      <option value=\"$storedValue\">$displayedValue</option>\n    #end\n    </select>\n  #elseif ($filterType == 'boolean')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\">\n      <option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n      <option value=\"0\">$services.localization.render('no')</option>\n      <option value=\"1\">$services.localization.render('yes')</option>\n    </select>\n  #elseif ($filterType == 'text' || $filterType == 'number')\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\" type=\"text\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n        [$services.localization.render(\"${transprefix}$column\")]))\" />\n  #elseif ($filterType == 'date')\n    #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetabledate.js', true))\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-daterangepicker',\n      'css/bootstrap-daterangepicker.css'), {'type': 'text/css', 'rel': 'stylesheet'}))\n    ## Hidden input for date fields allows us to send timestamps to the server while displaying pretty dates.\n    <input name=\"$column\" type=\"hidden\" />\n    #set ($dateFormat = $xproperty.getValue('dateFormat'))\n    #if (\"$!dateFormat\" == '')\n      #set ($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))\n    #end\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" type=\"text\"\n      data-type=\"date\" data-dateformat=\"$escapetool.xml($dateFormat)\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n      [$services.localization.render(\"${transprefix}$column\")]))\" />\n  #elseif ($filterType == 'suggest' && $xproperty)\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n      {'type': 'text/css', 'rel': 'stylesheet'}))\n    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n    #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      class=\"suggest-propertyValues\" multiple=\"multiple\" size=\"1\"\n      data-className=\"$!escapetool.xml($xproperty.className)\" data-propertyName=\"$!escapetool.xml($xproperty.name)\">\n    </select>\n  #end\n#end\n\n##\n##\n#**\n * Generates a vertical menu item from an object (a map)\n *\n * Expected format:\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $item the menu item object, in the format described above\n * @param $level the current level of the item, of the form '\\*+'; the number of\n *        stars indicates the depth of the item in the menu\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *#\n#macro(verticalNavigationItem $item $level $options)\n  #set ($class = \"$!{item.cssClass}\")\n  #set ($hasChildren = ($item.children && $item.children.size() > 0))\n  #if ($hasChildren)\n    #set ($class = \"$class group\")\n  #end\n  #if ($options.crtItemId == $item.id)\n    #set ($class = \"$class current\")\n    #if ($hasChildren)\n      #set ($class = \"$class current-group\")\n    #end\n  #end\n  #set ($class = $class.trim())\n  #set ($name = \"$!{item.name}\")\n  #if ($name == '')\n    #set ($name = $services.localization.render(\"$!{options.translationPrefix}${item.id}\"))\n  #end\n  $level (% id=\"vertical-menu-${item.id}\" class=\"${class}\" %){{html}}<a #if (\"$!{item.url}\" != '')href=\"$item.url\"#{end}>#if($item.glyphicon)$services.icon.renderHTML($item.glyphicon) #end$name</a>{{/html}}\n  #if ($hasChildren)\n    #set ($children = [])\n    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)\n    #foreach ($child in $children)\n      #verticalNavigationItem($child $level.concat('*') $options)\n    #end\n  #end\n#end\n\n#**\n * Start a breadcrumb.\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_start)\n  <ol class=\"breadcrumb\">\n#end\n\n#**\n * End of a breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_end)\n  </ol>\n#end\n\n#**\n * Display a line in the breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_line $link $title)\n  <li><a href=\"$link\">$title</a></li>\n#end\n\n#**\n * Display the current line in the breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_current_line $title)\n  <li class=\"active\">$title</li>\n#end\n\n###\n### Glyph Icon\n###\n### @param iconName The name of the icon to display, without the glyphicon prefix (eg: 'globe')\n#macro(glyphicon $iconName)\n#if(\"$!iconName\"!='')<span class=\"glyphicon glyphicon-${iconName}\"></span>#end\n#end\n#macro(displayDocumentTitle $stepTitle $titleHint)\n<div class=\"row document-header\">\n  <div class=\"document-info col-xs-12\">\n    <div id=\"document-title\"><h1>$stepTitle</h1></div>\n    #if ($titleHint)\n      <div class=\"xdocLastModification\">$titleHint</div>\n    #end\n  </div>\n</div>\n<hr/>\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the date & time picker.\n *#\n#macro (dateTimePicker_import)\n  #set ($discard = $xwiki.linkx.use(\n    $services.webjars.url('Eonasdan-bootstrap-datetimepicker', 'css/bootstrap-datetimepicker.min.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}\n  ))\n  #set ($discard = $xwiki.jsfx.use('dateTimePicker.js', true))\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the color picker.\n *#\n#macro (colorPicker_import)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('colpick', 'css/colpick.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('colorPicker.css'))\n  #set ($discard = $xwiki.jsfx.use('colorPicker.js', true))\n#end\n\n#macro (colorPicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'form-control color-picker type-color'))\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <div class=\"input-group\">\n    <input type=\"text\"\n      #foreach ($parameter in $parameters.entrySet())\n        $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n      #end\n    />\n    <span class=\"input-group-addon\"><span class=\"color-preview\"></span></span>\n  </div>\n#end\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n###############################################################\n## Contains various standard Velocity macros automatically\n## loaded and usable everywhere (in Velocity).\n## \n## Note that if you modify that file you will need to restart.\n###############################################################\n##\n## #template(\"name.vm\")\n## Searches for the given velocity template and interprets it.\n## Only the velocity parser is executed on the file.\n## The template is searched in the following locations, in this order:\n## - as a property of the XWikiSkins object attached to the current skin document\n## - as an attachment to the current skin document\n## - as a file in the directory corresponding to the current skin\n## - the above 3 locations corresponding to the base skin\n## - the above 3 locations corresponding to the default skin\n## - as a file in the /templates/ directory\n##\n#macro(template $tname)\n$xwiki.parseTemplate($tname)\n#end\n##\n##\n## #renderTemplate(\"name.vm\")\n## Searches for the given velocity template and renders it.\n## The template is searched in the following locations, in this order:\n## - as a property of the XWikiSkins object attached to the current skin document\n## - as an attachment to the current skin document\n## - as a file in the directory corresponding to the current skin\n## - the above 3 locations corresponding to the base skin\n## - the above 3 locations corresponding to the default skin\n## - as a file in the /templates/ directory\n##\n#macro(renderTemplate $tname )\n$xwiki.renderTemplate($tname)\n#end\n##\n##\n## #includeTopic(\"Space.Document\")\n## Includes another fully rendered document inside the current response.\n## The topic is interpreted and rendered exactly as if it were viewed in a separate response,\n## meaning that the $doc variable will point to the included document. The resulting string is\n## wrapped with {pre}...{/pre}, in order to prevent double-rendering.\n## The platform prevents recursive includes.\n## This macro is useful for creating composite documents from smaller parts, or the other way around,\n## splitting a large document into smaller distinct chunks which can be edited in parallel.\n##\n#macro(includeTopic $topic)\n$xwiki.includeTopic($topic)\n#end\n##\n##\n## #includeMacros(\"Space.Document\")\n## Includes the content of another document as velocity macros. Because of the way the velocity\n## engine works, trying to place macros in another document and including it with another method\n## will not have the expected result. Other than making the macros available, it works just as\n## #includeForm($topic)\n##\n#macro(includeMacros $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeForm(\"Space.Document\")\n## Includes another fully rendered document inside the current response.\n## The included content is interpreted and rendered in the current context, meaning that $doc will\n## point to the current document (the includer), and not the included one. The resulting string is\n## wrapped with {pre}...{/pre}, in order to prevent double-rendering.\n## The platform prevents recursive includes.\n## This macro is the core of the document-template-sheet functionality of XWiki, where a document\n## has an XObject attached to it, its content consists of the \"#includeForm('Some.Sheet')\" statement,\n## and the sheet works just as if it were actually inside the document's content.\n##\n#macro(includeForm $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeInContext(\"Some.Document\")\n## Alias for #includeForm\n##\n#macro(includeInContext $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeServlet(\"/xwiki/bin/view/Some/Document?params\")\n## Invokes on the server another servlet corresponding to the passed URL, and returns the output.\n## This is done using standard servlet mechanisms (javax.servlet.RequestDispatcher#include).\n##\n#macro(includeServlet $url)\n<!-- including $url -->\n$xwiki.invokeServletAndReturnAsString($url)\n<!-- included $url -->\n#end\n##\n##\n##\n##\n## #skype(\"skypeId\")\n## Displays the status for the given Skype id\n##\n## @Deprecated\n#macro(skype $id)\n<a href=\"skype:${id}?call\"><img width=\"182\" height=\"44\" src=\"http://mystatus.skype.com/bigclassic/${id}\" style=\"border: none;\"></a>\n#end\n##\n##\n## #yahoo(\"yahooId\")\n## Displays the status for the given Yahoo! id\n##\n## @Deprecated\n#macro(yahoo $id)\n<img border=\"0\" src=\"http://opi.yahoo.com/online?u=${id}&amp;m=g&amp;t=1\" alt=\"yahoo $id\" />\n#end\n## #sign(\"XWiki.Username\")\n## Displays a \"signature\", a link to the user's profile page.\n##\n#macro(sign $username)\n#if($username.indexOf(\".\")==-1)\n#set($username = \"XWiki.${username}\")\n#end\n#if($xwiki.exists(\"$username\"))\n$xwiki.getUserName(\"$username\")\n#else\n$xwiki.getUserName(\"xwiki:${username}\")\n#end\n#end\n\n#macro(includeHelp $pagename)\n  #if($xwiki.exists(\"xwiki:XWiki.${pagename}\"))\n    $xwiki.includeForm(\"xwiki:XWiki.${pagename}\",false)\n  #else\n    #if($xwiki.exists(\"XWiki.${pagename}\"))\n      $xwiki.includeForm(\"XWiki.${pagename}\",false)\n    #end\n  #end\n#end\n\n#macro(toc $pinit $pmax $pnumbered)\n#set($init = $pinit)\n#set($max = $pmax)\n#set($numbered = $pnumbered)\n #set ($int = 0)\n #set ($boolean = false)\n #if ($init == \"\")\n  #set ($init = 2)\n #else\n  #set ($init = $int.valueOf($init))\n #end\n #if ($max == \"\")\n  #set ($max = 6)\n #else\n  #set ($max = $int.valueOf($max))\n #end\n #if ($numbered == \"\")\n  #set ($numbered = false)\n #else\n  #set ($numbered = $boolean.valueOf($numbered))\n #end\n #set ($tocData = ${tdoc.getTOC($init, $max, $numbered)})\n #set ($xcontext.tocData = $tocData)\n #set ($lastLevel = $init - 1)\n #set ($depth = 0)\n #set ($openeditem = true)\n<div class=\"toc\">\n #foreach ($tocEntry in $tocData.entrySet())\n  #set ($level = $tocEntry.value.level)\n  #if ($level > $lastLevel)\n   #set ($to = $lastLevel + 1)\n   #set ($iter = [$level .. $to])\n   #foreach ($n in $iter)\n    #if($openeditem)\n      #set($openeditem = false)\n    #else\n<li>\n    #end\n<ul class=\"tocLevel\">\n    #set ($depth = $depth + 1)\n   #end\n  #elseif ($level < $lastLevel)\n   #set ($to = $level + 1)\n   #set ($iter = [$lastLevel .. $to])\n</li>\n   #foreach ($n in $iter)\n</ul>\n</li>\n    #set ($depth = $depth - 1)\n   #end\n  #else\n</li>\n  #end\n <li class=\"tocEntry\"><a href=\"#$tocEntry.key\">$!tocEntry.value.numbering #evaluate($tocEntry.value.text)</a>\n  #set ($lastLevel = $level)\n  #set($openeditem = true)\n #end\n #if ($depth > 0)\n  #set ($levels = [1 .. $depth])\n  #foreach($level in $levels)\n </li>\n</ul>#end\n #end\n</div>\n#end\n\n\n###\n###    Separator\n###\n### Insert a span containing a |\n###\n#macro(sep)\n<span class=\"separator\"> | </span>\n#end\n\n\n#**\n * Displays the user avatar and name, linked to the user profile page.\n *\n * @param arg could be either a string, a reference or a list of them\n * @param options various configuration options; default values are {\n *   showAlias: false, // whether to show the user alias or not\n *   useInlineHTML: false, // whether to use in-line HTML elements to display the user or not\n *   wrapAvatar: false // whether to wrap the avatar image with a span or not\n * }\n *#\n#macro (displayUser $arg $options)\n  #if ($stringtool.isEmpty($arg))\n    #set ($arg = \"XWiki.XWikiGuest\")\n  #end\n  #set ($isList = $arg.iterator())\n  #if ($isList)\n    #set ($usersList = $arg)\n  #else\n    #set ($usersList = [$arg])\n  #end\n  #set ($macro.options = {\n    'showAlias': false,\n    'useInlineHTML': false,\n    'wrapAvatar': false\n  })\n  #if ($options.entrySet())\n    #set ($discard = $macro.options.putAll($options))\n  #end\n  #set ($usersTag = 'ul')\n  #set ($userTag = 'li')\n  #if ($macro.options.useInlineHTML)\n    #set ($usersTag = 'span')\n    #set ($userTag = 'span')\n  #elseif (!$isList)\n    #set ($userTag = 'div')\n  #end\n  #set ($types = $collectiontool.set)\n  #set ($output = [])\n  #foreach ($user in $usersList)\n    ## Since we accept both a String or an EntityReference as input, we first check if we have an Entity Reference\n    ## to a Document and if not then we resolve the String to convert it to a Document Reference.\n    #set ($userReference = $user.extractReference('DOCUMENT'))\n    #if (!$userReference)\n      #set ($userReference = $services.model.resolveDocument($user, 'user/current'))\n    #end\n    #set ($userAlias = $userReference.name)\n    #if ($userAlias == $services.model.getEntityReference('DOCUMENT', 'default'))\n      #set ($userAlias = $userReference.lastSpaceReference.name)\n    #end\n    #set ($userDocument = $xwiki.getDocument($userReference))\n    #if ($userDocument.getObject('XWiki.XWikiGroups'))\n      #set ($type = 'group')\n      #set ($userName = $userDocument.plainTitle)\n      #if (\"$!userName\" == '')\n        #set ($userName = $userAlias)\n      #end\n    #else\n      #set ($type = 'user')\n      #set ($userName = $xwiki.getPlainUserName($userReference))\n    #end\n    #set ($discard = $types.add(\"${type}s\"))\n    #set ($userAliasDisplay = '')\n    #if ($macro.options.showAlias && $userAlias != $userName)\n      #set ($userAliasDisplay = \"<span class=\"\"${type}-alias\"\">\" + $escapetool.xml($userAlias) + '</span>')\n    #end\n    #set ($escapedUserName = $escapetool.xml($userName))\n    #getUserAvatarURL($userReference $avatarURL 120)\n    #set ($avatarWrapperStart = '')\n    #set ($avatarWrapperEnd = '')\n    #if ($macro.options.wrapAvatar)\n      #set ($avatarWrapperStart = \"<span class=\"\"${type}-avatar-wrapper\"\">\")\n      #set ($avatarWrapperEnd = '</span>')\n    #end\n    ## We avoid the whitespace because the users are displayed as inline blocks.\n    #set ($discard = $output.addAll([\n      \"<$userTag class=\"\"$type\"\" data-reference=\"\"$escapetool.xml($userReference)\"\">\",\n        $avatarWrapperStart,\n          \"<img class=\"\"${type}-avatar\"\" src=\"\"$escapetool.xml($avatarURL.url)\"\" alt=\"\"$escapedUserName\"\" />\",\n        $avatarWrapperEnd,\n        \"<a class=\"\"${type}-name\"\" href=\"\"$escapetool.xml($xwiki.getURL($userReference))\"\">$escapedUserName</a>\",\n        $userAliasDisplay,\n      \"</$userTag>\"\n    ]))\n  #end\n  #if ($isList && $output.size() > 0)\n    #set ($discard = $output.add(0, \"<$usersTag class=\"\"$stringtool.join($types, ' ')\"\">\"))\n    #set ($discard = $output.add(\"</$usersTag>\"))\n  #end\n  $stringtool.join($output, '')\n#end\n\n#**\n * Displays the group avatar and name, linked to the group profile page.\n *\n * @param arg could be either a string, a reference or a list of them\n * @param options various configuration options; default values are {\n *   showAlias: false, // whether to show the group alias or not\n *   useInlineHTML: false, // whether to use in-line HTML elements to display the group or not\n *   wrapAvatar: false // whether to wrap the avatar image with a span or not\n * }\n *#\n#macro (displayGroup $arg $options)\n  #displayUser($arg $options)\n#end\n\n\n###\n###    useravatar\n###\n### Display the avatar of a user or a group, or a default image if the user/group has no avatar\n###\n### @param username The name of the user or group whose avatar will be displayed\n###\n#macro(getUserAvatarURL $userName $return $size)\n  #set ($specified = false)\n  #set ($profileDoc = $xwiki.getDocument($userName))\n  #if ($profileDoc.getObject('XWiki.XWikiGroups'))\n    #set ($url = $xwiki.getSkinFile('icons/xwiki/noavatargroup.png', true))\n  #else\n    #set ($url = $xwiki.getSkinFile('icons/xwiki/noavatar.png', true))\n  #end\n  #if ($profileDoc && !$profileDoc.isNew() && $profileDoc.attachmentList.size() > 0)\n    #set ($profileObj = $profileDoc.getObject('XWiki.XWikiUsers', 0))\n    #set ($avatarFileName = $profileObj.getProperty('avatar').value)\n    #if (\"$!avatarFileName\" != '')\n      #set ($avatarAttachment = $profileDoc.getAttachment($avatarFileName))\n    #elseif ($profileDoc.getObject('XWiki.XWikiGroups'))\n      ## Look for the first image attachment.\n      #foreach ($attachment in $profileDoc.attachmentList)\n        #if ($attachment.isImage())\n          #set ($avatarAttachment = $attachment)\n          #break\n        #end\n      #end\n    #else\n      ## This ensures that $avatarAttachment is always set before the following \"if\" is called, preventing a previous\n      ## call to this macro from leaking...\n      #set ($avatarAttachment = $NULL)\n    #end\n    #if ($avatarAttachment && $avatarAttachment.isImage())\n      #set ($queryString = '')\n      #if ($size > 0)\n        #set ($queryString = \"width=$size&height=$size&keepAspectRatio=true\")\n      #end\n      #set ($url = $profileDoc.getAttachmentURL($avatarAttachment.filename, 'download', $queryString))\n      #set ($specified = true)\n    #end\n  #end\n  #set ($return = $NULL)\n  #setVariable (\"$return\" {'url': $url, 'specified': $specified})\n#end\n#macro(resizedUserAvatar $username $size)\n  #if(!$picturelist)\n    #set($picturelist = {})\n  #end\n  #if(!$picturelist.containsKey(\"${username}--${size}\"))\n    #getUserAvatarURL($username $avatarURL $size)\n    #if ($avatarURL.specified)\n      #set ($picture = \"<img src='\")\n      #set ($picture = $picture.concat($escapetool.xml($avatarURL.url)))\n      #set ($picture = $picture.concat(\"' alt='\"))\n      #set ($picture = $picture.concat(${xwiki.getUserName($username, false)}))\n      #set ($picture = $picture.concat(\"' title='\"))\n      #set ($picture = $picture.concat(${xwiki.getUserName($username, false)}))\n      #set ($picture = $picture.concat(\"'/>\"))\n    #else\n      #set ($picture = \"<img class='avatar avatar_${escapetool.xml(${size})}' src='\")\n      #set ($picture = $picture.concat($avatarURL.url))\n      #set ($picture = $picture.concat(\"' alt='${xwiki.getUserName($username, false)}' title='${xwiki.getUserName($username, false)}'/>\"))\n    #end\n    #set ($discard = $!picturelist.put(\"${username}--${size}\", $picture))\n  #end\n  $picturelist.get(\"${username}--${size}\")##\n#end\n#macro(largeUserAvatar $username)\n  #resizedUserAvatar($username 120)\n#end\n#macro(mediumUserAvatar $username)\n  #resizedUserAvatar($username 50)\n#end\n#macro(smallUserAvatar $username)\n  #resizedUserAvatar($username 30)\n#end\n###\n###    useravatar\n###\n### Display the avatar of a user (HTML is returned), or a standard image if the user has no avatar\n###\n### @param username The name of the user whose avatar will be displayed\n###\n#macro(useravatar $username)\n  #resizedUserAvatar($username 0)\n#end\n\n###\n###    mimetypeimg\n###\n### Display an icon according to the mimetype\n###\n### @param mime The reported mimetype of the file\n### @param fname The name of the file\n###\n#macro(mimetypeimg $mime $fname)\n  #set($idx = $fname.lastIndexOf('.'))\n  #set($idx = $idx + 1)\n  #if(($idx != 0) && ($idx != -1))\n    #set($ext = $fname.substring($idx))\n  #else\n    #set($ext = '')\n  #end\n  ## Map mimetypes to their corresponding icons\n  #if(!$mimetypeMap)\n    #set($mimetypeMap = {})\n    ## images\n    #set($discard = $mimetypeMap.put('image/svg+xml',                      ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('application/svg+xml',                ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/svg',                          ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/svg+xml',                      ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/',                             ['image', 'image']))\n    ## text\n    #set($discard = $mimetypeMap.put('text/html',                          ['file-code', 'html']))\n    #set($discard = $mimetypeMap.put('text/css',                           ['file-code', 'css']))\n    #set($discard = $mimetypeMap.put('text/',                              ['file-text', 'text']))\n    ## documents\n    #set($discard = $mimetypeMap.put('application/xml',                    ['file-code', 'xml']))\n    #set($discard = $mimetypeMap.put('application/pdf',                    ['file-pdf', 'pdf']))\n    #set($discard = $mimetypeMap.put('application/postscript',             ['file-pdf', 'ps']))\n    #set($discard = $mimetypeMap.put('application/msword',                 ['file-word', 'document']))\n    #set($discard = $mimetypeMap.put('application/powerpoint',             ['file-powerpoint', 'presentation']))\n    #set($discard = $mimetypeMap.put('application/vnd.ms-powerpoint',      ['file-powerpoint', 'presentation']))\n    #set($discard = $mimetypeMap.put('application/vnd.oasis.opendocument', ['file', 'office']))\n    #set($discard = $mimetypeMap.put('application/x-shockwave-flash',      ['film', 'flash']))\n    ## archives\n    #set($discard = $mimetypeMap.put('application/x-tar',                  ['file-archive', 'tar']))\n    #set($discard = $mimetypeMap.put('application/x-gzip',                 ['file-archive', 'gz']))\n    #set($discard = $mimetypeMap.put('application/x-gtar',                 ['file-archive', 'gz']))\n    #set($discard = $mimetypeMap.put('application/zip',                    ['file-archive', 'zip']))\n    #set($discard = $mimetypeMap.put('application/java-archive',           ['coffee', 'jar']))\n    #set($discard = $mimetypeMap.put('audio/',                             ['music', 'audio']))\n    #set($discard = $mimetypeMap.put('video/',                             ['film', 'video']))\n  #end\n  #if(!$extensionMap)\n    ## Map extensions to their corresponding icons\n    #set($extensionMap = {})\n    ## media\n    #set($discard = $extensionMap.put('ogg',      ['music', 'audio']))\n    #set($discard = $extensionMap.put('flac',     ['music', 'audio']))\n    #set($discard = $extensionMap.put('ogv',      ['film', 'video']))\n    #set($discard = $extensionMap.put('mk',       ['film', 'video']))\n    #set($discard = $extensionMap.put('avi',      ['film', 'video']))\n    #set($discard = $extensionMap.put('divx',     ['film', 'video']))\n    #set($discard = $extensionMap.put('mov',      ['film', 'video']))\n    #set($discard = $extensionMap.put('flv',      ['film', 'flash']))\n    #set($discard = $extensionMap.put('fla',      ['film', 'flash']))\n    #set($discard = $extensionMap.put('swf',      ['film', 'flash']))\n    ## office\n    #set($discard = $extensionMap.put('ppt',      ['file-powerpoint', 'presentation']))\n    #set($discard = $extensionMap.put('odp',      ['file-powerpoint', 'presentation']))\n    #set($discard = $extensionMap.put('doc',      ['file-word', 'document']))\n    #set($discard = $extensionMap.put('odf',      ['file', 'document']))\n    #set($discard = $extensionMap.put('ods',      ['file-excel', 'spreadsheet']))\n    #set($discard = $extensionMap.put('xls',      ['file-excel', 'spreadsheet']))\n    #set($discard = $extensionMap.put('odt',      ['file-word', 'odt']))\n    #set($discard = $extensionMap.put('sxw',      ['file-word', 'office']))\n    #set($discard = $extensionMap.put('stw',      ['file-word', 'office']))\n    ## archives\n    #set($discard = $extensionMap.put('bz',       ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('bz2',      ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('tbz',      ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('gz',       ['file-archive', 'gz']))\n    #set($discard = $extensionMap.put('tgz',      ['file-archive', 'gz']))\n    #set($discard = $extensionMap.put('rar',      ['file-archive', 'rar']))\n    #set($discard = $extensionMap.put('7z',       ['file-archive', 'zip']))\n    ## development\n    #set($discard = $extensionMap.put('sql',      ['database', 'sql']))\n    #set($discard = $extensionMap.put('php',      ['file-code', 'php']))\n    #set($discard = $extensionMap.put('c',        ['file-code', 'c']))\n    #set($discard = $extensionMap.put('cpp',      ['file-code', 'cpp']))\n    #set($discard = $extensionMap.put('c++',      ['file-code', 'cpp']))\n    #set($discard = $extensionMap.put('cs',       ['file-code', 'cs']))\n    #set($discard = $extensionMap.put('h',        ['file-code', 'h']))\n    #set($discard = $extensionMap.put('ruby',     ['file-code', 'ruby']))\n    #set($discard = $extensionMap.put('java',     ['coffee', 'java']))\n    #set($discard = $extensionMap.put('js',       ['file-code', 'js']))\n    #set($discard = $extensionMap.put('csproj',   ['file-code', 'vs']))\n    #set($discard = $extensionMap.put('sln',      ['file-code', 'vs']))\n    #set($discard = $extensionMap.put('res',      ['file-code', 'vs']))\n    ## data\n    #set($discard = $extensionMap.put('ics',      ['calendar', 'calendar']))\n    #set($discard = $extensionMap.put('eml',      ['email', 'email']))\n    #set($discard = $extensionMap.put('vcf',      ['vcard', 'vcard']))\n    #set($discard = $extensionMap.put('vcard',    ['vcard', 'vcard']))\n    ## executables\n    #set($discard = $extensionMap.put('exe',      ['cog', 'exe']))\n    #set($discard = $extensionMap.put('bat',      ['terminal', 'script']))\n    #set($discard = $extensionMap.put('sh',       ['terminal', 'script']))\n  #end\n  #if($mimetypeMap.containsKey($mime))\n    #set ($image = $mimetypeMap.get($mime).get(0))\n    #set ($text = $mimetypeMap.get($mime).get(1))\n  #elseif ($extensionMap.containsKey($ext))\n    #set ($image = $extensionMap.get($ext).get(0))\n    #set ($text = $extensionMap.get($ext).get(1))\n  #else\n    #set ($mimetypePrefix = $mime.indexOf('/'))\n    #set ($mimetypePrefix = $mimetypePrefix + 1)\n    #set ($mimetypePrefix = $mime.substring(0, $mimetypePrefix))\n    #if ($mimetypeMap.containsKey($mimetypePrefix))\n      #set ($image = $mimetypeMap.get($mimetypePrefix).get(0))\n      #set ($text = $mimetypeMap.get($mimetypePrefix).get(1))\n    #else\n      #set ($image = 'attach')\n      #set ($text = 'attachment')\n    #end\n  #end\n  <span title=\"${services.localization.render(\"core.viewers.attachments.mime.${text}\")}\">$!services.icon.renderHTML($image)</span>\n#end\n###\n###    packName\n###\n### Display a shorter version of a string\n###\n### @param name The processed string\n###\n#macro(packName $name)\n#if(!$maxnamelength)\n#set($maxnamelength = 25)\n#end\n#set($idx = $name.lastIndexOf(\".\"))\n#if(($idx != 0) && ($idx != -1))\n#set($ext = $name.substring($idx))\n#else\n#set($ext = \"\")\n#set($idx = $name.length())\n#end\n#set($fname = $name.substring(0, $idx))\n#if($fname.length() > $maxnamelength)$fname.substring(0, $maxnamelength)~$ext#else$name#end\n#end\n\n#macro(xwikiobjectfield $fielddoc $fieldname $fieldtext $action)\n<div class=\"xmblabel\">$fieldtext</div>\n<div class=\"xmbfield\">\n#if($fieldname!=\"\")\n$fielddoc.display($fieldname, $action)\n#end\n</div>\n#end\n\n##\n## Formats a date according to the ISO8601 standard\n##\n#macro(formatdateISO $date)\n#set($tz = $xwiki.formatDate($date, \"Z\"))\n#set($tz = \"${tz.substring(0, 3)}:${tz.substring(3)}\")\n$xwiki.formatDate($date, \"yyyy-MM-dd\")T$xwiki.formatDate($date, \"HH:mm:ss\")$tz#end\n\n##\n## Formats a username like a fn (hCard microformat)\n##\n#macro(userfn $username)\n#set($fn = $xwiki.getUserName($username))\n#if($fn.indexOf(\"<a\") >= 0)\n#set($fn = $fn.replaceAll(\"<a\", '<a class=\"url fn\"'))\n#else\n#set($fn = \"<span class='fn'>$fn</span>\")\n#end\n$fn\n#end\n\n###\n###\n### Macros for \"foot notes\"\n###\n### TODO:\n###       Make Radeox macros\n###       Support in wysiwyg\n###\n###\n#macro(footnote $text)\n#if(!$page_footnotes)\n#set($page_footnotes = [])\n#set($footnote_group_id = 1)\n#end\n#set($discard = $page_footnotes.add($text))\n#set($processedText = $text.replaceAll('[*~<>_-]', ''))\n#set($footnote_id = $page_footnotes.size())\n<sup class=\"footnoteRef\" id=\"footnoteref_${footnote_group_id}_${footnote_id}\"><a href=\"#footnote_${footnote_group_id}_${footnote_id}\" title=\"$services.localization.render('core.footnotes.gotofootnote', [${footnote_id}]): {pre}$processedText{/pre}\">$footnote_id</a></sup>#end\n##\n##\n##\n#macro(putFootnotes)\n#if($page_footnotes && ($page_footnotes.size() > 0))\n<ol class=\"footnotes\">\n#foreach($footnote in $page_footnotes)\n<li id=\"footnote_${footnote_group_id}_${foreach.count}\">\n <a class=\"footnoteBackRef\" title=\"$services.localization.render('core.footnotes.backtoref')\" href=\"#footnoteref_${footnote_group_id}_${foreach.count}\">^</a>\n  $footnote</li>\n#end\n</ol>\n#set($discard = $page_footnotes.clear())\n#set($footnote_group_id = $footnote_group_id + 1)\n#end\n#end\n##\n##  Generate navigation links for paged documents. It will use the URL parameters \"ipp\" to forward\n## the number of items per page, and \"page\" to indicate a certain page. The actual range (in items,\n## not in pages) can be computer using #preparePagedViewParams. The macro does not print anything\n## if only one page exists and $alwaysDisplay is not set to true. Does not alter any variables.\n##\n## @param itemsPerPage The number of items per page, will be forwarded in the links to other pages.\n## @param totalPages The total number of pages, starting at 1.\n## @param currentPageNumber The currently displayed page, starting at 1.\n## @param additionalQueryParams Query string fragment that should be put in the links. Should not\n##        start or end with ? or &\n## @param alwaysDisplay Force display of the links, even if there is only one page in total.\n##\n#macro(printPagedViewLinks $itemsPerPage $totalPages $currentPageNumber $additionalQueryParams $alwaysDisplay)\n  ## Only display if there are more than 1 pages or we explicitely require it.\n  #if(($totalPages > 1) || $alwaysDisplay)\n    <div class=\"pagedNavigation\">\n    #if($currentPageNumber > 1)\n      #set($currentPageNumber = $currentPageNumber - 1)\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=1&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.firstPage')</a></span>\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${currentPageNumber}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.previousPage')</a></span>\n      #set($currentPageNumber = $currentPageNumber + 1)\n    #else\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.firstPage')</span>\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.previousPage')</span>\n    #end\n    <span class=\"pagedStatus\">$services.localization.render('web.paging.pageNumberOf', [$currentPageNumber, $totalPages])</span>\n    #if($currentPageNumber < $totalPages)\n      #set($currentPageNumber = $currentPageNumber + 1)\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${currentPageNumber}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.nextPage')</a></span>\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${totalPages}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.lastPage')</a></span>\n      #set($currentPageNumber = $currentPageNumber - 1)\n    #else\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.nextPage')</span>\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.lastPage')</span>\n    #end\n    </div>\n  #end\n#end\n##\n##\n##  Used together with #printPagedViewLinks, computes the range of items to show and the\n## variables used by #printPagedViewLinks, $currentPageNumber, $itemsPerPage, $totalPages.\n##\n## @param totalItems The total number of items that need to be displayed.\n## @param defaultItemsPerPage The default number of items per page, if no override is found in the\n##        URL. If 0, then display all items.\n## @sets startAt The first item to display (inclusive).\n## @sets endAt The last item to display (exclusive).\n## @sets itemsPerPage The requested number of items per page.\n## @sets totalPages The total number of pages according to the requested number of items per page\n##        and total items. Starts at 1.\n## @sets currentPageNumber The current page displayed. If the requested page is not available (out\n##        of range), then it will be corrected to a valid number. Starts at 1.\n##\n#macro(preparePagedViewParams $totalItems $defaultItemsPerPage)\n  ## Reuse existing variable, in case it is manually overriden somewhere else\n  #if(!$itemsPerPage)\n    #if($request.ipp)\n      #set($itemsPerPage = $numbertool.toNumber($request.ipp).intValue())\n    #else\n      #set($itemsPerPage = $defaultItemsPerPage)\n    #end\n  #end\n  ## Page numbers start at 1 outside this macro, but for internal computations we use 0-indexed values.\n  #set($currentPageNumber = $numbertool.toNumber($request.page).intValue() - 1)\n  #if(!$currentPageNumber || $currentPageNumber < 0)\n    #set($currentPageNumber = 0)\n  #end\n  ## The first item to show. Must be >= 0.\n  #set($startAt = $itemsPerPage * $currentPageNumber)\n  #if($startAt < 0)\n    #set($startAt = 0)\n  #end\n  ## The last item to show (exclusive). Must be <= total number of items.\n  #set($endAt = $itemsPerPage * ($currentPageNumber + 1))\n  #if(($endAt > $totalItems) || ($itemsPerPage == 0))\n    #set($endAt = $totalItems)\n  #end\n  ## Never show the items after the last one... They don't exist!\n  #if($startAt >= $endAt)\n    #set($startAt = $endAt - 1)\n  #end\n  ## Compute the total number of pages.\n  #if($itemsPerPage == 0)\n    #set($totalPages = 1)\n  #else\n    #set($totalPages = ($totalItems - 1) / $itemsPerPage + 1)\n  #end\n  ## The requested page might not be available, so correct it to correspond to the displayed items.\n  #set($currentPageNumber = $startAt / $itemsPerPage + 1)\n#end\n##\n##\n## Macro to set a page break used in print, pdf and rtf mode\n##\n#macro(pagebreak)\n<p style=\"page-break-before: always;\" />\n#end\n##\n##\n## Macro to include children of a page\n##\n#set($clevel = 1)\n\n#**\n * Macro to include children at multiple levels. The children are rendered in the generated output. The number of nested levels to\n * render is defined in a global variable called \"$clevel\".\n *\n * @param $page the document whose children should be rendered; preferably a Document object, but a document name works as well\n * @param $withPageBreaks a boolean indicating whether a page break should be generated before each new child document\n *###\n#macro(includeChildren $page $withPageBreaks)\n  #if ($clevel && $clevel > 0)\n    #if (\"$!page.fullName\" == '')\n      ## Not a Document, probably a String (document name)\n      ## Make it backwards compatible with older versions of the macro\n      #set ($page = $xwiki.getDocument($page))\n    #end\n    #foreach ($childDocName in $page.children)\n      #set ($childDoc = $xwiki.getDocument($childDocName))\n      #if ($childDoc && !$blacklistedSpaces.contains($childDoc.getSpace()))\n        #if ($withPageBreaks)\n          #pagebreak()\n        #end\n        $childDoc.getRenderedContent()\n        #set ($clevel = $clevel - 1)\n        #includeChildren($childDoc $withPageBreaks)\n        #set ($clevel = $clevel + 1)\n      #end\n    #end\n  #end\n#end\n\n##\n## Macro to include linked pages at multiple levels\n#macro(includeLinks $page $withPageBreaks)\n #if($clevel && $clevel!=0)\n  #set($pageDoc = $xwiki.getDocument($page))\n  #foreach($child in $pageDoc.getLinks())\n    #set($childDocName = $child.getLink())\n    #set($childDoc = $xwiki.getDocument($childDocName))\n    #if(($childDoc)&&($childDoc.getSpace()!=\"Panels\")&&($childDoc.getSpace()!=\"XWiki\"))\n     #if($withPageBreaks)\n     #pagebreak()\n     #end\n     $childDoc.getRenderedContent()\n     #set($clevel = $xwiki.add($clevel,-1))\n     #includeLinks($childDocName $withPageBreaks)\n     #set($clevel = $xwiki.add($clevel,1))\n    #end\n  #end\n #end\n#end\n\n###\n###    Panel header\n###\n### Generate the starting html code for a panel\n###\n### @param title The panel caption title\n### @param isLarge True if the panel should be larger (default: false)\n### @param isHeaderHidden True if the header should be hidden (default: false)\n###\n#macro(panelheader $title $isLarge $isHeaderHidden)\n## Note: We pass the Panel name as an HTML class attribute so that it's possible to style the Panels selectively using\n## CSS.\n## We want to avoid showing the \"WebHome\" suffix in the generated class since we're working to remove it from the UI\n## and from the APIs. In addition it generates class names longer than they are needed. Thus for nested pages we strip\n## it. We also strip the wiki prefix to have a shorter generated class name and because they're not needed to provide\n## per-wiki styling of Panels.\n#set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n#if ($paneldoc.documentReference.name == $defaultDocumentName)\n  #set ($serializedDocument = $services.model.serialize($paneldoc.documentReference.parent, 'compactwiki'))\n#else\n  #set ($serializedDocument = $services.model.serialize($paneldoc.documentReference, 'compactwiki'))\n#end\n##\u00a0We keep only alphanumeric characters so it can be used as a CSS class.\n## For instance: \"xwiki:A.B.WebHome\" will become \"AB\"\n#set ($specialClassAttribute = $stringtool.toAlphaNumeric(\"$!serializedDocument\"))\n## We keep this class for compatibility purpose but the previous one should be used instead.\n#set ($deprecatedClassAttribute = $stringtool.toAlphaNumeric(\"$!paneldoc.documentReference.name\"))\n#if ($paneldoc.syntax.toIdString() == 'xwiki/1.0')\n<div class=\"#if ($isLarge)large #{end}panel expanded $!specialClassAttribute $!deprecatedClassAttribute\">\n<h1 class=\"xwikipaneltitle#if ($isHeaderHidden) hidden#end\">$title</h1>\n<div class=\"xwikipanelcontents\">\n#else\n(% class=\"#if ($isLarge)large#{end}panel expanded $!specialClassAttribute $!deprecatedClassAttribute\" %)(((\n{{html}}<h1 class=\"xwikipaneltitle#if ($isHeaderHidden) hidden#end\">$title</h1>{{/html}}\n(% class=\"xwikipanelcontents\" %)(((\n#end\n#end\n\n#macro(panelhiddenheader $title)\n#panelheader($title, false, true)\n#end\n\n#macro(largepanelheader $title)\n#panelheader($title, true, false)\n#end\n\n###\n###    Panel footer\n###\n### Generate the ending html code for a panel\n###\n#macro(panelfooter)\n#if ($paneldoc.syntax.toIdString() == 'xwiki/1.0')\n</div>\n</div>\n#else\n)))\n)))\n#end\n#end\n\n###\n###    Display Panel\n###\n### Extract and display the panel code from the panel object\n###\n### @Deprecated\n#macro(displaypanel $name)\n  #set ($paneldoc = $xwiki.getDocument($name))\n  #if ($paneldoc)\n    #set ($pobj = $paneldoc.getObject('Panels.PanelClass'))\n    #if ($pobj)\n      $!doc.display('content', 'view', $pobj)\n    #end\n  #end\n#end\n\n#macro(displayPropName $prop)\n#if($services.localization.render(\"${class.getName()}_${prop.name}\") == \"${class.getName()}_${prop.name}\")\n$prop.prettyName#else\n$services.localization.render($prop.name)#end\n#end\n\n###\n###    Display Panel content\n###\n###\n#macro(displaypanelcontent $doc $obj)\n$doc.display(\"content\", $obj)\n#end\n\n###\n###    Message box\n###\n#macro(xwikimessageboxstart $title $message)\n  <div class=\"centered\">\n    <fieldset class=\"xwikimessage\">\n      <legend><span>$title</span></legend>\n      #if (\"$!message\" != '')\n        <p class=\"xwikimessage\">$message</p>\n      #end\n#end\n#macro(xwikimessageboxend)\n    </fieldset>\n  </div>\n#end\n\n#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)\n#xwikimessageboxstart($title $message)\n      <div class=\"buttons\"><a href=\"$urlyes\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgyes\" onclick=\"location='$urlyes'; return false;\"/></a><a href=\"$urlno\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgno\" onclick=\"location='$urlno'; return false;\"/></a></div>\n#xwikimessageboxend()\n#end\n\n#macro(xwikimessageboxfield $fielddoc $fieldname $fieldtext $html)\n<div class=\"xmblabel\">$fieldtext</div>\n<div class=\"xmbfield\">\n#if($fieldname!=\"\")\n$fielddoc.display($fieldname, \"edit\")\n#end\n#if($html!=\"\")\n$html\n#end\n</div>\n#end\n\n#macro(xwikimessageboxsubmit $submittext)\n<div class=\"xmbbutton\">\n<input type=\"submit\" value=\"$submittext\" />\n</div>\n#end\n\n\n###\n###    message\n###\n\n#macro(warning $text)\n<div class=\"warningmessage\"><span class=\"messagetype\">$services.localization.render('warning'): </span>$text</div>\n#end\n\n#macro(error $text)\n<div class=\"errormessage\"><span class=\"messagetype\">$services.localization.render('error'): </span>$text</div>\n#end\n\n#macro(info $text)\n<div class=\"infomessage\">$text</div>\n#end\n\n#macro(message $text)\n<div class=\"plainmessage\">$text</div>\n#end\n\n#macro (floatingbox $text)\n<div class=\"floatinginfobox\">$text</div>\n#end\n\n#macro (startfloatingbox)\n<div class=\"floatinginfobox\">\n#end\n\n#macro (endfloatingbox)\n</div>\n#end\n\n###\n###    Display in page panels layout\n###\n###\n#macro(displayPanelLayout $nbcolumns $panelNameList)\n  <div class=\"panellayoutcontainer-${nbcolumns}col\">\n    #set($lastColumnId = ($nbcolumns - 1))\n    #foreach($colId in [0..$lastColumnId])\n      <div class=\"panellayoutcol\">\n        #foreach($panelName in $panelNameList)\n          #if($panelName && ($panelName != \"\") && (((($foreach.count - 1) + $nbcolumns) % $nbcolumns) == $colId))\n            #displaypanel($panelName)\n          #end\n        #end\n      </div>\n    #end\n  </div>\n#end\n\n#**\n * Displays a public google calendar with all buttons and displays\n * The size of the display is 800x600\n *\n * This macro displays the public part of the calendar specified. However if the visiting user is logged in in Google Calendar and has rights to the private part of the calendar then the information will be displayed.\n *\n * @param id ID of the google account to display the calendar for\n *#\n#macro(googlecal $id)\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?height=600&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a public google calendar with all buttons and displays and a custom size\n *\n * @param id ID of the google account to display the calendar for\n * @param width Width of the calendar\n * @param height Height of the calendar\n *#\n#macro(googlecalsize $id $width $height)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?height=${height}&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a private google calendar with all buttons\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n *#\n#macro(googlecalprivate $id $token)\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?pvttk=${token}&amp;height=600&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a private google calendar with all buttons\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n * @param width Width of the calendar\n * @param height Height of the calendar\n *#\n#macro(googlecalprivatesize $id $token $width $height)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?pvttk=${token}&amp;height=${height}&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a public or private google calendar with a wide range of settings\n * You can check the effect of these settings using the Google Calendar Embed Helper\n * http://www.google.com/calendar/embedhelper\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n * @param width Width of the calendar\n * @param height Height of the calendar\n * @param showTitle 0 to not show the title\n * @param showNav 0 to not show the navigation buttons allowing to switch to previous/next week or month\n * @param showDate 0 to not show the current period displayed\n * @param showPrint 0 to not show the print button\n * @param showTabs 0 to not show the tabs allowing to switch between MONTH,WEEK,AGENDA mode\n * @param showCalendars 0 to not show the calendars list drop down button\n * @param showTz Show a message saying the timezone of the dates/hours\n * @param mode Default mode to display (empty is Month display, WEEK is Week dispaly, AGENDA is the event display)\n * @param language Language to display in (en,fr,de,..)\n * @param bgcolor Background color of the calendar in the form #255455\n * @param color Color of the events in the form #234567\n * @param ctz Timezone in which to display the calendar. Leave empty for default calendar Timezone\n * @param border Border in pixels (1,2,3)\n *#\n#macro(googlecalcustom $id $token $width $height $showTitle $showNav $showDate $showPrint $showTabs $showCalendars $showTz $mode $language $bgcolor $color $ctz $border)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n#if($color!=\"\")\n#set($color = $color.replaceAll(\"#\",\"%23\"))\n#else\n#set($color = \"%232952A3\")\n#end\n#if($bgcolor!=\"\")\n#set($bgcolor = $bgcolor.replaceAll(\"#\",\"%23\"))\n#else\n#set($bgcolor = \"%232952A3\")\n#end\n{pre}\n<iframe src=\"//www.google.com/calendar/embed?showTitle=${showTitle}&amp;showNav=${showNav}&amp;showDate=${showDate}&amp;showPrint=${showPrint}&amp;showTabs=${showTabs}&amp;showCalendars=${showCalendars}&amp;showTz=${showTz}&amp;mode=${mode}&amp;height=${height}&amp;wkst=2&amp;hl=${language}&amp;bgcolor=${bgcolor}&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=${color}&amp;ctz=${ctz}\" style=\" border:solid ${border}px #777 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n#**\n * Displays a list of documents.\n * Only documents that the current user is allowed to view will be displayed.\n *\n * @param docNames list of document names.\n * @param displaySpaces true to group documents by space.\n * @param blacklistedSpaces spaces to exclude from the list.\n *#\n#macro(displayDocumentList $docNames $displaySpaces $blacklistedSpaces)\n  #set($documentList = [])\n  #foreach($docName in $docNames)\n    #if($xwiki.hasAccessLevel(\"view\", $xcontext.user, $docName))\n      #set($document = $xwiki.getDocument($docName).getTranslatedDocument())\n      #if(!$blacklistedSpaces.contains($document.getSpace()))\n        #set($discard = $documentList.add($document))\n      #end\n    #end\n  #end\n  #if($documentList.size() > 0)\n    #set($previousSpace = \"\")\n    <ul class=\"xlist\">\n      #foreach($document in $documentList)\n        #if ($document.getSpace() != $previousSpace && $displaySpaces)\n          #if($foreach.count > 1) </ul></div></li> #end ## Close previous space item if needed\n          <li class=\"xitem\">\n            <div class=\"xitemcontainer\">\n              $services.icon.renderHTML('space') $escapetool.xml($document.space)\n              <ul class=\"xlist\"> ## Open new space item\n          #set($previousSpace = $document.getSpace())\n        #end\n        <li class=\"xitem\">\n          <div class=\"xitemcontainer\">\n            $services.icon.renderHTML('page')\n            <a href=\"$document.getURL()\">$escapetool.xml($document.plainTitle)</a>\n          </div>\n        </li>\n      #end\n      #if($displaySpaces)\n        </ul></div></li> ## Close last space item\n      #end\n    </ul>\n  #end\n#end\n#**\n * Set a variable from request parameters.\n * If the parameter is not present in the request, set it to the default value.\n *\n * Note that request parameters will be cast to the type of the defaultValue.\n * Handled types: ArrayList, Boolean, Integer, Float, Long, Double.\n *\n * @param variable the variable to set.\n * @param parameterName name of the parameter to look for in the request.\n * @param defaultValue if the parameter is not set in the HTTP request, the variable is assigned this value.\n * @deprecated since Velocity 1.7 (XWiki 3.0) it is no longer possible to use macros this way.\n *     Setting $variable will not be observed outside the macro unless the actual parameter is also called $variable.\n *     Use #readVariableFromRequest instead.\n *###\n#macro(setVariableFromRequest $variable $parameterName $defaultValue)\n  ## Trick: when null, \"$variable\" will print the actual parameter name, so \"$abc\" if the macro was called with $abc as a parameter.\n  ## Use this hack to extract the actual parameter name, and use #evaluate to set it.\n  #set ($variable = $NULL)\n  #set ($varName = \"$variable\")\n  #readVariableFromRequest($varName $parameterName $defaultValue)\n#end\n##\n##\n##\n#**\n * Set a variable from request parameters.\n * If the parameter is not present in the request, set it to the default value.\n *\n * Note that request parameters will be cast to the type of the defaultValue.\n * Handled types: ArrayList, Boolean, Integer, Float, Long, Double.\n *\n * @param resultVariableName the name of the variable to set, a String; when the macro returns, a variable named that way will be created with the output value\n * @param parameterName name of the parameter to look for in the request.\n * @param defaultValue if the parameter is not set in the HTTP request, the variable is assigned this value.\n *###\n#macro(readVariableFromRequest $resultVariableName $parameterName $defaultValue)\n  ## Try to get the variable value from HTTP request.\n  #if ($defaultValue.class == 'class java.util.ArrayList')\n    #set ($result = [])\n    #foreach ($param in $request.getParameterValues($parameterName))\n      #set ($discard = $result.add($param))\n    #end\n    #if ($result.size() == 0)\n      #set ($discard = $result.addAll($defaultValue))\n    #end\n  #else\n    #set ($result = $request.getParameter(\"${parameterName}\"))\n    #if (\"$!result\" != '')\n      #if ($defaultValue.class == 'class java.lang.Boolean')\n        #set ($result = $util.parseBoolean($result))\n      #elseif ($defaultValue.class == 'class java.lang.Integer')\n        #set ($result = $numbertool.toNumber($result).intValue())\n      #elseif ($defaultValue.class == 'class java.lang.Float')\n        #set ($result = $numbertool.toNumber($result).floatValue())\n      #elseif ($defaultValue.class == 'class java.lang.Long')\n        #set ($result = $numbertool.toNumber($result).longValue())\n      #elseif ($defaultValue.class == 'class java.lang.Double')\n        #set ($result = $numbertool.toDouble($result))\n      #end\n    #end\n    #if (\"$!result\" == '')\n      #set ($result = $defaultValue)\n    #end\n  #end\n  #setVariable($resultVariableName $result)\n#end\n##\n##\n##\n#**\n * Assign a value to a variable, given by its name. The purpose of this macro is to emulate call by macro expansion,\n * which was available in velocity versions up to 1.6, but was removed in 1.7.\n *\n * @param variableName the name of the variable to set, a String; when the macro returns, a variable named that way will be created with the output value\n * @param value the value to assign\n *###\n#macro(setVariable $variableName $value)\n## Only do this if the variable name is really a valid variable name\n#if ($variableName.matches('[a-zA-Z_][a-zA-Z0-9_-]*'))\n#evaluate(\"${escapetool.h}set(${escapetool.d}${variableName}=${escapetool.d}value)\")\n#elseif ($variableName.matches('\\$[a-zA-Z_][a-zA-Z0-9_-]*'))\n#evaluate(\"${escapetool.h}set(${variableName}=${escapetool.d}value)\")\n#end\n#end\n##\n##\n##\n#**\n * Displays a submit button, i.e. an <tt>input</tt> element with <tt>type=submit</tt>.\n * For styling purposes, the button is wrapped in a span element.\n * @param name The value of the <tt>name</tt> attribute\n * @param shortcut The keyboard shortcut for this button. The value will be displayed\n *        as the title of the element. The actual shortcut is attached elsewhere, in\n *        the javascript code.\n * @param value The value of the <tt>value</tt> attribute, i.e. the text displayed on\n *        the button.\n *#\n#macro(submitButton $name $shortcut $value)\n<span class=\"buttonwrapper\"><input class=\"button\" type=\"submit\" name=\"$name\"#if($keyboardShortcutsEnabled) title=\"$shortcut\"#end value=\"$value\"/></span>\n<input type=\"hidden\" name=\"xaction\" value=\"$escapetool.xml($action)\" />\n#end\n#**\n * Displays a submit button for the editor. This macro calls submitButton,\n * composing all its parameters based on the action's identifier and the\n * identifier of the corresponding localized resources.\n * @param action The identifier of the button's action.\n * @param resourceIdentifier The key used to identify the localized resources.\n *#\n#macro(editActionButton $action $resourceIdentifier)\n#submitButton(\"action_${action}\", $services.localization.render(\"core.shortcuts.edit.${resourceIdentifier}\"), $services.localization.render($resourceIdentifier))\n#end\n\n#**\n * Display a human-readable file size\n *\n * @param $size the size in bytes to display in a human readable format\n *#\n#macro(dynamicsize $sz)\n#if($sz < 1024)\n$sz bytes##\n#else\n#set($ksz = $mathtool.div($sz, 1024))\n#set($ksz = $mathtool.roundTo(1, $ksz))\n#if($ksz < 1024)\n$ksz KB##\n#else\n#set($Msz = $mathtool.div($sz, 1048576))\n#set($Msz = $mathtool.roundTo(1, $Msz))\n$Msz MB##\n#end##\n#end##\n#end\n\n#**\n * AJAX Live table that displays XWiki data.\n *\n * Example of usage, in syntax 2.0:\n * <code>\n * {{velocity}}\n * #set($columns = [ \"_avatar\", \"first_name\", \"last_name\", \"email\"])\n * #set($columnsProperties = {\n *                  \"first_name\" : { \"type\" : \"text\" , \"size\" : 10, \"link\" : \"view\"},\n *                  \"last_name\" : { \"type\" : \"text\" , \"size\" : 10, \"link\" : \"view\"},\n *                  \"email\" : { \"type\" : \"text\" , \"size\" : 20, \"link\" : \"editor\"},\n *                  \"_avatar\" : { \"type\" : \"none\" , \"size\" : 20, \"link\" : \"none\", \"html\" : \"true\", \"sortable\":false }\n *                })\n * #set($options = {  \"className\":\"XWiki.XWikiUsers\",\n *                    \"translationPrefix\" : \"platform.index.\",\n *                    \"tagCloud\" : true,\n *                    \"rowCount\": 15,\n *                    \"javascriptName\" : \"MyModule.myTable\",\n *                    \"description: \"The description of this table here\", })\n * #livetable(\"userstable\" $columns $columnsProperties $options)\n * {{/velocity}}\n * </code>\n *\n * @param divid the id of the table div\n * @param collist the column list\n * @param colprops the columns properties\n * @param options the livetable options.\n *#\n#macro (livetable $divid $collist $colprops $options)\n## Open wiki syntax wrappers.\n#if(\"$!options.outputOnlyHtml\" != 'true')\n## Do not indent:\n#if($xwiki.getCurrentContentSyntaxId() != \"xwiki/1.0\")\n\n\n## We don't clean the HTML because we control the markup and because we want to preserve the whitespace characters in\n## the attribute values (e.g. if the live table id contains whitespaces)\n{{html clean=\"false\"}}\n#else {pre} #end\n#end\n#if ($services.liveData.liveTable && $request.useLiveData == 'true')\n#livetable_liveData($divid $collist $colprops $options)\n#else\n#livetable_html($divid $collist $colprops $options)\n#end\n## Close wiki syntax wrappers. Do not modify the indentation below or it will generate unwanted paragraphs!\n#if(\"$!options.outputOnlyHtml\" != 'true')#if($xwiki.getCurrentContentSyntaxId() != \"xwiki/1.0\"){{/html}}\n\n#else{/pre}#end##\n#end## end-wrappers\n#end\n\n#macro (livetable_liveData $divid $collist $colprops $options)\n  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/liveData.js', true))\n  #set ($liveDataConfig = $services.liveData.liveTable.getConfig($divid, $collist, $colprops, $options))\n  #set ($liveDataConfigJSON = $jsontool.serialize($liveDataConfig))\n  <div class=\"liveData\" id=\"$!escapetool.xml($divid)\" data-config=\"$escapetool.xml($liveDataConfigJSON)\"></div>\n#end\n\n#macro(livetable_html $divid $collist $colprops $options)\n  ##\n  ## SX deps.\n  ##\n  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))\n  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))\n  ##\n  ## Options / defaults\n  ##\n  #if(\"$!options.translationPrefix\" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end\n  #if(\"$!options.defaultOrder\" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end\n  #if(\"$!options.selectedColumn\" != '') #set($selectedColumn = $options.selectedColumn) #end\n  #if(\"$!options.tagCloud\" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end\n  #set ($topfilters = $options.topFilters)\n  #set ($hasTopFilters = \"$!topfilters\" !='')\n  #if(\"$options.pageSize\" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end\n  #set ($queryFilters = $options.queryFilters)\n  #if (!$queryFilters)\n    #set ($queryFilters = 'currentlanguage,hidden')\n  #end\n  #set($classname = \"$!options.className\")\n  ##\n  ## Columns informations\n  ##\n  #set ($dataColumns = [])\n  #set ($classParams = {})\n  #foreach($colname in $collist)\n    ## If the live table options don't specify which column to select then select the first non-special column.\n    #if(\"$!selectedColumn\" == '' && !$colname.startsWith('_'))\n      #set($selectedColumn = $colname)\n    #end\n    #if($colname != '_actions')\n      #set ($discard = $dataColumns.add($colname))\n      #set($propClassName = \"$!{colprops.get($colname).get('class')}\")\n      #if($propClassName != '')\n        #set ($discard = $classParams.put(\"${colname}_class\", $propClassName))\n      #end\n      #set ($propMatchType = \"$!colprops.get($colname).match\")\n      #if ($propMatchType != '')\n        #set ($discard = $classParams.put(\"${colname}_match\", $propMatchType))\n      #end\n    #end\n  #end\n  #if(\"$!options.url\" != '')\n    #set($dataurl = $options.url)\n  #else\n    #set ($parameters = {\n      'outputSyntax': 'plain',\n      'transprefix': $transprefix,\n      'classname': $classname,\n      'collist': $stringtool.join($dataColumns, ','),\n      'queryFilters': $queryFilters\n    })\n    #set ($discard = $parameters.putAll($classParams))\n    #set ($resultPage = $options.resultPage)\n    #if (\"$!resultPage\" == '')\n      #set ($resultPage = 'XWiki.LiveTableResults')\n    #end\n    #set ($dataurl = $xwiki.getURL($resultPage, 'get', \"$escapetool.url($parameters)&$!options.extraParams\"))\n  #end\n  ## Clone the column properties because we modify them.\n  #set ($macro.columnDescriptors = $jsontool.fromString($jsontool.serialize($colprops)))\n  #livetable_normalizeColumnDescriptors($macro.columnDescriptors $collist $transprefix)\n  #set ($macro.settings = {\n    'name': $options.javascriptName,\n    'url': $dataurl,\n    'columns': $collist,\n    'columnDescriptors': $macro.columnDescriptors,\n    'xclass': $classname,\n    'maxPages': $options.maxPages,\n    'hasPageSize': $hasPageSize,\n    'pageSizeBounds': $options.pageSizeBounds,\n    'limit': $options.rowCount,\n    'selectedTags': $options.selectedTags,\n    'hasTopFilters': $hasTopFilters,\n    'callback': $options.callback\n  })\n  ##\n  ## HTML Table\n  ##\n  #set ($htmlLiveTableId = $escapetool.xml($divid))\n<div class=\"xwiki-livetable-container\">\n  #if($tagcloud || $hasTopFilters)\n  <div class=\"tipfilters\">\n  #end\n  #if($hasTopFilters)\n  <div id=\"${htmlLiveTableId}-topfilters\" class=\"xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end\">\n    <div>\n      <div class=\"xwiki-livetable-topfilters-container\">\n      $topfilters\n      </div>\n      <div class=\"tippointer\">\n        <div></div>\n      </div>\n    </div>\n  </div>\n  #end\n  #if($tagcloud)\n    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))\n    <div id=\"${htmlLiveTableId}-tagcloud\" class=\"xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end\">\n      <div>\n        <div class=\"xwiki-livetable-tagcloud-container\">\n          <h2>$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')</h2>\n          <div class=\"xwiki-livetable-tagcloud\"></div>\n        </div>\n        <div class=\"tippointer\">\n          <div></div>\n        </div>\n      </div>\n    </div>\n  #end\n  #if($tagcloud || $hasTopFilters)\n  </div>\n  #end\n  <table id=\"${htmlLiveTableId}\" class=\"xwiki-livetable\"\n      #if(\"$!options.description\" != '') summary=\"$escapetool.xml($options.description)\"#end\n      data-settings=\"$escapetool.xml($jsontool.serialize($macro.settings))\" data-xwiki-lightbox=\"false\">\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span id=\"${htmlLiveTableId}-limits\" class=\"xwiki-livetable-limits\"></span>\n  #if($hasPageSize)\n        <span id=\"${htmlLiveTableId}-pagesize\" class=\"xwiki-livetable-pagesize\">\n            <span>$services.localization.render('platform.livetable.pagesizeLabel')</span>\n            <span class=\"xwiki-livetable-pagesize-content\" ></span>\n        </span>\n  #end\n        <span id=\"${htmlLiveTableId}-ajax-loader\" class=\"xwiki-livetable-loader hidden\">\n          <img src=\"$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')\" alt=\"$escapetool.xml($services.localization.render('platform.livetable.loading'))\" title=\"\" />\n        </span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-display-container\">\n        <table class=\"xwiki-livetable-display\">\n          <thead class=\"xwiki-livetable-display-header\">\n            <tr>\n            #set($columnCount = 0)\n            #foreach($colname in $collist)\n              #set($colprop = $colprops.get($colname))\n              #set ($isFilterable = $colprop.filterable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              #set ($isSortable = $colprop.sortable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              ## Get the column's display name to use in the header.\n              #set($displayName = \"#getLivetableColumnDisplayName($colname, $colprop, $transprefix)\")\n              #set ($defaultHeaderClass = {'_actions': 'actions', '_avatar': 'avatar'})\n              #set ($discard = $colprop.putIfAbsent('headerClass', $defaultHeaderClass.get($colname)))\n              <th scope=\"col\" class=\"xwiki-livetable-display-header-text $!colprop.headerClass\n                  #if ($!colprop.type == 'hidden')hidden#end\n                  #if ($isSortable)sortable #if ($colname == $selectedColumn)selected $defaultOrder#else asc#end#end\">\n                #if($isSortable)<a rel=\"${colname}\">#end\n                #if($isFilterable)<label for=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\">#end\n                $displayName\n                #if($isFilterable)</label>#end\n                #if($isSortable)</a>#end\n                #set($columnCount = $mathtool.add($columnCount, 1))\n              </th>\n            #end\n            </tr>\n            #livetable_filters($collist $colprops $classname)\n            <tr class=\"xwiki-livetable-initial-message\">\n              <td colspan=\"${columnCount}\">\n                <div class=\"warningmessage\">$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')</div>\n              </td>\n            </tr>\n          </thead>\n          <tbody id=\"${htmlLiveTableId}-display\" class=\"xwiki-livetable-display-body\"><tr><td>&nbsp;</td></tr></tbody>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span class=\"xwiki-livetable-limits\"></span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n  </table>\n  <div id=\"${htmlLiveTableId}-inaccessible-docs\" class=\"hidden\">\n    #info($services.localization.render('rightsmanager.documentrequireviewrights'))\n  </div>\n  <div id=\"${htmlLiveTableId}-computed-title-docs\" class=\"hidden\">\n    #info(\"(<span class='docTitleComputed'></span>)&nbsp;$services.localization.render('platform.livetable.docTitleComputedHint')\")\n  </div>\n</div>## xwiki-livetable-container\n#end## end-livetable-macro\n\n#macro (livetable_filters $columns $columnsProperties $xclassName)\n  <tr class=\"xwiki-livetable-display-filters\">\n    #foreach ($column in $columns)\n      #set ($columnProperties = $columnsProperties.get($column))\n      ## Note: Even though the column is hidden, we still need a (pottentially hidden) TD to generate valid HTML\n      <td class=\"xwiki-livetable-display-header-filter #if (\"$!columnProperties.type\" == 'hidden')hidden#end\">\n        #if ($columnProperties.type != 'hidden')\n          #if ($columnProperties.filterable != false && \"$!column\" != '_actions')\n            #set ($columnXClassName = $columnProperties.get('class'))\n            #set ($columnXPropertyName = $column)\n            #if (!$columnXClassName)\n              #if ($column.startsWith('doc.'))\n                #set ($columnXClassName = 'XWiki.DocumentClass')\n                #set ($columnXPropertyName = $column.substring(4))\n              #else\n                #set ($columnXClassName = $xclassName)\n              #end\n            #end\n            #set ($xclass = $xwiki.getDocument($columnXClassName).getxWikiClass())\n            #set ($xproperty = $xclass.get($columnXPropertyName))\n            #livetable_filter($column $columnProperties $xproperty)\n          #end\n        #end\n      </td>\n    #end\n  </tr>\n#end\n\n#macro (livetable_filter $column $columnProperties $xproperty)\n  #set ($filterType = $columnProperties.type)\n  #if (\"$!filterType\" == '')\n    ## Determine the filter type from the xproperty type.\n    #set ($filterTypeByXPropertyType = {\n      'Boolean': 'boolean',\n      'DBList': 'suggest',\n      'DBTreeList': 'suggest',\n      'Date': 'text',\n      'Email': 'text',\n      'Groups': 'suggest',\n      'Number': 'number',\n      'Page': 'suggest',\n      'StaticList': 'list',\n      'String': 'text',\n      'TextArea': 'text',\n      'Users': 'suggest'\n    })\n    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))\n    #if (\"$!filterType\" == '')\n      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text\n      ## filter in this case because it is the most generic.\n      #set ($filterType = 'text')\n    #end\n  #end\n  #set($escapedTitle = $escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n    [$services.localization.render(\"${transprefix}$column\")])))\n  #if ($filterType == 'list' || $filterType == 'multilist')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\"\n      #if ($filterType == 'multilist')\n        class=\"xwiki-livetable-multilist\" multiple=\"multiple\">\n      #else\n        ><option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n        <option disabled=\"disabled\">\u2500\u2500\u2500\u2500</option>\n      #end\n    #set ($storedValues = $xproperty.listValues)\n    #set ($displayedValues = $xproperty.mapValues)\n    #foreach ($storedValue in $storedValues)\n      #set ($l10nKey = \"${xproperty.className}_${column}_$storedValue\")\n      #set ($displayedValue = $services.localization.render($l10nKey))\n      #if ($displayedValue == $l10nKey)\n        #set ($displayedValue = $displayedValues.get($storedValue).value)\n      #end\n      <option value=\"$storedValue\">$displayedValue</option>\n    #end\n    </select>\n  #elseif ($filterType == 'boolean')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\">\n      <option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n      <option value=\"0\">$services.localization.render('no')</option>\n      <option value=\"1\">$services.localization.render('yes')</option>\n    </select>\n  #elseif ($filterType == 'text' || $filterType == 'number')\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$column\" type=\"text\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapedTitle\"/>\n  #elseif ($filterType == 'suggest' && $xproperty)\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.css'),\n      {'type': 'text/css', 'rel': 'stylesheet'}))\n    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n    #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      class=\"suggest-propertyValues\" multiple=\"multiple\" size=\"1\"\n      data-className=\"$!escapetool.xml($xproperty.className)\" data-propertyName=\"$!escapetool.xml($xproperty.name)\"\n      title=\"$escapedTitle\">\n    </select>\n  #end\n#end\n\n#**\n * Internal macro - Determine the name to be displayed in a livetable's column header. Strategy is as follows :\n * - If defined, the 'displayName' passed as a column option wins.\n * - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name.\n * - Finally, we fall back on the column name.\n *\n * @param colname the column name\n * @param colprop the column properties map\n * @param transprefix the translations prefix to use\n *\n * @internal\n *#\n##\n#macro(getLivetableColumnDisplayName $colname $colprop $transprefix)\n  #if(\"$!colprop.displayName\" != '')\n    #set($displayName = $colprop.displayName)##\n  #elseif($transprefix != '')\n    #set($displayName = $services.localization.render(\"${transprefix}${colname}\"))##\n  #else\n    #set($displayName = $colname)##\n  #end\n$displayName##\n#end\n\n#macro (livetable_normalizeColumnDescriptors $columnDescriptors $colList $transPrefix)\n  ## Make sure the columns containing HTML are formatted in HTML indeed\n  #set ($htmlColumnKeys = ['doc.location'])\n  #foreach($htmlColumnKey in $htmlColumnKeys)\n    #if ($colList.contains($htmlColumnKey))\n      #set ($htmlColumnProps = $columnDescriptors[$htmlColumnKey])\n      #if (!$htmlColumnProps)\n        #set ($htmlColumnProps = {})\n        #set ($columnDescriptors[$htmlColumnKey] = $htmlColumnProps)\n      #end\n      #if ($htmlColumnProps.html == $NULL)\n        #set ($htmlColumnProps.html = true)\n      #end\n    #end\n  #end\n  ## Translate the column descriptor.\n  #foreach ($entry in $columnDescriptors.entrySet())\n    #if (\"$!entry.value.displayName\" == '' && \"$!transPrefix\" != '')\n      #set ($entry.value.displayName = $services.localization.render(\"${transPrefix}$entry.key\"))\n    #end\n  #end\n  #livetable_normalizeActionsDescriptor($columnDescriptors $transPrefix)\n#end\n\n#macro (livetable_normalizeActionsDescriptor $columnDescriptors $transPrefix)\n  #set ($actionsDescriptor = $columnDescriptors.get('_actions'))\n  #if ($actionsDescriptor)\n    #foreach ($action in $actionsDescriptor.actions)\n      ## If the action is specified as a string then only the action id is specified.\n      #if ($action.equals(\"$!action\"))\n        ## Note that 'labels' and 'actionCallbacks' are deprecated.\n        #set ($action = {\n          'id': $action,\n          'label': $actionsDescriptor.labels.get($action),\n          'async': $actionsDescriptor.ajaxActions.get($action),\n          'callback': $actionsDescriptor.actionCallbacks.get($action)\n        })\n        #set ($discard = $actionsDescriptor.actions.set($foreach.index, $action))\n      #end\n      #if (\"$!action.label\" == '')\n        #if (\"$!transPrefix\" != '' && $services.localization.get(\"${transPrefix}_actions.$action.id\"))\n          #set ($action.label = $services.localization.render(\"${transPrefix}_actions.$action.id\"))\n        #elseif ($services.localization.get(\"platform.livetable._actions.$action.id\"))\n          #set ($action.label = $services.localization.render(\"platform.livetable._actions.$action.id\"))\n        #else\n          #set ($action.label = $action.id)\n        #end\n      #end\n      #if (\"$!action.icon\" == '')\n        #set ($defaultActionIcons = {\n          'rename': 'move',\n          'delete': 'cross',\n          'restore': 'refresh',\n          'undelete': 'refresh',\n          'rights': 'lock',\n          'edit': 'pencil',\n          'view': 'eye'\n        })\n        #set ($action.icon = $defaultActionIcons.getOrDefault($action.id, $action.id))\n      #end\n      #set ($action.icon = \"$!services.icon.renderHTML($action.icon)\")\n    #end\n  #end\n#end\n\n#**\n * Internal macro - Remove the obfuscated results (i.e., non-viewable rows) from the map when the total number of \n * returned rows is larger or equal to the total number of counted rows.\n *\n * @param map the response map returned to the user. This map is expected to have a totalrows and returnedrows fields\n *            with numeric values and a rows field containing a arrow of objects containing a doc_viewable boolean\n *            field   \n *\n * @internal\n * @since 13.9RC1\n * @since 13.4.4\n * @since 12.10.11\n *#\n##\n#macro (livetable_filterObfuscated $map)\n  ## When the total number of rows is not bigger than the limit, we remove the obfuscated results from the response since\n  ## this has no impact on the pagination.\n  #set ($rows = $map.get('rows'))\n  #set ($offset = 0)\n  #if($map.get('offset'))\n    #set ($offset = $mathtool.sub($map.get('offset'), 1))\n  #end\n  #if ($map.get('totalrows') <= $map.get('returnedrows'))\n    #set ($filteredRows = [])\n    #foreach ($row in $rows)\n      #if($row['doc_viewable'])\n        #set ($discard = $filteredRows.add($row))\n      #end\n    #end\n    ## The offset needs to be taken into account when returning the total number of pages otherwise, client-side can\n    ## consider that previsouly returned results have been removed (e.g., in case of page size change).\n    #set($discard = $map.put('totalrows', $mathtool.add($filteredRows.size(), $offset)))\n    #set($discard = $map.put('returnedrows', $filteredRows.size()))\n  #else\n    #set ($filteredRows = $rows)\n  #end\n  #set ($discard = $map.put('rows', $filteredRows))\n#end\n\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is either of type Map or of type List but the whereSQL query is\n * using the \"?\" syntax for specifying parameters. Should always be used instead of #addLivetableLocationFilter which\n * is buggy when called several times (it'll add the same HQL binding name every time it's called!\n * See https://jira.xwiki.org/browse/XWIKI-17463).\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @since 12.5\n *#\n#macro(filterLocation $whereQL $whereParams $locationValue $hqlLocationBindingName $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' below.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #if ($whereParams.entrySet())\n        #set ($discard = $whereParams.put($hqlLocationBindingName, \"%${locationFilterValue}%\"))\n      #else\n        #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #end\n      #if ($filterWebHome == true)\n        #if ($whereParams.entrySet())\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n        #else\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n          #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n        #end\n      #else\n        #if ($whereParams.entrySet())\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!'\")\n        #else\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!'\")\n        #end\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n  #end\n#end\n##\n##\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is either of type Map or of type List but the whereSQL query is\n * using the \"?\" syntax for specifying parameters.\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @deprecated starting with 12.5 use #filterLocation since this macro is buggy when called several times\n *#\n#macro(addLivetableLocationFilter $whereQL $whereParams $locationValue $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #if ($whereParams.entrySet())\n        #set ($discard = $whereParams.put('locationFilterValue', \"%${locationFilterValue}%\"))\n      #else\n        #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #end\n      #if ($filterWebHome == true)\n        #if ($whereParams.entrySet())\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(:locationFilterValue) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(:locationFilterValue) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n        #else\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n          #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n        #end\n      #else\n        #if ($whereParams.entrySet())\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(:locationFilterValue) ESCAPE '!'\")\n        #else\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!'\")\n        #end\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n #end\n#end\n##\n##\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is of type List and the whereSQL query is using the \"?N\" syntax\n * for specifying parameters.\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @since 11.6\n *#\n#macro(addLocationFilter $whereQL $whereParams $locationValue $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #if ($filterWebHome == true)\n        #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?${whereParams.size()}) ESCAPE '!')\")\n        #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?${whereParams.size()}) ESCAPE '!')\")\n        #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n      #else\n        #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?${whereParams.size()}) ESCAPE '!'\")\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n #end\n#end\n##\n##\n#**\n * Pagination 2.0\n *\n * Displays a generic pagination widget for browsing a collection of items.\n * The macro is responsible for displaying browsing links, and does not involve the actual display of the browsed items.\n *\n * @param parameters A map of parameters:\n * <dl>\n *   <dt>url</dt>\n *   <dd>The base url of the document displaying the collection.</dd>\n *   <dd>Default: $doc.getURL('view')</dd>\n *   <dt>totalItems</dt>\n *   <dd>The total number number of items in the collection.</dd>\n *   <dd>Default: none, this parameter is mandatory.</dd>\n *   <dt>defaultItemsPerPage</dt>\n *   <dd>The number of items per page. This value is overwritten by the request parameter \"perPage\", if it exists and\n *       has a valid positive integer value.</dd>\n *   <dd>Default: 20</dd>\n *   <dt>position</dt>\n *   <dd>The placement of the pagination widget. Supported values: \"top\", \"bottom\". The bottom widget only displays\n *       pages, while the top widget also provides a information about the item range on the current page.</dd>\n *   <dd>Default: top</dd>\n *   <dt>itemParamName</dt>\n *   <dd>The name of the request parameter for the index of the first displayed item.</dd>\n *   <dd>Default: firstIndex</dd>\n *   <dt>itemsPerPageParamName</dt>\n *   <dd>The name of the request parameter for the number of items displayed on a page.</dd>\n *   <dd>Default: perPage</dd>\n *   <dt>noSx</dt>\n *   <dd>Do not force to use the pagination Skin Extension</dd>\n *   <dd>Default: false</dd>\n *   <dt>hash</dt>\n *   <dd>An optional URL hash to be appended to all pagination links generated by this macro.</dd>\n *   <dd>Default: none</dd>\n * </dl>\n *#\n#macro(pagination $parameters)\n  #if(!$parameters.noSx)\n  $xwiki.ssfx.use('uicomponents/pagination/pagination.css', true)##\n  #end\n  #if(\"$!{parameters.url}\" == '')\n    #set($parameters.url = $doc.getURL('view'))\n  #end\n  #if(!$parameters.url.contains('?'))\n    #set($parameters.url = \"${parameters.url}?\")\n  #end\n  #if($parameters.position != 'bottom')\n    #set($parameters.position = 'top')\n  #end\n  #paginationPrepareParams($parameters)\n  #paginationDisplay($parameters)\n#end\n#**\n * Pagination : request parameters preparation\n *\n * Used internally by the pagination macro. Retrieves pagination parameter values from the request:\n * \"firstIndex\" = the index of the first displayed item; \"perPage\" = number of items per page\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPrepareParams $parameters)\n  ## Setting some defaults\n  #if(\"$!{parameters.itemParamName}\" == '')\n    #set($parameters.itemParamName = 'firstIndex')\n  #end\n  #if(\"$!{parameters.itemsPerPageParamName}\" == '')\n    #set($parameters.itemsPerPageParamName = 'perPage')\n  #end\n  ## Adding the hash sign to the hash parameter if it is not present already\n  #if(\"$!{parameters.hash}\" != '' && !$parameters.hash.startsWith($escapetool.H))\n    #set($parameters.hash = \"${escapetool.H}${parameters.hash}\")\n  #end\n  ## Get starting item number from request\n  #set ($parameters.firstItem = \"$!{request.get($parameters.itemParamName)}\")\n  #set ($parameters.firstItem = $numbertool.toNumber($parameters.firstItem).intValue())\n  #if (!$parameters.firstItem)\n    #set ($parameters.firstItem = 0)\n  #end\n  ## Get number of items per page from request\n  #if (!$parameters.defaultItemsPerPage || $numbertool.toNumber($parameters.defaultItemsPerPage).intValue() <= 0)\n    #set ($parameters.defaultItemsPerPage = 20)\n  #end\n  #set ($parameters.itemsPerPage = \"$!{request.get($parameters.itemsPerPageParamName)}\")\n  #set ($parameters.itemsPerPage = $numbertool.toNumber($parameters.itemsPerPage).intValue())\n  #if (!$parameters.itemsPerPage || $parameters.itemsPerPage <= 0)\n    #set ($parameters.itemsPerPage = $parameters.defaultItemsPerPage)\n  #end\n#end\n#**\n * Pagination : display the pagination widget after all parameters have been computed\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationDisplay $parameters)\n  #set($parameters.pageCount = ($parameters.totalItems + $parameters.itemsPerPage - 1) / $parameters.itemsPerPage)\n  #if($parameters.firstItem >= $parameters.totalItems)\n    #set($parameters.firstItem = ($parameters.pageCount - 1) * $parameters.itemsPerPage)\n  #elseif($parameters.firstItem < 0)\n    #set($parameters.firstItem = 0)\n  #end\n  #set($parameters.crtPage = $parameters.firstItem / $parameters.itemsPerPage)\n  ## Make firstItem a multiple of itemsPerPage\n  #set($parameters.firstItem = $parameters.crtPage * $parameters.itemsPerPage)\n  #set($parameters.lastPage = $parameters.pageCount - 1)\n  <div class=\"paginationFilter\">\n    #if($parameters.position == 'top')\n      #paginationResultsRange($parameters)\n    #end\n    #if($parameters.totalItems > 0)\n      #if($parameters.controlsAround == true)\n        #paginationControlLeft($parameters)\n        #paginationPages($parameters)\n        #paginationControlRight($parameters)\n      #else\n        #paginationControl($parameters)\n        #paginationPages($parameters)\n      #end\n    #end\n  </div>\n#end\n#**\n * Pagination : display links for browsing pages\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPages $parameters)\n## $url $crtPage $itemsPerPage $lastPage $pageCount $itemParamName $itemsPerPageParamName)\n  #set($contextLeft  = 4)\n  #set($contextRight = 4)\n  #set($contextWidth = $contextLeft + 1 + $contextRight)\n  #if($parameters.pageCount <= $contextWidth)\n    #set($contextFirstPage = 0)\n    #set($contextLastPage = $parameters.pageCount - 1)\n  #else\n    #set($contextFirstPage = $parameters.crtPage - $contextLeft)\n    #set($contextLastPage = $parameters.crtPage + $contextRight)\n    #if($contextFirstPage < 0)\n      #set($contextFirstPage = 0)\n    #end\n    #if($contextLastPage >= $parameters.pageCount)\n      #set($contextLastPage = $parameters.pageCount - 1)\n    #end\n    #if($contextLastPage < $contextWidth)\n      #set($contextLastPage = $contextWidth - 1)\n    #end\n    #if($contextFirstPage > $parameters.pageCount - $contextWidth)\n      #set($contextFirstPage = $parameters.pageCount - $contextWidth)\n    #end\n  #end\n  <span class=\"pagination\">$services.localization.render('platform.livetable.paginationPage')\n  #if($contextFirstPage != 0)\n    #paginationPageLink(0 $parameters)\n  #end\n  #if($contextFirstPage > 1) ... #end\n  #foreach ($i in [$contextFirstPage .. $contextLastPage])\n    #paginationPageLink($i $parameters)\n  #end\n  #if($parameters.lastPage - $contextLastPage > 1) ... #end\n  #if($contextLastPage != $parameters.lastPage)\n    #paginationPageLink($parameters.lastPage $parameters)\n  #end\n  </span>\n#end\n#**\n * Pagination : display the link to a certain page (indicated by $pageNumber)\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPageLink $pageNumber $parameters)\n  #set($firstItem = $pageNumber * $parameters.itemsPerPage)\n  #set($displayedPageNumber = $pageNumber + 1)\n  #if($pageNumber == $parameters.crtPage)\n  <span class=\"currentPage\">$displayedPageNumber</span>\n  #else\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPageTitle', [$displayedPageNumber])\">$displayedPageNumber</a>\n  #end\n#end\n#**\n * Pagination : display prev / next links\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControl $parameters)\n  <span class=\"controlPagination\">\n  #paginationControlLeft($parameters)\n  #paginationControlRight($parameters)\n  </span>\n#end\n#**\n * Pagination : display prev link\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControlLeft $parameters)\n  #if($parameters.crtPage > 0)\n    #set($prevPage = $parameters.crtPage - 1)\n    #set($firstItem = $prevPage * $parameters.itemsPerPage)\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPagePrevTitle')\" class=\"prevPagination\">$services.localization.render('platform.livetable.paginationPagePrevious')</a>\n  #else\n    <span class=\"noPrevPagination\"> </span>\n  #end\n#end\n#**\n * Pagination : display next link\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControlRight $parameters)\n  #if($parameters.crtPage < $parameters.lastPage)\n    #set($nextPage = $parameters.crtPage + 1)\n    #set($firstItem = $nextPage * $parameters.itemsPerPage)\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPageNextTitle')\" class=\"nextPagination\">$services.localization.render('platform.livetable.paginationPageNext')</a>\n  #else\n    <span class=\"noNextPagination\"> </span>\n  #end\n#end\n#**\n * Pagination : message informing the user which items are being displayed on the current page (Results i - j of N)\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationResultsRange $parameters)\n  #set($from = $parameters.firstItem + 1)\n  #set($to =   $parameters.firstItem + $parameters.itemsPerPage)\n  #if ($to > $parameters.totalItems)\n    #set($to = $parameters.totalItems)\n  #end\n  <span class=\"resultsNo\">\n  #if($parameters.totalItems == 0)\n    <span class='currentResultsNo'>$services.localization.render('platform.livetable.paginationResultsNone')</span>\n  #elseif($parameters.totalItems == 1)\n    <span class='currentResultsNo'>$services.localization.render('platform.livetable.paginationResultsOne')</span>\n  #elseif($from == $parameters.totalItems)\n    $services.localization.render('platform.livetable.paginationResultsSingle', [$from, $parameters.totalItems])\n  #else\n    $services.localization.render('platform.livetable.paginationResultsMany', [$from, $to, $parameters.totalItems])\n  #end\n  </span>\n#end\n\n#**\n * Generates a vertical menu from an object describing the categories\n *\n * Expected format of the object:\n * menu = vector of items\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional, defaults to #\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $menu the menu object, in the format described above\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *        'cssClass' : specific css class for this menu\n *#\n#macro(verticalNavigation $menu $options)\n(% class=\"vertical-menu $!{options.cssClass}\" %)(((\n  #foreach ($item in $menu)\n    #verticalNavigationItem($item '*' $options)\n  #end\n)))\n#end\n\n#**\n * Generates a vertical menu item from an object (a map)\n *\n * Expected format:\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $item the menu item object, in the format described above\n * @param $level the current level of the item, of the form '\\*+'; the number of\n *        stars indicates the depth of the item in the menu\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *#\n#macro(verticalNavigationItem $item $level $options)\n  #set ($class = \"$!{item.cssClass}\")\n  #set ($hasChildren = ($item.children && $item.children.size() > 0))\n  #if ($hasChildren)\n    #set ($class = \"$class group\")\n  #end\n  #if ($options.crtItemId == $item.id)\n    #set ($class = \"$class current\")\n    #if ($hasChildren)\n      #set ($class = \"$class current-group\")\n    #end\n  #end\n  #set ($class = $class.trim())\n  #set ($name = \"$!{item.name}\")\n  #if ($name == '')\n    #set ($name = $services.localization.render(\"$!{options.translationPrefix}${item.id}\"))\n  #end\n  $level (% id=\"vertical-menu-${item.id}\" class=\"${class}\" %){{html}}<a #if (\"$!{item.url}\" != '')href=\"$item.url\"#{end}>$name</a>{{/html}}\n  #if ($hasChildren)\n    #set ($children = [])\n    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)\n    #foreach ($child in $children)\n      #verticalNavigationItem($child $level.concat('*') $options)\n    #end\n  #end\n#end\n\n#**\n * Sort a collection containing maps by a field.\n *\n *\n * @param $collection - List - Collection to sort.\n *\n * @param $field - String - Name of the field of the map to sort on.\n *\n * @param $defaultValue - Any - The default value for the sort if one of the elements has a NULL field\n *\n * @param $order - String - Must be 'asc' for ascending, or 'desc' for descending\n *\n * @param $outList - List - The returns from this macro will be put in this list, passing the list as a parameter\n *                          a safety measure because macros can't return values.\n *#\n#macro (sortCollectionOfMapsByField $collection $field $defaultValue $order $outputList)\n  ## If an element has a null field, $collectiontool.sort() won't return anything.\n  ## To avoid this situation, we create a new list that contains the elements with a default field if it is missing\n  #set ($newList = [])\n  #foreach ($element in $collection)\n    #if (\"$!element.get($field)\" == '')\n      #set ($elementCopy = {})\n      #set ($discard = $elementCopy.putAll($element))\n      #set ($discard = $elementCopy.put($field, $defaultValue))\n      #set ($discard = $newList.add($elementCopy))\n    #else\n      #set ($discard = $newList.add($element))\n    #end\n  #end\n  #set ($discard = $outputList.addAll($collectiontool.sort($newList, \"${field}:${order}\")))\n#end\n\n#**\n * Sets a gradient-based styling for CSS backgrounds\n *\n *\n * @param $icon the path to an additional icon image\n * @param $gradientData a map of gradients, where the following entries are currently used:\n *        'angle' :  an angle of direction for the gradient\n *        'colors':  a list of maps of color-stops for the gradient, where the following entries are currently used: \n *                'color'    : color value\n *                'position' : stop position for the color (between 0% and 100% or a lenght)\n *#\n#macro (css3_backgroundIconAndLinearGradient $icon $gradientData)\n  ## Older color themes don't have values defined for the gradients, so we'll use a simple background-color instead\n  #set ($validColors = 0)\n  #set ($validColor = '')\n  #foreach ($colorEntry in $gradientData.colors)\n    #if (\"$!{colorEntry.color}\" != '')\n      #set ($validColors = $validColors + 1)\n      #set ($validColor = $colorEntry.color)\n    #end\n  #end\n  #if ($validColors <= 1)\n    #if (\"$!{icon}\" != '')\n      background-image: ${icon};\n    #end\n    #if (\"$!{validColor}\" != '')\n      background-color: ${validColor};\n    #end\n    #break($macro)\n  #end\n  #set ($colors = '')\n  #set ($position = '')\n  #if ($gradientData.angle)\n    #if ($stringtool.indexOfAny($gradientData.angle, 'top', 'right', 'bottom', 'left') != -1)\n      #set ($position = \"to $!{gradientData.angle}\")\n    #else\n      #set ($position = \"$!{gradientData.angle}\")\n    #end\n  #elseif ($gradientData.to)\n    #set ($position = \"to $!{gradientData.to}\")\n  #end\n  #foreach ($colorEntry in $gradientData.colors)\n    #set ($colors = \"$!{colors}, $!{colorEntry.color} $!{colorEntry.position}\")\n  #end\n  #if (\"$!{colors}\" != '' && \"$!{position}\" == '')\n    #set ($colors = $colors.substring(2))\n  #end\n  background-image:#if (\"$!{icon}\" != '') $icon,#end linear-gradient($!{position}$!{colors});\n#end\n##\n##\n##\n#macro (css3_backgroundLinearGradient $gradientData)\n  #css3_backgroundIconAndLinearGradient ('' $gradientData)\n#end\n\n#**\n * Macro that adds the prefixes for box-sizing CSS property that alters the default CSS box model used to calculate widths and heights of elements\n *\n *\n * @param $value should take the following values: content-box | padding-box | border-box\n *#\n#macro (css3_boxSizing $value)\n  #if (\"$!{value}\" != '')\n    #set ($browserVariants = ['-moz-', ''])\n    #foreach ($bvar in $browserVariants)\n      ${bvar}box-sizing: $value;\n    #end\n  #end\n#end\n\n#**\n * Macro for text-shadow CSS property that adds shadows to text\n *\n *\n * @param $offsetX shadow's horizontal offset value from the text\n * @param $offsetY shadow's vertical offset value from the text\n * @param $blurRadius the blur radius value of the text-shadow\n * @param $color the color of the text-shadow\n *#\n#macro (css_textShadow $offsetX $offsetY $blurRadius $color)\n  ## In order to ensure consistency across browsers and also to accommodate old ColorThemes that might not have gradientColor defined, we test the existence of $color param\n  #if ((\"$!{offsetX}\" != '') && (\"$!{offsetY}\" != '') && (\"$!{color}\" != ''))\n    text-shadow: ${offsetX} ${offsetY} ${blurRadius} ${color};\n  #end\n#end\n\n#**\n * Transforms the given string to an XML name by filtering all the characters that are not allowed in an XML name. If\n * the given string contains only invalid characters then the result is the empty string.\n *\n * @param $string the string to be transformed to an XML name\n *#\n#macro(toXMLName $string)\n## Keep only Unicode letters and digits plus the hyphen and the underscore characters.\n#set($string = $string.replaceAll('[^\\p{L}\\p{N}_\\-]+', ''))\n## Make sure the string doesn't start with a number or the hyphen character.\n#set($string = $string.replaceAll('^[\\p{N}\\-]+', ''))\n$string##\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by pickers.\n *#\n#macro (picker_import)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the user and group picker.\n *#\n#macro (userPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestUsersAndGroups.js'))\n#end\n\n#macro (userPicker_input $multiSelect $parameters)\n  #if ($multiSelect)\n    #set ($discard = $parameters.put('multiple', 'multiple'))\n  #end\n  #set ($discard = $parameters.putIfAbsent('data-userScope', \"$!services.wiki.user.userScope\"))\n  #suggestInput($parameters)\n#end\n\n#macro (userPicker $multiSelect $parameters)\n  #userPicker_import\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-users\"))\n  #userPicker_input($multiSelect $parameters)\n#end\n\n#macro (groupPicker $multiSelect $parameters)\n  #userPicker_import\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-groups\"))\n  #userPicker_input($multiSelect $parameters)\n#end\n\n\n#**\n* Pulls all the JavaScript and CSS resources needed by the page picker.\n*#\n#macro (pagePicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPages.js',\n    {'forceSkinAction': true, 'language': $xcontext.locale}))\n#end\n\n#macro (pagePicker $parameters)\n  #pagePicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-pages\"))\n  #suggestInput($parameters)\n#end\n\n#**\n* Pulls all the JavaScript and CSS resources needed by the attachment picker.\n*#\n#macro (attachmentPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestAttachments.js'))\n  ## Pull the resources required by the configured icon set in order to display attachment icons.\n  #set ($discard = $services.icon.use())\n#end\n\n#macro (attachmentPicker $parameters)\n  #attachmentPicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-attachments\"))\n  #suggestInput($parameters)\n#end\n\n#**\n * Displays the given title (i.e. the title of the sheet) if the condition is true. Otherwise displays the title of the\n * current document (i.e. the document the sheet is applied to). If the condition is not specified then it checks if the\n * current document is a sheet by looking for an object of type 'XWiki.SheetDescriptorClass'. You can pass a traslation\n * key for the sheet title. This macro makes sure the document title is not displayed recursively.\n *\n * @param $title the sheet title, you can pass a translation key\n * @param $condition optional condition, whether to display the sheet title or the document title\n *#\n#macro (sheetTitle $title $condition)\n## NOTE: Don't format the code because spaces are preserved in document title.\n#if (!$condition && \"$!condition\" == '')##\n## Undefined condition. Use the default condition.\n#set ($condition = $doc.getObject('XWiki.SheetDescriptorClass'))\n#elseif ($condition.getClass().getName() == 'java.lang.String')##\n## The condition is the name of an xclass. Display the sheet title if the current document doesn't have such an object.\n#set ($condition = !$doc.getObject($condition))\n#end##\n##\n#if ($condition)##\n## Display the sheet title.\n$services.localization.render($title)##\n##\n#elseif (!$sheetTitle_displayingDocumentTitle)##\n## Display the document title without going through the sheet and preventing recursion.\n#set ($sheetTitle_displayingDocumentTitle = true)\n$services.display.title($doc, {\n  'displayerHint': 'default',\n  'outputSyntaxId': 'plain/1.0'\n})##\n#set ($sheetTitle_displayingDocumentTitle = false)\n##\n#else##\nRecursive title display detected!##\n#end##\n#end\n\n#**\n * Outputs the skin extension hooks, for both Stylesheet and JavaScript extensions. This is useful when the HTML response\n * of an AJAX request needs to pull some CSS and JavaScript resources. The code that makes the AJAX request should move\n * the 'includes' (i.e. the link and script tags) to the head of the HTML page after receiving the HTML response.\n *#\n#macro (skinExtensionHooks)\n  #styleSheetExtensionHooks\n  #javaScriptExtensionHooks\n#end\n\n#**\n * Hook for inserting CSS skin extensions.\n *#\n#macro (styleSheetExtensionHooks)\n  ## - Skin JAR extension hook. Placed first to allow other skin extensions to override it.\n  <!-- com.xpn.xwiki.plugin.skinx.CssResourceSkinExtensionPlugin -->\n  ## - Skin file extension hook.\n  <!-- com.xpn.xwiki.plugin.skinx.CssSkinFileExtensionPlugin -->\n  ## - Skin extension hook, placed at the last to be able to override previous css rules with a Skin Extension Object\n  <!-- com.xpn.xwiki.plugin.skinx.CssSkinExtensionPlugin -->\n#end\n\n#**\n * Hooks for inserting JavaScript skin extensions.\n *#\n#macro (javaScriptExtensionHooks)\n  ## - Skin JAR extension hook. Placed first to allow other skin extensions to override it.\n  <!-- com.xpn.xwiki.plugin.skinx.JsResourceSkinExtensionPlugin -->\n  ## - Skin file extension hook.\n  <!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin -->\n  ## - Skin extension hook\n  <!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin -->\n#end\n\n###\n### Displays an exception.\n###\n### @param title the message to display to the user\n### @param exception the exception to display when the user clicks on the message\n#macro(displayException $title $exception)\n<div class=\"xwikirenderingerror\" title=\"Click to get more details about the error\" style=\"cursor: pointer;\">\n  $title\n</div>\n<div class=\"xwikirenderingerrordescription hidden\">\n  <pre>$escapetool.xml($exceptiontool.getStackTrace($exception))</pre>\n</div>\n#end\n\n###\n### Generically display exceptions that have not been handled at the right level and have now bubbled up to the UI.\n###\n### This is a convenience macro, see #displayException.\n###\n### @param exception The exception to format for displaying\n#macro(displayUnhandledException $exception)\n  #set ($sentence1 = 'Unexpected error.')\n  #set ($sentence2 = 'Contact your administrator or <a href=\"https://jira.xwiki.org\">report the issue</a>.')\n  #set ($sentence3 = 'Click this box to get technical details.')\n  #displayException(\"${sentence1} ${sentence2} ${sentence3}\", $exception)\n#end\n\n###\n### Display a rich select input (with icon, description, etc...)\n###\n###\n### @param $fieldName name of the input field\n### @param $options an array of maps describing a category of options, which contains an array of options\n### @param $defaultValue the default value to use\n### @param $firstIsDefaultIfDefaultNull if defaultValue is null, select the first option\n### @param $cssClass class to add to the div (could be 'xwiki-select-small', 'xwiki-select-medium', 'xwiki-select-tall' or any other class)\n### @param $id (optional) id to give to the widget\n### @param $enableFilter (optional) enable the filtering of the options\n###\n### Example of use:\n###\n###\u00a0#set($options = [\n###                   { \n###                     'name': 'Category 1',\n###                     'options': [\n###                       { 'name': 'Option 1', 'value': 'option1', 'description': 'Description of the option 1', 'icon': 'wiki', 'data': {'some-data': 'some-value'}},\n###                       { 'name': 'Option 2', 'value': 'option2', 'description': 'Description of the option 2', 'icon': 'page'}\n###                     ]\n###                   },\n###                   {\n###                     'name': 'Category 2',\n###                     'options': [\n###                       { 'name': 'Option 3', 'value': 'option3', 'description': 'Description of the option 3', 'icon': 'check'}\n###                     ]\n###                   }\n###                 ])\n### #xwikiSelect('nameOfTheField', $options, 'option1', false, 'xwiki-select-small', '', true)\n#########################################################\n#macro(xwikiSelect $fieldName $options $defaultValue $firstIsDefaultIfDefaultNull $cssClass $id $enableFilter $filterPlaceHolder)\n  ## TODO: put this in a webjar instead\n  #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/select/select.css', {'forceSkinAction': true}))\n  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/select/select.js' , {'forceSkinAction': true}))\n  <div class=\"xwiki-select $!cssClass\" #if(\"$!id\" != '')id=\"$id\"#end>\n    ## Here we let a place to add a filter in the future, that is why the options are inside the following div block.\n    <p><input type=\"text\" class=\"xwiki-select-filter\" placeholder=\"$escapetool.xml($services.localization.render('web.widgets.select.filter.placeholder'))\"/></p>\n    <div class=\"xwiki-select-options\">\n      <ul>\n        #set ($count = 0)\n        #foreach ($category in $options)\n          <li class=\"xwiki-select-category\">$category.name (<span class=\"xwiki-select-category-count\">$category.options.size()</span>)\n            <ul>\n              #foreach ($option in $category.options)\n                #if (\"$!defaultValue\" == $$option.value || ($count == 0 && $firstIsDefaultIfDefaultNull && \"$!defaultValue\" == ''))\n                  #set ($checked = 'checked=\"checked\"')\n                  #set ($class = 'xwiki-select-option-selected')\n                #else\n                  #set ($checked = '')\n                  #set ($class = '')\n                #end\n                #set ($otherData = '')\n                #foreach($data in $option.data.keySet())\n                  #set ($otherData = \"$otherData data-${escapetool.xml($data)} = '$escapetool.xml($option.data.get($data))'\")\n                #end\n                <li class=\"xwiki-select-option $class\">\n                  <input type=\"radio\" name=\"$fieldName\" value=\"$escapetool.xml($option.value)\" id=\"${fieldName}_${count}\" $checked $otherData/>\n                  <span class=\"xwiki-select-option-icon\">$!services.icon.renderHTML($option.icon)</span>\n                  <div>\n                    <label for=\"${fieldName}_${count}\">$escapetool.xml($option.name)</label>\n                    #if (\"$!option.description\" != '')\n                      <p class=\"xHint\">$escapetool.xml($option.description)</p>\n                    #end\n                  </div>\n                </li>\n                #set ($count = $count + 1)\n              #end\n            </ul>\n          </li>\n        #end\n      </ul>\n    </div>\n  </div>\n#end\n\n#**\n * Used by custom property displayers that need a generic suggest input.\n *#\n#macro (xpropertySuggestInputDisplayer $field $prefix $name $value)\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n  #set ($id = \"${prefix}${name}\")\n  #set ($freeText = $!field.getValue('freeText'))\n  #set ($parameters = {\n    'id': $id,\n    'name': $id,\n    'value': $value,\n    'class': 'suggest-propertyValues',\n    'data-className': $field.className,\n    'data-propertyName': $name\n  })\n  #if (\"$!freeText\" != '')\n    #set ($discard = $parameters.put('data-freeText', $freeText))\n  #end\n\n  #if ($field.getProperty('disabled').value == 1)\n    #set ($parameters.disabled = 'disabled')\n  #end\n  #if ($field.getProperty('multiSelect').value == 1)\n    #set ($parameters.multiple = 'multiple')\n    #set ($separators = $field.getProperty('separators').value)\n    #if (\"$!separators\" != '')\n      #set ($parameters.separators = $separators)\n    #end\n  #end\n  #suggestInput($parameters)\n#end\n\n#**\n * Utility macro to output a generic suggest input.\n *\n * @param $parameters the parameters (most of them are treated as HTML attributes)\n *#\n#macro (suggestInput $parameters $optionsDisplayerMacroName)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n  #set ($discard = $parameters.put('size', 1))\n  #set ($attributes = [])\n  ## Note: Remove placeholder since it's not valid to have it on an HTML SELECT element.\n  #set ($nonAttributes = ['value', 'separators', 'placeholder'])\n  #foreach ($entry in $parameters.entrySet())\n    #if (!$nonAttributes.contains($entry.key))\n      #if ($entry.value.equals($entry.value.toString()))\n        #set ($stringValue = $entry.value)\n      #else\n        ## Serialize non-string values as JSON.\n        #set ($stringValue = $jsontool.serialize($entry.value))\n      #end\n      #set ($discard = $attributes.add(\"$escapetool.xml($entry.key)='$!escapetool.xml($stringValue)'\"))\n    #end\n  #end\n  #if (\"$!parameters.value.size()\" != '')\n    #set ($values = $parameters.value)\n  #elseif ($parameters.multiple)\n    #set ($values = $stringtool.split($parameters.value, $parameters.getOrDefault('separators', '|,')))\n  #elseif (\"$!parameters.value\" != '')\n    #set ($values = [$parameters.value])\n  #else\n    #set ($values = [])\n  #end\n  <select $stringtool.join($attributes, ' ')>\n    #if (\"$!parameters.placeholder\" != '')\n      <option value=\"\">$escapetool.xml($parameters.placeholder)</option>\n    #end\n    #if (\"$!optionsDisplayerMacroName\" != '')\n      #evaluate(\"${escapetool.h}${optionsDisplayerMacroName}(${escapetool.d}values)\")\n    #else\n      #foreach ($selectedValue in $values)\n        <option value=\"$!escapetool.xml($selectedValue)\" selected=\"selected\">$!escapetool.xml($selectedValue)</option>\n      #end\n    #end\n  </select>\n  #if ($parameters.multiple)\n    ## We need a hidden input with an empty value to be able to clear the selected values when no value is selected.\n    <input type=\"hidden\" name=\"$!escapetool.xml($parameters.name)\" />\n  #end\n#end\n\n#**\n * Serializes the given data as JSON and writes the result on the HTTP response, setting the proper content type and\n * length.\n *\n * @param $data the data to be written as JSON on the HTTP response\n *#\n#macro (jsonResponse $data)\n  #set ($json = $jsontool.serialize($data))\n  ## We write the output directly to the HTTP response in order to avoid going through the Rendering which executes\n  ## transformations that could break the JSON (e.g. the icon transformation). Another option would be to specify which\n  ## Rendering Transformations to execute in the query string (XWIKI-13167).\n  #set ($discard = $response.setContentType('application/json'))\n  ## Make sure the Character Encoding response header matches the character encoding used to write the response and\n  ## compute its length.\n  #set ($characterEncoding = 'utf-8')\n  #set ($discard = $response.setCharacterEncoding($characterEncoding))\n  #set ($discard = $response.writer.write($json))\n  ## The content length is measured in bytes and one character can use more than one byte.\n  #set ($discard = $response.setContentLength($json.getBytes($characterEncoding).size()))\n  ## Make sure the entire content is send back to the client.\n  #set ($discard = $response.flushBuffer())\n  ## Make sure XWiki doesn't write any more content to the response.\n  #set ($discard = $xcontext.setFinished(true))\n#end\n\n#macro (classPicker $parameters)\n  #classPicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') xwiki-selectize suggest-classes\"))\n  #suggestInput($parameters 'classPicker_displayOptions')\n#end\n\n#macro (classPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/xwiki.selectize.js', true))\n#end\n\n#macro (classPicker_displayOptions $selectedValues)\n  #set ($selectedClassReferences = $collectiontool.set)\n  #foreach ($selectedValue in $selectedValues)\n    #set ($discard = $selectedClassReferences.add($services.model.resolveDocument($selectedValue)))\n  #end\n  #set ($optionGroups = $collectiontool.orderedMap)\n  #classPicker_getOptionGroups($optionGroups $selectedClassReferences)\n  #classPicker_displayOptionGroups($optionGroups $selectedClassReferences)\n#end\n\n#macro (classPicker_getOptionGroups $optionGroups $selectedClassReferences)\n  #set ($classReferences = $collectiontool.set)\n  ## Make sure the selected classes are listed as options.\n  #set ($discard = $classReferences.addAll($selectedClassReferences))\n  #foreach ($className in $xwiki.classList)\n    #set ($classReference = $services.model.resolveDocument($className))\n    #if ($services.security.authorization.hasAccess('view', $classReference))\n      #set ($discard = $classReferences.add($classReference))\n    #end\n  #end\n  #set ($classReferenceTree = $services.model.toTree($classReferences))\n  #classPicker_addOptionGroups($classReferenceTree $optionGroups)\n#end\n\n#**\n * Flatten the class reference tree into a list of class reference groups.\n *#\n#macro (classPicker_addOptionGroups $parentNode $optionGroups)\n  ## Look for direct child class nodes and create an option group.\n  #set ($classNodes = $parentNode.getChildren($doc.documentReference.type))\n  #if ($classNodes.size() > 0)\n    #set ($classReferences = [])\n    #foreach ($classNode in $classNodes)\n      #set ($discard = $classReferences.add($classNode.reference))\n    #end\n    #set ($discard = $optionGroups.put($parentNode.reference, $classReferences))\n  #end\n  #foreach ($childNode in $parentNode.children)\n    #if ($childNode.children.size() > 0)\n      #classPicker_addOptionGroups($childNode $optionGroups)\n    #end\n  #end\n#end\n\n#macro (classPicker_displayOptionGroups $optionGroups $selectedClassReferences)\n  #foreach ($entry in $optionGroups.entrySet())\n    ## Use the location as group label.\n    #set ($path = [])\n    #set ($referenceChain = $entry.key.reversedReferenceChain)\n    ## Skip the wiki reference because classes are local.\n    #foreach ($reference in $referenceChain.subList(1, $referenceChain.size()))\n      #set ($discard = $path.add($reference.name))\n    #end\n    <optgroup label=\"$escapetool.xml($stringtool.join($path, ' / '))\">\n      #foreach ($classReference in $entry.value)\n        #set ($optionData = {\n          'url': $xwiki.getURL($classReference)\n        })\n        <option value=\"$escapetool.xml($services.model.serialize($classReference, 'local'))\"\n            #if ($selectedClassReferences.contains($classReference))selected=\"selected\"#end\n            data-data=\"$escapetool.xml($jsontool.serialize($optionData))\">\n          ## We display the class title instead of the class name because classes can be defined in nested (WebHome)\n          ## documents. We could also display the last space name but then we would need an option group for the top\n          ## level classes and a label for this group that doesn't confuse the users.\n          #set ($classDoc = $xwiki.getDocument($classReference))\n          $escapetool.xml($classDoc.plainTitle)\n        </option>\n      #end\n    </optgroup>\n  #end\n#end\n\n#macro (dateTimePicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'datetime'))\n  #set ($discard = $parameters.putIfAbsent('data-timestamp', $parameters.value.time))\n  #set ($discard = $parameters.putIfAbsent('data-locale', $services.localization.currentLocale))\n  #if (\"$!parameters.get('data-format')\" != '' && \"$!parameters.value.time\" != '')\n    #set ($parameters.value = $datetool.format($parameters.get('data-format'), $parameters.value,\n      $services.localization.currentLocale))\n  #end\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <input type=\"text\"\n    #foreach ($parameter in $parameters.entrySet())\n      $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n    #end\n  />\n#end\n\n#macro (dateTimePicker $parameters)\n  #dateTimePicker_import\n  #dateTimePicker_input($parameters)\n#end\n\n#macro (colorPicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'color-picker type-color'))\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <input type=\"text\"\n    #foreach ($parameter in $parameters.entrySet())\n      $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n    #end\n  />\n#end\n\n#macro (colorPicker $parameters)\n  #colorPicker_import\n  #colorPicker_input($parameters)\n#end\n\n#**\n * Returns the editor that should be used to edit the current document by default (if no other editor is specified).\n * This macro is called both in view mode (to determine the in-place editor to load) and in edit mode (to determine the\n * classical editor to use).\n *#\n#macro (getDefaultDocumentEditor $return)\n  ## Determine the sheets using the default document translation because objects are accessible only from the default\n  ## translation.\n  #if (!$services.sheet.getSheets($doc, $xcontext.action).isEmpty())\n    #set ($defaultDocumentEditor = 'inline')\n  #elseif ($xwiki.editorPreference == 'wysiwyg' && $services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString()))\n    #set ($defaultDocumentEditor = 'wysiwyg')\n  #else\n    #set ($defaultDocumentEditor = 'wiki')\n  #end\n  #set ($return = $NULL)\n  #setVariable (\"$return\" $defaultDocumentEditor)\n#end\n\n#macro (displayUserLink $userReference)\n  #if ($userReference.class.simpleName == \"DocumentUserReference\")\n    #set ($docReference = $userReference.reference)\n    #set ($props = $services.user.getProperties($userReference))\n    #if (\"$!props.firstName\" == \"\" || \"$!props.lastName\" == \"\")\n      #set ($displayName = $docReference.name)\n    #else\n      #set ($displayName = \"$props.firstName $props.lastName\")\n    #end\n  #else\n    #set ($docReference = $userReference)\n    #set ($displayName = $docReference.name)\n  #end\n  <div class=\"user\" data-reference=\"$escapetool.xml($docReference)\">\n    <span class=\"user-avatar-wrapper\">\n      #getUserAvatarURL($docReference $avatarURL 120)\n      <img class=\"user-avatar\" src=\"$escapetool.xml($avatarURL.url)\" />\n    </span>\n    <a href=\"$xwiki.getURL($docReference)\">$escapetool.xml($docReference.name)</a>\n  </div>\n#end\n\n##\n## Parse the provided filterValue according to its match type and assign the resulting start/end dates to the dateRange\n## map.\n## First, if a after or before matchType is provided, a '/' is added respectivelly at the end or at the beguinning of  \n## filterValue.\n## Then, we first start by trying to split filterValue using a '/', and parse the two substring as ISO 8601 dates.\n## If none of the substring conforms to the ISO 8601 date format, a second try is done by splitting using '-', and \n## the two substrings are parsed as timestamps.\n##\n## @since 14.0RC1\n## @since 13.10.2\n## @since 13.4.6\n##\n#macro (parseDateRange $matchType $filterValue $dateRange)\n  ## Transform the filter value into a date range if needed.\n  #if ($matchType == 'after')\n    #set ($dateRangeString = \"$filterValue/\")\n  #elseif ($matchType == 'before')\n    #set ($dateRangeString = \"/$filterValue\")\n  #else\n    ## Between start and end date.\n    #set ($dateRangeString = $filterValue)\n  #end\n  ## Try to parse as ISO 8601 time interval (see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)\n  #set ($parts = $dateRangeString.split('/', -1))\n  #if ($parts.size() == 2)\n    #set ($dateRange.start = $datetool.toDate('iso_tz', $parts[0]))\n    #set ($dateRange.end = $datetool.toDate('iso_tz', $parts[1]))\n  #end\n  #if (!$dateRange.start && !$dateRange.end)\n    ## Try to parse as timestamp range. Note that this doesn't handle well negative timestamps.\n    #set ($parts = $dateRangeString.split('-', -1))\n    #if ($parts.size() == 2)\n      #set ($dateRange.start = $datetool.toDate($numbertool.toNumber($parts[0])))\n      #set ($dateRange.end = $datetool.toDate($numbertool.toNumber($parts[1])))\n    #end\n  #end\n#end\n"], "fixing_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n###############################################################\n## Contains various standard Velocity macros automatically\n## loaded and usable everywhere (in Velocity).\n##\n## It actually extends the macros.vm defined in the templates\n## directory by redefining or adding new macros.\n##\n## Note that if you modify that file you will need to restart.\n###############################################################\n\n###\n###    Message box\n###\n#macro(xwikimessageboxstart $title $message)\n  <div class=\"centered panel panel-default xwikimessage\">\n    <div class=\"panel-heading\">\n      <div class=\"panel-title\">$title</div>\n    </div>\n    <div class=\"panel-body\">\n      #if (\"$!message\" != '')\n        <p class=\"xwikimessage\">$message</p>\n      #end\n#end\n#macro(xwikimessageboxend)\n    </div>##panel-body\n  </div>##panel\n#end\n\n#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)\n#xwikimessageboxstart($title $message)\n      <div class=\"buttons\"><a href=\"$urlyes\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgyes\" onclick=\"location='$urlyes'; return false;\"/></a> <a href=\"$urlno\" class=\"buttonwrapper\"><input type=\"button\" class=\"button secondary\" value=\"$msgno\" onclick=\"location='$urlno'; return false;\"/></a></div>\n#xwikimessageboxend()\n#end\n\n#**\n * Displays a submit button, i.e. an <tt>input</tt> element with <tt>type=submit</tt>.\n * For styling purposes, the button is wrapped in a span element.\n * @param name The value of the <tt>name</tt> attribute\n * @param shortcut The keyboard shortcut for this button. The value will be displayed\n *        as the title of the element. The actual shortcut is attached elsewhere, in\n *        the javascript code.\n * @param value The value of the <tt>value</tt> attribute, i.e. the text displayed on\n *        the button.\n * @param class The class to use.\n *#\n#macro(submitButton $name $shortcut $value $class)\n<input class=\"btn $!class\" type=\"submit\" name=\"$name\"#if($keyboardShortcutsEnabled) title=\"$shortcut\"#end value=\"$value\"/>\n#end\n#**\n * Displays a submit button for the editor. This macro calls submitButton,\n * composing all its parameters based on the action's identifier and the\n * identifier of the corresponding localized resources.\n * @param action The identifier of the button's action.\n * @param resourceIdentifier The key used to identify the localized resources.\n * @param class The class to use.\n *#\n#macro(editActionButton $action $resourceIdentifier $class)\n#submitButton(\"action_${action}\", $services.localization.render(\"core.shortcuts.edit.${resourceIdentifier}\"), $services.localization.render($resourceIdentifier), $class)\n<input type=\"hidden\" name=\"xaction\" value=\"$escapetool.xml($action)\" />\n#end\n\n#macro(livetable_html $divid $collist $colprops $options)\n  ##\n  ## SX deps.\n  ##\n  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))\n  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))\n  ##\n  ## Options / defaults\n  ##\n  #if(\"$!options.translationPrefix\" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end\n  #if(\"$!options.defaultOrder\" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end\n  #if(\"$!options.selectedColumn\" != '') #set($selectedColumn = $options.selectedColumn) #end\n  #if(\"$!options.tagCloud\" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end\n  #set ($topfilters = $options.topFilters)\n  #set ($hasTopFilters = \"$!topfilters\" !='')\n  #if(\"$options.pageSize\" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end\n  #set ($queryFilters = $options.queryFilters)\n  #if (!$queryFilters)\n    #set ($queryFilters = 'currentlanguage,hidden')\n  #end\n  #set($classname = \"$!options.className\")\n  ##\n  ## Columns informations\n  ##\n  #set ($dataColumns = [])\n  #set ($classParams = {})\n  #foreach($colname in $collist)\n    ## If the live table options don't specify which column to select then select the first non-special column.\n    #if(\"$!selectedColumn\" == '' && !$colname.startsWith('_'))\n      #set($selectedColumn = $colname)\n    #end\n    #if($colname != '_actions')\n      #set ($discard = $dataColumns.add($colname))\n      #set($propClassName = \"$!{colprops.get($colname).get('class')}\")\n      #if($propClassName != '')\n        #set ($discard = $classParams.put(\"${colname}_class\", $propClassName))\n      #end\n      #set ($propMatchType = \"$!colprops.get($colname).match\")\n      #if ($propMatchType != '')\n        #set ($discard = $classParams.put(\"${colname}_match\", $propMatchType))\n      #end\n    #end\n  #end\n  #if(\"$!options.url\" != '')\n    #set($dataurl = $options.url)\n  #else\n    #set ($parameters = {\n      'outputSyntax': 'plain',\n      'transprefix': $transprefix,\n      'classname': $classname,\n      'collist': $stringtool.join($dataColumns, ','),\n      'queryFilters': $queryFilters\n    })\n    #set ($discard = $parameters.putAll($classParams))\n    #set ($resultPage = $options.resultPage)\n    #if (\"$!resultPage\" == '')\n      #set ($resultPage = 'XWiki.LiveTableResults')\n    #end\n    #set ($dataurl = $xwiki.getURL($resultPage, 'get', \"$escapetool.url($parameters)&$!options.extraParams\"))\n  #end\n  ## Clone the column properties because we modify them.\n  #set ($macro.columnDescriptors = $jsontool.fromString($jsontool.serialize($colprops)))\n  #livetable_normalizeColumnDescriptors($macro.columnDescriptors $collist $transprefix)\n  #set ($macro.settings = {\n    'name': $options.javascriptName,\n    'url': $dataurl,\n    'columns': $collist,\n    'columnDescriptors': $macro.columnDescriptors,\n    'xclass': $classname,\n    'maxPages': $options.maxPages,\n    'hasPageSize': $hasPageSize,\n    'pageSizeBounds': $options.pageSizeBounds,\n    'limit': $options.rowCount,\n    'selectedTags': $options.selectedTags,\n    'hasTopFilters': $hasTopFilters,\n    'callback': $options.callback\n  })\n  ##\n  ## HTML Table\n  ##\n  #set ($htmlLiveTableId = $escapetool.xml($divid))\n<div class=\"xwiki-livetable-container\">\n  #if($tagcloud || $hasTopFilters)\n  <div class=\"tipfilters\">\n  #end\n  #if($hasTopFilters)\n  <div id=\"${htmlLiveTableId}-topfilters\" class=\"xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end\">\n    <div>\n      <div class=\"xwiki-livetable-topfilters-container\">\n      $topfilters\n      </div>\n      <div class=\"tippointer\">\n        <div></div>\n      </div>\n    </div>\n  </div>\n  #end\n  #if($tagcloud)\n    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))\n    <div id=\"${htmlLiveTableId}-tagcloud\" class=\"xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end\">\n      <div>\n        <div class=\"xwiki-livetable-tagcloud-container\">\n          <h2>$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')</h2>\n          <div class=\"xwiki-livetable-tagcloud\"></div>\n        </div>\n        <div class=\"tippointer\">\n          <div></div>\n        </div>\n      </div>\n    </div>\n  #end\n  #if($tagcloud || $hasTopFilters)\n  </div>\n  #end\n  <table id=\"${htmlLiveTableId}\" class=\"xwiki-livetable\"\n      data-settings=\"$escapetool.xml($jsontool.serialize($macro.settings))\" data-xwiki-lightbox=\"false\">\n    #if(\"$!options.description\" != '')\n      <caption class=\"sr-only\">$options.description</caption>\n    #end\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span id=\"${htmlLiveTableId}-limits\" class=\"xwiki-livetable-limits\"></span>\n  #if($hasPageSize)\n        <span id=\"${htmlLiveTableId}-pagesize\" class=\"xwiki-livetable-pagesize\">\n            <span>$services.localization.render('platform.livetable.pagesizeLabel')</span>\n            <span class=\"xwiki-livetable-pagesize-content\" ></span>\n        </span>\n  #end\n        <span id=\"${htmlLiveTableId}-ajax-loader\" class=\"xwiki-livetable-loader hidden\">\n          <img src=\"$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')\" alt=\"$escapetool.xml($services.localization.render('platform.livetable.loading'))\" title=\"\" />\n        </span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-display-container\">\n        <table class=\"xwiki-livetable-display\">\n          <thead class=\"xwiki-livetable-display-header\">\n            <tr>\n            #set($columnCount = 0)\n            #foreach($colname in $collist)\n              #set($colprop = $colprops.get($colname))\n              #set ($isFilterable = $colprop.filterable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              #set ($isSortable = $colprop.sortable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              ## Get the column's display name to use in the header.\n              #set($displayName = \"#getLivetableColumnDisplayName($colname, $colprop, $transprefix)\")\n              #set ($defaultHeaderClass = {'_actions': 'actions', '_avatar': 'avatar'})\n              #set ($discard = $colprop.putIfAbsent('headerClass', $defaultHeaderClass.get($colname)))\n              <th scope=\"col\" class=\"xwiki-livetable-display-header-text $!escapetool.xml($colprop.headerClass)\n                  #if ($!colprop.type == 'hidden')hidden#end\n                  #if ($isSortable)sortable #if ($colname == $selectedColumn)selected $defaultOrder#else asc#end#end\">\n                #if($isFilterable)<label for=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\">#end\n                #if($isSortable)<a data-rel=\"${escapetool.xml($colname)}\">#end\n                $escapetool.xml($displayName)\n                #if($isSortable)</a>#end\n                #if($isFilterable)</label>#end\n                #set($columnCount = $mathtool.add($columnCount, 1))\n              </th>\n            #end\n            </tr>\n            #livetable_filters($collist $colprops $classname)\n            <tr class=\"xwiki-livetable-initial-message\">\n              <td colspan=\"${columnCount}\">\n                <div class=\"warningmessage\">$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')</div>\n              </td>\n            </tr>\n          </thead>\n          ## Use hyphenation in order to prevent the live table from overflowing the available width (e.g. when the\n          ## table cells contain long words that cannot be wrapped otherwise).\n          ## See https://justmarkup.com/articles/2015-07-31-dealing-with-long-words-in-css/\n          <tbody id=\"${htmlLiveTableId}-display\" class=\"xwiki-livetable-display-body hyphenate\">\n            <tr><td colspan=\"${columnCount}\">&nbsp;</td></tr>\n          </tbody>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span class=\"xwiki-livetable-limits\"></span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n  </table>\n  <div id=\"${htmlLiveTableId}-inaccessible-docs\" class=\"hidden\">\n    #info($services.localization.render('rightsmanager.documentrequireviewrights'))\n  </div>\n  <div id=\"${htmlLiveTableId}-computed-title-docs\" class=\"hidden\">\n    #info(\"(<span class='docTitleComputed'></span>)&nbsp;$services.localization.render('platform.livetable.docTitleComputedHint')\")\n  </div>\n</div>## xwiki-livetable-container\n#end## end-livetable-macro\n\n#macro (livetable_filter $column $columnProperties $xproperty)\n  #set ($filterType = $columnProperties.type)\n  #if (\"$!filterType\" == '')\n    ## Determine the filter type from the xproperty type.\n    #set ($filterTypeByXPropertyType = {\n      'Boolean': 'boolean',\n      'DBList': 'suggest',\n      'DBTreeList': 'suggest',\n      'Date': 'date',\n      'Email': 'text',\n      'Groups': 'suggest',\n      'Number': 'number',\n      'Page': 'suggest',\n      'StaticList': 'list',\n      'String': 'text',\n      'TextArea': 'text',\n      'Users': 'suggest'\n    })\n    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))\n    #if (\"$!filterType\" == '')\n      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text\n      ## filter in this case because it is the most generic.\n      #set ($filterType = 'text')\n    #end\n  #end\n  #if ($filterType == 'list' || $filterType == 'multilist')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      #if ($filterType == 'multilist')\n        #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetablemulti.js', true))\n        #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-select', 'css/bootstrap-select.css'),\n          {'type': 'text/css', 'rel': 'stylesheet'}))\n        class=\"xwiki-livetable-multilist\" multiple=\"multiple\">\n      #else\n        ><option value=\"\">$escapetool.xml($services.localization.render('platform.livetable.selectAll'))</option>\n        <option disabled=\"disabled\">\u2500\u2500\u2500\u2500</option>\n      #end\n    #set ($storedValues = $xproperty.listValues)\n    #set ($displayedValues = $xproperty.mapValues)\n    #foreach ($storedValue in $storedValues)\n      #set ($l10nKey = \"${xproperty.className}_${column}_$storedValue\")\n      #set ($displayedValue = $services.localization.render($l10nKey))\n      #if ($displayedValue == $l10nKey)\n        #set ($displayedValue = $displayedValues.get($storedValue).value)\n      #end\n      <option value=\"$!escapetool.xml($storedValue)\">$!escapetool.xml($displayedValue)</option>\n    #end\n    </select>\n  #elseif ($filterType == 'boolean')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\">\n      <option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n      <option value=\"0\">$services.localization.render('no')</option>\n      <option value=\"1\">$services.localization.render('yes')</option>\n    </select>\n  #elseif ($filterType == 'text' || $filterType == 'number')\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\" type=\"text\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n        [$services.localization.render(\"${transprefix}$column\")]))\" />\n  #elseif ($filterType == 'date')\n    #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetabledate.js', true))\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-daterangepicker',\n      'css/bootstrap-daterangepicker.css'), {'type': 'text/css', 'rel': 'stylesheet'}))\n    ## Hidden input for date fields allows us to send timestamps to the server while displaying pretty dates.\n    <input name=\"$column\" type=\"hidden\" />\n    #set ($dateFormat = $xproperty.getValue('dateFormat'))\n    #if (\"$!dateFormat\" == '')\n      #set ($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))\n    #end\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" type=\"text\"\n      data-type=\"date\" data-dateformat=\"$escapetool.xml($dateFormat)\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n      [$services.localization.render(\"${transprefix}$column\")]))\" />\n  #elseif ($filterType == 'suggest' && $xproperty)\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n      {'type': 'text/css', 'rel': 'stylesheet'}))\n    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n    #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      class=\"suggest-propertyValues\" multiple=\"multiple\" size=\"1\"\n      data-className=\"$!escapetool.xml($xproperty.className)\" data-propertyName=\"$!escapetool.xml($xproperty.name)\">\n    </select>\n  #end\n#end\n\n##\n##\n#**\n * Generates a vertical menu item from an object (a map)\n *\n * Expected format:\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $item the menu item object, in the format described above\n * @param $level the current level of the item, of the form '\\*+'; the number of\n *        stars indicates the depth of the item in the menu\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *#\n#macro(verticalNavigationItem $item $level $options)\n  #set ($class = \"$!{item.cssClass}\")\n  #set ($hasChildren = ($item.children && $item.children.size() > 0))\n  #if ($hasChildren)\n    #set ($class = \"$class group\")\n  #end\n  #if ($options.crtItemId == $item.id)\n    #set ($class = \"$class current\")\n    #if ($hasChildren)\n      #set ($class = \"$class current-group\")\n    #end\n  #end\n  #set ($class = $class.trim())\n  #set ($name = \"$!{item.name}\")\n  #if ($name == '')\n    #set ($name = $services.localization.render(\"$!{options.translationPrefix}${item.id}\"))\n  #end\n  $level (% id=\"vertical-menu-${item.id}\" class=\"${class}\" %){{html}}<a #if (\"$!{item.url}\" != '')href=\"$item.url\"#{end}>#if($item.glyphicon)$services.icon.renderHTML($item.glyphicon) #end$name</a>{{/html}}\n  #if ($hasChildren)\n    #set ($children = [])\n    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)\n    #foreach ($child in $children)\n      #verticalNavigationItem($child $level.concat('*') $options)\n    #end\n  #end\n#end\n\n#**\n * Start a breadcrumb.\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_start)\n  <ol class=\"breadcrumb\">\n#end\n\n#**\n * End of a breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_end)\n  </ol>\n#end\n\n#**\n * Display a line in the breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_line $link $title)\n  <li><a href=\"$link\">$title</a></li>\n#end\n\n#**\n * Display the current line in the breadcrumb\n *\n * Should be used in HTML.\n *#\n#macro(breadcrumb_current_line $title)\n  <li class=\"active\">$title</li>\n#end\n\n###\n### Glyph Icon\n###\n### @param iconName The name of the icon to display, without the glyphicon prefix (eg: 'globe')\n#macro(glyphicon $iconName)\n#if(\"$!iconName\"!='')<span class=\"glyphicon glyphicon-${iconName}\"></span>#end\n#end\n#macro(displayDocumentTitle $stepTitle $titleHint)\n<div class=\"row document-header\">\n  <div class=\"document-info col-xs-12\">\n    <div id=\"document-title\"><h1>$stepTitle</h1></div>\n    #if ($titleHint)\n      <div class=\"xdocLastModification\">$titleHint</div>\n    #end\n  </div>\n</div>\n<hr/>\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the date & time picker.\n *#\n#macro (dateTimePicker_import)\n  #set ($discard = $xwiki.linkx.use(\n    $services.webjars.url('Eonasdan-bootstrap-datetimepicker', 'css/bootstrap-datetimepicker.min.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}\n  ))\n  #set ($discard = $xwiki.jsfx.use('dateTimePicker.js', true))\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the color picker.\n *#\n#macro (colorPicker_import)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('colpick', 'css/colpick.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('colorPicker.css'))\n  #set ($discard = $xwiki.jsfx.use('colorPicker.js', true))\n#end\n\n#macro (colorPicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'form-control color-picker type-color'))\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <div class=\"input-group\">\n    <input type=\"text\"\n      #foreach ($parameter in $parameters.entrySet())\n        $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n      #end\n    />\n    <span class=\"input-group-addon\"><span class=\"color-preview\"></span></span>\n  </div>\n#end\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n###############################################################\n## Contains various standard Velocity macros automatically\n## loaded and usable everywhere (in Velocity).\n## \n## Note that if you modify that file you will need to restart.\n###############################################################\n##\n## #template(\"name.vm\")\n## Searches for the given velocity template and interprets it.\n## Only the velocity parser is executed on the file.\n## The template is searched in the following locations, in this order:\n## - as a property of the XWikiSkins object attached to the current skin document\n## - as an attachment to the current skin document\n## - as a file in the directory corresponding to the current skin\n## - the above 3 locations corresponding to the base skin\n## - the above 3 locations corresponding to the default skin\n## - as a file in the /templates/ directory\n##\n#macro(template $tname)\n$xwiki.parseTemplate($tname)\n#end\n##\n##\n## #renderTemplate(\"name.vm\")\n## Searches for the given velocity template and renders it.\n## The template is searched in the following locations, in this order:\n## - as a property of the XWikiSkins object attached to the current skin document\n## - as an attachment to the current skin document\n## - as a file in the directory corresponding to the current skin\n## - the above 3 locations corresponding to the base skin\n## - the above 3 locations corresponding to the default skin\n## - as a file in the /templates/ directory\n##\n#macro(renderTemplate $tname )\n$xwiki.renderTemplate($tname)\n#end\n##\n##\n## #includeTopic(\"Space.Document\")\n## Includes another fully rendered document inside the current response.\n## The topic is interpreted and rendered exactly as if it were viewed in a separate response,\n## meaning that the $doc variable will point to the included document. The resulting string is\n## wrapped with {pre}...{/pre}, in order to prevent double-rendering.\n## The platform prevents recursive includes.\n## This macro is useful for creating composite documents from smaller parts, or the other way around,\n## splitting a large document into smaller distinct chunks which can be edited in parallel.\n##\n#macro(includeTopic $topic)\n$xwiki.includeTopic($topic)\n#end\n##\n##\n## #includeMacros(\"Space.Document\")\n## Includes the content of another document as velocity macros. Because of the way the velocity\n## engine works, trying to place macros in another document and including it with another method\n## will not have the expected result. Other than making the macros available, it works just as\n## #includeForm($topic)\n##\n#macro(includeMacros $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeForm(\"Space.Document\")\n## Includes another fully rendered document inside the current response.\n## The included content is interpreted and rendered in the current context, meaning that $doc will\n## point to the current document (the includer), and not the included one. The resulting string is\n## wrapped with {pre}...{/pre}, in order to prevent double-rendering.\n## The platform prevents recursive includes.\n## This macro is the core of the document-template-sheet functionality of XWiki, where a document\n## has an XObject attached to it, its content consists of the \"#includeForm('Some.Sheet')\" statement,\n## and the sheet works just as if it were actually inside the document's content.\n##\n#macro(includeForm $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeInContext(\"Some.Document\")\n## Alias for #includeForm\n##\n#macro(includeInContext $topic)\n$xwiki.includeForm($topic)\n#end\n##\n##\n## #includeServlet(\"/xwiki/bin/view/Some/Document?params\")\n## Invokes on the server another servlet corresponding to the passed URL, and returns the output.\n## This is done using standard servlet mechanisms (javax.servlet.RequestDispatcher#include).\n##\n#macro(includeServlet $url)\n<!-- including $url -->\n$xwiki.invokeServletAndReturnAsString($url)\n<!-- included $url -->\n#end\n##\n##\n##\n##\n## #skype(\"skypeId\")\n## Displays the status for the given Skype id\n##\n## @Deprecated\n#macro(skype $id)\n<a href=\"skype:${id}?call\"><img width=\"182\" height=\"44\" src=\"http://mystatus.skype.com/bigclassic/${id}\" style=\"border: none;\"></a>\n#end\n##\n##\n## #yahoo(\"yahooId\")\n## Displays the status for the given Yahoo! id\n##\n## @Deprecated\n#macro(yahoo $id)\n<img border=\"0\" src=\"http://opi.yahoo.com/online?u=${id}&amp;m=g&amp;t=1\" alt=\"yahoo $id\" />\n#end\n## #sign(\"XWiki.Username\")\n## Displays a \"signature\", a link to the user's profile page.\n##\n#macro(sign $username)\n#if($username.indexOf(\".\")==-1)\n#set($username = \"XWiki.${username}\")\n#end\n#if($xwiki.exists(\"$username\"))\n$xwiki.getUserName(\"$username\")\n#else\n$xwiki.getUserName(\"xwiki:${username}\")\n#end\n#end\n\n#macro(includeHelp $pagename)\n  #if($xwiki.exists(\"xwiki:XWiki.${pagename}\"))\n    $xwiki.includeForm(\"xwiki:XWiki.${pagename}\",false)\n  #else\n    #if($xwiki.exists(\"XWiki.${pagename}\"))\n      $xwiki.includeForm(\"XWiki.${pagename}\",false)\n    #end\n  #end\n#end\n\n#macro(toc $pinit $pmax $pnumbered)\n#set($init = $pinit)\n#set($max = $pmax)\n#set($numbered = $pnumbered)\n #set ($int = 0)\n #set ($boolean = false)\n #if ($init == \"\")\n  #set ($init = 2)\n #else\n  #set ($init = $int.valueOf($init))\n #end\n #if ($max == \"\")\n  #set ($max = 6)\n #else\n  #set ($max = $int.valueOf($max))\n #end\n #if ($numbered == \"\")\n  #set ($numbered = false)\n #else\n  #set ($numbered = $boolean.valueOf($numbered))\n #end\n #set ($tocData = ${tdoc.getTOC($init, $max, $numbered)})\n #set ($xcontext.tocData = $tocData)\n #set ($lastLevel = $init - 1)\n #set ($depth = 0)\n #set ($openeditem = true)\n<div class=\"toc\">\n #foreach ($tocEntry in $tocData.entrySet())\n  #set ($level = $tocEntry.value.level)\n  #if ($level > $lastLevel)\n   #set ($to = $lastLevel + 1)\n   #set ($iter = [$level .. $to])\n   #foreach ($n in $iter)\n    #if($openeditem)\n      #set($openeditem = false)\n    #else\n<li>\n    #end\n<ul class=\"tocLevel\">\n    #set ($depth = $depth + 1)\n   #end\n  #elseif ($level < $lastLevel)\n   #set ($to = $level + 1)\n   #set ($iter = [$lastLevel .. $to])\n</li>\n   #foreach ($n in $iter)\n</ul>\n</li>\n    #set ($depth = $depth - 1)\n   #end\n  #else\n</li>\n  #end\n <li class=\"tocEntry\"><a href=\"#$tocEntry.key\">$!tocEntry.value.numbering #evaluate($tocEntry.value.text)</a>\n  #set ($lastLevel = $level)\n  #set($openeditem = true)\n #end\n #if ($depth > 0)\n  #set ($levels = [1 .. $depth])\n  #foreach($level in $levels)\n </li>\n</ul>#end\n #end\n</div>\n#end\n\n\n###\n###    Separator\n###\n### Insert a span containing a |\n###\n#macro(sep)\n<span class=\"separator\"> | </span>\n#end\n\n\n#**\n * Displays the user avatar and name, linked to the user profile page.\n *\n * @param arg could be either a string, a reference or a list of them\n * @param options various configuration options; default values are {\n *   showAlias: false, // whether to show the user alias or not\n *   useInlineHTML: false, // whether to use in-line HTML elements to display the user or not\n *   wrapAvatar: false // whether to wrap the avatar image with a span or not\n * }\n *#\n#macro (displayUser $arg $options)\n  #if ($stringtool.isEmpty($arg))\n    #set ($arg = \"XWiki.XWikiGuest\")\n  #end\n  #set ($isList = $arg.iterator())\n  #if ($isList)\n    #set ($usersList = $arg)\n  #else\n    #set ($usersList = [$arg])\n  #end\n  #set ($macro.options = {\n    'showAlias': false,\n    'useInlineHTML': false,\n    'wrapAvatar': false\n  })\n  #if ($options.entrySet())\n    #set ($discard = $macro.options.putAll($options))\n  #end\n  #set ($usersTag = 'ul')\n  #set ($userTag = 'li')\n  #if ($macro.options.useInlineHTML)\n    #set ($usersTag = 'span')\n    #set ($userTag = 'span')\n  #elseif (!$isList)\n    #set ($userTag = 'div')\n  #end\n  #set ($types = $collectiontool.set)\n  #set ($output = [])\n  #foreach ($user in $usersList)\n    ## Since we accept both a String or an EntityReference as input, we first check if we have an Entity Reference\n    ## to a Document and if not then we resolve the String to convert it to a Document Reference.\n    #set ($userReference = $user.extractReference('DOCUMENT'))\n    #if (!$userReference)\n      #set ($userReference = $services.model.resolveDocument($user, 'user/current'))\n    #end\n    #set ($userAlias = $userReference.name)\n    #if ($userAlias == $services.model.getEntityReference('DOCUMENT', 'default'))\n      #set ($userAlias = $userReference.lastSpaceReference.name)\n    #end\n    #set ($userDocument = $xwiki.getDocument($userReference))\n    #if ($userDocument.getObject('XWiki.XWikiGroups'))\n      #set ($type = 'group')\n      #set ($userName = $userDocument.plainTitle)\n      #if (\"$!userName\" == '')\n        #set ($userName = $userAlias)\n      #end\n    #else\n      #set ($type = 'user')\n      #set ($userName = $xwiki.getPlainUserName($userReference))\n    #end\n    #set ($discard = $types.add(\"${type}s\"))\n    #set ($userAliasDisplay = '')\n    #if ($macro.options.showAlias && $userAlias != $userName)\n      #set ($userAliasDisplay = \"<span class=\"\"${type}-alias\"\">\" + $escapetool.xml($userAlias) + '</span>')\n    #end\n    #set ($escapedUserName = $escapetool.xml($userName))\n    #getUserAvatarURL($userReference $avatarURL 120)\n    #set ($avatarWrapperStart = '')\n    #set ($avatarWrapperEnd = '')\n    #if ($macro.options.wrapAvatar)\n      #set ($avatarWrapperStart = \"<span class=\"\"${type}-avatar-wrapper\"\">\")\n      #set ($avatarWrapperEnd = '</span>')\n    #end\n    ## We avoid the whitespace because the users are displayed as inline blocks.\n    #set ($discard = $output.addAll([\n      \"<$userTag class=\"\"$type\"\" data-reference=\"\"$escapetool.xml($userReference)\"\">\",\n        $avatarWrapperStart,\n          \"<img class=\"\"${type}-avatar\"\" src=\"\"$escapetool.xml($avatarURL.url)\"\" alt=\"\"$escapedUserName\"\" />\",\n        $avatarWrapperEnd,\n        \"<a class=\"\"${type}-name\"\" href=\"\"$escapetool.xml($xwiki.getURL($userReference))\"\">$escapedUserName</a>\",\n        $userAliasDisplay,\n      \"</$userTag>\"\n    ]))\n  #end\n  #if ($isList && $output.size() > 0)\n    #set ($discard = $output.add(0, \"<$usersTag class=\"\"$stringtool.join($types, ' ')\"\">\"))\n    #set ($discard = $output.add(\"</$usersTag>\"))\n  #end\n  $stringtool.join($output, '')\n#end\n\n#**\n * Displays the group avatar and name, linked to the group profile page.\n *\n * @param arg could be either a string, a reference or a list of them\n * @param options various configuration options; default values are {\n *   showAlias: false, // whether to show the group alias or not\n *   useInlineHTML: false, // whether to use in-line HTML elements to display the group or not\n *   wrapAvatar: false // whether to wrap the avatar image with a span or not\n * }\n *#\n#macro (displayGroup $arg $options)\n  #displayUser($arg $options)\n#end\n\n\n###\n###    useravatar\n###\n### Display the avatar of a user or a group, or a default image if the user/group has no avatar\n###\n### @param username The name of the user or group whose avatar will be displayed\n###\n#macro(getUserAvatarURL $userName $return $size)\n  #set ($specified = false)\n  #set ($profileDoc = $xwiki.getDocument($userName))\n  #if ($profileDoc.getObject('XWiki.XWikiGroups'))\n    #set ($url = $xwiki.getSkinFile('icons/xwiki/noavatargroup.png', true))\n  #else\n    #set ($url = $xwiki.getSkinFile('icons/xwiki/noavatar.png', true))\n  #end\n  #if ($profileDoc && !$profileDoc.isNew() && $profileDoc.attachmentList.size() > 0)\n    #set ($profileObj = $profileDoc.getObject('XWiki.XWikiUsers', 0))\n    #set ($avatarFileName = $profileObj.getProperty('avatar').value)\n    #if (\"$!avatarFileName\" != '')\n      #set ($avatarAttachment = $profileDoc.getAttachment($avatarFileName))\n    #elseif ($profileDoc.getObject('XWiki.XWikiGroups'))\n      ## Look for the first image attachment.\n      #foreach ($attachment in $profileDoc.attachmentList)\n        #if ($attachment.isImage())\n          #set ($avatarAttachment = $attachment)\n          #break\n        #end\n      #end\n    #else\n      ## This ensures that $avatarAttachment is always set before the following \"if\" is called, preventing a previous\n      ## call to this macro from leaking...\n      #set ($avatarAttachment = $NULL)\n    #end\n    #if ($avatarAttachment && $avatarAttachment.isImage())\n      #set ($queryString = '')\n      #if ($size > 0)\n        #set ($queryString = \"width=$size&height=$size&keepAspectRatio=true\")\n      #end\n      #set ($url = $profileDoc.getAttachmentURL($avatarAttachment.filename, 'download', $queryString))\n      #set ($specified = true)\n    #end\n  #end\n  #set ($return = $NULL)\n  #setVariable (\"$return\" {'url': $url, 'specified': $specified})\n#end\n#macro(resizedUserAvatar $username $size)\n  #if(!$picturelist)\n    #set($picturelist = {})\n  #end\n  #if(!$picturelist.containsKey(\"${username}--${size}\"))\n    #getUserAvatarURL($username $avatarURL $size)\n    #if ($avatarURL.specified)\n      #set ($picture = \"<img src='\")\n      #set ($picture = $picture.concat($escapetool.xml($avatarURL.url)))\n      #set ($picture = $picture.concat(\"' alt='\"))\n      #set ($picture = $picture.concat(${xwiki.getUserName($username, false)}))\n      #set ($picture = $picture.concat(\"' title='\"))\n      #set ($picture = $picture.concat(${xwiki.getUserName($username, false)}))\n      #set ($picture = $picture.concat(\"'/>\"))\n    #else\n      #set ($picture = \"<img class='avatar avatar_${escapetool.xml(${size})}' src='\")\n      #set ($picture = $picture.concat($avatarURL.url))\n      #set ($picture = $picture.concat(\"' alt='${xwiki.getUserName($username, false)}' title='${xwiki.getUserName($username, false)}'/>\"))\n    #end\n    #set ($discard = $!picturelist.put(\"${username}--${size}\", $picture))\n  #end\n  $picturelist.get(\"${username}--${size}\")##\n#end\n#macro(largeUserAvatar $username)\n  #resizedUserAvatar($username 120)\n#end\n#macro(mediumUserAvatar $username)\n  #resizedUserAvatar($username 50)\n#end\n#macro(smallUserAvatar $username)\n  #resizedUserAvatar($username 30)\n#end\n###\n###    useravatar\n###\n### Display the avatar of a user (HTML is returned), or a standard image if the user has no avatar\n###\n### @param username The name of the user whose avatar will be displayed\n###\n#macro(useravatar $username)\n  #resizedUserAvatar($username 0)\n#end\n\n###\n###    mimetypeimg\n###\n### Display an icon according to the mimetype\n###\n### @param mime The reported mimetype of the file\n### @param fname The name of the file\n###\n#macro(mimetypeimg $mime $fname)\n  #set($idx = $fname.lastIndexOf('.'))\n  #set($idx = $idx + 1)\n  #if(($idx != 0) && ($idx != -1))\n    #set($ext = $fname.substring($idx))\n  #else\n    #set($ext = '')\n  #end\n  ## Map mimetypes to their corresponding icons\n  #if(!$mimetypeMap)\n    #set($mimetypeMap = {})\n    ## images\n    #set($discard = $mimetypeMap.put('image/svg+xml',                      ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('application/svg+xml',                ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/svg',                          ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/svg+xml',                      ['vector', 'svg']))\n    #set($discard = $mimetypeMap.put('image/',                             ['image', 'image']))\n    ## text\n    #set($discard = $mimetypeMap.put('text/html',                          ['file-code', 'html']))\n    #set($discard = $mimetypeMap.put('text/css',                           ['file-code', 'css']))\n    #set($discard = $mimetypeMap.put('text/',                              ['file-text', 'text']))\n    ## documents\n    #set($discard = $mimetypeMap.put('application/xml',                    ['file-code', 'xml']))\n    #set($discard = $mimetypeMap.put('application/pdf',                    ['file-pdf', 'pdf']))\n    #set($discard = $mimetypeMap.put('application/postscript',             ['file-pdf', 'ps']))\n    #set($discard = $mimetypeMap.put('application/msword',                 ['file-word', 'document']))\n    #set($discard = $mimetypeMap.put('application/powerpoint',             ['file-powerpoint', 'presentation']))\n    #set($discard = $mimetypeMap.put('application/vnd.ms-powerpoint',      ['file-powerpoint', 'presentation']))\n    #set($discard = $mimetypeMap.put('application/vnd.oasis.opendocument', ['file', 'office']))\n    #set($discard = $mimetypeMap.put('application/x-shockwave-flash',      ['film', 'flash']))\n    ## archives\n    #set($discard = $mimetypeMap.put('application/x-tar',                  ['file-archive', 'tar']))\n    #set($discard = $mimetypeMap.put('application/x-gzip',                 ['file-archive', 'gz']))\n    #set($discard = $mimetypeMap.put('application/x-gtar',                 ['file-archive', 'gz']))\n    #set($discard = $mimetypeMap.put('application/zip',                    ['file-archive', 'zip']))\n    #set($discard = $mimetypeMap.put('application/java-archive',           ['coffee', 'jar']))\n    #set($discard = $mimetypeMap.put('audio/',                             ['music', 'audio']))\n    #set($discard = $mimetypeMap.put('video/',                             ['film', 'video']))\n  #end\n  #if(!$extensionMap)\n    ## Map extensions to their corresponding icons\n    #set($extensionMap = {})\n    ## media\n    #set($discard = $extensionMap.put('ogg',      ['music', 'audio']))\n    #set($discard = $extensionMap.put('flac',     ['music', 'audio']))\n    #set($discard = $extensionMap.put('ogv',      ['film', 'video']))\n    #set($discard = $extensionMap.put('mk',       ['film', 'video']))\n    #set($discard = $extensionMap.put('avi',      ['film', 'video']))\n    #set($discard = $extensionMap.put('divx',     ['film', 'video']))\n    #set($discard = $extensionMap.put('mov',      ['film', 'video']))\n    #set($discard = $extensionMap.put('flv',      ['film', 'flash']))\n    #set($discard = $extensionMap.put('fla',      ['film', 'flash']))\n    #set($discard = $extensionMap.put('swf',      ['film', 'flash']))\n    ## office\n    #set($discard = $extensionMap.put('ppt',      ['file-powerpoint', 'presentation']))\n    #set($discard = $extensionMap.put('odp',      ['file-powerpoint', 'presentation']))\n    #set($discard = $extensionMap.put('doc',      ['file-word', 'document']))\n    #set($discard = $extensionMap.put('odf',      ['file', 'document']))\n    #set($discard = $extensionMap.put('ods',      ['file-excel', 'spreadsheet']))\n    #set($discard = $extensionMap.put('xls',      ['file-excel', 'spreadsheet']))\n    #set($discard = $extensionMap.put('odt',      ['file-word', 'odt']))\n    #set($discard = $extensionMap.put('sxw',      ['file-word', 'office']))\n    #set($discard = $extensionMap.put('stw',      ['file-word', 'office']))\n    ## archives\n    #set($discard = $extensionMap.put('bz',       ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('bz2',      ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('tbz',      ['file-archive', 'bz']))\n    #set($discard = $extensionMap.put('gz',       ['file-archive', 'gz']))\n    #set($discard = $extensionMap.put('tgz',      ['file-archive', 'gz']))\n    #set($discard = $extensionMap.put('rar',      ['file-archive', 'rar']))\n    #set($discard = $extensionMap.put('7z',       ['file-archive', 'zip']))\n    ## development\n    #set($discard = $extensionMap.put('sql',      ['database', 'sql']))\n    #set($discard = $extensionMap.put('php',      ['file-code', 'php']))\n    #set($discard = $extensionMap.put('c',        ['file-code', 'c']))\n    #set($discard = $extensionMap.put('cpp',      ['file-code', 'cpp']))\n    #set($discard = $extensionMap.put('c++',      ['file-code', 'cpp']))\n    #set($discard = $extensionMap.put('cs',       ['file-code', 'cs']))\n    #set($discard = $extensionMap.put('h',        ['file-code', 'h']))\n    #set($discard = $extensionMap.put('ruby',     ['file-code', 'ruby']))\n    #set($discard = $extensionMap.put('java',     ['coffee', 'java']))\n    #set($discard = $extensionMap.put('js',       ['file-code', 'js']))\n    #set($discard = $extensionMap.put('csproj',   ['file-code', 'vs']))\n    #set($discard = $extensionMap.put('sln',      ['file-code', 'vs']))\n    #set($discard = $extensionMap.put('res',      ['file-code', 'vs']))\n    ## data\n    #set($discard = $extensionMap.put('ics',      ['calendar', 'calendar']))\n    #set($discard = $extensionMap.put('eml',      ['email', 'email']))\n    #set($discard = $extensionMap.put('vcf',      ['vcard', 'vcard']))\n    #set($discard = $extensionMap.put('vcard',    ['vcard', 'vcard']))\n    ## executables\n    #set($discard = $extensionMap.put('exe',      ['cog', 'exe']))\n    #set($discard = $extensionMap.put('bat',      ['terminal', 'script']))\n    #set($discard = $extensionMap.put('sh',       ['terminal', 'script']))\n  #end\n  #if($mimetypeMap.containsKey($mime))\n    #set ($image = $mimetypeMap.get($mime).get(0))\n    #set ($text = $mimetypeMap.get($mime).get(1))\n  #elseif ($extensionMap.containsKey($ext))\n    #set ($image = $extensionMap.get($ext).get(0))\n    #set ($text = $extensionMap.get($ext).get(1))\n  #else\n    #set ($mimetypePrefix = $mime.indexOf('/'))\n    #set ($mimetypePrefix = $mimetypePrefix + 1)\n    #set ($mimetypePrefix = $mime.substring(0, $mimetypePrefix))\n    #if ($mimetypeMap.containsKey($mimetypePrefix))\n      #set ($image = $mimetypeMap.get($mimetypePrefix).get(0))\n      #set ($text = $mimetypeMap.get($mimetypePrefix).get(1))\n    #else\n      #set ($image = 'attach')\n      #set ($text = 'attachment')\n    #end\n  #end\n  <span title=\"${services.localization.render(\"core.viewers.attachments.mime.${text}\")}\">$!services.icon.renderHTML($image)</span>\n#end\n###\n###    packName\n###\n### Display a shorter version of a string\n###\n### @param name The processed string\n###\n#macro(packName $name)\n#if(!$maxnamelength)\n#set($maxnamelength = 25)\n#end\n#set($idx = $name.lastIndexOf(\".\"))\n#if(($idx != 0) && ($idx != -1))\n#set($ext = $name.substring($idx))\n#else\n#set($ext = \"\")\n#set($idx = $name.length())\n#end\n#set($fname = $name.substring(0, $idx))\n#if($fname.length() > $maxnamelength)$fname.substring(0, $maxnamelength)~$ext#else$name#end\n#end\n\n#macro(xwikiobjectfield $fielddoc $fieldname $fieldtext $action)\n<div class=\"xmblabel\">$fieldtext</div>\n<div class=\"xmbfield\">\n#if($fieldname!=\"\")\n$fielddoc.display($fieldname, $action)\n#end\n</div>\n#end\n\n##\n## Formats a date according to the ISO8601 standard\n##\n#macro(formatdateISO $date)\n#set($tz = $xwiki.formatDate($date, \"Z\"))\n#set($tz = \"${tz.substring(0, 3)}:${tz.substring(3)}\")\n$xwiki.formatDate($date, \"yyyy-MM-dd\")T$xwiki.formatDate($date, \"HH:mm:ss\")$tz#end\n\n##\n## Formats a username like a fn (hCard microformat)\n##\n#macro(userfn $username)\n#set($fn = $xwiki.getUserName($username))\n#if($fn.indexOf(\"<a\") >= 0)\n#set($fn = $fn.replaceAll(\"<a\", '<a class=\"url fn\"'))\n#else\n#set($fn = \"<span class='fn'>$fn</span>\")\n#end\n$fn\n#end\n\n###\n###\n### Macros for \"foot notes\"\n###\n### TODO:\n###       Make Radeox macros\n###       Support in wysiwyg\n###\n###\n#macro(footnote $text)\n#if(!$page_footnotes)\n#set($page_footnotes = [])\n#set($footnote_group_id = 1)\n#end\n#set($discard = $page_footnotes.add($text))\n#set($processedText = $text.replaceAll('[*~<>_-]', ''))\n#set($footnote_id = $page_footnotes.size())\n<sup class=\"footnoteRef\" id=\"footnoteref_${footnote_group_id}_${footnote_id}\"><a href=\"#footnote_${footnote_group_id}_${footnote_id}\" title=\"$services.localization.render('core.footnotes.gotofootnote', [${footnote_id}]): {pre}$processedText{/pre}\">$footnote_id</a></sup>#end\n##\n##\n##\n#macro(putFootnotes)\n#if($page_footnotes && ($page_footnotes.size() > 0))\n<ol class=\"footnotes\">\n#foreach($footnote in $page_footnotes)\n<li id=\"footnote_${footnote_group_id}_${foreach.count}\">\n <a class=\"footnoteBackRef\" title=\"$services.localization.render('core.footnotes.backtoref')\" href=\"#footnoteref_${footnote_group_id}_${foreach.count}\">^</a>\n  $footnote</li>\n#end\n</ol>\n#set($discard = $page_footnotes.clear())\n#set($footnote_group_id = $footnote_group_id + 1)\n#end\n#end\n##\n##  Generate navigation links for paged documents. It will use the URL parameters \"ipp\" to forward\n## the number of items per page, and \"page\" to indicate a certain page. The actual range (in items,\n## not in pages) can be computer using #preparePagedViewParams. The macro does not print anything\n## if only one page exists and $alwaysDisplay is not set to true. Does not alter any variables.\n##\n## @param itemsPerPage The number of items per page, will be forwarded in the links to other pages.\n## @param totalPages The total number of pages, starting at 1.\n## @param currentPageNumber The currently displayed page, starting at 1.\n## @param additionalQueryParams Query string fragment that should be put in the links. Should not\n##        start or end with ? or &\n## @param alwaysDisplay Force display of the links, even if there is only one page in total.\n##\n#macro(printPagedViewLinks $itemsPerPage $totalPages $currentPageNumber $additionalQueryParams $alwaysDisplay)\n  ## Only display if there are more than 1 pages or we explicitely require it.\n  #if(($totalPages > 1) || $alwaysDisplay)\n    <div class=\"pagedNavigation\">\n    #if($currentPageNumber > 1)\n      #set($currentPageNumber = $currentPageNumber - 1)\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=1&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.firstPage')</a></span>\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${currentPageNumber}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.previousPage')</a></span>\n      #set($currentPageNumber = $currentPageNumber + 1)\n    #else\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.firstPage')</span>\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.previousPage')</span>\n    #end\n    <span class=\"pagedStatus\">$services.localization.render('web.paging.pageNumberOf', [$currentPageNumber, $totalPages])</span>\n    #if($currentPageNumber < $totalPages)\n      #set($currentPageNumber = $currentPageNumber + 1)\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${currentPageNumber}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.nextPage')</a></span>\n      <span class=\"pagedLink\"><a href=\"$doc.getURL($xcontext.action, \"page=${totalPages}&amp;ipp=${itemsPerPage}\")#if(\"$!additionalQueryParams\" != \"\")&amp;$additionalQueryParams#end\">$services.localization.render('web.paging.lastPage')</a></span>\n      #set($currentPageNumber = $currentPageNumber - 1)\n    #else\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.nextPage')</span>\n      <span class=\"pagedLink inactive\">$services.localization.render('web.paging.lastPage')</span>\n    #end\n    </div>\n  #end\n#end\n##\n##\n##  Used together with #printPagedViewLinks, computes the range of items to show and the\n## variables used by #printPagedViewLinks, $currentPageNumber, $itemsPerPage, $totalPages.\n##\n## @param totalItems The total number of items that need to be displayed.\n## @param defaultItemsPerPage The default number of items per page, if no override is found in the\n##        URL. If 0, then display all items.\n## @sets startAt The first item to display (inclusive).\n## @sets endAt The last item to display (exclusive).\n## @sets itemsPerPage The requested number of items per page.\n## @sets totalPages The total number of pages according to the requested number of items per page\n##        and total items. Starts at 1.\n## @sets currentPageNumber The current page displayed. If the requested page is not available (out\n##        of range), then it will be corrected to a valid number. Starts at 1.\n##\n#macro(preparePagedViewParams $totalItems $defaultItemsPerPage)\n  ## Reuse existing variable, in case it is manually overriden somewhere else\n  #if(!$itemsPerPage)\n    #if($request.ipp)\n      #set($itemsPerPage = $numbertool.toNumber($request.ipp).intValue())\n    #else\n      #set($itemsPerPage = $defaultItemsPerPage)\n    #end\n  #end\n  ## Page numbers start at 1 outside this macro, but for internal computations we use 0-indexed values.\n  #set($currentPageNumber = $numbertool.toNumber($request.page).intValue() - 1)\n  #if(!$currentPageNumber || $currentPageNumber < 0)\n    #set($currentPageNumber = 0)\n  #end\n  ## The first item to show. Must be >= 0.\n  #set($startAt = $itemsPerPage * $currentPageNumber)\n  #if($startAt < 0)\n    #set($startAt = 0)\n  #end\n  ## The last item to show (exclusive). Must be <= total number of items.\n  #set($endAt = $itemsPerPage * ($currentPageNumber + 1))\n  #if(($endAt > $totalItems) || ($itemsPerPage == 0))\n    #set($endAt = $totalItems)\n  #end\n  ## Never show the items after the last one... They don't exist!\n  #if($startAt >= $endAt)\n    #set($startAt = $endAt - 1)\n  #end\n  ## Compute the total number of pages.\n  #if($itemsPerPage == 0)\n    #set($totalPages = 1)\n  #else\n    #set($totalPages = ($totalItems - 1) / $itemsPerPage + 1)\n  #end\n  ## The requested page might not be available, so correct it to correspond to the displayed items.\n  #set($currentPageNumber = $startAt / $itemsPerPage + 1)\n#end\n##\n##\n## Macro to set a page break used in print, pdf and rtf mode\n##\n#macro(pagebreak)\n<p style=\"page-break-before: always;\" />\n#end\n##\n##\n## Macro to include children of a page\n##\n#set($clevel = 1)\n\n#**\n * Macro to include children at multiple levels. The children are rendered in the generated output. The number of nested levels to\n * render is defined in a global variable called \"$clevel\".\n *\n * @param $page the document whose children should be rendered; preferably a Document object, but a document name works as well\n * @param $withPageBreaks a boolean indicating whether a page break should be generated before each new child document\n *###\n#macro(includeChildren $page $withPageBreaks)\n  #if ($clevel && $clevel > 0)\n    #if (\"$!page.fullName\" == '')\n      ## Not a Document, probably a String (document name)\n      ## Make it backwards compatible with older versions of the macro\n      #set ($page = $xwiki.getDocument($page))\n    #end\n    #foreach ($childDocName in $page.children)\n      #set ($childDoc = $xwiki.getDocument($childDocName))\n      #if ($childDoc && !$blacklistedSpaces.contains($childDoc.getSpace()))\n        #if ($withPageBreaks)\n          #pagebreak()\n        #end\n        $childDoc.getRenderedContent()\n        #set ($clevel = $clevel - 1)\n        #includeChildren($childDoc $withPageBreaks)\n        #set ($clevel = $clevel + 1)\n      #end\n    #end\n  #end\n#end\n\n##\n## Macro to include linked pages at multiple levels\n#macro(includeLinks $page $withPageBreaks)\n #if($clevel && $clevel!=0)\n  #set($pageDoc = $xwiki.getDocument($page))\n  #foreach($child in $pageDoc.getLinks())\n    #set($childDocName = $child.getLink())\n    #set($childDoc = $xwiki.getDocument($childDocName))\n    #if(($childDoc)&&($childDoc.getSpace()!=\"Panels\")&&($childDoc.getSpace()!=\"XWiki\"))\n     #if($withPageBreaks)\n     #pagebreak()\n     #end\n     $childDoc.getRenderedContent()\n     #set($clevel = $xwiki.add($clevel,-1))\n     #includeLinks($childDocName $withPageBreaks)\n     #set($clevel = $xwiki.add($clevel,1))\n    #end\n  #end\n #end\n#end\n\n###\n###    Panel header\n###\n### Generate the starting html code for a panel\n###\n### @param title The panel caption title\n### @param isLarge True if the panel should be larger (default: false)\n### @param isHeaderHidden True if the header should be hidden (default: false)\n###\n#macro(panelheader $title $isLarge $isHeaderHidden)\n## Note: We pass the Panel name as an HTML class attribute so that it's possible to style the Panels selectively using\n## CSS.\n## We want to avoid showing the \"WebHome\" suffix in the generated class since we're working to remove it from the UI\n## and from the APIs. In addition it generates class names longer than they are needed. Thus for nested pages we strip\n## it. We also strip the wiki prefix to have a shorter generated class name and because they're not needed to provide\n## per-wiki styling of Panels.\n#set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n#if ($paneldoc.documentReference.name == $defaultDocumentName)\n  #set ($serializedDocument = $services.model.serialize($paneldoc.documentReference.parent, 'compactwiki'))\n#else\n  #set ($serializedDocument = $services.model.serialize($paneldoc.documentReference, 'compactwiki'))\n#end\n##\u00a0We keep only alphanumeric characters so it can be used as a CSS class.\n## For instance: \"xwiki:A.B.WebHome\" will become \"AB\"\n#set ($specialClassAttribute = $stringtool.toAlphaNumeric(\"$!serializedDocument\"))\n## We keep this class for compatibility purpose but the previous one should be used instead.\n#set ($deprecatedClassAttribute = $stringtool.toAlphaNumeric(\"$!paneldoc.documentReference.name\"))\n#if ($paneldoc.syntax.toIdString() == 'xwiki/1.0')\n<div class=\"#if ($isLarge)large #{end}panel expanded $!specialClassAttribute $!deprecatedClassAttribute\">\n<h1 class=\"xwikipaneltitle#if ($isHeaderHidden) hidden#end\">$title</h1>\n<div class=\"xwikipanelcontents\">\n#else\n(% class=\"#if ($isLarge)large#{end}panel expanded $!specialClassAttribute $!deprecatedClassAttribute\" %)(((\n{{html}}<h1 class=\"xwikipaneltitle#if ($isHeaderHidden) hidden#end\">$title</h1>{{/html}}\n(% class=\"xwikipanelcontents\" %)(((\n#end\n#end\n\n#macro(panelhiddenheader $title)\n#panelheader($title, false, true)\n#end\n\n#macro(largepanelheader $title)\n#panelheader($title, true, false)\n#end\n\n###\n###    Panel footer\n###\n### Generate the ending html code for a panel\n###\n#macro(panelfooter)\n#if ($paneldoc.syntax.toIdString() == 'xwiki/1.0')\n</div>\n</div>\n#else\n)))\n)))\n#end\n#end\n\n###\n###    Display Panel\n###\n### Extract and display the panel code from the panel object\n###\n### @Deprecated\n#macro(displaypanel $name)\n  #set ($paneldoc = $xwiki.getDocument($name))\n  #if ($paneldoc)\n    #set ($pobj = $paneldoc.getObject('Panels.PanelClass'))\n    #if ($pobj)\n      $!doc.display('content', 'view', $pobj)\n    #end\n  #end\n#end\n\n#macro(displayPropName $prop)\n#if($services.localization.render(\"${class.getName()}_${prop.name}\") == \"${class.getName()}_${prop.name}\")\n$prop.prettyName#else\n$services.localization.render($prop.name)#end\n#end\n\n###\n###    Display Panel content\n###\n###\n#macro(displaypanelcontent $doc $obj)\n$doc.display(\"content\", $obj)\n#end\n\n###\n###    Message box\n###\n#macro(xwikimessageboxstart $title $message)\n  <div class=\"centered\">\n    <fieldset class=\"xwikimessage\">\n      <legend><span>$title</span></legend>\n      #if (\"$!message\" != '')\n        <p class=\"xwikimessage\">$message</p>\n      #end\n#end\n#macro(xwikimessageboxend)\n    </fieldset>\n  </div>\n#end\n\n#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)\n#xwikimessageboxstart($title $message)\n      <div class=\"buttons\"><a href=\"$urlyes\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgyes\" onclick=\"location='$urlyes'; return false;\"/></a><a href=\"$urlno\" class=\"buttonwrapper\"><input type=\"button\" class=\"button\" value=\"$msgno\" onclick=\"location='$urlno'; return false;\"/></a></div>\n#xwikimessageboxend()\n#end\n\n#macro(xwikimessageboxfield $fielddoc $fieldname $fieldtext $html)\n<div class=\"xmblabel\">$fieldtext</div>\n<div class=\"xmbfield\">\n#if($fieldname!=\"\")\n$fielddoc.display($fieldname, \"edit\")\n#end\n#if($html!=\"\")\n$html\n#end\n</div>\n#end\n\n#macro(xwikimessageboxsubmit $submittext)\n<div class=\"xmbbutton\">\n<input type=\"submit\" value=\"$submittext\" />\n</div>\n#end\n\n\n###\n###    message\n###\n\n#macro(warning $text)\n<div class=\"warningmessage\"><span class=\"messagetype\">$services.localization.render('warning'): </span>$text</div>\n#end\n\n#macro(error $text)\n<div class=\"errormessage\"><span class=\"messagetype\">$services.localization.render('error'): </span>$text</div>\n#end\n\n#macro(info $text)\n<div class=\"infomessage\">$text</div>\n#end\n\n#macro(message $text)\n<div class=\"plainmessage\">$text</div>\n#end\n\n#macro (floatingbox $text)\n<div class=\"floatinginfobox\">$text</div>\n#end\n\n#macro (startfloatingbox)\n<div class=\"floatinginfobox\">\n#end\n\n#macro (endfloatingbox)\n</div>\n#end\n\n###\n###    Display in page panels layout\n###\n###\n#macro(displayPanelLayout $nbcolumns $panelNameList)\n  <div class=\"panellayoutcontainer-${nbcolumns}col\">\n    #set($lastColumnId = ($nbcolumns - 1))\n    #foreach($colId in [0..$lastColumnId])\n      <div class=\"panellayoutcol\">\n        #foreach($panelName in $panelNameList)\n          #if($panelName && ($panelName != \"\") && (((($foreach.count - 1) + $nbcolumns) % $nbcolumns) == $colId))\n            #displaypanel($panelName)\n          #end\n        #end\n      </div>\n    #end\n  </div>\n#end\n\n#**\n * Displays a public google calendar with all buttons and displays\n * The size of the display is 800x600\n *\n * This macro displays the public part of the calendar specified. However if the visiting user is logged in in Google Calendar and has rights to the private part of the calendar then the information will be displayed.\n *\n * @param id ID of the google account to display the calendar for\n *#\n#macro(googlecal $id)\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?height=600&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a public google calendar with all buttons and displays and a custom size\n *\n * @param id ID of the google account to display the calendar for\n * @param width Width of the calendar\n * @param height Height of the calendar\n *#\n#macro(googlecalsize $id $width $height)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?height=${height}&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a private google calendar with all buttons\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n *#\n#macro(googlecalprivate $id $token)\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?pvttk=${token}&amp;height=600&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a private google calendar with all buttons\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n * @param width Width of the calendar\n * @param height Height of the calendar\n *#\n#macro(googlecalprivatesize $id $token $width $height)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n{pre}\n<iframe src=\"http://www.google.com/calendar/embed?pvttk=${token}&amp;height=${height}&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=%232952A3\" style=\" border-width:0 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n\n#**\n * Displays a public or private google calendar with a wide range of settings\n * You can check the effect of these settings using the Google Calendar Embed Helper\n * http://www.google.com/calendar/embedhelper\n *\n * @param id ID of the google account to display the calendar for\n * @param token Private token giving access to the Calendar. This token is 32 chars long and can be retrieved in the \"Agenda Details\" when accessing your \"Private URL\" of your calendar. You should use this parameter with care as it will display all your calendar events to anybody that can access the page in which you use this macro\n * @param width Width of the calendar\n * @param height Height of the calendar\n * @param showTitle 0 to not show the title\n * @param showNav 0 to not show the navigation buttons allowing to switch to previous/next week or month\n * @param showDate 0 to not show the current period displayed\n * @param showPrint 0 to not show the print button\n * @param showTabs 0 to not show the tabs allowing to switch between MONTH,WEEK,AGENDA mode\n * @param showCalendars 0 to not show the calendars list drop down button\n * @param showTz Show a message saying the timezone of the dates/hours\n * @param mode Default mode to display (empty is Month display, WEEK is Week dispaly, AGENDA is the event display)\n * @param language Language to display in (en,fr,de,..)\n * @param bgcolor Background color of the calendar in the form #255455\n * @param color Color of the events in the form #234567\n * @param ctz Timezone in which to display the calendar. Leave empty for default calendar Timezone\n * @param border Border in pixels (1,2,3)\n *#\n#macro(googlecalcustom $id $token $width $height $showTitle $showNav $showDate $showPrint $showTabs $showCalendars $showTz $mode $language $bgcolor $color $ctz $border)\n#if($width==\"\")\n#set($width = \"800\")\n#end\n#if($height==\"\")\n#set($height = \"600\")\n#end\n#if($color!=\"\")\n#set($color = $color.replaceAll(\"#\",\"%23\"))\n#else\n#set($color = \"%232952A3\")\n#end\n#if($bgcolor!=\"\")\n#set($bgcolor = $bgcolor.replaceAll(\"#\",\"%23\"))\n#else\n#set($bgcolor = \"%232952A3\")\n#end\n{pre}\n<iframe src=\"//www.google.com/calendar/embed?showTitle=${showTitle}&amp;showNav=${showNav}&amp;showDate=${showDate}&amp;showPrint=${showPrint}&amp;showTabs=${showTabs}&amp;showCalendars=${showCalendars}&amp;showTz=${showTz}&amp;mode=${mode}&amp;height=${height}&amp;wkst=2&amp;hl=${language}&amp;bgcolor=${bgcolor}&amp;src=${id.replaceAll(\"@\",\"%40\")}&amp;color=${color}&amp;ctz=${ctz}\" style=\" border:solid ${border}px #777 \" width=\"${width}\" height=\"${height}\" frameborder=\"0\" scrolling=\"no\"></iframe>\n{/pre}\n#end\n#**\n * Displays a list of documents.\n * Only documents that the current user is allowed to view will be displayed.\n *\n * @param docNames list of document names.\n * @param displaySpaces true to group documents by space.\n * @param blacklistedSpaces spaces to exclude from the list.\n *#\n#macro(displayDocumentList $docNames $displaySpaces $blacklistedSpaces)\n  #set($documentList = [])\n  #foreach($docName in $docNames)\n    #if($xwiki.hasAccessLevel(\"view\", $xcontext.user, $docName))\n      #set($document = $xwiki.getDocument($docName).getTranslatedDocument())\n      #if(!$blacklistedSpaces.contains($document.getSpace()))\n        #set($discard = $documentList.add($document))\n      #end\n    #end\n  #end\n  #if($documentList.size() > 0)\n    #set($previousSpace = \"\")\n    <ul class=\"xlist\">\n      #foreach($document in $documentList)\n        #if ($document.getSpace() != $previousSpace && $displaySpaces)\n          #if($foreach.count > 1) </ul></div></li> #end ## Close previous space item if needed\n          <li class=\"xitem\">\n            <div class=\"xitemcontainer\">\n              $services.icon.renderHTML('space') $escapetool.xml($document.space)\n              <ul class=\"xlist\"> ## Open new space item\n          #set($previousSpace = $document.getSpace())\n        #end\n        <li class=\"xitem\">\n          <div class=\"xitemcontainer\">\n            $services.icon.renderHTML('page')\n            <a href=\"$document.getURL()\">$escapetool.xml($document.plainTitle)</a>\n          </div>\n        </li>\n      #end\n      #if($displaySpaces)\n        </ul></div></li> ## Close last space item\n      #end\n    </ul>\n  #end\n#end\n#**\n * Set a variable from request parameters.\n * If the parameter is not present in the request, set it to the default value.\n *\n * Note that request parameters will be cast to the type of the defaultValue.\n * Handled types: ArrayList, Boolean, Integer, Float, Long, Double.\n *\n * @param variable the variable to set.\n * @param parameterName name of the parameter to look for in the request.\n * @param defaultValue if the parameter is not set in the HTTP request, the variable is assigned this value.\n * @deprecated since Velocity 1.7 (XWiki 3.0) it is no longer possible to use macros this way.\n *     Setting $variable will not be observed outside the macro unless the actual parameter is also called $variable.\n *     Use #readVariableFromRequest instead.\n *###\n#macro(setVariableFromRequest $variable $parameterName $defaultValue)\n  ## Trick: when null, \"$variable\" will print the actual parameter name, so \"$abc\" if the macro was called with $abc as a parameter.\n  ## Use this hack to extract the actual parameter name, and use #evaluate to set it.\n  #set ($variable = $NULL)\n  #set ($varName = \"$variable\")\n  #readVariableFromRequest($varName $parameterName $defaultValue)\n#end\n##\n##\n##\n#**\n * Set a variable from request parameters.\n * If the parameter is not present in the request, set it to the default value.\n *\n * Note that request parameters will be cast to the type of the defaultValue.\n * Handled types: ArrayList, Boolean, Integer, Float, Long, Double.\n *\n * @param resultVariableName the name of the variable to set, a String; when the macro returns, a variable named that way will be created with the output value\n * @param parameterName name of the parameter to look for in the request.\n * @param defaultValue if the parameter is not set in the HTTP request, the variable is assigned this value.\n *###\n#macro(readVariableFromRequest $resultVariableName $parameterName $defaultValue)\n  ## Try to get the variable value from HTTP request.\n  #if ($defaultValue.class == 'class java.util.ArrayList')\n    #set ($result = [])\n    #foreach ($param in $request.getParameterValues($parameterName))\n      #set ($discard = $result.add($param))\n    #end\n    #if ($result.size() == 0)\n      #set ($discard = $result.addAll($defaultValue))\n    #end\n  #else\n    #set ($result = $request.getParameter(\"${parameterName}\"))\n    #if (\"$!result\" != '')\n      #if ($defaultValue.class == 'class java.lang.Boolean')\n        #set ($result = $util.parseBoolean($result))\n      #elseif ($defaultValue.class == 'class java.lang.Integer')\n        #set ($result = $numbertool.toNumber($result).intValue())\n      #elseif ($defaultValue.class == 'class java.lang.Float')\n        #set ($result = $numbertool.toNumber($result).floatValue())\n      #elseif ($defaultValue.class == 'class java.lang.Long')\n        #set ($result = $numbertool.toNumber($result).longValue())\n      #elseif ($defaultValue.class == 'class java.lang.Double')\n        #set ($result = $numbertool.toDouble($result))\n      #end\n    #end\n    #if (\"$!result\" == '')\n      #set ($result = $defaultValue)\n    #end\n  #end\n  #setVariable($resultVariableName $result)\n#end\n##\n##\n##\n#**\n * Assign a value to a variable, given by its name. The purpose of this macro is to emulate call by macro expansion,\n * which was available in velocity versions up to 1.6, but was removed in 1.7.\n *\n * @param variableName the name of the variable to set, a String; when the macro returns, a variable named that way will be created with the output value\n * @param value the value to assign\n *###\n#macro(setVariable $variableName $value)\n## Only do this if the variable name is really a valid variable name\n#if ($variableName.matches('[a-zA-Z_][a-zA-Z0-9_-]*'))\n#evaluate(\"${escapetool.h}set(${escapetool.d}${variableName}=${escapetool.d}value)\")\n#elseif ($variableName.matches('\\$[a-zA-Z_][a-zA-Z0-9_-]*'))\n#evaluate(\"${escapetool.h}set(${variableName}=${escapetool.d}value)\")\n#end\n#end\n##\n##\n##\n#**\n * Displays a submit button, i.e. an <tt>input</tt> element with <tt>type=submit</tt>.\n * For styling purposes, the button is wrapped in a span element.\n * @param name The value of the <tt>name</tt> attribute\n * @param shortcut The keyboard shortcut for this button. The value will be displayed\n *        as the title of the element. The actual shortcut is attached elsewhere, in\n *        the javascript code.\n * @param value The value of the <tt>value</tt> attribute, i.e. the text displayed on\n *        the button.\n *#\n#macro(submitButton $name $shortcut $value)\n<span class=\"buttonwrapper\"><input class=\"button\" type=\"submit\" name=\"$name\"#if($keyboardShortcutsEnabled) title=\"$shortcut\"#end value=\"$value\"/></span>\n<input type=\"hidden\" name=\"xaction\" value=\"$escapetool.xml($action)\" />\n#end\n#**\n * Displays a submit button for the editor. This macro calls submitButton,\n * composing all its parameters based on the action's identifier and the\n * identifier of the corresponding localized resources.\n * @param action The identifier of the button's action.\n * @param resourceIdentifier The key used to identify the localized resources.\n *#\n#macro(editActionButton $action $resourceIdentifier)\n#submitButton(\"action_${action}\", $services.localization.render(\"core.shortcuts.edit.${resourceIdentifier}\"), $services.localization.render($resourceIdentifier))\n#end\n\n#**\n * Display a human-readable file size\n *\n * @param $size the size in bytes to display in a human readable format\n *#\n#macro(dynamicsize $sz)\n#if($sz < 1024)\n$sz bytes##\n#else\n#set($ksz = $mathtool.div($sz, 1024))\n#set($ksz = $mathtool.roundTo(1, $ksz))\n#if($ksz < 1024)\n$ksz KB##\n#else\n#set($Msz = $mathtool.div($sz, 1048576))\n#set($Msz = $mathtool.roundTo(1, $Msz))\n$Msz MB##\n#end##\n#end##\n#end\n\n#**\n * AJAX Live table that displays XWiki data.\n *\n * Example of usage, in syntax 2.0:\n * <code>\n * {{velocity}}\n * #set($columns = [ \"_avatar\", \"first_name\", \"last_name\", \"email\"])\n * #set($columnsProperties = {\n *                  \"first_name\" : { \"type\" : \"text\" , \"size\" : 10, \"link\" : \"view\"},\n *                  \"last_name\" : { \"type\" : \"text\" , \"size\" : 10, \"link\" : \"view\"},\n *                  \"email\" : { \"type\" : \"text\" , \"size\" : 20, \"link\" : \"editor\"},\n *                  \"_avatar\" : { \"type\" : \"none\" , \"size\" : 20, \"link\" : \"none\", \"html\" : \"true\", \"sortable\":false }\n *                })\n * #set($options = {  \"className\":\"XWiki.XWikiUsers\",\n *                    \"translationPrefix\" : \"platform.index.\",\n *                    \"tagCloud\" : true,\n *                    \"rowCount\": 15,\n *                    \"javascriptName\" : \"MyModule.myTable\",\n *                    \"description: \"The description of this table here\", })\n * #livetable(\"userstable\" $columns $columnsProperties $options)\n * {{/velocity}}\n * </code>\n *\n * @param divid the id of the table div\n * @param collist the column list\n * @param colprops the columns properties\n * @param options the livetable options.\n *#\n#macro (livetable $divid $collist $colprops $options)\n## Open wiki syntax wrappers.\n#if(\"$!options.outputOnlyHtml\" != 'true')\n## Do not indent:\n#if($xwiki.getCurrentContentSyntaxId() != \"xwiki/1.0\")\n\n\n## We don't clean the HTML because we control the markup and because we want to preserve the whitespace characters in\n## the attribute values (e.g. if the live table id contains whitespaces)\n{{html clean=\"false\"}}\n#else {pre} #end\n#end\n#if ($services.liveData.liveTable && $request.useLiveData == 'true')\n#livetable_liveData($divid $collist $colprops $options)\n#else\n#livetable_html($divid $collist $colprops $options)\n#end\n## Close wiki syntax wrappers. Do not modify the indentation below or it will generate unwanted paragraphs!\n#if(\"$!options.outputOnlyHtml\" != 'true')#if($xwiki.getCurrentContentSyntaxId() != \"xwiki/1.0\"){{/html}}\n\n#else{/pre}#end##\n#end## end-wrappers\n#end\n\n#macro (livetable_liveData $divid $collist $colprops $options)\n  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/liveData.js', true))\n  #set ($liveDataConfig = $services.liveData.liveTable.getConfig($divid, $collist, $colprops, $options))\n  #set ($liveDataConfigJSON = $jsontool.serialize($liveDataConfig))\n  <div class=\"liveData\" id=\"$!escapetool.xml($divid)\" data-config=\"$escapetool.xml($liveDataConfigJSON)\"></div>\n#end\n\n#macro(livetable_html $divid $collist $colprops $options)\n  ##\n  ## SX deps.\n  ##\n  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))\n  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))\n  ##\n  ## Options / defaults\n  ##\n  #if(\"$!options.translationPrefix\" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end\n  #if(\"$!options.defaultOrder\" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end\n  #if(\"$!options.selectedColumn\" != '') #set($selectedColumn = $options.selectedColumn) #end\n  #if(\"$!options.tagCloud\" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end\n  #set ($topfilters = $options.topFilters)\n  #set ($hasTopFilters = \"$!topfilters\" !='')\n  #if(\"$options.pageSize\" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end\n  #set ($queryFilters = $options.queryFilters)\n  #if (!$queryFilters)\n    #set ($queryFilters = 'currentlanguage,hidden')\n  #end\n  #set($classname = \"$!options.className\")\n  ##\n  ## Columns informations\n  ##\n  #set ($dataColumns = [])\n  #set ($classParams = {})\n  #foreach($colname in $collist)\n    ## If the live table options don't specify which column to select then select the first non-special column.\n    #if(\"$!selectedColumn\" == '' && !$colname.startsWith('_'))\n      #set($selectedColumn = $colname)\n    #end\n    #if($colname != '_actions')\n      #set ($discard = $dataColumns.add($colname))\n      #set($propClassName = \"$!{colprops.get($colname).get('class')}\")\n      #if($propClassName != '')\n        #set ($discard = $classParams.put(\"${colname}_class\", $propClassName))\n      #end\n      #set ($propMatchType = \"$!colprops.get($colname).match\")\n      #if ($propMatchType != '')\n        #set ($discard = $classParams.put(\"${colname}_match\", $propMatchType))\n      #end\n    #end\n  #end\n  #if(\"$!options.url\" != '')\n    #set($dataurl = $options.url)\n  #else\n    #set ($parameters = {\n      'outputSyntax': 'plain',\n      'transprefix': $transprefix,\n      'classname': $classname,\n      'collist': $stringtool.join($dataColumns, ','),\n      'queryFilters': $queryFilters\n    })\n    #set ($discard = $parameters.putAll($classParams))\n    #set ($resultPage = $options.resultPage)\n    #if (\"$!resultPage\" == '')\n      #set ($resultPage = 'XWiki.LiveTableResults')\n    #end\n    #set ($dataurl = $xwiki.getURL($resultPage, 'get', \"$escapetool.url($parameters)&$!options.extraParams\"))\n  #end\n  ## Clone the column properties because we modify them.\n  #set ($macro.columnDescriptors = $jsontool.fromString($jsontool.serialize($colprops)))\n  #livetable_normalizeColumnDescriptors($macro.columnDescriptors $collist $transprefix)\n  #set ($macro.settings = {\n    'name': $options.javascriptName,\n    'url': $dataurl,\n    'columns': $collist,\n    'columnDescriptors': $macro.columnDescriptors,\n    'xclass': $classname,\n    'maxPages': $options.maxPages,\n    'hasPageSize': $hasPageSize,\n    'pageSizeBounds': $options.pageSizeBounds,\n    'limit': $options.rowCount,\n    'selectedTags': $options.selectedTags,\n    'hasTopFilters': $hasTopFilters,\n    'callback': $options.callback\n  })\n  ##\n  ## HTML Table\n  ##\n  #set ($htmlLiveTableId = $escapetool.xml($divid))\n<div class=\"xwiki-livetable-container\">\n  #if($tagcloud || $hasTopFilters)\n  <div class=\"tipfilters\">\n  #end\n  #if($hasTopFilters)\n  <div id=\"${htmlLiveTableId}-topfilters\" class=\"xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end\">\n    <div>\n      <div class=\"xwiki-livetable-topfilters-container\">\n      $topfilters\n      </div>\n      <div class=\"tippointer\">\n        <div></div>\n      </div>\n    </div>\n  </div>\n  #end\n  #if($tagcloud)\n    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))\n    <div id=\"${htmlLiveTableId}-tagcloud\" class=\"xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end\">\n      <div>\n        <div class=\"xwiki-livetable-tagcloud-container\">\n          <h2>$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')</h2>\n          <div class=\"xwiki-livetable-tagcloud\"></div>\n        </div>\n        <div class=\"tippointer\">\n          <div></div>\n        </div>\n      </div>\n    </div>\n  #end\n  #if($tagcloud || $hasTopFilters)\n  </div>\n  #end\n  <table id=\"${htmlLiveTableId}\" class=\"xwiki-livetable\"\n      #if(\"$!options.description\" != '') summary=\"$escapetool.xml($options.description)\"#end\n      data-settings=\"$escapetool.xml($jsontool.serialize($macro.settings))\" data-xwiki-lightbox=\"false\">\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span id=\"${htmlLiveTableId}-limits\" class=\"xwiki-livetable-limits\"></span>\n  #if($hasPageSize)\n        <span id=\"${htmlLiveTableId}-pagesize\" class=\"xwiki-livetable-pagesize\">\n            <span>$services.localization.render('platform.livetable.pagesizeLabel')</span>\n            <span class=\"xwiki-livetable-pagesize-content\" ></span>\n        </span>\n  #end\n        <span id=\"${htmlLiveTableId}-ajax-loader\" class=\"xwiki-livetable-loader hidden\">\n          <img src=\"$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')\" alt=\"$escapetool.xml($services.localization.render('platform.livetable.loading'))\" title=\"\" />\n        </span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-display-container\">\n        <table class=\"xwiki-livetable-display\">\n          <thead class=\"xwiki-livetable-display-header\">\n            <tr>\n            #set($columnCount = 0)\n            #foreach($colname in $collist)\n              #set($colprop = $colprops.get($colname))\n              #set ($isFilterable = $colprop.filterable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              #set ($isSortable = $colprop.sortable != false && $colname != '_actions' && $colprop.type != 'hidden')\n              ## Get the column's display name to use in the header.\n              #set($displayName = \"#getLivetableColumnDisplayName($colname, $colprop, $transprefix)\")\n              #set ($defaultHeaderClass = {'_actions': 'actions', '_avatar': 'avatar'})\n              #set ($discard = $colprop.putIfAbsent('headerClass', $defaultHeaderClass.get($colname)))\n              <th scope=\"col\" class=\"xwiki-livetable-display-header-text $!escapetool.xml($colprop.headerClass)\n                  #if ($!colprop.type == 'hidden')hidden#end\n                  #if ($isSortable)sortable #if ($colname == $selectedColumn)selected $defaultOrder#else asc#end#end\">\n                #if($isSortable)<a rel=\"${escapetool.xml($colname)}\">#end\n                #if($isFilterable)<label for=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\">#end\n                $escapetool.xml($displayName)\n                #if($isFilterable)</label>#end\n                #if($isSortable)</a>#end\n                #set($columnCount = $mathtool.add($columnCount, 1))\n              </th>\n            #end\n            </tr>\n            #livetable_filters($collist $colprops $classname)\n            <tr class=\"xwiki-livetable-initial-message\">\n              <td colspan=\"${columnCount}\">\n                <div class=\"warningmessage\">$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')</div>\n              </td>\n            </tr>\n          </thead>\n          <tbody id=\"${htmlLiveTableId}-display\" class=\"xwiki-livetable-display-body\"><tr><td>&nbsp;</td></tr></tbody>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td class=\"xwiki-livetable-pagination\">\n        <span class=\"xwiki-livetable-limits\"></span>\n        <span class=\"controlPagination\">\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))\" class=\"prevPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>\n          <a title=\"$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))\" class=\"nextPagination\" href=\"#\"><span class=\"hidden\">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>\n        </span>\n        <span class=\"pagination\">\n          <span class=\"xwiki-livetable-pagination-text\">$services.localization.render('platform.livetable.paginationPage')</span>\n          <span class=\"xwiki-livetable-pagination-content\" ></span>\n        </span>\n      </td>\n    </tr>\n  </table>\n  <div id=\"${htmlLiveTableId}-inaccessible-docs\" class=\"hidden\">\n    #info($services.localization.render('rightsmanager.documentrequireviewrights'))\n  </div>\n  <div id=\"${htmlLiveTableId}-computed-title-docs\" class=\"hidden\">\n    #info(\"(<span class='docTitleComputed'></span>)&nbsp;$services.localization.render('platform.livetable.docTitleComputedHint')\")\n  </div>\n</div>## xwiki-livetable-container\n#end## end-livetable-macro\n\n#macro (livetable_filters $columns $columnsProperties $xclassName)\n  <tr class=\"xwiki-livetable-display-filters\">\n    #foreach ($column in $columns)\n      #set ($columnProperties = $columnsProperties.get($column))\n      ## Note: Even though the column is hidden, we still need a (pottentially hidden) TD to generate valid HTML\n      <td class=\"xwiki-livetable-display-header-filter #if (\"$!columnProperties.type\" == 'hidden')hidden#end\">\n        #if ($columnProperties.type != 'hidden')\n          #if ($columnProperties.filterable != false && \"$!column\" != '_actions')\n            #set ($columnXClassName = $columnProperties.get('class'))\n            #set ($columnXPropertyName = $column)\n            #if (!$columnXClassName)\n              #if ($column.startsWith('doc.'))\n                #set ($columnXClassName = 'XWiki.DocumentClass')\n                #set ($columnXPropertyName = $column.substring(4))\n              #else\n                #set ($columnXClassName = $xclassName)\n              #end\n            #end\n            #set ($xclass = $xwiki.getDocument($columnXClassName).getxWikiClass())\n            #set ($xproperty = $xclass.get($columnXPropertyName))\n            #livetable_filter($column $columnProperties $xproperty)\n          #end\n        #end\n      </td>\n    #end\n  </tr>\n#end\n\n#macro (livetable_filter $column $columnProperties $xproperty)\n  #set ($filterType = $columnProperties.type)\n  #if (\"$!filterType\" == '')\n    ## Determine the filter type from the xproperty type.\n    #set ($filterTypeByXPropertyType = {\n      'Boolean': 'boolean',\n      'DBList': 'suggest',\n      'DBTreeList': 'suggest',\n      'Date': 'text',\n      'Email': 'text',\n      'Groups': 'suggest',\n      'Number': 'number',\n      'Page': 'suggest',\n      'StaticList': 'list',\n      'String': 'text',\n      'TextArea': 'text',\n      'Users': 'suggest'\n    })\n    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))\n    #if (\"$!filterType\" == '')\n      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text\n      ## filter in this case because it is the most generic.\n      #set ($filterType = 'text')\n    #end\n  #end\n  #set($escapedTitle = $escapetool.xml($services.localization.render('platform.livetable.filtersTitle',\n    [$services.localization.render(\"${transprefix}$column\")])))\n  #if ($filterType == 'list' || $filterType == 'multilist')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      #if ($filterType == 'multilist')\n        class=\"xwiki-livetable-multilist\" multiple=\"multiple\">\n      #else\n        ><option value=\"\">$escapetool.xml($services.localization.render('platform.livetable.selectAll'))</option>\n        <option disabled=\"disabled\">\u2500\u2500\u2500\u2500</option>\n      #end\n    #set ($storedValues = $xproperty.listValues)\n    #set ($displayedValues = $xproperty.mapValues)\n    #foreach ($storedValue in $storedValues)\n      #set ($l10nKey = \"${xproperty.className}_${column}_$storedValue\")\n      #set ($displayedValue = $services.localization.render($l10nKey))\n      #if ($displayedValue == $l10nKey)\n        #set ($displayedValue = $displayedValues.get($storedValue).value)\n      #end\n      <option value=\"$!escapetool.xml($storedValue)\">$!escapetool.xml($displayedValue)</option>\n    #end\n    </select>\n  #elseif ($filterType == 'boolean')\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\">\n      <option value=\"\">$services.localization.render('platform.livetable.selectAll')</option>\n      <option value=\"0\">$services.localization.render('no')</option>\n      <option value=\"1\">$services.localization.render('yes')</option>\n    </select>\n  #elseif ($filterType == 'text' || $filterType == 'number')\n    <input id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\" type=\"text\"\n      #if (\"$!columnProperties.size\" != '')size=\"$!escapetool.xml($columnProperties.size)\"#end\n      title=\"$escapedTitle\"/>\n  #elseif ($filterType == 'suggest' && $xproperty)\n    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.css'),\n      {'type': 'text/css', 'rel': 'stylesheet'}))\n    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n    #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n    <select id=\"xwiki-livetable-${htmlLiveTableId}-filter-${foreach.count}\" name=\"$!escapetool.xml($column)\"\n      class=\"suggest-propertyValues\" multiple=\"multiple\" size=\"1\"\n      data-className=\"$!escapetool.xml($xproperty.className)\" data-propertyName=\"$!escapetool.xml($xproperty.name)\"\n      title=\"$escapedTitle\">\n    </select>\n  #end\n#end\n\n#**\n * Internal macro - Determine the name to be displayed in a livetable's column header. Strategy is as follows :\n * - If defined, the 'displayName' passed as a column option wins.\n * - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name.\n * - Finally, we fall back on the column name.\n *\n * @param colname the column name\n * @param colprop the column properties map\n * @param transprefix the translations prefix to use\n *\n * @internal\n *#\n##\n#macro(getLivetableColumnDisplayName $colname $colprop $transprefix)\n  #if(\"$!colprop.displayName\" != '')\n    #set($displayName = $colprop.displayName)##\n  #elseif($transprefix != '')\n    #set($displayName = $services.localization.render(\"${transprefix}${colname}\"))##\n  #else\n    #set($displayName = $colname)##\n  #end\n$displayName##\n#end\n\n#macro (livetable_normalizeColumnDescriptors $columnDescriptors $colList $transPrefix)\n  ## Make sure the columns containing HTML are formatted in HTML indeed\n  #set ($htmlColumnKeys = ['doc.location'])\n  #foreach($htmlColumnKey in $htmlColumnKeys)\n    #if ($colList.contains($htmlColumnKey))\n      #set ($htmlColumnProps = $columnDescriptors[$htmlColumnKey])\n      #if (!$htmlColumnProps)\n        #set ($htmlColumnProps = {})\n        #set ($columnDescriptors[$htmlColumnKey] = $htmlColumnProps)\n      #end\n      #if ($htmlColumnProps.html == $NULL)\n        #set ($htmlColumnProps.html = true)\n      #end\n    #end\n  #end\n  ## Translate the column descriptor.\n  #foreach ($entry in $columnDescriptors.entrySet())\n    #if (\"$!entry.value.displayName\" == '' && \"$!transPrefix\" != '')\n      #set ($entry.value.displayName = $services.localization.render(\"${transPrefix}$entry.key\"))\n    #end\n  #end\n  #livetable_normalizeActionsDescriptor($columnDescriptors $transPrefix)\n#end\n\n#macro (livetable_normalizeActionsDescriptor $columnDescriptors $transPrefix)\n  #set ($actionsDescriptor = $columnDescriptors.get('_actions'))\n  #if ($actionsDescriptor)\n    #foreach ($action in $actionsDescriptor.actions)\n      ## If the action is specified as a string then only the action id is specified.\n      #if ($action.equals(\"$!action\"))\n        ## Note that 'labels' and 'actionCallbacks' are deprecated.\n        #set ($action = {\n          'id': $action,\n          'label': $actionsDescriptor.labels.get($action),\n          'async': $actionsDescriptor.ajaxActions.get($action),\n          'callback': $actionsDescriptor.actionCallbacks.get($action)\n        })\n        #set ($discard = $actionsDescriptor.actions.set($foreach.index, $action))\n      #end\n      #if (\"$!action.label\" == '')\n        #if (\"$!transPrefix\" != '' && $services.localization.get(\"${transPrefix}_actions.$action.id\"))\n          #set ($action.label = $services.localization.render(\"${transPrefix}_actions.$action.id\"))\n        #elseif ($services.localization.get(\"platform.livetable._actions.$action.id\"))\n          #set ($action.label = $services.localization.render(\"platform.livetable._actions.$action.id\"))\n        #else\n          #set ($action.label = $action.id)\n        #end\n      #end\n      #if (\"$!action.icon\" == '')\n        #set ($defaultActionIcons = {\n          'rename': 'move',\n          'delete': 'cross',\n          'restore': 'refresh',\n          'undelete': 'refresh',\n          'rights': 'lock',\n          'edit': 'pencil',\n          'view': 'eye'\n        })\n        #set ($action.icon = $defaultActionIcons.getOrDefault($action.id, $action.id))\n      #end\n      #set ($action.icon = \"$!services.icon.renderHTML($action.icon)\")\n    #end\n  #end\n#end\n\n#**\n * Internal macro - Remove the obfuscated results (i.e., non-viewable rows) from the map when the total number of \n * returned rows is larger or equal to the total number of counted rows.\n *\n * @param map the response map returned to the user. This map is expected to have a totalrows and returnedrows fields\n *            with numeric values and a rows field containing a arrow of objects containing a doc_viewable boolean\n *            field   \n *\n * @internal\n * @since 13.9RC1\n * @since 13.4.4\n * @since 12.10.11\n *#\n##\n#macro (livetable_filterObfuscated $map)\n  ## When the total number of rows is not bigger than the limit, we remove the obfuscated results from the response since\n  ## this has no impact on the pagination.\n  #set ($rows = $map.get('rows'))\n  #set ($offset = 0)\n  #if($map.get('offset'))\n    #set ($offset = $mathtool.sub($map.get('offset'), 1))\n  #end\n  #if ($map.get('totalrows') <= $map.get('returnedrows'))\n    #set ($filteredRows = [])\n    #foreach ($row in $rows)\n      #if($row['doc_viewable'])\n        #set ($discard = $filteredRows.add($row))\n      #end\n    #end\n    ## The offset needs to be taken into account when returning the total number of pages otherwise, client-side can\n    ## consider that previsouly returned results have been removed (e.g., in case of page size change).\n    #set($discard = $map.put('totalrows', $mathtool.add($filteredRows.size(), $offset)))\n    #set($discard = $map.put('returnedrows', $filteredRows.size()))\n  #else\n    #set ($filteredRows = $rows)\n  #end\n  #set ($discard = $map.put('rows', $filteredRows))\n#end\n\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is either of type Map or of type List but the whereSQL query is\n * using the \"?\" syntax for specifying parameters. Should always be used instead of #addLivetableLocationFilter which\n * is buggy when called several times (it'll add the same HQL binding name every time it's called!\n * See https://jira.xwiki.org/browse/XWIKI-17463).\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @since 12.5\n *#\n#macro(filterLocation $whereQL $whereParams $locationValue $hqlLocationBindingName $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' below.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #if ($whereParams.entrySet())\n        #set ($discard = $whereParams.put($hqlLocationBindingName, \"%${locationFilterValue}%\"))\n      #else\n        #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #end\n      #if ($filterWebHome == true)\n        #if ($whereParams.entrySet())\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n        #else\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n          #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n        #end\n      #else\n        #if ($whereParams.entrySet())\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(:$hqlLocationBindingName) ESCAPE '!'\")\n        #else\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!'\")\n        #end\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n  #end\n#end\n##\n##\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is either of type Map or of type List but the whereSQL query is\n * using the \"?\" syntax for specifying parameters.\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @deprecated starting with 12.5 use #filterLocation since this macro is buggy when called several times\n *#\n#macro(addLivetableLocationFilter $whereQL $whereParams $locationValue $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #if ($whereParams.entrySet())\n        #set ($discard = $whereParams.put('locationFilterValue', \"%${locationFilterValue}%\"))\n      #else\n        #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #end\n      #if ($filterWebHome == true)\n        #if ($whereParams.entrySet())\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(:locationFilterValue) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(:locationFilterValue) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n        #else\n          #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!')\")\n          #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n          #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n        #end\n      #else\n        #if ($whereParams.entrySet())\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(:locationFilterValue) ESCAPE '!'\")\n        #else\n          #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?) ESCAPE '!'\")\n        #end\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n #end\n#end\n##\n##\n#**\n * Modifies the passed where clause of the query (and its parameters) to add a \"location\" filter.\n *\n * To be used when the passed whereParams parameter is of type List and the whereSQL query is using the \"?N\" syntax\n * for specifying parameters.\n *\n * @param whereQL existing where clause to augment\n * @param whereParams existing query params to augment\n * @param locationValue if not empty then filters pages matching the passed values, with the \"/\" character acting as\n *        a wildcard (e.g. passing \"Blog/Intro\" will match \"Blog.BlogIntroduction\")\n * @param filterWebHome if true then treat \"WebHome\" as a normal input string like any other (defaults to false)\n * @param customWhereQL if defined then use that query instead of computing it ourselves. In this case the filterWebHome\n *        and locationValue parameters are ignored\n * @internal\n * @since 11.6\n *#\n#macro(addLocationFilter $whereQL $whereParams $locationValue $filterWebHome $customWhereQL)\n  #if (\"$!locationValue\" != '')\n    ## Location is a special case, that we need to handle separatly.\n    ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.\n    #set ($locationFilterValue = $locationValue)\n    ## Note: the \"_\", \"[\", and the \"%\" characters have special meanings in standard SQL servers (they behave as\n    ## wildcards). However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).\n    ## As a consequence, we must escape these characters.\n    ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.\n    ## Since we use '!' for the escaping, we also double existing ones.\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('([\\[%_!])', '!$1'))\n    ## Because the user might filter with \"/\" as separator we replace that by \"%\", because it could be \".\"\n    ## (the space separator) or \"/\" (as it is in the document name).\n    ## In addition, using \"%\" (any sequence of character) instead of \"_\" (any single character) gives the ability\n    ## to filter on different levels:\n    ##   e.g. filtering on \"Blog/Intro\" will return \"Blog.BlogIntroduction\".\n    #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%.%'))\n    #if (\"$!customWhereQL\" != '')\n      #set ($internalWhereQL = \"${whereQL} $customWhereQL\")\n    #else\n      #set ($discard = $whereParams.add(\"%${locationFilterValue}%\"))\n      #if ($filterWebHome == true)\n        #set ($matchNestedDocument = \"(doc.name = 'WebHome' AND LOWER(doc.space) LIKE LOWER(?${whereParams.size()}) ESCAPE '!')\")\n        #set ($matchTerminalDocument = \"(doc.name <> 'WebHome' AND LOWER(doc.fullName) LIKE LOWER(?${whereParams.size()}) ESCAPE '!')\")\n        #set ($internalWhereQL = \"${whereQL} AND ($matchNestedDocument OR $matchTerminalDocument)\")\n      #else\n        #set ($internalWhereQL = \"${whereQL} AND LOWER(doc.fullName) LIKE LOWER(?${whereParams.size()}) ESCAPE '!'\")\n      #end\n    #end\n    #set ($whereQL = $NULL)\n    #setVariable(\"$whereQL\", $internalWhereQL)\n #end\n#end\n##\n##\n#**\n * Pagination 2.0\n *\n * Displays a generic pagination widget for browsing a collection of items.\n * The macro is responsible for displaying browsing links, and does not involve the actual display of the browsed items.\n *\n * @param parameters A map of parameters:\n * <dl>\n *   <dt>url</dt>\n *   <dd>The base url of the document displaying the collection.</dd>\n *   <dd>Default: $doc.getURL('view')</dd>\n *   <dt>totalItems</dt>\n *   <dd>The total number number of items in the collection.</dd>\n *   <dd>Default: none, this parameter is mandatory.</dd>\n *   <dt>defaultItemsPerPage</dt>\n *   <dd>The number of items per page. This value is overwritten by the request parameter \"perPage\", if it exists and\n *       has a valid positive integer value.</dd>\n *   <dd>Default: 20</dd>\n *   <dt>position</dt>\n *   <dd>The placement of the pagination widget. Supported values: \"top\", \"bottom\". The bottom widget only displays\n *       pages, while the top widget also provides a information about the item range on the current page.</dd>\n *   <dd>Default: top</dd>\n *   <dt>itemParamName</dt>\n *   <dd>The name of the request parameter for the index of the first displayed item.</dd>\n *   <dd>Default: firstIndex</dd>\n *   <dt>itemsPerPageParamName</dt>\n *   <dd>The name of the request parameter for the number of items displayed on a page.</dd>\n *   <dd>Default: perPage</dd>\n *   <dt>noSx</dt>\n *   <dd>Do not force to use the pagination Skin Extension</dd>\n *   <dd>Default: false</dd>\n *   <dt>hash</dt>\n *   <dd>An optional URL hash to be appended to all pagination links generated by this macro.</dd>\n *   <dd>Default: none</dd>\n * </dl>\n *#\n#macro(pagination $parameters)\n  #if(!$parameters.noSx)\n  $xwiki.ssfx.use('uicomponents/pagination/pagination.css', true)##\n  #end\n  #if(\"$!{parameters.url}\" == '')\n    #set($parameters.url = $doc.getURL('view'))\n  #end\n  #if(!$parameters.url.contains('?'))\n    #set($parameters.url = \"${parameters.url}?\")\n  #end\n  #if($parameters.position != 'bottom')\n    #set($parameters.position = 'top')\n  #end\n  #paginationPrepareParams($parameters)\n  #paginationDisplay($parameters)\n#end\n#**\n * Pagination : request parameters preparation\n *\n * Used internally by the pagination macro. Retrieves pagination parameter values from the request:\n * \"firstIndex\" = the index of the first displayed item; \"perPage\" = number of items per page\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPrepareParams $parameters)\n  ## Setting some defaults\n  #if(\"$!{parameters.itemParamName}\" == '')\n    #set($parameters.itemParamName = 'firstIndex')\n  #end\n  #if(\"$!{parameters.itemsPerPageParamName}\" == '')\n    #set($parameters.itemsPerPageParamName = 'perPage')\n  #end\n  ## Adding the hash sign to the hash parameter if it is not present already\n  #if(\"$!{parameters.hash}\" != '' && !$parameters.hash.startsWith($escapetool.H))\n    #set($parameters.hash = \"${escapetool.H}${parameters.hash}\")\n  #end\n  ## Get starting item number from request\n  #set ($parameters.firstItem = \"$!{request.get($parameters.itemParamName)}\")\n  #set ($parameters.firstItem = $numbertool.toNumber($parameters.firstItem).intValue())\n  #if (!$parameters.firstItem)\n    #set ($parameters.firstItem = 0)\n  #end\n  ## Get number of items per page from request\n  #if (!$parameters.defaultItemsPerPage || $numbertool.toNumber($parameters.defaultItemsPerPage).intValue() <= 0)\n    #set ($parameters.defaultItemsPerPage = 20)\n  #end\n  #set ($parameters.itemsPerPage = \"$!{request.get($parameters.itemsPerPageParamName)}\")\n  #set ($parameters.itemsPerPage = $numbertool.toNumber($parameters.itemsPerPage).intValue())\n  #if (!$parameters.itemsPerPage || $parameters.itemsPerPage <= 0)\n    #set ($parameters.itemsPerPage = $parameters.defaultItemsPerPage)\n  #end\n#end\n#**\n * Pagination : display the pagination widget after all parameters have been computed\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationDisplay $parameters)\n  #set($parameters.pageCount = ($parameters.totalItems + $parameters.itemsPerPage - 1) / $parameters.itemsPerPage)\n  #if($parameters.firstItem >= $parameters.totalItems)\n    #set($parameters.firstItem = ($parameters.pageCount - 1) * $parameters.itemsPerPage)\n  #elseif($parameters.firstItem < 0)\n    #set($parameters.firstItem = 0)\n  #end\n  #set($parameters.crtPage = $parameters.firstItem / $parameters.itemsPerPage)\n  ## Make firstItem a multiple of itemsPerPage\n  #set($parameters.firstItem = $parameters.crtPage * $parameters.itemsPerPage)\n  #set($parameters.lastPage = $parameters.pageCount - 1)\n  <div class=\"paginationFilter\">\n    #if($parameters.position == 'top')\n      #paginationResultsRange($parameters)\n    #end\n    #if($parameters.totalItems > 0)\n      #if($parameters.controlsAround == true)\n        #paginationControlLeft($parameters)\n        #paginationPages($parameters)\n        #paginationControlRight($parameters)\n      #else\n        #paginationControl($parameters)\n        #paginationPages($parameters)\n      #end\n    #end\n  </div>\n#end\n#**\n * Pagination : display links for browsing pages\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPages $parameters)\n## $url $crtPage $itemsPerPage $lastPage $pageCount $itemParamName $itemsPerPageParamName)\n  #set($contextLeft  = 4)\n  #set($contextRight = 4)\n  #set($contextWidth = $contextLeft + 1 + $contextRight)\n  #if($parameters.pageCount <= $contextWidth)\n    #set($contextFirstPage = 0)\n    #set($contextLastPage = $parameters.pageCount - 1)\n  #else\n    #set($contextFirstPage = $parameters.crtPage - $contextLeft)\n    #set($contextLastPage = $parameters.crtPage + $contextRight)\n    #if($contextFirstPage < 0)\n      #set($contextFirstPage = 0)\n    #end\n    #if($contextLastPage >= $parameters.pageCount)\n      #set($contextLastPage = $parameters.pageCount - 1)\n    #end\n    #if($contextLastPage < $contextWidth)\n      #set($contextLastPage = $contextWidth - 1)\n    #end\n    #if($contextFirstPage > $parameters.pageCount - $contextWidth)\n      #set($contextFirstPage = $parameters.pageCount - $contextWidth)\n    #end\n  #end\n  <span class=\"pagination\">$services.localization.render('platform.livetable.paginationPage')\n  #if($contextFirstPage != 0)\n    #paginationPageLink(0 $parameters)\n  #end\n  #if($contextFirstPage > 1) ... #end\n  #foreach ($i in [$contextFirstPage .. $contextLastPage])\n    #paginationPageLink($i $parameters)\n  #end\n  #if($parameters.lastPage - $contextLastPage > 1) ... #end\n  #if($contextLastPage != $parameters.lastPage)\n    #paginationPageLink($parameters.lastPage $parameters)\n  #end\n  </span>\n#end\n#**\n * Pagination : display the link to a certain page (indicated by $pageNumber)\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationPageLink $pageNumber $parameters)\n  #set($firstItem = $pageNumber * $parameters.itemsPerPage)\n  #set($displayedPageNumber = $pageNumber + 1)\n  #if($pageNumber == $parameters.crtPage)\n  <span class=\"currentPage\">$displayedPageNumber</span>\n  #else\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPageTitle', [$displayedPageNumber])\">$displayedPageNumber</a>\n  #end\n#end\n#**\n * Pagination : display prev / next links\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControl $parameters)\n  <span class=\"controlPagination\">\n  #paginationControlLeft($parameters)\n  #paginationControlRight($parameters)\n  </span>\n#end\n#**\n * Pagination : display prev link\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControlLeft $parameters)\n  #if($parameters.crtPage > 0)\n    #set($prevPage = $parameters.crtPage - 1)\n    #set($firstItem = $prevPage * $parameters.itemsPerPage)\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPagePrevTitle')\" class=\"prevPagination\">$services.localization.render('platform.livetable.paginationPagePrevious')</a>\n  #else\n    <span class=\"noPrevPagination\"> </span>\n  #end\n#end\n#**\n * Pagination : display next link\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationControlRight $parameters)\n  #if($parameters.crtPage < $parameters.lastPage)\n    #set($nextPage = $parameters.crtPage + 1)\n    #set($firstItem = $nextPage * $parameters.itemsPerPage)\n    <a href=\"${parameters.url}&amp;${parameters.itemParamName}=${firstItem}#if($parameters.itemsPerPage != $parameters.defaultItemsPerPage)&amp;${parameters.itemsPerPageParamName}=${parameters.itemsPerPage}#end$!{parameters.hash}\" title=\"$services.localization.render('platform.livetable.paginationPageNextTitle')\" class=\"nextPagination\">$services.localization.render('platform.livetable.paginationPageNext')</a>\n  #else\n    <span class=\"noNextPagination\"> </span>\n  #end\n#end\n#**\n * Pagination : message informing the user which items are being displayed on the current page (Results i - j of N)\n *\n * Used internally by the pagination macro.\n *\n * @see #pagination\n * @internal\n *#\n#macro(paginationResultsRange $parameters)\n  #set($from = $parameters.firstItem + 1)\n  #set($to =   $parameters.firstItem + $parameters.itemsPerPage)\n  #if ($to > $parameters.totalItems)\n    #set($to = $parameters.totalItems)\n  #end\n  <span class=\"resultsNo\">\n  #if($parameters.totalItems == 0)\n    <span class='currentResultsNo'>$services.localization.render('platform.livetable.paginationResultsNone')</span>\n  #elseif($parameters.totalItems == 1)\n    <span class='currentResultsNo'>$services.localization.render('platform.livetable.paginationResultsOne')</span>\n  #elseif($from == $parameters.totalItems)\n    $services.localization.render('platform.livetable.paginationResultsSingle', [$from, $parameters.totalItems])\n  #else\n    $services.localization.render('platform.livetable.paginationResultsMany', [$from, $to, $parameters.totalItems])\n  #end\n  </span>\n#end\n\n#**\n * Generates a vertical menu from an object describing the categories\n *\n * Expected format of the object:\n * menu = vector of items\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional, defaults to #\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $menu the menu object, in the format described above\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *        'cssClass' : specific css class for this menu\n *#\n#macro(verticalNavigation $menu $options)\n(% class=\"vertical-menu $!{options.cssClass}\" %)(((\n  #foreach ($item in $menu)\n    #verticalNavigationItem($item '*' $options)\n  #end\n)))\n#end\n\n#**\n * Generates a vertical menu item from an object (a map)\n *\n * Expected format:\n * item = map with the following fields:\n *        'id'       : mandatory\n *        'name'     : the text displayed for the corresponding menu item;\n *                     optional, defaults to\n *                     $services.localization.render(\"$!{translationPrefix}${item.id}\")\n *        'url'      : the \"action\" of the menu item; optional\n *        'cssClass' : a specific css class for the menu item for custom\n *                     styling; optional, defaults to ''\n *        'children' : vector of items, allowing to recursively define submenus\n *\n * @param $item the menu item object, in the format described above\n * @param $level the current level of the item, of the form '\\*+'; the number of\n *        stars indicates the depth of the item in the menu\n * @param $options a map of options, where the following entries are currently used:\n *        'translationPrefix' :  the translation prefix added to the id of each\n *                     item, in order to generate the name; ignored for items whose\n *                     name is specified\n *        'crtItemId': identifier of the current menu item (for differential styling)\n *#\n#macro(verticalNavigationItem $item $level $options)\n  #set ($class = \"$!{item.cssClass}\")\n  #set ($hasChildren = ($item.children && $item.children.size() > 0))\n  #if ($hasChildren)\n    #set ($class = \"$class group\")\n  #end\n  #if ($options.crtItemId == $item.id)\n    #set ($class = \"$class current\")\n    #if ($hasChildren)\n      #set ($class = \"$class current-group\")\n    #end\n  #end\n  #set ($class = $class.trim())\n  #set ($name = \"$!{item.name}\")\n  #if ($name == '')\n    #set ($name = $services.localization.render(\"$!{options.translationPrefix}${item.id}\"))\n  #end\n  $level (% id=\"vertical-menu-${item.id}\" class=\"${class}\" %){{html}}<a #if (\"$!{item.url}\" != '')href=\"$item.url\"#{end}>$name</a>{{/html}}\n  #if ($hasChildren)\n    #set ($children = [])\n    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)\n    #foreach ($child in $children)\n      #verticalNavigationItem($child $level.concat('*') $options)\n    #end\n  #end\n#end\n\n#**\n * Sort a collection containing maps by a field.\n *\n *\n * @param $collection - List - Collection to sort.\n *\n * @param $field - String - Name of the field of the map to sort on.\n *\n * @param $defaultValue - Any - The default value for the sort if one of the elements has a NULL field\n *\n * @param $order - String - Must be 'asc' for ascending, or 'desc' for descending\n *\n * @param $outList - List - The returns from this macro will be put in this list, passing the list as a parameter\n *                          a safety measure because macros can't return values.\n *#\n#macro (sortCollectionOfMapsByField $collection $field $defaultValue $order $outputList)\n  ## If an element has a null field, $collectiontool.sort() won't return anything.\n  ## To avoid this situation, we create a new list that contains the elements with a default field if it is missing\n  #set ($newList = [])\n  #foreach ($element in $collection)\n    #if (\"$!element.get($field)\" == '')\n      #set ($elementCopy = {})\n      #set ($discard = $elementCopy.putAll($element))\n      #set ($discard = $elementCopy.put($field, $defaultValue))\n      #set ($discard = $newList.add($elementCopy))\n    #else\n      #set ($discard = $newList.add($element))\n    #end\n  #end\n  #set ($discard = $outputList.addAll($collectiontool.sort($newList, \"${field}:${order}\")))\n#end\n\n#**\n * Sets a gradient-based styling for CSS backgrounds\n *\n *\n * @param $icon the path to an additional icon image\n * @param $gradientData a map of gradients, where the following entries are currently used:\n *        'angle' :  an angle of direction for the gradient\n *        'colors':  a list of maps of color-stops for the gradient, where the following entries are currently used: \n *                'color'    : color value\n *                'position' : stop position for the color (between 0% and 100% or a lenght)\n *#\n#macro (css3_backgroundIconAndLinearGradient $icon $gradientData)\n  ## Older color themes don't have values defined for the gradients, so we'll use a simple background-color instead\n  #set ($validColors = 0)\n  #set ($validColor = '')\n  #foreach ($colorEntry in $gradientData.colors)\n    #if (\"$!{colorEntry.color}\" != '')\n      #set ($validColors = $validColors + 1)\n      #set ($validColor = $colorEntry.color)\n    #end\n  #end\n  #if ($validColors <= 1)\n    #if (\"$!{icon}\" != '')\n      background-image: ${icon};\n    #end\n    #if (\"$!{validColor}\" != '')\n      background-color: ${validColor};\n    #end\n    #break($macro)\n  #end\n  #set ($colors = '')\n  #set ($position = '')\n  #if ($gradientData.angle)\n    #if ($stringtool.indexOfAny($gradientData.angle, 'top', 'right', 'bottom', 'left') != -1)\n      #set ($position = \"to $!{gradientData.angle}\")\n    #else\n      #set ($position = \"$!{gradientData.angle}\")\n    #end\n  #elseif ($gradientData.to)\n    #set ($position = \"to $!{gradientData.to}\")\n  #end\n  #foreach ($colorEntry in $gradientData.colors)\n    #set ($colors = \"$!{colors}, $!{colorEntry.color} $!{colorEntry.position}\")\n  #end\n  #if (\"$!{colors}\" != '' && \"$!{position}\" == '')\n    #set ($colors = $colors.substring(2))\n  #end\n  background-image:#if (\"$!{icon}\" != '') $icon,#end linear-gradient($!{position}$!{colors});\n#end\n##\n##\n##\n#macro (css3_backgroundLinearGradient $gradientData)\n  #css3_backgroundIconAndLinearGradient ('' $gradientData)\n#end\n\n#**\n * Macro that adds the prefixes for box-sizing CSS property that alters the default CSS box model used to calculate widths and heights of elements\n *\n *\n * @param $value should take the following values: content-box | padding-box | border-box\n *#\n#macro (css3_boxSizing $value)\n  #if (\"$!{value}\" != '')\n    #set ($browserVariants = ['-moz-', ''])\n    #foreach ($bvar in $browserVariants)\n      ${bvar}box-sizing: $value;\n    #end\n  #end\n#end\n\n#**\n * Macro for text-shadow CSS property that adds shadows to text\n *\n *\n * @param $offsetX shadow's horizontal offset value from the text\n * @param $offsetY shadow's vertical offset value from the text\n * @param $blurRadius the blur radius value of the text-shadow\n * @param $color the color of the text-shadow\n *#\n#macro (css_textShadow $offsetX $offsetY $blurRadius $color)\n  ## In order to ensure consistency across browsers and also to accommodate old ColorThemes that might not have gradientColor defined, we test the existence of $color param\n  #if ((\"$!{offsetX}\" != '') && (\"$!{offsetY}\" != '') && (\"$!{color}\" != ''))\n    text-shadow: ${offsetX} ${offsetY} ${blurRadius} ${color};\n  #end\n#end\n\n#**\n * Transforms the given string to an XML name by filtering all the characters that are not allowed in an XML name. If\n * the given string contains only invalid characters then the result is the empty string.\n *\n * @param $string the string to be transformed to an XML name\n *#\n#macro(toXMLName $string)\n## Keep only Unicode letters and digits plus the hyphen and the underscore characters.\n#set($string = $string.replaceAll('[^\\p{L}\\p{N}_\\-]+', ''))\n## Make sure the string doesn't start with a number or the hyphen character.\n#set($string = $string.replaceAll('^[\\p{N}\\-]+', ''))\n$string##\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by pickers.\n *#\n#macro (picker_import)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n#end\n\n#**\n * Pulls all the JavaScript and CSS resources needed by the user and group picker.\n *#\n#macro (userPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestUsersAndGroups.js'))\n#end\n\n#macro (userPicker_input $multiSelect $parameters)\n  #if ($multiSelect)\n    #set ($discard = $parameters.put('multiple', 'multiple'))\n  #end\n  #set ($discard = $parameters.putIfAbsent('data-userScope', \"$!services.wiki.user.userScope\"))\n  #suggestInput($parameters)\n#end\n\n#macro (userPicker $multiSelect $parameters)\n  #userPicker_import\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-users\"))\n  #userPicker_input($multiSelect $parameters)\n#end\n\n#macro (groupPicker $multiSelect $parameters)\n  #userPicker_import\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-groups\"))\n  #userPicker_input($multiSelect $parameters)\n#end\n\n\n#**\n* Pulls all the JavaScript and CSS resources needed by the page picker.\n*#\n#macro (pagePicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPages.js',\n    {'forceSkinAction': true, 'language': $xcontext.locale}))\n#end\n\n#macro (pagePicker $parameters)\n  #pagePicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-pages\"))\n  #suggestInput($parameters)\n#end\n\n#**\n* Pulls all the JavaScript and CSS resources needed by the attachment picker.\n*#\n#macro (attachmentPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestAttachments.js'))\n  ## Pull the resources required by the configured icon set in order to display attachment icons.\n  #set ($discard = $services.icon.use())\n#end\n\n#macro (attachmentPicker $parameters)\n  #attachmentPicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') suggest-attachments\"))\n  #suggestInput($parameters)\n#end\n\n#**\n * Displays the given title (i.e. the title of the sheet) if the condition is true. Otherwise displays the title of the\n * current document (i.e. the document the sheet is applied to). If the condition is not specified then it checks if the\n * current document is a sheet by looking for an object of type 'XWiki.SheetDescriptorClass'. You can pass a traslation\n * key for the sheet title. This macro makes sure the document title is not displayed recursively.\n *\n * @param $title the sheet title, you can pass a translation key\n * @param $condition optional condition, whether to display the sheet title or the document title\n *#\n#macro (sheetTitle $title $condition)\n## NOTE: Don't format the code because spaces are preserved in document title.\n#if (!$condition && \"$!condition\" == '')##\n## Undefined condition. Use the default condition.\n#set ($condition = $doc.getObject('XWiki.SheetDescriptorClass'))\n#elseif ($condition.getClass().getName() == 'java.lang.String')##\n## The condition is the name of an xclass. Display the sheet title if the current document doesn't have such an object.\n#set ($condition = !$doc.getObject($condition))\n#end##\n##\n#if ($condition)##\n## Display the sheet title.\n$services.localization.render($title)##\n##\n#elseif (!$sheetTitle_displayingDocumentTitle)##\n## Display the document title without going through the sheet and preventing recursion.\n#set ($sheetTitle_displayingDocumentTitle = true)\n$services.display.title($doc, {\n  'displayerHint': 'default',\n  'outputSyntaxId': 'plain/1.0'\n})##\n#set ($sheetTitle_displayingDocumentTitle = false)\n##\n#else##\nRecursive title display detected!##\n#end##\n#end\n\n#**\n * Outputs the skin extension hooks, for both Stylesheet and JavaScript extensions. This is useful when the HTML response\n * of an AJAX request needs to pull some CSS and JavaScript resources. The code that makes the AJAX request should move\n * the 'includes' (i.e. the link and script tags) to the head of the HTML page after receiving the HTML response.\n *#\n#macro (skinExtensionHooks)\n  #styleSheetExtensionHooks\n  #javaScriptExtensionHooks\n#end\n\n#**\n * Hook for inserting CSS skin extensions.\n *#\n#macro (styleSheetExtensionHooks)\n  ## - Skin JAR extension hook. Placed first to allow other skin extensions to override it.\n  <!-- com.xpn.xwiki.plugin.skinx.CssResourceSkinExtensionPlugin -->\n  ## - Skin file extension hook.\n  <!-- com.xpn.xwiki.plugin.skinx.CssSkinFileExtensionPlugin -->\n  ## - Skin extension hook, placed at the last to be able to override previous css rules with a Skin Extension Object\n  <!-- com.xpn.xwiki.plugin.skinx.CssSkinExtensionPlugin -->\n#end\n\n#**\n * Hooks for inserting JavaScript skin extensions.\n *#\n#macro (javaScriptExtensionHooks)\n  ## - Skin JAR extension hook. Placed first to allow other skin extensions to override it.\n  <!-- com.xpn.xwiki.plugin.skinx.JsResourceSkinExtensionPlugin -->\n  ## - Skin file extension hook.\n  <!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin -->\n  ## - Skin extension hook\n  <!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin -->\n#end\n\n###\n### Displays an exception.\n###\n### @param title the message to display to the user\n### @param exception the exception to display when the user clicks on the message\n#macro(displayException $title $exception)\n<div class=\"xwikirenderingerror\" title=\"Click to get more details about the error\" style=\"cursor: pointer;\">\n  $title\n</div>\n<div class=\"xwikirenderingerrordescription hidden\">\n  <pre>$escapetool.xml($exceptiontool.getStackTrace($exception))</pre>\n</div>\n#end\n\n###\n### Generically display exceptions that have not been handled at the right level and have now bubbled up to the UI.\n###\n### This is a convenience macro, see #displayException.\n###\n### @param exception The exception to format for displaying\n#macro(displayUnhandledException $exception)\n  #set ($sentence1 = 'Unexpected error.')\n  #set ($sentence2 = 'Contact your administrator or <a href=\"https://jira.xwiki.org\">report the issue</a>.')\n  #set ($sentence3 = 'Click this box to get technical details.')\n  #displayException(\"${sentence1} ${sentence2} ${sentence3}\", $exception)\n#end\n\n###\n### Display a rich select input (with icon, description, etc...)\n###\n###\n### @param $fieldName name of the input field\n### @param $options an array of maps describing a category of options, which contains an array of options\n### @param $defaultValue the default value to use\n### @param $firstIsDefaultIfDefaultNull if defaultValue is null, select the first option\n### @param $cssClass class to add to the div (could be 'xwiki-select-small', 'xwiki-select-medium', 'xwiki-select-tall' or any other class)\n### @param $id (optional) id to give to the widget\n### @param $enableFilter (optional) enable the filtering of the options\n###\n### Example of use:\n###\n###\u00a0#set($options = [\n###                   { \n###                     'name': 'Category 1',\n###                     'options': [\n###                       { 'name': 'Option 1', 'value': 'option1', 'description': 'Description of the option 1', 'icon': 'wiki', 'data': {'some-data': 'some-value'}},\n###                       { 'name': 'Option 2', 'value': 'option2', 'description': 'Description of the option 2', 'icon': 'page'}\n###                     ]\n###                   },\n###                   {\n###                     'name': 'Category 2',\n###                     'options': [\n###                       { 'name': 'Option 3', 'value': 'option3', 'description': 'Description of the option 3', 'icon': 'check'}\n###                     ]\n###                   }\n###                 ])\n### #xwikiSelect('nameOfTheField', $options, 'option1', false, 'xwiki-select-small', '', true)\n#########################################################\n#macro(xwikiSelect $fieldName $options $defaultValue $firstIsDefaultIfDefaultNull $cssClass $id $enableFilter $filterPlaceHolder)\n  ## TODO: put this in a webjar instead\n  #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/select/select.css', {'forceSkinAction': true}))\n  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/select/select.js' , {'forceSkinAction': true}))\n  <div class=\"xwiki-select $!cssClass\" #if(\"$!id\" != '')id=\"$id\"#end>\n    ## Here we let a place to add a filter in the future, that is why the options are inside the following div block.\n    <p><input type=\"text\" class=\"xwiki-select-filter\" placeholder=\"$escapetool.xml($services.localization.render('web.widgets.select.filter.placeholder'))\"/></p>\n    <div class=\"xwiki-select-options\">\n      <ul>\n        #set ($count = 0)\n        #foreach ($category in $options)\n          <li class=\"xwiki-select-category\">$category.name (<span class=\"xwiki-select-category-count\">$category.options.size()</span>)\n            <ul>\n              #foreach ($option in $category.options)\n                #if (\"$!defaultValue\" == $$option.value || ($count == 0 && $firstIsDefaultIfDefaultNull && \"$!defaultValue\" == ''))\n                  #set ($checked = 'checked=\"checked\"')\n                  #set ($class = 'xwiki-select-option-selected')\n                #else\n                  #set ($checked = '')\n                  #set ($class = '')\n                #end\n                #set ($otherData = '')\n                #foreach($data in $option.data.keySet())\n                  #set ($otherData = \"$otherData data-${escapetool.xml($data)} = '$escapetool.xml($option.data.get($data))'\")\n                #end\n                <li class=\"xwiki-select-option $class\">\n                  <input type=\"radio\" name=\"$fieldName\" value=\"$escapetool.xml($option.value)\" id=\"${fieldName}_${count}\" $checked $otherData/>\n                  <span class=\"xwiki-select-option-icon\">$!services.icon.renderHTML($option.icon)</span>\n                  <div>\n                    <label for=\"${fieldName}_${count}\">$escapetool.xml($option.name)</label>\n                    #if (\"$!option.description\" != '')\n                      <p class=\"xHint\">$escapetool.xml($option.description)</p>\n                    #end\n                  </div>\n                </li>\n                #set ($count = $count + 1)\n              #end\n            </ul>\n          </li>\n        #end\n      </ul>\n    </div>\n  </div>\n#end\n\n#**\n * Used by custom property displayers that need a generic suggest input.\n *#\n#macro (xpropertySuggestInputDisplayer $field $prefix $name $value)\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js'))\n  #set ($id = \"${prefix}${name}\")\n  #set ($freeText = $!field.getValue('freeText'))\n  #set ($parameters = {\n    'id': $id,\n    'name': $id,\n    'value': $value,\n    'class': 'suggest-propertyValues',\n    'data-className': $field.className,\n    'data-propertyName': $name\n  })\n  #if (\"$!freeText\" != '')\n    #set ($discard = $parameters.put('data-freeText', $freeText))\n  #end\n\n  #if ($field.getProperty('disabled').value == 1)\n    #set ($parameters.disabled = 'disabled')\n  #end\n  #if ($field.getProperty('multiSelect').value == 1)\n    #set ($parameters.multiple = 'multiple')\n    #set ($separators = $field.getProperty('separators').value)\n    #if (\"$!separators\" != '')\n      #set ($parameters.separators = $separators)\n    #end\n  #end\n  #suggestInput($parameters)\n#end\n\n#**\n * Utility macro to output a generic suggest input.\n *\n * @param $parameters the parameters (most of them are treated as HTML attributes)\n *#\n#macro (suggestInput $parameters $optionsDisplayerMacroName)\n  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),\n    {'type': 'text/css', 'rel': 'stylesheet'}))\n  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))\n  #set ($discard = $parameters.put('size', 1))\n  #set ($attributes = [])\n  ## Note: Remove placeholder since it's not valid to have it on an HTML SELECT element.\n  #set ($nonAttributes = ['value', 'separators', 'placeholder'])\n  #foreach ($entry in $parameters.entrySet())\n    #if (!$nonAttributes.contains($entry.key))\n      #if ($entry.value.equals($entry.value.toString()))\n        #set ($stringValue = $entry.value)\n      #else\n        ## Serialize non-string values as JSON.\n        #set ($stringValue = $jsontool.serialize($entry.value))\n      #end\n      #set ($discard = $attributes.add(\"$escapetool.xml($entry.key)='$!escapetool.xml($stringValue)'\"))\n    #end\n  #end\n  #if (\"$!parameters.value.size()\" != '')\n    #set ($values = $parameters.value)\n  #elseif ($parameters.multiple)\n    #set ($values = $stringtool.split($parameters.value, $parameters.getOrDefault('separators', '|,')))\n  #elseif (\"$!parameters.value\" != '')\n    #set ($values = [$parameters.value])\n  #else\n    #set ($values = [])\n  #end\n  <select $stringtool.join($attributes, ' ')>\n    #if (\"$!parameters.placeholder\" != '')\n      <option value=\"\">$escapetool.xml($parameters.placeholder)</option>\n    #end\n    #if (\"$!optionsDisplayerMacroName\" != '')\n      #evaluate(\"${escapetool.h}${optionsDisplayerMacroName}(${escapetool.d}values)\")\n    #else\n      #foreach ($selectedValue in $values)\n        <option value=\"$!escapetool.xml($selectedValue)\" selected=\"selected\">$!escapetool.xml($selectedValue)</option>\n      #end\n    #end\n  </select>\n  #if ($parameters.multiple)\n    ## We need a hidden input with an empty value to be able to clear the selected values when no value is selected.\n    <input type=\"hidden\" name=\"$!escapetool.xml($parameters.name)\" />\n  #end\n#end\n\n#**\n * Serializes the given data as JSON and writes the result on the HTTP response, setting the proper content type and\n * length.\n *\n * @param $data the data to be written as JSON on the HTTP response\n *#\n#macro (jsonResponse $data)\n  #set ($json = $jsontool.serialize($data))\n  ## We write the output directly to the HTTP response in order to avoid going through the Rendering which executes\n  ## transformations that could break the JSON (e.g. the icon transformation). Another option would be to specify which\n  ## Rendering Transformations to execute in the query string (XWIKI-13167).\n  #set ($discard = $response.setContentType('application/json'))\n  ## Make sure the Character Encoding response header matches the character encoding used to write the response and\n  ## compute its length.\n  #set ($characterEncoding = 'utf-8')\n  #set ($discard = $response.setCharacterEncoding($characterEncoding))\n  #set ($discard = $response.writer.write($json))\n  ## The content length is measured in bytes and one character can use more than one byte.\n  #set ($discard = $response.setContentLength($json.getBytes($characterEncoding).size()))\n  ## Make sure the entire content is send back to the client.\n  #set ($discard = $response.flushBuffer())\n  ## Make sure XWiki doesn't write any more content to the response.\n  #set ($discard = $xcontext.setFinished(true))\n#end\n\n#macro (classPicker $parameters)\n  #classPicker_import\n  #if (\"$!parameters\" == \"\")\n    #set ($parameters = {})\n  #end\n  #set ($discard = $parameters.put('class', \"$!parameters.get('class') xwiki-selectize suggest-classes\"))\n  #suggestInput($parameters 'classPicker_displayOptions')\n#end\n\n#macro (classPicker_import)\n  #picker_import\n  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/xwiki.selectize.js', true))\n#end\n\n#macro (classPicker_displayOptions $selectedValues)\n  #set ($selectedClassReferences = $collectiontool.set)\n  #foreach ($selectedValue in $selectedValues)\n    #set ($discard = $selectedClassReferences.add($services.model.resolveDocument($selectedValue)))\n  #end\n  #set ($optionGroups = $collectiontool.orderedMap)\n  #classPicker_getOptionGroups($optionGroups $selectedClassReferences)\n  #classPicker_displayOptionGroups($optionGroups $selectedClassReferences)\n#end\n\n#macro (classPicker_getOptionGroups $optionGroups $selectedClassReferences)\n  #set ($classReferences = $collectiontool.set)\n  ## Make sure the selected classes are listed as options.\n  #set ($discard = $classReferences.addAll($selectedClassReferences))\n  #foreach ($className in $xwiki.classList)\n    #set ($classReference = $services.model.resolveDocument($className))\n    #if ($services.security.authorization.hasAccess('view', $classReference))\n      #set ($discard = $classReferences.add($classReference))\n    #end\n  #end\n  #set ($classReferenceTree = $services.model.toTree($classReferences))\n  #classPicker_addOptionGroups($classReferenceTree $optionGroups)\n#end\n\n#**\n * Flatten the class reference tree into a list of class reference groups.\n *#\n#macro (classPicker_addOptionGroups $parentNode $optionGroups)\n  ## Look for direct child class nodes and create an option group.\n  #set ($classNodes = $parentNode.getChildren($doc.documentReference.type))\n  #if ($classNodes.size() > 0)\n    #set ($classReferences = [])\n    #foreach ($classNode in $classNodes)\n      #set ($discard = $classReferences.add($classNode.reference))\n    #end\n    #set ($discard = $optionGroups.put($parentNode.reference, $classReferences))\n  #end\n  #foreach ($childNode in $parentNode.children)\n    #if ($childNode.children.size() > 0)\n      #classPicker_addOptionGroups($childNode $optionGroups)\n    #end\n  #end\n#end\n\n#macro (classPicker_displayOptionGroups $optionGroups $selectedClassReferences)\n  #foreach ($entry in $optionGroups.entrySet())\n    ## Use the location as group label.\n    #set ($path = [])\n    #set ($referenceChain = $entry.key.reversedReferenceChain)\n    ## Skip the wiki reference because classes are local.\n    #foreach ($reference in $referenceChain.subList(1, $referenceChain.size()))\n      #set ($discard = $path.add($reference.name))\n    #end\n    <optgroup label=\"$escapetool.xml($stringtool.join($path, ' / '))\">\n      #foreach ($classReference in $entry.value)\n        #set ($optionData = {\n          'url': $xwiki.getURL($classReference)\n        })\n        <option value=\"$escapetool.xml($services.model.serialize($classReference, 'local'))\"\n            #if ($selectedClassReferences.contains($classReference))selected=\"selected\"#end\n            data-data=\"$escapetool.xml($jsontool.serialize($optionData))\">\n          ## We display the class title instead of the class name because classes can be defined in nested (WebHome)\n          ## documents. We could also display the last space name but then we would need an option group for the top\n          ## level classes and a label for this group that doesn't confuse the users.\n          #set ($classDoc = $xwiki.getDocument($classReference))\n          $escapetool.xml($classDoc.plainTitle)\n        </option>\n      #end\n    </optgroup>\n  #end\n#end\n\n#macro (dateTimePicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'datetime'))\n  #set ($discard = $parameters.putIfAbsent('data-timestamp', $parameters.value.time))\n  #set ($discard = $parameters.putIfAbsent('data-locale', $services.localization.currentLocale))\n  #if (\"$!parameters.get('data-format')\" != '' && \"$!parameters.value.time\" != '')\n    #set ($parameters.value = $datetool.format($parameters.get('data-format'), $parameters.value,\n      $services.localization.currentLocale))\n  #end\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <input type=\"text\"\n    #foreach ($parameter in $parameters.entrySet())\n      $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n    #end\n  />\n#end\n\n#macro (dateTimePicker $parameters)\n  #dateTimePicker_import\n  #dateTimePicker_input($parameters)\n#end\n\n#macro (colorPicker_input $parameters)\n  #set ($discard = $parameters.putIfAbsent('class', 'color-picker type-color'))\n  #if (\"$!parameters.disabled\" == 'true')\n    #set ($parameters.disabled = 'disabled')\n  #else\n    #set ($discard = $parameters.remove('disabled'))\n  #end\n  <input type=\"text\"\n    #foreach ($parameter in $parameters.entrySet())\n      $escapetool.xml($parameter.key)=\"$!escapetool.xml($parameter.value)\"\n    #end\n  />\n#end\n\n#macro (colorPicker $parameters)\n  #colorPicker_import\n  #colorPicker_input($parameters)\n#end\n\n#**\n * Returns the editor that should be used to edit the current document by default (if no other editor is specified).\n * This macro is called both in view mode (to determine the in-place editor to load) and in edit mode (to determine the\n * classical editor to use).\n *#\n#macro (getDefaultDocumentEditor $return)\n  ## Determine the sheets using the default document translation because objects are accessible only from the default\n  ## translation.\n  #if (!$services.sheet.getSheets($doc, $xcontext.action).isEmpty())\n    #set ($defaultDocumentEditor = 'inline')\n  #elseif ($xwiki.editorPreference == 'wysiwyg' && $services.wysiwyg.isSyntaxSupported($tdoc.syntax.toIdString()))\n    #set ($defaultDocumentEditor = 'wysiwyg')\n  #else\n    #set ($defaultDocumentEditor = 'wiki')\n  #end\n  #set ($return = $NULL)\n  #setVariable (\"$return\" $defaultDocumentEditor)\n#end\n\n#macro (displayUserLink $userReference)\n  #if ($userReference.class.simpleName == \"DocumentUserReference\")\n    #set ($docReference = $userReference.reference)\n    #set ($props = $services.user.getProperties($userReference))\n    #if (\"$!props.firstName\" == \"\" || \"$!props.lastName\" == \"\")\n      #set ($displayName = $docReference.name)\n    #else\n      #set ($displayName = \"$props.firstName $props.lastName\")\n    #end\n  #else\n    #set ($docReference = $userReference)\n    #set ($displayName = $docReference.name)\n  #end\n  <div class=\"user\" data-reference=\"$escapetool.xml($docReference)\">\n    <span class=\"user-avatar-wrapper\">\n      #getUserAvatarURL($docReference $avatarURL 120)\n      <img class=\"user-avatar\" src=\"$escapetool.xml($avatarURL.url)\" />\n    </span>\n    <a href=\"$xwiki.getURL($docReference)\">$escapetool.xml($docReference.name)</a>\n  </div>\n#end\n\n##\n## Parse the provided filterValue according to its match type and assign the resulting start/end dates to the dateRange\n## map.\n## First, if a after or before matchType is provided, a '/' is added respectivelly at the end or at the beguinning of  \n## filterValue.\n## Then, we first start by trying to split filterValue using a '/', and parse the two substring as ISO 8601 dates.\n## If none of the substring conforms to the ISO 8601 date format, a second try is done by splitting using '-', and \n## the two substrings are parsed as timestamps.\n##\n## @since 14.0RC1\n## @since 13.10.2\n## @since 13.4.6\n##\n#macro (parseDateRange $matchType $filterValue $dateRange)\n  ## Transform the filter value into a date range if needed.\n  #if ($matchType == 'after')\n    #set ($dateRangeString = \"$filterValue/\")\n  #elseif ($matchType == 'before')\n    #set ($dateRangeString = \"/$filterValue\")\n  #else\n    ## Between start and end date.\n    #set ($dateRangeString = $filterValue)\n  #end\n  ## Try to parse as ISO 8601 time interval (see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)\n  #set ($parts = $dateRangeString.split('/', -1))\n  #if ($parts.size() == 2)\n    #set ($dateRange.start = $datetool.toDate('iso_tz', $parts[0]))\n    #set ($dateRange.end = $datetool.toDate('iso_tz', $parts[1]))\n  #end\n  #if (!$dateRange.start && !$dateRange.end)\n    ## Try to parse as timestamp range. Note that this doesn't handle well negative timestamps.\n    #set ($parts = $dateRangeString.split('-', -1))\n    #if ($parts.size() == 2)\n      #set ($dateRange.start = $datetool.toDate($numbertool.toNumber($parts[0])))\n      #set ($dateRange.end = $datetool.toDate($numbertool.toNumber($parts[1])))\n    #end\n  #end\n#end\n"], "filenames": ["xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/macros.vm", "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/macros.vm"], "buggy_code_start_loc": [236, 1474], "buggy_code_end_loc": [342, 1602], "fixing_code_start_loc": [236, 1474], "fixing_code_end_loc": [342, 1602], "type": "CWE-79", "message": " XWiki Commons are technical libraries common to several other top level XWiki projects. The Livetable Macro wasn't properly sanitizing column names, thus allowing the insertion of raw HTML code including JavaScript. This vulnerability was also exploitable via the Documents Macro that is included since XWiki 3.5M1 and doesn't require script rights, this can be demonstrated with the syntax `{{documents id=\"example\" count=\"5\" actions=\"false\" columns=\"doc.title, before<script>alert(1)</script>after\"/}}`. Therefore, this can also be exploited by users without script right and in comments. With the interaction of a user with more rights, this could be used to execute arbitrary actions in the wiki, including privilege escalation, remote code execution, information disclosure, modifying or deleting content. This has been patched in XWiki 14.9, 14.4.6, and 13.10.10.\n", "other": {"cve": {"id": "CVE-2023-29207", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-15T16:15:07.327", "lastModified": "2023-04-26T19:29:15.780", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": " XWiki Commons are technical libraries common to several other top level XWiki projects. The Livetable Macro wasn't properly sanitizing column names, thus allowing the insertion of raw HTML code including JavaScript. This vulnerability was also exploitable via the Documents Macro that is included since XWiki 3.5M1 and doesn't require script rights, this can be demonstrated with the syntax `{{documents id=\"example\" count=\"5\" actions=\"false\" columns=\"doc.title, before<script>alert(1)</script>after\"/}}`. Therefore, this can also be exploited by users without script right and in comments. With the interaction of a user with more rights, this could be used to execute arbitrary actions in the wiki, including privilege escalation, remote code execution, information disclosure, modifying or deleting content. This has been patched in XWiki 14.9, 14.4.6, and 13.10.10.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.9, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.9", "versionEndExcluding": "13.10.10", "matchCriteriaId": "D3DCF379-9EAE-4F14-B5F8-5616135FE4AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.0", "versionEndExcluding": "14.4.6", "matchCriteriaId": "4DC3E3FE-42E5-412F-AD0B-6E6531319461"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.5", "versionEndExcluding": "14.9", "matchCriteriaId": "E0DE5CA5-2618-434D-854A-CDAB06A713E2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:1.9:milestone2:*:*:*:*:*:*", "matchCriteriaId": "4B2046BD-3879-44CB-AA45-362281759A12"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/65ca06c51e7a1d5a579344c7272b2cc9a9a21126", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-6vgh-9r3c-2cxp", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-15205", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/65ca06c51e7a1d5a579344c7272b2cc9a9a21126"}}