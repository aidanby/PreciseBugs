{"buggy_code": ["/**\n * =======================================================================\n * = Description: openCRX/Core\n * = Name: build.gradle.kts\n * = Copyright:   (c) 2020-2021 CRIXP AG\n * =======================================================================\n * This software is published under the BSD license\n * as listed below.\n * \n * Copyright (c) 2020-2021, CRIXP Corp., Switzerland\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions \n * are met:\n * \n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n * \n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n * \n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * \n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n * \n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\n\nplugins {\n\tjava\n}\n\nallprojects {\n    group = \"org.opencrx\"\n    version = \"5.2-20210709\"\n}\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n}\n", "<%@page contentType=\"text/html;charset=UTF-8\" language=\"java\" pageEncoding=\"UTF-8\" %>\n<%@taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %>\n<%\n/*\n * ====================================================================\n * Project:     openCRX/Core, http://www.opencrx.org/\n * Description: PasswordResetConfirm\n * Owner:       CRIXP Corp., Switzerland, http://www.crixp.com\n * ====================================================================\n *\n * This software is published under the BSD license\n * as listed below.\n *\n * Copyright (c) 2015 CRIXP Corp., Switzerland\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n *\n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * ------------------\n *\n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n *\n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\n%><%@ page session=\"true\" import=\"\njava.util.*,\njava.net.*,\njava.util.Enumeration,\njava.io.PrintWriter,\norg.w3c.spi2.*,\norg.openmdx.portal.servlet.*,\norg.openmdx.base.naming.*\n\"%>\n<%\n\tBoolean success = null;\n\tString resetToken = request.getParameter(\"t\");\n\tString providerName = request.getParameter(\"p\");\n\tString segmentName = request.getParameter(\"s\");\n\tString id = request.getParameter(\"id\");\n\tString password1 = request.getParameter(\"password1\");\n\tString password2 = request.getParameter(\"password2\");\n\tif(\n\t\tresetToken != null && !resetToken.isEmpty() &&\n\t\tproviderName != null && !providerName.isEmpty() &&\n\t\tsegmentName != null && !segmentName.isEmpty() &&\n\t\tid != null && !id.isEmpty() &&\n\t\tpassword1 != null && !password1.isEmpty() &&\n\t\tpassword2 != null && !password2.isEmpty()\n\t) {\n\t\tjavax.jdo.PersistenceManagerFactory pmf = org.opencrx.kernel.utils.Utils.getPersistenceManagerFactory();\n\t\tjavax.jdo.PersistenceManager pm = pmf.getPersistenceManager(id, null);\n\t\ttry {\n\t\t\torg.opencrx.kernel.home1.jmi1.UserHome userHome = (org.opencrx.kernel.home1.jmi1.UserHome)pm.getObjectById(\n\t\t\t\tnew Path(\"xri://@openmdx*org.opencrx.kernel.home1\").getDescendant(\"provider\", providerName, \"segment\", segmentName, \"userHome\", id)\n\t\t\t);\n\t\t\tpm.currentTransaction().begin();\n\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordParams params = Structures.create(\n\t\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordParams.class, \n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.oldPassword, org.opencrx.kernel.backend.UserHomes.RESET_PASSWORD_PREFIX + resetToken),\n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.newPassword, password1),\n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.newPasswordVerification, password2)           \t\n\t        );\n\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordResult result = userHome.changePassword(params);\n\t\t\tpm.currentTransaction().commit();\n\t\t\tsuccess = result.getStatus() == 0;\n\t\t} catch(Exception e) {\n\t\t\ttry {\n\t\t\t\tpm.currentTransaction().rollback();\n\t\t\t} catch(Exception ignore) {}\n\t\t\tsuccess = false;\n\t\t}\n\t}\n%>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n\t<title>Confirm Password Reset</title>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<meta http-equiv=\"Expires\" content=\"0\">\n\t<meta name=\"viewport\" content=\"width=320; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\n\t<meta name=\"apple-touch-fullscreen\" content=\"YES\" />\n\n\t<!-- Styles -->\n\t<link rel=\"stylesheet\" href=\"js/bootstrap/css/bootstrap.min.css\">\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/ssf.css\" >\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/n2default.css\" >\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/colors.css\">\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/calendar-small.css\">\n\t<link rel='shortcut icon' href='<%= request.getContextPath() %>/images/favicon.ico' />\n\n\t<!-- Libraries -->\n\t<script language=\"javascript\" type=\"text/javascript\" src=\"<%= request.getContextPath() %>/js/prototype.js\"></script>\n\n</head>\n<body style=\"border:0px solid white;\">\n  <div id=\"header\" style=\"height:90px;\">\n    <div id=\"logoTable\">\n      <table dir=\"ltr\" id=\"headerlayout\" style=\"position:relative;\">\n        <tr id=\"headRow\">\n          <td id=\"head\" colspan=\"2\">\n            <table id=\"info\">\n              <tr>\n                <td id=\"headerCellLeft\"><img id=\"logoLeft\" style=\"cursor:default;\" src=\"<%=request.getContextPath()%>/images/logoLeft.gif\" alt=\"openCRX - limitless relationship management\" title=\"openCRX - limitless relationship management\" /></td>\n                <td id=\"headerCellMiddle\" style=\"background-image:url('./images/logoMiddle.gif');background-repeat:repeat-x;width:100%;\"></td>\n                <td id=\"headerCellRight\"><img id=\"logoRight\" src=\"<%=request.getContextPath()%>/images/logoRight.gif\" alt=\"\" title=\"\" /></td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"container\">\n  \t<div class=\"row\">\n  \t\t<div class=\"col-sm-12\">\n<%\n\t\t\tif(Boolean.TRUE.equals(success)) {\n%>\n\t\t\t\t<h2>Password successfully changed for <%= id %>@<%= providerName + \"/\" + segmentName %></h2>\n<%\n\t\t\t} else if(Boolean.FALSE.equals(success)) {\n%>\n\t\t\t\t<h2>Unable to reset password</h2>\n<%\n\t\t\t} else if(\n\t\t\t\tresetToken != null && !resetToken.isEmpty() &&\n\t\t\t\tproviderName != null && !providerName.isEmpty() &&\n\t\t\t\tsegmentName != null && !segmentName.isEmpty() &&\n\t\t\t\tid != null && !id.isEmpty()\n\t\t\t) {\n%>\n\t\t\t    <form role=\"form\" class=\"form-signin\" style=\"max-width:400px;margin:0 auto;\" method=\"POST\" action=\"PasswordResetConfirm.jsp\" accept-charset=\"UTF-8\">\n      \t\t\t\t<h2 class=\"form-signin-heading\">Reset password for <%= id %>@<%= providerName + \"/\" + segmentName %></h2>\t\t\t\t\t\n\t\t\t    \t<input type=\"hidden\" name=\"t\" value=\"<%= resetToken %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"p\" value=\"<%= providerName %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"s\" value=\"<%= segmentName %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"id\" value=\"<%= id %>\" />\n\t\t\t\t\t<input type=\"password\" name=\"password1\" autofocus=\"\" placeholder=\"Password\" class=\"form-control\" />\n\t\t\t\t\t<input type=\"password\" name=\"password2\" placeholder=\"Password (verify)\" class=\"form-control\" />\n\t\t\t\t\t<br />\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\">OK</button>\n\t\t\t\t\t<br />\n      \t\t\t\t<%@ include file=\"password-reset-confirm-note.html\" %>\t\t\t\t\t\n\t\t\t    </form>\n<%\t\t\t\t\n\t\t\t} else {\n%>\n\t\t\t\t<h2>Invalid password confirm request</h2>\n<%\n\t\t\t}\n%>\n\t\t</div>\n\t</div>\n  \t<div class=\"row\">\n  \t\t<div class=\"col-sm-12\">\n  \t\t\t<a href=\"./Login.jsp\">Go to login page</a>\n  \t\t</div>\n  \t</div>\t\n  </div>\n</body>\n</html>\n", "/*\n * ====================================================================\n * Project:     openCRX/Core, http://www.opencrx.org/\n * Description: CopyDb tool\n * Owner:       CRIXP AG, Switzerland, http://www.crixp.com\n * ====================================================================\n *\n * This software is published under the BSD license\n * as listed below.\n * \n * Copyright (c) 2004-2020, CRIXP Corp., Switzerland\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions \n * are met:\n * \n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n * \n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n * \n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * \n * ------------------\n * \n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n * \n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\npackage org.opencrx.kernel.tools;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.io.Reader;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Set;\n\nimport org.opencrx.kernel.utils.DbSchemaUtils;\nimport org.opencrx.kernel.utils.Utils;\nimport org.openmdx.base.dataprovider.layer.persistence.jdbc.Database_2;\nimport org.openmdx.base.exception.ServiceException;\nimport org.openmdx.kernel.exception.BasicException;\n\n/**\n * CopyDb\n *\n */\npublic class CopyDb {\n\n\t/**\n\t * Map CLOB to String.\n\t * \n\t * @param clob\n\t * @return\n\t * @throws IOException\n\t * @throws SQLException\n\t */\n\tprivate static String getStringFromClob(\n\t\tjava.sql.Clob clob\n\t) throws IOException, SQLException {\n\t\tReader reader = clob.getCharacterStream();\n\t\tStringBuilder s = new StringBuilder();\n\t\tint c;\n\t\twhile ((c = reader.read()) != -1) {\n\t\t\ts.append((char) c);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t * Map BLOB to byte[].\n\t * \n\t * @param blob\n\t * @return\n\t * @throws IOException\n\t * @throws SQLException\n\t */\n\tprivate static byte[] getBytesFromBlob(\n\t\tjava.sql.Blob blob\n\t) throws IOException, SQLException {\n\t\tInputStream is = blob.getBinaryStream();\n\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\tint b;\n\t\twhile ((b = is.read()) != -1) {\n\t\t\tos.write(b);\n\t\t}\n\t\tos.close();\n\t\treturn os.toByteArray();\n\t}\n\n\t/**\n\t * Db-specific column name mapping.\n\t * \n\t * @param conn\n\t * @param dbObject\n\t * @param columnName\n\t * @return\n\t * @throws SQLException\n\t */\n\tprivate static String mapColumnName(\n\t\tConnection conn, \n\t\tString dbObject, \n\t\tString columnName\n\t) throws SQLException {\n\t\tString databaseProductName = conn.getMetaData().getDatabaseProductName();\n\t\tif(\"HSQL Database Engine\".equals(databaseProductName)) {\n\t\t\tString mappedColumnName = columnName.toUpperCase();\n\t\t\tif(\"POSITION\".equals(mappedColumnName) || mappedColumnName.indexOf(\"$\") > 0) {\n\t\t\t\treturn \"\\\"\" + mappedColumnName + \"\\\"\";\n\t\t\t} else {\n\t\t\t\treturn mappedColumnName;\n\t\t\t}\n\t\t} else if(\"PostgreSQL\".equals(databaseProductName)) {\n\t\t\tString mappedColumnName = columnName.toLowerCase();\n\t\t\tif(\"offset\".equals(mappedColumnName) || \"end\".equals(mappedColumnName) || mappedColumnName.indexOf(\"-\") > 0) {\n\t\t\t\treturn \"\\\"\" + mappedColumnName + \"\\\"\";\n\t\t\t} else {\n\t\t\t\treturn mappedColumnName;\n\t\t\t}\n\t\t} else {\n\t\t\treturn columnName.toUpperCase();\n\t\t}\n\t}\n\n\t/**\n\t * DB-specific column value mapping.\n\t * \n\t * @param conn\n\t * @param dbObject\n\t * @param columnName\n\t * @param columnValue\n\t * @param valuePatterns\n\t * @param valueReplacements\n\t * @return\n\t * @throws ServiceException\n\t * @throws SQLException\n\t */\n\tprivate static Object mapColumnValue(\n\t\tConnection conn, \n\t\tString dbObject, \n\t\tString columnName, \n\t\tObject columnValue, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements\n\t) throws ServiceException, SQLException {\n\t\tString databaseProductName = conn.getMetaData().getDatabaseProductName();\n\t\tif(BOOLEAN_COLUMNS.contains(columnName.toUpperCase())) {\n\t\t\tif(\"PostgreSQL\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"MySQL\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"Microsoft SQL Server\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(databaseProductName.startsWith(\"DB2/\")) {\n\t\t\t\treturn Boolean.valueOf(\"Y\".equals(columnValue));\n\t\t\t} else if(\"HSQL Database Engine\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"Oracle\".equals(databaseProductName)) {\n\t\t\t\treturn Boolean.valueOf(((Number) columnValue).intValue() == 1);\n\t\t\t} else {\n\t\t\t\tthrow new ServiceException(BasicException.Code.DEFAULT_DOMAIN, BasicException.Code.NOT_SUPPORTED, \"Database not supported\", new BasicException.Parameter(\"database product name\",\n\t\t\t\t    databaseProductName));\n\t\t\t}\n\t\t} else {\n\t\t\tif(columnValue instanceof String) {\n\t\t\t\tString targetValue = (String)columnValue;\n\t\t\t\tfor(int i = 0; i < valuePatterns.size(); i++) {\n\t\t\t\t\tString valuePattern = valuePatterns.get(i);\n\t\t\t\t\tString valueReplacment = valueReplacements.get(i);\n\t\t\t\t\tif(valuePattern != null & valuePattern.length() > 0) {\n\t\t\t\t\t\ttargetValue = targetValue.replaceAll(valuePattern, valueReplacment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn targetValue;\n\t\t\t} else {\n\t\t\t\treturn columnValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Copy dbObject from source to target database.\n\t * \n\t * @param dbObject\n\t * @param useSuffix\n\t * @param connSource\n\t * @param connTarget\n\t * @param providerNameSource\n\t * @param providerNameTarget\n\t * @param out\n\t * @throws SQLException\n\t */\n\tpublic static void copyDbObject(\n\t\tString dbObject, \n\t\tboolean useSuffix, \n\t\tConnection connSource, \n\t\tConnection connTarget, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t\tPrintStream out\n\t) throws SQLException {\n\t\tString currentStatement = null;\n\t\tDatabase_2 db = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] plugins = Utils.getDatabasePlugIns();\n\t\t\tdb = plugins[0];\n\t\t} catch (Exception e) {\n\t\t\tout.println(\"Can not activate database plugin: \" + e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t// Delete all rows from target\n\t\t\tPreparedStatement s = connTarget.prepareStatement(currentStatement = \"DELETE FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.executeUpdate();\n\t\t\ts.close();\n\t\t\t// Read all rows from source\n\t\t\ts = connSource.prepareStatement(currentStatement = \"SELECT * FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\tResultSet rs = s.executeQuery();\n\t\t\tif(rs != null) {\n\t\t\t\tResultSetMetaData rsm = rs.getMetaData();\n\t\t\t\tFastResultSet frs = new FastResultSet(rs);\n\t\t\t\tint nRows = 0;\n\t\t\t\twhile (frs.next()) {\n\t\t\t\t\t// Read row from source and prepare INSERT statement\n\t\t\t\t\tString statement = \"INSERT INTO \" + dbObject + (useSuffix ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> statementParameters = new ArrayList<Object>();\n\t\t\t\t\tList<String> processTargetColumnNames = new ArrayList<String>();\n\t\t\t\t\tfor (int j = 0; j < rsm.getColumnCount(); j++) {\n\t\t\t\t\t\tString columnName = rsm.getColumnName(j + 1);\n\t\t\t\t\t\tif(frs.getObject(columnName) != null) {\n\t\t\t\t\t\t\tString mappedColumnName = CopyDb.mapColumnName(connTarget, dbObject, columnName);\n\t\t\t\t\t\t\tif(mappedColumnName != null) {\n\t\t\t\t\t\t\t\tstatement += (statementParameters.size() == 0 ? \" (\" : \", \") + mappedColumnName;\n\t\t\t\t\t\t\t\tprocessTargetColumnNames.add(mappedColumnName);\n\t\t\t\t\t\t\t\tif(frs.getObject(columnName) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getStringFromClob((java.sql.Clob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Clob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(frs.getObject(columnName) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getBytesFromBlob((java.sql.Blob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Blob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstatementParameters.add(\n\t\t\t\t\t\t\t\t\t\tCopyDb.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tconnSource,\n\t\t\t\t\t\t\t\t\t\t\tdbObject,\n\t\t\t\t\t\t\t\t\t\t\tcolumnName,\n\t\t\t\t\t\t\t\t\t\t\tfrs.getObject(columnName),\n\t\t\t\t\t\t\t\t\t\t\tvaluePatterns,\n\t\t\t\t\t\t\t\t\t\t\tvalueReplacements\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \") VALUES (\";\n\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\tstatement += j == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \")\";\n\t\t\t\t\t// Add row to target\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement t = connTarget.prepareStatement(currentStatement = statement);\n\t\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\t\tObject parameter = statementParameters.get(j);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(parameter instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tt.setTimestamp(j + 1, (java.sql.Timestamp) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tt.setDate(j + 1, (java.sql.Date) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof Double) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Double)parameter));\n\t\t\t\t\t\t\t} else if(parameter instanceof Float) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Float)parameter));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdb.setPreparedStatementValue(connTarget, t, j + 1, parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt.executeUpdate();\n\t\t\t\t\t\tt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tnew ServiceException(e).log();\n\t\t\t\t\t\tout.println(\"Insert failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t}\n\t\t\t\t\tnRows++;\n\t\t\t\t\tif(nRows % 1000 == 0) {\n\t\t\t\t\t\tout.println(nRows + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t} else {\n\t\t\t\tout.println(\"Did not copy table (result set is null). Statement: \" + currentStatement);\n\t\t\t}\n\t\t\ts.close();\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t\tout.println(\"Can not copy table (see log for more info). Statement: \" + currentStatement);\n\t\t}\n\t}\n\n\t/**\n\t * Copy all tables from source to target database.\n\t * \n\t * @param connSource\n\t * @param connTarget\n\t * @param dbObjects\n\t * @param startFromDbObject\n\t * @param endWithDbObject\n\t * @param providerNameSource\n\t * @param providerNameTarget\n\t * @param out\n\t */\n\tprivate static void copyNamespace(\n\t    Connection connSource,\n\t    Connection connTarget,\n\t    List<String> dbObjects,\n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t    PrintStream out\n\t) {\n\t\tString currentStatement = null;\n\t\ttry {\n\t\t\tout.println(\"Processing tables:\");\n\t\t\tint ii = 0;\n\t\t\tfor(String dbObject: dbObjects) {\n\t\t\t\tout.println(ii + \": \" + dbObject);\n\t\t\t\tii++;\n\t\t\t}\n\t\t\tSet<String> processedDbObjects = new HashSet<String>();\n\t\t\tfor (String dbObject: dbObjects) {\n\t\t\t\tif((dbObject != null) && !dbObject.isEmpty() && !processedDbObjects.contains(dbObject)) {\n\t\t\t\t\tout.println(\"Copying table: \" + dbObject);\n\t\t\t\t\tCopyDb.copyDbObject(\n\t\t\t\t\t\tdbObject, \n\t\t\t\t\t\tfalse, \n\t\t\t\t\t\tconnSource, \n\t\t\t\t\t\tconnTarget, \n\t\t\t\t\t\tvaluePatterns, \n\t\t\t\t\t\tvalueReplacements, \n\t\t\t\t\t\tout\n\t\t\t\t\t);\n\t\t\t\t\tout.println(\"Copying table: \" + dbObject + \"_\");\n\t\t\t\t\tCopyDb.copyDbObject(\n\t\t\t\t\t\tdbObject, \n\t\t\t\t\t\ttrue, \n\t\t\t\t\t\tconnSource, \n\t\t\t\t\t\tconnTarget, \n\t\t\t\t\t\tvaluePatterns, \n\t\t\t\t\t\tvalueReplacements, \n\t\t\t\t\t\tout\n\t\t\t\t\t);\n\t\t\t\t\tprocessedDbObjects.add(dbObject);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tServiceException e0 = new ServiceException(e);\n\t\t\te0.log();\n\t\t\tout.println(\"statement: \" + currentStatement + \" (message=\" + e0.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * CopyDb utility.\n\t * \n\t * @param args\n\t */\n\tpublic static void main(\n\t\tString[] args\n\t) {\n\t\ttry {\n\t\t\tProperties env = System.getProperties();\n\t\t\tString includeDbObjects = env.getProperty(\"includeDbObjects\");\n\t\t\tString excludeDbObjects = env.getProperty(\"excludeDbObjects\");\n\t\t\tString valuePatterns = env.getProperty(\"valuePatterns\");\n\t\t\tString valueReplacements = env.getProperty(\"valueReplacements\");\n\t\t\tcopyDb(\n\t\t\t\tenv.getProperty(\"jdbcDriverSource\"), \n\t\t\t\tenv.getProperty(\"usernameSource\"), \n\t\t\t\tenv.getProperty(\"passwordSource\"), \n\t\t\t\tenv.getProperty(\"jdbcUrlSource\"), \n\t\t\t\tenv.getProperty(\"jdbcDriverTarget\"),\n\t\t\t    env.getProperty(\"usernameTarget\"), \n\t\t\t    env.getProperty(\"passwordTarget\"), \n\t\t\t    env.getProperty(\"jdbcUrlTarget\"), \n\t\t\t    includeDbObjects == null ? Collections.<String>emptyList() : Arrays.asList(includeDbObjects.split(\",\")),\n\t\t\t\texcludeDbObjects == null ? Collections.<String>emptyList() : Arrays.asList(excludeDbObjects.split(\",\")),\n\t\t\t\tvaluePatterns == null ? Collections.<String>emptyList() : Arrays.asList(valuePatterns.split(\",\")),\n\t\t\t\tvalueReplacements == null ? Collections.<String>emptyList() : Arrays.asList(valueReplacements.split(\",\")),\n\t\t\t    System.out\n\t\t\t);\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t}\n\t}\n\n\t/**\n\t * Filter list of dbObjects.\n\t * \n\t * @param dbObjects\n\t * @param includeDbObjects\n\t * @param excludeDbObjects\n\t * @return\n\t * @throws ServiceException\n\t */\n\tprivate static List<String> filterDbObjects(\n\t\tList<String> dbObjects,\n\t\tList<String> includeDbObjects,\n\t\tList<String> excludeDbObjects\n\t) throws ServiceException {\n\t\tList<String> filteredDbObjects = new ArrayList<String>();\n\t\tfor(String dbObject: dbObjects) {\n\t\t\tif(dbObject != null) {\n\t\t\t\tdbObject = dbObject.trim();\n\t\t\t\tif(!dbObject.isEmpty()) {\n\t\t\t\t\tfor(String includeDbObject: includeDbObjects) {\n\t\t\t\t\t\tif(dbObject.matches(includeDbObject)) {\n\t\t\t\t\t\t\tfilteredDbObjects.add(dbObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(String dbObject: dbObjects) {\n\t\t\tif(dbObject != null) {\n\t\t\t\tdbObject = dbObject.trim();\n\t\t\t\tfor(String excludeDbObject: excludeDbObjects) {\n\t\t\t\t\tif(dbObject.matches(excludeDbObject)) {\n\t\t\t\t\t\tfilteredDbObjects.remove(dbObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn filteredDbObjects;\n\t}\n\n\t/**\n\t * CopyDb utility. \n\t * \n\t * @param jdbcDriverSource\n\t * @param usernameSource\n\t * @param passwordSource\n\t * @param jdbcUrlSource\n\t * @param jdbcDriverTarget\n\t * @param usernameTarget\n\t * @param passwordTarget\n\t * @param jdbcUrlTarget\n\t * @param includeDbObjects\n\t * @param excludeDbObjects\n\t * @param valuePatterns\n\t * @param valueReplacements\n\t * @param out\n\t * @throws ServiceException\n\t */\n\tpublic static void copyDb(\n\t    String jdbcDriverSource,\n\t    String usernameSource,\n\t    String passwordSource,\n\t    String jdbcUrlSource,\n\t    String jdbcDriverTarget,\n\t    String usernameTarget,\n\t    String passwordTarget,\n\t    String jdbcUrlTarget,\n\t    List<String> includeDbObjects,\n\t    List<String> excludeDbObjects,\n\t    List<String> valuePatterns,\n\t    List<String> valueReplacements,\n\t    PrintStream out\n\t) throws ServiceException {\n\t\t{\n\t\t\tDBOBJECTS.clear();\n\t\t\tList<String> tableNames = new ArrayList<String>();\n\t\t\ttry {\n\t\t\t\ttableNames = DbSchemaUtils.getTableNames();\n\t\t\t} catch (Exception e) {\n\t\t\t\tnew ServiceException(e).log();\n\t\t\t}\n\t\t\tfor(String tableName : tableNames) {\n\t\t\t\tif(\n\t\t\t\t\ttableName.indexOf(\"_\") > 0 &&\n\t\t\t\t\ttableName.indexOf(\"_TOBJ_\") < 0 &&\n\t\t\t\t\ttableName.indexOf(\"_JOIN_\") < 0 &&\n\t\t\t\t\t!tableName.endsWith(\"_\")\n\t\t\t\t) {\n\t\t\t\t\tDBOBJECTS.add(tableName);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\ttry {\n\t\t\t// Source connection\n\t\t\tClass.forName(jdbcDriverSource);\n\t\t\tProperties props = new Properties();\n\t\t\tprops.put(\"user\", usernameSource);\n\t\t\tprops.put(\"password\", passwordSource);\n\t\t\tConnection connSource = DriverManager.getConnection(jdbcUrlSource, props);\n\t\t\tconnSource.setAutoCommit(true);\n\t\t\t// Target connection\n\t\t\tClass.forName(jdbcDriverTarget);\n\t\t\tprops = new Properties();\n\t\t\tprops.put(\"user\", usernameTarget);\n\t\t\tprops.put(\"password\", passwordTarget);\n\t\t\tConnection connTarget = DriverManager.getConnection(jdbcUrlTarget, props);\n\t\t\tconnTarget.setAutoCommit(true);\n\t\t\tCopyDb.copyNamespace(\n\t\t\t\tconnSource, \n\t\t\t\tconnTarget,\n\t\t\t\tfilterDbObjects(\n\t\t\t\t\tDBOBJECTS, \n\t\t\t\t\tincludeDbObjects, \n\t\t\t\t\texcludeDbObjects\n\t\t\t\t),\n\t\t\t    valuePatterns, \n\t\t\t    valueReplacements, \n\t\t\t    out\n\t\t\t);\n\t\t} catch (Exception e) {\n\t\t\tthrow new ServiceException(e);\n\t\t}\n\t\tout.println();\n\t\tout.println(\"!!! DONE !!!\");\n\t}\n\n\t// -----------------------------------------------------------------------\n\t// Members\n\t// -----------------------------------------------------------------------\n\tstatic final List<String> DBOBJECTS = new ArrayList<String>();\n\n\tstatic final Set<String> BOOLEAN_COLUMNS = new HashSet<String>(Arrays.asList(\n\t    \"DISABLED\", \"USER_BOOLEAN0\", \"USER_BOOLEAN1\", \"USER_BOOLEAN2\", \"USER_BOOLEAN3\", \"USER_BOOLEAN4\", \"DO_NOT_BULK_POSTAL_MAIL\", \"DO_NOT_E_MAIL\", \"DO_NOT_FAX\", \"DO_NOT_PHONE\",\n\t    \"DO_NOT_POSTAL_MAIL\", \"EXT_BOOLEAN0\", \"EXT_BOOLEAN1\", \"EXT_BOOLEAN2\", \"EXT_BOOLEAN3\", \"EXT_BOOLEAN4\", \"EXT_BOOLEAN5\", \"EXT_BOOLEAN6\", \"EXT_BOOLEAN7\", \"EXT_BOOLEAN8\", \"EXT_BOOLEAN9\",\n\t    \"DISABLED\", \"DISCOUNT_IS_PERCENTAGE\", \"USER_BOOLEAN4\", \"IS_ALL_DAY_EVENT\", \"DELIVERY_RECEIPT_REQUESTED\", \"READ_RECEIPT_REQUESTED\", \"IS_MAIN\", \"RESET_TO_NULL\", \"IS_MAIN\", \"AUTOMATIC_PARSING\",\n\t    \"IS_CLOSED\", \"IS_FINAL\", \"CREDIT_FIRST\", \"IS_DEFAULT\", \"IS_WORKING_DAY\", \"IS_LOCKED\", \"IS_GIFT\", \"IS_TEMPLATE\", \"DISCOUNT_IS_PERCENTAGE\", \"IS_GIFT\", \"SALES_COMMISSION_IS_PERCENTAGE\",\n\t    \"IS_CREDIT_ON_HOLD\", \"ALLOW_POSITION_AUTO_CREATE\", \"IS_DEFAULT\", \"IS_LOCKED\", \"IS_TEMPLATE\", \"IS_LOCKED\", \"HOLDER_QUALIFIES_POSITION\", \"IS_DRAFT\", \"ALLOW_CREDIT_BOOKINGS\",\n\t    \"ALLOW_DEBIT_BOOKINGS\", \"IS_DEFAULT\", \"IS_ACTIVE\", \"BOOLEAN_PARAM\", \"IS_CHANGEABLE\", \"IS_QUERY\", \"IS_DERIVED\", \"IS_ABSTRACT\", \"IS_SINGLETON\", \"IS_CLUSTERED\", \"IS_NAVIGABLE\",\n\t    \"WEIGHT_IS_PERCENTAGE\", \"IS_FINAL\", \"DISCOUNT_IS_PERCENTAGE\", \"IS_DEFAULT\", \"ALLOW_MODIFICATION\", \"ALLOW_REMOVAL\", \"DISCOUNT_IS_PERCENTAGE\", \"OVERRIDE_PRICE\", \"IS_STOCK_ITEM\",\n\t    \"DISCOUNT_IS_PERCENTAGE\", \"IS_DEFAULT\", \"BOOLEAN_VALUE\", \"IS_ACTIVE\", \"NEW_BOOLEAN\", \"OLD_BOOLEAN\", \"SELECTOR\", \"IS_SCHEDULE_BASE_UOM\", \"STORE_SETTINGS_ON_LOGOFF\", \"IS_SYNCHRONOUS\", \"FAILED\",\n\t    \"IS_BILLABLE\", \"IS_REIMBURSABLE\", \"LOCKED\", \"ALLOW_ADD_DELETE\", \"ALLOW_CHANGE\"\n\t));\n\n}\n"], "fixing_code": ["/**\n * =======================================================================\n * = Description: openCRX/Core\n * = Name: build.gradle.kts\n * = Copyright:   (c) 2020-2021 CRIXP AG\n * =======================================================================\n * This software is published under the BSD license\n * as listed below.\n * \n * Copyright (c) 2020-2021, CRIXP Corp., Switzerland\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions \n * are met:\n * \n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n * \n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n * \n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * \n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n * \n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\n\nplugins {\n\tjava\n}\n\nallprojects {\n    group = \"org.opencrx\"\n    version = \"5.2-20210727\"\n}\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_11\n    targetCompatibility = JavaVersion.VERSION_11\n}\n", "<%@page contentType=\"text/html;charset=UTF-8\" language=\"java\" pageEncoding=\"UTF-8\" %>\n<%@taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %>\n<%\n/*\n * ====================================================================\n * Project:     openCRX/Core, http://www.opencrx.org/\n * Description: PasswordResetConfirm\n * Owner:       CRIXP Corp., Switzerland, http://www.crixp.com\n * ====================================================================\n *\n * This software is published under the BSD license\n * as listed below.\n *\n * Copyright (c) 2015-2021 CRIXP Corp., Switzerland\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n *\n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n *\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * ------------------\n *\n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n *\n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\n%><%@ page session=\"true\" import=\"\njava.util.*,\njava.net.*,\njava.util.Enumeration,\njava.io.PrintWriter,\norg.w3c.spi2.*,\norg.openmdx.portal.servlet.*,\norg.openmdx.kernel.log.*,\norg.openmdx.base.naming.*\n\"%>\n<%\n\tBoolean success = null;\n\tString resetToken = request.getParameter(\"t\");\n\tString providerName = request.getParameter(\"p\");\n\tString segmentName = request.getParameter(\"s\");\n\tString id = request.getParameter(\"id\");\n\tString password1 = request.getParameter(\"password1\");\n\tString password2 = request.getParameter(\"password2\");\n\t// Get user home with supplied parameters\n\torg.opencrx.kernel.home1.jmi1.UserHome userHome = null;\n\ttry {\n\t\tjavax.jdo.PersistenceManagerFactory pmf = org.opencrx.kernel.utils.Utils.getPersistenceManagerFactory();\n\t\tjavax.jdo.PersistenceManager pm = pmf.getPersistenceManager(id, null);\n\t\tPath userHomePath = new Path(\"xri://@openmdx*org.opencrx.kernel.home1\").getDescendant(\"provider\", providerName, \"segment\", segmentName, \"userHome\", id);\n\t\tuserHome = (org.opencrx.kernel.home1.jmi1.UserHome)pm.getObjectById(userHomePath);\n\t} catch(Exception e) {\n\t\t// Silently catch exception and log as warning\n\t\tSysLog.warning(String.format(\"Invalid password reset request. p=%s, s=%s, id=%s. Rejecting.\", providerName, segmentName, id));\n\t}\n\tif(\n\t\tuserHome != null &&\n\t\tresetToken != null && !resetToken.isEmpty() &&\n\t\tpassword1 != null && !password1.isEmpty() &&\n\t\tpassword2 != null && !password2.isEmpty()\n\t) {\n\t\tjavax.jdo.PersistenceManager pm = javax.jdo.JDOHelper.getPersistenceManager(userHome);\n\t\ttry {\n\t\t\tpm.currentTransaction().begin();\n\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordParams params = Structures.create(\n\t\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordParams.class, \n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.oldPassword, org.opencrx.kernel.backend.UserHomes.RESET_PASSWORD_PREFIX + resetToken),\n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.newPassword, password1),\n\t           \tDatatypes.member(org.opencrx.kernel.home1.jmi1.ChangePasswordParams.Member.newPasswordVerification, password2)           \t\n\t        );\n\t\t\torg.opencrx.kernel.home1.jmi1.ChangePasswordResult result = userHome.changePassword(params);\n\t\t\tpm.currentTransaction().commit();\n\t\t\tsuccess = result.getStatus() == 0;\n\t\t} catch(Exception e) {\n\t\t\ttry {\n\t\t\t\tpm.currentTransaction().rollback();\n\t\t\t} catch(Exception ignore) {}\n\t\t\tsuccess = false;\n\t\t}\n\t}\n%>\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n\t<title>Confirm Password Reset</title>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\t<meta http-equiv=\"Expires\" content=\"0\">\n\t<meta name=\"viewport\" content=\"width=320; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\">\n\t<meta name=\"apple-touch-fullscreen\" content=\"YES\" />\n\n\t<!-- Styles -->\n\t<link rel=\"stylesheet\" href=\"js/bootstrap/css/bootstrap.min.css\">\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/ssf.css\" >\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/n2default.css\" >\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/colors.css\">\n\t<link rel=\"stylesheet\" href=\"<%= request.getContextPath() %>/_style/calendar-small.css\">\n\t<link rel='shortcut icon' href='<%= request.getContextPath() %>/images/favicon.ico' />\n\n\t<!-- Libraries -->\n\t<script language=\"javascript\" type=\"text/javascript\" src=\"<%= request.getContextPath() %>/js/prototype.js\"></script>\n\n</head>\n<body style=\"border:0px solid white;\">\n  <div id=\"header\" style=\"height:90px;\">\n    <div id=\"logoTable\">\n      <table dir=\"ltr\" id=\"headerlayout\" style=\"position:relative;\">\n        <tr id=\"headRow\">\n          <td id=\"head\" colspan=\"2\">\n            <table id=\"info\">\n              <tr>\n                <td id=\"headerCellLeft\"><img id=\"logoLeft\" style=\"cursor:default;\" src=\"<%=request.getContextPath()%>/images/logoLeft.gif\" alt=\"openCRX - limitless relationship management\" title=\"openCRX - limitless relationship management\" /></td>\n                <td id=\"headerCellMiddle\" style=\"background-image:url('./images/logoMiddle.gif');background-repeat:repeat-x;width:100%;\"></td>\n                <td id=\"headerCellRight\"><img id=\"logoRight\" src=\"<%=request.getContextPath()%>/images/logoRight.gif\" alt=\"\" title=\"\" /></td>\n              </tr>\n            </table>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <div class=\"container\">\n  \t<div class=\"row\">\n  \t\t<div class=\"col-sm-12\">\n<%\n\t\t\tif(Boolean.TRUE.equals(success)) {\n%>\n\t\t\t\t<h2>Password successfully changed for <%= id %>@<%= providerName + \"/\" + segmentName %></h2>\n<%\n\t\t\t} else if(Boolean.FALSE.equals(success)) {\n%>\n\t\t\t\t<h2>Unable to reset password</h2>\n<%\n\t\t\t} else if(\n\t\t\t\tuserHome != null &&\n\t\t\t\tresetToken != null && !resetToken.isEmpty()\n\t\t\t) {\n%>\n\t\t\t    <form role=\"form\" class=\"form-signin\" style=\"max-width:400px;margin:0 auto;\" method=\"POST\" action=\"PasswordResetConfirm.jsp\" accept-charset=\"UTF-8\">\n      \t\t\t\t<h2 class=\"form-signin-heading\">Reset password for <%= id %>@<%= providerName + \"/\" + segmentName %></h2>\t\t\t\t\t\n\t\t\t    \t<input type=\"hidden\" name=\"t\" value=\"<%= resetToken %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"p\" value=\"<%= providerName %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"s\" value=\"<%= segmentName %>\" />\n\t\t\t    \t<input type=\"hidden\" name=\"id\" value=\"<%= id %>\" />\n\t\t\t\t\t<input type=\"password\" name=\"password1\" autofocus=\"\" placeholder=\"Password\" class=\"form-control\" />\n\t\t\t\t\t<input type=\"password\" name=\"password2\" placeholder=\"Password (verify)\" class=\"form-control\" />\n\t\t\t\t\t<br />\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\">OK</button>\n\t\t\t\t\t<br />\n      \t\t\t\t<%@ include file=\"password-reset-confirm-note.html\" %>\t\t\t\t\t\n\t\t\t    </form>\n<%\t\t\t\t\n\t\t\t} else {\n%>\n\t\t\t\t<h2>Invalid password confirm request</h2>\n<%\n\t\t\t}\n%>\n\t\t</div>\n\t</div>\n  \t<div class=\"row\">\n  \t\t<div class=\"col-sm-12\">\n  \t\t\t<a href=\"./Login.jsp\">Go to login page</a>\n  \t\t</div>\n  \t</div>\t\n  </div>\n</body>\n</html>\n", "/*\n * ====================================================================\n * Project:     openCRX/Core, http://www.opencrx.org/\n * Description: CopyDb tool\n * Owner:       CRIXP AG, Switzerland, http://www.crixp.com\n * ====================================================================\n *\n * This software is published under the BSD license\n * as listed below.\n * \n * Copyright (c) 2004-2020, CRIXP Corp., Switzerland\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without \n * modification, are permitted provided that the following conditions \n * are met:\n * \n * * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in\n * the documentation and/or other materials provided with the\n * distribution.\n * \n * * Neither the name of CRIXP Corp. nor the names of the contributors\n * to openCRX may be used to endorse or promote products derived\n * from this software without specific prior written permission\n * \n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS\n * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * \n * ------------------\n * \n * This product includes software developed by the Apache Software\n * Foundation (http://www.apache.org/).\n * \n * This product includes software developed by contributors to\n * openMDX (http://www.openmdx.org/)\n */\npackage org.opencrx.kernel.tools;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.io.Reader;\nimport java.lang.reflect.Method;\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Set;\n\nimport org.opencrx.kernel.utils.DbSchemaUtils;\nimport org.opencrx.kernel.utils.Utils;\nimport org.openmdx.base.dataprovider.layer.persistence.jdbc.Database_2;\nimport org.openmdx.base.exception.ServiceException;\nimport org.openmdx.kernel.exception.BasicException;\n\n/**\n * CopyDb\n *\n */\npublic class CopyDb {\n\n\t/**\n\t * Map CLOB to String.\n\t * \n\t * @param clob\n\t * @return\n\t * @throws IOException\n\t * @throws SQLException\n\t */\n\tprivate static String getStringFromClob(\n\t\tjava.sql.Clob clob\n\t) throws IOException, SQLException {\n\t\tReader reader = clob.getCharacterStream();\n\t\tStringBuilder s = new StringBuilder();\n\t\tint c;\n\t\twhile ((c = reader.read()) != -1) {\n\t\t\ts.append((char) c);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t * Map BLOB to byte[].\n\t * \n\t * @param blob\n\t * @return\n\t * @throws IOException\n\t * @throws SQLException\n\t */\n\tprivate static byte[] getBytesFromBlob(\n\t\tjava.sql.Blob blob\n\t) throws IOException, SQLException {\n\t\tInputStream is = blob.getBinaryStream();\n\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\tint b;\n\t\twhile ((b = is.read()) != -1) {\n\t\t\tos.write(b);\n\t\t}\n\t\tos.close();\n\t\treturn os.toByteArray();\n\t}\n\n\t/**\n\t * Db-specific column name mapping.\n\t * \n\t * @param conn\n\t * @param dbObject\n\t * @param columnName\n\t * @return\n\t * @throws SQLException\n\t */\n\tprivate static String mapColumnName(\n\t\tConnection conn, \n\t\tString dbObject, \n\t\tString columnName\n\t) throws SQLException {\n\t\tString databaseProductName = conn.getMetaData().getDatabaseProductName();\n\t\tif(\"HSQL Database Engine\".equals(databaseProductName)) {\n\t\t\tString mappedColumnName = columnName.toUpperCase();\n\t\t\tif(\"POSITION\".equals(mappedColumnName) || mappedColumnName.indexOf(\"$\") > 0) {\n\t\t\t\treturn \"\\\"\" + mappedColumnName + \"\\\"\";\n\t\t\t} else {\n\t\t\t\treturn mappedColumnName;\n\t\t\t}\n\t\t} else if(\"PostgreSQL\".equals(databaseProductName)) {\n\t\t\tString mappedColumnName = columnName.toLowerCase();\n\t\t\tif(\"offset\".equals(mappedColumnName) || \"end\".equals(mappedColumnName) || mappedColumnName.indexOf(\"-\") > 0) {\n\t\t\t\treturn \"\\\"\" + mappedColumnName + \"\\\"\";\n\t\t\t} else {\n\t\t\t\treturn mappedColumnName;\n\t\t\t}\n\t\t} else {\n\t\t\treturn columnName.toUpperCase();\n\t\t}\n\t}\n\n\t/**\n\t * DB-specific column value mapping.\n\t * \n\t * @param conn\n\t * @param dbObject\n\t * @param columnName\n\t * @param columnValue\n\t * @param valuePatterns\n\t * @param valueReplacements\n\t * @return\n\t * @throws ServiceException\n\t * @throws SQLException\n\t */\n\tprivate static Object mapColumnValue(\n\t\tConnection conn, \n\t\tString dbObject, \n\t\tString columnName, \n\t\tObject columnValue, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements\n\t) throws ServiceException, SQLException {\n\t\tString databaseProductName = conn.getMetaData().getDatabaseProductName();\n\t\tif(BOOLEAN_COLUMNS.contains(columnName.toUpperCase())) {\n\t\t\tif(\"PostgreSQL\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"MySQL\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"Microsoft SQL Server\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(databaseProductName.startsWith(\"DB2/\")) {\n\t\t\t\treturn Boolean.valueOf(\"Y\".equals(columnValue));\n\t\t\t} else if(\"HSQL Database Engine\".equals(databaseProductName)) {\n\t\t\t\treturn columnValue;\n\t\t\t} else if(\"Oracle\".equals(databaseProductName)) {\n\t\t\t\treturn Boolean.valueOf(((Number) columnValue).intValue() == 1);\n\t\t\t} else {\n\t\t\t\tthrow new ServiceException(BasicException.Code.DEFAULT_DOMAIN, BasicException.Code.NOT_SUPPORTED, \"Database not supported\", new BasicException.Parameter(\"database product name\",\n\t\t\t\t    databaseProductName));\n\t\t\t}\n\t\t} else {\n\t\t\tif(columnValue instanceof String) {\n\t\t\t\tString targetValue = (String)columnValue;\n\t\t\t\tfor(int i = 0; i < valuePatterns.size(); i++) {\n\t\t\t\t\tString valuePattern = valuePatterns.get(i);\n\t\t\t\t\tString valueReplacment = valueReplacements.get(i);\n\t\t\t\t\tif(valuePattern != null & valuePattern.length() > 0) {\n\t\t\t\t\t\ttargetValue = targetValue.replaceAll(valuePattern, valueReplacment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn targetValue;\n\t\t\t} else {\n\t\t\t\treturn columnValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Copy dbObject from source to target database.\n\t * \n\t * @param dbObject\n\t * @param useSuffix\n\t * @param connSource\n\t * @param connTarget\n\t * @param providerNameSource\n\t * @param providerNameTarget\n\t * @param out\n\t * @throws SQLException\n\t */\n\tpublic static void copyDbObject(\n\t\tString dbObject, \n\t\tboolean useSuffix, \n\t\tConnection connSource, \n\t\tConnection connTarget, \n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t\tPrintStream out\n\t) throws SQLException {\n\t\tString currentStatement = null;\n\t\tDatabase_2 db = new Database_2();\n\t\ttry {\n\t\t\tDatabase_2[] plugins = Utils.getDatabasePlugIns();\n\t\t\tdb = plugins[0];\n\t\t} catch (Exception e) {\n\t\t\tout.println(\"Can not activate database plugin: \" + e.getMessage());\n\t\t}\n\t\ttry {\n\t\t\t// Delete all rows from target\n\t\t\tPreparedStatement s = connTarget.prepareStatement(currentStatement = \"DELETE FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.executeUpdate();\n\t\t\ts.close();\n\t\t\t// Read all rows from source\n\t\t\ts = connSource.prepareStatement(currentStatement = \"SELECT * FROM \" + dbObject + (useSuffix ? \"_\" : \"\"));\n\t\t\ts.setFetchSize(100);\n\t\t\tResultSet rs = s.executeQuery();\n\t\t\tif(rs != null) {\n\t\t\t\tResultSetMetaData rsm = rs.getMetaData();\n\t\t\t\tFastResultSet frs = new FastResultSet(rs);\n\t\t\t\tint nRows = 0;\n\t\t\t\twhile (frs.next()) {\n\t\t\t\t\t// Read row from source and prepare INSERT statement\n\t\t\t\t\tString statement = \"INSERT INTO \" + dbObject + (useSuffix ? \"_\" : \"\") + \" \";\n\t\t\t\t\tList<Object> statementParameters = new ArrayList<Object>();\n\t\t\t\t\tList<String> processTargetColumnNames = new ArrayList<String>();\n\t\t\t\t\tfor (int j = 0; j < rsm.getColumnCount(); j++) {\n\t\t\t\t\t\tString columnName = rsm.getColumnName(j + 1);\n\t\t\t\t\t\tif(frs.getObject(columnName) != null) {\n\t\t\t\t\t\t\tString mappedColumnName = CopyDb.mapColumnName(connTarget, dbObject, columnName);\n\t\t\t\t\t\t\tif(mappedColumnName != null) {\n\t\t\t\t\t\t\t\tstatement += (statementParameters.size() == 0 ? \" (\" : \", \") + mappedColumnName;\n\t\t\t\t\t\t\t\tprocessTargetColumnNames.add(mappedColumnName);\n\t\t\t\t\t\t\t\tif(frs.getObject(columnName) instanceof java.sql.Clob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getStringFromClob((java.sql.Clob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Clob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if(frs.getObject(columnName) instanceof java.sql.Blob) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tstatementParameters.add(CopyDb.getBytesFromBlob((java.sql.Blob) frs.getObject(columnName)));\n\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\tout.println(\"Reading Blob failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstatementParameters.add(\n\t\t\t\t\t\t\t\t\t\tCopyDb.mapColumnValue(\n\t\t\t\t\t\t\t\t\t\t\tconnSource,\n\t\t\t\t\t\t\t\t\t\t\tdbObject,\n\t\t\t\t\t\t\t\t\t\t\tcolumnName,\n\t\t\t\t\t\t\t\t\t\t\tfrs.getObject(columnName),\n\t\t\t\t\t\t\t\t\t\t\tvaluePatterns,\n\t\t\t\t\t\t\t\t\t\t\tvalueReplacements\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \") VALUES (\";\n\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\tstatement += j == 0 ? \"?\" : \", ?\";\n\t\t\t\t\t}\n\t\t\t\t\tstatement += \")\";\n\t\t\t\t\t// Add row to target\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPreparedStatement t = connTarget.prepareStatement(currentStatement = statement);\n\t\t\t\t\t\tfor (int j = 0; j < statementParameters.size(); j++) {\n\t\t\t\t\t\t\tObject parameter = statementParameters.get(j);\n\t\t\t\t\t\t\tif(\"oracle.sql.TIMESTAMP\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"timestampValue\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t} else if(\"microsoft.sql.DateTimeOffset\".equals(parameter.getClass().getName())) {\n\t\t\t\t\t\t\t\tMethod timestampValueMethod = parameter.getClass().getMethod(\"getTimestamp\", new Class[] {});\n\t\t\t\t\t\t\t\tparameter = timestampValueMethod.invoke(parameter, new Object[] {});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(parameter instanceof java.sql.Timestamp) {\n\t\t\t\t\t\t\t\tt.setTimestamp(j + 1, (java.sql.Timestamp) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof java.sql.Date) {\n\t\t\t\t\t\t\t\tt.setDate(j + 1, (java.sql.Date) parameter);\n\t\t\t\t\t\t\t} else if(parameter instanceof Double) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Double)parameter));\n\t\t\t\t\t\t\t} else if(parameter instanceof Float) {\n\t\t\t\t\t\t\t\tt.setBigDecimal(j + 1, new BigDecimal((Float)parameter));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdb.setPreparedStatementValue(connTarget, t, j + 1, parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tt.executeUpdate();\n\t\t\t\t\t\tt.close();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tnew ServiceException(e).log();\n\t\t\t\t\t\tout.println(\"Insert failed. Reason: \" + e.getMessage());\n\t\t\t\t\t\tout.println(\"statement=\" + statement);\n\t\t\t\t\t\tout.println(\"parameters=\" + statementParameters);\n\t\t\t\t\t}\n\t\t\t\t\tnRows++;\n\t\t\t\t\tif(nRows % 1000 == 0) {\n\t\t\t\t\t\tout.println(nRows + \" rows copied\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trs.close();\n\t\t\t} else {\n\t\t\t\tout.println(\"Did not copy table (result set is null). Statement: \" + currentStatement);\n\t\t\t}\n\t\t\ts.close();\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t\tout.println(\"Can not copy table (see log for more info). Statement: \" + currentStatement);\n\t\t}\n\t}\n\n\t/**\n\t * Copy all tables from source to target database.\n\t * \n\t * @param connSource\n\t * @param connTarget\n\t * @param dbObjects\n\t * @param startFromDbObject\n\t * @param endWithDbObject\n\t * @param providerNameSource\n\t * @param providerNameTarget\n\t * @param out\n\t */\n\tprivate static void copyNamespace(\n\t    Connection connSource,\n\t    Connection connTarget,\n\t    List<String> dbObjects,\n\t\tList<String> valuePatterns,\n\t\tList<String> valueReplacements,\n\t    PrintStream out\n\t) {\n\t\tString currentStatement = null;\n\t\ttry {\n\t\t\tout.println(\"Processing tables:\");\n\t\t\tint ii = 0;\n\t\t\tfor(String dbObject: dbObjects) {\n\t\t\t\tout.println(ii + \": \" + dbObject);\n\t\t\t\tii++;\n\t\t\t}\n\t\t\tSet<String> processedDbObjects = new HashSet<String>();\n\t\t\tfor (String dbObject: dbObjects) {\n\t\t\t\tif((dbObject != null) && !dbObject.isEmpty() && !processedDbObjects.contains(dbObject)) {\n\t\t\t\t\tout.println(\"Copying table: \" + dbObject);\n\t\t\t\t\tCopyDb.copyDbObject(\n\t\t\t\t\t\tdbObject, \n\t\t\t\t\t\tfalse, \n\t\t\t\t\t\tconnSource, \n\t\t\t\t\t\tconnTarget, \n\t\t\t\t\t\tvaluePatterns, \n\t\t\t\t\t\tvalueReplacements, \n\t\t\t\t\t\tout\n\t\t\t\t\t);\n\t\t\t\t\tout.println(\"Copying table: \" + dbObject + \"_\");\n\t\t\t\t\tCopyDb.copyDbObject(\n\t\t\t\t\t\tdbObject, \n\t\t\t\t\t\ttrue, \n\t\t\t\t\t\tconnSource, \n\t\t\t\t\t\tconnTarget, \n\t\t\t\t\t\tvaluePatterns, \n\t\t\t\t\t\tvalueReplacements, \n\t\t\t\t\t\tout\n\t\t\t\t\t);\n\t\t\t\t\tprocessedDbObjects.add(dbObject);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tServiceException e0 = new ServiceException(e);\n\t\t\te0.log();\n\t\t\tout.println(\"statement: \" + currentStatement + \" (message=\" + e0.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * CopyDb utility.\n\t * \n\t * @param args\n\t */\n\tpublic static void main(\n\t\tString[] args\n\t) {\n\t\ttry {\n\t\t\tProperties env = System.getProperties();\n\t\t\tString includeDbObjects = env.getProperty(\"includeDbObjects\");\n\t\t\tString excludeDbObjects = env.getProperty(\"excludeDbObjects\");\n\t\t\tString valuePatterns = env.getProperty(\"valuePatterns\");\n\t\t\tString valueReplacements = env.getProperty(\"valueReplacements\");\n\t\t\tcopyDb(\n\t\t\t\tenv.getProperty(\"jdbcDriverSource\"), \n\t\t\t\tenv.getProperty(\"usernameSource\"), \n\t\t\t\tenv.getProperty(\"passwordSource\"), \n\t\t\t\tenv.getProperty(\"jdbcUrlSource\"), \n\t\t\t\tenv.getProperty(\"jdbcDriverTarget\"),\n\t\t\t    env.getProperty(\"usernameTarget\"), \n\t\t\t    env.getProperty(\"passwordTarget\"), \n\t\t\t    env.getProperty(\"jdbcUrlTarget\"), \n\t\t\t    includeDbObjects == null ? Collections.<String>emptyList() : Arrays.asList(includeDbObjects.split(\",\")),\n\t\t\t\texcludeDbObjects == null ? Collections.<String>emptyList() : Arrays.asList(excludeDbObjects.split(\",\")),\n\t\t\t\tvaluePatterns == null ? Collections.<String>emptyList() : Arrays.asList(valuePatterns.split(\",\")),\n\t\t\t\tvalueReplacements == null ? Collections.<String>emptyList() : Arrays.asList(valueReplacements.split(\",\")),\n\t\t\t    System.out\n\t\t\t);\n\t\t} catch (Exception e) {\n\t\t\tnew ServiceException(e).log();\n\t\t}\n\t}\n\n\t/**\n\t * Filter list of dbObjects.\n\t * \n\t * @param dbObjects\n\t * @param includeDbObjects\n\t * @param excludeDbObjects\n\t * @return\n\t * @throws ServiceException\n\t */\n\tprivate static List<String> filterDbObjects(\n\t\tList<String> dbObjects,\n\t\tList<String> includeDbObjects,\n\t\tList<String> excludeDbObjects\n\t) throws ServiceException {\n\t\tList<String> filteredDbObjects = new ArrayList<String>();\n\t\tfor(String dbObject: dbObjects) {\n\t\t\tif(dbObject != null) {\n\t\t\t\tdbObject = dbObject.trim();\n\t\t\t\tif(!dbObject.isEmpty()) {\n\t\t\t\t\tfor(String includeDbObject: includeDbObjects) {\n\t\t\t\t\t\tif(dbObject.matches(includeDbObject)) {\n\t\t\t\t\t\t\tfilteredDbObjects.add(dbObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(String dbObject: dbObjects) {\n\t\t\tif(dbObject != null) {\n\t\t\t\tdbObject = dbObject.trim();\n\t\t\t\tfor(String excludeDbObject: excludeDbObjects) {\n\t\t\t\t\tif(dbObject.matches(excludeDbObject)) {\n\t\t\t\t\t\tfilteredDbObjects.remove(dbObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn filteredDbObjects;\n\t}\n\n\t/**\n\t * CopyDb utility. \n\t * \n\t * @param jdbcDriverSource\n\t * @param usernameSource\n\t * @param passwordSource\n\t * @param jdbcUrlSource\n\t * @param jdbcDriverTarget\n\t * @param usernameTarget\n\t * @param passwordTarget\n\t * @param jdbcUrlTarget\n\t * @param includeDbObjects\n\t * @param excludeDbObjects\n\t * @param valuePatterns\n\t * @param valueReplacements\n\t * @param out\n\t * @throws ServiceException\n\t */\n\tpublic static void copyDb(\n\t    String jdbcDriverSource,\n\t    String usernameSource,\n\t    String passwordSource,\n\t    String jdbcUrlSource,\n\t    String jdbcDriverTarget,\n\t    String usernameTarget,\n\t    String passwordTarget,\n\t    String jdbcUrlTarget,\n\t    List<String> includeDbObjects,\n\t    List<String> excludeDbObjects,\n\t    List<String> valuePatterns,\n\t    List<String> valueReplacements,\n\t    PrintStream out\n\t) throws ServiceException {\n\t\t{\n\t\t\tDBOBJECTS.clear();\n\t\t\tList<String> tableNames = new ArrayList<String>();\n\t\t\ttry {\n\t\t\t\ttableNames = DbSchemaUtils.getTableNames();\n\t\t\t} catch (Exception e) {\n\t\t\t\tnew ServiceException(e).log();\n\t\t\t}\n\t\t\tfor(String tableName : tableNames) {\n\t\t\t\tif(\n\t\t\t\t\ttableName.indexOf(\"_\") > 0 &&\n\t\t\t\t\ttableName.indexOf(\"_TOBJ_\") < 0 &&\n\t\t\t\t\ttableName.indexOf(\"_JOIN_\") < 0 &&\n\t\t\t\t\t!tableName.endsWith(\"_\")\n\t\t\t\t) {\n\t\t\t\t\tDBOBJECTS.add(tableName);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\ttry {\n\t\t\t// Source connection\n\t\t\tClass.forName(jdbcDriverSource);\n\t\t\tProperties props = new Properties();\n\t\t\tprops.put(\"user\", usernameSource);\n\t\t\tprops.put(\"password\", passwordSource);\n\t\t\tConnection connSource = DriverManager.getConnection(jdbcUrlSource, props);\n\t\t\tconnSource.setAutoCommit(false);\n\t\t\t// Target connection\n\t\t\tClass.forName(jdbcDriverTarget);\n\t\t\tprops = new Properties();\n\t\t\tprops.put(\"user\", usernameTarget);\n\t\t\tprops.put(\"password\", passwordTarget);\n\t\t\tConnection connTarget = DriverManager.getConnection(jdbcUrlTarget, props);\n\t\t\tconnTarget.setAutoCommit(true);\n\t\t\tCopyDb.copyNamespace(\n\t\t\t\tconnSource, \n\t\t\t\tconnTarget,\n\t\t\t\tfilterDbObjects(\n\t\t\t\t\tDBOBJECTS, \n\t\t\t\t\tincludeDbObjects, \n\t\t\t\t\texcludeDbObjects\n\t\t\t\t),\n\t\t\t    valuePatterns, \n\t\t\t    valueReplacements, \n\t\t\t    out\n\t\t\t);\n\t\t} catch (Exception e) {\n\t\t\tthrow new ServiceException(e);\n\t\t}\n\t\tout.println();\n\t\tout.println(\"!!! DONE !!!\");\n\t}\n\n\t// -----------------------------------------------------------------------\n\t// Members\n\t// -----------------------------------------------------------------------\n\tstatic final List<String> DBOBJECTS = new ArrayList<String>();\n\n\tstatic final Set<String> BOOLEAN_COLUMNS = new HashSet<String>(Arrays.asList(\n\t    \"DISABLED\", \"USER_BOOLEAN0\", \"USER_BOOLEAN1\", \"USER_BOOLEAN2\", \"USER_BOOLEAN3\", \"USER_BOOLEAN4\", \"DO_NOT_BULK_POSTAL_MAIL\", \"DO_NOT_E_MAIL\", \"DO_NOT_FAX\", \"DO_NOT_PHONE\",\n\t    \"DO_NOT_POSTAL_MAIL\", \"EXT_BOOLEAN0\", \"EXT_BOOLEAN1\", \"EXT_BOOLEAN2\", \"EXT_BOOLEAN3\", \"EXT_BOOLEAN4\", \"EXT_BOOLEAN5\", \"EXT_BOOLEAN6\", \"EXT_BOOLEAN7\", \"EXT_BOOLEAN8\", \"EXT_BOOLEAN9\",\n\t    \"DISABLED\", \"DISCOUNT_IS_PERCENTAGE\", \"USER_BOOLEAN4\", \"IS_ALL_DAY_EVENT\", \"DELIVERY_RECEIPT_REQUESTED\", \"READ_RECEIPT_REQUESTED\", \"IS_MAIN\", \"RESET_TO_NULL\", \"IS_MAIN\", \"AUTOMATIC_PARSING\",\n\t    \"IS_CLOSED\", \"IS_FINAL\", \"CREDIT_FIRST\", \"IS_DEFAULT\", \"IS_WORKING_DAY\", \"IS_LOCKED\", \"IS_GIFT\", \"IS_TEMPLATE\", \"DISCOUNT_IS_PERCENTAGE\", \"IS_GIFT\", \"SALES_COMMISSION_IS_PERCENTAGE\",\n\t    \"IS_CREDIT_ON_HOLD\", \"ALLOW_POSITION_AUTO_CREATE\", \"IS_DEFAULT\", \"IS_LOCKED\", \"IS_TEMPLATE\", \"IS_LOCKED\", \"HOLDER_QUALIFIES_POSITION\", \"IS_DRAFT\", \"ALLOW_CREDIT_BOOKINGS\",\n\t    \"ALLOW_DEBIT_BOOKINGS\", \"IS_DEFAULT\", \"IS_ACTIVE\", \"BOOLEAN_PARAM\", \"IS_CHANGEABLE\", \"IS_QUERY\", \"IS_DERIVED\", \"IS_ABSTRACT\", \"IS_SINGLETON\", \"IS_CLUSTERED\", \"IS_NAVIGABLE\",\n\t    \"WEIGHT_IS_PERCENTAGE\", \"IS_FINAL\", \"DISCOUNT_IS_PERCENTAGE\", \"IS_DEFAULT\", \"ALLOW_MODIFICATION\", \"ALLOW_REMOVAL\", \"DISCOUNT_IS_PERCENTAGE\", \"OVERRIDE_PRICE\", \"IS_STOCK_ITEM\",\n\t    \"DISCOUNT_IS_PERCENTAGE\", \"IS_DEFAULT\", \"BOOLEAN_VALUE\", \"IS_ACTIVE\", \"NEW_BOOLEAN\", \"OLD_BOOLEAN\", \"SELECTOR\", \"IS_SCHEDULE_BASE_UOM\", \"STORE_SETTINGS_ON_LOGOFF\", \"IS_SYNCHRONOUS\", \"FAILED\",\n\t    \"IS_BILLABLE\", \"IS_REIMBURSABLE\", \"LOCKED\", \"ALLOW_ADD_DELETE\", \"ALLOW_CHANGE\"\n\t));\n\n}\n"], "filenames": ["build.gradle.kts", "core/src/data/org.opencrx/PasswordResetConfirm.jsp", "core/src/main/java/org/opencrx/kernel/tools/CopyDb.java"], "buggy_code_start_loc": [57, 14, 254], "buggy_code_end_loc": [58, 161, 551], "fixing_code_start_loc": [57, 14, 255], "fixing_code_end_loc": [58, 165, 552], "type": "CWE-79", "message": "In OpenCRX, versions v4.0.0 through v5.1.0 are vulnerable to reflected Cross-site Scripting (XSS), due to unsanitized parameters in the password reset functionality. This allows execution of external javascript files on any user of the openCRX instance.", "other": {"cve": {"id": "CVE-2021-25959", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-09-29T14:15:07.620", "lastModified": "2021-10-07T13:21:22.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OpenCRX, versions v4.0.0 through v5.1.0 are vulnerable to reflected Cross-site Scripting (XSS), due to unsanitized parameters in the password reset functionality. This allows execution of external javascript files on any user of the openCRX instance."}, {"lang": "es", "value": "En OpenCRX, versiones v4.0.0 hasta v5.1.0, son vulnerables a un ataque de tipo Cross-site Scripting (XSS) reflejado, debido a par\u00e1metros no saneados en la funcionalidad password reset. Esto permite una ejecuci\u00f3n de archivos javascript externos en cualquier usuario de la instancia de openCRX"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opencrx:opencrx:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndIncluding": "5.1.0", "matchCriteriaId": "6CC05D23-E68A-45A9-93B6-8048254723C0"}]}]}], "references": [{"url": "https://github.com/opencrx/opencrx/commit/14e75f95e5f56fbe7ee897bdf5d858788072e818", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Tool Signature"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25959", "source": "vulnerabilitylab@mend.io", "tags": ["Tool Signature"]}]}, "github_commit_url": "https://github.com/opencrx/opencrx/commit/14e75f95e5f56fbe7ee897bdf5d858788072e818"}}