{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Controller;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariantCollection;\nuse TYPO3\\CMS\\Core\\Resource\\Event\\ModifyFileDumpEvent;\nuse TYPO3\\CMS\\Core\\Resource\\File;\nuse TYPO3\\CMS\\Core\\Resource\\FileInterface;\nuse TYPO3\\CMS\\Core\\Resource\\FileReference;\nuse TYPO3\\CMS\\Core\\Resource\\ProcessedFile;\nuse TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository;\nuse TYPO3\\CMS\\Core\\Resource\\ResourceFactory;\nuse TYPO3\\CMS\\Core\\Resource\\Security\\FileNameValidator;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\n/**\n * Class FileDumpController\n */\nclass FileDumpController\n{\n    protected ResourceFactory $resourceFactory;\n    protected EventDispatcherInterface $eventDispatcher;\n    protected ResponseFactoryInterface $responseFactory;\n\n    public function __construct(\n        EventDispatcherInterface $eventDispatcher,\n        ResourceFactory $resourceFactory,\n        ResponseFactoryInterface $responseFactory\n    ) {\n        $this->eventDispatcher = $eventDispatcher;\n        $this->resourceFactory = $resourceFactory;\n        $this->responseFactory = $responseFactory;\n    }\n\n    /**\n     * Main method to dump a file\n     *\n     * @param ServerRequestInterface $request\n     * @return ResponseInterface\n     * @throws \\InvalidArgumentException\n     * @throws \\RuntimeException\n     * @throws \\UnexpectedValueException\n     */\n    public function dumpAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $parameters = $this->buildParametersFromRequest($request);\n\n        if (!$this->isTokenValid($parameters, $request)) {\n            return $this->responseFactory->createResponse(403);\n        }\n        $file = $this->createFileObjectByParameters($parameters);\n        if ($file === null) {\n            return $this->responseFactory->createResponse(404);\n        }\n\n        // Allow some other process to do some security/access checks.\n        // Event Listeners should return a 403 response if access is rejected\n        $event = new ModifyFileDumpEvent($file, $request);\n        $event = $this->eventDispatcher->dispatch($event);\n        if ($event->isPropagationStopped()) {\n            return $event->getResponse();\n        }\n        $file = $event->getFile();\n\n        $processingInstructions = [];\n\n        // Apply cropping, if possible\n        if (!empty($parameters['cv'])) {\n            $cropVariant = $parameters['cv'];\n            $cropString = $file instanceof FileReference ? $file->getProperty('crop') : '';\n            $cropArea = CropVariantCollection::create((string)$cropString)->getCropArea($cropVariant);\n            $processingInstructions = array_merge(\n                $processingInstructions,\n                [\n                    'crop' => $cropArea->isEmpty() ? null : $cropArea->makeAbsoluteBasedOnFile($file),\n                ]\n            );\n        }\n\n        // Apply width/height, if given\n        if (!empty($parameters['s'])) {\n            $size = GeneralUtility::trimExplode(':', $parameters['s']);\n            $processingInstructions = array_merge(\n                $processingInstructions,\n                [\n                    'width' => $size[0] ?? null,\n                    'height' => $size[1] ?? null,\n                    'minWidth' => $size[2] ? (int)$size[2] : null,\n                    'minHeight' => $size[3] ? (int)$size[3] : null,\n                    'maxWidth' => $size[4] ? (int)$size[4] : null,\n                    'maxHeight' => $size[5] ? (int)$size[5] : null,\n                ]\n            );\n        }\n\n        if (!empty($processingInstructions) && !($file instanceof ProcessedFile)) {\n            if (is_callable([$file, 'getOriginalFile'])) {\n                // Get the original file from the file reference\n                $file = $file->getOriginalFile();\n            }\n            $file = $file->process(ProcessedFile::CONTEXT_IMAGECROPSCALEMASK, $processingInstructions);\n        }\n\n        return $file->getStorage()->streamFile(\n            $file,\n            (bool)($parameters['dl'] ?? false),\n            $parameters['fn'] ?? null\n        );\n    }\n\n    protected function buildParametersFromRequest(ServerRequestInterface $request): array\n    {\n        $parameters = ['eID' => 'dumpFile'];\n        $queryParams = $request->getQueryParams();\n        // Identifier of what to process. f, r or p\n        // Only needed while hash_equals\n        $t = (string)($queryParams['t'] ?? '');\n        if ($t) {\n            $parameters['t'] = $t;\n        }\n        // sys_file\n        $f = (string)($queryParams['f'] ?? '');\n        if ($f) {\n            $parameters['f'] = (int)$f;\n        }\n        // sys_file_reference\n        $r = (string)($queryParams['r'] ?? '');\n        if ($r) {\n            $parameters['r'] = (int)$r;\n        }\n        // Processed file\n        $p = (string)($queryParams['p'] ?? '');\n        if ($p) {\n            $parameters['p'] = (int)$p;\n        }\n        // File's width and height in this order: w:h:minW:minH:maxW:maxH\n        $s = (string)($queryParams['s'] ?? '');\n        if ($s) {\n            $parameters['s'] = $s;\n        }\n        // File's crop variant\n        $cv = (string)($queryParams['cv'] ?? '');\n        if ($cv) {\n            $parameters['cv'] = $cv;\n        }\n        // As download\n        $dl = (string)($queryParams['dl'] ?? '');\n        if ($dl) {\n            $parameters['dl'] = (int)$dl;\n        }\n        // Alternative file name\n        $fn = (string)($queryParams['fn'] ?? '');\n        if ($fn) {\n            $parameters['fn'] = $fn;\n        }\n\n        return $parameters;\n    }\n\n    protected function isTokenValid(array $parameters, ServerRequestInterface $request): bool\n    {\n        return hash_equals(\n            GeneralUtility::hmac(implode('|', $parameters), 'resourceStorageDumpFile'),\n            $request->getQueryParams()['token'] ?? ''\n        );\n    }\n\n    /**\n     * @param array $parameters\n     * @return File|FileReference|ProcessedFile|null\n     */\n    protected function createFileObjectByParameters(array $parameters)\n    {\n        $file = null;\n        if (isset($parameters['f'])) {\n            try {\n                $file = $this->resourceFactory->getFileObject($parameters['f']);\n                if ($file->isDeleted() || $file->isMissing() || !$this->isFileValid($file)) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        } elseif (isset($parameters['r'])) {\n            try {\n                $file = $this->resourceFactory->getFileReferenceObject($parameters['r']);\n                if ($file->isMissing() || !$this->isFileValid($file->getOriginalFile())) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        } elseif (isset($parameters['p'])) {\n            try {\n                $processedFileRepository = GeneralUtility::makeInstance(ProcessedFileRepository::class);\n                /** @var ProcessedFile|null $file */\n                $file = $processedFileRepository->findByUid($parameters['p']);\n                if (!$file || $file->isDeleted() || !$this->isFileValid($file->getOriginalFile())) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        }\n        return $file;\n    }\n\n    protected function isFileValid(FileInterface $file): bool\n    {\n        return $file->getStorage()->getDriverType() !== 'Local'\n            || GeneralUtility::makeInstance(FileNameValidator::class)\n                ->isValid(basename($file->getIdentifier()));\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Core\\Controller;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Psr\\Http\\Message\\ResponseFactoryInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariantCollection;\nuse TYPO3\\CMS\\Core\\Resource\\Event\\ModifyFileDumpEvent;\nuse TYPO3\\CMS\\Core\\Resource\\File;\nuse TYPO3\\CMS\\Core\\Resource\\FileInterface;\nuse TYPO3\\CMS\\Core\\Resource\\FileReference;\nuse TYPO3\\CMS\\Core\\Resource\\ProcessedFile;\nuse TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository;\nuse TYPO3\\CMS\\Core\\Resource\\ResourceFactory;\nuse TYPO3\\CMS\\Core\\Resource\\ResourceInterface;\nuse TYPO3\\CMS\\Core\\Resource\\Security\\FileNameValidator;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Core\\Utility\\PathUtility;\n\n/**\n * Class FileDumpController\n */\nclass FileDumpController\n{\n    protected ResourceFactory $resourceFactory;\n    protected EventDispatcherInterface $eventDispatcher;\n    protected ResponseFactoryInterface $responseFactory;\n\n    public function __construct(\n        EventDispatcherInterface $eventDispatcher,\n        ResourceFactory $resourceFactory,\n        ResponseFactoryInterface $responseFactory\n    ) {\n        $this->eventDispatcher = $eventDispatcher;\n        $this->resourceFactory = $resourceFactory;\n        $this->responseFactory = $responseFactory;\n    }\n\n    /**\n     * Main method to dump a file\n     *\n     * @param ServerRequestInterface $request\n     * @return ResponseInterface\n     * @throws \\InvalidArgumentException\n     * @throws \\RuntimeException\n     * @throws \\UnexpectedValueException\n     */\n    public function dumpAction(ServerRequestInterface $request): ResponseInterface\n    {\n        $parameters = $this->buildParametersFromRequest($request);\n\n        if (!$this->isTokenValid($parameters, $request)) {\n            return $this->responseFactory->createResponse(403);\n        }\n        $file = $this->createFileObjectByParameters($parameters);\n        if ($file === null) {\n            return $this->responseFactory->createResponse(404);\n        }\n\n        // Allow some other process to do some security/access checks.\n        // Event Listeners should return a 403 response if access is rejected\n        $event = new ModifyFileDumpEvent($file, $request);\n        $event = $this->eventDispatcher->dispatch($event);\n        if ($event->isPropagationStopped()) {\n            return $this->applyContentSecurityPolicy($event->getFile(), $event->getResponse());\n        }\n        $file = $event->getFile();\n\n        $processingInstructions = [];\n\n        // Apply cropping, if possible\n        if (!empty($parameters['cv'])) {\n            $cropVariant = $parameters['cv'];\n            $cropString = $file instanceof FileReference ? $file->getProperty('crop') : '';\n            $cropArea = CropVariantCollection::create((string)$cropString)->getCropArea($cropVariant);\n            $processingInstructions = array_merge(\n                $processingInstructions,\n                [\n                    'crop' => $cropArea->isEmpty() ? null : $cropArea->makeAbsoluteBasedOnFile($file),\n                ]\n            );\n        }\n\n        // Apply width/height, if given\n        if (!empty($parameters['s'])) {\n            $size = GeneralUtility::trimExplode(':', $parameters['s']);\n            $processingInstructions = array_merge(\n                $processingInstructions,\n                [\n                    'width' => $size[0] ?? null,\n                    'height' => $size[1] ?? null,\n                    'minWidth' => $size[2] ? (int)$size[2] : null,\n                    'minHeight' => $size[3] ? (int)$size[3] : null,\n                    'maxWidth' => $size[4] ? (int)$size[4] : null,\n                    'maxHeight' => $size[5] ? (int)$size[5] : null,\n                ]\n            );\n        }\n\n        if (!empty($processingInstructions) && !($file instanceof ProcessedFile)) {\n            if (is_callable([$file, 'getOriginalFile'])) {\n                // Get the original file from the file reference\n                $file = $file->getOriginalFile();\n            }\n            $file = $file->process(ProcessedFile::CONTEXT_IMAGECROPSCALEMASK, $processingInstructions);\n        }\n\n        return $this->applyContentSecurityPolicy(\n            $file,\n            $file->getStorage()->streamFile(\n                $file,\n                (bool)($parameters['dl'] ?? false),\n                $parameters['fn'] ?? null\n            )\n        );\n    }\n\n    protected function buildParametersFromRequest(ServerRequestInterface $request): array\n    {\n        $parameters = ['eID' => 'dumpFile'];\n        $queryParams = $request->getQueryParams();\n        // Identifier of what to process. f, r or p\n        // Only needed while hash_equals\n        $t = (string)($queryParams['t'] ?? '');\n        if ($t) {\n            $parameters['t'] = $t;\n        }\n        // sys_file\n        $f = (string)($queryParams['f'] ?? '');\n        if ($f) {\n            $parameters['f'] = (int)$f;\n        }\n        // sys_file_reference\n        $r = (string)($queryParams['r'] ?? '');\n        if ($r) {\n            $parameters['r'] = (int)$r;\n        }\n        // Processed file\n        $p = (string)($queryParams['p'] ?? '');\n        if ($p) {\n            $parameters['p'] = (int)$p;\n        }\n        // File's width and height in this order: w:h:minW:minH:maxW:maxH\n        $s = (string)($queryParams['s'] ?? '');\n        if ($s) {\n            $parameters['s'] = $s;\n        }\n        // File's crop variant\n        $cv = (string)($queryParams['cv'] ?? '');\n        if ($cv) {\n            $parameters['cv'] = $cv;\n        }\n        // As download\n        $dl = (string)($queryParams['dl'] ?? '');\n        if ($dl) {\n            $parameters['dl'] = (int)$dl;\n        }\n        // Alternative file name\n        $fn = (string)($queryParams['fn'] ?? '');\n        if ($fn) {\n            $parameters['fn'] = $fn;\n        }\n\n        return $parameters;\n    }\n\n    protected function isTokenValid(array $parameters, ServerRequestInterface $request): bool\n    {\n        return hash_equals(\n            GeneralUtility::hmac(implode('|', $parameters), 'resourceStorageDumpFile'),\n            $request->getQueryParams()['token'] ?? ''\n        );\n    }\n\n    /**\n     * @param array $parameters\n     * @return File|FileReference|ProcessedFile|null\n     */\n    protected function createFileObjectByParameters(array $parameters)\n    {\n        $file = null;\n        if (isset($parameters['f'])) {\n            try {\n                $file = $this->resourceFactory->getFileObject($parameters['f']);\n                if ($file->isDeleted() || $file->isMissing() || !$this->isFileValid($file)) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        } elseif (isset($parameters['r'])) {\n            try {\n                $file = $this->resourceFactory->getFileReferenceObject($parameters['r']);\n                if ($file->isMissing() || !$this->isFileValid($file->getOriginalFile())) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        } elseif (isset($parameters['p'])) {\n            try {\n                $processedFileRepository = GeneralUtility::makeInstance(ProcessedFileRepository::class);\n                /** @var ProcessedFile|null $file */\n                $file = $processedFileRepository->findByUid($parameters['p']);\n                if (!$file || $file->isDeleted() || !$this->isFileValid($file->getOriginalFile())) {\n                    $file = null;\n                }\n            } catch (\\Exception $e) {\n                $file = null;\n            }\n        }\n        return $file;\n    }\n\n    protected function isFileValid(FileInterface $file): bool\n    {\n        return $file->getStorage()->getDriverType() !== 'Local'\n            || GeneralUtility::makeInstance(FileNameValidator::class)\n                ->isValid(basename($file->getIdentifier()));\n    }\n\n    /**\n     * Applies hard-coded content-security-policy (CSP) for file to be dumped.\n     */\n    protected function applyContentSecurityPolicy(ResourceInterface $file, ResponseInterface $response): ResponseInterface\n    {\n        $extension = PathUtility::pathinfo($file->getName(), PATHINFO_EXTENSION);\n        // same as in `typo3/sysext/install/Resources/Private/FolderStructureTemplateFiles/resources-root-htaccess`\n        $policy = $extension === 'pdf' || $response->getHeaderLine('content-type') === 'application/pdf'\n            ? \"default-src 'self' 'unsafe-inline'; script-src 'none'; object-src 'self'; plugin-types application/pdf;\"\n            : \"default-src 'self'; script-src 'none'; style-src 'none'; object-src 'none';\";\n        return $response->withAddedHeader('content-security-policy', $policy);\n    }\n}\n"], "filenames": ["typo3/sysext/core/Classes/Controller/FileDumpController.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [232], "fixing_code_start_loc": [32], "fixing_code_end_loc": [251], "type": "CWE-79", "message": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `FileDumpController` (backend and frontend context) is vulnerable to cross-site scripting when malicious files are displayed using this component. A valid backend user account is needed to exploit this vulnerability. Update to TYPO3 version 7.6.58 ELTS, 8.7.48 ELTS, 9.5.37 ELTS, 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-36107", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-13T18:15:15.227", "lastModified": "2022-09-16T14:24:01.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `FileDumpController` (backend and frontend context) is vulnerable to cross-site scripting when malicious files are displayed using this component. A valid backend user account is needed to exploit this vulnerability. Update to TYPO3 version 7.6.58 ELTS, 8.7.48 ELTS, 9.5.37 ELTS, 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue."}, {"lang": "es", "value": "TYPO3 es un sistema de administraci\u00f3n de contenidos web de c\u00f3digo abierto basado en PHP y publicado bajo la licencia GNU GPL. Se ha detectado que el \"FileDumpController\" (contexto de backend y frontend) es vulnerable a un ataque de tipo cross-site scripting cuando son mostrados archivos maliciosos usando este componente. Es necesaria una cuenta de usuario de backend v\u00e1lida para explotar esta vulnerabilidad. Actualice a TYPO3 versiones 7.6.58 ELTS, 8.7.48 ELTS, 9.5.37 ELTS, 10.4.32 o 11.5.16 que corrigen el problema. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0.0", "versionEndIncluding": "7.6.57", "matchCriteriaId": "73AB57E5-5B42-40F9-A818-06C46D6B4471"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndIncluding": "8.7.47", "matchCriteriaId": "8F8D96AD-07F4-4563-BA55-98E2C1024E82"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.0.0", "versionEndIncluding": "9.5.36", "matchCriteriaId": "32E63445-2CD1-4E0F-80B2-73977B14E319"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndIncluding": "10.4.31", "matchCriteriaId": "B428B4CD-4699-4E84-9002-29442DCE5250"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.0.0", "versionEndIncluding": "11.5.15", "matchCriteriaId": "CE54B85D-5F45-4346-A2E0-8204831AA225"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/bd58d2ff2eeef89e63ef754a2389597d22622a39", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-9c6w-55cp-5w25", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2022-009", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/bd58d2ff2eeef89e63ef754a2389597d22622a39"}}