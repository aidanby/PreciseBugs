{"buggy_code": ["/*****************************************************************\n|\n|    AP4 - Atom Factory\n|\n|    Copyright 2002-2012 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4Types.h\"\n#include \"Ap4Utils.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4SampleEntry.h\"\n#include \"Ap4UuidAtom.h\"\n#include \"Ap4IsmaCryp.h\"\n#include \"Ap4UrlAtom.h\"\n#include \"Ap4MoovAtom.h\"\n#include \"Ap4MvhdAtom.h\"\n#include \"Ap4MehdAtom.h\"\n#include \"Ap4MfhdAtom.h\"\n#include \"Ap4TfhdAtom.h\"\n#include \"Ap4TrunAtom.h\"\n#include \"Ap4TrakAtom.h\"\n#include \"Ap4HdlrAtom.h\"\n#include \"Ap4DrefAtom.h\"\n#include \"Ap4TkhdAtom.h\"\n#include \"Ap4TrexAtom.h\"\n#include \"Ap4TfhdAtom.h\"\n#include \"Ap4MdhdAtom.h\"\n#include \"Ap4StsdAtom.h\"\n#include \"Ap4StscAtom.h\"\n#include \"Ap4StcoAtom.h\"\n#include \"Ap4Co64Atom.h\"\n#include \"Ap4StszAtom.h\"\n#include \"Ap4Stz2Atom.h\"\n#include \"Ap4IodsAtom.h\"\n#include \"Ap4EsdsAtom.h\"\n#include \"Ap4SttsAtom.h\"\n#include \"Ap4CttsAtom.h\"\n#include \"Ap4StssAtom.h\"\n#include \"Ap4FtypAtom.h\"\n#include \"Ap4VmhdAtom.h\"\n#include \"Ap4SmhdAtom.h\"\n#include \"Ap4NmhdAtom.h\"\n#include \"Ap4SthdAtom.h\"\n#include \"Ap4HmhdAtom.h\"\n#include \"Ap4ElstAtom.h\"\n#include \"Ap4SchmAtom.h\"\n#include \"Ap4FrmaAtom.h\"\n#include \"Ap4TimsAtom.h\"\n#include \"Ap4RtpAtom.h\"\n#include \"Ap4SdpAtom.h\"\n#include \"Ap4IkmsAtom.h\"\n#include \"Ap4IsfmAtom.h\"\n#include \"Ap4IsltAtom.h\"\n#include \"Ap4OdheAtom.h\"\n#include \"Ap4OhdrAtom.h\"\n#include \"Ap4OddaAtom.h\"\n#include \"Ap4TrefTypeAtom.h\"\n#include \"Ap4MetaData.h\"\n#include \"Ap4IproAtom.h\"\n#include \"Ap4OdafAtom.h\"\n#include \"Ap4GrpiAtom.h\"\n#include \"Ap4AvccAtom.h\"\n#include \"Ap4HvccAtom.h\"\n#include \"Ap4DvccAtom.h\"\n#include \"Ap4Marlin.h\"\n#include \"Ap48bdlAtom.h\"\n#include \"Ap4Piff.h\"\n#include \"Ap4TfraAtom.h\"\n#include \"Ap4MfroAtom.h\"\n#include \"Ap4TfdtAtom.h\"\n#include \"Ap4TencAtom.h\"\n#include \"Ap4SencAtom.h\"\n#include \"Ap4SaioAtom.h\"\n#include \"Ap4SaizAtom.h\"\n#include \"Ap4PdinAtom.h\"\n#include \"Ap4BlocAtom.h\"\n#include \"Ap4AinfAtom.h\"\n#include \"Ap4PsshAtom.h\"\n#include \"Ap4Dec3Atom.h\"\n#include \"Ap4SidxAtom.h\"\n#include \"Ap4SbgpAtom.h\"\n#include \"Ap4SgpdAtom.h\"\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::~AP4_AtomFactory\n+---------------------------------------------------------------------*/\nAP4_AtomFactory::~AP4_AtomFactory()\n{\n    m_TypeHandlers.DeleteReferences();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::AddTypeHandler\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::AddTypeHandler(TypeHandler* handler)\n{\n    return m_TypeHandlers.Add(handler);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::RemoveTypeHandler\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::RemoveTypeHandler(TypeHandler* handler)\n{\n    return m_TypeHandlers.Remove(handler);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_Atom*&      atom)\n{\n    AP4_LargeSize stream_size     = 0;\n    AP4_Position  stream_position = 0;\n    AP4_LargeSize bytes_available = (AP4_LargeSize)(-1);\n    if (AP4_SUCCEEDED(stream.GetSize(stream_size)) && \n        stream_size != 0 &&\n        AP4_SUCCEEDED(stream.Tell(stream_position)) &&\n        stream_position <= stream_size) {\n        bytes_available = stream_size-stream_position;\n    }\n    return CreateAtomFromStream(stream, bytes_available, atom);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_LargeSize&  bytes_available,\n                                      AP4_Atom*&      atom)\n{\n    AP4_Result result;\n\n    // NULL by default\n    atom = NULL;\n\n    // check that there are enough bytes for at least a header\n    if (bytes_available < 8) return AP4_ERROR_EOS;\n\n    // remember current stream offset\n    AP4_Position start;\n    stream.Tell(start);\n\n    // read atom size\n    AP4_UI32 size_32;\n    result = stream.ReadUI32(size_32);\n    if (AP4_FAILED(result)) {\n        stream.Seek(start);\n        return result;\n    }\n    AP4_UI64 size = size_32;\n\n    // read atom type\n    AP4_Atom::Type type;\n    result = stream.ReadUI32(type);\n    if (AP4_FAILED(result)) {\n        stream.Seek(start);\n        return result;\n    }\n\n    // handle special size values\n    bool atom_is_large = false;\n    bool force_64      = false;\n    if (size == 0) {\n        // atom extends to end of file\n        AP4_LargeSize stream_size = 0;\n        stream.GetSize(stream_size);\n        if (stream_size >= start) {\n            size = stream_size - start;\n        }\n    } else if (size == 1) {\n        // 64-bit size\n        atom_is_large = true;\n        if (bytes_available < 16) {\n            stream.Seek(start);\n            return AP4_ERROR_INVALID_FORMAT;\n        }\n        stream.ReadUI64(size);\n        if (size <= 0xFFFFFFFF) {\n            force_64 = true;\n        }\n    }\n\n    // check the size\n    if ((size > 0 && size < 8) || size > bytes_available) {\n        stream.Seek(start);\n        return AP4_ERROR_INVALID_FORMAT;\n    }\n\n    // create the atom\n    result = CreateAtomFromStream(stream, type, size_32, size, atom);\n    if (AP4_FAILED(result)) return result;\n    \n    // if we failed to create an atom, use a generic version\n    if (atom == NULL) {\n        unsigned int payload_offset = 8;\n        if (atom_is_large) payload_offset += 8;\n        stream.Seek(start+payload_offset);\n        atom = new AP4_UnknownAtom(type, size, stream);\n    }\n\n    // special case: if the atom is poorly encoded and has a 64-bit\n    // size header but an actual size that fits on 32-bit, adjust the\n    // object to reflect that.\n    if (force_64) {\n        atom->SetSize32(1);\n        atom->SetSize64(size);\n    }\n\n    // adjust the available size\n    bytes_available -= size;\n\n    // skip to the end of the atom\n    result = stream.Seek(start+size);\n    if (AP4_FAILED(result)) {\n        delete atom;\n        atom = NULL;\n        return result;\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_UI32        type,\n                                      AP4_UI32        size_32,\n                                      AP4_UI64        size_64,\n                                      AP4_Atom*&      atom)\n{\n    bool atom_is_large = (size_32 == 1);\n    bool force_64 = (size_32==1 && ((size_64>>32) == 0));\n    \n    // create the atom\n    if (GetContext() == AP4_ATOM_TYPE_STSD) {\n        // sample entry\n        if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n        switch (type) {\n          case AP4_ATOM_TYPE_MP4A:\n            atom = new AP4_Mp4aSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MP4V:\n            atom = new AP4_Mp4vSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MP4S:\n            atom = new AP4_Mp4sSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ENCA:\n            atom = new AP4_EncaSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ENCV:\n            atom = new AP4_EncvSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_DRMS:\n            atom = new AP4_DrmsSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_DRMI:\n            atom = new AP4_DrmiSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_AVC1:\n          case AP4_ATOM_TYPE_AVC2:\n          case AP4_ATOM_TYPE_AVC3:\n          case AP4_ATOM_TYPE_AVC4:\n          case AP4_ATOM_TYPE_DVAV:\n          case AP4_ATOM_TYPE_DVA1:\n            atom = new AP4_AvcSampleEntry(type, size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_HEV1:\n          case AP4_ATOM_TYPE_HVC1:\n          case AP4_ATOM_TYPE_DVHE:\n          case AP4_ATOM_TYPE_DVH1:\n            atom = new AP4_HevcSampleEntry(type, size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ALAC:\n          case AP4_ATOM_TYPE_AC_3:\n          case AP4_ATOM_TYPE_EC_3:\n          case AP4_ATOM_TYPE_DTSC:\n          case AP4_ATOM_TYPE_DTSH:\n          case AP4_ATOM_TYPE_DTSL:\n          case AP4_ATOM_TYPE_DTSE:\n            atom = new AP4_AudioSampleEntry(type, size_32, stream, *this);\n            break;\n            \n          case AP4_ATOM_TYPE_RTP_:\n            atom = new AP4_RtpHintSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_STPP:\n            atom = new AP4_SubtitleSampleEntry(type, size_32, stream, *this);\n            break;\n\n          default: {\n            // try all the external type handlers\n            AP4_List<TypeHandler>::Item* handler_item = m_TypeHandlers.FirstItem();\n            while (handler_item) {\n                TypeHandler* handler = handler_item->GetData();\n                if (AP4_SUCCEEDED(handler->CreateAtom(type, size_32, stream, GetContext(), atom))) {\n                    break;\n                }\n                handler_item = handler_item->GetNext();\n            }\n\n            // no custom handler, create a generic entry\n            if (atom == NULL) {\n                atom = new AP4_UnknownSampleEntry(type, (AP4_UI32)size_64, stream);\n            }\n\n            break;\n          }\n        }\n    } else {\n        // regular atom\n        switch (type) {\n          case AP4_ATOM_TYPE_MOOV:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MoovAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MVHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MvhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MEHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MehdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MFHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MfhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TRAK:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrakAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_TREX:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrexAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HDLR:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HdlrAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TKHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TkhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TRUN:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrunAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFRA:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfraAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MFRO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MfroAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MDHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MdhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StsdAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_STSC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StscAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STCO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StcoAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_CO64:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_Co64Atom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSZ:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StszAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STZ2:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_Stz2Atom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STTS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SttsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_CTTS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_CttsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StssAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IODS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IodsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ESDS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_EsdsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_AVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AvccAtom::Create(size_32, stream);\n            break;\n            \n          case AP4_ATOM_TYPE_HVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HvccAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_DVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_DvccAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HVCE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HvccAtom::Create(size_32, stream);\n            atom->SetType(AP4_ATOM_TYPE_HVCE);\n            break;\n\n          case AP4_ATOM_TYPE_AVCE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AvccAtom::Create(size_32, stream);\n            atom->SetType(AP4_ATOM_TYPE_AVCE);\n            break;\n\n    #if !defined(AP4_CONFIG_MINI_BUILD)\n          case AP4_ATOM_TYPE_UUID: {\n              AP4_UI08 uuid[16];\n              AP4_Result result = stream.Read(uuid, 16);\n              if (AP4_FAILED(result)) return result;\n              \n              if (AP4_CompareMemory(uuid, AP4_UUID_PIFF_TRACK_ENCRYPTION_ATOM, 16) == 0) {\n                  atom = AP4_PiffTrackEncryptionAtom::Create((AP4_UI32)size_64, stream);\n              } else if (AP4_CompareMemory(uuid, AP4_UUID_PIFF_SAMPLE_ENCRYPTION_ATOM, 16) == 0) {\n                  atom = AP4_PiffSampleEncryptionAtom::Create((AP4_UI32)size_64, stream);\n              } else {\n                  atom = new AP4_UnknownUuidAtom(size_64, uuid, stream);\n              }\n              break;\n          }\n            \n          case AP4_ATOM_TYPE_8ID_:\n            atom = new AP4_NullTerminatedStringAtom(type, size_64, stream);\n            break;\n\n          case AP4_ATOM_TYPE_8BDL:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_8bdlAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_DREF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_DrefAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_URL:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_UrlAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ELST:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_ElstAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_VMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_VmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_NMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_NmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SthdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_FRMA:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_FrmaAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SCHM:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SchmAtom::Create(size_32, &m_ContextStack, stream);\n            break;\n\n          case AP4_ATOM_TYPE_FTYP:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_FtypAtom::Create(size_32, stream);\n            break;\n                        \n          case AP4_ATOM_TYPE_TIMS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TimsAtom::Create(size_32, stream);\n            break;\n     \n          case AP4_ATOM_TYPE_SDP_:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SdpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IKMS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IkmsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ISFM:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IsfmAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ISLT:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IsltAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ODHE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OdheAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_OHDR:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OhdrAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ODDA:\n            atom = AP4_OddaAtom::Create(size_64, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ODAF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OdafAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_GRPI:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_GrpiAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IPRO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IproAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_RTP_:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_RtpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFDT:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfdtAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TENC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TencAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SENC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SencAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SAIZ:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SaizAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SAIO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SaioAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_PDIN:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_PdinAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_BLOC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_BlocAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_AINF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AinfAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_PSSH:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_PsshAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SIDX:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SidxAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SBGP:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SbgpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SGPD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SgpdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MKID:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            if (GetContext() == AP4_ATOM_TYPE_MARL) {\n                atom = AP4_MkidAtom::Create(size_32, stream);\n            }\n            break;\n\n          case AP4_ATOM_TYPE_DEC3:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            if (GetContext() == AP4_ATOM_TYPE_EC_3 || GetContext() == AP4_ATOM_TYPE_ENCA) {\n                atom = AP4_Dec3Atom::Create(size_32, stream);\n            }\n            break;\n\n          // track ref types\n          case AP4_ATOM_TYPE_HINT:\n          case AP4_ATOM_TYPE_CDSC:\n          case AP4_ATOM_TYPE_SYNC:\n          case AP4_ATOM_TYPE_MPOD:\n          case AP4_ATOM_TYPE_DPND:\n          case AP4_ATOM_TYPE_IPIR:\n          case AP4_ATOM_TYPE_ALIS:\n          case AP4_ATOM_TYPE_CHAP:\n            if (GetContext() == AP4_ATOM_TYPE_TREF) {\n                if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n                atom = AP4_TrefTypeAtom::Create(type, size_32, stream);\n            }\n            break;\n\n    #endif // AP4_CONFIG_MINI_BUILD\n\n          // container atoms\n          case AP4_ATOM_TYPE_MOOF:\n          case AP4_ATOM_TYPE_MVEX:\n          case AP4_ATOM_TYPE_TRAF:\n          case AP4_ATOM_TYPE_TREF:\n          case AP4_ATOM_TYPE_MFRA:\n          case AP4_ATOM_TYPE_HNTI:\n          case AP4_ATOM_TYPE_STBL:\n          case AP4_ATOM_TYPE_MDIA:\n          case AP4_ATOM_TYPE_DINF:\n          case AP4_ATOM_TYPE_MINF:\n          case AP4_ATOM_TYPE_SCHI:\n          case AP4_ATOM_TYPE_SINF:\n          case AP4_ATOM_TYPE_UDTA:\n          case AP4_ATOM_TYPE_ILST:\n          case AP4_ATOM_TYPE_EDTS: \n          case AP4_ATOM_TYPE_MDRI:\n          case AP4_ATOM_TYPE_WAVE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_ContainerAtom::Create(type, size_64, false, force_64, stream, *this);\n            break;\n\n          // containers, only at the top\n          case AP4_ATOM_TYPE_MARL:\n            if (GetContext() == 0) {\n                atom = AP4_ContainerAtom::Create(type, size_64, false, force_64, stream, *this);\n            }\n            break;\n            \n          // full container atoms\n          case AP4_ATOM_TYPE_META:\n          case AP4_ATOM_TYPE_ODRM:\n          case AP4_ATOM_TYPE_ODKM:\n            atom = AP4_ContainerAtom::Create(type, size_64, true, force_64, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_FREE:\n          case AP4_ATOM_TYPE_WIDE:\n          case AP4_ATOM_TYPE_MDAT:\n            // generic atoms\n            break;\n            \n          default: {\n            // try all the external type handlers\n            AP4_List<TypeHandler>::Item* handler_item = m_TypeHandlers.FirstItem();\n            while (handler_item) {\n                TypeHandler* handler = handler_item->GetData();\n                if (AP4_SUCCEEDED(handler->CreateAtom(type, size_32, stream, GetContext(), atom))) {\n                    break;\n                }\n                handler_item = handler_item->GetNext();\n            }\n\n            break;\n          }\n        }\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomsFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomsFromStream(AP4_ByteStream& stream, \n                                       AP4_AtomParent& atoms)\n{\n    AP4_LargeSize stream_size     = 0;\n    AP4_Position  stream_position = 0;\n    AP4_LargeSize bytes_available = (AP4_LargeSize)(-1);\n    if (AP4_SUCCEEDED(stream.GetSize(stream_size)) && \n        stream_size != 0 &&\n        AP4_SUCCEEDED(stream.Tell(stream_position)) &&\n        stream_position <= stream_size) {\n        bytes_available = stream_size-stream_position;\n    }\n    return CreateAtomsFromStream(stream, bytes_available, atoms);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomsFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomsFromStream(AP4_ByteStream& stream, \n                                       AP4_LargeSize   bytes_available,\n                                       AP4_AtomParent& atoms)\n{\n    AP4_Result result;\n    do {\n        AP4_Atom* atom = NULL;\n        result = CreateAtomFromStream(stream, bytes_available, atom);\n        if (AP4_SUCCEEDED(result) && atom != NULL) {\n            atoms.AddChild(atom);\n        }\n    } while (AP4_SUCCEEDED(result));\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::PushContext\n+---------------------------------------------------------------------*/\nvoid\nAP4_AtomFactory::PushContext(AP4_Atom::Type context) \n{\n    m_ContextStack.Append(context);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::PopContext\n+---------------------------------------------------------------------*/\nvoid\nAP4_AtomFactory::PopContext() \n{\n    m_ContextStack.RemoveLast();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::GetContext\n+---------------------------------------------------------------------*/\nAP4_Atom::Type\nAP4_AtomFactory::GetContext(AP4_Ordinal depth) \n{\n    AP4_Ordinal available = m_ContextStack.ItemCount();\n    if (depth >= available) return 0;\n    return m_ContextStack[available-depth-1];\n}\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Instance\n+---------------------------------------------------------------------*/\nAP4_DefaultAtomFactory AP4_DefaultAtomFactory::Instance_;\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Instance\n+---------------------------------------------------------------------*/\nAP4_DefaultAtomFactory::AP4_DefaultAtomFactory()\n{\n    Initialize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Initialize\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_DefaultAtomFactory::Initialize()\n{\n    // register built-in type handlers\n    AP4_Result result = AddTypeHandler(new AP4_MetaDataAtomTypeHandler(this));\n    if (AP4_SUCCEEDED(result)) m_Initialized = true;\n    return result;\n}\n"], "fixing_code": ["/*****************************************************************\n|\n|    AP4 - Atom Factory\n|\n|    Copyright 2002-2012 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4Types.h\"\n#include \"Ap4Utils.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4SampleEntry.h\"\n#include \"Ap4UuidAtom.h\"\n#include \"Ap4IsmaCryp.h\"\n#include \"Ap4UrlAtom.h\"\n#include \"Ap4MoovAtom.h\"\n#include \"Ap4MvhdAtom.h\"\n#include \"Ap4MehdAtom.h\"\n#include \"Ap4MfhdAtom.h\"\n#include \"Ap4TfhdAtom.h\"\n#include \"Ap4TrunAtom.h\"\n#include \"Ap4TrakAtom.h\"\n#include \"Ap4HdlrAtom.h\"\n#include \"Ap4DrefAtom.h\"\n#include \"Ap4TkhdAtom.h\"\n#include \"Ap4TrexAtom.h\"\n#include \"Ap4TfhdAtom.h\"\n#include \"Ap4MdhdAtom.h\"\n#include \"Ap4StsdAtom.h\"\n#include \"Ap4StscAtom.h\"\n#include \"Ap4StcoAtom.h\"\n#include \"Ap4Co64Atom.h\"\n#include \"Ap4StszAtom.h\"\n#include \"Ap4Stz2Atom.h\"\n#include \"Ap4IodsAtom.h\"\n#include \"Ap4EsdsAtom.h\"\n#include \"Ap4SttsAtom.h\"\n#include \"Ap4CttsAtom.h\"\n#include \"Ap4StssAtom.h\"\n#include \"Ap4FtypAtom.h\"\n#include \"Ap4VmhdAtom.h\"\n#include \"Ap4SmhdAtom.h\"\n#include \"Ap4NmhdAtom.h\"\n#include \"Ap4SthdAtom.h\"\n#include \"Ap4HmhdAtom.h\"\n#include \"Ap4ElstAtom.h\"\n#include \"Ap4SchmAtom.h\"\n#include \"Ap4FrmaAtom.h\"\n#include \"Ap4TimsAtom.h\"\n#include \"Ap4RtpAtom.h\"\n#include \"Ap4SdpAtom.h\"\n#include \"Ap4IkmsAtom.h\"\n#include \"Ap4IsfmAtom.h\"\n#include \"Ap4IsltAtom.h\"\n#include \"Ap4OdheAtom.h\"\n#include \"Ap4OhdrAtom.h\"\n#include \"Ap4OddaAtom.h\"\n#include \"Ap4TrefTypeAtom.h\"\n#include \"Ap4MetaData.h\"\n#include \"Ap4IproAtom.h\"\n#include \"Ap4OdafAtom.h\"\n#include \"Ap4GrpiAtom.h\"\n#include \"Ap4AvccAtom.h\"\n#include \"Ap4HvccAtom.h\"\n#include \"Ap4DvccAtom.h\"\n#include \"Ap4Marlin.h\"\n#include \"Ap48bdlAtom.h\"\n#include \"Ap4Piff.h\"\n#include \"Ap4TfraAtom.h\"\n#include \"Ap4MfroAtom.h\"\n#include \"Ap4TfdtAtom.h\"\n#include \"Ap4TencAtom.h\"\n#include \"Ap4SencAtom.h\"\n#include \"Ap4SaioAtom.h\"\n#include \"Ap4SaizAtom.h\"\n#include \"Ap4PdinAtom.h\"\n#include \"Ap4BlocAtom.h\"\n#include \"Ap4AinfAtom.h\"\n#include \"Ap4PsshAtom.h\"\n#include \"Ap4Dec3Atom.h\"\n#include \"Ap4SidxAtom.h\"\n#include \"Ap4SbgpAtom.h\"\n#include \"Ap4SgpdAtom.h\"\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::~AP4_AtomFactory\n+---------------------------------------------------------------------*/\nAP4_AtomFactory::~AP4_AtomFactory()\n{\n    m_TypeHandlers.DeleteReferences();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::AddTypeHandler\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::AddTypeHandler(TypeHandler* handler)\n{\n    return m_TypeHandlers.Add(handler);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::RemoveTypeHandler\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::RemoveTypeHandler(TypeHandler* handler)\n{\n    return m_TypeHandlers.Remove(handler);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_Atom*&      atom)\n{\n    AP4_LargeSize stream_size     = 0;\n    AP4_Position  stream_position = 0;\n    AP4_LargeSize bytes_available = (AP4_LargeSize)(-1);\n    if (AP4_SUCCEEDED(stream.GetSize(stream_size)) && \n        stream_size != 0 &&\n        AP4_SUCCEEDED(stream.Tell(stream_position)) &&\n        stream_position <= stream_size) {\n        bytes_available = stream_size-stream_position;\n    }\n    return CreateAtomFromStream(stream, bytes_available, atom);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_LargeSize&  bytes_available,\n                                      AP4_Atom*&      atom)\n{\n    AP4_Result result;\n\n    // NULL by default\n    atom = NULL;\n\n    // check that there are enough bytes for at least a header\n    if (bytes_available < 8) return AP4_ERROR_EOS;\n\n    // remember current stream offset\n    AP4_Position start;\n    stream.Tell(start);\n\n    // read atom size\n    AP4_UI32 size_32;\n    result = stream.ReadUI32(size_32);\n    if (AP4_FAILED(result)) {\n        stream.Seek(start);\n        return result;\n    }\n    AP4_UI64 size = size_32;\n\n    // read atom type\n    AP4_Atom::Type type;\n    result = stream.ReadUI32(type);\n    if (AP4_FAILED(result)) {\n        stream.Seek(start);\n        return result;\n    }\n\n    // handle special size values\n    bool atom_is_large = false;\n    bool force_64      = false;\n    if (size == 0) {\n        // atom extends to end of file\n        AP4_LargeSize stream_size = 0;\n        stream.GetSize(stream_size);\n        if (stream_size >= start) {\n            size = stream_size - start;\n        }\n    } else if (size == 1) {\n        // 64-bit size\n        atom_is_large = true;\n        if (bytes_available < 16) {\n            stream.Seek(start);\n            return AP4_ERROR_INVALID_FORMAT;\n        }\n        stream.ReadUI64(size);\n        if (size <= 0xFFFFFFFF) {\n            force_64 = true;\n        }\n    }\n\n    // check the size\n    if ((size > 0 && size < 8) || size > bytes_available) {\n        stream.Seek(start);\n        return AP4_ERROR_INVALID_FORMAT;\n    }\n\n    // create the atom\n    result = CreateAtomFromStream(stream, type, size_32, size, atom);\n    if (AP4_FAILED(result)) return result;\n    \n    // if we failed to create an atom, use a generic version\n    if (atom == NULL) {\n        unsigned int payload_offset = 8;\n        if (atom_is_large) payload_offset += 8;\n        stream.Seek(start+payload_offset);\n        atom = new AP4_UnknownAtom(type, size, stream);\n    }\n\n    // special case: if the atom is poorly encoded and has a 64-bit\n    // size header but an actual size that fits on 32-bit, adjust the\n    // object to reflect that.\n    if (force_64) {\n        atom->SetSize32(1);\n        atom->SetSize64(size);\n    }\n\n    // adjust the available size\n    bytes_available -= size;\n\n    // skip to the end of the atom\n    result = stream.Seek(start+size);\n    if (AP4_FAILED(result)) {\n        delete atom;\n        atom = NULL;\n        return result;\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomFromStream(AP4_ByteStream& stream, \n                                      AP4_UI32        type,\n                                      AP4_UI32        size_32,\n                                      AP4_UI64        size_64,\n                                      AP4_Atom*&      atom)\n{\n    bool atom_is_large = (size_32 == 1);\n    bool force_64 = (size_32==1 && ((size_64>>32) == 0));\n    \n    // create the atom\n    if (GetContext() == AP4_ATOM_TYPE_STSD) {\n        // sample entry\n        if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n        switch (type) {\n          case AP4_ATOM_TYPE_MP4A:\n            atom = new AP4_Mp4aSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MP4V:\n            atom = new AP4_Mp4vSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MP4S:\n            atom = new AP4_Mp4sSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ENCA:\n            atom = new AP4_EncaSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ENCV:\n            atom = new AP4_EncvSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_DRMS:\n            atom = new AP4_DrmsSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_DRMI:\n            atom = new AP4_DrmiSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_AVC1:\n          case AP4_ATOM_TYPE_AVC2:\n          case AP4_ATOM_TYPE_AVC3:\n          case AP4_ATOM_TYPE_AVC4:\n          case AP4_ATOM_TYPE_DVAV:\n          case AP4_ATOM_TYPE_DVA1:\n            atom = new AP4_AvcSampleEntry(type, size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_HEV1:\n          case AP4_ATOM_TYPE_HVC1:\n          case AP4_ATOM_TYPE_DVHE:\n          case AP4_ATOM_TYPE_DVH1:\n            atom = new AP4_HevcSampleEntry(type, size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ALAC:\n          case AP4_ATOM_TYPE_AC_3:\n          case AP4_ATOM_TYPE_EC_3:\n          case AP4_ATOM_TYPE_DTSC:\n          case AP4_ATOM_TYPE_DTSH:\n          case AP4_ATOM_TYPE_DTSL:\n          case AP4_ATOM_TYPE_DTSE:\n            atom = new AP4_AudioSampleEntry(type, size_32, stream, *this);\n            break;\n            \n          case AP4_ATOM_TYPE_RTP_:\n            atom = new AP4_RtpHintSampleEntry(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_STPP:\n            atom = new AP4_SubtitleSampleEntry(type, size_32, stream, *this);\n            break;\n\n          default: {\n            // try all the external type handlers\n            AP4_List<TypeHandler>::Item* handler_item = m_TypeHandlers.FirstItem();\n            while (handler_item) {\n                TypeHandler* handler = handler_item->GetData();\n                if (AP4_SUCCEEDED(handler->CreateAtom(type, size_32, stream, GetContext(), atom))) {\n                    break;\n                }\n                handler_item = handler_item->GetNext();\n            }\n\n            // no custom handler, create a generic entry\n            if (atom == NULL) {\n                atom = new AP4_UnknownSampleEntry(type, (AP4_UI32)size_64, stream);\n            }\n\n            break;\n          }\n        }\n    } else {\n        // regular atom\n        switch (type) {\n          case AP4_ATOM_TYPE_MOOV:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MoovAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_MVHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MvhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MEHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MehdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MFHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MfhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TRAK:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrakAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_TREX:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrexAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HDLR:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HdlrAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TKHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TkhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TRUN:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TrunAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFRA:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfraAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MFRO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MfroAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MDHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_MdhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StsdAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_STSC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StscAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STCO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StcoAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_CO64:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_Co64Atom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSZ:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StszAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STZ2:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_Stz2Atom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STTS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SttsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_CTTS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_CttsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STSS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_StssAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IODS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IodsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ESDS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_EsdsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_AVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AvccAtom::Create(size_32, stream);\n            break;\n            \n          case AP4_ATOM_TYPE_HVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HvccAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_DVCC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_DvccAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HVCE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HvccAtom::Create(size_32, stream);\n            if (atom) {\n                atom->SetType(AP4_ATOM_TYPE_HVCE);\n            }\n            break;\n\n          case AP4_ATOM_TYPE_AVCE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AvccAtom::Create(size_32, stream);\n            if (atom) {\n                atom->SetType(AP4_ATOM_TYPE_AVCE);\n            }\n            break;\n\n    #if !defined(AP4_CONFIG_MINI_BUILD)\n          case AP4_ATOM_TYPE_UUID: {\n              AP4_UI08 uuid[16];\n              AP4_Result result = stream.Read(uuid, 16);\n              if (AP4_FAILED(result)) return result;\n              \n              if (AP4_CompareMemory(uuid, AP4_UUID_PIFF_TRACK_ENCRYPTION_ATOM, 16) == 0) {\n                  atom = AP4_PiffTrackEncryptionAtom::Create((AP4_UI32)size_64, stream);\n              } else if (AP4_CompareMemory(uuid, AP4_UUID_PIFF_SAMPLE_ENCRYPTION_ATOM, 16) == 0) {\n                  atom = AP4_PiffSampleEncryptionAtom::Create((AP4_UI32)size_64, stream);\n              } else {\n                  atom = new AP4_UnknownUuidAtom(size_64, uuid, stream);\n              }\n              break;\n          }\n            \n          case AP4_ATOM_TYPE_8ID_:\n            atom = new AP4_NullTerminatedStringAtom(type, size_64, stream);\n            break;\n\n          case AP4_ATOM_TYPE_8BDL:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_8bdlAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_DREF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_DrefAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_URL:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_UrlAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ELST:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_ElstAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_VMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_VmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_NMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_NmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_STHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SthdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_HMHD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_HmhdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_FRMA:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_FrmaAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SCHM:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SchmAtom::Create(size_32, &m_ContextStack, stream);\n            break;\n\n          case AP4_ATOM_TYPE_FTYP:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_FtypAtom::Create(size_32, stream);\n            break;\n                        \n          case AP4_ATOM_TYPE_TIMS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TimsAtom::Create(size_32, stream);\n            break;\n     \n          case AP4_ATOM_TYPE_SDP_:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SdpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IKMS:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IkmsAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ISFM:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IsfmAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ISLT:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IsltAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ODHE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OdheAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_OHDR:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OhdrAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_ODDA:\n            atom = AP4_OddaAtom::Create(size_64, stream);\n            break;\n\n          case AP4_ATOM_TYPE_ODAF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_OdafAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_GRPI:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_GrpiAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_IPRO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_IproAtom::Create(size_32, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_RTP_:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_RtpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TFDT:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TfdtAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_TENC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_TencAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SENC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SencAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SAIZ:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SaizAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SAIO:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SaioAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_PDIN:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_PdinAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_BLOC:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_BlocAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_AINF:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_AinfAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_PSSH:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_PsshAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SIDX:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SidxAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SBGP:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SbgpAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_SGPD:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_SgpdAtom::Create(size_32, stream);\n            break;\n\n          case AP4_ATOM_TYPE_MKID:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            if (GetContext() == AP4_ATOM_TYPE_MARL) {\n                atom = AP4_MkidAtom::Create(size_32, stream);\n            }\n            break;\n\n          case AP4_ATOM_TYPE_DEC3:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            if (GetContext() == AP4_ATOM_TYPE_EC_3 || GetContext() == AP4_ATOM_TYPE_ENCA) {\n                atom = AP4_Dec3Atom::Create(size_32, stream);\n            }\n            break;\n\n          // track ref types\n          case AP4_ATOM_TYPE_HINT:\n          case AP4_ATOM_TYPE_CDSC:\n          case AP4_ATOM_TYPE_SYNC:\n          case AP4_ATOM_TYPE_MPOD:\n          case AP4_ATOM_TYPE_DPND:\n          case AP4_ATOM_TYPE_IPIR:\n          case AP4_ATOM_TYPE_ALIS:\n          case AP4_ATOM_TYPE_CHAP:\n            if (GetContext() == AP4_ATOM_TYPE_TREF) {\n                if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n                atom = AP4_TrefTypeAtom::Create(type, size_32, stream);\n            }\n            break;\n\n    #endif // AP4_CONFIG_MINI_BUILD\n\n          // container atoms\n          case AP4_ATOM_TYPE_MOOF:\n          case AP4_ATOM_TYPE_MVEX:\n          case AP4_ATOM_TYPE_TRAF:\n          case AP4_ATOM_TYPE_TREF:\n          case AP4_ATOM_TYPE_MFRA:\n          case AP4_ATOM_TYPE_HNTI:\n          case AP4_ATOM_TYPE_STBL:\n          case AP4_ATOM_TYPE_MDIA:\n          case AP4_ATOM_TYPE_DINF:\n          case AP4_ATOM_TYPE_MINF:\n          case AP4_ATOM_TYPE_SCHI:\n          case AP4_ATOM_TYPE_SINF:\n          case AP4_ATOM_TYPE_UDTA:\n          case AP4_ATOM_TYPE_ILST:\n          case AP4_ATOM_TYPE_EDTS: \n          case AP4_ATOM_TYPE_MDRI:\n          case AP4_ATOM_TYPE_WAVE:\n            if (atom_is_large) return AP4_ERROR_INVALID_FORMAT;\n            atom = AP4_ContainerAtom::Create(type, size_64, false, force_64, stream, *this);\n            break;\n\n          // containers, only at the top\n          case AP4_ATOM_TYPE_MARL:\n            if (GetContext() == 0) {\n                atom = AP4_ContainerAtom::Create(type, size_64, false, force_64, stream, *this);\n            }\n            break;\n            \n          // full container atoms\n          case AP4_ATOM_TYPE_META:\n          case AP4_ATOM_TYPE_ODRM:\n          case AP4_ATOM_TYPE_ODKM:\n            atom = AP4_ContainerAtom::Create(type, size_64, true, force_64, stream, *this);\n            break;\n\n          case AP4_ATOM_TYPE_FREE:\n          case AP4_ATOM_TYPE_WIDE:\n          case AP4_ATOM_TYPE_MDAT:\n            // generic atoms\n            break;\n            \n          default: {\n            // try all the external type handlers\n            AP4_List<TypeHandler>::Item* handler_item = m_TypeHandlers.FirstItem();\n            while (handler_item) {\n                TypeHandler* handler = handler_item->GetData();\n                if (AP4_SUCCEEDED(handler->CreateAtom(type, size_32, stream, GetContext(), atom))) {\n                    break;\n                }\n                handler_item = handler_item->GetNext();\n            }\n\n            break;\n          }\n        }\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomsFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomsFromStream(AP4_ByteStream& stream, \n                                       AP4_AtomParent& atoms)\n{\n    AP4_LargeSize stream_size     = 0;\n    AP4_Position  stream_position = 0;\n    AP4_LargeSize bytes_available = (AP4_LargeSize)(-1);\n    if (AP4_SUCCEEDED(stream.GetSize(stream_size)) && \n        stream_size != 0 &&\n        AP4_SUCCEEDED(stream.Tell(stream_position)) &&\n        stream_position <= stream_size) {\n        bytes_available = stream_size-stream_position;\n    }\n    return CreateAtomsFromStream(stream, bytes_available, atoms);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::CreateAtomsFromStream\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AtomFactory::CreateAtomsFromStream(AP4_ByteStream& stream, \n                                       AP4_LargeSize   bytes_available,\n                                       AP4_AtomParent& atoms)\n{\n    AP4_Result result;\n    do {\n        AP4_Atom* atom = NULL;\n        result = CreateAtomFromStream(stream, bytes_available, atom);\n        if (AP4_SUCCEEDED(result) && atom != NULL) {\n            atoms.AddChild(atom);\n        }\n    } while (AP4_SUCCEEDED(result));\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::PushContext\n+---------------------------------------------------------------------*/\nvoid\nAP4_AtomFactory::PushContext(AP4_Atom::Type context) \n{\n    m_ContextStack.Append(context);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::PopContext\n+---------------------------------------------------------------------*/\nvoid\nAP4_AtomFactory::PopContext() \n{\n    m_ContextStack.RemoveLast();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AtomFactory::GetContext\n+---------------------------------------------------------------------*/\nAP4_Atom::Type\nAP4_AtomFactory::GetContext(AP4_Ordinal depth) \n{\n    AP4_Ordinal available = m_ContextStack.ItemCount();\n    if (depth >= available) return 0;\n    return m_ContextStack[available-depth-1];\n}\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Instance\n+---------------------------------------------------------------------*/\nAP4_DefaultAtomFactory AP4_DefaultAtomFactory::Instance_;\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Instance\n+---------------------------------------------------------------------*/\nAP4_DefaultAtomFactory::AP4_DefaultAtomFactory()\n{\n    Initialize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_DefaultAtomFactory::Initialize\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_DefaultAtomFactory::Initialize()\n{\n    // register built-in type handlers\n    AP4_Result result = AddTypeHandler(new AP4_MetaDataAtomTypeHandler(this));\n    if (AP4_SUCCEEDED(result)) m_Initialized = true;\n    return result;\n}\n"], "filenames": ["Source/C++/Core/Ap4AtomFactory.cpp"], "buggy_code_start_loc": [493], "buggy_code_end_loc": [500], "fixing_code_start_loc": [493], "fixing_code_end_loc": [504], "type": "CWE-476", "message": "AP4_AtomFactory::CreateAtomFromStream in Core/Ap4AtomFactory.cpp in Bento4 version 1.5.0-617 has missing NULL checks, leading to a NULL pointer dereference, segmentation fault, and application crash in AP4_Atom::SetType in Core/Ap4Atom.h.", "other": {"cve": {"id": "CVE-2017-14638", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-21T17:29:00.167", "lastModified": "2017-09-28T16:15:53.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "AP4_AtomFactory::CreateAtomFromStream in Core/Ap4AtomFactory.cpp in Bento4 version 1.5.0-617 has missing NULL checks, leading to a NULL pointer dereference, segmentation fault, and application crash in AP4_Atom::SetType in Core/Ap4Atom.h."}, {"lang": "es", "value": "AP4_AtomFactory::CreateAtomFromStream en Core/Ap4AtomFactory.cpp en Bento4 1.5.0-617 carece de mecanismos de verificaci\u00f3n de valores NULL, lo que puede provocar una desreferencia de puntero NULL, fallo de segmentaci\u00f3n y el cierre inesperado de la aplicaci\u00f3n en AP4_Atom::SetType en Core/Ap4Atom.h."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bento4:bento4:1.5.0-617:*:*:*:*:*:*:*", "matchCriteriaId": "E91AC306-5354-4B0C-B481-CBA451648D90"}]}]}], "references": [{"url": "https://blogs.gentoo.org/ago/2017/09/14/bento4-null-pointer-dereference-in-ap4_atomsettype-ap4atom-h/", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/axiomatic-systems/Bento4/commit/be7185faf7f52674028977dcf501c6039ff03aa5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/axiomatic-systems/Bento4/issues/182", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/axiomatic-systems/Bento4/commit/be7185faf7f52674028977dcf501c6039ff03aa5"}}