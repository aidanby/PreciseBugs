{"buggy_code": ["<?php\n\n/**\n * The News class for phpMyFAQ news.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-06-25\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class News\n *\n * @package phpMyFAQ\n */\nclass News\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var array<string>\n     */\n    private $pmfLang;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfLang = $PMF_LANG;\n    }\n\n    /**\n     * Function for generating the HTML5 code for the current news.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @return string\n     * @throws Exception\n     */\n    public function getNews(bool $showArchive = false, bool $active = true): string\n    {\n        $output = '';\n        $news = $this->getLatestData($showArchive, $active);\n        $date = new Date($this->config);\n\n        foreach ($news as $item) {\n            $url = sprintf(\n                '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                $this->config->getDefaultUrl(),\n                $item['id'],\n                $item['lang']\n            );\n\n            $oLink = new Link($url, $this->config);\n\n            if (isset($item['header'])) {\n                $oLink->itemTitle = Strings::htmlentities($item['header']);\n            }\n\n            $output .= sprintf(\n                '<h6%s><a id=\"news_%d\" href=\"%s\">%s <i aria-hidden=\"true\" class=\"fa fa-caret-right\"></i></a></h6>',\n                ' class=\"pmf-news-heading\"',\n                $item['id'],\n                Strings::htmlentities($oLink->toString()),\n                Strings::htmlentities($item['header'])\n            );\n\n            $output .= sprintf('%s', $item['content']);\n\n            if (strlen($item['link']) > 1) {\n                $output .= sprintf(\n                    '<br>%s <a href=\"%s\" target=\"_%s\">%s</a>',\n                    $this->pmfLang['msgInfo'],\n                    Strings::htmlentities($item['link']),\n                    $item['target'],\n                    Strings::htmlentities($item['linkTitle'])\n                );\n            }\n\n            $output .= sprintf('<small class=\"text-muted\">%s</small>', $date->format($item['date']));\n        }\n\n        return ('' == $output) ? $this->pmfLang['msgNoNews'] : $output;\n    }\n\n    /**\n     * Return the latest news data.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @param bool $forceConfLimit Force to limit in configuration\n     * @return array<int, array<mixed>>\n     */\n    public function getLatestData($showArchive = false, $active = true, $forceConfLimit = false): array\n    {\n        $news = [];\n        $counter = 0;\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                date_start <= '%s'\n            AND \n                date_end   >= '%s'\n            %s\n            AND\n                lang = '%s'\n            ORDER BY\n                datum DESC\",\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $active ? \"AND active = 'y'\" : '',\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $numberOfShownNewsEntries = $this->config->get('records.numberOfShownNewsEntries');\n        if ($numberOfShownNewsEntries > 0 && $this->config->getDb()->numRows($result) > 0) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                ++$counter;\n                if (\n                    ($showArchive && ($counter > $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && (!$forceConfLimit) && ($counter <= $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && $forceConfLimit)\n                ) {\n                    $url = sprintf(\n                        '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                        $this->config->getDefaultUrl(),\n                        $row->id,\n                        $row->lang\n                    );\n                    $oLink = new Link($url, $this->config);\n                    $oLink->itemTitle = $row->header;\n\n                    $item = [\n                        'id' => (int)$row->id,\n                        'lang' => $row->lang,\n                        'date' => Date::createIsoDate($row->datum, DATE_ISO8601, true),\n                        'header' => $row->header,\n                        'content' => $row->artikel,\n                        'authorName' => $row->author_name,\n                        'authorEmail' => $row->author_email,\n                        'dateStart' => $row->date_start,\n                        'dateEnd' => $row->date_end,\n                        'active' => ('y' == $row->active),\n                        'allowComments' => ('y' == $row->comment),\n                        'link' => $row->link,\n                        'linkTitle' => $row->linktitel,\n                        'target' => $row->target,\n                        'url' => $oLink->toString()\n                    ];\n                    $news[] = $item;\n                }\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Fetches all news headers.\n     *\n     * @return array<mixed>\n     */\n    public function getNewsHeader(): array\n    {\n        $headers = [];\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id, datum, lang, header, active, date_start, date_end\n            FROM\n                %sfaqnews\n            WHERE\n                lang = '%s'\n            ORDER BY\n                datum DESC\", Database::getTablePrefix(), $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $expired = ($now > $row->date_end);\n                $headers[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'header' => $row->header,\n                    'date' => Date::createIsoDate($row->datum),\n                    'active' => $row->active,\n                    'expired' => $expired,\n                );\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Fetches a news entry identified by its ID.\n     *\n     * @param int  $id ID of news\n     * @param bool $admin Is admin\n     * @return array<mixed>\n     */\n    public function getNewsEntry($id, $admin = false): array\n    {\n        $news = [];\n\n        $query = sprintf(\"SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            if ($row = $this->config->getDb()->fetchObject($result)) {\n                $content = $row->artikel;\n                $active = ('y' == $row->active);\n                $allowComments = ('y' == $row->comment);\n                $expired = (date('YmdHis') > $row->date_end);\n\n                if (!$admin) {\n                    if (!$active) {\n                        $content = $this->pmfLang['err_inactiveNews'];\n                    }\n                    if ($expired) {\n                        $content = $this->pmfLang['err_expiredNews'];\n                    }\n                }\n\n                $news = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'date' => Date::createIsoDate($row->datum),\n                    'header' => $row->header,\n                    'content' => $content,\n                    'authorName' => $row->author_name,\n                    'authorEmail' => $row->author_email,\n                    'dateStart' => $row->date_start,\n                    'dateEnd' => $row->date_end,\n                    'active' => $active,\n                    'allowComments' => $allowComments,\n                    'link' => $row->link,\n                    'linkTitle' => $row->linktitel,\n                    'target' => $row->target,\n                );\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Adds a new news entry.\n     *\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function addNewsEntry(array $data): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqnews\n            (id, datum, lang, header, artikel, author_name, author_email, date_start, date_end, active, comment,\n            link, linktitel, target)\n                VALUES\n            (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqnews', 'id'),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target']\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates a new news entry identified by its ID.\n     *\n     * @param int          $id News ID\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function updateNewsEntry(int $id, array $data): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqnews\n            SET\n                datum = '%s',\n                lang = '%s',\n                header = '%s',\n                artikel = '%s',\n                author_name = '%s',\n                author_email = '%s',\n                date_start = '%s',\n                date_end = '%s',\n                active = '%s',\n                comment = '%s',\n                link = '%s',\n                linktitel = '%s',\n                target = '%s'\n            WHERE\n                id = %d\",\n            Database::getTablePrefix(),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target'],\n            $id\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a news entry identified by its ID.\n     *\n     * @param int $id News ID\n     * @return bool\n     * @todo   check if there are comments attached to the deleted news\n     */\n    public function deleteNews($id): bool\n    {\n        $query = sprintf(\"DELETE FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The News class for phpMyFAQ news.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-06-25\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class News\n *\n * @package phpMyFAQ\n */\nclass News\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Language strings.\n     *\n     * @var array<string>\n     */\n    private $pmfLang;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfLang = $PMF_LANG;\n    }\n\n    /**\n     * Function for generating the HTML5 code for the current news.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @return string\n     * @throws Exception\n     */\n    public function getNews(bool $showArchive = false, bool $active = true): string\n    {\n        $output = '';\n        $news = $this->getLatestData($showArchive, $active);\n        $date = new Date($this->config);\n\n        foreach ($news as $item) {\n            $url = sprintf(\n                '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                $this->config->getDefaultUrl(),\n                $item['id'],\n                $item['lang']\n            );\n\n            $oLink = new Link($url, $this->config);\n\n            if (isset($item['header'])) {\n                $oLink->itemTitle = Strings::htmlentities($item['header']);\n            }\n\n            $output .= sprintf(\n                '<h6%s><a id=\"news_%d\" href=\"%s\">%s <i aria-hidden=\"true\" class=\"fa fa-caret-right\"></i></a></h6>',\n                ' class=\"pmf-news-heading\"',\n                $item['id'],\n                Strings::htmlentities($oLink->toString()),\n                Strings::htmlentities($item['header'])\n            );\n\n            $output .= sprintf('%s', strip_tags($item['content']));\n\n            if (strlen($item['link']) > 1) {\n                $output .= sprintf(\n                    '<br>%s <a href=\"%s\" target=\"_%s\">%s</a>',\n                    $this->pmfLang['msgInfo'],\n                    Strings::htmlentities($item['link']),\n                    $item['target'],\n                    Strings::htmlentities($item['linkTitle'])\n                );\n            }\n\n            $output .= sprintf('<small class=\"text-muted\">%s</small>', $date->format($item['date']));\n        }\n\n        return ('' == $output) ? $this->pmfLang['msgNoNews'] : $output;\n    }\n\n    /**\n     * Return the latest news data.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @param bool $forceConfLimit Force to limit in configuration\n     * @return array<int, array<mixed>>\n     */\n    public function getLatestData(bool $showArchive = false, bool $active = true, bool $forceConfLimit = false): array\n    {\n        $news = [];\n        $counter = 0;\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                date_start <= '%s'\n            AND \n                date_end   >= '%s'\n            %s\n            AND\n                lang = '%s'\n            ORDER BY\n                datum DESC\",\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $active ? \"AND active = 'y'\" : '',\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $numberOfShownNewsEntries = $this->config->get('records.numberOfShownNewsEntries');\n        if ($numberOfShownNewsEntries > 0 && $this->config->getDb()->numRows($result) > 0) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                ++$counter;\n                if (\n                    ($showArchive && ($counter > $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && (!$forceConfLimit) && ($counter <= $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && $forceConfLimit)\n                ) {\n                    $url = sprintf(\n                        '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                        $this->config->getDefaultUrl(),\n                        $row->id,\n                        $row->lang\n                    );\n                    $oLink = new Link($url, $this->config);\n                    $oLink->itemTitle = $row->header;\n\n                    $item = [\n                        'id' => (int)$row->id,\n                        'lang' => $row->lang,\n                        'date' => Date::createIsoDate($row->datum, DATE_ISO8601, true),\n                        'header' => $row->header,\n                        'content' => $row->artikel,\n                        'authorName' => $row->author_name,\n                        'authorEmail' => $row->author_email,\n                        'dateStart' => $row->date_start,\n                        'dateEnd' => $row->date_end,\n                        'active' => ('y' == $row->active),\n                        'allowComments' => ('y' == $row->comment),\n                        'link' => $row->link,\n                        'linkTitle' => $row->linktitel,\n                        'target' => $row->target,\n                        'url' => $oLink->toString()\n                    ];\n                    $news[] = $item;\n                }\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Fetches all news headers.\n     *\n     * @return array<mixed>\n     */\n    public function getNewsHeader(): array\n    {\n        $headers = [];\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id, datum, lang, header, active, date_start, date_end\n            FROM\n                %sfaqnews\n            WHERE\n                lang = '%s'\n            ORDER BY\n                datum DESC\", Database::getTablePrefix(), $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $expired = ($now > $row->date_end);\n                $headers[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'header' => $row->header,\n                    'date' => Date::createIsoDate($row->datum),\n                    'active' => $row->active,\n                    'expired' => $expired,\n                );\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Fetches a news entry identified by its ID.\n     *\n     * @param int  $id ID of news\n     * @param bool $admin Is admin\n     * @return array<mixed>\n     */\n    public function getNewsEntry($id, $admin = false): array\n    {\n        $news = [];\n\n        $query = sprintf(\"SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            if ($row = $this->config->getDb()->fetchObject($result)) {\n                $content = $row->artikel;\n                $active = ('y' == $row->active);\n                $allowComments = ('y' == $row->comment);\n                $expired = (date('YmdHis') > $row->date_end);\n\n                if (!$admin) {\n                    if (!$active) {\n                        $content = $this->pmfLang['err_inactiveNews'];\n                    }\n                    if ($expired) {\n                        $content = $this->pmfLang['err_expiredNews'];\n                    }\n                }\n\n                $news = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'date' => Date::createIsoDate($row->datum),\n                    'header' => $row->header,\n                    'content' => $content,\n                    'authorName' => $row->author_name,\n                    'authorEmail' => $row->author_email,\n                    'dateStart' => $row->date_start,\n                    'dateEnd' => $row->date_end,\n                    'active' => $active,\n                    'allowComments' => $allowComments,\n                    'link' => $row->link,\n                    'linkTitle' => $row->linktitel,\n                    'target' => $row->target,\n                );\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Adds a new news entry.\n     *\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function addNewsEntry(array $data): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqnews\n            (id, datum, lang, header, artikel, author_name, author_email, date_start, date_end, active, comment,\n            link, linktitel, target)\n                VALUES\n            (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqnews', 'id'),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target']\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates a new news entry identified by its ID.\n     *\n     * @param int          $id News ID\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function updateNewsEntry(int $id, array $data): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqnews\n            SET\n                datum = '%s',\n                lang = '%s',\n                header = '%s',\n                artikel = '%s',\n                author_name = '%s',\n                author_email = '%s',\n                date_start = '%s',\n                date_end = '%s',\n                active = '%s',\n                comment = '%s',\n                link = '%s',\n                linktitel = '%s',\n                target = '%s'\n            WHERE\n                id = %d\",\n            Database::getTablePrefix(),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target'],\n            $id\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a news entry identified by its ID.\n     *\n     * @param int $id News ID\n     * @return bool\n     * @todo   check if there are comments attached to the deleted news\n     */\n    public function deleteNews($id): bool\n    {\n        $query = sprintf(\"DELETE FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/News.php"], "buggy_code_start_loc": [90], "buggy_code_end_loc": [117], "fixing_code_start_loc": [90], "fixing_code_end_loc": [117], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.14.", "other": {"cve": {"id": "CVE-2023-2998", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-31T01:15:43.103", "lastModified": "2023-06-03T00:44:42.607", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.14."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.14", "matchCriteriaId": "B486032C-0BF4-4D1C-ABDB-56607585ADC3"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/c120070a66e6c497c328d3b6b067eebcd8ea8493", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/8282d78e-f399-4bf4-8403-f39103a31e78", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/c120070a66e6c497c328d3b6b067eebcd8ea8493"}}