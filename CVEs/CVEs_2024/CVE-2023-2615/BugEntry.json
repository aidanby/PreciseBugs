{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.properties.predefined\");\npimcore.settings.properties.predefined = Class.create({\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"predefined_properties\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"predefined_properties\",\n                title: t(\"predefined_properties\"),\n                iconCls: \"pimcore_icon_properties\",\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"predefined_properties\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"predefined_properties\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n\n        var url = Routing.generate('pimcore_admin_settings_properties');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            ['id',\n\n                {name: 'name', allowBlank: false},'description',\n                {name: 'key', allowBlank: false},\n                {name: 'type', allowBlank: false}, 'data', 'config',\n                {name: 'ctype', allowBlank: false}, 'inheritable', 'creationDate', 'modificationDate'\n\n            ], null, {\n                remoteSort: false,\n                remoteFilter: false\n            }\n        );\n        this.store.setAutoSync(true);\n\n        this.filterField = new Ext.form.TextField({\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            listeners: {\n                \"keydown\" : function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        var inheritableCheck = new Ext.grid.column.Check({\n            text: t(\"inheritable\"),\n            dataIndex: \"inheritable\",\n            editor: {\n                xtype: 'checkbox',\n            },\n            width: 50\n        });\n\n        var contentTypesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: ['value', 'text'],\n            data: [\n                ['document', 'document'],\n                ['asset', 'asset'],\n                ['object', 'object']\n            ],\n            autoLoad: true\n        });\n\n\n        var propertiesColumns = [\n            {text: t(\"name\"), flex: 100, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({})},\n            {text: t(\"description\"), sortable: true, dataIndex: 'description', editor: new Ext.form.TextArea({}),\n                renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                    if(empty(value)) {\n                        return \"\";\n                    }\n                    return nl2br(Ext.util.Format.htmlEncode(value));\n               }\n            },\n            {text: t(\"key\"), flex: 50, sortable: true, dataIndex: 'key', editor: new Ext.form.TextField({})},\n            {text: t(\"type\"), flex: 50, sortable: true, dataIndex: 'type',\n                editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [\"text\",\"document\",\"asset\",\"object\",\"bool\",\"select\"]\n\n            })},\n            {text: t(\"value\"), flex: 50, sortable: true, dataIndex: 'data', editor: new Ext.form.TextField({})},\n            {text: t(\"configuration\"), flex: 50, sortable: false, dataIndex: 'config', editor: new Ext.form.TextField({})},\n            {text: t(\"content_type\"), flex: 50, sortable: true, dataIndex: 'ctype',\n                editor: new Ext.ux.form.MultiSelect({\n                    store: new Ext.data.ArrayStore({\n                        fields: ['key', {\n                            name: 'value',\n                            convert: function (v, r) {\n                                if (Array.isArray(v)) {\n                                    return v.join(\";\");\n                                }\n                                return v;\n                            }\n                        }],\n                        data: [\n                            ['document', 'document'],\n                            ['object', ['object']],\n                            ['asset', ['asset']]\n                        ],\n                    }),\n                    displayField: 'key',\n                    valueField: 'value',\n                }),\n            },\n            inheritableCheck,\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    getClass: function(v, meta, rec) {\n                      var klass = \"pimcore_action_column \";\n                      if(rec.data.writeable) {\n                          klass += \"pimcore_icon_minus\";\n                      }\n                      return klass;\n                    },\n                    tooltip: t('delete'),\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('predefined_properties'),\n                            Ext.util.Format.htmlEncode(data.data.name),\n                            function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            },{\n                xtype: 'actioncolumn',\n                menuText: t('translate'),\n                width: 30,\n                items: [{\n                    tooltip: t('translate'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/collaboration.svg\",\n                    handler: function(grid, rowIndex){\n                        var rec = grid.getStore().getAt(rowIndex);\n                        try {\n                            pimcore.globalmanager.get(\"translationdomainmanager\").activate(rec.data.name);\n                        } catch (e) {\n                            pimcore.globalmanager.add(\"translationdomainmanager\",\n                                new pimcore.settings.translation.domain(\"admin\", rec.data.name));\n                        }\n                    }.bind(this)\n                }]\n            },\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n\n        ];\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (editor, context, eOpts) {\n                    if (!context.record.data.writeable) {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            columns: {\n                items: propertiesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\",\n                        disabled: !pimcore.settings['predefined-properties-writeable']\n                    },\"->\",{\n                        text: t(\"filter\") + \"/\" + t(\"search\"),\n                        xtype: \"tbtext\",\n                        style: \"margin: 0 10px 0 0;\"\n                    },\n                    this.filterField\n                ]\n            },\n            viewConfig: {\n                forceFit: true,\n                getRowClass: function (record, rowIndex) {\n                    return record.data.writeable ? '' : 'pimcore_grid_row_disabled';\n                }\n            }\n        });\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            name: t('new_property'),\n            key: \"new_key\",\n            ctype: \"document\",\n            type: \"text\"\n        });\n    }\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Property;\n\nuse Pimcore\\Model;\n\n/**\n * @internal\n *\n * @method bool isWriteable()\n * @method string getWriteTarget()\n * @method \\Pimcore\\Model\\Property\\Predefined\\Dao getDao()\n * @method void delete()\n * @method void save()\n */\nfinal class Predefined extends Model\\AbstractModel\n{\n    /**\n     * @var string\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $description;\n\n    /**\n     * @var string|null\n     */\n    protected $key;\n\n    /**\n     * @var string\n     */\n    protected $type;\n\n    /**\n     * @var string\n     */\n    protected $data;\n\n    /**\n     * @var string\n     */\n    protected $config;\n\n    /**\n     * @var string\n     */\n    protected $ctype;\n\n    /**\n     * @var bool\n     */\n    protected $inheritable = false;\n\n    /**\n     * @var int|null\n     */\n    protected $creationDate;\n\n    /**\n     * @var int|null\n     */\n    protected $modificationDate;\n\n    /**\n     * @param string $id\n     *\n     * @return self|null\n     */\n    public static function getById($id)\n    {\n        try {\n            $property = new self();\n            $property->getDao()->getById($id);\n\n            return $property;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return self|null\n     */\n    public static function getByKey($key)\n    {\n        $cacheKey = 'property_predefined_' . $key;\n\n        try {\n            $property = \\Pimcore\\Cache\\RuntimeCache::get($cacheKey);\n            if (!$property) {\n                throw new \\Exception('Predefined property in registry is null');\n            }\n        } catch (\\Exception $e) {\n            try {\n                $property = new self();\n                $property->getDao()->getByKey($key);\n                \\Pimcore\\Cache\\RuntimeCache::set($cacheKey, $property);\n            } catch (Model\\Exception\\NotFoundException $e) {\n                return null;\n            }\n        }\n\n        return $property;\n    }\n\n    /**\n     * @return self\n     */\n    public static function create()\n    {\n        $type = new self();\n        $type->save();\n\n        return $type;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getKey()\n    {\n        return $this->key;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return string\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n\n    /**\n     * @return string\n     */\n    public function getData()\n    {\n        return $this->data;\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return $this\n     */\n    public function setKey($key)\n    {\n        $this->key = $key;\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    /**\n     * @param string $data\n     *\n     * @return $this\n     */\n    public function setData($data)\n    {\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getConfig()\n    {\n        return $this->config;\n    }\n\n    /**\n     * @param string $config\n     *\n     * @return $this\n     */\n    public function setConfig($config)\n    {\n        $this->config = $config;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getCtype()\n    {\n        return $this->ctype;\n    }\n\n    /**\n     * @param string $ctype\n     *\n     * @return $this\n     */\n    public function setCtype($ctype)\n    {\n        $this->ctype = $ctype;\n\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function getInheritable()\n    {\n        return $this->inheritable;\n    }\n\n    /**\n     * @param bool $inheritable\n     *\n     * @return $this\n     */\n    public function setInheritable($inheritable)\n    {\n        $this->inheritable = (bool) $inheritable;\n\n        return $this;\n    }\n\n    /**\n     * @param string $description\n     *\n     * @return $this\n     */\n    public function setDescription($description)\n    {\n        $this->description = $description;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * @param int $creationDate\n     *\n     * @return $this\n     */\n    public function setCreationDate($creationDate)\n    {\n        $this->creationDate = (int) $creationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getCreationDate()\n    {\n        return $this->creationDate;\n    }\n\n    /**\n     * @param int $modificationDate\n     *\n     * @return $this\n     */\n    public function setModificationDate($modificationDate)\n    {\n        $this->modificationDate = (int) $modificationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getModificationDate()\n    {\n        return $this->modificationDate;\n    }\n\n    public function __clone()\n    {\n        if ($this->dao) {\n            $this->dao = clone $this->dao;\n            $this->dao->setModel($this);\n        }\n    }\n}\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.properties.predefined\");\npimcore.settings.properties.predefined = Class.create({\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"predefined_properties\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"predefined_properties\",\n                title: t(\"predefined_properties\"),\n                iconCls: \"pimcore_icon_properties\",\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"predefined_properties\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"predefined_properties\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n\n        var url = Routing.generate('pimcore_admin_settings_properties');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            [\n                'id',\n                {name: 'name', allowBlank: false},'description',\n                {name: 'key', allowBlank: false},\n                {name: 'type', allowBlank: false}, 'data', 'config',\n                {name: 'ctype', allowBlank: false}, 'inheritable', 'creationDate', 'modificationDate'\n\n            ], null, {\n                remoteSort: false,\n                remoteFilter: false\n            }\n        );\n        this.store.setAutoSync(true);\n\n        this.filterField = new Ext.form.TextField({\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            listeners: {\n                \"keydown\" : function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        var inheritableCheck = new Ext.grid.column.Check({\n            text: t(\"inheritable\"),\n            dataIndex: \"inheritable\",\n            editor: {\n                xtype: 'checkbox',\n            },\n            width: 50\n        });\n\n        var contentTypesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: ['value', 'text'],\n            data: [\n                ['document', 'document'],\n                ['asset', 'asset'],\n                ['object', 'object']\n            ],\n            autoLoad: true\n        });\n\n\n        var propertiesColumns = [\n            {text: t(\"name\"), flex: 100, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n            {text: t(\"description\"), sortable: true, dataIndex: 'description', editor: new Ext.form.TextArea({listeners: {'change': pimcore.helpers.htmlEncodeTextField}}),\n                renderer: function (value, metaData, record, rowIndex, colIndex, store) {\n                    if(empty(value)) {\n                        return \"\";\n                    }\n                    return nl2br(Ext.util.Format.htmlEncode(value));\n               }\n            },\n            {text: t(\"key\"), flex: 50, sortable: true, dataIndex: 'key', editor: new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n            {text: t(\"type\"), flex: 50, sortable: true, dataIndex: 'type',\n                editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [\"text\",\"document\",\"asset\",\"object\",\"bool\",\"select\"]\n\n            })},\n            {text: t(\"value\"), flex: 50, sortable: true, dataIndex: 'data', editor: new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n            {text: t(\"configuration\"), flex: 50, sortable: false, dataIndex: 'config', editor: new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n            {text: t(\"content_type\"), flex: 50, sortable: true, dataIndex: 'ctype',\n                editor: new Ext.ux.form.MultiSelect({\n                    store: new Ext.data.ArrayStore({\n                        fields: ['key', {\n                            name: 'value',\n                            convert: function (v, r) {\n                                if (Array.isArray(v)) {\n                                    return v.join(\";\");\n                                }\n                                return v;\n                            }\n                        }],\n                        data: [\n                            ['document', 'document'],\n                            ['object', ['object']],\n                            ['asset', ['asset']]\n                        ],\n                    }),\n                    displayField: 'key',\n                    valueField: 'value',\n                }),\n            },\n            inheritableCheck,\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    getClass: function(v, meta, rec) {\n                      var klass = \"pimcore_action_column \";\n                      if(rec.data.writeable) {\n                          klass += \"pimcore_icon_minus\";\n                      }\n                      return klass;\n                    },\n                    tooltip: t('delete'),\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        const decodedName = Ext.util.Format.htmlDecode(data.data.name);\n                        \n                        pimcore.helpers.deleteConfirm(\n                            t('predefined_properties'),\n                            Ext.util.Format.htmlEncode(decodedName),\n                            function () {\n                                grid.getStore().removeAt(rowIndex);\n                            }.bind(this)\n                        );\n                    }.bind(this)\n                }]\n            },{\n                xtype: 'actioncolumn',\n                menuText: t('translate'),\n                width: 30,\n                items: [{\n                    tooltip: t('translate'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/collaboration.svg\",\n                    handler: function(grid, rowIndex){\n                        var rec = grid.getStore().getAt(rowIndex);\n                        try {\n                            pimcore.globalmanager.get(\"translationdomainmanager\").activate(rec.data.name);\n                        } catch (e) {\n                            pimcore.globalmanager.add(\"translationdomainmanager\",\n                                new pimcore.settings.translation.domain(\"admin\", rec.data.name));\n                        }\n                    }.bind(this)\n                }]\n            },\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n\n        ];\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (editor, context, eOpts) {\n                    if (!context.record.data.writeable) {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows: true,\n            trackMouseOver: true,\n            columns: {\n                items: propertiesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\",\n                        disabled: !pimcore.settings['predefined-properties-writeable']\n                    },\"->\",{\n                        text: t(\"filter\") + \"/\" + t(\"search\"),\n                        xtype: \"tbtext\",\n                        style: \"margin: 0 10px 0 0;\"\n                    },\n                    this.filterField\n                ]\n            },\n            viewConfig: {\n                forceFit: true,\n                getRowClass: function (record, rowIndex) {\n                    return record.data.writeable ? '' : 'pimcore_grid_row_disabled';\n                }\n            }\n        });\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            name: t('new_property'),\n            key: \"new_key\",\n            ctype: \"document\",\n            type: \"text\"\n        });\n    }\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Property;\n\nuse Pimcore\\Model;\nuse Pimcore\\Security\\SecurityHelper;\n\n/**\n * @internal\n *\n * @method bool isWriteable()\n * @method string getWriteTarget()\n * @method \\Pimcore\\Model\\Property\\Predefined\\Dao getDao()\n * @method void delete()\n * @method void save()\n */\nfinal class Predefined extends Model\\AbstractModel\n{\n    /**\n     * @var string\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $description;\n\n    /**\n     * @var string|null\n     */\n    protected $key;\n\n    /**\n     * @var string\n     */\n    protected $type;\n\n    /**\n     * @var string\n     */\n    protected $data;\n\n    /**\n     * @var string\n     */\n    protected $config;\n\n    /**\n     * @var string\n     */\n    protected $ctype;\n\n    /**\n     * @var bool\n     */\n    protected $inheritable = false;\n\n    /**\n     * @var int|null\n     */\n    protected $creationDate;\n\n    /**\n     * @var int|null\n     */\n    protected $modificationDate;\n\n    /**\n     * @param string $id\n     *\n     * @return self|null\n     */\n    public static function getById($id)\n    {\n        try {\n            $property = new self();\n            $property->getDao()->getById($id);\n\n            return $property;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return self|null\n     */\n    public static function getByKey($key)\n    {\n        $cacheKey = 'property_predefined_' . $key;\n\n        try {\n            $property = \\Pimcore\\Cache\\RuntimeCache::get($cacheKey);\n            if (!$property) {\n                throw new \\Exception('Predefined property in registry is null');\n            }\n        } catch (\\Exception $e) {\n            try {\n                $property = new self();\n                $property->getDao()->getByKey($key);\n                \\Pimcore\\Cache\\RuntimeCache::set($cacheKey, $property);\n            } catch (Model\\Exception\\NotFoundException $e) {\n                return null;\n            }\n        }\n\n        return $property;\n    }\n\n    /**\n     * @return self\n     */\n    public static function create()\n    {\n        $type = new self();\n        $type->save();\n\n        return $type;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getKey()\n    {\n        return $this->key;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return string\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n\n    /**\n     * @return string\n     */\n    public function getData()\n    {\n        return $this->data;\n    }\n\n    /**\n     * @param string $key\n     *\n     * @return $this\n     */\n    public function setKey($key)\n    {\n        $this->key = SecurityHelper::convertHtmlSpecialChars($key);\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this->name = SecurityHelper::convertHtmlSpecialChars($name);\n\n        return $this;\n    }\n\n    /**\n     * @param string $type\n     *\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    /**\n     * @param string $data\n     *\n     * @return $this\n     */\n    public function setData($data)\n    {\n        $this->data = SecurityHelper::convertHtmlSpecialChars($data);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = $id;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getConfig()\n    {\n        return $this->config;\n    }\n\n    /**\n     * @param string $config\n     *\n     * @return $this\n     */\n    public function setConfig($config)\n    {\n        $this->config = SecurityHelper::convertHtmlSpecialChars($config);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getCtype()\n    {\n        return $this->ctype;\n    }\n\n    /**\n     * @param string $ctype\n     *\n     * @return $this\n     */\n    public function setCtype($ctype)\n    {\n        $this->ctype = $ctype;\n\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function getInheritable()\n    {\n        return $this->inheritable;\n    }\n\n    /**\n     * @param bool $inheritable\n     *\n     * @return $this\n     */\n    public function setInheritable($inheritable)\n    {\n        $this->inheritable = (bool) $inheritable;\n\n        return $this;\n    }\n\n    /**\n     * @param string $description\n     *\n     * @return $this\n     */\n    public function setDescription($description)\n    {\n        $this->description = SecurityHelper::convertHtmlSpecialChars($description);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * @param int $creationDate\n     *\n     * @return $this\n     */\n    public function setCreationDate($creationDate)\n    {\n        $this->creationDate = (int) $creationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getCreationDate()\n    {\n        return $this->creationDate;\n    }\n\n    /**\n     * @param int $modificationDate\n     *\n     * @return $this\n     */\n    public function setModificationDate($modificationDate)\n    {\n        $this->modificationDate = (int) $modificationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getModificationDate()\n    {\n        return $this->modificationDate;\n    }\n\n    public function __clone()\n    {\n        if ($this->dao) {\n            $this->dao = clone $this->dao;\n            $this->dao->setModel($this);\n        }\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/properties/predefined.js", "models/Property/Predefined.php"], "buggy_code_start_loc": [60, 18], "buggy_code_end_loc": [173, 309], "fixing_code_start_loc": [60, 19], "fixing_code_end_loc": [177, 310], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2615", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-10T06:15:16.380", "lastModified": "2023-05-16T14:26:36.560", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/7a799399e6843cd049e85da27ceb75b78505317f", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/af9c360a-87f8-4e97-a24b-6db675ee942a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/7a799399e6843cd049e85da27ceb75b78505317f"}}