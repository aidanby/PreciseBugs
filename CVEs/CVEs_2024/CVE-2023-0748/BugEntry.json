{"buggy_code": ["using System;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Lightning;\nusing BTCPayServer.Lightning.CLightning;\nusing BTCPayServer.Views.Manage;\nusing BTCPayServer.Views.Server;\nusing BTCPayServer.Views.Stores;\nusing BTCPayServer.Views.Wallets;\nusing Microsoft.Extensions.Configuration;\nusing NBitcoin;\nusing NBitcoin.RPC;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\nusing Xunit;\n\nnamespace BTCPayServer.Tests\n{\n    public class SeleniumTester : IDisposable\n    {\n        public IWebDriver Driver { get; set; }\n        public ServerTester Server { get; set; }\n        public WalletId WalletId { get; set; }\n\n        public string StoreId { get; set; }\n\n        public static readonly TimeSpan ImplicitWait = TimeSpan.FromSeconds(5);\n\n        public async Task StartAsync()\n        {\n            Server.PayTester.NoCSP = true;\n            await Server.StartAsync();\n\n            var windowSize = (Width: 1200, Height: 1000);\n            var builder = new ConfigurationBuilder();\n            builder.AddUserSecrets(\"AB0AC1DD-9D26-485B-9416-56A33F268117\");\n            var config = builder.Build();\n\n            // Run `dotnet user-secrets set RunSeleniumInBrowser true` to run tests in browser\n            var runInBrowser = config[\"RunSeleniumInBrowser\"] == \"true\";\n            // Reset this using `dotnet user-secrets remove RunSeleniumInBrowser`\n\n            var chromeDriverPath = config[\"ChromeDriverDirectory\"] ?? (Server.PayTester.InContainer ? \"/usr/bin\" : Directory.GetCurrentDirectory());\n\n            var options = new ChromeOptions();\n            if (!runInBrowser)\n            {\n                options.AddArguments(\"headless\");\n            }\n            options.AddArguments($\"window-size={windowSize.Width}x{windowSize.Height}\");\n            options.AddArgument(\"shm-size=2g\");\n            options.AddArgument(\"start-maximized\");\n            if (Server.PayTester.InContainer)\n            {\n                // Shot in the dark to fix https://stackoverflow.com/questions/53902507/unknown-error-session-deleted-because-of-page-crash-from-unknown-error-cannot\n                options.AddArgument(\"--disable-dev-shm-usage\");\n                Driver = new OpenQA.Selenium.Remote.RemoteWebDriver(new Uri(\"http://selenium:4444/wd/hub\"), new RemoteSessionSettings(options));\n                var containerIp = File.ReadAllText(\"/etc/hosts\").Split('\\n', StringSplitOptions.RemoveEmptyEntries).Last()\n                    .Split('\\t', StringSplitOptions.RemoveEmptyEntries)[0].Trim();\n                TestLogs.LogInformation($\"Selenium: Container's IP {containerIp}\");\n                ServerUri = new Uri(Server.PayTester.ServerUri.AbsoluteUri.Replace($\"http://{Server.PayTester.HostName}\", $\"http://{containerIp}\", StringComparison.OrdinalIgnoreCase), UriKind.Absolute);\n            }\n            else\n            {\n                var cds = ChromeDriverService.CreateDefaultService(chromeDriverPath);\n                cds.EnableVerboseLogging = true;\n                cds.Port = Utils.FreeTcpPort();\n                cds.HostName = \"127.0.0.1\";\n                cds.Start();\n                Driver = new ChromeDriver(cds, options,\n                    // A bit less than test timeout\n                    TimeSpan.FromSeconds(50));\n                ServerUri = Server.PayTester.ServerUri;\n            }\n            Driver.Manage().Window.Maximize();\n\n            TestLogs.LogInformation($\"Selenium: Using {Driver.GetType()}\");\n            TestLogs.LogInformation($\"Selenium: Browsing to {ServerUri}\");\n            TestLogs.LogInformation($\"Selenium: Resolution {Driver.Manage().Window.Size}\");\n            GoToRegister();\n            Driver.AssertNoError();\n        }\n\n        public void PayInvoice(bool mine = false)\n        {\n            Driver.FindElement(By.Id(\"FakePayment\")).Click();\n            if (mine)\n            {\n                MineBlockOnInvoiceCheckout();\n            }\n        }\n\n        public void MineBlockOnInvoiceCheckout()\n        {\n            Driver.FindElement(By.CssSelector(\"#mine-block button\")).Click();\n\n        }\n\n        /// <summary>\n        /// Use this ServerUri when trying to browse with selenium\n        /// Because for some reason, the selenium container can't resolve the tests container domain name\n        /// </summary>\n        public Uri ServerUri;\n        internal IWebElement FindAlertMessage(StatusMessageModel.StatusSeverity severity = StatusMessageModel.StatusSeverity.Success)\n        {\n            return FindAlertMessage(new[] { severity });\n        }\n        internal IWebElement FindAlertMessage(params StatusMessageModel.StatusSeverity[] severity)\n        {\n            var className = string.Join(\", \", severity.Select(statusSeverity => $\".alert-{StatusMessageModel.ToString(statusSeverity)}\"));\n            IWebElement el;\n            try\n            {\n                var elements = Driver.FindElements(By.CssSelector(className));\n                el = elements.FirstOrDefault(e => e.Displayed);\n                if (el is null)\n                    el = elements.FirstOrDefault();\n                if (el is null)\n                    el = Driver.WaitForElement(By.CssSelector(className));\n            }\n            catch (NoSuchElementException)\n            {\n                el = Driver.WaitForElement(By.CssSelector(className));\n            }\n            if (el is null)\n                throw new NoSuchElementException($\"Unable to find {className}\");\n            if (!el.Displayed)\n                throw new ElementNotVisibleException($\"{className} is present, but not displayed: {el.GetAttribute(\"id\")} - Text: {el.Text}\");\n            return el;\n        }\n\n        public string Link(string relativeLink)\n        {\n            return ServerUri.AbsoluteUri.WithoutEndingSlash() + relativeLink.WithStartingSlash();\n        }\n\n        public void GoToRegister()\n        {\n            Driver.Navigate().GoToUrl(Link(\"/register\"));\n        }\n\n        public string RegisterNewUser(bool isAdmin = false)\n        {\n            var usr = RandomUtils.GetUInt256().ToString().Substring(64 - 20) + \"@a.com\";\n            TestLogs.LogInformation($\"User: {usr} with password 123456\");\n            Driver.FindElement(By.Id(\"Email\")).SendKeys(usr);\n            Driver.FindElement(By.Id(\"Password\")).SendKeys(\"123456\");\n            Driver.FindElement(By.Id(\"ConfirmPassword\")).SendKeys(\"123456\");\n            if (isAdmin)\n                Driver.FindElement(By.Id(\"IsAdmin\")).Click();\n            Driver.FindElement(By.Id(\"RegisterButton\")).Click();\n            Driver.AssertNoError();\n            CreatedUser = usr;\n            return usr;\n        }\n        string CreatedUser;\n\n        public TestAccount AsTestAccount()\n        {\n            return new TestAccount(Server) { RegisterDetails = new Models.AccountViewModels.RegisterViewModel() { Password = \"123456\", Email = CreatedUser } };\n        }\n\n        public (string storeName, string storeId) CreateNewStore(bool keepId = true)\n        {\n            // If there's no store yet, there is no dropdown toggle\n            if (Driver.PageSource.Contains(\"id=\\\"StoreSelectorToggle\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"StoreSelectorToggle\")).Click();\n            }\n            Driver.WaitForElement(By.Id(\"StoreSelectorCreate\")).Click();\n            var name = \"Store\" + RandomUtils.GetUInt64();\n            TestLogs.LogInformation($\"Created store {name}\");\n            Driver.WaitForElement(By.Id(\"Name\")).SendKeys(name);\n            var rateSource = new SelectElement(Driver.FindElement(By.Id(\"PreferredExchange\")));\n            Assert.Equal(\"Kraken (Recommended)\", rateSource.SelectedOption.Text);\n            rateSource.SelectByText(\"CoinGecko\");\n            Driver.WaitForElement(By.Id(\"Create\")).Click();\n            Driver.FindElement(By.Id(\"StoreNav-StoreSettings\")).Click();\n            Driver.FindElement(By.Id($\"SectionNav-{StoreNavPages.General.ToString()}\")).Click();\n            var storeId = Driver.WaitForElement(By.Id(\"Id\")).GetAttribute(\"value\");\n            if (keepId)\n                StoreId = storeId;\n            return (name, storeId);\n        }\n\n        public void EnableCheckoutV2(bool bip21 = false)\n        {\n            GoToStore(StoreNavPages.CheckoutAppearance);\n            Driver.SetCheckbox(By.Id(\"UseNewCheckout\"), true);\n            Driver.WaitForElement(By.Id(\"OnChainWithLnInvoiceFallback\"));\n            Driver.SetCheckbox(By.Id(\"OnChainWithLnInvoiceFallback\"), bip21);\n            Driver.FindElement(By.Id(\"Save\")).SendKeys(Keys.Enter);\n            Assert.Contains(\"Store successfully updated\", FindAlertMessage().Text);\n            Assert.True(Driver.FindElement(By.Id(\"UseNewCheckout\")).Selected);\n        }\n\n        public Mnemonic GenerateWallet(string cryptoCode = \"BTC\", string seed = \"\", bool? importkeys = null, bool isHotWallet = false, ScriptPubKeyType format = ScriptPubKeyType.Segwit)\n        {\n            var isImport = !string.IsNullOrEmpty(seed);\n            GoToWalletSettings(cryptoCode);\n\n            // Replace previous wallet case\n            if (Driver.PageSource.Contains(\"id=\\\"ChangeWalletLink\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"ActionsDropdownToggle\")).Click();\n                Driver.WaitForElement(By.Id(\"ChangeWalletLink\")).Click();\n                Driver.WaitForElement(By.Id(\"ConfirmInput\")).SendKeys(\"REPLACE\");\n                Driver.FindElement(By.Id(\"ConfirmContinue\")).Click();\n            }\n\n            if (isImport)\n            {\n                TestLogs.LogInformation(\"Progressing with existing seed\");\n                Driver.FindElement(By.Id(\"ImportWalletOptionsLink\")).Click();\n                Driver.FindElement(By.Id(\"ImportSeedLink\")).Click();\n                Driver.FindElement(By.Id(\"ExistingMnemonic\")).SendKeys(seed);\n                Driver.SetCheckbox(By.Id(\"SavePrivateKeys\"), isHotWallet);\n            }\n            else\n            {\n                var option = isHotWallet ? \"Hotwallet\" : \"Watchonly\";\n                TestLogs.LogInformation($\"Generating new seed ({option})\");\n                Driver.FindElement(By.Id(\"GenerateWalletLink\")).Click();\n                Driver.FindElement(By.Id($\"Generate{option}Link\")).Click();\n            }\n\n            Driver.FindElement(By.Id(\"ScriptPubKeyType\")).Click();\n            Driver.FindElement(By.CssSelector($\"#ScriptPubKeyType option[value={format}]\")).Click();\n\n            Driver.ToggleCollapse(\"AdvancedSettings\");\n            if (importkeys is bool v)\n                Driver.SetCheckbox(By.Id(\"ImportKeysToRPC\"), v);\n            Driver.FindElement(By.Id(\"Continue\")).Click();\n\n            if (isImport)\n            {\n                // Confirm addresses\n                Driver.FindElement(By.Id(\"Confirm\")).Click();\n            }\n            else\n            {\n                // Seed backup\n                FindAlertMessage();\n                if (string.IsNullOrEmpty(seed))\n                {\n                    seed = Driver.FindElements(By.Id(\"RecoveryPhrase\")).First().GetAttribute(\"data-mnemonic\");\n                }\n\n                // Confirm seed backup\n                Driver.FindElement(By.Id(\"confirm\")).Click();\n                Driver.FindElement(By.Id(\"submit\")).Click();\n            }\n\n            WalletId = new WalletId(StoreId, cryptoCode);\n            return new Mnemonic(seed);\n        }\n\n        /// <summary>\n        /// Assume to be in store's settings\n        /// </summary>\n        /// <param name=\"cryptoCode\"></param>\n        /// <param name=\"derivationScheme\"></param>\n        public void AddDerivationScheme(string cryptoCode = \"BTC\", string derivationScheme = \"xpub661MyMwAqRbcGABgHMUXDzPzH1tU7eZaAaJQXhDXsSxsqyQzQeU6kznNfSuAyqAK9UaWSaZaMFdNiY5BCF4zBPAzSnwfUAwUhwttuAKwfRX-[legacy]\")\n        {\n            if (!Driver.PageSource.Contains($\"Setup {cryptoCode} Wallet\"))\n            {\n                GoToWalletSettings(cryptoCode);\n            }\n\n            Driver.FindElement(By.Id(\"ImportWalletOptionsLink\")).Click();\n            Driver.FindElement(By.Id(\"ImportXpubLink\")).Click();\n            Driver.FindElement(By.Id(\"DerivationScheme\")).SendKeys(derivationScheme);\n            Driver.FindElement(By.Id(\"Continue\")).Click();\n            Driver.FindElement(By.Id(\"Confirm\")).Click();\n            FindAlertMessage();\n        }\n\n        public void AddLightningNode()\n        {\n            AddLightningNode(null, null, true);\n        }\n\n        public void AddLightningNode(LightningConnectionType? connectionType = null, bool test = true)\n        {\n            AddLightningNode(null, connectionType, test);\n        }\n\n        public void AddLightningNode(string cryptoCode = null, LightningConnectionType? connectionType = null, bool test = true)\n        {\n            cryptoCode ??= \"BTC\";\n            if (!Driver.PageSource.Contains(\"Connect to a Lightning node\"))\n            {\n                GoToLightningSettings();\n            }\n\n            var connectionString = connectionType switch\n            {\n                LightningConnectionType.Charge =>\n                    $\"type=charge;server={Server.MerchantCharge.Client.Uri.AbsoluteUri};allowinsecure=true\",\n                LightningConnectionType.CLightning =>\n                    $\"type=clightning;server={((CLightningClient)Server.MerchantLightningD).Address.AbsoluteUri}\",\n                LightningConnectionType.LndREST =>\n                    $\"type=lnd-rest;server={Server.MerchantLnd.Swagger.BaseUrl};allowinsecure=true\",\n                _ => null\n            };\n\n            if (connectionString == null)\n            {\n                Assert.True(Driver.FindElement(By.Id(\"LightningNodeType-Internal\")).Enabled, \"Usage of the internal Lightning node is disabled.\");\n                Driver.FindElement(By.CssSelector(\"label[for=\\\"LightningNodeType-Internal\\\"]\")).Click();\n            }\n            else\n            {\n                Driver.FindElement(By.CssSelector(\"label[for=\\\"LightningNodeType-Custom\\\"]\")).Click();\n                Driver.WaitForElement(By.Id(\"ConnectionString\")).Clear();\n                Driver.FindElement(By.Id(\"ConnectionString\")).SendKeys(connectionString);\n                if (test)\n                {\n                    Driver.FindElement(By.Id(\"test\")).Click();\n                    Assert.Contains(\"Connection to the Lightning node successful.\", FindAlertMessage().Text);\n                }\n            }\n\n            Driver.FindElement(By.Id(\"save\")).Click();\n            Assert.Contains($\"{cryptoCode} Lightning node updated.\", FindAlertMessage().Text);\n\n            var enabled = Driver.FindElement(By.Id($\"{cryptoCode}LightningEnabled\"));\n            if (enabled.Text == \"Enable\")\n            {\n                enabled.Click();\n                Assert.Contains($\"{cryptoCode} Lightning payments are now enabled for this store.\", FindAlertMessage().Text);\n            }\n        }\n\n        public Logging.ILog TestLogs => Server.TestLogs;\n        public void ClickOnAllSectionLinks()\n        {\n            var links = Driver.FindElements(By.CssSelector(\"#SectionNav .nav-link\")).Select(c => c.GetAttribute(\"href\")).ToList();\n            Driver.AssertNoError();\n            foreach (var l in links)\n            {\n                TestLogs.LogInformation($\"Checking no error on {l}\");\n                Driver.Navigate().GoToUrl(l);\n                Driver.AssertNoError();\n            }\n        }\n\n        public void Dispose()\n        {\n            if (Driver != null)\n            {\n                try\n                {\n                    Driver.Quit();\n                }\n                catch\n                {\n                    // ignored\n                }\n\n                Driver.Dispose();\n            }\n\n            Server?.Dispose();\n        }\n\n        internal void AssertNotFound()\n        {\n            Assert.Contains(\"404 - Page not found</h1>\", Driver.PageSource);\n        }\n\n        internal void AssertAccessDenied()\n        {\n            Assert.Contains(\"- Denied</h\", Driver.PageSource);\n        }\n\n        public void GoToHome()\n        {\n            Driver.Navigate().GoToUrl(ServerUri);\n        }\n\n        public void Logout()\n        {\n            if (!Driver.PageSource.Contains(\"id=\\\"Nav-Logout\\\"\"))\n            {\n                Driver.Navigate().GoToUrl(ServerUri);\n            }\n            Driver.FindElement(By.Id(\"Nav-Account\")).Click();\n            Driver.FindElement(By.Id(\"Nav-Logout\")).Click();\n        }\n\n        public void LogIn(string user, string password)\n        {\n            Driver.FindElement(By.Id(\"Email\")).SendKeys(user);\n            Driver.FindElement(By.Id(\"Password\")).SendKeys(password);\n            Driver.FindElement(By.Id(\"LoginButton\")).Click();\n        }\n\n        public void GoToStore(StoreNavPages storeNavPage = StoreNavPages.General)\n        {\n            GoToStore(null, storeNavPage);\n        }\n\n        public void GoToStore(string storeId, StoreNavPages storeNavPage = StoreNavPages.General)\n        {\n            if (storeId is not null)\n            {\n                GoToUrl($\"/stores/{storeId}/\");\n                StoreId = storeId;\n                if (WalletId != null)\n                    WalletId = new WalletId(storeId, WalletId.CryptoCode);\n            }\n\n            Driver.FindElement(By.Id(\"StoreNav-StoreSettings\")).Click();\n\n            if (storeNavPage != StoreNavPages.General)\n            {\n                switch (storeNavPage)\n                {\n                    case StoreNavPages.Dashboard:\n                    case StoreNavPages.Payouts:\n                    case StoreNavPages.PayButton:\n                    case StoreNavPages.PullPayments:\n                        Driver.FindElement(By.Id($\"StoreNav-{storeNavPage.ToString()}\")).Click();\n                        break;\n                    default:\n                        Driver.FindElement(By.Id($\"SectionNav-{storeNavPage.ToString()}\")).Click();\n                        break;\n                }\n            }\n        }\n\n        public void GoToWalletSettings(string cryptoCode = \"BTC\")\n        {\n            Driver.FindElement(By.Id($\"StoreNav-Wallet{cryptoCode}\")).Click();\n            if (Driver.PageSource.Contains(\"id=\\\"WalletNav-Settings\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"WalletNav-Settings\")).Click();\n            }\n        }\n\n        public void GoToLightningSettings(string cryptoCode = \"BTC\")\n        {\n            Driver.FindElement(By.Id($\"StoreNav-Lightning{cryptoCode}\")).Click();\n            // if Lightning is already set up we need to navigate to the settings\n            if (Driver.PageSource.Contains(\"id=\\\"SectionNav-LightningSettings\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"SectionNav-LightningSettings\")).Click();\n            }\n        }\n\n        public void SelectStoreContext(string storeId)\n        {\n            Driver.FindElement(By.Id(\"StoreSelectorToggle\")).Click();\n            Driver.FindElement(By.Id($\"StoreSelectorMenuItem-{storeId}\")).Click();\n        }\n\n        public void GoToInvoiceCheckout(string invoiceId = null)\n        {\n            invoiceId ??= InvoiceId;\n            Driver.FindElement(By.Id(\"StoreNav-Invoices\")).Click();\n            Driver.FindElement(By.Id($\"invoice-checkout-{invoiceId}\")).Click();\n            CheckForJSErrors();\n        }\n\n        public void GoToInvoice(string id)\n        {\n            GoToUrl($\"/invoices/{id}/\");\n        }\n\n        public void GoToInvoices(string storeId = null)\n        {\n            if (storeId is null)\n            {\n                Driver.FindElement(By.Id(\"StoreNav-Invoices\")).Click();\n            }\n            else\n            {\n                GoToUrl(storeId == null ? \"/invoices/\" : $\"/stores/{storeId}/invoices/\");\n                StoreId = storeId;\n            }\n        }\n\n        public void GoToProfile(ManageNavPages navPages = ManageNavPages.Index)\n        {\n            Driver.WaitForAndClick(By.Id(\"Nav-Account\"));\n            Driver.WaitForAndClick(By.Id(\"Nav-ManageAccount\"));\n            if (navPages != ManageNavPages.Index)\n            {\n                Driver.WaitForAndClick(By.Id($\"SectionNav-{navPages.ToString()}\"));\n            }\n        }\n\n        public void GoToLogin()\n        {\n            GoToUrl(\"/login\");\n        }\n\n        public string CreateInvoice(decimal? amount = 100,\n            string currency = \"USD\",\n            string refundEmail = \"\",\n            string defaultPaymentMethod = null,\n            bool? requiresRefundEmail = null,\n            StatusMessageModel.StatusSeverity expectedSeverity = StatusMessageModel.StatusSeverity.Success\n        )\n        {\n            return CreateInvoice(null, amount, currency, refundEmail, defaultPaymentMethod, requiresRefundEmail, expectedSeverity);\n        }\n\n        public string CreateInvoice(\n            string storeId,\n            decimal? amount = 100,\n            string currency = \"USD\",\n            string refundEmail = \"\",\n            string defaultPaymentMethod = null,\n            bool? requiresRefundEmail = null,\n            StatusMessageModel.StatusSeverity expectedSeverity = StatusMessageModel.StatusSeverity.Success\n        )\n        {\n            GoToInvoices(storeId);\n\n            Driver.FindElement(By.Id(\"CreateNewInvoice\")).Click();\n            if (amount is decimal v)\n                Driver.FindElement(By.Id(\"Amount\")).SendKeys(v.ToString(CultureInfo.InvariantCulture));\n            var currencyEl = Driver.FindElement(By.Id(\"Currency\"));\n            currencyEl.Clear();\n            currencyEl.SendKeys(currency);\n            Driver.FindElement(By.Id(\"BuyerEmail\")).SendKeys(refundEmail);\n            if (defaultPaymentMethod is not null)\n                new SelectElement(Driver.FindElement(By.Name(\"DefaultPaymentMethod\"))).SelectByValue(defaultPaymentMethod);\n            if (requiresRefundEmail is bool)\n                new SelectElement(Driver.FindElement(By.Name(\"RequiresRefundEmail\"))).SelectByValue(requiresRefundEmail == true ? \"1\" : \"2\");\n            Driver.FindElement(By.Id(\"Create\")).Click();\n\n            var statusElement = FindAlertMessage(expectedSeverity);\n            var inv = expectedSeverity == StatusMessageModel.StatusSeverity.Success ? statusElement.Text.Split(\" \")[1] : null;\n            InvoiceId = inv;\n            TestLogs.LogInformation($\"Created invoice {inv}\");\n            return inv;\n        }\n        string InvoiceId;\n\n        public async Task<string> FundStoreWallet(WalletId walletId = null, int coins = 1, decimal denomination = 1m)\n        {\n            walletId ??= WalletId;\n            GoToWallet(walletId, WalletsNavPages.Receive);\n            Driver.FindElement(By.Id(\"generateButton\")).Click();\n            var addressStr = Driver.FindElement(By.Id(\"address\")).GetAttribute(\"value\");\n            var address = BitcoinAddress.Create(addressStr, ((BTCPayNetwork)Server.NetworkProvider.GetNetwork(walletId.CryptoCode)).NBitcoinNetwork);\n            for (var i = 0; i < coins; i++)\n            {\n                bool mined = false;\nretry:\n                try\n                {\n                    await Server.ExplorerNode.SendToAddressAsync(address, Money.Coins(denomination));\n                }\n                catch (RPCException) when (!mined)\n                {\n                    mined = true;\n                    await Server.ExplorerNode.GenerateAsync(1);\n                    goto retry;\n                }\n            }\n            Driver.Navigate().Refresh();\n            Driver.FindElement(By.Id(\"CancelWizard\")).Click();\n            return addressStr;\n        }\n\n        private void CheckForJSErrors()\n        {\n            //wait for seleniun update: https://stackoverflow.com/questions/57520296/selenium-webdriver-3-141-0-driver-manage-logs-availablelogtypes-throwing-syste\n            //            var errorStrings = new List<string>\n            //            {\n            //                \"SyntaxError\",\n            //                \"EvalError\",\n            //                \"ReferenceError\",\n            //                \"RangeError\",\n            //                \"TypeError\",\n            //                \"URIError\"\n            //            };\n            //\n            //            var jsErrors = Driver.Manage().Logs.GetLog(LogType.Browser).Where(x => errorStrings.Any(e => x.Message.Contains(e)));\n            //\n            //            if (jsErrors.Any())\n            //            {\n            //                TestLogs.LogInformation(\"JavaScript error(s):\" + Environment.NewLine + jsErrors.Aggregate(\"\", (s, entry) => s + entry.Message + Environment.NewLine));\n            //            }\n            //            Assert.Empty(jsErrors);\n\n        }\n\n        public void GoToWallet(WalletId walletId = null, WalletsNavPages navPages = WalletsNavPages.Send)\n        {\n            walletId ??= WalletId;\n            Driver.Navigate().GoToUrl(new Uri(ServerUri, $\"wallets/{walletId}\"));\n            if (navPages == WalletsNavPages.PSBT)\n            {\n                Driver.FindElement(By.Id(\"WalletNav-Send\")).Click();\n                Driver.FindElement(By.Id(\"PSBT\")).Click();\n            }\n            else if (navPages != WalletsNavPages.Transactions)\n            {\n                Driver.FindElement(By.Id($\"WalletNav-{navPages}\")).Click();\n            }\n        }\n\n        public void GoToUrl(string relativeUrl)\n        {\n            Driver.Navigate().GoToUrl(new Uri(ServerUri, relativeUrl));\n        }\n\n        public void GoToServer(ServerNavPages navPages = ServerNavPages.Index)\n        {\n            Driver.FindElement(By.Id(\"Nav-ServerSettings\")).Click();\n            if (navPages != ServerNavPages.Index)\n            {\n                Driver.FindElement(By.Id($\"SectionNav-{navPages}\")).Click();\n            }\n        }\n    }\n}\n", "\nusing BTCPayServer;\nusing BTCPayServer.Client.Models;\nusing BTCPayServer.Controllers;\nusing BTCPayServer.Services.Apps;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Routing;\n\nnamespace Microsoft.AspNetCore.Mvc\n{\n    public static class UrlHelperExtensions\n    {\n        public static string EmailConfirmationLink(this LinkGenerator urlHelper, string userId, string code, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(nameof(UIAccountController.ConfirmEmail), \"UIAccount\",\n                new { userId, code }, scheme, host, pathbase);\n        }\n\n        public static string ResetPasswordCallbackLink(this LinkGenerator urlHelper, string userId, string code, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIAccountController.SetPassword),\n                controller: \"UIAccount\",\n                values: new { userId, code },\n                scheme: scheme,\n                host: host,\n                pathBase: pathbase\n            );\n        }\n\n        public static string PaymentRequestLink(this LinkGenerator urlHelper, string paymentRequestId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIPaymentRequestController.ViewPaymentRequest),\n                controller: \"UIPaymentRequest\",\n                values: new { payReqId = paymentRequestId },\n                scheme, host, pathbase);\n        }\n\n        public static string AppLink(this LinkGenerator urlHelper, string appId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIAppsController.RedirectToApp),\n                controller: \"UIApps\",\n                values: new { appId },\n                scheme, host, pathbase);\n        }\n\n        public static string InvoiceLink(this LinkGenerator urlHelper, string invoiceId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIInvoiceController.Invoice),\n                controller: \"UIInvoice\",\n                values: new { invoiceId },\n                scheme, host, pathbase);\n        }\n\n        public static string CheckoutLink(this LinkGenerator urlHelper, string invoiceId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIInvoiceController.Checkout),\n                controller: \"UIInvoice\",\n                values: new { invoiceId },\n                scheme, host, pathbase);\n        }\n\n        public static string PayoutLink(this LinkGenerator urlHelper, string walletIdOrStoreId, string pullPaymentId, PayoutState payoutState, string scheme, HostString host, string pathbase)\n        {\n            WalletId.TryParse(walletIdOrStoreId, out var wallet);\n            return urlHelper.GetUriByAction(\n                action: nameof(UIStorePullPaymentsController.Payouts),\n                controller: \"UIStorePullPayments\",\n                values: new { storeId = wallet?.StoreId ?? walletIdOrStoreId, pullPaymentId, payoutState },\n                scheme, host, pathbase);\n        }\n    }\n}\n", "using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Http;\nusing NBitcoin;\n\nnamespace BTCPayServer.Models.StoreViewModels\n{\n    public class RecoverySeedBackupViewModel\n    {\n        public string CryptoCode { get; set; }\n        public string Mnemonic { get; set; }\n        public string Passphrase { get; set; }\n        public string ReturnUrl { get; set; }\n        public bool IsStored { get; set; }\n        public bool RequireConfirm { get; set; } = true;\n\n        public string[] Words\n        {\n            get => Mnemonic.Split((char[])null, System.StringSplitOptions.RemoveEmptyEntries);\n        }\n    }\n}\n", "@model BTCPayServer.Abstractions.Models.ConfirmModel\n@inject LinkGenerator linkGenerator\n@{\n\tstring actionUrl = null;\n\tif (Model.ActionName is not null)\n\t{\n\t\tvar controllerName = Model.ControllerName ?? ((Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)this.Url.ActionContext.ActionDescriptor).ControllerName;\n\t\tactionUrl = linkGenerator.GetPathByAction(Model.ActionName, controllerName, pathBase: this.Context.Request.PathBase);\n\t}\n}\n<div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"ConfirmTitle\">@Model.Title</h4>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                <vc:icon symbol=\"close\" />\n            </button>\n        </div>\n\n        <div class=\"modal-body\">\n            <div id=\"ConfirmDescription\">\n                @if (Model.DescriptionHtml)\n                {\n                    @Safe.Raw(Model.Description)\n                }\n                else\n                {\n                    @Model.Description\n                }\n            </div>\n        </div>\n\n        @if (!string.IsNullOrEmpty(Model.Action))\n        {\n            <form id=\"ConfirmForm\" method=\"post\" action=\"@actionUrl\" rel=\"noreferrer noopener\">\n                <div class=\"modal-body pt-0\" id=\"ConfirmText\" hidden>\n                    <label for=\"ConfirmInput\" class=\"form-label\">Confirm the action by typing <strong id=\"ConfirmInputText\"></strong>:</label>\n                    <input id=\"ConfirmInput\" class=\"form-control\"/>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary only-for-js\" data-bs-dismiss=\"modal\" id=\"ConfirmCancel\">Cancel</button>\n                    <button type=\"submit\" class=\"btn @Model.ButtonClass\" id=\"ConfirmContinue\">@Model.Action</button>\n                </div>\n            </form>\n        }\n    </div>\n</div>\n", "@model PostRedirectViewModel\n@{\n\tLayout = null;\n}\n\n<html lang=\"en\">\n<head>\n\t<partial name=\"LayoutHead\" />\n\t<title>Post Redirect</title>\n</head>\n<body>\n\t@if (Model.FormUrl is null)\n\t{\n\t\t<form method=\"post\" id=\"postform\" asp-action=\"@Model.AspAction\" asp-controller=\"@Model.AspController\" asp-all-route-data=\"Model.RouteParameters\">\n\t\t\t@Html.AntiForgeryToken()\n\t\t\t@foreach (var o in Model.FormParameters)\n\t\t\t{\n\t\t\t\tforeach (var v in o.Value)\n\t\t\t\t{\n\t\t\t\t\t<input type=\"hidden\" name=\"@o.Key\" value=\"@v\" />\n\t\t\t\t}\n\t\t\t}\n\t\t\t<noscript>\n\t\t\t\t<div class=\"modal-dialog modal-dialog-centered min-vh-100\">\n\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t<div class=\"modal-body text-center my-3\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis redirection page is supposed to be submitted automatically.\n\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\tSince you have not enabled JavaScript, please submit manually.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</noscript>\n\t\t</form>\n\t}\n\telse\n\t{\n\t\t<form method=\"post\" id=\"postform\" action=\"@Model.FormUrl\" rel=\"noreferrer noopener\">\n\t\t\t@Html.AntiForgeryToken()\n\t\t\t@foreach (var o in Model.FormParameters)\n\t\t\t{\n\t\t\t\tforeach (var v in o.Value)\n\t\t\t\t{\n\t\t\t\t\t<input type=\"hidden\" name=\"@o.Key\" value=\"@v\" />\n\t\t\t\t}\n\t\t\t}\n\t\t\t<noscript>\n\t\t\t\t<div class=\"modal-dialog modal-dialog-centered min-vh-100\">\n\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t<div class=\"modal-body text-center my-3\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis redirection page is supposed to be submitted automatically.\n\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\tSince you have not enabled JavaScript, please submit manually.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</noscript>\n\t\t</form>\n\t}\n\t<script type=\"text/javascript\">\n\t\tdocument.forms.item(0).submit();\n\t</script>\n\t<partial name=\"LayoutFoot\" />\n</body>\n</html>\n", "@model RecoverySeedBackupViewModel\n@{\n    Layout = \"_LayoutSimple\";\n    ViewData[\"Title\"] = \"Your recovery phrase\";\n}\n\n@section PageHeadContent {\n    <style>\n        @@media (min-width: 476px) { ol#RecoveryPhrase {max-height:16em;} }\n        @@media (min-width: 768px) { ol#RecoveryPhrase {max-height:12em;} }\n        @@media (min-width: 1200px) { ol#RecoveryPhrase {max-height:8em;} }\n        form#RecoveryConfirmation button { position: absolute; bottom:0; left:50%; width:200px; margin-left:-100px; }\n        form#RecoveryConfirmation button:not([disabled]) { display: none; }\n        form#RecoveryConfirmation input:checked ~ button[disabled] { display: none; }\n        form#RecoveryConfirmation input:checked + button:not([disabled]) { display: inline-block; }\n    </style>\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n}\n\n<div class=\"row justify-content-md-center\">\n    <div class=\"col-lg-10 text-center\">\n        <partial name=\"_StatusMessage\" />\n\n        <div class=\"d-flex flex-column align-items-center justify-content-center\">\n            <span class=\"fa fa-info-circle align-self-center p-3\" style=\"font-size:4em;\"></span>\n\n            <h1 class=\"text-center text-primary mb-5\">Secure your recovery&nbsp;phrase</h1>\n        </div>\n        <div class=\"lead text-center\">\n            <p>\n                <span class=\"d-sm-block\">The words below are called your recovery phrase.</span>\n                <span class=\"d-sm-block\"><strong>Write them down on a piece of paper in the exact order.</strong></span>\n            </p>\n        </div>\n        <ol id=\"RecoveryPhrase\" data-mnemonic=\"@Model.Mnemonic\" class=\"my-5 d-flex flex-column flex-wrap justify-content-center align-items-center text-start p-0\">\n            @foreach (var word in Model.Words)\n            {\n                <li class=\"ms-4 px-3 py-2 text-secondary\" style=\"flex: 0 1;min-width:10em;\">\n                    <span class=\"text-dark h5\">@word</span>\n                </li>\n            }\n        </ol>\n        <div class=\"lead text-center\" style=\"max-width:36em;margin-left:auto;margin-right:auto;\">\n            @if (Model.IsStored)\n            {\n                <p>\n                    The recovery phrase is a backup that allows you to restore your wallet in case of a server crash.\n                    If you lose it or write it down incorrectly, you may permanently lose access to your funds.\n                    Do not photograph it. Do not store it digitally.\n                </p>\n                <p>\n                    <strong>The recovery phrase will also be stored on the server as a hot wallet.</strong>\n                </p>\n            }\n            else\n            {\n                <p>\n                    The recovery phrase allows you to access and restore your wallet.\n                    If you lose it or write it down incorrectly, you will permanently lose access to your funds.\n                    Do not photograph the recovery phrase and do not store it digitally.\n                </p>\n                <p>\n                    <strong>The recovery phrase will permanently be erased from the server.</strong>\n                </p>\n            }\n            @if (!string.IsNullOrEmpty(Model.Passphrase))\n            {\n                <p class=\"mt-3 mb-0\">Please make sure to also write down your passphrase.</p>\n            }\n        </div>\n        @if (Model.RequireConfirm)\n        {\n            <form id=\"RecoveryConfirmation\" action=\"@Model.ReturnUrl\" class=\"position-relative d-flex align-items-start justify-content-center\" style=\"margin-top:4rem;padding-bottom: 80px\" rel=\"noreferrer noopener\">\n                <label class=\"form-check-label lead order-2\" for=\"confirm\">I have written down my recovery phrase and stored it in a secure location</label>\n                <input type=\"checkbox\" class=\"me-3 order-1 form-check-input\" id=\"confirm\" style=\"margin-top:.35rem;flex-shrink:0\">\n                <button type=\"submit\" class=\"btn btn-primary btn-lg px-5 order-3\" id=\"submit\">Done</button>\n                <button type=\"submit\" class=\"btn btn-primary btn-lg px-5 order-3\" disabled>Done</button>\n            </form>\n        }\n        else\n        {\n            <a href=\"@Model.ReturnUrl\" class=\"btn btn-primary btn-lg mt-3 px-5 order-3\" id=\"proceed\" rel=\"noreferrer noopener\">Done</a>\n        }\n    </div>\n</div>\n", "@using NBitcoin.DataEncoders\n@using Newtonsoft.Json\n@using System.Text\n@using BTCPayServer.Abstractions.Models\n@model WalletSettingsViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData[\"NavPartialName\"] = \"../UIWallets/_Nav\";\n    ViewData.SetActivePage(StoreNavPages.OnchainSettings, $\"{Model.CryptoCode} Wallet Settings\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"mb-5\">\n            <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n            <div class=\"mb-3 d-flex align-items-center\">\n                <span title=\"@Model.Source\" data-bs-toggle=\"tooltip\" class=\"me-3\">@(Model.IsHotWallet ? \"Hot wallet\" : \"Watch-only wallet\")</span>\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"ActionsDropdownToggle\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Actions\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"ActionsDropdownToggle\">\n                        <a class=\"dropdown-item\" asp-controller=\"UIWallets\" asp-action=\"WalletRescan\" asp-route-walletId=\"@Model.WalletId\" id=\"Rescan\">Rescan wallet for missing transactions</a>\n                        <form method=\"post\" asp-controller=\"UIWallets\" asp-action=\"WalletActions\" asp-route-walletId=\"@Model.WalletId\">\n                            <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"prune\">Prune old transactions from history</button>\n                            @if (User.IsInRole(Roles.ServerAdmin))\n                            {\n                                <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"clear\">Clear all transactions from history</button>\n                            }\n                        </form>\n                        @if (Model.UriScheme == \"bitcoin\")\n                        {\n                            <button type=\"button\" class=\"dropdown-item\" id=\"RegisterWallet\" data-store=\"@Model.StoreName\" data-scheme=\"@Model.UriScheme\" data-url=\"@Url.Action(\"WalletSend\", \"UIWallets\", new {walletId = Model.WalletId, bip21 = \"%s\"})\" hidden>Register wallet for payment links</button>\n                        }\n                        <div class=\"dropdown-divider\"></div>\n                        @if (Model.NBXSeedAvailable)\n                        {\n                            <a asp-action=\"WalletSeed\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"dropdown-item\" id=\"ViewSeed\">View seed</a>\n                        }\n                        <a asp-controller=\"UIStores\" asp-action=\"ReplaceWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\"\n                           id=\"ChangeWalletLink\"\n                           class=\"dropdown-item\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-title=\"Replace @Model.CryptoCode wallet\"\n                           data-description=\"@Html.Encode(ViewData[\"ReplaceDescription\"])\"\n                           data-confirm=\"Setup new wallet\"\n                           data-confirm-input=\"REPLACE\">\n                            Replace wallet\n                        </a>\n                        <form method=\"get\" asp-action=\"DeleteWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"d-inline\">\n                            <button type=\"submit\"\n                                    id=\"Delete\"\n                                    class=\"dropdown-item\"\n                                    data-bs-toggle=\"modal\"\n                                    data-bs-target=\"#ConfirmModal\"\n                                    data-title=\"Remove @Model.CryptoCode wallet\"\n                                    data-description=\"@Html.Encode(ViewData[\"RemoveDescription\"])\"\n                                    data-confirm=\"Remove\"\n                                    data-confirm-input=\"REMOVE\">Remove wallet</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            \n            <form method=\"post\" asp-action=\"UpdateWalletSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                <div class=\"form-group my-4\">\n                    <div class=\"d-flex align-items-center\">\n                        <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0 me-1\"></label>\n                    </div>\n                    <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"Label\" class=\"form-label\"></label>\n                    <input asp-for=\"Label\" class=\"form-control\" style=\"max-width:24em;\" />\n                    <span asp-validation-for=\"Label\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"DerivationScheme\" class=\"form-label\"></label>\n                    <div class=\"input-group\" data-clipboard=\"@Model.DerivationScheme\">\n                        <input asp-for=\"DerivationScheme\" class=\"form-control\" style=\"cursor:copy\" readonly />\n                        <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                    </div>\n                </div>\n                @if (!string.IsNullOrEmpty(Model.DerivationSchemeInput) && Model.DerivationSchemeInput != Model.DerivationScheme)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"DerivationSchemeInput\" class=\"form-label\"></label>\n                        <div class=\"input-group\" data-clipboard=\"@Model.DerivationSchemeInput\">\n                            <input asp-for=\"DerivationSchemeInput\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                }\n                @for (var i = 0; i < Model.AccountKeys.Count; i++)\n                {\n                    <h4 class=\"mt-5 mb-3\">Account Key @i</h4>\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-label\"></label>\n                            <button type=\"button\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" data-account-key=\"@i\" title=\"\">\n                                <span class=\"fa fa-qrcode\"></span> Show export QR\n                            </button>\n                        </div>\n                        <div class=\"input-group\" data-clipboard=\"@Model.AccountKeys[i].AccountKey\">\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                    </div>\n                    @if (Model.IsMultiSig)\n                    {\n                        <div class=\"form-check\">\n                            <input asp-for=\"SelectedSigningKey\" class=\"form-check-input\" type=\"radio\" value=\"@Model.AccountKeys[i].AccountKey\"/>\n                            <label asp-for=\"SelectedSigningKey\" class=\"form-check-label\"></label>\n                        </div>\n                    }\n                }\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SaveWalletSettings\">Save Wallet Settings</button>\n            </form>\n            \n            <h3 class=\"mt-5 mb-4\">Payment</h3>\n            <form method=\"post\" asp-action=\"UpdatePaymentSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                @if (Model.CanUsePayJoin)\n                {\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center\">\n                            <input asp-for=\"PayJoinEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                            <label asp-for=\"PayJoinEnabled\" class=\"form-label mb-0 me-1\"></label>\n                            <a href=\"https://docs.btcpayserver.org/Payjoin/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                            </a>\n                        </div>\n                        <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                    </div>\n                }\n                <div class=\"form-group\">\n                    <label asp-for=\"MonitoringExpiration\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#payment-invalid-if-transactions-fails-to-confirm-minutes-after-invoice-expiration\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <div class=\"input-group\">\n                        <input inputmode=\"numeric\" asp-for=\"MonitoringExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                        <span class=\"input-group-text\">minutes</span>\n                    </div>\n                    <span asp-validation-for=\"MonitoringExpiration\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"SpeedPolicy\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-confirmed-when-the-payment-transaction\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <select asp-for=\"SpeedPolicy\" class=\"form-select w-auto\" onchange=\"document.getElementById('unconfirmed-warning').hidden = this.value !== '0';\">\n                        <option value=\"0\">Is unconfirmed</option>\n                        <option value=\"1\">Has at least 1 confirmation</option>\n                        <option value=\"3\">Has at least 2 confirmations</option>\n                        <option value=\"2\">Has at least 6 confirmations</option>\n                    </select>\n                    <div class=\"alert alert-warning my-2\" hidden=\"@(Model.SpeedPolicy != 0)\" id=\"unconfirmed-warning\" role=\"alert\">\n                        Choosing to accept an unconfirmed invoice can lead to double-spending and is strongly discouraged.\n                    </div>\n                    <span asp-validation-for=\"SpeedPolicy\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-check my-1\">\n                    <input asp-for=\"ShowRecommendedFee\" type=\"checkbox\" class=\"form-check-input\"/>\n                    <label asp-for=\"ShowRecommendedFee\" class=\"form-check-label\"></label>\n                    <div class=\"form-text\">Fee will be shown for BTC and LTC onchain payments only.</div>\n                </div>\n                <div class=\"form-group mt-2\">\n                    <label asp-for=\"RecommendedFeeBlockTarget\" class=\"form-label\"></label>\n                    <input inputmode=\"numeric\" asp-for=\"RecommendedFeeBlockTarget\" class=\"form-control\" min=\"1\" style=\"width:8ch\" />\n                    <span asp-validation-for=\"RecommendedFeeBlockTarget\" class=\"text-danger\"></span>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SavePaymentSettings\">Save Payment Settings</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel($\"{Model.CryptoCode} wallet\", \"Change\", \"Update\"))\" />\n<partial name=\"ShowQR\"/>\n\n@section PageFootContent {\n    <script>\n        const wallets = @Safe.Json(Model.AccountKeys.Select(model => Encoders.Hex.EncodeData(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(model, Formatting.None)))))\n        const qrApp = initQRShow({ title: \"Wallet QR\" })\n        \n        delegate('click', '#Delete', event => { event.preventDefault() })\n        \n        delegate('click', 'button[data-account-key]', event => {\n            const { accountKey } = event.target.dataset;\n            qrApp.showData(wallets[parseInt(accountKey)]);\n        })\n        \n        if (navigator.registerProtocolHandler) {\n            document.getElementById('RegisterWallet').removeAttribute('hidden');\n            delegate('click', '#RegisterWallet', event => {\n               const { store, scheme, url } = event.target.dataset\n               const uri = decodeURIComponent(url)\n               navigator.registerProtocolHandler(scheme, uri, `BTCPay Wallet: ${store}`)\n            })\n        } \n    </script>\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n", "@using BTCPayServer.Controllers\n@model SignWithSeedViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3\">Using an HD private key or mnemonic seed</p>\n</header>\n\n<div class=\"alert alert-warning alert-dismissible my-4\" role=\"alert\">\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n        <vc:icon symbol=\"close\" />\n    </button>\n    <p>Before you proceed, please understand the following:</p>\n    <ol>\n        <li>Make sure this BTCPay Server instance <b>belongs to you</b>.</li>\n        <li>Use <b>Incognito mode or the Tor Browser</b> to ensure no malicious browser plugins are running that could steal your key.</li>\n    </ol>\n    <p class=\"mb-0\">Otherwise you are exposing yourself to malicious site owners, or to malicious plugins installed in your browser.</p>\n</div>\n\n<div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n\n<form method=\"post\" asp-action=\"SignWithSeed\" asp-route-walletId=\"@walletId\">\n    <partial name=\"SigningContext\" for=\"SigningContext\"/>\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <div class=\"form-group\">\n        <label asp-for=\"SeedOrKey\" class=\"form-label\"></label>\n        <input asp-for=\"SeedOrKey\" class=\"form-control\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\"/>\n    </div>\n    <div class=\"form-group\">\n        <label asp-for=\"Passphrase\" class=\"form-label\"></label>\n        <input asp-for=\"Passphrase\" class=\"form-control\"/>\n    </div>\n    <button id=\"Submit\" type=\"submit\" class=\"btn btn-primary\">Sign</button>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.PSBT, \"Decode PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n@section PageHeadContent {\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n@section PageFootContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            const psbtHex = @Json.Serialize(Model.PSBTHex);\n            if (psbtHex) {\n                const buffer = new window.URlib.Buffer.from(psbtHex, \"hex\");\n                const cryptoPSBT = new window.URlib.CryptoPSBT(buffer);\n                const encoder = cryptoPSBT.toUREncoder();\n                const modes = {\n                    ur: { title: \"UR\", fragments: encoder.encodeWhole() },\n                    static: { title: \"Static\", fragments: [psbtHex] }\n                };\n                initQRShow({ title: \"Scan the PSBT\", modes });\n            }\n            initCameraScanningApp(\"Scan PSBT\", data => {\n                let hex = data;\n                if (typeof(data) === \"object\") {\n                    if (data.type === \"crypto-psbt\") {\n                        const psbt = window.URlib.CryptoPSBT.fromCBOR(data.cbor);\n                        hex = psbt.getPSBT().toString('hex');\n                    } else {\n                        console.error('Unexpected UR type', data.type)\n                    }\n                } else if (typeof(data) === 'string') {\n                    hex = data;\n                }\n                document.getElementById(\"PSBT\").value = hex;\n                document.getElementById(\"Decode\").click();\n            }, \"scanModal\");\n        });\n    </script>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3 mx-md-5\">You can decode a PSBT by either pasting its content, uploading the file or scanning the wallet QR code.</p>\n</header>\n\n<div class=\"my-5\">\n    @if (Model.Errors != null && Model.Errors.Count != 0)\n    {\n        <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n                <vc:icon symbol=\"close\" />\n            </button>\n            @foreach (var error in Model.Errors)\n            {\n                <span>@error</span>\n                <br/>\n            }\n        </div>\n    }\n\n    <form class=\"form-group\" method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" enctype=\"multipart/form-data\">\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"form-group\">\n            <label asp-for=\"PSBT\" class=\"form-label\"></label>\n            <textarea class=\"form-control\" rows=\"5\" asp-for=\"PSBT\"></textarea>\n            <span asp-validation-for=\"PSBT\" class=\"text-danger\"></span>\n        </div>\n        <div class=\"form-group\">\n            <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n            <input asp-for=\"UploadedPSBTFile\" type=\"file\" class=\"form-control\">\n        </div>\n        <div class=\"d-flex\">\n            <button type=\"submit\" name=\"command\" value=\"decode\" class=\"btn btn-primary mt-2\" id=\"Decode\">Decode PSBT</button>\n            <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-secondary only-for-js ms-3 mt-2\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\">Scan wallet QR with camera</button>\n        </div>\n    </form>\n</div>\n<partial name=\"ShowQR\"/>\n<partial name=\"CameraScanner\"/>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTCombineViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.PSBT, \"Combine PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form class=\"form-group\" method=\"post\" asp-action=\"WalletPSBTCombine\" asp-route-walletId=\"@Context.GetRouteValue(\"walletId\")\" enctype=\"multipart/form-data\">\n    <input type=\"hidden\" asp-for=\"OtherPSBT\"/>\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <div class=\"form-group\">\n        <label asp-for=\"PSBT\" class=\"form-label\"></label>\n        <textarea class=\"form-control\" rows=\"5\" asp-for=\"PSBT\"></textarea>\n        <span asp-validation-for=\"PSBT\" class=\"text-danger\"></span>\n    </div>\n    <div class=\"form-group\">\n        <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n        <input type=\"file\" class=\"form-control\" asp-for=\"UploadedPSBTFile\">\n    </div>\n    <button id=\"Submit\" type=\"submit\" class=\"btn btn-primary\">Combine</button>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTViewModel\n@{\n\tvar walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n\tvar isReady = !Model.HasErrors;\n\tvar isSignable = !isReady;\n\tvar needsExport = !isSignable && !isReady;\n\tLayout = \"_LayoutWizard\";\n\tViewData.SetActivePage(WalletsNavPages.PSBT, isReady ? \"Confirm broadcasting this transaction\" : \"Transaction Details\", walletId);\n}\n\n@section PageHeadContent {\n    <link rel=\"stylesheet\" href=\"~/vendor/highlightjs/default.min.css\" asp-append-version=\"true\">\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n    <style>\n        .nav-pills .nav-link.active {\n            color: var(--btcpay-secondary-text-active);\n            background-color: var(--btcpay-secondary-bg-active);\n        }\n    </style>\n}\n\n@section PageFootContent {\n    <script src=\"~/vendor/highlightjs/highlight.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        hljs.initHighlightingOnLoad();\n        \n        document.addEventListener(\"DOMContentLoaded\", () => {\n            const psbtHex = @Json.Serialize(Model.PSBTHex);\n            const buffer = new window.URlib.Buffer.from(psbtHex, \"hex\");\n            const cryptoPSBT = new window.URlib.CryptoPSBT(buffer);\n            const encoder = cryptoPSBT.toUREncoder();\n            const modes = {\n                ur: { title: \"UR\", fragments: encoder.encodeWhole() },\n                static: { title: \"Static\", fragments: [psbtHex] }\n            };\n            const continueCallback = () => {\n                document.querySelector(\"#PSBTOptionsImportHeader button\").click()\n                document.getElementById(\"scanqrcode\").click()\n            };\n            \n            initQRShow({\n                title: \"Scan the PSBT with your wallet\",\n                modes,\n                continueTitle: \"Continue with signed PSBT\",\n                continueCallback\n            });\n            \n            initCameraScanningApp(\"Scan the PSBT from your wallet\", data => {\n                let hex = data;\n                if (typeof(data) === \"object\") {\n                    if (data.type === \"crypto-psbt\") {\n                        const psbt = window.URlib.CryptoPSBT.fromCBOR(data.cbor);\n                        hex = psbt.getPSBT().toString('hex');\n                    } else {\n                        console.error('Unexpected UR type', data.type)\n                    }\n                } else if (typeof(data) === 'string') {\n                    hex = data;\n                }\n                document.getElementById(\"ImportedPSBT\").value = hex;\n                document.getElementById(\"Decode\").click();\n            }, \"scanModal\");\n        });\n    </script>\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center mb-3\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<partial name=\"_PSBTInfo\" model=\"Model\" />\n\n@if (isSignable)\n{\n    <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n        <input type=\"hidden\" asp-for=\"CryptoCode\"/>\n        <input type=\"hidden\" asp-for=\"NBXSeedAvailable\"/>\n        <input type=\"hidden\" asp-for=\"PSBT\"/>\n        <input type=\"hidden\" asp-for=\"FileName\"/>\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"d-flex flex-column flex-sm-row flex-wrap justify-content-center align-items-sm-center\">\n            <button type=\"submit\" id=\"SignTransaction\" name=\"command\" value=\"sign\" class=\"btn btn-primary\">Sign transaction</button>\n        </div>\n    </form>\n} \nelse if (isReady)\n{\n    <form method=\"post\" asp-action=\"WalletPSBTReady\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n        <input type=\"hidden\" asp-for=\"SigningKey\" />\n        <input type=\"hidden\" asp-for=\"SigningKeyPath\" />\n        <partial name=\"SigningContext\" for=\"SigningContext\" />\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"d-flex flex-column flex-sm-row flex-wrap justify-content-center align-items-sm-center\">\n            @if (!string.IsNullOrEmpty(Model.SigningContext?.PayJoinBIP21))\n            {\n                <button type=\"submit\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" name=\"command\" value=\"payjoin\">Broadcast (Payjoin)</button>\n                <span class=\"mx-2\">or</span>\n                <button type=\"submit\" class=\"btn btn-secondary\" name=\"command\" value=\"broadcast\">Broadcast (Simple)</button>\n            }\n            else\n            {\n                <button id=\"BroadcastTransaction\" type=\"submit\" class=\"btn btn-primary\" name=\"command\" value=\"broadcast\">Broadcast transaction</button>\n            }\n        </div>\n    </form>\n}\nelse\n{\n    <p class=\"lead text-secondary mt-5\">\n        Export the PSBT for your wallet. Sign it with your wallet and \n        import the signed PSBT version here for finalization and broadcasting.\n    </p>\n}\n\n<div class=\"accordion\" id=\"PSBTOptions\">\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\" id=\"PSBTOptionsExportHeader\">\n            <button type=\"button\" class=\"accordion-button @(needsExport ? \"\" : \"collapsed\")\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsExportContent\" aria-controls=\"PSBTOptionsExportContent\" aria-expanded=\"@(needsExport ? \"true\" : \"false\")\">\n                <span class=\"h5\">Export PSBT @(isReady ? \"\" : \"for signing\")</span>\n                <vc:icon symbol=\"caret-down\"/>\n            </button>\n        </h2>\n        <div id=\"PSBTOptionsExportContent\" class=\"accordion-collapse collapse @(needsExport ? \"show\" : \"\")\" aria-labelledby=\"PSBTOptionsExportHeader\" data-bs-parent=\"#PSBTOptions\">\n            <div class=\"accordion-body\">\n                <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"mb-2\">\n                    <input type=\"hidden\" asp-for=\"CryptoCode\"/>\n                    <input type=\"hidden\" asp-for=\"PSBT\"/>\n                    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                    <input type=\"hidden\" asp-for=\"BackUrl\" />\n                    <div class=\"d-flex flex-column flex-sm-row flex-wrap align-items-sm-center\">\n                        <button name=\"command\" type=\"submit\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" value=\"save-psbt\">Download PSBT file</button>\n                        <button name=\"command\" type=\"button\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2 only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scan-qr-modal\">Show QR for wallet camera</button>\n                        <a id=\"ShowRawVersion\" href=\"#ExportOptions\" data-bs-toggle=\"collapse\" class=\"btn btn-link text-secondary\">Show raw versions</a>\n                    </div>\n                </form>\n                <div id=\"ExportOptions\" class=\"collapse\">\n                    <div class=\"pt-4\">\n                        <ul class=\"nav mb-3\" id=\"export-tab\" role=\"tablist\">\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill active\" id=\"export-base64-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-base64\" type=\"button\" role=\"tab\" aria-controls=\"export-base64\" aria-selected=\"true\">Base64</button>\n                            </li>\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill\" id=\"export-hex-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-hex\" type=\"button\" role=\"tab\" aria-controls=\"export-hex\" aria-selected=\"false\">HEX</button>\n                            </li>\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill\" id=\"export-json-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-json\" type=\"button\" role=\"tab\" aria-controls=\"export-json\" aria-selected=\"false\">JSON</button>\n                            </li>\n                        </ul>\n                        <div class=\"tab-content\" id=\"export-tabContent\">\n                            <div class=\"tab-pane fade show active\" id=\"export-base64\" role=\"tabpanel\" aria-labelledby=\"export-base64-tab\">\n                                <pre class=\"mb-4 text-wrap\"><code class=\"text\" id=\"psbt-base64\">@Model.PSBT</code></pre>\n                            </div>\n                            <div class=\"tab-pane fade\" id=\"export-hex\" role=\"tabpanel\" aria-labelledby=\"export-hex-tab\">\n                                <pre class=\"mb-4 text-wrap\"><code class=\"text\">@Model.PSBTHex</code></pre>\n                            </div>\n                            <div class=\"tab-pane fade\" id=\"export-json\" role=\"tabpanel\" aria-labelledby=\"export-json-tab\">\n                                <pre class=\"mb-0\"><code class=\"json\">@Model.Decoded</code></pre>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    @if (!isReady)\n    {\n        <div class=\"accordion-item\">\n            <h2 class=\"accordion-header\" id=\"PSBTOptionsImportHeader\">\n                <button type=\"button\" class=\"accordion-button collapsed\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsImportContent\" aria-controls=\"PSBTOptionsImportContent\" aria-expanded=\"false\">\n                    <span class=\"h5\">Provide updated PSBT</span>\n                    <vc:icon symbol=\"caret-down\"/>\n                </button>\n            </h2>\n            <div id=\"PSBTOptionsImportContent\" class=\"accordion-collapse collapse\" aria-labelledby=\"PSBTOptionsImportHeader\" data-bs-parent=\"#PSBTOptions\">\n                <div class=\"accordion-body\">\n                    <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" enctype=\"multipart/form-data\" class=\"mb-2\">\n                        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                        <input type=\"hidden\" asp-for=\"BackUrl\" />\n                        <div class=\"form-group\">\n                            <label for=\"ImportedPSBT\" class=\"form-label\">PSBT content</label>\n                            <textarea id=\"ImportedPSBT\" name=\"PSBT\" class=\"form-control\" rows=\"5\"></textarea>\n                        </div>\n                        <div class=\"form-group\">\n                            <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n                            <input asp-for=\"UploadedPSBTFile\" type=\"file\" class=\"form-control\">\n                        </div>\n                        <div class=\"d-flex flex-column flex-sm-row flex-wrap align-items-sm-center\">\n                            <button type=\"submit\" name=\"command\" value=\"decode\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" id=\"Decode\">Decode PSBT</button>\n                            <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-primary only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\">Scan wallet QR with camera</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    }\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\" id=\"PSBTOptionsAdvancedHeader\">\n            <button type=\"button\" class=\"accordion-button collapsed\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsAdvancedContent\" aria-controls=\"PSBTOptionsAdvancedContent\" aria-expanded=\"false\">\n                <span class=\"h5\">Add metadata to PSBT (advanced)</span>\n                <vc:icon symbol=\"caret-down\"/>\n            </button>\n        </h2>\n        <div id=\"PSBTOptionsAdvancedContent\" class=\"accordion-collapse collapse\" aria-labelledby=\"PSBTOptionsAdvancedHeader\" data-bs-parent=\"#PSBTOptions\">\n            <div class=\"accordion-body\">\n                <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"mb-2\">\n                    <input type=\"hidden\" asp-for=\"PSBT\"/>\n                    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                    <input type=\"hidden\" asp-for=\"BackUrl\" />\n                    <p class=\"mb-2\">For exporting the signed PSBT and transaction information to a wallet, update the PSBT.</p>\n                    <button id=\"update-psbt\" type=\"submit\" name=\"command\" value=\"update\" class=\"btn btn-secondary\">Update PSBT</button>\n                    <p class=\"mt-4 mb-2\">For batching transactions, you can combine this PSBT with another one.</p>\n                    <button id=\"combine-psbt\" type=\"submit\" name=\"command\" value=\"combine\" class=\"btn btn-secondary\">Combine PSBT</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n<partial name=\"ShowQR\"/>\n<partial name=\"CameraScanner\"/>\n", "@inject BTCPayServer.Services.BTCPayServerEnvironment env\n@using BTCPayServer.Controllers\n@using BTCPayServer.Components.QRCode\n@model BTCPayServer.Controllers.WalletReceiveViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var returnUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Receive, $\"Receive {Model.CryptoCode}\", walletId);\n}\n\n@section PageHeadContent\n{\n    <link href=\"~/main/qrcode.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n@section Navbar {\n    <a href=\"@returnUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form method=\"post\" asp-action=\"WalletReceive\" class=\"my-5\">\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    @if (string.IsNullOrEmpty(Model.Address))\n    {\n        <div class=\"d-grid gap-3 col-sm-10 col-md-8 col-lg-7 col-xxl-6 mx-auto\">\n            <button id=\"generateButton\" class=\"btn btn-primary\" type=\"submit\" name=\"command\" value=\"generate-new-address\">Generate next available @Model.CryptoCode address</button>\n            @if (env.CheatMode)\n            {\n                <button type=\"submit\" name=\"command\" value=\"fill-wallet\" class=\"btn btn-info\">Cheat Mode: Send transactions to this wallet</button>\n            }\n        </div>\n    }\n    else\n    {\n        <noscript>\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control \" readonly=\"readonly\" asp-for=\"Address\" id=\"address\"/>\n            </div>\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" readonly=\"readonly\" asp-for=\"PaymentLink\" id=\"payment-link\"/>\n            </div>\n            <div class=\"row mt-4\">\n                <div class=\"col-12 col-sm-6\">\n                    <button type=\"submit\" name=\"command\" value=\"generate-new-address\" class=\"btn btn-primary w-100\">Generate another address</button>\n                </div>\n                <div class=\"col-12 col-sm-6 mt-4 mt-sm-0\">\n                    <button type=\"submit\" name=\"command\" value=\"unreserve-current-address\" class=\"btn btn-secondary w-100\">Unreserve this address</button>\n                </div>\n            </div>\n        </noscript>\n        <div class=\"only-for-js col-sm-10 col-xxl-8 mx-auto\" id=\"app\">\n            <div class=\"tab-content text-center\">\n                <div class=\"tab-pane\" id=\"link-tab\" role=\"tabpanel\">\n                    <div class=\"qr-container mb-3\">\n                        <img src=\"@Model.CryptoImage\" class=\"qr-icon\" alt=\"@Model.CryptoCode\"/>\n                        <vc:qr-code data=\"@Model.PaymentLink\"/>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group\" data-clipboard=\"@Model.PaymentLink\">\n                            <input type=\"text\" class=\"form-control\" style=\"cursor:copy\" readonly=\"readonly\" value=\"@Model.PaymentLink\" id=\"payment-link\"/>\n                            <button type=\"button\" class=\"btn btn-outline-secondary p-2\" style=\"width:7em;\" data-clipboard-confirm>\n                                <vc:icon symbol=\"copy\"/>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane show active\" id=\"address-tab\" role=\"tabpanel\">\n                    <div class=\"qr-container mb-3\">\n                        <img src=\"@Model.CryptoImage\" class=\"qr-icon\" alt=\"@Model.CryptoCode\"/>\n                        <vc:qr-code data=\"@Model.Address\"/>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group\" data-clipboard=\"@Model.Address\">\n                            <input type=\"text\" class=\"form-control\" style=\"cursor:copy\" readonly=\"readonly\" value=\"@Model.Address\" id=\"address\"/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary p-2\" style=\"width:7em;\" data-clipboard-confirm>\n                                <vc:icon symbol=\"copy\"/>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"nav justify-content-center\">\n                <a class=\"btcpay-pill active\" data-bs-toggle=\"tab\" href=\"#address-tab\">Address</a>\n                <a class=\"btcpay-pill \" data-bs-toggle=\"tab\" href=\"#link-tab\">Link</a>\n            </div>\n        </div>\n\n        <div class=\"d-grid gap-3 col-sm-8 col-sm-6 col-lg-5 mx-auto mt-5\">\n            <button type=\"submit\" name=\"command\" value=\"generate-new-address\" class=\"btn btn-primary w-100\">Generate another address</button>\n            <button type=\"submit\" name=\"command\" value=\"unreserve-current-address\" class=\"btn btn-secondary w-100\">Unreserve this address</button>\n        </div>\n    }\n</form>\n", "@inject BTCPayServer.Security.ContentSecurityPolicies csp\n@using Microsoft.AspNetCore.Mvc.ModelBinding\n@using BTCPayServer.Controllers\n@model WalletSendModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, $\"Send {Model.CryptoCode}\", walletId);\n    csp.Add(\"worker-src\", \"blob:\");\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n@section PageHeadContent\n{\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n    <style>\n        .crypto-fee-link { padding-left: 1rem; padding-right: 1rem; }\n        .btn-group > .crypto-fee-link:last-of-type {\n            border-top-right-radius: .2rem  !important;\n            border-bottom-right-radius: .2rem !important;\n        }\n    </style>\n}\n\n@section PageFootContent\n{\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/wallet/wallet-camera-scanner.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/wallet/WalletSend.js\" asp-append-version=\"true\"></script>\n\n}\n\n<partial name=\"CameraScanner\"/>\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form method=\"post\" asp-action=\"WalletSend\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n    <input type=\"hidden\" asp-for=\"InputSelection\" />\n    <input type=\"hidden\" asp-for=\"FiatDivisibility\" />\n    <input type=\"hidden\" asp-for=\"CryptoDivisibility\" />\n    <input type=\"hidden\" asp-for=\"NBXSeedAvailable\" />\n    <input type=\"hidden\" asp-for=\"Fiat\" />\n    <input type=\"hidden\" asp-for=\"Rate\" />\n    <input type=\"hidden\" asp-for=\"CurrentBalance\" />\n    <input type=\"hidden\" asp-for=\"ImmatureBalance\" />\n    <input type=\"hidden\" asp-for=\"CryptoCode\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" name=\"BIP21\" id=\"BIP21\" />\n\n    @if (!ViewContext.ModelState.IsValid)\n    {\n        <ul class=\"text-danger\">\n            @foreach (var errors in ViewData.ModelState.Where(pair => pair.Key == string.Empty && pair.Value.ValidationState == ModelValidationState.Invalid))\n            {\n                foreach (var error in errors.Value.Errors)\n                {\n                    <li>@error.ErrorMessage</li>\n                }\n            }\n        </ul>\n    }\n\n    @if (Model.Outputs.Count == 1)\n    {\n        <div class=\"form-group\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <label asp-for=\"Outputs[0].DestinationAddress\" class=\"form-label\"></label>\n                <button type=\"submit\" name=\"command\" value=\"add-output\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\">\n                    <span class=\"fa fa-plus\"></span> Add another destination\n                </button>\n            </div>\n            <input asp-for=\"Outputs[0].DestinationAddress\" class=\"form-control font-monospace\" autofocus autocomplete=\"off\" />\n            <span asp-validation-for=\"Outputs[0].DestinationAddress\" class=\"text-danger\"></span>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <label asp-for=\"Outputs[0].Amount\" class=\"form-label\"></label>\n                <button type=\"submit\" name=\"command\" value=\"toggle-input-selection\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" id=\"toggleInputSelection\"><span class=\"fa fa-@(Model.InputSelection ? \"eye-slash\" : \"eye\") \"></span> @(Model.InputSelection ? \"Hide\" : \"Show\") coin selection</button>\n            </div>\n            <div class=\"input-group\">\n                <input asp-for=\"Outputs[0].Amount\" type=\"number\" inputmode=\"decimal\" step=\"any\" min=\"0\" asp-format=\"{0}\" class=\"form-control output-amount hide-number-spin\" />\n                <div class=\"input-group-text fiat-value\" style=\"display:none;\">\n                    <span class=\"input-group-text p-0 border-0\">=</span>\n                    <input type=\"number\" inputmode=\"decimal\" class=\"input-group-text fiat-value-edit-input py-0 border-0 hide-number-spin\" min=\"0\" step=\"any\" style=\"max-width:100px\" />\n                    <span class=\"input-group-text p-0 border-0\">@Model.Fiat</span>\n                </div>\n            </div>\n            <span asp-validation-for=\"Outputs[0].Amount\" class=\"text-danger\"></span>\n            <div class=\"form-text crypto-info\">\n                Your available balance is\n                <button type=\"button\" class=\"crypto-balance-link btn btn-link p-0 align-baseline\">@Model.CurrentBalance</button> <span>@Model.CryptoCode</span>.\n                @if (Model.ImmatureBalance > 0)\n                {\n                    <span><br><span class=\"text-warning\">\u26a0</span> @Model.ImmatureBalance @Model.CryptoCode are still immature and require additional confirmations.</span>\n                }\n            </div>\n        </div>\n    }\n    else\n    {\n        <div class=\"list-group list-group-flush\">\n            @for (var index = 0; index < Model.Outputs.Count; index++)\n            {\n                <input type=\"hidden\" asp-for=\"Outputs[index].PayoutId\" />\n                <div class=\"list-group-item d-block px-0 pt-0 pb-3 mb-3\">\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"Outputs[index].DestinationAddress\" class=\"form-label\"></label>\n                            <button type=\"submit\" name=\"command\" value=\"@($\"remove-output:{index}\")\" class=\"d-inline-block ms-2 btn text-danger btn-link p-0 mb-2\">\n                                <span class=\"fa fa-times\"></span> Remove Destination\n                            </button>\n                        </div>\n                        <input asp-for=\"Outputs[index].DestinationAddress\" class=\"form-control\" autocomplete=\"off\"/>\n                        <span asp-validation-for=\"Outputs[index].DestinationAddress\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-group\">\n                        <label asp-for=\"Outputs[index].Amount\" class=\"form-label\"></label>\n                        <div class=\"input-group\">\n                            <input asp-for=\"Outputs[index].Amount\" type=\"number\" min=\"0\" step=\"any\" asp-format=\"{0}\" class=\"form-control output-amount hide-number-spin\" />\n                            <div class=\"input-group-text fiat-value\" style=\"display:none;\">\n                                <span class=\"input-group-text p-0 border-0\">=</span>\n                                <input type=\"number\" inputmode=\"decimal\" class=\"input-group-text fiat-value-edit-input py-0 border-0 hide-number-spin\" min=\"0\" step=\"any\" style=\"max-width:100px\" />\n                                <span class=\"input-group-text p-0 border-0\">@Model.Fiat</span>\n                            </div>\n                        </div>\n                        <div class=\"form-text crypto-info\">\n                            Your available balance is\n                            <button type=\"button\" class=\"crypto-balance-link btn btn-link p-0 align-baseline\">@Model.CurrentBalance</button> <span>@Model.CryptoCode</span>.\n                            @if (Model.ImmatureBalance > 0)\n                            {\n                                <span><br>Note: @Model.ImmatureBalance @Model.CryptoCode are still immature and require additional confirmations.</span>\n                            }\n                        </div>\n                        <span asp-validation-for=\"Outputs[index].Amount\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-check\">\n                        <input type=\"checkbox\" asp-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"form-check-input subtract-fees\" />\n                        <label asp-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"form-check-label\"></label>\n                        <span asp-validation-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            }\n        </div>\n        <div class=\"d-grid gap-3 d-md-block mt-n2\">\n            <button type=\"submit\" name=\"command\" value=\"add-output\" class=\"btn btn-secondary me-md-1\"><span class=\"fa fa-plus\"></span> Add another destination</button>\n            <button type=\"submit\" name=\"command\" value=\"toggle-input-selection\" class=\"btn btn-secondary\" id=\"toggleInputSelection\"><span class=\"fa fa-@(Model.InputSelection ? \"eye-slash\" : \"eye\") \"></span> @(Model.InputSelection ? \"Hide\" : \"Show\") coin selection</button>\n        </div>\n    }\n\n    @if (Model.InputSelection)\n    {\n        <partial name=\"CoinSelection\" />\n    }\n\n    <div class=\"form-group my-4\">\n        <label asp-for=\"FeeSatoshiPerByte\" class=\"form-label\"></label>\n        <input asp-for=\"FeeSatoshiPerByte\" type=\"number\" inputmode=\"numeric\" min=\"0\" step=\"any\" class=\"form-control\" style=\"max-width:14ch;\" />\n        <span asp-validation-for=\"FeeSatoshiPerByte\" class=\"text-danger\"></span>\n        <span id=\"FeeRate-Error\" class=\"text-danger\"></span>\n        @if (Model.RecommendedSatoshiPerByte.Any())\n        {\n            <div class=\"text-start mt-4 d-flex align-items-sm-center flex-column flex-sm-row\">\n                <span class=\"text-secondary me-3\">\n                    Confirm in the next\n                </span>\n                <div class=\"btn-group btn-group-toggle feerate-options mt-2 mt-sm-0\" role=\"group\" data-bs-toggle=\"buttons\">\n                    @for (var index = 0; index < Model.RecommendedSatoshiPerByte.Count; index++)\n                    {\n                        var feeRateOption = Model.RecommendedSatoshiPerByte[index];\n                        <button type=\"button\" class=\"btn btn-sm btn-secondary crypto-fee-link\" value=\"@feeRateOption.FeeRate\" data-bs-toggle=\"tooltip\" title=\"@feeRateOption.FeeRate sat/b\">\n                            @feeRateOption.Target.TimeString()\n                        </button>\n                        <input type=\"hidden\" asp-for=\"RecommendedSatoshiPerByte[index].Target\" />\n                        <input type=\"hidden\" asp-for=\"RecommendedSatoshiPerByte[index].FeeRate\" />\n                    }\n                </div>\n            </div>\n        }\n    </div>\n    @if (Model.Outputs.Count == 1)\n    {\n        <div class=\"form-group\">\n            <div class=\"form-check\">\n                <input type=\"checkbox\" asp-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"form-check-input subtract-fees\" />\n                <label asp-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    }\n\n    <div class=\"my-4\">\n        <button class=\"d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0\" type=\"button\" id=\"AdvancedSettingsButton\" data-bs-toggle=\"collapse\" data-bs-target=\"#AdvancedSettings\" aria-expanded=\"false\" aria-controls=\"AdvancedSettings\">\n            <vc:icon symbol=\"caret-down\"/>\n            <span class=\"ms-1\">Advanced settings</span>\n        </button>\n        <div id=\"AdvancedSettings\" class=\"collapse\">\n            <div class=\"pt-3 pb-1\">\n                <div class=\"form-group\">\n                    <div class=\"form-check\">\n                        <input asp-for=\"NoChange\" class=\"form-check-input\" />\n                        <label asp-for=\"NoChange\" class=\"form-check-label\"></label>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#dont-create-utxo-change\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                        </a>\n                    </div>\n                </div>                        \n                <div class=\"form-group\">\n                    <div class=\"form-check\">\n                        <input asp-for=\"AlwaysIncludeNonWitnessUTXO\" class=\"form-check-input\"/>\n                        <label asp-for=\"AlwaysIncludeNonWitnessUTXO\" class=\"form-check-label\"></label>\n                    </div>\n                </div>    \n                @if (Model.SupportRBF)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"AllowFeeBump\" class=\"form-label\"></label>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#rbf-replace-by-fee\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                        </a>\n                        <select asp-for=\"AllowFeeBump\" class=\"form-select w-auto\">\n                            <option value=\"Maybe\">Randomize for higher privacy</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                        </select>\n                    </div>\n                }\n                @if (!string.IsNullOrEmpty(Model.PayJoinBIP21))\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"PayJoinBIP21\" class=\"form-label\"></label>\n                        <input asp-for=\"PayJoinBIP21\" class=\"form-control\" />\n                        <span asp-validation-for=\"PayJoinBIP21\" class=\"text-danger\"></span>\n                    </div>\n                }\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group d-grid d-sm-flex flex-wrap gap-3 mt-2\">\n        <button type=\"submit\" id=\"SignTransaction\" name=\"command\" value=\"sign\" class=\"btn btn-primary\">Sign transaction</button>\n        <button type=\"submit\" id=\"ScheduleTransaction\" name=\"command\" value=\"schedule\" class=\"btn btn-secondary\">Schedule transaction</button>\n        <a class=\"btn btn-secondary\" asp-controller=\"UIWallets\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" asp-route-returnUrl=\"@Model.ReturnUrl\" id=\"PSBT\">PSBT</a>\n        <button type=\"button\" id=\"bip21parse\" class=\"btn btn-secondary\" title=\"Paste BIP21/Address\"><i class=\"fa fa-paste\"></i></button>\n        <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-secondary only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\" title=\"Scan BIP21/Address with camera\"><i class=\"fa fa-camera\"></i></button>\n    </div>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletSendVaultModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign the transaction\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3\">Using BTCPay Server Vault</p>\n</header>\n\n<div id=\"walletAlert\" class=\"alert alert-warning alert-dismissible my-4\" style=\"display:none;\" role=\"alert\">\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n        <vc:icon symbol=\"close\" />\n    </button>\n    <span id=\"alertMessage\"></span>\n</div>\n\n<div id=\"body\" class=\"my-4\">\n    <form id=\"broadcastForm\" asp-action=\"WalletSendVault\" asp-route-walletId=\"@walletId\" method=\"post\" style=\"display:none;\">\n        <input type=\"hidden\" id=\"WalletId\" asp-for=\"WalletId\" />\n        <input type=\"hidden\" asp-for=\"WebsocketPath\" />\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <partial name=\"SigningContext\" for=\"SigningContext\" />\n    </form>\n    <div id=\"vaultPlaceholder\"></div>\n    <button id=\"vault-retry\" class=\"btn btn-primary\" style=\"display:none;\" type=\"button\">Retry</button>\n    <button id=\"vault-confirm\" class=\"btn btn-primary\" style=\"display:none;\"></button>\n</div>\n\n<partial name=\"VaultElements\" />\n\n@section PageFootContent\n{\n    <script src=\"~/js/vaultbridge.js\" type=\"text/javascript\" defer=\"defer\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/vaultbridge.ui.js\" type=\"text/javascript\" defer=\"defer\" asp-append-version=\"true\"></script>\n    <script>\n        async function askSign() {\n            var websocketPath = $(\"#WebsocketPath\").val();\n            var loc = window.location, ws_uri;\n            if (loc.protocol === \"https:\") {\n                ws_uri = \"wss:\";\n            } else {\n                ws_uri = \"ws:\";\n            }\n            ws_uri += \"//\" + loc.host;\n            ws_uri += websocketPath;\n            var html = $(\"#VaultConnection\").html();\n            $(\"#vaultPlaceholder\").html(html);\n            var vaultUI = new vaultui.VaultBridgeUI(ws_uri);\n            \n            while (!await vaultUI.askForDevice() || !await vaultUI.askSignPSBT({\n                walletId: $(\"#WalletId\").val(),\n                psbt: $(\"#SigningContext_PSBT\").val()\n            })) {\n            }\n            $(\"#SigningContext_PSBT\").val(vaultUI.psbt);\n            $(\"#broadcastForm\").submit();\n        }\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            askSign();\n        });\n\t\tvar alertMsg = document.getElementById(\"alertMessage\");\n\t\tvar walletAlert = document.getElementById(\"walletAlert\");\n\t\tvar isSafari = window.safari !== undefined;\n\t\tif (isSafari)\n\t\t{\n\t\t\talertMsg.innerHTML = \"Safari doesn't support BTCPay Server Vault. Please use a different browser. (<a class=\\\"alert-link\\\" href=\\\"https://bugs.webkit.org/show_bug.cgi?id=171934\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">More information</a>)\";\n\t\t\twalletAlert.style.display = null;\n\t\t}\n\t\tvar isBrave = navigator.brave !== undefined;\n\t\tif (isBrave)\n\t\t{\n\t\t\talertMsg.innerHTML = \"Brave supports BTCPay Server Vault, but you need to disable Brave Shields. (<a class=\\\"alert-link\\\" href=\\\"https://www.updateland.com/how-to-turn-off-brave-shields/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">More information</a>)\";\n\t\t\twalletAlert.style.display = null;\n\t\t}\n    </script>\n}\n", "@using BTCPayServer.Controllers\n@model WalletSigningOptionsModel\n@inject BTCPayNetworkProvider BTCPayNetworkProvider\n@{\n    var walletId = WalletId.Parse(Context.GetRouteValue(\"walletId\").ToString());\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign the transaction\", walletId.ToString());\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@backUrl\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@cancelUrl\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>Choose your signing method</h1>\n    <p class=\"lead text-secondary mt-3\">You can sign the transaction using one of the following methods.</p>\n</header>\n\n<form method=\"post\" asp-action=\"WalletSign\" asp-route-walletId=\"@walletId\">\n    <partial name=\"SigningContext\" for=\"SigningContext\" />\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n\n    @if (BTCPayNetworkProvider.GetNetwork<BTCPayNetwork>(walletId.CryptoCode).VaultSupported)\n    {\n        <div class=\"list-group mt-4\">\n            <button type=\"submit\" name=\"command\" value=\"vault\" class=\"list-group-item list-group-item-action only-for-js\" id=\"SignWithVault\">\n                <div class=\"image\">\n                    <vc:icon symbol=\"hardware-wallet\"/>\n                </div>\n                <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                    <div>\n                        <h4>Hardware wallet</h4>\n                        <p class=\"mb-0 text-secondary\">Sign using our Vault application</p>\n                    </div>\n                    <small class=\"d-block text-primary mt-2 mt-lg-0\">Recommended</small>\n                </div>\n                <vc:icon symbol=\"caret-right\"/>\n            </button>\n            <noscript>\n                <div class=\"list-group-item disabled\">\n                    <div class=\"image\">\n                        <vc:icon symbol=\"hardware-wallet\"/>\n                    </div>\n                    <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                        <div><h4>Hardware wallet</h4>\n                            <p class=\"mb-0\">Please enable JavaScript for this option to be available</p>\n                        </div>\n                    </div>\n                </div>\n            </noscript>\n        </div>\n    }\n\n    <div class=\"list-group mt-4\">\n        <button type=\"submit\" name=\"command\" value=\"decode\" class=\"list-group-item list-group-item-action\" id=\"SignWithPSBT\">\n            <div class=\"image\">\n                <vc:icon symbol=\"wallet-file\"/>\n            </div>\n            <div class=\"content\">\n                <h4>\n                    Partially Signed Bitcoin Transaction\n                    <small>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#signing-with-a-wallet-supporting-psbt\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary pe-none\" title=\"More information...\"></span>\n                        </a>\n                    </small>\n                </h4>\n                <p class=\"mb-0 text-secondary\">Offline signing, without connecting your wallet to the internet</p>\n            </div>\n            <vc:icon symbol=\"caret-right\"/>\n        </button>\n    </div>\n\n    <div class=\"list-group mt-4\">\n        <button type=\"submit\" name=\"command\" value=\"seed\" class=\"list-group-item list-group-item-action\" id=\"SignWithSeed\">\n            <div class=\"image\">\n                <vc:icon symbol=\"seed\"/>\n            </div>\n            <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                <div>\n                    <h4>Private key or seed</h4>\n                    <p class=\"mb-0 text-secondary\">Provide the 12 or 24 word recovery seed</p>\n                </div>\n                <small class=\"d-block text-danger mt-2 mt-lg-0\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"You really should not type your seed into a device that is connected to the internet.\">Not recommended <span class=\"fa fa-question-circle-o\"></span></small>\n            </div>\n            <vc:icon symbol=\"caret-right\"/>\n        </button>\n    </div>\n</form>\n"], "fixing_code": ["using System;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Lightning;\nusing BTCPayServer.Lightning.CLightning;\nusing BTCPayServer.Views.Manage;\nusing BTCPayServer.Views.Server;\nusing BTCPayServer.Views.Stores;\nusing BTCPayServer.Views.Wallets;\nusing Microsoft.Extensions.Configuration;\nusing NBitcoin;\nusing NBitcoin.RPC;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing OpenQA.Selenium.Support.UI;\nusing Xunit;\n\nnamespace BTCPayServer.Tests\n{\n    public class SeleniumTester : IDisposable\n    {\n        public IWebDriver Driver { get; set; }\n        public ServerTester Server { get; set; }\n        public WalletId WalletId { get; set; }\n\n        public string StoreId { get; set; }\n\n        public static readonly TimeSpan ImplicitWait = TimeSpan.FromSeconds(5);\n\n        public async Task StartAsync()\n        {\n            Server.PayTester.NoCSP = true;\n            await Server.StartAsync();\n\n            var windowSize = (Width: 1200, Height: 1000);\n            var builder = new ConfigurationBuilder();\n            builder.AddUserSecrets(\"AB0AC1DD-9D26-485B-9416-56A33F268117\");\n            var config = builder.Build();\n\n            // Run `dotnet user-secrets set RunSeleniumInBrowser true` to run tests in browser\n            var runInBrowser = config[\"RunSeleniumInBrowser\"] == \"true\";\n            // Reset this using `dotnet user-secrets remove RunSeleniumInBrowser`\n\n            var chromeDriverPath = config[\"ChromeDriverDirectory\"] ?? (Server.PayTester.InContainer ? \"/usr/bin\" : Directory.GetCurrentDirectory());\n\n            var options = new ChromeOptions();\n            if (!runInBrowser)\n            {\n                options.AddArguments(\"headless\");\n            }\n            options.AddArguments($\"window-size={windowSize.Width}x{windowSize.Height}\");\n            options.AddArgument(\"shm-size=2g\");\n            options.AddArgument(\"start-maximized\");\n            if (Server.PayTester.InContainer)\n            {\n                // Shot in the dark to fix https://stackoverflow.com/questions/53902507/unknown-error-session-deleted-because-of-page-crash-from-unknown-error-cannot\n                options.AddArgument(\"--disable-dev-shm-usage\");\n                Driver = new OpenQA.Selenium.Remote.RemoteWebDriver(new Uri(\"http://selenium:4444/wd/hub\"), new RemoteSessionSettings(options));\n                var containerIp = File.ReadAllText(\"/etc/hosts\").Split('\\n', StringSplitOptions.RemoveEmptyEntries).Last()\n                    .Split('\\t', StringSplitOptions.RemoveEmptyEntries)[0].Trim();\n                TestLogs.LogInformation($\"Selenium: Container's IP {containerIp}\");\n                ServerUri = new Uri(Server.PayTester.ServerUri.AbsoluteUri.Replace($\"http://{Server.PayTester.HostName}\", $\"http://{containerIp}\", StringComparison.OrdinalIgnoreCase), UriKind.Absolute);\n            }\n            else\n            {\n                var cds = ChromeDriverService.CreateDefaultService(chromeDriverPath);\n                cds.EnableVerboseLogging = true;\n                cds.Port = Utils.FreeTcpPort();\n                cds.HostName = \"127.0.0.1\";\n                cds.Start();\n                Driver = new ChromeDriver(cds, options,\n                    // A bit less than test timeout\n                    TimeSpan.FromSeconds(50));\n                ServerUri = Server.PayTester.ServerUri;\n            }\n            Driver.Manage().Window.Maximize();\n\n            TestLogs.LogInformation($\"Selenium: Using {Driver.GetType()}\");\n            TestLogs.LogInformation($\"Selenium: Browsing to {ServerUri}\");\n            TestLogs.LogInformation($\"Selenium: Resolution {Driver.Manage().Window.Size}\");\n            GoToRegister();\n            Driver.AssertNoError();\n        }\n\n        public void PayInvoice(bool mine = false)\n        {\n            Driver.FindElement(By.Id(\"FakePayment\")).Click();\n            if (mine)\n            {\n                MineBlockOnInvoiceCheckout();\n            }\n        }\n\n        public void MineBlockOnInvoiceCheckout()\n        {\n            Driver.FindElement(By.CssSelector(\"#mine-block button\")).Click();\n\n        }\n\n        /// <summary>\n        /// Use this ServerUri when trying to browse with selenium\n        /// Because for some reason, the selenium container can't resolve the tests container domain name\n        /// </summary>\n        public Uri ServerUri;\n        internal IWebElement FindAlertMessage(StatusMessageModel.StatusSeverity severity = StatusMessageModel.StatusSeverity.Success)\n        {\n            return FindAlertMessage(new[] { severity });\n        }\n        internal IWebElement FindAlertMessage(params StatusMessageModel.StatusSeverity[] severity)\n        {\n            var className = string.Join(\", \", severity.Select(statusSeverity => $\".alert-{StatusMessageModel.ToString(statusSeverity)}\"));\n            IWebElement el;\n            try\n            {\n                var elements = Driver.FindElements(By.CssSelector(className));\n                el = elements.FirstOrDefault(e => e.Displayed);\n                if (el is null)\n                    el = elements.FirstOrDefault();\n                if (el is null)\n                    el = Driver.WaitForElement(By.CssSelector(className));\n            }\n            catch (NoSuchElementException)\n            {\n                el = Driver.WaitForElement(By.CssSelector(className));\n            }\n            if (el is null)\n                throw new NoSuchElementException($\"Unable to find {className}\");\n            if (!el.Displayed)\n                throw new ElementNotVisibleException($\"{className} is present, but not displayed: {el.GetAttribute(\"id\")} - Text: {el.Text}\");\n            return el;\n        }\n\n        public string Link(string relativeLink)\n        {\n            return ServerUri.AbsoluteUri.WithoutEndingSlash() + relativeLink.WithStartingSlash();\n        }\n\n        public void GoToRegister()\n        {\n            Driver.Navigate().GoToUrl(Link(\"/register\"));\n        }\n\n        public string RegisterNewUser(bool isAdmin = false)\n        {\n            var usr = RandomUtils.GetUInt256().ToString().Substring(64 - 20) + \"@a.com\";\n            TestLogs.LogInformation($\"User: {usr} with password 123456\");\n            Driver.FindElement(By.Id(\"Email\")).SendKeys(usr);\n            Driver.FindElement(By.Id(\"Password\")).SendKeys(\"123456\");\n            Driver.FindElement(By.Id(\"ConfirmPassword\")).SendKeys(\"123456\");\n            if (isAdmin)\n                Driver.FindElement(By.Id(\"IsAdmin\")).Click();\n            Driver.FindElement(By.Id(\"RegisterButton\")).Click();\n            Driver.AssertNoError();\n            CreatedUser = usr;\n            return usr;\n        }\n        string CreatedUser;\n\n        public TestAccount AsTestAccount()\n        {\n            return new TestAccount(Server) { RegisterDetails = new Models.AccountViewModels.RegisterViewModel() { Password = \"123456\", Email = CreatedUser } };\n        }\n\n        public (string storeName, string storeId) CreateNewStore(bool keepId = true)\n        {\n            // If there's no store yet, there is no dropdown toggle\n            if (Driver.PageSource.Contains(\"id=\\\"StoreSelectorToggle\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"StoreSelectorToggle\")).Click();\n            }\n            Driver.WaitForElement(By.Id(\"StoreSelectorCreate\")).Click();\n            var name = \"Store\" + RandomUtils.GetUInt64();\n            TestLogs.LogInformation($\"Created store {name}\");\n            Driver.WaitForElement(By.Id(\"Name\")).SendKeys(name);\n            var rateSource = new SelectElement(Driver.FindElement(By.Id(\"PreferredExchange\")));\n            Assert.Equal(\"Kraken (Recommended)\", rateSource.SelectedOption.Text);\n            rateSource.SelectByText(\"CoinGecko\");\n            Driver.WaitForElement(By.Id(\"Create\")).Click();\n            Driver.FindElement(By.Id(\"StoreNav-StoreSettings\")).Click();\n            Driver.FindElement(By.Id($\"SectionNav-{StoreNavPages.General.ToString()}\")).Click();\n            var storeId = Driver.WaitForElement(By.Id(\"Id\")).GetAttribute(\"value\");\n            if (keepId)\n                StoreId = storeId;\n            return (name, storeId);\n        }\n\n        public void EnableCheckoutV2(bool bip21 = false)\n        {\n            GoToStore(StoreNavPages.CheckoutAppearance);\n            Driver.SetCheckbox(By.Id(\"UseNewCheckout\"), true);\n            Driver.WaitForElement(By.Id(\"OnChainWithLnInvoiceFallback\"));\n            Driver.SetCheckbox(By.Id(\"OnChainWithLnInvoiceFallback\"), bip21);\n            Driver.FindElement(By.Id(\"Save\")).SendKeys(Keys.Enter);\n            Assert.Contains(\"Store successfully updated\", FindAlertMessage().Text);\n            Assert.True(Driver.FindElement(By.Id(\"UseNewCheckout\")).Selected);\n        }\n\n        public Mnemonic GenerateWallet(string cryptoCode = \"BTC\", string seed = \"\", bool? importkeys = null, bool isHotWallet = false, ScriptPubKeyType format = ScriptPubKeyType.Segwit)\n        {\n            var isImport = !string.IsNullOrEmpty(seed);\n            GoToWalletSettings(cryptoCode);\n            // Replace previous wallet case\n            if (Driver.PageSource.Contains(\"id=\\\"ChangeWalletLink\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"ActionsDropdownToggle\")).Click();\n                Driver.WaitForElement(By.Id(\"ChangeWalletLink\")).Click();\n                Driver.WaitForElement(By.Id(\"ConfirmInput\")).SendKeys(\"REPLACE\");\n                Driver.FindElement(By.Id(\"ConfirmContinue\")).Click();\n            }\n\n            if (isImport)\n            {\n                TestLogs.LogInformation(\"Progressing with existing seed\");\n                Driver.FindElement(By.Id(\"ImportWalletOptionsLink\")).Click();\n                Driver.FindElement(By.Id(\"ImportSeedLink\")).Click();\n                Driver.FindElement(By.Id(\"ExistingMnemonic\")).SendKeys(seed);\n                Driver.SetCheckbox(By.Id(\"SavePrivateKeys\"), isHotWallet);\n            }\n            else\n            {\n                var option = isHotWallet ? \"Hotwallet\" : \"Watchonly\";\n                TestLogs.LogInformation($\"Generating new seed ({option})\");\n                Driver.FindElement(By.Id(\"GenerateWalletLink\")).Click();\n                Driver.FindElement(By.Id($\"Generate{option}Link\")).Click();\n            }\n\n            Driver.FindElement(By.Id(\"ScriptPubKeyType\")).Click();\n            Driver.FindElement(By.CssSelector($\"#ScriptPubKeyType option[value={format}]\")).Click();\n\n            Driver.ToggleCollapse(\"AdvancedSettings\");\n            if (importkeys is bool v)\n                Driver.SetCheckbox(By.Id(\"ImportKeysToRPC\"), v);\n            Driver.FindElement(By.Id(\"Continue\")).Click();\n\n            if (isImport)\n            {\n                // Confirm addresses\n                Driver.FindElement(By.Id(\"Confirm\")).Click();\n            }\n            else\n            {\n                // Seed backup\n                FindAlertMessage();\n                if (string.IsNullOrEmpty(seed))\n                {\n                    seed = Driver.FindElements(By.Id(\"RecoveryPhrase\")).First().GetAttribute(\"data-mnemonic\");\n                }\n\n                // Confirm seed backup\n                Driver.FindElement(By.Id(\"confirm\")).Click();\n                Driver.FindElement(By.Id(\"submit\")).Click();\n            }\n\n            WalletId = new WalletId(StoreId, cryptoCode);\n            return new Mnemonic(seed);\n        }\n\n        /// <summary>\n        /// Assume to be in store's settings\n        /// </summary>\n        /// <param name=\"cryptoCode\"></param>\n        /// <param name=\"derivationScheme\"></param>\n        public void AddDerivationScheme(string cryptoCode = \"BTC\", string derivationScheme = \"xpub661MyMwAqRbcGABgHMUXDzPzH1tU7eZaAaJQXhDXsSxsqyQzQeU6kznNfSuAyqAK9UaWSaZaMFdNiY5BCF4zBPAzSnwfUAwUhwttuAKwfRX-[legacy]\")\n        {\n            if (!Driver.PageSource.Contains($\"Setup {cryptoCode} Wallet\"))\n            {\n                GoToWalletSettings(cryptoCode);\n            }\n\n            Driver.FindElement(By.Id(\"ImportWalletOptionsLink\")).Click();\n            Driver.FindElement(By.Id(\"ImportXpubLink\")).Click();\n            Driver.FindElement(By.Id(\"DerivationScheme\")).SendKeys(derivationScheme);\n            Driver.FindElement(By.Id(\"Continue\")).Click();\n            Driver.FindElement(By.Id(\"Confirm\")).Click();\n            FindAlertMessage();\n        }\n\n        public void AddLightningNode()\n        {\n            AddLightningNode(null, null, true);\n        }\n\n        public void AddLightningNode(LightningConnectionType? connectionType = null, bool test = true)\n        {\n            AddLightningNode(null, connectionType, test);\n        }\n\n        public void AddLightningNode(string cryptoCode = null, LightningConnectionType? connectionType = null, bool test = true)\n        {\n            cryptoCode ??= \"BTC\";\n            if (!Driver.PageSource.Contains(\"Connect to a Lightning node\"))\n            {\n                GoToLightningSettings();\n            }\n\n            var connectionString = connectionType switch\n            {\n                LightningConnectionType.Charge =>\n                    $\"type=charge;server={Server.MerchantCharge.Client.Uri.AbsoluteUri};allowinsecure=true\",\n                LightningConnectionType.CLightning =>\n                    $\"type=clightning;server={((CLightningClient)Server.MerchantLightningD).Address.AbsoluteUri}\",\n                LightningConnectionType.LndREST =>\n                    $\"type=lnd-rest;server={Server.MerchantLnd.Swagger.BaseUrl};allowinsecure=true\",\n                _ => null\n            };\n\n            if (connectionString == null)\n            {\n                Assert.True(Driver.FindElement(By.Id(\"LightningNodeType-Internal\")).Enabled, \"Usage of the internal Lightning node is disabled.\");\n                Driver.FindElement(By.CssSelector(\"label[for=\\\"LightningNodeType-Internal\\\"]\")).Click();\n            }\n            else\n            {\n                Driver.FindElement(By.CssSelector(\"label[for=\\\"LightningNodeType-Custom\\\"]\")).Click();\n                Driver.WaitForElement(By.Id(\"ConnectionString\")).Clear();\n                Driver.FindElement(By.Id(\"ConnectionString\")).SendKeys(connectionString);\n                if (test)\n                {\n                    Driver.FindElement(By.Id(\"test\")).Click();\n                    Assert.Contains(\"Connection to the Lightning node successful.\", FindAlertMessage().Text);\n                }\n            }\n\n            Driver.FindElement(By.Id(\"save\")).Click();\n            Assert.Contains($\"{cryptoCode} Lightning node updated.\", FindAlertMessage().Text);\n\n            var enabled = Driver.FindElement(By.Id($\"{cryptoCode}LightningEnabled\"));\n            if (enabled.Text == \"Enable\")\n            {\n                enabled.Click();\n                Assert.Contains($\"{cryptoCode} Lightning payments are now enabled for this store.\", FindAlertMessage().Text);\n            }\n        }\n\n        public Logging.ILog TestLogs => Server.TestLogs;\n        public void ClickOnAllSectionLinks()\n        {\n            var links = Driver.FindElements(By.CssSelector(\"#SectionNav .nav-link\")).Select(c => c.GetAttribute(\"href\")).ToList();\n            Driver.AssertNoError();\n            foreach (var l in links)\n            {\n                TestLogs.LogInformation($\"Checking no error on {l}\");\n                Driver.Navigate().GoToUrl(l);\n                Driver.AssertNoError();\n            }\n        }\n\n        public void Dispose()\n        {\n            if (Driver != null)\n            {\n                try\n                {\n                    Driver.Quit();\n                }\n                catch\n                {\n                    // ignored\n                }\n\n                Driver.Dispose();\n            }\n\n            Server?.Dispose();\n        }\n\n        internal void AssertNotFound()\n        {\n            Assert.Contains(\"404 - Page not found</h1>\", Driver.PageSource);\n        }\n\n        internal void AssertAccessDenied()\n        {\n            Assert.Contains(\"- Denied</h\", Driver.PageSource);\n        }\n\n        public void GoToHome()\n        {\n            Driver.Navigate().GoToUrl(ServerUri);\n        }\n\n        public void Logout()\n        {\n            if (!Driver.PageSource.Contains(\"id=\\\"Nav-Logout\\\"\"))\n            {\n                Driver.Navigate().GoToUrl(ServerUri);\n            }\n            Driver.FindElement(By.Id(\"Nav-Account\")).Click();\n            Driver.FindElement(By.Id(\"Nav-Logout\")).Click();\n        }\n\n        public void LogIn(string user, string password)\n        {\n            Driver.FindElement(By.Id(\"Email\")).SendKeys(user);\n            Driver.FindElement(By.Id(\"Password\")).SendKeys(password);\n            Driver.FindElement(By.Id(\"LoginButton\")).Click();\n        }\n\n        public void GoToStore(StoreNavPages storeNavPage = StoreNavPages.General)\n        {\n            GoToStore(null, storeNavPage);\n        }\n\n        public void GoToStore(string storeId, StoreNavPages storeNavPage = StoreNavPages.General)\n        {\n            if (storeId is not null)\n            {\n                GoToUrl($\"/stores/{storeId}/\");\n                StoreId = storeId;\n                if (WalletId != null)\n                    WalletId = new WalletId(storeId, WalletId.CryptoCode);\n            }\n\n            Driver.FindElement(By.Id(\"StoreNav-StoreSettings\")).Click();\n\n            if (storeNavPage != StoreNavPages.General)\n            {\n                switch (storeNavPage)\n                {\n                    case StoreNavPages.Dashboard:\n                    case StoreNavPages.Payouts:\n                    case StoreNavPages.PayButton:\n                    case StoreNavPages.PullPayments:\n                        Driver.FindElement(By.Id($\"StoreNav-{storeNavPage.ToString()}\")).Click();\n                        break;\n                    default:\n                        Driver.FindElement(By.Id($\"SectionNav-{storeNavPage.ToString()}\")).Click();\n                        break;\n                }\n            }\n        }\n\n        public void GoToWalletSettings(string cryptoCode = \"BTC\")\n        {\n            Driver.FindElement(By.Id($\"StoreNav-Wallet{cryptoCode}\")).Click();\n            if (Driver.PageSource.Contains(\"id=\\\"WalletNav-Settings\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"WalletNav-Settings\")).Click();\n            }\n        }\n\n        public void GoToLightningSettings(string cryptoCode = \"BTC\")\n        {\n            Driver.FindElement(By.Id($\"StoreNav-Lightning{cryptoCode}\")).Click();\n            // if Lightning is already set up we need to navigate to the settings\n            if (Driver.PageSource.Contains(\"id=\\\"SectionNav-LightningSettings\\\"\"))\n            {\n                Driver.FindElement(By.Id(\"SectionNav-LightningSettings\")).Click();\n            }\n        }\n\n        public void SelectStoreContext(string storeId)\n        {\n            Driver.FindElement(By.Id(\"StoreSelectorToggle\")).Click();\n            Driver.FindElement(By.Id($\"StoreSelectorMenuItem-{storeId}\")).Click();\n        }\n\n        public void GoToInvoiceCheckout(string invoiceId = null)\n        {\n            invoiceId ??= InvoiceId;\n            Driver.FindElement(By.Id(\"StoreNav-Invoices\")).Click();\n            Driver.FindElement(By.Id($\"invoice-checkout-{invoiceId}\")).Click();\n            CheckForJSErrors();\n        }\n\n        public void GoToInvoice(string id)\n        {\n            GoToUrl($\"/invoices/{id}/\");\n        }\n\n        public void GoToInvoices(string storeId = null)\n        {\n            if (storeId is null)\n            {\n                Driver.FindElement(By.Id(\"StoreNav-Invoices\")).Click();\n            }\n            else\n            {\n                GoToUrl(storeId == null ? \"/invoices/\" : $\"/stores/{storeId}/invoices/\");\n                StoreId = storeId;\n            }\n        }\n\n        public void GoToProfile(ManageNavPages navPages = ManageNavPages.Index)\n        {\n            Driver.WaitForAndClick(By.Id(\"Nav-Account\"));\n            Driver.WaitForAndClick(By.Id(\"Nav-ManageAccount\"));\n            if (navPages != ManageNavPages.Index)\n            {\n                Driver.WaitForAndClick(By.Id($\"SectionNav-{navPages.ToString()}\"));\n            }\n        }\n\n        public void GoToLogin()\n        {\n            GoToUrl(\"/login\");\n        }\n\n        public string CreateInvoice(decimal? amount = 100,\n            string currency = \"USD\",\n            string refundEmail = \"\",\n            string defaultPaymentMethod = null,\n            bool? requiresRefundEmail = null,\n            StatusMessageModel.StatusSeverity expectedSeverity = StatusMessageModel.StatusSeverity.Success\n        )\n        {\n            return CreateInvoice(null, amount, currency, refundEmail, defaultPaymentMethod, requiresRefundEmail, expectedSeverity);\n        }\n\n        public string CreateInvoice(\n            string storeId,\n            decimal? amount = 100,\n            string currency = \"USD\",\n            string refundEmail = \"\",\n            string defaultPaymentMethod = null,\n            bool? requiresRefundEmail = null,\n            StatusMessageModel.StatusSeverity expectedSeverity = StatusMessageModel.StatusSeverity.Success\n        )\n        {\n            GoToInvoices(storeId);\n\n            Driver.FindElement(By.Id(\"CreateNewInvoice\")).Click();\n            if (amount is decimal v)\n                Driver.FindElement(By.Id(\"Amount\")).SendKeys(v.ToString(CultureInfo.InvariantCulture));\n            var currencyEl = Driver.FindElement(By.Id(\"Currency\"));\n            currencyEl.Clear();\n            currencyEl.SendKeys(currency);\n            Driver.FindElement(By.Id(\"BuyerEmail\")).SendKeys(refundEmail);\n            if (defaultPaymentMethod is not null)\n                new SelectElement(Driver.FindElement(By.Name(\"DefaultPaymentMethod\"))).SelectByValue(defaultPaymentMethod);\n            if (requiresRefundEmail is bool)\n                new SelectElement(Driver.FindElement(By.Name(\"RequiresRefundEmail\"))).SelectByValue(requiresRefundEmail == true ? \"1\" : \"2\");\n            Driver.FindElement(By.Id(\"Create\")).Click();\n\n            var statusElement = FindAlertMessage(expectedSeverity);\n            var inv = expectedSeverity == StatusMessageModel.StatusSeverity.Success ? statusElement.Text.Split(\" \")[1] : null;\n            InvoiceId = inv;\n            TestLogs.LogInformation($\"Created invoice {inv}\");\n            return inv;\n        }\n        string InvoiceId;\n\n        public async Task<string> FundStoreWallet(WalletId walletId = null, int coins = 1, decimal denomination = 1m)\n        {\n            walletId ??= WalletId;\n            GoToWallet(walletId, WalletsNavPages.Receive);\n            Driver.FindElement(By.Id(\"generateButton\")).Click();\n            var addressStr = Driver.FindElement(By.Id(\"address\")).GetAttribute(\"value\");\n            var address = BitcoinAddress.Create(addressStr, ((BTCPayNetwork)Server.NetworkProvider.GetNetwork(walletId.CryptoCode)).NBitcoinNetwork);\n            for (var i = 0; i < coins; i++)\n            {\n                bool mined = false;\nretry:\n                try\n                {\n                    await Server.ExplorerNode.SendToAddressAsync(address, Money.Coins(denomination));\n                }\n                catch (RPCException) when (!mined)\n                {\n                    mined = true;\n                    await Server.ExplorerNode.GenerateAsync(1);\n                    goto retry;\n                }\n            }\n            Driver.Navigate().Refresh();\n            Driver.FindElement(By.Id(\"CancelWizard\")).Click();\n            return addressStr;\n        }\n\n        private void CheckForJSErrors()\n        {\n            //wait for seleniun update: https://stackoverflow.com/questions/57520296/selenium-webdriver-3-141-0-driver-manage-logs-availablelogtypes-throwing-syste\n            //            var errorStrings = new List<string>\n            //            {\n            //                \"SyntaxError\",\n            //                \"EvalError\",\n            //                \"ReferenceError\",\n            //                \"RangeError\",\n            //                \"TypeError\",\n            //                \"URIError\"\n            //            };\n            //\n            //            var jsErrors = Driver.Manage().Logs.GetLog(LogType.Browser).Where(x => errorStrings.Any(e => x.Message.Contains(e)));\n            //\n            //            if (jsErrors.Any())\n            //            {\n            //                TestLogs.LogInformation(\"JavaScript error(s):\" + Environment.NewLine + jsErrors.Aggregate(\"\", (s, entry) => s + entry.Message + Environment.NewLine));\n            //            }\n            //            Assert.Empty(jsErrors);\n\n        }\n\n        public void GoToWallet(WalletId walletId = null, WalletsNavPages navPages = WalletsNavPages.Send)\n        {\n            walletId ??= WalletId;\n            Driver.Navigate().GoToUrl(new Uri(ServerUri, $\"wallets/{walletId}\"));\n            if (navPages == WalletsNavPages.PSBT)\n            {\n                Driver.FindElement(By.Id(\"WalletNav-Send\")).Click();\n                Driver.FindElement(By.Id(\"PSBT\")).Click();\n            }\n            else if (navPages != WalletsNavPages.Transactions)\n            {\n                Driver.FindElement(By.Id($\"WalletNav-{navPages}\")).Click();\n            }\n        }\n\n        public void GoToUrl(string relativeUrl)\n        {\n            Driver.Navigate().GoToUrl(new Uri(ServerUri, relativeUrl));\n        }\n\n        public void GoToServer(ServerNavPages navPages = ServerNavPages.Index)\n        {\n            Driver.FindElement(By.Id(\"Nav-ServerSettings\")).Click();\n            if (navPages != ServerNavPages.Index)\n            {\n                Driver.FindElement(By.Id($\"SectionNav-{navPages}\")).Click();\n            }\n        }\n    }\n}\n", "\nusing System;\nusing BTCPayServer;\nusing BTCPayServer.Client.Models;\nusing BTCPayServer.Controllers;\nusing BTCPayServer.Services.Apps;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Routing;\n\nnamespace Microsoft.AspNetCore.Mvc\n{\n    public static class UrlHelperExtensions\n    {\n#nullable enable\n        public static string? EnsureLocal(this IUrlHelper helper, string? url, HttpRequest? httpRequest = null)\n        {\n            if (url is null || helper.IsLocalUrl(url))\n                return url;\n            if (httpRequest is null)\n                return null;\n            if (Uri.TryCreate(url, UriKind.Absolute, out var r) && r.Host.Equals(httpRequest.Host.Host))\n                return url;\n            return null;\n        }\n#nullable restore\n        public static string EmailConfirmationLink(this LinkGenerator urlHelper, string userId, string code, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(nameof(UIAccountController.ConfirmEmail), \"UIAccount\",\n                new { userId, code }, scheme, host, pathbase);\n        }\n\n        public static string ResetPasswordCallbackLink(this LinkGenerator urlHelper, string userId, string code, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIAccountController.SetPassword),\n                controller: \"UIAccount\",\n                values: new { userId, code },\n                scheme: scheme,\n                host: host,\n                pathBase: pathbase\n            );\n        }\n\n        public static string PaymentRequestLink(this LinkGenerator urlHelper, string paymentRequestId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIPaymentRequestController.ViewPaymentRequest),\n                controller: \"UIPaymentRequest\",\n                values: new { payReqId = paymentRequestId },\n                scheme, host, pathbase);\n        }\n\n        public static string AppLink(this LinkGenerator urlHelper, string appId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIAppsController.RedirectToApp),\n                controller: \"UIApps\",\n                values: new { appId },\n                scheme, host, pathbase);\n        }\n\n        public static string InvoiceLink(this LinkGenerator urlHelper, string invoiceId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIInvoiceController.Invoice),\n                controller: \"UIInvoice\",\n                values: new { invoiceId },\n                scheme, host, pathbase);\n        }\n\n        public static string CheckoutLink(this LinkGenerator urlHelper, string invoiceId, string scheme, HostString host, string pathbase)\n        {\n            return urlHelper.GetUriByAction(\n                action: nameof(UIInvoiceController.Checkout),\n                controller: \"UIInvoice\",\n                values: new { invoiceId },\n                scheme, host, pathbase);\n        }\n\n        public static string PayoutLink(this LinkGenerator urlHelper, string walletIdOrStoreId, string pullPaymentId, PayoutState payoutState, string scheme, HostString host, string pathbase)\n        {\n            WalletId.TryParse(walletIdOrStoreId, out var wallet);\n            return urlHelper.GetUriByAction(\n                action: nameof(UIStorePullPaymentsController.Payouts),\n                controller: \"UIStorePullPayments\",\n                values: new { storeId = wallet?.StoreId ?? walletIdOrStoreId, pullPaymentId, payoutState },\n                scheme, host, pathbase);\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Http;\nusing NBitcoin;\n\nnamespace BTCPayServer.Models.StoreViewModels\n{\n    public class RecoverySeedBackupViewModel\n    {\n        public string CryptoCode { get; set; }\n        public string Mnemonic { get; set; }\n        public string Passphrase { get; set; }\n        public string ReturnUrl { get; set; }\n        public bool IsStored { get; set; }\n        public bool RequireConfirm { get; set; } = true;\n\n        public string[] Words\n        {\n            get => Mnemonic?.Split((char[])null, System.StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();\n        }\n    }\n}\n", "@model BTCPayServer.Abstractions.Models.ConfirmModel\n@inject LinkGenerator linkGenerator\n@{\n\tstring actionUrl = null;\n\tif (Model.ActionName is not null)\n\t{\n\t\tvar controllerName = Model.ControllerName ?? ((Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor)this.Url.ActionContext.ActionDescriptor).ControllerName;\n\t\tactionUrl = linkGenerator.GetPathByAction(Model.ActionName, controllerName, pathBase: this.Context.Request.PathBase);\n\t}\n}\n<div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" id=\"ConfirmTitle\">@Model.Title</h4>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n                <vc:icon symbol=\"close\" />\n            </button>\n        </div>\n\n        <div class=\"modal-body\">\n            <div id=\"ConfirmDescription\">\n                @if (Model.DescriptionHtml)\n                {\n                    @Safe.Raw(Model.Description)\n                }\n                else\n                {\n                    @Model.Description\n                }\n            </div>\n        </div>\n\n        @if (!string.IsNullOrEmpty(Model.Action))\n        {\n            <form id=\"ConfirmForm\" method=\"post\" action=\"@Url.EnsureLocal(actionUrl)\" rel=\"noreferrer noopener\">\n                <div class=\"modal-body pt-0\" id=\"ConfirmText\" hidden>\n                    <label for=\"ConfirmInput\" class=\"form-label\">Confirm the action by typing <strong id=\"ConfirmInputText\"></strong>:</label>\n                    <input id=\"ConfirmInput\" class=\"form-control\"/>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary only-for-js\" data-bs-dismiss=\"modal\" id=\"ConfirmCancel\">Cancel</button>\n                    <button type=\"submit\" class=\"btn @Model.ButtonClass\" id=\"ConfirmContinue\">@Model.Action</button>\n                </div>\n            </form>\n        }\n    </div>\n</div>\n", "@model PostRedirectViewModel\n@{\n\tLayout = null;\n}\n\n<html lang=\"en\">\n<head>\n\t<partial name=\"LayoutHead\" />\n\t<title>Post Redirect</title>\n</head>\n<body>\n\t@if (Model.FormUrl is null)\n\t{\n\t\t<form method=\"post\" id=\"postform\" asp-action=\"@Model.AspAction\" asp-controller=\"@Model.AspController\" asp-all-route-data=\"Model.RouteParameters\">\n\t\t\t@Html.AntiForgeryToken()\n\t\t\t@foreach (var o in Model.FormParameters)\n\t\t\t{\n\t\t\t\tforeach (var v in o.Value)\n\t\t\t\t{\n\t\t\t\t\t<input type=\"hidden\" name=\"@o.Key\" value=\"@v\" />\n\t\t\t\t}\n\t\t\t}\n\t\t\t<noscript>\n\t\t\t\t<div class=\"modal-dialog modal-dialog-centered min-vh-100\">\n\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t<div class=\"modal-body text-center my-3\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis redirection page is supposed to be submitted automatically.\n\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\tSince you have not enabled JavaScript, please submit manually.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</noscript>\n\t\t</form>\n\t}\n\telse\n\t{\n\t\t<form method=\"post\" id=\"postform\" action=\"@Url.EnsureLocal(Model.FormUrl, this.Context.Request)\" rel=\"noreferrer noopener\">\n\t\t\t@Html.AntiForgeryToken()\n\t\t\t@foreach (var o in Model.FormParameters)\n\t\t\t{\n\t\t\t\tforeach (var v in o.Value)\n\t\t\t\t{\n\t\t\t\t\t<input type=\"hidden\" name=\"@o.Key\" value=\"@v\" />\n\t\t\t\t}\n\t\t\t}\n\t\t\t<noscript>\n\t\t\t\t<div class=\"modal-dialog modal-dialog-centered min-vh-100\">\n\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t<div class=\"modal-body text-center my-3\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis redirection page is supposed to be submitted automatically.\n\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\tSince you have not enabled JavaScript, please submit manually.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</noscript>\n\t\t</form>\n\t}\n\t<script type=\"text/javascript\">\n\t\tdocument.forms.item(0).submit();\n\t</script>\n\t<partial name=\"LayoutFoot\" />\n</body>\n</html>\n", "@model RecoverySeedBackupViewModel\n@{\n    Layout = \"_LayoutSimple\";\n    ViewData[\"Title\"] = \"Your recovery phrase\";\n}\n\n@section PageHeadContent {\n    <style>\n        @@media (min-width: 476px) { ol#RecoveryPhrase {max-height:16em;} }\n        @@media (min-width: 768px) { ol#RecoveryPhrase {max-height:12em;} }\n        @@media (min-width: 1200px) { ol#RecoveryPhrase {max-height:8em;} }\n        form#RecoveryConfirmation button { position: absolute; bottom:0; left:50%; width:200px; margin-left:-100px; }\n        form#RecoveryConfirmation button:not([disabled]) { display: none; }\n        form#RecoveryConfirmation input:checked ~ button[disabled] { display: none; }\n        form#RecoveryConfirmation input:checked + button:not([disabled]) { display: inline-block; }\n    </style>\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n}\n\n<div class=\"row justify-content-md-center\">\n    <div class=\"col-lg-10 text-center\">\n        <partial name=\"_StatusMessage\" />\n\n        <div class=\"d-flex flex-column align-items-center justify-content-center\">\n            <span class=\"fa fa-info-circle align-self-center p-3\" style=\"font-size:4em;\"></span>\n\n            <h1 class=\"text-center text-primary mb-5\">Secure your recovery&nbsp;phrase</h1>\n        </div>\n        <div class=\"lead text-center\">\n            <p>\n                <span class=\"d-sm-block\">The words below are called your recovery phrase.</span>\n                <span class=\"d-sm-block\"><strong>Write them down on a piece of paper in the exact order.</strong></span>\n            </p>\n        </div>\n        <ol id=\"RecoveryPhrase\" data-mnemonic=\"@Model.Mnemonic\" class=\"my-5 d-flex flex-column flex-wrap justify-content-center align-items-center text-start p-0\">\n            @foreach (var word in Model.Words)\n            {\n                <li class=\"ms-4 px-3 py-2 text-secondary\" style=\"flex: 0 1;min-width:10em;\">\n                    <span class=\"text-dark h5\">@word</span>\n                </li>\n            }\n        </ol>\n        <div class=\"lead text-center\" style=\"max-width:36em;margin-left:auto;margin-right:auto;\">\n            @if (Model.IsStored)\n            {\n                <p>\n                    The recovery phrase is a backup that allows you to restore your wallet in case of a server crash.\n                    If you lose it or write it down incorrectly, you may permanently lose access to your funds.\n                    Do not photograph it. Do not store it digitally.\n                </p>\n                <p>\n                    <strong>The recovery phrase will also be stored on the server as a hot wallet.</strong>\n                </p>\n            }\n            else\n            {\n                <p>\n                    The recovery phrase allows you to access and restore your wallet.\n                    If you lose it or write it down incorrectly, you will permanently lose access to your funds.\n                    Do not photograph the recovery phrase and do not store it digitally.\n                </p>\n                <p>\n                    <strong>The recovery phrase will permanently be erased from the server.</strong>\n                </p>\n            }\n            @if (!string.IsNullOrEmpty(Model.Passphrase))\n            {\n                <p class=\"mt-3 mb-0\">Please make sure to also write down your passphrase.</p>\n            }\n        </div>\n        @if (Model.RequireConfirm)\n        {\n            <form id=\"RecoveryConfirmation\" action=\"@Url.EnsureLocal(Model.ReturnUrl)\" class=\"position-relative d-flex align-items-start justify-content-center\" style=\"margin-top:4rem;padding-bottom: 80px\" rel=\"noreferrer noopener\">\n                <label class=\"form-check-label lead order-2\" for=\"confirm\">I have written down my recovery phrase and stored it in a secure location</label>\n                <input type=\"checkbox\" class=\"me-3 order-1 form-check-input\" id=\"confirm\" style=\"margin-top:.35rem;flex-shrink:0\">\n                <button type=\"submit\" class=\"btn btn-primary btn-lg px-5 order-3\" id=\"submit\">Done</button>\n                <button type=\"submit\" class=\"btn btn-primary btn-lg px-5 order-3\" disabled>Done</button>\n            </form>\n        }\n        else\n        {\n            <a href=\"@Url.EnsureLocal(Model.ReturnUrl)\" class=\"btn btn-primary btn-lg mt-3 px-5 order-3\" id=\"proceed\" rel=\"noreferrer noopener\">Done</a>\n        }\n    </div>\n</div>\n", "@using NBitcoin.DataEncoders\n@using Newtonsoft.Json\n@using System.Text\n@using BTCPayServer.Abstractions.Models\n@model WalletSettingsViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData[\"NavPartialName\"] = \"../UIWallets/_Nav\";\n    ViewData.SetActivePage(StoreNavPages.OnchainSettings, $\"{Model.CryptoCode} Wallet Settings\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"mb-5\">\n            <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n            <div class=\"mb-3 d-flex align-items-center\">\n                <span title=\"@Model.Source\" data-bs-toggle=\"tooltip\" class=\"me-3\">@(Model.IsHotWallet ? \"Hot wallet\" : \"Watch-only wallet\")</span>\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"ActionsDropdownToggle\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Actions\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"ActionsDropdownToggle\">\n                        <a class=\"dropdown-item\" asp-controller=\"UIWallets\" asp-action=\"WalletRescan\" asp-route-walletId=\"@Model.WalletId\" id=\"Rescan\">Rescan wallet for missing transactions</a>\n                        <form method=\"post\" asp-controller=\"UIWallets\" asp-action=\"WalletActions\" asp-route-walletId=\"@Model.WalletId\">\n                            <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"prune\">Prune old transactions from history</button>\n                            @if (User.IsInRole(Roles.ServerAdmin))\n                            {\n                                <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"clear\">Clear all transactions from history</button>\n                            }\n                        </form>\n                        @if (Model.UriScheme == \"bitcoin\")\n                        {\n                            <button type=\"button\" class=\"dropdown-item\" id=\"RegisterWallet\" data-store=\"@Model.StoreName\" data-scheme=\"@Model.UriScheme\" data-url=\"@Url.Action(\"WalletSend\", \"UIWallets\", new {walletId = Model.WalletId, bip21 = \"%s\"})\" hidden>Register wallet for payment links</button>\n                        }\n                        <div class=\"dropdown-divider\"></div>\n                        @if (Model.NBXSeedAvailable)\n                        {\n                            <a asp-action=\"WalletSeed\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"dropdown-item\" id=\"ViewSeed\">View seed</a>\n                        }\n                        <a asp-controller=\"UIStores\" asp-action=\"ReplaceWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\"\n                           id=\"ChangeWalletLink\"\n                           class=\"dropdown-item\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-title=\"Replace @Model.CryptoCode wallet\"\n                           data-description=\"@ViewData[\"ReplaceDescription\"]\"\n                           data-confirm=\"Setup new wallet\"\n                           data-confirm-input=\"REPLACE\">\n                            Replace wallet\n                        </a>\n                        <form method=\"get\" asp-action=\"DeleteWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"d-inline\">\n                            <button type=\"submit\"\n                                    id=\"Delete\"\n                                    class=\"dropdown-item\"\n                                    data-bs-toggle=\"modal\"\n                                    data-bs-target=\"#ConfirmModal\"\n                                    data-title=\"Remove @Model.CryptoCode wallet\"\n                                    data-description=\"@ViewData[\"RemoveDescription\"]\"\n                                    data-confirm=\"Remove\"\n                                    data-confirm-input=\"REMOVE\">Remove wallet</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            \n            <form method=\"post\" asp-action=\"UpdateWalletSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                <div class=\"form-group my-4\">\n                    <div class=\"d-flex align-items-center\">\n                        <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0 me-1\"></label>\n                    </div>\n                    <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"Label\" class=\"form-label\"></label>\n                    <input asp-for=\"Label\" class=\"form-control\" style=\"max-width:24em;\" />\n                    <span asp-validation-for=\"Label\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"DerivationScheme\" class=\"form-label\"></label>\n                    <div class=\"input-group\" data-clipboard=\"@Model.DerivationScheme\">\n                        <input asp-for=\"DerivationScheme\" class=\"form-control\" style=\"cursor:copy\" readonly />\n                        <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                    </div>\n                </div>\n                @if (!string.IsNullOrEmpty(Model.DerivationSchemeInput) && Model.DerivationSchemeInput != Model.DerivationScheme)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"DerivationSchemeInput\" class=\"form-label\"></label>\n                        <div class=\"input-group\" data-clipboard=\"@Model.DerivationSchemeInput\">\n                            <input asp-for=\"DerivationSchemeInput\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                }\n                @for (var i = 0; i < Model.AccountKeys.Count; i++)\n                {\n                    <h4 class=\"mt-5 mb-3\">Account Key @i</h4>\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-label\"></label>\n                            <button type=\"button\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" data-account-key=\"@i\" title=\"\">\n                                <span class=\"fa fa-qrcode\"></span> Show export QR\n                            </button>\n                        </div>\n                        <div class=\"input-group\" data-clipboard=\"@Model.AccountKeys[i].AccountKey\">\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                    </div>\n                    @if (Model.IsMultiSig)\n                    {\n                        <div class=\"form-check\">\n                            <input asp-for=\"SelectedSigningKey\" class=\"form-check-input\" type=\"radio\" value=\"@Model.AccountKeys[i].AccountKey\"/>\n                            <label asp-for=\"SelectedSigningKey\" class=\"form-check-label\"></label>\n                        </div>\n                    }\n                }\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SaveWalletSettings\">Save Wallet Settings</button>\n            </form>\n            \n            <h3 class=\"mt-5 mb-4\">Payment</h3>\n            <form method=\"post\" asp-action=\"UpdatePaymentSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                @if (Model.CanUsePayJoin)\n                {\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center\">\n                            <input asp-for=\"PayJoinEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                            <label asp-for=\"PayJoinEnabled\" class=\"form-label mb-0 me-1\"></label>\n                            <a href=\"https://docs.btcpayserver.org/Payjoin/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                            </a>\n                        </div>\n                        <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                    </div>\n                }\n                <div class=\"form-group\">\n                    <label asp-for=\"MonitoringExpiration\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#payment-invalid-if-transactions-fails-to-confirm-minutes-after-invoice-expiration\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <div class=\"input-group\">\n                        <input inputmode=\"numeric\" asp-for=\"MonitoringExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                        <span class=\"input-group-text\">minutes</span>\n                    </div>\n                    <span asp-validation-for=\"MonitoringExpiration\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"SpeedPolicy\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-confirmed-when-the-payment-transaction\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <select asp-for=\"SpeedPolicy\" class=\"form-select w-auto\" onchange=\"document.getElementById('unconfirmed-warning').hidden = this.value !== '0';\">\n                        <option value=\"0\">Is unconfirmed</option>\n                        <option value=\"1\">Has at least 1 confirmation</option>\n                        <option value=\"3\">Has at least 2 confirmations</option>\n                        <option value=\"2\">Has at least 6 confirmations</option>\n                    </select>\n                    <div class=\"alert alert-warning my-2\" hidden=\"@(Model.SpeedPolicy != 0)\" id=\"unconfirmed-warning\" role=\"alert\">\n                        Choosing to accept an unconfirmed invoice can lead to double-spending and is strongly discouraged.\n                    </div>\n                    <span asp-validation-for=\"SpeedPolicy\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-check my-1\">\n                    <input asp-for=\"ShowRecommendedFee\" type=\"checkbox\" class=\"form-check-input\"/>\n                    <label asp-for=\"ShowRecommendedFee\" class=\"form-check-label\"></label>\n                    <div class=\"form-text\">Fee will be shown for BTC and LTC onchain payments only.</div>\n                </div>\n                <div class=\"form-group mt-2\">\n                    <label asp-for=\"RecommendedFeeBlockTarget\" class=\"form-label\"></label>\n                    <input inputmode=\"numeric\" asp-for=\"RecommendedFeeBlockTarget\" class=\"form-control\" min=\"1\" style=\"width:8ch\" />\n                    <span asp-validation-for=\"RecommendedFeeBlockTarget\" class=\"text-danger\"></span>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SavePaymentSettings\">Save Payment Settings</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel($\"{Model.CryptoCode} wallet\", \"Change\", \"Update\"))\" />\n<partial name=\"ShowQR\"/>\n\n@section PageFootContent {\n    <script>\n        const wallets = @Safe.Json(Model.AccountKeys.Select(model => Encoders.Hex.EncodeData(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(model, Formatting.None)))))\n        const qrApp = initQRShow({ title: \"Wallet QR\" })\n        \n        delegate('click', '#Delete', event => { event.preventDefault() })\n        \n        delegate('click', 'button[data-account-key]', event => {\n            const { accountKey } = event.target.dataset;\n            qrApp.showData(wallets[parseInt(accountKey)]);\n        })\n        \n        if (navigator.registerProtocolHandler) {\n            document.getElementById('RegisterWallet').removeAttribute('hidden');\n            delegate('click', '#RegisterWallet', event => {\n               const { store, scheme, url } = event.target.dataset\n               const uri = decodeURIComponent(url)\n               navigator.registerProtocolHandler(scheme, uri, `BTCPay Wallet: ${store}`)\n            })\n        } \n    </script>\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n", "@using BTCPayServer.Controllers\n@model SignWithSeedViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3\">Using an HD private key or mnemonic seed</p>\n</header>\n\n<div class=\"alert alert-warning alert-dismissible my-4\" role=\"alert\">\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n        <vc:icon symbol=\"close\" />\n    </button>\n    <p>Before you proceed, please understand the following:</p>\n    <ol>\n        <li>Make sure this BTCPay Server instance <b>belongs to you</b>.</li>\n        <li>Use <b>Incognito mode or the Tor Browser</b> to ensure no malicious browser plugins are running that could steal your key.</li>\n    </ol>\n    <p class=\"mb-0\">Otherwise you are exposing yourself to malicious site owners, or to malicious plugins installed in your browser.</p>\n</div>\n\n<div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n\n<form method=\"post\" asp-action=\"SignWithSeed\" asp-route-walletId=\"@walletId\">\n    <partial name=\"SigningContext\" for=\"SigningContext\"/>\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <div class=\"form-group\">\n        <label asp-for=\"SeedOrKey\" class=\"form-label\"></label>\n        <input asp-for=\"SeedOrKey\" class=\"form-control\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\"/>\n    </div>\n    <div class=\"form-group\">\n        <label asp-for=\"Passphrase\" class=\"form-label\"></label>\n        <input asp-for=\"Passphrase\" class=\"form-control\"/>\n    </div>\n    <button id=\"Submit\" type=\"submit\" class=\"btn btn-primary\">Sign</button>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.PSBT, \"Decode PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n@section PageHeadContent {\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n@section PageFootContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            const psbtHex = @Json.Serialize(Model.PSBTHex);\n            if (psbtHex) {\n                const buffer = new window.URlib.Buffer.from(psbtHex, \"hex\");\n                const cryptoPSBT = new window.URlib.CryptoPSBT(buffer);\n                const encoder = cryptoPSBT.toUREncoder();\n                const modes = {\n                    ur: { title: \"UR\", fragments: encoder.encodeWhole() },\n                    static: { title: \"Static\", fragments: [psbtHex] }\n                };\n                initQRShow({ title: \"Scan the PSBT\", modes });\n            }\n            initCameraScanningApp(\"Scan PSBT\", data => {\n                let hex = data;\n                if (typeof(data) === \"object\") {\n                    if (data.type === \"crypto-psbt\") {\n                        const psbt = window.URlib.CryptoPSBT.fromCBOR(data.cbor);\n                        hex = psbt.getPSBT().toString('hex');\n                    } else {\n                        console.error('Unexpected UR type', data.type)\n                    }\n                } else if (typeof(data) === 'string') {\n                    hex = data;\n                }\n                document.getElementById(\"PSBT\").value = hex;\n                document.getElementById(\"Decode\").click();\n            }, \"scanModal\");\n        });\n    </script>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3 mx-md-5\">You can decode a PSBT by either pasting its content, uploading the file or scanning the wallet QR code.</p>\n</header>\n\n<div class=\"my-5\">\n    @if (Model.Errors != null && Model.Errors.Count != 0)\n    {\n        <div class=\"alert alert-danger alert-dismissible\" role=\"alert\">\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n                <vc:icon symbol=\"close\" />\n            </button>\n            @foreach (var error in Model.Errors)\n            {\n                <span>@error</span>\n                <br/>\n            }\n        </div>\n    }\n\n    <form class=\"form-group\" method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" enctype=\"multipart/form-data\">\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"form-group\">\n            <label asp-for=\"PSBT\" class=\"form-label\"></label>\n            <textarea class=\"form-control\" rows=\"5\" asp-for=\"PSBT\"></textarea>\n            <span asp-validation-for=\"PSBT\" class=\"text-danger\"></span>\n        </div>\n        <div class=\"form-group\">\n            <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n            <input asp-for=\"UploadedPSBTFile\" type=\"file\" class=\"form-control\">\n        </div>\n        <div class=\"d-flex\">\n            <button type=\"submit\" name=\"command\" value=\"decode\" class=\"btn btn-primary mt-2\" id=\"Decode\">Decode PSBT</button>\n            <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-secondary only-for-js ms-3 mt-2\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\">Scan wallet QR with camera</button>\n        </div>\n    </form>\n</div>\n<partial name=\"ShowQR\"/>\n<partial name=\"CameraScanner\"/>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTCombineViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.PSBT, \"Combine PSBT\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form class=\"form-group\" method=\"post\" asp-action=\"WalletPSBTCombine\" asp-route-walletId=\"@Context.GetRouteValue(\"walletId\")\" enctype=\"multipart/form-data\">\n    <input type=\"hidden\" asp-for=\"OtherPSBT\"/>\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <div class=\"form-group\">\n        <label asp-for=\"PSBT\" class=\"form-label\"></label>\n        <textarea class=\"form-control\" rows=\"5\" asp-for=\"PSBT\"></textarea>\n        <span asp-validation-for=\"PSBT\" class=\"text-danger\"></span>\n    </div>\n    <div class=\"form-group\">\n        <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n        <input type=\"file\" class=\"form-control\" asp-for=\"UploadedPSBTFile\">\n    </div>\n    <button id=\"Submit\" type=\"submit\" class=\"btn btn-primary\">Combine</button>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletPSBTViewModel\n@{\n\tvar walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n\tvar isReady = !Model.HasErrors;\n\tvar isSignable = !isReady;\n\tvar needsExport = !isSignable && !isReady;\n\tLayout = \"_LayoutWizard\";\n\tViewData.SetActivePage(WalletsNavPages.PSBT, isReady ? \"Confirm broadcasting this transaction\" : \"Transaction Details\", walletId);\n}\n\n@section PageHeadContent {\n    <link rel=\"stylesheet\" href=\"~/vendor/highlightjs/default.min.css\" asp-append-version=\"true\">\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n    <style>\n        .nav-pills .nav-link.active {\n            color: var(--btcpay-secondary-text-active);\n            background-color: var(--btcpay-secondary-bg-active);\n        }\n    </style>\n}\n\n@section PageFootContent {\n    <script src=\"~/vendor/highlightjs/highlight.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        hljs.initHighlightingOnLoad();\n        \n        document.addEventListener(\"DOMContentLoaded\", () => {\n            const psbtHex = @Json.Serialize(Model.PSBTHex);\n            const buffer = new window.URlib.Buffer.from(psbtHex, \"hex\");\n            const cryptoPSBT = new window.URlib.CryptoPSBT(buffer);\n            const encoder = cryptoPSBT.toUREncoder();\n            const modes = {\n                ur: { title: \"UR\", fragments: encoder.encodeWhole() },\n                static: { title: \"Static\", fragments: [psbtHex] }\n            };\n            const continueCallback = () => {\n                document.querySelector(\"#PSBTOptionsImportHeader button\").click()\n                document.getElementById(\"scanqrcode\").click()\n            };\n            \n            initQRShow({\n                title: \"Scan the PSBT with your wallet\",\n                modes,\n                continueTitle: \"Continue with signed PSBT\",\n                continueCallback\n            });\n            \n            initCameraScanningApp(\"Scan the PSBT from your wallet\", data => {\n                let hex = data;\n                if (typeof(data) === \"object\") {\n                    if (data.type === \"crypto-psbt\") {\n                        const psbt = window.URlib.CryptoPSBT.fromCBOR(data.cbor);\n                        hex = psbt.getPSBT().toString('hex');\n                    } else {\n                        console.error('Unexpected UR type', data.type)\n                    }\n                } else if (typeof(data) === 'string') {\n                    hex = data;\n                }\n                document.getElementById(\"ImportedPSBT\").value = hex;\n                document.getElementById(\"Decode\").click();\n            }, \"scanModal\");\n        });\n    </script>\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center mb-3\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<partial name=\"_PSBTInfo\" model=\"Model\" />\n\n@if (isSignable)\n{\n    <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n        <input type=\"hidden\" asp-for=\"CryptoCode\"/>\n        <input type=\"hidden\" asp-for=\"NBXSeedAvailable\"/>\n        <input type=\"hidden\" asp-for=\"PSBT\"/>\n        <input type=\"hidden\" asp-for=\"FileName\"/>\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"d-flex flex-column flex-sm-row flex-wrap justify-content-center align-items-sm-center\">\n            <button type=\"submit\" id=\"SignTransaction\" name=\"command\" value=\"sign\" class=\"btn btn-primary\">Sign transaction</button>\n        </div>\n    </form>\n} \nelse if (isReady)\n{\n    <form method=\"post\" asp-action=\"WalletPSBTReady\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n        <input type=\"hidden\" asp-for=\"SigningKey\" />\n        <input type=\"hidden\" asp-for=\"SigningKeyPath\" />\n        <partial name=\"SigningContext\" for=\"SigningContext\" />\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <div class=\"d-flex flex-column flex-sm-row flex-wrap justify-content-center align-items-sm-center\">\n            @if (!string.IsNullOrEmpty(Model.SigningContext?.PayJoinBIP21))\n            {\n                <button type=\"submit\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" name=\"command\" value=\"payjoin\">Broadcast (Payjoin)</button>\n                <span class=\"mx-2\">or</span>\n                <button type=\"submit\" class=\"btn btn-secondary\" name=\"command\" value=\"broadcast\">Broadcast (Simple)</button>\n            }\n            else\n            {\n                <button id=\"BroadcastTransaction\" type=\"submit\" class=\"btn btn-primary\" name=\"command\" value=\"broadcast\">Broadcast transaction</button>\n            }\n        </div>\n    </form>\n}\nelse\n{\n    <p class=\"lead text-secondary mt-5\">\n        Export the PSBT for your wallet. Sign it with your wallet and \n        import the signed PSBT version here for finalization and broadcasting.\n    </p>\n}\n\n<div class=\"accordion\" id=\"PSBTOptions\">\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\" id=\"PSBTOptionsExportHeader\">\n            <button type=\"button\" class=\"accordion-button @(needsExport ? \"\" : \"collapsed\")\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsExportContent\" aria-controls=\"PSBTOptionsExportContent\" aria-expanded=\"@(needsExport ? \"true\" : \"false\")\">\n                <span class=\"h5\">Export PSBT @(isReady ? \"\" : \"for signing\")</span>\n                <vc:icon symbol=\"caret-down\"/>\n            </button>\n        </h2>\n        <div id=\"PSBTOptionsExportContent\" class=\"accordion-collapse collapse @(needsExport ? \"show\" : \"\")\" aria-labelledby=\"PSBTOptionsExportHeader\" data-bs-parent=\"#PSBTOptions\">\n            <div class=\"accordion-body\">\n                <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"mb-2\">\n                    <input type=\"hidden\" asp-for=\"CryptoCode\"/>\n                    <input type=\"hidden\" asp-for=\"PSBT\"/>\n                    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                    <input type=\"hidden\" asp-for=\"BackUrl\" />\n                    <div class=\"d-flex flex-column flex-sm-row flex-wrap align-items-sm-center\">\n                        <button name=\"command\" type=\"submit\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" value=\"save-psbt\">Download PSBT file</button>\n                        <button name=\"command\" type=\"button\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2 only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scan-qr-modal\">Show QR for wallet camera</button>\n                        <a id=\"ShowRawVersion\" href=\"#ExportOptions\" data-bs-toggle=\"collapse\" class=\"btn btn-link text-secondary\">Show raw versions</a>\n                    </div>\n                </form>\n                <div id=\"ExportOptions\" class=\"collapse\">\n                    <div class=\"pt-4\">\n                        <ul class=\"nav mb-3\" id=\"export-tab\" role=\"tablist\">\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill active\" id=\"export-base64-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-base64\" type=\"button\" role=\"tab\" aria-controls=\"export-base64\" aria-selected=\"true\">Base64</button>\n                            </li>\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill\" id=\"export-hex-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-hex\" type=\"button\" role=\"tab\" aria-controls=\"export-hex\" aria-selected=\"false\">HEX</button>\n                            </li>\n                            <li class=\"nav-item\" role=\"presentation\">\n                                <button class=\"btcpay-pill\" id=\"export-json-tab\" data-bs-toggle=\"pill\" data-bs-target=\"#export-json\" type=\"button\" role=\"tab\" aria-controls=\"export-json\" aria-selected=\"false\">JSON</button>\n                            </li>\n                        </ul>\n                        <div class=\"tab-content\" id=\"export-tabContent\">\n                            <div class=\"tab-pane fade show active\" id=\"export-base64\" role=\"tabpanel\" aria-labelledby=\"export-base64-tab\">\n                                <pre class=\"mb-4 text-wrap\"><code class=\"text\" id=\"psbt-base64\">@Model.PSBT</code></pre>\n                            </div>\n                            <div class=\"tab-pane fade\" id=\"export-hex\" role=\"tabpanel\" aria-labelledby=\"export-hex-tab\">\n                                <pre class=\"mb-4 text-wrap\"><code class=\"text\">@Model.PSBTHex</code></pre>\n                            </div>\n                            <div class=\"tab-pane fade\" id=\"export-json\" role=\"tabpanel\" aria-labelledby=\"export-json-tab\">\n                                <pre class=\"mb-0\"><code class=\"json\">@Model.Decoded</code></pre>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    @if (!isReady)\n    {\n        <div class=\"accordion-item\">\n            <h2 class=\"accordion-header\" id=\"PSBTOptionsImportHeader\">\n                <button type=\"button\" class=\"accordion-button collapsed\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsImportContent\" aria-controls=\"PSBTOptionsImportContent\" aria-expanded=\"false\">\n                    <span class=\"h5\">Provide updated PSBT</span>\n                    <vc:icon symbol=\"caret-down\"/>\n                </button>\n            </h2>\n            <div id=\"PSBTOptionsImportContent\" class=\"accordion-collapse collapse\" aria-labelledby=\"PSBTOptionsImportHeader\" data-bs-parent=\"#PSBTOptions\">\n                <div class=\"accordion-body\">\n                    <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" enctype=\"multipart/form-data\" class=\"mb-2\">\n                        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                        <input type=\"hidden\" asp-for=\"BackUrl\" />\n                        <div class=\"form-group\">\n                            <label for=\"ImportedPSBT\" class=\"form-label\">PSBT content</label>\n                            <textarea id=\"ImportedPSBT\" name=\"PSBT\" class=\"form-control\" rows=\"5\"></textarea>\n                        </div>\n                        <div class=\"form-group\">\n                            <label asp-for=\"UploadedPSBTFile\" class=\"form-label\"></label>\n                            <input asp-for=\"UploadedPSBTFile\" type=\"file\" class=\"form-control\">\n                        </div>\n                        <div class=\"d-flex flex-column flex-sm-row flex-wrap align-items-sm-center\">\n                            <button type=\"submit\" name=\"command\" value=\"decode\" class=\"btn btn-primary mb-3 mb-sm-0 me-sm-2\" id=\"Decode\">Decode PSBT</button>\n                            <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-primary only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\">Scan wallet QR with camera</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    }\n    <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\" id=\"PSBTOptionsAdvancedHeader\">\n            <button type=\"button\" class=\"accordion-button collapsed\" data-bs-toggle=\"collapse\" data-bs-target=\"#PSBTOptionsAdvancedContent\" aria-controls=\"PSBTOptionsAdvancedContent\" aria-expanded=\"false\">\n                <span class=\"h5\">Add metadata to PSBT (advanced)</span>\n                <vc:icon symbol=\"caret-down\"/>\n            </button>\n        </h2>\n        <div id=\"PSBTOptionsAdvancedContent\" class=\"accordion-collapse collapse\" aria-labelledby=\"PSBTOptionsAdvancedHeader\" data-bs-parent=\"#PSBTOptions\">\n            <div class=\"accordion-body\">\n                <form method=\"post\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" class=\"mb-2\">\n                    <input type=\"hidden\" asp-for=\"PSBT\"/>\n                    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n                    <input type=\"hidden\" asp-for=\"BackUrl\" />\n                    <p class=\"mb-2\">For exporting the signed PSBT and transaction information to a wallet, update the PSBT.</p>\n                    <button id=\"update-psbt\" type=\"submit\" name=\"command\" value=\"update\" class=\"btn btn-secondary\">Update PSBT</button>\n                    <p class=\"mt-4 mb-2\">For batching transactions, you can combine this PSBT with another one.</p>\n                    <button id=\"combine-psbt\" type=\"submit\" name=\"command\" value=\"combine\" class=\"btn btn-secondary\">Combine PSBT</button>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n\n<partial name=\"ShowQR\"/>\n<partial name=\"CameraScanner\"/>\n", "@inject BTCPayServer.Services.BTCPayServerEnvironment env\n@using BTCPayServer.Controllers\n@using BTCPayServer.Components.QRCode\n@model BTCPayServer.Controllers.WalletReceiveViewModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var returnUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Receive, $\"Receive {Model.CryptoCode}\", walletId);\n}\n\n@section PageHeadContent\n{\n    <link href=\"~/main/qrcode.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n@section Navbar {\n    <a href=\"@Url.EnsureLocal(returnUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form method=\"post\" asp-action=\"WalletReceive\" class=\"my-5\">\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    @if (string.IsNullOrEmpty(Model.Address))\n    {\n        <div class=\"d-grid gap-3 col-sm-10 col-md-8 col-lg-7 col-xxl-6 mx-auto\">\n            <button id=\"generateButton\" class=\"btn btn-primary\" type=\"submit\" name=\"command\" value=\"generate-new-address\">Generate next available @Model.CryptoCode address</button>\n            @if (env.CheatMode)\n            {\n                <button type=\"submit\" name=\"command\" value=\"fill-wallet\" class=\"btn btn-info\">Cheat Mode: Send transactions to this wallet</button>\n            }\n        </div>\n    }\n    else\n    {\n        <noscript>\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control \" readonly=\"readonly\" asp-for=\"Address\" id=\"address\"/>\n            </div>\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" readonly=\"readonly\" asp-for=\"PaymentLink\" id=\"payment-link\"/>\n            </div>\n            <div class=\"row mt-4\">\n                <div class=\"col-12 col-sm-6\">\n                    <button type=\"submit\" name=\"command\" value=\"generate-new-address\" class=\"btn btn-primary w-100\">Generate another address</button>\n                </div>\n                <div class=\"col-12 col-sm-6 mt-4 mt-sm-0\">\n                    <button type=\"submit\" name=\"command\" value=\"unreserve-current-address\" class=\"btn btn-secondary w-100\">Unreserve this address</button>\n                </div>\n            </div>\n        </noscript>\n        <div class=\"only-for-js col-sm-10 col-xxl-8 mx-auto\" id=\"app\">\n            <div class=\"tab-content text-center\">\n                <div class=\"tab-pane\" id=\"link-tab\" role=\"tabpanel\">\n                    <div class=\"qr-container mb-3\">\n                        <img src=\"@Model.CryptoImage\" class=\"qr-icon\" alt=\"@Model.CryptoCode\"/>\n                        <vc:qr-code data=\"@Model.PaymentLink\"/>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group\" data-clipboard=\"@Model.PaymentLink\">\n                            <input type=\"text\" class=\"form-control\" style=\"cursor:copy\" readonly=\"readonly\" value=\"@Model.PaymentLink\" id=\"payment-link\"/>\n                            <button type=\"button\" class=\"btn btn-outline-secondary p-2\" style=\"width:7em;\" data-clipboard-confirm>\n                                <vc:icon symbol=\"copy\"/>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"tab-pane show active\" id=\"address-tab\" role=\"tabpanel\">\n                    <div class=\"qr-container mb-3\">\n                        <img src=\"@Model.CryptoImage\" class=\"qr-icon\" alt=\"@Model.CryptoCode\"/>\n                        <vc:qr-code data=\"@Model.Address\"/>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group\" data-clipboard=\"@Model.Address\">\n                            <input type=\"text\" class=\"form-control\" style=\"cursor:copy\" readonly=\"readonly\" value=\"@Model.Address\" id=\"address\"/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary p-2\" style=\"width:7em;\" data-clipboard-confirm>\n                                <vc:icon symbol=\"copy\"/>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"nav justify-content-center\">\n                <a class=\"btcpay-pill active\" data-bs-toggle=\"tab\" href=\"#address-tab\">Address</a>\n                <a class=\"btcpay-pill \" data-bs-toggle=\"tab\" href=\"#link-tab\">Link</a>\n            </div>\n        </div>\n\n        <div class=\"d-grid gap-3 col-sm-8 col-sm-6 col-lg-5 mx-auto mt-5\">\n            <button type=\"submit\" name=\"command\" value=\"generate-new-address\" class=\"btn btn-primary w-100\">Generate another address</button>\n            <button type=\"submit\" name=\"command\" value=\"unreserve-current-address\" class=\"btn btn-secondary w-100\">Unreserve this address</button>\n        </div>\n    }\n</form>\n", "@inject BTCPayServer.Security.ContentSecurityPolicies csp\n@using Microsoft.AspNetCore.Mvc.ModelBinding\n@using BTCPayServer.Controllers\n@model WalletSendModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, $\"Send {Model.CryptoCode}\", walletId);\n    csp.Add(\"worker-src\", \"blob:\");\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n@section PageHeadContent\n{\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n    <style>\n        .crypto-fee-link { padding-left: 1rem; padding-right: 1rem; }\n        .btn-group > .crypto-fee-link:last-of-type {\n            border-top-right-radius: .2rem  !important;\n            border-bottom-right-radius: .2rem !important;\n        }\n    </style>\n}\n\n@section PageFootContent\n{\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/wallet/wallet-camera-scanner.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/wallet/WalletSend.js\" asp-append-version=\"true\"></script>\n\n}\n\n<partial name=\"CameraScanner\"/>\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n</header>\n\n<form method=\"post\" asp-action=\"WalletSend\" asp-route-walletId=\"@walletId\" class=\"my-5\">\n    <input type=\"hidden\" asp-for=\"InputSelection\" />\n    <input type=\"hidden\" asp-for=\"FiatDivisibility\" />\n    <input type=\"hidden\" asp-for=\"CryptoDivisibility\" />\n    <input type=\"hidden\" asp-for=\"NBXSeedAvailable\" />\n    <input type=\"hidden\" asp-for=\"Fiat\" />\n    <input type=\"hidden\" asp-for=\"Rate\" />\n    <input type=\"hidden\" asp-for=\"CurrentBalance\" />\n    <input type=\"hidden\" asp-for=\"ImmatureBalance\" />\n    <input type=\"hidden\" asp-for=\"CryptoCode\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" name=\"BIP21\" id=\"BIP21\" />\n\n    @if (!ViewContext.ModelState.IsValid)\n    {\n        <ul class=\"text-danger\">\n            @foreach (var errors in ViewData.ModelState.Where(pair => pair.Key == string.Empty && pair.Value.ValidationState == ModelValidationState.Invalid))\n            {\n                foreach (var error in errors.Value.Errors)\n                {\n                    <li>@error.ErrorMessage</li>\n                }\n            }\n        </ul>\n    }\n\n    @if (Model.Outputs.Count == 1)\n    {\n        <div class=\"form-group\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <label asp-for=\"Outputs[0].DestinationAddress\" class=\"form-label\"></label>\n                <button type=\"submit\" name=\"command\" value=\"add-output\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\">\n                    <span class=\"fa fa-plus\"></span> Add another destination\n                </button>\n            </div>\n            <input asp-for=\"Outputs[0].DestinationAddress\" class=\"form-control font-monospace\" autofocus autocomplete=\"off\" />\n            <span asp-validation-for=\"Outputs[0].DestinationAddress\" class=\"text-danger\"></span>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <label asp-for=\"Outputs[0].Amount\" class=\"form-label\"></label>\n                <button type=\"submit\" name=\"command\" value=\"toggle-input-selection\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" id=\"toggleInputSelection\"><span class=\"fa fa-@(Model.InputSelection ? \"eye-slash\" : \"eye\") \"></span> @(Model.InputSelection ? \"Hide\" : \"Show\") coin selection</button>\n            </div>\n            <div class=\"input-group\">\n                <input asp-for=\"Outputs[0].Amount\" type=\"number\" inputmode=\"decimal\" step=\"any\" min=\"0\" asp-format=\"{0}\" class=\"form-control output-amount hide-number-spin\" />\n                <div class=\"input-group-text fiat-value\" style=\"display:none;\">\n                    <span class=\"input-group-text p-0 border-0\">=</span>\n                    <input type=\"number\" inputmode=\"decimal\" class=\"input-group-text fiat-value-edit-input py-0 border-0 hide-number-spin\" min=\"0\" step=\"any\" style=\"max-width:100px\" />\n                    <span class=\"input-group-text p-0 border-0\">@Model.Fiat</span>\n                </div>\n            </div>\n            <span asp-validation-for=\"Outputs[0].Amount\" class=\"text-danger\"></span>\n            <div class=\"form-text crypto-info\">\n                Your available balance is\n                <button type=\"button\" class=\"crypto-balance-link btn btn-link p-0 align-baseline\">@Model.CurrentBalance</button> <span>@Model.CryptoCode</span>.\n                @if (Model.ImmatureBalance > 0)\n                {\n                    <span><br><span class=\"text-warning\">\u26a0</span> @Model.ImmatureBalance @Model.CryptoCode are still immature and require additional confirmations.</span>\n                }\n            </div>\n        </div>\n    }\n    else\n    {\n        <div class=\"list-group list-group-flush\">\n            @for (var index = 0; index < Model.Outputs.Count; index++)\n            {\n                <input type=\"hidden\" asp-for=\"Outputs[index].PayoutId\" />\n                <div class=\"list-group-item d-block px-0 pt-0 pb-3 mb-3\">\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"Outputs[index].DestinationAddress\" class=\"form-label\"></label>\n                            <button type=\"submit\" name=\"command\" value=\"@($\"remove-output:{index}\")\" class=\"d-inline-block ms-2 btn text-danger btn-link p-0 mb-2\">\n                                <span class=\"fa fa-times\"></span> Remove Destination\n                            </button>\n                        </div>\n                        <input asp-for=\"Outputs[index].DestinationAddress\" class=\"form-control\" autocomplete=\"off\"/>\n                        <span asp-validation-for=\"Outputs[index].DestinationAddress\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-group\">\n                        <label asp-for=\"Outputs[index].Amount\" class=\"form-label\"></label>\n                        <div class=\"input-group\">\n                            <input asp-for=\"Outputs[index].Amount\" type=\"number\" min=\"0\" step=\"any\" asp-format=\"{0}\" class=\"form-control output-amount hide-number-spin\" />\n                            <div class=\"input-group-text fiat-value\" style=\"display:none;\">\n                                <span class=\"input-group-text p-0 border-0\">=</span>\n                                <input type=\"number\" inputmode=\"decimal\" class=\"input-group-text fiat-value-edit-input py-0 border-0 hide-number-spin\" min=\"0\" step=\"any\" style=\"max-width:100px\" />\n                                <span class=\"input-group-text p-0 border-0\">@Model.Fiat</span>\n                            </div>\n                        </div>\n                        <div class=\"form-text crypto-info\">\n                            Your available balance is\n                            <button type=\"button\" class=\"crypto-balance-link btn btn-link p-0 align-baseline\">@Model.CurrentBalance</button> <span>@Model.CryptoCode</span>.\n                            @if (Model.ImmatureBalance > 0)\n                            {\n                                <span><br>Note: @Model.ImmatureBalance @Model.CryptoCode are still immature and require additional confirmations.</span>\n                            }\n                        </div>\n                        <span asp-validation-for=\"Outputs[index].Amount\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-check\">\n                        <input type=\"checkbox\" asp-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"form-check-input subtract-fees\" />\n                        <label asp-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"form-check-label\"></label>\n                        <span asp-validation-for=\"Outputs[index].SubtractFeesFromOutput\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            }\n        </div>\n        <div class=\"d-grid gap-3 d-md-block mt-n2\">\n            <button type=\"submit\" name=\"command\" value=\"add-output\" class=\"btn btn-secondary me-md-1\"><span class=\"fa fa-plus\"></span> Add another destination</button>\n            <button type=\"submit\" name=\"command\" value=\"toggle-input-selection\" class=\"btn btn-secondary\" id=\"toggleInputSelection\"><span class=\"fa fa-@(Model.InputSelection ? \"eye-slash\" : \"eye\") \"></span> @(Model.InputSelection ? \"Hide\" : \"Show\") coin selection</button>\n        </div>\n    }\n\n    @if (Model.InputSelection)\n    {\n        <partial name=\"CoinSelection\" />\n    }\n\n    <div class=\"form-group my-4\">\n        <label asp-for=\"FeeSatoshiPerByte\" class=\"form-label\"></label>\n        <input asp-for=\"FeeSatoshiPerByte\" type=\"number\" inputmode=\"numeric\" min=\"0\" step=\"any\" class=\"form-control\" style=\"max-width:14ch;\" />\n        <span asp-validation-for=\"FeeSatoshiPerByte\" class=\"text-danger\"></span>\n        <span id=\"FeeRate-Error\" class=\"text-danger\"></span>\n        @if (Model.RecommendedSatoshiPerByte.Any())\n        {\n            <div class=\"text-start mt-4 d-flex align-items-sm-center flex-column flex-sm-row\">\n                <span class=\"text-secondary me-3\">\n                    Confirm in the next\n                </span>\n                <div class=\"btn-group btn-group-toggle feerate-options mt-2 mt-sm-0\" role=\"group\" data-bs-toggle=\"buttons\">\n                    @for (var index = 0; index < Model.RecommendedSatoshiPerByte.Count; index++)\n                    {\n                        var feeRateOption = Model.RecommendedSatoshiPerByte[index];\n                        <button type=\"button\" class=\"btn btn-sm btn-secondary crypto-fee-link\" value=\"@feeRateOption.FeeRate\" data-bs-toggle=\"tooltip\" title=\"@feeRateOption.FeeRate sat/b\">\n                            @feeRateOption.Target.TimeString()\n                        </button>\n                        <input type=\"hidden\" asp-for=\"RecommendedSatoshiPerByte[index].Target\" />\n                        <input type=\"hidden\" asp-for=\"RecommendedSatoshiPerByte[index].FeeRate\" />\n                    }\n                </div>\n            </div>\n        }\n    </div>\n    @if (Model.Outputs.Count == 1)\n    {\n        <div class=\"form-group\">\n            <div class=\"form-check\">\n                <input type=\"checkbox\" asp-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"form-check-input subtract-fees\" />\n                <label asp-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"Outputs[0].SubtractFeesFromOutput\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    }\n\n    <div class=\"my-4\">\n        <button class=\"d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0\" type=\"button\" id=\"AdvancedSettingsButton\" data-bs-toggle=\"collapse\" data-bs-target=\"#AdvancedSettings\" aria-expanded=\"false\" aria-controls=\"AdvancedSettings\">\n            <vc:icon symbol=\"caret-down\"/>\n            <span class=\"ms-1\">Advanced settings</span>\n        </button>\n        <div id=\"AdvancedSettings\" class=\"collapse\">\n            <div class=\"pt-3 pb-1\">\n                <div class=\"form-group\">\n                    <div class=\"form-check\">\n                        <input asp-for=\"NoChange\" class=\"form-check-input\" />\n                        <label asp-for=\"NoChange\" class=\"form-check-label\"></label>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#dont-create-utxo-change\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                        </a>\n                    </div>\n                </div>                        \n                <div class=\"form-group\">\n                    <div class=\"form-check\">\n                        <input asp-for=\"AlwaysIncludeNonWitnessUTXO\" class=\"form-check-input\"/>\n                        <label asp-for=\"AlwaysIncludeNonWitnessUTXO\" class=\"form-check-label\"></label>\n                    </div>\n                </div>    \n                @if (Model.SupportRBF)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"AllowFeeBump\" class=\"form-label\"></label>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#rbf-replace-by-fee\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                        </a>\n                        <select asp-for=\"AllowFeeBump\" class=\"form-select w-auto\">\n                            <option value=\"Maybe\">Randomize for higher privacy</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                        </select>\n                    </div>\n                }\n                @if (!string.IsNullOrEmpty(Model.PayJoinBIP21))\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"PayJoinBIP21\" class=\"form-label\"></label>\n                        <input asp-for=\"PayJoinBIP21\" class=\"form-control\" />\n                        <span asp-validation-for=\"PayJoinBIP21\" class=\"text-danger\"></span>\n                    </div>\n                }\n            </div>\n        </div>\n    </div>\n    <div class=\"form-group d-grid d-sm-flex flex-wrap gap-3 mt-2\">\n        <button type=\"submit\" id=\"SignTransaction\" name=\"command\" value=\"sign\" class=\"btn btn-primary\">Sign transaction</button>\n        <button type=\"submit\" id=\"ScheduleTransaction\" name=\"command\" value=\"schedule\" class=\"btn btn-secondary\">Schedule transaction</button>\n        <a class=\"btn btn-secondary\" asp-controller=\"UIWallets\" asp-action=\"WalletPSBT\" asp-route-walletId=\"@walletId\" asp-route-returnUrl=\"@Model.ReturnUrl\" id=\"PSBT\">PSBT</a>\n        <button type=\"button\" id=\"bip21parse\" class=\"btn btn-secondary\" title=\"Paste BIP21/Address\"><i class=\"fa fa-paste\"></i></button>\n        <button type=\"button\" id=\"scanqrcode\" class=\"btn btn-secondary only-for-js\" data-bs-toggle=\"modal\" data-bs-target=\"#scanModal\" title=\"Scan BIP21/Address with camera\"><i class=\"fa fa-camera\"></i></button>\n    </div>\n</form>\n", "@using BTCPayServer.Controllers\n@model WalletSendVaultModel\n@{\n    var walletId = Context.GetRouteValue(\"walletId\").ToString();\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign the transaction\", walletId);\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>@ViewData[\"Title\"]</h1>\n    <p class=\"lead text-secondary mt-3\">Using BTCPay Server Vault</p>\n</header>\n\n<div id=\"walletAlert\" class=\"alert alert-warning alert-dismissible my-4\" style=\"display:none;\" role=\"alert\">\n    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n        <vc:icon symbol=\"close\" />\n    </button>\n    <span id=\"alertMessage\"></span>\n</div>\n\n<div id=\"body\" class=\"my-4\">\n    <form id=\"broadcastForm\" asp-action=\"WalletSendVault\" asp-route-walletId=\"@walletId\" method=\"post\" style=\"display:none;\">\n        <input type=\"hidden\" id=\"WalletId\" asp-for=\"WalletId\" />\n        <input type=\"hidden\" asp-for=\"WebsocketPath\" />\n        <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n        <input type=\"hidden\" asp-for=\"BackUrl\" />\n        <partial name=\"SigningContext\" for=\"SigningContext\" />\n    </form>\n    <div id=\"vaultPlaceholder\"></div>\n    <button id=\"vault-retry\" class=\"btn btn-primary\" style=\"display:none;\" type=\"button\">Retry</button>\n    <button id=\"vault-confirm\" class=\"btn btn-primary\" style=\"display:none;\"></button>\n</div>\n\n<partial name=\"VaultElements\" />\n\n@section PageFootContent\n{\n    <script src=\"~/js/vaultbridge.js\" type=\"text/javascript\" defer=\"defer\" asp-append-version=\"true\"></script>\n    <script src=\"~/js/vaultbridge.ui.js\" type=\"text/javascript\" defer=\"defer\" asp-append-version=\"true\"></script>\n    <script>\n        async function askSign() {\n            var websocketPath = $(\"#WebsocketPath\").val();\n            var loc = window.location, ws_uri;\n            if (loc.protocol === \"https:\") {\n                ws_uri = \"wss:\";\n            } else {\n                ws_uri = \"ws:\";\n            }\n            ws_uri += \"//\" + loc.host;\n            ws_uri += websocketPath;\n            var html = $(\"#VaultConnection\").html();\n            $(\"#vaultPlaceholder\").html(html);\n            var vaultUI = new vaultui.VaultBridgeUI(ws_uri);\n            \n            while (!await vaultUI.askForDevice() || !await vaultUI.askSignPSBT({\n                walletId: $(\"#WalletId\").val(),\n                psbt: $(\"#SigningContext_PSBT\").val()\n            })) {\n            }\n            $(\"#SigningContext_PSBT\").val(vaultUI.psbt);\n            $(\"#broadcastForm\").submit();\n        }\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            askSign();\n        });\n\t\tvar alertMsg = document.getElementById(\"alertMessage\");\n\t\tvar walletAlert = document.getElementById(\"walletAlert\");\n\t\tvar isSafari = window.safari !== undefined;\n\t\tif (isSafari)\n\t\t{\n\t\t\talertMsg.innerHTML = \"Safari doesn't support BTCPay Server Vault. Please use a different browser. (<a class=\\\"alert-link\\\" href=\\\"https://bugs.webkit.org/show_bug.cgi?id=171934\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">More information</a>)\";\n\t\t\twalletAlert.style.display = null;\n\t\t}\n\t\tvar isBrave = navigator.brave !== undefined;\n\t\tif (isBrave)\n\t\t{\n\t\t\talertMsg.innerHTML = \"Brave supports BTCPay Server Vault, but you need to disable Brave Shields. (<a class=\\\"alert-link\\\" href=\\\"https://www.updateland.com/how-to-turn-off-brave-shields/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">More information</a>)\";\n\t\t\twalletAlert.style.display = null;\n\t\t}\n    </script>\n}\n", "@using BTCPayServer.Controllers\n@model WalletSigningOptionsModel\n@inject BTCPayNetworkProvider BTCPayNetworkProvider\n@{\n    var walletId = WalletId.Parse(Context.GetRouteValue(\"walletId\").ToString());\n    var cancelUrl = Model.ReturnUrl ?? Url.Action(nameof(UIWalletsController.WalletTransactions), new { walletId });\n    var backUrl = Model.BackUrl != null ? $\"{Model.BackUrl}?returnUrl={Model.ReturnUrl}\" : null;\n    Layout = \"_LayoutWizard\";\n    ViewData.SetActivePage(WalletsNavPages.Send, \"Sign the transaction\", walletId.ToString());\n}\n\n@section Navbar {\n    @if (backUrl != null)\n    {\n        <a href=\"@Url.EnsureLocal(backUrl)\" id=\"GoBack\">\n            <vc:icon symbol=\"back\" />\n        </a>\n    }\n    <a href=\"@Url.EnsureLocal(cancelUrl)\" id=\"CancelWizard\" class=\"cancel\">\n        <vc:icon symbol=\"close\" />\n    </a>\n}\n\n<header class=\"text-center\">\n    <h1>Choose your signing method</h1>\n    <p class=\"lead text-secondary mt-3\">You can sign the transaction using one of the following methods.</p>\n</header>\n\n<form method=\"post\" asp-action=\"WalletSign\" asp-route-walletId=\"@walletId\">\n    <partial name=\"SigningContext\" for=\"SigningContext\" />\n    <input type=\"hidden\" asp-for=\"ReturnUrl\" />\n    <input type=\"hidden\" asp-for=\"BackUrl\" />\n\n    @if (BTCPayNetworkProvider.GetNetwork<BTCPayNetwork>(walletId.CryptoCode).VaultSupported)\n    {\n        <div class=\"list-group mt-4\">\n            <button type=\"submit\" name=\"command\" value=\"vault\" class=\"list-group-item list-group-item-action only-for-js\" id=\"SignWithVault\">\n                <div class=\"image\">\n                    <vc:icon symbol=\"hardware-wallet\"/>\n                </div>\n                <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                    <div>\n                        <h4>Hardware wallet</h4>\n                        <p class=\"mb-0 text-secondary\">Sign using our Vault application</p>\n                    </div>\n                    <small class=\"d-block text-primary mt-2 mt-lg-0\">Recommended</small>\n                </div>\n                <vc:icon symbol=\"caret-right\"/>\n            </button>\n            <noscript>\n                <div class=\"list-group-item disabled\">\n                    <div class=\"image\">\n                        <vc:icon symbol=\"hardware-wallet\"/>\n                    </div>\n                    <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                        <div><h4>Hardware wallet</h4>\n                            <p class=\"mb-0\">Please enable JavaScript for this option to be available</p>\n                        </div>\n                    </div>\n                </div>\n            </noscript>\n        </div>\n    }\n\n    <div class=\"list-group mt-4\">\n        <button type=\"submit\" name=\"command\" value=\"decode\" class=\"list-group-item list-group-item-action\" id=\"SignWithPSBT\">\n            <div class=\"image\">\n                <vc:icon symbol=\"wallet-file\"/>\n            </div>\n            <div class=\"content\">\n                <h4>\n                    Partially Signed Bitcoin Transaction\n                    <small>\n                        <a href=\"https://docs.btcpayserver.org/Wallet/#signing-with-a-wallet-supporting-psbt\" target=\"_blank\" rel=\"noreferrer noopener\">\n                            <span class=\"fa fa-question-circle-o text-secondary pe-none\" title=\"More information...\"></span>\n                        </a>\n                    </small>\n                </h4>\n                <p class=\"mb-0 text-secondary\">Offline signing, without connecting your wallet to the internet</p>\n            </div>\n            <vc:icon symbol=\"caret-right\"/>\n        </button>\n    </div>\n\n    <div class=\"list-group mt-4\">\n        <button type=\"submit\" name=\"command\" value=\"seed\" class=\"list-group-item list-group-item-action\" id=\"SignWithSeed\">\n            <div class=\"image\">\n                <vc:icon symbol=\"seed\"/>\n            </div>\n            <div class=\"content d-flex flex-column flex-lg-row align-items-lg-center justify-content-lg-between me-2\">\n                <div>\n                    <h4>Private key or seed</h4>\n                    <p class=\"mb-0 text-secondary\">Provide the 12 or 24 word recovery seed</p>\n                </div>\n                <small class=\"d-block text-danger mt-2 mt-lg-0\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"You really should not type your seed into a device that is connected to the internet.\">Not recommended <span class=\"fa fa-question-circle-o\"></span></small>\n            </div>\n            <vc:icon symbol=\"caret-right\"/>\n        </button>\n    </div>\n</form>\n"], "filenames": ["BTCPayServer.Tests/SeleniumTester.cs", "BTCPayServer/Extensions/UrlHelperExtensions.cs", "BTCPayServer/Models/StoreViewModels/RecoverySeedBackupViewModel.cs", "BTCPayServer/Views/Shared/ConfirmModal.cshtml", "BTCPayServer/Views/Shared/PostRedirect.cshtml", "BTCPayServer/Views/UIHome/RecoverySeedBackup.cshtml", "BTCPayServer/Views/UIStores/WalletSettings.cshtml", "BTCPayServer/Views/UIWallets/SignWithSeed.cshtml", "BTCPayServer/Views/UIWallets/WalletPSBT.cshtml", "BTCPayServer/Views/UIWallets/WalletPSBTCombine.cshtml", "BTCPayServer/Views/UIWallets/WalletPSBTDecoded.cshtml", "BTCPayServer/Views/UIWallets/WalletReceive.cshtml", "BTCPayServer/Views/UIWallets/WalletSend.cshtml", "BTCPayServer/Views/UIWallets/WalletSendVault.cshtml", "BTCPayServer/Views/UIWallets/WalletSigningOptions.cshtml"], "buggy_code_start_loc": [206, 1, 0, 35, 41, 76, 55, 14, 14, 14, 78, 18, 17, 14, 15], "buggy_code_end_loc": [207, 12, 20, 36, 42, 86, 68, 19, 19, 19, 83, 19, 22, 19, 20], "fixing_code_start_loc": [205, 2, 1, 35, 41, 76, 55, 14, 14, 14, 78, 18, 17, 14, 15], "fixing_code_end_loc": [205, 26, 21, 36, 42, 86, 68, 19, 19, 19, 83, 19, 22, 19, 20], "type": "CWE-601", "message": "Open Redirect in GitHub repository btcpayserver/btcpayserver prior to 1.7.6.", "other": {"cve": {"id": "CVE-2023-0748", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-08T15:15:13.467", "lastModified": "2023-02-18T20:38:12.043", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Open Redirect in GitHub repository btcpayserver/btcpayserver prior to 1.7.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.5, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:btcpayserver:btcpayserver:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.6", "matchCriteriaId": "94342CA6-A899-46CD-A11E-DCD2BE344BB9"}]}]}], "references": [{"url": "https://github.com/btcpayserver/btcpayserver/commit/c2cfa17e9619046b43987627b8429541d2834109", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/1a0403b6-9ec9-4587-b559-b1afba798c86", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/btcpayserver/btcpayserver/commit/c2cfa17e9619046b43987627b8429541d2834109"}}