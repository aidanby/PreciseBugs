{"buggy_code": ["/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar url = require('url');\nvar _ = require('@sailshq/lodash');\nvar semver = require('semver');\nvar parseSdkMetadata = require('./parse-sdk-metadata');\nvar ERRORPACK = require('./errors');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * @required  {Object} app\n *\n * @return {Function}     [initialize]\n */\nmodule.exports = function ToReceiveIncomingSailsIOMsg(app) {\n\n  /**\n   * Parse an incoming Socket.io message (usually from the sails.io.js client),\n   * build up Socket.io-specific properties for the request object, then feed\n   * that to the request interpreter in Sails core by calling `sails.request`.\n   *\n   * @required  {Object} options.incomingSailsIOMsg\n   * @required  {Function} options.socketIOClientCallback\n   * @required  {String} options.eventName\n   * @required  {Object} options.socket\n   */\n\n  return function receiveIncomingSailsIOMsg(options) {\n    app.log.verbose('Receiving incoming message from Socket.io: ', options.incomingSailsIOMsg);\n\n    // If invalid callback function specified, freak out\n    // (it's ok to NOT include a callback, but if it exists, it should be a function)\n    if (options.socketIOClientCallback && !_.isFunction(options.socketIOClientCallback)) {\n      delete options.socketIOClientCallback;\n      return respondWithParseError('Could not parse request- callback may be omitted... but if provided, it must be a function.');\n    }\n\n    // Check that URL is specified\n    if (!options.incomingSailsIOMsg.url) {\n      return respondWithParseError(util.format('No url provided in request: %s',options.incomingSailsIOMsg));\n    }\n\n    // Check that URL is valid\n    if (!_.isString(options.incomingSailsIOMsg.url)) {\n      return respondWithParseError(util.format('Invalid url provided: %s',options.incomingSailsIOMsg.url));\n    }\n\n    // Grab the metadata for the SDK\n    var sdk = parseSdkMetadata(options.socket.handshake);\n\n    // No more backwards-compatibility for clients < v0.11.0\n    // > Note that we round off the prerelease part of the SDK version,\n    // > in case there is one.  Otherwise, this check will always fail,\n    // > no matter the version.  For more information on this, see:\n    // > \u2022 https://github.com/npm/node-semver/issues/130#issuecomment-120988399\n    // > \u2022 https://github.com/npm/node-semver/tree/44cbc8482ac4f0f8d2de0abb7f8808056d2d55f9#prerelease-tags\n    var closestStableSdkVersion = semver.major(sdk.version)+'.'+semver.minor(sdk.version)+'.'+semver.patch(sdk.version);\n    if (!semver.satisfies(closestStableSdkVersion, '>=0.11.0')) {\n      return respondWithParseError(util.format('This version of Sails is not compatible with the socket.io/sails.io.js client SDK version you are using (%s). Please see https://sailsjs.com/documentation/upgrading/to-v-0-11 for more information-- then please continue upgrading all the way to the installed version of Sails.',sdk.version));\n    }\n\n    // Try to get the express 'trust proxy' setting value\n    var expressTrust;\n    try {\n      expressTrust = app.hooks.http.app.get('trust proxy fn');\n    }\n    // Something went wrong while retrieving the express settings. Default's to no Trust\n    catch (e) {\n      expressTrust = function () { return false };\n    }\n\n    // Dummy express req object so we can use proxy-addr\n    var reqDummy = {\n      connection: { remoteAddress: options.socket.handshake.address },\n      headers: options.socket.handshake.headers\n    };\n\n    var ip = proxyaddr(reqDummy, expressTrust);\n\n    var ips = proxyaddr.all(reqDummy, expressTrust);\n\n    // reverse the order (to farthest -> closest)\n    // and remove socket address\n    ips.reverse().pop();\n\n    // Start building up the request context which we'll pass into the interpreter in Sails core:\n    var requestContext = {\n\n      transport: 'socket.io', // TODO: consider if this is really helpful or just a waste of LoC\n\n      protocol: 'ws', // TODO: consider if this is really helpful or just a waste of LoC\n\n      isSocket: true,\n\n      ip      : ip,\n\n      ips     : ips,\n\n      port    : null,\n\n      // Access to underlying SIO socket\n      socket  : options.socket,\n\n      url     : options.incomingSailsIOMsg.url,\n\n      path    : url.parse(options.incomingSailsIOMsg.url).pathname,\n\n      method  : options.eventName,\n\n      // Attached data becomes simulated HTTP body (`req.body`)\n      // (allow `params` or `data` to be specified for backwards/sideways-compatibility)\n      body    : _.isArray(options.incomingSailsIOMsg.data) ? options.incomingSailsIOMsg.data : _.extend({}, options.incomingSailsIOMsg.params || {}, options.incomingSailsIOMsg.data || {}),\n\n      // Allow optional headers\n      headers: _.defaults({\n\n        host: app.config.host,\n\n        // Default the \"cookie\" request header to what was provided in the handshake.\n        cookie: (function (){\n          var _cookie;\n          try {\n            _cookie = options.socket.handshake.headers.cookie;\n          }\n          catch (e) {}\n          // console.log('REQUEST to \"%s %s\" IS USING COOKIE:', options.eventName, options.incomingSailsIOMsg.url, _cookie);\n          return _cookie;\n        })(),\n\n        nosession: options.socket.handshake.headers.nosession ? true : undefined,\n\n      }, options.incomingSailsIOMsg.headers || {})\n\n    };\n\n    // app.log.verbose('Interpreting socket.io message as virtual request to \"%s %s\"...', requestContext.method, requestContext.url);\n    // app.log.verbose('(cookie: %s)', requestContext.headers.cookie);\n\n    // Set the `origin` header to what was provided in the handshake\n    // (the origin header CANNOT BE OVERRIDDEN by sockets at virtual request-time-- only\n    //  upon first connection.)\n    if (requestContext.headers.origin){\n\n      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n      // FUTURE: Further document security reasons why `origin` may not be passed manually\n      // at VR (virtual request) time.  Has to do w/ xdomain security concerns.\n      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n      app.log.verbose('Ignoring provided `origin` header in VR (virtual request) from socket.io: It would not be safe to change `origin` for this socket now!');\n    }\n    requestContext.headers.origin = (function (){\n      var _origin;\n      try {\n        _origin = options.socket.handshake.headers.origin;\n      }\n      catch (e){}\n      return _origin;\n    })();\n\n\n    // console.log('handshake:',options.socket.handshake);\n    app.log.verbose('Interpreting socket.io message as VR (virtual request) to \"%s %s\"...', requestContext.method, requestContext.url);\n\n\n\n    // Start building up the response context which we'll pass into the interpreter in Sails core:\n    var responseContext = {\n\n      /**\n       * This `_clientCallback` function we provide here will be used by Sails core as a final step\n       * when trying to run methods like `res.send()`.\n       *\n       * Since Socket.io v1.x does not support streaming socket messages out of the box,\n       * currently we'll just use this callback vs passing in a stream (so the client response\n       * stream will just be buffered to build up clientRes.body)\n       *\n       * IMPORTANT:\n       * The `clientRes` provided here is a Readable client response stream, not the same `res`\n       * that is available in userland code.\n       */\n\n      _clientCallback: function _clientCallback(clientRes) {\n\n        // If no cookie was sent initially on the handshake, and a 'set-cookie' exists in response\n        // headers, then save the cookie on the handshake (no need to send extra data over the wire\n        // since we're maintaining a persistent connection on this side, plus this prevents client-side\n        // js from accessing the cookie)\n        //\n        // This allows for anything relying on cookies (e.g. default `req.session` support)\n        // to last as long as the socket connection (i.e. until the browser tab is closed)\n        //\n        // Note that we **STILL GENERATE A COOKIE** using socket.io middleware when the socket\n        // initially connects.  This is so that by the time we run the `onConnect` lifecycle event,\n        // it has access to the real session.  So in general, this should never fire.\n        //\n        // In the future, we may want to always reset the handshake's cookie based on the `set-cookie`\n        // response header to allow for custom HTTP cookies to work completely via sockets, but that\n        // should be evaluated carefully to avoid unexpected race conditions.\n        try {\n          if (!options.socket.handshake.headers.cookie && clientRes.headers['set-cookie']){\n              options.socket.handshake.headers.cookie = clientRes.headers['set-cookie'][0];\n          }\n        }\n        catch (e) {\n          app.log.warn('Could not persist res.headers[\"set-cookie\"] into the socket handshake:',e);\n        }\n\n        // If socket.io callback does not exist as a valid function, don't bother responding.\n        if (!_.isFunction(options.socketIOClientCallback)) {\n          return;\n        }\n\n        // Modern behavior\n        // (builds a complete simulation of an HTTP response.)\n        var jwr = {\n          body: clientRes.body\n        };\n\n        // Allow headers and status code to be disabled to allow for squeezing\n        // out a little more performance when relevant (and reducing bandwidth usage).\n        // To achieve this, set `sails.config.sockets.sendResponseHeaders=false` and/or\n        // `sails.config.sockets.sendStatusCode=false`.\n        if (app.config.sockets.sendResponseHeaders) {\n          jwr.headers = clientRes.headers;\n        }\n        if (app.config.sockets.sendStatusCode) {\n          jwr.statusCode = clientRes.statusCode;\n        }\n\n        // Remove 'set-cookie' header\n        // (to prevent cookie from reaching client-side js)\n        delete jwr.headers['set-cookie'];\n\n        // TODO:\n        // Try out http://socket.io/blog/introducing-socket-io-1-0/#socket.io-stream\n        // to explore how we could make it work with Sails.\n        // (the old way in 0.9 was streams1 style, just emitting `data` and `end` messages)\n\n        // Send down response.\n        options.socketIOClientCallback(jwr);\n        return;\n      }\n\n    };\n\n\n    // Finally, lob a virtual request at the interpreter\n    app.router.route(requestContext, responseContext);\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Send a parse error back over the socket.\n     * If a callback was provided by the socket.io client, it will be used,\n     * but otherwise a low-level event will be emitted (since otherwise there's\n     * no way to communicate with the client)\n     *\n     * Relies on closure scope for `options` and `app`.\n     */\n\n    function respondWithParseError (detailedErrorMsg) {\n\n      var error = ERRORPACK.PARSE_VIRTUAL_REQ('Failed to parse incoming socket.io request.');\n      error.details = detailedErrorMsg;\n\n      // Log parse error\n      app.log.error(error);\n\n      // If callback is invalid or non-existent:\n      if ( !_.isFunction(options.socketIOClientCallback) ) {\n        // Emit parse error\n        options.socket.emit('sails:parseError', error);\n        return;\n      }\n\n      // Otherwise just send the error directly to the callback...\n      return options.socketIOClientCallback(error);\n    }\n\n  };\n\n\n};\n"], "fixing_code": ["/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar url = require('url');\nvar _ = require('@sailshq/lodash');\nvar semver = require('semver');\nvar parseSdkMetadata = require('./parse-sdk-metadata');\nvar ERRORPACK = require('./errors');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * @required  {Object} app\n *\n * @return {Function}     [initialize]\n */\nmodule.exports = function ToReceiveIncomingSailsIOMsg(app) {\n\n  /**\n   * Parse an incoming Socket.io message (usually from the sails.io.js client),\n   * build up Socket.io-specific properties for the request object, then feed\n   * that to the request interpreter in Sails core by calling `sails.request`.\n   *\n   * @required  {Object} options.incomingSailsIOMsg\n   * @required  {Function} options.socketIOClientCallback\n   * @required  {String} options.eventName\n   * @required  {Object} options.socket\n   */\n\n  return function receiveIncomingSailsIOMsg(options) {\n    app.log.verbose('Receiving incoming message from Socket.io: ', options.incomingSailsIOMsg);\n\n    // If invalid callback function specified, freak out\n    // (it's ok to NOT include a callback, but if it exists, it should be a function)\n    if (options.socketIOClientCallback && !_.isFunction(options.socketIOClientCallback)) {\n      delete options.socketIOClientCallback;\n      return respondWithParseError('Could not parse request- callback may be omitted... but if provided, it must be a function.');\n    }\n\n    // Check that URL is specified\n    if (!options.incomingSailsIOMsg.url) {\n      return respondWithParseError(util.format('No url provided in request: %s',options.incomingSailsIOMsg));\n    }\n\n    // Check that URL is valid\n    if (!_.isString(options.incomingSailsIOMsg.url)) {\n      return respondWithParseError(util.format('Invalid url provided: %s',options.incomingSailsIOMsg.url));\n    }\n\n    // Grab the metadata for the SDK\n    var sdk = parseSdkMetadata(options.socket.handshake);\n\n    // No more backwards-compatibility for clients < v0.11.0\n    // > Note that we round off the prerelease part of the SDK version,\n    // > in case there is one.  Otherwise, this check will always fail,\n    // > no matter the version.  For more information on this, see:\n    // > \u2022 https://github.com/npm/node-semver/issues/130#issuecomment-120988399\n    // > \u2022 https://github.com/npm/node-semver/tree/44cbc8482ac4f0f8d2de0abb7f8808056d2d55f9#prerelease-tags\n    var closestStableSdkVersion = semver.major(sdk.version)+'.'+semver.minor(sdk.version)+'.'+semver.patch(sdk.version);\n    if (!semver.satisfies(closestStableSdkVersion, '>=0.11.0')) {\n      return respondWithParseError(util.format('This version of Sails is not compatible with the socket.io/sails.io.js client SDK version you are using (%s). Please see https://sailsjs.com/documentation/upgrading/to-v-0-11 for more information-- then please continue upgrading all the way to the installed version of Sails.',sdk.version));\n    }\n\n    // Try to get the express 'trust proxy' setting value\n    var expressTrust;\n    try {\n      expressTrust = app.hooks.http.app.get('trust proxy fn');\n    }\n    // Something went wrong while retrieving the express settings. Default's to no Trust\n    catch (e) {\n      expressTrust = function () { return false };\n    }\n\n    // Dummy express req object so we can use proxy-addr\n    var reqDummy = {\n      connection: { remoteAddress: options.socket.handshake.address },\n      headers: options.socket.handshake.headers\n    };\n\n    var ip = proxyaddr(reqDummy, expressTrust);\n\n    var ips = proxyaddr.all(reqDummy, expressTrust);\n\n    // reverse the order (to farthest -> closest)\n    // and remove socket address\n    ips.reverse().pop();\n\n    // Start building up the request context which we'll pass into the interpreter in Sails core:\n    var requestContext = {\n\n      transport: 'socket.io', // TODO: consider if this is really helpful or just a waste of LoC\n\n      protocol: 'ws', // TODO: consider if this is really helpful or just a waste of LoC\n\n      isSocket: true,\n\n      ip      : ip,\n\n      ips     : ips,\n\n      port    : null,\n\n      // Access to underlying SIO socket\n      socket  : options.socket,\n\n      url     : options.incomingSailsIOMsg.url,\n\n      path    : url.parse(options.incomingSailsIOMsg.url).pathname || '/',\n      // ^^ Uses || '/' because otherwise url.parse returns `null`,\n      // which is not a string and thus bad when you try to check\n      // .match() of it.\n\n      method  : options.eventName,\n\n      // Attached data becomes simulated HTTP body (`req.body`)\n      // (allow `params` or `data` to be specified for backwards/sideways-compatibility)\n      body    : _.isArray(options.incomingSailsIOMsg.data) ? options.incomingSailsIOMsg.data : _.extend({}, options.incomingSailsIOMsg.params || {}, options.incomingSailsIOMsg.data || {}),\n\n      // Allow optional headers\n      headers: _.defaults({\n\n        host: app.config.host,\n\n        // Default the \"cookie\" request header to what was provided in the handshake.\n        cookie: (function (){\n          var _cookie;\n          try {\n            _cookie = options.socket.handshake.headers.cookie;\n          }\n          catch (e) {}\n          // console.log('REQUEST to \"%s %s\" IS USING COOKIE:', options.eventName, options.incomingSailsIOMsg.url, _cookie);\n          return _cookie;\n        })(),\n\n        nosession: options.socket.handshake.headers.nosession ? true : undefined,\n\n      }, options.incomingSailsIOMsg.headers || {})\n\n    };\n\n    // app.log.verbose('Interpreting socket.io message as virtual request to \"%s %s\"...', requestContext.method, requestContext.url);\n    // app.log.verbose('(cookie: %s)', requestContext.headers.cookie);\n\n    // Set the `origin` header to what was provided in the handshake\n    // (the origin header CANNOT BE OVERRIDDEN by sockets at virtual request-time-- only\n    //  upon first connection.)\n    if (requestContext.headers.origin){\n\n      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n      // FUTURE: Further document security reasons why `origin` may not be passed manually\n      // at VR (virtual request) time.  Has to do w/ xdomain security concerns.\n      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n      app.log.verbose('Ignoring provided `origin` header in VR (virtual request) from socket.io: It would not be safe to change `origin` for this socket now!');\n    }\n    requestContext.headers.origin = (function (){\n      var _origin;\n      try {\n        _origin = options.socket.handshake.headers.origin;\n      }\n      catch (e){}\n      return _origin;\n    })();\n\n\n    // console.log('handshake:',options.socket.handshake);\n    app.log.verbose('Interpreting socket.io message as VR (virtual request) to \"%s %s\"...', requestContext.method, requestContext.url);\n\n\n\n    // Start building up the response context which we'll pass into the interpreter in Sails core:\n    var responseContext = {\n\n      /**\n       * This `_clientCallback` function we provide here will be used by Sails core as a final step\n       * when trying to run methods like `res.send()`.\n       *\n       * Since Socket.io v1.x does not support streaming socket messages out of the box,\n       * currently we'll just use this callback vs passing in a stream (so the client response\n       * stream will just be buffered to build up clientRes.body)\n       *\n       * IMPORTANT:\n       * The `clientRes` provided here is a Readable client response stream, not the same `res`\n       * that is available in userland code.\n       */\n\n      _clientCallback: function _clientCallback(clientRes) {\n\n        // If no cookie was sent initially on the handshake, and a 'set-cookie' exists in response\n        // headers, then save the cookie on the handshake (no need to send extra data over the wire\n        // since we're maintaining a persistent connection on this side, plus this prevents client-side\n        // js from accessing the cookie)\n        //\n        // This allows for anything relying on cookies (e.g. default `req.session` support)\n        // to last as long as the socket connection (i.e. until the browser tab is closed)\n        //\n        // Note that we **STILL GENERATE A COOKIE** using socket.io middleware when the socket\n        // initially connects.  This is so that by the time we run the `onConnect` lifecycle event,\n        // it has access to the real session.  So in general, this should never fire.\n        //\n        // In the future, we may want to always reset the handshake's cookie based on the `set-cookie`\n        // response header to allow for custom HTTP cookies to work completely via sockets, but that\n        // should be evaluated carefully to avoid unexpected race conditions.\n        try {\n          if (!options.socket.handshake.headers.cookie && clientRes.headers['set-cookie']){\n              options.socket.handshake.headers.cookie = clientRes.headers['set-cookie'][0];\n          }\n        }\n        catch (e) {\n          app.log.warn('Could not persist res.headers[\"set-cookie\"] into the socket handshake:',e);\n        }\n\n        // If socket.io callback does not exist as a valid function, don't bother responding.\n        if (!_.isFunction(options.socketIOClientCallback)) {\n          return;\n        }\n\n        // Modern behavior\n        // (builds a complete simulation of an HTTP response.)\n        var jwr = {\n          body: clientRes.body\n        };\n\n        // Allow headers and status code to be disabled to allow for squeezing\n        // out a little more performance when relevant (and reducing bandwidth usage).\n        // To achieve this, set `sails.config.sockets.sendResponseHeaders=false` and/or\n        // `sails.config.sockets.sendStatusCode=false`.\n        if (app.config.sockets.sendResponseHeaders) {\n          jwr.headers = clientRes.headers;\n        }\n        if (app.config.sockets.sendStatusCode) {\n          jwr.statusCode = clientRes.statusCode;\n        }\n\n        // Remove 'set-cookie' header\n        // (to prevent cookie from reaching client-side js)\n        delete jwr.headers['set-cookie'];\n\n        // TODO:\n        // Try out http://socket.io/blog/introducing-socket-io-1-0/#socket.io-stream\n        // to explore how we could make it work with Sails.\n        // (the old way in 0.9 was streams1 style, just emitting `data` and `end` messages)\n\n        // Send down response.\n        options.socketIOClientCallback(jwr);\n        return;\n      }\n\n    };\n\n\n    // Finally, lob a virtual request at the interpreter\n    app.router.route(requestContext, responseContext);\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Send a parse error back over the socket.\n     * If a callback was provided by the socket.io client, it will be used,\n     * but otherwise a low-level event will be emitted (since otherwise there's\n     * no way to communicate with the client)\n     *\n     * Relies on closure scope for `options` and `app`.\n     */\n\n    function respondWithParseError (detailedErrorMsg) {\n\n      var error = ERRORPACK.PARSE_VIRTUAL_REQ('Failed to parse incoming socket.io request.');\n      error.details = detailedErrorMsg;\n\n      // Log parse error\n      app.log.error(error);\n\n      // If callback is invalid or non-existent:\n      if ( !_.isFunction(options.socketIOClientCallback) ) {\n        // Emit parse error\n        options.socket.emit('sails:parseError', error);\n        return;\n      }\n\n      // Otherwise just send the error directly to the callback...\n      return options.socketIOClientCallback(error);\n    }\n\n  };\n\n\n};\n"], "filenames": ["lib/receive-incoming-sails-io-msg.js"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [110], "fixing_code_start_loc": [109], "fixing_code_end_loc": [113], "type": "CWE-20", "message": "Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request.", "other": {"cve": {"id": "CVE-2018-21036", "sourceIdentifier": "cve@mitre.org", "published": "2020-07-21T14:15:13.067", "lastModified": "2020-07-23T12:57:12.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sails.js before v1.0.0-46 allows attackers to cause a denial of service with a single request because there is no error handler in sails-hook-sockets to handle an empty pathname in a WebSocket request."}, {"lang": "es", "value": "Sails.js versiones anteriores a v1.0.0-46, permite a atacantes causar una denegaci\u00f3n de servicio con una sola petici\u00f3n porque no presenta un manejador de errores en sails-hook-sockets para manejar un nombre de ruta vac\u00edo en una petici\u00f3n WebSocket"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sailsjs:sails:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.0-46", "matchCriteriaId": "0D75B5C2-907C-4DE6-AF3D-9098E4E86D88"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2020/07/19/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/balderdashy/sails-hook-sockets/commit/0533a4864b1920fd8fbb5287bc0889193c5faf44", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/balderdashy/sails-hook-sockets/commit/ff02114eaec090ee51db48435cc32d451662606e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/balderdashy/sails/blob/56f8276f6501a144a03d1f0f28df4ccdb4ad82e2/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/balderdashy/sails-hook-sockets/commit/0533a4864b1920fd8fbb5287bc0889193c5faf44"}}