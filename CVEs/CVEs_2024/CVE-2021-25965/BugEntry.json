{"buggy_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2012-2019  OzzieIsaacs\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport sys\nimport os\n\n\n# Insert local directories into path\nif sys.version_info < (3, 0):\n    sys.path.append(os.path.dirname(os.path.abspath(__file__.decode('utf-8'))))\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__.decode('utf-8'))), 'vendor'))\nelse:\n    sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vendor'))\n\n\nfrom cps import create_app\nfrom cps import web_server\nfrom cps.opds import opds\nfrom cps.web import web\nfrom cps.jinjia import jinjia\nfrom cps.about import about\nfrom cps.shelf import shelf\nfrom cps.admin import admi\nfrom cps.gdrive import gdrive\nfrom cps.editbooks import editbook\nfrom cps.remotelogin import remotelogin\nfrom cps.search_metadata import meta\nfrom cps.error_handler import init_errorhandler\n\ntry:\n    from cps.kobo import kobo, get_kobo_activated\n    from cps.kobo_auth import kobo_auth\n    kobo_available = get_kobo_activated()\nexcept ImportError:\n    kobo_available = False\n\ntry:\n    from cps.oauth_bb import oauth\n    oauth_available = True\nexcept ImportError:\n    oauth_available = False\n\n\ndef main():\n    app = create_app()\n\n    init_errorhandler()\n\n    app.register_blueprint(web)\n    app.register_blueprint(opds)\n    app.register_blueprint(jinjia)\n    app.register_blueprint(about)\n    app.register_blueprint(shelf)\n    app.register_blueprint(admi)\n    app.register_blueprint(remotelogin)\n    app.register_blueprint(meta)\n    app.register_blueprint(gdrive)\n    app.register_blueprint(editbook)\n    if kobo_available:\n        app.register_blueprint(kobo)\n        app.register_blueprint(kobo_auth)\n    if oauth_available:\n        app.register_blueprint(oauth)\n    success = web_server.start()\n    sys.exit(0 if success else 1)\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport sys\nimport os\nimport mimetypes\n\nfrom babel import Locale as LC\nfrom babel import negotiate_locale\nfrom babel.core import UnknownLocaleError\nfrom flask import Flask, request, g\nfrom flask_login import LoginManager\nfrom flask_babel import Babel\nfrom flask_principal import Principal\n\nfrom . import config_sql, logger, cache_buster, cli, ub, db\nfrom .reverseproxy import ReverseProxied\nfrom .server import WebServer\n\ntry:\n    import lxml\n    lxml_present = True\nexcept ImportError:\n    lxml_present = False\n\nmimetypes.init()\nmimetypes.add_type('application/xhtml+xml', '.xhtml')\nmimetypes.add_type('application/epub+zip', '.epub')\nmimetypes.add_type('application/fb2+zip', '.fb2')\nmimetypes.add_type('application/x-mobipocket-ebook', '.mobi')\nmimetypes.add_type('application/x-mobipocket-ebook', '.prc')\nmimetypes.add_type('application/vnd.amazon.ebook', '.azw')\nmimetypes.add_type('application/x-mobi8-ebook', '.azw3')\nmimetypes.add_type('application/x-cbr', '.cbr')\nmimetypes.add_type('application/x-cbz', '.cbz')\nmimetypes.add_type('application/x-cbt', '.cbt')\nmimetypes.add_type('image/vnd.djvu', '.djvu')\nmimetypes.add_type('application/mpeg', '.mpeg')\nmimetypes.add_type('application/mpeg', '.mp3')\nmimetypes.add_type('application/mp4', '.m4a')\nmimetypes.add_type('application/mp4', '.m4b')\nmimetypes.add_type('application/ogg', '.ogg')\nmimetypes.add_type('application/ogg', '.oga')\n\napp = Flask(__name__)\napp.config.update(\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n    REMEMBER_COOKIE_SAMESITE='Lax',  # will be available in flask-login 0.5.1 earliest\n)\n\n\nlm = LoginManager()\nlm.login_view = 'web.login'\nlm.anonymous_user = ub.Anonymous\nlm.session_protection = 'strong'\n\nub.init_db(cli.settingspath)\n# pylint: disable=no-member\nconfig = config_sql.load_configuration(ub.session)\n\nweb_server = WebServer()\n\nbabel = Babel()\n_BABEL_TRANSLATIONS = set()\n\nlog = logger.create()\n\nfrom . import services\n\ndb.CalibreDB.update_config(config)\ndb.CalibreDB.setup_db(config.config_calibre_dir, cli.settingspath)\n\n\ncalibre_db = db.CalibreDB()\n\ndef create_app():\n    if sys.version_info < (3, 0):\n        log.info(\n            '*** Python2 is EOL since end of 2019, this version of Calibre-Web is no longer supporting Python2, please update your installation to Python3 ***')\n        print(\n            '*** Python2 is EOL since end of 2019, this version of Calibre-Web is no longer supporting Python2, please update your installation to Python3 ***')\n        sys.exit(5)\n    if not lxml_present:\n        log.info('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')\n        print('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')\n        sys.exit(6)\n    app.wsgi_app = ReverseProxied(app.wsgi_app)\n    # For python2 convert path to unicode\n    if sys.version_info < (3, 0):\n        app.static_folder = app.static_folder.decode('utf-8')\n        app.root_path = app.root_path.decode('utf-8')\n        app.instance_path = app.instance_path.decode('utf-8')\n\n    if os.environ.get('FLASK_DEBUG'):\n        cache_buster.init_cache_busting(app)\n    log.info('Starting Calibre Web...')\n\n    Principal(app)\n    lm.init_app(app)\n    app.secret_key = os.getenv('SECRET_KEY', config_sql.get_flask_session_key(ub.session))\n\n    web_server.init_app(app, config)\n\n    babel.init_app(app)\n    _BABEL_TRANSLATIONS.update(str(item) for item in babel.list_translations())\n    _BABEL_TRANSLATIONS.add('en')\n\n    if services.ldap:\n        services.ldap.init_app(app, config)\n    if services.goodreads_support:\n        services.goodreads_support.connect(config.config_goodreads_api_key,\n                                           config.config_goodreads_api_secret,\n                                           config.config_use_goodreads)\n\n    return app\n\n@babel.localeselector\ndef get_locale():\n    # if a user is logged in, use the locale from the user settings\n    user = getattr(g, 'user', None)\n    if user is not None and hasattr(user, \"locale\"):\n        if user.name != 'Guest':   # if the account is the guest account bypass the config lang settings\n            return user.locale\n\n    preferred = list()\n    if request.accept_languages:\n        for x in request.accept_languages.values():\n            try:\n                preferred.append(str(LC.parse(x.replace('-', '_'))))\n            except (UnknownLocaleError, ValueError) as e:\n                log.debug('Could not parse locale \"%s\": %s', x, e)\n\n    return negotiate_locale(preferred or ['en'], _BABEL_TRANSLATIONS)\n\n\n@babel.timezoneselector\ndef get_timezone():\n    user = getattr(g, 'user', None)\n    return user.timezone if user else None\n\n\nfrom .updater import Updater\nupdater_thread = Updater()\nupdater_thread.start()\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport sys\nimport platform\nimport sqlite3\nfrom collections import OrderedDict\n\nimport babel, pytz, requests, sqlalchemy\nimport werkzeug, flask, flask_login, flask_principal, jinja2\nfrom flask_babel import gettext as _\n\nfrom . import db, calibre_db, converter, uploader, server, isoLanguages, constants\nfrom .render_template import render_title_template\ntry:\n    from flask_login import __version__ as flask_loginVersion\nexcept ImportError:\n    from flask_login.__about__ import __version__ as flask_loginVersion\ntry:\n    # pylint: disable=unused-import\n    import unidecode\n    # _() necessary to make babel aware of string for translation\n    unidecode_version = _(u'installed')\nexcept ImportError:\n    unidecode_version = _(u'not installed')\n\ntry:\n    from flask_dance import __version__ as flask_danceVersion\nexcept ImportError:\n    flask_danceVersion = None\n\ntry:\n    from greenlet import __version__ as greenlet_Version\nexcept ImportError:\n    greenlet_Version = None\n\ntry:\n    from scholarly import scholarly\n    scholarly_version = _(u'installed')\nexcept ImportError:\n    scholarly_version = _(u'not installed')\n\nfrom . import services\n\nabout = flask.Blueprint('about', __name__)\n\n\n_VERSIONS = OrderedDict(\n    Platform = '{0[0]} {0[2]} {0[3]} {0[4]} {0[5]}'.format(platform.uname()),\n    Python=sys.version,\n    Calibre_Web=constants.STABLE_VERSION['version'] + ' - '\n                + constants.NIGHTLY_VERSION[0].replace('%','%%') + ' - '\n                + constants.NIGHTLY_VERSION[1].replace('%','%%'),\n    WebServer=server.VERSION,\n    Flask=flask.__version__,\n    Flask_Login=flask_loginVersion,\n    Flask_Principal=flask_principal.__version__,\n    Werkzeug=werkzeug.__version__,\n    Babel=babel.__version__,\n    Jinja2=jinja2.__version__,\n    Requests=requests.__version__,\n    SqlAlchemy=sqlalchemy.__version__,\n    pySqlite=sqlite3.version,\n    SQLite=sqlite3.sqlite_version,\n    iso639=isoLanguages.__version__,\n    pytz=pytz.__version__,\n    Unidecode = unidecode_version,\n    Scholarly = scholarly_version,\n    Flask_SimpleLDAP =  u'installed' if bool(services.ldap) else None,\n    python_LDAP = services.ldapVersion if bool(services.ldapVersion) else None,\n    Goodreads = u'installed' if bool(services.goodreads_support) else None,\n    jsonschema = services.SyncToken.__version__  if bool(services.SyncToken) else None,\n    flask_dance = flask_danceVersion,\n    greenlet = greenlet_Version\n)\n_VERSIONS.update(uploader.get_versions())\n\n\ndef collect_stats():\n    _VERSIONS['ebook converter'] = _(converter.get_calibre_version())\n    _VERSIONS['unrar'] = _(converter.get_unrar_version())\n    _VERSIONS['kepubify'] = _(converter.get_kepubify_version())\n    return _VERSIONS\n\n@about.route(\"/stats\")\n@flask_login.login_required\ndef stats():\n    counter = calibre_db.session.query(db.Books).count()\n    authors = calibre_db.session.query(db.Authors).count()\n    categorys = calibre_db.session.query(db.Tags).count()\n    series = calibre_db.session.query(db.Series).count()\n    return render_title_template('stats.html', bookcounter=counter, authorcounter=authors, versions=collect_stats(),\n                                 categorycounter=categorys, seriecounter=series, title=_(u\"Statistics\"), page=\"stat\")\n\n\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 shavitmichael, OzzieIsaacs\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport base64\nimport datetime\nimport sys\nimport os\nimport uuid\nfrom time import gmtime, strftime\n\ntry:\n    from urllib import unquote\nexcept ImportError:\n    from urllib.parse import unquote\n\nfrom flask import (\n    Blueprint,\n    request,\n    make_response,\n    jsonify,\n    current_app,\n    url_for,\n    redirect,\n    abort\n)\nfrom flask_login import current_user\nfrom werkzeug.datastructures import Headers\nfrom sqlalchemy import func\nfrom sqlalchemy.sql.expression import and_, or_\nfrom sqlalchemy.exc import StatementError\nfrom sqlalchemy.sql import select\nimport requests\n\nfrom . import config, logger, kobo_auth, db, calibre_db, helper, shelf as shelf_lib, ub\nfrom .constants import sqlalchemy_version2\nfrom .helper import get_download_link\nfrom .services import SyncToken as SyncToken\nfrom .web import download_required\nfrom .kobo_auth import requires_kobo_auth, get_auth_token\n\nKOBO_FORMATS = {\"KEPUB\": [\"KEPUB\"], \"EPUB\": [\"EPUB3\", \"EPUB\"]}\nKOBO_STOREAPI_URL = \"https://storeapi.kobo.com\"\nKOBO_IMAGEHOST_URL = \"https://kbimages1-a.akamaihd.net\"\n\nSYNC_ITEM_LIMIT = 100\n\nkobo = Blueprint(\"kobo\", __name__, url_prefix=\"/kobo/<auth_token>\")\nkobo_auth.disable_failed_auth_redirect_for_blueprint(kobo)\nkobo_auth.register_url_value_preprocessor(kobo)\n\nlog = logger.create()\n\n\ndef get_store_url_for_current_request():\n    # Programmatically modify the current url to point to the official Kobo store\n    __, __, request_path_with_auth_token = request.full_path.rpartition(\"/kobo/\")\n    __, __, request_path = request_path_with_auth_token.rstrip(\"?\").partition(\n        \"/\"\n    )\n    return KOBO_STOREAPI_URL + \"/\" + request_path\n\n\nCONNECTION_SPECIFIC_HEADERS = [\n    \"connection\",\n    \"content-encoding\",\n    \"content-length\",\n    \"transfer-encoding\",\n]\n\n\ndef get_kobo_activated():\n    return config.config_kobo_sync\n\n\ndef make_request_to_kobo_store(sync_token=None):\n    outgoing_headers = Headers(request.headers)\n    outgoing_headers.remove(\"Host\")\n    if sync_token:\n        sync_token.set_kobo_store_header(outgoing_headers)\n\n    store_response = requests.request(\n        method=request.method,\n        url=get_store_url_for_current_request(),\n        headers=outgoing_headers,\n        data=request.get_data(),\n        allow_redirects=False,\n        timeout=(2, 10)\n    )\n    return store_response\n\n\ndef redirect_or_proxy_request():\n    if config.config_kobo_proxy:\n        if request.method == \"GET\":\n            return redirect(get_store_url_for_current_request(), 307)\n        else:\n            # The Kobo device turns other request types into GET requests on redirects, so we instead proxy to the Kobo store ourselves.\n            store_response = make_request_to_kobo_store()\n\n            response_headers = store_response.headers\n            for header_key in CONNECTION_SPECIFIC_HEADERS:\n                response_headers.pop(header_key, default=None)\n\n            return make_response(\n                store_response.content, store_response.status_code, response_headers.items()\n            )\n    else:\n        return make_response(jsonify({}))\n\n\ndef convert_to_kobo_timestamp_string(timestamp):\n    try:\n        return timestamp.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    except AttributeError as exc:\n        log.debug(\"Timestamp not valid: {}\".format(exc))\n        return datetime.datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n\n@kobo.route(\"/v1/library/sync\")\n@requires_kobo_auth\n@download_required\ndef HandleSyncRequest():\n    sync_token = SyncToken.SyncToken.from_headers(request.headers)\n    log.info(\"Kobo library sync request received.\")\n    log.debug(\"SyncToken: {}\".format(sync_token))\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n\n    # TODO: Limit the number of books return per sync call, and rely on the sync-continuatation header\n    # instead so that the device triggers another sync.\n\n    new_books_last_modified = sync_token.books_last_modified\n    new_books_last_created = sync_token.books_last_created\n    new_reading_state_last_modified = sync_token.reading_state_last_modified\n    new_archived_last_modified = datetime.datetime.min\n    sync_results = []\n\n    # We reload the book database so that the user get's a fresh view of the library\n    # in case of external changes (e.g: adding a book through Calibre).\n    calibre_db.reconnect_db(config, ub.app_DB_path)\n\n    only_kobo_shelves = current_user.kobo_only_shelves_sync\n\n    if only_kobo_shelves:\n        if sqlalchemy_version2:\n            changed_entries = select(db.Books,\n                                     ub.ArchivedBook.last_modified,\n                                     ub.BookShelf.date_added,\n                                     ub.ArchivedBook.is_archived)\n        else:\n            changed_entries = calibre_db.session.query(db.Books,\n                                                       ub.ArchivedBook.last_modified,\n                                                       ub.BookShelf.date_added,\n                                                       ub.ArchivedBook.is_archived)\n        changed_entries = (changed_entries\n                .join(db.Data).outerjoin(ub.ArchivedBook, db.Books.id == ub.ArchivedBook.book_id)\n                .join(ub.KoboSyncedBooks, ub.KoboSyncedBooks.book_id == db.Books.id, isouter=True)\n                .filter(or_(ub.KoboSyncedBooks.user_id != current_user.id,\n                            ub.KoboSyncedBooks.book_id == None))\n                #.filter(or_(db.Books.last_modified > sync_token.books_last_modified,\n                #            ub.BookShelf.date_added > sync_token.books_last_modified))\n                .filter(ub.BookShelf.date_added > sync_token.books_last_modified) #?? or also or from above\n                .filter(db.Data.format.in_(KOBO_FORMATS))\n                .filter(calibre_db.common_filters())\n                .order_by(db.Books.id)\n                .order_by(ub.ArchivedBook.last_modified)\n                .join(ub.BookShelf, db.Books.id == ub.BookShelf.book_id)\n                .join(ub.Shelf)\n                .filter(ub.Shelf.user_id == current_user.id)\n                .filter(ub.Shelf.kobo_sync)\n                .distinct()\n        )\n    else:\n        if sqlalchemy_version2:\n            changed_entries = select(db.Books, ub.ArchivedBook.last_modified, ub.ArchivedBook.is_archived)\n        else:\n            changed_entries = calibre_db.session.query(db.Books,\n                                                       ub.ArchivedBook.last_modified,\n                                                       ub.ArchivedBook.is_archived)\n        changed_entries = (changed_entries\n                   .join(db.Data).outerjoin(ub.ArchivedBook, db.Books.id == ub.ArchivedBook.book_id)\n                   .join(ub.KoboSyncedBooks, ub.KoboSyncedBooks.book_id == db.Books.id, isouter=True)\n                   .filter(or_(ub.KoboSyncedBooks.user_id != current_user.id,\n                               ub.KoboSyncedBooks.book_id == None))\n                   .filter(calibre_db.common_filters())\n                   .filter(db.Data.format.in_(KOBO_FORMATS))\n                   .order_by(db.Books.last_modified)\n                   .order_by(db.Books.id)\n        )\n\n    #if sync_token.books_last_id > -1:\n    #    changed_entries = changed_entries.filter(db.Books.id > sync_token.books_last_id)\n\n    reading_states_in_new_entitlements = []\n    if sqlalchemy_version2:\n        books = calibre_db.session.execute(changed_entries.limit(SYNC_ITEM_LIMIT))\n    else:\n        books = changed_entries.limit(SYNC_ITEM_LIMIT)\n    for book in books:\n        add_synced_books(book.Books.id)\n        formats = [data.format for data in book.Books.data]\n        if not 'KEPUB' in formats and config.config_kepubifypath and 'EPUB' in formats:\n            helper.convert_book_format(book.Books.id, config.config_calibre_dir, 'EPUB', 'KEPUB', current_user.name)\n\n        kobo_reading_state = get_or_create_reading_state(book.Books.id)\n        entitlement = {\n            \"BookEntitlement\": create_book_entitlement(book.Books, archived=(book.is_archived == True)),\n            \"BookMetadata\": get_metadata(book.Books),\n        }\n\n        if kobo_reading_state.last_modified > sync_token.reading_state_last_modified:\n            entitlement[\"ReadingState\"] = get_kobo_reading_state_response(book.Books, kobo_reading_state)\n            new_reading_state_last_modified = max(new_reading_state_last_modified, kobo_reading_state.last_modified)\n            reading_states_in_new_entitlements.append(book.Books.id)\n\n        ts_created = book.Books.timestamp\n\n        try:\n            ts_created = max(ts_created, book.date_added)\n        except AttributeError:\n            pass\n\n        if ts_created > sync_token.books_last_created:\n            sync_results.append({\"NewEntitlement\": entitlement})\n        else:\n            sync_results.append({\"ChangedEntitlement\": entitlement})\n\n        new_books_last_modified = max(\n            book.Books.last_modified, new_books_last_modified\n        )\n        try:\n            new_books_last_modified = max(\n                new_books_last_modified, book.date_added\n            )\n        except AttributeError:\n            pass\n\n        new_books_last_created = max(ts_created, new_books_last_created)\n\n    if sqlalchemy_version2:\n        max_change = calibre_db.session.execute(changed_entries\n                                                .filter(ub.ArchivedBook.is_archived)\n                                                .order_by(func.datetime(ub.ArchivedBook.last_modified).desc()))\\\n            .columns(db.Books).first()\n    else:\n        max_change = changed_entries.from_self().filter(ub.ArchivedBook.is_archived) \\\n            .order_by(func.datetime(ub.ArchivedBook.last_modified).desc()).first()\n\n    max_change = max_change.last_modified if max_change else new_archived_last_modified\n\n    new_archived_last_modified = max(new_archived_last_modified, max_change)\n\n    # no. of books returned\n    if sqlalchemy_version2:\n        entries = calibre_db.session.execute(changed_entries).all()\n        book_count = len(entries)\n    else:\n        #entries = changed_entries.all()\n        book_count = changed_entries.count()\n    # last entry:\n    # sync_cont = entries[-1].Books.id or -1 if book_count else -1\n    log.debug(\"Remaining books to Sync: {}\".format(book_count))\n    # generate reading state data\n    changed_reading_states = ub.session.query(ub.KoboReadingState)\n\n    if only_kobo_shelves:\n        changed_reading_states = changed_reading_states.join(ub.BookShelf,\n                                                             ub.KoboReadingState.book_id == ub.BookShelf.book_id)\\\n            .join(ub.Shelf)\\\n            .filter(current_user.id == ub.Shelf.user_id)\\\n            .filter(ub.Shelf.kobo_sync,\n                    or_(\n                        func.datetime(ub.KoboReadingState.last_modified) > sync_token.reading_state_last_modified,\n                        func.datetime(ub.BookShelf.date_added) > sync_token.books_last_modified\n                    )).distinct()\n    else:\n        changed_reading_states = changed_reading_states.filter(\n            func.datetime(ub.KoboReadingState.last_modified) > sync_token.reading_state_last_modified)\n\n    changed_reading_states = changed_reading_states.filter(\n        and_(ub.KoboReadingState.user_id == current_user.id,\n             ub.KoboReadingState.book_id.notin_(reading_states_in_new_entitlements)))\n\n    for kobo_reading_state in changed_reading_states.all():\n        book = calibre_db.session.query(db.Books).filter(db.Books.id == kobo_reading_state.book_id).one_or_none()\n        if book:\n            sync_results.append({\n                \"ChangedReadingState\": {\n                    \"ReadingState\": get_kobo_reading_state_response(book, kobo_reading_state)\n                }\n            })\n            new_reading_state_last_modified = max(new_reading_state_last_modified, kobo_reading_state.last_modified)\n\n    sync_shelves(sync_token, sync_results, only_kobo_shelves)\n\n    sync_token.books_last_created = new_books_last_created\n    sync_token.books_last_modified = new_books_last_modified\n    sync_token.archive_last_modified = new_archived_last_modified\n    sync_token.reading_state_last_modified = new_reading_state_last_modified\n    # sync_token.books_last_id = books_last_id\n\n    return generate_sync_response(sync_token, sync_results, book_count)\n\n\ndef generate_sync_response(sync_token, sync_results, set_cont=False):\n    extra_headers = {}\n    if config.config_kobo_proxy:\n        # Merge in sync results from the official Kobo store.\n        try:\n            store_response = make_request_to_kobo_store(sync_token)\n\n            store_sync_results = store_response.json()\n            sync_results += store_sync_results\n            sync_token.merge_from_store_response(store_response)\n            extra_headers[\"x-kobo-sync\"] = store_response.headers.get(\"x-kobo-sync\")\n            extra_headers[\"x-kobo-sync-mode\"] = store_response.headers.get(\"x-kobo-sync-mode\")\n            extra_headers[\"x-kobo-recent-reads\"] = store_response.headers.get(\"x-kobo-recent-reads\")\n\n        except Exception as ex:\n            log.error(\"Failed to receive or parse response from Kobo's sync endpoint: {}\".format(ex))\n    if set_cont:\n        extra_headers[\"x-kobo-sync\"] = \"continue\"\n    sync_token.to_headers(extra_headers)\n\n    # log.debug(\"Kobo Sync Content: {}\".format(sync_results))\n    response = make_response(jsonify(sync_results), extra_headers)\n\n    return response\n\n\n@kobo.route(\"/v1/library/<book_uuid>/metadata\")\n@requires_kobo_auth\n@download_required\ndef HandleMetadataRequest(book_uuid):\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n    log.info(\"Kobo library metadata request received for book %s\" % book_uuid)\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book or not book.data:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    metadata = get_metadata(book)\n    return jsonify([metadata])\n\n\ndef get_download_url_for_book(book, book_format):\n    if not current_app.wsgi_app.is_proxied:\n        if ':' in request.host and not request.host.endswith(']'):\n            host = \"\".join(request.host.split(':')[:-1])\n        else:\n            host = request.host\n\n        return \"{url_scheme}://{url_base}:{url_port}/kobo/{auth_token}/download/{book_id}/{book_format}\".format(\n            url_scheme=request.scheme,\n            url_base=host,\n            url_port=config.config_external_port,\n            auth_token=get_auth_token(),\n            book_id=book.id,\n            book_format=book_format.lower()\n        )\n    return url_for(\n        \"kobo.download_book\",\n        auth_token=kobo_auth.get_auth_token(),\n        book_id=book.id,\n        book_format=book_format.lower(),\n        _external=True,\n    )\n\n\ndef create_book_entitlement(book, archived):\n    book_uuid = book.uuid\n    return {\n        \"Accessibility\": \"Full\",\n        \"ActivePeriod\": {\"From\": convert_to_kobo_timestamp_string(datetime.datetime.now())},\n        \"Created\": convert_to_kobo_timestamp_string(book.timestamp),\n        \"CrossRevisionId\": book_uuid,\n        \"Id\": book_uuid,\n        \"IsRemoved\": archived,\n        \"IsHiddenFromArchive\": False,\n        \"IsLocked\": False,\n        \"LastModified\": convert_to_kobo_timestamp_string(book.last_modified),\n        \"OriginCategory\": \"Imported\",\n        \"RevisionId\": book_uuid,\n        \"Status\": \"Active\",\n    }\n\n\ndef current_time():\n    return strftime(\"%Y-%m-%dT%H:%M:%SZ\", gmtime())\n\n\ndef get_description(book):\n    if not book.comments:\n        return None\n    return book.comments[0].text\n\n\n# TODO handle multiple authors\ndef get_author(book):\n    if not book.authors:\n        return {\"Contributors\": None}\n    if len(book.authors) > 1:\n        author_list = []\n        autor_roles = []\n        for author in book.authors:\n            autor_roles.append({\"Name\":author.name, \"Role\":\"Author\"})\n            author_list.append(author.name)\n        return {\"ContributorRoles\": autor_roles, \"Contributors\":author_list}\n    return {\"ContributorRoles\": [{\"Name\":book.authors[0].name, \"Role\":\"Author\"}], \"Contributors\": book.authors[0].name}\n\n\ndef get_publisher(book):\n    if not book.publishers:\n        return None\n    return book.publishers[0].name\n\n\ndef get_series(book):\n    if not book.series:\n        return None\n    return book.series[0].name\n\ndef get_seriesindex(book):\n    return book.series_index or 1\n\n\ndef get_metadata(book):\n    download_urls = []\n    kepub = [data for data in book.data if data.format == 'KEPUB']\n\n    for book_data in kepub if len(kepub) > 0 else book.data:\n        if book_data.format not in KOBO_FORMATS:\n            continue\n        for kobo_format in KOBO_FORMATS[book_data.format]:\n            # log.debug('Id: %s, Format: %s' % (book.id, kobo_format))\n            download_urls.append(\n                {\n                    \"Format\": kobo_format,\n                    \"Size\": book_data.uncompressed_size,\n                    \"Url\": get_download_url_for_book(book, book_data.format),\n                    # The Kobo forma accepts platforms: (Generic, Android)\n                    \"Platform\": \"Generic\",\n                    # \"DrmType\": \"None\", # Not required\n                }\n            )\n\n    book_uuid = book.uuid\n    metadata = {\n        \"Categories\": [\"00000000-0000-0000-0000-000000000001\", ],\n        # \"Contributors\": get_author(book),\n        \"CoverImageId\": book_uuid,\n        \"CrossRevisionId\": book_uuid,\n        \"CurrentDisplayPrice\": {\"CurrencyCode\": \"USD\", \"TotalAmount\": 0},\n        \"CurrentLoveDisplayPrice\": {\"TotalAmount\": 0},\n        \"Description\": get_description(book),\n        \"DownloadUrls\": download_urls,\n        \"EntitlementId\": book_uuid,\n        \"ExternalIds\": [],\n        \"Genre\": \"00000000-0000-0000-0000-000000000001\",\n        \"IsEligibleForKoboLove\": False,\n        \"IsInternetArchive\": False,\n        \"IsPreOrder\": False,\n        \"IsSocialEnabled\": True,\n        \"Language\": \"en\",\n        \"PhoneticPronunciations\": {},\n        # TODO: Fix book.pubdate to return a datetime object so that we can easily\n        # convert it to the format Kobo devices expect.\n        \"PublicationDate\": book.pubdate,\n        \"Publisher\": {\"Imprint\": \"\", \"Name\": get_publisher(book),},\n        \"RevisionId\": book_uuid,\n        \"Title\": book.title,\n        \"WorkId\": book_uuid,\n    }\n    metadata.update(get_author(book))\n\n    if get_series(book):\n        if sys.version_info < (3, 0):\n            name = get_series(book).encode(\"utf-8\")\n        else:\n            name = get_series(book)\n        metadata[\"Series\"] = {\n            \"Name\": get_series(book),\n            \"Number\": get_seriesindex(book),        # ToDo Check int() ?\n            \"NumberFloat\": float(get_seriesindex(book)),\n            # Get a deterministic id based on the series name.\n            \"Id\": uuid.uuid3(uuid.NAMESPACE_DNS, name),\n        }\n\n    return metadata\n\n\n@kobo.route(\"/v1/library/tags\", methods=[\"POST\", \"DELETE\"])\n@requires_kobo_auth\n# Creates a Shelf with the given items, and returns the shelf's uuid.\ndef HandleTagCreate():\n    # catch delete requests, otherwise the are handeld in the book delete handler\n    if request.method == \"DELETE\":\n        abort(405)\n    name, items = None, None\n    try:\n        shelf_request = request.json\n        name = shelf_request[\"Name\"]\n        items = shelf_request[\"Items\"]\n        if not name:\n            raise TypeError\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags request.\")\n        abort(400, description=\"Malformed tags POST request. Data has empty 'Name', missing 'Name' or 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.name == name, ub.Shelf.user_id ==\n                                              current_user.id).one_or_none()\n    if shelf and not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to create shelf.\")\n\n    if not shelf:\n        shelf = ub.Shelf(user_id=current_user.id, name=name, uuid=str(uuid.uuid4()))\n        ub.session.add(shelf)\n\n    items_unknown_to_calibre = add_items_to_shelf(items, shelf)\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to add unknown books to a collection. Silently ignoring items.\")\n    ub.session_commit()\n    return make_response(jsonify(str(shelf.uuid)), 201)\n\n\n@kobo.route(\"/v1/library/tags/<tag_id>\", methods=[\"DELETE\", \"PUT\"])\n@requires_kobo_auth\ndef HandleTagUpdate(tag_id):\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\"Received Kobo tag update request on a collection unknown to CalibreWeb\")\n        if config.config_kobo_proxy:\n            return redirect_or_proxy_request()\n        else:\n            abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    if request.method == \"DELETE\":\n        shelf_lib.delete_shelf_helper(shelf)\n    else:\n        name = None\n        try:\n            shelf_request = request.json\n            name = shelf_request[\"Name\"]\n        except (KeyError, TypeError):\n            log.debug(\"Received malformed v1/library/tags rename request.\")\n            abort(400, description=\"Malformed tags POST request. Data is missing 'Name' field\")\n\n        shelf.name = name\n        ub.session.merge(shelf)\n        ub.session_commit()\n    return make_response(' ', 200)\n\n\n# Adds items to the given shelf.\ndef add_items_to_shelf(items, shelf):\n    book_ids_already_in_shelf = set([book_shelf.book_id for book_shelf in shelf.books])\n    items_unknown_to_calibre = []\n    for item in items:\n        try:\n            if item[\"Type\"] != \"ProductRevisionTagItem\":\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book = calibre_db.get_book_by_uuid(item[\"RevisionId\"])\n            if not book:\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book_id = book.id\n            if book_id not in book_ids_already_in_shelf:\n                shelf.books.append(ub.BookShelf(book_id=book_id))\n        except KeyError:\n            items_unknown_to_calibre.append(item)\n    return items_unknown_to_calibre\n\n\n@kobo.route(\"/v1/library/tags/<tag_id>/items\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleTagAddItem(tag_id):\n    items = None\n    try:\n        tag_request = request.json\n        items = tag_request[\"Items\"]\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags/<tag_id>/items/delete request.\")\n        abort(400, description=\"Malformed tags POST request. Data is missing 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\"Received Kobo request on a collection unknown to CalibreWeb\")\n        abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    items_unknown_to_calibre = add_items_to_shelf(items, shelf)\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to add an unknown book to a collection. Silently ignoring item.\")\n\n    ub.session.merge(shelf)\n    ub.session_commit()\n    return make_response('', 201)\n\n\n@kobo.route(\"/v1/library/tags/<tag_id>/items/delete\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleTagRemoveItem(tag_id):\n    items = None\n    try:\n        tag_request = request.json\n        items = tag_request[\"Items\"]\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags/<tag_id>/items/delete request.\")\n        abort(400, description=\"Malformed tags POST request. Data is missing 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\n            \"Received a request to remove an item from a Collection unknown to CalibreWeb.\")\n        abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    items_unknown_to_calibre = []\n    for item in items:\n        try:\n            if item[\"Type\"] != \"ProductRevisionTagItem\":\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book = calibre_db.get_book_by_uuid(item[\"RevisionId\"])\n            if not book:\n                items_unknown_to_calibre.append(item)\n                continue\n\n            shelf.books.filter(ub.BookShelf.book_id == book.id).delete()\n        except KeyError:\n            items_unknown_to_calibre.append(item)\n    ub.session_commit()\n\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to remove an unknown book to a collecition. Silently ignoring item.\")\n\n    return make_response('', 200)\n\n\n# Add new, changed, or deleted shelves to the sync_results.\n# Note: Public shelves that aren't owned by the user aren't supported.\ndef sync_shelves(sync_token, sync_results, only_kobo_shelves=False):\n    new_tags_last_modified = sync_token.tags_last_modified\n\n    for shelf in ub.session.query(ub.ShelfArchive).filter(\n        func.datetime(ub.ShelfArchive.last_modified) > sync_token.tags_last_modified,\n        ub.ShelfArchive.user_id == current_user.id\n    ):\n        new_tags_last_modified = max(shelf.last_modified, new_tags_last_modified)\n        sync_results.append({\n            \"DeletedTag\": {\n                \"Tag\": {\n                    \"Id\": shelf.uuid,\n                    \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified)\n                }\n            }\n        })\n\n    extra_filters = []\n    if only_kobo_shelves:\n        for shelf in ub.session.query(ub.Shelf).filter(\n            func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n            ub.Shelf.user_id == current_user.id,\n            not ub.Shelf.kobo_sync\n        ):\n            sync_results.append({\n                \"DeletedTag\": {\n                    \"Tag\": {\n                        \"Id\": shelf.uuid,\n                        \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified)\n                    }\n                }\n            })\n        extra_filters.append(ub.Shelf.kobo_sync)\n\n    if sqlalchemy_version2:\n        shelflist = ub.session.execute(select(ub.Shelf).outerjoin(ub.BookShelf).filter(\n            or_(func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n                func.datetime(ub.BookShelf.date_added) > sync_token.tags_last_modified),\n            ub.Shelf.user_id == current_user.id,\n            *extra_filters\n        ).distinct().order_by(func.datetime(ub.Shelf.last_modified).asc())).columns(ub.Shelf)\n    else:\n        shelflist = ub.session.query(ub.Shelf).outerjoin(ub.BookShelf).filter(\n            or_(func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n                func.datetime(ub.BookShelf.date_added) > sync_token.tags_last_modified),\n            ub.Shelf.user_id == current_user.id,\n            *extra_filters\n        ).distinct().order_by(func.datetime(ub.Shelf.last_modified).asc())\n\n\n    for shelf in shelflist:\n        if not shelf_lib.check_shelf_view_permissions(shelf):\n            continue\n\n        new_tags_last_modified = max(shelf.last_modified, new_tags_last_modified)\n\n        tag = create_kobo_tag(shelf)\n        if not tag:\n            continue\n\n        if shelf.created > sync_token.tags_last_modified:\n            sync_results.append({\n                \"NewTag\": tag\n            })\n        else:\n            sync_results.append({\n                \"ChangedTag\": tag\n            })\n    sync_token.tags_last_modified = new_tags_last_modified\n    ub.session_commit()\n\n\n# Creates a Kobo \"Tag\" object from a ub.Shelf object\ndef create_kobo_tag(shelf):\n    tag = {\n        \"Created\": convert_to_kobo_timestamp_string(shelf.created),\n        \"Id\": shelf.uuid,\n        \"Items\": [],\n        \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified),\n        \"Name\": shelf.name,\n        \"Type\": \"UserTag\"\n    }\n    for book_shelf in shelf.books:\n        book = calibre_db.get_book(book_shelf.book_id)\n        if not book:\n            log.info(u\"Book (id: %s) in BookShelf (id: %s) not found in book database\",  book_shelf.book_id, shelf.id)\n            continue\n        tag[\"Items\"].append(\n            {\n                \"RevisionId\": book.uuid,\n                \"Type\": \"ProductRevisionTagItem\"\n            }\n        )\n    return {\"Tag\": tag}\n\n\n@kobo.route(\"/v1/library/<book_uuid>/state\", methods=[\"GET\", \"PUT\"])\n@requires_kobo_auth\ndef HandleStateRequest(book_uuid):\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book or not book.data:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    kobo_reading_state = get_or_create_reading_state(book.id)\n\n    if request.method == \"GET\":\n        return jsonify([get_kobo_reading_state_response(book, kobo_reading_state)])\n    else:\n        update_results_response = {\"EntitlementId\": book_uuid}\n\n        try:\n            request_data = request.json\n            request_reading_state = request_data[\"ReadingStates\"][0]\n\n            request_bookmark = request_reading_state[\"CurrentBookmark\"]\n            if request_bookmark:\n                current_bookmark = kobo_reading_state.current_bookmark\n                current_bookmark.progress_percent = request_bookmark[\"ProgressPercent\"]\n                current_bookmark.content_source_progress_percent = request_bookmark[\"ContentSourceProgressPercent\"]\n                location = request_bookmark[\"Location\"]\n                if location:\n                    current_bookmark.location_value = location[\"Value\"]\n                    current_bookmark.location_type = location[\"Type\"]\n                    current_bookmark.location_source = location[\"Source\"]\n                update_results_response[\"CurrentBookmarkResult\"] = {\"Result\": \"Success\"}\n\n            request_statistics = request_reading_state[\"Statistics\"]\n            if request_statistics:\n                statistics = kobo_reading_state.statistics\n                statistics.spent_reading_minutes = int(request_statistics[\"SpentReadingMinutes\"])\n                statistics.remaining_time_minutes = int(request_statistics[\"RemainingTimeMinutes\"])\n                update_results_response[\"StatisticsResult\"] = {\"Result\": \"Success\"}\n\n            request_status_info = request_reading_state[\"StatusInfo\"]\n            if request_status_info:\n                book_read = kobo_reading_state.book_read_link\n                new_book_read_status = get_ub_read_status(request_status_info[\"Status\"])\n                if new_book_read_status == ub.ReadBook.STATUS_IN_PROGRESS \\\n                    and new_book_read_status != book_read.read_status:\n                    book_read.times_started_reading += 1\n                    book_read.last_time_started_reading = datetime.datetime.utcnow()\n                book_read.read_status = new_book_read_status\n                update_results_response[\"StatusInfoResult\"] = {\"Result\": \"Success\"}\n        except (KeyError, TypeError, ValueError, StatementError):\n            log.debug(\"Received malformed v1/library/<book_uuid>/state request.\")\n            ub.session.rollback()\n            abort(400, description=\"Malformed request data is missing 'ReadingStates' key\")\n\n        ub.session.merge(kobo_reading_state)\n        ub.session_commit()\n        return jsonify({\n            \"RequestResult\": \"Success\",\n            \"UpdateResults\": [update_results_response],\n        })\n\n\ndef get_read_status_for_kobo(ub_book_read):\n    enum_to_string_map = {\n        None: \"ReadyToRead\",\n        ub.ReadBook.STATUS_UNREAD: \"ReadyToRead\",\n        ub.ReadBook.STATUS_FINISHED: \"Finished\",\n        ub.ReadBook.STATUS_IN_PROGRESS: \"Reading\",\n    }\n    return enum_to_string_map[ub_book_read.read_status]\n\n\ndef get_ub_read_status(kobo_read_status):\n    string_to_enum_map = {\n        None: None,\n        \"ReadyToRead\": ub.ReadBook.STATUS_UNREAD,\n        \"Finished\": ub.ReadBook.STATUS_FINISHED,\n        \"Reading\": ub.ReadBook.STATUS_IN_PROGRESS,\n    }\n    return string_to_enum_map[kobo_read_status]\n\ndef add_synced_books(book_id):\n    synced_book = ub.KoboSyncedBooks()\n    synced_book.user_id = current_user.id\n    synced_book.book_id = book_id\n    ub.session.add(synced_book)\n    try:\n        ub.session.commit()\n    except Exception:\n        ub.session.rollback()\n\n\ndef get_or_create_reading_state(book_id):\n    book_read = ub.session.query(ub.ReadBook).filter(ub.ReadBook.book_id == book_id,\n                                                          ub.ReadBook.user_id == current_user.id).one_or_none()\n    if not book_read:\n        book_read = ub.ReadBook(user_id=current_user.id, book_id=book_id)\n    if not book_read.kobo_reading_state:\n        kobo_reading_state = ub.KoboReadingState(user_id=book_read.user_id, book_id=book_id)\n        kobo_reading_state.current_bookmark = ub.KoboBookmark()\n        kobo_reading_state.statistics = ub.KoboStatistics()\n        book_read.kobo_reading_state = kobo_reading_state\n    ub.session.add(book_read)\n    ub.session_commit()\n    return book_read.kobo_reading_state\n\n\ndef get_kobo_reading_state_response(book, kobo_reading_state):\n    return {\n        \"EntitlementId\": book.uuid,\n        \"Created\": convert_to_kobo_timestamp_string(book.timestamp),\n        \"LastModified\": convert_to_kobo_timestamp_string(kobo_reading_state.last_modified),\n        # AFAICT PriorityTimestamp is always equal to LastModified.\n        \"PriorityTimestamp\": convert_to_kobo_timestamp_string(kobo_reading_state.priority_timestamp),\n        \"StatusInfo\": get_status_info_response(kobo_reading_state.book_read_link),\n        \"Statistics\": get_statistics_response(kobo_reading_state.statistics),\n        \"CurrentBookmark\": get_current_bookmark_response(kobo_reading_state.current_bookmark),\n    }\n\n\ndef get_status_info_response(book_read):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(book_read.last_modified),\n        \"Status\": get_read_status_for_kobo(book_read),\n        \"TimesStartedReading\": book_read.times_started_reading,\n    }\n    if book_read.last_time_started_reading:\n        resp[\"LastTimeStartedReading\"] = convert_to_kobo_timestamp_string(book_read.last_time_started_reading)\n    return resp\n\n\ndef get_statistics_response(statistics):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(statistics.last_modified),\n    }\n    if statistics.spent_reading_minutes:\n        resp[\"SpentReadingMinutes\"] = statistics.spent_reading_minutes\n    if statistics.remaining_time_minutes:\n        resp[\"RemainingTimeMinutes\"] = statistics.remaining_time_minutes\n    return resp\n\n\ndef get_current_bookmark_response(current_bookmark):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(current_bookmark.last_modified),\n    }\n    if current_bookmark.progress_percent:\n        resp[\"ProgressPercent\"] = current_bookmark.progress_percent\n    if current_bookmark.content_source_progress_percent:\n        resp[\"ContentSourceProgressPercent\"] = current_bookmark.content_source_progress_percent\n    if current_bookmark.location_value:\n        resp[\"Location\"] = {\n            \"Value\": current_bookmark.location_value,\n            \"Type\": current_bookmark.location_type,\n            \"Source\": current_bookmark.location_source,\n        }\n    return resp\n\n@kobo.route(\"/<book_uuid>/<width>/<height>/<isGreyscale>/image.jpg\", defaults={'Quality': \"\"})\n@kobo.route(\"/<book_uuid>/<width>/<height>/<Quality>/<isGreyscale>/image.jpg\")\n@requires_kobo_auth\ndef HandleCoverImageRequest(book_uuid, width, height,Quality, isGreyscale):\n    book_cover = helper.get_book_cover_with_uuid(\n        book_uuid, use_generic_cover_on_failure=False\n    )\n    if not book_cover:\n        if config.config_kobo_proxy:\n            log.debug(\"Cover for unknown book: %s proxied to kobo\" % book_uuid)\n            return redirect(KOBO_IMAGEHOST_URL +\n                            \"/{book_uuid}/{width}/{height}/false/image.jpg\".format(book_uuid=book_uuid,\n                                                                                   width=width,\n                                                                                   height=height), 307)\n        else:\n            log.debug(\"Cover for unknown book: %s requested\" % book_uuid)\n            # additional proxy request make no sense, -> direct return\n            return make_response(jsonify({}))\n    log.debug(\"Cover request received for book %s\" % book_uuid)\n    return book_cover\n\n\n@kobo.route(\"\")\ndef TopLevelEndpoint():\n    return make_response(jsonify({}))\n\n\n@kobo.route(\"/v1/library/<book_uuid>\", methods=[\"DELETE\"])\n@requires_kobo_auth\ndef HandleBookDeletionRequest(book_uuid):\n    log.info(\"Kobo book deletion request received for book %s\" % book_uuid)\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    book_id = book.id\n    archived_book = (\n        ub.session.query(ub.ArchivedBook)\n        .filter(ub.ArchivedBook.book_id == book_id)\n        .first()\n    )\n    if not archived_book:\n        archived_book = ub.ArchivedBook(user_id=current_user.id, book_id=book_id)\n    archived_book.is_archived = True\n    archived_book.last_modified = datetime.datetime.utcnow()\n\n    ub.session.merge(archived_book)\n    ub.session_commit()\n    return (\"\", 204)\n\n\n# TODO: Implement the following routes\n@kobo.route(\"/v1/library/<dummy>\", methods=[\"DELETE\", \"GET\"])\ndef HandleUnimplementedRequest(dummy=None):\n    log.debug(\"Unimplemented Library Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\n# TODO: Implement the following routes\n@kobo.route(\"/v1/user/loyalty/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/profile\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/wishlist\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/recommendations\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/analytics/<dummy>\", methods=[\"GET\", \"POST\"])\ndef HandleUserRequest(dummy=None):\n    log.debug(\"Unimplemented User Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\n@kobo.route(\"/v1/products/<dummy>/prices\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/recommendations\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/nextread\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/reviews\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/external/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/series/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/dailydeal\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products\", methods=[\"GET\", \"POST\"])\ndef HandleProductsRequest(dummy=None):\n    log.debug(\"Unimplemented Products Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\ndef make_calibre_web_auth_response():\n    # As described in kobo_auth.py, CalibreWeb doesn't make use practical use of this auth/device API call for\n    # authentation (nor for authorization). We return a dummy response just to keep the device happy.\n    content = request.get_json()\n    AccessToken = base64.b64encode(os.urandom(24)).decode('utf-8')\n    RefreshToken = base64.b64encode(os.urandom(24)).decode('utf-8')\n    return  make_response(\n        jsonify(\n            {\n                \"AccessToken\": AccessToken,\n                \"RefreshToken\": RefreshToken,\n                \"TokenType\": \"Bearer\",\n                \"TrackingId\": str(uuid.uuid4()),\n                \"UserKey\": content['UserKey'],\n            }\n        )\n    )\n\n\n@kobo.route(\"/v1/auth/device\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleAuthRequest():\n    log.debug('Kobo Auth request')\n    if config.config_kobo_proxy:\n        try:\n            return redirect_or_proxy_request()\n        except Exception:\n            log.error(\"Failed to receive or parse response from Kobo's auth endpoint. Falling back to un-proxied mode.\")\n    return make_calibre_web_auth_response()\n\n\n@kobo.route(\"/v1/initialization\")\n@requires_kobo_auth\ndef HandleInitRequest():\n    log.info('Init')\n\n    kobo_resources = None\n    if config.config_kobo_proxy:\n        try:\n            store_response = make_request_to_kobo_store()\n            store_response_json = store_response.json()\n            if \"Resources\" in store_response_json:\n                kobo_resources = store_response_json[\"Resources\"]\n        except Exception:\n            log.error(\"Failed to receive or parse response from Kobo's init endpoint. Falling back to un-proxied mode.\")\n    if not kobo_resources:\n        kobo_resources = NATIVE_KOBO_RESOURCES()\n\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n        if ':' in request.host and not request.host.endswith(']'):\n            host = \"\".join(request.host.split(':')[:-1])\n        else:\n            host = request.host\n        calibre_web_url = \"{url_scheme}://{url_base}:{url_port}\".format(\n            url_scheme=request.scheme,\n            url_base=host,\n            url_port=config.config_external_port\n        )\n        log.debug('Kobo: Received unproxied request, changed request url to %s', calibre_web_url)\n        kobo_resources[\"image_host\"] = calibre_web_url\n        kobo_resources[\"image_url_quality_template\"] = unquote(calibre_web_url +\n                                                               url_for(\"kobo.HandleCoverImageRequest\",\n                                                                       auth_token=kobo_auth.get_auth_token(),\n                                                                       book_uuid=\"{ImageId}\",\n                                                                       width=\"{width}\",\n                                                                       height=\"{height}\",\n                                                                       Quality='{Quality}',\n                                                                       isGreyscale='isGreyscale'))\n        kobo_resources[\"image_url_template\"] = unquote(calibre_web_url +\n                                                       url_for(\"kobo.HandleCoverImageRequest\",\n                                                               auth_token=kobo_auth.get_auth_token(),\n                                                               book_uuid=\"{ImageId}\",\n                                                               width=\"{width}\",\n                                                               height=\"{height}\",\n                                                               isGreyscale='false'))\n    else:\n        kobo_resources[\"image_host\"] = url_for(\"web.index\", _external=True).strip(\"/\")\n        kobo_resources[\"image_url_quality_template\"] = unquote(url_for(\"kobo.HandleCoverImageRequest\",\n                                                                       auth_token=kobo_auth.get_auth_token(),\n                                                                       book_uuid=\"{ImageId}\",\n                                                                       width=\"{width}\",\n                                                                       height=\"{height}\",\n                                                                       Quality='{Quality}',\n                                                                       isGreyscale='isGreyscale',\n                                                                       _external=True))\n        kobo_resources[\"image_url_template\"] = unquote(url_for(\"kobo.HandleCoverImageRequest\",\n                                                               auth_token=kobo_auth.get_auth_token(),\n                                                               book_uuid=\"{ImageId}\",\n                                                               width=\"{width}\",\n                                                               height=\"{height}\",\n                                                               isGreyscale='false',\n                                                               _external=True))\n\n    response = make_response(jsonify({\"Resources\": kobo_resources}))\n    response.headers[\"x-kobo-apitoken\"] = \"e30=\"\n\n    return response\n\n\n@kobo.route(\"/download/<book_id>/<book_format>\")\n@requires_kobo_auth\n@download_required\ndef download_book(book_id, book_format):\n    return get_download_link(book_id, book_format, \"kobo\")\n\n\ndef NATIVE_KOBO_RESOURCES():\n    return {\n        \"account_page\": \"https://secure.kobobooks.com/profile\",\n        \"account_page_rakuten\": \"https://my.rakuten.co.jp/\",\n        \"add_entitlement\": \"https://storeapi.kobo.com/v1/library/{RevisionIds}\",\n        \"affiliaterequest\": \"https://storeapi.kobo.com/v1/affiliate\",\n        \"audiobook_subscription_orange_deal_inclusion_url\": \"https://authorize.kobo.com/inclusion\",\n        \"authorproduct_recommendations\": \"https://storeapi.kobo.com/v1/products/books/authors/recommendations\",\n        \"autocomplete\": \"https://storeapi.kobo.com/v1/products/autocomplete\",\n        \"blackstone_header\": {\"key\": \"x-amz-request-payer\", \"value\": \"requester\"},\n        \"book\": \"https://storeapi.kobo.com/v1/products/books/{ProductId}\",\n        \"book_detail_page\": \"https://store.kobobooks.com/{culture}/ebook/{slug}\",\n        \"book_detail_page_rakuten\": \"https://books.rakuten.co.jp/rk/{crossrevisionid}\",\n        \"book_landing_page\": \"https://store.kobobooks.com/ebooks\",\n        \"book_subscription\": \"https://storeapi.kobo.com/v1/products/books/subscriptions\",\n        \"categories\": \"https://storeapi.kobo.com/v1/categories\",\n        \"categories_page\": \"https://store.kobobooks.com/ebooks/categories\",\n        \"category\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}\",\n        \"category_featured_lists\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}/featured\",\n        \"category_products\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}/products\",\n        \"checkout_borrowed_book\": \"https://storeapi.kobo.com/v1/library/borrow\",\n        \"configuration_data\": \"https://storeapi.kobo.com/v1/configuration\",\n        \"content_access_book\": \"https://storeapi.kobo.com/v1/products/books/{ProductId}/access\",\n        \"customer_care_live_chat\": \"https://v2.zopim.com/widget/livechat.html?key=Y6gwUmnu4OATxN3Tli4Av9bYN319BTdO\",\n        \"daily_deal\": \"https://storeapi.kobo.com/v1/products/dailydeal\",\n        \"deals\": \"https://storeapi.kobo.com/v1/deals\",\n        \"delete_entitlement\": \"https://storeapi.kobo.com/v1/library/{Ids}\",\n        \"delete_tag\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}\",\n        \"delete_tag_items\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}/items/delete\",\n        \"device_auth\": \"https://storeapi.kobo.com/v1/auth/device\",\n        \"device_refresh\": \"https://storeapi.kobo.com/v1/auth/refresh\",\n        \"dictionary_host\": \"https://kbdownload1-a.akamaihd.net\",\n        \"discovery_host\": \"https://discovery.kobobooks.com\",\n        \"eula_page\": \"https://www.kobo.com/termsofuse?style=onestore\",\n        \"exchange_auth\": \"https://storeapi.kobo.com/v1/auth/exchange\",\n        \"external_book\": \"https://storeapi.kobo.com/v1/products/books/external/{Ids}\",\n        \"facebook_sso_page\": \"https://authorize.kobo.com/signin/provider/Facebook/login?returnUrl=http://store.kobobooks.com/\",\n        \"featured_list\": \"https://storeapi.kobo.com/v1/products/featured/{FeaturedListId}\",\n        \"featured_lists\": \"https://storeapi.kobo.com/v1/products/featured\",\n        \"free_books_page\": {\n            \"EN\": \"https://www.kobo.com/{region}/{language}/p/free-ebooks\",\n            \"FR\": \"https://www.kobo.com/{region}/{language}/p/livres-gratuits\",\n            \"IT\": \"https://www.kobo.com/{region}/{language}/p/libri-gratuiti\",\n            \"NL\": \"https://www.kobo.com/{region}/{language}/List/bekijk-het-overzicht-van-gratis-ebooks/QpkkVWnUw8sxmgjSlCbJRg\",\n            \"PT\": \"https://www.kobo.com/{region}/{language}/p/livros-gratis\",\n        },\n        \"fte_feedback\": \"https://storeapi.kobo.com/v1/products/ftefeedback\",\n        \"get_tests_request\": \"https://storeapi.kobo.com/v1/analytics/gettests\",\n        \"giftcard_epd_redeem_url\": \"https://www.kobo.com/{storefront}/{language}/redeem-ereader\",\n        \"giftcard_redeem_url\": \"https://www.kobo.com/{storefront}/{language}/redeem\",\n        \"help_page\": \"https://www.kobo.com/help\",\n        \"kobo_audiobooks_enabled\": \"False\",\n        \"kobo_audiobooks_orange_deal_enabled\": \"False\",\n        \"kobo_audiobooks_subscriptions_enabled\": \"False\",\n        \"kobo_nativeborrow_enabled\": \"True\",\n        \"kobo_onestorelibrary_enabled\": \"False\",\n        \"kobo_redeem_enabled\": \"True\",\n        \"kobo_shelfie_enabled\": \"False\",\n        \"kobo_subscriptions_enabled\": \"False\",\n        \"kobo_superpoints_enabled\": \"False\",\n        \"kobo_wishlist_enabled\": \"True\",\n        \"library_book\": \"https://storeapi.kobo.com/v1/user/library/books/{LibraryItemId}\",\n        \"library_items\": \"https://storeapi.kobo.com/v1/user/library\",\n        \"library_metadata\": \"https://storeapi.kobo.com/v1/library/{Ids}/metadata\",\n        \"library_prices\": \"https://storeapi.kobo.com/v1/user/library/previews/prices\",\n        \"library_stack\": \"https://storeapi.kobo.com/v1/user/library/stacks/{LibraryItemId}\",\n        \"library_sync\": \"https://storeapi.kobo.com/v1/library/sync\",\n        \"love_dashboard_page\": \"https://store.kobobooks.com/{culture}/kobosuperpoints\",\n        \"love_points_redemption_page\": \"https://store.kobobooks.com/{culture}/KoboSuperPointsRedemption?productId={ProductId}\",\n        \"magazine_landing_page\": \"https://store.kobobooks.com/emagazines\",\n        \"notifications_registration_issue\": \"https://storeapi.kobo.com/v1/notifications/registration\",\n        \"oauth_host\": \"https://oauth.kobo.com\",\n        \"overdrive_account\": \"https://auth.overdrive.com/account\",\n        \"overdrive_library\": \"https://{libraryKey}.auth.overdrive.com/library\",\n        \"overdrive_library_finder_host\": \"https://libraryfinder.api.overdrive.com\",\n        \"overdrive_thunder_host\": \"https://thunder.api.overdrive.com\",\n        \"password_retrieval_page\": \"https://www.kobobooks.com/passwordretrieval.html\",\n        \"post_analytics_event\": \"https://storeapi.kobo.com/v1/analytics/event\",\n        \"privacy_page\": \"https://www.kobo.com/privacypolicy?style=onestore\",\n        \"product_nextread\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/nextread\",\n        \"product_prices\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/prices\",\n        \"product_recommendations\": \"https://storeapi.kobo.com/v1/products/{ProductId}/recommendations\",\n        \"product_reviews\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/reviews\",\n        \"products\": \"https://storeapi.kobo.com/v1/products\",\n        \"provider_external_sign_in_page\": \"https://authorize.kobo.com/ExternalSignIn/{providerName}?returnUrl=http://store.kobobooks.com/\",\n        \"purchase_buy\": \"https://www.kobo.com/checkout/createpurchase/\",\n        \"purchase_buy_templated\": \"https://www.kobo.com/{culture}/checkout/createpurchase/{ProductId}\",\n        \"quickbuy_checkout\": \"https://storeapi.kobo.com/v1/store/quickbuy/{PurchaseId}/checkout\",\n        \"quickbuy_create\": \"https://storeapi.kobo.com/v1/store/quickbuy/purchase\",\n        \"rating\": \"https://storeapi.kobo.com/v1/products/{ProductId}/rating/{Rating}\",\n        \"reading_state\": \"https://storeapi.kobo.com/v1/library/{Ids}/state\",\n        \"redeem_interstitial_page\": \"https://store.kobobooks.com\",\n        \"registration_page\": \"https://authorize.kobo.com/signup?returnUrl=http://store.kobobooks.com/\",\n        \"related_items\": \"https://storeapi.kobo.com/v1/products/{Id}/related\",\n        \"remaining_book_series\": \"https://storeapi.kobo.com/v1/products/books/series/{SeriesId}\",\n        \"rename_tag\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}\",\n        \"review\": \"https://storeapi.kobo.com/v1/products/reviews/{ReviewId}\",\n        \"review_sentiment\": \"https://storeapi.kobo.com/v1/products/reviews/{ReviewId}/sentiment/{Sentiment}\",\n        \"shelfie_recommendations\": \"https://storeapi.kobo.com/v1/user/recommendations/shelfie\",\n        \"sign_in_page\": \"https://authorize.kobo.com/signin?returnUrl=http://store.kobobooks.com/\",\n        \"social_authorization_host\": \"https://social.kobobooks.com:8443\",\n        \"social_host\": \"https://social.kobobooks.com\",\n        \"stacks_host_productId\": \"https://store.kobobooks.com/collections/byproductid/\",\n        \"store_home\": \"www.kobo.com/{region}/{language}\",\n        \"store_host\": \"store.kobobooks.com\",\n        \"store_newreleases\": \"https://store.kobobooks.com/{culture}/List/new-releases/961XUjtsU0qxkFItWOutGA\",\n        \"store_search\": \"https://store.kobobooks.com/{culture}/Search?Query={query}\",\n        \"store_top50\": \"https://store.kobobooks.com/{culture}/ebooks/Top\",\n        \"tag_items\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}/Items\",\n        \"tags\": \"https://storeapi.kobo.com/v1/library/tags\",\n        \"taste_profile\": \"https://storeapi.kobo.com/v1/products/tasteprofile\",\n        \"update_accessibility_to_preview\": \"https://storeapi.kobo.com/v1/library/{EntitlementIds}/preview\",\n        \"use_one_store\": \"False\",\n        \"user_loyalty_benefits\": \"https://storeapi.kobo.com/v1/user/loyalty/benefits\",\n        \"user_platform\": \"https://storeapi.kobo.com/v1/user/platform\",\n        \"user_profile\": \"https://storeapi.kobo.com/v1/user/profile\",\n        \"user_ratings\": \"https://storeapi.kobo.com/v1/user/ratings\",\n        \"user_recommendations\": \"https://storeapi.kobo.com/v1/user/recommendations\",\n        \"user_reviews\": \"https://storeapi.kobo.com/v1/user/reviews\",\n        \"user_wishlist\": \"https://storeapi.kobo.com/v1/user/wishlist\",\n        \"userguide_host\": \"https://kbdownload1-a.akamaihd.net\",\n        \"wishlist_page\": \"https://store.kobobooks.com/{region}/{language}/account/wishlist\",\n    }\n", "/**\n * Created by SpeedProg on 05.04.2015.\n */\n/* global Bloodhound, language, Modernizr, tinymce, getPath */\n\nif ($(\"#description\").length) {\n    tinymce.init({\n        selector: \"#description\",\n        branding: false,\n        menubar: \"edit view format\",\n        language: language\n    });\n}\n\nif ($(\".tiny_editor\").length) {\n    tinymce.init({\n        selector: \".tiny_editor\",\n        branding: false,\n        menubar: \"edit view format\",\n        language: language\n    });\n}\n\n$(\".datepicker\").datepicker({\n    format: \"yyyy-mm-dd\",\n    language: language\n}).on(\"change\", function () {\n    // Show localized date over top of the standard YYYY-MM-DD date\n    var pubDate;\n    var results = /(\\d{4})[-\\/\\\\](\\d{1,2})[-\\/\\\\](\\d{1,2})/.exec(this.value); // YYYY-MM-DD\n    if (results) {\n        pubDate = new Date(results[1], parseInt(results[2], 10) - 1, results[3]) || new Date(this.value);\n        $(this).next('input')\n            .val(pubDate.toLocaleDateString(language))\n            .removeClass(\"hidden\");\n    }\n}).trigger(\"change\");\n\n$(\".datepicker_delete\").click(function() {\n    var inputs = $(this).parent().siblings('input');\n    $(inputs[0]).data('datepicker').clearDates();\n    $(inputs[1]).addClass('hidden');\n});\n\n\n/*\nTakes a prefix, query typeahead callback, Bloodhound typeahead adapter\n and returns the completions it gets from the bloodhound engine prefixed.\n */\nfunction prefixedSource(prefix, query, cb, bhAdapter) {\n    bhAdapter(query, function(retArray) {\n        var matches = [];\n        for (var i = 0; i < retArray.length; i++) {\n            var obj = {name : prefix + retArray[i].name};\n            matches.push(obj);\n        }\n        cb(matches);\n    });\n}\n\nvar authors = new Bloodhound({\n    name: \"authors\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    remote: {\n        url: getPath() + \"/get_authors_json?q=%QUERY\"\n    }\n});\n\nvar series = new Bloodhound({\n    name: \"series\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        return [query];\n    },\n    remote: {\n        url: getPath() + \"/get_series_json?q=\",\n        replace: function replace(url, query) {\n            return url + encodeURIComponent(query);\n        }\n    }\n});\n\n\nvar tags = new Bloodhound({\n    name: \"tags\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        var tokens = query.split(\",\");\n        tokens = [tokens[tokens.length - 1].trim()];\n        return tokens;\n    },\n    remote: {\n        url: getPath() + \"/get_tags_json?q=%QUERY\"\n    }\n});\n\nvar languages = new Bloodhound({\n    name: \"languages\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        return [query];\n    },\n    remote: {\n        url: getPath() + \"/get_languages_json?q=\",\n        replace: function replace(url, query) {\n            return url + encodeURIComponent(query);\n        }\n    }\n});\n\nvar publishers = new Bloodhound({\n    name: \"publisher\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    remote: {\n        url: getPath() + \"/get_publishers_json?q=%QUERY\"\n    }\n});\n\nfunction sourceSplit(query, cb, split, source) {\n    var bhAdapter = source.ttAdapter();\n\n    var tokens = query.split(split);\n    var currentSource = tokens[tokens.length - 1].trim();\n\n    tokens.splice(tokens.length - 1, 1); // remove last element\n    var prefix = \"\";\n    var newSplit;\n    if (split === \"&\") {\n        newSplit = \" \" + split + \" \";\n    } else {\n        newSplit = split + \" \";\n    }\n    for (var i = 0; i < tokens.length; i++) {\n        prefix += tokens[i].trim() + newSplit;\n    }\n    prefixedSource(prefix, currentSource, cb, bhAdapter);\n}\n\nvar promiseAuthors = authors.initialize();\npromiseAuthors.done(function() {\n    $(\"#bookAuthor\").typeahead(\n        {\n            highlight: true, minLength: 1,\n            hint: true\n        }, {\n            name: \"authors\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \"&\", authors); //sourceSplit //(\"&\")\n            }\n        }\n    );\n});\n\nvar promiseSeries = series.initialize();\npromiseSeries.done(function() {\n    $(\"#series\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"series\",\n            displayKey: \"name\",\n            source: series.ttAdapter()\n        }\n    );\n});\n\nvar promiseTags = tags.initialize();\npromiseTags.done(function() {\n    $(\"#tags\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"tags\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \",\", tags);\n            }\n        }\n    );\n});\n\nvar promiseLanguages = languages.initialize();\npromiseLanguages.done(function() {\n    $(\"#languages\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"languages\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \",\", languages); //(\",\")\n            }\n        }\n    );\n});\n\nvar promisePublishers = publishers.initialize();\npromisePublishers.done(function() {\n    $(\"#publisher\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"publishers\",\n            displayKey: \"name\",\n            source: publishers.ttAdapter()\n        }\n    );\n});\n\n$(\"#search\").on(\"change input.typeahead:selected\", function(event) {\n    if (event.target.type === \"search\" && event.target.tagName === \"INPUT\") {\n        return;\n    }\n    var form = $(\"form\").serialize();\n    $.getJSON( getPath() + \"/get_matching_tags\", form, function( data ) {\n        $(\".tags_click\").each(function() {\n            if ($.inArray(parseInt($(this).val(), 10), data.tags) === -1) {\n                if (!$(this).prop(\"selected\")) {\n                    $(this).prop(\"disabled\", true);\n                }\n            } else {\n                $(this).prop(\"disabled\", false);\n            }\n        });\n        $(\"#include_tag option:selected\").each(function () {\n            $(\"#exclude_tag\").find(\"[value=\" + $(this).val() + \"]\").prop(\"disabled\", true);\n        });\n        $(\"#include_tag\").selectpicker(\"refresh\");\n        $(\"#exclude_tag\").selectpicker(\"refresh\");\n    });\n});\n\n$(\"#btn-upload-format\").on(\"change\", function () {\n    var filename = $(this).val();\n    if (filename.substring(3, 11) === \"fakepath\") {\n        filename = filename.substring(12);\n    } // Remove c:\\fake at beginning from localhost chrome\n    $(\"#upload-format\").html(filename);\n});\n\n$(\"#btn-upload-cover\").on(\"change\", function () {\n    var filename = $(this).val();\n    if (filename.substring(3, 11) === \"fakepath\") {\n        filename = filename.substring(12);\n    } // Remove c:\\fake at beginning from localhost chrome\n    $(\"#upload-cover\").html(filename);\n});\n\n$(\"#xchange\").click(function () {\n    this.blur();\n    var title = $(\"#book_title\").val();\n    $(\"#book_title\").val($(\"#bookAuthor\").val());\n    $(\"#bookAuthor\").val(title);\n});\n\n", "/* This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n *    Copyright (C) 2012-2019  mutschler, janeczku, jkrehm, OzzieIsaacs\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nfunction getPath() {\n    var jsFileLocation = $(\"script[src*=jquery]\").attr(\"src\");  // the js file path\n    return jsFileLocation.substr(0, jsFileLocation.search(\"/static/js/libs/jquery.min.js\"));  // the js folder path\n}\n\nfunction elementSorter(a, b) {\n    a = +a.slice(0, -2);\n    b = +b.slice(0, -2);\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n}\n\n// Generic control/related handler to show/hide fields based on a checkbox' value\n// e.g.\n//  <input type=\"checkbox\" data-control=\"stuff-to-show\">\n//  <div data-related=\"stuff-to-show\">...</div>\n$(document).on(\"change\", \"input[type=\\\"checkbox\\\"][data-control]\", function () {\n    var $this = $(this);\n    var name = $this.data(\"control\");\n    var showOrHide = $this.prop(\"checked\");\n\n    $(\"[data-related=\\\"\" + name + \"\\\"]\").each(function () {\n        $(this).toggle(showOrHide);\n    });\n});\n\n// Generic control/related handler to show/hide fields based on a select' value\n$(document).on(\"change\", \"select[data-control]\", function() {\n    var $this = $(this);\n    var name = $this.data(\"control\");\n    var showOrHide = parseInt($this.val(), 10);\n    // var showOrHideLast = $(\"#\" + name + \" option:last\").val()\n    for (var i = 0; i < $(this)[0].length; i++) {\n        var element = parseInt($(this)[0][i].value, 10);\n        if (element === showOrHide) {\n            $(\"[data-related^=\" + name + \"][data-related*=-\" + element + \"]\").show();\n        } else {\n            $(\"[data-related^=\" + name + \"][data-related*=-\" + element + \"]\").hide();\n        }\n    }\n});\n\n// Generic control/related handler to show/hide fields based on a select' value\n// this one is made to show all values if select value is not 0\n$(document).on(\"change\", \"select[data-controlall]\", function() {\n    var $this = $(this);\n    var name = $this.data(\"controlall\");\n    var showOrHide = parseInt($this.val(), 10);\n    if (showOrHide) {\n        $(\"[data-related=\" + name + \"]\").show();\n    } else {\n        $(\"[data-related=\" + name + \"]\").hide();\n    }\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind(\"dragenter dragover\", function () {\n    if($(\"#btn-upload\").length && !$('body').hasClass('shelforder')) {\n        $(this).css('background', '#e6e6e6');\n    }\n    return false;\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind(\"dragleave\", function () {\n    if($(\"#btn-upload\").length && !$('body').hasClass('shelforder')) {\n        $(this).css('background', '');\n    }\n    return false;\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind('drop', function (e) {\n    e.preventDefault()\n    e.stopPropagation();\n    if($(\"#btn-upload\").length) {\n        var files = e.originalEvent.dataTransfer.files;\n        var test = $(\"#btn-upload\")[0].accept;\n        $(this).css('background', '');\n        const dt = new DataTransfer();\n        jQuery.each(files, function (index, item) {\n            if (test.indexOf(item.name.substr(item.name.lastIndexOf('.'))) !== -1) {\n                dt.items.add(item);\n            }\n        });\n        if (dt.files.length) {\n            $(\"#btn-upload\")[0].files = dt.files;\n            $(\"#form-upload\").submit();\n        }\n    }\n});\n\n$(\"#btn-upload\").change(function() {\n    $(\"#form-upload\").submit();\n});\n\n$(document).ready(function() {\n  var inp = $('#query').first()\n  if (inp.length) {\n    var val = inp.val()\n    if (val.length) {\n      inp.val('').blur().focus().val(val)\n    }\n  }\n});\n\n$(\".session\").click(function() {\n    window.sessionStorage.setItem(\"back\", window.location.pathname);\n});\n\n$(\"#back\").click(function() {\n   var loc = sessionStorage.getItem(\"back\");\n   if (!loc) {\n       loc = $(this).data(\"back\");\n   }\n   sessionStorage.removeItem(\"back\");\n   window.location.href = loc;\n\n});\n\nfunction confirmDialog(id, dialogid, dataValue, yesFn, noFn) {\n    var $confirm = $(\"#\" + dialogid);\n    $(\"#btnConfirmYes-\"+ dialogid).off('click').click(function () {\n        yesFn(dataValue);\n        $confirm.modal(\"hide\");\n    });\n    $(\"#btnConfirmNo-\"+ dialogid).off('click').click(function () {\n        if (typeof noFn !== 'undefined') {\n            noFn(dataValue);\n        }\n        $confirm.modal(\"hide\");\n    });\n    $.ajax({\n        method:\"post\",\n        dataType: \"json\",\n        url: getPath() + \"/ajax/loaddialogtexts/\" + id,\n        success: function success(data) {\n            $(\"#header-\"+ dialogid).html(data.header);\n            $(\"#text-\"+ dialogid).html(data.main);\n        }\n    });\n    $confirm.modal('show');\n}\n\n$(\"#delete_confirm\").click(function() {\n    //get data-id attribute of the clicked element\n    var deleteId = $(this).data(\"delete-id\");\n    var bookFormat = $(this).data(\"delete-format\");\n    var ajaxResponse = $(this).data(\"ajax\");\n    if (bookFormat) {\n        window.location.href = getPath() + \"/delete/\" + deleteId + \"/\" + bookFormat;\n    } else {\n        if (ajaxResponse) {\n            path = getPath() + \"/ajax/delete/\" + deleteId;\n            $.ajax({\n                method:\"get\",\n                url: path,\n                timeout: 900,\n                success:function(data) {\n                    data.forEach(function(item) {\n                        if (!jQuery.isEmptyObject(item)) {\n                            if (item.format != \"\") {\n                                $(\"button[data-delete-format='\"+item.format+\"']\").addClass('hidden');\n                            }\n                            $( \".navbar\" ).after( '<div class=\"row-fluid text-center\" >' +\n                                '<div id=\"flash_'+item.type+'\" class=\"alert alert-'+item.type+'\">'+item.message+'</div>' +\n                                '</div>');\n\n                        }\n                    });\n                    $(\"#books-table\").bootstrapTable(\"refresh\");\n                }\n            });\n        } else {\n            window.location.href = getPath() + \"/delete/\" + deleteId;\n\n        }\n    }\n\n});\n\n//triggered when modal is about to be shown\n$(\"#deleteModal\").on(\"show.bs.modal\", function(e) {\n    //get data-id attribute of the clicked element and store in button\n    var bookId = $(e.relatedTarget).data(\"delete-id\");\n    var bookfomat = $(e.relatedTarget).data(\"delete-format\");\n    if (bookfomat) {\n        $(\"#book_format\").removeClass('hidden');\n        $(\"#book_complete\").addClass('hidden');\n    } else {\n        $(\"#book_complete\").removeClass('hidden');\n        $(\"#book_format\").addClass('hidden');\n    }\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"delete-id\", bookId);\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"delete-format\", bookfomat);\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"ajax\", $(e.relatedTarget).data(\"ajax\"));\n});\n\n$(function() {\n    var updateTimerID;\n    var updateText;\n\n    // Allow ajax prefilters to be added/removed dynamically\n    // eslint-disable-next-line new-cap\n    var preFilters = $.Callbacks();\n    $.ajaxPrefilter(preFilters.fire);\n\n    function restartTimer() {\n        $(\"#spinner\").addClass(\"hidden\");\n        $(\"#RestartDialog\").modal(\"hide\");\n    }\n\n    function cleanUp() {\n        clearInterval(updateTimerID);\n        $(\"#spinner2\").hide();\n        $(\"#DialogFinished\").removeClass(\"hidden\");\n        $(\"#check_for_update\").removeClass(\"hidden\");\n        $(\"#perform_update\").addClass(\"hidden\");\n        $(\"#message\").alert(\"close\");\n        $(\"#update_table > tbody > tr\").each(function () {\n            if ($(this).attr(\"id\") !== \"current_version\") {\n                $(this).closest(\"tr\").remove();\n            }\n        });\n    }\n\n    function updateTimer() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../get_updater_status\",\n            success: function success(data) {\n                $(\"#DialogContent\").html(updateText[data.status]);\n                if (data.status > 6) {\n                    cleanUp();\n                }\n            },\n            error: function error() {\n                $(\"#DialogContent\").html(updateText[11]);\n                cleanUp();\n            },\n            timeout: 2000\n        });\n    }\n\n    function fillFileTable(path, type, folder, filt) {\n        if (window.location.pathname.endsWith(\"/basicconfig\")) {\n            var request_path = \"/../basicconfig/pathchooser/\";\n        } else {\n            var request_path = \"/../../ajax/pathchooser/\";\n        }\n        $.ajax({\n            dataType: \"json\",\n            data: {\n                path: path,\n                folder: folder,\n                filter: filt\n            },\n            url: window.location.pathname + request_path,\n            success: function success(data) {\n                if ($(\"#element_selected\").text() ===\"\") {\n                    $(\"#element_selected\").text(data.cwd);\n                }\n                $(\"#file_table > tbody > tr\").each(function () {\n                    if ($(this).attr(\"id\") !== \"parent\") {\n                        $(this).closest(\"tr\").remove();\n                    } else {\n                        if(data.absolute && data.parentdir !== \"\") {\n                           $(this)[0].attributes['data-path'].value  = data.parentdir;\n                        } else {\n                            $(this)[0].attributes['data-path'].value  = \"..\";\n                        }\n                    }\n                });\n                if (data.parentdir !== \"\") {\n                    $(\"#parent\").removeClass('hidden')\n                } else {\n                    $(\"#parent\").addClass('hidden')\n                }\n                // console.log(data);\n                data.files.forEach(function(entry) {\n                    if(entry.type === \"dir\") {\n                        var type = \"<span class=\\\"glyphicon glyphicon-folder-close\\\"></span>\";\n                } else {\n                    var type = \"\";\n                }\n                    $(\"<tr class=\\\"tr-clickable\\\" data-type=\\\"\" + entry.type + \"\\\" data-path=\\\"\" +\n                        entry.fullpath + \"\\\"><td>\" + type + \"</td><td>\" + entry.name + \"</td><td>\" +\n                        entry.size + \"</td></tr>\").appendTo($(\"#file_table\"));\n                });\n            },\n            timeout: 2000\n        });\n    }\n\n    $(\".discover .row\").isotope({\n        // options\n        itemSelector : \".book\",\n        layoutMode : \"fitRows\"\n    });\n\n    $(\".grid\").isotope({\n        // options\n        itemSelector : \".grid-item\",\n        layoutMode : \"fitColumns\"\n    });\n\n    if ($(\".load-more\").length && $(\".next\").length) {\n        var $loadMore = $(\".load-more .row\").infiniteScroll({\n            debug: false,\n            // selector for the paged navigation (it will be hidden)\n            path : \".next\",\n            // selector for the NEXT link (to page 2)\n            append : \".load-more .book\"\n            //animate      : true, # ToDo: Reenable function\n            //extraScrollPx: 300\n        });\n        $loadMore.on( \"append.infiniteScroll\", function( event, response, path, data ) {\n            if ($(\"body\").hasClass(\"blur\")) {\n                $(\".pagination\").addClass(\"hidden\").html(() => $(response).find(\".pagination\").html());\n                $(\" a:not(.dropdown-toggle) \")\n                  .removeAttr(\"data-toggle\");\n            }\n            $(\".load-more .row\").isotope( \"appended\", $(data), null );\n        });\n\n        // fix for infinite scroll on CaliBlur Theme (#981)\n        if ($(\"body\").hasClass(\"blur\")) {\n            $(\".col-sm-10\").bind(\"scroll\", function () {\n                if (\n                    $(this).scrollTop() + $(this).innerHeight() >=\n                    $(this)[0].scrollHeight\n                ) {\n                    $loadMore.infiniteScroll(\"loadNextPage\");\n                    window.history.replaceState({}, null, $loadMore.infiniteScroll(\"getAbsolutePath\"));\n                }\n            });\n        }\n    }\n\n    $(\"#restart\").click(function() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":0},\n            success: function success() {\n                $(\"#spinner\").show();\n                setTimeout(restartTimer, 3000);\n            }\n        });\n    });\n    $(\"#shutdown\").click(function() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":1},\n            success: function success(data) {\n                return alert(data.text);\n            }\n        });\n    });\n    $(\"#check_for_update\").click(function() {\n        var $this = $(this);\n        var buttonText = $this.html();\n        $this.html(\"...\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#update_error\").addClass(\"hidden\");\n        if ($(\"#message\").length) {\n            $(\"#message\").alert(\"close\");\n        }\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../get_update_status\",\n            success: function success(data) {\n                $this.html(buttonText);\n\n                var cssClass = \"\";\n                var message = \"\";\n\n                if (data.success === true) {\n                    if (data.update === true) {\n                        $(\"#check_for_update\").addClass(\"hidden\");\n                        $(\"#perform_update\").removeClass(\"hidden\");\n                        $(\"#update_info\")\n                            .removeClass(\"hidden\")\n                            .find(\"span\").html(data.commit);\n\n                        data.history.forEach(function(entry) {\n                            $(\"<tr><td>\" + entry[0] + \"</td><td>\" + entry[1] + \"</td></tr>\").appendTo($(\"#update_table\"));\n                        });\n                        cssClass = \"alert-warning\";\n                    } else {\n                        cssClass = \"alert-success\";\n                    }\n                } else {\n                    cssClass = \"alert-danger\";\n                }\n\n                message = \"<div id=\\\"message\\\" class=\\\"alert \" + cssClass\n                    + \" fade in\\\"><a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</a>\"\n                    + data.message + \"</div>\";\n\n                $(message).insertAfter($(\"#update_table\"));\n            }\n        });\n    });\n    $(\"#restart_database\").click(function() {\n        $(\"#DialogHeader\").addClass(\"hidden\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":2},\n            success: function success(data) {\n                $(\"#spinner2\").hide();\n                $(\"#DialogContent\").html(data.text);\n                $(\"#DialogFinished\").removeClass(\"hidden\");\n            }\n        });\n    });\n    $(\"#perform_update\").click(function() {\n        $(\"#DialogHeader\").removeClass(\"hidden\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            type: \"POST\",\n            dataType: \"json\",\n            data: { start: \"True\"},\n            url: window.location.pathname + \"/../../get_updater_status\",\n            success: function success(data) {\n                updateText = data.text;\n                $(\"#DialogContent\").html(updateText[data.status]);\n                updateTimerID = setInterval(updateTimer, 2000);\n            }\n        });\n    });\n\n    // Init all data control handlers to default\n    $(\"input[data-control]\").trigger(\"change\");\n    $(\"select[data-control]\").trigger(\"change\");\n    $(\"select[data-controlall]\").trigger(\"change\");\n\n    $(\"#bookDetailsModal\")\n        .on(\"show.bs.modal\", function(e) {\n            var $modalBody = $(this).find(\".modal-body\");\n\n            // Prevent static assets from loading multiple times\n            var useCache = function(options) {\n                options.async = true;\n                options.cache = true;\n            };\n            preFilters.add(useCache);\n\n            $.get(e.relatedTarget.href).done(function(content) {\n                $modalBody.html(content);\n                preFilters.remove(useCache);\n            });\n        })\n        .on(\"hidden.bs.modal\", function() {\n            $(this).find(\".modal-body\").html(\"...\");\n        });\n\n    $(\"#modal_kobo_token\")\n        .on(\"show.bs.modal\", function(e) {\n            var $modalBody = $(this).find(\".modal-body\");\n\n            // Prevent static assets from loading multiple times\n            var useCache = function(options) {\n                options.async = true;\n                options.cache = true;\n            };\n            preFilters.add(useCache);\n\n            $.get(e.relatedTarget.href).done(function(content) {\n                $modalBody.html(content);\n                preFilters.remove(useCache);\n            });\n        })\n        .on(\"hidden.bs.modal\", function() {\n            $(this).find(\".modal-body\").html(\"...\");\n            $(\"#config_delete_kobo_token\").show();\n        });\n\n    $(\"#config_delete_kobo_token\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function (value) {\n                $.ajax({\n                    method: \"get\",\n                    url: getPath() + \"/kobo_auth/deleteauthtoken/\" + value,\n                });\n                $(\"#config_delete_kobo_token\").hide();\n            }\n        );\n    });\n\n    $(\"#toggle_order_shelf\").click(function() {\n        $(\"#new\").toggleClass(\"disabled\");\n        $(\"#old\").toggleClass(\"disabled\");\n        $(\"#asc\").toggleClass(\"disabled\");\n        $(\"#desc\").toggleClass(\"disabled\");\n        $(\"#auth_az\").toggleClass(\"disabled\");\n        $(\"#auth_za\").toggleClass(\"disabled\");\n        $(\"#pub_new\").toggleClass(\"disabled\");\n        $(\"#pub_old\").toggleClass(\"disabled\");\n        var alternative_text = $(\"#toggle_order_shelf\").data('alt-text');\n        $(\"#toggle_order_shelf\").data('alt-text', $(\"#toggle_order_shelf\").html());\n        $(\"#toggle_order_shelf\").html(alternative_text);\n    });\n\n    $(\"#btndeluser\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function(value){\n                var subform = $('#user_submit').closest(\"form\");\n                subform.submit(function(eventObj) {\n                    $(this).append('<input type=\"hidden\" name=\"delete\" value=\"True\" />');\n                    return true;\n                });\n                subform.submit();\n            }\n        );\n    });\n    $(\"#user_submit\").click(function() {\n        this.closest(\"form\").submit();\n    });\n\n    function handle_response(data) {\n        if (!jQuery.isEmptyObject(data)) {\n            data.forEach(function (item) {\n                $(\".navbar\").after('<div class=\"row-fluid text-center\">' +\n                    '<div id=\"flash_' + item.type + '\" class=\"alert alert-' + item.type + '\">' + item.message + '</div>' +\n                    '</div>');\n            });\n        }\n    }\n\n    $('.collapse').on('shown.bs.collapse', function(){\n        $(this).parent().find(\".glyphicon-plus\").removeClass(\"glyphicon-plus\").addClass(\"glyphicon-minus\");\n    }).on('hidden.bs.collapse', function(){\n    $(this).parent().find(\".glyphicon-minus\").removeClass(\"glyphicon-minus\").addClass(\"glyphicon-plus\");\n    });\n\n    function changeDbSettings() {\n        $(\"#db_submit\").closest('form').submit();\n    }\n\n    $(\"#db_submit\").click(function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.blur();\n        $.ajax({\n            method:\"post\",\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../ajax/simulatedbchange\",\n            data: {config_calibre_dir: $(\"#config_calibre_dir\").val()},\n            success: function success(data) {\n                if ( data.change ) {\n                    if ( data.valid ) {\n                        confirmDialog(\n                        \"db_submit\",\n                    \"GeneralChangeModal\",\n                            0,\n                            changeDbSettings\n                        );\n                    }\n                    else {\n                        $(\"#InvalidDialog\").modal('show');\n                    }\n                } else {                \t\n                    changeDbSettings();\n                }\n            }\n        });\n    });\n\n    $(\"#config_submit\").click(function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.blur();\n        window.scrollTo({top: 0, behavior: 'smooth'});\n        var request_path = \"/../../admin/ajaxconfig\";\n        var loader = \"/../..\";\n        $(\"#flash_success\").remove();\n        $(\"#flash_danger\").remove();\n        $.post(window.location.pathname + request_path, $(this).closest(\"form\").serialize(), function(data) {\n            $('#config_upload_formats').val(data.config_upload);\n            if(data.reboot) {\n                $(\"#spinning_success\").show();\n                var rebootInterval = setInterval(function(){\n                    $.get({\n                        url:window.location.pathname + \"/../../admin/alive\",\n                        success: function (d, statusText, xhr) {\n                            if (xhr.status < 400) {\n                                $(\"#spinning_success\").hide();\n                                clearInterval(rebootInterval);\n                                if (data.result) {\n                                    handle_response(data.result);\n                                    data.result = \"\";\n                                }\n                            }\n                        },\n                    });\n                }, 1000);\n            } else {\n                handle_response(data.result);\n            }\n        });\n    });\n\n    $(\"#delete_shelf\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function(value){\n                window.location.href = window.location.pathname + \"/../../shelf/delete/\" + value\n            }\n        );\n\n    });\n\n    $(\"#fileModal\").on(\"show.bs.modal\", function(e) {\n        var target = $(e.relatedTarget);\n        var path = $(\"#\" + target.data(\"link\"))[0].value;\n        var folder = target.data(\"folderonly\");\n        var filter = target.data(\"filefilter\");\n        $(\"#element_selected\").text(path);\n        $(\"#file_confirm\").data(\"link\", target.data(\"link\"));\n        $(\"#file_confirm\").data(\"folderonly\", (typeof folder === 'undefined') ? false : true);\n        $(\"#file_confirm\").data(\"filefilter\", (typeof filter === 'undefined') ? \"\" : filter);\n        $(\"#file_confirm\").data(\"newfile\", target.data(\"newfile\"));\n        fillFileTable(path,\"dir\", folder, filter);\n    });\n\n    $(\"#file_confirm\").click(function() {\n        $(\"#\" + $(this).data(\"link\"))[0].value = $(\"#element_selected\").text()\n    });\n\n    $(document).on(\"click\", \".tr-clickable\", function() {\n        var path = this.attributes[\"data-path\"].value;\n        var type = this.attributes[\"data-type\"].value;\n        var folder = $(file_confirm).data(\"folderonly\");\n        var filter = $(file_confirm).data(\"filefilter\");\n        var newfile = $(file_confirm).data(\"newfile\");\n        if (newfile !== \"\") {\n            $(\"#element_selected\").text(path + $(\"#new_file\".text()));\n        } else {\n            $(\"#element_selected\").text(path);\n        }\n        if(type === \"dir\") {\n            fillFileTable(path, type, folder, filter);\n        }\n    });\n\n    $(window).resize(function() {\n        $(\".discover .row\").isotope(\"layout\");\n    });\n\n    $(\"#import_ldap_users\").click(function() {\n        $(\"#DialogHeader\").addClass(\"hidden\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            method:\"get\",\n            dataType: \"json\",\n            url: getPath() + \"/import_ldap_users\",\n            success: function success(data) {\n                $(\"#spinner2\").hide();\n                $(\"#DialogContent\").html(data.text);\n                $(\"#DialogFinished\").removeClass(\"hidden\");\n            }\n        });\n    });\n\n    $(\".author-expand\").click(function() {\n        $(this).parent().find(\"a.author-name\").slice($(this).data(\"authors-max\")).toggle();\n        $(this).parent().find(\"span.author-hidden-divider\").toggle();\n        $(this).html() === $(this).data(\"collapse-caption\") ? $(this).html(\"(...)\") : $(this).html($(this).data(\"collapse-caption\"));\n        $(\".discover .row\").isotope(\"layout\");\n    });\n\n    $(\".update-view\").click(function(e) {\n        var view = $(this).data(\"view\");\n        e.preventDefault();\n        e.stopPropagation();\n        $.ajax({\n            method:\"post\",\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            url: window.location.pathname + \"/../ajax/view\",\n            data: \"{\\\"series\\\": {\\\"series_view\\\": \\\"\"+ view +\"\\\"}}\",\n            success: function success() {\n                location.reload();\n            }\n        });\n    });\n});\n\n", "{% extends \"layout.html\" %}\n{% block body %}\n{% if book %}\n  <div class=\"col-sm-3 col-lg-3 col-xs-12\">\n    <div class=\"cover\">\n        <img id=\"detailcover\" title=\"{{book.title}}\" src=\"{{ url_for('web.get_cover', book_id=book.id, edit=1|uuidfilter)  }}\" alt=\"{{ book.title }}\"/>\n    </div>\n{% if g.user.role_delete_books() %}\n    <div class=\"text-center\">\n      <button type=\"button\" class=\"btn btn-danger\" id=\"delete\" data-toggle=\"modal\" data-delete-id=\"{{ book.id }}\" data-target=\"#deleteModal\">{{_(\"Delete Book\")}}</button>\n    </div>\n    {% if book.data|length > 1 %}\n      <div class=\"text-center more-stuff\"><h4>{{_('Delete formats:')}}</h4>\n      {% for file in book.data %}\n        <div class=\"form-group\">\n          <button type=\"button\" class=\"btn btn-danger\" id=\"delete_format\" data-toggle=\"modal\" data-delete-id=\"{{ book.id }}\" data-delete-format=\"{{ file.format }}\" data-target=\"#deleteModal\">{{_('Delete')}} - {{file.format}}</button>\n        </div>\n      {% endfor %}\n      </div>\n    {% endif %}\n{% endif %}\n\n{%  if source_formats|length > 0 and conversion_formats|length > 0 %}\n  <div class=\"text-center more-stuff\"><h4>{{_('Convert book format:')}}</h4>\n      <form class=\"padded-bottom\" action=\"{{ url_for('editbook.convert_bookformat', book_id=book.id) }}\" method=\"post\" id=\"book_convert_frm\">\n          <div class=\"form-group\">\n              <div class=\"text-left\">\n                  <label class=\"control-label\" for=\"book_format_from\">{{_('Convert from:')}}</label>\n                  <select class=\"form-control\" name=\"book_format_from\" id=\"book_format_from\">\n                    <option disabled selected value>-- {{_('select an option')}} --</option>\n                    {% for format in source_formats %}\n                    <option>{{format|upper}}</option>\n                    {% endfor %}\n                  </select>\n                  <label class=\"control-label\" for=\"book_format_to\">{{_('Convert to:')}}</label>\n                  <select class=\"form-control\" name=\"book_format_to\" id=\"book_format_to\">\n                    <option disabled selected value>-- {{_('select an option')}} --</option>\n                    {% for format in conversion_formats %}\n                    <option>{{format|upper}}</option>\n                    {% endfor %}\n                  </select>\n              </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"btn-book-convert\" name=\"btn-book-convert\"><span class=\"glyphicon glyphicon-duplicate\"></span> {{_('Convert book')}}</button>\n      </form>\n  </div>\n{% endif %}\n\n  </div>\n<form role=\"form\" action=\"{{ url_for('editbook.edit_book', book_id=book.id) }}\" method=\"post\" enctype=\"multipart/form-data\" id=\"book_edit_frm\">\n  <div class=\"col-sm-9 col-xs-12\">\n    <div class=\"form-group\">\n      <label for=\"book_title\">{{_('Book Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"book_title\" id=\"book_title\" value=\"{{book.title}}\">\n    </div>\n    <div class=\"text-center\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"xchange\" ><span class=\"glyphicon glyphicon-arrow-up\"></span><span class=\"glyphicon glyphicon-arrow-down\"></span></button>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"bookAuthor\">{{_('Author')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"author_name\" id=\"bookAuthor\" value=\"{{' & '.join(authors)}}\" autocomplete=\"off\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"description\">{{_('Description')}}</label>\n      <textarea class=\"form-control\" name=\"description\" id=\"description\" rows=\"7\">{% if book.comments %}{{book.comments[0].text}}{%endif%}</textarea>\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{_('Identifiers')}}</label>\n      <table class=\"table\" id=\"identifier-table\">\n\t{% for identifier in book.identifiers %}\n\t<tr>\n      <td><input type=\"text\" class=\"form-control\" name=\"identifier-type-{{identifier.type}}\" value=\"{{identifier.type}}\" required=\"required\" placeholder=\"{{_('Identifier Type')}}\"></td>\n\t  <td><input type=\"text\" class=\"form-control\" name=\"identifier-val-{{identifier.type}}\" value=\"{{identifier.val}}\" required=\"required\" placeholder=\"{{_('Identifier Value')}}\"></td>\n\t  <td><a class=\"btn btn-default\" onclick=\"removeIdentifierLine(this)\">{{_('Remove')}}</a></td>\n\t</tr>\n\t{% endfor %}\n      </table>\n      <a id=\"add-identifier-line\" class=\"btn btn-default\">{{_('Add Identifier')}}</a>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"tags\">{{_('Tags')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"tags\" id=\"tags\" value=\"{% for tag in book.tags %}{{tag.name.strip()}}{% if not loop.last %}, {% endif %}{% endfor %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"series\">{{_('Series')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"series\" id=\"series\" value=\"{% if book.series %}{{book.series[0].name}}{% endif %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"series_index\">{{_('Series ID')}}</label>\n      <input type=\"number\" step=\"0.01\" min=\"0\" placeholder=\"1\" class=\"form-control\" name=\"series_index\" id=\"series_index\" value=\"{{book.series_index}}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"rating\">{{_('Rating')}}</label>\n      <input type=\"number\"  name=\"rating\" id=\"rating\" class=\"rating input-lg\" data-clearable=\"\" value=\"{% if book.ratings %}{{(book.ratings[0].rating / 2)|int}}{% endif %}\">\n    </div>\n    {% if g.user.role_upload() or g.user.role_admin()%}\n      {% if g.allow_upload %}\n    <div class=\"form-group\">\n      <label for=\"cover_url\">{{_('Fetch Cover from URL (JPEG - Image will be downloaded and stored in database)')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"cover_url\" id=\"cover_url\" value=\"\">\n    </div>\n      <div class=\"form-group\" aria-label=\"Upload cover from local drive\">\n        <label class=\"btn btn-primary btn-file\" for=\"btn-upload-cover\">{{ _('Upload Cover from Local Disk') }}</label>\n        <div class=\"upload-cover-input-text\" id=\"upload-cover\"></div>\n        <input id=\"btn-upload-cover\" name=\"btn-upload-cover\" type=\"file\" accept=\".jpg, .jpeg, .png, .webp\">\n      </div>\n      {% endif %}\n    {% endif %}\n    <label for=\"pubdate\">{{_('Published Date')}}</label>\n    <div class=\"form-group input-group\">\n       <input type=\"text\" class=\"datepicker form-control\" name=\"pubdate\" id=\"pubdate\" value=\"{% if book.pubdate %}{{book.pubdate|formatdateinput}}{% endif %}\">\n       <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_pubdate\" value=\"{% if book.pubdate %}{{book.pubdate|formatdate}}{% endif %}\">\n      <span class=\"input-group-btn\">\n        <button type=\"button\" id=\"pubdate_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n      </span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"publisher\">{{_('Publisher')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"publisher\" id=\"publisher\" value=\"{% if book.publishers|length > 0 %}{{book.publishers[0].name}}{% endif %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"languages\">{{_('Language')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"languages\" id=\"languages\" value=\"{% for language in book.languages %}{{language.language_name.strip()}}{% if not loop.last %}, {% endif %}{% endfor %}\">\n    </div>\n      {% if cc|length > 0 %}\n        {% for c in cc %}\n          <div class=\"form-group\">\n            <label for=\"{{ 'custom_column_' ~ c.id }}\">{{ c.name }}</label>\n            {% if c.datatype == 'bool' %}\n              <select name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" class=\"form-control\">\n                <option value=\"None\" {% if book['custom_column_' ~ c.id]|length == 0 %} selected {% endif %}></option>\n                <option value=\"True\"  {% if book['custom_column_' ~ c.id]|length > 0 %}{% if book['custom_column_' ~ c.id][0].value ==true %}selected{% endif %}{% endif %} >{{_('Yes')}}</option>\n                <option value=\"False\"  {% if book['custom_column_' ~ c.id]|length > 0 %}{% if book['custom_column_' ~ c.id][0].value ==false %}selected{% endif %}{% endif %}>{{_('No')}}</option>\n              </select>\n            {% endif %}\n\n            {% if c.datatype == 'int' or c.datatype == 'float' %}\n\t    <input type=\"number\" step=\"{% if c.datatype == 'float' %}0.01{% else %}1{% endif %}\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"{% if book['custom_column_' ~ c.id]|length > 0 %}{{ book['custom_column_' ~ c.id][0].value }}{% endif %}\">\n            {% endif %}\n\n            {% if c.datatype == 'text' %}\n              <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n              {% if book['custom_column_' ~ c.id]|length > 0 %}\n              value=\"{% for column in book['custom_column_' ~ c.id] %}{{ column.value.strip() }}{% if not loop.last %}, {% endif %}{% endfor %}\"{% endif %}>\n            {% endif %}\n\n            {% if c.datatype == 'series' %}\n              <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n              {% if book['custom_column_' ~ c.id]|length > 0 %}\n                value=\"{% for column in book['custom_column_' ~ c.id] %} {{ '%s [%s]' % (book['custom_column_' ~ c.id][0].value, book['custom_column_' ~ c.id][0].extra|formatfloat(2)) }}{% if not loop.last %}, {% endif %}{% endfor %}\"\n              {% endif %}>\n            {% endif %}\n\n            {% if c.datatype == 'datetime' %}\n              <div class=\"input-group\">\n                <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n                  {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{% if book['custom_column_' ~ c.id][0].value  %}{{ book['custom_column_' ~ c.id][0].value|formatdateinput}}{% endif %}\"\n                  {% endif %}>\n                <input type=\"text\" class=\"fake_custom_column_{{ c.id }} form-control fake-input hidden\" id=\"fake_pubdate_{{ c.id }}\"\n                  {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{% if book['custom_column_' ~ c.id][0].value %}{{book['custom_column_' ~ c.id][0].value|formatdate}}{% endif %}\"\n                  {% endif %}>\n                <span class=\"input-group-btn\">\n                  <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n                </span>\n              </div>\n            {% endif %}\n\n            {% if c.datatype == 'comments' %}\n              <textarea class=\"form-control tiny_editor\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" rows=\"7\">{% if book['custom_column_' ~ c.id]|length > 0 %}{{book['custom_column_' ~ c.id][0].value}}{%endif%}</textarea>\n            {% endif %}\n            {% if c.datatype == 'enumeration' %}\n              <select class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n                  <option></option>\n                  {% for opt in c.get_display_dict().enum_values %}\n                    <option\n                      {% if book['custom_column_' ~ c.id]|length > 0 %}\n                        {% if book['custom_column_' ~ c.id][0].value == opt %}selected=\"selected\"{% endif %}\n                      {% endif %}\n                      >{{ opt }}</option>\n                  {% endfor %}\n              </select>\n            {% endif %}\n\n            {% if c.datatype == 'rating' %}\n              <input type=\"number\" min=\"1\" max=\"5\" step=\"0.5\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n                {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{{ '%.1f' %  (book['custom_column_' ~ c.id][0].value / 2) }}\"\n                {% endif %}>\n            {% endif %}\n          </div>\n        {% endfor %}\n      {% endif %}\n      {% if g.user.role_upload() or g.user.role_admin()%}\n        {% if g.allow_upload %}\n          <div role=\"group\" aria-label=\"Upload new book format\">\n            <label class=\"btn btn-primary btn-file\" for=\"btn-upload-format\">{{ _('Upload Format') }}</label>\n            <div class=\"upload-format-input-text\" id=\"upload-format\"></div>\n            <input id=\"btn-upload-format\" name=\"btn-upload-format\" type=\"file\">\n          </div>\n        {% endif %}\n      {% endif %}\n\n    <div class=\"checkbox\">\n      <label>\n        <input name=\"detail_view\" type=\"checkbox\" checked> {{_('View Book on Save')}}\n      </label>\n    </div>\n    <a href=\"#\" id=\"get_meta\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#metaModal\">{{_('Fetch Metadata')}}</a>\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('web.show_book', book_id=book.id) }}\" id=\"edit_cancel\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n  </div>\n</form>\n\n{% endif %}\n{% endblock %}\n\n{% block modal %}\n{{ delete_book() }}\n{{ delete_confirm_modal() }}\n\n<div class=\"modal fade\" id=\"metaModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"metaModalLabel\">\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" id=\"metaModalLabel\">{{_('Fetch Metadata')}}</h4>\n        <form class=\"padded-bottom\" id=\"meta-search\">\n          <div class=\"input-group\">\n            <label class=\"sr-only\" for=\"keyword\">{{_('Keyword')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"keyword\" name=\"keyword\" placeholder=\"{{_(\"Search keyword\")}}\">\n            <span class=\"input-group-btn\">\n              <button type=\"submit\" class=\"btn btn-primary\" id=\"do-search\">{{_(\"Search\")}}</button>\n            </span>\n          </div>\n        </form>\n        <div class=\"text-center\"><strong>{{_('Click the cover to load metadata to the form')}}</strong></div>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"text-center padded-bottom\" id=\"metadata_provider\">\n        </div>\n\n        <div id=\"meta-info\">\n          {{_(\"Loading...\")}}\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endblock %}\n\n{% block js %}\n<script type=\"text/template\" id=\"template-book-result\">\n  <li class=\"media\" data-related=\"<%= source.id %>\">\n    <img class=\"pull-left img-responsive\"\n         data-toggle=\"modal\"\n         data-target=\"#metaModal\"\n         src=\"<%= cover || \"{{ url_for('static', filename='img/academicpaper.svg') }}\" %>\"\n         alt=\"Cover\"\n    >\n    <div class=\"media-body\">\n      <h4 class=\"media-heading\">\n        <a href=\"<%= url %>\" target=\"_blank\" rel=\"noopener\"><%= title %></a>\n      </h4>\n      <p>{{_('Author')}}\uff1a<%= authors.join(\" & \") %></p>\n      <% if (publisher) { %>\n        <p>{{_('Publisher')}}\uff1a<%= publisher %></p>\n      <% } %>\n      <% if (description) { %>\n        <p>{{_('Description')}}: <%= description %></p>\n      <% } %>\n      <p>{{_('Source')}}:\n        <a href=\"<%= source.url %>\" target=\"_blank\" rel=\"noopener\"><%= source.description %></a>\n      </p>\n    </div>\n  </li>\n</script>\n<script>\n  var i18nMsg = {\n    'loading': {{_('Loading...')|safe|tojson}},\n    'search_error': {{_('Search error!')|safe|tojson}},\n    'no_result': {{_('No Result(s) found! Please try another keyword.')|safe|tojson}},\n    'author': {{_('Author')|safe|tojson}},\n    'publisher': {{_('Publisher')|safe|tojson}},\n    'description': {{_('Description')|safe|tojson}},\n    'source': {{_('Source')|safe|tojson}},\n  };\n  var language = '{{ g.user.locale }}';\n\n  $(\"#add-identifier-line\").click(function() {\n    // create a random identifier type to have a valid name in form. This will not be used when dealing with the form\n    var rand_id = Math.floor(Math.random() * 1000000).toString();\n    var line = '<tr>';\n    line += '<td><input type=\"text\" class=\"form-control\" name=\"identifier-type-'+ rand_id +'\" required=\"required\" placeholder={{_('Identifier Type')|safe|tojson}}></td>';\n    line += '<td><input type=\"text\" class=\"form-control\" name=\"identifier-val-'+ rand_id +'\" required=\"required\" placeholder={{_('Identifier Value')|safe|tojson}}></td>';\n    line += '<td><a class=\"btn btn-default\" onclick=\"removeIdentifierLine(this)\">{{_('Remove')}}</a></td>';\n    line += '</tr>';\n    $(\"#identifier-table\").append(line);\n  });\n  function removeIdentifierLine(el) {\n    $(el).parent().parent().remove();\n  }\n\n</script>\n<script src=\"{{ url_for('static', filename='js/libs/typeahead.bundle.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-rating-input.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/get_meta.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/tinymce/tinymce.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/bootstrap-datepicker.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/locales/bootstrap-datepicker.' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/edit_books.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/fullscreen.js') }}\"></script>\n{% endblock %}\n{% block header %}\n<meta name=\"referrer\" content=\"never\">\n<link href=\"{{ url_for('static', filename='css/libs/typeahead.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-datepicker3.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% macro text_table_row(parameter, edit_text, show_text, validate, sort) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    {% if sort %}data-sortable=\"true\" {% endif %}\n    data-visible = \"{{visiblility.get(parameter)}}\"\n    data-escape=\"true\"\n    {% if g.user.role_edit() %}\n        data-editable-type=\"text\"\n        data-editable-url=\"{{ url_for('editbook.edit_list_book', param=parameter)}}\"\n        data-editable-title=\"{{ edit_text }}\"\n        data-edit=\"true\"\n        {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\" {% endif %}\n    {% endif %}\n>{{ show_text }}</th>\n{%- endmacro %}\n\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<h2 class=\"{{page}}\">{{_(title)}}</h2>\n      <div class=\"col-xs-12 col-sm-6\">\n        <div class=\"row form-group\">\n          <div class=\"btn btn-default disabled\" id=\"merge_books\" aria-disabled=\"true\">{{_('Merge selected books')}}</div>\n          <div class=\"btn btn-default disabled\" id=\"delete_selection\" aria-disabled=\"true\">{{_('Remove Selections')}}</div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"btn btn-default disabled\" id=\"table_xchange\" ><span class=\"glyphicon glyphicon-arrow-up\"></span><span class=\"glyphicon glyphicon-arrow-down\"></span>{{_('Exchange author and title')}}</div>\n        </div>\n      </div>\n     <div class=\"filterheader col-xs-12 col-sm-6\">\n      <div class=\"row form-group\">\n        <input type=\"checkbox\" id=\"autoupdate_titlesort\" name=\"autoupdate_titlesort\" checked>\n        <label for=\"autoupdate_titlesort\">{{_('Update Title Sort automatically')}}</label>\n      </div>\n      <div class=\"row form-group\">\n        <input type=\"checkbox\" id=\"autoupdate_authorsort\" name=\"autoupdate_authorsort\" checked>\n        <label for=\"autoupdate_authorsort\">{{_('Update Author Sort automatically')}}</label>\n      </div>\n    </div>\n\n    <table id=\"books-table\" class=\"table table-no-bordered table-striped\"\n           data-url=\"{{url_for('web.list_books')}}\">\n      <thead>\n        <tr>\n          {% if g.user.role_edit() %}\n            <th data-field=\"state\" data-checkbox=\"true\" data-sortable=\"true\"></th>\n          {% endif %}\n            <th data-field=\"id\" id=\"id\" data-visible=\"false\" data-switchable=\"false\"></th>\n            {{ text_table_row('title', _('Enter Title'),_('Title'), true, true) }}\n            {{ text_table_row('sort', _('Enter Title Sort'),_('Title Sort'), false, true) }}\n            {{ text_table_row('author_sort', _('Enter Author Sort'),_('Author Sort'), false, true) }}\n            {{ text_table_row('authors', _('Enter Authors'),_('Authors'), true, true) }}\n            {{ text_table_row('tags', _('Enter Categories'),_('Categories'), false, true) }}\n            {{ text_table_row('series', _('Enter Series'),_('Series'), false, true) }}\n            <th data-field=\"series_index\" id=\"series_index\" data-visible=\"{{visiblility.get('series_index')}}\" data-edit-validate=\"{{ _('This Field is Required') }}\" data-sortable=\"true\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-min=\"0\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='series_index')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter Title')}}\"{% endif %}>{{_('Series Index')}}</th>\n            {{ text_table_row('languages', _('Enter Languages'),_('Languages'), false, true) }}\n            <!--th data-field=\"pubdate\" data-type=\"date\" data-visible=\"{{visiblility.get('pubdate')}}\" data-viewformat=\"dd.mm.yyyy\" id=\"pubdate\" data-sortable=\"true\">{{_('Publishing Date')}}</th-->\n            {{ text_table_row('publishers', _('Enter Publishers'),_('Publishers'), false, true) }}\n          {% if g.user.role_delete_books() and g.user.role_edit()%}\n            <th data-align=\"right\" data-formatter=\"EbookActions\" data-switchable=\"false\">{{_('Delete')}}</th>\n          {% endif %}\n        </tr>\n      </thead>\n    </table>\n{% endblock %}\n{% block modal %}\n{{ delete_book() }}\n{% if g.user.role_edit() %}\n<div class=\"modal fade\" id=\"mergeModal\" role=\"dialog\" aria-labelledby=\"metaMergeLabel\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header bg-danger text-center\">\n          <span>{{_('Are you really sure?')}}</span>\n      </div>\n        <div class=\"modal-body\">\n          <p></p>\n            <div class=\"text-left\">{{_('Books with Title will be merged from:')}}</div>\n          <p></p>\n            <div class=\"text-left\" id=\"merge_from\"></div>\n          <p></p>\n            <div class=\"text-left\">{{_('Into Book with Title:')}}</div>\n          <p></p>\n            <div class=\"text-left\" id=\"merge_to\"></div>\n        </div>\n      <div class=\"modal-footer\">\n        <input type=\"button\" class=\"btn btn-danger\" value=\"{{_('Merge')}}\" name=\"merge_confirm\" id=\"merge_confirm\" data-dismiss=\"modal\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Cancel')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endif %}\n\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/locale/bootstrap-table-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block flash %}\n<div id=\"spinning_success\" class=\"row-fluid text-center\" style=\"display:none;\">\n    <div class=\"alert alert-info\"><img id=\"img-spinner\" src=\"{{ url_for('static', filename='css/libs/images/loading-icon.gif') }}\"/></div>\n</div>\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n  <form role=\"form\" method=\"POST\" class=\"col-md-10 col-lg-6\" action=\"{{ url_for('admin.db_configuration') }}\" autocomplete=\"off\">\n       <label for=\"config_calibre_dir\">{{_('Location of Calibre Database')}}</label>\n       <div class=\"form-group required input-group\">\n        <input type=\"text\" class=\"form-control\" id=\"config_calibre_dir\" name=\"config_calibre_dir\" value=\"{% if config.config_calibre_dir != None %}{{ config.config_calibre_dir }}{% endif %}\" autocomplete=\"off\">\n        <span class=\"input-group-btn\">\n          <button type=\"button\" data-toggle=\"modal\" id=\"calibre_modal_path\" data-link=\"config_calibre_dir\" data-filefilter=\"metadata.db\" data-target=\"#fileModal\" id=\"library_path\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n        </span>\n      </div>\n    {% if feature_support['gdrive'] %}\n      <div class=\"form-group required\">\n        <input type=\"checkbox\" id=\"config_use_google_drive\" name=\"config_use_google_drive\" data-control=\"gdrive_settings\" {% if config.config_use_google_drive %}checked{% endif %} >\n        <label for=\"config_use_google_drive\">{{_('Use Google Drive?')}}</label>\n      </div>\n      {% if not gdriveError and config.config_use_google_drive %}\n        {% if show_authenticate_google_drive and config.config_use_google_drive %}\n          <div class=\"form-group required\">\n            <a href=\"{{ url_for('gdrive.authenticate_google_drive') }}\" id=\"gdrive_auth\" class=\"btn btn-primary\">{{_('Authenticate Google Drive')}}</a>\n          </div>\n        {% else %}\n            {% if not show_authenticate_google_drive %}\n            <div class=\"form-group required\">\n              <label for=\"config_google_drive_folder\">{{_('Google Drive Calibre folder')}}</label>\n              <select name=\"config_google_drive_folder\" id=\"config_google_drive_folder\" class=\"form-control\">\n                {%  for gdrivefolder in gdrivefolders %}\n                <option value=\"{{ gdrivefolder.title }}\" {% if gdrivefolder.title == config.config_google_drive_folder %}selected{% endif %}>{{ gdrivefolder.title }}</option>\n                {% endfor %}\n              </select>\n            </div>\n            {% if config.config_google_drive_watch_changes_response %}\n              <label for=\"config_google_drive_watch_changes_response\">{{_('Metadata Watch Channel ID')}}</label>\n              <div class=\"form-group input-group required\">\n                <input type=\"text\" class=\"form-control\" name=\"config_google_drive_watch_changes_response\" id=\"config_google_drive_watch_changes_response\" value=\"{{ config.config_google_drive_watch_changes_response['id'] }} expires on {{ config.config_google_drive_watch_changes_response['expiration'] |  strftime }}\" autocomplete=\"off\" disabled=\"\">\n                <span class=\"input-group-btn\"><a href=\"{{ url_for('gdrive.revoke_watch_gdrive') }}\" id=\"watch_revoke\" class=\"btn btn-primary\">{{_('Revoke')}}</a></span>\n              </div>\n            {% else %}\n              <a href=\"{{ url_for('gdrive.watch_gdrive') }}\" id=\"enable_gdrive_watch\" class=\"btn btn-primary\">Enable watch of metadata.db</a>\n            {% endif %}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n    {% endif %}\n    <div class=\"col-sm-12\">\n      <div id=\"db_submit\" name=\"submit\" class=\"btn btn-default\">{{_('Save')}}</div>\n      <a href=\"{{ url_for('admin.admin') }}\" id=\"config_back\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ filechooser_modal() }}\n{{ change_confirm_modal() }}\n<div id=\"InvalidDialog\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog modal-sm\">\n    <!-- Modal content-->\n    <div class=\"modal-content\">\n      <div class=\"modal-header bg-info\"></div>\n      <div class=\"modal-body text-center\">\n        <p>{{_('New db location is invalid, please enter valid path')}}</p>\n          <p></p>\n        <button type=\"button\" class=\"btn btn-default\" id=\"invalid_confirm\" data-dismiss=\"modal\">{{_('OK')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block flash %}\n<div id=\"spinning_success\" class=\"row-fluid text-center\" style=\"display:none;\">\n    <div class=\"alert alert-info\"><img id=\"img-spinner\" src=\"{{ url_for('static', filename='css/libs/images/loading-icon.gif') }}\"/></div>\n</div>\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n<form role=\"form\" method=\"POST\" autocomplete=\"off\">\n<div class=\"panel-group col-md-10 col-lg-8\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapseone\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Server Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapseone\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n          <label for=\"config_port\">{{_('Server Port')}}</label>\n          <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" name=\"config_port\" id=\"config_port\" value=\"{% if config.config_port != None %}{{ config.config_port }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <label for=\"config_certfile\">{{_('SSL certfile location (leave it empty for non-SSL Servers)')}}</label>\n         <div class=\"form-group input-group\">\n          <input type=\"text\" class=\"form-control\" id=\"config_certfile\" name=\"config_certfile\" value=\"{% if config.config_certfile != None %}{{ config.config_certfile }}{% endif %}\" autocomplete=\"off\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" data-toggle=\"modal\" data-link=\"config_certfile\" data-target=\"#fileModal\" id=\"certfile_path\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n          </span>\n        </div>\n          <label for=\"config_keyfile\" >{{_('SSL Keyfile location (leave it empty for non-SSL Servers)')}}</label>\n         <div class=\"form-group input-group\">\n          <input type=\"text\" class=\"form-control\" id=\"config_keyfile\" name=\"config_keyfile\" value=\"{% if config.config_keyfile != None %}{{ config.config_keyfile }}{% endif %}\" autocomplete=\"off\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"keyfile_path\" data-toggle=\"modal\" data-link=\"config_keyfile\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_updatechannel\">{{_('Update Channel')}}</label>\n            <select name=\"config_updatechannel\" id=\"config_updatechannel\" class=\"form-control\">\n              <option value=\"0\" {% if config.config_updatechannel == 0 %}selected{% endif %}>{{_('Stable')}}</option>\n              <option value=\"2\" {% if config.config_updatechannel == 2 %}selected{% endif %}>{{_('Nightly')}}</option>\n            </select>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsetwo\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Logfile Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsetwo\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n        <label for=\"config_log_level\">{{_('Log Level')}}</label>\n            <select name=\"config_log_level\" id=\"config_log_level\" class=\"form-control\">\n                    <option value=\"10\" {% if config.config_log_level == 10 %}selected{% endif %}>DEBUG</option>\n                    <option value=\"20\" {% if config.config_log_level == 20 or config.config_log_level == None %}selected{% endif %}>INFO</option>\n                    <option value=\"30\" {% if config.config_log_level == 30 %}selected{% endif %}>WARNING</option>\n                    <option value=\"40\" {% if config.config_log_level == 40 %}selected{% endif %}>ERROR</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_logfile\">{{_('Location and name of logfile (calibre-web.log for no entry)')}}</label>\n           <input type=\"text\" class=\"form-control\" name=\"config_logfile\" id=\"config_logfile\" value=\"{% if config.config_logfile != None %}{{ config.config_logfile }}{% endif %}\" autocomplete=\"off\">\n        </div>\n      <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"config_access_log\" name=\"config_access_log\" {% if config.config_access_log %}checked{% endif %}>\n          <label for=\"config_access_log\">{{_('Enable Access Log')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_access_logfile\">{{_('Location and name of access logfile (access.log for no entry)')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_access_logfile\" id=\"config_access_logfile\" value=\"{% if config.config_access_logfile != None %}{{ config.config_access_logfile }}{% endif %}\" autocomplete=\"off\">\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefour\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Feature Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefour\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_unicode_filename\" name=\"config_unicode_filename\" {% if config.config_unicode_filename %}checked{% endif %}>\n      <label for=\"config_unicode_filename\">{{_('Convert non-English characters in title and author while saving to disk')}}</label>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_uploading\" data-control=\"upload_settings\" name=\"config_uploading\" {% if config.config_uploading %}checked{% endif %}>\n        <label for=\"config_uploading\">{{_('Enable Uploads')}}</label>\n    </div>\n    <div data-related=\"upload_settings\">\n      <div class=\"form-group\">\n        <label for=\"config_upload_formats\">{{_('Allowed Upload Fileformats')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"config_upload_formats\" id=\"config_upload_formats\" value=\"{% if config.config_upload_formats != None %}{{ config.config_upload_formats }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_anonbrowse\" name=\"config_anonbrowse\" {% if config.config_anonbrowse %}checked{% endif %}>\n        <label for=\"config_anonbrowse\">{{_('Enable Anonymous Browsing')}}</label>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_public_reg\" data-control=\"register_settings\" name=\"config_public_reg\" {% if config.config_public_reg %}checked{% endif %}>\n        <label for=\"config_public_reg\">{{_('Enable Public Registration')}}</label>\n    </div>\n    <div data-related=\"register_settings\">\n      <div class=\"form-group intend-form\">\n        <input type=\"checkbox\" id=\"config_register_email\" name=\"config_register_email\" {% if config.config_register_email %}checked{% endif %}>\n        <label for=\"config_register_email\">{{_('Use E-Mail as Username')}}</label>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_remote_login\" name=\"config_remote_login\" {% if config.config_remote_login %}checked{% endif %}>\n      <label for=\"config_remote_login\">{{_('Enable Magic Link Remote Login')}}</label>\n    </div>\n    {% if feature_support['kobo'] %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_kobo_sync\" name=\"config_kobo_sync\" data-control=\"kobo-settings\" {% if config.config_kobo_sync %}checked{% endif %}>\n      <label for=\"config_kobo_sync\">{{_('Enable Kobo sync')}}</label>\n    </div>\n    <div data-related=\"kobo-settings\">\n      <div class=\"form-group\" style=\"margin-left:10px;\">\n        <input type=\"checkbox\" id=\"config_kobo_proxy\" name=\"config_kobo_proxy\"  {% if config.config_kobo_proxy %}checked{% endif %}>\n        <label for=\"config_kobo_proxy\">{{_('Proxy unknown requests to Kobo Store')}}</label>\n      </div>\n      <div class=\"form-group\" style=\"margin-left:10px;\">\n        <label for=\"config_external_port\">{{_('Server External Port (for port forwarded API calls)')}}</label>\n        <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" name=\"config_external_port\" id=\"config_external_port\" value=\"{% if config.config_external_port != None %}{{ config.config_external_port }}{% endif %}\" autocomplete=\"off\" required>\n      </div>\n    </div>\n    {% endif %}\n    {% if feature_support['goodreads'] %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_use_goodreads\" name=\"config_use_goodreads\" data-control=\"goodreads-settings\" {% if config.config_use_goodreads %}checked{% endif %}>\n      <label for=\"config_use_goodreads\">{{_('Use Goodreads')}}</label>\n      <a href=\"https://www.goodreads.com/api/keys\" target=\"_blank\" style=\"margin-left: 5px\">{{_('Create an API Key')}}</a>\n    </div>\n    <div data-related=\"goodreads-settings\">\n      <div class=\"form-group\">\n        <label for=\"config_goodreads_api_key\">{{_('Goodreads API Key')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_goodreads_api_key\" name=\"config_goodreads_api_key\" value=\"{% if config.config_goodreads_api_key != None %}{{ config.config_goodreads_api_key }}{% endif %}\" autocomplete=\"off\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"config_goodreads_api_secret\">{{_('Goodreads API Secret')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_goodreads_api_secret\" name=\"config_goodreads_api_secret\" value=\"{% if config.config_goodreads_api_secret != None %}{{ config.config_goodreads_api_secret }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_allow_reverse_proxy_header_login\" name=\"config_allow_reverse_proxy_header_login\" data-control=\"reverse-proxy-login-settings\" {% if config.config_allow_reverse_proxy_header_login %}checked{% endif %}>\n      <label for=\"config_allow_reverse_proxy_header_login\">{{_('Allow Reverse Proxy Authentication')}}</label>\n    </div>\n    <div data-related=\"reverse-proxy-login-settings\">\n      <div class=\"form-group\">\n        <label for=\"config_reverse_proxy_login_header_name\">{{_('Reverse Proxy Header Name')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_reverse_proxy_login_header_name\" name=\"config_reverse_proxy_login_header_name\" value=\"{% if config.config_reverse_proxy_login_header_name != None %}{{ config.config_reverse_proxy_login_header_name }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    {% if not config.config_is_initial %}\n    {% if feature_support['ldap'] or feature_support['oauth'] %}\n      <div class=\"form-group\">\n        <label for=\"config_login_type\">{{_('Login type')}}</label>\n        <select name=\"config_login_type\" id=\"config_login_type\" class=\"form-control\" data-control=\"login-settings\">\n           <option value=\"0\" {% if config.config_login_type == 0 %}selected{% endif %}>{{_('Use Standard Authentication')}}</option>\n           {% if feature_support['ldap'] %}\n           <option value=\"1\" {% if config.config_login_type == 1 %}selected{% endif %}>{{_('Use LDAP Authentication')}}</option>\n           {% endif %}\n           {% if feature_support['oauth'] %}\n           <option value=\"2\" {% if config.config_login_type == 2 %}selected{% endif %}>{{_('Use OAuth')}}</option>\n           {% endif %}\n        </select>\n      </div>\n    {% if feature_support['ldap'] %}\n      <div data-related=\"login-settings-1\">\n        <div class=\"form-group\">\n          <label for=\"config_ldap_provider_url\">{{_('LDAP Server Host Name or IP Address')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_provider_url\" name=\"config_ldap_provider_url\" value=\"{% if config.config_ldap_provider_url != None %}{{ config.config_ldap_provider_url }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_port\">{{_('LDAP Server Port')}}</label>\n          <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" id=\"config_ldap_port\" name=\"config_ldap_port\" value=\"{% if config.config_ldap_port != None %}{{ config.config_ldap_port }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_encryption\">{{_('LDAP Encryption')}}</label>\n            <select name=\"config_ldap_encryption\" id=\"config_ldap_encryption\" class=\"form-control\" data-controlall=\"ldap-cert-settings\">\n                <option value=\"0\" {% if config.config_ldap_encryption == 0 %}selected{% endif %}>{{ _('None') }}</option>\n                <option value=\"1\" {% if config.config_ldap_encryption == 1 %}selected{% endif %}>{{ _('TLS') }}</option>\n                <option value=\"2\" {% if config.config_ldap_encryption == 2 %}selected{% endif %}>{{ _('SSL') }}</option>\n            </select>\n        </div>\n        <div data-related=\"ldap-cert-settings\">\n          <label for=\"config_ldap_cacert_path\" >{{_('LDAP CACertificate Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_cacert_path\" name=\"config_ldap_cacert_path\" value=\"{% if config.config_ldap_cacert_path != None %}{{ config.config_ldap_cacert_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_cacert_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n          <label for=\"config_ldap_cert_path\">{{_('LDAP Certificate Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_cert_path\" name=\"config_ldap_cert_path\" value=\"{% if config.config_ldap_cert_path != None %}{{ config.config_ldap_cert_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_cert_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n          <label for=\"config_ldap_key_path\">{{_('LDAP Keyfile Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_key_path\" name=\"config_ldap_key_path\" value=\"{% if config.config_ldap_key_path != None %}{{ config.config_ldap_key_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_key_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_authentication\">{{_('LDAP Authentication')}}</label>\n            <select name=\"config_ldap_authentication\" id=\"config_ldap_authentication\" class=\"form-control\" data-control=\"ldap-auth-password\" data-controlall=\"ldap-auth-settings\">\n                <option value=\"0\" {% if config.config_ldap_authentication == 0 %}selected{% endif %}>{{ _('Anonymous') }}</option>\n                <option value=\"1\" {% if config.config_ldap_authentication == 1 %}selected{% endif %}>{{ _('Unauthenticated') }}</option>\n                <option value=\"2\" {% if config.config_ldap_authentication == 2 %}selected{% endif %}>{{ _('Simple') }}</option>\n            </select>\n        </div>\n        <div data-related=\"ldap-auth-settings\">\n          <div class=\"form-group\">\n            <label for=\"config_ldap_serv_username\">{{_('LDAP Administrator Username')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_serv_username\" name=\"config_ldap_serv_username\" value=\"{% if config.config_ldap_serv_username != None %}{{ config.config_ldap_serv_username }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        </div>\n        <div data-related=\"ldap-auth-password-2\">\n          <div class=\"form-group\">\n            <label for=\"config_ldap_serv_password\">{{_('LDAP Administrator Password')}}</label>\n            <input type=\"password\" class=\"form-control\" id=\"config_ldap_serv_password\" name=\"config_ldap_serv_password\" value=\"\" autocomplete=\"off\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_dn\">{{_('LDAP Distinguished Name (DN)')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_dn\" name=\"config_ldap_dn\" value=\"{% if config.config_ldap_dn != None %}{{ config.config_ldap_dn }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_user_object\">{{_('LDAP User Object Filter')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_user_object\" name=\"config_ldap_user_object\" value=\"{% if config.config_ldap_user_object != None %}{{ config.config_ldap_user_object }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"config_ldap_openldap\" name=\"config_ldap_openldap\" {% if config.config_ldap_openldap %}checked{% endif %}>\n          <label for=\"config_ldap_openldap\">{{_('LDAP Server is OpenLDAP?')}}</label>\n        </div>\n          <h4 class=\"text-center\">{{_('Following Settings are Needed For User Import')}}</h4>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_object_filter\">{{_('LDAP Group Object Filter')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_object_filter\" name=\"config_ldap_group_object_filter\" value=\"{% if config.config_ldap_group_object_filter != None %}{{ config.config_ldap_group_object_filter }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_name\">{{_('LDAP Group Name')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_name\" name=\"config_ldap_group_name\" value=\"{% if config.config_ldap_group_name != None %}{{ config.config_ldap_group_name }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_members_field\">{{_('LDAP Group Members Field')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_members_field\" name=\"config_ldap_group_members_field\" value=\"{% if config.config_ldap_group_members_field != None %}{{ config.config_ldap_group_members_field }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"ldap_import_user_filter\">{{_('LDAP Member User Filter Detection')}}</label>\n              <select name=\"ldap_import_user_filter\" id=\"ldap_import_user_filter\" class=\"form-control\" data-control=\"ldap_member_user_object\">\n                  <option value=\"0\" {% if config.config_ldap_member_user_object == \"\" %}selected{% endif %}>{{ _('Autodetect') }}</option>\n                  <option value=\"1\" {% if config.config_ldap_member_user_object %}selected{% endif %}>{{ _('Custom Filter') }}</option>\n              </select>\n          </div>\n        <div data-related=\"ldap_member_user_object-1\">\n          <div class=\"form-group\">\n              <label for=\"config_ldap_member_user_object\">{{_('LDAP Member User Filter')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"config_ldap_member_user_object\" name=\"config_ldap_member_user_object\" value=\"{% if config.config_ldap_member_user_object != None %}{{ config.config_ldap_member_user_object }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        </div>\n\n      </div>\n      {% endif %}\n      {% if feature_support['oauth'] %}\n        <div data-related=\"login-settings-2\">\n          {% for prov in provider %}\n          <div class=\"form-group\">\n            <a href=\"{{prov['obtain_link']}}\" target=\"_blank\">{{_('Obtain %(provider)s OAuth Credential', provider=prov['provider_name'])}}</a>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_{{ prov['id'] }}_oauth_client_id\">{{_('%(provider)s OAuth Client Id', provider=prov['provider_name'])}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_{{ prov['id'] }}_oauth_client_id\" name=\"config_{{ prov['id'] }}_oauth_client_id\" value=\"{% if prov['oauth_client_id']%}{{ prov['oauth_client_id'] }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_{{ prov['id'] }}_oauth_client_secret\">{{_('%(provider)s OAuth Client Secret', provider=prov['provider_name'])}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_{{ prov['id'] }}_oauth_client_secret\" name=\"config_{{ prov['id'] }}_oauth_client_secret\" value=\"{% if prov['oauth_client_secret']%}{{ prov['oauth_client_secret'] }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        {% endfor %}\n        </div>\n      {% endif %}\n      {% endif %}\n    {% endif %}\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefive\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n           {{_('External binaries')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefive\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n           <label for=\"config_converterpath\">{{_('Path to Calibre E-Book Converter')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_converterpath\" name=\"config_converterpath\" value=\"{% if config.config_converterpath != None %}{{ config.config_converterpath }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" data-toggle=\"modal\" id=\"converter_modal_path\" data-link=\"config_converterpath\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n           </div>\n           <div class=\"form-group\">\n              <label for=\"config_calibre\">{{_('Calibre E-Book Converter Settings')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"config_calibre\" name=\"config_calibre\" value=\"{% if config.config_calibre != None %}{{ config.config_calibre }}{% endif %}\" autocomplete=\"off\">\n           </div>\n        <label for=\"config_kepubifypath\">{{_('Path to Kepubify E-Book Converter')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_kepubifypath\" name=\"config_kepubifypath\" value=\"{% if config.config_kepubifypath != None %}{{ config.config_kepubifypath }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"kepubify_path\" data-toggle=\"modal\" data-link=\"config_kepubifypath\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        {% if feature_support['rar'] %}\n            <label for=\"config_rarfile_location\">{{_('Location of Unrar binary')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_rarfile_location\" name=\"config_rarfile_location\" value=\"{% if config.config_rarfile_location != None %}{{ config.config_rarfile_location }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"unrar_path\" data-toggle=\"modal\" data-link=\"config_rarfile_location\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        {% endif %}\n      </div>\n    </div>\n  </div>\n</div>\n    <div class=\"col-sm-12\">\n    <button type=\"button\" name=\"submit\" id=\"config_submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('admin.admin') }}\" id=\"config_back\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ filechooser_modal() }}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n  <form role=\"form\" method=\"POST\" autocomplete=\"off\" >\n<div class=\"panel-group class=\"col-md-10 col-lg-6\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefour\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('View Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefour\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n                <div class=\"form-group\">\n          <label for=\"config_calibre_web_title\">{{_('Title')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_calibre_web_title\" id=\"config_calibre_web_title\" value=\"{% if conf.config_calibre_web_title != None %}{{ conf.config_calibre_web_title }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_books_per_page\">{{_('Books per Page')}}</label>\n          <input type=\"number\" min=\"1\" max=\"200\" class=\"form-control\" name=\"config_books_per_page\" id=\"config_books_per_page\" value=\"{% if conf.config_books_per_page != None %}{{ conf.config_books_per_page }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_random_books\">{{_('No. of Random Books to Display')}}</label>\n          <input type=\"number\" min=\"1\" max=\"30\" class=\"form-control\" name=\"config_random_books\" id=\"config_random_books\" value=\"{% if conf.config_random_books != None %}{{ conf.config_random_books }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_authors_max\">{{_('No. of Authors to Display Before Hiding (0=Disable Hiding)')}}</label>\n          <input type=\"number\" min=\"0\" max=\"999\" class=\"form-control\" name=\"config_authors_max\" id=\"config_authors_max\" value=\"{% if conf.config_authors_max != None %}{{ conf.config_authors_max }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"config_theme\">{{_('Theme')}}</label>\n            <select name=\"config_theme\" id=\"config_theme\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_theme == 0 %}selected{% endif %}>{{ _(\"Standard Theme\") }}</option>\n                <option value=\"1\" {% if conf.config_theme == 1 %}selected{% endif %}>{{ _(\"caliBlur! Dark Theme\") }}</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_columns_to_ignore\">{{_('Regular Expression for Ignoring Columns')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_columns_to_ignore\" id=\"config_columns_to_ignore\" value=\"{% if conf.config_columns_to_ignore != None %}{{ conf.config_columns_to_ignore }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_read_column\">{{_('Link Read/Unread Status to Calibre Column')}}</label>\n              <select name=\"config_read_column\" id=\"config_read_column\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_read_column == 0 %}selected{% endif %}></option>\n                {%  for readColumn in readColumns %}\n                <option value=\"{{ readColumn.id }}\" {% if readColumn.id == conf.config_read_column %}selected{% endif %}>{{ readColumn.name }}</option>\n                {% endfor %}\n              </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_restricted_column\">{{_('View Restrictions based on Calibre column')}}</label>\n              <select name=\"config_restricted_column\" id=\"config_restricted_column\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_restricted_column == 0 %}selected{% endif %}>{{ _('None') }}</option>\n                {%  for restrictColumn in restrictColumns %}\n                <option value=\"{{ restrictColumn.id }}\" {% if restrictColumn.id == conf.config_restricted_column %}selected{% endif %}>{{ restrictColumn.name }}</option>\n                {% endfor %}\n              </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_title_regex\">{{_('Regular Expression for Title Sorting')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_title_regex\" id=\"config_title_regex\" value=\"{% if conf.config_title_regex != None %}{{ conf.config_title_regex }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        </div>\n      </div>\n    </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsesix\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Default Settings for New Users')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsesix\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"admin_role\" id=\"admin_role\" {% if conf.role_admin() %}checked{% endif %}>\n          <label for=\"admin_role\">{{_('Admin User')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"download_role\" id=\"download_role\" {% if conf.role_download() %}checked{% endif %}>\n          <label for=\"download_role\">{{_('Allow Downloads')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"viewer_role\" id=\"viewer_role\" {% if conf.role_viewer() %}checked{% endif %}>\n          <label for=\"viewer_role\">{{_('Allow eBook Viewer')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"upload_role\" id=\"upload_role\" {% if conf.role_upload() %}checked{% endif %}>\n          <label for=\"upload_role\">{{_('Allow Uploads')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_role\" id=\"edit_role\" {% if conf.role_edit() %}checked{% endif %}>\n          <label for=\"edit_role\">{{_('Allow Edit')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"delete_role\" id=\"delete_role\" {% if conf.role_delete_books() %}checked{% endif %}>\n          <label for=\"delete_role\">{{_('Allow Delete Books')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"passwd_role\" id=\"passwd_role\" {% if conf.role_passwd() %}checked{% endif %}>\n          <label for=\"passwd_role\">{{_('Allow Changing Password')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_shelf_role\" id=\"edit_shelf_role\" {% if conf.role_edit_shelfs() %}checked{% endif %}>\n          <label for=\"edit_shelf_role\">{{_('Allow Editing Public Shelves')}}</label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapseseven\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Default Visibilities for New Users')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapseseven\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        {% for element in sidebar %}\n          {% if element['config_show'] %}\n            <div class=\"form-group\">\n              <input type=\"checkbox\" name=\"show_{{element['visibility']}}\" id=\"show_{{element['visibility']}}\" {% if conf.show_element_new_user(element['visibility']) %}checked{% endif %}>\n              <label for=\"show_{{element['visibility']}}\">{{element['show_text']}}</label>\n            </div>\n          {% endif %}\n        {% endfor %}\n        <div class=\"form-group\">\n            <input type=\"checkbox\" name=\"Show_detail_random\" id=\"Show_detail_random\" {% if conf.show_detail_random() %}checked{% endif %}>\n            <label for=\"Show_detail_random\">{{_('Show Random Books in Detail View')}}</label>\n        </div>\n        <a href=\"#\" id=\"get_tags\" data-id=\"0\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied Tags')}}</a>\n        <a href=\"#\" id=\"get_column_values\" data-id=\"0\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied custom column values')}}</a>\n      </div>\n    </div>\n  </div>\n</div>\n    <div class=\"col-sm-12\">\n    <button type=\"submit\" name=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('admin.admin') }}\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ restrict_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends is_xhr|yesno(\"fragment.html\", \"layout.html\") %}\n{% block body %}\n<div class=\"single\">\n  <div class=\"row\">\n    <div class=\"col-sm-3 col-lg-3 col-xs-5\">\n      <div class=\"cover\">\n          <img id=\"detailcover\" title=\"{{entry.title}}\" src=\"{{ url_for('web.get_cover', book_id=entry.id, edit=1|uuidfilter) }}\" alt=\"{{ entry.title }}\" />\n      </div>\n    </div>\n    <div class=\"col-sm-9 col-lg-9 book-meta\">\n      <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Download, send to Kindle, reading\">\n          {% if g.user.role_download() %}\n            {% if entry.data|length %}\n            <div class=\"btn-group\" role=\"group\">\n                {% if entry.data|length < 2 %}\n                  <button id=\"Download\" type=\"button\" class=\"btn btn-primary\">\n                    {{_('Download')}} :\n                  </button>\n                  {% for format in entry.data %}\n                  <a href=\"{{ url_for('web.download_link', book_id=entry.id, book_format=format.format|lower, anyname=entry.id|string+'.'+format.format|lower) }}\" id=\"btnGroupDrop1{{format.format|lower}}\" class=\"btn btn-primary\" role=\"button\">\n                    <span class=\"glyphicon glyphicon-download\"></span>{{format.format}} ({{ format.uncompressed_size|filesizeformat }})\n                  </a>\n                  {% endfor %}\n                {% else %}\n                  <button id=\"btnGroupDrop1\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"glyphicon glyphicon-download\"></span> {{_('Download')}}\n                    <span class=\"caret\"></span>\n                  </button>\n                  <ul class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n                  {% for format in entry.data %}\n                    <li><a href=\"{{ url_for('web.download_link', book_id=entry.id, book_format=format.format|lower, anyname=entry.id|string+'.'+format.format|lower) }}\">{{format.format}} ({{ format.uncompressed_size|filesizeformat }})</a></li>\n                  {% endfor %}\n                  </ul>\n                {% endif %}\n            </div>\n            {% endif %}\n          {% endif %}\n            {% if g.user.kindle_mail and kindle_list %}\n              {% if kindle_list.__len__() == 1 %}\n                <a href=\"{{url_for('web.send_to_kindle', book_id=entry.id, book_format=kindle_list[0]['format'], convert=kindle_list[0]['convert'])}}\" id=\"sendbtn\" data-text=\"{{_('Send to Kindle')}}\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-send\"></span> {{kindle_list[0]['text']}}</a>\n              {% else %}\n                <div class=\"btn-group\" role=\"group\">\n                  <button id=\"sendbtn2\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"glyphicon glyphicon-send\"></span>{{_('Send to Kindle')}}\n                    <span class=\"caret\"></span>\n                  </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"send-to-kindle\">\n                    {% for format in kindle_list %}\n                      <li><a href=\"{{url_for('web.send_to_kindle', book_id=entry.id, book_format=format['format'], convert=format['convert'])}}\">{{format['text']}}</a></li>\n                    {%endfor%}\n                    </ul>\n                </div>\n              {% endif %}\n            {% endif %}\n          {% if reader_list and g.user.role_viewer() %}\n              <div class=\"btn-group\" role=\"group\">\n              {% if reader_list|length > 1 %}\n                <button id=\"read-in-browser\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  <span class=\"glyphicon glyphicon-book\"></span> {{_('Read in Browser')}}\n                  <span class=\"caret\"></span>\n                </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"read-in-browser\">\n                    {% for format in reader_list %}\n                      <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format) }}\">{{format}}</a></li>\n                    {%endfor%}\n                    </ul>\n                {% else %}\n                  <a target=\"_blank\" href=\"{{url_for('web.read_book', book_id=entry.id, book_format=reader_list[0])}}\" id=\"readbtn\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-book\"></span> {{_('Read in Browser')}} - {{reader_list[0]}}</a>\n                {% endif %}\n              </div>\n            {% endif %}\n            {% if audioentries|length > 0 and g.user.role_viewer() %}\n              <div class=\"btn-group\" role=\"group\">\n              {% if audioentries|length > 1 %}\n                <button id=\"listen-in-browser\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  <span class=\"glyphicon glyphicon-music\"></span> {{_('Listen in Browser')}}\n                  <span class=\"caret\"></span>\n                </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"listen-in-browser\">\n                    {% for format in reader_list %}\n                      <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format) }}\">{{format}}</a></li>\n                    {%endfor%}\n                    </ul>\n                  <ul class=\"dropdown-menu\" aria-labelledby=\"listen-in-browser\">\n\n              {% for format in entry.data %}\n                  {% if format.format|lower in audioentries %}\n                    <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format.format|lower) }}\">{{format.format|lower }}</a></li>\n                    {% endif %}\n              {% endfor %}\n                  </ul>\n                {% else %}\n                  <a target=\"_blank\" href=\"{{url_for('web.read_book', book_id=entry.id, book_format=audioentries[0])}}\" id=\"listenbtn\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-music\"></span> {{_('Listen in Browser')}} - {{audioentries[0]}}</a>\n                {% endif %}\n              </div>\n            {% endif %}\n        </div>\n      </div>\n      <h2 id=\"title\">{{entry.title}}</h2>\n      <p class=\"author\">\n          {% for author in entry.authors %}\n            <a href=\"{{url_for('web.books_list',  data='author', sort_param='stored', book_id=author.id ) }}\">{{author.name.replace('|',',')}}</a>\n            {% if not loop.last %}\n              &amp;\n            {% endif %}\n          {% endfor %}\n        </p>\n      {% if entry.ratings.__len__() > 0 %}\n        <div class=\"rating\">\n        <p>\n          {% for number in range((entry.ratings[0].rating/2)|int(2)) %}\n            <span class=\"glyphicon glyphicon-star good\"></span>\n            {% if loop.last and loop.index < 5 %}\n              {% for numer in range(5 - loop.index) %}\n                <span class=\"glyphicon glyphicon-star-empty\"></span>\n              {% endfor %}\n            {% endif %}\n          {% endfor %}\n        </p>\n        </div>\n      {% endif %}\n      {% if entry.series|length > 0 %}\n          <p>{{_(\"Book %(index)s of %(range)s\", index=entry.series_index | formatfloat(2), range=(url_for('web.books_list', data='series', sort_param='stored', book_id=entry.series[0].id)|escapedlink(entry.series[0].name))|safe)}}</p>\n\n      {% endif %}\n\n      {% if entry.languages.__len__() > 0 %}\n       <div class=\"languages\">\n       <p>\n      <span class=\"label label-default\">{{_('Language')}}: {% for language in entry.languages %}{{language.language_name}}{% if not loop.last %}, {% endif %}{% endfor %}</span>\n      </p>\n      </div>\n      {% endif %}\n\n      {% if entry.identifiers|length > 0 %}\n      <div class=\"identifiers\">\n        <p>\n        <span class=\"glyphicon glyphicon-link\"></span>\n        {% for identifier in entry.identifiers %}\n          <a href=\"{{identifier}}\" target=\"_blank\" class=\"btn btn-xs btn-success\" role=\"button\">{{identifier.formatType()}}</a>\n        {%endfor%}\n      </p>\n      </div>\n      {% endif %}\n\n      {% if entry.tags|length > 0 %}\n\n      <div class=\"tags\">\n      <p>\n        <span class=\"glyphicon glyphicon-tags\"></span>\n\n        {% for tag in entry.tags %}\n          <a href=\"{{ url_for('web.books_list', data='category', sort_param='stored', book_id=tag.id) }}\" class=\"btn btn-xs btn-info\" role=\"button\">{{tag.name}}</a>\n        {%endfor%}\n      </p>\n\n      </div>\n      {% endif %}\n\n      {% if entry.publishers|length > 0 %}\n      <div class=\"publishers\">\n        <p>\n          <span>{{_('Publisher')}}:\n              <a href=\"{{url_for('web.books_list', data='publisher', sort_param='stored', book_id=entry.publishers[0].id ) }}\">{{entry.publishers[0].name}}</a>\n          </span>\n        </p>\n      </div>\n      {% endif %}\n\n      {% if (entry.pubdate|string)[:10] != '0101-01-01' %}\n      <div class=\"publishing-date\">\n        <p>{{_('Published')}}: {{entry.pubdate|formatdate}} </p>\n      </div>\n      {% endif %}\n      {% if cc|length > 0 %}\n\n\n        {% for c in cc %}\n        <div class=\"real_custom_columns\">\n          {% if entry['custom_column_' ~ c.id]|length > 0 %}\n            {{ c.name }}:\n            {% for column in entry['custom_column_' ~ c.id] %}\n              {% if c.datatype == 'rating' %}\n                {{ (column.value / 2)|formatfloat }}\n              {% else %}\n                {% if c.datatype == 'bool' %}\n                  {% if column.value == true %}\n                    <span class=\"glyphicon glyphicon-ok\"></span>\n                  {% else %}\n                    <span class=\"glyphicon glyphicon-remove\"></span>\n                  {% endif %}\n                {% else %}\n                {% if c.datatype == 'float' %}\n                  {{ column.value|formatfloat(2) }}\n                {% elif c.datatype == 'datetime' %}\n                  {{ column.value|formatdate }}\n                {% elif c.datatype == 'comments' %}\n                  {{column.value|safe}}\n                {% elif c.datatype == 'series' %}\n                  {{ '%s [%s]' % (column.value, column.extra|formatfloat(2)) }}\n                {% else %}\n                  {{ column.value }}\n                {% endif %}\n                {% endif %}\n              {% endif %}\n            {% endfor %}\n          {% endif %}\n        </div>\n        {% endfor %}\n      {% endif %}\n      {% if not g.user.is_anonymous %}\n\n        <div class=\"custom_columns\">\n          <p>\n          <form id=\"have_read_form\" action=\"{{ url_for('web.toggle_read', book_id=entry.id)}}\" method=\"POST\">\n            <label class=\"block-label\">\n              <input id=\"have_read_cb\" data-checked=\"{{_('Mark As Unread')}}\" data-unchecked=\"{{_('Mark As Read')}}\" type=\"checkbox\" {% if have_read %}checked{% endif %} >\n              <span>{{_('Read')}}</span>\n            </label>\n          </form>\n          </p>\n          {% if g.user.check_visibility(32768) %}\n          <p>\n            <form id=\"archived_form\" action=\"{{ url_for('web.toggle_archived', book_id=entry.id)}}\" method=\"POST\">\n              <label class=\"block-label\">\n                <input id=\"archived_cb\" data-checked=\"{{_('Restore from archive')}}\" data-unchecked=\"{{_('Add to archive')}}\" type=\"checkbox\" {% if is_archived %}checked{% endif %} >\n                <span>{{_('Archived')}}</span>\n              </label>\n            </form>\n          </p>\n          {% endif %}\n        </div>\n      {% endif %}\n\n\n      {% if entry.comments|length > 0 and entry.comments[0].text|length > 0%}\n        <div class=\"comments\">\n            <h3 id=\"decription\">{{_('Description:')}}</h3>\n            {{entry.comments[0].text|safe}}\n        </div>\n      {% endif %}\n\n\n      <div class=\"more-stuff\">\n\n      {% if g.user.is_authenticated %}\n      {% if g.user.shelf.all() or g.shelves_access %}\n      <div id=\"shelf-actions\" class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Add to shelves\">\n          <button id=\"add-to-shelf\" type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"glyphicon glyphicon-list\"></span> {{_('Add to shelf')}}\n            <span class=\"caret\"></span>\n          </button>\n          <ul id=\"add-to-shelves\" class=\"dropdown-menu\" aria-labelledby=\"add-to-shelf\">\n            {% for shelf in g.shelves_access %}\n              {% if not shelf.id in books_shelfs and ( not shelf.is_public or g.user.role_edit_shelfs() ) %}\n                <li>\n                  <a href=\"{{ url_for('shelf.add_to_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                     data-remove-href=\"{{ url_for('shelf.remove_from_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                     data-shelf-action=\"add\"\n                  >\n                    {{shelf.name}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}\n                  </a>\n                </li>\n              {% endif %}\n            {%endfor%}\n          </ul>\n        </div>\n        <div id=\"remove-from-shelves\" class=\"btn-group\" role=\"group\" aria-label=\"Remove from shelves\">\n          {% if books_shelfs %}\n            {% for shelf in g.shelves_access %}\n              {% if shelf.id in books_shelfs %}\n                <a href=\"{{ url_for('shelf.remove_from_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                   data-add-href=\"{{ url_for('shelf.add_to_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                   class=\"btn btn-sm btn-default\" role=\"button\" data-shelf-action=\"remove\"\n                >\n                  <span {% if not shelf.is_public or g.user.role_edit_shelfs() %}\n                        class=\"glyphicon glyphicon-remove\"\n                        {% endif %}></span> {{shelf.name}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}\n                </a>\n              {% endif %}\n            {%endfor%}\n          {% endif %}\n        </div>\n        <div id=\"shelf-action-errors\" class=\"pull-left\" role=\"alert\"></div>\n      </div>\n      {% endif %}\n\n      {% endif %}\n      {% if g.user.role_edit() %}\n      <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Edit/Delete book\">\n          <a href=\"{{ url_for('editbook.edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>\n        </div>\n      </div>\n      {% endif %}\n      </div>\n\n    </div>\n  </div>\n</div>\n{% endblock %}\n\n{% block js %}\n<script type=\"text/template\" id=\"template-shelf-add\">\n  <li>\n    <a href=\"<%= add %>\" data-remove-href=\"<%= remove %>\" data-shelf-action=\"add\">\n      <%= content %>\n    </a>\n  </li>\n</script>\n<script type=\"text/template\" id=\"template-shelf-remove\">\n  <a href=\"<%= remove %>\" data-add-href=\"<%= add %>\" class=\"btn btn-sm btn-default\" data-shelf-action=\"remove\">\n    <span class=\"glyphicon glyphicon-remove\"></span> <%= content %>\n  </a>\n</script>\n<script src=\"{{ url_for('static', filename='js/details.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/fullscreen.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" class=\"col-md-10 col-lg-6\" method=\"POST\">\n    {% if feature_support['gmail'] %}\n    <div class=\"form-group\">\n      <label for=\"config_email_type\">{{_('Choose Server Type')}}</label>\n      <select name=\"mail_server_type\" id=\"config_email_type\" class=\"form-control\" data-control=\"email-settings\">\n       <option value=\"0\" {% if content.mail_server_type == 0 %}selected{% endif %}>{{_('Use Standard E-Mail Account')}}</option>\n       <option value=\"1\" {% if content.mail_server_type == 1 %}selected{% endif %}>{{_('Gmail Account with OAuth2 Verification')}}</option>\n      </select>\n    </div>\n    <div data-related=\"email-settings-1\">\n      <div class=\"form-group\">\n        {% if content.mail_gmail_token == {} %}\n        <button type=\"submit\" id=\"gmail_server\" name=\"gmail\" value=\"submit\" class=\"btn btn-default\">{{_('Setup Gmail Account as E-Mail Server')}}</button>\n        {% else %}\n        <button type=\"submit\" id=\"invalidate_server\" name=\"invalidate\" value=\"submit\" class=\"btn btn-danger\">{{_('Revoke Gmail Access')}}</button>\n        {% endif %}\n      </div>\n    </div>\n    <div data-related=\"email-settings-0\">\n   {% endif %}\n      <div class=\"form-group\">\n        <label for=\"mail_server\">{{_('SMTP Hostname')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_server\" id=\"mail_server\" value=\"{{content.mail_server}}\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_port\">{{_('SMTP Port')}}</label>\n        <input type=\"number\" min=\"1\" max=\"65535\" step=\"1\" class=\"form-control\" name=\"mail_port\" id=\"mail_port\" value=\"{% if content.mail_port != None %}{{ content.mail_port }}{% endif %}\" autocomplete=\"off\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_use_ssl\">{{_('Encryption')}}</label>\n          <select name=\"mail_use_ssl\" id=\"mail_use_ssl\" class=\"form-control\">\n              <option value=\"0\" {% if content.mail_use_ssl == 0 %}selected{% endif %}>{{ _('None') }}</option>\n              <option value=\"1\" {% if content.mail_use_ssl == 1 %}selected{% endif %}>{{ _('STARTTLS') }}</option>\n              <option value=\"2\" {% if content.mail_use_ssl == 2 %}selected{% endif %}>{{ _('SSL/TLS') }}</option>\n          </select>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_login\">{{_('SMTP Login')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_login\" id=\"mail_login\" value=\"{{content.mail_login}}\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_password\">{{_('SMTP Password')}}</label>\n        <input type=\"password\" class=\"form-control\" name=\"mail_password\" id=\"mail_password\" value=\"{{content.mail_password}}\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_from\">{{_('From E-mail')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_from\" id=\"mail_from\" value=\"{{content.mail_from}}\" required>\n      </div>\n      <label for=\"mail_size\">{{_('Attachment Size Limit')}}</label>\n       <div class=\"form-group input-group\">\n        <input type=\"number\" min=\"1\" max=\"600\" step=\"1\" class=\"form-control\" name=\"mail_size\" id=\"mail_size\" value=\"{% if content.mail_size != None %}{{ (content.mail_size / 1024 / 1024)|int }}{% endif %}\" required>\n        <span class=\"input-group-btn\">\n          <button type=\"button\" id=\"attachement_size\" class=\"btn btn-default\" disabled>MB</button>\n        </span>\n      </div>\n      <button type=\"submit\" name=\"submit\" value=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n      <button type=\"submit\" name=\"test\" value=\"test\" class=\"btn btn-default\">{{_('Save and Send Test E-mail')}}</button>\n   {% if feature_support['gmail'] %}\n    </div>\n   {% endif %}\n      <a href=\"{{ url_for('admin.admin') }}\" id=\"email_back\" class=\"btn btn-default\">{{_('Back')}}</a>\n  </form>\n    {% if g.allow_registration %}\n  <div class=\"col-md-10 col-lg-6\">\n    <h2>{{_('Allowed Domains (Whitelist)')}}</h2>\n    <form id=\"domain_add_allow\" action=\"{{ url_for('admin.add_domain',allow=1)}}\" method=\"POST\">\n    <div class=\"form-group required\">\n      <label for=\"domainname_allow\">{{_('Add Domain')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"domainname\" id=\"domainname_allow\" >\n    </div>\n    <button id=\"domain_allow_submit\" class=\"btn btn-default\">{{_('Add')}}</button>\n    </form>\n  <table class=\"table table-no-bordered\" id=\"domain-allow-table\" data-url=\"{{url_for('admin.list_domain', allow=1)}}\" data-id-field=\"id\" data-show-header=\"false\" data-editable-mode=\"inline\">\n    <thead>\n    <tr>\n      <th data-field=\"domain\" id=\"domain-allow\" data-escape=\"true\" data-editable-type=\"text\" data-editable-url=\"{{ url_for('admin.edit_domain', allow = 1)}}\" data-editable=\"true\" data-editable-title=\"{{_('Enter domainname')}}\"></th>\n      <th data-field=\"id\" id=\"id-allow\" data-visible=\"false\"></th>\n      <th data-align=\"right\" data-formatter=\"TableActions\"></th>\n    </tr>\n    </thead>\n  </table>\n  <h2>{{_('Denied Domains (Blacklist)')}}</h2>\n    <table class=\"table table-no-bordered\" id=\"domain-deny-table\" data-url=\"{{url_for('admin.list_domain', allow=0)}}\" data-id-field=\"id\" data-show-header=\"false\" data-editable-mode=\"inline\">\n      <thead>\n        <tr>\n            <th data-field=\"domain\" id=\"domain-deny\" data-escape=\"true\" data-editable-type=\"text\" data-editable-url=\"{{ url_for('admin.edit_domain', allow = 0)}}\" data-editable=\"true\" data-editable-title=\"{{_('Enter domainname')}}\"></th>\n            <th data-field=\"id\" id=\"id-deny\" data-visible=\"false\"></th>\n            <th data-align=\"right\" data-formatter=\"TableActions\"></th>\n        </tr>\n      </thead>\n    </table>\n    <form id=\"domain_add_deny\" action=\"{{ url_for('admin.add_domain',allow=0)}}\" method=\"POST\">\n    <div class=\"form-group required\">\n      <label for=\"domainname_deny\">{{_('Add Domain')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"domainname\" id=\"domainname_deny\" >\n    </div>\n    <button id=\"domain_deny_submit\" class=\"btn btn-default\">{{_('Add')}}</button>\n    </form>\n    </div>\n\n    {% endif %}\n</div>\n{% endblock %}\n{% block modal %}\n{% if g.allow_registration %}\n{{ delete_confirm_modal() }}\n{% endif %}\n{% endblock %}\n{% block js %}\n{% if g.allow_registration %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endif %}\n{% endblock %}\n", "<!DOCTYPE html>\n<html class=\"http-error\" lang=\"{{ g.user.locale }}\">\n  <head>\n    <title>{{ instance }} | HTTP Error ({{ error_code }})</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n    <!-- Bootstrap -->\n    <link rel=\"apple-touch-icon\" sizes=\"140x140\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link href=\"{{ url_for('static', filename='css/libs/bootstrap.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% if g.current_theme == 1 %}\n       <link href=\"{{ url_for('static', filename='css/caliBlur.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% endif %}\n  </head>\n  <body>\n  <div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n        <h1  class=\"text-center\">{{instance}}</h1>\n        <h1  class=\"text-center\">{{ error_code }}</h1>\n        <h3>{{ error_name }}</h3>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-offset-4 text-left\">\n        {% if unconfigured %}\n            <div>{{_('Calibre-Web Instance is unconfigured, please contact your administrator')}}</div>\n        {% endif %}\n      {% for element in error_stack %}\n        <div>{{ element }}</div>\n      {% endfor %}\n    </div>\n   </div>\n  {% if issue %}\n    <div class=\"row\">\n    <div class=\"col errorlink\">Please report this issue with all related information:\n        <a href=\"https://github.com/janeczku/calibre-web/issues/new?assignees=&labels=&template=bug_report.md&title=\">{{_('Create Issue')}}</a>\n    </div>\n      </div>\n    {% endif %}\n    <div class=\"row\">\n      <div class=\"col errorlink\">\n      {% if not unconfigured %}\n        <a href=\"{{url_for('web.index')}}\" title=\"{{ _('Return to Home') }}\">{{_('Return to Home')}}</a>\n      {% else %}\n        <a href=\"{{url_for('web.logout')}}\" title=\"{{ _('Logout User') }}\">{{ _('Logout User') }}</a>\n      {% endif %}\n      </div>\n    </div>\n  </div>\n  </body>\n</html>\n", "{% from 'modal_dialogs.html' import restrict_modal, delete_book, filechooser_modal, delete_confirm_modal, change_confirm_modal %}\n<!DOCTYPE html>\n<html lang=\"{{ g.user.locale }}\">\n  <head>\n    <title>{{instance}} | {{title}}</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n    <!-- Bootstrap -->\n    <link rel=\"apple-touch-icon\" sizes=\"140x140\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link href=\"{{ url_for('static', filename='css/libs/bootstrap.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% block header %}{% endblock %}\n    <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    <link href=\"{{ url_for('static', filename='css/upload.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% if g.current_theme == 1 %}\n       <link href=\"{{ url_for('static', filename='css/caliBlur.css') }}\" rel=\"stylesheet\" media=\"screen\">\n       <link href=\"{{ url_for('static', filename='css/caliBlur_override.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% endif %}\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n      <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body class=\"{{ page }} {{ bodyClass }}\" data-text=\"{{_('Home')}}\" data-textback=\"{{_('Back')}}\">\n    <!-- Static navbar -->\n    <div class=\"navbar navbar-default navbar-static-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n            <span class=\"sr-only\">{{_('Toggle Navigation')}}</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"{{url_for('web.index')}}\">{{instance}}</a>\n        </div>\n        {% if g.user.is_authenticated or g.allow_anonymous %}\n          <form class=\"navbar-form navbar-left\" role=\"search\" action=\"{{url_for('web.search')}}\" method=\"GET\">\n            <div class=\"form-group input-group input-group-sm\">\n              <label for=\"query\" class=\"sr-only\">{{_('Search')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"query\" name=\"query\" placeholder=\"{{_('Search Library')}}\" value=\"{{searchterm}}\">\n              <span class=\"input-group-btn\">\n                <button type=\"submit\" id=\"query_submit\" class=\"btn btn-default\">{{_('Search')}}</button>\n              </span>\n            </div>\n          </form>\n        {% endif %}\n        <div class=\"navbar-collapse collapse\">\n          {% if g.user.is_authenticated or g.allow_anonymous %}\n          <ul class=\"nav navbar-nav \">\n            <li><a href=\"{{url_for('web.advanced_search')}}\" id=\"advanced_search\"><span class=\"glyphicon glyphicon-search\"></span><span class=\"hidden-sm\"> {{_('Advanced Search')}}</span></a></li>\n          </ul>\n          {% endif %}\n          <ul class=\"nav navbar-nav navbar-right\" id=\"main-nav\">\n            {% if g.user.is_authenticated or g.allow_anonymous %}\n              {% if g.user.role_upload() or g.user.role_admin()%}\n                {% if g.allow_upload %}\n                  <li>\n                    <form id=\"form-upload\" class=\"navbar-form\" action=\"{{ url_for('editbook.upload') }}\" method=\"post\" enctype=\"multipart/form-data\">\n                      <div class=\"form-group\">\n                        <span class=\"btn btn-default btn-file\">{{_('Upload')}}<input id=\"btn-upload\" name=\"btn-upload\"\n                        type=\"file\" accept=\"{% for format in accept %}.{% if format != ''%}{{format}}{% else %}*{% endif %}{{ ',' if not loop.last }}{% endfor %}\" multiple></span>\n                      </div>\n                    </form>\n                  </li>\n                {% endif %}\n              {% endif %}\n              {% if not g.user.is_anonymous %}\n                <li><a id=\"top_tasks\" href=\"{{url_for('web.get_tasks_status')}}\"><span class=\"glyphicon glyphicon-tasks\"></span> <span class=\"hidden-sm\">{{_('Tasks')}}</span></a></li>\n              {% endif %}\n              {% if g.user.role_admin() %}\n                <li><a id=\"top_admin\" data-text=\"{{_('Settings')}}\" href=\"{{url_for('admin.admin')}}\"><span class=\"glyphicon glyphicon-dashboard\"></span> <span class=\"hidden-sm\">{{_('Admin')}}</span></a></li>\n              {% endif %}\n              <li><a id=\"top_user\" data-text=\"{{_('Account')}}\" href=\"{{url_for('web.profile')}}\"><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">{{g.user.name}}</span></a></li>\n              {% if not g.user.is_anonymous %}\n              <li><a id=\"logout\" href=\"{{url_for('web.logout')}}\"><span class=\"glyphicon glyphicon-log-out\"></span> <span class=\"hidden-sm\">{{_('Logout')}}</span></a></li>\n              {% endif %}\n            {% endif %}\n            {% if g.allow_registration and not g.user.is_authenticated %}\n            <li><a id=\"login\" href=\"{{url_for('web.login')}}\"><span class=\"glyphicon glyphicon-log-in\"></span> {{_('Login')}}</a></li>\n            <li><a id=\"register\" href=\"{{url_for('web.register')}}\"><span class=\"glyphicon glyphicon-user\"></span> {{_('Register')}}</a></li>\n            {% endif %}\n          </ul>\n        </div><!--/.nav-collapse -->\n      </div>\n    </div>\n    {% for message in get_flashed_messages(with_categories=True) %}\n      {%if message[0] == \"error\" %}\n      <div class=\"row-fluid text-center\" >\n        <div id=\"flash_danger\" class=\"alert alert-danger\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"info\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_info\" class=\"alert alert-info\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"warning\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_warning\" class=\"alert alert-warning\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"success\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_success\" class=\"alert alert-success\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n    {% endfor %}\n    {% block flash %}{% endblock %}\n    {% if g.current_theme == 1 %}\n      <div id=\"loader\" hidden=\"true\">\n        <center>\n          <h3>{{_('Uploading...')}}</h3>\n          <span>{{_(\"Please do not refresh the page\")}}</span>.\n        </center>\n      </div>\n    {%endif%}\n    <div class=\"container-fluid\">\n      <div class=\"row-fluid\">\n        {% if g.user.is_authenticated or g.allow_anonymous %}\n        <div class=\"col-sm-2\">\n          <nav class=\"navigation\">\n            <ul class=\"list-unstyled\" id=\"scnd-nav\" intent in-standard-append=\"nav.navigation\" in-mobile-after=\"#main-nav\" in-mobile-class=\"nav navbar-nav\">\n              <li class=\"nav-head hidden-xs\">{{_('Browse')}}</li>\n              {% for element in sidebar %}\n                {% if g.user.check_visibility(element['visibility']) and element['public'] %}\n                    <li id=\"nav_{{element['id']}}\" {% if page == element['page'] %}class=\"active\"{% endif %}><a href=\"{{url_for(element['link'], data=element['page'], sort_param='stored')}}\"><span class=\"glyphicon {{element['glyph']}}\"></span> {{_(element['text'])}}</a></li>\n                {% endif %}\n              {% endfor %}\n              {% if g.user.is_authenticated or g.allow_anonymous %}\n                <li class=\"nav-head hidden-xs public-shelves\">{{_('Shelves')}}</li>\n                {% for shelf in g.shelves_access %}\n                  <li><a href=\"{{url_for('shelf.show_shelf', shelf_id=shelf.id)}}\"><span class=\"glyphicon glyphicon-list shelf\"></span> {{shelf.name|shortentitle(40)}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}</a></li>\n                {% endfor %}\n              {% if not g.user.is_anonymous %}\n                <li id=\"nav_createshelf\" class=\"create-shelf\"><a href=\"{{url_for('shelf.create_shelf')}}\">{{_('Create a Shelf')}}</a></li>\n                <li id=\"nav_about\" {% if page == 'stat' %}class=\"active\"{% endif %}><a href=\"{{url_for('about.stats')}}\"><span class=\"glyphicon glyphicon-info-sign\"></span> {{_('About')}}</a></li>\n              {% endif %}\n              {% endif %}\n\n            </ul>\n          </nav>\n        </div>\n        {% endif %}\n        <div class=\"col-sm-10\">\n          {% block body %}{% endblock %}\n          {% if pagination and (pagination.has_next or pagination.has_prev) %}\n            <div class=\"pagination\">\n              {% if pagination.has_prev %}\n              <li class=\"page-item page-previous\"><a class=\"page-link\" aria-label=\"next page\" href=\"{{ (pagination.page - 1)|url_for_other_page\n                }}\">&laquo; {{_('Previous')}}</a></li>\n              {% endif %}\n            {% for page in pagination.iter_pages() %}\n              {% if page %}\n                {% if page != pagination.page %}\n                  <li class=\"page-item\"><a class=\"page-link\" aria-label=\"to page {{ page }}\" href=\"{{ (page)|url_for_other_page }}\">{{ page }}</a></li>\n                {% else %}\n                  <li class=\"page-item active\"><a class=\"page-link\" aria-label=\"to page {{ page }}\" href=\"{{ (page)|url_for_other_page }}\">{{ page }}</a></li>\n                {% endif %}\n              {% else %}\n                <li class=\"page-item page-last-separator disabled\"><a class=\"page-link\" aria-label=\"\">\u2026</a></li>\n              {% endif %}\n            {% endfor %}\n            {% if pagination.has_next %}\n              <li class=\"page-item page-next\"><a class=\"page-link next\" aria-label=\"next page\" href=\"{{ (pagination.page + 1)|url_for_other_page\n                }}\">{{_('Next')}} &raquo;</a></li>\n            {% endif %}\n            </div>\n          {% endif %}\n      </div>\n    </div>\n  </div>\n    <div class=\"modal fade\" id=\"bookDetailsModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"bookDetailsModalLabel\">\n      <div class=\"modal-dialog modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n            <h4 class=\"modal-title\" id=\"bookDetailsModalLabel\">{{_('Book Details')}}</h4>\n          </div>\n          <div class=\"modal-body\">...</div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    {% block modal %}{% endblock %}\n    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n    <script src=\"{{ url_for('static', filename='js/libs/jquery.min.js') }}\"></script>\n    <!-- Include all compiled plugins (below), or include individual files as needed -->\n    <script src=\"{{ url_for('static', filename='js/libs/bootstrap.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/underscore-umd-min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/intention.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/context.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/plugins.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/jquery.form.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/uploadprogress.js') }}\"> </script>\n    <script type=\"text/javascript\">\n        $(function() {\n            $(\"#form-upload\").uploadprogress({\n              redirect_url: \"{{ url_for('web.index')}}\",\n              uploadedMsg: \"{{_('Upload done, processing, please wait...')}}\",\n              modalTitle: \"{{_('Uploading...')}}\",\n              modalFooter: \"{{_('Close')}}\",\n              modalTitleFailed: \"{{_('Error')}}\"\n            });\n        });\n    </script>\n    <script src=\"{{ url_for('static', filename='js/main.js') }}\"></script>\n    {% if g.current_theme == 1 %}\n      <script src=\"{{ url_for('static', filename='js/libs/jquery.visible.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/libs/compromise.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/libs/readmore.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/caliBlur.js') }}\"></script>\n    {% endif %}\n    {% block js %}{% endblock %}\n  </body>\n</html>\n", "{% extends \"layout.html\" %}\n{% block body %}\n<h1 class=\"{{page}}\">{{_(title)}}</h1>\n\n    <div class=\"filterheader hidden-xs hidden-sm\">\n      {% if entries.__len__() %}\n       {% if data == 'author' %}\n        <button id=\"sort_name\" class=\"btn btn-primary\"><b>B,A <-> A B</b></button>\n       {% endif %}\n      {% endif %}\n      <button id=\"asc\" data-order=\"{{ order }}\" data-id=\"{{ data }}\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-sort-by-alphabet\"></span></button>\n      <button id=\"desc\" data-id=\"{{ data }}\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-sort-by-alphabet-alt\"></span></button>\n      {% if charlist|length %}\n      <button id=\"all\" class=\"btn btn-primary\">{{_('All')}}</button>\n      {% endif %}\n      <div class=\"btn-group character\" role=\"group\">\n        {% for char in charlist%}\n        <button class=\"btn btn-primary char\">{{char.char}}</button>\n        {% endfor %}\n      </div>\n\n      {% if data == \"series\" %}\n      <button class=\"update-view btn btn-primary\" data-target=\"series_view\" id=\"grid-button\" data-view=\"grid\">Grid</button>\n      {% endif %}\n    </div>\n  <div class=\"container\">\n    <div id=\"list\" class=\"col-xs-12 col-sm-6\">\n    {% for entry in entries %}\n      {% if loop.index0 == (loop.length/2+loop.length%2)|int and loop.length > 20 %}\n        </div>\n        <div id=\"second\" class=\"col-xs-12 col-sm-6\">\n      {% endif %}\n      <div class=\"row\" {% if entry[0].sort %}data-name=\"{{entry[0].name}}\"{% endif %} data-id=\"{% if entry[0].sort %}{{entry[0].sort}}{% else %}{% if entry.name %}{{entry.name}}{% else %}{{entry[0].name}}{% endif %}{% endif %}\">\n        <div class=\"col-xs-2 col-sm-2 col-md-1\" align=\"left\"><span class=\"badge\">{{entry.count}}</span></div>\n        <div class=\"col-xs-10 col-sm-10 col-md-11\"><a id=\"list_{{loop.index0}}\" href=\"{% if entry.format %}{{url_for('web.books_list', data=data, sort_param='stored', book_id=entry.format )}}{% else %}{{url_for('web.books_list', data=data, sort_param='stored', book_id=entry[0].id )}}{% endif %}\">\n          {% if entry.name %}\n          <div class=\"rating\">\n          {% for number in range(entry.name) %}\n            <span class=\"glyphicon glyphicon-star good\"></span>\n            {% if loop.last and loop.index < 5 %}\n              {% for numer in range(5 - loop.index) %}\n                <span class=\"glyphicon glyphicon-star-empty\"></span>\n              {% endfor %}\n            {% endif %}\n          {% endfor %}\n          </div>\n          {% else %}\n          {% if entry.format %}\n            {{entry.format}}\n          {% else %}\n            {{entry[0].name}}{% endif %}{% endif %}</a></div>\n      </div>\n    {% endfor %}\n    </div>\n  </div>\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/filter_list.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"well col-sm-6 col-sm-offset-2\">\n  <h2 style=\"margin-top: 0\">{{_('Login')}}</h2>\n  <form method=\"POST\" role=\"form\">\n    <input type=\"hidden\" name=\"next\" value=\"{{next_url}}\">\n    <div class=\"form-group\">\n      <label for=\"username\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" placeholder=\"{{_('Username')}}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">{{_('Password')}}</label>\n      <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{_('Password')}}\">\n    </div>\n    <div class=\"checkbox\">\n      <label>\n        <input type=\"checkbox\" name=\"remember_me\" checked> {{_('Remember Me')}}\n      </label>\n    </div>\n    <button type=\"submit\" name=\"submit\" class=\"btn btn-default\">{{_('Login')}}</button>\n    {% if config.config_login_type == 0 and mail%}\n    <button type=\"submit\" name=\"forgot\" value=\"forgot\" class=\"btn btn-default\">{{_('Forgot Password?')}}</button>\n    {% endif %}\n    {% if config.config_remote_login %}\n    <a href=\"{{url_for('remotelogin.remote_login')}}\" id=\"remote_login\" class=\"pull-right\">{{_('Log in with Magic Link')}}</a>\n    {% endif %}\n    {% if config.config_login_type == 2 %}\n      {% if 1 in oauth_check %}\n        <a href=\"{{url_for('oauth.github_login')}}\" class=\"pull-right github\">\n          <svg height=\"32\" class=\"octicon octicon-mark-github\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n          </svg>\n        </a>\n      {% endif %}\n      {% if 2 in oauth_check %}\n        <a href=\"{{url_for('oauth.google_login')}}\" class=\"pull-right google\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n         width=\"40\" height=\"40\"\n         viewBox=\"0 3 48 49\"\n         style=\"fill:#000000;\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 33.652344 32.65625 29.222656 36 24 36 C 17.371094 36 12 30.628906 12 24 C 12 17.371094 17.371094 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 12.953125 4 4 12.953125 4 24 C 4 35.046875 12.953125 44 24 44 C 35.046875 44 44 35.046875 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path><path style=\" fill:#FF3D00;\" d=\"M 6.304688 14.691406 L 12.878906 19.511719 C 14.65625 15.109375 18.960938 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 16.316406 4 9.65625 8.335938 6.304688 14.691406 Z \"></path><path style=\" fill:#4CAF50;\" d=\"M 24 44 C 29.164063 44 33.859375 42.023438 37.410156 38.808594 L 31.21875 33.570313 C 29.210938 35.089844 26.714844 36 24 36 C 18.796875 36 14.382813 32.683594 12.71875 28.054688 L 6.195313 33.078125 C 9.503906 39.554688 16.226563 44 24 44 Z \"></path><path style=\" fill:#1976D2;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 34.511719 30.238281 33.070313 32.164063 31.214844 33.570313 C 31.21875 33.570313 31.21875 33.570313 31.21875 33.570313 L 37.410156 38.808594 C 36.972656 39.203125 44 34 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path></g></svg>\n        </a>\n      {% endif %}\n    {% endif %}\n  </form>\n</div>\n  {% if error %}\n  <div class=\"col-sm-6 col-sm-offset-2\">\n    <div class=\"alert alert-danger\">{{error}}</div>\n  </div>\n  {% endif %}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"well col-sm-6 col-sm-offset-2\">\n  <h2 style=\"margin-top: 0\">{{_('Register New Account')}}</h2>\n  <form method=\"POST\" role=\"form\">\n    {% if not config.config_register_email %}\n    <div class=\"form-group required\">\n      <label for=\"name\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"{{_('Choose a username')}}\" required>\n    </div>\n    {% endif %}\n    <div class=\"form-group required\">\n      <label for=\"email\">{{_('E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{_('Your email address')}}\" required>\n    </div>\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-primary\">{{_('Register')}}</button>\n    {% if config.config_use_github_oauth %}\n    <a href=\"{{url_for('oauth.github_login')}}\" class=\"pull-right\">\n        <svg height=\"32\" class=\"octicon octicon-mark-github\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n        </svg>\n    </a>\n    {% endif %}\n    {% if config.config_use_google_oauth %}\n    <a href=\"{{url_for('oauth.google_login')}}\" class=\"pull-right\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n     width=\"40\" height=\"40\"\n     viewBox=\"0 3 48 49\"\n     style=\"fill:#000000;\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 33.652344 32.65625 29.222656 36 24 36 C 17.371094 36 12 30.628906 12 24 C 12 17.371094 17.371094 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 12.953125 4 4 12.953125 4 24 C 4 35.046875 12.953125 44 24 44 C 35.046875 44 44 35.046875 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path><path style=\" fill:#FF3D00;\" d=\"M 6.304688 14.691406 L 12.878906 19.511719 C 14.65625 15.109375 18.960938 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 16.316406 4 9.65625 8.335938 6.304688 14.691406 Z \"></path><path style=\" fill:#4CAF50;\" d=\"M 24 44 C 29.164063 44 33.859375 42.023438 37.410156 38.808594 L 31.21875 33.570313 C 29.210938 35.089844 26.714844 36 24 36 C 18.796875 36 14.382813 32.683594 12.71875 28.054688 L 6.195313 33.078125 C 9.503906 39.554688 16.226563 44 24 44 Z \"></path><path style=\" fill:#1976D2;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 34.511719 30.238281 33.070313 32.164063 31.214844 33.570313 C 31.21875 33.570313 31.21875 33.570313 31.21875 33.570313 L 37.410156 38.808594 C 36.972656 39.203125 44 34 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path></g></svg>\n    </a>\n    {% endif %}\n  </form>\n</div>\n  {% if error %}\n  <div class=\"col-sm-6 col-sm-offset-2\">\n    <div class=\"alert alert-danger\">{{error}}</div>\n  </div>\n  {% endif %}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<h1 class=\"{{page}}\">{{title}}</h1>\n<div class=\"col-md-10 col-lg-6\">\n  <form role=\"form\" id=\"search\" action=\"{{ url_for('web.advanced_search_form') }}\" method=\"POST\">\n    <div class=\"form-group\">\n      <label for=\"book_title\">{{_('Book Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"book_title\" id=\"book_title\" value=\"\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"bookAuthor\">{{_('Author')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"author_name\" id=\"bookAuthor\" value=\"\" autocomplete=\"off\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"Publisher\">{{_('Publisher')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"publisher\" id=\"publisher\" value=\"\">\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <label for=\"publishstart\">{{_('Published Date From')}}</label>\n        <div class=\"input-group\">\n          <input type=\"text\" class=\"datepicker form-control\" name=\"publish_start\" id=\"publishstart\" value=\"\">\n          <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_publishstart\" value=\"\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"publishstart_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n          </span>\n        </div>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <label for=\"publishend\">{{_('Published Date To')}}</label>\n        <div class=\"input-group \">\n          <input type=\"text\" class=\"datepicker form-control\" name=\"publishend\" id=\"publishend\" value=\"\">\n          <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_publishend\" value=\"\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"publishend_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"read_status\">{{_('Read Status')}}</label>\n      <select name=\"read_status\" id=\"read_status\" class=\"form-control\">\n        <option value=\"\" selected></option>\n        <option value=\"True\" >{{_('Yes')}}</option>\n        <option value=\"False\" >{{_('No')}}</option>\n      </select>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\" id=\"tag\">\n        <div><label for=\"include_tag\">{{_('Tags')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_tag\" id=\"include_tag\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" multiple>\n          {% for tag in tags %}\n          <option class=\"tags_click\" value=\"{{tag.id}}\">{{tag.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_tag\">{{_('Exclude Tags')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_tag\" id=\"exclude_tag\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" multiple>\n          {% for tag in tags %}\n          <option  class=\"tags_click\" value=\"{{tag.id}}\">{{tag.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_serie\">{{_('Series')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_serie\" id=\"include_serie\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for serie in series %}\n          <option value=\"{{serie.id}}\">{{serie.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_serie\">{{_('Exclude Series')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_serie\" id=\"exclude_serie\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for serie in series %}\n          <option value=\"{{serie.id}}\">{{serie.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n     <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_shelf\">{{_('Shelves')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_shelf\" id=\"include_shelf\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for shelf in shelves %}\n          <option value=\"{{shelf.id}}\">{{shelf.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_shelf\">{{_('Exclude Shelves')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_shelf\" id=\"exclude_shelf\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for shelf in shelves %}\n          <option value=\"{{shelf.id}}\">{{shelf.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n\n    {% if languages %}\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_language\">{{_('Languages')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_language\" id=\"include_language\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for language in languages %}\n          <option value=\"{{language.id}}\">{{language.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_language\">{{_('Exclude Languages')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_language\" id=\"exclude_language\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for language in languages %}\n          <option value=\"{{language.id}}\">{{language.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    {% endif%}\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_extension\">{{_('Extensions')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_extension\" id=\"include_extension\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for extension in extensions %}\n          <option value=\"{{extension.format}}\">{{extension.format}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_extension\">{{_('Exclude Extensions')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_extension\" id=\"exclude_extension\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for extension in extensions %}\n          <option value=\"{{extension.format}}\">{{extension.format}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <label for=\"ratinghigh\">{{_('Rating Above')}}</label>\n        <input type=\"number\"  name=\"ratinghigh\" id=\"ratinghigh\" class=\"rating input-lg\" data-clearable=\"\" >\n      </div>\n        <div class=\"form-group col-sm-6\">\n          <label for=\"ratinglow\">{{_('Rating Below')}}</label>\n          <input type=\"number\"  name=\"ratinglow\" id=\"ratinglow\" class=\"rating input-lg\" data-clearable=\"\" >\n        </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"comment\">{{_('Description')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"comment\" id=\"comment\" value=\"\">\n    </div>\n\n    {% if cc|length > 0 %}\n    {% for c in cc %}\n    <div class=\"form-group\">\n      <label for=\"{{ 'custom_column_' ~ c.id }}\">{{ c.name }}</label>\n      {% if c.datatype == 'bool' %}\n      <select name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" class=\"form-control\">\n        <option value=\"\" selected></option>\n        <option value=\"True\" >{{_('Yes')}}</option>\n        <option value=\"False\" >{{_('No')}}</option>\n      </select>\n      {% endif %}\n\n      {% if c.datatype == 'int' %}\n      <input type=\"number\" step=\"1\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'float' %}\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'datetime' %}\n      <div class=\"row\">\n        <div class=\"form-group col-sm-6\">\n          <label for=\"{{ 'custom_column_' ~ c.id }}\">{{_('From:')}}</label>\n          <div class=\"input-group\">\n            <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}_start\" id=\"{{ 'custom_column_' ~ c.id }}_start\" value=\"\">\n            <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_{{ 'custom_column_' ~ c.id }}_start\" value=\"\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_start_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group col-sm-6\">\n          <label for=\"{{ 'custom_column_' ~ c.id }}\">{{_('To:')}}</label>\n          <div class=\"input-group \">\n            <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}_end\" id=\"{{ 'custom_column_' ~ c.id }}_end\" value=\"\">\n            <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_{{ 'custom_column_' ~ c.id }}_end\" value=\"\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_end_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n            </span>\n          </div>\n        </div>\n      </div>\n      {% endif %}\n\n      {% if c.datatype in ['text', 'series', 'comments'] and not c.is_multiple %}\n      <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype in ['text', 'series'] and c.is_multiple %}\n      <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'enumeration' %}\n      <select class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n        <option></option>\n        {% for opt in c.get_display_dict().enum_values %}\n        <option>{{ opt }}</option>\n        {% endfor %}\n      </select>\n      {% endif %}\n\n      {% if c.datatype == 'rating' %}\n      <input type=\"number\" min=\"1\" max=\"5\" step=\"0.5\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n      {% endif %}\n    </div>\n    {% endfor %}\n    {% endif %}\n\n    <button type=\"submit\" id=\"adv_submit\" class=\"btn btn-default\">{{_('Search')}}</button>\n  </form>\n</div>\n{% endblock %}\n\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/bootstrap-datepicker.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/locales/bootstrap-datepicker.' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-rating-input.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/typeahead.bundle.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/edit_books.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select.min.js')}}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select/defaults-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n{% endblock %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/typeahead.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-datepicker3.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-select.min.css') }}\" rel=\"stylesheet\" >\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" method=\"POST\">\n    <div class=\"form-group\">\n      <label for=\"title\">{{_('Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"title\" id=\"title\" value=\"{{ shelf.name if shelf.name != None }}\">\n    </div>\n    {% if g.user.role_edit_shelfs() %}\n      <div class=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" name=\"is_public\" {% if shelf.is_public == 1 %}checked{% endif %}> {{_('Share with Everyone')}}\n        </label>\n      </div>\n    {% endif %}\n    {% if kobo_sync_enabled and sync_only_selected_shelves %}\n      <div class=\"checkbox\">\n          <label> <input type=\"checkbox\" name=\"kobo_sync\" {% if shelf.kobo_sync == 1 %}checked{% endif %}>\n              {{ _('Sync this shelf with Kobo device') }}\n          </label>\n      </div>\n    {% endif %}\n    <button type=\"submit\" class=\"btn btn-default\" id=\"submit\">{{_('Save')}}</button>\n    {% if shelf.id != None %}\n      <a href=\"{{ url_for('shelf.show_shelf', shelf_id=shelf.id) }}\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    {% endif %}\n  </form>\n</div>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" method=\"POST\" autocomplete=\"off\">\n    <div class=\"col-md-10 col-lg-8\">\n    {% if new_user or ( g.user and content.name != \"Guest\" and g.user.role_admin() ) %}\n    <div class=\"form-group required\">\n      <label for=\"name\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" value=\"{{ content.name if content.name != None }}\" autocomplete=\"off\">\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <label for=\"email\">{{_('E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" value=\"{{ content.email if content.email != None }}\" autocomplete=\"off\">\n    </div>\n    {% if ( g.user and g.user.role_passwd() or g.user.role_admin() ) and not content.role_anonymous() %}\n      {% if g.user and g.user.role_admin() and not new_user and not profile and ( mail_configured and content.email if content.email != None ) %}\n        <a class=\"btn btn-default\" id=\"resend_password\" href=\"{{url_for('admin.reset_user_password', user_id = content.id) }}\">{{_('Reset user Password')}}</a>\n      {% endif %}\n        <div class=\"form-group\">\n          <label for=\"password\">{{_('Password')}}</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" value=\"\" autocomplete=\"off\">\n        </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <label for=\"kindle_mail\">{{_('Send to Kindle E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" name=\"kindle_mail\" id=\"kindle_mail\" value=\"{{ content.kindle_mail if content.kindle_mail != None }}\">\n    </div>\n    {% if not content.role_anonymous() %}\n    <div class=\"form-group\">\n    <label for=\"locale\">{{_('Language')}}</label>\n        <select name=\"locale\" id=\"locale\" class=\"form-control\">\n            {%  for translation in translations %}\n                <option value=\"{{translation}}\" {% if translation|string == content.locale %}selected{% endif %} {% if new_user == 1 and loop.first %}selected{% endif %}>{{ translation.display_name|capitalize }}</option>\n            {% endfor %}\n        </select>\n    </div>\n    {% endif %}\n\n    <div class=\"form-group\">\n      <label for=\"default_language\">{{_('Language of Books')}}</label>\n        <select name=\"default_language\" id=\"default_language\" class=\"form-control\">\n            <option value=\"all\" {% if new_user == 1 %}selected{% endif %}>{{ _('Show All') }}</option>\n            {%  for language in languages %}\n            <option value=\"{{ language.lang_code }}\" {% if content.default_language == language.lang_code %}selected{% endif %}>{{ language.name }}</option>\n            {% endfor %}\n        </select>\n    </div>\n    {% if registered_oauth.keys()| length > 0 and not new_user and profile %}\n      {% for id, name in registered_oauth.items() %}\n    <div class=\"form-group\">\n      <label>{{ name }} {{_('OAuth Settings')}}</label>\n        {% if id not in oauth_status %}\n        <a href=\"{{ url_for('oauth.'+ name +'_login') }}\" id=\"config_{{ id }}_oauth\" class=\"btn btn-primary\">{{_('Link')}}</a>\n        {% else %}\n        <a href=\"{{ url_for('oauth.'+ name +'_login_unlink') }}\" id=\"config_{{ id }}_oauth\" class=\"btn btn-primary\">{{_('Unlink')}}</a>\n        {% endif %}\n      {% endfor %}\n    </div>\n    {% endif %}\n    {% if kobo_support and not new_user %}\n    <label>{{ _('Kobo Sync Token')}}</label>\n    <div class=\"form-group col\">\n      <a class=\"btn btn-default\" id=\"config_create_kobo_token\" data-toggle=\"modal\" data-target=\"#modal_kobo_token\" data-remote=\"false\" href=\"{{ url_for('kobo_auth.generate_auth_token', user_id=content.id) }}\">{{_('Create/View')}}</a>\n      <div class=\"btn btn-danger\" id=\"config_delete_kobo_token\" data-value=\"{{ content.id }}\" data-remote=\"false\" {% if not content.remote_auth_token.first() %} style=\"display: none;\" {% endif %}>{{_('Delete')}}</div>\n    </div>\n    {% endif %}\n    <div class=\"col-sm-6\">\n    {% for element in sidebar %}\n      {% if element['config_show'] %}\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"show_{{element['visibility']}}\" id=\"show_{{element['visibility']}}\" {% if content.check_visibility(element['visibility']) %}checked{% endif %}>\n          <label for=\"show_{{element['visibility']}}\">{{element['show_text']}}</label>\n        </div>\n      {% endif %}\n    {% endfor %}\n      <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"Show_detail_random\" id=\"Show_detail_random\" {% if content.show_detail_random() %}checked{% endif %}>\n          <label for=\"Show_detail_random\">{{_('Show Random Books in Detail View')}}</label>\n      </div>\n      {% if ( g.user and g.user.role_admin() and not new_user ) %}\n      <a href=\"#\" id=\"get_user_tags\" class=\"btn btn-default\" data-id=\"{{content.id}}\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied Tags')}}</a>\n      <a href=\"#\" id=\"get_user_column_values\" data-id=\"{{content.id}}\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add allowed/Denied Custom Column Values')}}</a>\n      {% endif %}\n    </div>\n      <div class=\"col-sm-6\">\n    {% if g.user and g.user.role_admin() and not profile %}\n    {% if not content.role_anonymous() %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"admin_role\" id=\"admin_role\" {% if content.role_admin() %}checked{% endif %}>\n      <label for=\"admin_role\">{{_('Admin User')}}</label>\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"download_role\" id=\"download_role\" {% if content.role_download() %}checked{% endif %}>\n      <label for=\"download_role\">{{_('Allow Downloads')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"viewer_role\" id=\"viewer_role\" {% if content.role_viewer() %}checked{% endif %}>\n      <label for=\"viewer_role\">{{_('Allow eBook Viewer')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"upload_role\" id=\"upload_role\" {% if content.role_upload() %}checked{% endif %}>\n      <label for=\"upload_role\">{{_('Allow Uploads')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"edit_role\" id=\"edit_role\" {% if content.role_edit() %}checked{% endif %}>\n      <label for=\"edit_role\">{{_('Allow Edit')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"delete_role\" id=\"delete_role\" {% if content.role_delete_books() %}checked{% endif %}>\n      <label for=\"delete_role\">{{_('Allow Delete Books')}}</label>\n    </div>\n      {% if not content.role_anonymous() %}\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"passwd_role\" id=\"passwd_role\" {% if content.role_passwd() %}checked{% endif %}>\n          <label for=\"passwd_role\">{{_('Allow Changing Password')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_shelf_role\" id=\"edit_shelf_role\" {% if content.role_edit_shelfs() %}checked{% endif %}>\n          <label for=\"edit_shelf_role\">{{_('Allow Editing Public Shelves')}}</label>\n        </div>\n      {% endif %}\n    {% endif %}\n    {% if kobo_support and not content.role_anonymous() %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"kobo_only_shelves_sync\" id=\"kobo_only_shelves_sync\" {% if content.kobo_only_shelves_sync %}checked{% endif %}>\n      <label for=\"kobo_only_shelves_sync\">{{_('Sync only books in selected shelves with Kobo')}}</label>\n    </div>\n    {% endif %}\n    </div>\n    <div class=\"col-sm-12\">\n      <div id=\"user_submit\" class=\"btn btn-default\">{{_('Save')}}</div>\n      {% if not profile %}\n        <div class=\"btn btn-default\" data-back=\"{{ url_for('admin.admin') }}\" id=\"back\">{{_('Cancel')}}</div>\n      {% endif %}\n      {% if g.user and g.user.role_admin() and not profile and not new_user and not content.role_anonymous() %}\n        <div class=\"btn btn-danger\" id=\"btndeluser\" data-value=\"{{ content.id }}\" data-remote=\"false\" >{{_('Delete User')}}</div>\n      {% endif %}\n    </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal fade\" id=\"modal_kobo_token\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"kobo_tokenModalLabel\">\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" id=\"kobo_tokenModalLabel\">{{_('Generate Kobo Auth URL')}}</h4>\n      </div>\n      <div class=\"modal-body\">...</div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" id=\"kobo_close\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n{% endblock %}\n{% block modal %}\n{{ restrict_modal() }}\n{{ delete_confirm_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% macro user_table_row(parameter, edit_text, show_text, validate, elements=False) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-escape=\"true\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-editable-type=\"text\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-title=\"{{ edit_text }}\"\n    data-edit=\"true\"\n    {% if not button %}\n    data-sortable=\"true\"\n    {% endif %}\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    {% if elements %}\n        <div class=\"multi_select\">\n            <select class=\"multi_selector\" id=\"{{ parameter }}\" data-live-search=\"true\" data-style=\"btn-default\" data-dropup-auto=\"false\" aria-disabled=\"true\" multiple disabled>\n              {% for tag in elements %}\n              <option class=\"tags_click\" value=\"{{tag.id}}\">{% if tag.name %}{{tag.name}}{% else %}{{tag.value}}{% endif %}</option>\n              {% endfor %}\n            </select>\n            <div class=\"btn-group btn-group-justified\" role=\"group\">\n              <div class=\"btn-group\" role=\"group\">\n                  <div class=\"multi_head btn btn-default hidden\" data-set=\"remove\" data-name=\"{{parameter}}\" aria-disabled=\"true\">{{_('Remove')}}</div>\n              </div>\n              <div class=\"btn-group\" role=\"group\">\n                  <div class=\"multi_head btn btn-default hidden\" data-set=\"add\" data-name=\"{{parameter}}\" aria-disabled=\"true\">{{_('Add')}}</div>\n              </div>\n            </div>\n        </div>\n    {% endif %}\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n{% macro user_single_checkbox_row(parameter, show_text) -%}\n<th data-name=\"{{parameter}}\" data-field=\"{{parameter}}\"\n    data-formatter=\"singlecheckboxFormatter\">\n    <div class=\"form-check\">\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"false\" data-val=\"0\" name=\"{{parameter}}\" id=\"false_{{parameter}}\" data-name=\"{{parameter}}\" disabled>{{_('Deny')}}\n    </div>\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"true\" data-val=\"1\" name=\"{{parameter}}\" data-name=\"{{parameter}}\" disabled>{{_('Allow')}}\n    </div>\n    </div>\n    {{show_text}}\n</th>\n{%- endmacro %}\n\n{% macro user_checkbox_row(parameter, array_field, show_text, element, value) -%}\n<th data-name=\"{{array_field}}\" data-field=\"{{parameter}}\"\n    data-visible=\"{{element.get(array_field)}}\"\n    data-column=\"{{value.get(array_field)}}\"\n    data-formatter=\"checkboxFormatter\">\n    <div  class=\"form-check\">\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"false\" data-val=\"{{value.get(array_field)}}\" name=\"options_{{array_field}}\" id=\"false_{{array_field}}\" data-name=\"{{parameter}}\" disabled>{{_('Deny')}}\n    </div>\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"true\" data-val=\"{{value.get(array_field)}}\" name=\"options_{{array_field}}\" data-name=\"{{parameter}}\" disabled>{{_('Allow')}}\n    </div>\n    </div>\n    {{show_text}}\n</th>\n{%- endmacro %}\n\n{% macro user_select_languages(parameter, url, show_text, validate) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-edit=\"true\"\n    data-sortable=\"true\"\n    data-editable-type=\"select\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-source=\"{{url}}\"\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    <div>\n      <select id=\"select_{{ parameter }}\" class=\"header_select\" disabled=\"\">\n      <option value=\"none\">{{ _('Select...') }}</option>\n      <option value=\"all\">{{ _('Show All') }}</option>\n      {% for language in languages %}\n        <option value=\"{{language.lang_code}}\">{{language.name}}</option>\n      {% endfor %}\n      </select>\n    </div>\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n{% macro user_select_translations(parameter, url, show_text, validate) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-editable-type=\"select\"\n    data-edit=\"true\"\n    data-sortable=\"true\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-source=\"{{url}}\"\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    <div>\n      <select id=\"select_{{ parameter }}\" class=\"header_select\" disabled=\"\">\n      <option value=\"None\">{{_('Select...')}}</option>\n      {% for translation in translations %}\n        <option value=\"{{translation}}\">{{translation.display_name|capitalize}}</option>\n      {% endfor %}\n    </select>\n    </div>\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-select.min.css') }}\" rel=\"stylesheet\" >\n{% endblock %}\n{% block body %}\n<h2 class=\"{{page}}\">{{_(title)}}</h2>\n    <div class=\"col-xs-12 col-sm-12\">\n        <div class=\"row\">\n          <div class=\"btn btn-default disabled\" id=\"user_delete_selection\" aria-disabled=\"true\">{{_('Remove Selections')}}</div>\n        </div>\n    </div>\n    <table id=\"user-table\" class=\"table table-no-bordered table-striped\"\n           data-url=\"{{url_for('admin.list_users')}}\">\n      <thead>\n        <tr>\n            <th data-name=\"edit\" data-buttontext=\"{{_('Edit User')}}\" data-visible=\"{{visiblility.get('edit')}}\" data-formatter=\"singleUserFormatter\">{{_('Edit')}}</th>\n            <th data-name=\"state\" data-field=\"state\" data-checkbox=\"true\" data-visible=\"{{visiblility.get('state')}}\" data-sortable=\"true\"></th>\n            <th data-name=\"id\" data-field=\"id\" id=\"id\" data-visible=\"false\" data-switchable=\"false\"></th>\n            {{ user_table_row('name', _('Enter Username'), _('Username'), true) }}\n            {{ user_table_row('email', _('Enter E-mail Address'), _('E-mail Address'), true) }}\n            {{ user_table_row('kindle_mail', _('Enter Kindle E-mail Address'), _('Kindle E-mail'), false) }}\n            {{ user_select_translations('locale', url_for('admin.table_get_locale'), _('Locale'), true) }}\n            {{ user_select_languages('default_language', url_for('admin.table_get_default_lang'), _('Visible Book Languages'), true) }}\n            {{ user_table_row('allowed_tags', _(\"Edit Allowed Tags\"), _(\"Allowed Tags\"), false, tags) }}\n            {{ user_table_row('denied_tags', _(\"Edit Denied Tags\"), _(\"Denied Tags\"), false, tags) }}\n            {{ user_table_row('allowed_column_value', _(\"Edit Allowed Column Values\"), _(\"Allowed Column Values\"), false, custom_values) }}\n            {{ user_table_row('denied_column_value', _(\"Edit Denied Column Values\"), _(\"Denied Columns Values\"), false, custom_values) }}\n            {{ user_checkbox_row(\"role\", \"admin_role\", _('Admin'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"passwd_role\", _('Change Password'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"upload_role\",_('Upload'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"download_role\", _('Download'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"viewer_role\", _('View'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"edit_role\", _('Edit'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"delete_role\", _('Delete'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"edit_shelf_role\", _('Edit Public Shelves'), visiblility, all_roles)}}\n            {%  if kobo_support %}\n            {{ user_single_checkbox_row(\"kobo_only_shelves_sync\", _('Sync selected Shelves with Kobo'))}}\n            {%  endif %}\n            {{ user_checkbox_row(\"sidebar_view\", \"detail_random\", _('Show Random Books in Detail View'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_language\", _('Show language selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_read_and_unread\", _('Show read/unread selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_series\", _('Show series selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_category\", _('Show category selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_random\", _('Show random books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_author\", _('Show author selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_best_rated\", _('Show Top Rated Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_read_and_unread\", _('Show Random Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_publisher\", _('Show publisher selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_rating\", _('Show ratings selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_format\", _('Show file formats selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_archived\", _('Show archived books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_download\", _('Show Downloaded Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_list\", _('Show Books List'), visiblility, sidebar_settings)}}\n            <th data-align=\"right\" data-formatter=\"UserActions\" data-switchable=\"false\"><div><div class=\"btn btn-default button_head disabled\" aria-disabled=\"true\">{{_('Delete User')}}</div></div><br>{{_('Delete User')}}</th>\n        </tr>\n      </thead>\n    </table>\n    <div class=\"errorlink\">\n      <div class=\"btn btn-default\" data-back=\"{{ url_for('admin.admin') }}\" id=\"back\">{{_('Back')}}</div>\n    </div>\n{% endblock %}\n{% block modal %}\n{{ delete_confirm_modal() }}\n{{ change_confirm_modal() }}\n{{ restrict_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select.min.js')}}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select/defaults-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport os\nfrom datetime import datetime\nimport json\nimport mimetypes\nimport chardet  # dependency of requests\nimport copy\n\nfrom babel.dates import format_date\nfrom babel import Locale as LC\nfrom babel.core import UnknownLocaleError\nfrom flask import Blueprint, jsonify\nfrom flask import request, redirect, send_from_directory, make_response, flash, abort, url_for\nfrom flask import session as flask_session\nfrom flask_babel import gettext as _\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom sqlalchemy.exc import IntegrityError, InvalidRequestError, OperationalError\nfrom sqlalchemy.sql.expression import text, func, false, not_, and_, or_\nfrom sqlalchemy.orm.attributes import flag_modified\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom .services.worker import WorkerThread\n\nfrom werkzeug.datastructures import Headers\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom . import constants, logger, isoLanguages, services\nfrom . import babel, db, ub, config, get_locale, app\nfrom . import calibre_db\nfrom .gdriveutils import getFileFromEbooksFolder, do_gdrive_download\nfrom .helper import check_valid_domain, render_task_status, check_email, check_username, \\\n    get_cc_columns, get_book_cover, get_download_link, send_mail, generate_random_password, \\\n    send_registration_mail, check_send_to_kindle, check_read_formats, tags_filters, reset_password, valid_email\nfrom .pagination import Pagination\nfrom .redirect import redirect_back\nfrom .usermanagement import login_required_if_no_ano\nfrom .render_template import render_title_template\n\nfeature_support = {\n    'ldap': bool(services.ldap),\n    'goodreads': bool(services.goodreads_support),\n    'kobo': bool(services.kobo)\n}\n\ntry:\n    from .oauth_bb import oauth_check, register_user_with_oauth, logout_oauth_user, get_oauth_status\n    feature_support['oauth'] = True\nexcept ImportError:\n    feature_support['oauth'] = False\n    oauth_check = {}\n\ntry:\n    from functools import wraps\nexcept ImportError:\n    pass  # We're not using Python 3\n\ntry:\n    from natsort import natsorted as sort\nexcept ImportError:\n    sort = sorted  # Just use regular sort then, may cause issues with badly named pages in cbz/cbr files\n\n\n@app.after_request\ndef add_security_headers(resp):\n    resp.headers['Content-Security-Policy'] = \"default-src 'self' 'unsafe-inline' 'unsafe-eval';\"\n    if request.endpoint == \"editbook.edit_book\":\n        resp.headers['Content-Security-Policy'] += \"img-src * data:\"\n    resp.headers['X-Content-Type-Options'] = 'nosniff'\n    resp.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    resp.headers['X-XSS-Protection'] = '1; mode=block'\n    resp.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n    # log.debug(request.full_path)\n    return resp\n\nweb = Blueprint('web', __name__)\nlog = logger.create()\n\n\n# ################################### Login logic and rights management ###############################################\n\n\ndef download_required(f):\n    @wraps(f)\n    def inner(*args, **kwargs):\n        if current_user.role_download():\n            return f(*args, **kwargs)\n        abort(403)\n\n    return inner\n\n\ndef viewer_required(f):\n    @wraps(f)\n    def inner(*args, **kwargs):\n        if current_user.role_viewer():\n            return f(*args, **kwargs)\n        abort(403)\n\n    return inner\n\n# ################################### data provider functions #########################################################\n\n\n@web.route(\"/ajax/emailstat\")\n@login_required\ndef get_email_status_json():\n    tasks = WorkerThread.getInstance().tasks\n    return jsonify(render_task_status(tasks))\n\n\n@web.route(\"/ajax/bookmark/<int:book_id>/<book_format>\", methods=['POST'])\n@login_required\ndef bookmark(book_id, book_format):\n    bookmark_key = request.form[\"bookmark\"]\n    ub.session.query(ub.Bookmark).filter(and_(ub.Bookmark.user_id == int(current_user.id),\n                                              ub.Bookmark.book_id == book_id,\n                                              ub.Bookmark.format == book_format)).delete()\n    if not bookmark_key:\n        ub.session_commit()\n        return \"\", 204\n\n    lbookmark = ub.Bookmark(user_id=current_user.id,\n                            book_id=book_id,\n                            format=book_format,\n                            bookmark_key=bookmark_key)\n    ub.session.merge(lbookmark)\n    ub.session_commit(\"Bookmark for user {} in book {} created\".format(current_user.id, book_id))\n    return \"\", 201\n\n\n@web.route(\"/ajax/toggleread/<int:book_id>\", methods=['POST'])\n@login_required\ndef toggle_read(book_id):\n    if not config.config_read_column:\n        book = ub.session.query(ub.ReadBook).filter(and_(ub.ReadBook.user_id == int(current_user.id),\n                                                         ub.ReadBook.book_id == book_id)).first()\n        if book:\n            if book.read_status == ub.ReadBook.STATUS_FINISHED:\n                book.read_status = ub.ReadBook.STATUS_UNREAD\n            else:\n                book.read_status = ub.ReadBook.STATUS_FINISHED\n        else:\n            readBook = ub.ReadBook(user_id=current_user.id, book_id = book_id)\n            readBook.read_status = ub.ReadBook.STATUS_FINISHED\n            book = readBook\n        if not book.kobo_reading_state:\n            kobo_reading_state = ub.KoboReadingState(user_id=current_user.id, book_id=book_id)\n            kobo_reading_state.current_bookmark = ub.KoboBookmark()\n            kobo_reading_state.statistics = ub.KoboStatistics()\n            book.kobo_reading_state = kobo_reading_state\n        ub.session.merge(book)\n        ub.session_commit(\"Book {} readbit toggled\".format(book_id))\n    else:\n        try:\n            calibre_db.update_title_sort(config)\n            book = calibre_db.get_filtered_book(book_id)\n            read_status = getattr(book, 'custom_column_' + str(config.config_read_column))\n            if len(read_status):\n                read_status[0].value = not read_status[0].value\n                calibre_db.session.commit()\n            else:\n                cc_class = db.cc_classes[config.config_read_column]\n                new_cc = cc_class(value=1, book=book_id)\n                calibre_db.session.add(new_cc)\n                calibre_db.session.commit()\n        except (KeyError, AttributeError):\n            log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n            return \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column), 400\n        except (OperationalError, InvalidRequestError) as e:\n            calibre_db.session.rollback()\n            log.error(u\"Read status could not set: %e\", e)\n            return \"Read status could not set: {}\".format(e), 400\n    return \"\"\n\n@web.route(\"/ajax/togglearchived/<int:book_id>\", methods=['POST'])\n@login_required\ndef toggle_archived(book_id):\n    archived_book = ub.session.query(ub.ArchivedBook).filter(and_(ub.ArchivedBook.user_id == int(current_user.id),\n                                                                  ub.ArchivedBook.book_id == book_id)).first()\n    if archived_book:\n        archived_book.is_archived = not archived_book.is_archived\n        archived_book.last_modified = datetime.utcnow()\n    else:\n        archived_book = ub.ArchivedBook(user_id=current_user.id, book_id=book_id)\n        archived_book.is_archived = True\n    ub.session.merge(archived_book)\n    ub.session_commit(\"Book {} archivebit toggled\".format(book_id))\n    return \"\"\n\n\n@web.route(\"/ajax/view\", methods=[\"POST\"])\n@login_required_if_no_ano\ndef update_view():\n    to_save = request.get_json()\n    try:\n        for element in to_save:\n            for param in to_save[element]:\n                current_user.set_view_property(element, param, to_save[element][param])\n    except Exception as ex:\n        log.error(\"Could not save view_settings: %r %r: %e\", request, to_save, ex)\n        return \"Invalid request\", 400\n    return \"1\", 200\n\n\n'''\n@web.route(\"/ajax/getcomic/<int:book_id>/<book_format>/<int:page>\")\n@login_required\ndef get_comic_book(book_id, book_format, page):\n    book = calibre_db.get_book(book_id)\n    if not book:\n        return \"\", 204\n    else:\n        for bookformat in book.data:\n            if bookformat.format.lower() == book_format.lower():\n                cbr_file = os.path.join(config.config_calibre_dir, book.path, bookformat.name) + \".\" + book_format\n                if book_format in (\"cbr\", \"rar\"):\n                    if feature_support['rar'] == True:\n                        rarfile.UNRAR_TOOL = config.config_rarfile_location\n                        try:\n                            rf = rarfile.RarFile(cbr_file)\n                            names = sort(rf.namelist())\n                            extract = lambda page: rf.read(names[page])\n                        except:\n                            # rarfile not valid\n                            log.error('Unrar binary not found, or unable to decompress file %s', cbr_file)\n                            return \"\", 204\n                    else:\n                        log.info('Unrar is not supported please install python rarfile extension')\n                        # no support means return nothing\n                        return \"\", 204\n                elif book_format in (\"cbz\", \"zip\"):\n                    zf = zipfile.ZipFile(cbr_file)\n                    names=sort(zf.namelist())\n                    extract = lambda page: zf.read(names[page])\n                elif book_format in (\"cbt\", \"tar\"):\n                    tf = tarfile.TarFile(cbr_file)\n                    names=sort(tf.getnames())\n                    extract = lambda page: tf.extractfile(names[page]).read()\n                else:\n                    log.error('unsupported comic format')\n                    return \"\", 204\n\n                if sys.version_info.major >= 3:\n                    b64 = codecs.encode(extract(page), 'base64').decode()\n                else:\n                    b64 = extract(page).encode('base64')\n                ext = names[page].rpartition('.')[-1]\n                if ext not in ('png', 'gif', 'jpg', 'jpeg', 'webp'):\n                    ext = 'png'\n                extractedfile=\"data:image/\" + ext + \";base64,\" + b64\n                fileData={\"name\": names[page], \"page\":page, \"last\":len(names)-1, \"content\": extractedfile}\n                return make_response(json.dumps(fileData))\n        return \"\", 204\n'''\n\n\n# ################################### Typeahead ##################################################################\n\n\n@web.route(\"/get_authors_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_authors_json():\n    return calibre_db.get_typeahead(db.Authors, request.args.get('q'), ('|', ','))\n\n\n@web.route(\"/get_publishers_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_publishers_json():\n    return calibre_db.get_typeahead(db.Publishers, request.args.get('q'), ('|', ','))\n\n\n@web.route(\"/get_tags_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_tags_json():\n    return calibre_db.get_typeahead(db.Tags, request.args.get('q'), tag_filter=tags_filters())\n\n\n@web.route(\"/get_series_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_series_json():\n    return calibre_db.get_typeahead(db.Series, request.args.get('q'))\n\n\n@web.route(\"/get_languages_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_languages_json():\n    query = (request.args.get('q') or '').lower()\n    language_names = isoLanguages.get_language_names(get_locale())\n    entries_start = [s for key, s in language_names.items() if s.lower().startswith(query.lower())]\n    if len(entries_start) < 5:\n        entries = [s for key, s in language_names.items() if query in s.lower()]\n        entries_start.extend(entries[0:(5 - len(entries_start))])\n        entries_start = list(set(entries_start))\n    json_dumps = json.dumps([dict(name=r) for r in entries_start[0:5]])\n    return json_dumps\n\n\n@web.route(\"/get_matching_tags\", methods=['GET'])\n@login_required_if_no_ano\ndef get_matching_tags():\n    tag_dict = {'tags': []}\n    q = calibre_db.session.query(db.Books).filter(calibre_db.common_filters(True))\n    calibre_db.session.connection().connection.connection.create_function(\"lower\", 1, db.lcase)\n    author_input = request.args.get('author_name') or ''\n    title_input = request.args.get('book_title') or ''\n    include_tag_inputs = request.args.getlist('include_tag') or ''\n    exclude_tag_inputs = request.args.getlist('exclude_tag') or ''\n    q = q.filter(db.Books.authors.any(func.lower(db.Authors.name).ilike(\"%\" + author_input + \"%\")),\n                 func.lower(db.Books.title).ilike(\"%\" + title_input + \"%\"))\n    if len(include_tag_inputs) > 0:\n        for tag in include_tag_inputs:\n            q = q.filter(db.Books.tags.any(db.Tags.id == tag))\n    if len(exclude_tag_inputs) > 0:\n        for tag in exclude_tag_inputs:\n            q = q.filter(not_(db.Books.tags.any(db.Tags.id == tag)))\n    for book in q:\n        for tag in book.tags:\n            if tag.id not in tag_dict['tags']:\n                tag_dict['tags'].append(tag.id)\n    json_dumps = json.dumps(tag_dict)\n    return json_dumps\n\n\ndef get_sort_function(sort, data):\n    order = [db.Books.timestamp.desc()]\n    if sort == 'stored':\n        sort = current_user.get_view_property(data, 'stored')\n    else:\n        current_user.set_view_property(data, 'stored', sort)\n    if sort == 'pubnew':\n        order = [db.Books.pubdate.desc()]\n    if sort == 'pubold':\n        order = [db.Books.pubdate]\n    if sort == 'abc':\n        order = [db.Books.sort]\n    if sort == 'zyx':\n        order = [db.Books.sort.desc()]\n    if sort == 'new':\n        order = [db.Books.timestamp.desc()]\n    if sort == 'old':\n        order = [db.Books.timestamp]\n    if sort == 'authaz':\n        order = [db.Books.author_sort.asc(), db.Series.name, db.Books.series_index]\n    if sort == 'authza':\n        order = [db.Books.author_sort.desc(), db.Series.name.desc(), db.Books.series_index.desc()]\n    if sort == 'seriesasc':\n        order = [db.Books.series_index.asc()]\n    if sort == 'seriesdesc':\n        order = [db.Books.series_index.desc()]\n    return order\n\n\ndef render_books_list(data, sort, book_id, page):\n    order = get_sort_function(sort, data)\n    if data == \"rated\":\n        return render_rated_books(page, book_id, order=order)\n    elif data == \"discover\":\n        return render_discover_books(page, book_id)\n    elif data == \"unread\":\n        return render_read_books(page, False, order=order)\n    elif data == \"read\":\n        return render_read_books(page, True, order=order)\n    elif data == \"hot\":\n        return render_hot_books(page)\n    elif data == \"download\":\n        return render_downloaded_books(page, order, book_id)\n    elif data == \"author\":\n        return render_author_books(page, book_id, order)\n    elif data == \"publisher\":\n        return render_publisher_books(page, book_id, order)\n    elif data == \"series\":\n        return render_series_books(page, book_id, order)\n    elif data == \"ratings\":\n        return render_ratings_books(page, book_id, order)\n    elif data == \"formats\":\n        return render_formats_books(page, book_id, order)\n    elif data == \"category\":\n        return render_category_books(page, book_id, order)\n    elif data == \"language\":\n        return render_language_books(page, book_id, order)\n    elif data == \"archived\":\n        return render_archived_books(page, order)\n    elif data == \"search\":\n        term = (request.args.get('query') or '')\n        offset = int(int(config.config_books_per_page) * (page - 1))\n        return render_search_results(term, offset, order, config.config_books_per_page)\n    elif data == \"advsearch\":\n        term = json.loads(flask_session['query'])\n        offset = int(int(config.config_books_per_page) * (page - 1))\n        return render_adv_search_results(term, offset, order, config.config_books_per_page)\n    else:\n        website = data or \"newest\"\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0, db.Books, True, order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=_(u\"Books\"), page=website)\n\n\ndef render_rated_books(page, book_id, order):\n    if current_user.check_visibility(constants.SIDEBAR_BEST_RATED):\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.ratings.any(db.Ratings.rating > 9),\n                                                                order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     id=book_id, title=_(u\"Top Rated Books\"), page=\"rated\")\n    else:\n        abort(404)\n\n\ndef render_discover_books(page, book_id):\n    if current_user.check_visibility(constants.SIDEBAR_RANDOM):\n        entries, __, pagination = calibre_db.fill_indexpage(page, 0, db.Books, True, [func.randomblob(2)])\n        pagination = Pagination(1, config.config_books_per_page, config.config_books_per_page)\n        return render_title_template('discover.html', entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Discover (Random Books)\"), page=\"discover\")\n    else:\n        abort(404)\n\ndef render_hot_books(page):\n    if current_user.check_visibility(constants.SIDEBAR_HOT):\n        if current_user.show_detail_random():\n            random = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                .order_by(func.random()).limit(config.config_random_books)\n        else:\n            random = false()\n        off = int(int(config.config_books_per_page) * (page - 1))\n        all_books = ub.session.query(ub.Downloads, func.count(ub.Downloads.book_id)).order_by(\n            func.count(ub.Downloads.book_id).desc()).group_by(ub.Downloads.book_id)\n        hot_books = all_books.offset(off).limit(config.config_books_per_page)\n        entries = list()\n        for book in hot_books:\n            downloadBook = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).filter(\n                db.Books.id == book.Downloads.book_id).first()\n            if downloadBook:\n                entries.append(downloadBook)\n            else:\n                ub.delete_download(book.Downloads.book_id)\n        numBooks = entries.__len__()\n        pagination = Pagination(page, config.config_books_per_page, numBooks)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=_(u\"Hot Books (Most Downloaded)\"), page=\"hot\")\n    else:\n        abort(404)\n\n\ndef render_downloaded_books(page, order, user_id):\n    if current_user.role_admin():\n        user_id = int(user_id)\n    else:\n        user_id = current_user.id\n    if current_user.check_visibility(constants.SIDEBAR_DOWNLOAD):\n        if current_user.show_detail_random():\n            random = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                .order_by(func.random()).limit(config.config_random_books)\n        else:\n            random = false()\n\n        entries, __, pagination = calibre_db.fill_indexpage(page,\n                                                            0,\n                                                            db.Books,\n                                                            ub.Downloads.user_id == user_id,\n                                                            order,\n                                                            ub.Downloads, db.Books.id == ub.Downloads.book_id)\n        for book in entries:\n            if not calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                             .filter(db.Books.id == book.id).first():\n                ub.delete_download(book.id)\n        user = ub.session.query(ub.User).filter(ub.User.id == user_id).first()\n        return render_title_template('index.html',\n                                     random=random,\n                                     entries=entries,\n                                     pagination=pagination,\n                                     id=user_id,\n                                     title=_(u\"Downloaded books by %(user)s\",user=user.name),\n                                     page=\"download\")\n    else:\n        abort(404)\n\n\ndef render_author_books(page, author_id, order):\n    entries, __, pagination = calibre_db.fill_indexpage(page, 0,\n                                                        db.Books,\n                                                        db.Books.authors.any(db.Authors.id == author_id),\n                                                        [order[0], db.Series.name, db.Books.series_index],\n                                                        db.books_series_link,\n                                                        db.Books.id == db.books_series_link.c.book,\n                                                        db.Series)\n    if entries is None or not len(entries):\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),\n              category=\"error\")\n        return redirect(url_for(\"web.index\"))\n    if constants.sqlalchemy_version2:\n        author = calibre_db.session.get(db.Authors, author_id)\n    else:\n        author = calibre_db.session.query(db.Authors).get(author_id)\n    author_name = author.name.replace('|', ',')\n\n    author_info = None\n    other_books = []\n    if services.goodreads_support and config.config_use_goodreads:\n        author_info = services.goodreads_support.get_author_info(author_name)\n        other_books = services.goodreads_support.get_other_books(author_info, entries)\n\n    return render_title_template('author.html', entries=entries, pagination=pagination, id=author_id,\n                                 title=_(u\"Author: %(name)s\", name=author_name), author=author_info,\n                                 other_books=other_books, page=\"author\")\n\n\ndef render_publisher_books(page, book_id, order):\n    publisher = calibre_db.session.query(db.Publishers).filter(db.Publishers.id == book_id).first()\n    if publisher:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.publishers.any(db.Publishers.id == book_id),\n                                                                [db.Series.name, order[0], db.Books.series_index],\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Publisher: %(name)s\", name=publisher.name), page=\"publisher\")\n    else:\n        abort(404)\n\n\ndef render_series_books(page, book_id, order):\n    name = calibre_db.session.query(db.Series).filter(db.Series.id == book_id).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.series.any(db.Series.id == book_id),\n                                                                [order[0]])\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"Series: %(serie)s\", serie=name.name), page=\"series\")\n    else:\n        abort(404)\n\n\ndef render_ratings_books(page, book_id, order):\n    name = calibre_db.session.query(db.Ratings).filter(db.Ratings.id == book_id).first()\n    entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                            db.Books,\n                                                            db.Books.ratings.any(db.Ratings.id == book_id),\n                                                            [order[0]])\n    if name and name.rating <= 10:\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"Rating: %(rating)s stars\", rating=int(name.rating / 2)), page=\"ratings\")\n    else:\n        abort(404)\n\n\ndef render_formats_books(page, book_id, order):\n    name = calibre_db.session.query(db.Data).filter(db.Data.format == book_id.upper()).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.data.any(db.Data.format == book_id.upper()),\n                                                                [order[0]])\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"File format: %(format)s\", format=name.format), page=\"formats\")\n    else:\n        abort(404)\n\n\ndef render_category_books(page, book_id, order):\n    name = calibre_db.session.query(db.Tags).filter(db.Tags.id == book_id).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.tags.any(db.Tags.id == book_id),\n                                                                [order[0], db.Series.name, db.Books.series_index],\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Category: %(name)s\", name=name.name), page=\"category\")\n    else:\n        abort(404)\n\n\ndef render_language_books(page, name, order):\n    try:\n        lang_name = isoLanguages.get_language_name(get_locale(), name)\n    except KeyError:\n        abort(404)\n\n    #try:\n    #    cur_l = LC.parse(name)\n    #    lang_name = cur_l.get_language_name(get_locale())\n    #except UnknownLocaleError:\n    #    try:\n    #        lang_name = _(isoLanguages.get(part3=name).name)\n    #    except KeyError:\n    #        abort(404)\n    entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                            db.Books,\n                                                            db.Books.languages.any(db.Languages.lang_code == name),\n                                                            [order[0]])\n    return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=name,\n                                 title=_(u\"Language: %(name)s\", name=lang_name), page=\"language\")\n\n\ndef render_read_books(page, are_read, as_xml=False, order=None):\n    order = order or []\n    if not config.config_read_column:\n        if are_read:\n            db_filter = and_(ub.ReadBook.user_id == int(current_user.id),\n                             ub.ReadBook.read_status == ub.ReadBook.STATUS_FINISHED)\n        else:\n            db_filter = coalesce(ub.ReadBook.read_status, 0) != ub.ReadBook.STATUS_FINISHED\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db_filter,\n                                                                order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series,\n                                                                ub.ReadBook, db.Books.id == ub.ReadBook.book_id)\n    else:\n        try:\n            if are_read:\n                db_filter = db.cc_classes[config.config_read_column].value == True\n            else:\n                db_filter = coalesce(db.cc_classes[config.config_read_column].value, False) != True\n            entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                    db.Books,\n                                                                    db_filter,\n                                                                    order,\n                                                                    db.books_series_link,\n                                                                    db.Books.id == db.books_series_link.c.book,\n                                                                    db.Series,\n                                                                    db.cc_classes[config.config_read_column])\n        except (KeyError, AttributeError):\n            log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n            if not as_xml:\n                flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",\n                        column=config.config_read_column),\n                      category=\"error\")\n                return redirect(url_for(\"web.index\"))\n            # ToDo: Handle error Case for opds\n    if as_xml:\n        return entries, pagination\n    else:\n        if are_read:\n            name = _(u'Read Books') + ' (' + str(pagination.total_count) + ')'\n            pagename = \"read\"\n        else:\n            name = _(u'Unread Books') + ' (' + str(pagination.total_count) + ')'\n            pagename = \"unread\"\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=name, page=pagename)\n\n\ndef render_archived_books(page, order):\n    order = order or []\n    archived_books = (\n        ub.session.query(ub.ArchivedBook)\n        .filter(ub.ArchivedBook.user_id == int(current_user.id))\n        .filter(ub.ArchivedBook.is_archived == True)\n        .all()\n    )\n    archived_book_ids = [archived_book.book_id for archived_book in archived_books]\n\n    archived_filter = db.Books.id.in_(archived_book_ids)\n\n    entries, random, pagination = calibre_db.fill_indexpage_with_archived_books(page, 0,\n                                                                                db.Books,\n                                                                                archived_filter,\n                                                                                order,\n                                                                                allow_show_archived=True)\n\n    name = _(u'Archived Books') + ' (' + str(len(archived_book_ids)) + ')'\n    pagename = \"archived\"\n    return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                 title=name, page=pagename)\n\n\ndef render_prepare_search_form(cc):\n    # prepare data for search-form\n    tags = calibre_db.session.query(db.Tags)\\\n        .join(db.books_tags_link)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(text('books_tags_link.tag'))\\\n        .order_by(db.Tags.name).all()\n    series = calibre_db.session.query(db.Series)\\\n        .join(db.books_series_link)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(text('books_series_link.series'))\\\n        .order_by(db.Series.name)\\\n        .filter(calibre_db.common_filters()).all()\n    shelves = ub.session.query(ub.Shelf)\\\n        .filter(or_(ub.Shelf.is_public == 1, ub.Shelf.user_id == int(current_user.id)))\\\n        .order_by(ub.Shelf.name).all()\n    extensions = calibre_db.session.query(db.Data)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(db.Data.format)\\\n        .order_by(db.Data.format).all()\n    if current_user.filter_language() == u\"all\":\n        languages = calibre_db.speaking_language()\n    else:\n        languages = None\n    return render_title_template('search_form.html', tags=tags, languages=languages, extensions=extensions,\n                                 series=series,shelves=shelves, title=_(u\"Advanced Search\"), cc=cc, page=\"advsearch\")\n\n\ndef render_search_results(term, offset=None, order=None, limit=None):\n    join = db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series\n    entries, result_count, pagination = calibre_db.get_search_results(term, offset, order, limit, *join)\n    return render_title_template('search.html',\n                                 searchterm=term,\n                                 pagination=pagination,\n                                 query=term,\n                                 adv_searchterm=term,\n                                 entries=entries,\n                                 result_count=result_count,\n                                 title=_(u\"Search\"),\n                                 page=\"search\")\n\n\n# ################################### View Books list ##################################################################\n\n\n@web.route(\"/\", defaults={'page': 1})\n@web.route('/page/<int:page>')\n@login_required_if_no_ano\ndef index(page):\n    sort_param = (request.args.get('sort') or 'stored').lower()\n    return render_books_list(\"newest\", sort_param, 1, page)\n\n\n@web.route('/<data>/<sort_param>', defaults={'page': 1, 'book_id': 1})\n@web.route('/<data>/<sort_param>/', defaults={'page': 1, 'book_id': 1})\n@web.route('/<data>/<sort_param>/<book_id>', defaults={'page': 1})\n@web.route('/<data>/<sort_param>/<book_id>/<int:page>')\n@login_required_if_no_ano\ndef books_list(data, sort_param, book_id, page):\n    return render_books_list(data, sort_param, book_id, page)\n\n\n@web.route(\"/table\")\n@login_required\ndef books_table():\n    visibility = current_user.view_settings.get('table', {})\n    return render_title_template('book_table.html', title=_(u\"Books List\"), page=\"book_table\",\n                                 visiblility=visibility)\n\n@web.route(\"/ajax/listbooks\")\n@login_required\ndef list_books():\n    off = int(request.args.get(\"offset\") or 0)\n    limit = int(request.args.get(\"limit\") or config.config_books_per_page)\n    search = request.args.get(\"search\")\n    sort = request.args.get(\"sort\", \"id\")\n    order = request.args.get(\"order\", \"\").lower()\n    state = None\n    join = tuple()\n\n    if sort == \"state\":\n        state = json.loads(request.args.get(\"state\", \"[]\"))\n    elif sort == \"tags\":\n        order = [db.Tags.name.asc()] if order == \"asc\" else [db.Tags.name.desc()]\n        join = db.books_tags_link,db.Books.id == db.books_tags_link.c.book, db.Tags\n    elif sort == \"series\":\n        order = [db.Series.name.asc()] if order == \"asc\" else [db.Series.name.desc()]\n        join = db.books_series_link,db.Books.id == db.books_series_link.c.book, db.Series\n    elif sort == \"publishers\":\n        order = [db.Publishers.name.asc()] if order == \"asc\" else [db.Publishers.name.desc()]\n        join = db.books_publishers_link,db.Books.id == db.books_publishers_link.c.book, db.Publishers\n    elif sort == \"authors\":\n        order = [db.Authors.name.asc(), db.Series.name, db.Books.series_index] if order == \"asc\" \\\n            else [db.Authors.name.desc(), db.Series.name.desc(), db.Books.series_index.desc()]\n        join = db.books_authors_link, db.Books.id == db.books_authors_link.c.book, db.Authors, \\\n               db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series\n    elif sort == \"languages\":\n        order = [db.Languages.lang_code.asc()] if order == \"asc\" else [db.Languages.lang_code.desc()]\n        join = db.books_languages_link, db.Books.id == db.books_languages_link.c.book, db.Languages\n    elif order and sort in [\"sort\", \"title\", \"authors_sort\", \"series_index\"]:\n        order = [text(sort + \" \" + order)]\n    elif not state:\n        order = [db.Books.timestamp.desc()]\n\n    total_count = filtered_count = calibre_db.session.query(db.Books).count()\n\n    if state:\n        if search:\n            books = calibre_db.search_query(search).all()\n            filtered_count = len(books)\n        else:\n            books = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).all()\n        entries = calibre_db.get_checkbox_sorted(books, state, off, limit, order)\n    elif search:\n        entries, filtered_count, __ = calibre_db.get_search_results(search, off, order, limit, *join)\n    else:\n        entries, __, __ = calibre_db.fill_indexpage((int(off) / (int(limit)) + 1), limit, db.Books, True, order, *join)\n\n    for entry in entries:\n        for index in range(0, len(entry.languages)):\n            entry.languages[index].language_name = isoLanguages.get_language_name(get_locale(), entry.languages[\n                index].lang_code)\n            #try:\n            #    entry.languages[index].language_name = LC.parse(entry.languages[index].lang_code)\\\n            #        .get_language_name(get_locale())\n            #except UnknownLocaleError:\n            #    entry.languages[index].language_name = _(\n            #        isoLanguages.get(part3=entry.languages[index].lang_code).name)\n    table_entries = {'totalNotFiltered': total_count, 'total': filtered_count, \"rows\": entries}\n    js_list = json.dumps(table_entries, cls=db.AlchemyEncoder)\n\n    response = make_response(js_list)\n    response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\"\n    return response\n\n@web.route(\"/ajax/table_settings\", methods=['POST'])\n@login_required\ndef update_table_settings():\n    # vals = request.get_json()\n    # ToDo: Save table settings\n    current_user.view_settings['table'] = json.loads(request.data)\n    try:\n        try:\n            flag_modified(current_user, \"view_settings\")\n        except AttributeError:\n            pass\n        ub.session.commit()\n    except (InvalidRequestError, OperationalError):\n        log.error(\"Invalid request received: %r \", request, )\n        return \"Invalid request\", 400\n    return \"\"\n\n\n@web.route(\"/author\")\n@login_required_if_no_ano\ndef author_list():\n    if current_user.check_visibility(constants.SIDEBAR_AUTHOR):\n        if current_user.get_view_property('author', 'dir') == 'desc':\n            order = db.Authors.sort.desc()\n            order_no = 0\n        else:\n            order = db.Authors.sort.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Authors, func.count('books_authors_link.book').label('count')) \\\n            .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_authors_link.author')).order_by(order).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Authors.sort, 1, 1)).label('char')) \\\n            .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Authors.sort, 1, 1))).all()\n        # If not creating a copy, readonly databases can not display authornames with \"|\" in it as changing the name\n        # starts a change session\n        autor_copy = copy.deepcopy(entries)\n        for entry in autor_copy:\n            entry.Authors.name = entry.Authors.name.replace('|', ',')\n        return render_title_template('list.html', entries=autor_copy, folder='web.books_list', charlist=charlist,\n                                     title=u\"Authors\", page=\"authorlist\", data='author', order=order_no)\n    else:\n        abort(404)\n\n@web.route(\"/downloadlist\")\n@login_required_if_no_ano\ndef download_list():\n    if current_user.get_view_property('download', 'dir') == 'desc':\n        order = ub.User.name.desc()\n        order_no = 0\n    else:\n        order = ub.User.name.asc()\n        order_no = 1\n    if current_user.check_visibility(constants.SIDEBAR_DOWNLOAD) and current_user.role_admin():\n        entries = ub.session.query(ub.User, func.count(ub.Downloads.book_id).label('count'))\\\n            .join(ub.Downloads).group_by(ub.Downloads.user_id).order_by(order).all()\n        charlist = ub.session.query(func.upper(func.substr(ub.User.name, 1, 1)).label('char')) \\\n            .filter(ub.User.role.op('&')(constants.ROLE_ANONYMOUS) != constants.ROLE_ANONYMOUS) \\\n            .group_by(func.upper(func.substr(ub.User.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Downloads\"), page=\"downloadlist\", data=\"download\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/publisher\")\n@login_required_if_no_ano\ndef publisher_list():\n    if current_user.get_view_property('publisher', 'dir') == 'desc':\n        order = db.Publishers.name.desc()\n        order_no = 0\n    else:\n        order = db.Publishers.name.asc()\n        order_no = 1\n    if current_user.check_visibility(constants.SIDEBAR_PUBLISHER):\n        entries = calibre_db.session.query(db.Publishers, func.count('books_publishers_link.book').label('count')) \\\n            .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_publishers_link.publisher')).order_by(order).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Publishers.name, 1, 1)).label('char')) \\\n            .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Publishers.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Publishers\"), page=\"publisherlist\", data=\"publisher\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/series\")\n@login_required_if_no_ano\ndef series_list():\n    if current_user.check_visibility(constants.SIDEBAR_SERIES):\n        if current_user.get_view_property('series', 'dir') == 'desc':\n            order = db.Series.sort.desc()\n            order_no = 0\n        else:\n            order = db.Series.sort.asc()\n            order_no = 1\n        if current_user.get_view_property('series', 'series_view') == 'list':\n            entries = calibre_db.session.query(db.Series, func.count('books_series_link.book').label('count')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(text('books_series_link.series')).order_by(order).all()\n            charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()\n            return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                         title=_(u\"Series\"), page=\"serieslist\", data=\"series\")\n        else:\n            entries = calibre_db.session.query(db.Books, func.count('books_series_link').label('count')) \\\n                .join(db.books_series_link).join(db.Series).filter(calibre_db.common_filters()) \\\n                .group_by(text('books_series_link.series')).order_by(order).all()\n            charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()\n\n            return render_title_template('grid.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                         title=_(u\"Series\"), page=\"serieslist\", data=\"series\", bodyClass=\"grid-view\",\n                                         order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/ratings\")\n@login_required_if_no_ano\ndef ratings_list():\n    if current_user.check_visibility(constants.SIDEBAR_RATING):\n        if current_user.get_view_property('ratings', 'dir') == 'desc':\n            order = db.Ratings.rating.desc()\n            order_no = 0\n        else:\n            order = db.Ratings.rating.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Ratings, func.count('books_ratings_link.book').label('count'),\n                                   (db.Ratings.rating / 2).label('name')) \\\n            .join(db.books_ratings_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_ratings_link.rating')).order_by(order).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=list(),\n                                     title=_(u\"Ratings list\"), page=\"ratingslist\", data=\"ratings\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/formats\")\n@login_required_if_no_ano\ndef formats_list():\n    if current_user.check_visibility(constants.SIDEBAR_FORMAT):\n        if current_user.get_view_property('ratings', 'dir') == 'desc':\n            order = db.Data.format.desc()\n            order_no = 0\n        else:\n            order = db.Data.format.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Data,\n                                           func.count('data.book').label('count'),\n                                           db.Data.format.label('format')) \\\n            .join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(db.Data.format).order_by(order).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=list(),\n                                     title=_(u\"File formats list\"), page=\"formatslist\", data=\"formats\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/language\")\n@login_required_if_no_ano\ndef language_overview():\n    if current_user.check_visibility(constants.SIDEBAR_LANGUAGE):\n        charlist = list()\n        if current_user.filter_language() == u\"all\":\n            languages = calibre_db.speaking_language()\n            # ToDo: generate first character list for languages\n        else:\n            #try:\n            #    cur_l = LC.parse(current_user.filter_language())\n            #except UnknownLocaleError:\n            #    cur_l = None\n\n            languages = calibre_db.session.query(db.Languages).filter(\n                db.Languages.lang_code == current_user.filter_language()).all()\n            languages[0].name = isoLanguages.get_language_name(get_locale(), languages[0].name.lang_code)\n            #if cur_l:\n            #    languages[0].name = cur_l.get_language_name(get_locale())\n            #else:\n            #    languages[0].name = _(isoLanguages.get(part3=languages[0].lang_code).name)\n        lang_counter = calibre_db.session.query(db.books_languages_link,\n                                        func.count('books_languages_link.book').label('bookcount')).group_by(\n            text('books_languages_link.lang_code')).all()\n        return render_title_template('languages.html', languages=languages, lang_counter=lang_counter,\n                                     charlist=charlist, title=_(u\"Languages\"), page=\"langlist\",\n                                     data=\"language\")\n    else:\n        abort(404)\n\n\n@web.route(\"/category\")\n@login_required_if_no_ano\ndef category_list():\n    if current_user.check_visibility(constants.SIDEBAR_CATEGORY):\n        if current_user.get_view_property('category', 'dir') == 'desc':\n            order = db.Tags.name.desc()\n            order_no = 0\n        else:\n            order = db.Tags.name.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Tags, func.count('books_tags_link.book').label('count')) \\\n            .join(db.books_tags_link).join(db.Books).order_by(order).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_tags_link.tag')).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Tags.name, 1, 1)).label('char')) \\\n            .join(db.books_tags_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Tags.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Categories\"), page=\"catlist\", data=\"category\", order=order_no)\n    else:\n        abort(404)\n\n\n# ################################### Task functions ################################################################\n\n\n@web.route(\"/tasks\")\n@login_required\ndef get_tasks_status():\n    # if current user admin, show all email, otherwise only own emails\n    tasks = WorkerThread.getInstance().tasks\n    answer = render_task_status(tasks)\n    return render_title_template('tasks.html', entries=answer, title=_(u\"Tasks\"), page=\"tasks\")\n\n\n@app.route(\"/reconnect\")\ndef reconnect():\n    calibre_db.reconnect_db(config, ub.app_DB_path)\n    return json.dumps({})\n\n\n# ################################### Search functions ################################################################\n\n@web.route(\"/search\", methods=[\"GET\"])\n@login_required_if_no_ano\ndef search():\n    term = request.args.get(\"query\")\n    if term:\n        return redirect(url_for('web.books_list', data=\"search\", sort_param='stored', query=term))\n    else:\n        return render_title_template('search.html',\n                                     searchterm=\"\",\n                                     result_count=0,\n                                     title=_(u\"Search\"),\n                                     page=\"search\")\n\n\n@web.route(\"/advsearch\", methods=['POST'])\n@login_required_if_no_ano\ndef advanced_search():\n    values = dict(request.form)\n    params = ['include_tag', 'exclude_tag', 'include_serie', 'exclude_serie', 'include_shelf', 'exclude_shelf',\n              'include_language', 'exclude_language', 'include_extension', 'exclude_extension']\n    for param in params:\n        values[param] = list(request.form.getlist(param))\n    flask_session['query'] = json.dumps(values)\n    return redirect(url_for('web.books_list', data=\"advsearch\", sort_param='stored', query=\"\"))\n\n\ndef adv_search_custom_columns(cc, term, q):\n    for c in cc:\n        if c.datatype == \"datetime\":\n            custom_start = term.get('custom_column_' + str(c.id) + '_start')\n            custom_end = term.get('custom_column_' + str(c.id) + '_end')\n            if custom_start:\n                q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                    func.datetime(db.cc_classes[c.id].value) >= func.datetime(custom_start)))\n            if custom_end:\n                q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                    func.datetime(db.cc_classes[c.id].value) <= func.datetime(custom_end)))\n        else:\n            custom_query = term.get('custom_column_' + str(c.id))\n            if custom_query != '' and custom_query is not None:\n                if c.datatype == 'bool':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == (custom_query == \"True\")))\n                elif c.datatype == 'int' or c.datatype == 'float':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == custom_query))\n                elif c.datatype == 'rating':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == int(float(custom_query) * 2)))\n                else:\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        func.lower(db.cc_classes[c.id].value).ilike(\"%\" + custom_query + \"%\")))\n    return q\n\n\ndef adv_search_language(q, include_languages_inputs, exclude_languages_inputs):\n    if current_user.filter_language() != \"all\":\n        q = q.filter(db.Books.languages.any(db.Languages.lang_code == current_user.filter_language()))\n    else:\n        for language in include_languages_inputs:\n            q = q.filter(db.Books.languages.any(db.Languages.id == language))\n        for language in exclude_languages_inputs:\n            q = q.filter(not_(db.Books.series.any(db.Languages.id == language)))\n    return q\n\n\ndef adv_search_ratings(q, rating_high, rating_low):\n    if rating_high:\n        rating_high = int(rating_high) * 2\n        q = q.filter(db.Books.ratings.any(db.Ratings.rating <= rating_high))\n    if rating_low:\n        rating_low = int(rating_low) * 2\n        q = q.filter(db.Books.ratings.any(db.Ratings.rating >= rating_low))\n    return q\n\n\ndef adv_search_read_status(q, read_status):\n    if read_status:\n        if config.config_read_column:\n            try:\n                if read_status == \"True\":\n                    q = q.join(db.cc_classes[config.config_read_column], isouter=True) \\\n                        .filter(db.cc_classes[config.config_read_column].value == True)\n                else:\n                    q = q.join(db.cc_classes[config.config_read_column], isouter=True) \\\n                        .filter(coalesce(db.cc_classes[config.config_read_column].value, False) != True)\n            except (KeyError, AttributeError):\n                log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n                flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",\n                        column=config.config_read_column),\n                      category=\"error\")\n                return q\n        else:\n            if read_status == \"True\":\n                q = q.join(ub.ReadBook, db.Books.id == ub.ReadBook.book_id, isouter=True) \\\n                    .filter(ub.ReadBook.user_id == int(current_user.id),\n                            ub.ReadBook.read_status == ub.ReadBook.STATUS_FINISHED)\n            else:\n                q = q.join(ub.ReadBook, db.Books.id == ub.ReadBook.book_id, isouter=True) \\\n                    .filter(ub.ReadBook.user_id == int(current_user.id),\n                            coalesce(ub.ReadBook.read_status, 0) != ub.ReadBook.STATUS_FINISHED)\n    return q\n\n\ndef adv_search_extension(q, include_extension_inputs, exclude_extension_inputs):\n    for extension in include_extension_inputs:\n        q = q.filter(db.Books.data.any(db.Data.format == extension))\n    for extension in exclude_extension_inputs:\n        q = q.filter(not_(db.Books.data.any(db.Data.format == extension)))\n    return q\n\n\ndef adv_search_tag(q, include_tag_inputs, exclude_tag_inputs):\n    for tag in include_tag_inputs:\n        q = q.filter(db.Books.tags.any(db.Tags.id == tag))\n    for tag in exclude_tag_inputs:\n        q = q.filter(not_(db.Books.tags.any(db.Tags.id == tag)))\n    return q\n\n\ndef adv_search_serie(q, include_series_inputs, exclude_series_inputs):\n    for serie in include_series_inputs:\n        q = q.filter(db.Books.series.any(db.Series.id == serie))\n    for serie in exclude_series_inputs:\n        q = q.filter(not_(db.Books.series.any(db.Series.id == serie)))\n    return q\n\ndef adv_search_shelf(q, include_shelf_inputs, exclude_shelf_inputs):\n    q = q.outerjoin(ub.BookShelf, db.Books.id == ub.BookShelf.book_id)\\\n        .filter(or_(ub.BookShelf.shelf == None, ub.BookShelf.shelf.notin_(exclude_shelf_inputs)))\n    if len(include_shelf_inputs) > 0:\n        q = q.filter(ub.BookShelf.shelf.in_(include_shelf_inputs))\n    return q\n\ndef extend_search_term(searchterm,\n                       author_name,\n                       book_title,\n                       publisher,\n                       pub_start,\n                       pub_end,\n                       tags,\n                       rating_high,\n                       rating_low,\n                       read_status,\n                       ):\n    searchterm.extend((author_name.replace('|', ','), book_title, publisher))\n    if pub_start:\n        try:\n            searchterm.extend([_(u\"Published after \") +\n                               format_date(datetime.strptime(pub_start, \"%Y-%m-%d\"),\n                                           format='medium', locale=get_locale())])\n        except ValueError:\n            pub_start = u\"\"\n    if pub_end:\n        try:\n            searchterm.extend([_(u\"Published before \") +\n                               format_date(datetime.strptime(pub_end, \"%Y-%m-%d\"),\n                                           format='medium', locale=get_locale())])\n        except ValueError:\n            pub_start = u\"\"\n    elements = {'tag': db.Tags, 'serie':db.Series, 'shelf':ub.Shelf}\n    for key, db_element in elements.items():\n        tag_names = calibre_db.session.query(db_element).filter(db_element.id.in_(tags['include_' + key])).all()\n        searchterm.extend(tag.name for tag in tag_names)\n        tag_names = calibre_db.session.query(db_element).filter(db_element.id.in_(tags['exclude_' + key])).all()\n        searchterm.extend(tag.name for tag in tag_names)\n    language_names = calibre_db.session.query(db.Languages). \\\n        filter(db.Languages.id.in_(tags['include_language'])).all()\n    if language_names:\n        language_names = calibre_db.speaking_language(language_names)\n    searchterm.extend(language.name for language in language_names)\n    language_names = calibre_db.session.query(db.Languages). \\\n        filter(db.Languages.id.in_(tags['exclude_language'])).all()\n    if language_names:\n        language_names = calibre_db.speaking_language(language_names)\n    searchterm.extend(language.name for language in language_names)\n    if rating_high:\n        searchterm.extend([_(u\"Rating <= %(rating)s\", rating=rating_high)])\n    if rating_low:\n        searchterm.extend([_(u\"Rating >= %(rating)s\", rating=rating_low)])\n    if read_status:\n        searchterm.extend([_(u\"Read Status = %(status)s\", status=read_status)])\n    searchterm.extend(ext for ext in tags['include_extension'])\n    searchterm.extend(ext for ext in tags['exclude_extension'])\n    # handle custom columns\n    searchterm = \" + \".join(filter(None, searchterm))\n    return searchterm, pub_start, pub_end\n\n\ndef render_adv_search_results(term, offset=None, order=None, limit=None):\n    order = order or [db.Books.sort]\n    pagination = None\n\n    cc = get_cc_columns(filter_config_custom_read=True)\n    calibre_db.session.connection().connection.connection.create_function(\"lower\", 1, db.lcase)\n    q = calibre_db.session.query(db.Books).outerjoin(db.books_series_link, db.Books.id == db.books_series_link.c.book)\\\n        .outerjoin(db.Series)\\\n        .filter(calibre_db.common_filters(True))\n\n    # parse multiselects to a complete dict\n    tags = dict()\n    elements = ['tag', 'serie', 'shelf', 'language', 'extension']\n    for element in elements:\n        tags['include_' + element] = term.get('include_' + element)\n        tags['exclude_' + element] = term.get('exclude_' + element)\n\n    author_name = term.get(\"author_name\")\n    book_title = term.get(\"book_title\")\n    publisher = term.get(\"publisher\")\n    pub_start = term.get(\"publishstart\")\n    pub_end = term.get(\"publishend\")\n    rating_low = term.get(\"ratinghigh\")\n    rating_high = term.get(\"ratinglow\")\n    description = term.get(\"comment\")\n    read_status = term.get(\"read_status\")\n    if author_name:\n        author_name = author_name.strip().lower().replace(',', '|')\n    if book_title:\n        book_title = book_title.strip().lower()\n    if publisher:\n        publisher = publisher.strip().lower()\n\n    searchterm = []\n    cc_present = False\n    for c in cc:\n        if c.datatype == \"datetime\":\n            column_start = term.get('custom_column_' + str(c.id) + '_start')\n            column_end = term.get('custom_column_' + str(c.id) + '_end')\n            if column_start:\n                searchterm.extend([u\"{} >= {}\".format(c.name,\n                                                      format_date(datetime.strptime(column_start, \"%Y-%m-%d\"),\n                                                                      format='medium',\n                                                                      locale=get_locale())\n                                                      )])\n                cc_present = True\n            if column_end:\n                searchterm.extend([u\"{} <= {}\".format(c.name,\n                                                      format_date(datetime.strptime(column_end, \"%Y-%m-%d\").date(),\n                                                                      format='medium',\n                                                                      locale=get_locale())\n                                                      )])\n                cc_present = True\n        elif term.get('custom_column_' + str(c.id)):\n            searchterm.extend([(u\"{}: {}\".format(c.name, term.get('custom_column_' + str(c.id))))])\n            cc_present = True\n\n\n    if any(tags.values()) or author_name or book_title or publisher or pub_start or pub_end or rating_low \\\n       or rating_high or description or cc_present or read_status:\n        searchterm, pub_start, pub_end = extend_search_term(searchterm,\n                                                            author_name,\n                                                            book_title,\n                                                            publisher,\n                                                            pub_start,\n                                                            pub_end,\n                                                            tags,\n                                                            rating_high,\n                                                            rating_low,\n                                                            read_status)\n        q = q.filter()\n        if author_name:\n            q = q.filter(db.Books.authors.any(func.lower(db.Authors.name).ilike(\"%\" + author_name + \"%\")))\n        if book_title:\n            q = q.filter(func.lower(db.Books.title).ilike(\"%\" + book_title + \"%\"))\n        if pub_start:\n            q = q.filter(func.datetime(db.Books.pubdate) > func.datetime(pub_start))\n        if pub_end:\n            q = q.filter(func.datetime(db.Books.pubdate) < func.datetime(pub_end))\n        q = adv_search_read_status(q, read_status)\n        if publisher:\n            q = q.filter(db.Books.publishers.any(func.lower(db.Publishers.name).ilike(\"%\" + publisher + \"%\")))\n        q = adv_search_tag(q, tags['include_tag'], tags['exclude_tag'])\n        q = adv_search_serie(q, tags['include_serie'], tags['exclude_serie'])\n        q = adv_search_shelf(q, tags['include_shelf'], tags['exclude_shelf'])\n        q = adv_search_extension(q, tags['include_extension'], tags['exclude_extension'])\n        q = adv_search_language(q, tags['include_language'], tags['exclude_language'])\n        q = adv_search_ratings(q, rating_high, rating_low)\n\n        if description:\n            q = q.filter(db.Books.comments.any(func.lower(db.Comments.text).ilike(\"%\" + description + \"%\")))\n\n        # search custom culumns\n        try:\n            q = adv_search_custom_columns(cc, term, q)\n        except AttributeError as ex:\n            log.debug_or_exception(ex)\n            flash(_(\"Error on search for custom columns, please restart Calibre-Web\"), category=\"error\")\n\n    q = q.order_by(*order).all()\n    flask_session['query'] = json.dumps(term)\n    ub.store_ids(q)\n    result_count = len(q)\n    if offset != None and limit != None:\n        offset = int(offset)\n        limit_all = offset + int(limit)\n        pagination = Pagination((offset / (int(limit)) + 1), limit, result_count)\n    else:\n        offset = 0\n        limit_all = result_count\n    return render_title_template('search.html',\n                                 adv_searchterm=searchterm,\n                                 pagination=pagination,\n                                 entries=q[offset:limit_all],\n                                 result_count=result_count,\n                                 title=_(u\"Advanced Search\"), page=\"advsearch\")\n\n\n\n@web.route(\"/advsearch\", methods=['GET'])\n@login_required_if_no_ano\ndef advanced_search_form():\n    # Build custom columns names\n    cc = get_cc_columns(filter_config_custom_read=True)\n    return render_prepare_search_form(cc)\n\n\n# ################################### Download/Send ##################################################################\n\n\n@web.route(\"/cover/<int:book_id>\")\n@login_required_if_no_ano\ndef get_cover(book_id):\n    return get_book_cover(book_id)\n\n@web.route(\"/robots.txt\")\ndef get_robots():\n    return send_from_directory(constants.STATIC_DIR, \"robots.txt\")\n\n@web.route(\"/show/<int:book_id>/<book_format>\", defaults={'anyname': 'None'})\n@web.route(\"/show/<int:book_id>/<book_format>/<anyname>\")\n@login_required_if_no_ano\n@viewer_required\ndef serve_book(book_id, book_format, anyname):\n    book_format = book_format.split(\".\")[0]\n    book = calibre_db.get_book(book_id)\n    data = calibre_db.get_book_format(book_id, book_format.upper())\n    if not data:\n        return \"File not in Database\"\n    log.info('Serving book: %s', data.name)\n    if config.config_use_google_drive:\n        try:\n            headers = Headers()\n            headers[\"Content-Type\"] = mimetypes.types_map.get('.' + book_format, \"application/octet-stream\")\n            df = getFileFromEbooksFolder(book.path, data.name + \".\" + book_format)\n            return do_gdrive_download(df, headers, (book_format.upper() == 'TXT'))\n        except AttributeError as ex:\n            log.debug_or_exception(ex)\n            return \"File Not Found\"\n    else:\n        if book_format.upper() == 'TXT':\n            try:\n                rawdata = open(os.path.join(config.config_calibre_dir, book.path, data.name + \".\" + book_format),\n                               \"rb\").read()\n                result = chardet.detect(rawdata)\n                return make_response(\n                    rawdata.decode(result['encoding'], 'surrogatepass').encode('utf-8', 'surrogatepass'))\n            except FileNotFoundError:\n                log.error(\"File Not Found\")\n                return \"File Not Found\"\n        return send_from_directory(os.path.join(config.config_calibre_dir, book.path), data.name + \".\" + book_format)\n\n\n@web.route(\"/download/<int:book_id>/<book_format>\", defaults={'anyname': 'None'})\n@web.route(\"/download/<int:book_id>/<book_format>/<anyname>\")\n@login_required_if_no_ano\n@download_required\ndef download_link(book_id, book_format, anyname):\n    client = \"kobo\" if \"Kobo\" in request.headers.get('User-Agent') else \"\"\n    return get_download_link(book_id, book_format, client)\n\n\n@web.route('/send/<int:book_id>/<book_format>/<int:convert>')\n@login_required\n@download_required\ndef send_to_kindle(book_id, book_format, convert):\n    if not config.get_mail_server_configured():\n        flash(_(u\"Please configure the SMTP mail settings first...\"), category=\"error\")\n    elif current_user.kindle_mail:\n        result = send_mail(book_id, book_format, convert, current_user.kindle_mail, config.config_calibre_dir,\n                           current_user.name)\n        if result is None:\n            flash(_(u\"Book successfully queued for sending to %(kindlemail)s\", kindlemail=current_user.kindle_mail),\n                  category=\"success\")\n            ub.update_download(book_id, int(current_user.id))\n        else:\n            flash(_(u\"Oops! There was an error sending this book: %(res)s\", res=result), category=\"error\")\n    else:\n        flash(_(u\"Please update your profile with a valid Send to Kindle E-mail Address.\"), category=\"error\")\n    if \"HTTP_REFERER\" in request.environ:\n        return redirect(request.environ[\"HTTP_REFERER\"])\n    else:\n        return redirect(url_for('web.index'))\n\n\n# ################################### Login Logout ##################################################################\n\n\n@web.route('/register', methods=['GET', 'POST'])\ndef register():\n    if not config.config_public_reg:\n        abort(404)\n    if current_user is not None and current_user.is_authenticated:\n        return redirect(url_for('web.index'))\n    if not config.get_mail_server_configured():\n        flash(_(u\"E-Mail server is not configured, please contact your administrator!\"), category=\"error\")\n        return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n\n    if request.method == \"POST\":\n        to_save = request.form.to_dict()\n        nickname = to_save[\"email\"].strip() if config.config_register_email else to_save.get('name')\n        if not nickname or not to_save.get(\"email\"):\n            flash(_(u\"Please fill out all fields!\"), category=\"error\")\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        try:\n            nickname = check_username(nickname)\n            email = check_email(to_save[\"email\"])\n        except Exception as ex:\n            flash(str(ex), category=\"error\")\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n\n        content = ub.User()\n        if check_valid_domain(email):\n            content.name = nickname\n            content.email = email\n            password = generate_random_password()\n            content.password = generate_password_hash(password)\n            content.role = config.config_default_role\n            content.sidebar_view = config.config_default_show\n            try:\n                ub.session.add(content)\n                ub.session.commit()\n                if feature_support['oauth']:\n                    register_user_with_oauth(content)\n                send_registration_mail(to_save[\"email\"].strip(), nickname, password)\n            except Exception:\n                ub.session.rollback()\n                flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")\n                return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        else:\n            flash(_(u\"Your e-mail is not allowed to register\"), category=\"error\")\n            log.warning('Registering failed for user \"%s\" e-mail address: %s', nickname, to_save[\"email\"])\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        flash(_(u\"Confirmation e-mail was send to your e-mail account.\"), category=\"success\")\n        return redirect(url_for('web.login'))\n\n    if feature_support['oauth']:\n        register_user_with_oauth()\n    return render_title_template('register.html', config=config, title=_(\"Register\"), page=\"register\")\n\n\n@web.route('/login', methods=['GET', 'POST'])\ndef login():\n    #if not config.db_configured:\n    #    log.debug(u\"Redirect to initial configuration\")\n    #    return redirect(url_for('admin.basic_configuration'))\n    if current_user is not None and current_user.is_authenticated:\n        return redirect(url_for('web.index'))\n    if config.config_login_type == constants.LOGIN_LDAP and not services.ldap:\n        log.error(u\"Cannot activate LDAP authentication\")\n        flash(_(u\"Cannot activate LDAP authentication\"), category=\"error\")\n    if request.method == \"POST\":\n        form = request.form.to_dict()\n        user = ub.session.query(ub.User).filter(func.lower(ub.User.name) == form['username'].strip().lower()) \\\n            .first()\n        if config.config_login_type == constants.LOGIN_LDAP and services.ldap and user and form['password'] != \"\":\n            login_result, error = services.ldap.bind_user(form['username'], form['password'])\n            if login_result:\n                login_user(user, remember=bool(form.get('remember_me')))\n                ub.store_user_session()\n                log.debug(u\"You are now logged in as: '%s'\", user.name)\n                flash(_(u\"you are now logged in as: '%(nickname)s'\", nickname=user.name),\n                      category=\"success\")\n                return redirect_back(url_for(\"web.index\"))\n            elif login_result is None and user and check_password_hash(str(user.password), form['password']) \\\n                and user.name != \"Guest\":\n                login_user(user, remember=bool(form.get('remember_me')))\n                ub.store_user_session()\n                log.info(\"Local Fallback Login as: '%s'\", user.name)\n                flash(_(u\"Fallback Login as: '%(nickname)s', LDAP Server not reachable, or user not known\",\n                        nickname=user.name),\n                      category=\"warning\")\n                return redirect_back(url_for(\"web.index\"))\n            elif login_result is None:\n                log.info(error)\n                flash(_(u\"Could not login: %(message)s\", message=error), category=\"error\")\n            else:\n                ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)\n                log.warning('LDAP Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                flash(_(u\"Wrong Username or Password\"), category=\"error\")\n        else:\n            ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)\n            if 'forgot' in form and form['forgot'] == 'forgot':\n                if user != None and user.name != \"Guest\":\n                    ret, __ = reset_password(user.id)\n                    if ret == 1:\n                        flash(_(u\"New Password was send to your email address\"), category=\"info\")\n                        log.info('Password reset for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                    else:\n                        log.error(u\"An unknown error occurred. Please try again later\")\n                        flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")\n                else:\n                    flash(_(u\"Please enter valid username to reset password\"), category=\"error\")\n                    log.warning('Username missing for password reset IP-address: %s', ip_Address)\n            else:\n                if user and check_password_hash(str(user.password), form['password']) and user.name != \"Guest\":\n                    login_user(user, remember=bool(form.get('remember_me')))\n                    ub.store_user_session()\n                    log.debug(u\"You are now logged in as: '%s'\", user.name)\n                    flash(_(u\"You are now logged in as: '%(nickname)s'\", nickname=user.name), category=\"success\")\n                    config.config_is_initial = False\n                    return redirect_back(url_for(\"web.index\"))\n                else:\n                    log.warning('Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                    flash(_(u\"Wrong Username or Password\"), category=\"error\")\n\n    next_url = request.args.get('next', default=url_for(\"web.index\"), type=str)\n    if url_for(\"web.logout\") == next_url:\n        next_url = url_for(\"web.index\")\n    return render_title_template('login.html',\n                                 title=_(u\"Login\"),\n                                 next_url=next_url,\n                                 config=config,\n                                 oauth_check=oauth_check,\n                                 mail=config.get_mail_server_configured(), page=\"login\")\n\n\n@web.route('/logout')\n@login_required\ndef logout():\n    if current_user is not None and current_user.is_authenticated:\n        ub.delete_user_session(current_user.id, flask_session.get('_id',\"\"))\n        logout_user()\n        if feature_support['oauth'] and (config.config_login_type == 2 or config.config_login_type == 3):\n            logout_oauth_user()\n    log.debug(u\"User logged out\")\n    return redirect(url_for('web.login'))\n\n\n# ################################### Users own configuration #########################################################\ndef change_profile(kobo_support, local_oauth_check, oauth_status, translations, languages):\n    to_save = request.form.to_dict()\n    current_user.random_books = 0\n    if current_user.role_passwd() or current_user.role_admin():\n        if to_save.get(\"password\"):\n            current_user.password = generate_password_hash(to_save[\"password\"])\n    try:\n        if to_save.get(\"kindle_mail\", current_user.kindle_mail) != current_user.kindle_mail:\n            current_user.kindle_mail = valid_email(to_save[\"kindle_mail\"])\n        if to_save.get(\"email\", current_user.email) != current_user.email:\n            current_user.email = check_email(to_save[\"email\"])\n        if current_user.role_admin():\n            if to_save.get(\"name\", current_user.name) != current_user.name:\n                # Query User name, if not existing, change\n                current_user.name = check_username(to_save[\"name\"])\n        current_user.random_books = 1 if to_save.get(\"show_random\") == \"on\" else 0\n        if to_save.get(\"default_language\"):\n            current_user.default_language = to_save[\"default_language\"]\n        if to_save.get(\"locale\"):\n            current_user.locale = to_save[\"locale\"]\n        current_user.kobo_only_shelves_sync = int(to_save.get(\"kobo_only_shelves_sync\") == \"on\") or 0\n\n    except Exception as ex:\n        flash(str(ex), category=\"error\")\n        return render_title_template(\"user_edit.html\",\n                                     content=current_user,\n                                     translations=translations,\n                                     profile=1,\n                                     languages=languages,\n                                     title=_(u\"%(name)s's profile\", name=current_user.name),\n                                     page=\"me\",\n                                     kobo_support=kobo_support,\n                                     registered_oauth=local_oauth_check,\n                                     oauth_status=oauth_status)\n\n    val = 0\n    for key, __ in to_save.items():\n        if key.startswith('show'):\n            val += int(key[5:])\n    current_user.sidebar_view = val\n    if to_save.get(\"Show_detail_random\"):\n        current_user.sidebar_view += constants.DETAIL_RANDOM\n\n    try:\n        ub.session.commit()\n        flash(_(u\"Profile updated\"), category=\"success\")\n        log.debug(u\"Profile updated\")\n    except IntegrityError:\n        ub.session.rollback()\n        flash(_(u\"Found an existing account for this e-mail address\"), category=\"error\")\n        log.debug(u\"Found an existing account for this e-mail address\")\n    except OperationalError as e:\n        ub.session.rollback()\n        log.error(\"Database error: %s\", e)\n        flash(_(u\"Database error: %(error)s.\", error=e), category=\"error\")\n\n\n@web.route(\"/me\", methods=[\"GET\", \"POST\"])\n@login_required\ndef profile():\n    languages = calibre_db.speaking_language()\n    translations = babel.list_translations() + [LC('en')]\n    kobo_support = feature_support['kobo'] and config.config_kobo_sync\n    if feature_support['oauth'] and config.config_login_type == 2:\n        oauth_status = get_oauth_status()\n        local_oauth_check = oauth_check\n    else:\n        oauth_status = None\n        local_oauth_check = {}\n\n    if request.method == \"POST\":\n        change_profile(kobo_support, local_oauth_check, oauth_status, translations, languages)\n    return render_title_template(\"user_edit.html\",\n                                 translations=translations,\n                                 profile=1,\n                                 languages=languages,\n                                 content=current_user,\n                                 kobo_support=kobo_support,\n                                 title=_(u\"%(name)s's profile\", name=current_user.name),\n                                 page=\"me\",\n                                 registered_oauth=local_oauth_check,\n                                 oauth_status=oauth_status)\n\n\n# ###################################Show single book ##################################################################\n\n\n@web.route(\"/read/<int:book_id>/<book_format>\")\n@login_required_if_no_ano\n@viewer_required\ndef read_book(book_id, book_format):\n    book = calibre_db.get_filtered_book(book_id)\n    if not book:\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        return redirect(url_for(\"web.index\"))\n\n    # check if book has bookmark\n    bookmark = None\n    if current_user.is_authenticated:\n        bookmark = ub.session.query(ub.Bookmark).filter(and_(ub.Bookmark.user_id == int(current_user.id),\n                                                             ub.Bookmark.book_id == book_id,\n                                                             ub.Bookmark.format == book_format.upper())).first()\n    if book_format.lower() == \"epub\":\n        log.debug(u\"Start epub reader for %d\", book_id)\n        return render_title_template('read.html', bookid=book_id, title=book.title, bookmark=bookmark)\n    elif book_format.lower() == \"pdf\":\n        log.debug(u\"Start pdf reader for %d\", book_id)\n        return render_title_template('readpdf.html', pdffile=book_id, title=book.title)\n    elif book_format.lower() == \"txt\":\n        log.debug(u\"Start txt reader for %d\", book_id)\n        return render_title_template('readtxt.html', txtfile=book_id, title=book.title)\n    elif book_format.lower() == \"djvu\":\n        log.debug(u\"Start djvu reader for %d\", book_id)\n        return render_title_template('readdjvu.html', djvufile=book_id, title=book.title)\n    else:\n        for fileExt in constants.EXTENSIONS_AUDIO:\n            if book_format.lower() == fileExt:\n                entries = calibre_db.get_filtered_book(book_id)\n                log.debug(u\"Start mp3 listening for %d\", book_id)\n                return render_title_template('listenmp3.html', mp3file=book_id, audioformat=book_format.lower(),\n                                             entry=entries, bookmark=bookmark)\n        for fileExt in [\"cbr\", \"cbt\", \"cbz\"]:\n            if book_format.lower() == fileExt:\n                all_name = str(book_id)\n                title = book.title\n                if len(book.series):\n                    title = title + \" - \" + book.series[0].name\n                    if book.series_index:\n                        title = title + \" #\" + '{0:.2f}'.format(book.series_index).rstrip('0').rstrip('.')\n                log.debug(u\"Start comic reader for %d\", book_id)\n                return render_title_template('readcbr.html', comicfile=all_name, title=title,\n                                             extension=fileExt)\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")\n        return redirect(url_for(\"web.index\"))\n\n\n@web.route(\"/book/<int:book_id>\")\n@login_required_if_no_ano\ndef show_book(book_id):\n    entries = calibre_db.get_filtered_book(book_id, allow_show_archived=True)\n    if entries:\n        for index in range(0, len(entries.languages)):\n            entries.languages[index].language_name = isoLanguages.get_language_name(get_locale(), entries.languages[\n                index].lang_code)\n            #try:\n            #    entries.languages[index].language_name = isoLanguages.get_language_name(get_locale(), LC.parse(entries.languages[index].lang_code)\n            #                                                                            .get_language_name(get_locale())\n            #except UnknownLocaleError:\n            #    entries.languages[index].language_name = _(\n            #        isoLanguages.get(part3=entries.languages[index].lang_code).name)\n        cc = get_cc_columns(filter_config_custom_read=True)\n        book_in_shelfs = []\n        shelfs = ub.session.query(ub.BookShelf).filter(ub.BookShelf.book_id == book_id).all()\n        for entry in shelfs:\n            book_in_shelfs.append(entry.shelf)\n\n        if not current_user.is_anonymous:\n            if not config.config_read_column:\n                matching_have_read_book = ub.session.query(ub.ReadBook). \\\n                    filter(and_(ub.ReadBook.user_id == int(current_user.id), ub.ReadBook.book_id == book_id)).all()\n                have_read = len(\n                    matching_have_read_book) > 0 and matching_have_read_book[0].read_status == ub.ReadBook.STATUS_FINISHED\n            else:\n                try:\n                    matching_have_read_book = getattr(entries, 'custom_column_' + str(config.config_read_column))\n                    have_read = len(matching_have_read_book) > 0 and matching_have_read_book[0].value\n                except (KeyError, AttributeError):\n                    log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n                    have_read = None\n\n            archived_book = ub.session.query(ub.ArchivedBook).\\\n                filter(and_(ub.ArchivedBook.user_id == int(current_user.id),\n                            ub.ArchivedBook.book_id == book_id)).first()\n            is_archived = archived_book and archived_book.is_archived\n\n        else:\n            have_read = None\n            is_archived = None\n\n        entries.tags = sort(entries.tags, key=lambda tag: tag.name)\n\n        entries = calibre_db.order_authors(entries)\n\n        kindle_list = check_send_to_kindle(entries)\n        reader_list = check_read_formats(entries)\n\n        audioentries = []\n        for media_format in entries.data:\n            if media_format.format.lower() in constants.EXTENSIONS_AUDIO:\n                audioentries.append(media_format.format.lower())\n\n        return render_title_template('detail.html',\n                                     entry=entries,\n                                     audioentries=audioentries,\n                                     cc=cc,\n                                     is_xhr=request.headers.get('X-Requested-With')=='XMLHttpRequest',\n                                     title=entries.title,\n                                     books_shelfs=book_in_shelfs,\n                                     have_read=have_read,\n                                     is_archived=is_archived,\n                                     kindle_list=kindle_list,\n                                     reader_list=reader_list,\n                                     page=\"book\")\n    else:\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),\n              category=\"error\")\n        return redirect(url_for(\"web.index\"))\n", "Babel>=1.3, <3.0\nFlask-Babel>=0.11.1,<2.1.0\nFlask-Login>=0.3.2,<0.5.1\nFlask-Principal>=0.3.2,<0.5.1\nbackports_abc>=0.4\nFlask>=1.0.2,<2.1.0\niso-639>=0.4.5,<0.5.0\nPyPDF3>=1.0.0,<1.0.4\npytz>=2016.10\nrequests>=2.11.1,<2.25.0\nSQLAlchemy>=1.3.0,<1.5.0\ntornado>=4.1,<6.2\nWand>=0.4.4,<0.7.0\nunidecode>=0.04.19,<1.3.0\nlxml>=3.8.0,<4.7.0\n", "[metadata]\nname = calibreweb\nurl = https://github.com/janeczku/calibre-web\nproject_urls =\n  Bug Tracker = https://github.com/janeczku/calibre-web/issues\n  Release Management = https://github.com/janeczku/calibre-web/releases\n  Documentation = https://github.com/janeczku/calibre-web/wiki\n  Source Code = https://github.com/janeczku/calibre-web\ndescription = Web app for browsing, reading and downloading eBooks stored in a Calibre database.\nlong_description = file: README.md\nlong_description_content_type= text/markdown\nauthor = @OzzieIsaacs\nauthor_email = Ozzie.Fernandez.Isaacs@googlemail.com\nmaintainer = @OzzieIsaacs\nlicense = GPLv3+\nlicense_file = LICENSE\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    License :: OSI Approved :: GNU Affero General Public License v3\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.5\n    Programming Language :: Python :: 3.6\n    Programming Language :: Python :: 3.7\n    Operating System :: OS Independent\nkeywords =\n  calibre\n  calibre-web\n  library\npython_requires = >=3.0\n\n[options.entry_points]\nconsole_scripts =\n  cps = calibreweb:main\n[options]\ninclude_package_data = True\ninstall_requires =\n    Babel>=1.3, <3.0\n    Flask-Babel>=0.11.1,<2.1.0\n    Flask-Login>=0.3.2,<0.5.1\n    Flask-Principal>=0.3.2,<0.5.1\n    backports_abc>=0.4\n    Flask>=1.0.2,<2.1.0\n    iso-639>=0.4.5,<0.5.0\n    PyPDF3>=1.0.0,<1.0.4\n    pytz>=2016.10\n    requests>=2.11.1,<2.25.0\n    SQLAlchemy>=1.3.0,<1.5.0\n    tornado>=4.1,<6.2\n    Wand>=0.4.4,<0.7.0\n    unidecode>=0.04.19,<1.3.0\n    lxml>=3.8.0,<4.7.0\n\n[options.extras_require]\ngdrive =\n    google-api-python-client>=1.7.11,<2.1.0\n    gevent>20.6.0,<21.2.0\n    greenlet>=0.4.17,<1.2.0\n    httplib2>=0.9.2,<0.20.0\n    oauth2client>=4.0.0,<4.1.4\n    uritemplate>=3.0.0,<3.1.0\n    pyasn1-modules>=0.0.8,<0.3.0\n    pyasn1>=0.1.9,<0.5.0\n    PyDrive2>=1.3.1,<1.9.0\n    PyYAML>=3.12\n    rsa>=3.4.2,<4.8.0\n    six>=1.10.0,<1.17.0\ngmail =\n    google-auth-oauthlib>=0.4.3,<0.5.0\n    google-api-python-client>=1.7.11,<2.1.0\ngoodreads =\n    goodreads>=0.3.2,<0.4.0\n    python-Levenshtein>=0.12.0,<0.13.0\nldap =\n    python-ldap>=3.0.0,<3.4.0\n    Flask-SimpleLDAP>=1.4.0,<1.5.0\noauth =\n    Flask-Dance>=2.0.0,<5.1.0\n    SQLAlchemy-Utils>=0.33.5,<0.38.0\nmetadata =\n    rarfile>=2.7\n    scholarly>=1.2.0, <1.3\ncomics =\n    natsort>=2.2.0,<7.2.0\n    comicapi>= 2.2.0,<2.3.0\nkobo =\n    jsonschema>=3.2.0,<3.3.0\n\n\n\n"], "fixing_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2012-2019  OzzieIsaacs\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport sys\nimport os\n\n\n# Insert local directories into path\nif sys.version_info < (3, 0):\n    sys.path.append(os.path.dirname(os.path.abspath(__file__.decode('utf-8'))))\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__.decode('utf-8'))), 'vendor'))\nelse:\n    sys.path.append(os.path.dirname(os.path.abspath(__file__)))\n    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vendor'))\n\n\nfrom cps import create_app\nfrom cps import web_server\nfrom cps.opds import opds\nfrom cps.web import web\nfrom cps.jinjia import jinjia\nfrom cps.about import about\nfrom cps.shelf import shelf\nfrom cps.admin import admi\nfrom cps.gdrive import gdrive\nfrom cps.editbooks import editbook\nfrom cps.remotelogin import remotelogin\nfrom cps.search_metadata import meta\nfrom cps.error_handler import init_errorhandler\n\ntry:\n    from cps.kobo import kobo, get_kobo_activated\n    from cps.kobo_auth import kobo_auth\n    kobo_available = get_kobo_activated()\nexcept (ImportError, AttributeError):   # Catch also error for not installed flask-wtf (missing csrf decorator)\n    kobo_available = False\n\ntry:\n    from cps.oauth_bb import oauth\n    oauth_available = True\nexcept ImportError:\n    oauth_available = False\n\n\ndef main():\n    app = create_app()\n\n    init_errorhandler()\n\n    app.register_blueprint(web)\n    app.register_blueprint(opds)\n    app.register_blueprint(jinjia)\n    app.register_blueprint(about)\n    app.register_blueprint(shelf)\n    app.register_blueprint(admi)\n    app.register_blueprint(remotelogin)\n    app.register_blueprint(meta)\n    app.register_blueprint(gdrive)\n    app.register_blueprint(editbook)\n    if kobo_available:\n        app.register_blueprint(kobo)\n        app.register_blueprint(kobo_auth)\n    if oauth_available:\n        app.register_blueprint(oauth)\n    success = web_server.start()\n    sys.exit(0 if success else 1)\n\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport sys\nimport os\nimport mimetypes\n\nfrom babel import Locale as LC\nfrom babel import negotiate_locale\nfrom babel.core import UnknownLocaleError\nfrom flask import Flask, request, g\nfrom flask_login import LoginManager\nfrom flask_babel import Babel\nfrom flask_principal import Principal\n\nfrom . import config_sql, logger, cache_buster, cli, ub, db\nfrom .reverseproxy import ReverseProxied\nfrom .server import WebServer\n\ntry:\n    import lxml\n    lxml_present = True\nexcept ImportError:\n    lxml_present = False\n\ntry:\n    from flask_wtf.csrf import CSRFProtect\n    wtf_present = True\nexcept ImportError:\n    wtf_present = False\n\nmimetypes.init()\nmimetypes.add_type('application/xhtml+xml', '.xhtml')\nmimetypes.add_type('application/epub+zip', '.epub')\nmimetypes.add_type('application/fb2+zip', '.fb2')\nmimetypes.add_type('application/x-mobipocket-ebook', '.mobi')\nmimetypes.add_type('application/x-mobipocket-ebook', '.prc')\nmimetypes.add_type('application/vnd.amazon.ebook', '.azw')\nmimetypes.add_type('application/x-mobi8-ebook', '.azw3')\nmimetypes.add_type('application/x-cbr', '.cbr')\nmimetypes.add_type('application/x-cbz', '.cbz')\nmimetypes.add_type('application/x-cbt', '.cbt')\nmimetypes.add_type('image/vnd.djvu', '.djvu')\nmimetypes.add_type('application/mpeg', '.mpeg')\nmimetypes.add_type('application/mpeg', '.mp3')\nmimetypes.add_type('application/mp4', '.m4a')\nmimetypes.add_type('application/mp4', '.m4b')\nmimetypes.add_type('application/ogg', '.ogg')\nmimetypes.add_type('application/ogg', '.oga')\n\napp = Flask(__name__)\napp.config.update(\n    SESSION_COOKIE_HTTPONLY=True,\n    SESSION_COOKIE_SAMESITE='Lax',\n    REMEMBER_COOKIE_SAMESITE='Lax',  # will be available in flask-login 0.5.1 earliest\n)\n\n\nlm = LoginManager()\nlm.login_view = 'web.login'\nlm.anonymous_user = ub.Anonymous\nlm.session_protection = 'strong'\n\nif wtf_present:\n    csrf = CSRFProtect()\n    csrf.init_app(app)\nelse:\n    csrf = None\n\nub.init_db(cli.settingspath)\n# pylint: disable=no-member\nconfig = config_sql.load_configuration(ub.session)\n\nweb_server = WebServer()\n\nbabel = Babel()\n_BABEL_TRANSLATIONS = set()\n\nlog = logger.create()\n\nfrom . import services\n\ndb.CalibreDB.update_config(config)\ndb.CalibreDB.setup_db(config.config_calibre_dir, cli.settingspath)\n\n\ncalibre_db = db.CalibreDB()\n\ndef create_app():\n    if sys.version_info < (3, 0):\n        log.info(\n            '*** Python2 is EOL since end of 2019, this version of Calibre-Web is no longer supporting Python2, please update your installation to Python3 ***')\n        print(\n            '*** Python2 is EOL since end of 2019, this version of Calibre-Web is no longer supporting Python2, please update your installation to Python3 ***')\n        sys.exit(5)\n    if not lxml_present:\n        log.info('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')\n        print('*** \"lxml\" is needed for calibre-web to run. Please install it using pip: \"pip install lxml\" ***')\n        sys.exit(6)\n    if not wtf_present:\n        log.info('*** \"flask-wtf\" is needed for calibre-web to run. Please install it using pip: \"pip install flask-wtf\" ***')\n        print('*** \"flask-wtf\" is needed for calibre-web to run. Please install it using pip: \"pip install flask-wtf\" ***')\n        sys.exit(7)\n\n    app.wsgi_app = ReverseProxied(app.wsgi_app)\n    # For python2 convert path to unicode\n    if sys.version_info < (3, 0):\n        app.static_folder = app.static_folder.decode('utf-8')\n        app.root_path = app.root_path.decode('utf-8')\n        app.instance_path = app.instance_path.decode('utf-8')\n\n    if os.environ.get('FLASK_DEBUG'):\n        cache_buster.init_cache_busting(app)\n    log.info('Starting Calibre Web...')\n\n    Principal(app)\n    lm.init_app(app)\n    app.secret_key = os.getenv('SECRET_KEY', config_sql.get_flask_session_key(ub.session))\n\n    web_server.init_app(app, config)\n\n    babel.init_app(app)\n    _BABEL_TRANSLATIONS.update(str(item) for item in babel.list_translations())\n    _BABEL_TRANSLATIONS.add('en')\n\n    if services.ldap:\n        services.ldap.init_app(app, config)\n    if services.goodreads_support:\n        services.goodreads_support.connect(config.config_goodreads_api_key,\n                                           config.config_goodreads_api_secret,\n                                           config.config_use_goodreads)\n\n    return app\n\n@babel.localeselector\ndef get_locale():\n    # if a user is logged in, use the locale from the user settings\n    user = getattr(g, 'user', None)\n    if user is not None and hasattr(user, \"locale\"):\n        if user.name != 'Guest':   # if the account is the guest account bypass the config lang settings\n            return user.locale\n\n    preferred = list()\n    if request.accept_languages:\n        for x in request.accept_languages.values():\n            try:\n                preferred.append(str(LC.parse(x.replace('-', '_'))))\n            except (UnknownLocaleError, ValueError) as e:\n                log.debug('Could not parse locale \"%s\": %s', x, e)\n\n    return negotiate_locale(preferred or ['en'], _BABEL_TRANSLATIONS)\n\n\n@babel.timezoneselector\ndef get_timezone():\n    user = getattr(g, 'user', None)\n    return user.timezone if user else None\n\n\nfrom .updater import Updater\nupdater_thread = Updater()\nupdater_thread.start()\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport sys\nimport platform\nimport sqlite3\nfrom collections import OrderedDict\n\nimport babel, pytz, requests, sqlalchemy\nimport werkzeug, flask, flask_login, flask_principal, jinja2\nfrom flask_babel import gettext as _\ntry:\n    from flask_wtf import __version__ as flaskwtf_version\nexcept ImportError:\n    flaskwtf_version = _(u'not installed')\n\nfrom . import db, calibre_db, converter, uploader, server, isoLanguages, constants\nfrom .render_template import render_title_template\ntry:\n    from flask_login import __version__ as flask_loginVersion\nexcept ImportError:\n    from flask_login.__about__ import __version__ as flask_loginVersion\ntry:\n    # pylint: disable=unused-import\n    import unidecode\n    # _() necessary to make babel aware of string for translation\n    unidecode_version = _(u'installed')\nexcept ImportError:\n    unidecode_version = _(u'not installed')\n\ntry:\n    from flask_dance import __version__ as flask_danceVersion\nexcept ImportError:\n    flask_danceVersion = None\n\ntry:\n    from greenlet import __version__ as greenlet_Version\nexcept ImportError:\n    greenlet_Version = None\n\ntry:\n    from scholarly import scholarly\n    scholarly_version = _(u'installed')\nexcept ImportError:\n    scholarly_version = _(u'not installed')\n\nfrom . import services\n\nabout = flask.Blueprint('about', __name__)\n\n\n_VERSIONS = OrderedDict(\n    Platform = '{0[0]} {0[2]} {0[3]} {0[4]} {0[5]}'.format(platform.uname()),\n    Python=sys.version,\n    Calibre_Web=constants.STABLE_VERSION['version'] + ' - '\n                + constants.NIGHTLY_VERSION[0].replace('%','%%') + ' - '\n                + constants.NIGHTLY_VERSION[1].replace('%','%%'),\n    WebServer=server.VERSION,\n    Flask=flask.__version__,\n    Flask_Login=flask_loginVersion,\n    Flask_Principal=flask_principal.__version__,\n    Flask_WTF=flaskwtf_version,\n    Werkzeug=werkzeug.__version__,\n    Babel=babel.__version__,\n    Jinja2=jinja2.__version__,\n    Requests=requests.__version__,\n    SqlAlchemy=sqlalchemy.__version__,\n    pySqlite=sqlite3.version,\n    SQLite=sqlite3.sqlite_version,\n    iso639=isoLanguages.__version__,\n    pytz=pytz.__version__,\n    Unidecode=unidecode_version,\n    Scholarly=scholarly_version,\n    Flask_SimpleLDAP=u'installed' if bool(services.ldap) else None,\n    python_LDAP=services.ldapVersion if bool(services.ldapVersion) else None,\n    Goodreads=u'installed' if bool(services.goodreads_support) else None,\n    jsonschema=services.SyncToken.__version__ if bool(services.SyncToken) else None,\n    flask_dance=flask_danceVersion,\n    greenlet=greenlet_Version\n)\n_VERSIONS.update(uploader.get_versions())\n\n\ndef collect_stats():\n    _VERSIONS['ebook converter'] = _(converter.get_calibre_version())\n    _VERSIONS['unrar'] = _(converter.get_unrar_version())\n    _VERSIONS['kepubify'] = _(converter.get_kepubify_version())\n    return _VERSIONS\n\n@about.route(\"/stats\")\n@flask_login.login_required\ndef stats():\n    counter = calibre_db.session.query(db.Books).count()\n    authors = calibre_db.session.query(db.Authors).count()\n    categorys = calibre_db.session.query(db.Tags).count()\n    series = calibre_db.session.query(db.Series).count()\n    return render_title_template('stats.html', bookcounter=counter, authorcounter=authors, versions=collect_stats(),\n                                 categorycounter=categorys, seriecounter=series, title=_(u\"Statistics\"), page=\"stat\")\n\n\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 shavitmichael, OzzieIsaacs\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport base64\nimport datetime\nimport sys\nimport os\nimport uuid\nfrom time import gmtime, strftime\n\ntry:\n    from urllib import unquote\nexcept ImportError:\n    from urllib.parse import unquote\n\nfrom flask import (\n    Blueprint,\n    request,\n    make_response,\n    jsonify,\n    current_app,\n    url_for,\n    redirect,\n    abort\n)\nfrom flask_login import current_user\nfrom werkzeug.datastructures import Headers\nfrom sqlalchemy import func\nfrom sqlalchemy.sql.expression import and_, or_\nfrom sqlalchemy.exc import StatementError\nfrom sqlalchemy.sql import select\nimport requests\n\n\nfrom . import config, logger, kobo_auth, db, calibre_db, helper, shelf as shelf_lib, ub, csrf\nfrom .constants import sqlalchemy_version2\nfrom .helper import get_download_link\nfrom .services import SyncToken as SyncToken\nfrom .web import download_required\nfrom .kobo_auth import requires_kobo_auth, get_auth_token\n\nKOBO_FORMATS = {\"KEPUB\": [\"KEPUB\"], \"EPUB\": [\"EPUB3\", \"EPUB\"]}\nKOBO_STOREAPI_URL = \"https://storeapi.kobo.com\"\nKOBO_IMAGEHOST_URL = \"https://kbimages1-a.akamaihd.net\"\n\nSYNC_ITEM_LIMIT = 100\n\nkobo = Blueprint(\"kobo\", __name__, url_prefix=\"/kobo/<auth_token>\")\nkobo_auth.disable_failed_auth_redirect_for_blueprint(kobo)\nkobo_auth.register_url_value_preprocessor(kobo)\n\nlog = logger.create()\n\n\ndef get_store_url_for_current_request():\n    # Programmatically modify the current url to point to the official Kobo store\n    __, __, request_path_with_auth_token = request.full_path.rpartition(\"/kobo/\")\n    __, __, request_path = request_path_with_auth_token.rstrip(\"?\").partition(\n        \"/\"\n    )\n    return KOBO_STOREAPI_URL + \"/\" + request_path\n\n\nCONNECTION_SPECIFIC_HEADERS = [\n    \"connection\",\n    \"content-encoding\",\n    \"content-length\",\n    \"transfer-encoding\",\n]\n\n\ndef get_kobo_activated():\n    return config.config_kobo_sync\n\n\ndef make_request_to_kobo_store(sync_token=None):\n    outgoing_headers = Headers(request.headers)\n    outgoing_headers.remove(\"Host\")\n    if sync_token:\n        sync_token.set_kobo_store_header(outgoing_headers)\n\n    store_response = requests.request(\n        method=request.method,\n        url=get_store_url_for_current_request(),\n        headers=outgoing_headers,\n        data=request.get_data(),\n        allow_redirects=False,\n        timeout=(2, 10)\n    )\n    return store_response\n\n\ndef redirect_or_proxy_request():\n    if config.config_kobo_proxy:\n        if request.method == \"GET\":\n            return redirect(get_store_url_for_current_request(), 307)\n        else:\n            # The Kobo device turns other request types into GET requests on redirects, so we instead proxy to the Kobo store ourselves.\n            store_response = make_request_to_kobo_store()\n\n            response_headers = store_response.headers\n            for header_key in CONNECTION_SPECIFIC_HEADERS:\n                response_headers.pop(header_key, default=None)\n\n            return make_response(\n                store_response.content, store_response.status_code, response_headers.items()\n            )\n    else:\n        return make_response(jsonify({}))\n\n\ndef convert_to_kobo_timestamp_string(timestamp):\n    try:\n        return timestamp.strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n    except AttributeError as exc:\n        log.debug(\"Timestamp not valid: {}\".format(exc))\n        return datetime.datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n\n\n@kobo.route(\"/v1/library/sync\")\n@requires_kobo_auth\n@download_required\ndef HandleSyncRequest():\n    sync_token = SyncToken.SyncToken.from_headers(request.headers)\n    log.info(\"Kobo library sync request received.\")\n    log.debug(\"SyncToken: {}\".format(sync_token))\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n\n    # TODO: Limit the number of books return per sync call, and rely on the sync-continuatation header\n    # instead so that the device triggers another sync.\n\n    new_books_last_modified = sync_token.books_last_modified\n    new_books_last_created = sync_token.books_last_created\n    new_reading_state_last_modified = sync_token.reading_state_last_modified\n    new_archived_last_modified = datetime.datetime.min\n    sync_results = []\n\n    # We reload the book database so that the user get's a fresh view of the library\n    # in case of external changes (e.g: adding a book through Calibre).\n    calibre_db.reconnect_db(config, ub.app_DB_path)\n\n    only_kobo_shelves = current_user.kobo_only_shelves_sync\n\n    if only_kobo_shelves:\n        if sqlalchemy_version2:\n            changed_entries = select(db.Books,\n                                     ub.ArchivedBook.last_modified,\n                                     ub.BookShelf.date_added,\n                                     ub.ArchivedBook.is_archived)\n        else:\n            changed_entries = calibre_db.session.query(db.Books,\n                                                       ub.ArchivedBook.last_modified,\n                                                       ub.BookShelf.date_added,\n                                                       ub.ArchivedBook.is_archived)\n        changed_entries = (changed_entries\n                .join(db.Data).outerjoin(ub.ArchivedBook, db.Books.id == ub.ArchivedBook.book_id)\n                .join(ub.KoboSyncedBooks, ub.KoboSyncedBooks.book_id == db.Books.id, isouter=True)\n                .filter(or_(ub.KoboSyncedBooks.user_id != current_user.id,\n                            ub.KoboSyncedBooks.book_id == None))\n                #.filter(or_(db.Books.last_modified > sync_token.books_last_modified,\n                #            ub.BookShelf.date_added > sync_token.books_last_modified))\n                .filter(ub.BookShelf.date_added > sync_token.books_last_modified) #?? or also or from above\n                .filter(db.Data.format.in_(KOBO_FORMATS))\n                .filter(calibre_db.common_filters())\n                .order_by(db.Books.id)\n                .order_by(ub.ArchivedBook.last_modified)\n                .join(ub.BookShelf, db.Books.id == ub.BookShelf.book_id)\n                .join(ub.Shelf)\n                .filter(ub.Shelf.user_id == current_user.id)\n                .filter(ub.Shelf.kobo_sync)\n                .distinct()\n        )\n    else:\n        if sqlalchemy_version2:\n            changed_entries = select(db.Books, ub.ArchivedBook.last_modified, ub.ArchivedBook.is_archived)\n        else:\n            changed_entries = calibre_db.session.query(db.Books,\n                                                       ub.ArchivedBook.last_modified,\n                                                       ub.ArchivedBook.is_archived)\n        changed_entries = (changed_entries\n                   .join(db.Data).outerjoin(ub.ArchivedBook, db.Books.id == ub.ArchivedBook.book_id)\n                   .join(ub.KoboSyncedBooks, ub.KoboSyncedBooks.book_id == db.Books.id, isouter=True)\n                   .filter(or_(ub.KoboSyncedBooks.user_id != current_user.id,\n                               ub.KoboSyncedBooks.book_id == None))\n                   .filter(calibre_db.common_filters())\n                   .filter(db.Data.format.in_(KOBO_FORMATS))\n                   .order_by(db.Books.last_modified)\n                   .order_by(db.Books.id)\n        )\n\n    #if sync_token.books_last_id > -1:\n    #    changed_entries = changed_entries.filter(db.Books.id > sync_token.books_last_id)\n\n    reading_states_in_new_entitlements = []\n    if sqlalchemy_version2:\n        books = calibre_db.session.execute(changed_entries.limit(SYNC_ITEM_LIMIT))\n    else:\n        books = changed_entries.limit(SYNC_ITEM_LIMIT)\n    for book in books:\n        add_synced_books(book.Books.id)\n        formats = [data.format for data in book.Books.data]\n        if not 'KEPUB' in formats and config.config_kepubifypath and 'EPUB' in formats:\n            helper.convert_book_format(book.Books.id, config.config_calibre_dir, 'EPUB', 'KEPUB', current_user.name)\n\n        kobo_reading_state = get_or_create_reading_state(book.Books.id)\n        entitlement = {\n            \"BookEntitlement\": create_book_entitlement(book.Books, archived=(book.is_archived == True)),\n            \"BookMetadata\": get_metadata(book.Books),\n        }\n\n        if kobo_reading_state.last_modified > sync_token.reading_state_last_modified:\n            entitlement[\"ReadingState\"] = get_kobo_reading_state_response(book.Books, kobo_reading_state)\n            new_reading_state_last_modified = max(new_reading_state_last_modified, kobo_reading_state.last_modified)\n            reading_states_in_new_entitlements.append(book.Books.id)\n\n        ts_created = book.Books.timestamp\n\n        try:\n            ts_created = max(ts_created, book.date_added)\n        except AttributeError:\n            pass\n\n        if ts_created > sync_token.books_last_created:\n            sync_results.append({\"NewEntitlement\": entitlement})\n        else:\n            sync_results.append({\"ChangedEntitlement\": entitlement})\n\n        new_books_last_modified = max(\n            book.Books.last_modified, new_books_last_modified\n        )\n        try:\n            new_books_last_modified = max(\n                new_books_last_modified, book.date_added\n            )\n        except AttributeError:\n            pass\n\n        new_books_last_created = max(ts_created, new_books_last_created)\n\n    if sqlalchemy_version2:\n        max_change = calibre_db.session.execute(changed_entries\n                                                .filter(ub.ArchivedBook.is_archived)\n                                                .order_by(func.datetime(ub.ArchivedBook.last_modified).desc()))\\\n            .columns(db.Books).first()\n    else:\n        max_change = changed_entries.from_self().filter(ub.ArchivedBook.is_archived) \\\n            .order_by(func.datetime(ub.ArchivedBook.last_modified).desc()).first()\n\n    max_change = max_change.last_modified if max_change else new_archived_last_modified\n\n    new_archived_last_modified = max(new_archived_last_modified, max_change)\n\n    # no. of books returned\n    if sqlalchemy_version2:\n        entries = calibre_db.session.execute(changed_entries).all()\n        book_count = len(entries)\n    else:\n        #entries = changed_entries.all()\n        book_count = changed_entries.count()\n    # last entry:\n    # sync_cont = entries[-1].Books.id or -1 if book_count else -1\n    log.debug(\"Remaining books to Sync: {}\".format(book_count))\n    # generate reading state data\n    changed_reading_states = ub.session.query(ub.KoboReadingState)\n\n    if only_kobo_shelves:\n        changed_reading_states = changed_reading_states.join(ub.BookShelf,\n                                                             ub.KoboReadingState.book_id == ub.BookShelf.book_id)\\\n            .join(ub.Shelf)\\\n            .filter(current_user.id == ub.Shelf.user_id)\\\n            .filter(ub.Shelf.kobo_sync,\n                    or_(\n                        func.datetime(ub.KoboReadingState.last_modified) > sync_token.reading_state_last_modified,\n                        func.datetime(ub.BookShelf.date_added) > sync_token.books_last_modified\n                    )).distinct()\n    else:\n        changed_reading_states = changed_reading_states.filter(\n            func.datetime(ub.KoboReadingState.last_modified) > sync_token.reading_state_last_modified)\n\n    changed_reading_states = changed_reading_states.filter(\n        and_(ub.KoboReadingState.user_id == current_user.id,\n             ub.KoboReadingState.book_id.notin_(reading_states_in_new_entitlements)))\n\n    for kobo_reading_state in changed_reading_states.all():\n        book = calibre_db.session.query(db.Books).filter(db.Books.id == kobo_reading_state.book_id).one_or_none()\n        if book:\n            sync_results.append({\n                \"ChangedReadingState\": {\n                    \"ReadingState\": get_kobo_reading_state_response(book, kobo_reading_state)\n                }\n            })\n            new_reading_state_last_modified = max(new_reading_state_last_modified, kobo_reading_state.last_modified)\n\n    sync_shelves(sync_token, sync_results, only_kobo_shelves)\n\n    sync_token.books_last_created = new_books_last_created\n    sync_token.books_last_modified = new_books_last_modified\n    sync_token.archive_last_modified = new_archived_last_modified\n    sync_token.reading_state_last_modified = new_reading_state_last_modified\n    # sync_token.books_last_id = books_last_id\n\n    return generate_sync_response(sync_token, sync_results, book_count)\n\n\ndef generate_sync_response(sync_token, sync_results, set_cont=False):\n    extra_headers = {}\n    if config.config_kobo_proxy:\n        # Merge in sync results from the official Kobo store.\n        try:\n            store_response = make_request_to_kobo_store(sync_token)\n\n            store_sync_results = store_response.json()\n            sync_results += store_sync_results\n            sync_token.merge_from_store_response(store_response)\n            extra_headers[\"x-kobo-sync\"] = store_response.headers.get(\"x-kobo-sync\")\n            extra_headers[\"x-kobo-sync-mode\"] = store_response.headers.get(\"x-kobo-sync-mode\")\n            extra_headers[\"x-kobo-recent-reads\"] = store_response.headers.get(\"x-kobo-recent-reads\")\n\n        except Exception as ex:\n            log.error(\"Failed to receive or parse response from Kobo's sync endpoint: {}\".format(ex))\n    if set_cont:\n        extra_headers[\"x-kobo-sync\"] = \"continue\"\n    sync_token.to_headers(extra_headers)\n\n    # log.debug(\"Kobo Sync Content: {}\".format(sync_results))\n    response = make_response(jsonify(sync_results), extra_headers)\n\n    return response\n\n\n@kobo.route(\"/v1/library/<book_uuid>/metadata\")\n@requires_kobo_auth\n@download_required\ndef HandleMetadataRequest(book_uuid):\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n    log.info(\"Kobo library metadata request received for book %s\" % book_uuid)\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book or not book.data:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    metadata = get_metadata(book)\n    return jsonify([metadata])\n\n\ndef get_download_url_for_book(book, book_format):\n    if not current_app.wsgi_app.is_proxied:\n        if ':' in request.host and not request.host.endswith(']'):\n            host = \"\".join(request.host.split(':')[:-1])\n        else:\n            host = request.host\n\n        return \"{url_scheme}://{url_base}:{url_port}/kobo/{auth_token}/download/{book_id}/{book_format}\".format(\n            url_scheme=request.scheme,\n            url_base=host,\n            url_port=config.config_external_port,\n            auth_token=get_auth_token(),\n            book_id=book.id,\n            book_format=book_format.lower()\n        )\n    return url_for(\n        \"kobo.download_book\",\n        auth_token=kobo_auth.get_auth_token(),\n        book_id=book.id,\n        book_format=book_format.lower(),\n        _external=True,\n    )\n\n\ndef create_book_entitlement(book, archived):\n    book_uuid = book.uuid\n    return {\n        \"Accessibility\": \"Full\",\n        \"ActivePeriod\": {\"From\": convert_to_kobo_timestamp_string(datetime.datetime.now())},\n        \"Created\": convert_to_kobo_timestamp_string(book.timestamp),\n        \"CrossRevisionId\": book_uuid,\n        \"Id\": book_uuid,\n        \"IsRemoved\": archived,\n        \"IsHiddenFromArchive\": False,\n        \"IsLocked\": False,\n        \"LastModified\": convert_to_kobo_timestamp_string(book.last_modified),\n        \"OriginCategory\": \"Imported\",\n        \"RevisionId\": book_uuid,\n        \"Status\": \"Active\",\n    }\n\n\ndef current_time():\n    return strftime(\"%Y-%m-%dT%H:%M:%SZ\", gmtime())\n\n\ndef get_description(book):\n    if not book.comments:\n        return None\n    return book.comments[0].text\n\n\n# TODO handle multiple authors\ndef get_author(book):\n    if not book.authors:\n        return {\"Contributors\": None}\n    if len(book.authors) > 1:\n        author_list = []\n        autor_roles = []\n        for author in book.authors:\n            autor_roles.append({\"Name\":author.name, \"Role\":\"Author\"})\n            author_list.append(author.name)\n        return {\"ContributorRoles\": autor_roles, \"Contributors\":author_list}\n    return {\"ContributorRoles\": [{\"Name\":book.authors[0].name, \"Role\":\"Author\"}], \"Contributors\": book.authors[0].name}\n\n\ndef get_publisher(book):\n    if not book.publishers:\n        return None\n    return book.publishers[0].name\n\n\ndef get_series(book):\n    if not book.series:\n        return None\n    return book.series[0].name\n\ndef get_seriesindex(book):\n    return book.series_index or 1\n\n\ndef get_metadata(book):\n    download_urls = []\n    kepub = [data for data in book.data if data.format == 'KEPUB']\n\n    for book_data in kepub if len(kepub) > 0 else book.data:\n        if book_data.format not in KOBO_FORMATS:\n            continue\n        for kobo_format in KOBO_FORMATS[book_data.format]:\n            # log.debug('Id: %s, Format: %s' % (book.id, kobo_format))\n            download_urls.append(\n                {\n                    \"Format\": kobo_format,\n                    \"Size\": book_data.uncompressed_size,\n                    \"Url\": get_download_url_for_book(book, book_data.format),\n                    # The Kobo forma accepts platforms: (Generic, Android)\n                    \"Platform\": \"Generic\",\n                    # \"DrmType\": \"None\", # Not required\n                }\n            )\n\n    book_uuid = book.uuid\n    metadata = {\n        \"Categories\": [\"00000000-0000-0000-0000-000000000001\", ],\n        # \"Contributors\": get_author(book),\n        \"CoverImageId\": book_uuid,\n        \"CrossRevisionId\": book_uuid,\n        \"CurrentDisplayPrice\": {\"CurrencyCode\": \"USD\", \"TotalAmount\": 0},\n        \"CurrentLoveDisplayPrice\": {\"TotalAmount\": 0},\n        \"Description\": get_description(book),\n        \"DownloadUrls\": download_urls,\n        \"EntitlementId\": book_uuid,\n        \"ExternalIds\": [],\n        \"Genre\": \"00000000-0000-0000-0000-000000000001\",\n        \"IsEligibleForKoboLove\": False,\n        \"IsInternetArchive\": False,\n        \"IsPreOrder\": False,\n        \"IsSocialEnabled\": True,\n        \"Language\": \"en\",\n        \"PhoneticPronunciations\": {},\n        # TODO: Fix book.pubdate to return a datetime object so that we can easily\n        # convert it to the format Kobo devices expect.\n        \"PublicationDate\": book.pubdate,\n        \"Publisher\": {\"Imprint\": \"\", \"Name\": get_publisher(book),},\n        \"RevisionId\": book_uuid,\n        \"Title\": book.title,\n        \"WorkId\": book_uuid,\n    }\n    metadata.update(get_author(book))\n\n    if get_series(book):\n        if sys.version_info < (3, 0):\n            name = get_series(book).encode(\"utf-8\")\n        else:\n            name = get_series(book)\n        metadata[\"Series\"] = {\n            \"Name\": get_series(book),\n            \"Number\": get_seriesindex(book),        # ToDo Check int() ?\n            \"NumberFloat\": float(get_seriesindex(book)),\n            # Get a deterministic id based on the series name.\n            \"Id\": uuid.uuid3(uuid.NAMESPACE_DNS, name),\n        }\n\n    return metadata\n\n@csrf.exempt\n@kobo.route(\"/v1/library/tags\", methods=[\"POST\", \"DELETE\"])\n@requires_kobo_auth\n# Creates a Shelf with the given items, and returns the shelf's uuid.\ndef HandleTagCreate():\n    # catch delete requests, otherwise the are handeld in the book delete handler\n    if request.method == \"DELETE\":\n        abort(405)\n    name, items = None, None\n    try:\n        shelf_request = request.json\n        name = shelf_request[\"Name\"]\n        items = shelf_request[\"Items\"]\n        if not name:\n            raise TypeError\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags request.\")\n        abort(400, description=\"Malformed tags POST request. Data has empty 'Name', missing 'Name' or 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.name == name, ub.Shelf.user_id ==\n                                              current_user.id).one_or_none()\n    if shelf and not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to create shelf.\")\n\n    if not shelf:\n        shelf = ub.Shelf(user_id=current_user.id, name=name, uuid=str(uuid.uuid4()))\n        ub.session.add(shelf)\n\n    items_unknown_to_calibre = add_items_to_shelf(items, shelf)\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to add unknown books to a collection. Silently ignoring items.\")\n    ub.session_commit()\n    return make_response(jsonify(str(shelf.uuid)), 201)\n\n\n@kobo.route(\"/v1/library/tags/<tag_id>\", methods=[\"DELETE\", \"PUT\"])\n@requires_kobo_auth\ndef HandleTagUpdate(tag_id):\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\"Received Kobo tag update request on a collection unknown to CalibreWeb\")\n        if config.config_kobo_proxy:\n            return redirect_or_proxy_request()\n        else:\n            abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    if request.method == \"DELETE\":\n        shelf_lib.delete_shelf_helper(shelf)\n    else:\n        name = None\n        try:\n            shelf_request = request.json\n            name = shelf_request[\"Name\"]\n        except (KeyError, TypeError):\n            log.debug(\"Received malformed v1/library/tags rename request.\")\n            abort(400, description=\"Malformed tags POST request. Data is missing 'Name' field\")\n\n        shelf.name = name\n        ub.session.merge(shelf)\n        ub.session_commit()\n    return make_response(' ', 200)\n\n\n# Adds items to the given shelf.\ndef add_items_to_shelf(items, shelf):\n    book_ids_already_in_shelf = set([book_shelf.book_id for book_shelf in shelf.books])\n    items_unknown_to_calibre = []\n    for item in items:\n        try:\n            if item[\"Type\"] != \"ProductRevisionTagItem\":\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book = calibre_db.get_book_by_uuid(item[\"RevisionId\"])\n            if not book:\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book_id = book.id\n            if book_id not in book_ids_already_in_shelf:\n                shelf.books.append(ub.BookShelf(book_id=book_id))\n        except KeyError:\n            items_unknown_to_calibre.append(item)\n    return items_unknown_to_calibre\n\n\n@csrf.exempt\n@kobo.route(\"/v1/library/tags/<tag_id>/items\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleTagAddItem(tag_id):\n    items = None\n    try:\n        tag_request = request.json\n        items = tag_request[\"Items\"]\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags/<tag_id>/items/delete request.\")\n        abort(400, description=\"Malformed tags POST request. Data is missing 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\"Received Kobo request on a collection unknown to CalibreWeb\")\n        abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    items_unknown_to_calibre = add_items_to_shelf(items, shelf)\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to add an unknown book to a collection. Silently ignoring item.\")\n\n    ub.session.merge(shelf)\n    ub.session_commit()\n    return make_response('', 201)\n\n\n@csrf.exempt\n@kobo.route(\"/v1/library/tags/<tag_id>/items/delete\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleTagRemoveItem(tag_id):\n    items = None\n    try:\n        tag_request = request.json\n        items = tag_request[\"Items\"]\n    except (KeyError, TypeError):\n        log.debug(\"Received malformed v1/library/tags/<tag_id>/items/delete request.\")\n        abort(400, description=\"Malformed tags POST request. Data is missing 'Items' field\")\n\n    shelf = ub.session.query(ub.Shelf).filter(ub.Shelf.uuid == tag_id,\n                                              ub.Shelf.user_id == current_user.id).one_or_none()\n    if not shelf:\n        log.debug(\n            \"Received a request to remove an item from a Collection unknown to CalibreWeb.\")\n        abort(404, description=\"Collection isn't known to CalibreWeb\")\n\n    if not shelf_lib.check_shelf_edit_permissions(shelf):\n        abort(401, description=\"User is unauthaurized to edit shelf.\")\n\n    items_unknown_to_calibre = []\n    for item in items:\n        try:\n            if item[\"Type\"] != \"ProductRevisionTagItem\":\n                items_unknown_to_calibre.append(item)\n                continue\n\n            book = calibre_db.get_book_by_uuid(item[\"RevisionId\"])\n            if not book:\n                items_unknown_to_calibre.append(item)\n                continue\n\n            shelf.books.filter(ub.BookShelf.book_id == book.id).delete()\n        except KeyError:\n            items_unknown_to_calibre.append(item)\n    ub.session_commit()\n\n    if items_unknown_to_calibre:\n        log.debug(\"Received request to remove an unknown book to a collecition. Silently ignoring item.\")\n\n    return make_response('', 200)\n\n\n# Add new, changed, or deleted shelves to the sync_results.\n# Note: Public shelves that aren't owned by the user aren't supported.\ndef sync_shelves(sync_token, sync_results, only_kobo_shelves=False):\n    new_tags_last_modified = sync_token.tags_last_modified\n\n    for shelf in ub.session.query(ub.ShelfArchive).filter(\n        func.datetime(ub.ShelfArchive.last_modified) > sync_token.tags_last_modified,\n        ub.ShelfArchive.user_id == current_user.id\n    ):\n        new_tags_last_modified = max(shelf.last_modified, new_tags_last_modified)\n        sync_results.append({\n            \"DeletedTag\": {\n                \"Tag\": {\n                    \"Id\": shelf.uuid,\n                    \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified)\n                }\n            }\n        })\n\n    extra_filters = []\n    if only_kobo_shelves:\n        for shelf in ub.session.query(ub.Shelf).filter(\n            func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n            ub.Shelf.user_id == current_user.id,\n            not ub.Shelf.kobo_sync\n        ):\n            sync_results.append({\n                \"DeletedTag\": {\n                    \"Tag\": {\n                        \"Id\": shelf.uuid,\n                        \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified)\n                    }\n                }\n            })\n        extra_filters.append(ub.Shelf.kobo_sync)\n\n    if sqlalchemy_version2:\n        shelflist = ub.session.execute(select(ub.Shelf).outerjoin(ub.BookShelf).filter(\n            or_(func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n                func.datetime(ub.BookShelf.date_added) > sync_token.tags_last_modified),\n            ub.Shelf.user_id == current_user.id,\n            *extra_filters\n        ).distinct().order_by(func.datetime(ub.Shelf.last_modified).asc())).columns(ub.Shelf)\n    else:\n        shelflist = ub.session.query(ub.Shelf).outerjoin(ub.BookShelf).filter(\n            or_(func.datetime(ub.Shelf.last_modified) > sync_token.tags_last_modified,\n                func.datetime(ub.BookShelf.date_added) > sync_token.tags_last_modified),\n            ub.Shelf.user_id == current_user.id,\n            *extra_filters\n        ).distinct().order_by(func.datetime(ub.Shelf.last_modified).asc())\n\n\n    for shelf in shelflist:\n        if not shelf_lib.check_shelf_view_permissions(shelf):\n            continue\n\n        new_tags_last_modified = max(shelf.last_modified, new_tags_last_modified)\n\n        tag = create_kobo_tag(shelf)\n        if not tag:\n            continue\n\n        if shelf.created > sync_token.tags_last_modified:\n            sync_results.append({\n                \"NewTag\": tag\n            })\n        else:\n            sync_results.append({\n                \"ChangedTag\": tag\n            })\n    sync_token.tags_last_modified = new_tags_last_modified\n    ub.session_commit()\n\n\n# Creates a Kobo \"Tag\" object from a ub.Shelf object\ndef create_kobo_tag(shelf):\n    tag = {\n        \"Created\": convert_to_kobo_timestamp_string(shelf.created),\n        \"Id\": shelf.uuid,\n        \"Items\": [],\n        \"LastModified\": convert_to_kobo_timestamp_string(shelf.last_modified),\n        \"Name\": shelf.name,\n        \"Type\": \"UserTag\"\n    }\n    for book_shelf in shelf.books:\n        book = calibre_db.get_book(book_shelf.book_id)\n        if not book:\n            log.info(u\"Book (id: %s) in BookShelf (id: %s) not found in book database\",  book_shelf.book_id, shelf.id)\n            continue\n        tag[\"Items\"].append(\n            {\n                \"RevisionId\": book.uuid,\n                \"Type\": \"ProductRevisionTagItem\"\n            }\n        )\n    return {\"Tag\": tag}\n\n\n@kobo.route(\"/v1/library/<book_uuid>/state\", methods=[\"GET\", \"PUT\"])\n@requires_kobo_auth\ndef HandleStateRequest(book_uuid):\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book or not book.data:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    kobo_reading_state = get_or_create_reading_state(book.id)\n\n    if request.method == \"GET\":\n        return jsonify([get_kobo_reading_state_response(book, kobo_reading_state)])\n    else:\n        update_results_response = {\"EntitlementId\": book_uuid}\n\n        try:\n            request_data = request.json\n            request_reading_state = request_data[\"ReadingStates\"][0]\n\n            request_bookmark = request_reading_state[\"CurrentBookmark\"]\n            if request_bookmark:\n                current_bookmark = kobo_reading_state.current_bookmark\n                current_bookmark.progress_percent = request_bookmark[\"ProgressPercent\"]\n                current_bookmark.content_source_progress_percent = request_bookmark[\"ContentSourceProgressPercent\"]\n                location = request_bookmark[\"Location\"]\n                if location:\n                    current_bookmark.location_value = location[\"Value\"]\n                    current_bookmark.location_type = location[\"Type\"]\n                    current_bookmark.location_source = location[\"Source\"]\n                update_results_response[\"CurrentBookmarkResult\"] = {\"Result\": \"Success\"}\n\n            request_statistics = request_reading_state[\"Statistics\"]\n            if request_statistics:\n                statistics = kobo_reading_state.statistics\n                statistics.spent_reading_minutes = int(request_statistics[\"SpentReadingMinutes\"])\n                statistics.remaining_time_minutes = int(request_statistics[\"RemainingTimeMinutes\"])\n                update_results_response[\"StatisticsResult\"] = {\"Result\": \"Success\"}\n\n            request_status_info = request_reading_state[\"StatusInfo\"]\n            if request_status_info:\n                book_read = kobo_reading_state.book_read_link\n                new_book_read_status = get_ub_read_status(request_status_info[\"Status\"])\n                if new_book_read_status == ub.ReadBook.STATUS_IN_PROGRESS \\\n                    and new_book_read_status != book_read.read_status:\n                    book_read.times_started_reading += 1\n                    book_read.last_time_started_reading = datetime.datetime.utcnow()\n                book_read.read_status = new_book_read_status\n                update_results_response[\"StatusInfoResult\"] = {\"Result\": \"Success\"}\n        except (KeyError, TypeError, ValueError, StatementError):\n            log.debug(\"Received malformed v1/library/<book_uuid>/state request.\")\n            ub.session.rollback()\n            abort(400, description=\"Malformed request data is missing 'ReadingStates' key\")\n\n        ub.session.merge(kobo_reading_state)\n        ub.session_commit()\n        return jsonify({\n            \"RequestResult\": \"Success\",\n            \"UpdateResults\": [update_results_response],\n        })\n\n\ndef get_read_status_for_kobo(ub_book_read):\n    enum_to_string_map = {\n        None: \"ReadyToRead\",\n        ub.ReadBook.STATUS_UNREAD: \"ReadyToRead\",\n        ub.ReadBook.STATUS_FINISHED: \"Finished\",\n        ub.ReadBook.STATUS_IN_PROGRESS: \"Reading\",\n    }\n    return enum_to_string_map[ub_book_read.read_status]\n\n\ndef get_ub_read_status(kobo_read_status):\n    string_to_enum_map = {\n        None: None,\n        \"ReadyToRead\": ub.ReadBook.STATUS_UNREAD,\n        \"Finished\": ub.ReadBook.STATUS_FINISHED,\n        \"Reading\": ub.ReadBook.STATUS_IN_PROGRESS,\n    }\n    return string_to_enum_map[kobo_read_status]\n\ndef add_synced_books(book_id):\n    synced_book = ub.KoboSyncedBooks()\n    synced_book.user_id = current_user.id\n    synced_book.book_id = book_id\n    ub.session.add(synced_book)\n    try:\n        ub.session.commit()\n    except Exception:\n        ub.session.rollback()\n\n\ndef get_or_create_reading_state(book_id):\n    book_read = ub.session.query(ub.ReadBook).filter(ub.ReadBook.book_id == book_id,\n                                                          ub.ReadBook.user_id == current_user.id).one_or_none()\n    if not book_read:\n        book_read = ub.ReadBook(user_id=current_user.id, book_id=book_id)\n    if not book_read.kobo_reading_state:\n        kobo_reading_state = ub.KoboReadingState(user_id=book_read.user_id, book_id=book_id)\n        kobo_reading_state.current_bookmark = ub.KoboBookmark()\n        kobo_reading_state.statistics = ub.KoboStatistics()\n        book_read.kobo_reading_state = kobo_reading_state\n    ub.session.add(book_read)\n    ub.session_commit()\n    return book_read.kobo_reading_state\n\n\ndef get_kobo_reading_state_response(book, kobo_reading_state):\n    return {\n        \"EntitlementId\": book.uuid,\n        \"Created\": convert_to_kobo_timestamp_string(book.timestamp),\n        \"LastModified\": convert_to_kobo_timestamp_string(kobo_reading_state.last_modified),\n        # AFAICT PriorityTimestamp is always equal to LastModified.\n        \"PriorityTimestamp\": convert_to_kobo_timestamp_string(kobo_reading_state.priority_timestamp),\n        \"StatusInfo\": get_status_info_response(kobo_reading_state.book_read_link),\n        \"Statistics\": get_statistics_response(kobo_reading_state.statistics),\n        \"CurrentBookmark\": get_current_bookmark_response(kobo_reading_state.current_bookmark),\n    }\n\n\ndef get_status_info_response(book_read):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(book_read.last_modified),\n        \"Status\": get_read_status_for_kobo(book_read),\n        \"TimesStartedReading\": book_read.times_started_reading,\n    }\n    if book_read.last_time_started_reading:\n        resp[\"LastTimeStartedReading\"] = convert_to_kobo_timestamp_string(book_read.last_time_started_reading)\n    return resp\n\n\ndef get_statistics_response(statistics):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(statistics.last_modified),\n    }\n    if statistics.spent_reading_minutes:\n        resp[\"SpentReadingMinutes\"] = statistics.spent_reading_minutes\n    if statistics.remaining_time_minutes:\n        resp[\"RemainingTimeMinutes\"] = statistics.remaining_time_minutes\n    return resp\n\n\ndef get_current_bookmark_response(current_bookmark):\n    resp = {\n        \"LastModified\": convert_to_kobo_timestamp_string(current_bookmark.last_modified),\n    }\n    if current_bookmark.progress_percent:\n        resp[\"ProgressPercent\"] = current_bookmark.progress_percent\n    if current_bookmark.content_source_progress_percent:\n        resp[\"ContentSourceProgressPercent\"] = current_bookmark.content_source_progress_percent\n    if current_bookmark.location_value:\n        resp[\"Location\"] = {\n            \"Value\": current_bookmark.location_value,\n            \"Type\": current_bookmark.location_type,\n            \"Source\": current_bookmark.location_source,\n        }\n    return resp\n\n@kobo.route(\"/<book_uuid>/<width>/<height>/<isGreyscale>/image.jpg\", defaults={'Quality': \"\"})\n@kobo.route(\"/<book_uuid>/<width>/<height>/<Quality>/<isGreyscale>/image.jpg\")\n@requires_kobo_auth\ndef HandleCoverImageRequest(book_uuid, width, height,Quality, isGreyscale):\n    book_cover = helper.get_book_cover_with_uuid(\n        book_uuid, use_generic_cover_on_failure=False\n    )\n    if not book_cover:\n        if config.config_kobo_proxy:\n            log.debug(\"Cover for unknown book: %s proxied to kobo\" % book_uuid)\n            return redirect(KOBO_IMAGEHOST_URL +\n                            \"/{book_uuid}/{width}/{height}/false/image.jpg\".format(book_uuid=book_uuid,\n                                                                                   width=width,\n                                                                                   height=height), 307)\n        else:\n            log.debug(\"Cover for unknown book: %s requested\" % book_uuid)\n            # additional proxy request make no sense, -> direct return\n            return make_response(jsonify({}))\n    log.debug(\"Cover request received for book %s\" % book_uuid)\n    return book_cover\n\n\n@kobo.route(\"\")\ndef TopLevelEndpoint():\n    return make_response(jsonify({}))\n\n\n@kobo.route(\"/v1/library/<book_uuid>\", methods=[\"DELETE\"])\n@requires_kobo_auth\ndef HandleBookDeletionRequest(book_uuid):\n    log.info(\"Kobo book deletion request received for book %s\" % book_uuid)\n    book = calibre_db.get_book_by_uuid(book_uuid)\n    if not book:\n        log.info(u\"Book %s not found in database\", book_uuid)\n        return redirect_or_proxy_request()\n\n    book_id = book.id\n    archived_book = (\n        ub.session.query(ub.ArchivedBook)\n        .filter(ub.ArchivedBook.book_id == book_id)\n        .first()\n    )\n    if not archived_book:\n        archived_book = ub.ArchivedBook(user_id=current_user.id, book_id=book_id)\n    archived_book.is_archived = True\n    archived_book.last_modified = datetime.datetime.utcnow()\n\n    ub.session.merge(archived_book)\n    ub.session_commit()\n    return (\"\", 204)\n\n\n# TODO: Implement the following routes\n@kobo.route(\"/v1/library/<dummy>\", methods=[\"DELETE\", \"GET\"])\ndef HandleUnimplementedRequest(dummy=None):\n    log.debug(\"Unimplemented Library Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\n# TODO: Implement the following routes\n@csrf.exempt\n@kobo.route(\"/v1/user/loyalty/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/profile\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/wishlist\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/user/recommendations\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/analytics/<dummy>\", methods=[\"GET\", \"POST\"])\ndef HandleUserRequest(dummy=None):\n    log.debug(\"Unimplemented User Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\n@csrf.exempt\n@kobo.route(\"/v1/products/<dummy>/prices\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/recommendations\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/nextread\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/<dummy>/reviews\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/external/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/series/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/books/<dummy>\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products/dailydeal\", methods=[\"GET\", \"POST\"])\n@kobo.route(\"/v1/products\", methods=[\"GET\", \"POST\"])\ndef HandleProductsRequest(dummy=None):\n    log.debug(\"Unimplemented Products Request received: %s\", request.base_url)\n    return redirect_or_proxy_request()\n\n\ndef make_calibre_web_auth_response():\n    # As described in kobo_auth.py, CalibreWeb doesn't make use practical use of this auth/device API call for\n    # authentation (nor for authorization). We return a dummy response just to keep the device happy.\n    content = request.get_json()\n    AccessToken = base64.b64encode(os.urandom(24)).decode('utf-8')\n    RefreshToken = base64.b64encode(os.urandom(24)).decode('utf-8')\n    return  make_response(\n        jsonify(\n            {\n                \"AccessToken\": AccessToken,\n                \"RefreshToken\": RefreshToken,\n                \"TokenType\": \"Bearer\",\n                \"TrackingId\": str(uuid.uuid4()),\n                \"UserKey\": content['UserKey'],\n            }\n        )\n    )\n\n\n@csrf.exempt\n@kobo.route(\"/v1/auth/device\", methods=[\"POST\"])\n@requires_kobo_auth\ndef HandleAuthRequest():\n    log.debug('Kobo Auth request')\n    if config.config_kobo_proxy:\n        try:\n            return redirect_or_proxy_request()\n        except Exception:\n            log.error(\"Failed to receive or parse response from Kobo's auth endpoint. Falling back to un-proxied mode.\")\n    return make_calibre_web_auth_response()\n\n\n@kobo.route(\"/v1/initialization\")\n@requires_kobo_auth\ndef HandleInitRequest():\n    log.info('Init')\n\n    kobo_resources = None\n    if config.config_kobo_proxy:\n        try:\n            store_response = make_request_to_kobo_store()\n            store_response_json = store_response.json()\n            if \"Resources\" in store_response_json:\n                kobo_resources = store_response_json[\"Resources\"]\n        except Exception:\n            log.error(\"Failed to receive or parse response from Kobo's init endpoint. Falling back to un-proxied mode.\")\n    if not kobo_resources:\n        kobo_resources = NATIVE_KOBO_RESOURCES()\n\n    if not current_app.wsgi_app.is_proxied:\n        log.debug('Kobo: Received unproxied request, changed request port to external server port')\n        if ':' in request.host and not request.host.endswith(']'):\n            host = \"\".join(request.host.split(':')[:-1])\n        else:\n            host = request.host\n        calibre_web_url = \"{url_scheme}://{url_base}:{url_port}\".format(\n            url_scheme=request.scheme,\n            url_base=host,\n            url_port=config.config_external_port\n        )\n        log.debug('Kobo: Received unproxied request, changed request url to %s', calibre_web_url)\n        kobo_resources[\"image_host\"] = calibre_web_url\n        kobo_resources[\"image_url_quality_template\"] = unquote(calibre_web_url +\n                                                               url_for(\"kobo.HandleCoverImageRequest\",\n                                                                       auth_token=kobo_auth.get_auth_token(),\n                                                                       book_uuid=\"{ImageId}\",\n                                                                       width=\"{width}\",\n                                                                       height=\"{height}\",\n                                                                       Quality='{Quality}',\n                                                                       isGreyscale='isGreyscale'))\n        kobo_resources[\"image_url_template\"] = unquote(calibre_web_url +\n                                                       url_for(\"kobo.HandleCoverImageRequest\",\n                                                               auth_token=kobo_auth.get_auth_token(),\n                                                               book_uuid=\"{ImageId}\",\n                                                               width=\"{width}\",\n                                                               height=\"{height}\",\n                                                               isGreyscale='false'))\n    else:\n        kobo_resources[\"image_host\"] = url_for(\"web.index\", _external=True).strip(\"/\")\n        kobo_resources[\"image_url_quality_template\"] = unquote(url_for(\"kobo.HandleCoverImageRequest\",\n                                                                       auth_token=kobo_auth.get_auth_token(),\n                                                                       book_uuid=\"{ImageId}\",\n                                                                       width=\"{width}\",\n                                                                       height=\"{height}\",\n                                                                       Quality='{Quality}',\n                                                                       isGreyscale='isGreyscale',\n                                                                       _external=True))\n        kobo_resources[\"image_url_template\"] = unquote(url_for(\"kobo.HandleCoverImageRequest\",\n                                                               auth_token=kobo_auth.get_auth_token(),\n                                                               book_uuid=\"{ImageId}\",\n                                                               width=\"{width}\",\n                                                               height=\"{height}\",\n                                                               isGreyscale='false',\n                                                               _external=True))\n\n    response = make_response(jsonify({\"Resources\": kobo_resources}))\n    response.headers[\"x-kobo-apitoken\"] = \"e30=\"\n\n    return response\n\n\n@kobo.route(\"/download/<book_id>/<book_format>\")\n@requires_kobo_auth\n@download_required\ndef download_book(book_id, book_format):\n    return get_download_link(book_id, book_format, \"kobo\")\n\n\ndef NATIVE_KOBO_RESOURCES():\n    return {\n        \"account_page\": \"https://secure.kobobooks.com/profile\",\n        \"account_page_rakuten\": \"https://my.rakuten.co.jp/\",\n        \"add_entitlement\": \"https://storeapi.kobo.com/v1/library/{RevisionIds}\",\n        \"affiliaterequest\": \"https://storeapi.kobo.com/v1/affiliate\",\n        \"audiobook_subscription_orange_deal_inclusion_url\": \"https://authorize.kobo.com/inclusion\",\n        \"authorproduct_recommendations\": \"https://storeapi.kobo.com/v1/products/books/authors/recommendations\",\n        \"autocomplete\": \"https://storeapi.kobo.com/v1/products/autocomplete\",\n        \"blackstone_header\": {\"key\": \"x-amz-request-payer\", \"value\": \"requester\"},\n        \"book\": \"https://storeapi.kobo.com/v1/products/books/{ProductId}\",\n        \"book_detail_page\": \"https://store.kobobooks.com/{culture}/ebook/{slug}\",\n        \"book_detail_page_rakuten\": \"https://books.rakuten.co.jp/rk/{crossrevisionid}\",\n        \"book_landing_page\": \"https://store.kobobooks.com/ebooks\",\n        \"book_subscription\": \"https://storeapi.kobo.com/v1/products/books/subscriptions\",\n        \"categories\": \"https://storeapi.kobo.com/v1/categories\",\n        \"categories_page\": \"https://store.kobobooks.com/ebooks/categories\",\n        \"category\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}\",\n        \"category_featured_lists\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}/featured\",\n        \"category_products\": \"https://storeapi.kobo.com/v1/categories/{CategoryId}/products\",\n        \"checkout_borrowed_book\": \"https://storeapi.kobo.com/v1/library/borrow\",\n        \"configuration_data\": \"https://storeapi.kobo.com/v1/configuration\",\n        \"content_access_book\": \"https://storeapi.kobo.com/v1/products/books/{ProductId}/access\",\n        \"customer_care_live_chat\": \"https://v2.zopim.com/widget/livechat.html?key=Y6gwUmnu4OATxN3Tli4Av9bYN319BTdO\",\n        \"daily_deal\": \"https://storeapi.kobo.com/v1/products/dailydeal\",\n        \"deals\": \"https://storeapi.kobo.com/v1/deals\",\n        \"delete_entitlement\": \"https://storeapi.kobo.com/v1/library/{Ids}\",\n        \"delete_tag\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}\",\n        \"delete_tag_items\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}/items/delete\",\n        \"device_auth\": \"https://storeapi.kobo.com/v1/auth/device\",\n        \"device_refresh\": \"https://storeapi.kobo.com/v1/auth/refresh\",\n        \"dictionary_host\": \"https://kbdownload1-a.akamaihd.net\",\n        \"discovery_host\": \"https://discovery.kobobooks.com\",\n        \"eula_page\": \"https://www.kobo.com/termsofuse?style=onestore\",\n        \"exchange_auth\": \"https://storeapi.kobo.com/v1/auth/exchange\",\n        \"external_book\": \"https://storeapi.kobo.com/v1/products/books/external/{Ids}\",\n        \"facebook_sso_page\": \"https://authorize.kobo.com/signin/provider/Facebook/login?returnUrl=http://store.kobobooks.com/\",\n        \"featured_list\": \"https://storeapi.kobo.com/v1/products/featured/{FeaturedListId}\",\n        \"featured_lists\": \"https://storeapi.kobo.com/v1/products/featured\",\n        \"free_books_page\": {\n            \"EN\": \"https://www.kobo.com/{region}/{language}/p/free-ebooks\",\n            \"FR\": \"https://www.kobo.com/{region}/{language}/p/livres-gratuits\",\n            \"IT\": \"https://www.kobo.com/{region}/{language}/p/libri-gratuiti\",\n            \"NL\": \"https://www.kobo.com/{region}/{language}/List/bekijk-het-overzicht-van-gratis-ebooks/QpkkVWnUw8sxmgjSlCbJRg\",\n            \"PT\": \"https://www.kobo.com/{region}/{language}/p/livros-gratis\",\n        },\n        \"fte_feedback\": \"https://storeapi.kobo.com/v1/products/ftefeedback\",\n        \"get_tests_request\": \"https://storeapi.kobo.com/v1/analytics/gettests\",\n        \"giftcard_epd_redeem_url\": \"https://www.kobo.com/{storefront}/{language}/redeem-ereader\",\n        \"giftcard_redeem_url\": \"https://www.kobo.com/{storefront}/{language}/redeem\",\n        \"help_page\": \"https://www.kobo.com/help\",\n        \"kobo_audiobooks_enabled\": \"False\",\n        \"kobo_audiobooks_orange_deal_enabled\": \"False\",\n        \"kobo_audiobooks_subscriptions_enabled\": \"False\",\n        \"kobo_nativeborrow_enabled\": \"True\",\n        \"kobo_onestorelibrary_enabled\": \"False\",\n        \"kobo_redeem_enabled\": \"True\",\n        \"kobo_shelfie_enabled\": \"False\",\n        \"kobo_subscriptions_enabled\": \"False\",\n        \"kobo_superpoints_enabled\": \"False\",\n        \"kobo_wishlist_enabled\": \"True\",\n        \"library_book\": \"https://storeapi.kobo.com/v1/user/library/books/{LibraryItemId}\",\n        \"library_items\": \"https://storeapi.kobo.com/v1/user/library\",\n        \"library_metadata\": \"https://storeapi.kobo.com/v1/library/{Ids}/metadata\",\n        \"library_prices\": \"https://storeapi.kobo.com/v1/user/library/previews/prices\",\n        \"library_stack\": \"https://storeapi.kobo.com/v1/user/library/stacks/{LibraryItemId}\",\n        \"library_sync\": \"https://storeapi.kobo.com/v1/library/sync\",\n        \"love_dashboard_page\": \"https://store.kobobooks.com/{culture}/kobosuperpoints\",\n        \"love_points_redemption_page\": \"https://store.kobobooks.com/{culture}/KoboSuperPointsRedemption?productId={ProductId}\",\n        \"magazine_landing_page\": \"https://store.kobobooks.com/emagazines\",\n        \"notifications_registration_issue\": \"https://storeapi.kobo.com/v1/notifications/registration\",\n        \"oauth_host\": \"https://oauth.kobo.com\",\n        \"overdrive_account\": \"https://auth.overdrive.com/account\",\n        \"overdrive_library\": \"https://{libraryKey}.auth.overdrive.com/library\",\n        \"overdrive_library_finder_host\": \"https://libraryfinder.api.overdrive.com\",\n        \"overdrive_thunder_host\": \"https://thunder.api.overdrive.com\",\n        \"password_retrieval_page\": \"https://www.kobobooks.com/passwordretrieval.html\",\n        \"post_analytics_event\": \"https://storeapi.kobo.com/v1/analytics/event\",\n        \"privacy_page\": \"https://www.kobo.com/privacypolicy?style=onestore\",\n        \"product_nextread\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/nextread\",\n        \"product_prices\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/prices\",\n        \"product_recommendations\": \"https://storeapi.kobo.com/v1/products/{ProductId}/recommendations\",\n        \"product_reviews\": \"https://storeapi.kobo.com/v1/products/{ProductIds}/reviews\",\n        \"products\": \"https://storeapi.kobo.com/v1/products\",\n        \"provider_external_sign_in_page\": \"https://authorize.kobo.com/ExternalSignIn/{providerName}?returnUrl=http://store.kobobooks.com/\",\n        \"purchase_buy\": \"https://www.kobo.com/checkout/createpurchase/\",\n        \"purchase_buy_templated\": \"https://www.kobo.com/{culture}/checkout/createpurchase/{ProductId}\",\n        \"quickbuy_checkout\": \"https://storeapi.kobo.com/v1/store/quickbuy/{PurchaseId}/checkout\",\n        \"quickbuy_create\": \"https://storeapi.kobo.com/v1/store/quickbuy/purchase\",\n        \"rating\": \"https://storeapi.kobo.com/v1/products/{ProductId}/rating/{Rating}\",\n        \"reading_state\": \"https://storeapi.kobo.com/v1/library/{Ids}/state\",\n        \"redeem_interstitial_page\": \"https://store.kobobooks.com\",\n        \"registration_page\": \"https://authorize.kobo.com/signup?returnUrl=http://store.kobobooks.com/\",\n        \"related_items\": \"https://storeapi.kobo.com/v1/products/{Id}/related\",\n        \"remaining_book_series\": \"https://storeapi.kobo.com/v1/products/books/series/{SeriesId}\",\n        \"rename_tag\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}\",\n        \"review\": \"https://storeapi.kobo.com/v1/products/reviews/{ReviewId}\",\n        \"review_sentiment\": \"https://storeapi.kobo.com/v1/products/reviews/{ReviewId}/sentiment/{Sentiment}\",\n        \"shelfie_recommendations\": \"https://storeapi.kobo.com/v1/user/recommendations/shelfie\",\n        \"sign_in_page\": \"https://authorize.kobo.com/signin?returnUrl=http://store.kobobooks.com/\",\n        \"social_authorization_host\": \"https://social.kobobooks.com:8443\",\n        \"social_host\": \"https://social.kobobooks.com\",\n        \"stacks_host_productId\": \"https://store.kobobooks.com/collections/byproductid/\",\n        \"store_home\": \"www.kobo.com/{region}/{language}\",\n        \"store_host\": \"store.kobobooks.com\",\n        \"store_newreleases\": \"https://store.kobobooks.com/{culture}/List/new-releases/961XUjtsU0qxkFItWOutGA\",\n        \"store_search\": \"https://store.kobobooks.com/{culture}/Search?Query={query}\",\n        \"store_top50\": \"https://store.kobobooks.com/{culture}/ebooks/Top\",\n        \"tag_items\": \"https://storeapi.kobo.com/v1/library/tags/{TagId}/Items\",\n        \"tags\": \"https://storeapi.kobo.com/v1/library/tags\",\n        \"taste_profile\": \"https://storeapi.kobo.com/v1/products/tasteprofile\",\n        \"update_accessibility_to_preview\": \"https://storeapi.kobo.com/v1/library/{EntitlementIds}/preview\",\n        \"use_one_store\": \"False\",\n        \"user_loyalty_benefits\": \"https://storeapi.kobo.com/v1/user/loyalty/benefits\",\n        \"user_platform\": \"https://storeapi.kobo.com/v1/user/platform\",\n        \"user_profile\": \"https://storeapi.kobo.com/v1/user/profile\",\n        \"user_ratings\": \"https://storeapi.kobo.com/v1/user/ratings\",\n        \"user_recommendations\": \"https://storeapi.kobo.com/v1/user/recommendations\",\n        \"user_reviews\": \"https://storeapi.kobo.com/v1/user/reviews\",\n        \"user_wishlist\": \"https://storeapi.kobo.com/v1/user/wishlist\",\n        \"userguide_host\": \"https://kbdownload1-a.akamaihd.net\",\n        \"wishlist_page\": \"https://store.kobobooks.com/{region}/{language}/account/wishlist\",\n    }\n", "/**\n * Created by SpeedProg on 05.04.2015.\n */\n/* global Bloodhound, language, Modernizr, tinymce, getPath */\n\nif ($(\"#description\").length) {\n    tinymce.init({\n        selector: \"#description\",\n        branding: false,\n        menubar: \"edit view format\",\n        language: language\n    });\n}\n\nif ($(\".tiny_editor\").length) {\n    tinymce.init({\n        selector: \".tiny_editor\",\n        branding: false,\n        menubar: \"edit view format\",\n        language: language\n    });\n}\n\n$(\".datepicker\").datepicker({\n    format: \"yyyy-mm-dd\",\n}).on(\"change\", function () {\n    // Show localized date over top of the standard YYYY-MM-DD date\n    var pubDate;\n    var results = /(\\d{4})[-\\/\\\\](\\d{1,2})[-\\/\\\\](\\d{1,2})/.exec(this.value); // YYYY-MM-DD\n    if (results) {\n        pubDate = new Date(results[1], parseInt(results[2], 10) - 1, results[3]) || new Date(this.value);\n        $(this).next('input')\n            .val(pubDate.toLocaleDateString(language))\n            .removeClass(\"hidden\");\n    }\n}).trigger(\"change\");\n\n$(\".datepicker_delete\").click(function() {\n    var inputs = $(this).parent().siblings('input');\n    $(inputs[0]).data('datepicker').clearDates();\n    $(inputs[1]).addClass('hidden');\n});\n\n\n/*\nTakes a prefix, query typeahead callback, Bloodhound typeahead adapter\n and returns the completions it gets from the bloodhound engine prefixed.\n */\nfunction prefixedSource(prefix, query, cb, bhAdapter) {\n    bhAdapter(query, function(retArray) {\n        var matches = [];\n        for (var i = 0; i < retArray.length; i++) {\n            var obj = {name : prefix + retArray[i].name};\n            matches.push(obj);\n        }\n        cb(matches);\n    });\n}\n\nvar authors = new Bloodhound({\n    name: \"authors\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    remote: {\n        url: getPath() + \"/get_authors_json?q=%QUERY\"\n    }\n});\n\nvar series = new Bloodhound({\n    name: \"series\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        return [query];\n    },\n    remote: {\n        url: getPath() + \"/get_series_json?q=\",\n        replace: function replace(url, query) {\n            return url + encodeURIComponent(query);\n        }\n    }\n});\n\n\nvar tags = new Bloodhound({\n    name: \"tags\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        var tokens = query.split(\",\");\n        tokens = [tokens[tokens.length - 1].trim()];\n        return tokens;\n    },\n    remote: {\n        url: getPath() + \"/get_tags_json?q=%QUERY\"\n    }\n});\n\nvar languages = new Bloodhound({\n    name: \"languages\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: function queryTokenizer(query) {\n        return [query];\n    },\n    remote: {\n        url: getPath() + \"/get_languages_json?q=\",\n        replace: function replace(url, query) {\n            return url + encodeURIComponent(query);\n        }\n    }\n});\n\nvar publishers = new Bloodhound({\n    name: \"publisher\",\n    datumTokenizer: function datumTokenizer(datum) {\n        return [datum.name];\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    remote: {\n        url: getPath() + \"/get_publishers_json?q=%QUERY\"\n    }\n});\n\nfunction sourceSplit(query, cb, split, source) {\n    var bhAdapter = source.ttAdapter();\n\n    var tokens = query.split(split);\n    var currentSource = tokens[tokens.length - 1].trim();\n\n    tokens.splice(tokens.length - 1, 1); // remove last element\n    var prefix = \"\";\n    var newSplit;\n    if (split === \"&\") {\n        newSplit = \" \" + split + \" \";\n    } else {\n        newSplit = split + \" \";\n    }\n    for (var i = 0; i < tokens.length; i++) {\n        prefix += tokens[i].trim() + newSplit;\n    }\n    prefixedSource(prefix, currentSource, cb, bhAdapter);\n}\n\nvar promiseAuthors = authors.initialize();\npromiseAuthors.done(function() {\n    $(\"#bookAuthor\").typeahead(\n        {\n            highlight: true, minLength: 1,\n            hint: true\n        }, {\n            name: \"authors\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \"&\", authors); //sourceSplit //(\"&\")\n            }\n        }\n    );\n});\n\nvar promiseSeries = series.initialize();\npromiseSeries.done(function() {\n    $(\"#series\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"series\",\n            displayKey: \"name\",\n            source: series.ttAdapter()\n        }\n    );\n});\n\nvar promiseTags = tags.initialize();\npromiseTags.done(function() {\n    $(\"#tags\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"tags\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \",\", tags);\n            }\n        }\n    );\n});\n\nvar promiseLanguages = languages.initialize();\npromiseLanguages.done(function() {\n    $(\"#languages\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"languages\",\n            displayKey: \"name\",\n            source: function source(query, cb) {\n                return sourceSplit(query, cb, \",\", languages); //(\",\")\n            }\n        }\n    );\n});\n\nvar promisePublishers = publishers.initialize();\npromisePublishers.done(function() {\n    $(\"#publisher\").typeahead(\n        {\n            highlight: true, minLength: 0,\n            hint: true\n        }, {\n            name: \"publishers\",\n            displayKey: \"name\",\n            source: publishers.ttAdapter()\n        }\n    );\n});\n\n$(\"#search\").on(\"change input.typeahead:selected\", function(event) {\n    if (event.target.type === \"search\" && event.target.tagName === \"INPUT\") {\n        return;\n    }\n    var form = $(\"form\").serialize();\n    $.getJSON( getPath() + \"/get_matching_tags\", form, function( data ) {\n        $(\".tags_click\").each(function() {\n            if ($.inArray(parseInt($(this).val(), 10), data.tags) === -1) {\n                if (!$(this).prop(\"selected\")) {\n                    $(this).prop(\"disabled\", true);\n                }\n            } else {\n                $(this).prop(\"disabled\", false);\n            }\n        });\n        $(\"#include_tag option:selected\").each(function () {\n            $(\"#exclude_tag\").find(\"[value=\" + $(this).val() + \"]\").prop(\"disabled\", true);\n        });\n        $(\"#include_tag\").selectpicker(\"refresh\");\n        $(\"#exclude_tag\").selectpicker(\"refresh\");\n    });\n});\n\n$(\"#btn-upload-format\").on(\"change\", function () {\n    var filename = $(this).val();\n    if (filename.substring(3, 11) === \"fakepath\") {\n        filename = filename.substring(12);\n    } // Remove c:\\fake at beginning from localhost chrome\n    $(\"#upload-format\").html(filename);\n});\n\n$(\"#btn-upload-cover\").on(\"change\", function () {\n    var filename = $(this).val();\n    if (filename.substring(3, 11) === \"fakepath\") {\n        filename = filename.substring(12);\n    } // Remove c:\\fake at beginning from localhost chrome\n    $(\"#upload-cover\").html(filename);\n});\n\n$(\"#xchange\").click(function () {\n    this.blur();\n    var title = $(\"#book_title\").val();\n    $(\"#book_title\").val($(\"#bookAuthor\").val());\n    $(\"#bookAuthor\").val(title);\n});\n\n", "/* This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n *    Copyright (C) 2012-2019  mutschler, janeczku, jkrehm, OzzieIsaacs\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nfunction getPath() {\n    var jsFileLocation = $(\"script[src*=jquery]\").attr(\"src\");  // the js file path\n    return jsFileLocation.substr(0, jsFileLocation.search(\"/static/js/libs/jquery.min.js\"));  // the js folder path\n}\n\nfunction elementSorter(a, b) {\n    a = +a.slice(0, -2);\n    b = +b.slice(0, -2);\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n}\n\n// Generic control/related handler to show/hide fields based on a checkbox' value\n// e.g.\n//  <input type=\"checkbox\" data-control=\"stuff-to-show\">\n//  <div data-related=\"stuff-to-show\">...</div>\n$(document).on(\"change\", \"input[type=\\\"checkbox\\\"][data-control]\", function () {\n    var $this = $(this);\n    var name = $this.data(\"control\");\n    var showOrHide = $this.prop(\"checked\");\n\n    $(\"[data-related=\\\"\" + name + \"\\\"]\").each(function () {\n        $(this).toggle(showOrHide);\n    });\n});\n\n// Generic control/related handler to show/hide fields based on a select' value\n$(document).on(\"change\", \"select[data-control]\", function() {\n    var $this = $(this);\n    var name = $this.data(\"control\");\n    var showOrHide = parseInt($this.val(), 10);\n    // var showOrHideLast = $(\"#\" + name + \" option:last\").val()\n    for (var i = 0; i < $(this)[0].length; i++) {\n        var element = parseInt($(this)[0][i].value, 10);\n        if (element === showOrHide) {\n            $(\"[data-related^=\" + name + \"][data-related*=-\" + element + \"]\").show();\n        } else {\n            $(\"[data-related^=\" + name + \"][data-related*=-\" + element + \"]\").hide();\n        }\n    }\n});\n\n// Generic control/related handler to show/hide fields based on a select' value\n// this one is made to show all values if select value is not 0\n$(document).on(\"change\", \"select[data-controlall]\", function() {\n    var $this = $(this);\n    var name = $this.data(\"controlall\");\n    var showOrHide = parseInt($this.val(), 10);\n    if (showOrHide) {\n        $(\"[data-related=\" + name + \"]\").show();\n    } else {\n        $(\"[data-related=\" + name + \"]\").hide();\n    }\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind(\"dragenter dragover\", function () {\n    if($(\"#btn-upload\").length && !$('body').hasClass('shelforder')) {\n        $(this).css('background', '#e6e6e6');\n    }\n    return false;\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind(\"dragleave\", function () {\n    if($(\"#btn-upload\").length && !$('body').hasClass('shelforder')) {\n        $(this).css('background', '');\n    }\n    return false;\n});\n\n// Syntax has to be bind not on, otherwise problems with firefox\n$(\".container-fluid\").bind('drop', function (e) {\n    e.preventDefault()\n    e.stopPropagation();\n    if($(\"#btn-upload\").length) {\n        var files = e.originalEvent.dataTransfer.files;\n        var test = $(\"#btn-upload\")[0].accept;\n        $(this).css('background', '');\n        const dt = new DataTransfer();\n        jQuery.each(files, function (index, item) {\n            if (test.indexOf(item.name.substr(item.name.lastIndexOf('.'))) !== -1) {\n                dt.items.add(item);\n            }\n        });\n        if (dt.files.length) {\n            $(\"#btn-upload\")[0].files = dt.files;\n            $(\"#form-upload\").submit();\n        }\n    }\n});\n\n$(\"#btn-upload\").change(function() {\n    $(\"#form-upload\").submit();\n});\n\n$(\"#form-upload\").uploadprogress({\n    redirect_url: getPath() + \"/\", //\"{{ url_for('web.index')}}\",\n    uploadedMsg: $(\"#form-upload\").data(\"message\"), //\"{{_('Upload done, processing, please wait...')}}\",\n    modalTitle: $(\"#form-upload\").data(\"title\"), //\"{{_('Uploading...')}}\",\n    modalFooter: $(\"#form-upload\").data(\"footer\"), //\"{{_('Close')}}\",\n    modalTitleFailed: $(\"#form-upload\").data(\"failed\") //\"{{_('Error')}}\"\n});\n\n$(document).ready(function() {\n  var inp = $('#query').first()\n  if (inp.length) {\n    var val = inp.val()\n    if (val.length) {\n      inp.val('').blur().focus().val(val)\n    }\n  }\n});\n\n$(\".session\").click(function() {\n    window.sessionStorage.setItem(\"back\", window.location.pathname);\n});\n\n$(\"#back\").click(function() {\n   var loc = sessionStorage.getItem(\"back\");\n   if (!loc) {\n       loc = $(this).data(\"back\");\n   }\n   sessionStorage.removeItem(\"back\");\n   window.location.href = loc;\n\n});\n\nfunction confirmDialog(id, dialogid, dataValue, yesFn, noFn) {\n    var $confirm = $(\"#\" + dialogid);\n    $(\"#btnConfirmYes-\"+ dialogid).off('click').click(function () {\n        yesFn(dataValue);\n        $confirm.modal(\"hide\");\n    });\n    $(\"#btnConfirmNo-\"+ dialogid).off('click').click(function () {\n        if (typeof noFn !== 'undefined') {\n            noFn(dataValue);\n        }\n        $confirm.modal(\"hide\");\n    });\n    $.ajax({\n        method:\"post\",\n        dataType: \"json\",\n        url: getPath() + \"/ajax/loaddialogtexts/\" + id,\n        success: function success(data) {\n            $(\"#header-\"+ dialogid).html(data.header);\n            $(\"#text-\"+ dialogid).html(data.main);\n        }\n    });\n    $confirm.modal('show');\n}\n\n$(\"#delete_confirm\").click(function() {\n    //get data-id attribute of the clicked element\n    var deleteId = $(this).data(\"delete-id\");\n    var bookFormat = $(this).data(\"delete-format\");\n    var ajaxResponse = $(this).data(\"ajax\");\n    if (bookFormat) {\n        window.location.href = getPath() + \"/delete/\" + deleteId + \"/\" + bookFormat;\n    } else {\n        if (ajaxResponse) {\n            path = getPath() + \"/ajax/delete/\" + deleteId;\n            $.ajax({\n                method:\"get\",\n                url: path,\n                timeout: 900,\n                success:function(data) {\n                    data.forEach(function(item) {\n                        if (!jQuery.isEmptyObject(item)) {\n                            if (item.format != \"\") {\n                                $(\"button[data-delete-format='\"+item.format+\"']\").addClass('hidden');\n                            }\n                            $( \".navbar\" ).after( '<div class=\"row-fluid text-center\" >' +\n                                '<div id=\"flash_'+item.type+'\" class=\"alert alert-'+item.type+'\">'+item.message+'</div>' +\n                                '</div>');\n\n                        }\n                    });\n                    $(\"#books-table\").bootstrapTable(\"refresh\");\n                }\n            });\n        } else {\n            window.location.href = getPath() + \"/delete/\" + deleteId;\n\n        }\n    }\n\n});\n\n//triggered when modal is about to be shown\n$(\"#deleteModal\").on(\"show.bs.modal\", function(e) {\n    //get data-id attribute of the clicked element and store in button\n    var bookId = $(e.relatedTarget).data(\"delete-id\");\n    var bookfomat = $(e.relatedTarget).data(\"delete-format\");\n    if (bookfomat) {\n        $(\"#book_format\").removeClass('hidden');\n        $(\"#book_complete\").addClass('hidden');\n    } else {\n        $(\"#book_complete\").removeClass('hidden');\n        $(\"#book_format\").addClass('hidden');\n    }\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"delete-id\", bookId);\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"delete-format\", bookfomat);\n    $(e.currentTarget).find(\"#delete_confirm\").data(\"ajax\", $(e.relatedTarget).data(\"ajax\"));\n});\n\n$(function() {\n    var updateTimerID;\n    var updateText;\n\n    // Allow ajax prefilters to be added/removed dynamically\n    // eslint-disable-next-line new-cap\n    var preFilters = $.Callbacks();\n    $.ajaxPrefilter(preFilters.fire);\n\n    // equip all post requests with csrf_token\n    var csrftoken = $(\"input[name='csrf_token']\").val();\n    $.ajaxSetup({\n        beforeSend: function(xhr, settings) {\n            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n                xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n            }\n        }\n    });\n\n    function restartTimer() {\n        $(\"#spinner\").addClass(\"hidden\");\n        $(\"#RestartDialog\").modal(\"hide\");\n    }\n\n    function cleanUp() {\n        clearInterval(updateTimerID);\n        $(\"#spinner2\").hide();\n        $(\"#DialogFinished\").removeClass(\"hidden\");\n        $(\"#check_for_update\").removeClass(\"hidden\");\n        $(\"#perform_update\").addClass(\"hidden\");\n        $(\"#message\").alert(\"close\");\n        $(\"#update_table > tbody > tr\").each(function () {\n            if ($(this).attr(\"id\") !== \"current_version\") {\n                $(this).closest(\"tr\").remove();\n            }\n        });\n    }\n\n    function updateTimer() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../get_updater_status\",\n            success: function success(data) {\n                $(\"#DialogContent\").html(updateText[data.status]);\n                if (data.status > 6) {\n                    cleanUp();\n                }\n            },\n            error: function error() {\n                $(\"#DialogContent\").html(updateText[11]);\n                cleanUp();\n            },\n            timeout: 2000\n        });\n    }\n\n    function fillFileTable(path, type, folder, filt) {\n        if (window.location.pathname.endsWith(\"/basicconfig\")) {\n            var request_path = \"/../basicconfig/pathchooser/\";\n        } else {\n            var request_path = \"/../../ajax/pathchooser/\";\n        }\n        $.ajax({\n            dataType: \"json\",\n            data: {\n                path: path,\n                folder: folder,\n                filter: filt\n            },\n            url: window.location.pathname + request_path,\n            success: function success(data) {\n                if ($(\"#element_selected\").text() ===\"\") {\n                    $(\"#element_selected\").text(data.cwd);\n                }\n                $(\"#file_table > tbody > tr\").each(function () {\n                    if ($(this).attr(\"id\") !== \"parent\") {\n                        $(this).closest(\"tr\").remove();\n                    } else {\n                        if(data.absolute && data.parentdir !== \"\") {\n                           $(this)[0].attributes['data-path'].value  = data.parentdir;\n                        } else {\n                            $(this)[0].attributes['data-path'].value  = \"..\";\n                        }\n                    }\n                });\n                if (data.parentdir !== \"\") {\n                    $(\"#parent\").removeClass('hidden')\n                } else {\n                    $(\"#parent\").addClass('hidden')\n                }\n                // console.log(data);\n                data.files.forEach(function(entry) {\n                    if(entry.type === \"dir\") {\n                        var type = \"<span class=\\\"glyphicon glyphicon-folder-close\\\"></span>\";\n                } else {\n                    var type = \"\";\n                }\n                    $(\"<tr class=\\\"tr-clickable\\\" data-type=\\\"\" + entry.type + \"\\\" data-path=\\\"\" +\n                        entry.fullpath + \"\\\"><td>\" + type + \"</td><td>\" + entry.name + \"</td><td>\" +\n                        entry.size + \"</td></tr>\").appendTo($(\"#file_table\"));\n                });\n            },\n            timeout: 2000\n        });\n    }\n\n    $(\".discover .row\").isotope({\n        // options\n        itemSelector : \".book\",\n        layoutMode : \"fitRows\"\n    });\n\n    $(\".grid\").isotope({\n        // options\n        itemSelector : \".grid-item\",\n        layoutMode : \"fitColumns\"\n    });\n\n    if ($(\".load-more\").length && $(\".next\").length) {\n        var $loadMore = $(\".load-more .row\").infiniteScroll({\n            debug: false,\n            // selector for the paged navigation (it will be hidden)\n            path : \".next\",\n            // selector for the NEXT link (to page 2)\n            append : \".load-more .book\"\n            //animate      : true, # ToDo: Reenable function\n            //extraScrollPx: 300\n        });\n        $loadMore.on( \"append.infiniteScroll\", function( event, response, path, data ) {\n            if ($(\"body\").hasClass(\"blur\")) {\n                $(\".pagination\").addClass(\"hidden\").html(() => $(response).find(\".pagination\").html());\n                $(\" a:not(.dropdown-toggle) \")\n                  .removeAttr(\"data-toggle\");\n            }\n            $(\".load-more .row\").isotope( \"appended\", $(data), null );\n        });\n\n        // fix for infinite scroll on CaliBlur Theme (#981)\n        if ($(\"body\").hasClass(\"blur\")) {\n            $(\".col-sm-10\").bind(\"scroll\", function () {\n                if (\n                    $(this).scrollTop() + $(this).innerHeight() >=\n                    $(this)[0].scrollHeight\n                ) {\n                    $loadMore.infiniteScroll(\"loadNextPage\");\n                    window.history.replaceState({}, null, $loadMore.infiniteScroll(\"getAbsolutePath\"));\n                }\n            });\n        }\n    }\n\n    $(\"#restart\").click(function() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":0},\n            success: function success() {\n                $(\"#spinner\").show();\n                setTimeout(restartTimer, 3000);\n            }\n        });\n    });\n    $(\"#shutdown\").click(function() {\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":1},\n            success: function success(data) {\n                return alert(data.text);\n            }\n        });\n    });\n    $(\"#check_for_update\").click(function() {\n        var $this = $(this);\n        var buttonText = $this.html();\n        $this.html(\"...\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#update_error\").addClass(\"hidden\");\n        if ($(\"#message\").length) {\n            $(\"#message\").alert(\"close\");\n        }\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../get_update_status\",\n            success: function success(data) {\n                $this.html(buttonText);\n\n                var cssClass = \"\";\n                var message = \"\";\n\n                if (data.success === true) {\n                    if (data.update === true) {\n                        $(\"#check_for_update\").addClass(\"hidden\");\n                        $(\"#perform_update\").removeClass(\"hidden\");\n                        $(\"#update_info\")\n                            .removeClass(\"hidden\")\n                            .find(\"span\").html(data.commit);\n\n                        data.history.forEach(function(entry) {\n                            $(\"<tr><td>\" + entry[0] + \"</td><td>\" + entry[1] + \"</td></tr>\").appendTo($(\"#update_table\"));\n                        });\n                        cssClass = \"alert-warning\";\n                    } else {\n                        cssClass = \"alert-success\";\n                    }\n                } else {\n                    cssClass = \"alert-danger\";\n                }\n\n                message = \"<div id=\\\"message\\\" class=\\\"alert \" + cssClass\n                    + \" fade in\\\"><a href=\\\"#\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">&times;</a>\"\n                    + data.message + \"</div>\";\n\n                $(message).insertAfter($(\"#update_table\"));\n            }\n        });\n    });\n    $(\"#restart_database\").click(function() {\n        $(\"#DialogHeader\").addClass(\"hidden\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../shutdown\",\n            data: {\"parameter\":2},\n            success: function success(data) {\n                $(\"#spinner2\").hide();\n                $(\"#DialogContent\").html(data.text);\n                $(\"#DialogFinished\").removeClass(\"hidden\");\n            }\n        });\n    });\n    $(\"#perform_update\").click(function() {\n        $(\"#DialogHeader\").removeClass(\"hidden\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            type: \"POST\",\n            dataType: \"json\",\n            data: { start: \"True\"},\n            url: window.location.pathname + \"/../../get_updater_status\",\n            success: function success(data) {\n                updateText = data.text;\n                $(\"#DialogContent\").html(updateText[data.status]);\n                updateTimerID = setInterval(updateTimer, 2000);\n            }\n        });\n    });\n\n    // Init all data control handlers to default\n    $(\"input[data-control]\").trigger(\"change\");\n    $(\"select[data-control]\").trigger(\"change\");\n    $(\"select[data-controlall]\").trigger(\"change\");\n\n    $(\"#bookDetailsModal\")\n        .on(\"show.bs.modal\", function(e) {\n            var $modalBody = $(this).find(\".modal-body\");\n\n            // Prevent static assets from loading multiple times\n            var useCache = function(options) {\n                options.async = true;\n                options.cache = true;\n            };\n            preFilters.add(useCache);\n\n            $.get(e.relatedTarget.href).done(function(content) {\n                $modalBody.html(content);\n                preFilters.remove(useCache);\n            });\n        })\n        .on(\"hidden.bs.modal\", function() {\n            $(this).find(\".modal-body\").html(\"...\");\n        });\n\n    $(\"#modal_kobo_token\")\n        .on(\"show.bs.modal\", function(e) {\n            var $modalBody = $(this).find(\".modal-body\");\n\n            // Prevent static assets from loading multiple times\n            var useCache = function(options) {\n                options.async = true;\n                options.cache = true;\n            };\n            preFilters.add(useCache);\n\n            $.get(e.relatedTarget.href).done(function(content) {\n                $modalBody.html(content);\n                preFilters.remove(useCache);\n            });\n        })\n        .on(\"hidden.bs.modal\", function() {\n            $(this).find(\".modal-body\").html(\"...\");\n            $(\"#config_delete_kobo_token\").show();\n        });\n\n    $(\"#config_delete_kobo_token\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function (value) {\n                $.ajax({\n                    method: \"get\",\n                    url: getPath() + \"/kobo_auth/deleteauthtoken/\" + value,\n                });\n                $(\"#config_delete_kobo_token\").hide();\n            }\n        );\n    });\n\n    $(\"#toggle_order_shelf\").click(function() {\n        $(\"#new\").toggleClass(\"disabled\");\n        $(\"#old\").toggleClass(\"disabled\");\n        $(\"#asc\").toggleClass(\"disabled\");\n        $(\"#desc\").toggleClass(\"disabled\");\n        $(\"#auth_az\").toggleClass(\"disabled\");\n        $(\"#auth_za\").toggleClass(\"disabled\");\n        $(\"#pub_new\").toggleClass(\"disabled\");\n        $(\"#pub_old\").toggleClass(\"disabled\");\n        var alternative_text = $(\"#toggle_order_shelf\").data('alt-text');\n        $(\"#toggle_order_shelf\").data('alt-text', $(\"#toggle_order_shelf\").html());\n        $(\"#toggle_order_shelf\").html(alternative_text);\n    });\n\n    $(\"#btndeluser\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function(value){\n                var subform = $('#user_submit').closest(\"form\");\n                subform.submit(function(eventObj) {\n                    $(this).append('<input type=\"hidden\" name=\"delete\" value=\"True\" />');\n                    return true;\n                });\n                subform.submit();\n            }\n        );\n    });\n    $(\"#user_submit\").click(function() {\n        this.closest(\"form\").submit();\n    });\n\n    function handle_response(data) {\n        if (!jQuery.isEmptyObject(data)) {\n            data.forEach(function (item) {\n                $(\".navbar\").after('<div class=\"row-fluid text-center\">' +\n                    '<div id=\"flash_' + item.type + '\" class=\"alert alert-' + item.type + '\">' + item.message + '</div>' +\n                    '</div>');\n            });\n        }\n    }\n\n    $('.collapse').on('shown.bs.collapse', function(){\n        $(this).parent().find(\".glyphicon-plus\").removeClass(\"glyphicon-plus\").addClass(\"glyphicon-minus\");\n    }).on('hidden.bs.collapse', function(){\n    $(this).parent().find(\".glyphicon-minus\").removeClass(\"glyphicon-minus\").addClass(\"glyphicon-plus\");\n    });\n\n    function changeDbSettings() {\n        $(\"#db_submit\").closest('form').submit();\n    }\n\n    $(\"#db_submit\").click(function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.blur();\n        $.ajax({\n            method:\"post\",\n            dataType: \"json\",\n            url: window.location.pathname + \"/../../ajax/simulatedbchange\",\n            data: {config_calibre_dir: $(\"#config_calibre_dir\").val(), csrf_token: $(\"input[name='csrf_token']\").val()},\n            success: function success(data) {\n                if ( data.change ) {\n                    if ( data.valid ) {\n                        confirmDialog(\n                        \"db_submit\",\n                    \"GeneralChangeModal\",\n                            0,\n                            changeDbSettings\n                        );\n                    }\n                    else {\n                        $(\"#InvalidDialog\").modal('show');\n                    }\n                } else {                \t\n                    changeDbSettings();\n                }\n            }\n        });\n    });\n\n    $(\"#config_submit\").click(function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.blur();\n        window.scrollTo({top: 0, behavior: 'smooth'});\n        var request_path = \"/../../admin/ajaxconfig\";\n        var loader = \"/../..\";\n        $(\"#flash_success\").remove();\n        $(\"#flash_danger\").remove();\n        $.post(window.location.pathname + request_path, $(this).closest(\"form\").serialize(), function(data) {\n            $('#config_upload_formats').val(data.config_upload);\n            if(data.reboot) {\n                $(\"#spinning_success\").show();\n                var rebootInterval = setInterval(function(){\n                    $.get({\n                        url:window.location.pathname + \"/../../admin/alive\",\n                        success: function (d, statusText, xhr) {\n                            if (xhr.status < 400) {\n                                $(\"#spinning_success\").hide();\n                                clearInterval(rebootInterval);\n                                if (data.result) {\n                                    handle_response(data.result);\n                                    data.result = \"\";\n                                }\n                            }\n                        },\n                    });\n                }, 1000);\n            } else {\n                handle_response(data.result);\n            }\n        });\n    });\n\n    $(\"#delete_shelf\").click(function() {\n        confirmDialog(\n            $(this).attr('id'),\n            \"GeneralDeleteModal\",\n            $(this).data('value'),\n            function(value){\n                window.location.href = window.location.pathname + \"/../../shelf/delete/\" + value\n            }\n        );\n\n    });\n\n    $(\"#fileModal\").on(\"show.bs.modal\", function(e) {\n        var target = $(e.relatedTarget);\n        var path = $(\"#\" + target.data(\"link\"))[0].value;\n        var folder = target.data(\"folderonly\");\n        var filter = target.data(\"filefilter\");\n        $(\"#element_selected\").text(path);\n        $(\"#file_confirm\").data(\"link\", target.data(\"link\"));\n        $(\"#file_confirm\").data(\"folderonly\", (typeof folder === 'undefined') ? false : true);\n        $(\"#file_confirm\").data(\"filefilter\", (typeof filter === 'undefined') ? \"\" : filter);\n        $(\"#file_confirm\").data(\"newfile\", target.data(\"newfile\"));\n        fillFileTable(path,\"dir\", folder, filter);\n    });\n\n    $(\"#file_confirm\").click(function() {\n        $(\"#\" + $(this).data(\"link\"))[0].value = $(\"#element_selected\").text()\n    });\n\n    $(document).on(\"click\", \".tr-clickable\", function() {\n        var path = this.attributes[\"data-path\"].value;\n        var type = this.attributes[\"data-type\"].value;\n        var folder = $(file_confirm).data(\"folderonly\");\n        var filter = $(file_confirm).data(\"filefilter\");\n        var newfile = $(file_confirm).data(\"newfile\");\n        if (newfile !== \"\") {\n            $(\"#element_selected\").text(path + $(\"#new_file\".text()));\n        } else {\n            $(\"#element_selected\").text(path);\n        }\n        if(type === \"dir\") {\n            fillFileTable(path, type, folder, filter);\n        }\n    });\n\n    $(window).resize(function() {\n        $(\".discover .row\").isotope(\"layout\");\n    });\n\n    $(\"#import_ldap_users\").click(function() {\n        $(\"#DialogHeader\").addClass(\"hidden\");\n        $(\"#DialogFinished\").addClass(\"hidden\");\n        $(\"#DialogContent\").html(\"\");\n        $(\"#spinner2\").show();\n        $.ajax({\n            method:\"get\",\n            dataType: \"json\",\n            url: getPath() + \"/import_ldap_users\",\n            success: function success(data) {\n                $(\"#spinner2\").hide();\n                $(\"#DialogContent\").html(data.text);\n                $(\"#DialogFinished\").removeClass(\"hidden\");\n            }\n        });\n    });\n\n    $(\".author-expand\").click(function() {\n        $(this).parent().find(\"a.author-name\").slice($(this).data(\"authors-max\")).toggle();\n        $(this).parent().find(\"span.author-hidden-divider\").toggle();\n        $(this).html() === $(this).data(\"collapse-caption\") ? $(this).html(\"(...)\") : $(this).html($(this).data(\"collapse-caption\"));\n        $(\".discover .row\").isotope(\"layout\");\n    });\n\n    $(\".update-view\").click(function(e) {\n        var view = $(this).data(\"view\");\n        e.preventDefault();\n        e.stopPropagation();\n        $.ajax({\n            method:\"post\",\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            url: getPath() + \"/ajax/view\",\n            data: \"{\\\"series\\\": {\\\"series_view\\\": \\\"\"+ view +\"\\\"}}\",\n            success: function success() {\n                location.reload();\n            }\n        });\n    });\n});\n\n", "{% extends \"layout.html\" %}\n{% block body %}\n{% if book %}\n  <div class=\"col-sm-3 col-lg-3 col-xs-12\">\n    <div class=\"cover\">\n        <img id=\"detailcover\" title=\"{{book.title}}\" src=\"{{ url_for('web.get_cover', book_id=book.id, edit=1|uuidfilter)  }}\" alt=\"{{ book.title }}\"/>\n    </div>\n{% if g.user.role_delete_books() %}\n    <div class=\"text-center\">\n      <button type=\"button\" class=\"btn btn-danger\" id=\"delete\" data-toggle=\"modal\" data-delete-id=\"{{ book.id }}\" data-target=\"#deleteModal\">{{_(\"Delete Book\")}}</button>\n    </div>\n    {% if book.data|length > 1 %}\n      <div class=\"text-center more-stuff\"><h4>{{_('Delete formats:')}}</h4>\n      {% for file in book.data %}\n        <div class=\"form-group\">\n          <button type=\"button\" class=\"btn btn-danger\" id=\"delete_format\" data-toggle=\"modal\" data-delete-id=\"{{ book.id }}\" data-delete-format=\"{{ file.format }}\" data-target=\"#deleteModal\">{{_('Delete')}} - {{file.format}}</button>\n        </div>\n      {% endfor %}\n      </div>\n    {% endif %}\n{% endif %}\n\n{%  if source_formats|length > 0 and conversion_formats|length > 0 %}\n  <div class=\"text-center more-stuff\"><h4>{{_('Convert book format:')}}</h4>\n      <form class=\"padded-bottom\" action=\"{{ url_for('editbook.convert_bookformat', book_id=book.id) }}\" method=\"post\" id=\"book_convert_frm\">\n          <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n          <div class=\"form-group\">\n              <div class=\"text-left\">\n                  <label class=\"control-label\" for=\"book_format_from\">{{_('Convert from:')}}</label>\n                  <select class=\"form-control\" name=\"book_format_from\" id=\"book_format_from\">\n                    <option disabled selected value>-- {{_('select an option')}} --</option>\n                    {% for format in source_formats %}\n                    <option>{{format|upper}}</option>\n                    {% endfor %}\n                  </select>\n                  <label class=\"control-label\" for=\"book_format_to\">{{_('Convert to:')}}</label>\n                  <select class=\"form-control\" name=\"book_format_to\" id=\"book_format_to\">\n                    <option disabled selected value>-- {{_('select an option')}} --</option>\n                    {% for format in conversion_formats %}\n                    <option>{{format|upper}}</option>\n                    {% endfor %}\n                  </select>\n              </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-primary\" id=\"btn-book-convert\" name=\"btn-book-convert\"><span class=\"glyphicon glyphicon-duplicate\"></span> {{_('Convert book')}}</button>\n      </form>\n  </div>\n{% endif %}\n\n  </div>\n<form role=\"form\" action=\"{{ url_for('editbook.edit_book', book_id=book.id) }}\" method=\"post\" enctype=\"multipart/form-data\" id=\"book_edit_frm\">\n  <div class=\"col-sm-9 col-xs-12\">\n    <div class=\"form-group\">\n      <label for=\"book_title\">{{_('Book Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"book_title\" id=\"book_title\" value=\"{{book.title}}\">\n    </div>\n    <div class=\"text-center\">\n        <button type=\"button\" class=\"btn btn-default\" id=\"xchange\" ><span class=\"glyphicon glyphicon-arrow-up\"></span><span class=\"glyphicon glyphicon-arrow-down\"></span></button>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"bookAuthor\">{{_('Author')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"author_name\" id=\"bookAuthor\" value=\"{{' & '.join(authors)}}\" autocomplete=\"off\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"description\">{{_('Description')}}</label>\n      <textarea class=\"form-control\" name=\"description\" id=\"description\" rows=\"7\">{% if book.comments %}{{book.comments[0].text}}{%endif%}</textarea>\n    </div>\n\n    <div class=\"form-group\">\n      <label>{{_('Identifiers')}}</label>\n      <table class=\"table\" id=\"identifier-table\">\n\t{% for identifier in book.identifiers %}\n\t<tr>\n      <td><input type=\"text\" class=\"form-control\" name=\"identifier-type-{{identifier.type}}\" value=\"{{identifier.type}}\" required=\"required\" placeholder=\"{{_('Identifier Type')}}\"></td>\n\t  <td><input type=\"text\" class=\"form-control\" name=\"identifier-val-{{identifier.type}}\" value=\"{{identifier.val}}\" required=\"required\" placeholder=\"{{_('Identifier Value')}}\"></td>\n\t  <td><a class=\"btn btn-default\" onclick=\"removeIdentifierLine(this)\">{{_('Remove')}}</a></td>\n\t</tr>\n\t{% endfor %}\n      </table>\n      <a id=\"add-identifier-line\" class=\"btn btn-default\">{{_('Add Identifier')}}</a>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"tags\">{{_('Tags')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"tags\" id=\"tags\" value=\"{% for tag in book.tags %}{{tag.name.strip()}}{% if not loop.last %}, {% endif %}{% endfor %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"series\">{{_('Series')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"series\" id=\"series\" value=\"{% if book.series %}{{book.series[0].name}}{% endif %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"series_index\">{{_('Series ID')}}</label>\n      <input type=\"number\" step=\"0.01\" min=\"0\" placeholder=\"1\" class=\"form-control\" name=\"series_index\" id=\"series_index\" value=\"{{book.series_index}}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"rating\">{{_('Rating')}}</label>\n      <input type=\"number\"  name=\"rating\" id=\"rating\" class=\"rating input-lg\" data-clearable=\"\" value=\"{% if book.ratings %}{{(book.ratings[0].rating / 2)|int}}{% endif %}\">\n    </div>\n    {% if g.user.role_upload() or g.user.role_admin()%}\n      {% if g.allow_upload %}\n    <div class=\"form-group\">\n      <label for=\"cover_url\">{{_('Fetch Cover from URL (JPEG - Image will be downloaded and stored in database)')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"cover_url\" id=\"cover_url\" value=\"\">\n    </div>\n      <div class=\"form-group\" aria-label=\"Upload cover from local drive\">\n        <label class=\"btn btn-primary btn-file\" for=\"btn-upload-cover\">{{ _('Upload Cover from Local Disk') }}</label>\n        <div class=\"upload-cover-input-text\" id=\"upload-cover\"></div>\n        <input id=\"btn-upload-cover\" name=\"btn-upload-cover\" type=\"file\" accept=\".jpg, .jpeg, .png, .webp\">\n      </div>\n      {% endif %}\n    {% endif %}\n    <label for=\"pubdate\">{{_('Published Date')}}</label>\n    <div class=\"form-group input-group\">\n       <input type=\"text\" class=\"datepicker form-control\" name=\"pubdate\" id=\"pubdate\" value=\"{% if book.pubdate %}{{book.pubdate|formatdateinput}}{% endif %}\">\n       <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_pubdate\" value=\"{% if book.pubdate %}{{book.pubdate|formatdate}}{% endif %}\">\n      <span class=\"input-group-btn\">\n        <button type=\"button\" id=\"pubdate_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n      </span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"publisher\">{{_('Publisher')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"publisher\" id=\"publisher\" value=\"{% if book.publishers|length > 0 %}{{book.publishers[0].name}}{% endif %}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"languages\">{{_('Language')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"languages\" id=\"languages\" value=\"{% for language in book.languages %}{{language.language_name.strip()}}{% if not loop.last %}, {% endif %}{% endfor %}\">\n    </div>\n      {% if cc|length > 0 %}\n        {% for c in cc %}\n          <div class=\"form-group\">\n            <label for=\"{{ 'custom_column_' ~ c.id }}\">{{ c.name }}</label>\n            {% if c.datatype == 'bool' %}\n              <select name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" class=\"form-control\">\n                <option value=\"None\" {% if book['custom_column_' ~ c.id]|length == 0 %} selected {% endif %}></option>\n                <option value=\"True\"  {% if book['custom_column_' ~ c.id]|length > 0 %}{% if book['custom_column_' ~ c.id][0].value ==true %}selected{% endif %}{% endif %} >{{_('Yes')}}</option>\n                <option value=\"False\"  {% if book['custom_column_' ~ c.id]|length > 0 %}{% if book['custom_column_' ~ c.id][0].value ==false %}selected{% endif %}{% endif %}>{{_('No')}}</option>\n              </select>\n            {% endif %}\n\n            {% if c.datatype == 'int' or c.datatype == 'float' %}\n\t    <input type=\"number\" step=\"{% if c.datatype == 'float' %}0.01{% else %}1{% endif %}\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"{% if book['custom_column_' ~ c.id]|length > 0 %}{{ book['custom_column_' ~ c.id][0].value }}{% endif %}\">\n            {% endif %}\n\n            {% if c.datatype == 'text' %}\n              <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n              {% if book['custom_column_' ~ c.id]|length > 0 %}\n              value=\"{% for column in book['custom_column_' ~ c.id] %}{{ column.value.strip() }}{% if not loop.last %}, {% endif %}{% endfor %}\"{% endif %}>\n            {% endif %}\n\n            {% if c.datatype == 'series' %}\n              <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n              {% if book['custom_column_' ~ c.id]|length > 0 %}\n                value=\"{% for column in book['custom_column_' ~ c.id] %} {{ '%s [%s]' % (book['custom_column_' ~ c.id][0].value, book['custom_column_' ~ c.id][0].extra|formatfloat(2)) }}{% if not loop.last %}, {% endif %}{% endfor %}\"\n              {% endif %}>\n            {% endif %}\n\n            {% if c.datatype == 'datetime' %}\n              <div class=\"input-group\">\n                <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n                  {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{% if book['custom_column_' ~ c.id][0].value  %}{{ book['custom_column_' ~ c.id][0].value|formatdateinput}}{% endif %}\"\n                  {% endif %}>\n                <input type=\"text\" class=\"fake_custom_column_{{ c.id }} form-control fake-input hidden\" id=\"fake_pubdate_{{ c.id }}\"\n                  {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{% if book['custom_column_' ~ c.id][0].value %}{{book['custom_column_' ~ c.id][0].value|formatdate}}{% endif %}\"\n                  {% endif %}>\n                <span class=\"input-group-btn\">\n                  <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n                </span>\n              </div>\n            {% endif %}\n\n            {% if c.datatype == 'comments' %}\n              <textarea class=\"form-control tiny_editor\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" rows=\"7\">{% if book['custom_column_' ~ c.id]|length > 0 %}{{book['custom_column_' ~ c.id][0].value}}{%endif%}</textarea>\n            {% endif %}\n            {% if c.datatype == 'enumeration' %}\n              <select class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n                  <option></option>\n                  {% for opt in c.get_display_dict().enum_values %}\n                    <option\n                      {% if book['custom_column_' ~ c.id]|length > 0 %}\n                        {% if book['custom_column_' ~ c.id][0].value == opt %}selected=\"selected\"{% endif %}\n                      {% endif %}\n                      >{{ opt }}</option>\n                  {% endfor %}\n              </select>\n            {% endif %}\n\n            {% if c.datatype == 'rating' %}\n              <input type=\"number\" min=\"1\" max=\"5\" step=\"0.5\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\"\n                {% if book['custom_column_' ~ c.id]|length > 0 %}\n                    value=\"{{ '%.1f' %  (book['custom_column_' ~ c.id][0].value / 2) }}\"\n                {% endif %}>\n            {% endif %}\n          </div>\n        {% endfor %}\n      {% endif %}\n      {% if g.user.role_upload() or g.user.role_admin()%}\n        {% if g.allow_upload %}\n          <div role=\"group\" aria-label=\"Upload new book format\">\n            <label class=\"btn btn-primary btn-file\" for=\"btn-upload-format\">{{ _('Upload Format') }}</label>\n            <div class=\"upload-format-input-text\" id=\"upload-format\"></div>\n            <input id=\"btn-upload-format\" name=\"btn-upload-format\" type=\"file\">\n          </div>\n        {% endif %}\n      {% endif %}\n\n    <div class=\"checkbox\">\n      <label>\n        <input name=\"detail_view\" type=\"checkbox\" checked> {{_('View Book on Save')}}\n      </label>\n    </div>\n    <a href=\"#\" id=\"get_meta\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#metaModal\">{{_('Fetch Metadata')}}</a>\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('web.show_book', book_id=book.id) }}\" id=\"edit_cancel\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n  </div>\n</form>\n\n{% endif %}\n{% endblock %}\n\n{% block modal %}\n{{ delete_book() }}\n{{ delete_confirm_modal() }}\n\n<div class=\"modal fade\" id=\"metaModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"metaModalLabel\">\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" id=\"metaModalLabel\">{{_('Fetch Metadata')}}</h4>\n        <form class=\"padded-bottom\" id=\"meta-search\">\n          <div class=\"input-group\">\n            <label class=\"sr-only\" for=\"keyword\">{{_('Keyword')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"keyword\" name=\"keyword\" placeholder=\"{{_(\"Search keyword\")}}\">\n            <span class=\"input-group-btn\">\n              <button type=\"submit\" class=\"btn btn-primary\" id=\"do-search\">{{_(\"Search\")}}</button>\n            </span>\n          </div>\n        </form>\n        <div class=\"text-center\"><strong>{{_('Click the cover to load metadata to the form')}}</strong></div>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"text-center padded-bottom\" id=\"metadata_provider\">\n        </div>\n\n        <div id=\"meta-info\">\n          {{_(\"Loading...\")}}\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endblock %}\n\n{% block js %}\n<script type=\"text/template\" id=\"template-book-result\">\n  <li class=\"media\" data-related=\"<%= source.id %>\">\n    <img class=\"pull-left img-responsive\"\n         data-toggle=\"modal\"\n         data-target=\"#metaModal\"\n         src=\"<%= cover || \"{{ url_for('static', filename='img/academicpaper.svg') }}\" %>\"\n         alt=\"Cover\"\n    >\n    <div class=\"media-body\">\n      <h4 class=\"media-heading\">\n        <a href=\"<%= url %>\" target=\"_blank\" rel=\"noopener\"><%= title %></a>\n      </h4>\n      <p>{{_('Author')}}\uff1a<%= authors.join(\" & \") %></p>\n      <% if (publisher) { %>\n        <p>{{_('Publisher')}}\uff1a<%= publisher %></p>\n      <% } %>\n      <% if (description) { %>\n        <p>{{_('Description')}}: <%= description %></p>\n      <% } %>\n      <p>{{_('Source')}}:\n        <a href=\"<%= source.url %>\" target=\"_blank\" rel=\"noopener\"><%= source.description %></a>\n      </p>\n    </div>\n  </li>\n</script>\n<script>\n  var i18nMsg = {\n    'loading': {{_('Loading...')|safe|tojson}},\n    'search_error': {{_('Search error!')|safe|tojson}},\n    'no_result': {{_('No Result(s) found! Please try another keyword.')|safe|tojson}},\n    'author': {{_('Author')|safe|tojson}},\n    'publisher': {{_('Publisher')|safe|tojson}},\n    'description': {{_('Description')|safe|tojson}},\n    'source': {{_('Source')|safe|tojson}},\n  };\n  var language = '{{ g.user.locale }}';\n\n  $(\"#add-identifier-line\").click(function() {\n    // create a random identifier type to have a valid name in form. This will not be used when dealing with the form\n    var rand_id = Math.floor(Math.random() * 1000000).toString();\n    var line = '<tr>';\n    line += '<td><input type=\"text\" class=\"form-control\" name=\"identifier-type-'+ rand_id +'\" required=\"required\" placeholder={{_('Identifier Type')|safe|tojson}}></td>';\n    line += '<td><input type=\"text\" class=\"form-control\" name=\"identifier-val-'+ rand_id +'\" required=\"required\" placeholder={{_('Identifier Value')|safe|tojson}}></td>';\n    line += '<td><a class=\"btn btn-default\" onclick=\"removeIdentifierLine(this)\">{{_('Remove')}}</a></td>';\n    line += '</tr>';\n    $(\"#identifier-table\").append(line);\n  });\n  function removeIdentifierLine(el) {\n    $(el).parent().parent().remove();\n  }\n\n</script>\n<script src=\"{{ url_for('static', filename='js/libs/typeahead.bundle.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-rating-input.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/get_meta.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/tinymce/tinymce.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/bootstrap-datepicker.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/locales/bootstrap-datepicker.' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/edit_books.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/fullscreen.js') }}\"></script>\n{% endblock %}\n{% block header %}\n<meta name=\"referrer\" content=\"never\">\n<link href=\"{{ url_for('static', filename='css/libs/typeahead.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-datepicker3.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% macro text_table_row(parameter, edit_text, show_text, validate, sort) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    {% if sort %}data-sortable=\"true\" {% endif %}\n    data-visible = \"{{visiblility.get(parameter)}}\"\n    data-escape=\"true\"\n    {% if g.user.role_edit() %}\n        data-editable-type=\"text\"\n        data-editable-url=\"{{ url_for('editbook.edit_list_book', param=parameter)}}\"\n        data-editable-title=\"{{ edit_text }}\"\n        data-edit=\"true\"\n        {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\" {% endif %}\n    {% endif %}\n>{{ show_text }}</th>\n{%- endmacro %}\n\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<h2 class=\"{{page}}\">{{_(title)}}</h2>\n      <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n      <div class=\"col-xs-12 col-sm-6\">\n        <div class=\"row form-group\">\n          <div class=\"btn btn-default disabled\" id=\"merge_books\" aria-disabled=\"true\">{{_('Merge selected books')}}</div>\n          <div class=\"btn btn-default disabled\" id=\"delete_selection\" aria-disabled=\"true\">{{_('Remove Selections')}}</div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"btn btn-default disabled\" id=\"table_xchange\" ><span class=\"glyphicon glyphicon-arrow-up\"></span><span class=\"glyphicon glyphicon-arrow-down\"></span>{{_('Exchange author and title')}}</div>\n        </div>\n      </div>\n     <div class=\"filterheader col-xs-12 col-sm-6\">\n      <div class=\"row form-group\">\n        <input type=\"checkbox\" id=\"autoupdate_titlesort\" name=\"autoupdate_titlesort\" checked>\n        <label for=\"autoupdate_titlesort\">{{_('Update Title Sort automatically')}}</label>\n      </div>\n      <div class=\"row form-group\">\n        <input type=\"checkbox\" id=\"autoupdate_authorsort\" name=\"autoupdate_authorsort\" checked>\n        <label for=\"autoupdate_authorsort\">{{_('Update Author Sort automatically')}}</label>\n      </div>\n    </div>\n\n    <table id=\"books-table\" class=\"table table-no-bordered table-striped\"\n           data-url=\"{{url_for('web.list_books')}}\">\n      <thead>\n        <tr>\n          {% if g.user.role_edit() %}\n            <th data-field=\"state\" data-checkbox=\"true\" data-sortable=\"true\"></th>\n          {% endif %}\n            <th data-field=\"id\" id=\"id\" data-visible=\"false\" data-switchable=\"false\"></th>\n            {{ text_table_row('title', _('Enter Title'),_('Title'), true, true) }}\n            {{ text_table_row('sort', _('Enter Title Sort'),_('Title Sort'), false, true) }}\n            {{ text_table_row('author_sort', _('Enter Author Sort'),_('Author Sort'), false, true) }}\n            {{ text_table_row('authors', _('Enter Authors'),_('Authors'), true, true) }}\n            {{ text_table_row('tags', _('Enter Categories'),_('Categories'), false, true) }}\n            {{ text_table_row('series', _('Enter Series'),_('Series'), false, true) }}\n            <th data-field=\"series_index\" id=\"series_index\" data-visible=\"{{visiblility.get('series_index')}}\" data-edit-validate=\"{{ _('This Field is Required') }}\" data-sortable=\"true\" {% if g.user.role_edit() %} data-editable-type=\"number\" data-editable-placeholder=\"1\" data-editable-step=\"0.01\" data-editable-min=\"0\" data-editable-url=\"{{ url_for('editbook.edit_list_book', param='series_index')}}\" data-edit=\"true\" data-editable-title=\"{{_('Enter Title')}}\"{% endif %}>{{_('Series Index')}}</th>\n            {{ text_table_row('languages', _('Enter Languages'),_('Languages'), false, true) }}\n            <!--th data-field=\"pubdate\" data-type=\"date\" data-visible=\"{{visiblility.get('pubdate')}}\" data-viewformat=\"dd.mm.yyyy\" id=\"pubdate\" data-sortable=\"true\">{{_('Publishing Date')}}</th-->\n            {{ text_table_row('publishers', _('Enter Publishers'),_('Publishers'), false, true) }}\n          {% if g.user.role_delete_books() and g.user.role_edit()%}\n            <th data-align=\"right\" data-formatter=\"EbookActions\" data-switchable=\"false\">{{_('Delete')}}</th>\n          {% endif %}\n        </tr>\n      </thead>\n    </table>\n{% endblock %}\n{% block modal %}\n{{ delete_book() }}\n{% if g.user.role_edit() %}\n<div class=\"modal fade\" id=\"mergeModal\" role=\"dialog\" aria-labelledby=\"metaMergeLabel\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header bg-danger text-center\">\n          <span>{{_('Are you really sure?')}}</span>\n      </div>\n        <div class=\"modal-body\">\n          <p></p>\n            <div class=\"text-left\">{{_('Books with Title will be merged from:')}}</div>\n          <p></p>\n            <div class=\"text-left\" id=\"merge_from\"></div>\n          <p></p>\n            <div class=\"text-left\">{{_('Into Book with Title:')}}</div>\n          <p></p>\n            <div class=\"text-left\" id=\"merge_to\"></div>\n        </div>\n      <div class=\"modal-footer\">\n        <input type=\"button\" class=\"btn btn-danger\" value=\"{{_('Merge')}}\" name=\"merge_confirm\" id=\"merge_confirm\" data-dismiss=\"modal\">\n        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Cancel')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endif %}\n\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/locale/bootstrap-table-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block flash %}\n<div id=\"spinning_success\" class=\"row-fluid text-center\" style=\"display:none;\">\n    <div class=\"alert alert-info\"><img id=\"img-spinner\" src=\"{{ url_for('static', filename='css/libs/images/loading-icon.gif') }}\"/></div>\n</div>\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n  <form role=\"form\" method=\"POST\" class=\"col-md-10 col-lg-6\" action=\"{{ url_for('admin.db_configuration') }}\" autocomplete=\"off\">\n       <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n       <label for=\"config_calibre_dir\">{{_('Location of Calibre Database')}}</label>\n       <div class=\"form-group required input-group\">\n        <input type=\"text\" class=\"form-control\" id=\"config_calibre_dir\" name=\"config_calibre_dir\" value=\"{% if config.config_calibre_dir != None %}{{ config.config_calibre_dir }}{% endif %}\" autocomplete=\"off\">\n        <span class=\"input-group-btn\">\n          <button type=\"button\" data-toggle=\"modal\" id=\"calibre_modal_path\" data-link=\"config_calibre_dir\" data-filefilter=\"metadata.db\" data-target=\"#fileModal\" id=\"library_path\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n        </span>\n      </div>\n    {% if feature_support['gdrive'] %}\n      <div class=\"form-group required\">\n        <input type=\"checkbox\" id=\"config_use_google_drive\" name=\"config_use_google_drive\" data-control=\"gdrive_settings\" {% if config.config_use_google_drive %}checked{% endif %} >\n        <label for=\"config_use_google_drive\">{{_('Use Google Drive?')}}</label>\n      </div>\n      {% if not gdriveError and config.config_use_google_drive %}\n        {% if show_authenticate_google_drive and config.config_use_google_drive %}\n          <div class=\"form-group required\">\n            <a href=\"{{ url_for('gdrive.authenticate_google_drive') }}\" id=\"gdrive_auth\" class=\"btn btn-primary\">{{_('Authenticate Google Drive')}}</a>\n          </div>\n        {% else %}\n            {% if not show_authenticate_google_drive %}\n            <div class=\"form-group required\">\n              <label for=\"config_google_drive_folder\">{{_('Google Drive Calibre folder')}}</label>\n              <select name=\"config_google_drive_folder\" id=\"config_google_drive_folder\" class=\"form-control\">\n                {%  for gdrivefolder in gdrivefolders %}\n                <option value=\"{{ gdrivefolder.title }}\" {% if gdrivefolder.title == config.config_google_drive_folder %}selected{% endif %}>{{ gdrivefolder.title }}</option>\n                {% endfor %}\n              </select>\n            </div>\n            {% if config.config_google_drive_watch_changes_response %}\n              <label for=\"config_google_drive_watch_changes_response\">{{_('Metadata Watch Channel ID')}}</label>\n              <div class=\"form-group input-group required\">\n                <input type=\"text\" class=\"form-control\" name=\"config_google_drive_watch_changes_response\" id=\"config_google_drive_watch_changes_response\" value=\"{{ config.config_google_drive_watch_changes_response['id'] }} expires on {{ config.config_google_drive_watch_changes_response['expiration'] |  strftime }}\" autocomplete=\"off\" disabled=\"\">\n                <span class=\"input-group-btn\"><a href=\"{{ url_for('gdrive.revoke_watch_gdrive') }}\" id=\"watch_revoke\" class=\"btn btn-primary\">{{_('Revoke')}}</a></span>\n              </div>\n            {% else %}\n              <a href=\"{{ url_for('gdrive.watch_gdrive') }}\" id=\"enable_gdrive_watch\" class=\"btn btn-primary\">Enable watch of metadata.db</a>\n            {% endif %}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n    {% endif %}\n    <div class=\"col-sm-12\">\n      <div id=\"db_submit\" name=\"submit\" class=\"btn btn-default\">{{_('Save')}}</div>\n      <a href=\"{{ url_for('admin.admin') }}\" id=\"config_back\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ filechooser_modal() }}\n{{ change_confirm_modal() }}\n<div id=\"InvalidDialog\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog modal-sm\">\n    <!-- Modal content-->\n    <div class=\"modal-content\">\n      <div class=\"modal-header bg-info\"></div>\n      <div class=\"modal-body text-center\">\n        <p>{{_('New db location is invalid, please enter valid path')}}</p>\n          <p></p>\n        <button type=\"button\" class=\"btn btn-default\" id=\"invalid_confirm\" data-dismiss=\"modal\">{{_('OK')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block flash %}\n<div id=\"spinning_success\" class=\"row-fluid text-center\" style=\"display:none;\">\n    <div class=\"alert alert-info\"><img id=\"img-spinner\" src=\"{{ url_for('static', filename='css/libs/images/loading-icon.gif') }}\"/></div>\n</div>\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n<form role=\"form\" method=\"POST\" autocomplete=\"off\">\n<input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n<div class=\"panel-group col-md-10 col-lg-8\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapseone\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Server Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapseone\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n          <label for=\"config_port\">{{_('Server Port')}}</label>\n          <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" name=\"config_port\" id=\"config_port\" value=\"{% if config.config_port != None %}{{ config.config_port }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <label for=\"config_certfile\">{{_('SSL certfile location (leave it empty for non-SSL Servers)')}}</label>\n         <div class=\"form-group input-group\">\n          <input type=\"text\" class=\"form-control\" id=\"config_certfile\" name=\"config_certfile\" value=\"{% if config.config_certfile != None %}{{ config.config_certfile }}{% endif %}\" autocomplete=\"off\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" data-toggle=\"modal\" data-link=\"config_certfile\" data-target=\"#fileModal\" id=\"certfile_path\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n          </span>\n        </div>\n          <label for=\"config_keyfile\" >{{_('SSL Keyfile location (leave it empty for non-SSL Servers)')}}</label>\n         <div class=\"form-group input-group\">\n          <input type=\"text\" class=\"form-control\" id=\"config_keyfile\" name=\"config_keyfile\" value=\"{% if config.config_keyfile != None %}{{ config.config_keyfile }}{% endif %}\" autocomplete=\"off\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"keyfile_path\" data-toggle=\"modal\" data-link=\"config_keyfile\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n          </span>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_updatechannel\">{{_('Update Channel')}}</label>\n            <select name=\"config_updatechannel\" id=\"config_updatechannel\" class=\"form-control\">\n              <option value=\"0\" {% if config.config_updatechannel == 0 %}selected{% endif %}>{{_('Stable')}}</option>\n              <option value=\"2\" {% if config.config_updatechannel == 2 %}selected{% endif %}>{{_('Nightly')}}</option>\n            </select>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsetwo\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Logfile Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsetwo\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n        <label for=\"config_log_level\">{{_('Log Level')}}</label>\n            <select name=\"config_log_level\" id=\"config_log_level\" class=\"form-control\">\n                    <option value=\"10\" {% if config.config_log_level == 10 %}selected{% endif %}>DEBUG</option>\n                    <option value=\"20\" {% if config.config_log_level == 20 or config.config_log_level == None %}selected{% endif %}>INFO</option>\n                    <option value=\"30\" {% if config.config_log_level == 30 %}selected{% endif %}>WARNING</option>\n                    <option value=\"40\" {% if config.config_log_level == 40 %}selected{% endif %}>ERROR</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_logfile\">{{_('Location and name of logfile (calibre-web.log for no entry)')}}</label>\n           <input type=\"text\" class=\"form-control\" name=\"config_logfile\" id=\"config_logfile\" value=\"{% if config.config_logfile != None %}{{ config.config_logfile }}{% endif %}\" autocomplete=\"off\">\n        </div>\n      <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"config_access_log\" name=\"config_access_log\" {% if config.config_access_log %}checked{% endif %}>\n          <label for=\"config_access_log\">{{_('Enable Access Log')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_access_logfile\">{{_('Location and name of access logfile (access.log for no entry)')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_access_logfile\" id=\"config_access_logfile\" value=\"{% if config.config_access_logfile != None %}{{ config.config_access_logfile }}{% endif %}\" autocomplete=\"off\">\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefour\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Feature Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefour\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_unicode_filename\" name=\"config_unicode_filename\" {% if config.config_unicode_filename %}checked{% endif %}>\n      <label for=\"config_unicode_filename\">{{_('Convert non-English characters in title and author while saving to disk')}}</label>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_uploading\" data-control=\"upload_settings\" name=\"config_uploading\" {% if config.config_uploading %}checked{% endif %}>\n        <label for=\"config_uploading\">{{_('Enable Uploads')}}</label>\n    </div>\n    <div data-related=\"upload_settings\">\n      <div class=\"form-group\">\n        <label for=\"config_upload_formats\">{{_('Allowed Upload Fileformats')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"config_upload_formats\" id=\"config_upload_formats\" value=\"{% if config.config_upload_formats != None %}{{ config.config_upload_formats }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_anonbrowse\" name=\"config_anonbrowse\" {% if config.config_anonbrowse %}checked{% endif %}>\n        <label for=\"config_anonbrowse\">{{_('Enable Anonymous Browsing')}}</label>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"checkbox\" id=\"config_public_reg\" data-control=\"register_settings\" name=\"config_public_reg\" {% if config.config_public_reg %}checked{% endif %}>\n        <label for=\"config_public_reg\">{{_('Enable Public Registration')}}</label>\n    </div>\n    <div data-related=\"register_settings\">\n      <div class=\"form-group intend-form\">\n        <input type=\"checkbox\" id=\"config_register_email\" name=\"config_register_email\" {% if config.config_register_email %}checked{% endif %}>\n        <label for=\"config_register_email\">{{_('Use E-Mail as Username')}}</label>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_remote_login\" name=\"config_remote_login\" {% if config.config_remote_login %}checked{% endif %}>\n      <label for=\"config_remote_login\">{{_('Enable Magic Link Remote Login')}}</label>\n    </div>\n    {% if feature_support['kobo'] %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_kobo_sync\" name=\"config_kobo_sync\" data-control=\"kobo-settings\" {% if config.config_kobo_sync %}checked{% endif %}>\n      <label for=\"config_kobo_sync\">{{_('Enable Kobo sync')}}</label>\n    </div>\n    <div data-related=\"kobo-settings\">\n      <div class=\"form-group\" style=\"margin-left:10px;\">\n        <input type=\"checkbox\" id=\"config_kobo_proxy\" name=\"config_kobo_proxy\"  {% if config.config_kobo_proxy %}checked{% endif %}>\n        <label for=\"config_kobo_proxy\">{{_('Proxy unknown requests to Kobo Store')}}</label>\n      </div>\n      <div class=\"form-group\" style=\"margin-left:10px;\">\n        <label for=\"config_external_port\">{{_('Server External Port (for port forwarded API calls)')}}</label>\n        <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" name=\"config_external_port\" id=\"config_external_port\" value=\"{% if config.config_external_port != None %}{{ config.config_external_port }}{% endif %}\" autocomplete=\"off\" required>\n      </div>\n    </div>\n    {% endif %}\n    {% if feature_support['goodreads'] %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_use_goodreads\" name=\"config_use_goodreads\" data-control=\"goodreads-settings\" {% if config.config_use_goodreads %}checked{% endif %}>\n      <label for=\"config_use_goodreads\">{{_('Use Goodreads')}}</label>\n      <a href=\"https://www.goodreads.com/api/keys\" target=\"_blank\" style=\"margin-left: 5px\">{{_('Create an API Key')}}</a>\n    </div>\n    <div data-related=\"goodreads-settings\">\n      <div class=\"form-group\">\n        <label for=\"config_goodreads_api_key\">{{_('Goodreads API Key')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_goodreads_api_key\" name=\"config_goodreads_api_key\" value=\"{% if config.config_goodreads_api_key != None %}{{ config.config_goodreads_api_key }}{% endif %}\" autocomplete=\"off\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"config_goodreads_api_secret\">{{_('Goodreads API Secret')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_goodreads_api_secret\" name=\"config_goodreads_api_secret\" value=\"{% if config.config_goodreads_api_secret != None %}{{ config.config_goodreads_api_secret }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" id=\"config_allow_reverse_proxy_header_login\" name=\"config_allow_reverse_proxy_header_login\" data-control=\"reverse-proxy-login-settings\" {% if config.config_allow_reverse_proxy_header_login %}checked{% endif %}>\n      <label for=\"config_allow_reverse_proxy_header_login\">{{_('Allow Reverse Proxy Authentication')}}</label>\n    </div>\n    <div data-related=\"reverse-proxy-login-settings\">\n      <div class=\"form-group\">\n        <label for=\"config_reverse_proxy_login_header_name\">{{_('Reverse Proxy Header Name')}}</label>\n        <input type=\"text\" class=\"form-control\" id=\"config_reverse_proxy_login_header_name\" name=\"config_reverse_proxy_login_header_name\" value=\"{% if config.config_reverse_proxy_login_header_name != None %}{{ config.config_reverse_proxy_login_header_name }}{% endif %}\" autocomplete=\"off\">\n      </div>\n    </div>\n    {% if not config.config_is_initial %}\n    {% if feature_support['ldap'] or feature_support['oauth'] %}\n      <div class=\"form-group\">\n        <label for=\"config_login_type\">{{_('Login type')}}</label>\n        <select name=\"config_login_type\" id=\"config_login_type\" class=\"form-control\" data-control=\"login-settings\">\n           <option value=\"0\" {% if config.config_login_type == 0 %}selected{% endif %}>{{_('Use Standard Authentication')}}</option>\n           {% if feature_support['ldap'] %}\n           <option value=\"1\" {% if config.config_login_type == 1 %}selected{% endif %}>{{_('Use LDAP Authentication')}}</option>\n           {% endif %}\n           {% if feature_support['oauth'] %}\n           <option value=\"2\" {% if config.config_login_type == 2 %}selected{% endif %}>{{_('Use OAuth')}}</option>\n           {% endif %}\n        </select>\n      </div>\n    {% if feature_support['ldap'] %}\n      <div data-related=\"login-settings-1\">\n        <div class=\"form-group\">\n          <label for=\"config_ldap_provider_url\">{{_('LDAP Server Host Name or IP Address')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_provider_url\" name=\"config_ldap_provider_url\" value=\"{% if config.config_ldap_provider_url != None %}{{ config.config_ldap_provider_url }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_port\">{{_('LDAP Server Port')}}</label>\n          <input type=\"number\" min=\"1\" max=\"65535\" class=\"form-control\" id=\"config_ldap_port\" name=\"config_ldap_port\" value=\"{% if config.config_ldap_port != None %}{{ config.config_ldap_port }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_encryption\">{{_('LDAP Encryption')}}</label>\n            <select name=\"config_ldap_encryption\" id=\"config_ldap_encryption\" class=\"form-control\" data-controlall=\"ldap-cert-settings\">\n                <option value=\"0\" {% if config.config_ldap_encryption == 0 %}selected{% endif %}>{{ _('None') }}</option>\n                <option value=\"1\" {% if config.config_ldap_encryption == 1 %}selected{% endif %}>{{ _('TLS') }}</option>\n                <option value=\"2\" {% if config.config_ldap_encryption == 2 %}selected{% endif %}>{{ _('SSL') }}</option>\n            </select>\n        </div>\n        <div data-related=\"ldap-cert-settings\">\n          <label for=\"config_ldap_cacert_path\" >{{_('LDAP CACertificate Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_cacert_path\" name=\"config_ldap_cacert_path\" value=\"{% if config.config_ldap_cacert_path != None %}{{ config.config_ldap_cacert_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_cacert_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n          <label for=\"config_ldap_cert_path\">{{_('LDAP Certificate Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_cert_path\" name=\"config_ldap_cert_path\" value=\"{% if config.config_ldap_cert_path != None %}{{ config.config_ldap_cert_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_cert_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n          <label for=\"config_ldap_key_path\">{{_('LDAP Keyfile Path (Only needed for Client Certificate Authentication)')}}</label>\n          <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_key_path\" name=\"config_ldap_key_path\" value=\"{% if config.config_ldap_key_path != None %}{{ config.config_ldap_key_path }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"library_path\" data-toggle=\"modal\" data-link=\"config_ldap_key_path\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_authentication\">{{_('LDAP Authentication')}}</label>\n            <select name=\"config_ldap_authentication\" id=\"config_ldap_authentication\" class=\"form-control\" data-control=\"ldap-auth-password\" data-controlall=\"ldap-auth-settings\">\n                <option value=\"0\" {% if config.config_ldap_authentication == 0 %}selected{% endif %}>{{ _('Anonymous') }}</option>\n                <option value=\"1\" {% if config.config_ldap_authentication == 1 %}selected{% endif %}>{{ _('Unauthenticated') }}</option>\n                <option value=\"2\" {% if config.config_ldap_authentication == 2 %}selected{% endif %}>{{ _('Simple') }}</option>\n            </select>\n        </div>\n        <div data-related=\"ldap-auth-settings\">\n          <div class=\"form-group\">\n            <label for=\"config_ldap_serv_username\">{{_('LDAP Administrator Username')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_serv_username\" name=\"config_ldap_serv_username\" value=\"{% if config.config_ldap_serv_username != None %}{{ config.config_ldap_serv_username }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        </div>\n        <div data-related=\"ldap-auth-password-2\">\n          <div class=\"form-group\">\n            <label for=\"config_ldap_serv_password\">{{_('LDAP Administrator Password')}}</label>\n            <input type=\"password\" class=\"form-control\" id=\"config_ldap_serv_password\" name=\"config_ldap_serv_password\" value=\"\" autocomplete=\"off\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_dn\">{{_('LDAP Distinguished Name (DN)')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_dn\" name=\"config_ldap_dn\" value=\"{% if config.config_ldap_dn != None %}{{ config.config_ldap_dn }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_ldap_user_object\">{{_('LDAP User Object Filter')}}</label>\n          <input type=\"text\" class=\"form-control\" id=\"config_ldap_user_object\" name=\"config_ldap_user_object\" value=\"{% if config.config_ldap_user_object != None %}{{ config.config_ldap_user_object }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" id=\"config_ldap_openldap\" name=\"config_ldap_openldap\" {% if config.config_ldap_openldap %}checked{% endif %}>\n          <label for=\"config_ldap_openldap\">{{_('LDAP Server is OpenLDAP?')}}</label>\n        </div>\n          <h4 class=\"text-center\">{{_('Following Settings are Needed For User Import')}}</h4>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_object_filter\">{{_('LDAP Group Object Filter')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_object_filter\" name=\"config_ldap_group_object_filter\" value=\"{% if config.config_ldap_group_object_filter != None %}{{ config.config_ldap_group_object_filter }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_name\">{{_('LDAP Group Name')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_name\" name=\"config_ldap_group_name\" value=\"{% if config.config_ldap_group_name != None %}{{ config.config_ldap_group_name }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_ldap_group_members_field\">{{_('LDAP Group Members Field')}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_ldap_group_members_field\" name=\"config_ldap_group_members_field\" value=\"{% if config.config_ldap_group_members_field != None %}{{ config.config_ldap_group_members_field }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"ldap_import_user_filter\">{{_('LDAP Member User Filter Detection')}}</label>\n              <select name=\"ldap_import_user_filter\" id=\"ldap_import_user_filter\" class=\"form-control\" data-control=\"ldap_member_user_object\">\n                  <option value=\"0\" {% if config.config_ldap_member_user_object == \"\" %}selected{% endif %}>{{ _('Autodetect') }}</option>\n                  <option value=\"1\" {% if config.config_ldap_member_user_object %}selected{% endif %}>{{ _('Custom Filter') }}</option>\n              </select>\n          </div>\n        <div data-related=\"ldap_member_user_object-1\">\n          <div class=\"form-group\">\n              <label for=\"config_ldap_member_user_object\">{{_('LDAP Member User Filter')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"config_ldap_member_user_object\" name=\"config_ldap_member_user_object\" value=\"{% if config.config_ldap_member_user_object != None %}{{ config.config_ldap_member_user_object }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        </div>\n\n      </div>\n      {% endif %}\n      {% if feature_support['oauth'] %}\n        <div data-related=\"login-settings-2\">\n          {% for prov in provider %}\n          <div class=\"form-group\">\n            <a href=\"{{prov['obtain_link']}}\" target=\"_blank\">{{_('Obtain %(provider)s OAuth Credential', provider=prov['provider_name'])}}</a>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_{{ prov['id'] }}_oauth_client_id\">{{_('%(provider)s OAuth Client Id', provider=prov['provider_name'])}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_{{ prov['id'] }}_oauth_client_id\" name=\"config_{{ prov['id'] }}_oauth_client_id\" value=\"{% if prov['oauth_client_id']%}{{ prov['oauth_client_id'] }}{% endif %}\" autocomplete=\"off\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"config_{{ prov['id'] }}_oauth_client_secret\">{{_('%(provider)s OAuth Client Secret', provider=prov['provider_name'])}}</label>\n            <input type=\"text\" class=\"form-control\" id=\"config_{{ prov['id'] }}_oauth_client_secret\" name=\"config_{{ prov['id'] }}_oauth_client_secret\" value=\"{% if prov['oauth_client_secret']%}{{ prov['oauth_client_secret'] }}{% endif %}\" autocomplete=\"off\">\n          </div>\n        {% endfor %}\n        </div>\n      {% endif %}\n      {% endif %}\n    {% endif %}\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefive\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n           {{_('External binaries')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefive\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n           <label for=\"config_converterpath\">{{_('Path to Calibre E-Book Converter')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_converterpath\" name=\"config_converterpath\" value=\"{% if config.config_converterpath != None %}{{ config.config_converterpath }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" data-toggle=\"modal\" id=\"converter_modal_path\" data-link=\"config_converterpath\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n           </div>\n           <div class=\"form-group\">\n              <label for=\"config_calibre\">{{_('Calibre E-Book Converter Settings')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"config_calibre\" name=\"config_calibre\" value=\"{% if config.config_calibre != None %}{{ config.config_calibre }}{% endif %}\" autocomplete=\"off\">\n           </div>\n        <label for=\"config_kepubifypath\">{{_('Path to Kepubify E-Book Converter')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_kepubifypath\" name=\"config_kepubifypath\" value=\"{% if config.config_kepubifypath != None %}{{ config.config_kepubifypath }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"kepubify_path\" data-toggle=\"modal\" data-link=\"config_kepubifypath\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        {% if feature_support['rar'] %}\n            <label for=\"config_rarfile_location\">{{_('Location of Unrar binary')}}</label>\n           <div class=\"form-group input-group\">\n            <input type=\"text\" class=\"form-control\" id=\"config_rarfile_location\" name=\"config_rarfile_location\" value=\"{% if config.config_rarfile_location != None %}{{ config.config_rarfile_location }}{% endif %}\" autocomplete=\"off\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"unrar_path\" data-toggle=\"modal\" data-link=\"config_rarfile_location\" data-target=\"#fileModal\" class=\"btn btn-default\"><span class=\"glyphicon glyphicon-folder-open\"></span></button>\n            </span>\n          </div>\n        {% endif %}\n      </div>\n    </div>\n  </div>\n</div>\n    <div class=\"col-sm-12\">\n    <button type=\"button\" name=\"submit\" id=\"config_submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('admin.admin') }}\" id=\"config_back\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ filechooser_modal() }}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h2>{{title}}</h2>\n<form role=\"form\" method=\"POST\" autocomplete=\"off\" >\n<input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n<div class=\"panel-group\" class=\"col-md-10 col-lg-6\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsefour\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('View Configuration')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsefour\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n                <div class=\"form-group\">\n          <label for=\"config_calibre_web_title\">{{_('Title')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_calibre_web_title\" id=\"config_calibre_web_title\" value=\"{% if conf.config_calibre_web_title != None %}{{ conf.config_calibre_web_title }}{% endif %}\" autocomplete=\"off\" required>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_books_per_page\">{{_('Books per Page')}}</label>\n          <input type=\"number\" min=\"1\" max=\"200\" class=\"form-control\" name=\"config_books_per_page\" id=\"config_books_per_page\" value=\"{% if conf.config_books_per_page != None %}{{ conf.config_books_per_page }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_random_books\">{{_('No. of Random Books to Display')}}</label>\n          <input type=\"number\" min=\"1\" max=\"30\" class=\"form-control\" name=\"config_random_books\" id=\"config_random_books\" value=\"{% if conf.config_random_books != None %}{{ conf.config_random_books }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_authors_max\">{{_('No. of Authors to Display Before Hiding (0=Disable Hiding)')}}</label>\n          <input type=\"number\" min=\"0\" max=\"999\" class=\"form-control\" name=\"config_authors_max\" id=\"config_authors_max\" value=\"{% if conf.config_authors_max != None %}{{ conf.config_authors_max }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"config_theme\">{{_('Theme')}}</label>\n            <select name=\"config_theme\" id=\"config_theme\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_theme == 0 %}selected{% endif %}>{{ _(\"Standard Theme\") }}</option>\n                <option value=\"1\" {% if conf.config_theme == 1 %}selected{% endif %}>{{ _(\"caliBlur! Dark Theme\") }}</option>\n            </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_columns_to_ignore\">{{_('Regular Expression for Ignoring Columns')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_columns_to_ignore\" id=\"config_columns_to_ignore\" value=\"{% if conf.config_columns_to_ignore != None %}{{ conf.config_columns_to_ignore }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_read_column\">{{_('Link Read/Unread Status to Calibre Column')}}</label>\n              <select name=\"config_read_column\" id=\"config_read_column\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_read_column == 0 %}selected{% endif %}></option>\n                {%  for readColumn in readColumns %}\n                <option value=\"{{ readColumn.id }}\" {% if readColumn.id == conf.config_read_column %}selected{% endif %}>{{ readColumn.name }}</option>\n                {% endfor %}\n              </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_restricted_column\">{{_('View Restrictions based on Calibre column')}}</label>\n              <select name=\"config_restricted_column\" id=\"config_restricted_column\" class=\"form-control\">\n                <option value=\"0\" {% if conf.config_restricted_column == 0 %}selected{% endif %}>{{ _('None') }}</option>\n                {%  for restrictColumn in restrictColumns %}\n                <option value=\"{{ restrictColumn.id }}\" {% if restrictColumn.id == conf.config_restricted_column %}selected{% endif %}>{{ restrictColumn.name }}</option>\n                {% endfor %}\n              </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"config_title_regex\">{{_('Regular Expression for Title Sorting')}}</label>\n          <input type=\"text\" class=\"form-control\" name=\"config_title_regex\" id=\"config_title_regex\" value=\"{% if conf.config_title_regex != None %}{{ conf.config_title_regex }}{% endif %}\" autocomplete=\"off\">\n        </div>\n        </div>\n      </div>\n    </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapsesix\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Default Settings for New Users')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapsesix\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"admin_role\" id=\"admin_role\" {% if conf.role_admin() %}checked{% endif %}>\n          <label for=\"admin_role\">{{_('Admin User')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"download_role\" id=\"download_role\" {% if conf.role_download() %}checked{% endif %}>\n          <label for=\"download_role\">{{_('Allow Downloads')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"viewer_role\" id=\"viewer_role\" {% if conf.role_viewer() %}checked{% endif %}>\n          <label for=\"viewer_role\">{{_('Allow eBook Viewer')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"upload_role\" id=\"upload_role\" {% if conf.role_upload() %}checked{% endif %}>\n          <label for=\"upload_role\">{{_('Allow Uploads')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_role\" id=\"edit_role\" {% if conf.role_edit() %}checked{% endif %}>\n          <label for=\"edit_role\">{{_('Allow Edit')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"delete_role\" id=\"delete_role\" {% if conf.role_delete_books() %}checked{% endif %}>\n          <label for=\"delete_role\">{{_('Allow Delete Books')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"passwd_role\" id=\"passwd_role\" {% if conf.role_passwd() %}checked{% endif %}>\n          <label for=\"passwd_role\">{{_('Allow Changing Password')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_shelf_role\" id=\"edit_shelf_role\" {% if conf.role_edit_shelfs() %}checked{% endif %}>\n          <label for=\"edit_shelf_role\">{{_('Allow Editing Public Shelves')}}</label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">\n        <a class=\"accordion-toggle\" data-toggle=\"collapse\" href=\"#collapseseven\">\n          <span class=\"glyphicon glyphicon-plus\"></span>\n          {{_('Default Visibilities for New Users')}}\n        </a>\n      </h4>\n    </div>\n    <div id=\"collapseseven\" class=\"panel-collapse collapse\">\n      <div class=\"panel-body\">\n        {% for element in sidebar %}\n          {% if element['config_show'] %}\n            <div class=\"form-group\">\n              <input type=\"checkbox\" name=\"show_{{element['visibility']}}\" id=\"show_{{element['visibility']}}\" {% if conf.show_element_new_user(element['visibility']) %}checked{% endif %}>\n              <label for=\"show_{{element['visibility']}}\">{{element['show_text']}}</label>\n            </div>\n          {% endif %}\n        {% endfor %}\n        <div class=\"form-group\">\n            <input type=\"checkbox\" name=\"Show_detail_random\" id=\"Show_detail_random\" {% if conf.show_detail_random() %}checked{% endif %}>\n            <label for=\"Show_detail_random\">{{_('Show Random Books in Detail View')}}</label>\n        </div>\n        <a href=\"#\" id=\"get_tags\" data-id=\"0\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied Tags')}}</a>\n        <a href=\"#\" id=\"get_column_values\" data-id=\"0\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied custom column values')}}</a>\n      </div>\n    </div>\n  </div>\n</div>\n    <div class=\"col-sm-12\">\n    <button type=\"submit\" name=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n    <a href=\"{{ url_for('admin.admin') }}\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    </div>\n  </form>\n</div>\n{% endblock %}\n{% block modal %}\n{{ restrict_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends is_xhr|yesno(\"fragment.html\", \"layout.html\") %}\n{% block body %}\n<div class=\"single\">\n  <div class=\"row\">\n    <div class=\"col-sm-3 col-lg-3 col-xs-5\">\n      <div class=\"cover\">\n          <img id=\"detailcover\" title=\"{{entry.title}}\" src=\"{{ url_for('web.get_cover', book_id=entry.id, edit=1|uuidfilter) }}\" alt=\"{{ entry.title }}\" />\n      </div>\n    </div>\n    <div class=\"col-sm-9 col-lg-9 book-meta\">\n      <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Download, send to Kindle, reading\">\n          {% if g.user.role_download() %}\n            {% if entry.data|length %}\n            <div class=\"btn-group\" role=\"group\">\n                {% if entry.data|length < 2 %}\n                  <button id=\"Download\" type=\"button\" class=\"btn btn-primary\">\n                    {{_('Download')}} :\n                  </button>\n                  {% for format in entry.data %}\n                  <a href=\"{{ url_for('web.download_link', book_id=entry.id, book_format=format.format|lower, anyname=entry.id|string+'.'+format.format|lower) }}\" id=\"btnGroupDrop1{{format.format|lower}}\" class=\"btn btn-primary\" role=\"button\">\n                    <span class=\"glyphicon glyphicon-download\"></span>{{format.format}} ({{ format.uncompressed_size|filesizeformat }})\n                  </a>\n                  {% endfor %}\n                {% else %}\n                  <button id=\"btnGroupDrop1\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"glyphicon glyphicon-download\"></span> {{_('Download')}}\n                    <span class=\"caret\"></span>\n                  </button>\n                  <ul class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n                  {% for format in entry.data %}\n                    <li><a href=\"{{ url_for('web.download_link', book_id=entry.id, book_format=format.format|lower, anyname=entry.id|string+'.'+format.format|lower) }}\">{{format.format}} ({{ format.uncompressed_size|filesizeformat }})</a></li>\n                  {% endfor %}\n                  </ul>\n                {% endif %}\n            </div>\n            {% endif %}\n          {% endif %}\n            {% if g.user.kindle_mail and kindle_list %}\n              {% if kindle_list.__len__() == 1 %}\n                <a href=\"{{url_for('web.send_to_kindle', book_id=entry.id, book_format=kindle_list[0]['format'], convert=kindle_list[0]['convert'])}}\" id=\"sendbtn\" data-text=\"{{_('Send to Kindle')}}\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-send\"></span> {{kindle_list[0]['text']}}</a>\n              {% else %}\n                <div class=\"btn-group\" role=\"group\">\n                  <button id=\"sendbtn2\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    <span class=\"glyphicon glyphicon-send\"></span>{{_('Send to Kindle')}}\n                    <span class=\"caret\"></span>\n                  </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"send-to-kindle\">\n                    {% for format in kindle_list %}\n                      <li><a href=\"{{url_for('web.send_to_kindle', book_id=entry.id, book_format=format['format'], convert=format['convert'])}}\">{{format['text']}}</a></li>\n                    {%endfor%}\n                    </ul>\n                </div>\n              {% endif %}\n            {% endif %}\n          {% if reader_list and g.user.role_viewer() %}\n              <div class=\"btn-group\" role=\"group\">\n              {% if reader_list|length > 1 %}\n                <button id=\"read-in-browser\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  <span class=\"glyphicon glyphicon-book\"></span> {{_('Read in Browser')}}\n                  <span class=\"caret\"></span>\n                </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"read-in-browser\">\n                    {% for format in reader_list %}\n                      <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format) }}\">{{format}}</a></li>\n                    {%endfor%}\n                    </ul>\n                {% else %}\n                  <a target=\"_blank\" href=\"{{url_for('web.read_book', book_id=entry.id, book_format=reader_list[0])}}\" id=\"readbtn\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-book\"></span> {{_('Read in Browser')}} - {{reader_list[0]}}</a>\n                {% endif %}\n              </div>\n            {% endif %}\n            {% if audioentries|length > 0 and g.user.role_viewer() %}\n              <div class=\"btn-group\" role=\"group\">\n              {% if audioentries|length > 1 %}\n                <button id=\"listen-in-browser\" type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  <span class=\"glyphicon glyphicon-music\"></span> {{_('Listen in Browser')}}\n                  <span class=\"caret\"></span>\n                </button>\n                    <ul class=\"dropdown-menu\" aria-labelledby=\"listen-in-browser\">\n                    {% for format in reader_list %}\n                      <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format) }}\">{{format}}</a></li>\n                    {%endfor%}\n                    </ul>\n                  <ul class=\"dropdown-menu\" aria-labelledby=\"listen-in-browser\">\n\n              {% for format in entry.data %}\n                  {% if format.format|lower in audioentries %}\n                    <li><a target=\"_blank\" href=\"{{ url_for('web.read_book', book_id=entry.id, book_format=format.format|lower) }}\">{{format.format|lower }}</a></li>\n                    {% endif %}\n              {% endfor %}\n                  </ul>\n                {% else %}\n                  <a target=\"_blank\" href=\"{{url_for('web.read_book', book_id=entry.id, book_format=audioentries[0])}}\" id=\"listenbtn\" class=\"btn btn-primary\" role=\"button\"><span class=\"glyphicon glyphicon-music\"></span> {{_('Listen in Browser')}} - {{audioentries[0]}}</a>\n                {% endif %}\n              </div>\n            {% endif %}\n        </div>\n      </div>\n      <h2 id=\"title\">{{entry.title}}</h2>\n      <p class=\"author\">\n          {% for author in entry.authors %}\n            <a href=\"{{url_for('web.books_list',  data='author', sort_param='stored', book_id=author.id ) }}\">{{author.name.replace('|',',')}}</a>\n            {% if not loop.last %}\n              &amp;\n            {% endif %}\n          {% endfor %}\n        </p>\n      {% if entry.ratings.__len__() > 0 %}\n        <div class=\"rating\">\n        <p>\n          {% for number in range((entry.ratings[0].rating/2)|int(2)) %}\n            <span class=\"glyphicon glyphicon-star good\"></span>\n            {% if loop.last and loop.index < 5 %}\n              {% for numer in range(5 - loop.index) %}\n                <span class=\"glyphicon glyphicon-star-empty\"></span>\n              {% endfor %}\n            {% endif %}\n          {% endfor %}\n        </p>\n        </div>\n      {% endif %}\n      {% if entry.series|length > 0 %}\n          <p>{{_(\"Book %(index)s of %(range)s\", index=entry.series_index | formatfloat(2), range=(url_for('web.books_list', data='series', sort_param='stored', book_id=entry.series[0].id)|escapedlink(entry.series[0].name))|safe)}}</p>\n\n      {% endif %}\n\n      {% if entry.languages.__len__() > 0 %}\n       <div class=\"languages\">\n       <p>\n      <span class=\"label label-default\">{{_('Language')}}: {% for language in entry.languages %}{{language.language_name}}{% if not loop.last %}, {% endif %}{% endfor %}</span>\n      </p>\n      </div>\n      {% endif %}\n\n      {% if entry.identifiers|length > 0 %}\n      <div class=\"identifiers\">\n        <p>\n        <span class=\"glyphicon glyphicon-link\"></span>\n        {% for identifier in entry.identifiers %}\n          <a href=\"{{identifier}}\" target=\"_blank\" class=\"btn btn-xs btn-success\" role=\"button\">{{identifier.formatType()}}</a>\n        {%endfor%}\n      </p>\n      </div>\n      {% endif %}\n\n      {% if entry.tags|length > 0 %}\n\n      <div class=\"tags\">\n      <p>\n        <span class=\"glyphicon glyphicon-tags\"></span>\n\n        {% for tag in entry.tags %}\n          <a href=\"{{ url_for('web.books_list', data='category', sort_param='stored', book_id=tag.id) }}\" class=\"btn btn-xs btn-info\" role=\"button\">{{tag.name}}</a>\n        {%endfor%}\n      </p>\n\n      </div>\n      {% endif %}\n\n      {% if entry.publishers|length > 0 %}\n      <div class=\"publishers\">\n        <p>\n          <span>{{_('Publisher')}}:\n              <a href=\"{{url_for('web.books_list', data='publisher', sort_param='stored', book_id=entry.publishers[0].id ) }}\">{{entry.publishers[0].name}}</a>\n          </span>\n        </p>\n      </div>\n      {% endif %}\n\n      {% if (entry.pubdate|string)[:10] != '0101-01-01' %}\n      <div class=\"publishing-date\">\n        <p>{{_('Published')}}: {{entry.pubdate|formatdate}} </p>\n      </div>\n      {% endif %}\n      {% if cc|length > 0 %}\n\n\n        {% for c in cc %}\n        <div class=\"real_custom_columns\">\n          {% if entry['custom_column_' ~ c.id]|length > 0 %}\n            {{ c.name }}:\n            {% for column in entry['custom_column_' ~ c.id] %}\n              {% if c.datatype == 'rating' %}\n                {{ (column.value / 2)|formatfloat }}\n              {% else %}\n                {% if c.datatype == 'bool' %}\n                  {% if column.value == true %}\n                    <span class=\"glyphicon glyphicon-ok\"></span>\n                  {% else %}\n                    <span class=\"glyphicon glyphicon-remove\"></span>\n                  {% endif %}\n                {% else %}\n                {% if c.datatype == 'float' %}\n                  {{ column.value|formatfloat(2) }}\n                {% elif c.datatype == 'datetime' %}\n                  {{ column.value|formatdate }}\n                {% elif c.datatype == 'comments' %}\n                  {{column.value|safe}}\n                {% elif c.datatype == 'series' %}\n                  {{ '%s [%s]' % (column.value, column.extra|formatfloat(2)) }}\n                {% else %}\n                  {{ column.value }}\n                {% endif %}\n                {% endif %}\n              {% endif %}\n            {% endfor %}\n          {% endif %}\n        </div>\n        {% endfor %}\n      {% endif %}\n      {% if not g.user.is_anonymous %}\n\n        <div class=\"custom_columns\">\n          <p>\n          <form id=\"have_read_form\" action=\"{{ url_for('web.toggle_read', book_id=entry.id)}}\" method=\"POST\">\n            <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n            <label class=\"block-label\">\n              <input id=\"have_read_cb\" data-checked=\"{{_('Mark As Unread')}}\" data-unchecked=\"{{_('Mark As Read')}}\" type=\"checkbox\" {% if have_read %}checked{% endif %} >\n              <span>{{_('Read')}}</span>\n            </label>\n          </form>\n          </p>\n          {% if g.user.check_visibility(32768) %}\n          <p>\n            <form id=\"archived_form\" action=\"{{ url_for('web.toggle_archived', book_id=entry.id)}}\" method=\"POST\">\n              <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n              <label class=\"block-label\">\n                <input id=\"archived_cb\" data-checked=\"{{_('Restore from archive')}}\" data-unchecked=\"{{_('Add to archive')}}\" type=\"checkbox\" {% if is_archived %}checked{% endif %} >\n                <span>{{_('Archived')}}</span>\n              </label>\n            </form>\n          </p>\n          {% endif %}\n        </div>\n      {% endif %}\n\n\n      {% if entry.comments|length > 0 and entry.comments[0].text|length > 0%}\n        <div class=\"comments\">\n            <h3 id=\"decription\">{{_('Description:')}}</h3>\n            {{entry.comments[0].text|safe}}\n        </div>\n      {% endif %}\n\n\n      <div class=\"more-stuff\">\n\n      {% if g.user.is_authenticated %}\n      {% if g.user.shelf.all() or g.shelves_access %}\n      <div id=\"shelf-actions\" class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Add to shelves\">\n          <button id=\"add-to-shelf\" type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"glyphicon glyphicon-list\"></span> {{_('Add to shelf')}}\n            <span class=\"caret\"></span>\n          </button>\n          <ul id=\"add-to-shelves\" class=\"dropdown-menu\" aria-labelledby=\"add-to-shelf\">\n            {% for shelf in g.shelves_access %}\n              {% if not shelf.id in books_shelfs and ( not shelf.is_public or g.user.role_edit_shelfs() ) %}\n                <li>\n                  <a href=\"{{ url_for('shelf.add_to_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                     data-remove-href=\"{{ url_for('shelf.remove_from_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                     data-shelf-action=\"add\"\n                  >\n                    {{shelf.name}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}\n                  </a>\n                </li>\n              {% endif %}\n            {%endfor%}\n          </ul>\n        </div>\n        <div id=\"remove-from-shelves\" class=\"btn-group\" role=\"group\" aria-label=\"Remove from shelves\">\n          {% if books_shelfs %}\n            {% for shelf in g.shelves_access %}\n              {% if shelf.id in books_shelfs %}\n                <a href=\"{{ url_for('shelf.remove_from_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                   data-add-href=\"{{ url_for('shelf.add_to_shelf', book_id=entry.id, shelf_id=shelf.id) }}\"\n                   class=\"btn btn-sm btn-default\" role=\"button\" data-shelf-action=\"remove\"\n                >\n                  <span {% if not shelf.is_public or g.user.role_edit_shelfs() %}\n                        class=\"glyphicon glyphicon-remove\"\n                        {% endif %}></span> {{shelf.name}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}\n                </a>\n              {% endif %}\n            {%endfor%}\n          {% endif %}\n        </div>\n        <div id=\"shelf-action-errors\" class=\"pull-left\" role=\"alert\"></div>\n      </div>\n      {% endif %}\n\n      {% endif %}\n      {% if g.user.role_edit() %}\n      <div class=\"btn-toolbar\" role=\"toolbar\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Edit/Delete book\">\n          <a href=\"{{ url_for('editbook.edit_book', book_id=entry.id) }}\" class=\"btn btn-sm btn-primary\" id=\"edit_book\" role=\"button\"><span class=\"glyphicon glyphicon-edit\"></span> {{_('Edit Metadata')}}</a>\n        </div>\n      </div>\n      {% endif %}\n      </div>\n\n    </div>\n  </div>\n</div>\n{% endblock %}\n\n{% block js %}\n<script type=\"text/template\" id=\"template-shelf-add\">\n  <li>\n    <a href=\"<%= add %>\" data-remove-href=\"<%= remove %>\" data-shelf-action=\"add\">\n      <%= content %>\n    </a>\n  </li>\n</script>\n<script type=\"text/template\" id=\"template-shelf-remove\">\n  <a href=\"<%= remove %>\" data-add-href=\"<%= add %>\" class=\"btn btn-sm btn-default\" data-shelf-action=\"remove\">\n    <span class=\"glyphicon glyphicon-remove\"></span> <%= content %>\n  </a>\n</script>\n<script src=\"{{ url_for('static', filename='js/details.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/fullscreen.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n{% endblock %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" class=\"col-md-10 col-lg-6\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    {% if feature_support['gmail'] %}\n    <div class=\"form-group\">\n      <label for=\"config_email_type\">{{_('Choose Server Type')}}</label>\n      <select name=\"mail_server_type\" id=\"config_email_type\" class=\"form-control\" data-control=\"email-settings\">\n       <option value=\"0\" {% if content.mail_server_type == 0 %}selected{% endif %}>{{_('Use Standard E-Mail Account')}}</option>\n       <option value=\"1\" {% if content.mail_server_type == 1 %}selected{% endif %}>{{_('Gmail Account with OAuth2 Verification')}}</option>\n      </select>\n    </div>\n    <div data-related=\"email-settings-1\">\n      <div class=\"form-group\">\n        {% if content.mail_gmail_token == {} %}\n        <button type=\"submit\" id=\"gmail_server\" name=\"gmail\" value=\"submit\" class=\"btn btn-default\">{{_('Setup Gmail Account as E-Mail Server')}}</button>\n        {% else %}\n        <button type=\"submit\" id=\"invalidate_server\" name=\"invalidate\" value=\"submit\" class=\"btn btn-danger\">{{_('Revoke Gmail Access')}}</button>\n        {% endif %}\n      </div>\n    </div>\n    <div data-related=\"email-settings-0\">\n   {% endif %}\n      <div class=\"form-group\">\n        <label for=\"mail_server\">{{_('SMTP Hostname')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_server\" id=\"mail_server\" value=\"{{content.mail_server}}\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_port\">{{_('SMTP Port')}}</label>\n        <input type=\"number\" min=\"1\" max=\"65535\" step=\"1\" class=\"form-control\" name=\"mail_port\" id=\"mail_port\" value=\"{% if content.mail_port != None %}{{ content.mail_port }}{% endif %}\" autocomplete=\"off\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_use_ssl\">{{_('Encryption')}}</label>\n          <select name=\"mail_use_ssl\" id=\"mail_use_ssl\" class=\"form-control\">\n              <option value=\"0\" {% if content.mail_use_ssl == 0 %}selected{% endif %}>{{ _('None') }}</option>\n              <option value=\"1\" {% if content.mail_use_ssl == 1 %}selected{% endif %}>{{ _('STARTTLS') }}</option>\n              <option value=\"2\" {% if content.mail_use_ssl == 2 %}selected{% endif %}>{{ _('SSL/TLS') }}</option>\n          </select>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_login\">{{_('SMTP Login')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_login\" id=\"mail_login\" value=\"{{content.mail_login}}\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_password\">{{_('SMTP Password')}}</label>\n        <input type=\"password\" class=\"form-control\" name=\"mail_password\" id=\"mail_password\" value=\"{{content.mail_password}}\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"mail_from\">{{_('From E-mail')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"mail_from\" id=\"mail_from\" value=\"{{content.mail_from}}\" required>\n      </div>\n      <label for=\"mail_size\">{{_('Attachment Size Limit')}}</label>\n       <div class=\"form-group input-group\">\n        <input type=\"number\" min=\"1\" max=\"600\" step=\"1\" class=\"form-control\" name=\"mail_size\" id=\"mail_size\" value=\"{% if content.mail_size != None %}{{ (content.mail_size / 1024 / 1024)|int }}{% endif %}\" required>\n        <span class=\"input-group-btn\">\n          <button type=\"button\" id=\"attachement_size\" class=\"btn btn-default\" disabled>MB</button>\n        </span>\n      </div>\n      <button type=\"submit\" name=\"submit\" value=\"submit\" class=\"btn btn-default\">{{_('Save')}}</button>\n      <button type=\"submit\" name=\"test\" value=\"test\" class=\"btn btn-default\">{{_('Save and Send Test E-mail')}}</button>\n   {% if feature_support['gmail'] %}\n    </div>\n   {% endif %}\n      <a href=\"{{ url_for('admin.admin') }}\" id=\"email_back\" class=\"btn btn-default\">{{_('Back')}}</a>\n  </form>\n    {% if g.allow_registration %}\n  <div class=\"col-md-10 col-lg-6\">\n    <h2>{{_('Allowed Domains (Whitelist)')}}</h2>\n    <form id=\"domain_add_allow\" action=\"{{ url_for('admin.add_domain',allow=1)}}\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"form-group required\">\n      <label for=\"domainname_allow\">{{_('Add Domain')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"domainname\" id=\"domainname_allow\" >\n    </div>\n    <button id=\"domain_allow_submit\" class=\"btn btn-default\">{{_('Add')}}</button>\n    </form>\n  <table class=\"table table-no-bordered\" id=\"domain-allow-table\" data-url=\"{{url_for('admin.list_domain', allow=1)}}\" data-id-field=\"id\" data-show-header=\"false\" data-editable-mode=\"inline\">\n    <thead>\n    <tr>\n      <th data-field=\"domain\" id=\"domain-allow\" data-escape=\"true\" data-editable-type=\"text\" data-editable-url=\"{{ url_for('admin.edit_domain', allow = 1)}}\" data-editable=\"true\" data-editable-title=\"{{_('Enter domainname')}}\"></th>\n      <th data-field=\"id\" id=\"id-allow\" data-visible=\"false\"></th>\n      <th data-align=\"right\" data-formatter=\"TableActions\"></th>\n    </tr>\n    </thead>\n  </table>\n  <h2>{{_('Denied Domains (Blacklist)')}}</h2>\n    <table class=\"table table-no-bordered\" id=\"domain-deny-table\" data-url=\"{{url_for('admin.list_domain', allow=0)}}\" data-id-field=\"id\" data-show-header=\"false\" data-editable-mode=\"inline\">\n      <thead>\n        <tr>\n            <th data-field=\"domain\" id=\"domain-deny\" data-escape=\"true\" data-editable-type=\"text\" data-editable-url=\"{{ url_for('admin.edit_domain', allow = 0)}}\" data-editable=\"true\" data-editable-title=\"{{_('Enter domainname')}}\"></th>\n            <th data-field=\"id\" id=\"id-deny\" data-visible=\"false\"></th>\n            <th data-align=\"right\" data-formatter=\"TableActions\"></th>\n        </tr>\n      </thead>\n    </table>\n    <form id=\"domain_add_deny\" action=\"{{ url_for('admin.add_domain',allow=0)}}\" method=\"POST\">\n      <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n      <div class=\"form-group required\">\n        <label for=\"domainname_deny\">{{_('Add Domain')}}</label>\n        <input type=\"text\" class=\"form-control\" name=\"domainname\" id=\"domainname_deny\" >\n      </div>\n      <button id=\"domain_deny_submit\" class=\"btn btn-default\">{{_('Add')}}</button>\n    </form>\n    </div>\n\n    {% endif %}\n</div>\n{% endblock %}\n{% block modal %}\n{% if g.allow_registration %}\n{{ delete_confirm_modal() }}\n{% endif %}\n{% endblock %}\n{% block js %}\n{% if g.allow_registration %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endif %}\n{% endblock %}\n", "<!DOCTYPE html>\n<html class=\"http-error\">\n  <head>\n    <title>{{ instance }} | HTTP Error ({{ error_code }})</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n    <!-- Bootstrap -->\n    <link rel=\"apple-touch-icon\" sizes=\"140x140\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link href=\"{{ url_for('static', filename='css/libs/bootstrap.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% if g.current_theme == 1 %}\n       <link href=\"{{ url_for('static', filename='css/caliBlur.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% endif %}\n  </head>\n  <body>\n  <div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n        <h1  class=\"text-center\">{{instance}}</h1>\n        <h1  class=\"text-center\">{{ error_code }}</h1>\n        <h3>{{ error_name }}</h3>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-offset-4 text-left\">\n        {% if unconfigured %}\n            <div>{{_('Calibre-Web Instance is unconfigured, please contact your administrator')}}</div>\n        {% endif %}\n      {% for element in error_stack %}\n        <div>{{ element }}</div>\n      {% endfor %}\n    </div>\n   </div>\n  {% if issue %}\n    <div class=\"row\">\n    <div class=\"col errorlink\">Please report this issue with all related information:\n        <a href=\"https://github.com/janeczku/calibre-web/issues/new?assignees=&labels=&template=bug_report.md&title=\">{{_('Create Issue')}}</a>\n    </div>\n      </div>\n    {% endif %}\n    <div class=\"row\">\n      <div class=\"col errorlink\">\n      {% if not unconfigured %}\n        <a href=\"{{url_for('web.index')}}\" title=\"{{ _('Return to Home') }}\">{{_('Return to Home')}}</a>\n      {% else %}\n        <a href=\"{{url_for('web.logout')}}\" title=\"{{ _('Logout User') }}\">{{ _('Logout User') }}</a>\n      {% endif %}\n      </div>\n    </div>\n  </div>\n  </body>\n</html>\n", "{% from 'modal_dialogs.html' import restrict_modal, delete_book, filechooser_modal, delete_confirm_modal, change_confirm_modal %}\n<!DOCTYPE html>\n<html lang=\"{{ g.user.locale }}\">\n  <head>\n    <title>{{instance}} | {{title}}</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n    <!-- Bootstrap -->\n    <link rel=\"apple-touch-icon\" sizes=\"140x140\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link rel=\"shortcut icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\n    <link href=\"{{ url_for('static', filename='css/libs/bootstrap.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% block header %}{% endblock %}\n    <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    <link href=\"{{ url_for('static', filename='css/upload.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% if g.current_theme == 1 %}\n       <link href=\"{{ url_for('static', filename='css/caliBlur.css') }}\" rel=\"stylesheet\" media=\"screen\">\n       <link href=\"{{ url_for('static', filename='css/caliBlur_override.css') }}\" rel=\"stylesheet\" media=\"screen\">\n    {% endif %}\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n    <!--[if lt IE 9]>\n      <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n      <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n    <![endif]-->\n  </head>\n  <body class=\"{{ page }} {{ bodyClass }}\" data-text=\"{{_('Home')}}\" data-textback=\"{{_('Back')}}\">\n    <!-- Static navbar -->\n    <div class=\"navbar navbar-default navbar-static-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n            <span class=\"sr-only\">{{_('Toggle Navigation')}}</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"{{url_for('web.index')}}\">{{instance}}</a>\n        </div>\n        {% if g.user.is_authenticated or g.allow_anonymous %}\n          <form class=\"navbar-form navbar-left\" role=\"search\" action=\"{{url_for('web.search')}}\" method=\"GET\">\n            <div class=\"form-group input-group input-group-sm\">\n              <label for=\"query\" class=\"sr-only\">{{_('Search')}}</label>\n              <input type=\"text\" class=\"form-control\" id=\"query\" name=\"query\" placeholder=\"{{_('Search Library')}}\" value=\"{{searchterm}}\">\n              <span class=\"input-group-btn\">\n                <button type=\"submit\" id=\"query_submit\" class=\"btn btn-default\">{{_('Search')}}</button>\n              </span>\n            </div>\n          </form>\n        {% endif %}\n        <div class=\"navbar-collapse collapse\">\n          {% if g.user.is_authenticated or g.allow_anonymous %}\n          <ul class=\"nav navbar-nav \">\n            <li><a href=\"{{url_for('web.advanced_search')}}\" id=\"advanced_search\"><span class=\"glyphicon glyphicon-search\"></span><span class=\"hidden-sm\"> {{_('Advanced Search')}}</span></a></li>\n          </ul>\n          {% endif %}\n          <ul class=\"nav navbar-nav navbar-right\" id=\"main-nav\">\n            {% if g.user.is_authenticated or g.allow_anonymous %}\n              {% if g.user.role_upload() or g.user.role_admin()%}\n                {% if g.allow_upload %}\n                  <li>\n                    <form id=\"form-upload\" class=\"navbar-form\" action=\"{{ url_for('editbook.upload') }}\" data-title=\"{{_('Uploading...')}}\" data-footer=\"{{_('Close')}}\" data-failed=\"{{_('Error')}}\" data-message=\"{{_('Upload done, processing, please wait...')}}\" method=\"post\" enctype=\"multipart/form-data\">\n                      <div class=\"form-group\">\n                        <span class=\"btn btn-default btn-file\">{{_('Upload')}}<input id=\"btn-upload\" name=\"btn-upload\"\n                        type=\"file\" accept=\"{% for format in accept %}.{% if format != ''%}{{format}}{% else %}*{% endif %}{{ ',' if not loop.last }}{% endfor %}\" multiple></span>\n                      </div>\n                    </form>\n                  </li>\n                {% endif %}\n              {% endif %}\n              {% if not g.user.is_anonymous %}\n                <li><a id=\"top_tasks\" href=\"{{url_for('web.get_tasks_status')}}\"><span class=\"glyphicon glyphicon-tasks\"></span> <span class=\"hidden-sm\">{{_('Tasks')}}</span></a></li>\n              {% endif %}\n              {% if g.user.role_admin() %}\n                <li><a id=\"top_admin\" data-text=\"{{_('Settings')}}\" href=\"{{url_for('admin.admin')}}\"><span class=\"glyphicon glyphicon-dashboard\"></span> <span class=\"hidden-sm\">{{_('Admin')}}</span></a></li>\n              {% endif %}\n              <li><a id=\"top_user\" data-text=\"{{_('Account')}}\" href=\"{{url_for('web.profile')}}\"><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">{{g.user.name}}</span></a></li>\n              {% if not g.user.is_anonymous %}\n              <li><a id=\"logout\" href=\"{{url_for('web.logout')}}\"><span class=\"glyphicon glyphicon-log-out\"></span> <span class=\"hidden-sm\">{{_('Logout')}}</span></a></li>\n              {% endif %}\n            {% endif %}\n            {% if g.allow_registration and not g.user.is_authenticated %}\n            <li><a id=\"login\" href=\"{{url_for('web.login')}}\"><span class=\"glyphicon glyphicon-log-in\"></span> {{_('Login')}}</a></li>\n            <li><a id=\"register\" href=\"{{url_for('web.register')}}\"><span class=\"glyphicon glyphicon-user\"></span> {{_('Register')}}</a></li>\n            {% endif %}\n          </ul>\n        </div><!--/.nav-collapse -->\n      </div>\n    </div>\n    {% for message in get_flashed_messages(with_categories=True) %}\n      {%if message[0] == \"error\" %}\n      <div class=\"row-fluid text-center\" >\n        <div id=\"flash_danger\" class=\"alert alert-danger\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"info\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_info\" class=\"alert alert-info\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"warning\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_warning\" class=\"alert alert-warning\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n      {%if message[0] == \"success\" %}\n      <div class=\"row-fluid text-center\">\n        <div id=\"flash_success\" class=\"alert alert-success\">{{ message[1] }}</div>\n      </div>\n      {%endif%}\n    {% endfor %}\n    {% block flash %}{% endblock %}\n    {% if g.current_theme == 1 %}\n      <div id=\"loader\" hidden=\"true\">\n        <center>\n          <h3>{{_('Uploading...')}}</h3>\n          <span>{{_(\"Please do not refresh the page\")}}</span>.\n        </center>\n      </div>\n    {%endif%}\n    <div class=\"container-fluid\">\n      <div class=\"row-fluid\">\n        {% if g.user.is_authenticated or g.allow_anonymous %}\n        <div class=\"col-sm-2\">\n          <nav class=\"navigation\">\n            <ul class=\"list-unstyled\" id=\"scnd-nav\" intent in-standard-append=\"nav.navigation\" in-mobile-after=\"#main-nav\" in-mobile-class=\"nav navbar-nav\">\n              <li class=\"nav-head hidden-xs\">{{_('Browse')}}</li>\n              {% for element in sidebar %}\n                {% if g.user.check_visibility(element['visibility']) and element['public'] %}\n                    <li id=\"nav_{{element['id']}}\" {% if page == element['page'] %}class=\"active\"{% endif %}><a href=\"{{url_for(element['link'], data=element['page'], sort_param='stored')}}\"><span class=\"glyphicon {{element['glyph']}}\"></span> {{_(element['text'])}}</a></li>\n                {% endif %}\n              {% endfor %}\n              {% if g.user.is_authenticated or g.allow_anonymous %}\n                <li class=\"nav-head hidden-xs public-shelves\">{{_('Shelves')}}</li>\n                {% for shelf in g.shelves_access %}\n                  <li><a href=\"{{url_for('shelf.show_shelf', shelf_id=shelf.id)}}\"><span class=\"glyphicon glyphicon-list shelf\"></span> {{shelf.name|shortentitle(40)}}{% if shelf.is_public == 1 %} {{_('(Public)')}}{% endif %}</a></li>\n                {% endfor %}\n              {% if not g.user.is_anonymous %}\n                <li id=\"nav_createshelf\" class=\"create-shelf\"><a href=\"{{url_for('shelf.create_shelf')}}\">{{_('Create a Shelf')}}</a></li>\n                <li id=\"nav_about\" {% if page == 'stat' %}class=\"active\"{% endif %}><a href=\"{{url_for('about.stats')}}\"><span class=\"glyphicon glyphicon-info-sign\"></span> {{_('About')}}</a></li>\n              {% endif %}\n              {% endif %}\n\n            </ul>\n          </nav>\n        </div>\n        {% endif %}\n        <div class=\"col-sm-10\">\n          {% block body %}{% endblock %}\n          {% if pagination and (pagination.has_next or pagination.has_prev) %}\n            <div class=\"pagination\">\n              {% if pagination.has_prev %}\n              <li class=\"page-item page-previous\"><a class=\"page-link\" aria-label=\"next page\" href=\"{{ (pagination.page - 1)|url_for_other_page\n                }}\">&laquo; {{_('Previous')}}</a></li>\n              {% endif %}\n            {% for page in pagination.iter_pages() %}\n              {% if page %}\n                {% if page != pagination.page %}\n                  <li class=\"page-item\"><a class=\"page-link\" aria-label=\"to page {{ page }}\" href=\"{{ (page)|url_for_other_page }}\">{{ page }}</a></li>\n                {% else %}\n                  <li class=\"page-item active\"><a class=\"page-link\" aria-label=\"to page {{ page }}\" href=\"{{ (page)|url_for_other_page }}\">{{ page }}</a></li>\n                {% endif %}\n              {% else %}\n                <li class=\"page-item page-last-separator disabled\"><a class=\"page-link\" aria-label=\"\">\u2026</a></li>\n              {% endif %}\n            {% endfor %}\n            {% if pagination.has_next %}\n              <li class=\"page-item page-next\"><a class=\"page-link next\" aria-label=\"next page\" href=\"{{ (pagination.page + 1)|url_for_other_page\n                }}\">{{_('Next')}} &raquo;</a></li>\n            {% endif %}\n            </div>\n          {% endif %}\n      </div>\n    </div>\n  </div>\n    <div class=\"modal fade\" id=\"bookDetailsModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"bookDetailsModalLabel\">\n      <div class=\"modal-dialog modal-lg\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n            <h4 class=\"modal-title\" id=\"bookDetailsModalLabel\">{{_('Book Details')}}</h4>\n          </div>\n          <div class=\"modal-body\">...</div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    {% block modal %}{% endblock %}\n    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n    <script src=\"{{ url_for('static', filename='js/libs/jquery.min.js') }}\"></script>\n    <!-- Include all compiled plugins (below), or include individual files as needed -->\n    <script src=\"{{ url_for('static', filename='js/libs/bootstrap.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/underscore-umd-min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/intention.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/context.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/plugins.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/libs/jquery.form.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/uploadprogress.js') }}\"> </script>\n    <script src=\"{{ url_for('static', filename='js/main.js') }}\"></script>\n    {% if g.current_theme == 1 %}\n      <script src=\"{{ url_for('static', filename='js/libs/jquery.visible.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/libs/compromise.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/libs/readmore.min.js') }}\"></script>\n      <script src=\"{{ url_for('static', filename='js/caliBlur.js') }}\"></script>\n    {% endif %}\n    {% block js %}{% endblock %}\n  </body>\n</html>\n", "{% extends \"layout.html\" %}\n{% block body %}\n<h1 class=\"{{page}}\">{{_(title)}}</h1>\n\n    <div class=\"filterheader hidden-xs hidden-sm\">\n      {% if entries.__len__() %}\n       {% if data == 'author' %}\n        <button id=\"sort_name\" class=\"btn btn-primary\"><b>B,A <-> A B</b></button>\n       {% endif %}\n      {% endif %}\n      <button id=\"asc\" data-order=\"{{ order }}\" data-id=\"{{ data }}\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-sort-by-alphabet\"></span></button>\n      <button id=\"desc\" data-id=\"{{ data }}\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-sort-by-alphabet-alt\"></span></button>\n      {% if charlist|length %}\n      <button id=\"all\" class=\"btn btn-primary\">{{_('All')}}</button>\n      {% endif %}\n      <div class=\"btn-group character\" role=\"group\">\n        {% for char in charlist%}\n        <button class=\"btn btn-primary char\">{{char.char}}</button>\n        {% endfor %}\n      </div>\n\n      {% if data == \"series\" %}\n      <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n      <button class=\"update-view btn btn-primary\" data-target=\"series_view\" id=\"grid-button\" data-view=\"grid\">Grid</button>\n      {% endif %}\n    </div>\n  <div class=\"container\">\n    <div id=\"list\" class=\"col-xs-12 col-sm-6\">\n    {% for entry in entries %}\n      {% if loop.index0 == (loop.length/2+loop.length%2)|int and loop.length > 20 %}\n        </div>\n        <div id=\"second\" class=\"col-xs-12 col-sm-6\">\n      {% endif %}\n      <div class=\"row\" {% if entry[0].sort %}data-name=\"{{entry[0].name}}\"{% endif %} data-id=\"{% if entry[0].sort %}{{entry[0].sort}}{% else %}{% if entry.name %}{{entry.name}}{% else %}{{entry[0].name}}{% endif %}{% endif %}\">\n        <div class=\"col-xs-2 col-sm-2 col-md-1\" align=\"left\"><span class=\"badge\">{{entry.count}}</span></div>\n        <div class=\"col-xs-10 col-sm-10 col-md-11\"><a id=\"list_{{loop.index0}}\" href=\"{% if entry.format %}{{url_for('web.books_list', data=data, sort_param='stored', book_id=entry.format )}}{% else %}{{url_for('web.books_list', data=data, sort_param='stored', book_id=entry[0].id )}}{% endif %}\">\n          {% if entry.name %}\n          <div class=\"rating\">\n          {% for number in range(entry.name) %}\n            <span class=\"glyphicon glyphicon-star good\"></span>\n            {% if loop.last and loop.index < 5 %}\n              {% for numer in range(5 - loop.index) %}\n                <span class=\"glyphicon glyphicon-star-empty\"></span>\n              {% endfor %}\n            {% endif %}\n          {% endfor %}\n          </div>\n          {% else %}\n          {% if entry.format %}\n            {{entry.format}}\n          {% else %}\n            {{entry[0].name}}{% endif %}{% endif %}</a></div>\n      </div>\n    {% endfor %}\n    </div>\n  </div>\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/filter_list.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"well col-sm-6 col-sm-offset-2\">\n  <h2 style=\"margin-top: 0\">{{_('Login')}}</h2>\n  <form method=\"POST\" role=\"form\">\n    <input type=\"hidden\" name=\"next\" value=\"{{next_url}}\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"form-group\">\n      <label for=\"username\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" placeholder=\"{{_('Username')}}\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">{{_('Password')}}</label>\n      <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"{{_('Password')}}\">\n    </div>\n    <div class=\"checkbox\">\n      <label>\n        <input type=\"checkbox\" name=\"remember_me\" checked> {{_('Remember Me')}}\n      </label>\n    </div>\n    <button type=\"submit\" name=\"submit\" class=\"btn btn-default\">{{_('Login')}}</button>\n    {% if config.config_login_type == 0 and mail%}\n    <button type=\"submit\" name=\"forgot\" value=\"forgot\" class=\"btn btn-default\">{{_('Forgot Password?')}}</button>\n    {% endif %}\n    {% if config.config_remote_login %}\n    <a href=\"{{url_for('remotelogin.remote_login')}}\" id=\"remote_login\" class=\"pull-right\">{{_('Log in with Magic Link')}}</a>\n    {% endif %}\n    {% if config.config_login_type == 2 %}\n      {% if 1 in oauth_check %}\n        <a href=\"{{url_for('oauth.github_login')}}\" class=\"pull-right github\">\n          <svg height=\"32\" class=\"octicon octicon-mark-github\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n          </svg>\n        </a>\n      {% endif %}\n      {% if 2 in oauth_check %}\n        <a href=\"{{url_for('oauth.google_login')}}\" class=\"pull-right google\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n         width=\"40\" height=\"40\"\n         viewBox=\"0 3 48 49\"\n         style=\"fill:#000000;\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 33.652344 32.65625 29.222656 36 24 36 C 17.371094 36 12 30.628906 12 24 C 12 17.371094 17.371094 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 12.953125 4 4 12.953125 4 24 C 4 35.046875 12.953125 44 24 44 C 35.046875 44 44 35.046875 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path><path style=\" fill:#FF3D00;\" d=\"M 6.304688 14.691406 L 12.878906 19.511719 C 14.65625 15.109375 18.960938 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 16.316406 4 9.65625 8.335938 6.304688 14.691406 Z \"></path><path style=\" fill:#4CAF50;\" d=\"M 24 44 C 29.164063 44 33.859375 42.023438 37.410156 38.808594 L 31.21875 33.570313 C 29.210938 35.089844 26.714844 36 24 36 C 18.796875 36 14.382813 32.683594 12.71875 28.054688 L 6.195313 33.078125 C 9.503906 39.554688 16.226563 44 24 44 Z \"></path><path style=\" fill:#1976D2;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 34.511719 30.238281 33.070313 32.164063 31.214844 33.570313 C 31.21875 33.570313 31.21875 33.570313 31.21875 33.570313 L 37.410156 38.808594 C 36.972656 39.203125 44 34 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path></g></svg>\n        </a>\n      {% endif %}\n    {% endif %}\n  </form>\n</div>\n  {% if error %}\n  <div class=\"col-sm-6 col-sm-offset-2\">\n    <div class=\"alert alert-danger\">{{error}}</div>\n  </div>\n  {% endif %}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"well col-sm-6 col-sm-offset-2\">\n  <h2 style=\"margin-top: 0\">{{_('Register New Account')}}</h2>\n  <form method=\"POST\" role=\"form\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    {% if not config.config_register_email %}\n    <div class=\"form-group required\">\n      <label for=\"name\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"{{_('Choose a username')}}\" required>\n    </div>\n    {% endif %}\n    <div class=\"form-group required\">\n      <label for=\"email\">{{_('E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"{{_('Your email address')}}\" required>\n    </div>\n    <button type=\"submit\" id=\"submit\" class=\"btn btn-primary\">{{_('Register')}}</button>\n    {% if config.config_use_github_oauth %}\n    <a href=\"{{url_for('oauth.github_login')}}\" class=\"pull-right\">\n        <svg height=\"32\" class=\"octicon octicon-mark-github\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\">\n            <path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n        </svg>\n    </a>\n    {% endif %}\n    {% if config.config_use_google_oauth %}\n    <a href=\"{{url_for('oauth.google_login')}}\" class=\"pull-right\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n     width=\"40\" height=\"40\"\n     viewBox=\"0 3 48 49\"\n     style=\"fill:#000000;\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 33.652344 32.65625 29.222656 36 24 36 C 17.371094 36 12 30.628906 12 24 C 12 17.371094 17.371094 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 12.953125 4 4 12.953125 4 24 C 4 35.046875 12.953125 44 24 44 C 35.046875 44 44 35.046875 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path><path style=\" fill:#FF3D00;\" d=\"M 6.304688 14.691406 L 12.878906 19.511719 C 14.65625 15.109375 18.960938 12 24 12 C 27.058594 12 29.84375 13.152344 31.960938 15.039063 L 37.617188 9.382813 C 34.046875 6.054688 29.269531 4 24 4 C 16.316406 4 9.65625 8.335938 6.304688 14.691406 Z \"></path><path style=\" fill:#4CAF50;\" d=\"M 24 44 C 29.164063 44 33.859375 42.023438 37.410156 38.808594 L 31.21875 33.570313 C 29.210938 35.089844 26.714844 36 24 36 C 18.796875 36 14.382813 32.683594 12.71875 28.054688 L 6.195313 33.078125 C 9.503906 39.554688 16.226563 44 24 44 Z \"></path><path style=\" fill:#1976D2;\" d=\"M 43.609375 20.082031 L 42 20.082031 L 42 20 L 24 20 L 24 28 L 35.304688 28 C 34.511719 30.238281 33.070313 32.164063 31.214844 33.570313 C 31.21875 33.570313 31.21875 33.570313 31.21875 33.570313 L 37.410156 38.808594 C 36.972656 39.203125 44 34 44 24 C 44 22.660156 43.863281 21.351563 43.609375 20.082031 Z \"></path></g></svg>\n    </a>\n    {% endif %}\n  </form>\n</div>\n  {% if error %}\n  <div class=\"col-sm-6 col-sm-offset-2\">\n    <div class=\"alert alert-danger\">{{error}}</div>\n  </div>\n  {% endif %}\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<h1 class=\"{{page}}\">{{title}}</h1>\n<div class=\"col-md-10 col-lg-6\">\n  <form role=\"form\" id=\"search\" action=\"{{ url_for('web.advanced_search_form') }}\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"form-group\">\n      <label for=\"book_title\">{{_('Book Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"book_title\" id=\"book_title\" value=\"\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"bookAuthor\">{{_('Author')}}</label>\n      <input type=\"text\" class=\"form-control typeahead\" name=\"author_name\" id=\"bookAuthor\" value=\"\" autocomplete=\"off\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"Publisher\">{{_('Publisher')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"publisher\" id=\"publisher\" value=\"\">\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <label for=\"publishstart\">{{_('Published Date From')}}</label>\n        <div class=\"input-group\">\n          <input type=\"text\" class=\"datepicker form-control\" name=\"publish_start\" id=\"publishstart\" value=\"\">\n          <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_publishstart\" value=\"\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"publishstart_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n          </span>\n        </div>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <label for=\"publishend\">{{_('Published Date To')}}</label>\n        <div class=\"input-group \">\n          <input type=\"text\" class=\"datepicker form-control\" name=\"publishend\" id=\"publishend\" value=\"\">\n          <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_publishend\" value=\"\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" id=\"publishend_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n          </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"read_status\">{{_('Read Status')}}</label>\n      <select name=\"read_status\" id=\"read_status\" class=\"form-control\">\n        <option value=\"\" selected></option>\n        <option value=\"True\" >{{_('Yes')}}</option>\n        <option value=\"False\" >{{_('No')}}</option>\n      </select>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\" id=\"tag\">\n        <div><label for=\"include_tag\">{{_('Tags')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_tag\" id=\"include_tag\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" multiple>\n          {% for tag in tags %}\n          <option class=\"tags_click\" value=\"{{tag.id}}\">{{tag.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_tag\">{{_('Exclude Tags')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_tag\" id=\"exclude_tag\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" multiple>\n          {% for tag in tags %}\n          <option  class=\"tags_click\" value=\"{{tag.id}}\">{{tag.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_serie\">{{_('Series')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_serie\" id=\"include_serie\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for serie in series %}\n          <option value=\"{{serie.id}}\">{{serie.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_serie\">{{_('Exclude Series')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_serie\" id=\"exclude_serie\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for serie in series %}\n          <option value=\"{{serie.id}}\">{{serie.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n     <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_shelf\">{{_('Shelves')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_shelf\" id=\"include_shelf\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for shelf in shelves %}\n          <option value=\"{{shelf.id}}\">{{shelf.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_shelf\">{{_('Exclude Shelves')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_shelf\" id=\"exclude_shelf\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for shelf in shelves %}\n          <option value=\"{{shelf.id}}\">{{shelf.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n\n    {% if languages %}\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_language\">{{_('Languages')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_language\" id=\"include_language\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for language in languages %}\n          <option value=\"{{language.id}}\">{{language.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_language\">{{_('Exclude Languages')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_language\" id=\"exclude_language\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for language in languages %}\n          <option value=\"{{language.id}}\">{{language.name}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    {% endif%}\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"include_extension\">{{_('Extensions')}}</label></div>\n        <select class=\"selectpicker\" name=\"include_extension\" id=\"include_extension\" data-live-search=\"true\" data-style=\"btn-primary\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for extension in extensions %}\n          <option value=\"{{extension.format}}\">{{extension.format}}</option>\n          {% endfor %}\n        </select>\n      </div>\n      <div class=\"form-group col-sm-6\">\n        <div><label for=\"exclude_extension\">{{_('Exclude Extensions')}}</label></div>\n        <select class=\"selectpicker\" name=\"exclude_extension\" id=\"exclude_extension\" data-live-search=\"true\" data-style=\"btn-danger\" data-dropup-auto=\"false\" data-actions-box=\"true\" multiple>\n          {% for extension in extensions %}\n          <option value=\"{{extension.format}}\">{{extension.format}}</option>\n          {% endfor %}\n        </select>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"form-group col-sm-6\">\n        <label for=\"ratinghigh\">{{_('Rating Above')}}</label>\n        <input type=\"number\"  name=\"ratinghigh\" id=\"ratinghigh\" class=\"rating input-lg\" data-clearable=\"\" >\n      </div>\n        <div class=\"form-group col-sm-6\">\n          <label for=\"ratinglow\">{{_('Rating Below')}}</label>\n          <input type=\"number\"  name=\"ratinglow\" id=\"ratinglow\" class=\"rating input-lg\" data-clearable=\"\" >\n        </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"comment\">{{_('Description')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"comment\" id=\"comment\" value=\"\">\n    </div>\n\n    {% if cc|length > 0 %}\n    {% for c in cc %}\n    <div class=\"form-group\">\n      <label for=\"{{ 'custom_column_' ~ c.id }}\">{{ c.name }}</label>\n      {% if c.datatype == 'bool' %}\n      <select name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" class=\"form-control\">\n        <option value=\"\" selected></option>\n        <option value=\"True\" >{{_('Yes')}}</option>\n        <option value=\"False\" >{{_('No')}}</option>\n      </select>\n      {% endif %}\n\n      {% if c.datatype == 'int' %}\n      <input type=\"number\" step=\"1\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'float' %}\n      <input type=\"number\" step=\"0.01\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'datetime' %}\n      <div class=\"row\">\n        <div class=\"form-group col-sm-6\">\n          <label for=\"{{ 'custom_column_' ~ c.id }}\">{{_('From:')}}</label>\n          <div class=\"input-group\">\n            <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}_start\" id=\"{{ 'custom_column_' ~ c.id }}_start\" value=\"\">\n            <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_{{ 'custom_column_' ~ c.id }}_start\" value=\"\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_start_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n            </span>\n          </div>\n        </div>\n        <div class=\"form-group col-sm-6\">\n          <label for=\"{{ 'custom_column_' ~ c.id }}\">{{_('To:')}}</label>\n          <div class=\"input-group \">\n            <input type=\"text\" class=\"datepicker form-control\" name=\"{{ 'custom_column_' ~ c.id }}_end\" id=\"{{ 'custom_column_' ~ c.id }}_end\" value=\"\">\n            <input type=\"text\" class=\"form-control fake-input hidden\" id=\"fake_{{ 'custom_column_' ~ c.id }}_end\" value=\"\">\n            <span class=\"input-group-btn\">\n              <button type=\"button\" id=\"{{ 'custom_column_' ~ c.id }}_end_delete\" class=\"datepicker_delete btn btn-default\"><span class=\"glyphicon glyphicon-remove-circle\"></span></button>\n            </span>\n          </div>\n        </div>\n      </div>\n      {% endif %}\n\n      {% if c.datatype in ['text', 'series', 'comments'] and not c.is_multiple %}\n      <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype in ['text', 'series'] and c.is_multiple %}\n      <input type=\"text\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\" value=\"\">\n      {% endif %}\n\n      {% if c.datatype == 'enumeration' %}\n      <select class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n        <option></option>\n        {% for opt in c.get_display_dict().enum_values %}\n        <option>{{ opt }}</option>\n        {% endfor %}\n      </select>\n      {% endif %}\n\n      {% if c.datatype == 'rating' %}\n      <input type=\"number\" min=\"1\" max=\"5\" step=\"0.5\" class=\"form-control\" name=\"{{ 'custom_column_' ~ c.id }}\" id=\"{{ 'custom_column_' ~ c.id }}\">\n      {% endif %}\n    </div>\n    {% endfor %}\n    {% endif %}\n\n    <button type=\"submit\" id=\"adv_submit\" class=\"btn btn-default\">{{_('Search')}}</button>\n  </form>\n</div>\n{% endblock %}\n\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/bootstrap-datepicker.min.js') }}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-datepicker/locales/bootstrap-datepicker.' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-rating-input.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/typeahead.bundle.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/edit_books.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select.min.js')}}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select/defaults-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n{% endblock %}\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/typeahead.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-datepicker3.min.css') }}\" rel=\"stylesheet\" media=\"screen\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-select.min.css') }}\" rel=\"stylesheet\" >\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" method=\"POST\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"form-group\">\n      <label for=\"title\">{{_('Title')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"title\" id=\"title\" value=\"{{ shelf.name if shelf.name != None }}\">\n    </div>\n    {% if g.user.role_edit_shelfs() %}\n      <div class=\"checkbox\">\n        <label>\n          <input type=\"checkbox\" name=\"is_public\" {% if shelf.is_public == 1 %}checked{% endif %}> {{_('Share with Everyone')}}\n        </label>\n      </div>\n    {% endif %}\n    {% if kobo_sync_enabled and sync_only_selected_shelves %}\n      <div class=\"checkbox\">\n          <label> <input type=\"checkbox\" name=\"kobo_sync\" {% if shelf.kobo_sync == 1 %}checked{% endif %}>\n              {{ _('Sync this shelf with Kobo device') }}\n          </label>\n      </div>\n    {% endif %}\n    <button type=\"submit\" class=\"btn btn-default\" id=\"submit\">{{_('Save')}}</button>\n    {% if shelf.id != None %}\n      <a href=\"{{ url_for('shelf.show_shelf', shelf_id=shelf.id) }}\" class=\"btn btn-default\">{{_('Cancel')}}</a>\n    {% endif %}\n  </form>\n</div>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% block body %}\n<div class=\"discover\">\n  <h1>{{title}}</h1>\n  <form role=\"form\" method=\"POST\" autocomplete=\"off\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"col-md-10 col-lg-8\">\n    {% if new_user or ( g.user and content.name != \"Guest\" and g.user.role_admin() ) %}\n    <div class=\"form-group required\">\n      <label for=\"name\">{{_('Username')}}</label>\n      <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" value=\"{{ content.name if content.name != None }}\" autocomplete=\"off\">\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <label for=\"email\">{{_('E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" name=\"email\" id=\"email\" value=\"{{ content.email if content.email != None }}\" autocomplete=\"off\">\n    </div>\n    {% if ( g.user and g.user.role_passwd() or g.user.role_admin() ) and not content.role_anonymous() %}\n      {% if g.user and g.user.role_admin() and not new_user and not profile and ( mail_configured and content.email if content.email != None ) %}\n        <a class=\"btn btn-default\" id=\"resend_password\" href=\"{{url_for('admin.reset_user_password', user_id = content.id) }}\">{{_('Reset user Password')}}</a>\n      {% endif %}\n        <div class=\"form-group\">\n          <label for=\"password\">{{_('Password')}}</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" id=\"password\" value=\"\" autocomplete=\"off\">\n        </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <label for=\"kindle_mail\">{{_('Send to Kindle E-mail Address')}}</label>\n      <input type=\"email\" class=\"form-control\" name=\"kindle_mail\" id=\"kindle_mail\" value=\"{{ content.kindle_mail if content.kindle_mail != None }}\">\n    </div>\n    {% if not content.role_anonymous() %}\n    <div class=\"form-group\">\n    <label for=\"locale\">{{_('Language')}}</label>\n        <select name=\"locale\" id=\"locale\" class=\"form-control\">\n            {%  for translation in translations %}\n                <option value=\"{{translation}}\" {% if translation|string == content.locale %}selected{% endif %} {% if new_user == 1 and loop.first %}selected{% endif %}>{{ translation.display_name|capitalize }}</option>\n            {% endfor %}\n        </select>\n    </div>\n    {% endif %}\n\n    <div class=\"form-group\">\n      <label for=\"default_language\">{{_('Language of Books')}}</label>\n        <select name=\"default_language\" id=\"default_language\" class=\"form-control\">\n            <option value=\"all\" {% if new_user == 1 %}selected{% endif %}>{{ _('Show All') }}</option>\n            {%  for language in languages %}\n            <option value=\"{{ language.lang_code }}\" {% if content.default_language == language.lang_code %}selected{% endif %}>{{ language.name }}</option>\n            {% endfor %}\n        </select>\n    </div>\n    {% if registered_oauth.keys()| length > 0 and not new_user and profile %}\n      {% for id, name in registered_oauth.items() %}\n    <div class=\"form-group\">\n      <label>{{ name }} {{_('OAuth Settings')}}</label>\n        {% if id not in oauth_status %}\n        <a href=\"{{ url_for('oauth.'+ name +'_login') }}\" id=\"config_{{ id }}_oauth\" class=\"btn btn-primary\">{{_('Link')}}</a>\n        {% else %}\n        <a href=\"{{ url_for('oauth.'+ name +'_login_unlink') }}\" id=\"config_{{ id }}_oauth\" class=\"btn btn-primary\">{{_('Unlink')}}</a>\n        {% endif %}\n      {% endfor %}\n    </div>\n    {% endif %}\n    {% if kobo_support and not new_user %}\n    <label>{{ _('Kobo Sync Token')}}</label>\n    <div class=\"form-group col\">\n      <a class=\"btn btn-default\" id=\"config_create_kobo_token\" data-toggle=\"modal\" data-target=\"#modal_kobo_token\" data-remote=\"false\" href=\"{{ url_for('kobo_auth.generate_auth_token', user_id=content.id) }}\">{{_('Create/View')}}</a>\n      <div class=\"btn btn-danger\" id=\"config_delete_kobo_token\" data-value=\"{{ content.id }}\" data-remote=\"false\" {% if not content.remote_auth_token.first() %} style=\"display: none;\" {% endif %}>{{_('Delete')}}</div>\n    </div>\n    {% endif %}\n    <div class=\"col-sm-6\">\n    {% for element in sidebar %}\n      {% if element['config_show'] %}\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"show_{{element['visibility']}}\" id=\"show_{{element['visibility']}}\" {% if content.check_visibility(element['visibility']) %}checked{% endif %}>\n          <label for=\"show_{{element['visibility']}}\">{{element['show_text']}}</label>\n        </div>\n      {% endif %}\n    {% endfor %}\n      <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"Show_detail_random\" id=\"Show_detail_random\" {% if content.show_detail_random() %}checked{% endif %}>\n          <label for=\"Show_detail_random\">{{_('Show Random Books in Detail View')}}</label>\n      </div>\n      {% if ( g.user and g.user.role_admin() and not new_user ) %}\n      <a href=\"#\" id=\"get_user_tags\" class=\"btn btn-default\" data-id=\"{{content.id}}\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add Allowed/Denied Tags')}}</a>\n      <a href=\"#\" id=\"get_user_column_values\" data-id=\"{{content.id}}\" class=\"btn btn-default\" data-toggle=\"modal\" data-target=\"#restrictModal\">{{_('Add allowed/Denied Custom Column Values')}}</a>\n      {% endif %}\n    </div>\n      <div class=\"col-sm-6\">\n    {% if g.user and g.user.role_admin() and not profile %}\n    {% if not content.role_anonymous() %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"admin_role\" id=\"admin_role\" {% if content.role_admin() %}checked{% endif %}>\n      <label for=\"admin_role\">{{_('Admin User')}}</label>\n    </div>\n    {% endif %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"download_role\" id=\"download_role\" {% if content.role_download() %}checked{% endif %}>\n      <label for=\"download_role\">{{_('Allow Downloads')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"viewer_role\" id=\"viewer_role\" {% if content.role_viewer() %}checked{% endif %}>\n      <label for=\"viewer_role\">{{_('Allow eBook Viewer')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"upload_role\" id=\"upload_role\" {% if content.role_upload() %}checked{% endif %}>\n      <label for=\"upload_role\">{{_('Allow Uploads')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"edit_role\" id=\"edit_role\" {% if content.role_edit() %}checked{% endif %}>\n      <label for=\"edit_role\">{{_('Allow Edit')}}</label>\n    </div>\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"delete_role\" id=\"delete_role\" {% if content.role_delete_books() %}checked{% endif %}>\n      <label for=\"delete_role\">{{_('Allow Delete Books')}}</label>\n    </div>\n      {% if not content.role_anonymous() %}\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"passwd_role\" id=\"passwd_role\" {% if content.role_passwd() %}checked{% endif %}>\n          <label for=\"passwd_role\">{{_('Allow Changing Password')}}</label>\n        </div>\n        <div class=\"form-group\">\n          <input type=\"checkbox\" name=\"edit_shelf_role\" id=\"edit_shelf_role\" {% if content.role_edit_shelfs() %}checked{% endif %}>\n          <label for=\"edit_shelf_role\">{{_('Allow Editing Public Shelves')}}</label>\n        </div>\n      {% endif %}\n    {% endif %}\n    {% if kobo_support and not content.role_anonymous() %}\n    <div class=\"form-group\">\n      <input type=\"checkbox\" name=\"kobo_only_shelves_sync\" id=\"kobo_only_shelves_sync\" {% if content.kobo_only_shelves_sync %}checked{% endif %}>\n      <label for=\"kobo_only_shelves_sync\">{{_('Sync only books in selected shelves with Kobo')}}</label>\n    </div>\n    {% endif %}\n    </div>\n    <div class=\"col-sm-12\">\n      <div id=\"user_submit\" class=\"btn btn-default\">{{_('Save')}}</div>\n      {% if not profile %}\n        <div class=\"btn btn-default\" data-back=\"{{ url_for('admin.admin') }}\" id=\"back\">{{_('Cancel')}}</div>\n      {% endif %}\n      {% if g.user and g.user.role_admin() and not profile and not new_user and not content.role_anonymous() %}\n        <div class=\"btn btn-danger\" id=\"btndeluser\" data-value=\"{{ content.id }}\" data-remote=\"false\" >{{_('Delete User')}}</div>\n      {% endif %}\n    </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal fade\" id=\"modal_kobo_token\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"kobo_tokenModalLabel\">\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n        <h4 class=\"modal-title\" id=\"kobo_tokenModalLabel\">{{_('Generate Kobo Auth URL')}}</h4>\n      </div>\n      <div class=\"modal-body\">...</div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" id=\"kobo_close\" class=\"btn btn-default\" data-dismiss=\"modal\">{{_('Close')}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n{% endblock %}\n{% block modal %}\n{{ restrict_modal() }}\n{{ delete_confirm_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n", "{% extends \"layout.html\" %}\n{% macro user_table_row(parameter, edit_text, show_text, validate, elements=False) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-escape=\"true\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-editable-type=\"text\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-title=\"{{ edit_text }}\"\n    data-edit=\"true\"\n    {% if not button %}\n    data-sortable=\"true\"\n    {% endif %}\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    {% if elements %}\n        <div class=\"multi_select\">\n            <select class=\"multi_selector\" id=\"{{ parameter }}\" data-live-search=\"true\" data-style=\"btn-default\" data-dropup-auto=\"false\" aria-disabled=\"true\" multiple disabled>\n              {% for tag in elements %}\n              <option class=\"tags_click\" value=\"{{tag.id}}\">{% if tag.name %}{{tag.name}}{% else %}{{tag.value}}{% endif %}</option>\n              {% endfor %}\n            </select>\n            <div class=\"btn-group btn-group-justified\" role=\"group\">\n              <div class=\"btn-group\" role=\"group\">\n                  <div class=\"multi_head btn btn-default hidden\" data-set=\"remove\" data-name=\"{{parameter}}\" aria-disabled=\"true\">{{_('Remove')}}</div>\n              </div>\n              <div class=\"btn-group\" role=\"group\">\n                  <div class=\"multi_head btn btn-default hidden\" data-set=\"add\" data-name=\"{{parameter}}\" aria-disabled=\"true\">{{_('Add')}}</div>\n              </div>\n            </div>\n        </div>\n    {% endif %}\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n{% macro user_single_checkbox_row(parameter, show_text) -%}\n<th data-name=\"{{parameter}}\" data-field=\"{{parameter}}\"\n    data-formatter=\"singlecheckboxFormatter\">\n    <div class=\"form-check\">\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"false\" data-val=\"0\" name=\"{{parameter}}\" id=\"false_{{parameter}}\" data-name=\"{{parameter}}\" disabled>{{_('Deny')}}\n    </div>\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"true\" data-val=\"1\" name=\"{{parameter}}\" data-name=\"{{parameter}}\" disabled>{{_('Allow')}}\n    </div>\n    </div>\n    {{show_text}}\n</th>\n{%- endmacro %}\n\n{% macro user_checkbox_row(parameter, array_field, show_text, element, value) -%}\n<th data-name=\"{{array_field}}\" data-field=\"{{parameter}}\"\n    data-visible=\"{{element.get(array_field)}}\"\n    data-column=\"{{value.get(array_field)}}\"\n    data-formatter=\"checkboxFormatter\">\n    <div  class=\"form-check\">\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"false\" data-val=\"{{value.get(array_field)}}\" name=\"options_{{array_field}}\" id=\"false_{{array_field}}\" data-name=\"{{parameter}}\" disabled>{{_('Deny')}}\n    </div>\n    <div>\n        <input type=\"radio\" class=\"check_head\" data-set=\"true\" data-val=\"{{value.get(array_field)}}\" name=\"options_{{array_field}}\" data-name=\"{{parameter}}\" disabled>{{_('Allow')}}\n    </div>\n    </div>\n    {{show_text}}\n</th>\n{%- endmacro %}\n\n{% macro user_select_languages(parameter, url, show_text, validate) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-edit=\"true\"\n    data-sortable=\"true\"\n    data-editable-type=\"select\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-source=\"{{url}}\"\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    <div>\n      <select id=\"select_{{ parameter }}\" class=\"header_select\" disabled=\"\">\n      <option value=\"none\">{{ _('Select...') }}</option>\n      <option value=\"all\">{{ _('Show All') }}</option>\n      {% for language in languages %}\n        <option value=\"{{language.lang_code}}\">{{language.name}}</option>\n      {% endfor %}\n      </select>\n    </div>\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n{% macro user_select_translations(parameter, url, show_text, validate) -%}\n<th data-field=\"{{ parameter }}\" id=\"{{ parameter }}\"\n    data-name=\"{{ parameter }}\"\n    data-visible=\"{{visiblility.get(parameter)}}\"\n    data-editable-type=\"select\"\n    data-edit=\"true\"\n    data-sortable=\"true\"\n    data-editable-url=\"{{ url_for('admin.edit_list_user', param=parameter)}}\"\n    data-editable-source=\"{{url}}\"\n    {% if validate %}data-edit-validate=\"{{ _('This Field is Required') }}\"{% endif %}>\n    <div>\n      <select id=\"select_{{ parameter }}\" class=\"header_select\" disabled=\"\">\n      <option value=\"None\">{{_('Select...')}}</option>\n      {% for translation in translations %}\n        <option value=\"{{translation}}\">{{translation.display_name|capitalize}}</option>\n      {% endfor %}\n    </select>\n    </div>\n    {{ show_text }}\n</th>\n{%- endmacro %}\n\n\n{% block header %}\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-table.min.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-editable.css') }}\" rel=\"stylesheet\">\n<link href=\"{{ url_for('static', filename='css/libs/bootstrap-select.min.css') }}\" rel=\"stylesheet\" >\n{% endblock %}\n{% block body %}\n<h2 class=\"{{page}}\">{{_(title)}}</h2>\n    <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\n    <div class=\"col-xs-12 col-sm-12\">\n        <div class=\"row\">\n          <div class=\"btn btn-default disabled\" id=\"user_delete_selection\" aria-disabled=\"true\">{{_('Remove Selections')}}</div>\n        </div>\n    </div>\n    <table id=\"user-table\" class=\"table table-no-bordered table-striped\"\n           data-url=\"{{url_for('admin.list_users')}}\">\n      <thead>\n        <tr>\n            <th data-name=\"edit\" data-buttontext=\"{{_('Edit User')}}\" data-visible=\"{{visiblility.get('edit')}}\" data-formatter=\"singleUserFormatter\">{{_('Edit')}}</th>\n            <th data-name=\"state\" data-field=\"state\" data-checkbox=\"true\" data-visible=\"{{visiblility.get('state')}}\" data-sortable=\"true\"></th>\n            <th data-name=\"id\" data-field=\"id\" id=\"id\" data-visible=\"false\" data-switchable=\"false\"></th>\n            {{ user_table_row('name', _('Enter Username'), _('Username'), true) }}\n            {{ user_table_row('email', _('Enter E-mail Address'), _('E-mail Address'), true) }}\n            {{ user_table_row('kindle_mail', _('Enter Kindle E-mail Address'), _('Kindle E-mail'), false) }}\n            {{ user_select_translations('locale', url_for('admin.table_get_locale'), _('Locale'), true) }}\n            {{ user_select_languages('default_language', url_for('admin.table_get_default_lang'), _('Visible Book Languages'), true) }}\n            {{ user_table_row('allowed_tags', _(\"Edit Allowed Tags\"), _(\"Allowed Tags\"), false, tags) }}\n            {{ user_table_row('denied_tags', _(\"Edit Denied Tags\"), _(\"Denied Tags\"), false, tags) }}\n            {{ user_table_row('allowed_column_value', _(\"Edit Allowed Column Values\"), _(\"Allowed Column Values\"), false, custom_values) }}\n            {{ user_table_row('denied_column_value', _(\"Edit Denied Column Values\"), _(\"Denied Columns Values\"), false, custom_values) }}\n            {{ user_checkbox_row(\"role\", \"admin_role\", _('Admin'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"passwd_role\", _('Change Password'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"upload_role\",_('Upload'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"download_role\", _('Download'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"viewer_role\", _('View'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"edit_role\", _('Edit'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"delete_role\", _('Delete'), visiblility, all_roles)}}\n            {{ user_checkbox_row(\"role\", \"edit_shelf_role\", _('Edit Public Shelves'), visiblility, all_roles)}}\n            {%  if kobo_support %}\n            {{ user_single_checkbox_row(\"kobo_only_shelves_sync\", _('Sync selected Shelves with Kobo'))}}\n            {%  endif %}\n            {{ user_checkbox_row(\"sidebar_view\", \"detail_random\", _('Show Random Books in Detail View'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_language\", _('Show language selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_read_and_unread\", _('Show read/unread selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_series\", _('Show series selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_category\", _('Show category selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_random\", _('Show random books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_author\", _('Show author selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_best_rated\", _('Show Top Rated Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_read_and_unread\", _('Show Random Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_publisher\", _('Show publisher selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_rating\", _('Show ratings selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_format\", _('Show file formats selection'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_archived\", _('Show archived books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_download\", _('Show Downloaded Books'), visiblility, sidebar_settings)}}\n            {{ user_checkbox_row(\"sidebar_view\", \"sidebar_list\", _('Show Books List'), visiblility, sidebar_settings)}}\n            <th data-align=\"right\" data-formatter=\"UserActions\" data-switchable=\"false\"><div><div class=\"btn btn-default button_head disabled\" aria-disabled=\"true\">{{_('Delete User')}}</div></div><br>{{_('Delete User')}}</th>\n        </tr>\n      </thead>\n    </table>\n    <div class=\"errorlink\">\n      <div class=\"btn btn-default\" data-back=\"{{ url_for('admin.admin') }}\" id=\"back\">{{_('Back')}}</div>\n    </div>\n{% endblock %}\n{% block modal %}\n{{ delete_confirm_modal() }}\n{{ change_confirm_modal() }}\n{{ restrict_modal() }}\n{% endblock %}\n{% block js %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-table-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-table/bootstrap-editable.min.js') }}\"></script>\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select.min.js')}}\"></script>\n{% if not g.user.locale == 'en' %}\n<script src=\"{{ url_for('static', filename='js/libs/bootstrap-select/defaults-' + g.user.locale + '.min.js') }}\" charset=\"UTF-8\"></script>\n{% endif %}\n<script src=\"{{ url_for('static', filename='js/table.js') }}\"></script>\n{% endblock %}\n\n", "# -*- coding: utf-8 -*-\n\n#  This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)\n#    Copyright (C) 2018-2019 OzzieIsaacs, cervinko, jkrehm, bodybybuddha, ok11,\n#                            andy29485, idalin, Kyosfonica, wuqi, Kennyl, lemmsh,\n#                            falgh1, grunjol, csitko, ytils, xybydy, trasba, vrabe,\n#                            ruben-herold, marblepebble, JackED42, SiphonSquirrel,\n#                            apetresc, nanu-c, mutschler\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import division, print_function, unicode_literals\nimport os\nfrom datetime import datetime\nimport json\nimport mimetypes\nimport chardet  # dependency of requests\nimport copy\n\nfrom babel.dates import format_date\nfrom babel import Locale as LC\nfrom babel.core import UnknownLocaleError\nfrom flask import Blueprint, jsonify\nfrom flask import request, redirect, send_from_directory, make_response, flash, abort, url_for\nfrom flask import session as flask_session\nfrom flask_babel import gettext as _\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom sqlalchemy.exc import IntegrityError, InvalidRequestError, OperationalError\nfrom sqlalchemy.sql.expression import text, func, false, not_, and_, or_\nfrom sqlalchemy.orm.attributes import flag_modified\nfrom sqlalchemy.sql.functions import coalesce\n\nfrom .services.worker import WorkerThread\n\nfrom werkzeug.datastructures import Headers\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom . import constants, logger, isoLanguages, services\nfrom . import babel, db, ub, config, get_locale, app\nfrom . import calibre_db\nfrom .gdriveutils import getFileFromEbooksFolder, do_gdrive_download\nfrom .helper import check_valid_domain, render_task_status, check_email, check_username, \\\n    get_cc_columns, get_book_cover, get_download_link, send_mail, generate_random_password, \\\n    send_registration_mail, check_send_to_kindle, check_read_formats, tags_filters, reset_password, valid_email\nfrom .pagination import Pagination\nfrom .redirect import redirect_back\nfrom .usermanagement import login_required_if_no_ano\nfrom .render_template import render_title_template\n\nfeature_support = {\n    'ldap': bool(services.ldap),\n    'goodreads': bool(services.goodreads_support),\n    'kobo': bool(services.kobo)\n}\n\ntry:\n    from .oauth_bb import oauth_check, register_user_with_oauth, logout_oauth_user, get_oauth_status\n    feature_support['oauth'] = True\nexcept ImportError:\n    feature_support['oauth'] = False\n    oauth_check = {}\n\ntry:\n    from functools import wraps\nexcept ImportError:\n    pass  # We're not using Python 3\n\ntry:\n    from natsort import natsorted as sort\nexcept ImportError:\n    sort = sorted  # Just use regular sort then, may cause issues with badly named pages in cbz/cbr files\n\n\n@app.after_request\ndef add_security_headers(resp):\n    resp.headers['Content-Security-Policy'] = \"default-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:\"\n    if request.endpoint == \"editbook.edit_book\":\n        resp.headers['Content-Security-Policy'] += \" *\"\n    resp.headers['X-Content-Type-Options'] = 'nosniff'\n    resp.headers['X-Frame-Options'] = 'SAMEORIGIN'\n    resp.headers['X-XSS-Protection'] = '1; mode=block'\n    resp.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n    return resp\n\nweb = Blueprint('web', __name__)\nlog = logger.create()\n\n\n# ################################### Login logic and rights management ###############################################\n\n\ndef download_required(f):\n    @wraps(f)\n    def inner(*args, **kwargs):\n        if current_user.role_download():\n            return f(*args, **kwargs)\n        abort(403)\n\n    return inner\n\n\ndef viewer_required(f):\n    @wraps(f)\n    def inner(*args, **kwargs):\n        if current_user.role_viewer():\n            return f(*args, **kwargs)\n        abort(403)\n\n    return inner\n\n# ################################### data provider functions #########################################################\n\n\n@web.route(\"/ajax/emailstat\")\n@login_required\ndef get_email_status_json():\n    tasks = WorkerThread.getInstance().tasks\n    return jsonify(render_task_status(tasks))\n\n\n@web.route(\"/ajax/bookmark/<int:book_id>/<book_format>\", methods=['POST'])\n@login_required\ndef bookmark(book_id, book_format):\n    bookmark_key = request.form[\"bookmark\"]\n    ub.session.query(ub.Bookmark).filter(and_(ub.Bookmark.user_id == int(current_user.id),\n                                              ub.Bookmark.book_id == book_id,\n                                              ub.Bookmark.format == book_format)).delete()\n    if not bookmark_key:\n        ub.session_commit()\n        return \"\", 204\n\n    lbookmark = ub.Bookmark(user_id=current_user.id,\n                            book_id=book_id,\n                            format=book_format,\n                            bookmark_key=bookmark_key)\n    ub.session.merge(lbookmark)\n    ub.session_commit(\"Bookmark for user {} in book {} created\".format(current_user.id, book_id))\n    return \"\", 201\n\n\n@web.route(\"/ajax/toggleread/<int:book_id>\", methods=['POST'])\n@login_required\ndef toggle_read(book_id):\n    if not config.config_read_column:\n        book = ub.session.query(ub.ReadBook).filter(and_(ub.ReadBook.user_id == int(current_user.id),\n                                                         ub.ReadBook.book_id == book_id)).first()\n        if book:\n            if book.read_status == ub.ReadBook.STATUS_FINISHED:\n                book.read_status = ub.ReadBook.STATUS_UNREAD\n            else:\n                book.read_status = ub.ReadBook.STATUS_FINISHED\n        else:\n            readBook = ub.ReadBook(user_id=current_user.id, book_id = book_id)\n            readBook.read_status = ub.ReadBook.STATUS_FINISHED\n            book = readBook\n        if not book.kobo_reading_state:\n            kobo_reading_state = ub.KoboReadingState(user_id=current_user.id, book_id=book_id)\n            kobo_reading_state.current_bookmark = ub.KoboBookmark()\n            kobo_reading_state.statistics = ub.KoboStatistics()\n            book.kobo_reading_state = kobo_reading_state\n        ub.session.merge(book)\n        ub.session_commit(\"Book {} readbit toggled\".format(book_id))\n    else:\n        try:\n            calibre_db.update_title_sort(config)\n            book = calibre_db.get_filtered_book(book_id)\n            read_status = getattr(book, 'custom_column_' + str(config.config_read_column))\n            if len(read_status):\n                read_status[0].value = not read_status[0].value\n                calibre_db.session.commit()\n            else:\n                cc_class = db.cc_classes[config.config_read_column]\n                new_cc = cc_class(value=1, book=book_id)\n                calibre_db.session.add(new_cc)\n                calibre_db.session.commit()\n        except (KeyError, AttributeError):\n            log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n            return \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column), 400\n        except (OperationalError, InvalidRequestError) as e:\n            calibre_db.session.rollback()\n            log.error(u\"Read status could not set: %e\", e)\n            return \"Read status could not set: {}\".format(e), 400\n    return \"\"\n\n@web.route(\"/ajax/togglearchived/<int:book_id>\", methods=['POST'])\n@login_required\ndef toggle_archived(book_id):\n    archived_book = ub.session.query(ub.ArchivedBook).filter(and_(ub.ArchivedBook.user_id == int(current_user.id),\n                                                                  ub.ArchivedBook.book_id == book_id)).first()\n    if archived_book:\n        archived_book.is_archived = not archived_book.is_archived\n        archived_book.last_modified = datetime.utcnow()\n    else:\n        archived_book = ub.ArchivedBook(user_id=current_user.id, book_id=book_id)\n        archived_book.is_archived = True\n    ub.session.merge(archived_book)\n    ub.session_commit(\"Book {} archivebit toggled\".format(book_id))\n    return \"\"\n\n\n@web.route(\"/ajax/view\", methods=[\"POST\"])\n@login_required_if_no_ano\ndef update_view():\n    to_save = request.get_json()\n    try:\n        for element in to_save:\n            for param in to_save[element]:\n                current_user.set_view_property(element, param, to_save[element][param])\n    except Exception as ex:\n        log.error(\"Could not save view_settings: %r %r: %e\", request, to_save, ex)\n        return \"Invalid request\", 400\n    return \"1\", 200\n\n\n'''\n@web.route(\"/ajax/getcomic/<int:book_id>/<book_format>/<int:page>\")\n@login_required\ndef get_comic_book(book_id, book_format, page):\n    book = calibre_db.get_book(book_id)\n    if not book:\n        return \"\", 204\n    else:\n        for bookformat in book.data:\n            if bookformat.format.lower() == book_format.lower():\n                cbr_file = os.path.join(config.config_calibre_dir, book.path, bookformat.name) + \".\" + book_format\n                if book_format in (\"cbr\", \"rar\"):\n                    if feature_support['rar'] == True:\n                        rarfile.UNRAR_TOOL = config.config_rarfile_location\n                        try:\n                            rf = rarfile.RarFile(cbr_file)\n                            names = sort(rf.namelist())\n                            extract = lambda page: rf.read(names[page])\n                        except:\n                            # rarfile not valid\n                            log.error('Unrar binary not found, or unable to decompress file %s', cbr_file)\n                            return \"\", 204\n                    else:\n                        log.info('Unrar is not supported please install python rarfile extension')\n                        # no support means return nothing\n                        return \"\", 204\n                elif book_format in (\"cbz\", \"zip\"):\n                    zf = zipfile.ZipFile(cbr_file)\n                    names=sort(zf.namelist())\n                    extract = lambda page: zf.read(names[page])\n                elif book_format in (\"cbt\", \"tar\"):\n                    tf = tarfile.TarFile(cbr_file)\n                    names=sort(tf.getnames())\n                    extract = lambda page: tf.extractfile(names[page]).read()\n                else:\n                    log.error('unsupported comic format')\n                    return \"\", 204\n\n                if sys.version_info.major >= 3:\n                    b64 = codecs.encode(extract(page), 'base64').decode()\n                else:\n                    b64 = extract(page).encode('base64')\n                ext = names[page].rpartition('.')[-1]\n                if ext not in ('png', 'gif', 'jpg', 'jpeg', 'webp'):\n                    ext = 'png'\n                extractedfile=\"data:image/\" + ext + \";base64,\" + b64\n                fileData={\"name\": names[page], \"page\":page, \"last\":len(names)-1, \"content\": extractedfile}\n                return make_response(json.dumps(fileData))\n        return \"\", 204\n'''\n\n\n# ################################### Typeahead ##################################################################\n\n\n@web.route(\"/get_authors_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_authors_json():\n    return calibre_db.get_typeahead(db.Authors, request.args.get('q'), ('|', ','))\n\n\n@web.route(\"/get_publishers_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_publishers_json():\n    return calibre_db.get_typeahead(db.Publishers, request.args.get('q'), ('|', ','))\n\n\n@web.route(\"/get_tags_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_tags_json():\n    return calibre_db.get_typeahead(db.Tags, request.args.get('q'), tag_filter=tags_filters())\n\n\n@web.route(\"/get_series_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_series_json():\n    return calibre_db.get_typeahead(db.Series, request.args.get('q'))\n\n\n@web.route(\"/get_languages_json\", methods=['GET'])\n@login_required_if_no_ano\ndef get_languages_json():\n    query = (request.args.get('q') or '').lower()\n    language_names = isoLanguages.get_language_names(get_locale())\n    entries_start = [s for key, s in language_names.items() if s.lower().startswith(query.lower())]\n    if len(entries_start) < 5:\n        entries = [s for key, s in language_names.items() if query in s.lower()]\n        entries_start.extend(entries[0:(5 - len(entries_start))])\n        entries_start = list(set(entries_start))\n    json_dumps = json.dumps([dict(name=r) for r in entries_start[0:5]])\n    return json_dumps\n\n\n@web.route(\"/get_matching_tags\", methods=['GET'])\n@login_required_if_no_ano\ndef get_matching_tags():\n    tag_dict = {'tags': []}\n    q = calibre_db.session.query(db.Books).filter(calibre_db.common_filters(True))\n    calibre_db.session.connection().connection.connection.create_function(\"lower\", 1, db.lcase)\n    author_input = request.args.get('author_name') or ''\n    title_input = request.args.get('book_title') or ''\n    include_tag_inputs = request.args.getlist('include_tag') or ''\n    exclude_tag_inputs = request.args.getlist('exclude_tag') or ''\n    q = q.filter(db.Books.authors.any(func.lower(db.Authors.name).ilike(\"%\" + author_input + \"%\")),\n                 func.lower(db.Books.title).ilike(\"%\" + title_input + \"%\"))\n    if len(include_tag_inputs) > 0:\n        for tag in include_tag_inputs:\n            q = q.filter(db.Books.tags.any(db.Tags.id == tag))\n    if len(exclude_tag_inputs) > 0:\n        for tag in exclude_tag_inputs:\n            q = q.filter(not_(db.Books.tags.any(db.Tags.id == tag)))\n    for book in q:\n        for tag in book.tags:\n            if tag.id not in tag_dict['tags']:\n                tag_dict['tags'].append(tag.id)\n    json_dumps = json.dumps(tag_dict)\n    return json_dumps\n\n\ndef get_sort_function(sort, data):\n    order = [db.Books.timestamp.desc()]\n    if sort == 'stored':\n        sort = current_user.get_view_property(data, 'stored')\n    else:\n        current_user.set_view_property(data, 'stored', sort)\n    if sort == 'pubnew':\n        order = [db.Books.pubdate.desc()]\n    if sort == 'pubold':\n        order = [db.Books.pubdate]\n    if sort == 'abc':\n        order = [db.Books.sort]\n    if sort == 'zyx':\n        order = [db.Books.sort.desc()]\n    if sort == 'new':\n        order = [db.Books.timestamp.desc()]\n    if sort == 'old':\n        order = [db.Books.timestamp]\n    if sort == 'authaz':\n        order = [db.Books.author_sort.asc(), db.Series.name, db.Books.series_index]\n    if sort == 'authza':\n        order = [db.Books.author_sort.desc(), db.Series.name.desc(), db.Books.series_index.desc()]\n    if sort == 'seriesasc':\n        order = [db.Books.series_index.asc()]\n    if sort == 'seriesdesc':\n        order = [db.Books.series_index.desc()]\n    return order\n\n\ndef render_books_list(data, sort, book_id, page):\n    order = get_sort_function(sort, data)\n    if data == \"rated\":\n        return render_rated_books(page, book_id, order=order)\n    elif data == \"discover\":\n        return render_discover_books(page, book_id)\n    elif data == \"unread\":\n        return render_read_books(page, False, order=order)\n    elif data == \"read\":\n        return render_read_books(page, True, order=order)\n    elif data == \"hot\":\n        return render_hot_books(page)\n    elif data == \"download\":\n        return render_downloaded_books(page, order, book_id)\n    elif data == \"author\":\n        return render_author_books(page, book_id, order)\n    elif data == \"publisher\":\n        return render_publisher_books(page, book_id, order)\n    elif data == \"series\":\n        return render_series_books(page, book_id, order)\n    elif data == \"ratings\":\n        return render_ratings_books(page, book_id, order)\n    elif data == \"formats\":\n        return render_formats_books(page, book_id, order)\n    elif data == \"category\":\n        return render_category_books(page, book_id, order)\n    elif data == \"language\":\n        return render_language_books(page, book_id, order)\n    elif data == \"archived\":\n        return render_archived_books(page, order)\n    elif data == \"search\":\n        term = (request.args.get('query') or '')\n        offset = int(int(config.config_books_per_page) * (page - 1))\n        return render_search_results(term, offset, order, config.config_books_per_page)\n    elif data == \"advsearch\":\n        term = json.loads(flask_session['query'])\n        offset = int(int(config.config_books_per_page) * (page - 1))\n        return render_adv_search_results(term, offset, order, config.config_books_per_page)\n    else:\n        website = data or \"newest\"\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0, db.Books, True, order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=_(u\"Books\"), page=website)\n\n\ndef render_rated_books(page, book_id, order):\n    if current_user.check_visibility(constants.SIDEBAR_BEST_RATED):\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.ratings.any(db.Ratings.rating > 9),\n                                                                order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     id=book_id, title=_(u\"Top Rated Books\"), page=\"rated\")\n    else:\n        abort(404)\n\n\ndef render_discover_books(page, book_id):\n    if current_user.check_visibility(constants.SIDEBAR_RANDOM):\n        entries, __, pagination = calibre_db.fill_indexpage(page, 0, db.Books, True, [func.randomblob(2)])\n        pagination = Pagination(1, config.config_books_per_page, config.config_books_per_page)\n        return render_title_template('discover.html', entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Discover (Random Books)\"), page=\"discover\")\n    else:\n        abort(404)\n\ndef render_hot_books(page):\n    if current_user.check_visibility(constants.SIDEBAR_HOT):\n        if current_user.show_detail_random():\n            random = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                .order_by(func.random()).limit(config.config_random_books)\n        else:\n            random = false()\n        off = int(int(config.config_books_per_page) * (page - 1))\n        all_books = ub.session.query(ub.Downloads, func.count(ub.Downloads.book_id)).order_by(\n            func.count(ub.Downloads.book_id).desc()).group_by(ub.Downloads.book_id)\n        hot_books = all_books.offset(off).limit(config.config_books_per_page)\n        entries = list()\n        for book in hot_books:\n            downloadBook = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).filter(\n                db.Books.id == book.Downloads.book_id).first()\n            if downloadBook:\n                entries.append(downloadBook)\n            else:\n                ub.delete_download(book.Downloads.book_id)\n        numBooks = entries.__len__()\n        pagination = Pagination(page, config.config_books_per_page, numBooks)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=_(u\"Hot Books (Most Downloaded)\"), page=\"hot\")\n    else:\n        abort(404)\n\n\ndef render_downloaded_books(page, order, user_id):\n    if current_user.role_admin():\n        user_id = int(user_id)\n    else:\n        user_id = current_user.id\n    if current_user.check_visibility(constants.SIDEBAR_DOWNLOAD):\n        if current_user.show_detail_random():\n            random = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                .order_by(func.random()).limit(config.config_random_books)\n        else:\n            random = false()\n\n        entries, __, pagination = calibre_db.fill_indexpage(page,\n                                                            0,\n                                                            db.Books,\n                                                            ub.Downloads.user_id == user_id,\n                                                            order,\n                                                            ub.Downloads, db.Books.id == ub.Downloads.book_id)\n        for book in entries:\n            if not calibre_db.session.query(db.Books).filter(calibre_db.common_filters()) \\\n                             .filter(db.Books.id == book.id).first():\n                ub.delete_download(book.id)\n        user = ub.session.query(ub.User).filter(ub.User.id == user_id).first()\n        return render_title_template('index.html',\n                                     random=random,\n                                     entries=entries,\n                                     pagination=pagination,\n                                     id=user_id,\n                                     title=_(u\"Downloaded books by %(user)s\",user=user.name),\n                                     page=\"download\")\n    else:\n        abort(404)\n\n\ndef render_author_books(page, author_id, order):\n    entries, __, pagination = calibre_db.fill_indexpage(page, 0,\n                                                        db.Books,\n                                                        db.Books.authors.any(db.Authors.id == author_id),\n                                                        [order[0], db.Series.name, db.Books.series_index],\n                                                        db.books_series_link,\n                                                        db.Books.id == db.books_series_link.c.book,\n                                                        db.Series)\n    if entries is None or not len(entries):\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),\n              category=\"error\")\n        return redirect(url_for(\"web.index\"))\n    if constants.sqlalchemy_version2:\n        author = calibre_db.session.get(db.Authors, author_id)\n    else:\n        author = calibre_db.session.query(db.Authors).get(author_id)\n    author_name = author.name.replace('|', ',')\n\n    author_info = None\n    other_books = []\n    if services.goodreads_support and config.config_use_goodreads:\n        author_info = services.goodreads_support.get_author_info(author_name)\n        other_books = services.goodreads_support.get_other_books(author_info, entries)\n\n    return render_title_template('author.html', entries=entries, pagination=pagination, id=author_id,\n                                 title=_(u\"Author: %(name)s\", name=author_name), author=author_info,\n                                 other_books=other_books, page=\"author\")\n\n\ndef render_publisher_books(page, book_id, order):\n    publisher = calibre_db.session.query(db.Publishers).filter(db.Publishers.id == book_id).first()\n    if publisher:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.publishers.any(db.Publishers.id == book_id),\n                                                                [db.Series.name, order[0], db.Books.series_index],\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Publisher: %(name)s\", name=publisher.name), page=\"publisher\")\n    else:\n        abort(404)\n\n\ndef render_series_books(page, book_id, order):\n    name = calibre_db.session.query(db.Series).filter(db.Series.id == book_id).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.series.any(db.Series.id == book_id),\n                                                                [order[0]])\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"Series: %(serie)s\", serie=name.name), page=\"series\")\n    else:\n        abort(404)\n\n\ndef render_ratings_books(page, book_id, order):\n    name = calibre_db.session.query(db.Ratings).filter(db.Ratings.id == book_id).first()\n    entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                            db.Books,\n                                                            db.Books.ratings.any(db.Ratings.id == book_id),\n                                                            [order[0]])\n    if name and name.rating <= 10:\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"Rating: %(rating)s stars\", rating=int(name.rating / 2)), page=\"ratings\")\n    else:\n        abort(404)\n\n\ndef render_formats_books(page, book_id, order):\n    name = calibre_db.session.query(db.Data).filter(db.Data.format == book_id.upper()).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.data.any(db.Data.format == book_id.upper()),\n                                                                [order[0]])\n        return render_title_template('index.html', random=random, pagination=pagination, entries=entries, id=book_id,\n                                     title=_(u\"File format: %(format)s\", format=name.format), page=\"formats\")\n    else:\n        abort(404)\n\n\ndef render_category_books(page, book_id, order):\n    name = calibre_db.session.query(db.Tags).filter(db.Tags.id == book_id).first()\n    if name:\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db.Books.tags.any(db.Tags.id == book_id),\n                                                                [order[0], db.Series.name, db.Books.series_index],\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series)\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=book_id,\n                                     title=_(u\"Category: %(name)s\", name=name.name), page=\"category\")\n    else:\n        abort(404)\n\n\ndef render_language_books(page, name, order):\n    try:\n        lang_name = isoLanguages.get_language_name(get_locale(), name)\n    except KeyError:\n        abort(404)\n\n    #try:\n    #    cur_l = LC.parse(name)\n    #    lang_name = cur_l.get_language_name(get_locale())\n    #except UnknownLocaleError:\n    #    try:\n    #        lang_name = _(isoLanguages.get(part3=name).name)\n    #    except KeyError:\n    #        abort(404)\n    entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                            db.Books,\n                                                            db.Books.languages.any(db.Languages.lang_code == name),\n                                                            [order[0]])\n    return render_title_template('index.html', random=random, entries=entries, pagination=pagination, id=name,\n                                 title=_(u\"Language: %(name)s\", name=lang_name), page=\"language\")\n\n\ndef render_read_books(page, are_read, as_xml=False, order=None):\n    order = order or []\n    if not config.config_read_column:\n        if are_read:\n            db_filter = and_(ub.ReadBook.user_id == int(current_user.id),\n                             ub.ReadBook.read_status == ub.ReadBook.STATUS_FINISHED)\n        else:\n            db_filter = coalesce(ub.ReadBook.read_status, 0) != ub.ReadBook.STATUS_FINISHED\n        entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                db.Books,\n                                                                db_filter,\n                                                                order,\n                                                                db.books_series_link,\n                                                                db.Books.id == db.books_series_link.c.book,\n                                                                db.Series,\n                                                                ub.ReadBook, db.Books.id == ub.ReadBook.book_id)\n    else:\n        try:\n            if are_read:\n                db_filter = db.cc_classes[config.config_read_column].value == True\n            else:\n                db_filter = coalesce(db.cc_classes[config.config_read_column].value, False) != True\n            entries, random, pagination = calibre_db.fill_indexpage(page, 0,\n                                                                    db.Books,\n                                                                    db_filter,\n                                                                    order,\n                                                                    db.books_series_link,\n                                                                    db.Books.id == db.books_series_link.c.book,\n                                                                    db.Series,\n                                                                    db.cc_classes[config.config_read_column])\n        except (KeyError, AttributeError):\n            log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n            if not as_xml:\n                flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",\n                        column=config.config_read_column),\n                      category=\"error\")\n                return redirect(url_for(\"web.index\"))\n            # ToDo: Handle error Case for opds\n    if as_xml:\n        return entries, pagination\n    else:\n        if are_read:\n            name = _(u'Read Books') + ' (' + str(pagination.total_count) + ')'\n            pagename = \"read\"\n        else:\n            name = _(u'Unread Books') + ' (' + str(pagination.total_count) + ')'\n            pagename = \"unread\"\n        return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                     title=name, page=pagename)\n\n\ndef render_archived_books(page, order):\n    order = order or []\n    archived_books = (\n        ub.session.query(ub.ArchivedBook)\n        .filter(ub.ArchivedBook.user_id == int(current_user.id))\n        .filter(ub.ArchivedBook.is_archived == True)\n        .all()\n    )\n    archived_book_ids = [archived_book.book_id for archived_book in archived_books]\n\n    archived_filter = db.Books.id.in_(archived_book_ids)\n\n    entries, random, pagination = calibre_db.fill_indexpage_with_archived_books(page, 0,\n                                                                                db.Books,\n                                                                                archived_filter,\n                                                                                order,\n                                                                                allow_show_archived=True)\n\n    name = _(u'Archived Books') + ' (' + str(len(archived_book_ids)) + ')'\n    pagename = \"archived\"\n    return render_title_template('index.html', random=random, entries=entries, pagination=pagination,\n                                 title=name, page=pagename)\n\n\ndef render_prepare_search_form(cc):\n    # prepare data for search-form\n    tags = calibre_db.session.query(db.Tags)\\\n        .join(db.books_tags_link)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(text('books_tags_link.tag'))\\\n        .order_by(db.Tags.name).all()\n    series = calibre_db.session.query(db.Series)\\\n        .join(db.books_series_link)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(text('books_series_link.series'))\\\n        .order_by(db.Series.name)\\\n        .filter(calibre_db.common_filters()).all()\n    shelves = ub.session.query(ub.Shelf)\\\n        .filter(or_(ub.Shelf.is_public == 1, ub.Shelf.user_id == int(current_user.id)))\\\n        .order_by(ub.Shelf.name).all()\n    extensions = calibre_db.session.query(db.Data)\\\n        .join(db.Books)\\\n        .filter(calibre_db.common_filters()) \\\n        .group_by(db.Data.format)\\\n        .order_by(db.Data.format).all()\n    if current_user.filter_language() == u\"all\":\n        languages = calibre_db.speaking_language()\n    else:\n        languages = None\n    return render_title_template('search_form.html', tags=tags, languages=languages, extensions=extensions,\n                                 series=series,shelves=shelves, title=_(u\"Advanced Search\"), cc=cc, page=\"advsearch\")\n\n\ndef render_search_results(term, offset=None, order=None, limit=None):\n    join = db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series\n    entries, result_count, pagination = calibre_db.get_search_results(term, offset, order, limit, *join)\n    return render_title_template('search.html',\n                                 searchterm=term,\n                                 pagination=pagination,\n                                 query=term,\n                                 adv_searchterm=term,\n                                 entries=entries,\n                                 result_count=result_count,\n                                 title=_(u\"Search\"),\n                                 page=\"search\")\n\n\n# ################################### View Books list ##################################################################\n\n\n@web.route(\"/\", defaults={'page': 1})\n@web.route('/page/<int:page>')\n@login_required_if_no_ano\ndef index(page):\n    sort_param = (request.args.get('sort') or 'stored').lower()\n    return render_books_list(\"newest\", sort_param, 1, page)\n\n\n@web.route('/<data>/<sort_param>', defaults={'page': 1, 'book_id': 1})\n@web.route('/<data>/<sort_param>/', defaults={'page': 1, 'book_id': 1})\n@web.route('/<data>/<sort_param>/<book_id>', defaults={'page': 1})\n@web.route('/<data>/<sort_param>/<book_id>/<int:page>')\n@login_required_if_no_ano\ndef books_list(data, sort_param, book_id, page):\n    return render_books_list(data, sort_param, book_id, page)\n\n\n@web.route(\"/table\")\n@login_required\ndef books_table():\n    visibility = current_user.view_settings.get('table', {})\n    return render_title_template('book_table.html', title=_(u\"Books List\"), page=\"book_table\",\n                                 visiblility=visibility)\n\n@web.route(\"/ajax/listbooks\")\n@login_required\ndef list_books():\n    off = int(request.args.get(\"offset\") or 0)\n    limit = int(request.args.get(\"limit\") or config.config_books_per_page)\n    search = request.args.get(\"search\")\n    sort = request.args.get(\"sort\", \"id\")\n    order = request.args.get(\"order\", \"\").lower()\n    state = None\n    join = tuple()\n\n    if sort == \"state\":\n        state = json.loads(request.args.get(\"state\", \"[]\"))\n    elif sort == \"tags\":\n        order = [db.Tags.name.asc()] if order == \"asc\" else [db.Tags.name.desc()]\n        join = db.books_tags_link,db.Books.id == db.books_tags_link.c.book, db.Tags\n    elif sort == \"series\":\n        order = [db.Series.name.asc()] if order == \"asc\" else [db.Series.name.desc()]\n        join = db.books_series_link,db.Books.id == db.books_series_link.c.book, db.Series\n    elif sort == \"publishers\":\n        order = [db.Publishers.name.asc()] if order == \"asc\" else [db.Publishers.name.desc()]\n        join = db.books_publishers_link,db.Books.id == db.books_publishers_link.c.book, db.Publishers\n    elif sort == \"authors\":\n        order = [db.Authors.name.asc(), db.Series.name, db.Books.series_index] if order == \"asc\" \\\n            else [db.Authors.name.desc(), db.Series.name.desc(), db.Books.series_index.desc()]\n        join = db.books_authors_link, db.Books.id == db.books_authors_link.c.book, db.Authors, \\\n               db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series\n    elif sort == \"languages\":\n        order = [db.Languages.lang_code.asc()] if order == \"asc\" else [db.Languages.lang_code.desc()]\n        join = db.books_languages_link, db.Books.id == db.books_languages_link.c.book, db.Languages\n    elif order and sort in [\"sort\", \"title\", \"authors_sort\", \"series_index\"]:\n        order = [text(sort + \" \" + order)]\n    elif not state:\n        order = [db.Books.timestamp.desc()]\n\n    total_count = filtered_count = calibre_db.session.query(db.Books).count()\n\n    if state:\n        if search:\n            books = calibre_db.search_query(search).all()\n            filtered_count = len(books)\n        else:\n            books = calibre_db.session.query(db.Books).filter(calibre_db.common_filters()).all()\n        entries = calibre_db.get_checkbox_sorted(books, state, off, limit, order)\n    elif search:\n        entries, filtered_count, __ = calibre_db.get_search_results(search, off, order, limit, *join)\n    else:\n        entries, __, __ = calibre_db.fill_indexpage((int(off) / (int(limit)) + 1), limit, db.Books, True, order, *join)\n\n    for entry in entries:\n        for index in range(0, len(entry.languages)):\n            entry.languages[index].language_name = isoLanguages.get_language_name(get_locale(), entry.languages[\n                index].lang_code)\n            #try:\n            #    entry.languages[index].language_name = LC.parse(entry.languages[index].lang_code)\\\n            #        .get_language_name(get_locale())\n            #except UnknownLocaleError:\n            #    entry.languages[index].language_name = _(\n            #        isoLanguages.get(part3=entry.languages[index].lang_code).name)\n    table_entries = {'totalNotFiltered': total_count, 'total': filtered_count, \"rows\": entries}\n    js_list = json.dumps(table_entries, cls=db.AlchemyEncoder)\n\n    response = make_response(js_list)\n    response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\"\n    return response\n\n@web.route(\"/ajax/table_settings\", methods=['POST'])\n@login_required\ndef update_table_settings():\n    # vals = request.get_json()\n    # ToDo: Save table settings\n    current_user.view_settings['table'] = json.loads(request.data)\n    try:\n        try:\n            flag_modified(current_user, \"view_settings\")\n        except AttributeError:\n            pass\n        ub.session.commit()\n    except (InvalidRequestError, OperationalError):\n        log.error(\"Invalid request received: %r \", request, )\n        return \"Invalid request\", 400\n    return \"\"\n\n\n@web.route(\"/author\")\n@login_required_if_no_ano\ndef author_list():\n    if current_user.check_visibility(constants.SIDEBAR_AUTHOR):\n        if current_user.get_view_property('author', 'dir') == 'desc':\n            order = db.Authors.sort.desc()\n            order_no = 0\n        else:\n            order = db.Authors.sort.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Authors, func.count('books_authors_link.book').label('count')) \\\n            .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_authors_link.author')).order_by(order).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Authors.sort, 1, 1)).label('char')) \\\n            .join(db.books_authors_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Authors.sort, 1, 1))).all()\n        # If not creating a copy, readonly databases can not display authornames with \"|\" in it as changing the name\n        # starts a change session\n        autor_copy = copy.deepcopy(entries)\n        for entry in autor_copy:\n            entry.Authors.name = entry.Authors.name.replace('|', ',')\n        return render_title_template('list.html', entries=autor_copy, folder='web.books_list', charlist=charlist,\n                                     title=u\"Authors\", page=\"authorlist\", data='author', order=order_no)\n    else:\n        abort(404)\n\n@web.route(\"/downloadlist\")\n@login_required_if_no_ano\ndef download_list():\n    if current_user.get_view_property('download', 'dir') == 'desc':\n        order = ub.User.name.desc()\n        order_no = 0\n    else:\n        order = ub.User.name.asc()\n        order_no = 1\n    if current_user.check_visibility(constants.SIDEBAR_DOWNLOAD) and current_user.role_admin():\n        entries = ub.session.query(ub.User, func.count(ub.Downloads.book_id).label('count'))\\\n            .join(ub.Downloads).group_by(ub.Downloads.user_id).order_by(order).all()\n        charlist = ub.session.query(func.upper(func.substr(ub.User.name, 1, 1)).label('char')) \\\n            .filter(ub.User.role.op('&')(constants.ROLE_ANONYMOUS) != constants.ROLE_ANONYMOUS) \\\n            .group_by(func.upper(func.substr(ub.User.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Downloads\"), page=\"downloadlist\", data=\"download\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/publisher\")\n@login_required_if_no_ano\ndef publisher_list():\n    if current_user.get_view_property('publisher', 'dir') == 'desc':\n        order = db.Publishers.name.desc()\n        order_no = 0\n    else:\n        order = db.Publishers.name.asc()\n        order_no = 1\n    if current_user.check_visibility(constants.SIDEBAR_PUBLISHER):\n        entries = calibre_db.session.query(db.Publishers, func.count('books_publishers_link.book').label('count')) \\\n            .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_publishers_link.publisher')).order_by(order).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Publishers.name, 1, 1)).label('char')) \\\n            .join(db.books_publishers_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Publishers.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Publishers\"), page=\"publisherlist\", data=\"publisher\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/series\")\n@login_required_if_no_ano\ndef series_list():\n    if current_user.check_visibility(constants.SIDEBAR_SERIES):\n        if current_user.get_view_property('series', 'dir') == 'desc':\n            order = db.Series.sort.desc()\n            order_no = 0\n        else:\n            order = db.Series.sort.asc()\n            order_no = 1\n        if current_user.get_view_property('series', 'series_view') == 'list':\n            entries = calibre_db.session.query(db.Series, func.count('books_series_link.book').label('count')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(text('books_series_link.series')).order_by(order).all()\n            charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()\n            return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                         title=_(u\"Series\"), page=\"serieslist\", data=\"series\")\n        else:\n            entries = calibre_db.session.query(db.Books, func.count('books_series_link').label('count')) \\\n                .join(db.books_series_link).join(db.Series).filter(calibre_db.common_filters()) \\\n                .group_by(text('books_series_link.series')).order_by(order).all()\n            charlist = calibre_db.session.query(func.upper(func.substr(db.Series.sort, 1, 1)).label('char')) \\\n                .join(db.books_series_link).join(db.Books).filter(calibre_db.common_filters()) \\\n                .group_by(func.upper(func.substr(db.Series.sort, 1, 1))).all()\n\n            return render_title_template('grid.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                         title=_(u\"Series\"), page=\"serieslist\", data=\"series\", bodyClass=\"grid-view\",\n                                         order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/ratings\")\n@login_required_if_no_ano\ndef ratings_list():\n    if current_user.check_visibility(constants.SIDEBAR_RATING):\n        if current_user.get_view_property('ratings', 'dir') == 'desc':\n            order = db.Ratings.rating.desc()\n            order_no = 0\n        else:\n            order = db.Ratings.rating.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Ratings, func.count('books_ratings_link.book').label('count'),\n                                   (db.Ratings.rating / 2).label('name')) \\\n            .join(db.books_ratings_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_ratings_link.rating')).order_by(order).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=list(),\n                                     title=_(u\"Ratings list\"), page=\"ratingslist\", data=\"ratings\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/formats\")\n@login_required_if_no_ano\ndef formats_list():\n    if current_user.check_visibility(constants.SIDEBAR_FORMAT):\n        if current_user.get_view_property('ratings', 'dir') == 'desc':\n            order = db.Data.format.desc()\n            order_no = 0\n        else:\n            order = db.Data.format.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Data,\n                                           func.count('data.book').label('count'),\n                                           db.Data.format.label('format')) \\\n            .join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(db.Data.format).order_by(order).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=list(),\n                                     title=_(u\"File formats list\"), page=\"formatslist\", data=\"formats\", order=order_no)\n    else:\n        abort(404)\n\n\n@web.route(\"/language\")\n@login_required_if_no_ano\ndef language_overview():\n    if current_user.check_visibility(constants.SIDEBAR_LANGUAGE):\n        charlist = list()\n        if current_user.filter_language() == u\"all\":\n            languages = calibre_db.speaking_language()\n            # ToDo: generate first character list for languages\n        else:\n            #try:\n            #    cur_l = LC.parse(current_user.filter_language())\n            #except UnknownLocaleError:\n            #    cur_l = None\n\n            languages = calibre_db.session.query(db.Languages).filter(\n                db.Languages.lang_code == current_user.filter_language()).all()\n            languages[0].name = isoLanguages.get_language_name(get_locale(), languages[0].name.lang_code)\n            #if cur_l:\n            #    languages[0].name = cur_l.get_language_name(get_locale())\n            #else:\n            #    languages[0].name = _(isoLanguages.get(part3=languages[0].lang_code).name)\n        lang_counter = calibre_db.session.query(db.books_languages_link,\n                                        func.count('books_languages_link.book').label('bookcount')).group_by(\n            text('books_languages_link.lang_code')).all()\n        return render_title_template('languages.html', languages=languages, lang_counter=lang_counter,\n                                     charlist=charlist, title=_(u\"Languages\"), page=\"langlist\",\n                                     data=\"language\")\n    else:\n        abort(404)\n\n\n@web.route(\"/category\")\n@login_required_if_no_ano\ndef category_list():\n    if current_user.check_visibility(constants.SIDEBAR_CATEGORY):\n        if current_user.get_view_property('category', 'dir') == 'desc':\n            order = db.Tags.name.desc()\n            order_no = 0\n        else:\n            order = db.Tags.name.asc()\n            order_no = 1\n        entries = calibre_db.session.query(db.Tags, func.count('books_tags_link.book').label('count')) \\\n            .join(db.books_tags_link).join(db.Books).order_by(order).filter(calibre_db.common_filters()) \\\n            .group_by(text('books_tags_link.tag')).all()\n        charlist = calibre_db.session.query(func.upper(func.substr(db.Tags.name, 1, 1)).label('char')) \\\n            .join(db.books_tags_link).join(db.Books).filter(calibre_db.common_filters()) \\\n            .group_by(func.upper(func.substr(db.Tags.name, 1, 1))).all()\n        return render_title_template('list.html', entries=entries, folder='web.books_list', charlist=charlist,\n                                     title=_(u\"Categories\"), page=\"catlist\", data=\"category\", order=order_no)\n    else:\n        abort(404)\n\n\n# ################################### Task functions ################################################################\n\n\n@web.route(\"/tasks\")\n@login_required\ndef get_tasks_status():\n    # if current user admin, show all email, otherwise only own emails\n    tasks = WorkerThread.getInstance().tasks\n    answer = render_task_status(tasks)\n    return render_title_template('tasks.html', entries=answer, title=_(u\"Tasks\"), page=\"tasks\")\n\n\n@app.route(\"/reconnect\")\ndef reconnect():\n    calibre_db.reconnect_db(config, ub.app_DB_path)\n    return json.dumps({})\n\n\n# ################################### Search functions ################################################################\n\n@web.route(\"/search\", methods=[\"GET\"])\n@login_required_if_no_ano\ndef search():\n    term = request.args.get(\"query\")\n    if term:\n        return redirect(url_for('web.books_list', data=\"search\", sort_param='stored', query=term))\n    else:\n        return render_title_template('search.html',\n                                     searchterm=\"\",\n                                     result_count=0,\n                                     title=_(u\"Search\"),\n                                     page=\"search\")\n\n\n@web.route(\"/advsearch\", methods=['POST'])\n@login_required_if_no_ano\ndef advanced_search():\n    values = dict(request.form)\n    params = ['include_tag', 'exclude_tag', 'include_serie', 'exclude_serie', 'include_shelf', 'exclude_shelf',\n              'include_language', 'exclude_language', 'include_extension', 'exclude_extension']\n    for param in params:\n        values[param] = list(request.form.getlist(param))\n    flask_session['query'] = json.dumps(values)\n    return redirect(url_for('web.books_list', data=\"advsearch\", sort_param='stored', query=\"\"))\n\n\ndef adv_search_custom_columns(cc, term, q):\n    for c in cc:\n        if c.datatype == \"datetime\":\n            custom_start = term.get('custom_column_' + str(c.id) + '_start')\n            custom_end = term.get('custom_column_' + str(c.id) + '_end')\n            if custom_start:\n                q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                    func.datetime(db.cc_classes[c.id].value) >= func.datetime(custom_start)))\n            if custom_end:\n                q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                    func.datetime(db.cc_classes[c.id].value) <= func.datetime(custom_end)))\n        else:\n            custom_query = term.get('custom_column_' + str(c.id))\n            if custom_query != '' and custom_query is not None:\n                if c.datatype == 'bool':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == (custom_query == \"True\")))\n                elif c.datatype == 'int' or c.datatype == 'float':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == custom_query))\n                elif c.datatype == 'rating':\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        db.cc_classes[c.id].value == int(float(custom_query) * 2)))\n                else:\n                    q = q.filter(getattr(db.Books, 'custom_column_' + str(c.id)).any(\n                        func.lower(db.cc_classes[c.id].value).ilike(\"%\" + custom_query + \"%\")))\n    return q\n\n\ndef adv_search_language(q, include_languages_inputs, exclude_languages_inputs):\n    if current_user.filter_language() != \"all\":\n        q = q.filter(db.Books.languages.any(db.Languages.lang_code == current_user.filter_language()))\n    else:\n        for language in include_languages_inputs:\n            q = q.filter(db.Books.languages.any(db.Languages.id == language))\n        for language in exclude_languages_inputs:\n            q = q.filter(not_(db.Books.series.any(db.Languages.id == language)))\n    return q\n\n\ndef adv_search_ratings(q, rating_high, rating_low):\n    if rating_high:\n        rating_high = int(rating_high) * 2\n        q = q.filter(db.Books.ratings.any(db.Ratings.rating <= rating_high))\n    if rating_low:\n        rating_low = int(rating_low) * 2\n        q = q.filter(db.Books.ratings.any(db.Ratings.rating >= rating_low))\n    return q\n\n\ndef adv_search_read_status(q, read_status):\n    if read_status:\n        if config.config_read_column:\n            try:\n                if read_status == \"True\":\n                    q = q.join(db.cc_classes[config.config_read_column], isouter=True) \\\n                        .filter(db.cc_classes[config.config_read_column].value == True)\n                else:\n                    q = q.join(db.cc_classes[config.config_read_column], isouter=True) \\\n                        .filter(coalesce(db.cc_classes[config.config_read_column].value, False) != True)\n            except (KeyError, AttributeError):\n                log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n                flash(_(\"Custom Column No.%(column)d is not existing in calibre database\",\n                        column=config.config_read_column),\n                      category=\"error\")\n                return q\n        else:\n            if read_status == \"True\":\n                q = q.join(ub.ReadBook, db.Books.id == ub.ReadBook.book_id, isouter=True) \\\n                    .filter(ub.ReadBook.user_id == int(current_user.id),\n                            ub.ReadBook.read_status == ub.ReadBook.STATUS_FINISHED)\n            else:\n                q = q.join(ub.ReadBook, db.Books.id == ub.ReadBook.book_id, isouter=True) \\\n                    .filter(ub.ReadBook.user_id == int(current_user.id),\n                            coalesce(ub.ReadBook.read_status, 0) != ub.ReadBook.STATUS_FINISHED)\n    return q\n\n\ndef adv_search_extension(q, include_extension_inputs, exclude_extension_inputs):\n    for extension in include_extension_inputs:\n        q = q.filter(db.Books.data.any(db.Data.format == extension))\n    for extension in exclude_extension_inputs:\n        q = q.filter(not_(db.Books.data.any(db.Data.format == extension)))\n    return q\n\n\ndef adv_search_tag(q, include_tag_inputs, exclude_tag_inputs):\n    for tag in include_tag_inputs:\n        q = q.filter(db.Books.tags.any(db.Tags.id == tag))\n    for tag in exclude_tag_inputs:\n        q = q.filter(not_(db.Books.tags.any(db.Tags.id == tag)))\n    return q\n\n\ndef adv_search_serie(q, include_series_inputs, exclude_series_inputs):\n    for serie in include_series_inputs:\n        q = q.filter(db.Books.series.any(db.Series.id == serie))\n    for serie in exclude_series_inputs:\n        q = q.filter(not_(db.Books.series.any(db.Series.id == serie)))\n    return q\n\ndef adv_search_shelf(q, include_shelf_inputs, exclude_shelf_inputs):\n    q = q.outerjoin(ub.BookShelf, db.Books.id == ub.BookShelf.book_id)\\\n        .filter(or_(ub.BookShelf.shelf == None, ub.BookShelf.shelf.notin_(exclude_shelf_inputs)))\n    if len(include_shelf_inputs) > 0:\n        q = q.filter(ub.BookShelf.shelf.in_(include_shelf_inputs))\n    return q\n\ndef extend_search_term(searchterm,\n                       author_name,\n                       book_title,\n                       publisher,\n                       pub_start,\n                       pub_end,\n                       tags,\n                       rating_high,\n                       rating_low,\n                       read_status,\n                       ):\n    searchterm.extend((author_name.replace('|', ','), book_title, publisher))\n    if pub_start:\n        try:\n            searchterm.extend([_(u\"Published after \") +\n                               format_date(datetime.strptime(pub_start, \"%Y-%m-%d\"),\n                                           format='medium', locale=get_locale())])\n        except ValueError:\n            pub_start = u\"\"\n    if pub_end:\n        try:\n            searchterm.extend([_(u\"Published before \") +\n                               format_date(datetime.strptime(pub_end, \"%Y-%m-%d\"),\n                                           format='medium', locale=get_locale())])\n        except ValueError:\n            pub_start = u\"\"\n    elements = {'tag': db.Tags, 'serie':db.Series, 'shelf':ub.Shelf}\n    for key, db_element in elements.items():\n        tag_names = calibre_db.session.query(db_element).filter(db_element.id.in_(tags['include_' + key])).all()\n        searchterm.extend(tag.name for tag in tag_names)\n        tag_names = calibre_db.session.query(db_element).filter(db_element.id.in_(tags['exclude_' + key])).all()\n        searchterm.extend(tag.name for tag in tag_names)\n    language_names = calibre_db.session.query(db.Languages). \\\n        filter(db.Languages.id.in_(tags['include_language'])).all()\n    if language_names:\n        language_names = calibre_db.speaking_language(language_names)\n    searchterm.extend(language.name for language in language_names)\n    language_names = calibre_db.session.query(db.Languages). \\\n        filter(db.Languages.id.in_(tags['exclude_language'])).all()\n    if language_names:\n        language_names = calibre_db.speaking_language(language_names)\n    searchterm.extend(language.name for language in language_names)\n    if rating_high:\n        searchterm.extend([_(u\"Rating <= %(rating)s\", rating=rating_high)])\n    if rating_low:\n        searchterm.extend([_(u\"Rating >= %(rating)s\", rating=rating_low)])\n    if read_status:\n        searchterm.extend([_(u\"Read Status = %(status)s\", status=read_status)])\n    searchterm.extend(ext for ext in tags['include_extension'])\n    searchterm.extend(ext for ext in tags['exclude_extension'])\n    # handle custom columns\n    searchterm = \" + \".join(filter(None, searchterm))\n    return searchterm, pub_start, pub_end\n\n\ndef render_adv_search_results(term, offset=None, order=None, limit=None):\n    order = order or [db.Books.sort]\n    pagination = None\n\n    cc = get_cc_columns(filter_config_custom_read=True)\n    calibre_db.session.connection().connection.connection.create_function(\"lower\", 1, db.lcase)\n    q = calibre_db.session.query(db.Books).outerjoin(db.books_series_link, db.Books.id == db.books_series_link.c.book)\\\n        .outerjoin(db.Series)\\\n        .filter(calibre_db.common_filters(True))\n\n    # parse multiselects to a complete dict\n    tags = dict()\n    elements = ['tag', 'serie', 'shelf', 'language', 'extension']\n    for element in elements:\n        tags['include_' + element] = term.get('include_' + element)\n        tags['exclude_' + element] = term.get('exclude_' + element)\n\n    author_name = term.get(\"author_name\")\n    book_title = term.get(\"book_title\")\n    publisher = term.get(\"publisher\")\n    pub_start = term.get(\"publishstart\")\n    pub_end = term.get(\"publishend\")\n    rating_low = term.get(\"ratinghigh\")\n    rating_high = term.get(\"ratinglow\")\n    description = term.get(\"comment\")\n    read_status = term.get(\"read_status\")\n    if author_name:\n        author_name = author_name.strip().lower().replace(',', '|')\n    if book_title:\n        book_title = book_title.strip().lower()\n    if publisher:\n        publisher = publisher.strip().lower()\n\n    searchterm = []\n    cc_present = False\n    for c in cc:\n        if c.datatype == \"datetime\":\n            column_start = term.get('custom_column_' + str(c.id) + '_start')\n            column_end = term.get('custom_column_' + str(c.id) + '_end')\n            if column_start:\n                searchterm.extend([u\"{} >= {}\".format(c.name,\n                                                      format_date(datetime.strptime(column_start, \"%Y-%m-%d\"),\n                                                                      format='medium',\n                                                                      locale=get_locale())\n                                                      )])\n                cc_present = True\n            if column_end:\n                searchterm.extend([u\"{} <= {}\".format(c.name,\n                                                      format_date(datetime.strptime(column_end, \"%Y-%m-%d\").date(),\n                                                                      format='medium',\n                                                                      locale=get_locale())\n                                                      )])\n                cc_present = True\n        elif term.get('custom_column_' + str(c.id)):\n            searchterm.extend([(u\"{}: {}\".format(c.name, term.get('custom_column_' + str(c.id))))])\n            cc_present = True\n\n\n    if any(tags.values()) or author_name or book_title or publisher or pub_start or pub_end or rating_low \\\n       or rating_high or description or cc_present or read_status:\n        searchterm, pub_start, pub_end = extend_search_term(searchterm,\n                                                            author_name,\n                                                            book_title,\n                                                            publisher,\n                                                            pub_start,\n                                                            pub_end,\n                                                            tags,\n                                                            rating_high,\n                                                            rating_low,\n                                                            read_status)\n        q = q.filter()\n        if author_name:\n            q = q.filter(db.Books.authors.any(func.lower(db.Authors.name).ilike(\"%\" + author_name + \"%\")))\n        if book_title:\n            q = q.filter(func.lower(db.Books.title).ilike(\"%\" + book_title + \"%\"))\n        if pub_start:\n            q = q.filter(func.datetime(db.Books.pubdate) > func.datetime(pub_start))\n        if pub_end:\n            q = q.filter(func.datetime(db.Books.pubdate) < func.datetime(pub_end))\n        q = adv_search_read_status(q, read_status)\n        if publisher:\n            q = q.filter(db.Books.publishers.any(func.lower(db.Publishers.name).ilike(\"%\" + publisher + \"%\")))\n        q = adv_search_tag(q, tags['include_tag'], tags['exclude_tag'])\n        q = adv_search_serie(q, tags['include_serie'], tags['exclude_serie'])\n        q = adv_search_shelf(q, tags['include_shelf'], tags['exclude_shelf'])\n        q = adv_search_extension(q, tags['include_extension'], tags['exclude_extension'])\n        q = adv_search_language(q, tags['include_language'], tags['exclude_language'])\n        q = adv_search_ratings(q, rating_high, rating_low)\n\n        if description:\n            q = q.filter(db.Books.comments.any(func.lower(db.Comments.text).ilike(\"%\" + description + \"%\")))\n\n        # search custom culumns\n        try:\n            q = adv_search_custom_columns(cc, term, q)\n        except AttributeError as ex:\n            log.debug_or_exception(ex)\n            flash(_(\"Error on search for custom columns, please restart Calibre-Web\"), category=\"error\")\n\n    q = q.order_by(*order).all()\n    flask_session['query'] = json.dumps(term)\n    ub.store_ids(q)\n    result_count = len(q)\n    if offset != None and limit != None:\n        offset = int(offset)\n        limit_all = offset + int(limit)\n        pagination = Pagination((offset / (int(limit)) + 1), limit, result_count)\n    else:\n        offset = 0\n        limit_all = result_count\n    return render_title_template('search.html',\n                                 adv_searchterm=searchterm,\n                                 pagination=pagination,\n                                 entries=q[offset:limit_all],\n                                 result_count=result_count,\n                                 title=_(u\"Advanced Search\"), page=\"advsearch\")\n\n\n\n@web.route(\"/advsearch\", methods=['GET'])\n@login_required_if_no_ano\ndef advanced_search_form():\n    # Build custom columns names\n    cc = get_cc_columns(filter_config_custom_read=True)\n    return render_prepare_search_form(cc)\n\n\n# ################################### Download/Send ##################################################################\n\n\n@web.route(\"/cover/<int:book_id>\")\n@login_required_if_no_ano\ndef get_cover(book_id):\n    return get_book_cover(book_id)\n\n@web.route(\"/robots.txt\")\ndef get_robots():\n    return send_from_directory(constants.STATIC_DIR, \"robots.txt\")\n\n@web.route(\"/show/<int:book_id>/<book_format>\", defaults={'anyname': 'None'})\n@web.route(\"/show/<int:book_id>/<book_format>/<anyname>\")\n@login_required_if_no_ano\n@viewer_required\ndef serve_book(book_id, book_format, anyname):\n    book_format = book_format.split(\".\")[0]\n    book = calibre_db.get_book(book_id)\n    data = calibre_db.get_book_format(book_id, book_format.upper())\n    if not data:\n        return \"File not in Database\"\n    log.info('Serving book: %s', data.name)\n    if config.config_use_google_drive:\n        try:\n            headers = Headers()\n            headers[\"Content-Type\"] = mimetypes.types_map.get('.' + book_format, \"application/octet-stream\")\n            df = getFileFromEbooksFolder(book.path, data.name + \".\" + book_format)\n            return do_gdrive_download(df, headers, (book_format.upper() == 'TXT'))\n        except AttributeError as ex:\n            log.debug_or_exception(ex)\n            return \"File Not Found\"\n    else:\n        if book_format.upper() == 'TXT':\n            try:\n                rawdata = open(os.path.join(config.config_calibre_dir, book.path, data.name + \".\" + book_format),\n                               \"rb\").read()\n                result = chardet.detect(rawdata)\n                return make_response(\n                    rawdata.decode(result['encoding'], 'surrogatepass').encode('utf-8', 'surrogatepass'))\n            except FileNotFoundError:\n                log.error(\"File Not Found\")\n                return \"File Not Found\"\n        return send_from_directory(os.path.join(config.config_calibre_dir, book.path), data.name + \".\" + book_format)\n\n\n@web.route(\"/download/<int:book_id>/<book_format>\", defaults={'anyname': 'None'})\n@web.route(\"/download/<int:book_id>/<book_format>/<anyname>\")\n@login_required_if_no_ano\n@download_required\ndef download_link(book_id, book_format, anyname):\n    client = \"kobo\" if \"Kobo\" in request.headers.get('User-Agent') else \"\"\n    return get_download_link(book_id, book_format, client)\n\n\n@web.route('/send/<int:book_id>/<book_format>/<int:convert>')\n@login_required\n@download_required\ndef send_to_kindle(book_id, book_format, convert):\n    if not config.get_mail_server_configured():\n        flash(_(u\"Please configure the SMTP mail settings first...\"), category=\"error\")\n    elif current_user.kindle_mail:\n        result = send_mail(book_id, book_format, convert, current_user.kindle_mail, config.config_calibre_dir,\n                           current_user.name)\n        if result is None:\n            flash(_(u\"Book successfully queued for sending to %(kindlemail)s\", kindlemail=current_user.kindle_mail),\n                  category=\"success\")\n            ub.update_download(book_id, int(current_user.id))\n        else:\n            flash(_(u\"Oops! There was an error sending this book: %(res)s\", res=result), category=\"error\")\n    else:\n        flash(_(u\"Please update your profile with a valid Send to Kindle E-mail Address.\"), category=\"error\")\n    if \"HTTP_REFERER\" in request.environ:\n        return redirect(request.environ[\"HTTP_REFERER\"])\n    else:\n        return redirect(url_for('web.index'))\n\n\n# ################################### Login Logout ##################################################################\n\n\n@web.route('/register', methods=['GET', 'POST'])\ndef register():\n    if not config.config_public_reg:\n        abort(404)\n    if current_user is not None and current_user.is_authenticated:\n        return redirect(url_for('web.index'))\n    if not config.get_mail_server_configured():\n        flash(_(u\"E-Mail server is not configured, please contact your administrator!\"), category=\"error\")\n        return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n\n    if request.method == \"POST\":\n        to_save = request.form.to_dict()\n        nickname = to_save[\"email\"].strip() if config.config_register_email else to_save.get('name')\n        if not nickname or not to_save.get(\"email\"):\n            flash(_(u\"Please fill out all fields!\"), category=\"error\")\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        try:\n            nickname = check_username(nickname)\n            email = check_email(to_save[\"email\"])\n        except Exception as ex:\n            flash(str(ex), category=\"error\")\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n\n        content = ub.User()\n        if check_valid_domain(email):\n            content.name = nickname\n            content.email = email\n            password = generate_random_password()\n            content.password = generate_password_hash(password)\n            content.role = config.config_default_role\n            content.sidebar_view = config.config_default_show\n            try:\n                ub.session.add(content)\n                ub.session.commit()\n                if feature_support['oauth']:\n                    register_user_with_oauth(content)\n                send_registration_mail(to_save[\"email\"].strip(), nickname, password)\n            except Exception:\n                ub.session.rollback()\n                flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")\n                return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        else:\n            flash(_(u\"Your e-mail is not allowed to register\"), category=\"error\")\n            log.warning('Registering failed for user \"%s\" e-mail address: %s', nickname, to_save[\"email\"])\n            return render_title_template('register.html', title=_(\"Register\"), page=\"register\")\n        flash(_(u\"Confirmation e-mail was send to your e-mail account.\"), category=\"success\")\n        return redirect(url_for('web.login'))\n\n    if feature_support['oauth']:\n        register_user_with_oauth()\n    return render_title_template('register.html', config=config, title=_(\"Register\"), page=\"register\")\n\n\n@web.route('/login', methods=['GET', 'POST'])\ndef login():\n    #if not config.db_configured:\n    #    log.debug(u\"Redirect to initial configuration\")\n    #    return redirect(url_for('admin.basic_configuration'))\n    if current_user is not None and current_user.is_authenticated:\n        return redirect(url_for('web.index'))\n    if config.config_login_type == constants.LOGIN_LDAP and not services.ldap:\n        log.error(u\"Cannot activate LDAP authentication\")\n        flash(_(u\"Cannot activate LDAP authentication\"), category=\"error\")\n    if request.method == \"POST\":\n        form = request.form.to_dict()\n        user = ub.session.query(ub.User).filter(func.lower(ub.User.name) == form['username'].strip().lower()) \\\n            .first()\n        if config.config_login_type == constants.LOGIN_LDAP and services.ldap and user and form['password'] != \"\":\n            login_result, error = services.ldap.bind_user(form['username'], form['password'])\n            if login_result:\n                login_user(user, remember=bool(form.get('remember_me')))\n                ub.store_user_session()\n                log.debug(u\"You are now logged in as: '%s'\", user.name)\n                flash(_(u\"you are now logged in as: '%(nickname)s'\", nickname=user.name),\n                      category=\"success\")\n                return redirect_back(url_for(\"web.index\"))\n            elif login_result is None and user and check_password_hash(str(user.password), form['password']) \\\n                and user.name != \"Guest\":\n                login_user(user, remember=bool(form.get('remember_me')))\n                ub.store_user_session()\n                log.info(\"Local Fallback Login as: '%s'\", user.name)\n                flash(_(u\"Fallback Login as: '%(nickname)s', LDAP Server not reachable, or user not known\",\n                        nickname=user.name),\n                      category=\"warning\")\n                return redirect_back(url_for(\"web.index\"))\n            elif login_result is None:\n                log.info(error)\n                flash(_(u\"Could not login: %(message)s\", message=error), category=\"error\")\n            else:\n                ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)\n                log.warning('LDAP Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                flash(_(u\"Wrong Username or Password\"), category=\"error\")\n        else:\n            ip_Address = request.headers.get('X-Forwarded-For', request.remote_addr)\n            if 'forgot' in form and form['forgot'] == 'forgot':\n                if user != None and user.name != \"Guest\":\n                    ret, __ = reset_password(user.id)\n                    if ret == 1:\n                        flash(_(u\"New Password was send to your email address\"), category=\"info\")\n                        log.info('Password reset for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                    else:\n                        log.error(u\"An unknown error occurred. Please try again later\")\n                        flash(_(u\"An unknown error occurred. Please try again later.\"), category=\"error\")\n                else:\n                    flash(_(u\"Please enter valid username to reset password\"), category=\"error\")\n                    log.warning('Username missing for password reset IP-address: %s', ip_Address)\n            else:\n                if user and check_password_hash(str(user.password), form['password']) and user.name != \"Guest\":\n                    login_user(user, remember=bool(form.get('remember_me')))\n                    ub.store_user_session()\n                    log.debug(u\"You are now logged in as: '%s'\", user.name)\n                    flash(_(u\"You are now logged in as: '%(nickname)s'\", nickname=user.name), category=\"success\")\n                    config.config_is_initial = False\n                    return redirect_back(url_for(\"web.index\"))\n                else:\n                    log.warning('Login failed for user \"%s\" IP-address: %s', form['username'], ip_Address)\n                    flash(_(u\"Wrong Username or Password\"), category=\"error\")\n\n    next_url = request.args.get('next', default=url_for(\"web.index\"), type=str)\n    if url_for(\"web.logout\") == next_url:\n        next_url = url_for(\"web.index\")\n    return render_title_template('login.html',\n                                 title=_(u\"Login\"),\n                                 next_url=next_url,\n                                 config=config,\n                                 oauth_check=oauth_check,\n                                 mail=config.get_mail_server_configured(), page=\"login\")\n\n\n@web.route('/logout')\n@login_required\ndef logout():\n    if current_user is not None and current_user.is_authenticated:\n        ub.delete_user_session(current_user.id, flask_session.get('_id',\"\"))\n        logout_user()\n        if feature_support['oauth'] and (config.config_login_type == 2 or config.config_login_type == 3):\n            logout_oauth_user()\n    log.debug(u\"User logged out\")\n    return redirect(url_for('web.login'))\n\n\n# ################################### Users own configuration #########################################################\ndef change_profile(kobo_support, local_oauth_check, oauth_status, translations, languages):\n    to_save = request.form.to_dict()\n    current_user.random_books = 0\n    if current_user.role_passwd() or current_user.role_admin():\n        if to_save.get(\"password\"):\n            current_user.password = generate_password_hash(to_save[\"password\"])\n    try:\n        if to_save.get(\"kindle_mail\", current_user.kindle_mail) != current_user.kindle_mail:\n            current_user.kindle_mail = valid_email(to_save[\"kindle_mail\"])\n        if to_save.get(\"email\", current_user.email) != current_user.email:\n            current_user.email = check_email(to_save[\"email\"])\n        if current_user.role_admin():\n            if to_save.get(\"name\", current_user.name) != current_user.name:\n                # Query User name, if not existing, change\n                current_user.name = check_username(to_save[\"name\"])\n        current_user.random_books = 1 if to_save.get(\"show_random\") == \"on\" else 0\n        if to_save.get(\"default_language\"):\n            current_user.default_language = to_save[\"default_language\"]\n        if to_save.get(\"locale\"):\n            current_user.locale = to_save[\"locale\"]\n        current_user.kobo_only_shelves_sync = int(to_save.get(\"kobo_only_shelves_sync\") == \"on\") or 0\n\n    except Exception as ex:\n        flash(str(ex), category=\"error\")\n        return render_title_template(\"user_edit.html\",\n                                     content=current_user,\n                                     translations=translations,\n                                     profile=1,\n                                     languages=languages,\n                                     title=_(u\"%(name)s's profile\", name=current_user.name),\n                                     page=\"me\",\n                                     kobo_support=kobo_support,\n                                     registered_oauth=local_oauth_check,\n                                     oauth_status=oauth_status)\n\n    val = 0\n    for key, __ in to_save.items():\n        if key.startswith('show'):\n            val += int(key[5:])\n    current_user.sidebar_view = val\n    if to_save.get(\"Show_detail_random\"):\n        current_user.sidebar_view += constants.DETAIL_RANDOM\n\n    try:\n        ub.session.commit()\n        flash(_(u\"Profile updated\"), category=\"success\")\n        log.debug(u\"Profile updated\")\n    except IntegrityError:\n        ub.session.rollback()\n        flash(_(u\"Found an existing account for this e-mail address\"), category=\"error\")\n        log.debug(u\"Found an existing account for this e-mail address\")\n    except OperationalError as e:\n        ub.session.rollback()\n        log.error(\"Database error: %s\", e)\n        flash(_(u\"Database error: %(error)s.\", error=e), category=\"error\")\n\n\n@web.route(\"/me\", methods=[\"GET\", \"POST\"])\n@login_required\ndef profile():\n    languages = calibre_db.speaking_language()\n    translations = babel.list_translations() + [LC('en')]\n    kobo_support = feature_support['kobo'] and config.config_kobo_sync\n    if feature_support['oauth'] and config.config_login_type == 2:\n        oauth_status = get_oauth_status()\n        local_oauth_check = oauth_check\n    else:\n        oauth_status = None\n        local_oauth_check = {}\n\n    if request.method == \"POST\":\n        change_profile(kobo_support, local_oauth_check, oauth_status, translations, languages)\n    return render_title_template(\"user_edit.html\",\n                                 translations=translations,\n                                 profile=1,\n                                 languages=languages,\n                                 content=current_user,\n                                 kobo_support=kobo_support,\n                                 title=_(u\"%(name)s's profile\", name=current_user.name),\n                                 page=\"me\",\n                                 registered_oauth=local_oauth_check,\n                                 oauth_status=oauth_status)\n\n\n# ###################################Show single book ##################################################################\n\n\n@web.route(\"/read/<int:book_id>/<book_format>\")\n@login_required_if_no_ano\n@viewer_required\ndef read_book(book_id, book_format):\n    book = calibre_db.get_filtered_book(book_id)\n    if not book:\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        return redirect(url_for(\"web.index\"))\n\n    # check if book has bookmark\n    bookmark = None\n    if current_user.is_authenticated:\n        bookmark = ub.session.query(ub.Bookmark).filter(and_(ub.Bookmark.user_id == int(current_user.id),\n                                                             ub.Bookmark.book_id == book_id,\n                                                             ub.Bookmark.format == book_format.upper())).first()\n    if book_format.lower() == \"epub\":\n        log.debug(u\"Start epub reader for %d\", book_id)\n        return render_title_template('read.html', bookid=book_id, title=book.title, bookmark=bookmark)\n    elif book_format.lower() == \"pdf\":\n        log.debug(u\"Start pdf reader for %d\", book_id)\n        return render_title_template('readpdf.html', pdffile=book_id, title=book.title)\n    elif book_format.lower() == \"txt\":\n        log.debug(u\"Start txt reader for %d\", book_id)\n        return render_title_template('readtxt.html', txtfile=book_id, title=book.title)\n    elif book_format.lower() == \"djvu\":\n        log.debug(u\"Start djvu reader for %d\", book_id)\n        return render_title_template('readdjvu.html', djvufile=book_id, title=book.title)\n    else:\n        for fileExt in constants.EXTENSIONS_AUDIO:\n            if book_format.lower() == fileExt:\n                entries = calibre_db.get_filtered_book(book_id)\n                log.debug(u\"Start mp3 listening for %d\", book_id)\n                return render_title_template('listenmp3.html', mp3file=book_id, audioformat=book_format.lower(),\n                                             entry=entries, bookmark=bookmark)\n        for fileExt in [\"cbr\", \"cbt\", \"cbz\"]:\n            if book_format.lower() == fileExt:\n                all_name = str(book_id)\n                title = book.title\n                if len(book.series):\n                    title = title + \" - \" + book.series[0].name\n                    if book.series_index:\n                        title = title + \" #\" + '{0:.2f}'.format(book.series_index).rstrip('0').rstrip('.')\n                log.debug(u\"Start comic reader for %d\", book_id)\n                return render_title_template('readcbr.html', comicfile=all_name, title=title,\n                                             extension=fileExt)\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"), category=\"error\")\n        return redirect(url_for(\"web.index\"))\n\n\n@web.route(\"/book/<int:book_id>\")\n@login_required_if_no_ano\ndef show_book(book_id):\n    entries = calibre_db.get_filtered_book(book_id, allow_show_archived=True)\n    if entries:\n        for index in range(0, len(entries.languages)):\n            entries.languages[index].language_name = isoLanguages.get_language_name(get_locale(), entries.languages[\n                index].lang_code)\n            #try:\n            #    entries.languages[index].language_name = isoLanguages.get_language_name(get_locale(), LC.parse(entries.languages[index].lang_code)\n            #                                                                            .get_language_name(get_locale())\n            #except UnknownLocaleError:\n            #    entries.languages[index].language_name = _(\n            #        isoLanguages.get(part3=entries.languages[index].lang_code).name)\n        cc = get_cc_columns(filter_config_custom_read=True)\n        book_in_shelfs = []\n        shelfs = ub.session.query(ub.BookShelf).filter(ub.BookShelf.book_id == book_id).all()\n        for entry in shelfs:\n            book_in_shelfs.append(entry.shelf)\n\n        if not current_user.is_anonymous:\n            if not config.config_read_column:\n                matching_have_read_book = ub.session.query(ub.ReadBook). \\\n                    filter(and_(ub.ReadBook.user_id == int(current_user.id), ub.ReadBook.book_id == book_id)).all()\n                have_read = len(\n                    matching_have_read_book) > 0 and matching_have_read_book[0].read_status == ub.ReadBook.STATUS_FINISHED\n            else:\n                try:\n                    matching_have_read_book = getattr(entries, 'custom_column_' + str(config.config_read_column))\n                    have_read = len(matching_have_read_book) > 0 and matching_have_read_book[0].value\n                except (KeyError, AttributeError):\n                    log.error(\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)\n                    have_read = None\n\n            archived_book = ub.session.query(ub.ArchivedBook).\\\n                filter(and_(ub.ArchivedBook.user_id == int(current_user.id),\n                            ub.ArchivedBook.book_id == book_id)).first()\n            is_archived = archived_book and archived_book.is_archived\n\n        else:\n            have_read = None\n            is_archived = None\n\n        entries.tags = sort(entries.tags, key=lambda tag: tag.name)\n\n        entries = calibre_db.order_authors(entries)\n\n        kindle_list = check_send_to_kindle(entries)\n        reader_list = check_read_formats(entries)\n\n        audioentries = []\n        for media_format in entries.data:\n            if media_format.format.lower() in constants.EXTENSIONS_AUDIO:\n                audioentries.append(media_format.format.lower())\n\n        return render_title_template('detail.html',\n                                     entry=entries,\n                                     audioentries=audioentries,\n                                     cc=cc,\n                                     is_xhr=request.headers.get('X-Requested-With')=='XMLHttpRequest',\n                                     title=entries.title,\n                                     books_shelfs=book_in_shelfs,\n                                     have_read=have_read,\n                                     is_archived=is_archived,\n                                     kindle_list=kindle_list,\n                                     reader_list=reader_list,\n                                     page=\"book\")\n    else:\n        log.debug(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\")\n        flash(_(u\"Oops! Selected book title is unavailable. File does not exist or is not accessible\"),\n              category=\"error\")\n        return redirect(url_for(\"web.index\"))\n", "Babel>=1.3, <3.0\nFlask-Babel>=0.11.1,<2.1.0\nFlask-Login>=0.3.2,<0.5.1\nFlask-Principal>=0.3.2,<0.5.1\nbackports_abc>=0.4\nFlask>=1.0.2,<2.1.0\niso-639>=0.4.5,<0.5.0\nPyPDF3>=1.0.0,<1.0.4\npytz>=2016.10\nrequests>=2.11.1,<2.25.0\nSQLAlchemy>=1.3.0,<1.5.0\ntornado>=4.1,<6.2\nWand>=0.4.4,<0.7.0\nunidecode>=0.04.19,<1.3.0\nlxml>=3.8.0,<4.7.0\nflask-wtf>=0.15.0,<0.16.0\n", "[metadata]\nname = calibreweb\nurl = https://github.com/janeczku/calibre-web\nproject_urls =\n  Bug Tracker = https://github.com/janeczku/calibre-web/issues\n  Release Management = https://github.com/janeczku/calibre-web/releases\n  Documentation = https://github.com/janeczku/calibre-web/wiki\n  Source Code = https://github.com/janeczku/calibre-web\ndescription = Web app for browsing, reading and downloading eBooks stored in a Calibre database.\nlong_description = file: README.md\nlong_description_content_type= text/markdown\nauthor = @OzzieIsaacs\nauthor_email = Ozzie.Fernandez.Isaacs@googlemail.com\nmaintainer = @OzzieIsaacs\nlicense = GPLv3+\nlicense_file = LICENSE\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    License :: OSI Approved :: GNU Affero General Public License v3\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.6\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Operating System :: OS Independent\nkeywords =\n  calibre\n  calibre-web\n  library\npython_requires = >=3.0\n\n[options.entry_points]\nconsole_scripts =\n  cps = calibreweb:main\n[options]\ninclude_package_data = True\ninstall_requires =\n    Babel>=1.3, <3.0\n    Flask-Babel>=0.11.1,<2.1.0\n    Flask-Login>=0.3.2,<0.5.1\n    Flask-Principal>=0.3.2,<0.5.1\n    backports_abc>=0.4\n    Flask>=1.0.2,<2.1.0\n    iso-639>=0.4.5,<0.5.0\n    PyPDF3>=1.0.0,<1.0.4\n    pytz>=2016.10\n    requests>=2.11.1,<2.25.0\n    SQLAlchemy>=1.3.0,<1.5.0\n    tornado>=4.1,<6.2\n    Wand>=0.4.4,<0.7.0\n    unidecode>=0.04.19,<1.3.0\n    lxml>=3.8.0,<4.7.0\n    flask-wtf>=0.15.0,<0.16.0\n\n[options.extras_require]\ngdrive =\n    google-api-python-client>=1.7.11,<2.1.0\n    gevent>20.6.0,<21.2.0\n    greenlet>=0.4.17,<1.2.0\n    httplib2>=0.9.2,<0.20.0\n    oauth2client>=4.0.0,<4.1.4\n    uritemplate>=3.0.0,<3.1.0\n    pyasn1-modules>=0.0.8,<0.3.0\n    pyasn1>=0.1.9,<0.5.0\n    PyDrive2>=1.3.1,<1.9.0\n    PyYAML>=3.12\n    rsa>=3.4.2,<4.8.0\n    six>=1.10.0,<1.17.0\ngmail =\n    google-auth-oauthlib>=0.4.3,<0.5.0\n    google-api-python-client>=1.7.11,<2.1.0\ngoodreads =\n    goodreads>=0.3.2,<0.4.0\n    python-Levenshtein>=0.12.0,<0.13.0\nldap =\n    python-ldap>=3.0.0,<3.4.0\n    Flask-SimpleLDAP>=1.4.0,<1.5.0\noauth =\n    Flask-Dance>=2.0.0,<5.1.0\n    SQLAlchemy-Utils>=0.33.5,<0.38.0\nmetadata =\n    rarfile>=2.7\n    scholarly>=1.2.0, <1.3\ncomics =\n    natsort>=2.2.0,<7.2.0\n    comicapi>= 2.2.0,<2.3.0\nkobo =\n    jsonschema>=3.2.0,<3.3.0\n\n\n\n"], "filenames": ["cps.py", "cps/__init__.py", "cps/about.py", "cps/kobo.py", "cps/static/js/edit_books.js", "cps/static/js/main.js", "cps/templates/book_edit.html", "cps/templates/book_table.html", "cps/templates/config_db.html", "cps/templates/config_edit.html", "cps/templates/config_view_edit.html", "cps/templates/detail.html", "cps/templates/email_edit.html", "cps/templates/http_error.html", "cps/templates/layout.html", "cps/templates/list.html", "cps/templates/login.html", "cps/templates/register.html", "cps/templates/search_form.html", "cps/templates/shelf_edit.html", "cps/templates/user_edit.html", "cps/templates/user_table.html", "cps/web.py", "requirements.txt", "setup.cfg"], "buggy_code_start_loc": [52, 45, 31, 50, 26, 112, 25, 22, 10, 10, 9, 216, 9, 2, 64, 22, 6, 5, 5, 5, 5, 120, 87, 15, 21], "buggy_code_end_loc": [53, 107, 95, 1028, 27, 716, 25, 22, 10, 10, 11, 225, 106, 3, 214, 22, 6, 5, 5, 5, 5, 120, 95, 15, 51], "fixing_code_start_loc": [52, 46, 32, 50, 25, 113, 26, 23, 11, 11, 9, 217, 10, 2, 64, 23, 7, 6, 6, 6, 6, 121, 87, 16, 20], "fixing_code_end_loc": [53, 125, 100, 1035, 25, 734, 27, 24, 12, 12, 12, 228, 109, 3, 202, 24, 8, 7, 7, 7, 7, 122, 93, 17, 55], "type": "CWE-352", "message": "In Calibre-web, versions 0.6.0 to 0.6.13 are vulnerable to Cross-Site Request Forgery (CSRF). By luring an authenticated user to click on a link, an attacker can create a new user role with admin privileges and attacker-controlled credentials, allowing them to take over the application.", "other": {"cve": {"id": "CVE-2021-25965", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-11-16T10:15:06.947", "lastModified": "2021-11-17T17:57:34.253", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Calibre-web, versions 0.6.0 to 0.6.13 are vulnerable to Cross-Site Request Forgery (CSRF). By luring an authenticated user to click on a link, an attacker can create a new user role with admin privileges and attacker-controlled credentials, allowing them to take over the application."}, {"lang": "es", "value": "En Calibre-web,  versiones 0.6.0 a 0.6.13, son vulnerables a un ataque de tipo Cross-Site Request Forgery (CSRF). Al atraer a un usuario autenticado para que haga clic en un enlace, un atacante puede crear un nuevo rol de usuario con privilegios de administrador y credenciales controladas por el atacante, permiti\u00e9ndole tomar el control de la aplicaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:calibre-web_project:calibre-web:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.6.0", "versionEndIncluding": "0.6.13", "matchCriteriaId": "F0824626-B1BE-45B8-AF97-491AAFA36FB3"}]}]}], "references": [{"url": "https://github.com/janeczku/calibre-web/commit/50919d47212066c75f03ee7a5332ecf2d584b98e", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25965", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/janeczku/calibre-web/commit/50919d47212066c75f03ee7a5332ecf2d584b98e"}}