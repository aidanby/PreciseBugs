{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraField;\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\Query\\Expr\\Join;\n\n/**\n * @todo change class name\n * Class CoursesAndSessionsCatalog\n */\nclass CoursesAndSessionsCatalog\n{\n    const PAGE_LENGTH = 12;\n\n    /**\n     * Check the configuration for the courses and sessions catalog.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @param int $value The value to check\n     *\n     * @return bool Whether the configuration is $value\n     */\n    public static function is($value = CATALOG_COURSES)\n    {\n        $showCoursesSessions = (int) api_get_setting('catalog_show_courses_sessions');\n        if ($showCoursesSessions == $value) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check whether to display the sessions list.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @return bool whether to display\n     */\n    public static function showSessions()\n    {\n        $catalogShow = (int) api_get_setting('catalog_show_courses_sessions');\n\n        if ($catalogShow == CATALOG_SESSIONS || $catalogShow == CATALOG_COURSES_SESSIONS) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check whether to display the courses list.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @return bool whether to display\n     */\n    public static function showCourses()\n    {\n        $catalogShow = (int) api_get_setting('catalog_show_courses_sessions');\n\n        if ($catalogShow == CATALOG_COURSES || $catalogShow == CATALOG_COURSES_SESSIONS) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCoursesToAvoid()\n    {\n        $TABLE_COURSE_FIELD = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $TABLE_COURSE_FIELD_VALUE = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n\n        // Check special courses\n        $courseListToAvoid = CourseManager::get_special_course_list();\n\n        // Checks \"hide_from_catalog\" extra field\n        $extraFieldType = ExtraField::COURSE_FIELD_TYPE;\n\n        $sql = \"SELECT item_id FROM $TABLE_COURSE_FIELD_VALUE tcfv\n                INNER JOIN $TABLE_COURSE_FIELD tcf\n                ON tcfv.field_id =  tcf.id\n                WHERE\n                    tcf.extra_field_type = $extraFieldType AND\n                    tcf.variable = 'hide_from_catalog' AND\n                    tcfv.value = 1\n                \";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $courseListToAvoid[] = $row['item_id'];\n            }\n        }\n\n        return $courseListToAvoid;\n    }\n\n    /**\n     * @return string\n     */\n    public static function getAvoidCourseCondition()\n    {\n        $courseListToAvoid = self::getCoursesToAvoid();\n        $condition = '';\n        if (!empty($courseListToAvoid)) {\n            $courses = [];\n            foreach ($courseListToAvoid as $courseId) {\n                $courses[] = '\"'.$courseId.'\"';\n            }\n            $condition = ' AND course.id NOT IN ('.implode(',', $courses).')';\n        }\n\n        return $condition;\n    }\n\n    /**\n     * Get available le courses count.\n     *\n     * @param int $accessUrlId (optional)\n     *\n     * @return int Number of courses\n     */\n    public static function countAvailableCoursesToShowInCatalog($accessUrlId = 1)\n    {\n        $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tableCourseRelAccessUrl = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $courseToAvoidCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition('course', true);\n\n        $accessUrlId = (int) $accessUrlId;\n        if (empty($accessUrlId)) {\n            $accessUrlId = 1;\n        }\n\n        $sql = \"SELECT count(course.id) \n                FROM $tableCourse course\n                INNER JOIN $tableCourseRelAccessUrl u\n                ON (course.id = u.c_id)\n                WHERE\n                    u.access_url_id = $accessUrlId AND\n                    course.visibility != 0 AND\n                    course.visibility != 4\n                    $courseToAvoidCondition\n                    $visibilityCondition\n                \";\n\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCourseCategories()\n    {\n        $urlId = 1;\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n        }\n\n        $countCourses = self::countAvailableCoursesToShowInCatalog($urlId);\n\n        $categories = [];\n        $categories[0][0] = [\n            'id' => 0,\n            'name' => get_lang('DisplayAll'),\n            'code' => 'ALL',\n            'parent_id' => null,\n            'tree_pos' => 0,\n            'count_courses' => $countCourses,\n        ];\n\n        $categoriesFromDatabase = CourseCategory::getCategories();\n        foreach ($categoriesFromDatabase as $row) {\n            $count_courses = CourseCategory::countCoursesInCategory($row['code']);\n            $row['count_courses'] = $count_courses;\n            if (empty($row['parent_id'])) {\n                $categories[0][$row['tree_pos']] = $row;\n            } else {\n                $categories[$row['parent_id']][$row['tree_pos']] = $row;\n            }\n        }\n        $count_courses = CourseCategory::countCoursesInCategory();\n        $categories[0][count($categories[0]) + 1] = [\n            'id' => 0,\n            'name' => get_lang('None'),\n            'code' => 'NONE',\n            'parent_id' => null,\n            'tree_pos' => $row['tree_pos'] + 1,\n            'children_count' => 0,\n            'auth_course_child' => true,\n            'auth_cat_child' => true,\n            'count_courses' => $count_courses,\n        ];\n\n        return $categories;\n    }\n\n    /**\n     * Return LIMIT to filter SQL query.\n     *\n     * @param array $limit\n     *\n     * @return string\n     */\n    public static function getLimitFilterFromArray($limit)\n    {\n        $limitFilter = '';\n        if (!empty($limit) && is_array($limit)) {\n            $limitStart = isset($limit['start']) ? $limit['start'] : 0;\n            $limitLength = isset($limit['length']) ? $limit['length'] : 12;\n            $limitFilter = 'LIMIT '.$limitStart.', '.$limitLength;\n        }\n\n        return $limitFilter;\n    }\n\n    /**\n     * @param string $category_code\n     * @param int    $random_value\n     * @param array  $limit         will be used if $random_value is not set.\n     *                              This array should contains 'start' and 'length' keys\n     *\n     * @return array\n     */\n    public static function getCoursesInCategory($category_code, $random_value = null, $limit = [])\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $avoidCoursesCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition(\n            'course',\n            true\n        );\n\n        if (!empty($random_value)) {\n            $random_value = intval($random_value);\n\n            $sql = \"SELECT COUNT(*) FROM $tbl_course\";\n            $result = Database::query($sql);\n            list($num_records) = Database::fetch_row($result);\n\n            if (api_is_multiple_url_enabled()) {\n                $url_access_id = api_get_current_access_url_id();\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n\n                $sql = \"SELECT COUNT(*) FROM $tbl_course course\n                        INNER JOIN $tbl_url_rel_course as url_rel_course\n                        ON (url_rel_course.c_id = course.id)\n                        WHERE access_url_id = $url_access_id \";\n                $result = Database::query($sql);\n                list($num_records) = Database::fetch_row($result);\n\n                $sql = \"SELECT course.id, course.id as real_id \n                        FROM $tbl_course course\n                        INNER JOIN $tbl_url_rel_course as url_rel_course\n                        ON (url_rel_course.c_id = course.id)\n                        WHERE\n                            access_url_id = $url_access_id AND\n                            RAND()*$num_records< $random_value\n                            $avoidCoursesCondition \n                            $visibilityCondition\n                        ORDER BY RAND()\n                        LIMIT 0, $random_value\";\n            } else {\n                $sql = \"SELECT id, id as real_id FROM $tbl_course course\n                        WHERE \n                            RAND()*$num_records< $random_value \n                            $avoidCoursesCondition \n                            $visibilityCondition\n                        ORDER BY RAND()\n                        LIMIT 0, $random_value\";\n            }\n\n            $result = Database::query($sql);\n            $id_in = null;\n            while (list($id) = Database::fetch_row($result)) {\n                if ($id_in) {\n                    $id_in .= \",$id\";\n                } else {\n                    $id_in = \"$id\";\n                }\n            }\n            if ($id_in === null) {\n                return [];\n            }\n            $sql = \"SELECT *, id as real_id FROM $tbl_course WHERE id IN($id_in)\";\n        } else {\n            $limitFilter = self::getLimitFilterFromArray($limit);\n            $category_code = Database::escape_string($category_code);\n            if (empty($category_code) || $category_code == \"ALL\") {\n                $sql = \"SELECT *, id as real_id \n                        FROM $tbl_course course\n                        WHERE\n                          1=1\n                          $avoidCoursesCondition\n                          $visibilityCondition\n                    ORDER BY title $limitFilter \";\n            } else {\n                if ($category_code == 'NONE') {\n                    $category_code = '';\n                }\n                $sql = \"SELECT *, id as real_id FROM $tbl_course course\n                        WHERE\n                            category_code='$category_code'\n                            $avoidCoursesCondition\n                            $visibilityCondition\n                        ORDER BY title $limitFilter \";\n            }\n\n            // Showing only the courses of the current Chamilo access_url_id\n            if (api_is_multiple_url_enabled()) {\n                $url_access_id = api_get_current_access_url_id();\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n                if ($category_code != \"ALL\") {\n                    $sql = \"SELECT *, course.id real_id FROM $tbl_course as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id AND\n                                category_code='$category_code'\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title $limitFilter\";\n                } else {\n                    $sql = \"SELECT *, course.id real_id FROM $tbl_course as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title $limitFilter\";\n                }\n            }\n        }\n\n        $result = Database::query($sql);\n        $courses = [];\n        while ($row = Database::fetch_array($result)) {\n            $row['registration_code'] = !empty($row['registration_code']);\n            $count_users = CourseManager::get_users_count_in_course($row['code']);\n            $count_connections_last_month = Tracking::get_course_connections_count(\n                $row['id'],\n                0,\n                api_get_utc_datetime(time() - (30 * 86400))\n            );\n\n            if ($row['tutor_name'] == '0') {\n                $row['tutor_name'] = get_lang('NoManager');\n            }\n            $point_info = CourseManager::get_course_ranking($row['id'], 0);\n            $courses[] = [\n                'real_id' => $row['real_id'],\n                'point_info' => $point_info,\n                'code' => $row['code'],\n                'directory' => $row['directory'],\n                'visual_code' => $row['visual_code'],\n                'title' => $row['title'],\n                'tutor' => $row['tutor_name'],\n                'subscribe' => $row['subscribe'],\n                'unsubscribe' => $row['unsubscribe'],\n                'registration_code' => $row['registration_code'],\n                'creation_date' => $row['creation_date'],\n                'visibility' => $row['visibility'],\n                'category' => $row['category_code'],\n                'count_users' => $count_users,\n                'count_connections' => $count_connections_last_month,\n            ];\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Search the courses database for a course that matches the search term.\n     * The search is done on the code, title and tutor field of the course table.\n     *\n     * @param string $search_term The string that the user submitted, what we are looking for\n     * @param array  $limit\n     * @param bool   $justVisible search only on visible courses in the catalogue\n     *\n     * @return array an array containing a list of all the courses matching the the search term\n     */\n    public static function search_courses($search_term, $limit, $justVisible = false)\n    {\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $limitFilter = self::getLimitFilterFromArray($limit);\n        $avoidCoursesCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = $justVisible ? CourseManager::getCourseVisibilitySQLCondition('course', true) : '';\n        $search_term_safe = Database::escape_string($search_term);\n        $sql_find = \"SELECT * FROM $courseTable course\n                      WHERE (\n                            course.code LIKE '%\".$search_term_safe.\"%' OR\n                            course.title LIKE '%\".$search_term_safe.\"%' OR\n                            course.tutor_name LIKE '%\".$search_term_safe.\"%'\n                        )\n                        $avoidCoursesCondition\n                        $visibilityCondition\n                    ORDER BY title, visual_code ASC\n                    $limitFilter\n                    \";\n\n        if (api_is_multiple_url_enabled()) {\n            $url_access_id = api_get_current_access_url_id();\n            if ($url_access_id != -1) {\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n                $sql_find = \"SELECT *\n                            FROM $courseTable as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id AND (\n                                    code LIKE '%\".$search_term_safe.\"%' OR\n                                    title LIKE '%\".$search_term_safe.\"%' OR\n                                    tutor_name LIKE '%\".$search_term_safe.\"%'\n                                )\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title, visual_code ASC\n                            $limitFilter\n                            \";\n            }\n        }\n        $result_find = Database::query($sql_find);\n        $courses = [];\n        while ($row = Database::fetch_array($result_find)) {\n            $row['registration_code'] = !empty($row['registration_code']);\n            $count_users = count(CourseManager::get_user_list_from_course_code($row['code']));\n            $count_connections_last_month = Tracking::get_course_connections_count(\n                $row['id'],\n                0,\n                api_get_utc_datetime(time() - (30 * 86400))\n            );\n\n            $point_info = CourseManager::get_course_ranking($row['id'], 0);\n\n            $courses[] = [\n                'real_id' => $row['id'],\n                'point_info' => $point_info,\n                'code' => $row['code'],\n                'directory' => $row['directory'],\n                'visual_code' => $row['visual_code'],\n                'title' => $row['title'],\n                'tutor' => $row['tutor_name'],\n                'subscribe' => $row['subscribe'],\n                'unsubscribe' => $row['unsubscribe'],\n                'registration_code' => $row['registration_code'],\n                'creation_date' => $row['creation_date'],\n                'visibility' => $row['visibility'],\n                'count_users' => $count_users,\n                'count_connections' => $count_connections_last_month,\n            ];\n        }\n\n        return $courses;\n    }\n\n    /**\n     * List the sessions.\n     *\n     * @param string $date  (optional) The date of sessions\n     * @param array  $limit\n     *\n     * @return array The session list\n     */\n    public static function browseSessions($date = null, $limit = [])\n    {\n        $em = Database::getManager();\n        $urlId = api_get_current_access_url_id();\n        $sql = \"SELECT s.id FROM session s \";\n        $sql .= \"\n            INNER JOIN access_url_rel_session ars\n            ON s.id = ars.session_id\n        \";\n\n        $sql .= \"\n            WHERE s.nbr_courses > 0\n                AND ars.access_url_id = $urlId\n        \";\n\n        if (!is_null($date)) {\n            $sql .= \"\n                AND (\n                    ('$date' BETWEEN DATE(s.access_start_date) AND DATE(s.access_end_date))\n                    OR (s.access_end_date IS NULL)\n                    OR (\n                        s.access_start_date IS NULL\n                        AND s.access_end_date IS NOT NULL\n                        AND DATE(s.access_end_date) >= '$date'\n                    )\n                )\n            \";\n        }\n\n        if (!empty($limit)) {\n            $sql .= \"LIMIT {$limit['start']}, {$limit['length']} \";\n        }\n\n        $list = Database::store_result(Database::query($sql), 'ASSOC');\n        $sessions = [];\n        foreach ($list as $sessionData) {\n            $id = $sessionData['id'];\n            $sessions[] = $em->find('ChamiloCoreBundle:Session', $id);\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Search sessions by searched term by session name.\n     *\n     * @param string $queryTerm Term for search\n     * @param array  $limit     Limit info\n     *\n     * @return array The sessions\n     */\n    public static function browseSessionsBySearch($queryTerm, array $limit)\n    {\n        $sessionsToBrowse = [];\n\n        $criteria = Criteria::create()\n            ->where(\n                Criteria::expr()->contains('name', $queryTerm)\n            )\n            ->setFirstResult($limit['start'])\n            ->setMaxResults($limit['length']);\n\n        $sessions = Database::getManager()\n            ->getRepository('ChamiloCoreBundle:Session')\n            ->matching($criteria);\n\n        foreach ($sessions as $session) {\n            if ($session->getNbrCourses() === 0) {\n                continue;\n            }\n\n            $sessionsToBrowse[] = $session;\n        }\n\n        return $sessionsToBrowse;\n    }\n\n    /**\n     * Search sessions by the tags in their courses.\n     *\n     * @param string $termTag Term for search in tags\n     * @param array  $limit   Limit info\n     *\n     * @return array The sessions\n     */\n    public static function browseSessionsByTags($termTag, array $limit)\n    {\n        $em = Database::getManager();\n        $qb = $em->createQueryBuilder();\n\n        $sessions = $qb->select('s')\n            ->distinct(true)\n            ->from('ChamiloCoreBundle:Session', 's')\n            ->innerJoin(\n                'ChamiloCoreBundle:SessionRelCourse',\n                'src',\n                Join::WITH,\n                's.id = src.session'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:ExtraFieldRelTag',\n                'frt',\n                Join::WITH,\n                'src.course = frt.itemId'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:Tag',\n                't',\n                Join::WITH,\n                'frt.tagId = t.id'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:ExtraField',\n                'f',\n                Join::WITH,\n                'frt.fieldId = f.id'\n            )\n            ->where(\n                $qb->expr()->like('t.tag', \":tag\")\n            )\n            ->andWhere(\n                $qb->expr()->eq('f.extraFieldType', ExtraField::COURSE_FIELD_TYPE)\n            )\n            ->setFirstResult($limit['start'])\n            ->setMaxResults($limit['length'])\n            ->setParameter('tag', \"$termTag%\")\n            ->getQuery()\n            ->getResult();\n\n        $sessionsToBrowse = [];\n        foreach ($sessions as $session) {\n            if ($session->getNbrCourses() === 0) {\n                continue;\n            }\n            $sessionsToBrowse[] = $session;\n        }\n\n        return $sessionsToBrowse;\n    }\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\ExtraField;\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\Query\\Expr\\Join;\n\n/**\n * @todo change class name\n * Class CoursesAndSessionsCatalog\n */\nclass CoursesAndSessionsCatalog\n{\n    const PAGE_LENGTH = 12;\n\n    /**\n     * Check the configuration for the courses and sessions catalog.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @param int $value The value to check\n     *\n     * @return bool Whether the configuration is $value\n     */\n    public static function is($value = CATALOG_COURSES)\n    {\n        $showCoursesSessions = (int) api_get_setting('catalog_show_courses_sessions');\n        if ($showCoursesSessions == $value) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check whether to display the sessions list.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @return bool whether to display\n     */\n    public static function showSessions()\n    {\n        $catalogShow = (int) api_get_setting('catalog_show_courses_sessions');\n\n        if ($catalogShow == CATALOG_SESSIONS || $catalogShow == CATALOG_COURSES_SESSIONS) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check whether to display the courses list.\n     *\n     * @global array $_configuration Configuration\n     *\n     * @return bool whether to display\n     */\n    public static function showCourses()\n    {\n        $catalogShow = (int) api_get_setting('catalog_show_courses_sessions');\n\n        if ($catalogShow == CATALOG_COURSES || $catalogShow == CATALOG_COURSES_SESSIONS) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCoursesToAvoid()\n    {\n        $TABLE_COURSE_FIELD = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $TABLE_COURSE_FIELD_VALUE = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n\n        // Check special courses\n        $courseListToAvoid = CourseManager::get_special_course_list();\n\n        // Checks \"hide_from_catalog\" extra field\n        $extraFieldType = ExtraField::COURSE_FIELD_TYPE;\n\n        $sql = \"SELECT item_id FROM $TABLE_COURSE_FIELD_VALUE tcfv\n                INNER JOIN $TABLE_COURSE_FIELD tcf\n                ON tcfv.field_id =  tcf.id\n                WHERE\n                    tcf.extra_field_type = $extraFieldType AND\n                    tcf.variable = 'hide_from_catalog' AND\n                    tcfv.value = 1\n                \";\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $courseListToAvoid[] = $row['item_id'];\n            }\n        }\n\n        return $courseListToAvoid;\n    }\n\n    /**\n     * @return string\n     */\n    public static function getAvoidCourseCondition()\n    {\n        $courseListToAvoid = self::getCoursesToAvoid();\n        $condition = '';\n        if (!empty($courseListToAvoid)) {\n            $courses = [];\n            foreach ($courseListToAvoid as $courseId) {\n                $courses[] = '\"'.$courseId.'\"';\n            }\n            $condition = ' AND course.id NOT IN ('.implode(',', $courses).')';\n        }\n\n        return $condition;\n    }\n\n    /**\n     * Get available le courses count.\n     *\n     * @param int $accessUrlId (optional)\n     *\n     * @return int Number of courses\n     */\n    public static function countAvailableCoursesToShowInCatalog($accessUrlId = 1)\n    {\n        $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tableCourseRelAccessUrl = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $courseToAvoidCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition('course', true);\n\n        $accessUrlId = (int) $accessUrlId;\n        if (empty($accessUrlId)) {\n            $accessUrlId = 1;\n        }\n\n        $sql = \"SELECT count(course.id) \n                FROM $tableCourse course\n                INNER JOIN $tableCourseRelAccessUrl u\n                ON (course.id = u.c_id)\n                WHERE\n                    u.access_url_id = $accessUrlId AND\n                    course.visibility != 0 AND\n                    course.visibility != 4\n                    $courseToAvoidCondition\n                    $visibilityCondition\n                \";\n\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * @return array\n     */\n    public static function getCourseCategories()\n    {\n        $urlId = 1;\n        if (api_is_multiple_url_enabled()) {\n            $urlId = api_get_current_access_url_id();\n        }\n\n        $countCourses = self::countAvailableCoursesToShowInCatalog($urlId);\n\n        $categories = [];\n        $categories[0][0] = [\n            'id' => 0,\n            'name' => get_lang('DisplayAll'),\n            'code' => 'ALL',\n            'parent_id' => null,\n            'tree_pos' => 0,\n            'count_courses' => $countCourses,\n        ];\n\n        $categoriesFromDatabase = CourseCategory::getCategories();\n        foreach ($categoriesFromDatabase as $row) {\n            $count_courses = CourseCategory::countCoursesInCategory($row['code']);\n            $row['count_courses'] = $count_courses;\n            if (empty($row['parent_id'])) {\n                $categories[0][$row['tree_pos']] = $row;\n            } else {\n                $categories[$row['parent_id']][$row['tree_pos']] = $row;\n            }\n        }\n        $count_courses = CourseCategory::countCoursesInCategory();\n        $categories[0][count($categories[0]) + 1] = [\n            'id' => 0,\n            'name' => get_lang('None'),\n            'code' => 'NONE',\n            'parent_id' => null,\n            'tree_pos' => $row['tree_pos'] + 1,\n            'children_count' => 0,\n            'auth_course_child' => true,\n            'auth_cat_child' => true,\n            'count_courses' => $count_courses,\n        ];\n\n        return $categories;\n    }\n\n    /**\n     * Return LIMIT to filter SQL query.\n     *\n     * @param array $limit\n     *\n     * @return string\n     */\n    public static function getLimitFilterFromArray($limit)\n    {\n        $limitFilter = '';\n        if (!empty($limit) && is_array($limit)) {\n            $limitStart = isset($limit['start']) ? (int) $limit['start'] : 0;\n            $limitLength = isset($limit['length']) ? (int) $limit['length'] : 12;\n            $limitFilter = 'LIMIT '.$limitStart.', '.$limitLength;\n        }\n\n        return $limitFilter;\n    }\n\n    /**\n     * @param string $category_code\n     * @param int    $random_value\n     * @param array  $limit         will be used if $random_value is not set.\n     *                              This array should contains 'start' and 'length' keys\n     *\n     * @return array\n     */\n    public static function getCoursesInCategory($category_code, $random_value = null, $limit = [])\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $avoidCoursesCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = CourseManager::getCourseVisibilitySQLCondition(\n            'course',\n            true\n        );\n\n        if (!empty($random_value)) {\n            $random_value = intval($random_value);\n\n            $sql = \"SELECT COUNT(*) FROM $tbl_course\";\n            $result = Database::query($sql);\n            list($num_records) = Database::fetch_row($result);\n\n            if (api_is_multiple_url_enabled()) {\n                $url_access_id = api_get_current_access_url_id();\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n\n                $sql = \"SELECT COUNT(*) FROM $tbl_course course\n                        INNER JOIN $tbl_url_rel_course as url_rel_course\n                        ON (url_rel_course.c_id = course.id)\n                        WHERE access_url_id = $url_access_id \";\n                $result = Database::query($sql);\n                list($num_records) = Database::fetch_row($result);\n\n                $sql = \"SELECT course.id, course.id as real_id \n                        FROM $tbl_course course\n                        INNER JOIN $tbl_url_rel_course as url_rel_course\n                        ON (url_rel_course.c_id = course.id)\n                        WHERE\n                            access_url_id = $url_access_id AND\n                            RAND()*$num_records< $random_value\n                            $avoidCoursesCondition \n                            $visibilityCondition\n                        ORDER BY RAND()\n                        LIMIT 0, $random_value\";\n            } else {\n                $sql = \"SELECT id, id as real_id FROM $tbl_course course\n                        WHERE \n                            RAND()*$num_records< $random_value \n                            $avoidCoursesCondition \n                            $visibilityCondition\n                        ORDER BY RAND()\n                        LIMIT 0, $random_value\";\n            }\n\n            $result = Database::query($sql);\n            $id_in = null;\n            while (list($id) = Database::fetch_row($result)) {\n                if ($id_in) {\n                    $id_in .= \",$id\";\n                } else {\n                    $id_in = \"$id\";\n                }\n            }\n            if ($id_in === null) {\n                return [];\n            }\n            $sql = \"SELECT *, id as real_id FROM $tbl_course WHERE id IN($id_in)\";\n        } else {\n            $limitFilter = self::getLimitFilterFromArray($limit);\n            $category_code = Database::escape_string($category_code);\n            if (empty($category_code) || $category_code == \"ALL\") {\n                $sql = \"SELECT *, id as real_id \n                        FROM $tbl_course course\n                        WHERE\n                          1=1\n                          $avoidCoursesCondition\n                          $visibilityCondition\n                    ORDER BY title $limitFilter \";\n            } else {\n                if ($category_code == 'NONE') {\n                    $category_code = '';\n                }\n                $sql = \"SELECT *, id as real_id FROM $tbl_course course\n                        WHERE\n                            category_code='$category_code'\n                            $avoidCoursesCondition\n                            $visibilityCondition\n                        ORDER BY title $limitFilter \";\n            }\n\n            // Showing only the courses of the current Chamilo access_url_id\n            if (api_is_multiple_url_enabled()) {\n                $url_access_id = api_get_current_access_url_id();\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n                if ($category_code != \"ALL\") {\n                    $sql = \"SELECT *, course.id real_id FROM $tbl_course as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id AND\n                                category_code='$category_code'\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title $limitFilter\";\n                } else {\n                    $sql = \"SELECT *, course.id real_id FROM $tbl_course as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title $limitFilter\";\n                }\n            }\n        }\n\n        $result = Database::query($sql);\n        $courses = [];\n        while ($row = Database::fetch_array($result)) {\n            $row['registration_code'] = !empty($row['registration_code']);\n            $count_users = CourseManager::get_users_count_in_course($row['code']);\n            $count_connections_last_month = Tracking::get_course_connections_count(\n                $row['id'],\n                0,\n                api_get_utc_datetime(time() - (30 * 86400))\n            );\n\n            if ($row['tutor_name'] == '0') {\n                $row['tutor_name'] = get_lang('NoManager');\n            }\n            $point_info = CourseManager::get_course_ranking($row['id'], 0);\n            $courses[] = [\n                'real_id' => $row['real_id'],\n                'point_info' => $point_info,\n                'code' => $row['code'],\n                'directory' => $row['directory'],\n                'visual_code' => $row['visual_code'],\n                'title' => $row['title'],\n                'tutor' => $row['tutor_name'],\n                'subscribe' => $row['subscribe'],\n                'unsubscribe' => $row['unsubscribe'],\n                'registration_code' => $row['registration_code'],\n                'creation_date' => $row['creation_date'],\n                'visibility' => $row['visibility'],\n                'category' => $row['category_code'],\n                'count_users' => $count_users,\n                'count_connections' => $count_connections_last_month,\n            ];\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Search the courses database for a course that matches the search term.\n     * The search is done on the code, title and tutor field of the course table.\n     *\n     * @param string $search_term The string that the user submitted, what we are looking for\n     * @param array  $limit\n     * @param bool   $justVisible search only on visible courses in the catalogue\n     *\n     * @return array an array containing a list of all the courses matching the the search term\n     */\n    public static function search_courses($search_term, $limit, $justVisible = false)\n    {\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $limitFilter = self::getLimitFilterFromArray($limit);\n        $avoidCoursesCondition = self::getAvoidCourseCondition();\n        $visibilityCondition = $justVisible ? CourseManager::getCourseVisibilitySQLCondition('course', true) : '';\n        $search_term_safe = Database::escape_string($search_term);\n        $sql_find = \"SELECT * FROM $courseTable course\n                      WHERE (\n                            course.code LIKE '%\".$search_term_safe.\"%' OR\n                            course.title LIKE '%\".$search_term_safe.\"%' OR\n                            course.tutor_name LIKE '%\".$search_term_safe.\"%'\n                        )\n                        $avoidCoursesCondition\n                        $visibilityCondition\n                    ORDER BY title, visual_code ASC\n                    $limitFilter\n                    \";\n\n        if (api_is_multiple_url_enabled()) {\n            $url_access_id = api_get_current_access_url_id();\n            if ($url_access_id != -1) {\n                $tbl_url_rel_course = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n                $sql_find = \"SELECT *\n                            FROM $courseTable as course\n                            INNER JOIN $tbl_url_rel_course as url_rel_course\n                            ON (url_rel_course.c_id = course.id)\n                            WHERE\n                                access_url_id = $url_access_id AND (\n                                    code LIKE '%\".$search_term_safe.\"%' OR\n                                    title LIKE '%\".$search_term_safe.\"%' OR\n                                    tutor_name LIKE '%\".$search_term_safe.\"%'\n                                )\n                                $avoidCoursesCondition\n                                $visibilityCondition\n                            ORDER BY title, visual_code ASC\n                            $limitFilter\n                            \";\n            }\n        }\n        $result_find = Database::query($sql_find);\n        $courses = [];\n        while ($row = Database::fetch_array($result_find)) {\n            $row['registration_code'] = !empty($row['registration_code']);\n            $count_users = count(CourseManager::get_user_list_from_course_code($row['code']));\n            $count_connections_last_month = Tracking::get_course_connections_count(\n                $row['id'],\n                0,\n                api_get_utc_datetime(time() - (30 * 86400))\n            );\n\n            $point_info = CourseManager::get_course_ranking($row['id'], 0);\n\n            $courses[] = [\n                'real_id' => $row['id'],\n                'point_info' => $point_info,\n                'code' => $row['code'],\n                'directory' => $row['directory'],\n                'visual_code' => $row['visual_code'],\n                'title' => $row['title'],\n                'tutor' => $row['tutor_name'],\n                'subscribe' => $row['subscribe'],\n                'unsubscribe' => $row['unsubscribe'],\n                'registration_code' => $row['registration_code'],\n                'creation_date' => $row['creation_date'],\n                'visibility' => $row['visibility'],\n                'count_users' => $count_users,\n                'count_connections' => $count_connections_last_month,\n            ];\n        }\n\n        return $courses;\n    }\n\n    /**\n     * List the sessions.\n     *\n     * @param string $date  (optional) The date of sessions\n     * @param array  $limit\n     *\n     * @return array The session list\n     * @throws Exception\n     */\n    public static function browseSessions($date = null, $limit = [])\n    {\n        $em = Database::getManager();\n        $urlId = api_get_current_access_url_id();\n        $date = Database::escape_string($date);\n        $sql = \"SELECT s.id FROM session s \";\n        $sql .= \"\n            INNER JOIN access_url_rel_session ars\n            ON s.id = ars.session_id\n        \";\n\n        $sql .= \"\n            WHERE s.nbr_courses > 0\n                AND ars.access_url_id = $urlId\n        \";\n\n        if (!is_null($date)) {\n            $sql .= \"\n                AND (\n                    ('$date' BETWEEN DATE(s.access_start_date) AND DATE(s.access_end_date))\n                    OR (s.access_end_date IS NULL)\n                    OR (\n                        s.access_start_date IS NULL\n                        AND s.access_end_date IS NOT NULL\n                        AND DATE(s.access_end_date) >= '$date'\n                    )\n                )\n            \";\n        }\n\n        if (!empty($limit)) {\n            $limit['start'] = (int) $limit['start'];\n            $limit['length'] = (int) $limit['length'];\n            $sql .= \"LIMIT {$limit['start']}, {$limit['length']} \";\n        }\n\n        $list = Database::store_result(Database::query($sql), 'ASSOC');\n        $sessions = [];\n        foreach ($list as $sessionData) {\n            $id = $sessionData['id'];\n            $sessions[] = $em->find('ChamiloCoreBundle:Session', $id);\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Search sessions by searched term by session name.\n     *\n     * @param string $queryTerm Term for search\n     * @param array  $limit     Limit info\n     *\n     * @return array The sessions\n     */\n    public static function browseSessionsBySearch($queryTerm, array $limit)\n    {\n        $sessionsToBrowse = [];\n\n        $criteria = Criteria::create()\n            ->where(\n                Criteria::expr()->contains('name', $queryTerm)\n            )\n            ->setFirstResult($limit['start'])\n            ->setMaxResults($limit['length']);\n\n        $sessions = Database::getManager()\n            ->getRepository('ChamiloCoreBundle:Session')\n            ->matching($criteria);\n\n        foreach ($sessions as $session) {\n            if ($session->getNbrCourses() === 0) {\n                continue;\n            }\n\n            $sessionsToBrowse[] = $session;\n        }\n\n        return $sessionsToBrowse;\n    }\n\n    /**\n     * Search sessions by the tags in their courses.\n     *\n     * @param string $termTag Term for search in tags\n     * @param array  $limit   Limit info\n     *\n     * @return array The sessions\n     */\n    public static function browseSessionsByTags($termTag, array $limit)\n    {\n        $em = Database::getManager();\n        $qb = $em->createQueryBuilder();\n\n        $sessions = $qb->select('s')\n            ->distinct(true)\n            ->from('ChamiloCoreBundle:Session', 's')\n            ->innerJoin(\n                'ChamiloCoreBundle:SessionRelCourse',\n                'src',\n                Join::WITH,\n                's.id = src.session'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:ExtraFieldRelTag',\n                'frt',\n                Join::WITH,\n                'src.course = frt.itemId'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:Tag',\n                't',\n                Join::WITH,\n                'frt.tagId = t.id'\n            )\n            ->innerJoin(\n                'ChamiloCoreBundle:ExtraField',\n                'f',\n                Join::WITH,\n                'frt.fieldId = f.id'\n            )\n            ->where(\n                $qb->expr()->like('t.tag', \":tag\")\n            )\n            ->andWhere(\n                $qb->expr()->eq('f.extraFieldType', ExtraField::COURSE_FIELD_TYPE)\n            )\n            ->setFirstResult($limit['start'])\n            ->setMaxResults($limit['length'])\n            ->setParameter('tag', \"$termTag%\")\n            ->getQuery()\n            ->getResult();\n\n        $sessionsToBrowse = [];\n        foreach ($sessions as $session) {\n            if ($session->getNbrCourses() === 0) {\n                continue;\n            }\n            $sessionsToBrowse[] = $session;\n        }\n\n        return $sessionsToBrowse;\n    }\n}\n"], "filenames": ["main/inc/lib/CoursesAndSessionsCatalog.class.php"], "buggy_code_start_loc": [218], "buggy_code_end_loc": [503], "fixing_code_start_loc": [218], "fixing_code_end_loc": [508], "type": "CWE-89", "message": "Chamilo LMS version 1.11.8 contains a main/inc/lib/CoursesAndSessionsCatalog.class.php SQL injection, allowing users with access to the sessions catalogue (which may optionally be made public) to extract and/or modify database information.", "other": {"cve": {"id": "CVE-2018-20329", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-21T06:29:00.627", "lastModified": "2019-01-07T14:44:47.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo LMS version 1.11.8 contains a main/inc/lib/CoursesAndSessionsCatalog.class.php SQL injection, allowing users with access to the sessions catalogue (which may optionally be made public) to extract and/or modify database information."}, {"lang": "es", "value": "Chamilo LMS 1.11.8 contiene una inyecci\u00f3n SQL en main/inc/lib/CoursesAndSessionsCatalog.class.php, lo que permite que usuarios con acceso al cat\u00e1logo de sesiones (que podr\u00eda hacerse p\u00fablico de forma opcional) extraigan y/o modifiquen la informaci\u00f3n de la base de datos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:1.11.8:*:*:*:*:*:*:*", "matchCriteriaId": "4F7D15FF-5009-4F3B-B583-DD75E5F9B82D"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/bfa1eccfabb457b800618d9d115f12dc614a55df", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-33-2018-12-13-Moderate-risk-high-impact-SQL-Injection", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/bfa1eccfabb457b800618d9d115f12dc614a55df"}}