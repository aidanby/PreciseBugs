{"buggy_code": ["<?php\n// api_decision.php -- HotCRP decision API\n// Copyright (c) 2008-2022 Eddie Kohler; see LICENSE.\n\nclass Decision_API {\n    static function run(Contact $user, Qrequest $qreq, PaperInfo $prow) {\n        $decset = $user->conf->decision_set();\n        if ($qreq->method() !== \"GET\") {\n            $aset = new AssignmentSet($user, true);\n            $aset->enable_papers($prow);\n            if (is_numeric($qreq->decision) && $decset->contains(+$qreq->decision)) {\n                $qreq->decision = $decset->get(+$qreq->decision)->name;\n            }\n            $aset->parse(\"paper,action,decision\\n{$prow->paperId},decision,\" . CsvGenerator::quote($qreq->decision));\n            if (!$aset->execute()) {\n                return $aset->json_result();\n            }\n            $prow->load_decision();\n        }\n        $dec = $prow->viewable_decision($user);\n        $jr = new JsonResult([\"ok\" => true, \"value\" => $dec->id, \"result\" => htmlspecialchars($dec->name)]);\n        if ($user->can_set_decision($prow)) {\n            $jr->content[\"editable\"] = true;\n        }\n        return $jr;\n    }\n}\n", "<?php\n// a_decision.php -- HotCRP assignment helper classes\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Decision_Assignable extends Assignable {\n    /** @var ?int */\n    public $_decision;\n    /** @var ?int */\n    public $_decyes;\n    /** @param ?int $pid\n     * @param ?int $decision\n     * @param ?int $decyes */\n    function __construct($pid, $decision = null, $decyes = null) {\n        $this->type = \"decision\";\n        $this->pid = $pid;\n        $this->_decision = $decision;\n        $this->_decyes = $decyes;\n    }\n    /** @return self */\n    function fresh() {\n        return new Decision_Assignable($this->pid);\n    }\n}\n\nclass Decision_AssignmentParser extends UserlessAssignmentParser {\n    private $remove;\n    function __construct(Conf $conf, $aj) {\n        parent::__construct(\"decision\");\n        $this->remove = $aj->remove;\n    }\n    static function load_decision_state(AssignmentState $state) {\n        if ($state->mark_type(\"decision\", [\"pid\"], \"Decision_Assigner::make\")) {\n            foreach ($state->prows() as $prow) {\n                $state->load(new Decision_Assignable($prow->paperId, +$prow->outcome));\n            }\n        }\n    }\n    function load_state(AssignmentState $state) {\n        self::load_decision_state($state);\n    }\n    function allow_paper(PaperInfo $prow, AssignmentState $state) {\n        if ($state->user->can_set_decision($prow)) {\n            return true;\n        } else {\n            return new AssignmentError(\"<0>You can\u2019t change the decision for #{$prow->paperId}.\");\n        }\n    }\n    function apply(PaperInfo $prow, Contact $contact, $req, AssignmentState $state) {\n        $removepred = null;\n        $dec = null;\n        if (isset($req[\"decision\"])) {\n            $matchexpr = $state->conf->decision_set()->matchexpr($req[\"decision\"]);\n            if (!$this->remove) {\n                if (is_string($matchexpr)) {\n                    $cm = new CountMatcher($matchexpr);\n                    $dec = [];\n                    foreach ($state->conf->decision_set() as $di) {\n                        if ($cm->test($di->id))\n                            $dec[] = $di->id;\n                    }\n                } else {\n                    $dec = $matchexpr;\n                }\n                if (count($dec) === 1) {\n                    $dec = $dec[0];\n                } else if (empty($dec)) {\n                    return new AssignmentError(\"<0>No decisions match \u2018\" . $req[\"decision\"] . \"\u2019\");\n                } else {\n                    return new AssignmentError(\"<0>More than one decision matches \u2018\" . $req[\"decision\"]);\n                }\n            } else {\n                $removepred = function ($item) use ($matchexpr) {\n                    return CountMatcher::compare_using($item->_decision, $matchexpr);\n                };\n            }\n        } else if (!$this->remove) {\n            return new AssignmentError(\"<0>Decision required\");\n        }\n        $state->remove_if(new Decision_Assignable($prow->paperId), $removepred);\n        if (!$this->remove && $dec) {\n            $decyes = 0;\n            // accepted papers are always submitted\n            if ($dec > 0) {\n                Status_AssignmentParser::load_status_state($state);\n                $sm = $state->remove(new Status_Assignable($prow->paperId));\n                $sres = $sm[0];\n                if ($sres->_submitted === 0) {\n                    $sres->_submitted = ($sres->_withdrawn > 0 ? -Conf::$now : Conf::$now);\n                }\n                $state->add($sres);\n                if ($sres->_submitted > 0) {\n                    $decyes = 1;\n                }\n            }\n            $state->add(new Decision_Assignable($prow->paperId, +$dec, $decyes));\n        }\n        return true;\n    }\n}\n\nclass Decision_Assigner extends Assigner {\n    function __construct(AssignmentItem $item, AssignmentState $state) {\n        parent::__construct($item, $state);\n    }\n    static function make(AssignmentItem $item, AssignmentState $state) {\n        return new Decision_Assigner($item, $state);\n    }\n    /** @param int $decid */\n    static function decision_html(Conf $conf, $decid) {\n        $dec = $conf->decision_set()->get($decid);\n        $class = $dec->status_class();\n        $name_h = htmlspecialchars($dec->id === 0 ? \"No decision\" : $dec->name);\n        return \"<span class=\\\"pstat {$class}\\\">{$name_h}</span>\";\n    }\n    function unparse_display(AssignmentSet $aset) {\n        $t = [];\n        if ($this->item->existed()) {\n            $t[] = '<del>' . self::decision_html($aset->conf, $this->item->pre(\"_decision\")) . '</del>';\n        }\n        $t[] = '<ins>' . self::decision_html($aset->conf, $this->item[\"_decision\"]) . '</ins>';\n        return join(\" \", $t);\n    }\n    function unparse_csv(AssignmentSet $aset, AssignmentCsv $acsv) {\n        $x = [\"pid\" => $this->pid, \"action\" => \"decision\"];\n        if ($this->item->deleted()) {\n            $x[\"decision\"] = \"none\";\n        } else {\n            $x[\"decision\"] = $aset->conf->decision_name($this->item[\"_decision\"]);\n        }\n        $acsv->add($x);\n    }\n    function account(AssignmentSet $aset, AssignmentCountSet $deltarev) {\n        $aset->show_column(\"status\");\n    }\n    function add_locks(AssignmentSet $aset, &$locks) {\n        $locks[\"Paper\"] = \"write\";\n    }\n    function execute(AssignmentSet $aset) {\n        $dec = $this->item->deleted() ? 0 : $this->item[\"_decision\"];\n        $aset->stage_qe(\"update Paper set outcome=? where paperId=?\", $dec, $this->pid);\n        $aset->user->log_activity(\"Set decision: \" . $aset->conf->decision_name($dec), $this->pid);\n        if ($dec > 0 || $this->item->pre(\"_decision\") > 0) {\n            $aset->register_cleanup_function(\"paperacc\", function ($vals) use ($aset) {\n                $aset->conf->update_paperacc_setting(min($vals));\n            }, $dec > 0 && $this->item[\"_decyes\"] ? 1 : 0);\n        }\n    }\n}\n", "<?php\n// decisioninfo.php -- HotCRP helper class for decisions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass DecisionInfo {\n    /** @var int */\n    public $id;\n    /** @var string */\n    public $name;\n    /** @var 1|2|4 */\n    public $category; // must be suitable for masking\n    /** @var -1|0|1 */\n    public $sign;\n    /** @var bool */\n    public $placeholder = false;\n    /** @var int */\n    public $order = 0;\n\n\n    const CAT_NONE = 1;\n    const CAT_YES = 2;\n    const CAT_NO = 4;\n    const CAT_ALL = 7;\n    // see also DecisionSet::matchexpr\n\n    static private $class_name = [null, null, \"dec-yes\", null, \"dec-no\"];\n    static private $category_name = [null, null, \"accept\", null, \"reject\"];\n\n\n    /** @param int $id\n     * @param string $name */\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n        if ($this->id === 0) {\n            $this->category = self::CAT_NONE;\n            $this->sign = 0;\n        } else if ($this->id > 0) {\n            $this->category = self::CAT_YES;\n            $this->sign = 1;\n        } else {\n            $this->category = self::CAT_NO;\n            $this->sign = -1;\n        }\n    }\n\n    /** @param int $id\n     * @return DecisionInfo */\n    static function make_placeholder($id) {\n        $dec = new DecisionInfo($id, \"[#{$id}]\");\n        $dec->placeholder = true;\n        return $dec;\n    }\n\n    /** @return string */\n    function status_class() {\n        return self::$class_name[$this->category] ?? \"dec-maybe\";\n    }\n\n    /** @param Decision_Setting $ds */\n    function unparse_setting($ds) {\n        $ds->id = $this->id;\n        $ds->name = $this->name;\n        $ds->category = self::$category_name[$this->category] ?? \"maybe\";\n    }\n}\n", "<?php\n// help/h_keywords.php -- HotCRP help functions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Keywords_HelpTopic {\n    static function print(HelpRenderer $hth) {\n        // how to report author searches?\n        if ($hth->conf->submission_blindness() === Conf::BLIND_NEVER) {\n            $aunote = \"\";\n        } else if ($hth->conf->submission_blindness() === Conf::BLIND_ALWAYS) {\n            $aunote = \"<br><span class=\\\"hint\\\">Search uses fields visible to the searcher. For example, PC member searches do not examine authors.</span>\";\n        } else {\n            $aunote = \"<br><span class=\\\"hint\\\">Search uses fields visible to the searcher. For example, PC member searches do not examine anonymous authors.</span>\";\n        }\n\n        // does a reviewer tag exist?\n        $retag = $hth->meaningful_pc_tag() ?? \"\";\n\n        echo $hth->table(true);\n        echo $hth->tgroup(\"Basics\");\n        echo $hth->search_trow(\"\", \"all submissions in the search category\");\n        echo $hth->search_trow(\"story\", \"\u201cstory\u201d in title, abstract, authors$aunote\");\n        echo $hth->search_trow(\"119\", \"submission #119\");\n        echo $hth->search_trow(\"1 2 5 12-24 kernel\", \"submissions in the numbered set with \u201ckernel\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"\\\"802\\\"\", \"\u201c802\u201d in title, abstract, authors (not submission #802)\");\n        echo $hth->search_trow(\"very new\", \"\u201cvery\u201d <em>and</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very AND new\", \"the same\");\n        echo $hth->search_trow(\"\\\"very new\\\"\", \"the phrase \u201cvery new\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very OR new\", \"<em>either</em> \u201cvery\u201d <em>or</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"(very AND new) OR newest\", \"use parentheses to group\");\n        echo $hth->search_trow(\"very -new\", \"\u201cvery\u201d <em>but not</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very NOT new\", \"the same\");\n        echo $hth->search_trow(\"ve*\", \"words that <em>start with</em> \u201cve\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"*me*\", \"words that <em>contain</em> \u201cme\u201d in title, abstract, authors\");\n\n        echo $hth->tgroup(\"Title\");\n        echo $hth->search_trow(\"ti:flexible\", \"title contains \u201cflexible\u201d\");\n        echo $hth->tgroup(\"Abstract\");\n        echo $hth->search_trow(\"ab:\\\"very novel\\\"\", \"abstract contains \u201cvery novel\u201d\");\n        echo $hth->tgroup(\"Authors\");\n        echo $hth->search_trow(\"au:poletto\", \"author list contains \u201cpoletto\u201d\");\n        if ($hth->user->isPC) {\n            echo $hth->search_trow(\"au:pc\", \"one or more authors are PC members (author email matches PC email)\");\n        }\n        echo $hth->search_trow(\"au:>4\", \"more than four authors\");\n        echo $hth->tgroup(\"Collaborators\");\n        echo $hth->search_trow(\"co:liskov\", \"collaborators contains \u201cliskov\u201d\");\n        echo $hth->tgroup(\"Topics\");\n        echo $hth->search_trow(\"topic:link\", \"selected topics match \u201clink\u201d\");\n\n        $opts = array_filter($hth->conf->options()->normal(), function ($o) {\n            return $o->form_order() !== false && $o->search_keyword() !== false;\n        });\n        usort($opts, function ($a, $b) {\n            if ($a->final !== $b->final) {\n                return $a->final ? 1 : -1;\n            } else {\n                return PaperOption::compare($a, $b);\n            }\n        });\n        $oexs = [];\n        foreach ($opts as $o) {\n            foreach ($o->search_examples($hth->user, PaperOption::EXAMPLE_HELP) as $ex) {\n                if ($ex) {\n                    $ex->opt = $o;\n                    $oexs[] = $ex;\n                }\n            }\n        }\n\n        if (!empty($oexs)) {\n            echo $hth->tgroup(\"Submission fields\");\n            for ($i = 0; $i !== count($oexs); ++$i) {\n                if (($ex = $oexs[$i]) && $ex->description) {\n                    $others = [];\n                    for ($j = $i + 1; $j !== count($oexs); ++$j) {\n                        if ($oexs[$j] && $oexs[$j]->description === $ex->description) {\n                            $others[] = htmlspecialchars($oexs[$j]->q);\n                            $oexs[$j] = null;\n                        }\n                    }\n                    $q = $ex->q;\n                    if ($ex->param_q) {\n                        $q = preg_replace('/<.*?>(?=\\z|\"\\z)/', $ex->param_q, $q);\n                    }\n                    $args = $ex->params;\n                    $args[] = new FmtArg(\"title\", $ex->opt->title());\n                    $args[] = new FmtArg(\"id\", $ex->opt->readable_formid());\n                    $desc = Ftext::unparse_as($hth->conf->_($ex->description, ...$args), 5);\n                    if (!empty($others)) {\n                        $desc .= '<div class=\"hint\">Also ' . join(\", \", $others) . '</div>';\n                    }\n                    echo $hth->search_trow($q, $desc);\n                }\n            }\n        }\n\n        echo $hth->tgroup($hth->help_link(\"Tags\", \"tags\"));\n        echo $hth->search_trow(\"#discuss\", \"tagged \u201cdiscuss\u201d (\u201ctag:discuss\u201d also works)\");\n        echo $hth->search_trow(\"-#discuss\", \"not tagged \u201cdiscuss\u201d\");\n        echo $hth->search_trow(\"order:discuss\", \"tagged \u201cdiscuss\u201d, sort by tag order (\u201crorder:\u201d for reverse order)\");\n        echo $hth->search_trow(\"#disc*\", \"matches any tag that <em>starts with</em> \u201cdisc\u201d\");\n\n        $cx = null;\n        $cm = [];\n        foreach ($hth->conf->tags() as $t) {\n            foreach ($t->styles ?? [] as $c) {\n                $cx = $cx ?? $c;\n                if ($cx === $c)\n                    $cm[] = \"\u201c{$t->tag}\u201d\";\n            }\n        }\n        if (!empty($cm)) {\n            array_unshift($cm, \"\u201c{$cx->name}\u201d\");\n            $klass = \"taghh tag-{$cx->style}\";\n            if (($cx->sclass & TagStyle::BG) !== 0) {\n                $klass .= $cx->dark() ? \" dark tagbg\" : \" tagbg\";\n            }\n            echo $hth->search_trow(\"style:{$cx->name}\", \"tagged to appear <span class=\\\"{$klass}\\\">{$cx->name}</span> (tagged \" . commajoin($cm, \"or\") . \")\");\n        }\n\n        $roundname = $hth->meaningful_review_round_name();\n\n        echo $hth->tgroup(\"Reviews\");\n        echo $hth->search_trow(\"re:me\", \"you are a reviewer\");\n        echo $hth->search_trow(\"re:fdabek\", \"\u201cfdabek\u201d in reviewer name/email\");\n        if ($retag) {\n            echo $hth->search_trow(\"re:#$retag\", \"has a reviewer tagged \u201c#\" . $retag . \"\u201d\");\n        }\n        echo $hth->search_trow(\"re:4\", \"four reviewers (assigned and/or completed)\");\n        if ($retag) {\n            echo $hth->search_trow(\"re:#$retag>1\", \"at least two reviewers (assigned and/or completed) tagged \u201c#\" . $retag . \"\u201d\");\n        }\n        echo $hth->search_trow(\"re:complete<3\", \"less than three completed reviews<br /><span class=\\\"hint\\\">Use \u201ccre:<3\u201d for short.</span>\");\n        echo $hth->search_trow(\"re:incomplete>0\", \"at least one incomplete review\");\n        echo $hth->search_trow(\"re:inprogress\", \"at least one in-progress review (started, but not completed)\");\n        echo $hth->search_trow(\"re:primary>=2\", \"at least two primary reviewers\");\n        echo $hth->search_trow(\"re:secondary\", \"at least one secondary reviewer\");\n        echo $hth->search_trow(\"re:external\", \"at least one external reviewer\");\n        echo $hth->search_trow(\"re:primary:fdabek:complete\", \"\u201cfdabek\u201d has completed a primary review\");\n        if ($hth->conf->setting(\"extrev_chairreq\") >= 0) {\n            echo $hth->search_trow(\"re:myreq\", \"has a review requested by you\");\n            echo $hth->search_trow(\"re:myreq:not-accepted\", \"has a review requested by you that hasn\u2019t been accepted or edited yet\");\n        }\n        if ($roundname) {\n            echo $hth->search_trow(\"re:{$roundname}\", \"review in round \u201c\" . htmlspecialchars($roundname) . \"\u201d\");\n            echo $hth->search_trow(\"re:{$roundname}:jinyang\", \"review in round \u201c\" . htmlspecialchars($roundname) . \"\u201d by reviewer \u201cjinyang\u201d\");\n        }\n        echo $hth->search_trow(\"re:auwords<100\", \"has a review with less than 100 words in author-visible fields\");\n        if ($hth->conf->setting(\"rev_tokens\")) {\n            echo $hth->search_trow(\"retoken:J88ADNAB\", \"has a review with token J88ADNAB\");\n        }\n        if ($hth->conf->setting(\"rev_ratings\") != REV_RATINGS_NONE) {\n            echo $hth->search_trow(\"rate:good\", \"has a positively-rated review (\u201crate:bad\u201d, \u201crate:biased\u201d, etc. also work)\");\n            echo $hth->search_trow(\"rate:good:me\", \"has a positively-rated review by you\");\n        }\n\n        echo $hth->tgroup(\"Comments\");\n        echo $hth->search_trow(\"has:cmt\", \"at least one visible reviewer comment (not including authors\u2019 response)\");\n        echo $hth->search_trow(\"cmt:>=3\", \"at least <em>three</em> visible reviewer comments\");\n        echo $hth->search_trow(\"has:aucmt\", \"at least one reviewer comment visible to authors\");\n        echo $hth->search_trow(\"cmt:sylvia\", \"\u201csylvia\u201d (in name/email) wrote at least one visible comment; can combine with counts, use reviewer tags\");\n        $rrds = $hth->conf->response_rounds();\n        if (count($rrds) > 1) {\n            echo $hth->search_trow(\"has:response\", \"has an author\u2019s response\");\n            echo $hth->search_trow(\"has:{$rrds[1]->name}response\", \"has {$rrds[1]->name} response\");\n        } else {\n            echo $hth->search_trow(\"has:response\", \"has author\u2019s response\");\n        }\n        echo $hth->search_trow(\"anycmt:>1\", \"at least two visible comments, possibly <em>including</em> author\u2019s response\");\n\n        echo $hth->tgroup(\"Leads\");\n        echo $hth->search_trow(\"lead:fdabek\", \"\u201cfdabek\u201d (in name/email) is discussion lead\");\n        echo $hth->search_trow(\"lead:none\", \"no assigned discussion lead\");\n        echo $hth->search_trow(\"lead:any\", \"some assigned discussion lead\");\n        echo $hth->tgroup(\"Shepherds\");\n        echo $hth->search_trow(\"shep:fdabek\", \"\u201cfdabek\u201d (in name/email) is shepherd (\u201cnone\u201d and \u201cany\u201d also work)\");\n        echo $hth->tgroup(\"Conflicts\");\n        echo $hth->search_trow(\"conflict:me\", \"you have a conflict with the submission\");\n        echo $hth->search_trow(\"conflict:fdabek\", \"\u201cfdabek\u201d (in name/email) has a conflict with the submission<br /><span class=\\\"hint\\\">This search is only available to chairs and to PC members who can see the submission\u2019s author list.</span>\");\n        echo $hth->search_trow(\"conflict:pc\", \"some PC member has a conflict with the submission\");\n        echo $hth->search_trow(\"conflict:pc>2\", \"at least three PC members have conflicts with the submission\");\n        echo $hth->search_trow(\"reconflict:\\\"1 2 3\\\"\", \"a reviewer of submission 1, 2, or 3 has a conflict with the submission\");\n        echo $hth->tgroup(\"Preferences\");\n        echo $hth->search_trow(\"pref:3\", \"you have preference 3\");\n        echo $hth->search_trow(\"pref:pc:X\", \"a PC member\u2019s preference has expertise \u201cX\u201d (expert)\");\n        echo $hth->search_trow(\"pref:fdabek>0\", \"\u201cfdabek\u201d (in name/email) has preference &gt;&nbsp;0<br /><span class=\\\"hint\\\">Administrators can search preferences by name; PC members can only search preferences for the PC as a whole.</span>\");\n        echo $hth->tgroup(\"Status\");\n        echo $hth->search_trow([\"q\" => \"status:ready\", \"t\" => \"all\"], \"submission is ready for review\");\n        echo $hth->search_trow([\"q\" => \"status:incomplete\", \"t\" => \"all\"], \"submission is incomplete (neither ready nor withdrawn)\");\n        echo $hth->search_trow([\"q\" => \"status:withdrawn\", \"t\" => \"all\"], \"submission has been withdrawn\");\n        echo $hth->search_trow(\"has:final\", \"final version uploaded\");\n\n        echo $hth->tgroup(\"Decisions\");\n        foreach ($hth->conf->decision_set() as $dec) {\n            if ($dec->id !== 0) {\n                $qdname = strtolower($dec->name);\n                if (strpos($qdname, \" \") !== false) {\n                    $qdname = \"\\\"{$qdname}\\\"\";\n                }\n                echo $hth->search_trow(\"dec:{$qdname}\", \"decision is \u201c\" . htmlspecialchars($dec->name) . \"\u201d (partial matches OK)\");\n                break;\n            }\n        }\n        echo $hth->search_trow(\"dec:yes\", \"one of the accept decisions\");\n        echo $hth->search_trow(\"dec:no\", \"one of the reject decisions\");\n        echo $hth->search_trow(\"dec:any\", \"decision specified\");\n        echo $hth->search_trow(\"dec:none\", \"decision unspecified\");\n\n        // find names of review fields to demonstrate syntax\n        $scoref = [];\n        $textf = [];\n        foreach ($hth->conf->review_form()->viewable_fields($hth->user) as $f) {\n            if ($f instanceof Score_ReviewField) {\n                $scoref[] = $f;\n            } else if ($f instanceof Text_ReviewField) {\n                $textf[] = $f;\n            }\n        }\n        if (!empty($scoref) || !empty($textf)) {\n            echo $hth->tgroup(\"Review fields\");\n        }\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->search_trow(\"{$r->abbreviation1()}:{$r->typical_score()}\", \"at least one completed review has $r->name_html score {$r->typical_score()}\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:{$r->typical_score()}\", \"other abbreviations accepted\");\n            if (count($scoref) > 1) {\n                $r2 = $scoref[1];\n                echo $hth->search_trow(strtolower($r2->search_keyword()) . \":{$r2->typical_score()}\", \"other fields accepted (here, $r2->name_html)\");\n            }\n            if (($range = $r->typical_score_range())) {\n                echo $hth->search_trow(\"{$r->search_keyword()}:{$range[0]}..{$range[1]}\", \"completed reviews\u2019 $r->name_html scores are in the {$range[0]}&ndash;{$range[1]} range<br /><small>(all scores between {$range[0]} and {$range[1]})</small>\");\n                $rt = $range[0] . ($r->option_letter ? \"\" : \"-\") . $range[1];\n                echo $hth->search_trow(\"{$r->search_keyword()}:$rt\", \"completed reviews\u2019 $r->name_html scores <em>fill</em> the {$range[0]}&ndash;{$range[1]} range<br /><small>(all scores between {$range[0]} and {$range[1]}, with at least one {$range[0]} and at least one {$range[1]})</small>\");\n            }\n            $hint = \"\";\n            if (!$r->option_letter) {\n                $gt_typical = \"greater than {$r->typical_score()}\";\n                $le_typical = \"less than or equal to {$r->typical_score()}\";\n            } else {\n                $s1 = $r->parse_string($r->typical_score());\n                if ($hth->conf->opt(\"smartScoreCompare\")) {\n                    $s1le = range($s1, 1);\n                    $s1gt = range($r->nvalues(), $s1 + 1);\n                    $hint = \"<br><small>(scores \u201cbetter than\u201d {$r->typical_score()} are earlier in the alphabet)</small>\";\n                } else {\n                    $s1le = range($r->nvalues(), $s1);\n                    $s1gt = range($s1 - 1, 1);\n                }\n                $gt_typical = commajoin(array_map([$r, \"value_unparse\"], $s1gt), \" or \");\n                $le_typical = commajoin(array_map([$r, \"value_unparse\"], $s1le), \" or \");\n            }\n            echo $hth->search_trow(\"{$r->search_keyword()}:>{$r->typical_score()}\", \"at least one completed review has $r->name_html score $gt_typical\" . $hint);\n            echo $hth->search_trow(\"{$r->search_keyword()}:2<={$r->typical_score()}\", \"at least two completed reviews have $r->name_html score $le_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:=2<={$r->typical_score()}\", \"<em>exactly</em> two completed reviews have $r->name_html score $le_typical\");\n            if ($roundname) {\n                echo $hth->search_trow(\"{$r->search_keyword()}:$roundname>{$r->typical_score()}\", \"at least one completed review in round \" . htmlspecialchars($roundname) . \" has $r->name_html score $gt_typical\");\n            }\n            echo $hth->search_trow(\"{$r->search_keyword()}:ext>{$r->typical_score()}\", \"at least one completed external review has $r->name_html score $gt_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:pc:2>{$r->typical_score()}\", \"at least two completed PC reviews have $r->name_html score $gt_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:sylvia={$r->typical_score()}\", \"\u201csylvia\u201d (reviewer name/email) gave $r->name_html score {$r->typical_score()}\");\n        }\n        if (count($textf)) {\n            $r = $textf[0];\n            echo $hth->search_trow($r->abbreviation1() . \":finger\", \"at least one completed review has \u201cfinger\u201d in the $r->name_html field\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:finger\", \"other abbreviations accepted\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:any\", \"at least one completed review has text in the $r->name_html field\");\n        }\n\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->tgroup($hth->help_link(\"Formulas\", \"formulas\"));\n            echo $hth->search_trow(\"formula:all({$r->search_keyword()}={$r->typical_score()})\",\n                \"all reviews have $r->name_html score {$r->typical_score()}<br />\" .\n                \"<span class=\\\"hint\\\">\" . $hth->help_link(\"Formulas\", \"formulas\") . \" can express complex numerical queries across review scores and preferences.</span>\");\n            echo $hth->search_trow(\"f:all({$r->search_keyword()}={$r->typical_score()})\", \"\u201cf\u201d is shorthand for \u201cformula\u201d\");\n            echo $hth->search_trow(\"formula:var({$r->search_keyword()})>0.5\", \"variance in {$r->search_keyword()} is above 0.5\");\n            echo $hth->search_trow(\"formula:any({$r->search_keyword()}={$r->typical_score()} && pref<0)\", \"at least one reviewer had $r->name_html score {$r->typical_score()} and review preference &lt; 0\");\n        }\n\n        echo $hth->tgroup(\"Display\");\n        echo $hth->search_trow(\"show:tags show:pcconflicts\", \"show tags and PC conflicts in the results\");\n        echo $hth->search_trow(\"hide:title\", \"hide title in the results\");\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->search_trow(\"show:max({$r->search_keyword()})\", \"show a \" . $hth->help_link(\"formula\", \"formulas\"));\n            echo $hth->search_trow(\"sort:{$r->search_keyword()}\", \"sort by score\");\n            echo $hth->search_trow(\"sort:[{$r->search_keyword()} variance]\", \"sort by score variance\");\n        }\n        echo $hth->search_trow(\"sort:-status\", \"sort by reverse status\");\n        echo $hth->search_trow(\"edit:#discuss\", \"edit the values for tag \u201c#discuss\u201d\");\n        echo $hth->search_trow(\"search1 THEN search2\", \"like \u201csearch1 OR search2\u201d, but submissions matching \u201csearch1\u201d are grouped together and appear earlier in the sorting order\");\n        echo $hth->search_trow(\"1-5 THEN 6-10 show:kanban\", \"display in kanban format\");\n        echo $hth->search_trow(\"search1 HIGHLIGHT search2\", \"search for \u201csearch1\u201d, but <span class=\\\"taghh highlightmark\\\">highlight</span> submissions in that list that match \u201csearch2\u201d (also try HIGHLIGHT:pink, HIGHLIGHT:green, HIGHLIGHT:blue)\");\n\n        echo $hth->end_table();\n    }\n}\n", "<?php\n// listactions/la_decide.php -- HotCRP helper classes for list actions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Decide_ListAction extends ListAction {\n    function allow(Contact $user, Qrequest $qreq) {\n        return $user->can_set_some_decision();\n    }\n    static function render(PaperList $pl, Qrequest $qreq) {\n        $opts = [];\n        foreach ($pl->conf->decision_set() as $dec) {\n            $opts[$dec->id] = $dec->name;\n        }\n        return [\"Set to &nbsp;\"\n                . Ht::select(\"decision\", $opts, \"\", [\"class\" => \"want-focus js-submit-action-info-decide\"])\n                . $pl->action_submit(\"decide\")];\n    }\n    function run(Contact $user, Qrequest $qreq, SearchSelection $ssel) {\n        $aset = new AssignmentSet($user, true);\n        $did = $qreq->decision;\n        if (is_numeric($did)\n            && ($dec = ($user->conf->decision_set())[+$did])) {\n            $did = $dec->name;\n        }\n        $aset->parse(\"paper,action,decision\\n\" . join(\" \", $ssel->selection()) . \",decision,\" . CsvGenerator::quote($did));\n        if ($aset->execute()) {\n            return new Redirection($user->conf->site_referrer_url($qreq, [\"atab\" => \"decide\", \"decision\" => $qreq->decision], Conf::HOTURL_RAW));\n        } else {\n            $user->conf->feedback_msg($aset->message_list());\n        }\n    }\n}\n", "<?php\n// mailrecipients.php -- HotCRP mail tool\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass MailRecipients extends MessageSet {\n    /** @var Conf */\n    private $conf;\n    /** @var Contact */\n    private $user;\n    /** @var string */\n    private $type;\n    /** @var ?list<int> */\n    private $paper_ids;\n    /** @var int */\n    public $newrev_since = 0;\n    /** @var ?array<int,int> */\n    private $_dcounts;\n    /** @var ?array{bool,bool,bool} */\n    private $_has_dt;\n    /** @var array<string,string> */\n    private $sel = [];\n    /** @var array<string,int> */\n    private $selflags = [];\n\n    const F_ANYPC = 1;\n    const F_GROUP = 2;\n    const F_HIDE = 4;\n    const F_NOPAPERS = 8;\n    const F_SINCE = 16;\n\n    private function defsel($name, $description, $flags = 0) {\n        assert(!isset($this->sel[$name]));\n        $this->sel[$name] = $description;\n        $this->selflags[$name] = $flags;\n    }\n\n    /** @param Contact $user */\n    function __construct($user) {\n        assert(!!$user->isPC);\n        $this->conf = $user->conf;\n        $this->user = $user;\n        $this->set_ignore_duplicates(true);\n    }\n\n    /** @return bool */\n    function has_paper_ids() {\n        return $this->paper_ids !== null;\n    }\n\n    /** @return list<int> */\n    function paper_ids() {\n        return $this->paper_ids ?? [];\n    }\n\n    /** @param ?list<int> $paper_ids\n     * @return $this */\n    function set_paper_ids($paper_ids) {\n        $this->paper_ids = $paper_ids;\n        return $this;\n    }\n\n    /** @param ?string $newrev_since\n     * @return $this */\n    function set_newrev_since($newrev_since) {\n        $newrev_since = trim($newrev_since ?? \"\");\n        if ($newrev_since !== \"\"\n            && !preg_match('/\\A(?:|n\\/a|\\(?all\\)?|0)\\z/i', $newrev_since)) {\n            $t = $this->conf->parse_time($newrev_since);\n            if ($t === false) {\n                $this->error_at(\"newrev_since\", \"Invalid date.\");\n            } else {\n                $this->newrev_since = $t;\n                if ($t > Conf::$now) {\n                    $this->warning_at(\"newrev_since\", \"That time is in the future.\");\n                }\n            }\n        } else {\n            $this->newrev_since = null;\n        }\n        return $this;\n    }\n\n    private function dcounts() {\n        if ($this->_dcounts === null) {\n            if ($this->user->allow_administer_all()) {\n                $result = $this->conf->qe(\"select outcome, count(*) from Paper where timeSubmitted>0 group by outcome\");\n            } else if ($this->user->is_manager()) {\n                $psearch = new PaperSearch($this->user, [\"q\" => \"\", \"t\" => \"alladmin\"]);\n                $result = $this->conf->qe(\"select outcome, count(*) from Paper where timeSubmitted>0 and paperId?a group by outcome\", $psearch->paper_ids());\n            } else {\n                $result = null;\n            }\n            $this->_dcounts = [];\n            $this->_has_dt = [false, false, false];\n            while ($result && ($row = $result->fetch_row())) {\n                $d = (int) $row[0];\n                $this->_dcounts[$d] = (int) $row[1];\n                $dt = $d < 0 ? 0 : ($d === 0 ? 1 : 2);\n                $this->_has_dt[$dt] = true;\n            }\n            Dbl::free($result);\n        }\n    }\n\n    /** @param ?string $t\n     * @return ?string */\n    function canonical_recipients($t) {\n        if ($t === \"somedec:yes\" || $t === \"somedec:no\") {\n            $this->dcounts();\n            $category = $t === \"somedec:yes\" ? DecisionInfo::CAT_YES : DecisionInfo::CAT_NO;\n            $dmaxcount = 0;\n            $dmaxname = \"\";\n            foreach ($this->conf->decision_set() as $dinfo) {\n                if ($dinfo->category === $category\n                    && ($dcount = $this->_dcounts[$dinfo->id] ?? 0) > $dmaxcount) {\n                    $dmaxcount = $dcount;\n                    $dmaxname = $dinfo->name;\n                }\n            }\n            if ($dmaxcount > 0) {\n                return \"dec:{$dmaxname}\";\n            } else {\n                return substr($t, 4);\n            }\n        } else if ($t === \"myuncextrev\") {\n            return \"uncmyextrev\";\n        } else {\n            return $t ?? \"\";\n        }\n    }\n\n    /** @param ?string $type\n     * @return $this */\n    function set_recipients($type) {\n        $user = $this->user;\n        $this->type = $this->canonical_recipients($type);\n        assert(!!$user->isPC);\n\n        if ($user->is_manager()) {\n            $hide = !$this->conf->has_any_submitted();\n            $this->defsel(\"s\", \"Contact authors of submitted papers\", $hide ? self::F_HIDE : 0);\n            $this->defsel(\"unsub\", \"Contact authors of unsubmitted papers\");\n            $this->defsel(\"au\", \"All contact authors\");\n\n            $this->dcounts();\n            $this->defsel(\"bydec_group\", \"Contact authors by decision\", self::F_GROUP);\n            foreach ($this->conf->decision_set() as $dec) {\n                if ($dec->id !== 0) {\n                    $hide = ($this->_dcounts[$dec->id] ?? 0) === 0;\n                    $this->defsel(\"dec:{$dec->name}\", \"Contact authors of \" . htmlspecialchars($dec->name) . \" papers\", $hide ? self::F_HIDE : 0);\n                }\n            }\n            $this->defsel(\"dec:yes\", \"Contact authors of accept-class papers\", $this->_has_dt[2] ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:no\", \"Contact authors of reject-class papers\", $this->_has_dt[0] ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:none\", \"Contact authors of undecided papers\", $this->_has_dt[1] && ($this->_has_dt[0] || $this->_has_dt[2]) ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:any\", \"Contact authors of decided papers\", self::F_HIDE);\n            $this->defsel(\"bydec_group_end\", null, self::F_GROUP);\n\n            $this->defsel(\"rev_group\", \"Reviewers\", self::F_GROUP);\n\n            // XXX this exposes information about PC review assignments\n            // for conflicted papers to the chair; not worth worrying about\n            if (!$user->privChair) {\n                $pids = [];\n                $result = $this->conf->qe(\"select paperId from Paper where managerContactId=?\", $user->contactId);\n                while (($row = $result->fetch_row())) {\n                    $pids[] = (int) $row[0];\n                }\n                Dbl::free($result);\n                $pidw = empty($pids) ? \"false\" : \"paperId in (\" . join(\",\", $pids) . \")\";\n            } else {\n                $pidw = \"true\";\n            }\n            $row = $this->conf->fetch_first_row(\"select\n                exists (select * from PaperReview where reviewType>=\" . REVIEW_PC . \" and $pidw),\n                exists (select * from PaperReview where reviewType>0 and reviewType<\" . REVIEW_PC . \"  and $pidw),\n                exists (select * from PaperReview where reviewType>=\" . REVIEW_PC . \" and reviewSubmitted is null and reviewNeedsSubmit!=0 and timeRequested>timeRequestNotified and $pidw),\n                exists (select * from Paper where timeSubmitted>0 and leadContactId!=0 and $pidw),\n                exists (select * from Paper where timeSubmitted>0 and shepherdContactId!=0 and $pidw)\");\n            list($any_pcrev, $any_extrev, $any_newpcrev, $any_lead, $any_shepherd) = $row;\n\n            $hide = $any_pcrev || $any_extrev ? 0 : self::F_HIDE;\n            $this->defsel(\"rev\", \"Reviewers\", $hide);\n            $this->defsel(\"crev\", \"Reviewers with complete reviews\", $hide);\n            $this->defsel(\"uncrev\", \"Reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"allcrev\", \"Reviewers with no incomplete reviews\", $hide);\n\n            $hide = $any_pcrev ? 0 : self::F_HIDE;\n            $this->defsel(\"pcrev\", \"PC reviewers\", $hide);\n            $this->defsel(\"uncpcrev\", \"PC reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"newpcrev\", \"PC reviewers with new review assignments\", ($any_newpcrev && $any_pcrev ? 0 : self::F_HIDE) | self::F_SINCE);\n\n            $hide = $any_extrev ? 0 : self::F_HIDE;\n            $this->defsel(\"extrev\", \"External reviewers\", $hide);\n            $this->defsel(\"uncextrev\", \"External reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"rev_group_end\", null, self::F_GROUP);\n        } else {\n            $any_lead = $any_shepherd = 0;\n        }\n\n        $hide = !$this->user->is_requester();\n        $this->defsel(\"myextrev\", \"Your requested reviewers\", self::F_ANYPC | ($hide ? self::F_HIDE : 0));\n        $this->defsel(\"uncmyextrev\", \"Your requested reviewers with incomplete reviews\", self::F_ANYPC | ($hide ? self::F_HIDE : 0));\n\n        if ($user->is_manager()) {\n            $this->defsel(\"lead\", \"Discussion leads\", $any_lead ? 0 : self::F_HIDE);\n            $this->defsel(\"shepherd\", \"Shepherds\", $any_shepherd ? 0 : self::F_HIDE);\n        }\n\n        $this->defsel(\"pc_group\", \"Program committee\", self::F_GROUP);\n        $selcount = count($this->sel);\n        $this->defsel(\"pc\", \"Program committee\", self::F_ANYPC | self::F_NOPAPERS);\n        foreach ($this->conf->viewable_user_tags($this->user) as $t) {\n            if ($t !== \"pc\")\n                $this->defsel(\"pc:$t\", \"#$t program committee\", self::F_ANYPC | self::F_NOPAPERS);\n        }\n        if (count($this->sel) == $selcount + 1) {\n            unset($this->sel[\"pc_group\"]);\n        } else {\n            $this->defsel(\"pc_group_end\", null, self::F_GROUP);\n        }\n\n        if ($user->privChair) {\n            $this->defsel(\"all\", \"Active users\", self::F_NOPAPERS);\n        }\n\n        if (isset($this->sel[$type])\n            && !($this->selflags[$type] & self::F_GROUP)) {\n            $this->type = $type;\n        } else {\n            $this->type = key($this->sel);\n            if ($type !== null && $type !== \"\") {\n                $this->error_at(\"to\", \"Invalid recipients.\");\n            }\n        }\n\n        return $this;\n    }\n\n    function selectors() {\n        $sel = [];\n        $last = null;\n        foreach ($this->sel as $n => $d) {\n            $flags = $this->selflags[$n];\n            if ($flags & self::F_GROUP) {\n                if ($d !== null) {\n                    $sel[$n] = [\"optgroup\", $d];\n                } else if ($last !== null\n                           && ($this->selflags[$last] & self::F_GROUP)) {\n                    unset($sel[$last]);\n                } else {\n                    $sel[$n] = [\"optgroup\"];\n                }\n            } else if (!($flags & self::F_HIDE) || $n == $this->type) {\n                if (is_string($d)) {\n                    $d = [\"label\" => $d];\n                }\n                $k = [];\n                if ($flags & self::F_NOPAPERS) {\n                    $k[] = \"mail-want-no-papers\";\n                }\n                if ($flags & self::F_SINCE) {\n                    $k[] = \"mail-want-since\";\n                }\n                if (!empty($k)) {\n                    $d[\"class\"] = join(\" \", $k);\n                }\n                $sel[$n] = $d;\n            } else {\n                continue;\n            }\n            $last = $n;\n        }\n        return Ht::select(\"to\", $sel, $this->type, [\"id\" => \"to\", \"class\" => \"uich js-mail-recipients\"]);\n    }\n\n    /** @return string */\n    function unparse() {\n        $t = $this->sel[$this->type];\n        if ($this->type == \"newpcrev\" && $this->newrev_since) {\n            $t .= \" since \" . htmlspecialchars($this->conf->parseableTime($this->newrev_since, false));\n        }\n        return $t;\n    }\n\n    /** @return bool */\n    function is_authors() {\n        return in_array($this->type, [\"s\", \"unsub\", \"au\"])\n            || str_starts_with($this->type, \"dec:\");\n    }\n\n    /** @return bool */\n    function need_papers() {\n        return $this->type !== \"pc\"\n            && substr($this->type, 0, 3) !== \"pc:\"\n            && $this->type !== \"all\";\n    }\n\n    /** @param bool $paper_sensitive\n     * @return int */\n    function combination_type($paper_sensitive) {\n        if (preg_match('/\\A(?:pc|pc:.*|(?:|unc|new)pcrev|lead|shepherd)\\z/', $this->type)) {\n            return 2;\n        } else if ($this->is_authors() || $paper_sensitive) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /** @return ?PaperInfoSet */\n    function paper_set() {\n        $options = [\"allConflictType\" => true];\n\n        // basic limit\n        if ($this->type === \"au\") {\n            // all authors, no paper restriction\n        } else if ($this->type === \"s\") {\n            $options[\"finalized\"] = true;\n        } else if ($this->type === \"unsub\") {\n            $options[\"unsub\"] = $options[\"active\"] = true;\n        } else if (in_array($this->type, [\"dec:any\", \"dec:none\", \"dec:yes\", \"dec:no\", \"dec:maybe\"])) {\n            $options[\"finalized\"] = $options[$this->type] = true;\n        } else if (substr($this->type, 0, 4) === \"dec:\") {\n            $options[\"finalized\"] = true;\n            $options[\"where\"] = \"false\";\n            foreach ($this->conf->decision_set() as $dec) {\n                if (strcasecmp($dec->name, substr($this->type, 4)) === 0) {\n                    $options[\"where\"] = \"Paper.outcome={$dec->id}\";\n                    break;\n                }\n            }\n        } else if ($this->type === \"lead\") {\n            $options[\"anyLead\"] = $options[\"reviewSignatures\"] = true;\n        } else if ($this->type === \"shepherd\") {\n            $options[\"anyShepherd\"] = $options[\"reviewSignatures\"] = true;\n        } else if (str_ends_with($this->type, \"rev\")) {\n            $options[\"reviewSignatures\"] = true;\n        } else {\n            assert(!$this->need_papers());\n            return null;\n        }\n\n        // additional manager limit\n        $paper_ids = $this->paper_ids;\n        if (!$this->user->privChair\n            && !($this->selflags[$this->type] & self::F_ANYPC)) {\n            if ($this->conf->check_any_admin_tracks($this->user)) {\n                $ps = new PaperSearch($this->user, [\"q\" => \"\", \"t\" => \"admin\"]);\n                if ($paper_ids === null) {\n                    $paper_ids = $ps->paper_ids();\n                } else {\n                    $paper_ids = array_values(array_intersect($paper_ids, $ps->paper_ids()));\n                }\n            } else {\n                $options[\"myManaged\"] = true;\n            }\n        }\n        if ($paper_ids !== null) {\n            $options[\"paperId\"] = $paper_ids;\n        }\n\n        // load paper set\n        return $this->conf->paper_set($options, $this->user);\n    }\n\n    /** @param ?PaperInfoSet $paper_set\n     * @param bool $paper_sensitive\n     * @return string|false */\n    function query($paper_set, $paper_sensitive) {\n        $cols = [];\n        $where = [\"not disabled\"];\n        $joins = [\"ContactInfo\"];\n\n        // reviewer limit\n        if (!preg_match('/\\A(new|unc|c|allc|)(pc|ext|myext|)rev\\z/',\n                        $this->type, $revmatch)) {\n            $revmatch = false;\n        }\n\n        // build query\n        if ($this->type === \"all\") {\n            $needpaper = false;\n            $where[] = \"(ContactInfo.roles!=0 or lastLogin>0 or exists (select * from PaperConflict where contactId=ContactInfo.contactId) or exists (select * from PaperReview where contactId=ContactInfo.contactId and reviewType>0))\";\n        } else if ($this->type === \"pc\" || substr($this->type, 0, 3) === \"pc:\") {\n            $needpaper = false;\n            $where[] = \"(ContactInfo.roles&\" . Contact::ROLE_PC . \")!=0\";\n            if ($this->type != \"pc\") {\n                $x = sqlq(Dbl::escape_like(substr($this->type, 3)));\n                $where[] = \"ContactInfo.contactTags like \" . Dbl::utf8ci(\"'% {$x}#%'\");\n            }\n        } else if ($revmatch) {\n            $needpaper = true;\n            $joins[] = \"join Paper\";\n            $joins[] = \"join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=ContactInfo.contactId and PaperReview.reviewType>0)\";\n            $where[] = \"Paper.paperId=PaperReview.paperId\";\n        } else if ($this->type === \"lead\" || $this->type === \"shepherd\") {\n            $needpaper = true;\n            $joins[] = \"join Paper on (Paper.{$this->type}ContactId=ContactInfo.contactId)\";\n        } else {\n            $needpaper = true;\n            $joins[] = \"join Paper\";\n            $joins[] = \"join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=ContactInfo.contactId)\";\n            $where[] = \"PaperConflict.conflictType>=\" . CONFLICT_AUTHOR;\n        }\n\n        assert(!!$paper_set === $needpaper);\n        if ($paper_set) {\n            $where[] = \"Paper.paperId\" . sql_in_int_list($paper_set->paper_ids());\n        }\n\n        // reviewer match\n        if ($revmatch) {\n            // Submission status\n            if ($revmatch[1] === \"c\") {\n                $where[] = \"PaperReview.reviewSubmitted>0\";\n            } else if ($revmatch[1] === \"unc\" || $revmatch[1] === \"new\") {\n                $where[] = \"PaperReview.reviewSubmitted is null and PaperReview.reviewNeedsSubmit!=0 and Paper.timeSubmitted>0\";\n            }\n            if ($revmatch[1] === \"new\") {\n                $where[] = \"PaperReview.timeRequested>PaperReview.timeRequestNotified\";\n                if ($this->newrev_since) {\n                    $where[] = \"PaperReview.timeRequested>=$this->newrev_since\";\n                }\n            }\n            if ($revmatch[1] === \"allc\") {\n                $joins[] = \"left join (select contactId, max(if(reviewNeedsSubmit!=0 and timeSubmitted>0,1,0)) anyReviewNeedsSubmit from PaperReview join Paper on (Paper.paperId=PaperReview.paperId) group by contactId) AllReviews on (AllReviews.contactId=ContactInfo.contactId)\";\n                $where[] = \"AllReviews.anyReviewNeedsSubmit=0\";\n            }\n            // Withdrawn papers may not count\n            if ($revmatch[1] === \"\") {\n                $where[] = \"(Paper.timeSubmitted>0 or PaperReview.reviewSubmitted>0)\";\n            }\n            // Review type\n            if ($revmatch[2] === \"myext\") {\n                $where[] = \"PaperReview.reviewType=\" . REVIEW_EXTERNAL;\n                $where[] = \"PaperReview.requestedBy=\" . $this->user->contactId;\n            } else if ($revmatch[2] === \"ext\") {\n                $where[] = \"PaperReview.reviewType=\" . REVIEW_EXTERNAL;\n            } else if ($revmatch[2] === \"pc\") {\n                $where[] = \"PaperReview.reviewType>\" . REVIEW_EXTERNAL;\n            }\n        }\n\n        // query construction\n        $q = \"select ContactInfo.contactId, firstName, lastName, affiliation,\n            email, roles, contactTags, disabled, primaryContactId, 3 _slice,\n            password, preferredEmail, \"\n            . ($needpaper ? \"Paper.paperId\" : \"-1\") . \" paperId\n            from \" . join(\"\\n\", $joins)\n            . \"\\nwhere \" . join(\"\\n    and \", $where)\n            . \"\\ngroup by ContactInfo.contactId\" . ($needpaper ? \", Paper.paperId\" : \"\")\n            . \"\\norder by \";\n        if (!$needpaper) {\n            $q .= \"email\";\n        } else if ($this->is_authors() || $paper_sensitive) {\n            $q .= \"Paper.paperId, email\";\n        } else {\n            $q .= \"email, Paper.paperId\";\n        }\n        return $q;\n    }\n}\n", "<?php\n// papertable.php -- HotCRP helper class for producing paper tables\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass PaperTable {\n    /** @var Conf\n     * @readonly */\n    public $conf;\n    /** @var Contact\n     * @readonly */\n    public $user;\n    /** @var Qrequest\n     * @readonly */\n    private $qreq;\n    /** @var PaperInfo\n     * @readonly */\n    public $prow;\n    /** @var 'p'|'edit'|'re'|'assign'\n     * @readonly */\n    public $mode;\n    /** @var bool\n     * @readonly */\n    private $allow_admin;\n    /** @var bool\n     * @readonly */\n    private $admin;\n    /** @var bool\n     * @readonly */\n    private $allow_edit_final;\n    /** @var bool\n     * @readonly */\n    private $can_view_reviews;\n\n    /** @var ?ReviewInfo */\n    public $rrow;\n    /** @var list<ReviewInfo> */\n    private $all_rrows = [];\n    /** @var list<ReviewInfo> */\n    private $viewable_rrows = [];\n    /** @var array<int,CommentInfo> */\n    private $crows;\n    /** @var array<int,CommentInfo> */\n    private $mycrows;\n    /** @var ?ReviewInfo */\n    public $editrrow;\n    /** @var bool */\n    private $prefer_approvable = false;\n    /** @var bool */\n    private $allreviewslink;\n\n    /** @var bool\n     * @readonly */\n    public $editable = false;\n    /** @var bool */\n    private $useRequest;\n    /** @var ?PaperStatus */\n    private $edit_status;\n    /** @var list<PaperOption> */\n    private $edit_fields;\n    /** @var bool */\n    public $edit_show_all_visibility = false;\n\n    /** @var ?list<MessageItem> */\n    private $pre_status_feedback;\n    /** @var int */\n    private $npapstrip = 0;\n    /** @var bool */\n    private $allow_folds;\n    /** @var bool */\n    private $unfold_all = false;\n    /** @var ?ReviewValues */\n    private $review_values;\n    /** @var array<string,TextPregexes> */\n    private $matchPreg;\n    /** @var array<int,bool> */\n    private $foldmap;\n    /** @var array<string,int> */\n    private $foldnumber;\n\n    /** @var ?CheckFormat */\n    public $cf;\n    /** @var bool */\n    private $quit = false;\n\n    function __construct(Contact $user, Qrequest $qreq, PaperInfo $prow = null) {\n        $this->conf = $user->conf;\n        $this->user = $user;\n        $this->qreq = $qreq;\n        $this->prow = $prow ?? PaperInfo::make_new($user);\n        $this->allow_admin = $user->allow_administer($this->prow);\n        $this->admin = $user->can_administer($this->prow);\n        $this->allow_edit_final = $this->user->allow_edit_final_paper($this->prow);\n\n        if (!$prow || !$this->prow->paperId) {\n            $this->can_view_reviews = false;\n            $this->mode = \"edit\";\n            return;\n        }\n\n        $this->can_view_reviews = $user->can_view_review($prow, null);\n        if (!$this->can_view_reviews && $prow->has_reviewer($user)) {\n            foreach ($prow->reviews_by_user($user) as $rrow) {\n                if ($rrow->reviewStatus >= ReviewInfo::RS_COMPLETED) {\n                    $this->can_view_reviews = true;\n                }\n            }\n        }\n\n        // enumerate allowed modes\n        $page = $qreq->page();\n        if ($page === \"review\" && $this->allow_review()) {\n            $this->mode = \"re\";\n        } else if ($page === \"paper\"\n                   && $this->paper_page_prefers_edit_mode()) {\n            $this->mode = \"edit\";\n        } else {\n            $this->mode = \"p\";\n        }\n        if ($page === \"assign\") {\n            $this->mode = \"assign\";\n        } else {\n            $m = $this->qreq->m ?? $this->qreq->mode;\n            if (($m === \"edit\" || $m === \"pe\")\n                && $page === \"paper\"\n                && ($this->allow_admin || $this->allow_edit())) {\n                $this->mode = \"edit\";\n            } else if (($m === \"re\" || $m === \"rea\")\n                       && $page === \"review\"\n                       && $this->allow_review()) {\n                $this->mode = \"re\";\n                $this->prefer_approvable = $m === \"rea\";\n            } else if ($m === \"view\" || $m === \"r\" || $m === \"main\") {\n                $this->mode = \"p\";\n            }\n        }\n    }\n\n    /** @return bool */\n    private function allow_edit() {\n        return $this->admin || $this->prow->has_author($this->user);\n    }\n\n    /** @return bool */\n    private function allow_review() {\n        return $this->user->can_edit_some_review($this->prow);\n    }\n\n    /** @return bool */\n    private function allow_assign() {\n        return $this->admin || $this->user->can_request_review($this->prow, null, true);\n    }\n\n    /** @return bool */\n    function paper_page_prefers_edit_mode() {\n        return $this->prow->paperId === 0\n            || ($this->prow->has_author($this->user) && $this->conf->time_finalize_paper($this->prow));\n    }\n\n    /** @param ?PaperTable $paperTable\n     * @param Qrequest $qreq\n     * @param bool $error */\n    static function print_header($paperTable, $qreq, $error = false) {\n        $conf = $paperTable ? $paperTable->conf : $qreq->conf();\n        $prow = $paperTable ? $paperTable->prow : null;\n        $format = 0;\n\n        $t = '<header id=\"header-page\" class=\"header-page-submission\"><h1 class=\"paptitle';\n\n        if (!$paperTable) {\n            if (($pid = $qreq->paperId) && ctype_digit($pid)) {\n                $title = \"#$pid\";\n            } else {\n                $title = $conf->_c(\"paper_title\", \"Submission\");\n            }\n            $t .= '\">' . $title;\n        } else if (!$prow->paperId) {\n            $title = $conf->_c(\"paper_title\", \"New submission\");\n            $t .= '\">' . $title;\n        } else {\n            $paperTable->initialize_list();\n            $title = \"#\" . $prow->paperId;\n            $viewable_tags = $prow->viewable_tags($paperTable->user);\n            if ($viewable_tags || $paperTable->user->can_view_tags($prow)) {\n                $t .= ' has-tag-classes';\n                if (($color = $prow->conf->tags()->color_classes($viewable_tags)))\n                    $t .= ' ' . $color;\n            }\n            $t .= '\"><a class=\"noq ulh\" href=\"' . $prow->hoturl()\n                . '\"><span class=\"taghl\"><span class=\"pnum\">' . $title . '</span>'\n                . ' &nbsp; ';\n\n            $highlight_text = null;\n            $title_matches = 0;\n            if ($paperTable->matchPreg\n                && ($highlight = $paperTable->matchPreg[\"ti\"] ?? null)) {\n                $highlight_text = Text::highlight($prow->title, $highlight, $title_matches);\n            }\n\n            if (!$title_matches && ($format = $prow->title_format())) {\n                $t .= '<span class=\"ptitle need-format\" data-format=\"' . $format . '\">';\n            } else {\n                $t .= '<span class=\"ptitle\">';\n            }\n            if ($highlight_text) {\n                $t .= $highlight_text;\n            } else if ($prow->title === \"\") {\n                $t .= \"[No title]\";\n            } else {\n                $t .= htmlspecialchars($prow->title);\n            }\n\n            $t .= '</span></span></a>';\n            if ($viewable_tags && $conf->tags()->has_decoration) {\n                $tagger = new Tagger($paperTable->user);\n                $t .= $tagger->unparse_decoration_html($viewable_tags);\n            }\n        }\n\n        $t .= '</h1></header>';\n        if ($paperTable && $prow->paperId) {\n            $t .= $paperTable->_mode_nav();\n        }\n\n        $amode = $qreq->page();\n        assert(in_array($amode, [\"paper\", \"review\", \"assign\"]));\n        if ($qreq->m === \"edit\"\n            && (!$paperTable || $paperTable->mode === \"edit\")) {\n            $amode = \"edit\";\n        }\n\n        if ($amode === \"paper\") {\n            $id = \"paper-view\";\n        } else if ($amode === \"edit\") {\n            $id = \"paper-edit\";\n        } else {\n            $id = $amode;\n        }\n\n        $body_class = \"paper\";\n        if ($error) {\n            $body_class .= \"-error\";\n        }\n        if ($paperTable\n            && $prow->paperId\n            && $paperTable->user->has_overridable_conflict($prow)\n            && ($paperTable->user->overrides() & Contact::OVERRIDE_CONFLICT)) {\n            $body_class .= \" fold5o\";\n        } else {\n            $body_class .= \" fold5c\";\n        }\n\n        $qreq->print_header($title, $id, [\n            \"action_bar\" => QuicklinksRenderer::make($qreq, $amode),\n            \"title_div\" => $t,\n            \"body_class\" => $body_class,\n            \"paperId\" => $qreq->paperId,\n            \"save_messages\" => !$error\n        ]);\n        if ($format) {\n            echo Ht::unstash_script(\"hotcrp.render_text_page()\");\n        }\n    }\n\n    private function initialize_list() {\n        assert(!$this->qreq->has_active_list());\n        $list = $this->find_session_list();\n        $this->qreq->set_active_list($list);\n\n        $this->matchPreg = [];\n        if (($list = $this->qreq->active_list())\n            && $list->highlight\n            && preg_match('/\\Ap\\/([^\\/]*)\\/([^\\/]*)(?:\\/|\\z)/', $list->listid, $m)) {\n            $hlquery = is_string($list->highlight) ? $list->highlight : urldecode($m[2]);\n            $ps = new PaperSearch($this->user, [\"t\" => $m[1], \"q\" => $hlquery]);\n            $this->matchPreg = $ps->field_highlighters();\n        }\n        if (empty($this->matchPreg)) {\n            $this->matchPreg = null;\n        }\n    }\n\n    private function find_session_list() {\n        $prow = $this->prow;\n        if ($prow->paperId <= 0) {\n            return null;\n        }\n\n        if (($list = SessionList::load_cookie($this->user, \"p\"))\n            && ($list->set_current_id($prow->paperId) || $list->digest)) {\n            return $list;\n        }\n\n        // look up list description\n        $list = null;\n        $listdesc = $this->qreq->ls;\n        if ($listdesc) {\n            if (($opt = PaperSearch::unparse_listid($listdesc))) {\n                $list = $this->try_list($opt, $prow);\n            }\n            if (!$list && preg_match('/\\A(all|s):(.*)\\z/s', $listdesc, $m)) {\n                $list = $this->try_list([\"t\" => $m[1], \"q\" => $m[2]], $prow);\n            }\n            if (!$list && preg_match('/\\A[a-z]+\\z/', $listdesc)) {\n                $list = $this->try_list([\"t\" => $listdesc], $prow);\n            }\n            if (!$list) {\n                $list = $this->try_list([\"q\" => $listdesc], $prow);\n            }\n        }\n\n        // default lists\n        if (!$list) {\n            $list = $this->try_list([], $prow);\n        }\n        if (!$list && $this->user->privChair) {\n            $list = $this->try_list([\"t\" => \"all\"], $prow);\n        }\n\n        return $list;\n    }\n    private function try_list($opt, $prow) {\n        $srch = new PaperSearch($this->user, $opt);\n        if ($srch->test($prow)) {\n            $list = $srch->session_list_object();\n            $list->set_current_id($prow->paperId);\n            return $list;\n        } else {\n            return null;\n        }\n    }\n\n    /** @param bool $editable\n     * @param bool $useRequest\n     * @suppress PhanAccessReadOnlyProperty */\n    function set_edit_status(PaperStatus $status, $editable, $useRequest) {\n        assert($this->mode === \"edit\" && !$this->edit_status);\n        $this->editable = $editable;\n        $this->useRequest = $useRequest;\n        $this->edit_status = $status;\n    }\n\n    function set_review_values(ReviewValues $rvalues = null) {\n        $this->review_values = $rvalues;\n    }\n\n    /** @param MessageItem $mi */\n    function add_pre_status_feedback($mi) {\n        $this->pre_status_feedback[] = $mi;\n    }\n\n    /** @return bool */\n    function can_view_reviews() {\n        return $this->can_view_reviews;\n    }\n\n    /** @param string $abstract\n     * @return bool */\n    private function abstract_foldable($abstract) {\n        return strlen($abstract) > 190;\n    }\n\n    private function _print_foldpaper_div() {\n        $require_folds = $this->mode === \"re\" || $this->mode === \"assign\";\n        $this->allow_folds = $require_folds\n            || ($this->mode === \"p\" && $this->can_view_reviews && !empty($this->all_rrows))\n            || ($this->mode === \"edit\" && !$this->editable);\n\n        // 4=\"t\": topics, 6=\"b\": abstract, 7: [JavaScript abstract expansion],\n        // 8=\"a\": blind authors, 9=\"p\": full authors\n        $foldstorage = [4 => \"p.t\", 6 => \"p.b\", 9 => \"p.p\"];\n        $this->foldnumber = [\"topics\" => 4];\n\n        // other expansions\n        $next_foldnum = 10;\n        foreach ($this->prow->page_fields() as $o) {\n            if ($o->page_order() !== false\n                && $o->page_order() >= 1000\n                && $o->page_order() < 5000\n                && ($o->id <= 0 || $this->user->allow_view_option($this->prow, $o))\n                && $o->page_group !== null) {\n                if (strlen($o->page_group) > 1\n                    && !isset($this->foldnumber[$o->page_group])) {\n                    $this->foldnumber[$o->page_group] = $next_foldnum;\n                    $foldstorage[$next_foldnum] = str_replace(\" \", \"_\", \"p.\" . $o->page_group);\n                    ++$next_foldnum;\n                }\n                if ($o->page_expand) {\n                    $this->foldnumber[$o->formid] = $next_foldnum;\n                    $foldstorage[$next_foldnum] = \"p.\" . $o->formid;\n                    ++$next_foldnum;\n                }\n            }\n        }\n\n        // what is folded?\n        // if highlighting, automatically unfold abstract/authors\n        $vas = $this->user->view_authors_state($this->prow);\n        $this->foldmap = [];\n        foreach ($foldstorage as $num => $k) {\n            $this->foldmap[$num] = $this->allow_folds && !$this->unfold_all;\n        }\n        $this->foldmap[8] = $vas === 1;\n        if ($this->foldmap[6]) {\n            $abstract = $this->highlight($this->prow->abstract_text(), \"ab\", $match);\n            if ($match || !$this->abstract_foldable($abstract)) {\n                $this->foldmap[6] = false;\n            }\n        }\n        if ($this->matchPreg\n            && $vas !== 0\n            && ($this->foldmap[8] || $this->foldmap[9])) {\n            $this->highlight($this->prow->authorInformation, \"au\", $match);\n            if ($match) {\n                $this->foldmap[8] = $this->foldmap[9] = false;\n            }\n        }\n\n        // collect folders\n        $folders = [];\n        foreach ($this->foldmap as $num => $f) {\n            if ($num !== 8 || $vas === 1) {\n                $folders[] = \"fold\" . $num . ($f ? \"c\" : \"o\");\n            }\n        }\n        echo '<div id=\"foldpaper\" class=\"', join(\" \", $folders);\n        if ($require_folds) {\n            echo '\">';\n        } else {\n            echo (empty($folders) ? \"\" : \" \"),\n                'need-fold-storage\" data-fold-storage=\"',\n                htmlspecialchars(json_encode_browser($foldstorage)), '\">';\n            Ht::stash_script(\"hotcrp.fold_storage()\");\n        }\n    }\n\n    /** @param string $field\n     * @return int */\n    private function problem_status_at($field) {\n        if ($this->edit_status) {\n            return $this->edit_status->problem_status_at($field);\n        } else {\n            return 0;\n        }\n    }\n    /** @param string $field\n     * @param string $msg\n     * @param -5|-4|-3|-2|-1|0|1|2|3 $status\n     * @return MessageItem */\n    function msg_at($field, $msg, $status) {\n        $this->edit_status = $this->edit_status ?? new MessageSet;\n        return $this->edit_status->msg_at($field, $msg, $status);\n    }\n    /** @param string $field\n     * @return bool */\n    function has_problem_at($field) {\n        return $this->problem_status_at($field) > 0;\n    }\n    /** @param string $field\n     * @return string */\n    function has_error_class($field) {\n        return $this->has_problem_at($field) ? \" has-error\" : \"\";\n    }\n    /** @param string $field\n     * @return string */\n    function control_class($field, $rest = \"\", $prefix = \"has-\") {\n        return MessageSet::status_class($this->problem_status_at($field), $rest, $prefix);\n    }\n    /** @param list<string> $fields\n     * @return string */\n    function max_control_class($fields, $rest = \"\", $prefix = \"has-\") {\n        $ps = $this->edit_status ? $this->edit_status->max_problem_status_at($fields) : 0;\n        return MessageSet::status_class($ps, $rest, $prefix);\n    }\n\n    /** @param ?string $heading\n     * @return void */\n    function print_editable_option_papt(PaperOption $opt, $heading = null, $rest = []) {\n        if (!isset($rest[\"for\"])) {\n            $for = $opt->readable_formid();\n        } else {\n            $for = $rest[\"for\"] ?? false;\n        }\n        echo '<div class=\"pf pfe';\n        if (!$opt->test_exists($this->prow) || ($rest[\"hidden\"] ?? false)) {\n            echo ' hidden';\n        }\n        if ($opt->exists_condition()) {\n            echo ' want-fieldchange has-edit-condition\" data-edit-condition=\"', htmlspecialchars(json_encode_browser($opt->exists_script_expression($this->prow)));\n            Ht::stash_script('$(hotcrp.paper_edit_conditions)', 'edit_condition');\n        }\n        echo '\"><h3 class=\"', $this->control_class($opt->formid, \"pfehead\");\n        if ($for === \"checkbox\") {\n            echo \" checki\";\n        }\n        if (($tclass = $rest[\"tclass\"] ?? false)) {\n            echo \" \", ltrim($tclass);\n        }\n        if (($id = $rest[\"id\"] ?? false)) {\n            echo '\" id=\"' . $id;\n        }\n        echo '\">', Ht::label($heading ?? $this->edit_title_html($opt),\n            $for === \"checkbox\" ? false : $for, [\"class\" => $opt->required ? \"field-required\" : \"\"]);\n        $vis = $opt->visibility();\n        if ($vis === PaperOption::VIS_ADMIN) {\n            echo '<div class=\"field-visibility\">(hidden from reviewers)</div>';\n        } else if ($this->edit_show_all_visibility) {\n            if ($vis === PaperOption::VIS_AUTHOR) {\n                echo '<div class=\"field-visibility\">(hidden on anonymous submissions)</div>';\n            } else if ($vis === PaperOption::VIS_REVIEW) {\n                echo '<div class=\"field-visibility\">(hidden until review)</div>';\n            } else if ($vis === PaperOption::VIS_CONFLICT) {\n                // XXX\n            }\n        }\n        echo '</h3>';\n        $this->print_field_hint($opt, $rest[\"context_args\"] ?? null);\n        echo Ht::hidden(\"has_{$opt->formid}\", 1);\n    }\n\n    /** @param array<string,int|string> $extra\n     * @return string */\n    private function papt($what, $name, $extra = []) {\n        $fold = $extra[\"fold\"] ?? false;\n        $editfolder = $extra[\"editfolder\"] ?? false;\n        $foldnum = $fold || $editfolder ? $extra[\"foldnum\"] ?? 0 : 0;\n        $foldnumclass = \"\";\n        if ($foldnum || isset($extra[\"foldopen\"])) {\n            $foldnumclass = \" data-fold-target=\\\"{$foldnum}\"\n                . (isset($extra[\"foldopen\"]) ? \"o\\\"\" : \"\\\"\");\n        }\n\n        if (($extra[\"type\"] ?? null) === \"ps\") {\n            list($divclass, $hdrclass) = [\"pst\", \"psfn\"];\n        } else {\n            list($divclass, $hdrclass) = [\"pavt\", \"pavfn\"];\n        }\n\n        $c = \"<div class=\\\"\" . $this->control_class($what, $divclass);\n        if (($fold || $editfolder) && !($extra[\"float\"] ?? false)) {\n            $c .= \" ui js-foldup\\\"\" . $foldnumclass . \">\";\n        } else {\n            $c .= \"\\\">\";\n        }\n        $c .= \"<h3 class=\\\"$hdrclass\";\n        if (isset($extra[\"fnclass\"])) {\n            $c .= \" \" . $extra[\"fnclass\"];\n        }\n        $c .= '\">';\n        if (!$fold) {\n            $n = (is_array($name) ? $name[0] : $name);\n            if ($editfolder) {\n                $c .= \"<a class=\\\"q fn ui js-foldup\\\" \"\n                    . \"href=\\\"\" . $this->conf->selfurl($this->qreq, [\"atab\" => $what])\n                    . \"\\\"\" . $foldnumclass . \">\" . $n\n                    . '<span class=\"t-editor\">\u270e\u00a0</span>'\n                    . \"</a><span class=\\\"fx\\\">\" . $n . \"</span>\";\n            } else {\n                $c .= $n;\n            }\n        } else {\n            '@phan-var-force int $foldnum';\n            '@phan-var-force string $foldnumclass';\n            $c .= '<a class=\"q ui js-foldup\" href=\"\"' . $foldnumclass;\n            if (($title = $extra[\"foldtitle\"] ?? false)) {\n                $c .= ' title=\"' . $title . '\"';\n            }\n            if (isset($this->foldmap[$foldnum])) {\n                $c .= ' role=\"button\" aria-expanded=\"' . ($this->foldmap[$foldnum] ? \"false\" : \"true\") . '\"';\n            }\n            $c .= '>' . expander(null, $foldnum);\n            if (!is_array($name)) {\n                $name = [$name, $name];\n            }\n            if ($name[0] !== $name[1]) {\n                $c .= '<span class=\"fn' . $foldnum . '\">' . $name[1] . '</span><span class=\"fx' . $foldnum . '\">' . $name[0] . '</span>';\n            } else {\n                $c .= $name[0];\n            }\n            $c .= '</a>';\n        }\n        $c .= \"</h3>\";\n        if (isset($extra[\"float\"])) {\n            $c .= $extra[\"float\"];\n        }\n        $c .= \"</div>\";\n        return $c;\n    }\n\n    /** @param string $text\n     * @param string $pregname\n     * @param int &$n\n     * @return string */\n    function highlight($text, $pregname, &$n = null) {\n        if ($this->matchPreg && isset($this->matchPreg[$pregname])) {\n            $text = Text::highlight($text, $this->matchPreg[$pregname], $n);\n        } else {\n            $text = htmlspecialchars($text);\n            $n = 0;\n        }\n        return $text;\n    }\n\n    /** @param string $field\n     * @return string */\n    function messages_at($field) {\n        return $this->edit_status ? $this->edit_status->feedback_html_at($field) : \"\";\n    }\n\n    /** @param PaperOption $opt\n     * @param ?list<mixed> $context_args */\n    function print_field_hint($opt, $context_args = null) {\n        echo $this->messages_at($opt->formid);\n        $fr = new FieldRender(FieldRender::CFHTML);\n        $context_args = $context_args ?? [];\n        $opt->render_description($fr, ...$context_args);\n        if (!$fr->is_empty()) {\n            echo $fr->value_html(\"field-d\");\n        }\n        echo $this->messages_at($opt->formid . \":context\");\n    }\n\n    /** @param PaperOption $opt\n     * @return string */\n    function edit_title_html($opt) {\n        $t = $opt->edit_title();\n        if (str_ends_with($t, \")\")\n            && preg_match('/\\A([^()]* +)(\\([^()]+\\))\\z/', $t, $m)) {\n            return htmlspecialchars($m[1]) . '<span class=\"n\">' . htmlspecialchars($m[2]) . '</span>';\n        } else {\n            return htmlspecialchars($t);\n        }\n    }\n\n    /** @param DocumentInfo $doc\n     * @param array{notooltip?:bool} $options\n     * @return string */\n    static function pdf_stamps_html($doc, $options = null) {\n        $tooltip = !$options || !($options[\"notooltip\"] ?? null);\n        $t = [];\n\n        if ($doc->timestamp > 0) {\n            $t[] = ($tooltip ? '<span class=\"nb need-tooltip\" aria-label=\"Upload time\">' : '<span class=\"nb\">')\n                . '<svg width=\"12\" height=\"12\" viewBox=\"0 0 96 96\" class=\"licon\"><path d=\"M48 6a42 42 0 1 1 0 84 42 42 0 1 1 0-84zm0 10a32 32 0 1 0 0 64 32 32 0 1 0 0-64zM48 19A5 5 0 0 0 43 24V46c0 2.352.37 4.44 1.464 5.536l12 12c4.714 4.908 12-2.36 7-7L53 46V24A5 5 0 0 0 43 24z\"/></svg>'\n                . \" \" . $doc->conf->unparse_time($doc->timestamp) . \"</span>\";\n        }\n\n        $ha = new HashAnalysis($doc->sha1);\n        if ($ha->ok()) {\n            $h = $ha->text_data();\n            $x = '<span class=\"nb checksum';\n            if ($tooltip) {\n                $x .= ' need-tooltip\" data-tooltip=\"';\n                if ($ha->algorithm() === \"sha256\")  {\n                    $x .= \"SHA-256 checksum\";\n                } else if ($ha->algorithm() === \"sha1\") {\n                    $x .= \"SHA-1 checksum\";\n                }\n            }\n            $x .= '\"><svg width=\"12\" height=\"12\" viewBox=\"0 0 48 48\" class=\"licon\"><path d=\"M19 32l-8-8-7 7 14 14 26-26-6-6-19 19zM15 3V10H8v5h7v7h5v-7H27V10h-7V3h-5z\"/></svg> '\n                . '<span class=\"checksum-overflow\">' . $h . '</span>'\n                . '<span class=\"checksum-abbreviation\">' . substr($h, 0, 8) . '</span></span>';\n            $t[] = $x;\n        }\n\n        if (!empty($t)) {\n            return '<span class=\"hint\">' . join(' <span class=\"barsep\">\u00b7</span> ', $t) . \"</span>\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /** @param PaperOption $o */\n    function render_submission(FieldRender $fr, $o) {\n        assert(!$this->editable && $o->id == 0);\n        $fr->title = false;\n        $fr->value = \"\";\n        $fr->value_format = 5;\n\n        // conflicts\n        if ($this->user->isPC\n            && !$this->prow->has_conflict($this->user)\n            && $this->mode !== \"assign\"\n            && $this->mode !== \"contact\"\n            && $this->prow->can_author_edit_paper()) {\n            $fr->value .= Ht::msg('The authors still have <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">time</a> to make changes.', 1);\n        }\n\n        // download\n        if ($this->user->can_view_pdf($this->prow)) {\n            $dprefix = \"\";\n            $dtype = $this->prow->finalPaperStorageId > 1 ? DTYPE_FINAL : DTYPE_SUBMISSION;\n            if (($doc = $this->prow->document($dtype))\n                && $doc->paperStorageId > 1) {\n                if (($stamps = self::pdf_stamps_html($doc))) {\n                    $stamps = '<span class=\"sep\"></span>' . $stamps;\n                }\n                if ($dtype === DTYPE_FINAL) {\n                    $dhtml = $this->conf->option_by_id($dtype)->title_html();\n                } else {\n                    $dhtml = $o->title_html($this->prow->timeSubmitted == 0);\n                }\n                $fr->value .= '<p class=\"pgsm\">' . $dprefix . $doc->link_html('<span class=\"pavfn\">' . $dhtml . '</span>', DocumentInfo::L_REQUIREFORMAT) . $stamps . '</p>';\n            }\n        }\n    }\n\n    /** @param bool $checkbox\n     * @return bool */\n    private function is_ready($checkbox) {\n        if ($this->useRequest) {\n            return !!$this->qreq->submitpaper\n                && ($checkbox\n                    || $this->conf->opt(\"noPapers\")\n                    || $this->prow->paperStorageId > 1);\n        } else {\n            return $this->prow->timeSubmitted > 0\n                || ($checkbox\n                    && $this->prow->can_update_until_deadline()\n                    && (!$this->prow->paperId\n                        || (!$this->conf->opt(\"noPapers\") && $this->prow->paperStorageId <= 1)));\n        }\n    }\n\n    private function print_editable_complete() {\n        if ($this->allow_edit_final) {\n            echo Ht::hidden(\"submitpaper\", 1);\n            return;\n        }\n\n        $can_upd = $this->prow->can_update_until_deadline();\n        $upd = $can_upd ? $this->prow->update_deadline() : 0;\n\n        $checked = $this->is_ready(true);\n        $ready_open = $this->prow->paperStorageId > 1 || $this->conf->opt(\"noPapers\");\n        echo '<div class=\"ready-container ',\n            $ready_open ? \"foldo\" : \"foldc\",\n            '\"><div class=\"checki fx\"><span class=\"checkc\">',\n            Ht::checkbox(\"submitpaper\", 1, $checked, [\"disabled\" => !$ready_open]),\n            \"</span>\";\n\n        // script.js depends on the HTML here\n        $upd_html = \"\";\n        if (Conf::$now <= $upd) {\n            // can update until future deadline\n            $upd_html = $this->conf->unparse_time_with_local_span($upd);\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is ready for review\") . \"</strong>\", null, [\"class\" => $checked ? null : \"is-error\"]),\n                '<p class=\"feedback is-urgent-note if-unready ', $checked ? \"hidden\" : \"\",\n                '\">Submissions not marked ready for review by the deadline will not be considered.</p>';\n        } else if ($can_upd) {\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is ready for review\") . \"</strong>\");\n        } else {\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is complete\") . \"</strong>\", null, [\"class\" => $checked ? null : \"is-error\"]),\n                '<p class=\"feedback is-urgent-note\">You must complete the submission before the deadline or it will not be reviewed. Completed submissions are frozen and cannot be changed further.</p>';\n        }\n        echo \"</div></div>\\n\";\n\n        // update message\n        if (Conf::$now <= $upd) {\n            echo '<div class=\"mt-2 feedback is-note\">You can update the submission until ', $upd_html, '.</div>';\n        }\n    }\n\n    static function document_upload_input($inputid, $dtype, $accepts) {\n        $t = '<input id=\"' . $inputid . '\" type=\"file\" name=\"' . $inputid . '\"';\n        if ($accepts !== null && count($accepts) == 1) {\n            $t .= ' accept=\"' . $accepts[0]->mimetype . '\"';\n        }\n        return $t . ' size=\"30\" class=\"uich document-uploader\">';\n    }\n\n    function render_abstract(FieldRender $fr, PaperOption $o) {\n        $fr->title = false;\n        $fr->value_format = 5;\n\n        $html = $this->highlight($this->prow->abstract_text(), \"ab\", $match);\n        if (trim($html) === \"\") {\n            if ($this->conf->opt(\"noAbstract\"))\n                return;\n            $html = \"[No abstract]\";\n        }\n        $extra = [];\n        if ($this->allow_folds && $this->abstract_foldable($html)) {\n            $extra = [\"fold\" => \"paper\", \"foldnum\" => 6,\n                      \"foldtitle\" => \"Toggle full abstract\"];\n        }\n        $fr->value = '<div class=\"paperinfo-abstract\"><div class=\"pg\">'\n            . $this->papt(\"abstract\", $o->title_html(), $extra)\n            . '<div class=\"pavb abstract';\n        if (!$match && ($format = $this->prow->format_of($html))) {\n            $fr->value .= ' need-format\" data-format=\"' . $format . '\">' . $html;\n        } else {\n            $fr->value .= ' format0\">' . Ht::format0_html($html);\n        }\n        $fr->value .= \"</div></div></div>\";\n        if ($extra) {\n            $fr->value .= '<div class=\"fn6 fx7 longtext-fader\"></div>'\n                . '<div class=\"fn6 fx7 longtext-expander\"><a class=\"ulh ui js-foldup\" href=\"\" role=\"button\" aria-expanded=\"false\" data-fold-target=\"6\">[more]</a></div>'\n                . Ht::unstash_script(\"hotcrp.render_text_page()\");\n        }\n    }\n\n    /** @param list<Author> $table\n     * @param string $type\n     * @param ?Contact $viewAs\n     * @return string */\n    private function authorData($table, $type, $viewAs = null) {\n        if ($this->matchPreg && isset($this->matchPreg[\"au\"])) {\n            $highpreg = $this->matchPreg[\"au\"];\n        } else {\n            $highpreg = false;\n        }\n        $names = [];\n\n        if (empty($table)) {\n            return \"[No authors]\";\n        } else if ($type === \"last\") {\n            foreach ($table as $au) {\n                $n = Text::nameo($au, NAME_P|NAME_I);\n                $names[] = Text::highlight($n, $highpreg);\n            }\n            return join(\", \", $names);\n        } else {\n            foreach ($table as $au) {\n                $n = trim(Text::highlight(\"$au->firstName $au->lastName\", $highpreg));\n                if ($au->email !== \"\") {\n                    $s = Text::highlight($au->email, $highpreg);\n                    $ehtml = htmlspecialchars($au->email);\n                    $e = \"&lt;<a href=\\\"mailto:{$ehtml}\\\" class=\\\"q\\\">{$s}</a>&gt;\";\n                } else {\n                    $e = \"\";\n                }\n                $t = ($n === \"\" ? $e : $n);\n                if ($au->affiliation !== \"\") {\n                    $s = Text::highlight($au->affiliation, $highpreg);\n                    $t .= \" <span class=\\\"auaff\\\">({$s})</span>\";\n                }\n                if ($n !== \"\" && $e !== \"\") {\n                    $t .= \" \" . $e;\n                }\n                $t = trim($t);\n                if ($au->email !== \"\"\n                    && $au->contactId\n                    && $viewAs !== null\n                    && $viewAs->email !== $au->email\n                    && $viewAs->privChair) {\n                    $t .= \" <a href=\\\"\"\n                        . $this->conf->selfurl($this->qreq, [\"actas\" => $au->email])\n                        . \"\\\">\" . Ht::img(\"viewas.png\", \"[Act as]\", [\"title\" => \"Act as \" . Text::nameo($au, NAME_P)]) . \"</a>\";\n                }\n                $names[] = '<p class=\"odname\">' . $t . '</p>';\n            }\n            return join(\"\\n\", $names);\n        }\n    }\n\n    /** @return array{list<Author>,list<Author>} */\n    private function _analyze_authors() {\n        // clean author information\n        $aulist = $this->prow->author_list();\n        if (empty($aulist)) {\n            return [[], []];\n        }\n\n        // find contact author information, combine with author table\n        // XXX fix this, it too aggressively combines information!!!!\n        $result = $this->conf->qe(\"select contactId, firstName, lastName, '' affiliation, email from ContactInfo where contactId?a\", array_keys($this->prow->contacts()));\n        $contacts = [];\n        while ($result && ($row = $result->fetch_object(\"Author\"))) {\n            $match = -1;\n            for ($i = 0; $match < 0 && $i < count($aulist); ++$i) {\n                if (strcasecmp($aulist[$i]->email, $row->email) == 0)\n                    $match = $i;\n            }\n            if (($row->firstName !== \"\" || $row->lastName !== \"\") && $match < 0) {\n                $contact_n = $row->firstName . \" \" . $row->lastName;\n                $contact_preg = str_replace(\"\\\\.\", \"\\\\S*\", \"{\\\\b\" . preg_quote($row->firstName) . \"\\\\b.*\\\\b\" . preg_quote($row->lastName) . \"\\\\b}i\");\n                for ($i = 0; $match < 0 && $i < count($aulist); ++$i) {\n                    $f = $aulist[$i]->firstName;\n                    $l = $aulist[$i]->lastName;\n                    if (($f !== \"\" || $l !== \"\") && $aulist[$i]->email === \"\") {\n                        $author_n = $f . \" \" . $l;\n                        $author_preg = str_replace(\"\\\\.\", \"\\\\S*\", \"{\\\\b\" . preg_quote($f) . \"\\\\b.*\\\\b\" . preg_quote($l) . \"\\\\b}i\");\n                        if (preg_match($contact_preg, $author_n)\n                            || preg_match($author_preg, $contact_n))\n                            $match = $i;\n                    }\n                }\n            }\n            if ($match >= 0) {\n                $au = $aulist[$match];\n                if ($au->email === \"\") {\n                    $au->email = $row->email;\n                }\n            } else {\n                $contacts[] = $au = $row;\n                $au->nonauthor = true;\n            }\n            $au->contactId = (int) $row->contactId;\n        }\n        Dbl::free($result);\n\n        usort($contacts, $this->conf->user_comparator());\n        return [$aulist, $contacts];\n    }\n\n    function render_authors(FieldRender $fr, PaperOption $o) {\n        $fr->title = false;\n        $fr->value_format = 5;\n\n        $vas = $this->user->view_authors_state($this->prow);\n        if ($vas === 0) {\n            $fr->value = '<div class=\"pg\">'\n                . $this->papt(\"authors\", $o->title_html(0))\n                . '<div class=\"pavb\"><i>Hidden</i></div>'\n                . \"</div>\\n\\n\";\n            return;\n        }\n\n        // clean author information\n        list($aulist, $contacts) = $this->_analyze_authors();\n\n        // \"author\" or \"authors\"?\n        $auname = $o->title_html(count($aulist));\n        if ($vas === 1) {\n            $auname .= \" <span class=\\\"n\\\">(deanonymized)</span>\";\n        } else if ($this->user->act_author_view($this->prow)) {\n            // Tell authors whether they are blind.\n            // Accepted papers are sometimes not blind.\n            if ($this->prow->outcome_sign <= 0\n                || !$this->user->can_view_decision($this->prow)\n                || $this->conf->setting(\"seedec_hideau\")) {\n                $sb = $this->conf->submission_blindness();\n                if ($sb === Conf::BLIND_ALWAYS\n                    || ($sb === Conf::BLIND_OPTIONAL && $this->prow->blind)) {\n                    $auname .= \" <span class=\\\"n\\\">(anonymous)</span>\";\n                } else if ($sb === Conf::BLIND_UNTILREVIEW) {\n                    $auname .= \" <span class=\\\"n\\\">(anonymous until review)</span>\";\n                }\n            }\n        }\n\n        // header with folding\n        $fr->value = '<div class=\"pg\">'\n            . '<div class=\"'\n            . $this->control_class(\"authors\", \"pavt ui js-aufoldup\")\n            . '\"><h3 class=\"pavfn\">';\n        if ($vas === 1 || $this->allow_folds) {\n            $fr->value .= '<a class=\"q ui js-aufoldup\" href=\"\" title=\"Toggle author display\" role=\"button\" aria-expanded=\"' . ($this->foldmap[8] ? \"false\" : \"true\") . '\">';\n        }\n        if ($vas === 1) {\n            $fr->value .= '<span class=\"fn8\">' . $o->title_html(0) . '</span><span class=\"fx8\">';\n        }\n        if ($this->allow_folds) {\n            $fr->value .= expander(null, 9);\n        } else if ($vas === 1) {\n            $fr->value .= expander(false);\n        }\n        $fr->value .= $auname;\n        if ($vas === 1) {\n            $fr->value .= '</span>';\n        }\n        if ($vas === 1 || $this->allow_folds) {\n            $fr->value .= '</a>';\n        }\n        if ($this->admin) {\n            $mailt = \"s\";\n            if ($this->prow->timeSubmitted <= 0) {\n                $mailt = \"all\";\n            } else if ($this->prow->outcome !== 0 && $this->prow->can_author_view_decision()) {\n                $dec = $this->prow->decision();\n                if ($dec->category !== DecisionInfo::CAT_NONE) {\n                    $mailt = $dec->category === DecisionInfo::CAT_YES ? \"dec:yes\" : \"dec:no\";\n                }\n            }\n            $fr->value .= ' <a class=\"fx9 q\" href=\"'\n                . $this->conf->hoturl(\"mail\", [\"t\" => $mailt, \"plimit\" => 1, \"q\" => $this->prow->paperId])\n                . '\">\u2709\ufe0f</a>';\n        }\n        $fr->value .= '</h3></div>';\n\n        // contents\n        $fr->value .= '<div class=\"pavb\">';\n        if ($vas === 1) {\n            $fr->value .= '<a class=\"q fn8 ui js-aufoldup\" href=\"\" title=\"Toggle author display\">'\n                . '+&nbsp;<i>Hidden</i>'\n                . '</a><div class=\"fx8\">';\n        }\n        if ($this->allow_folds) {\n            $fr->value .= '<div class=\"fn9\">'\n                . $this->authorData($aulist, \"last\", null)\n                . ' <a class=\"ui js-aufoldup\" href=\"\">[details]</a>'\n                . '</div><div class=\"fx9\">';\n        }\n        $fr->value .= $this->authorData($aulist, \"col\", $this->user);\n        if ($this->allow_folds) {\n            $fr->value .= '</div>';\n        }\n        if ($vas === 1) {\n            $fr->value .= '</div>';\n        }\n        $fr->value .= \"</div></div>\\n\\n\";\n\n        // contacts\n        if (!empty($contacts)\n            && ($this->editable\n                || $this->mode !== \"edit\"\n                || $this->prow->timeSubmitted <= 0)) {\n            $contacts_option = $this->conf->option_by_id(PaperOption::CONTACTSID);\n            $fr->value .= '<div class=\"pg fx9' . ($vas > 1 ? \"\" : \" fx8\") . '\">'\n                . $this->papt(\"contacts\", $contacts_option->title_html(count($contacts)))\n                . '<div class=\"pavb\">'\n                . $this->authorData($contacts, \"col\", $this->user)\n                . \"</div></div>\\n\\n\";\n        }\n    }\n\n    /** @param PaperOption $o\n     * @param FieldRender $fr */\n    private function clean_render($o, $fr) {\n        if ($fr->title === false) {\n            assert($fr->value_format === 5);\n            return;\n        }\n\n        if ($fr->title === null) {\n            $fr->title = $o->title();\n        }\n\n        $fr->value = $fr->value_html();\n        $fr->value_format = 5;\n\n        if ($fr->title !== \"\" && $o->page_group && !$fr->value_long) {\n            $title = htmlspecialchars($fr->title);\n            if ($fr->value === \"\") {\n                $fr->value = \"<h3 class=\\\"pavfn\\\">{$title}</h3>\";\n            } else if ($fr->value[0] === \"<\"\n                       && preg_match('/\\A((?:<(?:div|ul|ol|li).*?>)*)/', $fr->value, $cm)) {\n                $fr->value = \"{$cm[1]}<h3 class=\\\"pavfn pavfnsp\\\">{$title}:</h3> \"\n                    . substr($fr->value, strlen($cm[1]));\n            } else {\n                $fr->value = \"<h3 class=\\\"pavfn pavfnsp\\\">{$title}:</h3> {$fr->value}\";\n            }\n            $fr->value_long = false;\n            $fr->title = \"\";\n        }\n    }\n\n    /** @param list<PaperTableFieldRender> $renders\n     * @param int $first\n     * @param int $last\n     * @param int $vos\n     * @return string */\n    private function _group_name_html($renders, $first, $last, $vos) {\n        $group_names = [];\n        $group_flags = 0;\n        for ($i = $first; $i !== $last; ++$i) {\n            if ($renders[$i]->view_state >= $vos) {\n                $o = $renders[$i]->option;\n                $group_names[] = $o->title();\n                if ($o->id === -1005) {\n                    $group_flags |= 1;\n                } else if ($o->has_document()) {\n                    $group_flags |= 2;\n                } else {\n                    $group_flags |= 4;\n                }\n            }\n        }\n        $group_types = [];\n        if ($group_flags & 1) {\n            $group_types[] = \"Topics\";\n        }\n        if ($group_flags & 2) {\n            $group_types[] = \"Attachments\";\n        }\n        if ($group_flags & 4) {\n            $group_types[] = \"Options\";\n        }\n        return htmlspecialchars($this->conf->_c(\"field_group\", $renders[$first]->option->page_group, commajoin($group_names), commajoin($group_types)));\n    }\n\n    private function _print_pre_status_feedback() {\n        if (($psf = MessageSet::feedback_html($this->pre_status_feedback ?? []))) {\n            echo '<div class=\"mb-3\">', $psf, '</div>';\n        }\n    }\n\n    private function _print_accept_decline() {\n        $rrow = $this->editrrow;\n        if ($rrow->reviewId <= 0\n            || $rrow->reviewType >= REVIEW_SECONDARY\n            || $rrow->reviewStatus > ReviewInfo::RS_ACCEPTED\n            || (!$this->user->can_administer($this->prow)\n                && (!$this->user->is_my_review($rrow)\n                    || !$this->user->time_review($this->prow, $rrow)))) {\n            return;\n        }\n        $acc = $rrow->reviewStatus === ReviewInfo::RS_ACCEPTED;\n        echo Ht::form([\"method\" => \"post\", \"class\" => ($acc ? \"msg\" : \"msg msg-warning\") . ' d-flex demargin remargin-left remargin-right']),\n            '<div class=\"flex-grow-1 align-self-center\">';\n        if ($acc) {\n            echo 'Thank you for confirming your intention to finish this review.';\n        } else if ($rrow->requestedBy\n                   && ($requester = $this->conf->user_by_id($rrow->requestedBy, USER_SLICE))) {\n            echo 'Please take a moment to accept or decline ' . Text::nameo_h($requester, NAME_P) . '\u2019s review request.';\n        } else {\n            echo 'Please take a moment to accept or decline our review request.';\n        }\n        echo '</div><div class=\"aabr align-self-center\">';\n        if ($acc) {\n            echo '<div class=\"aabut\">', Ht::submit(\"Decline review after all\", [\"class\" => \"btn-danger ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/declinereview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>';\n        } else {\n            echo '<div class=\"aabut\">', Ht::submit(\"Decline\", [\"class\" => \"btn-danger ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/declinereview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>',\n                '<div class=\"aabut\">', Ht::submit(\"Accept\", [\"class\" => \"btn-success ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/acceptreview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>';\n        }\n        echo '</div></form>';\n        if ($rrow->reviewStatus === ReviewInfo::RS_EMPTY) {\n            $this->unfold_all = true;\n        }\n    }\n\n    private function _print_decline_reason(Contact $capu, ReviewRefusalInfo $refusal) {\n        echo Ht::form($this->conf->hoturl(\"=api/declinereview\", [\"p\" => $this->prow->paperId, \"r\" => $refusal->refusedReviewId, \"smsg\" => 1]),\n            [\"class\" => \"msg msg-warning demargin remargin-left remargin-right ui-submit js-acceptish-review\"]);\n        echo '<p>You have declined to complete this review. Thank you for informing us.</p>',\n            '<div class=\"f-i mt-3\"><label for=\"declinereason\">Optional explanation</label>',\n            (empty($refusal->reason) ? '<div class=\"field-d\">If you\u2019d like, you may enter a brief explanation here.</div>' : ''),\n            Ht::textarea(\"reason\", $refusal->reason ?? \"\", [\"rows\" => 3, \"cols\" => 40, \"spellcheck\" => true, \"class\" => \"w-text\", \"id\" => \"declinereason\"]),\n            '</div><div class=\"aab mt-3\">',\n            '<div class=\"aabut\">', Ht::submit(\"Save explanation\", [\"class\" => \"btn-primary\"]), '</div>';\n        if ($this->conf->time_review($refusal->reviewRound, $refusal->refusedReviewType, true)) {\n            echo '<div class=\"aabut\">', Ht::submit(\"Accept review after all\", [\"formaction\" => $this->conf->hoturl(\"=api/acceptreview\", [\"p\" => $this->prow->paperId, \"r\" => $refusal->refusedReviewId, \"smsg\" => 1]), \"class\" => \"ui js-acceptish-review\"]), '</div>';\n        }\n        echo '</div></form>';\n    }\n\n    private function _print_normal_body() {\n        // pre-status feedback\n        $this->_print_pre_status_feedback();\n\n        // review accept/decline message\n        if ($this->mode === \"re\"\n            && $this->editrrow\n            && $this->editrrow->reviewStatus <= ReviewInfo::RS_ACCEPTED\n            && $this->user->is_my_review($this->editrrow)) {\n            $this->_print_accept_decline();\n        } else if ($this->mode === \"p\"\n                   && $this->qreq->page() === \"review\") {\n            $capuid = $this->user->capability(\"@ra{$this->prow->paperId}\");\n            $capu = $capuid ? $this->conf->user_by_id($capuid, USER_SLICE) : $this->user;\n            $refusals = $capu ? $this->prow->review_refusals_by_user($capu) : [];\n            if ($refusals && $refusals[0]->refusedReviewId) {\n                $this->_print_decline_reason($capu, $refusals[0]);\n            } else if ($capuid) {\n                echo '<div class=\"msg msg-warning demargin remargin-left remargin-right\"><p>You have declined to complete a review. Thank you for informing us.</p></div>';\n            }\n        }\n\n        $this->_print_foldpaper_div();\n\n        // status\n        list($class, $name) = $this->prow->status_class_and_name($this->user);\n        echo '<p class=\"pgsm\"><span class=\"pstat ', $class, '\">',\n            htmlspecialchars($name), \"</span></p>\";\n\n        $renders = [];\n        $fr = new FieldRender(FieldRender::CPAGE, $this->user);\n        $fr->table = $this;\n        foreach ($this->prow->page_fields() as $o) {\n            if ($o->page_order() === false\n                || $o->page_order() < 1000\n                || $o->page_order() >= 5000\n                || ($vos = $this->user->view_option_state($this->prow, $o)) === 0) {\n                continue;\n            }\n\n            $fr->clear();\n            $o->render($fr, $this->prow->force_option($o));\n            if (!$fr->is_empty()) {\n                $this->clean_render($o, $fr);\n                $renders[] = new PaperTableFieldRender($o, $vos, $fr);\n            }\n        }\n\n        $lasto1 = null;\n        $in_paperinfo_i = false;\n        for ($first = 0; $first !== count($renders); $first = $last) {\n            // compute size of group\n            $o1 = $renders[$first]->option;\n            $last = $first + 1;\n            if ($o1->page_group !== null && $this->allow_folds) {\n                while ($last !== count($renders)\n                       && $renders[$last]->option->page_group === $o1->page_group) {\n                    ++$last;\n                }\n            }\n\n            $nvos1 = 0;\n            for ($i = $first; $i !== $last; ++$i) {\n                if ($renders[$i]->view_state === 1) {\n                    ++$nvos1;\n                }\n            }\n\n            // change column\n            if ($o1->page_order() >= 2000) {\n                if (!$lasto1 || $lasto1->page_order() < 2000) {\n                    echo '<div class=\"paperinfo\"><div class=\"paperinfo-c\">';\n                } else if ($o1->page_order() >= 3000\n                           && $lasto1->page_order() < 3000) {\n                    if ($in_paperinfo_i) {\n                        echo '</div>'; // paperinfo-i\n                        $in_paperinfo_i = false;\n                    }\n                    echo '</div><div class=\"paperinfo-c\">';\n                }\n                if ($o1->page_expand) {\n                    if ($in_paperinfo_i) {\n                        echo '</div>';\n                        $in_paperinfo_i = false;\n                    }\n                    echo '<div class=\"paperinfo-i paperinfo-i-expand\">';\n                } else if (!$in_paperinfo_i) {\n                    echo '<div class=\"paperinfo-i\">';\n                    $in_paperinfo_i = true;\n                }\n            }\n\n            // echo start of group\n            if ($o1->page_group !== null && $this->allow_folds) {\n                if ($nvos1 === 0 || $nvos1 === $last - $first) {\n                    $group_html = $this->_group_name_html($renders, $first, $last, $nvos1 === 0 ? 2 : 1);\n                } else {\n                    $group_html = $this->_group_name_html($renders, $first, $last, 2);\n                    $gn1 = $this->_group_name_html($renders, $first, $last, 1);\n                    if ($group_html !== $gn1) {\n                        $group_html = \"<span class=\\\"fn8\\\">{$group_html}</span><span class=\\\"fx8\\\">{$gn1}</span>\";\n                    }\n                }\n\n                $class = \"pg\";\n                if ($nvos1 === $last - $first) {\n                    $class .= \" fx8\";\n                }\n                $foldnum = $this->foldnumber[$o1->page_group] ?? 0;\n                if ($foldnum && $renders[$first]->title !== \"\") {\n                    $group_html = \"<span class=\\\"fn{$foldnum}\\\">{$group_html}</span><span class=\\\"fx{$foldnum}\\\">\" . $renders[$first]->title . '</span>';\n                    $renders[$first]->title = false;\n                    $renders[$first]->value = '<div class=\"'\n                        . ($renders[$first]->value_long ? \"pg\" : \"pgsm\")\n                        . ' pavb\">' . $renders[$first]->value . '</div>';\n                }\n                echo '<div class=\"', $class, '\">';\n                if ($foldnum) {\n                    echo '<div class=\"pavt ui js-foldup\" data-fold-target=\"', $foldnum, '\">',\n                        '<h3 class=\"pavfn\">',\n                        '<a class=\"q ui js-foldup\" href=\"\" data-fold-target=\"', $foldnum, '\" title=\"Toggle visibility\" role=\"button\" aria-expanded=\"',\n                        $this->foldmap[$foldnum] ? \"false\" : \"true\",\n                        '\">', expander(null, $foldnum),\n                        $group_html,\n                        '</a></h3></div><div class=\"pg fx', $foldnum, '\">';\n                } else {\n                    echo '<div class=\"pavt\"><h3 class=\"pavfn\">',\n                        $group_html,\n                        '</h3></div><div class=\"pg\">';\n                }\n            }\n\n            // echo contents\n            for ($i = $first; $i !== $last; ++$i) {\n                $x = $renders[$i];\n                if ($x->value_long === false\n                    || (!$x->value_long && $x->title === \"\")) {\n                    $class = \"pgsm\";\n                } else {\n                    $class = \"pg\";\n                }\n                if ($x->value === \"\"\n                    || ($x->title === \"\" && preg_match('{\\A(?:[^<]|<a|<span)}', $x->value))) {\n                    $class .= \" outdent\";\n                }\n                if ($x->view_state === 1) {\n                    $class .= \" fx8\";\n                }\n                if ($x->title === false) {\n                    echo $x->value;\n                } else if ($x->title === \"\") {\n                    echo '<div class=\"', $class, '\">', $x->value, '</div>';\n                } else if ($x->value === \"\") {\n                    echo '<div class=\"', $class, '\"><h3 class=\"pavfn\">', $x->title, '</h3></div>';\n                } else {\n                    echo '<div class=\"', $class, '\"><div class=\"pavt\"><h3 class=\"pavfn\">', $x->title, '</h3></div><div class=\"pavb\">', $x->value, '</div></div>';\n                }\n            }\n\n            // echo end of group\n            if ($o1->page_group !== null && $this->allow_folds) {\n                echo '</div></div>';\n            }\n            if ($o1->page_order() >= 2000\n                && $o1->page_expand) {\n                echo '</div>';\n            }\n            $lasto1 = $o1;\n        }\n\n        // close out display\n        if ($in_paperinfo_i) {\n            echo '</div>';\n        }\n        if ($lasto1 && $lasto1->page_order() >= 2000) {\n            echo '</div></div>';\n        }\n        echo '</div>'; // #foldpaper\n    }\n\n\n    private function _papstrip_framework() {\n        if (!$this->npapstrip) {\n            echo '<article class=\"pcontainer\"><div class=\"pcard-left',\n                '\"><div class=\"pspcard\"><div class=\"ui pspcard-fold\">',\n                '<div style=\"float:right;margin-left:1em;cursor:pointer\"><span class=\"psfn\">More ', expander(true), '</span></div>';\n\n            if (($viewable = $this->prow->sorted_viewable_tags($this->user))) {\n                $tagger = new Tagger($this->user);\n                echo '<span class=\"psfn\">Tags:</span> ',\n                    $tagger->unparse_link($viewable);\n            } else {\n                echo '<hr class=\"c\">';\n            }\n\n            echo '</div><div class=\"pspcard-open\">';\n        }\n        ++$this->npapstrip;\n    }\n\n    private function _papstripBegin($foldid = null, $folded = null, $extra = null) {\n        $this->_papstrip_framework();\n        echo '<div';\n        if ($foldid) {\n            echo \" id=\\\"fold{$foldid}\\\"\";\n        }\n        echo ' class=\"psc';\n        if ($foldid) {\n            echo \" fold\", ($folded ? \"c\" : \"o\");\n        }\n        if ($extra) {\n            if (isset($extra[\"class\"])) {\n                echo \" \", $extra[\"class\"];\n            }\n            foreach ($extra as $k => $v) {\n                if ($k !== \"class\")\n                    echo \"\\\" $k=\\\"\", str_replace(\"\\\"\", \"&quot;\", $v);\n            }\n        }\n        echo '\">';\n    }\n\n    private function _print_ps_collaborators() {\n        if (!$this->conf->setting(\"sub_collab\")\n            || !$this->prow->collaborators\n            || strcasecmp(trim($this->prow->collaborators), \"None\") == 0) {\n            return;\n        }\n        $data = $this->highlight($this->prow->collaborators(), \"co\", $match);\n        $option = $this->conf->option_by_id(PaperOption::COLLABORATORSID);\n        $this->_papstripBegin(\"pscollab\", false, [\"data-fold-storage\" => \"p.collab\", \"class\" => \"need-fold-storage\"]);\n        echo Ht::unstash_script(\"hotcrp.fold_storage.call(\\$\\$(\\\"foldpscollab\\\"))\"),\n            $this->papt(\"collaborators\", $option->title_html(),\n                        [\"type\" => \"ps\", \"fold\" => \"pscollab\"]),\n            '<ul class=\"fx x namelist-columns\">';\n        foreach (explode(\"\\n\", $data) as $line) {\n            echo '<li class=\"od\">', $line, '</li>';\n        }\n        echo '</ul></div>', \"\\n\";\n    }\n\n    private function _print_ps_pc_conflicts() {\n        assert(!$this->editable && $this->prow->paperId);\n        $pcconf = [];\n        $pcm = $this->conf->pc_members();\n        foreach ($this->prow->pc_conflicts() as $id => $cflt) {\n            if (Conflict::is_conflicted($cflt->conflictType)) {\n                $p = $pcm[$id];\n                $pcconf[$p->pc_index] = $this->user->reviewer_html_for($p);\n            }\n        }\n        if (empty($pcconf)) {\n            $pcconf[] = 'None';\n        }\n        ksort($pcconf);\n        $option = $this->conf->option_by_id(PaperOption::PCCONFID);\n        $this->_papstripBegin(\"pspcconf\", $this->allow_folds, [\"data-fold-storage\" => \"p.pcconf\", \"class\" => \"need-fold-storage\"]);\n        echo Ht::unstash_script(\"hotcrp.fold_storage.call(\\$\\$(\\\"foldpspcconf\\\"))\"),\n            $this->papt(\"pc_conflicts\", $option->title_html(),\n                        [\"type\" => \"ps\", \"fold\" => \"pspcconf\"]),\n            '<ul class=\"fx x namelist-columns\">';\n        foreach ($pcconf as $n) {\n            echo '<li class=\"od\">', $n, '</li>';\n        }\n        echo '</ul></div>', \"\\n\";\n    }\n\n    private function _papstripLeadShepherd($type, $name) {\n        $editable = $type === \"manager\" ? $this->user->privChair : $this->admin;\n        $extrev_shepherd = $type === \"shepherd\" && $this->conf->setting(\"extrev_shepherd\");\n\n        $field = $type . \"ContactId\";\n        if ($this->prow->$field == 0 && !$editable) {\n            return;\n        }\n        $value = $this->prow->$field;\n        $id = \"{$type}_{$this->prow->paperId}\";\n\n        $this->_papstripBegin($type, true, $editable ? [\"class\" => \"ui-unfold js-unfold-pcselector js-unfold-focus need-paper-select-api\"] : \"\");\n        echo $this->papt($type, $editable ? Ht::label($name, $id) : $name,\n            [\"type\" => \"ps\", \"fold\" => $editable ? $type : false]);\n        if (!$value) {\n            $n = \"\";\n        } else if (($p = $this->conf->user_by_id($value, USER_SLICE))\n                   && ($p->isPC\n                       || ($extrev_shepherd && $this->prow->review_type($p) == REVIEW_EXTERNAL))) {\n            $n = $this->user->reviewer_html_for($p);\n        } else {\n            $n = \"<strong>[removed from PC]</strong>\";\n        }\n        echo '<div class=\"pscopen\"><p class=\"fn odname js-psedit-result\">',\n            $n, '</p></div>';\n\n        if ($editable) {\n            $this->conf->stash_hotcrp_pc($this->user);\n            $selopt = \"0 assignable\";\n            if ($type === \"shepherd\" && $this->conf->setting(\"extrev_shepherd\")) {\n                $selopt .= \" extrev\";\n            }\n            echo '<form class=\"ui-submit uin fx\">',\n                Ht::select($type, [], 0, [\"class\" => \"w-99 want-focus\", \"data-pcselector-options\" => $selopt . \" selected\", \"data-pcselector-selected\" => $value, \"id\" => $id]),\n                '</form>';\n        }\n\n        echo \"</div>\\n\";\n    }\n\n    private function papstripLead() {\n        $this->_papstripLeadShepherd(\"lead\", \"Discussion lead\");\n    }\n\n    private function papstripShepherd() {\n        $this->_papstripLeadShepherd(\"shepherd\", \"Shepherd\");\n    }\n\n    private function papstripManager() {\n        $this->_papstripLeadShepherd(\"manager\", \"Paper administrator\");\n    }\n\n    private function papstripTags() {\n        if (!$this->prow->paperId || !$this->user->can_view_tags($this->prow)) {\n            return;\n        }\n\n        $tags = $this->prow->all_tags_text();\n        $editable = $this->user->can_edit_some_tag($this->prow);\n        $is_sitewide = $editable && !$this->user->can_edit_most_tags($this->prow);\n        if ($tags === \"\" && !$editable) {\n            return;\n        }\n\n        // Note that tags MUST NOT contain HTML special characters.\n        $tagger = new Tagger($this->user);\n        $viewable = $this->prow->sorted_viewable_tags($this->user);\n\n        $tx = $tagger->unparse_link($viewable);\n        $unfolded = $editable && ($this->has_problem_at(\"tags\") || $this->qreq->atab === \"tags\");\n        $id = \"tags {$this->prow->paperId}\";\n\n        $this->_papstripBegin(\"tags\", true, $editable ? [\"class\" => \"need-tag-form ui-unfold js-unfold-focus\"] : []);\n\n        if ($editable) {\n            echo Ht::form($this->prow->hoturl(), [\"data-pid\" => $this->prow->paperId, \"data-no-tag-report\" => $unfolded ? 1 : null]);\n        }\n\n        echo $this->papt(\"tags\", $editable ? Ht::label(\"Tags\", $id) : \"Tags\",\n            [\"type\" => \"ps\", \"fold\" => $editable ? \"tags\" : false, \"foldopen\" => true]);\n        if ($editable) {\n            $treport = Tags_API::tagmessages($this->user, $this->prow, null);\n            $treport_warn = array_filter($treport->message_list, function ($mi) {\n                return $mi->status > 0;\n            });\n\n            // uneditable\n            if (empty($treport_warn)) {\n                echo '<ul class=\"fn want-tag-report-warnings feedback-list hidden\"></ul>';\n            } else {\n                echo '<ul class=\"fn want-tag-report-warnings feedback-list\"><li>',\n                    join(\"</li><li>\", MessageSet::feedback_html_items($treport_warn)), \"</li></ul>\";\n            }\n\n            echo '<div class=\"fn js-tag-result\">', $tx === \"\" ? \"None\" : $tx, '</div>';\n\n            echo '<div class=\"fx js-tag-editor\">';\n            if (empty($treport->message_list)) {\n                echo '<ul class=\"want-tag-report feedback-list hidden\"></ul>';\n            } else {\n                echo '<ul class=\"want-tag-report feedback-list\"><li>',\n                    join(\"</li><li>\", MessageSet::feedback_html_items($treport->message_list)), \"</li></ul>\";\n            }\n            if ($is_sitewide) {\n                echo '<p class=\"feedback is-warning\">You have a conflict with this submission, so you can only edit its ', Ht::link(\"site-wide tags\", $this->conf->hoturl(\"settings\", \"group=tags#tag_sitewide\")), '.';\n                if ($this->user->allow_administer($this->prow)) {\n                    echo ' ', Ht::link(\"Override your conflict\", $this->conf->selfurl($this->qreq, [\"forceShow\" => 1])), ' to view and edit all tags.';\n                }\n                echo '</p>';\n            }\n            $editable_tags = $this->prow->sorted_editable_tags($this->user);\n            echo '<textarea cols=\"20\" rows=\"4\" name=\"tags\" class=\"w-99 want-focus need-suggest mf-label ',\n                $is_sitewide ? \"sitewide-editable-tags\" : \"editable-tags\",\n                '\" spellcheck=\"false\" id=\"', $id, '\">',\n                $tagger->unparse($editable_tags),\n                '</textarea><div class=\"aab flex-row-reverse mt-1\"><div class=\"aabut\">',\n                Ht::submit(\"save\", \"Save\", [\"class\" => \"btn-primary\"]),\n                '</div><div class=\"aabut\">',\n                Ht::submit(\"cancel\", \"Cancel\"),\n                \"</div></div>\",\n                '<span class=\"hint\"><a href=\"', $this->conf->hoturl(\"help\", \"t=tags\"), '\">Learn more</a> <span class=\"barsep\">\u00b7</span> <strong>Tip:</strong> Twiddle tags like \u201c~tag\u201d are visible only to you.</span>',\n                \"</div>\";\n        } else {\n            echo '<div class=\"js-tag-result\">', ($tx === \"\" ? \"None\" : $tx), '</div>';\n        }\n\n        if ($editable) {\n            echo \"</form>\";\n        }\n        if ($unfolded) {\n            echo Ht::unstash_script('hotcrp.fold(\"tags\",0)');\n        }\n        echo \"</div>\\n\";\n    }\n\n    function papstripOutcomeSelector() {\n        $id = \"decision_{$this->prow->paperId}\";\n        $this->_papstripBegin(\"decision\", $this->qreq->atab !== \"decision\", [\"class\" => \"need-paper-select-api ui-unfold js-unfold-focus\"]);\n        echo $this->papt(\"decision\", Ht::label(\"Decision\", $id),\n                [\"type\" => \"ps\", \"fold\" => \"decision\"]),\n            '<form class=\"ui-submit uin fx\">';\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow ? 1 : 0);\n        }\n        $opts = [];\n        foreach ($this->conf->decision_set() as $dec) {\n            $opts[$dec->id] = $dec->name;\n        }\n        echo Ht::select(\"decision\", $opts,\n                        (string) $this->prow->outcome,\n                        [\"class\" => \"w-99 want-focus\", \"id\" => $id]),\n            '</form><p class=\"fn odname js-psedit-result\">',\n            htmlspecialchars($this->prow->decision()->name),\n            \"</p></div>\\n\";\n    }\n\n    function papstripReviewPreference() {\n        $this->_papstripBegin(\"revpref\");\n        echo $this->papt(\"revpref\", \"Review preference\", [\"type\" => \"ps\"]),\n            \"<form class=\\\"ui\\\">\";\n        $rp = unparse_preference($this->prow->preference($this->user));\n        $rp = ($rp == \"0\" ? \"\" : $rp);\n        echo \"<input id=\\\"revprefform_d\\\" type=\\\"text\\\" name=\\\"revpref\", $this->prow->paperId,\n            \"\\\" size=\\\"4\\\" value=\\\"$rp\\\" class=\\\"revpref want-focus want-select\\\">\",\n            \"</form></div>\\n\";\n        Ht::stash_script(\"hotcrp.add_preference_ajax(\\\"#revprefform_d\\\",true);hotcrp.shortcut(\\\"revprefform_d\\\").add()\");\n    }\n\n    private function papstrip_tag_entry($id) {\n        $this->_papstripBegin($id, !!$id, [\"class\" => \"pste ui-unfold js-unfold-focus\"]);\n    }\n\n    private function papstrip_tag_float($tag, $kind, $type) {\n        if (!$this->user->can_view_tag($this->prow, $tag)) {\n            return \"\";\n        }\n        $totval = $this->prow->tag_value($tag) ?? \"\";\n        $class = \"is-nonempty-tags float-right\" . ($totval === \"\" ? \" hidden\" : \"\");\n        $reverse = $type !== \"rank\";\n        $extradiv = \"\";\n        if (($type === \"allotment\" || $type === \"approval\")\n            && $this->user->can_view_peruser_tag($this->prow, $tag)) {\n            $class .= \" need-tooltip\";\n            $extradiv = ' data-tooltip-anchor=\"h\" data-tooltip-info=\"votereport\" data-tag=\"' . htmlspecialchars($tag) . '\"';\n        }\n        return '<div class=\"' . $class . '\"' . $extradiv\n            . '><a class=\"q\" href=\"' . $this->conf->hoturl(\"search\", [\"q\" => \"show:#{$tag} sort:\" . ($reverse ? \"-\" : \"\") . \"#{$tag}\"]) . '\">'\n            . '<span class=\"is-tag-index\" data-tag-base=\"' . $tag . '\">' . $totval . '</span> ' . $kind . '</a></div>';\n    }\n\n    private function papstrip_tag_entry_title($s, $tag, $value, $label) {\n        $ts = \"#$tag\";\n        if (($color = $this->conf->tags()->color_classes($tag))) {\n            $ts = '<span class=\"' . $color . ' taghh\">' . $ts . '</span>';\n        }\n        $s = str_replace(\"{{}}\", $ts, $s);\n        if ($value !== false) {\n            $s .= '<span class=\"fn is-nonempty-tags'\n                . ($value === \"\" ? \" hidden\" : \"\")\n                . '\">: <span class=\"is-tag-index\" data-tag-base=\"~'\n                . $tag . '\">' . $value . '</span></span>';\n        }\n        return $label ? Ht::label($s, \"tag:~{$tag} {$this->prow->paperId}\") : $s;\n    }\n\n    private function papstrip_rank($tag) {\n        $id = \"rank_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"overall\", \"rank\");\n\n        $this->papstrip_tag_entry($id);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id, $this->papstrip_tag_entry_title(\"{{}} rank\", $tag, $myval, true),\n                         [\"type\" => \"ps\", \"fold\" => $id, \"float\" => $totmark, \"fnclass\" => \"mf\"]),\n            '<div class=\"fx\">',\n            Ht::entry(\"tagindex\", $myval,\n                [\"size\" => 4, \"class\" => \"is-tag-index want-focus mf-label-success\",\n                 \"data-tag-base\" => \"~{$tag}\", \"inputmode\" => \"decimal\",\n                 \"id\" => \"tag:~{$tag} {$this->prow->paperId}\"]),\n            ' <span class=\"barsep\">\u00b7</span> ',\n            '<a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:#~{$tag}\"]), '\">Edit all</a>',\n            ' <div class=\"hint\" style=\"margin-top:4px\"><strong>Tip:</strong> <a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:#~{$tag}\"]), '\">Search \u201ceditsort:#~', $tag, '\u201d</a> to drag and drop your ranking, or <a href=\"', $this->conf->hoturl(\"offline\"), '\">use offline reviewing</a> to rank many papers at once.</div>',\n            \"</div></form></div>\\n\";\n    }\n\n    private function papstrip_allotment($tag, $allotment) {\n        $id = \"vote_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"total\", \"allotment\");\n\n        $this->papstrip_tag_entry($id);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id, $this->papstrip_tag_entry_title(\"{{}} votes\", $tag, $myval, true),\n                         [\"type\" => \"ps\", \"fold\" => $id, \"float\" => $totmark]),\n            '<div class=\"fx\">',\n            Ht::entry(\"tagindex\", $myval,\n                [\"size\" => 4, \"class\" => \"is-tag-index want-focus mf-label-success\",\n                 \"data-tag-base\" => \"~{$tag}\", \"inputmode\" => \"decimal\",\n                 \"id\" => \"tag:~{$tag} {$this->prow->paperId}\"]),\n            \" &nbsp;of $allotment\",\n            ' <span class=\"barsep\">\u00b7</span> ',\n            '<a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:-#~{$tag}\"]), '\">Edit all</a>',\n            \"</div></form></div>\\n\";\n    }\n\n    private function papstrip_approval($tag) {\n        $id = \"approval_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"total\", \"approval\");\n\n        $this->papstrip_tag_entry(null);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id,\n            $this->papstrip_tag_entry_title('<label><span class=\"checkc\">'\n                . Ht::checkbox(\"tagindex\", \"0\", $myval !== \"\",\n                    [\"class\" => \"is-tag-index want-focus\", \"data-tag-base\" => \"~$tag\"])\n                . '</span>{{}} vote</label>', $tag, false, false),\n                [\"type\" => \"ps\", \"fnclass\" => \"checki\", \"float\" => $totmark]),\n            \"</form></div>\\n\";\n    }\n\n    private function papstripWatch() {\n        if ($this->prow->timeSubmitted <= 0\n            || $this->user->contactId <= 0\n            || ($this->prow->has_conflict($this->user)\n                && !$this->prow->has_author($this->user)\n                && !$this->user->is_admin_force())) {\n            return;\n        }\n\n        $this->_papstripBegin();\n\n        echo '<form class=\"ui-submit uin\">',\n            $this->papt(\"watch\",\n                '<label><span class=\"checkc\">'\n                . Ht::checkbox(\"follow\", 1, $this->user->following_reviews($this->prow), [\"class\" => \"uich js-follow-change\"])\n                . '</span>Email notification</label>',\n                [\"type\" => \"ps\", \"fnclass\" => \"checki\"]),\n            '<div class=\"pshint\">Select to receive email on updates to reviews and comments.</div>',\n            \"</form></div>\\n\";\n    }\n\n\n    // Functions for editing\n\n    /** @param string $dname\n     * @param string $noun\n     * @return string */\n    function deadline_setting_is($dname, $noun = \"deadline\") {\n        return $this->deadline_is($this->conf->setting($dname) ?? 0, $noun);\n    }\n\n    /** @param int $t\n     * @param string $noun\n     * @return string */\n    function deadline_is($t, $noun = \"deadline\") {\n        if ($t <= 0) {\n            return \"\";\n        }\n        $ts = $this->conf->unparse_time_with_local_span($t);\n        return Conf::$now < $t ? \" The {$noun} is {$ts}.\" : \" The {$noun} was {$ts}.\";\n    }\n\n    private function _deadline_override_message() {\n        if ($this->admin) {\n            return \" As an administrator, you can make changes anyway.\";\n        } else {\n            return $this->_forceShow_message();\n        }\n    }\n    private function _forceShow_message() {\n        if (!$this->admin && $this->allow_admin) {\n            return \" \" . Ht::link(\"(Override your conflict)\", $this->conf->selfurl($this->qreq, [\"forceShow\" => 1]), [\"class\" => \"nw\"]);\n        } else {\n            return \"\";\n        }\n    }\n    /** @param string $m\n     * @param int $status */\n    private function _main_message($m, $status) {\n        $this->edit_status->msg_at(\":main\", $m, $status);\n    }\n\n    private function _edit_message_new_paper_deadline() {\n        $opent = $this->prow->open_time();\n        if ($opent <= 0 || $opent > Conf::$now) {\n            $msg = \"<5>The site is not open for submissions.\" . $this->_deadline_override_message();\n        } else {\n            $msg = '<5>The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">deadline</a> for registering submissions has passed.' . $this->deadline_is($this->prow->registration_deadline()) . $this->_deadline_override_message();\n        }\n        $this->_main_message($msg, $this->admin ? 1 : 2);\n    }\n\n    private function _edit_message_new_paper() {\n        if ($this->admin || $this->conf->time_start_paper()) {\n            $t = [$this->conf->_(\"Enter information about your submission.\")];\n            $reg_dl = $this->prow->registration_deadline();\n            $upd_dl = $this->prow->update_deadline();\n            if ($reg_dl > 0 && $upd_dl > 0 && $reg_dl < $upd_dl) {\n                $t[] = $this->conf->_(\"Submissions must be registered by %s and completed by %s.\", $this->conf->unparse_time_long($reg_dl), $this->conf->unparse_time_long($this->prow->submission_deadline()));\n                if (!$this->conf->opt(\"noPapers\")) {\n                    $t[] = $this->conf->_(\"PDF upload is not required to register.\");\n                }\n            } else if ($upd_dl > 0) {\n                $t[] = $this->conf->_(\"Submissions must be completed by %s.\", $this->conf->unparse_time_long($upd_dl));\n            }\n            $this->_main_message(\"<5>\" . join(\" \", $t), 0);\n            if (($v = $this->conf->_id(\"submit\", \"\"))) {\n                if (!Ftext::is_ftext($v)) {\n                    $v = \"<5>$v\";\n                }\n                $this->_main_message($v, 0);\n            }\n        }\n        if (!$this->conf->time_start_paper()) {\n            $this->_edit_message_new_paper_deadline();\n            $this->quit = $this->quit || !$this->admin;\n        }\n    }\n\n    private function _edit_message_for_author() {\n        $viewable_decision = $this->prow->viewable_decision($this->user);\n        if ($viewable_decision->sign < 0) {\n            $this->_main_message(\"<5>This submission was not accepted.\" . $this->_forceShow_message(), 1);\n        } else if ($this->prow->timeWithdrawn > 0) {\n            if ($this->user->can_revive_paper($this->prow)) {\n                $this->_main_message(\"<5>This submission has been withdrawn, but you can still revive it.\" . $this->deadline_is($this->prow->update_deadline()), 1);\n            } else {\n                $this->_main_message(\"<5>This submission has been withdrawn.\" . $this->_forceShow_message(), 1);\n            }\n        } else if ($this->prow->timeSubmitted <= 0) {\n            $whyNot = $this->user->perm_edit_paper($this->prow);\n            $sub_dl = $this->prow->submission_deadline();\n            if (!$whyNot) {\n                if (($missing = PaperTable::missing_required_fields($this->prow))) {\n                    $first = $this->conf->_(\"<5>This submission is not ready for review. Required fields %#s are missing.\", PaperTable::field_title_links($missing, \"missing_title\"));\n                } else {\n                    $first = $this->conf->_(\"<5>This submission is marked as not ready for review.\");\n                    $first = \"<strong>\" . Ftext::unparse_as($first, 5) . \"</strong>\";\n                }\n                if (($upd_dl = $this->prow->update_deadline()) > 0) {\n                    $rest = $this->conf->_(\"Submissions incomplete as of %s will not be considered.\", $this->conf->unparse_time_long($upd_dl));\n                } else {\n                    $rest = $this->conf->_(\"Incomplete submissions will not be considered.\");\n                }\n                $this->_main_message(\"<5>{$first} {$rest}\", MessageSet::URGENT_NOTE);\n            } else if (isset($whyNot[\"updateSubmitted\"])\n                       && $this->user->can_finalize_paper($this->prow)) {\n                $this->_main_message('<5>This submission is not ready for review. Although you cannot make further changes, the current version can be still be submitted for review.' . $this->deadline_is($sub_dl) . $this->_deadline_override_message(), 1);\n            } else if (isset($whyNot[\"deadline\"])) {\n                if ($this->conf->time_between(null, $sub_dl, $this->prow->submission_grace()) > 0) {\n                    $this->_main_message('<5>The site is not open for updates at the moment.' . $this->_deadline_override_message(), 1);\n                } else {\n                    $this->_main_message('<5>The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">submission deadline</a> has passed and this submission will not be reviewed.' . $this->deadline_is($sub_dl) . $this->_deadline_override_message(), 1);\n                }\n            } else {\n                $this->_main_message('<5>This submission is not ready for review and can\u2019t be changed further. It will not be reviewed.' . $this->_deadline_override_message(), MessageSet::URGENT_NOTE);\n            }\n        } else if ($this->conf->allow_final_versions()\n                   && $viewable_decision->sign > 0) {\n            if ($this->user->can_edit_final_paper($this->prow)) {\n                if (($t = $this->conf->_id(\"finalsubmit\", \"\", new FmtArg(\"deadline\", $this->deadline_setting_is(\"final_soft\"))))) {\n                    $this->_main_message(\"<5>\" . $t, MessageSet::SUCCESS);\n                }\n            } else if ($this->mode === \"edit\") {\n                $this->_main_message(\"<5>The deadline for updating final versions has passed. You can still change contact information.\" . $this->_deadline_override_message(), 1);\n            }\n        } else if ($this->user->can_edit_paper($this->prow)) {\n            if ($this->mode === \"edit\"\n                && (!$this->edit_status || !$this->edit_status->has_error())) {\n                $this->_main_message('<5>This submission is ready for review. You do not need to take further action, but you can still make changes if you wish.' . $this->deadline_is($this->prow->update_deadline(), \"submission deadline\"), MessageSet::SUCCESS);\n            }\n        } else if ($this->mode === \"edit\") {\n            if ($this->user->can_withdraw_paper($this->prow, true)) {\n                $t = \"<5>This submission is under review and can\u2019t be changed, but you can change its contacts or withdraw it from consideration.\";\n            } else {\n                $t = \"<5>This submission is under review and can\u2019t be changed or withdrawn, but you can change its contacts.\";\n            }\n            $this->_main_message($t . $this->_deadline_override_message(), MessageSet::MARKED_NOTE);\n        }\n    }\n\n    /** @param iterable<PaperOption> $fields\n     * @param 'title'|'edit_title'|'missing_title' $title_method\n     * @return list<string> */\n    static function field_title_links($fields, $title_method) {\n        $x = [];\n        foreach ($fields as $o) {\n            $x[] = Ht::link(htmlspecialchars($o->$title_method()), \"#\" . $o->readable_formid());\n        }\n        return $x;\n    }\n\n    /** @return list<PaperOption> */\n    static function missing_required_fields(PaperInfo $prow) {\n        $missing = [];\n        foreach ($prow->form_fields() as $o) {\n            if ($o->test_required($prow) && !$o->value_present($prow->force_option($o)))\n                $missing[] = $o;\n        }\n        return $missing;\n    }\n\n    private function _edit_message_existing_paper() {\n        $has_author = $this->prow->has_author($this->user);\n        if ($has_author) {\n            $this->_edit_message_for_author();\n        } else if ($this->conf->allow_final_versions()\n                   && $this->prow->outcome_sign > 0\n                   && !$this->prow->can_author_view_decision()) {\n            $this->_main_message(\"<5>The submission has been accepted, but its authors can\u2019t see that yet. Once decisions are visible, the system will allow accepted authors to upload final versions.\", 1);\n        } else {\n            $this->_main_message(\"<5>You aren\u2019t a contact for this submission, but as an administrator you can still make changes.\", MessageSet::MARKED_NOTE);\n        }\n        if ($this->user->call_with_overrides($this->user->overrides() | Contact::OVERRIDE_TIME, \"can_edit_paper\", $this->prow)\n            && ($v = $this->conf->_id(\"submit\", \"\"))) {\n            if (!Ftext::is_ftext($v)) {\n                $v = \"<5>$v\";\n            }\n            $this->_main_message($v, 0);\n        }\n        if ($this->edit_status->has_problem()\n            && ($this->edit_status->has_problem_at(\"contacts\") || $this->editable)) {\n            $fields = array_filter($this->edit_fields ?? [], function ($o) {\n                return $this->edit_status->has_problem_at($o->formid);\n            });\n            if (!empty($fields)) {\n                $this->_main_message($this->conf->_c(\"paper_edit\", \"<5>Please check %s before completing the submission.\", commajoin(self::field_title_links($fields, \"edit_title\"))), $this->edit_status->problem_status());\n            }\n        }\n    }\n\n    private function _print_edit_messages($include_required) {\n        if (!$this->prow->paperId) {\n            $this->_edit_message_new_paper();\n        } else {\n            $this->_edit_message_existing_paper();\n        }\n        if ($include_required && !$this->quit) {\n            foreach ($this->edit_fields as $e) {\n                if ($e->required) {\n                    $this->_main_message('<5><span class=\"field-required-explanation\">* Required</span>', 0);\n                    break;\n                }\n            }\n        }\n        if (($t = $this->messages_at(\":main\")) !== \"\") {\n            echo '<div class=\"pge\">', $t, '</div>';\n        }\n    }\n\n    private function _save_name() {\n        if (!$this->is_ready(false)) {\n            return \"Save draft\";\n        } else if ($this->prow->timeSubmitted > 0) {\n            return \"Save and resubmit\";\n        } else {\n            return \"Save and submit\";\n        }\n    }\n\n    private function _collect_actions() {\n        // Withdrawn papers can be revived\n        if ($this->prow->timeWithdrawn > 0) {\n            $revivable = $this->conf->time_finalize_paper($this->prow);\n            if ($revivable) {\n                return [Ht::submit(\"revive\", \"Revive submission\", [\"class\" => \"btn-primary\"])];\n            } else if ($this->admin) {\n                return [[Ht::button(\"Revive submission\", [\"class\" => \"ui js-override-deadlines\", \"data-override-text\" => 'The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">deadline</a> for reviving withdrawn submissions has passed. Are you sure you want to override it?', \"data-override-submit\" => \"revive\"]), \"(admin only)\"]];\n            } else {\n                return [];\n            }\n        }\n\n        $buttons = [];\n        $want_override = false;\n\n        if ($this->mode === \"edit\") {\n            // check whether we can save\n            $old_overrides = $this->user->set_overrides(Contact::OVERRIDE_CHECK_TIME);\n            if ($this->allow_edit_final) {\n                $whyNot = $this->user->perm_edit_final_paper($this->prow);\n            } else if ($this->prow->paperId) {\n                $whyNot = $this->user->perm_edit_paper($this->prow);\n            } else {\n                $whyNot = $this->user->perm_start_paper();\n            }\n            $this->user->set_overrides($old_overrides);\n            // produce button\n            $save_name = $this->_save_name();\n            if (!$whyNot) {\n                $buttons[] = [Ht::submit(\"update\", $save_name, [\"class\" => \"btn-primary btn-savepaper uic js-mark-submit\"]), \"\"];\n            } else if ($this->admin) {\n                $revWhyNot = $whyNot->filter([\"deadline\", \"rejected\"]);\n                $x = $revWhyNot->unparse_html() . \" Are you sure you want to override the deadline?\";\n                $buttons[] = [Ht::button($save_name, [\"class\" => \"btn-primary btn-savepaper ui js-override-deadlines\", \"data-override-text\" => $x, \"data-override-submit\" => \"update\"]), \"(admin only)\"];\n            } else if (isset($whyNot[\"updateSubmitted\"])\n                       && $this->user->can_finalize_paper($this->prow)) {\n                $buttons[] = Ht::submit(\"update\", $save_name, [\"class\" => \"btn-savepaper uic js-mark-submit\"]);\n            } else if ($this->prow->paperId) {\n                $buttons[] = Ht::submit(\"updatecontacts\", \"Save contacts\", [\"class\" => \"btn-savepaper btn-primary uic js-mark-submit\", \"data-contacts-only\" => 1]);\n            }\n            if (!empty($buttons)) {\n                $buttons[] = Ht::submit(\"cancel\", \"Cancel\", [\"class\" => \"uic js-mark-submit\"]);\n                $buttons[] = \"\";\n            }\n            $want_override = $whyNot && !$this->admin;\n        }\n\n        // withdraw button\n        if (!$this->prow->paperId\n            || !$this->user->call_with_overrides($this->user->overrides() | Contact::OVERRIDE_TIME, \"can_withdraw_paper\", $this->prow, true)) {\n            $b = null;\n        } else if ($this->prow->timeSubmitted <= 0) {\n            $b = Ht::submit(\"withdraw\", \"Withdraw\", [\"class\" => \"uic js-mark-submit\"]);\n        } else {\n            $args = [\"class\" => \"ui js-withdraw\"];\n            if ($this->user->can_withdraw_paper($this->prow, !$this->admin)) {\n                $args[\"data-withdrawable\"] = \"true\";\n            }\n            if (($this->admin && !$this->prow->has_author($this->user))\n                || $this->conf->time_finalize_paper($this->prow)) {\n                $args[\"data-revivable\"] = \"true\";\n            }\n            $b = Ht::button(\"Withdraw\", $args);\n        }\n        if ($b) {\n            if ($this->admin && !$this->user->can_withdraw_paper($this->prow)) {\n                $b = [$b, \"(admin only)\"];\n            }\n            $buttons[] = $b;\n        }\n\n        // override conflict button\n        if ($want_override && !$this->admin && false) {\n            if ($this->allow_admin) {\n                $buttons[] = \"\";\n                $buttons[] = [Ht::submit(\"updateoverride\", \"Override conflict\", [\"class\" => \"uic js-mark-submit\"]), \"(admin only)\"];\n            } else if ($this->user->privChair) {\n                $buttons[] = \"\";\n                $buttons[] = Ht::submit(\"updateoverride\", \"Override conflict\", [\"disabled\" => true, \"class\" => \"need-tooltip uic js-mark-submit\", \"title\" => \"You cannot override your conflict because this paper has an administrator.\"]);\n            }\n        }\n\n        return $buttons;\n    }\n\n    private function print_actions() {\n        if ($this->admin) {\n            $v = (string) $this->qreq->emailNote;\n            echo '<div class=\"checki\"><label><span class=\"checkc\">', Ht::checkbox(\"doemail\", 1, true, [\"class\" => \"ignore-diff\"]), \"</span>\",\n                \"Email authors, including:</label> \",\n                Ht::entry(\"emailNote\", $v, [\"size\" => 30, \"placeholder\" => \"Optional explanation\", \"class\" => \"ignore-diff js-autosubmit\", \"aria-label\" => \"Explanation for update\"]),\n                \"</div>\";\n        }\n        if ($this->mode === \"edit\" && $this->allow_edit_final) {\n            echo Ht::hidden(\"submitfinal\", 1);\n        }\n\n        $buttons = $this->_collect_actions();\n        if ($this->admin && $this->prow->paperId) {\n            $buttons[] = [Ht::button(\"Delete\", [\"class\" => \"ui js-delete-paper\"]), \"(admin only)\"];\n        }\n        echo Ht::actions($buttons, [\"class\" => \"aab aabig\"]);\n    }\n\n\n    // Functions for overall paper table viewing\n\n    function _papstrip() {\n        if (($this->prow->managerContactId > 0\n             || ($this->user->privChair && $this->mode === \"assign\"))\n            && $this->user->can_view_manager($this->prow)) {\n            $this->papstripManager();\n        }\n        $this->papstripTags();\n        foreach ($this->conf->tags() as $ltag => $t) {\n            if ($this->user->can_edit_tag($this->prow, \"~$ltag\", null, 0)) {\n                if ($t->approval) {\n                    $this->papstrip_approval($t->tag);\n                } else if ($t->allotment) {\n                    $this->papstrip_allotment($t->tag, $t->allotment);\n                } else if ($t->rank) {\n                    $this->papstrip_rank($t->tag);\n                }\n            }\n        }\n        $this->papstripWatch();\n        if ($this->user->can_view_conflicts($this->prow) && !$this->editable) {\n            $this->_print_ps_pc_conflicts();\n        }\n        if ($this->user->allow_view_authors($this->prow) && !$this->editable) {\n            $this->_print_ps_collaborators();\n        }\n        if ($this->user->can_set_decision($this->prow)) {\n            $this->papstripOutcomeSelector();\n        }\n        if ($this->user->can_view_lead($this->prow)) {\n            $this->papstripLead();\n        }\n        if ($this->user->can_view_shepherd($this->prow)) {\n            $this->papstripShepherd();\n        }\n        if ($this->user->can_edit_preference_for($this->user, $this->prow, true)\n            && $this->conf->timePCReviewPreferences()\n            && ($this->user->roles & (Contact::ROLE_PC | Contact::ROLE_CHAIR))) {\n            $this->papstripReviewPreference();\n        }\n    }\n\n    /** @param string $text\n     * @param string $imgfile\n     * @param string $url\n     * @param bool $active\n     * @param bool $nondisabled\n     * @return string */\n    private function _mode_nav_link($text, $imgfile, $url, $active, $nondisabled) {\n        $class1 = $active ? \" active\" : \"\";\n        $hl = $active ? \" class=\\\"x\\\"\" : \"\";\n        $img = Ht::img($imgfile, \"[{$text}]\", \"papmodeimg\");\n        if ($nondisabled) {\n            return \"<li class=\\\"papmode{$class1}\\\"><a href=\\\"{$url}\\\" class=\\\"noul\\\">{$img}&nbsp;<u{$hl}>{$text}</u></a></li>\";\n        } else {\n            return \"<li class=\\\"papmode{$class1}\\\"><a href=\\\"{$url}\\\" class=\\\"noul dim ui js-confirm-override-conflict\\\">{$img}&nbsp;<u class=\\\"x\\\">{$text}</u></a></li>\";\n        }\n    }\n\n    /** @return string */\n    private function _mode_nav() {\n        $tx = [];\n        if (($allow = $this->allow_edit()) || $this->allow_admin) {\n            $arg = [\"m\" => \"edit\", \"p\" => $this->prow->paperId];\n            if (!$allow\n                && $this->mode !== \"edit\"\n                && !$this->user->can_edit_paper($this->prow)\n                && !$this->prow->has_author($this->user)) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                \"Edit\", \"edit48.png\", $this->conf->hoturl(\"paper\", $arg),\n                $this->mode === \"edit\", $allow || isset($arg[\"forceShow\"])\n            );\n        }\n        if (($allow = $this->allow_review()) || $this->allow_admin) {\n            $arg = [\"p\" => $this->prow->paperId];\n            if (!$allow) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                \"Review\", \"review48.png\", $this->conf->hoturl(\"review\", $arg),\n                $this->mode === \"re\" && (!$this->editrrow || $this->user->is_my_review($this->editrrow)), $allow\n            );\n        }\n        if (($allow = $this->allow_assign()) || $this->allow_admin) {\n            $name = $this->allow_admin ? \"Assign\" : \"Invite\";\n            $arg = [\"p\" => $this->prow->paperId];\n            if (!$allow) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                $name, \"assign48.png\", $this->conf->hoturl(\"assign\", $arg),\n                $this->mode === \"assign\", $allow\n            );\n        }\n        if (!empty($tx)\n            || $this->qreq->page() !== \"paper\"\n            || ($this->mode !== \"p\" && $this->prow->paperId > 0)) {\n            array_unshift($tx, $this->_mode_nav_link(\n                \"Main\", \"view48.png\",\n                $this->prow->hoturl([\"m\" => $this->paper_page_prefers_edit_mode() ? \"main\" : null]),\n                $this->mode === \"p\" && $this->qreq->page() === \"paper\", true\n            ));\n        }\n        if (!empty($tx)) {\n            return '<nav class=\"submission-modes\"><ul>' . join(\"\", $tx) . '</ul></nav>';\n        } else {\n            return \"\";\n        }\n    }\n\n    static private function _print_clickthrough($ctype) {\n        $data = Conf::$main->_id(\"clickthrough_{$ctype}\", \"\");\n        $buttons = [Ht::submit(\"Agree\", [\"class\" => \"btnbig btn-success ui js-clickthrough\"])];\n        echo Ht::form(\"\", [\"class\" => \"ui\"]), '<div>', $data,\n            Ht::hidden(\"clickthrough_type\", $ctype),\n            Ht::hidden(\"clickthrough_id\", sha1($data)),\n            Ht::hidden(\"clickthrough_time\", Conf::$now),\n            Ht::actions($buttons, [\"class\" => \"aab aabig aabr\"]), \"</div></form>\";\n    }\n\n    static function print_review_clickthrough() {\n        echo '<div class=\"pcard revcard js-clickthrough-terms\"><div class=\"revcard-head\"><h2>Reviewing terms</h2></div><div class=\"revcard-body\">', Ht::msg(\"You must agree to these terms before you can save reviews.\", 2);\n        self::_print_clickthrough(\"review\");\n        echo \"</div></div>\";\n    }\n\n    private function _print_editable_form() {\n        $form_url = [\n            \"p\" => $this->prow->paperId ? : \"new\", \"m\" => \"edit\"\n        ];\n        // This is normally added automatically, but isn't for new papers\n        if ($this->user->is_admin_force()) {\n            $form_url[\"forceShow\"] = 1;\n        }\n        $form_js = [\n            \"id\" => \"form-paper\",\n            \"class\" => \"need-unload-protection uich ui-submit js-submit-paper\",\n            \"data-alert-toggle\" => \"paper-alert\"\n        ];\n        if ($this->prow->timeSubmitted > 0) {\n            $form_js[\"data-submitted\"] = $this->prow->timeSubmitted;\n        }\n        if ($this->prow->paperId && !$this->editable) {\n            $form_js[\"data-contacts-only\"] = 1;\n        }\n        if ($this->useRequest) {\n            $form_js[\"class\"] .= \" alert\";\n        }\n        echo Ht::form($this->conf->hoturl(\"=paper\", $form_url), $form_js);\n        Ht::stash_script('$(hotcrp.load_editable_paper)');\n    }\n\n    private function _print_editable_body() {\n        $this->_print_editable_form();\n        $overrides = $this->user->add_overrides(Contact::OVERRIDE_EDIT_CONDITIONS);\n        echo '<div class=\"pedcard-head\"><h2><span class=\"pedcard-header-name\">',\n            $this->conf->_($this->prow->paperId ? \"Edit Submission\" : \"New Submission\"),\n            '</span></h2></div>';\n\n        $this->edit_fields = array_values(array_filter(\n            $this->prow->form_fields(),\n            function ($o) {\n                return $this->user->can_edit_option($this->prow, $o);\n            }\n        ));\n\n        $this->_print_pre_status_feedback();\n        $this->_print_edit_messages(true);\n\n        if (!$this->quit) {\n            foreach ($this->edit_fields as $o) {\n                $ov = $reqov = $this->prow->force_option($o);\n                if ($this->useRequest\n                    && $this->qreq[\"has_{$o->formid}\"]\n                    && ($x = $o->parse_qreq($this->prow, $this->qreq))) {\n                    $reqov = $x;\n                }\n                $o->print_web_edit($this, $ov, $reqov);\n            }\n\n            // Submit button\n            $this->print_editable_complete();\n            $this->print_actions();\n        }\n\n        echo \"</div></form>\";\n        $this->user->set_overrides($overrides);\n    }\n\n    function print_paper_info() {\n        if ($this->prow->paperId) {\n            $this->_papstrip();\n        }\n        if ($this->npapstrip) {\n            Ht::stash_script(\"hotcrp.prepare_editable_paper()\");\n            echo '</div></div><nav class=\"pslcard-nav\">';\n        } else {\n            echo '<article class=\"pcontainer\"><div class=\"pcard-left pcard-left-nostrip\"><nav class=\"pslcard-nav\">';\n        }\n        $viewable_tags = $this->prow->viewable_tags($this->user);\n        echo '<h4 class=\"pslcard-home\">';\n        if ($viewable_tags || $this->user->can_view_tags($this->prow)) {\n            $color = $this->prow->conf->tags()->color_classes($viewable_tags);\n            echo '<span class=\"pslcard-home-tag has-tag-classes taghh',\n                ($color ? \" $color\" : \"\"), '\">';\n            $close = '</span>';\n        } else {\n            $close = '';\n        }\n        echo '<a href=\"#top\" class=\"q\"><span class=\"header-site-name\">',\n            htmlspecialchars($this->conf->short_name), '</span> ';\n        if ($this->prow->paperId <= 0) {\n            echo \"new submission\";\n        } else if ($this->mode !== \"re\") {\n            echo \"#\", $this->prow->paperId;\n        } else if ($this->editrrow && $this->editrrow->reviewOrdinal) {\n            echo \"#\", $this->editrrow->unparse_ordinal_id();\n        } else {\n            echo \"#\", $this->prow->paperId, \" review\";\n        }\n        echo '</a>', $close, '</h4><ul class=\"pslcard\"></ul></nav></div>';\n\n        if ($this->allow_admin && $this->prow->paperId > 0) {\n            if (!$this->admin) {\n                echo '<div class=\"pcard notecard override-conflict off\"><p class=\"sd\">',\n                    '<a class=\"noul\" href=\"', $this->conf->selfurl($this->qreq, [\"forceShow\" => 1]), '\">',\n                    '\ud83d\udd12&nbsp;<u>Override conflict</u></a> for administrator view</p></div>';\n            } else if ($this->user->is_admin_force()\n                       && $this->prow->has_conflict($this->user)) {\n                $unprivurl = $this->mode === \"assign\"\n                    ? $this->conf->hoturl(\"paper\", [\"p\" => $this->prow->paperId, \"forceShow\" => null])\n                    : $this->conf->selfurl($this->qreq, [\"forceShow\" => null]);\n                echo '<div class=\"pcard notecard override-conflict on\"><p class=\"sd\">',\n                    '\ud83d\udd13 You are using administrator privilege to override your conflict with this submission. ',\n                    '<a class=\"noul ibw\" href=\"', $unprivurl, '\"><u>Unprivileged view</u></a>',\n                    '</p></div>';\n            }\n        }\n\n        echo '<div class=\"pcard papcard\">';\n        $this->conf->report_saved_messages();\n        if ($this->editable && !$this->user->can_clickthrough(\"submit\")) {\n            echo '<div id=\"foldpaper js-clickthrough-container\">',\n                '<div class=\"js-clickthrough-terms\">',\n                '<h2>Submission terms</h2>',\n                Ht::msg(\"You must agree to these terms to register a submission.\", 2);\n            self::_print_clickthrough(\"submit\");\n            echo '</div><div class=\"need-clickthrough-show hidden\">';\n            $this->_print_editable_body();\n            echo '</div></div>';\n        } else if ($this->editable) {\n            echo '<div id=\"foldpaper\">';\n            $this->_print_editable_body();\n            echo '</div>';\n        } else {\n            $this->_print_normal_body();\n        }\n        echo '</div>';\n\n        if (!$this->editable && $this->mode === \"edit\") {\n            echo '<div class=\"pcard papcard\">',\n                '<div class=\"pedcard-head\"><h2><span class=\"pedcard-header-name\">Edit Contacts</span></h2></div>';\n            $this->_print_edit_messages(false);\n            $this->_print_editable_form();\n            $o = $this->conf->option_by_id(PaperOption::CONTACTSID);\n            assert($o instanceof Contacts_PaperOption);\n            $ov = $reqov = $this->prow->force_option($o);\n            if ($this->useRequest\n                && $this->qreq[\"has_{$o->formid}\"]\n                && ($x = $o->parse_qreq($this->prow, $this->qreq))) {\n                $reqov = $x;\n            }\n            $o->print_web_edit($this, $ov, $reqov);\n            $this->print_actions();\n            echo '</form></div>';\n        }\n\n        if (!$this->editable\n            && $this->mode !== \"edit\"\n            && $this->user->act_author_view($this->prow)\n            && !$this->user->contactId) {\n            echo '<div class=\"pcard notecard\"><p class=\"sd\">',\n                \"To edit this submission, <a href=\\\"\", $this->conf->hoturl(\"signin\"), \"\\\">sign in using your email and password</a>.\",\n                '</p></div>';\n        }\n\n        Ht::stash_script(\"hotcrp.shortcut().add()\");\n    }\n\n    private function _paptabSepContaining($t) {\n        if ($t !== \"\") {\n            echo '<div class=\"pcard notecard\"><p class=\"sd\">', $t, '</p></div>';\n        }\n    }\n\n    /** @param ReviewInfo $rr\n     * @return string */\n    private function _review_table_actas($rr) {\n        if (!$rr->contactId || $rr->contactId === $this->user->contactId) {\n            return \"\";\n        } else {\n            return ' <a href=\"' . $this->conf->selfurl($this->qreq, [\"actas\" => $rr->email]) . '\">'\n                . Ht::img(\"viewas.png\", \"[Act as]\", [\"title\" => \"Act as \" . Text::nameo($rr, NAME_P)])\n                . \"</a>\";\n        }\n    }\n\n    /** @return string */\n    function review_table() {\n        $user = $this->user;\n        $prow = $this->prow;\n        $conf = $prow->conf;\n        $subrev = [];\n        $cflttype = $user->view_conflict_type($prow);\n        $allow_actas = $user->privChair && $user->allow_administer($prow);\n        $hideUnviewable = ($cflttype > 0 && !$this->admin)\n            || (!$user->act_pc($prow) && !$conf->setting(\"extrev_view\"));\n        $show_ratings = $user->can_view_review_ratings($prow);\n        $want_scores = !in_array($this->mode, [\"assign\", \"edit\", \"re\"]);\n        $want_requested_by = false;\n        $score_header = array_map(function ($x) { return \"\"; },\n                                  $conf->review_form()->forder);\n        $last_pc_reviewer = -1;\n\n        // actual rows\n        foreach ($this->all_rrows as $rr) {\n            $want_my_scores = $want_scores;\n            if ($user->is_owned_review($rr) && $this->mode === \"re\") {\n                $want_my_scores = true;\n            }\n            $canView = $user->can_view_review($prow, $rr);\n\n            // skip unsubmitted reviews;\n            // assign page lists actionable reviews separately\n            if (!$canView && $hideUnviewable) {\n                $last_pc_reviewer = -1;\n                continue;\n            }\n\n            $tclass = \"\";\n            $isdelegate = $rr->is_subreview() && $rr->requestedBy === $last_pc_reviewer;\n            if ($rr->reviewStatus < ReviewInfo::RS_COMPLETED && $isdelegate) {\n                $tclass .= ($tclass ? \" \" : \"\") . \"rldraft\";\n            }\n            if ($rr->reviewType >= REVIEW_PC) {\n                $last_pc_reviewer = +$rr->contactId;\n            }\n\n            // review ID\n            $id = $rr->subject_to_approval() ? \"Subreview\" : \"Review\";\n            if ($rr->reviewOrdinal && !$isdelegate) {\n                $id .= \" #\" . $rr->unparse_ordinal_id();\n            }\n            if ($rr->reviewStatus < ReviewInfo::RS_ADOPTED) {\n                $d = $rr->status_description();\n                if ($d === \"draft\") {\n                    $id = \"Draft \" . $id;\n                } else {\n                    $id .= \" (\" . $d . \")\";\n                }\n            }\n            $rlink = $rr->unparse_ordinal_id();\n\n            $t = '<td class=\"rl nw\">';\n            if (!$canView\n               || ($rr->reviewStatus < ReviewInfo::RS_DRAFTED && !$user->can_edit_review($prow, $rr))) {\n                $t .= $id;\n            } else {\n                if ((!$this->can_view_reviews\n                     || $rr->reviewStatus < ReviewInfo::RS_ADOPTED)\n                    && $user->can_edit_review($prow, $rr)) {\n                    $link = $prow->reviewurl([\"r\" => $rlink]);\n                } else if ($this->qreq->page() === \"paper\") {\n                    $link = \"#r$rlink\";\n                } else {\n                    $link = $prow->hoturl([\"#\" => \"r$rlink\"]);\n                }\n                $t .= '<a href=\"' . $link . '\">' . $id . '</a>';\n                if ($show_ratings\n                    && $user->can_view_review_ratings($prow, $rr)\n                    && ($ratings = $rr->ratings())) {\n                    $all = 0;\n                    foreach ($ratings as $r) {\n                        $all |= $r;\n                    }\n                    if ($all & 126) {\n                        $t .= \" &#x2691;\";\n                    } else if ($all & 1) {\n                        $t .= \" &#x2690;\";\n                    }\n                }\n            }\n            $t .= '</td>';\n\n            // primary/secondary glyph\n            $rtype = \"\";\n            if ($rr->reviewType > 0 && $user->can_view_review_meta($prow, $rr)) {\n                $rtype = $rr->icon_h() . $rr->round_h();\n            }\n\n            // reviewer identity\n            $showtoken = $rr->reviewToken && $user->can_edit_review($prow, $rr);\n            if (!$user->can_view_review_identity($prow, $rr)) {\n                $t .= ($rtype ? \"<td class=\\\"rl\\\">{$rtype}</td>\" : '<td></td>');\n            } else {\n                if (!$showtoken || !Contact::is_anonymous_email($rr->email)) {\n                    $n = $user->reviewer_html_for($rr);\n                } else {\n                    $n = \"[Token \" . encode_token((int) $rr->reviewToken) . \"]\";\n                }\n                if ($allow_actas) {\n                    $n .= $this->_review_table_actas($rr);\n                }\n                $t .= '<td class=\"rl\"><span class=\"taghl\" title=\"'\n                    . $rr->email . '\">' . $n . '</span>'\n                    . ($rtype ? \" $rtype\" : \"\") . \"</td>\";\n            }\n\n            // requester\n            if ($this->mode === \"assign\") {\n                if ($rr->reviewType < REVIEW_SECONDARY\n                    && !$showtoken\n                    && $rr->requestedBy\n                    && $rr->requestedBy !== $rr->contactId\n                    && $user->can_view_review_requester($prow, $rr)) {\n                    $t .= '<td class=\"rl small\">requested by ';\n                    if ($rr->requestedBy === $user->contactId) {\n                        $t .= \"you\";\n                    } else {\n                        $t .= $user->reviewer_html_for($rr->requestedBy);\n                    }\n                    $t .= '</td>';\n                    $want_requested_by = true;\n                } else {\n                    $t .= '<td></td>';\n                }\n            }\n\n            // scores\n            $scores = [];\n            if ($want_my_scores && $canView) {\n                $view_score = $user->view_score_bound($prow, $rr);\n                foreach ($conf->review_form()->forder as $f) {\n                    if ($f instanceof Score_ReviewField\n                        && $f->view_score > $view_score\n                        && $rr->has_nonempty_field($f)) {\n                        if ($score_header[$f->short_id] === \"\") {\n                            $score_header[$f->short_id] = '<th class=\"rlscore\">' . $f->web_abbreviation() . \"</th>\";\n                        }\n                        $scores[$f->short_id] = '<td class=\"rlscore need-tooltip\" data-rf=\"' . $f->uid() . '\" data-tooltip-info=\"rf-score\">'\n                            . $f->value_unparse($rr->fields[$f->order], ReviewField::VALUE_SC)\n                            . '</td>';\n                    }\n                }\n            }\n\n            // affix\n            $subrev[] = [$tclass, $t, $scores];\n        }\n\n        // completion\n        if (!empty($subrev)) {\n            if ($want_requested_by) {\n                array_unshift($score_header, '<th class=\"rl\"></th>');\n            }\n            $score_header_text = join(\"\", $score_header);\n            $t = \"<div class=\\\"reinfotable-container demargin\\\"><div class=\\\"reinfotable remargin-left remargin-right relative\\\"><table class=\\\"reviewers nw\";\n            if ($score_header_text) {\n                $t .= \" has-scores\";\n            }\n            $t .= \"\\\">\";\n            $nscores = 0;\n            if ($score_header_text) {\n                foreach ($score_header as $x) {\n                    $nscores += $x !== \"\" ? 1 : 0;\n                }\n                $t .= '<thead><tr><th colspan=\"2\"></th>';\n                if ($this->mode === \"assign\" && !$want_requested_by) {\n                    $t .= '<th></th>';\n                }\n                $t .= $score_header_text . \"</tr></thead>\";\n            }\n            $t .= '<tbody>';\n            foreach ($subrev as $r) {\n                $t .= '<tr class=\"rl' . ($r[0] ? \" $r[0]\" : \"\") . '\">' . $r[1];\n                if ($r[2] ?? null) {\n                    foreach ($score_header as $fid => $header_needed) {\n                        if ($header_needed !== \"\") {\n                            $x = $r[2][$fid] ?? null;\n                            $t .= $x ? : \"<td class=\\\"rlscore rs_$fid\\\"></td>\";\n                        }\n                    }\n                } else if ($nscores > 0) {\n                    $t .= '<td colspan=\"' . $nscores . '\"></td>';\n                }\n                $t .= \"</tr>\";\n            }\n            return $t . \"</tbody></table></div></div>\\n\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /** @return string */\n    private function _review_links() {\n        $prow = $this->prow;\n        $cflttype = $this->user->view_conflict_type($prow);\n        $any_comments = false;\n\n        $nvisible = 0;\n        $myrr = null;\n        foreach ($this->all_rrows as $rr) {\n            if ($this->user->can_view_review($prow, $rr)) {\n                $nvisible++;\n            }\n            if ($rr->contactId == $this->user->contactId\n                || (!$myrr && $this->user->is_my_review($rr))) {\n                $myrr = $rr;\n            }\n        }\n\n        // comments\n        $pret = \"\";\n        if ($this->mycrows\n            && $this->mode !== \"edit\") {\n            $tagger = new Tagger($this->user);\n            $viewable_crows = [];\n            foreach ($this->mycrows as $cr) {\n                if ($this->user->can_view_comment($cr->prow, $cr)) {\n                    $viewable_crows[] = $cr;\n                }\n            }\n            $cxs = CommentInfo::group_by_identity($viewable_crows, $this->user, true);\n            if (!empty($cxs)) {\n                $count = array_reduce($cxs, function ($n, $cx) { return $n + $cx[1]; }, 0);\n                $cnames = array_map(function ($cx) {\n                    $tclass = \"cmtlink\";\n                    if (($tags = $cx[0]->viewable_tags($this->user))\n                        && ($color = $cx[0]->conf->tags()->color_classes($tags))) {\n                        $tclass .= \" $color taghh\";\n                    }\n                    $cid = $cx[0]->unparse_html_id();\n                    return \"<span class=\\\"nb\\\"><a class=\\\"{$tclass} track\\\" href=\\\"#{$cid}\\\">\"\n                        . $cx[0]->unparse_commenter_html($this->user)\n                        . \"</a>\"\n                        . ($cx[1] > 1 ? \" ({$cx[1]})\" : \"\")\n                        . $cx[2] . \"</span>\";\n                }, $cxs);\n                $first_cid = $cxs[0][0]->unparse_html_id();\n                $pret = '<div class=\"revnotes\"><a class=\"track\" href=\"#' . $first_cid . '\"><strong>'\n                    . plural($count, \"Comment\") . '</strong></a>: '\n                    . join(\" \", $cnames) . '</div>';\n                $any_comments = true;\n            }\n        }\n\n        $t = [];\n        $dlimgjs = [\"class\" => \"dlimg\", \"width\" => 24, \"height\" => 24];\n\n        // see all reviews\n        $this->allreviewslink = false;\n        if (($nvisible > 1 || ($nvisible > 0 && !$myrr))\n            && $this->mode !== \"p\") {\n            $this->allreviewslink = true;\n            $t[] = '<a href=\"' . $prow->hoturl() . '\" class=\"noul revlink\">'\n                . Ht::img(\"view48.png\", \"[All reviews]\", $dlimgjs) . \"&nbsp;<u>All reviews</u></a>\";\n        }\n\n        // edit paper\n        if ($this->mode !== \"edit\"\n            && $prow->has_author($this->user)\n            && !$this->user->can_administer($prow)) {\n            $t[] = '<a href=\"' . $prow->hoturl([\"m\" => \"edit\"]) . '\" class=\"noul revlink\">'\n                . Ht::img(\"edit48.png\", \"[Edit]\", $dlimgjs) . \"&nbsp;<u><strong>Edit submission</strong></u></a>\";\n        }\n\n        // edit review\n        if ($this->mode === \"re\"\n            || ($this->mode === \"assign\" && !empty($t))\n            || !$prow) {\n            /* no link */;\n        } else if ($myrr) {\n            $a = '<a href=\"' . $prow->reviewurl([\"r\" => $myrr->unparse_ordinal_id()]) . '\" class=\"noul revlink\">';\n            if ($this->user->can_edit_review($prow, $myrr)) {\n                $x = $a . Ht::img(\"review48.png\", \"[Edit review]\", $dlimgjs) . \"&nbsp;<u><b>Edit your review</b></u></a>\";\n            } else {\n                $x = $a . Ht::img(\"review48.png\", \"[Your review]\", $dlimgjs) . \"&nbsp;<u><b>Your review</b></u></a>\";\n            }\n            $t[] = $x;\n        } else if ($this->user->can_edit_some_review($prow)) {\n            $t[] = '<a href=\"' . $prow->reviewurl([\"m\" => \"re\"]) . '\" class=\"noul revlink\">'\n                . Ht::img(\"review48.png\", \"[Write review]\", $dlimgjs) . \"&nbsp;<u><b>Write review</b></u></a>\";\n        }\n\n        // review assignments\n        if ($this->mode !== \"assign\"\n            && $this->mode !== \"edit\"\n            && $this->user->can_request_review($prow, null, true)) {\n            $t[] = '<a href=\"' . $this->conf->hoturl(\"assign\", \"p=$prow->paperId\") . '\" class=\"noul revlink\">'\n                . Ht::img(\"assign48.png\", \"[Assign]\", $dlimgjs) . \"&nbsp;<u>\" . ($this->admin ? \"Assign reviews\" : \"External reviews\") . \"</u></a>\";\n        }\n\n        // new comment\n        $nocmt = in_array($this->mode, [\"assign\", \"contact\", \"edit\", \"re\"]);\n        if (!$this->allreviewslink\n            && !$nocmt\n            && $this->user->add_comment_state($prow) !== 0) {\n            $img = Ht::img(\"comment48.png\", \"[Add comment]\", $dlimgjs);\n            $t[] = \"<a class=\\\"uic js-edit-comment noul revlink\\\" href=\\\"#cnew\\\">{$img} <u>Add comment</u></a>\";\n            $any_comments = true;\n        }\n\n        // new response\n        if (!$nocmt\n            && ($prow->has_author($this->user) || $this->allow_admin)\n            && $this->conf->any_response_open) {\n            foreach ($this->conf->response_rounds() as $rrd) {\n                $cr = $this->response_by_id($rrd->id)\n                    ?? CommentInfo::make_response_template($rrd, $prow);\n                if ($this->user->can_edit_response($prow, $cr)) {\n                    if ($cr->commentId) {\n                        $what = $cr->commentType & CommentInfo::CT_DRAFT ? \"Edit draft\" : \"Edit\";\n                    } else {\n                        $what = \"Add\";\n                    }\n                    $title_prefix = $rrd->unnamed ? \"\" : \"{$rrd->name} \";\n                    $img = Ht::img(\"comment48.png\", \"[{$what} response]\", $dlimgjs);\n                    $uk = $cflttype >= CONFLICT_AUTHOR ? ' class=\"font-weight-bold\"' : '';\n                    $cid = $cr->unparse_html_id();\n                    $t[] = \"<a class=\\\"uic js-edit-comment noul revlink\\\" href=\\\"#{$cid}\\\">{$img} <u{$uk}>{$what} {$title_prefix}response</u></a>\";\n                    $any_comments = true;\n                }\n            }\n        }\n\n        // override conflict\n        if ($this->user->privChair && !$this->allow_admin) {\n            $t[] = '<span class=\"revlink\">You can\u2019t override your conflict because this submission has an administrator.</span>';\n        }\n\n        $aut = \"\";\n        if ($prow->has_author($this->user)) {\n            if ($prow->author_by_email($this->user->email)) {\n                $aut = $this->conf->_('You are an <span class=\"author\">author</span> of this submission.');\n            } else {\n                $aut = $this->conf->_('You are a <span class=\"author\">contact</span> for this submission.');\n            }\n        } else if ($prow->has_conflict($this->user)) {\n            $aut = $this->conf->_('You have a <span class=\"conflict\">conflict</span> with this submission.');\n        }\n        return $pret\n            . ($aut ? \"<p class=\\\"sd\\\">{$aut}</p>\" : \"\")\n            . ($any_comments ? CommentInfo::script($prow) : \"\")\n            . (empty($t) ? \"\" : '<p class=\"sd\">' . join(\"\", $t) . '</p>');\n    }\n\n    private function _review_overview_card($rtable, $ifempty, $msgs) {\n        $t = \"\";\n        if ($rtable) {\n            $t .= $this->review_table();\n        }\n        $t .= $this->_review_links();\n        if (($empty = ($t === \"\"))) {\n            $t = $ifempty;\n        }\n        if ($msgs) {\n            $t .= join(\"\", $msgs);\n        }\n        if ($t) {\n            echo '<div class=\"pcard notecard\">', $t, '</div>';\n        }\n        return $empty;\n    }\n\n    private function include_comments() {\n        return !$this->allreviewslink\n            && (!empty($this->mycrows)\n                || $this->user->add_comment_state($this->prow) !== 0\n                || $this->conf->any_response_open);\n    }\n\n    function paptabEndWithReviewsAndComments() {\n        if ($this->prow->managerContactId === $this->user->contactXid\n            && !$this->user->privChair) {\n            $this->_paptabSepContaining(\"You are this submission\u2019s administrator.\");\n        }\n\n        // text format link\n        $m = $viewable = [];\n        foreach ($this->viewable_rrows as $rr) {\n            if ($rr->reviewStatus >= ReviewInfo::RS_DRAFTED) {\n                $viewable[] = \"reviews\";\n                break;\n            }\n        }\n        foreach ($this->crows as $cr) {\n            if ($this->user->can_view_comment($this->prow, $cr)) {\n                $viewable[] = \"comments\";\n                break;\n            }\n        }\n        if (!empty($viewable)) {\n            $m[] = '<p class=\"sd mt-5\"><a href=\"' . $this->prow->reviewurl([\"m\" => \"r\", \"text\" => 1]) . '\" class=\"noul\">'\n                . Ht::img(\"txt24.png\", \"[Text]\", \"dlimg\")\n                . \"&nbsp;<u>\" . ucfirst(join(\" and \", $viewable))\n                . \" in plain text</u></a></p>\";\n        }\n\n        if (!$this->_review_overview_card(true, '<p class=\"sd\">There are no reviews or comments for you to view.</p>', $m)) {\n            $this->print_rc($this->viewable_rrows, $this->include_comments());\n        }\n    }\n\n    /** @param int $respround\n     * @return ?CommentInfo */\n    private function response_by_id($respround) {\n        foreach ($this->mycrows as $cr) {\n            if (($cr->commentType & CommentInfo::CT_RESPONSE)\n                && $cr->commentRound == $respround)\n                return $cr;\n        }\n        return null;\n    }\n\n    /** @param list<ReviewInfo> $rrows\n     * @param bool $comments */\n    function print_rc($rrows, $comments) {\n        $rcs = [];\n        $any_submitted = false;\n        foreach ($rrows as $rrow) {\n            if ($rrow->reviewStatus >= ReviewInfo::RS_DRAFTED) {\n                $rcs[] = $rrow;\n                $any_submitted = $any_submitted || $rrow->reviewStatus >= ReviewInfo::RS_COMPLETED;\n            }\n        }\n        if ($comments && $this->mycrows) {\n            $rcs = $this->prow->merge_reviews_and_comments($rcs, $this->mycrows);\n        }\n\n        $s = \"\";\n        $ncmt = 0;\n        $rf = $this->conf->review_form();\n        foreach ($rcs as $rc) {\n            if (isset($rc->reviewId)) {\n                $rcj = $rf->unparse_review_json($this->user, $this->prow, $rc);\n                if (($any_submitted || $rc->reviewStatus === ReviewInfo::RS_ADOPTED)\n                    && $rc->reviewStatus < ReviewInfo::RS_COMPLETED\n                    && !$this->user->is_my_review($rc)) {\n                    $rcj->folded = true;\n                }\n                $s .= \"hotcrp.add_review(\" . json_encode_browser($rcj) . \");\\n\";\n            } else {\n                ++$ncmt;\n                $rcj = $rc->unparse_json($this->user);\n                $s .= \"hotcrp.add_comment(\" . json_encode_browser($rcj) . \");\\n\";\n            }\n        }\n\n        if ($comments) {\n            $cs = [];\n            if (($crow = CommentInfo::make_new_template($this->user, $this->prow))\n                && $crow->commentType !== 0) {\n                $cs[] = $crow;\n            }\n            if ($this->admin || $this->prow->has_author($this->user)) {\n                foreach ($this->conf->response_rounds() as $rrd) {\n                    if (!$this->response_by_id($rrd->id)\n                        && $rrd->relevant($this->user, $this->prow)) {\n                        $crow = CommentInfo::make_response_template($rrd, $this->prow);\n                        if ($this->user->can_edit_response($this->prow, $crow)) {\n                            $cs[] = $crow;\n                        }\n                    }\n                }\n            }\n            foreach ($cs as $crow) {\n                ++$ncmt;\n                $s .= \"hotcrp.add_comment(\" . json_encode_browser($crow->unparse_json($this->user)) . \");\\n\";\n            }\n        }\n\n        if ($ncmt) {\n            CommentInfo::print_script($this->prow);\n        }\n        if ($s !== \"\") {\n            echo Ht::unstash_script($s);\n        }\n    }\n\n    function print_comments() {\n        $this->print_rc([], $this->include_comments());\n    }\n\n    function paptabEndWithoutReviews() {\n        echo \"</div></div>\\n\";\n    }\n\n    function paptabEndWithReviewMessage() {\n        assert(!$this->editable);\n\n        $m = [];\n        if ($this->all_rrows\n            && ($whyNot = $this->user->perm_view_review($this->prow, null))) {\n            $m[] = \"<p class=\\\"sd\\\">You can\u2019t see the reviews for this submission. \" . $whyNot->unparse_html() . \"</p>\";\n        }\n        if (!$this->conf->time_review_open()\n            && $this->prow->review_type($this->user)) {\n            if ($this->rrow) {\n                $m[] = \"<p class=\\\"sd\\\">You can\u2019t edit your review because the site is not open for reviewing.</p>\";\n            } else {\n                $m[] = \"<p class=\\\"sd\\\">You can\u2019t begin your assigned review because the site is not open for reviewing.</p>\";\n            }\n        }\n\n        $this->_review_overview_card($this->user->can_view_review_assignment($this->prow, null), \"\", $m);\n    }\n\n    /** @param bool $editable\n     * @return bool */\n    private function _mark_review_messages($editable, ReviewInfo $rrow) {\n        if (($this->user->is_owned_review($rrow) || $this->admin)\n            && !$this->conf->time_review($rrow->reviewRound, $rrow->reviewType, true)) {\n            if ($this->conf->time_review_open()) {\n                $t = 'The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">review deadline</a> has passed, so the review can no longer be changed.';\n            } else {\n                $t = \"The site is not open for reviewing, so the review cannot be changed.\";\n            }\n            if (!$this->admin) {\n                $rrow->message_list[] = new MessageItem(null, $t, MessageSet::URGENT_NOTE);\n                return false;\n            } else {\n                $rrow->message_list[] = new MessageItem(null, \"{$t} As an administrator, you can override this deadline.\", MessageSet::WARNING);\n            }\n        } else if (!$this->user->can_edit_review($this->prow, $rrow)) {\n            return false;\n        }\n\n        // administrator?\n        if (!$this->user->is_my_review($rrow)) {\n            if ($this->user->is_owned_review($rrow)) {\n                $rrow->message_list[] = new MessageItem(null, \"This isn\u2019t your review, but you can make changes since you requested it.\", MessageSet::MARKED_NOTE);\n            } else if ($this->admin) {\n                $rrow->message_list[] = new MessageItem(null, \"This isn\u2019t your review, but as an administrator you can still make changes.\", MessageSet::MARKED_NOTE);\n            }\n        }\n\n        // delegate?\n        if (!$rrow->reviewSubmitted\n            && $rrow->contactId == $this->user->contactId\n            && $rrow->reviewType == REVIEW_SECONDARY\n            && $this->conf->ext_subreviews < 3) {\n            $ndelegated = 0;\n            $napproval = 0;\n            foreach ($this->prow->all_reviews() as $rr) {\n                if ($rr->reviewType === REVIEW_EXTERNAL\n                    && $rr->requestedBy === $rrow->contactId) {\n                    ++$ndelegated;\n                    if ($rr->reviewStatus === ReviewInfo::RS_DELIVERED) {\n                        ++$napproval;\n                    }\n                }\n            }\n\n            if ($ndelegated == 0) {\n                $t = \"As a secondary reviewer, you can <a href=\\\"\" . $this->conf->hoturl(\"assign\", \"p=$rrow->paperId\") . \"\\\">delegate this review to an external reviewer</a>, but if your external reviewer declines to review the paper, you should complete this review yourself.\";\n            } else if ($rrow->reviewNeedsSubmit == 0) {\n                $t = \"A delegated external reviewer has submitted their review, but you can still complete your own if you\u2019d like.\";\n            } else if ($napproval) {\n                $t = \"A delegated external reviewer has submitted their review for approval. If you approve that review, you won\u2019t need to submit your own.\";\n            } else {\n                $t = \"Your delegated external reviewer has not yet submitted a review.  If they do not, you should complete this review yourself.\";\n            }\n            $rrow->message_list[] = new MessageItem(null, $t, MessageSet::MARKED_NOTE);\n        }\n\n        return $editable;\n    }\n\n    function print_review_form() {\n        $editable = $this->mode === \"re\";\n        if ($this->editrrow) {\n            $editable = $this->_mark_review_messages($editable, $this->editrrow);\n        }\n        if ($editable) {\n            if (!$this->user->can_clickthrough(\"review\", $this->prow)) {\n                self::print_review_clickthrough();\n            }\n            $this->conf->review_form()->print_form($this->prow, $this->editrrow, $this->user, $this->review_values);\n        } else {\n            $this->print_rc([$this->editrrow], false);\n        }\n    }\n\n    function print_main_link() {\n        // intended for pages like review editing where we need a link back\n        $title = count($this->viewable_rrows) > 1 ? \"All reviews\" : \"Main\";\n        echo '<div class=\"pcard notecard\"><p class=\"sd\">',\n            '<a href=\"', $this->prow->hoturl([\"m\" => $this->paper_page_prefers_edit_mode() ? \"main\" : null]), '\" class=\"noul revlink\">',\n            Ht::img(\"view48.png\", \"[{$title}]\", [\"class\" => \"dlimg\", \"width\" => 24, \"height\" => 24]) . \"&nbsp;<u>{$title}</u></a>\",\n            \"</p></div>\\n\";\n    }\n\n\n    /** @param bool $want_review\n     * @suppress PhanAccessReadOnlyProperty */\n    function resolve_review($want_review) {\n        $this->prow->ensure_full_reviews();\n        $this->all_rrows = $this->prow->reviews_as_display();\n        $this->viewable_rrows = [];\n        $rf = $this->conf->review_form();\n        $unresolved_fields = $rf->all_fields();\n        foreach ($this->all_rrows as $rrow) {\n            if ($this->user->can_view_review($this->prow, $rrow)) {\n                $this->viewable_rrows[] = $rrow;\n                if (!empty($unresolved_fields)) {\n                    $bound = $this->user->view_score_bound($this->prow, $rrow);\n                    $this_resolved_fields = [];\n                    foreach ($unresolved_fields as $f) {\n                        if ($f->view_score > $bound && $rrow->has_nonempty_field($f))\n                            $this_resolved_fields[] = $f;\n                    }\n                    foreach ($this_resolved_fields as $f) {\n                        unset($unresolved_fields[$f->short_id]);\n                    }\n                }\n            }\n        }\n        $fj = [];\n        foreach (array_diff_key($rf->all_fields(), $unresolved_fields) as $f) {\n            $fj[] = $f->unparse_json(ReviewField::UJ_EXPORT);\n        }\n        Ht::stash_script(\"hotcrp.set_review_form(\" . json_encode_browser($fj) . \")\");\n\n        $this->rrow = $this->prow->review_by_ordinal_id((string) $this->qreq->reviewId);\n\n        $myrrow = $approvable_rrow = null;\n        foreach ($this->viewable_rrows as $rrow) {\n            if ($rrow->contactId === $this->user->contactId\n                || (!$myrrow && $this->user->is_my_review($rrow))) {\n                $myrrow = $rrow;\n            }\n            if (($rrow->requestedBy === $this->user->contactId || $this->admin)\n                && $rrow->reviewStatus === ReviewInfo::RS_DELIVERED\n                && !$approvable_rrow) {\n                $approvable_rrow = $rrow;\n            }\n        }\n\n        if ($this->rrow) {\n            $this->editrrow = $this->rrow;\n        } else if (!$approvable_rrow\n                   || ($myrrow\n                       && $myrrow->reviewStatus !== 0\n                       && !$this->prefer_approvable)) {\n            $this->editrrow = $myrrow;\n        } else {\n            $this->editrrow = $approvable_rrow;\n        }\n\n        if ($want_review\n            && ($this->editrrow\n                ? $this->user->can_edit_review($this->prow, $this->editrrow, false)\n                : $this->user->can_create_review($this->prow))) {\n            $this->mode = \"re\";\n        }\n\n        // fix mode\n        if ($this->mode === \"re\"\n            && $this->rrow\n            && !$this->user->can_edit_review($this->prow, $this->rrow, false)\n            && ($this->rrow->contactId != $this->user->contactId\n                || $this->rrow->reviewStatus >= ReviewInfo::RS_COMPLETED)) {\n            $this->mode = \"p\";\n        }\n        if ($this->mode === \"p\"\n            && $this->rrow\n            && !$this->user->can_view_review($this->prow, $this->rrow)) {\n            $this->rrow = $this->editrrow = null;\n        }\n        if ($this->mode === \"p\"\n            && $this->prow->paperId\n            && empty($this->viewable_rrows)\n            && empty($this->mycrows)\n            && !$this->allow_admin\n            && $this->qreq->page() === \"paper\"\n            && ($this->allow_admin || $this->allow_edit())\n            && ($this->conf->time_finalize_paper($this->prow)\n                || $this->prow->timeSubmitted <= 0)) {\n            $this->mode = \"edit\";\n        }\n    }\n\n    function resolve_comments() {\n        $this->crows = $this->prow->all_comments();\n        $this->mycrows = $this->prow->viewable_comments($this->user, true);\n    }\n\n    /** @return list<ReviewInfo> */\n    function all_reviews() {\n        return $this->all_rrows;\n    }\n}\n\nclass PaperTableFieldRender {\n    /** @var PaperOption */\n    public $option;\n    /** @var int */\n    public $view_state;\n    public $title;\n    public $value;\n    /** @var ?bool */\n    public $value_long;\n\n    /** @param PaperOption $option */\n    function __construct($option, $view_state, FieldRender $fr) {\n        $this->option = $option;\n        $this->view_state = $view_state;\n        $this->title = $fr->title;\n        $this->value = $fr->value;\n        $this->value_long = $fr->value_long;\n    }\n}\n"], "fixing_code": ["<?php\n// api_decision.php -- HotCRP decision API\n// Copyright (c) 2008-2022 Eddie Kohler; see LICENSE.\n\nclass Decision_API {\n    static function run(Contact $user, Qrequest $qreq, PaperInfo $prow) {\n        $decset = $user->conf->decision_set();\n        if ($qreq->method() !== \"GET\") {\n            $aset = new AssignmentSet($user, true);\n            $aset->enable_papers($prow);\n            if (is_numeric($qreq->decision) && $decset->contains(+$qreq->decision)) {\n                $qreq->decision = $decset->get(+$qreq->decision)->name;\n            }\n            $aset->parse(\"paper,action,decision\\n{$prow->paperId},decision,\" . CsvGenerator::quote($qreq->decision));\n            if (!$aset->execute()) {\n                return $aset->json_result();\n            }\n            $prow->load_decision();\n        }\n        $dec = $prow->viewable_decision($user);\n        $jr = new JsonResult([\"ok\" => true, \"value\" => $dec->id, \"result\" => $dec->name_as(5)]);\n        if ($user->can_set_decision($prow)) {\n            $jr->content[\"editable\"] = true;\n        }\n        return $jr;\n    }\n}\n", "<?php\n// a_decision.php -- HotCRP assignment helper classes\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Decision_Assignable extends Assignable {\n    /** @var ?int */\n    public $_decision;\n    /** @var ?int */\n    public $_decyes;\n    /** @param ?int $pid\n     * @param ?int $decision\n     * @param ?int $decyes */\n    function __construct($pid, $decision = null, $decyes = null) {\n        $this->type = \"decision\";\n        $this->pid = $pid;\n        $this->_decision = $decision;\n        $this->_decyes = $decyes;\n    }\n    /** @return self */\n    function fresh() {\n        return new Decision_Assignable($this->pid);\n    }\n}\n\nclass Decision_AssignmentParser extends UserlessAssignmentParser {\n    private $remove;\n    function __construct(Conf $conf, $aj) {\n        parent::__construct(\"decision\");\n        $this->remove = $aj->remove;\n    }\n    static function load_decision_state(AssignmentState $state) {\n        if ($state->mark_type(\"decision\", [\"pid\"], \"Decision_Assigner::make\")) {\n            foreach ($state->prows() as $prow) {\n                $state->load(new Decision_Assignable($prow->paperId, +$prow->outcome));\n            }\n        }\n    }\n    function load_state(AssignmentState $state) {\n        self::load_decision_state($state);\n    }\n    function allow_paper(PaperInfo $prow, AssignmentState $state) {\n        if ($state->user->can_set_decision($prow)) {\n            return true;\n        } else {\n            return new AssignmentError(\"<0>You can\u2019t change the decision for #{$prow->paperId}.\");\n        }\n    }\n    function apply(PaperInfo $prow, Contact $contact, $req, AssignmentState $state) {\n        $removepred = null;\n        $dec = null;\n        if (isset($req[\"decision\"])) {\n            $matchexpr = $state->conf->decision_set()->matchexpr($req[\"decision\"]);\n            if (!$this->remove) {\n                if (is_string($matchexpr)) {\n                    $cm = new CountMatcher($matchexpr);\n                    $dec = [];\n                    foreach ($state->conf->decision_set() as $di) {\n                        if ($cm->test($di->id))\n                            $dec[] = $di->id;\n                    }\n                } else {\n                    $dec = $matchexpr;\n                }\n                if (count($dec) === 1) {\n                    $dec = $dec[0];\n                } else if (empty($dec)) {\n                    return new AssignmentError(\"<0>No decisions match \u2018\" . $req[\"decision\"] . \"\u2019\");\n                } else {\n                    return new AssignmentError(\"<0>More than one decision matches \u2018\" . $req[\"decision\"]);\n                }\n            } else {\n                $removepred = function ($item) use ($matchexpr) {\n                    return CountMatcher::compare_using($item->_decision, $matchexpr);\n                };\n            }\n        } else if (!$this->remove) {\n            return new AssignmentError(\"<0>Decision required\");\n        }\n        $state->remove_if(new Decision_Assignable($prow->paperId), $removepred);\n        if (!$this->remove && $dec) {\n            $decyes = 0;\n            // accepted papers are always submitted\n            if ($dec > 0) {\n                Status_AssignmentParser::load_status_state($state);\n                $sm = $state->remove(new Status_Assignable($prow->paperId));\n                $sres = $sm[0];\n                if ($sres->_submitted === 0) {\n                    $sres->_submitted = ($sres->_withdrawn > 0 ? -Conf::$now : Conf::$now);\n                }\n                $state->add($sres);\n                if ($sres->_submitted > 0) {\n                    $decyes = 1;\n                }\n            }\n            $state->add(new Decision_Assignable($prow->paperId, +$dec, $decyes));\n        }\n        return true;\n    }\n}\n\nclass Decision_Assigner extends Assigner {\n    function __construct(AssignmentItem $item, AssignmentState $state) {\n        parent::__construct($item, $state);\n    }\n    static function make(AssignmentItem $item, AssignmentState $state) {\n        return new Decision_Assigner($item, $state);\n    }\n    /** @param int $decid */\n    static function decision_html(Conf $conf, $decid) {\n        $dec = $conf->decision_set()->get($decid);\n        $class = $dec->status_class();\n        $name_h = $dec->id === 0 ? \"No decision\" : $dec->name_as(5);\n        return \"<span class=\\\"pstat {$class}\\\">{$name_h}</span>\";\n    }\n    function unparse_display(AssignmentSet $aset) {\n        $t = [];\n        if ($this->item->existed()) {\n            $t[] = '<del>' . self::decision_html($aset->conf, $this->item->pre(\"_decision\")) . '</del>';\n        }\n        $t[] = '<ins>' . self::decision_html($aset->conf, $this->item[\"_decision\"]) . '</ins>';\n        return join(\" \", $t);\n    }\n    function unparse_csv(AssignmentSet $aset, AssignmentCsv $acsv) {\n        $x = [\"pid\" => $this->pid, \"action\" => \"decision\"];\n        if ($this->item->deleted()) {\n            $x[\"decision\"] = \"none\";\n        } else {\n            $x[\"decision\"] = $aset->conf->decision_name($this->item[\"_decision\"]);\n        }\n        $acsv->add($x);\n    }\n    function account(AssignmentSet $aset, AssignmentCountSet $deltarev) {\n        $aset->show_column(\"status\");\n    }\n    function add_locks(AssignmentSet $aset, &$locks) {\n        $locks[\"Paper\"] = \"write\";\n    }\n    function execute(AssignmentSet $aset) {\n        $dec = $this->item->deleted() ? 0 : $this->item[\"_decision\"];\n        $aset->stage_qe(\"update Paper set outcome=? where paperId=?\", $dec, $this->pid);\n        $aset->user->log_activity(\"Set decision: \" . $aset->conf->decision_name($dec), $this->pid);\n        if ($dec > 0 || $this->item->pre(\"_decision\") > 0) {\n            $aset->register_cleanup_function(\"paperacc\", function ($vals) use ($aset) {\n                $aset->conf->update_paperacc_setting(min($vals));\n            }, $dec > 0 && $this->item[\"_decyes\"] ? 1 : 0);\n        }\n    }\n}\n", "<?php\n// decisioninfo.php -- HotCRP helper class for decisions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass DecisionInfo {\n    /** @var int */\n    public $id;\n    /** @var string */\n    public $name;\n    /** @var 1|2|4 */\n    public $category; // must be suitable for masking\n    /** @var -1|0|1 */\n    public $sign;\n    /** @var bool */\n    public $placeholder = false;\n    /** @var int */\n    public $order = 0;\n\n\n    const CAT_NONE = 1;\n    const CAT_YES = 2;\n    const CAT_NO = 4;\n    const CAT_ALL = 7;\n    // see also DecisionSet::matchexpr\n\n    static private $class_name = [null, null, \"dec-yes\", null, \"dec-no\"];\n    static private $category_name = [null, null, \"accept\", null, \"reject\"];\n\n\n    /** @param int $id\n     * @param string $name */\n    function __construct($id, $name) {\n        $this->id = $id;\n        $this->name = $name;\n        if ($this->id === 0) {\n            $this->category = self::CAT_NONE;\n            $this->sign = 0;\n        } else if ($this->id > 0) {\n            $this->category = self::CAT_YES;\n            $this->sign = 1;\n        } else {\n            $this->category = self::CAT_NO;\n            $this->sign = -1;\n        }\n    }\n\n    /** @param int $id\n     * @return DecisionInfo */\n    static function make_placeholder($id) {\n        $dec = new DecisionInfo($id, \"[#{$id}]\");\n        $dec->placeholder = true;\n        return $dec;\n    }\n\n    /** @param 0|5 $format\n     * @return string */\n    function name_as($format) {\n        return $format === 5 ? htmlspecialchars($this->name) : $this->name;\n    }\n\n    /** @return string */\n    function status_class() {\n        return self::$class_name[$this->category] ?? \"dec-maybe\";\n    }\n\n    /** @param Decision_Setting $ds */\n    function unparse_setting($ds) {\n        $ds->id = $this->id;\n        $ds->name = $this->name;\n        $ds->category = self::$category_name[$this->category] ?? \"maybe\";\n    }\n}\n", "<?php\n// help/h_keywords.php -- HotCRP help functions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Keywords_HelpTopic {\n    static function print(HelpRenderer $hth) {\n        // how to report author searches?\n        if ($hth->conf->submission_blindness() === Conf::BLIND_NEVER) {\n            $aunote = \"\";\n        } else if ($hth->conf->submission_blindness() === Conf::BLIND_ALWAYS) {\n            $aunote = \"<br><span class=\\\"hint\\\">Search uses fields visible to the searcher. For example, PC member searches do not examine authors.</span>\";\n        } else {\n            $aunote = \"<br><span class=\\\"hint\\\">Search uses fields visible to the searcher. For example, PC member searches do not examine anonymous authors.</span>\";\n        }\n\n        // does a reviewer tag exist?\n        $retag = $hth->meaningful_pc_tag() ?? \"\";\n\n        echo $hth->table(true);\n        echo $hth->tgroup(\"Basics\");\n        echo $hth->search_trow(\"\", \"all submissions in the search category\");\n        echo $hth->search_trow(\"story\", \"\u201cstory\u201d in title, abstract, authors$aunote\");\n        echo $hth->search_trow(\"119\", \"submission #119\");\n        echo $hth->search_trow(\"1 2 5 12-24 kernel\", \"submissions in the numbered set with \u201ckernel\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"\\\"802\\\"\", \"\u201c802\u201d in title, abstract, authors (not submission #802)\");\n        echo $hth->search_trow(\"very new\", \"\u201cvery\u201d <em>and</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very AND new\", \"the same\");\n        echo $hth->search_trow(\"\\\"very new\\\"\", \"the phrase \u201cvery new\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very OR new\", \"<em>either</em> \u201cvery\u201d <em>or</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"(very AND new) OR newest\", \"use parentheses to group\");\n        echo $hth->search_trow(\"very -new\", \"\u201cvery\u201d <em>but not</em> \u201cnew\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"very NOT new\", \"the same\");\n        echo $hth->search_trow(\"ve*\", \"words that <em>start with</em> \u201cve\u201d in title, abstract, authors\");\n        echo $hth->search_trow(\"*me*\", \"words that <em>contain</em> \u201cme\u201d in title, abstract, authors\");\n\n        echo $hth->tgroup(\"Title\");\n        echo $hth->search_trow(\"ti:flexible\", \"title contains \u201cflexible\u201d\");\n        echo $hth->tgroup(\"Abstract\");\n        echo $hth->search_trow(\"ab:\\\"very novel\\\"\", \"abstract contains \u201cvery novel\u201d\");\n        echo $hth->tgroup(\"Authors\");\n        echo $hth->search_trow(\"au:poletto\", \"author list contains \u201cpoletto\u201d\");\n        if ($hth->user->isPC) {\n            echo $hth->search_trow(\"au:pc\", \"one or more authors are PC members (author email matches PC email)\");\n        }\n        echo $hth->search_trow(\"au:>4\", \"more than four authors\");\n        echo $hth->tgroup(\"Collaborators\");\n        echo $hth->search_trow(\"co:liskov\", \"collaborators contains \u201cliskov\u201d\");\n        echo $hth->tgroup(\"Topics\");\n        echo $hth->search_trow(\"topic:link\", \"selected topics match \u201clink\u201d\");\n\n        $opts = array_filter($hth->conf->options()->normal(), function ($o) {\n            return $o->form_order() !== false && $o->search_keyword() !== false;\n        });\n        usort($opts, function ($a, $b) {\n            if ($a->final !== $b->final) {\n                return $a->final ? 1 : -1;\n            } else {\n                return PaperOption::compare($a, $b);\n            }\n        });\n        $oexs = [];\n        foreach ($opts as $o) {\n            foreach ($o->search_examples($hth->user, PaperOption::EXAMPLE_HELP) as $ex) {\n                if ($ex) {\n                    $ex->opt = $o;\n                    $oexs[] = $ex;\n                }\n            }\n        }\n\n        if (!empty($oexs)) {\n            echo $hth->tgroup(\"Submission fields\");\n            for ($i = 0; $i !== count($oexs); ++$i) {\n                if (($ex = $oexs[$i]) && $ex->description) {\n                    $others = [];\n                    for ($j = $i + 1; $j !== count($oexs); ++$j) {\n                        if ($oexs[$j] && $oexs[$j]->description === $ex->description) {\n                            $others[] = htmlspecialchars($oexs[$j]->q);\n                            $oexs[$j] = null;\n                        }\n                    }\n                    $q = $ex->q;\n                    if ($ex->param_q) {\n                        $q = preg_replace('/<.*?>(?=\\z|\"\\z)/', $ex->param_q, $q);\n                    }\n                    $args = $ex->params;\n                    $args[] = new FmtArg(\"title\", $ex->opt->title());\n                    $args[] = new FmtArg(\"id\", $ex->opt->readable_formid());\n                    $desc = Ftext::unparse_as($hth->conf->_($ex->description, ...$args), 5);\n                    if (!empty($others)) {\n                        $desc .= '<div class=\"hint\">Also ' . join(\", \", $others) . '</div>';\n                    }\n                    echo $hth->search_trow($q, $desc);\n                }\n            }\n        }\n\n        echo $hth->tgroup($hth->help_link(\"Tags\", \"tags\"));\n        echo $hth->search_trow(\"#discuss\", \"tagged \u201cdiscuss\u201d (\u201ctag:discuss\u201d also works)\");\n        echo $hth->search_trow(\"-#discuss\", \"not tagged \u201cdiscuss\u201d\");\n        echo $hth->search_trow(\"order:discuss\", \"tagged \u201cdiscuss\u201d, sort by tag order (\u201crorder:\u201d for reverse order)\");\n        echo $hth->search_trow(\"#disc*\", \"matches any tag that <em>starts with</em> \u201cdisc\u201d\");\n\n        $cx = null;\n        $cm = [];\n        foreach ($hth->conf->tags() as $t) {\n            foreach ($t->styles ?? [] as $c) {\n                $cx = $cx ?? $c;\n                if ($cx === $c)\n                    $cm[] = \"\u201c{$t->tag}\u201d\";\n            }\n        }\n        if (!empty($cm)) {\n            array_unshift($cm, \"\u201c{$cx->name}\u201d\");\n            $klass = \"taghh tag-{$cx->style}\";\n            if (($cx->sclass & TagStyle::BG) !== 0) {\n                $klass .= $cx->dark() ? \" dark tagbg\" : \" tagbg\";\n            }\n            echo $hth->search_trow(\"style:{$cx->name}\", \"tagged to appear <span class=\\\"{$klass}\\\">{$cx->name}</span> (tagged \" . commajoin($cm, \"or\") . \")\");\n        }\n\n        $roundname = $hth->meaningful_review_round_name();\n\n        echo $hth->tgroup(\"Reviews\");\n        echo $hth->search_trow(\"re:me\", \"you are a reviewer\");\n        echo $hth->search_trow(\"re:fdabek\", \"\u201cfdabek\u201d in reviewer name/email\");\n        if ($retag) {\n            echo $hth->search_trow(\"re:#$retag\", \"has a reviewer tagged \u201c#\" . $retag . \"\u201d\");\n        }\n        echo $hth->search_trow(\"re:4\", \"four reviewers (assigned and/or completed)\");\n        if ($retag) {\n            echo $hth->search_trow(\"re:#$retag>1\", \"at least two reviewers (assigned and/or completed) tagged \u201c#\" . $retag . \"\u201d\");\n        }\n        echo $hth->search_trow(\"re:complete<3\", \"less than three completed reviews<br /><span class=\\\"hint\\\">Use \u201ccre:<3\u201d for short.</span>\");\n        echo $hth->search_trow(\"re:incomplete>0\", \"at least one incomplete review\");\n        echo $hth->search_trow(\"re:inprogress\", \"at least one in-progress review (started, but not completed)\");\n        echo $hth->search_trow(\"re:primary>=2\", \"at least two primary reviewers\");\n        echo $hth->search_trow(\"re:secondary\", \"at least one secondary reviewer\");\n        echo $hth->search_trow(\"re:external\", \"at least one external reviewer\");\n        echo $hth->search_trow(\"re:primary:fdabek:complete\", \"\u201cfdabek\u201d has completed a primary review\");\n        if ($hth->conf->setting(\"extrev_chairreq\") >= 0) {\n            echo $hth->search_trow(\"re:myreq\", \"has a review requested by you\");\n            echo $hth->search_trow(\"re:myreq:not-accepted\", \"has a review requested by you that hasn\u2019t been accepted or edited yet\");\n        }\n        if ($roundname) {\n            echo $hth->search_trow(\"re:{$roundname}\", \"review in round \u201c\" . htmlspecialchars($roundname) . \"\u201d\");\n            echo $hth->search_trow(\"re:{$roundname}:jinyang\", \"review in round \u201c\" . htmlspecialchars($roundname) . \"\u201d by reviewer \u201cjinyang\u201d\");\n        }\n        echo $hth->search_trow(\"re:auwords<100\", \"has a review with less than 100 words in author-visible fields\");\n        if ($hth->conf->setting(\"rev_tokens\")) {\n            echo $hth->search_trow(\"retoken:J88ADNAB\", \"has a review with token J88ADNAB\");\n        }\n        if ($hth->conf->setting(\"rev_ratings\") != REV_RATINGS_NONE) {\n            echo $hth->search_trow(\"rate:good\", \"has a positively-rated review (\u201crate:bad\u201d, \u201crate:biased\u201d, etc. also work)\");\n            echo $hth->search_trow(\"rate:good:me\", \"has a positively-rated review by you\");\n        }\n\n        echo $hth->tgroup(\"Comments\");\n        echo $hth->search_trow(\"has:cmt\", \"at least one visible reviewer comment (not including authors\u2019 response)\");\n        echo $hth->search_trow(\"cmt:>=3\", \"at least <em>three</em> visible reviewer comments\");\n        echo $hth->search_trow(\"has:aucmt\", \"at least one reviewer comment visible to authors\");\n        echo $hth->search_trow(\"cmt:sylvia\", \"\u201csylvia\u201d (in name/email) wrote at least one visible comment; can combine with counts, use reviewer tags\");\n        $rrds = $hth->conf->response_rounds();\n        if (count($rrds) > 1) {\n            echo $hth->search_trow(\"has:response\", \"has an author\u2019s response\");\n            echo $hth->search_trow(\"has:{$rrds[1]->name}response\", \"has {$rrds[1]->name} response\");\n        } else {\n            echo $hth->search_trow(\"has:response\", \"has author\u2019s response\");\n        }\n        echo $hth->search_trow(\"anycmt:>1\", \"at least two visible comments, possibly <em>including</em> author\u2019s response\");\n\n        echo $hth->tgroup(\"Leads\");\n        echo $hth->search_trow(\"lead:fdabek\", \"\u201cfdabek\u201d (in name/email) is discussion lead\");\n        echo $hth->search_trow(\"lead:none\", \"no assigned discussion lead\");\n        echo $hth->search_trow(\"lead:any\", \"some assigned discussion lead\");\n        echo $hth->tgroup(\"Shepherds\");\n        echo $hth->search_trow(\"shep:fdabek\", \"\u201cfdabek\u201d (in name/email) is shepherd (\u201cnone\u201d and \u201cany\u201d also work)\");\n        echo $hth->tgroup(\"Conflicts\");\n        echo $hth->search_trow(\"conflict:me\", \"you have a conflict with the submission\");\n        echo $hth->search_trow(\"conflict:fdabek\", \"\u201cfdabek\u201d (in name/email) has a conflict with the submission<br /><span class=\\\"hint\\\">This search is only available to chairs and to PC members who can see the submission\u2019s author list.</span>\");\n        echo $hth->search_trow(\"conflict:pc\", \"some PC member has a conflict with the submission\");\n        echo $hth->search_trow(\"conflict:pc>2\", \"at least three PC members have conflicts with the submission\");\n        echo $hth->search_trow(\"reconflict:\\\"1 2 3\\\"\", \"a reviewer of submission 1, 2, or 3 has a conflict with the submission\");\n        echo $hth->tgroup(\"Preferences\");\n        echo $hth->search_trow(\"pref:3\", \"you have preference 3\");\n        echo $hth->search_trow(\"pref:pc:X\", \"a PC member\u2019s preference has expertise \u201cX\u201d (expert)\");\n        echo $hth->search_trow(\"pref:fdabek>0\", \"\u201cfdabek\u201d (in name/email) has preference &gt;&nbsp;0<br /><span class=\\\"hint\\\">Administrators can search preferences by name; PC members can only search preferences for the PC as a whole.</span>\");\n        echo $hth->tgroup(\"Status\");\n        echo $hth->search_trow([\"q\" => \"status:ready\", \"t\" => \"all\"], \"submission is ready for review\");\n        echo $hth->search_trow([\"q\" => \"status:incomplete\", \"t\" => \"all\"], \"submission is incomplete (neither ready nor withdrawn)\");\n        echo $hth->search_trow([\"q\" => \"status:withdrawn\", \"t\" => \"all\"], \"submission has been withdrawn\");\n        echo $hth->search_trow(\"has:final\", \"final version uploaded\");\n\n        echo $hth->tgroup(\"Decisions\");\n        foreach ($hth->conf->decision_set() as $dec) {\n            if ($dec->id !== 0) {\n                $qdname = strtolower($dec->name);\n                if (strpos($qdname, \" \") !== false) {\n                    $qdname = \"\\\"{$qdname}\\\"\";\n                }\n                echo $hth->search_trow(\"dec:{$qdname}\", \"decision is \u201c\" . $dec->name_as(5) . \"\u201d (partial matches OK)\");\n                break;\n            }\n        }\n        echo $hth->search_trow(\"dec:yes\", \"one of the accept decisions\");\n        echo $hth->search_trow(\"dec:no\", \"one of the reject decisions\");\n        echo $hth->search_trow(\"dec:any\", \"decision specified\");\n        echo $hth->search_trow(\"dec:none\", \"decision unspecified\");\n\n        // find names of review fields to demonstrate syntax\n        $scoref = [];\n        $textf = [];\n        foreach ($hth->conf->review_form()->viewable_fields($hth->user) as $f) {\n            if ($f instanceof Score_ReviewField) {\n                $scoref[] = $f;\n            } else if ($f instanceof Text_ReviewField) {\n                $textf[] = $f;\n            }\n        }\n        if (!empty($scoref) || !empty($textf)) {\n            echo $hth->tgroup(\"Review fields\");\n        }\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->search_trow(\"{$r->abbreviation1()}:{$r->typical_score()}\", \"at least one completed review has $r->name_html score {$r->typical_score()}\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:{$r->typical_score()}\", \"other abbreviations accepted\");\n            if (count($scoref) > 1) {\n                $r2 = $scoref[1];\n                echo $hth->search_trow(strtolower($r2->search_keyword()) . \":{$r2->typical_score()}\", \"other fields accepted (here, $r2->name_html)\");\n            }\n            if (($range = $r->typical_score_range())) {\n                echo $hth->search_trow(\"{$r->search_keyword()}:{$range[0]}..{$range[1]}\", \"completed reviews\u2019 $r->name_html scores are in the {$range[0]}&ndash;{$range[1]} range<br /><small>(all scores between {$range[0]} and {$range[1]})</small>\");\n                $rt = $range[0] . ($r->option_letter ? \"\" : \"-\") . $range[1];\n                echo $hth->search_trow(\"{$r->search_keyword()}:$rt\", \"completed reviews\u2019 $r->name_html scores <em>fill</em> the {$range[0]}&ndash;{$range[1]} range<br /><small>(all scores between {$range[0]} and {$range[1]}, with at least one {$range[0]} and at least one {$range[1]})</small>\");\n            }\n            $hint = \"\";\n            if (!$r->option_letter) {\n                $gt_typical = \"greater than {$r->typical_score()}\";\n                $le_typical = \"less than or equal to {$r->typical_score()}\";\n            } else {\n                $s1 = $r->parse_string($r->typical_score());\n                if ($hth->conf->opt(\"smartScoreCompare\")) {\n                    $s1le = range($s1, 1);\n                    $s1gt = range($r->nvalues(), $s1 + 1);\n                    $hint = \"<br><small>(scores \u201cbetter than\u201d {$r->typical_score()} are earlier in the alphabet)</small>\";\n                } else {\n                    $s1le = range($r->nvalues(), $s1);\n                    $s1gt = range($s1 - 1, 1);\n                }\n                $gt_typical = commajoin(array_map([$r, \"value_unparse\"], $s1gt), \" or \");\n                $le_typical = commajoin(array_map([$r, \"value_unparse\"], $s1le), \" or \");\n            }\n            echo $hth->search_trow(\"{$r->search_keyword()}:>{$r->typical_score()}\", \"at least one completed review has $r->name_html score $gt_typical\" . $hint);\n            echo $hth->search_trow(\"{$r->search_keyword()}:2<={$r->typical_score()}\", \"at least two completed reviews have $r->name_html score $le_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:=2<={$r->typical_score()}\", \"<em>exactly</em> two completed reviews have $r->name_html score $le_typical\");\n            if ($roundname) {\n                echo $hth->search_trow(\"{$r->search_keyword()}:$roundname>{$r->typical_score()}\", \"at least one completed review in round \" . htmlspecialchars($roundname) . \" has $r->name_html score $gt_typical\");\n            }\n            echo $hth->search_trow(\"{$r->search_keyword()}:ext>{$r->typical_score()}\", \"at least one completed external review has $r->name_html score $gt_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:pc:2>{$r->typical_score()}\", \"at least two completed PC reviews have $r->name_html score $gt_typical\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:sylvia={$r->typical_score()}\", \"\u201csylvia\u201d (reviewer name/email) gave $r->name_html score {$r->typical_score()}\");\n        }\n        if (count($textf)) {\n            $r = $textf[0];\n            echo $hth->search_trow($r->abbreviation1() . \":finger\", \"at least one completed review has \u201cfinger\u201d in the $r->name_html field\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:finger\", \"other abbreviations accepted\");\n            echo $hth->search_trow(\"{$r->search_keyword()}:any\", \"at least one completed review has text in the $r->name_html field\");\n        }\n\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->tgroup($hth->help_link(\"Formulas\", \"formulas\"));\n            echo $hth->search_trow(\"formula:all({$r->search_keyword()}={$r->typical_score()})\",\n                \"all reviews have $r->name_html score {$r->typical_score()}<br />\" .\n                \"<span class=\\\"hint\\\">\" . $hth->help_link(\"Formulas\", \"formulas\") . \" can express complex numerical queries across review scores and preferences.</span>\");\n            echo $hth->search_trow(\"f:all({$r->search_keyword()}={$r->typical_score()})\", \"\u201cf\u201d is shorthand for \u201cformula\u201d\");\n            echo $hth->search_trow(\"formula:var({$r->search_keyword()})>0.5\", \"variance in {$r->search_keyword()} is above 0.5\");\n            echo $hth->search_trow(\"formula:any({$r->search_keyword()}={$r->typical_score()} && pref<0)\", \"at least one reviewer had $r->name_html score {$r->typical_score()} and review preference &lt; 0\");\n        }\n\n        echo $hth->tgroup(\"Display\");\n        echo $hth->search_trow(\"show:tags show:pcconflicts\", \"show tags and PC conflicts in the results\");\n        echo $hth->search_trow(\"hide:title\", \"hide title in the results\");\n        if (count($scoref)) {\n            $r = $scoref[0];\n            echo $hth->search_trow(\"show:max({$r->search_keyword()})\", \"show a \" . $hth->help_link(\"formula\", \"formulas\"));\n            echo $hth->search_trow(\"sort:{$r->search_keyword()}\", \"sort by score\");\n            echo $hth->search_trow(\"sort:[{$r->search_keyword()} variance]\", \"sort by score variance\");\n        }\n        echo $hth->search_trow(\"sort:-status\", \"sort by reverse status\");\n        echo $hth->search_trow(\"edit:#discuss\", \"edit the values for tag \u201c#discuss\u201d\");\n        echo $hth->search_trow(\"search1 THEN search2\", \"like \u201csearch1 OR search2\u201d, but submissions matching \u201csearch1\u201d are grouped together and appear earlier in the sorting order\");\n        echo $hth->search_trow(\"1-5 THEN 6-10 show:kanban\", \"display in kanban format\");\n        echo $hth->search_trow(\"search1 HIGHLIGHT search2\", \"search for \u201csearch1\u201d, but <span class=\\\"taghh highlightmark\\\">highlight</span> submissions in that list that match \u201csearch2\u201d (also try HIGHLIGHT:pink, HIGHLIGHT:green, HIGHLIGHT:blue)\");\n\n        echo $hth->end_table();\n    }\n}\n", "<?php\n// listactions/la_decide.php -- HotCRP helper classes for list actions\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass Decide_ListAction extends ListAction {\n    function allow(Contact $user, Qrequest $qreq) {\n        return $user->can_set_some_decision();\n    }\n    static function render(PaperList $pl, Qrequest $qreq) {\n        $opts = [];\n        foreach ($pl->conf->decision_set() as $dec) {\n            $opts[$dec->id] = $dec->name_as(5);\n        }\n        return [\"Set to &nbsp;\"\n                . Ht::select(\"decision\", $opts, \"\", [\"class\" => \"want-focus js-submit-action-info-decide\"])\n                . $pl->action_submit(\"decide\")];\n    }\n    function run(Contact $user, Qrequest $qreq, SearchSelection $ssel) {\n        $aset = new AssignmentSet($user, true);\n        $did = $qreq->decision;\n        if (is_numeric($did)\n            && ($dec = ($user->conf->decision_set())[+$did])) {\n            $did = $dec->name;\n        }\n        $aset->parse(\"paper,action,decision\\n\" . join(\" \", $ssel->selection()) . \",decision,\" . CsvGenerator::quote($did));\n        if ($aset->execute()) {\n            return new Redirection($user->conf->site_referrer_url($qreq, [\"atab\" => \"decide\", \"decision\" => $qreq->decision], Conf::HOTURL_RAW));\n        } else {\n            $user->conf->feedback_msg($aset->message_list());\n        }\n    }\n}\n", "<?php\n// mailrecipients.php -- HotCRP mail tool\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass MailRecipients extends MessageSet {\n    /** @var Conf */\n    private $conf;\n    /** @var Contact */\n    private $user;\n    /** @var string */\n    private $type;\n    /** @var ?list<int> */\n    private $paper_ids;\n    /** @var int */\n    public $newrev_since = 0;\n    /** @var ?array<int,int> */\n    private $_dcounts;\n    /** @var ?array{bool,bool,bool} */\n    private $_has_dt;\n    /** @var array<string,string> */\n    private $sel = [];\n    /** @var array<string,int> */\n    private $selflags = [];\n\n    const F_ANYPC = 1;\n    const F_GROUP = 2;\n    const F_HIDE = 4;\n    const F_NOPAPERS = 8;\n    const F_SINCE = 16;\n\n    private function defsel($name, $description, $flags = 0) {\n        assert(!isset($this->sel[$name]));\n        $this->sel[$name] = $description;\n        $this->selflags[$name] = $flags;\n    }\n\n    /** @param Contact $user */\n    function __construct($user) {\n        assert(!!$user->isPC);\n        $this->conf = $user->conf;\n        $this->user = $user;\n        $this->set_ignore_duplicates(true);\n    }\n\n    /** @return bool */\n    function has_paper_ids() {\n        return $this->paper_ids !== null;\n    }\n\n    /** @return list<int> */\n    function paper_ids() {\n        return $this->paper_ids ?? [];\n    }\n\n    /** @param ?list<int> $paper_ids\n     * @return $this */\n    function set_paper_ids($paper_ids) {\n        $this->paper_ids = $paper_ids;\n        return $this;\n    }\n\n    /** @param ?string $newrev_since\n     * @return $this */\n    function set_newrev_since($newrev_since) {\n        $newrev_since = trim($newrev_since ?? \"\");\n        if ($newrev_since !== \"\"\n            && !preg_match('/\\A(?:|n\\/a|\\(?all\\)?|0)\\z/i', $newrev_since)) {\n            $t = $this->conf->parse_time($newrev_since);\n            if ($t === false) {\n                $this->error_at(\"newrev_since\", \"Invalid date.\");\n            } else {\n                $this->newrev_since = $t;\n                if ($t > Conf::$now) {\n                    $this->warning_at(\"newrev_since\", \"That time is in the future.\");\n                }\n            }\n        } else {\n            $this->newrev_since = null;\n        }\n        return $this;\n    }\n\n    private function dcounts() {\n        if ($this->_dcounts === null) {\n            if ($this->user->allow_administer_all()) {\n                $result = $this->conf->qe(\"select outcome, count(*) from Paper where timeSubmitted>0 group by outcome\");\n            } else if ($this->user->is_manager()) {\n                $psearch = new PaperSearch($this->user, [\"q\" => \"\", \"t\" => \"alladmin\"]);\n                $result = $this->conf->qe(\"select outcome, count(*) from Paper where timeSubmitted>0 and paperId?a group by outcome\", $psearch->paper_ids());\n            } else {\n                $result = null;\n            }\n            $this->_dcounts = [];\n            $this->_has_dt = [false, false, false];\n            while ($result && ($row = $result->fetch_row())) {\n                $d = (int) $row[0];\n                $this->_dcounts[$d] = (int) $row[1];\n                $dt = $d < 0 ? 0 : ($d === 0 ? 1 : 2);\n                $this->_has_dt[$dt] = true;\n            }\n            Dbl::free($result);\n        }\n    }\n\n    /** @param ?string $t\n     * @return ?string */\n    function canonical_recipients($t) {\n        if ($t === \"somedec:yes\" || $t === \"somedec:no\") {\n            $this->dcounts();\n            $category = $t === \"somedec:yes\" ? DecisionInfo::CAT_YES : DecisionInfo::CAT_NO;\n            $dmaxcount = 0;\n            $dmaxname = \"\";\n            foreach ($this->conf->decision_set() as $dinfo) {\n                if ($dinfo->category === $category\n                    && ($dcount = $this->_dcounts[$dinfo->id] ?? 0) > $dmaxcount) {\n                    $dmaxcount = $dcount;\n                    $dmaxname = $dinfo->name;\n                }\n            }\n            if ($dmaxcount > 0) {\n                return \"dec:{$dmaxname}\";\n            } else {\n                return substr($t, 4);\n            }\n        } else if ($t === \"myuncextrev\") {\n            return \"uncmyextrev\";\n        } else {\n            return $t ?? \"\";\n        }\n    }\n\n    /** @param ?string $type\n     * @return $this */\n    function set_recipients($type) {\n        $user = $this->user;\n        $this->type = $this->canonical_recipients($type);\n        assert(!!$user->isPC);\n\n        if ($user->is_manager()) {\n            $hide = !$this->conf->has_any_submitted();\n            $this->defsel(\"s\", \"Contact authors of submitted papers\", $hide ? self::F_HIDE : 0);\n            $this->defsel(\"unsub\", \"Contact authors of unsubmitted papers\");\n            $this->defsel(\"au\", \"All contact authors\");\n\n            $this->dcounts();\n            $this->defsel(\"bydec_group\", \"Contact authors by decision\", self::F_GROUP);\n            foreach ($this->conf->decision_set() as $dec) {\n                if ($dec->id !== 0) {\n                    $hide = ($this->_dcounts[$dec->id] ?? 0) === 0;\n                    $this->defsel(\"dec:{$dec->name}\", \"Contact authors of \" . $dec->name_as(5) . \" papers\", $hide ? self::F_HIDE : 0);\n                }\n            }\n            $this->defsel(\"dec:yes\", \"Contact authors of accept-class papers\", $this->_has_dt[2] ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:no\", \"Contact authors of reject-class papers\", $this->_has_dt[0] ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:none\", \"Contact authors of undecided papers\", $this->_has_dt[1] && ($this->_has_dt[0] || $this->_has_dt[2]) ? 0 : self::F_HIDE);\n            $this->defsel(\"dec:any\", \"Contact authors of decided papers\", self::F_HIDE);\n            $this->defsel(\"bydec_group_end\", null, self::F_GROUP);\n\n            $this->defsel(\"rev_group\", \"Reviewers\", self::F_GROUP);\n\n            // XXX this exposes information about PC review assignments\n            // for conflicted papers to the chair; not worth worrying about\n            if (!$user->privChair) {\n                $pids = [];\n                $result = $this->conf->qe(\"select paperId from Paper where managerContactId=?\", $user->contactId);\n                while (($row = $result->fetch_row())) {\n                    $pids[] = (int) $row[0];\n                }\n                Dbl::free($result);\n                $pidw = empty($pids) ? \"false\" : \"paperId in (\" . join(\",\", $pids) . \")\";\n            } else {\n                $pidw = \"true\";\n            }\n            $row = $this->conf->fetch_first_row(\"select\n                exists (select * from PaperReview where reviewType>=\" . REVIEW_PC . \" and $pidw),\n                exists (select * from PaperReview where reviewType>0 and reviewType<\" . REVIEW_PC . \"  and $pidw),\n                exists (select * from PaperReview where reviewType>=\" . REVIEW_PC . \" and reviewSubmitted is null and reviewNeedsSubmit!=0 and timeRequested>timeRequestNotified and $pidw),\n                exists (select * from Paper where timeSubmitted>0 and leadContactId!=0 and $pidw),\n                exists (select * from Paper where timeSubmitted>0 and shepherdContactId!=0 and $pidw)\");\n            list($any_pcrev, $any_extrev, $any_newpcrev, $any_lead, $any_shepherd) = $row;\n\n            $hide = $any_pcrev || $any_extrev ? 0 : self::F_HIDE;\n            $this->defsel(\"rev\", \"Reviewers\", $hide);\n            $this->defsel(\"crev\", \"Reviewers with complete reviews\", $hide);\n            $this->defsel(\"uncrev\", \"Reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"allcrev\", \"Reviewers with no incomplete reviews\", $hide);\n\n            $hide = $any_pcrev ? 0 : self::F_HIDE;\n            $this->defsel(\"pcrev\", \"PC reviewers\", $hide);\n            $this->defsel(\"uncpcrev\", \"PC reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"newpcrev\", \"PC reviewers with new review assignments\", ($any_newpcrev && $any_pcrev ? 0 : self::F_HIDE) | self::F_SINCE);\n\n            $hide = $any_extrev ? 0 : self::F_HIDE;\n            $this->defsel(\"extrev\", \"External reviewers\", $hide);\n            $this->defsel(\"uncextrev\", \"External reviewers with incomplete reviews\", $hide);\n            $this->defsel(\"rev_group_end\", null, self::F_GROUP);\n        } else {\n            $any_lead = $any_shepherd = 0;\n        }\n\n        $hide = !$this->user->is_requester();\n        $this->defsel(\"myextrev\", \"Your requested reviewers\", self::F_ANYPC | ($hide ? self::F_HIDE : 0));\n        $this->defsel(\"uncmyextrev\", \"Your requested reviewers with incomplete reviews\", self::F_ANYPC | ($hide ? self::F_HIDE : 0));\n\n        if ($user->is_manager()) {\n            $this->defsel(\"lead\", \"Discussion leads\", $any_lead ? 0 : self::F_HIDE);\n            $this->defsel(\"shepherd\", \"Shepherds\", $any_shepherd ? 0 : self::F_HIDE);\n        }\n\n        $this->defsel(\"pc_group\", \"Program committee\", self::F_GROUP);\n        $selcount = count($this->sel);\n        $this->defsel(\"pc\", \"Program committee\", self::F_ANYPC | self::F_NOPAPERS);\n        foreach ($this->conf->viewable_user_tags($this->user) as $t) {\n            if ($t !== \"pc\")\n                $this->defsel(\"pc:$t\", \"#$t program committee\", self::F_ANYPC | self::F_NOPAPERS);\n        }\n        if (count($this->sel) == $selcount + 1) {\n            unset($this->sel[\"pc_group\"]);\n        } else {\n            $this->defsel(\"pc_group_end\", null, self::F_GROUP);\n        }\n\n        if ($user->privChair) {\n            $this->defsel(\"all\", \"Active users\", self::F_NOPAPERS);\n        }\n\n        if (isset($this->sel[$type])\n            && !($this->selflags[$type] & self::F_GROUP)) {\n            $this->type = $type;\n        } else {\n            $this->type = key($this->sel);\n            if ($type !== null && $type !== \"\") {\n                $this->error_at(\"to\", \"Invalid recipients.\");\n            }\n        }\n\n        return $this;\n    }\n\n    function selectors() {\n        $sel = [];\n        $last = null;\n        foreach ($this->sel as $n => $d) {\n            $flags = $this->selflags[$n];\n            if ($flags & self::F_GROUP) {\n                if ($d !== null) {\n                    $sel[$n] = [\"optgroup\", $d];\n                } else if ($last !== null\n                           && ($this->selflags[$last] & self::F_GROUP)) {\n                    unset($sel[$last]);\n                } else {\n                    $sel[$n] = [\"optgroup\"];\n                }\n            } else if (!($flags & self::F_HIDE) || $n == $this->type) {\n                if (is_string($d)) {\n                    $d = [\"label\" => $d];\n                }\n                $k = [];\n                if ($flags & self::F_NOPAPERS) {\n                    $k[] = \"mail-want-no-papers\";\n                }\n                if ($flags & self::F_SINCE) {\n                    $k[] = \"mail-want-since\";\n                }\n                if (!empty($k)) {\n                    $d[\"class\"] = join(\" \", $k);\n                }\n                $sel[$n] = $d;\n            } else {\n                continue;\n            }\n            $last = $n;\n        }\n        return Ht::select(\"to\", $sel, $this->type, [\"id\" => \"to\", \"class\" => \"uich js-mail-recipients\"]);\n    }\n\n    /** @return string */\n    function unparse() {\n        $t = $this->sel[$this->type];\n        if ($this->type == \"newpcrev\" && $this->newrev_since) {\n            $t .= \" since \" . htmlspecialchars($this->conf->parseableTime($this->newrev_since, false));\n        }\n        return $t;\n    }\n\n    /** @return bool */\n    function is_authors() {\n        return in_array($this->type, [\"s\", \"unsub\", \"au\"])\n            || str_starts_with($this->type, \"dec:\");\n    }\n\n    /** @return bool */\n    function need_papers() {\n        return $this->type !== \"pc\"\n            && substr($this->type, 0, 3) !== \"pc:\"\n            && $this->type !== \"all\";\n    }\n\n    /** @param bool $paper_sensitive\n     * @return int */\n    function combination_type($paper_sensitive) {\n        if (preg_match('/\\A(?:pc|pc:.*|(?:|unc|new)pcrev|lead|shepherd)\\z/', $this->type)) {\n            return 2;\n        } else if ($this->is_authors() || $paper_sensitive) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /** @return ?PaperInfoSet */\n    function paper_set() {\n        $options = [\"allConflictType\" => true];\n\n        // basic limit\n        if ($this->type === \"au\") {\n            // all authors, no paper restriction\n        } else if ($this->type === \"s\") {\n            $options[\"finalized\"] = true;\n        } else if ($this->type === \"unsub\") {\n            $options[\"unsub\"] = $options[\"active\"] = true;\n        } else if (in_array($this->type, [\"dec:any\", \"dec:none\", \"dec:yes\", \"dec:no\", \"dec:maybe\"])) {\n            $options[\"finalized\"] = $options[$this->type] = true;\n        } else if (substr($this->type, 0, 4) === \"dec:\") {\n            $options[\"finalized\"] = true;\n            $options[\"where\"] = \"false\";\n            foreach ($this->conf->decision_set() as $dec) {\n                if (strcasecmp($dec->name, substr($this->type, 4)) === 0) {\n                    $options[\"where\"] = \"Paper.outcome={$dec->id}\";\n                    break;\n                }\n            }\n        } else if ($this->type === \"lead\") {\n            $options[\"anyLead\"] = $options[\"reviewSignatures\"] = true;\n        } else if ($this->type === \"shepherd\") {\n            $options[\"anyShepherd\"] = $options[\"reviewSignatures\"] = true;\n        } else if (str_ends_with($this->type, \"rev\")) {\n            $options[\"reviewSignatures\"] = true;\n        } else {\n            assert(!$this->need_papers());\n            return null;\n        }\n\n        // additional manager limit\n        $paper_ids = $this->paper_ids;\n        if (!$this->user->privChair\n            && !($this->selflags[$this->type] & self::F_ANYPC)) {\n            if ($this->conf->check_any_admin_tracks($this->user)) {\n                $ps = new PaperSearch($this->user, [\"q\" => \"\", \"t\" => \"admin\"]);\n                if ($paper_ids === null) {\n                    $paper_ids = $ps->paper_ids();\n                } else {\n                    $paper_ids = array_values(array_intersect($paper_ids, $ps->paper_ids()));\n                }\n            } else {\n                $options[\"myManaged\"] = true;\n            }\n        }\n        if ($paper_ids !== null) {\n            $options[\"paperId\"] = $paper_ids;\n        }\n\n        // load paper set\n        return $this->conf->paper_set($options, $this->user);\n    }\n\n    /** @param ?PaperInfoSet $paper_set\n     * @param bool $paper_sensitive\n     * @return string|false */\n    function query($paper_set, $paper_sensitive) {\n        $cols = [];\n        $where = [\"not disabled\"];\n        $joins = [\"ContactInfo\"];\n\n        // reviewer limit\n        if (!preg_match('/\\A(new|unc|c|allc|)(pc|ext|myext|)rev\\z/',\n                        $this->type, $revmatch)) {\n            $revmatch = false;\n        }\n\n        // build query\n        if ($this->type === \"all\") {\n            $needpaper = false;\n            $where[] = \"(ContactInfo.roles!=0 or lastLogin>0 or exists (select * from PaperConflict where contactId=ContactInfo.contactId) or exists (select * from PaperReview where contactId=ContactInfo.contactId and reviewType>0))\";\n        } else if ($this->type === \"pc\" || substr($this->type, 0, 3) === \"pc:\") {\n            $needpaper = false;\n            $where[] = \"(ContactInfo.roles&\" . Contact::ROLE_PC . \")!=0\";\n            if ($this->type != \"pc\") {\n                $x = sqlq(Dbl::escape_like(substr($this->type, 3)));\n                $where[] = \"ContactInfo.contactTags like \" . Dbl::utf8ci(\"'% {$x}#%'\");\n            }\n        } else if ($revmatch) {\n            $needpaper = true;\n            $joins[] = \"join Paper\";\n            $joins[] = \"join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=ContactInfo.contactId and PaperReview.reviewType>0)\";\n            $where[] = \"Paper.paperId=PaperReview.paperId\";\n        } else if ($this->type === \"lead\" || $this->type === \"shepherd\") {\n            $needpaper = true;\n            $joins[] = \"join Paper on (Paper.{$this->type}ContactId=ContactInfo.contactId)\";\n        } else {\n            $needpaper = true;\n            $joins[] = \"join Paper\";\n            $joins[] = \"join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=ContactInfo.contactId)\";\n            $where[] = \"PaperConflict.conflictType>=\" . CONFLICT_AUTHOR;\n        }\n\n        assert(!!$paper_set === $needpaper);\n        if ($paper_set) {\n            $where[] = \"Paper.paperId\" . sql_in_int_list($paper_set->paper_ids());\n        }\n\n        // reviewer match\n        if ($revmatch) {\n            // Submission status\n            if ($revmatch[1] === \"c\") {\n                $where[] = \"PaperReview.reviewSubmitted>0\";\n            } else if ($revmatch[1] === \"unc\" || $revmatch[1] === \"new\") {\n                $where[] = \"PaperReview.reviewSubmitted is null and PaperReview.reviewNeedsSubmit!=0 and Paper.timeSubmitted>0\";\n            }\n            if ($revmatch[1] === \"new\") {\n                $where[] = \"PaperReview.timeRequested>PaperReview.timeRequestNotified\";\n                if ($this->newrev_since) {\n                    $where[] = \"PaperReview.timeRequested>=$this->newrev_since\";\n                }\n            }\n            if ($revmatch[1] === \"allc\") {\n                $joins[] = \"left join (select contactId, max(if(reviewNeedsSubmit!=0 and timeSubmitted>0,1,0)) anyReviewNeedsSubmit from PaperReview join Paper on (Paper.paperId=PaperReview.paperId) group by contactId) AllReviews on (AllReviews.contactId=ContactInfo.contactId)\";\n                $where[] = \"AllReviews.anyReviewNeedsSubmit=0\";\n            }\n            // Withdrawn papers may not count\n            if ($revmatch[1] === \"\") {\n                $where[] = \"(Paper.timeSubmitted>0 or PaperReview.reviewSubmitted>0)\";\n            }\n            // Review type\n            if ($revmatch[2] === \"myext\") {\n                $where[] = \"PaperReview.reviewType=\" . REVIEW_EXTERNAL;\n                $where[] = \"PaperReview.requestedBy=\" . $this->user->contactId;\n            } else if ($revmatch[2] === \"ext\") {\n                $where[] = \"PaperReview.reviewType=\" . REVIEW_EXTERNAL;\n            } else if ($revmatch[2] === \"pc\") {\n                $where[] = \"PaperReview.reviewType>\" . REVIEW_EXTERNAL;\n            }\n        }\n\n        // query construction\n        $q = \"select ContactInfo.contactId, firstName, lastName, affiliation,\n            email, roles, contactTags, disabled, primaryContactId, 3 _slice,\n            password, preferredEmail, \"\n            . ($needpaper ? \"Paper.paperId\" : \"-1\") . \" paperId\n            from \" . join(\"\\n\", $joins)\n            . \"\\nwhere \" . join(\"\\n    and \", $where)\n            . \"\\ngroup by ContactInfo.contactId\" . ($needpaper ? \", Paper.paperId\" : \"\")\n            . \"\\norder by \";\n        if (!$needpaper) {\n            $q .= \"email\";\n        } else if ($this->is_authors() || $paper_sensitive) {\n            $q .= \"Paper.paperId, email\";\n        } else {\n            $q .= \"email, Paper.paperId\";\n        }\n        return $q;\n    }\n}\n", "<?php\n// papertable.php -- HotCRP helper class for producing paper tables\n// Copyright (c) 2006-2022 Eddie Kohler; see LICENSE.\n\nclass PaperTable {\n    /** @var Conf\n     * @readonly */\n    public $conf;\n    /** @var Contact\n     * @readonly */\n    public $user;\n    /** @var Qrequest\n     * @readonly */\n    private $qreq;\n    /** @var PaperInfo\n     * @readonly */\n    public $prow;\n    /** @var 'p'|'edit'|'re'|'assign'\n     * @readonly */\n    public $mode;\n    /** @var bool\n     * @readonly */\n    private $allow_admin;\n    /** @var bool\n     * @readonly */\n    private $admin;\n    /** @var bool\n     * @readonly */\n    private $allow_edit_final;\n    /** @var bool\n     * @readonly */\n    private $can_view_reviews;\n\n    /** @var ?ReviewInfo */\n    public $rrow;\n    /** @var list<ReviewInfo> */\n    private $all_rrows = [];\n    /** @var list<ReviewInfo> */\n    private $viewable_rrows = [];\n    /** @var array<int,CommentInfo> */\n    private $crows;\n    /** @var array<int,CommentInfo> */\n    private $mycrows;\n    /** @var ?ReviewInfo */\n    public $editrrow;\n    /** @var bool */\n    private $prefer_approvable = false;\n    /** @var bool */\n    private $allreviewslink;\n\n    /** @var bool\n     * @readonly */\n    public $editable = false;\n    /** @var bool */\n    private $useRequest;\n    /** @var ?PaperStatus */\n    private $edit_status;\n    /** @var list<PaperOption> */\n    private $edit_fields;\n    /** @var bool */\n    public $edit_show_all_visibility = false;\n\n    /** @var ?list<MessageItem> */\n    private $pre_status_feedback;\n    /** @var int */\n    private $npapstrip = 0;\n    /** @var bool */\n    private $allow_folds;\n    /** @var bool */\n    private $unfold_all = false;\n    /** @var ?ReviewValues */\n    private $review_values;\n    /** @var array<string,TextPregexes> */\n    private $matchPreg;\n    /** @var array<int,bool> */\n    private $foldmap;\n    /** @var array<string,int> */\n    private $foldnumber;\n\n    /** @var ?CheckFormat */\n    public $cf;\n    /** @var bool */\n    private $quit = false;\n\n    function __construct(Contact $user, Qrequest $qreq, PaperInfo $prow = null) {\n        $this->conf = $user->conf;\n        $this->user = $user;\n        $this->qreq = $qreq;\n        $this->prow = $prow ?? PaperInfo::make_new($user);\n        $this->allow_admin = $user->allow_administer($this->prow);\n        $this->admin = $user->can_administer($this->prow);\n        $this->allow_edit_final = $this->user->allow_edit_final_paper($this->prow);\n\n        if (!$prow || !$this->prow->paperId) {\n            $this->can_view_reviews = false;\n            $this->mode = \"edit\";\n            return;\n        }\n\n        $this->can_view_reviews = $user->can_view_review($prow, null);\n        if (!$this->can_view_reviews && $prow->has_reviewer($user)) {\n            foreach ($prow->reviews_by_user($user) as $rrow) {\n                if ($rrow->reviewStatus >= ReviewInfo::RS_COMPLETED) {\n                    $this->can_view_reviews = true;\n                }\n            }\n        }\n\n        // enumerate allowed modes\n        $page = $qreq->page();\n        if ($page === \"review\" && $this->allow_review()) {\n            $this->mode = \"re\";\n        } else if ($page === \"paper\"\n                   && $this->paper_page_prefers_edit_mode()) {\n            $this->mode = \"edit\";\n        } else {\n            $this->mode = \"p\";\n        }\n        if ($page === \"assign\") {\n            $this->mode = \"assign\";\n        } else {\n            $m = $this->qreq->m ?? $this->qreq->mode;\n            if (($m === \"edit\" || $m === \"pe\")\n                && $page === \"paper\"\n                && ($this->allow_admin || $this->allow_edit())) {\n                $this->mode = \"edit\";\n            } else if (($m === \"re\" || $m === \"rea\")\n                       && $page === \"review\"\n                       && $this->allow_review()) {\n                $this->mode = \"re\";\n                $this->prefer_approvable = $m === \"rea\";\n            } else if ($m === \"view\" || $m === \"r\" || $m === \"main\") {\n                $this->mode = \"p\";\n            }\n        }\n    }\n\n    /** @return bool */\n    private function allow_edit() {\n        return $this->admin || $this->prow->has_author($this->user);\n    }\n\n    /** @return bool */\n    private function allow_review() {\n        return $this->user->can_edit_some_review($this->prow);\n    }\n\n    /** @return bool */\n    private function allow_assign() {\n        return $this->admin || $this->user->can_request_review($this->prow, null, true);\n    }\n\n    /** @return bool */\n    function paper_page_prefers_edit_mode() {\n        return $this->prow->paperId === 0\n            || ($this->prow->has_author($this->user) && $this->conf->time_finalize_paper($this->prow));\n    }\n\n    /** @param ?PaperTable $paperTable\n     * @param Qrequest $qreq\n     * @param bool $error */\n    static function print_header($paperTable, $qreq, $error = false) {\n        $conf = $paperTable ? $paperTable->conf : $qreq->conf();\n        $prow = $paperTable ? $paperTable->prow : null;\n        $format = 0;\n\n        $t = '<header id=\"header-page\" class=\"header-page-submission\"><h1 class=\"paptitle';\n\n        if (!$paperTable) {\n            if (($pid = $qreq->paperId) && ctype_digit($pid)) {\n                $title = \"#$pid\";\n            } else {\n                $title = $conf->_c(\"paper_title\", \"Submission\");\n            }\n            $t .= '\">' . $title;\n        } else if (!$prow->paperId) {\n            $title = $conf->_c(\"paper_title\", \"New submission\");\n            $t .= '\">' . $title;\n        } else {\n            $paperTable->initialize_list();\n            $title = \"#\" . $prow->paperId;\n            $viewable_tags = $prow->viewable_tags($paperTable->user);\n            if ($viewable_tags || $paperTable->user->can_view_tags($prow)) {\n                $t .= ' has-tag-classes';\n                if (($color = $prow->conf->tags()->color_classes($viewable_tags)))\n                    $t .= ' ' . $color;\n            }\n            $t .= '\"><a class=\"noq ulh\" href=\"' . $prow->hoturl()\n                . '\"><span class=\"taghl\"><span class=\"pnum\">' . $title . '</span>'\n                . ' &nbsp; ';\n\n            $highlight_text = null;\n            $title_matches = 0;\n            if ($paperTable->matchPreg\n                && ($highlight = $paperTable->matchPreg[\"ti\"] ?? null)) {\n                $highlight_text = Text::highlight($prow->title, $highlight, $title_matches);\n            }\n\n            if (!$title_matches && ($format = $prow->title_format())) {\n                $t .= '<span class=\"ptitle need-format\" data-format=\"' . $format . '\">';\n            } else {\n                $t .= '<span class=\"ptitle\">';\n            }\n            if ($highlight_text) {\n                $t .= $highlight_text;\n            } else if ($prow->title === \"\") {\n                $t .= \"[No title]\";\n            } else {\n                $t .= htmlspecialchars($prow->title);\n            }\n\n            $t .= '</span></span></a>';\n            if ($viewable_tags && $conf->tags()->has_decoration) {\n                $tagger = new Tagger($paperTable->user);\n                $t .= $tagger->unparse_decoration_html($viewable_tags);\n            }\n        }\n\n        $t .= '</h1></header>';\n        if ($paperTable && $prow->paperId) {\n            $t .= $paperTable->_mode_nav();\n        }\n\n        $amode = $qreq->page();\n        assert(in_array($amode, [\"paper\", \"review\", \"assign\"]));\n        if ($qreq->m === \"edit\"\n            && (!$paperTable || $paperTable->mode === \"edit\")) {\n            $amode = \"edit\";\n        }\n\n        if ($amode === \"paper\") {\n            $id = \"paper-view\";\n        } else if ($amode === \"edit\") {\n            $id = \"paper-edit\";\n        } else {\n            $id = $amode;\n        }\n\n        $body_class = \"paper\";\n        if ($error) {\n            $body_class .= \"-error\";\n        }\n        if ($paperTable\n            && $prow->paperId\n            && $paperTable->user->has_overridable_conflict($prow)\n            && ($paperTable->user->overrides() & Contact::OVERRIDE_CONFLICT)) {\n            $body_class .= \" fold5o\";\n        } else {\n            $body_class .= \" fold5c\";\n        }\n\n        $qreq->print_header($title, $id, [\n            \"action_bar\" => QuicklinksRenderer::make($qreq, $amode),\n            \"title_div\" => $t,\n            \"body_class\" => $body_class,\n            \"paperId\" => $qreq->paperId,\n            \"save_messages\" => !$error\n        ]);\n        if ($format) {\n            echo Ht::unstash_script(\"hotcrp.render_text_page()\");\n        }\n    }\n\n    private function initialize_list() {\n        assert(!$this->qreq->has_active_list());\n        $list = $this->find_session_list();\n        $this->qreq->set_active_list($list);\n\n        $this->matchPreg = [];\n        if (($list = $this->qreq->active_list())\n            && $list->highlight\n            && preg_match('/\\Ap\\/([^\\/]*)\\/([^\\/]*)(?:\\/|\\z)/', $list->listid, $m)) {\n            $hlquery = is_string($list->highlight) ? $list->highlight : urldecode($m[2]);\n            $ps = new PaperSearch($this->user, [\"t\" => $m[1], \"q\" => $hlquery]);\n            $this->matchPreg = $ps->field_highlighters();\n        }\n        if (empty($this->matchPreg)) {\n            $this->matchPreg = null;\n        }\n    }\n\n    private function find_session_list() {\n        $prow = $this->prow;\n        if ($prow->paperId <= 0) {\n            return null;\n        }\n\n        if (($list = SessionList::load_cookie($this->user, \"p\"))\n            && ($list->set_current_id($prow->paperId) || $list->digest)) {\n            return $list;\n        }\n\n        // look up list description\n        $list = null;\n        $listdesc = $this->qreq->ls;\n        if ($listdesc) {\n            if (($opt = PaperSearch::unparse_listid($listdesc))) {\n                $list = $this->try_list($opt, $prow);\n            }\n            if (!$list && preg_match('/\\A(all|s):(.*)\\z/s', $listdesc, $m)) {\n                $list = $this->try_list([\"t\" => $m[1], \"q\" => $m[2]], $prow);\n            }\n            if (!$list && preg_match('/\\A[a-z]+\\z/', $listdesc)) {\n                $list = $this->try_list([\"t\" => $listdesc], $prow);\n            }\n            if (!$list) {\n                $list = $this->try_list([\"q\" => $listdesc], $prow);\n            }\n        }\n\n        // default lists\n        if (!$list) {\n            $list = $this->try_list([], $prow);\n        }\n        if (!$list && $this->user->privChair) {\n            $list = $this->try_list([\"t\" => \"all\"], $prow);\n        }\n\n        return $list;\n    }\n    private function try_list($opt, $prow) {\n        $srch = new PaperSearch($this->user, $opt);\n        if ($srch->test($prow)) {\n            $list = $srch->session_list_object();\n            $list->set_current_id($prow->paperId);\n            return $list;\n        } else {\n            return null;\n        }\n    }\n\n    /** @param bool $editable\n     * @param bool $useRequest\n     * @suppress PhanAccessReadOnlyProperty */\n    function set_edit_status(PaperStatus $status, $editable, $useRequest) {\n        assert($this->mode === \"edit\" && !$this->edit_status);\n        $this->editable = $editable;\n        $this->useRequest = $useRequest;\n        $this->edit_status = $status;\n    }\n\n    function set_review_values(ReviewValues $rvalues = null) {\n        $this->review_values = $rvalues;\n    }\n\n    /** @param MessageItem $mi */\n    function add_pre_status_feedback($mi) {\n        $this->pre_status_feedback[] = $mi;\n    }\n\n    /** @return bool */\n    function can_view_reviews() {\n        return $this->can_view_reviews;\n    }\n\n    /** @param string $abstract\n     * @return bool */\n    private function abstract_foldable($abstract) {\n        return strlen($abstract) > 190;\n    }\n\n    private function _print_foldpaper_div() {\n        $require_folds = $this->mode === \"re\" || $this->mode === \"assign\";\n        $this->allow_folds = $require_folds\n            || ($this->mode === \"p\" && $this->can_view_reviews && !empty($this->all_rrows))\n            || ($this->mode === \"edit\" && !$this->editable);\n\n        // 4=\"t\": topics, 6=\"b\": abstract, 7: [JavaScript abstract expansion],\n        // 8=\"a\": blind authors, 9=\"p\": full authors\n        $foldstorage = [4 => \"p.t\", 6 => \"p.b\", 9 => \"p.p\"];\n        $this->foldnumber = [\"topics\" => 4];\n\n        // other expansions\n        $next_foldnum = 10;\n        foreach ($this->prow->page_fields() as $o) {\n            if ($o->page_order() !== false\n                && $o->page_order() >= 1000\n                && $o->page_order() < 5000\n                && ($o->id <= 0 || $this->user->allow_view_option($this->prow, $o))\n                && $o->page_group !== null) {\n                if (strlen($o->page_group) > 1\n                    && !isset($this->foldnumber[$o->page_group])) {\n                    $this->foldnumber[$o->page_group] = $next_foldnum;\n                    $foldstorage[$next_foldnum] = str_replace(\" \", \"_\", \"p.\" . $o->page_group);\n                    ++$next_foldnum;\n                }\n                if ($o->page_expand) {\n                    $this->foldnumber[$o->formid] = $next_foldnum;\n                    $foldstorage[$next_foldnum] = \"p.\" . $o->formid;\n                    ++$next_foldnum;\n                }\n            }\n        }\n\n        // what is folded?\n        // if highlighting, automatically unfold abstract/authors\n        $vas = $this->user->view_authors_state($this->prow);\n        $this->foldmap = [];\n        foreach ($foldstorage as $num => $k) {\n            $this->foldmap[$num] = $this->allow_folds && !$this->unfold_all;\n        }\n        $this->foldmap[8] = $vas === 1;\n        if ($this->foldmap[6]) {\n            $abstract = $this->highlight($this->prow->abstract_text(), \"ab\", $match);\n            if ($match || !$this->abstract_foldable($abstract)) {\n                $this->foldmap[6] = false;\n            }\n        }\n        if ($this->matchPreg\n            && $vas !== 0\n            && ($this->foldmap[8] || $this->foldmap[9])) {\n            $this->highlight($this->prow->authorInformation, \"au\", $match);\n            if ($match) {\n                $this->foldmap[8] = $this->foldmap[9] = false;\n            }\n        }\n\n        // collect folders\n        $folders = [];\n        foreach ($this->foldmap as $num => $f) {\n            if ($num !== 8 || $vas === 1) {\n                $folders[] = \"fold\" . $num . ($f ? \"c\" : \"o\");\n            }\n        }\n        echo '<div id=\"foldpaper\" class=\"', join(\" \", $folders);\n        if ($require_folds) {\n            echo '\">';\n        } else {\n            echo (empty($folders) ? \"\" : \" \"),\n                'need-fold-storage\" data-fold-storage=\"',\n                htmlspecialchars(json_encode_browser($foldstorage)), '\">';\n            Ht::stash_script(\"hotcrp.fold_storage()\");\n        }\n    }\n\n    /** @param string $field\n     * @return int */\n    private function problem_status_at($field) {\n        if ($this->edit_status) {\n            return $this->edit_status->problem_status_at($field);\n        } else {\n            return 0;\n        }\n    }\n    /** @param string $field\n     * @param string $msg\n     * @param -5|-4|-3|-2|-1|0|1|2|3 $status\n     * @return MessageItem */\n    function msg_at($field, $msg, $status) {\n        $this->edit_status = $this->edit_status ?? new MessageSet;\n        return $this->edit_status->msg_at($field, $msg, $status);\n    }\n    /** @param string $field\n     * @return bool */\n    function has_problem_at($field) {\n        return $this->problem_status_at($field) > 0;\n    }\n    /** @param string $field\n     * @return string */\n    function has_error_class($field) {\n        return $this->has_problem_at($field) ? \" has-error\" : \"\";\n    }\n    /** @param string $field\n     * @return string */\n    function control_class($field, $rest = \"\", $prefix = \"has-\") {\n        return MessageSet::status_class($this->problem_status_at($field), $rest, $prefix);\n    }\n    /** @param list<string> $fields\n     * @return string */\n    function max_control_class($fields, $rest = \"\", $prefix = \"has-\") {\n        $ps = $this->edit_status ? $this->edit_status->max_problem_status_at($fields) : 0;\n        return MessageSet::status_class($ps, $rest, $prefix);\n    }\n\n    /** @param ?string $heading\n     * @return void */\n    function print_editable_option_papt(PaperOption $opt, $heading = null, $rest = []) {\n        if (!isset($rest[\"for\"])) {\n            $for = $opt->readable_formid();\n        } else {\n            $for = $rest[\"for\"] ?? false;\n        }\n        echo '<div class=\"pf pfe';\n        if (!$opt->test_exists($this->prow) || ($rest[\"hidden\"] ?? false)) {\n            echo ' hidden';\n        }\n        if ($opt->exists_condition()) {\n            echo ' want-fieldchange has-edit-condition\" data-edit-condition=\"', htmlspecialchars(json_encode_browser($opt->exists_script_expression($this->prow)));\n            Ht::stash_script('$(hotcrp.paper_edit_conditions)', 'edit_condition');\n        }\n        echo '\"><h3 class=\"', $this->control_class($opt->formid, \"pfehead\");\n        if ($for === \"checkbox\") {\n            echo \" checki\";\n        }\n        if (($tclass = $rest[\"tclass\"] ?? false)) {\n            echo \" \", ltrim($tclass);\n        }\n        if (($id = $rest[\"id\"] ?? false)) {\n            echo '\" id=\"' . $id;\n        }\n        echo '\">', Ht::label($heading ?? $this->edit_title_html($opt),\n            $for === \"checkbox\" ? false : $for, [\"class\" => $opt->required ? \"field-required\" : \"\"]);\n        $vis = $opt->visibility();\n        if ($vis === PaperOption::VIS_ADMIN) {\n            echo '<div class=\"field-visibility\">(hidden from reviewers)</div>';\n        } else if ($this->edit_show_all_visibility) {\n            if ($vis === PaperOption::VIS_AUTHOR) {\n                echo '<div class=\"field-visibility\">(hidden on anonymous submissions)</div>';\n            } else if ($vis === PaperOption::VIS_REVIEW) {\n                echo '<div class=\"field-visibility\">(hidden until review)</div>';\n            } else if ($vis === PaperOption::VIS_CONFLICT) {\n                // XXX\n            }\n        }\n        echo '</h3>';\n        $this->print_field_hint($opt, $rest[\"context_args\"] ?? null);\n        echo Ht::hidden(\"has_{$opt->formid}\", 1);\n    }\n\n    /** @param array<string,int|string> $extra\n     * @return string */\n    private function papt($what, $name, $extra = []) {\n        $fold = $extra[\"fold\"] ?? false;\n        $editfolder = $extra[\"editfolder\"] ?? false;\n        $foldnum = $fold || $editfolder ? $extra[\"foldnum\"] ?? 0 : 0;\n        $foldnumclass = \"\";\n        if ($foldnum || isset($extra[\"foldopen\"])) {\n            $foldnumclass = \" data-fold-target=\\\"{$foldnum}\"\n                . (isset($extra[\"foldopen\"]) ? \"o\\\"\" : \"\\\"\");\n        }\n\n        if (($extra[\"type\"] ?? null) === \"ps\") {\n            list($divclass, $hdrclass) = [\"pst\", \"psfn\"];\n        } else {\n            list($divclass, $hdrclass) = [\"pavt\", \"pavfn\"];\n        }\n\n        $c = \"<div class=\\\"\" . $this->control_class($what, $divclass);\n        if (($fold || $editfolder) && !($extra[\"float\"] ?? false)) {\n            $c .= \" ui js-foldup\\\"\" . $foldnumclass . \">\";\n        } else {\n            $c .= \"\\\">\";\n        }\n        $c .= \"<h3 class=\\\"$hdrclass\";\n        if (isset($extra[\"fnclass\"])) {\n            $c .= \" \" . $extra[\"fnclass\"];\n        }\n        $c .= '\">';\n        if (!$fold) {\n            $n = (is_array($name) ? $name[0] : $name);\n            if ($editfolder) {\n                $c .= \"<a class=\\\"q fn ui js-foldup\\\" \"\n                    . \"href=\\\"\" . $this->conf->selfurl($this->qreq, [\"atab\" => $what])\n                    . \"\\\"\" . $foldnumclass . \">\" . $n\n                    . '<span class=\"t-editor\">\u270e\u00a0</span>'\n                    . \"</a><span class=\\\"fx\\\">\" . $n . \"</span>\";\n            } else {\n                $c .= $n;\n            }\n        } else {\n            '@phan-var-force int $foldnum';\n            '@phan-var-force string $foldnumclass';\n            $c .= '<a class=\"q ui js-foldup\" href=\"\"' . $foldnumclass;\n            if (($title = $extra[\"foldtitle\"] ?? false)) {\n                $c .= ' title=\"' . $title . '\"';\n            }\n            if (isset($this->foldmap[$foldnum])) {\n                $c .= ' role=\"button\" aria-expanded=\"' . ($this->foldmap[$foldnum] ? \"false\" : \"true\") . '\"';\n            }\n            $c .= '>' . expander(null, $foldnum);\n            if (!is_array($name)) {\n                $name = [$name, $name];\n            }\n            if ($name[0] !== $name[1]) {\n                $c .= '<span class=\"fn' . $foldnum . '\">' . $name[1] . '</span><span class=\"fx' . $foldnum . '\">' . $name[0] . '</span>';\n            } else {\n                $c .= $name[0];\n            }\n            $c .= '</a>';\n        }\n        $c .= \"</h3>\";\n        if (isset($extra[\"float\"])) {\n            $c .= $extra[\"float\"];\n        }\n        $c .= \"</div>\";\n        return $c;\n    }\n\n    /** @param string $text\n     * @param string $pregname\n     * @param int &$n\n     * @return string */\n    function highlight($text, $pregname, &$n = null) {\n        if ($this->matchPreg && isset($this->matchPreg[$pregname])) {\n            $text = Text::highlight($text, $this->matchPreg[$pregname], $n);\n        } else {\n            $text = htmlspecialchars($text);\n            $n = 0;\n        }\n        return $text;\n    }\n\n    /** @param string $field\n     * @return string */\n    function messages_at($field) {\n        return $this->edit_status ? $this->edit_status->feedback_html_at($field) : \"\";\n    }\n\n    /** @param PaperOption $opt\n     * @param ?list<mixed> $context_args */\n    function print_field_hint($opt, $context_args = null) {\n        echo $this->messages_at($opt->formid);\n        $fr = new FieldRender(FieldRender::CFHTML);\n        $context_args = $context_args ?? [];\n        $opt->render_description($fr, ...$context_args);\n        if (!$fr->is_empty()) {\n            echo $fr->value_html(\"field-d\");\n        }\n        echo $this->messages_at($opt->formid . \":context\");\n    }\n\n    /** @param PaperOption $opt\n     * @return string */\n    function edit_title_html($opt) {\n        $t = $opt->edit_title();\n        if (str_ends_with($t, \")\")\n            && preg_match('/\\A([^()]* +)(\\([^()]+\\))\\z/', $t, $m)) {\n            return htmlspecialchars($m[1]) . '<span class=\"n\">' . htmlspecialchars($m[2]) . '</span>';\n        } else {\n            return htmlspecialchars($t);\n        }\n    }\n\n    /** @param DocumentInfo $doc\n     * @param array{notooltip?:bool} $options\n     * @return string */\n    static function pdf_stamps_html($doc, $options = null) {\n        $tooltip = !$options || !($options[\"notooltip\"] ?? null);\n        $t = [];\n\n        if ($doc->timestamp > 0) {\n            $t[] = ($tooltip ? '<span class=\"nb need-tooltip\" aria-label=\"Upload time\">' : '<span class=\"nb\">')\n                . '<svg width=\"12\" height=\"12\" viewBox=\"0 0 96 96\" class=\"licon\"><path d=\"M48 6a42 42 0 1 1 0 84 42 42 0 1 1 0-84zm0 10a32 32 0 1 0 0 64 32 32 0 1 0 0-64zM48 19A5 5 0 0 0 43 24V46c0 2.352.37 4.44 1.464 5.536l12 12c4.714 4.908 12-2.36 7-7L53 46V24A5 5 0 0 0 43 24z\"/></svg>'\n                . \" \" . $doc->conf->unparse_time($doc->timestamp) . \"</span>\";\n        }\n\n        $ha = new HashAnalysis($doc->sha1);\n        if ($ha->ok()) {\n            $h = $ha->text_data();\n            $x = '<span class=\"nb checksum';\n            if ($tooltip) {\n                $x .= ' need-tooltip\" data-tooltip=\"';\n                if ($ha->algorithm() === \"sha256\")  {\n                    $x .= \"SHA-256 checksum\";\n                } else if ($ha->algorithm() === \"sha1\") {\n                    $x .= \"SHA-1 checksum\";\n                }\n            }\n            $x .= '\"><svg width=\"12\" height=\"12\" viewBox=\"0 0 48 48\" class=\"licon\"><path d=\"M19 32l-8-8-7 7 14 14 26-26-6-6-19 19zM15 3V10H8v5h7v7h5v-7H27V10h-7V3h-5z\"/></svg> '\n                . '<span class=\"checksum-overflow\">' . $h . '</span>'\n                . '<span class=\"checksum-abbreviation\">' . substr($h, 0, 8) . '</span></span>';\n            $t[] = $x;\n        }\n\n        if (!empty($t)) {\n            return '<span class=\"hint\">' . join(' <span class=\"barsep\">\u00b7</span> ', $t) . \"</span>\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /** @param PaperOption $o */\n    function render_submission(FieldRender $fr, $o) {\n        assert(!$this->editable && $o->id == 0);\n        $fr->title = false;\n        $fr->value = \"\";\n        $fr->value_format = 5;\n\n        // conflicts\n        if ($this->user->isPC\n            && !$this->prow->has_conflict($this->user)\n            && $this->mode !== \"assign\"\n            && $this->mode !== \"contact\"\n            && $this->prow->can_author_edit_paper()) {\n            $fr->value .= Ht::msg('The authors still have <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">time</a> to make changes.', 1);\n        }\n\n        // download\n        if ($this->user->can_view_pdf($this->prow)) {\n            $dprefix = \"\";\n            $dtype = $this->prow->finalPaperStorageId > 1 ? DTYPE_FINAL : DTYPE_SUBMISSION;\n            if (($doc = $this->prow->document($dtype))\n                && $doc->paperStorageId > 1) {\n                if (($stamps = self::pdf_stamps_html($doc))) {\n                    $stamps = '<span class=\"sep\"></span>' . $stamps;\n                }\n                if ($dtype === DTYPE_FINAL) {\n                    $dhtml = $this->conf->option_by_id($dtype)->title_html();\n                } else {\n                    $dhtml = $o->title_html($this->prow->timeSubmitted == 0);\n                }\n                $fr->value .= '<p class=\"pgsm\">' . $dprefix . $doc->link_html('<span class=\"pavfn\">' . $dhtml . '</span>', DocumentInfo::L_REQUIREFORMAT) . $stamps . '</p>';\n            }\n        }\n    }\n\n    /** @param bool $checkbox\n     * @return bool */\n    private function is_ready($checkbox) {\n        if ($this->useRequest) {\n            return !!$this->qreq->submitpaper\n                && ($checkbox\n                    || $this->conf->opt(\"noPapers\")\n                    || $this->prow->paperStorageId > 1);\n        } else {\n            return $this->prow->timeSubmitted > 0\n                || ($checkbox\n                    && $this->prow->can_update_until_deadline()\n                    && (!$this->prow->paperId\n                        || (!$this->conf->opt(\"noPapers\") && $this->prow->paperStorageId <= 1)));\n        }\n    }\n\n    private function print_editable_complete() {\n        if ($this->allow_edit_final) {\n            echo Ht::hidden(\"submitpaper\", 1);\n            return;\n        }\n\n        $can_upd = $this->prow->can_update_until_deadline();\n        $upd = $can_upd ? $this->prow->update_deadline() : 0;\n\n        $checked = $this->is_ready(true);\n        $ready_open = $this->prow->paperStorageId > 1 || $this->conf->opt(\"noPapers\");\n        echo '<div class=\"ready-container ',\n            $ready_open ? \"foldo\" : \"foldc\",\n            '\"><div class=\"checki fx\"><span class=\"checkc\">',\n            Ht::checkbox(\"submitpaper\", 1, $checked, [\"disabled\" => !$ready_open]),\n            \"</span>\";\n\n        // script.js depends on the HTML here\n        $upd_html = \"\";\n        if (Conf::$now <= $upd) {\n            // can update until future deadline\n            $upd_html = $this->conf->unparse_time_with_local_span($upd);\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is ready for review\") . \"</strong>\", null, [\"class\" => $checked ? null : \"is-error\"]),\n                '<p class=\"feedback is-urgent-note if-unready ', $checked ? \"hidden\" : \"\",\n                '\">Submissions not marked ready for review by the deadline will not be considered.</p>';\n        } else if ($can_upd) {\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is ready for review\") . \"</strong>\");\n        } else {\n            echo Ht::label(\"<strong>\" . $this->conf->_(\"The submission is complete\") . \"</strong>\", null, [\"class\" => $checked ? null : \"is-error\"]),\n                '<p class=\"feedback is-urgent-note\">You must complete the submission before the deadline or it will not be reviewed. Completed submissions are frozen and cannot be changed further.</p>';\n        }\n        echo \"</div></div>\\n\";\n\n        // update message\n        if (Conf::$now <= $upd) {\n            echo '<div class=\"mt-2 feedback is-note\">You can update the submission until ', $upd_html, '.</div>';\n        }\n    }\n\n    static function document_upload_input($inputid, $dtype, $accepts) {\n        $t = '<input id=\"' . $inputid . '\" type=\"file\" name=\"' . $inputid . '\"';\n        if ($accepts !== null && count($accepts) == 1) {\n            $t .= ' accept=\"' . $accepts[0]->mimetype . '\"';\n        }\n        return $t . ' size=\"30\" class=\"uich document-uploader\">';\n    }\n\n    function render_abstract(FieldRender $fr, PaperOption $o) {\n        $fr->title = false;\n        $fr->value_format = 5;\n\n        $html = $this->highlight($this->prow->abstract_text(), \"ab\", $match);\n        if (trim($html) === \"\") {\n            if ($this->conf->opt(\"noAbstract\"))\n                return;\n            $html = \"[No abstract]\";\n        }\n        $extra = [];\n        if ($this->allow_folds && $this->abstract_foldable($html)) {\n            $extra = [\"fold\" => \"paper\", \"foldnum\" => 6,\n                      \"foldtitle\" => \"Toggle full abstract\"];\n        }\n        $fr->value = '<div class=\"paperinfo-abstract\"><div class=\"pg\">'\n            . $this->papt(\"abstract\", $o->title_html(), $extra)\n            . '<div class=\"pavb abstract';\n        if (!$match && ($format = $this->prow->format_of($html))) {\n            $fr->value .= ' need-format\" data-format=\"' . $format . '\">' . $html;\n        } else {\n            $fr->value .= ' format0\">' . Ht::format0_html($html);\n        }\n        $fr->value .= \"</div></div></div>\";\n        if ($extra) {\n            $fr->value .= '<div class=\"fn6 fx7 longtext-fader\"></div>'\n                . '<div class=\"fn6 fx7 longtext-expander\"><a class=\"ulh ui js-foldup\" href=\"\" role=\"button\" aria-expanded=\"false\" data-fold-target=\"6\">[more]</a></div>'\n                . Ht::unstash_script(\"hotcrp.render_text_page()\");\n        }\n    }\n\n    /** @param list<Author> $table\n     * @param string $type\n     * @param ?Contact $viewAs\n     * @return string */\n    private function authorData($table, $type, $viewAs = null) {\n        if ($this->matchPreg && isset($this->matchPreg[\"au\"])) {\n            $highpreg = $this->matchPreg[\"au\"];\n        } else {\n            $highpreg = false;\n        }\n        $names = [];\n\n        if (empty($table)) {\n            return \"[No authors]\";\n        } else if ($type === \"last\") {\n            foreach ($table as $au) {\n                $n = Text::nameo($au, NAME_P|NAME_I);\n                $names[] = Text::highlight($n, $highpreg);\n            }\n            return join(\", \", $names);\n        } else {\n            foreach ($table as $au) {\n                $n = trim(Text::highlight(\"$au->firstName $au->lastName\", $highpreg));\n                if ($au->email !== \"\") {\n                    $s = Text::highlight($au->email, $highpreg);\n                    $ehtml = htmlspecialchars($au->email);\n                    $e = \"&lt;<a href=\\\"mailto:{$ehtml}\\\" class=\\\"q\\\">{$s}</a>&gt;\";\n                } else {\n                    $e = \"\";\n                }\n                $t = ($n === \"\" ? $e : $n);\n                if ($au->affiliation !== \"\") {\n                    $s = Text::highlight($au->affiliation, $highpreg);\n                    $t .= \" <span class=\\\"auaff\\\">({$s})</span>\";\n                }\n                if ($n !== \"\" && $e !== \"\") {\n                    $t .= \" \" . $e;\n                }\n                $t = trim($t);\n                if ($au->email !== \"\"\n                    && $au->contactId\n                    && $viewAs !== null\n                    && $viewAs->email !== $au->email\n                    && $viewAs->privChair) {\n                    $t .= \" <a href=\\\"\"\n                        . $this->conf->selfurl($this->qreq, [\"actas\" => $au->email])\n                        . \"\\\">\" . Ht::img(\"viewas.png\", \"[Act as]\", [\"title\" => \"Act as \" . Text::nameo($au, NAME_P)]) . \"</a>\";\n                }\n                $names[] = '<p class=\"odname\">' . $t . '</p>';\n            }\n            return join(\"\\n\", $names);\n        }\n    }\n\n    /** @return array{list<Author>,list<Author>} */\n    private function _analyze_authors() {\n        // clean author information\n        $aulist = $this->prow->author_list();\n        if (empty($aulist)) {\n            return [[], []];\n        }\n\n        // find contact author information, combine with author table\n        // XXX fix this, it too aggressively combines information!!!!\n        $result = $this->conf->qe(\"select contactId, firstName, lastName, '' affiliation, email from ContactInfo where contactId?a\", array_keys($this->prow->contacts()));\n        $contacts = [];\n        while ($result && ($row = $result->fetch_object(\"Author\"))) {\n            $match = -1;\n            for ($i = 0; $match < 0 && $i < count($aulist); ++$i) {\n                if (strcasecmp($aulist[$i]->email, $row->email) == 0)\n                    $match = $i;\n            }\n            if (($row->firstName !== \"\" || $row->lastName !== \"\") && $match < 0) {\n                $contact_n = $row->firstName . \" \" . $row->lastName;\n                $contact_preg = str_replace(\"\\\\.\", \"\\\\S*\", \"{\\\\b\" . preg_quote($row->firstName) . \"\\\\b.*\\\\b\" . preg_quote($row->lastName) . \"\\\\b}i\");\n                for ($i = 0; $match < 0 && $i < count($aulist); ++$i) {\n                    $f = $aulist[$i]->firstName;\n                    $l = $aulist[$i]->lastName;\n                    if (($f !== \"\" || $l !== \"\") && $aulist[$i]->email === \"\") {\n                        $author_n = $f . \" \" . $l;\n                        $author_preg = str_replace(\"\\\\.\", \"\\\\S*\", \"{\\\\b\" . preg_quote($f) . \"\\\\b.*\\\\b\" . preg_quote($l) . \"\\\\b}i\");\n                        if (preg_match($contact_preg, $author_n)\n                            || preg_match($author_preg, $contact_n))\n                            $match = $i;\n                    }\n                }\n            }\n            if ($match >= 0) {\n                $au = $aulist[$match];\n                if ($au->email === \"\") {\n                    $au->email = $row->email;\n                }\n            } else {\n                $contacts[] = $au = $row;\n                $au->nonauthor = true;\n            }\n            $au->contactId = (int) $row->contactId;\n        }\n        Dbl::free($result);\n\n        usort($contacts, $this->conf->user_comparator());\n        return [$aulist, $contacts];\n    }\n\n    function render_authors(FieldRender $fr, PaperOption $o) {\n        $fr->title = false;\n        $fr->value_format = 5;\n\n        $vas = $this->user->view_authors_state($this->prow);\n        if ($vas === 0) {\n            $fr->value = '<div class=\"pg\">'\n                . $this->papt(\"authors\", $o->title_html(0))\n                . '<div class=\"pavb\"><i>Hidden</i></div>'\n                . \"</div>\\n\\n\";\n            return;\n        }\n\n        // clean author information\n        list($aulist, $contacts) = $this->_analyze_authors();\n\n        // \"author\" or \"authors\"?\n        $auname = $o->title_html(count($aulist));\n        if ($vas === 1) {\n            $auname .= \" <span class=\\\"n\\\">(deanonymized)</span>\";\n        } else if ($this->user->act_author_view($this->prow)) {\n            // Tell authors whether they are blind.\n            // Accepted papers are sometimes not blind.\n            if ($this->prow->outcome_sign <= 0\n                || !$this->user->can_view_decision($this->prow)\n                || $this->conf->setting(\"seedec_hideau\")) {\n                $sb = $this->conf->submission_blindness();\n                if ($sb === Conf::BLIND_ALWAYS\n                    || ($sb === Conf::BLIND_OPTIONAL && $this->prow->blind)) {\n                    $auname .= \" <span class=\\\"n\\\">(anonymous)</span>\";\n                } else if ($sb === Conf::BLIND_UNTILREVIEW) {\n                    $auname .= \" <span class=\\\"n\\\">(anonymous until review)</span>\";\n                }\n            }\n        }\n\n        // header with folding\n        $fr->value = '<div class=\"pg\">'\n            . '<div class=\"'\n            . $this->control_class(\"authors\", \"pavt ui js-aufoldup\")\n            . '\"><h3 class=\"pavfn\">';\n        if ($vas === 1 || $this->allow_folds) {\n            $fr->value .= '<a class=\"q ui js-aufoldup\" href=\"\" title=\"Toggle author display\" role=\"button\" aria-expanded=\"' . ($this->foldmap[8] ? \"false\" : \"true\") . '\">';\n        }\n        if ($vas === 1) {\n            $fr->value .= '<span class=\"fn8\">' . $o->title_html(0) . '</span><span class=\"fx8\">';\n        }\n        if ($this->allow_folds) {\n            $fr->value .= expander(null, 9);\n        } else if ($vas === 1) {\n            $fr->value .= expander(false);\n        }\n        $fr->value .= $auname;\n        if ($vas === 1) {\n            $fr->value .= '</span>';\n        }\n        if ($vas === 1 || $this->allow_folds) {\n            $fr->value .= '</a>';\n        }\n        if ($this->admin) {\n            $mailt = \"s\";\n            if ($this->prow->timeSubmitted <= 0) {\n                $mailt = \"all\";\n            } else if ($this->prow->outcome !== 0 && $this->prow->can_author_view_decision()) {\n                $dec = $this->prow->decision();\n                if ($dec->category !== DecisionInfo::CAT_NONE) {\n                    $mailt = $dec->category === DecisionInfo::CAT_YES ? \"dec:yes\" : \"dec:no\";\n                }\n            }\n            $fr->value .= ' <a class=\"fx9 q\" href=\"'\n                . $this->conf->hoturl(\"mail\", [\"t\" => $mailt, \"plimit\" => 1, \"q\" => $this->prow->paperId])\n                . '\">\u2709\ufe0f</a>';\n        }\n        $fr->value .= '</h3></div>';\n\n        // contents\n        $fr->value .= '<div class=\"pavb\">';\n        if ($vas === 1) {\n            $fr->value .= '<a class=\"q fn8 ui js-aufoldup\" href=\"\" title=\"Toggle author display\">'\n                . '+&nbsp;<i>Hidden</i>'\n                . '</a><div class=\"fx8\">';\n        }\n        if ($this->allow_folds) {\n            $fr->value .= '<div class=\"fn9\">'\n                . $this->authorData($aulist, \"last\", null)\n                . ' <a class=\"ui js-aufoldup\" href=\"\">[details]</a>'\n                . '</div><div class=\"fx9\">';\n        }\n        $fr->value .= $this->authorData($aulist, \"col\", $this->user);\n        if ($this->allow_folds) {\n            $fr->value .= '</div>';\n        }\n        if ($vas === 1) {\n            $fr->value .= '</div>';\n        }\n        $fr->value .= \"</div></div>\\n\\n\";\n\n        // contacts\n        if (!empty($contacts)\n            && ($this->editable\n                || $this->mode !== \"edit\"\n                || $this->prow->timeSubmitted <= 0)) {\n            $contacts_option = $this->conf->option_by_id(PaperOption::CONTACTSID);\n            $fr->value .= '<div class=\"pg fx9' . ($vas > 1 ? \"\" : \" fx8\") . '\">'\n                . $this->papt(\"contacts\", $contacts_option->title_html(count($contacts)))\n                . '<div class=\"pavb\">'\n                . $this->authorData($contacts, \"col\", $this->user)\n                . \"</div></div>\\n\\n\";\n        }\n    }\n\n    /** @param PaperOption $o\n     * @param FieldRender $fr */\n    private function clean_render($o, $fr) {\n        if ($fr->title === false) {\n            assert($fr->value_format === 5);\n            return;\n        }\n\n        if ($fr->title === null) {\n            $fr->title = $o->title();\n        }\n\n        $fr->value = $fr->value_html();\n        $fr->value_format = 5;\n\n        if ($fr->title !== \"\" && $o->page_group && !$fr->value_long) {\n            $title = htmlspecialchars($fr->title);\n            if ($fr->value === \"\") {\n                $fr->value = \"<h3 class=\\\"pavfn\\\">{$title}</h3>\";\n            } else if ($fr->value[0] === \"<\"\n                       && preg_match('/\\A((?:<(?:div|ul|ol|li).*?>)*)/', $fr->value, $cm)) {\n                $fr->value = \"{$cm[1]}<h3 class=\\\"pavfn pavfnsp\\\">{$title}:</h3> \"\n                    . substr($fr->value, strlen($cm[1]));\n            } else {\n                $fr->value = \"<h3 class=\\\"pavfn pavfnsp\\\">{$title}:</h3> {$fr->value}\";\n            }\n            $fr->value_long = false;\n            $fr->title = \"\";\n        }\n    }\n\n    /** @param list<PaperTableFieldRender> $renders\n     * @param int $first\n     * @param int $last\n     * @param int $vos\n     * @return string */\n    private function _group_name_html($renders, $first, $last, $vos) {\n        $group_names = [];\n        $group_flags = 0;\n        for ($i = $first; $i !== $last; ++$i) {\n            if ($renders[$i]->view_state >= $vos) {\n                $o = $renders[$i]->option;\n                $group_names[] = $o->title();\n                if ($o->id === -1005) {\n                    $group_flags |= 1;\n                } else if ($o->has_document()) {\n                    $group_flags |= 2;\n                } else {\n                    $group_flags |= 4;\n                }\n            }\n        }\n        $group_types = [];\n        if ($group_flags & 1) {\n            $group_types[] = \"Topics\";\n        }\n        if ($group_flags & 2) {\n            $group_types[] = \"Attachments\";\n        }\n        if ($group_flags & 4) {\n            $group_types[] = \"Options\";\n        }\n        return htmlspecialchars($this->conf->_c(\"field_group\", $renders[$first]->option->page_group, commajoin($group_names), commajoin($group_types)));\n    }\n\n    private function _print_pre_status_feedback() {\n        if (($psf = MessageSet::feedback_html($this->pre_status_feedback ?? []))) {\n            echo '<div class=\"mb-3\">', $psf, '</div>';\n        }\n    }\n\n    private function _print_accept_decline() {\n        $rrow = $this->editrrow;\n        if ($rrow->reviewId <= 0\n            || $rrow->reviewType >= REVIEW_SECONDARY\n            || $rrow->reviewStatus > ReviewInfo::RS_ACCEPTED\n            || (!$this->user->can_administer($this->prow)\n                && (!$this->user->is_my_review($rrow)\n                    || !$this->user->time_review($this->prow, $rrow)))) {\n            return;\n        }\n        $acc = $rrow->reviewStatus === ReviewInfo::RS_ACCEPTED;\n        echo Ht::form([\"method\" => \"post\", \"class\" => ($acc ? \"msg\" : \"msg msg-warning\") . ' d-flex demargin remargin-left remargin-right']),\n            '<div class=\"flex-grow-1 align-self-center\">';\n        if ($acc) {\n            echo 'Thank you for confirming your intention to finish this review.';\n        } else if ($rrow->requestedBy\n                   && ($requester = $this->conf->user_by_id($rrow->requestedBy, USER_SLICE))) {\n            echo 'Please take a moment to accept or decline ' . Text::nameo_h($requester, NAME_P) . '\u2019s review request.';\n        } else {\n            echo 'Please take a moment to accept or decline our review request.';\n        }\n        echo '</div><div class=\"aabr align-self-center\">';\n        if ($acc) {\n            echo '<div class=\"aabut\">', Ht::submit(\"Decline review after all\", [\"class\" => \"btn-danger ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/declinereview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>';\n        } else {\n            echo '<div class=\"aabut\">', Ht::submit(\"Decline\", [\"class\" => \"btn-danger ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/declinereview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>',\n                '<div class=\"aabut\">', Ht::submit(\"Accept\", [\"class\" => \"btn-success ui js-acceptish-review\", \"formaction\" => $this->conf->hoturl(\"=api/acceptreview\", [\"p\" => $rrow->paperId, \"r\" => $rrow->reviewId, \"smsg\" => 1])]), '</div>';\n        }\n        echo '</div></form>';\n        if ($rrow->reviewStatus === ReviewInfo::RS_EMPTY) {\n            $this->unfold_all = true;\n        }\n    }\n\n    private function _print_decline_reason(Contact $capu, ReviewRefusalInfo $refusal) {\n        echo Ht::form($this->conf->hoturl(\"=api/declinereview\", [\"p\" => $this->prow->paperId, \"r\" => $refusal->refusedReviewId, \"smsg\" => 1]),\n            [\"class\" => \"msg msg-warning demargin remargin-left remargin-right ui-submit js-acceptish-review\"]);\n        echo '<p>You have declined to complete this review. Thank you for informing us.</p>',\n            '<div class=\"f-i mt-3\"><label for=\"declinereason\">Optional explanation</label>',\n            (empty($refusal->reason) ? '<div class=\"field-d\">If you\u2019d like, you may enter a brief explanation here.</div>' : ''),\n            Ht::textarea(\"reason\", $refusal->reason ?? \"\", [\"rows\" => 3, \"cols\" => 40, \"spellcheck\" => true, \"class\" => \"w-text\", \"id\" => \"declinereason\"]),\n            '</div><div class=\"aab mt-3\">',\n            '<div class=\"aabut\">', Ht::submit(\"Save explanation\", [\"class\" => \"btn-primary\"]), '</div>';\n        if ($this->conf->time_review($refusal->reviewRound, $refusal->refusedReviewType, true)) {\n            echo '<div class=\"aabut\">', Ht::submit(\"Accept review after all\", [\"formaction\" => $this->conf->hoturl(\"=api/acceptreview\", [\"p\" => $this->prow->paperId, \"r\" => $refusal->refusedReviewId, \"smsg\" => 1]), \"class\" => \"ui js-acceptish-review\"]), '</div>';\n        }\n        echo '</div></form>';\n    }\n\n    private function _print_normal_body() {\n        // pre-status feedback\n        $this->_print_pre_status_feedback();\n\n        // review accept/decline message\n        if ($this->mode === \"re\"\n            && $this->editrrow\n            && $this->editrrow->reviewStatus <= ReviewInfo::RS_ACCEPTED\n            && $this->user->is_my_review($this->editrrow)) {\n            $this->_print_accept_decline();\n        } else if ($this->mode === \"p\"\n                   && $this->qreq->page() === \"review\") {\n            $capuid = $this->user->capability(\"@ra{$this->prow->paperId}\");\n            $capu = $capuid ? $this->conf->user_by_id($capuid, USER_SLICE) : $this->user;\n            $refusals = $capu ? $this->prow->review_refusals_by_user($capu) : [];\n            if ($refusals && $refusals[0]->refusedReviewId) {\n                $this->_print_decline_reason($capu, $refusals[0]);\n            } else if ($capuid) {\n                echo '<div class=\"msg msg-warning demargin remargin-left remargin-right\"><p>You have declined to complete a review. Thank you for informing us.</p></div>';\n            }\n        }\n\n        $this->_print_foldpaper_div();\n\n        // status\n        list($class, $name) = $this->prow->status_class_and_name($this->user);\n        echo '<p class=\"pgsm\"><span class=\"pstat ', $class, '\">',\n            htmlspecialchars($name), \"</span></p>\";\n\n        $renders = [];\n        $fr = new FieldRender(FieldRender::CPAGE, $this->user);\n        $fr->table = $this;\n        foreach ($this->prow->page_fields() as $o) {\n            if ($o->page_order() === false\n                || $o->page_order() < 1000\n                || $o->page_order() >= 5000\n                || ($vos = $this->user->view_option_state($this->prow, $o)) === 0) {\n                continue;\n            }\n\n            $fr->clear();\n            $o->render($fr, $this->prow->force_option($o));\n            if (!$fr->is_empty()) {\n                $this->clean_render($o, $fr);\n                $renders[] = new PaperTableFieldRender($o, $vos, $fr);\n            }\n        }\n\n        $lasto1 = null;\n        $in_paperinfo_i = false;\n        for ($first = 0; $first !== count($renders); $first = $last) {\n            // compute size of group\n            $o1 = $renders[$first]->option;\n            $last = $first + 1;\n            if ($o1->page_group !== null && $this->allow_folds) {\n                while ($last !== count($renders)\n                       && $renders[$last]->option->page_group === $o1->page_group) {\n                    ++$last;\n                }\n            }\n\n            $nvos1 = 0;\n            for ($i = $first; $i !== $last; ++$i) {\n                if ($renders[$i]->view_state === 1) {\n                    ++$nvos1;\n                }\n            }\n\n            // change column\n            if ($o1->page_order() >= 2000) {\n                if (!$lasto1 || $lasto1->page_order() < 2000) {\n                    echo '<div class=\"paperinfo\"><div class=\"paperinfo-c\">';\n                } else if ($o1->page_order() >= 3000\n                           && $lasto1->page_order() < 3000) {\n                    if ($in_paperinfo_i) {\n                        echo '</div>'; // paperinfo-i\n                        $in_paperinfo_i = false;\n                    }\n                    echo '</div><div class=\"paperinfo-c\">';\n                }\n                if ($o1->page_expand) {\n                    if ($in_paperinfo_i) {\n                        echo '</div>';\n                        $in_paperinfo_i = false;\n                    }\n                    echo '<div class=\"paperinfo-i paperinfo-i-expand\">';\n                } else if (!$in_paperinfo_i) {\n                    echo '<div class=\"paperinfo-i\">';\n                    $in_paperinfo_i = true;\n                }\n            }\n\n            // echo start of group\n            if ($o1->page_group !== null && $this->allow_folds) {\n                if ($nvos1 === 0 || $nvos1 === $last - $first) {\n                    $group_html = $this->_group_name_html($renders, $first, $last, $nvos1 === 0 ? 2 : 1);\n                } else {\n                    $group_html = $this->_group_name_html($renders, $first, $last, 2);\n                    $gn1 = $this->_group_name_html($renders, $first, $last, 1);\n                    if ($group_html !== $gn1) {\n                        $group_html = \"<span class=\\\"fn8\\\">{$group_html}</span><span class=\\\"fx8\\\">{$gn1}</span>\";\n                    }\n                }\n\n                $class = \"pg\";\n                if ($nvos1 === $last - $first) {\n                    $class .= \" fx8\";\n                }\n                $foldnum = $this->foldnumber[$o1->page_group] ?? 0;\n                if ($foldnum && $renders[$first]->title !== \"\") {\n                    $group_html = \"<span class=\\\"fn{$foldnum}\\\">{$group_html}</span><span class=\\\"fx{$foldnum}\\\">\" . $renders[$first]->title . '</span>';\n                    $renders[$first]->title = false;\n                    $renders[$first]->value = '<div class=\"'\n                        . ($renders[$first]->value_long ? \"pg\" : \"pgsm\")\n                        . ' pavb\">' . $renders[$first]->value . '</div>';\n                }\n                echo '<div class=\"', $class, '\">';\n                if ($foldnum) {\n                    echo '<div class=\"pavt ui js-foldup\" data-fold-target=\"', $foldnum, '\">',\n                        '<h3 class=\"pavfn\">',\n                        '<a class=\"q ui js-foldup\" href=\"\" data-fold-target=\"', $foldnum, '\" title=\"Toggle visibility\" role=\"button\" aria-expanded=\"',\n                        $this->foldmap[$foldnum] ? \"false\" : \"true\",\n                        '\">', expander(null, $foldnum),\n                        $group_html,\n                        '</a></h3></div><div class=\"pg fx', $foldnum, '\">';\n                } else {\n                    echo '<div class=\"pavt\"><h3 class=\"pavfn\">',\n                        $group_html,\n                        '</h3></div><div class=\"pg\">';\n                }\n            }\n\n            // echo contents\n            for ($i = $first; $i !== $last; ++$i) {\n                $x = $renders[$i];\n                if ($x->value_long === false\n                    || (!$x->value_long && $x->title === \"\")) {\n                    $class = \"pgsm\";\n                } else {\n                    $class = \"pg\";\n                }\n                if ($x->value === \"\"\n                    || ($x->title === \"\" && preg_match('{\\A(?:[^<]|<a|<span)}', $x->value))) {\n                    $class .= \" outdent\";\n                }\n                if ($x->view_state === 1) {\n                    $class .= \" fx8\";\n                }\n                if ($x->title === false) {\n                    echo $x->value;\n                } else if ($x->title === \"\") {\n                    echo '<div class=\"', $class, '\">', $x->value, '</div>';\n                } else if ($x->value === \"\") {\n                    echo '<div class=\"', $class, '\"><h3 class=\"pavfn\">', $x->title, '</h3></div>';\n                } else {\n                    echo '<div class=\"', $class, '\"><div class=\"pavt\"><h3 class=\"pavfn\">', $x->title, '</h3></div><div class=\"pavb\">', $x->value, '</div></div>';\n                }\n            }\n\n            // echo end of group\n            if ($o1->page_group !== null && $this->allow_folds) {\n                echo '</div></div>';\n            }\n            if ($o1->page_order() >= 2000\n                && $o1->page_expand) {\n                echo '</div>';\n            }\n            $lasto1 = $o1;\n        }\n\n        // close out display\n        if ($in_paperinfo_i) {\n            echo '</div>';\n        }\n        if ($lasto1 && $lasto1->page_order() >= 2000) {\n            echo '</div></div>';\n        }\n        echo '</div>'; // #foldpaper\n    }\n\n\n    private function _papstrip_framework() {\n        if (!$this->npapstrip) {\n            echo '<article class=\"pcontainer\"><div class=\"pcard-left',\n                '\"><div class=\"pspcard\"><div class=\"ui pspcard-fold\">',\n                '<div style=\"float:right;margin-left:1em;cursor:pointer\"><span class=\"psfn\">More ', expander(true), '</span></div>';\n\n            if (($viewable = $this->prow->sorted_viewable_tags($this->user))) {\n                $tagger = new Tagger($this->user);\n                echo '<span class=\"psfn\">Tags:</span> ',\n                    $tagger->unparse_link($viewable);\n            } else {\n                echo '<hr class=\"c\">';\n            }\n\n            echo '</div><div class=\"pspcard-open\">';\n        }\n        ++$this->npapstrip;\n    }\n\n    private function _papstripBegin($foldid = null, $folded = null, $extra = null) {\n        $this->_papstrip_framework();\n        echo '<div';\n        if ($foldid) {\n            echo \" id=\\\"fold{$foldid}\\\"\";\n        }\n        echo ' class=\"psc';\n        if ($foldid) {\n            echo \" fold\", ($folded ? \"c\" : \"o\");\n        }\n        if ($extra) {\n            if (isset($extra[\"class\"])) {\n                echo \" \", $extra[\"class\"];\n            }\n            foreach ($extra as $k => $v) {\n                if ($k !== \"class\")\n                    echo \"\\\" $k=\\\"\", str_replace(\"\\\"\", \"&quot;\", $v);\n            }\n        }\n        echo '\">';\n    }\n\n    private function _print_ps_collaborators() {\n        if (!$this->conf->setting(\"sub_collab\")\n            || !$this->prow->collaborators\n            || strcasecmp(trim($this->prow->collaborators), \"None\") == 0) {\n            return;\n        }\n        $data = $this->highlight($this->prow->collaborators(), \"co\", $match);\n        $option = $this->conf->option_by_id(PaperOption::COLLABORATORSID);\n        $this->_papstripBegin(\"pscollab\", false, [\"data-fold-storage\" => \"p.collab\", \"class\" => \"need-fold-storage\"]);\n        echo Ht::unstash_script(\"hotcrp.fold_storage.call(\\$\\$(\\\"foldpscollab\\\"))\"),\n            $this->papt(\"collaborators\", $option->title_html(),\n                        [\"type\" => \"ps\", \"fold\" => \"pscollab\"]),\n            '<ul class=\"fx x namelist-columns\">';\n        foreach (explode(\"\\n\", $data) as $line) {\n            echo '<li class=\"od\">', $line, '</li>';\n        }\n        echo '</ul></div>', \"\\n\";\n    }\n\n    private function _print_ps_pc_conflicts() {\n        assert(!$this->editable && $this->prow->paperId);\n        $pcconf = [];\n        $pcm = $this->conf->pc_members();\n        foreach ($this->prow->pc_conflicts() as $id => $cflt) {\n            if (Conflict::is_conflicted($cflt->conflictType)) {\n                $p = $pcm[$id];\n                $pcconf[$p->pc_index] = $this->user->reviewer_html_for($p);\n            }\n        }\n        if (empty($pcconf)) {\n            $pcconf[] = 'None';\n        }\n        ksort($pcconf);\n        $option = $this->conf->option_by_id(PaperOption::PCCONFID);\n        $this->_papstripBegin(\"pspcconf\", $this->allow_folds, [\"data-fold-storage\" => \"p.pcconf\", \"class\" => \"need-fold-storage\"]);\n        echo Ht::unstash_script(\"hotcrp.fold_storage.call(\\$\\$(\\\"foldpspcconf\\\"))\"),\n            $this->papt(\"pc_conflicts\", $option->title_html(),\n                        [\"type\" => \"ps\", \"fold\" => \"pspcconf\"]),\n            '<ul class=\"fx x namelist-columns\">';\n        foreach ($pcconf as $n) {\n            echo '<li class=\"od\">', $n, '</li>';\n        }\n        echo '</ul></div>', \"\\n\";\n    }\n\n    private function _papstripLeadShepherd($type, $name) {\n        $editable = $type === \"manager\" ? $this->user->privChair : $this->admin;\n        $extrev_shepherd = $type === \"shepherd\" && $this->conf->setting(\"extrev_shepherd\");\n\n        $field = $type . \"ContactId\";\n        if ($this->prow->$field == 0 && !$editable) {\n            return;\n        }\n        $value = $this->prow->$field;\n        $id = \"{$type}_{$this->prow->paperId}\";\n\n        $this->_papstripBegin($type, true, $editable ? [\"class\" => \"ui-unfold js-unfold-pcselector js-unfold-focus need-paper-select-api\"] : \"\");\n        echo $this->papt($type, $editable ? Ht::label($name, $id) : $name,\n            [\"type\" => \"ps\", \"fold\" => $editable ? $type : false]);\n        if (!$value) {\n            $n = \"\";\n        } else if (($p = $this->conf->user_by_id($value, USER_SLICE))\n                   && ($p->isPC\n                       || ($extrev_shepherd && $this->prow->review_type($p) == REVIEW_EXTERNAL))) {\n            $n = $this->user->reviewer_html_for($p);\n        } else {\n            $n = \"<strong>[removed from PC]</strong>\";\n        }\n        echo '<div class=\"pscopen\"><p class=\"fn odname js-psedit-result\">',\n            $n, '</p></div>';\n\n        if ($editable) {\n            $this->conf->stash_hotcrp_pc($this->user);\n            $selopt = \"0 assignable\";\n            if ($type === \"shepherd\" && $this->conf->setting(\"extrev_shepherd\")) {\n                $selopt .= \" extrev\";\n            }\n            echo '<form class=\"ui-submit uin fx\">',\n                Ht::select($type, [], 0, [\"class\" => \"w-99 want-focus\", \"data-pcselector-options\" => $selopt . \" selected\", \"data-pcselector-selected\" => $value, \"id\" => $id]),\n                '</form>';\n        }\n\n        echo \"</div>\\n\";\n    }\n\n    private function papstripLead() {\n        $this->_papstripLeadShepherd(\"lead\", \"Discussion lead\");\n    }\n\n    private function papstripShepherd() {\n        $this->_papstripLeadShepherd(\"shepherd\", \"Shepherd\");\n    }\n\n    private function papstripManager() {\n        $this->_papstripLeadShepherd(\"manager\", \"Paper administrator\");\n    }\n\n    private function papstripTags() {\n        if (!$this->prow->paperId || !$this->user->can_view_tags($this->prow)) {\n            return;\n        }\n\n        $tags = $this->prow->all_tags_text();\n        $editable = $this->user->can_edit_some_tag($this->prow);\n        $is_sitewide = $editable && !$this->user->can_edit_most_tags($this->prow);\n        if ($tags === \"\" && !$editable) {\n            return;\n        }\n\n        // Note that tags MUST NOT contain HTML special characters.\n        $tagger = new Tagger($this->user);\n        $viewable = $this->prow->sorted_viewable_tags($this->user);\n\n        $tx = $tagger->unparse_link($viewable);\n        $unfolded = $editable && ($this->has_problem_at(\"tags\") || $this->qreq->atab === \"tags\");\n        $id = \"tags {$this->prow->paperId}\";\n\n        $this->_papstripBegin(\"tags\", true, $editable ? [\"class\" => \"need-tag-form ui-unfold js-unfold-focus\"] : []);\n\n        if ($editable) {\n            echo Ht::form($this->prow->hoturl(), [\"data-pid\" => $this->prow->paperId, \"data-no-tag-report\" => $unfolded ? 1 : null]);\n        }\n\n        echo $this->papt(\"tags\", $editable ? Ht::label(\"Tags\", $id) : \"Tags\",\n            [\"type\" => \"ps\", \"fold\" => $editable ? \"tags\" : false, \"foldopen\" => true]);\n        if ($editable) {\n            $treport = Tags_API::tagmessages($this->user, $this->prow, null);\n            $treport_warn = array_filter($treport->message_list, function ($mi) {\n                return $mi->status > 0;\n            });\n\n            // uneditable\n            if (empty($treport_warn)) {\n                echo '<ul class=\"fn want-tag-report-warnings feedback-list hidden\"></ul>';\n            } else {\n                echo '<ul class=\"fn want-tag-report-warnings feedback-list\"><li>',\n                    join(\"</li><li>\", MessageSet::feedback_html_items($treport_warn)), \"</li></ul>\";\n            }\n\n            echo '<div class=\"fn js-tag-result\">', $tx === \"\" ? \"None\" : $tx, '</div>';\n\n            echo '<div class=\"fx js-tag-editor\">';\n            if (empty($treport->message_list)) {\n                echo '<ul class=\"want-tag-report feedback-list hidden\"></ul>';\n            } else {\n                echo '<ul class=\"want-tag-report feedback-list\"><li>',\n                    join(\"</li><li>\", MessageSet::feedback_html_items($treport->message_list)), \"</li></ul>\";\n            }\n            if ($is_sitewide) {\n                echo '<p class=\"feedback is-warning\">You have a conflict with this submission, so you can only edit its ', Ht::link(\"site-wide tags\", $this->conf->hoturl(\"settings\", \"group=tags#tag_sitewide\")), '.';\n                if ($this->user->allow_administer($this->prow)) {\n                    echo ' ', Ht::link(\"Override your conflict\", $this->conf->selfurl($this->qreq, [\"forceShow\" => 1])), ' to view and edit all tags.';\n                }\n                echo '</p>';\n            }\n            $editable_tags = $this->prow->sorted_editable_tags($this->user);\n            echo '<textarea cols=\"20\" rows=\"4\" name=\"tags\" class=\"w-99 want-focus need-suggest mf-label ',\n                $is_sitewide ? \"sitewide-editable-tags\" : \"editable-tags\",\n                '\" spellcheck=\"false\" id=\"', $id, '\">',\n                $tagger->unparse($editable_tags),\n                '</textarea><div class=\"aab flex-row-reverse mt-1\"><div class=\"aabut\">',\n                Ht::submit(\"save\", \"Save\", [\"class\" => \"btn-primary\"]),\n                '</div><div class=\"aabut\">',\n                Ht::submit(\"cancel\", \"Cancel\"),\n                \"</div></div>\",\n                '<span class=\"hint\"><a href=\"', $this->conf->hoturl(\"help\", \"t=tags\"), '\">Learn more</a> <span class=\"barsep\">\u00b7</span> <strong>Tip:</strong> Twiddle tags like \u201c~tag\u201d are visible only to you.</span>',\n                \"</div>\";\n        } else {\n            echo '<div class=\"js-tag-result\">', ($tx === \"\" ? \"None\" : $tx), '</div>';\n        }\n\n        if ($editable) {\n            echo \"</form>\";\n        }\n        if ($unfolded) {\n            echo Ht::unstash_script('hotcrp.fold(\"tags\",0)');\n        }\n        echo \"</div>\\n\";\n    }\n\n    function papstripOutcomeSelector() {\n        $id = \"decision_{$this->prow->paperId}\";\n        $this->_papstripBegin(\"decision\", $this->qreq->atab !== \"decision\", [\"class\" => \"need-paper-select-api ui-unfold js-unfold-focus\"]);\n        echo $this->papt(\"decision\", Ht::label(\"Decision\", $id),\n                [\"type\" => \"ps\", \"fold\" => \"decision\"]),\n            '<form class=\"ui-submit uin fx\">';\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow ? 1 : 0);\n        }\n        $opts = [];\n        foreach ($this->conf->decision_set() as $dec) {\n            $opts[$dec->id] = $dec->name_as(5);\n        }\n        echo Ht::select(\"decision\", $opts,\n                        (string) $this->prow->outcome,\n                        [\"class\" => \"w-99 want-focus\", \"id\" => $id]),\n            '</form><p class=\"fn odname js-psedit-result\">',\n            $this->prow->decision()->name_as(5),\n            \"</p></div>\\n\";\n    }\n\n    function papstripReviewPreference() {\n        $this->_papstripBegin(\"revpref\");\n        echo $this->papt(\"revpref\", \"Review preference\", [\"type\" => \"ps\"]),\n            \"<form class=\\\"ui\\\">\";\n        $rp = unparse_preference($this->prow->preference($this->user));\n        $rp = ($rp == \"0\" ? \"\" : $rp);\n        echo \"<input id=\\\"revprefform_d\\\" type=\\\"text\\\" name=\\\"revpref\", $this->prow->paperId,\n            \"\\\" size=\\\"4\\\" value=\\\"$rp\\\" class=\\\"revpref want-focus want-select\\\">\",\n            \"</form></div>\\n\";\n        Ht::stash_script(\"hotcrp.add_preference_ajax(\\\"#revprefform_d\\\",true);hotcrp.shortcut(\\\"revprefform_d\\\").add()\");\n    }\n\n    private function papstrip_tag_entry($id) {\n        $this->_papstripBegin($id, !!$id, [\"class\" => \"pste ui-unfold js-unfold-focus\"]);\n    }\n\n    private function papstrip_tag_float($tag, $kind, $type) {\n        if (!$this->user->can_view_tag($this->prow, $tag)) {\n            return \"\";\n        }\n        $totval = $this->prow->tag_value($tag) ?? \"\";\n        $class = \"is-nonempty-tags float-right\" . ($totval === \"\" ? \" hidden\" : \"\");\n        $reverse = $type !== \"rank\";\n        $extradiv = \"\";\n        if (($type === \"allotment\" || $type === \"approval\")\n            && $this->user->can_view_peruser_tag($this->prow, $tag)) {\n            $class .= \" need-tooltip\";\n            $extradiv = ' data-tooltip-anchor=\"h\" data-tooltip-info=\"votereport\" data-tag=\"' . htmlspecialchars($tag) . '\"';\n        }\n        return '<div class=\"' . $class . '\"' . $extradiv\n            . '><a class=\"q\" href=\"' . $this->conf->hoturl(\"search\", [\"q\" => \"show:#{$tag} sort:\" . ($reverse ? \"-\" : \"\") . \"#{$tag}\"]) . '\">'\n            . '<span class=\"is-tag-index\" data-tag-base=\"' . $tag . '\">' . $totval . '</span> ' . $kind . '</a></div>';\n    }\n\n    private function papstrip_tag_entry_title($s, $tag, $value, $label) {\n        $ts = \"#$tag\";\n        if (($color = $this->conf->tags()->color_classes($tag))) {\n            $ts = '<span class=\"' . $color . ' taghh\">' . $ts . '</span>';\n        }\n        $s = str_replace(\"{{}}\", $ts, $s);\n        if ($value !== false) {\n            $s .= '<span class=\"fn is-nonempty-tags'\n                . ($value === \"\" ? \" hidden\" : \"\")\n                . '\">: <span class=\"is-tag-index\" data-tag-base=\"~'\n                . $tag . '\">' . $value . '</span></span>';\n        }\n        return $label ? Ht::label($s, \"tag:~{$tag} {$this->prow->paperId}\") : $s;\n    }\n\n    private function papstrip_rank($tag) {\n        $id = \"rank_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"overall\", \"rank\");\n\n        $this->papstrip_tag_entry($id);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id, $this->papstrip_tag_entry_title(\"{{}} rank\", $tag, $myval, true),\n                         [\"type\" => \"ps\", \"fold\" => $id, \"float\" => $totmark, \"fnclass\" => \"mf\"]),\n            '<div class=\"fx\">',\n            Ht::entry(\"tagindex\", $myval,\n                [\"size\" => 4, \"class\" => \"is-tag-index want-focus mf-label-success\",\n                 \"data-tag-base\" => \"~{$tag}\", \"inputmode\" => \"decimal\",\n                 \"id\" => \"tag:~{$tag} {$this->prow->paperId}\"]),\n            ' <span class=\"barsep\">\u00b7</span> ',\n            '<a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:#~{$tag}\"]), '\">Edit all</a>',\n            ' <div class=\"hint\" style=\"margin-top:4px\"><strong>Tip:</strong> <a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:#~{$tag}\"]), '\">Search \u201ceditsort:#~', $tag, '\u201d</a> to drag and drop your ranking, or <a href=\"', $this->conf->hoturl(\"offline\"), '\">use offline reviewing</a> to rank many papers at once.</div>',\n            \"</div></form></div>\\n\";\n    }\n\n    private function papstrip_allotment($tag, $allotment) {\n        $id = \"vote_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"total\", \"allotment\");\n\n        $this->papstrip_tag_entry($id);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id, $this->papstrip_tag_entry_title(\"{{}} votes\", $tag, $myval, true),\n                         [\"type\" => \"ps\", \"fold\" => $id, \"float\" => $totmark]),\n            '<div class=\"fx\">',\n            Ht::entry(\"tagindex\", $myval,\n                [\"size\" => 4, \"class\" => \"is-tag-index want-focus mf-label-success\",\n                 \"data-tag-base\" => \"~{$tag}\", \"inputmode\" => \"decimal\",\n                 \"id\" => \"tag:~{$tag} {$this->prow->paperId}\"]),\n            \" &nbsp;of $allotment\",\n            ' <span class=\"barsep\">\u00b7</span> ',\n            '<a href=\"', $this->conf->hoturl(\"search\", [\"q\" => \"editsort:-#~{$tag}\"]), '\">Edit all</a>',\n            \"</div></form></div>\\n\";\n    }\n\n    private function papstrip_approval($tag) {\n        $id = \"approval_\" . html_id_encode($tag);\n        $myval = $this->prow->tag_value($this->user->contactId . \"~$tag\") ?? \"\";\n        $totmark = $this->papstrip_tag_float($tag, \"total\", \"approval\");\n\n        $this->papstrip_tag_entry(null);\n        echo Ht::form(\"\", [\"class\" => \"need-tag-index-form\", \"data-pid\" => $this->prow->paperId]);\n        if (isset($this->qreq->forceShow)) {\n            echo Ht::hidden(\"forceShow\", $this->qreq->forceShow);\n        }\n        echo $this->papt($id,\n            $this->papstrip_tag_entry_title('<label><span class=\"checkc\">'\n                . Ht::checkbox(\"tagindex\", \"0\", $myval !== \"\",\n                    [\"class\" => \"is-tag-index want-focus\", \"data-tag-base\" => \"~$tag\"])\n                . '</span>{{}} vote</label>', $tag, false, false),\n                [\"type\" => \"ps\", \"fnclass\" => \"checki\", \"float\" => $totmark]),\n            \"</form></div>\\n\";\n    }\n\n    private function papstripWatch() {\n        if ($this->prow->timeSubmitted <= 0\n            || $this->user->contactId <= 0\n            || ($this->prow->has_conflict($this->user)\n                && !$this->prow->has_author($this->user)\n                && !$this->user->is_admin_force())) {\n            return;\n        }\n\n        $this->_papstripBegin();\n\n        echo '<form class=\"ui-submit uin\">',\n            $this->papt(\"watch\",\n                '<label><span class=\"checkc\">'\n                . Ht::checkbox(\"follow\", 1, $this->user->following_reviews($this->prow), [\"class\" => \"uich js-follow-change\"])\n                . '</span>Email notification</label>',\n                [\"type\" => \"ps\", \"fnclass\" => \"checki\"]),\n            '<div class=\"pshint\">Select to receive email on updates to reviews and comments.</div>',\n            \"</form></div>\\n\";\n    }\n\n\n    // Functions for editing\n\n    /** @param string $dname\n     * @param string $noun\n     * @return string */\n    function deadline_setting_is($dname, $noun = \"deadline\") {\n        return $this->deadline_is($this->conf->setting($dname) ?? 0, $noun);\n    }\n\n    /** @param int $t\n     * @param string $noun\n     * @return string */\n    function deadline_is($t, $noun = \"deadline\") {\n        if ($t <= 0) {\n            return \"\";\n        }\n        $ts = $this->conf->unparse_time_with_local_span($t);\n        return Conf::$now < $t ? \" The {$noun} is {$ts}.\" : \" The {$noun} was {$ts}.\";\n    }\n\n    private function _deadline_override_message() {\n        if ($this->admin) {\n            return \" As an administrator, you can make changes anyway.\";\n        } else {\n            return $this->_forceShow_message();\n        }\n    }\n    private function _forceShow_message() {\n        if (!$this->admin && $this->allow_admin) {\n            return \" \" . Ht::link(\"(Override your conflict)\", $this->conf->selfurl($this->qreq, [\"forceShow\" => 1]), [\"class\" => \"nw\"]);\n        } else {\n            return \"\";\n        }\n    }\n    /** @param string $m\n     * @param int $status */\n    private function _main_message($m, $status) {\n        $this->edit_status->msg_at(\":main\", $m, $status);\n    }\n\n    private function _edit_message_new_paper_deadline() {\n        $opent = $this->prow->open_time();\n        if ($opent <= 0 || $opent > Conf::$now) {\n            $msg = \"<5>The site is not open for submissions.\" . $this->_deadline_override_message();\n        } else {\n            $msg = '<5>The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">deadline</a> for registering submissions has passed.' . $this->deadline_is($this->prow->registration_deadline()) . $this->_deadline_override_message();\n        }\n        $this->_main_message($msg, $this->admin ? 1 : 2);\n    }\n\n    private function _edit_message_new_paper() {\n        if ($this->admin || $this->conf->time_start_paper()) {\n            $t = [$this->conf->_(\"Enter information about your submission.\")];\n            $reg_dl = $this->prow->registration_deadline();\n            $upd_dl = $this->prow->update_deadline();\n            if ($reg_dl > 0 && $upd_dl > 0 && $reg_dl < $upd_dl) {\n                $t[] = $this->conf->_(\"Submissions must be registered by %s and completed by %s.\", $this->conf->unparse_time_long($reg_dl), $this->conf->unparse_time_long($this->prow->submission_deadline()));\n                if (!$this->conf->opt(\"noPapers\")) {\n                    $t[] = $this->conf->_(\"PDF upload is not required to register.\");\n                }\n            } else if ($upd_dl > 0) {\n                $t[] = $this->conf->_(\"Submissions must be completed by %s.\", $this->conf->unparse_time_long($upd_dl));\n            }\n            $this->_main_message(\"<5>\" . join(\" \", $t), 0);\n            if (($v = $this->conf->_id(\"submit\", \"\"))) {\n                if (!Ftext::is_ftext($v)) {\n                    $v = \"<5>$v\";\n                }\n                $this->_main_message($v, 0);\n            }\n        }\n        if (!$this->conf->time_start_paper()) {\n            $this->_edit_message_new_paper_deadline();\n            $this->quit = $this->quit || !$this->admin;\n        }\n    }\n\n    private function _edit_message_for_author() {\n        $viewable_decision = $this->prow->viewable_decision($this->user);\n        if ($viewable_decision->sign < 0) {\n            $this->_main_message(\"<5>This submission was not accepted.\" . $this->_forceShow_message(), 1);\n        } else if ($this->prow->timeWithdrawn > 0) {\n            if ($this->user->can_revive_paper($this->prow)) {\n                $this->_main_message(\"<5>This submission has been withdrawn, but you can still revive it.\" . $this->deadline_is($this->prow->update_deadline()), 1);\n            } else {\n                $this->_main_message(\"<5>This submission has been withdrawn.\" . $this->_forceShow_message(), 1);\n            }\n        } else if ($this->prow->timeSubmitted <= 0) {\n            $whyNot = $this->user->perm_edit_paper($this->prow);\n            $sub_dl = $this->prow->submission_deadline();\n            if (!$whyNot) {\n                if (($missing = PaperTable::missing_required_fields($this->prow))) {\n                    $first = $this->conf->_(\"<5>This submission is not ready for review. Required fields %#s are missing.\", PaperTable::field_title_links($missing, \"missing_title\"));\n                } else {\n                    $first = $this->conf->_(\"<5>This submission is marked as not ready for review.\");\n                    $first = \"<strong>\" . Ftext::unparse_as($first, 5) . \"</strong>\";\n                }\n                if (($upd_dl = $this->prow->update_deadline()) > 0) {\n                    $rest = $this->conf->_(\"Submissions incomplete as of %s will not be considered.\", $this->conf->unparse_time_long($upd_dl));\n                } else {\n                    $rest = $this->conf->_(\"Incomplete submissions will not be considered.\");\n                }\n                $this->_main_message(\"<5>{$first} {$rest}\", MessageSet::URGENT_NOTE);\n            } else if (isset($whyNot[\"updateSubmitted\"])\n                       && $this->user->can_finalize_paper($this->prow)) {\n                $this->_main_message('<5>This submission is not ready for review. Although you cannot make further changes, the current version can be still be submitted for review.' . $this->deadline_is($sub_dl) . $this->_deadline_override_message(), 1);\n            } else if (isset($whyNot[\"deadline\"])) {\n                if ($this->conf->time_between(null, $sub_dl, $this->prow->submission_grace()) > 0) {\n                    $this->_main_message('<5>The site is not open for updates at the moment.' . $this->_deadline_override_message(), 1);\n                } else {\n                    $this->_main_message('<5>The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">submission deadline</a> has passed and this submission will not be reviewed.' . $this->deadline_is($sub_dl) . $this->_deadline_override_message(), 1);\n                }\n            } else {\n                $this->_main_message('<5>This submission is not ready for review and can\u2019t be changed further. It will not be reviewed.' . $this->_deadline_override_message(), MessageSet::URGENT_NOTE);\n            }\n        } else if ($this->conf->allow_final_versions()\n                   && $viewable_decision->sign > 0) {\n            if ($this->user->can_edit_final_paper($this->prow)) {\n                if (($t = $this->conf->_id(\"finalsubmit\", \"\", new FmtArg(\"deadline\", $this->deadline_setting_is(\"final_soft\"))))) {\n                    $this->_main_message(\"<5>\" . $t, MessageSet::SUCCESS);\n                }\n            } else if ($this->mode === \"edit\") {\n                $this->_main_message(\"<5>The deadline for updating final versions has passed. You can still change contact information.\" . $this->_deadline_override_message(), 1);\n            }\n        } else if ($this->user->can_edit_paper($this->prow)) {\n            if ($this->mode === \"edit\"\n                && (!$this->edit_status || !$this->edit_status->has_error())) {\n                $this->_main_message('<5>This submission is ready for review. You do not need to take further action, but you can still make changes if you wish.' . $this->deadline_is($this->prow->update_deadline(), \"submission deadline\"), MessageSet::SUCCESS);\n            }\n        } else if ($this->mode === \"edit\") {\n            if ($this->user->can_withdraw_paper($this->prow, true)) {\n                $t = \"<5>This submission is under review and can\u2019t be changed, but you can change its contacts or withdraw it from consideration.\";\n            } else {\n                $t = \"<5>This submission is under review and can\u2019t be changed or withdrawn, but you can change its contacts.\";\n            }\n            $this->_main_message($t . $this->_deadline_override_message(), MessageSet::MARKED_NOTE);\n        }\n    }\n\n    /** @param iterable<PaperOption> $fields\n     * @param 'title'|'edit_title'|'missing_title' $title_method\n     * @return list<string> */\n    static function field_title_links($fields, $title_method) {\n        $x = [];\n        foreach ($fields as $o) {\n            $x[] = Ht::link(htmlspecialchars($o->$title_method()), \"#\" . $o->readable_formid());\n        }\n        return $x;\n    }\n\n    /** @return list<PaperOption> */\n    static function missing_required_fields(PaperInfo $prow) {\n        $missing = [];\n        foreach ($prow->form_fields() as $o) {\n            if ($o->test_required($prow) && !$o->value_present($prow->force_option($o)))\n                $missing[] = $o;\n        }\n        return $missing;\n    }\n\n    private function _edit_message_existing_paper() {\n        $has_author = $this->prow->has_author($this->user);\n        if ($has_author) {\n            $this->_edit_message_for_author();\n        } else if ($this->conf->allow_final_versions()\n                   && $this->prow->outcome_sign > 0\n                   && !$this->prow->can_author_view_decision()) {\n            $this->_main_message(\"<5>The submission has been accepted, but its authors can\u2019t see that yet. Once decisions are visible, the system will allow accepted authors to upload final versions.\", 1);\n        } else {\n            $this->_main_message(\"<5>You aren\u2019t a contact for this submission, but as an administrator you can still make changes.\", MessageSet::MARKED_NOTE);\n        }\n        if ($this->user->call_with_overrides($this->user->overrides() | Contact::OVERRIDE_TIME, \"can_edit_paper\", $this->prow)\n            && ($v = $this->conf->_id(\"submit\", \"\"))) {\n            if (!Ftext::is_ftext($v)) {\n                $v = \"<5>$v\";\n            }\n            $this->_main_message($v, 0);\n        }\n        if ($this->edit_status->has_problem()\n            && ($this->edit_status->has_problem_at(\"contacts\") || $this->editable)) {\n            $fields = array_filter($this->edit_fields ?? [], function ($o) {\n                return $this->edit_status->has_problem_at($o->formid);\n            });\n            if (!empty($fields)) {\n                $this->_main_message($this->conf->_c(\"paper_edit\", \"<5>Please check %s before completing the submission.\", commajoin(self::field_title_links($fields, \"edit_title\"))), $this->edit_status->problem_status());\n            }\n        }\n    }\n\n    private function _print_edit_messages($include_required) {\n        if (!$this->prow->paperId) {\n            $this->_edit_message_new_paper();\n        } else {\n            $this->_edit_message_existing_paper();\n        }\n        if ($include_required && !$this->quit) {\n            foreach ($this->edit_fields as $e) {\n                if ($e->required) {\n                    $this->_main_message('<5><span class=\"field-required-explanation\">* Required</span>', 0);\n                    break;\n                }\n            }\n        }\n        if (($t = $this->messages_at(\":main\")) !== \"\") {\n            echo '<div class=\"pge\">', $t, '</div>';\n        }\n    }\n\n    private function _save_name() {\n        if (!$this->is_ready(false)) {\n            return \"Save draft\";\n        } else if ($this->prow->timeSubmitted > 0) {\n            return \"Save and resubmit\";\n        } else {\n            return \"Save and submit\";\n        }\n    }\n\n    private function _collect_actions() {\n        // Withdrawn papers can be revived\n        if ($this->prow->timeWithdrawn > 0) {\n            $revivable = $this->conf->time_finalize_paper($this->prow);\n            if ($revivable) {\n                return [Ht::submit(\"revive\", \"Revive submission\", [\"class\" => \"btn-primary\"])];\n            } else if ($this->admin) {\n                return [[Ht::button(\"Revive submission\", [\"class\" => \"ui js-override-deadlines\", \"data-override-text\" => 'The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">deadline</a> for reviving withdrawn submissions has passed. Are you sure you want to override it?', \"data-override-submit\" => \"revive\"]), \"(admin only)\"]];\n            } else {\n                return [];\n            }\n        }\n\n        $buttons = [];\n        $want_override = false;\n\n        if ($this->mode === \"edit\") {\n            // check whether we can save\n            $old_overrides = $this->user->set_overrides(Contact::OVERRIDE_CHECK_TIME);\n            if ($this->allow_edit_final) {\n                $whyNot = $this->user->perm_edit_final_paper($this->prow);\n            } else if ($this->prow->paperId) {\n                $whyNot = $this->user->perm_edit_paper($this->prow);\n            } else {\n                $whyNot = $this->user->perm_start_paper();\n            }\n            $this->user->set_overrides($old_overrides);\n            // produce button\n            $save_name = $this->_save_name();\n            if (!$whyNot) {\n                $buttons[] = [Ht::submit(\"update\", $save_name, [\"class\" => \"btn-primary btn-savepaper uic js-mark-submit\"]), \"\"];\n            } else if ($this->admin) {\n                $revWhyNot = $whyNot->filter([\"deadline\", \"rejected\"]);\n                $x = $revWhyNot->unparse_html() . \" Are you sure you want to override the deadline?\";\n                $buttons[] = [Ht::button($save_name, [\"class\" => \"btn-primary btn-savepaper ui js-override-deadlines\", \"data-override-text\" => $x, \"data-override-submit\" => \"update\"]), \"(admin only)\"];\n            } else if (isset($whyNot[\"updateSubmitted\"])\n                       && $this->user->can_finalize_paper($this->prow)) {\n                $buttons[] = Ht::submit(\"update\", $save_name, [\"class\" => \"btn-savepaper uic js-mark-submit\"]);\n            } else if ($this->prow->paperId) {\n                $buttons[] = Ht::submit(\"updatecontacts\", \"Save contacts\", [\"class\" => \"btn-savepaper btn-primary uic js-mark-submit\", \"data-contacts-only\" => 1]);\n            }\n            if (!empty($buttons)) {\n                $buttons[] = Ht::submit(\"cancel\", \"Cancel\", [\"class\" => \"uic js-mark-submit\"]);\n                $buttons[] = \"\";\n            }\n            $want_override = $whyNot && !$this->admin;\n        }\n\n        // withdraw button\n        if (!$this->prow->paperId\n            || !$this->user->call_with_overrides($this->user->overrides() | Contact::OVERRIDE_TIME, \"can_withdraw_paper\", $this->prow, true)) {\n            $b = null;\n        } else if ($this->prow->timeSubmitted <= 0) {\n            $b = Ht::submit(\"withdraw\", \"Withdraw\", [\"class\" => \"uic js-mark-submit\"]);\n        } else {\n            $args = [\"class\" => \"ui js-withdraw\"];\n            if ($this->user->can_withdraw_paper($this->prow, !$this->admin)) {\n                $args[\"data-withdrawable\"] = \"true\";\n            }\n            if (($this->admin && !$this->prow->has_author($this->user))\n                || $this->conf->time_finalize_paper($this->prow)) {\n                $args[\"data-revivable\"] = \"true\";\n            }\n            $b = Ht::button(\"Withdraw\", $args);\n        }\n        if ($b) {\n            if ($this->admin && !$this->user->can_withdraw_paper($this->prow)) {\n                $b = [$b, \"(admin only)\"];\n            }\n            $buttons[] = $b;\n        }\n\n        // override conflict button\n        if ($want_override && !$this->admin && false) {\n            if ($this->allow_admin) {\n                $buttons[] = \"\";\n                $buttons[] = [Ht::submit(\"updateoverride\", \"Override conflict\", [\"class\" => \"uic js-mark-submit\"]), \"(admin only)\"];\n            } else if ($this->user->privChair) {\n                $buttons[] = \"\";\n                $buttons[] = Ht::submit(\"updateoverride\", \"Override conflict\", [\"disabled\" => true, \"class\" => \"need-tooltip uic js-mark-submit\", \"title\" => \"You cannot override your conflict because this paper has an administrator.\"]);\n            }\n        }\n\n        return $buttons;\n    }\n\n    private function print_actions() {\n        if ($this->admin) {\n            $v = (string) $this->qreq->emailNote;\n            echo '<div class=\"checki\"><label><span class=\"checkc\">', Ht::checkbox(\"doemail\", 1, true, [\"class\" => \"ignore-diff\"]), \"</span>\",\n                \"Email authors, including:</label> \",\n                Ht::entry(\"emailNote\", $v, [\"size\" => 30, \"placeholder\" => \"Optional explanation\", \"class\" => \"ignore-diff js-autosubmit\", \"aria-label\" => \"Explanation for update\"]),\n                \"</div>\";\n        }\n        if ($this->mode === \"edit\" && $this->allow_edit_final) {\n            echo Ht::hidden(\"submitfinal\", 1);\n        }\n\n        $buttons = $this->_collect_actions();\n        if ($this->admin && $this->prow->paperId) {\n            $buttons[] = [Ht::button(\"Delete\", [\"class\" => \"ui js-delete-paper\"]), \"(admin only)\"];\n        }\n        echo Ht::actions($buttons, [\"class\" => \"aab aabig\"]);\n    }\n\n\n    // Functions for overall paper table viewing\n\n    function _papstrip() {\n        if (($this->prow->managerContactId > 0\n             || ($this->user->privChair && $this->mode === \"assign\"))\n            && $this->user->can_view_manager($this->prow)) {\n            $this->papstripManager();\n        }\n        $this->papstripTags();\n        foreach ($this->conf->tags() as $ltag => $t) {\n            if ($this->user->can_edit_tag($this->prow, \"~$ltag\", null, 0)) {\n                if ($t->approval) {\n                    $this->papstrip_approval($t->tag);\n                } else if ($t->allotment) {\n                    $this->papstrip_allotment($t->tag, $t->allotment);\n                } else if ($t->rank) {\n                    $this->papstrip_rank($t->tag);\n                }\n            }\n        }\n        $this->papstripWatch();\n        if ($this->user->can_view_conflicts($this->prow) && !$this->editable) {\n            $this->_print_ps_pc_conflicts();\n        }\n        if ($this->user->allow_view_authors($this->prow) && !$this->editable) {\n            $this->_print_ps_collaborators();\n        }\n        if ($this->user->can_set_decision($this->prow)) {\n            $this->papstripOutcomeSelector();\n        }\n        if ($this->user->can_view_lead($this->prow)) {\n            $this->papstripLead();\n        }\n        if ($this->user->can_view_shepherd($this->prow)) {\n            $this->papstripShepherd();\n        }\n        if ($this->user->can_edit_preference_for($this->user, $this->prow, true)\n            && $this->conf->timePCReviewPreferences()\n            && ($this->user->roles & (Contact::ROLE_PC | Contact::ROLE_CHAIR))) {\n            $this->papstripReviewPreference();\n        }\n    }\n\n    /** @param string $text\n     * @param string $imgfile\n     * @param string $url\n     * @param bool $active\n     * @param bool $nondisabled\n     * @return string */\n    private function _mode_nav_link($text, $imgfile, $url, $active, $nondisabled) {\n        $class1 = $active ? \" active\" : \"\";\n        $hl = $active ? \" class=\\\"x\\\"\" : \"\";\n        $img = Ht::img($imgfile, \"[{$text}]\", \"papmodeimg\");\n        if ($nondisabled) {\n            return \"<li class=\\\"papmode{$class1}\\\"><a href=\\\"{$url}\\\" class=\\\"noul\\\">{$img}&nbsp;<u{$hl}>{$text}</u></a></li>\";\n        } else {\n            return \"<li class=\\\"papmode{$class1}\\\"><a href=\\\"{$url}\\\" class=\\\"noul dim ui js-confirm-override-conflict\\\">{$img}&nbsp;<u class=\\\"x\\\">{$text}</u></a></li>\";\n        }\n    }\n\n    /** @return string */\n    private function _mode_nav() {\n        $tx = [];\n        if (($allow = $this->allow_edit()) || $this->allow_admin) {\n            $arg = [\"m\" => \"edit\", \"p\" => $this->prow->paperId];\n            if (!$allow\n                && $this->mode !== \"edit\"\n                && !$this->user->can_edit_paper($this->prow)\n                && !$this->prow->has_author($this->user)) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                \"Edit\", \"edit48.png\", $this->conf->hoturl(\"paper\", $arg),\n                $this->mode === \"edit\", $allow || isset($arg[\"forceShow\"])\n            );\n        }\n        if (($allow = $this->allow_review()) || $this->allow_admin) {\n            $arg = [\"p\" => $this->prow->paperId];\n            if (!$allow) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                \"Review\", \"review48.png\", $this->conf->hoturl(\"review\", $arg),\n                $this->mode === \"re\" && (!$this->editrrow || $this->user->is_my_review($this->editrrow)), $allow\n            );\n        }\n        if (($allow = $this->allow_assign()) || $this->allow_admin) {\n            $name = $this->allow_admin ? \"Assign\" : \"Invite\";\n            $arg = [\"p\" => $this->prow->paperId];\n            if (!$allow) {\n                $arg[\"forceShow\"] = 1;\n            }\n            $tx[] = $this->_mode_nav_link(\n                $name, \"assign48.png\", $this->conf->hoturl(\"assign\", $arg),\n                $this->mode === \"assign\", $allow\n            );\n        }\n        if (!empty($tx)\n            || $this->qreq->page() !== \"paper\"\n            || ($this->mode !== \"p\" && $this->prow->paperId > 0)) {\n            array_unshift($tx, $this->_mode_nav_link(\n                \"Main\", \"view48.png\",\n                $this->prow->hoturl([\"m\" => $this->paper_page_prefers_edit_mode() ? \"main\" : null]),\n                $this->mode === \"p\" && $this->qreq->page() === \"paper\", true\n            ));\n        }\n        if (!empty($tx)) {\n            return '<nav class=\"submission-modes\"><ul>' . join(\"\", $tx) . '</ul></nav>';\n        } else {\n            return \"\";\n        }\n    }\n\n    static private function _print_clickthrough($ctype) {\n        $data = Conf::$main->_id(\"clickthrough_{$ctype}\", \"\");\n        $buttons = [Ht::submit(\"Agree\", [\"class\" => \"btnbig btn-success ui js-clickthrough\"])];\n        echo Ht::form(\"\", [\"class\" => \"ui\"]), '<div>', $data,\n            Ht::hidden(\"clickthrough_type\", $ctype),\n            Ht::hidden(\"clickthrough_id\", sha1($data)),\n            Ht::hidden(\"clickthrough_time\", Conf::$now),\n            Ht::actions($buttons, [\"class\" => \"aab aabig aabr\"]), \"</div></form>\";\n    }\n\n    static function print_review_clickthrough() {\n        echo '<div class=\"pcard revcard js-clickthrough-terms\"><div class=\"revcard-head\"><h2>Reviewing terms</h2></div><div class=\"revcard-body\">', Ht::msg(\"You must agree to these terms before you can save reviews.\", 2);\n        self::_print_clickthrough(\"review\");\n        echo \"</div></div>\";\n    }\n\n    private function _print_editable_form() {\n        $form_url = [\n            \"p\" => $this->prow->paperId ? : \"new\", \"m\" => \"edit\"\n        ];\n        // This is normally added automatically, but isn't for new papers\n        if ($this->user->is_admin_force()) {\n            $form_url[\"forceShow\"] = 1;\n        }\n        $form_js = [\n            \"id\" => \"form-paper\",\n            \"class\" => \"need-unload-protection uich ui-submit js-submit-paper\",\n            \"data-alert-toggle\" => \"paper-alert\"\n        ];\n        if ($this->prow->timeSubmitted > 0) {\n            $form_js[\"data-submitted\"] = $this->prow->timeSubmitted;\n        }\n        if ($this->prow->paperId && !$this->editable) {\n            $form_js[\"data-contacts-only\"] = 1;\n        }\n        if ($this->useRequest) {\n            $form_js[\"class\"] .= \" alert\";\n        }\n        echo Ht::form($this->conf->hoturl(\"=paper\", $form_url), $form_js);\n        Ht::stash_script('$(hotcrp.load_editable_paper)');\n    }\n\n    private function _print_editable_body() {\n        $this->_print_editable_form();\n        $overrides = $this->user->add_overrides(Contact::OVERRIDE_EDIT_CONDITIONS);\n        echo '<div class=\"pedcard-head\"><h2><span class=\"pedcard-header-name\">',\n            $this->conf->_($this->prow->paperId ? \"Edit Submission\" : \"New Submission\"),\n            '</span></h2></div>';\n\n        $this->edit_fields = array_values(array_filter(\n            $this->prow->form_fields(),\n            function ($o) {\n                return $this->user->can_edit_option($this->prow, $o);\n            }\n        ));\n\n        $this->_print_pre_status_feedback();\n        $this->_print_edit_messages(true);\n\n        if (!$this->quit) {\n            foreach ($this->edit_fields as $o) {\n                $ov = $reqov = $this->prow->force_option($o);\n                if ($this->useRequest\n                    && $this->qreq[\"has_{$o->formid}\"]\n                    && ($x = $o->parse_qreq($this->prow, $this->qreq))) {\n                    $reqov = $x;\n                }\n                $o->print_web_edit($this, $ov, $reqov);\n            }\n\n            // Submit button\n            $this->print_editable_complete();\n            $this->print_actions();\n        }\n\n        echo \"</div></form>\";\n        $this->user->set_overrides($overrides);\n    }\n\n    function print_paper_info() {\n        if ($this->prow->paperId) {\n            $this->_papstrip();\n        }\n        if ($this->npapstrip) {\n            Ht::stash_script(\"hotcrp.prepare_editable_paper()\");\n            echo '</div></div><nav class=\"pslcard-nav\">';\n        } else {\n            echo '<article class=\"pcontainer\"><div class=\"pcard-left pcard-left-nostrip\"><nav class=\"pslcard-nav\">';\n        }\n        $viewable_tags = $this->prow->viewable_tags($this->user);\n        echo '<h4 class=\"pslcard-home\">';\n        if ($viewable_tags || $this->user->can_view_tags($this->prow)) {\n            $color = $this->prow->conf->tags()->color_classes($viewable_tags);\n            echo '<span class=\"pslcard-home-tag has-tag-classes taghh',\n                ($color ? \" $color\" : \"\"), '\">';\n            $close = '</span>';\n        } else {\n            $close = '';\n        }\n        echo '<a href=\"#top\" class=\"q\"><span class=\"header-site-name\">',\n            htmlspecialchars($this->conf->short_name), '</span> ';\n        if ($this->prow->paperId <= 0) {\n            echo \"new submission\";\n        } else if ($this->mode !== \"re\") {\n            echo \"#\", $this->prow->paperId;\n        } else if ($this->editrrow && $this->editrrow->reviewOrdinal) {\n            echo \"#\", $this->editrrow->unparse_ordinal_id();\n        } else {\n            echo \"#\", $this->prow->paperId, \" review\";\n        }\n        echo '</a>', $close, '</h4><ul class=\"pslcard\"></ul></nav></div>';\n\n        if ($this->allow_admin && $this->prow->paperId > 0) {\n            if (!$this->admin) {\n                echo '<div class=\"pcard notecard override-conflict off\"><p class=\"sd\">',\n                    '<a class=\"noul\" href=\"', $this->conf->selfurl($this->qreq, [\"forceShow\" => 1]), '\">',\n                    '\ud83d\udd12&nbsp;<u>Override conflict</u></a> for administrator view</p></div>';\n            } else if ($this->user->is_admin_force()\n                       && $this->prow->has_conflict($this->user)) {\n                $unprivurl = $this->mode === \"assign\"\n                    ? $this->conf->hoturl(\"paper\", [\"p\" => $this->prow->paperId, \"forceShow\" => null])\n                    : $this->conf->selfurl($this->qreq, [\"forceShow\" => null]);\n                echo '<div class=\"pcard notecard override-conflict on\"><p class=\"sd\">',\n                    '\ud83d\udd13 You are using administrator privilege to override your conflict with this submission. ',\n                    '<a class=\"noul ibw\" href=\"', $unprivurl, '\"><u>Unprivileged view</u></a>',\n                    '</p></div>';\n            }\n        }\n\n        echo '<div class=\"pcard papcard\">';\n        $this->conf->report_saved_messages();\n        if ($this->editable && !$this->user->can_clickthrough(\"submit\")) {\n            echo '<div id=\"foldpaper js-clickthrough-container\">',\n                '<div class=\"js-clickthrough-terms\">',\n                '<h2>Submission terms</h2>',\n                Ht::msg(\"You must agree to these terms to register a submission.\", 2);\n            self::_print_clickthrough(\"submit\");\n            echo '</div><div class=\"need-clickthrough-show hidden\">';\n            $this->_print_editable_body();\n            echo '</div></div>';\n        } else if ($this->editable) {\n            echo '<div id=\"foldpaper\">';\n            $this->_print_editable_body();\n            echo '</div>';\n        } else {\n            $this->_print_normal_body();\n        }\n        echo '</div>';\n\n        if (!$this->editable && $this->mode === \"edit\") {\n            echo '<div class=\"pcard papcard\">',\n                '<div class=\"pedcard-head\"><h2><span class=\"pedcard-header-name\">Edit Contacts</span></h2></div>';\n            $this->_print_edit_messages(false);\n            $this->_print_editable_form();\n            $o = $this->conf->option_by_id(PaperOption::CONTACTSID);\n            assert($o instanceof Contacts_PaperOption);\n            $ov = $reqov = $this->prow->force_option($o);\n            if ($this->useRequest\n                && $this->qreq[\"has_{$o->formid}\"]\n                && ($x = $o->parse_qreq($this->prow, $this->qreq))) {\n                $reqov = $x;\n            }\n            $o->print_web_edit($this, $ov, $reqov);\n            $this->print_actions();\n            echo '</form></div>';\n        }\n\n        if (!$this->editable\n            && $this->mode !== \"edit\"\n            && $this->user->act_author_view($this->prow)\n            && !$this->user->contactId) {\n            echo '<div class=\"pcard notecard\"><p class=\"sd\">',\n                \"To edit this submission, <a href=\\\"\", $this->conf->hoturl(\"signin\"), \"\\\">sign in using your email and password</a>.\",\n                '</p></div>';\n        }\n\n        Ht::stash_script(\"hotcrp.shortcut().add()\");\n    }\n\n    private function _paptabSepContaining($t) {\n        if ($t !== \"\") {\n            echo '<div class=\"pcard notecard\"><p class=\"sd\">', $t, '</p></div>';\n        }\n    }\n\n    /** @param ReviewInfo $rr\n     * @return string */\n    private function _review_table_actas($rr) {\n        if (!$rr->contactId || $rr->contactId === $this->user->contactId) {\n            return \"\";\n        } else {\n            return ' <a href=\"' . $this->conf->selfurl($this->qreq, [\"actas\" => $rr->email]) . '\">'\n                . Ht::img(\"viewas.png\", \"[Act as]\", [\"title\" => \"Act as \" . Text::nameo($rr, NAME_P)])\n                . \"</a>\";\n        }\n    }\n\n    /** @return string */\n    function review_table() {\n        $user = $this->user;\n        $prow = $this->prow;\n        $conf = $prow->conf;\n        $subrev = [];\n        $cflttype = $user->view_conflict_type($prow);\n        $allow_actas = $user->privChair && $user->allow_administer($prow);\n        $hideUnviewable = ($cflttype > 0 && !$this->admin)\n            || (!$user->act_pc($prow) && !$conf->setting(\"extrev_view\"));\n        $show_ratings = $user->can_view_review_ratings($prow);\n        $want_scores = !in_array($this->mode, [\"assign\", \"edit\", \"re\"]);\n        $want_requested_by = false;\n        $score_header = array_map(function ($x) { return \"\"; },\n                                  $conf->review_form()->forder);\n        $last_pc_reviewer = -1;\n\n        // actual rows\n        foreach ($this->all_rrows as $rr) {\n            $want_my_scores = $want_scores;\n            if ($user->is_owned_review($rr) && $this->mode === \"re\") {\n                $want_my_scores = true;\n            }\n            $canView = $user->can_view_review($prow, $rr);\n\n            // skip unsubmitted reviews;\n            // assign page lists actionable reviews separately\n            if (!$canView && $hideUnviewable) {\n                $last_pc_reviewer = -1;\n                continue;\n            }\n\n            $tclass = \"\";\n            $isdelegate = $rr->is_subreview() && $rr->requestedBy === $last_pc_reviewer;\n            if ($rr->reviewStatus < ReviewInfo::RS_COMPLETED && $isdelegate) {\n                $tclass .= ($tclass ? \" \" : \"\") . \"rldraft\";\n            }\n            if ($rr->reviewType >= REVIEW_PC) {\n                $last_pc_reviewer = +$rr->contactId;\n            }\n\n            // review ID\n            $id = $rr->subject_to_approval() ? \"Subreview\" : \"Review\";\n            if ($rr->reviewOrdinal && !$isdelegate) {\n                $id .= \" #\" . $rr->unparse_ordinal_id();\n            }\n            if ($rr->reviewStatus < ReviewInfo::RS_ADOPTED) {\n                $d = $rr->status_description();\n                if ($d === \"draft\") {\n                    $id = \"Draft \" . $id;\n                } else {\n                    $id .= \" (\" . $d . \")\";\n                }\n            }\n            $rlink = $rr->unparse_ordinal_id();\n\n            $t = '<td class=\"rl nw\">';\n            if (!$canView\n               || ($rr->reviewStatus < ReviewInfo::RS_DRAFTED && !$user->can_edit_review($prow, $rr))) {\n                $t .= $id;\n            } else {\n                if ((!$this->can_view_reviews\n                     || $rr->reviewStatus < ReviewInfo::RS_ADOPTED)\n                    && $user->can_edit_review($prow, $rr)) {\n                    $link = $prow->reviewurl([\"r\" => $rlink]);\n                } else if ($this->qreq->page() === \"paper\") {\n                    $link = \"#r$rlink\";\n                } else {\n                    $link = $prow->hoturl([\"#\" => \"r$rlink\"]);\n                }\n                $t .= '<a href=\"' . $link . '\">' . $id . '</a>';\n                if ($show_ratings\n                    && $user->can_view_review_ratings($prow, $rr)\n                    && ($ratings = $rr->ratings())) {\n                    $all = 0;\n                    foreach ($ratings as $r) {\n                        $all |= $r;\n                    }\n                    if ($all & 126) {\n                        $t .= \" &#x2691;\";\n                    } else if ($all & 1) {\n                        $t .= \" &#x2690;\";\n                    }\n                }\n            }\n            $t .= '</td>';\n\n            // primary/secondary glyph\n            $rtype = \"\";\n            if ($rr->reviewType > 0 && $user->can_view_review_meta($prow, $rr)) {\n                $rtype = $rr->icon_h() . $rr->round_h();\n            }\n\n            // reviewer identity\n            $showtoken = $rr->reviewToken && $user->can_edit_review($prow, $rr);\n            if (!$user->can_view_review_identity($prow, $rr)) {\n                $t .= ($rtype ? \"<td class=\\\"rl\\\">{$rtype}</td>\" : '<td></td>');\n            } else {\n                if (!$showtoken || !Contact::is_anonymous_email($rr->email)) {\n                    $n = $user->reviewer_html_for($rr);\n                } else {\n                    $n = \"[Token \" . encode_token((int) $rr->reviewToken) . \"]\";\n                }\n                if ($allow_actas) {\n                    $n .= $this->_review_table_actas($rr);\n                }\n                $t .= '<td class=\"rl\"><span class=\"taghl\" title=\"'\n                    . $rr->email . '\">' . $n . '</span>'\n                    . ($rtype ? \" $rtype\" : \"\") . \"</td>\";\n            }\n\n            // requester\n            if ($this->mode === \"assign\") {\n                if ($rr->reviewType < REVIEW_SECONDARY\n                    && !$showtoken\n                    && $rr->requestedBy\n                    && $rr->requestedBy !== $rr->contactId\n                    && $user->can_view_review_requester($prow, $rr)) {\n                    $t .= '<td class=\"rl small\">requested by ';\n                    if ($rr->requestedBy === $user->contactId) {\n                        $t .= \"you\";\n                    } else {\n                        $t .= $user->reviewer_html_for($rr->requestedBy);\n                    }\n                    $t .= '</td>';\n                    $want_requested_by = true;\n                } else {\n                    $t .= '<td></td>';\n                }\n            }\n\n            // scores\n            $scores = [];\n            if ($want_my_scores && $canView) {\n                $view_score = $user->view_score_bound($prow, $rr);\n                foreach ($conf->review_form()->forder as $f) {\n                    if ($f instanceof Score_ReviewField\n                        && $f->view_score > $view_score\n                        && $rr->has_nonempty_field($f)) {\n                        if ($score_header[$f->short_id] === \"\") {\n                            $score_header[$f->short_id] = '<th class=\"rlscore\">' . $f->web_abbreviation() . \"</th>\";\n                        }\n                        $scores[$f->short_id] = '<td class=\"rlscore need-tooltip\" data-rf=\"' . $f->uid() . '\" data-tooltip-info=\"rf-score\">'\n                            . $f->value_unparse($rr->fields[$f->order], ReviewField::VALUE_SC)\n                            . '</td>';\n                    }\n                }\n            }\n\n            // affix\n            $subrev[] = [$tclass, $t, $scores];\n        }\n\n        // completion\n        if (!empty($subrev)) {\n            if ($want_requested_by) {\n                array_unshift($score_header, '<th class=\"rl\"></th>');\n            }\n            $score_header_text = join(\"\", $score_header);\n            $t = \"<div class=\\\"reinfotable-container demargin\\\"><div class=\\\"reinfotable remargin-left remargin-right relative\\\"><table class=\\\"reviewers nw\";\n            if ($score_header_text) {\n                $t .= \" has-scores\";\n            }\n            $t .= \"\\\">\";\n            $nscores = 0;\n            if ($score_header_text) {\n                foreach ($score_header as $x) {\n                    $nscores += $x !== \"\" ? 1 : 0;\n                }\n                $t .= '<thead><tr><th colspan=\"2\"></th>';\n                if ($this->mode === \"assign\" && !$want_requested_by) {\n                    $t .= '<th></th>';\n                }\n                $t .= $score_header_text . \"</tr></thead>\";\n            }\n            $t .= '<tbody>';\n            foreach ($subrev as $r) {\n                $t .= '<tr class=\"rl' . ($r[0] ? \" $r[0]\" : \"\") . '\">' . $r[1];\n                if ($r[2] ?? null) {\n                    foreach ($score_header as $fid => $header_needed) {\n                        if ($header_needed !== \"\") {\n                            $x = $r[2][$fid] ?? null;\n                            $t .= $x ? : \"<td class=\\\"rlscore rs_$fid\\\"></td>\";\n                        }\n                    }\n                } else if ($nscores > 0) {\n                    $t .= '<td colspan=\"' . $nscores . '\"></td>';\n                }\n                $t .= \"</tr>\";\n            }\n            return $t . \"</tbody></table></div></div>\\n\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /** @return string */\n    private function _review_links() {\n        $prow = $this->prow;\n        $cflttype = $this->user->view_conflict_type($prow);\n        $any_comments = false;\n\n        $nvisible = 0;\n        $myrr = null;\n        foreach ($this->all_rrows as $rr) {\n            if ($this->user->can_view_review($prow, $rr)) {\n                $nvisible++;\n            }\n            if ($rr->contactId == $this->user->contactId\n                || (!$myrr && $this->user->is_my_review($rr))) {\n                $myrr = $rr;\n            }\n        }\n\n        // comments\n        $pret = \"\";\n        if ($this->mycrows\n            && $this->mode !== \"edit\") {\n            $tagger = new Tagger($this->user);\n            $viewable_crows = [];\n            foreach ($this->mycrows as $cr) {\n                if ($this->user->can_view_comment($cr->prow, $cr)) {\n                    $viewable_crows[] = $cr;\n                }\n            }\n            $cxs = CommentInfo::group_by_identity($viewable_crows, $this->user, true);\n            if (!empty($cxs)) {\n                $count = array_reduce($cxs, function ($n, $cx) { return $n + $cx[1]; }, 0);\n                $cnames = array_map(function ($cx) {\n                    $tclass = \"cmtlink\";\n                    if (($tags = $cx[0]->viewable_tags($this->user))\n                        && ($color = $cx[0]->conf->tags()->color_classes($tags))) {\n                        $tclass .= \" $color taghh\";\n                    }\n                    $cid = $cx[0]->unparse_html_id();\n                    return \"<span class=\\\"nb\\\"><a class=\\\"{$tclass} track\\\" href=\\\"#{$cid}\\\">\"\n                        . $cx[0]->unparse_commenter_html($this->user)\n                        . \"</a>\"\n                        . ($cx[1] > 1 ? \" ({$cx[1]})\" : \"\")\n                        . $cx[2] . \"</span>\";\n                }, $cxs);\n                $first_cid = $cxs[0][0]->unparse_html_id();\n                $pret = '<div class=\"revnotes\"><a class=\"track\" href=\"#' . $first_cid . '\"><strong>'\n                    . plural($count, \"Comment\") . '</strong></a>: '\n                    . join(\" \", $cnames) . '</div>';\n                $any_comments = true;\n            }\n        }\n\n        $t = [];\n        $dlimgjs = [\"class\" => \"dlimg\", \"width\" => 24, \"height\" => 24];\n\n        // see all reviews\n        $this->allreviewslink = false;\n        if (($nvisible > 1 || ($nvisible > 0 && !$myrr))\n            && $this->mode !== \"p\") {\n            $this->allreviewslink = true;\n            $t[] = '<a href=\"' . $prow->hoturl() . '\" class=\"noul revlink\">'\n                . Ht::img(\"view48.png\", \"[All reviews]\", $dlimgjs) . \"&nbsp;<u>All reviews</u></a>\";\n        }\n\n        // edit paper\n        if ($this->mode !== \"edit\"\n            && $prow->has_author($this->user)\n            && !$this->user->can_administer($prow)) {\n            $t[] = '<a href=\"' . $prow->hoturl([\"m\" => \"edit\"]) . '\" class=\"noul revlink\">'\n                . Ht::img(\"edit48.png\", \"[Edit]\", $dlimgjs) . \"&nbsp;<u><strong>Edit submission</strong></u></a>\";\n        }\n\n        // edit review\n        if ($this->mode === \"re\"\n            || ($this->mode === \"assign\" && !empty($t))\n            || !$prow) {\n            /* no link */;\n        } else if ($myrr) {\n            $a = '<a href=\"' . $prow->reviewurl([\"r\" => $myrr->unparse_ordinal_id()]) . '\" class=\"noul revlink\">';\n            if ($this->user->can_edit_review($prow, $myrr)) {\n                $x = $a . Ht::img(\"review48.png\", \"[Edit review]\", $dlimgjs) . \"&nbsp;<u><b>Edit your review</b></u></a>\";\n            } else {\n                $x = $a . Ht::img(\"review48.png\", \"[Your review]\", $dlimgjs) . \"&nbsp;<u><b>Your review</b></u></a>\";\n            }\n            $t[] = $x;\n        } else if ($this->user->can_edit_some_review($prow)) {\n            $t[] = '<a href=\"' . $prow->reviewurl([\"m\" => \"re\"]) . '\" class=\"noul revlink\">'\n                . Ht::img(\"review48.png\", \"[Write review]\", $dlimgjs) . \"&nbsp;<u><b>Write review</b></u></a>\";\n        }\n\n        // review assignments\n        if ($this->mode !== \"assign\"\n            && $this->mode !== \"edit\"\n            && $this->user->can_request_review($prow, null, true)) {\n            $t[] = '<a href=\"' . $this->conf->hoturl(\"assign\", \"p=$prow->paperId\") . '\" class=\"noul revlink\">'\n                . Ht::img(\"assign48.png\", \"[Assign]\", $dlimgjs) . \"&nbsp;<u>\" . ($this->admin ? \"Assign reviews\" : \"External reviews\") . \"</u></a>\";\n        }\n\n        // new comment\n        $nocmt = in_array($this->mode, [\"assign\", \"contact\", \"edit\", \"re\"]);\n        if (!$this->allreviewslink\n            && !$nocmt\n            && $this->user->add_comment_state($prow) !== 0) {\n            $img = Ht::img(\"comment48.png\", \"[Add comment]\", $dlimgjs);\n            $t[] = \"<a class=\\\"uic js-edit-comment noul revlink\\\" href=\\\"#cnew\\\">{$img} <u>Add comment</u></a>\";\n            $any_comments = true;\n        }\n\n        // new response\n        if (!$nocmt\n            && ($prow->has_author($this->user) || $this->allow_admin)\n            && $this->conf->any_response_open) {\n            foreach ($this->conf->response_rounds() as $rrd) {\n                $cr = $this->response_by_id($rrd->id)\n                    ?? CommentInfo::make_response_template($rrd, $prow);\n                if ($this->user->can_edit_response($prow, $cr)) {\n                    if ($cr->commentId) {\n                        $what = $cr->commentType & CommentInfo::CT_DRAFT ? \"Edit draft\" : \"Edit\";\n                    } else {\n                        $what = \"Add\";\n                    }\n                    $title_prefix = $rrd->unnamed ? \"\" : \"{$rrd->name} \";\n                    $img = Ht::img(\"comment48.png\", \"[{$what} response]\", $dlimgjs);\n                    $uk = $cflttype >= CONFLICT_AUTHOR ? ' class=\"font-weight-bold\"' : '';\n                    $cid = $cr->unparse_html_id();\n                    $t[] = \"<a class=\\\"uic js-edit-comment noul revlink\\\" href=\\\"#{$cid}\\\">{$img} <u{$uk}>{$what} {$title_prefix}response</u></a>\";\n                    $any_comments = true;\n                }\n            }\n        }\n\n        // override conflict\n        if ($this->user->privChair && !$this->allow_admin) {\n            $t[] = '<span class=\"revlink\">You can\u2019t override your conflict because this submission has an administrator.</span>';\n        }\n\n        $aut = \"\";\n        if ($prow->has_author($this->user)) {\n            if ($prow->author_by_email($this->user->email)) {\n                $aut = $this->conf->_('You are an <span class=\"author\">author</span> of this submission.');\n            } else {\n                $aut = $this->conf->_('You are a <span class=\"author\">contact</span> for this submission.');\n            }\n        } else if ($prow->has_conflict($this->user)) {\n            $aut = $this->conf->_('You have a <span class=\"conflict\">conflict</span> with this submission.');\n        }\n        return $pret\n            . ($aut ? \"<p class=\\\"sd\\\">{$aut}</p>\" : \"\")\n            . ($any_comments ? CommentInfo::script($prow) : \"\")\n            . (empty($t) ? \"\" : '<p class=\"sd\">' . join(\"\", $t) . '</p>');\n    }\n\n    private function _review_overview_card($rtable, $ifempty, $msgs) {\n        $t = \"\";\n        if ($rtable) {\n            $t .= $this->review_table();\n        }\n        $t .= $this->_review_links();\n        if (($empty = ($t === \"\"))) {\n            $t = $ifempty;\n        }\n        if ($msgs) {\n            $t .= join(\"\", $msgs);\n        }\n        if ($t) {\n            echo '<div class=\"pcard notecard\">', $t, '</div>';\n        }\n        return $empty;\n    }\n\n    private function include_comments() {\n        return !$this->allreviewslink\n            && (!empty($this->mycrows)\n                || $this->user->add_comment_state($this->prow) !== 0\n                || $this->conf->any_response_open);\n    }\n\n    function paptabEndWithReviewsAndComments() {\n        if ($this->prow->managerContactId === $this->user->contactXid\n            && !$this->user->privChair) {\n            $this->_paptabSepContaining(\"You are this submission\u2019s administrator.\");\n        }\n\n        // text format link\n        $m = $viewable = [];\n        foreach ($this->viewable_rrows as $rr) {\n            if ($rr->reviewStatus >= ReviewInfo::RS_DRAFTED) {\n                $viewable[] = \"reviews\";\n                break;\n            }\n        }\n        foreach ($this->crows as $cr) {\n            if ($this->user->can_view_comment($this->prow, $cr)) {\n                $viewable[] = \"comments\";\n                break;\n            }\n        }\n        if (!empty($viewable)) {\n            $m[] = '<p class=\"sd mt-5\"><a href=\"' . $this->prow->reviewurl([\"m\" => \"r\", \"text\" => 1]) . '\" class=\"noul\">'\n                . Ht::img(\"txt24.png\", \"[Text]\", \"dlimg\")\n                . \"&nbsp;<u>\" . ucfirst(join(\" and \", $viewable))\n                . \" in plain text</u></a></p>\";\n        }\n\n        if (!$this->_review_overview_card(true, '<p class=\"sd\">There are no reviews or comments for you to view.</p>', $m)) {\n            $this->print_rc($this->viewable_rrows, $this->include_comments());\n        }\n    }\n\n    /** @param int $respround\n     * @return ?CommentInfo */\n    private function response_by_id($respround) {\n        foreach ($this->mycrows as $cr) {\n            if (($cr->commentType & CommentInfo::CT_RESPONSE)\n                && $cr->commentRound == $respround)\n                return $cr;\n        }\n        return null;\n    }\n\n    /** @param list<ReviewInfo> $rrows\n     * @param bool $comments */\n    function print_rc($rrows, $comments) {\n        $rcs = [];\n        $any_submitted = false;\n        foreach ($rrows as $rrow) {\n            if ($rrow->reviewStatus >= ReviewInfo::RS_DRAFTED) {\n                $rcs[] = $rrow;\n                $any_submitted = $any_submitted || $rrow->reviewStatus >= ReviewInfo::RS_COMPLETED;\n            }\n        }\n        if ($comments && $this->mycrows) {\n            $rcs = $this->prow->merge_reviews_and_comments($rcs, $this->mycrows);\n        }\n\n        $s = \"\";\n        $ncmt = 0;\n        $rf = $this->conf->review_form();\n        foreach ($rcs as $rc) {\n            if (isset($rc->reviewId)) {\n                $rcj = $rf->unparse_review_json($this->user, $this->prow, $rc);\n                if (($any_submitted || $rc->reviewStatus === ReviewInfo::RS_ADOPTED)\n                    && $rc->reviewStatus < ReviewInfo::RS_COMPLETED\n                    && !$this->user->is_my_review($rc)) {\n                    $rcj->folded = true;\n                }\n                $s .= \"hotcrp.add_review(\" . json_encode_browser($rcj) . \");\\n\";\n            } else {\n                ++$ncmt;\n                $rcj = $rc->unparse_json($this->user);\n                $s .= \"hotcrp.add_comment(\" . json_encode_browser($rcj) . \");\\n\";\n            }\n        }\n\n        if ($comments) {\n            $cs = [];\n            if (($crow = CommentInfo::make_new_template($this->user, $this->prow))\n                && $crow->commentType !== 0) {\n                $cs[] = $crow;\n            }\n            if ($this->admin || $this->prow->has_author($this->user)) {\n                foreach ($this->conf->response_rounds() as $rrd) {\n                    if (!$this->response_by_id($rrd->id)\n                        && $rrd->relevant($this->user, $this->prow)) {\n                        $crow = CommentInfo::make_response_template($rrd, $this->prow);\n                        if ($this->user->can_edit_response($this->prow, $crow)) {\n                            $cs[] = $crow;\n                        }\n                    }\n                }\n            }\n            foreach ($cs as $crow) {\n                ++$ncmt;\n                $s .= \"hotcrp.add_comment(\" . json_encode_browser($crow->unparse_json($this->user)) . \");\\n\";\n            }\n        }\n\n        if ($ncmt) {\n            CommentInfo::print_script($this->prow);\n        }\n        if ($s !== \"\") {\n            echo Ht::unstash_script($s);\n        }\n    }\n\n    function print_comments() {\n        $this->print_rc([], $this->include_comments());\n    }\n\n    function paptabEndWithoutReviews() {\n        echo \"</div></div>\\n\";\n    }\n\n    function paptabEndWithReviewMessage() {\n        assert(!$this->editable);\n\n        $m = [];\n        if ($this->all_rrows\n            && ($whyNot = $this->user->perm_view_review($this->prow, null))) {\n            $m[] = \"<p class=\\\"sd\\\">You can\u2019t see the reviews for this submission. \" . $whyNot->unparse_html() . \"</p>\";\n        }\n        if (!$this->conf->time_review_open()\n            && $this->prow->review_type($this->user)) {\n            if ($this->rrow) {\n                $m[] = \"<p class=\\\"sd\\\">You can\u2019t edit your review because the site is not open for reviewing.</p>\";\n            } else {\n                $m[] = \"<p class=\\\"sd\\\">You can\u2019t begin your assigned review because the site is not open for reviewing.</p>\";\n            }\n        }\n\n        $this->_review_overview_card($this->user->can_view_review_assignment($this->prow, null), \"\", $m);\n    }\n\n    /** @param bool $editable\n     * @return bool */\n    private function _mark_review_messages($editable, ReviewInfo $rrow) {\n        if (($this->user->is_owned_review($rrow) || $this->admin)\n            && !$this->conf->time_review($rrow->reviewRound, $rrow->reviewType, true)) {\n            if ($this->conf->time_review_open()) {\n                $t = 'The <a href=\"' . $this->conf->hoturl(\"deadlines\") . '\">review deadline</a> has passed, so the review can no longer be changed.';\n            } else {\n                $t = \"The site is not open for reviewing, so the review cannot be changed.\";\n            }\n            if (!$this->admin) {\n                $rrow->message_list[] = new MessageItem(null, $t, MessageSet::URGENT_NOTE);\n                return false;\n            } else {\n                $rrow->message_list[] = new MessageItem(null, \"{$t} As an administrator, you can override this deadline.\", MessageSet::WARNING);\n            }\n        } else if (!$this->user->can_edit_review($this->prow, $rrow)) {\n            return false;\n        }\n\n        // administrator?\n        if (!$this->user->is_my_review($rrow)) {\n            if ($this->user->is_owned_review($rrow)) {\n                $rrow->message_list[] = new MessageItem(null, \"This isn\u2019t your review, but you can make changes since you requested it.\", MessageSet::MARKED_NOTE);\n            } else if ($this->admin) {\n                $rrow->message_list[] = new MessageItem(null, \"This isn\u2019t your review, but as an administrator you can still make changes.\", MessageSet::MARKED_NOTE);\n            }\n        }\n\n        // delegate?\n        if (!$rrow->reviewSubmitted\n            && $rrow->contactId == $this->user->contactId\n            && $rrow->reviewType == REVIEW_SECONDARY\n            && $this->conf->ext_subreviews < 3) {\n            $ndelegated = 0;\n            $napproval = 0;\n            foreach ($this->prow->all_reviews() as $rr) {\n                if ($rr->reviewType === REVIEW_EXTERNAL\n                    && $rr->requestedBy === $rrow->contactId) {\n                    ++$ndelegated;\n                    if ($rr->reviewStatus === ReviewInfo::RS_DELIVERED) {\n                        ++$napproval;\n                    }\n                }\n            }\n\n            if ($ndelegated == 0) {\n                $t = \"As a secondary reviewer, you can <a href=\\\"\" . $this->conf->hoturl(\"assign\", \"p=$rrow->paperId\") . \"\\\">delegate this review to an external reviewer</a>, but if your external reviewer declines to review the paper, you should complete this review yourself.\";\n            } else if ($rrow->reviewNeedsSubmit == 0) {\n                $t = \"A delegated external reviewer has submitted their review, but you can still complete your own if you\u2019d like.\";\n            } else if ($napproval) {\n                $t = \"A delegated external reviewer has submitted their review for approval. If you approve that review, you won\u2019t need to submit your own.\";\n            } else {\n                $t = \"Your delegated external reviewer has not yet submitted a review.  If they do not, you should complete this review yourself.\";\n            }\n            $rrow->message_list[] = new MessageItem(null, $t, MessageSet::MARKED_NOTE);\n        }\n\n        return $editable;\n    }\n\n    function print_review_form() {\n        $editable = $this->mode === \"re\";\n        if ($this->editrrow) {\n            $editable = $this->_mark_review_messages($editable, $this->editrrow);\n        }\n        if ($editable) {\n            if (!$this->user->can_clickthrough(\"review\", $this->prow)) {\n                self::print_review_clickthrough();\n            }\n            $this->conf->review_form()->print_form($this->prow, $this->editrrow, $this->user, $this->review_values);\n        } else {\n            $this->print_rc([$this->editrrow], false);\n        }\n    }\n\n    function print_main_link() {\n        // intended for pages like review editing where we need a link back\n        $title = count($this->viewable_rrows) > 1 ? \"All reviews\" : \"Main\";\n        echo '<div class=\"pcard notecard\"><p class=\"sd\">',\n            '<a href=\"', $this->prow->hoturl([\"m\" => $this->paper_page_prefers_edit_mode() ? \"main\" : null]), '\" class=\"noul revlink\">',\n            Ht::img(\"view48.png\", \"[{$title}]\", [\"class\" => \"dlimg\", \"width\" => 24, \"height\" => 24]) . \"&nbsp;<u>{$title}</u></a>\",\n            \"</p></div>\\n\";\n    }\n\n\n    /** @param bool $want_review\n     * @suppress PhanAccessReadOnlyProperty */\n    function resolve_review($want_review) {\n        $this->prow->ensure_full_reviews();\n        $this->all_rrows = $this->prow->reviews_as_display();\n        $this->viewable_rrows = [];\n        $rf = $this->conf->review_form();\n        $unresolved_fields = $rf->all_fields();\n        foreach ($this->all_rrows as $rrow) {\n            if ($this->user->can_view_review($this->prow, $rrow)) {\n                $this->viewable_rrows[] = $rrow;\n                if (!empty($unresolved_fields)) {\n                    $bound = $this->user->view_score_bound($this->prow, $rrow);\n                    $this_resolved_fields = [];\n                    foreach ($unresolved_fields as $f) {\n                        if ($f->view_score > $bound && $rrow->has_nonempty_field($f))\n                            $this_resolved_fields[] = $f;\n                    }\n                    foreach ($this_resolved_fields as $f) {\n                        unset($unresolved_fields[$f->short_id]);\n                    }\n                }\n            }\n        }\n        $fj = [];\n        foreach (array_diff_key($rf->all_fields(), $unresolved_fields) as $f) {\n            $fj[] = $f->unparse_json(ReviewField::UJ_EXPORT);\n        }\n        Ht::stash_script(\"hotcrp.set_review_form(\" . json_encode_browser($fj) . \")\");\n\n        $this->rrow = $this->prow->review_by_ordinal_id((string) $this->qreq->reviewId);\n\n        $myrrow = $approvable_rrow = null;\n        foreach ($this->viewable_rrows as $rrow) {\n            if ($rrow->contactId === $this->user->contactId\n                || (!$myrrow && $this->user->is_my_review($rrow))) {\n                $myrrow = $rrow;\n            }\n            if (($rrow->requestedBy === $this->user->contactId || $this->admin)\n                && $rrow->reviewStatus === ReviewInfo::RS_DELIVERED\n                && !$approvable_rrow) {\n                $approvable_rrow = $rrow;\n            }\n        }\n\n        if ($this->rrow) {\n            $this->editrrow = $this->rrow;\n        } else if (!$approvable_rrow\n                   || ($myrrow\n                       && $myrrow->reviewStatus !== 0\n                       && !$this->prefer_approvable)) {\n            $this->editrrow = $myrrow;\n        } else {\n            $this->editrrow = $approvable_rrow;\n        }\n\n        if ($want_review\n            && ($this->editrrow\n                ? $this->user->can_edit_review($this->prow, $this->editrrow, false)\n                : $this->user->can_create_review($this->prow))) {\n            $this->mode = \"re\";\n        }\n\n        // fix mode\n        if ($this->mode === \"re\"\n            && $this->rrow\n            && !$this->user->can_edit_review($this->prow, $this->rrow, false)\n            && ($this->rrow->contactId != $this->user->contactId\n                || $this->rrow->reviewStatus >= ReviewInfo::RS_COMPLETED)) {\n            $this->mode = \"p\";\n        }\n        if ($this->mode === \"p\"\n            && $this->rrow\n            && !$this->user->can_view_review($this->prow, $this->rrow)) {\n            $this->rrow = $this->editrrow = null;\n        }\n        if ($this->mode === \"p\"\n            && $this->prow->paperId\n            && empty($this->viewable_rrows)\n            && empty($this->mycrows)\n            && !$this->allow_admin\n            && $this->qreq->page() === \"paper\"\n            && ($this->allow_admin || $this->allow_edit())\n            && ($this->conf->time_finalize_paper($this->prow)\n                || $this->prow->timeSubmitted <= 0)) {\n            $this->mode = \"edit\";\n        }\n    }\n\n    function resolve_comments() {\n        $this->crows = $this->prow->all_comments();\n        $this->mycrows = $this->prow->viewable_comments($this->user, true);\n    }\n\n    /** @return list<ReviewInfo> */\n    function all_reviews() {\n        return $this->all_rrows;\n    }\n}\n\nclass PaperTableFieldRender {\n    /** @var PaperOption */\n    public $option;\n    /** @var int */\n    public $view_state;\n    public $title;\n    public $value;\n    /** @var ?bool */\n    public $value_long;\n\n    /** @param PaperOption $option */\n    function __construct($option, $view_state, FieldRender $fr) {\n        $this->option = $option;\n        $this->view_state = $view_state;\n        $this->title = $fr->title;\n        $this->value = $fr->value;\n        $this->value_long = $fr->value_long;\n    }\n}\n"], "filenames": ["src/api/api_decision.php", "src/assigners/a_decision.php", "src/decisioninfo.php", "src/help/h_keywords.php", "src/listactions/la_decide.php", "src/mailrecipients.php", "src/papertable.php"], "buggy_code_start_loc": [21, 112, 54, 201, 12, 150, 1550], "buggy_code_end_loc": [22, 113, 54, 202, 13, 151, 1557], "fixing_code_start_loc": [21, 112, 55, 201, 12, 150, 1550], "fixing_code_end_loc": [22, 113, 61, 202, 13, 151, 1557], "type": "CWE-79", "message": "A vulnerability was found in HotCRP. It has been rated as problematic. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is d4ffdb0ef806453c54ddca7fdda3e5c60356285c. It is recommended to apply a patch to fix this issue. VDB-216998 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4819", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-28T21:15:10.603", "lastModified": "2023-01-06T02:23:37.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in HotCRP. It has been rated as problematic. Affected by this issue is some unknown functionality. The manipulation leads to cross site scripting. The attack may be launched remotely. The name of the patch is d4ffdb0ef806453c54ddca7fdda3e5c60356285c. It is recommended to apply a patch to fix this issue. VDB-216998 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.4, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hotcrp:hotcrp:-:*:*:*:*:*:*:*", "matchCriteriaId": "BDC75653-A50A-4060-B2DA-CB0873855F74"}]}]}], "references": [{"url": "https://github.com/kohler/hotcrp/commit/d4ffdb0ef806453c54ddca7fdda3e5c60356285c", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216998", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216998", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kohler/hotcrp/commit/d4ffdb0ef806453c54ddca7fdda3e5c60356285c"}}