{"buggy_code": ["const fs = require('fs');\nconst path = require('path');\n\nconst Errors = {\n  ATTACHMENT_NOT_FOUND: {\n    attachmentNotFound: 'Attachment not found',\n  },\n};\n\nmodule.exports = {\n  inputs: {\n    id: {\n      type: 'string',\n      regex: /^[0-9]+$/,\n      required: true,\n    },\n    filename: {\n      type: 'string',\n      required: true,\n    },\n  },\n\n  exits: {\n    attachmentNotFound: {\n      responseType: 'notFound',\n    },\n  },\n\n  async fn(inputs, exits) {\n    const { currentUser } = this.req;\n\n    const { attachment, card, project } = await sails.helpers.attachments\n      .getProjectPath(inputs.id)\n      .intercept('pathNotFound', () => Errors.ATTACHMENT_NOT_FOUND);\n\n    const isBoardMember = await sails.helpers.users.isBoardMember(currentUser.id, card.boardId);\n\n    if (!isBoardMember) {\n      const isProjectManager = await sails.helpers.users.isProjectManager(\n        currentUser.id,\n        project.id,\n      );\n\n      if (!isProjectManager) {\n        throw Errors.ATTACHMENT_NOT_FOUND; // Forbidden\n      }\n    }\n\n    if (!attachment.image) {\n      throw Errors.ATTACHMENT_NOT_FOUND;\n    }\n\n    const filePath = path.join(\n      sails.config.custom.attachmentsPath,\n      attachment.dirname,\n      'thumbnails',\n      inputs.filename,\n    );\n\n    if (!fs.existsSync(filePath)) {\n      throw Errors.ATTACHMENT_NOT_FOUND;\n    }\n\n    this.res.type(attachment.filename);\n    this.res.set('Cache-Control', 'private, max-age=900'); // TODO: move to config\n\n    return exits.success(fs.createReadStream(filePath));\n  },\n};\n", "/**\n * Route Mappings\n * (sails.config.routes)\n *\n * Your routes tell Sails what to do each time it receives a request.\n *\n * For more information on configuring custom routes, check out:\n * https://sailsjs.com/anatomy/config/routes-js\n */\n\nmodule.exports.routes = {\n  'POST /api/access-tokens': 'access-tokens/create',\n\n  'GET /api/users': 'users/index',\n  'POST /api/users': 'users/create',\n  'GET /api/users/:id': 'users/show',\n  'PATCH /api/users/:id': 'users/update',\n  'PATCH /api/users/:id/email': 'users/update-email',\n  'PATCH /api/users/:id/password': 'users/update-password',\n  'PATCH /api/users/:id/username': 'users/update-username',\n  'POST /api/users/:id/avatar': 'users/update-avatar',\n  'DELETE /api/users/:id': 'users/delete',\n\n  'GET /api/projects': 'projects/index',\n  'POST /api/projects': 'projects/create',\n  'GET /api/projects/:id': 'projects/show',\n  'PATCH /api/projects/:id': 'projects/update',\n  'POST /api/projects/:id/background-image': 'projects/update-background-image',\n  'DELETE /api/projects/:id': 'projects/delete',\n\n  'POST /api/projects/:projectId/managers': 'project-managers/create',\n  'DELETE /api/project-managers/:id': 'project-managers/delete',\n\n  'POST /api/projects/:projectId/boards': 'boards/create',\n  'GET /api/boards/:id': 'boards/show',\n  'PATCH /api/boards/:id': 'boards/update',\n  'DELETE /api/boards/:id': 'boards/delete',\n\n  'POST /api/boards/:boardId/memberships': 'board-memberships/create',\n  'DELETE /api/board-memberships/:id': 'board-memberships/delete',\n\n  'POST /api/boards/:boardId/labels': 'labels/create',\n  'PATCH /api/labels/:id': 'labels/update',\n  'DELETE /api/labels/:id': 'labels/delete',\n\n  'POST /api/boards/:boardId/lists': 'lists/create',\n  'PATCH /api/lists/:id': 'lists/update',\n  'DELETE /api/lists/:id': 'lists/delete',\n\n  'GET /api/boards/:boardId/cards': 'cards/index',\n  'POST /api/boards/:boardId/cards': 'cards/create',\n  'GET /api/cards/:id': 'cards/show',\n  'PATCH /api/cards/:id': 'cards/update',\n  'DELETE /api/cards/:id': 'cards/delete',\n  'POST /api/cards/:cardId/memberships': 'card-memberships/create',\n  'DELETE /api/cards/:cardId/memberships': 'card-memberships/delete',\n  'POST /api/cards/:cardId/labels': 'card-labels/create',\n  'DELETE /api/cards/:cardId/labels/:labelId': 'card-labels/delete',\n\n  'POST /api/cards/:cardId/tasks': 'tasks/create',\n  'PATCH /api/tasks/:id': 'tasks/update',\n  'DELETE /api/tasks/:id': 'tasks/delete',\n\n  'POST /api/cards/:cardId/attachments': 'attachments/create',\n  'PATCH /api/attachments/:id': 'attachments/update',\n  'DELETE /api/attachments/:id': 'attachments/delete',\n\n  'GET /api/cards/:cardId/actions': 'actions/index',\n\n  'POST /api/cards/:cardId/comment-actions': 'comment-actions/create',\n  'PATCH /api/comment-actions/:id': 'comment-actions/update',\n  'DELETE /api/comment-actions/:id': 'comment-actions/delete',\n\n  'GET /api/notifications': 'notifications/index',\n  'GET /api/notifications/:id': 'notifications/show',\n  'PATCH /api/notifications/:ids': 'notifications/update',\n\n  'GET /attachments/:id/download/:filename': {\n    action: 'attachments/download',\n    skipAssets: false,\n  },\n\n  'GET /attachments/:id/download/thumbnails/:filename': {\n    action: 'attachments/download-thumbnail',\n    skipAssets: false,\n  },\n\n  'GET /*': {\n    view: 'index',\n    skipAssets: true,\n  },\n};\n"], "fixing_code": ["const fs = require('fs');\nconst path = require('path');\n\nconst Errors = {\n  ATTACHMENT_NOT_FOUND: {\n    attachmentNotFound: 'Attachment not found',\n  },\n};\n\nmodule.exports = {\n  inputs: {\n    id: {\n      type: 'string',\n      regex: /^[0-9]+$/,\n      required: true,\n    },\n  },\n\n  exits: {\n    attachmentNotFound: {\n      responseType: 'notFound',\n    },\n  },\n\n  async fn(inputs, exits) {\n    const { currentUser } = this.req;\n\n    const { attachment, card, project } = await sails.helpers.attachments\n      .getProjectPath(inputs.id)\n      .intercept('pathNotFound', () => Errors.ATTACHMENT_NOT_FOUND);\n\n    const isBoardMember = await sails.helpers.users.isBoardMember(currentUser.id, card.boardId);\n\n    if (!isBoardMember) {\n      const isProjectManager = await sails.helpers.users.isProjectManager(\n        currentUser.id,\n        project.id,\n      );\n\n      if (!isProjectManager) {\n        throw Errors.ATTACHMENT_NOT_FOUND; // Forbidden\n      }\n    }\n\n    if (!attachment.image) {\n      throw Errors.ATTACHMENT_NOT_FOUND;\n    }\n\n    const filePath = path.join(\n      sails.config.custom.attachmentsPath,\n      attachment.dirname,\n      'thumbnails',\n      'cover-256.jpg',\n    );\n\n    if (!fs.existsSync(filePath)) {\n      throw Errors.ATTACHMENT_NOT_FOUND;\n    }\n\n    this.res.type('image/jpeg');\n    this.res.set('Cache-Control', 'private, max-age=900'); // TODO: move to config\n\n    return exits.success(fs.createReadStream(filePath));\n  },\n};\n", "/**\n * Route Mappings\n * (sails.config.routes)\n *\n * Your routes tell Sails what to do each time it receives a request.\n *\n * For more information on configuring custom routes, check out:\n * https://sailsjs.com/anatomy/config/routes-js\n */\n\nmodule.exports.routes = {\n  'POST /api/access-tokens': 'access-tokens/create',\n\n  'GET /api/users': 'users/index',\n  'POST /api/users': 'users/create',\n  'GET /api/users/:id': 'users/show',\n  'PATCH /api/users/:id': 'users/update',\n  'PATCH /api/users/:id/email': 'users/update-email',\n  'PATCH /api/users/:id/password': 'users/update-password',\n  'PATCH /api/users/:id/username': 'users/update-username',\n  'POST /api/users/:id/avatar': 'users/update-avatar',\n  'DELETE /api/users/:id': 'users/delete',\n\n  'GET /api/projects': 'projects/index',\n  'POST /api/projects': 'projects/create',\n  'GET /api/projects/:id': 'projects/show',\n  'PATCH /api/projects/:id': 'projects/update',\n  'POST /api/projects/:id/background-image': 'projects/update-background-image',\n  'DELETE /api/projects/:id': 'projects/delete',\n\n  'POST /api/projects/:projectId/managers': 'project-managers/create',\n  'DELETE /api/project-managers/:id': 'project-managers/delete',\n\n  'POST /api/projects/:projectId/boards': 'boards/create',\n  'GET /api/boards/:id': 'boards/show',\n  'PATCH /api/boards/:id': 'boards/update',\n  'DELETE /api/boards/:id': 'boards/delete',\n\n  'POST /api/boards/:boardId/memberships': 'board-memberships/create',\n  'DELETE /api/board-memberships/:id': 'board-memberships/delete',\n\n  'POST /api/boards/:boardId/labels': 'labels/create',\n  'PATCH /api/labels/:id': 'labels/update',\n  'DELETE /api/labels/:id': 'labels/delete',\n\n  'POST /api/boards/:boardId/lists': 'lists/create',\n  'PATCH /api/lists/:id': 'lists/update',\n  'DELETE /api/lists/:id': 'lists/delete',\n\n  'GET /api/boards/:boardId/cards': 'cards/index',\n  'POST /api/boards/:boardId/cards': 'cards/create',\n  'GET /api/cards/:id': 'cards/show',\n  'PATCH /api/cards/:id': 'cards/update',\n  'DELETE /api/cards/:id': 'cards/delete',\n  'POST /api/cards/:cardId/memberships': 'card-memberships/create',\n  'DELETE /api/cards/:cardId/memberships': 'card-memberships/delete',\n  'POST /api/cards/:cardId/labels': 'card-labels/create',\n  'DELETE /api/cards/:cardId/labels/:labelId': 'card-labels/delete',\n\n  'POST /api/cards/:cardId/tasks': 'tasks/create',\n  'PATCH /api/tasks/:id': 'tasks/update',\n  'DELETE /api/tasks/:id': 'tasks/delete',\n\n  'POST /api/cards/:cardId/attachments': 'attachments/create',\n  'PATCH /api/attachments/:id': 'attachments/update',\n  'DELETE /api/attachments/:id': 'attachments/delete',\n\n  'GET /api/cards/:cardId/actions': 'actions/index',\n\n  'POST /api/cards/:cardId/comment-actions': 'comment-actions/create',\n  'PATCH /api/comment-actions/:id': 'comment-actions/update',\n  'DELETE /api/comment-actions/:id': 'comment-actions/delete',\n\n  'GET /api/notifications': 'notifications/index',\n  'GET /api/notifications/:id': 'notifications/show',\n  'PATCH /api/notifications/:ids': 'notifications/update',\n\n  'GET /attachments/:id/download/:filename': {\n    action: 'attachments/download',\n    skipAssets: false,\n  },\n\n  'GET /attachments/:id/download/thumbnails/cover-256.jpg': {\n    action: 'attachments/download-thumbnail',\n    skipAssets: false,\n  },\n\n  'GET /*': {\n    view: 'index',\n    skipAssets: true,\n  },\n};\n"], "filenames": ["server/api/controllers/attachments/download-thumbnail.js", "server/config/routes.js"], "buggy_code_start_loc": [15, 83], "buggy_code_end_loc": [65, 84], "fixing_code_start_loc": [14, 83], "fixing_code_end_loc": [61, 84], "type": "CWE-22", "message": "With this vulnerability an attacker can read many sensitive files like configuration files, or the /proc/self/environ file, that contains the environment variable used by the web server that includes database credentials. If the web server user is root, an attacker will be able to read any file in the system.", "other": {"cve": {"id": "CVE-2022-2653", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-04T10:15:08.060", "lastModified": "2022-08-10T13:48:50.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "With this vulnerability an attacker can read many sensitive files like configuration files, or the /proc/self/environ file, that contains the environment variable used by the web server that includes database credentials. If the web server user is root, an attacker will be able to read any file in the system."}, {"lang": "es", "value": "Con esta vulnerabilidad un atacante puede leer muchos archivos confidenciales como los archivos de configuraci\u00f3n, o el archivo /proc/self/environ, que contiene la variable de entorno usada por el servidor web que incluye las credenciales de la base de datos. Si el usuario del servidor web es root, un atacante podr\u00e1 leer cualquier archivo del sistema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:planka:planka:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.1", "matchCriteriaId": "5F2CB549-0F44-4B52-8130-E1A385F24A4A"}]}]}], "references": [{"url": "https://github.com/plankanban/planka/commit/ac1df5201dfdaf68d37f7e1b272bc137870d7418", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/5dff7cf9-8bb2-4f67-a02d-b94db5009d70", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/plankanban/planka/commit/ac1df5201dfdaf68d37f7e1b272bc137870d7418"}}