{"buggy_code": ["/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.controllers;\n\nimport com.cloudinary.Cloudinary;\nimport com.cloudinary.utils.ObjectUtils;\nimport com.erudika.para.core.User;\nimport static com.erudika.para.core.User.Groups.MODS;\nimport static com.erudika.para.core.User.Groups.USERS;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.ParaObjectUtils;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.scoold.ScooldConfig;\nimport static com.erudika.scoold.ScooldServer.PEOPLELINK;\nimport static com.erudika.scoold.ScooldServer.PROFILELINK;\nimport static com.erudika.scoold.ScooldServer.SIGNINLINK;\nimport com.erudika.scoold.core.Post;\nimport com.erudika.scoold.core.Profile;\nimport com.erudika.scoold.core.Profile.Badge;\nimport com.erudika.scoold.core.Question;\nimport com.erudika.scoold.core.Reply;\nimport com.erudika.scoold.utils.ScooldUtils;\nimport com.erudika.scoold.utils.avatars.*;\nimport java.util.*;\nimport javax.inject.Inject;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@Controller\n@RequestMapping(\"/profile\")\npublic class ProfileController {\n\n\tprivate static final ScooldConfig CONF = ScooldUtils.getConfig();\n\tprivate final ScooldUtils utils;\n\tprivate final GravatarAvatarGenerator gravatarAvatarGenerator;\n\tprivate final AvatarRepository avatarRepository;\n\n\t@Inject\n\tpublic ProfileController(ScooldUtils utils, GravatarAvatarGenerator gravatarAvatarGenerator, AvatarRepositoryProxy avatarRepository) {\n\t\tthis.utils = utils;\n\t\tthis.gravatarAvatarGenerator = gravatarAvatarGenerator;\n\t\tthis.avatarRepository = avatarRepository;\n\t}\n\n\t@GetMapping({\"\", \"/{id}/**\"})\n\tpublic String get(@PathVariable(required = false) String id, HttpServletRequest req, Model model) {\n\t\tif (!utils.isAuthenticated(req) && StringUtils.isBlank(id)) {\n\t\t\treturn \"redirect:\" + SIGNINLINK + \"?returnto=\" + PROFILELINK;\n\t\t}\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser;\n\t\tboolean isMyProfile;\n\n\t\tif (StringUtils.isBlank(id) || isMyid(authUser, Profile.id(id))) {\n\t\t\t//requested userid !exists or = my userid => show my profile\n\t\t\tshowUser = authUser;\n\t\t\tisMyProfile = true;\n\t\t} else {\n\t\t\tshowUser = utils.getParaClient().read(Profile.id(id));\n\t\t\tisMyProfile = isMyid(authUser, Profile.id(id));\n\t\t}\n\n\t\tif (showUser == null || !ParaObjectUtils.typesMatch(showUser)) {\n\t\t\treturn \"redirect:\" + PROFILELINK;\n\t\t}\n\n\t\tboolean protekted = !utils.isDefaultSpacePublic() && !utils.isAuthenticated(req);\n\t\tboolean sameSpace = (utils.canAccessSpace(showUser, \"default\") && utils.canAccessSpace(authUser, \"default\")) ||\n\t\t\t\t(authUser != null && showUser.getSpaces().stream().anyMatch(s -> utils.canAccessSpace(authUser, s)));\n\t\tif (protekted || !sameSpace) {\n\t\t\treturn \"redirect:\" + PEOPLELINK;\n\t\t}\n\n\t\tPager itemcount1 = utils.getPager(\"page1\", req);\n\t\tPager itemcount2 = utils.getPager(\"page2\", req);\n\t\tList<? extends Post> questionslist = getQuestions(authUser, showUser, isMyProfile, itemcount1);\n\t\tList<? extends Post> answerslist = getAnswers(authUser, showUser, isMyProfile, itemcount2);\n\n\t\tmodel.addAttribute(\"path\", \"profile.vm\");\n\t\tmodel.addAttribute(\"title\", showUser.getName());\n\t\tmodel.addAttribute(\"description\", getUserDescription(showUser, itemcount1.getCount(), itemcount2.getCount()));\n\t\tmodel.addAttribute(\"ogimage\", utils.getFullAvatarURL(showUser, AvatarFormat.Profile));\n\t\tmodel.addAttribute(\"includeGMapsScripts\", utils.isNearMeFeatureEnabled());\n\t\tmodel.addAttribute(\"showUser\", showUser);\n\t\tmodel.addAttribute(\"isMyProfile\", isMyProfile);\n\t\tmodel.addAttribute(\"badgesCount\", showUser.getBadgesMap().size());\n\t\tmodel.addAttribute(\"canEdit\", isMyProfile || canEditProfile(authUser, id));\n\t\tmodel.addAttribute(\"canEditAvatar\", CONF.avatarEditsEnabled());\n\t\tmodel.addAttribute(\"gravatarPicture\", gravatarAvatarGenerator.getLink(showUser, AvatarFormat.Profile));\n\t\tmodel.addAttribute(\"isGravatarPicture\", gravatarAvatarGenerator.isLink(showUser.getPicture()));\n\t\tmodel.addAttribute(\"itemcount1\", itemcount1);\n\t\tmodel.addAttribute(\"itemcount2\", itemcount2);\n\t\tmodel.addAttribute(\"questionslist\", questionslist);\n\t\tmodel.addAttribute(\"answerslist\", answerslist);\n\t\tmodel.addAttribute(\"nameEditsAllowed\", CONF.nameEditsEnabled());\n\t\treturn \"base\";\n\t}\n\n\t@PostMapping(\"/{id}/make-mod\")\n\tpublic String makeMod(@PathVariable String id, HttpServletRequest req, HttpServletResponse res) {\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tif (!isMyid(authUser, Profile.id(id))) {\n\t\t\tProfile showUser = utils.getParaClient().read(Profile.id(id));\n\t\t\tif (showUser != null) {\n\t\t\t\tif (utils.isAdmin(authUser) && !utils.isAdmin(showUser)) {\n\t\t\t\t\tshowUser.setGroups(utils.isMod(showUser) ? USERS.toString() : MODS.toString());\n\t\t\t\t\tshowUser.update();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (utils.isAjaxRequest(req)) {\n\t\t\tres.setStatus(200);\n\t\t\treturn \"base\";\n\t\t} else {\n\t\t\treturn \"redirect:\" + PROFILELINK + \"/\" + id;\n\t\t}\n\t}\n\n\t@PostMapping(\"/{id}\")\n\tpublic String edit(@PathVariable(required = false) String id, @RequestParam(required = false) String name,\n\t\t\t@RequestParam(required = false) String location, @RequestParam(required = false) String latlng,\n\t\t\t@RequestParam(required = false) String website, @RequestParam(required = false) String aboutme,\n\t\t\t@RequestParam(required = false) String picture, HttpServletRequest req, Model model) {\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser = getProfileForEditing(id, authUser);\n\t\tif (showUser != null) {\n\t\t\tboolean updateProfile = false;\n\t\t\tif (!isMyid(authUser, id)) {\n\t\t\t\tshowUser = utils.getParaClient().read(Profile.id(id));\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getLocation(), location)) {\n\t\t\t\tshowUser.setLatlng(latlng);\n\t\t\t\tshowUser.setLocation(location);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getWebsite(), website) &&\n\t\t\t\t\t(StringUtils.isBlank(website) || Utils.isValidURL(website))) {\n\t\t\t\tshowUser.setWebsite(website);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getAboutme(), aboutme)) {\n\t\t\t\tshowUser.setAboutme(aboutme);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\n\t\t\tupdateProfile = updateUserPictureAndName(showUser, picture, name) || updateProfile;\n\n\t\t\tboolean isComplete = showUser.isComplete() && isMyid(authUser, showUser.getId());\n\t\t\tif (updateProfile || utils.addBadgeOnce(showUser, Badge.NICEPROFILE, isComplete)) {\n\t\t\t\tshowUser.update();\n\t\t\t}\n\t\t\tmodel.addAttribute(\"user\", showUser);\n\t\t}\n\t\treturn \"redirect:\" + PROFILELINK + (isMyid(authUser, id) ? \"\" : \"/\" + id);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@ResponseBody\n\t@PostMapping(value = \"/{id}/cloudinary-upload-link\", produces = MediaType.APPLICATION_JSON_VALUE)\n\tpublic ResponseEntity<Map<String, Object>> generateCloudinaryUploadLink(@PathVariable String id, HttpServletRequest req) {\n\t\tif (!ScooldUtils.isCloudinaryAvatarRepositoryEnabled()) {\n\t\t\treturn ResponseEntity.status(404).build();\n\t\t}\n\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser = getProfileForEditing(id, authUser);\n\t\tif (showUser == null) {\n\t\t\treturn ResponseEntity.status(403).build();\n\t\t}\n\n\t\tString preset = \"avatar\";\n\t\tString publicId = \"avatars/\" + id;\n\t\tlong timestamp = Utils.timestamp() / 1000;\n\t\tCloudinary cloudinary = new Cloudinary(CONF.cloudinaryUrl());\n\t\tString signature = cloudinary.apiSignRequest(ObjectUtils.asMap(\n\t\t\t\"public_id\", publicId,\n\t\t\t\"timestamp\", String.valueOf(timestamp),\n\t\t\t\"upload_preset\", preset\n\t\t), cloudinary.config.apiSecret);\n\n\t\tMap<String, Object> response = new HashMap<String, Object>();\n\t\tresponse.put(\"url\", \"https://api.cloudinary.com/v1_1/\" + cloudinary.config.cloudName + \"/image/upload\");\n\t\tMap<String, Object> data = new HashMap<String, Object>();\n\t\tdata.put(\"resource_type\", \"image\");\n\t\tdata.put(\"public_id\", publicId);\n\t\tdata.put(\"upload_preset\", preset);\n\t\tdata.put(\"filename\", id);\n\t\tdata.put(\"timestamp\", timestamp);\n\t\tdata.put(\"api_key\", cloudinary.config.apiKey);\n\t\tdata.put(\"signature\", signature);\n\t\tresponse.put(\"data\", data);\n\n\t\treturn ResponseEntity.ok().body(response);\n\t}\n\n\tprivate Profile getProfileForEditing(String id, Profile authUser) {\n\t\tif (!canEditProfile(authUser, id)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn isMyid(authUser, id) ? authUser : (Profile) utils.getParaClient().read(Profile.id(id));\n\t}\n\n\tprivate boolean updateUserPictureAndName(Profile showUser, String picture, String name) {\n\t\tboolean updateProfile = false;\n\t\tboolean updateUser = false;\n\t\tUser u = showUser.getUser();\n\n\t\tif (CONF.avatarEditsEnabled() && !StringUtils.isBlank(picture)) {\n\t\t\tupdateProfile = avatarRepository.store(showUser, picture);\n\t\t}\n\n\t\tif (CONF.nameEditsEnabled() && !StringUtils.isBlank(name)) {\n\t\t\tshowUser.setName(name);\n\t\t\tif (StringUtils.isBlank(showUser.getOriginalName())) {\n\t\t\t\tshowUser.setOriginalName(name);\n\t\t\t}\n\t\t\tif (!u.getName().equals(name)) {\n\t\t\t\tu.setName(name);\n\t\t\t\tupdateUser = true;\n\t\t\t}\n\t\t\tupdateProfile = true;\n\t\t}\n\n\t\tif (updateUser) {\n\t\t\tutils.getParaClient().update(u);\n\t\t}\n\t\treturn updateProfile;\n\t}\n\n\tprivate boolean isMyid(Profile authUser, String id) {\n\t\treturn authUser != null && (StringUtils.isBlank(id) || authUser.getId().equals(Profile.id(id)));\n\t}\n\n\tprivate boolean canEditProfile(Profile authUser, String id) {\n\t\treturn isMyid(authUser, id) || utils.isAdmin(authUser);\n\t}\n\n\tprivate Object getUserDescription(Profile showUser, Long questions, Long answers) {\n\t\tif (showUser == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn showUser.getVotes() + \" points, \"\n\t\t\t\t+ showUser.getBadgesMap().size() + \" badges, \"\n\t\t\t\t+ questions + \" questions, \"\n\t\t\t\t+ answers + \" answers \"\n\t\t\t\t+ Utils.abbreviate(showUser.getAboutme(), 150);\n\t}\n\n\tpublic List<? extends Post> getQuestions(Profile authUser, Profile showUser, boolean isMyProfile, Pager itemcount) {\n\t\tif (utils.postsNeedApproval() && (isMyProfile || utils.isMod(authUser))) {\n\t\t\tList<Question> qlist = new ArrayList<>();\n\t\t\tPager p = new Pager(itemcount.getPage(), itemcount.getLimit());\n\t\t\tqlist.addAll(showUser.getAllQuestions(itemcount));\n\t\t\tqlist.addAll(showUser.getAllUnapprovedQuestions(p));\n\t\t\titemcount.setCount(itemcount.getCount() + p.getCount());\n\t\t\treturn qlist;\n\t\t} else {\n\t\t\treturn showUser.getAllQuestions(itemcount);\n\t\t}\n\t}\n\n\tpublic List<? extends Post> getAnswers(Profile authUser, Profile showUser, boolean isMyProfile, Pager itemcount) {\n\t\tif (utils.postsNeedApproval() && (isMyProfile || utils.isMod(authUser))) {\n\t\t\tList<Reply> alist = new ArrayList<>();\n\t\t\tPager p = new Pager(itemcount.getPage(), itemcount.getLimit());\n\t\t\talist.addAll(showUser.getAllAnswers(itemcount));\n\t\t\talist.addAll(showUser.getAllUnapprovedAnswers(p));\n\t\t\titemcount.setCount(itemcount.getCount() + p.getCount());\n\t\t\treturn alist;\n\t\t} else {\n\t\t\treturn showUser.getAllAnswers(itemcount);\n\t\t}\n\t}\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.core;\nimport com.erudika.para.client.ParaClient;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.annotations.Stored;\nimport com.erudika.para.core.utils.Config;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.Para;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.scoold.utils.ScooldUtils;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.temporal.IsoFields;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport org.apache.commons.lang3.StringUtils;\nimport org.hibernate.validator.constraints.URL;\n\npublic class Profile extends Sysprop {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Stored private String originalName;\n\t@Stored private String originalPicture;\n\t@Stored private Long lastseen;\n\t@Stored private String location;\n\t@Stored private String latlng;\n\t@Stored private String status;\n\t@Stored private String aboutme;\n\t@Stored private String badges;\n\t@Stored private String groups;\n\t@Stored private Long upvotes;\n\t@Stored private Long downvotes;\n\t@Stored private Long comments;\n\t@Stored @URL private String picture;\n\t@Stored @URL private String website;\n\t@Stored private List<String> favtags;\n\t@Stored private Set<String> favspaces;\n\t@Stored private Set<String> spaces;\n\t@Stored private Boolean replyEmailsEnabled;\n\t@Stored private Boolean commentEmailsEnabled;\n\t@Stored private Boolean favtagsEmailsEnabled;\n\t@Stored private Boolean anonymityEnabled;\n\t@Stored private Boolean darkmodeEnabled;\n\t@Stored private Integer yearlyVotes;\n\t@Stored private Integer quarterlyVotes;\n\t@Stored private Integer monthlyVotes;\n\t@Stored private Integer weeklyVotes;\n\n\tprivate transient String newbadges;\n\tprivate transient Integer newreports;\n\tprivate transient User user;\n\n\tpublic enum Badge {\n\t\tVETERAN(10),\t\t//regular visitor\t\t//NOT IMPLEMENTED\n\n\t\tNICEPROFILE(10),\t//100% profile completed\n\t\tREPORTER(0),\t\t//for every report\n\t\tVOTER(0),\t\t\t//100 total votes\n\t\tCOMMENTATOR(0),\t\t//100+ comments\n\t\tCRITIC(0),\t\t\t//10+ downvotes\n\t\tSUPPORTER(10),\t\t//50+ upvotes\n\t\tEDITOR(0),\t\t\t//first edit of post\n\t\tBACKINTIME(0),\t\t//for each rollback of post\n\t\tNOOB(10),\t\t\t//first question + first approved answer\n\t\tENTHUSIAST(0),\t\t//100+ rep  [//\t\t\t ]\n\t\tFRESHMAN(0),\t\t//300+ rep\t[////\t\t ]\n\t\tSCHOLAR(0),\t\t\t//500+ rep\t[//////\t\t ]\n\t\tTEACHER(0),\t\t\t//1000+ rep\t[////////\t ]\n\t\tPROFESSOR(0),\t\t//5000+ rep\t[//////////\t ]\n\t\tGEEK(0),\t\t\t//9000+ rep\t[////////////]\n\t\tGOODQUESTION(10),\t//20+ votes\n\t\tGOODANSWER(10),\t\t//10+ votes\n\t\tEUREKA(0),\t\t\t//for every answer to own question\n\t\tSENIOR(0),\t\t\t//one year + member\n\t\tDISCIPLINED(0);\t\t//each time user deletes own comment\n\n\t\tprivate final int reward;\n\n\t\tBadge(int reward) {\n\t\t\tthis.reward = reward;\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn super.toString().toLowerCase();\n\t\t}\n\n\t\tpublic Integer getReward() {\n\t\t\treturn this.reward;\n\t\t}\n\t}\n\n\tpublic Profile() {\n\t\tthis(null, null);\n\t}\n\n\tpublic Profile(String id) {\n\t\tthis(id, null);\n\t}\n\n\tpublic Profile(String userid, String name) {\n\t\tsetId(id(userid));\n\t\tsetName(name);\n\t\tthis.status = \"\";\n\t\tthis.aboutme = \"\";\n\t\tthis.location = \"\";\n\t\tthis.website = \"\";\n\t\tthis.badges = \"\";\n\t\tthis.upvotes = 0L;\n\t\tthis.downvotes = 0L;\n\t\tthis.comments = 0L;\n\t\tthis.yearlyVotes = 0;\n\t\tthis.quarterlyVotes = 0;\n\t\tthis.monthlyVotes = 0;\n\t\tthis.weeklyVotes = 0;\n\t\tthis.anonymityEnabled = false;\n\t\tthis.darkmodeEnabled = false;\n\t\tthis.favtagsEmailsEnabled = ScooldUtils.getConfig().favoriteTagsEmailsEnabled();\n\t\tthis.replyEmailsEnabled = ScooldUtils.getConfig().replyEmailsEnabled();\n\t\tthis.commentEmailsEnabled = ScooldUtils.getConfig().commentEmailsEnabled();\n\t}\n\n\tpublic static final String id(String userid) {\n\t\tif (StringUtils.endsWith(userid, Para.getConfig().separator() + \"profile\")) {\n\t\t\treturn userid;\n\t\t} else {\n\t\t\treturn userid != null ? userid + Para.getConfig().separator() + \"profile\" : null;\n\t\t}\n\t}\n\n\tpublic static Profile fromUser(User u) {\n\t\tProfile p = new Profile(u.getId(), u.getName());\n\t\tp.setUser(u);\n\t\tp.setOriginalName(u.getName());\n\t\tp.setPicture(u.getPicture());\n\t\tp.setAppid(u.getAppid());\n\t\tp.setCreatorid(u.getId());\n\t\tp.setTimestamp(u.getTimestamp());\n\t\tp.setGroups(ScooldUtils.getInstance().isRecognizedAsAdmin(u)\n\t\t\t\t? User.Groups.ADMINS.toString() : u.getGroups());\n\t\t// auto-assign spaces to new users\n\t\tString space = StringUtils.substringBefore(ScooldUtils.getConfig().autoAssignSpaces(), \",\");\n\t\tif (!StringUtils.isBlank(space) && !ScooldUtils.getInstance().isDefaultSpace(space)) {\n\t\t\tSysprop s = client().read(ScooldUtils.getInstance().getSpaceId(space));\n\t\t\tif (s == null) {\n\t\t\t\ts = ScooldUtils.getInstance().buildSpaceObject(space);\n\t\t\t\tclient().create(s); // create the space it it's missing\n\t\t\t}\n\t\t\tif (ScooldUtils.getConfig().resetSpacesOnNewAssignment(u.isOAuth2User() || u.isLDAPUser() || u.isSAMLUser())) {\n\t\t\t\tp.setSpaces(Collections.singleton(s.getId() + Para.getConfig().separator() + s.getName()));\n\t\t\t} else {\n\t\t\t\tp.getSpaces().add(s.getId() + Para.getConfig().separator() + s.getName());\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\tprivate static ParaClient client() {\n\t\treturn ScooldUtils.getInstance().getParaClient();\n\t}\n\n\t@JsonIgnore\n\tpublic User getUser() {\n\t\tif (user == null) {\n\t\t\tuser = client().read(getCreatorid() == null\n\t\t\t\t\t? StringUtils.removeEnd(getId(), Para.getConfig().separator() + \"profile\") : getCreatorid());\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic Integer getYearlyVotes() {\n\t\tif (yearlyVotes < 0) {\n\t\t\tyearlyVotes = 0;\n\t\t}\n\t\treturn yearlyVotes;\n\t}\n\n\tpublic void setYearlyVotes(Integer yearlyVotes) {\n\t\tthis.yearlyVotes = yearlyVotes;\n\t}\n\n\tpublic Integer getQuarterlyVotes() {\n\t\tif (quarterlyVotes < 0) {\n\t\t\tquarterlyVotes = 0;\n\t\t}\n\t\treturn quarterlyVotes;\n\t}\n\n\tpublic void setQuarterlyVotes(Integer quarterlyVotes) {\n\t\tthis.quarterlyVotes = quarterlyVotes;\n\t}\n\n\tpublic Integer getMonthlyVotes() {\n\t\tif (monthlyVotes < 0) {\n\t\t\tmonthlyVotes = 0;\n\t\t}\n\t\treturn monthlyVotes;\n\t}\n\n\tpublic void setMonthlyVotes(Integer monthlyVotes) {\n\t\tthis.monthlyVotes = monthlyVotes;\n\t}\n\n\tpublic Integer getWeeklyVotes() {\n\t\tif (weeklyVotes < 0) {\n\t\t\tweeklyVotes = 0;\n\t\t}\n\t\treturn weeklyVotes;\n\t}\n\n\tpublic void setWeeklyVotes(Integer weeklyVotes) {\n\t\tthis.weeklyVotes = weeklyVotes;\n\t}\n\n\tpublic Boolean getReplyEmailsEnabled() {\n\t\treturn replyEmailsEnabled;\n\t}\n\n\tpublic void setReplyEmailsEnabled(Boolean replyEmailsEnabled) {\n\t\tthis.replyEmailsEnabled = replyEmailsEnabled;\n\t}\n\n\tpublic Boolean getCommentEmailsEnabled() {\n\t\treturn commentEmailsEnabled;\n\t}\n\n\tpublic void setCommentEmailsEnabled(Boolean commentEmailsEnabled) {\n\t\tthis.commentEmailsEnabled = commentEmailsEnabled;\n\t}\n\n\tpublic Boolean getFavtagsEmailsEnabled() {\n\t\treturn favtagsEmailsEnabled;\n\t}\n\n\tpublic void setFavtagsEmailsEnabled(Boolean favtagsEmailsEnabled) {\n\t\tthis.favtagsEmailsEnabled = favtagsEmailsEnabled;\n\t}\n\n\tpublic Boolean getAnonymityEnabled() {\n\t\treturn anonymityEnabled;\n\t}\n\n\tpublic void setAnonymityEnabled(Boolean anonymityEnabled) {\n\t\tthis.anonymityEnabled = anonymityEnabled;\n\t}\n\n\tpublic Boolean getDarkmodeEnabled() {\n\t\treturn darkmodeEnabled;\n\t}\n\n\tpublic void setDarkmodeEnabled(Boolean darkmodeEnabled) {\n\t\tthis.darkmodeEnabled = darkmodeEnabled;\n\t}\n\n\tpublic String getGroups() {\n\t\treturn groups;\n\t}\n\n\tpublic void setGroups(String groups) {\n\t\tthis.groups = groups;\n\t}\n\n\tpublic String getPicture() {\n\t\treturn picture;\n\t}\n\n\tpublic void setPicture(String picture) {\n\t\tthis.picture = picture;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n\n\tpublic String getLatlng() {\n\t\treturn latlng;\n\t}\n\n\tpublic void setLatlng(String latlng) {\n\t\tthis.latlng = latlng;\n\t}\n\n\tpublic String getNewbadges() {\n\t\treturn newbadges;\n\t}\n\n\tpublic void setNewbadges(String newbadges) {\n\t\tthis.newbadges = newbadges;\n\t}\n\n\tpublic List<String> getFavtags() {\n\t\tif (favtags == null) {\n\t\t\tfavtags = new LinkedList<String>();\n\t\t}\n\t\treturn favtags;\n\t}\n\n\tpublic void setFavtags(List<String> favtags) {\n\t\tthis.favtags = favtags;\n\t}\n\n\tpublic Set<String> getFavspaces() {\n\t\tif (favspaces == null) {\n\t\t\tfavspaces = new LinkedHashSet<String>();\n\t\t}\n\t\treturn favspaces;\n\t}\n\n\tpublic void setFavspaces(Set<String> favspaces) {\n\t\tthis.favspaces = favspaces;\n\t}\n\n\tpublic Set<String> getSpaces() {\n\t\tif (ScooldUtils.getInstance().isMod(this)) {\n\t\t\tspaces = ScooldUtils.getInstance().getAllSpaces().stream().\n\t\t\t\t\tmap(s -> s.getId() + Para.getConfig().separator() + s.getName()).collect(Collectors.toSet());\n\t\t}\n\t\tif (spaces == null) {\n\t\t\tspaces = new LinkedHashSet<String>();\n\t\t}\n\t\tif (spaces.isEmpty()) {\n\t\t\tspaces.add(Post.DEFAULT_SPACE);\n\t\t}\n\t\t// this is confusing - let admins control who is in the default space\n\t\t//if (spaces.size() > 1 && spaces.contains(Post.DEFAULT_SPACE)) {\n\t\t//\tspaces.remove(Post.DEFAULT_SPACE);\n\t\t//}\n\t\treturn spaces;\n\t}\n\n\tpublic void setSpaces(Set<String> spaces) {\n\t\tthis.spaces = spaces;\n\t}\n\n\t@JsonIgnore\n\tpublic Set<String> getAllSpaces() {\n\t\treturn getSpaces().stream().filter(s -> !s.equalsIgnoreCase(Post.DEFAULT_SPACE)).collect(Collectors.toSet());\n\t}\n\n\tpublic Long getLastseen() {\n\t\treturn lastseen;\n\t}\n\n\tpublic void setLastseen(Long val) {\n\t\tthis.lastseen = val;\n\t}\n\n\tpublic String getWebsite() {\n\t\treturn website;\n\t}\n\n\tpublic void setWebsite(String website) {\n\t\tthis.website = website;\n\t}\n\n\tpublic Long getComments() {\n\t\treturn comments;\n\t}\n\n\tpublic void setComments(Long comments) {\n\t\tthis.comments = comments;\n\t}\n\n\tpublic Long getDownvotes() {\n\t\treturn downvotes;\n\t}\n\n\tpublic void setDownvotes(Long downvotes) {\n\t\tthis.downvotes = downvotes;\n\t}\n\n\tpublic Long getUpvotes() {\n\t\treturn upvotes;\n\t}\n\n\tpublic void setUpvotes(Long upvotes) {\n\t\tthis.upvotes = upvotes;\n\t}\n\n\tpublic String getBadges() {\n\t\treturn badges;\n\t}\n\n\tpublic void setBadges(String badges) {\n\t\tthis.badges = badges;\n\t}\n\n\tpublic String getLocation() {\n\t\treturn location;\n\t}\n\n\tpublic void setLocation(String location) {\n\t\tthis.location = location;\n\t}\n\n\tpublic String getStatus() {\n\t\treturn status;\n\t}\n\n\tpublic void setStatus(String status) {\n\t\tthis.status = status;\n\t}\n\n\tpublic String getAboutme() {\n\t\treturn this.aboutme;\n\t}\n\n\tpublic void setAboutme(String aboutme) {\n\t\tthis.aboutme = aboutme;\n\t}\n\n\tpublic String getOriginalName() {\n\t\treturn originalName;\n\t}\n\n\tpublic void setOriginalName(String originalName) {\n\t\tthis.originalName = originalName;\n\t}\n\n\tpublic String getOriginalPicture() {\n\t\treturn originalPicture;\n\t}\n\n\tpublic void setOriginalPicture(String originalPicture) {\n\t\tthis.originalPicture = originalPicture;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Question> getAllQuestions(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Question>();\n\t\t}\n\t\treturn (List<Question>) getPostsForUser(Utils.type(Question.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Reply> getAllAnswers(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Reply>();\n\t\t}\n\t\treturn (List<Reply>) getPostsForUser(Utils.type(Reply.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Question> getAllUnapprovedQuestions(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Question>();\n\t\t}\n\t\treturn (List<Question>) getPostsForUser(Utils.type(UnapprovedQuestion.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Reply> getAllUnapprovedAnswers(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Reply>();\n\t\t}\n\t\treturn (List<Reply>) getPostsForUser(Utils.type(UnapprovedReply.class), pager);\n\t}\n\n\tprivate List<? extends Post> getPostsForUser(String type, Pager pager) {\n\t\tpager.setSortby(\"votes\");\n\t\treturn client().findTerms(type, Collections.singletonMap(Config._CREATORID, getId()), true, pager);\n\t}\n\n\tpublic String getFavtagsString() {\n\t\tif (getFavtags().isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn StringUtils.join(getFavtags(), \", \");\n\t}\n\n\tpublic boolean hasFavtags() {\n\t\treturn !getFavtags().isEmpty();\n\t}\n\n\tpublic boolean hasSpaces() {\n\t\treturn !(getSpaces().size() <= 1 && getSpaces().contains(Post.DEFAULT_SPACE));\n\t}\n\n\tpublic void removeSpace(String space) {\n\t\tString sid = ScooldUtils.getInstance().getSpaceId(space);\n\t\tIterator<String> it = getSpaces().iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tif (it.next().startsWith(sid + Para.getConfig().separator())) {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic long getTotalVotes() {\n\t\tif (upvotes == null) {\n\t\t\tupvotes = 0L;\n\t\t}\n\t\tif (downvotes == null) {\n\t\t\tdownvotes = 0L;\n\t\t}\n\n\t\treturn upvotes + downvotes;\n\t}\n\n\tpublic void addRep(int rep) {\n\t\tif (getVotes() == null) {\n\t\t\tsetVotes(0);\n\t\t}\n\t\tsetVotes(getVotes() + rep);\n\t\tupdateVoteGains(rep);\n\t}\n\n\tpublic void removeRep(int rep) {\n\t\tif (getVotes() == null) {\n\t\t\tsetVotes(0);\n\t\t}\n\t\tsetVotes(getVotes() - rep);\n\t\tupdateVoteGains(-rep);\n\t\tif (getVotes() < 0) {\n\t\t\tsetVotes(0);\n\t\t}\n\t}\n\n\tpublic void incrementUpvotes() {\n\t\tif (this.upvotes == null) {\n\t\t\tthis.upvotes = 1L;\n\t\t} else {\n\t\t\tthis.upvotes = this.upvotes + 1L;\n\t\t}\n\t}\n\n\tpublic void incrementDownvotes() {\n\t\tif (this.downvotes == null) {\n\t\t\tthis.downvotes = 1L;\n\t\t} else {\n\t\t\tthis.downvotes = this.downvotes + 1L;\n\t\t}\n\t}\n\n\tprivate void updateVoteGains(int rep) {\n\t\tLong updated = Optional.ofNullable(getUpdated()).orElse(getTimestamp());\n\t\tLocalDateTime lastUpdate = LocalDateTime.ofInstant(Instant.ofEpochMilli(updated), ZoneId.systemDefault());\n\t\tLocalDate now = LocalDate.now();\n\t\tif (now.getYear() != lastUpdate.getYear()) {\n\t\t\tyearlyVotes = rep;\n\t\t} else {\n\t\t\tyearlyVotes += rep;\n\t\t}\n\t\tif (now.get(IsoFields.QUARTER_OF_YEAR) != lastUpdate.get(IsoFields.QUARTER_OF_YEAR)) {\n\t\t\tquarterlyVotes = rep;\n\t\t} else {\n\t\t\tquarterlyVotes += rep;\n\t\t}\n\t\tif (now.getMonthValue() != lastUpdate.getMonthValue()) {\n\t\t\tmonthlyVotes = rep;\n\t\t} else {\n\t\t\tmonthlyVotes += rep;\n\t\t}\n\t\tif (now.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR) != lastUpdate.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)) {\n\t\t\tweeklyVotes = rep;\n\t\t} else {\n\t\t\tweeklyVotes += rep;\n\t\t}\n\t\tsetUpdated(Utils.timestamp());\n\t}\n\n\tpublic boolean hasBadge(Badge b) {\n\t\treturn StringUtils.containsIgnoreCase(badges, \",\".concat(b.toString()).concat(\",\"));\n\t}\n\n\tpublic void addBadge(Badge b) {\n\t\tString badge = b.toString();\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\tbadges = \",\";\n\t\t}\n\t\tbadges = badges.concat(badge).concat(\",\");\n\t\taddRep(b.getReward());\n\t}\n\n\tpublic void addBadges(Badge[] larr) {\n\t\tfor (Badge badge : larr) {\n\t\t\taddBadge(badge);\n\t\t\taddRep(badge.getReward());\n\t\t}\n\t}\n\n\tpublic void removeBadge(Badge b) {\n\t\tString badge = b.toString();\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\treturn;\n\t\t}\n\t\tbadge = \",\".concat(badge).concat(\",\");\n\n\t\tif (badges.contains(badge)) {\n\t\t\tbadges = badges.replaceFirst(badge, \",\");\n\t\t\tremoveRep(b.getReward());\n\t\t}\n\t\tif (StringUtils.isBlank(badges.replaceAll(\",\", \"\"))) {\n\t\t\tbadges = \"\";\n\t\t}\n\t}\n\n\tpublic HashMap<String, Integer> getBadgesMap() {\n\t\tHashMap<String, Integer> badgeMap = new HashMap<String, Integer>(0);\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\treturn badgeMap;\n\t\t}\n\n\t\tfor (String badge : badges.split(\",\")) {\n\t\t\tInteger val = badgeMap.get(badge);\n\t\t\tint count = (val == null) ? 0 : val.intValue();\n\t\t\tbadgeMap.put(badge, ++count);\n\t\t}\n\n\t\tbadgeMap.remove(\"\");\n\t\treturn badgeMap;\n\t}\n\n\tpublic boolean isComplete() {\n\t\treturn (!StringUtils.isBlank(location)\n\t\t\t\t&& !StringUtils.isBlank(aboutme)\n\t\t\t\t&& !StringUtils.isBlank(website));\n\t}\n\n\tpublic String create() {\n\t\tsetLastseen(System.currentTimeMillis());\n\t\tclient().create(this);\n\t\treturn getId();\n\t}\n\n\tpublic void update() {\n\t\tsetLastseen(System.currentTimeMillis());\n\t\tupdateVoteGains(0); // reset vote gains if they we're past the time frame\n\t\tclient().update(this);\n\t}\n\n\tpublic void delete() {\n\t\tclient().delete(this);\n\t\tclient().delete(getUser());\n\t\tScooldUtils.getInstance().unsubscribeFromAllNotifications(this);\n\t}\n\n\tpublic int countNewReports() {\n\t\tif (newreports == null) {\n\t\t\tnewreports = client().getCount(Utils.type(Report.class),\n\t\t\t\t\tCollections.singletonMap(\"properties.closed\", false)).intValue();\n\t\t}\n\t\treturn newreports;\n\t}\n\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null || getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Objects.equals(getName(), ((Profile) obj).getName())\n\t\t\t\t&& Objects.equals(getLocation(), ((Profile) obj).getLocation())\n\t\t\t\t&& Objects.equals(getId(), ((Profile) obj).getId());\n\t}\n\n\tpublic int hashCode() {\n\t\treturn Objects.hashCode(getName()) + Objects.hashCode(getId());\n\t}\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.utils;\n\nimport com.erudika.para.client.ParaClient;\nimport com.erudika.para.core.Address;\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.Tag;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.Vote;\nimport com.erudika.para.core.Webhook;\nimport com.erudika.para.core.email.Emailer;\nimport com.erudika.para.core.utils.Config;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.Para;\nimport com.erudika.para.core.utils.ParaObjectUtils;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.para.core.validation.ValidationUtils;\nimport com.erudika.scoold.ScooldConfig;\nimport static com.erudika.scoold.ScooldServer.*;\nimport com.erudika.scoold.core.Comment;\nimport com.erudika.scoold.core.Feedback;\nimport com.erudika.scoold.core.Post;\nimport static com.erudika.scoold.core.Post.ALL_MY_SPACES;\nimport static com.erudika.scoold.core.Post.DEFAULT_SPACE;\nimport com.erudika.scoold.core.Profile;\nimport static com.erudika.scoold.core.Profile.Badge.ENTHUSIAST;\nimport static com.erudika.scoold.core.Profile.Badge.TEACHER;\nimport com.erudika.scoold.core.Question;\nimport com.erudika.scoold.core.Reply;\nimport com.erudika.scoold.core.Report;\nimport com.erudika.scoold.core.Revision;\nimport com.erudika.scoold.core.UnapprovedQuestion;\nimport com.erudika.scoold.core.UnapprovedReply;\nimport static com.erudika.scoold.utils.HttpUtils.getCookieValue;\nimport com.erudika.scoold.utils.avatars.AvatarFormat;\nimport com.erudika.scoold.utils.avatars.AvatarRepository;\nimport com.erudika.scoold.utils.avatars.AvatarRepositoryProxy;\nimport com.erudika.scoold.utils.avatars.GravatarAvatarGenerator;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.JWSHeader;\nimport com.nimbusds.jose.JWSSigner;\nimport com.nimbusds.jose.JWSVerifier;\nimport com.nimbusds.jose.crypto.MACSigner;\nimport com.nimbusds.jose.crypto.MACVerifier;\nimport com.nimbusds.jwt.JWTClaimsSet;\nimport com.nimbusds.jwt.SignedJWT;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Predicate;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.validation.ConstraintViolation;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.RegExUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Component;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@Component\n@Named\npublic final class ScooldUtils {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ScooldUtils.class);\n\tprivate static final Map<String, String> FILE_CACHE = new ConcurrentHashMap<String, String>();\n\tprivate static final Set<String> APPROVED_DOMAINS = new HashSet<>();\n\tprivate static final Set<String> ADMINS = new HashSet<>();\n\tprivate static final String EMAIL_ALERTS_PREFIX = \"email-alerts\" + Para.getConfig().separator();\n\n\tprivate static final Profile API_USER;\n\tprivate static final Set<String> CORE_TYPES;\n\tprivate static final Set<String> HOOK_EVENTS;\n\tprivate static final Map<String, String> WHITELISTED_MACROS;\n\tprivate static final Map<String, Object> API_KEYS = new LinkedHashMap<>(); // jti => jwt\n\n\tprivate List<Sysprop> allSpaces;\n\n\tprivate static final ScooldConfig CONF = new ScooldConfig();\n\n\tstatic {\n\t\tAPI_USER = new Profile(\"1\", \"System\");\n\t\tAPI_USER.setVotes(1);\n\t\tAPI_USER.setCreatorid(\"1\");\n\t\tAPI_USER.setTimestamp(Utils.timestamp());\n\t\tAPI_USER.setGroups(User.Groups.ADMINS.toString());\n\n\t\tCORE_TYPES = new HashSet<>(Arrays.asList(Utils.type(Comment.class),\n\t\t\t\tUtils.type(Feedback.class),\n\t\t\t\tUtils.type(Profile.class),\n\t\t\t\tUtils.type(Question.class),\n\t\t\t\tUtils.type(Reply.class),\n\t\t\t\tUtils.type(Report.class),\n\t\t\t\tUtils.type(Revision.class),\n\t\t\t\tUtils.type(UnapprovedQuestion.class),\n\t\t\t\tUtils.type(UnapprovedReply.class),\n\t\t\t\t// Para core types\n\t\t\t\tUtils.type(Address.class),\n\t\t\t\tUtils.type(Sysprop.class),\n\t\t\t\tUtils.type(Tag.class),\n\t\t\t\tUtils.type(User.class),\n\t\t\t\tUtils.type(Vote.class)\n\t\t));\n\n\t\tHOOK_EVENTS = new HashSet<>(Arrays.asList(\n\t\t\t\t\"question.create\",\n\t\t\t\t\"question.close\",\n\t\t\t\t\"answer.create\",\n\t\t\t\t\"answer.accept\",\n\t\t\t\t\"report.create\",\n\t\t\t\t\"comment.create\",\n\t\t\t\t\"user.signup\",\n\t\t\t\t\"revision.restore\"));\n\n\t\tWHITELISTED_MACROS = new HashMap<String, String>();\n\t\tWHITELISTED_MACROS.put(\"spaces\", \"#spacespage($spaces)\");\n\t\tWHITELISTED_MACROS.put(\"webhooks\", \"#webhookspage($webhooks)\");\n\t\tWHITELISTED_MACROS.put(\"comments\", \"#commentspage($commentslist)\");\n\t\tWHITELISTED_MACROS.put(\"simplecomments\", \"#simplecommentspage($commentslist)\");\n\t\tWHITELISTED_MACROS.put(\"postcomments\", \"#commentspage($showpost.comments)\");\n\t\tWHITELISTED_MACROS.put(\"replies\", \"#answerspage($answerslist $showPost)\");\n\t\tWHITELISTED_MACROS.put(\"feedback\", \"#questionspage($feedbacklist)\");\n\t\tWHITELISTED_MACROS.put(\"people\", \"#peoplepage($userlist)\");\n\t\tWHITELISTED_MACROS.put(\"questions\", \"#questionspage($questionslist)\");\n\t\tWHITELISTED_MACROS.put(\"compactanswers\", \"#compactanswerspage($answerslist)\");\n\t\tWHITELISTED_MACROS.put(\"answers\", \"#answerspage($answerslist)\");\n\t\tWHITELISTED_MACROS.put(\"reports\", \"#reportspage($reportslist)\");\n\t\tWHITELISTED_MACROS.put(\"revisions\", \"#revisionspage($revisionslist $showPost)\");\n\t\tWHITELISTED_MACROS.put(\"tags\", \"#tagspage($tagslist)\");\n\t}\n\n\tprivate final ParaClient pc;\n\tprivate final LanguageUtils langutils;\n\tprivate final AvatarRepository avatarRepository;\n\tprivate final GravatarAvatarGenerator gravatarAvatarGenerator;\n\tprivate static ScooldUtils instance;\n\tprivate Sysprop customTheme;\n\t@Inject private Emailer emailer;\n\n\t@Inject\n\tpublic ScooldUtils(ParaClient pc, LanguageUtils langutils, AvatarRepositoryProxy avatarRepository,\n\t\t\tGravatarAvatarGenerator gravatarAvatarGenerator) {\n\t\tthis.pc = pc;\n\t\tthis.langutils = langutils;\n\t\tthis.avatarRepository = avatarRepository;\n\t\tthis.gravatarAvatarGenerator = gravatarAvatarGenerator;\n\t\tAPI_USER.setPicture(avatarRepository.getAnonymizedLink(CONF.supportEmail()));\n\t}\n\n\tpublic ParaClient getParaClient() {\n\t\treturn pc;\n\t}\n\n\tpublic LanguageUtils getLangutils() {\n\t\treturn langutils;\n\t}\n\n\tpublic static ScooldUtils getInstance() {\n\t\treturn instance;\n\t}\n\n\tstatic void setInstance(ScooldUtils instance) {\n\t\tScooldUtils.instance = instance;\n\t}\n\n\tpublic static ScooldConfig getConfig() {\n\t\treturn CONF;\n\t}\n\n\tstatic {\n\t\t// multiple domains/admins are allowed only in Scoold PRO\n\t\tString approvedDomain = StringUtils.substringBefore(CONF.approvedDomainsForSignups(), \",\");\n\t\tif (!StringUtils.isBlank(approvedDomain)) {\n\t\t\tAPPROVED_DOMAINS.add(approvedDomain);\n\t\t}\n\t\t// multiple admins are allowed only in Scoold PRO\n\t\tString admin = StringUtils.substringBefore(CONF.admins(), \",\");\n\t\tif (!StringUtils.isBlank(admin)) {\n\t\t\tADMINS.add(admin);\n\t\t}\n\t}\n\n\tpublic static void tryConnectToPara(Callable<Boolean> callable) {\n\t\tretryConnection(callable, 0);\n\t}\n\n\tprivate static void retryConnection(Callable<Boolean> callable, int retryCount) {\n\t\ttry {\n\t\t\tif (!callable.call()) {\n\t\t\t\tthrow new Exception();\n\t\t\t} else if (retryCount > 0) {\n\t\t\t\tlogger.info(\"Connected to Para backend.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tint maxRetries = CONF.paraConnectionRetryAttempts();\n\t\t\tint retryInterval = CONF.paraConnectionRetryIntervalSec();\n\t\t\tint count = ++retryCount;\n\t\t\tlogger.error(\"No connection to Para backend. Retrying connection in {}s (attempt {} of {})...\",\n\t\t\t\t\tretryInterval, count, maxRetries);\n\t\t\tif (maxRetries < 0 || retryCount < maxRetries) {\n\t\t\t\tPara.asyncExecute(() -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(retryInterval * 1000L);\n\t\t\t\t\t} catch (InterruptedException ex) {\n\t\t\t\t\t\tlogger.error(null, ex);\n\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t}\n\t\t\t\t\tretryConnection(callable, count);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ParaObject checkAuth(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n\t\tProfile authUser = null;\n\t\tString jwt = HttpUtils.getStateParam(CONF.authCookie(), req);\n\t\tif (isApiRequest(req)) {\n\t\t\treturn checkApiAuth(req);\n\t\t} else if (jwt != null && !StringUtils.endsWithAny(req.getRequestURI(),\n\t\t\t\t\".js\", \".css\", \".svg\", \".png\", \".jpg\", \".ico\", \".gif\", \".woff2\", \".woff\", \"people/avatar\")) {\n\t\t\tUser u = pc.me(jwt);\n\t\t\tif (u != null && isEmailDomainApproved(u.getEmail())) {\n\t\t\t\tauthUser = getOrCreateProfile(u, req);\n\t\t\t\tauthUser.setUser(u);\n\t\t\t\tauthUser.setOriginalPicture(u.getPicture());\n\t\t\t\tboolean updatedRank = promoteOrDemoteUser(authUser, u);\n\t\t\t\tboolean updatedProfile = updateProfilePictureAndName(authUser, u);\n\t\t\t\tif (updatedRank || updatedProfile) {\n\t\t\t\t\tauthUser.update();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearSession(req, res);\n\t\t\t\tlogger.info(\"Invalid JWT found in cookie {}.\", CONF.authCookie());\n\t\t\t\tres.sendRedirect(CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"?code=3&error=true\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tprivate ParaObject checkApiAuth(HttpServletRequest req) {\n\t\tif (req.getRequestURI().equals(CONF.serverContextPath() + \"/api\")) {\n\t\t\treturn null;\n\t\t}\n\t\tString apiKeyJWT = StringUtils.removeStart(req.getHeader(HttpHeaders.AUTHORIZATION), \"Bearer \");\n\t\tif (req.getRequestURI().equals(CONF.serverContextPath() + \"/api/ping\")) {\n\t\t\treturn API_USER;\n\t\t} else if (req.getRequestURI().equals(CONF.serverContextPath() + \"/api/stats\") && isValidJWToken(apiKeyJWT)) {\n\t\t\treturn API_USER;\n\t\t} else if (!isApiEnabled() || StringUtils.isBlank(apiKeyJWT) || !isValidJWToken(apiKeyJWT)) {\n\t\t\tthrow new UnauthorizedException();\n\t\t}\n\t\treturn API_USER;\n\t}\n\n\tprivate boolean promoteOrDemoteUser(Profile authUser, User u) {\n\t\tif (authUser != null) {\n\t\t\tif (!isAdmin(authUser) && isRecognizedAsAdmin(u)) {\n\t\t\t\tlogger.info(\"User '{}' with id={} promoted to admin.\", u.getName(), authUser.getId());\n\t\t\t\tauthUser.setGroups(User.Groups.ADMINS.toString());\n\t\t\t\treturn true;\n\t\t\t} else if (isAdmin(authUser) && !isRecognizedAsAdmin(u)) {\n\t\t\t\tlogger.info(\"User '{}' with id={} demoted to regular user.\", u.getName(), authUser.getId());\n\t\t\t\tauthUser.setGroups(User.Groups.USERS.toString());\n\t\t\t\treturn true;\n\t\t\t} else if (!isMod(authUser) && u.isModerator()) {\n\t\t\t\tauthUser.setGroups(User.Groups.MODS.toString());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate Profile getOrCreateProfile(User u, HttpServletRequest req) {\n\t\tProfile authUser = pc.read(Profile.id(u.getId()));\n\t\tif (authUser == null) {\n\t\t\tauthUser = Profile.fromUser(u);\n\t\t\tauthUser.create();\n\t\t\tif (!u.getIdentityProvider().equals(\"generic\")) {\n\t\t\t\tsendWelcomeEmail(u, false, req);\n\t\t\t}\n\t\t\tMap<String, Object> payload = new LinkedHashMap<>(ParaObjectUtils.getAnnotatedFields(authUser, false));\n\t\t\tpayload.put(\"user\", u);\n\t\t\ttriggerHookEvent(\"user.signup\", payload);\n\t\t\tlogger.info(\"Created new user '{}' with id={}, groups={}, spaces={}.\",\n\t\t\t\t\tu.getName(), authUser.getId(), authUser.getGroups(), authUser.getSpaces());\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tprivate boolean updateProfilePictureAndName(Profile authUser, User u) {\n\t\tboolean update = false;\n\t\tif (!StringUtils.equals(u.getPicture(), authUser.getPicture())\n\t\t\t\t&& !gravatarAvatarGenerator.isLink(authUser.getPicture())\n\t\t\t\t&& !CONF.avatarEditsEnabled()) {\n\t\t\tauthUser.setPicture(u.getPicture());\n\t\t\tupdate = true;\n\t\t}\n\t\tif (!CONF.nameEditsEnabled() &&\t!StringUtils.equals(u.getName(), authUser.getName())) {\n\t\t\tauthUser.setName(u.getName());\n\t\t\tupdate = true;\n\t\t}\n\t\tif (!StringUtils.equals(u.getName(), authUser.getOriginalName())) {\n\t\t\tauthUser.setOriginalName(u.getName());\n\t\t\tupdate = true;\n\t\t}\n\t\treturn update;\n\t}\n\n\tpublic boolean isDarkModeEnabled(Profile authUser, HttpServletRequest req) {\n\t\treturn (authUser != null && authUser.getDarkmodeEnabled()) ||\n\t\t\t\t\"1\".equals(HttpUtils.getCookieValue(req, \"dark-mode\"));\n\t}\n\n\tprivate String getDefaultEmailSignature(String defaultText) {\n\t\tString template = CONF.emailsDefaultSignatureText(defaultText);\n\t\treturn Utils.formatMessage(template, CONF.appName());\n\t}\n\n\tpublic void sendWelcomeEmail(User user, boolean verifyEmail, HttpServletRequest req) {\n\t\t// send welcome email notification\n\t\tif (user != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"signin.welcome\"), CONF.appName());\n\t\t\tString body1 = Utils.formatMessage(CONF.emailsWelcomeText1(lang), CONF.appName());\n\t\t\tString body2 = CONF.emailsWelcomeText2(lang);\n\t\t\tString body3 = getDefaultEmailSignature(CONF.emailsWelcomeText3(lang));\n\n\t\t\tif (verifyEmail && !user.getActive() && !StringUtils.isBlank(user.getIdentifier())) {\n\t\t\t\tSysprop s = pc.read(user.getIdentifier());\n\t\t\t\tif (s != null) {\n\t\t\t\t\tString token = Utils.base64encURL(Utils.generateSecurityToken().getBytes());\n\t\t\t\t\ts.addProperty(Config._EMAIL_TOKEN, token);\n\t\t\t\t\tpc.update(s);\n\t\t\t\t\ttoken = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/register?id=\" + user.getId() + \"&token=\" + token;\n\t\t\t\t\tbody3 = \"<b><a href=\\\"\" + token + \"\\\">\" + lang.get(\"signin.welcome.verify\") + \"</a></b><br><br>\" + body3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"signin.welcome.title\"), escapeHtml(user.getName())));\n\t\t\tmodel.put(\"body\", body1 + body2 + body3);\n\t\t\temailer.sendEmail(Arrays.asList(user.getEmail()), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\tpublic void sendVerificationEmail(Sysprop identifier, HttpServletRequest req) {\n\t\tif (identifier != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"signin.welcome\"), CONF.appName());\n\t\t\tString body = getDefaultEmailSignature(CONF.emailsWelcomeText3(lang));\n\n\t\t\tString token = Utils.base64encURL(Utils.generateSecurityToken().getBytes());\n\t\t\tidentifier.addProperty(Config._EMAIL_TOKEN, token);\n\t\t\tidentifier.addProperty(\"confirmationTimestamp\", Utils.timestamp());\n\t\t\tpc.update(identifier);\n\t\t\ttoken = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/register?id=\" +\n\t\t\t\t\tidentifier.getCreatorid() + \"&token=\" + token;\n\t\t\tbody = \"<b><a href=\\\"\" + token + \"\\\">\" + lang.get(\"signin.welcome.verify\") + \"</a></b><br><br>\" + body;\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", lang.get(\"hello\"));\n\t\t\tmodel.put(\"body\", body);\n\t\t\temailer.sendEmail(Arrays.asList(identifier.getId()), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\tpublic void sendPasswordResetEmail(String email, String token, HttpServletRequest req) {\n\t\tif (email != null && token != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString url = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/iforgot?email=\" + email + \"&token=\" + token;\n\t\t\tString subject = lang.get(\"iforgot.title\");\n\t\t\tString body1 = lang.get(\"notification.iforgot.body1\") + \"<br><br>\";\n\t\t\tString body2 = Utils.formatMessage(\"<b><a href=\\\"{0}\\\">\" + lang.get(\"notification.iforgot.body2\") +\n\t\t\t\t\t\"</a></b><br><br>\", url);\n\t\t\tString body3 = getDefaultEmailSignature(lang.get(\"notification.signature\") + \"<br><br>\");\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", lang.get(\"hello\"));\n\t\t\tmodel.put(\"body\", body1 + body2 + body3);\n\t\t\temailer.sendEmail(Arrays.asList(email), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void subscribeToNotifications(String email, String channelId) {\n\t\tif (!StringUtils.isBlank(email) && !StringUtils.isBlank(channelId)) {\n\t\t\tSysprop s = pc.read(channelId);\n\t\t\tif (s == null || !s.hasProperty(\"emails\")) {\n\t\t\t\ts = new Sysprop(channelId);\n\t\t\t\ts.addProperty(\"emails\", new LinkedList<>());\n\t\t\t}\n\t\t\tSet<String> emails = new HashSet<>((List<String>) s.getProperty(\"emails\"));\n\t\t\tif (emails.add(email)) {\n\t\t\t\ts.addProperty(\"emails\", emails);\n\t\t\t\tpc.create(s);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void unsubscribeFromNotifications(String email, String channelId) {\n\t\tif (!StringUtils.isBlank(email) && !StringUtils.isBlank(channelId)) {\n\t\t\tSysprop s = pc.read(channelId);\n\t\t\tif (s == null || !s.hasProperty(\"emails\")) {\n\t\t\t\ts = new Sysprop(channelId);\n\t\t\t\ts.addProperty(\"emails\", new LinkedList<>());\n\t\t\t}\n\t\t\tSet<String> emails = new HashSet<>((List<String>) s.getProperty(\"emails\"));\n\t\t\tif (emails.remove(email)) {\n\t\t\t\ts.addProperty(\"emails\", emails);\n\t\t\t\tpc.create(s);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Set<String> getNotificationSubscribers(String channelId) {\n\t\treturn ((List<String>) Optional.ofNullable(((Sysprop) pc.read(channelId))).\n\t\t\t\torElse(new Sysprop()).getProperties().getOrDefault(\"emails\", Collections.emptyList())).\n\t\t\t\tstream().collect(Collectors.toSet());\n\t}\n\n\tpublic void unsubscribeFromAllNotifications(Profile p) {\n\t\tUser u = p.getUser();\n\t\tif (u != null) {\n\t\t\tunsubscribeFromNewPosts(u);\n\t\t}\n\t}\n\n\tpublic boolean isEmailDomainApproved(String email) {\n\t\tif (StringUtils.isBlank(email)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!APPROVED_DOMAINS.isEmpty() && !APPROVED_DOMAINS.contains(StringUtils.substringAfter(email, \"@\"))) {\n\t\t\tlogger.warn(\"Attempted signin from an unknown domain - email {} is part of an unapproved domain.\", email);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic Object isSubscribedToNewPosts(HttpServletRequest req) {\n\t\tif (!isNewPostNotificationAllowed()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tProfile authUser = getAuthUser(req);\n\t\tif (authUser != null) {\n\t\t\tUser u = authUser.getUser();\n\t\t\tif (u != null) {\n\t\t\t\treturn getNotificationSubscribers(EMAIL_ALERTS_PREFIX + \"new_post_subscribers\").contains(u.getEmail());\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic void subscribeToNewPosts(User u) {\n\t\tif (u != null) {\n\t\t\tsubscribeToNotifications(u.getEmail(), EMAIL_ALERTS_PREFIX + \"new_post_subscribers\");\n\t\t}\n\t}\n\n\tpublic void unsubscribeFromNewPosts(User u) {\n\t\tif (u != null) {\n\t\t\tunsubscribeFromNotifications(u.getEmail(), EMAIL_ALERTS_PREFIX + \"new_post_subscribers\");\n\t\t}\n\t}\n\n\tprivate Map<String, Profile> buildProfilesMap(List<User> users) {\n\t\tif (users != null && !users.isEmpty()) {\n\t\t\tMap<String, User> userz = users.stream().collect(Collectors.toMap(u -> u.getId(), u -> u));\n\t\t\tList<Profile> profiles = pc.readAll(userz.keySet().stream().\n\t\t\t\t\tmap(uid -> Profile.id(uid)).collect(Collectors.toList()));\n\t\t\tMap<String, Profile> profilesMap = new HashMap<String, Profile>(users.size());\n\t\t\tprofiles.forEach(pr -> profilesMap.put(userz.get(pr.getCreatorid()).getEmail(), pr));\n\t\t\treturn profilesMap;\n\t\t}\n\t\treturn Collections.emptyMap();\n\t}\n\n\tprivate void sendEmailsToSubscribersInSpace(Set<String> emails, String space, String subject, String html) {\n\t\tint i = 0;\n\t\tint max = CONF.maxItemsPerPage();\n\t\tList<String> terms = new ArrayList<>(max);\n\t\tfor (String email : emails) {\n\t\t\tterms.add(email);\n\t\t\tif (++i == max) {\n\t\t\t\temailer.sendEmail(buildProfilesMap(pc.findTermInList(Utils.type(User.class), Config._EMAIL, terms)).\n\t\t\t\t\t\tentrySet().stream().filter(e -> canAccessSpace(e.getValue(), space) &&\n\t\t\t\t\t\t\t\t!isIgnoredSpaceForNotifications(e.getValue(), space)).\n\t\t\t\t\t\tmap(e -> e.getKey()).collect(Collectors.toList()), subject, html);\n\t\t\t\ti = 0;\n\t\t\t\tterms.clear();\n\t\t\t}\n\t\t}\n\t\tif (!terms.isEmpty()) {\n\t\t\temailer.sendEmail(buildProfilesMap(pc.findTermInList(Utils.type(User.class), Config._EMAIL, terms)).\n\t\t\t\t\tentrySet().stream().filter(e -> canAccessSpace(e.getValue(), space) &&\n\t\t\t\t\t\t\t!isIgnoredSpaceForNotifications(e.getValue(), space)).\n\t\t\t\t\tmap(e -> e.getKey()).collect(Collectors.toList()), subject, html);\n\t\t}\n\t}\n\n\tprivate Set<String> getFavTagsSubscribers(List<String> tags) {\n\t\tif (!tags.isEmpty()) {\n\t\t\tSet<String> emails = new LinkedHashSet<>();\n\t\t\t// find all user objects even if there are more than 10000 users in the system\n\t\t\tPager pager = new Pager(1, \"_docid\", false, CONF.maxItemsPerPage());\n\t\t\tList<Profile> profiles;\n\t\t\tdo {\n\t\t\t\tprofiles = pc.findQuery(Utils.type(Profile.class),\n\t\t\t\t\t\t\"properties.favtags:(\" + tags.stream().\n\t\t\t\t\t\t\t\tmap(t -> \"\\\"\".concat(t).concat(\"\\\"\")).distinct().\n\t\t\t\t\t\t\t\tcollect(Collectors.joining(\" \")) + \") AND properties.favtagsEmailsEnabled:true\", pager);\n\t\t\t\tif (!profiles.isEmpty()) {\n\t\t\t\t\tList<User> users = pc.readAll(profiles.stream().map(p -> p.getCreatorid()).\n\t\t\t\t\t\t\tdistinct().collect(Collectors.toList()));\n\n\t\t\t\t\tusers.stream().forEach(u -> emails.add(u.getEmail()));\n\t\t\t\t}\n\t\t\t} while (!profiles.isEmpty());\n\t\t\treturn emails;\n\t\t}\n\t\treturn Collections.emptySet();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void sendUpdatedFavTagsNotifications(Post question, List<String> addedTags, HttpServletRequest req) {\n\t\tif (!isFavTagsNotificationAllowed()) {\n\t\t\treturn;\n\t\t}\n\t\t// sends a notification to subscibers of a tag if that tag was added to an existing question\n\t\tif (question != null && !question.isReply() && addedTags != null && !addedTags.isEmpty()) {\n\t\t\tProfile postAuthor = question.getAuthor(); // the current user - same as utils.getAuthUser(req)\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = postAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(question.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(postAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + question.getPostLink(false, false);\n\t\t\tString tagsString = Optional.ofNullable(question.getTags()).orElse(Collections.emptyList()).stream().\n\t\t\t\t\tmap(t -> \"<span class=\\\"tag\\\">\" +\n\t\t\t\t\t\t\t(addedTags.contains(t) ? \"<b>\" + escapeHtml(t) + \"<b>\" : escapeHtml(t)) + \"</span>\").\n\t\t\t\t\tcollect(Collectors.joining(\"&nbsp;\"));\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.favtags.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(question.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.favtags.heading\"), picture, escapeHtml(name)));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2><a href='{0}'>{1}</a></h2><div>{2}</div><br>{3}\",\n\t\t\t\t\tpostURL, escapeHtml(question.getTitle()), body, tagsString));\n\n\t\t\tSet<String> emails = getFavTagsSubscribers(addedTags);\n\t\t\tsendEmailsToSubscribersInSpace(emails, question.getSpace(), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void sendNewPostNotifications(Post question, HttpServletRequest req) {\n\t\tif (question == null) {\n\t\t\treturn;\n\t\t}\n\t\t// the current user - same as utils.getAuthUser(req)\n\t\tProfile postAuthor = question.getAuthor() != null ? question.getAuthor() : pc.read(question.getCreatorid());\n\t\tif (!question.getType().equals(Utils.type(UnapprovedQuestion.class))) {\n\t\t\tif (!isNewPostNotificationAllowed()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = postAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(question.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(postAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + question.getPostLink(false, false);\n\t\t\tString tagsString = Optional.ofNullable(question.getTags()).orElse(Collections.emptyList()).stream().\n\t\t\t\t\tmap(t -> \"<span class=\\\"tag\\\">\" + escapeHtml(t) + \"</span>\").\n\t\t\t\t\tcollect(Collectors.joining(\"&nbsp;\"));\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.newposts.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(question.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.newposts.heading\"), picture, escapeHtml(name)));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2><a href='{0}'>{1}</a></h2><div>{2}</div><br>{3}\",\n\t\t\t\t\tpostURL, escapeHtml(question.getTitle()), body, tagsString));\n\n\t\t\tSet<String> emails = new HashSet<String>(getNotificationSubscribers(EMAIL_ALERTS_PREFIX + \"new_post_subscribers\"));\n\t\t\temails.addAll(getFavTagsSubscribers(question.getTags()));\n\t\t\tsendEmailsToSubscribersInSpace(emails, question.getSpace(), subject, compileEmailTemplate(model));\n\t\t} else if (postsNeedApproval() && question instanceof UnapprovedQuestion) {\n\t\t\tReport rep = new Report();\n\t\t\trep.setDescription(\"New question awaiting approval\");\n\t\t\trep.setSubType(Report.ReportType.OTHER);\n\t\t\trep.setLink(question.getPostLink(false, false));\n\t\t\trep.setAuthorName(postAuthor.getName());\n\t\t\trep.create();\n\t\t}\n\t}\n\n\tpublic void sendReplyNotifications(Post parentPost, Post reply, HttpServletRequest req) {\n\t\t// send email notification to author of post except when the reply is by the same person\n\t\tif (parentPost != null && reply != null && !StringUtils.equals(parentPost.getCreatorid(), reply.getCreatorid())) {\n\t\t\tProfile replyAuthor = reply.getAuthor(); // the current user - same as utils.getAuthUser(req)\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = replyAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(reply.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(replyAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + parentPost.getPostLink(false, false);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.reply.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(reply.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.reply.heading\"),\n\t\t\t\t\tUtils.formatMessage(\"<a href='{0}'>{1}</a>\", postURL, escapeHtml(parentPost.getTitle()))));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2>{0} {1}:</h2><div>{2}</div>\", picture, escapeHtml(name), body));\n\n\t\t\tProfile authorProfile = pc.read(parentPost.getCreatorid());\n\t\t\tif (authorProfile != null) {\n\t\t\t\tUser author = authorProfile.getUser();\n\t\t\t\tif (author != null) {\n\t\t\t\t\tif (authorProfile.getReplyEmailsEnabled()) {\n\t\t\t\t\t\tparentPost.addFollower(author);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (postsNeedApproval() && reply instanceof UnapprovedReply) {\n\t\t\t\tReport rep = new Report();\n\t\t\t\trep.setDescription(\"New reply awaiting approval\");\n\t\t\t\trep.setSubType(Report.ReportType.OTHER);\n\t\t\t\trep.setLink(parentPost.getPostLink(false, false) + \"#post-\" + reply.getId());\n\t\t\t\trep.setAuthorName(reply.getAuthor().getName());\n\t\t\t\trep.create();\n\t\t\t}\n\n\t\t\tif (isReplyNotificationAllowed() && parentPost.hasFollowers()) {\n\t\t\t\temailer.sendEmail(new ArrayList<String>(parentPost.getFollowers().values()),\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t\tcompileEmailTemplate(model));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void sendCommentNotifications(Post parentPost, Comment comment, Profile commentAuthor, HttpServletRequest req) {\n\t\t// send email notification to author of post except when the comment is by the same person\n\t\tif (parentPost != null && comment != null) {\n\t\t\tparentPost.setAuthor(pc.read(Profile.id(parentPost.getCreatorid()))); // parent author is not current user (authUser)\n\t\t\tMap<String, Object> payload = new LinkedHashMap<>(ParaObjectUtils.getAnnotatedFields(comment, false));\n\t\t\tpayload.put(\"parent\", parentPost);\n\t\t\tpayload.put(\"author\", commentAuthor);\n\t\t\ttriggerHookEvent(\"comment.create\", payload);\n\t\t\t// get the last 5-6 commentators who want to be notified - https://github.com/Erudika/scoold/issues/201\n\t\t\tPager p = new Pager(1, Config._TIMESTAMP, false, 5);\n\t\t\tboolean isCommentatorThePostAuthor = StringUtils.equals(parentPost.getCreatorid(), comment.getCreatorid());\n\t\t\tSet<String> last5ids = pc.findChildren(parentPost, Utils.type(Comment.class),\n\t\t\t\t\t\"!(\" + Config._CREATORID + \":\\\"\" + comment.getCreatorid() + \"\\\")\", p).\n\t\t\t\t\tstream().map(c -> c.getCreatorid()).distinct().collect(Collectors.toSet());\n\t\t\tif (!isCommentatorThePostAuthor && !last5ids.contains(parentPost.getCreatorid())) {\n\t\t\t\tlast5ids = new HashSet<>(last5ids);\n\t\t\t\tlast5ids.add(parentPost.getCreatorid());\n\t\t\t}\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tList<Profile> last5commentators = pc.readAll(new ArrayList<>(last5ids));\n\t\t\tlast5commentators = last5commentators.stream().filter(u -> u.getCommentEmailsEnabled()).collect(Collectors.toList());\n\t\t\tpc.readAll(last5commentators.stream().map(u -> u.getCreatorid()).collect(Collectors.toList())).forEach(author -> {\n\t\t\t\tif (isCommentNotificationAllowed()) {\n\t\t\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\t\t\tString name = commentAuthor.getName();\n\t\t\t\t\tString body = Utils.markdownToHtml(comment.getComment());\n\t\t\t\t\tString pic = Utils.formatMessage(\"<img src='{0}' width='25'>\",\n\t\t\t\t\t\tescapeHtmlAttribute(avatarRepository.getLink(commentAuthor, AvatarFormat.Square25)));\n\t\t\t\t\tString postURL = CONF.serverUrl() + parentPost.getPostLink(false, false);\n\t\t\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.comment.subject\"), name, parentPost.getTitle());\n\t\t\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.comment.heading\"),\n\t\t\t\t\t\t\tUtils.formatMessage(\"<a href='{0}'>{1}</a>\", postURL, escapeHtml(parentPost.getTitle()))));\n\t\t\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2>{0} {1}:</h2><div class='panel'>{2}</div>\", pic, escapeHtml(name), body));\n\t\t\t\t\temailer.sendEmail(Arrays.asList(((User) author).getEmail()), subject, compileEmailTemplate(model));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate String escapeHtmlAttribute(String value) {\n\t\treturn StringUtils.trimToEmpty(value)\n\t\t\t\t.replaceAll(\"'\", \"%27\")\n\t\t\t\t.replaceAll(\"\\\"\", \"%22\")\n\t\t\t\t.replaceAll(\"\\\\\\\\\", \"\");\n\t}\n\n\tprivate String escapeHtml(String value) {\n\t\treturn StringEscapeUtils.escapeHtml4(value);\n\t}\n\n\tpublic Profile readAuthUser(HttpServletRequest req) {\n\t\tProfile authUser = null;\n\t\tUser u = pc.me(HttpUtils.getStateParam(CONF.authCookie(), req));\n\t\tif (u != null && isEmailDomainApproved(u.getEmail())) {\n\t\t\treturn getOrCreateProfile(u, req);\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tpublic Profile getAuthUser(HttpServletRequest req) {\n\t\treturn (Profile) req.getAttribute(AUTH_USER_ATTRIBUTE);\n\t}\n\n\tpublic boolean isAuthenticated(HttpServletRequest req) {\n\t\treturn getAuthUser(req) != null;\n\t}\n\n\tpublic boolean isFeedbackEnabled() {\n\t\treturn CONF.feedbackEnabled();\n\t}\n\n\tpublic boolean isNearMeFeatureEnabled() {\n\t\treturn CONF.postsNearMeEnabled();\n\t}\n\n\tpublic boolean isDefaultSpacePublic() {\n\t\treturn CONF.isDefaultSpacePublic();\n\t}\n\n\tpublic boolean isWebhooksEnabled() {\n\t\treturn CONF.webhooksEnabled();\n\t}\n\n\tpublic boolean isAnonymityEnabled() {\n\t\treturn CONF.profileAnonimityEnabled();\n\t}\n\n\tpublic boolean isApiEnabled() {\n\t\treturn CONF.apiEnabled();\n\t}\n\n\tpublic boolean isFooterLinksEnabled() {\n\t\treturn CONF.footerLinksEnabled();\n\t}\n\n\tpublic boolean isNotificationsAllowed() {\n\t\treturn CONF.notificationEmailsAllowed();\n\t}\n\n\tpublic boolean isNewPostNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForNewPostsAllowed();\n\t}\n\n\tpublic boolean isFavTagsNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForFavtagsAllowed();\n\t}\n\n\tpublic boolean isReplyNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForRepliesAllowed();\n\t}\n\n\tpublic boolean isCommentNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForCommentsAllowed();\n\t}\n\n\tpublic boolean isDarkModeEnabled() {\n\t\treturn CONF.darkModeEnabled();\n\t}\n\n\tpublic boolean isSlackAuthEnabled() {\n\t\treturn CONF.slackAuthEnabled();\n\t}\n\n\tpublic static boolean isGravatarEnabled() {\n\t\treturn CONF.gravatarsEnabled();\n\t}\n\n\tpublic static String gravatarPattern() {\n\t\treturn CONF.gravatarsPattern();\n\t}\n\n\tpublic static String getDefaultAvatar() {\n\t\treturn CONF.imagesLink() + \"/anon.svg\";\n\t}\n\n\tpublic static boolean isAvatarUploadsEnabled() {\n\t\treturn isImgurAvatarRepositoryEnabled() || isCloudinaryAvatarRepositoryEnabled();\n\t}\n\n\tpublic static boolean isImgurAvatarRepositoryEnabled() {\n\t\treturn !StringUtils.isBlank(CONF.imgurClientId()) && \"imgur\".equalsIgnoreCase(CONF.avatarRepository());\n\t}\n\n\tpublic static boolean isCloudinaryAvatarRepositoryEnabled() {\n\t\treturn !StringUtils.isBlank(CONF.cloudinaryUrl()) && \"cloudinary\".equalsIgnoreCase(CONF.avatarRepository());\n\t}\n\n\tpublic String getFooterHTML() {\n\t\treturn CONF.footerHtml();\n\t}\n\n\tpublic boolean isNavbarLink1Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarLink1URL());\n\t}\n\n\tpublic String getNavbarLink1URL() {\n\t\treturn CONF.navbarCustomLink1Url();\n\t}\n\n\tpublic String getNavbarLink1Text() {\n\t\treturn CONF.navbarCustomLink1Text();\n\t}\n\n\tpublic boolean isNavbarLink2Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarLink2URL());\n\t}\n\n\tpublic String getNavbarLink2URL() {\n\t\treturn CONF.navbarCustomLink2Url();\n\t}\n\n\tpublic String getNavbarLink2Text() {\n\t\treturn CONF.navbarCustomLink2Text();\n\t}\n\n\tpublic boolean isNavbarMenuLink1Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarMenuLink1URL());\n\t}\n\n\tpublic String getNavbarMenuLink1URL() {\n\t\treturn CONF.navbarCustomMenuLink1Url();\n\t}\n\n\tpublic String getNavbarMenuLink1Text() {\n\t\treturn CONF.navbarCustomMenuLink1Text();\n\t}\n\n\tpublic boolean isNavbarMenuLink2Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarMenuLink2URL());\n\t}\n\n\tpublic String getNavbarMenuLink2URL() {\n\t\treturn CONF.navbarCustomMenuLink2Url();\n\t}\n\n\tpublic String getNavbarMenuLink2Text() {\n\t\treturn CONF.navbarCustomMenuLink2Text();\n\t}\n\n\tpublic boolean alwaysHideCommentForms() {\n\t\treturn CONF.alwaysHideCommentForms();\n\t}\n\n\tpublic Set<String> getCoreScooldTypes() {\n\t\treturn Collections.unmodifiableSet(CORE_TYPES);\n\t}\n\n\tpublic Set<String> getCustomHookEvents() {\n\t\treturn Collections.unmodifiableSet(HOOK_EVENTS);\n\t}\n\n\tpublic Pager getPager(String pageParamName, HttpServletRequest req) {\n\t\treturn pagerFromParams(pageParamName, req);\n\t}\n\n\tpublic Pager pagerFromParams(HttpServletRequest req) {\n\t\treturn pagerFromParams(\"page\", req);\n\t}\n\n\tpublic Pager pagerFromParams(String pageParamName, HttpServletRequest req) {\n\t\tPager p = new Pager(CONF.maxItemsPerPage());\n\t\tp.setPage(Math.min(NumberUtils.toLong(req.getParameter(pageParamName), 1), CONF.maxPages()));\n\t\tp.setLimit(NumberUtils.toInt(req.getParameter(\"limit\"), CONF.maxItemsPerPage()));\n\t\tString lastKey = req.getParameter(\"lastKey\");\n\t\tString sort = req.getParameter(\"sortby\");\n\t\tString desc = req.getParameter(\"desc\");\n\t\tif (!StringUtils.isBlank(desc)) {\n\t\t\tp.setDesc(Boolean.parseBoolean(desc));\n\t\t}\n\t\tif (!StringUtils.isBlank(lastKey)) {\n\t\t\tp.setLastKey(lastKey);\n\t\t}\n\t\tif (!StringUtils.isBlank(sort)) {\n\t\t\tp.setSortby(sort);\n\t\t}\n\t\treturn p;\n\t}\n\n\tpublic String getLanguageCode(HttpServletRequest req) {\n\t\tString langCodeFromConfig = CONF.defaultLanguageCode();\n\t\tString cookieLoc = getCookieValue(req, CONF.localeCookie());\n\t\tLocale fromReq = (req == null) ? Locale.getDefault() : req.getLocale();\n\t\tLocale requestLocale = langutils.getProperLocale(fromReq.toString());\n\t\treturn (cookieLoc != null) ? cookieLoc : (StringUtils.isBlank(langCodeFromConfig) ?\n\t\t\t\trequestLocale.getLanguage() : langutils.getProperLocale(langCodeFromConfig).getLanguage());\n\t}\n\n\tpublic Locale getCurrentLocale(String langname) {\n\t\tLocale currentLocale = langutils.getProperLocale(langname);\n\t\tif (currentLocale == null) {\n\t\t\tcurrentLocale = langutils.getProperLocale(langutils.getDefaultLanguageCode());\n\t\t}\n\t\treturn currentLocale;\n\t}\n\n\tpublic Map<String, String> getLang(HttpServletRequest req) {\n\t\treturn getLang(getCurrentLocale(getLanguageCode(req)));\n\t}\n\n\tpublic Map<String, String> getLang(Locale currentLocale) {\n\t\tMap<String, String> lang = langutils.readLanguage(currentLocale.toString());\n\t\tif (lang == null || lang.isEmpty()) {\n\t\t\tlang = langutils.getDefaultLanguage();\n\t\t}\n\t\treturn lang;\n\t}\n\n\tpublic boolean isLanguageRTL(String langCode) {\n\t\treturn StringUtils.equalsAnyIgnoreCase(langCode, \"ar\", \"he\", \"dv\", \"iw\", \"fa\", \"ps\", \"sd\", \"ug\", \"ur\", \"yi\");\n\t}\n\n\tpublic void fetchProfiles(List<? extends ParaObject> objects) {\n\t\tif (objects == null || objects.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tMap<String, String> authorids = new HashMap<String, String>(objects.size());\n\t\tMap<String, Profile> authors = new HashMap<String, Profile>(objects.size());\n\t\tfor (ParaObject obj : objects) {\n\t\t\tif (obj.getCreatorid() != null) {\n\t\t\t\tauthorids.put(obj.getId(), obj.getCreatorid());\n\t\t\t}\n\t\t}\n\t\tList<String> ids = new ArrayList<String>(new HashSet<String>(authorids.values()));\n\t\tif (ids.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t// read all post authors in batch\n\t\tfor (ParaObject author : pc.readAll(ids)) {\n\t\t\tauthors.put(author.getId(), (Profile) author);\n\t\t}\n\t\t// add system profile\n\t\tauthors.put(API_USER.getId(), API_USER);\n\t\t// set author object for each post\n\t\tfor (ParaObject obj : objects) {\n\t\t\tif (obj instanceof Post) {\n\t\t\t\t((Post) obj).setAuthor(authors.get(authorids.get(obj.getId())));\n\t\t\t} else if (obj instanceof Revision) {\n\t\t\t\t((Revision) obj).setAuthor(authors.get(authorids.get(obj.getId())));\n\t\t\t}\n\t\t}\n\t}\n\n\t//get the comments for each answer and the question\n\tpublic void getComments(List<Post> allPosts) {\n\t\tMap<String, List<Comment>> allComments = new HashMap<String, List<Comment>>();\n\t\tList<String> allCommentIds = new ArrayList<String>();\n\t\tList<Post> forUpdate = new ArrayList<Post>(allPosts.size());\n\t\t// get the comment ids of the first 5 comments for each post\n\t\tfor (Post post : allPosts) {\n\t\t\t// not set => read comments if any and embed ids in post object\n\t\t\tif (post.getCommentIds() == null) {\n\t\t\t\tforUpdate.add(reloadFirstPageOfComments(post));\n\t\t\t\tallComments.put(post.getId(), post.getComments());\n\t\t\t} else {\n\t\t\t\t// ids are set => add them to list for bulk read\n\t\t\t\tallCommentIds.addAll(post.getCommentIds());\n\t\t\t}\n\t\t}\n\t\tif (!allCommentIds.isEmpty()) {\n\t\t\t// read all comments for all posts on page in bulk\n\t\t\tfor (ParaObject comment : pc.readAll(allCommentIds)) {\n\t\t\t\tList<Comment> postComments = allComments.get(comment.getParentid());\n\t\t\t\tif (postComments == null) {\n\t\t\t\t\tallComments.put(comment.getParentid(), new ArrayList<Comment>());\n\t\t\t\t}\n\t\t\t\tallComments.get(comment.getParentid()).add((Comment) comment);\n\t\t\t}\n\t\t}\n\t\t// embed comments in each post for use within the view\n\t\tfor (Post post : allPosts) {\n\t\t\tList<Comment> cl = allComments.get(post.getId());\n\t\t\tlong clSize = (cl == null) ? 0 : cl.size();\n\t\t\tif (post.getCommentIds().size() != clSize) {\n\t\t\t\tforUpdate.add(reloadFirstPageOfComments(post));\n\t\t\t\tclSize = post.getComments().size();\n\t\t\t} else {\n\t\t\t\tpost.setComments(cl);\n\t\t\t\tif (clSize == post.getItemcount().getLimit() && pc.getCount(Utils.type(Comment.class),\n\t\t\t\t\t\tCollections.singletonMap(\"parentid\", post.getId())) > clSize) {\n\t\t\t\t\tclSize++; // hack to show the \"more\" button\n\t\t\t\t}\n\t\t\t}\n\t\t\tpost.getItemcount().setCount(clSize);\n\t\t}\n\t\tif (!forUpdate.isEmpty()) {\n\t\t\tpc.updateAll(allPosts);\n\t\t}\n\t}\n\n\tpublic Post reloadFirstPageOfComments(Post post) {\n\t\tList<Comment> commentz = pc.getChildren(post, Utils.type(Comment.class), post.getItemcount());\n\t\tArrayList<String> ids = new ArrayList<String>(commentz.size());\n\t\tfor (Comment comment : commentz) {\n\t\t\tids.add(comment.getId());\n\t\t}\n\t\tpost.setCommentIds(ids);\n\t\tpost.setComments(commentz);\n\t\treturn post;\n\t}\n\n\tpublic void updateViewCount(Post showPost, HttpServletRequest req, HttpServletResponse res) {\n\t\t//do not count views from author\n\t\tif (showPost != null && !isMine(showPost, getAuthUser(req))) {\n\t\t\tString postviews = StringUtils.trimToEmpty(HttpUtils.getStateParam(\"postviews\", req));\n\t\t\tif (!StringUtils.contains(postviews, showPost.getId())) {\n\t\t\t\tlong views = (showPost.getViewcount() == null) ? 0 : showPost.getViewcount();\n\t\t\t\tshowPost.setViewcount(views + 1); //increment count\n\t\t\t\tHttpUtils.setStateParam(\"postviews\", (postviews.isEmpty() ? \"\" : postviews + \".\") + showPost.getId(),\n\t\t\t\t\t\treq, res);\n\t\t\t\tpc.update(showPost);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic List<Post> getSimilarPosts(Post showPost, Pager pager) {\n\t\tList<Post> similarquestions = Collections.emptyList();\n\t\tif (!showPost.isReply()) {\n\t\t\tString likeTxt = Utils.stripAndTrim((showPost.getTitle() + \" \" + showPost.getBody()));\n\t\t\tif (likeTxt.length() > 1000) {\n\t\t\t\t// read object on the server to prevent \"URI too long\" errors\n\t\t\t\tsimilarquestions = pc.findSimilar(showPost.getType(), showPost.getId(),\n\t\t\t\t\t\tnew String[]{\"properties.title\", \"properties.body\", \"properties.tags\"},\n\t\t\t\t\t\t\"id:\" + showPost.getId(), pager);\n\t\t\t} else if (!StringUtils.isBlank(likeTxt)) {\n\t\t\t\tsimilarquestions = pc.findSimilar(showPost.getType(), showPost.getId(),\n\t\t\t\t\t\tnew String[]{\"properties.title\", \"properties.body\", \"properties.tags\"}, likeTxt, pager);\n\t\t\t}\n\t\t}\n\t\treturn similarquestions;\n\t}\n\n\tpublic String getFirstLinkInPost(String postBody) {\n\t\tpostBody = StringUtils.trimToEmpty(postBody);\n\t\tPattern p = Pattern.compile(\"^!?\\\\[.*\\\\]\\\\((.+)\\\\)\");\n\t\tMatcher m = p.matcher(postBody);\n\n\t\tif (m.find()) {\n\t\t\treturn m.group(1);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic boolean param(HttpServletRequest req, String param) {\n\t\treturn req.getParameter(param) != null;\n\t}\n\n\tpublic boolean isAjaxRequest(HttpServletRequest req) {\n\t\treturn req.getHeader(\"X-Requested-With\") != null || req.getParameter(\"X-Requested-With\") != null;\n\t}\n\n\tpublic boolean isApiRequest(HttpServletRequest req) {\n\t\treturn req.getRequestURI().startsWith(CONF.serverContextPath() + \"/api/\") || req.getRequestURI().equals(CONF.serverContextPath() + \"/api\");\n\t}\n\n\tpublic boolean isAdmin(Profile authUser) {\n\t\treturn authUser != null && User.Groups.ADMINS.toString().equals(authUser.getGroups());\n\t}\n\n\tpublic boolean isMod(Profile authUser) {\n\t\treturn authUser != null && (isAdmin(authUser) || User.Groups.MODS.toString().equals(authUser.getGroups()));\n\t}\n\n\tpublic boolean isRecognizedAsAdmin(User u) {\n\t\treturn u.isAdmin() || ADMINS.contains(u.getIdentifier()) ||\n\t\t\t\tADMINS.stream().filter(s -> s.equalsIgnoreCase(u.getEmail())).findAny().isPresent();\n\t}\n\n\tpublic boolean canComment(Profile authUser, HttpServletRequest req) {\n\t\treturn isAuthenticated(req) && ((authUser.hasBadge(ENTHUSIAST) || CONF.newUsersCanComment() || isMod(authUser)));\n\t}\n\n\tpublic boolean postsNeedApproval() {\n\t\treturn CONF.postsNeedApproval();\n\t}\n\n\tpublic boolean postNeedsApproval(Profile authUser) {\n\t\treturn postsNeedApproval() && authUser.getVotes() < CONF.postsReputationThreshold() && !isMod(authUser);\n\t}\n\n\tpublic String getWelcomeMessage(Profile authUser) {\n\t\treturn authUser == null ? CONF.welcomeMessage() : \"\";\n\t}\n\n\tpublic String getWelcomeMessageOnLogin(Profile authUser) {\n\t\tif (authUser == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString welcomeMsgOnlogin = CONF.welcomeMessageOnLogin();\n\t\tif (StringUtils.contains(welcomeMsgOnlogin, \"{{\")) {\n\t\t\twelcomeMsgOnlogin = Utils.compileMustache(Collections.singletonMap(\"user\",\n\t\t\t\t\tParaObjectUtils.getAnnotatedFields(authUser, false)), welcomeMsgOnlogin);\n\t\t}\n\t\treturn welcomeMsgOnlogin;\n\t}\n\n\tpublic boolean isDefaultSpace(String space) {\n\t\treturn DEFAULT_SPACE.equalsIgnoreCase(getSpaceId(space));\n\t}\n\n\tpublic String getDefaultSpace() {\n\t\treturn DEFAULT_SPACE;\n\t}\n\n\tpublic boolean isAllSpaces(String space) {\n\t\treturn ALL_MY_SPACES.equalsIgnoreCase(getSpaceId(space));\n\t}\n\n\tpublic List<Sysprop> getAllSpaces() {\n\t\tif (allSpaces == null) {\n\t\t\tallSpaces = new LinkedList<>(pc.findQuery(\"scooldspace\", \"*\", new Pager(Config.DEFAULT_LIMIT)));\n\t\t}\n\t\treturn allSpaces;\n\t}\n\n\tpublic boolean canAccessSpace(Profile authUser, String targetSpaceId) {\n\t\tif (authUser == null) {\n\t\t\treturn isDefaultSpacePublic() && isDefaultSpace(targetSpaceId);\n\t\t}\n\t\tif (isMod(authUser) || isAllSpaces(targetSpaceId)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (StringUtils.isBlank(targetSpaceId) || targetSpaceId.length() < 2) {\n\t\t\treturn false;\n\t\t}\n\t\t// this is confusing - let admins control who is in the default space\n\t\t//if (isDefaultSpace(targetSpaceId)) {\n\t\t//\t// can user access the default space (blank)\n\t\t//\treturn isDefaultSpacePublic() || isMod(authUser) || !authUser.hasSpaces();\n\t\t//}\n\t\tboolean isMemberOfSpace = false;\n\t\tfor (String space : authUser.getSpaces()) {\n\t\t\tString spaceId = getSpaceId(targetSpaceId);\n\t\t\tif (StringUtils.startsWithIgnoreCase(space, spaceId + Para.getConfig().separator()) || space.equalsIgnoreCase(spaceId)) {\n\t\t\t\tisMemberOfSpace = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn isMemberOfSpace;\n\t}\n\n\tprivate boolean isIgnoredSpaceForNotifications(Profile profile, String space) {\n\t\treturn profile != null && !profile.getFavspaces().isEmpty() && !profile.getFavspaces().contains(getSpaceId(space));\n\t}\n\n\tpublic String getSpaceIdFromCookie(Profile authUser, HttpServletRequest req) {\n\t\tif (isAdmin(authUser) && req.getParameter(\"space\") != null) {\n\t\t\tSysprop s = pc.read(getSpaceId(req.getParameter(\"space\"))); // API override\n\t\t\tif (s != null) {\n\t\t\t\treturn s.getId() + Para.getConfig().separator() + s.getName();\n\t\t\t}\n\t\t}\n\t\tString spaceAttr = (String) req.getAttribute(CONF.spaceCookie());\n\t\tString spaceValue = StringUtils.isBlank(spaceAttr) ? Utils.base64dec(getCookieValue(req, CONF.spaceCookie())) : spaceAttr;\n\t\tString space = getValidSpaceId(authUser, spaceValue);\n\t\treturn (isAllSpaces(space) && isMod(authUser)) ? DEFAULT_SPACE : verifyExistingSpace(authUser, space);\n\t}\n\n\tpublic void storeSpaceIdInCookie(String space, HttpServletRequest req, HttpServletResponse res) {\n\t\t// directly set the space on the requests, overriding the cookie value\n\t\t// used for setting the space from a direct URL to a particular space\n\t\treq.setAttribute(CONF.spaceCookie(), space);\n\t\tHttpUtils.setRawCookie(CONF.spaceCookie(), Utils.base64encURL(space.getBytes()),\n\t\t\t\treq, res, true, \"Strict\", StringUtils.isBlank(space) ? 0 : 365 * 24 * 60 * 60);\n\t}\n\n\tpublic String verifyExistingSpace(Profile authUser, String space) {\n\t\tif (!isDefaultSpace(space) && !isAllSpaces(space)) {\n\t\t\tSysprop s = pc.read(getSpaceId(space));\n\t\t\tif (s == null) {\n\t\t\t\tif (authUser != null) {\n\t\t\t\t\tauthUser.removeSpace(space);\n\t\t\t\t\tpc.update(authUser);\n\t\t\t\t}\n\t\t\t\treturn DEFAULT_SPACE;\n\t\t\t} else {\n\t\t\t\treturn s.getId() + Para.getConfig().separator() + s.getName(); // updates current space name in case it was renamed\n\t\t\t}\n\t\t}\n\t\treturn space;\n\t}\n\n\tpublic String getValidSpaceIdExcludingAll(Profile authUser, String space, HttpServletRequest req) {\n\t\tString s = StringUtils.isBlank(space) ? getSpaceIdFromCookie(authUser, req) : space;\n\t\treturn isAllSpaces(s) ? DEFAULT_SPACE : s;\n\t}\n\n\tprivate String getValidSpaceId(Profile authUser, String space) {\n\t\tif (authUser == null) {\n\t\t\treturn DEFAULT_SPACE;\n\t\t}\n\t\tString defaultSpace = authUser.hasSpaces() ? ALL_MY_SPACES : DEFAULT_SPACE;\n\t\tString s = canAccessSpace(authUser, space) ? space : defaultSpace;\n\t\treturn StringUtils.isBlank(s) ? DEFAULT_SPACE : s;\n\t}\n\n\tpublic String getSpaceName(String space) {\n\t\tif (DEFAULT_SPACE.equalsIgnoreCase(space)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn RegExUtils.replaceAll(space, \"^scooldspace:[^:]+:\", \"\");\n\t}\n\n\tpublic String getSpaceId(String space) {\n\t\tif (StringUtils.isBlank(space)) {\n\t\t\treturn DEFAULT_SPACE;\n\t\t}\n\t\tString s = StringUtils.contains(space, Para.getConfig().separator()) ?\n\t\t\t\tStringUtils.substring(space, 0, space.lastIndexOf(Para.getConfig().separator())) : \"scooldspace:\" + space;\n\t\treturn \"scooldspace\".equals(s) ? space : s;\n\t}\n\n\tpublic String getSpaceFilteredQuery(Profile authUser, String currentSpace) {\n\t\treturn canAccessSpace(authUser, currentSpace) ? getSpaceFilter(authUser, currentSpace) : \"\";\n\t}\n\n\tpublic String getSpaceFilteredQuery(HttpServletRequest req) {\n\t\tProfile authUser = getAuthUser(req);\n\t\tString currentSpace = getSpaceIdFromCookie(authUser, req);\n\t\treturn getSpaceFilteredQuery(authUser, currentSpace);\n\t}\n\n\tpublic String getSpaceFilteredQuery(HttpServletRequest req, boolean isSpaceFiltered, String spaceFilter, String defaultQuery) {\n\t\tProfile authUser = getAuthUser(req);\n\t\tString currentSpace = getSpaceIdFromCookie(authUser, req);\n\t\tif (isSpaceFiltered) {\n\t\t\treturn StringUtils.isBlank(spaceFilter) ? getSpaceFilter(authUser, currentSpace) : spaceFilter;\n\t\t}\n\t\treturn canAccessSpace(authUser, currentSpace) ? defaultQuery : \"\";\n\t}\n\n\tpublic String getSpaceFilter(Profile authUser, String spaceId) {\n\t\tif (isAllSpaces(spaceId)) {\n\t\t\tif (authUser != null && authUser.hasSpaces()) {\n\t\t\t\treturn \"(\" + authUser.getSpaces().stream().map(s -> \"properties.space:\\\"\" + s + \"\\\"\").\n\t\t\t\t\t\tcollect(Collectors.joining(\" OR \")) + \")\";\n\t\t\t} else {\n\t\t\t\treturn \"properties.space:\\\"\" + DEFAULT_SPACE + \"\\\"\";\n\t\t\t}\n\t\t} else if (isDefaultSpace(spaceId) && isMod(authUser)) { // DO NOT MODIFY!\n\t\t\treturn \"*\";\n\t\t} else {\n\t\t\treturn \"properties.space:\\\"\" + spaceId + \"\\\"\";\n\t\t}\n\t}\n\n\tpublic Sysprop buildSpaceObject(String space) {\n\t\tspace = Utils.abbreviate(space, 255);\n\t\tspace = space.replaceAll(Para.getConfig().separator(), \"\");\n\t\tString spaceId = getSpaceId(Utils.noSpaces(Utils.stripAndTrim(space, \" \"), \"-\"));\n\t\tSysprop s = new Sysprop(spaceId);\n\t\ts.setType(\"scooldspace\");\n\t\ts.setName(space);\n\t\treturn s;\n\t}\n\n\tpublic String sanitizeQueryString(String query, HttpServletRequest req) {\n\t\tString qf = getSpaceFilteredQuery(req);\n\t\tString defaultQuery = \"*\";\n\t\tString q = StringUtils.trimToEmpty(query);\n\t\tif (qf.isEmpty() || qf.length() > 1) {\n\t\t\tq = q.replaceAll(\"[\\\\?<>]\", \"\").trim();\n\t\t\tq = q.replaceAll(\"$[\\\\*]*\", \"\");\n\t\t\tq = RegExUtils.removeAll(q, \"AND\");\n\t\t\tq = RegExUtils.removeAll(q, \"OR\");\n\t\t\tq = RegExUtils.removeAll(q, \"NOT\");\n\t\t\tq = q.trim();\n\t\t\tdefaultQuery = \"\";\n\t\t}\n\t\tif (qf.isEmpty()) {\n\t\t\treturn defaultQuery;\n\t\t} else if (\"*\".equals(qf)) {\n\t\t\treturn q;\n\t\t} else if (\"*\".equals(q)) {\n\t\t\treturn qf;\n\t\t} else {\n\t\t\tif (q.isEmpty()) {\n\t\t\t\treturn qf;\n\t\t\t} else {\n\t\t\t\treturn qf + \" AND \" + q;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic String getUsersSearchQuery(String qs, String spaceFilter) {\n\t\tqs = Utils.stripAndTrim(qs).toLowerCase();\n\t\tif (!StringUtils.isBlank(qs)) {\n\t\t\tString wildcardLower = qs.matches(\"[\\\\p{IsAlphabetic}]*\") ? qs + \"*\" : qs;\n\t\t\tString wildcardUpper = StringUtils.capitalize(wildcardLower);\n\t\t\tString template = \"(name:({1}) OR name:({2} OR {3}) OR properties.location:({0}) OR \"\n\t\t\t\t\t+ \"properties.aboutme:({0}) OR properties.groups:({0}))\";\n\t\t\tqs = (StringUtils.isBlank(spaceFilter) ? \"\" : spaceFilter + \" AND \") +\n\t\t\t\t\tUtils.formatMessage(template, qs, StringUtils.capitalize(qs), wildcardLower, wildcardUpper);\n\t\t} else {\n\t\t\tqs = StringUtils.isBlank(spaceFilter) ? \"*\" : spaceFilter;\n\t\t}\n\t\treturn qs;\n\t}\n\n\tpublic List<Post> fullQuestionsSearch(String query, Pager... pager) {\n\t\tString typeFilter = Config._TYPE + \":(\" + String.join(\" OR \",\n\t\t\t\t\t\tUtils.type(Question.class), Utils.type(Reply.class), Utils.type(Comment.class)) + \")\";\n\t\tString qs = StringUtils.isBlank(query) || query.startsWith(\"*\") ? typeFilter : query + \" AND \" + typeFilter;\n\t\tList<ParaObject> mixedResults = pc.findQuery(\"\", qs, pager);\n\t\tPredicate<ParaObject> isQuestion =  obj -> obj.getType().equals(Utils.type(Question.class));\n\n\t\tMap<String, ParaObject> idsToQuestions = new HashMap<>(mixedResults.stream().filter(isQuestion).\n\t\t\t\tcollect(Collectors.toMap(q -> q.getId(), q -> q)));\n\t\tSet<String> toRead = new LinkedHashSet<>();\n\t\tmixedResults.stream().filter(isQuestion.negate()).forEach(obj -> {\n\t\t\tif (!idsToQuestions.containsKey(obj.getParentid())) {\n\t\t\t\ttoRead.add(obj.getParentid());\n\t\t\t}\n\t\t});\n\t\t// find all parent posts but this excludes parents of parents - i.e. won't work for comments in answers\n\t\tList<Post> parentPostsLevel1 = pc.readAll(new ArrayList<>(toRead));\n\t\tparentPostsLevel1.stream().filter(isQuestion).forEach(q -> idsToQuestions.put(q.getId(), q));\n\n\t\ttoRead.clear();\n\n\t\t// read parents of parents if any\n\t\tparentPostsLevel1.stream().filter(isQuestion.negate()).forEach(obj -> {\n\t\t\tif (!idsToQuestions.containsKey(obj.getParentid())) {\n\t\t\t\ttoRead.add(obj.getParentid());\n\t\t\t}\n\t\t});\n\t\tList<Post> parentPostsLevel2 = pc.readAll(new ArrayList<>(toRead));\n\t\tparentPostsLevel2.stream().forEach(q -> idsToQuestions.put(q.getId(), q));\n\n\t\tArrayList<Post> results = new ArrayList<Post>(idsToQuestions.size());\n\t\tfor (ParaObject result : idsToQuestions.values()) {\n\t\t\tif (result instanceof Post) {\n\t\t\t\tresults.add((Post) result);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic String getMacroCode(String key) {\n\t\treturn WHITELISTED_MACROS.getOrDefault(key, \"\");\n\t}\n\n\tpublic boolean isMine(Post showPost, Profile authUser) {\n\t\t// author can edit, mods can edit & ppl with rep > 100 can edit\n\t\treturn showPost != null && authUser != null ? authUser.getId().equals(showPost.getCreatorid()) : false;\n\t}\n\n\tpublic boolean canEdit(Post showPost, Profile authUser) {\n\t\treturn authUser != null ? (authUser.hasBadge(TEACHER) || isMod(authUser) || isMine(showPost, authUser)) : false;\n\t}\n\n\tpublic boolean canDelete(Post showPost, Profile authUser) {\n\t\treturn canDelete(showPost, authUser, null);\n\t}\n\n\tpublic boolean canDelete(Post showPost, Profile authUser, String approvedAnswerId) {\n\t\tif (authUser == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CONF.deleteProtectionEnabled()) {\n\t\t\tif (showPost.isReply()) {\n\t\t\t\treturn isMine(showPost, authUser) && !StringUtils.equals(approvedAnswerId, showPost.getId());\n\t\t\t} else {\n\t\t\t\treturn isMine(showPost, authUser) && showPost.getAnswercount() == 0;\n\t\t\t}\n\t\t}\n\t\treturn isMine(showPost, authUser);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <P extends ParaObject> P populate(HttpServletRequest req, P pobj, String... paramName) {\n\t\tif (pobj == null || paramName == null) {\n\t\t\treturn pobj;\n\t\t}\n\t\tMap<String, Object> data = new LinkedHashMap<String, Object>();\n\t\tif (isApiRequest(req)) {\n\t\t\ttry {\n\t\t\t\tdata = (Map<String, Object>) req.getAttribute(REST_ENTITY_ATTRIBUTE);\n\t\t\t\tif (data == null) {\n\t\t\t\t\tdata = ParaObjectUtils.getJsonReader(Map.class).readValue(req.getInputStream());\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\tlogger.error(null, ex);\n\t\t\t\tdata = Collections.emptyMap();\n\t\t\t}\n\t\t} else {\n\t\t\tfor (String param : paramName) {\n\t\t\t\tString[] values;\n\t\t\t\tif (param.matches(\".+?\\\\|.$\")) {\n\t\t\t\t\t// convert comma-separated value to list of strings\n\t\t\t\t\tString cleanParam = param.substring(0, param.length() - 2);\n\t\t\t\t\tvalues = req.getParameterValues(cleanParam);\n\t\t\t\t\tString firstValue = (values != null && values.length > 0) ? values[0] : null;\n\t\t\t\t\tString separator = param.substring(param.length() - 1);\n\t\t\t\t\tif (!StringUtils.isBlank(firstValue)) {\n\t\t\t\t\t\tdata.put(cleanParam, Arrays.asList(firstValue.split(separator)));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalues = req.getParameterValues(param);\n\t\t\t\t\tif (values != null && values.length > 0) {\n\t\t\t\t\t\tdata.put(param, values.length > 1 ? Arrays.asList(values) :\n\t\t\t\t\t\t\t\tArrays.asList(values).iterator().next());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!data.isEmpty()) {\n\t\t\tParaObjectUtils.setAnnotatedFields(pobj, data, null);\n\t\t}\n\t\treturn pobj;\n\t}\n\n\tpublic <P extends ParaObject> Map<String, String> validate(P pobj) {\n\t\tHashMap<String, String> error = new HashMap<String, String>();\n\t\tif (pobj != null) {\n\t\t\tSet<ConstraintViolation<P>> errors = ValidationUtils.getValidator().validate(pobj);\n\t\t\tfor (ConstraintViolation<P> err : errors) {\n\t\t\t\terror.put(err.getPropertyPath().toString(), err.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn error;\n\t}\n\n\tpublic String getFullAvatarURL(Profile profile, AvatarFormat format) {\n\t\treturn avatarRepository.getLink(profile, format);\n\t}\n\n\tpublic void clearSession(HttpServletRequest req, HttpServletResponse res) {\n\t\tif (req != null) {\n\t\t\tString jwt = HttpUtils.getStateParam(CONF.authCookie(), req);\n\t\t\tif (!StringUtils.isBlank(jwt)) {\n\t\t\t\tif (CONF.oneSessionPerUser()) {\n\t\t\t\t\tsynchronized (pc) {\n\t\t\t\t\t\tpc.setAccessToken(jwt);\n\t\t\t\t\t\tpc.revokeAllTokens();\n\t\t\t\t\t\tpc.signOut();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHttpUtils.removeStateParam(CONF.authCookie(), req, res);\n\t\t\t}\n\t\t\tHttpUtils.removeStateParam(\"dark-mode\", req, res);\n\t\t}\n\t}\n\n\tpublic boolean addBadgeOnce(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadge(authUser, b, condition && !authUser.hasBadge(b), false);\n\t}\n\n\tpublic boolean addBadgeOnceAndUpdate(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadgeAndUpdate(authUser, b, condition && authUser != null && !authUser.hasBadge(b));\n\t}\n\n\tpublic boolean addBadgeAndUpdate(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadge(authUser, b, condition, true);\n\t}\n\n\tpublic boolean addBadge(Profile user, Profile.Badge b, boolean condition, boolean update) {\n\t\tif (user != null && condition) {\n\t\t\tString newb = StringUtils.isBlank(user.getNewbadges()) ? \"\" : user.getNewbadges().concat(\",\");\n\t\t\tnewb = newb.concat(b.toString());\n\n\t\t\tuser.addBadge(b);\n\t\t\tuser.setNewbadges(newb);\n\t\t\tif (update) {\n\t\t\t\tuser.update();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic List<String> checkForBadges(Profile authUser, HttpServletRequest req) {\n\t\tList<String> badgelist = new ArrayList<String>();\n\t\tif (authUser != null && !isAjaxRequest(req)) {\n\t\t\tlong oneYear = authUser.getTimestamp() + (365 * 24 * 60 * 60 * 1000);\n\t\t\taddBadgeOnce(authUser, Profile.Badge.ENTHUSIAST, authUser.getVotes() >= CONF.enthusiastIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.FRESHMAN, authUser.getVotes() >= CONF.freshmanIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.SCHOLAR, authUser.getVotes() >= CONF.scholarIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.TEACHER, authUser.getVotes() >= CONF.teacherIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.PROFESSOR, authUser.getVotes() >= CONF.professorIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.GEEK, authUser.getVotes() >= CONF.geekIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.SENIOR, (System.currentTimeMillis() - authUser.getTimestamp()) >= oneYear);\n\n\t\t\tif (!StringUtils.isBlank(authUser.getNewbadges())) {\n\t\t\t\tbadgelist.addAll(Arrays.asList(authUser.getNewbadges().split(\",\")));\n\t\t\t\tauthUser.setNewbadges(null);\n\t\t\t\tauthUser.update();\n\t\t\t}\n\t\t}\n\t\treturn badgelist;\n\t}\n\n\tprivate String loadEmailTemplate(String name) {\n\t\treturn loadResource(\"emails/\" + name + \".html\");\n\t}\n\n\tpublic String loadResource(String filePath) {\n\t\tif (filePath == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (FILE_CACHE.containsKey(filePath)) {\n\t\t\treturn FILE_CACHE.get(filePath);\n\t\t}\n\t\tString template = \"\";\n\t\ttry (InputStream in = getClass().getClassLoader().getResourceAsStream(filePath)) {\n\t\t\ttry (Scanner s = new Scanner(in).useDelimiter(\"\\\\A\")) {\n\t\t\t\ttemplate = s.hasNext() ? s.next() : \"\";\n\t\t\t\tif (!StringUtils.isBlank(template)) {\n\t\t\t\t\tFILE_CACHE.put(filePath, template);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tlogger.info(\"Couldn't load resource '{}'.\", filePath);\n\t\t}\n\t\treturn template;\n\t}\n\n\tpublic String compileEmailTemplate(Map<String, Object> model) {\n\t\tmodel.put(\"footerhtml\", CONF.emailsFooterHtml());\n\t\tString fqdn = CONF.rewriteInboundLinksWithFQDN();\n\t\tif (!StringUtils.isBlank(fqdn)) {\n\t\t\tmodel.entrySet().stream().filter(e -> (e.getValue() instanceof String)).forEachOrdered(e -> {\n\t\t\t\tmodel.put(e.getKey(), StringUtils.replace((String) e.getValue(), CONF.serverUrl(), fqdn));\n\t\t\t});\n\t\t}\n\t\treturn Utils.compileMustache(model, loadEmailTemplate(\"notify\"));\n\t}\n\n\tpublic boolean isValidJWToken(String jwt) {\n\t\tString appSecretKey = CONF.appSecretKey();\n\t\tString masterSecretKey = CONF.paraSecretKey();\n\t\treturn isValidJWToken(appSecretKey, jwt) || isValidJWToken(masterSecretKey, jwt);\n\t}\n\n\tboolean isValidJWToken(String secret, String jwt) {\n\t\ttry {\n\t\t\tif (secret != null && jwt != null) {\n\t\t\t\tJWSVerifier verifier = new MACVerifier(secret);\n\t\t\t\tSignedJWT sjwt = SignedJWT.parse(jwt);\n\t\t\t\tif (sjwt.verify(verifier)) {\n\t\t\t\t\tDate referenceTime = new Date();\n\t\t\t\t\tJWTClaimsSet claims = sjwt.getJWTClaimsSet();\n\n\t\t\t\t\tDate expirationTime = claims.getExpirationTime();\n\t\t\t\t\tDate notBeforeTime = claims.getNotBeforeTime();\n\t\t\t\t\tString jti = claims.getJWTID();\n\t\t\t\t\tboolean expired = expirationTime != null && expirationTime.before(referenceTime);\n\t\t\t\t\tboolean notYetValid = notBeforeTime != null && notBeforeTime.after(referenceTime);\n\t\t\t\t\tboolean jtiRevoked = isApiKeyRevoked(jti, expired);\n\t\t\t\t\treturn !(expired || notYetValid || jtiRevoked);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JOSEException e) {\n\t\t\tlogger.warn(null, e);\n\t\t} catch (ParseException ex) {\n\t\t\tlogger.warn(null, ex);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic SignedJWT generateJWToken(Map<String, Object> claims) {\n\t\treturn generateJWToken(claims, CONF.jwtExpiresAfterSec());\n\t}\n\n\tpublic SignedJWT generateJWToken(Map<String, Object> claims, long validitySeconds) {\n\t\tString secret = CONF.appSecretKey();\n\t\tif (!StringUtils.isBlank(secret)) {\n\t\t\ttry {\n\t\t\t\tDate now = new Date();\n\t\t\t\tJWTClaimsSet.Builder claimsSet = new JWTClaimsSet.Builder();\n\t\t\t\tclaimsSet.issueTime(now);\n\t\t\t\tif (validitySeconds > 0) {\n\t\t\t\t\tclaimsSet.expirationTime(new Date(now.getTime() + (validitySeconds * 1000)));\n\t\t\t\t}\n\t\t\t\tclaimsSet.notBeforeTime(now);\n\t\t\t\tclaimsSet.claim(Config._APPID, CONF.paraAccessKey());\n\t\t\t\tclaims.entrySet().forEach((claim) -> claimsSet.claim(claim.getKey(), claim.getValue()));\n\t\t\t\tJWSSigner signer = new MACSigner(secret);\n\t\t\t\tSignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet.build());\n\t\t\t\tsignedJWT.sign(signer);\n\t\t\t\treturn signedJWT;\n\t\t\t} catch (JOSEException e) {\n\t\t\t\tlogger.warn(\"Unable to sign JWT: {}.\", e.getMessage());\n\t\t\t}\n\t\t}\n\t\tlogger.error(\"Failed to generate JWT token - app_secret_key is blank.\");\n\t\treturn null;\n\t}\n\n\tpublic boolean isApiKeyRevoked(String jti, boolean expired) {\n\t\tif (StringUtils.isBlank(jti)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (API_KEYS.isEmpty()) {\n\t\t\tSysprop s = pc.read(\"api_keys\");\n\t\t\tif (s != null) {\n\t\t\t\tAPI_KEYS.putAll(s.getProperties());\n\t\t\t}\n\t\t}\n\t\tif (API_KEYS.containsKey(jti) && expired) {\n\t\t\trevokeApiKey(jti);\n\t\t}\n\t\treturn !API_KEYS.containsKey(jti);\n\t}\n\n\tpublic void registerApiKey(String jti, String jwt) {\n\t\tif (StringUtils.isBlank(jti) || StringUtils.isBlank(jwt)) {\n\t\t\treturn;\n\t\t}\n\t\tAPI_KEYS.put(jti, jwt);\n\t\tsaveApiKeysObject();\n\t}\n\n\tpublic void revokeApiKey(String jti) {\n\t\tAPI_KEYS.remove(jti);\n\t\tsaveApiKeysObject();\n\t}\n\n\tpublic Map<String, Object> getApiKeys() {\n\t\treturn Collections.unmodifiableMap(API_KEYS);\n\t}\n\n\tpublic Map<String, Long> getApiKeysExpirations() {\n\t\treturn API_KEYS.keySet().stream().collect(Collectors.toMap(k -> k, k -> {\n\t\t\ttry {\n\t\t\t\tDate exp = SignedJWT.parse((String) API_KEYS.get(k)).getJWTClaimsSet().getExpirationTime();\n\t\t\t\tif (exp != null) {\n\t\t\t\t\treturn exp.getTime();\n\t\t\t\t}\n\t\t\t} catch (ParseException ex) {\n\t\t\t\tlogger.error(null, ex);\n\t\t\t}\n\t\t\treturn 0L;\n\t\t}));\n\t}\n\n\tprivate void saveApiKeysObject() {\n\t\tSysprop s = new Sysprop(\"api_keys\");\n\t\ts.setProperties(API_KEYS);\n\t\tpc.create(s);\n\t}\n\n\tpublic Profile getSystemUser() {\n\t\treturn API_USER;\n\t}\n\n\tpublic void triggerHookEvent(String eventName, Object payload) {\n\t\tif (isWebhooksEnabled() && HOOK_EVENTS.contains(eventName)) {\n\t\t\tPara.asyncExecute(() -> {\n\t\t\t\tWebhook trigger = new Webhook();\n\t\t\t\ttrigger.setTriggeredEvent(eventName);\n\t\t\t\ttrigger.setCustomPayload(payload);\n\t\t\t\tpc.create(trigger);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic void setSecurityHeaders(String nonce, HttpServletRequest request, HttpServletResponse response) {\n\t\t// CSP Header\n\t\tif (CONF.cspHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Content-Security-Policy\",\n\t\t\t\t\t(request.isSecure() ? \"upgrade-insecure-requests; \" : \"\") + CONF.cspHeader(nonce));\n\t\t}\n\t\t// HSTS Header\n\t\tif (CONF.hstsHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains\");\n\t\t}\n\t\t// Frame Options Header\n\t\tif (CONF.framingHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-Frame-Options\", \"SAMEORIGIN\");\n\t\t}\n\t\t// XSS Header\n\t\tif (CONF.xssHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n\t\t}\n\t\t// Content Type Header\n\t\tif (CONF.contentTypeHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n\t\t}\n\t\t// Referrer Header\n\t\tif (CONF.referrerHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Referrer-Policy\", \"strict-origin\");\n\t\t}\n\t\t// Permissions Policy Header\n\t\tif (CONF.permissionsHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Permissions-Policy\", \"geolocation=()\");\n\t\t}\n\t}\n\n\tpublic boolean cookieConsentGiven(HttpServletRequest request) {\n\t\treturn !CONF.cookieConsentRequired() || \"allow\".equals(HttpUtils.getCookieValue(request, \"cookieconsent_status\"));\n\t}\n\n\tpublic String base64DecodeScript(String encodedScript) {\n\t\tif (StringUtils.isBlank(encodedScript)) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\tString decodedScript = Base64.isBase64(encodedScript) ? Utils.base64dec(encodedScript) : \"\";\n\t\t\treturn StringUtils.isBlank(decodedScript) ? encodedScript : decodedScript;\n\t\t} catch (Exception e) {\n\t\t\treturn encodedScript;\n\t\t}\n\t}\n\n\tpublic Map<String, Object> getExternalScripts() {\n\t\treturn CONF.externalScripts();\n\t}\n\n\tpublic List<String> getExternalStyles() {\n\t\tString extStyles = CONF.externalStyles();\n\t\tif (!StringUtils.isBlank(extStyles)) {\n\t\t\tString[] styles = extStyles.split(\"\\\\s*,\\\\s*\");\n\t\t\tif (!StringUtils.isBlank(extStyles) && styles != null && styles.length > 0) {\n\t\t\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\t\tfor (String style : styles) {\n\t\t\t\t\tif (!StringUtils.isBlank(style)) {\n\t\t\t\t\t\tlist.add(style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n\n\tpublic String getInlineCSS() {\n\t\ttry {\n\t\t\tSysprop custom = getCustomTheme();\n\t\t\tString themeName = custom.getName();\n\t\t\tString inline = CONF.inlineCSS();\n\t\t\tString loadedTheme;\n\t\t\tif (\"default\".equalsIgnoreCase(themeName) || StringUtils.isBlank(themeName)) {\n\t\t\t\treturn inline;\n\t\t\t} else if (\"custom\".equalsIgnoreCase(themeName)) {\n\t\t\t\tloadedTheme = (String) custom.getProperty(\"theme\");\n\t\t\t} else {\n\t\t\t\tloadedTheme = loadResource(getThemeKey(themeName));\n\t\t\t\tif (StringUtils.isBlank(loadedTheme)) {\n\t\t\t\t\tFILE_CACHE.put(\"theme\", \"default\");\n\t\t\t\t\tcustom.setName(\"default\");\n\t\t\t\t\tcustomTheme = pc.update(custom);\n\t\t\t\t\treturn inline;\n\t\t\t\t} else {\n\t\t\t\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tloadedTheme = StringUtils.replaceEachRepeatedly(loadedTheme,\n\t\t\t\t\tnew String[] {\"<\", \"</\", \"<script\", \"<SCRIPT\"}, new String[] {\"\", \"\", \"\", \"\"});\n\t\t\treturn loadedTheme + \"\\n/*** END OF THEME CSS ***/\\n\" + inline;\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(\"Failed to load inline CSS.\");\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic void setCustomTheme(String themeName, String themeCSS) {\n\t\tString id = \"theme\" + Para.getConfig().separator() + \"custom\";\n\t\tboolean isCustom = \"custom\".equalsIgnoreCase(themeName);\n\t\tString css = isCustom ? themeCSS : \"\";\n\t\tSysprop custom = new Sysprop(id);\n\t\tcustom.setName(StringUtils.isBlank(css) && isCustom ? \"default\" : themeName);\n\t\tcustom.addProperty(\"theme\", css);\n\t\tcustomTheme = pc.create(custom);\n\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\tFILE_CACHE.put(getThemeKey(themeName), isCustom ? css : loadResource(getThemeKey(themeName)));\n\t}\n\n\tpublic Sysprop getCustomTheme() {\n\t\tString id = \"theme\" + Para.getConfig().separator() + \"custom\";\n\t\tif (customTheme == null) {\n\t\t\tcustomTheme = (Sysprop) Optional.ofNullable(pc.read(id)).orElseGet(this::getDefaultThemeObject);\n\t\t}\n\t\treturn customTheme;\n\t}\n\n\tprivate Sysprop getDefaultThemeObject() {\n\t\tString themeName = \"default\";\n\t\tSysprop s = new Sysprop(\"theme\" + Para.getConfig().separator() + \"custom\");\n\t\ts.setName(themeName);\n\t\ts.addProperty(\"theme\", \"\");\n\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\tFILE_CACHE.put(getThemeKey(themeName), loadResource(getThemeKey(themeName)));\n\t\treturn s;\n\t}\n\n\tprivate String getThemeKey(String themeName) {\n\t\treturn \"themes/\" + themeName + \".css\";\n\t}\n\n\tpublic String getDefaultTheme() {\n\t\treturn loadResource(\"themes/default.css\");\n\t}\n\n\tpublic String getSmallLogoUrl() {\n\t\tString defaultLogo = CONF.serverUrl() + CONF.imagesLink() + \"/logowhite.png\";\n\t\tString logoUrl = CONF.logoSmallUrl();\n\t\tString defaultMainLogoUrl = CONF.imagesLink() + \"/logo.svg\";\n\t\tString mainLogoUrl = CONF.logoUrl();\n\t\tif (!defaultLogo.equals(logoUrl)) {\n\t\t\treturn logoUrl;\n\t\t} else if (!mainLogoUrl.equals(defaultMainLogoUrl)) {\n\t\t\treturn mainLogoUrl;\n\t\t}\n\t\treturn logoUrl;\n\t}\n\n\tpublic String getCSPNonce() {\n\t\treturn Utils.generateSecurityToken(16);\n\t}\n\n\tpublic String getFacebookLoginURL() {\n\t\treturn \"https://www.facebook.com/dialog/oauth?client_id=\" + CONF.facebookAppId() +\n\t\t\t\t\"&response_type=code&scope=email&redirect_uri=\" + getParaEndpoint() +\n\t\t\t\t\"/facebook_auth&state=\" + getParaAppId();\n\t}\n\n\tpublic String getGoogleLoginURL() {\n\t\treturn \"https://accounts.google.com/o/oauth2/v2/auth?\" +\n\t\t\t\t\"client_id=\" + CONF.googleAppId() + \"&response_type=code&scope=openid%20profile%20email&redirect_uri=\"\n\t\t\t\t+ getParaEndpoint() + \"/google_auth&state=\" + getParaAppId();\n\t}\n\n\tpublic String getGitHubLoginURL() {\n\t\treturn \"https://github.com/login/oauth/authorize?response_type=code&client_id=\" + CONF.githubAppId() +\n\t\t\t\t\"&scope=user%3Aemail&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/github_auth\";\n\t}\n\n\tpublic String getLinkedInLoginURL() {\n\t\treturn \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=\" + CONF.linkedinAppId() +\n\t\t\t\t\"&scope=r_liteprofile%20r_emailaddress&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/linkedin_auth\";\n\t}\n\n\tpublic String getTwitterLoginURL() {\n\t\treturn getParaEndpoint() + \"/twitter_auth?state=\" + getParaAppId();\n\t}\n\n\tpublic String getMicrosoftLoginURL() {\n\t\treturn \"https://login.microsoftonline.com/\" + CONF.microsoftTenantId() +\n\t\t\t\t\"/oauth2/v2.0/authorize?response_type=code&client_id=\" + CONF.microsoftAppId() +\n\t\t\t\t\"&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/microsoft_auth\";\n\t}\n\n\tpublic String getSlackLoginURL() {\n\t\treturn \"https://slack.com/oauth/v2/authorize?response_type=code&client_id=\" + CONF.slackAppId() +\n\t\t\t\t\"&user_scope=identity.basic%20identity.email%20identity.team%20identity.avatar&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/slack_auth\";\n\t}\n\n\tpublic String getAmazonLoginURL() {\n\t\treturn \"https://www.amazon.com/ap/oa?response_type=code&client_id=\" + CONF.amazonAppId() +\n\t\t\t\t\"&scope=profile&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/amazon_auth\";\n\t}\n\n\tpublic String getOAuth2LoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"\") +\n\t\t\t\t\"&scope=\" + CONF.oauthScope(\"\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getOAuth2SecondLoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"second\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"second\") +\n\t\t\t\t\"&scope=\" +  CONF.oauthScope(\"second\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getOAuth2ThirdLoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"third\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"third\") +\n\t\t\t\t\"&scope=\" +  CONF.oauthScope(\"third\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getParaEndpoint() {\n\t\treturn CONF.redirectUri();\n\t}\n\n\tpublic String getParaAppId() {\n\t\treturn StringUtils.removeStart(CONF.paraAccessKey(), \"app:\");\n\t}\n\n\tpublic String getFirstConfiguredLoginURL() {\n\t\tif (!CONF.facebookAppId().isEmpty()) {\n\t\t\treturn getFacebookLoginURL();\n\t\t}\n\t\tif (!CONF.googleAppId().isEmpty()) {\n\t\t\treturn getGoogleLoginURL();\n\t\t}\n\t\tif (!CONF.githubAppId().isEmpty()) {\n\t\t\treturn getGitHubLoginURL();\n\t\t}\n\t\tif (!CONF.linkedinAppId().isEmpty()) {\n\t\t\treturn getLinkedInLoginURL();\n\t\t}\n\t\tif (!CONF.twitterAppId().isEmpty()) {\n\t\t\treturn getTwitterLoginURL();\n\t\t}\n\t\tif (!CONF.microsoftAppId().isEmpty()) {\n\t\t\treturn getMicrosoftLoginURL();\n\t\t}\n\t\tif (isSlackAuthEnabled()) {\n\t\t\treturn getSlackLoginURL();\n\t\t}\n\t\tif (!CONF.amazonAppId().isEmpty()) {\n\t\t\treturn getAmazonLoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"\").isEmpty()) {\n\t\t\treturn getOAuth2LoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"second\").isEmpty()) {\n\t\t\treturn getOAuth2SecondLoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"third\").isEmpty()) {\n\t\t\treturn getOAuth2ThirdLoginURL();\n\t\t}\n\t\treturn SIGNINLINK + \"?code=3&error=true\";\n\t}\n}\n"], "fixing_code": ["/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.controllers;\n\nimport com.cloudinary.Cloudinary;\nimport com.cloudinary.utils.ObjectUtils;\nimport com.erudika.para.core.User;\nimport static com.erudika.para.core.User.Groups.MODS;\nimport static com.erudika.para.core.User.Groups.USERS;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.ParaObjectUtils;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.scoold.ScooldConfig;\nimport static com.erudika.scoold.ScooldServer.PEOPLELINK;\nimport static com.erudika.scoold.ScooldServer.PROFILELINK;\nimport static com.erudika.scoold.ScooldServer.SIGNINLINK;\nimport com.erudika.scoold.core.Post;\nimport com.erudika.scoold.core.Profile;\nimport com.erudika.scoold.core.Profile.Badge;\nimport com.erudika.scoold.core.Question;\nimport com.erudika.scoold.core.Reply;\nimport com.erudika.scoold.utils.ScooldUtils;\nimport com.erudika.scoold.utils.avatars.*;\nimport java.util.*;\nimport javax.inject.Inject;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@Controller\n@RequestMapping(\"/profile\")\npublic class ProfileController {\n\n\tprivate static final ScooldConfig CONF = ScooldUtils.getConfig();\n\tprivate final ScooldUtils utils;\n\tprivate final GravatarAvatarGenerator gravatarAvatarGenerator;\n\tprivate final AvatarRepository avatarRepository;\n\n\t@Inject\n\tpublic ProfileController(ScooldUtils utils, GravatarAvatarGenerator gravatarAvatarGenerator, AvatarRepositoryProxy avatarRepository) {\n\t\tthis.utils = utils;\n\t\tthis.gravatarAvatarGenerator = gravatarAvatarGenerator;\n\t\tthis.avatarRepository = avatarRepository;\n\t}\n\n\t@GetMapping({\"\", \"/{id}/**\"})\n\tpublic String get(@PathVariable(required = false) String id, HttpServletRequest req, Model model) {\n\t\tif (!utils.isAuthenticated(req) && StringUtils.isBlank(id)) {\n\t\t\treturn \"redirect:\" + SIGNINLINK + \"?returnto=\" + PROFILELINK;\n\t\t}\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser;\n\t\tboolean isMyProfile;\n\n\t\tif (StringUtils.isBlank(id) || isMyid(authUser, Profile.id(id))) {\n\t\t\t//requested userid !exists or = my userid => show my profile\n\t\t\tshowUser = authUser;\n\t\t\tisMyProfile = true;\n\t\t} else {\n\t\t\tshowUser = utils.getParaClient().read(Profile.id(id));\n\t\t\tisMyProfile = isMyid(authUser, Profile.id(id));\n\t\t}\n\n\t\tif (showUser == null || !ParaObjectUtils.typesMatch(showUser)) {\n\t\t\treturn \"redirect:\" + PROFILELINK;\n\t\t}\n\n\t\tboolean protekted = !utils.isDefaultSpacePublic() && !utils.isAuthenticated(req);\n\t\tboolean sameSpace = (utils.canAccessSpace(showUser, \"default\") && utils.canAccessSpace(authUser, \"default\")) ||\n\t\t\t\t(authUser != null && showUser.getSpaces().stream().anyMatch(s -> utils.canAccessSpace(authUser, s)));\n\t\tif (protekted || !sameSpace) {\n\t\t\treturn \"redirect:\" + PEOPLELINK;\n\t\t}\n\n\t\tPager itemcount1 = utils.getPager(\"page1\", req);\n\t\tPager itemcount2 = utils.getPager(\"page2\", req);\n\t\tList<? extends Post> questionslist = getQuestions(authUser, showUser, isMyProfile, itemcount1);\n\t\tList<? extends Post> answerslist = getAnswers(authUser, showUser, isMyProfile, itemcount2);\n\n\t\tmodel.addAttribute(\"path\", \"profile.vm\");\n\t\tmodel.addAttribute(\"title\", showUser.getName());\n\t\tmodel.addAttribute(\"description\", getUserDescription(showUser, itemcount1.getCount(), itemcount2.getCount()));\n\t\tmodel.addAttribute(\"ogimage\", utils.getFullAvatarURL(showUser, AvatarFormat.Profile));\n\t\tmodel.addAttribute(\"includeGMapsScripts\", utils.isNearMeFeatureEnabled());\n\t\tmodel.addAttribute(\"showUser\", showUser);\n\t\tmodel.addAttribute(\"isMyProfile\", isMyProfile);\n\t\tmodel.addAttribute(\"badgesCount\", showUser.getBadgesMap().size());\n\t\tmodel.addAttribute(\"canEdit\", isMyProfile || canEditProfile(authUser, id));\n\t\tmodel.addAttribute(\"canEditAvatar\", CONF.avatarEditsEnabled());\n\t\tmodel.addAttribute(\"gravatarPicture\", gravatarAvatarGenerator.getLink(showUser, AvatarFormat.Profile));\n\t\tmodel.addAttribute(\"isGravatarPicture\", gravatarAvatarGenerator.isLink(showUser.getPicture()));\n\t\tmodel.addAttribute(\"itemcount1\", itemcount1);\n\t\tmodel.addAttribute(\"itemcount2\", itemcount2);\n\t\tmodel.addAttribute(\"questionslist\", questionslist);\n\t\tmodel.addAttribute(\"answerslist\", answerslist);\n\t\tmodel.addAttribute(\"nameEditsAllowed\", CONF.nameEditsEnabled());\n\t\treturn \"base\";\n\t}\n\n\t@PostMapping(\"/{id}/make-mod\")\n\tpublic String makeMod(@PathVariable String id, HttpServletRequest req, HttpServletResponse res) {\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tif (!isMyid(authUser, Profile.id(id))) {\n\t\t\tProfile showUser = utils.getParaClient().read(Profile.id(id));\n\t\t\tif (showUser != null) {\n\t\t\t\tif (utils.isAdmin(authUser) && !utils.isAdmin(showUser)) {\n\t\t\t\t\tshowUser.setGroups(utils.isMod(showUser) ? USERS.toString() : MODS.toString());\n\t\t\t\t\tshowUser.update();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (utils.isAjaxRequest(req)) {\n\t\t\tres.setStatus(200);\n\t\t\treturn \"base\";\n\t\t} else {\n\t\t\treturn \"redirect:\" + PROFILELINK + \"/\" + id;\n\t\t}\n\t}\n\n\t@PostMapping(\"/{id}\")\n\tpublic String edit(@PathVariable(required = false) String id, @RequestParam(required = false) String name,\n\t\t\t@RequestParam(required = false) String location, @RequestParam(required = false) String latlng,\n\t\t\t@RequestParam(required = false) String website, @RequestParam(required = false) String aboutme,\n\t\t\t@RequestParam(required = false) String picture, HttpServletRequest req, Model model) {\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser = getProfileForEditing(id, authUser);\n\t\tif (showUser != null) {\n\t\t\tboolean updateProfile = false;\n\t\t\tif (!isMyid(authUser, id)) {\n\t\t\t\tshowUser = utils.getParaClient().read(Profile.id(id));\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getLocation(), location)) {\n\t\t\t\tshowUser.setLatlng(latlng);\n\t\t\t\tshowUser.setLocation(location);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getWebsite(), website) &&\n\t\t\t\t\t(StringUtils.isBlank(website) || Utils.isValidURL(website))) {\n\t\t\t\tshowUser.setWebsite(website);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\t\t\tif (!StringUtils.equals(showUser.getAboutme(), aboutme)) {\n\t\t\t\tshowUser.setAboutme(aboutme);\n\t\t\t\tupdateProfile = true;\n\t\t\t}\n\n\t\t\tupdateProfile = updateUserPictureAndName(showUser, picture, name) || updateProfile;\n\n\t\t\tboolean isComplete = showUser.isComplete() && isMyid(authUser, showUser.getId());\n\t\t\tif (updateProfile || utils.addBadgeOnce(showUser, Badge.NICEPROFILE, isComplete)) {\n\t\t\t\tshowUser.update();\n\t\t\t}\n\t\t\tmodel.addAttribute(\"user\", showUser);\n\t\t}\n\t\treturn \"redirect:\" + PROFILELINK + (isMyid(authUser, id) ? \"\" : \"/\" + id);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@ResponseBody\n\t@PostMapping(value = \"/{id}/cloudinary-upload-link\", produces = MediaType.APPLICATION_JSON_VALUE)\n\tpublic ResponseEntity<Map<String, Object>> generateCloudinaryUploadLink(@PathVariable String id, HttpServletRequest req) {\n\t\tif (!ScooldUtils.isCloudinaryAvatarRepositoryEnabled()) {\n\t\t\treturn ResponseEntity.status(404).build();\n\t\t}\n\n\t\tProfile authUser = utils.getAuthUser(req);\n\t\tProfile showUser = getProfileForEditing(id, authUser);\n\t\tif (showUser == null) {\n\t\t\treturn ResponseEntity.status(403).build();\n\t\t}\n\n\t\tString preset = \"avatar\";\n\t\tString publicId = \"avatars/\" + id;\n\t\tlong timestamp = Utils.timestamp() / 1000;\n\t\tCloudinary cloudinary = new Cloudinary(CONF.cloudinaryUrl());\n\t\tString signature = cloudinary.apiSignRequest(ObjectUtils.asMap(\n\t\t\t\"public_id\", publicId,\n\t\t\t\"timestamp\", String.valueOf(timestamp),\n\t\t\t\"upload_preset\", preset\n\t\t), cloudinary.config.apiSecret);\n\n\t\tMap<String, Object> response = new HashMap<String, Object>();\n\t\tresponse.put(\"url\", \"https://api.cloudinary.com/v1_1/\" + cloudinary.config.cloudName + \"/image/upload\");\n\t\tMap<String, Object> data = new HashMap<String, Object>();\n\t\tdata.put(\"resource_type\", \"image\");\n\t\tdata.put(\"public_id\", publicId);\n\t\tdata.put(\"upload_preset\", preset);\n\t\tdata.put(\"filename\", id);\n\t\tdata.put(\"timestamp\", timestamp);\n\t\tdata.put(\"api_key\", cloudinary.config.apiKey);\n\t\tdata.put(\"signature\", signature);\n\t\tresponse.put(\"data\", data);\n\n\t\treturn ResponseEntity.ok().body(response);\n\t}\n\n\tprivate Profile getProfileForEditing(String id, Profile authUser) {\n\t\tif (!canEditProfile(authUser, id)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn isMyid(authUser, id) ? authUser : (Profile) utils.getParaClient().read(Profile.id(id));\n\t}\n\n\tprivate boolean updateUserPictureAndName(Profile showUser, String picture, String name) {\n\t\tboolean updateProfile = false;\n\t\tboolean updateUser = false;\n\t\tUser u = showUser.getUser();\n\n\t\tif (CONF.avatarEditsEnabled() && !StringUtils.isBlank(picture)) {\n\t\t\tupdateProfile = avatarRepository.store(showUser, picture);\n\t\t}\n\n\t\tif (CONF.nameEditsEnabled() && !StringUtils.isBlank(name)) {\n\t\t\tshowUser.setName(StringUtils.abbreviate(name, 256));\n\t\t\tif (StringUtils.isBlank(showUser.getOriginalName())) {\n\t\t\t\tshowUser.setOriginalName(name);\n\t\t\t}\n\t\t\tif (!u.getName().equals(name)) {\n\t\t\t\tu.setName(name);\n\t\t\t\tupdateUser = true;\n\t\t\t}\n\t\t\tupdateProfile = true;\n\t\t}\n\n\t\tif (updateUser) {\n\t\t\tutils.getParaClient().update(u);\n\t\t}\n\t\treturn updateProfile;\n\t}\n\n\tprivate boolean isMyid(Profile authUser, String id) {\n\t\treturn authUser != null && (StringUtils.isBlank(id) || authUser.getId().equals(Profile.id(id)));\n\t}\n\n\tprivate boolean canEditProfile(Profile authUser, String id) {\n\t\treturn isMyid(authUser, id) || utils.isAdmin(authUser);\n\t}\n\n\tprivate Object getUserDescription(Profile showUser, Long questions, Long answers) {\n\t\tif (showUser == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn showUser.getVotes() + \" points, \"\n\t\t\t\t+ showUser.getBadgesMap().size() + \" badges, \"\n\t\t\t\t+ questions + \" questions, \"\n\t\t\t\t+ answers + \" answers \"\n\t\t\t\t+ Utils.abbreviate(showUser.getAboutme(), 150);\n\t}\n\n\tpublic List<? extends Post> getQuestions(Profile authUser, Profile showUser, boolean isMyProfile, Pager itemcount) {\n\t\tif (utils.postsNeedApproval() && (isMyProfile || utils.isMod(authUser))) {\n\t\t\tList<Question> qlist = new ArrayList<>();\n\t\t\tPager p = new Pager(itemcount.getPage(), itemcount.getLimit());\n\t\t\tqlist.addAll(showUser.getAllQuestions(itemcount));\n\t\t\tqlist.addAll(showUser.getAllUnapprovedQuestions(p));\n\t\t\titemcount.setCount(itemcount.getCount() + p.getCount());\n\t\t\treturn qlist;\n\t\t} else {\n\t\t\treturn showUser.getAllQuestions(itemcount);\n\t\t}\n\t}\n\n\tpublic List<? extends Post> getAnswers(Profile authUser, Profile showUser, boolean isMyProfile, Pager itemcount) {\n\t\tif (utils.postsNeedApproval() && (isMyProfile || utils.isMod(authUser))) {\n\t\t\tList<Reply> alist = new ArrayList<>();\n\t\t\tPager p = new Pager(itemcount.getPage(), itemcount.getLimit());\n\t\t\talist.addAll(showUser.getAllAnswers(itemcount));\n\t\t\talist.addAll(showUser.getAllUnapprovedAnswers(p));\n\t\t\titemcount.setCount(itemcount.getCount() + p.getCount());\n\t\t\treturn alist;\n\t\t} else {\n\t\t\treturn showUser.getAllAnswers(itemcount);\n\t\t}\n\t}\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.core;\nimport com.erudika.para.client.ParaClient;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.annotations.Stored;\nimport com.erudika.para.core.utils.Config;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.Para;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.scoold.utils.ScooldUtils;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.temporal.IsoFields;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport org.apache.commons.lang3.StringUtils;\nimport org.hibernate.validator.constraints.URL;\n\npublic class Profile extends Sysprop {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Stored private String originalName;\n\t@Stored private String originalPicture;\n\t@Stored private Long lastseen;\n\t@Stored private String location;\n\t@Stored private String latlng;\n\t@Stored private String status;\n\t@Stored private String aboutme;\n\t@Stored private String badges;\n\t@Stored private String groups;\n\t@Stored private Long upvotes;\n\t@Stored private Long downvotes;\n\t@Stored private Long comments;\n\t@Stored @URL private String picture;\n\t@Stored @URL private String website;\n\t@Stored private List<String> favtags;\n\t@Stored private Set<String> favspaces;\n\t@Stored private Set<String> spaces;\n\t@Stored private Boolean replyEmailsEnabled;\n\t@Stored private Boolean commentEmailsEnabled;\n\t@Stored private Boolean favtagsEmailsEnabled;\n\t@Stored private Boolean anonymityEnabled;\n\t@Stored private Boolean darkmodeEnabled;\n\t@Stored private Integer yearlyVotes;\n\t@Stored private Integer quarterlyVotes;\n\t@Stored private Integer monthlyVotes;\n\t@Stored private Integer weeklyVotes;\n\n\tprivate transient String newbadges;\n\tprivate transient Integer newreports;\n\tprivate transient User user;\n\n\tpublic enum Badge {\n\t\tVETERAN(10),\t\t//regular visitor\t\t//NOT IMPLEMENTED\n\n\t\tNICEPROFILE(10),\t//100% profile completed\n\t\tREPORTER(0),\t\t//for every report\n\t\tVOTER(0),\t\t\t//100 total votes\n\t\tCOMMENTATOR(0),\t\t//100+ comments\n\t\tCRITIC(0),\t\t\t//10+ downvotes\n\t\tSUPPORTER(10),\t\t//50+ upvotes\n\t\tEDITOR(0),\t\t\t//first edit of post\n\t\tBACKINTIME(0),\t\t//for each rollback of post\n\t\tNOOB(10),\t\t\t//first question + first approved answer\n\t\tENTHUSIAST(0),\t\t//100+ rep  [//\t\t\t ]\n\t\tFRESHMAN(0),\t\t//300+ rep\t[////\t\t ]\n\t\tSCHOLAR(0),\t\t\t//500+ rep\t[//////\t\t ]\n\t\tTEACHER(0),\t\t\t//1000+ rep\t[////////\t ]\n\t\tPROFESSOR(0),\t\t//5000+ rep\t[//////////\t ]\n\t\tGEEK(0),\t\t\t//9000+ rep\t[////////////]\n\t\tGOODQUESTION(10),\t//20+ votes\n\t\tGOODANSWER(10),\t\t//10+ votes\n\t\tEUREKA(0),\t\t\t//for every answer to own question\n\t\tSENIOR(0),\t\t\t//one year + member\n\t\tDISCIPLINED(0);\t\t//each time user deletes own comment\n\n\t\tprivate final int reward;\n\n\t\tBadge(int reward) {\n\t\t\tthis.reward = reward;\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn super.toString().toLowerCase();\n\t\t}\n\n\t\tpublic Integer getReward() {\n\t\t\treturn this.reward;\n\t\t}\n\t}\n\n\tpublic Profile() {\n\t\tthis(null, null);\n\t}\n\n\tpublic Profile(String id) {\n\t\tthis(id, null);\n\t}\n\n\tpublic Profile(String userid, String name) {\n\t\tsetId(id(userid));\n\t\tsetName(name);\n\t\tthis.status = \"\";\n\t\tthis.aboutme = \"\";\n\t\tthis.location = \"\";\n\t\tthis.website = \"\";\n\t\tthis.badges = \"\";\n\t\tthis.upvotes = 0L;\n\t\tthis.downvotes = 0L;\n\t\tthis.comments = 0L;\n\t\tthis.yearlyVotes = 0;\n\t\tthis.quarterlyVotes = 0;\n\t\tthis.monthlyVotes = 0;\n\t\tthis.weeklyVotes = 0;\n\t\tthis.anonymityEnabled = false;\n\t\tthis.darkmodeEnabled = false;\n\t\tthis.favtagsEmailsEnabled = ScooldUtils.getConfig().favoriteTagsEmailsEnabled();\n\t\tthis.replyEmailsEnabled = ScooldUtils.getConfig().replyEmailsEnabled();\n\t\tthis.commentEmailsEnabled = ScooldUtils.getConfig().commentEmailsEnabled();\n\t}\n\n\tpublic static final String id(String userid) {\n\t\tif (StringUtils.endsWith(userid, Para.getConfig().separator() + \"profile\")) {\n\t\t\treturn userid;\n\t\t} else {\n\t\t\treturn userid != null ? userid + Para.getConfig().separator() + \"profile\" : null;\n\t\t}\n\t}\n\n\tpublic static Profile fromUser(User u) {\n\t\tProfile p = new Profile(u.getId(), u.getName());\n\t\tp.setUser(u);\n\t\tp.setOriginalName(u.getName());\n\t\tp.setPicture(u.getPicture());\n\t\tp.setAppid(u.getAppid());\n\t\tp.setCreatorid(u.getId());\n\t\tp.setTimestamp(u.getTimestamp());\n\t\tp.setGroups(ScooldUtils.getInstance().isRecognizedAsAdmin(u)\n\t\t\t\t? User.Groups.ADMINS.toString() : u.getGroups());\n\t\t// auto-assign spaces to new users\n\t\tString space = StringUtils.substringBefore(ScooldUtils.getConfig().autoAssignSpaces(), \",\");\n\t\tif (!StringUtils.isBlank(space) && !ScooldUtils.getInstance().isDefaultSpace(space)) {\n\t\t\tSysprop s = client().read(ScooldUtils.getInstance().getSpaceId(space));\n\t\t\tif (s == null) {\n\t\t\t\ts = ScooldUtils.getInstance().buildSpaceObject(space);\n\t\t\t\tclient().create(s); // create the space it it's missing\n\t\t\t}\n\t\t\tif (ScooldUtils.getConfig().resetSpacesOnNewAssignment(u.isOAuth2User() || u.isLDAPUser() || u.isSAMLUser())) {\n\t\t\t\tp.setSpaces(Collections.singleton(s.getId() + Para.getConfig().separator() + s.getName()));\n\t\t\t} else {\n\t\t\t\tp.getSpaces().add(s.getId() + Para.getConfig().separator() + s.getName());\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\tprivate static ParaClient client() {\n\t\treturn ScooldUtils.getInstance().getParaClient();\n\t}\n\n\t@JsonIgnore\n\tpublic User getUser() {\n\t\tif (user == null) {\n\t\t\tuser = client().read(getCreatorid() == null\n\t\t\t\t\t? StringUtils.removeEnd(getId(), Para.getConfig().separator() + \"profile\") : getCreatorid());\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic Integer getYearlyVotes() {\n\t\tif (yearlyVotes < 0) {\n\t\t\tyearlyVotes = 0;\n\t\t}\n\t\treturn yearlyVotes;\n\t}\n\n\tpublic void setYearlyVotes(Integer yearlyVotes) {\n\t\tthis.yearlyVotes = yearlyVotes;\n\t}\n\n\tpublic Integer getQuarterlyVotes() {\n\t\tif (quarterlyVotes < 0) {\n\t\t\tquarterlyVotes = 0;\n\t\t}\n\t\treturn quarterlyVotes;\n\t}\n\n\tpublic void setQuarterlyVotes(Integer quarterlyVotes) {\n\t\tthis.quarterlyVotes = quarterlyVotes;\n\t}\n\n\tpublic Integer getMonthlyVotes() {\n\t\tif (monthlyVotes < 0) {\n\t\t\tmonthlyVotes = 0;\n\t\t}\n\t\treturn monthlyVotes;\n\t}\n\n\tpublic void setMonthlyVotes(Integer monthlyVotes) {\n\t\tthis.monthlyVotes = monthlyVotes;\n\t}\n\n\tpublic Integer getWeeklyVotes() {\n\t\tif (weeklyVotes < 0) {\n\t\t\tweeklyVotes = 0;\n\t\t}\n\t\treturn weeklyVotes;\n\t}\n\n\tpublic void setWeeklyVotes(Integer weeklyVotes) {\n\t\tthis.weeklyVotes = weeklyVotes;\n\t}\n\n\tpublic Boolean getReplyEmailsEnabled() {\n\t\treturn replyEmailsEnabled;\n\t}\n\n\tpublic void setReplyEmailsEnabled(Boolean replyEmailsEnabled) {\n\t\tthis.replyEmailsEnabled = replyEmailsEnabled;\n\t}\n\n\tpublic Boolean getCommentEmailsEnabled() {\n\t\treturn commentEmailsEnabled;\n\t}\n\n\tpublic void setCommentEmailsEnabled(Boolean commentEmailsEnabled) {\n\t\tthis.commentEmailsEnabled = commentEmailsEnabled;\n\t}\n\n\tpublic Boolean getFavtagsEmailsEnabled() {\n\t\treturn favtagsEmailsEnabled;\n\t}\n\n\tpublic void setFavtagsEmailsEnabled(Boolean favtagsEmailsEnabled) {\n\t\tthis.favtagsEmailsEnabled = favtagsEmailsEnabled;\n\t}\n\n\tpublic Boolean getAnonymityEnabled() {\n\t\treturn anonymityEnabled;\n\t}\n\n\tpublic void setAnonymityEnabled(Boolean anonymityEnabled) {\n\t\tthis.anonymityEnabled = anonymityEnabled;\n\t}\n\n\tpublic Boolean getDarkmodeEnabled() {\n\t\treturn darkmodeEnabled;\n\t}\n\n\tpublic void setDarkmodeEnabled(Boolean darkmodeEnabled) {\n\t\tthis.darkmodeEnabled = darkmodeEnabled;\n\t}\n\n\tpublic String getGroups() {\n\t\treturn groups;\n\t}\n\n\tpublic void setGroups(String groups) {\n\t\tthis.groups = groups;\n\t}\n\n\tpublic String getPicture() {\n\t\treturn picture;\n\t}\n\n\tpublic void setPicture(String picture) {\n\t\tthis.picture = picture;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n\n\tpublic String getLatlng() {\n\t\treturn latlng;\n\t}\n\n\tpublic void setLatlng(String latlng) {\n\t\tthis.latlng = latlng;\n\t}\n\n\tpublic String getNewbadges() {\n\t\treturn newbadges;\n\t}\n\n\tpublic void setNewbadges(String newbadges) {\n\t\tthis.newbadges = newbadges;\n\t}\n\n\tpublic List<String> getFavtags() {\n\t\tif (favtags == null) {\n\t\t\tfavtags = new LinkedList<String>();\n\t\t}\n\t\treturn favtags;\n\t}\n\n\tpublic void setFavtags(List<String> favtags) {\n\t\tthis.favtags = favtags;\n\t}\n\n\tpublic Set<String> getFavspaces() {\n\t\tif (favspaces == null) {\n\t\t\tfavspaces = new LinkedHashSet<String>();\n\t\t}\n\t\treturn favspaces;\n\t}\n\n\tpublic void setFavspaces(Set<String> favspaces) {\n\t\tthis.favspaces = favspaces;\n\t}\n\n\tpublic Set<String> getSpaces() {\n\t\tif (ScooldUtils.getInstance().isMod(this)) {\n\t\t\tspaces = ScooldUtils.getInstance().getAllSpaces().stream().\n\t\t\t\t\tmap(s -> s.getId() + Para.getConfig().separator() + s.getName()).collect(Collectors.toSet());\n\t\t}\n\t\tif (spaces == null) {\n\t\t\tspaces = new LinkedHashSet<String>();\n\t\t}\n\t\tif (spaces.isEmpty()) {\n\t\t\tspaces.add(Post.DEFAULT_SPACE);\n\t\t}\n\t\t// this is confusing - let admins control who is in the default space\n\t\t//if (spaces.size() > 1 && spaces.contains(Post.DEFAULT_SPACE)) {\n\t\t//\tspaces.remove(Post.DEFAULT_SPACE);\n\t\t//}\n\t\treturn spaces;\n\t}\n\n\tpublic void setSpaces(Set<String> spaces) {\n\t\tthis.spaces = spaces;\n\t}\n\n\t@JsonIgnore\n\tpublic Set<String> getAllSpaces() {\n\t\treturn getSpaces().stream().filter(s -> !s.equalsIgnoreCase(Post.DEFAULT_SPACE)).collect(Collectors.toSet());\n\t}\n\n\tpublic Long getLastseen() {\n\t\treturn lastseen;\n\t}\n\n\tpublic void setLastseen(Long val) {\n\t\tthis.lastseen = val;\n\t}\n\n\tpublic String getWebsite() {\n\t\treturn website;\n\t}\n\n\tpublic void setWebsite(String website) {\n\t\tthis.website = website;\n\t}\n\n\tpublic Long getComments() {\n\t\treturn comments;\n\t}\n\n\tpublic void setComments(Long comments) {\n\t\tthis.comments = comments;\n\t}\n\n\tpublic Long getDownvotes() {\n\t\treturn downvotes;\n\t}\n\n\tpublic void setDownvotes(Long downvotes) {\n\t\tthis.downvotes = downvotes;\n\t}\n\n\tpublic Long getUpvotes() {\n\t\treturn upvotes;\n\t}\n\n\tpublic void setUpvotes(Long upvotes) {\n\t\tthis.upvotes = upvotes;\n\t}\n\n\tpublic String getBadges() {\n\t\treturn badges;\n\t}\n\n\tpublic void setBadges(String badges) {\n\t\tthis.badges = badges;\n\t}\n\n\tpublic String getLocation() {\n\t\treturn location;\n\t}\n\n\tpublic void setLocation(String location) {\n\t\tthis.location = location;\n\t}\n\n\tpublic String getStatus() {\n\t\treturn status;\n\t}\n\n\tpublic void setStatus(String status) {\n\t\tthis.status = status;\n\t}\n\n\tpublic String getAboutme() {\n\t\treturn this.aboutme;\n\t}\n\n\tpublic void setAboutme(String aboutme) {\n\t\tthis.aboutme = aboutme;\n\t}\n\n\tpublic String getOriginalName() {\n\t\treturn originalName;\n\t}\n\n\tpublic void setOriginalName(String originalName) {\n\t\tthis.originalName = StringUtils.abbreviate(originalName, 256);\n\t}\n\n\tpublic String getOriginalPicture() {\n\t\treturn originalPicture;\n\t}\n\n\tpublic void setOriginalPicture(String originalPicture) {\n\t\tthis.originalPicture = originalPicture;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Question> getAllQuestions(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Question>();\n\t\t}\n\t\treturn (List<Question>) getPostsForUser(Utils.type(Question.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Reply> getAllAnswers(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Reply>();\n\t\t}\n\t\treturn (List<Reply>) getPostsForUser(Utils.type(Reply.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Question> getAllUnapprovedQuestions(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Question>();\n\t\t}\n\t\treturn (List<Question>) getPostsForUser(Utils.type(UnapprovedQuestion.class), pager);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<Reply> getAllUnapprovedAnswers(Pager pager) {\n\t\tif (getId() == null) {\n\t\t\treturn new ArrayList<Reply>();\n\t\t}\n\t\treturn (List<Reply>) getPostsForUser(Utils.type(UnapprovedReply.class), pager);\n\t}\n\n\tprivate List<? extends Post> getPostsForUser(String type, Pager pager) {\n\t\tpager.setSortby(\"votes\");\n\t\treturn client().findTerms(type, Collections.singletonMap(Config._CREATORID, getId()), true, pager);\n\t}\n\n\tpublic String getFavtagsString() {\n\t\tif (getFavtags().isEmpty()) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn StringUtils.join(getFavtags(), \", \");\n\t}\n\n\tpublic boolean hasFavtags() {\n\t\treturn !getFavtags().isEmpty();\n\t}\n\n\tpublic boolean hasSpaces() {\n\t\treturn !(getSpaces().size() <= 1 && getSpaces().contains(Post.DEFAULT_SPACE));\n\t}\n\n\tpublic void removeSpace(String space) {\n\t\tString sid = ScooldUtils.getInstance().getSpaceId(space);\n\t\tIterator<String> it = getSpaces().iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tif (it.next().startsWith(sid + Para.getConfig().separator())) {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic long getTotalVotes() {\n\t\tif (upvotes == null) {\n\t\t\tupvotes = 0L;\n\t\t}\n\t\tif (downvotes == null) {\n\t\t\tdownvotes = 0L;\n\t\t}\n\n\t\treturn upvotes + downvotes;\n\t}\n\n\tpublic void addRep(int rep) {\n\t\tif (getVotes() == null) {\n\t\t\tsetVotes(0);\n\t\t}\n\t\tsetVotes(getVotes() + rep);\n\t\tupdateVoteGains(rep);\n\t}\n\n\tpublic void removeRep(int rep) {\n\t\tif (getVotes() == null) {\n\t\t\tsetVotes(0);\n\t\t}\n\t\tsetVotes(getVotes() - rep);\n\t\tupdateVoteGains(-rep);\n\t\tif (getVotes() < 0) {\n\t\t\tsetVotes(0);\n\t\t}\n\t}\n\n\tpublic void incrementUpvotes() {\n\t\tif (this.upvotes == null) {\n\t\t\tthis.upvotes = 1L;\n\t\t} else {\n\t\t\tthis.upvotes = this.upvotes + 1L;\n\t\t}\n\t}\n\n\tpublic void incrementDownvotes() {\n\t\tif (this.downvotes == null) {\n\t\t\tthis.downvotes = 1L;\n\t\t} else {\n\t\t\tthis.downvotes = this.downvotes + 1L;\n\t\t}\n\t}\n\n\tprivate void updateVoteGains(int rep) {\n\t\tLong updated = Optional.ofNullable(getUpdated()).orElse(getTimestamp());\n\t\tLocalDateTime lastUpdate = LocalDateTime.ofInstant(Instant.ofEpochMilli(updated), ZoneId.systemDefault());\n\t\tLocalDate now = LocalDate.now();\n\t\tif (now.getYear() != lastUpdate.getYear()) {\n\t\t\tyearlyVotes = rep;\n\t\t} else {\n\t\t\tyearlyVotes += rep;\n\t\t}\n\t\tif (now.get(IsoFields.QUARTER_OF_YEAR) != lastUpdate.get(IsoFields.QUARTER_OF_YEAR)) {\n\t\t\tquarterlyVotes = rep;\n\t\t} else {\n\t\t\tquarterlyVotes += rep;\n\t\t}\n\t\tif (now.getMonthValue() != lastUpdate.getMonthValue()) {\n\t\t\tmonthlyVotes = rep;\n\t\t} else {\n\t\t\tmonthlyVotes += rep;\n\t\t}\n\t\tif (now.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR) != lastUpdate.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)) {\n\t\t\tweeklyVotes = rep;\n\t\t} else {\n\t\t\tweeklyVotes += rep;\n\t\t}\n\t\tsetUpdated(Utils.timestamp());\n\t}\n\n\tpublic boolean hasBadge(Badge b) {\n\t\treturn StringUtils.containsIgnoreCase(badges, \",\".concat(b.toString()).concat(\",\"));\n\t}\n\n\tpublic void addBadge(Badge b) {\n\t\tString badge = b.toString();\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\tbadges = \",\";\n\t\t}\n\t\tbadges = badges.concat(badge).concat(\",\");\n\t\taddRep(b.getReward());\n\t}\n\n\tpublic void addBadges(Badge[] larr) {\n\t\tfor (Badge badge : larr) {\n\t\t\taddBadge(badge);\n\t\t\taddRep(badge.getReward());\n\t\t}\n\t}\n\n\tpublic void removeBadge(Badge b) {\n\t\tString badge = b.toString();\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\treturn;\n\t\t}\n\t\tbadge = \",\".concat(badge).concat(\",\");\n\n\t\tif (badges.contains(badge)) {\n\t\t\tbadges = badges.replaceFirst(badge, \",\");\n\t\t\tremoveRep(b.getReward());\n\t\t}\n\t\tif (StringUtils.isBlank(badges.replaceAll(\",\", \"\"))) {\n\t\t\tbadges = \"\";\n\t\t}\n\t}\n\n\tpublic HashMap<String, Integer> getBadgesMap() {\n\t\tHashMap<String, Integer> badgeMap = new HashMap<String, Integer>(0);\n\t\tif (StringUtils.isBlank(badges)) {\n\t\t\treturn badgeMap;\n\t\t}\n\n\t\tfor (String badge : badges.split(\",\")) {\n\t\t\tInteger val = badgeMap.get(badge);\n\t\t\tint count = (val == null) ? 0 : val.intValue();\n\t\t\tbadgeMap.put(badge, ++count);\n\t\t}\n\n\t\tbadgeMap.remove(\"\");\n\t\treturn badgeMap;\n\t}\n\n\tpublic boolean isComplete() {\n\t\treturn (!StringUtils.isBlank(location)\n\t\t\t\t&& !StringUtils.isBlank(aboutme)\n\t\t\t\t&& !StringUtils.isBlank(website));\n\t}\n\n\tpublic String create() {\n\t\tsetLastseen(System.currentTimeMillis());\n\t\tclient().create(this);\n\t\treturn getId();\n\t}\n\n\tpublic void update() {\n\t\tsetLastseen(System.currentTimeMillis());\n\t\tupdateVoteGains(0); // reset vote gains if they we're past the time frame\n\t\tclient().update(this);\n\t}\n\n\tpublic void delete() {\n\t\tclient().delete(this);\n\t\tclient().delete(getUser());\n\t\tScooldUtils.getInstance().unsubscribeFromAllNotifications(this);\n\t}\n\n\tpublic int countNewReports() {\n\t\tif (newreports == null) {\n\t\t\tnewreports = client().getCount(Utils.type(Report.class),\n\t\t\t\t\tCollections.singletonMap(\"properties.closed\", false)).intValue();\n\t\t}\n\t\treturn newreports;\n\t}\n\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null || getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Objects.equals(getName(), ((Profile) obj).getName())\n\t\t\t\t&& Objects.equals(getLocation(), ((Profile) obj).getLocation())\n\t\t\t\t&& Objects.equals(getId(), ((Profile) obj).getId());\n\t}\n\n\tpublic int hashCode() {\n\t\treturn Objects.hashCode(getName()) + Objects.hashCode(getId());\n\t}\n}\n", "/*\n * Copyright 2013-2022 Erudika. https://erudika.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * For issues and patches go to: https://github.com/erudika\n */\npackage com.erudika.scoold.utils;\n\nimport com.erudika.para.client.ParaClient;\nimport com.erudika.para.core.Address;\nimport com.erudika.para.core.ParaObject;\nimport com.erudika.para.core.Sysprop;\nimport com.erudika.para.core.Tag;\nimport com.erudika.para.core.User;\nimport com.erudika.para.core.Vote;\nimport com.erudika.para.core.Webhook;\nimport com.erudika.para.core.email.Emailer;\nimport com.erudika.para.core.utils.Config;\nimport com.erudika.para.core.utils.Pager;\nimport com.erudika.para.core.utils.Para;\nimport com.erudika.para.core.utils.ParaObjectUtils;\nimport com.erudika.para.core.utils.Utils;\nimport com.erudika.para.core.validation.ValidationUtils;\nimport com.erudika.scoold.ScooldConfig;\nimport static com.erudika.scoold.ScooldServer.*;\nimport com.erudika.scoold.core.Comment;\nimport com.erudika.scoold.core.Feedback;\nimport com.erudika.scoold.core.Post;\nimport static com.erudika.scoold.core.Post.ALL_MY_SPACES;\nimport static com.erudika.scoold.core.Post.DEFAULT_SPACE;\nimport com.erudika.scoold.core.Profile;\nimport static com.erudika.scoold.core.Profile.Badge.ENTHUSIAST;\nimport static com.erudika.scoold.core.Profile.Badge.TEACHER;\nimport com.erudika.scoold.core.Question;\nimport com.erudika.scoold.core.Reply;\nimport com.erudika.scoold.core.Report;\nimport com.erudika.scoold.core.Revision;\nimport com.erudika.scoold.core.UnapprovedQuestion;\nimport com.erudika.scoold.core.UnapprovedReply;\nimport static com.erudika.scoold.utils.HttpUtils.getCookieValue;\nimport com.erudika.scoold.utils.avatars.AvatarFormat;\nimport com.erudika.scoold.utils.avatars.AvatarRepository;\nimport com.erudika.scoold.utils.avatars.AvatarRepositoryProxy;\nimport com.erudika.scoold.utils.avatars.GravatarAvatarGenerator;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.JWSHeader;\nimport com.nimbusds.jose.JWSSigner;\nimport com.nimbusds.jose.JWSVerifier;\nimport com.nimbusds.jose.crypto.MACSigner;\nimport com.nimbusds.jose.crypto.MACVerifier;\nimport com.nimbusds.jwt.JWTClaimsSet;\nimport com.nimbusds.jwt.SignedJWT;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Predicate;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.validation.ConstraintViolation;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.RegExUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.stereotype.Component;\n\n/**\n *\n * @author Alex Bogdanovski [alex@erudika.com]\n */\n@Component\n@Named\npublic final class ScooldUtils {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ScooldUtils.class);\n\tprivate static final Map<String, String> FILE_CACHE = new ConcurrentHashMap<String, String>();\n\tprivate static final Set<String> APPROVED_DOMAINS = new HashSet<>();\n\tprivate static final Set<String> ADMINS = new HashSet<>();\n\tprivate static final String EMAIL_ALERTS_PREFIX = \"email-alerts\" + Para.getConfig().separator();\n\n\tprivate static final Profile API_USER;\n\tprivate static final Set<String> CORE_TYPES;\n\tprivate static final Set<String> HOOK_EVENTS;\n\tprivate static final Map<String, String> WHITELISTED_MACROS;\n\tprivate static final Map<String, Object> API_KEYS = new LinkedHashMap<>(); // jti => jwt\n\n\tprivate List<Sysprop> allSpaces;\n\n\tprivate static final ScooldConfig CONF = new ScooldConfig();\n\n\tstatic {\n\t\tAPI_USER = new Profile(\"1\", \"System\");\n\t\tAPI_USER.setVotes(1);\n\t\tAPI_USER.setCreatorid(\"1\");\n\t\tAPI_USER.setTimestamp(Utils.timestamp());\n\t\tAPI_USER.setGroups(User.Groups.ADMINS.toString());\n\n\t\tCORE_TYPES = new HashSet<>(Arrays.asList(Utils.type(Comment.class),\n\t\t\t\tUtils.type(Feedback.class),\n\t\t\t\tUtils.type(Profile.class),\n\t\t\t\tUtils.type(Question.class),\n\t\t\t\tUtils.type(Reply.class),\n\t\t\t\tUtils.type(Report.class),\n\t\t\t\tUtils.type(Revision.class),\n\t\t\t\tUtils.type(UnapprovedQuestion.class),\n\t\t\t\tUtils.type(UnapprovedReply.class),\n\t\t\t\t// Para core types\n\t\t\t\tUtils.type(Address.class),\n\t\t\t\tUtils.type(Sysprop.class),\n\t\t\t\tUtils.type(Tag.class),\n\t\t\t\tUtils.type(User.class),\n\t\t\t\tUtils.type(Vote.class)\n\t\t));\n\n\t\tHOOK_EVENTS = new HashSet<>(Arrays.asList(\n\t\t\t\t\"question.create\",\n\t\t\t\t\"question.close\",\n\t\t\t\t\"answer.create\",\n\t\t\t\t\"answer.accept\",\n\t\t\t\t\"report.create\",\n\t\t\t\t\"comment.create\",\n\t\t\t\t\"user.signup\",\n\t\t\t\t\"revision.restore\"));\n\n\t\tWHITELISTED_MACROS = new HashMap<String, String>();\n\t\tWHITELISTED_MACROS.put(\"spaces\", \"#spacespage($spaces)\");\n\t\tWHITELISTED_MACROS.put(\"webhooks\", \"#webhookspage($webhooks)\");\n\t\tWHITELISTED_MACROS.put(\"comments\", \"#commentspage($commentslist)\");\n\t\tWHITELISTED_MACROS.put(\"simplecomments\", \"#simplecommentspage($commentslist)\");\n\t\tWHITELISTED_MACROS.put(\"postcomments\", \"#commentspage($showpost.comments)\");\n\t\tWHITELISTED_MACROS.put(\"replies\", \"#answerspage($answerslist $showPost)\");\n\t\tWHITELISTED_MACROS.put(\"feedback\", \"#questionspage($feedbacklist)\");\n\t\tWHITELISTED_MACROS.put(\"people\", \"#peoplepage($userlist)\");\n\t\tWHITELISTED_MACROS.put(\"questions\", \"#questionspage($questionslist)\");\n\t\tWHITELISTED_MACROS.put(\"compactanswers\", \"#compactanswerspage($answerslist)\");\n\t\tWHITELISTED_MACROS.put(\"answers\", \"#answerspage($answerslist)\");\n\t\tWHITELISTED_MACROS.put(\"reports\", \"#reportspage($reportslist)\");\n\t\tWHITELISTED_MACROS.put(\"revisions\", \"#revisionspage($revisionslist $showPost)\");\n\t\tWHITELISTED_MACROS.put(\"tags\", \"#tagspage($tagslist)\");\n\t}\n\n\tprivate final ParaClient pc;\n\tprivate final LanguageUtils langutils;\n\tprivate final AvatarRepository avatarRepository;\n\tprivate final GravatarAvatarGenerator gravatarAvatarGenerator;\n\tprivate static ScooldUtils instance;\n\tprivate Sysprop customTheme;\n\t@Inject private Emailer emailer;\n\n\t@Inject\n\tpublic ScooldUtils(ParaClient pc, LanguageUtils langutils, AvatarRepositoryProxy avatarRepository,\n\t\t\tGravatarAvatarGenerator gravatarAvatarGenerator) {\n\t\tthis.pc = pc;\n\t\tthis.langutils = langutils;\n\t\tthis.avatarRepository = avatarRepository;\n\t\tthis.gravatarAvatarGenerator = gravatarAvatarGenerator;\n\t\tAPI_USER.setPicture(avatarRepository.getAnonymizedLink(CONF.supportEmail()));\n\t}\n\n\tpublic ParaClient getParaClient() {\n\t\treturn pc;\n\t}\n\n\tpublic LanguageUtils getLangutils() {\n\t\treturn langutils;\n\t}\n\n\tpublic static ScooldUtils getInstance() {\n\t\treturn instance;\n\t}\n\n\tstatic void setInstance(ScooldUtils instance) {\n\t\tScooldUtils.instance = instance;\n\t}\n\n\tpublic static ScooldConfig getConfig() {\n\t\treturn CONF;\n\t}\n\n\tstatic {\n\t\t// multiple domains/admins are allowed only in Scoold PRO\n\t\tString approvedDomain = StringUtils.substringBefore(CONF.approvedDomainsForSignups(), \",\");\n\t\tif (!StringUtils.isBlank(approvedDomain)) {\n\t\t\tAPPROVED_DOMAINS.add(approvedDomain);\n\t\t}\n\t\t// multiple admins are allowed only in Scoold PRO\n\t\tString admin = StringUtils.substringBefore(CONF.admins(), \",\");\n\t\tif (!StringUtils.isBlank(admin)) {\n\t\t\tADMINS.add(admin);\n\t\t}\n\t}\n\n\tpublic static void tryConnectToPara(Callable<Boolean> callable) {\n\t\tretryConnection(callable, 0);\n\t}\n\n\tprivate static void retryConnection(Callable<Boolean> callable, int retryCount) {\n\t\ttry {\n\t\t\tif (!callable.call()) {\n\t\t\t\tthrow new Exception();\n\t\t\t} else if (retryCount > 0) {\n\t\t\t\tlogger.info(\"Connected to Para backend.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tint maxRetries = CONF.paraConnectionRetryAttempts();\n\t\t\tint retryInterval = CONF.paraConnectionRetryIntervalSec();\n\t\t\tint count = ++retryCount;\n\t\t\tlogger.error(\"No connection to Para backend. Retrying connection in {}s (attempt {} of {})...\",\n\t\t\t\t\tretryInterval, count, maxRetries);\n\t\t\tif (maxRetries < 0 || retryCount < maxRetries) {\n\t\t\t\tPara.asyncExecute(() -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(retryInterval * 1000L);\n\t\t\t\t\t} catch (InterruptedException ex) {\n\t\t\t\t\t\tlogger.error(null, ex);\n\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t}\n\t\t\t\t\tretryConnection(callable, count);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ParaObject checkAuth(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n\t\tProfile authUser = null;\n\t\tString jwt = HttpUtils.getStateParam(CONF.authCookie(), req);\n\t\tif (isApiRequest(req)) {\n\t\t\treturn checkApiAuth(req);\n\t\t} else if (jwt != null && !StringUtils.endsWithAny(req.getRequestURI(),\n\t\t\t\t\".js\", \".css\", \".svg\", \".png\", \".jpg\", \".ico\", \".gif\", \".woff2\", \".woff\", \"people/avatar\")) {\n\t\t\tUser u = pc.me(jwt);\n\t\t\tif (u != null && isEmailDomainApproved(u.getEmail())) {\n\t\t\t\tauthUser = getOrCreateProfile(u, req);\n\t\t\t\tauthUser.setUser(u);\n\t\t\t\tauthUser.setOriginalPicture(u.getPicture());\n\t\t\t\tboolean updatedRank = promoteOrDemoteUser(authUser, u);\n\t\t\t\tboolean updatedProfile = updateProfilePictureAndName(authUser, u);\n\t\t\t\tif (updatedRank || updatedProfile) {\n\t\t\t\t\tauthUser.update();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearSession(req, res);\n\t\t\t\tlogger.info(\"Invalid JWT found in cookie {}.\", CONF.authCookie());\n\t\t\t\tres.sendRedirect(CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"?code=3&error=true\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tprivate ParaObject checkApiAuth(HttpServletRequest req) {\n\t\tif (req.getRequestURI().equals(CONF.serverContextPath() + \"/api\")) {\n\t\t\treturn null;\n\t\t}\n\t\tString apiKeyJWT = StringUtils.removeStart(req.getHeader(HttpHeaders.AUTHORIZATION), \"Bearer \");\n\t\tif (req.getRequestURI().equals(CONF.serverContextPath() + \"/api/ping\")) {\n\t\t\treturn API_USER;\n\t\t} else if (req.getRequestURI().equals(CONF.serverContextPath() + \"/api/stats\") && isValidJWToken(apiKeyJWT)) {\n\t\t\treturn API_USER;\n\t\t} else if (!isApiEnabled() || StringUtils.isBlank(apiKeyJWT) || !isValidJWToken(apiKeyJWT)) {\n\t\t\tthrow new UnauthorizedException();\n\t\t}\n\t\treturn API_USER;\n\t}\n\n\tprivate boolean promoteOrDemoteUser(Profile authUser, User u) {\n\t\tif (authUser != null) {\n\t\t\tif (!isAdmin(authUser) && isRecognizedAsAdmin(u)) {\n\t\t\t\tlogger.info(\"User '{}' with id={} promoted to admin.\", u.getName(), authUser.getId());\n\t\t\t\tauthUser.setGroups(User.Groups.ADMINS.toString());\n\t\t\t\treturn true;\n\t\t\t} else if (isAdmin(authUser) && !isRecognizedAsAdmin(u)) {\n\t\t\t\tlogger.info(\"User '{}' with id={} demoted to regular user.\", u.getName(), authUser.getId());\n\t\t\t\tauthUser.setGroups(User.Groups.USERS.toString());\n\t\t\t\treturn true;\n\t\t\t} else if (!isMod(authUser) && u.isModerator()) {\n\t\t\t\tauthUser.setGroups(User.Groups.MODS.toString());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate Profile getOrCreateProfile(User u, HttpServletRequest req) {\n\t\tProfile authUser = pc.read(Profile.id(u.getId()));\n\t\tif (authUser == null) {\n\t\t\tauthUser = Profile.fromUser(u);\n\t\t\tauthUser.create();\n\t\t\tif (!u.getIdentityProvider().equals(\"generic\")) {\n\t\t\t\tsendWelcomeEmail(u, false, req);\n\t\t\t}\n\t\t\tMap<String, Object> payload = new LinkedHashMap<>(ParaObjectUtils.getAnnotatedFields(authUser, false));\n\t\t\tpayload.put(\"user\", u);\n\t\t\ttriggerHookEvent(\"user.signup\", payload);\n\t\t\tlogger.info(\"Created new user '{}' with id={}, groups={}, spaces={}.\",\n\t\t\t\t\tu.getName(), authUser.getId(), authUser.getGroups(), authUser.getSpaces());\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tprivate boolean updateProfilePictureAndName(Profile authUser, User u) {\n\t\tboolean update = false;\n\t\tif (!StringUtils.equals(u.getPicture(), authUser.getPicture())\n\t\t\t\t&& !gravatarAvatarGenerator.isLink(authUser.getPicture())\n\t\t\t\t&& !CONF.avatarEditsEnabled()) {\n\t\t\tauthUser.setPicture(u.getPicture());\n\t\t\tupdate = true;\n\t\t}\n\t\tif (!CONF.nameEditsEnabled() &&\t!StringUtils.equals(u.getName(), authUser.getName())) {\n\t\t\tauthUser.setName(StringUtils.abbreviate(u.getName(), 256));\n\t\t\tupdate = true;\n\t\t}\n\t\tif (!StringUtils.equals(u.getName(), authUser.getOriginalName())) {\n\t\t\tauthUser.setOriginalName(u.getName());\n\t\t\tupdate = true;\n\t\t}\n\t\treturn update;\n\t}\n\n\tpublic boolean isDarkModeEnabled(Profile authUser, HttpServletRequest req) {\n\t\treturn (authUser != null && authUser.getDarkmodeEnabled()) ||\n\t\t\t\t\"1\".equals(HttpUtils.getCookieValue(req, \"dark-mode\"));\n\t}\n\n\tprivate String getDefaultEmailSignature(String defaultText) {\n\t\tString template = CONF.emailsDefaultSignatureText(defaultText);\n\t\treturn Utils.formatMessage(template, CONF.appName());\n\t}\n\n\tpublic void sendWelcomeEmail(User user, boolean verifyEmail, HttpServletRequest req) {\n\t\t// send welcome email notification\n\t\tif (user != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"signin.welcome\"), CONF.appName());\n\t\t\tString body1 = Utils.formatMessage(CONF.emailsWelcomeText1(lang), CONF.appName());\n\t\t\tString body2 = CONF.emailsWelcomeText2(lang);\n\t\t\tString body3 = getDefaultEmailSignature(CONF.emailsWelcomeText3(lang));\n\n\t\t\tif (verifyEmail && !user.getActive() && !StringUtils.isBlank(user.getIdentifier())) {\n\t\t\t\tSysprop s = pc.read(user.getIdentifier());\n\t\t\t\tif (s != null) {\n\t\t\t\t\tString token = Utils.base64encURL(Utils.generateSecurityToken().getBytes());\n\t\t\t\t\ts.addProperty(Config._EMAIL_TOKEN, token);\n\t\t\t\t\tpc.update(s);\n\t\t\t\t\ttoken = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/register?id=\" + user.getId() + \"&token=\" + token;\n\t\t\t\t\tbody3 = \"<b><a href=\\\"\" + token + \"\\\">\" + lang.get(\"signin.welcome.verify\") + \"</a></b><br><br>\" + body3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"signin.welcome.title\"), escapeHtml(user.getName())));\n\t\t\tmodel.put(\"body\", body1 + body2 + body3);\n\t\t\temailer.sendEmail(Arrays.asList(user.getEmail()), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\tpublic void sendVerificationEmail(Sysprop identifier, HttpServletRequest req) {\n\t\tif (identifier != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"signin.welcome\"), CONF.appName());\n\t\t\tString body = getDefaultEmailSignature(CONF.emailsWelcomeText3(lang));\n\n\t\t\tString token = Utils.base64encURL(Utils.generateSecurityToken().getBytes());\n\t\t\tidentifier.addProperty(Config._EMAIL_TOKEN, token);\n\t\t\tidentifier.addProperty(\"confirmationTimestamp\", Utils.timestamp());\n\t\t\tpc.update(identifier);\n\t\t\ttoken = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/register?id=\" +\n\t\t\t\t\tidentifier.getCreatorid() + \"&token=\" + token;\n\t\t\tbody = \"<b><a href=\\\"\" + token + \"\\\">\" + lang.get(\"signin.welcome.verify\") + \"</a></b><br><br>\" + body;\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", lang.get(\"hello\"));\n\t\t\tmodel.put(\"body\", body);\n\t\t\temailer.sendEmail(Arrays.asList(identifier.getId()), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\tpublic void sendPasswordResetEmail(String email, String token, HttpServletRequest req) {\n\t\tif (email != null && token != null) {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString url = CONF.serverUrl() + CONF.serverContextPath() + SIGNINLINK + \"/iforgot?email=\" + email + \"&token=\" + token;\n\t\t\tString subject = lang.get(\"iforgot.title\");\n\t\t\tString body1 = lang.get(\"notification.iforgot.body1\") + \"<br><br>\";\n\t\t\tString body2 = Utils.formatMessage(\"<b><a href=\\\"{0}\\\">\" + lang.get(\"notification.iforgot.body2\") +\n\t\t\t\t\t\"</a></b><br><br>\", url);\n\t\t\tString body3 = getDefaultEmailSignature(lang.get(\"notification.signature\") + \"<br><br>\");\n\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", lang.get(\"hello\"));\n\t\t\tmodel.put(\"body\", body1 + body2 + body3);\n\t\t\temailer.sendEmail(Arrays.asList(email), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void subscribeToNotifications(String email, String channelId) {\n\t\tif (!StringUtils.isBlank(email) && !StringUtils.isBlank(channelId)) {\n\t\t\tSysprop s = pc.read(channelId);\n\t\t\tif (s == null || !s.hasProperty(\"emails\")) {\n\t\t\t\ts = new Sysprop(channelId);\n\t\t\t\ts.addProperty(\"emails\", new LinkedList<>());\n\t\t\t}\n\t\t\tSet<String> emails = new HashSet<>((List<String>) s.getProperty(\"emails\"));\n\t\t\tif (emails.add(email)) {\n\t\t\t\ts.addProperty(\"emails\", emails);\n\t\t\t\tpc.create(s);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void unsubscribeFromNotifications(String email, String channelId) {\n\t\tif (!StringUtils.isBlank(email) && !StringUtils.isBlank(channelId)) {\n\t\t\tSysprop s = pc.read(channelId);\n\t\t\tif (s == null || !s.hasProperty(\"emails\")) {\n\t\t\t\ts = new Sysprop(channelId);\n\t\t\t\ts.addProperty(\"emails\", new LinkedList<>());\n\t\t\t}\n\t\t\tSet<String> emails = new HashSet<>((List<String>) s.getProperty(\"emails\"));\n\t\t\tif (emails.remove(email)) {\n\t\t\t\ts.addProperty(\"emails\", emails);\n\t\t\t\tpc.create(s);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Set<String> getNotificationSubscribers(String channelId) {\n\t\treturn ((List<String>) Optional.ofNullable(((Sysprop) pc.read(channelId))).\n\t\t\t\torElse(new Sysprop()).getProperties().getOrDefault(\"emails\", Collections.emptyList())).\n\t\t\t\tstream().collect(Collectors.toSet());\n\t}\n\n\tpublic void unsubscribeFromAllNotifications(Profile p) {\n\t\tUser u = p.getUser();\n\t\tif (u != null) {\n\t\t\tunsubscribeFromNewPosts(u);\n\t\t}\n\t}\n\n\tpublic boolean isEmailDomainApproved(String email) {\n\t\tif (StringUtils.isBlank(email)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!APPROVED_DOMAINS.isEmpty() && !APPROVED_DOMAINS.contains(StringUtils.substringAfter(email, \"@\"))) {\n\t\t\tlogger.warn(\"Attempted signin from an unknown domain - email {} is part of an unapproved domain.\", email);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic Object isSubscribedToNewPosts(HttpServletRequest req) {\n\t\tif (!isNewPostNotificationAllowed()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tProfile authUser = getAuthUser(req);\n\t\tif (authUser != null) {\n\t\t\tUser u = authUser.getUser();\n\t\t\tif (u != null) {\n\t\t\t\treturn getNotificationSubscribers(EMAIL_ALERTS_PREFIX + \"new_post_subscribers\").contains(u.getEmail());\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic void subscribeToNewPosts(User u) {\n\t\tif (u != null) {\n\t\t\tsubscribeToNotifications(u.getEmail(), EMAIL_ALERTS_PREFIX + \"new_post_subscribers\");\n\t\t}\n\t}\n\n\tpublic void unsubscribeFromNewPosts(User u) {\n\t\tif (u != null) {\n\t\t\tunsubscribeFromNotifications(u.getEmail(), EMAIL_ALERTS_PREFIX + \"new_post_subscribers\");\n\t\t}\n\t}\n\n\tprivate Map<String, Profile> buildProfilesMap(List<User> users) {\n\t\tif (users != null && !users.isEmpty()) {\n\t\t\tMap<String, User> userz = users.stream().collect(Collectors.toMap(u -> u.getId(), u -> u));\n\t\t\tList<Profile> profiles = pc.readAll(userz.keySet().stream().\n\t\t\t\t\tmap(uid -> Profile.id(uid)).collect(Collectors.toList()));\n\t\t\tMap<String, Profile> profilesMap = new HashMap<String, Profile>(users.size());\n\t\t\tprofiles.forEach(pr -> profilesMap.put(userz.get(pr.getCreatorid()).getEmail(), pr));\n\t\t\treturn profilesMap;\n\t\t}\n\t\treturn Collections.emptyMap();\n\t}\n\n\tprivate void sendEmailsToSubscribersInSpace(Set<String> emails, String space, String subject, String html) {\n\t\tint i = 0;\n\t\tint max = CONF.maxItemsPerPage();\n\t\tList<String> terms = new ArrayList<>(max);\n\t\tfor (String email : emails) {\n\t\t\tterms.add(email);\n\t\t\tif (++i == max) {\n\t\t\t\temailer.sendEmail(buildProfilesMap(pc.findTermInList(Utils.type(User.class), Config._EMAIL, terms)).\n\t\t\t\t\t\tentrySet().stream().filter(e -> canAccessSpace(e.getValue(), space) &&\n\t\t\t\t\t\t\t\t!isIgnoredSpaceForNotifications(e.getValue(), space)).\n\t\t\t\t\t\tmap(e -> e.getKey()).collect(Collectors.toList()), subject, html);\n\t\t\t\ti = 0;\n\t\t\t\tterms.clear();\n\t\t\t}\n\t\t}\n\t\tif (!terms.isEmpty()) {\n\t\t\temailer.sendEmail(buildProfilesMap(pc.findTermInList(Utils.type(User.class), Config._EMAIL, terms)).\n\t\t\t\t\tentrySet().stream().filter(e -> canAccessSpace(e.getValue(), space) &&\n\t\t\t\t\t\t\t!isIgnoredSpaceForNotifications(e.getValue(), space)).\n\t\t\t\t\tmap(e -> e.getKey()).collect(Collectors.toList()), subject, html);\n\t\t}\n\t}\n\n\tprivate Set<String> getFavTagsSubscribers(List<String> tags) {\n\t\tif (!tags.isEmpty()) {\n\t\t\tSet<String> emails = new LinkedHashSet<>();\n\t\t\t// find all user objects even if there are more than 10000 users in the system\n\t\t\tPager pager = new Pager(1, \"_docid\", false, CONF.maxItemsPerPage());\n\t\t\tList<Profile> profiles;\n\t\t\tdo {\n\t\t\t\tprofiles = pc.findQuery(Utils.type(Profile.class),\n\t\t\t\t\t\t\"properties.favtags:(\" + tags.stream().\n\t\t\t\t\t\t\t\tmap(t -> \"\\\"\".concat(t).concat(\"\\\"\")).distinct().\n\t\t\t\t\t\t\t\tcollect(Collectors.joining(\" \")) + \") AND properties.favtagsEmailsEnabled:true\", pager);\n\t\t\t\tif (!profiles.isEmpty()) {\n\t\t\t\t\tList<User> users = pc.readAll(profiles.stream().map(p -> p.getCreatorid()).\n\t\t\t\t\t\t\tdistinct().collect(Collectors.toList()));\n\n\t\t\t\t\tusers.stream().forEach(u -> emails.add(u.getEmail()));\n\t\t\t\t}\n\t\t\t} while (!profiles.isEmpty());\n\t\t\treturn emails;\n\t\t}\n\t\treturn Collections.emptySet();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void sendUpdatedFavTagsNotifications(Post question, List<String> addedTags, HttpServletRequest req) {\n\t\tif (!isFavTagsNotificationAllowed()) {\n\t\t\treturn;\n\t\t}\n\t\t// sends a notification to subscibers of a tag if that tag was added to an existing question\n\t\tif (question != null && !question.isReply() && addedTags != null && !addedTags.isEmpty()) {\n\t\t\tProfile postAuthor = question.getAuthor(); // the current user - same as utils.getAuthUser(req)\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = postAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(question.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(postAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + question.getPostLink(false, false);\n\t\t\tString tagsString = Optional.ofNullable(question.getTags()).orElse(Collections.emptyList()).stream().\n\t\t\t\t\tmap(t -> \"<span class=\\\"tag\\\">\" +\n\t\t\t\t\t\t\t(addedTags.contains(t) ? \"<b>\" + escapeHtml(t) + \"<b>\" : escapeHtml(t)) + \"</span>\").\n\t\t\t\t\tcollect(Collectors.joining(\"&nbsp;\"));\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.favtags.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(question.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.favtags.heading\"), picture, escapeHtml(name)));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2><a href='{0}'>{1}</a></h2><div>{2}</div><br>{3}\",\n\t\t\t\t\tpostURL, escapeHtml(question.getTitle()), body, tagsString));\n\n\t\t\tSet<String> emails = getFavTagsSubscribers(addedTags);\n\t\t\tsendEmailsToSubscribersInSpace(emails, question.getSpace(), subject, compileEmailTemplate(model));\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void sendNewPostNotifications(Post question, HttpServletRequest req) {\n\t\tif (question == null) {\n\t\t\treturn;\n\t\t}\n\t\t// the current user - same as utils.getAuthUser(req)\n\t\tProfile postAuthor = question.getAuthor() != null ? question.getAuthor() : pc.read(question.getCreatorid());\n\t\tif (!question.getType().equals(Utils.type(UnapprovedQuestion.class))) {\n\t\t\tif (!isNewPostNotificationAllowed()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = postAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(question.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(postAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + question.getPostLink(false, false);\n\t\t\tString tagsString = Optional.ofNullable(question.getTags()).orElse(Collections.emptyList()).stream().\n\t\t\t\t\tmap(t -> \"<span class=\\\"tag\\\">\" + escapeHtml(t) + \"</span>\").\n\t\t\t\t\tcollect(Collectors.joining(\"&nbsp;\"));\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.newposts.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(question.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.newposts.heading\"), picture, escapeHtml(name)));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2><a href='{0}'>{1}</a></h2><div>{2}</div><br>{3}\",\n\t\t\t\t\tpostURL, escapeHtml(question.getTitle()), body, tagsString));\n\n\t\t\tSet<String> emails = new HashSet<String>(getNotificationSubscribers(EMAIL_ALERTS_PREFIX + \"new_post_subscribers\"));\n\t\t\temails.addAll(getFavTagsSubscribers(question.getTags()));\n\t\t\tsendEmailsToSubscribersInSpace(emails, question.getSpace(), subject, compileEmailTemplate(model));\n\t\t} else if (postsNeedApproval() && question instanceof UnapprovedQuestion) {\n\t\t\tReport rep = new Report();\n\t\t\trep.setDescription(\"New question awaiting approval\");\n\t\t\trep.setSubType(Report.ReportType.OTHER);\n\t\t\trep.setLink(question.getPostLink(false, false));\n\t\t\trep.setAuthorName(postAuthor.getName());\n\t\t\trep.create();\n\t\t}\n\t}\n\n\tpublic void sendReplyNotifications(Post parentPost, Post reply, HttpServletRequest req) {\n\t\t// send email notification to author of post except when the reply is by the same person\n\t\tif (parentPost != null && reply != null && !StringUtils.equals(parentPost.getCreatorid(), reply.getCreatorid())) {\n\t\t\tProfile replyAuthor = reply.getAuthor(); // the current user - same as utils.getAuthUser(req)\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tString name = replyAuthor.getName();\n\t\t\tString body = Utils.markdownToHtml(reply.getBody());\n\t\t\tString picture = Utils.formatMessage(\"<img src='{0}' width='25'>\", escapeHtmlAttribute(avatarRepository.\n\t\t\t\t\tgetLink(replyAuthor, AvatarFormat.Square25)));\n\t\t\tString postURL = CONF.serverUrl() + parentPost.getPostLink(false, false);\n\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.reply.subject\"), name,\n\t\t\t\t\tUtils.abbreviate(reply.getTitle(), 255));\n\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.reply.heading\"),\n\t\t\t\t\tUtils.formatMessage(\"<a href='{0}'>{1}</a>\", postURL, escapeHtml(parentPost.getTitle()))));\n\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2>{0} {1}:</h2><div>{2}</div>\", picture, escapeHtml(name), body));\n\n\t\t\tProfile authorProfile = pc.read(parentPost.getCreatorid());\n\t\t\tif (authorProfile != null) {\n\t\t\t\tUser author = authorProfile.getUser();\n\t\t\t\tif (author != null) {\n\t\t\t\t\tif (authorProfile.getReplyEmailsEnabled()) {\n\t\t\t\t\t\tparentPost.addFollower(author);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (postsNeedApproval() && reply instanceof UnapprovedReply) {\n\t\t\t\tReport rep = new Report();\n\t\t\t\trep.setDescription(\"New reply awaiting approval\");\n\t\t\t\trep.setSubType(Report.ReportType.OTHER);\n\t\t\t\trep.setLink(parentPost.getPostLink(false, false) + \"#post-\" + reply.getId());\n\t\t\t\trep.setAuthorName(reply.getAuthor().getName());\n\t\t\t\trep.create();\n\t\t\t}\n\n\t\t\tif (isReplyNotificationAllowed() && parentPost.hasFollowers()) {\n\t\t\t\temailer.sendEmail(new ArrayList<String>(parentPost.getFollowers().values()),\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t\tcompileEmailTemplate(model));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void sendCommentNotifications(Post parentPost, Comment comment, Profile commentAuthor, HttpServletRequest req) {\n\t\t// send email notification to author of post except when the comment is by the same person\n\t\tif (parentPost != null && comment != null) {\n\t\t\tparentPost.setAuthor(pc.read(Profile.id(parentPost.getCreatorid()))); // parent author is not current user (authUser)\n\t\t\tMap<String, Object> payload = new LinkedHashMap<>(ParaObjectUtils.getAnnotatedFields(comment, false));\n\t\t\tpayload.put(\"parent\", parentPost);\n\t\t\tpayload.put(\"author\", commentAuthor);\n\t\t\ttriggerHookEvent(\"comment.create\", payload);\n\t\t\t// get the last 5-6 commentators who want to be notified - https://github.com/Erudika/scoold/issues/201\n\t\t\tPager p = new Pager(1, Config._TIMESTAMP, false, 5);\n\t\t\tboolean isCommentatorThePostAuthor = StringUtils.equals(parentPost.getCreatorid(), comment.getCreatorid());\n\t\t\tSet<String> last5ids = pc.findChildren(parentPost, Utils.type(Comment.class),\n\t\t\t\t\t\"!(\" + Config._CREATORID + \":\\\"\" + comment.getCreatorid() + \"\\\")\", p).\n\t\t\t\t\tstream().map(c -> c.getCreatorid()).distinct().collect(Collectors.toSet());\n\t\t\tif (!isCommentatorThePostAuthor && !last5ids.contains(parentPost.getCreatorid())) {\n\t\t\t\tlast5ids = new HashSet<>(last5ids);\n\t\t\t\tlast5ids.add(parentPost.getCreatorid());\n\t\t\t}\n\t\t\tMap<String, String> lang = getLang(req);\n\t\t\tList<Profile> last5commentators = pc.readAll(new ArrayList<>(last5ids));\n\t\t\tlast5commentators = last5commentators.stream().filter(u -> u.getCommentEmailsEnabled()).collect(Collectors.toList());\n\t\t\tpc.readAll(last5commentators.stream().map(u -> u.getCreatorid()).collect(Collectors.toList())).forEach(author -> {\n\t\t\t\tif (isCommentNotificationAllowed()) {\n\t\t\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\t\t\tString name = commentAuthor.getName();\n\t\t\t\t\tString body = Utils.markdownToHtml(comment.getComment());\n\t\t\t\t\tString pic = Utils.formatMessage(\"<img src='{0}' width='25'>\",\n\t\t\t\t\t\tescapeHtmlAttribute(avatarRepository.getLink(commentAuthor, AvatarFormat.Square25)));\n\t\t\t\t\tString postURL = CONF.serverUrl() + parentPost.getPostLink(false, false);\n\t\t\t\t\tString subject = Utils.formatMessage(lang.get(\"notification.comment.subject\"), name, parentPost.getTitle());\n\t\t\t\t\tmodel.put(\"subject\", escapeHtml(subject));\n\t\t\t\t\tmodel.put(\"logourl\", getSmallLogoUrl());\n\t\t\t\t\tmodel.put(\"heading\", Utils.formatMessage(lang.get(\"notification.comment.heading\"),\n\t\t\t\t\t\t\tUtils.formatMessage(\"<a href='{0}'>{1}</a>\", postURL, escapeHtml(parentPost.getTitle()))));\n\t\t\t\t\tmodel.put(\"body\", Utils.formatMessage(\"<h2>{0} {1}:</h2><div class='panel'>{2}</div>\", pic, escapeHtml(name), body));\n\t\t\t\t\temailer.sendEmail(Arrays.asList(((User) author).getEmail()), subject, compileEmailTemplate(model));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate String escapeHtmlAttribute(String value) {\n\t\treturn StringUtils.trimToEmpty(value)\n\t\t\t\t.replaceAll(\"'\", \"%27\")\n\t\t\t\t.replaceAll(\"\\\"\", \"%22\")\n\t\t\t\t.replaceAll(\"\\\\\\\\\", \"\");\n\t}\n\n\tprivate String escapeHtml(String value) {\n\t\treturn StringEscapeUtils.escapeHtml4(value);\n\t}\n\n\tpublic Profile readAuthUser(HttpServletRequest req) {\n\t\tProfile authUser = null;\n\t\tUser u = pc.me(HttpUtils.getStateParam(CONF.authCookie(), req));\n\t\tif (u != null && isEmailDomainApproved(u.getEmail())) {\n\t\t\treturn getOrCreateProfile(u, req);\n\t\t}\n\t\treturn authUser;\n\t}\n\n\tpublic Profile getAuthUser(HttpServletRequest req) {\n\t\treturn (Profile) req.getAttribute(AUTH_USER_ATTRIBUTE);\n\t}\n\n\tpublic boolean isAuthenticated(HttpServletRequest req) {\n\t\treturn getAuthUser(req) != null;\n\t}\n\n\tpublic boolean isFeedbackEnabled() {\n\t\treturn CONF.feedbackEnabled();\n\t}\n\n\tpublic boolean isNearMeFeatureEnabled() {\n\t\treturn CONF.postsNearMeEnabled();\n\t}\n\n\tpublic boolean isDefaultSpacePublic() {\n\t\treturn CONF.isDefaultSpacePublic();\n\t}\n\n\tpublic boolean isWebhooksEnabled() {\n\t\treturn CONF.webhooksEnabled();\n\t}\n\n\tpublic boolean isAnonymityEnabled() {\n\t\treturn CONF.profileAnonimityEnabled();\n\t}\n\n\tpublic boolean isApiEnabled() {\n\t\treturn CONF.apiEnabled();\n\t}\n\n\tpublic boolean isFooterLinksEnabled() {\n\t\treturn CONF.footerLinksEnabled();\n\t}\n\n\tpublic boolean isNotificationsAllowed() {\n\t\treturn CONF.notificationEmailsAllowed();\n\t}\n\n\tpublic boolean isNewPostNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForNewPostsAllowed();\n\t}\n\n\tpublic boolean isFavTagsNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForFavtagsAllowed();\n\t}\n\n\tpublic boolean isReplyNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForRepliesAllowed();\n\t}\n\n\tpublic boolean isCommentNotificationAllowed() {\n\t\treturn isNotificationsAllowed() && CONF.emailsForCommentsAllowed();\n\t}\n\n\tpublic boolean isDarkModeEnabled() {\n\t\treturn CONF.darkModeEnabled();\n\t}\n\n\tpublic boolean isSlackAuthEnabled() {\n\t\treturn CONF.slackAuthEnabled();\n\t}\n\n\tpublic static boolean isGravatarEnabled() {\n\t\treturn CONF.gravatarsEnabled();\n\t}\n\n\tpublic static String gravatarPattern() {\n\t\treturn CONF.gravatarsPattern();\n\t}\n\n\tpublic static String getDefaultAvatar() {\n\t\treturn CONF.imagesLink() + \"/anon.svg\";\n\t}\n\n\tpublic static boolean isAvatarUploadsEnabled() {\n\t\treturn isImgurAvatarRepositoryEnabled() || isCloudinaryAvatarRepositoryEnabled();\n\t}\n\n\tpublic static boolean isImgurAvatarRepositoryEnabled() {\n\t\treturn !StringUtils.isBlank(CONF.imgurClientId()) && \"imgur\".equalsIgnoreCase(CONF.avatarRepository());\n\t}\n\n\tpublic static boolean isCloudinaryAvatarRepositoryEnabled() {\n\t\treturn !StringUtils.isBlank(CONF.cloudinaryUrl()) && \"cloudinary\".equalsIgnoreCase(CONF.avatarRepository());\n\t}\n\n\tpublic String getFooterHTML() {\n\t\treturn CONF.footerHtml();\n\t}\n\n\tpublic boolean isNavbarLink1Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarLink1URL());\n\t}\n\n\tpublic String getNavbarLink1URL() {\n\t\treturn CONF.navbarCustomLink1Url();\n\t}\n\n\tpublic String getNavbarLink1Text() {\n\t\treturn CONF.navbarCustomLink1Text();\n\t}\n\n\tpublic boolean isNavbarLink2Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarLink2URL());\n\t}\n\n\tpublic String getNavbarLink2URL() {\n\t\treturn CONF.navbarCustomLink2Url();\n\t}\n\n\tpublic String getNavbarLink2Text() {\n\t\treturn CONF.navbarCustomLink2Text();\n\t}\n\n\tpublic boolean isNavbarMenuLink1Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarMenuLink1URL());\n\t}\n\n\tpublic String getNavbarMenuLink1URL() {\n\t\treturn CONF.navbarCustomMenuLink1Url();\n\t}\n\n\tpublic String getNavbarMenuLink1Text() {\n\t\treturn CONF.navbarCustomMenuLink1Text();\n\t}\n\n\tpublic boolean isNavbarMenuLink2Enabled() {\n\t\treturn !StringUtils.isBlank(getNavbarMenuLink2URL());\n\t}\n\n\tpublic String getNavbarMenuLink2URL() {\n\t\treturn CONF.navbarCustomMenuLink2Url();\n\t}\n\n\tpublic String getNavbarMenuLink2Text() {\n\t\treturn CONF.navbarCustomMenuLink2Text();\n\t}\n\n\tpublic boolean alwaysHideCommentForms() {\n\t\treturn CONF.alwaysHideCommentForms();\n\t}\n\n\tpublic Set<String> getCoreScooldTypes() {\n\t\treturn Collections.unmodifiableSet(CORE_TYPES);\n\t}\n\n\tpublic Set<String> getCustomHookEvents() {\n\t\treturn Collections.unmodifiableSet(HOOK_EVENTS);\n\t}\n\n\tpublic Pager getPager(String pageParamName, HttpServletRequest req) {\n\t\treturn pagerFromParams(pageParamName, req);\n\t}\n\n\tpublic Pager pagerFromParams(HttpServletRequest req) {\n\t\treturn pagerFromParams(\"page\", req);\n\t}\n\n\tpublic Pager pagerFromParams(String pageParamName, HttpServletRequest req) {\n\t\tPager p = new Pager(CONF.maxItemsPerPage());\n\t\tp.setPage(Math.min(NumberUtils.toLong(req.getParameter(pageParamName), 1), CONF.maxPages()));\n\t\tp.setLimit(NumberUtils.toInt(req.getParameter(\"limit\"), CONF.maxItemsPerPage()));\n\t\tString lastKey = req.getParameter(\"lastKey\");\n\t\tString sort = req.getParameter(\"sortby\");\n\t\tString desc = req.getParameter(\"desc\");\n\t\tif (!StringUtils.isBlank(desc)) {\n\t\t\tp.setDesc(Boolean.parseBoolean(desc));\n\t\t}\n\t\tif (!StringUtils.isBlank(lastKey)) {\n\t\t\tp.setLastKey(lastKey);\n\t\t}\n\t\tif (!StringUtils.isBlank(sort)) {\n\t\t\tp.setSortby(sort);\n\t\t}\n\t\treturn p;\n\t}\n\n\tpublic String getLanguageCode(HttpServletRequest req) {\n\t\tString langCodeFromConfig = CONF.defaultLanguageCode();\n\t\tString cookieLoc = getCookieValue(req, CONF.localeCookie());\n\t\tLocale fromReq = (req == null) ? Locale.getDefault() : req.getLocale();\n\t\tLocale requestLocale = langutils.getProperLocale(fromReq.toString());\n\t\treturn (cookieLoc != null) ? cookieLoc : (StringUtils.isBlank(langCodeFromConfig) ?\n\t\t\t\trequestLocale.getLanguage() : langutils.getProperLocale(langCodeFromConfig).getLanguage());\n\t}\n\n\tpublic Locale getCurrentLocale(String langname) {\n\t\tLocale currentLocale = langutils.getProperLocale(langname);\n\t\tif (currentLocale == null) {\n\t\t\tcurrentLocale = langutils.getProperLocale(langutils.getDefaultLanguageCode());\n\t\t}\n\t\treturn currentLocale;\n\t}\n\n\tpublic Map<String, String> getLang(HttpServletRequest req) {\n\t\treturn getLang(getCurrentLocale(getLanguageCode(req)));\n\t}\n\n\tpublic Map<String, String> getLang(Locale currentLocale) {\n\t\tMap<String, String> lang = langutils.readLanguage(currentLocale.toString());\n\t\tif (lang == null || lang.isEmpty()) {\n\t\t\tlang = langutils.getDefaultLanguage();\n\t\t}\n\t\treturn lang;\n\t}\n\n\tpublic boolean isLanguageRTL(String langCode) {\n\t\treturn StringUtils.equalsAnyIgnoreCase(langCode, \"ar\", \"he\", \"dv\", \"iw\", \"fa\", \"ps\", \"sd\", \"ug\", \"ur\", \"yi\");\n\t}\n\n\tpublic void fetchProfiles(List<? extends ParaObject> objects) {\n\t\tif (objects == null || objects.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tMap<String, String> authorids = new HashMap<String, String>(objects.size());\n\t\tMap<String, Profile> authors = new HashMap<String, Profile>(objects.size());\n\t\tfor (ParaObject obj : objects) {\n\t\t\tif (obj.getCreatorid() != null) {\n\t\t\t\tauthorids.put(obj.getId(), obj.getCreatorid());\n\t\t\t}\n\t\t}\n\t\tList<String> ids = new ArrayList<String>(new HashSet<String>(authorids.values()));\n\t\tif (ids.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t// read all post authors in batch\n\t\tfor (ParaObject author : pc.readAll(ids)) {\n\t\t\tauthors.put(author.getId(), (Profile) author);\n\t\t}\n\t\t// add system profile\n\t\tauthors.put(API_USER.getId(), API_USER);\n\t\t// set author object for each post\n\t\tfor (ParaObject obj : objects) {\n\t\t\tif (obj instanceof Post) {\n\t\t\t\t((Post) obj).setAuthor(authors.get(authorids.get(obj.getId())));\n\t\t\t} else if (obj instanceof Revision) {\n\t\t\t\t((Revision) obj).setAuthor(authors.get(authorids.get(obj.getId())));\n\t\t\t}\n\t\t}\n\t}\n\n\t//get the comments for each answer and the question\n\tpublic void getComments(List<Post> allPosts) {\n\t\tMap<String, List<Comment>> allComments = new HashMap<String, List<Comment>>();\n\t\tList<String> allCommentIds = new ArrayList<String>();\n\t\tList<Post> forUpdate = new ArrayList<Post>(allPosts.size());\n\t\t// get the comment ids of the first 5 comments for each post\n\t\tfor (Post post : allPosts) {\n\t\t\t// not set => read comments if any and embed ids in post object\n\t\t\tif (post.getCommentIds() == null) {\n\t\t\t\tforUpdate.add(reloadFirstPageOfComments(post));\n\t\t\t\tallComments.put(post.getId(), post.getComments());\n\t\t\t} else {\n\t\t\t\t// ids are set => add them to list for bulk read\n\t\t\t\tallCommentIds.addAll(post.getCommentIds());\n\t\t\t}\n\t\t}\n\t\tif (!allCommentIds.isEmpty()) {\n\t\t\t// read all comments for all posts on page in bulk\n\t\t\tfor (ParaObject comment : pc.readAll(allCommentIds)) {\n\t\t\t\tList<Comment> postComments = allComments.get(comment.getParentid());\n\t\t\t\tif (postComments == null) {\n\t\t\t\t\tallComments.put(comment.getParentid(), new ArrayList<Comment>());\n\t\t\t\t}\n\t\t\t\tallComments.get(comment.getParentid()).add((Comment) comment);\n\t\t\t}\n\t\t}\n\t\t// embed comments in each post for use within the view\n\t\tfor (Post post : allPosts) {\n\t\t\tList<Comment> cl = allComments.get(post.getId());\n\t\t\tlong clSize = (cl == null) ? 0 : cl.size();\n\t\t\tif (post.getCommentIds().size() != clSize) {\n\t\t\t\tforUpdate.add(reloadFirstPageOfComments(post));\n\t\t\t\tclSize = post.getComments().size();\n\t\t\t} else {\n\t\t\t\tpost.setComments(cl);\n\t\t\t\tif (clSize == post.getItemcount().getLimit() && pc.getCount(Utils.type(Comment.class),\n\t\t\t\t\t\tCollections.singletonMap(\"parentid\", post.getId())) > clSize) {\n\t\t\t\t\tclSize++; // hack to show the \"more\" button\n\t\t\t\t}\n\t\t\t}\n\t\t\tpost.getItemcount().setCount(clSize);\n\t\t}\n\t\tif (!forUpdate.isEmpty()) {\n\t\t\tpc.updateAll(allPosts);\n\t\t}\n\t}\n\n\tpublic Post reloadFirstPageOfComments(Post post) {\n\t\tList<Comment> commentz = pc.getChildren(post, Utils.type(Comment.class), post.getItemcount());\n\t\tArrayList<String> ids = new ArrayList<String>(commentz.size());\n\t\tfor (Comment comment : commentz) {\n\t\t\tids.add(comment.getId());\n\t\t}\n\t\tpost.setCommentIds(ids);\n\t\tpost.setComments(commentz);\n\t\treturn post;\n\t}\n\n\tpublic void updateViewCount(Post showPost, HttpServletRequest req, HttpServletResponse res) {\n\t\t//do not count views from author\n\t\tif (showPost != null && !isMine(showPost, getAuthUser(req))) {\n\t\t\tString postviews = StringUtils.trimToEmpty(HttpUtils.getStateParam(\"postviews\", req));\n\t\t\tif (!StringUtils.contains(postviews, showPost.getId())) {\n\t\t\t\tlong views = (showPost.getViewcount() == null) ? 0 : showPost.getViewcount();\n\t\t\t\tshowPost.setViewcount(views + 1); //increment count\n\t\t\t\tHttpUtils.setStateParam(\"postviews\", (postviews.isEmpty() ? \"\" : postviews + \".\") + showPost.getId(),\n\t\t\t\t\t\treq, res);\n\t\t\t\tpc.update(showPost);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic List<Post> getSimilarPosts(Post showPost, Pager pager) {\n\t\tList<Post> similarquestions = Collections.emptyList();\n\t\tif (!showPost.isReply()) {\n\t\t\tString likeTxt = Utils.stripAndTrim((showPost.getTitle() + \" \" + showPost.getBody()));\n\t\t\tif (likeTxt.length() > 1000) {\n\t\t\t\t// read object on the server to prevent \"URI too long\" errors\n\t\t\t\tsimilarquestions = pc.findSimilar(showPost.getType(), showPost.getId(),\n\t\t\t\t\t\tnew String[]{\"properties.title\", \"properties.body\", \"properties.tags\"},\n\t\t\t\t\t\t\"id:\" + showPost.getId(), pager);\n\t\t\t} else if (!StringUtils.isBlank(likeTxt)) {\n\t\t\t\tsimilarquestions = pc.findSimilar(showPost.getType(), showPost.getId(),\n\t\t\t\t\t\tnew String[]{\"properties.title\", \"properties.body\", \"properties.tags\"}, likeTxt, pager);\n\t\t\t}\n\t\t}\n\t\treturn similarquestions;\n\t}\n\n\tpublic String getFirstLinkInPost(String postBody) {\n\t\tpostBody = StringUtils.trimToEmpty(postBody);\n\t\tPattern p = Pattern.compile(\"^!?\\\\[.*\\\\]\\\\((.+)\\\\)\");\n\t\tMatcher m = p.matcher(postBody);\n\n\t\tif (m.find()) {\n\t\t\treturn m.group(1);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic boolean param(HttpServletRequest req, String param) {\n\t\treturn req.getParameter(param) != null;\n\t}\n\n\tpublic boolean isAjaxRequest(HttpServletRequest req) {\n\t\treturn req.getHeader(\"X-Requested-With\") != null || req.getParameter(\"X-Requested-With\") != null;\n\t}\n\n\tpublic boolean isApiRequest(HttpServletRequest req) {\n\t\treturn req.getRequestURI().startsWith(CONF.serverContextPath() + \"/api/\") || req.getRequestURI().equals(CONF.serverContextPath() + \"/api\");\n\t}\n\n\tpublic boolean isAdmin(Profile authUser) {\n\t\treturn authUser != null && User.Groups.ADMINS.toString().equals(authUser.getGroups());\n\t}\n\n\tpublic boolean isMod(Profile authUser) {\n\t\treturn authUser != null && (isAdmin(authUser) || User.Groups.MODS.toString().equals(authUser.getGroups()));\n\t}\n\n\tpublic boolean isRecognizedAsAdmin(User u) {\n\t\treturn u.isAdmin() || ADMINS.contains(u.getIdentifier()) ||\n\t\t\t\tADMINS.stream().filter(s -> s.equalsIgnoreCase(u.getEmail())).findAny().isPresent();\n\t}\n\n\tpublic boolean canComment(Profile authUser, HttpServletRequest req) {\n\t\treturn isAuthenticated(req) && ((authUser.hasBadge(ENTHUSIAST) || CONF.newUsersCanComment() || isMod(authUser)));\n\t}\n\n\tpublic boolean postsNeedApproval() {\n\t\treturn CONF.postsNeedApproval();\n\t}\n\n\tpublic boolean postNeedsApproval(Profile authUser) {\n\t\treturn postsNeedApproval() && authUser.getVotes() < CONF.postsReputationThreshold() && !isMod(authUser);\n\t}\n\n\tpublic String getWelcomeMessage(Profile authUser) {\n\t\treturn authUser == null ? CONF.welcomeMessage() : \"\";\n\t}\n\n\tpublic String getWelcomeMessageOnLogin(Profile authUser) {\n\t\tif (authUser == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString welcomeMsgOnlogin = CONF.welcomeMessageOnLogin();\n\t\tif (StringUtils.contains(welcomeMsgOnlogin, \"{{\")) {\n\t\t\twelcomeMsgOnlogin = Utils.compileMustache(Collections.singletonMap(\"user\",\n\t\t\t\t\tParaObjectUtils.getAnnotatedFields(authUser, false)), welcomeMsgOnlogin);\n\t\t}\n\t\treturn welcomeMsgOnlogin;\n\t}\n\n\tpublic boolean isDefaultSpace(String space) {\n\t\treturn DEFAULT_SPACE.equalsIgnoreCase(getSpaceId(space));\n\t}\n\n\tpublic String getDefaultSpace() {\n\t\treturn DEFAULT_SPACE;\n\t}\n\n\tpublic boolean isAllSpaces(String space) {\n\t\treturn ALL_MY_SPACES.equalsIgnoreCase(getSpaceId(space));\n\t}\n\n\tpublic List<Sysprop> getAllSpaces() {\n\t\tif (allSpaces == null) {\n\t\t\tallSpaces = new LinkedList<>(pc.findQuery(\"scooldspace\", \"*\", new Pager(Config.DEFAULT_LIMIT)));\n\t\t}\n\t\treturn allSpaces;\n\t}\n\n\tpublic boolean canAccessSpace(Profile authUser, String targetSpaceId) {\n\t\tif (authUser == null) {\n\t\t\treturn isDefaultSpacePublic() && isDefaultSpace(targetSpaceId);\n\t\t}\n\t\tif (isMod(authUser) || isAllSpaces(targetSpaceId)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (StringUtils.isBlank(targetSpaceId) || targetSpaceId.length() < 2) {\n\t\t\treturn false;\n\t\t}\n\t\t// this is confusing - let admins control who is in the default space\n\t\t//if (isDefaultSpace(targetSpaceId)) {\n\t\t//\t// can user access the default space (blank)\n\t\t//\treturn isDefaultSpacePublic() || isMod(authUser) || !authUser.hasSpaces();\n\t\t//}\n\t\tboolean isMemberOfSpace = false;\n\t\tfor (String space : authUser.getSpaces()) {\n\t\t\tString spaceId = getSpaceId(targetSpaceId);\n\t\t\tif (StringUtils.startsWithIgnoreCase(space, spaceId + Para.getConfig().separator()) || space.equalsIgnoreCase(spaceId)) {\n\t\t\t\tisMemberOfSpace = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn isMemberOfSpace;\n\t}\n\n\tprivate boolean isIgnoredSpaceForNotifications(Profile profile, String space) {\n\t\treturn profile != null && !profile.getFavspaces().isEmpty() && !profile.getFavspaces().contains(getSpaceId(space));\n\t}\n\n\tpublic String getSpaceIdFromCookie(Profile authUser, HttpServletRequest req) {\n\t\tif (isAdmin(authUser) && req.getParameter(\"space\") != null) {\n\t\t\tSysprop s = pc.read(getSpaceId(req.getParameter(\"space\"))); // API override\n\t\t\tif (s != null) {\n\t\t\t\treturn s.getId() + Para.getConfig().separator() + s.getName();\n\t\t\t}\n\t\t}\n\t\tString spaceAttr = (String) req.getAttribute(CONF.spaceCookie());\n\t\tString spaceValue = StringUtils.isBlank(spaceAttr) ? Utils.base64dec(getCookieValue(req, CONF.spaceCookie())) : spaceAttr;\n\t\tString space = getValidSpaceId(authUser, spaceValue);\n\t\treturn (isAllSpaces(space) && isMod(authUser)) ? DEFAULT_SPACE : verifyExistingSpace(authUser, space);\n\t}\n\n\tpublic void storeSpaceIdInCookie(String space, HttpServletRequest req, HttpServletResponse res) {\n\t\t// directly set the space on the requests, overriding the cookie value\n\t\t// used for setting the space from a direct URL to a particular space\n\t\treq.setAttribute(CONF.spaceCookie(), space);\n\t\tHttpUtils.setRawCookie(CONF.spaceCookie(), Utils.base64encURL(space.getBytes()),\n\t\t\t\treq, res, true, \"Strict\", StringUtils.isBlank(space) ? 0 : 365 * 24 * 60 * 60);\n\t}\n\n\tpublic String verifyExistingSpace(Profile authUser, String space) {\n\t\tif (!isDefaultSpace(space) && !isAllSpaces(space)) {\n\t\t\tSysprop s = pc.read(getSpaceId(space));\n\t\t\tif (s == null) {\n\t\t\t\tif (authUser != null) {\n\t\t\t\t\tauthUser.removeSpace(space);\n\t\t\t\t\tpc.update(authUser);\n\t\t\t\t}\n\t\t\t\treturn DEFAULT_SPACE;\n\t\t\t} else {\n\t\t\t\treturn s.getId() + Para.getConfig().separator() + s.getName(); // updates current space name in case it was renamed\n\t\t\t}\n\t\t}\n\t\treturn space;\n\t}\n\n\tpublic String getValidSpaceIdExcludingAll(Profile authUser, String space, HttpServletRequest req) {\n\t\tString s = StringUtils.isBlank(space) ? getSpaceIdFromCookie(authUser, req) : space;\n\t\treturn isAllSpaces(s) ? DEFAULT_SPACE : s;\n\t}\n\n\tprivate String getValidSpaceId(Profile authUser, String space) {\n\t\tif (authUser == null) {\n\t\t\treturn DEFAULT_SPACE;\n\t\t}\n\t\tString defaultSpace = authUser.hasSpaces() ? ALL_MY_SPACES : DEFAULT_SPACE;\n\t\tString s = canAccessSpace(authUser, space) ? space : defaultSpace;\n\t\treturn StringUtils.isBlank(s) ? DEFAULT_SPACE : s;\n\t}\n\n\tpublic String getSpaceName(String space) {\n\t\tif (DEFAULT_SPACE.equalsIgnoreCase(space)) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn RegExUtils.replaceAll(space, \"^scooldspace:[^:]+:\", \"\");\n\t}\n\n\tpublic String getSpaceId(String space) {\n\t\tif (StringUtils.isBlank(space)) {\n\t\t\treturn DEFAULT_SPACE;\n\t\t}\n\t\tString s = StringUtils.contains(space, Para.getConfig().separator()) ?\n\t\t\t\tStringUtils.substring(space, 0, space.lastIndexOf(Para.getConfig().separator())) : \"scooldspace:\" + space;\n\t\treturn \"scooldspace\".equals(s) ? space : s;\n\t}\n\n\tpublic String getSpaceFilteredQuery(Profile authUser, String currentSpace) {\n\t\treturn canAccessSpace(authUser, currentSpace) ? getSpaceFilter(authUser, currentSpace) : \"\";\n\t}\n\n\tpublic String getSpaceFilteredQuery(HttpServletRequest req) {\n\t\tProfile authUser = getAuthUser(req);\n\t\tString currentSpace = getSpaceIdFromCookie(authUser, req);\n\t\treturn getSpaceFilteredQuery(authUser, currentSpace);\n\t}\n\n\tpublic String getSpaceFilteredQuery(HttpServletRequest req, boolean isSpaceFiltered, String spaceFilter, String defaultQuery) {\n\t\tProfile authUser = getAuthUser(req);\n\t\tString currentSpace = getSpaceIdFromCookie(authUser, req);\n\t\tif (isSpaceFiltered) {\n\t\t\treturn StringUtils.isBlank(spaceFilter) ? getSpaceFilter(authUser, currentSpace) : spaceFilter;\n\t\t}\n\t\treturn canAccessSpace(authUser, currentSpace) ? defaultQuery : \"\";\n\t}\n\n\tpublic String getSpaceFilter(Profile authUser, String spaceId) {\n\t\tif (isAllSpaces(spaceId)) {\n\t\t\tif (authUser != null && authUser.hasSpaces()) {\n\t\t\t\treturn \"(\" + authUser.getSpaces().stream().map(s -> \"properties.space:\\\"\" + s + \"\\\"\").\n\t\t\t\t\t\tcollect(Collectors.joining(\" OR \")) + \")\";\n\t\t\t} else {\n\t\t\t\treturn \"properties.space:\\\"\" + DEFAULT_SPACE + \"\\\"\";\n\t\t\t}\n\t\t} else if (isDefaultSpace(spaceId) && isMod(authUser)) { // DO NOT MODIFY!\n\t\t\treturn \"*\";\n\t\t} else {\n\t\t\treturn \"properties.space:\\\"\" + spaceId + \"\\\"\";\n\t\t}\n\t}\n\n\tpublic Sysprop buildSpaceObject(String space) {\n\t\tspace = Utils.abbreviate(space, 255);\n\t\tspace = space.replaceAll(Para.getConfig().separator(), \"\");\n\t\tString spaceId = getSpaceId(Utils.noSpaces(Utils.stripAndTrim(space, \" \"), \"-\"));\n\t\tSysprop s = new Sysprop(spaceId);\n\t\ts.setType(\"scooldspace\");\n\t\ts.setName(space);\n\t\treturn s;\n\t}\n\n\tpublic String sanitizeQueryString(String query, HttpServletRequest req) {\n\t\tString qf = getSpaceFilteredQuery(req);\n\t\tString defaultQuery = \"*\";\n\t\tString q = StringUtils.trimToEmpty(query);\n\t\tif (qf.isEmpty() || qf.length() > 1) {\n\t\t\tq = q.replaceAll(\"[\\\\?<>]\", \"\").trim();\n\t\t\tq = q.replaceAll(\"$[\\\\*]*\", \"\");\n\t\t\tq = RegExUtils.removeAll(q, \"AND\");\n\t\t\tq = RegExUtils.removeAll(q, \"OR\");\n\t\t\tq = RegExUtils.removeAll(q, \"NOT\");\n\t\t\tq = q.trim();\n\t\t\tdefaultQuery = \"\";\n\t\t}\n\t\tif (qf.isEmpty()) {\n\t\t\treturn defaultQuery;\n\t\t} else if (\"*\".equals(qf)) {\n\t\t\treturn q;\n\t\t} else if (\"*\".equals(q)) {\n\t\t\treturn qf;\n\t\t} else {\n\t\t\tif (q.isEmpty()) {\n\t\t\t\treturn qf;\n\t\t\t} else {\n\t\t\t\treturn qf + \" AND \" + q;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic String getUsersSearchQuery(String qs, String spaceFilter) {\n\t\tqs = Utils.stripAndTrim(qs).toLowerCase();\n\t\tif (!StringUtils.isBlank(qs)) {\n\t\t\tString wildcardLower = qs.matches(\"[\\\\p{IsAlphabetic}]*\") ? qs + \"*\" : qs;\n\t\t\tString wildcardUpper = StringUtils.capitalize(wildcardLower);\n\t\t\tString template = \"(name:({1}) OR name:({2} OR {3}) OR properties.location:({0}) OR \"\n\t\t\t\t\t+ \"properties.aboutme:({0}) OR properties.groups:({0}))\";\n\t\t\tqs = (StringUtils.isBlank(spaceFilter) ? \"\" : spaceFilter + \" AND \") +\n\t\t\t\t\tUtils.formatMessage(template, qs, StringUtils.capitalize(qs), wildcardLower, wildcardUpper);\n\t\t} else {\n\t\t\tqs = StringUtils.isBlank(spaceFilter) ? \"*\" : spaceFilter;\n\t\t}\n\t\treturn qs;\n\t}\n\n\tpublic List<Post> fullQuestionsSearch(String query, Pager... pager) {\n\t\tString typeFilter = Config._TYPE + \":(\" + String.join(\" OR \",\n\t\t\t\t\t\tUtils.type(Question.class), Utils.type(Reply.class), Utils.type(Comment.class)) + \")\";\n\t\tString qs = StringUtils.isBlank(query) || query.startsWith(\"*\") ? typeFilter : query + \" AND \" + typeFilter;\n\t\tList<ParaObject> mixedResults = pc.findQuery(\"\", qs, pager);\n\t\tPredicate<ParaObject> isQuestion =  obj -> obj.getType().equals(Utils.type(Question.class));\n\n\t\tMap<String, ParaObject> idsToQuestions = new HashMap<>(mixedResults.stream().filter(isQuestion).\n\t\t\t\tcollect(Collectors.toMap(q -> q.getId(), q -> q)));\n\t\tSet<String> toRead = new LinkedHashSet<>();\n\t\tmixedResults.stream().filter(isQuestion.negate()).forEach(obj -> {\n\t\t\tif (!idsToQuestions.containsKey(obj.getParentid())) {\n\t\t\t\ttoRead.add(obj.getParentid());\n\t\t\t}\n\t\t});\n\t\t// find all parent posts but this excludes parents of parents - i.e. won't work for comments in answers\n\t\tList<Post> parentPostsLevel1 = pc.readAll(new ArrayList<>(toRead));\n\t\tparentPostsLevel1.stream().filter(isQuestion).forEach(q -> idsToQuestions.put(q.getId(), q));\n\n\t\ttoRead.clear();\n\n\t\t// read parents of parents if any\n\t\tparentPostsLevel1.stream().filter(isQuestion.negate()).forEach(obj -> {\n\t\t\tif (!idsToQuestions.containsKey(obj.getParentid())) {\n\t\t\t\ttoRead.add(obj.getParentid());\n\t\t\t}\n\t\t});\n\t\tList<Post> parentPostsLevel2 = pc.readAll(new ArrayList<>(toRead));\n\t\tparentPostsLevel2.stream().forEach(q -> idsToQuestions.put(q.getId(), q));\n\n\t\tArrayList<Post> results = new ArrayList<Post>(idsToQuestions.size());\n\t\tfor (ParaObject result : idsToQuestions.values()) {\n\t\t\tif (result instanceof Post) {\n\t\t\t\tresults.add((Post) result);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic String getMacroCode(String key) {\n\t\treturn WHITELISTED_MACROS.getOrDefault(key, \"\");\n\t}\n\n\tpublic boolean isMine(Post showPost, Profile authUser) {\n\t\t// author can edit, mods can edit & ppl with rep > 100 can edit\n\t\treturn showPost != null && authUser != null ? authUser.getId().equals(showPost.getCreatorid()) : false;\n\t}\n\n\tpublic boolean canEdit(Post showPost, Profile authUser) {\n\t\treturn authUser != null ? (authUser.hasBadge(TEACHER) || isMod(authUser) || isMine(showPost, authUser)) : false;\n\t}\n\n\tpublic boolean canDelete(Post showPost, Profile authUser) {\n\t\treturn canDelete(showPost, authUser, null);\n\t}\n\n\tpublic boolean canDelete(Post showPost, Profile authUser, String approvedAnswerId) {\n\t\tif (authUser == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CONF.deleteProtectionEnabled()) {\n\t\t\tif (showPost.isReply()) {\n\t\t\t\treturn isMine(showPost, authUser) && !StringUtils.equals(approvedAnswerId, showPost.getId());\n\t\t\t} else {\n\t\t\t\treturn isMine(showPost, authUser) && showPost.getAnswercount() == 0;\n\t\t\t}\n\t\t}\n\t\treturn isMine(showPost, authUser);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <P extends ParaObject> P populate(HttpServletRequest req, P pobj, String... paramName) {\n\t\tif (pobj == null || paramName == null) {\n\t\t\treturn pobj;\n\t\t}\n\t\tMap<String, Object> data = new LinkedHashMap<String, Object>();\n\t\tif (isApiRequest(req)) {\n\t\t\ttry {\n\t\t\t\tdata = (Map<String, Object>) req.getAttribute(REST_ENTITY_ATTRIBUTE);\n\t\t\t\tif (data == null) {\n\t\t\t\t\tdata = ParaObjectUtils.getJsonReader(Map.class).readValue(req.getInputStream());\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\tlogger.error(null, ex);\n\t\t\t\tdata = Collections.emptyMap();\n\t\t\t}\n\t\t} else {\n\t\t\tfor (String param : paramName) {\n\t\t\t\tString[] values;\n\t\t\t\tif (param.matches(\".+?\\\\|.$\")) {\n\t\t\t\t\t// convert comma-separated value to list of strings\n\t\t\t\t\tString cleanParam = param.substring(0, param.length() - 2);\n\t\t\t\t\tvalues = req.getParameterValues(cleanParam);\n\t\t\t\t\tString firstValue = (values != null && values.length > 0) ? values[0] : null;\n\t\t\t\t\tString separator = param.substring(param.length() - 1);\n\t\t\t\t\tif (!StringUtils.isBlank(firstValue)) {\n\t\t\t\t\t\tdata.put(cleanParam, Arrays.asList(firstValue.split(separator)));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalues = req.getParameterValues(param);\n\t\t\t\t\tif (values != null && values.length > 0) {\n\t\t\t\t\t\tdata.put(param, values.length > 1 ? Arrays.asList(values) :\n\t\t\t\t\t\t\t\tArrays.asList(values).iterator().next());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!data.isEmpty()) {\n\t\t\tParaObjectUtils.setAnnotatedFields(pobj, data, null);\n\t\t}\n\t\treturn pobj;\n\t}\n\n\tpublic <P extends ParaObject> Map<String, String> validate(P pobj) {\n\t\tHashMap<String, String> error = new HashMap<String, String>();\n\t\tif (pobj != null) {\n\t\t\tSet<ConstraintViolation<P>> errors = ValidationUtils.getValidator().validate(pobj);\n\t\t\tfor (ConstraintViolation<P> err : errors) {\n\t\t\t\terror.put(err.getPropertyPath().toString(), err.getMessage());\n\t\t\t}\n\t\t}\n\t\treturn error;\n\t}\n\n\tpublic String getFullAvatarURL(Profile profile, AvatarFormat format) {\n\t\treturn avatarRepository.getLink(profile, format);\n\t}\n\n\tpublic void clearSession(HttpServletRequest req, HttpServletResponse res) {\n\t\tif (req != null) {\n\t\t\tString jwt = HttpUtils.getStateParam(CONF.authCookie(), req);\n\t\t\tif (!StringUtils.isBlank(jwt)) {\n\t\t\t\tif (CONF.oneSessionPerUser()) {\n\t\t\t\t\tsynchronized (pc) {\n\t\t\t\t\t\tpc.setAccessToken(jwt);\n\t\t\t\t\t\tpc.revokeAllTokens();\n\t\t\t\t\t\tpc.signOut();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHttpUtils.removeStateParam(CONF.authCookie(), req, res);\n\t\t\t}\n\t\t\tHttpUtils.removeStateParam(\"dark-mode\", req, res);\n\t\t}\n\t}\n\n\tpublic boolean addBadgeOnce(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadge(authUser, b, condition && !authUser.hasBadge(b), false);\n\t}\n\n\tpublic boolean addBadgeOnceAndUpdate(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadgeAndUpdate(authUser, b, condition && authUser != null && !authUser.hasBadge(b));\n\t}\n\n\tpublic boolean addBadgeAndUpdate(Profile authUser, Profile.Badge b, boolean condition) {\n\t\treturn addBadge(authUser, b, condition, true);\n\t}\n\n\tpublic boolean addBadge(Profile user, Profile.Badge b, boolean condition, boolean update) {\n\t\tif (user != null && condition) {\n\t\t\tString newb = StringUtils.isBlank(user.getNewbadges()) ? \"\" : user.getNewbadges().concat(\",\");\n\t\t\tnewb = newb.concat(b.toString());\n\n\t\t\tuser.addBadge(b);\n\t\t\tuser.setNewbadges(newb);\n\t\t\tif (update) {\n\t\t\t\tuser.update();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic List<String> checkForBadges(Profile authUser, HttpServletRequest req) {\n\t\tList<String> badgelist = new ArrayList<String>();\n\t\tif (authUser != null && !isAjaxRequest(req)) {\n\t\t\tlong oneYear = authUser.getTimestamp() + (365 * 24 * 60 * 60 * 1000);\n\t\t\taddBadgeOnce(authUser, Profile.Badge.ENTHUSIAST, authUser.getVotes() >= CONF.enthusiastIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.FRESHMAN, authUser.getVotes() >= CONF.freshmanIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.SCHOLAR, authUser.getVotes() >= CONF.scholarIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.TEACHER, authUser.getVotes() >= CONF.teacherIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.PROFESSOR, authUser.getVotes() >= CONF.professorIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.GEEK, authUser.getVotes() >= CONF.geekIfHasRep());\n\t\t\taddBadgeOnce(authUser, Profile.Badge.SENIOR, (System.currentTimeMillis() - authUser.getTimestamp()) >= oneYear);\n\n\t\t\tif (!StringUtils.isBlank(authUser.getNewbadges())) {\n\t\t\t\tbadgelist.addAll(Arrays.asList(authUser.getNewbadges().split(\",\")));\n\t\t\t\tauthUser.setNewbadges(null);\n\t\t\t\tauthUser.update();\n\t\t\t}\n\t\t}\n\t\treturn badgelist;\n\t}\n\n\tprivate String loadEmailTemplate(String name) {\n\t\treturn loadResource(\"emails/\" + name + \".html\");\n\t}\n\n\tpublic String loadResource(String filePath) {\n\t\tif (filePath == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (FILE_CACHE.containsKey(filePath)) {\n\t\t\treturn FILE_CACHE.get(filePath);\n\t\t}\n\t\tString template = \"\";\n\t\ttry (InputStream in = getClass().getClassLoader().getResourceAsStream(filePath)) {\n\t\t\ttry (Scanner s = new Scanner(in).useDelimiter(\"\\\\A\")) {\n\t\t\t\ttemplate = s.hasNext() ? s.next() : \"\";\n\t\t\t\tif (!StringUtils.isBlank(template)) {\n\t\t\t\t\tFILE_CACHE.put(filePath, template);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tlogger.info(\"Couldn't load resource '{}'.\", filePath);\n\t\t}\n\t\treturn template;\n\t}\n\n\tpublic String compileEmailTemplate(Map<String, Object> model) {\n\t\tmodel.put(\"footerhtml\", CONF.emailsFooterHtml());\n\t\tString fqdn = CONF.rewriteInboundLinksWithFQDN();\n\t\tif (!StringUtils.isBlank(fqdn)) {\n\t\t\tmodel.entrySet().stream().filter(e -> (e.getValue() instanceof String)).forEachOrdered(e -> {\n\t\t\t\tmodel.put(e.getKey(), StringUtils.replace((String) e.getValue(), CONF.serverUrl(), fqdn));\n\t\t\t});\n\t\t}\n\t\treturn Utils.compileMustache(model, loadEmailTemplate(\"notify\"));\n\t}\n\n\tpublic boolean isValidJWToken(String jwt) {\n\t\tString appSecretKey = CONF.appSecretKey();\n\t\tString masterSecretKey = CONF.paraSecretKey();\n\t\treturn isValidJWToken(appSecretKey, jwt) || isValidJWToken(masterSecretKey, jwt);\n\t}\n\n\tboolean isValidJWToken(String secret, String jwt) {\n\t\ttry {\n\t\t\tif (secret != null && jwt != null) {\n\t\t\t\tJWSVerifier verifier = new MACVerifier(secret);\n\t\t\t\tSignedJWT sjwt = SignedJWT.parse(jwt);\n\t\t\t\tif (sjwt.verify(verifier)) {\n\t\t\t\t\tDate referenceTime = new Date();\n\t\t\t\t\tJWTClaimsSet claims = sjwt.getJWTClaimsSet();\n\n\t\t\t\t\tDate expirationTime = claims.getExpirationTime();\n\t\t\t\t\tDate notBeforeTime = claims.getNotBeforeTime();\n\t\t\t\t\tString jti = claims.getJWTID();\n\t\t\t\t\tboolean expired = expirationTime != null && expirationTime.before(referenceTime);\n\t\t\t\t\tboolean notYetValid = notBeforeTime != null && notBeforeTime.after(referenceTime);\n\t\t\t\t\tboolean jtiRevoked = isApiKeyRevoked(jti, expired);\n\t\t\t\t\treturn !(expired || notYetValid || jtiRevoked);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JOSEException e) {\n\t\t\tlogger.warn(null, e);\n\t\t} catch (ParseException ex) {\n\t\t\tlogger.warn(null, ex);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic SignedJWT generateJWToken(Map<String, Object> claims) {\n\t\treturn generateJWToken(claims, CONF.jwtExpiresAfterSec());\n\t}\n\n\tpublic SignedJWT generateJWToken(Map<String, Object> claims, long validitySeconds) {\n\t\tString secret = CONF.appSecretKey();\n\t\tif (!StringUtils.isBlank(secret)) {\n\t\t\ttry {\n\t\t\t\tDate now = new Date();\n\t\t\t\tJWTClaimsSet.Builder claimsSet = new JWTClaimsSet.Builder();\n\t\t\t\tclaimsSet.issueTime(now);\n\t\t\t\tif (validitySeconds > 0) {\n\t\t\t\t\tclaimsSet.expirationTime(new Date(now.getTime() + (validitySeconds * 1000)));\n\t\t\t\t}\n\t\t\t\tclaimsSet.notBeforeTime(now);\n\t\t\t\tclaimsSet.claim(Config._APPID, CONF.paraAccessKey());\n\t\t\t\tclaims.entrySet().forEach((claim) -> claimsSet.claim(claim.getKey(), claim.getValue()));\n\t\t\t\tJWSSigner signer = new MACSigner(secret);\n\t\t\t\tSignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet.build());\n\t\t\t\tsignedJWT.sign(signer);\n\t\t\t\treturn signedJWT;\n\t\t\t} catch (JOSEException e) {\n\t\t\t\tlogger.warn(\"Unable to sign JWT: {}.\", e.getMessage());\n\t\t\t}\n\t\t}\n\t\tlogger.error(\"Failed to generate JWT token - app_secret_key is blank.\");\n\t\treturn null;\n\t}\n\n\tpublic boolean isApiKeyRevoked(String jti, boolean expired) {\n\t\tif (StringUtils.isBlank(jti)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (API_KEYS.isEmpty()) {\n\t\t\tSysprop s = pc.read(\"api_keys\");\n\t\t\tif (s != null) {\n\t\t\t\tAPI_KEYS.putAll(s.getProperties());\n\t\t\t}\n\t\t}\n\t\tif (API_KEYS.containsKey(jti) && expired) {\n\t\t\trevokeApiKey(jti);\n\t\t}\n\t\treturn !API_KEYS.containsKey(jti);\n\t}\n\n\tpublic void registerApiKey(String jti, String jwt) {\n\t\tif (StringUtils.isBlank(jti) || StringUtils.isBlank(jwt)) {\n\t\t\treturn;\n\t\t}\n\t\tAPI_KEYS.put(jti, jwt);\n\t\tsaveApiKeysObject();\n\t}\n\n\tpublic void revokeApiKey(String jti) {\n\t\tAPI_KEYS.remove(jti);\n\t\tsaveApiKeysObject();\n\t}\n\n\tpublic Map<String, Object> getApiKeys() {\n\t\treturn Collections.unmodifiableMap(API_KEYS);\n\t}\n\n\tpublic Map<String, Long> getApiKeysExpirations() {\n\t\treturn API_KEYS.keySet().stream().collect(Collectors.toMap(k -> k, k -> {\n\t\t\ttry {\n\t\t\t\tDate exp = SignedJWT.parse((String) API_KEYS.get(k)).getJWTClaimsSet().getExpirationTime();\n\t\t\t\tif (exp != null) {\n\t\t\t\t\treturn exp.getTime();\n\t\t\t\t}\n\t\t\t} catch (ParseException ex) {\n\t\t\t\tlogger.error(null, ex);\n\t\t\t}\n\t\t\treturn 0L;\n\t\t}));\n\t}\n\n\tprivate void saveApiKeysObject() {\n\t\tSysprop s = new Sysprop(\"api_keys\");\n\t\ts.setProperties(API_KEYS);\n\t\tpc.create(s);\n\t}\n\n\tpublic Profile getSystemUser() {\n\t\treturn API_USER;\n\t}\n\n\tpublic void triggerHookEvent(String eventName, Object payload) {\n\t\tif (isWebhooksEnabled() && HOOK_EVENTS.contains(eventName)) {\n\t\t\tPara.asyncExecute(() -> {\n\t\t\t\tWebhook trigger = new Webhook();\n\t\t\t\ttrigger.setTriggeredEvent(eventName);\n\t\t\t\ttrigger.setCustomPayload(payload);\n\t\t\t\tpc.create(trigger);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic void setSecurityHeaders(String nonce, HttpServletRequest request, HttpServletResponse response) {\n\t\t// CSP Header\n\t\tif (CONF.cspHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Content-Security-Policy\",\n\t\t\t\t\t(request.isSecure() ? \"upgrade-insecure-requests; \" : \"\") + CONF.cspHeader(nonce));\n\t\t}\n\t\t// HSTS Header\n\t\tif (CONF.hstsHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains\");\n\t\t}\n\t\t// Frame Options Header\n\t\tif (CONF.framingHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-Frame-Options\", \"SAMEORIGIN\");\n\t\t}\n\t\t// XSS Header\n\t\tif (CONF.xssHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n\t\t}\n\t\t// Content Type Header\n\t\tif (CONF.contentTypeHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n\t\t}\n\t\t// Referrer Header\n\t\tif (CONF.referrerHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Referrer-Policy\", \"strict-origin\");\n\t\t}\n\t\t// Permissions Policy Header\n\t\tif (CONF.permissionsHeaderEnabled()) {\n\t\t\tresponse.setHeader(\"Permissions-Policy\", \"geolocation=()\");\n\t\t}\n\t}\n\n\tpublic boolean cookieConsentGiven(HttpServletRequest request) {\n\t\treturn !CONF.cookieConsentRequired() || \"allow\".equals(HttpUtils.getCookieValue(request, \"cookieconsent_status\"));\n\t}\n\n\tpublic String base64DecodeScript(String encodedScript) {\n\t\tif (StringUtils.isBlank(encodedScript)) {\n\t\t\treturn \"\";\n\t\t}\n\t\ttry {\n\t\t\tString decodedScript = Base64.isBase64(encodedScript) ? Utils.base64dec(encodedScript) : \"\";\n\t\t\treturn StringUtils.isBlank(decodedScript) ? encodedScript : decodedScript;\n\t\t} catch (Exception e) {\n\t\t\treturn encodedScript;\n\t\t}\n\t}\n\n\tpublic Map<String, Object> getExternalScripts() {\n\t\treturn CONF.externalScripts();\n\t}\n\n\tpublic List<String> getExternalStyles() {\n\t\tString extStyles = CONF.externalStyles();\n\t\tif (!StringUtils.isBlank(extStyles)) {\n\t\t\tString[] styles = extStyles.split(\"\\\\s*,\\\\s*\");\n\t\t\tif (!StringUtils.isBlank(extStyles) && styles != null && styles.length > 0) {\n\t\t\t\tArrayList<String> list = new ArrayList<String>();\n\t\t\t\tfor (String style : styles) {\n\t\t\t\t\tif (!StringUtils.isBlank(style)) {\n\t\t\t\t\t\tlist.add(style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n\n\tpublic String getInlineCSS() {\n\t\ttry {\n\t\t\tSysprop custom = getCustomTheme();\n\t\t\tString themeName = custom.getName();\n\t\t\tString inline = CONF.inlineCSS();\n\t\t\tString loadedTheme;\n\t\t\tif (\"default\".equalsIgnoreCase(themeName) || StringUtils.isBlank(themeName)) {\n\t\t\t\treturn inline;\n\t\t\t} else if (\"custom\".equalsIgnoreCase(themeName)) {\n\t\t\t\tloadedTheme = (String) custom.getProperty(\"theme\");\n\t\t\t} else {\n\t\t\t\tloadedTheme = loadResource(getThemeKey(themeName));\n\t\t\t\tif (StringUtils.isBlank(loadedTheme)) {\n\t\t\t\t\tFILE_CACHE.put(\"theme\", \"default\");\n\t\t\t\t\tcustom.setName(\"default\");\n\t\t\t\t\tcustomTheme = pc.update(custom);\n\t\t\t\t\treturn inline;\n\t\t\t\t} else {\n\t\t\t\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tloadedTheme = StringUtils.replaceEachRepeatedly(loadedTheme,\n\t\t\t\t\tnew String[] {\"<\", \"</\", \"<script\", \"<SCRIPT\"}, new String[] {\"\", \"\", \"\", \"\"});\n\t\t\treturn loadedTheme + \"\\n/*** END OF THEME CSS ***/\\n\" + inline;\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(\"Failed to load inline CSS.\");\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tpublic void setCustomTheme(String themeName, String themeCSS) {\n\t\tString id = \"theme\" + Para.getConfig().separator() + \"custom\";\n\t\tboolean isCustom = \"custom\".equalsIgnoreCase(themeName);\n\t\tString css = isCustom ? themeCSS : \"\";\n\t\tSysprop custom = new Sysprop(id);\n\t\tcustom.setName(StringUtils.isBlank(css) && isCustom ? \"default\" : themeName);\n\t\tcustom.addProperty(\"theme\", css);\n\t\tcustomTheme = pc.create(custom);\n\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\tFILE_CACHE.put(getThemeKey(themeName), isCustom ? css : loadResource(getThemeKey(themeName)));\n\t}\n\n\tpublic Sysprop getCustomTheme() {\n\t\tString id = \"theme\" + Para.getConfig().separator() + \"custom\";\n\t\tif (customTheme == null) {\n\t\t\tcustomTheme = (Sysprop) Optional.ofNullable(pc.read(id)).orElseGet(this::getDefaultThemeObject);\n\t\t}\n\t\treturn customTheme;\n\t}\n\n\tprivate Sysprop getDefaultThemeObject() {\n\t\tString themeName = \"default\";\n\t\tSysprop s = new Sysprop(\"theme\" + Para.getConfig().separator() + \"custom\");\n\t\ts.setName(themeName);\n\t\ts.addProperty(\"theme\", \"\");\n\t\tFILE_CACHE.put(\"theme\", themeName);\n\t\tFILE_CACHE.put(getThemeKey(themeName), loadResource(getThemeKey(themeName)));\n\t\treturn s;\n\t}\n\n\tprivate String getThemeKey(String themeName) {\n\t\treturn \"themes/\" + themeName + \".css\";\n\t}\n\n\tpublic String getDefaultTheme() {\n\t\treturn loadResource(\"themes/default.css\");\n\t}\n\n\tpublic String getSmallLogoUrl() {\n\t\tString defaultLogo = CONF.serverUrl() + CONF.imagesLink() + \"/logowhite.png\";\n\t\tString logoUrl = CONF.logoSmallUrl();\n\t\tString defaultMainLogoUrl = CONF.imagesLink() + \"/logo.svg\";\n\t\tString mainLogoUrl = CONF.logoUrl();\n\t\tif (!defaultLogo.equals(logoUrl)) {\n\t\t\treturn logoUrl;\n\t\t} else if (!mainLogoUrl.equals(defaultMainLogoUrl)) {\n\t\t\treturn mainLogoUrl;\n\t\t}\n\t\treturn logoUrl;\n\t}\n\n\tpublic String getCSPNonce() {\n\t\treturn Utils.generateSecurityToken(16);\n\t}\n\n\tpublic String getFacebookLoginURL() {\n\t\treturn \"https://www.facebook.com/dialog/oauth?client_id=\" + CONF.facebookAppId() +\n\t\t\t\t\"&response_type=code&scope=email&redirect_uri=\" + getParaEndpoint() +\n\t\t\t\t\"/facebook_auth&state=\" + getParaAppId();\n\t}\n\n\tpublic String getGoogleLoginURL() {\n\t\treturn \"https://accounts.google.com/o/oauth2/v2/auth?\" +\n\t\t\t\t\"client_id=\" + CONF.googleAppId() + \"&response_type=code&scope=openid%20profile%20email&redirect_uri=\"\n\t\t\t\t+ getParaEndpoint() + \"/google_auth&state=\" + getParaAppId();\n\t}\n\n\tpublic String getGitHubLoginURL() {\n\t\treturn \"https://github.com/login/oauth/authorize?response_type=code&client_id=\" + CONF.githubAppId() +\n\t\t\t\t\"&scope=user%3Aemail&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/github_auth\";\n\t}\n\n\tpublic String getLinkedInLoginURL() {\n\t\treturn \"https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=\" + CONF.linkedinAppId() +\n\t\t\t\t\"&scope=r_liteprofile%20r_emailaddress&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/linkedin_auth\";\n\t}\n\n\tpublic String getTwitterLoginURL() {\n\t\treturn getParaEndpoint() + \"/twitter_auth?state=\" + getParaAppId();\n\t}\n\n\tpublic String getMicrosoftLoginURL() {\n\t\treturn \"https://login.microsoftonline.com/\" + CONF.microsoftTenantId() +\n\t\t\t\t\"/oauth2/v2.0/authorize?response_type=code&client_id=\" + CONF.microsoftAppId() +\n\t\t\t\t\"&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/microsoft_auth\";\n\t}\n\n\tpublic String getSlackLoginURL() {\n\t\treturn \"https://slack.com/oauth/v2/authorize?response_type=code&client_id=\" + CONF.slackAppId() +\n\t\t\t\t\"&user_scope=identity.basic%20identity.email%20identity.team%20identity.avatar&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/slack_auth\";\n\t}\n\n\tpublic String getAmazonLoginURL() {\n\t\treturn \"https://www.amazon.com/ap/oa?response_type=code&client_id=\" + CONF.amazonAppId() +\n\t\t\t\t\"&scope=profile&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/amazon_auth\";\n\t}\n\n\tpublic String getOAuth2LoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"\") +\n\t\t\t\t\"&scope=\" + CONF.oauthScope(\"\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getOAuth2SecondLoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"second\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"second\") +\n\t\t\t\t\"&scope=\" +  CONF.oauthScope(\"second\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getOAuth2ThirdLoginURL() {\n\t\treturn CONF.oauthAuthorizationUrl(\"third\") + \"?\" +\n\t\t\t\t\"response_type=code&client_id=\" + CONF.oauthAppId(\"third\") +\n\t\t\t\t\"&scope=\" +  CONF.oauthScope(\"third\") + \"&state=\" + getParaAppId() +\n\t\t\t\t\"&redirect_uri=\" + getParaEndpoint() + \"/oauth2_auth\";\n\t}\n\n\tpublic String getParaEndpoint() {\n\t\treturn CONF.redirectUri();\n\t}\n\n\tpublic String getParaAppId() {\n\t\treturn StringUtils.removeStart(CONF.paraAccessKey(), \"app:\");\n\t}\n\n\tpublic String getFirstConfiguredLoginURL() {\n\t\tif (!CONF.facebookAppId().isEmpty()) {\n\t\t\treturn getFacebookLoginURL();\n\t\t}\n\t\tif (!CONF.googleAppId().isEmpty()) {\n\t\t\treturn getGoogleLoginURL();\n\t\t}\n\t\tif (!CONF.githubAppId().isEmpty()) {\n\t\t\treturn getGitHubLoginURL();\n\t\t}\n\t\tif (!CONF.linkedinAppId().isEmpty()) {\n\t\t\treturn getLinkedInLoginURL();\n\t\t}\n\t\tif (!CONF.twitterAppId().isEmpty()) {\n\t\t\treturn getTwitterLoginURL();\n\t\t}\n\t\tif (!CONF.microsoftAppId().isEmpty()) {\n\t\t\treturn getMicrosoftLoginURL();\n\t\t}\n\t\tif (isSlackAuthEnabled()) {\n\t\t\treturn getSlackLoginURL();\n\t\t}\n\t\tif (!CONF.amazonAppId().isEmpty()) {\n\t\t\treturn getAmazonLoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"\").isEmpty()) {\n\t\t\treturn getOAuth2LoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"second\").isEmpty()) {\n\t\t\treturn getOAuth2SecondLoginURL();\n\t\t}\n\t\tif (!CONF.oauthAppId(\"third\").isEmpty()) {\n\t\t\treturn getOAuth2ThirdLoginURL();\n\t\t}\n\t\treturn SIGNINLINK + \"?code=3&error=true\";\n\t}\n}\n"], "filenames": ["src/main/java/com/erudika/scoold/controllers/ProfileController.java", "src/main/java/com/erudika/scoold/core/Profile.java", "src/main/java/com/erudika/scoold/utils/ScooldUtils.java"], "buggy_code_start_loc": [243, 446, 348], "buggy_code_end_loc": [244, 447, 349], "fixing_code_start_loc": [243, 446, 348], "fixing_code_end_loc": [244, 447, 349], "type": "NVD-CWE-Other", "message": "Improper handling of Length parameter in GitHub repository erudika/scoold prior to 1.49.4. When the text size is large enough the service results in a momentary outage in a production environment. That can lead to memory corruption on the server.", "other": {"cve": {"id": "CVE-2022-1543", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-29T18:15:08.843", "lastModified": "2022-05-11T13:35:57.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper handling of Length parameter in GitHub repository erudika/scoold prior to 1.49.4. When the text size is large enough the service results in a momentary outage in a production environment. That can lead to memory corruption on the server."}, {"lang": "es", "value": "Un Manejo Inapropiado del Par\u00e1metro Length en el repositorio de GitHub erudika/scoold versiones anteriores a 1.49.4. Cuando el tama\u00f1o del texto es lo suficientemente grande, el servicio resulta en una interrupci\u00f3n moment\u00e1nea en un entorno de producci\u00f3n. Esto puede conllevar a una corrupci\u00f3n de memoria en el servidor"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-130"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:erudika:scoold:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.49.4", "matchCriteriaId": "F5AE1369-8484-493D-9DC2-6FE34C4E29BE"}]}]}], "references": [{"url": "https://github.com/erudika/scoold/commit/62a0e92e1486ddc17676a7ead2c07ff653d167ce", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/9889d435-3b9c-4e9d-93bc-5272e0723f9f", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/erudika/scoold/commit/62a0e92e1486ddc17676a7ead2c07ff653d167ce"}}