{"buggy_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Logger;\nuse Pimcore\\Mail;\nuse Pimcore\\Model\\Tool;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/email\")\n */\nclass EmailController extends AdminController\n{\n    /**\n     * @Route(\"/email-logs\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function emailLogsAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails') && !$this->getAdminUser()->isAllowed('gdpr_data_extractor')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $list = new Tool\\Email\\Log\\Listing();\n        if ($request->get('documentId')) {\n            $list->setCondition('documentId = ' . (int)$request->get('documentId'));\n        }\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n        $list->setOrderKey('sentDate');\n\n        if ($request->get('filter')) {\n            if ($request->get('filter')) {\n                $filterTerm = $request->get('filter');\n                if ($filterTerm == '*') {\n                    $filterTerm = '';\n                }\n\n                $filterTerm = str_replace('%', '*', $filterTerm);\n                $filterTerm = htmlspecialchars($filterTerm, ENT_QUOTES);\n\n                if (strpos($filterTerm, '@')) {\n                    $parts = explode(' ', $filterTerm);\n                    $parts = array_map(function ($part) {\n                        if (strpos($part, '@')) {\n                            $part = '\"' . $part . '\"';\n                        }\n\n                        return $part;\n                    }, $parts);\n                    $filterTerm = implode(' ', $parts);\n                }\n\n                $condition = '( MATCH (`from`,`to`,`cc`,`bcc`,`subject`,`params`) AGAINST (' . $list->quote($filterTerm) . ' IN BOOLEAN MODE) )';\n\n                if ($request->get('documentId')) {\n                    $condition .= 'AND documentId = ' . (int)$request->get('documentId');\n                }\n\n                $list->setCondition($condition);\n            }\n        }\n\n        $list->setOrder('DESC');\n\n        $data = $list->load();\n        $jsonData = [];\n\n        if (is_array($data)) {\n            foreach ($data as $entry) {\n                $tmp = $entry->getObjectVars();\n                unset($tmp['bodyHtml']);\n                unset($tmp['bodyText']);\n                $jsonData[] = $tmp;\n            }\n        }\n\n        return $this->adminJson([\n            'data' => $jsonData,\n            'success' => true,\n            'total' => $list->getTotalCount()\n        ]);\n    }\n\n    /**\n     * @Route(\"/show-email-log\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Profiler $profiler\n     *\n     * @return JsonResponse|Response\n     *\n     * @throws \\Exception\n     */\n    public function showEmailLogAction(Request $request, ?Profiler $profiler)\n    {\n        if($profiler) {\n            $profiler->disable();\n        }\n\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $type = $request->get('type');\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n        if ($request->get('type') == 'text') {\n            $templatingEnginePhp = $this->get('pimcore.templating.engine.php');\n\n            return new Response('<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><style>body{background-color:#fff;}</style></head><body><pre>' . $templatingEnginePhp->escape($emailLog->getTextLog()) . '</pre></body></html>');\n        } elseif ($request->get('type') == 'html') {\n            return new Response($emailLog->getHtmlLog());\n        } elseif ($request->get('type') == 'params') {\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n            foreach ($params as &$entry) {\n                $this->enhanceLoggingData($entry);\n            }\n\n            return $this->adminJson($params);\n        } else {\n            return new Response('No Type specified');\n        }\n    }\n\n    /**\n     * @param array $data\n     * @param $fullEntry\n     */\n    protected function enhanceLoggingData(&$data, &$fullEntry = null)\n    {\n        if (!empty($data['objectClass'])) {\n            $class = '\\\\' . ltrim($data['objectClass'], '\\\\');\n            if (!empty($data['objectId']) && is_subclass_of($class, '\\\\Pimcore\\\\Model\\\\Element\\\\ElementInterface')) {\n                $obj = $class::getById($data['objectId']);\n                if (is_null($obj)) {\n                    $data['objectPath'] = '';\n                } else {\n                    $data['objectPath'] = $obj->getRealFullPath();\n                }\n                //check for classmapping\n                if (stristr($class, '\\\\Pimcore\\\\Model') === false) {\n                    $niceClassName = '\\\\' . ltrim(get_parent_class($class), '\\\\');\n                } else {\n                    $niceClassName = $class;\n                }\n                $niceClassName = str_replace('\\\\Pimcore\\\\Model\\\\', '', $niceClassName);\n                $niceClassName = str_replace('_', '\\\\', $niceClassName);\n\n                $tmp = explode('\\\\', $niceClassName);\n                if (in_array($tmp[0], ['DataObject', 'Document', 'Asset'])) {\n                    $data['objectClassBase'] = $tmp[0];\n                    $data['objectClassSubType'] = $tmp[1];\n                }\n            }\n        }\n\n        foreach ($data as &$value) {\n            if (is_array($value)) {\n                $this->enhanceLoggingData($value, $data);\n            }\n        }\n        if ($data['children']) {\n            foreach ($data['children'] as $key => $entry) {\n                if (is_string($key)) { //key must be integers\n                    unset($data['children'][$key]);\n                }\n            }\n            $data['iconCls'] = 'pimcore_icon_folder';\n            $data['data'] = ['type' => 'simple', 'value' => 'Children (' . count($data['children']) . ')'];\n        } else {\n            //setting the icon class\n            if (!$data['iconCls']) {\n                if ($data['objectClassBase'] == 'DataObject') {\n                    $fullEntry['iconCls'] = 'pimcore_icon_object';\n                } elseif ($data['objectClassBase'] == 'Asset') {\n                    switch ($data['objectClassSubType']) {\n                        case 'Image':\n                            $fullEntry['iconCls'] = 'pimcore_icon_image';\n                            break;\n                        case 'Video':\n                            $fullEntry['iconCls'] = 'pimcore_icon_wmv';\n                            break;\n                        case 'Text':\n                            $fullEntry['iconCls'] = 'pimcore_icon_txt';\n                            break;\n                        case 'Document':\n                            $fullEntry['iconCls'] = 'pimcore_icon_pdf';\n                            break;\n                        default:\n                            $fullEntry['iconCls'] = 'pimcore_icon_asset';\n                    }\n                } elseif (strpos($data['objectClass'], 'Document') === 0) {\n                    $fullEntry['iconCls'] = 'pimcore_icon_' . strtolower($data['objectClassSubType']);\n                } else {\n                    $data['iconCls'] = 'pimcore_icon_text';\n                }\n            }\n\n            $data['leaf'] = true;\n        }\n    }\n\n    /**\n     * @Route(\"/delete-email-log\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteEmailLogAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $emailLog->delete();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/resend-email\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function resendEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $mail = new Mail();\n            $mail->preventDebugInformationAppending();\n            $mail->disableLogging();\n            $mail->setIgnoreDebugMode(true);\n\n            if ($html = $emailLog->getHtmlLog()) {\n                $mail->setBodyHtml($html);\n            }\n\n            if ($text = $emailLog->getTextLog()) {\n                $mail->setBodyText($text);\n            }\n\n            foreach (['From', 'To', 'Cc', 'Bcc', 'ReplyTo'] as $field) {\n                $getter = 'get' . $field;\n                $values = \\Pimcore\\Helper\\Mail::parseEmailAddressField($emailLog->{$getter}());\n                if (!empty($values)) {\n                    list($value) = $values;\n                    if ($value) {\n                        $prefix = ($field === 'From') ? 'set' : 'add';\n                        $mail->{$prefix . $field}($value['email'], $value['name']);\n                    }\n                }\n            }\n\n            $mail->setSubject($emailLog->getSubject());\n\n            // add document\n            if ($emailLog->getDocumentId()) {\n                $mail->setDocument($emailLog->getDocumentId());\n            }\n\n            // re-add params\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n\n            foreach ($params as $entry) {\n                $data = null;\n                $hasChildren = isset($entry['children']) && is_array($entry['children']);\n\n                if ($hasChildren) {\n                    $childData = [];\n                    foreach ($entry['children'] as $childParam) {\n                        $childData[$childParam['key']] = $this->parseLoggingParamObject($childParam);\n                    }\n                    $data = $childData;\n                } else {\n                    $data = $this->parseLoggingParamObject($entry);\n                }\n\n                $mail->setParam($entry['key'], $data);\n            }\n\n            $mail->send();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/send-test-email\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function sendTestEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $mail = new Mail();\n\n        if ($from = $request->get('from')) {\n            $addressArray = \\Pimcore\\Helper\\Mail::parseEmailAddressField($from);\n            if ($addressArray) {\n                //use the first address only\n                list($cleanedFromAddress) = $addressArray;\n                $mail->setFrom($cleanedFromAddress['email'], $cleanedFromAddress['name']);\n            }\n        }\n\n        $toAddresses = \\Pimcore\\Helper\\Mail::parseEmailAddressField($request->get('to'));\n        foreach ($toAddresses as $cleanedToAddress) {\n            $mail->addTo($cleanedToAddress['email'], $cleanedToAddress['name']);\n        }\n\n        $mail->setSubject($request->get('subject'));\n        $mail->setIgnoreDebugMode(true);\n\n        if ($request->get('emailType') == 'text') {\n            $mail->setBodyText($request->get('content'));\n        } elseif ($request->get('emailType') == 'html') {\n            $mail->setBodyHtml($request->get('content'));\n        } elseif ($request->get('emailType') == 'document') {\n            $doc = \\Pimcore\\Model\\Document::getByPath($request->get('documentPath'));\n\n            if ($doc instanceof \\Pimcore\\Model\\Document\\Email || $doc instanceof \\Pimcore\\Model\\Document\\Newsletter) {\n                $mail->setDocument($doc);\n\n                if ($request->get('mailParamaters')) {\n                    if ($mailParamsArray = json_decode($request->get('mailParamaters'), true)) {\n                        foreach ($mailParamsArray as $mailParam) {\n                            if ($mailParam['key']) {\n                                $mail->setParam($mailParam['key'], $mailParam['value']);\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new \\Exception('Email document not found!');\n            }\n        }\n\n        $mail->send();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/blacklist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function blacklistAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                $address = new Tool\\Email\\Blacklist();\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Tool\\Email\\Blacklist\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($request->query->all());\n            if ($sortingSettings['orderKey']) {\n                $orderKey = $sortingSettings['orderKey'];\n            }\n            if ($sortingSettings['order']) {\n                $order = $sortingSettings['order'];\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`address` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $data = $list->load();\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => $data,\n                'total' => $list->getTotalCount()\n            ]);\n        }\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return $data\n     */\n    protected function parseLoggingParamObject($params)\n    {\n        $data = null;\n        if ($params['data']['type'] === 'object') {\n            $class = '\\\\' . ltrim($params['data']['objectClass'], '\\\\');\n            if (!empty($params['data']['objectId']) && is_subclass_of($class, '\\\\Pimcore\\\\Model\\\\Element\\\\ElementInterface')) {\n                $obj = $class::getById($params['data']['objectId']);\n                if (!is_null($obj)) {\n                    $data = $obj;\n                }\n            }\n        } else {\n            $data = $params['data']['value'];\n        }\n\n        return $data;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Logger;\nuse Pimcore\\Mail;\nuse Pimcore\\Model\\Tool;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/email\")\n */\nclass EmailController extends AdminController\n{\n    /**\n     * @Route(\"/email-logs\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function emailLogsAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails') && !$this->getAdminUser()->isAllowed('gdpr_data_extractor')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $list = new Tool\\Email\\Log\\Listing();\n        if ($request->get('documentId')) {\n            $list->setCondition('documentId = ' . (int)$request->get('documentId'));\n        }\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n        $list->setOrderKey('sentDate');\n\n        if ($request->get('filter')) {\n            if ($request->get('filter')) {\n                $filterTerm = $request->get('filter');\n                if ($filterTerm == '*') {\n                    $filterTerm = '';\n                }\n\n                $filterTerm = str_replace('%', '*', $filterTerm);\n                $filterTerm = htmlspecialchars($filterTerm, ENT_QUOTES);\n\n                if (strpos($filterTerm, '@')) {\n                    $parts = explode(' ', $filterTerm);\n                    $parts = array_map(function ($part) {\n                        if (strpos($part, '@')) {\n                            $part = '\"' . $part . '\"';\n                        }\n\n                        return $part;\n                    }, $parts);\n                    $filterTerm = implode(' ', $parts);\n                }\n\n                $condition = '( MATCH (`from`,`to`,`cc`,`bcc`,`subject`,`params`) AGAINST (' . $list->quote($filterTerm) . ' IN BOOLEAN MODE) )';\n\n                if ($request->get('documentId')) {\n                    $condition .= 'AND documentId = ' . (int)$request->get('documentId');\n                }\n\n                $list->setCondition($condition);\n            }\n        }\n\n        $list->setOrder('DESC');\n\n        $data = $list->load();\n        $jsonData = [];\n\n        if (is_array($data)) {\n            foreach ($data as $entry) {\n                $tmp = $entry->getObjectVars();\n                unset($tmp['bodyHtml']);\n                unset($tmp['bodyText']);\n                $jsonData[] = $tmp;\n            }\n        }\n\n        return $this->adminJson([\n            'data' => $jsonData,\n            'success' => true,\n            'total' => $list->getTotalCount()\n        ]);\n    }\n\n    /**\n     * @Route(\"/show-email-log\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Profiler $profiler\n     *\n     * @return JsonResponse|Response\n     *\n     * @throws \\Exception\n     */\n    public function showEmailLogAction(Request $request, ?Profiler $profiler)\n    {\n        if($profiler) {\n            $profiler->disable();\n        }\n\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $type = $request->get('type');\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n        if ($request->get('type') == 'text') {\n            $templatingEnginePhp = $this->get('pimcore.templating.engine.php');\n\n            return new Response('<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><style>body{background-color:#fff;}</style></head><body><pre>' . $templatingEnginePhp->escape($emailLog->getTextLog()) . '</pre></body></html>');\n        } elseif ($request->get('type') == 'html') {\n            return new Response($emailLog->getHtmlLog(), 200, [\n                'Content-Security-Policy' => \"default-src 'self'; style-src 'self' 'unsafe-inline'\"\n            ]);\n        } elseif ($request->get('type') == 'params') {\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n            foreach ($params as &$entry) {\n                $this->enhanceLoggingData($entry);\n            }\n\n            return $this->adminJson($params);\n        } else {\n            return new Response('No Type specified');\n        }\n    }\n\n    /**\n     * @param array $data\n     * @param $fullEntry\n     */\n    protected function enhanceLoggingData(&$data, &$fullEntry = null)\n    {\n        if (!empty($data['objectClass'])) {\n            $class = '\\\\' . ltrim($data['objectClass'], '\\\\');\n            if (!empty($data['objectId']) && is_subclass_of($class, '\\\\Pimcore\\\\Model\\\\Element\\\\ElementInterface')) {\n                $obj = $class::getById($data['objectId']);\n                if (is_null($obj)) {\n                    $data['objectPath'] = '';\n                } else {\n                    $data['objectPath'] = $obj->getRealFullPath();\n                }\n                //check for classmapping\n                if (stristr($class, '\\\\Pimcore\\\\Model') === false) {\n                    $niceClassName = '\\\\' . ltrim(get_parent_class($class), '\\\\');\n                } else {\n                    $niceClassName = $class;\n                }\n                $niceClassName = str_replace('\\\\Pimcore\\\\Model\\\\', '', $niceClassName);\n                $niceClassName = str_replace('_', '\\\\', $niceClassName);\n\n                $tmp = explode('\\\\', $niceClassName);\n                if (in_array($tmp[0], ['DataObject', 'Document', 'Asset'])) {\n                    $data['objectClassBase'] = $tmp[0];\n                    $data['objectClassSubType'] = $tmp[1];\n                }\n            }\n        }\n\n        foreach ($data as &$value) {\n            if (is_array($value)) {\n                $this->enhanceLoggingData($value, $data);\n            }\n        }\n        if ($data['children']) {\n            foreach ($data['children'] as $key => $entry) {\n                if (is_string($key)) { //key must be integers\n                    unset($data['children'][$key]);\n                }\n            }\n            $data['iconCls'] = 'pimcore_icon_folder';\n            $data['data'] = ['type' => 'simple', 'value' => 'Children (' . count($data['children']) . ')'];\n        } else {\n            //setting the icon class\n            if (!$data['iconCls']) {\n                if ($data['objectClassBase'] == 'DataObject') {\n                    $fullEntry['iconCls'] = 'pimcore_icon_object';\n                } elseif ($data['objectClassBase'] == 'Asset') {\n                    switch ($data['objectClassSubType']) {\n                        case 'Image':\n                            $fullEntry['iconCls'] = 'pimcore_icon_image';\n                            break;\n                        case 'Video':\n                            $fullEntry['iconCls'] = 'pimcore_icon_wmv';\n                            break;\n                        case 'Text':\n                            $fullEntry['iconCls'] = 'pimcore_icon_txt';\n                            break;\n                        case 'Document':\n                            $fullEntry['iconCls'] = 'pimcore_icon_pdf';\n                            break;\n                        default:\n                            $fullEntry['iconCls'] = 'pimcore_icon_asset';\n                    }\n                } elseif (strpos($data['objectClass'], 'Document') === 0) {\n                    $fullEntry['iconCls'] = 'pimcore_icon_' . strtolower($data['objectClassSubType']);\n                } else {\n                    $data['iconCls'] = 'pimcore_icon_text';\n                }\n            }\n\n            $data['leaf'] = true;\n        }\n    }\n\n    /**\n     * @Route(\"/delete-email-log\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteEmailLogAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $emailLog->delete();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/resend-email\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function resendEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $success = false;\n        $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n        if ($emailLog instanceof Tool\\Email\\Log) {\n            $mail = new Mail();\n            $mail->preventDebugInformationAppending();\n            $mail->disableLogging();\n            $mail->setIgnoreDebugMode(true);\n\n            if ($html = $emailLog->getHtmlLog()) {\n                $mail->setBodyHtml($html);\n            }\n\n            if ($text = $emailLog->getTextLog()) {\n                $mail->setBodyText($text);\n            }\n\n            foreach (['From', 'To', 'Cc', 'Bcc', 'ReplyTo'] as $field) {\n                $getter = 'get' . $field;\n                $values = \\Pimcore\\Helper\\Mail::parseEmailAddressField($emailLog->{$getter}());\n                if (!empty($values)) {\n                    list($value) = $values;\n                    if ($value) {\n                        $prefix = ($field === 'From') ? 'set' : 'add';\n                        $mail->{$prefix . $field}($value['email'], $value['name']);\n                    }\n                }\n            }\n\n            $mail->setSubject($emailLog->getSubject());\n\n            // add document\n            if ($emailLog->getDocumentId()) {\n                $mail->setDocument($emailLog->getDocumentId());\n            }\n\n            // re-add params\n            try {\n                $params = $this->decodeJson($emailLog->getParams());\n            } catch (\\Exception $e) {\n                Logger::warning('Could not decode JSON param string');\n                $params = [];\n            }\n\n            foreach ($params as $entry) {\n                $data = null;\n                $hasChildren = isset($entry['children']) && is_array($entry['children']);\n\n                if ($hasChildren) {\n                    $childData = [];\n                    foreach ($entry['children'] as $childParam) {\n                        $childData[$childParam['key']] = $this->parseLoggingParamObject($childParam);\n                    }\n                    $data = $childData;\n                } else {\n                    $data = $this->parseLoggingParamObject($entry);\n                }\n\n                $mail->setParam($entry['key'], $data);\n            }\n\n            $mail->send();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/send-test-email\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function sendTestEmailAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        $mail = new Mail();\n\n        if ($from = $request->get('from')) {\n            $addressArray = \\Pimcore\\Helper\\Mail::parseEmailAddressField($from);\n            if ($addressArray) {\n                //use the first address only\n                list($cleanedFromAddress) = $addressArray;\n                $mail->setFrom($cleanedFromAddress['email'], $cleanedFromAddress['name']);\n            }\n        }\n\n        $toAddresses = \\Pimcore\\Helper\\Mail::parseEmailAddressField($request->get('to'));\n        foreach ($toAddresses as $cleanedToAddress) {\n            $mail->addTo($cleanedToAddress['email'], $cleanedToAddress['name']);\n        }\n\n        $mail->setSubject($request->get('subject'));\n        $mail->setIgnoreDebugMode(true);\n\n        if ($request->get('emailType') == 'text') {\n            $mail->setBodyText($request->get('content'));\n        } elseif ($request->get('emailType') == 'html') {\n            $mail->setBodyHtml($request->get('content'));\n        } elseif ($request->get('emailType') == 'document') {\n            $doc = \\Pimcore\\Model\\Document::getByPath($request->get('documentPath'));\n\n            if ($doc instanceof \\Pimcore\\Model\\Document\\Email || $doc instanceof \\Pimcore\\Model\\Document\\Newsletter) {\n                $mail->setDocument($doc);\n\n                if ($request->get('mailParamaters')) {\n                    if ($mailParamsArray = json_decode($request->get('mailParamaters'), true)) {\n                        foreach ($mailParamsArray as $mailParam) {\n                            if ($mailParam['key']) {\n                                $mail->setParam($mailParam['key'], $mailParam['value']);\n                            }\n                        }\n                    }\n                }\n            } else {\n                throw new \\Exception('Email document not found!');\n            }\n        }\n\n        $mail->send();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/blacklist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function blacklistAction(Request $request)\n    {\n        if (!$this->getAdminUser()->isAllowed('emails')) {\n            throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n        }\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $address = Tool\\Email\\Blacklist::getByAddress($data['address']);\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                $address = new Tool\\Email\\Blacklist();\n                $address->setValues($data);\n                $address->save();\n\n                return $this->adminJson(['data' => $address, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Tool\\Email\\Blacklist\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($request->query->all());\n            if ($sortingSettings['orderKey']) {\n                $orderKey = $sortingSettings['orderKey'];\n            }\n            if ($sortingSettings['order']) {\n                $order = $sortingSettings['order'];\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`address` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $data = $list->load();\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => $data,\n                'total' => $list->getTotalCount()\n            ]);\n        }\n    }\n\n    /**\n     * @param array $params\n     *\n     * @return $data\n     */\n    protected function parseLoggingParamObject($params)\n    {\n        $data = null;\n        if ($params['data']['type'] === 'object') {\n            $class = '\\\\' . ltrim($params['data']['objectClass'], '\\\\');\n            if (!empty($params['data']['objectId']) && is_subclass_of($class, '\\\\Pimcore\\\\Model\\\\Element\\\\ElementInterface')) {\n                $obj = $class::getById($params['data']['objectId']);\n                if (!is_null($obj)) {\n                    $data = $obj;\n                }\n            }\n        } else {\n            $data = $params['data']['value'];\n        }\n\n        return $data;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/EmailController.php"], "buggy_code_start_loc": [136], "buggy_code_end_loc": [137], "fixing_code_start_loc": [136], "fixing_code_end_loc": [139], "type": "CWE-79", "message": "bundles/AdminBundle/Controller/Admin/EmailController.php in Pimcore before 6.3.0 allows script execution in the Email Log preview window because of the lack of a Content-Security-Policy header.", "other": {"cve": {"id": "CVE-2019-18982", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-15T05:15:12.893", "lastModified": "2019-11-21T17:53:05.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "bundles/AdminBundle/Controller/Admin/EmailController.php in Pimcore before 6.3.0 allows script execution in the Email Log preview window because of the lack of a Content-Security-Policy header."}, {"lang": "es", "value": "El archivo bundles/AdminBundle/Controller/Admin/EmailController.php en Pimcore versiones anteriores a la versi\u00f3n  6.3.0, permite la ejecuci\u00f3n del script en la ventana de vista previa del Registro de Correo Electr\u00f3nico debido a la falta de un encabezado Content-Security-Policy."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.3.0", "matchCriteriaId": "6F1E0C94-06AB-4EDE-9D11-71EBC2D3934C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/e0b48faf7d29ce43a98825a0b230e88350ebcf78", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/compare/v6.2.3...v6.3.0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/e0b48faf7d29ce43a98825a0b230e88350ebcf78"}}