{"buggy_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>io.onedev</groupId>\n\t\t<artifactId>parent</artifactId>\n\t\t<version>1.0.5</version>\n\t</parent>\n\t<artifactId>server</artifactId>\n\t<version>7.3.0</version>\n\t<packaging>pom</packaging>\n\t<build>\n\t\t<finalName>${project.groupId}.${project.artifactId}-${project.version}</finalName>\n\t\t<pluginManagement>\n\t\t\t<plugins>\n\t\t\t\t<plugin>\n\t\t\t\t\t<groupId>org.antlr</groupId>\n\t\t\t\t\t<artifactId>antlr4-maven-plugin</artifactId>\n\t\t\t\t\t<version>${antlr.version}</version>\n\t\t\t\t\t<executions>\n\t\t\t\t\t\t<execution>\n\t\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t\t<goal>antlr4</goal>\n\t\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t</execution>\n\t\t\t\t\t</executions>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n\t\t\t\t\t\t<listener>true</listener>\n\t\t\t\t\t\t<visitor>true</visitor>\n\t\t\t\t\t</configuration>\n\t\t\t\t</plugin>\n\t\t\t</plugins>\n\t\t</pluginManagement>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>plugin-maven</artifactId>\n\t\t\t\t<version>2.1.1</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<?m2e execute onConfiguration,onIncremental?>\n\t\t\t\t\t\t<id>populate-resources</id>\n\t\t\t\t\t\t<phase>process-resources</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>populate-resources</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>package-artifacts</id>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>package-artifacts</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<version>3.0.2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>default-jar</id>\n\t\t\t\t\t\t<phase>never</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<finalName>unwanted</finalName>\n\t\t\t\t\t\t\t<classifier>unwanted</classifier>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/java</directory>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>**/*.java</exclude>\n\t\t\t\t\t<exclude>**/*.scss</exclude>\n\t\t\t\t</excludes>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>target/generated-sources/antlr4</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*.tokens</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n\t<modules>\n\t\t<module>server-core</module>\n\t\t<module>server-plugin</module>\n\t\t<module>server-product</module>\n\t</modules>\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-bootstrap</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-loader</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-loader</artifactId>\n\t\t\t\t<type>test-jar</type>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-utils</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-codeassist</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-jsymbol</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>slf4j-api</artifactId>\n\t\t\t\t<version>${slf4j.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>jul-to-slf4j</artifactId>\n\t\t\t\t<version>${slf4j.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t\t<artifactId>logback-core</artifactId>\n\t\t\t\t<version>${logback.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t\t<artifactId>logback-classic</artifactId>\n\t\t\t\t<version>${logback.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-server</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-servlets</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-servlet</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty.websocket</groupId>\n\t\t\t\t<artifactId>websocket-server</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-core</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-extensions</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-request</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-util</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-devutils</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-native-websocket-core</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.containers</groupId>\n\t\t\t\t<artifactId>jersey-container-servlet</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.security</groupId>\n\t\t\t\t<artifactId>oauth2-client</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.ext</groupId>\n\t\t\t\t<artifactId>jersey-bean-validation</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.dom4j</groupId>\n\t\t\t\t<artifactId>dom4j</artifactId>\n\t\t\t\t<version>2.1.3</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-validator</artifactId>\n\t\t\t\t<version>5.3.6.Final</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-core</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-jcache</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-entitymanager</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-hikaricp</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.ehcache</groupId>\n\t\t\t\t<artifactId>ehcache</artifactId>\n\t\t\t\t<version>3.8.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.nimbusds</groupId>\n\t\t\t\t<artifactId>oauth2-oidc-sdk</artifactId>\n\t\t\t\t<version>3.4.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.zaxxer</groupId>\n\t\t\t\t<artifactId>HikariCP</artifactId>\n\t\t\t\t<version>2.7.9</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-collections4</artifactId>\n\t\t\t\t<version>4.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-compress</artifactId>\n\t\t\t\t<version>1.21</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-io</groupId>\n\t\t\t\t<artifactId>commons-io</artifactId>\n\t\t\t\t<version>2.7</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-codec</groupId>\n\t\t\t\t<artifactId>commons-codec</artifactId>\n\t\t\t\t<version>1.7</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t\t<version>3.8.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-text</artifactId>\n\t\t\t\t<version>1.6</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.google.guava</groupId>\n\t\t\t\t<artifactId>guava</artifactId>\n\t\t\t\t<version>25.1-android</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t\t<version>1.3.3</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-validator</groupId>\n\t\t\t\t<artifactId>commons-validator</artifactId>\n\t\t\t\t<version>1.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.ocpsoft.prettytime</groupId>\n\t\t\t\t<artifactId>prettytime</artifactId>\n\t\t\t\t<version>4.0.1.Final</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t\t\t<artifactId>httpclient</artifactId>\n\t\t\t\t<version>4.5.13</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.hk2</groupId>\n\t\t\t\t<artifactId>guice-bridge</artifactId>\n\t\t\t\t<version>2.5.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.jetbrains.xodus</groupId>\n\t\t\t\t<artifactId>xodus-entity-store</artifactId>\n\t\t\t\t<version>2.0.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.tika</groupId>\n\t\t\t\t<artifactId>tika-core</artifactId>\n\t\t\t\t<version>${tika.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-email</artifactId>\n\t\t\t\t<version>1.5</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.sun.mail</groupId>\n\t\t\t\t<artifactId>javax.mail</artifactId>\n\t\t\t\t<version>1.6.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-httpclient</groupId>\n\t\t\t\t<artifactId>commons-httpclient</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>joda-time</groupId>\n\t\t\t\t<artifactId>joda-time</artifactId>\n\t\t\t\t<version>2.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.yaml</groupId>\n\t\t\t\t<artifactId>snakeyaml</artifactId>\n\t\t\t\t<version>1.26</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.bouncycastle</groupId>\n\t\t\t\t<artifactId>bcprov-jdk15on</artifactId>\n\t\t\t\t<version>1.69</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.unbescape</groupId>\n\t\t\t\t<artifactId>unbescape</artifactId>\n\t\t\t\t<version>1.1.2.RELEASE</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.quartz-scheduler</groupId>\n\t\t\t\t<artifactId>quartz</artifactId>\n\t\t\t\t<version>2.3.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-core</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-core</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-queries</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-queryparser</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-analyzers-common</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-analyzers-smartcn</artifactId>\t\t\t\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-backward-codecs</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-web</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-guice</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t\t<version>2.3.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish</groupId>\n\t\t\t\t<artifactId>javax.el</artifactId>\n\t\t\t\t<version>3.0.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hsqldb</groupId>\n\t\t\t\t<artifactId>hsqldb</artifactId>\n\t\t\t\t<version>2.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>jaxen</groupId>\n\t\t\t\t<artifactId>jaxen</artifactId>\n\t\t\t\t<version>1.1.6</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.thoughtworks.xstream</groupId>\n\t\t\t\t<artifactId>xstream</artifactId>\n\t\t\t\t<version>1.4.19</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.joestelmach</groupId>\n\t\t\t\t<artifactId>natty</artifactId>\n\t\t\t\t<version>0.13</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.codehaus.groovy</groupId>\n\t\t\t\t<artifactId>groovy-templates</artifactId>\n\t\t\t\t<version>${groovy.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.github.albfernandez</groupId>\n\t\t\t\t<artifactId>juniversalchardet</artifactId>\n\t\t\t\t<version>2.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-autolink</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.objenesis</groupId>\n\t\t\t\t<artifactId>objenesis</artifactId>\n\t\t\t\t<version>3.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-anchorlink</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-definition</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-tables</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-gfm-tasklist</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-toc</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>de.taimos</groupId>\n\t\t\t\t<artifactId>totp</artifactId>\n\t\t\t\t<version>1.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.google.zxing</groupId>\n\t\t\t\t<artifactId>javase</artifactId>\n\t\t\t\t<version>3.2.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.http.server</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.gpg.bc</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.archive</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>net.i2p.crypto</groupId>\n\t\t\t\t<artifactId>eddsa</artifactId>\n\t\t\t\t<version>0.3.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.sshd</groupId>\n\t\t\t\t<artifactId>sshd-core</artifactId>\n\t\t\t\t<version>2.8.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.json</groupId>\n\t\t\t\t<artifactId>json</artifactId>\n\t\t\t\t<version>20090211</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-core</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t\t<version>${jacksondatabind.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.dataformat</groupId>\n\t\t\t\t<artifactId>jackson-dataformat-yaml</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-annotations</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.datatype</groupId>\n\t\t\t\t<artifactId>jackson-datatype-jsr310</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.jaxrs</groupId>\n\t\t\t\t<artifactId>jackson-jaxrs-json-provider</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>agent</artifactId>\n\t\t\t\t<version>${agent.version}</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>onedev</id>\n\t\t\t<url>https://artifact.onedev.io/artifactory/onedev</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t\t<updatePolicy>never</updatePolicy>\n\t\t\t\t<checksumPolicy>fail</checksumPolicy>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t\t<updatePolicy>always</updatePolicy>\n\t\t\t\t<checksumPolicy>fail</checksumPolicy>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\t<properties>\n\t\t<commons.version>2.1.2</commons.version>\n\t\t<agent.version>1.3.7</agent.version>\n\t\t<slf4j.version>1.7.30</slf4j.version>\n\t\t<logback.version>1.2.9</logback.version>\n\t\t<antlr.version>4.7.2</antlr.version>\n\t\t<jetty.version>9.4.43.v20210629</jetty.version>\n\t\t<wicket.version>7.17.0</wicket.version>\n\t\t<jersey.version>2.26</jersey.version>\n\t\t<hibernate.version>5.4.24.Final</hibernate.version>\n\t\t<wicketbootstrap.version>0.10.18</wicketbootstrap.version>\n\t\t<lucene.version>8.7.0</lucene.version>\n\t\t<shiro.version>1.7.1</shiro.version>\n\t\t<jgit.version>5.13.0.202109080827-r</jgit.version>\n\t\t<flexmark.version>0.62.2</flexmark.version>\n\t\t<groovy.version>3.0.10</groovy.version>\n\t\t<servlet.version>3.1.0</servlet.version>\n\t\t<jackson.version>2.13.2</jackson.version>\n\t\t<jacksondatabind.version>2.13.2.1</jacksondatabind.version>\n\t\t<tika.version>1.24.1</tika.version>\n\t</properties>\n</project>\n", "package io.onedev.server.migration;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.text.MessageFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.Stack;\r\nimport java.util.UUID;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.annotation.Nullable;\r\nimport javax.inject.Singleton;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang3.RandomStringUtils;\r\nimport org.apache.commons.lang3.tuple.Triple;\r\nimport org.dom4j.Element;\r\nimport org.dom4j.Node;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.google.common.base.Preconditions;\r\n\r\nimport io.onedev.commons.bootstrap.Bootstrap;\r\nimport io.onedev.commons.utils.ExplicitException;\r\nimport io.onedev.commons.utils.FileUtils;\r\nimport io.onedev.commons.utils.StringUtils;\r\nimport io.onedev.server.model.Issue;\r\nimport io.onedev.server.model.IssueComment;\r\nimport io.onedev.server.model.Project;\r\nimport io.onedev.server.model.PullRequest;\r\nimport io.onedev.server.model.PullRequestComment;\r\nimport io.onedev.server.model.User;\r\nimport io.onedev.server.util.Pair;\r\nimport oshi.SystemInfo;\r\nimport oshi.hardware.HardwareAbstractionLayer;\r\n\r\n@Singleton\r\n@SuppressWarnings(\"unused\")\r\npublic class DataMigrator {\r\n\t\r\n\tprivate static final Logger logger = LoggerFactory.getLogger(DataMigrator.class);\r\n\t\r\n\tprivate void migrate1(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement branchRefElement = element.element(\"branchRef\");\r\n\t\t\t\t\tif (branchRefElement != null)\r\n\t\t\t\t\t\tbranchRefElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tprivate void migrate2(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement gateKeeperElement = element.element(\"gateKeeper\");\r\n\t\t\t\t\tgateKeeperElement.detach();\r\n\t\t\t\t\telement.addElement(\"gateKeepers\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tprivate void migrate3(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\tString name = element.getName();\r\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.commons\", \"com.gitplex.commons\");\r\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.gitplex\", \"com.gitplex.server\");\r\n\t\t\t\telement.setName(name);\r\n\t\t\t}\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\tif (settingElement != null) {\r\n\t\t\t\t\t\tString clazz = settingElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsettingElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\r\n\t\t\t\t\t\tElement gitConfigElement = settingElement.element(\"gitConfig\");\r\n\t\t\t\t\t\tif (gitConfigElement != null) {\r\n\t\t\t\t\t\t\tclazz = gitConfigElement.attributeValue(\"class\");\r\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdom.writeToFile(file, false);\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate4(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement avatarUploadDateElement = element.element(\"avatarUploadDate\");\r\n\t\t\t\t\tif (avatarUploadDateElement != null)\r\n\t\t\t\t\t\tavatarUploadDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate5(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\t\tif (settingElement != null)\r\n\t\t\t\t\t\t\tsettingElement.addElement(\"enableSSL\").setText(\"false\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate6(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate7(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.commons.hibernate.migration.VersionTable\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.ModelVersion\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.support.IntegrationPolicy\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.support.IntegrationPolicy\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.PullRequest_-IntegrationStrategy\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.PullRequest_-IntegrationStrategy\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.\", \"com.gitplex.server.model.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SpecifiedGit\", \"com.gitplex.server.git.config.SpecifiedGit\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SystemGit\", \"com.gitplex.server.git.config.SystemGit\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.\", \"com.gitplex.server.model.support.setting.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.gatekeeper.\", \"com.gitplex.server.gatekeeper.\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t\t\r\n\t\t\t\tif (file.getName().equals(\"VersionTables.xml\")) {\r\n\t\t\t\t\tFileUtils.moveFile(file, new File(file.getParentFile(), \"ModelVersions.xml\"));\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrateIntegrationStrategy8(Element integrationStrategyElement) {\r\n\t\tif (integrationStrategyElement != null) {\r\n\t\t\tintegrationStrategyElement.setName(\"mergeStrategy\");\r\n\t\t\tswitch (integrationStrategyElement.getText()) {\r\n\t\t\tcase \"MERGE_ALWAYS\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"ALWAYS_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MERGE_WITH_SQUASH\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"SQUASH_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_SOURCE_ONTO_TARGET\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"REBASE_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_TARGET_ONTO_SOURCE\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"MERGE_IF_NECESSARY\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate8(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\t\tsettingElement.addElement(\"curlConfig\")\r\n\t\t\t\t\t\t\t\t.addAttribute(\"class\", \"com.gitplex.server.git.config.SystemCurl\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"reviewEffort\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"gateKeepers\").detach();\r\n\t\t\t\t\telement.element(\"integrationPolicies\").detach();\r\n\t\t\t\t\telement.addElement(\"branchProtections\");\r\n\t\t\t\t\telement.addElement(\"tagProtections\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement assigneeElement = element.element(\"assignee\");\r\n\t\t\t\t\tif (assigneeElement != null)\r\n\t\t\t\t\t\tassigneeElement.detach();\r\n\t\t\t\t\tmigrateIntegrationStrategy8(element.element(\"integrationStrategy\"));\r\n\t\t\t\t\tElement lastIntegrationPreviewElement = element.element(\"lastIntegrationPreview\");\r\n\t\t\t\t\tif (lastIntegrationPreviewElement != null) {\r\n\t\t\t\t\t\tlastIntegrationPreviewElement.setName(\"lastMergePreview\");\r\n\t\t\t\t\t\tElement integratedElement = lastIntegrationPreviewElement.element(\"integrated\");\r\n\t\t\t\t\t\tif (integratedElement != null)\r\n\t\t\t\t\t\t\tintegratedElement.setName(\"merged\");\r\n\t\t\t\t\t\tmigrateIntegrationStrategy8(lastIntegrationPreviewElement.element(\"integrationStrategy\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement closeStatusElement = closeInfoElement.element(\"closeStatus\");\r\n\t\t\t\t\t\tif (closeStatusElement.getText().equals(\"INTEGRATED\"))\r\n\t\t\t\t\t\t\tcloseStatusElement.setText(\"MERGED\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReviewInvitations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestVerifications.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentRelations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentReplys.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement mergeCommitHashElement = element.element(\"mergeCommitHash\");\r\n\t\t\t\t\tmergeCommitHashElement.setName(\"mergeBaseCommitHash\");\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate9(File dataDir, Stack<Integer> versions) {\r\n\t\ttry {\r\n\t\t\tMap<String, String> accountIdToName = new HashMap<>();\r\n\t\t\tSet<String> userIds = new HashSet<>();\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Accounts.xml\", \"Users.xml\"));\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Account\", \r\n\t\t\t\t\t\t\t\"com.gitplex.server.model.User\");\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\taccountIdToName.put(element.elementText(\"id\"), element.elementText(\"name\"));\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"organization\").equals(\"true\")) {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tuserIds.add(element.elementText(\"id\"));\r\n\t\t\t\t\t\t\telement.element(\"organization\").detach();\r\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\r\n\t\t\t\t\t\t\telement.element(\"noSpaceName\").detach();\r\n\t\t\t\t\t\t\tif (element.element(\"noSpaceFullName\") != null)\r\n\t\t\t\t\t\t\t\telement.element(\"noSpaceFullName\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong lastUserAuthorizationId = 0;\r\n\t\t\tVersionedXmlDoc userAuthorizationsDom = new VersionedXmlDoc();\r\n\t\t\tElement userAuthorizationListElement = userAuthorizationsDom.addElement(\"list\");\r\n\t\t\t\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Depots.xml\", \"Projects.xml\"));\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Depot\", \r\n\t\t\t\t\t\t\t\"com.gitplex.server.model.Project\");\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tString accountId = element.elementText(\"account\");\r\n\t\t\t\t\t\telement.element(\"account\").detach();\r\n\t\t\t\t\t\tString depotName = element.elementText(\"name\");\r\n\t\t\t\t\t\telement.element(\"name\").setText(accountIdToName.get(accountId) + \".\" + depotName);\r\n\t\t\t\t\t\tif (element.element(\"defaultPrivilege\") != null\t)\r\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString adminId;\r\n\t\t\t\t\t\tif (userIds.contains(accountId)) {\r\n\t\t\t\t\t\t\tadminId = accountId;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tadminId = \"1\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement userAuthorizationElement = \r\n\t\t\t\t\t\t\t\tuserAuthorizationListElement.addElement(\"com.gitplex.server.model.UserAuthorization\");\r\n\t\t\t\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++lastUserAuthorizationId));\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"user\").setText(adminId);\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"project\").setText(element.elementText(\"id\"));\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"privilege\").setText(\"ADMIN\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"BranchWatchs.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tif (!userIds.contains(element.elementText(\"user\"))) {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.element(\"depot\").setName(\"project\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Teams.xml\") \r\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamMemberships.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamAuthorizations.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"OrganizationMemberships.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"PullRequest\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"Review\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitation\")) {\r\n\t\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\r\n\t\t\t\t\t\t\tFile storageDir = new File(storagePath);\r\n\t\t\t\t\t\t\tFile repositoriesDir = new File(storageDir, \"repositories\");\r\n\t\t\t\t\t\t\tif (repositoriesDir.exists()) {\r\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storageDir, \"projects\");\r\n\t\t\t\t\t\t\t\tFileUtils.moveDirectory(repositoriesDir, projectsDir);\r\n\t\t\t\t\t\t\t\tfor (File projectDir: projectsDir.listFiles()) {\r\n\t\t\t\t\t\t\t\t\tFile infoDir = new File(projectDir, \"info\");\r\n\t\t\t\t\t\t\t\t\tif (infoDir.exists())\r\n\t\t\t\t\t\t\t\t\t\tFileUtils.deleteDir(infoDir);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (element.elementText(\"key\").equals(\"SECURITY\")) {\r\n\t\t\t\t\t\t\telement.element(\"setting\").addElement(\"enableAnonymousAccess\").setText(\"false\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\tuserAuthorizationsDom.writeToFile(new File(dataDir, \"UserAuthorizations.xml\"), false);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new RuntimeException(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate10(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\") || file.getName().startsWith(\"CodeCommentReplys.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement exprElement = branchProtectionElement.element(\"reviewAppointmentExpr\");\r\n\t\t\t\t\t\tif (exprElement != null)\r\n\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\texprElement = fileProtectionElement.element(\"reviewAppointmentExpr\");\r\n\t\t\t\t\t\t\tif (exprElement != null)\r\n\t\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(new File(dataDir, \"Configs.xml\"));\r\n\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\r\n\t\t\t\tFile codeCommentsFromWeiFeng = new File(storagePath, \"CodeComments.xml\");\r\n\t\t\t\tif (codeCommentsFromWeiFeng.exists()) {\r\n\t\t\t\t\tdom = VersionedXmlDoc.fromFile(codeCommentsFromWeiFeng);\r\n\t\t\t\t\tfor (Element commentElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tcommentElement.setName(\"com.gitplex.server.model.CodeComment\");\r\n\t\t\t\t\t\tcommentElement.element(\"depot\").setName(\"project\");\r\n\t\t\t\t\t\tcommentElement.element(\"resolved\").detach();\r\n\t\t\t\t\t\tcommentElement.element(\"commentPos\").setName(\"markPos\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(new File(dataDir, \"CodeComments.xml\"), false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate11(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tlong maxId = 0;\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong id = Long.parseLong(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (maxId < id)\r\n\t\t\t\t\t\tmaxId = id;\r\n\t\t\t\t}\r\n\t\t\t\tElement licenseConfigElement = dom.getRootElement().addElement(\"com.gitplex.server.model.Config\");\r\n\t\t\t\tlicenseConfigElement.addElement(\"id\").setText(String.valueOf(maxId+1));\r\n\t\t\t\tlicenseConfigElement.addElement(\"key\").setText(\"LICENSE\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate12(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"enabled\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.addElement(\"enabled\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate13(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \"gitplex\", \"turbodev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"GitPlex\", \"TurboDev\");\r\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate14(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.addElement(\"submitter\");\r\n\t\t\t\t\t\tsubmitterElement.addAttribute(\"class\", \"com.turbodev.server.model.support.submitter.Anyone\");\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"noCreation\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate15(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \"com.turbodev\", \"io.onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"com/turbodev\", \"io/onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev.com\", \"onedev.io\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev\", \"onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"TurboDev\", \"OneDev\");\r\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrateMergeStrategy16(Element mergeStrategyElement) {\r\n\t\tif (mergeStrategyElement != null) {\r\n\t\t\tmergeStrategyElement.setName(\"mergeStrategy\");\r\n\t\t\tswitch (mergeStrategyElement.getText()) {\r\n\t\t\tcase \"ALWAYS_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MERGE_IF_NECESSARY\":\r\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT_IF_NECESSARY\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SQUASH_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"SQUASH_SOURCE_BRANCH_COMMITS\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"REBASE_SOURCE_BRANCH_COMMITS\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*\r\n\t * Migrate from 1.0 to 2.0\r\n\t */\r\n\tprivate void migrate16(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> codeCommentReplyCounts = new HashMap<>();\r\n\t\tMap<String, String> userNames = new HashMap<>();\r\n\t\tMap<String, Set<String>> requestCodeComments = new HashMap<>();\r\n\t\tMap<String, Integer> requestCommentCounts = new HashMap<>();\r\n\t\tSet<String> openRequests = new HashSet<>();\r\n\t\tMap<String, String> reviewRequirements = new HashMap<>(); \r\n\t\t \r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\r\n\t\t\t\t\tif (fullNameElement != null)\r\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), fullNameElement.getText());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), element.elementText(\"name\"));\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\r\n\t\t\t\t\tif (replyCount == null)\r\n\t\t\t\t\t\treplyCount = 0;\r\n\t\t\t\t\treplyCount++;\r\n\t\t\t\t\tcodeCommentReplyCounts.put(commentId, replyCount);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tSet<String> codeComments = requestCodeComments.get(requestId);\r\n\t\t\t\t\tif (codeComments == null) {\r\n\t\t\t\t\t\tcodeComments = new HashSet<>();\r\n\t\t\t\t\t\trequestCodeComments.put(requestId, codeComments);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcodeComments.add(commentId);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(commentId);\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\trequestCommentCounts.put(commentId, commentCount);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"closeInfo\") == null) {\r\n\t\t\t\t\t\topenRequests.add(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) \r\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treviewRequirements.put(projectId, builder.toString());\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, Set<String>> entry: requestCodeComments.entrySet()) {\r\n\t\t\tInteger commentCount = requestCommentCounts.get(entry.getKey());\r\n\t\t\tif (commentCount == null)\r\n\t\t\t\tcommentCount = 0;\r\n\t\t\tfor (String commentId: entry.getValue()) {\r\n\t\t\t\tcommentCount++;\r\n\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\r\n\t\t\t\tif (replyCount != null)\r\n\t\t\t\t\tcommentCount += replyCount;\r\n\t\t\t}\r\n\t\t\trequestCommentCounts.put(entry.getKey(), commentCount);\r\n\t\t}\r\n\t\t\r\n\t\tVersionedXmlDoc requestReviewsDOM = new VersionedXmlDoc();\r\n\t\tElement requestReviewListElement = requestReviewsDOM.addElement(\"list\");\r\n\t\t\r\n\t\tVersionedXmlDoc configurationsDOM = new VersionedXmlDoc();\r\n\t\tElement configurationListElement = configurationsDOM.addElement(\"list\");\r\n\t\tMap<String, Map<String, Long>> projectConfigurations = new HashMap<>();\r\n\t\tlong configurationCount = 0;\r\n\t\t\r\n\t\tint reviewCount = 0;\r\n\t\t\r\n\t\tVersionedXmlDoc requestBuildsDOM = new VersionedXmlDoc();\r\n\t\tElement requestBuildListElement = requestBuildsDOM.addElement(\"list\");\r\n\t\tint requestBuildCount = 0;\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"BranchWatches.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReferences.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Reviews.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\") || file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"ADMIN\", \"ADMINISTRATION\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"WRITE\", \"CODE_WRITE\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"READ\", \"CODE_READ\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (replyCount == null)\r\n\t\t\t\t\t\treplyCount = 0;\r\n\t\t\t\t\telement.addElement(\"replyCount\").setText(String.valueOf(replyCount));\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\tdateElement.setName(\"createDate\");\r\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\r\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\r\n\t\t\t\t\tif (lastEventElement != null) {\r\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\r\n\t\t\t\t\t\tlastEventElement.detach();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateDateElement.setText(dateElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrateMergeStrategy16(element.element(\"mergeStrategy\"));\r\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\r\n\t\t\t\t\tif (lastMergePreviewElement != null) {\r\n\t\t\t\t\t\tmigrateMergeStrategy16(lastMergePreviewElement.element(\"mergeStrategy\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.addElement(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement lastCodeCommentEventDateElement = element.element(\"lastCodeCommentEventDate\");\r\n\t\t\t\t\tif (lastCodeCommentEventDateElement != null)\r\n\t\t\t\t\t\tlastCodeCommentEventDateElement.setName(\"lastCodeCommentActivityDate\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement closedByElement = closeInfoElement.element(\"closedBy\");\r\n\t\t\t\t\t\tif (closedByElement != null)\r\n\t\t\t\t\t\t\tclosedByElement.setName(\"user\");\r\n\t\t\t\t\t\tElement closedByNameElement = closeInfoElement.element(\"closedByName\");\r\n\t\t\t\t\t\tif (closedByNameElement != null)\r\n\t\t\t\t\t\t\tclosedByNameElement.setName(\"userName\");\r\n\t\t\t\t\t\tcloseInfoElement.element(\"closeDate\").setName(\"date\");\r\n\t\t\t\t\t\tcloseInfoElement.element(\"closeStatus\").setName(\"status\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\r\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\r\n\t\t\t\t\tif (lastEventElement != null) {\r\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\r\n\t\t\t\t\t\tlastEventElement.detach();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateDateElement.setText(submitDateElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.security.authenticator.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.authenticator.\");\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.Setting\");\r\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\tif (settingElement != null) {\r\n\t\t\t\t\t\tsettingElement.setName(\"value\");\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"AUTHENTICATOR\")) {\r\n\t\t\t\t\t\t\tElement authenticatorElement = settingElement.elementIterator().next();\r\n\t\t\t\t\t\t\tsettingElement.addAttribute(\"class\", authenticatorElement.getName());\r\n\t\t\t\t\t\t\tfor (Element fieldElement: authenticatorElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (!fieldElement.getName().equals(\"defaultGroupNames\")) {\r\n\t\t\t\t\t\t\t\t\tfieldElement.detach();\r\n\t\t\t\t\t\t\t\t\tsettingElement.add(fieldElement);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tauthenticatorElement.detach();\r\n\t\t\t\t\t\t\tsettingElement.addElement(\"canCreateProjects\").setText(\"true\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(file.getParentFile(), file.getName().replace(\"Config\", \"Setting\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestWatchs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement reasonElement = element.element(\"reason\");\r\n\t\t\t\t\tif (reasonElement != null)\r\n\t\t\t\t\t\treasonElement.detach();\r\n\t\t\t\t\tElement ignoreElement = element.element(\"ignore\");\r\n\t\t\t\t\tignoreElement.setName(\"watching\");\r\n\t\t\t\t\tignoreElement.setText(String.valueOf(!Boolean.parseBoolean(ignoreElement.getTextTrim())));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString project = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tElement publicReadElement = element.element(\"publicRead\");\r\n\t\t\t\t\tif (publicReadElement.getTextTrim().equals(\"true\")) \r\n\t\t\t\t\t\telement.addElement(\"defaultPrivilege\").setText(\"CODE_READ\");\r\n\t\t\t\t\tpublicReadElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"verifyMerges\").setName(\"buildMerges\");\r\n\t\t\t\t\t\tElement verificationsElement = branchProtectionElement.element(\"verifications\");\r\n\t\t\t\t\t\tverificationsElement.setName(\"configurations\");\r\n\t\t\t\t\t\tfor (Element verificationElement: verificationsElement.elements()) {\r\n\t\t\t\t\t\t\tString verification = verificationElement.getText();\r\n\t\t\t\t\t\t\tMap<String, Long> configurations = projectConfigurations.get(project);\r\n\t\t\t\t\t\t\tif (configurations == null) {\r\n\t\t\t\t\t\t\t\tconfigurations = new HashMap<>();\r\n\t\t\t\t\t\t\t\tprojectConfigurations.put(project, configurations);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tLong configurationId = configurations.get(verification);\r\n\t\t\t\t\t\t\tif (configurationId == null) {\r\n\t\t\t\t\t\t\t\tconfigurationId = ++configurationCount;\r\n\t\t\t\t\t\t\t\tconfigurations.put(verification, configurationId);\r\n\t\t\t\t\t\t\t\tElement configurationElement = configurationListElement.addElement(\"io.onedev.server.model.Configuration\");\r\n\t\t\t\t\t\t\t\tconfigurationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"id\").setText(String.valueOf(configurationId));\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"project\").setText(project);\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"name\").setText(verification);\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"buildCleanupRule\").addAttribute(\"class\", \"io.onedev.server.model.support.configuration.DoNotCleanup\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (String request: openRequests) {\r\n\t\t\t\t\t\t\t\tElement requestBuildElement = requestBuildListElement.addElement(\"io.onedev.server.model.PullRequestBuild\");\r\n\t\t\t\t\t\t\t\trequestBuildElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"id\").setText(String.valueOf(++requestBuildCount));\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"request\").setText(request);\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"configuration\").setText(String.valueOf(configurationId));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \r\n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\r\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = tagProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \r\n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\r\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequestReviewsDOM.writeToFile(new File(dataDir, \"PullRequestReviews.xml\"), false);\r\n\t\tconfigurationsDOM.writeToFile(new File(dataDir, \"Configurations.xml\"), false);\r\n\t\trequestBuildsDOM.writeToFile(new File(dataDir, \"PullRequestBuilds.xml\"), false);\r\n\t}\r\n\t\r\n\tprivate void migrate17(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issue\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueWorkflowElement = element.element(\"issueWorkflow\");\r\n\t\t\t\t\tif (issueWorkflowElement != null)\r\n\t\t\t\t\t\tissueWorkflowElement.detach();\r\n\t\t\t\t\tElement savedIssueQueriesElement = element.element(\"savedIssueQueries\");\r\n\t\t\t\t\tif (savedIssueQueriesElement != null)\r\n\t\t\t\t\t\tsavedIssueQueriesElement.detach();\r\n\t\t\t\t\tElement issueListFieldsElement = element.element(\"issueListFields\");\r\n\t\t\t\t\tif (issueListFieldsElement != null)\r\n\t\t\t\t\t\tissueListFieldsElement.detach();\r\n\t\t\t\t\tElement issueBoardsElement = element.element(\"issueBoards\");\r\n\t\t\t\t\tif (issueBoardsElement != null)\r\n\t\t\t\t\t\tissueBoardsElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate18(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate19(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commitMessageTransformsElement = element.addElement(\"commitMessageTransforms\");\r\n\t\t\t\t\tElement commitMessageTransformSettingElement = element.element(\"commitMessageTransformSetting\");\r\n\t\t\t\t\tif (commitMessageTransformSettingElement != null) {\r\n\t\t\t\t\t\tcommitMessageTransformSettingElement.detach();\r\n\t\t\t\t\t\tcommitMessageTransformSettingElement.setName(\"io.onedev.server.model.support.CommitMessageTransform\");\r\n\t\t\t\t\t\tcommitMessageTransformsElement.add(commitMessageTransformSettingElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate20(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tfieldElement.addElement(\"canBeChangedBy\").addAttribute(\"class\", \"io.onedev.server.model.support.usermatcher.Anyone\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate21(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"branch\").setName(\"branches\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\tfileProtectionElement.element(\"path\").setName(\"paths\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.element(\"tag\").setName(\"tags\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\")) {\r\n\t\t\t\t\t\telement.element(\"value\").addAttribute(\"class\", \"io.onedev.commons.utils.license.LicenseDetail\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate22(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueFieldUnarys.xml\")) {\r\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"IssueFieldUnarys\", \"IssueFieldEntitys\"));\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(renamedFile);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueFieldEntity\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate23(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Build2s.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement runInstanceIdElement = element.element(\"runInstanceId\");\r\n\t\t\t\t\tif (runInstanceIdElement != null)\r\n\t\t\t\t\t\trunInstanceIdElement.detach();\r\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\r\n\t\t\t\t\tif (errorMessageElement != null)\r\n\t\t\t\t\t\terrorMessageElement.setName(\"statusMessage\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t\tif (element.element(\"issueSetting\") == null)\r\n\t\t\t\t\t\telement.addElement(\"issueSetting\");\r\n\t\t\t\t\tif (element.element(\"savedCommitQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedCommitQueries\");\r\n\t\t\t\t\tif (element.element(\"savedPullRequestQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedPullRequestQueries\");\r\n\t\t\t\t\tif (element.element(\"savedCodeCommentQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedCodeCommentQueries\");\r\n\t\t\t\t\tif (element.element(\"savedBuildQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedBuildQueries\");\r\n\t\t\t\t\tif (element.element(\"webHooks\") == null) \r\n\t\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate String escapeValue24(String value) {\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tfor (int i=0; i<value.length(); i++) {\r\n\t\t\tchar ch = value.charAt(i);\r\n\t\t\tif (\"\\\\()\".indexOf(ch) != -1)\r\n\t\t\t\tbuilder.append(\"\\\\\");\r\n\t\t\tbuilder.append(ch);\r\n\t\t}\r\n\t\treturn builder.toString();\r\n\t}\r\n\t\r\n\tprivate void migrateUserMatcher24(Element userMatcherElement) {\r\n\t\tString userMatcher;\r\n\t\tString userMatcherClass = userMatcherElement.attributeValue(\"class\");\r\n\t\tif (userMatcherClass.contains(\"Anyone\")) {\r\n\t\t\tuserMatcher = \"anyone\";\r\n\t\t} else if (userMatcherClass.contains(\"CodeWriters\")) {\r\n\t\t\tuserMatcher = \"code writers\";\r\n\t\t} else if (userMatcherClass.contains(\"CodeReaders\")) {\r\n\t\t\tuserMatcher = \"code readers\";\r\n\t\t} else if (userMatcherClass.contains(\"IssueReaders\")) {\r\n\t\t\tuserMatcher = \"issue readers\";\r\n\t\t} else if (userMatcherClass.contains(\"ProjectAdministrators\")) {\r\n\t\t\tuserMatcher = \"project administrators\";\r\n\t\t} else if (userMatcherClass.contains(\"SpecifiedUser\")) {\r\n\t\t\tuserMatcher = \"user(\" + escapeValue24(userMatcherElement.elementText(\"userName\").trim()) + \")\";\r\n\t\t} else {\r\n\t\t\tuserMatcher = \"group(\" + escapeValue24(userMatcherElement.elementText(\"groupName\").trim()) + \")\";\r\n\t\t}\r\n\t\tuserMatcherElement.clearContent();\r\n\t\tuserMatcherElement.remove(userMatcherElement.attribute(\"class\"));\r\n\t\tuserMatcherElement.setText(userMatcher);\r\n\t}\r\n\t\r\n\tprivate void migrateTransitionSpecsElement24(Element transitionSpecsElement) {\r\n\t\tfor (Element transitionElement: transitionSpecsElement.elements()) {\r\n\t\t\tElement triggerElement = transitionElement.element(\"trigger\");\r\n\t\t\tif (triggerElement.attributeValue(\"class\").contains(\"PressButtonTrigger\"))\r\n\t\t\t\tmigrateUserMatcher24(triggerElement.element(\"authorized\"));\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate24(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tmigrateTransitionSpecsElement24(valueElement.element(\"defaultTransitionSpecs\"));\r\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements())\r\n\t\t\t\t\t\t\t\tmigrateUserMatcher24(fieldElement.element(\"canBeChangedBy\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\r\n\t\t\t\t\tElement transitionsElement = issueSettingElement.element(\"transitionSpecs\");\r\n\t\t\t\t\tif (transitionsElement != null) \r\n\t\t\t\t\t\tmigrateTransitionSpecsElement24(transitionsElement);\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\r\n\t\t\t\t\t\tmigrateUserMatcher24(branchProtectionElement.element(\"submitter\"));\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\tmigrateUserMatcher24(tagProtectionElement.element(\"submitter\"));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// from 2.0 to 3.0\r\n\tprivate void migrate25(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\".support.setting.\", \".support.administration.\");\r\n\t\t\t\tcontent = content.replace(\".support.authenticator.\", \".support.administration.authenticator.\");\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"ISSUE\") || key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (key.equals(\"BACKUP\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement folderElement = valueElement.element(\"folder\");\r\n\t\t\t\t\t\t\tif (folderElement != null)\r\n\t\t\t\t\t\t\t\tfolderElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"SECURITY\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.element(\"enableAnonymousAccess\").setText(\"false\");\r\n\t\t\t\t\t} else if (key.equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement storagePathElement = valueElement.element(\"storagePath\");\r\n\t\t\t\t\t\t\tString storagePath = storagePathElement.getText();\r\n\t\t\t\t\t\t\tstoragePathElement.detach();\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storagePath, \"projects\");\r\n\t\t\t\t\t\t\t\tif (projectsDir.exists()) {\r\n\t\t\t\t\t\t\t\t\tPath target = projectsDir.toPath();\r\n\t\t\t\t\t\t\t\t    File linkDir = new File(Bootstrap.installDir, \"site/projects\");\r\n\t\t\t\t\t\t\t\t    if (linkDir.exists())\r\n\t\t\t\t\t\t\t\t    \tthrow new ExplicitException(\"Directory already exists: \" + linkDir);\r\n\t\t\t\t\t\t\t\t    Files.createSymbolicLink(linkDir.toPath(), target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"AUTHENTICATOR\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement defaultGroupNamesElement = valueElement.element(\"defaultGroupNames\");\r\n\t\t\t\t\t\t\tif (defaultGroupNamesElement != null)\r\n\t\t\t\t\t\t\t\tdefaultGroupNamesElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"canCreateProjects\").setName(\"createProjects\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\r\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement privilegeElement = element.element(\"privilege\");\r\n\t\t\t\t\tString privilege = privilegeElement.getTextTrim();\r\n\t\t\t\t\tprivilegeElement.detach();\r\n\r\n\t\t\t\t\tString roleId;\r\n\t\t\t\t\tswitch (privilege) {\r\n\t\t\t\t\tcase \"ISSUE_READ\":\r\n\t\t\t\t\t\troleId = \"4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"CODE_READ\":\r\n\t\t\t\t\t\troleId = \"3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"CODE_WRITE\":\r\n\t\t\t\t\t\troleId = \"2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\troleId = \"1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"role\").setText(roleId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.element(\"numberStr\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement rangeElement = element.element(\"markPos\").element(\"range\");\r\n\t\t\t\t\trangeElement.element(\"beginLine\").setName(\"fromRow\");\r\n\t\t\t\t\trangeElement.element(\"endLine\").setName(\"toRow\");\r\n\t\t\t\t\trangeElement.element(\"beginChar\").setName(\"fromColumn\");\r\n\t\t\t\t\trangeElement.element(\"endChar\").setName(\"toColumn\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\"DO_NOT_MERGE\", \"CREATE_MERGE_COMMIT\");\r\n\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.element(\"numberStr\").detach();\r\n\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement defaultPrivilegeElement = element.element(\"defaultPrivilege\");\r\n\t\t\t\t\tif (defaultPrivilegeElement != null)\r\n\t\t\t\t\t\tdefaultPrivilegeElement.detach();\r\n\t\t\t\t\telement.addElement(\"owner\").setText(\"1\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tsubmitterElement.setName(\"user\");\r\n\t\t\t\t\t\tsubmitterElement.setText(\"anyone\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"configurations\").detach();\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"buildMerges\").detach();\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"jobNames\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements())\r\n\t\t\t\t\t\t\tfileProtectionElement.addElement(\"jobNames\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\ttagProtectionElement.element(\"submitter\").setName(\"user\");\r\n\t\t\t\t\telement.addElement(\"secrets\");\r\n\t\t\t\t\telement.element(\"commitMessageTransforms\").detach();\r\n\t\t\t\t\telement.element(\"webHooks\").detach();\r\n\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\t\telement.element(\"issueSetting\").detach();\r\n\t\t\t\t\telement.addElement(\"issueSetting\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.element(\"savedBuildQueries\").detach();\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildsToPreserve\").setText(\"all\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.element(\"savedCommitQueries\").detach();\r\n\t\t\t\t\telement.element(\"savedCodeCommentQueries\").detach();\r\n\t\t\t\t\telement.element(\"savedPullRequestQueries\").detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"pullRequestSetting\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"Configurations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"IssueQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestWatchs.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"IssueWatchs.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CommitQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestBuilds.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Builds.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Build2s.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildDependences.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildParams.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueFieldEntitys.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\"io.onedev.server.model.IssueFieldEntity\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.IssueField\");\r\n\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t\r\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\r\n\t\t\t\t\t\t\"IssueFieldEntitys.xml\", \"IssueFields.xml\"));\r\n\t\t\t\tFileUtils.writeFile(renamedFile, content, StandardCharsets.UTF_8.name());\r\n\t\t\t}\r\n\t\t}\r\n        try (InputStream is = getClass().getResourceAsStream(\"migrate25_roles.xml\")) {\r\n        \tPreconditions.checkNotNull(is);\r\n        \tFileUtils.writeFile(\r\n        \t\t\tnew File(dataDir, \"Roles.xml\"), \r\n        \t\t\tStringUtils.join(IOUtils.readLines(is, StandardCharsets.UTF_8.name()), \"\\n\"));\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate26(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement createdAtElement = element.element(\"createdAt\");\r\n\t\t\t\t\tcreatedAtElement.setName(\"createDate\");\r\n\t\t\t\t\telement.addElement(\"updateDate\").setText(createdAtElement.getText());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate27(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.element(\"buildsToPreserve\").detach();\r\n\t\t\t\t\tbuildSettingElement.addElement(\"preservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate28(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"secrets\").detach();\r\n\t\t\t\t\telement.element(\"buildSetting\").detach();\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate29(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"user\").setName(\"userMatch\");\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\ttagProtectionElement.element(\"user\").setName(\"userMatch\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate30(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) \r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate31(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement editableIssueFieldsElement = element.element(\"editableIssueFields\");\r\n\t\t\t\t\teditableIssueFieldsElement.detach();\r\n\t\t\t\t\telement.addElement(\"editableIssueFields\").addAttribute(\r\n\t\t\t\t\t\t\t\"class\", \"io.onedev.server.model.support.role.AllIssueFields\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate32(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"ISSUE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) { \r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate33(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noForcedPush\").setName(\"preventForcedPush\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noUpdate\").setName(\"preventUpdate\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate34(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tElement categoryElement = stateElement.element(\"category\");\r\n\t\t\t\t\t\t\t\tstateElement.addElement(\"done\").setText(String.valueOf(categoryElement.getTextTrim().equals(\"CLOSED\")));\r\n\t\t\t\t\t\t\t\tcategoryElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"numOfOpenIssues\").setName(\"numOfIssuesTodo\");\r\n\t\t\t\t\telement.element(\"numOfClosedIssues\").setName(\"numOfIssuesDone\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate35(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement createDateElement = element.element(\"createDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement userElement = element.element(\"user\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (userElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(userElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"created\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", createDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(createDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (submitterElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (submitterElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement namedQueriesElement = buildSettingElement.element(\"namedQueries\");\r\n\t\t\t\t\tif (namedQueriesElement != null) {\r\n\t\t\t\t\t\tfor (Element queryElement: namedQueriesElement.elements())\r\n\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\r\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\r\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\r\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\r\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\r\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\tElement buildBranchesElement = tagProtectionElement.element(\"buildBranches\");\r\n\t\t\t\t\t\tif (buildBranchesElement != null)\r\n\t\t\t\t\t\t\tbuildBranchesElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element queryElement: element.element(\"userBuildQueries\").elements())\r\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\r\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\r\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\r\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\r\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\r\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\r\n\t\t\t\t\tElement passwordElement = element.element(\"password\");\r\n\t\t\t\t\tif (passwordElement == null)\r\n\t\t\t\t\t\telement.addElement(\"password\").setText(\"external_managed\");\r\n\t\t\t\t\telse if (StringUtils.isBlank(passwordElement.getText()))\r\n\t\t\t\t\t\tpasswordElement.setText(\"external_managed\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element queryElement: element.element(\"userQueries\").elements()) \r\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tstateElement.element(\"done\").detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"BUILD\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element queryElement: valueElement.element(\"namedQueries\").elements()) \r\n\t\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"numOfIssuesTodo\").detach();\r\n\t\t\t\t\telement.element(\"numOfIssuesDone\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\t// Database schema changed\r\n\tprivate void migrate36(File dataDir, Stack<Integer> versions) {\t\r\n\t}\r\n\t\r\n\tprivate void migrate37(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate Long getForkedRoot38(Map<Long, Long> forkedFroms, Long projectId) {\r\n\t\tLong forkedFrom = forkedFroms.get(projectId);\r\n\t\tif (forkedFrom != null)\r\n\t\t\treturn getForkedRoot38(forkedFroms, forkedFrom);\r\n\t\telse\r\n\t\t\treturn projectId;\r\n\t}\r\n\t\r\n\t// from 3.0.10 to 3.0.11\r\n\tprivate void migrate38(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<Long, Long> forkedFroms = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().contains(\".xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.NamedBuildQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//issueQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.BuildPreservation\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tElement conditionElement = element.element(\"condition\");\r\n\t\t\t\t\t\tif (conditionElement.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\tconditionElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//listFields\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tElement stateElement = element.addElement(\"string\");\r\n\t\t\t\t\t\tstateElement.setText(\"State\");\r\n\t\t\t\t\t\tstateElement.detach();\r\n\t\t\t\t\t\telement.elements().add(0, stateElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t\tif (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\r\n\t\t\t\t\tif (className.contains(\"IssueCommittedData\") || className.contains(\"IssuePullRequest\")) \r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tElement forkedFromElement = element.element(\"forkedFrom\");\r\n\t\t\t\t\tif (forkedFromElement != null)\r\n\t\t\t\t\t\tforkedFroms.put(projectId, Long.valueOf(forkedFromElement.getTextTrim()));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforkedFroms.put(projectId, null);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"enableStartTLS\").setText(\"true\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"enableSSL\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tMap<Long, Long> forkedRoots = new HashMap<>();\r\n\t\tfor (Long projectId: forkedFroms.keySet()) {\r\n\t\t\tforkedRoots.put(projectId, getForkedRoot38(forkedFroms, projectId));\r\n\t\t}\r\n\t\t\r\n\t\tMap<Long, Set<Long>> issueNumbers = new HashMap<>();\r\n\t\tMap<Long, Set<Long>> buildNumbers = new HashMap<>();\r\n\t\tMap<Long, Set<Long>> pullRequestNumbers = new HashMap<>();\r\n\t\t\r\n\t\tfor (Long forkedRoot: forkedRoots.values()) {\r\n\t\t\tissueNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t\tbuildNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t\tpullRequestNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong issueNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tissueNumbers.get(projectId).add(issueNumber); \r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong buildNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tbuildNumbers.get(projectId).add(buildNumber);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong requestNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tpullRequestNumbers.get(projectId).add(requestNumber);\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong issueNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> issueNumbersOfForkedRoot = issueNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (issueNumbersOfForkedRoot.contains(issueNumber)) {\r\n\t\t\t\t\t\t\tissueNumber = Collections.max(issueNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(issueNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tissueNumbersOfForkedRoot.add(issueNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong buildNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> buildNumbersOfForkedRoot = buildNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (buildNumbersOfForkedRoot.contains(buildNumber)) {\r\n\t\t\t\t\t\t\tbuildNumber = Collections.max(buildNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(buildNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tbuildNumbersOfForkedRoot.add(buildNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong requestNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> requestNumbersOfForkedRoot = pullRequestNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (requestNumbersOfForkedRoot.contains(requestNumber)) {\r\n\t\t\t\t\t\t\trequestNumber = Collections.max(requestNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(requestNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\trequestNumbersOfForkedRoot.add(requestNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\t// from 3.0.11 to 3.0.12\r\n\tprivate void migrate39(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\r\n\t// from 3.0.x to 3.1.x\r\n\tprivate void migrate40(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().contains(\".xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.issue.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.util.inputspec.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlong maxRoleId = 0;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tlong roleId = Long.parseLong(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (roleId > maxRoleId) \r\n\t\t\t\t\t\tmaxRoleId = roleId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tboolean hasOwnerRole = false;\r\n\t\tString idOfRolePreviouslyUsingOwnerId = null;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement idElement = element.element(\"id\");\r\n\t\t\t\t\tif (idElement.getText().trim().equals(\"1\")) {\r\n\t\t\t\t\t\tif (element.elementText(\"manageProject\").equals(\"true\")) {\r\n\t\t\t\t\t\t\telement.element(\"name\").setText(\"Owner\");\r\n\t\t\t\t\t\t\thasOwnerRole = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tidOfRolePreviouslyUsingOwnerId = String.valueOf(maxRoleId+1);\r\n\t\t\t\t\t\t\tidElement.setText(idOfRolePreviouslyUsingOwnerId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!hasOwnerRole) {\r\n\t\t\tFile dataFile = new File(dataDir, \"Roles.xml\");\r\n\t\t\tVersionedXmlDoc dom;\r\n\t\t\tif (dataFile.exists()) { \r\n\t\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\r\n\t\t\t} else {\r\n\t\t\t\tdom = new VersionedXmlDoc();\r\n\t\t\t\tdom.addElement(\"list\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tElement ownerRoleElement = dom.getRootElement().addElement(\"io.onedev.server.model.Role\");\r\n\t\t\townerRoleElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\townerRoleElement.addElement(\"id\").setText(\"1\");\r\n\t\t\townerRoleElement.addElement(\"name\").setText(\"Owner\");\r\n\t\t\townerRoleElement.addElement(\"manageProject\").setText(\"true\");\r\n\t\t\townerRoleElement.addElement(\"managePullRequests\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"manageCodeComments\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"codePrivilege\").setText(\"NONE\");\r\n\t\t\townerRoleElement.addElement(\"manageIssues\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"scheduleIssues\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"editableIssueFields\").addAttribute(\"class\", \r\n\t\t\t\t\t\"io.onedev.server.model.support.role.AllIssueFields\");\r\n\t\t\townerRoleElement.addElement(\"manageBuilds\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"jobPrivileges\");\r\n\t\t\tdom.writeToFile(dataFile, false);\r\n\t\t}\r\n\t\t\r\n\t\tif (idOfRolePreviouslyUsingOwnerId != null) {\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"UserAuthorizations.xml\") \r\n\t\t\t\t\t\t|| file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tElement roleElement = element.element(\"role\");\r\n\t\t\t\t\t\tif (roleElement.getText().trim().equals(\"1\"))\r\n\t\t\t\t\t\t\troleElement.setText(idOfRolePreviouslyUsingOwnerId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tMap<String, Element> userBuildSettingElements = new HashMap<>();\r\n\t\tMap<String, Element> userWebHooksElements = new HashMap<>();\r\n\t\tMap<String, String> projectOwners = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultTransitionSpecs\").setName(\"transitionSpecs\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultPromptFieldsUponIssueOpen\").setName(\"promptFieldsUponIssueOpen\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultBoardSpecs\").setName(\"boardSpecs\");\r\n\t\t\t\t\t\t\tfor (Node node: valueElement.selectNodes(\"//uuid\"))\r\n\t\t\t\t\t\t\t\tnode.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tprojectOwners.put(element.elementText(\"id\").trim(), element.elementText(\"owner\").trim());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement transitionSpecsElement = element.element(\"transitionSpecs\");\r\n\t\t\t\t\tif (transitionSpecsElement != null)\r\n\t\t\t\t\t\ttransitionSpecsElement.detach();\r\n\t\t\t\t\tElement promptFieldsUponIssueOpenElement = element.element(\"promptFieldsUponIssueOpen\");\r\n\t\t\t\t\tif (promptFieldsUponIssueOpenElement != null)\r\n\t\t\t\t\t\tpromptFieldsUponIssueOpenElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.detach();\r\n\t\t\t\t\tuserBuildSettingElements.put(id, buildSettingElement);\r\n\t\t\t\t\tElement webHooksElement = element.element(\"webHooks\");\r\n\t\t\t\t\twebHooksElement.detach();\r\n\t\t\t\t\tuserWebHooksElements.put(id, webHooksElement);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlong maxUserAuthorizationId = 0;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\r\n\t\t\t\t\townerElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tString ownerId = ownerElement.getText().trim();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element webHookElement: userWebHooksElements.get(ownerId).elements())\r\n\t\t\t\t\t\telement.element(\"webHooks\").add(webHookElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement userBuildSettingElement = userBuildSettingElements.get(ownerId);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element buildPreservationElement: userBuildSettingElement.element(\"buildPreservations\").elements()) \r\n\t\t\t\t\t\tbuildSettingElement.element(\"buildPreservations\").add(buildPreservationElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element actionAuthorizationElement: userBuildSettingElement.element(\"actionAuthorizations\").elements()) \r\n\t\t\t\t\t\tbuildSettingElement.element(\"actionAuthorizations\").add(actionAuthorizationElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement jobSecretsElement = buildSettingElement.element(\"jobSecrets\");\r\n\t\t\t\t\tSet<String> existingJobSecretNames = new HashSet<>();\r\n\t\t\t\t\tfor (Element jobSecretElement: jobSecretsElement.elements()) \r\n\t\t\t\t\t\texistingJobSecretNames.add(jobSecretElement.elementText(\"name\").trim());\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element jobSecretElement: userBuildSettingElement.element(\"jobSecrets\").elements()) {\r\n\t\t\t\t\t\tif (!existingJobSecretNames.contains(jobSecretElement.elementText(\"name\").trim())) \r\n\t\t\t\t\t\t\tjobSecretsElement.add(jobSecretElement.createCopy());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tlong userAuthorizationId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (userAuthorizationId > maxUserAuthorizationId)\r\n\t\t\t\t\t\tmaxUserAuthorizationId = userAuthorizationId;\r\n\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\r\n\t\t\t\t\tString userId = element.elementText(\"user\").trim();\r\n\t\t\t\t\tElement roleElement = element.element(\"role\");\r\n\t\t\t\t\tif (userId.equals(projectOwners.get(projectId))) {\r\n\t\t\t\t\t\troleElement.setText(\"1\");\r\n\t\t\t\t\t\tprojectOwners.remove(projectId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tFile dataFile = new File(dataDir, \"UserAuthorizations.xml\");\r\n\t\tVersionedXmlDoc dom;\r\n\t\tif (dataFile.exists()) { \r\n\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\r\n\t\t} else {\r\n\t\t\tdom = new VersionedXmlDoc();\r\n\t\t\tdom.addElement(\"list\");\r\n\t\t}\r\n\t\tfor (Map.Entry<String, String> entry: projectOwners.entrySet()) {\r\n\t\t\tElement userAuthorizationElement = dom.getRootElement().addElement(\"io.onedev.server.model.UserAuthorization\");\r\n\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++maxUserAuthorizationId));\r\n\t\t\tuserAuthorizationElement.addElement(\"project\").setText(entry.getKey());\r\n\t\t\tuserAuthorizationElement.addElement(\"user\").setText(entry.getValue());\r\n\t\t\tuserAuthorizationElement.addElement(\"role\").setText(\"1\");\r\n\t\t}\r\n\t\tdom.writeToFile(dataFile, false);\r\n\t}\r\n\t\r\n\tprivate void migrate41(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.addElement(\"sendAsHtml\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\t// Migrate to 3.2.0\r\n\tprivate void migrate42(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> commentRequests = new HashMap<>();\r\n\t\tMap<String, String> requestTargetHeads = new HashMap<>();\r\n\t\tMap<String, String> requestBaseCommits = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tcommentRequests.put(element.elementTextTrim(\"comment\"), element.elementTextTrim(\"request\"));\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementTextTrim(\"id\");\r\n\t\t\t\t\trequestBaseCommits.put(id, element.elementTextTrim(\"baseCommitHash\"));\r\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\r\n\t\t\t\t\tif (lastMergePreviewElement != null) {\r\n\t\t\t\t\t\tElement targetHeadElement = lastMergePreviewElement.element(\"targetHead\");\r\n\t\t\t\t\t\trequestTargetHeads.put(id, targetHeadElement.getTextTrim());\r\n\t\t\t\t\t\ttargetHeadElement.setName(\"targetHeadCommitHash\");\r\n\t\t\t\t\t\tlastMergePreviewElement.element(\"requestHead\").setName(\"headCommitHash\");\r\n\t\t\t\t\t\tElement mergedElement = lastMergePreviewElement.element(\"merged\");\r\n\t\t\t\t\t\tif (mergedElement != null)\r\n\t\t\t\t\t\t\tmergedElement.setName(\"mergeCommitHash\");\r\n\t\t\t\t\t} \r\n\t\t\t\t\telement.element(\"headCommitHash\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.administration.authenticator.ldap.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.plugin.authenticator.ldap.\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequestTrigger\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequestTrigger\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequestTrigger\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement keyElement = element.element(\"key\");\r\n\t\t\t\t\tif (keyElement.getTextTrim().equals(\"SSH\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.element(\"privateKey\").setName(\"pemPrivateKey\");\r\n\t\t\t\t\t} else if (keyElement.getTextTrim().equals(\"JOB_SCRIPTS\")) {\r\n\t\t\t\t\t\tkeyElement.setText(\"GROOVY_SCRIPTS\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement actionAuthorizationsElement = buildSettingElement.element(\"actionAuthorizations\");\r\n\t\t\t\t\tif (actionAuthorizationsElement.elements().isEmpty()) {\r\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CreateTagAuthorization\");\r\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CloseMilestoneAuthorization\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"issueManagementEnabled\").setText(\"true\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\r\n\t\t\t\t\tcompareContextElement.element(\"compareCommit\").setName(\"compareCommitHash\");\r\n\t\t\t\t\tElement markPosElement = element.element(\"markPos\");\r\n\t\t\t\t\tmarkPosElement.setName(\"mark\");\r\n\t\t\t\t\tmarkPosElement.element(\"commit\").setName(\"commitHash\");\r\n\t\t\t\t\tString requestId = commentRequests.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (requestId != null)\r\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"submitReason\").setText(\"Unknown\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestBuilds.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"PullRequestBuild\", \"PullRequestVerification\");\r\n\t\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t\tString newFileName = StringUtils.replace(file.getName(), \"PullRequestBuild\", \"PullRequestVerification\");\r\n\t\t\t\t\tFileUtils.writeFile(new File(dataDir, newFileName), content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement excludeDateElement = element.element(\"excludeDate\");\r\n\t\t\t\t\tif (excludeDateElement != null)\r\n\t\t\t\t\t\texcludeDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(40));\r\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\telement.element(\"mergeBaseCommitHash\").detach();\r\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tString targetHead = requestTargetHeads.get(requestId);\r\n\t\t\t\t\tElement targetHeadCommitHashElement = element.addElement(\"targetHeadCommitHash\");\r\n\t\t\t\t\tif (targetHead != null) \r\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(targetHead);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(requestBaseCommits.get(requestId));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 3.2.2\r\n\tprivate void migrate43(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null)\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"issueTemplates\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate44_abbreviate(Element element, int maxLen) {\r\n\t\tif (element != null) {\r\n\t\t\tString text = StringUtils.abbreviate(element.getText().trim(), maxLen);\r\n\t\t\telement.setText(text);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.0.5\r\n\tprivate void migrate44(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> verifications = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequestVerifications.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tverifications.put(element.elementTextTrim(\"build\"), element.elementTextTrim(\"request\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"triggerId\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t\tString requestId = verifications.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (requestId != null)\r\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\r\n\t\t\t\t\tElement updatedRefElement = element.element(\"updatedRef\");\r\n\t\t\t\t\tif (updatedRefElement != null)\r\n\t\t\t\t\t\tupdatedRefElement.setName(\"refName\");\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"errorMessage\"), 12000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 15000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 15000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 12000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.0.6\r\n\tprivate void migrate45(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"triggerId\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// migrate to 4.0.7\r\n\tprivate void migrate46(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\r\n\t\t\t\t\t\t\t\tElement serviceAccountElement = executorElement.element(\"serviceAccount\");\r\n\t\t\t\t\t\t\t\tif (serviceAccountElement != null)\r\n\t\t\t\t\t\t\t\t\tserviceAccountElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// migrate to 4.0.8\r\n\tprivate void migrate47(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement refNameElement = element.element(\"refName\");\r\n\t\t\t\t\tif (refNameElement == null)\r\n\t\t\t\t\t\telement.addElement(\"refName\").setText(\"unknown\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// migrate to 4.1.0\r\n\tprivate void migrate48(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"\\\" is before \\\"\", \"\\\" is until \\\"\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"\\\" is after \\\"\", \"\\\" is since \\\"\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate49(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"defaultFixedIssueFilters\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.2.0\r\n\tprivate void migrate50(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate51(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement rangeElement = element.element(\"mark\").element(\"range\");\r\n\t\t\t\t\tElement tabWidthElement = rangeElement.element(\"tabWidth\");\r\n\t\t\t\t\tif (tabWidthElement == null)\r\n\t\t\t\t\t\ttabWidthElement = rangeElement.addElement(\"tabWidth\");\r\n\t\t\t\t\ttabWidthElement.setText(\"1\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t// Migrate to 4.2.1\r\n\tprivate void migrate52(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"revision\").setText(\"0\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Migrate to 4.3.0\r\n\tprivate void migrate53(File dataDir, Stack<Integer> versions) {\r\n\t\tString anonymousGroupName = null;\r\n\t\tMap<String, String> groupIds = new HashMap<>();\r\n\t\tList<Triple<String, String, String>> authorizations = new ArrayList<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldspec.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.spec.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldsupply.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.supply.\");\r\n\t\t\t\tcontent = StringUtils.replace(content,\r\n\t\t\t\t\t\t\"org.server.plugin.report.checkstyle.\",\r\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.checkstyle.\");\r\n\t\t\t\tcontent = StringUtils.replace(content,\r\n\t\t\t\t\t\t\"org.server.plugin.report.clover.\",\r\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.clover.\");\r\n\t\t\t\t\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t\t\r\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SECURITY\")) {\r\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\t\tElement anonymousGroupElement = valueElement.element(\"anonymousGroup\");\r\n\t\t\t\t\t\t\t\tif (anonymousGroupElement != null) {\r\n\t\t\t\t\t\t\t\t\tif (valueElement.elementTextTrim(\"enableAnonymousAccess\").equals(\"true\"))\r\n\t\t\t\t\t\t\t\t\t\tanonymousGroupName = anonymousGroupElement.getText().trim();\r\n\t\t\t\t\t\t\t\t\tanonymousGroupElement.detach();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\t\tgroupIds.put(element.elementText(\"name\").trim(), element.elementText(\"id\").trim());\r\n\t\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tString groupId = element.elementText(\"group\").trim();\r\n\t\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\r\n\t\t\t\t\t\tString roleId = element.elementText(\"role\").trim();\r\n\t\t\t\t\t\tauthorizations.add(Triple.of(groupId, projectId, roleId));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\r\n\t\tMap<String, String> defaultRoles = new HashMap<>();\r\n\t\t\r\n\t\tif (anonymousGroupName != null) {\r\n\t\t\tString anonymousGroupId = groupIds.get(anonymousGroupName);\r\n\t\t\tfor (Triple<String, String, String> authorization: authorizations) {\r\n\t\t\t\tif (authorization.getLeft().equals(anonymousGroupId)) \r\n\t\t\t\t\tdefaultRoles.put(authorization.getMiddle(), authorization.getRight());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString defaultRoleId = defaultRoles.get(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (defaultRoleId != null)\r\n\t\t\t\t\t\telement.addElement(\"defaultRole\").setText(defaultRoleId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate54(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"createProjects\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate55(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\r\n\t\t\t\t\tif (ownerElement != null)\r\n\t\t\t\t\t\townerElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate56(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"alternateEmails\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate57(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.numberinput.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.integerinput.\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (file.getName().startsWith(\"BuildParams.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tif (type.equals(\"Number\"))\r\n\t\t\t\t\t\telement.setText(\"Integer\");\r\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\r\n\t\t\t\t\t\telement.setText(\"Pull Request\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueFields.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tif (type.equals(\"Number\"))\r\n\t\t\t\t\t\telement.setText(\"Integer\");\r\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\r\n\t\t\t\t\t\telement.setText(\"Pull Request\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tif (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.NumberField\"))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.setName(\"io.onedev.server.model.support.issue.field.spec.IntegerField\");\r\n\t\t\t\t\t\t\t\telse if (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.TextField\"))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"multiline\").setText(\"false\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate58(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"contributedSettings\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate59(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.element(\"sendAsHtml\").detach();\r\n\t\t\t\t\t\t\tElement senderAddressElement = valueElement.element(\"senderAddress\");\r\n\t\t\t\t\t\t\tif (senderAddressElement != null) {\r\n\t\t\t\t\t\t\t\tsenderAddressElement.setName(\"emailAddress\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tString hostName;\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\thostName = InetAddress.getLocalHost().getHostName();\r\n\t\t\t\t\t\t\t\t} catch (UnknownHostException e) {\r\n\t\t\t\t\t\t\t\t\thostName = \"localhost\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"emailAddress\").setText(\"onedev@\" + hostName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate60(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().equals(\"io.onedev.server.plugin.docker.DockerExecutor\"))\r\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.docker.DockerExecutor\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void useUnknownUser(Element element, String field) {\r\n\t\tElement userNameElement = element.element(field + \"Name\");\r\n\t\tif (userNameElement != null) {\r\n\t\t\tuserNameElement.detach();\r\n\t\t\tif (element.element(field) == null)\r\n\t\t\t\telement.addElement(field).setText(\"-2\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate61(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t\tuseUnknownUser(element, \"canceller\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"IssueDescriptionChangeData\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"PullRequestDescriptionChangeData\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tif (element.elementTextTrim(\"id\").equals(\"-1\"))\r\n\t\t\t\t\t\telement.element(\"email\").setText(\"system email\");\r\n\t\t\t\t}\r\n\t\t\t\tif (file.getName().equals(\"Users.xml\")) {\r\n\t\t\t\t\tElement element = dom.getRootElement().addElement(\"io.onedev.server.model.User\");\r\n\t\t\t\t\telement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\telement.addElement(\"id\").setText(\"-2\");\r\n\t\t\t\t\telement.addElement(\"name\").setText(\"Unknown\");\r\n\t\t\t\t\telement.addElement(\"password\").setText(\"no password\");\r\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t\telement.addElement(\"email\").setText(\"unknown email\");\r\n\t\t\t\t\telement.addElement(\"alternateEmails\");\r\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\r\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tList<Element> oldSenderAuthorizationElements = null;\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tlong maxId = 1L;\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement receiveMailSetting = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSetting != null) {\r\n\t\t\t\t\t\t\t\tElement senderAuthorizationsElement = receiveMailSetting.element(\"senderAuthorizations\");\r\n\t\t\t\t\t\t\t\toldSenderAuthorizationElements = senderAuthorizationsElement.elements();\r\n\t\t\t\t\t\t\t\tsenderAuthorizationsElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlong id = Long.valueOf(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (id > maxId)\r\n\t\t\t\t\t\tmaxId = id;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (oldSenderAuthorizationElements != null && !oldSenderAuthorizationElements.isEmpty()) {\r\n\t\t\t\t\tElement serviceDeskSettingElement = dom.getRootElement().addElement(\"io.onedev.server.model.Setting\");\r\n\t\t\t\t\tserviceDeskSettingElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"id\").setText(String.valueOf(maxId+1));\r\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"key\").setText(\"SERVICE_DESK_SETTING\");\r\n\t\t\t\t\tElement valueElement = serviceDeskSettingElement.addElement(\"value\");\r\n\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.ServiceDeskSetting\");\r\n\t\t\t\t\tElement senderAuthorizationsElement = valueElement.addElement(\"senderAuthorizations\");\r\n\t\t\t\t\tElement projectDesignationsElement = valueElement.addElement(\"projectDesignations\");\r\n\t\t\t\t\tElement issueCreationSettingsElement = valueElement.addElement(\"issueCreationSettings\");\r\n\t\t\t\t\tfor (Element oldSenderAuthorizationElement: oldSenderAuthorizationElements) {\r\n\t\t\t\t\t\tElement senderAuthorizationElement = senderAuthorizationsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.SenderAuthorization\");\r\n\t\t\t\t\t\tElement projectDesignationElement = projectDesignationsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.ProjectDesignation\");\r\n\t\t\t\t\t\tElement issueCreationSettingElement = issueCreationSettingsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.IssueCreationSetting\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement senderEmailsElement = oldSenderAuthorizationElement.element(\"senderEmails\");\r\n\t\t\t\t\t\tif (senderEmailsElement != null) {\r\n\t\t\t\t\t\t\tString senderEmails = senderEmailsElement.getText().trim();\r\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t\tprojectDesignationElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement authorizedProjectsElement = oldSenderAuthorizationElement.element(\"authorizedProjects\");\r\n\t\t\t\t\t\tif (authorizedProjectsElement != null) {\r\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedProjects\")\r\n\t\t\t\t\t\t\t\t\t.setText(authorizedProjectsElement.getText().trim());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedRoleName\")\r\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"authorizedRoleName\").trim());\r\n\t\t\t\t\t\tprojectDesignationElement.addElement(\"project\")\r\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"defaultProject\").trim());\r\n\t\t\t\t\t\tElement issueFieldsElement = oldSenderAuthorizationElement.element(\"issueFields\");\r\n\t\t\t\t\t\tissueFieldsElement.detach();\r\n\t\t\t\t\t\tissueCreationSettingElement.add(issueFieldsElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate62(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\r\n\t\t\t\t\t\t\tint cpu = hardware.getProcessor().getLogicalProcessorCount()*1000;\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(String.valueOf(cpu));\r\n\t\t\t\t\t\t\tint memory = (int) (hardware.getMemory().getTotal()/1024/1024);\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(String.valueOf(memory));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) {\r\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor\");\r\n\t\t\t\t\t\t\t\t\texecutorElement.element(\"capacity\").detach();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement userProjectQueriesElement = element.element(\"userProjectQueries\");\r\n\t\t\t\t\tif (userProjectQueriesElement != null)\r\n\t\t\t\t\t\tuserProjectQueriesElement.setName(\"projectQueries\");\r\n\t\t\t\t\tElement userIssueQueriesElement = element.element(\"userIssueQueries\");\r\n\t\t\t\t\tif (userIssueQueriesElement != null)\r\n\t\t\t\t\t\tuserIssueQueriesElement.setName(\"issueQueries\");\r\n\t\t\t\t\tElement userBuildQueriesElement = element.element(\"userBuildQueries\");\r\n\t\t\t\t\tif (userBuildQueriesElement != null)\r\n\t\t\t\t\t\tuserBuildQueriesElement.setName(\"buildQueries\");\r\n\t\t\t\t\tElement userPullRequestQueriesElement = element.element(\"userPullRequestQueries\");\r\n\t\t\t\t\tif (userPullRequestQueriesElement != null)\r\n\t\t\t\t\t\tuserPullRequestQueriesElement.setName(\"pullRequestQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement issueQueryWatchesElement = element.element(\"issueQueryWatches\");\r\n\t\t\t\t\tfor (Element issueQueryWatchElement: issueQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = issueQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userIssueQueryWatchesElement = element.element(\"userIssueQueryWatches\");\r\n\t\t\t\t\tfor (Element userIssueQueryWatchElement: userIssueQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userIssueQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserIssueQueryWatchElement.detach();\r\n\t\t\t\t\t\tissueQueryWatchesElement.add(userIssueQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserIssueQueryWatchesElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement pullRequestQueryWatchesElement = element.element(\"pullRequestQueryWatches\");\r\n\t\t\t\t\tfor (Element pullRequestQueryWatchElement: pullRequestQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = pullRequestQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userPullRequestQueryWatchesElement = element.element(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\tfor (Element userPullRequestQueryWatchElement: userPullRequestQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userPullRequestQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserPullRequestQueryWatchElement.detach();\r\n\t\t\t\t\t\tpullRequestQueryWatchesElement.add(userPullRequestQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserPullRequestQueryWatchesElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement buildQuerySubscriptionsElement = element.element(\"buildQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: buildQuerySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userBuildQuerySubscriptionsElement = element.element(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userBuildQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tbuildQuerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserBuildQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t \r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\r\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\r\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserQueryWatchElement.detach();\r\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQueryWatchesElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.PullRequestQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\r\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\r\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserQueryWatchElement.detach();\r\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQueryWatchesElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.BuildQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"querySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CodeCommentQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"CommitQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CommitQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"projectQuerySubscriptions\");\r\n\t\t\t\t\tquerySubscriptionsElement.setName(\"querySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate63(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"AutoDiscoveredJobExecutor\")) \r\n\t\t\t\t\t\t\t\t\texecutorElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\r\n\t\t\t\t\tif (errorMessageElement != null)\r\n\t\t\t\t\t\terrorMessageElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate64(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement timeoutElement = valueElement.element(\"timeout\");\r\n\t\t\t\t\t\t\tint timeout = Integer.valueOf(timeoutElement.getTextTrim());\r\n\t\t\t\t\t\t\tif (timeout == 0)\r\n\t\t\t\t\t\t\t\ttimeout = 60;\r\n\t\t\t\t\t\t\telse if (timeout < 10)\r\n\t\t\t\t\t\t\t\ttimeout = 10;\r\n\t\t\t\t\t\t\ttimeoutElement.setText(String.valueOf(timeout));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate65(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tvalueElement.element(\"cpu\").detach();\r\n\t\t\t\t\t\tvalueElement.element(\"memory\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate66(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Element> compareContexts = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\r\n\t\t\t\t\tElement leftSideElement = compareContextElement.element(\"leftSide\");\r\n\t\t\t\t\tElement compareCommitHashElement = compareContextElement.element(\"compareCommitHash\");\r\n\t\t\t\t\tString compareCommitHash = compareCommitHashElement.getTextTrim();\r\n\t\t\t\t\tString commitHash = element.element(\"mark\").elementTextTrim(\"commitHash\");\r\n\t\t\t\t\tif (Boolean.parseBoolean(leftSideElement.getTextTrim())) {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(compareCommitHash);\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(commitHash);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(compareCommitHash);\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(commitHash);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement requestElement = element.element(\"request\");\r\n\t\t\t\t\tif (requestElement != null) {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"pullRequest\").setText(requestElement.getTextTrim());\r\n\t\t\t\t\t\trequestElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tleftSideElement.detach();\r\n\t\t\t\t\tcompareCommitHashElement.detach();\r\n\t\t\t\t\tcompareContexts.put(element.elementTextTrim(\"id\"), compareContextElement);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement lastCodeCommentActivityDateElement = element.element(\"lastCodeCommentActivityDate\");\r\n\t\t\t\t\tif (lastCodeCommentActivityDateElement != null)\r\n\t\t\t\t\t\tlastCodeCommentActivityDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tString enableStartTLSElement = valueElement.elementTextTrim(\"enableStartTLS\");\r\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\r\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"enableSSL\").setText(enableStartTLSElement);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString elementId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\telement.add(compareContexts.get(elementId).createCopy());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate67(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Element> compareContexts = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"JestTestMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.UnitTestMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Jest\", \"Unit\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"CloverMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CoverageMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Clover\", \"Coverage\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"CheckstyleMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.ProblemMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Checkstyle\", \"Problem\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrateAttachmentLinks(@Nullable Element element, Map<String, String> projectIds) {\r\n\t\tif (element != null) {\r\n\t\t\tString content = element.getText();\r\n\t\t\tPattern pattern = Pattern.compile(\"/projects/([\\\\w-\\\\.]+)/attachment/\");\r\n\t\t\tMatcher matcher = pattern.matcher(content);\r\n\t\t\tStringBuffer buffer = new StringBuffer();\r\n\t\t\t\r\n\t\t\twhile (matcher.find()) {\r\n\t\t\t\tString projectName = matcher.group(1);\r\n\t\t\t\tString projectId = projectIds.get(projectName);\r\n\t\t\t\tif (projectId != null) \r\n\t\t\t\t\tmatcher.appendReplacement(buffer, \"/projects/\" + projectId + \"/attachment/\");\r\n\t\t\t\telse\r\n\t\t\t\t\tmatcher.appendReplacement(buffer, Matcher.quoteReplacement(matcher.group()));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmatcher.appendTail(buffer);\r\n\t\t\telement.setText(buffer.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate68(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> projectIds = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tprojectIds.put(element.elementTextTrim(\"name\"), element.elementTextTrim(\"id\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"codeManagementEnabled\").setText(\"true\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"createRootProjects\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"createChildren\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tElement jobMatchElement = executorElement.element(\"jobMatch\");\r\n\t\t\t\t\t\t\tif (jobMatchElement.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\t\tjobMatchElement.detach();\r\n\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\tjobMatchElement.setName(\"jobRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate69(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\r\n\t// Migrate to 5.4.0\r\n\tprivate void migrate70(File dataDir, Stack<Integer> versions) {\r\n\t\tLong scheduleId = 1L;\r\n\t\tVersionedXmlDoc issueSchedulesDoc = new VersionedXmlDoc();\r\n\t\tElement listElement = issueSchedulesDoc.addElement(\"list\");\r\n\t\t\r\n\t\tSet<String> promptFieldsUponIssueOpen = new HashSet<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString issueSubmitDate = element.elementTextTrim(\"submitDate\");\r\n\t\t\t\t\tElement milestoneElement = element.element(\"milestone\");\r\n\t\t\t\t\tif (milestoneElement != null) {\r\n\t\t\t\t\t\tElement scheduleElement = listElement.addElement(\"io.onedev.server.model.IssueSchedule\");\r\n\t\t\t\t\t\tscheduleElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tscheduleElement.addElement(\"id\").setText(String.valueOf(scheduleId++));\r\n\t\t\t\t\t\tscheduleElement.addElement(\"issue\").setText(issueId);\r\n\t\t\t\t\t\tscheduleElement.addElement(\"milestone\").setText(milestoneElement.getTextTrim());\r\n\t\t\t\t\t\tscheduleElement.addElement(\"date\").addAttribute(\"class\", \"sql-timestamp\").setText(issueSubmitDate);\r\n\t\t\t\t\t\tmilestoneElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tString dataClass = dataElement.attributeValue(\"class\");\r\n\t\t\t\t\tif (dataClass.contains(\"IssueMilestoneChangeData\") || dataClass.contains(\"IssueBatchUpdateData\")) {\r\n\t\t\t\t\t\tElement oldMilestonesElement = dataElement.addElement(\"oldMilestones\");\r\n\t\t\t\t\t\tElement oldMilestoneElement = dataElement.element(\"oldMilestone\");\r\n\t\t\t\t\t\tif (oldMilestoneElement != null) {\r\n\t\t\t\t\t\t\toldMilestonesElement.addElement(\"string\").setText(oldMilestoneElement.getText());\r\n\t\t\t\t\t\t\toldMilestoneElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement newMilestonesElement = dataElement.addElement(\"newMilestones\");\r\n\t\t\t\t\t\tElement newMilestoneElement = dataElement.element(\"newMilestone\");\r\n\t\t\t\t\t\tif (newMilestoneElement != null) { \r\n\t\t\t\t\t\t\tnewMilestonesElement.addElement(\"string\").setText(newMilestoneElement.getText());\r\n\t\t\t\t\t\t\tnewMilestoneElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldNameElement: valueElement.element(\"promptFieldsUponIssueOpen\").elements())\r\n\t\t\t\t\t\t\t\tpromptFieldsUponIssueOpen.add(fieldNameElement.getText().trim());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tissueSchedulesDoc.writeToFile(new File(dataDir, \"IssueSchedules.xml\"), false);\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\"))\r\n\t\t\t\t\t\t\t\texecutorElement.element(\"createCacheLabels\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tif (promptFieldsUponIssueOpen.contains(fieldSpecElement.elementText(\"name\").trim()))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"true\");\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"false\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvalueElement.element(\"promptFieldsUponIssueOpen\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t// Migrate to 6.0.0\r\n\tprivate void migrate71(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> issueScopes = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> issueIds = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> buildIds = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> pullRequestIds = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tissueScopes.put(issueId, numberScope);\r\n\t\t\t\t\tissueIds.put(new Pair<>(numberScope, element.elementTextTrim(\"number\")), issueId);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString buildId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\r\n\t\t\t\t\tbuildIds.put(new Pair<>(numberScope, number), buildId);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\r\n\t\t\t\t\tpullRequestIds.put(new Pair<>(numberScope, number), pullRequestId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueFields.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tString value = element.elementTextTrim(\"value\");\r\n\t\t\t\t\tif (type.equals(\"Issue\")) {\r\n\t\t\t\t\t\tString fieldIssueId = issueIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldIssueId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldIssueId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (type.equals(\"Build\")) {\r\n\t\t\t\t\t\tString fieldBuildId = buildIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldBuildId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldBuildId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (type.equals(\"Pull Request\")) {\r\n\t\t\t\t\t\tString fieldPullRequestId = pullRequestIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldPullRequestId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldPullRequestId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate72(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> stateOrdinals = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tint index = 0;\r\n\t\t\t\t\t\t\tfor (Element stateSpecElement: valueElement.element(\"stateSpecs\").elements()) \r\n\t\t\t\t\t\t\t\tstateOrdinals.put(stateSpecElement.elementText(\"name\").trim(), index++);\r\n\t\t\t\t\t\t\tfor (Element boardSpecElement: valueElement.element(\"boardSpecs\").elements())\r\n\t\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"listLinks\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tint ordinal = stateOrdinals.get(element.elementText(\"state\").trim());\r\n\t\t\t\t\telement.addElement(\"stateOrdinal\").setText(String.valueOf(ordinal));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\r\n\t\t\t\t\tif (issueSettingElement.element(\"listFields\") != null)\r\n\t\t\t\t\t\tissueSettingElement.addElement(\"listLinks\");\r\n\t\t\t\t\tElement boardSpecsElement = issueSettingElement.element(\"boardSpecs\");\r\n\t\t\t\t\tif (boardSpecsElement != null) {\r\n\t\t\t\t\t\tfor (Element boardSpecElement: boardSpecsElement.elements()) \r\n\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate73(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement statusElement = closeInfoElement.element(\"status\");\r\n\t\t\t\t\t\tstatusElement.detach();\r\n\t\t\t\t\t\telement.add(statusElement);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"OPEN\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement osElement = element.element(\"os\");\r\n\t\t\t\t\tString osName;\r\n\t\t\t\t\t\r\n\t\t\t\t\tswitch (osElement.getTextTrim()) {\r\n\t\t\t\t\tcase \"WINDOWS\":\r\n\t\t\t\t\t\tosName = \"Windows\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"LINUX\":\r\n\t\t\t\t\t\tosName = \"Linux\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"FREEBSD\":\r\n\t\t\t\t\t\tosName = \"FreeBSD\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MACOSX\":\r\n\t\t\t\t\t\tosName = \"Mac OS X\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tosName = \"Other\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"osName\").setText(osName);\r\n\t\t\t\t\tosElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate74(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"triggerChain\").setText(UUID.randomUUID().toString());\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate75(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"AgentTokens.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement noteElement = element.element(\"note\");\r\n\t\t\t\t\tif (noteElement != null)\r\n\t\t\t\t\t\tnoteElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate76(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"maxCodeSearchEntries\").setText(\"100\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate77(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> userIds = new HashMap<>();\r\n\t\t\r\n\t\tLong maxPullRequestCommentId = 0L;\r\n\t\tLong maxIssueCommentId = 0L;\r\n\t\tFile issueCommentsFile = null;\r\n\t\tFile pullRequestCommentsFile = null;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\r\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\r\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\r\n\t\t\t\t\tif (fullNameElement != null) \r\n\t\t\t\t\t\tuserIds.put(fullNameElement.getText().trim(), id);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuserIds.put(name, id);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (commentId > maxIssueCommentId)\r\n\t\t\t\t\t\tmaxIssueCommentId = commentId;\r\n\t\t\t\t}\r\n\t\t\t\tissueCommentsFile = file;\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (commentId > maxPullRequestCommentId)\r\n\t\t\t\t\t\tmaxPullRequestCommentId = commentId;\r\n\t\t\t\t}\r\n\t\t\t\tpullRequestCommentsFile = file;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tVersionedXmlDoc issueCommentsDom;\r\n\t\tif (issueCommentsFile == null) {\r\n\t\t\tissueCommentsFile = new File(dataDir, \"IssueComments.xml\");\r\n\t\t\tissueCommentsDom = new VersionedXmlDoc();\r\n\t\t\tissueCommentsDom.addElement(\"list\");\r\n\t\t} else {\r\n\t\t\tissueCommentsDom = VersionedXmlDoc.fromFile(issueCommentsFile);\r\n\t\t}\r\n\r\n\t\tVersionedXmlDoc pullRequestCommentsDom;\r\n\t\tif (pullRequestCommentsFile == null) {\r\n\t\t\tpullRequestCommentsFile = new File(dataDir, \"PullRequestComments.xml\");\r\n\t\t\tpullRequestCommentsDom = new VersionedXmlDoc();\r\n\t\t\tpullRequestCommentsDom.addElement(\"list\");\r\n\t\t} else {\r\n\t\t\tpullRequestCommentsDom = VersionedXmlDoc.fromFile(pullRequestCommentsFile);\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"issueManagementEnabled\").setName(\"issueManagement\");\r\n\t\t\t\t\telement.element(\"codeManagementEnabled\").setName(\"codeManagement\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"user\") == null)\r\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tElement assigneeElement = dataElement.element(\"assignee\");\r\n\t\t\t\t\tif (assigneeElement != null) {\r\n\t\t\t\t\t\tString userId = userIds.get(assigneeElement.getText().trim());\r\n\t\t\t\t\t\tif (userId != null) {\r\n\t\t\t\t\t\t\tassigneeElement.setName(\"assigneeId\");\r\n\t\t\t\t\t\t\tassigneeElement.setText(userId);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement reviewerElement = dataElement.element(\"reviewer\");\r\n\t\t\t\t\tif (reviewerElement != null) {\r\n\t\t\t\t\t\tString userId = userIds.get(reviewerElement.getText().trim());\r\n\t\t\t\t\t\tif (userId != null) {\r\n\t\t\t\t\t\t\treviewerElement.setName(\"reviewerId\");\r\n\t\t\t\t\t\t\treviewerElement.setText(userId);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\tElement pullRequestCommentElement = pullRequestCommentsDom.getRootElement()\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.PullRequestComment\");\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\r\n\t\t\t\t\t\tpullRequestCommentElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"id\").setText(String.valueOf(++maxPullRequestCommentId));\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"request\").setText(element.elementText(\"request\").trim());\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\r\n\t\t\t\t\t\tElement pullRequestCommentDateElement = pullRequestCommentElement.addElement(\"date\");\r\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\t\tpullRequestCommentDateElement.setText(dateElement.getText().trim());\r\n\t\t\t\t\t\tpullRequestCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"user\") == null)\r\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\r\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\tElement issueCommentElement = issueCommentsDom.getRootElement()\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.IssueComment\");\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\r\n\t\t\t\t\t\tissueCommentElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"id\").setText(String.valueOf(++maxIssueCommentId));\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"issue\").setText(element.elementText(\"issue\").trim());\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\r\n\t\t\t\t\t\tElement issueCommentDateElement = issueCommentElement.addElement(\"date\");\r\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\t\tissueCommentDateElement.setText(dateElement.getText().trim());\r\n\t\t\t\t\t\tissueCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tissueCommentsDom.writeToFile(issueCommentsFile, false);\r\n\t\tpullRequestCommentsDom.writeToFile(pullRequestCommentsFile, false);\r\n\t}\r\n\r\n\tprivate void migrate78(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\r\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate79(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate80(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\r\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"temporal\").setText((\"false\"));\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate81(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"serviceDeskName\") == null) \r\n\t\t\t\t\t\telement.addElement(\"serviceDeskName\").setText(Project.NULL_SERVICE_DESK_PREFIX + UUID.randomUUID().toString());\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 7.0.0\r\n\tprivate void migrate82(File dataDir, Stack<Integer> versions) {\r\n\t\tSet<String> userNames = new HashSet<>();\r\n\t\tMap<String, String> primaryEmails = new HashMap<>();\r\n\t\tMap<String, String> gitEmails = new HashMap<>();\r\n\t\tMap<String, String> alternateEmails = new HashMap<>();\r\n\t\t\r\n\t\tString sshServerUrl = null;\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) \r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) \r\n\t\t\t\t\t\ttagProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString userId = element.elementText(\"id\").trim();\r\n\t\t\t\t\tElement nameElement = element.element(\"name\");\r\n\t\t\t\t\tString name = nameElement.getText().trim();\r\n\t\t\t\t\tif (userNames.add(name.toLowerCase())) \r\n\t\t\t\t\t\tnameElement.setText(name.toLowerCase());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated login names found when convert '\" + name + \"' to lowercase\");\r\n\t\t\t\t\tif (userId.equals(\"-1\")) {\r\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"OneDev\");\r\n\t\t\t\t\t\telement.element(\"email\").detach();\r\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (userId.equals(\"-2\")) {\r\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"Unknown\");\r\n\t\t\t\t\t\telement.element(\"email\").detach();\r\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tElement emailElement = element.element(\"email\");\r\n\t\t\t\t\t\tString email = emailElement.getText().trim();\r\n\t\t\t\t\t\tif (primaryEmails.put(email.toLowerCase(), userId) != null)\r\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated email address found when convert '\" + email + \"' to lowercase\");\r\n\t\t\t\t\t\temailElement.detach();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement gitEmailElement = element.element(\"gitEmail\");\r\n\t\t\t\t\t\tif (gitEmailElement != null) {\r\n\t\t\t\t\t\t\tString gitEmail = gitEmailElement.getText().trim();\r\n\t\t\t\t\t\t\tgitEmails.put(gitEmail.toLowerCase(), userId);\r\n\t\t\t\t\t\t\tgitEmailElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement alternateEmailsElement = element.element(\"alternateEmails\");\r\n\t\t\t\t\t\tfor (Element alternateEmailElement: alternateEmailsElement.elements()) {\r\n\t\t\t\t\t\t\tString alternateEmail = alternateEmailElement.getText().trim();\r\n\t\t\t\t\t\t\talternateEmails.put(alternateEmail.toLowerCase(), userId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\talternateEmailsElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement ssoInfoElement = element.element(\"ssoInfo\");\r\n\t\t\t\t\tElement connectorElement = ssoInfoElement.element(\"connector\");\r\n\t\t\t\t\tif (connectorElement != null) \r\n\t\t\t\t\t\telement.addElement(\"ssoConnector\").setText(connectorElement.getText().trim());\r\n\t\t\t\t\tssoInfoElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"triggerChain\").setName(\"pipeline\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"SECURITY\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.addElement(\"enforce2FA\").setText(\"false\");\r\n\t\t\t\t\t} else if (key.equals(\"SSH\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement sshServerUrlElement = valueElement.element(\"serverUrl\");\r\n\t\t\t\t\t\t\tsshServerUrl = sshServerUrlElement.getText().trim();\r\n\t\t\t\t\t\t\tsshServerUrlElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"enforce2FA\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (sshServerUrl != null) {\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"sshRootUrl\").setText(sshServerUrl);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tVersionedXmlDoc emailAddressesDom;\r\n\t\tFile emailAddressesFile = new File(dataDir, \"EmailAddresss.xml\");\r\n\t\temailAddressesDom = new VersionedXmlDoc();\r\n\t\tElement listElement = emailAddressesDom.addElement(\"list\");\r\n\t\t\r\n\t\tlong id = 1;\r\n\t\tMap<String, Element> primaryEmailElements = new HashMap<>();\r\n\t\tfor (Map.Entry<String, String> entry: primaryEmails.entrySet()) {\r\n\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\temailAddressElement.addElement(\"primary\").setText(\"true\");\r\n\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\r\n\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\tprimaryEmailElements.put(entry.getValue(), emailAddressElement);\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, String> entry: gitEmails.entrySet()) {\r\n\t\t\tif (!primaryEmails.containsKey(entry.getKey())) {\r\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\r\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\t\tprimaryEmailElements.get(entry.getValue()).element(\"git\").setText(\"false\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, String> entry: alternateEmails.entrySet()) {\r\n\t\t\tif (!primaryEmails.containsKey(entry.getKey()) && !gitEmails.containsKey(entry.getKey())) {\r\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\temailAddressesDom.writeToFile(emailAddressesFile, true);\r\n\t}\r\n\t\t\t\r\n\tprivate void migrate83(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> issueInfos = new HashMap<>();\r\n\t\tMap<String, String> pullRequestInfos = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueInfo = MessageFormat.format(\r\n\t\t\t\t\t\t\t\"project id: {0}, issue number: {1}\", \r\n\t\t\t\t\t\t\telement.elementText(\"project\"), element.elementText(\"number\"));\r\n\t\t\t\t\tissueInfos.put(element.elementTextTrim(\"id\"), issueInfo);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestInfo = MessageFormat.format(\r\n\t\t\t\t\t\t\t\"project id: {0}, pull request number: {1}\", \r\n\t\t\t\t\t\t\telement.elementText(\"targetProject\"), element.elementText(\"number\"));\r\n\t\t\t\t\tpullRequestInfos.put(element.elementTextTrim(\"id\"), pullRequestInfo);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\r\n\t\t\t\t\tif (descriptionElement != null) {\r\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\r\n\t\t\t\t\t\tif (description.length() > Issue.MAX_DESCRIPTION_LEN) {\r\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, Issue.MAX_DESCRIPTION_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Issue description too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementTextTrim(\"id\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\r\n\t\t\t\t\tif (descriptionElement != null) {\r\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\r\n\t\t\t\t\t\tif (description.length() > PullRequest.MAX_DESCRIPTION_LEN) {\r\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, PullRequest.MAX_DESCRIPTION_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Pull request description too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementTextTrim(\"id\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement contentElement = element.element(\"content\");\r\n\t\t\t\t\tif (contentElement != null) {\r\n\t\t\t\t\t\tString content = contentElement.getText().trim();\r\n\t\t\t\t\t\tif (content.length() > IssueComment.MAX_CONTENT_LEN) {\r\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, IssueComment.MAX_CONTENT_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Issue comment too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementText(\"issue\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement contentElement = element.element(\"content\");\r\n\t\t\t\t\tif (contentElement != null) {\r\n\t\t\t\t\t\tString content = contentElement.getText().trim();\r\n\t\t\t\t\t\tif (content.length() > PullRequestComment.MAX_CONTENT_LEN) {\r\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, PullRequestComment.MAX_CONTENT_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Pull request comment too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementText(\"request\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\r\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"pollInterval\").setText(\"60\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate84(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate85(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"uuid\").setText(UUID.randomUUID().toString());\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate86(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n}\r\n", "package io.onedev.server.plugin.executor.kubernetes;\n\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_JOB_TOKEN;\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_OS_INFO;\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_SERVER_URL;\nimport static io.onedev.k8shelper.KubernetesHelper.IMAGE_REPO_PREFIX;\nimport static io.onedev.k8shelper.KubernetesHelper.LOG_END_MESSAGE;\nimport static io.onedev.k8shelper.KubernetesHelper.stringifyPosition;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport javax.annotation.Nullable;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang.SerializationUtils;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.apache.commons.text.WordUtils;\nimport org.hibernate.validator.constraints.NotEmpty;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.yaml.snakeyaml.Yaml;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Preconditions;\nimport com.google.common.base.Splitter;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\n\nimport io.onedev.agent.job.FailedException;\nimport io.onedev.commons.utils.ExceptionUtils;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.commons.utils.command.Commandline;\nimport io.onedev.commons.utils.command.ExecutionResult;\nimport io.onedev.commons.utils.command.LineConsumer;\nimport io.onedev.k8shelper.Action;\nimport io.onedev.k8shelper.BuildImageFacade;\nimport io.onedev.k8shelper.CommandFacade;\nimport io.onedev.k8shelper.CompositeFacade;\nimport io.onedev.k8shelper.ExecuteCondition;\nimport io.onedev.k8shelper.KubernetesHelper;\nimport io.onedev.k8shelper.LeafFacade;\nimport io.onedev.k8shelper.LeafVisitor;\nimport io.onedev.k8shelper.OsContainer;\nimport io.onedev.k8shelper.OsExecution;\nimport io.onedev.k8shelper.OsInfo;\nimport io.onedev.k8shelper.RegistryLoginFacade;\nimport io.onedev.k8shelper.RunContainerFacade;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.EnvVar;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.model.support.administration.jobexecutor.NodeSelectorEntry;\nimport io.onedev.server.model.support.administration.jobexecutor.ServiceLocator;\nimport io.onedev.server.model.support.inputspec.SecretInput;\nimport io.onedev.server.plugin.executor.kubernetes.KubernetesExecutor.TestData;\nimport io.onedev.server.util.CollectionUtils;\nimport io.onedev.server.util.PKCS12CertExtractor;\nimport io.onedev.server.util.ServerConfig;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Horizontal;\nimport io.onedev.server.web.editable.annotation.OmitName;\nimport io.onedev.server.web.util.Testable;\n\n@Editable(order=KubernetesExecutor.ORDER, description=\"This executor runs build jobs as pods in a kubernetes cluster. \"\n\t\t+ \"No any agents are required.\"\n\t\t+ \"<b class='text-danger'>Note:</b> Make sure server url is specified correctly in system \"\n\t\t+ \"setting as job pods need to access it to download source and artifacts\")\n@Horizontal\npublic class KubernetesExecutor extends JobExecutor implements Testable<TestData> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tstatic final int ORDER = 40;\n\t\n\tprivate static final int POD_WATCH_TIMEOUT = 60;\n\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(KubernetesExecutor.class);\n\t\n\tprivate static final long NAMESPACE_DELETION_TIMEOUT = 120;\n\t\n\tprivate List<NodeSelectorEntry> nodeSelector = new ArrayList<>();\n\t\n\tprivate String clusterRole;\n\t\n\tprivate List<RegistryLogin> registryLogins = new ArrayList<>();\n\t\n\tprivate List<ServiceLocator> serviceLocators = new ArrayList<>();\n\n\tprivate String configFile;\n\t\n\tprivate String kubeCtlPath;\n\t\n\t@Editable(order=20, description=\"Optionally specify node selector of the job pods\")\n\tpublic List<NodeSelectorEntry> getNodeSelector() {\n\t\treturn nodeSelector;\n\t}\n\n\tpublic void setNodeSelector(List<NodeSelectorEntry> nodeSelector) {\n\t\tthis.nodeSelector = nodeSelector;\n\t}\n\n\t@Editable(order=40, description=\"Optionally specify cluster role the job pods service account \"\n\t\t\t+ \"binding to. This is necessary if you want to do things such as running other \"\n\t\t\t+ \"Kubernetes pods in job command\")\n\tpublic String getClusterRole() {\n\t\treturn clusterRole;\n\t}\n\n\tpublic void setClusterRole(String clusterRole) {\n\t\tthis.clusterRole = clusterRole;\n\t}\n\n\t@Editable(order=200, description=\"Specify login information of docker registries if necessary. \"\n\t\t\t+ \"These logins will be used to create image pull secrets of the job pods\")\n\tpublic List<RegistryLogin> getRegistryLogins() {\n\t\treturn registryLogins;\n\t}\n\n\tpublic void setRegistryLogins(List<RegistryLogin> registryLogins) {\n\t\tthis.registryLogins = registryLogins;\n\t}\n\n\t@Editable(order=25000, group=\"More Settings\", description=\"Optionally specify where to run service pods \"\n\t\t\t+ \"specified in job. The first matching locator will be used. If no any locators are found, \"\n\t\t\t+ \"node selector of the executor will be used\")\n\tpublic List<ServiceLocator> getServiceLocators() {\n\t\treturn serviceLocators;\n\t}\n\n\tpublic void setServiceLocators(List<ServiceLocator> serviceLocators) {\n\t\tthis.serviceLocators = serviceLocators;\n\t}\n\n\t@Editable(name=\"Kubectl Config File\", order=26000, group=\"More Settings\", \n\t\t\tplaceholder=\"Use default\", description=\"Specify absolute path to the config file \"\n\t\t\t\t\t+ \"used by kubectl to access the cluster. Leave empty to have kubectl \"\n\t\t\t\t\t+ \"determining cluster access information automatically\")\n\tpublic String getConfigFile() {\n\t\treturn configFile;\n\t}\n \n\tpublic void setConfigFile(String configFile) {\n\t\tthis.configFile = configFile;\n\t}\n\n\t@Editable(name=\"Path to kubectl\", order=27000, group=\"More Settings\", placeholder=\"Use default\", \n\t\t\tdescription=\"Specify absolute path to the kubectl utility, for instance: <i>/usr/bin/kubectl</i>. \"\n\t\t\t+ \"If left empty, OneDev will try to find the utility from system path\")\n\tpublic String getKubeCtlPath() {\n\t\treturn kubeCtlPath;\n\t}\n\n\tpublic void setKubeCtlPath(String kubeCtlPath) {\n\t\tthis.kubeCtlPath = kubeCtlPath;\n\t}\n\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\texecute(jobToken, jobContext.getLogger(), jobContext);\n\t}\n\t\n\t@Override\n\tpublic boolean isPlaceholderAllowed() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\texecute(UUID.randomUUID().toString(), jobLogger, testData.getDockerImage());\n\t}\n\t\n\tprivate Commandline newKubeCtl() {\n\t\tString kubectl = getKubeCtlPath();\n\t\tif (kubectl == null) {\n\t\t\tif (SystemUtils.IS_OS_MAC_OSX && new File(\"/usr/local/bin/kubectl\").exists())\n\t\t\t\tkubectl = \"/usr/local/bin/kubectl\";\n\t\t\telse\n\t\t\t\tkubectl = \"kubectl\";\n\t\t}\n\t\tCommandline cmdline = new Commandline(kubectl); \n\t\tif (getConfigFile() != null)\n\t\t\tcmdline.addArgs(\"--kubeconfig\", getConfigFile());\n\t\treturn cmdline;\n\t}\n\t\n\tprivate String createResource(Map<Object, Object> resourceDef, Collection<String> secretsToMask, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\tFile file = null;\n\t\ttry {\n\t\t\tAtomicReference<String> resourceNameRef = new AtomicReference<String>(null);\n\t\t\tfile = File.createTempFile(\"k8s\", \".yaml\");\n\t\t\t\n\t\t\tString resourceYaml = new Yaml().dump(resourceDef);\n\t\t\t\n\t\t\tString maskedYaml = resourceYaml;\n\t\t\tfor (String secret: secretsToMask) \n\t\t\t\tmaskedYaml = StringUtils.replace(maskedYaml, secret, SecretInput.MASK);\n\t\t\tlogger.trace(\"Creating resource:\\n\" + maskedYaml);\n\t\t\t\n\t\t\tFileUtils.writeFile(file, resourceYaml, StandardCharsets.UTF_8.name());\n\t\t\tkubectl.addArgs(\"create\", \"-f\", file.getAbsolutePath(), \"-o\", \"jsonpath={.metadata.name}\");\n\t\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tresourceNameRef.set(line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\t\t\t\n\t\t\treturn Preconditions.checkNotNull(resourceNameRef.get());\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tif (file != null)\n\t\t\t\tfile.delete();\n\t\t}\n\t}\n\t\n\tprivate void deleteNamespace(String namespace, TaskLogger jobLogger) {\n\t\ttry {\n\t\t\tCommandline cmd = newKubeCtl();\n\t\t\tcmd.timeout(NAMESPACE_DELETION_TIMEOUT).addArgs(\"delete\", \"namespace\", namespace);\n\t\t\tcmd.execute(new LineConsumer() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tlogger.debug(line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new LineConsumer() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\t\t} catch (Exception e) {\n\t\t\tif (ExceptionUtils.find(e, TimeoutException.class) == null)\n\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\telse\n\t\t\t\tjobLogger.error(\"Timed out deleting namespace\");\n\t\t}\n\t}\n\t\n\tprivate void deleteClusterRoleBinding(String namespace, TaskLogger jobLogger) {\n\t\tCommandline cmd = newKubeCtl();\n\t\tcmd.addArgs(\"delete\", \"clusterrolebinding\", namespace);\n\t\tcmd.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t}\n\t\n\tprivate String createNamespace(String namespace, @Nullable JobContext jobContext, TaskLogger jobLogger) {\n\t\tAtomicBoolean namespaceExists = new AtomicBoolean(false);\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"get\", \"namespaces\", \"--field-selector\", \"metadata.name=\" + namespace, \n\t\t\t\t\"-o\", \"name\");\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tnamespaceExists.set(true);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tif (namespaceExists.get())\n\t\t\tdeleteNamespace(namespace, jobLogger);\n\t\t\n\t\tkubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"create\", \"namespace\", namespace);\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\treturn namespace;\n\t}\n\t\n\tprivate OsInfo getBaselineOsInfo(Collection<NodeSelectorEntry> nodeSelector, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"get\", \"nodes\", \"-o\", \"jsonpath={range .items[*]}{.status.nodeInfo.operatingSystem} {.status.nodeInfo.kernelVersion} {.status.nodeInfo.architecture} {.spec.unschedulable}{'|'}{end}\");\n\t\tfor (NodeSelectorEntry entry: nodeSelector) \n\t\t\tkubectl.addArgs(\"-l\", entry.getLabelName() + \"=\" + entry.getLabelValue());\n\t\t\n\t\tCollection<OsInfo> osInfos = new ArrayList<>();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tkubectl.execute(baos, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tfor (String osInfoString: Splitter.on('|').trimResults().omitEmptyStrings().splitToList(baos.toString())) {\n\t\t\tosInfoString = osInfoString.replace('\\n', ' ').replace('\\r', ' ');\n\t\t\tList<String> fields = Splitter.on(' ').omitEmptyStrings().trimResults().splitToList(osInfoString);\n\t\t\tif (fields.size() == 3 || fields.get(3).equals(\"false\")) {\n\t\t\t\tString osName = WordUtils.capitalize(fields.get(0));\n\t\t\t\tString osVersion = fields.get(1);\n\t\t\t\tif (osName.equals(\"Windows\"))\n\t\t\t\t\tosVersion = StringUtils.substringBeforeLast(osVersion, \".\");\n\t\t\t\tosInfos.add(new OsInfo(osName, osVersion, fields.get(2)));\n\t\t\t}\n\t\t}\n\n\t\tif (!osInfos.isEmpty()) {\n\t\t\treturn OsInfo.getBaseline(osInfos);\n\t\t} else {\n\t\t\tthrow new ExplicitException(\"No applicable working nodes found\");\n\t\t}\n\t}\n\t\n\tprivate String getServerUrl() {\n\t\treturn OneDev.getInstance(SettingManager.class).getSystemSetting().getServerUrl().toString();\n\t}\n\t\n\t@Nullable\n\tprivate String createImagePullSecret(String namespace, TaskLogger jobLogger) {\n\t\tif (!getRegistryLogins().isEmpty()) {\n\t\t\tMap<Object, Object> auths = new LinkedHashMap<>();\n\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\tString auth = login.getUserName() + \":\" + login.getPassword();\n\t\t\t\tString registryUrl = login.getRegistryUrl();\n\t\t\t\tif (registryUrl == null)\n\t\t\t\t\tregistryUrl = \"https://index.docker.io/v1/\";\n\t\t\t\tauths.put(registryUrl, CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"auth\", Base64.encodeBase64String(auth.getBytes(StandardCharsets.UTF_8))));\n\t\t\t}\n\t\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\t\ttry {\n\t\t\t\tString dockerConfig = mapper.writeValueAsString(CollectionUtils.newLinkedHashMap(\"auths\", auths));\n\t\t\t\t\n\t\t\t\tString secretName = \"image-pull-secret\";\n\t\t\t\tMap<String, String> encodedSecrets = new LinkedHashMap<>();\n\t\t\t\tMap<Object, Object> secretDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\t\"kind\", \"Secret\", \n\t\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"name\", secretName, \n\t\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\t\"data\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\".dockerconfigjson\", Base64.encodeBase64String(dockerConfig.getBytes(StandardCharsets.UTF_8))));\n\t\t\t\tsecretDef.put(\"type\", \"kubernetes.io/dockerconfigjson\");\n\t\t\t\tcreateResource(secretDef, encodedSecrets.values(), jobLogger);\n\t\t\t\treturn secretName;\n\t\t\t} catch (JsonProcessingException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void createClusterRoleBinding(String namespace, TaskLogger jobLogger) {\n\t\tAtomicBoolean clusterRoleBindingExists = new AtomicBoolean(false);\n\t\tCommandline cmd = newKubeCtl();\n\t\tcmd.addArgs(\"get\", \"clusterrolebindings\", \"--field-selector\", \"metadata.name=\" + namespace, \n\t\t\t\t\"-o\", \"name\");\n\t\tcmd.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tclusterRoleBindingExists.set(true);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tif (clusterRoleBindingExists.get())\n\t\t\tdeleteClusterRoleBinding(namespace, jobLogger);\n\t\t\n\t\tMap<Object, Object> clusterRoleBindingDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"rbac.authorization.k8s.io/v1\", \n\t\t\t\t\"kind\", \"ClusterRoleBinding\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", namespace), \n\t\t\t\t\"subjects\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"kind\", \"ServiceAccount\", \n\t\t\t\t\t\t\"name\", \"default\", \n\t\t\t\t\t\t\"namespace\", namespace)), \n\t\t\t\t\"roleRef\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiGroup\", \"rbac.authorization.k8s.io\",\n\t\t\t\t\t\t\"kind\", \"ClusterRole\", \n\t\t\t\t\t\t\"name\", getClusterRole()));\n\t\tcreateResource(clusterRoleBindingDef, new HashSet<>(), jobLogger);\n\t}\t\n\t\n\t@Nullable\n\tprivate String createTrustCertsConfigMap(String namespace, TaskLogger jobLogger) {\n\t\tMap<String, String> configMapData = new LinkedHashMap<>();\n\t\tServerConfig serverConfig = OneDev.getInstance(ServerConfig.class); \n\t\tFile keystoreFile = serverConfig.getKeystoreFile();\n\t\tif (keystoreFile != null) {\n\t\t\tString password = serverConfig.getKeystorePassword();\n\t\t\tfor (Map.Entry<String, String> entry: new PKCS12CertExtractor(keystoreFile, password).extact().entrySet()) \n\t\t\t\tconfigMapData.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\tFile trustCertsDir = serverConfig.getTrustCertsDir();\n\t\tif (trustCertsDir != null) {\n\t\t\tfor (File file: trustCertsDir.listFiles()) {\n\t\t\t\tif (file.isFile()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconfigMapData.put(\"specified-cert-\" + file.getName(), \n\t\t\t\t\t\t\t\tFileUtils.readFileToString(file, StandardCharsets.UTF_8));\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!configMapData.isEmpty()) {\n\t\t\tMap<Object, Object> configMapDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\"kind\", \"ConfigMap\",\n\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"trust-certs\", \n\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\"data\", configMapData);\n\t\t\treturn createResource(configMapDef, new HashSet<>(), jobLogger);\t\t\t\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void startService(String namespace, JobContext jobContext, Service jobService, \n\t\t\t@Nullable String imagePullSecretName, TaskLogger jobLogger) {\n\t\tjobLogger.log(\"Creating service pod from image \" + jobService.getImage() + \"...\");\n\t\t\n\t\tList<NodeSelectorEntry> nodeSelector = getNodeSelector();\n\t\tfor (ServiceLocator locator: getServiceLocators()) {\n\t\t\tif (locator.isApplicable(jobService)) {\n\t\t\t\tnodeSelector = locator.getNodeSelector();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<String, Object> podSpec = new LinkedHashMap<>();\n\t\tMap<Object, Object> containerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\"name\", \"default\", \n\t\t\t\t\"image\", jobService.getImage());\n\t\tcontainerSpec.put(\"resources\", CollectionUtils.newLinkedHashMap(\"requests\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"cpu\", jobService.getCpuRequirement() + \"m\", \n\t\t\t\t\"memory\", jobService.getMemoryRequirement() + \"m\")));\n\t\tList<Map<Object, Object>> envs = new ArrayList<>();\n\t\tfor (EnvVar envVar: jobService.getEnvVars()) {\n\t\t\tenvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\"name\", envVar.getName(), \n\t\t\t\t\t\"value\", envVar.getValue()));\n\t\t}\n\t\tif (jobService.getArguments() != null) {\n\t\t\tList<String> argList = new ArrayList<>();\n\t\t\tfor (String arg: StringUtils.parseQuoteTokens(jobService.getArguments()))\n\t\t\t\targList.add(arg);\n\t\t\tcontainerSpec.put(\"args\", argList);\t\t\t\n\t\t}\n\t\tcontainerSpec.put(\"env\", envs);\n\t\t\n\t\tpodSpec.put(\"containers\", Lists.<Object>newArrayList(containerSpec));\n\t\tif (imagePullSecretName != null)\n\t\t\tpodSpec.put(\"imagePullSecrets\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\"name\", imagePullSecretName)));\n\t\tpodSpec.put(\"restartPolicy\", \"Never\");\t\t\n\t\t\n\t\tif (!nodeSelector.isEmpty())\n\t\t\tpodSpec.put(\"nodeSelector\", toMap(nodeSelector));\n\t\t\n\t\tString podName = \"service-\" + jobService.getName();\n\t\t\n\t\tMap<Object, Object> podDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\"kind\", \"Pod\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", podName, \n\t\t\t\t\t\t\"namespace\", namespace, \n\t\t\t\t\t\t\"labels\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"service\", jobService.getName())), \n\t\t\t\t\"spec\", podSpec);\n\t\tcreateResource(podDef, Sets.newHashSet(), jobLogger);\t\t\n\t\t\n\t\tMap<Object, Object> serviceDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\"kind\", \"Service\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", jobService.getName(),\n\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\"spec\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"clusterIP\", \"None\", \n\t\t\t\t\t\t\"selector\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"service\", jobService.getName())));\n\t\tcreateResource(serviceDef, Sets.newHashSet(), jobLogger);\n\t\t\n\t\tjobLogger.log(\"Waiting for service to be ready...\");\n\t\t\n\t\tOsInfo baselineOsInfo = getBaselineOsInfo(nodeSelector, jobLogger);\n\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\twhile (true) {\n\t\t\tCommandline kubectl = newKubeCtl();\n\t\t\tkubectl.addArgs(\"get\", \"pod\", podName, \"-n\", namespace, \"-o\", \"json\");\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tkubectl.execute(baos, new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\n\t\t\tJsonNode statusNode;\n\t\t\ttry {\n\t\t\t\tstatusNode = mapper.readTree(baos.toString()).get(\"status\");\t\t\t\t\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t\t\n\t\t\tcheckConditions(statusNode, jobLogger);\n\t\t\t\n\t\t\tList<JsonNode> containerStatusNodes = new ArrayList<>();\n\t\t\tJsonNode containerStatusesNode = statusNode.get(\"containerStatuses\");\n\t\t\tif (containerStatusesNode != null)\n\t\t\t\tcontainerStatusNodes.add(containerStatusesNode.iterator().next());\t\t\t\t\n\t\t\t\n\t\t\tMap<String, ContainerError> containerErrors = getContainerErrors(containerStatusNodes);\n\t\t\tif (!containerErrors.isEmpty()) {\n\t\t\t\tContainerError error = containerErrors.values().iterator().next();\n\t\t\t\tif (!error.isFatal()) \n\t\t\t\t\tcollectContainerLog(namespace, podName, \"default\", null, jobLogger);\n\t\t\t\tthrow new ExplicitException(\"Service \" + jobService.getName() + \": \" + error.getMessage());\n\t\t\t} \n\t\t\t\n\t\t\tif (!getStoppedContainers(containerStatusNodes).isEmpty()) {\n\t\t\t\tcollectContainerLog(namespace, podName, \"default\", null, jobLogger);\n\t\t\t\tthrow new ExplicitException(\"Service \" + jobService.getName() + \" is stopped unexpectedly\");\n\t\t\t}\n\t\t\n\t\t\tif (!getStartedContainers(containerStatusNodes).isEmpty()) {\n\t\t\t\tkubectl = newKubeCtl();\n\t\t\t\tkubectl.addArgs(\"exec\", podName, \"-n\", namespace, \"--\");\n\t\t\t\tif (baselineOsInfo.isLinux())\n\t\t\t\t\tkubectl.addArgs(\"sh\", \"-c\");\n\t\t\t\telse \n\t\t\t\t\tkubectl.addArgs(\"cmd.exe\", \"/c\");\n\t\t\t\tkubectl.addArgs(jobService.getReadinessCheckCommand());\n\t\t\t\tExecutionResult result = kubectl.execute(new LineConsumer() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.log(\"Service readiness check: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.log(\"Service readiness check: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tif (result.getReturnCode() == 0) {\n\t\t\t\t\tjobLogger.log(\"Service is ready\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(10000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> toMap(List<NodeSelectorEntry> nodeSelector) {\n\t\tMap<String, String> map = new LinkedHashMap<>();\n\t\tfor (NodeSelectorEntry entry: nodeSelector)\n\t\t\tmap.put(entry.getLabelName(), entry.getLabelValue());\n\t\treturn map;\n\t}\n\t\n\tprivate void execute(String jobToken, TaskLogger jobLogger, Object executionContext) {\n\t\tjobLogger.log(\"Checking cluster access...\");\n\t\tJobContext jobContext;\n\t\tif (executionContext instanceof JobContext)\n\t\t\tjobContext = (JobContext) executionContext;\n\t\telse\n\t\t\tjobContext = null;\n\t\t\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"cluster-info\");\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.log(line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tString namespace ;\n\t\tif (jobContext != null) {\n\t\t\tnamespace = getName() + \"-\" + jobContext.getProjectId() + \"-\" \n\t\t\t\t\t+ jobContext.getBuildNumber() + \"-\" + jobContext.getRetried();\n\t\t} else {\n\t\t\tnamespace = getName() + \"-executor-test\";\n\t\t}\n\t\t\n\t\tif (getClusterRole() != null)\n\t\t\tcreateClusterRoleBinding(namespace, jobLogger);\n\t\t\n\t\ttry {\n\t\t\tcreateNamespace(namespace, jobContext, jobLogger);\n\t\t\t\n\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, namespace: %s)...\", \n\t\t\t\t\tgetName(), namespace));\n\t\t\ttry {\n\t\t\t\tString imagePullSecretName = createImagePullSecret(namespace, jobLogger);\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tfor (Service jobService: jobContext.getServices()) {\n\t\t\t\t\t\tjobLogger.log(\"Starting service (name: \" + jobService.getName() + \", image: \" + jobService.getImage() + \")...\");\n\t\t\t\t\t\tstartService(namespace, jobContext, jobService, imagePullSecretName, jobLogger);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString trustCertsConfigMapName = createTrustCertsConfigMap(namespace, jobLogger);\n\t\t\t\t\n\t\t\t\tOsInfo osInfo = getBaselineOsInfo(getNodeSelector(), jobLogger);\n\t\t\t\t\n\t\t\t\tMap<String, Object> podSpec = new LinkedHashMap<>();\n\n\t\t\t\tList<Map<Object, Object>> containerSpecs = new ArrayList<>();\n\t\t\t\t\n\t\t\t\tString containerBuildHome;\n\t\t\t\tString containerCommandHome;\n\t\t\t\tString containerCacheHome;\n\t\t\t\tString containerAuthInfoHome;\n\t\t\t\tString trustCertsHome;\n\t\t\t\tString dockerSock;\n\t\t\t\tString containerdSock;\n\t\t\t\tString containerWorkspace;\n\t\t\t\tif (osInfo.isWindows()) {\n\t\t\t\t\tcontainerBuildHome = \"C:\\\\onedev-build\";\n\t\t\t\t\tcontainerWorkspace = containerBuildHome + \"\\\\workspace\";\n\t\t\t\t\tcontainerCacheHome = containerBuildHome + \"\\\\cache\";\n\t\t\t\t\tcontainerCommandHome = containerBuildHome + \"\\\\command\";\n\t\t\t\t\tcontainerAuthInfoHome = \"C:\\\\Users\\\\ContainerAdministrator\\\\auth-info\";\n\t\t\t\t\ttrustCertsHome = containerBuildHome + \"\\\\trust-certs\";\n\t\t\t\t\tdockerSock = \"\\\\\\\\.\\\\pipe\\\\docker_engine\";\n\t\t\t\t\tcontainerdSock = \"\\\\\\\\.\\\\pipe\\\\containerd-containerd\";\n\t\t\t\t} else {\n\t\t\t\t\tcontainerBuildHome = \"/onedev-build\";\n\t\t\t\t\tcontainerWorkspace = containerBuildHome +\"/workspace\";\n\t\t\t\t\tcontainerCacheHome = containerBuildHome + \"/cache\";\n\t\t\t\t\tcontainerCommandHome = containerBuildHome + \"/command\";\n\t\t\t\t\tcontainerAuthInfoHome = \"/root/auth-info\";\n\t\t\t\t\ttrustCertsHome = containerBuildHome + \"/trust-certs\";\n\t\t\t\t\tdockerSock = \"/var/run/docker.sock\";\n\t\t\t\t\tcontainerdSock = \"/run/containerd/containerd.sock\";\n\t\t\t\t}\n\n\t\t\t\tMap<String, String> buildHomeMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\"mountPath\", containerBuildHome);\n\t\t\t\tMap<String, String> authInfoMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"mountPath\", containerAuthInfoHome);\n\t\t\t\t\n\t\t\t\t// Windows nanoserver default user is ContainerUser\n\t\t\t\tMap<String, String> authInfoMount2 = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"mountPath\", \"C:\\\\Users\\\\ContainerUser\\\\auth-info\");\n\t\t\t\t\n\t\t\t\tMap<String, String> cacheHomeMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"cache-home\", \n\t\t\t\t\t\t\"mountPath\", containerCacheHome);\n\t\t\t\tMap<String, String> trustCertsMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"trust-certs-home\", \n\t\t\t\t\t\t\"mountPath\", trustCertsHome);\n\t\t\t\tMap<String, String> dockerSockMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"docker-sock\", \n\t\t\t\t\t\t\"mountPath\", dockerSock);\n\t\t\t\tMap<String, String> containerdSockMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"containerd-sock\", \n\t\t\t\t\t\t\"mountPath\", containerdSock);\n\t\t\t\t\n\t\t\t\tList<Object> commonVolumeMounts = Lists.<Object>newArrayList(buildHomeMount, authInfoMount, cacheHomeMount);\n\t\t\t\tif (osInfo.isWindows())\n\t\t\t\t\tcommonVolumeMounts.add(authInfoMount2);\n\t\t\t\tif (trustCertsConfigMapName != null)\n\t\t\t\t\tcommonVolumeMounts.add(trustCertsMount);\n\t\t\t\tcommonVolumeMounts.add(dockerSockMount);\n\t\t\t\tcommonVolumeMounts.add(containerdSockMount);\n\n\t\t\t\tCompositeFacade entryFacade;\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tentryFacade = new CompositeFacade(jobContext.getActions());\n\t\t\t\t} else {\n\t\t\t\t\tList<Action> actions = new ArrayList<>();\n\t\t\t\t\tCommandFacade facade = new CommandFacade((String) executionContext, \n\t\t\t\t\t\t\tLists.newArrayList(\"this does not matter\"), false);\n\t\t\t\t\tactions.add(new Action(\"test\", facade, ExecuteCondition.ALWAYS));\n\t\t\t\t\tentryFacade = new CompositeFacade(actions);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<String> containerNames = Lists.newArrayList(\"init\");\n\t\t\t\t\n\t\t\t\tString helperImageSuffix;\n\t\t\t\tif (osInfo.isWindows()) {  \n\t\t\t\t\tString windowsVersion = OsInfo.WINDOWS_VERSIONS.get(osInfo.getWindowsBuild());\n\t\t\t\t\tif (windowsVersion != null)\n\t\t\t\t\t\thelperImageSuffix = \"windows-\" + windowsVersion.toLowerCase();\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow new ExplicitException(\"Unsupported windows build number: \" + osInfo.getWindowsBuild());\n\t\t\t\t} else {\n\t\t\t\t\thelperImageSuffix = \"linux\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString helperImage = IMAGE_REPO_PREFIX + \"-\" + helperImageSuffix + \":\" + KubernetesHelper.getVersion();\n\t\t\t\t\n\t\t\t\tList<Map<Object, Object>> commonEnvs = new ArrayList<>();\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_SERVER_URL, \n\t\t\t\t\t\t\"value\", getServerUrl()));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_JOB_TOKEN, \n\t\t\t\t\t\t\"value\", jobToken));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_OS_INFO,\n\t\t\t\t\t\t\"value\", Hex.encodeHexString(SerializationUtils.serialize(osInfo))\n\t\t\t\t\t\t));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"ONEDEV_WORKSPACE\",\n\t\t\t\t\t\t\"value\", containerWorkspace\n\t\t\t\t\t\t));\n\n\t\t\t\tentryFacade.traverse(new LeafVisitor<Void>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Void visit(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\tString containerName = getContainerName(position);\n\t\t\t\t\t\tcontainerNames.add(containerName);\n\t\t\t\t\t\tMap<Object, Object> stepContainerSpec;\n\t\t\t\t\t\tif (facade instanceof CommandFacade) {\n\t\t\t\t\t\t\tCommandFacade commandFacade = (CommandFacade) facade;\n\t\t\t\t\t\t\tOsExecution execution = commandFacade.getExecution(osInfo);\n\t\t\t\t\t\t\tif (execution.getImage() == null) {\n\t\t\t\t\t\t\t\tthrow new ExplicitException(\"This step can only be executed by server shell \"\n\t\t\t\t\t\t\t\t\t\t+ \"executor or remote shell executor\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", execution.getImage());\n\t\t\t\t\t\t\tif (commandFacade.isUseTTY())\n\t\t\t\t\t\t\t\tstepContainerSpec.put(\"tty\", true);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t} else if (facade instanceof BuildImageFacade) {\n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", helperImage);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t} else if (facade instanceof RunContainerFacade) {\n\t\t\t\t\t\t\tRunContainerFacade runContainerFacade = (RunContainerFacade) facade;\n\t\t\t\t\t\t\tOsContainer container = runContainerFacade.getContainer(osInfo); \n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", container.getImage());\n\t\t\t\t\t\t\tif (runContainerFacade.isUseTTY())\n\t\t\t\t\t\t\t\tstepContainerSpec.put(\"tty\", true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<Object> volumeMounts = new ArrayList<>(commonVolumeMounts);\n\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: container.getVolumeMounts().entrySet()) {\n\t\t\t\t\t\t\t\tString subPath = StringUtils.stripStart(entry.getKey(), \"/\\\\\");\n\t\t\t\t\t\t\t\tif (osInfo.isWindows())\n\t\t\t\t\t\t\t\t\tsubPath = \"workspace\\\\\" + subPath;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsubPath = \"workspace/\" + subPath;\n\t\t\t\t\t\t\t\tvolumeMounts.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\t\t\t\t\"mountPath\", entry.getValue(),\n\t\t\t\t\t\t\t\t\t\t\"subPath\", subPath));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", volumeMounts);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<Map<Object, Object>> envs = new ArrayList<>(commonEnvs);\n\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: container.getEnvMap().entrySet()) {\n\t\t\t\t\t\t\t\tenvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\t\"name\", entry.getKey(), \n\t\t\t\t\t\t\t\t\t\t\"value\", entry.getValue()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", envs);\n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", helperImage);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tString positionStr = stringifyPosition(position);\n\t\t\t\t\t\tif (osInfo.isLinux()) {\n\t\t\t\t\t\t\tstepContainerSpec.put(\"command\", Lists.newArrayList(\"sh\"));\n\t\t\t\t\t\t\tstepContainerSpec.put(\"args\", Lists.newArrayList(containerCommandHome + \"/\" + positionStr + \".sh\"));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepContainerSpec.put(\"command\", Lists.newArrayList(\"cmd\"));\n\t\t\t\t\t\t\tstepContainerSpec.put(\"args\", Lists.newArrayList(\"/c\", containerCommandHome + \"\\\\\" + positionStr + \".bat\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontainerSpecs.add(stepContainerSpec);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new ArrayList<>());\n\t\t\t\t\n\t\t\t\tString k8sHelperClassPath;\n\t\t\t\tif (osInfo.isLinux()) {\n\t\t\t\t\tk8sHelperClassPath = \"/k8s-helper/*\";\n\t\t\t\t} else {\n\t\t\t\t\tk8sHelperClassPath = \"C:\\\\k8s-helper\\\\*\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<String> sidecarArgs = Lists.newArrayList(\n\t\t\t\t\t\t\"-classpath\", k8sHelperClassPath,\n\t\t\t\t\t\t\"io.onedev.k8shelper.SideCar\");\n\t\t\t\tList<String> initArgs = Lists.newArrayList(\n\t\t\t\t\t\t\"-classpath\", k8sHelperClassPath, \n\t\t\t\t\t\t\"io.onedev.k8shelper.Init\");\n\t\t\t\tif (jobContext == null) {\n\t\t\t\t\tsidecarArgs.add(\"test\");\n\t\t\t\t\tinitArgs.add(\"test\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<Map<Object, Object>> initEnvs = new ArrayList<>(commonEnvs);\n\t\t\t\tList<RegistryLoginFacade> registryLogins = new ArrayList<>();\n\t\t\t\tfor (RegistryLogin login: getRegistryLogins())\n\t\t\t\t\tregistryLogins.add(new RegistryLoginFacade(login.getRegistryUrl(), login.getUserName(), login.getPassword()));\n\t\t\t\tinitEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", KubernetesHelper.ENV_REGISTRY_LOGINS,\n\t\t\t\t\t\t\"value\", Hex.encodeHexString(SerializationUtils.serialize((Serializable) registryLogins))\n\t\t\t\t\t\t));\n\t\t\t\tMap<Object, Object> initContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\"name\", \"init\", \n\t\t\t\t\t\t\"image\", helperImage, \n\t\t\t\t\t\t\"command\", Lists.newArrayList(\"java\"), \n\t\t\t\t\t\t\"args\", initArgs,\n\t\t\t\t\t\t\"env\", initEnvs,\n\t\t\t\t\t\t\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\n\t\t\t\tMap<Object, Object> sidecarContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\"name\", \"sidecar\", \n\t\t\t\t\t\t\"image\", helperImage, \n\t\t\t\t\t\t\"command\", Lists.newArrayList(\"java\"), \n\t\t\t\t\t\t\"args\", sidecarArgs, \n\t\t\t\t\t\t\"env\", commonEnvs, \n\t\t\t\t\t\t\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tsidecarContainerSpec.put(\"resources\", CollectionUtils.newLinkedHashMap(\"requests\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"cpu\", jobContext.getCpuRequirement() + \"m\", \n\t\t\t\t\t\t\t\"memory\", jobContext.getMemoryRequirement() + \"m\")));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontainerSpecs.add(sidecarContainerSpec);\n\t\t\t\tcontainerNames.add(\"sidecar\");\n\t\t\t\t\n\t\t\t\tpodSpec.put(\"containers\", containerSpecs);\n\t\t\t\tpodSpec.put(\"initContainers\", Lists.<Object>newArrayList(initContainerSpec));\n\n\t\t\t\tif (imagePullSecretName != null)\n\t\t\t\t\tpodSpec.put(\"imagePullSecrets\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\"name\", imagePullSecretName)));\n\t\t\t\tpodSpec.put(\"restartPolicy\", \"Never\");\t\t\n\t\t\t\t\n\t\t\t\tif (!getNodeSelector().isEmpty())\n\t\t\t\t\tpodSpec.put(\"nodeSelector\", toMap(getNodeSelector()));\n\t\t\t\t\n\t\t\t\tMap<Object, Object> buildHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\"emptyDir\", CollectionUtils.newLinkedHashMap());\n\t\t\t\tMap<Object, Object> userHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"emptyDir\", CollectionUtils.newLinkedHashMap());\n\t\t\t\tMap<Object, Object> cacheHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"cache-home\", \n\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"path\", osInfo.getCacheHome(), \n\t\t\t\t\t\t\t\t\"type\", \"DirectoryOrCreate\"));\n\t\t\t\tList<Object> volumes = Lists.<Object>newArrayList(buildHomeVolume, userHomeVolume, cacheHomeVolume);\n\t\t\t\tif (trustCertsConfigMapName != null) {\n\t\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"trust-certs-home\", \n\t\t\t\t\t\t\t\"configMap\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", trustCertsConfigMapName)));\n\t\t\t\t}\n\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"docker-sock\", \n\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"path\", dockerSock)));\n\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"containerd-sock\", \n\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"path\", containerdSock)));\n\t\t\t\tpodSpec.put(\"volumes\", volumes);\n\n\t\t\t\tString podName = \"job\";\n\t\t\t\t\n\t\t\t\tMap<Object, Object> podDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\t\"kind\", \"Pod\", \n\t\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"name\", podName, \n\t\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\t\"spec\", podSpec);\n\t\t\t\t\n\t\t\t\tcreateResource(podDef, Sets.newHashSet(), jobLogger);\n\t\t\t\tString podFQN = namespace + \"/\" + podName;\n\t\t\t\t\n\t\t\t\tAtomicReference<String> nodeNameRef = new AtomicReference<>(null);\n\t\t\t\t\n\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\tif (nodeName != null) {\n\t\t\t\t\t\t\tnodeNameRef.set(nodeName);\n\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, jobLogger);\n\t\t\t\t\n\t\t\t\tif (jobContext != null)\n\t\t\t\t\tjobContext.notifyJobRunning(null);\n\n\t\t\t\tString nodeName = Preconditions.checkNotNull(nodeNameRef.get());\n\t\t\t\tjobLogger.log(\"Running job on node \" + nodeName + \"...\");\n\t\t\t\t\n\t\t\t\tjobLogger.log(\"Starting job containers...\");\n\t\t\t\t\n\t\t\t\tAtomicBoolean failed = new AtomicBoolean(false);\n\t\t\t\t\n\t\t\t\tfor (String containerName: containerNames) {\n\t\t\t\t\tlogger.debug(\"Waiting for start of container (pod: {}, container: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\t\tContainerError error = getContainerErrors(containerStatusNodes).get(containerName);\n\t\t\t\t\t\t\tif (error != null) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * For non-fatal errors (command exited with non-zero code), we abort the watch \n\t\t\t\t\t\t\t\t * without an exception, and will continue to collect the container log which \n\t\t\t\t\t\t\t\t * might contain error details\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (error.isFatal()) {\n\t\t\t\t\t\t\t\t\tString errorMessage;\n\t\t\t\t\t\t\t\t\tif (containerName.startsWith(\"step-\")) {\n\t\t\t\t\t\t\t\t\t\tList<Integer> position = KubernetesHelper.parsePosition(containerName.substring(\"step-\".length()));\n\t\t\t\t\t\t\t\t\t\terrorMessage = \"Step \\\"\" + entryFacade.getNamesAsString(position) \n\t\t\t\t\t\t\t\t\t\t\t\t+ \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\terrorMessage = containerName + \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn new Abort(errorMessage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (getStartedContainers(containerStatusNodes).contains(containerName)) {\n\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tlogger.debug(\"Collecting log of container (pod: {}, container: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\tcollectContainerLog(namespace, podName, containerName, LOG_END_MESSAGE, jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tlogger.debug(\"Waiting for stop of container (pod: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\t\tContainerError error = getContainerErrors(containerStatusNodes).get(containerName);\n\t\t\t\t\t\t\tif (error != null) {\n\t\t\t\t\t\t\t\tString errorMessage;\n\t\t\t\t\t\t\t\tif (containerName.startsWith(\"step-\")) {\n\t\t\t\t\t\t\t\t\tList<Integer> position = KubernetesHelper.parsePosition(containerName.substring(\"step-\".length()));\n\t\t\t\t\t\t\t\t\terrorMessage = \"Step \\\"\" + entryFacade.getNamesAsString(position) \n\t\t\t\t\t\t\t\t\t\t\t+ \" is failed: \" + error.getMessage();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\terrorMessage = containerName + \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * We abort the watch with an exception for two reasons:\n\t\t\t\t\t\t\t\t * \n\t\t\t\t\t\t\t\t * 1. Init container error will prevent other containers to start. \n\t\t\t\t\t\t\t\t * 2. Step containers may not run command in case of fatal error and sidecar \n\t\t\t\t\t\t\t\t *    container will wait indefinitely on the successful/failed mark file in \n\t\t\t\t\t\t\t\t *    this case, causing log following last indefinitely \n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (error.isFatal() || containerName.equals(\"init\")) {\n\t\t\t\t\t\t\t\t\treturn new Abort(errorMessage);\n\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\tjobLogger.error(errorMessage);\n\t\t\t\t\t\t\t\t\tfailed.set(true);\n\t\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} else if (getStoppedContainers(containerStatusNodes).contains(containerName)) {\n\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, jobLogger);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (failed.get())\n\t\t\t\t\tthrow new FailedException();\n\t\t\t} finally {\n\t\t\t\tdeleteNamespace(namespace, jobLogger);\n\t\t\t}\t\t\t\n\t\t} finally {\n\t\t\tif (getClusterRole() != null)\n\t\t\t\tdeleteClusterRoleBinding(namespace, jobLogger);\n\t\t}\n\t}\n\t\n\tprivate String getContainerName(List<Integer> stepPosition) {\n\t\treturn \"step-\" + stringifyPosition(stepPosition);\n\t}\n\t\n\tprivate Map<String, ContainerError> getContainerErrors(Collection<JsonNode> containerStatusNodes) {\n\t\tMap<String, ContainerError> containerErrors = new HashMap<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tString containerName = containerStatusNode.get(\"name\").asText();\n\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tJsonNode waitingNode = stateNode.get(\"waiting\");\n\t\t\tif (waitingNode != null) {\n\t\t\t\tString reason = waitingNode.get(\"reason\").asText();\n\t\t\t\tif (reason.equals(\"ErrImagePull\") || reason.equals(\"InvalidImageName\") \n\t\t\t\t\t\t|| reason.equals(\"ImageInspectError\") || reason.equals(\"ErrImageNeverPull\")\n\t\t\t\t\t\t|| reason.equals(\"RegistryUnavailable\")) {\n\t\t\t\t\tJsonNode messageNode = waitingNode.get(\"message\");\n\t\t\t\t\tif (messageNode != null)\n\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(messageNode.asText(), true));\n\t\t\t\t\telse\n\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(reason, true));\n\t\t\t\t}\n\t\t\t} \n\n\t\t\tif (!containerErrors.containsKey(containerName)) {\n\t\t\t\tJsonNode terminatedNode = stateNode.get(\"terminated\");\n\t\t\t\tif (terminatedNode != null) {\n\t\t\t\t\tString reason;\n\t\t\t\t\tJsonNode reasonNode = terminatedNode.get(\"reason\");\n\t\t\t\t\tif (reasonNode != null)\n\t\t\t\t\t\treason = reasonNode.asText();\n\t\t\t\t\telse\n\t\t\t\t\t\treason = \"Unknown reason\";\n\t\t\t\t\t\n\t\t\t\t\tif (!reason.equals(\"Completed\")) {\n\t\t\t\t\t\tJsonNode messageNode = terminatedNode.get(\"message\");\n\t\t\t\t\t\tif (messageNode != null) {\n\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(messageNode.asText(), true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tJsonNode exitCodeNode = terminatedNode.get(\"exitCode\");\n\t\t\t\t\t\t\tif (exitCodeNode != null && exitCodeNode.asInt() != 0)\n\t\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(\"Command failed with exit code \" + exitCodeNode.asText(), false));\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(reason, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containerErrors;\n\t}\n\t\n\tprivate Collection<String> getStartedContainers(Collection<JsonNode> containerStatusNodes) {\n\t\tCollection<String> startedContainers = new HashSet<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tif (stateNode.get(\"running\") != null || stateNode.get(\"terminated\") != null) \n\t\t\t\tstartedContainers.add(containerStatusNode.get(\"name\").asText());\t\t\t\t\t\n\t\t}\n\t\treturn startedContainers;\n\t}\n\t\n\tprivate Collection<String> getStoppedContainers(Collection<JsonNode> containerStatusNodes) {\n\t\tCollection<String> stoppedContainers = new ArrayList<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tif (stateNode.get(\"terminated\") != null)\n\t\t\t\tstoppedContainers.add(containerStatusNode.get(\"name\").asText());\n\t\t}\n\t\treturn stoppedContainers;\n\t}\n\t\n\tprivate void checkConditions(JsonNode statusNode, TaskLogger jobLogger) {\n\t\tJsonNode conditionsNode = statusNode.get(\"conditions\");\n\t\tif (conditionsNode != null) {\n\t\t\tfor (JsonNode conditionNode: conditionsNode) {\n\t\t\t\tif (conditionNode.get(\"type\").asText().equals(\"PodScheduled\") \n\t\t\t\t\t\t&& conditionNode.get(\"status\").asText().equals(\"False\")\n\t\t\t\t\t\t&& conditionNode.get(\"reason\").asText().equals(\"Unschedulable\")) {\n\t\t\t\t\tjobLogger.warning(\"Kubernetes: \" + conditionNode.get(\"message\").asText());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void watchPod(String namespace, String podName, AbortChecker abortChecker, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\t\n\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\t\n\t\tAtomicReference<Abort> abortRef = new AtomicReference<>(null);\n\t\t\n\t\tStringBuilder json = new StringBuilder();\n\t\tkubectl.addArgs(\"get\", \"pod\", podName, \"-n\", namespace, \"--watch\", \"-o\", \"json\");\n\t\t\n\t\tkubectl.timeout(POD_WATCH_TIMEOUT);\n\t\t\n\t\tThread thread = Thread.currentThread();\n\t\t\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tkubectl.execute(new LineConsumer() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tif (line.startsWith(\"{\")) {\n\t\t\t\t\t\t\tjson.append(\"{\").append(\"\\n\");\n\t\t\t\t\t\t} else if (line.startsWith(\"}\")) {\n\t\t\t\t\t\t\tjson.append(\"}\");\n\t\t\t\t\t\t\tlogger.trace(\"Pod watching output:\\n\" + json.toString());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tprocess(mapper.readTree(json.toString()));\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tlogger.error(\"Error processing pod watching output\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjson.setLength(0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjson.append(line).append(\"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void process(JsonNode podNode) {\n\t\t\t\t\t\tJsonNode statusNode = podNode.get(\"status\");\n\t\t\t\t\t\tcheckConditions(statusNode, jobLogger);\n\n\t\t\t\t\t\tif (abortRef.get() == null) {\n\t\t\t\t\t\t\tString nodeName = null;\n\t\t\t\t\t\t\tJsonNode specNode = podNode.get(\"spec\");\n\t\t\t\t\t\t\tif (specNode != null) {\n\t\t\t\t\t\t\t\tJsonNode nodeNameNode = specNode.get(\"nodeName\");\n\t\t\t\t\t\t\t\tif (nodeNameNode != null)\n\t\t\t\t\t\t\t\t\tnodeName = nodeNameNode.asText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCollection<JsonNode> containerStatusNodes = new ArrayList<>();\n\t\t\t\t\t\t\tJsonNode initContainerStatusesNode = statusNode.get(\"initContainerStatuses\");\n\t\t\t\t\t\t\tif (initContainerStatusesNode != null) {\n\t\t\t\t\t\t\t\tfor (JsonNode containerStatusNode: initContainerStatusesNode)\n\t\t\t\t\t\t\t\t\tcontainerStatusNodes.add(containerStatusNode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tJsonNode containerStatusesNode = statusNode.get(\"containerStatuses\");\n\t\t\t\t\t\t\tif (containerStatusesNode != null) {\n\t\t\t\t\t\t\t\tfor (JsonNode containerStatusNode: containerStatusesNode)\n\t\t\t\t\t\t\t\t\tcontainerStatusNodes.add(containerStatusNode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tabortRef.set(abortChecker.check(nodeName, containerStatusNodes));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (abortRef.get() != null) \n\t\t\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new LineConsumer() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}).checkReturnCode();\n\t\t\t\t\n\t\t\t\tthrow new ExplicitException(\"Unexpected end of pod watching\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tAbort abort = abortRef.get();\n\t\t\t\tif (abort != null) {\n\t\t\t\t\tif (abort.getErrorMessage() != null)\n\t\t\t\t\t\tthrow new ExplicitException(abort.getErrorMessage());\n\t\t\t\t\telse \n\t\t\t\t\t\tbreak;\n\t\t\t\t} else if (ExceptionUtils.find(e, TimeoutException.class) == null) { \n\t\t\t\t\t// If there is no output for some time, let's re-watch as sometimes \n\t\t\t\t\t// pod status update is not pushed\n\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t}\n\n\tprivate void collectContainerLog(String namespace, String podName, String containerName, \n\t\t\t@Nullable String logEndMessage, TaskLogger jobLogger) {\n\t\tThread thread = Thread.currentThread();\n\t\tAtomicReference<Boolean> abortError = new AtomicReference<>(false);\n\t\tAtomicReference<Instant> lastInstantRef = new AtomicReference<>(null);\n\t\tAtomicBoolean endOfLogSeenRef = new AtomicBoolean(false);\n\t\t\n\t\twhile (true) {\n\t\t\tCommandline kubectl = newKubeCtl();\n\t\t\tkubectl.addArgs(\"logs\", podName, \"-c\", containerName, \"-n\", namespace, \"--follow\", \"--timestamps=true\");\n\t\t\tif (lastInstantRef.get() != null)\n\t\t\t\tkubectl.addArgs(\"--since-time=\" + DateTimeFormatter.ISO_INSTANT.format(lastInstantRef.get()));\n\t\t\t\n\t\t\tclass Logger extends LineConsumer {\n\n\t\t\t\tprivate final String sessionId = UUID.randomUUID().toString();\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tif (line.contains(\"rpc error:\") && line.contains(\"No such container:\") \n\t\t\t\t\t\t\t|| line.contains(\"Unable to retrieve container logs for\")) { \n\t\t\t\t\t\tlogger.debug(line);\n\t\t\t\t\t} else if (logEndMessage != null && line.contains(logEndMessage)) {\n\t\t\t\t\t\tendOfLogSeenRef.set(true);\n\t\t\t\t\t\tString lastLogMessage = StringUtils.substringBefore(line, logEndMessage);\n\t\t\t\t\t\tif (StringUtils.substringAfter(lastLogMessage, \" \").length() != 0)\n\t\t\t\t\t\t\tconsume(lastLogMessage);\n\t\t\t\t\t} else if (line.startsWith(\"Error from server\") || line.startsWith(\"error:\")) {\n\t\t\t\t\t\tjobLogger.error(line);\n\t\t\t\t\t\tif (!abortError.get()) {\n\t\t\t\t\t\t\tabortError.set(true);\n\t\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line.contains(\" \")) {\n\t\t\t\t\t\tString timestamp = StringUtils.substringBefore(line, \" \");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tInstant instant = Instant.from(DateTimeFormatter.ISO_INSTANT.parse(timestamp));\n\t\t\t\t\t\t\tif (lastInstantRef.get() == null || lastInstantRef.get().isBefore(instant))\n\t\t\t\t\t\t\t\tlastInstantRef.set(instant);\n\t\t\t\t\t\t\tjobLogger.log(StringUtils.substringAfter(line, \" \"), sessionId);\n\t\t\t\t\t\t} catch (DateTimeParseException e) {\n\t\t\t\t\t\t\tjobLogger.log(line, sessionId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobLogger.log(line, sessionId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\ttry {\n\t\t\t\tkubectl.execute(new Logger(), new Logger()).checkReturnCode();\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (!abortError.get()) \n\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t}\t\t\n\t\t\t\n\t\t\tif (logEndMessage == null || endOfLogSeenRef.get() || abortError.get() != null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static interface AbortChecker {\n\t\t\n\t\t@Nullable\n\t\tAbort check(@Nullable String nodeName, Collection<JsonNode> containerStatusNodes);\n\t\t\n\t}\n\t\n\tprivate static class Abort {\n\t\t\n\t\tprivate final String errorMessage;\n\t\t\n\t\tpublic Abort(@Nullable String errorMessage) {\n\t\t\tthis.errorMessage = errorMessage;\n\t\t}\n\t\t\n\t\t@Nullable\n\t\tpublic String getErrorMessage() {\n\t\t\treturn errorMessage;\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static class ContainerError {\n\t\t\n\t\tprivate final String message;\n\t\t\n\t\tprivate final boolean fatal;\n\t\t\n\t\tpublic ContainerError(String message, boolean fatal) {\n\t\t\tthis.message = message;\n\t\t\tthis.fatal = fatal;\n\t\t}\n\n\t\tpublic String getMessage() {\n\t\t\treturn message;\n\t\t}\n\n\t\tpublic boolean isFatal() {\n\t\t\treturn fatal;\n\t\t}\n\t\t\n\t}\n\t\n\t@Editable(name=\"Specify a Docker Image to Test Against\")\n\tpublic static class TestData implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate String dockerImage;\n\n\t\t@Editable\n\t\t@OmitName\n\t\t@NotEmpty\n\t\tpublic String getDockerImage() {\n\t\t\treturn dockerImage;\n\t\t}\n\n\t\tpublic void setDockerImage(String dockerImage) {\n\t\t\tthis.dockerImage = dockerImage;\n\t\t}\n\t\t\n\t}\n\t\n}", "package io.onedev.server.plugin.executor.remotedocker;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\n\nimport org.eclipse.jetty.websocket.api.Session;\n\nimport io.onedev.agent.AgentData;\nimport io.onedev.agent.Message;\nimport io.onedev.agent.MessageType;\nimport io.onedev.agent.WebsocketUtils;\nimport io.onedev.agent.job.DockerJobData;\nimport io.onedev.agent.job.TestDockerJobData;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.job.resource.AgentAwareRunnable;\nimport io.onedev.server.job.resource.ResourceManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor;\nimport io.onedev.server.search.entity.agent.AgentQuery;\nimport io.onedev.server.tasklog.JobLogManager;\nimport io.onedev.server.util.CollectionUtils;\nimport io.onedev.server.web.editable.annotation.Editable;\n\n@Editable(order=210, description=\"This executor runs build jobs as docker containers on remote machines via <a href='/administration/agents' target='_blank'>agents</a>\")\npublic class RemoteDockerExecutor extends ServerDockerExecutor {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tprivate String agentQuery;\n\t\n\t@Editable(order=390, name=\"Agent Selector\", placeholder=\"Any agent\", \n\t\t\tdescription=\"Specify agents applicable for this executor\")\n\t@io.onedev.server.web.editable.annotation.AgentQuery(forExecutor=true)\n\tpublic String getAgentQuery() {\n\t\treturn agentQuery;\n\t}\n\n\tpublic void setAgentQuery(String agentQuery) {\n\t\tthis.agentQuery = agentQuery;\n\t}\n\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\tAgentQuery parsedQeury = AgentQuery.parse(agentQuery, true);\n\t\tTaskLogger jobLogger = jobContext.getLogger();\n\t\tOneDev.getInstance(ResourceManager.class).run(new AgentAwareRunnable() {\n\n\t\t\t@Override\n\t\t\tpublic void runOn(Long agentId, Session agentSession, AgentData agentData) {\n\t\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, agent: %s)...\", getName(), agentData.getName()));\n\t\t\t\tjobContext.notifyJobRunning(agentId);\n\n\t\t\t\tList<Map<String, String>> registryLogins = new ArrayList<>();\n\t\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\t\tregistryLogins.add(CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\"url\", login.getRegistryUrl(), \n\t\t\t\t\t\t\t\"userName\", login.getUserName(), \n\t\t\t\t\t\t\t\"password\", login.getPassword()));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<Map<String, Serializable>> services = new ArrayList<>();\n\t\t\t\tfor (Service service: jobContext.getServices())\n\t\t\t\t\tservices.add(service.toMap());\n\t\t\t\t\n\t\t\t\tList<String> trustCertContent = getTrustCertContent();\n\t\t\t\tDockerJobData jobData = new DockerJobData(jobToken, getName(), jobContext.getProjectPath(), \n\t\t\t\t\t\tjobContext.getProjectId(), jobContext.getCommitId().name(), jobContext.getBuildNumber(), \n\t\t\t\t\t\tjobContext.getActions(), jobContext.getRetried(), services, registryLogins, \n\t\t\t\t\t\ttrustCertContent, getRunOptions());\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tWebsocketUtils.call(agentSession, jobData, 0);\n\t\t\t\t} catch (InterruptedException | TimeoutException e) {\n\t\t\t\t\tnew Message(MessageType.CANCEL_JOB, jobToken).sendBy(agentSession);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}, new HashMap<>(), parsedQeury, jobContext.getResourceRequirements(), jobLogger);\n\t\t\n\t}\n\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\tJobLogManager logManager = OneDev.getInstance(JobLogManager.class);\n\t\tString jobToken = UUID.randomUUID().toString();\n\t\tlogManager.registerLogger(jobToken, jobLogger);\n\t\ttry {\n\t\t\tAgentQuery parsedQeury = AgentQuery.parse(agentQuery, true);\n\t\t\t\n\t\t\tOneDev.getInstance(ResourceManager.class).run(new AgentAwareRunnable() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void runOn(Long agentId, Session agentSession, AgentData agentData) {\n\t\t\t\t\tjobLogger.log(String.format(\"Testing on agent '%s'...\", agentData.getName()));\n\t\n\t\t\t\t\tList<Map<String, String>> registryLogins = new ArrayList<>();\n\t\t\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\t\t\tregistryLogins.add(CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\"url\", login.getRegistryUrl(), \n\t\t\t\t\t\t\t\t\"userName\", login.getUserName(), \n\t\t\t\t\t\t\t\t\"password\", login.getPassword()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tTestDockerJobData jobData = new TestDockerJobData(jobToken, testData.getDockerImage(), \n\t\t\t\t\t\t\tregistryLogins, getRunOptions());\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tWebsocketUtils.call(agentSession, jobData, 0);\n\t\t\t\t\t} catch (InterruptedException | TimeoutException e) {\n\t\t\t\t\t\tnew Message(MessageType.CANCEL_JOB, jobToken).sendBy(agentSession);\n\t\t\t\t\t} \n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new HashMap<>(), parsedQeury, new HashMap<>(), jobLogger);\n\t\t} finally {\n\t\t\tlogManager.deregisterLogger(jobToken);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getDockerExecutable() {\n\t\treturn super.getDockerExecutable();\n\t}\n\n}", "package io.onedev.server.plugin.executor.serverdocker;\n\nimport static io.onedev.agent.DockerExecutorUtils.cleanDirAsRoot;\nimport static io.onedev.agent.DockerExecutorUtils.createNetwork;\nimport static io.onedev.agent.DockerExecutorUtils.deleteNetwork;\nimport static io.onedev.agent.DockerExecutorUtils.isUseProcessIsolation;\nimport static io.onedev.agent.DockerExecutorUtils.newDockerKiller;\nimport static io.onedev.agent.DockerExecutorUtils.startService;\nimport static io.onedev.k8shelper.KubernetesHelper.cloneRepository;\nimport static io.onedev.k8shelper.KubernetesHelper.installGitCert;\nimport static io.onedev.k8shelper.KubernetesHelper.stringifyPosition;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport javax.annotation.Nullable;\nimport javax.validation.ConstraintValidatorContext;\n\nimport org.apache.commons.lang3.SystemUtils;\nimport org.hibernate.validator.constraints.NotEmpty;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Preconditions;\n\nimport io.onedev.agent.DockerExecutorUtils;\nimport io.onedev.agent.ExecutorUtils;\nimport io.onedev.agent.job.FailedException;\nimport io.onedev.commons.bootstrap.Bootstrap;\nimport io.onedev.commons.loader.AppLoader;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.PathUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.commons.utils.command.Commandline;\nimport io.onedev.commons.utils.command.ExecutionResult;\nimport io.onedev.commons.utils.command.LineConsumer;\nimport io.onedev.k8shelper.BuildImageFacade;\nimport io.onedev.k8shelper.CacheAllocationRequest;\nimport io.onedev.k8shelper.CacheInstance;\nimport io.onedev.k8shelper.CheckoutFacade;\nimport io.onedev.k8shelper.CloneInfo;\nimport io.onedev.k8shelper.CommandFacade;\nimport io.onedev.k8shelper.CompositeFacade;\nimport io.onedev.k8shelper.JobCache;\nimport io.onedev.k8shelper.KubernetesHelper;\nimport io.onedev.k8shelper.LeafFacade;\nimport io.onedev.k8shelper.LeafHandler;\nimport io.onedev.k8shelper.OsContainer;\nimport io.onedev.k8shelper.OsExecution;\nimport io.onedev.k8shelper.OsInfo;\nimport io.onedev.k8shelper.RunContainerFacade;\nimport io.onedev.k8shelper.ServerSideFacade;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.buildspec.job.JobManager;\nimport io.onedev.server.git.config.GitConfig;\nimport io.onedev.server.job.resource.ResourceManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor.TestData;\nimport io.onedev.server.util.validation.Validatable;\nimport io.onedev.server.util.validation.annotation.ClassValidating;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Horizontal;\nimport io.onedev.server.web.editable.annotation.OmitName;\nimport io.onedev.server.web.util.Testable;\n\n@Editable(order=ServerDockerExecutor.ORDER, name=\"Server Docker Executor\", description=\"This executor runs build jobs as docker containers on OneDev server\")\n@ClassValidating\n@Horizontal\npublic class ServerDockerExecutor extends JobExecutor implements Testable<TestData>, Validatable {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tstatic final int ORDER=50;\n\n\tprivate static final Object cacheHomeCreationLock = new Object();\n\t\n\tprivate List<RegistryLogin> registryLogins = new ArrayList<>();\n\t\n\tprivate String runOptions;\n\t\n\tprivate String dockerExecutable;\n\t\n\tprivate static transient volatile String hostInstallPath;\n\n\t@Editable(order=400, description=\"Specify login information for docker registries if necessary\")\n\tpublic List<RegistryLogin> getRegistryLogins() {\n\t\treturn registryLogins;\n\t}\n\n\tpublic void setRegistryLogins(List<RegistryLogin> registryLogins) {\n\t\tthis.registryLogins = registryLogins;\n\t}\n\n\t@Editable(order=50050, group=\"More Settings\", description=\"Optionally specify options to run container. For instance, you may use <tt>-m 2g</tt> \"\n\t\t\t+ \"to limit memory of created container to be 2 giga bytes\")\n\tpublic String getRunOptions() {\n\t\treturn runOptions;\n\t}\n\n\tpublic void setRunOptions(String runOptions) {\n\t\tthis.runOptions = runOptions;\n\t}\n\n\t@Editable(order=50100, group=\"More Settings\", placeholder=\"Use default\", description=\"\"\n\t\t\t+ \"Optionally specify docker executable, for instance <i>/usr/local/bin/docker</i>. \"\n\t\t\t+ \"Leave empty to use docker executable in PATH\")\n\tpublic String getDockerExecutable() {\n\t\treturn dockerExecutable;\n\t}\n\n\tpublic void setDockerExecutable(String dockerExecutable) {\n\t\tthis.dockerExecutable = dockerExecutable;\n\t}\n\n\tprivate Commandline newDocker() {\n\t\tif (getDockerExecutable() != null)\n\t\t\treturn new Commandline(getDockerExecutable());\n\t\telse if (SystemUtils.IS_OS_MAC_OSX && new File(\"/usr/local/bin/docker\").exists())\n\t\t\treturn new Commandline(\"/usr/local/bin/docker\");\n\t\telse\n\t\t\treturn new Commandline(\"docker\");\n\t}\n\t\n\tprivate File getCacheHome() {\n\t\tFile file = new File(Bootstrap.getSiteDir(), \"cache\");\n\t\tif (!file.exists()) synchronized (cacheHomeCreationLock) {\n\t\t\tFileUtils.createDir(file);\n\t\t}\n\t\treturn file;\n\t}\n\t\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\tif (OneDev.getK8sService() != null) {\n\t\t\tthrow new ExplicitException(\"\"\n\t\t\t\t\t+ \"OneDev running inside kubernetes cluster does not support server docker executor. \"\n\t\t\t\t\t+ \"Please use kubernetes executor instead\");\n\t\t}\n\t\tFile hostBuildHome = FileUtils.createTempDir(\"onedev-build\");\n\t\ttry {\n\t\t\tTaskLogger jobLogger = jobContext.getLogger();\n\t\t\tOneDev.getInstance(ResourceManager.class).run(new Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tString network = getName() + \"-\" + jobContext.getProjectId() + \"-\" \n\t\t\t\t\t\t\t+ jobContext.getBuildNumber() + \"-\" + jobContext.getRetried();\n\n\t\t\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, network: %s)...\", getName(), network));\n\t\t\t\t\tjobContext.notifyJobRunning(null);\n\t\t\t\t\t\n\t\t\t\t\tJobManager jobManager = OneDev.getInstance(JobManager.class);\t\t\n\t\t\t\t\tFile hostCacheHome = getCacheHome();\n\t\t\t\t\t\n\t\t\t\t\tjobLogger.log(\"Setting up job cache...\") ;\n\t\t\t\t\tJobCache cache = new JobCache(hostCacheHome) {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected Map<CacheInstance, String> allocate(CacheAllocationRequest request) {\n\t\t\t\t\t\t\treturn jobManager.allocateJobCaches(jobToken, request);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void clean(File cacheDir) {\n\t\t\t\t\t\t\tcleanDirAsRoot(cacheDir, newDocker(), Bootstrap.isInDocker());\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t\tcache.init(false);\n\n\t\t\t\t\tlogin(jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tcreateNetwork(newDocker(), network, jobLogger);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tOsInfo osInfo = OneDev.getInstance(OsInfo.class);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Service jobService: jobContext.getServices()) {\n\t\t\t\t\t\t\tjobLogger.log(\"Starting service (name: \" + jobService.getName() + \", image: \" + jobService.getImage() + \")...\");\n\t\t\t\t\t\t\tstartService(newDocker(), network, jobService.toMap(), osInfo, jobLogger);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tFile hostWorkspace = new File(hostBuildHome, \"workspace\");\n\t\t\t\t\t\tFileUtils.createDir(hostWorkspace);\n\t\t\t\t\t\t\n\t\t\t\t\t\tAtomicReference<File> hostAuthInfoHome = new AtomicReference<>(null);\n\t\t\t\t\t\ttry {\t\t\t\t\t\t\n\t\t\t\t\t\t\tcache.installSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tjobLogger.log(\"Copying job dependencies...\");\n\t\t\t\t\t\t\tjobContext.copyDependencies(hostWorkspace);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString containerBuildHome;\n\t\t\t\t\t\t\tString containerWorkspace;\n\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\t\t\tcontainerBuildHome = \"C:\\\\onedev-build\";\n\t\t\t\t\t\t\t\tcontainerWorkspace = \"C:\\\\onedev-build\\\\workspace\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainerBuildHome = \"/onedev-build\";\n\t\t\t\t\t\t\t\tcontainerWorkspace = \"/onedev-build/workspace\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tjobContext.reportJobWorkspace(containerWorkspace);\n\t\t\t\t\t\t\tCompositeFacade entryFacade = new CompositeFacade(jobContext.getActions());\n\t\t\t\t\t\t\tboolean successful = entryFacade.execute(new LeafHandler() {\n\n\t\t\t\t\t\t\t\tprivate int runStepContainer(String image, @Nullable String entrypoint, \n\t\t\t\t\t\t\t\t\t\tList<String> arguments, Map<String, String> environments, \n\t\t\t\t\t\t\t\t\t\t@Nullable String workingDir, Map<String, String> volumeMounts, \n\t\t\t\t\t\t\t\t\t\tList<Integer> position, boolean useTTY) {\n\t\t\t\t\t\t\t\t\tString containerName = network + \"-step-\" + stringifyPosition(position);\n\t\t\t\t\t\t\t\t\tCommandline docker = newDocker();\n\t\t\t\t\t\t\t\t\tdocker.addArgs(\"run\", \"--name=\" + containerName, \"--network=\" + network);\n\t\t\t\t\t\t\t\t\tif (getRunOptions() != null)\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(StringUtils.parseQuoteTokens(getRunOptions()));\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Uninstall symbol links as docker can not process it well\n\t\t\t\t\t\t\t\t\tcache.uninstallSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(hostBuildHome.getAbsolutePath()) + \":\" + containerBuildHome);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: volumeMounts.entrySet()) {\n\t\t\t\t\t\t\t\t\t\t\tString hostPath = getHostPath(new File(hostWorkspace, entry.getKey()).getAbsolutePath());\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", hostPath + \":\" + entry.getValue());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (entrypoint != null) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-w\", containerWorkspace);\n\t\t\t\t\t\t\t\t\t\telse if (workingDir != null) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-w\", workingDir);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<CacheInstance, String> entry: cache.getAllocations().entrySet()) {\n\t\t\t\t\t\t\t\t\t\t\tString hostCachePath = entry.getKey().getDirectory(hostCacheHome).getAbsolutePath();\n\t\t\t\t\t\t\t\t\t\t\tString containerCachePath = PathUtils.resolve(containerWorkspace, entry.getValue());\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(hostCachePath) + \":\" + containerCachePath);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", \"//./pipe/docker_engine://./pipe/docker_engine\");\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", \"/var/run/docker.sock:/var/run/docker.sock\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (hostAuthInfoHome.get() != null) {\n\t\t\t\t\t\t\t\t\t\t\tString hostPath = getHostPath(hostAuthInfoHome.get().getAbsolutePath());\n\t\t\t\t\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\",  hostPath + \":C:\\\\Users\\\\ContainerAdministrator\\\\auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\",  hostPath + \":C:\\\\Users\\\\ContainerUser\\\\auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", hostPath + \":/root/auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: environments.entrySet()) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-e\", entry.getKey() + \"=\" + entry.getValue());\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-e\", \"ONEDEV_WORKSPACE=\" + containerWorkspace);\n\t\n\t\t\t\t\t\t\t\t\t\tif (useTTY)\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-t\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (entrypoint != null)\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"--entrypoint=\" + entrypoint);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (isUseProcessIsolation(newDocker(), image, osInfo, jobLogger))\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"--isolation=process\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(image);\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(arguments.toArray(new String[arguments.size()]));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tExecutionResult result = docker.execute(ExecutorUtils.newInfoLogger(jobLogger), \n\t\t\t\t\t\t\t\t\t\t\t\tExecutorUtils.newWarningLogger(jobLogger), null, newDockerKiller(newDocker(), \n\t\t\t\t\t\t\t\t\t\t\t\tcontainerName, jobLogger));\n\t\t\t\t\t\t\t\t\t\treturn result.getReturnCode();\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tcache.installSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean execute(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\t\t\t\tString stepNames = entryFacade.getNamesAsString(position);\n\t\t\t\t\t\t\t\t\tjobLogger.notice(\"Running step \\\"\" + stepNames + \"\\\"...\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (facade instanceof CommandFacade) {\n\t\t\t\t\t\t\t\t\t\tCommandFacade commandFacade = (CommandFacade) facade;\n\n\t\t\t\t\t\t\t\t\t\tOsExecution execution = commandFacade.getExecution(osInfo);\n\t\t\t\t\t\t\t\t\t\tif (execution.getImage() == null) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"This step can only be executed by server shell \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"executor or remote shell executor\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tCommandline entrypoint = DockerExecutorUtils.getEntrypoint(\n\t\t\t\t\t\t\t\t\t\t\t\thostBuildHome, commandFacade, osInfo, hostAuthInfoHome.get() != null);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tint exitCode = runStepContainer(execution.getImage(), entrypoint.executable(), \n\t\t\t\t\t\t\t\t\t\t\t\tentrypoint.arguments(), new HashMap<>(), null, new HashMap<>(), \n\t\t\t\t\t\t\t\t\t\t\t\tposition, commandFacade.isUseTTY());\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: Command exited with code \" + exitCode);\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (facade instanceof BuildImageFacade || facade instanceof BuildImageFacade) {\n\t\t\t\t\t\t\t\t\t\tDockerExecutorUtils.buildImage(newDocker(), (BuildImageFacade) facade, \n\t\t\t\t\t\t\t\t\t\t\t\thostBuildHome, jobLogger);\n\t\t\t\t\t\t\t\t\t} else if (facade instanceof RunContainerFacade) {\n\t\t\t\t\t\t\t\t\t\tRunContainerFacade rubContainerFacade = (RunContainerFacade) facade;\n\t\t\t\t\t\t\t\t\t\tOsContainer container = rubContainerFacade.getContainer(osInfo);\n\t\t\t\t\t\t\t\t\t\tList<String> arguments = new ArrayList<>();\n\t\t\t\t\t\t\t\t\t\tif (container.getArgs() != null)\n\t\t\t\t\t\t\t\t\t\t\targuments.addAll(Arrays.asList(StringUtils.parseQuoteTokens(container.getArgs())));\n\t\t\t\t\t\t\t\t\t\tint exitCode = runStepContainer(container.getImage(), null, arguments, container.getEnvMap(), \n\t\t\t\t\t\t\t\t\t\t\t\tcontainer.getWorkingDir(), container.getVolumeMounts(), position, rubContainerFacade.isUseTTY());\n\t\t\t\t\t\t\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: Container exited with code \" + exitCode);\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} else if (facade instanceof CheckoutFacade) {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tCheckoutFacade checkoutFacade = (CheckoutFacade) facade;\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.log(\"Checking out code...\");\n\t\t\t\t\t\t\t\t\t\t\tif (hostAuthInfoHome.get() == null)\n\t\t\t\t\t\t\t\t\t\t\t\thostAuthInfoHome.set(FileUtils.createTempDir());\n\t\t\t\t\t\t\t\t\t\t\tCommandline git = new Commandline(AppLoader.getInstance(GitConfig.class).getExecutable());\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcheckoutFacade.setupWorkingDir(git, hostWorkspace);\n\t\t\t\t\t\t\t\t\t\t\tgit.environments().put(\"HOME\", hostAuthInfoHome.get().getAbsolutePath());\n\t\n\t\t\t\t\t\t\t\t\t\t\tCloneInfo cloneInfo = checkoutFacade.getCloneInfo();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcloneInfo.writeAuthData(hostAuthInfoHome.get(), git, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tList<String> trustCertContent = getTrustCertContent();\n\t\t\t\t\t\t\t\t\t\t\t\tif (!trustCertContent.isEmpty()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstallGitCert(new File(hostAuthInfoHome.get(), \"trust-cert.pem\"), trustCertContent, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgit, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint cloneDepth = checkoutFacade.getCloneDepth();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tcloneRepository(git, jobContext.getProjectGitDir().getAbsolutePath(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcloneInfo.getCloneUrl(), jobContext.getCommitId().name(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckoutFacade.isWithLfs(), checkoutFacade.isWithSubmodules(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcloneDepth, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t\t\tgit.clearArgs();\n\t\t\t\t\t\t\t\t\t\t\t\tgit.addArgs(\"config\", \"--global\", \"--unset\", \"core.sshCommand\");\n\t\t\t\t\t\t\t\t\t\t\t\tExecutionResult result = git.execute(ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t\tif (result.getReturnCode() != 5 && result.getReturnCode() != 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\tresult.checkReturnCode();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: \" + getErrorMessage(e));\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tServerSideFacade serverSideFacade = (ServerSideFacade) facade;\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tserverSideFacade.execute(hostBuildHome, new ServerSideFacade.Runner() {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\tpublic Map<String, byte[]> run(File inputDir, Map<String, String> placeholderValues) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn jobContext.runServerStep(position, inputDir, placeholderValues, jobLogger);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: \" + getErrorMessage(e));\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobLogger.success(\"Step \\\"\" + stepNames + \"\\\" is successful\");\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void skip(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\t\t\t\tjobLogger.notice(\"Step \\\"\" + entryFacade.getNamesAsString(position) + \"\\\" is skipped\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, new ArrayList<>());\n\n\t\t\t\t\t\t\tif (!successful)\n\t\t\t\t\t\t\t\tthrow new FailedException();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tcache.uninstallSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t// Fix https://code.onedev.io/projects/160/issues/597\n\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS)\n\t\t\t\t\t\t\t\tFileUtils.deleteDir(hostWorkspace);\n\t\t\t\t\t\t\tif (hostAuthInfoHome.get() != null)\n\t\t\t\t\t\t\t\tFileUtils.deleteDir(hostAuthInfoHome.get());\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tdeleteNetwork(newDocker(), network, jobLogger);\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, jobContext.getResourceRequirements(), jobLogger);\n\t\t} finally {\n\t\t\tcleanDirAsRoot(hostBuildHome, newDocker(), Bootstrap.isInDocker());\n\t\t\tFileUtils.deleteDir(hostBuildHome);\n\t\t}\n\t}\n\n\tprivate void login(TaskLogger jobLogger) {\n\t\tfor (RegistryLogin login: getRegistryLogins()) \n\t\t\tDockerExecutorUtils.login(newDocker(), login.getRegistryUrl(), login.getUserName(), login.getPassword(), jobLogger);\n\t}\n\t\n\tprivate boolean hasOptions(String[] arguments, String... options) {\n\t\tfor (String argument: arguments) {\n\t\t\tfor (String option: options) {\n\t\t\t\tif (option.startsWith(\"--\")) {\n\t\t\t\t\tif (argument.startsWith(option + \"=\") || argument.equals(option))\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else if (option.startsWith(\"-\")) {\n\t\t\t\t\tif (argument.startsWith(option))\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new ExplicitException(\"Invalid option: \" + option);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic boolean isValid(ConstraintValidatorContext context) {\n\t\tboolean isValid = true;\n\t\tSet<String> registryUrls = new HashSet<>();\n\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\tif (!registryUrls.add(login.getRegistryUrl())) {\n\t\t\t\tisValid = false;\n\t\t\t\tString message;\n\t\t\t\tif (login.getRegistryUrl() != null)\n\t\t\t\t\tmessage = \"Duplicate login entry for registry '\" + login.getRegistryUrl() + \"'\";\n\t\t\t\telse\n\t\t\t\t\tmessage = \"Duplicate login entry for official registry\";\n\t\t\t\tcontext.buildConstraintViolationWithTemplate(message)\n\t\t\t\t\t\t.addPropertyNode(\"registryLogins\").addConstraintViolation();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (getRunOptions() != null) {\n\t\t\tString[] arguments = StringUtils.parseQuoteTokens(getRunOptions());\n\t\t\tString reservedOptions[] = new String[] {\"-w\", \"--workdir\", \"-d\", \"--detach\", \"-a\", \"--attach\", \"-t\", \"--tty\", \n\t\t\t\t\t\"-i\", \"--interactive\", \"--rm\", \"--restart\", \"--name\"}; \n\t\t\tif (hasOptions(arguments, reservedOptions)) {\n\t\t\t\tStringBuilder errorMessage = new StringBuilder(\"Can not use options: \"\n\t\t\t\t\t\t+ Joiner.on(\", \").join(reservedOptions));\n\t\t\t\tcontext.buildConstraintViolationWithTemplate(errorMessage.toString())\n\t\t\t\t\t\t.addPropertyNode(\"runOptions\").addConstraintViolation();\n\t\t\t\tisValid = false;\n\t\t\t} \n\t\t}\n\t\tif (!isValid)\n\t\t\tcontext.disableDefaultConstraintViolation();\n\t\treturn isValid;\n\t}\n\t\n\tprivate String getHostPath(String path) {\n\t\tString installPath = Bootstrap.installDir.getAbsolutePath();\n\t\tPreconditions.checkState(path.startsWith(installPath + \"/\")\n\t\t\t\t|| path.startsWith(installPath + \"\\\\\"));\n\t\tif (hostInstallPath == null) {\n\t\t\tif (Bootstrap.isInDocker()) \n\t\t\t\thostInstallPath = DockerExecutorUtils.getHostPath(newDocker(), installPath);\n\t\t\telse \n\t\t\t\thostInstallPath = installPath;\n\t\t}\n\t\treturn hostInstallPath + path.substring(installPath.length());\n\t}\n\t\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\tOneDev.getInstance(ResourceManager.class).run(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlogin(jobLogger);\n\t\t\t\t\n\t\t\t\tFile workspaceDir = null;\n\t\t\t\tFile cacheDir = null;\n\n\t\t\t\tCommandline docker = newDocker();\n\t\t\t\ttry {\n\t\t\t\t\tworkspaceDir = FileUtils.createTempDir(\"workspace\");\n\t\t\t\t\tcacheDir = new File(getCacheHome(), UUID.randomUUID().toString());\n\t\t\t\t\tFileUtils.createDir(cacheDir);\n\t\t\t\t\t\n\t\t\t\t\tjobLogger.log(\"Testing specified docker image...\");\n\t\t\t\t\tdocker.clearArgs();\n\t\t\t\t\tdocker.addArgs(\"run\", \"--rm\");\n\t\t\t\t\tif (getRunOptions() != null)\n\t\t\t\t\t\tdocker.addArgs(StringUtils.parseQuoteTokens(getRunOptions()));\n\t\t\t\t\tString containerWorkspacePath;\n\t\t\t\t\tString containerCachePath;\n\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\tcontainerWorkspacePath = \"C:\\\\onedev-build\\\\workspace\";\n\t\t\t\t\t\tcontainerCachePath = \"C:\\\\onedev-build\\\\cache\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainerWorkspacePath = \"/onedev-build/workspace\";\n\t\t\t\t\t\tcontainerCachePath = \"/onedev-build/cache\";\n\t\t\t\t\t}\n\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(workspaceDir.getAbsolutePath()) + \":\" + containerWorkspacePath);\n\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(cacheDir.getAbsolutePath()) + \":\" + containerCachePath);\n\t\t\t\t\t\n\t\t\t\t\tdocker.addArgs(\"-w\", containerWorkspacePath);\n\t\t\t\t\tdocker.addArgs(testData.getDockerImage());\n\t\t\t\t\t\n\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) \n\t\t\t\t\t\tdocker.addArgs(\"cmd\", \"/c\", \"echo hello from container\");\n\t\t\t\t\telse \n\t\t\t\t\t\tdocker.addArgs(\"sh\", \"-c\", \"echo hello from container\");\n\t\t\t\t\t\n\t\t\t\t\tdocker.execute(new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}).checkReturnCode();\n\t\t\t\t} finally {\n\t\t\t\t\tif (workspaceDir != null)\n\t\t\t\t\t\tFileUtils.deleteDir(workspaceDir);\n\t\t\t\t\tif (cacheDir != null)\n\t\t\t\t\t\tFileUtils.deleteDir(cacheDir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\tjobLogger.log(\"Checking busybox availability...\");\n\t\t\t\t\tdocker = newDocker();\n\t\t\t\t\tdocker.addArgs(\"run\", \"--rm\", \"busybox\", \"sh\", \"-c\", \"echo hello from busybox\");\t\t\t\n\t\t\t\t\tdocker.execute(new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}).checkReturnCode();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tCommandline git = new Commandline(AppLoader.getInstance(GitConfig.class).getExecutable());\n\t\t\t\tKubernetesHelper.testGitLfsAvailability(git, jobLogger);\n\t\t\t}\n\t\t\t\n\t\t}, new HashMap<>(), jobLogger);\n\t\t\n\t}\n\t\n\t@Editable(name=\"Specify a Docker Image to Test Against\")\n\tpublic static class TestData implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate String dockerImage;\n\n\t\t@Editable\n\t\t@OmitName\n\t\t@NotEmpty\n\t\tpublic String getDockerImage() {\n\t\t\treturn dockerImage;\n\t\t}\n\n\t\tpublic void setDockerImage(String dockerImage) {\n\t\t\tthis.dockerImage = dockerImage;\n\t\t}\n\t\t\n\t}\n\n}", "# 7.0.0\n\n1. [RESTful api] Email addresses of a user should now be retrieved via [UserResource.getEmailAddresses](/help/api/io.onedev.server.rest.UserResource/getEmailAddresses), and should be operated via [EmailAddressResource](/help/api/io.onedev.server.rest.EmailAddressResource)\n2. [RESTful api] Access token of a user should now be retrieved via [UserResource.getAccessToken](/help/api/io.onedev.server.rest.UserResource/getAccessToken)\n3. [RESTful api] User query by login name, full name and email should now be done via [UserResource.queryProfile](/help/api/io.onedev.server.rest.UserResource/queryProfile)\n\n# 6.2.1\n\n1. [build spec] Registry login setting is removed from build image step (introduced in 6.2.0). Specify registry logins \nin job executor if necessary\n\n# 6.2.0\n\n1. A new property `Run In Container` is added and enabled for all command steps in build spec. If you have steps intended to \nbe executed by shell executor, edit them to disable this property, otherwise the build will be failed with error `This step should be executed by server docker executor, remote docker executor, or kubernetes executor`\n1. Using cache path &quot;.&quot; (to cache workspace itself) in job cache definition is no longer supported\n\n# 5.4.0 \n\n1. In case install OneDev into a Kubernetes cluster, Kustomization based deployment is replaced by helm based deployment for flexibility reason\n\n# 5.2.1\n\n1. User by default is not able to create/fork projects now. To allow it, specify default login group with appropriate project create permissions in security setting.\n2. URL of project is changed from *http(s)://\\<onedev-server\\>/projects/\\<project name\\>* to *http(s)://\\<onedev-server\\>/projects/\\<project id\\>*. This only affects web UI, clone url and REStful api url is not changed.\n3. Job variable *@project_name@* should be replaced by *@project_path@*.\n4. Job match condition in job executor is renamed as job requirement, and the criteria to match job name is no longer valid. Executor can now be specified when define the job.\n\n# 4.3.0\n\n1. Service definition is separated from job definition. Previous service defined in job will be moved out of job and take the name _\\<job name\\>-\\<service name\\>_ to avoid possible name conflicts. You either need to change it back to use original name in case there is no conflicts, or change your build script to use the new service name. \n2. Job match condition of job executor no longer accepts image criteria. You need to remove it manually if there is any; otherwise the job matching will fail.\n\n# 4.1.3\n\n1. Html report is removed from build spec due to possible XSS vulnerabilities. Check issue #230 for details\n2. Setting _Default Fixed Issues Filter_ in build spec has been moved to be under project build setting, in order to facilitate issue query auto-updating upon custom field/state change\n\n# 4.1.0\n\n1. Backslash in job commands should not be escaped now. And literal '@' should be written as '@@'\n2. Various query operator _is before_ and _is after_ is substituted with _is until_ and _is since_. For instance issue query _\"Submit Date\" is before \"yesterday\"_ should be written as _\"Submit Date\" is until \"yesterday\"_\n\n# 4.0.5\n\n1. Renamed build variables:\n\n  |old name|new name|\n  |---|---|\n  |updated_ref|ref|\n  |updated_branch|branch|\n  |updated_tag|tag|\n  |pull_request_ids|pull_request_number|\n\n1. Removed build variables: _on_branches_, _commit_tags_, \n\n# 3.2\n\nVersion 3.2 uses token authentication instead of password authentication in build spec for security \nconsideration. As a result of this, password authentication specified previously will be cleared:\n\n1. Submodule authentication\n  \n  You will need to use custom http/ssh clone credential with permission to access submodule projects to retrieve source. Refer to [usage scenario](https://code.onedev.io/projects/162/blob/main/pages/clone-submodules-via-ssh.md) for an example.\n  \n2. Project dependency authentication\n\n  You will need to define a job secret containing an access token in project build setting page, and then use that secret in project dependency definition. The access token should have permission to download dependency project artifacts of course."], "fixing_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>io.onedev</groupId>\n\t\t<artifactId>parent</artifactId>\n\t\t<version>1.0.5</version>\n\t</parent>\n\t<artifactId>server</artifactId>\n\t<version>7.3.0</version>\n\t<packaging>pom</packaging>\n\t<build>\n\t\t<finalName>${project.groupId}.${project.artifactId}-${project.version}</finalName>\n\t\t<pluginManagement>\n\t\t\t<plugins>\n\t\t\t\t<plugin>\n\t\t\t\t\t<groupId>org.antlr</groupId>\n\t\t\t\t\t<artifactId>antlr4-maven-plugin</artifactId>\n\t\t\t\t\t<version>${antlr.version}</version>\n\t\t\t\t\t<executions>\n\t\t\t\t\t\t<execution>\n\t\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t\t<goal>antlr4</goal>\n\t\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t</execution>\n\t\t\t\t\t</executions>\n\t\t\t\t\t<configuration>\n\t\t\t\t\t\t<sourceDirectory>${basedir}/src/main/java</sourceDirectory>\n\t\t\t\t\t\t<listener>true</listener>\n\t\t\t\t\t\t<visitor>true</visitor>\n\t\t\t\t\t</configuration>\n\t\t\t\t</plugin>\n\t\t\t</plugins>\n\t\t</pluginManagement>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>plugin-maven</artifactId>\n\t\t\t\t<version>2.1.1</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<?m2e execute onConfiguration,onIncremental?>\n\t\t\t\t\t\t<id>populate-resources</id>\n\t\t\t\t\t\t<phase>process-resources</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>populate-resources</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>package-artifacts</id>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>package-artifacts</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<version>3.0.2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>default-jar</id>\n\t\t\t\t\t\t<phase>never</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<finalName>unwanted</finalName>\n\t\t\t\t\t\t\t<classifier>unwanted</classifier>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/java</directory>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>**/*.java</exclude>\n\t\t\t\t\t<exclude>**/*.scss</exclude>\n\t\t\t\t</excludes>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>target/generated-sources/antlr4</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*.tokens</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n\t<modules>\n\t\t<module>server-core</module>\n\t\t<module>server-plugin</module>\n\t\t<module>server-product</module>\n\t</modules>\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-bootstrap</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-loader</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-loader</artifactId>\n\t\t\t\t<type>test-jar</type>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-utils</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-codeassist</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>commons-jsymbol</artifactId>\n\t\t\t\t<version>${commons.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>slf4j-api</artifactId>\n\t\t\t\t<version>${slf4j.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t<artifactId>jul-to-slf4j</artifactId>\n\t\t\t\t<version>${slf4j.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t\t<artifactId>logback-core</artifactId>\n\t\t\t\t<version>${logback.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t\t<artifactId>logback-classic</artifactId>\n\t\t\t\t<version>${logback.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-server</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-servlets</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\n\t\t\t\t<artifactId>jetty-servlet</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jetty.websocket</groupId>\n\t\t\t\t<artifactId>websocket-server</artifactId>\n\t\t\t\t<version>${jetty.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-core</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-extensions</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-request</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-util</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-devutils</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.wicket</groupId>\n\t\t\t\t<artifactId>wicket-native-websocket-core</artifactId>\n\t\t\t\t<version>${wicket.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.containers</groupId>\n\t\t\t\t<artifactId>jersey-container-servlet</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.security</groupId>\n\t\t\t\t<artifactId>oauth2-client</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.jersey.ext</groupId>\n\t\t\t\t<artifactId>jersey-bean-validation</artifactId>\n\t\t\t\t<version>${jersey.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.dom4j</groupId>\n\t\t\t\t<artifactId>dom4j</artifactId>\n\t\t\t\t<version>2.1.3</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-validator</artifactId>\n\t\t\t\t<version>5.3.6.Final</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-core</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-jcache</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-entitymanager</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hibernate</groupId>\n\t\t\t\t<artifactId>hibernate-hikaricp</artifactId>\n\t\t\t\t<version>${hibernate.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.ehcache</groupId>\n\t\t\t\t<artifactId>ehcache</artifactId>\n\t\t\t\t<version>3.8.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.nimbusds</groupId>\n\t\t\t\t<artifactId>oauth2-oidc-sdk</artifactId>\n\t\t\t\t<version>3.4.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.zaxxer</groupId>\n\t\t\t\t<artifactId>HikariCP</artifactId>\n\t\t\t\t<version>2.7.9</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-collections4</artifactId>\n\t\t\t\t<version>4.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-compress</artifactId>\n\t\t\t\t<version>1.21</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-io</groupId>\n\t\t\t\t<artifactId>commons-io</artifactId>\n\t\t\t\t<version>2.7</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-codec</groupId>\n\t\t\t\t<artifactId>commons-codec</artifactId>\n\t\t\t\t<version>1.7</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t\t<version>3.8.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-text</artifactId>\n\t\t\t\t<version>1.6</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.google.guava</groupId>\n\t\t\t\t<artifactId>guava</artifactId>\n\t\t\t\t<version>25.1-android</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-fileupload</groupId>\n\t\t\t\t<artifactId>commons-fileupload</artifactId>\n\t\t\t\t<version>1.3.3</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-validator</groupId>\n\t\t\t\t<artifactId>commons-validator</artifactId>\n\t\t\t\t<version>1.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.ocpsoft.prettytime</groupId>\n\t\t\t\t<artifactId>prettytime</artifactId>\n\t\t\t\t<version>4.0.1.Final</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t\t\t<artifactId>httpclient</artifactId>\n\t\t\t\t<version>4.5.13</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish.hk2</groupId>\n\t\t\t\t<artifactId>guice-bridge</artifactId>\n\t\t\t\t<version>2.5.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.jetbrains.xodus</groupId>\n\t\t\t\t<artifactId>xodus-entity-store</artifactId>\n\t\t\t\t<version>2.0.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.tika</groupId>\n\t\t\t\t<artifactId>tika-core</artifactId>\n\t\t\t\t<version>${tika.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t\t<artifactId>commons-email</artifactId>\n\t\t\t\t<version>1.5</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.sun.mail</groupId>\n\t\t\t\t<artifactId>javax.mail</artifactId>\n\t\t\t\t<version>1.6.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>commons-httpclient</groupId>\n\t\t\t\t<artifactId>commons-httpclient</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>joda-time</groupId>\n\t\t\t\t<artifactId>joda-time</artifactId>\n\t\t\t\t<version>2.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.yaml</groupId>\n\t\t\t\t<artifactId>snakeyaml</artifactId>\n\t\t\t\t<version>1.26</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.bouncycastle</groupId>\n\t\t\t\t<artifactId>bcprov-jdk15on</artifactId>\n\t\t\t\t<version>1.69</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.unbescape</groupId>\n\t\t\t\t<artifactId>unbescape</artifactId>\n\t\t\t\t<version>1.1.2.RELEASE</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.quartz-scheduler</groupId>\n\t\t\t\t<artifactId>quartz</artifactId>\n\t\t\t\t<version>2.3.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-core</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-core</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-queries</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-queryparser</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-analyzers-common</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-analyzers-smartcn</artifactId>\t\t\t\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.lucene</groupId>\n\t\t\t\t<artifactId>lucene-backward-codecs</artifactId>\n\t\t\t\t<version>${lucene.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-web</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t\t<artifactId>shiro-guice</artifactId>\n\t\t\t\t<version>${shiro.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t\t<version>2.3.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.glassfish</groupId>\n\t\t\t\t<artifactId>javax.el</artifactId>\n\t\t\t\t<version>3.0.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.hsqldb</groupId>\n\t\t\t\t<artifactId>hsqldb</artifactId>\n\t\t\t\t<version>2.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>jaxen</groupId>\n\t\t\t\t<artifactId>jaxen</artifactId>\n\t\t\t\t<version>1.1.6</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.thoughtworks.xstream</groupId>\n\t\t\t\t<artifactId>xstream</artifactId>\n\t\t\t\t<version>1.4.19</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.joestelmach</groupId>\n\t\t\t\t<artifactId>natty</artifactId>\n\t\t\t\t<version>0.13</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.codehaus.groovy</groupId>\n\t\t\t\t<artifactId>groovy-templates</artifactId>\n\t\t\t\t<version>${groovy.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.github.albfernandez</groupId>\n\t\t\t\t<artifactId>juniversalchardet</artifactId>\n\t\t\t\t<version>2.4.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-autolink</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.objenesis</groupId>\n\t\t\t\t<artifactId>objenesis</artifactId>\n\t\t\t\t<version>3.2</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-anchorlink</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-definition</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-tables</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-gfm-tasklist</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.vladsch.flexmark</groupId>\n\t\t\t\t<artifactId>flexmark-ext-toc</artifactId>\n\t\t\t\t<version>${flexmark.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>de.taimos</groupId>\n\t\t\t\t<artifactId>totp</artifactId>\n\t\t\t\t<version>1.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.google.zxing</groupId>\n\t\t\t\t<artifactId>javase</artifactId>\n\t\t\t\t<version>3.2.1</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.http.server</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.gpg.bc</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.eclipse.jgit</groupId>\n\t\t\t\t<artifactId>org.eclipse.jgit.archive</artifactId>\n\t\t\t\t<version>${jgit.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>net.i2p.crypto</groupId>\n\t\t\t\t<artifactId>eddsa</artifactId>\n\t\t\t\t<version>0.3.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.sshd</groupId>\n\t\t\t\t<artifactId>sshd-core</artifactId>\n\t\t\t\t<version>2.8.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.json</groupId>\n\t\t\t\t<artifactId>json</artifactId>\n\t\t\t\t<version>20090211</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-core</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t\t<version>${jacksondatabind.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.dataformat</groupId>\n\t\t\t\t<artifactId>jackson-dataformat-yaml</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t<artifactId>jackson-annotations</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.datatype</groupId>\n\t\t\t\t<artifactId>jackson-datatype-jsr310</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>com.fasterxml.jackson.jaxrs</groupId>\n\t\t\t\t<artifactId>jackson-jaxrs-json-provider</artifactId>\n\t\t\t\t<version>${jackson.version}</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>io.onedev</groupId>\n\t\t\t\t<artifactId>agent</artifactId>\n\t\t\t\t<version>${agent.version}</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>onedev</id>\n\t\t\t<url>https://artifact.onedev.io/artifactory/onedev</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t\t<updatePolicy>never</updatePolicy>\n\t\t\t\t<checksumPolicy>fail</checksumPolicy>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t\t<updatePolicy>always</updatePolicy>\n\t\t\t\t<checksumPolicy>fail</checksumPolicy>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\t<properties>\n\t\t<commons.version>2.1.2</commons.version>\n\t\t<agent.version>1.3.8</agent.version>\n\t\t<slf4j.version>1.7.30</slf4j.version>\n\t\t<logback.version>1.2.9</logback.version>\n\t\t<antlr.version>4.7.2</antlr.version>\n\t\t<jetty.version>9.4.43.v20210629</jetty.version>\n\t\t<wicket.version>7.17.0</wicket.version>\n\t\t<jersey.version>2.26</jersey.version>\n\t\t<hibernate.version>5.4.24.Final</hibernate.version>\n\t\t<wicketbootstrap.version>0.10.18</wicketbootstrap.version>\n\t\t<lucene.version>8.7.0</lucene.version>\n\t\t<shiro.version>1.7.1</shiro.version>\n\t\t<jgit.version>5.13.0.202109080827-r</jgit.version>\n\t\t<flexmark.version>0.62.2</flexmark.version>\n\t\t<groovy.version>3.0.10</groovy.version>\n\t\t<servlet.version>3.1.0</servlet.version>\n\t\t<jackson.version>2.13.2</jackson.version>\n\t\t<jacksondatabind.version>2.13.2.1</jacksondatabind.version>\n\t\t<tika.version>1.24.1</tika.version>\n\t</properties>\n</project>\n", "package io.onedev.server.migration;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.text.MessageFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.Stack;\r\nimport java.util.UUID;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.annotation.Nullable;\r\nimport javax.inject.Singleton;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang3.RandomStringUtils;\r\nimport org.apache.commons.lang3.tuple.Triple;\r\nimport org.dom4j.Element;\r\nimport org.dom4j.Node;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.google.common.base.Preconditions;\r\n\r\nimport io.onedev.commons.bootstrap.Bootstrap;\r\nimport io.onedev.commons.utils.ExplicitException;\r\nimport io.onedev.commons.utils.FileUtils;\r\nimport io.onedev.commons.utils.StringUtils;\r\nimport io.onedev.server.model.Issue;\r\nimport io.onedev.server.model.IssueComment;\r\nimport io.onedev.server.model.Project;\r\nimport io.onedev.server.model.PullRequest;\r\nimport io.onedev.server.model.PullRequestComment;\r\nimport io.onedev.server.model.User;\r\nimport io.onedev.server.util.Pair;\r\nimport oshi.SystemInfo;\r\nimport oshi.hardware.HardwareAbstractionLayer;\r\n\r\n@Singleton\r\n@SuppressWarnings(\"unused\")\r\npublic class DataMigrator {\r\n\t\r\n\tprivate static final Logger logger = LoggerFactory.getLogger(DataMigrator.class);\r\n\t\r\n\tprivate void migrate1(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement branchRefElement = element.element(\"branchRef\");\r\n\t\t\t\t\tif (branchRefElement != null)\r\n\t\t\t\t\t\tbranchRefElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tprivate void migrate2(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement gateKeeperElement = element.element(\"gateKeeper\");\r\n\t\t\t\t\tgateKeeperElement.detach();\r\n\t\t\t\t\telement.addElement(\"gateKeepers\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tprivate void migrate3(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\tString name = element.getName();\r\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.commons\", \"com.gitplex.commons\");\r\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.gitplex\", \"com.gitplex.server\");\r\n\t\t\t\telement.setName(name);\r\n\t\t\t}\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\tif (settingElement != null) {\r\n\t\t\t\t\t\tString clazz = settingElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsettingElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\r\n\t\t\t\t\t\tElement gitConfigElement = settingElement.element(\"gitConfig\");\r\n\t\t\t\t\t\tif (gitConfigElement != null) {\r\n\t\t\t\t\t\t\tclazz = gitConfigElement.attributeValue(\"class\");\r\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdom.writeToFile(file, false);\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate4(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement avatarUploadDateElement = element.element(\"avatarUploadDate\");\r\n\t\t\t\t\tif (avatarUploadDateElement != null)\r\n\t\t\t\t\t\tavatarUploadDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate5(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\t\tif (settingElement != null)\r\n\t\t\t\t\t\t\tsettingElement.addElement(\"enableSSL\").setText(\"false\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate6(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate7(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.commons.hibernate.migration.VersionTable\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.ModelVersion\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.support.IntegrationPolicy\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.support.IntegrationPolicy\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.PullRequest_-IntegrationStrategy\", \r\n\t\t\t\t\t\t\"com.gitplex.server.model.PullRequest_-IntegrationStrategy\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.entity.\", \"com.gitplex.server.model.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SpecifiedGit\", \"com.gitplex.server.git.config.SpecifiedGit\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SystemGit\", \"com.gitplex.server.git.config.SystemGit\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.setting.\", \"com.gitplex.server.model.support.setting.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"com.gitplex.server.core.gatekeeper.\", \"com.gitplex.server.gatekeeper.\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t\t\r\n\t\t\t\tif (file.getName().equals(\"VersionTables.xml\")) {\r\n\t\t\t\t\tFileUtils.moveFile(file, new File(file.getParentFile(), \"ModelVersions.xml\"));\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrateIntegrationStrategy8(Element integrationStrategyElement) {\r\n\t\tif (integrationStrategyElement != null) {\r\n\t\t\tintegrationStrategyElement.setName(\"mergeStrategy\");\r\n\t\t\tswitch (integrationStrategyElement.getText()) {\r\n\t\t\tcase \"MERGE_ALWAYS\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"ALWAYS_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MERGE_WITH_SQUASH\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"SQUASH_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_SOURCE_ONTO_TARGET\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"REBASE_MERGE\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_TARGET_ONTO_SOURCE\":\r\n\t\t\t\tintegrationStrategyElement.setText(\"MERGE_IF_NECESSARY\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate8(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\t\tsettingElement.addElement(\"curlConfig\")\r\n\t\t\t\t\t\t\t\t.addAttribute(\"class\", \"com.gitplex.server.git.config.SystemCurl\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"reviewEffort\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"gateKeepers\").detach();\r\n\t\t\t\t\telement.element(\"integrationPolicies\").detach();\r\n\t\t\t\t\telement.addElement(\"branchProtections\");\r\n\t\t\t\t\telement.addElement(\"tagProtections\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement assigneeElement = element.element(\"assignee\");\r\n\t\t\t\t\tif (assigneeElement != null)\r\n\t\t\t\t\t\tassigneeElement.detach();\r\n\t\t\t\t\tmigrateIntegrationStrategy8(element.element(\"integrationStrategy\"));\r\n\t\t\t\t\tElement lastIntegrationPreviewElement = element.element(\"lastIntegrationPreview\");\r\n\t\t\t\t\tif (lastIntegrationPreviewElement != null) {\r\n\t\t\t\t\t\tlastIntegrationPreviewElement.setName(\"lastMergePreview\");\r\n\t\t\t\t\t\tElement integratedElement = lastIntegrationPreviewElement.element(\"integrated\");\r\n\t\t\t\t\t\tif (integratedElement != null)\r\n\t\t\t\t\t\t\tintegratedElement.setName(\"merged\");\r\n\t\t\t\t\t\tmigrateIntegrationStrategy8(lastIntegrationPreviewElement.element(\"integrationStrategy\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement closeStatusElement = closeInfoElement.element(\"closeStatus\");\r\n\t\t\t\t\t\tif (closeStatusElement.getText().equals(\"INTEGRATED\"))\r\n\t\t\t\t\t\t\tcloseStatusElement.setText(\"MERGED\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReviewInvitations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestVerifications.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentRelations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentReplys.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement mergeCommitHashElement = element.element(\"mergeCommitHash\");\r\n\t\t\t\t\tmergeCommitHashElement.setName(\"mergeBaseCommitHash\");\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate9(File dataDir, Stack<Integer> versions) {\r\n\t\ttry {\r\n\t\t\tMap<String, String> accountIdToName = new HashMap<>();\r\n\t\t\tSet<String> userIds = new HashSet<>();\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\r\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Accounts.xml\", \"Users.xml\"));\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Account\", \r\n\t\t\t\t\t\t\t\"com.gitplex.server.model.User\");\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\taccountIdToName.put(element.elementText(\"id\"), element.elementText(\"name\"));\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"organization\").equals(\"true\")) {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tuserIds.add(element.elementText(\"id\"));\r\n\t\t\t\t\t\t\telement.element(\"organization\").detach();\r\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\r\n\t\t\t\t\t\t\telement.element(\"noSpaceName\").detach();\r\n\t\t\t\t\t\t\tif (element.element(\"noSpaceFullName\") != null)\r\n\t\t\t\t\t\t\t\telement.element(\"noSpaceFullName\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong lastUserAuthorizationId = 0;\r\n\t\t\tVersionedXmlDoc userAuthorizationsDom = new VersionedXmlDoc();\r\n\t\t\tElement userAuthorizationListElement = userAuthorizationsDom.addElement(\"list\");\r\n\t\t\t\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\r\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Depots.xml\", \"Projects.xml\"));\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Depot\", \r\n\t\t\t\t\t\t\t\"com.gitplex.server.model.Project\");\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tString accountId = element.elementText(\"account\");\r\n\t\t\t\t\t\telement.element(\"account\").detach();\r\n\t\t\t\t\t\tString depotName = element.elementText(\"name\");\r\n\t\t\t\t\t\telement.element(\"name\").setText(accountIdToName.get(accountId) + \".\" + depotName);\r\n\t\t\t\t\t\tif (element.element(\"defaultPrivilege\") != null\t)\r\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString adminId;\r\n\t\t\t\t\t\tif (userIds.contains(accountId)) {\r\n\t\t\t\t\t\t\tadminId = accountId;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tadminId = \"1\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement userAuthorizationElement = \r\n\t\t\t\t\t\t\t\tuserAuthorizationListElement.addElement(\"com.gitplex.server.model.UserAuthorization\");\r\n\t\t\t\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++lastUserAuthorizationId));\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"user\").setText(adminId);\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"project\").setText(element.elementText(\"id\"));\r\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"privilege\").setText(\"ADMIN\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"BranchWatchs.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tif (!userIds.contains(element.elementText(\"user\"))) {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.element(\"depot\").setName(\"project\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Teams.xml\") \r\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamMemberships.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamAuthorizations.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"OrganizationMemberships.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"PullRequest\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"Review\")\r\n\t\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitation\")) {\r\n\t\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\r\n\t\t\t\t\t\t\tFile storageDir = new File(storagePath);\r\n\t\t\t\t\t\t\tFile repositoriesDir = new File(storageDir, \"repositories\");\r\n\t\t\t\t\t\t\tif (repositoriesDir.exists()) {\r\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storageDir, \"projects\");\r\n\t\t\t\t\t\t\t\tFileUtils.moveDirectory(repositoriesDir, projectsDir);\r\n\t\t\t\t\t\t\t\tfor (File projectDir: projectsDir.listFiles()) {\r\n\t\t\t\t\t\t\t\t\tFile infoDir = new File(projectDir, \"info\");\r\n\t\t\t\t\t\t\t\t\tif (infoDir.exists())\r\n\t\t\t\t\t\t\t\t\t\tFileUtils.deleteDir(infoDir);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (element.elementText(\"key\").equals(\"SECURITY\")) {\r\n\t\t\t\t\t\t\telement.element(\"setting\").addElement(\"enableAnonymousAccess\").setText(\"false\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\tuserAuthorizationsDom.writeToFile(new File(dataDir, \"UserAuthorizations.xml\"), false);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new RuntimeException(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate10(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\") || file.getName().startsWith(\"CodeCommentReplys.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement exprElement = branchProtectionElement.element(\"reviewAppointmentExpr\");\r\n\t\t\t\t\t\tif (exprElement != null)\r\n\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\texprElement = fileProtectionElement.element(\"reviewAppointmentExpr\");\r\n\t\t\t\t\t\t\tif (exprElement != null)\r\n\t\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(new File(dataDir, \"Configs.xml\"));\r\n\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\r\n\t\t\t\tFile codeCommentsFromWeiFeng = new File(storagePath, \"CodeComments.xml\");\r\n\t\t\t\tif (codeCommentsFromWeiFeng.exists()) {\r\n\t\t\t\t\tdom = VersionedXmlDoc.fromFile(codeCommentsFromWeiFeng);\r\n\t\t\t\t\tfor (Element commentElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tcommentElement.setName(\"com.gitplex.server.model.CodeComment\");\r\n\t\t\t\t\t\tcommentElement.element(\"depot\").setName(\"project\");\r\n\t\t\t\t\t\tcommentElement.element(\"resolved\").detach();\r\n\t\t\t\t\t\tcommentElement.element(\"commentPos\").setName(\"markPos\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(new File(dataDir, \"CodeComments.xml\"), false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate11(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tlong maxId = 0;\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong id = Long.parseLong(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (maxId < id)\r\n\t\t\t\t\t\tmaxId = id;\r\n\t\t\t\t}\r\n\t\t\t\tElement licenseConfigElement = dom.getRootElement().addElement(\"com.gitplex.server.model.Config\");\r\n\t\t\t\tlicenseConfigElement.addElement(\"id\").setText(String.valueOf(maxId+1));\r\n\t\t\t\tlicenseConfigElement.addElement(\"key\").setText(\"LICENSE\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate12(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"enabled\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.addElement(\"enabled\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate13(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \"gitplex\", \"turbodev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"GitPlex\", \"TurboDev\");\r\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate14(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.addElement(\"submitter\");\r\n\t\t\t\t\t\tsubmitterElement.addAttribute(\"class\", \"com.turbodev.server.model.support.submitter.Anyone\");\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"noCreation\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate15(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \"com.turbodev\", \"io.onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"com/turbodev\", \"io/onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev.com\", \"onedev.io\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev\", \"onedev\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \"TurboDev\", \"OneDev\");\r\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrateMergeStrategy16(Element mergeStrategyElement) {\r\n\t\tif (mergeStrategyElement != null) {\r\n\t\t\tmergeStrategyElement.setName(\"mergeStrategy\");\r\n\t\t\tswitch (mergeStrategyElement.getText()) {\r\n\t\t\tcase \"ALWAYS_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"MERGE_IF_NECESSARY\":\r\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT_IF_NECESSARY\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SQUASH_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"SQUASH_SOURCE_BRANCH_COMMITS\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"REBASE_MERGE\":\r\n\t\t\t\tmergeStrategyElement.setText(\"REBASE_SOURCE_BRANCH_COMMITS\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*\r\n\t * Migrate from 1.0 to 2.0\r\n\t */\r\n\tprivate void migrate16(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> codeCommentReplyCounts = new HashMap<>();\r\n\t\tMap<String, String> userNames = new HashMap<>();\r\n\t\tMap<String, Set<String>> requestCodeComments = new HashMap<>();\r\n\t\tMap<String, Integer> requestCommentCounts = new HashMap<>();\r\n\t\tSet<String> openRequests = new HashSet<>();\r\n\t\tMap<String, String> reviewRequirements = new HashMap<>(); \r\n\t\t \r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\r\n\t\t\t\t\tif (fullNameElement != null)\r\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), fullNameElement.getText());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), element.elementText(\"name\"));\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\r\n\t\t\t\t\tif (replyCount == null)\r\n\t\t\t\t\t\treplyCount = 0;\r\n\t\t\t\t\treplyCount++;\r\n\t\t\t\t\tcodeCommentReplyCounts.put(commentId, replyCount);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tSet<String> codeComments = requestCodeComments.get(requestId);\r\n\t\t\t\t\tif (codeComments == null) {\r\n\t\t\t\t\t\tcodeComments = new HashSet<>();\r\n\t\t\t\t\t\trequestCodeComments.put(requestId, codeComments);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcodeComments.add(commentId);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString commentId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(commentId);\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\trequestCommentCounts.put(commentId, commentCount);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"closeInfo\") == null) {\r\n\t\t\t\t\t\topenRequests.add(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tStringBuilder builder = new StringBuilder();\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) \r\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treviewRequirements.put(projectId, builder.toString());\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, Set<String>> entry: requestCodeComments.entrySet()) {\r\n\t\t\tInteger commentCount = requestCommentCounts.get(entry.getKey());\r\n\t\t\tif (commentCount == null)\r\n\t\t\t\tcommentCount = 0;\r\n\t\t\tfor (String commentId: entry.getValue()) {\r\n\t\t\t\tcommentCount++;\r\n\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\r\n\t\t\t\tif (replyCount != null)\r\n\t\t\t\t\tcommentCount += replyCount;\r\n\t\t\t}\r\n\t\t\trequestCommentCounts.put(entry.getKey(), commentCount);\r\n\t\t}\r\n\t\t\r\n\t\tVersionedXmlDoc requestReviewsDOM = new VersionedXmlDoc();\r\n\t\tElement requestReviewListElement = requestReviewsDOM.addElement(\"list\");\r\n\t\t\r\n\t\tVersionedXmlDoc configurationsDOM = new VersionedXmlDoc();\r\n\t\tElement configurationListElement = configurationsDOM.addElement(\"list\");\r\n\t\tMap<String, Map<String, Long>> projectConfigurations = new HashMap<>();\r\n\t\tlong configurationCount = 0;\r\n\t\t\r\n\t\tint reviewCount = 0;\r\n\t\t\r\n\t\tVersionedXmlDoc requestBuildsDOM = new VersionedXmlDoc();\r\n\t\tElement requestBuildListElement = requestBuildsDOM.addElement(\"list\");\r\n\t\tint requestBuildCount = 0;\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"BranchWatches.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReferences.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Reviews.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\") || file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"ADMIN\", \"ADMINISTRATION\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"WRITE\", \"CODE_WRITE\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"READ\", \"CODE_READ\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (replyCount == null)\r\n\t\t\t\t\t\treplyCount = 0;\r\n\t\t\t\t\telement.addElement(\"replyCount\").setText(String.valueOf(replyCount));\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\tdateElement.setName(\"createDate\");\r\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\r\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\r\n\t\t\t\t\tif (lastEventElement != null) {\r\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\r\n\t\t\t\t\t\tlastEventElement.detach();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateDateElement.setText(dateElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrateMergeStrategy16(element.element(\"mergeStrategy\"));\r\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\r\n\t\t\t\t\tif (lastMergePreviewElement != null) {\r\n\t\t\t\t\t\tmigrateMergeStrategy16(lastMergePreviewElement.element(\"mergeStrategy\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.addElement(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement lastCodeCommentEventDateElement = element.element(\"lastCodeCommentEventDate\");\r\n\t\t\t\t\tif (lastCodeCommentEventDateElement != null)\r\n\t\t\t\t\t\tlastCodeCommentEventDateElement.setName(\"lastCodeCommentActivityDate\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement closedByElement = closeInfoElement.element(\"closedBy\");\r\n\t\t\t\t\t\tif (closedByElement != null)\r\n\t\t\t\t\t\t\tclosedByElement.setName(\"user\");\r\n\t\t\t\t\t\tElement closedByNameElement = closeInfoElement.element(\"closedByName\");\r\n\t\t\t\t\t\tif (closedByNameElement != null)\r\n\t\t\t\t\t\t\tclosedByNameElement.setName(\"userName\");\r\n\t\t\t\t\t\tcloseInfoElement.element(\"closeDate\").setName(\"date\");\r\n\t\t\t\t\t\tcloseInfoElement.element(\"closeStatus\").setName(\"status\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\r\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\r\n\t\t\t\t\tif (lastEventElement != null) {\r\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\r\n\t\t\t\t\t\tlastEventElement.detach();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateDateElement.setText(submitDateElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.security.authenticator.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.authenticator.\");\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.Setting\");\r\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\r\n\t\t\t\t\tif (settingElement != null) {\r\n\t\t\t\t\t\tsettingElement.setName(\"value\");\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"AUTHENTICATOR\")) {\r\n\t\t\t\t\t\t\tElement authenticatorElement = settingElement.elementIterator().next();\r\n\t\t\t\t\t\t\tsettingElement.addAttribute(\"class\", authenticatorElement.getName());\r\n\t\t\t\t\t\t\tfor (Element fieldElement: authenticatorElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (!fieldElement.getName().equals(\"defaultGroupNames\")) {\r\n\t\t\t\t\t\t\t\t\tfieldElement.detach();\r\n\t\t\t\t\t\t\t\t\tsettingElement.add(fieldElement);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tauthenticatorElement.detach();\r\n\t\t\t\t\t\t\tsettingElement.addElement(\"canCreateProjects\").setText(\"true\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(file.getParentFile(), file.getName().replace(\"Config\", \"Setting\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestWatchs.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement reasonElement = element.element(\"reason\");\r\n\t\t\t\t\tif (reasonElement != null)\r\n\t\t\t\t\t\treasonElement.detach();\r\n\t\t\t\t\tElement ignoreElement = element.element(\"ignore\");\r\n\t\t\t\t\tignoreElement.setName(\"watching\");\r\n\t\t\t\t\tignoreElement.setText(String.valueOf(!Boolean.parseBoolean(ignoreElement.getTextTrim())));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString project = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tElement publicReadElement = element.element(\"publicRead\");\r\n\t\t\t\t\tif (publicReadElement.getTextTrim().equals(\"true\")) \r\n\t\t\t\t\t\telement.addElement(\"defaultPrivilege\").setText(\"CODE_READ\");\r\n\t\t\t\t\tpublicReadElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"verifyMerges\").setName(\"buildMerges\");\r\n\t\t\t\t\t\tElement verificationsElement = branchProtectionElement.element(\"verifications\");\r\n\t\t\t\t\t\tverificationsElement.setName(\"configurations\");\r\n\t\t\t\t\t\tfor (Element verificationElement: verificationsElement.elements()) {\r\n\t\t\t\t\t\t\tString verification = verificationElement.getText();\r\n\t\t\t\t\t\t\tMap<String, Long> configurations = projectConfigurations.get(project);\r\n\t\t\t\t\t\t\tif (configurations == null) {\r\n\t\t\t\t\t\t\t\tconfigurations = new HashMap<>();\r\n\t\t\t\t\t\t\t\tprojectConfigurations.put(project, configurations);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tLong configurationId = configurations.get(verification);\r\n\t\t\t\t\t\t\tif (configurationId == null) {\r\n\t\t\t\t\t\t\t\tconfigurationId = ++configurationCount;\r\n\t\t\t\t\t\t\t\tconfigurations.put(verification, configurationId);\r\n\t\t\t\t\t\t\t\tElement configurationElement = configurationListElement.addElement(\"io.onedev.server.model.Configuration\");\r\n\t\t\t\t\t\t\t\tconfigurationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"id\").setText(String.valueOf(configurationId));\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"project\").setText(project);\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"name\").setText(verification);\r\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"buildCleanupRule\").addAttribute(\"class\", \"io.onedev.server.model.support.configuration.DoNotCleanup\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (String request: openRequests) {\r\n\t\t\t\t\t\t\t\tElement requestBuildElement = requestBuildListElement.addElement(\"io.onedev.server.model.PullRequestBuild\");\r\n\t\t\t\t\t\t\t\trequestBuildElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"id\").setText(String.valueOf(++requestBuildCount));\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"request\").setText(request);\r\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"configuration\").setText(String.valueOf(configurationId));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \r\n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\r\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\r\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = tagProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\r\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \r\n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\r\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequestReviewsDOM.writeToFile(new File(dataDir, \"PullRequestReviews.xml\"), false);\r\n\t\tconfigurationsDOM.writeToFile(new File(dataDir, \"Configurations.xml\"), false);\r\n\t\trequestBuildsDOM.writeToFile(new File(dataDir, \"PullRequestBuilds.xml\"), false);\r\n\t}\r\n\t\r\n\tprivate void migrate17(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issue\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueWorkflowElement = element.element(\"issueWorkflow\");\r\n\t\t\t\t\tif (issueWorkflowElement != null)\r\n\t\t\t\t\t\tissueWorkflowElement.detach();\r\n\t\t\t\t\tElement savedIssueQueriesElement = element.element(\"savedIssueQueries\");\r\n\t\t\t\t\tif (savedIssueQueriesElement != null)\r\n\t\t\t\t\t\tsavedIssueQueriesElement.detach();\r\n\t\t\t\t\tElement issueListFieldsElement = element.element(\"issueListFields\");\r\n\t\t\t\t\tif (issueListFieldsElement != null)\r\n\t\t\t\t\t\tissueListFieldsElement.detach();\r\n\t\t\t\t\tElement issueBoardsElement = element.element(\"issueBoards\");\r\n\t\t\t\t\tif (issueBoardsElement != null)\r\n\t\t\t\t\t\tissueBoardsElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate18(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate19(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commitMessageTransformsElement = element.addElement(\"commitMessageTransforms\");\r\n\t\t\t\t\tElement commitMessageTransformSettingElement = element.element(\"commitMessageTransformSetting\");\r\n\t\t\t\t\tif (commitMessageTransformSettingElement != null) {\r\n\t\t\t\t\t\tcommitMessageTransformSettingElement.detach();\r\n\t\t\t\t\t\tcommitMessageTransformSettingElement.setName(\"io.onedev.server.model.support.CommitMessageTransform\");\r\n\t\t\t\t\t\tcommitMessageTransformsElement.add(commitMessageTransformSettingElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate20(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tfieldElement.addElement(\"canBeChangedBy\").addAttribute(\"class\", \"io.onedev.server.model.support.usermatcher.Anyone\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate21(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"branch\").setName(\"branches\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\r\n\t\t\t\t\t\t\tfileProtectionElement.element(\"path\").setName(\"paths\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.element(\"tag\").setName(\"tags\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\")) {\r\n\t\t\t\t\t\telement.element(\"value\").addAttribute(\"class\", \"io.onedev.commons.utils.license.LicenseDetail\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate22(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueFieldUnarys.xml\")) {\r\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"IssueFieldUnarys\", \"IssueFieldEntitys\"));\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(renamedFile);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueFieldEntity\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(renamedFile, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate23(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Build2s.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement runInstanceIdElement = element.element(\"runInstanceId\");\r\n\t\t\t\t\tif (runInstanceIdElement != null)\r\n\t\t\t\t\t\trunInstanceIdElement.detach();\r\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\r\n\t\t\t\t\tif (errorMessageElement != null)\r\n\t\t\t\t\t\terrorMessageElement.setName(\"statusMessage\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t\tif (element.element(\"issueSetting\") == null)\r\n\t\t\t\t\t\telement.addElement(\"issueSetting\");\r\n\t\t\t\t\tif (element.element(\"savedCommitQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedCommitQueries\");\r\n\t\t\t\t\tif (element.element(\"savedPullRequestQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedPullRequestQueries\");\r\n\t\t\t\t\tif (element.element(\"savedCodeCommentQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedCodeCommentQueries\");\r\n\t\t\t\t\tif (element.element(\"savedBuildQueries\") == null) \r\n\t\t\t\t\t\telement.addElement(\"savedBuildQueries\");\r\n\t\t\t\t\tif (element.element(\"webHooks\") == null) \r\n\t\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"uuid\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate String escapeValue24(String value) {\r\n\t\tStringBuilder builder = new StringBuilder();\r\n\t\tfor (int i=0; i<value.length(); i++) {\r\n\t\t\tchar ch = value.charAt(i);\r\n\t\t\tif (\"\\\\()\".indexOf(ch) != -1)\r\n\t\t\t\tbuilder.append(\"\\\\\");\r\n\t\t\tbuilder.append(ch);\r\n\t\t}\r\n\t\treturn builder.toString();\r\n\t}\r\n\t\r\n\tprivate void migrateUserMatcher24(Element userMatcherElement) {\r\n\t\tString userMatcher;\r\n\t\tString userMatcherClass = userMatcherElement.attributeValue(\"class\");\r\n\t\tif (userMatcherClass.contains(\"Anyone\")) {\r\n\t\t\tuserMatcher = \"anyone\";\r\n\t\t} else if (userMatcherClass.contains(\"CodeWriters\")) {\r\n\t\t\tuserMatcher = \"code writers\";\r\n\t\t} else if (userMatcherClass.contains(\"CodeReaders\")) {\r\n\t\t\tuserMatcher = \"code readers\";\r\n\t\t} else if (userMatcherClass.contains(\"IssueReaders\")) {\r\n\t\t\tuserMatcher = \"issue readers\";\r\n\t\t} else if (userMatcherClass.contains(\"ProjectAdministrators\")) {\r\n\t\t\tuserMatcher = \"project administrators\";\r\n\t\t} else if (userMatcherClass.contains(\"SpecifiedUser\")) {\r\n\t\t\tuserMatcher = \"user(\" + escapeValue24(userMatcherElement.elementText(\"userName\").trim()) + \")\";\r\n\t\t} else {\r\n\t\t\tuserMatcher = \"group(\" + escapeValue24(userMatcherElement.elementText(\"groupName\").trim()) + \")\";\r\n\t\t}\r\n\t\tuserMatcherElement.clearContent();\r\n\t\tuserMatcherElement.remove(userMatcherElement.attribute(\"class\"));\r\n\t\tuserMatcherElement.setText(userMatcher);\r\n\t}\r\n\t\r\n\tprivate void migrateTransitionSpecsElement24(Element transitionSpecsElement) {\r\n\t\tfor (Element transitionElement: transitionSpecsElement.elements()) {\r\n\t\t\tElement triggerElement = transitionElement.element(\"trigger\");\r\n\t\t\tif (triggerElement.attributeValue(\"class\").contains(\"PressButtonTrigger\"))\r\n\t\t\t\tmigrateUserMatcher24(triggerElement.element(\"authorized\"));\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate24(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tmigrateTransitionSpecsElement24(valueElement.element(\"defaultTransitionSpecs\"));\r\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements())\r\n\t\t\t\t\t\t\t\tmigrateUserMatcher24(fieldElement.element(\"canBeChangedBy\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\r\n\t\t\t\t\tElement transitionsElement = issueSettingElement.element(\"transitionSpecs\");\r\n\t\t\t\t\tif (transitionsElement != null) \r\n\t\t\t\t\t\tmigrateTransitionSpecsElement24(transitionsElement);\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\r\n\t\t\t\t\t\tmigrateUserMatcher24(branchProtectionElement.element(\"submitter\"));\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\tmigrateUserMatcher24(tagProtectionElement.element(\"submitter\"));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// from 2.0 to 3.0\r\n\tprivate void migrate25(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\".support.setting.\", \".support.administration.\");\r\n\t\t\t\tcontent = content.replace(\".support.authenticator.\", \".support.administration.authenticator.\");\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"ISSUE\") || key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (key.equals(\"BACKUP\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement folderElement = valueElement.element(\"folder\");\r\n\t\t\t\t\t\t\tif (folderElement != null)\r\n\t\t\t\t\t\t\t\tfolderElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"SECURITY\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.element(\"enableAnonymousAccess\").setText(\"false\");\r\n\t\t\t\t\t} else if (key.equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement storagePathElement = valueElement.element(\"storagePath\");\r\n\t\t\t\t\t\t\tString storagePath = storagePathElement.getText();\r\n\t\t\t\t\t\t\tstoragePathElement.detach();\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storagePath, \"projects\");\r\n\t\t\t\t\t\t\t\tif (projectsDir.exists()) {\r\n\t\t\t\t\t\t\t\t\tPath target = projectsDir.toPath();\r\n\t\t\t\t\t\t\t\t    File linkDir = new File(Bootstrap.installDir, \"site/projects\");\r\n\t\t\t\t\t\t\t\t    if (linkDir.exists())\r\n\t\t\t\t\t\t\t\t    \tthrow new ExplicitException(\"Directory already exists: \" + linkDir);\r\n\t\t\t\t\t\t\t\t    Files.createSymbolicLink(linkDir.toPath(), target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"AUTHENTICATOR\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement defaultGroupNamesElement = valueElement.element(\"defaultGroupNames\");\r\n\t\t\t\t\t\t\tif (defaultGroupNamesElement != null)\r\n\t\t\t\t\t\t\t\tdefaultGroupNamesElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"canCreateProjects\").setName(\"createProjects\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\r\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement privilegeElement = element.element(\"privilege\");\r\n\t\t\t\t\tString privilege = privilegeElement.getTextTrim();\r\n\t\t\t\t\tprivilegeElement.detach();\r\n\r\n\t\t\t\t\tString roleId;\r\n\t\t\t\t\tswitch (privilege) {\r\n\t\t\t\t\tcase \"ISSUE_READ\":\r\n\t\t\t\t\t\troleId = \"4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"CODE_READ\":\r\n\t\t\t\t\t\troleId = \"3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"CODE_WRITE\":\r\n\t\t\t\t\t\troleId = \"2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\troleId = \"1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"role\").setText(roleId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.element(\"numberStr\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement rangeElement = element.element(\"markPos\").element(\"range\");\r\n\t\t\t\t\trangeElement.element(\"beginLine\").setName(\"fromRow\");\r\n\t\t\t\t\trangeElement.element(\"endLine\").setName(\"toRow\");\r\n\t\t\t\t\trangeElement.element(\"beginChar\").setName(\"fromColumn\");\r\n\t\t\t\t\trangeElement.element(\"endChar\").setName(\"toColumn\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\"DO_NOT_MERGE\", \"CREATE_MERGE_COMMIT\");\r\n\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.element(\"numberStr\").detach();\r\n\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement defaultPrivilegeElement = element.element(\"defaultPrivilege\");\r\n\t\t\t\t\tif (defaultPrivilegeElement != null)\r\n\t\t\t\t\t\tdefaultPrivilegeElement.detach();\r\n\t\t\t\t\telement.addElement(\"owner\").setText(\"1\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\r\n\t\t\t\t\t\tsubmitterElement.setName(\"user\");\r\n\t\t\t\t\t\tsubmitterElement.setText(\"anyone\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"configurations\").detach();\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"buildMerges\").detach();\r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"jobNames\");\r\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements())\r\n\t\t\t\t\t\t\tfileProtectionElement.addElement(\"jobNames\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\ttagProtectionElement.element(\"submitter\").setName(\"user\");\r\n\t\t\t\t\telement.addElement(\"secrets\");\r\n\t\t\t\t\telement.element(\"commitMessageTransforms\").detach();\r\n\t\t\t\t\telement.element(\"webHooks\").detach();\r\n\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\t\telement.element(\"issueSetting\").detach();\r\n\t\t\t\t\telement.addElement(\"issueSetting\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.element(\"savedBuildQueries\").detach();\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildsToPreserve\").setText(\"all\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.element(\"savedCommitQueries\").detach();\r\n\t\t\t\t\telement.element(\"savedCodeCommentQueries\").detach();\r\n\t\t\t\t\telement.element(\"savedPullRequestQueries\").detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"pullRequestSetting\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\") \r\n\t\t\t\t\t|| file.getName().startsWith(\"Configurations.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"IssueQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestChanges.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestWatchs.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"IssueWatchs.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"CommitQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestBuilds.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildQuerySettings.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Builds.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"Build2s.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildDependences.xml\")\r\n\t\t\t\t\t|| file.getName().startsWith(\"BuildParams.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueFieldEntitys.xml\")) {\r\n\t\t\t\tString content;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\tcontent = content.replace(\"io.onedev.server.model.IssueFieldEntity\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.IssueField\");\r\n\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t\r\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\r\n\t\t\t\t\t\t\"IssueFieldEntitys.xml\", \"IssueFields.xml\"));\r\n\t\t\t\tFileUtils.writeFile(renamedFile, content, StandardCharsets.UTF_8.name());\r\n\t\t\t}\r\n\t\t}\r\n        try (InputStream is = getClass().getResourceAsStream(\"migrate25_roles.xml\")) {\r\n        \tPreconditions.checkNotNull(is);\r\n        \tFileUtils.writeFile(\r\n        \t\t\tnew File(dataDir, \"Roles.xml\"), \r\n        \t\t\tStringUtils.join(IOUtils.readLines(is, StandardCharsets.UTF_8.name()), \"\\n\"));\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate26(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement createdAtElement = element.element(\"createdAt\");\r\n\t\t\t\t\tcreatedAtElement.setName(\"createDate\");\r\n\t\t\t\t\telement.addElement(\"updateDate\").setText(createdAtElement.getText());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate27(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.element(\"buildsToPreserve\").detach();\r\n\t\t\t\t\tbuildSettingElement.addElement(\"preservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate28(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"secrets\").detach();\r\n\t\t\t\t\telement.element(\"buildSetting\").detach();\r\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate29(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"webHooks\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"user\").setName(\"userMatch\");\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\r\n\t\t\t\t\t\ttagProtectionElement.element(\"user\").setName(\"userMatch\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate30(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) \r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate31(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement editableIssueFieldsElement = element.element(\"editableIssueFields\");\r\n\t\t\t\t\teditableIssueFieldsElement.detach();\r\n\t\t\t\t\telement.addElement(\"editableIssueFields\").addAttribute(\r\n\t\t\t\t\t\t\t\"class\", \"io.onedev.server.model.support.role.AllIssueFields\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate32(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \r\n\t\t\t\t\tif (key.equals(\"ISSUE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) { \r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate33(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\r\n\t\t\t\t\t\tbranchProtectionElement.element(\"noForcedPush\").setName(\"preventForcedPush\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\r\n\t\t\t\t\t\ttagProtectionElement.element(\"noUpdate\").setName(\"preventUpdate\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate34(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tElement categoryElement = stateElement.element(\"category\");\r\n\t\t\t\t\t\t\t\tstateElement.addElement(\"done\").setText(String.valueOf(categoryElement.getTextTrim().equals(\"CLOSED\")));\r\n\t\t\t\t\t\t\t\tcategoryElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"numOfOpenIssues\").setName(\"numOfIssuesTodo\");\r\n\t\t\t\t\telement.element(\"numOfClosedIssues\").setName(\"numOfIssuesDone\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate35(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement createDateElement = element.element(\"createDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement userElement = element.element(\"user\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (userElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(userElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"created\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", createDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(createDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (submitterElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"updateDate\").detach();\r\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\r\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\r\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\r\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\r\n\t\t\t\t\tif (submitterElement != null)\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\r\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\r\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\r\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\r\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement namedQueriesElement = buildSettingElement.element(\"namedQueries\");\r\n\t\t\t\t\tif (namedQueriesElement != null) {\r\n\t\t\t\t\t\tfor (Element queryElement: namedQueriesElement.elements())\r\n\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\r\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\r\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\r\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\r\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\r\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\r\n\t\t\t\t\t\tElement buildBranchesElement = tagProtectionElement.element(\"buildBranches\");\r\n\t\t\t\t\t\tif (buildBranchesElement != null)\r\n\t\t\t\t\t\t\tbuildBranchesElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element queryElement: element.element(\"userBuildQueries\").elements())\r\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\r\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\r\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\r\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\r\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\r\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\r\n\t\t\t\t\tElement passwordElement = element.element(\"password\");\r\n\t\t\t\t\tif (passwordElement == null)\r\n\t\t\t\t\t\telement.addElement(\"password\").setText(\"external_managed\");\r\n\t\t\t\t\telse if (StringUtils.isBlank(passwordElement.getText()))\r\n\t\t\t\t\t\tpasswordElement.setText(\"external_managed\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element queryElement: element.element(\"userQueries\").elements()) \r\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tstateElement.element(\"done\").detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"BUILD\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element queryElement: valueElement.element(\"namedQueries\").elements()) \r\n\t\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"numOfIssuesTodo\").detach();\r\n\t\t\t\t\telement.element(\"numOfIssuesDone\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\t// Database schema changed\r\n\tprivate void migrate36(File dataDir, Stack<Integer> versions) {\t\r\n\t}\r\n\t\r\n\tprivate void migrate37(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate Long getForkedRoot38(Map<Long, Long> forkedFroms, Long projectId) {\r\n\t\tLong forkedFrom = forkedFroms.get(projectId);\r\n\t\tif (forkedFrom != null)\r\n\t\t\treturn getForkedRoot38(forkedFroms, forkedFrom);\r\n\t\telse\r\n\t\t\treturn projectId;\r\n\t}\r\n\t\r\n\t// from 3.0.10 to 3.0.11\r\n\tprivate void migrate38(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<Long, Long> forkedFroms = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().contains(\".xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.NamedBuildQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\r\n\t\t\t\t\t\t\telement.element(\"query\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//issueQuery\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tif (element.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.BuildPreservation\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tElement conditionElement = element.element(\"condition\");\r\n\t\t\t\t\t\tif (conditionElement.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\tconditionElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (Node node: dom.selectNodes(\"//listFields\")) {\r\n\t\t\t\t\tif (node instanceof Element) {\r\n\t\t\t\t\t\tElement element = (Element) node;\r\n\t\t\t\t\t\tElement stateElement = element.addElement(\"string\");\r\n\t\t\t\t\t\tstateElement.setText(\"State\");\r\n\t\t\t\t\t\tstateElement.detach();\r\n\t\t\t\t\t\telement.elements().add(0, stateElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t\tif (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\r\n\t\t\t\t\tif (className.contains(\"IssueCommittedData\") || className.contains(\"IssuePullRequest\")) \r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tElement forkedFromElement = element.element(\"forkedFrom\");\r\n\t\t\t\t\tif (forkedFromElement != null)\r\n\t\t\t\t\t\tforkedFroms.put(projectId, Long.valueOf(forkedFromElement.getTextTrim()));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tforkedFroms.put(projectId, null);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"enableStartTLS\").setText(\"true\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"enableSSL\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tMap<Long, Long> forkedRoots = new HashMap<>();\r\n\t\tfor (Long projectId: forkedFroms.keySet()) {\r\n\t\t\tforkedRoots.put(projectId, getForkedRoot38(forkedFroms, projectId));\r\n\t\t}\r\n\t\t\r\n\t\tMap<Long, Set<Long>> issueNumbers = new HashMap<>();\r\n\t\tMap<Long, Set<Long>> buildNumbers = new HashMap<>();\r\n\t\tMap<Long, Set<Long>> pullRequestNumbers = new HashMap<>();\r\n\t\t\r\n\t\tfor (Long forkedRoot: forkedRoots.values()) {\r\n\t\t\tissueNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t\tbuildNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t\tpullRequestNumbers.put(forkedRoot, new HashSet<>());\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong issueNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tissueNumbers.get(projectId).add(issueNumber); \r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong buildNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tbuildNumbers.get(projectId).add(buildNumber);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tLong requestNumber = Long.valueOf(element.elementTextTrim(\"number\"));\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\r\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\r\n\t\t\t\t\t\tpullRequestNumbers.get(projectId).add(requestNumber);\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong issueNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> issueNumbersOfForkedRoot = issueNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (issueNumbersOfForkedRoot.contains(issueNumber)) {\r\n\t\t\t\t\t\t\tissueNumber = Collections.max(issueNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(issueNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tissueNumbersOfForkedRoot.add(issueNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong buildNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> buildNumbersOfForkedRoot = buildNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (buildNumbersOfForkedRoot.contains(buildNumber)) {\r\n\t\t\t\t\t\t\tbuildNumber = Collections.max(buildNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(buildNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tbuildNumbersOfForkedRoot.add(buildNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement numberElement = element.element(\"number\");\r\n\t\t\t\t\tLong requestNumber = Long.valueOf(numberElement.getTextTrim());\r\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\r\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\r\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\r\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\r\n\t\t\t\t\t\tSet<Long> requestNumbersOfForkedRoot = pullRequestNumbers.get(forkedRoot);\r\n\t\t\t\t\t\tif (requestNumbersOfForkedRoot.contains(requestNumber)) {\r\n\t\t\t\t\t\t\trequestNumber = Collections.max(requestNumbersOfForkedRoot) + 1;\r\n\t\t\t\t\t\t\tnumberElement.setText(requestNumber.toString());\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\trequestNumbersOfForkedRoot.add(requestNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\t\r\n\t// from 3.0.11 to 3.0.12\r\n\tprivate void migrate39(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\r\n\t// from 3.0.x to 3.1.x\r\n\tprivate void migrate40(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().contains(\".xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.issue.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.util.inputspec.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlong maxRoleId = 0;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tlong roleId = Long.parseLong(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (roleId > maxRoleId) \r\n\t\t\t\t\t\tmaxRoleId = roleId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tboolean hasOwnerRole = false;\r\n\t\tString idOfRolePreviouslyUsingOwnerId = null;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement idElement = element.element(\"id\");\r\n\t\t\t\t\tif (idElement.getText().trim().equals(\"1\")) {\r\n\t\t\t\t\t\tif (element.elementText(\"manageProject\").equals(\"true\")) {\r\n\t\t\t\t\t\t\telement.element(\"name\").setText(\"Owner\");\r\n\t\t\t\t\t\t\thasOwnerRole = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tidOfRolePreviouslyUsingOwnerId = String.valueOf(maxRoleId+1);\r\n\t\t\t\t\t\t\tidElement.setText(idOfRolePreviouslyUsingOwnerId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!hasOwnerRole) {\r\n\t\t\tFile dataFile = new File(dataDir, \"Roles.xml\");\r\n\t\t\tVersionedXmlDoc dom;\r\n\t\t\tif (dataFile.exists()) { \r\n\t\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\r\n\t\t\t} else {\r\n\t\t\t\tdom = new VersionedXmlDoc();\r\n\t\t\t\tdom.addElement(\"list\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tElement ownerRoleElement = dom.getRootElement().addElement(\"io.onedev.server.model.Role\");\r\n\t\t\townerRoleElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\townerRoleElement.addElement(\"id\").setText(\"1\");\r\n\t\t\townerRoleElement.addElement(\"name\").setText(\"Owner\");\r\n\t\t\townerRoleElement.addElement(\"manageProject\").setText(\"true\");\r\n\t\t\townerRoleElement.addElement(\"managePullRequests\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"manageCodeComments\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"codePrivilege\").setText(\"NONE\");\r\n\t\t\townerRoleElement.addElement(\"manageIssues\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"scheduleIssues\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"editableIssueFields\").addAttribute(\"class\", \r\n\t\t\t\t\t\"io.onedev.server.model.support.role.AllIssueFields\");\r\n\t\t\townerRoleElement.addElement(\"manageBuilds\").setText(\"false\");\r\n\t\t\townerRoleElement.addElement(\"jobPrivileges\");\r\n\t\t\tdom.writeToFile(dataFile, false);\r\n\t\t}\r\n\t\t\r\n\t\tif (idOfRolePreviouslyUsingOwnerId != null) {\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"UserAuthorizations.xml\") \r\n\t\t\t\t\t\t|| file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\t\tElement roleElement = element.element(\"role\");\r\n\t\t\t\t\t\tif (roleElement.getText().trim().equals(\"1\"))\r\n\t\t\t\t\t\t\troleElement.setText(idOfRolePreviouslyUsingOwnerId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tMap<String, Element> userBuildSettingElements = new HashMap<>();\r\n\t\tMap<String, Element> userWebHooksElements = new HashMap<>();\r\n\t\tMap<String, String> projectOwners = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultTransitionSpecs\").setName(\"transitionSpecs\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultPromptFieldsUponIssueOpen\").setName(\"promptFieldsUponIssueOpen\");\r\n\t\t\t\t\t\t\tvalueElement.element(\"defaultBoardSpecs\").setName(\"boardSpecs\");\r\n\t\t\t\t\t\t\tfor (Node node: valueElement.selectNodes(\"//uuid\"))\r\n\t\t\t\t\t\t\t\tnode.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tprojectOwners.put(element.elementText(\"id\").trim(), element.elementText(\"owner\").trim());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement transitionSpecsElement = element.element(\"transitionSpecs\");\r\n\t\t\t\t\tif (transitionSpecsElement != null)\r\n\t\t\t\t\t\ttransitionSpecsElement.detach();\r\n\t\t\t\t\tElement promptFieldsUponIssueOpenElement = element.element(\"promptFieldsUponIssueOpen\");\r\n\t\t\t\t\tif (promptFieldsUponIssueOpenElement != null)\r\n\t\t\t\t\t\tpromptFieldsUponIssueOpenElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.detach();\r\n\t\t\t\t\tuserBuildSettingElements.put(id, buildSettingElement);\r\n\t\t\t\t\tElement webHooksElement = element.element(\"webHooks\");\r\n\t\t\t\t\twebHooksElement.detach();\r\n\t\t\t\t\tuserWebHooksElements.put(id, webHooksElement);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlong maxUserAuthorizationId = 0;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\r\n\t\t\t\t\townerElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tString ownerId = ownerElement.getText().trim();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element webHookElement: userWebHooksElements.get(ownerId).elements())\r\n\t\t\t\t\t\telement.element(\"webHooks\").add(webHookElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement userBuildSettingElement = userBuildSettingElements.get(ownerId);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element buildPreservationElement: userBuildSettingElement.element(\"buildPreservations\").elements()) \r\n\t\t\t\t\t\tbuildSettingElement.element(\"buildPreservations\").add(buildPreservationElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element actionAuthorizationElement: userBuildSettingElement.element(\"actionAuthorizations\").elements()) \r\n\t\t\t\t\t\tbuildSettingElement.element(\"actionAuthorizations\").add(actionAuthorizationElement.createCopy());\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement jobSecretsElement = buildSettingElement.element(\"jobSecrets\");\r\n\t\t\t\t\tSet<String> existingJobSecretNames = new HashSet<>();\r\n\t\t\t\t\tfor (Element jobSecretElement: jobSecretsElement.elements()) \r\n\t\t\t\t\t\texistingJobSecretNames.add(jobSecretElement.elementText(\"name\").trim());\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (Element jobSecretElement: userBuildSettingElement.element(\"jobSecrets\").elements()) {\r\n\t\t\t\t\t\tif (!existingJobSecretNames.contains(jobSecretElement.elementText(\"name\").trim())) \r\n\t\t\t\t\t\t\tjobSecretsElement.add(jobSecretElement.createCopy());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tlong userAuthorizationId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (userAuthorizationId > maxUserAuthorizationId)\r\n\t\t\t\t\t\tmaxUserAuthorizationId = userAuthorizationId;\r\n\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\r\n\t\t\t\t\tString userId = element.elementText(\"user\").trim();\r\n\t\t\t\t\tElement roleElement = element.element(\"role\");\r\n\t\t\t\t\tif (userId.equals(projectOwners.get(projectId))) {\r\n\t\t\t\t\t\troleElement.setText(\"1\");\r\n\t\t\t\t\t\tprojectOwners.remove(projectId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tFile dataFile = new File(dataDir, \"UserAuthorizations.xml\");\r\n\t\tVersionedXmlDoc dom;\r\n\t\tif (dataFile.exists()) { \r\n\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\r\n\t\t} else {\r\n\t\t\tdom = new VersionedXmlDoc();\r\n\t\t\tdom.addElement(\"list\");\r\n\t\t}\r\n\t\tfor (Map.Entry<String, String> entry: projectOwners.entrySet()) {\r\n\t\t\tElement userAuthorizationElement = dom.getRootElement().addElement(\"io.onedev.server.model.UserAuthorization\");\r\n\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++maxUserAuthorizationId));\r\n\t\t\tuserAuthorizationElement.addElement(\"project\").setText(entry.getKey());\r\n\t\t\tuserAuthorizationElement.addElement(\"user\").setText(entry.getValue());\r\n\t\t\tuserAuthorizationElement.addElement(\"role\").setText(\"1\");\r\n\t\t}\r\n\t\tdom.writeToFile(dataFile, false);\r\n\t}\r\n\t\r\n\tprivate void migrate41(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.addElement(\"sendAsHtml\").setText(\"true\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\t// Migrate to 3.2.0\r\n\tprivate void migrate42(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> commentRequests = new HashMap<>();\r\n\t\tMap<String, String> requestTargetHeads = new HashMap<>();\r\n\t\tMap<String, String> requestBaseCommits = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tcommentRequests.put(element.elementTextTrim(\"comment\"), element.elementTextTrim(\"request\"));\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementTextTrim(\"id\");\r\n\t\t\t\t\trequestBaseCommits.put(id, element.elementTextTrim(\"baseCommitHash\"));\r\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\r\n\t\t\t\t\tif (lastMergePreviewElement != null) {\r\n\t\t\t\t\t\tElement targetHeadElement = lastMergePreviewElement.element(\"targetHead\");\r\n\t\t\t\t\t\trequestTargetHeads.put(id, targetHeadElement.getTextTrim());\r\n\t\t\t\t\t\ttargetHeadElement.setName(\"targetHeadCommitHash\");\r\n\t\t\t\t\t\tlastMergePreviewElement.element(\"requestHead\").setName(\"headCommitHash\");\r\n\t\t\t\t\t\tElement mergedElement = lastMergePreviewElement.element(\"merged\");\r\n\t\t\t\t\t\tif (mergedElement != null)\r\n\t\t\t\t\t\t\tmergedElement.setName(\"mergeCommitHash\");\r\n\t\t\t\t\t} \r\n\t\t\t\t\telement.element(\"headCommitHash\").detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.administration.authenticator.ldap.\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.plugin.authenticator.ldap.\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequestTrigger\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequestTrigger\");\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequest\", \r\n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequestTrigger\");\r\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement keyElement = element.element(\"key\");\r\n\t\t\t\t\tif (keyElement.getTextTrim().equals(\"SSH\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.element(\"privateKey\").setName(\"pemPrivateKey\");\r\n\t\t\t\t\t} else if (keyElement.getTextTrim().equals(\"JOB_SCRIPTS\")) {\r\n\t\t\t\t\t\tkeyElement.setText(\"GROOVY_SCRIPTS\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tElement actionAuthorizationsElement = buildSettingElement.element(\"actionAuthorizations\");\r\n\t\t\t\t\tif (actionAuthorizationsElement.elements().isEmpty()) {\r\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CreateTagAuthorization\");\r\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CloseMilestoneAuthorization\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"issueManagementEnabled\").setText(\"true\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\r\n\t\t\t\t\tcompareContextElement.element(\"compareCommit\").setName(\"compareCommitHash\");\r\n\t\t\t\t\tElement markPosElement = element.element(\"markPos\");\r\n\t\t\t\t\tmarkPosElement.setName(\"mark\");\r\n\t\t\t\t\tmarkPosElement.element(\"commit\").setName(\"commitHash\");\r\n\t\t\t\t\tString requestId = commentRequests.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (requestId != null)\r\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"submitReason\").setText(\"Unknown\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestBuilds.xml\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\r\n\t\t\t\t\tcontent = StringUtils.replace(content, \"PullRequestBuild\", \"PullRequestVerification\");\r\n\t\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\t\tString newFileName = StringUtils.replace(file.getName(), \"PullRequestBuild\", \"PullRequestVerification\");\r\n\t\t\t\t\tFileUtils.writeFile(new File(dataDir, newFileName), content, StandardCharsets.UTF_8.name());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tElement excludeDateElement = element.element(\"excludeDate\");\r\n\t\t\t\t\tif (excludeDateElement != null)\r\n\t\t\t\t\t\texcludeDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(40));\r\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\telement.element(\"mergeBaseCommitHash\").detach();\r\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tString targetHead = requestTargetHeads.get(requestId);\r\n\t\t\t\t\tElement targetHeadCommitHashElement = element.addElement(\"targetHeadCommitHash\");\r\n\t\t\t\t\tif (targetHead != null) \r\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(targetHead);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(requestBaseCommits.get(requestId));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 3.2.2\r\n\tprivate void migrate43(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null)\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"issueTemplates\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate44_abbreviate(Element element, int maxLen) {\r\n\t\tif (element != null) {\r\n\t\t\tString text = StringUtils.abbreviate(element.getText().trim(), maxLen);\r\n\t\t\telement.setText(text);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.0.5\r\n\tprivate void migrate44(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> verifications = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequestVerifications.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tverifications.put(element.elementTextTrim(\"build\"), element.elementTextTrim(\"request\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"triggerId\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t\tString requestId = verifications.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (requestId != null)\r\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\r\n\t\t\t\t\tElement updatedRefElement = element.element(\"updatedRef\");\r\n\t\t\t\t\tif (updatedRefElement != null)\r\n\t\t\t\t\t\tupdatedRefElement.setName(\"refName\");\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"errorMessage\"), 12000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 15000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 15000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 12000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.0.6\r\n\tprivate void migrate45(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"triggerId\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// migrate to 4.0.7\r\n\tprivate void migrate46(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\r\n\t\t\t\t\t\t\t\tElement serviceAccountElement = executorElement.element(\"serviceAccount\");\r\n\t\t\t\t\t\t\t\tif (serviceAccountElement != null)\r\n\t\t\t\t\t\t\t\t\tserviceAccountElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// migrate to 4.0.8\r\n\tprivate void migrate47(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement refNameElement = element.element(\"refName\");\r\n\t\t\t\t\tif (refNameElement == null)\r\n\t\t\t\t\t\telement.addElement(\"refName\").setText(\"unknown\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// migrate to 4.1.0\r\n\tprivate void migrate48(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"\\\" is before \\\"\", \"\\\" is until \\\"\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"\\\" is after \\\"\", \"\\\" is since \\\"\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t\r\n\tprivate void migrate49(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\r\n\t\t\t\t\tbuildSettingElement.addElement(\"defaultFixedIssueFilters\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 4.2.0\r\n\tprivate void migrate50(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate51(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement rangeElement = element.element(\"mark\").element(\"range\");\r\n\t\t\t\t\tElement tabWidthElement = rangeElement.element(\"tabWidth\");\r\n\t\t\t\t\tif (tabWidthElement == null)\r\n\t\t\t\t\t\ttabWidthElement = rangeElement.addElement(\"tabWidth\");\r\n\t\t\t\t\ttabWidthElement.setText(\"1\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t// Migrate to 4.2.1\r\n\tprivate void migrate52(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"revision\").setText(\"0\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Migrate to 4.3.0\r\n\tprivate void migrate53(File dataDir, Stack<Integer> versions) {\r\n\t\tString anonymousGroupName = null;\r\n\t\tMap<String, String> groupIds = new HashMap<>();\r\n\t\tList<Triple<String, String, String>> authorizations = new ArrayList<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldspec.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.spec.\");\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldsupply.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.supply.\");\r\n\t\t\t\tcontent = StringUtils.replace(content,\r\n\t\t\t\t\t\t\"org.server.plugin.report.checkstyle.\",\r\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.checkstyle.\");\r\n\t\t\t\tcontent = StringUtils.replace(content,\r\n\t\t\t\t\t\t\"org.server.plugin.report.clover.\",\r\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.clover.\");\r\n\t\t\t\t\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t\t\r\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SECURITY\")) {\r\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\t\tElement anonymousGroupElement = valueElement.element(\"anonymousGroup\");\r\n\t\t\t\t\t\t\t\tif (anonymousGroupElement != null) {\r\n\t\t\t\t\t\t\t\t\tif (valueElement.elementTextTrim(\"enableAnonymousAccess\").equals(\"true\"))\r\n\t\t\t\t\t\t\t\t\t\tanonymousGroupName = anonymousGroupElement.getText().trim();\r\n\t\t\t\t\t\t\t\t\tanonymousGroupElement.detach();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\t\tgroupIds.put(element.elementText(\"name\").trim(), element.elementText(\"id\").trim());\r\n\t\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tString groupId = element.elementText(\"group\").trim();\r\n\t\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\r\n\t\t\t\t\t\tString roleId = element.elementText(\"role\").trim();\r\n\t\t\t\t\t\tauthorizations.add(Triple.of(groupId, projectId, roleId));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t}\t\r\n\r\n\t\tMap<String, String> defaultRoles = new HashMap<>();\r\n\t\t\r\n\t\tif (anonymousGroupName != null) {\r\n\t\t\tString anonymousGroupId = groupIds.get(anonymousGroupName);\r\n\t\t\tfor (Triple<String, String, String> authorization: authorizations) {\r\n\t\t\t\tif (authorization.getLeft().equals(anonymousGroupId)) \r\n\t\t\t\t\tdefaultRoles.put(authorization.getMiddle(), authorization.getRight());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString defaultRoleId = defaultRoles.get(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (defaultRoleId != null)\r\n\t\t\t\t\t\telement.addElement(\"defaultRole\").setText(defaultRoleId);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate54(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"createProjects\").detach();\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate55(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\r\n\t\t\t\t\tif (ownerElement != null)\r\n\t\t\t\t\t\townerElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate56(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"alternateEmails\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate57(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\ttry {\r\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\r\n\t\t\t\tcontent = StringUtils.replace(content, \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.numberinput.\", \r\n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.integerinput.\");\r\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (file.getName().startsWith(\"BuildParams.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tif (type.equals(\"Number\"))\r\n\t\t\t\t\t\telement.setText(\"Integer\");\r\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\r\n\t\t\t\t\t\telement.setText(\"Pull Request\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueFields.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tif (type.equals(\"Number\"))\r\n\t\t\t\t\t\telement.setText(\"Integer\");\r\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\r\n\t\t\t\t\t\telement.setText(\"Pull Request\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tif (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.NumberField\"))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.setName(\"io.onedev.server.model.support.issue.field.spec.IntegerField\");\r\n\t\t\t\t\t\t\t\telse if (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.TextField\"))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"multiline\").setText(\"false\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate58(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.addElement(\"contributedSettings\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate59(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.element(\"sendAsHtml\").detach();\r\n\t\t\t\t\t\t\tElement senderAddressElement = valueElement.element(\"senderAddress\");\r\n\t\t\t\t\t\t\tif (senderAddressElement != null) {\r\n\t\t\t\t\t\t\t\tsenderAddressElement.setName(\"emailAddress\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tString hostName;\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\thostName = InetAddress.getLocalHost().getHostName();\r\n\t\t\t\t\t\t\t\t} catch (UnknownHostException e) {\r\n\t\t\t\t\t\t\t\t\thostName = \"localhost\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"emailAddress\").setText(\"onedev@\" + hostName);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate60(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().equals(\"io.onedev.server.plugin.docker.DockerExecutor\"))\r\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.docker.DockerExecutor\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void useUnknownUser(Element element, String field) {\r\n\t\tElement userNameElement = element.element(field + \"Name\");\r\n\t\tif (userNameElement != null) {\r\n\t\t\tuserNameElement.detach();\r\n\t\t\tif (element.element(field) == null)\r\n\t\t\t\telement.addElement(field).setText(\"-2\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate61(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t\tuseUnknownUser(element, \"canceller\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\r\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"IssueDescriptionChangeData\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"PullRequestDescriptionChangeData\"))\r\n\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tuseUnknownUser(element, \"user\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tif (element.elementTextTrim(\"id\").equals(\"-1\"))\r\n\t\t\t\t\t\telement.element(\"email\").setText(\"system email\");\r\n\t\t\t\t}\r\n\t\t\t\tif (file.getName().equals(\"Users.xml\")) {\r\n\t\t\t\t\tElement element = dom.getRootElement().addElement(\"io.onedev.server.model.User\");\r\n\t\t\t\t\telement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\telement.addElement(\"id\").setText(\"-2\");\r\n\t\t\t\t\telement.addElement(\"name\").setText(\"Unknown\");\r\n\t\t\t\t\telement.addElement(\"password\").setText(\"no password\");\r\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\r\n\t\t\t\t\telement.addElement(\"email\").setText(\"unknown email\");\r\n\t\t\t\t\telement.addElement(\"alternateEmails\");\r\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\r\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\r\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\r\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\r\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tList<Element> oldSenderAuthorizationElements = null;\r\n\t\t\t\t\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tlong maxId = 1L;\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement receiveMailSetting = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSetting != null) {\r\n\t\t\t\t\t\t\t\tElement senderAuthorizationsElement = receiveMailSetting.element(\"senderAuthorizations\");\r\n\t\t\t\t\t\t\t\toldSenderAuthorizationElements = senderAuthorizationsElement.elements();\r\n\t\t\t\t\t\t\t\tsenderAuthorizationsElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlong id = Long.valueOf(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (id > maxId)\r\n\t\t\t\t\t\tmaxId = id;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (oldSenderAuthorizationElements != null && !oldSenderAuthorizationElements.isEmpty()) {\r\n\t\t\t\t\tElement serviceDeskSettingElement = dom.getRootElement().addElement(\"io.onedev.server.model.Setting\");\r\n\t\t\t\t\tserviceDeskSettingElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"id\").setText(String.valueOf(maxId+1));\r\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"key\").setText(\"SERVICE_DESK_SETTING\");\r\n\t\t\t\t\tElement valueElement = serviceDeskSettingElement.addElement(\"value\");\r\n\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.ServiceDeskSetting\");\r\n\t\t\t\t\tElement senderAuthorizationsElement = valueElement.addElement(\"senderAuthorizations\");\r\n\t\t\t\t\tElement projectDesignationsElement = valueElement.addElement(\"projectDesignations\");\r\n\t\t\t\t\tElement issueCreationSettingsElement = valueElement.addElement(\"issueCreationSettings\");\r\n\t\t\t\t\tfor (Element oldSenderAuthorizationElement: oldSenderAuthorizationElements) {\r\n\t\t\t\t\t\tElement senderAuthorizationElement = senderAuthorizationsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.SenderAuthorization\");\r\n\t\t\t\t\t\tElement projectDesignationElement = projectDesignationsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.ProjectDesignation\");\r\n\t\t\t\t\t\tElement issueCreationSettingElement = issueCreationSettingsElement\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.IssueCreationSetting\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement senderEmailsElement = oldSenderAuthorizationElement.element(\"senderEmails\");\r\n\t\t\t\t\t\tif (senderEmailsElement != null) {\r\n\t\t\t\t\t\t\tString senderEmails = senderEmailsElement.getText().trim();\r\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t\tprojectDesignationElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"senderEmails\").setText(senderEmails);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement authorizedProjectsElement = oldSenderAuthorizationElement.element(\"authorizedProjects\");\r\n\t\t\t\t\t\tif (authorizedProjectsElement != null) {\r\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedProjects\")\r\n\t\t\t\t\t\t\t\t\t.setText(authorizedProjectsElement.getText().trim());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedRoleName\")\r\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"authorizedRoleName\").trim());\r\n\t\t\t\t\t\tprojectDesignationElement.addElement(\"project\")\r\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"defaultProject\").trim());\r\n\t\t\t\t\t\tElement issueFieldsElement = oldSenderAuthorizationElement.element(\"issueFields\");\r\n\t\t\t\t\t\tissueFieldsElement.detach();\r\n\t\t\t\t\t\tissueCreationSettingElement.add(issueFieldsElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate62(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\r\n\t\t\t\t\t\t\tint cpu = hardware.getProcessor().getLogicalProcessorCount()*1000;\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(String.valueOf(cpu));\r\n\t\t\t\t\t\t\tint memory = (int) (hardware.getMemory().getTotal()/1024/1024);\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(String.valueOf(memory));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) {\r\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor\");\r\n\t\t\t\t\t\t\t\t\texecutorElement.element(\"capacity\").detach();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement userProjectQueriesElement = element.element(\"userProjectQueries\");\r\n\t\t\t\t\tif (userProjectQueriesElement != null)\r\n\t\t\t\t\t\tuserProjectQueriesElement.setName(\"projectQueries\");\r\n\t\t\t\t\tElement userIssueQueriesElement = element.element(\"userIssueQueries\");\r\n\t\t\t\t\tif (userIssueQueriesElement != null)\r\n\t\t\t\t\t\tuserIssueQueriesElement.setName(\"issueQueries\");\r\n\t\t\t\t\tElement userBuildQueriesElement = element.element(\"userBuildQueries\");\r\n\t\t\t\t\tif (userBuildQueriesElement != null)\r\n\t\t\t\t\t\tuserBuildQueriesElement.setName(\"buildQueries\");\r\n\t\t\t\t\tElement userPullRequestQueriesElement = element.element(\"userPullRequestQueries\");\r\n\t\t\t\t\tif (userPullRequestQueriesElement != null)\r\n\t\t\t\t\t\tuserPullRequestQueriesElement.setName(\"pullRequestQueries\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement issueQueryWatchesElement = element.element(\"issueQueryWatches\");\r\n\t\t\t\t\tfor (Element issueQueryWatchElement: issueQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = issueQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userIssueQueryWatchesElement = element.element(\"userIssueQueryWatches\");\r\n\t\t\t\t\tfor (Element userIssueQueryWatchElement: userIssueQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userIssueQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserIssueQueryWatchElement.detach();\r\n\t\t\t\t\t\tissueQueryWatchesElement.add(userIssueQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserIssueQueryWatchesElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement pullRequestQueryWatchesElement = element.element(\"pullRequestQueryWatches\");\r\n\t\t\t\t\tfor (Element pullRequestQueryWatchElement: pullRequestQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = pullRequestQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userPullRequestQueryWatchesElement = element.element(\"userPullRequestQueryWatches\");\r\n\t\t\t\t\tfor (Element userPullRequestQueryWatchElement: userPullRequestQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userPullRequestQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserPullRequestQueryWatchElement.detach();\r\n\t\t\t\t\t\tpullRequestQueryWatchesElement.add(userPullRequestQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserPullRequestQueryWatchesElement.detach();\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement buildQuerySubscriptionsElement = element.element(\"buildQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: buildQuerySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userBuildQuerySubscriptionsElement = element.element(\"userBuildQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userBuildQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tbuildQuerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserBuildQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t \r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\r\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\r\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserQueryWatchElement.detach();\r\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQueryWatchesElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.PullRequestQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\r\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\r\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\r\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tuserQueryWatchElement.detach();\r\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQueryWatchesElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.BuildQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"querySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CodeCommentQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t} else if (file.getName().startsWith(\"CommitQuerySettings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CommitQueryPersonalization\");\r\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\r\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"projectQuerySubscriptions\");\r\n\t\t\t\t\tquerySubscriptionsElement.setName(\"querySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \r\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\r\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\r\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\r\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\r\n\t\t\t\t\t\tqueryNameElement.detach();\r\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate63(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"AutoDiscoveredJobExecutor\")) \r\n\t\t\t\t\t\t\t\t\texecutorElement.detach();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\r\n\t\t\t\t\tif (errorMessageElement != null)\r\n\t\t\t\t\t\terrorMessageElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate64(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement timeoutElement = valueElement.element(\"timeout\");\r\n\t\t\t\t\t\t\tint timeout = Integer.valueOf(timeoutElement.getTextTrim());\r\n\t\t\t\t\t\t\tif (timeout == 0)\r\n\t\t\t\t\t\t\t\ttimeout = 60;\r\n\t\t\t\t\t\t\telse if (timeout < 10)\r\n\t\t\t\t\t\t\t\ttimeout = 10;\r\n\t\t\t\t\t\t\ttimeoutElement.setText(String.valueOf(timeout));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void migrate65(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tvalueElement.element(\"cpu\").detach();\r\n\t\t\t\t\t\tvalueElement.element(\"memory\").detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate66(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Element> compareContexts = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\r\n\t\t\t\t\tElement leftSideElement = compareContextElement.element(\"leftSide\");\r\n\t\t\t\t\tElement compareCommitHashElement = compareContextElement.element(\"compareCommitHash\");\r\n\t\t\t\t\tString compareCommitHash = compareCommitHashElement.getTextTrim();\r\n\t\t\t\t\tString commitHash = element.element(\"mark\").elementTextTrim(\"commitHash\");\r\n\t\t\t\t\tif (Boolean.parseBoolean(leftSideElement.getTextTrim())) {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(compareCommitHash);\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(commitHash);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(compareCommitHash);\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(commitHash);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement requestElement = element.element(\"request\");\r\n\t\t\t\t\tif (requestElement != null) {\r\n\t\t\t\t\t\tcompareContextElement.addElement(\"pullRequest\").setText(requestElement.getTextTrim());\r\n\t\t\t\t\t\trequestElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tleftSideElement.detach();\r\n\t\t\t\t\tcompareCommitHashElement.detach();\r\n\t\t\t\t\tcompareContexts.put(element.elementTextTrim(\"id\"), compareContextElement);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement lastCodeCommentActivityDateElement = element.element(\"lastCodeCommentActivityDate\");\r\n\t\t\t\t\tif (lastCodeCommentActivityDateElement != null)\r\n\t\t\t\t\t\tlastCodeCommentActivityDateElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tString enableStartTLSElement = valueElement.elementTextTrim(\"enableStartTLS\");\r\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\r\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"enableSSL\").setText(enableStartTLSElement);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString elementId = element.elementTextTrim(\"comment\");\r\n\t\t\t\t\telement.add(compareContexts.get(elementId).createCopy());\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate67(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Element> compareContexts = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"JestTestMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.UnitTestMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Jest\", \"Unit\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"CloverMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CoverageMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Clover\", \"Coverage\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t} else if (file.getName().startsWith(\"CheckstyleMetric.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.setName(\"io.onedev.server.model.ProblemMetric\");\r\n\t\t\t\t\r\n\t\t\t\tString newFileName = file.getName().replace(\"Checkstyle\", \"Problem\");\r\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\r\n\t\t\t\tFileUtils.deleteFile(file);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrateAttachmentLinks(@Nullable Element element, Map<String, String> projectIds) {\r\n\t\tif (element != null) {\r\n\t\t\tString content = element.getText();\r\n\t\t\tPattern pattern = Pattern.compile(\"/projects/([\\\\w-\\\\.]+)/attachment/\");\r\n\t\t\tMatcher matcher = pattern.matcher(content);\r\n\t\t\tStringBuffer buffer = new StringBuffer();\r\n\t\t\t\r\n\t\t\twhile (matcher.find()) {\r\n\t\t\t\tString projectName = matcher.group(1);\r\n\t\t\t\tString projectId = projectIds.get(projectName);\r\n\t\t\t\tif (projectId != null) \r\n\t\t\t\t\tmatcher.appendReplacement(buffer, \"/projects/\" + projectId + \"/attachment/\");\r\n\t\t\t\telse\r\n\t\t\t\t\tmatcher.appendReplacement(buffer, Matcher.quoteReplacement(matcher.group()));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmatcher.appendTail(buffer);\r\n\t\t\telement.setText(buffer.toString());\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate68(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> projectIds = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tprojectIds.put(element.elementTextTrim(\"name\"), element.elementTextTrim(\"id\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"codeManagementEnabled\").setText(\"true\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"createRootProjects\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\r\n\t\t\t\t\telement.addElement(\"createChildren\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tElement jobMatchElement = executorElement.element(\"jobMatch\");\r\n\t\t\t\t\t\t\tif (jobMatchElement.getTextTrim().equals(\"all\"))\r\n\t\t\t\t\t\t\t\tjobMatchElement.detach();\r\n\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\tjobMatchElement.setName(\"jobRequirement\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate69(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\r\n\t// Migrate to 5.4.0\r\n\tprivate void migrate70(File dataDir, Stack<Integer> versions) {\r\n\t\tLong scheduleId = 1L;\r\n\t\tVersionedXmlDoc issueSchedulesDoc = new VersionedXmlDoc();\r\n\t\tElement listElement = issueSchedulesDoc.addElement(\"list\");\r\n\t\t\r\n\t\tSet<String> promptFieldsUponIssueOpen = new HashSet<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString issueSubmitDate = element.elementTextTrim(\"submitDate\");\r\n\t\t\t\t\tElement milestoneElement = element.element(\"milestone\");\r\n\t\t\t\t\tif (milestoneElement != null) {\r\n\t\t\t\t\t\tElement scheduleElement = listElement.addElement(\"io.onedev.server.model.IssueSchedule\");\r\n\t\t\t\t\t\tscheduleElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tscheduleElement.addElement(\"id\").setText(String.valueOf(scheduleId++));\r\n\t\t\t\t\t\tscheduleElement.addElement(\"issue\").setText(issueId);\r\n\t\t\t\t\t\tscheduleElement.addElement(\"milestone\").setText(milestoneElement.getTextTrim());\r\n\t\t\t\t\t\tscheduleElement.addElement(\"date\").addAttribute(\"class\", \"sql-timestamp\").setText(issueSubmitDate);\r\n\t\t\t\t\t\tmilestoneElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tString dataClass = dataElement.attributeValue(\"class\");\r\n\t\t\t\t\tif (dataClass.contains(\"IssueMilestoneChangeData\") || dataClass.contains(\"IssueBatchUpdateData\")) {\r\n\t\t\t\t\t\tElement oldMilestonesElement = dataElement.addElement(\"oldMilestones\");\r\n\t\t\t\t\t\tElement oldMilestoneElement = dataElement.element(\"oldMilestone\");\r\n\t\t\t\t\t\tif (oldMilestoneElement != null) {\r\n\t\t\t\t\t\t\toldMilestonesElement.addElement(\"string\").setText(oldMilestoneElement.getText());\r\n\t\t\t\t\t\t\toldMilestoneElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tElement newMilestonesElement = dataElement.addElement(\"newMilestones\");\r\n\t\t\t\t\t\tElement newMilestoneElement = dataElement.element(\"newMilestone\");\r\n\t\t\t\t\t\tif (newMilestoneElement != null) { \r\n\t\t\t\t\t\t\tnewMilestonesElement.addElement(\"string\").setText(newMilestoneElement.getText());\r\n\t\t\t\t\t\t\tnewMilestoneElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldNameElement: valueElement.element(\"promptFieldsUponIssueOpen\").elements())\r\n\t\t\t\t\t\t\t\tpromptFieldsUponIssueOpen.add(fieldNameElement.getText().trim());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tissueSchedulesDoc.writeToFile(new File(dataDir, \"IssueSchedules.xml\"), false);\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\"))\r\n\t\t\t\t\t\t\t\texecutorElement.element(\"createCacheLabels\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\r\n\t\t\t\t\t\t\t\tif (promptFieldsUponIssueOpen.contains(fieldSpecElement.elementText(\"name\").trim()))\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"true\");\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"false\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvalueElement.element(\"promptFieldsUponIssueOpen\").detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t// Migrate to 6.0.0\r\n\tprivate void migrate71(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> issueScopes = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> issueIds = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> buildIds = new HashMap<>();\r\n\t\tMap<Pair<String, String>, String> pullRequestIds = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tissueScopes.put(issueId, numberScope);\r\n\t\t\t\t\tissueIds.put(new Pair<>(numberScope, element.elementTextTrim(\"number\")), issueId);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString buildId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\r\n\t\t\t\t\tbuildIds.put(new Pair<>(numberScope, number), buildId);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"id\");\r\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\r\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\r\n\t\t\t\t\tpullRequestIds.put(new Pair<>(numberScope, number), pullRequestId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueFields.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\r\n\t\t\t\t\tString value = element.elementTextTrim(\"value\");\r\n\t\t\t\t\tif (type.equals(\"Issue\")) {\r\n\t\t\t\t\t\tString fieldIssueId = issueIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldIssueId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldIssueId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (type.equals(\"Build\")) {\r\n\t\t\t\t\t\tString fieldBuildId = buildIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldBuildId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldBuildId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t} else if (type.equals(\"Pull Request\")) {\r\n\t\t\t\t\t\tString fieldPullRequestId = pullRequestIds.get(new Pair<>(issueScopes.get(issueId), value));\r\n\t\t\t\t\t\tif (fieldPullRequestId != null)\r\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldPullRequestId);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tprivate void migrate72(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> stateOrdinals = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tint index = 0;\r\n\t\t\t\t\t\t\tfor (Element stateSpecElement: valueElement.element(\"stateSpecs\").elements()) \r\n\t\t\t\t\t\t\t\tstateOrdinals.put(stateSpecElement.elementText(\"name\").trim(), index++);\r\n\t\t\t\t\t\t\tfor (Element boardSpecElement: valueElement.element(\"boardSpecs\").elements())\r\n\t\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"listLinks\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tint ordinal = stateOrdinals.get(element.elementText(\"state\").trim());\r\n\t\t\t\t\telement.addElement(\"stateOrdinal\").setText(String.valueOf(ordinal));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\r\n\t\t\t\t\tif (issueSettingElement.element(\"listFields\") != null)\r\n\t\t\t\t\t\tissueSettingElement.addElement(\"listLinks\");\r\n\t\t\t\t\tElement boardSpecsElement = issueSettingElement.element(\"boardSpecs\");\r\n\t\t\t\t\tif (boardSpecsElement != null) {\r\n\t\t\t\t\t\tfor (Element boardSpecElement: boardSpecsElement.elements()) \r\n\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate73(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\r\n\t\t\t\t\tif (closeInfoElement != null) {\r\n\t\t\t\t\t\tElement statusElement = closeInfoElement.element(\"status\");\r\n\t\t\t\t\t\tstatusElement.detach();\r\n\t\t\t\t\t\telement.add(statusElement);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"OPEN\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement osElement = element.element(\"os\");\r\n\t\t\t\t\tString osName;\r\n\t\t\t\t\t\r\n\t\t\t\t\tswitch (osElement.getTextTrim()) {\r\n\t\t\t\t\tcase \"WINDOWS\":\r\n\t\t\t\t\t\tosName = \"Windows\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"LINUX\":\r\n\t\t\t\t\t\tosName = \"Linux\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"FREEBSD\":\r\n\t\t\t\t\t\tosName = \"FreeBSD\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MACOSX\":\r\n\t\t\t\t\t\tosName = \"Mac OS X\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tosName = \"Other\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telement.addElement(\"osName\").setText(osName);\r\n\t\t\t\t\tosElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\t\r\n\tprivate void migrate74(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"triggerChain\").setText(UUID.randomUUID().toString());\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate75(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"AgentTokens.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement noteElement = element.element(\"note\");\r\n\t\t\t\t\tif (noteElement != null)\r\n\t\t\t\t\t\tnoteElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate76(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tvalueElement.addElement(\"maxCodeSearchEntries\").setText(\"100\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate77(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> userIds = new HashMap<>();\r\n\t\t\r\n\t\tLong maxPullRequestCommentId = 0L;\r\n\t\tLong maxIssueCommentId = 0L;\r\n\t\tFile issueCommentsFile = null;\r\n\t\tFile pullRequestCommentsFile = null;\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\r\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\r\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\r\n\t\t\t\t\tif (fullNameElement != null) \r\n\t\t\t\t\t\tuserIds.put(fullNameElement.getText().trim(), id);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tuserIds.put(name, id);\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (commentId > maxIssueCommentId)\r\n\t\t\t\t\t\tmaxIssueCommentId = commentId;\r\n\t\t\t\t}\r\n\t\t\t\tissueCommentsFile = file;\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\r\n\t\t\t\t\tif (commentId > maxPullRequestCommentId)\r\n\t\t\t\t\t\tmaxPullRequestCommentId = commentId;\r\n\t\t\t\t}\r\n\t\t\t\tpullRequestCommentsFile = file;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tVersionedXmlDoc issueCommentsDom;\r\n\t\tif (issueCommentsFile == null) {\r\n\t\t\tissueCommentsFile = new File(dataDir, \"IssueComments.xml\");\r\n\t\t\tissueCommentsDom = new VersionedXmlDoc();\r\n\t\t\tissueCommentsDom.addElement(\"list\");\r\n\t\t} else {\r\n\t\t\tissueCommentsDom = VersionedXmlDoc.fromFile(issueCommentsFile);\r\n\t\t}\r\n\r\n\t\tVersionedXmlDoc pullRequestCommentsDom;\r\n\t\tif (pullRequestCommentsFile == null) {\r\n\t\t\tpullRequestCommentsFile = new File(dataDir, \"PullRequestComments.xml\");\r\n\t\t\tpullRequestCommentsDom = new VersionedXmlDoc();\r\n\t\t\tpullRequestCommentsDom.addElement(\"list\");\r\n\t\t} else {\r\n\t\t\tpullRequestCommentsDom = VersionedXmlDoc.fromFile(pullRequestCommentsFile);\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\telement.element(\"issueManagementEnabled\").setName(\"issueManagement\");\r\n\t\t\t\t\telement.element(\"codeManagementEnabled\").setName(\"codeManagement\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"user\") == null)\r\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\r\n\t\t\t\t\tElement dataElement = element.element(\"data\");\r\n\t\t\t\t\tElement assigneeElement = dataElement.element(\"assignee\");\r\n\t\t\t\t\tif (assigneeElement != null) {\r\n\t\t\t\t\t\tString userId = userIds.get(assigneeElement.getText().trim());\r\n\t\t\t\t\t\tif (userId != null) {\r\n\t\t\t\t\t\t\tassigneeElement.setName(\"assigneeId\");\r\n\t\t\t\t\t\t\tassigneeElement.setText(userId);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement reviewerElement = dataElement.element(\"reviewer\");\r\n\t\t\t\t\tif (reviewerElement != null) {\r\n\t\t\t\t\t\tString userId = userIds.get(reviewerElement.getText().trim());\r\n\t\t\t\t\t\tif (userId != null) {\r\n\t\t\t\t\t\t\treviewerElement.setName(\"reviewerId\");\r\n\t\t\t\t\t\t\treviewerElement.setText(userId);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\tElement pullRequestCommentElement = pullRequestCommentsDom.getRootElement()\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.PullRequestComment\");\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\r\n\t\t\t\t\t\tpullRequestCommentElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"id\").setText(String.valueOf(++maxPullRequestCommentId));\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"request\").setText(element.elementText(\"request\").trim());\r\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\r\n\t\t\t\t\t\tElement pullRequestCommentDateElement = pullRequestCommentElement.addElement(\"date\");\r\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\t\tpullRequestCommentDateElement.setText(dateElement.getText().trim());\r\n\t\t\t\t\t\tpullRequestCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"user\") == null)\r\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\r\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\r\n\t\t\t\t\tif (commentElement != null) {\r\n\t\t\t\t\t\tElement issueCommentElement = issueCommentsDom.getRootElement()\r\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.IssueComment\");\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\r\n\t\t\t\t\t\tissueCommentElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"id\").setText(String.valueOf(++maxIssueCommentId));\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"issue\").setText(element.elementText(\"issue\").trim());\r\n\t\t\t\t\t\tissueCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\r\n\t\t\t\t\t\tElement issueCommentDateElement = issueCommentElement.addElement(\"date\");\r\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\r\n\t\t\t\t\t\tissueCommentDateElement.setText(dateElement.getText().trim());\r\n\t\t\t\t\t\tissueCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\r\n\t\t\t\t\t\tcommentElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tissueCommentsDom.writeToFile(issueCommentsFile, false);\r\n\t\tpullRequestCommentsDom.writeToFile(pullRequestCommentsFile, false);\r\n\t}\r\n\r\n\tprivate void migrate78(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\r\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate79(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate80(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\r\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\r\n\t\t\t\t\tif (commentCount == null) \r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\tcommentCount++;\r\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\r\n\t\t\t\t\tif (commentCount == null)\r\n\t\t\t\t\t\tcommentCount = 0;\r\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"temporal\").setText((\"false\"));\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate81(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.element(\"serviceDeskName\") == null) \r\n\t\t\t\t\t\telement.addElement(\"serviceDeskName\").setText(Project.NULL_SERVICE_DESK_PREFIX + UUID.randomUUID().toString());\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Migrate to 7.0.0\r\n\tprivate void migrate82(File dataDir, Stack<Integer> versions) {\r\n\t\tSet<String> userNames = new HashSet<>();\r\n\t\tMap<String, String> primaryEmails = new HashMap<>();\r\n\t\tMap<String, String> gitEmails = new HashMap<>();\r\n\t\tMap<String, String> alternateEmails = new HashMap<>();\r\n\t\t\r\n\t\tString sshServerUrl = null;\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) \r\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\r\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) \r\n\t\t\t\t\t\ttagProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString userId = element.elementText(\"id\").trim();\r\n\t\t\t\t\tElement nameElement = element.element(\"name\");\r\n\t\t\t\t\tString name = nameElement.getText().trim();\r\n\t\t\t\t\tif (userNames.add(name.toLowerCase())) \r\n\t\t\t\t\t\tnameElement.setText(name.toLowerCase());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated login names found when convert '\" + name + \"' to lowercase\");\r\n\t\t\t\t\tif (userId.equals(\"-1\")) {\r\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"OneDev\");\r\n\t\t\t\t\t\telement.element(\"email\").detach();\r\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\r\n\t\t\t\t\t} else if (userId.equals(\"-2\")) {\r\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"Unknown\");\r\n\t\t\t\t\t\telement.element(\"email\").detach();\r\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tElement emailElement = element.element(\"email\");\r\n\t\t\t\t\t\tString email = emailElement.getText().trim();\r\n\t\t\t\t\t\tif (primaryEmails.put(email.toLowerCase(), userId) != null)\r\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated email address found when convert '\" + email + \"' to lowercase\");\r\n\t\t\t\t\t\temailElement.detach();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement gitEmailElement = element.element(\"gitEmail\");\r\n\t\t\t\t\t\tif (gitEmailElement != null) {\r\n\t\t\t\t\t\t\tString gitEmail = gitEmailElement.getText().trim();\r\n\t\t\t\t\t\t\tgitEmails.put(gitEmail.toLowerCase(), userId);\r\n\t\t\t\t\t\t\tgitEmailElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElement alternateEmailsElement = element.element(\"alternateEmails\");\r\n\t\t\t\t\t\tfor (Element alternateEmailElement: alternateEmailsElement.elements()) {\r\n\t\t\t\t\t\t\tString alternateEmail = alternateEmailElement.getText().trim();\r\n\t\t\t\t\t\t\talternateEmails.put(alternateEmail.toLowerCase(), userId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\talternateEmailsElement.detach();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tElement ssoInfoElement = element.element(\"ssoInfo\");\r\n\t\t\t\t\tElement connectorElement = ssoInfoElement.element(\"connector\");\r\n\t\t\t\t\tif (connectorElement != null) \r\n\t\t\t\t\t\telement.addElement(\"ssoConnector\").setText(connectorElement.getText().trim());\r\n\t\t\t\t\tssoInfoElement.detach();\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.element(\"triggerChain\").setName(\"pipeline\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"SECURITY\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\tvalueElement.addElement(\"enforce2FA\").setText(\"false\");\r\n\t\t\t\t\t} else if (key.equals(\"SSH\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement sshServerUrlElement = valueElement.element(\"serverUrl\");\r\n\t\t\t\t\t\t\tsshServerUrl = sshServerUrlElement.getText().trim();\r\n\t\t\t\t\t\t\tsshServerUrlElement.detach();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"enforce2FA\").setText(\"false\");\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (sshServerUrl != null) {\r\n\t\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \r\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\r\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\t\tif (valueElement != null) \r\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"sshRootUrl\").setText(sshServerUrl);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tVersionedXmlDoc emailAddressesDom;\r\n\t\tFile emailAddressesFile = new File(dataDir, \"EmailAddresss.xml\");\r\n\t\temailAddressesDom = new VersionedXmlDoc();\r\n\t\tElement listElement = emailAddressesDom.addElement(\"list\");\r\n\t\t\r\n\t\tlong id = 1;\r\n\t\tMap<String, Element> primaryEmailElements = new HashMap<>();\r\n\t\tfor (Map.Entry<String, String> entry: primaryEmails.entrySet()) {\r\n\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\temailAddressElement.addElement(\"primary\").setText(\"true\");\r\n\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\r\n\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\tprimaryEmailElements.put(entry.getValue(), emailAddressElement);\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, String> entry: gitEmails.entrySet()) {\r\n\t\t\tif (!primaryEmails.containsKey(entry.getKey())) {\r\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\r\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\t\tprimaryEmailElements.get(entry.getValue()).element(\"git\").setText(\"false\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (Map.Entry<String, String> entry: alternateEmails.entrySet()) {\r\n\t\t\tif (!primaryEmails.containsKey(entry.getKey()) && !gitEmails.containsKey(entry.getKey())) {\r\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\r\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\r\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\r\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"false\");\r\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\r\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\temailAddressesDom.writeToFile(emailAddressesFile, true);\r\n\t}\r\n\t\t\t\r\n\tprivate void migrate83(File dataDir, Stack<Integer> versions) {\r\n\t\tMap<String, String> issueInfos = new HashMap<>();\r\n\t\tMap<String, String> pullRequestInfos = new HashMap<>();\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString issueInfo = MessageFormat.format(\r\n\t\t\t\t\t\t\t\"project id: {0}, issue number: {1}\", \r\n\t\t\t\t\t\t\telement.elementText(\"project\"), element.elementText(\"number\"));\r\n\t\t\t\t\tissueInfos.put(element.elementTextTrim(\"id\"), issueInfo);\r\n\t\t\t\t}\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString pullRequestInfo = MessageFormat.format(\r\n\t\t\t\t\t\t\t\"project id: {0}, pull request number: {1}\", \r\n\t\t\t\t\t\t\telement.elementText(\"targetProject\"), element.elementText(\"number\"));\r\n\t\t\t\t\tpullRequestInfos.put(element.elementTextTrim(\"id\"), pullRequestInfo);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\r\n\t\t\t\t\tif (descriptionElement != null) {\r\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\r\n\t\t\t\t\t\tif (description.length() > Issue.MAX_DESCRIPTION_LEN) {\r\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, Issue.MAX_DESCRIPTION_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Issue description too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementTextTrim(\"id\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\r\n\t\t\t\t\tif (descriptionElement != null) {\r\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\r\n\t\t\t\t\t\tif (description.length() > PullRequest.MAX_DESCRIPTION_LEN) {\r\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, PullRequest.MAX_DESCRIPTION_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Pull request description too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementTextTrim(\"id\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement contentElement = element.element(\"content\");\r\n\t\t\t\t\tif (contentElement != null) {\r\n\t\t\t\t\t\tString content = contentElement.getText().trim();\r\n\t\t\t\t\t\tif (content.length() > IssueComment.MAX_CONTENT_LEN) {\r\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, IssueComment.MAX_CONTENT_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Issue comment too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementText(\"issue\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tElement contentElement = element.element(\"content\");\r\n\t\t\t\t\tif (contentElement != null) {\r\n\t\t\t\t\t\tString content = contentElement.getText().trim();\r\n\t\t\t\t\t\tif (content.length() > PullRequestComment.MAX_CONTENT_LEN) {\r\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, PullRequestComment.MAX_CONTENT_LEN));\r\n\t\t\t\t\t\t\tlogger.warn(\"Pull request comment too long and truncated ({})\", \r\n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementText(\"request\")));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\r\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\r\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"pollInterval\").setText(\"60\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate84(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate85(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \r\n\t\t\t\t\telement.addElement(\"uuid\").setText(UUID.randomUUID().toString());\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void migrate86(File dataDir, Stack<Integer> versions) {\r\n\t}\r\n\t\r\n\tprivate void migrate87(File dataDir, Stack<Integer> versions) {\r\n\t\tfor (File file: dataDir.listFiles()) {\r\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\r\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\r\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\r\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\r\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\r\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\r\n\t\t\t\t\t\tif (valueElement != null) {\r\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\r\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) \r\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountDockerSock\").setText(\"false\");\r\n\t\t\t\t\t\t\t\telse if (executorElement.getName().contains(\"KubernetesExecutor\")) \r\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountContainerSock\").setText(\"false\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.writeToFile(file, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "package io.onedev.server.plugin.executor.kubernetes;\n\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_JOB_TOKEN;\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_OS_INFO;\nimport static io.onedev.k8shelper.KubernetesHelper.ENV_SERVER_URL;\nimport static io.onedev.k8shelper.KubernetesHelper.IMAGE_REPO_PREFIX;\nimport static io.onedev.k8shelper.KubernetesHelper.LOG_END_MESSAGE;\nimport static io.onedev.k8shelper.KubernetesHelper.stringifyPosition;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Instant;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport javax.annotation.Nullable;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang.SerializationUtils;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.apache.commons.text.WordUtils;\nimport org.hibernate.validator.constraints.NotEmpty;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.yaml.snakeyaml.Yaml;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Preconditions;\nimport com.google.common.base.Splitter;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\n\nimport io.onedev.agent.job.FailedException;\nimport io.onedev.commons.utils.ExceptionUtils;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.commons.utils.command.Commandline;\nimport io.onedev.commons.utils.command.ExecutionResult;\nimport io.onedev.commons.utils.command.LineConsumer;\nimport io.onedev.k8shelper.Action;\nimport io.onedev.k8shelper.BuildImageFacade;\nimport io.onedev.k8shelper.CommandFacade;\nimport io.onedev.k8shelper.CompositeFacade;\nimport io.onedev.k8shelper.ExecuteCondition;\nimport io.onedev.k8shelper.KubernetesHelper;\nimport io.onedev.k8shelper.LeafFacade;\nimport io.onedev.k8shelper.LeafVisitor;\nimport io.onedev.k8shelper.OsContainer;\nimport io.onedev.k8shelper.OsExecution;\nimport io.onedev.k8shelper.OsInfo;\nimport io.onedev.k8shelper.RegistryLoginFacade;\nimport io.onedev.k8shelper.RunContainerFacade;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.EnvVar;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.model.support.administration.jobexecutor.NodeSelectorEntry;\nimport io.onedev.server.model.support.administration.jobexecutor.ServiceLocator;\nimport io.onedev.server.model.support.inputspec.SecretInput;\nimport io.onedev.server.plugin.executor.kubernetes.KubernetesExecutor.TestData;\nimport io.onedev.server.util.CollectionUtils;\nimport io.onedev.server.util.PKCS12CertExtractor;\nimport io.onedev.server.util.ServerConfig;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Horizontal;\nimport io.onedev.server.web.editable.annotation.OmitName;\nimport io.onedev.server.web.util.Testable;\n\n@Editable(order=KubernetesExecutor.ORDER, description=\"This executor runs build jobs as pods in a kubernetes cluster. \"\n\t\t+ \"No any agents are required.\"\n\t\t+ \"<b class='text-danger'>Note:</b> Make sure server url is specified correctly in system \"\n\t\t+ \"setting as job pods need to access it to download source and artifacts\")\n@Horizontal\npublic class KubernetesExecutor extends JobExecutor implements Testable<TestData> {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tstatic final int ORDER = 40;\n\t\n\tprivate static final int POD_WATCH_TIMEOUT = 60;\n\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(KubernetesExecutor.class);\n\t\n\tprivate static final long NAMESPACE_DELETION_TIMEOUT = 120;\n\t\n\tprivate List<NodeSelectorEntry> nodeSelector = new ArrayList<>();\n\t\n\tprivate String clusterRole;\n\t\n\tprivate List<RegistryLogin> registryLogins = new ArrayList<>();\n\t\n\tprivate List<ServiceLocator> serviceLocators = new ArrayList<>();\n\n\tprivate String configFile;\n\t\n\tprivate String kubeCtlPath;\n\t\n\tprivate boolean mountContainerSock;\n\t\n\t@Editable(order=20, description=\"Optionally specify node selector of the job pods\")\n\tpublic List<NodeSelectorEntry> getNodeSelector() {\n\t\treturn nodeSelector;\n\t}\n\n\tpublic void setNodeSelector(List<NodeSelectorEntry> nodeSelector) {\n\t\tthis.nodeSelector = nodeSelector;\n\t}\n\n\t@Editable(order=40, description=\"Optionally specify cluster role the job pods service account \"\n\t\t\t+ \"binding to. This is necessary if you want to do things such as running other \"\n\t\t\t+ \"Kubernetes pods in job command\")\n\tpublic String getClusterRole() {\n\t\treturn clusterRole;\n\t}\n\n\tpublic void setClusterRole(String clusterRole) {\n\t\tthis.clusterRole = clusterRole;\n\t}\n\n\t@Editable(order=200, description=\"Specify login information of docker registries if necessary. \"\n\t\t\t+ \"These logins will be used to create image pull secrets of the job pods\")\n\tpublic List<RegistryLogin> getRegistryLogins() {\n\t\treturn registryLogins;\n\t}\n\n\tpublic void setRegistryLogins(List<RegistryLogin> registryLogins) {\n\t\tthis.registryLogins = registryLogins;\n\t}\n\t\n\t@Editable(order=300, description=\"Whether or not to mount docker/containerd sock into job \"\n\t\t\t+ \"container to support container operations in job commands, for instance to build \"\n\t\t\t+ \"container image.<br>\"\n\t\t\t+ \"<b class='text-danger'>WARNING</b>: Malicious jobs can take control of k8s node \"\n\t\t\t+ \"running the job by operating the mounted container sock. You should configure job \"\n\t\t\t+ \"requirement option below to make sure the executor can only be used by trusted \"\n\t\t\t+ \"jobs if this option is enabled\")\n\tpublic boolean isMountContainerSock() {\n\t\treturn mountContainerSock;\n\t}\n\n\tpublic void setMountContainerSock(boolean mountContainerSock) {\n\t\tthis.mountContainerSock = mountContainerSock;\n\t}\n\n\t@Editable(order=25000, group=\"More Settings\", description=\"Optionally specify where to run service pods \"\n\t\t\t+ \"specified in job. The first matching locator will be used. If no any locators are found, \"\n\t\t\t+ \"node selector of the executor will be used\")\n\tpublic List<ServiceLocator> getServiceLocators() {\n\t\treturn serviceLocators;\n\t}\n\n\tpublic void setServiceLocators(List<ServiceLocator> serviceLocators) {\n\t\tthis.serviceLocators = serviceLocators;\n\t}\n\n\t@Editable(name=\"Kubectl Config File\", order=26000, group=\"More Settings\", \n\t\t\tplaceholder=\"Use default\", description=\"Specify absolute path to the config file \"\n\t\t\t\t\t+ \"used by kubectl to access the cluster. Leave empty to have kubectl \"\n\t\t\t\t\t+ \"determining cluster access information automatically\")\n\tpublic String getConfigFile() {\n\t\treturn configFile;\n\t}\n \n\tpublic void setConfigFile(String configFile) {\n\t\tthis.configFile = configFile;\n\t}\n\n\t@Editable(name=\"Path to kubectl\", order=27000, group=\"More Settings\", placeholder=\"Use default\", \n\t\t\tdescription=\"Specify absolute path to the kubectl utility, for instance: <i>/usr/bin/kubectl</i>. \"\n\t\t\t+ \"If left empty, OneDev will try to find the utility from system path\")\n\tpublic String getKubeCtlPath() {\n\t\treturn kubeCtlPath;\n\t}\n\n\tpublic void setKubeCtlPath(String kubeCtlPath) {\n\t\tthis.kubeCtlPath = kubeCtlPath;\n\t}\n\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\texecute(jobToken, jobContext.getLogger(), jobContext);\n\t}\n\t\n\t@Override\n\tpublic boolean isPlaceholderAllowed() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\texecute(UUID.randomUUID().toString(), jobLogger, testData.getDockerImage());\n\t}\n\t\n\tprivate Commandline newKubeCtl() {\n\t\tString kubectl = getKubeCtlPath();\n\t\tif (kubectl == null) {\n\t\t\tif (SystemUtils.IS_OS_MAC_OSX && new File(\"/usr/local/bin/kubectl\").exists())\n\t\t\t\tkubectl = \"/usr/local/bin/kubectl\";\n\t\t\telse\n\t\t\t\tkubectl = \"kubectl\";\n\t\t}\n\t\tCommandline cmdline = new Commandline(kubectl); \n\t\tif (getConfigFile() != null)\n\t\t\tcmdline.addArgs(\"--kubeconfig\", getConfigFile());\n\t\treturn cmdline;\n\t}\n\t\n\tprivate String createResource(Map<Object, Object> resourceDef, Collection<String> secretsToMask, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\tFile file = null;\n\t\ttry {\n\t\t\tAtomicReference<String> resourceNameRef = new AtomicReference<String>(null);\n\t\t\tfile = File.createTempFile(\"k8s\", \".yaml\");\n\t\t\t\n\t\t\tString resourceYaml = new Yaml().dump(resourceDef);\n\t\t\t\n\t\t\tString maskedYaml = resourceYaml;\n\t\t\tfor (String secret: secretsToMask) \n\t\t\t\tmaskedYaml = StringUtils.replace(maskedYaml, secret, SecretInput.MASK);\n\t\t\tlogger.trace(\"Creating resource:\\n\" + maskedYaml);\n\t\t\t\n\t\t\tFileUtils.writeFile(file, resourceYaml, StandardCharsets.UTF_8.name());\n\t\t\tkubectl.addArgs(\"create\", \"-f\", file.getAbsolutePath(), \"-o\", \"jsonpath={.metadata.name}\");\n\t\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tresourceNameRef.set(line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\t\t\t\n\t\t\treturn Preconditions.checkNotNull(resourceNameRef.get());\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tif (file != null)\n\t\t\t\tfile.delete();\n\t\t}\n\t}\n\t\n\tprivate void deleteNamespace(String namespace, TaskLogger jobLogger) {\n\t\ttry {\n\t\t\tCommandline cmd = newKubeCtl();\n\t\t\tcmd.timeout(NAMESPACE_DELETION_TIMEOUT).addArgs(\"delete\", \"namespace\", namespace);\n\t\t\tcmd.execute(new LineConsumer() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tlogger.debug(line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new LineConsumer() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\t\t} catch (Exception e) {\n\t\t\tif (ExceptionUtils.find(e, TimeoutException.class) == null)\n\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\telse\n\t\t\t\tjobLogger.error(\"Timed out deleting namespace\");\n\t\t}\n\t}\n\t\n\tprivate void deleteClusterRoleBinding(String namespace, TaskLogger jobLogger) {\n\t\tCommandline cmd = newKubeCtl();\n\t\tcmd.addArgs(\"delete\", \"clusterrolebinding\", namespace);\n\t\tcmd.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t}\n\t\n\tprivate String createNamespace(String namespace, @Nullable JobContext jobContext, TaskLogger jobLogger) {\n\t\tAtomicBoolean namespaceExists = new AtomicBoolean(false);\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"get\", \"namespaces\", \"--field-selector\", \"metadata.name=\" + namespace, \n\t\t\t\t\"-o\", \"name\");\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tnamespaceExists.set(true);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tif (namespaceExists.get())\n\t\t\tdeleteNamespace(namespace, jobLogger);\n\t\t\n\t\tkubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"create\", \"namespace\", namespace);\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\treturn namespace;\n\t}\n\t\n\tprivate OsInfo getBaselineOsInfo(Collection<NodeSelectorEntry> nodeSelector, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"get\", \"nodes\", \"-o\", \"jsonpath={range .items[*]}{.status.nodeInfo.operatingSystem} {.status.nodeInfo.kernelVersion} {.status.nodeInfo.architecture} {.spec.unschedulable}{'|'}{end}\");\n\t\tfor (NodeSelectorEntry entry: nodeSelector) \n\t\t\tkubectl.addArgs(\"-l\", entry.getLabelName() + \"=\" + entry.getLabelValue());\n\t\t\n\t\tCollection<OsInfo> osInfos = new ArrayList<>();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tkubectl.execute(baos, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tfor (String osInfoString: Splitter.on('|').trimResults().omitEmptyStrings().splitToList(baos.toString())) {\n\t\t\tosInfoString = osInfoString.replace('\\n', ' ').replace('\\r', ' ');\n\t\t\tList<String> fields = Splitter.on(' ').omitEmptyStrings().trimResults().splitToList(osInfoString);\n\t\t\tif (fields.size() == 3 || fields.get(3).equals(\"false\")) {\n\t\t\t\tString osName = WordUtils.capitalize(fields.get(0));\n\t\t\t\tString osVersion = fields.get(1);\n\t\t\t\tif (osName.equals(\"Windows\"))\n\t\t\t\t\tosVersion = StringUtils.substringBeforeLast(osVersion, \".\");\n\t\t\t\tosInfos.add(new OsInfo(osName, osVersion, fields.get(2)));\n\t\t\t}\n\t\t}\n\n\t\tif (!osInfos.isEmpty()) {\n\t\t\treturn OsInfo.getBaseline(osInfos);\n\t\t} else {\n\t\t\tthrow new ExplicitException(\"No applicable working nodes found\");\n\t\t}\n\t}\n\t\n\tprivate String getServerUrl() {\n\t\treturn OneDev.getInstance(SettingManager.class).getSystemSetting().getServerUrl().toString();\n\t}\n\t\n\t@Nullable\n\tprivate String createImagePullSecret(String namespace, TaskLogger jobLogger) {\n\t\tif (!getRegistryLogins().isEmpty()) {\n\t\t\tMap<Object, Object> auths = new LinkedHashMap<>();\n\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\tString auth = login.getUserName() + \":\" + login.getPassword();\n\t\t\t\tString registryUrl = login.getRegistryUrl();\n\t\t\t\tif (registryUrl == null)\n\t\t\t\t\tregistryUrl = \"https://index.docker.io/v1/\";\n\t\t\t\tauths.put(registryUrl, CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"auth\", Base64.encodeBase64String(auth.getBytes(StandardCharsets.UTF_8))));\n\t\t\t}\n\t\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\t\ttry {\n\t\t\t\tString dockerConfig = mapper.writeValueAsString(CollectionUtils.newLinkedHashMap(\"auths\", auths));\n\t\t\t\t\n\t\t\t\tString secretName = \"image-pull-secret\";\n\t\t\t\tMap<String, String> encodedSecrets = new LinkedHashMap<>();\n\t\t\t\tMap<Object, Object> secretDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\t\"kind\", \"Secret\", \n\t\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"name\", secretName, \n\t\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\t\"data\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\".dockerconfigjson\", Base64.encodeBase64String(dockerConfig.getBytes(StandardCharsets.UTF_8))));\n\t\t\t\tsecretDef.put(\"type\", \"kubernetes.io/dockerconfigjson\");\n\t\t\t\tcreateResource(secretDef, encodedSecrets.values(), jobLogger);\n\t\t\t\treturn secretName;\n\t\t\t} catch (JsonProcessingException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void createClusterRoleBinding(String namespace, TaskLogger jobLogger) {\n\t\tAtomicBoolean clusterRoleBindingExists = new AtomicBoolean(false);\n\t\tCommandline cmd = newKubeCtl();\n\t\tcmd.addArgs(\"get\", \"clusterrolebindings\", \"--field-selector\", \"metadata.name=\" + namespace, \n\t\t\t\t\"-o\", \"name\");\n\t\tcmd.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tclusterRoleBindingExists.set(true);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tif (clusterRoleBindingExists.get())\n\t\t\tdeleteClusterRoleBinding(namespace, jobLogger);\n\t\t\n\t\tMap<Object, Object> clusterRoleBindingDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"rbac.authorization.k8s.io/v1\", \n\t\t\t\t\"kind\", \"ClusterRoleBinding\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", namespace), \n\t\t\t\t\"subjects\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"kind\", \"ServiceAccount\", \n\t\t\t\t\t\t\"name\", \"default\", \n\t\t\t\t\t\t\"namespace\", namespace)), \n\t\t\t\t\"roleRef\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiGroup\", \"rbac.authorization.k8s.io\",\n\t\t\t\t\t\t\"kind\", \"ClusterRole\", \n\t\t\t\t\t\t\"name\", getClusterRole()));\n\t\tcreateResource(clusterRoleBindingDef, new HashSet<>(), jobLogger);\n\t}\t\n\t\n\t@Nullable\n\tprivate String createTrustCertsConfigMap(String namespace, TaskLogger jobLogger) {\n\t\tMap<String, String> configMapData = new LinkedHashMap<>();\n\t\tServerConfig serverConfig = OneDev.getInstance(ServerConfig.class); \n\t\tFile keystoreFile = serverConfig.getKeystoreFile();\n\t\tif (keystoreFile != null) {\n\t\t\tString password = serverConfig.getKeystorePassword();\n\t\t\tfor (Map.Entry<String, String> entry: new PKCS12CertExtractor(keystoreFile, password).extact().entrySet()) \n\t\t\t\tconfigMapData.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\tFile trustCertsDir = serverConfig.getTrustCertsDir();\n\t\tif (trustCertsDir != null) {\n\t\t\tfor (File file: trustCertsDir.listFiles()) {\n\t\t\t\tif (file.isFile()) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconfigMapData.put(\"specified-cert-\" + file.getName(), \n\t\t\t\t\t\t\t\tFileUtils.readFileToString(file, StandardCharsets.UTF_8));\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!configMapData.isEmpty()) {\n\t\t\tMap<Object, Object> configMapDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\"kind\", \"ConfigMap\",\n\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"trust-certs\", \n\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\"data\", configMapData);\n\t\t\treturn createResource(configMapDef, new HashSet<>(), jobLogger);\t\t\t\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate void startService(String namespace, JobContext jobContext, Service jobService, \n\t\t\t@Nullable String imagePullSecretName, TaskLogger jobLogger) {\n\t\tjobLogger.log(\"Creating service pod from image \" + jobService.getImage() + \"...\");\n\t\t\n\t\tList<NodeSelectorEntry> nodeSelector = getNodeSelector();\n\t\tfor (ServiceLocator locator: getServiceLocators()) {\n\t\t\tif (locator.isApplicable(jobService)) {\n\t\t\t\tnodeSelector = locator.getNodeSelector();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<String, Object> podSpec = new LinkedHashMap<>();\n\t\tMap<Object, Object> containerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\"name\", \"default\", \n\t\t\t\t\"image\", jobService.getImage());\n\t\tcontainerSpec.put(\"resources\", CollectionUtils.newLinkedHashMap(\"requests\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"cpu\", jobService.getCpuRequirement() + \"m\", \n\t\t\t\t\"memory\", jobService.getMemoryRequirement() + \"m\")));\n\t\tList<Map<Object, Object>> envs = new ArrayList<>();\n\t\tfor (EnvVar envVar: jobService.getEnvVars()) {\n\t\t\tenvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\"name\", envVar.getName(), \n\t\t\t\t\t\"value\", envVar.getValue()));\n\t\t}\n\t\tif (jobService.getArguments() != null) {\n\t\t\tList<String> argList = new ArrayList<>();\n\t\t\tfor (String arg: StringUtils.parseQuoteTokens(jobService.getArguments()))\n\t\t\t\targList.add(arg);\n\t\t\tcontainerSpec.put(\"args\", argList);\t\t\t\n\t\t}\n\t\tcontainerSpec.put(\"env\", envs);\n\t\t\n\t\tpodSpec.put(\"containers\", Lists.<Object>newArrayList(containerSpec));\n\t\tif (imagePullSecretName != null)\n\t\t\tpodSpec.put(\"imagePullSecrets\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\"name\", imagePullSecretName)));\n\t\tpodSpec.put(\"restartPolicy\", \"Never\");\t\t\n\t\t\n\t\tif (!nodeSelector.isEmpty())\n\t\t\tpodSpec.put(\"nodeSelector\", toMap(nodeSelector));\n\t\t\n\t\tString podName = \"service-\" + jobService.getName();\n\t\t\n\t\tMap<Object, Object> podDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\"kind\", \"Pod\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", podName, \n\t\t\t\t\t\t\"namespace\", namespace, \n\t\t\t\t\t\t\"labels\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"service\", jobService.getName())), \n\t\t\t\t\"spec\", podSpec);\n\t\tcreateResource(podDef, Sets.newHashSet(), jobLogger);\t\t\n\t\t\n\t\tMap<Object, Object> serviceDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\"kind\", \"Service\", \n\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", jobService.getName(),\n\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\"spec\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"clusterIP\", \"None\", \n\t\t\t\t\t\t\"selector\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"service\", jobService.getName())));\n\t\tcreateResource(serviceDef, Sets.newHashSet(), jobLogger);\n\t\t\n\t\tjobLogger.log(\"Waiting for service to be ready...\");\n\t\t\n\t\tOsInfo baselineOsInfo = getBaselineOsInfo(nodeSelector, jobLogger);\n\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\twhile (true) {\n\t\t\tCommandline kubectl = newKubeCtl();\n\t\t\tkubectl.addArgs(\"get\", \"pod\", podName, \"-n\", namespace, \"-o\", \"json\");\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tkubectl.execute(baos, new LineConsumer() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}).checkReturnCode();\n\n\t\t\tJsonNode statusNode;\n\t\t\ttry {\n\t\t\t\tstatusNode = mapper.readTree(baos.toString()).get(\"status\");\t\t\t\t\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t\t\n\t\t\tcheckConditions(statusNode, jobLogger);\n\t\t\t\n\t\t\tList<JsonNode> containerStatusNodes = new ArrayList<>();\n\t\t\tJsonNode containerStatusesNode = statusNode.get(\"containerStatuses\");\n\t\t\tif (containerStatusesNode != null)\n\t\t\t\tcontainerStatusNodes.add(containerStatusesNode.iterator().next());\t\t\t\t\n\t\t\t\n\t\t\tMap<String, ContainerError> containerErrors = getContainerErrors(containerStatusNodes);\n\t\t\tif (!containerErrors.isEmpty()) {\n\t\t\t\tContainerError error = containerErrors.values().iterator().next();\n\t\t\t\tif (!error.isFatal()) \n\t\t\t\t\tcollectContainerLog(namespace, podName, \"default\", null, jobLogger);\n\t\t\t\tthrow new ExplicitException(\"Service \" + jobService.getName() + \": \" + error.getMessage());\n\t\t\t} \n\t\t\t\n\t\t\tif (!getStoppedContainers(containerStatusNodes).isEmpty()) {\n\t\t\t\tcollectContainerLog(namespace, podName, \"default\", null, jobLogger);\n\t\t\t\tthrow new ExplicitException(\"Service \" + jobService.getName() + \" is stopped unexpectedly\");\n\t\t\t}\n\t\t\n\t\t\tif (!getStartedContainers(containerStatusNodes).isEmpty()) {\n\t\t\t\tkubectl = newKubeCtl();\n\t\t\t\tkubectl.addArgs(\"exec\", podName, \"-n\", namespace, \"--\");\n\t\t\t\tif (baselineOsInfo.isLinux())\n\t\t\t\t\tkubectl.addArgs(\"sh\", \"-c\");\n\t\t\t\telse \n\t\t\t\t\tkubectl.addArgs(\"cmd.exe\", \"/c\");\n\t\t\t\tkubectl.addArgs(jobService.getReadinessCheckCommand());\n\t\t\t\tExecutionResult result = kubectl.execute(new LineConsumer() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.log(\"Service readiness check: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.log(\"Service readiness check: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tif (result.getReturnCode() == 0) {\n\t\t\t\t\tjobLogger.log(\"Service is ready\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(10000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate Map<String, String> toMap(List<NodeSelectorEntry> nodeSelector) {\n\t\tMap<String, String> map = new LinkedHashMap<>();\n\t\tfor (NodeSelectorEntry entry: nodeSelector)\n\t\t\tmap.put(entry.getLabelName(), entry.getLabelValue());\n\t\treturn map;\n\t}\n\t\n\tprivate void execute(String jobToken, TaskLogger jobLogger, Object executionContext) {\n\t\tjobLogger.log(\"Checking cluster access...\");\n\t\tJobContext jobContext;\n\t\tif (executionContext instanceof JobContext)\n\t\t\tjobContext = (JobContext) executionContext;\n\t\telse\n\t\t\tjobContext = null;\n\t\t\n\t\tCommandline kubectl = newKubeCtl();\n\t\tkubectl.addArgs(\"cluster-info\");\n\t\tkubectl.execute(new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tlogger.debug(line);\n\t\t\t}\n\t\t\t\n\t\t}, new LineConsumer() {\n\n\t\t\t@Override\n\t\t\tpublic void consume(String line) {\n\t\t\t\tjobLogger.log(line);\n\t\t\t}\n\t\t\t\n\t\t}).checkReturnCode();\n\t\t\n\t\tString namespace ;\n\t\tif (jobContext != null) {\n\t\t\tnamespace = getName() + \"-\" + jobContext.getProjectId() + \"-\" \n\t\t\t\t\t+ jobContext.getBuildNumber() + \"-\" + jobContext.getRetried();\n\t\t} else {\n\t\t\tnamespace = getName() + \"-executor-test\";\n\t\t}\n\t\t\n\t\tif (getClusterRole() != null)\n\t\t\tcreateClusterRoleBinding(namespace, jobLogger);\n\t\t\n\t\ttry {\n\t\t\tcreateNamespace(namespace, jobContext, jobLogger);\n\t\t\t\n\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, namespace: %s)...\", \n\t\t\t\t\tgetName(), namespace));\n\t\t\ttry {\n\t\t\t\tString imagePullSecretName = createImagePullSecret(namespace, jobLogger);\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tfor (Service jobService: jobContext.getServices()) {\n\t\t\t\t\t\tjobLogger.log(\"Starting service (name: \" + jobService.getName() + \", image: \" + jobService.getImage() + \")...\");\n\t\t\t\t\t\tstartService(namespace, jobContext, jobService, imagePullSecretName, jobLogger);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString trustCertsConfigMapName = createTrustCertsConfigMap(namespace, jobLogger);\n\t\t\t\t\n\t\t\t\tOsInfo osInfo = getBaselineOsInfo(getNodeSelector(), jobLogger);\n\t\t\t\t\n\t\t\t\tMap<String, Object> podSpec = new LinkedHashMap<>();\n\n\t\t\t\tList<Map<Object, Object>> containerSpecs = new ArrayList<>();\n\t\t\t\t\n\t\t\t\tString containerBuildHome;\n\t\t\t\tString containerCommandHome;\n\t\t\t\tString containerCacheHome;\n\t\t\t\tString containerAuthInfoHome;\n\t\t\t\tString trustCertsHome;\n\t\t\t\tString dockerSock;\n\t\t\t\tString containerdSock;\n\t\t\t\tString containerWorkspace;\n\t\t\t\tif (osInfo.isWindows()) {\n\t\t\t\t\tcontainerBuildHome = \"C:\\\\onedev-build\";\n\t\t\t\t\tcontainerWorkspace = containerBuildHome + \"\\\\workspace\";\n\t\t\t\t\tcontainerCacheHome = containerBuildHome + \"\\\\cache\";\n\t\t\t\t\tcontainerCommandHome = containerBuildHome + \"\\\\command\";\n\t\t\t\t\tcontainerAuthInfoHome = \"C:\\\\Users\\\\ContainerAdministrator\\\\auth-info\";\n\t\t\t\t\ttrustCertsHome = containerBuildHome + \"\\\\trust-certs\";\n\t\t\t\t\tdockerSock = \"\\\\\\\\.\\\\pipe\\\\docker_engine\";\n\t\t\t\t\tcontainerdSock = \"\\\\\\\\.\\\\pipe\\\\containerd-containerd\";\n\t\t\t\t} else {\n\t\t\t\t\tcontainerBuildHome = \"/onedev-build\";\n\t\t\t\t\tcontainerWorkspace = containerBuildHome +\"/workspace\";\n\t\t\t\t\tcontainerCacheHome = containerBuildHome + \"/cache\";\n\t\t\t\t\tcontainerCommandHome = containerBuildHome + \"/command\";\n\t\t\t\t\tcontainerAuthInfoHome = \"/root/auth-info\";\n\t\t\t\t\ttrustCertsHome = containerBuildHome + \"/trust-certs\";\n\t\t\t\t\tdockerSock = \"/var/run/docker.sock\";\n\t\t\t\t\tcontainerdSock = \"/run/containerd/containerd.sock\";\n\t\t\t\t}\n\n\t\t\t\tMap<String, String> buildHomeMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\"mountPath\", containerBuildHome);\n\t\t\t\tMap<String, String> authInfoMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"mountPath\", containerAuthInfoHome);\n\t\t\t\t\n\t\t\t\t// Windows nanoserver default user is ContainerUser\n\t\t\t\tMap<String, String> authInfoMount2 = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"mountPath\", \"C:\\\\Users\\\\ContainerUser\\\\auth-info\");\n\t\t\t\t\n\t\t\t\tMap<String, String> cacheHomeMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"cache-home\", \n\t\t\t\t\t\t\"mountPath\", containerCacheHome);\n\t\t\t\tMap<String, String> trustCertsMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"trust-certs-home\", \n\t\t\t\t\t\t\"mountPath\", trustCertsHome);\n\t\t\t\tMap<String, String> dockerSockMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"docker-sock\", \n\t\t\t\t\t\t\"mountPath\", dockerSock);\n\t\t\t\tMap<String, String> containerdSockMount = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"containerd-sock\", \n\t\t\t\t\t\t\"mountPath\", containerdSock);\n\t\t\t\t\n\t\t\t\tList<Object> commonVolumeMounts = Lists.<Object>newArrayList(buildHomeMount, authInfoMount, cacheHomeMount);\n\t\t\t\tif (osInfo.isWindows())\n\t\t\t\t\tcommonVolumeMounts.add(authInfoMount2);\n\t\t\t\tif (trustCertsConfigMapName != null)\n\t\t\t\t\tcommonVolumeMounts.add(trustCertsMount);\n\t\t\t\t\n\t\t\t\tif (isMountContainerSock()) {\n\t\t\t\t\tcommonVolumeMounts.add(dockerSockMount);\n\t\t\t\t\tcommonVolumeMounts.add(containerdSockMount);\n\t\t\t\t}\n\n\t\t\t\tCompositeFacade entryFacade;\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tentryFacade = new CompositeFacade(jobContext.getActions());\n\t\t\t\t} else {\n\t\t\t\t\tList<Action> actions = new ArrayList<>();\n\t\t\t\t\tCommandFacade facade = new CommandFacade((String) executionContext, \n\t\t\t\t\t\t\tLists.newArrayList(\"this does not matter\"), false);\n\t\t\t\t\tactions.add(new Action(\"test\", facade, ExecuteCondition.ALWAYS));\n\t\t\t\t\tentryFacade = new CompositeFacade(actions);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<String> containerNames = Lists.newArrayList(\"init\");\n\t\t\t\t\n\t\t\t\tString helperImageSuffix;\n\t\t\t\tif (osInfo.isWindows()) {  \n\t\t\t\t\tString windowsVersion = OsInfo.WINDOWS_VERSIONS.get(osInfo.getWindowsBuild());\n\t\t\t\t\tif (windowsVersion != null)\n\t\t\t\t\t\thelperImageSuffix = \"windows-\" + windowsVersion.toLowerCase();\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow new ExplicitException(\"Unsupported windows build number: \" + osInfo.getWindowsBuild());\n\t\t\t\t} else {\n\t\t\t\t\thelperImageSuffix = \"linux\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString helperImage = IMAGE_REPO_PREFIX + \"-\" + helperImageSuffix + \":\" + KubernetesHelper.getVersion();\n\t\t\t\t\n\t\t\t\tList<Map<Object, Object>> commonEnvs = new ArrayList<>();\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_SERVER_URL, \n\t\t\t\t\t\t\"value\", getServerUrl()));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_JOB_TOKEN, \n\t\t\t\t\t\t\"value\", jobToken));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", ENV_OS_INFO,\n\t\t\t\t\t\t\"value\", Hex.encodeHexString(SerializationUtils.serialize(osInfo))\n\t\t\t\t\t\t));\n\t\t\t\tcommonEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"ONEDEV_WORKSPACE\",\n\t\t\t\t\t\t\"value\", containerWorkspace\n\t\t\t\t\t\t));\n\n\t\t\t\tentryFacade.traverse(new LeafVisitor<Void>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Void visit(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\tString containerName = getContainerName(position);\n\t\t\t\t\t\tcontainerNames.add(containerName);\n\t\t\t\t\t\tMap<Object, Object> stepContainerSpec;\n\t\t\t\t\t\tif (facade instanceof CommandFacade) {\n\t\t\t\t\t\t\tCommandFacade commandFacade = (CommandFacade) facade;\n\t\t\t\t\t\t\tOsExecution execution = commandFacade.getExecution(osInfo);\n\t\t\t\t\t\t\tif (execution.getImage() == null) {\n\t\t\t\t\t\t\t\tthrow new ExplicitException(\"This step can only be executed by server shell \"\n\t\t\t\t\t\t\t\t\t\t+ \"executor or remote shell executor\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", execution.getImage());\n\t\t\t\t\t\t\tif (commandFacade.isUseTTY())\n\t\t\t\t\t\t\t\tstepContainerSpec.put(\"tty\", true);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t} else if (facade instanceof BuildImageFacade) {\n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", helperImage);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t} else if (facade instanceof RunContainerFacade) {\n\t\t\t\t\t\t\tRunContainerFacade runContainerFacade = (RunContainerFacade) facade;\n\t\t\t\t\t\t\tOsContainer container = runContainerFacade.getContainer(osInfo); \n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", container.getImage());\n\t\t\t\t\t\t\tif (runContainerFacade.isUseTTY())\n\t\t\t\t\t\t\t\tstepContainerSpec.put(\"tty\", true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<Object> volumeMounts = new ArrayList<>(commonVolumeMounts);\n\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: container.getVolumeMounts().entrySet()) {\n\t\t\t\t\t\t\t\tString subPath = StringUtils.stripStart(entry.getKey(), \"/\\\\\");\n\t\t\t\t\t\t\t\tif (osInfo.isWindows())\n\t\t\t\t\t\t\t\t\tsubPath = \"workspace\\\\\" + subPath;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tsubPath = \"workspace/\" + subPath;\n\t\t\t\t\t\t\t\tvolumeMounts.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\t\t\t\t\"mountPath\", entry.getValue(),\n\t\t\t\t\t\t\t\t\t\t\"subPath\", subPath));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", volumeMounts);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<Map<Object, Object>> envs = new ArrayList<>(commonEnvs);\n\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: container.getEnvMap().entrySet()) {\n\t\t\t\t\t\t\t\tenvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\t\"name\", entry.getKey(), \n\t\t\t\t\t\t\t\t\t\t\"value\", entry.getValue()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", envs);\n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tstepContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", containerName, \n\t\t\t\t\t\t\t\t\t\"image\", helperImage);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\t\t\tstepContainerSpec.put(\"env\", commonEnvs);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tString positionStr = stringifyPosition(position);\n\t\t\t\t\t\tif (osInfo.isLinux()) {\n\t\t\t\t\t\t\tstepContainerSpec.put(\"command\", Lists.newArrayList(\"sh\"));\n\t\t\t\t\t\t\tstepContainerSpec.put(\"args\", Lists.newArrayList(containerCommandHome + \"/\" + positionStr + \".sh\"));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepContainerSpec.put(\"command\", Lists.newArrayList(\"cmd\"));\n\t\t\t\t\t\t\tstepContainerSpec.put(\"args\", Lists.newArrayList(\"/c\", containerCommandHome + \"\\\\\" + positionStr + \".bat\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontainerSpecs.add(stepContainerSpec);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new ArrayList<>());\n\t\t\t\t\n\t\t\t\tString k8sHelperClassPath;\n\t\t\t\tif (osInfo.isLinux()) {\n\t\t\t\t\tk8sHelperClassPath = \"/k8s-helper/*\";\n\t\t\t\t} else {\n\t\t\t\t\tk8sHelperClassPath = \"C:\\\\k8s-helper\\\\*\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<String> sidecarArgs = Lists.newArrayList(\n\t\t\t\t\t\t\"-classpath\", k8sHelperClassPath,\n\t\t\t\t\t\t\"io.onedev.k8shelper.SideCar\");\n\t\t\t\tList<String> initArgs = Lists.newArrayList(\n\t\t\t\t\t\t\"-classpath\", k8sHelperClassPath, \n\t\t\t\t\t\t\"io.onedev.k8shelper.Init\");\n\t\t\t\tif (jobContext == null) {\n\t\t\t\t\tsidecarArgs.add(\"test\");\n\t\t\t\t\tinitArgs.add(\"test\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<Map<Object, Object>> initEnvs = new ArrayList<>(commonEnvs);\n\t\t\t\tList<RegistryLoginFacade> registryLogins = new ArrayList<>();\n\t\t\t\tfor (RegistryLogin login: getRegistryLogins())\n\t\t\t\t\tregistryLogins.add(new RegistryLoginFacade(login.getRegistryUrl(), login.getUserName(), login.getPassword()));\n\t\t\t\tinitEnvs.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", KubernetesHelper.ENV_REGISTRY_LOGINS,\n\t\t\t\t\t\t\"value\", Hex.encodeHexString(SerializationUtils.serialize((Serializable) registryLogins))\n\t\t\t\t\t\t));\n\t\t\t\tMap<Object, Object> initContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\"name\", \"init\", \n\t\t\t\t\t\t\"image\", helperImage, \n\t\t\t\t\t\t\"command\", Lists.newArrayList(\"java\"), \n\t\t\t\t\t\t\"args\", initArgs,\n\t\t\t\t\t\t\"env\", initEnvs,\n\t\t\t\t\t\t\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\n\t\t\t\tMap<Object, Object> sidecarContainerSpec = CollectionUtils.newHashMap(\n\t\t\t\t\t\t\"name\", \"sidecar\", \n\t\t\t\t\t\t\"image\", helperImage, \n\t\t\t\t\t\t\"command\", Lists.newArrayList(\"java\"), \n\t\t\t\t\t\t\"args\", sidecarArgs, \n\t\t\t\t\t\t\"env\", commonEnvs, \n\t\t\t\t\t\t\"volumeMounts\", commonVolumeMounts);\n\t\t\t\t\n\t\t\t\tif (jobContext != null) {\n\t\t\t\t\tsidecarContainerSpec.put(\"resources\", CollectionUtils.newLinkedHashMap(\"requests\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"cpu\", jobContext.getCpuRequirement() + \"m\", \n\t\t\t\t\t\t\t\"memory\", jobContext.getMemoryRequirement() + \"m\")));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontainerSpecs.add(sidecarContainerSpec);\n\t\t\t\tcontainerNames.add(\"sidecar\");\n\t\t\t\t\n\t\t\t\tpodSpec.put(\"containers\", containerSpecs);\n\t\t\t\tpodSpec.put(\"initContainers\", Lists.<Object>newArrayList(initContainerSpec));\n\n\t\t\t\tif (imagePullSecretName != null)\n\t\t\t\t\tpodSpec.put(\"imagePullSecrets\", Lists.<Object>newArrayList(CollectionUtils.newLinkedHashMap(\"name\", imagePullSecretName)));\n\t\t\t\tpodSpec.put(\"restartPolicy\", \"Never\");\t\t\n\t\t\t\t\n\t\t\t\tif (!getNodeSelector().isEmpty())\n\t\t\t\t\tpodSpec.put(\"nodeSelector\", toMap(getNodeSelector()));\n\t\t\t\t\n\t\t\t\tMap<Object, Object> buildHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"build-home\", \n\t\t\t\t\t\t\"emptyDir\", CollectionUtils.newLinkedHashMap());\n\t\t\t\tMap<Object, Object> userHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"auth-info-home\", \n\t\t\t\t\t\t\"emptyDir\", CollectionUtils.newLinkedHashMap());\n\t\t\t\tMap<Object, Object> cacheHomeVolume = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"name\", \"cache-home\", \n\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"path\", osInfo.getCacheHome(), \n\t\t\t\t\t\t\t\t\"type\", \"DirectoryOrCreate\"));\n\t\t\t\tList<Object> volumes = Lists.<Object>newArrayList(buildHomeVolume, userHomeVolume, cacheHomeVolume);\n\t\t\t\tif (trustCertsConfigMapName != null) {\n\t\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"trust-certs-home\", \n\t\t\t\t\t\t\t\"configMap\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\"name\", trustCertsConfigMapName)));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isMountContainerSock()) {\n\t\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"docker-sock\", \n\t\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\"path\", dockerSock)));\n\t\t\t\t\tvolumes.add(CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\"name\", \"containerd-sock\", \n\t\t\t\t\t\t\t\"hostPath\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\t\"path\", containerdSock)));\n\t\t\t\t}\n\t\t\t\tpodSpec.put(\"volumes\", volumes);\n\n\t\t\t\tString podName = \"job\";\n\t\t\t\t\n\t\t\t\tMap<Object, Object> podDef = CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\"apiVersion\", \"v1\", \n\t\t\t\t\t\t\"kind\", \"Pod\", \n\t\t\t\t\t\t\"metadata\", CollectionUtils.newLinkedHashMap(\n\t\t\t\t\t\t\t\t\"name\", podName, \n\t\t\t\t\t\t\t\t\"namespace\", namespace), \n\t\t\t\t\t\t\"spec\", podSpec);\n\t\t\t\t\n\t\t\t\tcreateResource(podDef, Sets.newHashSet(), jobLogger);\n\t\t\t\tString podFQN = namespace + \"/\" + podName;\n\t\t\t\t\n\t\t\t\tAtomicReference<String> nodeNameRef = new AtomicReference<>(null);\n\t\t\t\t\n\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\tif (nodeName != null) {\n\t\t\t\t\t\t\tnodeNameRef.set(nodeName);\n\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, jobLogger);\n\t\t\t\t\n\t\t\t\tif (jobContext != null)\n\t\t\t\t\tjobContext.notifyJobRunning(null);\n\n\t\t\t\tString nodeName = Preconditions.checkNotNull(nodeNameRef.get());\n\t\t\t\tjobLogger.log(\"Running job on node \" + nodeName + \"...\");\n\t\t\t\t\n\t\t\t\tjobLogger.log(\"Starting job containers...\");\n\t\t\t\t\n\t\t\t\tAtomicBoolean failed = new AtomicBoolean(false);\n\t\t\t\t\n\t\t\t\tfor (String containerName: containerNames) {\n\t\t\t\t\tlogger.debug(\"Waiting for start of container (pod: {}, container: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\t\tContainerError error = getContainerErrors(containerStatusNodes).get(containerName);\n\t\t\t\t\t\t\tif (error != null) {\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * For non-fatal errors (command exited with non-zero code), we abort the watch \n\t\t\t\t\t\t\t\t * without an exception, and will continue to collect the container log which \n\t\t\t\t\t\t\t\t * might contain error details\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (error.isFatal()) {\n\t\t\t\t\t\t\t\t\tString errorMessage;\n\t\t\t\t\t\t\t\t\tif (containerName.startsWith(\"step-\")) {\n\t\t\t\t\t\t\t\t\t\tList<Integer> position = KubernetesHelper.parsePosition(containerName.substring(\"step-\".length()));\n\t\t\t\t\t\t\t\t\t\terrorMessage = \"Step \\\"\" + entryFacade.getNamesAsString(position) \n\t\t\t\t\t\t\t\t\t\t\t\t+ \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\terrorMessage = containerName + \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn new Abort(errorMessage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (getStartedContainers(containerStatusNodes).contains(containerName)) {\n\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tlogger.debug(\"Collecting log of container (pod: {}, container: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\tcollectContainerLog(namespace, podName, containerName, LOG_END_MESSAGE, jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tlogger.debug(\"Waiting for stop of container (pod: {})...\", \n\t\t\t\t\t\t\tpodFQN, containerName);\n\t\t\t\t\t\n\t\t\t\t\twatchPod(namespace, podName, new AbortChecker() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Abort check(String nodeName, Collection<JsonNode> containerStatusNodes) {\n\t\t\t\t\t\t\tContainerError error = getContainerErrors(containerStatusNodes).get(containerName);\n\t\t\t\t\t\t\tif (error != null) {\n\t\t\t\t\t\t\t\tString errorMessage;\n\t\t\t\t\t\t\t\tif (containerName.startsWith(\"step-\")) {\n\t\t\t\t\t\t\t\t\tList<Integer> position = KubernetesHelper.parsePosition(containerName.substring(\"step-\".length()));\n\t\t\t\t\t\t\t\t\terrorMessage = \"Step \\\"\" + entryFacade.getNamesAsString(position) \n\t\t\t\t\t\t\t\t\t\t\t+ \" is failed: \" + error.getMessage();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\terrorMessage = containerName + \": \" + error.getMessage();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t * We abort the watch with an exception for two reasons:\n\t\t\t\t\t\t\t\t * \n\t\t\t\t\t\t\t\t * 1. Init container error will prevent other containers to start. \n\t\t\t\t\t\t\t\t * 2. Step containers may not run command in case of fatal error and sidecar \n\t\t\t\t\t\t\t\t *    container will wait indefinitely on the successful/failed mark file in \n\t\t\t\t\t\t\t\t *    this case, causing log following last indefinitely \n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (error.isFatal() || containerName.equals(\"init\")) {\n\t\t\t\t\t\t\t\t\treturn new Abort(errorMessage);\n\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\tjobLogger.error(errorMessage);\n\t\t\t\t\t\t\t\t\tfailed.set(true);\n\t\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t} else if (getStoppedContainers(containerStatusNodes).contains(containerName)) {\n\t\t\t\t\t\t\t\treturn new Abort(null);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, jobLogger);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (failed.get())\n\t\t\t\t\tthrow new FailedException();\n\t\t\t} finally {\n\t\t\t\tdeleteNamespace(namespace, jobLogger);\n\t\t\t}\t\t\t\n\t\t} finally {\n\t\t\tif (getClusterRole() != null)\n\t\t\t\tdeleteClusterRoleBinding(namespace, jobLogger);\n\t\t}\n\t}\n\t\n\tprivate String getContainerName(List<Integer> stepPosition) {\n\t\treturn \"step-\" + stringifyPosition(stepPosition);\n\t}\n\t\n\tprivate Map<String, ContainerError> getContainerErrors(Collection<JsonNode> containerStatusNodes) {\n\t\tMap<String, ContainerError> containerErrors = new HashMap<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tString containerName = containerStatusNode.get(\"name\").asText();\n\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tJsonNode waitingNode = stateNode.get(\"waiting\");\n\t\t\tif (waitingNode != null) {\n\t\t\t\tString reason = waitingNode.get(\"reason\").asText();\n\t\t\t\tif (reason.equals(\"ErrImagePull\") || reason.equals(\"InvalidImageName\") \n\t\t\t\t\t\t|| reason.equals(\"ImageInspectError\") || reason.equals(\"ErrImageNeverPull\")\n\t\t\t\t\t\t|| reason.equals(\"RegistryUnavailable\")) {\n\t\t\t\t\tJsonNode messageNode = waitingNode.get(\"message\");\n\t\t\t\t\tif (messageNode != null)\n\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(messageNode.asText(), true));\n\t\t\t\t\telse\n\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(reason, true));\n\t\t\t\t}\n\t\t\t} \n\n\t\t\tif (!containerErrors.containsKey(containerName)) {\n\t\t\t\tJsonNode terminatedNode = stateNode.get(\"terminated\");\n\t\t\t\tif (terminatedNode != null) {\n\t\t\t\t\tString reason;\n\t\t\t\t\tJsonNode reasonNode = terminatedNode.get(\"reason\");\n\t\t\t\t\tif (reasonNode != null)\n\t\t\t\t\t\treason = reasonNode.asText();\n\t\t\t\t\telse\n\t\t\t\t\t\treason = \"Unknown reason\";\n\t\t\t\t\t\n\t\t\t\t\tif (!reason.equals(\"Completed\")) {\n\t\t\t\t\t\tJsonNode messageNode = terminatedNode.get(\"message\");\n\t\t\t\t\t\tif (messageNode != null) {\n\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(messageNode.asText(), true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tJsonNode exitCodeNode = terminatedNode.get(\"exitCode\");\n\t\t\t\t\t\t\tif (exitCodeNode != null && exitCodeNode.asInt() != 0)\n\t\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(\"Command failed with exit code \" + exitCodeNode.asText(), false));\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tcontainerErrors.put(containerName, new ContainerError(reason, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containerErrors;\n\t}\n\t\n\tprivate Collection<String> getStartedContainers(Collection<JsonNode> containerStatusNodes) {\n\t\tCollection<String> startedContainers = new HashSet<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tif (stateNode.get(\"running\") != null || stateNode.get(\"terminated\") != null) \n\t\t\t\tstartedContainers.add(containerStatusNode.get(\"name\").asText());\t\t\t\t\t\n\t\t}\n\t\treturn startedContainers;\n\t}\n\t\n\tprivate Collection<String> getStoppedContainers(Collection<JsonNode> containerStatusNodes) {\n\t\tCollection<String> stoppedContainers = new ArrayList<>();\n\t\tfor (JsonNode containerStatusNode: containerStatusNodes) {\n\t\t\tJsonNode stateNode = containerStatusNode.get(\"state\");\n\t\t\tif (stateNode.get(\"terminated\") != null)\n\t\t\t\tstoppedContainers.add(containerStatusNode.get(\"name\").asText());\n\t\t}\n\t\treturn stoppedContainers;\n\t}\n\t\n\tprivate void checkConditions(JsonNode statusNode, TaskLogger jobLogger) {\n\t\tJsonNode conditionsNode = statusNode.get(\"conditions\");\n\t\tif (conditionsNode != null) {\n\t\t\tfor (JsonNode conditionNode: conditionsNode) {\n\t\t\t\tif (conditionNode.get(\"type\").asText().equals(\"PodScheduled\") \n\t\t\t\t\t\t&& conditionNode.get(\"status\").asText().equals(\"False\")\n\t\t\t\t\t\t&& conditionNode.get(\"reason\").asText().equals(\"Unschedulable\")) {\n\t\t\t\t\tjobLogger.warning(\"Kubernetes: \" + conditionNode.get(\"message\").asText());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void watchPod(String namespace, String podName, AbortChecker abortChecker, TaskLogger jobLogger) {\n\t\tCommandline kubectl = newKubeCtl();\n\t\t\n\t\tObjectMapper mapper = OneDev.getInstance(ObjectMapper.class);\n\t\t\n\t\tAtomicReference<Abort> abortRef = new AtomicReference<>(null);\n\t\t\n\t\tStringBuilder json = new StringBuilder();\n\t\tkubectl.addArgs(\"get\", \"pod\", podName, \"-n\", namespace, \"--watch\", \"-o\", \"json\");\n\t\t\n\t\tkubectl.timeout(POD_WATCH_TIMEOUT);\n\t\t\n\t\tThread thread = Thread.currentThread();\n\t\t\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tkubectl.execute(new LineConsumer() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tif (line.startsWith(\"{\")) {\n\t\t\t\t\t\t\tjson.append(\"{\").append(\"\\n\");\n\t\t\t\t\t\t} else if (line.startsWith(\"}\")) {\n\t\t\t\t\t\t\tjson.append(\"}\");\n\t\t\t\t\t\t\tlogger.trace(\"Pod watching output:\\n\" + json.toString());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tprocess(mapper.readTree(json.toString()));\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tlogger.error(\"Error processing pod watching output\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tjson.setLength(0);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjson.append(line).append(\"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tprivate void process(JsonNode podNode) {\n\t\t\t\t\t\tJsonNode statusNode = podNode.get(\"status\");\n\t\t\t\t\t\tcheckConditions(statusNode, jobLogger);\n\n\t\t\t\t\t\tif (abortRef.get() == null) {\n\t\t\t\t\t\t\tString nodeName = null;\n\t\t\t\t\t\t\tJsonNode specNode = podNode.get(\"spec\");\n\t\t\t\t\t\t\tif (specNode != null) {\n\t\t\t\t\t\t\t\tJsonNode nodeNameNode = specNode.get(\"nodeName\");\n\t\t\t\t\t\t\t\tif (nodeNameNode != null)\n\t\t\t\t\t\t\t\t\tnodeName = nodeNameNode.asText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCollection<JsonNode> containerStatusNodes = new ArrayList<>();\n\t\t\t\t\t\t\tJsonNode initContainerStatusesNode = statusNode.get(\"initContainerStatuses\");\n\t\t\t\t\t\t\tif (initContainerStatusesNode != null) {\n\t\t\t\t\t\t\t\tfor (JsonNode containerStatusNode: initContainerStatusesNode)\n\t\t\t\t\t\t\t\t\tcontainerStatusNodes.add(containerStatusNode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tJsonNode containerStatusesNode = statusNode.get(\"containerStatuses\");\n\t\t\t\t\t\t\tif (containerStatusesNode != null) {\n\t\t\t\t\t\t\t\tfor (JsonNode containerStatusNode: containerStatusesNode)\n\t\t\t\t\t\t\t\t\tcontainerStatusNodes.add(containerStatusNode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tabortRef.set(abortChecker.check(nodeName, containerStatusNodes));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (abortRef.get() != null) \n\t\t\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, new LineConsumer() {\n\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\tjobLogger.error(\"Kubernetes: \" + line);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}).checkReturnCode();\n\t\t\t\t\n\t\t\t\tthrow new ExplicitException(\"Unexpected end of pod watching\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tAbort abort = abortRef.get();\n\t\t\t\tif (abort != null) {\n\t\t\t\t\tif (abort.getErrorMessage() != null)\n\t\t\t\t\t\tthrow new ExplicitException(abort.getErrorMessage());\n\t\t\t\t\telse \n\t\t\t\t\t\tbreak;\n\t\t\t\t} else if (ExceptionUtils.find(e, TimeoutException.class) == null) { \n\t\t\t\t\t// If there is no output for some time, let's re-watch as sometimes \n\t\t\t\t\t// pod status update is not pushed\n\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t}\n\n\tprivate void collectContainerLog(String namespace, String podName, String containerName, \n\t\t\t@Nullable String logEndMessage, TaskLogger jobLogger) {\n\t\tThread thread = Thread.currentThread();\n\t\tAtomicReference<Boolean> abortError = new AtomicReference<>(false);\n\t\tAtomicReference<Instant> lastInstantRef = new AtomicReference<>(null);\n\t\tAtomicBoolean endOfLogSeenRef = new AtomicBoolean(false);\n\t\t\n\t\twhile (true) {\n\t\t\tCommandline kubectl = newKubeCtl();\n\t\t\tkubectl.addArgs(\"logs\", podName, \"-c\", containerName, \"-n\", namespace, \"--follow\", \"--timestamps=true\");\n\t\t\tif (lastInstantRef.get() != null)\n\t\t\t\tkubectl.addArgs(\"--since-time=\" + DateTimeFormatter.ISO_INSTANT.format(lastInstantRef.get()));\n\t\t\t\n\t\t\tclass Logger extends LineConsumer {\n\n\t\t\t\tprivate final String sessionId = UUID.randomUUID().toString();\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\tif (line.contains(\"rpc error:\") && line.contains(\"No such container:\") \n\t\t\t\t\t\t\t|| line.contains(\"Unable to retrieve container logs for\")) { \n\t\t\t\t\t\tlogger.debug(line);\n\t\t\t\t\t} else if (logEndMessage != null && line.contains(logEndMessage)) {\n\t\t\t\t\t\tendOfLogSeenRef.set(true);\n\t\t\t\t\t\tString lastLogMessage = StringUtils.substringBefore(line, logEndMessage);\n\t\t\t\t\t\tif (StringUtils.substringAfter(lastLogMessage, \" \").length() != 0)\n\t\t\t\t\t\t\tconsume(lastLogMessage);\n\t\t\t\t\t} else if (line.startsWith(\"Error from server\") || line.startsWith(\"error:\")) {\n\t\t\t\t\t\tjobLogger.error(line);\n\t\t\t\t\t\tif (!abortError.get()) {\n\t\t\t\t\t\t\tabortError.set(true);\n\t\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (line.contains(\" \")) {\n\t\t\t\t\t\tString timestamp = StringUtils.substringBefore(line, \" \");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tInstant instant = Instant.from(DateTimeFormatter.ISO_INSTANT.parse(timestamp));\n\t\t\t\t\t\t\tif (lastInstantRef.get() == null || lastInstantRef.get().isBefore(instant))\n\t\t\t\t\t\t\t\tlastInstantRef.set(instant);\n\t\t\t\t\t\t\tjobLogger.log(StringUtils.substringAfter(line, \" \"), sessionId);\n\t\t\t\t\t\t} catch (DateTimeParseException e) {\n\t\t\t\t\t\t\tjobLogger.log(line, sessionId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tjobLogger.log(line, sessionId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\ttry {\n\t\t\t\tkubectl.execute(new Logger(), new Logger()).checkReturnCode();\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (!abortError.get()) \n\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t}\t\t\n\t\t\t\n\t\t\tif (logEndMessage == null || endOfLogSeenRef.get() || abortError.get() != null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static interface AbortChecker {\n\t\t\n\t\t@Nullable\n\t\tAbort check(@Nullable String nodeName, Collection<JsonNode> containerStatusNodes);\n\t\t\n\t}\n\t\n\tprivate static class Abort {\n\t\t\n\t\tprivate final String errorMessage;\n\t\t\n\t\tpublic Abort(@Nullable String errorMessage) {\n\t\t\tthis.errorMessage = errorMessage;\n\t\t}\n\t\t\n\t\t@Nullable\n\t\tpublic String getErrorMessage() {\n\t\t\treturn errorMessage;\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static class ContainerError {\n\t\t\n\t\tprivate final String message;\n\t\t\n\t\tprivate final boolean fatal;\n\t\t\n\t\tpublic ContainerError(String message, boolean fatal) {\n\t\t\tthis.message = message;\n\t\t\tthis.fatal = fatal;\n\t\t}\n\n\t\tpublic String getMessage() {\n\t\t\treturn message;\n\t\t}\n\n\t\tpublic boolean isFatal() {\n\t\t\treturn fatal;\n\t\t}\n\t\t\n\t}\n\t\n\t@Editable(name=\"Specify a Docker Image to Test Against\")\n\tpublic static class TestData implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate String dockerImage;\n\n\t\t@Editable\n\t\t@OmitName\n\t\t@NotEmpty\n\t\tpublic String getDockerImage() {\n\t\t\treturn dockerImage;\n\t\t}\n\n\t\tpublic void setDockerImage(String dockerImage) {\n\t\t\tthis.dockerImage = dockerImage;\n\t\t}\n\t\t\n\t}\n\t\n}", "package io.onedev.server.plugin.executor.remotedocker;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.TimeoutException;\n\nimport org.eclipse.jetty.websocket.api.Session;\n\nimport io.onedev.agent.AgentData;\nimport io.onedev.agent.Message;\nimport io.onedev.agent.MessageType;\nimport io.onedev.agent.WebsocketUtils;\nimport io.onedev.agent.job.DockerJobData;\nimport io.onedev.agent.job.TestDockerJobData;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.job.resource.AgentAwareRunnable;\nimport io.onedev.server.job.resource.ResourceManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor;\nimport io.onedev.server.search.entity.agent.AgentQuery;\nimport io.onedev.server.tasklog.JobLogManager;\nimport io.onedev.server.util.CollectionUtils;\nimport io.onedev.server.web.editable.annotation.Editable;\n\n@Editable(order=210, description=\"This executor runs build jobs as docker containers on remote machines via <a href='/administration/agents' target='_blank'>agents</a>\")\npublic class RemoteDockerExecutor extends ServerDockerExecutor {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tprivate String agentQuery;\n\t\n\tprivate boolean mountDockerSock;\n\t\n\t@Editable(order=390, name=\"Agent Selector\", placeholder=\"Any agent\", \n\t\t\tdescription=\"Specify agents applicable for this executor\")\n\t@io.onedev.server.web.editable.annotation.AgentQuery(forExecutor=true)\n\tpublic String getAgentQuery() {\n\t\treturn agentQuery;\n\t}\n\n\tpublic void setAgentQuery(String agentQuery) {\n\t\tthis.agentQuery = agentQuery;\n\t}\n\n\t@Editable(order=400, description=\"Whether or not to mount docker sock into job container to \"\n\t\t\t+ \"support docker operations in job commands, for instance to build docker image.<br>\"\n\t\t\t+ \"<b class='text-danger'>WARNING</b>: Malicious jobs can take control of the agent \"\n\t\t\t+ \"running the job by operating the mounted docker sock. You should configure job \"\n\t\t\t+ \"requirement option below to make sure the executor can only be used by trusted \"\n\t\t\t+ \"jobs if this option is enabled\")\n\tpublic boolean isMountDockerSock() {\n\t\treturn mountDockerSock;\n\t}\n\n\tpublic void setMountDockerSock(boolean mountDockerSock) {\n\t\tthis.mountDockerSock = mountDockerSock;\n\t}\n\t\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\tAgentQuery parsedQeury = AgentQuery.parse(agentQuery, true);\n\t\tTaskLogger jobLogger = jobContext.getLogger();\n\t\tOneDev.getInstance(ResourceManager.class).run(new AgentAwareRunnable() {\n\n\t\t\t@Override\n\t\t\tpublic void runOn(Long agentId, Session agentSession, AgentData agentData) {\n\t\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, agent: %s)...\", getName(), agentData.getName()));\n\t\t\t\tjobContext.notifyJobRunning(agentId);\n\n\t\t\t\tList<Map<String, String>> registryLogins = new ArrayList<>();\n\t\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\t\tregistryLogins.add(CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\"url\", login.getRegistryUrl(), \n\t\t\t\t\t\t\t\"userName\", login.getUserName(), \n\t\t\t\t\t\t\t\"password\", login.getPassword()));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tList<Map<String, Serializable>> services = new ArrayList<>();\n\t\t\t\tfor (Service service: jobContext.getServices())\n\t\t\t\t\tservices.add(service.toMap());\n\t\t\t\t\n\t\t\t\tList<String> trustCertContent = getTrustCertContent();\n\t\t\t\tDockerJobData jobData = new DockerJobData(jobToken, getName(), jobContext.getProjectPath(), \n\t\t\t\t\t\tjobContext.getProjectId(), jobContext.getCommitId().name(), jobContext.getBuildNumber(), \n\t\t\t\t\t\tjobContext.getActions(), jobContext.getRetried(), services, registryLogins,\n\t\t\t\t\t\tmountDockerSock, trustCertContent, getRunOptions());\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tWebsocketUtils.call(agentSession, jobData, 0);\n\t\t\t\t} catch (InterruptedException | TimeoutException e) {\n\t\t\t\t\tnew Message(MessageType.CANCEL_JOB, jobToken).sendBy(agentSession);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}, new HashMap<>(), parsedQeury, jobContext.getResourceRequirements(), jobLogger);\n\t\t\n\t}\n\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\tJobLogManager logManager = OneDev.getInstance(JobLogManager.class);\n\t\tString jobToken = UUID.randomUUID().toString();\n\t\tlogManager.registerLogger(jobToken, jobLogger);\n\t\ttry {\n\t\t\tAgentQuery parsedQeury = AgentQuery.parse(agentQuery, true);\n\t\t\t\n\t\t\tOneDev.getInstance(ResourceManager.class).run(new AgentAwareRunnable() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void runOn(Long agentId, Session agentSession, AgentData agentData) {\n\t\t\t\t\tjobLogger.log(String.format(\"Testing on agent '%s'...\", agentData.getName()));\n\t\n\t\t\t\t\tList<Map<String, String>> registryLogins = new ArrayList<>();\n\t\t\t\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\t\t\t\tregistryLogins.add(CollectionUtils.newHashMap(\n\t\t\t\t\t\t\t\t\"url\", login.getRegistryUrl(), \n\t\t\t\t\t\t\t\t\"userName\", login.getUserName(), \n\t\t\t\t\t\t\t\t\"password\", login.getPassword()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tTestDockerJobData jobData = new TestDockerJobData(jobToken, testData.getDockerImage(), \n\t\t\t\t\t\t\tregistryLogins, getRunOptions());\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\tWebsocketUtils.call(agentSession, jobData, 0);\n\t\t\t\t\t} catch (InterruptedException | TimeoutException e) {\n\t\t\t\t\t\tnew Message(MessageType.CANCEL_JOB, jobToken).sendBy(agentSession);\n\t\t\t\t\t} \n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, new HashMap<>(), parsedQeury, new HashMap<>(), jobLogger);\n\t\t} finally {\n\t\t\tlogManager.deregisterLogger(jobToken);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getDockerExecutable() {\n\t\treturn super.getDockerExecutable();\n\t}\n\n}", "package io.onedev.server.plugin.executor.serverdocker;\n\nimport static io.onedev.agent.DockerExecutorUtils.cleanDirAsRoot;\nimport static io.onedev.agent.DockerExecutorUtils.createNetwork;\nimport static io.onedev.agent.DockerExecutorUtils.deleteNetwork;\nimport static io.onedev.agent.DockerExecutorUtils.isUseProcessIsolation;\nimport static io.onedev.agent.DockerExecutorUtils.newDockerKiller;\nimport static io.onedev.agent.DockerExecutorUtils.startService;\nimport static io.onedev.k8shelper.KubernetesHelper.cloneRepository;\nimport static io.onedev.k8shelper.KubernetesHelper.installGitCert;\nimport static io.onedev.k8shelper.KubernetesHelper.stringifyPosition;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport javax.annotation.Nullable;\nimport javax.validation.ConstraintValidatorContext;\n\nimport org.apache.commons.lang3.SystemUtils;\nimport org.hibernate.validator.constraints.NotEmpty;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Preconditions;\n\nimport io.onedev.agent.DockerExecutorUtils;\nimport io.onedev.agent.ExecutorUtils;\nimport io.onedev.agent.job.FailedException;\nimport io.onedev.commons.bootstrap.Bootstrap;\nimport io.onedev.commons.loader.AppLoader;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.PathUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.commons.utils.command.Commandline;\nimport io.onedev.commons.utils.command.ExecutionResult;\nimport io.onedev.commons.utils.command.LineConsumer;\nimport io.onedev.k8shelper.BuildImageFacade;\nimport io.onedev.k8shelper.CacheAllocationRequest;\nimport io.onedev.k8shelper.CacheInstance;\nimport io.onedev.k8shelper.CheckoutFacade;\nimport io.onedev.k8shelper.CloneInfo;\nimport io.onedev.k8shelper.CommandFacade;\nimport io.onedev.k8shelper.CompositeFacade;\nimport io.onedev.k8shelper.JobCache;\nimport io.onedev.k8shelper.KubernetesHelper;\nimport io.onedev.k8shelper.LeafFacade;\nimport io.onedev.k8shelper.LeafHandler;\nimport io.onedev.k8shelper.OsContainer;\nimport io.onedev.k8shelper.OsExecution;\nimport io.onedev.k8shelper.OsInfo;\nimport io.onedev.k8shelper.RunContainerFacade;\nimport io.onedev.k8shelper.ServerSideFacade;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.buildspec.Service;\nimport io.onedev.server.buildspec.job.JobContext;\nimport io.onedev.server.buildspec.job.JobManager;\nimport io.onedev.server.git.config.GitConfig;\nimport io.onedev.server.job.resource.ResourceManager;\nimport io.onedev.server.model.support.RegistryLogin;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor.TestData;\nimport io.onedev.server.util.validation.Validatable;\nimport io.onedev.server.util.validation.annotation.ClassValidating;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Horizontal;\nimport io.onedev.server.web.editable.annotation.OmitName;\nimport io.onedev.server.web.util.Testable;\n\n@Editable(order=ServerDockerExecutor.ORDER, name=\"Server Docker Executor\", description=\"This executor runs build jobs as docker containers on OneDev server\")\n@ClassValidating\n@Horizontal\npublic class ServerDockerExecutor extends JobExecutor implements Testable<TestData>, Validatable {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tstatic final int ORDER=50;\n\n\tprivate static final Object cacheHomeCreationLock = new Object();\n\t\n\tprivate List<RegistryLogin> registryLogins = new ArrayList<>();\n\t\n\tprivate String runOptions;\n\t\n\tprivate String dockerExecutable;\n\t\n\tprivate boolean mountDockerSock;\n\t\n\tprivate static transient volatile String hostInstallPath;\n\n\t@Editable(order=400, description=\"Specify login information for docker registries if necessary\")\n\tpublic List<RegistryLogin> getRegistryLogins() {\n\t\treturn registryLogins;\n\t}\n\n\tpublic void setRegistryLogins(List<RegistryLogin> registryLogins) {\n\t\tthis.registryLogins = registryLogins;\n\t}\n\n\t@Editable(order=500, description=\"Whether or not to mount docker sock into job container to \"\n\t\t\t+ \"support docker operations in job commands, for instance to build docker image.<br>\"\n\t\t\t+ \"<b class='text-danger'>WARNING</b>: Malicious jobs can take control of whole OneDev \"\n\t\t\t+ \"by operating the mounted docker sock. You should configure job requirement \"\n\t\t\t+ \"option below to make sure the executor can only be used by trusted jobs if this \"\n\t\t\t+ \"option is enabled\")\n\tpublic boolean isMountDockerSock() {\n\t\treturn mountDockerSock;\n\t}\n\n\tpublic void setMountDockerSock(boolean mountDockerSock) {\n\t\tthis.mountDockerSock = mountDockerSock;\n\t}\n\n\t@Editable(order=50050, group=\"More Settings\", description=\"Optionally specify options to run container. For instance, you may use <tt>-m 2g</tt> \"\n\t\t\t+ \"to limit memory of created container to be 2 giga bytes\")\n\tpublic String getRunOptions() {\n\t\treturn runOptions;\n\t}\n\n\tpublic void setRunOptions(String runOptions) {\n\t\tthis.runOptions = runOptions;\n\t}\n\n\t@Editable(order=50100, group=\"More Settings\", placeholder=\"Use default\", description=\"\"\n\t\t\t+ \"Optionally specify docker executable, for instance <i>/usr/local/bin/docker</i>. \"\n\t\t\t+ \"Leave empty to use docker executable in PATH\")\n\tpublic String getDockerExecutable() {\n\t\treturn dockerExecutable;\n\t}\n\n\tpublic void setDockerExecutable(String dockerExecutable) {\n\t\tthis.dockerExecutable = dockerExecutable;\n\t}\n\n\tprivate Commandline newDocker() {\n\t\tif (getDockerExecutable() != null)\n\t\t\treturn new Commandline(getDockerExecutable());\n\t\telse if (SystemUtils.IS_OS_MAC_OSX && new File(\"/usr/local/bin/docker\").exists())\n\t\t\treturn new Commandline(\"/usr/local/bin/docker\");\n\t\telse\n\t\t\treturn new Commandline(\"docker\");\n\t}\n\t\n\tprivate File getCacheHome() {\n\t\tFile file = new File(Bootstrap.getSiteDir(), \"cache\");\n\t\tif (!file.exists()) synchronized (cacheHomeCreationLock) {\n\t\t\tFileUtils.createDir(file);\n\t\t}\n\t\treturn file;\n\t}\n\t\n\t@Override\n\tpublic void execute(String jobToken, JobContext jobContext) {\n\t\tif (OneDev.getK8sService() != null) {\n\t\t\tthrow new ExplicitException(\"\"\n\t\t\t\t\t+ \"OneDev running inside kubernetes cluster does not support server docker executor. \"\n\t\t\t\t\t+ \"Please use kubernetes executor instead\");\n\t\t}\n\t\tFile hostBuildHome = FileUtils.createTempDir(\"onedev-build\");\n\t\ttry {\n\t\t\tTaskLogger jobLogger = jobContext.getLogger();\n\t\t\tOneDev.getInstance(ResourceManager.class).run(new Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tString network = getName() + \"-\" + jobContext.getProjectId() + \"-\" \n\t\t\t\t\t\t\t+ jobContext.getBuildNumber() + \"-\" + jobContext.getRetried();\n\n\t\t\t\t\tjobLogger.log(String.format(\"Executing job (executor: %s, network: %s)...\", getName(), network));\n\t\t\t\t\tjobContext.notifyJobRunning(null);\n\t\t\t\t\t\n\t\t\t\t\tJobManager jobManager = OneDev.getInstance(JobManager.class);\t\t\n\t\t\t\t\tFile hostCacheHome = getCacheHome();\n\t\t\t\t\t\n\t\t\t\t\tjobLogger.log(\"Setting up job cache...\") ;\n\t\t\t\t\tJobCache cache = new JobCache(hostCacheHome) {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected Map<CacheInstance, String> allocate(CacheAllocationRequest request) {\n\t\t\t\t\t\t\treturn jobManager.allocateJobCaches(jobToken, request);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected void clean(File cacheDir) {\n\t\t\t\t\t\t\tcleanDirAsRoot(cacheDir, newDocker(), Bootstrap.isInDocker());\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t\tcache.init(false);\n\n\t\t\t\t\tlogin(jobLogger);\n\t\t\t\t\t\n\t\t\t\t\tcreateNetwork(newDocker(), network, jobLogger);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tOsInfo osInfo = OneDev.getInstance(OsInfo.class);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Service jobService: jobContext.getServices()) {\n\t\t\t\t\t\t\tjobLogger.log(\"Starting service (name: \" + jobService.getName() + \", image: \" + jobService.getImage() + \")...\");\n\t\t\t\t\t\t\tstartService(newDocker(), network, jobService.toMap(), osInfo, jobLogger);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tFile hostWorkspace = new File(hostBuildHome, \"workspace\");\n\t\t\t\t\t\tFileUtils.createDir(hostWorkspace);\n\t\t\t\t\t\t\n\t\t\t\t\t\tAtomicReference<File> hostAuthInfoHome = new AtomicReference<>(null);\n\t\t\t\t\t\ttry {\t\t\t\t\t\t\n\t\t\t\t\t\t\tcache.installSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tjobLogger.log(\"Copying job dependencies...\");\n\t\t\t\t\t\t\tjobContext.copyDependencies(hostWorkspace);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString containerBuildHome;\n\t\t\t\t\t\t\tString containerWorkspace;\n\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\t\t\tcontainerBuildHome = \"C:\\\\onedev-build\";\n\t\t\t\t\t\t\t\tcontainerWorkspace = \"C:\\\\onedev-build\\\\workspace\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainerBuildHome = \"/onedev-build\";\n\t\t\t\t\t\t\t\tcontainerWorkspace = \"/onedev-build/workspace\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tjobContext.reportJobWorkspace(containerWorkspace);\n\t\t\t\t\t\t\tCompositeFacade entryFacade = new CompositeFacade(jobContext.getActions());\n\t\t\t\t\t\t\tboolean successful = entryFacade.execute(new LeafHandler() {\n\n\t\t\t\t\t\t\t\tprivate int runStepContainer(String image, @Nullable String entrypoint, \n\t\t\t\t\t\t\t\t\t\tList<String> arguments, Map<String, String> environments, \n\t\t\t\t\t\t\t\t\t\t@Nullable String workingDir, Map<String, String> volumeMounts, \n\t\t\t\t\t\t\t\t\t\tList<Integer> position, boolean useTTY) {\n\t\t\t\t\t\t\t\t\tString containerName = network + \"-step-\" + stringifyPosition(position);\n\t\t\t\t\t\t\t\t\tCommandline docker = newDocker();\n\t\t\t\t\t\t\t\t\tdocker.addArgs(\"run\", \"--name=\" + containerName, \"--network=\" + network);\n\t\t\t\t\t\t\t\t\tif (getRunOptions() != null)\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(StringUtils.parseQuoteTokens(getRunOptions()));\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Uninstall symbol links as docker can not process it well\n\t\t\t\t\t\t\t\t\tcache.uninstallSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(hostBuildHome.getAbsolutePath()) + \":\" + containerBuildHome);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: volumeMounts.entrySet()) {\n\t\t\t\t\t\t\t\t\t\t\tString hostPath = getHostPath(new File(hostWorkspace, entry.getKey()).getAbsolutePath());\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", hostPath + \":\" + entry.getValue());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (entrypoint != null) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-w\", containerWorkspace);\n\t\t\t\t\t\t\t\t\t\telse if (workingDir != null) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-w\", workingDir);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<CacheInstance, String> entry: cache.getAllocations().entrySet()) {\n\t\t\t\t\t\t\t\t\t\t\tString hostCachePath = entry.getKey().getDirectory(hostCacheHome).getAbsolutePath();\n\t\t\t\t\t\t\t\t\t\t\tString containerCachePath = PathUtils.resolve(containerWorkspace, entry.getValue());\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(hostCachePath) + \":\" + containerCachePath);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (isMountDockerSock()) {\n\t\t\t\t\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) \n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", \"//./pipe/docker_engine://./pipe/docker_engine\");\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", \"/var/run/docker.sock:/var/run/docker.sock\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (hostAuthInfoHome.get() != null) {\n\t\t\t\t\t\t\t\t\t\t\tString hostPath = getHostPath(hostAuthInfoHome.get().getAbsolutePath());\n\t\t\t\t\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\",  hostPath + \":C:\\\\Users\\\\ContainerAdministrator\\\\auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\",  hostPath + \":C:\\\\Users\\\\ContainerUser\\\\auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-v\", hostPath + \":/root/auth-info\");\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (Map.Entry<String, String> entry: environments.entrySet()) \n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-e\", entry.getKey() + \"=\" + entry.getValue());\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-e\", \"ONEDEV_WORKSPACE=\" + containerWorkspace);\n\t\n\t\t\t\t\t\t\t\t\t\tif (useTTY)\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"-t\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (entrypoint != null)\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"--entrypoint=\" + entrypoint);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (isUseProcessIsolation(newDocker(), image, osInfo, jobLogger))\n\t\t\t\t\t\t\t\t\t\t\tdocker.addArgs(\"--isolation=process\");\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(image);\n\t\t\t\t\t\t\t\t\t\tdocker.addArgs(arguments.toArray(new String[arguments.size()]));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tExecutionResult result = docker.execute(ExecutorUtils.newInfoLogger(jobLogger), \n\t\t\t\t\t\t\t\t\t\t\t\tExecutorUtils.newWarningLogger(jobLogger), null, newDockerKiller(newDocker(), \n\t\t\t\t\t\t\t\t\t\t\t\tcontainerName, jobLogger));\n\t\t\t\t\t\t\t\t\t\treturn result.getReturnCode();\n\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\tcache.installSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean execute(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\t\t\t\tString stepNames = entryFacade.getNamesAsString(position);\n\t\t\t\t\t\t\t\t\tjobLogger.notice(\"Running step \\\"\" + stepNames + \"\\\"...\");\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (facade instanceof CommandFacade) {\n\t\t\t\t\t\t\t\t\t\tCommandFacade commandFacade = (CommandFacade) facade;\n\n\t\t\t\t\t\t\t\t\t\tOsExecution execution = commandFacade.getExecution(osInfo);\n\t\t\t\t\t\t\t\t\t\tif (execution.getImage() == null) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"This step can only be executed by server shell \"\n\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"executor or remote shell executor\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tCommandline entrypoint = DockerExecutorUtils.getEntrypoint(\n\t\t\t\t\t\t\t\t\t\t\t\thostBuildHome, commandFacade, osInfo, hostAuthInfoHome.get() != null);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tint exitCode = runStepContainer(execution.getImage(), entrypoint.executable(), \n\t\t\t\t\t\t\t\t\t\t\t\tentrypoint.arguments(), new HashMap<>(), null, new HashMap<>(), \n\t\t\t\t\t\t\t\t\t\t\t\tposition, commandFacade.isUseTTY());\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: Command exited with code \" + exitCode);\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (facade instanceof BuildImageFacade || facade instanceof BuildImageFacade) {\n\t\t\t\t\t\t\t\t\t\tDockerExecutorUtils.buildImage(newDocker(), (BuildImageFacade) facade, \n\t\t\t\t\t\t\t\t\t\t\t\thostBuildHome, jobLogger);\n\t\t\t\t\t\t\t\t\t} else if (facade instanceof RunContainerFacade) {\n\t\t\t\t\t\t\t\t\t\tRunContainerFacade rubContainerFacade = (RunContainerFacade) facade;\n\t\t\t\t\t\t\t\t\t\tOsContainer container = rubContainerFacade.getContainer(osInfo);\n\t\t\t\t\t\t\t\t\t\tList<String> arguments = new ArrayList<>();\n\t\t\t\t\t\t\t\t\t\tif (container.getArgs() != null)\n\t\t\t\t\t\t\t\t\t\t\targuments.addAll(Arrays.asList(StringUtils.parseQuoteTokens(container.getArgs())));\n\t\t\t\t\t\t\t\t\t\tint exitCode = runStepContainer(container.getImage(), null, arguments, container.getEnvMap(), \n\t\t\t\t\t\t\t\t\t\t\t\tcontainer.getWorkingDir(), container.getVolumeMounts(), position, rubContainerFacade.isUseTTY());\n\t\t\t\t\t\t\t\t\t\tif (exitCode != 0) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: Container exited with code \" + exitCode);\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t} else if (facade instanceof CheckoutFacade) {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tCheckoutFacade checkoutFacade = (CheckoutFacade) facade;\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.log(\"Checking out code...\");\n\t\t\t\t\t\t\t\t\t\t\tif (hostAuthInfoHome.get() == null)\n\t\t\t\t\t\t\t\t\t\t\t\thostAuthInfoHome.set(FileUtils.createTempDir());\n\t\t\t\t\t\t\t\t\t\t\tCommandline git = new Commandline(AppLoader.getInstance(GitConfig.class).getExecutable());\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcheckoutFacade.setupWorkingDir(git, hostWorkspace);\n\t\t\t\t\t\t\t\t\t\t\tgit.environments().put(\"HOME\", hostAuthInfoHome.get().getAbsolutePath());\n\t\n\t\t\t\t\t\t\t\t\t\t\tCloneInfo cloneInfo = checkoutFacade.getCloneInfo();\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tcloneInfo.writeAuthData(hostAuthInfoHome.get(), git, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tList<String> trustCertContent = getTrustCertContent();\n\t\t\t\t\t\t\t\t\t\t\t\tif (!trustCertContent.isEmpty()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tinstallGitCert(new File(hostAuthInfoHome.get(), \"trust-cert.pem\"), trustCertContent, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgit, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tint cloneDepth = checkoutFacade.getCloneDepth();\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tcloneRepository(git, jobContext.getProjectGitDir().getAbsolutePath(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcloneInfo.getCloneUrl(), jobContext.getCommitId().name(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcheckoutFacade.isWithLfs(), checkoutFacade.isWithSubmodules(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcloneDepth, ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t\t\t\tgit.clearArgs();\n\t\t\t\t\t\t\t\t\t\t\t\tgit.addArgs(\"config\", \"--global\", \"--unset\", \"core.sshCommand\");\n\t\t\t\t\t\t\t\t\t\t\t\tExecutionResult result = git.execute(ExecutorUtils.newInfoLogger(jobLogger), ExecutorUtils.newWarningLogger(jobLogger));\n\t\t\t\t\t\t\t\t\t\t\t\tif (result.getReturnCode() != 5 && result.getReturnCode() != 0)\n\t\t\t\t\t\t\t\t\t\t\t\t\tresult.checkReturnCode();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: \" + getErrorMessage(e));\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tServerSideFacade serverSideFacade = (ServerSideFacade) facade;\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tserverSideFacade.execute(hostBuildHome, new ServerSideFacade.Runner() {\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\t\t\tpublic Map<String, byte[]> run(File inputDir, Map<String, String> placeholderValues) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn jobContext.runServerStep(position, inputDir, placeholderValues, jobLogger);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t\t\t\tjobLogger.error(\"Step \\\"\" + stepNames + \"\\\" is failed: \" + getErrorMessage(e));\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tjobLogger.success(\"Step \\\"\" + stepNames + \"\\\" is successful\");\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void skip(LeafFacade facade, List<Integer> position) {\n\t\t\t\t\t\t\t\t\tjobLogger.notice(\"Step \\\"\" + entryFacade.getNamesAsString(position) + \"\\\" is skipped\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, new ArrayList<>());\n\n\t\t\t\t\t\t\tif (!successful)\n\t\t\t\t\t\t\t\tthrow new FailedException();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tcache.uninstallSymbolinks(hostWorkspace);\n\t\t\t\t\t\t\t// Fix https://code.onedev.io/projects/160/issues/597\n\t\t\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS)\n\t\t\t\t\t\t\t\tFileUtils.deleteDir(hostWorkspace);\n\t\t\t\t\t\t\tif (hostAuthInfoHome.get() != null)\n\t\t\t\t\t\t\t\tFileUtils.deleteDir(hostAuthInfoHome.get());\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tdeleteNetwork(newDocker(), network, jobLogger);\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}, jobContext.getResourceRequirements(), jobLogger);\n\t\t} finally {\n\t\t\tcleanDirAsRoot(hostBuildHome, newDocker(), Bootstrap.isInDocker());\n\t\t\tFileUtils.deleteDir(hostBuildHome);\n\t\t}\n\t}\n\n\tprivate void login(TaskLogger jobLogger) {\n\t\tfor (RegistryLogin login: getRegistryLogins()) \n\t\t\tDockerExecutorUtils.login(newDocker(), login.getRegistryUrl(), login.getUserName(), login.getPassword(), jobLogger);\n\t}\n\t\n\tprivate boolean hasOptions(String[] arguments, String... options) {\n\t\tfor (String argument: arguments) {\n\t\t\tfor (String option: options) {\n\t\t\t\tif (option.startsWith(\"--\")) {\n\t\t\t\t\tif (argument.startsWith(option + \"=\") || argument.equals(option))\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else if (option.startsWith(\"-\")) {\n\t\t\t\t\tif (argument.startsWith(option))\n\t\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new ExplicitException(\"Invalid option: \" + option);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic boolean isValid(ConstraintValidatorContext context) {\n\t\tboolean isValid = true;\n\t\tSet<String> registryUrls = new HashSet<>();\n\t\tfor (RegistryLogin login: getRegistryLogins()) {\n\t\t\tif (!registryUrls.add(login.getRegistryUrl())) {\n\t\t\t\tisValid = false;\n\t\t\t\tString message;\n\t\t\t\tif (login.getRegistryUrl() != null)\n\t\t\t\t\tmessage = \"Duplicate login entry for registry '\" + login.getRegistryUrl() + \"'\";\n\t\t\t\telse\n\t\t\t\t\tmessage = \"Duplicate login entry for official registry\";\n\t\t\t\tcontext.buildConstraintViolationWithTemplate(message)\n\t\t\t\t\t\t.addPropertyNode(\"registryLogins\").addConstraintViolation();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (getRunOptions() != null) {\n\t\t\tString[] arguments = StringUtils.parseQuoteTokens(getRunOptions());\n\t\t\tString reservedOptions[] = new String[] {\"-w\", \"--workdir\", \"-d\", \"--detach\", \"-a\", \"--attach\", \"-t\", \"--tty\", \n\t\t\t\t\t\"-i\", \"--interactive\", \"--rm\", \"--restart\", \"--name\"}; \n\t\t\tif (hasOptions(arguments, reservedOptions)) {\n\t\t\t\tStringBuilder errorMessage = new StringBuilder(\"Can not use options: \"\n\t\t\t\t\t\t+ Joiner.on(\", \").join(reservedOptions));\n\t\t\t\tcontext.buildConstraintViolationWithTemplate(errorMessage.toString())\n\t\t\t\t\t\t.addPropertyNode(\"runOptions\").addConstraintViolation();\n\t\t\t\tisValid = false;\n\t\t\t} \n\t\t}\n\t\tif (!isValid)\n\t\t\tcontext.disableDefaultConstraintViolation();\n\t\treturn isValid;\n\t}\n\t\n\tprivate String getHostPath(String path) {\n\t\tString installPath = Bootstrap.installDir.getAbsolutePath();\n\t\tPreconditions.checkState(path.startsWith(installPath + \"/\")\n\t\t\t\t|| path.startsWith(installPath + \"\\\\\"));\n\t\tif (hostInstallPath == null) {\n\t\t\tif (Bootstrap.isInDocker()) \n\t\t\t\thostInstallPath = DockerExecutorUtils.getHostPath(newDocker(), installPath);\n\t\t\telse \n\t\t\t\thostInstallPath = installPath;\n\t\t}\n\t\treturn hostInstallPath + path.substring(installPath.length());\n\t}\n\t\n\t@Override\n\tpublic void test(TestData testData, TaskLogger jobLogger) {\n\t\tOneDev.getInstance(ResourceManager.class).run(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tlogin(jobLogger);\n\t\t\t\t\n\t\t\t\tFile workspaceDir = null;\n\t\t\t\tFile cacheDir = null;\n\n\t\t\t\tCommandline docker = newDocker();\n\t\t\t\ttry {\n\t\t\t\t\tworkspaceDir = FileUtils.createTempDir(\"workspace\");\n\t\t\t\t\tcacheDir = new File(getCacheHome(), UUID.randomUUID().toString());\n\t\t\t\t\tFileUtils.createDir(cacheDir);\n\t\t\t\t\t\n\t\t\t\t\tjobLogger.log(\"Testing specified docker image...\");\n\t\t\t\t\tdocker.clearArgs();\n\t\t\t\t\tdocker.addArgs(\"run\", \"--rm\");\n\t\t\t\t\tif (getRunOptions() != null)\n\t\t\t\t\t\tdocker.addArgs(StringUtils.parseQuoteTokens(getRunOptions()));\n\t\t\t\t\tString containerWorkspacePath;\n\t\t\t\t\tString containerCachePath;\n\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\t\tcontainerWorkspacePath = \"C:\\\\onedev-build\\\\workspace\";\n\t\t\t\t\t\tcontainerCachePath = \"C:\\\\onedev-build\\\\cache\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainerWorkspacePath = \"/onedev-build/workspace\";\n\t\t\t\t\t\tcontainerCachePath = \"/onedev-build/cache\";\n\t\t\t\t\t}\n\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(workspaceDir.getAbsolutePath()) + \":\" + containerWorkspacePath);\n\t\t\t\t\tdocker.addArgs(\"-v\", getHostPath(cacheDir.getAbsolutePath()) + \":\" + containerCachePath);\n\t\t\t\t\t\n\t\t\t\t\tdocker.addArgs(\"-w\", containerWorkspacePath);\n\t\t\t\t\tdocker.addArgs(testData.getDockerImage());\n\t\t\t\t\t\n\t\t\t\t\tif (SystemUtils.IS_OS_WINDOWS) \n\t\t\t\t\t\tdocker.addArgs(\"cmd\", \"/c\", \"echo hello from container\");\n\t\t\t\t\telse \n\t\t\t\t\t\tdocker.addArgs(\"sh\", \"-c\", \"echo hello from container\");\n\t\t\t\t\t\n\t\t\t\t\tdocker.execute(new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}).checkReturnCode();\n\t\t\t\t} finally {\n\t\t\t\t\tif (workspaceDir != null)\n\t\t\t\t\t\tFileUtils.deleteDir(workspaceDir);\n\t\t\t\t\tif (cacheDir != null)\n\t\t\t\t\t\tFileUtils.deleteDir(cacheDir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!SystemUtils.IS_OS_WINDOWS) {\n\t\t\t\t\tjobLogger.log(\"Checking busybox availability...\");\n\t\t\t\t\tdocker = newDocker();\n\t\t\t\t\tdocker.addArgs(\"run\", \"--rm\", \"busybox\", \"sh\", \"-c\", \"echo hello from busybox\");\t\t\t\n\t\t\t\t\tdocker.execute(new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}, new LineConsumer() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void consume(String line) {\n\t\t\t\t\t\t\tjobLogger.log(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}).checkReturnCode();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tCommandline git = new Commandline(AppLoader.getInstance(GitConfig.class).getExecutable());\n\t\t\t\tKubernetesHelper.testGitLfsAvailability(git, jobLogger);\n\t\t\t}\n\t\t\t\n\t\t}, new HashMap<>(), jobLogger);\n\t\t\n\t}\n\t\n\t@Editable(name=\"Specify a Docker Image to Test Against\")\n\tpublic static class TestData implements Serializable {\n\n\t\tprivate static final long serialVersionUID = 1L;\n\n\t\tprivate String dockerImage;\n\n\t\t@Editable\n\t\t@OmitName\n\t\t@NotEmpty\n\t\tpublic String getDockerImage() {\n\t\t\treturn dockerImage;\n\t\t}\n\n\t\tpublic void setDockerImage(String dockerImage) {\n\t\t\tthis.dockerImage = dockerImage;\n\t\t}\n\t\t\n\t}\n\n}", "# 7.3.0\n1. [CI/CD] Docker sock is mounted by default for server docker executor, remote docker executor and Kubernetes \nexecutor for security reasons. If your CI job performs docker operation, the build may fail. You may enable \nthe mount docker sock option in related executors, but make sure to configure job requirement of the executor \nto only allow trusted jobs to use the executors\n\n# 7.0.0\n\n1. [RESTful api] Email addresses of a user should now be retrieved via [UserResource.getEmailAddresses](/help/api/io.onedev.server.rest.UserResource/getEmailAddresses), and should be operated via [EmailAddressResource](/help/api/io.onedev.server.rest.EmailAddressResource)\n2. [RESTful api] Access token of a user should now be retrieved via [UserResource.getAccessToken](/help/api/io.onedev.server.rest.UserResource/getAccessToken)\n3. [RESTful api] User query by login name, full name and email should now be done via [UserResource.queryProfile](/help/api/io.onedev.server.rest.UserResource/queryProfile)\n\n# 6.2.1\n\n1. [build spec] Registry login setting is removed from build image step (introduced in 6.2.0). Specify registry logins \nin job executor if necessary\n\n# 6.2.0\n\n1. A new property `Run In Container` is added and enabled for all command steps in build spec. If you have steps intended to \nbe executed by shell executor, edit them to disable this property, otherwise the build will be failed with error `This step should be executed by server docker executor, remote docker executor, or kubernetes executor`\n1. Using cache path &quot;.&quot; (to cache workspace itself) in job cache definition is no longer supported\n\n# 5.4.0 \n\n1. In case install OneDev into a Kubernetes cluster, Kustomization based deployment is replaced by helm based deployment for flexibility reason\n\n# 5.2.1\n\n1. User by default is not able to create/fork projects now. To allow it, specify default login group with appropriate project create permissions in security setting.\n2. URL of project is changed from *http(s)://\\<onedev-server\\>/projects/\\<project name\\>* to *http(s)://\\<onedev-server\\>/projects/\\<project id\\>*. This only affects web UI, clone url and REStful api url is not changed.\n3. Job variable *@project_name@* should be replaced by *@project_path@*.\n4. Job match condition in job executor is renamed as job requirement, and the criteria to match job name is no longer valid. Executor can now be specified when define the job.\n\n# 4.3.0\n\n1. Service definition is separated from job definition. Previous service defined in job will be moved out of job and take the name _\\<job name\\>-\\<service name\\>_ to avoid possible name conflicts. You either need to change it back to use original name in case there is no conflicts, or change your build script to use the new service name. \n2. Job match condition of job executor no longer accepts image criteria. You need to remove it manually if there is any; otherwise the job matching will fail.\n\n# 4.1.3\n\n1. Html report is removed from build spec due to possible XSS vulnerabilities. Check issue #230 for details\n2. Setting _Default Fixed Issues Filter_ in build spec has been moved to be under project build setting, in order to facilitate issue query auto-updating upon custom field/state change\n\n# 4.1.0\n\n1. Backslash in job commands should not be escaped now. And literal '@' should be written as '@@'\n2. Various query operator _is before_ and _is after_ is substituted with _is until_ and _is since_. For instance issue query _\"Submit Date\" is before \"yesterday\"_ should be written as _\"Submit Date\" is until \"yesterday\"_\n\n# 4.0.5\n\n1. Renamed build variables:\n\n  |old name|new name|\n  |---|---|\n  |updated_ref|ref|\n  |updated_branch|branch|\n  |updated_tag|tag|\n  |pull_request_ids|pull_request_number|\n\n1. Removed build variables: _on_branches_, _commit_tags_, \n\n# 3.2\n\nVersion 3.2 uses token authentication instead of password authentication in build spec for security \nconsideration. As a result of this, password authentication specified previously will be cleared:\n\n1. Submodule authentication\n  \n  You will need to use custom http/ssh clone credential with permission to access submodule projects to retrieve source. Refer to [usage scenario](https://code.onedev.io/projects/162/blob/main/pages/clone-submodules-via-ssh.md) for an example.\n  \n2. Project dependency authentication\n\n  You will need to define a job secret containing an access token in project build setting page, and then use that secret in project dependency definition. The access token should have permission to download dependency project artifacts of course."], "filenames": ["pom.xml", "server-core/src/main/java/io/onedev/server/migration/DataMigrator.java", "server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesExecutor.java", "server-plugin/server-plugin-executor-remotedocker/src/main/java/io/onedev/server/plugin/executor/remotedocker/RemoteDockerExecutor.java", "server-plugin/server-plugin-executor-serverdocker/src/main/java/io/onedev/server/plugin/executor/serverdocker/ServerDockerExecutor.java", "server-product/system/incompatibilities/incompatibilities.md"], "buggy_code_start_loc": [592, 4080, 119, 38, 95, 0], "buggy_code_end_loc": [593, 4080, 986, 78, 254, 0], "fixing_code_start_loc": [592, 4081, 120, 39, 96, 1], "fixing_code_end_loc": [593, 4104, 1009, 94, 272, 7], "type": "CWE-610", "message": "Onedev is an open source, self-hosted Git Server with CI/CD and Kanban. When using Docker-based job executors, the Docker socket (e.g. /var/run/docker.sock on Linux) is mounted into each Docker step. Users that can define and trigger CI/CD jobs on a project could use this to control the Docker daemon on the host machine. This is a known dangerous pattern, as it can be used to break out of Docker containers and, in most cases, gain root privileges on the host system. This issue allows regular (non-admin) users to potentially take over the build infrastructure of a OneDev instance. Attackers need to have an account (or be able to register one) and need permission to create a project. Since code.onedev.io has the right preconditions for this to be exploited by remote attackers, it could have been used to hijack builds of OneDev itself, e.g. by injecting malware into the docker images that are built and pushed to Docker Hub. The impact is increased by this as described before. Users are advised to upgrade to 7.3.0 or higher. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-39206", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-13T19:15:13.160", "lastModified": "2022-10-01T02:15:15.997", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Onedev is an open source, self-hosted Git Server with CI/CD and Kanban. When using Docker-based job executors, the Docker socket (e.g. /var/run/docker.sock on Linux) is mounted into each Docker step. Users that can define and trigger CI/CD jobs on a project could use this to control the Docker daemon on the host machine. This is a known dangerous pattern, as it can be used to break out of Docker containers and, in most cases, gain root privileges on the host system. This issue allows regular (non-admin) users to potentially take over the build infrastructure of a OneDev instance. Attackers need to have an account (or be able to register one) and need permission to create a project. Since code.onedev.io has the right preconditions for this to be exploited by remote attackers, it could have been used to hijack builds of OneDev itself, e.g. by injecting malware into the docker images that are built and pushed to Docker Hub. The impact is increased by this as described before. Users are advised to upgrade to 7.3.0 or higher. There are no known workarounds for this issue."}, {"lang": "es", "value": "Onedev es un servidor Git de c\u00f3digo abierto, auto-alojado con CI/CD y Kanban. Cuando son usados ejecutores de trabajos basados en Docker, el socket de Docker (por ejemplo, /var/run/docker.sock en Linux) es montado en cada paso de Docker. Los usuarios que pueden definir y desencadenar trabajos CI/CD en un proyecto podr\u00edan usar esto para controlar el demonio Docker en la m\u00e1quina anfitriona. Este es un patr\u00f3n peligroso conocido, ya que puede ser usado para salir de los contenedores Docker y, en la mayor\u00eda de los casos, conseguir privilegios de root en el sistema anfitri\u00f3n. Este problema permite a usuarios normales (no administradores) tomar potencialmente el control de la infraestructura de construcci\u00f3n de una instancia de OneDev. Los atacantes necesitan tener una cuenta (o ser capaces de registrar una) y necesitan permiso para crear un proyecto. Dado que code.onedev.io presenta las condiciones previas apropiadas para que esto sea explotado por atacantes remotos, podr\u00eda haber sido usado para secuestrar las construcciones de OneDev en s\u00ed, por ejemplo, mediante la inyecci\u00f3n de malware en las im\u00e1genes Docker que son construidas y son empujadas a Docker Hub. El impacto es incrementado por esto como ha sido descrito anteriormente. Es recomendado a usuarios actualizar a versi\u00f3n 7.3.0 o superior. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-610"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.3.0", "matchCriteriaId": "EC376576-D05E-4FBF-8E5E-CB81C3965142"}]}]}], "references": [{"url": "https://blog.sonarsource.com/onedev-remote-code-execution/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/commit/0052047a5b5095ac6a6b4a73a522d0272fec3a22", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-gjq9-4xx9-cr3q", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/0052047a5b5095ac6a6b4a73a522d0272fec3a22"}}