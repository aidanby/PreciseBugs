{"buggy_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Twig\\Extension;\n\nuse Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFilter;\n\n/**\n * Twig extension relate to PHP code and used by the profiler and the default exception templates.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @final since Symfony 4.4\n */\nclass CodeExtension extends AbstractExtension\n{\n    private $fileLinkFormat;\n    private $charset;\n    private $projectDir;\n\n    /**\n     * @param string|FileLinkFormatter $fileLinkFormat The format for links to source files\n     * @param string                   $projectDir     The project directory\n     * @param string                   $charset        The charset\n     */\n    public function __construct($fileLinkFormat, string $projectDir, string $charset)\n    {\n        $this->fileLinkFormat = $fileLinkFormat ?: \\ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');\n        $this->projectDir = str_replace('\\\\', '/', $projectDir).'/';\n        $this->charset = $charset;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @return TwigFilter[]\n     */\n    public function getFilters()\n    {\n        return [\n            new TwigFilter('abbr_class', [$this, 'abbrClass'], ['is_safe' => ['html']]),\n            new TwigFilter('abbr_method', [$this, 'abbrMethod'], ['is_safe' => ['html']]),\n            new TwigFilter('format_args', [$this, 'formatArgs'], ['is_safe' => ['html']]),\n            new TwigFilter('format_args_as_text', [$this, 'formatArgsAsText']),\n            new TwigFilter('file_excerpt', [$this, 'fileExcerpt'], ['is_safe' => ['html']]),\n            new TwigFilter('format_file', [$this, 'formatFile'], ['is_safe' => ['html']]),\n            new TwigFilter('format_file_from_text', [$this, 'formatFileFromText'], ['is_safe' => ['html']]),\n            new TwigFilter('format_log_message', [$this, 'formatLogMessage'], ['is_safe' => ['html']]),\n            new TwigFilter('file_link', [$this, 'getFileLink']),\n            new TwigFilter('file_relative', [$this, 'getFileRelative']),\n        ];\n    }\n\n    public function abbrClass($class)\n    {\n        $parts = explode('\\\\', $class);\n        $short = array_pop($parts);\n\n        return sprintf('<abbr title=\"%s\">%s</abbr>', $class, $short);\n    }\n\n    public function abbrMethod($method)\n    {\n        if (str_contains($method, '::')) {\n            [$class, $method] = explode('::', $method, 2);\n            $result = sprintf('%s::%s()', $this->abbrClass($class), $method);\n        } elseif ('Closure' === $method) {\n            $result = sprintf('<abbr title=\"%s\">%1$s</abbr>', $method);\n        } else {\n            $result = sprintf('<abbr title=\"%s\">%1$s</abbr>()', $method);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Formats an array as a string.\n     *\n     * @param array $args The argument array\n     *\n     * @return string\n     */\n    public function formatArgs($args)\n    {\n        $result = [];\n        foreach ($args as $key => $item) {\n            if ('object' === $item[0]) {\n                $parts = explode('\\\\', $item[1]);\n                $short = array_pop($parts);\n                $formattedValue = sprintf('<em>object</em>(<abbr title=\"%s\">%s</abbr>)', $item[1], $short);\n            } elseif ('array' === $item[0]) {\n                $formattedValue = sprintf('<em>array</em>(%s)', \\is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);\n            } elseif ('null' === $item[0]) {\n                $formattedValue = '<em>null</em>';\n            } elseif ('boolean' === $item[0]) {\n                $formattedValue = '<em>'.strtolower(var_export($item[1], true)).'</em>';\n            } elseif ('resource' === $item[0]) {\n                $formattedValue = '<em>resource</em>';\n            } else {\n                $formattedValue = str_replace(\"\\n\", '', htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset));\n            }\n\n            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", $key, $formattedValue);\n        }\n\n        return implode(', ', $result);\n    }\n\n    /**\n     * Formats an array as a string.\n     *\n     * @param array $args The argument array\n     *\n     * @return string\n     */\n    public function formatArgsAsText($args)\n    {\n        return strip_tags($this->formatArgs($args));\n    }\n\n    /**\n     * Returns an excerpt of a code file around the given line number.\n     *\n     * @param string $file       A file path\n     * @param int    $line       The selected line number\n     * @param int    $srcContext The number of displayed lines around or -1 for the whole file\n     *\n     * @return string An HTML string\n     */\n    public function fileExcerpt($file, $line, $srcContext = 3)\n    {\n        if (is_file($file) && is_readable($file)) {\n            // highlight_file could throw warnings\n            // see https://bugs.php.net/25725\n            $code = @highlight_file($file, true);\n            // remove main code/span tags\n            $code = preg_replace('#^<code.*?>\\s*<span.*?>(.*)</span>\\s*</code>#s', '\\\\1', $code);\n            // split multiline spans\n            $code = preg_replace_callback('#<span ([^>]++)>((?:[^<]*+<br \\/>)++[^<]*+)</span>#', function ($m) {\n                return \"<span $m[1]>\".str_replace('<br />', \"</span><br /><span $m[1]>\", $m[2]).'</span>';\n            }, $code);\n            $content = explode('<br />', $code);\n\n            $lines = [];\n            if (0 > $srcContext) {\n                $srcContext = \\count($content);\n            }\n\n            for ($i = max($line - $srcContext, 1), $max = min($line + $srcContext, \\count($content)); $i <= $max; ++$i) {\n                $lines[] = '<li'.($i == $line ? ' class=\"selected\"' : '').'><a class=\"anchor\" name=\"line'.$i.'\"></a><code>'.self::fixCodeMarkup($content[$i - 1]).'</code></li>';\n            }\n\n            return '<ol start=\"'.max($line - $srcContext, 1).'\">'.implode(\"\\n\", $lines).'</ol>';\n        }\n\n        return null;\n    }\n\n    /**\n     * Formats a file path.\n     *\n     * @param string $file An absolute file path\n     * @param int    $line The line number\n     * @param string $text Use this text for the link rather than the file path\n     *\n     * @return string\n     */\n    public function formatFile($file, $line, $text = null)\n    {\n        $file = trim($file);\n\n        if (null === $text) {\n            $text = $file;\n            if (null !== $rel = $this->getFileRelative($text)) {\n                $rel = explode('/', $rel, 2);\n                $text = sprintf('<abbr title=\"%s%2$s\">%s</abbr>%s', $this->projectDir, $rel[0], '/'.($rel[1] ?? ''));\n            }\n        }\n\n        if (0 < $line) {\n            $text .= ' at line '.$line;\n        }\n\n        if (false !== $link = $this->getFileLink($file, $line)) {\n            return sprintf('<a href=\"%s\" title=\"Click to open this file\" class=\"file_link\">%s</a>', htmlspecialchars($link, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $text);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Returns the link for a given file/line pair.\n     *\n     * @param string $file An absolute file path\n     * @param int    $line The line number\n     *\n     * @return string|false A link or false\n     */\n    public function getFileLink($file, $line)\n    {\n        if ($fmt = $this->fileLinkFormat) {\n            return \\is_string($fmt) ? strtr($fmt, ['%f' => $file, '%l' => $line]) : $fmt->format($file, $line);\n        }\n\n        return false;\n    }\n\n    public function getFileRelative(string $file): ?string\n    {\n        $file = str_replace('\\\\', '/', $file);\n\n        if (null !== $this->projectDir && str_starts_with($file, $this->projectDir)) {\n            return ltrim(substr($file, \\strlen($this->projectDir)), '/');\n        }\n\n        return null;\n    }\n\n    public function formatFileFromText($text)\n    {\n        return preg_replace_callback('/in (\"|&quot;)?(.+?)\\1(?: +(?:on|at))? +line (\\d+)/s', function ($match) {\n            return 'in '.$this->formatFile($match[2], $match[3]);\n        }, $text);\n    }\n\n    /**\n     * @internal\n     */\n    public function formatLogMessage(string $message, array $context): string\n    {\n        if ($context && str_contains($message, '{')) {\n            $replacements = [];\n            foreach ($context as $key => $val) {\n                if (\\is_scalar($val)) {\n                    $replacements['{'.$key.'}'] = $val;\n                }\n            }\n\n            if ($replacements) {\n                $message = strtr($message, $replacements);\n            }\n        }\n\n        return htmlspecialchars($message, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getName()\n    {\n        return 'code';\n    }\n\n    protected static function fixCodeMarkup($line)\n    {\n        // </span> ending tag from previous line\n        $opening = strpos($line, '<span');\n        $closing = strpos($line, '</span>');\n        if (false !== $closing && (false === $opening || $closing < $opening)) {\n            $line = substr_replace($line, '', $closing, 7);\n        }\n\n        // missing </span> tag at the end of line\n        $opening = strpos($line, '<span');\n        $closing = strpos($line, '</span>');\n        if (false !== $opening && (false === $closing || $closing > $opening)) {\n            $line .= '</span>';\n        }\n\n        return trim($line);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Twig\\Tests\\Extension;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Bridge\\Twig\\Extension\\CodeExtension;\nuse Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter;\n\nclass CodeExtensionTest extends TestCase\n{\n    public function testFormatFile()\n    {\n        $expected = sprintf('<a href=\"proto://foobar%s#&amp;line=25\" title=\"Click to open this file\" class=\"file_link\">%s at line 25</a>', substr(__FILE__, 5), __FILE__);\n        $this->assertEquals($expected, $this->getExtension()->formatFile(__FILE__, 25));\n    }\n\n    public function testFileRelative()\n    {\n        $this->assertEquals('file.txt', $this->getExtension()->getFileRelative(\\DIRECTORY_SEPARATOR.'project'.\\DIRECTORY_SEPARATOR.'file.txt'));\n    }\n\n    /**\n     * @dataProvider getClassNameProvider\n     */\n    public function testGettingClassAbbreviation($class, $abbr)\n    {\n        $this->assertEquals($this->getExtension()->abbrClass($class), $abbr);\n    }\n\n    /**\n     * @dataProvider getMethodNameProvider\n     */\n    public function testGettingMethodAbbreviation($method, $abbr)\n    {\n        $this->assertEquals($this->getExtension()->abbrMethod($method), $abbr);\n    }\n\n    public function getClassNameProvider()\n    {\n        return [\n            ['F\\Q\\N\\Foo', '<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>'],\n            ['Bare', '<abbr title=\"Bare\">Bare</abbr>'],\n        ];\n    }\n\n    public function getMethodNameProvider()\n    {\n        return [\n            ['F\\Q\\N\\Foo::Method', '<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>::Method()'],\n            ['Bare::Method', '<abbr title=\"Bare\">Bare</abbr>::Method()'],\n            ['Closure', '<abbr title=\"Closure\">Closure</abbr>'],\n            ['Method', '<abbr title=\"Method\">Method</abbr>()'],\n        ];\n    }\n\n    public function testGetName()\n    {\n        $this->assertEquals('code', $this->getExtension()->getName());\n    }\n\n    protected function getExtension()\n    {\n        return new CodeExtension(new FileLinkFormatter('proto://%f#&line=%l&'.substr(__FILE__, 0, 5).'>foobar'), \\DIRECTORY_SEPARATOR.'project', 'UTF-8');\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Twig\\Extension;\n\nuse Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFilter;\n\n/**\n * Twig extension relate to PHP code and used by the profiler and the default exception templates.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @final since Symfony 4.4\n */\nclass CodeExtension extends AbstractExtension\n{\n    private $fileLinkFormat;\n    private $charset;\n    private $projectDir;\n\n    /**\n     * @param string|FileLinkFormatter $fileLinkFormat The format for links to source files\n     * @param string                   $projectDir     The project directory\n     * @param string                   $charset        The charset\n     */\n    public function __construct($fileLinkFormat, string $projectDir, string $charset)\n    {\n        $this->fileLinkFormat = $fileLinkFormat ?: \\ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');\n        $this->projectDir = str_replace('\\\\', '/', $projectDir).'/';\n        $this->charset = $charset;\n    }\n\n    /**\n     * {@inheritdoc}\n     *\n     * @return TwigFilter[]\n     */\n    public function getFilters()\n    {\n        return [\n            new TwigFilter('abbr_class', [$this, 'abbrClass'], ['is_safe' => ['html'], 'pre_escape' => 'html']),\n            new TwigFilter('abbr_method', [$this, 'abbrMethod'], ['is_safe' => ['html'], 'pre_escape' => 'html']),\n            new TwigFilter('format_args', [$this, 'formatArgs'], ['is_safe' => ['html']]),\n            new TwigFilter('format_args_as_text', [$this, 'formatArgsAsText']),\n            new TwigFilter('file_excerpt', [$this, 'fileExcerpt'], ['is_safe' => ['html']]),\n            new TwigFilter('format_file', [$this, 'formatFile'], ['is_safe' => ['html']]),\n            new TwigFilter('format_file_from_text', [$this, 'formatFileFromText'], ['is_safe' => ['html']]),\n            new TwigFilter('format_log_message', [$this, 'formatLogMessage'], ['is_safe' => ['html']]),\n            new TwigFilter('file_link', [$this, 'getFileLink']),\n            new TwigFilter('file_relative', [$this, 'getFileRelative']),\n        ];\n    }\n\n    public function abbrClass($class)\n    {\n        $parts = explode('\\\\', $class);\n        $short = array_pop($parts);\n\n        return sprintf('<abbr title=\"%s\">%s</abbr>', $class, $short);\n    }\n\n    public function abbrMethod($method)\n    {\n        if (str_contains($method, '::')) {\n            [$class, $method] = explode('::', $method, 2);\n            $result = sprintf('%s::%s()', $this->abbrClass($class), $method);\n        } elseif ('Closure' === $method) {\n            $result = sprintf('<abbr title=\"%s\">%1$s</abbr>', $method);\n        } else {\n            $result = sprintf('<abbr title=\"%s\">%1$s</abbr>()', $method);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Formats an array as a string.\n     *\n     * @param array $args The argument array\n     *\n     * @return string\n     */\n    public function formatArgs($args)\n    {\n        $result = [];\n        foreach ($args as $key => $item) {\n            if ('object' === $item[0]) {\n                $item[1] = htmlspecialchars($item[1], \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n                $parts = explode('\\\\', $item[1]);\n                $short = array_pop($parts);\n                $formattedValue = sprintf('<em>object</em>(<abbr title=\"%s\">%s</abbr>)', $item[1], $short);\n            } elseif ('array' === $item[0]) {\n                $formattedValue = sprintf('<em>array</em>(%s)', \\is_array($item[1]) ? $this->formatArgs($item[1]) : htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset));\n            } elseif ('null' === $item[0]) {\n                $formattedValue = '<em>null</em>';\n            } elseif ('boolean' === $item[0]) {\n                $formattedValue = '<em>'.strtolower(htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset)).'</em>';\n            } elseif ('resource' === $item[0]) {\n                $formattedValue = '<em>resource</em>';\n            } else {\n                $formattedValue = str_replace(\"\\n\", '', htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset));\n            }\n\n            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", htmlspecialchars($key, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $formattedValue);\n        }\n\n        return implode(', ', $result);\n    }\n\n    /**\n     * Formats an array as a string.\n     *\n     * @param array $args The argument array\n     *\n     * @return string\n     */\n    public function formatArgsAsText($args)\n    {\n        return strip_tags($this->formatArgs($args));\n    }\n\n    /**\n     * Returns an excerpt of a code file around the given line number.\n     *\n     * @param string $file       A file path\n     * @param int    $line       The selected line number\n     * @param int    $srcContext The number of displayed lines around or -1 for the whole file\n     *\n     * @return string An HTML string\n     */\n    public function fileExcerpt($file, $line, $srcContext = 3)\n    {\n        if (is_file($file) && is_readable($file)) {\n            // highlight_file could throw warnings\n            // see https://bugs.php.net/25725\n            $code = @highlight_file($file, true);\n            // remove main code/span tags\n            $code = preg_replace('#^<code.*?>\\s*<span.*?>(.*)</span>\\s*</code>#s', '\\\\1', $code);\n            // split multiline spans\n            $code = preg_replace_callback('#<span ([^>]++)>((?:[^<]*+<br \\/>)++[^<]*+)</span>#', function ($m) {\n                return \"<span $m[1]>\".str_replace('<br />', \"</span><br /><span $m[1]>\", $m[2]).'</span>';\n            }, $code);\n            $content = explode('<br />', $code);\n\n            $lines = [];\n            if (0 > $srcContext) {\n                $srcContext = \\count($content);\n            }\n\n            for ($i = max($line - $srcContext, 1), $max = min($line + $srcContext, \\count($content)); $i <= $max; ++$i) {\n                $lines[] = '<li'.($i == $line ? ' class=\"selected\"' : '').'><a class=\"anchor\" name=\"line'.$i.'\"></a><code>'.self::fixCodeMarkup($content[$i - 1]).'</code></li>';\n            }\n\n            return '<ol start=\"'.max($line - $srcContext, 1).'\">'.implode(\"\\n\", $lines).'</ol>';\n        }\n\n        return null;\n    }\n\n    /**\n     * Formats a file path.\n     *\n     * @param string $file An absolute file path\n     * @param int    $line The line number\n     * @param string $text Use this text for the link rather than the file path\n     *\n     * @return string\n     */\n    public function formatFile($file, $line, $text = null)\n    {\n        $file = trim($file);\n        $line = (int) $line;\n\n        if (null === $text) {\n            if (null !== $rel = $this->getFileRelative($file)) {\n                $rel = explode('/', htmlspecialchars($rel, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), 2);\n                $text = sprintf('<abbr title=\"%s%2$s\">%s</abbr>%s', htmlspecialchars($this->projectDir, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $rel[0], '/'.($rel[1] ?? ''));\n            } else {\n                $text = htmlspecialchars($file, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n            }\n        } else {\n            $text = htmlspecialchars($text, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n        }\n\n        if (0 < $line) {\n            $text .= ' at line '.$line;\n        }\n\n        if (false !== $link = $this->getFileLink($file, $line)) {\n            return sprintf('<a href=\"%s\" title=\"Click to open this file\" class=\"file_link\">%s</a>', htmlspecialchars($link, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $text);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Returns the link for a given file/line pair.\n     *\n     * @param string $file An absolute file path\n     * @param int    $line The line number\n     *\n     * @return string|false A link or false\n     */\n    public function getFileLink($file, $line)\n    {\n        if ($fmt = $this->fileLinkFormat) {\n            return \\is_string($fmt) ? strtr($fmt, ['%f' => $file, '%l' => $line]) : $fmt->format($file, $line);\n        }\n\n        return false;\n    }\n\n    public function getFileRelative(string $file): ?string\n    {\n        $file = str_replace('\\\\', '/', $file);\n\n        if (null !== $this->projectDir && str_starts_with($file, $this->projectDir)) {\n            return ltrim(substr($file, \\strlen($this->projectDir)), '/');\n        }\n\n        return null;\n    }\n\n    public function formatFileFromText($text)\n    {\n        return preg_replace_callback('/in (\"|&quot;)?(.+?)\\1(?: +(?:on|at))? +line (\\d+)/s', function ($match) {\n            return 'in '.$this->formatFile($match[2], $match[3]);\n        }, $text);\n    }\n\n    /**\n     * @internal\n     */\n    public function formatLogMessage(string $message, array $context): string\n    {\n        if ($context && str_contains($message, '{')) {\n            $replacements = [];\n            foreach ($context as $key => $val) {\n                if (\\is_scalar($val)) {\n                    $replacements['{'.$key.'}'] = $val;\n                }\n            }\n\n            if ($replacements) {\n                $message = strtr($message, $replacements);\n            }\n        }\n\n        return htmlspecialchars($message, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getName()\n    {\n        return 'code';\n    }\n\n    protected static function fixCodeMarkup($line)\n    {\n        // </span> ending tag from previous line\n        $opening = strpos($line, '<span');\n        $closing = strpos($line, '</span>');\n        if (false !== $closing && (false === $opening || $closing < $opening)) {\n            $line = substr_replace($line, '', $closing, 7);\n        }\n\n        // missing </span> tag at the end of line\n        $opening = strpos($line, '<span');\n        $closing = strpos($line, '</span>');\n        if (false !== $opening && (false === $closing || $closing > $opening)) {\n            $line .= '</span>';\n        }\n\n        return trim($line);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Twig\\Tests\\Extension;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Bridge\\Twig\\Extension\\CodeExtension;\nuse Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter;\nuse Twig\\Environment;\nuse Twig\\Loader\\ArrayLoader;\n\nclass CodeExtensionTest extends TestCase\n{\n    public function testFormatFile()\n    {\n        $expected = sprintf('<a href=\"proto://foobar%s#&amp;line=25\" title=\"Click to open this file\" class=\"file_link\">%s at line 25</a>', substr(__FILE__, 5), __FILE__);\n        $this->assertEquals($expected, $this->getExtension()->formatFile(__FILE__, 25));\n    }\n\n    public function testFileRelative()\n    {\n        $this->assertEquals('file.txt', $this->getExtension()->getFileRelative(\\DIRECTORY_SEPARATOR.'project'.\\DIRECTORY_SEPARATOR.'file.txt'));\n    }\n\n    public function testClassAbbreviationIntegration()\n    {\n        $data = [\n            'fqcn' => 'F\\Q\\N\\Foo',\n            'xss' => '<script>',\n        ];\n\n        $template = <<<'TWIG'\n{{ 'Bare'|abbr_class }}\n{{ fqcn|abbr_class }}\n{{ xss|abbr_class }}\nTWIG;\n\n        $expected = <<<'HTML'\n<abbr title=\"Bare\">Bare</abbr>\n<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>\n<abbr title=\"&lt;script&gt;\">&lt;script&gt;</abbr>\nHTML;\n\n        $this->assertEquals($expected, $this->render($template, $data));\n    }\n\n    public function testMethodAbbreviationIntegration()\n    {\n        $data = [\n            'fqcn' => 'F\\Q\\N\\Foo::Method',\n            'xss' => '<script>',\n        ];\n\n        $template = <<<'TWIG'\n{{ 'Bare::Method'|abbr_method }}\n{{ fqcn|abbr_method }}\n{{ 'Closure'|abbr_method }}\n{{ 'Method'|abbr_method }}\n{{ xss|abbr_method }}\nTWIG;\n\n        $expected = <<<'HTML'\n<abbr title=\"Bare\">Bare</abbr>::Method()\n<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>::Method()\n<abbr title=\"Closure\">Closure</abbr>\n<abbr title=\"Method\">Method</abbr>()\n<abbr title=\"&lt;script&gt;\">&lt;script&gt;</abbr>()\nHTML;\n\n        $this->assertEquals($expected, $this->render($template, $data));\n    }\n\n    public function testFormatArgsIntegration()\n    {\n        $data = [\n            'args' => [\n                ['object', 'Foo'],\n                ['array', [['string', 'foo'], ['null']]],\n                ['resource'],\n                ['string', 'bar'],\n                ['int', 123],\n                ['bool', true],\n            ],\n            'xss' => [\n                ['object', '<Foo>'],\n                ['array', [['string', '<foo>']]],\n                ['string', '<bar>'],\n                ['int', 123],\n                ['bool', true],\n                ['<xss>', '<script>'],\n            ],\n        ];\n\n        $template = <<<'TWIG'\n{{ args|format_args }}\n{{ xss|format_args }}\n{{ args|format_args_as_text }}\n{{ xss|format_args_as_text }}\nTWIG;\n\n        $expected = <<<'HTML'\n<em>object</em>(<abbr title=\"Foo\">Foo</abbr>), <em>array</em>('foo', <em>null</em>), <em>resource</em>, 'bar', 123, true\n<em>object</em>(<abbr title=\"&lt;Foo&gt;\">&lt;Foo&gt;</abbr>), <em>array</em>('&lt;foo&gt;'), '&lt;bar&gt;', 123, true, '&lt;script&gt;'\nobject(Foo), array(&#039;foo&#039;, null), resource, &#039;bar&#039;, 123, true\nobject(&amp;lt;Foo&amp;gt;), array(&#039;&amp;lt;foo&amp;gt;&#039;), &#039;&amp;lt;bar&amp;gt;&#039;, 123, true, &#039;&amp;lt;script&amp;gt;&#039;\nHTML;\n\n        $this->assertEquals($expected, $this->render($template, $data));\n    }\n\n\n    public function testFormatFileIntegration()\n    {\n        $template = <<<'TWIG'\n{{ 'foo/bar/baz.php'|format_file(21) }}\n{{ '<script>'|format_file('<script21>') }}\nTWIG;\n\n        $expected = <<<'HTML'\n<a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\n<a href=\"proto://&lt;script&gt;#&amp;line=0\" title=\"Click to open this file\" class=\"file_link\">&lt;script&gt;</a>\nHTML;\n\n        $this->assertEquals($expected, $this->render($template));\n    }\n\n    public function testFormatFileFromTextIntegration()\n    {\n        $template = <<<'TWIG'\n{{ 'in \"foo/bar/baz.php\" at line 21'|format_file_from_text }}\n{{ 'in &quot;foo/bar/baz.php&quot; on line 21'|format_file_from_text }}\n{{ 'in \"<script>\" on line 21'|format_file_from_text }}\nTWIG;\n\n        $expected = <<<'HTML'\nin <a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\nin <a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\nin <a href=\"proto://&lt;script&gt;#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">&lt;script&gt; at line 21</a>\nHTML;\n\n        $this->assertEquals($expected, $this->render($template));\n    }\n\n    public function testGetName()\n    {\n        $this->assertEquals('code', $this->getExtension()->getName());\n    }\n\n    protected function getExtension()\n    {\n        return new CodeExtension(new FileLinkFormatter('proto://%f#&line=%l&'.substr(__FILE__, 0, 5).'>foobar'), \\DIRECTORY_SEPARATOR.'project', 'UTF-8');\n    }\n\n    private function render(string $template, array $context = [])\n    {\n        $twig = new Environment(\n            new ArrayLoader(['index' => $template]),\n            ['debug' => true]\n        );\n        $twig->addExtension($this->getExtension());\n\n        return $twig->render('index', $context);\n    }\n}\n"], "filenames": ["src/Symfony/Bridge/Twig/Extension/CodeExtension.php", "src/Symfony/Bridge/Twig/Tests/Extension/CodeExtensionTest.php"], "buggy_code_start_loc": [51, 16], "buggy_code_end_loc": [188, 73], "fixing_code_start_loc": [51, 17], "fixing_code_end_loc": [193, 172], "type": "CWE-79", "message": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. Starting in versions 2.0.0, 5.0.0, and 6.0.0 and prior to versions 4.4.51, 5.4.31, and 6.3.8, some Twig filters in CodeExtension use `is_safe=html` but don't actually ensure their input is safe. As of versions 4.4.51, 5.4.31, and 6.3.8, Symfony now escapes the output of the affected filters.", "other": {"cve": {"id": "CVE-2023-46734", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-10T18:15:09.360", "lastModified": "2023-11-24T20:15:07.190", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. Starting in versions 2.0.0, 5.0.0, and 6.0.0 and prior to versions 4.4.51, 5.4.31, and 6.3.8, some Twig filters in CodeExtension use `is_safe=html` but don't actually ensure their input is safe. As of versions 4.4.51, 5.4.31, and 6.3.8, Symfony now escapes the output of the affected filters."}, {"lang": "es", "value": "Symfony es un framework PHP para aplicaciones web y de consola y un conjunto de componentes PHP reutilizables. A partir de las versiones 2.0.0, 5.0.0 y 6.0.0 y anteriores a las versiones 4.4.51, 5.4.31 y 6.3.8, algunos filtros Twig en CodeExtension usan `is_safe=html` pero en realidad no garantizan su la entrada es segura. A partir de las versiones 4.4.51, 5.4.31 y 6.3.8, Symfony ahora escapa a la salida de los filtros afectados."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "4.4.51", "matchCriteriaId": "D4E6FF3A-7682-47C6-B439-774B3DA06B3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.4.31", "matchCriteriaId": "8D9BA65C-8E14-45F4-BAC9-1795DC79CF7E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.3.8", "matchCriteriaId": "0056B4D3-0C63-467F-A308-EB5DEE894B85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:twig:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "4.4.51", "matchCriteriaId": "E7E9CF24-819A-4931-ADE3-43B3D40C5729"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:twig:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.4.31", "matchCriteriaId": "D5BFC997-132A-410E-A7B3-9D0A29F652A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:twig:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.3.8", "matchCriteriaId": "7A2E5E40-A851-4699-A7E0-6CDCE5849369"}]}]}], "references": [{"url": "https://github.com/symfony/symfony/commit/5d095d5feb1322b16450284a04d6bb48d1198f54", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/symfony/symfony/commit/9da9a145ce57e4585031ad4bee37c497353eec7c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/symfony/symfony/security/advisories/GHSA-q847-2q57-wmr3", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00019.html", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/symfony/symfony/commit/5d095d5feb1322b16450284a04d6bb48d1198f54"}}