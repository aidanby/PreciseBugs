{"buggy_code": ["<?php\n/**\n * Implementation of BP_Component\n *\n * @since 1.2\n */\n\nif ( !defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( !class_exists( 'BP_Component' ) ) {\n\treturn;\n}\n\nclass BP_Docs_Component extends BP_Component {\n\tvar $groups_integration;\n\tvar $submitted_data = array();\n\n\tvar $post_type_name;\n\tvar $associated_tax_name;\n\tvar $access_tax_name;\n\n\tvar $slugtocheck = array();\n\tvar $query;\n\tvar $includes_url;\n\n\tvar $current_view;\n\tvar $slug_defined_in_wp_config = array();\n\n\t/**\n\t * Constructor\n\t *\n\t * @since 1.2\n\t */\n\tfunction __construct() {\n\t\tglobal $bp;\n\n\t\tparent::start(\n\t\t\t'bp_docs',\n\t\t\t__( 'BuddyPress Docs', 'bp-docs' ),\n\t\t\tBP_DOCS_INSTALL_PATH\n\t\t);\n\n\t\t$bp->active_components[$this->id] = '1';\n\n\t\t$this->setup_hooks();\n\t}\n\n\t/**\n\t * Sets up the hooks for the Component's custom methods\n\t *\n\t * @since 1.2\n\t */\n\tfunction setup_hooks() {\n\t\trequire( BP_DOCS_INCLUDES_PATH . 'integration-users.php' );\n\t\t$this->users_integration = new BP_Docs_Users_Integration;\n\n\t\tif ( bp_is_active( 'groups' ) ) {\n\t\t\trequire( BP_DOCS_INCLUDES_PATH . 'integration-groups.php' );\n\t\t\t$this->groups_integration = new BP_Docs_Groups_Integration;\n\t\t}\n\n\t\tif ( bp_is_active( 'activity' ) ) {\n\t\t\trequire( BP_DOCS_INCLUDES_PATH . 'activity.php' );\n\t\t}\n\n\t\tadd_action( 'bp_actions', array( &$this, 'catch_page_load' ), 1 );\n\n\t\t$this->attachments = new BP_Docs_Attachments();\n//\t\tadd_action( 'wp', array( $this, 'setup_attachments' ), 1 );\n\n\t\t// Get submitted form data out of the cookie\n\t\tadd_action( 'bp_actions', array( $this, 'submitted_form_data' ) );\n\n\t\t/**\n\t\t * Methods related to comment behavior\n\t\t */\n\n\t\t// Redirect to the correct place after a comment\n\t\tadd_action( 'comment_post_redirect', array( &$this, 'comment_post_redirect' ), 99, 2 );\n\n\t\t// Doc comments are always from trusted members (for the moment), so approve them\n\t\tadd_action( 'pre_comment_approved', array( $this, 'approve_doc_comments' ), 999, 2 );\n\n\t\t// Filter the location of the comments template to allow it to be included with\n\t\t// the plugin\n\t\tadd_filter( 'comments_template', array( $this, 'comments_template' ) );\n\n\t\tadd_filter( 'post_type_link', array( &$this, 'filter_permalinks' ), 10, 4 );\n\n\t\t// Keep comment notifications from being sent\n\t\tadd_filter( 'comment_post', array( $this, 'check_comment_type' ) );\n\n\t\t// Force comments_open to obey Doc-specific settings.\n\t\tadd_filter( 'comments_open', array( $this, 'comments_open' ), 10, 2 );\n\n\t\t// Add the Search filter markup\n\t\tadd_filter( 'bp_docs_filter_types', array( $this, 'filter_type' ) );\n\t\tadd_filter( 'bp_docs_filter_sections', array( $this, 'filter_markup' ) );\n\n\t\t// Determine whether the directory view is filtered by a keyword search.\n\t\tadd_filter( 'bp_docs_is_directory_view_filtered', array( $this, 'is_directory_view_filtered' ), 10, 2 );\n\n\t\t/**\n\t\t * MISC\n\t\t */\n\n\t\tadd_filter( 'bp_core_get_directory_page_ids', array( $this, 'remove_bp_page' ) );\n\n\t\t// Respect $activities_template->disable_blogforum_replies\n\t\tadd_filter( 'bp_activity_can_comment',\tarray( $this, 'activity_can_comment'\t) );\n\n\t\t// Add body class\n\t\tadd_filter( 'bp_get_the_body_class', array( $this, 'body_class' ) );\n\n\t\t// Global directory tags\n\t\tadd_filter( 'bp_docs_taxonomy_get_item_terms', array( $this, 'get_item_terms' ) );\n\n\t\tadd_action( 'bp_docs_init',             array( $this, 'set_includes_url' \t) );\n\t\tadd_action( 'wp_enqueue_scripts',       array( $this, 'enqueue_scripts' \t) );\n\t\tadd_action( 'wp_print_styles',          array( $this, 'enqueue_styles' \t\t) );\n\n\t\t// Set the \"last directory viewed\" cookie when viewing the main docs directory.\n\t\tadd_action( 'bp_actions', array( $this, 'set_directory_cookie' ) );\n\n\t\t// Add the parent and child theme names to the body class when on a BP Docs page.\n\t\tadd_filter( 'body_class', array( $this, 'filter_body_class' ) );\n\t}\n\n\t/**\n\t * Implementation of BP_Component::setup_globals()\n\t *\n\t * Creates globals required by BP_Component.\n\t * Registers post_type and taxonomy names in component global.\n\t * Sets up the 'slugstocheck', which are used when enqueuing styles and scripts.\n\t *\n\t * @since 1.2\n\t * @see BP_Docs_Component::enqueue_scripts()\n\t * @see BP_Docs_Component::enqueue_styles()\n\t */\n\tfunction setup_globals( $args = array() ) {\n\t\tglobal $bp_docs;\n\n\t\t// Set up the $globals array to be passed along to parent::setup_globals()\n\t\t$globals = array(\n\t\t\t'slug'                  => bp_docs_get_docs_slug(),\n\t\t\t'root_slug'             => isset( $bp->pages->{$this->id}->slug ) ? $bp->pages->{$this->id}->slug : bp_docs_get_docs_slug(),\n\t\t\t'has_directory'         => false, // Set to false if not required\n\t\t\t'notification_callback' => 'bp_docs_format_notifications',\n\t\t\t'search_string'         => __( 'Search Docs...', 'bp-docs' ),\n\t\t);\n\n\t\t// Let BP_Component::setup_globals() do its work.\n\t\tparent::setup_globals( $globals );\n\n\t\t// Stash tax and post type names in the $bp global for use in template tags\n\t\t$this->post_type_name\t\t= $bp_docs->post_type_name;\n\t\t$this->associated_item_tax_name = $bp_docs->associated_item_tax_name;\n\t\t$this->access_tax_name          = $bp_docs->access_tax_name;\n\n\t\t// This info is loaded here because it needs to happen after BP core globals are\n\t\t// set up\n\t\t$this->slugstocheck \t= bp_action_variables() ? bp_action_variables() : array();\n\t\t$this->slugstocheck[] \t= bp_current_component();\n\t\t$this->slugstocheck[] \t= bp_current_action();\n\n\t\t$this->set_current_item_type();\n\t\t$this->set_current_view();\n\t}\n\n\t/**\n\t * Sets up Docs menu under My Account toolbar\n\t *\n\t * @since 1.3\n\t */\n\tpublic function setup_admin_bar( $wp_admin_nav = array() ) {\n\t\tglobal $bp;\n\n\t\t$wp_admin_nav = array();\n\n\t\tif ( is_user_logged_in() ) {\n\n\t\t\t$title = bp_docs_get_user_tab_name();\n\n\t\t\t// Add the \"My Account\" sub menus\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => $bp->my_account_menu_id,\n\t\t\t\t'id'     => 'my-account-' . $this->id,\n\t\t\t\t'title'  => $title,\n\t\t\t\t'href'   => bp_docs_get_mydocs_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-started',\n\t\t\t\t'title'  => __( 'Started By Me', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_mydocs_started_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-edited',\n\t\t\t\t'title'  => __( 'Edited By Me', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_mydocs_edited_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-create',\n\t\t\t\t'title'  => __( 'Create New Doc', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_create_link(),\n\t\t\t);\n\n\t\t}\n\n\t\tparent::setup_admin_bar( $wp_admin_nav );\n\t}\n\n\t/**\n\t * Get previously submitted form data out of the cookie, and stash.\n\t *\n\t * @since 1.8\n\t */\n\tpublic function submitted_form_data() {\n\t\tif ( isset( $_COOKIE['bp-docs-submit-data'] ) ) {\n\t\t\t$this->submitted_data = json_decode( stripslashes( $_COOKIE['bp-docs-submit-data'] ) );\n\t\t\tsetcookie( 'bp-docs-submit-data', '', time() - 24*60*60, '/' );\n\t\t}\n\t}\n\n\t/**\n\t * In Docs 1.2 through 1.2.2, there was an error in which Docs registered\n\t * a bp-pages entry. This fixes the error\n\t *\n\t * @since 1.2.3\n\t */\n\tfunction remove_bp_page( $pages ) {\n\t\tif ( isset( $pages['bp_docs'] ) ) {\n\t\t\tunset( $pages['bp_docs']);\n\t\t\tbp_update_option( 'bp-pages', $pages );\n\t\t}\n\n\t\treturn $pages;\n\t}\n\n\t/**\n\t * Gets the item type of the item you're looking at - e.g 'group', 'user'.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @return str $view The current item type\n\t */\n\tfunction set_current_item_type() {\n\t\tglobal $bp;\n\n\t\t$type = '';\n\n\t\tif ( bp_is_user() ) {\n\t\t\t$type = 'user';\n\t\t}\n\n\t\t$type = apply_filters( 'bp_docs_get_item_type', $type, $this );\n\n\t\t$this->item_type = $type;\n\t}\n\n\t/**\n\t * Gets the current view, based on the page you're looking at.\n\t *\n\t * Filter 'bp_docs_get_current_view' to extend to different components.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $item_type Defaults to the object's item type\n\t * @return str $view The current view. Core values: edit, single, list, category\n\t */\n\tfunction set_current_view( $item_type = false ) {\n\t\tglobal $bp;\n\n\t\t$view = '';\n\n\t\tif ( !$item_type )\n\t\t\t$item_type = $this->item_type;\n\n\t\t$view = apply_filters( 'bp_docs_get_current_view', $view, $item_type );\n\n\t\t$this->current_view = $view;\n\t}\n\n\t/**\n\t * Creates component navigation (Member > Docs)\n\t *\n\t * @since 1.2\n\t * @todo Make the 'Docs' label customizable by the admin\n\t */\n\tfunction setup_nav( $main_nav = array(), $sub_nav = array() ) {\n\n\t\t$main_nav = array(\n\t\t\t'name' \t\t      => bp_docs_get_user_tab_name(),\n\n\t\t\t// Disabled count for now. See https://github.com/boonebgorges/buddypress-docs/issues/261\n\t\t\t//'name' \t\t      => sprintf( __( 'Docs <span>%d</span>', 'bp-docs' ), bp_docs_get_doc_count( bp_displayed_user_id(), 'user' ) ),\n\t\t\t'slug' \t\t      => bp_docs_get_docs_slug(),\n\t\t\t'position' \t      => 80,\n\t\t\t'screen_function'     => array( &$this, 'template_loader' ),\n\t\t\t'default_subnav_slug' => BP_DOCS_STARTED_SLUG\n\t\t);\n\n\t\t$parent_url = trailingslashit( bp_displayed_user_domain() . bp_docs_get_docs_slug() );\n\n\t\t$mydocs_label = bp_is_my_profile() ? __( 'My Docs ', 'bp-docs' ) : sprintf( __( '%s&#8217;s Docs', 'bp-docs' ), bp_get_user_firstname( bp_get_displayed_user_fullname() ) );\n\n\t\t$sub_nav[] = array(\n\t\t\t'name'            => bp_is_my_profile() ? __( 'Started By Me', 'bp-docs' ) : sprintf( __( 'Started By %s', 'bp-docs' ), bp_get_user_firstname() ),\n\t\t\t'slug'            => BP_DOCS_STARTED_SLUG,\n\t\t\t'parent_url'      => $parent_url,\n\t\t\t'parent_slug'     => bp_docs_get_docs_slug(),\n\t\t\t'screen_function' => array( &$this, 'template_loader' ),\n\t\t\t'position'        => 10\n\t\t);\n\n\t\t$sub_nav[] = array(\n\t\t\t'name'            => bp_is_my_profile() ? __( 'Edited By Me', 'bp-docs' ) : sprintf( __( 'Edited By %s', 'bp-docs' ), bp_get_user_firstname() ),\n\t\t\t'slug'            => BP_DOCS_EDITED_SLUG,\n\t\t\t'parent_url'      => $parent_url,\n\t\t\t'parent_slug'     => bp_docs_get_docs_slug(),\n\t\t\t'screen_function' => array( &$this, 'template_loader' ),\n\t\t\t'position'        => 20,\n\t\t);\n\n\t\tparent::setup_nav( $main_nav, $sub_nav );\n\t}\n\n\t/**\n\t * Utility function for loading component template and hooking content\n\t *\n\t * @since 1.2\n\t * @see self::setup_nav()\n\t */\n\tfunction template_loader() {\n\t\tadd_action( 'bp_template_content', array( &$this, 'select_template' ) );\n\t\tbp_core_load_template( 'members/single/plugins' );\n\t}\n\n\t/**\n\t * Utility function for selecting the correct Docs template to be loaded in the component\n\t *\n\t * At the moment, this only loads a single template. Logic could be\n\t * put here in the future in case more than one template needs to be\n\t * displayable on the component page\n\t *\n\t * @since 1.2\n\t */\n\tfunction select_template() {\n\t\t$template = 'docs-loop.php';\n\t\tinclude bp_docs_locate_template( apply_filters( 'bp_docs_select_template', $template ) );\n\t}\n\n\t/**\n\t * Loads the Docs query.\n\t *\n\t * We do this in order to have some of the info about the current doc throughout the\n\t * loading process\n\t *\n\t * @since 1.0-beta\n\t * @deprecated No longer used since 1.2\n\t */\n\tfunction do_query() {\n\t\t_deprecated_function( __METHOD__, '1.2' );\n\t}\n\n\t/**\n\t * Catches page loads, determines what to do, and sends users on their merry way\n\t *\n\t * @since 1.0-beta\n\t * @todo This needs a ton of cleanup\n\t */\n\tfunction catch_page_load() {\n\t\tglobal $bp;\n\n\t\tif ( !empty( $_POST['doc-edit-submit'] ) ) {\n\n\t\t\tcheck_admin_referer( 'bp_docs_save' );\n\n\t\t\t$this_doc = new BP_Docs_Query;\n\t\t\t$result = $this_doc->save();\n\n\t\t\tbp_core_add_message( $result['message'], $result['message_type'] );\n\t\t\tbp_core_redirect( trailingslashit( $result['redirect_url'] ) );\n\t\t}\n\n\t\tif ( !empty( $_POST['docs-filter-submit'] ) ) {\n\t\t\t$this->handle_filters();\n\t\t}\n\n\t\t// If this is the edit screen, ensure that the user can edit the\n\t\t// doc before querying, and redirect if necessary\n\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\tif ( current_user_can( 'bp_docs_edit' ) ) {\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t// The user can edit, so we check for edit locks\n\t\t\t\t// Because we're not using WP autosave at the moment, ensure that\n\t\t\t\t// the lock interval always returns as in process\n\t\t\t\tadd_filter( 'wp_check_post_lock_window', create_function( false, 'return time();' ) );\n\n\t\t\t\tif ( $doc ) {\n\t\t\t\t\t$lock = bp_docs_check_post_lock( $doc->ID );\n\n\t\t\t\t\tif ( $lock ) {\n\t\t\t\t\t\tbp_core_add_message( sprintf( __( 'This doc is currently being edited by %s. To prevent overwrites, you cannot edit until that user has finished. Please try again in a few minutes.', 'bp-docs' ), bp_core_get_user_displayname( $lock ) ), 'error' );\n\n\t\t\t\t\t\t// Redirect back to the non-edit view of this document\n\t\t\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\t\t\tbp_core_redirect( $group_permalink . $bp->bp_docs->slug . '/' . $doc_slug );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() ) {\n\t\t\t\t\tbp_core_no_access();\n\t\t\t\t}\n\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to edit the doc.', 'bp-docs' ), 'error' );\n\n\t\t\t\t// Redirect back to the non-edit view of this document\n\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\tif ( bp_docs_is_doc_create() ) {\n\t\t\tif ( ! current_user_can( 'bp_docs_create' ) ) {\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() )\n\t\t\t\t\tbp_core_no_access();\n\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to create a Doc in this group.', 'bp-docs' ), 'error' );\n\n\t\t\t\t$group_permalink = bp_get_group_permalink( $bp->groups->current_group );\n\n\t\t\t\t// Redirect back to the Doc list view\n\t\t\t\tbp_core_redirect( $group_permalink . $bp->bp_docs->slug . '/' );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\tif ( !empty( $bp->bp_docs->current_view ) && 'history' == $bp->bp_docs->current_view ) {\n\t\t\tif ( ! current_user_can( 'bp_docs_view_history' ) ) {\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() )\n\t\t\t\t\tbp_core_no_access();\n\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to view this Doc\\'s history.', 'bp-docs' ), 'error' );\n\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t$redirect = bp_docs_get_doc_link( $doc->ID );\n\n\t\t\t\t// Redirect back to the Doc list view\n\t\t\t\tbp_core_redirect( $redirect );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t// Cancel edit lock\n\t\tif ( !empty( $_GET['bpd_action'] ) && $_GET['bpd_action'] == 'cancel_edit_lock' ) {\n\t\t\t// Check the nonce\n\t\t\tcheck_admin_referer( 'bp_docs_cancel_edit_lock' );\n\n\t\t\t// Todo: make this part of the perms system\n\t\t\tif ( is_super_admin() || bp_group_is_admin() ) {\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t// Todo: get this into a proper method as well, blech\n\t\t\t\tdelete_post_meta( $doc->ID, '_bp_docs_last_pinged' );\n\n\t\t\t\tbp_core_add_message( __( 'Lock successfully removed', 'bp-docs' ) );\n\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t// Cancel edit\n\t\t// Have to have a catcher for this so the edit lock can be removed\n\t\tif ( !empty( $_GET['bpd_action'] ) && $_GET['bpd_action'] == 'cancel_edit' ) {\n\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t// Todo: get this into a proper method as well, blech\n\t\t\tdelete_post_meta( $doc->ID, '_bp_docs_last_pinged' );\n\n\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\tdie();\n\t\t}\n\n\t\t// Todo: get this into a proper method\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET['delete'] ) ) {\n\n\t\t\tcheck_admin_referer( 'bp_docs_delete' );\n\n\t\t\tif ( current_user_can( 'bp_docs_manage' ) ) {\n\t\t\t\t$force_delete = false;\n\t\t\t\tif ( ! empty( $_GET['force_delete'] ) ) {\n\t\t\t\t\t$force_delete = true;\n\t\t\t\t}\n\n\t\t\t\t$delete_doc_id = get_queried_object_id();\n\n\t\t\t\tif ( bp_docs_trash_doc( $delete_doc_id, $force_delete ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully deleted!', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not delete doc.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to delete that doc.', 'bp-docs' ), 'error' );\n\t\t\t}\n\n\t\t\t// Send the user back to the most recently viewed directory if possible.\n\t\t\tif ( isset( $_COOKIE[ 'bp-docs-last-docs-directory' ] ) && filter_var( $_COOKIE[ 'bp-docs-last-docs-directory' ], FILTER_VALIDATE_URL) ) {\n\t\t\t\t$delete_redirect = $_COOKIE[ 'bp-docs-last-docs-directory' ];\n\t\t\t} else {\n\t\t\t\t$delete_redirect = home_url( bp_docs_get_docs_slug() );\n\t\t\t}\n\n\t\t\tbp_core_redirect( $delete_redirect );\n\t\t\tdie();\n\t\t}\n\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET['untrash'] ) && ! empty( $_GET['doc_id'] ) ) {\n\t\t\tcheck_admin_referer( 'bp_docs_untrash' );\n\n\t\t\t$untrash_doc_id = absint( $_GET['doc_id'] );\n\n\t\t\tif ( current_user_can( 'bp_docs_manage', $untrash_doc_id ) ) {\n\t\t\t\tif ( bp_docs_untrash_doc( $untrash_doc_id ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully removed from Trash!', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not remove Doc from Trash.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to remove that Doc from the Trash.', 'bp-docs' ), 'error' );\n\t\t\t}\n\n\t\t\tbp_core_redirect( bp_docs_get_doc_link( $untrash_doc_id ) );\n\t\t\tdie();\n\t\t}\n\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET[ BP_DOCS_UNLINK_FROM_GROUP_SLUG ] ) && ! empty( $_GET['doc_id'] ) && ! empty( $_GET['group_id'] ) ) {\n\t\t\tcheck_admin_referer( 'bp_docs_unlink_from_group' );\n\n\t\t\t$unlink_doc_id = absint( $_GET['doc_id'] );\n\t\t\t$unlink_group_id = absint( $_GET['group_id'] );\n\n\t\t\tif ( current_user_can( 'bp_docs_dissociate_from_group', $unlink_group_id ) ) {\n\t\t\t\tif ( bp_docs_unlink_from_group( $unlink_doc_id, $unlink_group_id ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully removed from the group', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not remove Doc from the group.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to remove that Doc from this group.', 'bp-docs' ), 'error' );\n\t\t\t}\n\t\t\tbp_core_redirect( bp_get_group_permalink( groups_get_group( array( 'group_id' => $unlink_group_id ) ) ) . $bp->bp_docs->slug . '/' );\n\t\t\tdie();\n\t\t}\n\t}\n\n\t/**\n\t * METHODS RELATED TO DOC COMMENTS\n\t */\n\n\t/**\n\t * Approve Doc comments as necessary.\n\t *\n\t * Docs handles its own comment permissions, so we override WP's value\n\t *\n\t * @since 1.3.3\n\t * @param string $approved\n\t * @param array $commentdata\n\t * @return string $approved\n\t */\n\tpublic function approve_doc_comments( $approved, $commentdata ) {\n\t\t$post = get_post( $commentdata['comment_post_ID'] );\n\t\tif ( bp_docs_get_post_type_name() === $post->post_type ) {\n\t\t\tif ( bp_docs_user_can( 'post_comments', bp_loggedin_user_id(), $post->ID ) ) {\n\t\t\t\t$approved = 1;\n\t\t\t} else {\n\t\t\t\t$approved = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn $approved;\n\t}\n\n\t/**\n\t * Filters the comment_post_direct URL so that the user gets sent back to the true\n\t * comment URL after posting\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $location The original location, created by WP\n\t * @param obj $comment The new comment object\n\t * @return str $location The correct location\n\t */\n\tfunction comment_post_redirect( $location, $comment ) {\n\t\tglobal $bp;\n\n\t\t// Check to see whether this is a BP Doc\n\t\t$post = get_post( $comment->comment_post_ID );\n\n\t\tif ( $bp->bp_docs->post_type_name != $post->post_type )\n\t\t\treturn $location;\n\n\t\t$location = bp_docs_get_doc_link( $comment->comment_post_ID ) . '#comment-' . $comment->comment_ID;\n\n\t\treturn $location;\n\t}\n\n\n\t/**\n\t * Posts an activity item when a comment is posted to a doc\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param obj $comment_id The id of the comment that's just been saved.\n\t * @return int $activity_id The id number of the activity created\n\t */\n\tfunction post_comment_activity( $comment_id ) {\n\t\treturn bp_docs_post_comment_activity( $comment_id );\n\t}\n\n\t/**\n\t * Filter the location of the comments.php template\n\t *\n\t * This function uses a little trick to make sure that the comments.php file can be\n\t * overridden by child themes, yet still has a fallback in the plugin folder.\n\t *\n\t * If you find this annoying, I have provided a filter for your convenience.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $path The path (STYLESHEETPATH . $file) from comments_template()\n\t * @return str The path of the preferred template\n\t */\n\tfunction comments_template( $path ) {\n\t\tif ( ! bp_docs_is_existing_doc() )\n\t\t\treturn $path;\n\n\t\t$original_path = $path;\n\n\t\tif ( ! $path = locate_template( 'docs/single/comments.php' ) ) {\n\t\t\t$path = BP_DOCS_INSTALL_PATH . 'includes/templates/docs/single/comments.php';\n\t\t}\n\n\t\treturn apply_filters( 'bp_docs_comment_template_path', $path, $original_path );\n\t}\n\n\t/**\n\t * Prevents comment notification emails from being sent on BP Docs comments\n\t *\n\t * For the moment, I'm shutting off WP's native email notifications on BP Docs comments.\n\t * They are better handled as part of the BP activity stream. This maneuver requires a\n\t * trick: when a comment is posted on a BP Doc type post, I hijack the get_option() call\n\t * for comments_notify and return 0 (rather than false, which would not stop the real\n\t * get_option operation from running).\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param int $comment_id ID number of the new comment being posted\n\t */\n\tfunction check_comment_type( $comment_id ) {\n\t\tglobal $bp;\n\n\t\t$comment = get_comment( $comment_id );\n\t\t$post = get_post( $comment->comment_post_ID );\n\n\t\tif ( $bp->bp_docs->post_type_name == $post->post_type ) {\n\t\t\tadd_filter( 'pre_option_comments_notify', create_function( false, 'return 0;' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Force comments_open status to obey Doc-specific settings.\n\t *\n\t * @since 1.8.6\n\t *\n\t * @param bool $open    Whether the current post is open for comments.\n\t * @param int  $post_id ID of the post.\n\t * @return bool\n\t */\n\tpublic function comments_open( $open, $post_id ) {\n\t\t$post = get_post( $post_id );\n\t\tif ( ! ( $post instanceof WP_Post ) || bp_docs_get_post_type_name() !== $post->post_type ) {\n\t\t\treturn $open;\n\t\t}\n\n\t\treturn current_user_can( 'bp_docs_post_comments', $post_id );\n\t}\n\n\t/**\n\t * Adds BP Docs options to activity filter dropdowns\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction activity_filter_options() {\n\t\treturn bp_docs_activity_filter_options();\n\t}\n\n\t/**\n\t * Posts an activity item on doc save\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param obj $query The query object created in BP_Docs_Query and passed to the\n\t *     bp_docs_doc_saved filter\n\t * @return int $activity_id The id number of the activity created\n\t */\n\tfunction post_activity( $query ) {\n\t\treturn bp_docs_post_activity( $query );\n\t}\n\n\t/**\n\t * Delete activity associated with a Doc\n\t *\n\t * Run on transition_post_status, to catch deletes from all locations\n\t *\n\t * @since 1.3\n\t *\n\t * @param string $new_status\n\t * @param string $old_status\n\t * @param obj WP_Post object\n\t */\n\tpublic function delete_doc_activity( $new_status, $old_status, $post ) {\n\t\treturn bp_docs_delete_doc_activity( $new_status, $old_status, $post );\n\t}\n\n\t/**\n\t * MISCELLANEOUS\n\t */\n\n\t/**\n\t * Display the proper permalink for Docs\n\t *\n\t * This function filters 'post_type_link', which in turn powers get_permalink() and related\n\t * functions.\n\t *\n\t * BuddyPress Docs has a completely flat architecture for URLs, where\n\t * parent slugs never appear in the URL (as they do in the case of WP\n\t * pages). So we reconstruct the link completely.\n\t *\n\t * @since 1.1.8\n\t *\n\t * @param str $link The permalink\n\t * @param obj $post The post object\n\t * @param bool $leavename\n\t * @param bool $sample See get_post_permalink() for an explanation of these two params\n\t * @return str $link The filtered permalink\n\t */\n\tfunction filter_permalinks( $link, $post, $leavename, $sample ) {\n\t\tif ( bp_docs_get_post_type_name() == $post->post_type ) {\n\t\t\t$link = trailingslashit( bp_docs_get_archive_link() . $post->post_name );\n\t\t}\n\n\t\treturn html_entity_decode( $link );\n\t}\n\n\t/**\n\t * Repsect disable_blogforum_replies\n\t *\n\t * BuddyPress allows you to disable activity commenting on items related to blog posts or\n\t * to forums, content types that have their own reply/comment mechanisms. Since BuddyPress\n\t * Docs are similar in this respect, they should respect this setting as well.\n\t *\n\t * In the future, I may add a separate toggle for this. I may also build a filter that\n\t * redirects the Comment/Reply link so that it goes to the Doc's Comment section, or so that\n\t * this setting reflects the individual Doc's can_comment settings. (For now, this would\n\t * require too many additional queries.)\n\t *\n\t * This function filters bp_activity_can_comment, which was introduced in BP 1.5. It is\n\t * therefore not backward compatible with BP < 1.5.\n\t *\n\t * @since 1.1.17\n\t *\n\t * @param bool $can_comment Whether the current user can comment. Comes from\n\t *             bp_activity_can_comment()\n\t * @return bool $can_comment\n\t */\n\tfunction activity_can_comment( $can_comment ) {\n\t\tglobal $activities_template;\n\n\t\tif ( 'bp_doc_created' == bp_get_activity_action_name() ||\n\t\t     'bp_doc_edited' == bp_get_activity_action_name() ||\n\t\t     'bp_doc_comment' == bp_get_activity_action_name()\n\t\t   ) {\n\t\t   \t// Flip the 'disable'\n\t\t\t$can_comment = !(bool)$activities_template->disable_blogforum_replies;\n\t\t}\n\n\t\treturn apply_filters( 'bp_docs_activity_can_comment', $can_comment );\n\t}\n\n\t/**\n\t * Handles doc filters from a form post and translates to $_GET arguments before redirect\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction handle_filters() {\n\t\t$redirect_url = apply_filters( 'bp_docs_handle_filters', bp_docs_get_item_docs_link() );\n\n\t\tbp_core_redirect( $redirect_url );\n\t}\n\n\t/**\n\t * Sets the includes URL for use when loading scripts and styles\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction set_includes_url() {\n\t\t$this->includes_url = plugins_url() . '/' . BP_DOCS_PLUGIN_SLUG . '/includes/';\n\t}\n\n\t/**\n\t * Add a bp-docs class to bp-docs pages\n\t *\n\t * @since 1.3\n\t */\n\tfunction body_class( $classes ) {\n\t\tif ( bp_docs_is_docs_component() ) {\n\t\t\t$classes[] = 'bp-docs';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_trashed() ) {\n\t\t\t$classes[] = 'trashed-doc';\n\t\t}\n\n\t\tif ( wp_is_mobile() ) {\n\t\t\t$classes[] = 'mobile';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\t$classes[] = 'bp-docs-edit';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_create() ) {\n\t\t\t$classes[] = 'bp-docs-create';\n\t\t}\n\n\t\treturn array_unique( $classes );\n\t}\n\n\t/**\n\t * When on a global directory, get terms for the tag cloud\n\t *\n\t * @since 1.4\n\t */\n\tpublic function get_item_terms( $terms ) {\n\t\tglobal $wpdb, $bp;\n\n\t\t// Only on global directory and mygroups view\n\t\tif ( ! bp_docs_is_global_directory() && ! bp_docs_is_mygroups_directory() ) {\n\t\t\treturn $terms;\n\t\t}\n\n\t\t// Get list of docs the user has access to\n\t\t$item_ids = bp_docs_get_doc_ids_accessible_to_current_user();\n\n\t\t// Pass to wp_get_object_terms()\n\t\t$terms = wp_get_object_terms( $item_ids, array( $bp->bp_docs->docs_tag_tax_name ) );\n\n\t\t// Reformat\n\t\t$terms_array = array();\n\t\tforeach ( $terms as $t ) {\n\t\t\t$terms_array[ $t->slug ] = array(\n\t\t\t\t'count' => $t->count,\n\t\t\t\t'name' => $t->name,\n\t\t\t);\n\t\t}\n\n\t\tunset( $item_ids, $terms );\n\n\t\treturn $terms_array;\n\t}\n\n\tpublic static function filter_type( $types ) {\n\t\t$types[] = array(\n\t\t\t'slug' => 'search',\n\t\t\t'title' => __( 'Search', 'bp-docs' ),\n\t\t\t'query_arg' => 's',\n\t\t);\n\t\treturn $types;\n\t}\n\n\tpublic static function filter_markup() {\n\t\t$has_search = ! empty( $_GET['s'] );\n\t\t?>\n\t\t<div id=\"docs-filter-section-search\" class=\"docs-filter-section<?php if ( $has_search ) : ?> docs-filter-section-open<?php endif ?>\">\n\t\t\t<form action=\"\" method=\"get\">\n\t\t\t\t<input name=\"s\" value=\"<?php the_search_query() ?>\">\n\t\t\t\t<input name=\"search_submit\" type=\"submit\" value=\"<?php _e( 'Search', 'bp-docs' ) ?>\" />\n\t\t\t\t<?php do_action( 'bp_docs_directory_filter_search_form' ) ?>\n\t\t\t</form>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Determine whether the directory view is filtered by a keyword search.\n\t *\n\t * @since 1.9.0\n\t *\n\t * @param bool  $is_filtered Is the current directory view filtered?\n \t * @param array $exclude Array of filter types to ignore.\n\t *\n\t * @return bool $is_filtered\n\t */\n\tpublic function is_directory_view_filtered( $is_filtered, $exclude ) {\n\t\t// If this filter is excluded, stop now.\n\t\tif ( in_array( 's', $exclude ) ) {\n\t\t\treturn $is_filtered;\n\t\t}\n\n\t\tif ( ! empty( $_GET['s'] ) ) {\n\t\t\t$is_filtered = true;\n\t\t}\n\t    return $is_filtered;\n\t}\n\n\t/**\n\t * Loads JavaScript\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction enqueue_scripts() {\n\t\twp_register_script( 'bp-docs-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/bp-docs.js' ), array( 'jquery' ) );\n\n\t\t// This is for edit/create scripts\n\t\tif ( bp_docs_is_doc_edit()\n\t\t     ||\n\t\t     bp_docs_is_doc_create()\n\t\t     || ( !empty( $this->query->current_view )\n\t\t           &&\n\t\t           ( 'edit' == $this->query->current_view || 'create' == $this->query->current_view )\n\t\t        )\n\t\t   ) {\n\t\t\trequire_once( ABSPATH . '/wp-admin/includes/post.php' );\n\t\t\twp_enqueue_script( 'common' );\n\t\t\twp_enqueue_script( 'jquery-color' );\n\t\t\twp_enqueue_script( 'editor' );\n\t\t\twp_enqueue_script( 'utils' );\n\n\t\t\twp_register_script( 'bp-docs-idle-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/idle.js' ), array( 'jquery', 'bp-docs-js' ) );\n\t\t\twp_enqueue_script( 'bp-docs-idle-js' );\n\n\t\t\twp_register_script( 'jquery-colorbox', plugins_url( BP_DOCS_PLUGIN_SLUG . '/lib/js/colorbox/jquery.colorbox-min.js' ), array( 'jquery' ) );\n\t\t\twp_enqueue_script( 'jquery-colorbox' );\n\t\t\t// Edit mode requires bp-docs-js to be dependent on TinyMCE, so we must\n\t\t\t// reregister bp-docs-js with the correct dependencies\n\t\t\twp_deregister_script( 'bp-docs-js' );\n\t\t\twp_register_script( 'bp-docs-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/bp-docs.js' ), array( 'jquery', 'editor', 'heartbeat' ) );\n\n\t\t\twp_register_script( 'word-counter', site_url() . '/wp-admin/js/word-count.js', array( 'jquery' ) );\n\n\t\t\twp_enqueue_script( 'bp-docs-edit-validation', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/edit-validation.js' ), array( 'jquery', 'bp-docs-js' ) );\n\t\t}\n\n\t\t// Only load our JS on the right sorts of pages. Generous to account for\n\t\t// different item types\n\t\tif ( in_array( bp_docs_get_docs_slug(), $this->slugstocheck ) || bp_docs_is_single_doc() || bp_docs_is_global_directory() || bp_docs_is_mygroups_directory() || bp_docs_is_doc_create() ) {\n\t\t\twp_enqueue_script( 'bp-docs-js' );\n\t\t\twp_enqueue_script( 'comment-reply' );\n\n\t\t\t$strings = array(\n\t\t\t\t'upload_title' => __( 'Upload File', 'bp-docs' ),\n\t\t\t\t'upload_button' => __( 'OK', 'bp-docs' ),\n\t\t\t\t'still_working'\t=> __( 'Still working?', 'bp-docs' ),\n\t\t\t\t'and_x_more' => __( 'and %d more', 'bp-docs' ),\n\t\t\t\t'failed_submission' => ! empty( buddypress()->bp_docs->submitted_data ) ? 1 : 0,\n\t\t\t);\n\n\t\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\t\t$strings['pulse'] = bp_docs_heartbeat_pulse();\n\t\t\t}\n\t\t\twp_localize_script( 'bp-docs-js', 'bp_docs', $strings );\n\n\t\t\tdo_action( 'bp_docs_enqueue_scripts' );\n\t\t}\n\t}\n\n\t/**\n\t * Loads styles\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction enqueue_styles() {\n\t\tglobal $bp;\n\n\t\t// Load the main CSS only on the proper pages\n\t\tif ( in_array( bp_docs_get_docs_slug(), $this->slugstocheck ) || bp_docs_is_docs_component() ) {\n\t\t\twp_enqueue_style( 'bp-docs-css', $this->includes_url . 'css/screen.css' );\n\t\t}\n\n\t\tif ( bp_docs_is_doc_edit() || bp_docs_is_doc_create() ) {\n\t\t\twp_enqueue_style( 'bp-docs-edit-css', $this->includes_url . 'css/edit.css' );\n\t\t\twp_enqueue_style( 'thickbox' );\n\t\t}\n\t}\n\n\t/**\n\t * Renew the last directory cookie if the user is viewing the main docs library.\n\t *\n\t * @since 1.9.0\n\t */\n\tpublic function\tset_directory_cookie() {\n\t\tif ( bp_docs_is_global_directory() ) {\n\t\t\t@setcookie( 'bp-docs-last-docs-directory', home_url( $_SERVER['REQUEST_URI'] ), 0, '/' );\n\t\t}\n\t}\n\n\t/**\n\t * Add the parent and child theme names to the body class when on a BP Docs page.\n\t *\n\t * @since 1.9.0\n\t *\n\t * @param array $classes An array of body classes.\n\t */\n\tpublic function filter_body_class( $classes ) {\n\t\tif ( bp_docs_is_docs_component() ) {\n\t\t\t$classes[] = 'bp-docs-body-theme-' . get_stylesheet();\n\t\t\t$classes[] = 'bp-docs-body-theme-' . get_template();\n\t\t}\n\t\treturn $classes;\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Implementation of BP_Component\n *\n * @since 1.2\n */\n\nif ( !defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( !class_exists( 'BP_Component' ) ) {\n\treturn;\n}\n\nclass BP_Docs_Component extends BP_Component {\n\tvar $groups_integration;\n\tvar $submitted_data = array();\n\n\tvar $post_type_name;\n\tvar $associated_tax_name;\n\tvar $access_tax_name;\n\n\tvar $slugtocheck = array();\n\tvar $query;\n\tvar $includes_url;\n\n\tvar $current_view;\n\tvar $slug_defined_in_wp_config = array();\n\n\t/**\n\t * Constructor\n\t *\n\t * @since 1.2\n\t */\n\tfunction __construct() {\n\t\tglobal $bp;\n\n\t\tparent::start(\n\t\t\t'bp_docs',\n\t\t\t__( 'BuddyPress Docs', 'bp-docs' ),\n\t\t\tBP_DOCS_INSTALL_PATH\n\t\t);\n\n\t\t$bp->active_components[$this->id] = '1';\n\n\t\t$this->setup_hooks();\n\t}\n\n\t/**\n\t * Sets up the hooks for the Component's custom methods\n\t *\n\t * @since 1.2\n\t */\n\tfunction setup_hooks() {\n\t\trequire( BP_DOCS_INCLUDES_PATH . 'integration-users.php' );\n\t\t$this->users_integration = new BP_Docs_Users_Integration;\n\n\t\tif ( bp_is_active( 'groups' ) ) {\n\t\t\trequire( BP_DOCS_INCLUDES_PATH . 'integration-groups.php' );\n\t\t\t$this->groups_integration = new BP_Docs_Groups_Integration;\n\t\t}\n\n\t\tif ( bp_is_active( 'activity' ) ) {\n\t\t\trequire( BP_DOCS_INCLUDES_PATH . 'activity.php' );\n\t\t}\n\n\t\tadd_action( 'bp_actions', array( &$this, 'catch_page_load' ), 1 );\n\n\t\t$this->attachments = new BP_Docs_Attachments();\n//\t\tadd_action( 'wp', array( $this, 'setup_attachments' ), 1 );\n\n\t\t// Get submitted form data out of the cookie\n\t\tadd_action( 'bp_actions', array( $this, 'submitted_form_data' ) );\n\n\t\t/**\n\t\t * Methods related to comment behavior\n\t\t */\n\n\t\t// Redirect to the correct place after a comment\n\t\tadd_action( 'comment_post_redirect', array( &$this, 'comment_post_redirect' ), 99, 2 );\n\n\t\t// Doc comments are always from trusted members (for the moment), so approve them\n\t\tadd_action( 'pre_comment_approved', array( $this, 'approve_doc_comments' ), 999, 2 );\n\n\t\t// Filter the location of the comments template to allow it to be included with\n\t\t// the plugin\n\t\tadd_filter( 'comments_template', array( $this, 'comments_template' ) );\n\n\t\tadd_filter( 'post_type_link', array( &$this, 'filter_permalinks' ), 10, 4 );\n\n\t\t// Keep comment notifications from being sent\n\t\tadd_filter( 'comment_post', array( $this, 'check_comment_type' ) );\n\n\t\t// Force comments_open to obey Doc-specific settings.\n\t\tadd_filter( 'comments_open', array( $this, 'comments_open' ), 10, 2 );\n\n\t\t// Add the Search filter markup\n\t\tadd_filter( 'bp_docs_filter_types', array( $this, 'filter_type' ) );\n\t\tadd_filter( 'bp_docs_filter_sections', array( $this, 'filter_markup' ) );\n\n\t\t// Determine whether the directory view is filtered by a keyword search.\n\t\tadd_filter( 'bp_docs_is_directory_view_filtered', array( $this, 'is_directory_view_filtered' ), 10, 2 );\n\n\t\t/**\n\t\t * MISC\n\t\t */\n\n\t\tadd_filter( 'bp_core_get_directory_page_ids', array( $this, 'remove_bp_page' ) );\n\n\t\t// Respect $activities_template->disable_blogforum_replies\n\t\tadd_filter( 'bp_activity_can_comment',\tarray( $this, 'activity_can_comment'\t) );\n\n\t\t// Add body class\n\t\tadd_filter( 'bp_get_the_body_class', array( $this, 'body_class' ) );\n\n\t\t// Global directory tags\n\t\tadd_filter( 'bp_docs_taxonomy_get_item_terms', array( $this, 'get_item_terms' ) );\n\n\t\tadd_action( 'bp_docs_init',             array( $this, 'set_includes_url' \t) );\n\t\tadd_action( 'wp_enqueue_scripts',       array( $this, 'enqueue_scripts' \t) );\n\t\tadd_action( 'wp_print_styles',          array( $this, 'enqueue_styles' \t\t) );\n\n\t\t// Set the \"last directory viewed\" cookie when viewing the main docs directory.\n\t\tadd_action( 'bp_actions', array( $this, 'set_directory_cookie' ) );\n\n\t\t// Add the parent and child theme names to the body class when on a BP Docs page.\n\t\tadd_filter( 'body_class', array( $this, 'filter_body_class' ) );\n\t}\n\n\t/**\n\t * Implementation of BP_Component::setup_globals()\n\t *\n\t * Creates globals required by BP_Component.\n\t * Registers post_type and taxonomy names in component global.\n\t * Sets up the 'slugstocheck', which are used when enqueuing styles and scripts.\n\t *\n\t * @since 1.2\n\t * @see BP_Docs_Component::enqueue_scripts()\n\t * @see BP_Docs_Component::enqueue_styles()\n\t */\n\tfunction setup_globals( $args = array() ) {\n\t\tglobal $bp_docs;\n\n\t\t// Set up the $globals array to be passed along to parent::setup_globals()\n\t\t$globals = array(\n\t\t\t'slug'                  => bp_docs_get_docs_slug(),\n\t\t\t'root_slug'             => isset( $bp->pages->{$this->id}->slug ) ? $bp->pages->{$this->id}->slug : bp_docs_get_docs_slug(),\n\t\t\t'has_directory'         => false, // Set to false if not required\n\t\t\t'notification_callback' => 'bp_docs_format_notifications',\n\t\t\t'search_string'         => __( 'Search Docs...', 'bp-docs' ),\n\t\t);\n\n\t\t// Let BP_Component::setup_globals() do its work.\n\t\tparent::setup_globals( $globals );\n\n\t\t// Stash tax and post type names in the $bp global for use in template tags\n\t\t$this->post_type_name\t\t= $bp_docs->post_type_name;\n\t\t$this->associated_item_tax_name = $bp_docs->associated_item_tax_name;\n\t\t$this->access_tax_name          = $bp_docs->access_tax_name;\n\n\t\t// This info is loaded here because it needs to happen after BP core globals are\n\t\t// set up\n\t\t$this->slugstocheck \t= bp_action_variables() ? bp_action_variables() : array();\n\t\t$this->slugstocheck[] \t= bp_current_component();\n\t\t$this->slugstocheck[] \t= bp_current_action();\n\n\t\t$this->set_current_item_type();\n\t\t$this->set_current_view();\n\t}\n\n\t/**\n\t * Sets up Docs menu under My Account toolbar\n\t *\n\t * @since 1.3\n\t */\n\tpublic function setup_admin_bar( $wp_admin_nav = array() ) {\n\t\tglobal $bp;\n\n\t\t$wp_admin_nav = array();\n\n\t\tif ( is_user_logged_in() ) {\n\n\t\t\t$title = bp_docs_get_user_tab_name();\n\n\t\t\t// Add the \"My Account\" sub menus\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => $bp->my_account_menu_id,\n\t\t\t\t'id'     => 'my-account-' . $this->id,\n\t\t\t\t'title'  => $title,\n\t\t\t\t'href'   => bp_docs_get_mydocs_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-started',\n\t\t\t\t'title'  => __( 'Started By Me', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_mydocs_started_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-edited',\n\t\t\t\t'title'  => __( 'Edited By Me', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_mydocs_edited_link(),\n\t\t\t);\n\n\t\t\t$wp_admin_nav[] = array(\n\t\t\t\t'parent' => 'my-account-' . $this->id,\n\t\t\t\t'id'     => 'my-account-' . $this->id . '-create',\n\t\t\t\t'title'  => __( 'Create New Doc', 'bp-docs' ),\n\t\t\t\t'href'   => bp_docs_get_create_link(),\n\t\t\t);\n\n\t\t}\n\n\t\tparent::setup_admin_bar( $wp_admin_nav );\n\t}\n\n\t/**\n\t * Get previously submitted form data out of the cookie, and stash.\n\t *\n\t * @since 1.8\n\t */\n\tpublic function submitted_form_data() {\n\t\tif ( isset( $_COOKIE['bp-docs-submit-data'] ) ) {\n\t\t\t$this->submitted_data = json_decode( stripslashes( $_COOKIE['bp-docs-submit-data'] ) );\n\t\t\tsetcookie( 'bp-docs-submit-data', '', time() - 24*60*60, '/' );\n\t\t}\n\t}\n\n\t/**\n\t * In Docs 1.2 through 1.2.2, there was an error in which Docs registered\n\t * a bp-pages entry. This fixes the error\n\t *\n\t * @since 1.2.3\n\t */\n\tfunction remove_bp_page( $pages ) {\n\t\tif ( isset( $pages['bp_docs'] ) ) {\n\t\t\tunset( $pages['bp_docs']);\n\t\t\tbp_update_option( 'bp-pages', $pages );\n\t\t}\n\n\t\treturn $pages;\n\t}\n\n\t/**\n\t * Gets the item type of the item you're looking at - e.g 'group', 'user'.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @return str $view The current item type\n\t */\n\tfunction set_current_item_type() {\n\t\tglobal $bp;\n\n\t\t$type = '';\n\n\t\tif ( bp_is_user() ) {\n\t\t\t$type = 'user';\n\t\t}\n\n\t\t$type = apply_filters( 'bp_docs_get_item_type', $type, $this );\n\n\t\t$this->item_type = $type;\n\t}\n\n\t/**\n\t * Gets the current view, based on the page you're looking at.\n\t *\n\t * Filter 'bp_docs_get_current_view' to extend to different components.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $item_type Defaults to the object's item type\n\t * @return str $view The current view. Core values: edit, single, list, category\n\t */\n\tfunction set_current_view( $item_type = false ) {\n\t\tglobal $bp;\n\n\t\t$view = '';\n\n\t\tif ( !$item_type )\n\t\t\t$item_type = $this->item_type;\n\n\t\t$view = apply_filters( 'bp_docs_get_current_view', $view, $item_type );\n\n\t\t$this->current_view = $view;\n\t}\n\n\t/**\n\t * Creates component navigation (Member > Docs)\n\t *\n\t * @since 1.2\n\t * @todo Make the 'Docs' label customizable by the admin\n\t */\n\tfunction setup_nav( $main_nav = array(), $sub_nav = array() ) {\n\n\t\t$main_nav = array(\n\t\t\t'name' \t\t      => bp_docs_get_user_tab_name(),\n\n\t\t\t// Disabled count for now. See https://github.com/boonebgorges/buddypress-docs/issues/261\n\t\t\t//'name' \t\t      => sprintf( __( 'Docs <span>%d</span>', 'bp-docs' ), bp_docs_get_doc_count( bp_displayed_user_id(), 'user' ) ),\n\t\t\t'slug' \t\t      => bp_docs_get_docs_slug(),\n\t\t\t'position' \t      => 80,\n\t\t\t'screen_function'     => array( &$this, 'template_loader' ),\n\t\t\t'default_subnav_slug' => BP_DOCS_STARTED_SLUG\n\t\t);\n\n\t\t$parent_url = trailingslashit( bp_displayed_user_domain() . bp_docs_get_docs_slug() );\n\n\t\t$mydocs_label = bp_is_my_profile() ? __( 'My Docs ', 'bp-docs' ) : sprintf( __( '%s&#8217;s Docs', 'bp-docs' ), bp_get_user_firstname( bp_get_displayed_user_fullname() ) );\n\n\t\t$sub_nav[] = array(\n\t\t\t'name'            => bp_is_my_profile() ? __( 'Started By Me', 'bp-docs' ) : sprintf( __( 'Started By %s', 'bp-docs' ), bp_get_user_firstname() ),\n\t\t\t'slug'            => BP_DOCS_STARTED_SLUG,\n\t\t\t'parent_url'      => $parent_url,\n\t\t\t'parent_slug'     => bp_docs_get_docs_slug(),\n\t\t\t'screen_function' => array( &$this, 'template_loader' ),\n\t\t\t'position'        => 10\n\t\t);\n\n\t\t$sub_nav[] = array(\n\t\t\t'name'            => bp_is_my_profile() ? __( 'Edited By Me', 'bp-docs' ) : sprintf( __( 'Edited By %s', 'bp-docs' ), bp_get_user_firstname() ),\n\t\t\t'slug'            => BP_DOCS_EDITED_SLUG,\n\t\t\t'parent_url'      => $parent_url,\n\t\t\t'parent_slug'     => bp_docs_get_docs_slug(),\n\t\t\t'screen_function' => array( &$this, 'template_loader' ),\n\t\t\t'position'        => 20,\n\t\t);\n\n\t\tparent::setup_nav( $main_nav, $sub_nav );\n\t}\n\n\t/**\n\t * Utility function for loading component template and hooking content\n\t *\n\t * @since 1.2\n\t * @see self::setup_nav()\n\t */\n\tfunction template_loader() {\n\t\tadd_action( 'bp_template_content', array( &$this, 'select_template' ) );\n\t\tbp_core_load_template( 'members/single/plugins' );\n\t}\n\n\t/**\n\t * Utility function for selecting the correct Docs template to be loaded in the component\n\t *\n\t * At the moment, this only loads a single template. Logic could be\n\t * put here in the future in case more than one template needs to be\n\t * displayable on the component page\n\t *\n\t * @since 1.2\n\t */\n\tfunction select_template() {\n\t\t$template = 'docs-loop.php';\n\t\tinclude bp_docs_locate_template( apply_filters( 'bp_docs_select_template', $template ) );\n\t}\n\n\t/**\n\t * Loads the Docs query.\n\t *\n\t * We do this in order to have some of the info about the current doc throughout the\n\t * loading process\n\t *\n\t * @since 1.0-beta\n\t * @deprecated No longer used since 1.2\n\t */\n\tfunction do_query() {\n\t\t_deprecated_function( __METHOD__, '1.2' );\n\t}\n\n\t/**\n\t * Catches page loads, determines what to do, and sends users on their merry way\n\t *\n\t * @since 1.0-beta\n\t * @todo This needs a ton of cleanup\n\t */\n\tfunction catch_page_load() {\n\t\tglobal $bp;\n\n\t\tif ( !empty( $_POST['doc-edit-submit'] ) ) {\n\n\t\t\t// Existing Docs have a more specific permission check.\n\t\t\t$doc = bp_docs_get_current_doc();\n\t\t\tif ( $doc && ! current_user_can( 'bp_docs_edit', $doc->ID ) ) {\n\t\t\t\treturn;\n\t\t\t} elseif ( ! $doc && ! current_user_can( 'bp_docs_create' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcheck_admin_referer( 'bp_docs_save' );\n\n\t\t\t$this_doc = new BP_Docs_Query;\n\t\t\t$result = $this_doc->save();\n\n\t\t\tbp_core_add_message( $result['message'], $result['message_type'] );\n\t\t\tbp_core_redirect( trailingslashit( $result['redirect_url'] ) );\n\t\t}\n\n\t\tif ( !empty( $_POST['docs-filter-submit'] ) ) {\n\t\t\t$this->handle_filters();\n\t\t}\n\n\t\t// If this is the edit screen, ensure that the user can edit the\n\t\t// doc before querying, and redirect if necessary\n\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\tif ( current_user_can( 'bp_docs_edit' ) ) {\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t// The user can edit, so we check for edit locks\n\t\t\t\t// Because we're not using WP autosave at the moment, ensure that\n\t\t\t\t// the lock interval always returns as in process\n\t\t\t\tadd_filter( 'wp_check_post_lock_window', create_function( false, 'return time();' ) );\n\n\t\t\t\tif ( $doc ) {\n\t\t\t\t\t$lock = bp_docs_check_post_lock( $doc->ID );\n\n\t\t\t\t\tif ( $lock ) {\n\t\t\t\t\t\tbp_core_add_message( sprintf( __( 'This doc is currently being edited by %s. To prevent overwrites, you cannot edit until that user has finished. Please try again in a few minutes.', 'bp-docs' ), bp_core_get_user_displayname( $lock ) ), 'error' );\n\n\t\t\t\t\t\t// Redirect back to the non-edit view of this document\n\t\t\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\t\t\tbp_core_redirect( $group_permalink . $bp->bp_docs->slug . '/' . $doc_slug );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() ) {\n\t\t\t\t\tbp_core_no_access();\n\t\t\t\t}\n\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to edit the doc.', 'bp-docs' ), 'error' );\n\n\t\t\t\t// Redirect back to the non-edit view of this document\n\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\tif ( bp_docs_is_doc_create() ) {\n\t\t\tif ( ! current_user_can( 'bp_docs_create' ) ) {\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() )\n\t\t\t\t\tbp_core_no_access();\n\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to create a Doc in this group.', 'bp-docs' ), 'error' );\n\n\t\t\t\t$group_permalink = bp_get_group_permalink( $bp->groups->current_group );\n\n\t\t\t\t// Redirect back to the Doc list view\n\t\t\t\tbp_core_redirect( $group_permalink . $bp->bp_docs->slug . '/' );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\tif ( !empty( $bp->bp_docs->current_view ) && 'history' == $bp->bp_docs->current_view ) {\n\t\t\tif ( ! current_user_can( 'bp_docs_view_history' ) ) {\n\t\t\t\t// The user does not have edit permission. Redirect.\n\t\t\t\tif ( function_exists( 'bp_core_no_access' ) && !is_user_logged_in() )\n\t\t\t\t\tbp_core_no_access();\n\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to view this Doc\\'s history.', 'bp-docs' ), 'error' );\n\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t$redirect = bp_docs_get_doc_link( $doc->ID );\n\n\t\t\t\t// Redirect back to the Doc list view\n\t\t\t\tbp_core_redirect( $redirect );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t// Cancel edit lock\n\t\tif ( !empty( $_GET['bpd_action'] ) && $_GET['bpd_action'] == 'cancel_edit_lock' ) {\n\t\t\t// Check the nonce\n\t\t\tcheck_admin_referer( 'bp_docs_cancel_edit_lock' );\n\n\t\t\t// Todo: make this part of the perms system\n\t\t\tif ( is_super_admin() || bp_group_is_admin() ) {\n\t\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t\t// Todo: get this into a proper method as well, blech\n\t\t\t\tdelete_post_meta( $doc->ID, '_bp_docs_last_pinged' );\n\n\t\t\t\tbp_core_add_message( __( 'Lock successfully removed', 'bp-docs' ) );\n\t\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t// Cancel edit\n\t\t// Have to have a catcher for this so the edit lock can be removed\n\t\tif ( !empty( $_GET['bpd_action'] ) && $_GET['bpd_action'] == 'cancel_edit' ) {\n\t\t\t$doc = bp_docs_get_current_doc();\n\n\t\t\t// Todo: get this into a proper method as well, blech\n\t\t\tdelete_post_meta( $doc->ID, '_bp_docs_last_pinged' );\n\n\t\t\tbp_core_redirect( bp_docs_get_doc_link( $doc->ID ) );\n\t\t\tdie();\n\t\t}\n\n\t\t// Todo: get this into a proper method\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET['delete'] ) ) {\n\n\t\t\tcheck_admin_referer( 'bp_docs_delete' );\n\n\t\t\tif ( current_user_can( 'bp_docs_manage' ) ) {\n\t\t\t\t$force_delete = false;\n\t\t\t\tif ( ! empty( $_GET['force_delete'] ) ) {\n\t\t\t\t\t$force_delete = true;\n\t\t\t\t}\n\n\t\t\t\t$delete_doc_id = get_queried_object_id();\n\n\t\t\t\tif ( bp_docs_trash_doc( $delete_doc_id, $force_delete ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully deleted!', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not delete doc.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to delete that doc.', 'bp-docs' ), 'error' );\n\t\t\t}\n\n\t\t\t// Send the user back to the most recently viewed directory if possible.\n\t\t\tif ( isset( $_COOKIE[ 'bp-docs-last-docs-directory' ] ) && filter_var( $_COOKIE[ 'bp-docs-last-docs-directory' ], FILTER_VALIDATE_URL) ) {\n\t\t\t\t$delete_redirect = $_COOKIE[ 'bp-docs-last-docs-directory' ];\n\t\t\t} else {\n\t\t\t\t$delete_redirect = home_url( bp_docs_get_docs_slug() );\n\t\t\t}\n\n\t\t\tbp_core_redirect( $delete_redirect );\n\t\t\tdie();\n\t\t}\n\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET['untrash'] ) && ! empty( $_GET['doc_id'] ) ) {\n\t\t\tcheck_admin_referer( 'bp_docs_untrash' );\n\n\t\t\t$untrash_doc_id = absint( $_GET['doc_id'] );\n\n\t\t\tif ( current_user_can( 'bp_docs_manage', $untrash_doc_id ) ) {\n\t\t\t\tif ( bp_docs_untrash_doc( $untrash_doc_id ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully removed from Trash!', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not remove Doc from Trash.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to remove that Doc from the Trash.', 'bp-docs' ), 'error' );\n\t\t\t}\n\n\t\t\tbp_core_redirect( bp_docs_get_doc_link( $untrash_doc_id ) );\n\t\t\tdie();\n\t\t}\n\n\t\tif ( bp_docs_is_doc_read() && ! empty( $_GET[ BP_DOCS_UNLINK_FROM_GROUP_SLUG ] ) && ! empty( $_GET['doc_id'] ) && ! empty( $_GET['group_id'] ) ) {\n\t\t\tcheck_admin_referer( 'bp_docs_unlink_from_group' );\n\n\t\t\t$unlink_doc_id = absint( $_GET['doc_id'] );\n\t\t\t$unlink_group_id = absint( $_GET['group_id'] );\n\n\t\t\tif ( current_user_can( 'bp_docs_dissociate_from_group', $unlink_group_id ) ) {\n\t\t\t\tif ( bp_docs_unlink_from_group( $unlink_doc_id, $unlink_group_id ) ) {\n\t\t\t\t\tbp_core_add_message( __( 'Doc successfully removed from the group', 'bp-docs' ) );\n\t\t\t\t} else {\n\t\t\t\t\tbp_core_add_message( __( 'Could not remove Doc from the group.', 'bp-docs' ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbp_core_add_message( __( 'You do not have permission to remove that Doc from this group.', 'bp-docs' ), 'error' );\n\t\t\t}\n\t\t\tbp_core_redirect( bp_get_group_permalink( groups_get_group( array( 'group_id' => $unlink_group_id ) ) ) . $bp->bp_docs->slug . '/' );\n\t\t\tdie();\n\t\t}\n\t}\n\n\t/**\n\t * METHODS RELATED TO DOC COMMENTS\n\t */\n\n\t/**\n\t * Approve Doc comments as necessary.\n\t *\n\t * Docs handles its own comment permissions, so we override WP's value\n\t *\n\t * @since 1.3.3\n\t * @param string $approved\n\t * @param array $commentdata\n\t * @return string $approved\n\t */\n\tpublic function approve_doc_comments( $approved, $commentdata ) {\n\t\t$post = get_post( $commentdata['comment_post_ID'] );\n\t\tif ( bp_docs_get_post_type_name() === $post->post_type ) {\n\t\t\tif ( bp_docs_user_can( 'post_comments', bp_loggedin_user_id(), $post->ID ) ) {\n\t\t\t\t$approved = 1;\n\t\t\t} else {\n\t\t\t\t$approved = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn $approved;\n\t}\n\n\t/**\n\t * Filters the comment_post_direct URL so that the user gets sent back to the true\n\t * comment URL after posting\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $location The original location, created by WP\n\t * @param obj $comment The new comment object\n\t * @return str $location The correct location\n\t */\n\tfunction comment_post_redirect( $location, $comment ) {\n\t\tglobal $bp;\n\n\t\t// Check to see whether this is a BP Doc\n\t\t$post = get_post( $comment->comment_post_ID );\n\n\t\tif ( $bp->bp_docs->post_type_name != $post->post_type )\n\t\t\treturn $location;\n\n\t\t$location = bp_docs_get_doc_link( $comment->comment_post_ID ) . '#comment-' . $comment->comment_ID;\n\n\t\treturn $location;\n\t}\n\n\n\t/**\n\t * Posts an activity item when a comment is posted to a doc\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param obj $comment_id The id of the comment that's just been saved.\n\t * @return int $activity_id The id number of the activity created\n\t */\n\tfunction post_comment_activity( $comment_id ) {\n\t\treturn bp_docs_post_comment_activity( $comment_id );\n\t}\n\n\t/**\n\t * Filter the location of the comments.php template\n\t *\n\t * This function uses a little trick to make sure that the comments.php file can be\n\t * overridden by child themes, yet still has a fallback in the plugin folder.\n\t *\n\t * If you find this annoying, I have provided a filter for your convenience.\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param str $path The path (STYLESHEETPATH . $file) from comments_template()\n\t * @return str The path of the preferred template\n\t */\n\tfunction comments_template( $path ) {\n\t\tif ( ! bp_docs_is_existing_doc() )\n\t\t\treturn $path;\n\n\t\t$original_path = $path;\n\n\t\tif ( ! $path = locate_template( 'docs/single/comments.php' ) ) {\n\t\t\t$path = BP_DOCS_INSTALL_PATH . 'includes/templates/docs/single/comments.php';\n\t\t}\n\n\t\treturn apply_filters( 'bp_docs_comment_template_path', $path, $original_path );\n\t}\n\n\t/**\n\t * Prevents comment notification emails from being sent on BP Docs comments\n\t *\n\t * For the moment, I'm shutting off WP's native email notifications on BP Docs comments.\n\t * They are better handled as part of the BP activity stream. This maneuver requires a\n\t * trick: when a comment is posted on a BP Doc type post, I hijack the get_option() call\n\t * for comments_notify and return 0 (rather than false, which would not stop the real\n\t * get_option operation from running).\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param int $comment_id ID number of the new comment being posted\n\t */\n\tfunction check_comment_type( $comment_id ) {\n\t\tglobal $bp;\n\n\t\t$comment = get_comment( $comment_id );\n\t\t$post = get_post( $comment->comment_post_ID );\n\n\t\tif ( $bp->bp_docs->post_type_name == $post->post_type ) {\n\t\t\tadd_filter( 'pre_option_comments_notify', create_function( false, 'return 0;' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Force comments_open status to obey Doc-specific settings.\n\t *\n\t * @since 1.8.6\n\t *\n\t * @param bool $open    Whether the current post is open for comments.\n\t * @param int  $post_id ID of the post.\n\t * @return bool\n\t */\n\tpublic function comments_open( $open, $post_id ) {\n\t\t$post = get_post( $post_id );\n\t\tif ( ! ( $post instanceof WP_Post ) || bp_docs_get_post_type_name() !== $post->post_type ) {\n\t\t\treturn $open;\n\t\t}\n\n\t\treturn current_user_can( 'bp_docs_post_comments', $post_id );\n\t}\n\n\t/**\n\t * Adds BP Docs options to activity filter dropdowns\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction activity_filter_options() {\n\t\treturn bp_docs_activity_filter_options();\n\t}\n\n\t/**\n\t * Posts an activity item on doc save\n\t *\n\t * @since 1.0-beta\n\t *\n\t * @param obj $query The query object created in BP_Docs_Query and passed to the\n\t *     bp_docs_doc_saved filter\n\t * @return int $activity_id The id number of the activity created\n\t */\n\tfunction post_activity( $query ) {\n\t\treturn bp_docs_post_activity( $query );\n\t}\n\n\t/**\n\t * Delete activity associated with a Doc\n\t *\n\t * Run on transition_post_status, to catch deletes from all locations\n\t *\n\t * @since 1.3\n\t *\n\t * @param string $new_status\n\t * @param string $old_status\n\t * @param obj WP_Post object\n\t */\n\tpublic function delete_doc_activity( $new_status, $old_status, $post ) {\n\t\treturn bp_docs_delete_doc_activity( $new_status, $old_status, $post );\n\t}\n\n\t/**\n\t * MISCELLANEOUS\n\t */\n\n\t/**\n\t * Display the proper permalink for Docs\n\t *\n\t * This function filters 'post_type_link', which in turn powers get_permalink() and related\n\t * functions.\n\t *\n\t * BuddyPress Docs has a completely flat architecture for URLs, where\n\t * parent slugs never appear in the URL (as they do in the case of WP\n\t * pages). So we reconstruct the link completely.\n\t *\n\t * @since 1.1.8\n\t *\n\t * @param str $link The permalink\n\t * @param obj $post The post object\n\t * @param bool $leavename\n\t * @param bool $sample See get_post_permalink() for an explanation of these two params\n\t * @return str $link The filtered permalink\n\t */\n\tfunction filter_permalinks( $link, $post, $leavename, $sample ) {\n\t\tif ( bp_docs_get_post_type_name() == $post->post_type ) {\n\t\t\t$link = trailingslashit( bp_docs_get_archive_link() . $post->post_name );\n\t\t}\n\n\t\treturn html_entity_decode( $link );\n\t}\n\n\t/**\n\t * Repsect disable_blogforum_replies\n\t *\n\t * BuddyPress allows you to disable activity commenting on items related to blog posts or\n\t * to forums, content types that have their own reply/comment mechanisms. Since BuddyPress\n\t * Docs are similar in this respect, they should respect this setting as well.\n\t *\n\t * In the future, I may add a separate toggle for this. I may also build a filter that\n\t * redirects the Comment/Reply link so that it goes to the Doc's Comment section, or so that\n\t * this setting reflects the individual Doc's can_comment settings. (For now, this would\n\t * require too many additional queries.)\n\t *\n\t * This function filters bp_activity_can_comment, which was introduced in BP 1.5. It is\n\t * therefore not backward compatible with BP < 1.5.\n\t *\n\t * @since 1.1.17\n\t *\n\t * @param bool $can_comment Whether the current user can comment. Comes from\n\t *             bp_activity_can_comment()\n\t * @return bool $can_comment\n\t */\n\tfunction activity_can_comment( $can_comment ) {\n\t\tglobal $activities_template;\n\n\t\tif ( 'bp_doc_created' == bp_get_activity_action_name() ||\n\t\t     'bp_doc_edited' == bp_get_activity_action_name() ||\n\t\t     'bp_doc_comment' == bp_get_activity_action_name()\n\t\t   ) {\n\t\t   \t// Flip the 'disable'\n\t\t\t$can_comment = !(bool)$activities_template->disable_blogforum_replies;\n\t\t}\n\n\t\treturn apply_filters( 'bp_docs_activity_can_comment', $can_comment );\n\t}\n\n\t/**\n\t * Handles doc filters from a form post and translates to $_GET arguments before redirect\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction handle_filters() {\n\t\t$redirect_url = apply_filters( 'bp_docs_handle_filters', bp_docs_get_item_docs_link() );\n\n\t\tbp_core_redirect( $redirect_url );\n\t}\n\n\t/**\n\t * Sets the includes URL for use when loading scripts and styles\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction set_includes_url() {\n\t\t$this->includes_url = plugins_url() . '/' . BP_DOCS_PLUGIN_SLUG . '/includes/';\n\t}\n\n\t/**\n\t * Add a bp-docs class to bp-docs pages\n\t *\n\t * @since 1.3\n\t */\n\tfunction body_class( $classes ) {\n\t\tif ( bp_docs_is_docs_component() ) {\n\t\t\t$classes[] = 'bp-docs';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_trashed() ) {\n\t\t\t$classes[] = 'trashed-doc';\n\t\t}\n\n\t\tif ( wp_is_mobile() ) {\n\t\t\t$classes[] = 'mobile';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\t$classes[] = 'bp-docs-edit';\n\t\t}\n\n\t\tif ( bp_docs_is_doc_create() ) {\n\t\t\t$classes[] = 'bp-docs-create';\n\t\t}\n\n\t\treturn array_unique( $classes );\n\t}\n\n\t/**\n\t * When on a global directory, get terms for the tag cloud\n\t *\n\t * @since 1.4\n\t */\n\tpublic function get_item_terms( $terms ) {\n\t\tglobal $wpdb, $bp;\n\n\t\t// Only on global directory and mygroups view\n\t\tif ( ! bp_docs_is_global_directory() && ! bp_docs_is_mygroups_directory() ) {\n\t\t\treturn $terms;\n\t\t}\n\n\t\t// Get list of docs the user has access to\n\t\t$item_ids = bp_docs_get_doc_ids_accessible_to_current_user();\n\n\t\t// Pass to wp_get_object_terms()\n\t\t$terms = wp_get_object_terms( $item_ids, array( $bp->bp_docs->docs_tag_tax_name ) );\n\n\t\t// Reformat\n\t\t$terms_array = array();\n\t\tforeach ( $terms as $t ) {\n\t\t\t$terms_array[ $t->slug ] = array(\n\t\t\t\t'count' => $t->count,\n\t\t\t\t'name' => $t->name,\n\t\t\t);\n\t\t}\n\n\t\tunset( $item_ids, $terms );\n\n\t\treturn $terms_array;\n\t}\n\n\tpublic static function filter_type( $types ) {\n\t\t$types[] = array(\n\t\t\t'slug' => 'search',\n\t\t\t'title' => __( 'Search', 'bp-docs' ),\n\t\t\t'query_arg' => 's',\n\t\t);\n\t\treturn $types;\n\t}\n\n\tpublic static function filter_markup() {\n\t\t$has_search = ! empty( $_GET['s'] );\n\t\t?>\n\t\t<div id=\"docs-filter-section-search\" class=\"docs-filter-section<?php if ( $has_search ) : ?> docs-filter-section-open<?php endif ?>\">\n\t\t\t<form action=\"\" method=\"get\">\n\t\t\t\t<input name=\"s\" value=\"<?php the_search_query() ?>\">\n\t\t\t\t<input name=\"search_submit\" type=\"submit\" value=\"<?php _e( 'Search', 'bp-docs' ) ?>\" />\n\t\t\t\t<?php do_action( 'bp_docs_directory_filter_search_form' ) ?>\n\t\t\t</form>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Determine whether the directory view is filtered by a keyword search.\n\t *\n\t * @since 1.9.0\n\t *\n\t * @param bool  $is_filtered Is the current directory view filtered?\n \t * @param array $exclude Array of filter types to ignore.\n\t *\n\t * @return bool $is_filtered\n\t */\n\tpublic function is_directory_view_filtered( $is_filtered, $exclude ) {\n\t\t// If this filter is excluded, stop now.\n\t\tif ( in_array( 's', $exclude ) ) {\n\t\t\treturn $is_filtered;\n\t\t}\n\n\t\tif ( ! empty( $_GET['s'] ) ) {\n\t\t\t$is_filtered = true;\n\t\t}\n\t    return $is_filtered;\n\t}\n\n\t/**\n\t * Loads JavaScript\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction enqueue_scripts() {\n\t\twp_register_script( 'bp-docs-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/bp-docs.js' ), array( 'jquery' ) );\n\n\t\t// This is for edit/create scripts\n\t\tif ( bp_docs_is_doc_edit()\n\t\t     ||\n\t\t     bp_docs_is_doc_create()\n\t\t     || ( !empty( $this->query->current_view )\n\t\t           &&\n\t\t           ( 'edit' == $this->query->current_view || 'create' == $this->query->current_view )\n\t\t        )\n\t\t   ) {\n\t\t\trequire_once( ABSPATH . '/wp-admin/includes/post.php' );\n\t\t\twp_enqueue_script( 'common' );\n\t\t\twp_enqueue_script( 'jquery-color' );\n\t\t\twp_enqueue_script( 'editor' );\n\t\t\twp_enqueue_script( 'utils' );\n\n\t\t\twp_register_script( 'bp-docs-idle-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/idle.js' ), array( 'jquery', 'bp-docs-js' ) );\n\t\t\twp_enqueue_script( 'bp-docs-idle-js' );\n\n\t\t\twp_register_script( 'jquery-colorbox', plugins_url( BP_DOCS_PLUGIN_SLUG . '/lib/js/colorbox/jquery.colorbox-min.js' ), array( 'jquery' ) );\n\t\t\twp_enqueue_script( 'jquery-colorbox' );\n\t\t\t// Edit mode requires bp-docs-js to be dependent on TinyMCE, so we must\n\t\t\t// reregister bp-docs-js with the correct dependencies\n\t\t\twp_deregister_script( 'bp-docs-js' );\n\t\t\twp_register_script( 'bp-docs-js', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/bp-docs.js' ), array( 'jquery', 'editor', 'heartbeat' ) );\n\n\t\t\twp_register_script( 'word-counter', site_url() . '/wp-admin/js/word-count.js', array( 'jquery' ) );\n\n\t\t\twp_enqueue_script( 'bp-docs-edit-validation', plugins_url( BP_DOCS_PLUGIN_SLUG . '/includes/js/edit-validation.js' ), array( 'jquery', 'bp-docs-js' ) );\n\t\t}\n\n\t\t// Only load our JS on the right sorts of pages. Generous to account for\n\t\t// different item types\n\t\tif ( in_array( bp_docs_get_docs_slug(), $this->slugstocheck ) || bp_docs_is_single_doc() || bp_docs_is_global_directory() || bp_docs_is_mygroups_directory() || bp_docs_is_doc_create() ) {\n\t\t\twp_enqueue_script( 'bp-docs-js' );\n\t\t\twp_enqueue_script( 'comment-reply' );\n\n\t\t\t$strings = array(\n\t\t\t\t'upload_title' => __( 'Upload File', 'bp-docs' ),\n\t\t\t\t'upload_button' => __( 'OK', 'bp-docs' ),\n\t\t\t\t'still_working'\t=> __( 'Still working?', 'bp-docs' ),\n\t\t\t\t'and_x_more' => __( 'and %d more', 'bp-docs' ),\n\t\t\t\t'failed_submission' => ! empty( buddypress()->bp_docs->submitted_data ) ? 1 : 0,\n\t\t\t);\n\n\t\t\tif ( bp_docs_is_doc_edit() ) {\n\t\t\t\t$strings['pulse'] = bp_docs_heartbeat_pulse();\n\t\t\t}\n\t\t\twp_localize_script( 'bp-docs-js', 'bp_docs', $strings );\n\n\t\t\tdo_action( 'bp_docs_enqueue_scripts' );\n\t\t}\n\t}\n\n\t/**\n\t * Loads styles\n\t *\n\t * @since 1.0-beta\n\t */\n\tfunction enqueue_styles() {\n\t\tglobal $bp;\n\n\t\t// Load the main CSS only on the proper pages\n\t\tif ( in_array( bp_docs_get_docs_slug(), $this->slugstocheck ) || bp_docs_is_docs_component() ) {\n\t\t\twp_enqueue_style( 'bp-docs-css', $this->includes_url . 'css/screen.css' );\n\t\t}\n\n\t\tif ( bp_docs_is_doc_edit() || bp_docs_is_doc_create() ) {\n\t\t\twp_enqueue_style( 'bp-docs-edit-css', $this->includes_url . 'css/edit.css' );\n\t\t\twp_enqueue_style( 'thickbox' );\n\t\t}\n\t}\n\n\t/**\n\t * Renew the last directory cookie if the user is viewing the main docs library.\n\t *\n\t * @since 1.9.0\n\t */\n\tpublic function\tset_directory_cookie() {\n\t\tif ( bp_docs_is_global_directory() ) {\n\t\t\t@setcookie( 'bp-docs-last-docs-directory', home_url( $_SERVER['REQUEST_URI'] ), 0, '/' );\n\t\t}\n\t}\n\n\t/**\n\t * Add the parent and child theme names to the body class when on a BP Docs page.\n\t *\n\t * @since 1.9.0\n\t *\n\t * @param array $classes An array of body classes.\n\t */\n\tpublic function filter_body_class( $classes ) {\n\t\tif ( bp_docs_is_docs_component() ) {\n\t\t\t$classes[] = 'bp-docs-body-theme-' . get_stylesheet();\n\t\t\t$classes[] = 'bp-docs-body-theme-' . get_template();\n\t\t}\n\t\treturn $classes;\n\t}\n}\n"], "filenames": ["includes/component.php"], "buggy_code_start_loc": [382], "buggy_code_end_loc": [382], "fixing_code_start_loc": [383], "fixing_code_end_loc": [391], "type": "CWE-269", "message": "An issue was discovered in includes/component.php in the BuddyPress Docs plugin before 1.9.3 for WordPress. It is possible for authenticated users to edit documents of other users without proper permissions.", "other": {"cve": {"id": "CVE-2017-6954", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-17T09:59:00.147", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "An issue was discovered in includes/component.php in the BuddyPress Docs plugin before 1.9.3 for WordPress. It is possible for authenticated users to edit documents of other users without proper permissions."}, {"lang": "es", "value": "readelf en GNU Binutils 2.28 tiene un error de uso despu\u00e9s de liberaci\u00f3n de memoria (espec\u00edficamente de lectura despu\u00e9s de liberaci\u00f3n de memoria) al procesar m\u00faltiples secciones reubicadas en un binario MSP430. Esto es provocado por no manejar correctamente un \u00edndice de s\u00edmbolo no v\u00e1lido, y no manejar correctamente el estado a trav\u00e9s de invocaciones."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:buddypress:buddypress:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.9.2", "matchCriteriaId": "003CABE8-D924-4E27-9B49-000092F339AE"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/97238", "source": "cve@mitre.org"}, {"url": "https://github.com/boonebgorges/buddypress-docs/commit/75293ed4e5f31f04e54689bfe2c647e3e3f5e1a9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/plugins/buddypress-docs/changelog/", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/boonebgorges/buddypress-docs/commit/75293ed4e5f31f04e54689bfe2c647e3e3f5e1a9"}}