{"buggy_code": ["<?php\n\nnamespace Frontend\\Modules\\Search\\Actions;\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Component\\Filesystem\\Filesystem;\n\nuse Frontend\\Core\\Engine\\Base\\Block as FrontendBaseBlock;\nuse Frontend\\Core\\Engine\\Form as FrontendForm;\nuse Frontend\\Core\\Engine\\Language as FL;\nuse Frontend\\Core\\Engine\\Model as FrontendModel;\nuse Frontend\\Core\\Engine\\Navigation as FrontendNavigation;\nuse Frontend\\Modules\\Search\\Engine\\Model as FrontendSearchModel;\n\n/**\n * This action will display a form to search\n *\n * @author Matthias Mullie <forkcms@mullie.eu>\n */\nclass Index extends FrontendBaseBlock\n{\n    /**\n     * Name of the cache file\n     *\n     * @var    string\n     */\n    private $cacheFile;\n\n    /**\n     * The items\n     *\n     * @var    array\n     */\n    private $items;\n\n    /**\n     * Limit of data to fetch\n     *\n     * @var    int\n     */\n    private $limit;\n\n    /**\n     * Offset of data to fetch\n     *\n     * @var    int\n     */\n    private $offset;\n\n    /**\n     * The pagination array\n     * It will hold all needed parameters, some of them need initialization.\n     *\n     * @var    array\n     */\n    protected $pagination = array(\n        'limit' => 20,\n        'offset' => 0,\n        'requested_page' => 1,\n        'num_items' => null,\n        'num_pages' => null\n    );\n\n    /**\n     * The requested page\n     *\n     * @var    int\n     */\n    private $requestedPage;\n\n    /**\n     * The search term\n     *\n     * @var string\n     */\n    private $term = '';\n\n    /**\n     * Search statistics\n     *\n     * @var    array\n     */\n    private $statistics;\n\n    /**\n     * Display\n     */\n    private function display()\n    {\n        // set variables\n        $this->requestedPage = $this->URL->getParameter('page', 'int', 1);\n        $this->limit = FrontendModel::getModuleSetting('Search', 'overview_num_items', 20);\n        $this->offset = ($this->requestedPage * $this->limit) - $this->limit;\n        $this->cacheFile = FRONTEND_CACHE_PATH . '/' . $this->getModule() . '/' .\n                           FRONTEND_LANGUAGE . '_' . md5($this->term) . '_' .\n                           $this->offset . '_' . $this->limit . '.php';\n\n        // load the cached data\n        if (!$this->getCachedData()) {\n            // ... or load the real data\n            $this->getRealData();\n        }\n\n        // parse\n        $this->parse();\n    }\n\n    /**\n     * Execute the extra\n     */\n    public function execute()\n    {\n        parent::execute();\n        $this->loadTemplate();\n        $this->loadForm();\n        $this->validateForm();\n        $this->display();\n        $this->saveStatistics();\n    }\n\n    /**\n     * Load the cached data\n     *\n     * @return bool\n     */\n    private function getCachedData()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return false;\n        }\n\n        // debug mode = no cache\n        if (SPOON_DEBUG) {\n            return false;\n        }\n\n        // check if cache file exists\n        if (!is_file($this->cacheFile)) {\n            return false;\n        }\n\n        // get cache file modification time\n        $cacheInfo = @filemtime($this->cacheFile);\n\n        // check if cache file is recent enough (1 hour)\n        if (!$cacheInfo || $cacheInfo < strtotime('-1 hour')) {\n            return false;\n        }\n\n        // include cache file\n        require_once $this->cacheFile;\n\n        // set info (received from cache)\n        $this->pagination = $pagination;\n        $this->items = $items;\n\n        return true;\n    }\n\n    /**\n     * Load the data\n     */\n    private function getRealData()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // set url\n        $this->pagination['url'] = FrontendNavigation::getURLForBlock('Search') . '?form=search&q=' . $this->term;\n\n        // populate calculated fields in pagination\n        $this->pagination['limit'] = $this->limit;\n        $this->pagination['offset'] = $this->offset;\n        $this->pagination['requested_page'] = $this->requestedPage;\n\n        // get items\n        $this->items = FrontendSearchModel::search(\n            $this->term,\n            $this->pagination['limit'],\n            $this->pagination['offset']\n        );\n\n        // populate count fields in pagination\n        // this is done after actual search because some items might be\n        // activated/deactivated (getTotal only does rough checking)\n        $this->pagination['num_items'] = FrontendSearchModel::getTotal($this->term);\n        $this->pagination['num_pages'] = (int) ceil($this->pagination['num_items'] / $this->pagination['limit']);\n\n        // num pages is always equal to at least 1\n        if ($this->pagination['num_pages'] == 0) {\n            $this->pagination['num_pages'] = 1;\n        }\n\n        // redirect if the request page doesn't exist\n        if ($this->requestedPage > $this->pagination['num_pages'] || $this->requestedPage < 1) {\n            $this->redirect(\n                FrontendNavigation::getURL(404)\n            );\n        }\n\n        // debug mode = no cache\n        if (!SPOON_DEBUG) {\n            // set cache content\n            $fs = new Filesystem();\n            $fs->dumpFile(\n                $this->cacheFile,\n                \"<?php\\n\" . '$pagination = ' . var_export($this->pagination, true) . \";\\n\" . '$items = ' . var_export(\n                    $this->items,\n                    true\n                ) . \";\\n?>\"\n            );\n        }\n    }\n\n    /**\n     * Load the form\n     */\n    private function loadForm()\n    {\n        // create form\n        $this->frm = new FrontendForm('search', null, 'get', null, false);\n\n        // could also have been submitted by our widget\n        if (!\\SpoonFilter::getGetValue('q', null, '')) {\n            $_GET['q'] = \\SpoonFilter::getGetValue('q_widget', null, '');\n        }\n\n        // create elements\n        $this->frm->addText(\n            'q',\n            null,\n            255,\n            'inputText liveSuggest autoComplete',\n            'inputTextError liveSuggest autoComplete'\n        );\n\n        // since we know the term just here we should set the canonical url here\n        $canonicalUrl = SITE_URL . FrontendNavigation::getURLForBlock('Search');\n        if (isset($_GET['q']) && $_GET['q'] != '') {\n            $canonicalUrl .= '?q=' . $_GET['q'];\n        }\n        $this->header->setCanonicalUrl($canonicalUrl);\n    }\n\n    /**\n     * Parse the data into the template\n     */\n    private function parse()\n    {\n        // parse the form\n        $this->frm->parse($this->tpl);\n\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // assign articles\n        $this->tpl->assign('searchResults', $this->items);\n        $this->tpl->assign('searchTerm', $this->term);\n\n        // parse the pagination\n        $this->parsePagination();\n    }\n\n    /**\n     * Save statistics\n     */\n    private function saveStatistics()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // previous search result\n        $previousTerm = \\SpoonSession::exists('searchTerm') ? \\SpoonSession::get('searchTerm') : '';\n        \\SpoonSession::set('searchTerm', '');\n\n        // save this term?\n        if ($previousTerm != $this->term) {\n            // format data\n            $this->statistics = array();\n            $this->statistics['term'] = $this->term;\n            $this->statistics['language'] = FRONTEND_LANGUAGE;\n            $this->statistics['time'] = FrontendModel::getUTCDate();\n            $this->statistics['data'] = serialize(array('server' => $_SERVER));\n            $this->statistics['num_results'] = $this->pagination['num_items'];\n\n            // save data\n            FrontendSearchModel::save($this->statistics);\n        }\n\n        // save current search term in cookie\n        \\SpoonSession::set('searchTerm', $this->term);\n    }\n\n    /**\n     * Validate the form\n     */\n    private function validateForm()\n    {\n        // is the form submitted\n        if ($this->frm->isSubmitted()) {\n            // cleanup the submitted fields, ignore fields that were added by hackers\n            $this->frm->cleanupFields();\n\n            // validate required fields\n            $this->frm->getField('q')->isFilled(FL::err('TermIsRequired'));\n\n            // no errors?\n            if ($this->frm->isCorrect()) {\n                // get search term\n                $this->term = $this->frm->getField('q')->getValue();\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Frontend\\Modules\\Search\\Actions;\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Component\\Filesystem\\Filesystem;\n\nuse Frontend\\Core\\Engine\\Base\\Block as FrontendBaseBlock;\nuse Frontend\\Core\\Engine\\Form as FrontendForm;\nuse Frontend\\Core\\Engine\\Language as FL;\nuse Frontend\\Core\\Engine\\Model as FrontendModel;\nuse Frontend\\Core\\Engine\\Navigation as FrontendNavigation;\nuse Frontend\\Modules\\Search\\Engine\\Model as FrontendSearchModel;\n\n/**\n * This action will display a form to search\n *\n * @author Matthias Mullie <forkcms@mullie.eu>\n */\nclass Index extends FrontendBaseBlock\n{\n    /**\n     * Name of the cache file\n     *\n     * @var    string\n     */\n    private $cacheFile;\n\n    /**\n     * The items\n     *\n     * @var    array\n     */\n    private $items;\n\n    /**\n     * Limit of data to fetch\n     *\n     * @var    int\n     */\n    private $limit;\n\n    /**\n     * Offset of data to fetch\n     *\n     * @var    int\n     */\n    private $offset;\n\n    /**\n     * The pagination array\n     * It will hold all needed parameters, some of them need initialization.\n     *\n     * @var    array\n     */\n    protected $pagination = array(\n        'limit' => 20,\n        'offset' => 0,\n        'requested_page' => 1,\n        'num_items' => null,\n        'num_pages' => null\n    );\n\n    /**\n     * The requested page\n     *\n     * @var    int\n     */\n    private $requestedPage;\n\n    /**\n     * The search term\n     *\n     * @var string\n     */\n    private $term = '';\n\n    /**\n     * Search statistics\n     *\n     * @var    array\n     */\n    private $statistics;\n\n    /**\n     * Display\n     */\n    private function display()\n    {\n        // set variables\n        $this->requestedPage = $this->URL->getParameter('page', 'int', 1);\n        $this->limit = FrontendModel::getModuleSetting('Search', 'overview_num_items', 20);\n        $this->offset = ($this->requestedPage * $this->limit) - $this->limit;\n        $this->cacheFile = FRONTEND_CACHE_PATH . '/' . $this->getModule() . '/' .\n                           FRONTEND_LANGUAGE . '_' . md5($this->term) . '_' .\n                           $this->offset . '_' . $this->limit . '.php';\n\n        // load the cached data\n        if (!$this->getCachedData()) {\n            // ... or load the real data\n            $this->getRealData();\n        }\n\n        // parse\n        $this->parse();\n    }\n\n    /**\n     * Execute the extra\n     */\n    public function execute()\n    {\n        parent::execute();\n        $this->loadTemplate();\n        $this->loadForm();\n        $this->validateForm();\n        $this->display();\n        $this->saveStatistics();\n    }\n\n    /**\n     * Load the cached data\n     *\n     * @return bool\n     */\n    private function getCachedData()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return false;\n        }\n\n        // debug mode = no cache\n        if (SPOON_DEBUG) {\n            return false;\n        }\n\n        // check if cache file exists\n        if (!is_file($this->cacheFile)) {\n            return false;\n        }\n\n        // get cache file modification time\n        $cacheInfo = @filemtime($this->cacheFile);\n\n        // check if cache file is recent enough (1 hour)\n        if (!$cacheInfo || $cacheInfo < strtotime('-1 hour')) {\n            return false;\n        }\n\n        // include cache file\n        require_once $this->cacheFile;\n\n        // set info (received from cache)\n        $this->pagination = $pagination;\n        $this->items = $items;\n\n        return true;\n    }\n\n    /**\n     * Load the data\n     */\n    private function getRealData()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // set url\n        $this->pagination['url'] = FrontendNavigation::getURLForBlock('Search') . '?form=search&q=' . $this->term;\n\n        // populate calculated fields in pagination\n        $this->pagination['limit'] = $this->limit;\n        $this->pagination['offset'] = $this->offset;\n        $this->pagination['requested_page'] = $this->requestedPage;\n\n        // get items\n        $this->items = FrontendSearchModel::search(\n            $this->term,\n            $this->pagination['limit'],\n            $this->pagination['offset']\n        );\n\n        // populate count fields in pagination\n        // this is done after actual search because some items might be\n        // activated/deactivated (getTotal only does rough checking)\n        $this->pagination['num_items'] = FrontendSearchModel::getTotal($this->term);\n        $this->pagination['num_pages'] = (int) ceil($this->pagination['num_items'] / $this->pagination['limit']);\n\n        // num pages is always equal to at least 1\n        if ($this->pagination['num_pages'] == 0) {\n            $this->pagination['num_pages'] = 1;\n        }\n\n        // redirect if the request page doesn't exist\n        if ($this->requestedPage > $this->pagination['num_pages'] || $this->requestedPage < 1) {\n            $this->redirect(\n                FrontendNavigation::getURL(404)\n            );\n        }\n\n        // debug mode = no cache\n        if (!SPOON_DEBUG) {\n            // set cache content\n            $fs = new Filesystem();\n            $fs->dumpFile(\n                $this->cacheFile,\n                \"<?php\\n\" . '$pagination = ' . var_export($this->pagination, true) . \";\\n\" . '$items = ' . var_export(\n                    $this->items,\n                    true\n                ) . \";\\n?>\"\n            );\n        }\n    }\n\n    /**\n     * Load the form\n     */\n    private function loadForm()\n    {\n        // create form\n        $this->frm = new FrontendForm('search', null, 'get', null, false);\n\n        // could also have been submitted by our widget\n        if (!\\SpoonFilter::getGetValue('q', null, '')) {\n            $_GET['q'] = \\SpoonFilter::getGetValue('q_widget', null, '');\n        }\n\n        // create elements\n        $this->frm->addText(\n            'q',\n            null,\n            255,\n            'inputText liveSuggest autoComplete',\n            'inputTextError liveSuggest autoComplete'\n        );\n\n        // since we know the term just here we should set the canonical url here\n        $canonicalUrl = SITE_URL . FrontendNavigation::getURLForBlock('Search');\n        if (isset($_GET['q']) && $_GET['q'] != '') {\n            $canonicalUrl .= '?q=' . \\SpoonFilter::htmlspecialchars($_GET['q']);\n        }\n        $this->header->setCanonicalUrl($canonicalUrl);\n    }\n\n    /**\n     * Parse the data into the template\n     */\n    private function parse()\n    {\n        // parse the form\n        $this->frm->parse($this->tpl);\n\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // assign articles\n        $this->tpl->assign('searchResults', $this->items);\n        $this->tpl->assign('searchTerm', $this->term);\n\n        // parse the pagination\n        $this->parsePagination();\n    }\n\n    /**\n     * Save statistics\n     */\n    private function saveStatistics()\n    {\n        // no search term = no search\n        if (!$this->term) {\n            return;\n        }\n\n        // previous search result\n        $previousTerm = \\SpoonSession::exists('searchTerm') ? \\SpoonSession::get('searchTerm') : '';\n        \\SpoonSession::set('searchTerm', '');\n\n        // save this term?\n        if ($previousTerm != $this->term) {\n            // format data\n            $this->statistics = array();\n            $this->statistics['term'] = $this->term;\n            $this->statistics['language'] = FRONTEND_LANGUAGE;\n            $this->statistics['time'] = FrontendModel::getUTCDate();\n            $this->statistics['data'] = serialize(array('server' => $_SERVER));\n            $this->statistics['num_results'] = $this->pagination['num_items'];\n\n            // save data\n            FrontendSearchModel::save($this->statistics);\n        }\n\n        // save current search term in cookie\n        \\SpoonSession::set('searchTerm', $this->term);\n    }\n\n    /**\n     * Validate the form\n     */\n    private function validateForm()\n    {\n        // is the form submitted\n        if ($this->frm->isSubmitted()) {\n            // cleanup the submitted fields, ignore fields that were added by hackers\n            $this->frm->cleanupFields();\n\n            // validate required fields\n            $this->frm->getField('q')->isFilled(FL::err('TermIsRequired'));\n\n            // no errors?\n            if ($this->frm->isCorrect()) {\n                // get search term\n                $this->term = $this->frm->getField('q')->getValue();\n            }\n        }\n    }\n}\n"], "filenames": ["src/Frontend/Modules/Search/Actions/Index.php"], "buggy_code_start_loc": [249], "buggy_code_end_loc": [250], "fixing_code_start_loc": [249], "fixing_code_end_loc": [250], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the loadForm function in Frontend/Modules/Search/Actions/Index.php in Fork CMS before 3.8.4 allows remote attackers to inject arbitrary web script or HTML via the q_widget parameter to en/search.", "other": {"cve": {"id": "CVE-2014-9470", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-08T17:15:11.247", "lastModified": "2020-02-12T16:11:16.900", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the loadForm function in Frontend/Modules/Search/Actions/Index.php in Fork CMS before 3.8.4 allows remote attackers to inject arbitrary web script or HTML via the q_widget parameter to en/search."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) en la funci\u00f3n loadForm en el archivo Frontend/Modules/Search/Actions/Index.php en Fork CMS versiones anteriores a 3.8.4, permite a atacantes remotos inyectar script web o HTML arbitrario por medio del par\u00e1metro q_widget en en/search."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fork-cms:fork_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.8.4", "matchCriteriaId": "AE88F534-F422-464E-B76D-6C52F6ACD4B9"}]}]}], "references": [{"url": "http://seclists.org/fulldisclosure/2015/Jan/38", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://www.fork-cms.com/blog/detail/fork-3.8.4-released", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://www.itas.vn/news/itas-team-found-out-a-cross-site-scripting-vulnerability-in-fork-cms-70.html", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://www.securityfocus.com/bid/72017", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/forkcms/forkcms/commit/4a7814762adf4f56f932d95146c7e4126d872114", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/forkcms/forkcms/issues/1018s", "source": "cve@mitre.org", "tags": ["Broken Link"]}]}, "github_commit_url": "https://github.com/forkcms/forkcms/commit/4a7814762adf4f56f932d95146c7e4126d872114"}}