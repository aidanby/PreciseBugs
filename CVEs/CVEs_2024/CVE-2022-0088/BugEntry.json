{"buggy_code": ["############\n## YOURLS\n\n# Ignore server configuration files\n.htaccess\n*.config\n*.conf\n[Rr]obots.txt\n\n# Ignore everything in user/\nuser/*\n# ... except config sample\n!user/config-sample.php\n# ... core plugins\n!user/plugins/hyphens-in-urls/\n!user/plugins/random-bg/\n!user/plugins/random-shorturls/\n!user/plugins/sample-page/\n!user/plugins/sample-plugin/\n!user/plugins/sample-toolbar/\n# ... example pages\n!user/pages/examplepage.php\n# ... and index.html files\n!user/index.html\n!user/**/index.html\n\n############\n## Tests\n\nincludes/**/tests/\nbuild/\ncoverage/\nphpunit.xml\ntests/yourls-tests-config.php\ntests/vendor/\ntests/data/auth/config-test-auth-hashed.php\ntests/data/htaccess/test*\n\n############\n## Environnement\n\n# Windows image file caches\nThumbs.db\n# Folder config file\nDesktop.ini\n# Mac crap\n.DS_Store\n# NetBeans files\n/nbproject/\n.idea\n", "<?php\ndefine( 'YOURLS_ADMIN', true );\ndefine( 'YOURLS_AJAX', true );\nrequire_once( dirname( __DIR__ ) .'/includes/load-yourls.php' );\nyourls_maybe_require_auth();\n\n// This file will output a JSON string\nyourls_content_type_header( 'application/json' );\nyourls_no_cache_headers();\nyourls_no_frame_header();\n\nif( !isset( $_REQUEST['action'] ) )\n\tdie();\n\n// Pick action\n$action = $_REQUEST['action'];\nswitch( $action ) {\n\n\tcase 'add':\n\t\tyourls_verify_nonce( 'add_url', $_REQUEST['nonce'], false, 'omg error' );\n\t\t$return = yourls_add_new_link( $_REQUEST['url'], $_REQUEST['keyword'] );\n\t\techo json_encode($return);\n\t\tbreak;\n\n\tcase 'edit_display':\n\t\tyourls_verify_nonce( 'edit-link_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$row = yourls_table_edit_row ( $_REQUEST['keyword'] );\n\t\techo json_encode( array('html' => $row) );\n\t\tbreak;\n\n\tcase 'edit_save':\n\t\tyourls_verify_nonce( 'edit-save_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$return = yourls_edit_link( $_REQUEST['url'], $_REQUEST['keyword'], $_REQUEST['newkeyword'], $_REQUEST['title'] );\n\t\techo json_encode($return);\n\t\tbreak;\n\n\tcase 'delete':\n\t\tyourls_verify_nonce( 'delete-link_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$query = yourls_delete_link_by_keyword( $_REQUEST['keyword'] );\n\t\techo json_encode(array('success'=>$query));\n\t\tbreak;\n\n\tcase 'logout':\n\t\t// unused for the moment\n\t\tyourls_logout();\n\t\tbreak;\n\n\tdefault:\n\t\tyourls_do_action( 'yourls_ajax_'.$action );\n\n}\n\ndie();\n", "<?php\n/**\n * Function related to authentication functions and nonces\n */\n\n\n/**\n * Show login form if required\n *\n */\nfunction yourls_maybe_require_auth() {\n\tif( yourls_is_private() ) {\n\t\tyourls_do_action( 'require_auth' );\n\t\trequire_once( YOURLS_INC.'/auth.php' );\n\t} else {\n\t\tyourls_do_action( 'require_no_auth' );\n\t}\n}\n\n/**\n * Check for valid user via login form or stored cookie. Returns true or an error message\n *\n */\nfunction yourls_is_valid_user() {\n\t// Allow plugins to short-circuit the whole function\n\t$pre = yourls_apply_filter( 'shunt_is_valid_user', null );\n\tif ( null !== $pre ) {\n\t\treturn $pre;\n\t}\n\n\t// $unfiltered_valid : are credentials valid? Boolean value. It's \"unfiltered\" to allow plugins to eventually filter it.\n\t$unfiltered_valid = false;\n\n\t// Logout request\n\tif( isset( $_GET['action'] ) && $_GET['action'] == 'logout' ) {\n\t\tyourls_do_action( 'logout' );\n\t\tyourls_store_cookie( null );\n\t\treturn yourls__( 'Logged out successfully' );\n\t}\n\n\t// Check cookies or login request. Login form has precedence.\n\n\tyourls_do_action( 'pre_login' );\n\n\t// Determine auth method and check credentials\n\tif\n\t\t// API only: Secure (no login or pwd) and time limited token\n\t\t// ?timestamp=12345678&signature=md5(totoblah12345678)\n\t\t( yourls_is_API() &&\n\t\t  isset( $_REQUEST['timestamp'] ) && !empty($_REQUEST['timestamp'] ) &&\n\t\t  isset( $_REQUEST['signature'] ) && !empty($_REQUEST['signature'] )\n\t\t)\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_signature_timestamp' );\n\t\t\t$unfiltered_valid = yourls_check_signature_timestamp();\n\t\t}\n\n\telseif\n\t\t// API only: Secure (no login or pwd)\n\t\t// ?signature=md5(totoblah)\n\t\t( yourls_is_API() &&\n\t\t  !isset( $_REQUEST['timestamp'] ) &&\n\t\t  isset( $_REQUEST['signature'] ) && !empty( $_REQUEST['signature'] )\n\t\t)\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_signature' );\n\t\t\t$unfiltered_valid = yourls_check_signature();\n\t\t}\n\n\telseif\n\t\t// API or normal: login with username & pwd\n\t\t( isset( $_REQUEST['username'] ) && isset( $_REQUEST['password'] )\n\t\t  && !empty( $_REQUEST['username'] ) && !empty( $_REQUEST['password']  ) )\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_username_password' );\n\t\t\t$unfiltered_valid = yourls_check_username_password();\n\t\t}\n\n\telseif\n\t\t// Normal only: cookies\n\t\t( !yourls_is_API() &&\n\t\t  isset( $_COOKIE[ yourls_cookie_name() ] ) )\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_cookie' );\n\t\t\t$unfiltered_valid = yourls_check_auth_cookie();\n\t\t}\n\n\t// Regardless of validity, allow plugins to filter the boolean and have final word\n\t$valid = yourls_apply_filter( 'is_valid_user', $unfiltered_valid );\n\n\t// Login for the win!\n\tif ( $valid ) {\n\t\tyourls_do_action( 'login' );\n\n\t\t// (Re)store encrypted cookie if needed\n\t\tif ( !yourls_is_API() ) {\n\t\t\tyourls_store_cookie( YOURLS_USER );\n\n\t\t\t// Login form : redirect to requested URL to avoid re-submitting the login form on page reload\n\t\t\tif( isset( $_REQUEST['username'] ) && isset( $_REQUEST['password'] ) && isset( $_SERVER['REQUEST_URI'] ) ) {\n\t\t\t    // The return makes sure we exit this function before waiting for redirection.\n                // See #3189 and note in yourls_redirect()\n\t\t\t\treturn yourls_redirect( yourls_sanitize_url_safe($_SERVER['REQUEST_URI']) );\n\t\t\t}\n\t\t}\n\n\t\t// Login successful\n\t\treturn true;\n\t}\n\n\t// Login failed\n\tyourls_do_action( 'login_failed' );\n\n\tif ( isset( $_REQUEST['username'] ) || isset( $_REQUEST['password'] ) ) {\n\t\treturn yourls__( 'Invalid username or password' );\n\t} else {\n\t\treturn yourls__( 'Please log in' );\n\t}\n}\n\n/**\n * Check auth against list of login=>pwd. Sets user if applicable, returns bool\n *\n */\nfunction yourls_check_username_password() {\n\tglobal $yourls_user_passwords;\n\n\t// If login form (not API), check for nonce\n    if(!yourls_is_API()) {\n        yourls_verify_nonce('admin_login');\n    }\n\n\tif( isset( $yourls_user_passwords[ $_REQUEST['username'] ] ) && yourls_check_password_hash( $_REQUEST['username'], $_REQUEST['password'] ) ) {\n\t\tyourls_set_user( $_REQUEST['username'] );\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Check a submitted password sent in plain text against stored password which can be a salted hash\n *\n */\nfunction yourls_check_password_hash( $user, $submitted_password ) {\n\tglobal $yourls_user_passwords;\n\n\tif( !isset( $yourls_user_passwords[ $user ] ) )\n\t\treturn false;\n\n\tif ( yourls_has_phpass_password( $user ) ) {\n\t\t// Stored password is hashed\n\t\tlist( , $hash ) = explode( ':', $yourls_user_passwords[ $user ] );\n\t\t$hash = str_replace( '!', '$', $hash );\n\t\treturn ( yourls_phpass_check( $submitted_password, $hash ) );\n\t} else if( yourls_has_md5_password( $user ) ) {\n\t\t// Stored password is a salted md5 hash: \"md5:<$r = rand(10000,99999)>:<md5($r.'thepassword')>\"\n\t\tlist( , $salt, ) = explode( ':', $yourls_user_passwords[ $user ] );\n\t\treturn( $yourls_user_passwords[ $user ] == 'md5:'.$salt.':'.md5( $salt . $submitted_password ) );\n\t} else {\n\t\t// Password stored in clear text\n\t\treturn( $yourls_user_passwords[ $user ] === $submitted_password );\n\t}\n}\n\n/**\n * Overwrite plaintext passwords in config file with hashed versions.\n *\n * @since 1.7\n * @param string $config_file Full path to file\n * @return true|string  if overwrite was successful, an error message otherwise\n */\nfunction yourls_hash_passwords_now( $config_file ) {\n\tif( !is_readable( $config_file ) )\n\t\treturn 'cannot read file'; // not sure that can actually happen...\n\n\tif( !is_writable( $config_file ) )\n\t\treturn 'cannot write file';\n\n    $yourls_user_passwords = [];\n\t// Include file to read value of $yourls_user_passwords\n\t// Temporary suppress error reporting to avoid notices about redeclared constants\n\t$errlevel = error_reporting();\n\terror_reporting( 0 );\n\trequire $config_file;\n\terror_reporting( $errlevel );\n\n\t$configdata = file_get_contents( $config_file );\n\tif( $configdata == false )\n\t\treturn 'could not read file';\n\n\t$to_hash = 0; // keep track of number of passwords that need hashing\n\tforeach ( $yourls_user_passwords as $user => $password ) {\n\t\tif ( !yourls_has_phpass_password( $user ) && !yourls_has_md5_password( $user ) ) {\n\t\t\t$to_hash++;\n\t\t\t$hash = yourls_phpass_hash( $password );\n\t\t\t// PHP would interpret $ as a variable, so replace it in storage.\n\t\t\t$hash = str_replace( '$', '!', $hash );\n\t\t\t$quotes = \"'\" . '\"';\n\t\t\t$pattern = \"/[$quotes]${user}[$quotes]\\s*=>\\s*[$quotes]\" . preg_quote( $password, '/' ) . \"[$quotes]/\";\n\t\t\t$replace = \"'$user' => 'phpass:$hash' /* Password encrypted by YOURLS */ \";\n\t\t\t$count = 0;\n\t\t\t$configdata = preg_replace( $pattern, $replace, $configdata, -1, $count );\n\t\t\t// There should be exactly one replacement. Otherwise, fast fail.\n\t\t\tif ( $count != 1 ) {\n\t\t\t\tyourls_debug_log( \"Problem with preg_replace for password hash of user $user\" );\n\t\t\t\treturn 'preg_replace problem';\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $to_hash == 0 )\n\t\treturn 0; // There was no password to encrypt\n\n\t$success = file_put_contents( $config_file, $configdata );\n\tif ( $success === FALSE ) {\n\t\tyourls_debug_log( 'Failed writing to ' . $config_file );\n\t\treturn 'could not write file';\n\t}\n\n    yourls_debug_log('Successfully encrypted passwords in ' . basename($config_file));\n\treturn true;\n}\n\n/**\n * Create a password hash\n *\n * @since 1.7\n * @param string $password password to hash\n * @return string hashed password\n */\nfunction yourls_phpass_hash( $password ) {\n    /**\n     * Filter for hashing algorithm. See https://www.php.net/manual/en/function.password-hash.php\n     * Hashing algos are available if PHP was compiled with it.\n     * PASSWORD_BCRYPT is always available.\n     */\n    $algo    = yourls_apply_filter('hash_algo', PASSWORD_BCRYPT);\n\n    /**\n     * Filter for hashing options. See https://www.php.net/manual/en/function.password-hash.php\n     * A typical option for PASSWORD_BCRYPT would be ['cost' => <int in range 4-31> ]\n     * We're leaving the options at default values, which means a cost of 10 for PASSWORD_BCRYPT.\n     *\n     * If willing to modify this, be warned about the computing time, as there is a 2^n factor.\n     * See https://gist.github.com/ozh/65a75392b7cb254131cc55afd28de99b for examples.\n     */\n    $options = yourls_apply_filter('hash_options', [] );\n\n    return password_hash($password, $algo, $options);\n}\n\n/**\n * Verify that a password matches a hash\n *\n * @since 1.7\n * @param string $password clear (eg submitted in a form) password\n * @param string $hash hash\n * @return bool true if the hash matches the password, false otherwise\n */\nfunction yourls_phpass_check( $password, $hash ) {\n\treturn password_verify($password, $hash);\n}\n\n\n/**\n * Check to see if any passwords are stored as cleartext.\n *\n * @since 1.7\n * @return bool true if any passwords are cleartext\n */\nfunction yourls_has_cleartext_passwords() {\n\tglobal $yourls_user_passwords;\n\tforeach ( $yourls_user_passwords as $user => $pwdata ) {\n\t\tif ( !yourls_has_md5_password( $user ) && !yourls_has_phpass_password( $user ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Check if a user has a md5 hashed password\n *\n * Check if a user password is 'md5:[38 chars]'.\n * TODO: deprecate this when/if we have proper user management with password hashes stored in the DB\n *\n * @since 1.7\n * @param string $user user login\n * @return bool true if password hashed, false otherwise\n */\nfunction yourls_has_md5_password( $user ) {\n\tglobal $yourls_user_passwords;\n\treturn(    isset( $yourls_user_passwords[ $user ] )\n\t        && substr( $yourls_user_passwords[ $user ], 0, 4 ) == 'md5:'\n\t\t    && strlen( $yourls_user_passwords[ $user ] ) == 42 // http://www.google.com/search?q=the+answer+to+life+the+universe+and+everything\n\t\t   );\n}\n\n/**\n * Check if a user's password is hashed with password_hash\n *\n * Check if a user password is 'phpass:[lots of chars]'.\n * (For historical reason we're using 'phpass' as an identifier.)\n * TODO: deprecate this when/if we have proper user management with password hashes stored in the DB\n *\n * @since 1.7\n * @param string $user user login\n * @return bool true if password hashed with password_hash, otherwise false\n */\nfunction yourls_has_phpass_password( $user ) {\n\tglobal $yourls_user_passwords;\n\treturn( isset( $yourls_user_passwords[ $user ] )\n\t        && substr( $yourls_user_passwords[ $user ], 0, 7 ) == 'phpass:'\n\t);\n}\n\n/**\n * Check auth against encrypted COOKIE data. Sets user if applicable, returns bool\n *\n */\nfunction yourls_check_auth_cookie() {\n\tglobal $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif ( yourls_cookie_value( $valid_user ) === $_COOKIE[ yourls_cookie_name() ] ) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Check auth against signature and timestamp. Sets user if applicable, returns bool\n *\n * Original usage :\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<md5 hash>&action=...\n * Since 1.7.7 we allow a `hash` parameter and an arbitrary hashed signature, hashed\n * with the `hash` function. Examples :\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<sha512 hash>&hash=sha512&action=...\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<crc32 hash>&hash=crc32&action=...\n *\n * @since 1.4.1\n * @return bool False if signature or timestamp missing or invalid, true if valid\n */\nfunction yourls_check_signature_timestamp() {\n    if(   !isset( $_REQUEST['signature'] ) OR empty( $_REQUEST['signature'] )\n       OR !isset( $_REQUEST['timestamp'] ) OR empty( $_REQUEST['timestamp'] )\n    ) {\n        return false;\n    }\n\n    // Exit if the timestamp argument is outdated or invalid\n    if( !yourls_check_timestamp( $_REQUEST['timestamp'] )) {\n        return false;\n    }\n\n    // if there is a hash argument, make sure it's part of the availables algos\n    $hash_function = isset($_REQUEST['hash']) ? (string)$_REQUEST['hash'] : 'md5';\n    if( !in_array($hash_function, hash_algos()) ) {\n        return false;\n    }\n\n\t// Check signature & timestamp against all possible users\n\tglobal $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif (\n            hash( $hash_function, $_REQUEST['timestamp'].yourls_auth_signature( $valid_user ) ) === $_REQUEST['signature']\n            or\n            hash( $hash_function, yourls_auth_signature( $valid_user ).$_REQUEST['timestamp'] ) === $_REQUEST['signature']\n\t\t\t) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\n    // Signature doesn't match known user\n\treturn false;\n}\n\n/**\n * Check auth against signature. Sets user if applicable, returns bool\n *\n * @since 1.4.1\n * @return bool False if signature missing or invalid, true if valid\n */\nfunction yourls_check_signature() {\n    if( !isset( $_REQUEST['signature'] ) OR empty( $_REQUEST['signature'] ) )\n        return false;\n\n\t// Check signature against all possible users\n    global $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif ( yourls_auth_signature( $valid_user ) === $_REQUEST['signature'] ) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\n    // Signature doesn't match known user\n\treturn false;\n}\n\n/**\n * Generate secret signature hash\n *\n */\nfunction yourls_auth_signature( $username = false ) {\n\tif( !$username && defined('YOURLS_USER') ) {\n\t\t$username = YOURLS_USER;\n\t}\n\treturn ( $username ? substr( yourls_salt( $username ), 0, 10 ) : 'Cannot generate auth signature: no username' );\n}\n\n/**\n * Check if timestamp is not too old\n *\n */\nfunction yourls_check_timestamp( $time ) {\n\t$now = time();\n\t// Allow timestamp to be a little in the future or the past -- see Issue 766\n\treturn yourls_apply_filter( 'check_timestamp', abs( $now - (int)$time ) < yourls_get_nonce_life(), $time );\n}\n\n/**\n * Store new cookie. No $user will delete the cookie.\n *\n * @param mixed $user  String, user login, or null to delete cookie\n */\nfunction yourls_store_cookie( $user = null ) {\n\n    // No user will delete the cookie with a cookie time from the past\n\tif( !$user ) {\n\t\t$time = time() - 3600;\n\t} else {\n\t\t$time = time() + yourls_get_cookie_life();\n\t}\n\n    $path     = yourls_apply_filter( 'setcookie_path',     '/' );\n\t$domain   = yourls_apply_filter( 'setcookie_domain',   parse_url( yourls_get_yourls_site(), PHP_URL_HOST ) );\n\t$secure   = yourls_apply_filter( 'setcookie_secure',   yourls_is_ssl() );\n\t$httponly = yourls_apply_filter( 'setcookie_httponly', true );\n\n\t// Some browsers refuse to store localhost cookie\n\tif ( $domain == 'localhost' )\n\t\t$domain = '';\n\n    if ( !headers_sent( $filename, $linenum ) ) {\n        yourls_setcookie( yourls_cookie_name(), yourls_cookie_value( $user ), $time, $path, $domain, $secure, $httponly );\n\t} else {\n\t\t// For some reason cookies were not stored: action to be able to debug that\n\t\tyourls_do_action( 'setcookie_failed', $user );\n        yourls_debug_log( \"Could not store cookie: headers already sent in $filename on line $linenum\" );\n\t}\n}\n\n/**\n * Replacement for PHP's setcookie(), with support for SameSite cookie attribute\n *\n * @see https://github.com/GoogleChromeLabs/samesite-examples/blob/master/php.md\n * @see https://stackoverflow.com/a/59654832/36850\n * @see https://3v4l.org/uKEtH for compat tests\n * @see https://www.php.net/manual/en/function.setcookie.php\n *\n * @since  1.7.7\n * @param  string  $name       cookie name\n * @param  string  $value      cookie value\n * @param  int     $expire     time the cookie expires as a Unix timestamp (number of seconds since the epoch)\n * @param  string  $path       path on the server in which the cookie will be available on\n * @param  string  $domain     (sub)domain that the cookie is available to\n * @param  bool    $secure     if cookie should only be transmitted over a secure HTTPS connection\n * @param  bool    $httponly   if cookie will be made accessible only through the HTTP protocol\n * @return bool                setcookie() result : false if output sent before, true otherwise. This does not indicate whether the user accepted the cookie.\n */\nfunction yourls_setcookie($name, $value, $expire, $path, $domain, $secure, $httponly) {\n    $samesite = yourls_apply_filter('setcookie_samesite', 'Lax' );\n\n    if (PHP_VERSION_ID < 70300) {\n        return(setcookie($name, $value, $expire, \"$path; samesite=$samesite\", $domain, $secure, $httponly));\n    }\n    else {\n        return(setcookie($name, $value, array(\n            'expires'  => $expire,\n            'path'     => $path,\n            'domain'   => $domain,\n            'samesite' => $samesite,\n            'secure'   => $secure,\n            'httponly' => $httponly,\n        )));\n    }\n}\n\n/**\n * Set user name\n *\n */\nfunction yourls_set_user( $user ) {\n\tif( !defined( 'YOURLS_USER' ) )\n\t\tdefine( 'YOURLS_USER', $user );\n}\n\n/**\n * Get YOURLS_COOKIE_LIFE value (ie the life span of an auth cookie in seconds)\n *\n * Use this function instead of directly using the constant. This way, its value can be modified by plugins\n * on a per case basis\n *\n * @since 1.7.7\n * @see includes/Config/Config.php\n * @return integer     cookie life span, in seconds\n */\nfunction yourls_get_cookie_life() {\n\treturn yourls_apply_filter( 'get_cookie_life', YOURLS_COOKIE_LIFE );\n}\n\n/**\n * Get YOURLS_NONCE_LIFE value (ie life span of a nonce in seconds)\n *\n * Use this function instead of directly using the constant. This way, its value can be modified by plugins\n * on a per case basis\n *\n * @since 1.7.7\n * @see includes/Config/Config.php\n * @see https://en.wikipedia.org/wiki/Cryptographic_nonce\n * @return integer     nonce life span, in seconds\n */\nfunction yourls_get_nonce_life() {\n\treturn yourls_apply_filter( 'get_nonce_life', YOURLS_NONCE_LIFE );\n}\n\n/**\n * Get YOURLS cookie name\n *\n * The name is unique for each install, to prevent mismatch between sho.rt and very.sho.rt -- see #1673\n *\n * TODO: when multi user is implemented, the whole cookie stuff should be reworked to allow storing multiple users\n *\n * @since 1.7.1\n * @return string  unique cookie name for a given YOURLS site\n */\nfunction yourls_cookie_name() {\n    return yourls_apply_filter( 'cookie_name', 'yourls_' . yourls_salt( yourls_get_yourls_site() ) );\n}\n\n/**\n * Get auth cookie value\n *\n * @since 1.7.7\n * @param string $user     user name\n * @return string          cookie value\n */\nfunction yourls_cookie_value( $user ) {\n\treturn yourls_apply_filter( 'set_cookie_value', yourls_salt( $user ), $user );\n}\n\n/**\n * Return a time-dependent string for nonce creation\n *\n * Actually, this returns a float: ceil rounds up a value but is of type float, see https://www.php.net/ceil\n *\n */\nfunction yourls_tick() {\n\treturn ceil( time() / yourls_get_nonce_life() );\n}\n\n/**\n * Return salted string\n *\n */\nfunction yourls_salt( $string ) {\n\t$salt = defined('YOURLS_COOKIEKEY') ? YOURLS_COOKIEKEY : md5(__FILE__) ;\n\treturn yourls_apply_filter( 'yourls_salt', md5 ($string . $salt), $string );\n}\n\n/**\n * Create a time limited, action limited and user limited token\n *\n */\nfunction yourls_create_nonce( $action, $user = false ) {\n\tif( false == $user )\n\t\t$user = defined( 'YOURLS_USER' ) ? YOURLS_USER : '-1';\n\t$tick = yourls_tick();\n\t$nonce = substr( yourls_salt($tick . $action . $user), 0, 10 );\n\t// Allow plugins to alter the nonce\n\treturn yourls_apply_filter( 'create_nonce', $nonce, $action, $user );\n}\n\n/**\n * Create a nonce field for inclusion into a form\n *\n */\nfunction yourls_nonce_field( $action, $name = 'nonce', $user = false, $echo = true ) {\n\t$field = '<input type=\"hidden\" id=\"'.$name.'\" name=\"'.$name.'\" value=\"'.yourls_create_nonce( $action, $user ).'\" />';\n\tif( $echo )\n\t\techo $field.\"\\n\";\n\treturn $field;\n}\n\n/**\n * Add a nonce to a URL. If URL omitted, adds nonce to current URL\n *\n */\nfunction yourls_nonce_url( $action, $url = false, $name = 'nonce', $user = false ) {\n\t$nonce = yourls_create_nonce( $action, $user );\n\treturn yourls_add_query_arg( $name, $nonce, $url );\n}\n\n/**\n * Check validity of a nonce (ie time span, user and action match).\n *\n * Returns true if valid, dies otherwise (yourls_die() or die($return) if defined)\n * if $nonce is false or unspecified, it will use $_REQUEST['nonce']\n *\n */\nfunction yourls_verify_nonce( $action, $nonce = false, $user = false, $return = '' ) {\n\t// get user\n\tif( false == $user )\n\t\t$user = defined( 'YOURLS_USER' ) ? YOURLS_USER : '-1';\n\n\t// get current nonce value\n\tif( false == $nonce && isset( $_REQUEST['nonce'] ) )\n\t\t$nonce = $_REQUEST['nonce'];\n\n\t// Allow plugins to short-circuit the rest of the function\n\t$valid = yourls_apply_filter( 'verify_nonce', false, $action, $nonce, $user, $return );\n\tif ($valid) {\n\t\treturn true;\n\t}\n\n\t// what nonce should be\n\t$valid = yourls_create_nonce( $action, $user );\n\n\tif( $nonce == $valid ) {\n\t\treturn true;\n\t} else {\n\t\tif( $return )\n\t\t\tdie( $return );\n\t\tyourls_die( yourls__( 'Unauthorized action or expired link' ), yourls__( 'Error' ), 403 );\n\t}\n}\n\n/**\n * Check if YOURLS_USER comes from environment variables\n *\n * @since 1.8.2\n * @return bool     true if YOURLS_USER and YOURLS_PASSWORD are defined as environment variables\n */\nfunction yourls_is_user_from_env() {\n\treturn yourls_apply_filter('is_user_from_env', getenv('YOURLS_USER') && getenv('YOURLS_PASSWORD'));\n\n}\n\n/**\n * Check if we should hash passwords in the config file\n *\n * By default, passwords are hashed. They are not if\n *    - there is no password in clear text in the config file (ie everything is already hashed)\n *    - the user defined constant YOURLS_NO_HASH_PASSWORD is true, see https://github.com/YOURLS/YOURLS/wiki/Username-Passwords#but-i-dont-want-to-encrypt-my-password-\n *    - YOURLS_USER and YOURLS_PASSWORD are provided by the environment, not the config file\n *\n * @since 1.8.2\n * @return bool\n */\nfunction yourls_maybe_hash_passwords() {\n    $hash = true;\n\n    if ( !yourls_has_cleartext_passwords()\n         OR (yourls_skip_password_hashing())\n         OR (yourls_is_user_from_env())\n    ) {\n        $hash = false;\n    }\n\n    return yourls_apply_filter('maybe_hash_password', $hash );\n}\n\n/**\n * Check if user setting for skipping password hashing is set\n *\n * @since 1.8.2\n * @return bool\n */\nfunction yourls_skip_password_hashing() {\n    return yourls_apply_filter('skip_password_hashing', defined('YOURLS_NO_HASH_PASSWORD') && YOURLS_NO_HASH_PASSWORD);\n}\n", "<?php\n\n/**\n * Display <h1> header and logo\n *\n */\nfunction yourls_html_logo() {\n\tyourls_do_action( 'pre_html_logo' );\n\t?>\n\t<header role=\"banner\">\n\t<h1>\n\t\t<a href=\"<?php echo yourls_admin_url( 'index.php' ) ?>\" title=\"YOURLS\"><span>YOURLS</span>: <span>Y</span>our <span>O</span>wn <span>URL</span> <span>S</span>hortener<br/>\n\t\t<img src=\"<?php yourls_site_url(); ?>/images/yourls-logo.svg?v=<?php echo YOURLS_VERSION; ?>\" id=\"yourls-logo\" alt=\"YOURLS\" title=\"YOURLS\" /></a>\n\t</h1>\n\t</header>\n\t<?php\n\tyourls_do_action( 'html_logo' );\n}\n\n/**\n * Display HTML head and <body> tag\n *\n * @param string $context Context of the page (stats, index, infos, ...)\n * @param string $title HTML title of the page\n */\nfunction yourls_html_head( $context = 'index', $title = '' ) {\n\n\tyourls_do_action( 'pre_html_head', $context, $title );\n\n\t// All components to false, except when specified true\n\t$share = $insert = $tablesorter = $tabs = $cal = $charts = false;\n\n\t// Load components as needed\n\tswitch ( $context ) {\n\t\tcase 'infos':\n\t\t\t$share = $tabs = $charts = true;\n\t\t\tbreak;\n\n\t\tcase 'bookmark':\n\t\t\t$share = $insert = $tablesorter = true;\n\t\t\tbreak;\n\n\t\tcase 'index':\n\t\t\t$insert = $tablesorter = $cal = $share = true;\n\t\t\tbreak;\n\n\t\tcase 'plugins':\n\t\tcase 'tools':\n\t\t\t$tablesorter = true;\n\t\t\tbreak;\n\n\t\tcase 'install':\n\t\tcase 'login':\n\t\tcase 'new':\n\t\tcase 'upgrade':\n\t\t\tbreak;\n\t}\n\n\t// Force no cache for all admin pages\n\tif( yourls_is_admin() && !headers_sent() ) {\n        yourls_no_cache_headers();\n        yourls_no_frame_header();\n\t\tyourls_content_type_header( yourls_apply_filter( 'html_head_content-type', 'text/html' ) );\n\t\tyourls_do_action( 'admin_headers', $context, $title );\n\t}\n\n\t// Store page context\n\tyourls_set_html_context($context);\n\n\t// Body class\n\t$bodyclass = yourls_apply_filter( 'bodyclass', '' );\n\t$bodyclass .= ( yourls_is_mobile_device() ? 'mobile' : 'desktop' );\n\n\t// Page title\n\t$_title = 'YOURLS &mdash; Your Own URL Shortener | ' . yourls_link();\n\t$title = $title ? $title . \" &laquo; \" . $_title : $_title;\n\t$title = yourls_apply_filter( 'html_title', $title, $context );\n\n\t?>\n<!DOCTYPE html>\n<html <?php yourls_html_language_attributes(); ?>>\n<head>\n\t<title><?php echo $title ?></title>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php echo yourls_apply_filter( 'html_head_meta_content-type', 'text/html; charset=utf-8' ); ?>\" />\n\t<meta name=\"generator\" content=\"YOURLS <?php echo YOURLS_VERSION ?>\" />\n\t<meta name=\"description\" content=\"YOURLS &raquo; Your Own URL Shortener' | <?php yourls_site_url(); ?>\" />\n\t<?php yourls_do_action('html_head_meta', $context); ?>\n    <?php yourls_html_favicon(); ?>\n\t<script src=\"<?php yourls_site_url(); ?>/js/jquery-3.5.1.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<script src=\"<?php yourls_site_url(); ?>/js/common.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<script src=\"<?php yourls_site_url(); ?>/js/jquery.notifybar.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/style.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t<?php if ( $tabs ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/infos.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/infos.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $tablesorter ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/tablesorter.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/jquery-3.tablesorter.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/tablesorte.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $insert ) { ?>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/insert.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $share ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/share.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/share.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/clipboard.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $cal ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/cal.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<?php yourls_l10n_calendar_strings(); ?>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/jquery.cal.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $charts ) { ?>\n\t\t\t<script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t google.load('visualization', '1.0', {'packages':['corechart', 'geochart']});\n\t\t\t</script>\n\t<?php } ?>\n\t<script type=\"text/javascript\">\n\t//<![CDATA[\n\t\tvar ajaxurl  = '<?php echo yourls_admin_url( 'admin-ajax.php' ); ?>';\n\t//]]>\n\t</script>\n\t<?php yourls_do_action( 'html_head', $context ); ?>\n</head>\n<body class=\"<?php echo $context; ?> <?php echo $bodyclass; ?>\">\n<div id=\"wrap\">\n\t<?php\n}\n\n/**\n * Display HTML footer (including closing body & html tags)\n *\n * Function yourls_die() will call this function with the optional param set to false: most likely, if we're using yourls_die(),\n * there's a problem, so don't maybe add to it by sending another SQL query\n *\n * @param  bool $can_query  If set to false, will not try to send another query to DB server\n * @return void\n */\nfunction yourls_html_footer($can_query = true) {\n    if($can_query & yourls_get_debug_mode()) {\n        $num_queries = yourls_get_num_queries();\n        $num_queries = ' &ndash; '. sprintf( yourls_n( '1 query', '%s queries', $num_queries ), $num_queries );\n    } else {\n        $num_queries = '';\n    }\n\n\t?>\n\t</div><?php // wrap ?>\n\t<footer id=\"footer\" role=\"contentinfo\"><p>\n\t\t<?php\n\t\t$footer  = yourls_s( 'Powered by %s', '<a href=\"http://yourls.org/\" title=\"YOURLS\">YOURLS</a> v ' . YOURLS_VERSION );\n\t\t$footer .= $num_queries;\n\t\techo yourls_apply_filter( 'html_footer_text', $footer );\n\t\t?>\n\t</p></footer>\n\t<?php if( yourls_get_debug_mode() ) {\n\t\techo '<div style=\"text-align:left\"><pre>';\n\t\techo join( \"\\n\", yourls_get_debug_log() );\n\t\techo '</pre></div>';\n\t} ?>\n\t<?php yourls_do_action( 'html_footer', yourls_get_html_context() ); ?>\n\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * Display \"Add new URL\" box\n *\n * @param string $url URL to prefill the input with\n * @param string $keyword Keyword to prefill the input with\n */\nfunction yourls_html_addnew( $url = '', $keyword = '' ) {\n    $pre = yourls_apply_filter( 'shunt_html_addnew', false, $url, $keyword );\n    if ( false !== $pre ) {\n        return $pre;\n    }\n\t?>\n\t<main role=\"main\">\n\t<div id=\"new_url\">\n\t\t<div>\n\t\t\t<form id=\"new_url_form\" action=\"\" method=\"get\">\n\t\t\t\t<div>\n                    <label for=\"add-url\"><strong><?php yourls_e( 'Enter the URL' ); ?></strong></label>:\n                    <input type=\"text\" id=\"add-url\" name=\"url\" value=\"<?php echo $url; ?>\" class=\"text\" size=\"80\" placeholder=\"https://\" />\n                    <label for=\"add-keyword\"><?php yourls_e( 'Optional '); ?> : <strong><?php yourls_e('Custom short URL'); ?></strong></label>:\n                    <input type=\"text\" id=\"add-keyword\" name=\"keyword\" value=\"<?php echo $keyword; ?>\" class=\"text\" size=\"8\" />\n                    <?php yourls_nonce_field( 'add_url', 'nonce-add' ); ?>\n                    <input type=\"button\" id=\"add-button\" name=\"add-button\" value=\"<?php yourls_e( 'Shorten The URL' ); ?>\" class=\"button\" onclick=\"add_link();\" />\n                </div>\n\t\t\t</form>\n\t\t\t<div id=\"feedback\" style=\"display:none\"></div>\n\t\t</div>\n\t\t<?php yourls_do_action( 'html_addnew' ); ?>\n\t</div>\n\t<?php\n}\n\n/**\n * Display main table's footer\n *\n * The $param array is defined in /admin/index.php, check the yourls_html_tfooter() call\n *\n * @param array $params Array of all required parameters\n * @return string Result\n */\nfunction yourls_html_tfooter( $params = array() ) {\n    // Manually extract all parameters from the array. We prefer doing it this way, over using extract(),\n    // to make things clearer and more explicit about what var is used.\n    $search       = $params['search'];\n    $search_text  = $params['search_text'];\n    $search_in    = $params['search_in'];\n    $sort_by      = $params['sort_by'];\n    $sort_order   = $params['sort_order'];\n    $page         = $params['page'];\n    $perpage      = $params['perpage'];\n    $click_filter = $params['click_filter'];\n    $click_limit  = $params['click_limit'];\n    $total_pages  = $params['total_pages'];\n    $date_filter  = $params['date_filter'];\n    $date_first   = $params['date_first'];\n    $date_second  = $params['date_second'];\n\n\t?>\n\t<tfoot>\n\t\t<tr>\n\t\t\t<th colspan=\"6\">\n\t\t\t<div id=\"filter_form\">\n\t\t\t\t<form action=\"\" method=\"get\">\n\t\t\t\t\t<div id=\"filter_options\">\n\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t// First search control: text to search\n\t\t\t\t\t\t$_input = '<input aria-label=\"' .yourls__( 'Search for' ). '\" type=\"text\" name=\"search\" class=\"text\" size=\"12\" value=\"' . yourls_esc_attr( $search_text ) . '\" />';\n\t\t\t\t\t\t$_options = array(\n                            'all'     => yourls__( 'All fields' ),\n\t\t\t\t\t\t\t'keyword' => yourls__( 'Short URL' ),\n\t\t\t\t\t\t\t'url'     => yourls__( 'URL' ),\n\t\t\t\t\t\t\t'title'   => yourls__( 'Title' ),\n\t\t\t\t\t\t\t'ip'      => yourls__( 'IP' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'search_in', $_options, $search_in, false, yourls__( 'Search in' ) );\n\t\t\t\t\t\t/* //translators: \"Search for <input field with text to search> in <select dropdown with URL, title...>\" */\n\t\t\t\t\t\tyourls_se( 'Search for %1$s in %2$s', $_input , $_select );\n\t\t\t\t\t\techo \"&ndash;\\n\";\n\n\t\t\t\t\t\t// Second search control: order by\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'keyword'      => yourls__( 'Short URL' ),\n\t\t\t\t\t\t\t'url'          => yourls__( 'URL' ),\n\t\t\t\t\t\t\t'title'        => yourls__( 'Title' ),\n\t\t\t\t\t\t\t'timestamp'    => yourls__( 'Date' ),\n\t\t\t\t\t\t\t'ip'           => yourls__( 'IP' ),\n\t\t\t\t\t\t\t'clicks'       => yourls__( 'Clicks' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'sort_by', $_options, $sort_by, false,  yourls__( 'Sort by' ) );\n\t\t\t\t\t\t$sort_order = isset( $sort_order ) ? $sort_order : 'desc' ;\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'asc'  => yourls__( 'Ascending' ),\n\t\t\t\t\t\t\t'desc' => yourls__( 'Descending' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select2 = yourls_html_select( 'sort_order', $_options, $sort_order, false,  yourls__( 'Sort order' ) );\n\t\t\t\t\t\t/* //translators: \"Order by <criteria dropdown (date, clicks...)> in <order dropdown (Descending or Ascending)>\" */\n\t\t\t\t\t\tyourls_se( 'Order by %1$s %2$s', $_select , $_select2 );\n\t\t\t\t\t\techo \"&ndash;\\n\";\n\n\t\t\t\t\t\t// Third search control: Show XX rows\n\t\t\t\t\t\t/* //translators: \"Show <text field> rows\" */\n                        $_input = '<input aria-label=\"' .yourls__( 'Number of rows to show' ). '\" type=\"text\" name=\"perpage\" class=\"text\" size=\"2\" value=\"' . $perpage . '\" />';\n\t\t\t\t\t\tyourls_se( 'Show %s rows',  $_input );\n\t\t\t\t\t\techo \"<br/>\\n\";\n\n\t\t\t\t\t\t// Fourth search control: Show links with more than XX clicks\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'more' => yourls__( 'more' ),\n\t\t\t\t\t\t\t'less' => yourls__( 'less' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'click_filter', $_options, $click_filter, false, yourls__( 'Show links with' ) );\n\t\t\t\t\t\t$_input  = '<input aria-label=\"' .yourls__( 'Number of clicks' ). '\" type=\"text\" name=\"click_limit\" class=\"text\" size=\"4\" value=\"' . $click_limit . '\" /> ';\n\t\t\t\t\t\t/* //translators: \"Show links with <more/less> than <text field> clicks\" */\n\t\t\t\t\t\tyourls_se( 'Show links with %1$s than %2$s clicks', $_select, $_input );\n\t\t\t\t\t\techo \"<br/>\\n\";\n\n\t\t\t\t\t\t// Fifth search control: Show links created before/after/between ...\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'before'  => yourls__('before'),\n\t\t\t\t\t\t\t'after'   => yourls__('after'),\n\t\t\t\t\t\t\t'between' => yourls__('between'),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'date_filter', $_options, $date_filter, false, yourls__('Show links created') );\n\t\t\t\t\t\t$_input  = '<input aria-label=\"' .yourls__('Select a date') . '\" type=\"text\" name=\"date_first\" id=\"date_first\" class=\"text\" size=\"12\" value=\"' . $date_first . '\" />';\n\t\t\t\t\t\t$_and    = '<span id=\"date_and\"' . ( $date_filter === 'between' ? ' style=\"display:inline\"' : '' ) . '> &amp; </span>';\n\t\t\t\t\t\t$_input2 = '<input aria-label=\"' .yourls__('Select an end date') . '\" type=\"text\" name=\"date_second\" id=\"date_second\" class=\"text\" size=\"12\" value=\"' . $date_second . '\"' . ( $date_filter === 'between' ? ' style=\"display:inline\"' : '' ) . '/>';\n\t\t\t\t\t\t/* //translators: \"Show links created <before/after/between> <date input> <\"and\" if applicable> <date input if applicable>\" */\n\t\t\t\t\t\tyourls_se( 'Show links created %1$s %2$s %3$s %4$s', $_select, $_input, $_and, $_input2 );\n\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t<div id=\"filter_buttons\">\n\t\t\t\t\t\t\t<input type=\"submit\" id=\"submit-sort\" value=\"<?php yourls_e('Search'); ?>\" class=\"button primary\" />\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<input type=\"button\" id=\"submit-clear-filter\" value=\"<?php yourls_e('Clear'); ?>\" class=\"button\" onclick=\"window.parent.location.href = 'index.php'\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t\t// Remove empty keys from the $params array so it doesn't clutter the pagination links\n\t\t\t$params = array_filter( $params, 'yourls_return_if_not_empty_string' ); // remove empty keys\n\n\t\t\tif( isset( $search_text ) ) {\n\t\t\t\t$params['search'] = $search_text;\n\t\t\t\tunset( $params['search_text'] );\n\t\t\t}\n\t\t\t?>\n\n\t\t\t<div id=\"pagination\">\n\t\t\t\t<span class=\"navigation\">\n\t\t\t\t<?php if( $total_pages > 1 ) { ?>\n\t\t\t\t\t<span class=\"nav_total\"><?php echo sprintf( yourls_n( '1 page', '%s pages', $total_pages ), $total_pages ); ?></span>\n\t\t\t\t\t<?php\n\t\t\t\t\t$base_page = yourls_admin_url( 'index.php' );\n\t\t\t\t\t// Pagination offsets: min( max ( zomg! ) );\n\t\t\t\t\t$p_start = max(  min( $total_pages - 4, $page - 2 ), 1 );\n\t\t\t\t\t$p_end = min( max( 5, $page + 2 ), $total_pages );\n\t\t\t\t\tif( $p_start >= 2 ) {\n\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => 1 ) ), $base_page );\n\t\t\t\t\t\techo '<span class=\"nav_link nav_first\"><a href=\"' . $link . '\" title=\"' . yourls_esc_attr__('Go to First Page') . '\">' . yourls__( '&laquo; First' ) . '</a></span>';\n\t\t\t\t\t\techo '<span class=\"nav_link nav_prev\"></span>';\n\t\t\t\t\t}\n\t\t\t\t\tfor( $i = $p_start ; $i <= $p_end; $i++ ) {\n\t\t\t\t\t\tif( $i == $page ) {\n\t\t\t\t\t\t\techo \"<span class='nav_link nav_current'>$i</span>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => $i ) ), $base_page );\n\t\t\t\t\t\t\techo '<span class=\"nav_link nav_goto\"><a href=\"' . $link . '\" title=\"' . sprintf( yourls_esc_attr( 'Page %s' ), $i ) .'\">'.$i.'</a></span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif( ( $p_end ) < $total_pages ) {\n\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => $total_pages ) ), $base_page );\n\t\t\t\t\t\techo '<span class=\"nav_link nav_next\"></span>';\n\t\t\t\t\t\techo '<span class=\"nav_link nav_last\"><a href=\"' . $link . '\" title=\"' . yourls_esc_attr__('Go to Last Page') . '\">' . yourls__( 'Last &raquo;' ) . '</a></span>';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t<?php } ?>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t</th>\n\t\t</tr>\n\t\t<?php yourls_do_action( 'html_tfooter' ); ?>\n\t</tfoot>\n\t<?php\n}\n\n/**\n * Return or display a select dropdown field\n *\n * @since 1.6\n *\n * @param  string  $name      HTML 'name' (also use as the HTML 'id')\n * @param  array   $options   array of 'value' => 'Text displayed'\n * @param  string  $selected  optional 'value' from the $options array that will be highlighted\n * @param  boolean $display   false (default) to return, true to echo\n * @param  string  $label     ARIA label of the element\n * @return string HTML content of the select element\n */\nfunction yourls_html_select( $name, $options, $selected = '', $display = false, $label = '' ) {\n\t$html = \"<select aria-label='$label' name='$name' id='$name' size='1'>\\n\";\n\tforeach( $options as $value => $text ) {\n\t\t$html .= \"<option value='$value' \";\n\t\t$html .= $selected == $value ? ' selected=\"selected\"' : '';\n\t\t$html .= \">$text</option>\\n\";\n\t}\n\t$html .= \"</select>\\n\";\n\t$html  = yourls_apply_filter( 'html_select', $html, $name, $options, $selected, $display );\n\tif( $display )\n\t\techo $html;\n\treturn $html;\n}\n\n/**\n * Display the Quick Share box\n *\n */\nfunction yourls_share_box( $longurl, $shorturl, $title = '', $text='', $shortlink_title = '', $share_title = '', $hidden = false ) {\n\tif ( $shortlink_title == '' )\n\t\t$shortlink_title = '<h2>' . yourls__( 'Your short link' ) . '</h2>';\n\tif ( $share_title == '' )\n\t\t$share_title = '<h2>' . yourls__( 'Quick Share' ) . '</h2>';\n\n\t// Allow plugins to short-circuit the whole function\n\t$pre = yourls_apply_filter( 'shunt_share_box', false );\n\tif ( false !== $pre )\n\t\treturn $pre;\n\n    // Make sure IDN domains are in their UTF8 form\n    $shorturl = yourls_normalize_uri($shorturl);\n\n\t$text   = ( $text ? '\"'.$text.'\" ' : '' );\n\t$title  = ( $title ? \"$title \" : '' );\n\t$share  = yourls_esc_textarea( $title.$text.$shorturl );\n\t$count  = 280 - strlen( $share );\n\t$hidden = ( $hidden ? 'style=\"display:none;\"' : '' );\n\n\t// Allow plugins to filter all data\n\t$data = compact( 'longurl', 'shorturl', 'title', 'text', 'shortlink_title', 'share_title', 'share', 'count', 'hidden' );\n\t$data = yourls_apply_filter( 'share_box_data', $data );\n\textract( $data );\n\n\t$_share = rawurlencode( $share );\n\t$_url   = rawurlencode( $shorturl );\n\t?>\n\n\t<div id=\"shareboxes\" <?php echo $hidden; ?>>\n\n\t\t<?php yourls_do_action( 'shareboxes_before', $longurl, $shorturl, $title, $text ); ?>\n\n\t\t<div id=\"copybox\" class=\"share\">\n\t\t<?php echo $shortlink_title; ?>\n\t\t\t<p><input id=\"copylink\" class=\"text\" size=\"32\" value=\"<?php echo yourls_esc_url( $shorturl ); ?>\" /></p>\n\t\t\t<p><small><?php yourls_e( 'Long link' ); ?>: <a id=\"origlink\" href=\"<?php echo yourls_esc_url( $longurl ); ?>\"><?php echo yourls_esc_url( $longurl ); ?></a></small>\n\t\t\t<?php if( yourls_do_log_redirect() ) { ?>\n\t\t\t<br/><small><?php yourls_e( 'Stats' ); ?>: <a id=\"statlink\" href=\"<?php echo yourls_esc_url( $shorturl ); ?>+\"><?php echo yourls_esc_url( $shorturl ); ?>+</a></small>\n\t\t\t<input type=\"hidden\" id=\"titlelink\" value=\"<?php echo yourls_esc_attr( $title ); ?>\" />\n\t\t\t<?php } ?>\n\t\t\t</p>\n\t\t</div>\n\n\t\t<?php yourls_do_action( 'shareboxes_middle', $longurl, $shorturl, $title, $text ); ?>\n\n\t\t<div id=\"sharebox\" class=\"share\">\n\t\t\t<?php echo $share_title; ?>\n\t\t\t<div id=\"tweet\">\n\t\t\t\t<span id=\"charcount\" class=\"hide-if-no-js\"><?php echo $count; ?></span>\n\t\t\t\t<textarea id=\"tweet_body\"><?php echo $share; ?></textarea>\n\t\t\t</div>\n\t\t\t<p id=\"share_links\"><?php yourls_e( 'Share with' ); ?>\n\t\t\t\t<a id=\"share_tw\" href=\"https://twitter.com/intent/tweet?text=<?php echo $_share; ?>\" title=\"<?php yourls_e( 'Tweet this!' ); ?>\" onclick=\"share('tw');return false\">Twitter</a>\n\t\t\t\t<a id=\"share_fb\" href=\"https://www.facebook.com/share.php?u=<?php echo $_url; ?>\" title=\"<?php yourls_e( 'Share on Facebook' ); ?>\" onclick=\"share('fb');return false;\">Facebook</a>\n\t\t\t\t<?php\n\t\t\t\tyourls_do_action( 'share_links', $longurl, $shorturl, $title, $text );\n\t\t\t\t// Note: on the main admin page, there are no parameters passed to the sharebox when it's drawn.\n\t\t\t\t?>\n\t\t\t</p>\n\t\t</div>\n\n\t\t<?php yourls_do_action( 'shareboxes_after', $longurl, $shorturl, $title, $text ); ?>\n\n\t</div>\n\n\t<?php\n}\n\n/**\n * Die die die\n *\n */\nfunction yourls_die( $message = '', $title = '', $header_code = 200 ) {\n    yourls_do_action( 'pre_yourls_die', $message, $title, $header_code );\n\n\tyourls_status_header( $header_code );\n\n\tif( !yourls_did_action( 'html_head' ) ) {\n\t\tyourls_html_head();\n\t\tyourls_html_logo();\n\t}\n\techo yourls_apply_filter( 'die_title', \"<h2>$title</h2>\" );\n\techo yourls_apply_filter( 'die_message', \"<p>$message</p>\" );\n    // Hook into 'yourls_die' to add more elements or messages to that page\n\tyourls_do_action( 'yourls_die' );\n\tif( !yourls_did_action( 'html_footer' ) ) {\n\t\tyourls_html_footer(false);\n\t}\n\n\t// die with a value in case we're running tests, so PHPUnit doesn't exit with 0 as if success\n\tdie(1);\n}\n\n/**\n * Return an \"Edit\" row for the main table\n *\n * @param string $keyword Keyword to edit\n * @return string HTML of the edit row\n */\nfunction yourls_table_edit_row( $keyword ) {\n    $keyword = yourls_sanitize_keyword($keyword);\n\t$id = yourls_unique_element_id();\n\t$url = yourls_get_keyword_longurl( $keyword );\n\t$title = htmlspecialchars( yourls_get_keyword_title( $keyword ) );\n\t$safe_url = yourls_esc_attr( $url );\n\t$safe_title = yourls_esc_attr( $title );\n\t$safe_keyword = yourls_esc_attr( $keyword );\n\n    // Make strings sprintf() safe: '%' -> '%%'\n    $safe_url = str_replace( '%', '%%', $safe_url );\n    $safe_title = str_replace( '%', '%%', $safe_title );\n\n\t$www = yourls_link();\n\n\t$nonce = yourls_create_nonce( 'edit-save_'.$id );\n\n\tif( $url ) {\n\t\t$return = <<<RETURN\n<tr id=\"edit-$id\" class=\"edit-row\"><td colspan=\"5\" class=\"edit-row\"><strong>%s</strong>:<input type=\"text\" id=\"edit-url-$id\" name=\"edit-url-$id\" value=\"$safe_url\" class=\"text\" size=\"70\" /><br/><strong>%s</strong>: $www<input type=\"text\" id=\"edit-keyword-$id\" name=\"edit-keyword-$id\" value=\"$safe_keyword\" class=\"text\" size=\"10\" /><br/><strong>%s</strong>: <input type=\"text\" id=\"edit-title-$id\" name=\"edit-title-$id\" value=\"$safe_title\" class=\"text\" size=\"60\" /></td><td colspan=\"1\"><input type=\"button\" id=\"edit-submit-$id\" name=\"edit-submit-$id\" value=\"%s\" title=\"%s\" class=\"button\" onclick=\"edit_link_save('$id');\" />&nbsp;<input type=\"button\" id=\"edit-close-$id\" name=\"edit-close-$id\" value=\"%s\" title=\"%s\" class=\"button\" onclick=\"edit_link_hide('$id');\" /><input type=\"hidden\" id=\"old_keyword_$id\" value=\"$safe_keyword\"/><input type=\"hidden\" id=\"nonce_$id\" value=\"$nonce\"/></td></tr>\nRETURN;\n\t\t$return = sprintf( $return, yourls__( 'Long URL' ), yourls__( 'Short URL' ), yourls__( 'Title' ), yourls__( 'Save' ), yourls__( 'Save new values' ), yourls__( 'Cancel' ), yourls__( 'Cancel editing' ) );\n\t} else {\n\t\t$return = '<tr class=\"edit-row notfound\"><td colspan=\"6\" class=\"edit-row notfound\">' . yourls__( 'Error, URL not found' ) . '</td></tr>';\n\t}\n\n\t$return = yourls_apply_filter( 'table_edit_row', $return, $keyword, $url, $title );\n\n\treturn $return;\n}\n\n/**\n * Return an \"Add\" row for the main table\n *\n * @return string HTML of the edit row\n */\nfunction yourls_table_add_row( $keyword, $url, $title, $ip, $clicks, $timestamp ) {\n\t$keyword  = yourls_sanitize_keyword($keyword);\n\t$id       = yourls_unique_element_id();\n\t$shorturl = yourls_link( $keyword );\n\n\t$statlink = yourls_statlink( $keyword );\n\n\t$delete_link = yourls_nonce_url( 'delete-link_'.$id,\n\t\tyourls_add_query_arg( array( 'id' => $id, 'action' => 'delete', 'keyword' => $keyword ), yourls_admin_url( 'admin-ajax.php' ) )\n\t);\n\n\t$edit_link = yourls_nonce_url( 'edit-link_'.$id,\n\t\tyourls_add_query_arg( array( 'id' => $id, 'action' => 'edit', 'keyword' => $keyword ), yourls_admin_url( 'admin-ajax.php' ) )\n\t);\n\n\t// Action link buttons: the array\n\t$actions = array(\n\t\t'stats' => array(\n\t\t\t'href'    => $statlink,\n\t\t\t'id'      => \"statlink-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Stats' ),\n\t\t\t'anchor'  => yourls__( 'Stats' ),\n\t\t),\n\t\t'share' => array(\n\t\t\t'href'    => '',\n\t\t\t'id'      => \"share-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Share' ),\n\t\t\t'anchor'  => yourls__( 'Share' ),\n\t\t\t'onclick' => \"toggle_share('$id');return false;\",\n\t\t),\n\t\t'edit' => array(\n\t\t\t'href'    => $edit_link,\n\t\t\t'id'      => \"edit-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Edit' ),\n\t\t\t'anchor'  => yourls__( 'Edit' ),\n\t\t\t'onclick' => \"edit_link_display('$id');return false;\",\n\t\t),\n\t\t'delete' => array(\n\t\t\t'href'    => $delete_link,\n\t\t\t'id'      => \"delete-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Delete' ),\n\t\t\t'anchor'  => yourls__( 'Delete' ),\n\t\t\t'onclick' => \"remove_link('$id');return false;\",\n\t\t)\n\t);\n\t$actions = yourls_apply_filter( 'table_add_row_action_array', $actions, $keyword );\n\n\t// Action link buttons: the HTML\n\t$action_links = '';\n\tforeach( $actions as $key => $action ) {\n\t\t$onclick = isset( $action['onclick'] ) ? 'onclick=\"' . $action['onclick'] . '\"' : '' ;\n\t\t$action_links .= sprintf( '<a href=\"%s\" id=\"%s\" title=\"%s\" class=\"%s\" %s>%s</a>',\n\t\t\t$action['href'], $action['id'], $action['title'], 'button button_'.$key, $onclick, $action['anchor']\n\t\t);\n\t}\n\t$action_links = yourls_apply_filter( 'action_links', $action_links, $keyword, $url, $ip, $clicks, $timestamp );\n\n\tif( ! $title )\n\t\t$title = $url;\n\n\t$protocol_warning = '';\n\tif( ! in_array( yourls_get_protocol( $url ) , array( 'http://', 'https://' ) ) )\n\t\t$protocol_warning = yourls_apply_filter( 'add_row_protocol_warning', '<span class=\"warning\" title=\"' . yourls__( 'Not a common link' ) . '\">&#9733;</span>' );\n\n\t// Row cells: the array\n\t$cells = array(\n\t\t'keyword' => array(\n\t\t\t'template'      => '<a href=\"%shorturl%\">%keyword_html%</a>',\n\t\t\t'shorturl'      => yourls_esc_url( $shorturl ),\n\t\t\t'keyword_html'  => yourls_esc_html( $keyword ),\n\t\t),\n\t\t'url' => array(\n\t\t\t'template'      => '<a href=\"%long_url%\" title=\"%title_attr%\">%title_html%</a><br/><small>%warning%<a href=\"%long_url%\">%long_url_html%</a></small>',\n\t\t\t'long_url'      => yourls_esc_url( $url ),\n\t\t\t'title_attr'    => yourls_esc_attr( $title ),\n\t\t\t'title_html'    => yourls_esc_html( yourls_trim_long_string( $title ) ),\n\t\t\t'long_url_html' => yourls_esc_html( yourls_trim_long_string( urldecode( $url ) ) ),\n\t\t\t'warning'       => $protocol_warning,\n\t\t),\n\t\t'timestamp' => array(\n\t\t\t'template' => '<span class=\"timestamp\" aria-hidden=\"true\">%timestamp%</span> %date%',\n            'timestamp' => $timestamp,\n\t\t\t'date'     => yourls_date_i18n( yourls_get_datetime_format('M d, Y H:i'), yourls_get_timestamp( $timestamp )),\n\t\t),\n\t\t'ip' => array(\n\t\t\t'template' => '%ip%',\n\t\t\t'ip'       => $ip,\n\t\t),\n\t\t'clicks' => array(\n\t\t\t'template' => '%clicks%',\n\t\t\t'clicks'   => yourls_number_format_i18n( $clicks, 0, '', '' ),\n\t\t),\n\t\t'actions' => array(\n\t\t\t'template' => '%actions% <input type=\"hidden\" id=\"keyword_%id%\" value=\"%keyword%\"/>',\n\t\t\t'actions'  => $action_links,\n\t\t\t'id'       => $id,\n\t\t\t'keyword'  => $keyword,\n\t\t),\n\t);\n\t$cells = yourls_apply_filter( 'table_add_row_cell_array', $cells, $keyword, $url, $title, $ip, $clicks, $timestamp );\n\n\t// Row cells: the HTML. Replace every %stuff% in 'template' with 'stuff' value.\n\t$row = \"<tr id=\\\"id-$id\\\">\";\n\tforeach( $cells as $cell_id => $elements ) {\n\t\t$row .= sprintf( '<td class=\"%s\" id=\"%s\">', $cell_id, $cell_id . '-' . $id );\n\t\t$row .= preg_replace_callback( '/%([^%]+)?%/', function( $match ) use ( $elements ) { return $elements[ $match[1] ]; }, $elements['template'] );\n\t\t$row .= '</td>';\n\t}\n\t$row .= \"</tr>\";\n\t$row  = yourls_apply_filter( 'table_add_row', $row, $keyword, $url, $title, $ip, $clicks, $timestamp );\n\n\treturn $row;\n}\n\n/**\n * Echo the main table head\n *\n */\nfunction yourls_table_head() {\n\t$start = '<table id=\"main_table\" class=\"tblSorter\" cellpadding=\"0\" cellspacing=\"1\"><thead><tr>'.\"\\n\";\n\techo yourls_apply_filter( 'table_head_start', $start );\n\n\t$cells = yourls_apply_filter( 'table_head_cells', array(\n\t\t'shorturl' => yourls__( 'Short URL' ),\n\t\t'longurl'  => yourls__( 'Original URL' ),\n\t\t'date'     => yourls__( 'Date' ),\n\t\t'ip'       => yourls__( 'IP' ),\n\t\t'clicks'   => yourls__( 'Clicks' ),\n\t\t'actions'  => yourls__( 'Actions' )\n\t) );\n\tforeach( $cells as $k => $v ) {\n\t\techo \"<th id='main_table_head_$k'><span>$v</span></th>\\n\";\n\t}\n\n\t$end = \"</tr></thead>\\n\";\n\techo yourls_apply_filter( 'table_head_end', $end );\n}\n\n/**\n * Echo the tbody start tag\n *\n */\nfunction yourls_table_tbody_start() {\n\techo yourls_apply_filter( 'table_tbody_start', '<tbody>' );\n}\n\n/**\n * Echo the tbody end tag\n *\n */\nfunction yourls_table_tbody_end() {\n\techo yourls_apply_filter( 'table_tbody_end', '</tbody>' );\n}\n\n/**\n * Echo the table start tag\n *\n */\nfunction yourls_table_end() {\n\techo yourls_apply_filter( 'table_end', '</table></main>' );\n}\n\n/**\n * Echo HTML tag for a link\n *\n */\nfunction yourls_html_link( $href, $title = '', $element = '' ) {\n\tif( !$title )\n\t\t$title = $href;\n\tif( $element )\n\t\t$element = sprintf( 'id=\"%s\"', yourls_esc_attr( $element ) );\n\t$link = sprintf( '<a href=\"%s\" %s>%s</a>', yourls_esc_url( $href ), $element, yourls_esc_html( $title ) );\n\techo yourls_apply_filter( 'html_link', $link );\n}\n\n/**\n * Display the login screen. Nothing past this point.\n *\n */\nfunction yourls_login_screen( $error_msg = '' ) {\n\tyourls_html_head( 'login' );\n\n\t$action = ( isset( $_GET['action'] ) && $_GET['action'] == 'logout' ? '?' : '' );\n\n\tyourls_html_logo();\n\t?>\n\t<div id=\"login\">\n\t\t<form method=\"post\" action=\"<?php echo $action; ?>\"> <?php // reset any QUERY parameters ?>\n\t\t\t<?php\n\t\t\t\tif( !empty( $error_msg ) ) {\n\t\t\t\t\techo '<p class=\"error\">'.$error_msg.'</p>';\n\t\t\t\t}\n\t\t\t\tyourls_do_action( 'login_form_top' );\n\t\t\t?>\n\t\t\t<p>\n\t\t\t\t<label for=\"username\"><?php yourls_e( 'Username' ); ?></label><br />\n\t\t\t\t<input type=\"text\" id=\"username\" name=\"username\" size=\"30\" class=\"text\" />\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label for=\"password\"><?php yourls_e( 'Password' ); ?></label><br />\n\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" size=\"30\" class=\"text\" />\n\t\t\t</p>\n\t\t\t<?php\n\t\t\t\tyourls_do_action( 'login_form_bottom' );\n\t\t\t?>\n\t\t\t<p style=\"text-align: right;\">\n\t\t\t    <?php yourls_nonce_field('admin_login'); ?>\n\t\t\t\t<input type=\"submit\" id=\"submit\" name=\"submit\" value=\"<?php yourls_e( 'Login' ); ?>\" class=\"button\" />\n\t\t\t</p>\n\t\t\t<?php\n\t\t\t\tyourls_do_action( 'login_form_end' );\n\t\t\t?>\n\t\t</form>\n\t\t<script type=\"text/javascript\">$('#username').focus();</script>\n\t</div>\n\t<?php\n\tyourls_html_footer();\n\tdie();\n}\n\n/**\n * Display the admin menu\n *\n */\nfunction yourls_html_menu() {\n\n\t// Build menu links\n\tif( defined( 'YOURLS_USER' ) ) {\n\t\t$logout_link = yourls_apply_filter( 'logout_link', sprintf( yourls__('Hello <strong>%s</strong>'), YOURLS_USER ) . ' (<a href=\"' . yourls_admin_url( 'index.php' ) . '?action=logout\" title=\"' . yourls_esc_attr__( 'Logout' ) . '\">' . yourls__( 'Logout' ) . '</a>)' );\n\t} else {\n\t\t$logout_link = yourls_apply_filter( 'logout_link', '' );\n\t}\n\t$help_link   = yourls_apply_filter( 'help_link',   '<a href=\"' . yourls_site_url( false ) .'/readme.html\">' . yourls__( 'Help' ) . '</a>' );\n\n\t$admin_links    = array();\n\t$admin_sublinks = array();\n\n\t$admin_links['admin'] = array(\n\t\t'url'    => yourls_admin_url( 'index.php' ),\n\t\t'title'  => yourls__( 'Go to the admin interface' ),\n\t\t'anchor' => yourls__( 'Admin interface' )\n\t);\n\n\tif( yourls_is_admin() ) {\n\t\t$admin_links['tools'] = array(\n\t\t\t'url'    => yourls_admin_url( 'tools.php' ),\n\t\t\t'anchor' => yourls__( 'Tools' )\n\t\t);\n\t\t$admin_links['plugins'] = array(\n\t\t\t'url'    => yourls_admin_url( 'plugins.php' ),\n\t\t\t'anchor' => yourls__( 'Manage Plugins' )\n\t\t);\n\t\t$admin_sublinks['plugins'] = yourls_list_plugin_admin_pages();\n\t}\n\n\t$admin_links    = yourls_apply_filter( 'admin_links',    $admin_links );\n\t$admin_sublinks = yourls_apply_filter( 'admin_sublinks', $admin_sublinks );\n\n\t// Now output menu\n\techo '<nav role=\"navigation\"><ul id=\"admin_menu\">'.\"\\n\";\n\tif ( yourls_is_private() && !empty( $logout_link ) )\n\t\techo '<li id=\"admin_menu_logout_link\">' . $logout_link .'</li>';\n\n\tforeach( (array)$admin_links as $link => $ar ) {\n\t\tif( isset( $ar['url'] ) ) {\n\t\t\t$anchor = isset( $ar['anchor'] ) ? $ar['anchor'] : $link;\n\t\t\t$title  = isset( $ar['title'] ) ? 'title=\"' . $ar['title'] . '\"' : '';\n\t\t\tprintf( '<li id=\"admin_menu_%s_link\" class=\"admin_menu_toplevel\"><a href=\"%s\" %s>%s</a>', $link, $ar['url'], $title, $anchor );\n\t\t}\n\t\t// Output submenu if any. TODO: clean up, too many code duplicated here\n\t\tif( isset( $admin_sublinks[$link] ) ) {\n\t\t\techo \"<ul>\\n\";\n\t\t\tforeach( $admin_sublinks[$link] as $link => $ar ) {\n\t\t\t\tif( isset( $ar['url'] ) ) {\n\t\t\t\t\t$anchor = isset( $ar['anchor'] ) ? $ar['anchor'] : $link;\n\t\t\t\t\t$title  = isset( $ar['title'] ) ? 'title=\"' . $ar['title'] . '\"' : '';\n\t\t\t\t\tprintf( '<li id=\"admin_menu_%s_link\" class=\"admin_menu_sublevel admin_menu_sublevel_%s\"><a href=\"%s\" %s>%s</a>', $link, $link, $ar['url'], $title, $anchor );\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"</ul>\\n\";\n\t\t}\n\t}\n\n\tif ( isset( $help_link ) )\n\t\techo '<li id=\"admin_menu_help_link\">' . $help_link .'</li>';\n\n\tyourls_do_action( 'admin_menu' );\n\techo \"</ul></nav>\\n\";\n\tyourls_do_action( 'admin_notices' );\n\tyourls_do_action( 'admin_notice' ); // because I never remember if it's 'notices' or 'notice'\n\t/*\n\tTo display a notice:\n\t$message = \"<div>OMG, dude, I mean!</div>\" );\n\tyourls_add_action( 'admin_notices', function() use ( $message ) { echo (string) $message; } );\n\t*/\n}\n\n/**\n * Wrapper function to display admin notices\n *\n */\nfunction yourls_add_notice( $message, $style = 'notice' ) {\n\t// Escape single quotes in $message to avoid breaking the anonymous function\n\t$message = yourls_notice_box( strtr( $message, array( \"'\" => \"\\'\" ) ), $style );\n\tyourls_add_action( 'admin_notices', function() use ( $message ) { echo (string) $message; } );\n}\n\n/**\n * Return a formatted notice\n *\n */\nfunction yourls_notice_box( $message, $style = 'notice' ) {\n\treturn <<<HTML\n\t<div class=\"$style\">\n\t<p>$message</p>\n\t</div>\nHTML;\n}\n\n/**\n *  Display a page\n *\n *  Includes content of a PHP file from the YOURLS_PAGEDIR directory, as if it\n *  were a standard short URL (ie http://sho.rt/$page)\n *\n *  @since 1.0\n *  @param $page      PHP file to display\n */\nfunction yourls_page( $page ) {\n    if( !yourls_is_page($page)) {\n\t\tyourls_die( yourls_s('Page \"%1$s\" not found', $page), yourls__('Not found'), 404 );\n    }\n\n\tyourls_do_action( 'pre_page', $page );\n\tinclude_once( YOURLS_PAGEDIR . \"/$page.php\" );\n\tyourls_do_action( 'post_page', $page );\n}\n\n/**\n * Display the language attributes for the HTML tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page. Stolen from WP.\n *\n * @since 1.6\n */\nfunction yourls_html_language_attributes() {\n\t$attributes = array();\n\t$output = '';\n\n\t$attributes[] = ( yourls_is_rtl() ? 'dir=\"rtl\"' : 'dir=\"ltr\"' );\n\n\t$doctype = yourls_apply_filter( 'html_language_attributes_doctype', 'html' );\n\t// Experimental: get HTML lang from locale. Should work. Convert fr_FR -> fr-FR\n\tif ( $lang = str_replace( '_', '-', yourls_get_locale() ) ) {\n\t\tif( $doctype == 'xhtml' ) {\n\t\t\t$attributes[] = \"xml:lang=\\\"$lang\\\"\";\n\t\t} else {\n\t\t\t$attributes[] = \"lang=\\\"$lang\\\"\";\n\t\t}\n\t}\n\n\t$output = implode( ' ', $attributes );\n\t$output = yourls_apply_filter( 'html_language_attributes', $output );\n\techo $output;\n}\n\n/**\n * Output translated strings used by the Javascript calendar\n *\n * @since 1.6\n */\nfunction yourls_l10n_calendar_strings() {\n\techo \"\\n<script>\\n\";\n\techo \"var l10n_cal_month = \" . json_encode( array_values( yourls_l10n_months() ) ) . \";\\n\";\n\techo \"var l10n_cal_days = \" . json_encode( array_values( yourls_l10n_weekday_initial() ) ) . \";\\n\";\n\techo \"var l10n_cal_today = \\\"\" . yourls_esc_js( yourls__( 'Today' ) ) . \"\\\";\\n\";\n\techo \"var l10n_cal_close = \\\"\" . yourls_esc_js( yourls__( 'Close' ) ) . \"\\\";\\n\";\n\techo \"</script>\\n\";\n\n\t// Dummy returns, to initialize l10n strings used in the calendar\n\tyourls__( 'Today' );\n\tyourls__( 'Close' );\n}\n\n\n/**\n * Display a notice if there is a newer version of YOURLS available\n *\n * @since 1.7\n */\nfunction yourls_new_core_version_notice() {\n\n\t$checks = yourls_get_option( 'core_version_checks' );\n    $latest = isset($checks->last_result->latest) ? yourls_sanitize_version($checks->last_result->latest) : false;\n\n\tif( $latest AND version_compare( $latest, YOURLS_VERSION, '>' ) ) {\n\t\t$msg = yourls_s( '<a href=\"%s\">YOURLS version %s</a> is available. Please update!', 'http://yourls.org/download', $latest );\n\t\tyourls_add_notice( $msg );\n\t}\n}\n\n/**\n * Display or return HTML for a bookmarklet link\n *\n * @since 1.7.1\n * @param string $href    bookmarklet link (presumably minified code with \"javascript:\" scheme)\n * @param string $anchor  link anchor\n * @param bool   $echo    true to display, false to return the HTML\n * @return string         the HTML for a bookmarklet link\n */\nfunction yourls_bookmarklet_link( $href, $anchor, $echo = true ) {\n    $alert = yourls_esc_attr__( 'Drag to your toolbar!' );\n    $link = <<<LINK\n    <a href=\"$href\" class=\"bookmarklet\" onclick=\"alert('$alert');return false;\">$anchor</a>\nLINK;\n\n    if( $echo )\n        echo $link;\n    return $link;\n}\n\n/**\n * Set HTML context (stats, index, infos, ...)\n *\n * @since  1.7.3\n * @param  string  $context\n * @return void\n */\nfunction yourls_set_html_context($context) {\n    yourls_get_db()->set_html_context($context);\n}\n\n/**\n * Get HTML context (stats, index, infos, ...)\n *\n * @since  1.7.3\n * @return string\n */\nfunction yourls_get_html_context() {\n    yourls_get_db()->get_html_context();\n}\n\n/**\n * Print HTML link for favicon\n *\n * @since 1.7.10\n * @return mixed|void\n */\nfunction yourls_html_favicon() {\n    // Allow plugins to short-circuit the whole function\n    $pre = yourls_apply_filter( 'shunt_html_favicon', false );\n    if ( false !== $pre ) {\n        return $pre;\n    }\n\n    printf( '<link rel=\"shortcut icon\" href=\"%s\" />', yourls_get_yourls_favicon_url(false) );\n}\n\n", "<?php\n/**\n * Login tests - via Cookies\n *\n * @group auth\n * @group login\n * @group cookies\n * @since 0.1\n */\nclass Auth_Login_Cookie_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected $cookie;\n    protected $request;\n\n    protected function setUp(): void {\n        $this->cookie = $_COOKIE;\n        $this->request = $_REQUEST;\n    }\n\n    protected function tearDown(): void {\n        $_COOKIE = $this->cookie;\n        $_REQUEST = $this->request;\n    }\n\n    public static function setUpBeforeClass(): void {\n        yourls_add_filter( 'is_API', 'yourls_return_false' );\n    }\n\n    public static function tearDownAfterClass(): void {\n        yourls_remove_filter( 'is_API', 'yourls_return_false' );\n    }\n\n\t/**\n\t * Check for valid cookie name\n\t */\n\tpublic function test_cookie_name() {\n        $this->assertTrue( is_string(yourls_cookie_name()) );\n    }\n\n\t/**\n\t * Check for valid cookie value\n\t */\n\tpublic function test_cookie_value() {\n        $this->assertTrue( is_string(yourls_cookie_value(rand_str())) );\n    }\n\n\t/**\n\t * Check for valid cookie life\n\t */\n\tpublic function test_cookie_life() {\n        $this->assertTrue( is_int(yourls_get_cookie_life()) );\n    }\n\n\t/**\n\t * Test login with valid cookie\n\t */\n\tpublic function test_login_valid_cookie() {\n        global $yourls_user_passwords;\n        $random_user = array_rand($yourls_user_passwords);\n        $_COOKIE[yourls_cookie_name()] = yourls_cookie_value( $random_user );\n        unset($_REQUEST);\n\n        $this->assertTrue(yourls_check_auth_cookie());\n        $this->assertTrue(yourls_is_valid_user());\n    }\n\n\t/**\n\t * Test login with invalid cookie\n\t */\n\tpublic function test_login_invalid_cookie() {\n        $_COOKIE[yourls_cookie_name()] = yourls_cookie_value( rand_str() );\n        unset($_REQUEST);\n\n        $this->assertFalse(yourls_check_auth_cookie());\n        $this->assertNotTrue(yourls_is_valid_user());\n    }\n\n}\n", "<?php\n\n/**\n * Logout function\n *\n * @group auth\n */\nclass Logout_Func_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected $backup_get;\n    protected $backup_request;\n\n    protected function setUp(): void {\n        $this->backup_get     = $_GET;\n        $this->backup_request = $_REQUEST;\n    }\n\n    protected function tearDown(): void {\n        $_GET = $this->backup_get;\n        $_REQUEST = $this->backup_request;\n    }\n\n    /**\n     * Check logout procedure - phase 1\n     */\n    public function test_logout_user_is_logged_in() {\n        $_REQUEST['nonce'] = yourls_create_nonce('admin_login');\n        $valid = yourls_is_valid_user();\n        $this->assertTrue($valid);\n    }\n\n    /**\n     * Check logout procedure - phase 2\n     * @depends test_logout_user_is_logged_in\n     */\n    public function test_logout_user_logs_out() {\n        $_GET['action'] = 'logout';\n        $invalid = yourls_is_valid_user();\n        $this->assertNotTrue( $invalid );\n    }\n\n    /**\n     * Check logout procedure - phase 3\n     * @depends test_logout_user_logs_out\n     */\n    public function test_logout_user_is_logged_in_back() {\n        $_REQUEST['nonce'] = yourls_create_nonce('admin_login');\n        $valid = yourls_is_valid_user();\n        $this->assertTrue( $valid );\n    }\n\n}\n", "<?php\n\n/**\n * Misc test\n *\n * @group auth\n */\nclass Misc_Auth_Tests extends PHPUnit\\Framework\\TestCase {\n\n    public function test_yourls_skip_password_hashing_is_bool() {\n        $this->assertIsBool(yourls_skip_password_hashing());\n    }\n\n}\n", "<?php\n/**\n * Nonce tests\n *\n * @group auth\n * @group nonces\n * @since 0.1\n */\nclass Auth_Nonce_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected function tearDown(): void {\n        yourls_remove_all_actions('pre_yourls_die');\n    }\n\n\t/**\n\t * Check for valid nonce life\n\t */\n\tpublic function test_nonce_life() {\n        $this->assertTrue( is_int(yourls_get_cookie_life()) );\n    }\n\n\t/**\n\t * Check for valid tick\n\t */\n\tpublic function test_tick() {\n        $this->assertTrue( is_float(yourls_tick()) );\n    }\n\n\t/**\n\t * Check nonce creation\n\t */\n\tpublic function test_create_nonce() {\n        $this->assertTrue( is_string(yourls_create_nonce(rand_str(), rand_str())) );\n    }\n\n\t/**\n\t * Check nonce field creation\n\t */\n\tpublic function test_create_nonce_field() {\n        $field = yourls_nonce_field( rand_str(), rand_str(), rand_str(), false );\n        $this->assertTrue( is_string($field) );\n    }\n\n\t/**\n\t * Check nonce URL creation\n\t */\n\tpublic function test_create_nonce_url() {\n        $url = yourls_nonce_url( rand_str(), rand_str(), rand_str(), rand_str() );\n        $this->assertTrue( is_string($url) );\n        // $this->assertIsString($url);\n    }\n\n\t/**\n\t * Test valid nonce\n\t */\n\tpublic function test_valid_nonce() {\n        $action = rand_str();\n        $user   = rand_str();\n\n        // what nonce should be\n        $valid = yourls_create_nonce( $action, $user );\n\n        $this->assertTrue(yourls_verify_nonce($action, $valid, $user));\n    }\n\n\t/**\n\t * Test invalid nonce\n\t */\n\tpublic function test_invalid_nonce() {\n        $this->expectException(Exception::class);\n        $this->expectExceptionMessage('I have died');\n\n        // intercept yourls_die() before it actually dies\n        yourls_add_action( 'pre_yourls_die', function() { throw new Exception( 'I have died' ); } );\n\n        // This should trigger yourls_die()\n        $this->assertTrue(yourls_verify_nonce(rand_str(), rand_str(), rand_str()));\n    }\n\n}\n"], "fixing_code": ["############\n## YOURLS\n\n# Ignore server configuration files\n.htaccess\n*.config\n*.conf\n[Rr]obots.txt\n\n# Ignore everything in user/\nuser/*\n# ... except config sample\n!user/config-sample.php\n# ... core plugins\n!user/plugins/hyphens-in-urls/\n!user/plugins/random-bg/\n!user/plugins/random-shorturls/\n!user/plugins/sample-page/\n!user/plugins/sample-plugin/\n!user/plugins/sample-toolbar/\n# ... example pages\n!user/pages/examplepage.php\n# ... and index.html files\n!user/index.html\n!user/**/index.html\n\n############\n## Tests\n\nincludes/**/tests/\nbuild/\ncoverage/\nphpunit.xml\n.phpunit.result.cache\ntests/yourls-tests-config.php\ntests/vendor/\ntests/data/auth/config-test-auth-hashed.php\ntests/data/htaccess/test*\n\n############\n## Environnement\n\n# Windows image file caches\nThumbs.db\n# Folder config file\nDesktop.ini\n# Mac crap\n.DS_Store\n# NetBeans files\n/nbproject/\n.idea\n", "<?php\ndefine( 'YOURLS_ADMIN', true );\ndefine( 'YOURLS_AJAX', true );\nrequire_once( dirname( __DIR__ ) .'/includes/load-yourls.php' );\nyourls_maybe_require_auth();\n\n// This file will output a JSON string\nyourls_content_type_header( 'application/json' );\nyourls_no_cache_headers();\nyourls_no_frame_header();\n\nif( !isset( $_REQUEST['action'] ) )\n\tdie();\n\n// Pick action\n$action = $_REQUEST['action'];\nswitch( $action ) {\n\n\tcase 'add':\n\t\tyourls_verify_nonce( 'add_url', $_REQUEST['nonce'], false, 'omg error' );\n\t\t$return = yourls_add_new_link( $_REQUEST['url'], $_REQUEST['keyword'] );\n\t\techo json_encode($return);\n\t\tbreak;\n\n\tcase 'edit_display':\n\t\tyourls_verify_nonce( 'edit-link_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$row = yourls_table_edit_row ( $_REQUEST['keyword'] );\n\t\techo json_encode( array('html' => $row) );\n\t\tbreak;\n\n\tcase 'edit_save':\n\t\tyourls_verify_nonce( 'edit-save_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$return = yourls_edit_link( $_REQUEST['url'], $_REQUEST['keyword'], $_REQUEST['newkeyword'], $_REQUEST['title'] );\n\t\techo json_encode($return);\n\t\tbreak;\n\n\tcase 'delete':\n\t\tyourls_verify_nonce( 'delete-link_'.$_REQUEST['id'], $_REQUEST['nonce'], false, 'omg error' );\n\t\t$query = yourls_delete_link_by_keyword( $_REQUEST['keyword'] );\n\t\techo json_encode(array('success'=>$query));\n\t\tbreak;\n\n\tdefault:\n\t\tyourls_do_action( 'yourls_ajax_'.$action );\n\n}\n\ndie();\n", "<?php\n/**\n * Function related to authentication functions and nonces\n */\n\n\n/**\n * Show login form if required\n *\n */\nfunction yourls_maybe_require_auth() {\n\tif( yourls_is_private() ) {\n\t\tyourls_do_action( 'require_auth' );\n\t\trequire_once( YOURLS_INC.'/auth.php' );\n\t} else {\n\t\tyourls_do_action( 'require_no_auth' );\n\t}\n}\n\n/**\n * Check for valid user via login form or stored cookie. Returns true or an error message\n *\n * @return bool|string|mixed true if valid user, error message otherwise. Can also call yourls_die() or redirect to login page. Oh my.\n */\nfunction yourls_is_valid_user() {\n\t// Allow plugins to short-circuit the whole function\n\t$pre = yourls_apply_filter( 'shunt_is_valid_user', null );\n\tif ( null !== $pre ) {\n\t\treturn $pre;\n\t}\n\n\t// $unfiltered_valid : are credentials valid? Boolean value. It's \"unfiltered\" to allow plugins to eventually filter it.\n\t$unfiltered_valid = false;\n\n\t// Logout request\n\tif( isset( $_GET['action'] ) && $_GET['action'] == 'logout' && isset( $_REQUEST['nonce'] ) ) {\n        // The logout nonce is associated to fake user 'logout' since at this point we don't know the real user\n        yourls_verify_nonce('admin_logout', $_REQUEST['nonce'], 'logout');\n\t\tyourls_do_action( 'logout' );\n\t\tyourls_store_cookie( null );\n\t\treturn yourls__( 'Logged out successfully' );\n\t}\n\n\t// Check cookies or login request. Login form has precedence.\n\n\tyourls_do_action( 'pre_login' );\n\n\t// Determine auth method and check credentials\n\tif\n\t\t// API only: Secure (no login or pwd) and time limited token\n\t\t// ?timestamp=12345678&signature=md5(totoblah12345678)\n\t\t( yourls_is_API() &&\n\t\t  isset( $_REQUEST['timestamp'] ) && !empty($_REQUEST['timestamp'] ) &&\n\t\t  isset( $_REQUEST['signature'] ) && !empty($_REQUEST['signature'] )\n\t\t)\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_signature_timestamp' );\n\t\t\t$unfiltered_valid = yourls_check_signature_timestamp();\n\t\t}\n\n\telseif\n\t\t// API only: Secure (no login or pwd)\n\t\t// ?signature=md5(totoblah)\n\t\t( yourls_is_API() &&\n\t\t  !isset( $_REQUEST['timestamp'] ) &&\n\t\t  isset( $_REQUEST['signature'] ) && !empty( $_REQUEST['signature'] )\n\t\t)\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_signature' );\n\t\t\t$unfiltered_valid = yourls_check_signature();\n\t\t}\n\n\telseif\n\t\t// API or normal: login with username & pwd\n\t\t( isset( $_REQUEST['username'] ) && isset( $_REQUEST['password'] )\n\t\t  && !empty( $_REQUEST['username'] ) && !empty( $_REQUEST['password']  ) )\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_username_password' );\n\t\t\t$unfiltered_valid = yourls_check_username_password();\n\t\t}\n\n\telseif\n\t\t// Normal only: cookies\n\t\t( !yourls_is_API() &&\n\t\t  isset( $_COOKIE[ yourls_cookie_name() ] ) )\n\t\t{\n\t\t\tyourls_do_action( 'pre_login_cookie' );\n\t\t\t$unfiltered_valid = yourls_check_auth_cookie();\n\t\t}\n\n\t// Regardless of validity, allow plugins to filter the boolean and have final word\n\t$valid = yourls_apply_filter( 'is_valid_user', $unfiltered_valid );\n\n\t// Login for the win!\n\tif ( $valid ) {\n\t\tyourls_do_action( 'login' );\n\n\t\t// (Re)store encrypted cookie if needed\n\t\tif ( !yourls_is_API() ) {\n\t\t\tyourls_store_cookie( YOURLS_USER );\n\n\t\t\t// Login form : redirect to requested URL to avoid re-submitting the login form on page reload\n\t\t\tif( isset( $_REQUEST['username'] ) && isset( $_REQUEST['password'] ) && isset( $_SERVER['REQUEST_URI'] ) ) {\n\t\t\t    // The return makes sure we exit this function before waiting for redirection.\n                // See #3189 and note in yourls_redirect()\n\t\t\t\treturn yourls_redirect( yourls_sanitize_url_safe($_SERVER['REQUEST_URI']) );\n\t\t\t}\n\t\t}\n\n\t\t// Login successful\n\t\treturn true;\n\t}\n\n\t// Login failed\n\tyourls_do_action( 'login_failed' );\n\n\tif ( isset( $_REQUEST['username'] ) || isset( $_REQUEST['password'] ) ) {\n\t\treturn yourls__( 'Invalid username or password' );\n\t} else {\n\t\treturn yourls__( 'Please log in' );\n\t}\n}\n\n/**\n * Check auth against list of login=>pwd. Sets user if applicable, returns bool\n *\n */\nfunction yourls_check_username_password() {\n\tglobal $yourls_user_passwords;\n\n\t// If login form (not API), check for nonce\n    if(!yourls_is_API()) {\n        yourls_verify_nonce('admin_login');\n    }\n\n\tif( isset( $yourls_user_passwords[ $_REQUEST['username'] ] ) && yourls_check_password_hash( $_REQUEST['username'], $_REQUEST['password'] ) ) {\n\t\tyourls_set_user( $_REQUEST['username'] );\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Check a submitted password sent in plain text against stored password which can be a salted hash\n *\n */\nfunction yourls_check_password_hash( $user, $submitted_password ) {\n\tglobal $yourls_user_passwords;\n\n\tif( !isset( $yourls_user_passwords[ $user ] ) )\n\t\treturn false;\n\n\tif ( yourls_has_phpass_password( $user ) ) {\n\t\t// Stored password is hashed\n\t\tlist( , $hash ) = explode( ':', $yourls_user_passwords[ $user ] );\n\t\t$hash = str_replace( '!', '$', $hash );\n\t\treturn ( yourls_phpass_check( $submitted_password, $hash ) );\n\t} else if( yourls_has_md5_password( $user ) ) {\n\t\t// Stored password is a salted md5 hash: \"md5:<$r = rand(10000,99999)>:<md5($r.'thepassword')>\"\n\t\tlist( , $salt, ) = explode( ':', $yourls_user_passwords[ $user ] );\n\t\treturn( $yourls_user_passwords[ $user ] == 'md5:'.$salt.':'.md5( $salt . $submitted_password ) );\n\t} else {\n\t\t// Password stored in clear text\n\t\treturn( $yourls_user_passwords[ $user ] === $submitted_password );\n\t}\n}\n\n/**\n * Overwrite plaintext passwords in config file with hashed versions.\n *\n * @since 1.7\n * @param string $config_file Full path to file\n * @return true|string  if overwrite was successful, an error message otherwise\n */\nfunction yourls_hash_passwords_now( $config_file ) {\n\tif( !is_readable( $config_file ) )\n\t\treturn 'cannot read file'; // not sure that can actually happen...\n\n\tif( !is_writable( $config_file ) )\n\t\treturn 'cannot write file';\n\n    $yourls_user_passwords = [];\n\t// Include file to read value of $yourls_user_passwords\n\t// Temporary suppress error reporting to avoid notices about redeclared constants\n\t$errlevel = error_reporting();\n\terror_reporting( 0 );\n\trequire $config_file;\n\terror_reporting( $errlevel );\n\n\t$configdata = file_get_contents( $config_file );\n\tif( $configdata == false )\n\t\treturn 'could not read file';\n\n\t$to_hash = 0; // keep track of number of passwords that need hashing\n\tforeach ( $yourls_user_passwords as $user => $password ) {\n\t\tif ( !yourls_has_phpass_password( $user ) && !yourls_has_md5_password( $user ) ) {\n\t\t\t$to_hash++;\n\t\t\t$hash = yourls_phpass_hash( $password );\n\t\t\t// PHP would interpret $ as a variable, so replace it in storage.\n\t\t\t$hash = str_replace( '$', '!', $hash );\n\t\t\t$quotes = \"'\" . '\"';\n\t\t\t$pattern = \"/[$quotes]${user}[$quotes]\\s*=>\\s*[$quotes]\" . preg_quote( $password, '/' ) . \"[$quotes]/\";\n\t\t\t$replace = \"'$user' => 'phpass:$hash' /* Password encrypted by YOURLS */ \";\n\t\t\t$count = 0;\n\t\t\t$configdata = preg_replace( $pattern, $replace, $configdata, -1, $count );\n\t\t\t// There should be exactly one replacement. Otherwise, fast fail.\n\t\t\tif ( $count != 1 ) {\n\t\t\t\tyourls_debug_log( \"Problem with preg_replace for password hash of user $user\" );\n\t\t\t\treturn 'preg_replace problem';\n\t\t\t}\n\t\t}\n\t}\n\n\tif( $to_hash == 0 )\n\t\treturn 0; // There was no password to encrypt\n\n\t$success = file_put_contents( $config_file, $configdata );\n\tif ( $success === FALSE ) {\n\t\tyourls_debug_log( 'Failed writing to ' . $config_file );\n\t\treturn 'could not write file';\n\t}\n\n    yourls_debug_log('Successfully encrypted passwords in ' . basename($config_file));\n\treturn true;\n}\n\n/**\n * Create a password hash\n *\n * @since 1.7\n * @param string $password password to hash\n * @return string hashed password\n */\nfunction yourls_phpass_hash( $password ) {\n    /**\n     * Filter for hashing algorithm. See https://www.php.net/manual/en/function.password-hash.php\n     * Hashing algos are available if PHP was compiled with it.\n     * PASSWORD_BCRYPT is always available.\n     */\n    $algo    = yourls_apply_filter('hash_algo', PASSWORD_BCRYPT);\n\n    /**\n     * Filter for hashing options. See https://www.php.net/manual/en/function.password-hash.php\n     * A typical option for PASSWORD_BCRYPT would be ['cost' => <int in range 4-31> ]\n     * We're leaving the options at default values, which means a cost of 10 for PASSWORD_BCRYPT.\n     *\n     * If willing to modify this, be warned about the computing time, as there is a 2^n factor.\n     * See https://gist.github.com/ozh/65a75392b7cb254131cc55afd28de99b for examples.\n     */\n    $options = yourls_apply_filter('hash_options', [] );\n\n    return password_hash($password, $algo, $options);\n}\n\n/**\n * Verify that a password matches a hash\n *\n * @since 1.7\n * @param string $password clear (eg submitted in a form) password\n * @param string $hash hash\n * @return bool true if the hash matches the password, false otherwise\n */\nfunction yourls_phpass_check( $password, $hash ) {\n\treturn password_verify($password, $hash);\n}\n\n\n/**\n * Check to see if any passwords are stored as cleartext.\n *\n * @since 1.7\n * @return bool true if any passwords are cleartext\n */\nfunction yourls_has_cleartext_passwords() {\n\tglobal $yourls_user_passwords;\n\tforeach ( $yourls_user_passwords as $user => $pwdata ) {\n\t\tif ( !yourls_has_md5_password( $user ) && !yourls_has_phpass_password( $user ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Check if a user has a md5 hashed password\n *\n * Check if a user password is 'md5:[38 chars]'.\n * TODO: deprecate this when/if we have proper user management with password hashes stored in the DB\n *\n * @since 1.7\n * @param string $user user login\n * @return bool true if password hashed, false otherwise\n */\nfunction yourls_has_md5_password( $user ) {\n\tglobal $yourls_user_passwords;\n\treturn(    isset( $yourls_user_passwords[ $user ] )\n\t        && substr( $yourls_user_passwords[ $user ], 0, 4 ) == 'md5:'\n\t\t    && strlen( $yourls_user_passwords[ $user ] ) == 42 // http://www.google.com/search?q=the+answer+to+life+the+universe+and+everything\n\t\t   );\n}\n\n/**\n * Check if a user's password is hashed with password_hash\n *\n * Check if a user password is 'phpass:[lots of chars]'.\n * (For historical reason we're using 'phpass' as an identifier.)\n * TODO: deprecate this when/if we have proper user management with password hashes stored in the DB\n *\n * @since 1.7\n * @param string $user user login\n * @return bool true if password hashed with password_hash, otherwise false\n */\nfunction yourls_has_phpass_password( $user ) {\n\tglobal $yourls_user_passwords;\n\treturn( isset( $yourls_user_passwords[ $user ] )\n\t        && substr( $yourls_user_passwords[ $user ], 0, 7 ) == 'phpass:'\n\t);\n}\n\n/**\n * Check auth against encrypted COOKIE data. Sets user if applicable, returns bool\n *\n */\nfunction yourls_check_auth_cookie() {\n\tglobal $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif ( yourls_cookie_value( $valid_user ) === $_COOKIE[ yourls_cookie_name() ] ) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Check auth against signature and timestamp. Sets user if applicable, returns bool\n *\n * Original usage :\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<md5 hash>&action=...\n * Since 1.7.7 we allow a `hash` parameter and an arbitrary hashed signature, hashed\n * with the `hash` function. Examples :\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<sha512 hash>&hash=sha512&action=...\n *   http://sho.rt/yourls-api.php?timestamp=<timestamp>&signature=<crc32 hash>&hash=crc32&action=...\n *\n * @since 1.4.1\n * @return bool False if signature or timestamp missing or invalid, true if valid\n */\nfunction yourls_check_signature_timestamp() {\n    if(   !isset( $_REQUEST['signature'] ) OR empty( $_REQUEST['signature'] )\n       OR !isset( $_REQUEST['timestamp'] ) OR empty( $_REQUEST['timestamp'] )\n    ) {\n        return false;\n    }\n\n    // Exit if the timestamp argument is outdated or invalid\n    if( !yourls_check_timestamp( $_REQUEST['timestamp'] )) {\n        return false;\n    }\n\n    // if there is a hash argument, make sure it's part of the availables algos\n    $hash_function = isset($_REQUEST['hash']) ? (string)$_REQUEST['hash'] : 'md5';\n    if( !in_array($hash_function, hash_algos()) ) {\n        return false;\n    }\n\n\t// Check signature & timestamp against all possible users\n\tglobal $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif (\n            hash( $hash_function, $_REQUEST['timestamp'].yourls_auth_signature( $valid_user ) ) === $_REQUEST['signature']\n            or\n            hash( $hash_function, yourls_auth_signature( $valid_user ).$_REQUEST['timestamp'] ) === $_REQUEST['signature']\n\t\t\t) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\n    // Signature doesn't match known user\n\treturn false;\n}\n\n/**\n * Check auth against signature. Sets user if applicable, returns bool\n *\n * @since 1.4.1\n * @return bool False if signature missing or invalid, true if valid\n */\nfunction yourls_check_signature() {\n    if( !isset( $_REQUEST['signature'] ) OR empty( $_REQUEST['signature'] ) )\n        return false;\n\n\t// Check signature against all possible users\n    global $yourls_user_passwords;\n\tforeach( $yourls_user_passwords as $valid_user => $valid_password ) {\n\t\tif ( yourls_auth_signature( $valid_user ) === $_REQUEST['signature'] ) {\n\t\t\tyourls_set_user( $valid_user );\n\t\t\treturn true;\n\t\t}\n\t}\n\n    // Signature doesn't match known user\n\treturn false;\n}\n\n/**\n * Generate secret signature hash\n *\n */\nfunction yourls_auth_signature( $username = false ) {\n\tif( !$username && defined('YOURLS_USER') ) {\n\t\t$username = YOURLS_USER;\n\t}\n\treturn ( $username ? substr( yourls_salt( $username ), 0, 10 ) : 'Cannot generate auth signature: no username' );\n}\n\n/**\n * Check if timestamp is not too old\n *\n */\nfunction yourls_check_timestamp( $time ) {\n\t$now = time();\n\t// Allow timestamp to be a little in the future or the past -- see Issue 766\n\treturn yourls_apply_filter( 'check_timestamp', abs( $now - (int)$time ) < yourls_get_nonce_life(), $time );\n}\n\n/**\n * Store new cookie. No $user will delete the cookie.\n *\n * @param mixed $user  String, user login, or null to delete cookie\n */\nfunction yourls_store_cookie( $user = null ) {\n\n    // No user will delete the cookie with a cookie time from the past\n\tif( !$user ) {\n\t\t$time = time() - 3600;\n\t} else {\n\t\t$time = time() + yourls_get_cookie_life();\n\t}\n\n    $path     = yourls_apply_filter( 'setcookie_path',     '/' );\n\t$domain   = yourls_apply_filter( 'setcookie_domain',   parse_url( yourls_get_yourls_site(), PHP_URL_HOST ) );\n\t$secure   = yourls_apply_filter( 'setcookie_secure',   yourls_is_ssl() );\n\t$httponly = yourls_apply_filter( 'setcookie_httponly', true );\n\n\t// Some browsers refuse to store localhost cookie\n\tif ( $domain == 'localhost' )\n\t\t$domain = '';\n\n\tyourls_do_action( 'pre_setcookie', $user, $time, $path, $domain, $secure, $httponly );\n\n    if ( !headers_sent( $filename, $linenum ) ) {\n        yourls_setcookie( yourls_cookie_name(), yourls_cookie_value( $user ), $time, $path, $domain, $secure, $httponly );\n\t} else {\n\t\t// For some reason cookies were not stored: action to be able to debug that\n\t\tyourls_do_action( 'setcookie_failed', $user );\n        yourls_debug_log( \"Could not store cookie: headers already sent in $filename on line $linenum\" );\n\t}\n}\n\n/**\n * Replacement for PHP's setcookie(), with support for SameSite cookie attribute\n *\n * @see https://github.com/GoogleChromeLabs/samesite-examples/blob/master/php.md\n * @see https://stackoverflow.com/a/59654832/36850\n * @see https://3v4l.org/uKEtH for compat tests\n * @see https://www.php.net/manual/en/function.setcookie.php\n *\n * @since  1.7.7\n * @param  string  $name       cookie name\n * @param  string  $value      cookie value\n * @param  int     $expire     time the cookie expires as a Unix timestamp (number of seconds since the epoch)\n * @param  string  $path       path on the server in which the cookie will be available on\n * @param  string  $domain     (sub)domain that the cookie is available to\n * @param  bool    $secure     if cookie should only be transmitted over a secure HTTPS connection\n * @param  bool    $httponly   if cookie will be made accessible only through the HTTP protocol\n * @return bool                setcookie() result : false if output sent before, true otherwise. This does not indicate whether the user accepted the cookie.\n */\nfunction yourls_setcookie($name, $value, $expire, $path, $domain, $secure, $httponly) {\n    $samesite = yourls_apply_filter('setcookie_samesite', 'Lax' );\n\n    if (PHP_VERSION_ID < 70300) {\n        return(setcookie($name, $value, $expire, \"$path; samesite=$samesite\", $domain, $secure, $httponly));\n    }\n    else {\n        return(setcookie($name, $value, array(\n            'expires'  => $expire,\n            'path'     => $path,\n            'domain'   => $domain,\n            'samesite' => $samesite,\n            'secure'   => $secure,\n            'httponly' => $httponly,\n        )));\n    }\n}\n\n/**\n * Set user name\n *\n */\nfunction yourls_set_user( $user ) {\n\tif( !defined( 'YOURLS_USER' ) )\n\t\tdefine( 'YOURLS_USER', $user );\n}\n\n/**\n * Get YOURLS_COOKIE_LIFE value (ie the life span of an auth cookie in seconds)\n *\n * Use this function instead of directly using the constant. This way, its value can be modified by plugins\n * on a per case basis\n *\n * @since 1.7.7\n * @see includes/Config/Config.php\n * @return integer     cookie life span, in seconds\n */\nfunction yourls_get_cookie_life() {\n\treturn yourls_apply_filter( 'get_cookie_life', YOURLS_COOKIE_LIFE );\n}\n\n/**\n * Get YOURLS_NONCE_LIFE value (ie life span of a nonce in seconds)\n *\n * Use this function instead of directly using the constant. This way, its value can be modified by plugins\n * on a per case basis\n *\n * @since 1.7.7\n * @see includes/Config/Config.php\n * @see https://en.wikipedia.org/wiki/Cryptographic_nonce\n * @return integer     nonce life span, in seconds\n */\nfunction yourls_get_nonce_life() {\n\treturn yourls_apply_filter( 'get_nonce_life', YOURLS_NONCE_LIFE );\n}\n\n/**\n * Get YOURLS cookie name\n *\n * The name is unique for each install, to prevent mismatch between sho.rt and very.sho.rt -- see #1673\n *\n * TODO: when multi user is implemented, the whole cookie stuff should be reworked to allow storing multiple users\n *\n * @since 1.7.1\n * @return string  unique cookie name for a given YOURLS site\n */\nfunction yourls_cookie_name() {\n    return yourls_apply_filter( 'cookie_name', 'yourls_' . yourls_salt( yourls_get_yourls_site() ) );\n}\n\n/**\n * Get auth cookie value\n *\n * @since 1.7.7\n * @param string $user     user name\n * @return string          cookie value\n */\nfunction yourls_cookie_value( $user ) {\n\treturn yourls_apply_filter( 'set_cookie_value', yourls_salt( $user ), $user );\n}\n\n/**\n * Return a time-dependent string for nonce creation\n *\n * Actually, this returns a float: ceil rounds up a value but is of type float, see https://www.php.net/ceil\n *\n */\nfunction yourls_tick() {\n\treturn ceil( time() / yourls_get_nonce_life() );\n}\n\n/**\n * Return salted string\n *\n */\nfunction yourls_salt( $string ) {\n\t$salt = defined('YOURLS_COOKIEKEY') ? YOURLS_COOKIEKEY : md5(__FILE__) ;\n\treturn yourls_apply_filter( 'yourls_salt', md5 ($string . $salt), $string );\n}\n\n/**\n * Create a time limited, action limited and user limited token\n *\n */\nfunction yourls_create_nonce( $action, $user = false ) {\n\tif( false === $user )\n\t\t$user = defined( 'YOURLS_USER' ) ? YOURLS_USER : '-1';\n\t$tick = yourls_tick();\n\t$nonce = substr( yourls_salt($tick . $action . $user), 0, 10 );\n\t// Allow plugins to alter the nonce\n\treturn yourls_apply_filter( 'create_nonce', $nonce, $action, $user );\n}\n\n/**\n * Create a nonce field for inclusion into a form\n *\n */\nfunction yourls_nonce_field( $action, $name = 'nonce', $user = false, $echo = true ) {\n\t$field = '<input type=\"hidden\" id=\"'.$name.'\" name=\"'.$name.'\" value=\"'.yourls_create_nonce( $action, $user ).'\" />';\n\tif( $echo )\n\t\techo $field.\"\\n\";\n\treturn $field;\n}\n\n/**\n * Add a nonce to a URL. If URL omitted, adds nonce to current URL\n *\n */\nfunction yourls_nonce_url( $action, $url = false, $name = 'nonce', $user = false ) {\n\t$nonce = yourls_create_nonce( $action, $user );\n\treturn yourls_add_query_arg( $name, $nonce, $url );\n}\n\n/**\n * Check validity of a nonce (ie time span, user and action match).\n *\n * Returns true if valid, dies otherwise (yourls_die() or die($return) if defined)\n * if $nonce is false or unspecified, it will use $_REQUEST['nonce']\n *\n */\nfunction yourls_verify_nonce( $action, $nonce = false, $user = false, $return = '' ) {\n\t// Get user\n\tif( false === $user ) {\n        $user = defined('YOURLS_USER') ? YOURLS_USER : '-1';\n    }\n\n\t// Get nonce value from $_REQUEST if not specified\n\tif( false === $nonce && isset( $_REQUEST['nonce'] ) ) {\n        $nonce = $_REQUEST['nonce'];\n    }\n\n\t// Allow plugins to short-circuit the rest of the function\n\tif (yourls_apply_filter( 'verify_nonce', false, $action, $nonce, $user, $return ) === true) {\n\t\treturn true;\n\t}\n\n\t// What nonce should be\n\t$valid = yourls_create_nonce( $action, $user );\n\n\tif( $nonce === $valid ) {\n\t\treturn true;\n\t} else {\n\t\tif( $return )\n\t\t\tdie( $return );\n\t\tyourls_die( yourls__( 'Unauthorized action or expired link' ), yourls__( 'Error' ), 403 );\n\t}\n}\n\n/**\n * Check if YOURLS_USER comes from environment variables\n *\n * @since 1.8.2\n * @return bool     true if YOURLS_USER and YOURLS_PASSWORD are defined as environment variables\n */\nfunction yourls_is_user_from_env() {\n\treturn yourls_apply_filter('is_user_from_env', getenv('YOURLS_USER') && getenv('YOURLS_PASSWORD'));\n\n}\n\n/**\n * Check if we should hash passwords in the config file\n *\n * By default, passwords are hashed. They are not if\n *    - there is no password in clear text in the config file (ie everything is already hashed)\n *    - the user defined constant YOURLS_NO_HASH_PASSWORD is true, see https://github.com/YOURLS/YOURLS/wiki/Username-Passwords#but-i-dont-want-to-encrypt-my-password-\n *    - YOURLS_USER and YOURLS_PASSWORD are provided by the environment, not the config file\n *\n * @since 1.8.2\n * @return bool\n */\nfunction yourls_maybe_hash_passwords() {\n    $hash = true;\n\n    if ( !yourls_has_cleartext_passwords()\n         OR (yourls_skip_password_hashing())\n         OR (yourls_is_user_from_env())\n    ) {\n        $hash = false;\n    }\n\n    return yourls_apply_filter('maybe_hash_password', $hash );\n}\n\n/**\n * Check if user setting for skipping password hashing is set\n *\n * @since 1.8.2\n * @return bool\n */\nfunction yourls_skip_password_hashing() {\n    return yourls_apply_filter('skip_password_hashing', defined('YOURLS_NO_HASH_PASSWORD') && YOURLS_NO_HASH_PASSWORD);\n}\n", "<?php\n\n/**\n * Display <h1> header and logo\n *\n */\nfunction yourls_html_logo() {\n\tyourls_do_action( 'pre_html_logo' );\n\t?>\n\t<header role=\"banner\">\n\t<h1>\n\t\t<a href=\"<?php echo yourls_admin_url( 'index.php' ) ?>\" title=\"YOURLS\"><span>YOURLS</span>: <span>Y</span>our <span>O</span>wn <span>URL</span> <span>S</span>hortener<br/>\n\t\t<img src=\"<?php yourls_site_url(); ?>/images/yourls-logo.svg?v=<?php echo YOURLS_VERSION; ?>\" id=\"yourls-logo\" alt=\"YOURLS\" title=\"YOURLS\" /></a>\n\t</h1>\n\t</header>\n\t<?php\n\tyourls_do_action( 'html_logo' );\n}\n\n/**\n * Display HTML head and <body> tag\n *\n * @param string $context Context of the page (stats, index, infos, ...)\n * @param string $title HTML title of the page\n */\nfunction yourls_html_head( $context = 'index', $title = '' ) {\n\n\tyourls_do_action( 'pre_html_head', $context, $title );\n\n\t// All components to false, except when specified true\n\t$share = $insert = $tablesorter = $tabs = $cal = $charts = false;\n\n\t// Load components as needed\n\tswitch ( $context ) {\n\t\tcase 'infos':\n\t\t\t$share = $tabs = $charts = true;\n\t\t\tbreak;\n\n\t\tcase 'bookmark':\n\t\t\t$share = $insert = $tablesorter = true;\n\t\t\tbreak;\n\n\t\tcase 'index':\n\t\t\t$insert = $tablesorter = $cal = $share = true;\n\t\t\tbreak;\n\n\t\tcase 'plugins':\n\t\tcase 'tools':\n\t\t\t$tablesorter = true;\n\t\t\tbreak;\n\n\t\tcase 'install':\n\t\tcase 'login':\n\t\tcase 'new':\n\t\tcase 'upgrade':\n\t\t\tbreak;\n\t}\n\n\t// Force no cache for all admin pages\n\tif( yourls_is_admin() && !headers_sent() ) {\n        yourls_no_cache_headers();\n        yourls_no_frame_header();\n\t\tyourls_content_type_header( yourls_apply_filter( 'html_head_content-type', 'text/html' ) );\n\t\tyourls_do_action( 'admin_headers', $context, $title );\n\t}\n\n\t// Store page context\n\tyourls_set_html_context($context);\n\n\t// Body class\n\t$bodyclass = yourls_apply_filter( 'bodyclass', '' );\n\t$bodyclass .= ( yourls_is_mobile_device() ? 'mobile' : 'desktop' );\n\n\t// Page title\n\t$_title = 'YOURLS &mdash; Your Own URL Shortener | ' . yourls_link();\n\t$title = $title ? $title . \" &laquo; \" . $_title : $_title;\n\t$title = yourls_apply_filter( 'html_title', $title, $context );\n\n\t?>\n<!DOCTYPE html>\n<html <?php yourls_html_language_attributes(); ?>>\n<head>\n\t<title><?php echo $title ?></title>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php echo yourls_apply_filter( 'html_head_meta_content-type', 'text/html; charset=utf-8' ); ?>\" />\n\t<meta name=\"generator\" content=\"YOURLS <?php echo YOURLS_VERSION ?>\" />\n\t<meta name=\"description\" content=\"YOURLS &raquo; Your Own URL Shortener' | <?php yourls_site_url(); ?>\" />\n\t<?php yourls_do_action('html_head_meta', $context); ?>\n    <?php yourls_html_favicon(); ?>\n\t<script src=\"<?php yourls_site_url(); ?>/js/jquery-3.5.1.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<script src=\"<?php yourls_site_url(); ?>/js/common.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<script src=\"<?php yourls_site_url(); ?>/js/jquery.notifybar.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/style.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t<?php if ( $tabs ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/infos.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/infos.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $tablesorter ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/tablesorter.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/jquery-3.tablesorter.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/tablesorte.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $insert ) { ?>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/insert.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $share ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/share.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/share.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/clipboard.min.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $cal ) { ?>\n\t\t<link rel=\"stylesheet\" href=\"<?php yourls_site_url(); ?>/css/cal.css?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/css\" media=\"screen\" />\n\t\t<?php yourls_l10n_calendar_strings(); ?>\n\t\t<script src=\"<?php yourls_site_url(); ?>/js/jquery.cal.js?v=<?php echo YOURLS_VERSION; ?>\" type=\"text/javascript\"></script>\n\t<?php } ?>\n\t<?php if ( $charts ) { ?>\n\t\t\t<script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t\t google.load('visualization', '1.0', {'packages':['corechart', 'geochart']});\n\t\t\t</script>\n\t<?php } ?>\n\t<script type=\"text/javascript\">\n\t//<![CDATA[\n\t\tvar ajaxurl  = '<?php echo yourls_admin_url( 'admin-ajax.php' ); ?>';\n\t//]]>\n\t</script>\n\t<?php yourls_do_action( 'html_head', $context ); ?>\n</head>\n<body class=\"<?php echo $context; ?> <?php echo $bodyclass; ?>\">\n<div id=\"wrap\">\n\t<?php\n}\n\n/**\n * Display HTML footer (including closing body & html tags)\n *\n * Function yourls_die() will call this function with the optional param set to false: most likely, if we're using yourls_die(),\n * there's a problem, so don't maybe add to it by sending another SQL query\n *\n * @param  bool $can_query  If set to false, will not try to send another query to DB server\n * @return void\n */\nfunction yourls_html_footer($can_query = true) {\n    if($can_query & yourls_get_debug_mode()) {\n        $num_queries = yourls_get_num_queries();\n        $num_queries = ' &ndash; '. sprintf( yourls_n( '1 query', '%s queries', $num_queries ), $num_queries );\n    } else {\n        $num_queries = '';\n    }\n\n\t?>\n\t</div><?php // wrap ?>\n\t<footer id=\"footer\" role=\"contentinfo\"><p>\n\t\t<?php\n\t\t$footer  = yourls_s( 'Powered by %s', '<a href=\"http://yourls.org/\" title=\"YOURLS\">YOURLS</a> v ' . YOURLS_VERSION );\n\t\t$footer .= $num_queries;\n\t\techo yourls_apply_filter( 'html_footer_text', $footer );\n\t\t?>\n\t</p></footer>\n\t<?php if( yourls_get_debug_mode() ) {\n\t\techo '<div style=\"text-align:left\"><pre>';\n\t\techo join( \"\\n\", yourls_get_debug_log() );\n\t\techo '</pre></div>';\n\t} ?>\n\t<?php yourls_do_action( 'html_footer', yourls_get_html_context() ); ?>\n\t</body>\n\t</html>\n\t<?php\n}\n\n/**\n * Display \"Add new URL\" box\n *\n * @param string $url URL to prefill the input with\n * @param string $keyword Keyword to prefill the input with\n */\nfunction yourls_html_addnew( $url = '', $keyword = '' ) {\n    $pre = yourls_apply_filter( 'shunt_html_addnew', false, $url, $keyword );\n    if ( false !== $pre ) {\n        return $pre;\n    }\n\t?>\n\t<main role=\"main\">\n\t<div id=\"new_url\">\n\t\t<div>\n\t\t\t<form id=\"new_url_form\" action=\"\" method=\"get\">\n\t\t\t\t<div>\n                    <label for=\"add-url\"><strong><?php yourls_e( 'Enter the URL' ); ?></strong></label>:\n                    <input type=\"text\" id=\"add-url\" name=\"url\" value=\"<?php echo $url; ?>\" class=\"text\" size=\"80\" placeholder=\"https://\" />\n                    <label for=\"add-keyword\"><?php yourls_e( 'Optional '); ?> : <strong><?php yourls_e('Custom short URL'); ?></strong></label>:\n                    <input type=\"text\" id=\"add-keyword\" name=\"keyword\" value=\"<?php echo $keyword; ?>\" class=\"text\" size=\"8\" />\n                    <?php yourls_nonce_field( 'add_url', 'nonce-add' ); ?>\n                    <input type=\"button\" id=\"add-button\" name=\"add-button\" value=\"<?php yourls_e( 'Shorten The URL' ); ?>\" class=\"button\" onclick=\"add_link();\" />\n                </div>\n\t\t\t</form>\n\t\t\t<div id=\"feedback\" style=\"display:none\"></div>\n\t\t</div>\n\t\t<?php yourls_do_action( 'html_addnew' ); ?>\n\t</div>\n\t<?php\n}\n\n/**\n * Display main table's footer\n *\n * The $param array is defined in /admin/index.php, check the yourls_html_tfooter() call\n *\n * @param array $params Array of all required parameters\n * @return string Result\n */\nfunction yourls_html_tfooter( $params = array() ) {\n    // Manually extract all parameters from the array. We prefer doing it this way, over using extract(),\n    // to make things clearer and more explicit about what var is used.\n    $search       = $params['search'];\n    $search_text  = $params['search_text'];\n    $search_in    = $params['search_in'];\n    $sort_by      = $params['sort_by'];\n    $sort_order   = $params['sort_order'];\n    $page         = $params['page'];\n    $perpage      = $params['perpage'];\n    $click_filter = $params['click_filter'];\n    $click_limit  = $params['click_limit'];\n    $total_pages  = $params['total_pages'];\n    $date_filter  = $params['date_filter'];\n    $date_first   = $params['date_first'];\n    $date_second  = $params['date_second'];\n\n\t?>\n\t<tfoot>\n\t\t<tr>\n\t\t\t<th colspan=\"6\">\n\t\t\t<div id=\"filter_form\">\n\t\t\t\t<form action=\"\" method=\"get\">\n\t\t\t\t\t<div id=\"filter_options\">\n\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t// First search control: text to search\n\t\t\t\t\t\t$_input = '<input aria-label=\"' .yourls__( 'Search for' ). '\" type=\"text\" name=\"search\" class=\"text\" size=\"12\" value=\"' . yourls_esc_attr( $search_text ) . '\" />';\n\t\t\t\t\t\t$_options = array(\n                            'all'     => yourls__( 'All fields' ),\n\t\t\t\t\t\t\t'keyword' => yourls__( 'Short URL' ),\n\t\t\t\t\t\t\t'url'     => yourls__( 'URL' ),\n\t\t\t\t\t\t\t'title'   => yourls__( 'Title' ),\n\t\t\t\t\t\t\t'ip'      => yourls__( 'IP' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'search_in', $_options, $search_in, false, yourls__( 'Search in' ) );\n\t\t\t\t\t\t/* //translators: \"Search for <input field with text to search> in <select dropdown with URL, title...>\" */\n\t\t\t\t\t\tyourls_se( 'Search for %1$s in %2$s', $_input , $_select );\n\t\t\t\t\t\techo \"&ndash;\\n\";\n\n\t\t\t\t\t\t// Second search control: order by\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'keyword'      => yourls__( 'Short URL' ),\n\t\t\t\t\t\t\t'url'          => yourls__( 'URL' ),\n\t\t\t\t\t\t\t'title'        => yourls__( 'Title' ),\n\t\t\t\t\t\t\t'timestamp'    => yourls__( 'Date' ),\n\t\t\t\t\t\t\t'ip'           => yourls__( 'IP' ),\n\t\t\t\t\t\t\t'clicks'       => yourls__( 'Clicks' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'sort_by', $_options, $sort_by, false,  yourls__( 'Sort by' ) );\n\t\t\t\t\t\t$sort_order = isset( $sort_order ) ? $sort_order : 'desc' ;\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'asc'  => yourls__( 'Ascending' ),\n\t\t\t\t\t\t\t'desc' => yourls__( 'Descending' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select2 = yourls_html_select( 'sort_order', $_options, $sort_order, false,  yourls__( 'Sort order' ) );\n\t\t\t\t\t\t/* //translators: \"Order by <criteria dropdown (date, clicks...)> in <order dropdown (Descending or Ascending)>\" */\n\t\t\t\t\t\tyourls_se( 'Order by %1$s %2$s', $_select , $_select2 );\n\t\t\t\t\t\techo \"&ndash;\\n\";\n\n\t\t\t\t\t\t// Third search control: Show XX rows\n\t\t\t\t\t\t/* //translators: \"Show <text field> rows\" */\n                        $_input = '<input aria-label=\"' .yourls__( 'Number of rows to show' ). '\" type=\"text\" name=\"perpage\" class=\"text\" size=\"2\" value=\"' . $perpage . '\" />';\n\t\t\t\t\t\tyourls_se( 'Show %s rows',  $_input );\n\t\t\t\t\t\techo \"<br/>\\n\";\n\n\t\t\t\t\t\t// Fourth search control: Show links with more than XX clicks\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'more' => yourls__( 'more' ),\n\t\t\t\t\t\t\t'less' => yourls__( 'less' ),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'click_filter', $_options, $click_filter, false, yourls__( 'Show links with' ) );\n\t\t\t\t\t\t$_input  = '<input aria-label=\"' .yourls__( 'Number of clicks' ). '\" type=\"text\" name=\"click_limit\" class=\"text\" size=\"4\" value=\"' . $click_limit . '\" /> ';\n\t\t\t\t\t\t/* //translators: \"Show links with <more/less> than <text field> clicks\" */\n\t\t\t\t\t\tyourls_se( 'Show links with %1$s than %2$s clicks', $_select, $_input );\n\t\t\t\t\t\techo \"<br/>\\n\";\n\n\t\t\t\t\t\t// Fifth search control: Show links created before/after/between ...\n\t\t\t\t\t\t$_options = array(\n\t\t\t\t\t\t\t'before'  => yourls__('before'),\n\t\t\t\t\t\t\t'after'   => yourls__('after'),\n\t\t\t\t\t\t\t'between' => yourls__('between'),\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$_select = yourls_html_select( 'date_filter', $_options, $date_filter, false, yourls__('Show links created') );\n\t\t\t\t\t\t$_input  = '<input aria-label=\"' .yourls__('Select a date') . '\" type=\"text\" name=\"date_first\" id=\"date_first\" class=\"text\" size=\"12\" value=\"' . $date_first . '\" />';\n\t\t\t\t\t\t$_and    = '<span id=\"date_and\"' . ( $date_filter === 'between' ? ' style=\"display:inline\"' : '' ) . '> &amp; </span>';\n\t\t\t\t\t\t$_input2 = '<input aria-label=\"' .yourls__('Select an end date') . '\" type=\"text\" name=\"date_second\" id=\"date_second\" class=\"text\" size=\"12\" value=\"' . $date_second . '\"' . ( $date_filter === 'between' ? ' style=\"display:inline\"' : '' ) . '/>';\n\t\t\t\t\t\t/* //translators: \"Show links created <before/after/between> <date input> <\"and\" if applicable> <date input if applicable>\" */\n\t\t\t\t\t\tyourls_se( 'Show links created %1$s %2$s %3$s %4$s', $_select, $_input, $_and, $_input2 );\n\t\t\t\t\t\t?>\n\n\t\t\t\t\t\t<div id=\"filter_buttons\">\n\t\t\t\t\t\t\t<input type=\"submit\" id=\"submit-sort\" value=\"<?php yourls_e('Search'); ?>\" class=\"button primary\" />\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<input type=\"button\" id=\"submit-clear-filter\" value=\"<?php yourls_e('Clear'); ?>\" class=\"button\" onclick=\"window.parent.location.href = 'index.php'\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t\t// Remove empty keys from the $params array so it doesn't clutter the pagination links\n\t\t\t$params = array_filter( $params, 'yourls_return_if_not_empty_string' ); // remove empty keys\n\n\t\t\tif( isset( $search_text ) ) {\n\t\t\t\t$params['search'] = $search_text;\n\t\t\t\tunset( $params['search_text'] );\n\t\t\t}\n\t\t\t?>\n\n\t\t\t<div id=\"pagination\">\n\t\t\t\t<span class=\"navigation\">\n\t\t\t\t<?php if( $total_pages > 1 ) { ?>\n\t\t\t\t\t<span class=\"nav_total\"><?php echo sprintf( yourls_n( '1 page', '%s pages', $total_pages ), $total_pages ); ?></span>\n\t\t\t\t\t<?php\n\t\t\t\t\t$base_page = yourls_admin_url( 'index.php' );\n\t\t\t\t\t// Pagination offsets: min( max ( zomg! ) );\n\t\t\t\t\t$p_start = max(  min( $total_pages - 4, $page - 2 ), 1 );\n\t\t\t\t\t$p_end = min( max( 5, $page + 2 ), $total_pages );\n\t\t\t\t\tif( $p_start >= 2 ) {\n\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => 1 ) ), $base_page );\n\t\t\t\t\t\techo '<span class=\"nav_link nav_first\"><a href=\"' . $link . '\" title=\"' . yourls_esc_attr__('Go to First Page') . '\">' . yourls__( '&laquo; First' ) . '</a></span>';\n\t\t\t\t\t\techo '<span class=\"nav_link nav_prev\"></span>';\n\t\t\t\t\t}\n\t\t\t\t\tfor( $i = $p_start ; $i <= $p_end; $i++ ) {\n\t\t\t\t\t\tif( $i == $page ) {\n\t\t\t\t\t\t\techo \"<span class='nav_link nav_current'>$i</span>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => $i ) ), $base_page );\n\t\t\t\t\t\t\techo '<span class=\"nav_link nav_goto\"><a href=\"' . $link . '\" title=\"' . sprintf( yourls_esc_attr( 'Page %s' ), $i ) .'\">'.$i.'</a></span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif( ( $p_end ) < $total_pages ) {\n\t\t\t\t\t\t$link = yourls_add_query_arg( array_merge( $params, array( 'page' => $total_pages ) ), $base_page );\n\t\t\t\t\t\techo '<span class=\"nav_link nav_next\"></span>';\n\t\t\t\t\t\techo '<span class=\"nav_link nav_last\"><a href=\"' . $link . '\" title=\"' . yourls_esc_attr__('Go to Last Page') . '\">' . yourls__( 'Last &raquo;' ) . '</a></span>';\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t<?php } ?>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t</th>\n\t\t</tr>\n\t\t<?php yourls_do_action( 'html_tfooter' ); ?>\n\t</tfoot>\n\t<?php\n}\n\n/**\n * Return or display a select dropdown field\n *\n * @since 1.6\n *\n * @param  string  $name      HTML 'name' (also use as the HTML 'id')\n * @param  array   $options   array of 'value' => 'Text displayed'\n * @param  string  $selected  optional 'value' from the $options array that will be highlighted\n * @param  boolean $display   false (default) to return, true to echo\n * @param  string  $label     ARIA label of the element\n * @return string HTML content of the select element\n */\nfunction yourls_html_select( $name, $options, $selected = '', $display = false, $label = '' ) {\n\t$html = \"<select aria-label='$label' name='$name' id='$name' size='1'>\\n\";\n\tforeach( $options as $value => $text ) {\n\t\t$html .= \"<option value='$value' \";\n\t\t$html .= $selected == $value ? ' selected=\"selected\"' : '';\n\t\t$html .= \">$text</option>\\n\";\n\t}\n\t$html .= \"</select>\\n\";\n\t$html  = yourls_apply_filter( 'html_select', $html, $name, $options, $selected, $display );\n\tif( $display )\n\t\techo $html;\n\treturn $html;\n}\n\n/**\n * Display the Quick Share box\n *\n */\nfunction yourls_share_box( $longurl, $shorturl, $title = '', $text='', $shortlink_title = '', $share_title = '', $hidden = false ) {\n\tif ( $shortlink_title == '' )\n\t\t$shortlink_title = '<h2>' . yourls__( 'Your short link' ) . '</h2>';\n\tif ( $share_title == '' )\n\t\t$share_title = '<h2>' . yourls__( 'Quick Share' ) . '</h2>';\n\n\t// Allow plugins to short-circuit the whole function\n\t$pre = yourls_apply_filter( 'shunt_share_box', false );\n\tif ( false !== $pre )\n\t\treturn $pre;\n\n    // Make sure IDN domains are in their UTF8 form\n    $shorturl = yourls_normalize_uri($shorturl);\n\n\t$text   = ( $text ? '\"'.$text.'\" ' : '' );\n\t$title  = ( $title ? \"$title \" : '' );\n\t$share  = yourls_esc_textarea( $title.$text.$shorturl );\n\t$count  = 280 - strlen( $share );\n\t$hidden = ( $hidden ? 'style=\"display:none;\"' : '' );\n\n\t// Allow plugins to filter all data\n\t$data = compact( 'longurl', 'shorturl', 'title', 'text', 'shortlink_title', 'share_title', 'share', 'count', 'hidden' );\n\t$data = yourls_apply_filter( 'share_box_data', $data );\n\textract( $data );\n\n\t$_share = rawurlencode( $share );\n\t$_url   = rawurlencode( $shorturl );\n\t?>\n\n\t<div id=\"shareboxes\" <?php echo $hidden; ?>>\n\n\t\t<?php yourls_do_action( 'shareboxes_before', $longurl, $shorturl, $title, $text ); ?>\n\n\t\t<div id=\"copybox\" class=\"share\">\n\t\t<?php echo $shortlink_title; ?>\n\t\t\t<p><input id=\"copylink\" class=\"text\" size=\"32\" value=\"<?php echo yourls_esc_url( $shorturl ); ?>\" /></p>\n\t\t\t<p><small><?php yourls_e( 'Long link' ); ?>: <a id=\"origlink\" href=\"<?php echo yourls_esc_url( $longurl ); ?>\"><?php echo yourls_esc_url( $longurl ); ?></a></small>\n\t\t\t<?php if( yourls_do_log_redirect() ) { ?>\n\t\t\t<br/><small><?php yourls_e( 'Stats' ); ?>: <a id=\"statlink\" href=\"<?php echo yourls_esc_url( $shorturl ); ?>+\"><?php echo yourls_esc_url( $shorturl ); ?>+</a></small>\n\t\t\t<input type=\"hidden\" id=\"titlelink\" value=\"<?php echo yourls_esc_attr( $title ); ?>\" />\n\t\t\t<?php } ?>\n\t\t\t</p>\n\t\t</div>\n\n\t\t<?php yourls_do_action( 'shareboxes_middle', $longurl, $shorturl, $title, $text ); ?>\n\n\t\t<div id=\"sharebox\" class=\"share\">\n\t\t\t<?php echo $share_title; ?>\n\t\t\t<div id=\"tweet\">\n\t\t\t\t<span id=\"charcount\" class=\"hide-if-no-js\"><?php echo $count; ?></span>\n\t\t\t\t<textarea id=\"tweet_body\"><?php echo $share; ?></textarea>\n\t\t\t</div>\n\t\t\t<p id=\"share_links\"><?php yourls_e( 'Share with' ); ?>\n\t\t\t\t<a id=\"share_tw\" href=\"https://twitter.com/intent/tweet?text=<?php echo $_share; ?>\" title=\"<?php yourls_e( 'Tweet this!' ); ?>\" onclick=\"share('tw');return false\">Twitter</a>\n\t\t\t\t<a id=\"share_fb\" href=\"https://www.facebook.com/share.php?u=<?php echo $_url; ?>\" title=\"<?php yourls_e( 'Share on Facebook' ); ?>\" onclick=\"share('fb');return false;\">Facebook</a>\n\t\t\t\t<?php\n\t\t\t\tyourls_do_action( 'share_links', $longurl, $shorturl, $title, $text );\n\t\t\t\t// Note: on the main admin page, there are no parameters passed to the sharebox when it's drawn.\n\t\t\t\t?>\n\t\t\t</p>\n\t\t</div>\n\n\t\t<?php yourls_do_action( 'shareboxes_after', $longurl, $shorturl, $title, $text ); ?>\n\n\t</div>\n\n\t<?php\n}\n\n/**\n * Die die die\n *\n */\nfunction yourls_die( $message = '', $title = '', $header_code = 200 ) {\n    yourls_do_action( 'pre_yourls_die', $message, $title, $header_code );\n\n\tyourls_status_header( $header_code );\n\n\tif( !yourls_did_action( 'html_head' ) ) {\n\t\tyourls_html_head();\n\t\tyourls_html_logo();\n\t}\n\techo yourls_apply_filter( 'die_title', \"<h2>$title</h2>\" );\n\techo yourls_apply_filter( 'die_message', \"<p>$message</p>\" );\n    // Hook into 'yourls_die' to add more elements or messages to that page\n\tyourls_do_action( 'yourls_die' );\n\tif( !yourls_did_action( 'html_footer' ) ) {\n\t\tyourls_html_footer(false);\n\t}\n\n\t// die with a value in case we're running tests, so PHPUnit doesn't exit with 0 as if success\n\tdie(1);\n}\n\n/**\n * Return an \"Edit\" row for the main table\n *\n * @param string $keyword Keyword to edit\n * @return string HTML of the edit row\n */\nfunction yourls_table_edit_row( $keyword ) {\n    $keyword = yourls_sanitize_keyword($keyword);\n\t$id = yourls_unique_element_id();\n\t$url = yourls_get_keyword_longurl( $keyword );\n\t$title = htmlspecialchars( yourls_get_keyword_title( $keyword ) );\n\t$safe_url = yourls_esc_attr( $url );\n\t$safe_title = yourls_esc_attr( $title );\n\t$safe_keyword = yourls_esc_attr( $keyword );\n\n    // Make strings sprintf() safe: '%' -> '%%'\n    $safe_url = str_replace( '%', '%%', $safe_url );\n    $safe_title = str_replace( '%', '%%', $safe_title );\n\n\t$www = yourls_link();\n\n\t$nonce = yourls_create_nonce( 'edit-save_'.$id );\n\n\tif( $url ) {\n\t\t$return = <<<RETURN\n<tr id=\"edit-$id\" class=\"edit-row\"><td colspan=\"5\" class=\"edit-row\"><strong>%s</strong>:<input type=\"text\" id=\"edit-url-$id\" name=\"edit-url-$id\" value=\"$safe_url\" class=\"text\" size=\"70\" /><br/><strong>%s</strong>: $www<input type=\"text\" id=\"edit-keyword-$id\" name=\"edit-keyword-$id\" value=\"$safe_keyword\" class=\"text\" size=\"10\" /><br/><strong>%s</strong>: <input type=\"text\" id=\"edit-title-$id\" name=\"edit-title-$id\" value=\"$safe_title\" class=\"text\" size=\"60\" /></td><td colspan=\"1\"><input type=\"button\" id=\"edit-submit-$id\" name=\"edit-submit-$id\" value=\"%s\" title=\"%s\" class=\"button\" onclick=\"edit_link_save('$id');\" />&nbsp;<input type=\"button\" id=\"edit-close-$id\" name=\"edit-close-$id\" value=\"%s\" title=\"%s\" class=\"button\" onclick=\"edit_link_hide('$id');\" /><input type=\"hidden\" id=\"old_keyword_$id\" value=\"$safe_keyword\"/><input type=\"hidden\" id=\"nonce_$id\" value=\"$nonce\"/></td></tr>\nRETURN;\n\t\t$return = sprintf( $return, yourls__( 'Long URL' ), yourls__( 'Short URL' ), yourls__( 'Title' ), yourls__( 'Save' ), yourls__( 'Save new values' ), yourls__( 'Cancel' ), yourls__( 'Cancel editing' ) );\n\t} else {\n\t\t$return = '<tr class=\"edit-row notfound\"><td colspan=\"6\" class=\"edit-row notfound\">' . yourls__( 'Error, URL not found' ) . '</td></tr>';\n\t}\n\n\t$return = yourls_apply_filter( 'table_edit_row', $return, $keyword, $url, $title );\n\n\treturn $return;\n}\n\n/**\n * Return an \"Add\" row for the main table\n *\n * @return string HTML of the edit row\n */\nfunction yourls_table_add_row( $keyword, $url, $title, $ip, $clicks, $timestamp ) {\n\t$keyword  = yourls_sanitize_keyword($keyword);\n\t$id       = yourls_unique_element_id();\n\t$shorturl = yourls_link( $keyword );\n\n\t$statlink = yourls_statlink( $keyword );\n\n\t$delete_link = yourls_nonce_url( 'delete-link_'.$id,\n\t\tyourls_add_query_arg( array( 'id' => $id, 'action' => 'delete', 'keyword' => $keyword ), yourls_admin_url( 'admin-ajax.php' ) )\n\t);\n\n\t$edit_link = yourls_nonce_url( 'edit-link_'.$id,\n\t\tyourls_add_query_arg( array( 'id' => $id, 'action' => 'edit', 'keyword' => $keyword ), yourls_admin_url( 'admin-ajax.php' ) )\n\t);\n\n\t// Action link buttons: the array\n\t$actions = array(\n\t\t'stats' => array(\n\t\t\t'href'    => $statlink,\n\t\t\t'id'      => \"statlink-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Stats' ),\n\t\t\t'anchor'  => yourls__( 'Stats' ),\n\t\t),\n\t\t'share' => array(\n\t\t\t'href'    => '',\n\t\t\t'id'      => \"share-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Share' ),\n\t\t\t'anchor'  => yourls__( 'Share' ),\n\t\t\t'onclick' => \"toggle_share('$id');return false;\",\n\t\t),\n\t\t'edit' => array(\n\t\t\t'href'    => $edit_link,\n\t\t\t'id'      => \"edit-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Edit' ),\n\t\t\t'anchor'  => yourls__( 'Edit' ),\n\t\t\t'onclick' => \"edit_link_display('$id');return false;\",\n\t\t),\n\t\t'delete' => array(\n\t\t\t'href'    => $delete_link,\n\t\t\t'id'      => \"delete-button-$id\",\n\t\t\t'title'   => yourls_esc_attr__( 'Delete' ),\n\t\t\t'anchor'  => yourls__( 'Delete' ),\n\t\t\t'onclick' => \"remove_link('$id');return false;\",\n\t\t)\n\t);\n\t$actions = yourls_apply_filter( 'table_add_row_action_array', $actions, $keyword );\n\n\t// Action link buttons: the HTML\n\t$action_links = '';\n\tforeach( $actions as $key => $action ) {\n\t\t$onclick = isset( $action['onclick'] ) ? 'onclick=\"' . $action['onclick'] . '\"' : '' ;\n\t\t$action_links .= sprintf( '<a href=\"%s\" id=\"%s\" title=\"%s\" class=\"%s\" %s>%s</a>',\n\t\t\t$action['href'], $action['id'], $action['title'], 'button button_'.$key, $onclick, $action['anchor']\n\t\t);\n\t}\n\t$action_links = yourls_apply_filter( 'action_links', $action_links, $keyword, $url, $ip, $clicks, $timestamp );\n\n\tif( ! $title )\n\t\t$title = $url;\n\n\t$protocol_warning = '';\n\tif( ! in_array( yourls_get_protocol( $url ) , array( 'http://', 'https://' ) ) )\n\t\t$protocol_warning = yourls_apply_filter( 'add_row_protocol_warning', '<span class=\"warning\" title=\"' . yourls__( 'Not a common link' ) . '\">&#9733;</span>' );\n\n\t// Row cells: the array\n\t$cells = array(\n\t\t'keyword' => array(\n\t\t\t'template'      => '<a href=\"%shorturl%\">%keyword_html%</a>',\n\t\t\t'shorturl'      => yourls_esc_url( $shorturl ),\n\t\t\t'keyword_html'  => yourls_esc_html( $keyword ),\n\t\t),\n\t\t'url' => array(\n\t\t\t'template'      => '<a href=\"%long_url%\" title=\"%title_attr%\">%title_html%</a><br/><small>%warning%<a href=\"%long_url%\">%long_url_html%</a></small>',\n\t\t\t'long_url'      => yourls_esc_url( $url ),\n\t\t\t'title_attr'    => yourls_esc_attr( $title ),\n\t\t\t'title_html'    => yourls_esc_html( yourls_trim_long_string( $title ) ),\n\t\t\t'long_url_html' => yourls_esc_html( yourls_trim_long_string( urldecode( $url ) ) ),\n\t\t\t'warning'       => $protocol_warning,\n\t\t),\n\t\t'timestamp' => array(\n\t\t\t'template' => '<span class=\"timestamp\" aria-hidden=\"true\">%timestamp%</span> %date%',\n            'timestamp' => $timestamp,\n\t\t\t'date'     => yourls_date_i18n( yourls_get_datetime_format('M d, Y H:i'), yourls_get_timestamp( $timestamp )),\n\t\t),\n\t\t'ip' => array(\n\t\t\t'template' => '%ip%',\n\t\t\t'ip'       => $ip,\n\t\t),\n\t\t'clicks' => array(\n\t\t\t'template' => '%clicks%',\n\t\t\t'clicks'   => yourls_number_format_i18n( $clicks, 0, '', '' ),\n\t\t),\n\t\t'actions' => array(\n\t\t\t'template' => '%actions% <input type=\"hidden\" id=\"keyword_%id%\" value=\"%keyword%\"/>',\n\t\t\t'actions'  => $action_links,\n\t\t\t'id'       => $id,\n\t\t\t'keyword'  => $keyword,\n\t\t),\n\t);\n\t$cells = yourls_apply_filter( 'table_add_row_cell_array', $cells, $keyword, $url, $title, $ip, $clicks, $timestamp );\n\n\t// Row cells: the HTML. Replace every %stuff% in 'template' with 'stuff' value.\n\t$row = \"<tr id=\\\"id-$id\\\">\";\n\tforeach( $cells as $cell_id => $elements ) {\n\t\t$row .= sprintf( '<td class=\"%s\" id=\"%s\">', $cell_id, $cell_id . '-' . $id );\n\t\t$row .= preg_replace_callback( '/%([^%]+)?%/', function( $match ) use ( $elements ) { return $elements[ $match[1] ]; }, $elements['template'] );\n\t\t$row .= '</td>';\n\t}\n\t$row .= \"</tr>\";\n\t$row  = yourls_apply_filter( 'table_add_row', $row, $keyword, $url, $title, $ip, $clicks, $timestamp );\n\n\treturn $row;\n}\n\n/**\n * Echo the main table head\n *\n */\nfunction yourls_table_head() {\n\t$start = '<table id=\"main_table\" class=\"tblSorter\" cellpadding=\"0\" cellspacing=\"1\"><thead><tr>'.\"\\n\";\n\techo yourls_apply_filter( 'table_head_start', $start );\n\n\t$cells = yourls_apply_filter( 'table_head_cells', array(\n\t\t'shorturl' => yourls__( 'Short URL' ),\n\t\t'longurl'  => yourls__( 'Original URL' ),\n\t\t'date'     => yourls__( 'Date' ),\n\t\t'ip'       => yourls__( 'IP' ),\n\t\t'clicks'   => yourls__( 'Clicks' ),\n\t\t'actions'  => yourls__( 'Actions' )\n\t) );\n\tforeach( $cells as $k => $v ) {\n\t\techo \"<th id='main_table_head_$k'><span>$v</span></th>\\n\";\n\t}\n\n\t$end = \"</tr></thead>\\n\";\n\techo yourls_apply_filter( 'table_head_end', $end );\n}\n\n/**\n * Echo the tbody start tag\n *\n */\nfunction yourls_table_tbody_start() {\n\techo yourls_apply_filter( 'table_tbody_start', '<tbody>' );\n}\n\n/**\n * Echo the tbody end tag\n *\n */\nfunction yourls_table_tbody_end() {\n\techo yourls_apply_filter( 'table_tbody_end', '</tbody>' );\n}\n\n/**\n * Echo the table start tag\n *\n */\nfunction yourls_table_end() {\n\techo yourls_apply_filter( 'table_end', '</table></main>' );\n}\n\n/**\n * Echo HTML tag for a link\n *\n */\nfunction yourls_html_link( $href, $title = '', $element = '' ) {\n\tif( !$title )\n\t\t$title = $href;\n\tif( $element )\n\t\t$element = sprintf( 'id=\"%s\"', yourls_esc_attr( $element ) );\n\t$link = sprintf( '<a href=\"%s\" %s>%s</a>', yourls_esc_url( $href ), $element, yourls_esc_html( $title ) );\n\techo yourls_apply_filter( 'html_link', $link );\n}\n\n/**\n * Display the login screen. Nothing past this point.\n *\n */\nfunction yourls_login_screen( $error_msg = '' ) {\n\tyourls_html_head( 'login' );\n\n\t$action = ( isset( $_GET['action'] ) && $_GET['action'] == 'logout' ? '?' : '' );\n\n\tyourls_html_logo();\n\t?>\n\t<div id=\"login\">\n\t\t<form method=\"post\" action=\"<?php echo $action; ?>\"> <?php // reset any QUERY parameters ?>\n\t\t\t<?php\n\t\t\t\tif( !empty( $error_msg ) ) {\n\t\t\t\t\techo '<p class=\"error\">'.$error_msg.'</p>';\n\t\t\t\t}\n\t\t\t\tyourls_do_action( 'login_form_top' );\n\t\t\t?>\n\t\t\t<p>\n\t\t\t\t<label for=\"username\"><?php yourls_e( 'Username' ); ?></label><br />\n\t\t\t\t<input type=\"text\" id=\"username\" name=\"username\" size=\"30\" class=\"text\" />\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label for=\"password\"><?php yourls_e( 'Password' ); ?></label><br />\n\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" size=\"30\" class=\"text\" />\n\t\t\t</p>\n\t\t\t<?php\n\t\t\t\tyourls_do_action( 'login_form_bottom' );\n\t\t\t?>\n\t\t\t<p style=\"text-align: right;\">\n\t\t\t    <?php yourls_nonce_field('admin_login'); ?>\n\t\t\t\t<input type=\"submit\" id=\"submit\" name=\"submit\" value=\"<?php yourls_e( 'Login' ); ?>\" class=\"button\" />\n\t\t\t</p>\n\t\t\t<?php\n\t\t\t\tyourls_do_action( 'login_form_end' );\n\t\t\t?>\n\t\t</form>\n\t\t<script type=\"text/javascript\">$('#username').focus();</script>\n\t</div>\n\t<?php\n\tyourls_html_footer();\n\tdie();\n}\n\n/**\n * Display the admin menu\n *\n */\nfunction yourls_html_menu() {\n\n\t// Build menu links\n\tif( defined( 'YOURLS_USER' ) ) {\n\t    // Create a logout link with a nonce associated to fake user 'logout' : the user is not yet defined\n\t    // when the logout check is done -- see yourls_is_valid_user()\n\t    $logout_url = yourls_nonce_url( 'admin_logout',\n\t\tyourls_add_query_arg(['action' => 'logout'], yourls_admin_url('index.php')), 'nonce', 'logout');\n\t\t$logout_link = yourls_apply_filter('logout_link', sprintf( yourls__('Hello <strong>%s</strong>'), YOURLS_USER ) . ' (<a href=\"' . $logout_url . '\" title=\"' . yourls_esc_attr__( 'Logout' ) . '\">' . yourls__( 'Logout' ) . '</a>)' );\n\t} else {\n\t\t$logout_link = yourls_apply_filter( 'logout_link', '' );\n\t}\n\t$help_link   = yourls_apply_filter( 'help_link',   '<a href=\"' . yourls_site_url( false ) .'/readme.html\">' . yourls__( 'Help' ) . '</a>' );\n\n\t$admin_links    = array();\n\t$admin_sublinks = array();\n\n\t$admin_links['admin'] = array(\n\t\t'url'    => yourls_admin_url( 'index.php' ),\n\t\t'title'  => yourls__( 'Go to the admin interface' ),\n\t\t'anchor' => yourls__( 'Admin interface' )\n\t);\n\n\tif( yourls_is_admin() ) {\n\t\t$admin_links['tools'] = array(\n\t\t\t'url'    => yourls_admin_url( 'tools.php' ),\n\t\t\t'anchor' => yourls__( 'Tools' )\n\t\t);\n\t\t$admin_links['plugins'] = array(\n\t\t\t'url'    => yourls_admin_url( 'plugins.php' ),\n\t\t\t'anchor' => yourls__( 'Manage Plugins' )\n\t\t);\n\t\t$admin_sublinks['plugins'] = yourls_list_plugin_admin_pages();\n\t}\n\n\t$admin_links    = yourls_apply_filter( 'admin_links',    $admin_links );\n\t$admin_sublinks = yourls_apply_filter( 'admin_sublinks', $admin_sublinks );\n\n\t// Now output menu\n\techo '<nav role=\"navigation\"><ul id=\"admin_menu\">'.\"\\n\";\n\tif ( yourls_is_private() && !empty( $logout_link ) )\n\t\techo '<li id=\"admin_menu_logout_link\">' . $logout_link .'</li>';\n\n\tforeach( (array)$admin_links as $link => $ar ) {\n\t\tif( isset( $ar['url'] ) ) {\n\t\t\t$anchor = isset( $ar['anchor'] ) ? $ar['anchor'] : $link;\n\t\t\t$title  = isset( $ar['title'] ) ? 'title=\"' . $ar['title'] . '\"' : '';\n\t\t\tprintf( '<li id=\"admin_menu_%s_link\" class=\"admin_menu_toplevel\"><a href=\"%s\" %s>%s</a>', $link, $ar['url'], $title, $anchor );\n\t\t}\n\t\t// Output submenu if any. TODO: clean up, too many code duplicated here\n\t\tif( isset( $admin_sublinks[$link] ) ) {\n\t\t\techo \"<ul>\\n\";\n\t\t\tforeach( $admin_sublinks[$link] as $link => $ar ) {\n\t\t\t\tif( isset( $ar['url'] ) ) {\n\t\t\t\t\t$anchor = isset( $ar['anchor'] ) ? $ar['anchor'] : $link;\n\t\t\t\t\t$title  = isset( $ar['title'] ) ? 'title=\"' . $ar['title'] . '\"' : '';\n\t\t\t\t\tprintf( '<li id=\"admin_menu_%s_link\" class=\"admin_menu_sublevel admin_menu_sublevel_%s\"><a href=\"%s\" %s>%s</a>', $link, $link, $ar['url'], $title, $anchor );\n\t\t\t\t}\n\t\t\t}\n\t\t\techo \"</ul>\\n\";\n\t\t}\n\t}\n\n\tif ( isset( $help_link ) )\n\t\techo '<li id=\"admin_menu_help_link\">' . $help_link .'</li>';\n\n\tyourls_do_action( 'admin_menu' );\n\techo \"</ul></nav>\\n\";\n\tyourls_do_action( 'admin_notices' );\n\tyourls_do_action( 'admin_notice' ); // because I never remember if it's 'notices' or 'notice'\n\t/*\n\tTo display a notice:\n\t$message = \"<div>OMG, dude, I mean!</div>\" );\n\tyourls_add_action( 'admin_notices', function() use ( $message ) { echo (string) $message; } );\n\t*/\n}\n\n/**\n * Wrapper function to display admin notices\n *\n */\nfunction yourls_add_notice( $message, $style = 'notice' ) {\n\t// Escape single quotes in $message to avoid breaking the anonymous function\n\t$message = yourls_notice_box( strtr( $message, array( \"'\" => \"\\'\" ) ), $style );\n\tyourls_add_action( 'admin_notices', function() use ( $message ) { echo (string) $message; } );\n}\n\n/**\n * Return a formatted notice\n *\n */\nfunction yourls_notice_box( $message, $style = 'notice' ) {\n\treturn <<<HTML\n\t<div class=\"$style\">\n\t<p>$message</p>\n\t</div>\nHTML;\n}\n\n/**\n *  Display a page\n *\n *  Includes content of a PHP file from the YOURLS_PAGEDIR directory, as if it\n *  were a standard short URL (ie http://sho.rt/$page)\n *\n *  @since 1.0\n *  @param $page      PHP file to display\n */\nfunction yourls_page( $page ) {\n    if( !yourls_is_page($page)) {\n\t\tyourls_die( yourls_s('Page \"%1$s\" not found', $page), yourls__('Not found'), 404 );\n    }\n\n\tyourls_do_action( 'pre_page', $page );\n\tinclude_once( YOURLS_PAGEDIR . \"/$page.php\" );\n\tyourls_do_action( 'post_page', $page );\n}\n\n/**\n * Display the language attributes for the HTML tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page. Stolen from WP.\n *\n * @since 1.6\n */\nfunction yourls_html_language_attributes() {\n\t$attributes = array();\n\t$output = '';\n\n\t$attributes[] = ( yourls_is_rtl() ? 'dir=\"rtl\"' : 'dir=\"ltr\"' );\n\n\t$doctype = yourls_apply_filter( 'html_language_attributes_doctype', 'html' );\n\t// Experimental: get HTML lang from locale. Should work. Convert fr_FR -> fr-FR\n\tif ( $lang = str_replace( '_', '-', yourls_get_locale() ) ) {\n\t\tif( $doctype == 'xhtml' ) {\n\t\t\t$attributes[] = \"xml:lang=\\\"$lang\\\"\";\n\t\t} else {\n\t\t\t$attributes[] = \"lang=\\\"$lang\\\"\";\n\t\t}\n\t}\n\n\t$output = implode( ' ', $attributes );\n\t$output = yourls_apply_filter( 'html_language_attributes', $output );\n\techo $output;\n}\n\n/**\n * Output translated strings used by the Javascript calendar\n *\n * @since 1.6\n */\nfunction yourls_l10n_calendar_strings() {\n\techo \"\\n<script>\\n\";\n\techo \"var l10n_cal_month = \" . json_encode( array_values( yourls_l10n_months() ) ) . \";\\n\";\n\techo \"var l10n_cal_days = \" . json_encode( array_values( yourls_l10n_weekday_initial() ) ) . \";\\n\";\n\techo \"var l10n_cal_today = \\\"\" . yourls_esc_js( yourls__( 'Today' ) ) . \"\\\";\\n\";\n\techo \"var l10n_cal_close = \\\"\" . yourls_esc_js( yourls__( 'Close' ) ) . \"\\\";\\n\";\n\techo \"</script>\\n\";\n\n\t// Dummy returns, to initialize l10n strings used in the calendar\n\tyourls__( 'Today' );\n\tyourls__( 'Close' );\n}\n\n\n/**\n * Display a notice if there is a newer version of YOURLS available\n *\n * @since 1.7\n */\nfunction yourls_new_core_version_notice() {\n\n\t$checks = yourls_get_option( 'core_version_checks' );\n    $latest = isset($checks->last_result->latest) ? yourls_sanitize_version($checks->last_result->latest) : false;\n\n\tif( $latest AND version_compare( $latest, YOURLS_VERSION, '>' ) ) {\n\t\t$msg = yourls_s( '<a href=\"%s\">YOURLS version %s</a> is available. Please update!', 'http://yourls.org/download', $latest );\n\t\tyourls_add_notice( $msg );\n\t}\n}\n\n/**\n * Display or return HTML for a bookmarklet link\n *\n * @since 1.7.1\n * @param string $href    bookmarklet link (presumably minified code with \"javascript:\" scheme)\n * @param string $anchor  link anchor\n * @param bool   $echo    true to display, false to return the HTML\n * @return string         the HTML for a bookmarklet link\n */\nfunction yourls_bookmarklet_link( $href, $anchor, $echo = true ) {\n    $alert = yourls_esc_attr__( 'Drag to your toolbar!' );\n    $link = <<<LINK\n    <a href=\"$href\" class=\"bookmarklet\" onclick=\"alert('$alert');return false;\">$anchor</a>\nLINK;\n\n    if( $echo )\n        echo $link;\n    return $link;\n}\n\n/**\n * Set HTML context (stats, index, infos, ...)\n *\n * @since  1.7.3\n * @param  string  $context\n * @return void\n */\nfunction yourls_set_html_context($context) {\n    yourls_get_db()->set_html_context($context);\n}\n\n/**\n * Get HTML context (stats, index, infos, ...)\n *\n * @since  1.7.3\n * @return string\n */\nfunction yourls_get_html_context() {\n    yourls_get_db()->get_html_context();\n}\n\n/**\n * Print HTML link for favicon\n *\n * @since 1.7.10\n * @return mixed|void\n */\nfunction yourls_html_favicon() {\n    // Allow plugins to short-circuit the whole function\n    $pre = yourls_apply_filter( 'shunt_html_favicon', false );\n    if ( false !== $pre ) {\n        return $pre;\n    }\n\n    printf( '<link rel=\"shortcut icon\" href=\"%s\" />', yourls_get_yourls_favicon_url(false) );\n}\n\n", "<?php\n/**\n * Login tests - via Cookies\n *\n * @group auth\n * @group login\n * @group cookies\n * @since 0.1\n */\nclass Auth_Login_Cookie_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected $cookie;\n    protected $request;\n    protected $backup_yourls_actions;\n\n    protected function setUp(): void {\n        $this->cookie = $_COOKIE;\n        $this->request = $_REQUEST;\n        global $yourls_actions;\n        $this->backup_yourls_actions = $yourls_actions;\n    }\n\n    protected function tearDown(): void {\n        $_COOKIE = $this->cookie;\n        $_REQUEST = $this->request;\n        global $yourls_actions;\n        $yourls_actions = $this->backup_yourls_actions;\n    }\n\n    public static function setUpBeforeClass(): void {\n        yourls_add_filter( 'is_API', 'yourls_return_false' );\n    }\n\n    public static function tearDownAfterClass(): void {\n        yourls_remove_filter( 'is_API', 'yourls_return_false' );\n    }\n\n\t/**\n\t * Check for valid cookie name\n\t */\n\tpublic function test_cookie_name() {\n        $this->assertTrue( is_string(yourls_cookie_name()) );\n    }\n\n\t/**\n\t * Check for valid cookie value\n\t */\n\tpublic function test_cookie_value() {\n        $this->assertTrue( is_string(yourls_cookie_value(rand_str())) );\n    }\n\n\t/**\n\t * Check for valid cookie life\n\t */\n\tpublic function test_cookie_life() {\n        $this->assertTrue( is_int(yourls_get_cookie_life()) );\n    }\n\n\t/**\n\t * Test login with valid cookie - also check that cookie is set\n\t */\n\tpublic function test_login_valid_cookie() {\n        global $yourls_user_passwords;\n        $random_user = array_rand($yourls_user_passwords);\n        $_COOKIE[yourls_cookie_name()] = yourls_cookie_value( $random_user );\n        unset($_REQUEST);\n\n        $this->assertSame( 0, yourls_did_action('pre_setcookie') );\n        $this->assertTrue(yourls_check_auth_cookie());\n        $this->assertTrue(yourls_is_valid_user());\n        $this->assertSame( 1, yourls_did_action('pre_setcookie') );\n    }\n\n\t/**\n\t * Test login with invalid cookie - also check that no cookie is set\n\t */\n\tpublic function test_login_invalid_cookie() {\n        $_COOKIE[yourls_cookie_name()] = yourls_cookie_value( rand_str() );\n        unset($_REQUEST);\n\n        $this->assertSame( 0, yourls_did_action('pre_setcookie') );\n        $this->assertFalse(yourls_check_auth_cookie());\n        $this->assertNotTrue(yourls_is_valid_user());\n        $this->assertSame( 0, yourls_did_action('pre_setcookie') );\n    }\n\n}\n", "<?php\n\n/**\n * Logout function\n *\n * @group auth\n */\nclass Logout_Func_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected $backup_get;\n    protected $backup_request;\n    private static $user;\n\n    protected function setUp(): void {\n        $this->backup_get     = $_GET;\n        $this->backup_request = $_REQUEST;\n        self::$user = false;\n    }\n\n    protected function tearDown(): void {\n        $_GET = $this->backup_get;\n        $_REQUEST = $this->backup_request;\n    }\n\n    public static function setUpBeforeClass(): void {\n        yourls_add_action( 'pre_setcookie', function ($in) {\n            self::$user = $in[0]; // $in[0] is the user ID passed to yourls_setcookie()\n        } );\n    }\n\n    public static function tearDownAfterClass(): void {\n        yourls_remove_all_actions('pre_setcookie');\n    }\n\n    /**\n     * Check logout procedure - phase 1 - we're logging in\n     */\n    public function test_logout_user_is_logged_in() {\n        $_REQUEST['nonce'] = yourls_create_nonce('admin_login');\n        $valid = yourls_is_valid_user();\n        $this->assertTrue($valid);\n        $this->assertSame(self::$user, 'yourls');\n    }\n\n    /**\n     * Check logout procedure - phase 2 - we're logging out and checking that cookie was reset\n     * @depends test_logout_user_is_logged_in\n     */\n    public function test_logout_user_logs_out() {\n        $_GET['action'] = 'logout';\n        $_REQUEST['nonce'] = yourls_create_nonce('admin_logout', 'logout');\n        $invalid = yourls_is_valid_user();\n        $this->assertNotTrue( $invalid );\n        $this->assertSame(self::$user, null);\n    }\n\n    /**\n     * Check logout procedure - phase 3 - check we can log in again\n     * @depends test_logout_user_logs_out\n     */\n    public function test_logout_user_is_logged_in_back() {\n        $_REQUEST['nonce'] = yourls_create_nonce('admin_login');\n        $valid = yourls_is_valid_user();\n        $this->assertTrue( $valid );\n        $this->assertSame(self::$user, 'yourls');\n    }\n\n}\n", "<?php\n\n/**\n * Misc test\n *\n * @group auth\n */\nclass Misc_Auth_Tests extends PHPUnit\\Framework\\TestCase {\n\n    public function test_yourls_skip_password_hashing_is_bool() {\n        $this->assertIsBool(yourls_skip_password_hashing());\n    }\n\n\n\n}\n", "<?php\n/**\n * Nonce tests\n *\n * @group auth\n * @group nonces\n * @since 0.1\n */\nclass Auth_Nonce_Tests extends PHPUnit\\Framework\\TestCase {\n\n    protected function tearDown(): void {\n        yourls_remove_all_actions('pre_yourls_die');\n    }\n\n\t/**\n\t * Check for valid nonce life\n\t */\n\tpublic function test_nonce_life() {\n        $this->assertTrue( is_int(yourls_get_cookie_life()) );\n    }\n\n\t/**\n\t * Check for valid tick\n\t */\n\tpublic function test_tick() {\n        $this->assertTrue( is_float(yourls_tick()) );\n    }\n\n\t/**\n\t * Check nonce creation\n\t */\n\tpublic function test_create_nonce() {\n        $this->assertTrue( is_string(yourls_create_nonce(rand_str(), rand_str())) );\n    }\n\n\t/**\n\t * Check nonce field creation\n\t */\n\tpublic function test_create_nonce_field() {\n        $field = yourls_nonce_field( rand_str(), rand_str(), rand_str(), false );\n        $this->assertTrue( is_string($field) );\n    }\n\n\t/**\n\t * Check nonce URL creation\n\t */\n\tpublic function test_create_nonce_url() {\n        $url = yourls_nonce_url( rand_str(), rand_str(), rand_str(), rand_str() );\n        $this->assertTrue( is_string($url) );\n    }\n\n\t/**\n\t * Test valid nonce\n\t */\n\tpublic function test_valid_nonce() {\n        $action = rand_str();\n        $user   = rand_str();\n\n        // what nonce should be\n        $valid = yourls_create_nonce( $action, $user );\n\n        $this->assertTrue(yourls_verify_nonce($action, $valid, $user));\n    }\n\n\t/**\n\t * Test invalid nonce\n\t */\n\tpublic function test_invalid_nonce() {\n        $this->expectException(Exception::class);\n        $this->expectExceptionMessage('I have died');\n\n        // intercept yourls_die() before it actually dies\n        yourls_add_action( 'pre_yourls_die', function() { throw new Exception( 'I have died' ); } );\n\n        // This should trigger yourls_die()\n        $this->assertTrue(yourls_verify_nonce(rand_str(), rand_str(), rand_str()));\n    }\n\n    /**\n     * Check nonces are different for different actions & users\n     */\n    public function test_nonce_different_for_different_actions_and_users() {\n        $action1 = rand_str();\n        $action2 = rand_str();\n        $user1 = rand_str();\n        $user2 = rand_str();\n\n        $nonce_a1 = yourls_create_nonce($action1);\n        $nonce_a2 = yourls_create_nonce($action2);\n        $nonce_a1_u1 = yourls_create_nonce($action1, $user1);\n        $nonce_a1_u2 = yourls_create_nonce($action1, $user2);\n\n        $this->assertNotEquals($nonce_a1, $nonce_a2);\n        $this->assertNotEquals($nonce_a1_u1, $nonce_a1_u2);\n        $this->assertNotEquals($nonce_a1, $nonce_a1_u1);\n    }\n\n}\n"], "filenames": [".gitignore", "admin/admin-ajax.php", "includes/functions-auth.php", "includes/functions-html.php", "tests/tests/auth/login_cookie.php", "tests/tests/auth/logout.php", "tests/tests/auth/misc.php", "tests/tests/auth/nonces.php"], "buggy_code_start_loc": [33, 43, 22, 753, 13, 11, 13, 50], "buggy_code_end_loc": [33, 48, 633, 754, 75, 49, 13, 79], "fixing_code_start_loc": [34, 42, 23, 753, 14, 12, 14, 49], "fixing_code_end_loc": [35, 42, 639, 758, 85, 66, 16, 98], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository yourls/yourls prior to 1.8.3.", "other": {"cve": {"id": "CVE-2022-0088", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-03T09:15:08.897", "lastModified": "2022-04-09T15:22:54.143", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository yourls/yourls prior to 1.8.3."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-Site Request Forgery (CSRF) en el repositorio de GitHub yourls/yourls versiones anteriores a 1.8.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yourls:yourls:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8.3", "matchCriteriaId": "19472073-E345-4464-BD36-BE4DF8CB7F20"}]}]}], "references": [{"url": "https://github.com/yourls/yourls/commit/1de256d8694b0ec7d4df2ac1d5976d4055e09d59", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d01f0726-1a0f-4575-ae17-4b5319b11c29", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yourls/yourls/commit/1de256d8694b0ec7d4df2ac1d5976d4055e09d59"}}