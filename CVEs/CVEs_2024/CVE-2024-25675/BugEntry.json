{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Job $Job\n */\nclass JobsController extends AppController\n{\n    public $components = array('RequestHandler', 'Session');\n\n    public $paginate = array(\n        'limit' => 20,\n        'recursive' => 0,\n        'order' => array(\n            'Job.id' => 'desc'\n        ),\n    );\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        if ($this->request->action === 'getGenerateCorrelationProgress') {\n            $this->Security->doNotGenerateToken = true;\n        }\n    }\n\n    public function index($queue = false)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            throw new NotFoundException('Background jobs are not enabled on this instance.');\n        }\n        $this->loadModel('Server');\n        $issueCount = 0;\n        $workers = $this->Server->workerDiagnostics($issueCount);\n        $queues = ['email', 'default', 'cache', 'prio', 'update'];\n        if ($queue && in_array($queue, $queues, true)) {\n            $this->paginate['conditions'] = ['Job.worker' => $queue];\n        }\n        $jobs = $this->paginate();\n        foreach ($jobs as &$job) {\n            if (!empty($job['Job']['process_id'])) {\n                $job['Job']['job_status'] = $this->__getJobStatus($job['Job']['process_id']);\n                $job['Job']['failed'] = $job['Job']['job_status'] === 'Failed';\n            } else {\n                $job['Job']['job_status'] = 'Unknown';\n                $job['Job']['failed'] = null;\n            }\n            if (Configure::read('SimpleBackgroundJobs.enabled')) {\n                $job['Job']['worker_status'] = true;\n            } else {\n                $job['Job']['worker_status'] = isset($workers[$job['Job']['worker']]) && $workers[$job['Job']['worker']]['ok'];\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($jobs, $this->response->type());\n        }\n        $this->set('list', $jobs);\n        $this->set('queue', $queue);\n    }\n\n    public function getError($id)\n    {\n        $fields = array(\n            'Failed at' => 'failed_at',\n            'Exception' => 'exception',\n            'Error' => 'error'\n        );\n        $this->set('fields', $fields);\n        $this->set('response', $this->__getFailedJobLog($id));\n        $this->render('/Jobs/ajax/error');\n    }\n\n    private function __jobStatusConverter($status)\n    {\n        switch ($status) {\n            case 1:\n                return 'Waiting';\n            case 2:\n                return 'Running';\n            case 3:\n                return 'Failed';\n            case 4:\n                return 'Completed';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    public function getGenerateCorrelationProgress($ids)\n    {\n        $this->_closeSession();\n\n        $ids = explode(\",\", $ids);\n        $jobs = $this->Job->find('all', [\n            'fields' => ['id', 'progress', 'process_id'],\n            'conditions' => ['id' => $ids],\n            'recursive' => -1,\n        ]);\n        if (empty($jobs)) {\n            throw new NotFoundException('No jobs found');\n        }\n\n        $output = [];\n        foreach ($jobs as $job) {\n            $output[$job['Job']['id']] = [\n                'job_status' => $this->__getJobStatus($job['Job']['process_id']),\n                'progress' => (int)$job['Job']['progress'],\n            ];\n        }\n        return $this->RestResponse->viewData($output, 'json');\n    }\n\n    public function getProgress($type)\n    {\n        $org_id = $this->Auth->user('org_id');\n        if ($this->_isSiteAdmin()) {\n            $org_id = 0;\n        }\n\n        if (is_numeric($type)) {\n            $progress = $this->Job->find('first', array(\n                'conditions' => array(\n                    'Job.id' => $type,\n                    'org_id' => $org_id\n                ),\n                'fields' => array('id', 'progress'),\n                'order' => array('Job.id' => 'desc'),\n            ));\n        } else {\n            $progress = $this->Job->find('first', array(\n                'conditions' => array(\n                    'job_type' => $type,\n                    'org_id' => $org_id\n                ),\n                'fields' => array('id', 'progress'),\n                'order' => array('Job.id' => 'desc'),\n            ));\n        }\n        if (!$progress) {\n            $progress = 0;\n        } else {\n            $progress = $progress['Job']['progress'];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('progress' => $progress . '%'), $this->response->type());\n        } else {\n            return new CakeResponse(array('body' => json_encode($progress), 'type' => 'json'));\n        }\n    }\n\n    public function cache($type)\n    {\n        if (Configure::read('MISP.disable_cached_exports')) {\n            throw new MethodNotAllowedException('This feature is currently disabled');\n        }\n        if ($this->_isSiteAdmin()) {\n            $target = 'All events.';\n        } else {\n            $target = 'Events visible to: ' . $this->Auth->user('Organisation')['name'];\n        }\n        $id = $this->Job->cache($type, $this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('job_id' => $id), $this->response->type());\n        } else {\n            return new CakeResponse(array('body' => json_encode($id), 'type' => 'json'));\n        }\n    }\n\n    public function clearJobs($type = 'completed')\n    {\n        if ($this->request->is('post')) {\n            if ($type === 'all') {\n                $conditions = array('Job.id !=' => 0);\n                $message = __('All jobs have been purged');\n            } else {\n                $conditions = array('Job.progress' => 100);\n                $message = __('All completed jobs have been purged');\n            }\n            $this->Job->deleteAll($conditions, false);\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    private function __getJobStatus($id): string\n    {\n        if (!Configure::read('SimpleBackgroundJobs.enabled')) {\n            return $this->__jobStatusConverter(CakeResque::getJobStatus($id));\n        }\n\n        $status = null;\n        if (!empty($id)) {\n            $job = $this->Job->getBackgroundJobsTool()->getJob($id);\n            $status = $job ? $job->status() : $status;\n        }\n\n        return $this->__jobStatusConverter($status);\n    }\n\n    private function __getFailedJobLog(string $id): array\n    {\n        if (!Configure::read('SimpleBackgroundJobs.enabled')) {\n            return CakeResque::getFailedJobLog($id);\n        }\n\n        $job = $this->Job->getBackgroundJobsTool()->getJob($id);\n        $output = $job ? $job->output() : __('Job status not found.');\n        $backtrace = $job ? explode(\"\\n\", $job->error()) : [];\n\n        return [\n            'error' => $output ?? $backtrace[0] ?? '',\n            'backtrace' => $backtrace\n        ];\n    }\n}\n", "<div class=\"event index\">\n    <h2><?php echo __('Export');?></h2>\n    <p><?php echo __('Export functionality is designed to automatically generate signatures for intrusion detection systems. To enable signature generation for a given attribute, Signature field of this attribute must be set to Yes.\n        Note that not all attribute types are applicable for signature generation, currently we only support NIDS signature generation for IP, domains, host names, user agents etc., and hash list generation for MD5/SHA1 values of file artifacts. Support for more attribute types is planned.');?>\n    <br/>\n    <p><?php echo __('Simply click on any of the following buttons to download the appropriate data.');?></p>\n    <?php $i = 0;?>\n    <script type=\"text/javascript\">\n        var jobsArray = new Array();\n        var intervalArray = new Array();\n        function queueInterval(i, k, id, progress, modified) {\n            jobsArray[i] = id;\n            intervalArray[i] = setInterval(function(){\n                    if (id != -1 && progress < 100 && modified != \"N/A\") {\n                        queryTask(k, i);\n                    }\n                }, 3000);\n        }\n        function editMessage(id, text) {\n            document.getElementById(\"message\" + id).innerHTML = text;\n        }\n    </script>\n    <table class=\"table table-striped table-hover table-condensed\">\n        <?php\n            $background = (!empty(Configure::read('MISP.background_jobs')) && empty(Configure::read('MISP.disable_cached_exports')));\n            $fields = array(__('Type'), __('Last Update'), __('Description'), __('Outdated'), __('Filesize'), __('Progress'), __('Actions'));\n            if (!$background) {\n                unset($fields[1]);\n                unset($fields[3]);\n                unset($fields[4]);\n                unset($fields[5]);\n            }\n            $headers = array();\n            foreach ($fields as $field) {\n                $headers[] = sprintf(\n                    '<th style=\"text-align:center;\">%s</th>',\n                    $field\n                );\n            }\n            echo sprintf(\n                '<tr>%s</tr>',\n                implode('', $headers)\n            );\n            foreach ($export_types as $k => $type) {\n                $cells = array();\n                $cells[] = sprintf(\n                    '<td class=\"short\">%s</td>',\n                    h($type['type'])\n                );\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td id=\"update%s\" class=\"short red\">%s</td>',\n                        h($i),\n                        h($type['lastModified'])\n                    );\n                }\n                $cells[] = sprintf(\n                    '<td>%s%s</td>',\n                    h($type['description']),\n                    empty($type['params']['includeAttachments']) ? '' : sprintf(\n                        ' <span class=\"%s\">%s.</span>',\n                        Configure::read('MISP.cached_attachments') ? 'green' : 'red',\n                        Configure::read('MISP.cached_attachments') ? __('Attachments are enabled on this instance') : __('Attachments are disabled on this instance')\n                    )\n                );\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td id=\"outdated%s\">%s</td>',\n                        h($i),\n                        $type['recommendation'] ? '<span style=\"color:red;\">' . __('Yes') . '</span>' : __('No')\n                    );\n                    $cells[] = sprintf(\n                        '<td class=\"short\" style=\"text-align:right;\">%s</td>',\n                        isset($type['filesize']) ? h($type['filesize']) : sprintf('<span class=\"red\">%s</span>', __('N/A'))\n                    );\n                    $status = __('Loading\u2026');\n                    if ($type['progress'] == 0 && $type['lastModified'] != \"N/A\") {\n                        $status = __('Queued');\n                    } else if ($type['progress'] == 0 && $type['lastModified'] == \"N/A\") {\n                        $status = '<span style=\"color:red;\">' . __('N/A') . '</span>';\n                    } else if ($type['progress'] == 100) {\n                        if (isset($type['filesize'])) {\n                            $status = __('Completed');\n                        } else {\n                            $status = '<span style=\"color:red;\">' . __('N/A') . '</span>';\n                        }\n                    } else {\n                        $status = h($type['progress']) . '%';\n                    }\n                    $cells[] = sprintf(\n                        '<td style=\"width:150px;\"><div id=\"barFrame%s\" %s>%s</div><div id=\"message%s\" style=\"text-align:center;display:block;\">%s</div><script type=\"text/javascript\">%s</script></td>',\n                        h($i),\n                        'class=\"progress progress-striped active\" style=\"margin-bottom: 0px;display:none;\"',\n                        sprintf(\n                            '<div id=\"bar%s\" class=\"bar\" style=\"width: %s%%;\">%s</div>',\n                            h($i),\n                            h($type['progress']),\n                            $status\n                        ),\n                        h($i),\n                        $status,\n                        sprintf(\n                            '<script type=\"text/javascript\">queueInterval(\"%s\", \"%s\", \"%s\", \"%s\", \"%s\");</script>',\n                            h($i),\n                            h($k),\n                            h($type['job_id']),\n                            h($type['progress']),\n                            h($type['lastModified'])\n                        )\n                    );\n                }\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td><span class=\"btn-group\">%s%s</span></td>',\n                        ($k === 'text') ? '' : $this->Html->link(__('Download'), array('action' => 'downloadExport', $k), array('class' => 'btn btn-inverse btn-small')),\n                        sprintf(\n                            '<button class=\"btn btn-inverse btn-small\" id=button%s onClick=\"generate(\\'%s\\', \\'%s\\', \\'%s\\', \\'%s\\', \\'%s\\')\" %s>%s</button>',\n                            $i,\n                            h($i),\n                            h($k),\n                            h($type['job_id']),\n                            h($type['progress']),\n                            h($type['lastModified']),\n                            (!$type['recommendation']) ? 'disabled' : '',\n                            __('Generate')\n                        )\n                    );\n                } else {\n                    $params = array();\n                    foreach ($type['params'] as $param => $param_value) {\n                        if ($param == 'includeAttachments') {\n                            if ($param_value == 1 && Configure::read('MISP.cached_attachments')) {\n                                $param_value = '1';\n                            } else {\n                                $param_value = '0';\n                            }\n                        }\n                        $params[] = h($param) . ':' . strval(h($param_value));\n                    }\n                    $download_url = $baseurl . '/' . strtolower($type['scope']) . 's/restSearch/' . implode('/', $params) . '.json';\n                    $cells[] = sprintf(\n                        '<td><a href=\"%s\" class=\"btn btn-inverse btn-small\">%s</a></td>',\n                        $download_url,\n                        __('Download')\n                    );\n                }\n                echo sprintf(\n                    '<tr>%s</tr>',\n                    implode('', $cells)\n                );\n                $i++;\n            }\n        ?>\n    </table>\n    <ul class=\"inline\">\n        <?php\n            foreach ($sigTypes as $sigType) {\n                echo sprintf(\n                    '<li class=\"actions\" style=\"text-align:center; width: auto; padding: 7px 2px;\">%s</li>',\n                    $background ?\n                    $this->Html->link($sigType, array('action' => 'downloadExport', 'text', $sigType), array('class' => 'btn btn-inverse btn-small btn.active qet')) :\n                    sprintf(\n                        '<a href=\"%s\" class=\"btn btn-inverse btn-small\">%s</a>',\n                        $baseurl . '/attributes/restSearch/returnFormat:text/type:' . $sigType . '.json',\n                        h($sigType)\n                    )\n                );\n            }\n        ?>\n    </ul>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'event-collection', 'menuItem' => 'export'));\n?>\n<script type=\"text/javascript\">\n    function generate(i, type, id, progress, modified) {\n        $.ajax({\n            url: \"<?php echo $baseurl; ?>/jobs/cache/\" + type,\n            })\n            .done(function(data) {\n                jobsArray[i] = data;\n                editMessage(i, \"Adding...\");\n                queueInterval(i, type, data, 1, \"Just now\");\n                disableButton(i);\n            });\n        }\n\n    function queryTask(type, i){\n        $.getJSON('<?php echo $baseurl; ?>/jobs/getProgress/cache_' + type, function(data) {\n            var x = document.getElementById(\"bar\" + i);\n            x.style.width = data+\"%\";\n            if (data > -1 && data < 100) {\n                x.innerHTML = data + \"%\";\n                showDiv(\"barFrame\" + i);\n                hideDiv(\"message\" + i);\n            }\n            if (data == 100) {\n                clearInterval(intervalArray[i]);\n                hideDiv(\"barFrame\" + i);\n                showDiv(\"message\" + i);\n                updateTime(i);\n                editMessage(i, \"Completed.\");\n                updateOutdated(i);\n            }\n            if (data == -1) {\n                alert(\"<?php echo __('Warning, the background worker is not responding!');?>\");\n            }\n        });\n    }\n\n    function showDiv(id) {\n        document.getElementById(id).style.display = 'block';\n    }\n\n    function hideDiv(id) {\n        document.getElementById(id).style.display = 'none';\n    }\n\n    function updateTime(id) {\n        document.getElementById(\"update\" + id).innerHTML = \"<?php echo __('0 seconds ago');?>\";\n    }\n\n    function updateOutdated(id) {\n        document.getElementById(\"outdated\" + id).innerHTML = \"<?php echo __('No');?>\";\n    }\n\n    function disableButton(id) {\n        $('#button' + id).prop('disabled', true);\n    }\n</script>\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\n/**\n * @property Job $Job\n */\nclass JobsController extends AppController\n{\n    public $components = array('RequestHandler', 'Session');\n\n    public $paginate = array(\n        'limit' => 20,\n        'recursive' => 0,\n        'order' => array(\n            'Job.id' => 'desc'\n        ),\n    );\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        if ($this->request->action === 'getGenerateCorrelationProgress') {\n            $this->Security->doNotGenerateToken = true;\n        }\n    }\n\n    public function index($queue = false)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            throw new NotFoundException('Background jobs are not enabled on this instance.');\n        }\n        $this->loadModel('Server');\n        $issueCount = 0;\n        $workers = $this->Server->workerDiagnostics($issueCount);\n        $queues = ['email', 'default', 'cache', 'prio', 'update'];\n        if ($queue && in_array($queue, $queues, true)) {\n            $this->paginate['conditions'] = ['Job.worker' => $queue];\n        }\n        $jobs = $this->paginate();\n        foreach ($jobs as &$job) {\n            if (!empty($job['Job']['process_id'])) {\n                $job['Job']['job_status'] = $this->__getJobStatus($job['Job']['process_id']);\n                $job['Job']['failed'] = $job['Job']['job_status'] === 'Failed';\n            } else {\n                $job['Job']['job_status'] = 'Unknown';\n                $job['Job']['failed'] = null;\n            }\n            if (Configure::read('SimpleBackgroundJobs.enabled')) {\n                $job['Job']['worker_status'] = true;\n            } else {\n                $job['Job']['worker_status'] = isset($workers[$job['Job']['worker']]) && $workers[$job['Job']['worker']]['ok'];\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($jobs, $this->response->type());\n        }\n        $this->set('list', $jobs);\n        $this->set('queue', $queue);\n    }\n\n    public function getError($id)\n    {\n        $fields = array(\n            'Failed at' => 'failed_at',\n            'Exception' => 'exception',\n            'Error' => 'error'\n        );\n        $this->set('fields', $fields);\n        $this->set('response', $this->__getFailedJobLog($id));\n        $this->render('/Jobs/ajax/error');\n    }\n\n    private function __jobStatusConverter($status)\n    {\n        switch ($status) {\n            case 1:\n                return 'Waiting';\n            case 2:\n                return 'Running';\n            case 3:\n                return 'Failed';\n            case 4:\n                return 'Completed';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    public function getGenerateCorrelationProgress($ids)\n    {\n        $this->_closeSession();\n\n        $ids = explode(\",\", $ids);\n        $jobs = $this->Job->find('all', [\n            'fields' => ['id', 'progress', 'process_id'],\n            'conditions' => ['id' => $ids],\n            'recursive' => -1,\n        ]);\n        if (empty($jobs)) {\n            throw new NotFoundException('No jobs found');\n        }\n\n        $output = [];\n        foreach ($jobs as $job) {\n            $output[$job['Job']['id']] = [\n                'job_status' => $this->__getJobStatus($job['Job']['process_id']),\n                'progress' => (int)$job['Job']['progress'],\n            ];\n        }\n        return $this->RestResponse->viewData($output, 'json');\n    }\n\n    public function getProgress($type)\n    {\n        $org_id = $this->Auth->user('org_id');\n        if ($this->_isSiteAdmin()) {\n            $org_id = 0;\n        }\n\n        if (is_numeric($type)) {\n            $progress = $this->Job->find('first', array(\n                'conditions' => array(\n                    'Job.id' => $type,\n                    'org_id' => $org_id\n                ),\n                'fields' => array('id', 'progress'),\n                'order' => array('Job.id' => 'desc'),\n            ));\n        } else {\n            $progress = $this->Job->find('first', array(\n                'conditions' => array(\n                    'job_type' => $type,\n                    'org_id' => $org_id\n                ),\n                'fields' => array('id', 'progress'),\n                'order' => array('Job.id' => 'desc'),\n            ));\n        }\n        if (!$progress) {\n            $progress = 0;\n        } else {\n            $progress = $progress['Job']['progress'];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('progress' => $progress . '%'), $this->response->type());\n        } else {\n            return new CakeResponse(array('body' => json_encode($progress), 'type' => 'json'));\n        }\n    }\n\n    public function cache($type)\n    {\n        if (Configure::read('MISP.disable_cached_exports')) {\n            throw new MethodNotAllowedException('This feature is currently disabled');\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This endpoint only accept POST.');\n        }\n        if ($this->_isSiteAdmin()) {\n            $target = 'All events.';\n        } else {\n            $target = 'Events visible to: ' . $this->Auth->user('Organisation')['name'];\n        }\n        $id = $this->Job->cache($type, $this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('job_id' => $id), $this->response->type());\n        } else {\n            return new CakeResponse(array('body' => json_encode($id), 'type' => 'json'));\n        }\n    }\n\n    public function clearJobs($type = 'completed')\n    {\n        if ($this->request->is('post')) {\n            if ($type === 'all') {\n                $conditions = array('Job.id !=' => 0);\n                $message = __('All jobs have been purged');\n            } else {\n                $conditions = array('Job.progress' => 100);\n                $message = __('All completed jobs have been purged');\n            }\n            $this->Job->deleteAll($conditions, false);\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    private function __getJobStatus($id): string\n    {\n        if (!Configure::read('SimpleBackgroundJobs.enabled')) {\n            return $this->__jobStatusConverter(CakeResque::getJobStatus($id));\n        }\n\n        $status = null;\n        if (!empty($id)) {\n            $job = $this->Job->getBackgroundJobsTool()->getJob($id);\n            $status = $job ? $job->status() : $status;\n        }\n\n        return $this->__jobStatusConverter($status);\n    }\n\n    private function __getFailedJobLog(string $id): array\n    {\n        if (!Configure::read('SimpleBackgroundJobs.enabled')) {\n            return CakeResque::getFailedJobLog($id);\n        }\n\n        $job = $this->Job->getBackgroundJobsTool()->getJob($id);\n        $output = $job ? $job->output() : __('Job status not found.');\n        $backtrace = $job ? explode(\"\\n\", $job->error()) : [];\n\n        return [\n            'error' => $output ?? $backtrace[0] ?? '',\n            'backtrace' => $backtrace\n        ];\n    }\n}\n", "<div class=\"event index\">\n    <h2><?php echo __('Export');?></h2>\n    <p><?php echo __('Export functionality is designed to automatically generate signatures for intrusion detection systems. To enable signature generation for a given attribute, Signature field of this attribute must be set to Yes.\n        Note that not all attribute types are applicable for signature generation, currently we only support NIDS signature generation for IP, domains, host names, user agents etc., and hash list generation for MD5/SHA1 values of file artifacts. Support for more attribute types is planned.');?>\n    <br/>\n    <p><?php echo __('Simply click on any of the following buttons to download the appropriate data.');?></p>\n    <?php $i = 0;?>\n    <script type=\"text/javascript\">\n        var jobsArray = new Array();\n        var intervalArray = new Array();\n        function queueInterval(i, k, id, progress, modified) {\n            jobsArray[i] = id;\n            intervalArray[i] = setInterval(function(){\n                    if (id != -1 && progress < 100 && modified != \"N/A\") {\n                        queryTask(k, i);\n                    }\n                }, 3000);\n        }\n        function editMessage(id, text) {\n            document.getElementById(\"message\" + id).innerHTML = text;\n        }\n    </script>\n    <table class=\"table table-striped table-hover table-condensed\">\n        <?php\n            $background = (!empty(Configure::read('MISP.background_jobs')) && empty(Configure::read('MISP.disable_cached_exports')));\n            $fields = array(__('Type'), __('Last Update'), __('Description'), __('Outdated'), __('Filesize'), __('Progress'), __('Actions'));\n            if (!$background) {\n                unset($fields[1]);\n                unset($fields[3]);\n                unset($fields[4]);\n                unset($fields[5]);\n            }\n            $headers = array();\n            foreach ($fields as $field) {\n                $headers[] = sprintf(\n                    '<th style=\"text-align:center;\">%s</th>',\n                    $field\n                );\n            }\n            echo sprintf(\n                '<tr>%s</tr>',\n                implode('', $headers)\n            );\n            foreach ($export_types as $k => $type) {\n                $cells = array();\n                $cells[] = sprintf(\n                    '<td class=\"short\">%s</td>',\n                    h($type['type'])\n                );\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td id=\"update%s\" class=\"short red\">%s</td>',\n                        h($i),\n                        h($type['lastModified'])\n                    );\n                }\n                $cells[] = sprintf(\n                    '<td>%s%s</td>',\n                    h($type['description']),\n                    empty($type['params']['includeAttachments']) ? '' : sprintf(\n                        ' <span class=\"%s\">%s.</span>',\n                        Configure::read('MISP.cached_attachments') ? 'green' : 'red',\n                        Configure::read('MISP.cached_attachments') ? __('Attachments are enabled on this instance') : __('Attachments are disabled on this instance')\n                    )\n                );\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td id=\"outdated%s\">%s</td>',\n                        h($i),\n                        $type['recommendation'] ? '<span style=\"color:red;\">' . __('Yes') . '</span>' : __('No')\n                    );\n                    $cells[] = sprintf(\n                        '<td class=\"short\" style=\"text-align:right;\">%s</td>',\n                        isset($type['filesize']) ? h($type['filesize']) : sprintf('<span class=\"red\">%s</span>', __('N/A'))\n                    );\n                    $status = __('Loading\u2026');\n                    if ($type['progress'] == 0 && $type['lastModified'] != \"N/A\") {\n                        $status = __('Queued');\n                    } else if ($type['progress'] == 0 && $type['lastModified'] == \"N/A\") {\n                        $status = '<span style=\"color:red;\">' . __('N/A') . '</span>';\n                    } else if ($type['progress'] == 100) {\n                        if (isset($type['filesize'])) {\n                            $status = __('Completed');\n                        } else {\n                            $status = '<span style=\"color:red;\">' . __('N/A') . '</span>';\n                        }\n                    } else {\n                        $status = h($type['progress']) . '%';\n                    }\n                    $cells[] = sprintf(\n                        '<td style=\"width:150px;\"><div id=\"barFrame%s\" %s>%s</div><div id=\"message%s\" style=\"text-align:center;display:block;\">%s</div><script type=\"text/javascript\">%s</script></td>',\n                        h($i),\n                        'class=\"progress progress-striped active\" style=\"margin-bottom: 0px;display:none;\"',\n                        sprintf(\n                            '<div id=\"bar%s\" class=\"bar\" style=\"width: %s%%;\">%s</div>',\n                            h($i),\n                            h($type['progress']),\n                            $status\n                        ),\n                        h($i),\n                        $status,\n                        sprintf(\n                            '<script type=\"text/javascript\">queueInterval(\"%s\", \"%s\", \"%s\", \"%s\", \"%s\");</script>',\n                            h($i),\n                            h($k),\n                            h($type['job_id']),\n                            h($type['progress']),\n                            h($type['lastModified'])\n                        )\n                    );\n                }\n                if ($background) {\n                    $cells[] = sprintf(\n                        '<td><span class=\"btn-group\">%s%s</span></td>',\n                        ($k === 'text') ? '' : $this->Html->link(__('Download'), array('action' => 'downloadExport', $k), array('class' => 'btn btn-inverse btn-small')),\n                        sprintf(\n                            '<button class=\"btn btn-inverse btn-small\" id=button%s onClick=\"generate(\\'%s\\', \\'%s\\', \\'%s\\', \\'%s\\', \\'%s\\')\" %s>%s</button><div class=\"hidden\">%s</div>',\n                            $i,\n                            h($i),\n                            h($k),\n                            h($type['job_id']),\n                            h($type['progress']),\n                            h($type['lastModified']),\n                            (!$type['recommendation']) ? 'disabled' : '',\n                            __('Generate'),\n                            $this->Form->postLink(__('Download'), array('controller' => 'jobs', 'action' => 'cache', h($k)), array('class' => 'btn btn-inverse btn-small')),\n                        )\n                    );\n                } else {\n                    $params = array();\n                    foreach ($type['params'] as $param => $param_value) {\n                        if ($param == 'includeAttachments') {\n                            if ($param_value == 1 && Configure::read('MISP.cached_attachments')) {\n                                $param_value = '1';\n                            } else {\n                                $param_value = '0';\n                            }\n                        }\n                        $params[] = h($param) . ':' . strval(h($param_value));\n                    }\n                    $download_url = $baseurl . '/' . strtolower($type['scope']) . 's/restSearch/' . implode('/', $params) . '.json';\n                    $cells[] = sprintf(\n                        '<td><a href=\"%s\" class=\"btn btn-inverse btn-small\">%s</a></td>',\n                        $download_url,\n                        __('Download')\n                    );\n                }\n                echo sprintf(\n                    '<tr>%s</tr>',\n                    implode('', $cells)\n                );\n                $i++;\n            }\n        ?>\n    </table>\n    <ul class=\"inline\">\n        <?php\n            foreach ($sigTypes as $sigType) {\n                echo sprintf(\n                    '<li class=\"actions\" style=\"text-align:center; width: auto; padding: 7px 2px;\">%s</li>',\n                    $background ?\n                    $this->Html->link($sigType, array('action' => 'downloadExport', 'text', $sigType), array('class' => 'btn btn-inverse btn-small btn.active qet')) :\n                    sprintf(\n                        '<a href=\"%s\" class=\"btn btn-inverse btn-small\">%s</a>',\n                        $baseurl . '/attributes/restSearch/returnFormat:text/type:' . $sigType . '.json',\n                        h($sigType)\n                    )\n                );\n            }\n        ?>\n    </ul>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'event-collection', 'menuItem' => 'export'));\n?>\n<script type=\"text/javascript\">\n    function generate(i, type, id, progress, modified) {\n        var $clicked = $('#button'+i)\n        var $form = $clicked.next().find('form')\n        $.ajax({\n            url: $form.attr('action'),\n            type:'post',\n            data: $form.serialize()\n            })\n            .done(function(data) {\n                jobsArray[i] = data;\n                editMessage(i, \"Adding...\");\n                queueInterval(i, type, data, 1, \"Just now\");\n                disableButton(i);\n            });\n        }\n\n    function queryTask(type, i){\n        $.getJSON('<?php echo $baseurl; ?>/jobs/getProgress/cache_' + type, function(data) {\n            var x = document.getElementById(\"bar\" + i);\n            x.style.width = data+\"%\";\n            if (data > -1 && data < 100) {\n                x.innerHTML = data + \"%\";\n                showDiv(\"barFrame\" + i);\n                hideDiv(\"message\" + i);\n            }\n            if (data == 100) {\n                clearInterval(intervalArray[i]);\n                hideDiv(\"barFrame\" + i);\n                showDiv(\"message\" + i);\n                updateTime(i);\n                editMessage(i, \"Completed.\");\n                updateOutdated(i);\n            }\n            if (data == -1) {\n                alert(\"<?php echo __('Warning, the background worker is not responding!');?>\");\n            }\n        });\n    }\n\n    function showDiv(id) {\n        document.getElementById(id).style.display = 'block';\n    }\n\n    function hideDiv(id) {\n        document.getElementById(id).style.display = 'none';\n    }\n\n    function updateTime(id) {\n        document.getElementById(\"update\" + id).innerHTML = \"<?php echo __('0 seconds ago');?>\";\n    }\n\n    function updateOutdated(id) {\n        document.getElementById(\"outdated\" + id).innerHTML = \"<?php echo __('No');?>\";\n    }\n\n    function disableButton(id) {\n        $('#button' + id).prop('disabled', true);\n    }\n</script>\n"], "filenames": ["app/Controller/JobsController.php", "app/View/Events/export.ctp"], "buggy_code_start_loc": [156, 117], "buggy_code_end_loc": [156, 179], "fixing_code_start_loc": [157, 117], "fixing_code_end_loc": [160, 184], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in MISP before 2.4.184. A client does not need to use POST to start an export generation process. This is related to app/Controller/JobsController.php and app/View/Events/export.ctp.", "other": {"cve": {"id": "CVE-2024-25675", "sourceIdentifier": "cve@mitre.org", "published": "2024-02-09T09:15:08.653", "lastModified": "2024-02-12T14:30:28.640", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.184. A client does not need to use POST to start an export generation process. This is related to app/Controller/JobsController.php and app/View/Events/export.ctp."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en MISP antes de la versi\u00f3n 2.4.184. Un cliente no necesita utilizar POST para iniciar un proceso de generaci\u00f3n de exportaciones. Esto est\u00e1 relacionado con app/Controller/JobsController.php y app/View/Events/export.ctp."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.184", "matchCriteriaId": "92E5DACC-4136-41BD-AF20-BC889159DB39"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/0ac2468c2896f4be4ef9219cfe02bff164411594", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.183...v2.4.184", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/0ac2468c2896f4be4ef9219cfe02bff164411594"}}