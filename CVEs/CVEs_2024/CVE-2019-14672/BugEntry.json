{"buggy_code": ["<?php\n/**\n * UserNavigation.php\n * Copyright (c) 2018 thegrumpydictator@gmail.com\n *\n * This file is part of Firefly III.\n *\n * Firefly III is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Firefly III is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Firefly III. If not, see <http://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Support\\Http\\Controllers;\n\nuse FireflyIII\\Models\\Account;\nuse FireflyIII\\Models\\AccountType;\nuse FireflyIII\\Models\\Transaction;\nuse FireflyIII\\Models\\TransactionJournal;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\ViewErrorBag;\nuse Log;\n\n/**\n * Trait UserNavigation\n *\n */\ntrait UserNavigation\n{\n    /**\n     * Functionality:.\n     *\n     * - If the $identifier contains the word \"delete\" then a remembered uri with the text \"/show/\" in it will not be returned but instead the index (/)\n     *   will be returned.\n     * - If the remembered uri contains \"jscript/\" the remembered uri will not be returned but instead the index (/) will be returned.\n     *\n     * @param string $identifier\n     *\n     * @return string\n     */\n    protected function getPreviousUri(string $identifier): string\n    {\n        Log::debug(sprintf('Trying to retrieve URL stored under \"%s\"', $identifier));\n        // \"forbidden\" words for specific identifiers:\n        // if these are in the previous URI, don't refer back there.\n        $array     = [\n            'accounts.delete.uri'          => '/accounts/show/',\n            'transactions.delete.uri'      => '/transactions/show/',\n            'attachments.delete.uri'       => '/attachments/show/',\n            'bills.delete.uri'             => '/bills/show/',\n            'budgets.delete.uri'           => '/budgets/show/',\n            'categories.delete.uri'        => '/categories/show/',\n            'currencies.delete.uri'        => '/currencies/show/',\n            'piggy-banks.delete.uri'       => '/piggy-banks/show/',\n            'tags.delete.uri'              => '/tags/show/',\n            'rules.delete.uri'             => '/rules/edit/',\n            'transactions.mass-delete.uri' => '/transactions/show/',\n        ];\n        $forbidden = $array[$identifier] ?? '/show/';\n        Log::debug(sprintf('The forbidden word for %s is \"%s\"', $identifier, $forbidden));\n\n        $uri = (string)session($identifier);\n        Log::debug(sprintf('The URI is %s', $uri));\n        if (\n            !(false === strpos($identifier, 'delete'))\n            && !(false === strpos($uri, $forbidden))) {\n            $uri = $this->redirectUri;\n            Log::debug(sprintf('URI is now %s (identifier contains \"delete\")', $uri));\n        }\n        if (!(false === strpos($uri, 'jscript'))) {\n            $uri = $this->redirectUri; // @codeCoverageIgnore\n            Log::debug(sprintf('URI is now %s (uri contains jscript)', $uri));\n        }\n\n        // more debug notes:\n        Log::debug(sprintf('strpos($identifier, \"delete\"): %s', var_export(strpos($identifier, 'delete'), true)));\n        Log::debug(sprintf('strpos($uri, $forbidden): %s', var_export(strpos($uri, $forbidden), true)));\n\n        return $uri;\n    }\n\n    /**\n     * Redirect to asset account that transaction belongs to.\n     *\n     * @param TransactionJournal $journal\n     *\n     * @return \\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Routing\\Redirector\n     */\n    protected function redirectToAccount(TransactionJournal $journal)\n    {\n        $valid        = [AccountType::DEFAULT, AccountType::ASSET];\n        $transactions = $journal->transactions;\n        /** @var Transaction $transaction */\n        foreach ($transactions as $transaction) {\n            $account = $transaction->account;\n            if (\\in_array($account->accountType->type, $valid, true)) {\n                return redirect(route('accounts.show', [$account->id]));\n            }\n        }\n        // @codeCoverageIgnoreStart\n        session()->flash('error', (string)trans('firefly.cannot_redirect_to_account'));\n\n        return redirect(route('index'));\n        // @codeCoverageIgnoreEnd\n    }\n\n    /**\n     * @param Account $account\n     *\n     * @return RedirectResponse|\\Illuminate\\Routing\\Redirector\n     */\n    protected function redirectToOriginalAccount(Account $account)\n    {\n        /** @var Transaction $transaction */\n        $transaction = $account->transactions()->first();\n        if (null === $transaction) {\n            app('session')->flash('error', trans('firefly.account_missing_transaction', ['name' => $account->name, 'id' => $account->id]));\n            Log::error(sprintf('Expected a transaction. Account #%d has none. BEEP, error.', $account->id));\n\n            return redirect(route('index'));\n        }\n\n        $journal = $transaction->transactionJournal;\n        /** @var Transaction $opposingTransaction */\n        $opposingTransaction = $journal->transactions()->where('transactions.id', '!=', $transaction->id)->first();\n\n        if (null === $opposingTransaction) {\n            app('session')->flash('error', trans('firefly.account_missing_transaction', ['name' => $account->name, 'id' => $account->id]));\n            Log::error(sprintf('Expected an opposing transaction. Account #%d has none. BEEP, error.', $account->id));\n        }\n\n        return redirect(route('accounts.show', [$opposingTransaction->account_id]));\n    }\n\n    /**\n     * Remember previous URL.\n     *\n     * @param string $identifier\n     */\n    protected function rememberPreviousUri(string $identifier): void\n    {\n        /** @var ViewErrorBag $errors */\n        $errors = session()->get('errors');\n        if (null === $errors || (null !== $errors && 0 === $errors->count())) {\n            $url = app('url')->previous();\n            session()->put($identifier, $url);\n            Log::debug(sprintf('Will put previous URI in cache under key %s: %s', $identifier, $url));\n\n            return;\n        }\n        Log::debug(sprintf('The users session contains errors somehow so we will not remember the URI!: %s', var_export($errors, true)));\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * UserNavigation.php\n * Copyright (c) 2018 thegrumpydictator@gmail.com\n *\n * This file is part of Firefly III.\n *\n * Firefly III is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Firefly III is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Firefly III. If not, see <http://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Support\\Http\\Controllers;\n\nuse FireflyIII\\Models\\Account;\nuse FireflyIII\\Models\\AccountType;\nuse FireflyIII\\Models\\Transaction;\nuse FireflyIII\\Models\\TransactionJournal;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\ViewErrorBag;\nuse Log;\n\n/**\n * Trait UserNavigation\n *\n */\ntrait UserNavigation\n{\n    /**\n     * Functionality:.\n     *\n     * - If the $identifier contains the word \"delete\" then a remembered uri with the text \"/show/\" in it will not be returned but instead the index (/)\n     *   will be returned.\n     * - If the remembered uri contains \"jscript/\" the remembered uri will not be returned but instead the index (/) will be returned.\n     *\n     * @param string $identifier\n     *\n     * @return string\n     */\n    protected function getPreviousUri(string $identifier): string\n    {\n        Log::debug(sprintf('Trying to retrieve URL stored under \"%s\"', $identifier));\n        // \"forbidden\" words for specific identifiers:\n        // if these are in the previous URI, don't refer back there.\n        $array     = [\n            'accounts.delete.uri'          => '/accounts/show/',\n            'transactions.delete.uri'      => '/transactions/show/',\n            'attachments.delete.uri'       => '/attachments/show/',\n            'bills.delete.uri'             => '/bills/show/',\n            'budgets.delete.uri'           => '/budgets/show/',\n            'categories.delete.uri'        => '/categories/show/',\n            'currencies.delete.uri'        => '/currencies/show/',\n            'piggy-banks.delete.uri'       => '/piggy-banks/show/',\n            'tags.delete.uri'              => '/tags/show/',\n            'rules.delete.uri'             => '/rules/edit/',\n            'transactions.mass-delete.uri' => '/transactions/show/',\n        ];\n        $forbidden = $array[$identifier] ?? '/show/';\n        Log::debug(sprintf('The forbidden word for %s is \"%s\"', $identifier, $forbidden));\n\n        $uri = (string)session($identifier);\n        Log::debug(sprintf('The URI is %s', $uri));\n        if (\n            !(false === strpos($identifier, 'delete'))\n            && !(false === strpos($uri, $forbidden))) {\n            $uri = $this->redirectUri;\n            Log::debug(sprintf('URI is now %s (identifier contains \"delete\")', $uri));\n        }\n        if (!(false === strpos($uri, 'jscript'))) {\n            $uri = $this->redirectUri; // @codeCoverageIgnore\n            Log::debug(sprintf('URI is now %s (uri contains jscript)', $uri));\n        }\n\n        // more debug notes:\n        Log::debug(sprintf('strpos($identifier, \"delete\"): %s', var_export(strpos($identifier, 'delete'), true)));\n        Log::debug(sprintf('strpos($uri, $forbidden): %s', var_export(strpos($uri, $forbidden), true)));\n\n        return $uri;\n    }\n\n    /**\n     * Redirect to asset account that transaction belongs to.\n     *\n     * @param TransactionJournal $journal\n     *\n     * @return \\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Routing\\Redirector\n     */\n    protected function redirectToAccount(TransactionJournal $journal)\n    {\n        $valid        = [AccountType::DEFAULT, AccountType::ASSET];\n        $transactions = $journal->transactions;\n        /** @var Transaction $transaction */\n        foreach ($transactions as $transaction) {\n            $account = $transaction->account;\n            if (\\in_array($account->accountType->type, $valid, true)) {\n                return redirect(route('accounts.show', [$account->id]));\n            }\n        }\n        // @codeCoverageIgnoreStart\n        session()->flash('error', (string)trans('firefly.cannot_redirect_to_account'));\n\n        return redirect(route('index'));\n        // @codeCoverageIgnoreEnd\n    }\n\n    /**\n     * @param Account $account\n     *\n     * @return RedirectResponse|\\Illuminate\\Routing\\Redirector\n     */\n    protected function redirectToOriginalAccount(Account $account)\n    {\n        /** @var Transaction $transaction */\n        $transaction = $account->transactions()->first();\n        if (null === $transaction) {\n            app('session')->flash('error', trans('firefly.account_missing_transaction', ['name' => e($account->name), 'id' => $account->id]));\n            Log::error(sprintf('Expected a transaction. Account #%d has none. BEEP, error.', $account->id));\n\n            return redirect(route('index'));\n        }\n\n        $journal = $transaction->transactionJournal;\n        /** @var Transaction $opposingTransaction */\n        $opposingTransaction = $journal->transactions()->where('transactions.id', '!=', $transaction->id)->first();\n\n        if (null === $opposingTransaction) {\n            app('session')->flash('error', trans('firefly.account_missing_transaction', ['name' => e($account->name), 'id' => $account->id]));\n            Log::error(sprintf('Expected an opposing transaction. Account #%d has none. BEEP, error.', $account->id));\n        }\n\n        return redirect(route('accounts.show', [$opposingTransaction->account_id]));\n    }\n\n    /**\n     * Remember previous URL.\n     *\n     * @param string $identifier\n     */\n    protected function rememberPreviousUri(string $identifier): void\n    {\n        /** @var ViewErrorBag $errors */\n        $errors = session()->get('errors');\n        if (null === $errors || (null !== $errors && 0 === $errors->count())) {\n            $url = app('url')->previous();\n            session()->put($identifier, $url);\n            Log::debug(sprintf('Will put previous URI in cache under key %s: %s', $identifier, $url));\n\n            return;\n        }\n        Log::debug(sprintf('The users session contains errors somehow so we will not remember the URI!: %s', var_export($errors, true)));\n    }\n}\n"], "filenames": ["app/Support/Http/Controllers/UserNavigation.php"], "buggy_code_start_loc": [127], "buggy_code_end_loc": [139], "fixing_code_start_loc": [127], "fixing_code_end_loc": [139], "type": "CWE-79", "message": "Firefly III 4.7.17.5 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the liability name field. The JavaScript code is executed upon an error condition during a visit to the account show page.", "other": {"cve": {"id": "CVE-2019-14672", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-05T20:15:12.297", "lastModified": "2020-12-16T17:00:19.213", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Firefly III 4.7.17.5 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the liability name field. The JavaScript code is executed upon an error condition during a visit to the account show page."}, {"lang": "es", "value": "Firefly III versi\u00f3n 4.7.17.5, es vulnerable a un ataque de tipo XSS almacenado debido a la falta de filtraci\u00f3n de datos suministrados por el usuario en el campo de nombre de responsabilidad. El c\u00f3digo JavaScript es ejecutado con una condici\u00f3n de error durante una visita a la p\u00e1gina de presentaci\u00f3n de la cuenta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:4.7.17.5:*:*:*:*:*:*:*", "matchCriteriaId": "3ED9EAF7-33DD-4D25-B7DD-6AA4D24D5E57"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/8717f469b10e9f7e1547c6f70f7d24e1359d28d4", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/firefly-iii/firefly-iii/issues/2370", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/8717f469b10e9f7e1547c6f70f7d24e1359d28d4"}}