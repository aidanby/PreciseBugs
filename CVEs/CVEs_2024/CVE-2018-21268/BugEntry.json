{"buggy_code": ["{\n  \"author\": \"James Weston\",\n  \"name\": \"traceroute\",\n  \"description\": \"Wrapper around native traceroute command\",\n  \"version\": \"1.0.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/jaw187/node-traceroute.git\"\n  },\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"code\": \"2.x.x\",\n    \"lab\": \"9.x.x\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jaw187/node-traceroute/issues\"\n  },\n  \"homepage\": \"https://github.com/jaw187/node-traceroute#readme\",\n  \"main\": \"traceroute.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"lab -v -m 20000\"\n  },\n  \"keywords\": [\n    \"traceroute\",\n    \"network\",\n    \"trace\",\n    \"route\"\n  ],\n  \"license\": \"ISC\"\n}\n", "'use strict';\n\n\nconst Child = require('child_process');\nconst Dns = require('dns');\nconst Net = require('net');\nconst Os = require('os');\n\n\nconst internals = {};\n\n\ninternals.isWin = /^win/.test(Os.platform());\n\n\nmodule.exports = internals.Traceroute = {};\n\n\ninternals.Traceroute.trace = function (host, callback) {\n\n\n    Dns.lookup(host.toUpperCase(), (err) => {\n\n        if (err && Net.isIP(host) === 0) {\n            return callback(new Error('Invalid host'));\n        }\n\n        const command = (internals.isWin ? 'tracert -d ' : 'traceroute -q 1 -n ') + host;\n        Child.exec(command, (err, stdout, stderr) => {\n\n            if (err) {\n                return callback(err);\n            }\n\n            const results = internals.parseOutput(stdout);\n            return callback(null, results);\n        });\n    });\n};\n\n\ninternals.parseHop = function (hop) {\n\n    let line = hop.replace(/\\*/g,'0');\n\n    if (internals.isWin) {\n        line = line.replace(/\\</g,'');\n    }\n\n    const s = line.split(' ');\n    for (let i = s.length - 1; i > -1; --i) {\n        if (s[i] === '' || s[i] === 'ms') {\n            s.splice(i,1);\n        }\n    }\n\n    return internals.isWin ? internals.parseHopWin(s) : internals.parseHopNix(s);\n};\n\n\ninternals.parseHopWin = function (line) {\n\n    if (line[4] === 'Request') {\n        return false;\n    }\n\n    const hop = {};\n    hop[line[4]] = [+line[1], +line[2], +line[3]];\n\n    return hop;\n};\n\n\ninternals.parseHopNix = function (line) {\n\n    if (line[1] === '0') {\n        return false;\n    }\n\n    const hop = {};\n    let lastip = line[1];\n\n    hop[line[1]] = [+line[2]];\n\n    for (let i = 3; i < line.length; ++i) {\n        if (Net.isIP(line[i])) {\n            lastip = line[i];\n            if (!hop[lastip]) {\n                hop[lastip] = [];\n            }\n        }\n        else {\n            hop[lastip].push(+line[i]);\n        }\n    }\n\n    return hop;\n};\n\ninternals.parseOutput = function (output) {\n\n    const lines = output.split('\\n');\n    const hops = [];\n\n    lines.shift();\n    lines.pop();\n\n    if (internals.isWin) {\n        for (let i = 0; i < lines.length; ++i) {\n            if (/^\\s+1/.test(lines[i])) {\n                break;\n            }\n        }\n        lines.splice(0,i);\n        lines.pop();\n        lines.pop();\n    }\n\n    for (let i = 0; i < lines.length; ++i) {\n        hops.push(internals.parseHop(lines[i]));\n    }\n\n    return hops;\n};\n"], "fixing_code": ["{\n  \"author\": \"James Weston\",\n  \"name\": \"traceroute\",\n  \"description\": \"Wrapper around native traceroute command\",\n  \"version\": \"1.0.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/jaw187/node-traceroute.git\"\n  },\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"devDependencies\": {\n    \"code\": \"2.x.x\",\n    \"lab\": \"10.x.x\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jaw187/node-traceroute/issues\"\n  },\n  \"homepage\": \"https://github.com/jaw187/node-traceroute#readme\",\n  \"main\": \"traceroute.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"lab -v -m 20000\"\n  },\n  \"keywords\": [\n    \"traceroute\",\n    \"network\",\n    \"trace\",\n    \"route\"\n  ],\n  \"license\": \"ISC\"\n}\n", "'use strict';\n\n\nconst Child = require('child_process');\nconst Dns = require('dns');\nconst Net = require('net');\nconst Os = require('os');\n\n\nconst internals = {};\n\n\ninternals.isWin = /^win/.test(Os.platform());\n\n\nmodule.exports = internals.Traceroute = {};\n\n\ninternals.Traceroute.trace = function (host, callback) {\n\n    Dns.lookup(host.toUpperCase(), (err) => {\n\n        if (err && Net.isIP(host) === 0) {\n            return callback(new Error('Invalid host'));\n        }\n\n        const command = (internals.isWin ? 'tracert' : 'traceroute');\n        const args = internals.isWin ? ['-d', host] : ['-q', 1, '-n', host];\n\n        const traceroute = Child.spawn(command, args);\n\n        const hops = [];\n        let counter = 0;\n        traceroute.stdout.on('data', (data) => {\n\n            ++counter;\n            if ((!internals.isWin && counter < 2) || (internals.isWin && counter < 5)) {\n                return null;\n            }\n\n            const result = data.toString().replace(/\\n$/,'');\n            if (!result) {\n                return null;\n            }\n\n            const hop = internals.parseHop(result);\n            hops.push(hop);\n        });\n\n        traceroute.on('close', (code) => {\n\n            if (callback) {\n                return callback(null, hops);\n            }\n        });\n\n        return traceroute;\n    });\n};\n\n\ninternals.parseHop = function (hop) {\n\n    let line = hop.replace(/\\*/g,'0');\n\n    if (internals.isWin) {\n        line = line.replace(/\\</g,'');\n    }\n\n    const s = line.split(' ');\n    for (let i = s.length - 1; i > -1; --i) {\n        if (s[i] === '' || s[i] === 'ms') {\n            s.splice(i,1);\n        }\n    }\n\n    return internals.isWin ? internals.parseHopWin(s) : internals.parseHopNix(s);\n};\n\n\ninternals.parseHopWin = function (line) {\n\n    if (line[4] === 'Request') {\n        return false;\n    }\n\n    const hop = {};\n    hop[line[4]] = [+line[1], +line[2], +line[3]];\n\n    return hop;\n};\n\n\ninternals.parseHopNix = function (line) {\n\n    if (line[1] === '0') {\n        return false;\n    }\n\n    const hop = {};\n    let lastip = line[1];\n\n    hop[line[1]] = [+line[2]];\n\n    for (let i = 3; i < line.length; ++i) {\n        if (Net.isIP(line[i])) {\n            lastip = line[i];\n            if (!hop[lastip]) {\n                hop[lastip] = [];\n            }\n        }\n        else {\n            hop[lastip].push(+line[i]);\n        }\n    }\n\n    return hop;\n};\n"], "filenames": ["package.json", "traceroute.js"], "buggy_code_start_loc": [13, 21], "buggy_code_end_loc": [17, 125], "fixing_code_start_loc": [12, 20], "fixing_code_end_loc": [16, 118], "type": "CWE-74", "message": "The traceroute (aka node-traceroute) package through 1.0.0 for Node.js allows remote command injection via the host parameter. This occurs because the Child.exec() method, which is considered to be not entirely safe, is used. In particular, an OS command can be placed after a newline character.", "other": {"cve": {"id": "CVE-2018-21268", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-25T17:15:11.567", "lastModified": "2020-07-06T17:29:06.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The traceroute (aka node-traceroute) package through 1.0.0 for Node.js allows remote command injection via the host parameter. This occurs because the Child.exec() method, which is considered to be not entirely safe, is used. In particular, an OS command can be placed after a newline character."}, {"lang": "es", "value": "El paquete traceroute (tambi\u00e9n se conoce como node-traceroute) versiones hasta 1.0.0 para Node.js, permite una inyecci\u00f3n de comandos remota por medio del par\u00e1metro host. Esto ocurre porque es usado el m\u00e9todo Child.exec(), que es considerado no del todo seguro. En particular, un comando del Sistema Operativo puede ser colocado despu\u00e9s de un car\u00e1cter newline"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:traceroute_project:traceroute:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "1.0.0", "matchCriteriaId": "10542A2B-9A3B-4F1B-A3E9-BF8BC7B5AE30"}]}]}], "references": [{"url": "https://github.com/jaw187/node-traceroute/commit/b99ee024a01a40d3d20a92ad3769cc78a3f6386f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jaw187/node-traceroute/tags", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://medium.com/@shay_62828/shell-command-injection-through-traceroute-npm-package-a4cf7b6553e3", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/npm:traceroute:20160311", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.linkedin.com/posts/op-innovate_shell-command-injection-through-traceroute-activity-6678956453086191616-Rcpy", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/advisories/1465", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/traceroute", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://www.op-c.net/2020/06/17/shell-command-injection-through-traceroute-npm-package/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jaw187/node-traceroute/commit/b99ee024a01a40d3d20a92ad3769cc78a3f6386f"}}