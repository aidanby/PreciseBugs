{"buggy_code": ["using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing OrchardCore.Admin;\nusing OrchardCore.ContentFields.Settings;\nusing OrchardCore.ContentFields.ViewModels;\nusing OrchardCore.ContentLocalization;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Records;\nusing OrchardCore.Modules;\nusing YesSql;\nusing YesSql.Services;\n\nnamespace OrchardCore.ContentFields.Controllers\n{\n    [RequireFeatures(\"OrchardCore.ContentLocalization\")]\n    [Admin]\n    public class LocalizationSetContentPickerAdminController : Controller\n    {\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly IContentLocalizationManager _contentLocalizationManager;\n        private readonly IContentManager _contentManager;\n        private readonly ISession _session;\n\n        public LocalizationSetContentPickerAdminController(\n            IContentDefinitionManager contentDefinitionManager,\n            IContentLocalizationManager contentLocalizationManager,\n            IContentManager contentManager,\n            ISession session\n            )\n        {\n            _contentDefinitionManager = contentDefinitionManager;\n            _contentLocalizationManager = contentLocalizationManager;\n            _contentManager = contentManager;\n            _session = session;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> SearchLocalizationSets(string part, string field, string query)\n        {\n            if (string.IsNullOrWhiteSpace(part) || string.IsNullOrWhiteSpace(field))\n            {\n                return BadRequest(\"Part and field are required parameters\");\n            }\n\n            var partFieldDefinition = _contentDefinitionManager.GetPartDefinition(part)?.Fields\n                .FirstOrDefault(f => f.Name == field);\n\n            var fieldSettings = partFieldDefinition?.GetSettings<LocalizationSetContentPickerFieldSettings>();\n            if (fieldSettings == null)\n            {\n                return BadRequest(\"Unable to find field definition\");\n            }\n\n            var dbQuery = _session.Query<ContentItem, ContentItemIndex>()\n              .With<ContentItemIndex>(x => x.ContentType.IsIn(fieldSettings.DisplayedContentTypes) && x.Latest);\n\n            if (!string.IsNullOrEmpty(query))\n            {\n                dbQuery.With<ContentItemIndex>(x => x.DisplayText.Contains(query) || x.ContentType.Contains(query));\n            }\n\n            var contentItems = await dbQuery.Take(40).ListAsync();\n\n            // if 2 search results have the same set, select one based on the current culture\n            var cleanedContentItems = await _contentLocalizationManager.DeduplicateContentItemsAsync(contentItems);\n\n            var results = new List<VueMultiselectItemViewModel>();\n\n            foreach (var contentItem in cleanedContentItems)\n            {\n                results.Add(new VueMultiselectItemViewModel\n                {\n                    Id = contentItem.Key, //localization set\n                    DisplayText = contentItem.Value.ToString(),\n                    HasPublished = await _contentManager.HasPublishedVersionAsync(contentItem.Value)\n                });\n            }\n\n            return new ObjectResult(results);\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing OrchardCore.Admin;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing YesSql;\n\nnamespace OrchardCore.Demo.Controllers\n{\n    public class ContentController : Controller\n    {\n        private readonly IContentItemDisplayManager _contentDisplay;\n        private readonly IContentManager _contentManager;\n        private readonly ISession _session;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n\n        public ContentController(\n            IContentManager contentManager,\n            IContentItemDisplayManager contentDisplay,\n            ISession session,\n            IUpdateModelAccessor updateModelAccessor)\n        {\n            _contentManager = contentManager;\n            _contentDisplay = contentDisplay;\n            _session = session;\n            _updateModelAccessor = updateModelAccessor;\n        }\n\n        public async Task<ActionResult> Display(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            var shape = await _contentDisplay.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater);\n            return View(shape);\n        }\n\n        [Admin]\n        public async Task<ActionResult> Edit(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            var shape = await _contentDisplay.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n            return View(shape);\n        }\n\n        [Admin, HttpPost, ActionName(\"Edit\")]\n        public async Task<ActionResult> EditPost(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            var shape = await _contentDisplay.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(nameof(Edit), shape);\n            }\n\n            _session.Save(contentItem);\n            return RedirectToAction(nameof(Edit), contentItemId);\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.Extensions;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Extensions;\nusing OrchardCore.Environment.Extensions.Features;\nusing OrchardCore.Environment.Shell;\nusing OrchardCore.Features.Models;\nusing OrchardCore.Features.ViewModels;\nusing OrchardCore.Routing;\n\nnamespace OrchardCore.Features.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IExtensionManager _extensionManager;\n        private readonly IShellFeaturesManager _shellFeaturesManager;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly ShellSettings _shellSettings;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n\n        public AdminController(\n            IExtensionManager extensionManager,\n            IHtmlLocalizer<AdminController> localizer,\n            IShellFeaturesManager shellFeaturesManager,\n            IAuthorizationService authorizationService,\n            ShellSettings shellSettings,\n            INotifier notifier,\n            IStringLocalizer<AdminController> stringLocalizer)\n        {\n            _extensionManager = extensionManager;\n            _shellFeaturesManager = shellFeaturesManager;\n            _authorizationService = authorizationService;\n            _shellSettings = shellSettings;\n            _notifier = notifier;\n            H = localizer;\n            S = stringLocalizer;\n        }\n\n        public async Task<ActionResult> Features()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            var enabledFeatures = await _shellFeaturesManager.GetEnabledFeaturesAsync();\n            var alwaysEnabledFeatures = await _shellFeaturesManager.GetAlwaysEnabledFeaturesAsync();\n\n            var moduleFeatures = new List<ModuleFeature>();\n\n            var features = (await _shellFeaturesManager.GetAvailableFeaturesAsync()).Where(f => !f.IsTheme());\n\n            foreach (var moduleFeatureInfo in features)\n            {\n                var dependentFeatures = _extensionManager.GetDependentFeatures(moduleFeatureInfo.Id);\n                var featureDependencies = _extensionManager.GetFeatureDependencies(moduleFeatureInfo.Id);\n\n                var moduleFeature = new ModuleFeature\n                {\n                    Descriptor = moduleFeatureInfo,\n                    IsEnabled = enabledFeatures.Contains(moduleFeatureInfo),\n                    IsAlwaysEnabled = alwaysEnabledFeatures.Contains(moduleFeatureInfo),\n                    //IsRecentlyInstalled = _moduleService.IsRecentlyInstalled(f.Extension),\n                    //NeedsUpdate = featuresThatNeedUpdate.Contains(f.Id),\n                    EnabledDependentFeatures = dependentFeatures.Where(x => x.Id != moduleFeatureInfo.Id && enabledFeatures.Contains(x)).ToList(),\n                    FeatureDependencies = featureDependencies.Where(d => d.Id != moduleFeatureInfo.Id).ToList()\n                };\n\n                moduleFeatures.Add(moduleFeature);\n            }\n\n            return View(new FeaturesViewModel\n            {\n                Features = moduleFeatures\n            });\n        }\n\n        [HttpPost]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> Features(BulkActionViewModel model, bool? force)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            if (model.FeatureIds == null || !model.FeatureIds.Any())\n            {\n                ModelState.AddModelError(nameof(BulkActionViewModel.FeatureIds), S[\"Please select one or more features.\"]);\n            }\n\n            if (ModelState.IsValid)\n            {\n                var features = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                    .Where(f => !f.IsTheme() && model.FeatureIds.Contains(f.Id));\n\n                await EnableOrDisableFeaturesAsync(features, model.BulkAction, force);\n            }\n\n            return RedirectToAction(nameof(Features));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Disable(string id)\n        {\n            var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n\n            if (feature == null)\n            {\n                return NotFound();\n            }\n\n            // Generating routes can fail while the tenant is recycled as routes can use services.\n            // It could be fixed by waiting for the next request or the end of the current one\n            // to actually release the tenant. Right now we render the url before recycling the tenant.\n\n            var nextUrl = Url.Action(nameof(Features));\n\n            await EnableOrDisableFeaturesAsync(new[] { feature }, FeaturesBulkAction.Disable, force: true);\n\n            return Redirect(nextUrl);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Enable(string id)\n        {\n            var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n\n            if (feature == null)\n            {\n                return NotFound();\n            }\n\n            // Generating routes can fail while the tenant is recycled as routes can use services.\n            // It could be fixed by waiting for the next request or the end of the current one\n            // to actually release the tenant. Right now we render the url before recycling the tenant.\n\n            var nextUrl = Url.Action(nameof(Features));\n\n            await EnableOrDisableFeaturesAsync(new[] { feature }, FeaturesBulkAction.Enable, force: true);\n\n            return Redirect(nextUrl);\n        }\n\n        private async Task EnableOrDisableFeaturesAsync(IEnumerable<IFeatureInfo> features, FeaturesBulkAction action, bool? force)\n        {\n            switch (action)\n            {\n                case FeaturesBulkAction.None:\n                    break;\n                case FeaturesBulkAction.Enable:\n                    await _shellFeaturesManager.EnableFeaturesAsync(features, force == true);\n                    await NotifyAsync(features);\n                    break;\n                case FeaturesBulkAction.Disable:\n                    await _shellFeaturesManager.DisableFeaturesAsync(features, force == true);\n                    await NotifyAsync(features, enabled: false);\n                    break;\n                case FeaturesBulkAction.Toggle:\n                    // The features array has already been checked for validity.\n                    var enabledFeatures = await _shellFeaturesManager.GetEnabledFeaturesAsync();\n                    var disabledFeatures = await _shellFeaturesManager.GetDisabledFeaturesAsync();\n                    var featuresToEnable = disabledFeatures.Intersect(features);\n                    var featuresToDisable = enabledFeatures.Intersect(features);\n\n                    await _shellFeaturesManager.UpdateFeaturesAsync(featuresToDisable, featuresToEnable, force == true);\n                    await NotifyAsync(featuresToEnable);\n                    await NotifyAsync(featuresToDisable, enabled: false);\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        private async ValueTask NotifyAsync(IEnumerable<IFeatureInfo> features, bool enabled = true)\n        {\n            foreach (var feature in features)\n            {\n                await _notifier.SuccessAsync(H[\"{0} was {1}.\", feature.Name ?? feature.Id, enabled ? \"enabled\" : \"disabled\"]);\n            }\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.Data.Documents;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Extensions;\nusing OrchardCore.Roles.ViewModels;\nusing OrchardCore.Security;\nusing OrchardCore.Security.Permissions;\nusing OrchardCore.Security.Services;\n\nnamespace OrchardCore.Roles.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IDocumentStore _documentStore;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IStringLocalizer S;\n        private readonly RoleManager<IRole> _roleManager;\n        private readonly IEnumerable<IPermissionProvider> _permissionProviders;\n        private readonly ITypeFeatureProvider _typeFeatureProvider;\n        private readonly IRoleService _roleService;\n        private readonly INotifier _notifier;\n        private readonly IHtmlLocalizer H;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            ITypeFeatureProvider typeFeatureProvider,\n            IDocumentStore documentStore,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IHtmlLocalizer<AdminController> htmlLocalizer,\n            RoleManager<IRole> roleManager,\n            IRoleService roleService,\n            INotifier notifier,\n            IEnumerable<IPermissionProvider> permissionProviders\n            )\n        {\n            H = htmlLocalizer;\n            _notifier = notifier;\n            _roleService = roleService;\n            _typeFeatureProvider = typeFeatureProvider;\n            _permissionProviders = permissionProviders;\n            _roleManager = roleManager;\n            S = stringLocalizer;\n            _authorizationService = authorizationService;\n            _documentStore = documentStore;\n        }\n\n        public async Task<ActionResult> Index()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var roles = await _roleService.GetRolesAsync();\n\n            var model = new RolesViewModel\n            {\n                RoleEntries = roles.Select(BuildRoleEntry).ToList()\n            };\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Create()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var model = new CreateRoleViewModel();\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Create(CreateRoleViewModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                model.RoleName = model.RoleName.Trim();\n\n                if (model.RoleName.Contains('/'))\n                {\n                    ModelState.AddModelError(string.Empty, S[\"Invalid role name.\"]);\n                }\n\n                if (await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(model.RoleName)) != null)\n                {\n                    ModelState.AddModelError(string.Empty, S[\"The role is already used.\"]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var role = new Role { RoleName = model.RoleName, RoleDescription = model.RoleDescription };\n                var result = await _roleManager.CreateAsync(role);\n                if (result.Succeeded)\n                {\n                    await _notifier.SuccessAsync(H[\"Role created successfully.\"]);\n                    return RedirectToAction(nameof(Index));\n                }\n\n                await _documentStore.CancelAsync();\n\n                foreach (var error in result.Errors)\n                {\n                    ModelState.AddModelError(string.Empty, error.Description);\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var currentRole = await _roleManager.FindByIdAsync(id);\n\n            if (currentRole == null)\n            {\n                return NotFound();\n            }\n\n            var result = await _roleManager.DeleteAsync(currentRole);\n\n            if (result.Succeeded)\n            {\n                await _notifier.SuccessAsync(H[\"Role deleted successfully.\"]);\n            }\n            else\n            {\n                await _documentStore.CancelAsync();\n\n                await _notifier.ErrorAsync(H[\"Could not delete this role.\"]);\n\n                foreach (var error in result.Errors)\n                {\n                    await _notifier.ErrorAsync(H[error.Description]);\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        public async Task<IActionResult> Edit(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var role = (Role)await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(id));\n            if (role == null)\n            {\n                return NotFound();\n            }\n\n            var installedPermissions = await GetInstalledPermissionsAsync();\n            var allPermissions = installedPermissions.SelectMany(x => x.Value);\n\n            var model = new EditRoleViewModel\n            {\n                Role = role,\n                Name = role.RoleName,\n                RoleDescription = role.RoleDescription,\n                EffectivePermissions = await GetEffectivePermissions(role, allPermissions),\n                RoleCategoryPermissions = installedPermissions\n            };\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(nameof(Edit))]\n        public async Task<IActionResult> EditPost(string id, string roleDescription)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var role = (Role)await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(id));\n\n            if (role == null)\n            {\n                return NotFound();\n            }\n\n            role.RoleDescription = roleDescription;\n\n            // Save\n            var rolePermissions = new List<RoleClaim>();\n            foreach (string key in Request.Form.Keys)\n            {\n                if (key.StartsWith(\"Checkbox.\", StringComparison.Ordinal) && Request.Form[key] == \"true\")\n                {\n                    string permissionName = key.Substring(\"Checkbox.\".Length);\n                    rolePermissions.Add(new RoleClaim { ClaimType = Permission.ClaimType, ClaimValue = permissionName });\n                }\n            }\n\n            role.RoleClaims.RemoveAll(c => c.ClaimType == Permission.ClaimType);\n            role.RoleClaims.AddRange(rolePermissions);\n\n            await _roleManager.UpdateAsync(role);\n\n            await _notifier.SuccessAsync(H[\"Role updated successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        private RoleEntry BuildRoleEntry(IRole role)\n        {\n            return new RoleEntry\n            {\n                Name = role.RoleName,\n                Description = role.RoleDescription,\n                Selected = false\n            };\n        }\n\n        private async Task<IDictionary<string, IEnumerable<Permission>>> GetInstalledPermissionsAsync()\n        {\n            var installedPermissions = new Dictionary<string, IEnumerable<Permission>>();\n            foreach (var permissionProvider in _permissionProviders)\n            {\n                var feature = _typeFeatureProvider.GetFeatureForDependency(permissionProvider.GetType());\n                var featureName = feature.Id;\n\n                var permissions = await permissionProvider.GetPermissionsAsync();\n\n                foreach (var permission in permissions)\n                {\n                    var category = permission.Category;\n\n                    string title = String.IsNullOrWhiteSpace(category) ? S[\"{0} Feature\", featureName] : category;\n\n                    if (installedPermissions.ContainsKey(title))\n                    {\n                        installedPermissions[title] = installedPermissions[title].Concat(new[] { permission });\n                    }\n                    else\n                    {\n                        installedPermissions.Add(title, new[] { permission });\n                    }\n                }\n            }\n\n            return installedPermissions;\n        }\n\n        private async Task<IEnumerable<string>> GetEffectivePermissions(Role role, IEnumerable<Permission> allPermissions)\n        {\n            // Create a fake user to check the actual permissions. If the role is anonymous\n            // IsAuthenticated needs to be false.\n            var fakeIdentity = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Role, role.RoleName) },\n                role.RoleName != \"Anonymous\" ? \"FakeAuthenticationType\" : null);\n\n            // Add role claims\n            fakeIdentity.AddClaims(role.RoleClaims.Select(c => c.ToClaim()));\n\n            var fakePrincipal = new ClaimsPrincipal(fakeIdentity);\n\n            var result = new List<string>();\n\n            foreach (var permission in allPermissions)\n            {\n                if (await _authorizationService.AuthorizeAsync(fakePrincipal, permission))\n                {\n                    result.Add(permission.Name);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n", "using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Html;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Handlers;\nusing OrchardCore.DisplayManagement.Title;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.ResourceManagement;\nusing OrchardCore.Seo.Models;\nusing OrchardCore.Shortcodes.Services;\nusing Shortcodes;\n\nnamespace OrchardCore.Seo.Drivers\n{\n    public class SeoContentDriver : ContentDisplayDriver\n    {\n        private readonly IContentManager _contentManager;\n        private readonly IPageTitleBuilder _pageTitleBuilder;\n        private readonly IResourceManager _resourceManager;\n        private readonly IShortcodeService _shortcodeService;\n\n        private bool _primaryContentRendered { get; set; }\n\n        public SeoContentDriver(\n            IContentManager contentManager,\n            IPageTitleBuilder pageTitleBuilder,\n            IResourceManager resourceManager,\n            IShortcodeService shortcodeService\n            )\n        {\n            _contentManager = contentManager;\n            _pageTitleBuilder = pageTitleBuilder;\n            _resourceManager = resourceManager;\n            _shortcodeService = shortcodeService;\n        }\n\n        public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem, BuildDisplayContext context)\n        {\n            // We only apply this on the primary content item, which is considered the first call to BuildDisplay.\n            if (_primaryContentRendered)\n            {\n                return null;\n            }\n\n            _primaryContentRendered = true;\n\n            // Do not include Widgets or any display type other than detail.\n            if (context.DisplayType != \"Detail\" || context.Shape.TryGetProperty(nameof(ContentTypeSettings.Stereotype), out string _))\n            {\n                return null;\n            }\n\n            var aspect = await _contentManager.PopulateAspectAsync<SeoAspect>(contentItem);\n\n            if (!aspect.Render)\n            {\n                return null;\n            }\n\n            if (!String.IsNullOrEmpty(aspect.PageTitle))\n            {\n                _pageTitleBuilder.SetFixedTitle(new HtmlString(await RenderAsync(aspect.PageTitle, contentItem)));\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"description\",\n                    Content = await RenderAsync(aspect.MetaDescription, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaKeywords))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"keywords\",\n                    Content = await RenderAsync(aspect.MetaKeywords, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.Canonical))\n            {\n                _resourceManager.RegisterLink(new LinkEntry\n                {\n                    Href = aspect.Canonical,\n                    Rel = \"canonical\"\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaRobots))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"robots\",\n                    Content = await RenderAsync(aspect.MetaRobots, contentItem)\n                });\n            }\n\n            foreach (var customMetaTag in aspect.CustomMetaTags)\n            {\n                // Generate a new meta entry as the builder is preopulated.\n                _resourceManager.RegisterMeta(new MetaEntry(\n                    await RenderAsync(customMetaTag.Name, contentItem),\n                    await RenderAsync(customMetaTag.Property, contentItem),\n                    await RenderAsync(customMetaTag.Content, contentItem),\n                    await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                    await RenderAsync(customMetaTag.Charset, contentItem)));\n            }\n\n            // OpenGraph.\n            if (!String.IsNullOrEmpty(aspect.OpenGraphType))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:type\",\n                    Content = await RenderAsync(aspect.OpenGraphType, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphTitle))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:title\",\n                    Content = await RenderAsync(aspect.OpenGraphTitle, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:description\",\n                    Content = await RenderAsync(aspect.OpenGraphDescription, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphImage))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:image\",\n                    Content = await RenderAsync(aspect.OpenGraphImage, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphImageAlt))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:image:alt\",\n                    Content = await RenderAsync(aspect.OpenGraphImageAlt, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphUrl))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:url\",\n                    Content = await RenderAsync(aspect.OpenGraphUrl, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphSiteName))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:site_name\",\n                    Content = await RenderAsync(aspect.OpenGraphSiteName, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphAppId))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"fb:app_id\",\n                    Content = await RenderAsync(aspect.OpenGraphAppId, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphLocale))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:locale\",\n                    Content = await RenderAsync(aspect.OpenGraphLocale, contentItem)\n                });\n            }\n\n            // Twitter.\n            if (!String.IsNullOrEmpty(aspect.TwitterCard))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"twitter:card\",\n                    Content = await RenderAsync(aspect.TwitterCard, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterSite))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"twitter:site\",\n                    Content = await RenderAsync(aspect.TwitterSite, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterTitle))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:title\",\n                    Content = await RenderAsync(aspect.TwitterTitle, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:description\",\n                    Content = await RenderAsync(aspect.TwitterDescription, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterImage))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:image\",\n                    Content = await RenderAsync(aspect.TwitterImage, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterImageAlt))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:image:alt\",\n                    Content = await RenderAsync(aspect.TwitterImageAlt, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterCreator))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:creator\",\n                    Content = await RenderAsync(aspect.TwitterCreator, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterUrl))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:url\",\n                    Content = await RenderAsync(aspect.TwitterUrl, contentItem)\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.GoogleSchema))\n            {\n                _resourceManager.RegisterHeadScript(new HtmlString($\"<script type=\\\"application/ld+json\\\">\\n{aspect.GoogleSchema}\\n</script>\"));\n            }\n\n            return null;\n        }\n\n        private ValueTask<string> RenderAsync(string template, ContentItem contentItem)\n            => _shortcodeService.ProcessAsync(template,\n                    new Context\n                    {\n                        [\"ContentItem\"] = contentItem\n                    });\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Newtonsoft.Json;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Liquid;\nusing OrchardCore.Modules;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing OrchardCore.Shortcodes.Models;\nusing OrchardCore.Shortcodes.Services;\nusing OrchardCore.Shortcodes.ViewModels;\nusing Parlot;\n\nnamespace OrchardCore.Shortcodes.Controllers\n{\n    [Feature(\"OrchardCore.Shortcodes.Templates\")]\n    public class AdminController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly ShortcodeTemplatesManager _shortcodeTemplatesManager;\n        private readonly ILiquidTemplateManager _liquidTemplateManager;\n        private readonly ISiteService _siteService;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly dynamic New;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            ShortcodeTemplatesManager shortcodeTemplatesManager,\n            ILiquidTemplateManager liquidTemplateManager,\n            ISiteService siteService,\n            INotifier notifier,\n            IShapeFactory shapeFactory,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IHtmlLocalizer<AdminController> htmlLocalizer\n            )\n        {\n            _authorizationService = authorizationService;\n            _shortcodeTemplatesManager = shortcodeTemplatesManager;\n            _liquidTemplateManager = liquidTemplateManager;\n            _siteService = siteService;\n            _notifier = notifier;\n            New = shapeFactory;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n        }\n\n        public async Task<IActionResult> Index(ContentOptions options, PagerParameters pagerParameters)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n            var shortcodeTemplates = shortcodeTemplatesDocument.ShortcodeTemplates.ToList();\n\n            if (!String.IsNullOrWhiteSpace(options.Search))\n            {\n                shortcodeTemplates = shortcodeTemplates.Where(x => x.Key.Contains(options.Search, StringComparison.OrdinalIgnoreCase)).ToList();\n            }\n\n            var count = shortcodeTemplates.Count;\n\n            shortcodeTemplates = shortcodeTemplates.OrderBy(x => x.Key)\n                .Skip(pager.GetStartIndex())\n                .Take(pager.PageSize).ToList();\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(count);\n\n            var model = new ShortcodeTemplateIndexViewModel\n            {\n                ShortcodeTemplates = shortcodeTemplates.Select(x => new ShortcodeTemplateEntry { Name = x.Key, ShortcodeTemplate = x.Value }).ToList(),\n                Options = options,\n                Pager = pagerShape\n            };\n\n            model.Options.ContentsBulkAction = new List<SelectListItem>() {\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            return View(\"Index\", model);\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public ActionResult IndexFilterPOST(ShortcodeTemplateIndexViewModel model)\n        {\n            return RedirectToAction(nameof(Index), new RouteValueDictionary {\n                { \"Options.Search\", model.Options.Search }\n            });\n        }\n\n        public async Task<IActionResult> Create(ShortcodeTemplateViewModel model)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            return View(new ShortcodeTemplateViewModel());\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        public async Task<IActionResult> CreatePost(ShortcodeTemplateViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!IsValidShortcodeName(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name contains invalid characters.\"]);\n                }\n                else\n                {\n                    var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n                    if (shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(model.Name))\n                    {\n                        ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"A template with the same name already exists.\"]);\n                    }\n                }\n\n                if (String.IsNullOrEmpty(model.Content))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template content is mandatory.\"]);\n                }\n                else if (!_liquidTemplateManager.Validate(model.Content, out var errors))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template doesn't contain a valid Liquid expression. Details: {0}\", String.Join(\" \", errors)]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new ShortcodeTemplate\n                {\n                    Content = model.Content,\n                    Hint = model.Hint,\n                    Usage = model.Usage,\n                    DefaultValue = model.DefaultValue,\n                    Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                };\n\n                await _shortcodeTemplatesManager.UpdateShortcodeTemplateAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(name))\n            {\n                return RedirectToAction(nameof(Create), new { name });\n            }\n\n            var template = shortcodeTemplatesDocument.ShortcodeTemplates[name];\n\n            var model = new ShortcodeTemplateViewModel\n            {\n                Name = name,\n                Content = template.Content,\n                Hint = template.Hint,\n                Usage = template.Usage,\n                DefaultValue = template.DefaultValue,\n                Categories = template.Categories\n            };\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Edit(string sourceName, ShortcodeTemplateViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(sourceName))\n            {\n                return NotFound();\n            }\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!IsValidShortcodeName(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name contains invalid characters.\"]);\n                }\n                else if (!String.Equals(model.Name, sourceName, StringComparison.OrdinalIgnoreCase)\n                    && shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"A template with the same name already exists.\"]);\n                }\n\n                if (String.IsNullOrEmpty(model.Content))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template content is mandatory.\"]);\n                }\n                else if (!_liquidTemplateManager.Validate(model.Content, out var errors))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template doesn't contain a valid Liquid expression. Details: {0}\", String.Join(\" \", errors)]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new ShortcodeTemplate\n                {\n                    Content = model.Content,\n                    Hint = model.Hint,\n                    Usage = model.Usage,\n                    DefaultValue = model.DefaultValue,\n                    Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                };\n\n                await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(sourceName);\n\n                await _shortcodeTemplatesManager.UpdateShortcodeTemplateAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(name))\n            {\n                return NotFound();\n            }\n\n            await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(name);\n\n            await _notifier.SuccessAsync(H[\"Shortcode template deleted successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> IndexPost(ViewModels.ContentOptions options, IEnumerable<string> itemIds)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            if (itemIds?.Count() > 0)\n            {\n                var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n                var checkedContentItems = shortcodeTemplatesDocument.ShortcodeTemplates.Where(x => itemIds.Contains(x.Key));\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkedContentItems)\n                        {\n                            await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(item.Key);\n                        }\n                        await _notifier.SuccessAsync(H[\"Shortcode templates successfully removed.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        private static bool IsValidShortcodeName(string name)\n        {\n            var scanner = new Scanner(name);\n            return scanner.ReadIdentifier(out var result) && name.Length == result.Length;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Newtonsoft.Json;\nusing OrchardCore.Admin;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Shell.Models;\nusing OrchardCore.Modules;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing OrchardCore.Tenants.Services;\nusing OrchardCore.Tenants.ViewModels;\n\nnamespace OrchardCore.Tenants.Controllers\n{\n    [Feature(\"OrchardCore.Tenants.FeatureProfiles\")]\n    [Admin]\n    public class FeatureProfilesController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly FeatureProfilesManager _featureProfilesManager;\n        private readonly ISiteService _siteService;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly dynamic New;\n\n        public FeatureProfilesController(\n            IAuthorizationService authorizationService,\n            FeatureProfilesManager featueProfilesManager,\n            ISiteService siteService,\n            INotifier notifier,\n            IShapeFactory shapeFactory,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IHtmlLocalizer<AdminController> htmlLocalizer\n            )\n        {\n            _authorizationService = authorizationService;\n            _featureProfilesManager = featueProfilesManager;\n            _siteService = siteService;\n            _notifier = notifier;\n            New = shapeFactory;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n        }\n\n        public async Task<IActionResult> Index(ContentOptions options, PagerParameters pagerParameters)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n            var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n            var featureProfiles = featureProfilesDocument.FeatureProfiles.ToList();\n\n            if (!String.IsNullOrWhiteSpace(options.Search))\n            {\n                featureProfiles = featureProfiles.Where(x => x.Key.Contains(options.Search, StringComparison.OrdinalIgnoreCase)).ToList();\n            }\n\n            var count = featureProfiles.Count;\n\n            featureProfiles = featureProfiles.OrderBy(x => x.Key)\n                .Skip(pager.GetStartIndex())\n                .Take(pager.PageSize).ToList();\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(count);\n\n            var model = new FeatureProfilesIndexViewModel\n            {\n                FeatureProfiles = featureProfiles.Select(x => new FeatureProfileEntry { Name = x.Key, FeatureProfile = x.Value }).ToList(),\n                Options = options,\n                Pager = pagerShape\n            };\n\n            model.Options.ContentsBulkAction = new List<SelectListItem>() {\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            return View(\"Index\", model);\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public ActionResult IndexFilterPOST(FeatureProfilesIndexViewModel model)\n        {\n            return RedirectToAction(nameof(Index), new RouteValueDictionary {\n                { \"Options.Search\", model.Options.Search }\n            });\n        }\n\n        public async Task<IActionResult> Create()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            return View(new FeatureProfileViewModel());\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        public async Task<IActionResult> CreatePost(FeatureProfileViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            List<FeatureRule> featureRules = null;\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else\n                {\n                    var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n                    if (featureProfilesDocument.FeatureProfiles.ContainsKey(model.Name))\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"A profile with the same name already exists.\"]);\n                    }\n                }\n\n                if (String.IsNullOrEmpty(model.FeatureRules))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"The feature rules are mandatory.\"]);\n                }\n                else\n                {\n                    try\n                    {\n                        featureRules = JsonConvert.DeserializeObject<List<FeatureRule>>(model.FeatureRules);\n                    }\n                    catch (Exception)\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"Invalid json supplied.\"]);\n                    }\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new FeatureProfile\n                {\n                    FeatureRules = featureRules\n                };\n\n                await _featureProfilesManager.UpdateFeatureProfileAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(name))\n            {\n                return RedirectToAction(nameof(Create), new { name });\n            }\n\n            var featureProfile = featureProfilesDocument.FeatureProfiles[name];\n\n            var model = new FeatureProfileViewModel\n            {\n                Name = name,\n                FeatureRules = JsonConvert.SerializeObject(featureProfile.FeatureRules, Formatting.Indented)\n            };\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Edit(string sourceName, FeatureProfileViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(sourceName))\n            {\n                return NotFound();\n            }\n\n            List<FeatureRule> featureRules = null;\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!String.Equals(model.Name, sourceName, StringComparison.OrdinalIgnoreCase)\n                    && featureProfilesDocument.FeatureProfiles.ContainsKey(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"A feature profile with the same name already exists.\"]);\n                }\n\n                if (String.IsNullOrEmpty(model.FeatureRules))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"The feature rules are mandatory.\"]);\n                }\n                else\n                {\n                    try\n                    {\n                        featureRules = JsonConvert.DeserializeObject<List<FeatureRule>>(model.FeatureRules);\n                    }\n                    catch (Exception)\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"Invalid json supplied.\"]);\n                    }\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var featureProfile = new FeatureProfile\n                {\n                    FeatureRules = featureRules\n                };\n\n                await _featureProfilesManager.RemoveFeatureProfileAsync(sourceName);\n\n                await _featureProfilesManager.UpdateFeatureProfileAsync(model.Name, featureProfile);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(name))\n            {\n                return NotFound();\n            }\n\n            await _featureProfilesManager.RemoveFeatureProfileAsync(name);\n\n            await _notifier.SuccessAsync(H[\"Feature profile deleted successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> IndexPost(ContentOptions options, IEnumerable<string> itemIds)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            if (itemIds?.Count() > 0)\n            {\n                var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n                var checkItems = featureProfilesDocument.FeatureProfiles.Where(x => itemIds.Contains(x.Key));\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkItems)\n                        {\n                            await _featureProfilesManager.RemoveFeatureProfileAsync(item.Key);\n                        }\n                        await _notifier.SuccessAsync(H[\"Feature profiles successfully removed.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n    }\n}\n"], "fixing_code": ["using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing OrchardCore.Admin;\nusing OrchardCore.ContentFields.Settings;\nusing OrchardCore.ContentFields.ViewModels;\nusing OrchardCore.ContentLocalization;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Records;\nusing OrchardCore.Contents;\nusing OrchardCore.Modules;\nusing YesSql;\nusing YesSql.Services;\nusing IHttpContextAccessor = Microsoft.AspNetCore.Http.IHttpContextAccessor;\n\nnamespace OrchardCore.ContentFields.Controllers\n{\n    [RequireFeatures(\"OrchardCore.ContentLocalization\")]\n    [Admin]\n    public class LocalizationSetContentPickerAdminController : Controller\n    {\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly IContentLocalizationManager _contentLocalizationManager;\n        private readonly IContentManager _contentManager;\n        private readonly ISession _session;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public LocalizationSetContentPickerAdminController(\n            IContentDefinitionManager contentDefinitionManager,\n            IContentLocalizationManager contentLocalizationManager,\n            IContentManager contentManager,\n            ISession session,\n            IAuthorizationService authorizationService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _contentDefinitionManager = contentDefinitionManager;\n            _contentLocalizationManager = contentLocalizationManager;\n            _contentManager = contentManager;\n            _session = session;\n            _authorizationService = authorizationService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> SearchLocalizationSets(string part, string field, string query)\n        {\n            if (string.IsNullOrWhiteSpace(part) || string.IsNullOrWhiteSpace(field))\n            {\n                return BadRequest(\"Part and field are required parameters\");\n            }\n\n            var partFieldDefinition = _contentDefinitionManager.GetPartDefinition(part)?.Fields\n                .FirstOrDefault(f => f.Name == field);\n\n            var fieldSettings = partFieldDefinition?.GetSettings<LocalizationSetContentPickerFieldSettings>();\n            if (fieldSettings == null)\n            {\n                return BadRequest(\"Unable to find field definition\");\n            }\n\n            var dbQuery = _session.Query<ContentItem, ContentItemIndex>()\n              .With<ContentItemIndex>(x => x.ContentType.IsIn(fieldSettings.DisplayedContentTypes) && x.Latest);\n\n            if (!string.IsNullOrEmpty(query))\n            {\n                dbQuery.With<ContentItemIndex>(x => x.DisplayText.Contains(query) || x.ContentType.Contains(query));\n            }\n\n            var contentItems = await dbQuery.Take(40).ListAsync();\n\n            // if 2 search results have the same set, select one based on the current culture\n            var cleanedContentItems = await _contentLocalizationManager.DeduplicateContentItemsAsync(contentItems);\n\n            var results = new List<VueMultiselectItemViewModel>();\n\n            foreach (var contentItem in cleanedContentItems)\n            {\n                if (await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.ViewContent, contentItem))\n                {\n                    results.Add(new VueMultiselectItemViewModel\n                    {\n                        Id = contentItem.Key, //localization set\n                        DisplayText = contentItem.Value.ToString(),\n                        HasPublished = await _contentManager.HasPublishedVersionAsync(contentItem.Value)\n                    });\n                }\n            }\n\n            return new ObjectResult(results);\n        }\n    }\n}\n", "using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing OrchardCore.Admin;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.Contents;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing YesSql;\nusing IHttpContextAccessor = Microsoft.AspNetCore.Http.IHttpContextAccessor;\n\nnamespace OrchardCore.Demo.Controllers\n{\n    public class ContentController : Controller\n    {\n        private readonly IContentItemDisplayManager _contentDisplay;\n        private readonly IContentManager _contentManager;\n        private readonly ISession _session;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public ContentController(\n            IContentManager contentManager,\n            IContentItemDisplayManager contentDisplay,\n            ISession session,\n            IUpdateModelAccessor updateModelAccessor,\n            IAuthorizationService authorizationService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _contentManager = contentManager;\n            _contentDisplay = contentDisplay;\n            _session = session;\n            _updateModelAccessor = updateModelAccessor;\n            _authorizationService = authorizationService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<ActionResult> Display(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.ViewContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var shape = await _contentDisplay.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater);\n            return View(shape);\n        }\n\n        [Admin]\n        public async Task<ActionResult> Edit(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var shape = await _contentDisplay.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n            return View(shape);\n        }\n\n        [Admin, HttpPost, ActionName(\"Edit\")]\n        public async Task<ActionResult> EditPost(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var shape = await _contentDisplay.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(nameof(Edit), shape);\n            }\n\n            _session.Save(contentItem);\n            return RedirectToAction(nameof(Edit), contentItemId);\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.DisplayManagement.Extensions;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Extensions;\nusing OrchardCore.Environment.Extensions.Features;\nusing OrchardCore.Environment.Shell;\nusing OrchardCore.Features.Models;\nusing OrchardCore.Features.ViewModels;\nusing OrchardCore.Routing;\n\nnamespace OrchardCore.Features.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IExtensionManager _extensionManager;\n        private readonly IShellFeaturesManager _shellFeaturesManager;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly ShellSettings _shellSettings;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n\n        public AdminController(\n            IExtensionManager extensionManager,\n            IHtmlLocalizer<AdminController> localizer,\n            IShellFeaturesManager shellFeaturesManager,\n            IAuthorizationService authorizationService,\n            ShellSettings shellSettings,\n            INotifier notifier,\n            IStringLocalizer<AdminController> stringLocalizer)\n        {\n            _extensionManager = extensionManager;\n            _shellFeaturesManager = shellFeaturesManager;\n            _authorizationService = authorizationService;\n            _shellSettings = shellSettings;\n            _notifier = notifier;\n            H = localizer;\n            S = stringLocalizer;\n        }\n\n        public async Task<ActionResult> Features()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            var enabledFeatures = await _shellFeaturesManager.GetEnabledFeaturesAsync();\n            var alwaysEnabledFeatures = await _shellFeaturesManager.GetAlwaysEnabledFeaturesAsync();\n\n            var moduleFeatures = new List<ModuleFeature>();\n\n            var features = (await _shellFeaturesManager.GetAvailableFeaturesAsync()).Where(f => !f.IsTheme());\n\n            foreach (var moduleFeatureInfo in features)\n            {\n                var dependentFeatures = _extensionManager.GetDependentFeatures(moduleFeatureInfo.Id);\n                var featureDependencies = _extensionManager.GetFeatureDependencies(moduleFeatureInfo.Id);\n\n                var moduleFeature = new ModuleFeature\n                {\n                    Descriptor = moduleFeatureInfo,\n                    IsEnabled = enabledFeatures.Contains(moduleFeatureInfo),\n                    IsAlwaysEnabled = alwaysEnabledFeatures.Contains(moduleFeatureInfo),\n                    //IsRecentlyInstalled = _moduleService.IsRecentlyInstalled(f.Extension),\n                    //NeedsUpdate = featuresThatNeedUpdate.Contains(f.Id),\n                    EnabledDependentFeatures = dependentFeatures.Where(x => x.Id != moduleFeatureInfo.Id && enabledFeatures.Contains(x)).ToList(),\n                    FeatureDependencies = featureDependencies.Where(d => d.Id != moduleFeatureInfo.Id).ToList()\n                };\n\n                moduleFeatures.Add(moduleFeature);\n            }\n\n            return View(new FeaturesViewModel\n            {\n                Features = moduleFeatures\n            });\n        }\n\n        [HttpPost]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> Features(BulkActionViewModel model, bool? force)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            if (model.FeatureIds == null || !model.FeatureIds.Any())\n            {\n                ModelState.AddModelError(nameof(BulkActionViewModel.FeatureIds), S[\"Please select one or more features.\"]);\n            }\n\n            if (ModelState.IsValid)\n            {\n                var features = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                    .Where(f => !f.IsTheme() && model.FeatureIds.Contains(f.Id));\n\n                await EnableOrDisableFeaturesAsync(features, model.BulkAction, force);\n            }\n\n            return RedirectToAction(nameof(Features));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Disable(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n\n            if (feature == null)\n            {\n                return NotFound();\n            }\n\n            // Generating routes can fail while the tenant is recycled as routes can use services.\n            // It could be fixed by waiting for the next request or the end of the current one\n            // to actually release the tenant. Right now we render the url before recycling the tenant.\n\n            var nextUrl = Url.Action(nameof(Features));\n\n            await EnableOrDisableFeaturesAsync(new[] { feature }, FeaturesBulkAction.Disable, force: true);\n\n            return Redirect(nextUrl);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Enable(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n            {\n                return Forbid();\n            }\n\n            var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n\n            if (feature == null)\n            {\n                return NotFound();\n            }\n\n            // Generating routes can fail while the tenant is recycled as routes can use services.\n            // It could be fixed by waiting for the next request or the end of the current one\n            // to actually release the tenant. Right now we render the url before recycling the tenant.\n\n            var nextUrl = Url.Action(nameof(Features));\n\n            await EnableOrDisableFeaturesAsync(new[] { feature }, FeaturesBulkAction.Enable, force: true);\n\n            return Redirect(nextUrl);\n        }\n\n        private async Task EnableOrDisableFeaturesAsync(IEnumerable<IFeatureInfo> features, FeaturesBulkAction action, bool? force)\n        {\n            switch (action)\n            {\n                case FeaturesBulkAction.None:\n                    break;\n                case FeaturesBulkAction.Enable:\n                    await _shellFeaturesManager.EnableFeaturesAsync(features, force == true);\n                    await NotifyAsync(features);\n                    break;\n                case FeaturesBulkAction.Disable:\n                    await _shellFeaturesManager.DisableFeaturesAsync(features, force == true);\n                    await NotifyAsync(features, enabled: false);\n                    break;\n                case FeaturesBulkAction.Toggle:\n                    // The features array has already been checked for validity.\n                    var enabledFeatures = await _shellFeaturesManager.GetEnabledFeaturesAsync();\n                    var disabledFeatures = await _shellFeaturesManager.GetDisabledFeaturesAsync();\n                    var featuresToEnable = disabledFeatures.Intersect(features);\n                    var featuresToDisable = enabledFeatures.Intersect(features);\n\n                    await _shellFeaturesManager.UpdateFeaturesAsync(featuresToDisable, featuresToEnable, force == true);\n                    await NotifyAsync(featuresToEnable);\n                    await NotifyAsync(featuresToDisable, enabled: false);\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        private async ValueTask NotifyAsync(IEnumerable<IFeatureInfo> features, bool enabled = true)\n        {\n            foreach (var feature in features)\n            {\n                await _notifier.SuccessAsync(H[\"{0} was {1}.\", feature.Name ?? feature.Id, enabled ? \"enabled\" : \"disabled\"]);\n            }\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.Extensions.Localization;\nusing OrchardCore.Data.Documents;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Extensions;\nusing OrchardCore.Roles.ViewModels;\nusing OrchardCore.Security;\nusing OrchardCore.Security.Permissions;\nusing OrchardCore.Security.Services;\n\nnamespace OrchardCore.Roles.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IDocumentStore _documentStore;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IStringLocalizer S;\n        private readonly RoleManager<IRole> _roleManager;\n        private readonly IEnumerable<IPermissionProvider> _permissionProviders;\n        private readonly ITypeFeatureProvider _typeFeatureProvider;\n        private readonly IRoleService _roleService;\n        private readonly INotifier _notifier;\n        private readonly IHtmlLocalizer H;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            ITypeFeatureProvider typeFeatureProvider,\n            IDocumentStore documentStore,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IHtmlLocalizer<AdminController> htmlLocalizer,\n            RoleManager<IRole> roleManager,\n            IRoleService roleService,\n            INotifier notifier,\n            IEnumerable<IPermissionProvider> permissionProviders\n            )\n        {\n            H = htmlLocalizer;\n            _notifier = notifier;\n            _roleService = roleService;\n            _typeFeatureProvider = typeFeatureProvider;\n            _permissionProviders = permissionProviders;\n            _roleManager = roleManager;\n            S = stringLocalizer;\n            _authorizationService = authorizationService;\n            _documentStore = documentStore;\n        }\n\n        public async Task<ActionResult> Index()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var roles = await _roleService.GetRolesAsync();\n\n            var model = new RolesViewModel\n            {\n                RoleEntries = roles.Select(BuildRoleEntry).ToList()\n            };\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Create()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var model = new CreateRoleViewModel();\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Create(CreateRoleViewModel model)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            if (ModelState.IsValid)\n            {\n                model.RoleName = model.RoleName.Trim();\n\n                if (model.RoleName.Contains('/'))\n                {\n                    ModelState.AddModelError(string.Empty, S[\"Invalid role name.\"]);\n                }\n\n                if (await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(model.RoleName)) != null)\n                {\n                    ModelState.AddModelError(string.Empty, S[\"The role is already used.\"]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var role = new Role { RoleName = model.RoleName, RoleDescription = model.RoleDescription };\n                var result = await _roleManager.CreateAsync(role);\n                if (result.Succeeded)\n                {\n                    await _notifier.SuccessAsync(H[\"Role created successfully.\"]);\n                    return RedirectToAction(nameof(Index));\n                }\n\n                await _documentStore.CancelAsync();\n\n                foreach (var error in result.Errors)\n                {\n                    ModelState.AddModelError(string.Empty, error.Description);\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var currentRole = await _roleManager.FindByIdAsync(id);\n\n            if (currentRole == null)\n            {\n                return NotFound();\n            }\n\n            var result = await _roleManager.DeleteAsync(currentRole);\n\n            if (result.Succeeded)\n            {\n                await _notifier.SuccessAsync(H[\"Role deleted successfully.\"]);\n            }\n            else\n            {\n                await _documentStore.CancelAsync();\n\n                await _notifier.ErrorAsync(H[\"Could not delete this role.\"]);\n\n                foreach (var error in result.Errors)\n                {\n                    await _notifier.ErrorAsync(H[error.Description]);\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        public async Task<IActionResult> Edit(string id)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var role = (Role)await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(id));\n            if (role == null)\n            {\n                return NotFound();\n            }\n\n            var installedPermissions = await GetInstalledPermissionsAsync();\n            var allPermissions = installedPermissions.SelectMany(x => x.Value);\n\n            var model = new EditRoleViewModel\n            {\n                Role = role,\n                Name = role.RoleName,\n                RoleDescription = role.RoleDescription,\n                EffectivePermissions = await GetEffectivePermissions(role, allPermissions),\n                RoleCategoryPermissions = installedPermissions\n            };\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(nameof(Edit))]\n        public async Task<IActionResult> EditPost(string id, string roleDescription)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n            {\n                return Forbid();\n            }\n\n            var role = (Role)await _roleManager.FindByNameAsync(_roleManager.NormalizeKey(id));\n\n            if (role == null)\n            {\n                return NotFound();\n            }\n\n            role.RoleDescription = roleDescription;\n\n            // Save\n            var rolePermissions = new List<RoleClaim>();\n            foreach (string key in Request.Form.Keys)\n            {\n                if (key.StartsWith(\"Checkbox.\", StringComparison.Ordinal) && Request.Form[key] == \"true\")\n                {\n                    string permissionName = key.Substring(\"Checkbox.\".Length);\n                    rolePermissions.Add(new RoleClaim { ClaimType = Permission.ClaimType, ClaimValue = permissionName });\n                }\n            }\n\n            role.RoleClaims.RemoveAll(c => c.ClaimType == Permission.ClaimType);\n            role.RoleClaims.AddRange(rolePermissions);\n\n            await _roleManager.UpdateAsync(role);\n\n            await _notifier.SuccessAsync(H[\"Role updated successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        private RoleEntry BuildRoleEntry(IRole role)\n        {\n            return new RoleEntry\n            {\n                Name = role.RoleName,\n                Description = role.RoleDescription,\n                Selected = false\n            };\n        }\n\n        private async Task<IDictionary<string, IEnumerable<Permission>>> GetInstalledPermissionsAsync()\n        {\n            var installedPermissions = new Dictionary<string, IEnumerable<Permission>>();\n            foreach (var permissionProvider in _permissionProviders)\n            {\n                var feature = _typeFeatureProvider.GetFeatureForDependency(permissionProvider.GetType());\n                var featureName = feature.Id;\n\n                var permissions = await permissionProvider.GetPermissionsAsync();\n\n                foreach (var permission in permissions)\n                {\n                    var category = permission.Category;\n\n                    string title = String.IsNullOrWhiteSpace(category) ? S[\"{0} Feature\", featureName] : category;\n\n                    if (installedPermissions.ContainsKey(title))\n                    {\n                        installedPermissions[title] = installedPermissions[title].Concat(new[] { permission });\n                    }\n                    else\n                    {\n                        installedPermissions.Add(title, new[] { permission });\n                    }\n                }\n            }\n\n            return installedPermissions;\n        }\n\n        private async Task<IEnumerable<string>> GetEffectivePermissions(Role role, IEnumerable<Permission> allPermissions)\n        {\n            // Create a fake user to check the actual permissions. If the role is anonymous\n            // IsAuthenticated needs to be false.\n            var fakeIdentity = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Role, role.RoleName) },\n                role.RoleName != \"Anonymous\" ? \"FakeAuthenticationType\" : null);\n\n            // Add role claims\n            fakeIdentity.AddClaims(role.RoleClaims.Select(c => c.ToClaim()));\n\n            var fakePrincipal = new ClaimsPrincipal(fakeIdentity);\n\n            var result = new List<string>();\n\n            foreach (var permission in allPermissions)\n            {\n                if (await _authorizationService.AuthorizeAsync(fakePrincipal, permission))\n                {\n                    result.Add(permission.Name);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n", "using System;\nusing System.Text.Encodings.Web;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Html;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display.ContentDisplay;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Handlers;\nusing OrchardCore.DisplayManagement.Title;\nusing OrchardCore.DisplayManagement.Views;\nusing OrchardCore.ResourceManagement;\nusing OrchardCore.Seo.Models;\nusing OrchardCore.Shortcodes.Services;\nusing Shortcodes;\n\nnamespace OrchardCore.Seo.Drivers\n{\n    public class SeoContentDriver : ContentDisplayDriver\n    {\n        private readonly IContentManager _contentManager;\n        private readonly IPageTitleBuilder _pageTitleBuilder;\n        private readonly IResourceManager _resourceManager;\n        private readonly IShortcodeService _shortcodeService;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        private bool _primaryContentRendered { get; set; }\n\n        public SeoContentDriver(\n            IContentManager contentManager,\n            IPageTitleBuilder pageTitleBuilder,\n            IResourceManager resourceManager,\n            IShortcodeService shortcodeService,\n            HtmlEncoder htmlEncoder\n            )\n        {\n            _contentManager = contentManager;\n            _pageTitleBuilder = pageTitleBuilder;\n            _resourceManager = resourceManager;\n            _shortcodeService = shortcodeService;\n            _htmlEncoder = htmlEncoder;\n        }\n\n        public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem, BuildDisplayContext context)\n        {\n            // We only apply this on the primary content item, which is considered the first call to BuildDisplay.\n            if (_primaryContentRendered)\n            {\n                return null;\n            }\n\n            _primaryContentRendered = true;\n\n            // Do not include Widgets or any display type other than detail.\n            if (context.DisplayType != \"Detail\" || context.Shape.TryGetProperty(nameof(ContentTypeSettings.Stereotype), out string _))\n            {\n                return null;\n            }\n\n            var aspect = await _contentManager.PopulateAspectAsync<SeoAspect>(contentItem);\n\n            if (!aspect.Render)\n            {\n                return null;\n            }\n\n            var shortCodeContext = new Context\n            {\n                [\"ContentItem\"] = contentItem\n            };\n\n            if (!String.IsNullOrEmpty(aspect.PageTitle))\n            {\n                _pageTitleBuilder.SetFixedTitle(new HtmlString(_htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.PageTitle, shortCodeContext))));\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"description\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaDescription, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaKeywords))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"keywords\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaKeywords, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.Canonical))\n            {\n                _resourceManager.RegisterLink(new LinkEntry\n                {\n                    Href = aspect.Canonical,\n                    Rel = \"canonical\"\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.MetaRobots))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"robots\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaRobots, shortCodeContext))\n                });\n            }\n\n            foreach (var customMetaTag in aspect.CustomMetaTags)\n            {\n                // Generate a new meta entry as the builder is preopulated.\n                _resourceManager.RegisterMeta(new MetaEntry(\n                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Name, shortCodeContext)),\n                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Property, shortCodeContext)),\n                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Content, shortCodeContext)),\n                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.HttpEquiv, shortCodeContext)),\n                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Charset, shortCodeContext))));\n            }\n\n            // OpenGraph.\n            if (!String.IsNullOrEmpty(aspect.OpenGraphType))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:type\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphType, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphTitle))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:title\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphTitle, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:description\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphDescription, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphImage))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:image\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphImage, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphImageAlt))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:image:alt\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphImageAlt, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphUrl))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:url\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphUrl, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphSiteName))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:site_name\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphSiteName, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphAppId))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"fb:app_id\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphAppId, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.OpenGraphLocale))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"og:locale\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphLocale, shortCodeContext))\n                });\n            }\n\n            // Twitter.\n            if (!String.IsNullOrEmpty(aspect.TwitterCard))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"twitter:card\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterCard, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterSite))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Property = \"twitter:site\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterSite, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterTitle))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:title\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterTitle, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterDescription))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:description\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterDescription, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterImage))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:image\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterImage, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterImageAlt))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:image:alt\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterImageAlt, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterCreator))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:creator\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterCreator, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.TwitterUrl))\n            {\n                _resourceManager.RegisterMeta(new MetaEntry\n                {\n                    Name = \"twitter:url\",\n                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterUrl, shortCodeContext))\n                });\n            }\n\n            if (!String.IsNullOrEmpty(aspect.GoogleSchema))\n            {\n                var json = await _shortcodeService.ProcessAsync(aspect.GoogleSchema, shortCodeContext);\n\n                try\n                {\n                    // Validate json format\n                    JsonDocument.Parse(json);\n                }\n                catch\n                {\n                    json = \"{ \\\"error\\\": \\\"Invalid JSON content in SEO settings\\\" }\";\n                }\n\n                _resourceManager.RegisterHeadScript(new HtmlString($\"<script type=\\\"application/ld+json\\\">\\n{json}\\n</script>\"));\n\n            }\n\n            return null;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Newtonsoft.Json;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Infrastructure.Html;\nusing OrchardCore.Liquid;\nusing OrchardCore.Modules;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing OrchardCore.Shortcodes.Models;\nusing OrchardCore.Shortcodes.Services;\nusing OrchardCore.Shortcodes.ViewModels;\nusing Parlot;\n\nnamespace OrchardCore.Shortcodes.Controllers\n{\n    [Feature(\"OrchardCore.Shortcodes.Templates\")]\n    public class AdminController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly ShortcodeTemplatesManager _shortcodeTemplatesManager;\n        private readonly ILiquidTemplateManager _liquidTemplateManager;\n        private readonly ISiteService _siteService;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly IHtmlSanitizerService _htmlSanitizerService;\n        private readonly dynamic New;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            ShortcodeTemplatesManager shortcodeTemplatesManager,\n            ILiquidTemplateManager liquidTemplateManager,\n            ISiteService siteService,\n            INotifier notifier,\n            IShapeFactory shapeFactory,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IHtmlLocalizer<AdminController> htmlLocalizer,\n            IHtmlSanitizerService htmlSanitizerService\n            )\n        {\n            _authorizationService = authorizationService;\n            _shortcodeTemplatesManager = shortcodeTemplatesManager;\n            _liquidTemplateManager = liquidTemplateManager;\n            _siteService = siteService;\n            _notifier = notifier;\n            New = shapeFactory;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n            _htmlSanitizerService = htmlSanitizerService;\n        }\n\n        public async Task<IActionResult> Index(ContentOptions options, PagerParameters pagerParameters)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n            var shortcodeTemplates = shortcodeTemplatesDocument.ShortcodeTemplates.ToList();\n\n            if (!String.IsNullOrWhiteSpace(options.Search))\n            {\n                shortcodeTemplates = shortcodeTemplates.Where(x => x.Key.Contains(options.Search, StringComparison.OrdinalIgnoreCase)).ToList();\n            }\n\n            var count = shortcodeTemplates.Count;\n\n            shortcodeTemplates = shortcodeTemplates.OrderBy(x => x.Key)\n                .Skip(pager.GetStartIndex())\n                .Take(pager.PageSize).ToList();\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(count);\n\n            var model = new ShortcodeTemplateIndexViewModel\n            {\n                ShortcodeTemplates = shortcodeTemplates.Select(x => new ShortcodeTemplateEntry { Name = x.Key, ShortcodeTemplate = x.Value }).ToList(),\n                Options = options,\n                Pager = pagerShape\n            };\n\n            model.Options.ContentsBulkAction = new List<SelectListItem>() {\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            return View(\"Index\", model);\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public ActionResult IndexFilterPOST(ShortcodeTemplateIndexViewModel model)\n        {\n            return RedirectToAction(nameof(Index), new RouteValueDictionary {\n                { \"Options.Search\", model.Options.Search }\n            });\n        }\n\n        public async Task<IActionResult> Create(ShortcodeTemplateViewModel model)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            return View(new ShortcodeTemplateViewModel());\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        public async Task<IActionResult> CreatePost(ShortcodeTemplateViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!IsValidShortcodeName(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name contains invalid characters.\"]);\n                }\n                else\n                {\n                    var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n                    if (shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(model.Name))\n                    {\n                        ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"A template with the same name already exists.\"]);\n                    }\n                }\n\n                if (String.IsNullOrEmpty(model.Content))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template content is mandatory.\"]);\n                }\n                else if (!_liquidTemplateManager.Validate(model.Content, out var errors))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template doesn't contain a valid Liquid expression. Details: {0}\", String.Join(\" \", errors)]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new ShortcodeTemplate\n                {\n                    Content = model.Content,\n                    Hint = model.Hint,\n                    Usage = _htmlSanitizerService.Sanitize(model.Usage),\n                    DefaultValue = model.DefaultValue,\n                    Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                };\n\n                await _shortcodeTemplatesManager.UpdateShortcodeTemplateAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.GetShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(name))\n            {\n                return RedirectToAction(nameof(Create), new { name });\n            }\n\n            var template = shortcodeTemplatesDocument.ShortcodeTemplates[name];\n\n            var model = new ShortcodeTemplateViewModel\n            {\n                Name = name,\n                Content = template.Content,\n                Hint = template.Hint,\n                Usage = template.Usage,\n                DefaultValue = template.DefaultValue,\n                Categories = template.Categories\n            };\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Edit(string sourceName, ShortcodeTemplateViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(sourceName))\n            {\n                return NotFound();\n            }\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!IsValidShortcodeName(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"The name contains invalid characters.\"]);\n                }\n                else if (!String.Equals(model.Name, sourceName, StringComparison.OrdinalIgnoreCase)\n                    && shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(model.Name))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Name), S[\"A template with the same name already exists.\"]);\n                }\n\n                if (String.IsNullOrEmpty(model.Content))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template content is mandatory.\"]);\n                }\n                else if (!_liquidTemplateManager.Validate(model.Content, out var errors))\n                {\n                    ModelState.AddModelError(nameof(ShortcodeTemplateViewModel.Content), S[\"The template doesn't contain a valid Liquid expression. Details: {0}\", String.Join(\" \", errors)]);\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new ShortcodeTemplate\n                {\n                    Content = model.Content,\n                    Hint = model.Hint,\n                    Usage = _htmlSanitizerService.Sanitize(model.Usage),\n                    DefaultValue = model.DefaultValue,\n                    Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                };\n\n                await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(sourceName);\n\n                await _shortcodeTemplatesManager.UpdateShortcodeTemplateAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n\n            if (!shortcodeTemplatesDocument.ShortcodeTemplates.ContainsKey(name))\n            {\n                return NotFound();\n            }\n\n            await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(name);\n\n            await _notifier.SuccessAsync(H[\"Shortcode template deleted successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> IndexPost(ViewModels.ContentOptions options, IEnumerable<string> itemIds)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageShortcodeTemplates))\n            {\n                return Forbid();\n            }\n\n            if (itemIds?.Count() > 0)\n            {\n                var shortcodeTemplatesDocument = await _shortcodeTemplatesManager.LoadShortcodeTemplatesDocumentAsync();\n                var checkedContentItems = shortcodeTemplatesDocument.ShortcodeTemplates.Where(x => itemIds.Contains(x.Key));\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkedContentItems)\n                        {\n                            await _shortcodeTemplatesManager.RemoveShortcodeTemplateAsync(item.Key);\n                        }\n                        await _notifier.SuccessAsync(H[\"Shortcode templates successfully removed.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        private static bool IsValidShortcodeName(string name)\n        {\n            var scanner = new Scanner(name);\n            return scanner.ReadIdentifier(out var result) && name.Length == result.Length;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Newtonsoft.Json;\nusing OrchardCore.Admin;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Environment.Shell.Models;\nusing OrchardCore.Modules;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing OrchardCore.Tenants.Services;\nusing OrchardCore.Tenants.ViewModels;\n\nnamespace OrchardCore.Tenants.Controllers\n{\n    [Feature(\"OrchardCore.Tenants.FeatureProfiles\")]\n    [Admin]\n    public class FeatureProfilesController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly FeatureProfilesManager _featureProfilesManager;\n        private readonly ISiteService _siteService;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly dynamic New;\n\n        public FeatureProfilesController(\n            IAuthorizationService authorizationService,\n            FeatureProfilesManager featueProfilesManager,\n            ISiteService siteService,\n            INotifier notifier,\n            IShapeFactory shapeFactory,\n            IStringLocalizer<FeatureProfilesController> stringLocalizer,\n            IHtmlLocalizer<FeatureProfilesController> htmlLocalizer\n            )\n        {\n            _authorizationService = authorizationService;\n            _featureProfilesManager = featueProfilesManager;\n            _siteService = siteService;\n            _notifier = notifier;\n            New = shapeFactory;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n        }\n\n        public async Task<IActionResult> Index(ContentOptions options, PagerParameters pagerParameters)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n            var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n            var featureProfiles = featureProfilesDocument.FeatureProfiles.ToList();\n\n            if (!String.IsNullOrWhiteSpace(options.Search))\n            {\n                featureProfiles = featureProfiles.Where(x => x.Key.Contains(options.Search, StringComparison.OrdinalIgnoreCase)).ToList();\n            }\n\n            var count = featureProfiles.Count;\n\n            featureProfiles = featureProfiles.OrderBy(x => x.Key)\n                .Skip(pager.GetStartIndex())\n                .Take(pager.PageSize).ToList();\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(count);\n\n            var model = new FeatureProfilesIndexViewModel\n            {\n                FeatureProfiles = featureProfiles.Select(x => new FeatureProfileEntry { Name = x.Key, FeatureProfile = x.Value }).ToList(),\n                Options = options,\n                Pager = pagerShape\n            };\n\n            model.Options.ContentsBulkAction = new List<SelectListItem>() {\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            return View(\"Index\", model);\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public ActionResult IndexFilterPOST(FeatureProfilesIndexViewModel model)\n        {\n            return RedirectToAction(nameof(Index), new RouteValueDictionary {\n                { \"Options.Search\", model.Options.Search }\n            });\n        }\n\n        public async Task<IActionResult> Create()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            return View(new FeatureProfileViewModel());\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        public async Task<IActionResult> CreatePost(FeatureProfileViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            List<FeatureRule> featureRules = null;\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else\n                {\n                    var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n                    if (featureProfilesDocument.FeatureProfiles.ContainsKey(model.Name))\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"A profile with the same name already exists.\"]);\n                    }\n                }\n\n                if (String.IsNullOrEmpty(model.FeatureRules))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"The feature rules are mandatory.\"]);\n                }\n                else\n                {\n                    try\n                    {\n                        featureRules = JsonConvert.DeserializeObject<List<FeatureRule>>(model.FeatureRules);\n                    }\n                    catch (Exception)\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"Invalid json supplied.\"]);\n                    }\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var template = new FeatureProfile\n                {\n                    FeatureRules = featureRules\n                };\n\n                await _featureProfilesManager.UpdateFeatureProfileAsync(model.Name, template);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.GetFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(name))\n            {\n                return RedirectToAction(nameof(Create), new { name });\n            }\n\n            var featureProfile = featureProfilesDocument.FeatureProfiles[name];\n\n            var model = new FeatureProfileViewModel\n            {\n                Name = name,\n                FeatureRules = JsonConvert.SerializeObject(featureProfile.FeatureRules, Formatting.Indented)\n            };\n\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Edit(string sourceName, FeatureProfileViewModel model, string submit)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(sourceName))\n            {\n                return NotFound();\n            }\n\n            List<FeatureRule> featureRules = null;\n\n            if (ModelState.IsValid)\n            {\n                if (String.IsNullOrWhiteSpace(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"The name is mandatory.\"]);\n                }\n                else if (!String.Equals(model.Name, sourceName, StringComparison.OrdinalIgnoreCase)\n                    && featureProfilesDocument.FeatureProfiles.ContainsKey(model.Name))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.Name), S[\"A feature profile with the same name already exists.\"]);\n                }\n\n                if (String.IsNullOrEmpty(model.FeatureRules))\n                {\n                    ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"The feature rules are mandatory.\"]);\n                }\n                else\n                {\n                    try\n                    {\n                        featureRules = JsonConvert.DeserializeObject<List<FeatureRule>>(model.FeatureRules);\n                    }\n                    catch (Exception)\n                    {\n                        ModelState.AddModelError(nameof(FeatureProfileViewModel.FeatureRules), S[\"Invalid json supplied.\"]);\n                    }\n                }\n            }\n\n            if (ModelState.IsValid)\n            {\n                var featureProfile = new FeatureProfile\n                {\n                    FeatureRules = featureRules\n                };\n\n                await _featureProfilesManager.RemoveFeatureProfileAsync(sourceName);\n\n                await _featureProfilesManager.UpdateFeatureProfileAsync(model.Name, featureProfile);\n\n                if (submit == \"SaveAndContinue\")\n                {\n                    return RedirectToAction(nameof(Edit), new { name = model.Name });\n                }\n                else\n                {\n                    return RedirectToAction(nameof(Index));\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Delete(string name)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n\n            if (!featureProfilesDocument.FeatureProfiles.ContainsKey(name))\n            {\n                return NotFound();\n            }\n\n            await _featureProfilesManager.RemoveFeatureProfileAsync(name);\n\n            await _notifier.SuccessAsync(H[\"Feature profile deleted successfully.\"]);\n\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost, ActionName(\"Index\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> IndexPost(ContentOptions options, IEnumerable<string> itemIds)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageTenantFeatureProfiles))\n            {\n                return Forbid();\n            }\n\n            if (itemIds?.Count() > 0)\n            {\n                var featureProfilesDocument = await _featureProfilesManager.LoadFeatureProfilesDocumentAsync();\n                var checkItems = featureProfilesDocument.FeatureProfiles.Where(x => itemIds.Contains(x.Key));\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkItems)\n                        {\n                            await _featureProfilesManager.RemoveFeatureProfileAsync(item.Key);\n                        }\n                        await _notifier.SuccessAsync(H[\"Feature profiles successfully removed.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(Index));\n        }\n    }\n}\n"], "filenames": ["src/OrchardCore.Modules/OrchardCore.ContentFields/Controllers/LocalizationSetContentPickerAdminController.cs", "src/OrchardCore.Modules/OrchardCore.Demo/Controllers/ContentController.cs", "src/OrchardCore.Modules/OrchardCore.Features/Controllers/AdminController.cs", "src/OrchardCore.Modules/OrchardCore.Roles/Controllers/AdminController.cs", "src/OrchardCore.Modules/OrchardCore.Seo/Drivers/SeoContentDriver.cs", "src/OrchardCore.Modules/OrchardCore.Shortcodes/Controllers/AdminController.cs", "src/OrchardCore.Modules/OrchardCore.Tenants/Controllers/FeatureProfilesController.cs"], "buggy_code_start_loc": [3, 1, 114, 87, 1, 13, 43], "buggy_code_end_loc": [80, 64, 136, 87, 284, 260, 45], "fixing_code_start_loc": [4, 2, 115, 88, 2, 14, 43], "fixing_code_end_loc": [91, 89, 147, 93, 299, 264, 45], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository orchardcms/orchardcore prior to 1.3.0.", "other": {"cve": {"id": "CVE-2022-0820", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-11T00:15:07.693", "lastModified": "2022-03-18T16:44:39.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository orchardcms/orchardcore prior to 1.3.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub orchardcms/orchardcore versiones anteriores a 1.3.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:orchardcore:orchardcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.0", "matchCriteriaId": "E95FF869-BC36-4406-98FD-C4FF83D2D653"}]}]}], "references": [{"url": "https://github.com/orchardcms/orchardcore/commit/b7096af1028d8f909f63dd076d1bbd573913a92d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d00e7175-4764-4962-ae0d-a66501dda2e6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/orchardcms/orchardcore/commit/b7096af1028d8f909f63dd076d1bbd573913a92d"}}