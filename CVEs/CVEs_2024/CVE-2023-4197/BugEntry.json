{"buggy_code": ["<?php\n/* Copyright (C) 2017 Laurent Destailleur\t<eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/core/lib/website.lib.php\n *      \\ingroup    website\n *      \\brief      Library for website module\n */\n\n/**\n * Remove PHP code part from a string.\n *\n * @param \tstring\t$str\t\t\tString to clean\n * @param\tstring\t$replacewith\tString to use as replacement\n * @return \tstring\t\t\t\t\tResult string without php code\n * @see dolKeepOnlyPhpCode()\n */\nfunction dolStripPhpCode($str, $replacewith = '')\n{\n\t$str = str_replace('<?=', '<?php', $str);\n\n\t$newstr = '';\n\n\t// Split on each opening tag\n\t//$parts = explode('<?php', $str);\n\t$parts = preg_split('/'.preg_quote('<?php', '/').'/i', $str);\n\n\tif (!empty($parts)) {\n\t\t$i = 0;\n\t\tforeach ($parts as $part) {\n\t\t\tif ($i == 0) { \t// The first part is never php code\n\t\t\t\t$i++;\n\t\t\t\t$newstr .= $part;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// The second part is the php code. We split on closing tag\n\t\t\t$partlings = explode('?>', $part);\n\t\t\tif (!empty($partlings)) {\n\t\t\t\t//$phppart = $partlings[0];\n\t\t\t\t//remove content before closing tag\n\t\t\t\tif (count($partlings) > 1) {\n\t\t\t\t\t$partlings[0] = ''; // Todo why a count > 1 and not >= 1 ?\n\t\t\t\t}\n\t\t\t\t//append to out string\n\t\t\t\t//$newstr .= '<span class=\"phptag\" class=\"tooltip\" title=\"'.dol_escape_htmltag(dolGetFirstLineOfText($phppart).'...').'\">'.$replacewith.'<!-- '.$phppart.' --></span>'.implode('', $partlings);\n\t\t\t\t//$newstr .= '<span>'.$replacewith.'<!-- '.$phppart.' --></span>'.implode('', $partlings);\n\t\t\t\t$newstr .= '<span phptag>'.$replacewith.'</span>'.implode('', $partlings);\n\t\t\t\t//$newstr .= $replacewith.implode('', $partlings);\n\t\t\t}\n\t\t}\n\t}\n\treturn $newstr;\n}\n\n/**\n * Keep only PHP code part from a HTML string page.\n *\n * @param \tstring\t$str\t\t\tString to clean\n * @return \tstring\t\t\t\t\tResult string with php code only\n * @see dolStripPhpCode(), checkPHPCode()\n */\nfunction dolKeepOnlyPhpCode($str)\n{\n\t$str = str_replace('<?=', '<?php', $str);\n\n\t$newstr = '';\n\n\t// Split on each opening tag\n\t//$parts = explode('<?php', $str);\n\t$parts = preg_split('/'.preg_quote('<?php', '/').'/i', $str);\n\n\tif (!empty($parts)) {\n\t\t$i = 0;\n\t\tforeach ($parts as $part) {\n\t\t\tif ($i == 0) { \t// The first part is never php code\n\t\t\t\t$i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$newstr .= '<?php';\n\t\t\t//split on closing tag\n\t\t\t$partlings = explode('?>', $part, 2);\n\t\t\tif (!empty($partlings)) {\n\t\t\t\t$newstr .= $partlings[0].'?>';\n\t\t\t} else {\n\t\t\t\t$newstr .= $part.'?>';\n\t\t\t}\n\t\t}\n\t}\n\treturn $newstr;\n}\n\n/**\n * Convert a page content to have correct links (based on DOL_URL_ROOT) into an html content. It replaces also dynamic content with '...php...'\n * Used to ouput the page on the Preview from backoffice.\n *\n * @param\tWebsite\t\t$website\t\t\tWeb site object\n * @param\tstring\t\t$content\t\t\tContent to replace\n * @param\tint\t\t\t$removephppart\t\t0=Replace PHP sections with a PHP badge. 1=Remove completely PHP sections.\n * @param\tstring\t\t$contenttype\t\tContent type\n * @param\tint\t\t\t$containerid \t\tContenair id\n * @return\tboolean\t\t\t\t\t\t\tTrue if OK\n * @see dolWebsiteOutput() for function used to replace content in a web server context\n */\nfunction dolWebsiteReplacementOfLinks($website, $content, $removephppart = 0, $contenttype = 'html', $containerid = '')\n{\n\t$nbrep = 0;\n\n\tdol_syslog('dolWebsiteReplacementOfLinks start (contenttype='.$contenttype.\" containerid=\".$containerid.\" USEDOLIBARREDITOR=\".(defined('USEDOLIBARREDITOR') ? '1' : '').\" USEDOLIBARRSERVER=\".(defined('USEDOLIBARRSERVER') ? '1' : '').')', LOG_DEBUG);\n\t//if ($contenttype == 'html') { print $content;exit; }\n\n\t// Replace php code. Note $content may come from database and does not contain body tags.\n\t$replacewith = '...php...';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/value=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', 'value=\"'.$replacewith.'\"', $content);\n\n\t$replacewith = '\"callto=#';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/\"callto:<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = '\"mailto=#';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/\"mailto:<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = 'src=\"php';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/src=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = 'href=\"php';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/href=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t//$replacewith='<span class=\"phptag\">...php...</span>';\n\t$replacewith = '...php...';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t//$content = preg_replace('/<\\?php((?!\\?toremove>).)*\\?toremove>\\n*/ims', $replacewith, $content);\n\t/*if ($content === null) {\n\t\tif (preg_last_error() == PREG_JIT_STACKLIMIT_ERROR) $content = 'preg_replace error (when removing php tags) PREG_JIT_STACKLIMIT_ERROR';\n\t}*/\n\t$content = dolStripPhpCode($content, $replacewith);\n\t//var_dump($content);\n\n\t// Protect the link styles.css.php to any replacement that we make after.\n\t$content = str_replace('href=\"styles.css.php', 'href=\"!~!~!~styles.css.php', $content);\n\t$content = str_replace('href=\"http', 'href=\"!~!~!~http', $content);\n\t$content = str_replace('href=\"//', 'href=\"!~!~!~//', $content);\n\t$content = str_replace('src=\"viewimage.php', 'src=\"!~!~!~/viewimage.php', $content);\n\t$content = str_replace('src=\"/viewimage.php', 'src=\"!~!~!~/viewimage.php', $content);\n\t$content = str_replace('src=\"'.DOL_URL_ROOT.'/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t$content = str_replace('href=\"document.php', 'href=\"!~!~!~/document.php', $content);\n\t$content = str_replace('href=\"/document.php', 'href=\"!~!~!~/document.php', $content);\n\t$content = str_replace('href=\"'.DOL_URL_ROOT.'/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t// Replace relative link '/' with dolibarr URL\n\t$content = preg_replace('/(href=\")\\/(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageid='.$website->fk_default_home.'\\2\"', $content, -1, $nbrep);\n\t// Replace relative link /xxx.php#aaa or /xxx.php with dolibarr URL (we discard param ?...)\n\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2\\3\"', $content, -1, $nbrep);\n\t// Replace relative link /xxx.php?a=b&c=d#aaa or /xxx.php?a=b&c=d with dolibarr URL\n\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php\\?([^#\\\"<>]*)(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2&\\3\\4\"', $content, -1, $nbrep);\n\n\t// Fix relative link into medias with correct URL after the DOL_URL_ROOT: ../url(\"medias/\n\t$content = preg_replace('/url\\(([\"\\']?)\\/?medias\\//', 'url(\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t$content = preg_replace('/data-slide-bg=([\"\\']?)\\/?medias\\//', 'data-slide-bg=\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\t// <img src=\"medias/...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t// <img src=\"...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t$content = preg_replace('/(<img[^>]*src=\")\\/?medias\\//', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t// <img src=\"image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t$content = preg_replace('/(<img[^>]*src=\")\\/?([^:\\\"\\!]+)\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=\\2\"', $content, -1, $nbrep);\n\t// <img src=\"viewimage.php/modulepart=medias&file=image.png\" => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png\"\n\t$content = preg_replace('/(<img[^>]*src=\")(\\/?viewimage\\.php)/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content, -1, $nbrep);\n\n\t// action=\"newpage.php\" => action=\"dolibarr/website/index.php?website=...&pageref=newpage\n\t$content = preg_replace('/(action=\")\\/?([^:\\\"]*)(\\.php\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2\"', $content, -1, $nbrep);\n\n\t// Fix relative link /document.php with correct URL after the DOL_URL_ROOT:  ...href=\"/document.php?modulepart=\"\n\t$content = preg_replace('/(href=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t$content = preg_replace('/(src=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t// Fix relative link /viewimage.php with correct URL after the DOL_URL_ROOT:  ...href=\"/viewimage.php?modulepart=\"\n\t$content = preg_replace('/(url\\(\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t// Fix relative URL\n\t$content = str_replace('src=\"!~!~!~/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t$content = str_replace('href=\"!~!~!~/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\t// Remove the protection tag !~!~!~\n\t$content = str_replace('!~!~!~', '', $content);\n\n\tdol_syslog('dolWebsiteReplacementOfLinks end', LOG_DEBUG);\n\t//if ($contenttype == 'html') { print $content;exit; }\n\n\treturn $content;\n}\n\n/**\n * Converts smiley string into the utf8 sequence.\n * @param\tstring\t\t$content\t\t\tContent to replace\n * @return\tstring\t\t\t\t\t\t\tReplacement of all smiley strings with their utf8 code\n * @see dolWebsiteOutput()\n */\nfunction dolReplaceSmileyCodeWithUTF8($content)\n{\n\t$map = array(\n\t\t\":face_with_tears_of_joy:\" => \"\\xF0\\x9F\\x98\\x82\",\n\t\t\":grinning_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x81\",\n\t\t\":smiling_face_with_open_mouth:\" => \"\\xF0\\x9F\\x98\\x83\",\n\t\t\":smiling_face_with_open_mouth_and_cold_sweat:\" => \"\\xF0\\x9F\\x98\\x85\",\n\t\t\":smiling_face_with_open_mouth_and_tightly_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x86\",\n\t\t\":winking_face:\" => \"\\xF0\\x9F\\x98\\x89\",\n\t\t\":smiling_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x8A\",\n\t\t\":face_savouring_delicious_food:\" => \"\\xF0\\x9F\\x98\\x8B\",\n\t\t\":relieved_face:\" => \"\\xF0\\x9F\\x98\\x8C\",\n\t\t\":smiling_face_with_heart_shaped_eyes:\" => \"\\xF0\\x9F\\x98\\x8D\",\n\t\t\":smiling_face_with_sunglasses:\" => \"\\xF0\\x9F\\x98\\x8E\",\n\t\t\":smirking_face:\" => \"\\xF0\\x9F\\x98\\x8F\",\n\t\t\":neutral_face:\" => \"\\xF0\\x9F\\x98\\x90\",\n\t\t\":expressionless_face:\" => \"\\xF0\\x9F\\x98\\x91\",\n\t\t\":unamused_face:\" => \"\\xF0\\x9F\\x98\\x92\",\n\t\t\":face_with_cold_sweat:\" => \"\\xF0\\x9F\\x98\\x93\",\n\t\t\":pensive_face:\" => \"\\xF0\\x9F\\x98\\x94\",\n\t\t\":confused_face:\" => \"\\xF0\\x9F\\x98\\x95\",\n\t\t\":confounded_face:\" => \"\\xF0\\x9F\\x98\\x96\",\n\t\t\":kissing_face:\" => \"\\xF0\\x9F\\x98\\x97\",\n\t\t\":face_throwing_a_kiss:\" => \"\\xF0\\x9F\\x98\\x98\",\n\t\t\":kissing_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x99\",\n\t\t\":kissing_face_with_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x9A\",\n\t\t\":face_with_stuck_out_tongue:\" => \"\\xF0\\x9F\\x98\\x9B\",\n\t\t\":face_with_stuck_out_tongue_and_winking_eye:\" => \"\\xF0\\x9F\\x98\\x9C\",\n\t\t\":face_with_stuck_out_tongue_and_tightly_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x9D\",\n\t\t\":disappointed_face:\" => \"\\xF0\\x9F\\x98\\x9E\",\n\t\t\":worried_face:\" => \"\\xF0\\x9F\\x98\\x9F\",\n\t\t\":angry_face:\" => \"\\xF0\\x9F\\x98\\xA0\",\n\t\t\":face_with_symbols_on_mouth:\" => \"\\xF0\\x9F\\x98\\xA1\",\n\t);\n\tforeach ($map as $key => $value) {\n\t\t$content = str_replace($key, $value, $content);\n\t}\n\treturn $content;\n}\n\n\n/**\n * Render a string of an HTML content and output it.\n * Used to ouput the page when viewed from a server (Dolibarr or Apache).\n *\n * @param   string  $content    \tContent string\n * @param\tstring\t$contenttype\tContent type\n * @param\tint\t\t$containerid \tContenair id\n * @return  void\n * @see\tdolWebsiteReplacementOfLinks()  for function used to replace content in the backoffice context.\n */\nfunction dolWebsiteOutput($content, $contenttype = 'html', $containerid = '')\n{\n\tglobal $db, $langs, $conf, $user;\n\tglobal $dolibarr_main_url_root, $dolibarr_main_data_root;\n\tglobal $website;\n\tglobal $includehtmlcontentopened;\n\n\t$nbrep = 0;\n\n\tdol_syslog(\"dolWebsiteOutput start - contenttype=\".$contenttype.\" containerid=\".$containerid.\" USEDOLIBARREDITOR=\".(defined('USEDOLIBARREDITOR') ? '1' : '').\" USEDOLIBARRSERVER=\".(defined('USEDOLIBARRSERVER') ? '1' : '').' includehtmlcontentopened='.$includehtmlcontentopened);\n\n\t//print $containerid.' '.$content;\n\n\t// Define $urlwithroot\n\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\tif (defined('USEDOLIBARREDITOR')) {\t\t// REPLACEMENT OF LINKS When page called from Dolibarr editor\n\t\t// We remove the <head> part of content\n\t\tif ($contenttype == 'html') {\n\t\t\t$content = preg_replace('/<head>.*<\\/head>/ims', '', $content);\n\t\t\t$content = preg_replace('/^.*<body(\\s[^>]*)*>/ims', '', $content);\n\t\t\t$content = preg_replace('/<\\/body(\\s[^>]*)*>.*$/ims', '', $content);\n\t\t}\n\t} elseif (defined('USEDOLIBARRSERVER')) {\t// REPLACEMENT OF LINKS When page called from Dolibarr server\n\t\t$content = str_replace('<link rel=\"stylesheet\" href=\"/styles.css', '<link rel=\"stylesheet\" href=\"styles.css', $content);\n\n\t\t// Protect the link styles.css.php to any replacement that we make after.\n\t\t$content = str_replace('href=\"styles.css.php', 'href=\"!~!~!~styles.css.php', $content);\n\t\t$content = str_replace('href=\"http', 'href=\"!~!~!~http', $content);\n\t\t$content = str_replace('href=\"//', 'href=\"!~!~!~//', $content);\n\t\t$content = str_replace(array('src=\"viewimage.php', 'src=\"/viewimage.php'), 'src=\"!~!~!~/viewimage.php', $content);\n\t\t$content = str_replace('src=\"'.DOL_URL_ROOT.'/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t\t$content = str_replace(array('href=\"document.php', 'href=\"/document.php'), 'href=\"!~!~!~/document.php', $content);\n\t\t$content = str_replace('href=\"'.DOL_URL_ROOT.'/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t\t// Replace relative link / with dolibarr URL:  ...href=\"/\"...\n\t\t$content = preg_replace('/(href=\")\\/\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'\"', $content, -1, $nbrep);\n\t\t// Replace relative link /xxx.php#aaa or /xxx.php with dolibarr URL:  ...href=\"....php\" (we discard param ?...)\n\t\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\\3\"', $content, -1, $nbrep);\n\t\t// Replace relative link /xxx.php?a=b&c=d#aaa or /xxx.php?a=b&c=d with dolibarr URL\n\t\t// Warning: we may replace twice if href=\"...\" was inside an include (dolWebsiteOutput called by include and the by final page), that's why\n\t\t// at end we replace the '!~!~!~' only if we are in final parent page.\n\t\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php\\?([^#\\\"<>]*)(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2&\\3\\4\"', $content, -1, $nbrep);\n\t\t// Replace relative link without .php like /xxx#aaa or /xxx with dolibarr URL:  ...href=\"....php\"\n\t\t$content = preg_replace('/(href=\")\\/?([a-zA-Z0-9\\-_#]+)(\\\"|\\?)/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link /document.php with correct URL after the DOL_URL_ROOT:  href=\"/document.php?modulepart=\" => href=\"/dolibarr/document.php?modulepart=\"\n\t\t$content = preg_replace('/(href=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(src=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link /viewimage.php with correct URL after the DOL_URL_ROOT: href=\"/viewimage.php?modulepart=\" => href=\"/dolibarr/viewimage.php?modulepart=\"\n\t\t$content = preg_replace('/(href=\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(src=\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(url\\(\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link into medias with correct URL after the DOL_URL_ROOT: ../url(\"medias/\n\t\t$content = preg_replace('/url\\(([\"\\']?)\\/?medias\\//', 'url(\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t\t$content = preg_replace('/data-slide-bg=([\"\\']?)\\/?medias\\//', 'data-slide-bg=\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\t\t// <img src=\"medias/...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t// <img src=\"...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?medias\\//', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t\t// <img src=\"image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?([^:\\\"\\!]+)\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=\\2\"', $content, -1, $nbrep);\n\t\t// <img src=\"viewimage.php/modulepart=medias&file=image.png\" => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png\"\n\t\t$content = preg_replace('/(<img[^>]*src=\")(\\/?viewimage\\.php)/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content, -1, $nbrep);\n\n\t\t// action=\"newpage.php\" => action=\"dolibarr/website/index.php?website=...&pageref=newpage\n\t\t$content = preg_replace('/(action=\")\\/?([^:\\\"]*)(\\.php\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\"', $content, -1, $nbrep);\n\n\t\t// Fix relative URL\n\t\t$content = str_replace('src=\"!~!~!~/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t\t$content = str_replace('href=\"!~!~!~/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t\t// Remove the protection tag !~!~!~, but only if this is the parent page and not an include\n\t\tif (empty($includehtmlcontentopened)) {\n\t\t\t$content = str_replace('!~!~!~', '', $content);\n\t\t}\n\t} else // REPLACEMENT OF LINKS When page called from virtual host web server\n\t{\n\t\t$symlinktomediaexists = 1;\n\t\tif ($website->virtualhost) {\n\t\t\t$content = preg_replace('/^(<link[^>]*rel=\"canonical\" href=\")\\//m', '\\1'.$website->virtualhost.'/', $content, -1, $nbrep);\n\t\t}\n\t\t//print 'rrrrrrrrr'.$website->virtualhost.$content;\n\n\n\t\t// Make a change into HTML code to allow to include images from medias directory correct with direct link for virtual server\n\t\t// <img alt=\"\" src=\"/dolibarr_dev/htdocs/viewimage.php?modulepart=medias&amp;entity=1&amp;file=image/ldestailleur_166x166.jpg\" style=\"height:166px; width:166px\" />\n\t\t// become\n\t\t// <img alt=\"\" src=\"'.$urlwithroot.'/medias/image/ldestailleur_166x166.jpg\" style=\"height:166px; width:166px\" />\n\t\tif (!$symlinktomediaexists) {\n\t\t\t// <img src=\"image.png... => <img src=\"medias/image.png...\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?image\\//', '\\1/wrapper.php?modulepart=medias&file=medias/image/', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)\\/?image\\//', '\\1/wrapper.php?modulepart=medias&file=medias/image/', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<script[^>]*src=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)modulepart=medias([^\\)]*)file=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)hashp=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2hashp\\3\\4', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=mycompany([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=mycompany\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t// If some links to documents or viewimage remains, we replace with wrapper\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?viewimage\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")\\/?documents\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t} else {\n\t\t\t// <img src=\"image.png... => <img src=\"medias/image.png...\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?image\\//', '\\1/medias/image/', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)\\/?image\\//', '\\1/medias/image/', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<script[^>]*src=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)modulepart=medias([^\\)]*)file=([^\\)]*)([\"\\']?\\))/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)hashp=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=mycompany([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=mycompany\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t// If some links to documents or viewimage remains, we replace with wrapper\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?viewimage\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")\\/?document\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t}\n\t}\n\n\tif (!defined('USEDOLIBARREDITOR')) {\n\t\t$content = str_replace(' contenteditable=\"true\"', ' contenteditable=\"false\"', $content);\n\t}\n\n\tif (!empty($conf->global->WEBSITE_ADD_CSS_TO_BODY)) {\n\t\t$content = str_replace('<body id=\"bodywebsite\" class=\"bodywebsite', '<body id=\"bodywebsite\" class=\"bodywebsite '.$conf->global->WEBSITE_ADD_CSS_TO_BODY, $content);\n\t}\n\n\t$content = dolReplaceSmileyCodeWithUTF8($content);\n\n\tdol_syslog(\"dolWebsiteOutput end\");\n\n\tprint $content;\n}\n\n/**\n * Increase the website counter of page access.\n *\n * @param   int\t\t$websiteid\t\t\tID of website\n * @param\tstring\t$websitepagetype\tType of page ('blogpost', 'page', ...)\n * @param\tint\t\t$websitepageid\t\tID of page\n * @return  int\t\t\t\t\t\t\t<0 if KO, >0 if OK\n */\nfunction dolWebsiteIncrementCounter($websiteid, $websitepagetype, $websitepageid)\n{\n\tif (!getDolGlobalInt('WEBSITE_PERF_DISABLE_COUNTERS')) {\n\t\t//dol_syslog(\"dolWebsiteIncrementCounter websiteid=\".$websiteid.\" websitepagetype=\".$websitepagetype.\" websitepageid=\".$websitepageid);\n\t\tif (in_array($websitepagetype, array('blogpost', 'page'))) {\n\t\t\tglobal $db;\n\n\t\t\t$tmpnow = dol_getdate(dol_now('gmt'), true, 'gmt');\n\n\t\t\t$sql = \"UPDATE \".$db->prefix().\"website SET \";\n\t\t\t$sql .= \" pageviews_total = pageviews_total + 1,\";\n\t\t\t$sql .= \" pageviews_month = pageviews_month + 1,\";\n\t\t\t// if last access was done during previous month, we save pageview_month into pageviews_previous_month\n\t\t\t$sql .= \" pageviews_previous_month = \".$db->ifsql(\"lastaccess < '\".$db->idate(dol_mktime(0, 0, 0, $tmpnow['mon'], 1, $tmpnow['year'], 'gmt', 0), 'gmt').\"'\", 'pageviews_month', 'pageviews_previous_month').\",\";\n\t\t\t$sql .= \" lastaccess = '\".$db->idate(dol_now('gmt'), 'gmt').\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".((int) $websiteid);\n\t\t\t$resql = $db->query($sql);\n\t\t\tif (! $resql) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n\n/**\n * Format img tags to introduce viewimage on img src.\n *\n * @param   string  $content    Content string\n * @return  void\n * @see\tdolWebsiteOutput()\n */\n/*\nfunction dolWebsiteSaveContent($content)\n{\n\tglobal $db, $langs, $conf, $user;\n\tglobal $dolibarr_main_url_root, $dolibarr_main_data_root;\n\n\t//dol_syslog(\"dolWebsiteSaveContent start (mode=\".(defined('USEDOLIBARRSERVER')?'USEDOLIBARRSERVER':'').')');\n\n\t// Define $urlwithroot\n\t$urlwithouturlroot=preg_replace('/'.preg_quote(DOL_URL_ROOT,'/').'$/i','',trim($dolibarr_main_url_root));\n\t$urlwithroot=$urlwithouturlroot.DOL_URL_ROOT;\t\t// This is to use external domain name found into config file\n\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t//$content = preg_replace('/(<img.*src=\")(?!(http|'.preg_quote(DOL_URL_ROOT,'/').'\\/viewimage))/', '\\1'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\treturn $content;\n}\n*/\n\n\n/**\n * Make a redirect to another container.\n *\n * @param \tstring\t$containerref\t\tRef of container to redirect to (Example: 'mypage' or 'mypage.php').\n * @param \tstring\t$containeraliasalt\tRef of alternative aliases to redirect to.\n * @param \tint\t\t$containerid\t\tId of container.\n * @param\tint\t\t$permanent\t\t\t0=Use temporary redirect 302, 1=Use permanent redirect 301\n * @return  void\n */\nfunction redirectToContainer($containerref, $containeraliasalt = '', $containerid = 0, $permanent = 0)\n{\n\tglobal $db, $website;\n\n\t$newurl = '';\n\t$result = 0;\n\n\t// We make redirect using the alternative alias, we must find the real $containerref\n\tif ($containeraliasalt) {\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t$result = $tmpwebsitepage->fetch(0, $website->id, '', $containeraliasalt);\n\t\tif ($result > 0) {\n\t\t\t$containerref = $tmpwebsitepage->pageurl;\n\t\t} else {\n\t\t\tprint \"Error, page contains a redirect to the alternative alias '\".$containeraliasalt.\"' that does not exists in web site (\".$website->id.\" / \".$website->ref.\")\";\n\t\t\texit;\n\t\t}\n\t}\n\n\tif (defined('USEDOLIBARREDITOR')) {\n\t\t/*print '<div class=\"margintoponly marginleftonly\">';\n\t\tprint \"This page contains dynamic code that make a redirect to '\".$containerref.\"' in your current context. Redirect has been canceled as it is not supported in edition mode.\";\n\t\tprint '</div>';*/\n\t\t$text = \"This page contains dynamic code that make a redirect to '\".$containerref.\"' in your current context. Redirect has been canceled as it is not supported in edition mode.\";\n\t\tsetEventMessages($text, null, 'warnings', 'WEBSITEREDIRECTDISABLED'.$containerref);\n\t\treturn;\n\t}\n\n\tif (defined('USEDOLIBARRSERVER')) {\t// When page called from Dolibarr server\n\t\t// Check new container exists\n\t\tif (!$containeraliasalt) {\t// If containeraliasalt set, we already did the test\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\t\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t\t$result = $tmpwebsitepage->fetch(0, $website->id, $containerref);\n\t\t\tunset($tmpwebsitepage);\n\t\t}\n\t\tif ($result > 0) {\n\t\t\t$currenturi = $_SERVER[\"REQUEST_URI\"];\n\t\t\t$regtmp = array();\n\t\t\tif (preg_match('/&pageref=([^&]+)/', $currenturi, $regtmp)) {\n\t\t\t\tif ($regtmp[0] == $containerref) {\n\t\t\t\t\tprint \"Error, page with uri '.$currenturi.' try a redirect to the same alias page '\".$containerref.\"' in web site '\".$website->ref.\"'\";\n\t\t\t\t\texit;\n\t\t\t\t} else {\n\t\t\t\t\t$newurl = preg_replace('/&pageref=([^&]+)/', '&pageref='.$containerref, $currenturi);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$newurl = $currenturi.'&pageref='.urlencode($containerref);\n\t\t\t}\n\t\t}\n\t} else // When page called from virtual host server\n\t{\n\t\t$newurl = '/'.$containerref.'.php';\n\t}\n\n\tif ($newurl) {\n\t\tif ($permanent) {\n\t\t\theader(\"Status: 301 Moved Permanently\", false, 301);\n\t\t}\n\t\theader(\"Location: \".$newurl.(empty($_SERVER[\"QUERY_STRING\"]) ? '' : '?'.$_SERVER[\"QUERY_STRING\"]));\n\t\texit;\n\t} else {\n\t\tprint \"Error, page contains a redirect to the alias page '\".$containerref.\"' that does not exists in web site (\".$website->id.\" / \".$website->ref.\")\";\n\t\texit;\n\t}\n}\n\n\n/**\n * Clean an HTML page to report only content, so we can include it into another page.\n * It outputs content of file sanitized from html and body part.\n *\n * @param \tstring\t$containerref\t\tPath to file to include (must be a page from website root. Example: 'mypage.php' means 'mywebsite/mypage.php')\n * @return  void\n */\nfunction includeContainer($containerref)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running included containers.\n\tglobal $includehtmlcontentopened;\n\tglobal $websitekey, $websitepagefile;\n\n\t$MAXLEVEL = 20;\n\n\tif (!preg_match('/\\.php$/i', $containerref)) {\n\t\t$containerref .= '.php';\n\t}\n\n\t$fullpathfile = DOL_DATA_ROOT.($conf->entity > 1 ? '/'.$conf->entity : '').'/website/'.$websitekey.'/'.$containerref;\n\n\tif (empty($includehtmlcontentopened)) {\n\t\t$includehtmlcontentopened = 0;\n\t}\n\t$includehtmlcontentopened++;\n\tif ($includehtmlcontentopened > $MAXLEVEL) {\n\t\tprint 'ERROR: RECURSIVE CONTENT LEVEL. Depth of recursive call is more than the limit of '.((int) $MAXLEVEL).\".\\n\";\n\t\treturn;\n\t}\n\n\t//dol_syslog(\"Include container \".$containerref.' includehtmlcontentopened='.$includehtmlcontentopened);\n\n\t// file_get_contents is not possible. We must execute code with include\n\t//$content = file_get_contents($fullpathfile);\n\t//print preg_replace(array('/^.*<body[^>]*>/ims','/<\\/body>.*$/ims'), array('', ''), $content);*/\n\n\tob_start();\n\t$res = include $fullpathfile; // Include because we want to execute code content\n\t$tmpoutput = ob_get_contents();\n\tob_end_clean();\n\n\tprint \"\\n\".'<!-- include '.$websitekey.'/'.$containerref.(is_object($websitepage) ? ' parent id='.$websitepage->id : '').' level = '.$includehtmlcontentopened.' -->'.\"\\n\";\n\tprint preg_replace(array('/^.*<body[^>]*>/ims', '/<\\/body>.*$/ims'), array('', ''), $tmpoutput);\n\n\tif (!$res) {\n\t\tprint 'ERROR: FAILED TO INCLUDE PAGE '.$containerref.\".\\n\";\n\t}\n\n\t$includehtmlcontentopened--;\n}\n\n/**\n * Return HTML content to add structured data for an article, news or Blog Post. Use the json-ld format.\n * Example:\n * <?php getStructureData('blogpost'); ?>\n * <?php getStructureData('software', array('name'=>'Name', 'os'=>'Windows', 'price'=>10)); ?>\n *\n * @param \tstring\t\t$type\t\t\t\t'blogpost', 'product', 'software', 'organization', 'qa',  ...\n * @param\tarray\t\t$data\t\t\t\tArray of data parameters for structured data\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getStructuredData($type, $data = array())\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs, $pagelangs; // Very important. Required to have var available when running inluded containers.\n\n\t$type = strtolower($type);\n\n\tif ($type == 'software') {\n\t\t$ret = '<!-- Add structured data for entry in a software annuary -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\"@context\": \"https://schema.org\",\n\t\t\t\"@type\": \"SoftwareApplication\",\n\t\t\t\"name\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\"operatingSystem\": \"'.dol_escape_json($data['os']).'\",\n\t\t\t\"applicationCategory\": \"https://schema.org/'.dol_escape_json($data['applicationCategory']).'\",';\n\t\tif (!empty($data['ratingcount'])) {\n\t\t\t$ret .= '\n\t\t\t\t\"aggregateRating\": {\n\t\t\t\t\t\"@type\": \"AggregateRating\",\n\t\t\t\t\t\"ratingValue\": \"'.dol_escape_json($data['ratingvalue']).'\",\n\t\t\t\t\t\"ratingCount\": \"'.dol_escape_json($data['ratingcount']).'\"\n\t\t\t\t},';\n\t\t}\n\t\t$ret .= '\n\t\t\t\"offers\": {\n\t\t\t\t\"@type\": \"Offer\",\n\t\t\t\t\"price\": \"'.dol_escape_json($data['price']).'\",\n\t\t\t\t\"priceCurrency\": \"'.dol_escape_json($data['currency'] ? $data['currency'] : $conf->currency).'\"\n\t\t\t}\n\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'organization') {\n\t\t$companyname = $mysoc->name;\n\t\t$url = $mysoc->url;\n\n\t\t$ret = '<!-- Add structured data for organization -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\"@context\": \"https://schema.org\",\n\t\t\t\"@type\": \"Organization\",\n\t\t\t\"name\": \"'.dol_escape_json($data['name'] ? $data['name'] : $companyname).'\",\n\t\t\t\"url\": \"'.dol_escape_json($data['url'] ? $data['url'] : $url).'\",\n\t\t\t\"logo\": \"'.($data['logo'] ? dol_escape_json($data['logo']) : '/wrapper.php?modulepart=mycompany&file=logos%2F'.urlencode($mysoc->logo)).'\",\n\t\t\t\"contactPoint\": {\n\t\t\t\t\"@type\": \"ContactPoint\",\n\t\t\t\t\"contactType\": \"Contact\",\n\t\t\t\t\"email\": \"'.dol_escape_json($data['email'] ? $data['email'] : $mysoc->email).'\"\n\t\t\t}'.\"\\n\";\n\t\tif (is_array($mysoc->socialnetworks) && count($mysoc->socialnetworks) > 0) {\n\t\t\t$ret .= \",\\n\";\n\t\t\t$ret .= '\"sameAs\": [';\n\t\t\t$i = 0;\n\t\t\tforeach ($mysoc->socialnetworks as $key => $value) {\n\t\t\t\tif ($key == 'linkedin') {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/company/'.dol_escape_json($value).'\"';\n\t\t\t\t} elseif ($key == 'youtube') {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/user/'.dol_escape_json($value).'\"';\n\t\t\t\t} else {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/'.dol_escape_json($value).'\"';\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t\tif ($i < count($mysoc->socialnetworks)) {\n\t\t\t\t\t$ret .= ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$ret .= ']'.\"\\n\";\n\t\t}\n\t\t$ret .= '}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'blogpost') {\n\t\tif (!empty($websitepage->author_alias)) {\n\t\t\t//include_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\n\t\t\t//$tmpuser = new User($db);\n\t\t\t//$restmpuser = $tmpuser->fetch($websitepage->fk_user_creat);\n\n\t\t\t$pageurl = $websitepage->pageurl;\n\t\t\t$title = $websitepage->title;\n\t\t\t$image = $websitepage->image;\n\t\t\t$companyname = $mysoc->name;\n\t\t\t$description = $websitepage->description;\n\n\t\t\t$pageurl = str_replace('__WEBSITE_KEY__', $website->ref, $pageurl);\n\t\t\t$title = str_replace('__WEBSITE_KEY__', $website->ref, $title);\n\t\t\t$image = '/medias'.(preg_match('/^\\//', $image) ? '' : '/').str_replace('__WEBSITE_KEY__', $website->ref, $image);\n\t\t\t$companyname = str_replace('__WEBSITE_KEY__', $website->ref, $companyname);\n\t\t\t$description = str_replace('__WEBSITE_KEY__', $website->ref, $description);\n\n\t\t\t$ret = '<!-- Add structured data for blog post -->'.\"\\n\";\n\t\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t\t$ret .= '{\n\t\t\t\t  \"@context\": \"https://schema.org\",\n\t\t\t\t  \"@type\": \"NewsArticle\",\n\t\t\t\t  \"mainEntityOfPage\": {\n\t\t\t\t    \"@type\": \"WebPage\",\n\t\t\t\t    \"@id\": \"'.dol_escape_json($pageurl).'\"\n\t\t\t\t  },\n\t\t\t\t  \"headline\": \"'.dol_escape_json($title).'\",\n\t\t\t\t  \"image\": [\n\t\t\t\t    \"'.dol_escape_json($image).'\"\n\t\t\t\t   ],\n\t\t\t\t  \"dateCreated\": \"'.dol_print_date($websitepage->date_creation, 'dayhourrfc').'\",\n\t\t\t\t  \"datePublished\": \"'.dol_print_date($websitepage->date_creation, 'dayhourrfc').'\",\n\t\t\t\t  \"dateModified\": \"'.dol_print_date($websitepage->date_modification, 'dayhourrfc').'\",\n\t\t\t\t  \"author\": {\n\t\t\t\t    \"@type\": \"Person\",\n\t\t\t\t    \"name\": \"'.dol_escape_json($websitepage->author_alias).'\"\n\t\t\t\t  },\n\t\t\t\t  \"publisher\": {\n\t\t\t\t     \"@type\": \"Organization\",\n\t\t\t\t     \"name\": \"'.dol_escape_json($companyname).'\",\n\t\t\t\t     \"logo\": {\n\t\t\t\t        \"@type\": \"ImageObject\",\n\t\t\t\t        \"url\": \"/wrapper.php?modulepart=mycompany&file=logos%2F'.urlencode($mysoc->logo).'\"\n\t\t\t\t     }\n\t\t\t\t   },'.\"\\n\";\n\t\t\tif ($websitepage->keywords) {\n\t\t\t\t$ret .= '\"keywords\": [';\n\t\t\t\t$i = 0;\n\t\t\t\t$arrayofkeywords = explode(',', $websitepage->keywords);\n\t\t\t\tforeach ($arrayofkeywords as $keyword) {\n\t\t\t\t\t$ret .= '\"'.dol_escape_json($keyword).'\"';\n\t\t\t\t\t$i++;\n\t\t\t\t\tif ($i < count($arrayofkeywords)) {\n\t\t\t\t\t\t$ret .= ', ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$ret .= '],'.\"\\n\";\n\t\t\t}\n\t\t\t$ret .= '\"description\": \"'.dol_escape_json($description).'\"';\n\t\t\t$ret .= \"\\n\".'}'.\"\\n\";\n\t\t\t$ret .= '</script>'.\"\\n\";\n\t\t} else {\n\t\t\t$ret = '<!-- no structured data inserted inline inside blogpost because no author_alias defined -->'.\"\\n\";\n\t\t}\n\t} elseif ($type == 'product') {\n\t\t$ret = '<!-- Add structured data for product -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\t\"@context\": \"https://schema.org/\",\n\t\t\t\t\"@type\": \"Product\",\n\t\t\t\t\"name\": \"'.dol_escape_json($data['label']).'\",\n\t\t\t\t\"image\": [\n\t\t\t\t\t\"'.dol_escape_json($data['image']).'\",\n\t\t\t\t],\n\t\t\t\t\"description\": \"'.dol_escape_json($data['description']).'\",\n\t\t\t\t\"sku\": \"'.dol_escape_json($data['ref']).'\",\n\t\t\t\t\"brand\": {\n\t\t\t\t\t\"@type\": \"Thing\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['brand']).'\"\n\t\t\t\t},\n\t\t\t\t\"author\": {\n\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"offers\": {\n\t\t\t\t\t\"@type\": \"Offer\",\n\t\t\t\t\t\"url\": \"https://example.com/anvil\",\n\t\t\t\t\t\"priceCurrency\": \"'.dol_escape_json($data['currency'] ? $data['currency'] : $conf->currency).'\",\n\t\t\t\t\t\"price\": \"'.dol_escape_json($data['price']).'\",\n\t\t\t\t\t\"itemCondition\": \"https://schema.org/UsedCondition\",\n\t\t\t\t\t\"availability\": \"https://schema.org/InStock\",\n\t\t\t\t\t\"seller\": {\n\t\t\t\t\t\t\"@type\": \"Organization\",\n\t\t\t\t\t\t\"name\": \"'.dol_escape_json($mysoc->name).'\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'qa') {\n\t\t$ret = '<!-- Add structured data for QA -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\t\"@context\": \"https://schema.org/\",\n\t\t\t\t\"@type\": \"QAPage\",\n\t\t\t\t\"mainEntity\": {\n\t\t\t\t\t\"@type\": \"Question\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\t\t\"text\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\t\t\"answerCount\": 1,\n\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t\t}\n\t\t\t\t\t\"acceptedAnswer\": {\n\t\t\t\t\t\t\"@type\": \"Answer\",\n\t\t\t\t\t\t\"text\": \"'.dol_escape_json(dol_string_nohtmltag(dolStripPhpCode($data['description']))).'\",\n\t\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t}\n\treturn $ret;\n}\n\n/**\n * Return HTML content to add as header card for an article, news or Blog Post or home page.\n *\n * @param\tarray\t$params\t\t\t\t\tArray of parameters\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getSocialNetworkHeaderCards($params = null)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$out = '';\n\n\tif ($website->virtualhost) {\n\t\t$pageurl = $websitepage->pageurl;\n\t\t$title = $websitepage->title;\n\t\t$image = $websitepage->image;\n\t\t$companyname = $mysoc->name;\n\t\t$description = $websitepage->description;\n\n\t\t$pageurl = str_replace('__WEBSITE_KEY__', $website->ref, $pageurl);\n\t\t$title = str_replace('__WEBSITE_KEY__', $website->ref, $title);\n\t\t$image = '/medias'.(preg_match('/^\\//', $image) ? '' : '/').str_replace('__WEBSITE_KEY__', $website->ref, $image);\n\t\t$companyname = str_replace('__WEBSITE_KEY__', $website->ref, $companyname);\n\t\t$description = str_replace('__WEBSITE_KEY__', $website->ref, $description);\n\n\t\t$shortlangcode = '';\n\t\tif ($websitepage->lang) {\n\t\t\t$shortlangcode = substr($websitepage->lang, 0, 2); // en_US or en-US -> en\n\t\t}\n\t\tif (empty($shortlangcode)) {\n\t\t\t$shortlangcode = substr($website->lang, 0, 2); // en_US or en-US -> en\n\t\t}\n\n\t\t$fullurl = $website->virtualhost.'/'.$websitepage->pageurl.'.php';\n\t\t$canonicalurl = $website->virtualhost.(($websitepage->id == $website->fk_default_home) ? '/' : (($shortlangcode != substr($website->lang, 0, 2) ? '/'.$shortlangcode : '').'/'.$websitepage->pageurl.'.php'));\n\t\t$hashtags = trim(join(' #', array_map('trim', explode(',', $websitepage->keywords))));\n\n\t\t// Open Graph\n\t\t$out .= '<meta name=\"og:type\" content=\"website\">'.\"\\n\";\t// TODO If blogpost, use type article\n\t\t$out .= '<meta name=\"og:title\" content=\"'.$websitepage->title.'\">'.\"\\n\";\n\t\tif ($websitepage->image) {\n\t\t\t$out .= '<meta name=\"og:image\" content=\"'.$website->virtualhost.$image.'\">'.\"\\n\";\n\t\t}\n\t\t$out .= '<meta name=\"og:url\" content=\"'.$canonicalurl.'\">'.\"\\n\";\n\n\t\t// Twitter\n\t\t$out .= '<meta name=\"twitter:card\" content=\"summary\">'.\"\\n\";\n\t\tif (!empty($params) && !empty($params['twitter_account'])) {\n\t\t\t$out .= '<meta name=\"twitter:site\" content=\"@'.$params['twitter_account'].'\">'.\"\\n\";\n\t\t\t$out .= '<meta name=\"twitter:creator\" content=\"@'.$params['twitter_account'].'\">'.\"\\n\";\n\t\t}\n\t\t$out .= '<meta name=\"twitter:title\" content=\"'.$websitepage->title.'\">'.\"\\n\";\n\t\tif ($websitepage->description) {\n\t\t\t$out .= '<meta name=\"twitter:description\" content=\"'.$websitepage->description.'\">'.\"\\n\";\n\t\t}\n\t\tif ($websitepage->image) {\n\t\t\t$out .= '<meta name=\"twitter:image\" content=\"'.$website->virtualhost.$image.'\">'.\"\\n\";\n\t\t}\n\t\t//$out .= '<meta name=\"twitter:domain\" content=\"'.getDomainFromURL($website->virtualhost, 1).'\">';\n\t\t/*\n\t\t $out .= '<meta name=\"twitter:app:name:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:name:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:name:googleplay\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:googleplay\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:googleplay\" content=\"\">';\n\t\t */\n\t}\n\n\treturn $out;\n}\n\n/**\n * Return HTML content to add structured data for an article, news or Blog Post.\n *\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getSocialNetworkSharingLinks()\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$out = '<!-- section for social network sharing of page -->'.\"\\n\";\n\n\tif ($website->virtualhost) {\n\t\t$fullurl = $website->virtualhost.'/'.$websitepage->pageurl.'.php';\n\t\t$hashtags = trim(join(' #', array_map('trim', explode(',', $websitepage->keywords))));\n\n\t\t$out .= '<div class=\"dol-social-share\">'.\"\\n\";\n\n\t\t// Twitter\n\t\t$out .= '<div class=\"dol-social-share-tw\">'.\"\\n\";\n\t\t$out .= '<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"'.$fullurl.'\" data-text=\"'.dol_escape_htmltag($websitepage->description).'\" data-lang=\"'.$websitepage->lang.'\" data-size=\"small\" data-related=\"\" data-hashtags=\"'.preg_replace('/^#/', '', $hashtags).'\" data-count=\"horizontal\">Tweet</a>';\n\t\t$out .= '<script nonce=\"'.getNonce().'\">!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\\'http\\':\\'https\\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\\'://platform.twitter.com/widgets.js\\';fjs.parentNode.insertBefore(js,fjs);}}(document, \\'script\\', \\'twitter-wjs\\');</script>';\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t// Reddit\n\t\t$out .= '<div class=\"dol-social-share-reddit\">'.\"\\n\";\n\t\t$out .= '<a href=\"https://www.reddit.com/submit\" target=\"_blank\" rel=\"noopener noreferrer external\" onclick=\"window.location = \\'https://www.reddit.com/submit?url='.$fullurl.'\\'; return false\">';\n\t\t$out .= '<span class=\"dol-social-share-reddit-span\">Reddit</span>';\n\t\t$out .= '</a>';\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t// Facebook\n\t\t$out .= '<div class=\"dol-social-share-fbl\">'.\"\\n\";\n\t\t$out .= '<div id=\"fb-root\"></div>'.\"\\n\";\n\t\t$out .= '<script nonce=\"'.getNonce().'\">(function(d, s, id) {\n\t\t\t\t  var js, fjs = d.getElementsByTagName(s)[0];\n\t\t\t\t  if (d.getElementById(id)) return;\n\t\t\t\t  js = d.createElement(s); js.id = id;\n\t\t\t\t  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.0&amp;appId=dolibarr.org\";\n\t\t\t\t  fjs.parentNode.insertBefore(js, fjs);\n\t\t\t\t}(document, \\'script\\', \\'facebook-jssdk\\'));</script>\n\t\t\t\t        <fb:like\n\t\t\t\t        href=\"'.$fullurl.'\"\n\t\t\t\t        layout=\"button_count\"\n\t\t\t\t        show_faces=\"false\"\n\t\t\t\t        width=\"90\"\n\t\t\t\t        colorscheme=\"light\"\n\t\t\t\t        share=\"1\"\n\t\t\t\t        action=\"like\" ></fb:like>'.\"\\n\";\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t$out .= \"\\n</div>\\n\";\n\t} else {\n\t\t$out .= '<!-- virtual host not defined in CMS. No way to add sharing buttons -->'.\"\\n\";\n\t}\n\t$out .= '<!-- section end for social network sharing of page -->'.\"\\n\";\n\n\treturn $out;\n}\n\n/**\n * Return list of containers object that match a criteria.\n * WARNING: This function can be used by websites.\n *\n * @param \tstring\t\t$type\t\t\t\tType of container to search into (Example: '', 'page', 'blogpost', 'page,blogpost', ...)\n * @param \tstring\t\t$algo\t\t\t\tAlgorithm used for search (Example: 'meta' is searching into meta information like title and description, 'content', 'sitefiles', or any combination 'meta,content,...')\n * @param\tstring\t\t$searchstring\t\tSearch string\n * @param\tint\t\t\t$max\t\t\t\tMax number of answers\n * @param\tstring\t\t$sortfield\t\t\tSort Fields\n * @param\tstring\t\t$sortorder\t\t\tSort order ('DESC' or 'ASC')\n * @param\tstring\t\t$langcode\t\t\tLanguage code ('' or 'en', 'fr', 'es', ...)\n * @param\tarray\t\t$otherfilters\t\tOther filters\n * @param\tint\t\t\t$status\t\t\t\t0 or 1, or -1 for both\n * @return  array\t\t\t\t\t\t\tArray with results of search\n */\nfunction getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $sortfield = 'date_creation', $sortorder = 'DESC', $langcode = '', $otherfilters = 'null', $status = 1)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$error = 0;\n\t$arrayresult = array('code'=>'', 'list'=>array());\n\n\tif (!is_object($weblangs)) {\n\t\t$weblangs = $langs;\n\t}\n\n\tif (empty($searchstring) && empty($type) && empty($langcode) && empty($otherfilters)) {\n\t\t$error++;\n\t\t$arrayresult['code'] = 'KO';\n\t\t$arrayresult['message'] = $weblangs->trans(\"EmptySearchString\");\n\t} elseif ($searchstring && dol_strlen($searchstring) < 2) {\n\t\t$weblangs->load(\"errors\");\n\t\t$error++;\n\t\t$arrayresult['code'] = 'KO';\n\t\t$arrayresult['message'] = $weblangs->trans(\"ErrorSearchCriteriaTooSmall\");\n\t} else {\n\t\t$tmparrayoftype = explode(',', $type);\n\t\t/*foreach ($tmparrayoftype as $tmptype) {\n\t\t\tif (!in_array($tmptype, array('', 'page', 'blogpost'))) {\n\t\t\t\t$error++;\n\t\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t\t$arrayresult['message'] = 'Bad value for parameter type';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}*/\n\t}\n\n\t$searchdone = 0;\n\t$found = 0;\n\n\tif (!$error && (empty($max) || ($found < $max)) && (preg_match('/meta/', $algo) || preg_match('/content/', $algo))) {\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\n\t\t$sql = 'SELECT wp.rowid FROM '.MAIN_DB_PREFIX.'website_page as wp';\n\t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n\t\t\t$sql .= ', '.MAIN_DB_PREFIX.'categorie_website_page as cwp';\n\t\t}\n\t\t$sql .= \" WHERE wp.fk_website = \".((int) $website->id);\n\t\tif ($status >= 0) {\n\t\t\t$sql .= \" AND wp.status = \".((int) $status);\n\t\t}\n\t\tif ($langcode) {\n\t\t\t$sql .= \" AND wp.lang = '\".$db->escape($langcode).\"'\";\n\t\t}\n\t\tif ($type) {\n\t\t\t$tmparrayoftype = explode(',', $type);\n\t\t\t$typestring = '';\n\t\t\tforeach ($tmparrayoftype as $tmptype) {\n\t\t\t\t$typestring .= ($typestring ? \", \" : \"\").\"'\".$db->escape(trim($tmptype)).\"'\";\n\t\t\t}\n\t\t\t$sql .= \" AND wp.type_container IN (\".$db->sanitize($typestring, 1).\")\";\n\t\t}\n\t\t$sql .= \" AND (\";\n\t\t$searchalgo = '';\n\t\tif (preg_match('/meta/', $algo)) {\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.title LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%' OR wp.description LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.keywords LIKE '\".$db->escape($db->escapeforlike($searchstring)).\",%' OR wp.keywords LIKE '% \".$db->escape($db->escapeforlike($searchstring)).\"%'\"; // TODO Use a better way to scan keywords\n\t\t}\n\t\tif (preg_match('/content/', $algo)) {\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.content LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n\t\t}\n\t\t$sql .= $searchalgo;\n\t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n\t\t\t$sql .= ' AND cwp.fk_website_page = wp.rowid AND cwp.fk_categorie = '.((int) $otherfilters['category']);\n\t\t}\n\t\t$sql .= \")\";\n\t\t$sql .= $db->order($sortfield, $sortorder);\n\t\t$sql .= $db->plimit($max);\n\t\t//print $sql;\n\n\t\t$resql = $db->query($sql);\n\n\t\tif ($resql) {\n\t\t\t$i = 0;\n\t\t\twhile (($obj = $db->fetch_object($resql)) && ($i < $max || $max == 0)) {\n\t\t\t\tif ($obj->rowid > 0) {\n\t\t\t\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t\t\t\t$tmpwebsitepage->fetch($obj->rowid);\n\t\t\t\t\tif ($tmpwebsitepage->id > 0) {\n\t\t\t\t\t\t$arrayresult['list'][$obj->rowid] = $tmpwebsitepage;\n\t\t\t\t\t}\n\t\t\t\t\t$found++;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$arrayresult['code'] = $db->lasterrno();\n\t\t\t$arrayresult['message'] = $db->lasterror();\n\t\t}\n\n\t\t$searchdone = 1;\n\t}\n\n\tif (!$error && (empty($max) || ($found < $max)) && (preg_match('/sitefiles/', $algo))) {\n\t\tglobal $dolibarr_main_data_root;\n\n\t\t$pathofwebsite = $dolibarr_main_data_root.($conf->entity > 1 ? '/'.$conf->entity : '').'/website/'.$website->ref;\n\t\t$filehtmlheader = $pathofwebsite.'/htmlheader.html';\n\t\t$filecss = $pathofwebsite.'/styles.css.php';\n\t\t$filejs = $pathofwebsite.'/javascript.js.php';\n\t\t$filerobot = $pathofwebsite.'/robots.txt';\n\t\t$filehtaccess = $pathofwebsite.'/.htaccess';\n\t\t$filemanifestjson = $pathofwebsite.'/manifest.json.php';\n\t\t$filereadme = $pathofwebsite.'/README.md';\n\n\t\t$filecontent = file_get_contents($filehtmlheader);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_htmlheadercontent');\n\t\t}\n\n\t\t$filecontent = file_get_contents($filecss);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_csscontent');\n\t\t}\n\n\t\t$filecontent = file_get_contents($filejs);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_jscontent');\n\t\t}\n\n\t\t$filerobot = file_get_contents($filerobot);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_robotcontent');\n\t\t}\n\n\t\t$searchdone = 1;\n\t}\n\n\tif (!$error) {\n\t\tif ($searchdone) {\n\t\t\t$arrayresult['code'] = 'OK';\n\t\t\tif (empty($arrayresult['list'])) {\n\t\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t\t$arrayresult['message'] = $weblangs->trans(\"NoRecordFound\");\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t$arrayresult['message'] = 'No supported algorithm found';\n\t\t}\n\t}\n\n\treturn $arrayresult;\n}\n\n/**\n * Download all images found into page content $tmp.\n * If $modifylinks is set, links to images will be replace with a link to viewimage wrapper.\n *\n * @param \tWebsite\t \t$object\t\t\tObject website\n * @param \tWebsitePage\t$objectpage\t\tObject website page\n * @param \tstring\t\t$urltograb\t\tURL to grab (exemple: http://www.nltechno.com/ or http://www.nltechno.com/dir1/ or http://www.nltechno.com/dir1/mapage1)\n * @param \tstring\t\t$tmp\t\t\tContent to parse\n * @param \tstring\t\t$action\t\t\tVar $action\n * @param\tstring\t\t$modifylinks\t0=Do not modify content, 1=Replace links with a link to viewimage\n * @param\tint\t\t\t$grabimages\t\t0=Do not grab images, 1=Grab images\n * @param\tstring\t\t$grabimagesinto\t'root' or 'subpage'\n * @return\tvoid\n */\nfunction getAllImages($object, $objectpage, $urltograb, &$tmp, &$action, $modifylinks = 0, $grabimages = 1, $grabimagesinto = 'subpage')\n{\n\tglobal $conf;\n\n\t$error = 0;\n\n\tdol_syslog(\"Call getAllImages with grabimagesinto=\".$grabimagesinto);\n\n\t$alreadygrabbed = array();\n\n\tif (preg_match('/\\/$/', $urltograb)) {\n\t\t$urltograb .= '.';\n\t}\n\t$urltograb = dirname($urltograb); // So urltograb is now http://www.nltechno.com or http://www.nltechno.com/dir1\n\n\t// Search X in \"img...src=X\"\n\t$regs = array();\n\tpreg_match_all('/<img([^\\.\\/]+)src=\"([^>\"]+)\"([^>]*)>/i', $tmp, $regs);\n\n\tforeach ($regs[0] as $key => $val) {\n\t\tif (preg_match('/^data:image/i', $regs[2][$key])) {\n\t\t\tcontinue; // We do nothing for such images\n\t\t}\n\n\t\tif (preg_match('/^\\//', $regs[2][$key])) {\n\t\t\t$urltograbdirrootwithoutslash = getRootURLFromURL($urltograb);\n\t\t\t$urltograbbis = $urltograbdirrootwithoutslash.$regs[2][$key]; // We use dirroot\n\t\t} else {\n\t\t\t$urltograbbis = $urltograb.'/'.$regs[2][$key]; // We use dir of grabbed file\n\t\t}\n\n\t\t$linkwithoutdomain = $regs[2][$key];\n\t\t$dirforimages = '/'.$objectpage->pageurl;\n\t\tif ($grabimagesinto == 'root') {\n\t\t\t$dirforimages = '';\n\t\t}\n\n\t\t// Define $filetosave and $filename\n\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $regs[2][$key]) ? '' : '/').$regs[2][$key];\n\t\tif (preg_match('/^http/', $regs[2][$key])) {\n\t\t\t$urltograbbis = $regs[2][$key];\n\t\t\t$linkwithoutdomain = preg_replace('/^https?:\\/\\/[^\\/]+\\//i', '', $regs[2][$key]);\n\t\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\t\t}\n\t\t$filename = 'image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\n\t\t// Clean the aa/bb/../cc into aa/cc\n\t\t$filetosave = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filetosave);\n\t\t$filename = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filename);\n\n\t\t//var_dump($filetosave);\n\t\t//var_dump($filename);\n\t\t//exit;\n\n\t\tif (empty($alreadygrabbed[$urltograbbis])) {\n\t\t\tif ($grabimages) {\n\t\t\t\t$tmpgeturl = getURLContent($urltograbbis, 'GET', '', 1, array(), array('http', 'https'), 0);\n\t\t\t\tif ($tmpgeturl['curl_error_no']) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['curl_error_msg'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} elseif ($tmpgeturl['http_code'] != '200') {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['http_code'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} else {\n\t\t\t\t\t$alreadygrabbed[$urltograbbis] = 1; // Track that file was alreay grabbed.\n\n\t\t\t\t\tdol_mkdir(dirname($filetosave));\n\n\t\t\t\t\t$fp = fopen($filetosave, \"w\");\n\t\t\t\t\tfputs($fp, $tmpgeturl['content']);\n\t\t\t\t\tfclose($fp);\n\t\t\t\t\tdolChmod($filetosave);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($modifylinks) {\n\t\t\t$tmp = preg_replace('/'.preg_quote($regs[0][$key], '/').'/i', '<img'.$regs[1][$key].'src=\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file='.$filename.'\"'.$regs[3][$key].'>', $tmp);\n\t\t}\n\t}\n\n\t// Search X in \"background...url(X)\"\n\tpreg_match_all('/background([^\\.\\/\\(;]+)url\\([\\\"\\']?([^\\)\\\"\\']*)[\\\"\\']?\\)/i', $tmp, $regs);\n\n\tforeach ($regs[0] as $key => $val) {\n\t\tif (preg_match('/^data:image/i', $regs[2][$key])) {\n\t\t\tcontinue; // We do nothing for such images\n\t\t}\n\n\t\tif (preg_match('/^\\//', $regs[2][$key])) {\n\t\t\t$urltograbdirrootwithoutslash = getRootURLFromURL($urltograb);\n\t\t\t$urltograbbis = $urltograbdirrootwithoutslash.$regs[2][$key]; // We use dirroot\n\t\t} else {\n\t\t\t$urltograbbis = $urltograb.'/'.$regs[2][$key]; // We use dir of grabbed file\n\t\t}\n\n\t\t$linkwithoutdomain = $regs[2][$key];\n\n\t\t$dirforimages = '/'.$objectpage->pageurl;\n\t\tif ($grabimagesinto == 'root') {\n\t\t\t$dirforimages = '';\n\t\t}\n\n\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $regs[2][$key]) ? '' : '/').$regs[2][$key];\n\n\t\tif (preg_match('/^http/', $regs[2][$key])) {\n\t\t\t$urltograbbis = $regs[2][$key];\n\t\t\t$linkwithoutdomain = preg_replace('/^https?:\\/\\/[^\\/]+\\//i', '', $regs[2][$key]);\n\t\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\t\t}\n\n\t\t$filename = 'image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\n\t\t// Clean the aa/bb/../cc into aa/cc\n\t\t$filetosave = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filetosave);\n\t\t$filename = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filename);\n\n\t\t//var_dump($filetosave);\n\t\t//var_dump($filename);\n\t\t//exit;\n\n\t\tif (empty($alreadygrabbed[$urltograbbis])) {\n\t\t\tif ($grabimages) {\n\t\t\t\t$tmpgeturl = getURLContent($urltograbbis, 'GET', '', 1, array(), array('http', 'https'), 0);\n\t\t\t\tif ($tmpgeturl['curl_error_no']) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['curl_error_msg'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} elseif ($tmpgeturl['http_code'] != '200') {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['http_code'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} else {\n\t\t\t\t\t$alreadygrabbed[$urltograbbis] = 1; // Track that file was alreay grabbed.\n\n\t\t\t\t\tdol_mkdir(dirname($filetosave));\n\n\t\t\t\t\t$fp = fopen($filetosave, \"w\");\n\t\t\t\t\tfputs($fp, $tmpgeturl['content']);\n\t\t\t\t\tfclose($fp);\n\t\t\t\t\tdolChmod($filetosave);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($modifylinks) {\n\t\t\t$tmp = preg_replace('/'.preg_quote($regs[0][$key], '/').'/i', 'background'.$regs[1][$key].'url(\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file='.$filename.'\")', $tmp);\n\t\t}\n\t}\n}\n", "<?php\n/* Copyright (C) 2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2023 Alexandre Janniaux   <alexandre.janniaux@gmail.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/WebsiteTest.php\n *\t\t\\ingroup    test\n *      \\brief      PHPUnit test\n *\t\t\\remarks\tTo run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\n\nif (! defined('NOREQUIRESOC')) {\n\tdefine('NOREQUIRESOC', '1');\n}\nif (! defined('NOCSRFCHECK')) {\n\tdefine('NOCSRFCHECK', '1');\n}\nif (! defined('NOTOKENRENEWAL')) {\n\tdefine('NOTOKENRENEWAL', '1');\n}\nif (! defined('NOREQUIREMENU')) {\n\tdefine('NOREQUIREMENU', '1'); // If there is no menu to show\n}\nif (! defined('NOREQUIREHTML')) {\n\tdefine('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\n}\nif (! defined('NOREQUIREAJAX')) {\n\tdefine('NOREQUIREAJAX', '1');\n}\nif (! defined(\"NOLOGIN\")) {\n\tdefine(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n}\nif (! defined(\"NOSESSION\")) {\n\tdefine(\"NOSESSION\", '1');\n}\n\nrequire_once dirname(__FILE__).'/../../htdocs/main.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/website.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/website2.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/website/class/website.class.php';\n\n\nif (empty($user->id)) {\n\tprint \"Load permissions for admin user nb 1\\n\";\n\t$user->fetch(1);\n\t$user->getrights();\n\n\tif (empty($user->rights->website)) {\n\t\t$user->rights->website = new stdClass();\n\t}\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass WebsiteTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @param \tstring\t$name\t\tName\n\t * @return WebsiteTest\n\t */\n\tpublic function __construct($name = '')\n\t{\n\t\tparent::__construct($name);\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n\t/**\n\t * setUpBeforeClass\n\t *\n\t * @return void\n\t */\n\tpublic static function setUpBeforeClass(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->begin();\t// This is to have all actions inside a transaction even if test launched without suite.\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * tearDownAfterClass\n\t *\n\t * @return\tvoid\n\t */\n\tpublic static function tearDownAfterClass(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n\tprotected function setUp(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n\tprotected function tearDown(): void\n\t{\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\n\t/**\n\t * testGetPagesFromSearchCriterias\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testGetPagesFromSearchCriterias()\n\t{\n\t\tglobal $db, $website;\n\n\t\t$website = new Website($db);\t// $website must be defined globally for getPagesFromSearchCriterias()\n\n\t\t$s = \"123') OR 1=1-- \\' xxx\";\n\t\t/*\n\t\t var_dump($s);\n\t\t var_dump($db->escapeforlike($s));\n\t\t var_dump($db->escape($db->escapeforlike($s)));\n\t\t */\n\n\t\t$res = getPagesFromSearchCriterias('page,blogpost', 'meta,content', $s, 2, 'date_creation', 'DESC', 'en');\n\t\t//var_dump($res);\n\t\tprint __METHOD__.\" message=\".$res['code'].\"\\n\";\n\t\t// We must found no line (so code should be KO). If we found somethiing, it means there is a SQL injection of the 1=1\n\t\t$this->assertEquals($res['code'], 'KO');\n\t}\n\n\t/**\n\t * testDolStripPhpCode\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testDolStripPhpCode()\n\t{\n\t\tglobal $db;\n\n\t\t$s = \"abc\\n<?php echo 'def'\\n// comment\\n ?>ghi\";\n\t\t$result = dolStripPhpCode($s);\n\t\t$this->assertEquals(\"abc\\n<span phptag></span>ghi\", $result);\n\n\t\t$s = \"abc\\n<?PHP echo 'def'\\n// comment\\n ?>ghi\";\n\t\t$result = dolStripPhpCode($s);\n\t\t$this->assertEquals(\"abc\\n<span phptag></span>ghi\", $result);\n\t}\n\n\t/**\n\t * testCheckPHPCode\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testCheckPHPCode()\n\t{\n\t\tglobal $user;\n\n\t\t// Force permission so this is not the permission that will affect result of checkPHPCode\n\t\t$user->rights->website->writephp = 1;\n\n\t\t$s = '<?php exec(\"eee\"); ?>';\n\t\t$result = checkPHPCode('', $s);\n\t\tprint __METHOD__.\" result checkPHPCode=\".$result.\"\\n\";\n\t\t$this->assertEquals($result, 1, 'checkPHPCode did not detect the string was dangerous');\n\n\t\t$s = '<?php $_=\"{\"; $_=($_^\"<\").($_^\">;\").($_^\"/\"); ?><?=${\\'_\\'.$_}[\"_\"](${\\'_\\'.$_}[\"__\"]);?>';\n\t\t$result = checkPHPCode('', $s);\n\t\tprint __METHOD__.\" result checkPHPCode=\".$result.\"\\n\";\n\t\t$this->assertEquals($result, 1, 'checkPHPCode did not detect the string was dangerous');\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2017 Laurent Destailleur\t<eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *      \\file       htdocs/core/lib/website.lib.php\n *      \\ingroup    website\n *      \\brief      Library for website module\n */\n\n/**\n * Remove PHP code part from a string.\n *\n * @param \tstring\t$str\t\t\tString to clean\n * @param\tstring\t$replacewith\tString to use as replacement\n * @return \tstring\t\t\t\t\tResult string without php code\n * @see dolKeepOnlyPhpCode()\n */\nfunction dolStripPhpCode($str, $replacewith = '')\n{\n\t$str = str_replace('<?=', '<?php', $str);\n\n\t$newstr = '';\n\n\t// Split on each opening tag\n\t//$parts = explode('<?php', $str);\n\t$parts = preg_split('/'.preg_quote('<?php', '/').'/i', $str);\n\n\tif (!empty($parts)) {\n\t\t$i = 0;\n\t\tforeach ($parts as $part) {\n\t\t\tif ($i == 0) { \t// The first part is never php code\n\t\t\t\t$i++;\n\t\t\t\t$newstr .= $part;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// The second part is the php code. We split on closing tag\n\t\t\t$partlings = explode('?>', $part);\n\t\t\tif (!empty($partlings)) {\n\t\t\t\t//$phppart = $partlings[0];\n\t\t\t\t//remove content before closing tag\n\t\t\t\tif (count($partlings) > 1) {\n\t\t\t\t\t$partlings[0] = ''; // Todo why a count > 1 and not >= 1 ?\n\t\t\t\t}\n\t\t\t\t//append to out string\n\t\t\t\t//$newstr .= '<span class=\"phptag\" class=\"tooltip\" title=\"'.dol_escape_htmltag(dolGetFirstLineOfText($phppart).'...').'\">'.$replacewith.'<!-- '.$phppart.' --></span>'.implode('', $partlings);\n\t\t\t\t//$newstr .= '<span>'.$replacewith.'<!-- '.$phppart.' --></span>'.implode('', $partlings);\n\t\t\t\t$newstr .= '<span phptag>'.$replacewith.'</span>'.implode('', $partlings);\n\t\t\t\t//$newstr .= $replacewith.implode('', $partlings);\n\t\t\t}\n\t\t}\n\t}\n\treturn $newstr;\n}\n\n/**\n * Keep only PHP code part from a HTML string page.\n *\n * @param \tstring\t$str\t\t\tString to clean\n * @return \tstring\t\t\t\t\tResult string with php code only\n * @see dolStripPhpCode(), checkPHPCode()\n */\nfunction dolKeepOnlyPhpCode($str)\n{\n\t$str = str_replace('<?=', '<?php', $str);\n\t$str = str_replace('<?php', '__LTINTPHP__', $str);\n\t$str = str_replace('<?', '<?php', $str);\t\t\t// replace the short_open_tag. It is recommended to set this is Off in php.ini\n\t$str = str_replace('__LTINTPHP__', '<?php', $str);\n\n\t$newstr = '';\n\n\t// Split on each opening tag\n\t//$parts = explode('<?php', $str);\n\t$parts = preg_split('/'.preg_quote('<?php', '/').'/i', $str);\n\n\tif (!empty($parts)) {\n\t\t$i = 0;\n\t\tforeach ($parts as $part) {\n\t\t\tif ($i == 0) { \t// The first part is never php code\n\t\t\t\t$i++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$newstr .= '<?php';\n\t\t\t//split on closing tag\n\t\t\t$partlings = explode('?>', $part, 2);\n\t\t\tif (!empty($partlings)) {\n\t\t\t\t$newstr .= $partlings[0].'?>';\n\t\t\t} else {\n\t\t\t\t$newstr .= $part.'?>';\n\t\t\t}\n\t\t}\n\t}\n\treturn $newstr;\n}\n\n/**\n * Convert a page content to have correct links (based on DOL_URL_ROOT) into an html content. It replaces also dynamic content with '...php...'\n * Used to ouput the page on the Preview from backoffice.\n *\n * @param\tWebsite\t\t$website\t\t\tWeb site object\n * @param\tstring\t\t$content\t\t\tContent to replace\n * @param\tint\t\t\t$removephppart\t\t0=Replace PHP sections with a PHP badge. 1=Remove completely PHP sections.\n * @param\tstring\t\t$contenttype\t\tContent type\n * @param\tint\t\t\t$containerid \t\tContenair id\n * @return\tboolean\t\t\t\t\t\t\tTrue if OK\n * @see dolWebsiteOutput() for function used to replace content in a web server context\n */\nfunction dolWebsiteReplacementOfLinks($website, $content, $removephppart = 0, $contenttype = 'html', $containerid = '')\n{\n\t$nbrep = 0;\n\n\tdol_syslog('dolWebsiteReplacementOfLinks start (contenttype='.$contenttype.\" containerid=\".$containerid.\" USEDOLIBARREDITOR=\".(defined('USEDOLIBARREDITOR') ? '1' : '').\" USEDOLIBARRSERVER=\".(defined('USEDOLIBARRSERVER') ? '1' : '').')', LOG_DEBUG);\n\t//if ($contenttype == 'html') { print $content;exit; }\n\n\t// Replace php code. Note $content may come from database and does not contain body tags.\n\t$replacewith = '...php...';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/value=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', 'value=\"'.$replacewith.'\"', $content);\n\n\t$replacewith = '\"callto=#';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/\"callto:<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = '\"mailto=#';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/\"mailto:<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = 'src=\"php';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/src=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t$replacewith = 'href=\"php';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t$content = preg_replace('/href=\"<\\?php((?!\\?>).)*\\?>\\n*/ims', $replacewith, $content);\n\n\t//$replacewith='<span class=\"phptag\">...php...</span>';\n\t$replacewith = '...php...';\n\tif ($removephppart) {\n\t\t$replacewith = '';\n\t}\n\t//$content = preg_replace('/<\\?php((?!\\?toremove>).)*\\?toremove>\\n*/ims', $replacewith, $content);\n\t/*if ($content === null) {\n\t\tif (preg_last_error() == PREG_JIT_STACKLIMIT_ERROR) $content = 'preg_replace error (when removing php tags) PREG_JIT_STACKLIMIT_ERROR';\n\t}*/\n\t$content = dolStripPhpCode($content, $replacewith);\n\t//var_dump($content);\n\n\t// Protect the link styles.css.php to any replacement that we make after.\n\t$content = str_replace('href=\"styles.css.php', 'href=\"!~!~!~styles.css.php', $content);\n\t$content = str_replace('href=\"http', 'href=\"!~!~!~http', $content);\n\t$content = str_replace('href=\"//', 'href=\"!~!~!~//', $content);\n\t$content = str_replace('src=\"viewimage.php', 'src=\"!~!~!~/viewimage.php', $content);\n\t$content = str_replace('src=\"/viewimage.php', 'src=\"!~!~!~/viewimage.php', $content);\n\t$content = str_replace('src=\"'.DOL_URL_ROOT.'/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t$content = str_replace('href=\"document.php', 'href=\"!~!~!~/document.php', $content);\n\t$content = str_replace('href=\"/document.php', 'href=\"!~!~!~/document.php', $content);\n\t$content = str_replace('href=\"'.DOL_URL_ROOT.'/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t// Replace relative link '/' with dolibarr URL\n\t$content = preg_replace('/(href=\")\\/(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageid='.$website->fk_default_home.'\\2\"', $content, -1, $nbrep);\n\t// Replace relative link /xxx.php#aaa or /xxx.php with dolibarr URL (we discard param ?...)\n\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2\\3\"', $content, -1, $nbrep);\n\t// Replace relative link /xxx.php?a=b&c=d#aaa or /xxx.php?a=b&c=d with dolibarr URL\n\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php\\?([^#\\\"<>]*)(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2&\\3\\4\"', $content, -1, $nbrep);\n\n\t// Fix relative link into medias with correct URL after the DOL_URL_ROOT: ../url(\"medias/\n\t$content = preg_replace('/url\\(([\"\\']?)\\/?medias\\//', 'url(\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t$content = preg_replace('/data-slide-bg=([\"\\']?)\\/?medias\\//', 'data-slide-bg=\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\t// <img src=\"medias/...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t// <img src=\"...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t$content = preg_replace('/(<img[^>]*src=\")\\/?medias\\//', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t// <img src=\"image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t$content = preg_replace('/(<img[^>]*src=\")\\/?([^:\\\"\\!]+)\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=\\2\"', $content, -1, $nbrep);\n\t// <img src=\"viewimage.php/modulepart=medias&file=image.png\" => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png\"\n\t$content = preg_replace('/(<img[^>]*src=\")(\\/?viewimage\\.php)/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content, -1, $nbrep);\n\n\t// action=\"newpage.php\" => action=\"dolibarr/website/index.php?website=...&pageref=newpage\n\t$content = preg_replace('/(action=\")\\/?([^:\\\"]*)(\\.php\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'/website/index.php?website='.$website->ref.'&pageref=\\2\"', $content, -1, $nbrep);\n\n\t// Fix relative link /document.php with correct URL after the DOL_URL_ROOT:  ...href=\"/document.php?modulepart=\"\n\t$content = preg_replace('/(href=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t$content = preg_replace('/(src=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t// Fix relative link /viewimage.php with correct URL after the DOL_URL_ROOT:  ...href=\"/viewimage.php?modulepart=\"\n\t$content = preg_replace('/(url\\(\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t// Fix relative URL\n\t$content = str_replace('src=\"!~!~!~/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t$content = str_replace('href=\"!~!~!~/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\t// Remove the protection tag !~!~!~\n\t$content = str_replace('!~!~!~', '', $content);\n\n\tdol_syslog('dolWebsiteReplacementOfLinks end', LOG_DEBUG);\n\t//if ($contenttype == 'html') { print $content;exit; }\n\n\treturn $content;\n}\n\n/**\n * Converts smiley string into the utf8 sequence.\n * @param\tstring\t\t$content\t\t\tContent to replace\n * @return\tstring\t\t\t\t\t\t\tReplacement of all smiley strings with their utf8 code\n * @see dolWebsiteOutput()\n */\nfunction dolReplaceSmileyCodeWithUTF8($content)\n{\n\t$map = array(\n\t\t\":face_with_tears_of_joy:\" => \"\\xF0\\x9F\\x98\\x82\",\n\t\t\":grinning_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x81\",\n\t\t\":smiling_face_with_open_mouth:\" => \"\\xF0\\x9F\\x98\\x83\",\n\t\t\":smiling_face_with_open_mouth_and_cold_sweat:\" => \"\\xF0\\x9F\\x98\\x85\",\n\t\t\":smiling_face_with_open_mouth_and_tightly_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x86\",\n\t\t\":winking_face:\" => \"\\xF0\\x9F\\x98\\x89\",\n\t\t\":smiling_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x8A\",\n\t\t\":face_savouring_delicious_food:\" => \"\\xF0\\x9F\\x98\\x8B\",\n\t\t\":relieved_face:\" => \"\\xF0\\x9F\\x98\\x8C\",\n\t\t\":smiling_face_with_heart_shaped_eyes:\" => \"\\xF0\\x9F\\x98\\x8D\",\n\t\t\":smiling_face_with_sunglasses:\" => \"\\xF0\\x9F\\x98\\x8E\",\n\t\t\":smirking_face:\" => \"\\xF0\\x9F\\x98\\x8F\",\n\t\t\":neutral_face:\" => \"\\xF0\\x9F\\x98\\x90\",\n\t\t\":expressionless_face:\" => \"\\xF0\\x9F\\x98\\x91\",\n\t\t\":unamused_face:\" => \"\\xF0\\x9F\\x98\\x92\",\n\t\t\":face_with_cold_sweat:\" => \"\\xF0\\x9F\\x98\\x93\",\n\t\t\":pensive_face:\" => \"\\xF0\\x9F\\x98\\x94\",\n\t\t\":confused_face:\" => \"\\xF0\\x9F\\x98\\x95\",\n\t\t\":confounded_face:\" => \"\\xF0\\x9F\\x98\\x96\",\n\t\t\":kissing_face:\" => \"\\xF0\\x9F\\x98\\x97\",\n\t\t\":face_throwing_a_kiss:\" => \"\\xF0\\x9F\\x98\\x98\",\n\t\t\":kissing_face_with_smiling_eyes:\" => \"\\xF0\\x9F\\x98\\x99\",\n\t\t\":kissing_face_with_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x9A\",\n\t\t\":face_with_stuck_out_tongue:\" => \"\\xF0\\x9F\\x98\\x9B\",\n\t\t\":face_with_stuck_out_tongue_and_winking_eye:\" => \"\\xF0\\x9F\\x98\\x9C\",\n\t\t\":face_with_stuck_out_tongue_and_tightly_closed_eyes:\" => \"\\xF0\\x9F\\x98\\x9D\",\n\t\t\":disappointed_face:\" => \"\\xF0\\x9F\\x98\\x9E\",\n\t\t\":worried_face:\" => \"\\xF0\\x9F\\x98\\x9F\",\n\t\t\":angry_face:\" => \"\\xF0\\x9F\\x98\\xA0\",\n\t\t\":face_with_symbols_on_mouth:\" => \"\\xF0\\x9F\\x98\\xA1\",\n\t);\n\tforeach ($map as $key => $value) {\n\t\t$content = str_replace($key, $value, $content);\n\t}\n\treturn $content;\n}\n\n\n/**\n * Render a string of an HTML content and output it.\n * Used to ouput the page when viewed from a server (Dolibarr or Apache).\n *\n * @param   string  $content    \tContent string\n * @param\tstring\t$contenttype\tContent type\n * @param\tint\t\t$containerid \tContenair id\n * @return  void\n * @see\tdolWebsiteReplacementOfLinks()  for function used to replace content in the backoffice context.\n */\nfunction dolWebsiteOutput($content, $contenttype = 'html', $containerid = '')\n{\n\tglobal $db, $langs, $conf, $user;\n\tglobal $dolibarr_main_url_root, $dolibarr_main_data_root;\n\tglobal $website;\n\tglobal $includehtmlcontentopened;\n\n\t$nbrep = 0;\n\n\tdol_syslog(\"dolWebsiteOutput start - contenttype=\".$contenttype.\" containerid=\".$containerid.\" USEDOLIBARREDITOR=\".(defined('USEDOLIBARREDITOR') ? '1' : '').\" USEDOLIBARRSERVER=\".(defined('USEDOLIBARRSERVER') ? '1' : '').' includehtmlcontentopened='.$includehtmlcontentopened);\n\n\t//print $containerid.' '.$content;\n\n\t// Define $urlwithroot\n\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\tif (defined('USEDOLIBARREDITOR')) {\t\t// REPLACEMENT OF LINKS When page called from Dolibarr editor\n\t\t// We remove the <head> part of content\n\t\tif ($contenttype == 'html') {\n\t\t\t$content = preg_replace('/<head>.*<\\/head>/ims', '', $content);\n\t\t\t$content = preg_replace('/^.*<body(\\s[^>]*)*>/ims', '', $content);\n\t\t\t$content = preg_replace('/<\\/body(\\s[^>]*)*>.*$/ims', '', $content);\n\t\t}\n\t} elseif (defined('USEDOLIBARRSERVER')) {\t// REPLACEMENT OF LINKS When page called from Dolibarr server\n\t\t$content = str_replace('<link rel=\"stylesheet\" href=\"/styles.css', '<link rel=\"stylesheet\" href=\"styles.css', $content);\n\n\t\t// Protect the link styles.css.php to any replacement that we make after.\n\t\t$content = str_replace('href=\"styles.css.php', 'href=\"!~!~!~styles.css.php', $content);\n\t\t$content = str_replace('href=\"http', 'href=\"!~!~!~http', $content);\n\t\t$content = str_replace('href=\"//', 'href=\"!~!~!~//', $content);\n\t\t$content = str_replace(array('src=\"viewimage.php', 'src=\"/viewimage.php'), 'src=\"!~!~!~/viewimage.php', $content);\n\t\t$content = str_replace('src=\"'.DOL_URL_ROOT.'/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t\t$content = str_replace(array('href=\"document.php', 'href=\"/document.php'), 'href=\"!~!~!~/document.php', $content);\n\t\t$content = str_replace('href=\"'.DOL_URL_ROOT.'/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t\t// Replace relative link / with dolibarr URL:  ...href=\"/\"...\n\t\t$content = preg_replace('/(href=\")\\/\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'\"', $content, -1, $nbrep);\n\t\t// Replace relative link /xxx.php#aaa or /xxx.php with dolibarr URL:  ...href=\"....php\" (we discard param ?...)\n\t\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\\3\"', $content, -1, $nbrep);\n\t\t// Replace relative link /xxx.php?a=b&c=d#aaa or /xxx.php?a=b&c=d with dolibarr URL\n\t\t// Warning: we may replace twice if href=\"...\" was inside an include (dolWebsiteOutput called by include and the by final page), that's why\n\t\t// at end we replace the '!~!~!~' only if we are in final parent page.\n\t\t$content = preg_replace('/(href=\")\\/?([^:\\\"\\!]*)\\.php\\?([^#\\\"<>]*)(#[^\\\"<>]*)?\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2&\\3\\4\"', $content, -1, $nbrep);\n\t\t// Replace relative link without .php like /xxx#aaa or /xxx with dolibarr URL:  ...href=\"....php\"\n\t\t$content = preg_replace('/(href=\")\\/?([a-zA-Z0-9\\-_#]+)(\\\"|\\?)/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link /document.php with correct URL after the DOL_URL_ROOT:  href=\"/document.php?modulepart=\" => href=\"/dolibarr/document.php?modulepart=\"\n\t\t$content = preg_replace('/(href=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(src=\")(\\/?document\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link /viewimage.php with correct URL after the DOL_URL_ROOT: href=\"/viewimage.php?modulepart=\" => href=\"/dolibarr/viewimage.php?modulepart=\"\n\t\t$content = preg_replace('/(href=\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(src=\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\t\t$content = preg_replace('/(url\\(\")(\\/?viewimage\\.php\\?[^\\\"]*modulepart=[^\\\"]*)(\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'\\2\\3', $content, -1, $nbrep);\n\n\t\t// Fix relative link into medias with correct URL after the DOL_URL_ROOT: ../url(\"medias/\n\t\t$content = preg_replace('/url\\(([\"\\']?)\\/?medias\\//', 'url(\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t\t$content = preg_replace('/data-slide-bg=([\"\\']?)\\/?medias\\//', 'data-slide-bg=\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\t\t// <img src=\"medias/...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t// <img src=\"...image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?medias\\//', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\t\t// <img src=\"image.png... => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png...\n\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?([^:\\\"\\!]+)\\\"/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=\\2\"', $content, -1, $nbrep);\n\t\t// <img src=\"viewimage.php/modulepart=medias&file=image.png\" => <img src=\"dolibarr/viewimage.php/modulepart=medias&file=image.png\"\n\t\t$content = preg_replace('/(<img[^>]*src=\")(\\/?viewimage\\.php)/', '\\1!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content, -1, $nbrep);\n\n\t\t// action=\"newpage.php\" => action=\"dolibarr/website/index.php?website=...&pageref=newpage\n\t\t$content = preg_replace('/(action=\")\\/?([^:\\\"]*)(\\.php\\\")/', '\\1!~!~!~'.DOL_URL_ROOT.'/public/website/index.php?website='.$website->ref.'&pageref=\\2\"', $content, -1, $nbrep);\n\n\t\t// Fix relative URL\n\t\t$content = str_replace('src=\"!~!~!~/viewimage.php', 'src=\"!~!~!~'.DOL_URL_ROOT.'/viewimage.php', $content);\n\t\t$content = str_replace('href=\"!~!~!~/document.php', 'href=\"!~!~!~'.DOL_URL_ROOT.'/document.php', $content);\n\n\t\t// Remove the protection tag !~!~!~, but only if this is the parent page and not an include\n\t\tif (empty($includehtmlcontentopened)) {\n\t\t\t$content = str_replace('!~!~!~', '', $content);\n\t\t}\n\t} else // REPLACEMENT OF LINKS When page called from virtual host web server\n\t{\n\t\t$symlinktomediaexists = 1;\n\t\tif ($website->virtualhost) {\n\t\t\t$content = preg_replace('/^(<link[^>]*rel=\"canonical\" href=\")\\//m', '\\1'.$website->virtualhost.'/', $content, -1, $nbrep);\n\t\t}\n\t\t//print 'rrrrrrrrr'.$website->virtualhost.$content;\n\n\n\t\t// Make a change into HTML code to allow to include images from medias directory correct with direct link for virtual server\n\t\t// <img alt=\"\" src=\"/dolibarr_dev/htdocs/viewimage.php?modulepart=medias&amp;entity=1&amp;file=image/ldestailleur_166x166.jpg\" style=\"height:166px; width:166px\" />\n\t\t// become\n\t\t// <img alt=\"\" src=\"'.$urlwithroot.'/medias/image/ldestailleur_166x166.jpg\" style=\"height:166px; width:166px\" />\n\t\tif (!$symlinktomediaexists) {\n\t\t\t// <img src=\"image.png... => <img src=\"medias/image.png...\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?image\\//', '\\1/wrapper.php?modulepart=medias&file=medias/image/', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)\\/?image\\//', '\\1/wrapper.php?modulepart=medias&file=medias/image/', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<script[^>]*src=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)modulepart=medias([^\\)]*)file=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2modulepart=medias\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)hashp=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2hashp\\3\\4', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=mycompany([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=mycompany\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t// If some links to documents or viewimage remains, we replace with wrapper\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?viewimage\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")\\/?documents\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t} else {\n\t\t\t// <img src=\"image.png... => <img src=\"medias/image.png...\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?image\\//', '\\1/medias/image/', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)\\/?image\\//', '\\1/medias/image/', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<script[^>]*src=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*document\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=medias([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)modulepart=medias([^\\)]*)file=([^\\)]*)([\"\\']?\\))/', '\\1/medias/\\4\\5', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)hashp=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(url\\([\"\\']?)[^\\)]*viewimage\\.php([^\\)]*)hashp=([^\\)]*)([\"\\']?\\))/', '\\1/wrapper.php\\2hashp=\\3\\4', $content, -1, $nbrep);\n\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")[^\\\"]*viewimage\\.php([^\\\"]*)modulepart=mycompany([^\\\"]*)file=([^\\\"]*)(\"[^>]*>)/', '\\1/wrapper.php\\2modulepart=mycompany\\3file=\\4\\5', $content, -1, $nbrep);\n\n\t\t\t// If some links to documents or viewimage remains, we replace with wrapper\n\t\t\t$content = preg_replace('/(<img[^>]*src=\")\\/?viewimage\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t\t$content = preg_replace('/(<a[^>]*href=\")\\/?document\\.php/', '\\1/wrapper.php', $content, -1, $nbrep);\n\t\t}\n\t}\n\n\tif (!defined('USEDOLIBARREDITOR')) {\n\t\t$content = str_replace(' contenteditable=\"true\"', ' contenteditable=\"false\"', $content);\n\t}\n\n\tif (!empty($conf->global->WEBSITE_ADD_CSS_TO_BODY)) {\n\t\t$content = str_replace('<body id=\"bodywebsite\" class=\"bodywebsite', '<body id=\"bodywebsite\" class=\"bodywebsite '.$conf->global->WEBSITE_ADD_CSS_TO_BODY, $content);\n\t}\n\n\t$content = dolReplaceSmileyCodeWithUTF8($content);\n\n\tdol_syslog(\"dolWebsiteOutput end\");\n\n\tprint $content;\n}\n\n/**\n * Increase the website counter of page access.\n *\n * @param   int\t\t$websiteid\t\t\tID of website\n * @param\tstring\t$websitepagetype\tType of page ('blogpost', 'page', ...)\n * @param\tint\t\t$websitepageid\t\tID of page\n * @return  int\t\t\t\t\t\t\t<0 if KO, >0 if OK\n */\nfunction dolWebsiteIncrementCounter($websiteid, $websitepagetype, $websitepageid)\n{\n\tif (!getDolGlobalInt('WEBSITE_PERF_DISABLE_COUNTERS')) {\n\t\t//dol_syslog(\"dolWebsiteIncrementCounter websiteid=\".$websiteid.\" websitepagetype=\".$websitepagetype.\" websitepageid=\".$websitepageid);\n\t\tif (in_array($websitepagetype, array('blogpost', 'page'))) {\n\t\t\tglobal $db;\n\n\t\t\t$tmpnow = dol_getdate(dol_now('gmt'), true, 'gmt');\n\n\t\t\t$sql = \"UPDATE \".$db->prefix().\"website SET \";\n\t\t\t$sql .= \" pageviews_total = pageviews_total + 1,\";\n\t\t\t$sql .= \" pageviews_month = pageviews_month + 1,\";\n\t\t\t// if last access was done during previous month, we save pageview_month into pageviews_previous_month\n\t\t\t$sql .= \" pageviews_previous_month = \".$db->ifsql(\"lastaccess < '\".$db->idate(dol_mktime(0, 0, 0, $tmpnow['mon'], 1, $tmpnow['year'], 'gmt', 0), 'gmt').\"'\", 'pageviews_month', 'pageviews_previous_month').\",\";\n\t\t\t$sql .= \" lastaccess = '\".$db->idate(dol_now('gmt'), 'gmt').\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".((int) $websiteid);\n\t\t\t$resql = $db->query($sql);\n\t\t\tif (! $resql) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n\n/**\n * Format img tags to introduce viewimage on img src.\n *\n * @param   string  $content    Content string\n * @return  void\n * @see\tdolWebsiteOutput()\n */\n/*\nfunction dolWebsiteSaveContent($content)\n{\n\tglobal $db, $langs, $conf, $user;\n\tglobal $dolibarr_main_url_root, $dolibarr_main_data_root;\n\n\t//dol_syslog(\"dolWebsiteSaveContent start (mode=\".(defined('USEDOLIBARRSERVER')?'USEDOLIBARRSERVER':'').')');\n\n\t// Define $urlwithroot\n\t$urlwithouturlroot=preg_replace('/'.preg_quote(DOL_URL_ROOT,'/').'$/i','',trim($dolibarr_main_url_root));\n\t$urlwithroot=$urlwithouturlroot.DOL_URL_ROOT;\t\t// This is to use external domain name found into config file\n\t//$urlwithroot=DOL_MAIN_URL_ROOT;\t\t\t\t\t// This is to use same domain name than current\n\n\t//$content = preg_replace('/(<img.*src=\")(?!(http|'.preg_quote(DOL_URL_ROOT,'/').'\\/viewimage))/', '\\1'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file=', $content, -1, $nbrep);\n\n\treturn $content;\n}\n*/\n\n\n/**\n * Make a redirect to another container.\n *\n * @param \tstring\t$containerref\t\tRef of container to redirect to (Example: 'mypage' or 'mypage.php').\n * @param \tstring\t$containeraliasalt\tRef of alternative aliases to redirect to.\n * @param \tint\t\t$containerid\t\tId of container.\n * @param\tint\t\t$permanent\t\t\t0=Use temporary redirect 302, 1=Use permanent redirect 301\n * @return  void\n */\nfunction redirectToContainer($containerref, $containeraliasalt = '', $containerid = 0, $permanent = 0)\n{\n\tglobal $db, $website;\n\n\t$newurl = '';\n\t$result = 0;\n\n\t// We make redirect using the alternative alias, we must find the real $containerref\n\tif ($containeraliasalt) {\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t$result = $tmpwebsitepage->fetch(0, $website->id, '', $containeraliasalt);\n\t\tif ($result > 0) {\n\t\t\t$containerref = $tmpwebsitepage->pageurl;\n\t\t} else {\n\t\t\tprint \"Error, page contains a redirect to the alternative alias '\".$containeraliasalt.\"' that does not exists in web site (\".$website->id.\" / \".$website->ref.\")\";\n\t\t\texit;\n\t\t}\n\t}\n\n\tif (defined('USEDOLIBARREDITOR')) {\n\t\t/*print '<div class=\"margintoponly marginleftonly\">';\n\t\tprint \"This page contains dynamic code that make a redirect to '\".$containerref.\"' in your current context. Redirect has been canceled as it is not supported in edition mode.\";\n\t\tprint '</div>';*/\n\t\t$text = \"This page contains dynamic code that make a redirect to '\".$containerref.\"' in your current context. Redirect has been canceled as it is not supported in edition mode.\";\n\t\tsetEventMessages($text, null, 'warnings', 'WEBSITEREDIRECTDISABLED'.$containerref);\n\t\treturn;\n\t}\n\n\tif (defined('USEDOLIBARRSERVER')) {\t// When page called from Dolibarr server\n\t\t// Check new container exists\n\t\tif (!$containeraliasalt) {\t// If containeraliasalt set, we already did the test\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\t\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t\t$result = $tmpwebsitepage->fetch(0, $website->id, $containerref);\n\t\t\tunset($tmpwebsitepage);\n\t\t}\n\t\tif ($result > 0) {\n\t\t\t$currenturi = $_SERVER[\"REQUEST_URI\"];\n\t\t\t$regtmp = array();\n\t\t\tif (preg_match('/&pageref=([^&]+)/', $currenturi, $regtmp)) {\n\t\t\t\tif ($regtmp[0] == $containerref) {\n\t\t\t\t\tprint \"Error, page with uri '.$currenturi.' try a redirect to the same alias page '\".$containerref.\"' in web site '\".$website->ref.\"'\";\n\t\t\t\t\texit;\n\t\t\t\t} else {\n\t\t\t\t\t$newurl = preg_replace('/&pageref=([^&]+)/', '&pageref='.$containerref, $currenturi);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$newurl = $currenturi.'&pageref='.urlencode($containerref);\n\t\t\t}\n\t\t}\n\t} else // When page called from virtual host server\n\t{\n\t\t$newurl = '/'.$containerref.'.php';\n\t}\n\n\tif ($newurl) {\n\t\tif ($permanent) {\n\t\t\theader(\"Status: 301 Moved Permanently\", false, 301);\n\t\t}\n\t\theader(\"Location: \".$newurl.(empty($_SERVER[\"QUERY_STRING\"]) ? '' : '?'.$_SERVER[\"QUERY_STRING\"]));\n\t\texit;\n\t} else {\n\t\tprint \"Error, page contains a redirect to the alias page '\".$containerref.\"' that does not exists in web site (\".$website->id.\" / \".$website->ref.\")\";\n\t\texit;\n\t}\n}\n\n\n/**\n * Clean an HTML page to report only content, so we can include it into another page.\n * It outputs content of file sanitized from html and body part.\n *\n * @param \tstring\t$containerref\t\tPath to file to include (must be a page from website root. Example: 'mypage.php' means 'mywebsite/mypage.php')\n * @return  void\n */\nfunction includeContainer($containerref)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running included containers.\n\tglobal $includehtmlcontentopened;\n\tglobal $websitekey, $websitepagefile;\n\n\t$MAXLEVEL = 20;\n\n\tif (!preg_match('/\\.php$/i', $containerref)) {\n\t\t$containerref .= '.php';\n\t}\n\n\t$fullpathfile = DOL_DATA_ROOT.($conf->entity > 1 ? '/'.$conf->entity : '').'/website/'.$websitekey.'/'.$containerref;\n\n\tif (empty($includehtmlcontentopened)) {\n\t\t$includehtmlcontentopened = 0;\n\t}\n\t$includehtmlcontentopened++;\n\tif ($includehtmlcontentopened > $MAXLEVEL) {\n\t\tprint 'ERROR: RECURSIVE CONTENT LEVEL. Depth of recursive call is more than the limit of '.((int) $MAXLEVEL).\".\\n\";\n\t\treturn;\n\t}\n\n\t//dol_syslog(\"Include container \".$containerref.' includehtmlcontentopened='.$includehtmlcontentopened);\n\n\t// file_get_contents is not possible. We must execute code with include\n\t//$content = file_get_contents($fullpathfile);\n\t//print preg_replace(array('/^.*<body[^>]*>/ims','/<\\/body>.*$/ims'), array('', ''), $content);*/\n\n\tob_start();\n\t$res = include $fullpathfile; // Include because we want to execute code content\n\t$tmpoutput = ob_get_contents();\n\tob_end_clean();\n\n\tprint \"\\n\".'<!-- include '.$websitekey.'/'.$containerref.(is_object($websitepage) ? ' parent id='.$websitepage->id : '').' level = '.$includehtmlcontentopened.' -->'.\"\\n\";\n\tprint preg_replace(array('/^.*<body[^>]*>/ims', '/<\\/body>.*$/ims'), array('', ''), $tmpoutput);\n\n\tif (!$res) {\n\t\tprint 'ERROR: FAILED TO INCLUDE PAGE '.$containerref.\".\\n\";\n\t}\n\n\t$includehtmlcontentopened--;\n}\n\n/**\n * Return HTML content to add structured data for an article, news or Blog Post. Use the json-ld format.\n * Example:\n * <?php getStructureData('blogpost'); ?>\n * <?php getStructureData('software', array('name'=>'Name', 'os'=>'Windows', 'price'=>10)); ?>\n *\n * @param \tstring\t\t$type\t\t\t\t'blogpost', 'product', 'software', 'organization', 'qa',  ...\n * @param\tarray\t\t$data\t\t\t\tArray of data parameters for structured data\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getStructuredData($type, $data = array())\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs, $pagelangs; // Very important. Required to have var available when running inluded containers.\n\n\t$type = strtolower($type);\n\n\tif ($type == 'software') {\n\t\t$ret = '<!-- Add structured data for entry in a software annuary -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\"@context\": \"https://schema.org\",\n\t\t\t\"@type\": \"SoftwareApplication\",\n\t\t\t\"name\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\"operatingSystem\": \"'.dol_escape_json($data['os']).'\",\n\t\t\t\"applicationCategory\": \"https://schema.org/'.dol_escape_json($data['applicationCategory']).'\",';\n\t\tif (!empty($data['ratingcount'])) {\n\t\t\t$ret .= '\n\t\t\t\t\"aggregateRating\": {\n\t\t\t\t\t\"@type\": \"AggregateRating\",\n\t\t\t\t\t\"ratingValue\": \"'.dol_escape_json($data['ratingvalue']).'\",\n\t\t\t\t\t\"ratingCount\": \"'.dol_escape_json($data['ratingcount']).'\"\n\t\t\t\t},';\n\t\t}\n\t\t$ret .= '\n\t\t\t\"offers\": {\n\t\t\t\t\"@type\": \"Offer\",\n\t\t\t\t\"price\": \"'.dol_escape_json($data['price']).'\",\n\t\t\t\t\"priceCurrency\": \"'.dol_escape_json($data['currency'] ? $data['currency'] : $conf->currency).'\"\n\t\t\t}\n\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'organization') {\n\t\t$companyname = $mysoc->name;\n\t\t$url = $mysoc->url;\n\n\t\t$ret = '<!-- Add structured data for organization -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\"@context\": \"https://schema.org\",\n\t\t\t\"@type\": \"Organization\",\n\t\t\t\"name\": \"'.dol_escape_json($data['name'] ? $data['name'] : $companyname).'\",\n\t\t\t\"url\": \"'.dol_escape_json($data['url'] ? $data['url'] : $url).'\",\n\t\t\t\"logo\": \"'.($data['logo'] ? dol_escape_json($data['logo']) : '/wrapper.php?modulepart=mycompany&file=logos%2F'.urlencode($mysoc->logo)).'\",\n\t\t\t\"contactPoint\": {\n\t\t\t\t\"@type\": \"ContactPoint\",\n\t\t\t\t\"contactType\": \"Contact\",\n\t\t\t\t\"email\": \"'.dol_escape_json($data['email'] ? $data['email'] : $mysoc->email).'\"\n\t\t\t}'.\"\\n\";\n\t\tif (is_array($mysoc->socialnetworks) && count($mysoc->socialnetworks) > 0) {\n\t\t\t$ret .= \",\\n\";\n\t\t\t$ret .= '\"sameAs\": [';\n\t\t\t$i = 0;\n\t\t\tforeach ($mysoc->socialnetworks as $key => $value) {\n\t\t\t\tif ($key == 'linkedin') {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/company/'.dol_escape_json($value).'\"';\n\t\t\t\t} elseif ($key == 'youtube') {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/user/'.dol_escape_json($value).'\"';\n\t\t\t\t} else {\n\t\t\t\t\t$ret .= '\"https://www.'.$key.'.com/'.dol_escape_json($value).'\"';\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t\tif ($i < count($mysoc->socialnetworks)) {\n\t\t\t\t\t$ret .= ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$ret .= ']'.\"\\n\";\n\t\t}\n\t\t$ret .= '}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'blogpost') {\n\t\tif (!empty($websitepage->author_alias)) {\n\t\t\t//include_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\n\t\t\t//$tmpuser = new User($db);\n\t\t\t//$restmpuser = $tmpuser->fetch($websitepage->fk_user_creat);\n\n\t\t\t$pageurl = $websitepage->pageurl;\n\t\t\t$title = $websitepage->title;\n\t\t\t$image = $websitepage->image;\n\t\t\t$companyname = $mysoc->name;\n\t\t\t$description = $websitepage->description;\n\n\t\t\t$pageurl = str_replace('__WEBSITE_KEY__', $website->ref, $pageurl);\n\t\t\t$title = str_replace('__WEBSITE_KEY__', $website->ref, $title);\n\t\t\t$image = '/medias'.(preg_match('/^\\//', $image) ? '' : '/').str_replace('__WEBSITE_KEY__', $website->ref, $image);\n\t\t\t$companyname = str_replace('__WEBSITE_KEY__', $website->ref, $companyname);\n\t\t\t$description = str_replace('__WEBSITE_KEY__', $website->ref, $description);\n\n\t\t\t$ret = '<!-- Add structured data for blog post -->'.\"\\n\";\n\t\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t\t$ret .= '{\n\t\t\t\t  \"@context\": \"https://schema.org\",\n\t\t\t\t  \"@type\": \"NewsArticle\",\n\t\t\t\t  \"mainEntityOfPage\": {\n\t\t\t\t    \"@type\": \"WebPage\",\n\t\t\t\t    \"@id\": \"'.dol_escape_json($pageurl).'\"\n\t\t\t\t  },\n\t\t\t\t  \"headline\": \"'.dol_escape_json($title).'\",\n\t\t\t\t  \"image\": [\n\t\t\t\t    \"'.dol_escape_json($image).'\"\n\t\t\t\t   ],\n\t\t\t\t  \"dateCreated\": \"'.dol_print_date($websitepage->date_creation, 'dayhourrfc').'\",\n\t\t\t\t  \"datePublished\": \"'.dol_print_date($websitepage->date_creation, 'dayhourrfc').'\",\n\t\t\t\t  \"dateModified\": \"'.dol_print_date($websitepage->date_modification, 'dayhourrfc').'\",\n\t\t\t\t  \"author\": {\n\t\t\t\t    \"@type\": \"Person\",\n\t\t\t\t    \"name\": \"'.dol_escape_json($websitepage->author_alias).'\"\n\t\t\t\t  },\n\t\t\t\t  \"publisher\": {\n\t\t\t\t     \"@type\": \"Organization\",\n\t\t\t\t     \"name\": \"'.dol_escape_json($companyname).'\",\n\t\t\t\t     \"logo\": {\n\t\t\t\t        \"@type\": \"ImageObject\",\n\t\t\t\t        \"url\": \"/wrapper.php?modulepart=mycompany&file=logos%2F'.urlencode($mysoc->logo).'\"\n\t\t\t\t     }\n\t\t\t\t   },'.\"\\n\";\n\t\t\tif ($websitepage->keywords) {\n\t\t\t\t$ret .= '\"keywords\": [';\n\t\t\t\t$i = 0;\n\t\t\t\t$arrayofkeywords = explode(',', $websitepage->keywords);\n\t\t\t\tforeach ($arrayofkeywords as $keyword) {\n\t\t\t\t\t$ret .= '\"'.dol_escape_json($keyword).'\"';\n\t\t\t\t\t$i++;\n\t\t\t\t\tif ($i < count($arrayofkeywords)) {\n\t\t\t\t\t\t$ret .= ', ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$ret .= '],'.\"\\n\";\n\t\t\t}\n\t\t\t$ret .= '\"description\": \"'.dol_escape_json($description).'\"';\n\t\t\t$ret .= \"\\n\".'}'.\"\\n\";\n\t\t\t$ret .= '</script>'.\"\\n\";\n\t\t} else {\n\t\t\t$ret = '<!-- no structured data inserted inline inside blogpost because no author_alias defined -->'.\"\\n\";\n\t\t}\n\t} elseif ($type == 'product') {\n\t\t$ret = '<!-- Add structured data for product -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\t\"@context\": \"https://schema.org/\",\n\t\t\t\t\"@type\": \"Product\",\n\t\t\t\t\"name\": \"'.dol_escape_json($data['label']).'\",\n\t\t\t\t\"image\": [\n\t\t\t\t\t\"'.dol_escape_json($data['image']).'\",\n\t\t\t\t],\n\t\t\t\t\"description\": \"'.dol_escape_json($data['description']).'\",\n\t\t\t\t\"sku\": \"'.dol_escape_json($data['ref']).'\",\n\t\t\t\t\"brand\": {\n\t\t\t\t\t\"@type\": \"Thing\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['brand']).'\"\n\t\t\t\t},\n\t\t\t\t\"author\": {\n\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"offers\": {\n\t\t\t\t\t\"@type\": \"Offer\",\n\t\t\t\t\t\"url\": \"https://example.com/anvil\",\n\t\t\t\t\t\"priceCurrency\": \"'.dol_escape_json($data['currency'] ? $data['currency'] : $conf->currency).'\",\n\t\t\t\t\t\"price\": \"'.dol_escape_json($data['price']).'\",\n\t\t\t\t\t\"itemCondition\": \"https://schema.org/UsedCondition\",\n\t\t\t\t\t\"availability\": \"https://schema.org/InStock\",\n\t\t\t\t\t\"seller\": {\n\t\t\t\t\t\t\"@type\": \"Organization\",\n\t\t\t\t\t\t\"name\": \"'.dol_escape_json($mysoc->name).'\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t} elseif ($type == 'qa') {\n\t\t$ret = '<!-- Add structured data for QA -->'.\"\\n\";\n\t\t$ret .= '<script nonce=\"'.getNonce().'\" type=\"application/ld+json\">'.\"\\n\";\n\t\t$ret .= '{\n\t\t\t\t\"@context\": \"https://schema.org/\",\n\t\t\t\t\"@type\": \"QAPage\",\n\t\t\t\t\"mainEntity\": {\n\t\t\t\t\t\"@type\": \"Question\",\n\t\t\t\t\t\"name\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\t\t\"text\": \"'.dol_escape_json($data['name']).'\",\n\t\t\t\t\t\"answerCount\": 1,\n\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t\t}\n\t\t\t\t\t\"acceptedAnswer\": {\n\t\t\t\t\t\t\"@type\": \"Answer\",\n\t\t\t\t\t\t\"text\": \"'.dol_escape_json(dol_string_nohtmltag(dolStripPhpCode($data['description']))).'\",\n\t\t\t\t\t\t\"author\": {\n\t\t\t\t\t\t\t\"@type\": \"Person\",\n\t\t\t\t\t\t\t\"name\": \"'.dol_escape_json($data['author']).'\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}'.\"\\n\";\n\t\t$ret .= '</script>'.\"\\n\";\n\t}\n\treturn $ret;\n}\n\n/**\n * Return HTML content to add as header card for an article, news or Blog Post or home page.\n *\n * @param\tarray\t$params\t\t\t\t\tArray of parameters\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getSocialNetworkHeaderCards($params = null)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$out = '';\n\n\tif ($website->virtualhost) {\n\t\t$pageurl = $websitepage->pageurl;\n\t\t$title = $websitepage->title;\n\t\t$image = $websitepage->image;\n\t\t$companyname = $mysoc->name;\n\t\t$description = $websitepage->description;\n\n\t\t$pageurl = str_replace('__WEBSITE_KEY__', $website->ref, $pageurl);\n\t\t$title = str_replace('__WEBSITE_KEY__', $website->ref, $title);\n\t\t$image = '/medias'.(preg_match('/^\\//', $image) ? '' : '/').str_replace('__WEBSITE_KEY__', $website->ref, $image);\n\t\t$companyname = str_replace('__WEBSITE_KEY__', $website->ref, $companyname);\n\t\t$description = str_replace('__WEBSITE_KEY__', $website->ref, $description);\n\n\t\t$shortlangcode = '';\n\t\tif ($websitepage->lang) {\n\t\t\t$shortlangcode = substr($websitepage->lang, 0, 2); // en_US or en-US -> en\n\t\t}\n\t\tif (empty($shortlangcode)) {\n\t\t\t$shortlangcode = substr($website->lang, 0, 2); // en_US or en-US -> en\n\t\t}\n\n\t\t$fullurl = $website->virtualhost.'/'.$websitepage->pageurl.'.php';\n\t\t$canonicalurl = $website->virtualhost.(($websitepage->id == $website->fk_default_home) ? '/' : (($shortlangcode != substr($website->lang, 0, 2) ? '/'.$shortlangcode : '').'/'.$websitepage->pageurl.'.php'));\n\t\t$hashtags = trim(join(' #', array_map('trim', explode(',', $websitepage->keywords))));\n\n\t\t// Open Graph\n\t\t$out .= '<meta name=\"og:type\" content=\"website\">'.\"\\n\";\t// TODO If blogpost, use type article\n\t\t$out .= '<meta name=\"og:title\" content=\"'.$websitepage->title.'\">'.\"\\n\";\n\t\tif ($websitepage->image) {\n\t\t\t$out .= '<meta name=\"og:image\" content=\"'.$website->virtualhost.$image.'\">'.\"\\n\";\n\t\t}\n\t\t$out .= '<meta name=\"og:url\" content=\"'.$canonicalurl.'\">'.\"\\n\";\n\n\t\t// Twitter\n\t\t$out .= '<meta name=\"twitter:card\" content=\"summary\">'.\"\\n\";\n\t\tif (!empty($params) && !empty($params['twitter_account'])) {\n\t\t\t$out .= '<meta name=\"twitter:site\" content=\"@'.$params['twitter_account'].'\">'.\"\\n\";\n\t\t\t$out .= '<meta name=\"twitter:creator\" content=\"@'.$params['twitter_account'].'\">'.\"\\n\";\n\t\t}\n\t\t$out .= '<meta name=\"twitter:title\" content=\"'.$websitepage->title.'\">'.\"\\n\";\n\t\tif ($websitepage->description) {\n\t\t\t$out .= '<meta name=\"twitter:description\" content=\"'.$websitepage->description.'\">'.\"\\n\";\n\t\t}\n\t\tif ($websitepage->image) {\n\t\t\t$out .= '<meta name=\"twitter:image\" content=\"'.$website->virtualhost.$image.'\">'.\"\\n\";\n\t\t}\n\t\t//$out .= '<meta name=\"twitter:domain\" content=\"'.getDomainFromURL($website->virtualhost, 1).'\">';\n\t\t/*\n\t\t $out .= '<meta name=\"twitter:app:name:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:name:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:name:googleplay\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:url:googleplay\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:iphone\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:ipad\" content=\"\">';\n\t\t $out .= '<meta name=\"twitter:app:id:googleplay\" content=\"\">';\n\t\t */\n\t}\n\n\treturn $out;\n}\n\n/**\n * Return HTML content to add structured data for an article, news or Blog Post.\n *\n * @return  string\t\t\t\t\t\t\tHTML content\n */\nfunction getSocialNetworkSharingLinks()\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$out = '<!-- section for social network sharing of page -->'.\"\\n\";\n\n\tif ($website->virtualhost) {\n\t\t$fullurl = $website->virtualhost.'/'.$websitepage->pageurl.'.php';\n\t\t$hashtags = trim(join(' #', array_map('trim', explode(',', $websitepage->keywords))));\n\n\t\t$out .= '<div class=\"dol-social-share\">'.\"\\n\";\n\n\t\t// Twitter\n\t\t$out .= '<div class=\"dol-social-share-tw\">'.\"\\n\";\n\t\t$out .= '<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"'.$fullurl.'\" data-text=\"'.dol_escape_htmltag($websitepage->description).'\" data-lang=\"'.$websitepage->lang.'\" data-size=\"small\" data-related=\"\" data-hashtags=\"'.preg_replace('/^#/', '', $hashtags).'\" data-count=\"horizontal\">Tweet</a>';\n\t\t$out .= '<script nonce=\"'.getNonce().'\">!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\\'http\\':\\'https\\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\\'://platform.twitter.com/widgets.js\\';fjs.parentNode.insertBefore(js,fjs);}}(document, \\'script\\', \\'twitter-wjs\\');</script>';\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t// Reddit\n\t\t$out .= '<div class=\"dol-social-share-reddit\">'.\"\\n\";\n\t\t$out .= '<a href=\"https://www.reddit.com/submit\" target=\"_blank\" rel=\"noopener noreferrer external\" onclick=\"window.location = \\'https://www.reddit.com/submit?url='.$fullurl.'\\'; return false\">';\n\t\t$out .= '<span class=\"dol-social-share-reddit-span\">Reddit</span>';\n\t\t$out .= '</a>';\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t// Facebook\n\t\t$out .= '<div class=\"dol-social-share-fbl\">'.\"\\n\";\n\t\t$out .= '<div id=\"fb-root\"></div>'.\"\\n\";\n\t\t$out .= '<script nonce=\"'.getNonce().'\">(function(d, s, id) {\n\t\t\t\t  var js, fjs = d.getElementsByTagName(s)[0];\n\t\t\t\t  if (d.getElementById(id)) return;\n\t\t\t\t  js = d.createElement(s); js.id = id;\n\t\t\t\t  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.0&amp;appId=dolibarr.org\";\n\t\t\t\t  fjs.parentNode.insertBefore(js, fjs);\n\t\t\t\t}(document, \\'script\\', \\'facebook-jssdk\\'));</script>\n\t\t\t\t        <fb:like\n\t\t\t\t        href=\"'.$fullurl.'\"\n\t\t\t\t        layout=\"button_count\"\n\t\t\t\t        show_faces=\"false\"\n\t\t\t\t        width=\"90\"\n\t\t\t\t        colorscheme=\"light\"\n\t\t\t\t        share=\"1\"\n\t\t\t\t        action=\"like\" ></fb:like>'.\"\\n\";\n\t\t$out .= '</div>'.\"\\n\";\n\n\t\t$out .= \"\\n</div>\\n\";\n\t} else {\n\t\t$out .= '<!-- virtual host not defined in CMS. No way to add sharing buttons -->'.\"\\n\";\n\t}\n\t$out .= '<!-- section end for social network sharing of page -->'.\"\\n\";\n\n\treturn $out;\n}\n\n/**\n * Return list of containers object that match a criteria.\n * WARNING: This function can be used by websites.\n *\n * @param \tstring\t\t$type\t\t\t\tType of container to search into (Example: '', 'page', 'blogpost', 'page,blogpost', ...)\n * @param \tstring\t\t$algo\t\t\t\tAlgorithm used for search (Example: 'meta' is searching into meta information like title and description, 'content', 'sitefiles', or any combination 'meta,content,...')\n * @param\tstring\t\t$searchstring\t\tSearch string\n * @param\tint\t\t\t$max\t\t\t\tMax number of answers\n * @param\tstring\t\t$sortfield\t\t\tSort Fields\n * @param\tstring\t\t$sortorder\t\t\tSort order ('DESC' or 'ASC')\n * @param\tstring\t\t$langcode\t\t\tLanguage code ('' or 'en', 'fr', 'es', ...)\n * @param\tarray\t\t$otherfilters\t\tOther filters\n * @param\tint\t\t\t$status\t\t\t\t0 or 1, or -1 for both\n * @return  array\t\t\t\t\t\t\tArray with results of search\n */\nfunction getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $sortfield = 'date_creation', $sortorder = 'DESC', $langcode = '', $otherfilters = 'null', $status = 1)\n{\n\tglobal $conf, $db, $hookmanager, $langs, $mysoc, $user, $website, $websitepage, $weblangs; // Very important. Required to have var available when running inluded containers.\n\n\t$error = 0;\n\t$arrayresult = array('code'=>'', 'list'=>array());\n\n\tif (!is_object($weblangs)) {\n\t\t$weblangs = $langs;\n\t}\n\n\tif (empty($searchstring) && empty($type) && empty($langcode) && empty($otherfilters)) {\n\t\t$error++;\n\t\t$arrayresult['code'] = 'KO';\n\t\t$arrayresult['message'] = $weblangs->trans(\"EmptySearchString\");\n\t} elseif ($searchstring && dol_strlen($searchstring) < 2) {\n\t\t$weblangs->load(\"errors\");\n\t\t$error++;\n\t\t$arrayresult['code'] = 'KO';\n\t\t$arrayresult['message'] = $weblangs->trans(\"ErrorSearchCriteriaTooSmall\");\n\t} else {\n\t\t$tmparrayoftype = explode(',', $type);\n\t\t/*foreach ($tmparrayoftype as $tmptype) {\n\t\t\tif (!in_array($tmptype, array('', 'page', 'blogpost'))) {\n\t\t\t\t$error++;\n\t\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t\t$arrayresult['message'] = 'Bad value for parameter type';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}*/\n\t}\n\n\t$searchdone = 0;\n\t$found = 0;\n\n\tif (!$error && (empty($max) || ($found < $max)) && (preg_match('/meta/', $algo) || preg_match('/content/', $algo))) {\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n\n\t\t$sql = 'SELECT wp.rowid FROM '.MAIN_DB_PREFIX.'website_page as wp';\n\t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n\t\t\t$sql .= ', '.MAIN_DB_PREFIX.'categorie_website_page as cwp';\n\t\t}\n\t\t$sql .= \" WHERE wp.fk_website = \".((int) $website->id);\n\t\tif ($status >= 0) {\n\t\t\t$sql .= \" AND wp.status = \".((int) $status);\n\t\t}\n\t\tif ($langcode) {\n\t\t\t$sql .= \" AND wp.lang = '\".$db->escape($langcode).\"'\";\n\t\t}\n\t\tif ($type) {\n\t\t\t$tmparrayoftype = explode(',', $type);\n\t\t\t$typestring = '';\n\t\t\tforeach ($tmparrayoftype as $tmptype) {\n\t\t\t\t$typestring .= ($typestring ? \", \" : \"\").\"'\".$db->escape(trim($tmptype)).\"'\";\n\t\t\t}\n\t\t\t$sql .= \" AND wp.type_container IN (\".$db->sanitize($typestring, 1).\")\";\n\t\t}\n\t\t$sql .= \" AND (\";\n\t\t$searchalgo = '';\n\t\tif (preg_match('/meta/', $algo)) {\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.title LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%' OR wp.description LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.keywords LIKE '\".$db->escape($db->escapeforlike($searchstring)).\",%' OR wp.keywords LIKE '% \".$db->escape($db->escapeforlike($searchstring)).\"%'\"; // TODO Use a better way to scan keywords\n\t\t}\n\t\tif (preg_match('/content/', $algo)) {\n\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.content LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n\t\t}\n\t\t$sql .= $searchalgo;\n\t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n\t\t\t$sql .= ' AND cwp.fk_website_page = wp.rowid AND cwp.fk_categorie = '.((int) $otherfilters['category']);\n\t\t}\n\t\t$sql .= \")\";\n\t\t$sql .= $db->order($sortfield, $sortorder);\n\t\t$sql .= $db->plimit($max);\n\t\t//print $sql;\n\n\t\t$resql = $db->query($sql);\n\n\t\tif ($resql) {\n\t\t\t$i = 0;\n\t\t\twhile (($obj = $db->fetch_object($resql)) && ($i < $max || $max == 0)) {\n\t\t\t\tif ($obj->rowid > 0) {\n\t\t\t\t\t$tmpwebsitepage = new WebsitePage($db);\n\t\t\t\t\t$tmpwebsitepage->fetch($obj->rowid);\n\t\t\t\t\tif ($tmpwebsitepage->id > 0) {\n\t\t\t\t\t\t$arrayresult['list'][$obj->rowid] = $tmpwebsitepage;\n\t\t\t\t\t}\n\t\t\t\t\t$found++;\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$arrayresult['code'] = $db->lasterrno();\n\t\t\t$arrayresult['message'] = $db->lasterror();\n\t\t}\n\n\t\t$searchdone = 1;\n\t}\n\n\tif (!$error && (empty($max) || ($found < $max)) && (preg_match('/sitefiles/', $algo))) {\n\t\tglobal $dolibarr_main_data_root;\n\n\t\t$pathofwebsite = $dolibarr_main_data_root.($conf->entity > 1 ? '/'.$conf->entity : '').'/website/'.$website->ref;\n\t\t$filehtmlheader = $pathofwebsite.'/htmlheader.html';\n\t\t$filecss = $pathofwebsite.'/styles.css.php';\n\t\t$filejs = $pathofwebsite.'/javascript.js.php';\n\t\t$filerobot = $pathofwebsite.'/robots.txt';\n\t\t$filehtaccess = $pathofwebsite.'/.htaccess';\n\t\t$filemanifestjson = $pathofwebsite.'/manifest.json.php';\n\t\t$filereadme = $pathofwebsite.'/README.md';\n\n\t\t$filecontent = file_get_contents($filehtmlheader);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_htmlheadercontent');\n\t\t}\n\n\t\t$filecontent = file_get_contents($filecss);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_csscontent');\n\t\t}\n\n\t\t$filecontent = file_get_contents($filejs);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_jscontent');\n\t\t}\n\n\t\t$filerobot = file_get_contents($filerobot);\n\t\tif ((empty($max) || ($found < $max)) && preg_match('/'.preg_quote($searchstring, '/').'/', $filecontent)) {\n\t\t\t$arrayresult['list'][] = array('type'=>'website_robotcontent');\n\t\t}\n\n\t\t$searchdone = 1;\n\t}\n\n\tif (!$error) {\n\t\tif ($searchdone) {\n\t\t\t$arrayresult['code'] = 'OK';\n\t\t\tif (empty($arrayresult['list'])) {\n\t\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t\t$arrayresult['message'] = $weblangs->trans(\"NoRecordFound\");\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$arrayresult['code'] = 'KO';\n\t\t\t$arrayresult['message'] = 'No supported algorithm found';\n\t\t}\n\t}\n\n\treturn $arrayresult;\n}\n\n/**\n * Download all images found into page content $tmp.\n * If $modifylinks is set, links to images will be replace with a link to viewimage wrapper.\n *\n * @param \tWebsite\t \t$object\t\t\tObject website\n * @param \tWebsitePage\t$objectpage\t\tObject website page\n * @param \tstring\t\t$urltograb\t\tURL to grab (exemple: http://www.nltechno.com/ or http://www.nltechno.com/dir1/ or http://www.nltechno.com/dir1/mapage1)\n * @param \tstring\t\t$tmp\t\t\tContent to parse\n * @param \tstring\t\t$action\t\t\tVar $action\n * @param\tstring\t\t$modifylinks\t0=Do not modify content, 1=Replace links with a link to viewimage\n * @param\tint\t\t\t$grabimages\t\t0=Do not grab images, 1=Grab images\n * @param\tstring\t\t$grabimagesinto\t'root' or 'subpage'\n * @return\tvoid\n */\nfunction getAllImages($object, $objectpage, $urltograb, &$tmp, &$action, $modifylinks = 0, $grabimages = 1, $grabimagesinto = 'subpage')\n{\n\tglobal $conf;\n\n\t$error = 0;\n\n\tdol_syslog(\"Call getAllImages with grabimagesinto=\".$grabimagesinto);\n\n\t$alreadygrabbed = array();\n\n\tif (preg_match('/\\/$/', $urltograb)) {\n\t\t$urltograb .= '.';\n\t}\n\t$urltograb = dirname($urltograb); // So urltograb is now http://www.nltechno.com or http://www.nltechno.com/dir1\n\n\t// Search X in \"img...src=X\"\n\t$regs = array();\n\tpreg_match_all('/<img([^\\.\\/]+)src=\"([^>\"]+)\"([^>]*)>/i', $tmp, $regs);\n\n\tforeach ($regs[0] as $key => $val) {\n\t\tif (preg_match('/^data:image/i', $regs[2][$key])) {\n\t\t\tcontinue; // We do nothing for such images\n\t\t}\n\n\t\tif (preg_match('/^\\//', $regs[2][$key])) {\n\t\t\t$urltograbdirrootwithoutslash = getRootURLFromURL($urltograb);\n\t\t\t$urltograbbis = $urltograbdirrootwithoutslash.$regs[2][$key]; // We use dirroot\n\t\t} else {\n\t\t\t$urltograbbis = $urltograb.'/'.$regs[2][$key]; // We use dir of grabbed file\n\t\t}\n\n\t\t$linkwithoutdomain = $regs[2][$key];\n\t\t$dirforimages = '/'.$objectpage->pageurl;\n\t\tif ($grabimagesinto == 'root') {\n\t\t\t$dirforimages = '';\n\t\t}\n\n\t\t// Define $filetosave and $filename\n\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $regs[2][$key]) ? '' : '/').$regs[2][$key];\n\t\tif (preg_match('/^http/', $regs[2][$key])) {\n\t\t\t$urltograbbis = $regs[2][$key];\n\t\t\t$linkwithoutdomain = preg_replace('/^https?:\\/\\/[^\\/]+\\//i', '', $regs[2][$key]);\n\t\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\t\t}\n\t\t$filename = 'image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\n\t\t// Clean the aa/bb/../cc into aa/cc\n\t\t$filetosave = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filetosave);\n\t\t$filename = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filename);\n\n\t\t//var_dump($filetosave);\n\t\t//var_dump($filename);\n\t\t//exit;\n\n\t\tif (empty($alreadygrabbed[$urltograbbis])) {\n\t\t\tif ($grabimages) {\n\t\t\t\t$tmpgeturl = getURLContent($urltograbbis, 'GET', '', 1, array(), array('http', 'https'), 0);\n\t\t\t\tif ($tmpgeturl['curl_error_no']) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['curl_error_msg'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} elseif ($tmpgeturl['http_code'] != '200') {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['http_code'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} else {\n\t\t\t\t\t$alreadygrabbed[$urltograbbis] = 1; // Track that file was alreay grabbed.\n\n\t\t\t\t\tdol_mkdir(dirname($filetosave));\n\n\t\t\t\t\t$fp = fopen($filetosave, \"w\");\n\t\t\t\t\tfputs($fp, $tmpgeturl['content']);\n\t\t\t\t\tfclose($fp);\n\t\t\t\t\tdolChmod($filetosave);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($modifylinks) {\n\t\t\t$tmp = preg_replace('/'.preg_quote($regs[0][$key], '/').'/i', '<img'.$regs[1][$key].'src=\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file='.$filename.'\"'.$regs[3][$key].'>', $tmp);\n\t\t}\n\t}\n\n\t// Search X in \"background...url(X)\"\n\tpreg_match_all('/background([^\\.\\/\\(;]+)url\\([\\\"\\']?([^\\)\\\"\\']*)[\\\"\\']?\\)/i', $tmp, $regs);\n\n\tforeach ($regs[0] as $key => $val) {\n\t\tif (preg_match('/^data:image/i', $regs[2][$key])) {\n\t\t\tcontinue; // We do nothing for such images\n\t\t}\n\n\t\tif (preg_match('/^\\//', $regs[2][$key])) {\n\t\t\t$urltograbdirrootwithoutslash = getRootURLFromURL($urltograb);\n\t\t\t$urltograbbis = $urltograbdirrootwithoutslash.$regs[2][$key]; // We use dirroot\n\t\t} else {\n\t\t\t$urltograbbis = $urltograb.'/'.$regs[2][$key]; // We use dir of grabbed file\n\t\t}\n\n\t\t$linkwithoutdomain = $regs[2][$key];\n\n\t\t$dirforimages = '/'.$objectpage->pageurl;\n\t\tif ($grabimagesinto == 'root') {\n\t\t\t$dirforimages = '';\n\t\t}\n\n\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $regs[2][$key]) ? '' : '/').$regs[2][$key];\n\n\t\tif (preg_match('/^http/', $regs[2][$key])) {\n\t\t\t$urltograbbis = $regs[2][$key];\n\t\t\t$linkwithoutdomain = preg_replace('/^https?:\\/\\/[^\\/]+\\//i', '', $regs[2][$key]);\n\t\t\t$filetosave = $conf->medias->multidir_output[$conf->entity].'/image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\t\t}\n\n\t\t$filename = 'image/'.$object->ref.$dirforimages.(preg_match('/^\\//', $linkwithoutdomain) ? '' : '/').$linkwithoutdomain;\n\n\t\t// Clean the aa/bb/../cc into aa/cc\n\t\t$filetosave = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filetosave);\n\t\t$filename = preg_replace('/\\/[^\\/]+\\/\\.\\./', '', $filename);\n\n\t\t//var_dump($filetosave);\n\t\t//var_dump($filename);\n\t\t//exit;\n\n\t\tif (empty($alreadygrabbed[$urltograbbis])) {\n\t\t\tif ($grabimages) {\n\t\t\t\t$tmpgeturl = getURLContent($urltograbbis, 'GET', '', 1, array(), array('http', 'https'), 0);\n\t\t\t\tif ($tmpgeturl['curl_error_no']) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['curl_error_msg'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} elseif ($tmpgeturl['http_code'] != '200') {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages('Error getting '.$urltograbbis.': '.$tmpgeturl['http_code'], null, 'errors');\n\t\t\t\t\t$action = 'create';\n\t\t\t\t} else {\n\t\t\t\t\t$alreadygrabbed[$urltograbbis] = 1; // Track that file was alreay grabbed.\n\n\t\t\t\t\tdol_mkdir(dirname($filetosave));\n\n\t\t\t\t\t$fp = fopen($filetosave, \"w\");\n\t\t\t\t\tfputs($fp, $tmpgeturl['content']);\n\t\t\t\t\tfclose($fp);\n\t\t\t\t\tdolChmod($filetosave);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($modifylinks) {\n\t\t\t$tmp = preg_replace('/'.preg_quote($regs[0][$key], '/').'/i', 'background'.$regs[1][$key].'url(\"'.DOL_URL_ROOT.'/viewimage.php?modulepart=medias&file='.$filename.'\")', $tmp);\n\t\t}\n\t}\n}\n", "<?php\n/* Copyright (C) 2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2023 Alexandre Janniaux   <alexandre.janniaux@gmail.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/WebsiteTest.php\n *\t\t\\ingroup    test\n *      \\brief      PHPUnit test\n *\t\t\\remarks\tTo run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\n\nif (! defined('NOREQUIRESOC')) {\n\tdefine('NOREQUIRESOC', '1');\n}\nif (! defined('NOCSRFCHECK')) {\n\tdefine('NOCSRFCHECK', '1');\n}\nif (! defined('NOTOKENRENEWAL')) {\n\tdefine('NOTOKENRENEWAL', '1');\n}\nif (! defined('NOREQUIREMENU')) {\n\tdefine('NOREQUIREMENU', '1'); // If there is no menu to show\n}\nif (! defined('NOREQUIREHTML')) {\n\tdefine('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\n}\nif (! defined('NOREQUIREAJAX')) {\n\tdefine('NOREQUIREAJAX', '1');\n}\nif (! defined(\"NOLOGIN\")) {\n\tdefine(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n}\nif (! defined(\"NOSESSION\")) {\n\tdefine(\"NOSESSION\", '1');\n}\n\nrequire_once dirname(__FILE__).'/../../htdocs/main.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/website.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/website2.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/website/class/website.class.php';\n\n\nif (empty($user->id)) {\n\tprint \"Load permissions for admin user nb 1\\n\";\n\t$user->fetch(1);\n\t$user->getrights();\n\n\tif (empty($user->rights->website)) {\n\t\t$user->rights->website = new stdClass();\n\t}\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass WebsiteTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @param \tstring\t$name\t\tName\n\t * @return WebsiteTest\n\t */\n\tpublic function __construct($name = '')\n\t{\n\t\tparent::__construct($name);\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n\t/**\n\t * setUpBeforeClass\n\t *\n\t * @return void\n\t */\n\tpublic static function setUpBeforeClass(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->begin();\t// This is to have all actions inside a transaction even if test launched without suite.\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * tearDownAfterClass\n\t *\n\t * @return\tvoid\n\t */\n\tpublic static function tearDownAfterClass(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n\tprotected function setUp(): void\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return\tvoid\n\t */\n\tprotected function tearDown(): void\n\t{\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\n\t/**\n\t * testGetPagesFromSearchCriterias\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testGetPagesFromSearchCriterias()\n\t{\n\t\tglobal $db, $website;\n\n\t\t$website = new Website($db);\t// $website must be defined globally for getPagesFromSearchCriterias()\n\n\t\t$s = \"123') OR 1=1-- \\' xxx\";\n\t\t/*\n\t\t var_dump($s);\n\t\t var_dump($db->escapeforlike($s));\n\t\t var_dump($db->escape($db->escapeforlike($s)));\n\t\t */\n\n\t\t$res = getPagesFromSearchCriterias('page,blogpost', 'meta,content', $s, 2, 'date_creation', 'DESC', 'en');\n\t\t//var_dump($res);\n\t\tprint __METHOD__.\" message=\".$res['code'].\"\\n\";\n\t\t// We must found no line (so code should be KO). If we found somethiing, it means there is a SQL injection of the 1=1\n\t\t$this->assertEquals($res['code'], 'KO');\n\t}\n\n\t/**\n\t * testDolStripPhpCode\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testDolStripPhpCode()\n\t{\n\t\tglobal $db;\n\n\t\t$s = \"abc\\n<?php echo 'def'\\n// comment\\n ?>ghi\";\n\t\t$result = dolStripPhpCode($s);\n\t\t$this->assertEquals(\"abc\\n<span phptag></span>ghi\", $result);\n\n\t\t$s = \"abc\\n<?PHP echo 'def'\\n// comment\\n ?>ghi\";\n\t\t$result = dolStripPhpCode($s);\n\t\t$this->assertEquals(\"abc\\n<span phptag></span>ghi\", $result);\n\t}\n\n\t/**\n\t * testCheckPHPCode\n\t *\n\t * @return\tvoid\n\t */\n\tpublic function testCheckPHPCode()\n\t{\n\t\tglobal $user;\n\n\t\t// Force permission so this is not the permission that will affect result of checkPHPCode\n\t\t$user->rights->website->writephp = 1;\n\n\t\t$s = '<?php exec(\"eee\"); ?>';\n\t\t$result = checkPHPCode('', $s);\n\t\tprint __METHOD__.\" result checkPHPCode=\".$result.\"\\n\";\n\t\t$this->assertEquals($result, 1, 'checkPHPCode did not detect the string was dangerous');\n\n\t\t$s = '<?php $_=\"{\"; $_=($_^\"<\").($_^\">;\").($_^\"/\"); ?><?=${\\'_\\'.$_}[\"_\"](${\\'_\\'.$_}[\"__\"]);?>';\n\t\t$result = checkPHPCode('', $s);\n\t\tprint __METHOD__.\" result checkPHPCode=\".$result.\"\\n\";\n\t\t$this->assertEquals($result, 1, 'checkPHPCode did not detect the string was dangerous');\n\t}\n\n\t/**\n\t * testDolKeepOnlyPhpCode\n\t *\n\t * @return void\n\t */\n\tpublic function testDolKeepOnlyPhpCode()\n\t{\n\t\t$s = 'HTML content <?php exec(\"eee\"); ?> and more HTML content';\n\t\t$result = dolKeepOnlyPhpCode($s);\n\t\tprint __METHOD__.\" result dolKeepOnlyPhpCode=\".$result.\"\\n\";\n\t\t$this->assertEquals('<?php exec(\"eee\"); ?>', $result, 'dolKeepOnlyPhpCode did extract the correct string');\n\n\t\t$s = 'HTML content <? exec(\"eee\"); ?> and more HTML content';\n\t\t$result = dolKeepOnlyPhpCode($s);\n\t\tprint __METHOD__.\" result dolKeepOnlyPhpCode=\".$result.\"\\n\";\n\t\t$this->assertEquals('<?php exec(\"eee\"); ?>', $result, 'dolKeepOnlyPhpCode did extract the correct string');\n\n\t\t$s = 'HTML content <?php test() <?php test2(); ?> and more HTML content';\n\t\t$result = dolKeepOnlyPhpCode($s);\n\t\tprint __METHOD__.\" result dolKeepOnlyPhpCode=\".$result.\"\\n\";\n\t\t$this->assertEquals('<?php test() ?><?php test2(); ?>', $result, 'dolKeepOnlyPhpCode did extract the correct string');\n\t}\n}\n"], "filenames": ["htdocs/core/lib/website.lib.php", "test/phpunit/WebsiteTest.php"], "buggy_code_start_loc": [78, 229], "buggy_code_end_loc": [78, 230], "fixing_code_start_loc": [79, 229], "fixing_code_end_loc": [82, 253], "type": "CWE-74", "message": "Improper input validation in Dolibarr ERP CRM <= v18.0.1 fails to strip certain PHP code from user-supplied input when creating a Website, allowing an attacker to inject and evaluate arbitrary PHP code.", "other": {"cve": {"id": "CVE-2023-4197", "sourceIdentifier": "info@starlabs.sg", "published": "2023-11-01T08:15:07.333", "lastModified": "2023-11-08T19:47:53.387", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper input validation in Dolibarr ERP CRM <= v18.0.1 fails to strip certain PHP code from user-supplied input when creating a Website, allowing an attacker to inject and evaluate arbitrary PHP code."}, {"lang": "es", "value": "La validaci\u00f3n de entrada incorrecta en Dolibarr ERP CRM  versiones &lt;= 18.0.1 no elimina cierto c\u00f3digo PHP de la entrada proporcionada por el usuario al crear un sitio web, lo que permite a un atacante inyectar y evaluar c\u00f3digo PHP arbitrario."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "info@starlabs.sg", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}, {"source": "info@starlabs.sg", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:*:*:*:*:*:*:*", "versionEndIncluding": "18.0.1", "matchCriteriaId": "C140890A-4169-47C2-948C-E3B935BA14FC"}]}]}], "references": [{"url": "https://github.com/Dolibarr/dolibarr/commit/0ed6a63fb06be88be5a4f8bcdee83185eee4087e", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://starlabs.sg/advisories/23/23-4197", "source": "info@starlabs.sg", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/0ed6a63fb06be88be5a4f8bcdee83185eee4087e"}}