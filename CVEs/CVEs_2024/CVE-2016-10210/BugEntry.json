{"buggy_code": ["#line 2 \"re_lexer.c\"\n\n#line 4 \"re_lexer.c\"\n\n#define  YY_INT_ALIGNED short int\n\n/* A lexical scanner generated by flex */\n\n#define FLEX_SCANNER\n#define YY_FLEX_MAJOR_VERSION 2\n#define YY_FLEX_MINOR_VERSION 6\n#define YY_FLEX_SUBMINOR_VERSION 0\n#if YY_FLEX_SUBMINOR_VERSION > 0\n#define FLEX_BETA\n#endif\n\n/* First, we deal with  platform-specific or compiler-specific issues. */\n\n/* begin standard C headers. */\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdlib.h>\n\n/* end standard C headers. */\n\n/* flex integer type definitions */\n\n#ifndef FLEXINT_H\n#define FLEXINT_H\n\n/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */\n\n#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n\n/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,\n * if you want the limit (max/min) macros for int types. \n */\n#ifndef __STDC_LIMIT_MACROS\n#define __STDC_LIMIT_MACROS 1\n#endif\n\n#include <inttypes.h>\ntypedef int8_t flex_int8_t;\ntypedef uint8_t flex_uint8_t;\ntypedef int16_t flex_int16_t;\ntypedef uint16_t flex_uint16_t;\ntypedef int32_t flex_int32_t;\ntypedef uint32_t flex_uint32_t;\n#else\ntypedef signed char flex_int8_t;\ntypedef short int flex_int16_t;\ntypedef int flex_int32_t;\ntypedef unsigned char flex_uint8_t; \ntypedef unsigned short int flex_uint16_t;\ntypedef unsigned int flex_uint32_t;\n\n/* Limits of integral types. */\n#ifndef INT8_MIN\n#define INT8_MIN               (-128)\n#endif\n#ifndef INT16_MIN\n#define INT16_MIN              (-32767-1)\n#endif\n#ifndef INT32_MIN\n#define INT32_MIN              (-2147483647-1)\n#endif\n#ifndef INT8_MAX\n#define INT8_MAX               (127)\n#endif\n#ifndef INT16_MAX\n#define INT16_MAX              (32767)\n#endif\n#ifndef INT32_MAX\n#define INT32_MAX              (2147483647)\n#endif\n#ifndef UINT8_MAX\n#define UINT8_MAX              (255U)\n#endif\n#ifndef UINT16_MAX\n#define UINT16_MAX             (65535U)\n#endif\n#ifndef UINT32_MAX\n#define UINT32_MAX             (4294967295U)\n#endif\n\n#endif /* ! C99 */\n\n#endif /* ! FLEXINT_H */\n\n#ifdef __cplusplus\n\n/* The \"const\" storage-class-modifier is valid. */\n#define YY_USE_CONST\n\n#else\t/* ! __cplusplus */\n\n/* C99 requires __STDC__ to be defined as 1. */\n#if defined (__STDC__)\n\n#define YY_USE_CONST\n\n#endif\t/* defined (__STDC__) */\n#endif\t/* ! __cplusplus */\n\n#ifdef YY_USE_CONST\n#define yyconst const\n#else\n#define yyconst\n#endif\n\n/* Returned upon end-of-file. */\n#define YY_NULL 0\n\n/* Promotes a possibly negative, possibly signed char to an unsigned\n * integer for use as an array index.  If the signed char is negative,\n * we want to instead treat it as an 8-bit unsigned char, hence the\n * double cast.\n */\n#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)\n\n/* An opaque pointer. */\n#ifndef YY_TYPEDEF_YY_SCANNER_T\n#define YY_TYPEDEF_YY_SCANNER_T\ntypedef void* yyscan_t;\n#endif\n\n/* For convenience, these vars (plus the bison vars far below)\n   are macros in the reentrant scanner. */\n#define yyin yyg->yyin_r\n#define yyout yyg->yyout_r\n#define yyextra yyg->yyextra_r\n#define yyleng yyg->yyleng_r\n#define yytext yyg->yytext_r\n#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)\n#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)\n#define yy_flex_debug yyg->yy_flex_debug_r\n\n/* Enter a start condition.  This macro really ought to take a parameter,\n * but we do it the disgusting crufty way forced on us by the ()-less\n * definition of BEGIN.\n */\n#define BEGIN yyg->yy_start = 1 + 2 *\n\n/* Translate the current start state into a value that can be later handed\n * to BEGIN to return to the state.  The YYSTATE alias is for lex\n * compatibility.\n */\n#define YY_START ((yyg->yy_start - 1) / 2)\n#define YYSTATE YY_START\n\n/* Action number for EOF rule of a given start state. */\n#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)\n\n/* Special action meaning \"start processing a new file\". */\n#define YY_NEW_FILE re_yyrestart(yyin ,yyscanner )\n\n#define YY_END_OF_BUFFER_CHAR 0\n\n/* Size of default input buffer. */\n#ifndef YY_BUF_SIZE\n#ifdef __ia64__\n/* On IA-64, the buffer size is 16k, not 8k.\n * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.\n * Ditto for the __ia64__ case accordingly.\n */\n#define YY_BUF_SIZE 32768\n#else\n#define YY_BUF_SIZE 16384\n#endif /* __ia64__ */\n#endif\n\n/* The state buf must be large enough to hold one state per character in the main buffer.\n */\n#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))\n\n#ifndef YY_TYPEDEF_YY_BUFFER_STATE\n#define YY_TYPEDEF_YY_BUFFER_STATE\ntypedef struct yy_buffer_state *YY_BUFFER_STATE;\n#endif\n\n#ifndef YY_TYPEDEF_YY_SIZE_T\n#define YY_TYPEDEF_YY_SIZE_T\ntypedef size_t yy_size_t;\n#endif\n\n#define EOB_ACT_CONTINUE_SCAN 0\n#define EOB_ACT_END_OF_FILE 1\n#define EOB_ACT_LAST_MATCH 2\n\n    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires\n     *       access to the local variable yy_act. Since yyless() is a macro, it would break\n     *       existing scanners that call yyless() from OUTSIDE re_yylex. \n     *       One obvious solution it to make yy_act a global. I tried that, and saw\n     *       a 5% performance hit in a non-yylineno scanner, because yy_act is\n     *       normally declared as a register variable-- so it is not worth it.\n     */\n    #define  YY_LESS_LINENO(n) \\\n            do { \\\n                int yyl;\\\n                for ( yyl = n; yyl < yyleng; ++yyl )\\\n                    if ( yytext[yyl] == '\\n' )\\\n                        --yylineno;\\\n            }while(0)\n    #define YY_LINENO_REWIND_TO(dst) \\\n            do {\\\n                const char *p;\\\n                for ( p = yy_cp-1; p >= (dst); --p)\\\n                    if ( *p == '\\n' )\\\n                        --yylineno;\\\n            }while(0)\n    \n/* Return all but the first \"n\" matched characters back to the input stream. */\n#define yyless(n) \\\n\tdo \\\n\t\t{ \\\n\t\t/* Undo effects of setting up yytext. */ \\\n        int yyless_macro_arg = (n); \\\n        YY_LESS_LINENO(yyless_macro_arg);\\\n\t\t*yy_cp = yyg->yy_hold_char; \\\n\t\tYY_RESTORE_YY_MORE_OFFSET \\\n\t\tyyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \\\n\t\tYY_DO_BEFORE_ACTION; /* set up yytext again */ \\\n\t\t} \\\n\twhile ( 0 )\n\n#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )\n\n#ifndef YY_STRUCT_YY_BUFFER_STATE\n#define YY_STRUCT_YY_BUFFER_STATE\nstruct yy_buffer_state\n\t{\n\tFILE *yy_input_file;\n\n\tchar *yy_ch_buf;\t\t/* input buffer */\n\tchar *yy_buf_pos;\t\t/* current position in input buffer */\n\n\t/* Size of input buffer in bytes, not including room for EOB\n\t * characters.\n\t */\n\tyy_size_t yy_buf_size;\n\n\t/* Number of characters read into yy_ch_buf, not including EOB\n\t * characters.\n\t */\n\tyy_size_t yy_n_chars;\n\n\t/* Whether we \"own\" the buffer - i.e., we know we created it,\n\t * and can realloc() it to grow it, and should free() it to\n\t * delete it.\n\t */\n\tint yy_is_our_buffer;\n\n\t/* Whether this is an \"interactive\" input source; if so, and\n\t * if we're using stdio for input, then we want to use getc()\n\t * instead of fread(), to make sure we stop fetching input after\n\t * each newline.\n\t */\n\tint yy_is_interactive;\n\n\t/* Whether we're considered to be at the beginning of a line.\n\t * If so, '^' rules will be active on the next match, otherwise\n\t * not.\n\t */\n\tint yy_at_bol;\n\n    int yy_bs_lineno; /**< The line count. */\n    int yy_bs_column; /**< The column count. */\n    \n\t/* Whether to try to fill the input buffer when we reach the\n\t * end of it.\n\t */\n\tint yy_fill_buffer;\n\n\tint yy_buffer_status;\n\n#define YY_BUFFER_NEW 0\n#define YY_BUFFER_NORMAL 1\n\t/* When an EOF's been seen but there's still some text to process\n\t * then we mark the buffer as YY_EOF_PENDING, to indicate that we\n\t * shouldn't try reading from the input source any more.  We might\n\t * still have a bunch of tokens to match, though, because of\n\t * possible backing-up.\n\t *\n\t * When we actually see the EOF, we change the status to \"new\"\n\t * (via re_yyrestart()), so that the user can continue scanning by\n\t * just pointing yyin at a new input file.\n\t */\n#define YY_BUFFER_EOF_PENDING 2\n\n\t};\n#endif /* !YY_STRUCT_YY_BUFFER_STATE */\n\n/* We provide macros for accessing buffer states in case in the\n * future we want to put the buffer states in a more general\n * \"scanner state\".\n *\n * Returns the top of the stack, or NULL.\n */\n#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \\\n                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \\\n                          : NULL)\n\n/* Same as previous macro, but useful when we know that the buffer stack is not\n * NULL or when we need an lvalue. For internal use only.\n */\n#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]\n\nvoid re_yyrestart (FILE *input_file ,yyscan_t yyscanner );\nvoid re_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );\nvoid re_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );\nvoid re_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );\nvoid re_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );\nvoid re_yypop_buffer_state (yyscan_t yyscanner );\n\nstatic void re_yyensure_buffer_stack (yyscan_t yyscanner );\nstatic void re_yy_load_buffer_state (yyscan_t yyscanner );\nstatic void re_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );\n\n#define YY_FLUSH_BUFFER re_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)\n\nYY_BUFFER_STATE re_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );\n\nvoid *re_yyalloc (yy_size_t ,yyscan_t yyscanner );\nvoid *re_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );\nvoid re_yyfree (void * ,yyscan_t yyscanner );\n\n#define yy_new_buffer re_yy_create_buffer\n\n#define yy_set_interactive(is_interactive) \\\n\t{ \\\n\tif ( ! YY_CURRENT_BUFFER ){ \\\n        re_yyensure_buffer_stack (yyscanner); \\\n\t\tYY_CURRENT_BUFFER_LVALUE =    \\\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\\n\t} \\\n\tYY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \\\n\t}\n\n#define yy_set_bol(at_bol) \\\n\t{ \\\n\tif ( ! YY_CURRENT_BUFFER ){\\\n        re_yyensure_buffer_stack (yyscanner); \\\n\t\tYY_CURRENT_BUFFER_LVALUE =    \\\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\\n\t} \\\n\tYY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \\\n\t}\n\n#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)\n\n/* Begin user sect3 */\n\n#define re_yywrap(yyscanner) (/*CONSTCOND*/1)\n#define YY_SKIP_YYWRAP\n\ntypedef unsigned char YY_CHAR;\n\ntypedef int yy_state_type;\n\n#define yytext_ptr yytext_r\n\nstatic yy_state_type yy_get_previous_state (yyscan_t yyscanner );\nstatic yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);\nstatic int yy_get_next_buffer (yyscan_t yyscanner );\n#if defined(__GNUC__) && __GNUC__ >= 3\n__attribute__((__noreturn__))\n#endif\nstatic void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );\n\n/* Done after the current pattern has been matched and before the\n * corresponding action - sets up yytext.\n */\n#define YY_DO_BEFORE_ACTION \\\n\tyyg->yytext_ptr = yy_bp; \\\n\tyyleng = (size_t) (yy_cp - yy_bp); \\\n\tyyg->yy_hold_char = *yy_cp; \\\n\t*yy_cp = '\\0'; \\\n\tyyg->yy_c_buf_p = yy_cp;\n\n#define YY_NUM_RULES 29\n#define YY_END_OF_BUFFER 30\n/* This struct is not used in this scanner,\n   but its presence is necessary. */\nstruct yy_trans_info\n\t{\n\tflex_int32_t yy_verify;\n\tflex_int32_t yy_nxt;\n\t};\nstatic yyconst flex_int16_t yy_accept[45] =\n    {   0,\n        0,    0,    0,    0,   30,    7,    7,   28,    6,   17,\n        7,   27,   29,   26,   18,    5,    3,   16,   15,   13,\n       11,    9,   14,   12,   10,    8,    0,    0,    0,    0,\n       25,   23,   21,   24,   22,   20,    0,    4,    0,    1,\n        2,   19,    0,    0\n    } ;\n\nstatic yyconst YY_CHAR yy_ec[256] =\n    {   0,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    3,    1,    1,    1,    3,\n        3,    3,    3,    4,    5,    3,    1,    6,    6,    6,\n        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,\n        1,    1,    3,    1,    7,    8,    7,    9,    7,    7,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,   10,    1,    1,    1,   11,    1,    1,    1,\n       12,   13,   14,   15,    1,    1,    7,   16,    7,   17,\n\n        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,   18,    1,    1,    1,   19,   20,\n        1,    1,   21,    3,   22,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1\n    } ;\n\nstatic yyconst YY_CHAR yy_meta[23] =\n    {   0,\n        1,    2,    1,    1,    3,    4,    4,    4,    4,    1,\n        1,    1,    1,    5,    1,    4,    4,    1,    1,    1,\n        1,    1\n    } ;\n\nstatic yyconst flex_uint16_t yy_base[51] =\n    {   0,\n        0,   20,    3,    5,   50,   89,   89,   89,   10,   36,\n        0,   44,   43,   47,   38,   89,   26,   33,   89,   89,\n       89,   89,   89,   89,   89,   89,    4,    5,    0,   33,\n       32,   31,   29,   26,   24,   23,   15,   89,    8,   89,\n       89,   89,    0,   89,   67,   72,   77,   82,   84,    4\n    } ;\n\nstatic yyconst flex_int16_t yy_def[51] =\n    {   0,\n       45,   45,   46,   46,   44,   44,   44,   44,   44,   44,\n       44,   44,   44,   47,   44,   44,   44,   44,   44,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   48,   44,\n       44,   44,   44,   44,   44,   44,   49,   44,   44,   44,\n       44,   44,   50,    0,   44,   44,   44,   44,   44,   44\n    } ;\n\nstatic yyconst flex_uint16_t yy_nxt[112] =\n    {   0,\n       44,    7,    8,   27,   13,   28,   13,   30,   27,   39,\n       28,    9,   10,   39,    8,   14,   15,   14,   15,   29,\n       11,    7,    8,   16,   17,   40,   41,   29,   29,   40,\n       29,    9,   10,   29,    8,   29,   29,   29,   18,   38,\n       11,   18,   29,   19,   20,   21,   22,   29,   29,   44,\n       44,   23,   24,   25,   26,   31,   32,   33,   44,   44,\n       44,   44,   44,   34,   35,   36,   37,    6,    6,    6,\n        6,    6,   12,   12,   12,   12,   12,   30,   44,   30,\n       30,   30,   42,   42,   42,   42,   43,   43,    5,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n       44\n    } ;\n\nstatic yyconst flex_int16_t yy_chk[112] =\n    {   0,\n        0,    1,    1,   11,    3,   11,    4,   50,   28,   27,\n       28,    1,    1,   39,    1,    3,    3,    4,    4,   37,\n        1,    2,    2,    9,    9,   27,   28,   36,   35,   39,\n       34,    2,    2,   33,    2,   32,   31,   30,   18,   17,\n        2,   10,   15,   10,   10,   10,   10,   13,   12,    5,\n        0,   10,   10,   10,   10,   14,   14,   14,    0,    0,\n        0,    0,    0,   14,   14,   14,   14,   45,   45,   45,\n       45,   45,   46,   46,   46,   46,   46,   47,    0,   47,\n       47,   47,   48,   48,   48,   48,   49,   49,   44,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n       44\n    } ;\n\n/* Table of booleans, true if rule could match eol. */\nstatic yyconst flex_int32_t yy_rule_can_match_eol[30] =\n    {   0,\n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };\n\n/* The intent behind this definition is that it'll catch\n * any uses of REJECT which flex missed.\n */\n#define REJECT reject_used_but_not_detected\n#define yymore() yymore_used_but_not_detected\n#define YY_MORE_ADJ 0\n#define YY_RESTORE_YY_MORE_OFFSET\n#line 1 \"re_lexer.l\"\n/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/* Lexical analyzer for regular expressions */\n#line 33 \"re_lexer.l\"\n\n/* Disable warnings for unused functions in this file.\n\nAs we redefine YY_FATAL_ERROR macro to use our own function re_yyfatal, the\nyy_fatal_error function generated by Flex is not actually used, causing a\ncompiler warning. Flex doesn't offer any options to remove the yy_fatal_error\nfunction. When they include something like %option noyy_fatal_error as they do\nwith noyywrap then we can remove this pragma.\n*/\n\n#ifdef __GNUC__\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n#include <assert.h>\n#include <setjmp.h>\n\n\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n#include <yara/threading.h>\n#include <yara/strutils.h>\n\n\n#ifdef _WIN32\n#define snprintf _snprintf\n#endif\n\nstatic uint8_t word_chars[] = {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,\n    0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n\nuint8_t escaped_char_value(\n    char* text);\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char);\n\n#define YY_NO_UNISTD_H 1\n\n#line 586 \"re_lexer.c\"\n\n#define INITIAL 0\n#define char_class 1\n\n#ifndef YY_NO_UNISTD_H\n/* Special case for \"unistd.h\", since it is non-ANSI. We include it way\n * down here because we want the user's section 1 to have been scanned first.\n * The user has a chance to override it with an option.\n */\n#include <unistd.h>\n#endif\n\n#ifndef YY_EXTRA_TYPE\n#define YY_EXTRA_TYPE void *\n#endif\n\n/* Holds the entire state of the reentrant scanner. */\nstruct yyguts_t\n    {\n\n    /* User-defined. Not touched by flex. */\n    YY_EXTRA_TYPE yyextra_r;\n\n    /* The rest are the same as the globals declared in the non-reentrant scanner. */\n    FILE *yyin_r, *yyout_r;\n    size_t yy_buffer_stack_top; /**< index of top of stack. */\n    size_t yy_buffer_stack_max; /**< capacity of stack. */\n    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */\n    char yy_hold_char;\n    yy_size_t yy_n_chars;\n    yy_size_t yyleng_r;\n    char *yy_c_buf_p;\n    int yy_init;\n    int yy_start;\n    int yy_did_buffer_switch_on_eof;\n    int yy_start_stack_ptr;\n    int yy_start_stack_depth;\n    int *yy_start_stack;\n    yy_state_type yy_last_accepting_state;\n    char* yy_last_accepting_cpos;\n\n    int yylineno_r;\n    int yy_flex_debug_r;\n\n    char *yytext_r;\n    int yy_more_flag;\n    int yy_more_len;\n\n    YYSTYPE * yylval_r;\n\n    }; /* end struct yyguts_t */\n\nstatic int yy_init_globals (yyscan_t yyscanner );\n\n    /* This must go here because YYSTYPE and YYLTYPE are included\n     * from bison output in section 1.*/\n    #    define yylval yyg->yylval_r\n    \nint re_yylex_init (yyscan_t* scanner);\n\nint re_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);\n\n/* Accessor methods to globals.\n   These are made visible to non-reentrant scanners for convenience. */\n\nint re_yylex_destroy (yyscan_t yyscanner );\n\nint re_yyget_debug (yyscan_t yyscanner );\n\nvoid re_yyset_debug (int debug_flag ,yyscan_t yyscanner );\n\nYY_EXTRA_TYPE re_yyget_extra (yyscan_t yyscanner );\n\nvoid re_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );\n\nFILE *re_yyget_in (yyscan_t yyscanner );\n\nvoid re_yyset_in  (FILE * _in_str ,yyscan_t yyscanner );\n\nFILE *re_yyget_out (yyscan_t yyscanner );\n\nvoid re_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );\n\nyy_size_t re_yyget_leng (yyscan_t yyscanner );\n\nchar *re_yyget_text (yyscan_t yyscanner );\n\nint re_yyget_lineno (yyscan_t yyscanner );\n\nvoid re_yyset_lineno (int _line_number ,yyscan_t yyscanner );\n\nint re_yyget_column  (yyscan_t yyscanner );\n\nvoid re_yyset_column (int _column_no ,yyscan_t yyscanner );\n\nYYSTYPE * re_yyget_lval (yyscan_t yyscanner );\n\nvoid re_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );\n\n/* Macros after this point can all be overridden by user definitions in\n * section 1.\n */\n\n#ifndef YY_SKIP_YYWRAP\n#ifdef __cplusplus\nextern \"C\" int re_yywrap (yyscan_t yyscanner );\n#else\nextern int re_yywrap (yyscan_t yyscanner );\n#endif\n#endif\n\n#ifndef YY_NO_UNPUT\n    \n#endif\n\n#ifndef yytext_ptr\nstatic void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);\n#endif\n\n#ifdef YY_NEED_STRLEN\nstatic int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);\n#endif\n\n#ifndef YY_NO_INPUT\n\n#ifdef __cplusplus\nstatic int yyinput (yyscan_t yyscanner );\n#else\nstatic int input (yyscan_t yyscanner );\n#endif\n\n#endif\n\n/* Amount of stuff to slurp up with each read. */\n#ifndef YY_READ_BUF_SIZE\n#ifdef __ia64__\n/* On IA-64, the buffer size is 16k, not 8k */\n#define YY_READ_BUF_SIZE 16384\n#else\n#define YY_READ_BUF_SIZE 8192\n#endif /* __ia64__ */\n#endif\n\n/* Copy whatever the last rule matched to the standard output. */\n#ifndef ECHO\n/* This used to be an fputs(), but since the string might contain NUL's,\n * we now use fwrite().\n */\n#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)\n#endif\n\n/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,\n * is returned in \"result\".\n */\n#ifndef YY_INPUT\n#define YY_INPUT(buf,result,max_size) \\\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \\\n\t\t{ \\\n\t\tint c = '*'; \\\n\t\tsize_t n; \\\n\t\tfor ( n = 0; n < max_size && \\\n\t\t\t     (c = getc( yyin )) != EOF && c != '\\n'; ++n ) \\\n\t\t\tbuf[n] = (char) c; \\\n\t\tif ( c == '\\n' ) \\\n\t\t\tbuf[n++] = (char) c; \\\n\t\tif ( c == EOF && ferror( yyin ) ) \\\n\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\\n\t\tresult = n; \\\n\t\t} \\\n\telse \\\n\t\t{ \\\n\t\terrno=0; \\\n\t\twhile ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\\n\t\t\t{ \\\n\t\t\tif( errno != EINTR) \\\n\t\t\t\t{ \\\n\t\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\\n\t\t\t\tbreak; \\\n\t\t\t\t} \\\n\t\t\terrno=0; \\\n\t\t\tclearerr(yyin); \\\n\t\t\t} \\\n\t\t}\\\n\\\n\n#endif\n\n/* No semi-colon after return; correct usage is to write \"yyterminate();\" -\n * we don't want an extra ';' after the \"return\" because that will cause\n * some compilers to complain about unreachable statements.\n */\n#ifndef yyterminate\n#define yyterminate() return YY_NULL\n#endif\n\n/* Number of entries by which start-condition stack grows. */\n#ifndef YY_START_STACK_INCR\n#define YY_START_STACK_INCR 25\n#endif\n\n/* Report a fatal error. */\n#ifndef YY_FATAL_ERROR\n#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)\n#endif\n\n/* end tables serialization structures and prototypes */\n\n/* Default declaration of generated scanner - a define so the user can\n * easily add parameters.\n */\n#ifndef YY_DECL\n#define YY_DECL_IS_OURS 1\n\nextern int re_yylex \\\n               (YYSTYPE * yylval_param ,yyscan_t yyscanner);\n\n#define YY_DECL int re_yylex \\\n               (YYSTYPE * yylval_param , yyscan_t yyscanner)\n#endif /* !YY_DECL */\n\n/* Code executed at the beginning of each rule, after yytext and yyleng\n * have been set up.\n */\n#ifndef YY_USER_ACTION\n#define YY_USER_ACTION\n#endif\n\n/* Code executed at the end of each rule. */\n#ifndef YY_BREAK\n#define YY_BREAK /*LINTED*/break;\n#endif\n\n#define YY_RULE_SETUP \\\n\tYY_USER_ACTION\n\n/** The main scanner function which does all the work.\n */\nYY_DECL\n{\n\tyy_state_type yy_current_state;\n\tchar *yy_cp, *yy_bp;\n\tint yy_act;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n    yylval = yylval_param;\n\n\tif ( !yyg->yy_init )\n\t\t{\n\t\tyyg->yy_init = 1;\n\n#ifdef YY_USER_INIT\n\t\tYY_USER_INIT;\n#endif\n\n\t\tif ( ! yyg->yy_start )\n\t\t\tyyg->yy_start = 1;\t/* first start state */\n\n\t\tif ( ! yyin )\n\t\t\tyyin = stdin;\n\n\t\tif ( ! yyout )\n\t\t\tyyout = stdout;\n\n\t\tif ( ! YY_CURRENT_BUFFER ) {\n\t\t\tre_yyensure_buffer_stack (yyscanner);\n\t\t\tYY_CURRENT_BUFFER_LVALUE =\n\t\t\t\tre_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);\n\t\t}\n\n\t\tre_yy_load_buffer_state(yyscanner );\n\t\t}\n\n\t{\n#line 99 \"re_lexer.l\"\n\n\n#line 863 \"re_lexer.c\"\n\n\twhile ( /*CONSTCOND*/1 )\t\t/* loops until end-of-file is reached */\n\t\t{\n\t\tyy_cp = yyg->yy_c_buf_p;\n\n\t\t/* Support of yytext. */\n\t\t*yy_cp = yyg->yy_hold_char;\n\n\t\t/* yy_bp points to the position in yy_ch_buf of the start of\n\t\t * the current run.\n\t\t */\n\t\tyy_bp = yy_cp;\n\n\t\tyy_current_state = yyg->yy_start;\nyy_match:\n\t\tdo\n\t\t\t{\n\t\t\tYY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;\n\t\t\tif ( yy_accept[yy_current_state] )\n\t\t\t\t{\n\t\t\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\t\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t\t\t}\n\t\t\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t\t\t{\n\t\t\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\t\t\tif ( yy_current_state >= 45 )\n\t\t\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t\t\t}\n\t\t\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\t\t\t++yy_cp;\n\t\t\t}\n\t\twhile ( yy_current_state != 44 );\n\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\tyy_current_state = yyg->yy_last_accepting_state;\n\nyy_find_action:\n\t\tyy_act = yy_accept[yy_current_state];\n\n\t\tYY_DO_BEFORE_ACTION;\n\n\t\tif ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )\n\t\t\t{\n\t\t\tyy_size_t yyl;\n\t\t\tfor ( yyl = 0; yyl < yyleng; ++yyl )\n\t\t\t\tif ( yytext[yyl] == '\\n' )\n\t\t\t\t\t   \n    do{ yylineno++;\n        yycolumn=0;\n    }while(0)\n;\n\t\t\t}\n\ndo_action:\t/* This label is used only to access EOF actions. */\n\n\t\tswitch ( yy_act )\n\t{ /* beginning of action switch */\n\t\t\tcase 0: /* must back up */\n\t\t\t/* undo the effects of YY_DO_BEFORE_ACTION */\n\t\t\t*yy_cp = yyg->yy_hold_char;\n\t\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\t\tyy_current_state = yyg->yy_last_accepting_state;\n\t\t\tgoto yy_find_action;\n\ncase 1:\nYY_RULE_SETUP\n#line 101 \"re_lexer.l\"\n{\n\n  // Examples: {3,8} {0,5} {,5} {7,}\n\n  int hi_bound;\n  int lo_bound = atoi(yytext + 1);\n\n  char* comma = strchr(yytext, ',');\n\n  if (comma - yytext == strlen(yytext) - 2)\n    // if comma is followed by the closing curly bracket\n    // (example: {2,}) set high bound value to maximum.\n    hi_bound = INT16_MAX;\n  else\n    hi_bound = atoi(comma + 1);\n\n  if (hi_bound > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  if (hi_bound < lo_bound || hi_bound < 0 || lo_bound < 0)\n  {\n    yyerror(yyscanner, lex_env, \"bad repeat interval\");\n    yyterminate();\n  }\n\n  yylval->range = (hi_bound << 16) | lo_bound;\n\n  return _RANGE_;\n}\n\tYY_BREAK\ncase 2:\nYY_RULE_SETUP\n#line 135 \"re_lexer.l\"\n{\n\n  // Example: {10}\n\n  int value = atoi(yytext + 1);\n\n  if (value > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  yylval->range = (value << 16) | value;\n\n  return _RANGE_;\n}\n\tYY_BREAK\ncase 3:\nYY_RULE_SETUP\n#line 153 \"re_lexer.l\"\n{\n\n  // Start of a negated character class. Example: [^abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n}\n\tYY_BREAK\ncase 4:\nYY_RULE_SETUP\n#line 162 \"re_lexer.l\"\n{\n\n  // Start of character negated class containing a ].\n  // Example: [^]abc] this must be interpreted as a class\n  // not matching ], a, b, nor c\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\tYY_BREAK\ncase 5:\nYY_RULE_SETUP\n#line 175 \"re_lexer.l\"\n{\n\n  // Start of character class containing a ].\n  // Example: []abc] this must be interpreted as a class\n  // matching ], a, b, or c.\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\tYY_BREAK\ncase 6:\nYY_RULE_SETUP\n#line 188 \"re_lexer.l\"\n{\n\n  // Start of character class. Example: [abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n}\n\tYY_BREAK\ncase 7:\n/* rule 7 can match eol */\nYY_RULE_SETUP\n#line 198 \"re_lexer.l\"\n{\n\n  // Any non-special character is passed as a CHAR token to the scanner.\n\n  yylval->integer = yytext[0];\n  return _CHAR_;\n}\n\tYY_BREAK\ncase 8:\nYY_RULE_SETUP\n#line 207 \"re_lexer.l\"\n{\n  return _WORD_CHAR_;\n}\n\tYY_BREAK\ncase 9:\nYY_RULE_SETUP\n#line 212 \"re_lexer.l\"\n{\n  return _NON_WORD_CHAR_;\n}\n\tYY_BREAK\ncase 10:\nYY_RULE_SETUP\n#line 217 \"re_lexer.l\"\n{\n  return _SPACE_;\n}\n\tYY_BREAK\ncase 11:\nYY_RULE_SETUP\n#line 222 \"re_lexer.l\"\n{\n  return _NON_SPACE_;\n}\n\tYY_BREAK\ncase 12:\nYY_RULE_SETUP\n#line 227 \"re_lexer.l\"\n{\n  return _DIGIT_;\n}\n\tYY_BREAK\ncase 13:\nYY_RULE_SETUP\n#line 232 \"re_lexer.l\"\n{\n  return _NON_DIGIT_;\n}\n\tYY_BREAK\ncase 14:\nYY_RULE_SETUP\n#line 237 \"re_lexer.l\"\n{\n  return _WORD_BOUNDARY_;\n}\n\tYY_BREAK\ncase 15:\nYY_RULE_SETUP\n#line 241 \"re_lexer.l\"\n{\n  return _NON_WORD_BOUNDARY_;\n}\n\tYY_BREAK\ncase 16:\nYY_RULE_SETUP\n#line 246 \"re_lexer.l\"\n{\n\n  yyerror(yyscanner, lex_env, \"backreferences are not allowed\");\n  yyterminate();\n}\n\tYY_BREAK\ncase 17:\nYY_RULE_SETUP\n#line 253 \"re_lexer.l\"\n{\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    yylval->integer = c;\n    return _CHAR_;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase 18:\nYY_RULE_SETUP\n#line 270 \"re_lexer.l\"\n{\n\n  // End of character class.\n\n  int i;\n\n  yylval->class_vector = (uint8_t*) yr_malloc(32);\n  memcpy(yylval->class_vector, LEX_ENV->class_vector, 32);\n\n  if (LEX_ENV->negated_class)\n  {\n    for(i = 0; i < 32; i++)\n      yylval->class_vector[i] = ~yylval->class_vector[i];\n  }\n\n  BEGIN(INITIAL);\n  return _CLASS_;\n}\n\tYY_BREAK\ncase 19:\n/* rule 19 can match eol */\nYY_RULE_SETUP\n#line 291 \"re_lexer.l\"\n{\n\n  // A range inside a character class.\n  //  [abc0-9]\n  //      ^- matching here\n\n  uint16_t c;\n  uint8_t start = yytext[0];\n  uint8_t end = yytext[2];\n\n  if (start == '\\\\')\n  {\n    start = escaped_char_value(yytext);\n\n    if (yytext[1] == 'x')\n      end = yytext[5];\n    else\n      end = yytext[3];\n  }\n\n  if (end == '\\\\')\n  {\n    if (!read_escaped_char(yyscanner, &end))\n    {\n      yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n      yyterminate();\n    }\n  }\n\n  if (end < start)\n  {\n    yyerror(yyscanner, lex_env, \"bad character range\");\n    yyterminate();\n  }\n\n  for (c = start; c <= end; c++)\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n}\n\tYY_BREAK\ncase 20:\nYY_RULE_SETUP\n#line 333 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= word_chars[i];\n}\n\tYY_BREAK\ncase 21:\nYY_RULE_SETUP\n#line 342 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= ~word_chars[i];\n}\n\tYY_BREAK\ncase 22:\nYY_RULE_SETUP\n#line 351 \"re_lexer.l\"\n{\n\n  LEX_ENV->class_vector[' ' / 8] |= 1 << ' ' % 8;\n  LEX_ENV->class_vector['\\t' / 8] |= 1 << '\\t' % 8;\n}\n\tYY_BREAK\ncase 23:\nYY_RULE_SETUP\n#line 358 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    if (i == ' ' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << ' ' % 8);\n    else if (i == '\\t' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << '\\t' % 8);\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\tYY_BREAK\ncase 24:\nYY_RULE_SETUP\n#line 374 \"re_lexer.l\"\n{\n\n  char c;\n\n  for (c = '0'; c <= '9'; c++)\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n}\n\tYY_BREAK\ncase 25:\nYY_RULE_SETUP\n#line 383 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    // digits 0-7 are in the sixth byte of the vector, let that byte alone\n    if (i == 6)\n      continue;\n\n    // digits 8 and 9 are the lowest two bits in the seventh byte of the\n    // vector, let those bits alone.\n    if (i == 7)\n      LEX_ENV->class_vector[i] |= 0xFC;\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\tYY_BREAK\ncase 26:\nYY_RULE_SETUP\n#line 403 \"re_lexer.l\"\n{\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase 27:\nYY_RULE_SETUP\n#line 419 \"re_lexer.l\"\n{\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    // A character class (i.e: [0-9a-f]) is represented by a 256-bits vector,\n    // here we set to 1 the vector's bit corresponding to the input character.\n\n    LEX_ENV->class_vector[yytext[0] / 8] |= 1 << yytext[0] % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase YY_STATE_EOF(char_class):\n#line 436 \"re_lexer.l\"\n{\n\n  // End of regexp reached while scanning a character class.\n\n  yyerror(yyscanner, lex_env, \"missing terminating ] for character class\");\n  yyterminate();\n}\n\tYY_BREAK\ncase 28:\nYY_RULE_SETUP\n#line 445 \"re_lexer.l\"\n{\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    return yytext[0];\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase YY_STATE_EOF(INITIAL):\n#line 459 \"re_lexer.l\"\n{\n\n  yyterminate();\n}\n\tYY_BREAK\ncase 29:\nYY_RULE_SETUP\n#line 464 \"re_lexer.l\"\nECHO;\n\tYY_BREAK\n#line 1358 \"re_lexer.c\"\n\n\tcase YY_END_OF_BUFFER:\n\t\t{\n\t\t/* Amount of text matched not including the EOB char. */\n\t\tint yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;\n\n\t\t/* Undo the effects of YY_DO_BEFORE_ACTION. */\n\t\t*yy_cp = yyg->yy_hold_char;\n\t\tYY_RESTORE_YY_MORE_OFFSET\n\n\t\tif ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )\n\t\t\t{\n\t\t\t/* We're scanning a new file or input source.  It's\n\t\t\t * possible that this happened because the user\n\t\t\t * just pointed yyin at a new source and called\n\t\t\t * re_yylex().  If so, then we have to assure\n\t\t\t * consistency between YY_CURRENT_BUFFER and our\n\t\t\t * globals.  Here is the right place to do so, because\n\t\t\t * this is the first action (other than possibly a\n\t\t\t * back-up) that will match for the new input source.\n\t\t\t */\n\t\t\tyyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;\n\t\t\t}\n\n\t\t/* Note that here we test for yy_c_buf_p \"<=\" to the position\n\t\t * of the first EOB in the buffer, since yy_c_buf_p will\n\t\t * already have been incremented past the NUL character\n\t\t * (since all states make transitions on EOB to the\n\t\t * end-of-buffer state).  Contrast this with the test\n\t\t * in input().\n\t\t */\n\t\tif ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )\n\t\t\t{ /* This was really a NUL. */\n\t\t\tyy_state_type yy_next_state;\n\n\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;\n\n\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t/* Okay, we're now positioned to make the NUL\n\t\t\t * transition.  We couldn't have\n\t\t\t * yy_get_previous_state() go ahead and do it\n\t\t\t * for us because it doesn't know how to deal\n\t\t\t * with the possibility of jamming (and we don't\n\t\t\t * want to build jamming into it because then it\n\t\t\t * will run more slowly).\n\t\t\t */\n\n\t\t\tyy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);\n\n\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\n\t\t\tif ( yy_next_state )\n\t\t\t\t{\n\t\t\t\t/* Consume the NUL. */\n\t\t\t\tyy_cp = ++yyg->yy_c_buf_p;\n\t\t\t\tyy_current_state = yy_next_state;\n\t\t\t\tgoto yy_match;\n\t\t\t\t}\n\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\t\t\tyy_current_state = yyg->yy_last_accepting_state;\n\t\t\t\tgoto yy_find_action;\n\t\t\t\t}\n\t\t\t}\n\n\t\telse switch ( yy_get_next_buffer( yyscanner ) )\n\t\t\t{\n\t\t\tcase EOB_ACT_END_OF_FILE:\n\t\t\t\t{\n\t\t\t\tyyg->yy_did_buffer_switch_on_eof = 0;\n\n\t\t\t\tif ( re_yywrap(yyscanner ) )\n\t\t\t\t\t{\n\t\t\t\t\t/* Note: because we've taken care in\n\t\t\t\t\t * yy_get_next_buffer() to have set up\n\t\t\t\t\t * yytext, we can now set up\n\t\t\t\t\t * yy_c_buf_p so that if some total\n\t\t\t\t\t * hoser (like flex itself) wants to\n\t\t\t\t\t * call the scanner after we return the\n\t\t\t\t\t * YY_NULL, it'll still work - another\n\t\t\t\t\t * YY_NULL will get returned.\n\t\t\t\t\t */\n\t\t\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;\n\n\t\t\t\t\tyy_act = YY_STATE_EOF(YY_START);\n\t\t\t\t\tgoto do_action;\n\t\t\t\t\t}\n\n\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tif ( ! yyg->yy_did_buffer_switch_on_eof )\n\t\t\t\t\t\tYY_NEW_FILE;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\tcase EOB_ACT_CONTINUE_SCAN:\n\t\t\t\tyyg->yy_c_buf_p =\n\t\t\t\t\tyyg->yytext_ptr + yy_amount_of_matched_text;\n\n\t\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t\tyy_cp = yyg->yy_c_buf_p;\n\t\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\t\t\t\tgoto yy_match;\n\n\t\t\tcase EOB_ACT_LAST_MATCH:\n\t\t\t\tyyg->yy_c_buf_p =\n\t\t\t\t&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];\n\n\t\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t\tyy_cp = yyg->yy_c_buf_p;\n\t\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\t\t\t\tgoto yy_find_action;\n\t\t\t}\n\t\tbreak;\n\t\t}\n\n\tdefault:\n\t\tYY_FATAL_ERROR(\n\t\t\t\"fatal flex scanner internal error--no action found\" );\n\t} /* end of action switch */\n\t\t} /* end of scanning one token */\n\t} /* end of user's declarations */\n} /* end of re_yylex */\n\n/* yy_get_next_buffer - try to read in a new buffer\n *\n * Returns a code representing an action:\n *\tEOB_ACT_LAST_MATCH -\n *\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position\n *\tEOB_ACT_END_OF_FILE - end of file\n */\nstatic int yy_get_next_buffer (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tchar *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;\n\tchar *source = yyg->yytext_ptr;\n\tyy_size_t number_to_move, i;\n\tint ret_val;\n\n\tif ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )\n\t\tYY_FATAL_ERROR(\n\t\t\"fatal flex scanner internal error--end of buffer missed\" );\n\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )\n\t\t{ /* Don't try to fill the buffer, so this is an EOF. */\n\t\tif ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )\n\t\t\t{\n\t\t\t/* We matched a single character, the EOB, so\n\t\t\t * treat this as a final EOF.\n\t\t\t */\n\t\t\treturn EOB_ACT_END_OF_FILE;\n\t\t\t}\n\n\t\telse\n\t\t\t{\n\t\t\t/* We matched some text prior to the EOB, first\n\t\t\t * process it.\n\t\t\t */\n\t\t\treturn EOB_ACT_LAST_MATCH;\n\t\t\t}\n\t\t}\n\n\t/* Try to read more data. */\n\n\t/* First move last chars to start of buffer. */\n\tnumber_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;\n\n\tfor ( i = 0; i < number_to_move; ++i )\n\t\t*(dest++) = *(source++);\n\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )\n\t\t/* don't do the read, it's not guaranteed to return an EOF,\n\t\t * just force an EOF\n\t\t */\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;\n\n\telse\n\t\t{\n\t\t\tyy_size_t num_to_read =\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;\n\n\t\twhile ( num_to_read <= 0 )\n\t\t\t{ /* Not enough room in the buffer - grow it. */\n\n\t\t\t/* just a shorter name for the current buffer */\n\t\t\tYY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;\n\n\t\t\tint yy_c_buf_p_offset =\n\t\t\t\t(int) (yyg->yy_c_buf_p - b->yy_ch_buf);\n\n\t\t\tif ( b->yy_is_our_buffer )\n\t\t\t\t{\n\t\t\t\tyy_size_t new_size = b->yy_buf_size * 2;\n\n\t\t\t\tif ( new_size <= 0 )\n\t\t\t\t\tb->yy_buf_size += b->yy_buf_size / 8;\n\t\t\t\telse\n\t\t\t\t\tb->yy_buf_size *= 2;\n\n\t\t\t\tb->yy_ch_buf = (char *)\n\t\t\t\t\t/* Include room in for 2 EOB chars. */\n\t\t\t\t\tre_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t/* Can't grow it, we don't own it. */\n\t\t\t\tb->yy_ch_buf = 0;\n\n\t\t\tif ( ! b->yy_ch_buf )\n\t\t\t\tYY_FATAL_ERROR(\n\t\t\t\t\"fatal error - scanner input buffer overflow\" );\n\n\t\t\tyyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];\n\n\t\t\tnum_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -\n\t\t\t\t\t\tnumber_to_move - 1;\n\n\t\t\t}\n\n\t\tif ( num_to_read > YY_READ_BUF_SIZE )\n\t\t\tnum_to_read = YY_READ_BUF_SIZE;\n\n\t\t/* Read in more data. */\n\t\tYY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),\n\t\t\tyyg->yy_n_chars, num_to_read );\n\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\tif ( yyg->yy_n_chars == 0 )\n\t\t{\n\t\tif ( number_to_move == YY_MORE_ADJ )\n\t\t\t{\n\t\t\tret_val = EOB_ACT_END_OF_FILE;\n\t\t\tre_yyrestart(yyin  ,yyscanner);\n\t\t\t}\n\n\t\telse\n\t\t\t{\n\t\t\tret_val = EOB_ACT_LAST_MATCH;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buffer_status =\n\t\t\t\tYY_BUFFER_EOF_PENDING;\n\t\t\t}\n\t\t}\n\n\telse\n\t\tret_val = EOB_ACT_CONTINUE_SCAN;\n\n\tif ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {\n\t\t/* Extend the array by 50%, plus the number we really need. */\n\t\tyy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) re_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );\n\t\tif ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );\n\t}\n\n\tyyg->yy_n_chars += number_to_move;\n\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;\n\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;\n\n\tyyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];\n\n\treturn ret_val;\n}\n\n/* yy_get_previous_state - get the state just before the EOB char was reached */\n\n    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)\n{\n\tyy_state_type yy_current_state;\n\tchar *yy_cp;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tyy_current_state = yyg->yy_start;\n\n\tfor ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )\n\t\t{\n\t\tYY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);\n\t\tif ( yy_accept[yy_current_state] )\n\t\t\t{\n\t\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t\t}\n\t\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t\t{\n\t\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\t\tif ( yy_current_state >= 45 )\n\t\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t\t}\n\t\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\t\t}\n\n\treturn yy_current_state;\n}\n\n/* yy_try_NUL_trans - try to make a transition on the NUL character\n *\n * synopsis\n *\tnext_state = yy_try_NUL_trans( current_state );\n */\n    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)\n{\n\tint yy_is_jam;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */\n\tchar *yy_cp = yyg->yy_c_buf_p;\n\n\tYY_CHAR yy_c = 1;\n\tif ( yy_accept[yy_current_state] )\n\t\t{\n\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t}\n\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t{\n\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\tif ( yy_current_state >= 45 )\n\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t}\n\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\tyy_is_jam = (yy_current_state == 44);\n\n\t(void)yyg;\n\treturn yy_is_jam ? 0 : yy_current_state;\n}\n\n#ifndef YY_NO_UNPUT\n\n#endif\n\n#ifndef YY_NO_INPUT\n#ifdef __cplusplus\n    static int yyinput (yyscan_t yyscanner)\n#else\n    static int input  (yyscan_t yyscanner)\n#endif\n\n{\n\tint c;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\n\tif ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )\n\t\t{\n\t\t/* yy_c_buf_p now points to the character we want to return.\n\t\t * If this occurs *before* the EOB characters, then it's a\n\t\t * valid NUL; if not, then we've hit the end of the buffer.\n\t\t */\n\t\tif ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )\n\t\t\t/* This was really a NUL. */\n\t\t\t*yyg->yy_c_buf_p = '\\0';\n\n\t\telse\n\t\t\t{ /* need more input */\n\t\t\tyy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;\n\t\t\t++yyg->yy_c_buf_p;\n\n\t\t\tswitch ( yy_get_next_buffer( yyscanner ) )\n\t\t\t\t{\n\t\t\t\tcase EOB_ACT_LAST_MATCH:\n\t\t\t\t\t/* This happens because yy_g_n_b()\n\t\t\t\t\t * sees that we've accumulated a\n\t\t\t\t\t * token and flags that we need to\n\t\t\t\t\t * try matching the token before\n\t\t\t\t\t * proceeding.  But for input(),\n\t\t\t\t\t * there's no matching to consider.\n\t\t\t\t\t * So convert the EOB_ACT_LAST_MATCH\n\t\t\t\t\t * to EOB_ACT_END_OF_FILE.\n\t\t\t\t\t */\n\n\t\t\t\t\t/* Reset buffer status. */\n\t\t\t\t\tre_yyrestart(yyin ,yyscanner);\n\n\t\t\t\t\t/*FALLTHROUGH*/\n\n\t\t\t\tcase EOB_ACT_END_OF_FILE:\n\t\t\t\t\t{\n\t\t\t\t\tif ( re_yywrap(yyscanner ) )\n\t\t\t\t\t\treturn EOF;\n\n\t\t\t\t\tif ( ! yyg->yy_did_buffer_switch_on_eof )\n\t\t\t\t\t\tYY_NEW_FILE;\n#ifdef __cplusplus\n\t\t\t\t\treturn yyinput(yyscanner);\n#else\n\t\t\t\t\treturn input(yyscanner);\n#endif\n\t\t\t\t\t}\n\n\t\t\t\tcase EOB_ACT_CONTINUE_SCAN:\n\t\t\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tc = *(unsigned char *) yyg->yy_c_buf_p;\t/* cast for 8-bit char's */\n\t*yyg->yy_c_buf_p = '\\0';\t/* preserve yytext */\n\tyyg->yy_hold_char = *++yyg->yy_c_buf_p;\n\n\tif ( c == '\\n' )\n\t\t   \n    do{ yylineno++;\n        yycolumn=0;\n    }while(0)\n;\n\n\treturn c;\n}\n#endif\t/* ifndef YY_NO_INPUT */\n\n/** Immediately switch to a different input stream.\n * @param input_file A readable stream.\n * @param yyscanner The scanner object.\n * @note This function does not reset the start condition to @c INITIAL .\n */\n    void re_yyrestart  (FILE * input_file , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif ( ! YY_CURRENT_BUFFER ){\n        re_yyensure_buffer_stack (yyscanner);\n\t\tYY_CURRENT_BUFFER_LVALUE =\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);\n\t}\n\n\tre_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);\n\tre_yy_load_buffer_state(yyscanner );\n}\n\n/** Switch to a different input buffer.\n * @param new_buffer The new input buffer.\n * @param yyscanner The scanner object.\n */\n    void re_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\t/* TODO. We should be able to replace this entire function body\n\t * with\n\t *\t\tre_yypop_buffer_state();\n\t *\t\tre_yypush_buffer_state(new_buffer);\n     */\n\tre_yyensure_buffer_stack (yyscanner);\n\tif ( YY_CURRENT_BUFFER == new_buffer )\n\t\treturn;\n\n\tif ( YY_CURRENT_BUFFER )\n\t\t{\n\t\t/* Flush out information for old buffer. */\n\t\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\tYY_CURRENT_BUFFER_LVALUE = new_buffer;\n\tre_yy_load_buffer_state(yyscanner );\n\n\t/* We don't actually know whether we did this switch during\n\t * EOF (re_yywrap()) processing, but the only time this flag\n\t * is looked at is after re_yywrap() is called, so it's safe\n\t * to go ahead and always set it.\n\t */\n\tyyg->yy_did_buffer_switch_on_eof = 1;\n}\n\nstatic void re_yy_load_buffer_state  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tyyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;\n\tyyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;\n\tyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;\n\tyyg->yy_hold_char = *yyg->yy_c_buf_p;\n}\n\n/** Allocate and initialize an input buffer state.\n * @param file A readable stream.\n * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\n * @param yyscanner The scanner object.\n * @return the allocated buffer state.\n */\n    YY_BUFFER_STATE re_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n    \n\tb = (YY_BUFFER_STATE) re_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_create_buffer()\" );\n\n\tb->yy_buf_size = (yy_size_t)size;\n\n\t/* yy_ch_buf has to be 2 characters longer than the size given because\n\t * we need to put in 2 end-of-buffer characters.\n\t */\n\tb->yy_ch_buf = (char *) re_yyalloc(b->yy_buf_size + 2 ,yyscanner );\n\tif ( ! b->yy_ch_buf )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_create_buffer()\" );\n\n\tb->yy_is_our_buffer = 1;\n\n\tre_yy_init_buffer(b,file ,yyscanner);\n\n\treturn b;\n}\n\n/** Destroy the buffer.\n * @param b a buffer created with re_yy_create_buffer()\n * @param yyscanner The scanner object.\n */\n    void re_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif ( ! b )\n\t\treturn;\n\n\tif ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */\n\t\tYY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;\n\n\tif ( b->yy_is_our_buffer )\n\t\tre_yyfree((void *) b->yy_ch_buf ,yyscanner );\n\n\tre_yyfree((void *) b ,yyscanner );\n}\n\n/* Initializes or reinitializes a buffer.\n * This function is sometimes called more than once on the same buffer,\n * such as during a re_yyrestart() or at EOF.\n */\n    static void re_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)\n\n{\n\tint oerrno = errno;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tre_yy_flush_buffer(b ,yyscanner);\n\n\tb->yy_input_file = file;\n\tb->yy_fill_buffer = 1;\n\n    /* If b is the current buffer, then re_yy_init_buffer was _probably_\n     * called from re_yyrestart() or through yy_get_next_buffer.\n     * In that case, we don't want to reset the lineno or column.\n     */\n    if (b != YY_CURRENT_BUFFER){\n        b->yy_bs_lineno = 1;\n        b->yy_bs_column = 0;\n    }\n\n        b->yy_is_interactive = 0;\n    \n\terrno = oerrno;\n}\n\n/** Discard all buffered characters. On the next scan, YY_INPUT will be called.\n * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.\n * @param yyscanner The scanner object.\n */\n    void re_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif ( ! b )\n\t\treturn;\n\n\tb->yy_n_chars = 0;\n\n\t/* We always need two end-of-buffer characters.  The first causes\n\t * a transition to the end-of-buffer state.  The second causes\n\t * a jam in that state.\n\t */\n\tb->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;\n\tb->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;\n\n\tb->yy_buf_pos = &b->yy_ch_buf[0];\n\n\tb->yy_at_bol = 1;\n\tb->yy_buffer_status = YY_BUFFER_NEW;\n\n\tif ( b == YY_CURRENT_BUFFER )\n\t\tre_yy_load_buffer_state(yyscanner );\n}\n\n/** Pushes the new state onto the stack. The new state becomes\n *  the current state. This function will allocate the stack\n *  if necessary.\n *  @param new_buffer The new state.\n *  @param yyscanner The scanner object.\n */\nvoid re_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif (new_buffer == NULL)\n\t\treturn;\n\n\tre_yyensure_buffer_stack(yyscanner);\n\n\t/* This block is copied from re_yy_switch_to_buffer. */\n\tif ( YY_CURRENT_BUFFER )\n\t\t{\n\t\t/* Flush out information for old buffer. */\n\t\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\t/* Only push if top exists. Otherwise, replace top. */\n\tif (YY_CURRENT_BUFFER)\n\t\tyyg->yy_buffer_stack_top++;\n\tYY_CURRENT_BUFFER_LVALUE = new_buffer;\n\n\t/* copied from re_yy_switch_to_buffer. */\n\tre_yy_load_buffer_state(yyscanner );\n\tyyg->yy_did_buffer_switch_on_eof = 1;\n}\n\n/** Removes and deletes the top of the stack, if present.\n *  The next element becomes the new top.\n *  @param yyscanner The scanner object.\n */\nvoid re_yypop_buffer_state (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif (!YY_CURRENT_BUFFER)\n\t\treturn;\n\n\tre_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);\n\tYY_CURRENT_BUFFER_LVALUE = NULL;\n\tif (yyg->yy_buffer_stack_top > 0)\n\t\t--yyg->yy_buffer_stack_top;\n\n\tif (YY_CURRENT_BUFFER) {\n\t\tre_yy_load_buffer_state(yyscanner );\n\t\tyyg->yy_did_buffer_switch_on_eof = 1;\n\t}\n}\n\n/* Allocates the stack if it does not exist.\n *  Guarantees space for at least one push.\n */\nstatic void re_yyensure_buffer_stack (yyscan_t yyscanner)\n{\n\tyy_size_t num_to_alloc;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif (!yyg->yy_buffer_stack) {\n\n\t\t/* First allocation is just for 2 elements, since we don't know if this\n\t\t * scanner will even need a stack. We use 2 instead of 1 to avoid an\n\t\t * immediate realloc on the next call.\n         */\n\t\tnum_to_alloc = 1; // After all that talk, this was set to 1 anyways...\n\t\tyyg->yy_buffer_stack = (struct yy_buffer_state**)re_yyalloc\n\t\t\t\t\t\t\t\t(num_to_alloc * sizeof(struct yy_buffer_state*)\n\t\t\t\t\t\t\t\t, yyscanner);\n\t\tif ( ! yyg->yy_buffer_stack )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yyensure_buffer_stack()\" );\n\t\t\t\t\t\t\t\t  \n\t\tmemset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));\n\t\t\t\t\n\t\tyyg->yy_buffer_stack_max = num_to_alloc;\n\t\tyyg->yy_buffer_stack_top = 0;\n\t\treturn;\n\t}\n\n\tif (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){\n\n\t\t/* Increase the buffer to prepare for a possible push. */\n\t\tyy_size_t grow_size = 8 /* arbitrary grow size */;\n\n\t\tnum_to_alloc = yyg->yy_buffer_stack_max + grow_size;\n\t\tyyg->yy_buffer_stack = (struct yy_buffer_state**)re_yyrealloc\n\t\t\t\t\t\t\t\t(yyg->yy_buffer_stack,\n\t\t\t\t\t\t\t\tnum_to_alloc * sizeof(struct yy_buffer_state*)\n\t\t\t\t\t\t\t\t, yyscanner);\n\t\tif ( ! yyg->yy_buffer_stack )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yyensure_buffer_stack()\" );\n\n\t\t/* zero only the new slots.*/\n\t\tmemset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));\n\t\tyyg->yy_buffer_stack_max = num_to_alloc;\n\t}\n}\n\n/** Setup the input buffer state to scan directly from a user-specified character buffer.\n * @param base the character buffer\n * @param size the size in bytes of the character buffer\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object. \n */\nYY_BUFFER_STATE re_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n    \n\tif ( size < 2 ||\n\t     base[size-2] != YY_END_OF_BUFFER_CHAR ||\n\t     base[size-1] != YY_END_OF_BUFFER_CHAR )\n\t\t/* They forgot to leave room for the EOB's. */\n\t\treturn 0;\n\n\tb = (YY_BUFFER_STATE) re_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_scan_buffer()\" );\n\n\tb->yy_buf_size = size - 2;\t/* \"- 2\" to take care of EOB's */\n\tb->yy_buf_pos = b->yy_ch_buf = base;\n\tb->yy_is_our_buffer = 0;\n\tb->yy_input_file = 0;\n\tb->yy_n_chars = b->yy_buf_size;\n\tb->yy_is_interactive = 0;\n\tb->yy_at_bol = 1;\n\tb->yy_fill_buffer = 0;\n\tb->yy_buffer_status = YY_BUFFER_NEW;\n\n\tre_yy_switch_to_buffer(b ,yyscanner );\n\n\treturn b;\n}\n\n/** Setup the input buffer state to scan a string. The next call to re_yylex() will\n * scan from a @e copy of @a str.\n * @param yystr a NUL-terminated string to scan\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n * @note If you want to scan bytes that may contain NUL values, then use\n *       re_yy_scan_bytes() instead.\n */\nYY_BUFFER_STATE re_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)\n{\n    \n\treturn re_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);\n}\n\n/** Setup the input buffer state to scan the given bytes. The next call to re_yylex() will\n * scan from a @e copy of @a bytes.\n * @param yybytes the byte buffer to scan\n * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */\nYY_BUFFER_STATE re_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n\tchar *buf;\n\tyy_size_t n;\n\tyy_size_t i;\n    \n\t/* Get memory for full buffer, including space for trailing EOB's. */\n\tn = _yybytes_len + 2;\n\tbuf = (char *) re_yyalloc(n ,yyscanner );\n\tif ( ! buf )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_scan_bytes()\" );\n\n\tfor ( i = 0; i < _yybytes_len; ++i )\n\t\tbuf[i] = yybytes[i];\n\n\tbuf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;\n\n\tb = re_yy_scan_buffer(buf,n ,yyscanner);\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"bad buffer in re_yy_scan_bytes()\" );\n\n\t/* It's okay to grow etc. this buffer, and we should throw it\n\t * away when we're done.\n\t */\n\tb->yy_is_our_buffer = 1;\n\n\treturn b;\n}\n\n#ifndef YY_EXIT_FAILURE\n#define YY_EXIT_FAILURE 2\n#endif\n\nstatic void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\t(void) fprintf( stderr, \"%s\\n\", msg );\n\texit( YY_EXIT_FAILURE );\n}\n\n/* Redefine yyless() so it works in section 3 code. */\n\n#undef yyless\n#define yyless(n) \\\n\tdo \\\n\t\t{ \\\n\t\t/* Undo effects of setting up yytext. */ \\\n        int yyless_macro_arg = (n); \\\n        YY_LESS_LINENO(yyless_macro_arg);\\\n\t\tyytext[yyleng] = yyg->yy_hold_char; \\\n\t\tyyg->yy_c_buf_p = yytext + yyless_macro_arg; \\\n\t\tyyg->yy_hold_char = *yyg->yy_c_buf_p; \\\n\t\t*yyg->yy_c_buf_p = '\\0'; \\\n\t\tyyleng = yyless_macro_arg; \\\n\t\t} \\\n\twhile ( 0 )\n\n/* Accessor  methods (get/set functions) to struct members. */\n\n/** Get the user-defined data for this scanner.\n * @param yyscanner The scanner object.\n */\nYY_EXTRA_TYPE re_yyget_extra  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyextra;\n}\n\n/** Get the current line number.\n * @param yyscanner The scanner object.\n */\nint re_yyget_lineno  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    \n        if (! YY_CURRENT_BUFFER)\n            return 0;\n    \n    return yylineno;\n}\n\n/** Get the current column number.\n * @param yyscanner The scanner object.\n */\nint re_yyget_column  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    \n        if (! YY_CURRENT_BUFFER)\n            return 0;\n    \n    return yycolumn;\n}\n\n/** Get the input stream.\n * @param yyscanner The scanner object.\n */\nFILE *re_yyget_in  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyin;\n}\n\n/** Get the output stream.\n * @param yyscanner The scanner object.\n */\nFILE *re_yyget_out  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyout;\n}\n\n/** Get the length of the current token.\n * @param yyscanner The scanner object.\n */\nyy_size_t re_yyget_leng  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyleng;\n}\n\n/** Get the current token.\n * @param yyscanner The scanner object.\n */\n\nchar *re_yyget_text  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yytext;\n}\n\n/** Set the user-defined data. This data is never touched by the scanner.\n * @param user_defined The data to be associated with this scanner.\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyextra = user_defined ;\n}\n\n/** Set the current line number.\n * @param _line_number line number\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_lineno (int  _line_number , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        /* lineno is only valid if an input buffer exists. */\n        if (! YY_CURRENT_BUFFER )\n           YY_FATAL_ERROR( \"re_yyset_lineno called with no buffer\" );\n    \n    yylineno = _line_number;\n}\n\n/** Set the current column.\n * @param _column_no column number\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_column (int  _column_no , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        /* column is only valid if an input buffer exists. */\n        if (! YY_CURRENT_BUFFER )\n           YY_FATAL_ERROR( \"re_yyset_column called with no buffer\" );\n    \n    yycolumn = _column_no;\n}\n\n/** Set the input stream. This does not discard the current\n * input buffer.\n * @param _in_str A readable stream.\n * @param yyscanner The scanner object.\n * @see re_yy_switch_to_buffer\n */\nvoid re_yyset_in (FILE *  _in_str , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyin = _in_str ;\n}\n\nvoid re_yyset_out (FILE *  _out_str , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyout = _out_str ;\n}\n\nint re_yyget_debug  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yy_flex_debug;\n}\n\nvoid re_yyset_debug (int  _bdebug , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yy_flex_debug = _bdebug ;\n}\n\n/* Accessor methods for yylval and yylloc */\n\nYYSTYPE * re_yyget_lval  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yylval;\n}\n\nvoid re_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yylval = yylval_param;\n}\n\n/* User-visible API */\n\n/* re_yylex_init is special because it creates the scanner itself, so it is\n * the ONLY reentrant function that doesn't take the scanner as the last argument.\n * That's why we explicitly handle the declaration, instead of using our macros.\n */\n\nint re_yylex_init(yyscan_t* ptr_yy_globals)\n\n{\n    if (ptr_yy_globals == NULL){\n        errno = EINVAL;\n        return 1;\n    }\n\n    *ptr_yy_globals = (yyscan_t) re_yyalloc ( sizeof( struct yyguts_t ), NULL );\n\n    if (*ptr_yy_globals == NULL){\n        errno = ENOMEM;\n        return 1;\n    }\n\n    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */\n    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));\n\n    return yy_init_globals ( *ptr_yy_globals );\n}\n\n/* re_yylex_init_extra has the same functionality as re_yylex_init, but follows the\n * convention of taking the scanner as the last argument. Note however, that\n * this is a *pointer* to a scanner, as it will be allocated by this call (and\n * is the reason, too, why this function also must handle its own declaration).\n * The user defined value in the first argument will be available to re_yyalloc in\n * the yyextra field.\n */\n\nint re_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )\n\n{\n    struct yyguts_t dummy_yyguts;\n\n    re_yyset_extra (yy_user_defined, &dummy_yyguts);\n\n    if (ptr_yy_globals == NULL){\n        errno = EINVAL;\n        return 1;\n    }\n\t\n    *ptr_yy_globals = (yyscan_t) re_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );\n\t\n    if (*ptr_yy_globals == NULL){\n        errno = ENOMEM;\n        return 1;\n    }\n    \n    /* By setting to 0xAA, we expose bugs in\n    yy_init_globals. Leave at 0x00 for releases. */\n    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));\n    \n    re_yyset_extra (yy_user_defined, *ptr_yy_globals);\n    \n    return yy_init_globals ( *ptr_yy_globals );\n}\n\nstatic int yy_init_globals (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    /* Initialization is the same as for the non-reentrant scanner.\n     * This function is called from re_yylex_destroy(), so don't allocate here.\n     */\n\n    yyg->yy_buffer_stack = 0;\n    yyg->yy_buffer_stack_top = 0;\n    yyg->yy_buffer_stack_max = 0;\n    yyg->yy_c_buf_p = (char *) 0;\n    yyg->yy_init = 0;\n    yyg->yy_start = 0;\n\n    yyg->yy_start_stack_ptr = 0;\n    yyg->yy_start_stack_depth = 0;\n    yyg->yy_start_stack =  NULL;\n\n/* Defined in main.c */\n#ifdef YY_STDINIT\n    yyin = stdin;\n    yyout = stdout;\n#else\n    yyin = (FILE *) 0;\n    yyout = (FILE *) 0;\n#endif\n\n    /* For future reference: Set errno on error, since we are called by\n     * re_yylex_init()\n     */\n    return 0;\n}\n\n/* re_yylex_destroy is for both reentrant and non-reentrant scanners. */\nint re_yylex_destroy  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n    /* Pop the buffer stack, destroying each element. */\n\twhile(YY_CURRENT_BUFFER){\n\t\tre_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );\n\t\tYY_CURRENT_BUFFER_LVALUE = NULL;\n\t\tre_yypop_buffer_state(yyscanner);\n\t}\n\n\t/* Destroy the stack itself. */\n\tre_yyfree(yyg->yy_buffer_stack ,yyscanner);\n\tyyg->yy_buffer_stack = NULL;\n\n    /* Destroy the start condition stack. */\n        re_yyfree(yyg->yy_start_stack ,yyscanner );\n        yyg->yy_start_stack = NULL;\n\n    /* Reset the globals. This is important in a non-reentrant scanner so the next time\n     * re_yylex() is called, initialization will occur. */\n    yy_init_globals( yyscanner);\n\n    /* Destroy the main struct (reentrant only). */\n    re_yyfree ( yyscanner , yyscanner );\n    yyscanner = NULL;\n    return 0;\n}\n\n/*\n * Internal utility routines.\n */\n\n#ifndef yytext_ptr\nstatic void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\n\tint i;\n\tfor ( i = 0; i < n; ++i )\n\t\ts1[i] = s2[i];\n}\n#endif\n\n#ifdef YY_NEED_STRLEN\nstatic int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)\n{\n\tint n;\n\tfor ( n = 0; s[n]; ++n )\n\t\t;\n\n\treturn n;\n}\n#endif\n\nvoid *re_yyalloc (yy_size_t  size , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\treturn (void *) malloc( size );\n}\n\nvoid *re_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\n\t/* The cast to (char *) in the following accommodates both\n\t * implementations that use char* generic pointers, and those\n\t * that use void* generic pointers.  It works with the latter\n\t * because both ANSI C and C++ allow castless assignment from\n\t * any pointer type to void*, and deal with argument conversions\n\t * as though doing an assignment.\n\t */\n\treturn (void *) realloc( (char *) ptr, size );\n}\n\nvoid re_yyfree (void * ptr , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\tfree( (char *) ptr );\t/* see re_yyrealloc() for (char *) cast */\n}\n\n#define YYTABLES_NAME \"yytables\"\n\n#line 464 \"re_lexer.l\"\n\n\n\nuint8_t escaped_char_value(\n    char* text)\n{\n  char hex[3];\n  int result;\n\n  assert(text[0] == '\\\\');\n\n  switch(text[1])\n  {\n  case 'x':\n    hex[0] = text[2];\n    hex[1] = text[3];\n    hex[2] = '\\0';\n    sscanf(hex, \"%x\", &result);\n    break;\n\n  case 'n':\n    result = '\\n';\n    break;\n\n  case 't':\n    result = '\\t';\n    break;\n\n  case 'r':\n    result = '\\r';\n    break;\n\n  case 'f':\n    result = '\\f';\n    break;\n\n  case 'a':\n    result = '\\a';\n    break;\n\n  default:\n    result = text[1];\n  }\n\n  return result;\n}\n\n\n#ifdef __cplusplus\n#define RE_YY_INPUT yyinput\n#else\n#define RE_YY_INPUT input\n#endif\n\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char)\n{\n  char text[4] = {0, 0, 0, 0};\n\n  text[0] = '\\\\';\n  text[1] = RE_YY_INPUT(yyscanner);\n\n  if (text[1] == EOF)\n    return 0;\n\n  if (text[1] == 'x')\n  {\n    text[2] = RE_YY_INPUT(yyscanner);\n\n    if (text[2] == EOF)\n      return 0;\n\n    text[3] = RE_YY_INPUT(yyscanner);\n\n    if (text[3] == EOF)\n      return 0;\n  }\n\n  *escaped_char = escaped_char_value(text);\n\n  return 1;\n}\n\n\nextern YR_THREAD_STORAGE_KEY recovery_state_key;\n\n\nvoid yyfatal(\n    yyscan_t yyscanner,\n    const char *error_message)\n{\n  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(\n      &recovery_state_key);\n\n  longjmp(*recovery_state, 1);\n}\n\n\nvoid yyerror(\n    yyscan_t yyscanner,\n    RE_LEX_ENVIRONMENT* lex_env,\n    const char *error_message)\n{\n  // if lex_env->last_error_code was set to some error code before\n  // don't overwrite it, we are interested in the first error, not in\n  // subsequent errors like \"syntax error, unexpected $end\" caused by\n  // early parser termination.\n\n  if (lex_env->last_error_code == ERROR_SUCCESS)\n  {\n    lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION;\n\n    strlcpy(\n        lex_env->last_error_message,\n        error_message,\n        sizeof(lex_env->last_error_message));\n  }\n}\n\n\nint yr_parse_re_string(\n  const char* re_string,\n  int flags,\n  RE** re,\n  RE_ERROR* error)\n{\n  yyscan_t yyscanner;\n  jmp_buf recovery_state;\n  RE_LEX_ENVIRONMENT lex_env;\n\n  lex_env.last_error_code = ERROR_SUCCESS;\n\n  yr_thread_storage_set_value(&recovery_state_key, &recovery_state);\n\n  if (setjmp(recovery_state) != 0)\n    return ERROR_INTERNAL_FATAL_ERROR;\n\n  FAIL_ON_ERROR(yr_re_create(re));\n\n  (*re)->flags = flags;\n\n  re_yylex_init(&yyscanner);\n  re_yyset_extra(*re,yyscanner);\n  re_yy_scan_string(re_string,yyscanner);\n  yyparse(yyscanner, &lex_env);\n  re_yylex_destroy(yyscanner);\n\n  if (lex_env.last_error_code != ERROR_SUCCESS)\n  {\n    yr_re_destroy(*re);\n    *re = NULL;\n\n    strlcpy(\n        error->message,\n        lex_env.last_error_message,\n        sizeof(error->message));\n\n    return lex_env.last_error_code;\n  }\n\n  return ERROR_SUCCESS;\n}\n\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* Lexical analyzer for regular expressions */\n\n%{\n\n/* Disable warnings for unused functions in this file.\n\nAs we redefine YY_FATAL_ERROR macro to use our own function re_yyfatal, the\nyy_fatal_error function generated by Flex is not actually used, causing a\ncompiler warning. Flex doesn't offer any options to remove the yy_fatal_error\nfunction. When they include something like %option noyy_fatal_error as they do\nwith noyywrap then we can remove this pragma.\n*/\n\n#ifdef __GNUC__\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n#include <assert.h>\n#include <setjmp.h>\n\n\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n#include <yara/threading.h>\n#include <yara/strutils.h>\n\n\n#ifdef _WIN32\n#define snprintf _snprintf\n#endif\n\nstatic uint8_t word_chars[] = {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,\n    0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n\nuint8_t escaped_char_value(\n    char* text);\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char);\n\n%}\n\n%option reentrant bison-bridge\n%option noyywrap\n%option nounistd\n%option nounput\n%option never-interactive\n%option yylineno\n%option prefix=\"re_yy\"\n\n%option outfile=\"lex.yy.c\"\n\n%option verbose\n%option warn\n\n%x char_class\n\ndigit         [0-9]\nhex_digit     [0-9a-fA-F]\n\n%%\n\n\\{{digit}*,{digit}*\\} {\n\n  // Examples: {3,8} {0,5} {,5} {7,}\n\n  int hi_bound;\n  int lo_bound = atoi(yytext + 1);\n\n  char* comma = strchr(yytext, ',');\n\n  if (comma - yytext == strlen(yytext) - 2)\n    // if comma is followed by the closing curly bracket\n    // (example: {2,}) set high bound value to maximum.\n    hi_bound = INT16_MAX;\n  else\n    hi_bound = atoi(comma + 1);\n\n  if (hi_bound > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  if (hi_bound < lo_bound || hi_bound < 0 || lo_bound < 0)\n  {\n    yyerror(yyscanner, lex_env, \"bad repeat interval\");\n    yyterminate();\n  }\n\n  yylval->range = (hi_bound << 16) | lo_bound;\n\n  return _RANGE_;\n}\n\n\n\\{{digit}+\\} {\n\n  // Example: {10}\n\n  int value = atoi(yytext + 1);\n\n  if (value > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  yylval->range = (value << 16) | value;\n\n  return _RANGE_;\n}\n\n\n\\[\\^ {\n\n  // Start of a negated character class. Example: [^abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n}\n\n\\[\\^\\] {\n\n  // Start of character negated class containing a ].\n  // Example: [^]abc] this must be interpreted as a class\n  // not matching ], a, b, nor c\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\n\n\\[\\] {\n\n  // Start of character class containing a ].\n  // Example: []abc] this must be interpreted as a class\n  // matching ], a, b, or c.\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\n\n\\[ {\n\n  // Start of character class. Example: [abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n}\n\n\n[^\\\\\\[\\(\\)\\|\\$\\.\\^\\+\\*\\?] {\n\n  // Any non-special character is passed as a CHAR token to the scanner.\n\n  yylval->integer = yytext[0];\n  return _CHAR_;\n}\n\n\n\\\\w {\n  return _WORD_CHAR_;\n}\n\n\n\\\\W {\n  return _NON_WORD_CHAR_;\n}\n\n\n\\\\s {\n  return _SPACE_;\n}\n\n\n\\\\S {\n  return _NON_SPACE_;\n}\n\n\n\\\\d {\n  return _DIGIT_;\n}\n\n\n\\\\D {\n  return _NON_DIGIT_;\n}\n\n\n\\\\b {\n  return _WORD_BOUNDARY_;\n}\n\n\\\\B {\n  return _NON_WORD_BOUNDARY_;\n}\n\n\n\\\\{digit}+ {\n\n  yyerror(yyscanner, lex_env, \"backreferences are not allowed\");\n  yyterminate();\n}\n\n\n\\\\ {\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    yylval->integer = c;\n    return _CHAR_;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n    yyterminate();\n  }\n}\n\n\n<char_class>\\] {\n\n  // End of character class.\n\n  int i;\n\n  yylval->class_vector = (uint8_t*) yr_malloc(32);\n  memcpy(yylval->class_vector, LEX_ENV->class_vector, 32);\n\n  if (LEX_ENV->negated_class)\n  {\n    for(i = 0; i < 32; i++)\n      yylval->class_vector[i] = ~yylval->class_vector[i];\n  }\n\n  BEGIN(INITIAL);\n  return _CLASS_;\n}\n\n\n\n<char_class>(\\\\x{hex_digit}{2}|\\\\.|[^\\\\])\\-[^]] {\n\n  // A range inside a character class.\n  //  [abc0-9]\n  //      ^- matching here\n\n  uint16_t c;\n  uint8_t start = yytext[0];\n  uint8_t end = yytext[2];\n\n  if (start == '\\\\')\n  {\n    start = escaped_char_value(yytext);\n\n    if (yytext[1] == 'x')\n      end = yytext[5];\n    else\n      end = yytext[3];\n  }\n\n  if (end == '\\\\')\n  {\n    if (!read_escaped_char(yyscanner, &end))\n    {\n      yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n      yyterminate();\n    }\n  }\n\n  if (end < start)\n  {\n    yyerror(yyscanner, lex_env, \"bad character range\");\n    yyterminate();\n  }\n\n  for (c = start; c <= end; c++)\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n}\n\n\n<char_class>\\\\w {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= word_chars[i];\n}\n\n\n<char_class>\\\\W {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= ~word_chars[i];\n}\n\n\n<char_class>\\\\s {\n\n  LEX_ENV->class_vector[' ' / 8] |= 1 << ' ' % 8;\n  LEX_ENV->class_vector['\\t' / 8] |= 1 << '\\t' % 8;\n}\n\n\n<char_class>\\\\S {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    if (i == ' ' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << ' ' % 8);\n    else if (i == '\\t' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << '\\t' % 8);\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\n\n<char_class>\\\\d {\n\n  char c;\n\n  for (c = '0'; c <= '9'; c++)\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n}\n\n\n<char_class>\\\\D {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    // digits 0-7 are in the sixth byte of the vector, let that byte alone\n    if (i == 6)\n      continue;\n\n    // digits 8 and 9 are the lowest two bits in the seventh byte of the\n    // vector, let those bits alone.\n    if (i == 7)\n      LEX_ENV->class_vector[i] |= 0xFC;\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\n\n<char_class>\\\\ {\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"unexpected end of buffer\");\n    yyterminate();\n  }\n}\n\n\n<char_class>. {\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    // A character class (i.e: [0-9a-f]) is represented by a 256-bits vector,\n    // here we set to 1 the vector's bit corresponding to the input character.\n\n    LEX_ENV->class_vector[yytext[0] / 8] |= 1 << yytext[0] % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\n\n<char_class><<EOF>> {\n\n  // End of regexp reached while scanning a character class.\n\n  yyerror(yyscanner, lex_env, \"missing terminating ] for character class\");\n  yyterminate();\n}\n\n\n. {\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    return yytext[0];\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\n\n<<EOF>> {\n\n  yyterminate();\n}\n\n%%\n\nuint8_t escaped_char_value(\n    char* text)\n{\n  char hex[3];\n  int result;\n\n  assert(text[0] == '\\\\');\n\n  switch(text[1])\n  {\n  case 'x':\n    hex[0] = text[2];\n    hex[1] = text[3];\n    hex[2] = '\\0';\n    sscanf(hex, \"%x\", &result);\n    break;\n\n  case 'n':\n    result = '\\n';\n    break;\n\n  case 't':\n    result = '\\t';\n    break;\n\n  case 'r':\n    result = '\\r';\n    break;\n\n  case 'f':\n    result = '\\f';\n    break;\n\n  case 'a':\n    result = '\\a';\n    break;\n\n  default:\n    result = text[1];\n  }\n\n  return result;\n}\n\n\n#ifdef __cplusplus\n#define RE_YY_INPUT yyinput\n#else\n#define RE_YY_INPUT input\n#endif\n\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char)\n{\n  char text[4] = {0, 0, 0, 0};\n\n  text[0] = '\\\\';\n  text[1] = RE_YY_INPUT(yyscanner);\n\n  if (text[1] == EOF)\n    return 0;\n\n  if (text[1] == 'x')\n  {\n    text[2] = RE_YY_INPUT(yyscanner);\n\n    if (text[2] == EOF)\n      return 0;\n\n    text[3] = RE_YY_INPUT(yyscanner);\n\n    if (text[3] == EOF)\n      return 0;\n  }\n\n  *escaped_char = escaped_char_value(text);\n\n  return 1;\n}\n\n\nextern YR_THREAD_STORAGE_KEY recovery_state_key;\n\n\nvoid yyfatal(\n    yyscan_t yyscanner,\n    const char *error_message)\n{\n  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(\n      &recovery_state_key);\n\n  longjmp(*recovery_state, 1);\n}\n\n\nvoid yyerror(\n    yyscan_t yyscanner,\n    RE_LEX_ENVIRONMENT* lex_env,\n    const char *error_message)\n{\n  // if lex_env->last_error_code was set to some error code before\n  // don't overwrite it, we are interested in the first error, not in\n  // subsequent errors like \"syntax error, unexpected $end\" caused by\n  // early parser termination.\n\n  if (lex_env->last_error_code == ERROR_SUCCESS)\n  {\n    lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION;\n\n    strlcpy(\n        lex_env->last_error_message,\n        error_message,\n        sizeof(lex_env->last_error_message));\n  }\n}\n\n\nint yr_parse_re_string(\n  const char* re_string,\n  int flags,\n  RE** re,\n  RE_ERROR* error)\n{\n  yyscan_t yyscanner;\n  jmp_buf recovery_state;\n  RE_LEX_ENVIRONMENT lex_env;\n\n  lex_env.last_error_code = ERROR_SUCCESS;\n\n  yr_thread_storage_set_value(&recovery_state_key, &recovery_state);\n\n  if (setjmp(recovery_state) != 0)\n    return ERROR_INTERNAL_FATAL_ERROR;\n\n  FAIL_ON_ERROR(yr_re_create(re));\n\n  (*re)->flags = flags;\n\n  yylex_init(&yyscanner);\n  yyset_extra(*re, yyscanner);\n  yy_scan_string(re_string, yyscanner);\n  yyparse(yyscanner, &lex_env);\n  yylex_destroy(yyscanner);\n\n  if (lex_env.last_error_code != ERROR_SUCCESS)\n  {\n    yr_re_destroy(*re);\n    *re = NULL;\n\n    strlcpy(\n        error->message,\n        lex_env.last_error_message,\n        sizeof(error->message));\n\n    return lex_env.last_error_code;\n  }\n\n  return ERROR_SUCCESS;\n}\n", "/*\nCopyright (c) 2016. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include <yara.h>\n#include \"blob.h\"\n#include \"util.h\"\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n#include <fileapi.h>\n#else\n#include <unistd.h>\n#endif\n#include <fcntl.h>\n\nstatic void test_boolean_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: true }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: true or false }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: true and true }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0x1 and 0x2}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: false }\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: true and false }\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: false or false }\", NULL);\n}\n\n\nstatic void test_comparison_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: 2 > 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 < 2 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 2 >= 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 <= 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 == 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 == 1.5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.0 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 >= 1.0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 >= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.0 >= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0.5 < 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0.5 <= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: 1.0 <= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" == \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" <= \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" >= \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"ab\\\" < \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" > \\\"ab\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" < \\\"abd\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abd\\\" > \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 != 1}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 != 1.0}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 2 > 3}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 2.1 < 2}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" != \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" > \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" < \\\"abc\\\"}\", NULL);\n\n}\n\nstatic void test_arithmetic_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: (1 + 1) * 2 == (9 - 1) \\\\ 2 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 5 % 2 == 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 + 1.5 == 3}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 3 \\\\ 2 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 3.0 \\\\ 2 == 1.5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 + -1 == 0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -1 + -1 == -2}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 4 --2 * 2 == 8}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -1.0 * 1 == -1.0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1-1 == 0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -2.0-3.0 == -5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: --1 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1--1 == 2}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -0x01 == -1}\", NULL);\n\n}\n\n\nstatic void test_bitwise_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: 0x55 | 0xAA == 0xFF }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: ~0xAA ^ 0x5A & 0xFF == (~0xAA) ^ (0x5A & 0xFF) }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: ~0x55 & 0xFF == 0xAA }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 8 >> 2 == 2 }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 << 3 == 8 }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 | 3 ^ 3 == 1 | (3 ^ 3) }\",\n      NULL);\n\n  assert_false_rule(\n      \"rule test { condition: ~0xAA ^ 0x5A & 0xFF == 0x0F }\",\n      NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 | 3 ^ 3 == (1 | 3) ^ 3}\",\n      NULL);\n\n}\n\n\nstatic void test_syntax()\n{\n  assert_syntax_error(\n      \"rule test { strings: $a = \\\"a\\\" $a = \\\"a\\\" condition: all of them }\");\n}\n\n\nstatic void test_anonymous_strings()\n{\n  assert_true_rule(\n      \"rule test { strings: $ = \\\"a\\\" $ = \\\"b\\\" condition: all of them }\",\n      \"ab\");\n}\n\n\nstatic void test_strings()\n{\n  char* str = \"---- abc ---- xyz\";\n  uint8_t blob[] = \"---- a\\0b\\0c\\0 -\\0-\\0-\\0-\\0x\\0y\\0z\\0\";\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"a\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ab\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"xyz\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" nocase fullword condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"aBc\\\" nocase  condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"a\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"ab\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      str);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"a\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"a\\\" wide ascii condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide ascii condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide nocase fullword condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"aBc\\\" wide nocase condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"aBc\\\" wide ascii nocase condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"---xyz\\\" wide nocase condition: $a }\",\n      blob);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"abc\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"xabcx\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"xabc\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"abcx\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" ascii wide fullword condition: $a }\",\n      \"abcx\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" ascii wide fullword condition: $a }\",\n      \"a\\0abc\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"a\\0b\\0c\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0c\\0x\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0c\\0\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\001a\\0b\\0c\\0\");\n\n  assert_true_rule(\n      \"rule test {\\n\\\n         strings:\\n\\\n             $a = \\\"abcdef\\\"\\n\\\n             $b = \\\"cdef\\\"\\n\\\n             $c = \\\"ef\\\"\\n\\\n         condition:\\n\\\n             all of them\\n\\\n       }\", \"abcdef\");\n}\n\n\nstatic void test_wildcard_strings()\n{\n  assert_true_rule_blob(\n      \"rule test {\\n\\\n         strings:\\n\\\n             $s1 = \\\"abc\\\"\\n\\\n             $s2 = \\\"xyz\\\"\\n\\\n         condition:\\n\\\n             for all of ($*) : ($)\\n\\\n      }\",\n      \"---- abc ---- A\\x00\"\"B\\x00\"\"C\\x00 ---- xyz\");\n}\n\n\nstatic void test_hex_strings()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 00 00 60 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 0? 00 00 ?0 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\\\n\n      \"rule test { \\\n        strings: $a = { 6? 01 00 00 60 0? } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 [1-3] 60 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 [1-3] (60|61) 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [-] 6A 2A [-] 58 C3} \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [300-] 6A 2A [-] 58 C3} \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 2e 7? (65 | ?\"\"?\"\") 78 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_false_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [0-300] 6A 2A } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_false_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [0-128] 45 [0-128] 01 [0-128]  C3 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] // Inline comment\\n\\r \\\n          38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 /* Inline comment */ [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 /* Inline multi-line\\n\\r \\\n                                 comment */ [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = {\\n 31 32 [-] 38 39 \\n\\r} \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 33 34 [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [1] 34 35 [2] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test {\\\n         strings: $a = { 31 32 [1-] 34 35 [1-] 38 39 } \\\n         condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-3] 34 35 [1-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-2] 35 [1-] 37 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 38 39 } \\\n        condition: all of them }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 32 33 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 35 36 [-] 31 32 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [2-] 34 35 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-3] 37 38 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 [0] 02 } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { [-] 01 02 } condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 [-] } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 ([-] 03 | 04) } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 (03 [-] | 04) } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 (03 | 04 [-]) } \\\n        condition: $a \");\n\n  /* TODO: tests.py:551 ff. */\n}\n\n\nstatic void test_count()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: #a == 2 }\",\n      \"mississippi\");\n}\n\n\nstatic void test_at()\n{\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = \\\"ssi\\\" \\\n        condition: $a at 2 and $a at 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = \\\"mis\\\" \\\n        condition: $a at ~0xFF & 0xFF }\",\n      \"mississippi\");\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 00 00 00 00 ?? 74 65 78 74 } \\\n        condition: $a at 308}\",\n      PE32_FILE);\n}\n\n\nstatic void test_in()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 6a 2a 58 c3 } \\\n        condition: $a in (entrypoint .. entrypoint + 1) }\",\n      PE32_FILE);\n}\n\n\nstatic void test_offset()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a == 2 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a == @a[1] }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a[2] == 5 }\",\n      \"mississippi\");\n}\n\n\nstatic void test_length()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*?ssi/ condition: !a == 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*?ssi/ condition: !a[1] == 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*ssi/ condition: !a == 8 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*ssi/ condition: !a[1] == 8 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi.*ppi/ condition: !a[1] == 9 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi.*ppi/ condition: !a[2] == 6 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [1-3] 73 73 69 } condition: !a == 5}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [-] 73 73 69 } condition: !a == 5}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [-] 70 70 69 } condition: !a == 11}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D 69 73 73 [-] 70 69 } condition: !a == 11}\",\n      \"mississippi\");\n}\n\n\nstatic void test_of()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: any of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: 1 of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: 2 of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a1 = \\\"dummy1\\\" $b1 = \\\"dummy1\\\" $b2 = \\\"ssi\\\"\"\n      \"condition: any of ($a*, $b*) }\",\n      \"mississippi\");\n\n  assert_true_rule_blob(\n      \"rule test { \\\n         strings: \\\n           $ = /abc/ \\\n           $ = /def/ \\\n           $ = /ghi/ \\\n         condition: \\\n           for any of ($*) : ( for any i in (1..#): (uint8(@[i] - 1) == 0x00) )\\\n       }\",\n       \"abc\\000def\\000ghi\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n          $b = \\\"mis\\\" \\\n          $c = \\\"oops\\\" \\\n        condition: \\\n          all of them \\\n      }\",\n      \"mississippi\");\n\n  assert_syntax_error(\n      \"rule test { condition: all of ($a*) }\");\n\n  assert_syntax_error(\n      \"rule test { condition: all of them }\");\n}\n\n\nvoid test_for()\n{\n  assert_true_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n        condition: \\\n          for all i in (1..#a) : (@a[i] >= 2 and @a[i] <= 5) \\\n      }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n          $b = \\\"mi\\\" \\\n        condition: \\\n          for all i in (1..#a) : ( for all j in (1..#b) : (@a[i] >= @b[j])) \\\n      }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n        condition: \\\n          for all i in (1..#a) : (@a[i] == 5) \\\n      }\",\n      \"mississippi\");\n}\n\n\nvoid test_re()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi(s|p)/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssim*/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssa?/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /Miss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /(M|N)iss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /[M-N]iss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /(Mi|ssi)ssippi/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ppi\\\\tmi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ppi\\\\.mi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /^mississippi/ fullword condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /mississippi.*mississippi$/s condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /^ssi/ condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /ssi$/ condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /ssissi/ fullword condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /^[isp]+/ condition: $a }\",\n      \"mississippi\");\n\n  assert_regexp_syntax_error(\")\");\n  assert_true_regexp(\"abc\", \"abc\", \"abc\");\n  assert_false_regexp(\"abc\", \"xbc\");\n  assert_false_regexp(\"abc\", \"axc\");\n  assert_false_regexp(\"abc\", \"abx\");\n  assert_true_regexp(\"abc\", \"xabcx\", \"abc\");\n  assert_true_regexp(\"abc\", \"ababc\", \"abc\");\n  assert_true_regexp(\"a.c\", \"abc\", \"abc\");\n  assert_false_regexp(\"a.b\", \"a\\nb\");\n  assert_false_regexp(\"a.*b\", \"acc\\nccb\");\n  assert_false_regexp(\"a.{4,5}b\", \"acc\\nccb\");\n  assert_true_regexp(\"a.b\", \"a\\rb\", \"a\\rb\");\n  assert_true_regexp(\"ab*c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*c\", \"ac\", \"ac\");\n  assert_true_regexp(\"ab*bc\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*bc\", \"abbc\", \"abbc\");\n  assert_true_regexp(\"a.*bb\", \"abbbb\", \"abbbb\");\n  assert_true_regexp(\"a.*?bbb\", \"abbbbbb\", \"abbb\");\n  assert_true_regexp(\"a.*c\", \"ac\", \"ac\");\n  assert_true_regexp(\"a.*c\", \"axyzc\", \"axyzc\");\n  assert_true_regexp(\"ab+c\", \"abbc\", \"abbc\");\n  assert_false_regexp(\"ab+c\", \"ac\");\n  assert_true_regexp(\"ab+\", \"abbbb\", \"abbbb\");\n  assert_true_regexp(\"ab+?\", \"abbbb\", \"ab\");\n  assert_false_regexp(\"ab+bc\", \"abc\");\n  assert_false_regexp(\"ab+bc\", \"abq\");\n  assert_true_regexp(\"a+b+c\", \"aabbabc\", \"abc\");\n  assert_false_regexp(\"ab?bc\", \"abbbbc\");\n  assert_true_regexp(\"ab?c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*?\", \"abbb\", \"a\");\n  assert_true_regexp(\"ab?c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab??\", \"ab\", \"a\");\n  assert_true_regexp(\"a(b|x)c\", \"abc\", \"abc\");\n  assert_true_regexp(\"a(b|x)c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a(b|.)c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a(b|x|y)c\", \"ayc\", \"ayc\");\n  assert_true_regexp(\"(a+|b)*\", \"ab\", \"ab\");\n  assert_true_regexp(\"a|b|c|d|e\", \"e\", \"e\");\n  assert_true_regexp(\"(a|b|c|d|e)f\", \"ef\", \"ef\");\n  assert_true_regexp(\".b{2}\", \"abb\", \"abb\");\n  assert_true_regexp(\"ab{1}c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab{1,2}c\", \"abbc\", \"abbc\");\n  assert_true_regexp(\"ab{1,}c\", \"abbbc\", \"abbbc\");\n  assert_false_regexp(\"ab{1,}b\", \"ab\");\n  assert_false_regexp(\"ab{1}c\", \"abbc\");\n  assert_true_regexp(\"ab{0,}c\", \"ac\", \"ac\");\n  assert_true_regexp(\"ab{0,}c\", \"abbbc\", \"abbbc\");\n  assert_true_regexp(\"ab{,3}c\", \"abbbc\", \"abbbc\");\n  assert_false_regexp(\"ab{,2}c\", \"abbbc\");\n  assert_false_regexp(\"ab{4,5}bc\", \"abbbbc\");\n  assert_true_regexp(\"ab{2,3}?\", \"abbbbb\", \"abb\");\n  assert_true_regexp(\"ab{.*}\", \"ab{c}\", \"ab{c}\");\n  assert_true_regexp(\".(aa){1,2}\", \"aaaaaaaaaa\", \"aaaaa\");\n  assert_true_regexp(\"a.(bc.){2}\", \"aabcabca\", \"aabcabca\");\n  assert_true_regexp(\"(ab{1,2}c){1,3}\", \"abbcabc\", \"abbcabc\");\n  assert_true_regexp(\"ab(c|cc){1,3}d\", \"abccccccd\", \"abccccccd\");\n  assert_true_regexp(\"a[bx]c\", \"abc\", \"abc\");\n  assert_true_regexp(\"a[bx]c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a[0-9]*b\", \"ab\", \"ab\");\n  assert_true_regexp(\"a[0-9]*b\", \"a0123456789b\", \"a0123456789b\");\n  assert_true_regexp(\"[0-9a-f]+\", \"0123456789abcdef\", \"0123456789abcdef\");\n  assert_true_regexp(\"[0-9a-f]+\", \"xyz0123456789xyz\", \"0123456789\");\n  assert_true_regexp(\"a[\\\\s\\\\S]b\", \"a b\", \"a b\");\n  assert_true_regexp(\"a[\\\\d\\\\D]b\", \"a1b\", \"a1b\");\n  assert_false_regexp(\"[x-z]+\", \"abc\");\n  assert_true_regexp(\"a[-]?c\", \"ac\", \"ac\");\n  assert_true_regexp(\"a[-b]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[-b]\", \"ab\", \"ab\");\n  assert_true_regexp(\"a[b-]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[b-]\", \"ab\", \"ab\");\n  assert_true_regexp(\"[a-c-e]\", \"b\", \"b\");\n  assert_true_regexp(\"[a-c-e]\", \"-\", \"-\");\n  assert_false_regexp(\"[a-c-e]\", \"d\");\n  assert_regexp_syntax_error(\"[b-a]\");\n  assert_regexp_syntax_error(\"(abc\");\n  assert_regexp_syntax_error(\"abc)\");\n  assert_regexp_syntax_error(\"a[]b\");\n  assert_regexp_syntax_error(\"a\\\\\");\n  assert_true_regexp(\"a[\\\\-b]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[\\\\-b]\", \"ab\", \"ab\");\n  assert_regexp_syntax_error(\"a[\\\\\");\n  assert_true_regexp(\"a]\", \"a]\", \"a]\");\n  assert_true_regexp(\"a[]]b\", \"a]b\", \"a]b\");\n  assert_true_regexp(\"a[\\\\]]b\", \"a]b\", \"a]b\");\n  assert_true_regexp(\"a[^bc]d\", \"aed\", \"aed\");\n  assert_false_regexp(\"a[^bc]d\", \"abd\");\n  assert_true_regexp(\"a[^-b]c\", \"adc\", \"adc\");\n  assert_false_regexp(\"a[^-b]c\", \"a-c\");\n  assert_false_regexp(\"a[^]b]c\", \"a]c\");\n  assert_true_regexp(\"a[^]b]c\", \"adc\", \"adc\");\n  assert_true_regexp(\"[^ab]*\", \"cde\", \"cde\");\n  assert_regexp_syntax_error(\")(\");\n  assert_true_regexp(\"a\\\\sb\", \"a b\", \"a b\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\tb\", \"a\\tb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\rb\", \"a\\rb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\nb\", \"a\\nb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\vb\", \"a\\vb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\fb\", \"a\\fb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a b\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\tb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\rb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\nb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\vb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\fb\");\n  assert_true_regexp(\"\\\\n\\\\r\\\\t\\\\f\\\\a\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");\n  assert_true_regexp(\"[\\\\n][\\\\r][\\\\t][\\\\f][\\\\a]\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");\n  assert_true_regexp(\"\\\\x01\\\\x02\\\\x03\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");\n  assert_true_regexp(\"[\\\\x01-\\\\x03]+\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");\n  assert_false_regexp(\"[\\\\x00-\\\\x02]+\", \"\\x03\\x04\\x05\");\n  assert_true_regexp(\"[\\\\x5D]\", \"]\", \"]\");\n  assert_true_regexp(\"[\\\\0x5A-\\\\x5D]\", \"\\x5B\", \"\\x5B\");\n  assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"[\\\\x5C-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"a\\\\wc\", \"abc\", \"abc\");\n  assert_true_regexp(\"a\\\\wc\", \"a_c\", \"a_c\");\n  assert_true_regexp(\"a\\\\wc\", \"a0c\", \"a0c\");\n  assert_false_regexp(\"a\\\\wc\", \"a*c\");\n  assert_true_regexp(\"\\\\w+\", \"--ab_cd0123--\", \"ab_cd0123\");\n  assert_true_regexp(\"[\\\\w]+\", \"--ab_cd0123--\", \"ab_cd0123\");\n  assert_true_regexp(\"\\\\D+\", \"1234abc5678\", \"abc\");\n  assert_true_regexp(\"[\\\\d]+\", \"0123456789\", \"0123456789\");\n  assert_true_regexp(\"[\\\\D]+\", \"1234abc5678\", \"abc\");\n  assert_true_regexp(\"[\\\\da-fA-F]+\", \"123abc\", \"123abc\");\n  assert_false_regexp(\"^(ab|cd)e\", \"abcde\");\n  assert_true_regexp(\"(abc|)ef\", \"abcdef\", \"ef\");\n  assert_true_regexp(\"(abc|)ef\", \"abcef\", \"abcef\");\n  assert_true_regexp(\"\\\\babc\", \"abc\", \"abc\");\n  assert_true_regexp(\"abc\\\\b\", \"abc\", \"abc\");\n  assert_false_regexp(\"\\\\babc\", \"1abc\");\n  assert_false_regexp(\"abc\\\\b\", \"abc1\");\n  assert_true_regexp(\"abc\\\\s\\\\b\", \"abc x\", \"abc \");\n  assert_false_regexp(\"abc\\\\s\\\\b\", \"abc  \");\n  assert_true_regexp(\"\\\\babc\\\\b\", \" abc \", \"abc\");\n  assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \" abc \", \"abc\");\n  assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\b\", \"abcd\", \"bcd\");\n  assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\", \"abcd\", \"abc\");\n  assert_false_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \"abcd\");\n  assert_false_regexp(\"\\\\Babc\", \"abc\");\n  assert_false_regexp(\"abc\\\\B\", \"abc\");\n  assert_true_regexp(\"\\\\Babc\", \"1abc\", \"abc\");\n  assert_true_regexp(\"abc\\\\B\", \"abc1\", \"abc\");\n  assert_false_regexp(\"abc\\\\s\\\\B\", \"abc x\");\n  assert_true_regexp(\"abc\\\\s\\\\B\", \"abc  \", \"abc \");\n  assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\B\", \"abcd\", \"abc\");\n  assert_true_regexp(\"\\\\B\\\\w\\\\w\\\\w\", \"abcd\", \"bcd\");\n  assert_false_regexp(\"\\\\B\\\\w\\\\w\\\\w\\\\B\", \"abcd\");\n\n  // This is allowed in most regexp engines but in order to keep the\n  // grammar free of shift/reduce conflicts I've decided not supporting\n  // it. Users can use the (abc|) form instead.\n  assert_regexp_syntax_error(\"(|abc)ef\");\n\n  assert_true_regexp(\"((a)(b)c)(d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"(a|b)c*d\", \"abcd\", \"bcd\");\n  assert_true_regexp(\"(ab|ab*)bc\", \"abc\", \"abc\");\n  assert_true_regexp(\"a([bc]*)c*\", \"abc\", \"abc\");\n  assert_true_regexp(\"a([bc]*)c*\", \"ac\", \"ac\");\n  assert_true_regexp(\"a([bc]*)c*\", \"a\", \"a\");\n  assert_true_regexp(\"a([bc]*)(c*d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a([bc]+)(c*d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a([bc]*)(c+d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a[bcd]*dcdcde\", \"adcdcde\", \"adcdcde\");\n  assert_false_regexp(\"a[bcd]+dcdcde\", \"adcdcde\");\n  assert_true_regexp(\"\\\\((.*), (.*)\\\\)\", \"(a, b)\", \"(a, b)\");\n  assert_true_regexp(\"abc|123$\", \"abcx\", \"abc\");\n  assert_false_regexp(\"abc|123$\", \"123x\");\n  assert_true_regexp(\"abc|^123\", \"123\", \"123\");\n  assert_false_regexp(\"abc|^123\", \"x123\");\n  assert_true_regexp(\"^abc$\", \"abc\", \"abc\");\n  assert_false_regexp(\"^abc$\", \"abcc\");\n  assert_true_regexp(\"^abc\", \"abcc\", \"abc\");\n  assert_false_regexp(\"^abc$\", \"aabc\");\n  assert_true_regexp(\"abc$\", \"aabc\", \"abc\");\n  assert_true_regexp(\"^a(bc+|b[eh])g|.h$\", \"abhg\", \"abhg\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effgz\", \"effgz\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"ij\", \"ij\");\n  assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effg\");\n  assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"bcdd\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"reffgz\", \"effgz\");\n\n  // Test case for issue #324\n  assert_true_regexp(\"whatever|   x.   x\", \"   xy   x\", \"   xy   x\");\n}\n\n\nstatic void test_entrypoint()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 6a 2a 58 c3 } \\\n        condition: $a at entrypoint }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { b8 01 00 00 00 bb 2a } \\\n        condition: $a at entrypoint }\",\n      ELF32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { b8 01 00 00 00 bb 2a } \\\n        condition: $a at entrypoint }\",\n      ELF64_FILE);\n\n  assert_false_rule(\n      \"rule test { condition: entrypoint >= 0 }\",\n      NULL);\n}\n\n\nstatic void test_filesize()\n{\n  char rule[80];\n\n  snprintf(\n      rule,\n      sizeof(rule),\n      \"rule test { condition: filesize == %zd }\",\n      sizeof(PE32_FILE));\n\n  assert_true_rule_blob(\n      rule,\n      PE32_FILE);\n}\n\n\nstatic void test_comments()\n{\n  assert_true_rule(\n      \"rule test {\\n\\\n         condition:\\n\\\n             //  this is a comment\\n\\\n             /*** this is a comment ***/\\n\\\n             /* /* /*\\n\\\n                 this is a comment\\n\\\n             */\\n\\\n             true\\n\\\n      }\",\n      NULL);\n}\n\n\nstatic void test_global_rules()\n{\n  assert_true_rule(\n      \"global private rule global_rule { \\\n        condition: \\\n          true \\\n      } \\\n      rule test { \\\n        condition: true \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"global private rule global_rule { \\\n        condition: \\\n          false \\\n      } \\\n      rule test { \\\n        condition: true \\\n      }\",\n      NULL);\n}\n\n\nstatic void test_modules()\n{\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.one + 1 == tests.constants.two \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.foo == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.empty == \\\"\\\"  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.empty() == \\\"\\\"  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.struct_array[1].i == 1  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.struct_array[0].i == 1 or true \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.integer_array[0] == 0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.integer_array[1] == 1 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_array[0] == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_array[2] == \\\"baz\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_dict[\\\"foo\\\"] == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_dict[\\\"bar\\\"] == \\\"bar\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.isum(1,2) == 3 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.isum(1,2,3) == 6 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.fsum(1.0,2.0) == 3.0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.fsum(1.0,2.0,3.0) == 6.0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.length(\\\"dummy\\\") == 5 \\\n      }\",\n      NULL);\n\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.struct_array[0].i == 1  \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.isum(1,1) == 3 \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.fsum(1.0,1.0) == 3.0 \\\n      }\",\n      NULL);\n}\n\n#if defined(HASH_MODULE)\nstatic void test_hash_module()\n{\n  uint8_t blob[] = {0x61, 0x62, 0x63, 0x64, 0x65};\n\n  assert_true_rule_blob(\n      \"import \\\"hash\\\" \\\n       rule test { \\\n        condition: \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n            and \\\n          hash.sha1(0, filesize) == \\\n            \\\"03de6c570bfe24bfc328ccd7ca46b76eadaf4334\\\" \\\n            and \\\n          hash.sha1(1, filesize) == \\\n            \\\"a302d65ae4d9e768a1538d53605f203fd8e2d6e2\\\" \\\n            and \\\n          hash.sha256(0, filesize) == \\\n            \\\"36bbe50ed96841d10443bcb670d6554f0a34b761be67ec9c4a8ad2c0c44ca42c\\\" \\\n            and \\\n          hash.sha256(1, filesize) == \\\n            \\\"aaaaf2863e043b9df604158ad5c16ff1adaf3fd7e9fcea5dcb322b6762b3b59a\\\" \\\n      }\",\n      blob);\n\n  // Test hash caching mechanism\n\n  assert_true_rule_blob(\n      \"import \\\"hash\\\" \\\n       rule test { \\\n        condition: \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n            and \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n      }\",\n      blob);\n}\n#endif\n\n\nvoid test_integer_functions()\n{\n  assert_true_rule(\n      \"rule test { condition: uint8(0) == 0xAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint16(0) == 0xBBAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint32(0) == 0xDDCCBBAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint8be(0) == 0xAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint16be(0) == 0xAABB}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint32be(0) == 0xAABBCCDD}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n}\n\n\nvoid test_file_descriptor()\n{\n  YR_COMPILER* compiler = NULL;\n  YR_RULES* rules = NULL;\n  \n#if defined(_WIN32) || defined(__CYGWIN__)\n  HANDLE fd = CreateFile(\"tests/data/true.yar\", GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, NULL);\n  if (fd == INVALID_HANDLE_VALUE)\n  {\n    fputs(\"CreateFile failed\", stderr);\n    exit(1);\n  }\n#else\n  int fd = open(\"tests/data/true.yar\", O_RDONLY);\n  if (fd < 0)\n  {\n    perror(\"open\");\n    exit(EXIT_FAILURE);\n  }\n#endif\n  if (yr_compiler_create(&compiler) != ERROR_SUCCESS)\n  {\n    perror(\"yr_compiler_create\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (yr_compiler_add_fd(compiler, fd, NULL, NULL) != 0) {\n    perror(\"yr_compiler_add_fd\");\n    exit(EXIT_FAILURE);\n  }\n  \n#if defined(_WIN32) || defined(__CYGWIN__)\n  CloseHandle(fd);\n#else\n  close(fd);\n#endif\n\n  if (yr_compiler_get_rules(compiler, &rules) != ERROR_SUCCESS) {\n    perror(\"yr_compiler_add_fd\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (compiler)\n  {\n    yr_compiler_destroy(compiler);\n  }\n  if (rules)\n  {\n    yr_rules_destroy(rules);\n  }\n  \n  return;\n}\n\n\nint main(int argc, char** argv)\n{\n  yr_initialize();\n\n  test_boolean_operators();\n  test_comparison_operators();\n  test_arithmetic_operators();\n  test_bitwise_operators();\n  test_syntax();\n  test_anonymous_strings();\n  test_strings();\n  test_wildcard_strings();\n  test_hex_strings();\n  test_count();\n  test_at();\n  test_in();\n  test_offset();\n  test_length();\n  test_of();\n  test_for();\n  test_re();\n  test_filesize();\n  // test_compile_file();\n  // test_compile_files();\n  // test_include_files();\n  // test_externals();\n  // test_callback();\n  // test_compare();\n  test_comments();\n  test_modules();\n  test_integer_functions();\n  // test_string_io();\n  test_entrypoint();\n  test_global_rules();\n\n  #if defined(HASH_MODULE)\n  test_hash_module();\n  #endif\n\n  test_file_descriptor();\n\n  yr_finalize();\n\n  return 0;\n}\n"], "fixing_code": ["#line 2 \"re_lexer.c\"\n\n#line 4 \"re_lexer.c\"\n\n#define  YY_INT_ALIGNED short int\n\n/* A lexical scanner generated by flex */\n\n#define FLEX_SCANNER\n#define YY_FLEX_MAJOR_VERSION 2\n#define YY_FLEX_MINOR_VERSION 6\n#define YY_FLEX_SUBMINOR_VERSION 0\n#if YY_FLEX_SUBMINOR_VERSION > 0\n#define FLEX_BETA\n#endif\n\n/* First, we deal with  platform-specific or compiler-specific issues. */\n\n/* begin standard C headers. */\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdlib.h>\n\n/* end standard C headers. */\n\n/* flex integer type definitions */\n\n#ifndef FLEXINT_H\n#define FLEXINT_H\n\n/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */\n\n#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n\n/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,\n * if you want the limit (max/min) macros for int types. \n */\n#ifndef __STDC_LIMIT_MACROS\n#define __STDC_LIMIT_MACROS 1\n#endif\n\n#include <inttypes.h>\ntypedef int8_t flex_int8_t;\ntypedef uint8_t flex_uint8_t;\ntypedef int16_t flex_int16_t;\ntypedef uint16_t flex_uint16_t;\ntypedef int32_t flex_int32_t;\ntypedef uint32_t flex_uint32_t;\n#else\ntypedef signed char flex_int8_t;\ntypedef short int flex_int16_t;\ntypedef int flex_int32_t;\ntypedef unsigned char flex_uint8_t; \ntypedef unsigned short int flex_uint16_t;\ntypedef unsigned int flex_uint32_t;\n\n/* Limits of integral types. */\n#ifndef INT8_MIN\n#define INT8_MIN               (-128)\n#endif\n#ifndef INT16_MIN\n#define INT16_MIN              (-32767-1)\n#endif\n#ifndef INT32_MIN\n#define INT32_MIN              (-2147483647-1)\n#endif\n#ifndef INT8_MAX\n#define INT8_MAX               (127)\n#endif\n#ifndef INT16_MAX\n#define INT16_MAX              (32767)\n#endif\n#ifndef INT32_MAX\n#define INT32_MAX              (2147483647)\n#endif\n#ifndef UINT8_MAX\n#define UINT8_MAX              (255U)\n#endif\n#ifndef UINT16_MAX\n#define UINT16_MAX             (65535U)\n#endif\n#ifndef UINT32_MAX\n#define UINT32_MAX             (4294967295U)\n#endif\n\n#endif /* ! C99 */\n\n#endif /* ! FLEXINT_H */\n\n#ifdef __cplusplus\n\n/* The \"const\" storage-class-modifier is valid. */\n#define YY_USE_CONST\n\n#else\t/* ! __cplusplus */\n\n/* C99 requires __STDC__ to be defined as 1. */\n#if defined (__STDC__)\n\n#define YY_USE_CONST\n\n#endif\t/* defined (__STDC__) */\n#endif\t/* ! __cplusplus */\n\n#ifdef YY_USE_CONST\n#define yyconst const\n#else\n#define yyconst\n#endif\n\n/* Returned upon end-of-file. */\n#define YY_NULL 0\n\n/* Promotes a possibly negative, possibly signed char to an unsigned\n * integer for use as an array index.  If the signed char is negative,\n * we want to instead treat it as an 8-bit unsigned char, hence the\n * double cast.\n */\n#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)\n\n/* An opaque pointer. */\n#ifndef YY_TYPEDEF_YY_SCANNER_T\n#define YY_TYPEDEF_YY_SCANNER_T\ntypedef void* yyscan_t;\n#endif\n\n/* For convenience, these vars (plus the bison vars far below)\n   are macros in the reentrant scanner. */\n#define yyin yyg->yyin_r\n#define yyout yyg->yyout_r\n#define yyextra yyg->yyextra_r\n#define yyleng yyg->yyleng_r\n#define yytext yyg->yytext_r\n#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)\n#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)\n#define yy_flex_debug yyg->yy_flex_debug_r\n\n/* Enter a start condition.  This macro really ought to take a parameter,\n * but we do it the disgusting crufty way forced on us by the ()-less\n * definition of BEGIN.\n */\n#define BEGIN yyg->yy_start = 1 + 2 *\n\n/* Translate the current start state into a value that can be later handed\n * to BEGIN to return to the state.  The YYSTATE alias is for lex\n * compatibility.\n */\n#define YY_START ((yyg->yy_start - 1) / 2)\n#define YYSTATE YY_START\n\n/* Action number for EOF rule of a given start state. */\n#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)\n\n/* Special action meaning \"start processing a new file\". */\n#define YY_NEW_FILE re_yyrestart(yyin ,yyscanner )\n\n#define YY_END_OF_BUFFER_CHAR 0\n\n/* Size of default input buffer. */\n#ifndef YY_BUF_SIZE\n#ifdef __ia64__\n/* On IA-64, the buffer size is 16k, not 8k.\n * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.\n * Ditto for the __ia64__ case accordingly.\n */\n#define YY_BUF_SIZE 32768\n#else\n#define YY_BUF_SIZE 16384\n#endif /* __ia64__ */\n#endif\n\n/* The state buf must be large enough to hold one state per character in the main buffer.\n */\n#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))\n\n#ifndef YY_TYPEDEF_YY_BUFFER_STATE\n#define YY_TYPEDEF_YY_BUFFER_STATE\ntypedef struct yy_buffer_state *YY_BUFFER_STATE;\n#endif\n\n#ifndef YY_TYPEDEF_YY_SIZE_T\n#define YY_TYPEDEF_YY_SIZE_T\ntypedef size_t yy_size_t;\n#endif\n\n#define EOB_ACT_CONTINUE_SCAN 0\n#define EOB_ACT_END_OF_FILE 1\n#define EOB_ACT_LAST_MATCH 2\n\n    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires\n     *       access to the local variable yy_act. Since yyless() is a macro, it would break\n     *       existing scanners that call yyless() from OUTSIDE re_yylex.\n     *       One obvious solution it to make yy_act a global. I tried that, and saw\n     *       a 5% performance hit in a non-yylineno scanner, because yy_act is\n     *       normally declared as a register variable-- so it is not worth it.\n     */\n    #define  YY_LESS_LINENO(n) \\\n            do { \\\n                int yyl;\\\n                for ( yyl = n; yyl < yyleng; ++yyl )\\\n                    if ( yytext[yyl] == '\\n' )\\\n                        --yylineno;\\\n            }while(0)\n    #define YY_LINENO_REWIND_TO(dst) \\\n            do {\\\n                const char *p;\\\n                for ( p = yy_cp-1; p >= (dst); --p)\\\n                    if ( *p == '\\n' )\\\n                        --yylineno;\\\n            }while(0)\n    \n/* Return all but the first \"n\" matched characters back to the input stream. */\n#define yyless(n) \\\n\tdo \\\n\t\t{ \\\n\t\t/* Undo effects of setting up yytext. */ \\\n        int yyless_macro_arg = (n); \\\n        YY_LESS_LINENO(yyless_macro_arg);\\\n\t\t*yy_cp = yyg->yy_hold_char; \\\n\t\tYY_RESTORE_YY_MORE_OFFSET \\\n\t\tyyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \\\n\t\tYY_DO_BEFORE_ACTION; /* set up yytext again */ \\\n\t\t} \\\n\twhile ( 0 )\n\n#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )\n\n#ifndef YY_STRUCT_YY_BUFFER_STATE\n#define YY_STRUCT_YY_BUFFER_STATE\nstruct yy_buffer_state\n\t{\n\tFILE *yy_input_file;\n\n\tchar *yy_ch_buf;\t\t/* input buffer */\n\tchar *yy_buf_pos;\t\t/* current position in input buffer */\n\n\t/* Size of input buffer in bytes, not including room for EOB\n\t * characters.\n\t */\n\tyy_size_t yy_buf_size;\n\n\t/* Number of characters read into yy_ch_buf, not including EOB\n\t * characters.\n\t */\n\tyy_size_t yy_n_chars;\n\n\t/* Whether we \"own\" the buffer - i.e., we know we created it,\n\t * and can realloc() it to grow it, and should free() it to\n\t * delete it.\n\t */\n\tint yy_is_our_buffer;\n\n\t/* Whether this is an \"interactive\" input source; if so, and\n\t * if we're using stdio for input, then we want to use getc()\n\t * instead of fread(), to make sure we stop fetching input after\n\t * each newline.\n\t */\n\tint yy_is_interactive;\n\n\t/* Whether we're considered to be at the beginning of a line.\n\t * If so, '^' rules will be active on the next match, otherwise\n\t * not.\n\t */\n\tint yy_at_bol;\n\n    int yy_bs_lineno; /**< The line count. */\n    int yy_bs_column; /**< The column count. */\n\n\t/* Whether to try to fill the input buffer when we reach the\n\t * end of it.\n\t */\n\tint yy_fill_buffer;\n\n\tint yy_buffer_status;\n\n#define YY_BUFFER_NEW 0\n#define YY_BUFFER_NORMAL 1\n\t/* When an EOF's been seen but there's still some text to process\n\t * then we mark the buffer as YY_EOF_PENDING, to indicate that we\n\t * shouldn't try reading from the input source any more.  We might\n\t * still have a bunch of tokens to match, though, because of\n\t * possible backing-up.\n\t *\n\t * When we actually see the EOF, we change the status to \"new\"\n\t * (via re_yyrestart()), so that the user can continue scanning by\n\t * just pointing yyin at a new input file.\n\t */\n#define YY_BUFFER_EOF_PENDING 2\n\n\t};\n#endif /* !YY_STRUCT_YY_BUFFER_STATE */\n\n/* We provide macros for accessing buffer states in case in the\n * future we want to put the buffer states in a more general\n * \"scanner state\".\n *\n * Returns the top of the stack, or NULL.\n */\n#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \\\n                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \\\n                          : NULL)\n\n/* Same as previous macro, but useful when we know that the buffer stack is not\n * NULL or when we need an lvalue. For internal use only.\n */\n#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]\n\nvoid re_yyrestart (FILE *input_file ,yyscan_t yyscanner );\nvoid re_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );\nvoid re_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );\nvoid re_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );\nvoid re_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );\nvoid re_yypop_buffer_state (yyscan_t yyscanner );\n\nstatic void re_yyensure_buffer_stack (yyscan_t yyscanner );\nstatic void re_yy_load_buffer_state (yyscan_t yyscanner );\nstatic void re_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );\n\n#define YY_FLUSH_BUFFER re_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)\n\nYY_BUFFER_STATE re_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );\nYY_BUFFER_STATE re_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );\n\nvoid *re_yyalloc (yy_size_t ,yyscan_t yyscanner );\nvoid *re_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );\nvoid re_yyfree (void * ,yyscan_t yyscanner );\n\n#define yy_new_buffer re_yy_create_buffer\n\n#define yy_set_interactive(is_interactive) \\\n\t{ \\\n\tif ( ! YY_CURRENT_BUFFER ){ \\\n        re_yyensure_buffer_stack (yyscanner); \\\n\t\tYY_CURRENT_BUFFER_LVALUE =    \\\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\\n\t} \\\n\tYY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \\\n\t}\n\n#define yy_set_bol(at_bol) \\\n\t{ \\\n\tif ( ! YY_CURRENT_BUFFER ){\\\n        re_yyensure_buffer_stack (yyscanner); \\\n\t\tYY_CURRENT_BUFFER_LVALUE =    \\\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \\\n\t} \\\n\tYY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \\\n\t}\n\n#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)\n\n/* Begin user sect3 */\n\n#define re_yywrap(yyscanner) (/*CONSTCOND*/1)\n#define YY_SKIP_YYWRAP\n\ntypedef unsigned char YY_CHAR;\n\ntypedef int yy_state_type;\n\n#define yytext_ptr yytext_r\n\nstatic yy_state_type yy_get_previous_state (yyscan_t yyscanner );\nstatic yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);\nstatic int yy_get_next_buffer (yyscan_t yyscanner );\n#if defined(__GNUC__) && __GNUC__ >= 3\n__attribute__((__noreturn__))\n#endif\nstatic void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );\n\n/* Done after the current pattern has been matched and before the\n * corresponding action - sets up yytext.\n */\n#define YY_DO_BEFORE_ACTION \\\n\tyyg->yytext_ptr = yy_bp; \\\n\tyyleng = (size_t) (yy_cp - yy_bp); \\\n\tyyg->yy_hold_char = *yy_cp; \\\n\t*yy_cp = '\\0'; \\\n\tyyg->yy_c_buf_p = yy_cp;\n\n#define YY_NUM_RULES 29\n#define YY_END_OF_BUFFER 30\n/* This struct is not used in this scanner,\n   but its presence is necessary. */\nstruct yy_trans_info\n\t{\n\tflex_int32_t yy_verify;\n\tflex_int32_t yy_nxt;\n\t};\nstatic yyconst flex_int16_t yy_accept[45] =\n    {   0,\n        0,    0,    0,    0,   30,    7,    7,   28,    6,   17,\n        7,   27,   29,   26,   18,    5,    3,   16,   15,   13,\n       11,    9,   14,   12,   10,    8,    0,    0,    0,    0,\n       25,   23,   21,   24,   22,   20,    0,    4,    0,    1,\n        2,   19,    0,    0\n    } ;\n\nstatic yyconst YY_CHAR yy_ec[256] =\n    {   0,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    3,    1,    1,    1,    3,\n        3,    3,    3,    4,    5,    3,    1,    6,    6,    6,\n        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,\n        1,    1,    3,    1,    7,    8,    7,    9,    7,    7,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,   10,    1,    1,    1,   11,    1,    1,    1,\n       12,   13,   14,   15,    1,    1,    7,   16,    7,   17,\n\n        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,   18,    1,    1,    1,   19,   20,\n        1,    1,   21,    3,   22,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\n        1,    1,    1,    1,    1\n    } ;\n\nstatic yyconst YY_CHAR yy_meta[23] =\n    {   0,\n        1,    2,    1,    1,    3,    4,    4,    4,    4,    1,\n        1,    1,    1,    5,    1,    4,    4,    1,    1,    1,\n        1,    1\n    } ;\n\nstatic yyconst flex_uint16_t yy_base[51] =\n    {   0,\n        0,   20,    3,    5,   50,   89,   89,   89,   10,   36,\n        0,   44,   43,   47,   38,   89,   26,   33,   89,   89,\n       89,   89,   89,   89,   89,   89,    4,    5,    0,   33,\n       32,   31,   29,   26,   24,   23,   15,   89,    8,   89,\n       89,   89,    0,   89,   67,   72,   77,   82,   84,    4\n    } ;\n\nstatic yyconst flex_int16_t yy_def[51] =\n    {   0,\n       45,   45,   46,   46,   44,   44,   44,   44,   44,   44,\n       44,   44,   44,   47,   44,   44,   44,   44,   44,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   48,   44,\n       44,   44,   44,   44,   44,   44,   49,   44,   44,   44,\n       44,   44,   50,    0,   44,   44,   44,   44,   44,   44\n    } ;\n\nstatic yyconst flex_uint16_t yy_nxt[112] =\n    {   0,\n       44,    7,    8,   27,   13,   28,   13,   30,   27,   39,\n       28,    9,   10,   39,    8,   14,   15,   14,   15,   29,\n       11,    7,    8,   16,   17,   40,   41,   29,   29,   40,\n       29,    9,   10,   29,    8,   29,   29,   29,   18,   38,\n       11,   18,   29,   19,   20,   21,   22,   29,   29,   44,\n       44,   23,   24,   25,   26,   31,   32,   33,   44,   44,\n       44,   44,   44,   34,   35,   36,   37,    6,    6,    6,\n        6,    6,   12,   12,   12,   12,   12,   30,   44,   30,\n       30,   30,   42,   42,   42,   42,   43,   43,    5,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n       44\n    } ;\n\nstatic yyconst flex_int16_t yy_chk[112] =\n    {   0,\n        0,    1,    1,   11,    3,   11,    4,   50,   28,   27,\n       28,    1,    1,   39,    1,    3,    3,    4,    4,   37,\n        1,    2,    2,    9,    9,   27,   28,   36,   35,   39,\n       34,    2,    2,   33,    2,   32,   31,   30,   18,   17,\n        2,   10,   15,   10,   10,   10,   10,   13,   12,    5,\n        0,   10,   10,   10,   10,   14,   14,   14,    0,    0,\n        0,    0,    0,   14,   14,   14,   14,   45,   45,   45,\n       45,   45,   46,   46,   46,   46,   46,   47,    0,   47,\n       47,   47,   48,   48,   48,   48,   49,   49,   44,   44,\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n\n       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,\n       44\n    } ;\n\n/* Table of booleans, true if rule could match eol. */\nstatic yyconst flex_int32_t yy_rule_can_match_eol[30] =\n    {   0,\n0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };\n\n/* The intent behind this definition is that it'll catch\n * any uses of REJECT which flex missed.\n */\n#define REJECT reject_used_but_not_detected\n#define yymore() yymore_used_but_not_detected\n#define YY_MORE_ADJ 0\n#define YY_RESTORE_YY_MORE_OFFSET\n#line 1 \"re_lexer.l\"\n/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/* Lexical analyzer for regular expressions */\n#line 33 \"re_lexer.l\"\n\n/* Disable warnings for unused functions in this file.\n\nAs we redefine YY_FATAL_ERROR macro to use our own function re_yyfatal, the\nyy_fatal_error function generated by Flex is not actually used, causing a\ncompiler warning. Flex doesn't offer any options to remove the yy_fatal_error\nfunction. When they include something like %option noyy_fatal_error as they do\nwith noyywrap then we can remove this pragma.\n*/\n\n#ifdef __GNUC__\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n#include <assert.h>\n#include <setjmp.h>\n\n\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n#include <yara/threading.h>\n#include <yara/strutils.h>\n\n\n#ifdef _WIN32\n#define snprintf _snprintf\n#endif\n\nstatic uint8_t word_chars[] = {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,\n    0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n\nuint8_t escaped_char_value(\n    char* text);\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char);\n\n#define YY_NO_UNISTD_H 1\n\n#line 586 \"re_lexer.c\"\n\n#define INITIAL 0\n#define char_class 1\n\n#ifndef YY_NO_UNISTD_H\n/* Special case for \"unistd.h\", since it is non-ANSI. We include it way\n * down here because we want the user's section 1 to have been scanned first.\n * The user has a chance to override it with an option.\n */\n#include <unistd.h>\n#endif\n\n#ifndef YY_EXTRA_TYPE\n#define YY_EXTRA_TYPE void *\n#endif\n\n/* Holds the entire state of the reentrant scanner. */\nstruct yyguts_t\n    {\n\n    /* User-defined. Not touched by flex. */\n    YY_EXTRA_TYPE yyextra_r;\n\n    /* The rest are the same as the globals declared in the non-reentrant scanner. */\n    FILE *yyin_r, *yyout_r;\n    size_t yy_buffer_stack_top; /**< index of top of stack. */\n    size_t yy_buffer_stack_max; /**< capacity of stack. */\n    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */\n    char yy_hold_char;\n    yy_size_t yy_n_chars;\n    yy_size_t yyleng_r;\n    char *yy_c_buf_p;\n    int yy_init;\n    int yy_start;\n    int yy_did_buffer_switch_on_eof;\n    int yy_start_stack_ptr;\n    int yy_start_stack_depth;\n    int *yy_start_stack;\n    yy_state_type yy_last_accepting_state;\n    char* yy_last_accepting_cpos;\n\n    int yylineno_r;\n    int yy_flex_debug_r;\n\n    char *yytext_r;\n    int yy_more_flag;\n    int yy_more_len;\n\n    YYSTYPE * yylval_r;\n\n    }; /* end struct yyguts_t */\n\nstatic int yy_init_globals (yyscan_t yyscanner );\n\n    /* This must go here because YYSTYPE and YYLTYPE are included\n     * from bison output in section 1.*/\n    #    define yylval yyg->yylval_r\n    \nint re_yylex_init (yyscan_t* scanner);\n\nint re_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);\n\n/* Accessor methods to globals.\n   These are made visible to non-reentrant scanners for convenience. */\n\nint re_yylex_destroy (yyscan_t yyscanner );\n\nint re_yyget_debug (yyscan_t yyscanner );\n\nvoid re_yyset_debug (int debug_flag ,yyscan_t yyscanner );\n\nYY_EXTRA_TYPE re_yyget_extra (yyscan_t yyscanner );\n\nvoid re_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );\n\nFILE *re_yyget_in (yyscan_t yyscanner );\n\nvoid re_yyset_in  (FILE * _in_str ,yyscan_t yyscanner );\n\nFILE *re_yyget_out (yyscan_t yyscanner );\n\nvoid re_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );\n\nyy_size_t re_yyget_leng (yyscan_t yyscanner );\n\nchar *re_yyget_text (yyscan_t yyscanner );\n\nint re_yyget_lineno (yyscan_t yyscanner );\n\nvoid re_yyset_lineno (int _line_number ,yyscan_t yyscanner );\n\nint re_yyget_column  (yyscan_t yyscanner );\n\nvoid re_yyset_column (int _column_no ,yyscan_t yyscanner );\n\nYYSTYPE * re_yyget_lval (yyscan_t yyscanner );\n\nvoid re_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );\n\n/* Macros after this point can all be overridden by user definitions in\n * section 1.\n */\n\n#ifndef YY_SKIP_YYWRAP\n#ifdef __cplusplus\nextern \"C\" int re_yywrap (yyscan_t yyscanner );\n#else\nextern int re_yywrap (yyscan_t yyscanner );\n#endif\n#endif\n\n#ifndef YY_NO_UNPUT\n    \n#endif\n\n#ifndef yytext_ptr\nstatic void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);\n#endif\n\n#ifdef YY_NEED_STRLEN\nstatic int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);\n#endif\n\n#ifndef YY_NO_INPUT\n\n#ifdef __cplusplus\nstatic int yyinput (yyscan_t yyscanner );\n#else\nstatic int input (yyscan_t yyscanner );\n#endif\n\n#endif\n\n/* Amount of stuff to slurp up with each read. */\n#ifndef YY_READ_BUF_SIZE\n#ifdef __ia64__\n/* On IA-64, the buffer size is 16k, not 8k */\n#define YY_READ_BUF_SIZE 16384\n#else\n#define YY_READ_BUF_SIZE 8192\n#endif /* __ia64__ */\n#endif\n\n/* Copy whatever the last rule matched to the standard output. */\n#ifndef ECHO\n/* This used to be an fputs(), but since the string might contain NUL's,\n * we now use fwrite().\n */\n#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)\n#endif\n\n/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,\n * is returned in \"result\".\n */\n#ifndef YY_INPUT\n#define YY_INPUT(buf,result,max_size) \\\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \\\n\t\t{ \\\n\t\tint c = '*'; \\\n\t\tsize_t n; \\\n\t\tfor ( n = 0; n < max_size && \\\n\t\t\t     (c = getc( yyin )) != EOF && c != '\\n'; ++n ) \\\n\t\t\tbuf[n] = (char) c; \\\n\t\tif ( c == '\\n' ) \\\n\t\t\tbuf[n++] = (char) c; \\\n\t\tif ( c == EOF && ferror( yyin ) ) \\\n\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\\n\t\tresult = n; \\\n\t\t} \\\n\telse \\\n\t\t{ \\\n\t\terrno=0; \\\n\t\twhile ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \\\n\t\t\t{ \\\n\t\t\tif( errno != EINTR) \\\n\t\t\t\t{ \\\n\t\t\t\tYY_FATAL_ERROR( \"input in flex scanner failed\" ); \\\n\t\t\t\tbreak; \\\n\t\t\t\t} \\\n\t\t\terrno=0; \\\n\t\t\tclearerr(yyin); \\\n\t\t\t} \\\n\t\t}\\\n\\\n\n#endif\n\n/* No semi-colon after return; correct usage is to write \"yyterminate();\" -\n * we don't want an extra ';' after the \"return\" because that will cause\n * some compilers to complain about unreachable statements.\n */\n#ifndef yyterminate\n#define yyterminate() return YY_NULL\n#endif\n\n/* Number of entries by which start-condition stack grows. */\n#ifndef YY_START_STACK_INCR\n#define YY_START_STACK_INCR 25\n#endif\n\n/* Report a fatal error. */\n#ifndef YY_FATAL_ERROR\n#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)\n#endif\n\n/* end tables serialization structures and prototypes */\n\n/* Default declaration of generated scanner - a define so the user can\n * easily add parameters.\n */\n#ifndef YY_DECL\n#define YY_DECL_IS_OURS 1\n\nextern int re_yylex \\\n               (YYSTYPE * yylval_param ,yyscan_t yyscanner);\n\n#define YY_DECL int re_yylex \\\n               (YYSTYPE * yylval_param , yyscan_t yyscanner)\n#endif /* !YY_DECL */\n\n/* Code executed at the beginning of each rule, after yytext and yyleng\n * have been set up.\n */\n#ifndef YY_USER_ACTION\n#define YY_USER_ACTION\n#endif\n\n/* Code executed at the end of each rule. */\n#ifndef YY_BREAK\n#define YY_BREAK /*LINTED*/break;\n#endif\n\n#define YY_RULE_SETUP \\\n\tYY_USER_ACTION\n\n/** The main scanner function which does all the work.\n */\nYY_DECL\n{\n\tyy_state_type yy_current_state;\n\tchar *yy_cp, *yy_bp;\n\tint yy_act;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n    yylval = yylval_param;\n\n\tif ( !yyg->yy_init )\n\t\t{\n\t\tyyg->yy_init = 1;\n\n#ifdef YY_USER_INIT\n\t\tYY_USER_INIT;\n#endif\n\n\t\tif ( ! yyg->yy_start )\n\t\t\tyyg->yy_start = 1;\t/* first start state */\n\n\t\tif ( ! yyin )\n\t\t\tyyin = stdin;\n\n\t\tif ( ! yyout )\n\t\t\tyyout = stdout;\n\n\t\tif ( ! YY_CURRENT_BUFFER ) {\n\t\t\tre_yyensure_buffer_stack (yyscanner);\n\t\t\tYY_CURRENT_BUFFER_LVALUE =\n\t\t\t\tre_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);\n\t\t}\n\n\t\tre_yy_load_buffer_state(yyscanner );\n\t\t}\n\n\t{\n#line 99 \"re_lexer.l\"\n\n\n#line 863 \"re_lexer.c\"\n\n\twhile ( /*CONSTCOND*/1 )\t\t/* loops until end-of-file is reached */\n\t\t{\n\t\tyy_cp = yyg->yy_c_buf_p;\n\n\t\t/* Support of yytext. */\n\t\t*yy_cp = yyg->yy_hold_char;\n\n\t\t/* yy_bp points to the position in yy_ch_buf of the start of\n\t\t * the current run.\n\t\t */\n\t\tyy_bp = yy_cp;\n\n\t\tyy_current_state = yyg->yy_start;\nyy_match:\n\t\tdo\n\t\t\t{\n\t\t\tYY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;\n\t\t\tif ( yy_accept[yy_current_state] )\n\t\t\t\t{\n\t\t\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\t\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t\t\t}\n\t\t\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t\t\t{\n\t\t\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\t\t\tif ( yy_current_state >= 45 )\n\t\t\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t\t\t}\n\t\t\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\t\t\t++yy_cp;\n\t\t\t}\n\t\twhile ( yy_current_state != 44 );\n\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\tyy_current_state = yyg->yy_last_accepting_state;\n\nyy_find_action:\n\t\tyy_act = yy_accept[yy_current_state];\n\n\t\tYY_DO_BEFORE_ACTION;\n\n\t\tif ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )\n\t\t\t{\n\t\t\tyy_size_t yyl;\n\t\t\tfor ( yyl = 0; yyl < yyleng; ++yyl )\n\t\t\t\tif ( yytext[yyl] == '\\n' )\n\t\t\t\t\t\n    do{ yylineno++;\n        yycolumn=0;\n    }while(0)\n;\n\t\t\t}\n\ndo_action:\t/* This label is used only to access EOF actions. */\n\n\t\tswitch ( yy_act )\n\t{ /* beginning of action switch */\n\t\t\tcase 0: /* must back up */\n\t\t\t/* undo the effects of YY_DO_BEFORE_ACTION */\n\t\t\t*yy_cp = yyg->yy_hold_char;\n\t\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\t\tyy_current_state = yyg->yy_last_accepting_state;\n\t\t\tgoto yy_find_action;\n\ncase 1:\nYY_RULE_SETUP\n#line 101 \"re_lexer.l\"\n{\n\n  // Examples: {3,8} {0,5} {,5} {7,}\n\n  int hi_bound;\n  int lo_bound = atoi(yytext + 1);\n\n  char* comma = strchr(yytext, ',');\n\n  if (comma - yytext == strlen(yytext) - 2)\n    // if comma is followed by the closing curly bracket\n    // (example: {2,}) set high bound value to maximum.\n    hi_bound = INT16_MAX;\n  else\n    hi_bound = atoi(comma + 1);\n\n  if (hi_bound > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  if (hi_bound < lo_bound || hi_bound < 0 || lo_bound < 0)\n  {\n    yyerror(yyscanner, lex_env, \"bad repeat interval\");\n    yyterminate();\n  }\n\n  yylval->range = (hi_bound << 16) | lo_bound;\n\n  return _RANGE_;\n}\n\tYY_BREAK\ncase 2:\nYY_RULE_SETUP\n#line 135 \"re_lexer.l\"\n{\n\n  // Example: {10}\n\n  int value = atoi(yytext + 1);\n\n  if (value > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  yylval->range = (value << 16) | value;\n\n  return _RANGE_;\n}\n\tYY_BREAK\ncase 3:\nYY_RULE_SETUP\n#line 153 \"re_lexer.l\"\n{\n\n  // Start of a negated character class. Example: [^abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n}\n\tYY_BREAK\ncase 4:\nYY_RULE_SETUP\n#line 162 \"re_lexer.l\"\n{\n\n  // Start of character negated class containing a ].\n  // Example: [^]abc] this must be interpreted as a class\n  // not matching ], a, b, nor c\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\tYY_BREAK\ncase 5:\nYY_RULE_SETUP\n#line 175 \"re_lexer.l\"\n{\n\n  // Start of character class containing a ].\n  // Example: []abc] this must be interpreted as a class\n  // matching ], a, b, or c.\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\tYY_BREAK\ncase 6:\nYY_RULE_SETUP\n#line 188 \"re_lexer.l\"\n{\n\n  // Start of character class. Example: [abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n}\n\tYY_BREAK\ncase 7:\n/* rule 7 can match eol */\nYY_RULE_SETUP\n#line 198 \"re_lexer.l\"\n{\n\n  // Any non-special character is passed as a CHAR token to the scanner.\n\n  yylval->integer = yytext[0];\n  return _CHAR_;\n}\n\tYY_BREAK\ncase 8:\nYY_RULE_SETUP\n#line 207 \"re_lexer.l\"\n{\n  return _WORD_CHAR_;\n}\n\tYY_BREAK\ncase 9:\nYY_RULE_SETUP\n#line 212 \"re_lexer.l\"\n{\n  return _NON_WORD_CHAR_;\n}\n\tYY_BREAK\ncase 10:\nYY_RULE_SETUP\n#line 217 \"re_lexer.l\"\n{\n  return _SPACE_;\n}\n\tYY_BREAK\ncase 11:\nYY_RULE_SETUP\n#line 222 \"re_lexer.l\"\n{\n  return _NON_SPACE_;\n}\n\tYY_BREAK\ncase 12:\nYY_RULE_SETUP\n#line 227 \"re_lexer.l\"\n{\n  return _DIGIT_;\n}\n\tYY_BREAK\ncase 13:\nYY_RULE_SETUP\n#line 232 \"re_lexer.l\"\n{\n  return _NON_DIGIT_;\n}\n\tYY_BREAK\ncase 14:\nYY_RULE_SETUP\n#line 237 \"re_lexer.l\"\n{\n  return _WORD_BOUNDARY_;\n}\n\tYY_BREAK\ncase 15:\nYY_RULE_SETUP\n#line 241 \"re_lexer.l\"\n{\n  return _NON_WORD_BOUNDARY_;\n}\n\tYY_BREAK\ncase 16:\nYY_RULE_SETUP\n#line 246 \"re_lexer.l\"\n{\n\n  yyerror(yyscanner, lex_env, \"backreferences are not allowed\");\n  yyterminate();\n}\n\tYY_BREAK\ncase 17:\nYY_RULE_SETUP\n#line 253 \"re_lexer.l\"\n{\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    yylval->integer = c;\n    return _CHAR_;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase 18:\nYY_RULE_SETUP\n#line 270 \"re_lexer.l\"\n{\n\n  // End of character class.\n\n  int i;\n\n  yylval->class_vector = (uint8_t*) yr_malloc(32);\n  memcpy(yylval->class_vector, LEX_ENV->class_vector, 32);\n\n  if (LEX_ENV->negated_class)\n  {\n    for(i = 0; i < 32; i++)\n      yylval->class_vector[i] = ~yylval->class_vector[i];\n  }\n\n  BEGIN(INITIAL);\n  return _CLASS_;\n}\n\tYY_BREAK\ncase 19:\n/* rule 19 can match eol */\nYY_RULE_SETUP\n#line 291 \"re_lexer.l\"\n{\n\n  // A range inside a character class.\n  //  [abc0-9]\n  //      ^- matching here\n\n  uint16_t c;\n  uint8_t start = yytext[0];\n  uint8_t end = yytext[2];\n\n  if (start == '\\\\')\n  {\n    start = escaped_char_value(yytext);\n\n    if (yytext[1] == 'x')\n      end = yytext[5];\n    else\n      end = yytext[3];\n  }\n\n  if (end == '\\\\')\n  {\n    if (!read_escaped_char(yyscanner, &end))\n    {\n      yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n      yyterminate();\n    }\n  }\n\n  if (end < start)\n  {\n    yyerror(yyscanner, lex_env, \"bad character range\");\n    yyterminate();\n  }\n\n  for (c = start; c <= end; c++)\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n}\n\tYY_BREAK\ncase 20:\nYY_RULE_SETUP\n#line 333 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= word_chars[i];\n}\n\tYY_BREAK\ncase 21:\nYY_RULE_SETUP\n#line 342 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= ~word_chars[i];\n}\n\tYY_BREAK\ncase 22:\nYY_RULE_SETUP\n#line 351 \"re_lexer.l\"\n{\n\n  LEX_ENV->class_vector[' ' / 8] |= 1 << ' ' % 8;\n  LEX_ENV->class_vector['\\t' / 8] |= 1 << '\\t' % 8;\n}\n\tYY_BREAK\ncase 23:\nYY_RULE_SETUP\n#line 358 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    if (i == ' ' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << ' ' % 8);\n    else if (i == '\\t' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << '\\t' % 8);\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\tYY_BREAK\ncase 24:\nYY_RULE_SETUP\n#line 374 \"re_lexer.l\"\n{\n\n  char c;\n\n  for (c = '0'; c <= '9'; c++)\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n}\n\tYY_BREAK\ncase 25:\nYY_RULE_SETUP\n#line 383 \"re_lexer.l\"\n{\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    // digits 0-7 are in the sixth byte of the vector, let that byte alone\n    if (i == 6)\n      continue;\n\n    // digits 8 and 9 are the lowest two bits in the seventh byte of the\n    // vector, let those bits alone.\n    if (i == 7)\n      LEX_ENV->class_vector[i] |= 0xFC;\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\tYY_BREAK\ncase 26:\nYY_RULE_SETUP\n#line 403 \"re_lexer.l\"\n{\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase 27:\nYY_RULE_SETUP\n#line 419 \"re_lexer.l\"\n{\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    // A character class (i.e: [0-9a-f]) is represented by a 256-bits vector,\n    // here we set to 1 the vector's bit corresponding to the input character.\n\n    LEX_ENV->class_vector[yytext[0] / 8] |= 1 << yytext[0] % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase YY_STATE_EOF(char_class):\n#line 436 \"re_lexer.l\"\n{\n\n  // End of regexp reached while scanning a character class.\n\n  yyerror(yyscanner, lex_env, \"missing terminating ] for character class\");\n  yyterminate();\n}\n\tYY_BREAK\ncase 28:\nYY_RULE_SETUP\n#line 445 \"re_lexer.l\"\n{\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    return yytext[0];\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\tYY_BREAK\ncase YY_STATE_EOF(INITIAL):\n#line 459 \"re_lexer.l\"\n{\n\n  yyterminate();\n}\n\tYY_BREAK\ncase 29:\nYY_RULE_SETUP\n#line 464 \"re_lexer.l\"\nECHO;\n\tYY_BREAK\n#line 1358 \"re_lexer.c\"\n\n\tcase YY_END_OF_BUFFER:\n\t\t{\n\t\t/* Amount of text matched not including the EOB char. */\n\t\tint yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;\n\n\t\t/* Undo the effects of YY_DO_BEFORE_ACTION. */\n\t\t*yy_cp = yyg->yy_hold_char;\n\t\tYY_RESTORE_YY_MORE_OFFSET\n\n\t\tif ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )\n\t\t\t{\n\t\t\t/* We're scanning a new file or input source.  It's\n\t\t\t * possible that this happened because the user\n\t\t\t * just pointed yyin at a new source and called\n\t\t\t * re_yylex().  If so, then we have to assure\n\t\t\t * consistency between YY_CURRENT_BUFFER and our\n\t\t\t * globals.  Here is the right place to do so, because\n\t\t\t * this is the first action (other than possibly a\n\t\t\t * back-up) that will match for the new input source.\n\t\t\t */\n\t\t\tyyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;\n\t\t\t}\n\n\t\t/* Note that here we test for yy_c_buf_p \"<=\" to the position\n\t\t * of the first EOB in the buffer, since yy_c_buf_p will\n\t\t * already have been incremented past the NUL character\n\t\t * (since all states make transitions on EOB to the\n\t\t * end-of-buffer state).  Contrast this with the test\n\t\t * in input().\n\t\t */\n\t\tif ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )\n\t\t\t{ /* This was really a NUL. */\n\t\t\tyy_state_type yy_next_state;\n\n\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;\n\n\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t/* Okay, we're now positioned to make the NUL\n\t\t\t * transition.  We couldn't have\n\t\t\t * yy_get_previous_state() go ahead and do it\n\t\t\t * for us because it doesn't know how to deal\n\t\t\t * with the possibility of jamming (and we don't\n\t\t\t * want to build jamming into it because then it\n\t\t\t * will run more slowly).\n\t\t\t */\n\n\t\t\tyy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);\n\n\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\n\t\t\tif ( yy_next_state )\n\t\t\t\t{\n\t\t\t\t/* Consume the NUL. */\n\t\t\t\tyy_cp = ++yyg->yy_c_buf_p;\n\t\t\t\tyy_current_state = yy_next_state;\n\t\t\t\tgoto yy_match;\n\t\t\t\t}\n\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tyy_cp = yyg->yy_last_accepting_cpos;\n\t\t\t\tyy_current_state = yyg->yy_last_accepting_state;\n\t\t\t\tgoto yy_find_action;\n\t\t\t\t}\n\t\t\t}\n\n\t\telse switch ( yy_get_next_buffer( yyscanner ) )\n\t\t\t{\n\t\t\tcase EOB_ACT_END_OF_FILE:\n\t\t\t\t{\n\t\t\t\tyyg->yy_did_buffer_switch_on_eof = 0;\n\n\t\t\t\tif ( re_yywrap(yyscanner ) )\n\t\t\t\t\t{\n\t\t\t\t\t/* Note: because we've taken care in\n\t\t\t\t\t * yy_get_next_buffer() to have set up\n\t\t\t\t\t * yytext, we can now set up\n\t\t\t\t\t * yy_c_buf_p so that if some total\n\t\t\t\t\t * hoser (like flex itself) wants to\n\t\t\t\t\t * call the scanner after we return the\n\t\t\t\t\t * YY_NULL, it'll still work - another\n\t\t\t\t\t * YY_NULL will get returned.\n\t\t\t\t\t */\n\t\t\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;\n\n\t\t\t\t\tyy_act = YY_STATE_EOF(YY_START);\n\t\t\t\t\tgoto do_action;\n\t\t\t\t\t}\n\n\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tif ( ! yyg->yy_did_buffer_switch_on_eof )\n\t\t\t\t\t\tYY_NEW_FILE;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\tcase EOB_ACT_CONTINUE_SCAN:\n\t\t\t\tyyg->yy_c_buf_p =\n\t\t\t\t\tyyg->yytext_ptr + yy_amount_of_matched_text;\n\n\t\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t\tyy_cp = yyg->yy_c_buf_p;\n\t\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\t\t\t\tgoto yy_match;\n\n\t\t\tcase EOB_ACT_LAST_MATCH:\n\t\t\t\tyyg->yy_c_buf_p =\n\t\t\t\t&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];\n\n\t\t\t\tyy_current_state = yy_get_previous_state( yyscanner );\n\n\t\t\t\tyy_cp = yyg->yy_c_buf_p;\n\t\t\t\tyy_bp = yyg->yytext_ptr + YY_MORE_ADJ;\n\t\t\t\tgoto yy_find_action;\n\t\t\t}\n\t\tbreak;\n\t\t}\n\n\tdefault:\n\t\tYY_FATAL_ERROR(\n\t\t\t\"fatal flex scanner internal error--no action found\" );\n\t} /* end of action switch */\n\t\t} /* end of scanning one token */\n\t} /* end of user's declarations */\n} /* end of re_yylex */\n\n/* yy_get_next_buffer - try to read in a new buffer\n *\n * Returns a code representing an action:\n *\tEOB_ACT_LAST_MATCH -\n *\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position\n *\tEOB_ACT_END_OF_FILE - end of file\n */\nstatic int yy_get_next_buffer (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tchar *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;\n\tchar *source = yyg->yytext_ptr;\n\tyy_size_t number_to_move, i;\n\tint ret_val;\n\n\tif ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )\n\t\tYY_FATAL_ERROR(\n\t\t\"fatal flex scanner internal error--end of buffer missed\" );\n\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )\n\t\t{ /* Don't try to fill the buffer, so this is an EOF. */\n\t\tif ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )\n\t\t\t{\n\t\t\t/* We matched a single character, the EOB, so\n\t\t\t * treat this as a final EOF.\n\t\t\t */\n\t\t\treturn EOB_ACT_END_OF_FILE;\n\t\t\t}\n\n\t\telse\n\t\t\t{\n\t\t\t/* We matched some text prior to the EOB, first\n\t\t\t * process it.\n\t\t\t */\n\t\t\treturn EOB_ACT_LAST_MATCH;\n\t\t\t}\n\t\t}\n\n\t/* Try to read more data. */\n\n\t/* First move last chars to start of buffer. */\n\tnumber_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;\n\n\tfor ( i = 0; i < number_to_move; ++i )\n\t\t*(dest++) = *(source++);\n\n\tif ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )\n\t\t/* don't do the read, it's not guaranteed to return an EOF,\n\t\t * just force an EOF\n\t\t */\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;\n\n\telse\n\t\t{\n\t\t\tyy_size_t num_to_read =\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;\n\n\t\twhile ( num_to_read <= 0 )\n\t\t\t{ /* Not enough room in the buffer - grow it. */\n\n\t\t\t/* just a shorter name for the current buffer */\n\t\t\tYY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;\n\n\t\t\tint yy_c_buf_p_offset =\n\t\t\t\t(int) (yyg->yy_c_buf_p - b->yy_ch_buf);\n\n\t\t\tif ( b->yy_is_our_buffer )\n\t\t\t\t{\n\t\t\t\tyy_size_t new_size = b->yy_buf_size * 2;\n\n\t\t\t\tif ( new_size <= 0 )\n\t\t\t\t\tb->yy_buf_size += b->yy_buf_size / 8;\n\t\t\t\telse\n\t\t\t\t\tb->yy_buf_size *= 2;\n\n\t\t\t\tb->yy_ch_buf = (char *)\n\t\t\t\t\t/* Include room in for 2 EOB chars. */\n\t\t\t\t\tre_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t/* Can't grow it, we don't own it. */\n\t\t\t\tb->yy_ch_buf = 0;\n\n\t\t\tif ( ! b->yy_ch_buf )\n\t\t\t\tYY_FATAL_ERROR(\n\t\t\t\t\"fatal error - scanner input buffer overflow\" );\n\n\t\t\tyyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];\n\n\t\t\tnum_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -\n\t\t\t\t\t\tnumber_to_move - 1;\n\n\t\t\t}\n\n\t\tif ( num_to_read > YY_READ_BUF_SIZE )\n\t\t\tnum_to_read = YY_READ_BUF_SIZE;\n\n\t\t/* Read in more data. */\n\t\tYY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),\n\t\t\tyyg->yy_n_chars, num_to_read );\n\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\tif ( yyg->yy_n_chars == 0 )\n\t\t{\n\t\tif ( number_to_move == YY_MORE_ADJ )\n\t\t\t{\n\t\t\tret_val = EOB_ACT_END_OF_FILE;\n\t\t\tre_yyrestart(yyin  ,yyscanner);\n\t\t\t}\n\n\t\telse\n\t\t\t{\n\t\t\tret_val = EOB_ACT_LAST_MATCH;\n\t\t\tYY_CURRENT_BUFFER_LVALUE->yy_buffer_status =\n\t\t\t\tYY_BUFFER_EOF_PENDING;\n\t\t\t}\n\t\t}\n\n\telse\n\t\tret_val = EOB_ACT_CONTINUE_SCAN;\n\n\tif ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {\n\t\t/* Extend the array by 50%, plus the number we really need. */\n\t\tyy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) re_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );\n\t\tif ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in yy_get_next_buffer()\" );\n\t}\n\n\tyyg->yy_n_chars += number_to_move;\n\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;\n\tYY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;\n\n\tyyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];\n\n\treturn ret_val;\n}\n\n/* yy_get_previous_state - get the state just before the EOB char was reached */\n\n    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)\n{\n\tyy_state_type yy_current_state;\n\tchar *yy_cp;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tyy_current_state = yyg->yy_start;\n\n\tfor ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )\n\t\t{\n\t\tYY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);\n\t\tif ( yy_accept[yy_current_state] )\n\t\t\t{\n\t\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t\t}\n\t\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t\t{\n\t\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\t\tif ( yy_current_state >= 45 )\n\t\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t\t}\n\t\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\t\t}\n\n\treturn yy_current_state;\n}\n\n/* yy_try_NUL_trans - try to make a transition on the NUL character\n *\n * synopsis\n *\tnext_state = yy_try_NUL_trans( current_state );\n */\n    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)\n{\n\tint yy_is_jam;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */\n\tchar *yy_cp = yyg->yy_c_buf_p;\n\n\tYY_CHAR yy_c = 1;\n\tif ( yy_accept[yy_current_state] )\n\t\t{\n\t\tyyg->yy_last_accepting_state = yy_current_state;\n\t\tyyg->yy_last_accepting_cpos = yy_cp;\n\t\t}\n\twhile ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )\n\t\t{\n\t\tyy_current_state = (int) yy_def[yy_current_state];\n\t\tif ( yy_current_state >= 45 )\n\t\t\tyy_c = yy_meta[(unsigned int) yy_c];\n\t\t}\n\tyy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];\n\tyy_is_jam = (yy_current_state == 44);\n\n\t(void)yyg;\n\treturn yy_is_jam ? 0 : yy_current_state;\n}\n\n#ifndef YY_NO_UNPUT\n\n#endif\n\n#ifndef YY_NO_INPUT\n#ifdef __cplusplus\n    static int yyinput (yyscan_t yyscanner)\n#else\n    static int input  (yyscan_t yyscanner)\n#endif\n\n{\n\tint c;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\n\tif ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )\n\t\t{\n\t\t/* yy_c_buf_p now points to the character we want to return.\n\t\t * If this occurs *before* the EOB characters, then it's a\n\t\t * valid NUL; if not, then we've hit the end of the buffer.\n\t\t */\n\t\tif ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )\n\t\t\t/* This was really a NUL. */\n\t\t\t*yyg->yy_c_buf_p = '\\0';\n\n\t\telse\n\t\t\t{ /* need more input */\n\t\t\tyy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;\n\t\t\t++yyg->yy_c_buf_p;\n\n\t\t\tswitch ( yy_get_next_buffer( yyscanner ) )\n\t\t\t\t{\n\t\t\t\tcase EOB_ACT_LAST_MATCH:\n\t\t\t\t\t/* This happens because yy_g_n_b()\n\t\t\t\t\t * sees that we've accumulated a\n\t\t\t\t\t * token and flags that we need to\n\t\t\t\t\t * try matching the token before\n\t\t\t\t\t * proceeding.  But for input(),\n\t\t\t\t\t * there's no matching to consider.\n\t\t\t\t\t * So convert the EOB_ACT_LAST_MATCH\n\t\t\t\t\t * to EOB_ACT_END_OF_FILE.\n\t\t\t\t\t */\n\n\t\t\t\t\t/* Reset buffer status. */\n\t\t\t\t\tre_yyrestart(yyin ,yyscanner);\n\n\t\t\t\t\t/*FALLTHROUGH*/\n\n\t\t\t\tcase EOB_ACT_END_OF_FILE:\n\t\t\t\t\t{\n\t\t\t\t\tif ( re_yywrap(yyscanner ) )\n\t\t\t\t\t\treturn EOF;\n\n\t\t\t\t\tif ( ! yyg->yy_did_buffer_switch_on_eof )\n\t\t\t\t\t\tYY_NEW_FILE;\n#ifdef __cplusplus\n\t\t\t\t\treturn yyinput(yyscanner);\n#else\n\t\t\t\t\treturn input(yyscanner);\n#endif\n\t\t\t\t\t}\n\n\t\t\t\tcase EOB_ACT_CONTINUE_SCAN:\n\t\t\t\t\tyyg->yy_c_buf_p = yyg->yytext_ptr + offset;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tc = *(unsigned char *) yyg->yy_c_buf_p;\t/* cast for 8-bit char's */\n\t*yyg->yy_c_buf_p = '\\0';\t/* preserve yytext */\n\tyyg->yy_hold_char = *++yyg->yy_c_buf_p;\n\n\tif ( c == '\\n' )\n\t\t\n    do{ yylineno++;\n        yycolumn=0;\n    }while(0)\n;\n\n\treturn c;\n}\n#endif\t/* ifndef YY_NO_INPUT */\n\n/** Immediately switch to a different input stream.\n * @param input_file A readable stream.\n * @param yyscanner The scanner object.\n * @note This function does not reset the start condition to @c INITIAL .\n */\n    void re_yyrestart  (FILE * input_file , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif ( ! YY_CURRENT_BUFFER ){\n        re_yyensure_buffer_stack (yyscanner);\n\t\tYY_CURRENT_BUFFER_LVALUE =\n            re_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);\n\t}\n\n\tre_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);\n\tre_yy_load_buffer_state(yyscanner );\n}\n\n/** Switch to a different input buffer.\n * @param new_buffer The new input buffer.\n * @param yyscanner The scanner object.\n */\n    void re_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\t/* TODO. We should be able to replace this entire function body\n\t * with\n\t *\t\tre_yypop_buffer_state();\n\t *\t\tre_yypush_buffer_state(new_buffer);\n     */\n\tre_yyensure_buffer_stack (yyscanner);\n\tif ( YY_CURRENT_BUFFER == new_buffer )\n\t\treturn;\n\n\tif ( YY_CURRENT_BUFFER )\n\t\t{\n\t\t/* Flush out information for old buffer. */\n\t\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\tYY_CURRENT_BUFFER_LVALUE = new_buffer;\n\tre_yy_load_buffer_state(yyscanner );\n\n\t/* We don't actually know whether we did this switch during\n\t * EOF (re_yywrap()) processing, but the only time this flag\n\t * is looked at is after re_yywrap() is called, so it's safe\n\t * to go ahead and always set it.\n\t */\n\tyyg->yy_did_buffer_switch_on_eof = 1;\n}\n\nstatic void re_yy_load_buffer_state  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tyyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;\n\tyyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;\n\tyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;\n\tyyg->yy_hold_char = *yyg->yy_c_buf_p;\n}\n\n/** Allocate and initialize an input buffer state.\n * @param file A readable stream.\n * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\n * @param yyscanner The scanner object.\n * @return the allocated buffer state.\n */\n    YY_BUFFER_STATE re_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n    \n\tb = (YY_BUFFER_STATE) re_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_create_buffer()\" );\n\n\tb->yy_buf_size = (yy_size_t)size;\n\n\t/* yy_ch_buf has to be 2 characters longer than the size given because\n\t * we need to put in 2 end-of-buffer characters.\n\t */\n\tb->yy_ch_buf = (char *) re_yyalloc(b->yy_buf_size + 2 ,yyscanner );\n\tif ( ! b->yy_ch_buf )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_create_buffer()\" );\n\n\tb->yy_is_our_buffer = 1;\n\n\tre_yy_init_buffer(b,file ,yyscanner);\n\n\treturn b;\n}\n\n/** Destroy the buffer.\n * @param b a buffer created with re_yy_create_buffer()\n * @param yyscanner The scanner object.\n */\n    void re_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif ( ! b )\n\t\treturn;\n\n\tif ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */\n\t\tYY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;\n\n\tif ( b->yy_is_our_buffer )\n\t\tre_yyfree((void *) b->yy_ch_buf ,yyscanner );\n\n\tre_yyfree((void *) b ,yyscanner );\n}\n\n/* Initializes or reinitializes a buffer.\n * This function is sometimes called more than once on the same buffer,\n * such as during a re_yyrestart() or at EOF.\n */\n    static void re_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)\n\n{\n\tint oerrno = errno;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tre_yy_flush_buffer(b ,yyscanner);\n\n\tb->yy_input_file = file;\n\tb->yy_fill_buffer = 1;\n\n    /* If b is the current buffer, then re_yy_init_buffer was _probably_\n     * called from re_yyrestart() or through yy_get_next_buffer.\n     * In that case, we don't want to reset the lineno or column.\n     */\n    if (b != YY_CURRENT_BUFFER){\n        b->yy_bs_lineno = 1;\n        b->yy_bs_column = 0;\n    }\n\n        b->yy_is_interactive = 0;\n    \n\terrno = oerrno;\n}\n\n/** Discard all buffered characters. On the next scan, YY_INPUT will be called.\n * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.\n * @param yyscanner The scanner object.\n */\n    void re_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif ( ! b )\n\t\treturn;\n\n\tb->yy_n_chars = 0;\n\n\t/* We always need two end-of-buffer characters.  The first causes\n\t * a transition to the end-of-buffer state.  The second causes\n\t * a jam in that state.\n\t */\n\tb->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;\n\tb->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;\n\n\tb->yy_buf_pos = &b->yy_ch_buf[0];\n\n\tb->yy_at_bol = 1;\n\tb->yy_buffer_status = YY_BUFFER_NEW;\n\n\tif ( b == YY_CURRENT_BUFFER )\n\t\tre_yy_load_buffer_state(yyscanner );\n}\n\n/** Pushes the new state onto the stack. The new state becomes\n *  the current state. This function will allocate the stack\n *  if necessary.\n *  @param new_buffer The new state.\n *  @param yyscanner The scanner object.\n */\nvoid re_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif (new_buffer == NULL)\n\t\treturn;\n\n\tre_yyensure_buffer_stack(yyscanner);\n\n\t/* This block is copied from re_yy_switch_to_buffer. */\n\tif ( YY_CURRENT_BUFFER )\n\t\t{\n\t\t/* Flush out information for old buffer. */\n\t\t*yyg->yy_c_buf_p = yyg->yy_hold_char;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;\n\t\tYY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;\n\t\t}\n\n\t/* Only push if top exists. Otherwise, replace top. */\n\tif (YY_CURRENT_BUFFER)\n\t\tyyg->yy_buffer_stack_top++;\n\tYY_CURRENT_BUFFER_LVALUE = new_buffer;\n\n\t/* copied from re_yy_switch_to_buffer. */\n\tre_yy_load_buffer_state(yyscanner );\n\tyyg->yy_did_buffer_switch_on_eof = 1;\n}\n\n/** Removes and deletes the top of the stack, if present.\n *  The next element becomes the new top.\n *  @param yyscanner The scanner object.\n */\nvoid re_yypop_buffer_state (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\tif (!YY_CURRENT_BUFFER)\n\t\treturn;\n\n\tre_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);\n\tYY_CURRENT_BUFFER_LVALUE = NULL;\n\tif (yyg->yy_buffer_stack_top > 0)\n\t\t--yyg->yy_buffer_stack_top;\n\n\tif (YY_CURRENT_BUFFER) {\n\t\tre_yy_load_buffer_state(yyscanner );\n\t\tyyg->yy_did_buffer_switch_on_eof = 1;\n\t}\n}\n\n/* Allocates the stack if it does not exist.\n *  Guarantees space for at least one push.\n */\nstatic void re_yyensure_buffer_stack (yyscan_t yyscanner)\n{\n\tyy_size_t num_to_alloc;\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n\tif (!yyg->yy_buffer_stack) {\n\n\t\t/* First allocation is just for 2 elements, since we don't know if this\n\t\t * scanner will even need a stack. We use 2 instead of 1 to avoid an\n\t\t * immediate realloc on the next call.\n         */\n\t\tnum_to_alloc = 1; // After all that talk, this was set to 1 anyways...\n\t\tyyg->yy_buffer_stack = (struct yy_buffer_state**)re_yyalloc\n\t\t\t\t\t\t\t\t(num_to_alloc * sizeof(struct yy_buffer_state*)\n\t\t\t\t\t\t\t\t, yyscanner);\n\t\tif ( ! yyg->yy_buffer_stack )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yyensure_buffer_stack()\" );\n\n\t\tmemset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));\n\n\t\tyyg->yy_buffer_stack_max = num_to_alloc;\n\t\tyyg->yy_buffer_stack_top = 0;\n\t\treturn;\n\t}\n\n\tif (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){\n\n\t\t/* Increase the buffer to prepare for a possible push. */\n\t\tyy_size_t grow_size = 8 /* arbitrary grow size */;\n\n\t\tnum_to_alloc = yyg->yy_buffer_stack_max + grow_size;\n\t\tyyg->yy_buffer_stack = (struct yy_buffer_state**)re_yyrealloc\n\t\t\t\t\t\t\t\t(yyg->yy_buffer_stack,\n\t\t\t\t\t\t\t\tnum_to_alloc * sizeof(struct yy_buffer_state*)\n\t\t\t\t\t\t\t\t, yyscanner);\n\t\tif ( ! yyg->yy_buffer_stack )\n\t\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yyensure_buffer_stack()\" );\n\n\t\t/* zero only the new slots.*/\n\t\tmemset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));\n\t\tyyg->yy_buffer_stack_max = num_to_alloc;\n\t}\n}\n\n/** Setup the input buffer state to scan directly from a user-specified character buffer.\n * @param base the character buffer\n * @param size the size in bytes of the character buffer\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */\nYY_BUFFER_STATE re_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n    \n\tif ( size < 2 ||\n\t     base[size-2] != YY_END_OF_BUFFER_CHAR ||\n\t     base[size-1] != YY_END_OF_BUFFER_CHAR )\n\t\t/* They forgot to leave room for the EOB's. */\n\t\treturn 0;\n\n\tb = (YY_BUFFER_STATE) re_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_scan_buffer()\" );\n\n\tb->yy_buf_size = size - 2;\t/* \"- 2\" to take care of EOB's */\n\tb->yy_buf_pos = b->yy_ch_buf = base;\n\tb->yy_is_our_buffer = 0;\n\tb->yy_input_file = 0;\n\tb->yy_n_chars = b->yy_buf_size;\n\tb->yy_is_interactive = 0;\n\tb->yy_at_bol = 1;\n\tb->yy_fill_buffer = 0;\n\tb->yy_buffer_status = YY_BUFFER_NEW;\n\n\tre_yy_switch_to_buffer(b ,yyscanner );\n\n\treturn b;\n}\n\n/** Setup the input buffer state to scan a string. The next call to re_yylex() will\n * scan from a @e copy of @a str.\n * @param yystr a NUL-terminated string to scan\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n * @note If you want to scan bytes that may contain NUL values, then use\n *       re_yy_scan_bytes() instead.\n */\nYY_BUFFER_STATE re_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)\n{\n    \n\treturn re_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);\n}\n\n/** Setup the input buffer state to scan the given bytes. The next call to re_yylex() will\n * scan from a @e copy of @a bytes.\n * @param yybytes the byte buffer to scan\n * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */\nYY_BUFFER_STATE re_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)\n{\n\tYY_BUFFER_STATE b;\n\tchar *buf;\n\tyy_size_t n;\n\tyy_size_t i;\n    \n\t/* Get memory for full buffer, including space for trailing EOB's. */\n\tn = _yybytes_len + 2;\n\tbuf = (char *) re_yyalloc(n ,yyscanner );\n\tif ( ! buf )\n\t\tYY_FATAL_ERROR( \"out of dynamic memory in re_yy_scan_bytes()\" );\n\n\tfor ( i = 0; i < _yybytes_len; ++i )\n\t\tbuf[i] = yybytes[i];\n\n\tbuf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;\n\n\tb = re_yy_scan_buffer(buf,n ,yyscanner);\n\tif ( ! b )\n\t\tYY_FATAL_ERROR( \"bad buffer in re_yy_scan_bytes()\" );\n\n\t/* It's okay to grow etc. this buffer, and we should throw it\n\t * away when we're done.\n\t */\n\tb->yy_is_our_buffer = 1;\n\n\treturn b;\n}\n\n#ifndef YY_EXIT_FAILURE\n#define YY_EXIT_FAILURE 2\n#endif\n\nstatic void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\t(void) fprintf( stderr, \"%s\\n\", msg );\n\texit( YY_EXIT_FAILURE );\n}\n\n/* Redefine yyless() so it works in section 3 code. */\n\n#undef yyless\n#define yyless(n) \\\n\tdo \\\n\t\t{ \\\n\t\t/* Undo effects of setting up yytext. */ \\\n        int yyless_macro_arg = (n); \\\n        YY_LESS_LINENO(yyless_macro_arg);\\\n\t\tyytext[yyleng] = yyg->yy_hold_char; \\\n\t\tyyg->yy_c_buf_p = yytext + yyless_macro_arg; \\\n\t\tyyg->yy_hold_char = *yyg->yy_c_buf_p; \\\n\t\t*yyg->yy_c_buf_p = '\\0'; \\\n\t\tyyleng = yyless_macro_arg; \\\n\t\t} \\\n\twhile ( 0 )\n\n/* Accessor  methods (get/set functions) to struct members. */\n\n/** Get the user-defined data for this scanner.\n * @param yyscanner The scanner object.\n */\nYY_EXTRA_TYPE re_yyget_extra  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyextra;\n}\n\n/** Get the current line number.\n * @param yyscanner The scanner object.\n */\nint re_yyget_lineno  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        if (! YY_CURRENT_BUFFER)\n            return 0;\n    \n    return yylineno;\n}\n\n/** Get the current column number.\n * @param yyscanner The scanner object.\n */\nint re_yyget_column  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        if (! YY_CURRENT_BUFFER)\n            return 0;\n    \n    return yycolumn;\n}\n\n/** Get the input stream.\n * @param yyscanner The scanner object.\n */\nFILE *re_yyget_in  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyin;\n}\n\n/** Get the output stream.\n * @param yyscanner The scanner object.\n */\nFILE *re_yyget_out  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyout;\n}\n\n/** Get the length of the current token.\n * @param yyscanner The scanner object.\n */\nyy_size_t re_yyget_leng  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yyleng;\n}\n\n/** Get the current token.\n * @param yyscanner The scanner object.\n */\n\nchar *re_yyget_text  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yytext;\n}\n\n/** Set the user-defined data. This data is never touched by the scanner.\n * @param user_defined The data to be associated with this scanner.\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyextra = user_defined ;\n}\n\n/** Set the current line number.\n * @param _line_number line number\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_lineno (int  _line_number , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        /* lineno is only valid if an input buffer exists. */\n        if (! YY_CURRENT_BUFFER )\n           YY_FATAL_ERROR( \"re_yyset_lineno called with no buffer\" );\n    \n    yylineno = _line_number;\n}\n\n/** Set the current column.\n * @param _column_no column number\n * @param yyscanner The scanner object.\n */\nvoid re_yyset_column (int  _column_no , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n        /* column is only valid if an input buffer exists. */\n        if (! YY_CURRENT_BUFFER )\n           YY_FATAL_ERROR( \"re_yyset_column called with no buffer\" );\n    \n    yycolumn = _column_no;\n}\n\n/** Set the input stream. This does not discard the current\n * input buffer.\n * @param _in_str A readable stream.\n * @param yyscanner The scanner object.\n * @see re_yy_switch_to_buffer\n */\nvoid re_yyset_in (FILE *  _in_str , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyin = _in_str ;\n}\n\nvoid re_yyset_out (FILE *  _out_str , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yyout = _out_str ;\n}\n\nint re_yyget_debug  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yy_flex_debug;\n}\n\nvoid re_yyset_debug (int  _bdebug , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yy_flex_debug = _bdebug ;\n}\n\n/* Accessor methods for yylval and yylloc */\n\nYYSTYPE * re_yyget_lval  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    return yylval;\n}\n\nvoid re_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    yylval = yylval_param;\n}\n\n/* User-visible API */\n\n/* re_yylex_init is special because it creates the scanner itself, so it is\n * the ONLY reentrant function that doesn't take the scanner as the last argument.\n * That's why we explicitly handle the declaration, instead of using our macros.\n */\n\nint re_yylex_init(yyscan_t* ptr_yy_globals)\n\n{\n    if (ptr_yy_globals == NULL){\n        errno = EINVAL;\n        return 1;\n    }\n\n    *ptr_yy_globals = (yyscan_t) re_yyalloc ( sizeof( struct yyguts_t ), NULL );\n\n    if (*ptr_yy_globals == NULL){\n        errno = ENOMEM;\n        return 1;\n    }\n\n    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */\n    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));\n\n    return yy_init_globals ( *ptr_yy_globals );\n}\n\n/* re_yylex_init_extra has the same functionality as re_yylex_init, but follows the\n * convention of taking the scanner as the last argument. Note however, that\n * this is a *pointer* to a scanner, as it will be allocated by this call (and\n * is the reason, too, why this function also must handle its own declaration).\n * The user defined value in the first argument will be available to re_yyalloc in\n * the yyextra field.\n */\n\nint re_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )\n\n{\n    struct yyguts_t dummy_yyguts;\n\n    re_yyset_extra (yy_user_defined, &dummy_yyguts);\n\n    if (ptr_yy_globals == NULL){\n        errno = EINVAL;\n        return 1;\n    }\n\n    *ptr_yy_globals = (yyscan_t) re_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );\n\n    if (*ptr_yy_globals == NULL){\n        errno = ENOMEM;\n        return 1;\n    }\n\n    /* By setting to 0xAA, we expose bugs in\n    yy_init_globals. Leave at 0x00 for releases. */\n    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));\n\n    re_yyset_extra (yy_user_defined, *ptr_yy_globals);\n\n    return yy_init_globals ( *ptr_yy_globals );\n}\n\nstatic int yy_init_globals (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n    /* Initialization is the same as for the non-reentrant scanner.\n     * This function is called from re_yylex_destroy(), so don't allocate here.\n     */\n\n    yyg->yy_buffer_stack = 0;\n    yyg->yy_buffer_stack_top = 0;\n    yyg->yy_buffer_stack_max = 0;\n    yyg->yy_c_buf_p = (char *) 0;\n    yyg->yy_init = 0;\n    yyg->yy_start = 0;\n\n    yyg->yy_start_stack_ptr = 0;\n    yyg->yy_start_stack_depth = 0;\n    yyg->yy_start_stack =  NULL;\n\n/* Defined in main.c */\n#ifdef YY_STDINIT\n    yyin = stdin;\n    yyout = stdout;\n#else\n    yyin = (FILE *) 0;\n    yyout = (FILE *) 0;\n#endif\n\n    /* For future reference: Set errno on error, since we are called by\n     * re_yylex_init()\n     */\n    return 0;\n}\n\n/* re_yylex_destroy is for both reentrant and non-reentrant scanners. */\nint re_yylex_destroy  (yyscan_t yyscanner)\n{\n    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\n    /* Pop the buffer stack, destroying each element. */\n\twhile(YY_CURRENT_BUFFER){\n\t\tre_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );\n\t\tYY_CURRENT_BUFFER_LVALUE = NULL;\n\t\tre_yypop_buffer_state(yyscanner);\n\t}\n\n\t/* Destroy the stack itself. */\n\tre_yyfree(yyg->yy_buffer_stack ,yyscanner);\n\tyyg->yy_buffer_stack = NULL;\n\n    /* Destroy the start condition stack. */\n        re_yyfree(yyg->yy_start_stack ,yyscanner );\n        yyg->yy_start_stack = NULL;\n\n    /* Reset the globals. This is important in a non-reentrant scanner so the next time\n     * re_yylex() is called, initialization will occur. */\n    yy_init_globals( yyscanner);\n\n    /* Destroy the main struct (reentrant only). */\n    re_yyfree ( yyscanner , yyscanner );\n    yyscanner = NULL;\n    return 0;\n}\n\n/*\n * Internal utility routines.\n */\n\n#ifndef yytext_ptr\nstatic void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\n\tint i;\n\tfor ( i = 0; i < n; ++i )\n\t\ts1[i] = s2[i];\n}\n#endif\n\n#ifdef YY_NEED_STRLEN\nstatic int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)\n{\n\tint n;\n\tfor ( n = 0; s[n]; ++n )\n\t\t;\n\n\treturn n;\n}\n#endif\n\nvoid *re_yyalloc (yy_size_t  size , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\treturn (void *) malloc( size );\n}\n\nvoid *re_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\n\t/* The cast to (char *) in the following accommodates both\n\t * implementations that use char* generic pointers, and those\n\t * that use void* generic pointers.  It works with the latter\n\t * because both ANSI C and C++ allow castless assignment from\n\t * any pointer type to void*, and deal with argument conversions\n\t * as though doing an assignment.\n\t */\n\treturn (void *) realloc( (char *) ptr, size );\n}\n\nvoid re_yyfree (void * ptr , yyscan_t yyscanner)\n{\n\tstruct yyguts_t * yyg = (struct yyguts_t*)yyscanner;\n\t(void)yyg;\n\tfree( (char *) ptr );\t/* see re_yyrealloc() for (char *) cast */\n}\n\n#define YYTABLES_NAME \"yytables\"\n\n#line 464 \"re_lexer.l\"\n\n\n\nuint8_t escaped_char_value(\n    char* text)\n{\n  char hex[3];\n  int result;\n\n  assert(text[0] == '\\\\');\n\n  switch(text[1])\n  {\n  case 'x':\n    hex[0] = text[2];\n    hex[1] = text[3];\n    hex[2] = '\\0';\n    sscanf(hex, \"%x\", &result);\n    break;\n\n  case 'n':\n    result = '\\n';\n    break;\n\n  case 't':\n    result = '\\t';\n    break;\n\n  case 'r':\n    result = '\\r';\n    break;\n\n  case 'f':\n    result = '\\f';\n    break;\n\n  case 'a':\n    result = '\\a';\n    break;\n\n  default:\n    result = text[1];\n  }\n\n  return result;\n}\n\n\n#ifdef __cplusplus\n#define RE_YY_INPUT yyinput\n#else\n#define RE_YY_INPUT input\n#endif\n\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char)\n{\n  char text[4] = {0, 0, 0, 0};\n\n  text[0] = '\\\\';\n  text[1] = RE_YY_INPUT(yyscanner);\n\n  if (text[1] == EOF || text[1] == 0)\n    return 0;\n\n  if (text[1] == 'x')\n  {\n    text[2] = RE_YY_INPUT(yyscanner);\n\n    if (!isxdigit(text[2]))\n      return 0;\n\n    text[3] = RE_YY_INPUT(yyscanner);\n\n    if (!isxdigit(text[3]))\n      return 0;\n  }\n\n  *escaped_char = escaped_char_value(text);\n\n  return 1;\n}\n\n\nextern YR_THREAD_STORAGE_KEY recovery_state_key;\n\n\nvoid yyfatal(\n    yyscan_t yyscanner,\n    const char *error_message)\n{\n  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(\n      &recovery_state_key);\n\n  longjmp(*recovery_state, 1);\n}\n\n\nvoid yyerror(\n    yyscan_t yyscanner,\n    RE_LEX_ENVIRONMENT* lex_env,\n    const char *error_message)\n{\n  // if lex_env->last_error_code was set to some error code before\n  // don't overwrite it, we are interested in the first error, not in\n  // subsequent errors like \"syntax error, unexpected $end\" caused by\n  // early parser termination.\n\n  if (lex_env->last_error_code == ERROR_SUCCESS)\n  {\n    lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION;\n\n    strlcpy(\n        lex_env->last_error_message,\n        error_message,\n        sizeof(lex_env->last_error_message));\n  }\n}\n\n\nint yr_parse_re_string(\n  const char* re_string,\n  int flags,\n  RE** re,\n  RE_ERROR* error)\n{\n  yyscan_t yyscanner;\n  jmp_buf recovery_state;\n  RE_LEX_ENVIRONMENT lex_env;\n\n  lex_env.last_error_code = ERROR_SUCCESS;\n\n  yr_thread_storage_set_value(&recovery_state_key, &recovery_state);\n\n  if (setjmp(recovery_state) != 0)\n    return ERROR_INTERNAL_FATAL_ERROR;\n\n  FAIL_ON_ERROR(yr_re_create(re));\n\n  (*re)->flags = flags;\n\n  re_yylex_init(&yyscanner);\n  re_yyset_extra(*re,yyscanner);\n  re_yy_scan_string(re_string,yyscanner);\n  yyparse(yyscanner, &lex_env);\n  re_yylex_destroy(yyscanner);\n\n  if (lex_env.last_error_code != ERROR_SUCCESS)\n  {\n    yr_re_destroy(*re);\n    *re = NULL;\n\n    strlcpy(\n        error->message,\n        lex_env.last_error_message,\n        sizeof(error->message));\n\n    return lex_env.last_error_code;\n  }\n\n  return ERROR_SUCCESS;\n}\n\n", "/*\nCopyright (c) 2013. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* Lexical analyzer for regular expressions */\n\n%{\n\n/* Disable warnings for unused functions in this file.\n\nAs we redefine YY_FATAL_ERROR macro to use our own function re_yyfatal, the\nyy_fatal_error function generated by Flex is not actually used, causing a\ncompiler warning. Flex doesn't offer any options to remove the yy_fatal_error\nfunction. When they include something like %option noyy_fatal_error as they do\nwith noyywrap then we can remove this pragma.\n*/\n\n#ifdef __GNUC__\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n#include <assert.h>\n#include <setjmp.h>\n\n\n#include <yara/utils.h>\n#include <yara/error.h>\n#include <yara/limits.h>\n#include <yara/mem.h>\n#include <yara/re.h>\n#include <yara/re_lexer.h>\n#include <yara/threading.h>\n#include <yara/strutils.h>\n\n\n#ifdef _WIN32\n#define snprintf _snprintf\n#endif\n\nstatic uint8_t word_chars[] = {\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,\n    0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n\n\nuint8_t escaped_char_value(\n    char* text);\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char);\n\n%}\n\n%option reentrant bison-bridge\n%option noyywrap\n%option nounistd\n%option nounput\n%option never-interactive\n%option yylineno\n%option prefix=\"re_yy\"\n\n%option outfile=\"lex.yy.c\"\n\n%option verbose\n%option warn\n\n%x char_class\n\ndigit         [0-9]\nhex_digit     [0-9a-fA-F]\n\n%%\n\n\\{{digit}*,{digit}*\\} {\n\n  // Examples: {3,8} {0,5} {,5} {7,}\n\n  int hi_bound;\n  int lo_bound = atoi(yytext + 1);\n\n  char* comma = strchr(yytext, ',');\n\n  if (comma - yytext == strlen(yytext) - 2)\n    // if comma is followed by the closing curly bracket\n    // (example: {2,}) set high bound value to maximum.\n    hi_bound = INT16_MAX;\n  else\n    hi_bound = atoi(comma + 1);\n\n  if (hi_bound > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  if (hi_bound < lo_bound || hi_bound < 0 || lo_bound < 0)\n  {\n    yyerror(yyscanner, lex_env, \"bad repeat interval\");\n    yyterminate();\n  }\n\n  yylval->range = (hi_bound << 16) | lo_bound;\n\n  return _RANGE_;\n}\n\n\n\\{{digit}+\\} {\n\n  // Example: {10}\n\n  int value = atoi(yytext + 1);\n\n  if (value > INT16_MAX)\n  {\n    yyerror(yyscanner, lex_env, \"repeat interval too large\");\n    yyterminate();\n  }\n\n  yylval->range = (value << 16) | value;\n\n  return _RANGE_;\n}\n\n\n\\[\\^ {\n\n  // Start of a negated character class. Example: [^abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n}\n\n\\[\\^\\] {\n\n  // Start of character negated class containing a ].\n  // Example: [^]abc] this must be interpreted as a class\n  // not matching ], a, b, nor c\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = TRUE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\n\n\\[\\] {\n\n  // Start of character class containing a ].\n  // Example: []abc] this must be interpreted as a class\n  // matching ], a, b, or c.\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n  LEX_ENV->class_vector[']' / 8] |= 1 << ']' % 8;\n}\n\n\n\\[ {\n\n  // Start of character class. Example: [abcd]\n\n  BEGIN(char_class);\n  memset(LEX_ENV->class_vector, 0, 32);\n  LEX_ENV->negated_class = FALSE;\n}\n\n\n[^\\\\\\[\\(\\)\\|\\$\\.\\^\\+\\*\\?] {\n\n  // Any non-special character is passed as a CHAR token to the scanner.\n\n  yylval->integer = yytext[0];\n  return _CHAR_;\n}\n\n\n\\\\w {\n  return _WORD_CHAR_;\n}\n\n\n\\\\W {\n  return _NON_WORD_CHAR_;\n}\n\n\n\\\\s {\n  return _SPACE_;\n}\n\n\n\\\\S {\n  return _NON_SPACE_;\n}\n\n\n\\\\d {\n  return _DIGIT_;\n}\n\n\n\\\\D {\n  return _NON_DIGIT_;\n}\n\n\n\\\\b {\n  return _WORD_BOUNDARY_;\n}\n\n\\\\B {\n  return _NON_WORD_BOUNDARY_;\n}\n\n\n\\\\{digit}+ {\n\n  yyerror(yyscanner, lex_env, \"backreferences are not allowed\");\n  yyterminate();\n}\n\n\n\\\\ {\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    yylval->integer = c;\n    return _CHAR_;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n    yyterminate();\n  }\n}\n\n\n<char_class>\\] {\n\n  // End of character class.\n\n  int i;\n\n  yylval->class_vector = (uint8_t*) yr_malloc(32);\n  memcpy(yylval->class_vector, LEX_ENV->class_vector, 32);\n\n  if (LEX_ENV->negated_class)\n  {\n    for(i = 0; i < 32; i++)\n      yylval->class_vector[i] = ~yylval->class_vector[i];\n  }\n\n  BEGIN(INITIAL);\n  return _CLASS_;\n}\n\n\n\n<char_class>(\\\\x{hex_digit}{2}|\\\\.|[^\\\\])\\-[^]] {\n\n  // A range inside a character class.\n  //  [abc0-9]\n  //      ^- matching here\n\n  uint16_t c;\n  uint8_t start = yytext[0];\n  uint8_t end = yytext[2];\n\n  if (start == '\\\\')\n  {\n    start = escaped_char_value(yytext);\n\n    if (yytext[1] == 'x')\n      end = yytext[5];\n    else\n      end = yytext[3];\n  }\n\n  if (end == '\\\\')\n  {\n    if (!read_escaped_char(yyscanner, &end))\n    {\n      yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n      yyterminate();\n    }\n  }\n\n  if (end < start)\n  {\n    yyerror(yyscanner, lex_env, \"bad character range\");\n    yyterminate();\n  }\n\n  for (c = start; c <= end; c++)\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n}\n\n\n<char_class>\\\\w {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= word_chars[i];\n}\n\n\n<char_class>\\\\W {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n    LEX_ENV->class_vector[i] |= ~word_chars[i];\n}\n\n\n<char_class>\\\\s {\n\n  LEX_ENV->class_vector[' ' / 8] |= 1 << ' ' % 8;\n  LEX_ENV->class_vector['\\t' / 8] |= 1 << '\\t' % 8;\n}\n\n\n<char_class>\\\\S {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    if (i == ' ' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << ' ' % 8);\n    else if (i == '\\t' / 8)\n      LEX_ENV->class_vector[i] |= ~(1 << '\\t' % 8);\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\n\n<char_class>\\\\d {\n\n  char c;\n\n  for (c = '0'; c <= '9'; c++)\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n}\n\n\n<char_class>\\\\D {\n\n  int i;\n\n  for (i = 0; i < 32; i++)\n  {\n    // digits 0-7 are in the sixth byte of the vector, let that byte alone\n    if (i == 6)\n      continue;\n\n    // digits 8 and 9 are the lowest two bits in the seventh byte of the\n    // vector, let those bits alone.\n    if (i == 7)\n      LEX_ENV->class_vector[i] |= 0xFC;\n    else\n      LEX_ENV->class_vector[i] = 0xFF;\n  }\n}\n\n\n<char_class>\\\\ {\n\n  uint8_t c;\n\n  if (read_escaped_char(yyscanner, &c))\n  {\n    LEX_ENV->class_vector[c / 8] |= 1 << c % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"illegal escape sequence\");\n    yyterminate();\n  }\n}\n\n\n<char_class>. {\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    // A character class (i.e: [0-9a-f]) is represented by a 256-bits vector,\n    // here we set to 1 the vector's bit corresponding to the input character.\n\n    LEX_ENV->class_vector[yytext[0] / 8] |= 1 << yytext[0] % 8;\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\n\n<char_class><<EOF>> {\n\n  // End of regexp reached while scanning a character class.\n\n  yyerror(yyscanner, lex_env, \"missing terminating ] for character class\");\n  yyterminate();\n}\n\n\n. {\n\n  if (yytext[0] >= 32 && yytext[0] < 127)\n  {\n    return yytext[0];\n  }\n  else\n  {\n    yyerror(yyscanner, lex_env, \"non-ascii character\");\n    yyterminate();\n  }\n}\n\n\n<<EOF>> {\n\n  yyterminate();\n}\n\n%%\n\nuint8_t escaped_char_value(\n    char* text)\n{\n  char hex[3];\n  int result;\n\n  assert(text[0] == '\\\\');\n\n  switch(text[1])\n  {\n  case 'x':\n    hex[0] = text[2];\n    hex[1] = text[3];\n    hex[2] = '\\0';\n    sscanf(hex, \"%x\", &result);\n    break;\n\n  case 'n':\n    result = '\\n';\n    break;\n\n  case 't':\n    result = '\\t';\n    break;\n\n  case 'r':\n    result = '\\r';\n    break;\n\n  case 'f':\n    result = '\\f';\n    break;\n\n  case 'a':\n    result = '\\a';\n    break;\n\n  default:\n    result = text[1];\n  }\n\n  return result;\n}\n\n\n#ifdef __cplusplus\n#define RE_YY_INPUT yyinput\n#else\n#define RE_YY_INPUT input\n#endif\n\n\nint read_escaped_char(\n    yyscan_t yyscanner,\n    uint8_t* escaped_char)\n{\n  char text[4] = {0, 0, 0, 0};\n\n  text[0] = '\\\\';\n  text[1] = RE_YY_INPUT(yyscanner);\n\n  if (text[1] == EOF || text[1] == 0)\n    return 0;\n\n  if (text[1] == 'x')\n  {\n    text[2] = RE_YY_INPUT(yyscanner);\n\n    if (!isxdigit(text[2]))\n      return 0;\n\n    text[3] = RE_YY_INPUT(yyscanner);\n\n    if (!isxdigit(text[3]))\n      return 0;\n  }\n\n  *escaped_char = escaped_char_value(text);\n\n  return 1;\n}\n\n\nextern YR_THREAD_STORAGE_KEY recovery_state_key;\n\n\nvoid yyfatal(\n    yyscan_t yyscanner,\n    const char *error_message)\n{\n  jmp_buf* recovery_state = (jmp_buf*) yr_thread_storage_get_value(\n      &recovery_state_key);\n\n  longjmp(*recovery_state, 1);\n}\n\n\nvoid yyerror(\n    yyscan_t yyscanner,\n    RE_LEX_ENVIRONMENT* lex_env,\n    const char *error_message)\n{\n  // if lex_env->last_error_code was set to some error code before\n  // don't overwrite it, we are interested in the first error, not in\n  // subsequent errors like \"syntax error, unexpected $end\" caused by\n  // early parser termination.\n\n  if (lex_env->last_error_code == ERROR_SUCCESS)\n  {\n    lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION;\n\n    strlcpy(\n        lex_env->last_error_message,\n        error_message,\n        sizeof(lex_env->last_error_message));\n  }\n}\n\n\nint yr_parse_re_string(\n  const char* re_string,\n  int flags,\n  RE** re,\n  RE_ERROR* error)\n{\n  yyscan_t yyscanner;\n  jmp_buf recovery_state;\n  RE_LEX_ENVIRONMENT lex_env;\n\n  lex_env.last_error_code = ERROR_SUCCESS;\n\n  yr_thread_storage_set_value(&recovery_state_key, &recovery_state);\n\n  if (setjmp(recovery_state) != 0)\n    return ERROR_INTERNAL_FATAL_ERROR;\n\n  FAIL_ON_ERROR(yr_re_create(re));\n\n  (*re)->flags = flags;\n\n  yylex_init(&yyscanner);\n  yyset_extra(*re, yyscanner);\n  yy_scan_string(re_string, yyscanner);\n  yyparse(yyscanner, &lex_env);\n  yylex_destroy(yyscanner);\n\n  if (lex_env.last_error_code != ERROR_SUCCESS)\n  {\n    yr_re_destroy(*re);\n    *re = NULL;\n\n    strlcpy(\n        error->message,\n        lex_env.last_error_message,\n        sizeof(error->message));\n\n    return lex_env.last_error_code;\n  }\n\n  return ERROR_SUCCESS;\n}\n", "/*\nCopyright (c) 2016. The YARA Authors. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#include <yara.h>\n#include \"blob.h\"\n#include \"util.h\"\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n#include <fileapi.h>\n#else\n#include <unistd.h>\n#endif\n#include <fcntl.h>\n\nstatic void test_boolean_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: true }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: true or false }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: true and true }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0x1 and 0x2}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: false }\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: true and false }\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: false or false }\", NULL);\n}\n\n\nstatic void test_comparison_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: 2 > 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 < 2 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 2 >= 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 <= 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 == 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 == 1.5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.0 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 >= 1.0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 >= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.0 >= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0.5 < 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 0.5 <= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: 1.0 <= 1}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" == \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" <= \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" >= \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"ab\\\" < \\\"abc\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" > \\\"ab\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abc\\\" < \\\"abd\\\"}\", NULL);\n\n  assert_true_rule(\n      \"rule rest { condition: \\\"abd\\\" > \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 != 1}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 != 1.0}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 2 > 3}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 2.1 < 2}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" != \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" > \\\"abc\\\"}\", NULL);\n\n  assert_false_rule(\n      \"rule test { condition: \\\"abc\\\" < \\\"abc\\\"}\", NULL);\n\n}\n\nstatic void test_arithmetic_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: (1 + 1) * 2 == (9 - 1) \\\\ 2 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 5 % 2 == 1 }\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1.5 + 1.5 == 3}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 3 \\\\ 2 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 3.0 \\\\ 2 == 1.5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 + -1 == 0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -1 + -1 == -2}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 4 --2 * 2 == 8}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -1.0 * 1 == -1.0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1-1 == 0}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -2.0-3.0 == -5}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: --1 == 1}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1--1 == 2}\", NULL);\n\n  assert_true_rule(\n      \"rule test { condition: -0x01 == -1}\", NULL);\n\n}\n\n\nstatic void test_bitwise_operators()\n{\n  assert_true_rule(\n      \"rule test { condition: 0x55 | 0xAA == 0xFF }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: ~0xAA ^ 0x5A & 0xFF == (~0xAA) ^ (0x5A & 0xFF) }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: ~0x55 & 0xFF == 0xAA }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 8 >> 2 == 2 }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 << 3 == 8 }\",\n      NULL);\n\n  assert_true_rule(\n      \"rule test { condition: 1 | 3 ^ 3 == 1 | (3 ^ 3) }\",\n      NULL);\n\n  assert_false_rule(\n      \"rule test { condition: ~0xAA ^ 0x5A & 0xFF == 0x0F }\",\n      NULL);\n\n  assert_false_rule(\n      \"rule test { condition: 1 | 3 ^ 3 == (1 | 3) ^ 3}\",\n      NULL);\n\n}\n\n\nstatic void test_syntax()\n{\n  assert_syntax_error(\n      \"rule test { strings: $a = \\\"a\\\" $a = \\\"a\\\" condition: all of them }\");\n}\n\n\nstatic void test_anonymous_strings()\n{\n  assert_true_rule(\n      \"rule test { strings: $ = \\\"a\\\" $ = \\\"b\\\" condition: all of them }\",\n      \"ab\");\n}\n\n\nstatic void test_strings()\n{\n  char* str = \"---- abc ---- xyz\";\n  uint8_t blob[] = \"---- a\\0b\\0c\\0 -\\0-\\0-\\0-\\0x\\0y\\0z\\0\";\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"a\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ab\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"xyz\\\" condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" nocase fullword condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"aBc\\\" nocase  condition: $a }\",\n      str);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"a\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"ab\\\" fullword condition: $a }\",\n      str);\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      str);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"a\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"a\\\" wide ascii condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide ascii condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide nocase fullword condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"aBc\\\" wide nocase condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"aBc\\\" wide ascii nocase condition: $a }\",\n      blob);\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"---xyz\\\" wide nocase condition: $a }\",\n      blob);\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"abc\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"xabcx\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"xabc\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" fullword condition: $a }\",\n      \"abcx\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = \\\"abc\\\" ascii wide fullword condition: $a }\",\n      \"abcx\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" ascii wide fullword condition: $a }\",\n      \"a\\0abc\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"a\\0b\\0c\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0c\\0x\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"ab\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0\");\n\n  assert_false_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\0a\\0b\\0c\\0\");\n\n  assert_true_rule_blob(\n      \"rule test { strings: $a = \\\"abc\\\" wide fullword condition: $a }\",\n      \"x\\001a\\0b\\0c\\0\");\n\n  assert_true_rule(\n      \"rule test {\\n\\\n         strings:\\n\\\n             $a = \\\"abcdef\\\"\\n\\\n             $b = \\\"cdef\\\"\\n\\\n             $c = \\\"ef\\\"\\n\\\n         condition:\\n\\\n             all of them\\n\\\n       }\", \"abcdef\");\n}\n\n\nstatic void test_wildcard_strings()\n{\n  assert_true_rule_blob(\n      \"rule test {\\n\\\n         strings:\\n\\\n             $s1 = \\\"abc\\\"\\n\\\n             $s2 = \\\"xyz\\\"\\n\\\n         condition:\\n\\\n             for all of ($*) : ($)\\n\\\n      }\",\n      \"---- abc ---- A\\x00\"\"B\\x00\"\"C\\x00 ---- xyz\");\n}\n\n\nstatic void test_hex_strings()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 00 00 60 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 0? 00 00 ?0 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\\\n\n      \"rule test { \\\n        strings: $a = { 6? 01 00 00 60 0? } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 [1-3] 60 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 64 01 [1-3] (60|61) 01 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [-] 6A 2A [-] 58 C3} \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [300-] 6A 2A [-] 58 C3} \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 2e 7? (65 | ?\"\"?\"\") 78 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_false_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [0-300] 6A 2A } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_false_rule_blob(\n      \"rule test { \\\n        strings: $a = { 4D 5A [0-128] 45 [0-128] 01 [0-128]  C3 } \\\n        condition: $a }\",\n      PE32_FILE);\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] // Inline comment\\n\\r \\\n          38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 /* Inline comment */ [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 /* Inline multi-line\\n\\r \\\n                                 comment */ [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = {\\n 31 32 [-] 38 39 \\n\\r} \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 33 34 [-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [1] 34 35 [2] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test {\\\n         strings: $a = { 31 32 [1-] 34 35 [1-] 38 39 } \\\n         condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-3] 34 35 [1-] 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-2] 35 [1-] 37 38 39 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 38 39 } \\\n        condition: all of them }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [-] 32 33 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 35 36 [-] 31 32 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [2-] 34 35 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: $a = { 31 32 [0-3] 37 38 } \\\n        condition: $a }\",\n      \"1234567890\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 [0] 02 } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { [-] 01 02 } condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 [-] } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 ([-] 03 | 04) } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 (03 [-] | 04) } \\\n        condition: $a }\");\n\n  assert_syntax_error(\n      \"rule test { \\\n        strings: $a = { 01 02 (03 | 04 [-]) } \\\n        condition: $a \");\n\n  /* TODO: tests.py:551 ff. */\n}\n\n\nstatic void test_count()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: #a == 2 }\",\n      \"mississippi\");\n}\n\n\nstatic void test_at()\n{\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = \\\"ssi\\\" \\\n        condition: $a at 2 and $a at 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: $a = \\\"mis\\\" \\\n        condition: $a at ~0xFF & 0xFF }\",\n      \"mississippi\");\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 00 00 00 00 ?? 74 65 78 74 } \\\n        condition: $a at 308}\",\n      PE32_FILE);\n}\n\n\nstatic void test_in()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 6a 2a 58 c3 } \\\n        condition: $a in (entrypoint .. entrypoint + 1) }\",\n      PE32_FILE);\n}\n\n\nstatic void test_offset()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a == 2 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a == @a[1] }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" condition: @a[2] == 5 }\",\n      \"mississippi\");\n}\n\n\nstatic void test_length()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*?ssi/ condition: !a == 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*?ssi/ condition: !a[1] == 5 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*ssi/ condition: !a == 8 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /m.*ssi/ condition: !a[1] == 8 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi.*ppi/ condition: !a[1] == 9 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi.*ppi/ condition: !a[2] == 6 }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [1-3] 73 73 69 } condition: !a == 5}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [-] 73 73 69 } condition: !a == 5}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D [-] 70 70 69 } condition: !a == 11}\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = { 6D 69 73 73 [-] 70 69 } condition: !a == 11}\",\n      \"mississippi\");\n}\n\n\nstatic void test_of()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: any of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: 1 of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = \\\"ssi\\\" $b = \\\"mis\\\" $c = \\\"oops\\\" \"\n      \"condition: 2 of them }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a1 = \\\"dummy1\\\" $b1 = \\\"dummy1\\\" $b2 = \\\"ssi\\\"\"\n      \"condition: any of ($a*, $b*) }\",\n      \"mississippi\");\n\n  assert_true_rule_blob(\n      \"rule test { \\\n         strings: \\\n           $ = /abc/ \\\n           $ = /def/ \\\n           $ = /ghi/ \\\n         condition: \\\n           for any of ($*) : ( for any i in (1..#): (uint8(@[i] - 1) == 0x00) )\\\n       }\",\n       \"abc\\000def\\000ghi\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n          $b = \\\"mis\\\" \\\n          $c = \\\"oops\\\" \\\n        condition: \\\n          all of them \\\n      }\",\n      \"mississippi\");\n\n  assert_syntax_error(\n      \"rule test { condition: all of ($a*) }\");\n\n  assert_syntax_error(\n      \"rule test { condition: all of them }\");\n}\n\n\nvoid test_for()\n{\n  assert_true_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n        condition: \\\n          for all i in (1..#a) : (@a[i] >= 2 and @a[i] <= 5) \\\n      }\",\n      \"mississippi\");\n\n  assert_true_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n          $b = \\\"mi\\\" \\\n        condition: \\\n          for all i in (1..#a) : ( for all j in (1..#b) : (@a[i] >= @b[j])) \\\n      }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { \\\n        strings: \\\n          $a = \\\"ssi\\\" \\\n        condition: \\\n          for all i in (1..#a) : (@a[i] == 5) \\\n      }\",\n      \"mississippi\");\n}\n\n\nvoid test_re()\n{\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssi(s|p)/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssim*/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ssa?/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /Miss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /(M|N)iss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /[M-N]iss/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /(Mi|ssi)ssippi/ nocase condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ppi\\\\tmi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /ppi\\\\.mi/ condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /^mississippi/ fullword condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_true_rule(\n      \"rule test { strings: $a = /mississippi.*mississippi$/s condition: $a }\",\n      \"mississippi\\tmississippi.mississippi\\nmississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /^ssi/ condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /ssi$/ condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /ssissi/ fullword condition: $a }\",\n      \"mississippi\");\n\n  assert_false_rule(\n      \"rule test { strings: $a = /^[isp]+/ condition: $a }\",\n      \"mississippi\");\n\n  assert_regexp_syntax_error(\")\");\n  assert_true_regexp(\"abc\", \"abc\", \"abc\");\n  assert_false_regexp(\"abc\", \"xbc\");\n  assert_false_regexp(\"abc\", \"axc\");\n  assert_false_regexp(\"abc\", \"abx\");\n  assert_true_regexp(\"abc\", \"xabcx\", \"abc\");\n  assert_true_regexp(\"abc\", \"ababc\", \"abc\");\n  assert_true_regexp(\"a.c\", \"abc\", \"abc\");\n  assert_false_regexp(\"a.b\", \"a\\nb\");\n  assert_false_regexp(\"a.*b\", \"acc\\nccb\");\n  assert_false_regexp(\"a.{4,5}b\", \"acc\\nccb\");\n  assert_true_regexp(\"a.b\", \"a\\rb\", \"a\\rb\");\n  assert_true_regexp(\"ab*c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*c\", \"ac\", \"ac\");\n  assert_true_regexp(\"ab*bc\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*bc\", \"abbc\", \"abbc\");\n  assert_true_regexp(\"a.*bb\", \"abbbb\", \"abbbb\");\n  assert_true_regexp(\"a.*?bbb\", \"abbbbbb\", \"abbb\");\n  assert_true_regexp(\"a.*c\", \"ac\", \"ac\");\n  assert_true_regexp(\"a.*c\", \"axyzc\", \"axyzc\");\n  assert_true_regexp(\"ab+c\", \"abbc\", \"abbc\");\n  assert_false_regexp(\"ab+c\", \"ac\");\n  assert_true_regexp(\"ab+\", \"abbbb\", \"abbbb\");\n  assert_true_regexp(\"ab+?\", \"abbbb\", \"ab\");\n  assert_false_regexp(\"ab+bc\", \"abc\");\n  assert_false_regexp(\"ab+bc\", \"abq\");\n  assert_true_regexp(\"a+b+c\", \"aabbabc\", \"abc\");\n  assert_false_regexp(\"ab?bc\", \"abbbbc\");\n  assert_true_regexp(\"ab?c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab*?\", \"abbb\", \"a\");\n  assert_true_regexp(\"ab?c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab??\", \"ab\", \"a\");\n  assert_true_regexp(\"a(b|x)c\", \"abc\", \"abc\");\n  assert_true_regexp(\"a(b|x)c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a(b|.)c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a(b|x|y)c\", \"ayc\", \"ayc\");\n  assert_true_regexp(\"(a+|b)*\", \"ab\", \"ab\");\n  assert_true_regexp(\"a|b|c|d|e\", \"e\", \"e\");\n  assert_true_regexp(\"(a|b|c|d|e)f\", \"ef\", \"ef\");\n  assert_true_regexp(\".b{2}\", \"abb\", \"abb\");\n  assert_true_regexp(\"ab{1}c\", \"abc\", \"abc\");\n  assert_true_regexp(\"ab{1,2}c\", \"abbc\", \"abbc\");\n  assert_true_regexp(\"ab{1,}c\", \"abbbc\", \"abbbc\");\n  assert_false_regexp(\"ab{1,}b\", \"ab\");\n  assert_false_regexp(\"ab{1}c\", \"abbc\");\n  assert_true_regexp(\"ab{0,}c\", \"ac\", \"ac\");\n  assert_true_regexp(\"ab{0,}c\", \"abbbc\", \"abbbc\");\n  assert_true_regexp(\"ab{,3}c\", \"abbbc\", \"abbbc\");\n  assert_false_regexp(\"ab{,2}c\", \"abbbc\");\n  assert_false_regexp(\"ab{4,5}bc\", \"abbbbc\");\n  assert_true_regexp(\"ab{2,3}?\", \"abbbbb\", \"abb\");\n  assert_true_regexp(\"ab{.*}\", \"ab{c}\", \"ab{c}\");\n  assert_true_regexp(\".(aa){1,2}\", \"aaaaaaaaaa\", \"aaaaa\");\n  assert_true_regexp(\"a.(bc.){2}\", \"aabcabca\", \"aabcabca\");\n  assert_true_regexp(\"(ab{1,2}c){1,3}\", \"abbcabc\", \"abbcabc\");\n  assert_true_regexp(\"ab(c|cc){1,3}d\", \"abccccccd\", \"abccccccd\");\n  assert_true_regexp(\"a[bx]c\", \"abc\", \"abc\");\n  assert_true_regexp(\"a[bx]c\", \"axc\", \"axc\");\n  assert_true_regexp(\"a[0-9]*b\", \"ab\", \"ab\");\n  assert_true_regexp(\"a[0-9]*b\", \"a0123456789b\", \"a0123456789b\");\n  assert_true_regexp(\"[0-9a-f]+\", \"0123456789abcdef\", \"0123456789abcdef\");\n  assert_true_regexp(\"[0-9a-f]+\", \"xyz0123456789xyz\", \"0123456789\");\n  assert_true_regexp(\"a[\\\\s\\\\S]b\", \"a b\", \"a b\");\n  assert_true_regexp(\"a[\\\\d\\\\D]b\", \"a1b\", \"a1b\");\n  assert_false_regexp(\"[x-z]+\", \"abc\");\n  assert_true_regexp(\"a[-]?c\", \"ac\", \"ac\");\n  assert_true_regexp(\"a[-b]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[-b]\", \"ab\", \"ab\");\n  assert_true_regexp(\"a[b-]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[b-]\", \"ab\", \"ab\");\n  assert_true_regexp(\"[a-c-e]\", \"b\", \"b\");\n  assert_true_regexp(\"[a-c-e]\", \"-\", \"-\");\n  assert_false_regexp(\"[a-c-e]\", \"d\");\n  assert_regexp_syntax_error(\"[b-a]\");\n  assert_regexp_syntax_error(\"(abc\");\n  assert_regexp_syntax_error(\"abc)\");\n  assert_regexp_syntax_error(\"a[]b\");\n  assert_regexp_syntax_error(\"a\\\\\");\n  assert_true_regexp(\"a[\\\\-b]\", \"a-\", \"a-\");\n  assert_true_regexp(\"a[\\\\-b]\", \"ab\", \"ab\");\n  assert_regexp_syntax_error(\"a[\\\\\");\n  assert_true_regexp(\"a]\", \"a]\", \"a]\");\n  assert_true_regexp(\"a[]]b\", \"a]b\", \"a]b\");\n  assert_true_regexp(\"a[\\\\]]b\", \"a]b\", \"a]b\");\n  assert_true_regexp(\"a[^bc]d\", \"aed\", \"aed\");\n  assert_false_regexp(\"a[^bc]d\", \"abd\");\n  assert_true_regexp(\"a[^-b]c\", \"adc\", \"adc\");\n  assert_false_regexp(\"a[^-b]c\", \"a-c\");\n  assert_false_regexp(\"a[^]b]c\", \"a]c\");\n  assert_true_regexp(\"a[^]b]c\", \"adc\", \"adc\");\n  assert_true_regexp(\"[^ab]*\", \"cde\", \"cde\");\n  assert_regexp_syntax_error(\")(\");\n  assert_true_regexp(\"a\\\\sb\", \"a b\", \"a b\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\tb\", \"a\\tb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\rb\", \"a\\rb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\nb\", \"a\\nb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\vb\", \"a\\vb\");\n  assert_true_regexp(\"a\\\\sb\", \"a\\fb\", \"a\\fb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a b\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\tb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\rb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\nb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\vb\");\n  assert_false_regexp(\"a\\\\Sb\", \"a\\fb\");\n  assert_true_regexp(\"\\\\n\\\\r\\\\t\\\\f\\\\a\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");\n  assert_true_regexp(\"[\\\\n][\\\\r][\\\\t][\\\\f][\\\\a]\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");\n  assert_true_regexp(\"\\\\x01\\\\x02\\\\x03\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");\n  assert_true_regexp(\"[\\\\x01-\\\\x03]+\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");\n  assert_false_regexp(\"[\\\\x00-\\\\x02]+\", \"\\x03\\x04\\x05\");\n  assert_true_regexp(\"[\\\\x5D]\", \"]\", \"]\");\n  assert_true_regexp(\"[\\\\0x5A-\\\\x5D]\", \"\\x5B\", \"\\x5B\");\n  assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"[\\\\x5C-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");\n  assert_true_regexp(\"a\\\\wc\", \"abc\", \"abc\");\n  assert_true_regexp(\"a\\\\wc\", \"a_c\", \"a_c\");\n  assert_true_regexp(\"a\\\\wc\", \"a0c\", \"a0c\");\n  assert_false_regexp(\"a\\\\wc\", \"a*c\");\n  assert_true_regexp(\"\\\\w+\", \"--ab_cd0123--\", \"ab_cd0123\");\n  assert_true_regexp(\"[\\\\w]+\", \"--ab_cd0123--\", \"ab_cd0123\");\n  assert_true_regexp(\"\\\\D+\", \"1234abc5678\", \"abc\");\n  assert_true_regexp(\"[\\\\d]+\", \"0123456789\", \"0123456789\");\n  assert_true_regexp(\"[\\\\D]+\", \"1234abc5678\", \"abc\");\n  assert_true_regexp(\"[\\\\da-fA-F]+\", \"123abc\", \"123abc\");\n  assert_false_regexp(\"^(ab|cd)e\", \"abcde\");\n  assert_true_regexp(\"(abc|)ef\", \"abcdef\", \"ef\");\n  assert_true_regexp(\"(abc|)ef\", \"abcef\", \"abcef\");\n  assert_true_regexp(\"\\\\babc\", \"abc\", \"abc\");\n  assert_true_regexp(\"abc\\\\b\", \"abc\", \"abc\");\n  assert_false_regexp(\"\\\\babc\", \"1abc\");\n  assert_false_regexp(\"abc\\\\b\", \"abc1\");\n  assert_true_regexp(\"abc\\\\s\\\\b\", \"abc x\", \"abc \");\n  assert_false_regexp(\"abc\\\\s\\\\b\", \"abc  \");\n  assert_true_regexp(\"\\\\babc\\\\b\", \" abc \", \"abc\");\n  assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \" abc \", \"abc\");\n  assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\b\", \"abcd\", \"bcd\");\n  assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\", \"abcd\", \"abc\");\n  assert_false_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \"abcd\");\n  assert_false_regexp(\"\\\\Babc\", \"abc\");\n  assert_false_regexp(\"abc\\\\B\", \"abc\");\n  assert_true_regexp(\"\\\\Babc\", \"1abc\", \"abc\");\n  assert_true_regexp(\"abc\\\\B\", \"abc1\", \"abc\");\n  assert_false_regexp(\"abc\\\\s\\\\B\", \"abc x\");\n  assert_true_regexp(\"abc\\\\s\\\\B\", \"abc  \", \"abc \");\n  assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\B\", \"abcd\", \"abc\");\n  assert_true_regexp(\"\\\\B\\\\w\\\\w\\\\w\", \"abcd\", \"bcd\");\n  assert_false_regexp(\"\\\\B\\\\w\\\\w\\\\w\\\\B\", \"abcd\");\n\n  // This is allowed in most regexp engines but in order to keep the\n  // grammar free of shift/reduce conflicts I've decided not supporting\n  // it. Users can use the (abc|) form instead.\n  assert_regexp_syntax_error(\"(|abc)ef\");\n\n  assert_true_regexp(\"((a)(b)c)(d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"(a|b)c*d\", \"abcd\", \"bcd\");\n  assert_true_regexp(\"(ab|ab*)bc\", \"abc\", \"abc\");\n  assert_true_regexp(\"a([bc]*)c*\", \"abc\", \"abc\");\n  assert_true_regexp(\"a([bc]*)c*\", \"ac\", \"ac\");\n  assert_true_regexp(\"a([bc]*)c*\", \"a\", \"a\");\n  assert_true_regexp(\"a([bc]*)(c*d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a([bc]+)(c*d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a([bc]*)(c+d)\", \"abcd\", \"abcd\");\n  assert_true_regexp(\"a[bcd]*dcdcde\", \"adcdcde\", \"adcdcde\");\n  assert_false_regexp(\"a[bcd]+dcdcde\", \"adcdcde\");\n  assert_true_regexp(\"\\\\((.*), (.*)\\\\)\", \"(a, b)\", \"(a, b)\");\n  assert_true_regexp(\"abc|123$\", \"abcx\", \"abc\");\n  assert_false_regexp(\"abc|123$\", \"123x\");\n  assert_true_regexp(\"abc|^123\", \"123\", \"123\");\n  assert_false_regexp(\"abc|^123\", \"x123\");\n  assert_true_regexp(\"^abc$\", \"abc\", \"abc\");\n  assert_false_regexp(\"^abc$\", \"abcc\");\n  assert_true_regexp(\"^abc\", \"abcc\", \"abc\");\n  assert_false_regexp(\"^abc$\", \"aabc\");\n  assert_true_regexp(\"abc$\", \"aabc\", \"abc\");\n  assert_true_regexp(\"^a(bc+|b[eh])g|.h$\", \"abhg\", \"abhg\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effgz\", \"effgz\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"ij\", \"ij\");\n  assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effg\");\n  assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"bcdd\");\n  assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"reffgz\", \"effgz\");\n\n  // Test case for issue #324\n  assert_true_regexp(\"whatever|   x.   x\", \"   xy   x\", \"   xy   x\");\n\n  // test case for issue #503, \\x without two following hex-digits\n  assert_regexp_syntax_error(\"\\\\x0\");\n  assert_regexp_syntax_error(\"\\\\x\");\n\n  assert_regexp_syntax_error(\"\\\\xxy\");\n}\n\n\nstatic void test_entrypoint()\n{\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { 6a 2a 58 c3 } \\\n        condition: $a at entrypoint }\",\n      PE32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { b8 01 00 00 00 bb 2a } \\\n        condition: $a at entrypoint }\",\n      ELF32_FILE);\n\n  assert_true_rule_blob(\n      \"rule test { \\\n        strings: $a = { b8 01 00 00 00 bb 2a } \\\n        condition: $a at entrypoint }\",\n      ELF64_FILE);\n\n  assert_false_rule(\n      \"rule test { condition: entrypoint >= 0 }\",\n      NULL);\n}\n\n\nstatic void test_filesize()\n{\n  char rule[80];\n\n  snprintf(\n      rule,\n      sizeof(rule),\n      \"rule test { condition: filesize == %zd }\",\n      sizeof(PE32_FILE));\n\n  assert_true_rule_blob(\n      rule,\n      PE32_FILE);\n}\n\n\nstatic void test_comments()\n{\n  assert_true_rule(\n      \"rule test {\\n\\\n         condition:\\n\\\n             //  this is a comment\\n\\\n             /*** this is a comment ***/\\n\\\n             /* /* /*\\n\\\n                 this is a comment\\n\\\n             */\\n\\\n             true\\n\\\n      }\",\n      NULL);\n}\n\n\nstatic void test_global_rules()\n{\n  assert_true_rule(\n      \"global private rule global_rule { \\\n        condition: \\\n          true \\\n      } \\\n      rule test { \\\n        condition: true \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"global private rule global_rule { \\\n        condition: \\\n          false \\\n      } \\\n      rule test { \\\n        condition: true \\\n      }\",\n      NULL);\n}\n\n\nstatic void test_modules()\n{\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.one + 1 == tests.constants.two \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.foo == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.constants.empty == \\\"\\\"  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.empty() == \\\"\\\"  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.struct_array[1].i == 1  \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.struct_array[0].i == 1 or true \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.integer_array[0] == 0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.integer_array[1] == 1 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_array[0] == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_array[2] == \\\"baz\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_dict[\\\"foo\\\"] == \\\"foo\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.string_dict[\\\"bar\\\"] == \\\"bar\\\" \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.isum(1,2) == 3 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.isum(1,2,3) == 6 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.fsum(1.0,2.0) == 3.0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.fsum(1.0,2.0,3.0) == 6.0 \\\n      }\",\n      NULL);\n\n  assert_true_rule(\n      \"import \\\"tests\\\" \\\n       rule test { \\\n        condition: tests.length(\\\"dummy\\\") == 5 \\\n      }\",\n      NULL);\n\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.struct_array[0].i == 1  \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.isum(1,1) == 3 \\\n      }\",\n      NULL);\n\n  assert_false_rule(\n      \"import \\\"tests\\\" \\\n      rule test { condition: tests.fsum(1.0,1.0) == 3.0 \\\n      }\",\n      NULL);\n}\n\n#if defined(HASH_MODULE)\nstatic void test_hash_module()\n{\n  uint8_t blob[] = {0x61, 0x62, 0x63, 0x64, 0x65};\n\n  assert_true_rule_blob(\n      \"import \\\"hash\\\" \\\n       rule test { \\\n        condition: \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n            and \\\n          hash.sha1(0, filesize) == \\\n            \\\"03de6c570bfe24bfc328ccd7ca46b76eadaf4334\\\" \\\n            and \\\n          hash.sha1(1, filesize) == \\\n            \\\"a302d65ae4d9e768a1538d53605f203fd8e2d6e2\\\" \\\n            and \\\n          hash.sha256(0, filesize) == \\\n            \\\"36bbe50ed96841d10443bcb670d6554f0a34b761be67ec9c4a8ad2c0c44ca42c\\\" \\\n            and \\\n          hash.sha256(1, filesize) == \\\n            \\\"aaaaf2863e043b9df604158ad5c16ff1adaf3fd7e9fcea5dcb322b6762b3b59a\\\" \\\n      }\",\n      blob);\n\n  // Test hash caching mechanism\n\n  assert_true_rule_blob(\n      \"import \\\"hash\\\" \\\n       rule test { \\\n        condition: \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n            and \\\n          hash.md5(0, filesize) == \\\n            \\\"ab56b4d92b40713acc5af89985d4b786\\\" \\\n            and \\\n          hash.md5(1, filesize) == \\\n            \\\"e02cfbe5502b64aa5ae9f2d0d69eaa8d\\\" \\\n      }\",\n      blob);\n}\n#endif\n\n\nvoid test_integer_functions()\n{\n  assert_true_rule(\n      \"rule test { condition: uint8(0) == 0xAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint16(0) == 0xBBAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint32(0) == 0xDDCCBBAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint8be(0) == 0xAA}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint16be(0) == 0xAABB}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n\n  assert_true_rule(\n      \"rule test { condition: uint32be(0) == 0xAABBCCDD}\",\n      \"\\xaa\\xbb\\xcc\\xdd\");\n}\n\n\nvoid test_file_descriptor()\n{\n  YR_COMPILER* compiler = NULL;\n  YR_RULES* rules = NULL;\n  \n#if defined(_WIN32) || defined(__CYGWIN__)\n  HANDLE fd = CreateFile(\"tests/data/true.yar\", GENERIC_READ, 0, NULL, OPEN_EXISTING, 0, NULL);\n  if (fd == INVALID_HANDLE_VALUE)\n  {\n    fputs(\"CreateFile failed\", stderr);\n    exit(1);\n  }\n#else\n  int fd = open(\"tests/data/true.yar\", O_RDONLY);\n  if (fd < 0)\n  {\n    perror(\"open\");\n    exit(EXIT_FAILURE);\n  }\n#endif\n  if (yr_compiler_create(&compiler) != ERROR_SUCCESS)\n  {\n    perror(\"yr_compiler_create\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (yr_compiler_add_fd(compiler, fd, NULL, NULL) != 0) {\n    perror(\"yr_compiler_add_fd\");\n    exit(EXIT_FAILURE);\n  }\n  \n#if defined(_WIN32) || defined(__CYGWIN__)\n  CloseHandle(fd);\n#else\n  close(fd);\n#endif\n\n  if (yr_compiler_get_rules(compiler, &rules) != ERROR_SUCCESS) {\n    perror(\"yr_compiler_add_fd\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (compiler)\n  {\n    yr_compiler_destroy(compiler);\n  }\n  if (rules)\n  {\n    yr_rules_destroy(rules);\n  }\n  \n  return;\n}\n\n\nint main(int argc, char** argv)\n{\n  yr_initialize();\n\n  test_boolean_operators();\n  test_comparison_operators();\n  test_arithmetic_operators();\n  test_bitwise_operators();\n  test_syntax();\n  test_anonymous_strings();\n  test_strings();\n  test_wildcard_strings();\n  test_hex_strings();\n  test_count();\n  test_at();\n  test_in();\n  test_offset();\n  test_length();\n  test_of();\n  test_for();\n  test_re();\n  test_filesize();\n  // test_compile_file();\n  // test_compile_files();\n  // test_include_files();\n  // test_externals();\n  // test_callback();\n  // test_compare();\n  test_comments();\n  test_modules();\n  test_integer_functions();\n  // test_string_io();\n  test_entrypoint();\n  test_global_rules();\n\n  #if defined(HASH_MODULE)\n  test_hash_module();\n  #endif\n\n  test_file_descriptor();\n\n  yr_finalize();\n\n  return 0;\n}\n"], "filenames": ["libyara/re_lexer.c", "libyara/re_lexer.l", "tests/test-rules.c"], "buggy_code_start_loc": [193, 264, 1021], "buggy_code_end_loc": [2584, 540, 1021], "fixing_code_start_loc": [193, 264, 1022], "fixing_code_end_loc": [2584, 540, 1028], "type": "CWE-476", "message": "libyara/lexer.l in YARA 3.5.0 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a crafted rule that is mishandled in the yy_get_next_buffer function.", "other": {"cve": {"id": "CVE-2016-10210", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-03T05:59:00.287", "lastModified": "2017-05-02T01:59:00.283", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "libyara/lexer.l in YARA 3.5.0 allows remote attackers to cause a denial of service (NULL pointer dereference and application crash) via a crafted rule that is mishandled in the yy_get_next_buffer function."}, {"lang": "es", "value": "libyara/lexer.l en YARA 3.5.0 permite a atacantes remotos provocar una denegaci\u00f3n de servicio (Referencia al puntero NULL y ca\u00edda de la aplicaci\u00f3n) a trav\u00e9s de un regla manipulada que es no es manejada correctamente en la funci\u00f3n yy_get_next_buffer."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:virustotal:yara:3.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "0254F781-4B89-4557-8F17-1F228A3A8216"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/98077", "source": "cve@mitre.org"}, {"url": "https://github.com/VirusTotal/yara/commit/3119b232c9c453c98d8fa8b6ae4e37ba18117cd4", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/VirusTotal/yara/issues/576", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/VirusTotal/yara/commit/3119b232c9c453c98d8fa8b6ae4e37ba18117cd4"}}