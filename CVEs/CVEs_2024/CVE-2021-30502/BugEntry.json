{"buggy_code": ["{\n    \"name\": \"vscode-ghc-simple\",\n    \"displayName\": \"Simple GHC (Haskell) Integration\",\n    \"description\": \"Simple Haskell support using only GHCi\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/dramforever/vscode-ghc-simple\"\n    },\n    \"license\": \"ISC\",\n    \"version\": \"0.2.2\",\n    \"publisher\": \"dramforever\",\n    \"engines\": {\n        \"vscode\": \"^1.40.0\"\n    },\n    \"categories\": [\n        \"Programming Languages\"\n    ],\n    \"keywords\": [\n        \"haskell\"\n    ],\n    \"extensionDependencies\": [\n        \"justusadam.language-haskell\"\n    ],\n    \"icon\": \"images/vgs-icon.png\",\n    \"activationEvents\": [\n        \"onLanguage:haskell\",\n        \"onLanguage:literate haskell\"\n    ],\n    \"main\": \"./out/src/extension\",\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-ghc-simple.restart\",\n                \"title\": \"Restart GHCi sessions\",\n                \"category\": \"GHC\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run\",\n                \"title\": \"Run this block in GHCi\",\n                \"category\": \"GHC\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run-all\",\n                \"title\": \"Run all block from this file in GHCi\",\n                \"category\": \"GHC\"\n            }\n        ],\n        \"keybindings\": [\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run\",\n                \"key\": \"shift+enter\",\n                \"when\": \"editorLangId == haskell && editorTextFocus && config.ghcSimple.feature.inlineRepl\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run-all\",\n                \"key\": \"shift+alt+enter\",\n                \"when\": \"editorLangId == haskell && editorTextFocus && config.ghcSimple.feature.inlineRepl\"\n            }\n        ],\n        \"configuration\": {\n            \"type\": \"object\",\n            \"title\": \"GHC Simple configuration\",\n            \"properties\": {\n                \"ghcSimple.feature.diagnostics\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable diagnostics\"\n                },\n                \"ghcSimple.feature.rangeType\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable selection type tooltip\"\n                },\n                \"ghcSimple.feature.completion\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable completion\"\n                },\n                \"ghcSimple.feature.definition\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable go to definition\"\n                },\n                \"ghcSimple.feature.reference\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable show references\"\n                },\n                \"ghcSimple.feature.inlineRepl\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable inline GHCi REPL\"\n                },\n                \"ghcSimple.feature.hover\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable documentation on hover\"\n                },\n                \"ghcSimple.filterInfo\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Shorten `:info` output\"\n                },\n                \"ghcSimple.workspaceType\": {\n                    \"type\": \"string\",\n                    \"default\": \"detect\",\n                    \"markdownDescription\": \"Removed and has no effect. Please use an `hie.yaml` file. See readme for details.\",\n                    \"scope\": \"resource\",\n                    \"enum\": [\n                        \"detect\",\n                        \"stack\",\n                        \"cabal\",\n                        \"cabal new\",\n                        \"cabal v2\",\n                        \"bare-stack\",\n                        \"bare\"\n                    ]\n                },\n                \"ghcSimple.replCommand\": {\n                    \"type\": \"string\",\n                    \"default\": \"\",\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"The command used to start GHCi. `$stack_ide_targets` will be replaced by the output of `stack ide targets`. Leave blank for auto detection.\\n\\nWhen set, overrides the deprecated `ghcSimple.workspaceType`. If you set this, please also set `ghcSimple.replScope` to an appropriate value.\"\n                },\n                \"ghcSimple.replScope\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"workspace\",\n                        \"file\"\n                    ],\n                    \"default\": \"workspace\",\n                    \"markdownDescription\": \"Whether GHCi should be started for a project or individual files.\\n\\n**Note**: This option has no effect when `ghcSimple.replCommand` is set to empty string for auto detection.\"\n                },\n                \"ghcSimple.replLinger\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"markdownDescription\": \"Whether GHCi sessions for workspaces linger after closing all associated documents.\\n\\nWhen enabled, the GHCi startup time is saved but takes more memory when idle. When disabled, kills GHCi after all associated files are closed, saves memory but takes time to restart. GHCi for a single file never linger.\"\n                },\n                \"ghcSimple.startupCommands.all\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [\n                        \"System.IO.hSetBuffering System.IO.stderr System.IO.NoBuffering\",\n                        \"System.IO.hSetBuffering System.IO.stdout System.IO.NoBuffering\",\n                        \":set -fno-diagnostics-show-caret -fdiagnostics-color=never -ferror-spans\",\n                        \":set -fdefer-type-errors -fdefer-typed-holes -fdefer-out-of-scope-variables\",\n                        \":seti -fno-defer-type-errors -fno-defer-typed-holes -fno-defer-out-of-scope-variables\",\n                        \":set -haddock\",\n                        \":set -fno-hide-source-paths\",\n                        \":set -Wno-error=missing-home-modules\"\n                    ],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"GHCi commands on startup to use for all workspace types.\\n\\nThe default value is for use within vscode-ghc-simple and you can customize these if needed. Since these might be updated in the future, Custom commands should go to `ghcSimple.startupCommands.custom`\"\n                },\n                \"ghcSimple.startupCommands.bare\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [\n                        \":set -Wall\",\n                        \":seti -Wno-type-defaults\"\n                    ],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"GHCi commands on startup to use for 'bare' workspace types.\\n\\nThe default value is for use within vscode-ghc-simple and you can customize these if needed. Since these might be updated in the future, Custom commands should go to `ghcSimple.startupCommands.custom`\"\n                },\n                \"ghcSimple.startupCommands.custom\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Custom GHCi commands on startup\"\n                },\n                \"ghcSimple.maxCompletions\": {\n                    \"type\": \"number\",\n                    \"default\": 50,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Maximum number of completion items to show.\"\n                },\n                \"ghcSimple.inlineRepl.codeLens\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Show code lens for GHCi REPL blocks\"\n                },\n                \"ghcSimple.inlineRepl.loadType\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"byte-code\",\n                        \"object-code\"\n                    ],\n                    \"default\": \"byte-code\",\n                    \"markdownEnumDescriptions\": [\n                        \"Use `-fbyte-code` for GHCi REPL blocks\",\n                        \"Use `-fobject-code` for GHCi REPL blocks\"\n                    ],\n                    \"markdownDescription\": \"Whether to load modules with `-fbyte-code` or `-fobject-code` when using the REPL.\\n\\nThe former is the default as it loads faster. The latter runs faster and can use FFI. Write `:set -fbyte-code` or `:set -fobject-code` as first line of GHCi REPL block to override.\"\n                },\n                \"ghcSimple.flag.noNotifySlowRangeType\": {\n                    \"type\": \"boolean\",\n                    \"default\": false,\n                    \"scope\": \"resource\",\n                    \"description\": \"Do not show message for slow range type\"\n                },\n                \"ghcSimple.statusBar.prefix\": {\n                    \"type\": \"string\",\n                    \"default\": \"GHC\",\n                    \"scope\": \"application\",\n                    \"markdownDescription\": \"Prefix of the status bar item of this extension\"\n                }\n            }\n        }\n    },\n    \"scripts\": {\n        \"vscode:prepublish\": \"tsc -p ./\",\n        \"compile\": \"tsc -watch -p ./\"\n    },\n    \"devDependencies\": {\n        \"@types/js-yaml\": \"^4.0.0\",\n        \"@types/node\": \"^14.14.21\",\n        \"@types/vscode\": \"^1.40.0\",\n        \"typescript\": \"^4.1.3\",\n        \"vsce\": \"^1.83.0\"\n    },\n    \"dependencies\": {\n        \"js-yaml\": \"^4.0.0\"\n    }\n}\n", "import * as child_process from 'child_process';\nimport * as vscode from 'vscode';\nimport { getStackIdeTargets } from '../utils';\nimport * as hie from './hie-bios';\n\n/**\n * The key of a configuration, if applicable. Designed to be deterministically\n * serializable (see `configKeyToString`).\n */\nexport interface ConfigKey {\n    type: string;\n    [k: string]: string;\n}\n\n/**\n * Deterministically serialize a ConfigKey to a string, for use in equality\n * comparison and tables. The format is compatible with JSON.\n *\n * @param key Key object to serialize\n */\nexport function configKeyToString(key: ConfigKey): string {\n    const keys = Object.keys(key).sort();\n    const fmt = JSON.stringify.bind(JSON);\n    const gen = (k: string) => `${fmt(k)}:${fmt(key[k])}`;\n    return '{' + keys.map(gen).join(',') + '}';\n}\n\nexport interface Configuration {\n    /**\n     * Identifies whether the underlying GHCi process is sharable. If two\n     * configurations have a sharing key and the key is the same, they can share\n     * a GHCi.\n     */\n    key: null | ConfigKey ;\n\n    /**\n     * The command to run, in the form of shell command string or argument list\n     */\n    command: string | string[];\n\n    /**\n     * The directory to run command in\n     */\n    cwd?: string,\n\n    /**\n     * When files listed here change, the configuration is invalidated\n     */\n    dependencies: vscode.GlobPattern[];\n}\n\nconst stackOptions = [\"--no-terminal\", \"--color\", \"never\"]\n\n/** Detect if stack is available */\nfunction hasStack(): Promise<boolean> {\n    const opts = { timeout: 5000 };\n    return new Promise<boolean>((resolve, reject) => {\n        child_process.exec(\n            'stack --help',\n            opts,\n            (err, stdout, stderr) => {\n                if (err) resolve(false);\n                else resolve(true);\n            }\n        )\n    });\n}\n\n/**\n * Configuration for a single file\n *\n * @param cwd The working directory associated with the file\n */\nasync function singleConfig(cwd?: string): Promise<Configuration> {\n    if (await hasStack()) {\n        return {\n            key: null,\n            command: 'stack exec ghci',\n            cwd,\n            dependencies: []\n        };\n    } else {\n        return {\n            key: null,\n            command: 'ghci',\n            cwd,\n            dependencies: []\n        }\n    }\n}\n\n/** Configuration for a custom command */\nasync function customConfig(\n    replScope: 'workspace' | 'file',\n    replCommand: string,\n    workspaceUri: vscode.Uri\n): Promise<Configuration> {\n    if (replCommand.indexOf('$stack_ide_targets') !== -1) {\n        const sit = await getStackIdeTargets(workspaceUri);\n        replCommand.replace(/\\$stack_ide_targets/g, sit.join(' '));\n    }\n\n    return {\n        key: replScope === 'file'\n            ? null\n            : { type: 'custom-workspace', uri: workspaceUri.toString() },\n        cwd: workspaceUri.fsPath,\n        command: replCommand,\n        dependencies: []\n    };\n}\n\nfunction pathIsPrefix(a: string, b: string): boolean {\n    const aLevels = a.split('/');\n    const bLevels = b.split('/');\n    if (aLevels.length > bLevels.length) return false;\n\n    for (let i = 0; i < aLevels.length; i ++) {\n        if (aLevels[i] != bLevels[i]) return false;\n    }\n\n    return true;\n}\n\nasync function hieBiosConfig(\n    workspace: vscode.WorkspaceFolder,\n    docUri: vscode.Uri\n): Promise<Configuration | null> {\n    const hieConfig = await hie.getCradleConfig(workspace.uri);\n\n    const findMulti = <A>(multi: hie.Multi<A>): null | (A & hie.HasPath) => {\n        let found: null | (A & hie.HasPath) = null;\n        for (const cur of multi) {\n            const pathUri = vscode.Uri.joinPath(workspace.uri, cur.path);\n            if (! pathIsPrefix(pathUri.fsPath, docUri.fsPath)) {\n                continue;\n            }\n\n            if (found === null || pathIsPrefix(found.path, pathUri.fsPath)) {\n                found = cur;\n            }\n        }\n\n        return found;\n    }\n\n    const worker = (config: hie.HieConfig): Configuration => {\n\n        const makeCabalConfig = (component: hie.CabalComponent): Configuration => ({\n            key: {\n                type: 'hie-bios-cabal',\n                uri: workspace.uri.toString(),\n                component: component.component\n            },\n            cwd: workspace.uri.fsPath,\n            command: [ 'cabal', 'repl', component.component ],\n            dependencies:  [\n                ... config.dependencies || [],\n                new vscode.RelativePattern(workspace, 'hie.yaml'),\n                new vscode.RelativePattern(workspace, '*.cabal')\n            ]\n        });\n\n        const makeCabalNullConfig = (): Configuration => ({\n            key: {\n                type: 'hie-bios-cabal-null',\n                uri: workspace.uri.toString()\n            },\n            cwd: workspace.uri.fsPath,\n            command: [ 'cabal', 'repl' ],\n            dependencies:  [\n                ... config.dependencies || [],\n                new vscode.RelativePattern(workspace, 'stack.yaml'),\n                new vscode.RelativePattern(workspace, 'hie.yaml'),\n                new vscode.RelativePattern(workspace, '*.cabal')\n            ]\n        });\n\n        const makeStackConfig = (\n            component: hie.StackComponent,\n            defaultStackYaml: string | null\n        ): Configuration => {\n            const stackYaml = component.stackYaml || defaultStackYaml;\n            const stackYamlOpts = stackYaml ? [ '--stack-yaml', stackYaml ] : [];\n            const componentOpts = component.component ? [ component.component ] : [];\n\n            return {\n                key: {\n                    type: 'hie-bios-stack',\n                    uri: workspace.uri.toString(),\n                    component: component.component\n                },\n                cwd: workspace.uri.fsPath,\n                command: [ 'stack', ...stackOptions, 'repl', '--no-load', ... stackYamlOpts, ... componentOpts ],\n                dependencies:  [\n                    ... config.dependencies || [],\n                    stackYaml || new vscode.RelativePattern(workspace, 'stack.yaml'),\n                    new vscode.RelativePattern(workspace, 'hie.yaml'),\n                    new vscode.RelativePattern(workspace, '*.cabal'),\n                    new vscode.RelativePattern(workspace, 'package.yaml')\n                ]\n            }\n        };\n\n        const makeStackNullConfig = (): Configuration => {\n            return {\n                key: {\n                    type: 'hie-bios-stack-null',\n                    uri: workspace.uri.toString()\n                },\n                cwd: workspace.uri.fsPath,\n                command: [ 'stack', ...stackOptions, 'repl', '--no-load' ],\n                dependencies:  [\n                    ... config.dependencies || [],\n                    new vscode.RelativePattern(workspace, 'hie.yaml'),\n                    new vscode.RelativePattern(workspace, '*.cabal'),\n                    new vscode.RelativePattern(workspace, 'package.yaml')\n                ]\n            }\n        };\n\n        const cradle = config.cradle;\n\n        if ('cabal' in cradle) {\n            const go = (components: hie.Multi<hie.CabalComponent>) => {\n                const res = findMulti(components);\n                if (res === null) {\n                    return null;\n                } else {\n                    return makeCabalConfig(res);\n                }\n            };\n\n            if (cradle.cabal === null) {\n                return makeCabalNullConfig();\n            } else if ('components' in cradle.cabal) {\n                return go(cradle.cabal.components);\n            } else if (Array.isArray(cradle.cabal)) {\n                return go(cradle.cabal);\n            } else {\n                return makeCabalConfig(cradle.cabal);\n            }\n        } else if ('stack' in cradle) {\n            const defaultStackYaml =\n                (cradle.stack && 'stackYaml' in cradle.stack) ? cradle.stack.stackYaml : null;\n\n            const go = (components: hie.Multi<hie.StackComponent>) => {\n                const res = findMulti(components);\n                if (res === null) {\n                    return null;\n                } else {\n                    return makeStackConfig(res, defaultStackYaml);\n                }\n            };\n\n            if (cradle.stack === null) {\n                return makeStackNullConfig();\n            } else if ('components' in cradle.stack) {\n                return go(cradle.stack.components);\n            } else if (Array.isArray(cradle.stack)) {\n                return go(cradle.stack);\n            } else {\n                return makeStackConfig(cradle.stack, defaultStackYaml);\n            }\n        } else if ('multi' in cradle) {\n            const res = findMulti(cradle.multi);\n            return worker(res.config);\n        } else if ('none' in cradle) {\n            return null;\n        }\n    };\n\n    return worker(hieConfig);\n}\n\n/** Detect the configuration of a `TextDocument` */\nexport async function fileConfig(docUri: vscode.Uri): Promise<Configuration | null> {\n    const workspace = vscode.workspace.getWorkspaceFolder(docUri);\n\n    if (! workspace) return singleConfig();\n\n    const config =\n        vscode.workspace.getConfiguration('ghcSimple', workspace.uri);\n\n    const replCommand: string = config.replCommand;\n    const replScope: 'workspace' | 'file' = config.replScope;\n\n    if (replCommand !== '') {\n        // Custom REPL command\n        return customConfig(replScope, replCommand, workspace.uri);\n    }\n\n    const find = async (pattern: string) =>\n        await vscode.workspace.findFiles(\n            new vscode.RelativePattern(workspace, pattern));\n\n    if ((await find('hie.yaml')).length > 0) {\n        // hie-bios cradle\n        return hieBiosConfig(workspace, docUri);\n    }\n\n    const makeCabalConfig = (): Configuration => ({\n        key: {\n            type: 'detect-cabal',\n            uri: workspace.uri.toString(),\n        },\n        cwd: workspace.uri.fsPath,\n        command: [ 'cabal', 'v2-repl', 'all' ],\n        dependencies:  [\n            new vscode.RelativePattern(workspace, '*.cabal'),\n            new vscode.RelativePattern(workspace, 'package.yaml'),\n            new vscode.RelativePattern(workspace, 'cabal.project'),\n            new vscode.RelativePattern(workspace, 'cabal.project.local')\n        ]\n    });\n\n    const makeStackConfig = (targets: string[]): Configuration => ({\n        key: {\n            type: 'detect-stack',\n            uri: workspace.uri.toString(),\n        },\n        cwd: workspace.uri.fsPath,\n        command: [ 'stack', ...stackOptions, 'repl', '--no-load', ... targets],\n        dependencies:  [\n            new vscode.RelativePattern(workspace, '*.cabal'),\n            new vscode.RelativePattern(workspace, 'package.yaml'),\n            new vscode.RelativePattern(workspace, 'stack.yaml')\n        ]\n    });\n\n    if ((await find('dist-newstyle')).length > 0) {\n        return makeCabalConfig();\n    }\n\n    if ((await find('.stack-work')).length > 0\n        || (await find('stack.yaml')).length > 0) {\n        try {\n            const targets = await getStackIdeTargets(workspace.uri);\n            return makeStackConfig(targets);\n        } catch (e) {\n            console.error('Error detecting stack configuration:', e);\n            console.log('Trying others...');\n        }\n    }\n\n    if ((await find('*.cabal')).length > 0\n        || (await find('cabal.project')).length > 0\n        || (await find('cabal.project.local')).length > 0) {\n        return makeCabalConfig();\n    }\n\n    return singleConfig();\n}\n"], "fixing_code": ["{\n    \"name\": \"vscode-ghc-simple\",\n    \"displayName\": \"Simple GHC (Haskell) Integration\",\n    \"description\": \"Simple Haskell support using only GHCi\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/dramforever/vscode-ghc-simple\"\n    },\n    \"license\": \"ISC\",\n    \"version\": \"0.2.2\",\n    \"publisher\": \"dramforever\",\n    \"engines\": {\n        \"vscode\": \"^1.40.0\"\n    },\n    \"categories\": [\n        \"Programming Languages\"\n    ],\n    \"keywords\": [\n        \"haskell\"\n    ],\n    \"extensionDependencies\": [\n        \"justusadam.language-haskell\"\n    ],\n    \"icon\": \"images/vgs-icon.png\",\n    \"activationEvents\": [\n        \"onLanguage:haskell\",\n        \"onLanguage:literate haskell\"\n    ],\n    \"main\": \"./out/src/extension\",\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-ghc-simple.restart\",\n                \"title\": \"Restart GHCi sessions\",\n                \"category\": \"GHC\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run\",\n                \"title\": \"Run this block in GHCi\",\n                \"category\": \"GHC\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run-all\",\n                \"title\": \"Run all block from this file in GHCi\",\n                \"category\": \"GHC\"\n            }\n        ],\n        \"keybindings\": [\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run\",\n                \"key\": \"shift+enter\",\n                \"when\": \"editorLangId == haskell && editorTextFocus && config.ghcSimple.feature.inlineRepl\"\n            },\n            {\n                \"command\": \"vscode-ghc-simple.inline-repl-run-all\",\n                \"key\": \"shift+alt+enter\",\n                \"when\": \"editorLangId == haskell && editorTextFocus && config.ghcSimple.feature.inlineRepl\"\n            }\n        ],\n        \"configuration\": {\n            \"type\": \"object\",\n            \"title\": \"GHC Simple configuration\",\n            \"properties\": {\n                \"ghcSimple.feature.diagnostics\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable diagnostics\"\n                },\n                \"ghcSimple.feature.rangeType\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable selection type tooltip\"\n                },\n                \"ghcSimple.feature.completion\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable completion\"\n                },\n                \"ghcSimple.feature.definition\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable go to definition\"\n                },\n                \"ghcSimple.feature.reference\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable show references\"\n                },\n                \"ghcSimple.feature.inlineRepl\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable inline GHCi REPL\"\n                },\n                \"ghcSimple.feature.hover\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"description\": \"Enable documentation on hover\"\n                },\n                \"ghcSimple.filterInfo\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Shorten `:info` output\"\n                },\n                \"ghcSimple.workspaceType\": {\n                    \"type\": \"string\",\n                    \"default\": \"detect\",\n                    \"markdownDescription\": \"Removed and has no effect. Please use an `hie.yaml` file. See readme for details.\",\n                    \"scope\": \"resource\",\n                    \"enum\": [\n                        \"detect\",\n                        \"stack\",\n                        \"cabal\",\n                        \"cabal new\",\n                        \"cabal v2\",\n                        \"bare-stack\",\n                        \"bare\"\n                    ]\n                },\n                \"ghcSimple.replCommand\": {\n                    \"type\": \"string\",\n                    \"default\": \"\",\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"The command used to start GHCi. `$stack_ide_targets` will be replaced by the output of `stack ide targets`. Leave blank for auto detection.\\n\\nWhen set, overrides the deprecated `ghcSimple.workspaceType`. If you set this, please also set `ghcSimple.replScope` to an appropriate value.\"\n                },\n                \"ghcSimple.replScope\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"workspace\",\n                        \"file\"\n                    ],\n                    \"default\": \"workspace\",\n                    \"markdownDescription\": \"Whether GHCi should be started for a project or individual files.\\n\\n**Note**: This option has no effect when `ghcSimple.replCommand` is set to empty string for auto detection.\"\n                },\n                \"ghcSimple.replLinger\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"markdownDescription\": \"Whether GHCi sessions for workspaces linger after closing all associated documents.\\n\\nWhen enabled, the GHCi startup time is saved but takes more memory when idle. When disabled, kills GHCi after all associated files are closed, saves memory but takes time to restart. GHCi for a single file never linger.\"\n                },\n                \"ghcSimple.trustedReplCommandConfigs\": {\n                    \"type\": \"object\",\n                    \"default\": {},\n                    \"scope\": \"application\",\n                    \"markdownDescription\": \"Using a `#ghcSimple.replCommand#` configuration from an untrusted workspace can pose a security risk. Whenever such a configuration occurs, you will be notified and if you choose to trust it, it will be recorded here.\"\n                },\n                \"ghcSimple.startupCommands.all\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [\n                        \"System.IO.hSetBuffering System.IO.stderr System.IO.NoBuffering\",\n                        \"System.IO.hSetBuffering System.IO.stdout System.IO.NoBuffering\",\n                        \":set -fno-diagnostics-show-caret -fdiagnostics-color=never -ferror-spans\",\n                        \":set -fdefer-type-errors -fdefer-typed-holes -fdefer-out-of-scope-variables\",\n                        \":seti -fno-defer-type-errors -fno-defer-typed-holes -fno-defer-out-of-scope-variables\",\n                        \":set -haddock\",\n                        \":set -fno-hide-source-paths\",\n                        \":set -Wno-error=missing-home-modules\"\n                    ],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"GHCi commands on startup to use for all workspace types.\\n\\nThe default value is for use within vscode-ghc-simple and you can customize these if needed. Since these might be updated in the future, Custom commands should go to `ghcSimple.startupCommands.custom`\"\n                },\n                \"ghcSimple.startupCommands.bare\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [\n                        \":set -Wall\",\n                        \":seti -Wno-type-defaults\"\n                    ],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"GHCi commands on startup to use for 'bare' workspace types.\\n\\nThe default value is for use within vscode-ghc-simple and you can customize these if needed. Since these might be updated in the future, Custom commands should go to `ghcSimple.startupCommands.custom`\"\n                },\n                \"ghcSimple.startupCommands.custom\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"default\": [],\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Custom GHCi commands on startup\"\n                },\n                \"ghcSimple.maxCompletions\": {\n                    \"type\": \"number\",\n                    \"default\": 50,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Maximum number of completion items to show.\"\n                },\n                \"ghcSimple.inlineRepl.codeLens\": {\n                    \"type\": \"boolean\",\n                    \"default\": true,\n                    \"scope\": \"resource\",\n                    \"markdownDescription\": \"Show code lens for GHCi REPL blocks\"\n                },\n                \"ghcSimple.inlineRepl.loadType\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"byte-code\",\n                        \"object-code\"\n                    ],\n                    \"default\": \"byte-code\",\n                    \"markdownEnumDescriptions\": [\n                        \"Use `-fbyte-code` for GHCi REPL blocks\",\n                        \"Use `-fobject-code` for GHCi REPL blocks\"\n                    ],\n                    \"markdownDescription\": \"Whether to load modules with `-fbyte-code` or `-fobject-code` when using the REPL.\\n\\nThe former is the default as it loads faster. The latter runs faster and can use FFI. Write `:set -fbyte-code` or `:set -fobject-code` as first line of GHCi REPL block to override.\"\n                },\n                \"ghcSimple.flag.noNotifySlowRangeType\": {\n                    \"type\": \"boolean\",\n                    \"default\": false,\n                    \"scope\": \"resource\",\n                    \"description\": \"Do not show message for slow range type\"\n                },\n                \"ghcSimple.statusBar.prefix\": {\n                    \"type\": \"string\",\n                    \"default\": \"GHC\",\n                    \"scope\": \"application\",\n                    \"markdownDescription\": \"Prefix of the status bar item of this extension\"\n                }\n            }\n        }\n    },\n    \"scripts\": {\n        \"vscode:prepublish\": \"tsc -p ./\",\n        \"compile\": \"tsc -watch -p ./\"\n    },\n    \"devDependencies\": {\n        \"@types/js-yaml\": \"^4.0.0\",\n        \"@types/node\": \"^14.14.21\",\n        \"@types/vscode\": \"^1.40.0\",\n        \"typescript\": \"^4.1.3\",\n        \"vsce\": \"^1.83.0\"\n    },\n    \"dependencies\": {\n        \"js-yaml\": \"^4.0.0\"\n    }\n}\n", "import * as child_process from 'child_process';\nimport * as vscode from 'vscode';\nimport { getStackIdeTargets } from '../utils';\nimport * as hie from './hie-bios';\n\n/**\n * The key of a configuration, if applicable. Designed to be deterministically\n * serializable (see `configKeyToString`).\n */\nexport interface ConfigKey {\n    type: string;\n    [k: string]: string;\n}\n\n/**\n * Deterministically serialize a ConfigKey to a string, for use in equality\n * comparison and tables. The format is compatible with JSON.\n *\n * @param key Key object to serialize\n */\nexport function configKeyToString(key: ConfigKey): string {\n    const keys = Object.keys(key).sort();\n    const fmt = JSON.stringify.bind(JSON);\n    const gen = (k: string) => `${fmt(k)}:${fmt(key[k])}`;\n    return '{' + keys.map(gen).join(',') + '}';\n}\n\nexport interface Configuration {\n    /**\n     * Identifies whether the underlying GHCi process is sharable. If two\n     * configurations have a sharing key and the key is the same, they can share\n     * a GHCi.\n     */\n    key: null | ConfigKey ;\n\n    /**\n     * The command to run, in the form of shell command string or argument list\n     */\n    command: string | string[];\n\n    /**\n     * The directory to run command in\n     */\n    cwd?: string,\n\n    /**\n     * When files listed here change, the configuration is invalidated\n     */\n    dependencies: vscode.GlobPattern[];\n}\n\nconst stackOptions = [\"--no-terminal\", \"--color\", \"never\"]\n\n/** Detect if stack is available */\nfunction hasStack(): Promise<boolean> {\n    const opts = { timeout: 5000 };\n    return new Promise<boolean>((resolve, reject) => {\n        child_process.exec(\n            'stack --help',\n            opts,\n            (err, stdout, stderr) => {\n                if (err) resolve(false);\n                else resolve(true);\n            }\n        )\n    });\n}\n\n/**\n * Configuration for a single file\n *\n * @param cwd The working directory associated with the file\n */\nasync function singleConfig(cwd?: string): Promise<Configuration> {\n    if (await hasStack()) {\n        return {\n            key: null,\n            command: 'stack exec ghci',\n            cwd,\n            dependencies: []\n        };\n    } else {\n        return {\n            key: null,\n            command: 'ghci',\n            cwd,\n            dependencies: []\n        }\n    }\n}\n\nconst alreadyShown = new Set();\n\nfunction handleReplCommandTrust(\n    workspaceUri: vscode.Uri,\n    replCommand: string\n): boolean {\n    if (workspaceUri.scheme !== 'file') return false;\n    const config = vscode.workspace.getConfiguration('ghcSimple', null);\n    const insp = config.inspect('trustedReplCommandConfigs').globalValue ?? {};\n    if (insp[workspaceUri.fsPath] === replCommand) {\n        return true;\n    } else {\n        if (! alreadyShown.has(workspaceUri.fsPath)) {\n            alreadyShown.add(workspaceUri.fsPath);\n            vscode.window.showWarningMessage(\n                `This workspace ${workspaceUri.fsPath} wants to run \"${replCommand}\" to start GHCi.\\n\\nAllow if you understand this and trust it.`,\n                'Allow', 'Ignore'\n            ).then((value) => {\n                alreadyShown.delete(workspaceUri.fsPath);\n                if (value == 'Allow') {\n                    const trusted = config.get('trustedReplCommandConfigs');\n                    trusted[workspaceUri.fsPath] = replCommand;\n                    config.update('trustedReplCommandConfigs', trusted, vscode.ConfigurationTarget.Global);\n                }\n            })\n        }\n        return false;\n    }\n}\n\n/** Configuration for a custom command */\nasync function customConfig(\n    replScope: 'workspace' | 'file',\n    replCommand: string,\n    workspaceUri: vscode.Uri\n): Promise<Configuration | null> {\n    if (! handleReplCommandTrust(workspaceUri, replCommand))\n        return null;\n\n    if (replCommand.indexOf('$stack_ide_targets') !== -1) {\n        const sit = await getStackIdeTargets(workspaceUri);\n        replCommand.replace(/\\$stack_ide_targets/g, sit.join(' '));\n    }\n\n    return {\n        key: replScope === 'file'\n            ? null\n            : { type: 'custom-workspace', uri: workspaceUri.toString() },\n        cwd: workspaceUri.fsPath,\n        command: replCommand,\n        dependencies: []\n    };\n}\n\nfunction pathIsPrefix(a: string, b: string): boolean {\n    const aLevels = a.split('/');\n    const bLevels = b.split('/');\n    if (aLevels.length > bLevels.length) return false;\n\n    for (let i = 0; i < aLevels.length; i ++) {\n        if (aLevels[i] != bLevels[i]) return false;\n    }\n\n    return true;\n}\n\nasync function hieBiosConfig(\n    workspace: vscode.WorkspaceFolder,\n    docUri: vscode.Uri\n): Promise<Configuration | null> {\n    const hieConfig = await hie.getCradleConfig(workspace.uri);\n\n    const findMulti = <A>(multi: hie.Multi<A>): null | (A & hie.HasPath) => {\n        let found: null | (A & hie.HasPath) = null;\n        for (const cur of multi) {\n            const pathUri = vscode.Uri.joinPath(workspace.uri, cur.path);\n            if (! pathIsPrefix(pathUri.fsPath, docUri.fsPath)) {\n                continue;\n            }\n\n            if (found === null || pathIsPrefix(found.path, pathUri.fsPath)) {\n                found = cur;\n            }\n        }\n\n        return found;\n    }\n\n    const worker = (config: hie.HieConfig): Configuration => {\n\n        const makeCabalConfig = (component: hie.CabalComponent): Configuration => ({\n            key: {\n                type: 'hie-bios-cabal',\n                uri: workspace.uri.toString(),\n                component: component.component\n            },\n            cwd: workspace.uri.fsPath,\n            command: [ 'cabal', 'repl', component.component ],\n            dependencies:  [\n                ... config.dependencies || [],\n                new vscode.RelativePattern(workspace, 'hie.yaml'),\n                new vscode.RelativePattern(workspace, '*.cabal')\n            ]\n        });\n\n        const makeCabalNullConfig = (): Configuration => ({\n            key: {\n                type: 'hie-bios-cabal-null',\n                uri: workspace.uri.toString()\n            },\n            cwd: workspace.uri.fsPath,\n            command: [ 'cabal', 'repl' ],\n            dependencies:  [\n                ... config.dependencies || [],\n                new vscode.RelativePattern(workspace, 'stack.yaml'),\n                new vscode.RelativePattern(workspace, 'hie.yaml'),\n                new vscode.RelativePattern(workspace, '*.cabal')\n            ]\n        });\n\n        const makeStackConfig = (\n            component: hie.StackComponent,\n            defaultStackYaml: string | null\n        ): Configuration => {\n            const stackYaml = component.stackYaml || defaultStackYaml;\n            const stackYamlOpts = stackYaml ? [ '--stack-yaml', stackYaml ] : [];\n            const componentOpts = component.component ? [ component.component ] : [];\n\n            return {\n                key: {\n                    type: 'hie-bios-stack',\n                    uri: workspace.uri.toString(),\n                    component: component.component\n                },\n                cwd: workspace.uri.fsPath,\n                command: [ 'stack', ...stackOptions, 'repl', '--no-load', ... stackYamlOpts, ... componentOpts ],\n                dependencies:  [\n                    ... config.dependencies || [],\n                    stackYaml || new vscode.RelativePattern(workspace, 'stack.yaml'),\n                    new vscode.RelativePattern(workspace, 'hie.yaml'),\n                    new vscode.RelativePattern(workspace, '*.cabal'),\n                    new vscode.RelativePattern(workspace, 'package.yaml')\n                ]\n            }\n        };\n\n        const makeStackNullConfig = (): Configuration => {\n            return {\n                key: {\n                    type: 'hie-bios-stack-null',\n                    uri: workspace.uri.toString()\n                },\n                cwd: workspace.uri.fsPath,\n                command: [ 'stack', ...stackOptions, 'repl', '--no-load' ],\n                dependencies:  [\n                    ... config.dependencies || [],\n                    new vscode.RelativePattern(workspace, 'hie.yaml'),\n                    new vscode.RelativePattern(workspace, '*.cabal'),\n                    new vscode.RelativePattern(workspace, 'package.yaml')\n                ]\n            }\n        };\n\n        const cradle = config.cradle;\n\n        if ('cabal' in cradle) {\n            const go = (components: hie.Multi<hie.CabalComponent>) => {\n                const res = findMulti(components);\n                if (res === null) {\n                    return null;\n                } else {\n                    return makeCabalConfig(res);\n                }\n            };\n\n            if (cradle.cabal === null) {\n                return makeCabalNullConfig();\n            } else if ('components' in cradle.cabal) {\n                return go(cradle.cabal.components);\n            } else if (Array.isArray(cradle.cabal)) {\n                return go(cradle.cabal);\n            } else {\n                return makeCabalConfig(cradle.cabal);\n            }\n        } else if ('stack' in cradle) {\n            const defaultStackYaml =\n                (cradle.stack && 'stackYaml' in cradle.stack) ? cradle.stack.stackYaml : null;\n\n            const go = (components: hie.Multi<hie.StackComponent>) => {\n                const res = findMulti(components);\n                if (res === null) {\n                    return null;\n                } else {\n                    return makeStackConfig(res, defaultStackYaml);\n                }\n            };\n\n            if (cradle.stack === null) {\n                return makeStackNullConfig();\n            } else if ('components' in cradle.stack) {\n                return go(cradle.stack.components);\n            } else if (Array.isArray(cradle.stack)) {\n                return go(cradle.stack);\n            } else {\n                return makeStackConfig(cradle.stack, defaultStackYaml);\n            }\n        } else if ('multi' in cradle) {\n            const res = findMulti(cradle.multi);\n            return worker(res.config);\n        } else if ('none' in cradle) {\n            return null;\n        }\n    };\n\n    return worker(hieConfig);\n}\n\n/** Detect the configuration of a `TextDocument` */\nexport async function fileConfig(docUri: vscode.Uri): Promise<Configuration | null> {\n    const workspace = vscode.workspace.getWorkspaceFolder(docUri);\n\n    if (! workspace) return singleConfig();\n\n    const config =\n        vscode.workspace.getConfiguration('ghcSimple', workspace.uri);\n\n    const replCommand: string = config.replCommand;\n    const replScope: 'workspace' | 'file' = config.replScope;\n\n    if (replCommand !== '') {\n        // Custom REPL command\n        return customConfig(replScope, replCommand, workspace.uri);\n    }\n\n    const find = async (pattern: string) =>\n        await vscode.workspace.findFiles(\n            new vscode.RelativePattern(workspace, pattern));\n\n    if ((await find('hie.yaml')).length > 0) {\n        // hie-bios cradle\n        return hieBiosConfig(workspace, docUri);\n    }\n\n    const makeCabalConfig = (): Configuration => ({\n        key: {\n            type: 'detect-cabal',\n            uri: workspace.uri.toString(),\n        },\n        cwd: workspace.uri.fsPath,\n        command: [ 'cabal', 'v2-repl', 'all' ],\n        dependencies:  [\n            new vscode.RelativePattern(workspace, '*.cabal'),\n            new vscode.RelativePattern(workspace, 'package.yaml'),\n            new vscode.RelativePattern(workspace, 'cabal.project'),\n            new vscode.RelativePattern(workspace, 'cabal.project.local')\n        ]\n    });\n\n    const makeStackConfig = (targets: string[]): Configuration => ({\n        key: {\n            type: 'detect-stack',\n            uri: workspace.uri.toString(),\n        },\n        cwd: workspace.uri.fsPath,\n        command: [ 'stack', ...stackOptions, 'repl', '--no-load', ... targets],\n        dependencies:  [\n            new vscode.RelativePattern(workspace, '*.cabal'),\n            new vscode.RelativePattern(workspace, 'package.yaml'),\n            new vscode.RelativePattern(workspace, 'stack.yaml')\n        ]\n    });\n\n    if ((await find('dist-newstyle')).length > 0) {\n        return makeCabalConfig();\n    }\n\n    if ((await find('.stack-work')).length > 0\n        || (await find('stack.yaml')).length > 0) {\n        try {\n            const targets = await getStackIdeTargets(workspace.uri);\n            return makeStackConfig(targets);\n        } catch (e) {\n            console.error('Error detecting stack configuration:', e);\n            console.log('Trying others...');\n        }\n    }\n\n    if ((await find('*.cabal')).length > 0\n        || (await find('cabal.project')).length > 0\n        || (await find('cabal.project.local')).length > 0) {\n        return makeCabalConfig();\n    }\n\n    return singleConfig();\n}\n"], "filenames": ["package.json", "src/bios/config.ts"], "buggy_code_start_loc": [145, 91], "buggy_code_end_loc": [145, 98], "fixing_code_start_loc": [146, 92], "fixing_code_end_loc": [152, 131], "type": "NVD-CWE-noinfo", "message": "The unofficial vscode-ghc-simple (aka Simple Glasgow Haskell Compiler) extension before 0.2.3 for Visual Studio Code allows remote code execution via a crafted workspace configuration with replCommand.", "other": {"cve": {"id": "CVE-2021-30502", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-25T03:15:07.203", "lastModified": "2021-05-07T16:24:40.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The unofficial vscode-ghc-simple (aka Simple Glasgow Haskell Compiler) extension before 0.2.3 for Visual Studio Code allows remote code execution via a crafted workspace configuration with replCommand."}, {"lang": "es", "value": "La extensi\u00f3n no oficial vscode-ghc-simple (tambi\u00e9n se conoce como Simple Glasgow Haskell Compiler) versiones anteriores a 0.2.3 para Visual Studio Code, permite una ejecuci\u00f3n de c\u00f3digo remota por medio de una configuraci\u00f3n de workspace dise\u00f1ada con replCommand"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:simple_glasgow_haskell_compiler_project:simple_glasgow_haskell_compiler:*:*:*:*:*:visual_studio_code:*:*", "versionEndExcluding": "0.2.3", "matchCriteriaId": "9D3FBB49-FB1A-4DCA-89BE-B6766DC21DD4"}]}]}], "references": [{"url": "https://github.com/dramforever/vscode-ghc-simple/blob/master/CHANGELOG.md#v023", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/dramforever/vscode-ghc-simple/commit/bc7f6f0b857dade46ea51496d8bd1a4edef39b46", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dramforever/vscode-ghc-simple/releases", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuln.ryotak.me/advisories/38", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dramforever/vscode-ghc-simple/commit/bc7f6f0b857dade46ea51496d8bd1a4edef39b46"}}