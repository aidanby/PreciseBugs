{"buggy_code": ["<?php\ndefine('AUDIT_TABLE', TABLE_PREFIX . 'audit');\n\nclass AuditEntry extends VerySimpleModel {\n    static $meta = array(\n        'table' => AUDIT_TABLE,\n        'pk' => array('id'),\n        'ordering' => array('-timestamp'),\n        'select_related' => array('staff', 'user'),\n        'joins' => array(\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n                'null' => true,\n            ),\n            'user' => array(\n                'constraint' => array('user_id' => 'User.id'),\n                'null' => true,\n            ),\n        ),\n    );\n\n    //return an array with the object model, getName function, and url prefix\n    static $types = array(\n        'S' => array('Staff',               'getName',       'staff.php'),\n        'B' => array('Canned',              'getTitle',      'canned.php'),\n        'C' => array('Category',            'getName',       'categories.php'),\n        'X' => array('ConfigItem',          'none',          'none'),\n        'D' => array('Dept',                'getName',       'departments.php'),\n        'M' => array('Email',               'getName',       'emails.php'),\n        'I' => array('EmailTemplateGroup',  'getName',       'templates.php'),\n        'Q' => array('FAQ',                 'getQuestion',   'faq.php'),\n        'N' => array('DynamicForm',         'getTitle',      'forms.php'),\n        'H' => array('Topic',               'getName',       'helptopics.php'),\n        'L' => array('DynamicList',         'getName',       'lists.php'),\n        'O' => array('Organization',        'getName',       'orgs.php'),\n        'G' => array('Page',                'getName',       'pages.php'),\n        'R' => array('Role',                'getName',       'roles.php'),\n        'V' => array('SLA',                 'getName',       'slas.php'),\n        'A' => array('Task',                'getNumber',     'tasks.php'),\n        'E' => array('Team',                'getName',       'teams.php'),\n        'T' => array('Ticket',              'getNumber',     'tickets.php'),\n        'F' => array('Filter',              'getName',       'filters.php'),\n        'U' => array('User',                'getName',       'users.php'),\n        'J' => array('ClientAccount',       'getUserName',   'users.php'),\n    );\n\n    static function bootstrap() {\n        Signal::connect('object.view', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.created', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.deleted', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.edited', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('person.login', array('AuditEntry', 'auditSpecialEvent'));\n        Signal::connect('person.logout', array('AuditEntry', 'auditSpecialEvent'));\n    }\n\n    static function getObjectName($class) {\n      switch ($class) {\n        case 'Dept':\n          return __('Department');\n          break;\n        case 'OrganizationModel':\n          return __('Organization');\n          break;\n        case 'Canned':\n          return __('Canned Response');\n          break;\n        case 'Topic':\n          return __('Help Topic');\n          break;\n        case 'Staff':\n          return __('Agent');\n          break;\n        case 'Filter':\n          return __('Ticket Filter');\n          break;\n        case 'EmailTemplateGroup':\n          return __('Email Template');\n          break;\n       case 'DynamicList':\n          return __('List');\n          break;\n       case 'DynamicForm':\n         return __('Form');\n         break;\n        case 'ConfigItem':\n          return __('Configuration');\n          break;\n        case 'ClientAccount':\n          return __('User Account');\n          break;\n        default:\n          return $class;\n          break;\n      }\n    }\n\n    static $configurations = array(\n        'time_format' => 'Time Format', //Configurations\n        'date_format' => 'Date Format',\n        'datetime_format' => 'Date and Time Format',\n        'daydatetime_format' => 'Day Date and Time Format',\n        'default_priority_id' => 'Default Priority',\n        'reply_separator' => 'Reply Separator Tag',\n        'isonline' => 'Helpdesk Status',\n        'staff_ip_binding' => 'Bind Agent Session to IP',\n        'staff_max_logins' => 'Staff Max Logins',\n        'staff_login_timeout' => 'Staff Login TImeout',\n        'staff_session_timeout' => 'Agent Session Timeout',\n        'passwd_reset_period' => 'Password Expiration Policy',\n        'client_max_logins' => 'User Max Logins',\n        'client_login_timeout' => 'User Login TImeout',\n        'client_session_timeout' => 'User Session Timeout',\n        'max_page_size' => 'Default Page Size',\n        'max_open_tickets' => 'Maximum Open Tickets',\n        'autolock_minutes' => 'Collision Avoidance Duration',\n        'default_priority_id' => 'Ticket Default Priority',\n        'default_smtp_id' => 'Default MTA',\n        'use_email_priority' => 'Emailed Tickets Priority',\n        'enable_kb' => 'Enable Knowledge Base',\n        'enable_premade' => 'Enable Canned Responses',\n        'enable_captcha' => 'Human Verification:',\n        'enable_auto_cron' => 'Fetch on auto-cron',\n        'enable_mail_polling' => 'Email Fetching',\n        'send_sys_errors' => 'System Errors',\n        'send_sql_errors' => 'SQL Errors',\n        'send_login_errors' => 'Excessive failed login attempts',\n        'strip_quoted_reply' => 'Strip Quoted Reply',\n        'ticket_autoresponder' => 'New Ticket Autoresponder',\n        'message_autoresponder' => 'New Message Submitter Autoresponder',\n        'ticket_notice_active' => 'New Ticket by Agent Autoresponder',\n        'ticket_alert_active' => 'New Ticket Alert',\n        'ticket_alert_admin' => 'Admin New Ticket Alert',\n        'ticket_alert_dept_manager' => 'Manager New Ticket Alert',\n        'ticket_alert_dept_members' => 'Dept Members New Ticket Alert',\n        'message_alert_active' => 'New Message Alert',\n        'message_alert_laststaff' => 'Last Respondent New Message Alert',\n        'message_alert_assigned' => 'Assigned Agent / Team New Message Alert',\n        'message_alert_dept_manager' => 'Department Manager New Message Alert',\n        'note_alert_active' => 'New Internal Activity Alert',\n        'note_alert_laststaff' => 'Last Respondent Internal Activity Alert',\n        'note_alert_assigned' => 'Assigned Agent / Team Internal Activity Alert',\n        'note_alert_dept_manager' => 'Department Manager Internal Activity Alert',\n        'transfer_alert_active' => 'Ticket Transfer Alert',\n        'transfer_alert_assigned' => 'Assigned Agent / Team Ticket Transfer Alert',\n        'transfer_alert_dept_manager' => 'Department Manager Ticket Transfer Alert',\n        'transfer_alert_dept_members' => 'Department Members Ticket Transfer Alert',\n        'overdue_alert_active' => 'Overdue Ticket Alert',\n        'overdue_alert_assigned' => 'Assigned Agent / Team Overdue Ticket Alert',\n        'overdue_alert_dept_manager' => 'Department Manager Overdue Ticket Alert',\n        'overdue_alert_dept_members' => 'Department Members Overdue Ticket Alert',\n        'assigned_alert_active' => 'Ticket Assignment Alert',\n        'assigned_alert_staff' => 'Assigned Agent Ticket Assignment Alert',\n        'assigned_alert_team_lead' => 'Team Lead Ticket Assignment Alert',\n        'assigned_alert_team_members' => 'Team Members Ticket Assignment Alert',\n        'auto_claim_tickets' => 'Claim on Response',\n        'collaborator_ticket_visibility' => 'Collaborator Tickets Visibility',\n        'require_topic_to_close' => 'Require Help Topic to Close',\n        'hide_staff_name' => 'Agent Identity Masking',\n        'overlimit_notice_active' => 'Overlimit Notice Autoresponder',\n        'email_attachments' => 'Email Attachments',\n        'ticket_number_format' => 'Default Ticket Number Format',\n        'ticket_sequence_id' => 'Default Ticket Number Sequence',\n        'queue_bucket_counts' => 'Top-Level Ticket Counts',\n        'task_number_format' => 'Default Task Number Format',\n        'task_sequence_id' => 'Default Task Number Sequence',\n        'log_level' => 'Default Log Level',\n        'log_graceperiod' => 'Purge Logs',\n        'client_registration' => 'Registration Method',\n        'default_ticket_queue' => 'Default Ticket Queue',\n        'accept_unregistered_email' => 'Accept All Emails',\n        'add_email_collabs' => 'Accept Email Collaborators',\n        'helpdesk_url' => 'Helpdesk URL',\n        'helpdesk_title' => 'Helpdesk Name/Title',\n        'default_dept_id' => 'Default Department',\n        'enable_avatars' => 'Show Avatars',\n        'enable_richtext' => 'Enable Rich Text',\n        'default_locale' => 'Default Locale',\n        'default_timezone' => 'Default Time Zone',\n        'date_formats' => 'Date and Time Format',\n        'system_language' => 'Primary Language',\n        'add_secondary_language' => 'Secondary Languages',\n        'default_storage_bk' => 'Store Attachments',\n        'max_file_size' => 'Agent Maximum File Size',\n        'files_req_auth' => 'Login required',\n        'default_ticket_status_id' => 'Default Status',\n        'default_sla_id' => 'Default SLA',\n        'default_help_topic' => 'Default Help Topic',\n        'ticket_lock' => 'Lock Semantics',\n        'message_autoresponder_collabs' => 'New Message Participant Autoresponder',\n        'ticket_alert_acct_manager' => 'Account Manager New Ticket Alert',\n        'message_alert_acct_manager' => 'Account Manager New Message Alert',\n        'default_task_priority_id' => 'Default Task Priority',\n        'task_alert_active' => 'New Task Alert',\n        'task_alert_admin' => 'New Task Admin Alert',\n        'task_alert_dept_manager' => 'New Task Department Manager Alert',\n        'task_alert_dept_members' => 'New Task Department Members Alert',\n        'task_activity_alert_active' => 'New Task Activity Alert',\n        'task_activity_alert_laststaff' => 'New Task Activity Last Respondent',\n        'task_activity_alert_assigned' => 'New Task Activity Assigned Agent / Team',\n        'task_activity_alert_dept_manager' => 'New Task Activity Department Manager',\n        'task_assignment_alert_active' => 'Task Assignment Alert',\n        'task_assignment_alert_staff' => 'Task Assignment Alert Assigned Agent / Team',\n        'task_assignment_alert_team_lead' => 'Task Assignment Alert Team Lead',\n        'task_assignment_alert_team_members' => 'Task Assignment Alert Team Members',\n        'task_transfer_alert_active' => 'Task Transfer Alert',\n        'task_transfer_alert_assigned' => 'Task Transfer Alert Assigned Agent / Team',\n        'task_transfer_alert_dept_manager' => 'Task Transfer Alert Department Manager',\n        'task_transfer_alert_dept_members' => 'Task Transfer Alert Department Members',\n        'task_overdue_alert_active' => 'Overdue Task Alert',\n        'task_overdue_alert_assigned' => 'Overdue Task Alert Assigned Agent / Team',\n        'task_overdue_alert_dept_manager' => 'Overdue Task Alert Department Manager',\n        'task_overdue_alert_dept_members' => 'Overdue Task Alert Department Members',\n        'agent_name_format' => 'Agent Name Formatting',\n        'agent_avatar' => 'Agent Avatar Source',\n        'allow_pw_reset' => 'Allow Password Resets',\n        'pw_reset_window' => 'Reset Token Expiration',\n        'client_name_format' => 'User Name Formatting',\n        'client_avatar' => 'User Avatar Source',\n        'clients_only' => 'Registration Required',\n        'allow_auth_tokens' => 'Authentication Token',\n        'client_verify_email' => 'Client Quick Access',\n        'restrict_kb' => 'Knowledgebase Require Client Login',\n        'default_template_id' => 'Default Template Set',\n        'default_email_id' => 'Default System Email',\n        'alert_email_id' => 'Default Alert Email',\n        'admin_email' => 'Admin Email Address',\n        'verify_email_addrs' => 'Verify Email Addresses',\n        'name' => 'Name', // Common Configurations\n        'isactive' => 'Status',\n        'notes' => 'Notes',\n        'topic_id' => 'Help Topic', // Email Configurations\n        'userid' => 'Username',\n        'mail_active' => 'Mail Active',\n        'mail_host' => 'Fetching Hostname',\n        'mail_port' => 'Fetching Port',\n        'mail_proto' => 'Mail Box Protocol',\n        'mail_fetchfreq' => 'Fetch Frequency',\n        'mail_fetchmax' => 'Emails Per Fetch',\n        'postfetch' => 'Fetched Emails',\n        'mail_archivefolder' => 'Mail Archive Folder',\n        'smtp_active' => 'SMTP Active',\n        'smtp_host' => 'SMTP Hostname',\n        'smtp_port' => 'SMTP Port',\n        'smtp_auth' => 'Authentication Required',\n        'smtp_spoofing' => 'Header Spoofing',\n        'mail_encryption' => 'Mail Encryption',\n        'topic' => 'Name', // Help Topic Configurations\n        'ispublic' => 'Type',\n        'topic_pid' => 'Parent Topic',\n        'dept_id' => 'Department',\n        'custom-numbers' => 'Ticket Number Format',\n        'number_format' => 'Number Format',\n        'sequence_id' => 'Number Sequence',\n        'priority_id' => 'Priority',\n        'sla_id' => 'SLA Plan',\n        'page_id' => 'Thank-You Page',\n        'assign' => 'Auto-assign To',\n        'noautoresp' => 'Auto-Response',\n        'pid' => 'Parent', // Department Configurations\n        'ispublic' => 'Type',\n        'sla_id' => 'SLA',\n        'manager_id' => 'Manager',\n        'assignment_flag' => 'Ticket Assignment',\n        'disable_auto_claim' => 'Claim on Response',\n        'disable_reopen_auto_assign' => 'Reopen Auto Assignment',\n        'email_id' => 'Outgoing Email',\n        'tpl_id' => 'Template Set',\n        'ticket_auto_response' => 'New Ticket',\n        'message_auto_response' => 'New Message',\n        'autoresp_email_id' => 'Auto-Response Email',\n        'group_membership' => 'Recipients',\n        'signature' => 'Department Signature',\n        'grace_period' => 'Grace Period', // SLA Configurations\n        'transient' => 'Transient',\n        'disable_overdue_alerts' => 'Ticket Overdue Alerts',\n        'type' => 'Type', // Page Configurations\n        'body' => 'Page Content',\n        'name_plural' => 'Plural Name', // List Configurations\n        'sort_mode' => 'Sort Order',\n        'ticket.activity.notice' => 'New Activity Notice', // Email Template Configurations\n        'message.autoresp' => 'New Message Auto-response',\n        'ticket.autoreply' => 'New Ticket Auto-reply',\n        'ticket.autoresp' => 'New Ticket Auto-response',\n        'ticket.notice' => 'New Ticket Notice',\n        'ticket.overlimit' => 'Overlimit Notice',\n        'note.alert' => 'Internal Activity Alert',\n        'message.alert' => 'New Message Alert',\n        'ticket.alert' => 'New Ticket Alert',\n        'ticket.overdue' => 'Overdue Ticket Alert',\n        'assigned.alert' => 'Ticket Assignment Alert',\n        'transfer.alert' => 'Ticket Transfer Alert',\n        'task.activity.alert' => 'New Activity Alert',\n        'task.activity.notice' => 'New Activity Notice',\n        'task.alert' => 'New Task Alert',\n        'task.overdue.alert' => 'Overdue Task Alert',\n        'task.assignment.alert' => 'Task Assignment Alert',\n        'task.transfer.alert' => 'Task Transfer Alert',\n        'firstname' => 'First Name', // Agent Configurations\n        'lastname' => 'Last Name',\n        'email' => 'Email',\n        'phone' => 'Phone Number',\n        'phone_ext' => 'Phone Extension',\n        'mobile' => 'Mobile Number',\n        'username' => 'Username',\n        'default_from_name' => 'Default From Name',\n        'thread_view_order' => 'Thread View Order',\n        'default_ticket_queue_id' => 'Default Ticket Queue',\n        'reply_redirect' => 'Reply Redirect',\n        'islocked' => 'Locked',\n        'isadmin' => 'Administrator',\n        'assigned_only' => 'Limit Access to Assigned',\n        'onvacation' => 'Vacation Mode',\n        'dept_access' => 'Department Access',\n        'role_id' => 'Role',\n        'passwd' => 'Password',\n        'backend' => 'Backend',\n        'lang' => 'Language',\n        'timezone' => 'Timezone',\n        'locale' => 'Locale',\n        'isvisible' => 'Visible',\n        'show_assigned_tickets' => 'Show Assigned Tickets',\n        'change_passwd' => 'Change Password',\n        'auto_refresh_rate' => 'Auto Refresh Rate',\n        'default_signature_type' => 'Default Signature Type',\n        'default_paper_size' => 'Default Paper Size',\n        'user.create' => 'Create Users', // Agent Permissions\n        'user.delete' => 'Delete Users',\n        'user.edit' => 'Edit Users',\n        'user.manage' => 'Manage Users',\n        'user.dir' => 'User Directory',\n        'org.create' => 'Create Organizations',\n        'org.delete' => 'Delete Organizations',\n        'org.edit' => 'Edit Organizations',\n        'faq.manage' => 'Manage FAQs',\n        'emails.banlist' => 'Banlist',\n        'search.all' => 'Search All',\n        'stats.agents' => 'Stats',\n        'isenabled' => 'Status', // Team Configurations\n        'lead_id' => 'Team Lead',\n        'noalerts' => 'Assignment Alert',\n        'ticket.assign' => 'Ticket Assign', // Role Configurations\n        'ticket.close' => 'Ticket Close',\n        'ticket.create' => 'Ticket Create',\n        'ticket.delete' => 'Ticket Delete',\n        'ticket.edit' => 'Ticket Edit',\n        'thread.edit' => 'Ticket Thread Edit',\n        'ticket.reply' => 'Ticket Reply',\n        'ticket.refer' => 'Ticket Refer',\n        'ticket.release' => 'Ticket Release',\n        'ticket.transfer' => 'Ticket Transfer',\n        'task.assign' => 'Task Assign',\n        'task.close' => 'Task Close',\n        'task.create' => 'Task Create',\n        'task.delete' => 'Task Delete',\n        'task.edit' => 'Task Edit',\n        'task.reply' => 'Task Reply',\n        'task.transfer' => 'Task Transfer',\n        'canned.manage' => 'Manage Canned Responses',\n        'execorder' => 'Execution Order', // Ticket Filter Configurations\n        'target' => 'Target Channel',\n        'match_all_rules' => 'Match All Criteria',\n        'stop_onmatch' => 'Stop On Match',\n        'manager' => 'Account Manager', // Organization Configurations\n        'assign-am-flag' => 'Auto-Assignment',\n        'contacts' => 'Contacts',\n        'sharing' => 'Ticket Sharing',\n        'collab-pc-flag' => 'Auto Collaboration - Primary Contacts',\n        'collab-all-flag' => 'Auto Collaboration - Organization Members',\n        'domain' => 'Email Domain',\n        'org' => 'Organization', // User Account Configurations\n        'timezone' => 'Timezone',\n        'password' => 'Password',\n        'locked-flag' => 'Administratively Locked',\n        'unlocked-flag' => 'Unlocked',\n        'pwreset-flag' => 'Password Reset Required',\n        'pwreset-sent' => 'Send Password Reset EMail',\n        'user-registered' => 'Registered',\n        'user-org' => 'Add to Organization',\n        'forbid-pwchange-flag' => 'User cannot change password',\n    );\n\n    static $show_view_audits;\n\n    function __toString() {\n        return (string) $this->id;\n    }\n\n    //allows you to specify which part of the $types array you want returned\n    static function getTypeExtra($objectType, $infoType) {\n      foreach (self::getTypes() as $key => $info) {\n        if ($objectType == $key) {\n          switch ($infoType) {\n            case 'Model':\n                $extra = __($info[0]);\n                break;\n            case 'Name':\n                $extra = __($info[1]);\n                break;\n            case 'URL':\n                $extra = __($info[2]);\n                break;\n          }\n        }\n      }\n      return $extra;\n    }\n\n    static function getPageNav($qwhere) {\n      $qselect = 'SELECT audit.* ';\n      $qfrom=' FROM '.AUDIT_TABLE.' audit ';\n      $total=db_count(\"SELECT count(*) $qfrom $qwhere\");\n      $page = ($_GET['p'] && is_numeric($_GET['p']))?$_GET['p']:1;\n      //pagenate\n      $pageNav=new Pagenate($total, $page, PAGE_LIMIT);\n\n      return $pageNav;\n    }\n\n    static function getQwhere($objectId, $hide_views=false, $type='') {\n      $class = is_object($objectId) ? get_class($objectId) : $objectId;\n      switch ($class) {\n        case 'User':\n          $qwhere = sprintf(' WHERE audit.user_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'Staff':\n          $qwhere = sprintf(' WHERE audit.staff_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'Ticket':\n          $qwhere = sprintf(' WHERE audit.object_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'AuditEntry':\n          $qwhere =' WHERE 1';\n          $qwhere.=' AND object_type='.db_input($_REQUEST['type'] ?: 'D');\n          if ($hide_views)\n            $qwhere.=' AND event_id='.db_input(Event::getIdByName($_REQUEST['state']));\n          if ($_REQUEST['state'] && $_REQUEST['state'] != __('All')) {\n              $event_id = Event::getIdByName(lcfirst($_REQUEST['state']));\n              $qwhere.=' AND event_id='.db_input($event_id);\n          }\n\n            //dates\n            $startTime  =($_REQUEST['startDate'] && (strlen($_REQUEST['startDate'])>=8))?strtotime($_REQUEST['startDate']):0;\n            $endTime    =($_REQUEST['endDate'] && (strlen($_REQUEST['endDate'])>=8))?strtotime($_REQUEST['endDate']):0;\n            if( ($startTime && $startTime>time()) or ($startTime>$endTime && $endTime>0)){\n                $startTime=$endTime=0;\n            } else {\n                if($startTime)\n                    $qwhere.=' AND timestamp>=FROM_UNIXTIME('.$startTime.')';\n                if($endTime)\n                    $qwhere.=' AND timestamp<=FROM_UNIXTIME('.$endTime.')';\n            }\n          break;\n          default:\n          $qwhere = $type ? sprintf(' WHERE audit.object_id=%d AND audit.object_type = \"%s\"', $objectId, $type) :\n                            sprintf('WHERE audit.object_id=%d', $objectId);\n          break;\n\n      }\n      if (!self::$show_view_audits)\n        $qwhere.=' AND event_id !='.db_input(Event::getIdByName('viewed'));\n\n      return $qwhere;\n    }\n\n    static function getOrder($order) {\n        if($_REQUEST['order'] && $orderWays[strtoupper($_REQUEST['order'])]) {\n            $order=$orderWays[strtoupper($_REQUEST['order'])];\n        }\n        $order=$order?$order:'DESC';\n\n        return $order;\n    }\n\n    static function getQuery($qs, $objectId, $pageNav, $export, $type='') {\n      $qselect = 'SELECT audit.* ';\n      $qfrom=' FROM '.AUDIT_TABLE.' audit ';\n      $qwhere =self::getQwhere($objectId, false, $type);\n\n      $sortOptions=array('id'=>'audit.id', 'object_id'=>'audit.object_id', 'state'=>'audit.state','type'=>'audit.object_type','ip'=>'audit.ip'\n                          ,'timestamp'=>'audit.timestamp');\n      $orderWays=array('DESC'=>'DESC','ASC'=>'ASC');\n      $sort=($_REQUEST['sort'] && $sortOptions[strtolower($_REQUEST['sort'])])?strtolower($_REQUEST['sort']):'timestamp';\n      //Sorting options...\n      if($sort && $sortOptions[$sort]) {\n          $order_column =$sortOptions[$sort];\n      }\n      $order_column=$order_column?$order_column:'timestamp';\n      $order = self::getOrder($_REQUEST['order']);\n\n      if($order_column && strpos($order_column,',')){\n          $order_column=str_replace(',',\" $order,\",$order_column);\n      }\n      $x=$sort.'_sort';\n      $$x=' class=\"'.strtolower($order).'\" ';\n      $order_by=\"$order_column $order \";\n\n      $query = sprintf(\"$qselect $qfrom $qwhere %s\",\n               $export ? '' : \"ORDER BY $order_by LIMIT \".$pageNav->getStart().\",\".$pageNav->getLimit());\n\n      return $query;\n    }\n\n    static function getTableInfo($objectId, $export=false, $type='') {\n      $qs = array();\n      if($_REQUEST['type']) {\n          $qs += array('type' => $_REQUEST['type']);\n      }\n\n      //pagenate\n      $qwhere =self::getQwhere($objectId, false, $type);\n      $pageNav=self::getPageNav($qwhere);\n      $query = self::getQuery($qs, $objectId, $pageNav, $export, $type);\n      $audits=db_query($query);\n\n      if($audits && ($num=db_num_rows($audits)))\n          $showing=$pageNav->showing().' '.$title;\n\n      $table = array();\n      $count = 0;\n      foreach ($audits as $event) {\n        $class = is_object($objectId) ? get_class($objectId) : $objectId;\n\n        $table[$count]['id'] = $event['id'];\n        $table[$count]['staff_id'] = $event['staff_id'];\n        $table[$count]['user_id'] = $event['user_id'];\n        $table[$count]['event_id'] = $event['event_id'];\n        $table[$count]['description'] = self::getDescription($event, $export);\n        $table[$count]['timestamp'] = Format::datetime($event['timestamp']);\n        $table[$count]['ip'] = $event['ip'];\n        $count++;\n      }\n      return $table;\n    }\n\n    static function getTypes() {\n      return self::$types;\n    }\n\n    static function getConfigurations() {\n      return self::$configurations;\n    }\n\n    static function getDescription($event, $export=false, $userType='') {\n      $event = is_object($event) ? $event->ht : $event;\n      $data = json_decode($event['data'], true);\n      $name = '';\n      if (!is_array($event))\n        $event = $event->ht;\n\n      if (!$person = $data['person'])\n        $person = $event['staff_id'] ? (Staff::lookup($event['staff_id'])) : (User::lookup($event['user_id']));\n\n      if ($person)\n        $name = is_string($person) ? $person : $person->getName()->name;\n\n      if (!$userType)\n        $userType = $event['staff_id'] ? __('Agent') : __('User');\n\n      $model = AuditEntry::getTypeExtra($event['object_type'], 'Model');\n      $objectName = AuditEntry::getObjectName($model);\n      $link = $event['object_type'] ? AuditEntry::getObjectLink($event) : '';\n      $eventName = Event::getNameById($event['event_id']);\n      $description = sprintf(__('%s <strong>%s</strong> %s %s %s'),\n                     $userType, $name, $eventName, $objectName, $link);\n\n      switch ($eventName) {\n        case 'message':\n            $message = sprintf(__('%s <strong>%s</strong> posted a %s to %s %s'),\n                           $userType, $name, $userType == 'Agent' ? 'reply' : 'message', $objectName, $link);\n            break;\n        case 'note':\n            $message = sprintf(__('%s <strong>%s</strong> posted a %s to %s %s'),\n                $userType, $name, $eventName, $objectName, $link);\n            break;\n        case 'collab':\n          $msg = $data['add'] ? 'Added ' : 'Deleted ';\n          $data = $data['add'] ?: $data['del'];\n          $name = array();\n          $i = 0;\n          foreach ($data as $key => $value) {\n            if (is_numeric($key) && $i < 5)\n                $name[] = ($i < 4) ? $value['name'] : $value['name'] . '...';\n            $i++;\n          }\n          $name = implode(',', $name);\n          $message = sprintf(__('%s <strong>%s</strong> %s Collaborator(s): <strong>%s</strong> Ticket: %s'), $userType, $person, $msg, $name, $link);\n          break;\n        case 'edited':\n            switch ($event['object_type']) {\n                case 'X':\n                    foreach (self::getConfigurations() as $key => $value) {\n                        if ($data['key'] == $key)\n                            $configuration = __($value);\n                    }\n                    $message = sprintf(__('<strong>%s</strong> %s %s: <strong>%s</strong>'), $name ?: $userType, $data['type'] ?: 'Edited', $objectName, $configuration ?: $data['key']);\n                    break;\n                case 'T':\n                case 'A':\n                    if ($data['fields']) {\n                      $fields = array();\n                      foreach ($data['fields'] as $key => $value) {\n                        if (is_array($data['fields'][$key]) && $key == 'fields')\n                            $key = key($data['fields'][$key]);\n                        if (is_numeric($key)) {\n                            $field = DynamicFormField::objects()->filter(array('id'=>$key))->values_flat('label')->first() ?: array();\n                            $fields[] = $field[0];\n                        } else {\n                            $field[0] = ucfirst($key);\n                        }\n                        $message = sprintf(__('%s <strong>%s</strong> Edited Field(s): %s <strong>%s: %s</strong> '), $userType,\n                                    $name ?: $userType,\n                                    !empty($fields) ? implode(',',$fields) : ($field[0] ?: '-'),\n                                    $objectName, $link);\n                      }\n                    }\n\n                    break;\n                default:\n                    if ($data['key']) {\n                        foreach (self::getConfigurations() as $key => $value) {\n                            if ($data['key'] == $key)\n                                $configuration = __($value);\n                        }\n                    }\n\n                    $message = sprintf(__('<strong>%s</strong> %s %s %s %s'), $name ?: $userType, $data['status'] ?: 'Edited', $objectName, $link, $configuration ?: $data['key'] ?: '');\n                    break;\n            }\n          break;\n        case 'login':\n        case 'logout':\n            $message = sprintf(__('%s <strong>%s</strong> %s'),$userType, $name, $data['msg'] ?: Event::getNameById($event['event_id']));\n          break;\n        case 'referred':\n        case 'transferred':\n          foreach ($data as $key => $value) {\n            $name = is_array($value) ? '' : $value;\n            if ($key != 'name')\n              $msg = sprintf(__('%s to %s <strong>%s</strong>'), $description, self::getObjectName(ucfirst($key)), $name);\n          }\n          $message = __($msg ?: $description);\n          break;\n        case 'assigned':\n          foreach ($data as $key => $value) {\n            $assignee = is_array($value) ? '' : $value;\n\n            if ($key != 'name' && $value)\n                $msg = sprintf(__('%s to %s <strong>%s</strong>'), $description, self::getObjectName(ucfirst($key)), $assignee);\n            if ($key == 'claim')\n              $msg = sprintf(__('Agent <strong>%s</strong> Claimed %s'),$name ?: 'Agent', $link);\n            if ($key == 'auto')\n              $msg = sprintf(__('Agent <strong>SYSTEM</strong> Auto Assigned %s to <strong>%s</strong>'),$link, $name ?: 'Agent');\n          }\n          $message = __($msg ?: Event::getNameById($event['event_id']));\n          break;\n        default:\n          $message = __($description);\n          break;\n      }\n      return $export ? strip_tags($message) : $message;\n    }\n\n    static function getDataById($id, $type) {\n        $row = self::objects()\n            ->filter(array('object_type'=>$type, 'object_id'=>$id))\n            ->values_flat('object_type', 'object_id', 'data')\n            ->first();\n\n        return $row ? $row : 0;\n    }\n\n    static function getObjectLink($event) {\n        $types = self::getTypes();\n        $urlPrefix = self::getTypeExtra($event['object_type'], 'URL');\n        $data = json_decode($event['data'], true);\n        $urlIdPrefix = $event['object_type'] == 'I' ? 'tpl_id' : 'id';\n\n        if ($event['event_id'] != 14)\n            $link = sprintf('<a href=\"%s?%s=%d\"><b>%s</b></a>', $urlPrefix, $urlIdPrefix, $event['object_id'], $data['name']);\n        else\n            $link = sprintf('<b>%s</b>', $data['name']);\n\n      return $link;\n    }\n\n    static function auditEvent($event_id, $object, $info) {\n        global $thisstaff, $thisclient;\n\n        $event = static::create();\n\n        if (isset($info['data']))\n          $event->data = $info['data'];\n\n        //set the object_type based on the object's class\n        if (is_object($object)) {\n            foreach (self::getTypes() as $key => $info2) {\n              if (get_class($object) == $info2[0])\n                $event->object_type = $key;\n            }\n            if ($event->object_type)\n                $event->object_id = $object->ht['id'] ?: $object->getId();\n            else\n                return false;\n        } else {\n            $event->object_type = $object[0];\n            $event->object_id = $object[1];\n            $event->data = $object[2];\n        }\n\n        $event->event_id = $event_id;\n        $event->ip = osTicket::get_client_ip();\n\n        try {\n            if ($thisstaff)\n                $event->staff_id = $thisstaff->getId();\n            elseif (is_object($object) && get_class($object) == 'Staff')\n              $event->staff_id = $object->getId();\n            elseif (is_object($object) && get_class($object) == 'User')\n              $event->user_id = $object->getId();\n            elseif ($info['uid'])\n              $event->user_id = $info['uid'];\n            elseif ($thisclient)\n                $event->user_id = $thisclient->getId();\n\n            return $event->save();\n        } catch (Exception $e) {\n            //TODO: Return an error message\n        }\n\n    }\n\n    static function auditSpecialEvent($object, $info=array()) {\n        $data = array('person' => $object ? $object->getName()->name : '',\n                      'msg' => $info['msg'] ?: '');\n        $info['data'] = json_encode($data);\n        $event_id = Event::getIdByName($info['type']);\n        return static::auditEvent($event_id, $object, $info);\n    }\n\n    static function auditObjectEvent($object, $info=array()) {\n      global $thisstaff, $thisclient;\n\n      $event_id = Event::getIdByName($info['type']);\n      $types = self::getTypes();\n      foreach ($types as $abbrev => $data) {\n        if (is_object($object) && (get_class($object) == $data[0])) {\n          switch ($abbrev) {\n              case 'X':\n                  $data = array('person' => $thisstaff ? $thisstaff->getName()->name : __('SYSTEM'), 'key' => $info['key']);\n                  $info['data'] = json_encode($data);\n                  break;\n              default:\n                  $keys = array('updated', 'flags', 'mail_lastfetch', 'permissions', 'status');\n                  $classes = array('Email', 'Filter', 'Page', 'Role', 'Staff', 'Topic');\n                  if ($info['orm_audit'] &&\n                        (!in_array(get_class($object), $classes) || in_array($info['key'], $keys)))\n                    return false;\n\n                  if (is_null($thisstaff) && is_null($thisclient) &&\n                      get_class($object) == 'Ticket' && $info['type'] != 'assigned') {\n                      $person = $object->getUser()->getName()->name;\n                  } elseif (is_null($thisstaff) && is_null($thisclient))\n                    $person = __('SYSTEM');\n\n                  $name = $object ? call_user_func(array($object, $data[1])) : __('NA');\n                  $data = array('name' => is_object($name) ? $name->name : $name,\n                                'person' => $person ? $person : ($thisstaff ? $thisstaff->getName()->name :\n                                                       $thisclient->getName()->name));\n                  foreach ($info as $key => $value) {\n                      if ($key != 'type')\n                          $data[$key] = $value;\n                  }\n\n                  $info['data'] = json_encode($data);\n                  break;\n          }\n        }\n      }\n      if (!is_object($object)) {\n        if (!is_array($object)) {\n            if ($data = AuditEntry::getDataById($object, $info['abbrev']))\n                $name = json_decode($data[2], true);\n            else {\n                $name = __('NA');\n                $data = array($info['abbrev'], $object);\n            }\n            $info['data'] = json_encode($data);\n\n            return static::auditEvent($event_id, $data, $info);\n        } else\n            $info['data'] = json_encode($object);\n      }\n\n      return static::auditEvent($event_id, $object, $info);\n    }\n\n    static function create($vars=array()) {\n        $event = new static($vars);\n        $event->timestamp = SqlFunction::NOW();\n        return $event;\n    }\n\n    static function autoCreateTable() {\n        global $ost;\n\n        $sql = 'SHOW TABLES LIKE \\''.TABLE_PREFIX.'audit\\'';\n        if (db_num_rows(db_query($sql)))\n            return true;\n        else {\n            $event_type = array('login', 'logout', 'message', 'note');\n            foreach($event_type as $eType) {\n                $sql = sprintf(\"SELECT * FROM `%s` WHERE name = '%s'\",\n                      TABLE_PREFIX.'event', $eType);\n\n               $res=db_query($sql);\n               $count = db_num_rows($res);\n\n               if($count > 0) {\n                  $message = \"Event '$eType' already exists.\";\n                  $ost->logWarning('Audit Log Installation: Add Events', $message, false);\n              } else {\n                  // Add event\n                  $sql = sprintf(\"INSERT INTO `%s` (`id`, `name`, `description`)\n                         VALUES\n                         ('','%s',NULL)\",\n                          TABLE_PREFIX.'event', $eType);\n\n                   if(!($res=db_query($sql))) {\n                      $message = \"Unable to add $eType event to `\".TABLE_PREFIX.'event'.\"`.\";\n                      $ost->logWarning('Audit Log Installation: Add Events', $message, false);\n                  }\n              }\n            }\n\n            $sql = sprintf('CREATE TABLE `%s` (\n              `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n              `object_type` char(1) NOT NULL DEFAULT \\'\\',\n              `object_id` int(10) unsigned NOT NULL,\n              `event_id` int(11) unsigned DEFAULT NULL,\n              `staff_id` int(10) unsigned NOT NULL DEFAULT \\'0\\',\n              `user_id` int(10) unsigned NOT NULL DEFAULT \\'0\\',\n              `data` text,\n              `ip` varchar(64) DEFAULT NULL,\n              `timestamp` datetime NOT NULL,\n              PRIMARY KEY (`id`),\n              KEY `staff_id` (`staff_id`),\n              KEY `object_type` (`object_type`,`object_id`)\n          ) CHARSET=utf8', TABLE_PREFIX.'audit');\n            return db_query($sql);\n        }\n    }\n}\n", "<?php\nif(!defined('OSTADMININC') || !$thisstaff || !$thisstaff->isAdmin()) die('Access Denied');\n\n$qs = array();\nif($_REQUEST['type'])\n    $qs += array('type' => $_REQUEST['type']);\n$type='D';\n\nif ($_REQUEST['type'])\n  $type=$_REQUEST['type'];\n\nif($_REQUEST['state'])\n    $qs += array('state' => $_REQUEST['state']);\n$state=__('All');\n\nif ($_REQUEST['state'])\n  $state=$_REQUEST['state'];\n\n//dates\n$startTime  =($_REQUEST['startDate'] && (strlen($_REQUEST['startDate'])>=8))?strtotime($_REQUEST['startDate']):0;\n$endTime    =($_REQUEST['endDate'] && (strlen($_REQUEST['endDate'])>=8))?strtotime($_REQUEST['endDate']):0;\nif( ($startTime && $startTime>time()) or ($startTime>$endTime && $endTime>0)){\n    $errors['err']=__('Entered date span is invalid. Selection ignored.');\n    $startTime=$endTime=0;\n} else {\n    if($startTime)\n        $qs += array('startDate' => $_REQUEST['startDate']);\n    if($endTime)\n        $qs += array('endDate' => $_REQUEST['endDate']);\n}\n$order = AuditEntry::getOrder($_REQUEST['order']);\n$qs += array('order' => (($order=='DESC') ? 'ASC' : 'DESC'));\n$qstr = '&amp;'. Http::build_query($qs);\n\n$args = array();\nparse_str($_SERVER['QUERY_STRING'], $args);\nunset($args['p'], $args['_pjax']);\n\n// Apply pagination\n$events = AuditEntry::getTableInfo('AuditEntry');\n$total = count($events);\n$qwhere = AuditEntry::getQwhere('AuditEntry');\n$pageNav=AuditEntry::getPageNav($qwhere);\n$pageNav->setURL('audits.php', $args);\n?>\n\n<div id=\"basic_search\">\n    <div style=\"height:25px\">\n        <div id='filter' >\n            <form action=\"audits.php\" method=\"get\">\n                <div style=\"padding-left:2px;\">\n                    <i class=\"help-tip icon-question-sign\" href=\"#date_span\"></i>\n                    <?php echo __('Between'); ?>:\n                    <input class=\"dp\" id=\"sd\" size=15 name=\"startDate\" value=\"<?php echo Format::htmlchars($_REQUEST['startDate']); ?>\" autocomplete=OFF>\n                    &nbsp;&nbsp;\n                    <input class=\"dp\" id=\"ed\" size=15 name=\"endDate\" value=\"<?php echo Format::htmlchars($_REQUEST['endDate']); ?>\" autocomplete=OFF>\n                    &nbsp;<?php echo __('Type'); ?>:&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#type\"></i>\n                    <select name='type'>\n                        <?php\n                        foreach (AuditEntry::getTypes() as $abbrev => $info) {\n                            $name = AuditEntry::getObjectName($info[0]);\n                            ?>\n                            <option value=\"<?php echo $abbrev; ?>\"\n                            <?php echo ($type==$abbrev)?'selected=\"selected\"':''; ?>>\n                            <?php echo __($name); ?>\n                          </option>\n                        <?php  } ?>\n                        ?>\n                    </select>\n                    &nbsp;<?php echo __('Events'); ?>:&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#events\"></i>\n                    <select name='state'>\n                        <?php\n                        foreach (Event::getStates(true) as $title) {\n                            ?>\n                            <option value=\"<?php echo $title; ?>\"\n                              <?php echo ($state==$title)?'selected=\"selected\"':''; ?>>\n                              <?php echo __($title); ?>\n                            </option>\n                        <?php  } ?>\n                        ?>\n                    </select>\n                    &nbsp;&nbsp;\n                    <input type=\"submit\" Value=\"<?php echo __('Go!');?>\" />\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n<div class=\"error\"><?php echo $errors['err']; ?></div>\n<div class=\"clear\"></div>\n<form action=\"audits.php\" method=\"POST\" name=\"audits\">\n    <div style=\"margin-bottom:20px; padding-top:5px;\">\n        <div class=\"sticky bar opaque\">\n            <div class=\"content\">\n                <div class=\"pull-left flush-left\">\n                    <h2><?php echo __('Audit Logs');?>\n            <i class=\"help-tip icon-question-sign\" href=\"#audit_logs\"></i>\n            </h2>\n                </div>\n            </div>\n        </div>\n    </div>\n<?php csrf_token(); ?>\n <div class=\"pull-right\" style=\"margin-top:5px;\">\n    <?php\n     if ($total)\n         echo '<strong>'.$pageNav->showing().'</strong>';\n     else\n        echo __('No audits found');\n    ?>\n </div>\n\n <table class=\"list\" id=\"dashboard-audit\" style=\"width:100%\">\n     <thead>\n     <tr>\n         <th>Description</th>\n         <th><a <?php echo $timestamp_sort; ?> href=\"audits.php?<?php echo $qstr; ?>&sort=timestamp\"><?php echo __('Timestamp');?></a></th>\n         <th>IP Address</th>\n     </tr>\n     </thead>\n     <tbody>\n         <?php\n              foreach ($events as $data) { ?>\n                <tr audit-id=\"<?php echo $data['id']; ?>\">\n                    <td><?php echo $data['description']; ?></td>\n                    <td><?php echo $data['timestamp']; ?></td>\n                    <td><?php echo $data['ip']; ?></td>\n                </tr>\n              <?php\n              }\n              ?>\n       </tbody>\n       <?php if (!$total){ ?>\n       <tfoot>\n        <tr>\n           <td colspan=\"6\">\n               <?php echo __('No Audits found'); ?>\n           </td>\n        </tr>\n       </tfoot>\n     <?php }?>\n   </table>\n<?php\necho '<div>';\nif ($total) { //Show options..\n    echo '&nbsp;'.__('Page').':'.$pageNav->getPageLinks().'&nbsp;';\n}\necho sprintf('<a href=\"#audit/export/%s/%s\" id=\"%s\" class=\"no-pjax nomodalexport\">%s</a>',\n    $type,\n    $state,\n    'audit-export',\n    __('Export'));\n?>\n</form>\n", "<?php\n\n/**\n * FilesystemStorage plugin\n *\n * Allows attachment data to be written to the disk rather than in the\n * database\n */\nclass FilesystemStorage extends FileStorageBackend {\n    var $fp = null;\n    static $base;\n\n    function read($bytes=32768, $offset=false) {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        if (!$this->fp)\n            $this->fp = @fopen($filename, 'rb');\n        if (!$this->fp)\n            throw new IOException($filename.': Unable to open for reading');\n        if ($offset)\n            fseek($this->fp, $offset);\n        if (($status = @fread($this->fp, $bytes)) === false)\n            throw new IOException($filename.': Unable to read from file');\n        return $status;\n    }\n\n    function passthru() {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        // TODO: Raise IOException on failure\n        if (($status = @readfile($filename)) === false)\n            throw new IOException($filename.': Unable to read from file');\n        return $status;\n    }\n\n    function write($data) {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        if (!$this->fp)\n            $this->fp = @fopen($filename, 'wb');\n        if (!$this->fp)\n            throw new IOException($filename.':Unable to open for reading');\n        if (($status = @fwrite($this->fp, $data)) === false)\n            throw new IOException($filename.': Unable to write to file');\n        return $status;\n    }\n\n    function upload($filepath) {\n        $destination = $this->getPath($this->meta->getKey());\n        if (!@move_uploaded_file($filepath, $destination))\n            throw new IOException($filepath.': Unable to move file');\n        // TODO: Consider CHMOD on the file\n        return true;\n    }\n\n    function unlink() {\n        $filename = $this->getPath($this->meta->getKey());\n        if (!@unlink($filename))\n            throw new IOException($filename.': Unable to delete file');\n        return true;\n    }\n\n    function getPath($hash) {\n        // TODO: Make this configurable\n        $prefix = $hash[0];\n        $base = static::$base;\n        if ($base[0] != '/' && $base[1] != ':')\n            $base = ROOT_DIR . $base;\n        // Auto-create the subfolders\n        $base .= '/'.$prefix;\n        if (!is_dir($base))\n            mkdir($base, 0751);\n\n        return $base.'/'.$hash;\n    }\n}\n\nclass FsStoragePluginConfig extends PluginConfig {\n\n    // Provide compatibility function for versions of osTicket prior to\n    // translation support (v1.9.4)\n    static function translate() {\n        if (!method_exists('Plugin', 'translate')) {\n            return array(\n                function($x) { return $x; },\n                function($x, $y, $n) { return $n != 1 ? $y : $x; },\n            );\n        }\n        return Plugin::translate('storage-fs');\n    }\n\n    function getOptions() {\n        list($__, $_N) = self::translate();\n        return array(\n            'uploadpath' => new TextboxField(array(\n                'label'=>$__('Base folder for attachment files'),\n                'hint'=>$__('The path must already exist and be writeable by the\n                    web server. If the path starts with neither a `/` nor a\n                    drive letter, the path will be assumed to be relative to\n                    the root of osTicket'),\n                'configuration'=>array('size'=>60, 'length'=>255),\n                'required'=>true,\n            )),\n        );\n    }\n\n    function pre_save(&$config, &$errors) {\n        list($__, $_N) = self::translate();\n        $path = $config['uploadpath'];\n        if ($path[0] != '/' && $path[1] != ':')\n            $path = ROOT_DIR . $path;\n\n        $field = $this->getForm()->getField('uploadpath');\n        $file = md5(microtime());\n        if (!@is_dir($path))\n            $field->addError($__('Path does not exist'));\n        elseif (!@opendir($path))\n            $field->addError($__('Unable to access directory'));\n        elseif (!@touch(\"$path/$file\"))\n            $field->addError($__('Unable to write to directory'));\n        elseif (!@unlink(\"$path/$file\"))\n            $field->addError($__('Unable to remove files from directory'));\n        else\n            touch(\"$path/.keep\");\n        return true;\n    }\n}\n\nclass FsStoragePlugin extends Plugin {\n    var $config_class = 'FsStoragePluginConfig';\n\n    function bootstrap() {\n        $config = $this->getConfig();\n        $uploadpath = $config->get('uploadpath');\n        list($__, $_N) = $config::translate();\n        if ($uploadpath) {\n            FileStorageBackend::register('F', 'FilesystemStorage');\n            FilesystemStorage::$base = $uploadpath;\n            FilesystemStorage::$desc = $__('Filesystem') .': '.$uploadpath;\n        }\n    }\n}\n\n"], "fixing_code": ["<?php\ndefine('AUDIT_TABLE', TABLE_PREFIX . 'audit');\n\nclass AuditEntry extends VerySimpleModel {\n    static $meta = array(\n        'table' => AUDIT_TABLE,\n        'pk' => array('id'),\n        'ordering' => array('-timestamp'),\n        'select_related' => array('staff', 'user'),\n        'joins' => array(\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n                'null' => true,\n            ),\n            'user' => array(\n                'constraint' => array('user_id' => 'User.id'),\n                'null' => true,\n            ),\n        ),\n    );\n\n    //return an array with the object model, getName function, and url prefix\n    static $types = array(\n        'S' => array('Staff',               'getName',       'staff.php'),\n        'B' => array('Canned',              'getTitle',      'canned.php'),\n        'C' => array('Category',            'getName',       'categories.php'),\n        'X' => array('ConfigItem',          'none',          'none'),\n        'D' => array('Dept',                'getName',       'departments.php'),\n        'M' => array('Email',               'getName',       'emails.php'),\n        'I' => array('EmailTemplateGroup',  'getName',       'templates.php'),\n        'Q' => array('FAQ',                 'getQuestion',   'faq.php'),\n        'N' => array('DynamicForm',         'getTitle',      'forms.php'),\n        'H' => array('Topic',               'getName',       'helptopics.php'),\n        'L' => array('DynamicList',         'getName',       'lists.php'),\n        'O' => array('Organization',        'getName',       'orgs.php'),\n        'G' => array('Page',                'getName',       'pages.php'),\n        'R' => array('Role',                'getName',       'roles.php'),\n        'V' => array('SLA',                 'getName',       'slas.php'),\n        'A' => array('Task',                'getNumber',     'tasks.php'),\n        'E' => array('Team',                'getName',       'teams.php'),\n        'T' => array('Ticket',              'getNumber',     'tickets.php'),\n        'F' => array('Filter',              'getName',       'filters.php'),\n        'U' => array('User',                'getName',       'users.php'),\n        'J' => array('ClientAccount',       'getUserName',   'users.php'),\n    );\n\n    static function bootstrap() {\n        Signal::connect('object.view', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.created', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.deleted', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('object.edited', array('AuditEntry', 'auditObjectEvent'));\n        Signal::connect('person.login', array('AuditEntry', 'auditSpecialEvent'));\n        Signal::connect('person.logout', array('AuditEntry', 'auditSpecialEvent'));\n    }\n\n    static function getObjectName($class) {\n      switch ($class) {\n        case 'Dept':\n          return __('Department');\n          break;\n        case 'OrganizationModel':\n          return __('Organization');\n          break;\n        case 'Canned':\n          return __('Canned Response');\n          break;\n        case 'Topic':\n          return __('Help Topic');\n          break;\n        case 'Staff':\n          return __('Agent');\n          break;\n        case 'Filter':\n          return __('Ticket Filter');\n          break;\n        case 'EmailTemplateGroup':\n          return __('Email Template');\n          break;\n       case 'DynamicList':\n          return __('List');\n          break;\n       case 'DynamicForm':\n         return __('Form');\n         break;\n        case 'ConfigItem':\n          return __('Configuration');\n          break;\n        case 'ClientAccount':\n          return __('User Account');\n          break;\n        default:\n          return $class;\n          break;\n      }\n    }\n\n    static $configurations = array(\n        'time_format' => 'Time Format', //Configurations\n        'date_format' => 'Date Format',\n        'datetime_format' => 'Date and Time Format',\n        'daydatetime_format' => 'Day Date and Time Format',\n        'default_priority_id' => 'Default Priority',\n        'reply_separator' => 'Reply Separator Tag',\n        'isonline' => 'Helpdesk Status',\n        'staff_ip_binding' => 'Bind Agent Session to IP',\n        'staff_max_logins' => 'Staff Max Logins',\n        'staff_login_timeout' => 'Staff Login TImeout',\n        'staff_session_timeout' => 'Agent Session Timeout',\n        'passwd_reset_period' => 'Password Expiration Policy',\n        'client_max_logins' => 'User Max Logins',\n        'client_login_timeout' => 'User Login TImeout',\n        'client_session_timeout' => 'User Session Timeout',\n        'max_page_size' => 'Default Page Size',\n        'max_open_tickets' => 'Maximum Open Tickets',\n        'autolock_minutes' => 'Collision Avoidance Duration',\n        'default_priority_id' => 'Ticket Default Priority',\n        'default_smtp_id' => 'Default MTA',\n        'use_email_priority' => 'Emailed Tickets Priority',\n        'enable_kb' => 'Enable Knowledge Base',\n        'enable_premade' => 'Enable Canned Responses',\n        'enable_captcha' => 'Human Verification:',\n        'enable_auto_cron' => 'Fetch on auto-cron',\n        'enable_mail_polling' => 'Email Fetching',\n        'send_sys_errors' => 'System Errors',\n        'send_sql_errors' => 'SQL Errors',\n        'send_login_errors' => 'Excessive failed login attempts',\n        'strip_quoted_reply' => 'Strip Quoted Reply',\n        'ticket_autoresponder' => 'New Ticket Autoresponder',\n        'message_autoresponder' => 'New Message Submitter Autoresponder',\n        'ticket_notice_active' => 'New Ticket by Agent Autoresponder',\n        'ticket_alert_active' => 'New Ticket Alert',\n        'ticket_alert_admin' => 'Admin New Ticket Alert',\n        'ticket_alert_dept_manager' => 'Manager New Ticket Alert',\n        'ticket_alert_dept_members' => 'Dept Members New Ticket Alert',\n        'message_alert_active' => 'New Message Alert',\n        'message_alert_laststaff' => 'Last Respondent New Message Alert',\n        'message_alert_assigned' => 'Assigned Agent / Team New Message Alert',\n        'message_alert_dept_manager' => 'Department Manager New Message Alert',\n        'note_alert_active' => 'New Internal Activity Alert',\n        'note_alert_laststaff' => 'Last Respondent Internal Activity Alert',\n        'note_alert_assigned' => 'Assigned Agent / Team Internal Activity Alert',\n        'note_alert_dept_manager' => 'Department Manager Internal Activity Alert',\n        'transfer_alert_active' => 'Ticket Transfer Alert',\n        'transfer_alert_assigned' => 'Assigned Agent / Team Ticket Transfer Alert',\n        'transfer_alert_dept_manager' => 'Department Manager Ticket Transfer Alert',\n        'transfer_alert_dept_members' => 'Department Members Ticket Transfer Alert',\n        'overdue_alert_active' => 'Overdue Ticket Alert',\n        'overdue_alert_assigned' => 'Assigned Agent / Team Overdue Ticket Alert',\n        'overdue_alert_dept_manager' => 'Department Manager Overdue Ticket Alert',\n        'overdue_alert_dept_members' => 'Department Members Overdue Ticket Alert',\n        'assigned_alert_active' => 'Ticket Assignment Alert',\n        'assigned_alert_staff' => 'Assigned Agent Ticket Assignment Alert',\n        'assigned_alert_team_lead' => 'Team Lead Ticket Assignment Alert',\n        'assigned_alert_team_members' => 'Team Members Ticket Assignment Alert',\n        'auto_claim_tickets' => 'Claim on Response',\n        'collaborator_ticket_visibility' => 'Collaborator Tickets Visibility',\n        'require_topic_to_close' => 'Require Help Topic to Close',\n        'hide_staff_name' => 'Agent Identity Masking',\n        'overlimit_notice_active' => 'Overlimit Notice Autoresponder',\n        'email_attachments' => 'Email Attachments',\n        'ticket_number_format' => 'Default Ticket Number Format',\n        'ticket_sequence_id' => 'Default Ticket Number Sequence',\n        'queue_bucket_counts' => 'Top-Level Ticket Counts',\n        'task_number_format' => 'Default Task Number Format',\n        'task_sequence_id' => 'Default Task Number Sequence',\n        'log_level' => 'Default Log Level',\n        'log_graceperiod' => 'Purge Logs',\n        'client_registration' => 'Registration Method',\n        'default_ticket_queue' => 'Default Ticket Queue',\n        'accept_unregistered_email' => 'Accept All Emails',\n        'add_email_collabs' => 'Accept Email Collaborators',\n        'helpdesk_url' => 'Helpdesk URL',\n        'helpdesk_title' => 'Helpdesk Name/Title',\n        'default_dept_id' => 'Default Department',\n        'enable_avatars' => 'Show Avatars',\n        'enable_richtext' => 'Enable Rich Text',\n        'default_locale' => 'Default Locale',\n        'default_timezone' => 'Default Time Zone',\n        'date_formats' => 'Date and Time Format',\n        'system_language' => 'Primary Language',\n        'add_secondary_language' => 'Secondary Languages',\n        'default_storage_bk' => 'Store Attachments',\n        'max_file_size' => 'Agent Maximum File Size',\n        'files_req_auth' => 'Login required',\n        'default_ticket_status_id' => 'Default Status',\n        'default_sla_id' => 'Default SLA',\n        'default_help_topic' => 'Default Help Topic',\n        'ticket_lock' => 'Lock Semantics',\n        'message_autoresponder_collabs' => 'New Message Participant Autoresponder',\n        'ticket_alert_acct_manager' => 'Account Manager New Ticket Alert',\n        'message_alert_acct_manager' => 'Account Manager New Message Alert',\n        'default_task_priority_id' => 'Default Task Priority',\n        'task_alert_active' => 'New Task Alert',\n        'task_alert_admin' => 'New Task Admin Alert',\n        'task_alert_dept_manager' => 'New Task Department Manager Alert',\n        'task_alert_dept_members' => 'New Task Department Members Alert',\n        'task_activity_alert_active' => 'New Task Activity Alert',\n        'task_activity_alert_laststaff' => 'New Task Activity Last Respondent',\n        'task_activity_alert_assigned' => 'New Task Activity Assigned Agent / Team',\n        'task_activity_alert_dept_manager' => 'New Task Activity Department Manager',\n        'task_assignment_alert_active' => 'Task Assignment Alert',\n        'task_assignment_alert_staff' => 'Task Assignment Alert Assigned Agent / Team',\n        'task_assignment_alert_team_lead' => 'Task Assignment Alert Team Lead',\n        'task_assignment_alert_team_members' => 'Task Assignment Alert Team Members',\n        'task_transfer_alert_active' => 'Task Transfer Alert',\n        'task_transfer_alert_assigned' => 'Task Transfer Alert Assigned Agent / Team',\n        'task_transfer_alert_dept_manager' => 'Task Transfer Alert Department Manager',\n        'task_transfer_alert_dept_members' => 'Task Transfer Alert Department Members',\n        'task_overdue_alert_active' => 'Overdue Task Alert',\n        'task_overdue_alert_assigned' => 'Overdue Task Alert Assigned Agent / Team',\n        'task_overdue_alert_dept_manager' => 'Overdue Task Alert Department Manager',\n        'task_overdue_alert_dept_members' => 'Overdue Task Alert Department Members',\n        'agent_name_format' => 'Agent Name Formatting',\n        'agent_avatar' => 'Agent Avatar Source',\n        'allow_pw_reset' => 'Allow Password Resets',\n        'pw_reset_window' => 'Reset Token Expiration',\n        'client_name_format' => 'User Name Formatting',\n        'client_avatar' => 'User Avatar Source',\n        'clients_only' => 'Registration Required',\n        'allow_auth_tokens' => 'Authentication Token',\n        'client_verify_email' => 'Client Quick Access',\n        'restrict_kb' => 'Knowledgebase Require Client Login',\n        'default_template_id' => 'Default Template Set',\n        'default_email_id' => 'Default System Email',\n        'alert_email_id' => 'Default Alert Email',\n        'admin_email' => 'Admin Email Address',\n        'verify_email_addrs' => 'Verify Email Addresses',\n        'name' => 'Name', // Common Configurations\n        'isactive' => 'Status',\n        'notes' => 'Notes',\n        'topic_id' => 'Help Topic', // Email Configurations\n        'userid' => 'Username',\n        'mail_active' => 'Mail Active',\n        'mail_host' => 'Fetching Hostname',\n        'mail_port' => 'Fetching Port',\n        'mail_proto' => 'Mail Box Protocol',\n        'mail_fetchfreq' => 'Fetch Frequency',\n        'mail_fetchmax' => 'Emails Per Fetch',\n        'postfetch' => 'Fetched Emails',\n        'mail_archivefolder' => 'Mail Archive Folder',\n        'smtp_active' => 'SMTP Active',\n        'smtp_host' => 'SMTP Hostname',\n        'smtp_port' => 'SMTP Port',\n        'smtp_auth' => 'Authentication Required',\n        'smtp_spoofing' => 'Header Spoofing',\n        'mail_encryption' => 'Mail Encryption',\n        'topic' => 'Name', // Help Topic Configurations\n        'ispublic' => 'Type',\n        'topic_pid' => 'Parent Topic',\n        'dept_id' => 'Department',\n        'custom-numbers' => 'Ticket Number Format',\n        'number_format' => 'Number Format',\n        'sequence_id' => 'Number Sequence',\n        'priority_id' => 'Priority',\n        'sla_id' => 'SLA Plan',\n        'page_id' => 'Thank-You Page',\n        'assign' => 'Auto-assign To',\n        'noautoresp' => 'Auto-Response',\n        'pid' => 'Parent', // Department Configurations\n        'ispublic' => 'Type',\n        'sla_id' => 'SLA',\n        'manager_id' => 'Manager',\n        'assignment_flag' => 'Ticket Assignment',\n        'disable_auto_claim' => 'Claim on Response',\n        'disable_reopen_auto_assign' => 'Reopen Auto Assignment',\n        'email_id' => 'Outgoing Email',\n        'tpl_id' => 'Template Set',\n        'ticket_auto_response' => 'New Ticket',\n        'message_auto_response' => 'New Message',\n        'autoresp_email_id' => 'Auto-Response Email',\n        'group_membership' => 'Recipients',\n        'signature' => 'Department Signature',\n        'grace_period' => 'Grace Period', // SLA Configurations\n        'transient' => 'Transient',\n        'disable_overdue_alerts' => 'Ticket Overdue Alerts',\n        'type' => 'Type', // Page Configurations\n        'body' => 'Page Content',\n        'name_plural' => 'Plural Name', // List Configurations\n        'sort_mode' => 'Sort Order',\n        'ticket.activity.notice' => 'New Activity Notice', // Email Template Configurations\n        'message.autoresp' => 'New Message Auto-response',\n        'ticket.autoreply' => 'New Ticket Auto-reply',\n        'ticket.autoresp' => 'New Ticket Auto-response',\n        'ticket.notice' => 'New Ticket Notice',\n        'ticket.overlimit' => 'Overlimit Notice',\n        'note.alert' => 'Internal Activity Alert',\n        'message.alert' => 'New Message Alert',\n        'ticket.alert' => 'New Ticket Alert',\n        'ticket.overdue' => 'Overdue Ticket Alert',\n        'assigned.alert' => 'Ticket Assignment Alert',\n        'transfer.alert' => 'Ticket Transfer Alert',\n        'task.activity.alert' => 'New Activity Alert',\n        'task.activity.notice' => 'New Activity Notice',\n        'task.alert' => 'New Task Alert',\n        'task.overdue.alert' => 'Overdue Task Alert',\n        'task.assignment.alert' => 'Task Assignment Alert',\n        'task.transfer.alert' => 'Task Transfer Alert',\n        'firstname' => 'First Name', // Agent Configurations\n        'lastname' => 'Last Name',\n        'email' => 'Email',\n        'phone' => 'Phone Number',\n        'phone_ext' => 'Phone Extension',\n        'mobile' => 'Mobile Number',\n        'username' => 'Username',\n        'default_from_name' => 'Default From Name',\n        'thread_view_order' => 'Thread View Order',\n        'default_ticket_queue_id' => 'Default Ticket Queue',\n        'reply_redirect' => 'Reply Redirect',\n        'islocked' => 'Locked',\n        'isadmin' => 'Administrator',\n        'assigned_only' => 'Limit Access to Assigned',\n        'onvacation' => 'Vacation Mode',\n        'dept_access' => 'Department Access',\n        'role_id' => 'Role',\n        'passwd' => 'Password',\n        'backend' => 'Backend',\n        'lang' => 'Language',\n        'timezone' => 'Timezone',\n        'locale' => 'Locale',\n        'isvisible' => 'Visible',\n        'show_assigned_tickets' => 'Show Assigned Tickets',\n        'change_passwd' => 'Change Password',\n        'auto_refresh_rate' => 'Auto Refresh Rate',\n        'default_signature_type' => 'Default Signature Type',\n        'default_paper_size' => 'Default Paper Size',\n        'user.create' => 'Create Users', // Agent Permissions\n        'user.delete' => 'Delete Users',\n        'user.edit' => 'Edit Users',\n        'user.manage' => 'Manage Users',\n        'user.dir' => 'User Directory',\n        'org.create' => 'Create Organizations',\n        'org.delete' => 'Delete Organizations',\n        'org.edit' => 'Edit Organizations',\n        'faq.manage' => 'Manage FAQs',\n        'emails.banlist' => 'Banlist',\n        'search.all' => 'Search All',\n        'stats.agents' => 'Stats',\n        'isenabled' => 'Status', // Team Configurations\n        'lead_id' => 'Team Lead',\n        'noalerts' => 'Assignment Alert',\n        'ticket.assign' => 'Ticket Assign', // Role Configurations\n        'ticket.close' => 'Ticket Close',\n        'ticket.create' => 'Ticket Create',\n        'ticket.delete' => 'Ticket Delete',\n        'ticket.edit' => 'Ticket Edit',\n        'thread.edit' => 'Ticket Thread Edit',\n        'ticket.reply' => 'Ticket Reply',\n        'ticket.refer' => 'Ticket Refer',\n        'ticket.release' => 'Ticket Release',\n        'ticket.transfer' => 'Ticket Transfer',\n        'task.assign' => 'Task Assign',\n        'task.close' => 'Task Close',\n        'task.create' => 'Task Create',\n        'task.delete' => 'Task Delete',\n        'task.edit' => 'Task Edit',\n        'task.reply' => 'Task Reply',\n        'task.transfer' => 'Task Transfer',\n        'canned.manage' => 'Manage Canned Responses',\n        'execorder' => 'Execution Order', // Ticket Filter Configurations\n        'target' => 'Target Channel',\n        'match_all_rules' => 'Match All Criteria',\n        'stop_onmatch' => 'Stop On Match',\n        'manager' => 'Account Manager', // Organization Configurations\n        'assign-am-flag' => 'Auto-Assignment',\n        'contacts' => 'Contacts',\n        'sharing' => 'Ticket Sharing',\n        'collab-pc-flag' => 'Auto Collaboration - Primary Contacts',\n        'collab-all-flag' => 'Auto Collaboration - Organization Members',\n        'domain' => 'Email Domain',\n        'org' => 'Organization', // User Account Configurations\n        'timezone' => 'Timezone',\n        'password' => 'Password',\n        'locked-flag' => 'Administratively Locked',\n        'unlocked-flag' => 'Unlocked',\n        'pwreset-flag' => 'Password Reset Required',\n        'pwreset-sent' => 'Send Password Reset EMail',\n        'user-registered' => 'Registered',\n        'user-org' => 'Add to Organization',\n        'forbid-pwchange-flag' => 'User cannot change password',\n    );\n\n    static $show_view_audits;\n\n    function __toString() {\n        return (string) $this->id;\n    }\n\n    //allows you to specify which part of the $types array you want returned\n    static function getTypeExtra($objectType, $infoType) {\n      foreach (self::getTypes() as $key => $info) {\n        if ($objectType == $key) {\n          switch ($infoType) {\n            case 'Model':\n                $extra = __($info[0]);\n                break;\n            case 'Name':\n                $extra = __($info[1]);\n                break;\n            case 'URL':\n                $extra = __($info[2]);\n                break;\n          }\n        }\n      }\n      return $extra;\n    }\n\n    static function getPageNav($qwhere) {\n      $qselect = 'SELECT audit.* ';\n      $qfrom=' FROM '.AUDIT_TABLE.' audit ';\n      $total=db_count(\"SELECT count(*) $qfrom $qwhere\");\n      $page = ($_GET['p'] && is_numeric($_GET['p']))?$_GET['p']:1;\n      //pagenate\n      $pageNav=new Pagenate($total, $page, PAGE_LIMIT);\n\n      return $pageNav;\n    }\n\n    static function getQwhere($objectId, $hide_views=false, $type='') {\n      $class = is_object($objectId) ? get_class($objectId) : $objectId;\n      switch ($class) {\n        case 'User':\n          $qwhere = sprintf(' WHERE audit.user_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'Staff':\n          $qwhere = sprintf(' WHERE audit.staff_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'Ticket':\n          $qwhere = sprintf(' WHERE audit.object_id=%s', is_object($objectId) ? $objectId->getId() : $objectId);\n          break;\n        case 'AuditEntry':\n          $qwhere =' WHERE 1';\n          $qwhere.=' AND object_type='.db_input($_REQUEST['type'] ?: 'D');\n          if ($hide_views)\n            $qwhere.=' AND event_id='.db_input(Event::getIdByName($_REQUEST['state']));\n          if ($_REQUEST['state'] && $_REQUEST['state'] != __('All')) {\n              $event_id = Event::getIdByName(lcfirst($_REQUEST['state']));\n              $qwhere.=' AND event_id='.db_input($event_id);\n          }\n\n            //dates\n            $startTime  =($_REQUEST['startDate'] && (strlen($_REQUEST['startDate'])>=8))?strtotime($_REQUEST['startDate']):0;\n            $endTime    =($_REQUEST['endDate'] && (strlen($_REQUEST['endDate'])>=8))?strtotime($_REQUEST['endDate']):0;\n            if( ($startTime && $startTime>time()) or ($startTime>$endTime && $endTime>0)){\n                $startTime=$endTime=0;\n            } else {\n                if($startTime)\n                    $qwhere.=' AND timestamp>=FROM_UNIXTIME('.$startTime.')';\n                if($endTime)\n                    $qwhere.=' AND timestamp<=FROM_UNIXTIME('.$endTime.')';\n            }\n          break;\n          default:\n          $qwhere = $type ? sprintf(' WHERE audit.object_id=%d AND audit.object_type = \"%s\"', $objectId, $type) :\n                            sprintf('WHERE audit.object_id=%d', $objectId);\n          break;\n\n      }\n      if (!self::$show_view_audits)\n        $qwhere.=' AND event_id !='.db_input(Event::getIdByName('viewed'));\n\n      return $qwhere;\n    }\n\n    static function getOrder($order) {\n        $or = null;\n        $orderWays=array('DESC'=>'DESC','ASC'=>'ASC');\n\n        if ($order && $orderWays[strtoupper($order)])\n            $or = $orderWays[strtoupper($order)];\n        elseif($_REQUEST['order'] && $orderWays[strtoupper($_REQUEST['order'])])\n            $or = $orderWays[strtoupper($_REQUEST['order'])];\n\n        $or = $or ? $or : 'DESC';\n\n        return $or;\n    }\n\n    static function getQuery($qs, $objectId, $pageNav, $export, $type='') {\n      $qselect = 'SELECT audit.* ';\n      $qfrom=' FROM '.AUDIT_TABLE.' audit ';\n      $qwhere =self::getQwhere($objectId, false, $type);\n\n      $sortOptions=array('id'=>'audit.id', 'object_id'=>'audit.object_id', 'state'=>'audit.state','type'=>'audit.object_type','ip'=>'audit.ip'\n                          ,'timestamp'=>'audit.timestamp');\n      $sort=($_REQUEST['sort'] && $sortOptions[strtolower($_REQUEST['sort'])])?strtolower($_REQUEST['sort']):'timestamp';\n      //Sorting options...\n      if($sort && $sortOptions[$sort]) {\n          $order_column =$sortOptions[$sort];\n      }\n      $order_column=$order_column?$order_column:'timestamp';\n      $order = self::getOrder($_REQUEST['order']);\n\n      if($order_column && strpos($order_column,',')){\n          $order_column=str_replace(',',\" $order,\",$order_column);\n      }\n      $x=$sort.'_sort';\n      $$x=' class=\"'.strtolower($order).'\" ';\n      $order_by=\"$order_column $order \";\n\n      $query = sprintf(\"$qselect $qfrom $qwhere %s\",\n               $export ? '' : \"ORDER BY $order_by LIMIT \".$pageNav->getStart().\",\".$pageNav->getLimit());\n\n      return $query;\n    }\n\n    static function getTableInfo($objectId, $export=false, $type='') {\n      $qs = array();\n      if($_REQUEST['type']) {\n          $qs += array('type' => $_REQUEST['type']);\n      }\n\n      //pagenate\n      $qwhere =self::getQwhere($objectId, false, $type);\n      $pageNav=self::getPageNav($qwhere);\n      $query = self::getQuery($qs, $objectId, $pageNav, $export, $type);\n      $audits=db_query($query);\n\n      if($audits && ($num=db_num_rows($audits)))\n          $showing=$pageNav->showing().' '.$title;\n\n      $table = array();\n      $count = 0;\n      foreach ($audits as $event) {\n        $class = is_object($objectId) ? get_class($objectId) : $objectId;\n\n        $table[$count]['id'] = $event['id'];\n        $table[$count]['staff_id'] = $event['staff_id'];\n        $table[$count]['user_id'] = $event['user_id'];\n        $table[$count]['event_id'] = $event['event_id'];\n        $table[$count]['description'] = self::getDescription($event, $export);\n        $table[$count]['timestamp'] = Format::datetime($event['timestamp']);\n        $table[$count]['ip'] = $event['ip'];\n        $count++;\n      }\n      return $table;\n    }\n\n    static function getTypes() {\n      return self::$types;\n    }\n\n    static function getConfigurations() {\n      return self::$configurations;\n    }\n\n    static function getDescription($event, $export=false, $userType='') {\n      $event = is_object($event) ? $event->ht : $event;\n      $data = json_decode($event['data'], true);\n      $name = '';\n      if (!is_array($event))\n        $event = $event->ht;\n\n      if (!$person = $data['person'])\n        $person = $event['staff_id'] ? (Staff::lookup($event['staff_id'])) : (User::lookup($event['user_id']));\n\n      if ($person)\n        $name = is_string($person) ? $person : $person->getName()->name;\n\n      if (!$userType)\n        $userType = $event['staff_id'] ? __('Agent') : __('User');\n\n      $model = AuditEntry::getTypeExtra($event['object_type'], 'Model');\n      $objectName = AuditEntry::getObjectName($model);\n      $link = $event['object_type'] ? AuditEntry::getObjectLink($event) : '';\n      $eventName = Event::getNameById($event['event_id']);\n      $description = sprintf(__('%s <strong>%s</strong> %s %s %s'),\n                     $userType, $name, $eventName, $objectName, $link);\n\n      switch ($eventName) {\n        case 'message':\n            $message = sprintf(__('%s <strong>%s</strong> posted a %s to %s %s'),\n                           $userType, $name, $userType == 'Agent' ? 'reply' : 'message', $objectName, $link);\n            break;\n        case 'note':\n            $message = sprintf(__('%s <strong>%s</strong> posted a %s to %s %s'),\n                $userType, $name, $eventName, $objectName, $link);\n            break;\n        case 'collab':\n          $msg = $data['add'] ? 'Added ' : 'Deleted ';\n          $data = $data['add'] ?: $data['del'];\n          $name = array();\n          $i = 0;\n          foreach ($data as $key => $value) {\n            if (is_numeric($key) && $i < 5)\n                $name[] = ($i < 4) ? $value['name'] : $value['name'] . '...';\n            $i++;\n          }\n          $name = implode(',', $name);\n          $message = sprintf(__('%s <strong>%s</strong> %s Collaborator(s): <strong>%s</strong> Ticket: %s'), $userType, $person, $msg, $name, $link);\n          break;\n        case 'edited':\n            switch ($event['object_type']) {\n                case 'X':\n                    foreach (self::getConfigurations() as $key => $value) {\n                        if ($data['key'] == $key)\n                            $configuration = __($value);\n                    }\n                    $message = sprintf(__('<strong>%s</strong> %s %s: <strong>%s</strong>'), $name ?: $userType, $data['type'] ?: 'Edited', $objectName, $configuration ?: $data['key']);\n                    break;\n                case 'T':\n                case 'A':\n                    if ($data['fields']) {\n                      $fields = array();\n                      foreach ($data['fields'] as $key => $value) {\n                        if (is_array($data['fields'][$key]) && $key == 'fields')\n                            $key = key($data['fields'][$key]);\n                        if (is_numeric($key)) {\n                            $field = DynamicFormField::objects()->filter(array('id'=>$key))->values_flat('label')->first() ?: array();\n                            $fields[] = $field[0];\n                        } else {\n                            $field[0] = ucfirst($key);\n                        }\n                        $message = sprintf(__('%s <strong>%s</strong> Edited Field(s): %s <strong>%s: %s</strong> '), $userType,\n                                    $name ?: $userType,\n                                    !empty($fields) ? implode(',',$fields) : ($field[0] ?: '-'),\n                                    $objectName, $link);\n                      }\n                    }\n\n                    break;\n                default:\n                    if ($data['key']) {\n                        foreach (self::getConfigurations() as $key => $value) {\n                            if ($data['key'] == $key)\n                                $configuration = __($value);\n                        }\n                    }\n\n                    $message = sprintf(__('<strong>%s</strong> %s %s %s %s'), $name ?: $userType, $data['status'] ?: 'Edited', $objectName, $link, $configuration ?: $data['key'] ?: '');\n                    break;\n            }\n          break;\n        case 'login':\n        case 'logout':\n            $message = sprintf(__('%s <strong>%s</strong> %s'),$userType, $name, $data['msg'] ?: Event::getNameById($event['event_id']));\n          break;\n        case 'referred':\n        case 'transferred':\n          foreach ($data as $key => $value) {\n            $name = is_array($value) ? '' : $value;\n            if ($key != 'name')\n              $msg = sprintf(__('%s to %s <strong>%s</strong>'), $description, self::getObjectName(ucfirst($key)), $name);\n          }\n          $message = __($msg ?: $description);\n          break;\n        case 'assigned':\n          foreach ($data as $key => $value) {\n            $assignee = is_array($value) ? '' : $value;\n\n            if ($key != 'name' && $value)\n                $msg = sprintf(__('%s to %s <strong>%s</strong>'), $description, self::getObjectName(ucfirst($key)), $assignee);\n            if ($key == 'claim')\n              $msg = sprintf(__('Agent <strong>%s</strong> Claimed %s'),$name ?: 'Agent', $link);\n            if ($key == 'auto')\n              $msg = sprintf(__('Agent <strong>SYSTEM</strong> Auto Assigned %s to <strong>%s</strong>'),$link, $name ?: 'Agent');\n          }\n          $message = __($msg ?: Event::getNameById($event['event_id']));\n          break;\n        default:\n          $message = __($description);\n          break;\n      }\n      return $export ? strip_tags($message) : $message;\n    }\n\n    static function getDataById($id, $type) {\n        $row = self::objects()\n            ->filter(array('object_type'=>$type, 'object_id'=>$id))\n            ->values_flat('object_type', 'object_id', 'data')\n            ->first();\n\n        return $row ? $row : 0;\n    }\n\n    static function getObjectLink($event) {\n        $types = self::getTypes();\n        $urlPrefix = self::getTypeExtra($event['object_type'], 'URL');\n        $data = json_decode($event['data'], true);\n        $urlIdPrefix = $event['object_type'] == 'I' ? 'tpl_id' : 'id';\n\n        if ($event['event_id'] != 14)\n            $link = sprintf('<a href=\"%s?%s=%d\"><b>%s</b></a>', $urlPrefix, $urlIdPrefix, $event['object_id'], $data['name']);\n        else\n            $link = sprintf('<b>%s</b>', $data['name']);\n\n      return $link;\n    }\n\n    static function auditEvent($event_id, $object, $info) {\n        global $thisstaff, $thisclient;\n\n        $event = static::create();\n\n        if (isset($info['data']))\n          $event->data = $info['data'];\n\n        //set the object_type based on the object's class\n        if (is_object($object)) {\n            foreach (self::getTypes() as $key => $info2) {\n              if (get_class($object) == $info2[0])\n                $event->object_type = $key;\n            }\n            if ($event->object_type)\n                $event->object_id = $object->ht['id'] ?: $object->getId();\n            else\n                return false;\n        } else {\n            $event->object_type = $object[0];\n            $event->object_id = $object[1];\n            $event->data = $object[2];\n        }\n\n        $event->event_id = $event_id;\n        $event->ip = osTicket::get_client_ip();\n\n        try {\n            if ($thisstaff)\n                $event->staff_id = $thisstaff->getId();\n            elseif (is_object($object) && get_class($object) == 'Staff')\n              $event->staff_id = $object->getId();\n            elseif (is_object($object) && get_class($object) == 'User')\n              $event->user_id = $object->getId();\n            elseif ($info['uid'])\n              $event->user_id = $info['uid'];\n            elseif ($thisclient)\n                $event->user_id = $thisclient->getId();\n\n            return $event->save();\n        } catch (Exception $e) {\n            //TODO: Return an error message\n        }\n\n    }\n\n    static function auditSpecialEvent($object, $info=array()) {\n        $data = array('person' => $object ? $object->getName()->name : '',\n                      'msg' => $info['msg'] ?: '');\n        $info['data'] = json_encode($data);\n        $event_id = Event::getIdByName($info['type']);\n        return static::auditEvent($event_id, $object, $info);\n    }\n\n    static function auditObjectEvent($object, $info=array()) {\n      global $thisstaff, $thisclient;\n\n      $event_id = Event::getIdByName($info['type']);\n      $types = self::getTypes();\n      foreach ($types as $abbrev => $data) {\n        if (is_object($object) && (get_class($object) == $data[0])) {\n          switch ($abbrev) {\n              case 'X':\n                  $data = array('person' => $thisstaff ? $thisstaff->getName()->name : __('SYSTEM'), 'key' => $info['key']);\n                  $info['data'] = json_encode($data);\n                  break;\n              default:\n                  $keys = array('updated', 'flags', 'mail_lastfetch', 'permissions', 'status');\n                  $classes = array('Email', 'Filter', 'Page', 'Role', 'Staff', 'Topic');\n                  if ($info['orm_audit'] &&\n                        (!in_array(get_class($object), $classes) || in_array($info['key'], $keys)))\n                    return false;\n\n                  if (is_null($thisstaff) && is_null($thisclient) &&\n                      get_class($object) == 'Ticket' && $info['type'] != 'assigned') {\n                      $person = $object->getUser()->getName()->name;\n                  } elseif (is_null($thisstaff) && is_null($thisclient))\n                    $person = __('SYSTEM');\n\n                  $name = $object ? call_user_func(array($object, $data[1])) : __('NA');\n                  $data = array('name' => is_object($name) ? $name->name : $name,\n                                'person' => $person ? $person : ($thisstaff ? $thisstaff->getName()->name :\n                                                       $thisclient->getName()->name));\n                  foreach ($info as $key => $value) {\n                      if ($key != 'type')\n                          $data[$key] = $value;\n                  }\n\n                  $info['data'] = json_encode($data);\n                  break;\n          }\n        }\n      }\n      if (!is_object($object)) {\n        if (!is_array($object)) {\n            if ($data = AuditEntry::getDataById($object, $info['abbrev']))\n                $name = json_decode($data[2], true);\n            else {\n                $name = __('NA');\n                $data = array($info['abbrev'], $object);\n            }\n            $info['data'] = json_encode($data);\n\n            return static::auditEvent($event_id, $data, $info);\n        } else\n            $info['data'] = json_encode($object);\n      }\n\n      return static::auditEvent($event_id, $object, $info);\n    }\n\n    static function create($vars=array()) {\n        $event = new static($vars);\n        $event->timestamp = SqlFunction::NOW();\n        return $event;\n    }\n\n    static function autoCreateTable() {\n        global $ost;\n\n        $sql = 'SHOW TABLES LIKE \\''.TABLE_PREFIX.'audit\\'';\n        if (db_num_rows(db_query($sql)))\n            return true;\n        else {\n            $event_type = array('login', 'logout', 'message', 'note');\n            foreach($event_type as $eType) {\n                $sql = sprintf(\"SELECT * FROM `%s` WHERE name = '%s'\",\n                      TABLE_PREFIX.'event', $eType);\n\n               $res=db_query($sql);\n               $count = db_num_rows($res);\n\n               if($count > 0) {\n                  $message = \"Event '$eType' already exists.\";\n                  $ost->logWarning('Audit Log Installation: Add Events', $message, false);\n              } else {\n                  // Add event\n                  $sql = sprintf(\"INSERT INTO `%s` (`id`, `name`, `description`)\n                         VALUES\n                         ('','%s',NULL)\",\n                          TABLE_PREFIX.'event', $eType);\n\n                   if(!($res=db_query($sql))) {\n                      $message = \"Unable to add $eType event to `\".TABLE_PREFIX.'event'.\"`.\";\n                      $ost->logWarning('Audit Log Installation: Add Events', $message, false);\n                  }\n              }\n            }\n\n            $sql = sprintf('CREATE TABLE `%s` (\n              `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n              `object_type` char(1) NOT NULL DEFAULT \\'\\',\n              `object_id` int(10) unsigned NOT NULL,\n              `event_id` int(11) unsigned DEFAULT NULL,\n              `staff_id` int(10) unsigned NOT NULL DEFAULT \\'0\\',\n              `user_id` int(10) unsigned NOT NULL DEFAULT \\'0\\',\n              `data` text,\n              `ip` varchar(64) DEFAULT NULL,\n              `timestamp` datetime NOT NULL,\n              PRIMARY KEY (`id`),\n              KEY `staff_id` (`staff_id`),\n              KEY `object_type` (`object_type`,`object_id`)\n          ) CHARSET=utf8', TABLE_PREFIX.'audit');\n            return db_query($sql);\n        }\n    }\n}\n", "<?php\nif(!defined('OSTADMININC') || !$thisstaff || !$thisstaff->isAdmin()) die('Access Denied');\n\n$qs = array();\nif($_REQUEST['type'])\n    $qs += array('type' => Format::htmlchars($_REQUEST['type']));\n$type='D';\n\nif ($_REQUEST['type'])\n  $type=Format::htmlchars($_REQUEST['type']);\n\nif($_REQUEST['state'])\n    $qs += array('state' => Format::htmlchars($_REQUEST['state']));\n$state=__('All');\n\nif ($_REQUEST['state'])\n  $state=Format::htmlchars($_REQUEST['state']);\n\n//dates\n$startTime  =($_REQUEST['startDate'] && (strlen($_REQUEST['startDate'])>=8))?strtotime($_REQUEST['startDate']):0;\n$endTime    =($_REQUEST['endDate'] && (strlen($_REQUEST['endDate'])>=8))?strtotime($_REQUEST['endDate']):0;\nif( ($startTime && $startTime>time()) or ($startTime>$endTime && $endTime>0)){\n    $errors['err']=__('Entered date span is invalid. Selection ignored.');\n    $startTime=$endTime=0;\n} else {\n    if($startTime)\n        $qs += array('startDate' => $_REQUEST['startDate']);\n    if($endTime)\n        $qs += array('endDate' => $_REQUEST['endDate']);\n}\n$order = AuditEntry::getOrder(Format::htmlchars($_REQUEST['order']));\n$qs += array('order' => (($order=='DESC') ? 'ASC' : 'DESC'));\n$qstr = '&amp;'. Http::build_query($qs);\n\n$args = array();\nparse_str($_SERVER['QUERY_STRING'], $args);\nunset($args['p'], $args['_pjax']);\n\n// Apply pagination\n$events = AuditEntry::getTableInfo('AuditEntry');\n$total = count($events);\n$qwhere = AuditEntry::getQwhere('AuditEntry');\n$pageNav=AuditEntry::getPageNav($qwhere);\n$pageNav->setURL('audits.php', $args);\n?>\n\n<div id=\"basic_search\">\n    <div style=\"height:25px\">\n        <div id='filter' >\n            <form action=\"audits.php\" method=\"get\">\n                <div style=\"padding-left:2px;\">\n                    <i class=\"help-tip icon-question-sign\" href=\"#date_span\"></i>\n                    <?php echo __('Between'); ?>:\n                    <input class=\"dp\" id=\"sd\" size=15 name=\"startDate\" value=\"<?php echo Format::htmlchars($_REQUEST['startDate']); ?>\" autocomplete=OFF>\n                    &nbsp;&nbsp;\n                    <input class=\"dp\" id=\"ed\" size=15 name=\"endDate\" value=\"<?php echo Format::htmlchars($_REQUEST['endDate']); ?>\" autocomplete=OFF>\n                    &nbsp;<?php echo __('Type'); ?>:&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#type\"></i>\n                    <select name='type'>\n                        <?php\n                        foreach (AuditEntry::getTypes() as $abbrev => $info) {\n                            $name = AuditEntry::getObjectName($info[0]);\n                            ?>\n                            <option value=\"<?php echo $abbrev; ?>\"\n                            <?php echo ($type==$abbrev)?'selected=\"selected\"':''; ?>>\n                            <?php echo __($name); ?>\n                          </option>\n                        <?php  } ?>\n                        ?>\n                    </select>\n                    &nbsp;<?php echo __('Events'); ?>:&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#events\"></i>\n                    <select name='state'>\n                        <?php\n                        foreach (Event::getStates(true) as $title) {\n                            ?>\n                            <option value=\"<?php echo $title; ?>\"\n                              <?php echo ($state==$title)?'selected=\"selected\"':''; ?>>\n                              <?php echo __($title); ?>\n                            </option>\n                        <?php  } ?>\n                        ?>\n                    </select>\n                    &nbsp;&nbsp;\n                    <input type=\"submit\" Value=\"<?php echo __('Go!');?>\" />\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n<div class=\"error\"><?php echo $errors['err']; ?></div>\n<div class=\"clear\"></div>\n<form action=\"audits.php\" method=\"POST\" name=\"audits\">\n    <div style=\"margin-bottom:20px; padding-top:5px;\">\n        <div class=\"sticky bar opaque\">\n            <div class=\"content\">\n                <div class=\"pull-left flush-left\">\n                    <h2><?php echo __('Audit Logs');?>\n            <i class=\"help-tip icon-question-sign\" href=\"#audit_logs\"></i>\n            </h2>\n                </div>\n            </div>\n        </div>\n    </div>\n<?php csrf_token(); ?>\n <div class=\"pull-right\" style=\"margin-top:5px;\">\n    <?php\n     if ($total)\n         echo '<strong>'.$pageNav->showing().'</strong>';\n     else\n        echo __('No audits found');\n    ?>\n </div>\n\n <table class=\"list\" id=\"dashboard-audit\" style=\"width:100%\">\n     <thead>\n     <tr>\n         <th>Description</th>\n         <th><a <?php echo $timestamp_sort; ?> href=\"audits.php?<?php echo $qstr; ?>&sort=timestamp\"><?php echo __('Timestamp');?></a></th>\n         <th>IP Address</th>\n     </tr>\n     </thead>\n     <tbody>\n         <?php\n              foreach ($events as $data) { ?>\n                <tr audit-id=\"<?php echo $data['id']; ?>\">\n                    <td><?php echo $data['description']; ?></td>\n                    <td><?php echo $data['timestamp']; ?></td>\n                    <td><?php echo $data['ip']; ?></td>\n                </tr>\n              <?php\n              }\n              ?>\n       </tbody>\n       <?php if (!$total){ ?>\n       <tfoot>\n        <tr>\n           <td colspan=\"6\">\n               <?php echo __('No Audits found'); ?>\n           </td>\n        </tr>\n       </tfoot>\n     <?php }?>\n   </table>\n<?php\necho '<div>';\nif ($total) { //Show options..\n    echo '&nbsp;'.__('Page').':'.$pageNav->getPageLinks().'&nbsp;';\n}\necho sprintf('<a href=\"#audit/export/%s/%s\" id=\"%s\" class=\"no-pjax nomodalexport\">%s</a>',\n    $type,\n    $state,\n    'audit-export',\n    __('Export'));\n?>\n</form>\n", "<?php\n\n/**\n * FilesystemStorage plugin\n *\n * Allows attachment data to be written to the disk rather than in the\n * database\n */\nclass FilesystemStorage extends FileStorageBackend {\n    var $fp = null;\n    static $base;\n\n    function read($bytes=32768, $offset=false) {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        if (!$this->fp)\n            $this->fp = @fopen($filename, 'rb');\n        if (!$this->fp)\n            throw new IOException($filename.': Unable to open for reading');\n        if ($offset)\n            fseek($this->fp, $offset);\n        if (($status = @fread($this->fp, $bytes)) === false)\n            throw new IOException($filename.': Unable to read from file');\n        return $status;\n    }\n\n    function passthru() {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        // TODO: Raise IOException on failure\n        if (($status = @readfile($filename)) === false)\n            throw new IOException($filename.': Unable to read from file');\n        return $status;\n    }\n\n    function write($data) {\n        $hash = $this->meta->getKey();\n        $filename = $this->getPath($hash);\n        if (!$this->fp)\n            $this->fp = @fopen($filename, 'wb');\n        if (!$this->fp)\n            throw new IOException($filename.':Unable to open for reading');\n        if (($status = @fwrite($this->fp, $data)) === false)\n            throw new IOException($filename.': Unable to write to file');\n        return $status;\n    }\n\n    function upload($filepath) {\n        $destination = $this->getPath($this->meta->getKey());\n        if (!@move_uploaded_file($filepath, $destination))\n            throw new IOException($filepath.': Unable to move file');\n        // TODO: Consider CHMOD on the file\n        return true;\n    }\n\n    function unlink() {\n        $filename = $this->getPath($this->meta->getKey());\n        if (!@unlink($filename))\n            throw new IOException($filename.': Unable to delete file');\n        return true;\n    }\n\n    function getPath($hash) {\n        // TODO: Make this configurable\n        $prefix = $hash[0];\n        $base = static::$base;\n        if ($base[0] != '/' && $base[1] != ':')\n            $base = ROOT_DIR . $base;\n        // Auto-create the subfolders\n        $base .= '/'.$prefix;\n        if (!is_dir($base))\n            mkdir($base, 0751);\n\n        return $base.'/'.$hash;\n    }\n}\n\nclass FsStoragePluginConfig extends PluginConfig {\n\n    // Provide compatibility function for versions of osTicket prior to\n    // translation support (v1.9.4)\n    static function translate() {\n        if (!method_exists('Plugin', 'translate')) {\n            return array(\n                function($x) { return $x; },\n                function($x, $y, $n) { return $n != 1 ? $y : $x; },\n            );\n        }\n        return Plugin::translate('storage-fs');\n    }\n\n    function getOptions() {\n        list($__, $_N) = self::translate();\n        return array(\n            'uploadpath' => new TextboxField(array(\n                'label'=>$__('Base folder for attachment files'),\n                'hint'=>$__('The path must already exist and be writeable by the\n                    web server. If the path starts with neither a `/` nor a\n                    drive letter, the path will be assumed to be relative to\n                    the root of osTicket'),\n                'configuration'=>array('size'=>60, 'length'=>255),\n                'required'=>true,\n            )),\n        );\n    }\n\n    function pre_save(&$config, &$errors) {\n        list($__, $_N) = self::translate();\n        $path = $config['uploadpath'];\n        if ($path[0] != '/' && $path[1] != ':')\n            $path = ROOT_DIR . $path;\n\n        $field = $this->getForm()->getField('uploadpath');\n        $file = md5(microtime());\n        if (!@is_dir($path))\n            $field->addError($__('Path does not exist'));\n        elseif (!@opendir($path))\n            $field->addError($__('Unable to access directory'));\n        elseif (!@touch(\"$path/$file\"))\n            $field->addError($__('Unable to write to directory'));\n        elseif (!@unlink(\"$path/$file\"))\n            $field->addError($__('Unable to remove files from directory'));\n        else {\n            touch(\"$path/.keep\");\n            if (!is_file(\"$path/.htaccess\"))\n                file_put_contents(\"$path/.htaccess\", array('Options -Indexes', PHP_EOL, 'Deny from all'));\n        }\n        return true;\n    }\n}\n\nclass FsStoragePlugin extends Plugin {\n    var $config_class = 'FsStoragePluginConfig';\n\n    function bootstrap() {\n        $config = $this->getConfig();\n        $uploadpath = $config->get('uploadpath');\n        list($__, $_N) = $config::translate();\n        if ($uploadpath) {\n            FileStorageBackend::register('F', 'FilesystemStorage');\n            FilesystemStorage::$base = $uploadpath;\n            FilesystemStorage::$desc = $__('Filesystem') .': '.$uploadpath;\n        }\n    }\n}\n\n"], "filenames": ["audit/class.audit.php", "audit/templates/auditlogs.tmpl.php", "storage-fs/storage.php"], "buggy_code_start_loc": [466, 6, 123], "buggy_code_end_loc": [482, 32, 124], "fixing_code_start_loc": [466, 6, 123], "fixing_code_end_loc": [485, 32, 128], "type": "CWE-79", "message": "A stored cross-site scripting (XSS) vulnerability in the component audit/class.audit.php of osTicket-plugins - Storage-FS before commit a7842d494889fd5533d13deb3c6a7789768795ae allows attackers to execute arbitrary web scripts or HTML via a crafted SVG file.", "other": {"cve": {"id": "CVE-2022-32074", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-13T16:15:08.900", "lastModified": "2022-07-20T13:55:32.190", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A stored cross-site scripting (XSS) vulnerability in the component audit/class.audit.php of osTicket-plugins - Storage-FS before commit a7842d494889fd5533d13deb3c6a7789768795ae allows attackers to execute arbitrary web scripts or HTML via a crafted SVG file."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) almacenado en el componente audit/class.audit.php de osTicket-plugins - Storage-FS versiones anteriores al commit a7842d494889fd5533d13deb3c6a7789768795ae, permite a atacantes ejecutar scripts web o HTML arbitrarios por medio de un archivo SVG manipulado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:osticket:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-05-19", "matchCriteriaId": "EA23F95F-C139-4106-B692-E5E5BE2095A4"}]}]}], "references": [{"url": "https://github.com/osTicket/osTicket-plugins", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}, {"url": "https://github.com/osTicket/osTicket-plugins/commit/a7842d494889fd5533d13deb3c6a7789768795ae", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://owasp.org/www-community/attacks/xss/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osTicket/osTicket-plugins/commit/a7842d494889fd5533d13deb3c6a7789768795ae"}}