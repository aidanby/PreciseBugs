{"buggy_code": ["// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage bodyprocessors\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"mime\"\n\t\"mime/multipart\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/collections\"\n\t\"github.com/corazawaf/coraza/v3/internal/environment\"\n)\n\ntype multipartBodyProcessor struct{}\n\nfunc (mbp *multipartBodyProcessor) ProcessRequest(reader io.Reader, v plugintypes.TransactionVariables, options plugintypes.BodyProcessorOptions) error {\n\tmimeType := options.Mime\n\tstoragePath := options.StoragePath\n\tmediaType, params, err := mime.ParseMediaType(mimeType)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to parse media type: %s\", err.Error())\n\t}\n\tif !strings.HasPrefix(mediaType, \"multipart/\") {\n\t\treturn errors.New(\"not a multipart body\")\n\t}\n\tmr := multipart.NewReader(reader, params[\"boundary\"])\n\ttotalSize := int64(0)\n\tfilesCol := v.Files()\n\tfilesTmpNamesCol := v.FilesTmpNames()\n\tfileSizesCol := v.FilesSizes()\n\tpostCol := v.ArgsPost()\n\tfilesCombinedSizeCol := v.FilesCombinedSize()\n\tfilesNamesCol := v.FilesNames()\n\theadersNames := v.MultipartPartHeaders()\n\tfor {\n\t\tp, err := mr.NextPart()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartName := p.FormName()\n\t\tfor key, values := range p.Header {\n\t\t\tfor _, value := range values {\n\t\t\t\theadersNames.Add(partName, fmt.Sprintf(\"%s: %s\", key, value))\n\t\t\t}\n\t\t}\n\t\t// if is a file\n\t\tfilename := originFileName(p)\n\t\tif filename != \"\" {\n\t\t\tvar size int64\n\t\t\tif environment.HasAccessToFS {\n\t\t\t\t// Only copy file to temp when not running in TinyGo\n\t\t\t\ttemp, err := os.CreateTemp(storagePath, \"crzmp*\")\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsz, err := io.Copy(temp, p)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsize = sz\n\t\t\t\tfilesTmpNamesCol.Add(\"\", temp.Name())\n\t\t\t} else {\n\t\t\t\tsz, err := io.Copy(io.Discard, p)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsize = sz\n\t\t\t}\n\t\t\ttotalSize += size\n\t\t\tfilesCol.Add(\"\", filename)\n\t\t\tfileSizesCol.SetIndex(filename, 0, fmt.Sprintf(\"%d\", size))\n\t\t\tfilesNamesCol.Add(\"\", p.FormName())\n\t\t} else {\n\t\t\t// if is a field\n\t\t\tdata, err := io.ReadAll(p)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttotalSize += int64(len(data))\n\t\t\tpostCol.Add(p.FormName(), string(data))\n\t\t}\n\t\tfilesCombinedSizeCol.(*collections.Single).Set(fmt.Sprintf(\"%d\", totalSize))\n\t}\n\treturn nil\n}\n\nfunc (mbp *multipartBodyProcessor) ProcessResponse(_ io.Reader, _ plugintypes.TransactionVariables, options plugintypes.BodyProcessorOptions) error {\n\treturn nil\n}\n\nvar (\n\t_ plugintypes.BodyProcessor = (*multipartBodyProcessor)(nil)\n)\n\n// OriginFileName returns the filename parameter of the Part's Content-Disposition header.\n// This function is based on (multipart.Part).parseContentDisposition,\n// See https://go.googlesource.com/go/+/refs/tags/go1.17.9/src/mime/multipart/multipart.go#87\n// for the current implementation and also notice this function hasn't change since go1.4, as in\n// https://go.googlesource.com/go/+/refs/tags/go1.4/src/mime/multipart/multipart.go#75\nfunc originFileName(p *multipart.Part) string {\n\tv := p.Header.Get(\"Content-Disposition\")\n\t_, dispositionParams, err := mime.ParseMediaType(v)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\n\treturn dispositionParams[\"filename\"]\n}\n\nfunc init() {\n\tRegisterBodyProcessor(\"multipart\", func() plugintypes.BodyProcessor {\n\t\treturn &multipartBodyProcessor{}\n\t})\n}\n", "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage bodyprocessors_test\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/bodyprocessors\"\n\t\"github.com/corazawaf/coraza/v3/internal/corazawaf\"\n)\n\nfunc multipartProcessor(t *testing.T) plugintypes.BodyProcessor {\n\tt.Helper()\n\tmp, err := bodyprocessors.GetBodyProcessor(\"multipart\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\treturn mp\n}\n\nfunc TestProcessRequestFailsDueToIncorrectMimeType(t *testing.T) {\n\tmp := multipartProcessor(t)\n\n\texpectedError := \"not a multipart body\"\n\n\tif err := mp.ProcessRequest(strings.NewReader(\"\"), corazawaf.NewTransactionVariables(), plugintypes.BodyProcessorOptions{\n\t\tMime: \"application/json\",\n\t}); err == nil || err.Error() != expectedError {\n\t\tt.Fatal(\"expected error\")\n\t}\n}\n\nfunc TestMultipartPayload(t *testing.T) {\n\tpayload := strings.TrimSpace(`\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"text\"\n\ntext default\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file1\"; filename=\"a.txt\"\nContent-Type: text/plain\n\nContent of a.txt.\n\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file2\"; filename=\"a.html\"\nContent-Type: text/html\n\n<!DOCTYPE html><title>Content of a.html.</title>\n\n-----------------------------9051914041544843365972754266--\n`)\n\n\tmp := multipartProcessor(t)\n\n\tv := corazawaf.NewTransactionVariables()\n\tif err := mp.ProcessRequest(strings.NewReader(payload), v, plugintypes.BodyProcessorOptions{\n\t\tMime: \"multipart/form-data; boundary=---------------------------9051914041544843365972754266\",\n\t}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// first we validate we got the headers\n\theaders := v.MultipartPartHeaders()\n\theader1 := \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"a.html\\\"\"\n\theader2 := \"Content-Type: text/html\"\n\tif h := headers.Get(\"file2\"); len(h) == 0 {\n\t\tt.Fatal(\"expected headers for file2\")\n\t} else {\n\t\tif len(h) != 2 {\n\t\t\tt.Fatal(\"expected 2 headers for file2\")\n\t\t}\n\t\tif (h[0] != header1 && h[0] != header2) || (h[1] != header1 && h[1] != header2) {\n\t\t\tt.Fatalf(\"Got invalid multipart headers\")\n\t\t}\n\t}\n}\n"], "fixing_code": ["// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage bodyprocessors\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime\"\n\t\"mime/multipart\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/collections\"\n\t\"github.com/corazawaf/coraza/v3/internal/environment\"\n)\n\ntype multipartBodyProcessor struct{}\n\nfunc (mbp *multipartBodyProcessor) ProcessRequest(reader io.Reader, v plugintypes.TransactionVariables, options plugintypes.BodyProcessorOptions) error {\n\tmimeType := options.Mime\n\tstoragePath := options.StoragePath\n\tmediaType, params, err := mime.ParseMediaType(mimeType)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !strings.HasPrefix(mediaType, \"multipart/\") {\n\t\treturn errors.New(\"not a multipart body\")\n\t}\n\tmr := multipart.NewReader(reader, params[\"boundary\"])\n\ttotalSize := int64(0)\n\tfilesCol := v.Files()\n\tfilesTmpNamesCol := v.FilesTmpNames()\n\tfileSizesCol := v.FilesSizes()\n\tpostCol := v.ArgsPost()\n\tfilesCombinedSizeCol := v.FilesCombinedSize()\n\tfilesNamesCol := v.FilesNames()\n\theadersNames := v.MultipartPartHeaders()\n\tfor {\n\t\tp, err := mr.NextPart()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpartName := p.FormName()\n\t\tfor key, values := range p.Header {\n\t\t\tfor _, value := range values {\n\t\t\t\theadersNames.Add(partName, fmt.Sprintf(\"%s: %s\", key, value))\n\t\t\t}\n\t\t}\n\t\t// if is a file\n\t\tfilename := originFileName(p)\n\t\tif filename != \"\" {\n\t\t\tvar size int64\n\t\t\tif environment.HasAccessToFS {\n\t\t\t\t// Only copy file to temp when not running in TinyGo\n\t\t\t\ttemp, err := os.CreateTemp(storagePath, \"crzmp*\")\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsz, err := io.Copy(temp, p)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsize = sz\n\t\t\t\tfilesTmpNamesCol.Add(\"\", temp.Name())\n\t\t\t} else {\n\t\t\t\tsz, err := io.Copy(io.Discard, p)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tsize = sz\n\t\t\t}\n\t\t\ttotalSize += size\n\t\t\tfilesCol.Add(\"\", filename)\n\t\t\tfileSizesCol.SetIndex(filename, 0, fmt.Sprintf(\"%d\", size))\n\t\t\tfilesNamesCol.Add(\"\", p.FormName())\n\t\t} else {\n\t\t\t// if is a field\n\t\t\tdata, err := io.ReadAll(p)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttotalSize += int64(len(data))\n\t\t\tpostCol.Add(p.FormName(), string(data))\n\t\t}\n\t\tfilesCombinedSizeCol.(*collections.Single).Set(fmt.Sprintf(\"%d\", totalSize))\n\t}\n\treturn nil\n}\n\nfunc (mbp *multipartBodyProcessor) ProcessResponse(_ io.Reader, _ plugintypes.TransactionVariables, options plugintypes.BodyProcessorOptions) error {\n\treturn nil\n}\n\nvar (\n\t_ plugintypes.BodyProcessor = (*multipartBodyProcessor)(nil)\n)\n\n// OriginFileName returns the filename parameter of the Part's Content-Disposition header.\n// This function is based on (multipart.Part).parseContentDisposition,\n// See https://go.googlesource.com/go/+/refs/tags/go1.17.9/src/mime/multipart/multipart.go#87\n// for the current implementation and also notice this function hasn't change since go1.4, as in\n// https://go.googlesource.com/go/+/refs/tags/go1.4/src/mime/multipart/multipart.go#75\nfunc originFileName(p *multipart.Part) string {\n\tv := p.Header.Get(\"Content-Disposition\")\n\t_, dispositionParams, err := mime.ParseMediaType(v)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\n\treturn dispositionParams[\"filename\"]\n}\n\nfunc init() {\n\tRegisterBodyProcessor(\"multipart\", func() plugintypes.BodyProcessor {\n\t\treturn &multipartBodyProcessor{}\n\t})\n}\n", "// Copyright 2022 Juan Pablo Tosso and the OWASP Coraza contributors\n// SPDX-License-Identifier: Apache-2.0\n\npackage bodyprocessors_test\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/corazawaf/coraza/v3/experimental/plugins/plugintypes\"\n\t\"github.com/corazawaf/coraza/v3/internal/bodyprocessors\"\n\t\"github.com/corazawaf/coraza/v3/internal/corazawaf\"\n)\n\nfunc multipartProcessor(t *testing.T) plugintypes.BodyProcessor {\n\tt.Helper()\n\tmp, err := bodyprocessors.GetBodyProcessor(\"multipart\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\treturn mp\n}\n\nfunc TestProcessRequestFailsDueToIncorrectMimeType(t *testing.T) {\n\tmp := multipartProcessor(t)\n\n\texpectedError := \"not a multipart body\"\n\n\tif err := mp.ProcessRequest(strings.NewReader(\"\"), corazawaf.NewTransactionVariables(), plugintypes.BodyProcessorOptions{\n\t\tMime: \"application/json\",\n\t}); err == nil || err.Error() != expectedError {\n\t\tt.Fatal(\"expected error\")\n\t}\n}\n\nfunc TestMultipartPayload(t *testing.T) {\n\tpayload := strings.TrimSpace(`\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"text\"\n\ntext default\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file1\"; filename=\"a.txt\"\nContent-Type: text/plain\n\nContent of a.txt.\n\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"file2\"; filename=\"a.html\"\nContent-Type: text/html\n\n<!DOCTYPE html><title>Content of a.html.</title>\n\n-----------------------------9051914041544843365972754266--\n`)\n\n\tmp := multipartProcessor(t)\n\n\tv := corazawaf.NewTransactionVariables()\n\tif err := mp.ProcessRequest(strings.NewReader(payload), v, plugintypes.BodyProcessorOptions{\n\t\tMime: \"multipart/form-data; boundary=---------------------------9051914041544843365972754266\",\n\t}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// first we validate we got the headers\n\theaders := v.MultipartPartHeaders()\n\theader1 := \"Content-Disposition: form-data; name=\\\"file2\\\"; filename=\\\"a.html\\\"\"\n\theader2 := \"Content-Type: text/html\"\n\tif h := headers.Get(\"file2\"); len(h) == 0 {\n\t\tt.Fatal(\"expected headers for file2\")\n\t} else {\n\t\tif len(h) != 2 {\n\t\t\tt.Fatal(\"expected 2 headers for file2\")\n\t\t}\n\t\tif (h[0] != header1 && h[0] != header2) || (h[1] != header1 && h[1] != header2) {\n\t\t\tt.Fatalf(\"Got invalid multipart headers\")\n\t\t}\n\t}\n}\n\nfunc TestInvalidMultipartCT(t *testing.T) {\n\tpayload := strings.TrimSpace(`\n-----------------------------9051914041544843365972754266\nContent-Disposition: form-data; name=\"text\"\n\ntext default\n-----------------------------9051914041544843365972754266\n`)\n\tmp := multipartProcessor(t)\n\tv := corazawaf.NewTransactionVariables()\n\tif err := mp.ProcessRequest(strings.NewReader(payload), v, plugintypes.BodyProcessorOptions{\n\t\tMime: \"multipart/form-data; boundary=---------------------------9051914041544843365972754266; a=1; a=2\",\n\t}); err == nil {\n\t\tt.Error(\"multipart processor should fail for invalid content-type\")\n\t}\n}\n"], "filenames": ["internal/bodyprocessors/multipart.go", "internal/bodyprocessors/multipart_test.go"], "buggy_code_start_loc": [10, 79], "buggy_code_end_loc": [29, 79], "fixing_code_start_loc": [9, 80], "fixing_code_end_loc": [28, 97], "type": "NVD-CWE-noinfo", "message": "OWASP Coraza WAF is a golang modsecurity compatible web application firewall library. Due to the misuse of `log.Fatalf`, the application using coraza crashed after receiving crafted requests from attackers. The application will immediately crash after receiving a malicious request that triggers an error in `mime.ParseMediaType`. This issue was patched in version 3.0.1.\n", "other": {"cve": {"id": "CVE-2023-40586", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-25T21:15:09.197", "lastModified": "2023-09-01T18:06:17.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OWASP Coraza WAF is a golang modsecurity compatible web application firewall library. Due to the misuse of `log.Fatalf`, the application using coraza crashed after receiving crafted requests from attackers. The application will immediately crash after receiving a malicious request that triggers an error in `mime.ParseMediaType`. This issue was patched in version 3.0.1.\n"}, {"lang": "es", "value": "OWASP Coraza WAF es una librer\u00eda de firewall de aplicaciones web compatible con golang modsecurity. Debido al mal uso de `log.Fatalf`, la aplicaci\u00f3n que utiliza coraza se bloquea despu\u00e9s de recibir peticiones crafteadas de atacantes. La aplicaci\u00f3n se bloquea inmediatamente despu\u00e9s de recibir una petici\u00f3n maliciosa que provoca un error en `mime.ParseMediaType`. Este problema ha sido parcheado en la versi\u00f3n 3.0.1.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:coraza:coraza:3.0.0:*:*:*:*:go:*:*", "matchCriteriaId": "7966EDCD-F5B7-4439-A2E8-8A4CE1CA250A"}]}]}], "references": [{"url": "https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/corazawaf/coraza/security/advisories/GHSA-c2pj-v37r-2p6h", "source": "security-advisories@github.com", "tags": ["Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c"}}