{"buggy_code": ["//\n// Wire\n// Copyright (C) 2018 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\nimport Foundation\nimport UIKit\nimport WireUtilities\n\n@objc\nenum ColorSchemeVariant: UInt {\n    case light, dark\n}\n\nextension UIColor {\n    static var graphite: UIColor = UIColor(rgb: (51, 55, 58))\n    static var graphiteAlpha4: UIColor = UIColor(rgba: (51, 55, 58, 0.04))\n    static var graphiteAlpha8: UIColor = UIColor(rgba: (51, 55, 58, 0.08))\n    static var graphiteAlpha16: UIColor = UIColor(rgba: (51, 55, 58, 0.16))\n    static var graphiteAlpha40: UIColor = UIColor(rgba: (51, 55, 58, 0.4))\n\n    static var backgroundLightGraphite: UIColor = UIColor(rgb: (30, 32, 33))\n\n    static var lightGraphite: UIColor = UIColor(rgb: (141, 152, 159))\n    static var lightGraphiteAlpha8: UIColor = UIColor(rgba: (141, 152, 159, 0.08))\n    static var lightGraphiteAlpha24: UIColor = UIColor(rgba: (141, 152, 159, 0.24))\n    static var lightGraphiteAlpha48: UIColor = UIColor(rgba: (141, 152, 159, 0.48))\n    static var lightGraphiteAlpha64: UIColor = UIColor(rgba: (141, 152, 159, 0.64))\n    static var lightGraphiteWhite: UIColor = lightGraphiteAlpha8.removeAlphaByBlending(with: .white98)\n    static var lightGraphiteDark: UIColor = lightGraphiteAlpha8.removeAlphaByBlending(with: .backgroundGraphite)\n\n    static var graphiteDark: UIColor = UIColor(rgb: (50, 54, 57))\n\n    static var backgroundGraphite: UIColor = UIColor(rgb: (22, 24, 25))\n    static var backgroundGraphiteAlpha40: UIColor = UIColor(rgba: (22, 24, 25, 0.4))\n    static var backgroundGraphiteAlpha12: UIColor = UIColor(rgba: (22, 24, 25, 0.12))\n\n    static var white97: UIColor = UIColor(white: 0.97, alpha: 1)\n    static var white98: UIColor = UIColor(white: 0.98, alpha: 1)\n\n    static var whiteAlpha8: UIColor = UIColor(white: 1.0, alpha: 0.08)\n    static var whiteAlpha16: UIColor = UIColor(white: 1.0, alpha: 0.16)\n    static var whiteAlpha24: UIColor = UIColor(white: 1.0, alpha: 0.24)\n    static var whiteAlpha40: UIColor = UIColor(white: 1.0, alpha: 0.4)\n    static var whiteAlpha56: UIColor = UIColor(white: 1.0, alpha: 0.56)\n    static var whiteAlpha64: UIColor = UIColor(white: 1.0, alpha: 0.64)\n    static var whiteAlpha80: UIColor = UIColor(white: 1.0, alpha: 0.8)\n\n    static var blackAlpha4: UIColor = UIColor(white: 0.0, alpha: 0.04)\n    static var blackAlpha8: UIColor = UIColor(white: 0.0, alpha: 0.08)\n    static var blackAlpha16: UIColor = UIColor(white: 0, alpha: 0.16)\n    static var blackAlpha24: UIColor = UIColor(white: 0.0, alpha: 0.24)\n    static var blackAlpha48: UIColor = UIColor(white: 0.0, alpha: 0.48)\n    static var blackAlpha40: UIColor = UIColor(white: 0.0, alpha: 0.4)\n    static var blackAlpha80: UIColor = UIColor(white: 0.0, alpha: 0.8)\n\n    static var amberAlpha48: UIColor = UIColor(rgba: (254, 191, 2, 0.48))\n    static var amberAlpha80: UIColor = UIColor(rgba: (254, 191, 2, 0.8))\n}\n\nenum ColorSchemeColor: Int {\n    case textForeground\n    case textBackground\n    case textDimmed\n    case textPlaceholder\n\n    case iconNormal\n    case iconSelected\n    case iconHighlighted\n    case iconBackgroundSelected\n    case iconBackgroundSelectedNoAccent\n    case iconShadow\n    case iconHighlight\n    case iconGuest\n\n    case popUpButtonOverlayShadow\n\n    case buttonHighlighted\n    case buttonEmptyText\n    case buttonFaded\n\n    case tabNormal\n    case tabSelected\n    case tabHighlighted\n\n    case background\n    case contentBackground\n    case barBackground\n    case searchBarBackground\n    case separator\n    case cellSeparator\n    case backgroundOverlay\n    case backgroundOverlayWithoutPicture\n    case placeholderBackground\n    case avatarBorder\n    case loadingDotActive\n    case loadingDotInactive\n\n    case paleSeparator\n    case listAvatarInitials\n    case audioButtonOverlay\n\n    case sectionBackground\n    case sectionBackgroundHighlighted\n    case sectionText\n\n    case tokenFieldBackground\n    case tokenFieldTextPlaceHolder\n\n    case selfMentionHighlight\n    case cellHighlight\n\n    case replyBorder\n    case replyHighlight\n\n    case secondaryAction\n    case secondaryActionDimmed\n\n    case errorIndicator\n\n    case landingScreen\n\n    case utilityError\n    case utilityNeutral\n    case utilitySuccess\n\n    case textSecurityNotClassified\n    case backgroundSecurityNotClassified\n\n    fileprivate func colorPair(accentColor: UIColor) -> ColorPair {\n        switch self {\n        case .textForeground:\n            return ColorPair(light: .graphite, dark: .white)\n        case .textBackground:\n            return ColorPair(light: .white, dark: .backgroundGraphite)\n        case .textDimmed:\n            return ColorPair(both: .lightGraphite)\n        case .textPlaceholder:\n            return ColorPair(both: .lightGraphiteAlpha64)\n        case .separator:\n            return ColorPair(light: .lightGraphiteAlpha48, dark: .lightGraphiteAlpha24)\n        case .barBackground:\n            return ColorPair(light: .white, dark: .backgroundLightGraphite)\n        case .background:\n            return ColorPair(light: .white, dark: .backgroundGraphite)\n        case .contentBackground:\n            return ColorPair(light: .white97, dark: .backgroundGraphite)\n        case .iconNormal:\n            return ColorPair(light: .graphite, dark: .white)\n        case .iconSelected:\n            return ColorPair(light: .white, dark: .black)\n        case .iconHighlighted:\n            return ColorPair(both: .white)\n        case .iconShadow:\n            return ColorPair(light: .blackAlpha8, dark: .blackAlpha24)\n        case .iconHighlight:\n            return ColorPair(light: .white, dark: .whiteAlpha16)\n        case .iconBackgroundSelected:\n            return ColorPair(light: accentColor, dark: .white)\n        case .iconBackgroundSelectedNoAccent:\n            return ColorPair(light: .graphite, dark: .white)\n        case .popUpButtonOverlayShadow:\n            return ColorPair(light: .blackAlpha24, dark: .black)\n        case .buttonHighlighted:\n            return ColorPair(light: .whiteAlpha24, dark: .blackAlpha24)\n        case .buttonEmptyText:\n            return ColorPair(light: accentColor, dark: .white)\n        case .buttonFaded:\n            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)\n        case .tabNormal:\n            return ColorPair(light: .blackAlpha48, dark: .whiteAlpha56)\n        case .tabSelected:\n            return ColorPair(light: .graphite, dark: .white)\n        case .tabHighlighted:\n            return ColorPair(light: .lightGraphite, dark: .lightGraphiteAlpha48)\n        case .backgroundOverlay:\n            return ColorPair(light: .blackAlpha24, dark: .blackAlpha48)\n        case .backgroundOverlayWithoutPicture:\n            return ColorPair(both: .blackAlpha80)\n        case .avatarBorder:\n            return ColorPair(light: .blackAlpha8, dark: .whiteAlpha16)\n        case .audioButtonOverlay:\n            return ColorPair(both: .lightGraphiteAlpha24)\n        case .placeholderBackground:\n            return ColorPair(light: .lightGraphiteWhite, dark: .lightGraphiteDark)\n        case .loadingDotActive:\n            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)\n        case .loadingDotInactive:\n            return ColorPair(light: .graphiteAlpha16, dark: .whiteAlpha16)\n        case .paleSeparator:\n            return ColorPair(both: .lightGraphiteAlpha24)\n        case .listAvatarInitials:\n            return ColorPair(both: .blackAlpha40)\n        case .sectionBackground:\n            return ColorPair(both: .clear)\n        case .sectionBackgroundHighlighted:\n            return ColorPair(light: .graphiteAlpha4, dark: .backgroundLightGraphite)\n        case .sectionText:\n            return ColorPair(light: .blackAlpha40, dark: .whiteAlpha40)\n        case .tokenFieldBackground:\n            return ColorPair(light: .blackAlpha4, dark: .whiteAlpha16)\n        case .tokenFieldTextPlaceHolder:\n            return ColorPair(light: .lightGraphite, dark: .whiteAlpha40)\n        case .cellSeparator:\n            return ColorPair(light: .graphiteAlpha8, dark: .whiteAlpha8)\n        case .searchBarBackground:\n            return ColorPair(light: .white, dark: .whiteAlpha8)\n        case .iconGuest:\n            return ColorPair(light: .backgroundGraphiteAlpha40, dark: .whiteAlpha64)\n        case .selfMentionHighlight:\n            return ColorPair(light: .amberAlpha48, dark: .amberAlpha80)\n        case .cellHighlight:\n            return ColorPair(light: .white97, dark: .whiteAlpha16)\n        case .replyBorder:\n            return ColorPair(light: UIColor(white: 233.0/255.0, alpha: 1),\n                             dark: UIColor(white: 114.0/255.0, alpha: 1))\n        case .replyHighlight:\n            return ColorPair(light: UIColor(rgb: 0x33373A, alpha: 0.24),\n                             dark: UIColor(white: 1, alpha: 0.24))\n\n        case .secondaryAction:\n            return ColorPair(light: UIColor(rgb: 0xE8ECEE), dark: .backgroundLightGraphite)\n        case .secondaryActionDimmed:\n            return ColorPair(light: UIColor(rgb: 0xE8ECEE, alpha: 0.24), dark: UIColor.backgroundLightGraphite.withAlphaComponent(0.24))\n\n        case .errorIndicator:\n            return ColorPair(light: UIColor(rgb: 0xE60606), dark: UIColor(rgb: 0xFC3E37))\n\n        case .landingScreen:\n            return ColorPair(light: .graphiteDark, dark: .white)\n\n        case .utilityError:\n            return ColorPair(light: UIColor(rgb: 0xE41734), dark: UIColor(rgb: 0xFC7887))\n        case .utilityNeutral:\n            return ColorPair(light: UIColor(rgb: 0x0772DE), dark: UIColor(rgb: 0x26BDFF))\n        case .utilitySuccess:\n            return ColorPair(light: UIColor(rgb: 0x148545), dark: UIColor(rgb: 0x35C763))\n\n        case .textSecurityNotClassified:\n            return ColorPair(light: .white, dark: .graphite)\n        case .backgroundSecurityNotClassified:\n            return ColorPair(light: .graphite, dark: .white)\n\n        }\n    }\n}\n\nfinal class ColorScheme: NSObject {\n    private(set) var colors: [AnyHashable: Any]?\n\n    var variant: ColorSchemeVariant = .light\n\n    private(set) var defaultColorScheme: ColorScheme?\n    var accentColor: UIColor = .red\n\n    var keyboardAppearance: UIKeyboardAppearance {\n        return ColorScheme.keyboardAppearance(for: variant)\n    }\n\n    class func keyboardAppearance(for variant: ColorSchemeVariant) -> UIKeyboardAppearance {\n        return variant == .light ? .light : .dark\n    }\n\n    static let `default`: ColorScheme = ColorScheme()\n\n    func color(named: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {\n        let colorSchemeVariant = variant ?? self.variant\n\n        let colorPair = named.colorPair(accentColor: accentColor)\n        switch colorSchemeVariant {\n        case .dark:\n            return colorPair.dark\n        case .light:\n            return colorPair.light\n        }\n    }\n\n    func nameAccent(for color: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {\n        return UIColor.nameColor(for: color, variant: variant)\n    }\n\n}\n\nprivate struct ColorPair {\n    let light: UIColor\n    let dark: UIColor\n}\n\nprivate extension ColorPair {\n    init(both color: UIColor) {\n        self.init(light: color, dark: color)\n    }\n}\n\nextension UIColor {\n\n    static func from(scheme: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {\n        return ColorScheme.default.color(named: scheme, variant: variant)\n    }\n\n    /// Creates UIColor instance with color corresponding to @p accentColor that can be used to display the name.\n    // NB: the order of coefficients must match ZMAccentColor enum ordering\n    private static let accentColorNameColorBlendingCoefficientsDark: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.8, 0.64]\n    private static let accentColorNameColorBlendingCoefficientsLight: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.64, 1.0]\n\n    /// Creates UIColor instance with color corresponding to @p accentColor that can be used to display the name.\n    class func nameColor(for accentColor: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {\n\n        assert(accentColor.rawValue <= ZMAccentColor.max.rawValue)\n\n        let coefficientsArray = variant == .dark ? accentColorNameColorBlendingCoefficientsDark : accentColorNameColorBlendingCoefficientsLight\n        let coefficient = coefficientsArray[Int(accentColor.rawValue)]\n\n        let background: UIColor = variant == .dark ? .black : .white\n        return background.mix(UIColor(fromZMAccentColor: accentColor), amount: coefficient)\n    }\n}\n\nextension ColorSchemeVariant {\n    func mainColor(color: UIColor?) -> UIColor {\n        return color ?? UIColor.from(scheme: .textForeground, variant: self)\n    }\n}\n"], "fixing_code": ["//\n// Wire\n// Copyright (C) 2018 Wire Swiss GmbH\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see http://www.gnu.org/licenses/.\n//\n\nimport Foundation\nimport UIKit\nimport WireUtilities\nimport WireCommonComponents\n\n@objc\nenum ColorSchemeVariant: UInt {\n    case light, dark\n}\n\nextension UIColor {\n    static var graphite: UIColor = UIColor(rgb: (51, 55, 58))\n    static var graphiteAlpha4: UIColor = UIColor(rgba: (51, 55, 58, 0.04))\n    static var graphiteAlpha8: UIColor = UIColor(rgba: (51, 55, 58, 0.08))\n    static var graphiteAlpha16: UIColor = UIColor(rgba: (51, 55, 58, 0.16))\n    static var graphiteAlpha40: UIColor = UIColor(rgba: (51, 55, 58, 0.4))\n\n    static var backgroundLightGraphite: UIColor = UIColor(rgb: (30, 32, 33))\n\n    static var lightGraphite: UIColor = UIColor(rgb: (141, 152, 159))\n    static var lightGraphiteAlpha8: UIColor = UIColor(rgba: (141, 152, 159, 0.08))\n    static var lightGraphiteAlpha24: UIColor = UIColor(rgba: (141, 152, 159, 0.24))\n    static var lightGraphiteAlpha48: UIColor = UIColor(rgba: (141, 152, 159, 0.48))\n    static var lightGraphiteAlpha64: UIColor = UIColor(rgba: (141, 152, 159, 0.64))\n    static var lightGraphiteWhite: UIColor = lightGraphiteAlpha8.removeAlphaByBlending(with: .white98)\n    static var lightGraphiteDark: UIColor = lightGraphiteAlpha8.removeAlphaByBlending(with: .backgroundGraphite)\n\n    static var graphiteDark: UIColor = UIColor(rgb: (50, 54, 57))\n\n    static var backgroundGraphite: UIColor = UIColor(rgb: (22, 24, 25))\n    static var backgroundGraphiteAlpha40: UIColor = UIColor(rgba: (22, 24, 25, 0.4))\n    static var backgroundGraphiteAlpha12: UIColor = UIColor(rgba: (22, 24, 25, 0.12))\n\n    static var white97: UIColor = UIColor(white: 0.97, alpha: 1)\n    static var white98: UIColor = UIColor(white: 0.98, alpha: 1)\n\n    static var whiteAlpha8: UIColor = UIColor(white: 1.0, alpha: 0.08)\n    static var whiteAlpha16: UIColor = UIColor(white: 1.0, alpha: 0.16)\n    static var whiteAlpha24: UIColor = UIColor(white: 1.0, alpha: 0.24)\n    static var whiteAlpha40: UIColor = UIColor(white: 1.0, alpha: 0.4)\n    static var whiteAlpha56: UIColor = UIColor(white: 1.0, alpha: 0.56)\n    static var whiteAlpha64: UIColor = UIColor(white: 1.0, alpha: 0.64)\n    static var whiteAlpha80: UIColor = UIColor(white: 1.0, alpha: 0.8)\n\n    static var blackAlpha4: UIColor = UIColor(white: 0.0, alpha: 0.04)\n    static var blackAlpha8: UIColor = UIColor(white: 0.0, alpha: 0.08)\n    static var blackAlpha16: UIColor = UIColor(white: 0, alpha: 0.16)\n    static var blackAlpha24: UIColor = UIColor(white: 0.0, alpha: 0.24)\n    static var blackAlpha48: UIColor = UIColor(white: 0.0, alpha: 0.48)\n    static var blackAlpha40: UIColor = UIColor(white: 0.0, alpha: 0.4)\n    static var blackAlpha80: UIColor = UIColor(white: 0.0, alpha: 0.8)\n\n    static var amberAlpha48: UIColor = UIColor(rgba: (254, 191, 2, 0.48))\n    static var amberAlpha80: UIColor = UIColor(rgba: (254, 191, 2, 0.8))\n}\n\nenum ColorSchemeColor: Int {\n    case textForeground\n    case textBackground\n    case textDimmed\n    case textPlaceholder\n\n    case iconNormal\n    case iconSelected\n    case iconHighlighted\n    case iconBackgroundSelected\n    case iconBackgroundSelectedNoAccent\n    case iconShadow\n    case iconHighlight\n    case iconGuest\n\n    case popUpButtonOverlayShadow\n\n    case buttonHighlighted\n    case buttonEmptyText\n    case buttonFaded\n\n    case tabNormal\n    case tabSelected\n    case tabHighlighted\n\n    case background\n    case contentBackground\n    case barBackground\n    case searchBarBackground\n    case separator\n    case cellSeparator\n    case backgroundOverlay\n    case backgroundOverlayWithoutPicture\n    case placeholderBackground\n    case avatarBorder\n    case loadingDotActive\n    case loadingDotInactive\n\n    case paleSeparator\n    case listAvatarInitials\n    case audioButtonOverlay\n\n    case sectionBackground\n    case sectionBackgroundHighlighted\n    case sectionText\n\n    case tokenFieldBackground\n    case tokenFieldTextPlaceHolder\n\n    case selfMentionHighlight\n    case cellHighlight\n\n    case replyBorder\n    case replyHighlight\n\n    case secondaryAction\n    case secondaryActionDimmed\n\n    case errorIndicator\n\n    case landingScreen\n\n    case utilityError\n    case utilityNeutral\n    case utilitySuccess\n\n    case textSecurityNotClassified\n    case backgroundSecurityNotClassified\n\n    fileprivate func colorPair(accentColor: UIColor) -> ColorPair {\n        switch self {\n        case .textForeground:\n            return ColorPair(light: .graphite, dark: .white)\n        case .textBackground:\n            return ColorPair(light: .white, dark: .backgroundGraphite)\n        case .textDimmed:\n            return ColorPair(both: .lightGraphite)\n        case .textPlaceholder:\n            return ColorPair(both: .lightGraphiteAlpha64)\n        case .separator:\n            return ColorPair(light: .lightGraphiteAlpha48, dark: .lightGraphiteAlpha24)\n        case .barBackground:\n            return ColorPair(light: .white, dark: .backgroundLightGraphite)\n        case .background:\n            return ColorPair(light: .white, dark: .backgroundGraphite)\n        case .contentBackground:\n            return ColorPair(light: .white97, dark: .backgroundGraphite)\n        case .iconNormal:\n            return ColorPair(light: .graphite, dark: .white)\n        case .iconSelected:\n            return ColorPair(light: .white, dark: .black)\n        case .iconHighlighted:\n            return ColorPair(both: .white)\n        case .iconShadow:\n            return ColorPair(light: .blackAlpha8, dark: .blackAlpha24)\n        case .iconHighlight:\n            return ColorPair(light: .white, dark: .whiteAlpha16)\n        case .iconBackgroundSelected:\n            return ColorPair(light: accentColor, dark: .white)\n        case .iconBackgroundSelectedNoAccent:\n            return ColorPair(light: .graphite, dark: .white)\n        case .popUpButtonOverlayShadow:\n            return ColorPair(light: .blackAlpha24, dark: .black)\n        case .buttonHighlighted:\n            return ColorPair(light: .whiteAlpha24, dark: .blackAlpha24)\n        case .buttonEmptyText:\n            return ColorPair(light: accentColor, dark: .white)\n        case .buttonFaded:\n            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)\n        case .tabNormal:\n            return ColorPair(light: .blackAlpha48, dark: .whiteAlpha56)\n        case .tabSelected:\n            return ColorPair(light: .graphite, dark: .white)\n        case .tabHighlighted:\n            return ColorPair(light: .lightGraphite, dark: .lightGraphiteAlpha48)\n        case .backgroundOverlay:\n            return ColorPair(light: .blackAlpha24, dark: .blackAlpha48)\n        case .backgroundOverlayWithoutPicture:\n            return ColorPair(both: .blackAlpha80)\n        case .avatarBorder:\n            return ColorPair(light: .blackAlpha8, dark: .whiteAlpha16)\n        case .audioButtonOverlay:\n            return ColorPair(both: .lightGraphiteAlpha24)\n        case .placeholderBackground:\n            return ColorPair(light: .lightGraphiteWhite, dark: .lightGraphiteDark)\n        case .loadingDotActive:\n            return ColorPair(light: .graphiteAlpha40, dark: .whiteAlpha40)\n        case .loadingDotInactive:\n            return ColorPair(light: .graphiteAlpha16, dark: .whiteAlpha16)\n        case .paleSeparator:\n            return ColorPair(both: .lightGraphiteAlpha24)\n        case .listAvatarInitials:\n            return ColorPair(both: .blackAlpha40)\n        case .sectionBackground:\n            return ColorPair(both: .clear)\n        case .sectionBackgroundHighlighted:\n            return ColorPair(light: .graphiteAlpha4, dark: .backgroundLightGraphite)\n        case .sectionText:\n            return ColorPair(light: .blackAlpha40, dark: .whiteAlpha40)\n        case .tokenFieldBackground:\n            return ColorPair(light: .blackAlpha4, dark: .whiteAlpha16)\n        case .tokenFieldTextPlaceHolder:\n            return ColorPair(light: .lightGraphite, dark: .whiteAlpha40)\n        case .cellSeparator:\n            return ColorPair(light: .graphiteAlpha8, dark: .whiteAlpha8)\n        case .searchBarBackground:\n            return ColorPair(light: .white, dark: .whiteAlpha8)\n        case .iconGuest:\n            return ColorPair(light: .backgroundGraphiteAlpha40, dark: .whiteAlpha64)\n        case .selfMentionHighlight:\n            return ColorPair(light: .amberAlpha48, dark: .amberAlpha80)\n        case .cellHighlight:\n            return ColorPair(light: .white97, dark: .whiteAlpha16)\n        case .replyBorder:\n            return ColorPair(light: UIColor(white: 233.0/255.0, alpha: 1),\n                             dark: UIColor(white: 114.0/255.0, alpha: 1))\n        case .replyHighlight:\n            return ColorPair(light: UIColor(rgb: 0x33373A, alpha: 0.24),\n                             dark: UIColor(white: 1, alpha: 0.24))\n\n        case .secondaryAction:\n            return ColorPair(light: UIColor(rgb: 0xE8ECEE), dark: .backgroundLightGraphite)\n        case .secondaryActionDimmed:\n            return ColorPair(light: UIColor(rgb: 0xE8ECEE, alpha: 0.24), dark: UIColor.backgroundLightGraphite.withAlphaComponent(0.24))\n\n        case .errorIndicator:\n            return ColorPair(light: UIColor(rgb: 0xE60606), dark: UIColor(rgb: 0xFC3E37))\n\n        case .landingScreen:\n            return ColorPair(light: .graphiteDark, dark: .white)\n\n        case .utilityError:\n            return ColorPair(light: UIColor(rgb: 0xE41734), dark: UIColor(rgb: 0xFC7887))\n        case .utilityNeutral:\n            return ColorPair(light: UIColor(rgb: 0x0772DE), dark: UIColor(rgb: 0x26BDFF))\n        case .utilitySuccess:\n            return ColorPair(light: UIColor(rgb: 0x148545), dark: UIColor(rgb: 0x35C763))\n\n        case .textSecurityNotClassified:\n            return ColorPair(light: .white, dark: .graphite)\n        case .backgroundSecurityNotClassified:\n            return ColorPair(light: .graphite, dark: .white)\n\n        }\n    }\n}\n\nfinal class ColorScheme: NSObject {\n    private(set) var colors: [AnyHashable: Any]?\n\n    var variant: ColorSchemeVariant = .light\n\n    private(set) var defaultColorScheme: ColorScheme?\n    var accentColor: UIColor = .red\n\n    var keyboardAppearance: UIKeyboardAppearance {\n        return ColorScheme.keyboardAppearance(for: variant)\n    }\n\n    class func keyboardAppearance(for variant: ColorSchemeVariant) -> UIKeyboardAppearance {\n        return variant == .light ? .light : .dark\n    }\n\n    static let `default`: ColorScheme = ColorScheme()\n\n    func color(named: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {\n        let colorSchemeVariant = variant ?? self.variant\n\n        let colorPair = named.colorPair(accentColor: accentColor)\n        switch colorSchemeVariant {\n        case .dark:\n            return colorPair.dark\n        case .light:\n            return colorPair.light\n        }\n    }\n\n    func nameAccent(for color: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {\n        return UIColor.nameColor(for: color, variant: variant)\n    }\n\n}\n\nprivate struct ColorPair {\n    let light: UIColor\n    let dark: UIColor\n}\n\nprivate extension ColorPair {\n    init(both color: UIColor) {\n        self.init(light: color, dark: color)\n    }\n}\n\nextension UIColor {\n\n    static func from(scheme: ColorSchemeColor, variant: ColorSchemeVariant? = nil) -> UIColor {\n        return ColorScheme.default.color(named: scheme, variant: variant)\n    }\n\n    /// Creates UIColor instance with color corresponding to @p accentColor that can be used to display the name.\n    // NB: the order of coefficients must match ZMAccentColor enum ordering\n    private static let accentColorNameColorBlendingCoefficientsDark: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.8, 0.64]\n    private static let accentColorNameColorBlendingCoefficientsLight: [CGFloat] = [0.8, 0.8, 0.72, 1.0, 0.8, 0.8, 0.64, 1.0]\n\n    /// Creates UIColor instance with color corresponding to @p accentColor that can be used to display the name.\n    class func nameColor(for accentColor: ZMAccentColor, variant: ColorSchemeVariant) -> UIColor {\n        let accentColor = AccentColor(ZMAccentColor: accentColor) ?? .strongBlue\n        let coefficientsArray = variant == .dark ? accentColorNameColorBlendingCoefficientsDark : accentColorNameColorBlendingCoefficientsLight\n        let coefficient = coefficientsArray[Int(accentColor.rawValue)]\n        let background: UIColor = variant == .dark ? .black : .white\n        return background.mix(UIColor(for: accentColor), amount: coefficient)\n    }\n}\n\nextension ColorSchemeVariant {\n    func mainColor(color: UIColor?) -> UIColor {\n        return color ?? UIColor.from(scheme: .textForeground, variant: self)\n    }\n}\n"], "filenames": ["Wire-iOS/Sources/Helpers/ColorScheme.swift"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [329], "fixing_code_start_loc": [22], "fixing_code_end_loc": [327], "type": "CWE-617", "message": "wire-ios is an iOS client for the Wire secure messaging application. Invalid accent colors of Wire communication partners may render the iOS Wire Client partially unusable by causing it to crash multiple times on launch. These invalid accent colors can be used by and sent between Wire users. The root cause was an unnecessary assert statement when converting an integer value into the corresponding enum value, causing an exception instead of a fallback to a default value. This issue is fixed in [wire-ios](https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb) and in Wire for iOS 3.100. There is no workaround available, but users may use other Wire clients (such as the [web app](https://app.wire.com)) to continue using Wire, or upgrade their client.", "other": {"cve": {"id": "CVE-2022-31009", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-23T07:15:07.257", "lastModified": "2022-06-29T22:07:07.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "wire-ios is an iOS client for the Wire secure messaging application. Invalid accent colors of Wire communication partners may render the iOS Wire Client partially unusable by causing it to crash multiple times on launch. These invalid accent colors can be used by and sent between Wire users. The root cause was an unnecessary assert statement when converting an integer value into the corresponding enum value, causing an exception instead of a fallback to a default value. This issue is fixed in [wire-ios](https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb) and in Wire for iOS 3.100. There is no workaround available, but users may use other Wire clients (such as the [web app](https://app.wire.com)) to continue using Wire, or upgrade their client."}, {"lang": "es", "value": "wire-ios es un cliente iOS para la aplicaci\u00f3n de mensajer\u00eda segura Wire. Los colores de acento no v\u00e1lidos de los interlocutores de comunicaci\u00f3n de Wire pueden hacer que el cliente de Wire para iOS sea parcialmente inusable al hacer que sea bloqueado varias veces al iniciarse. Estos colores de acento no v\u00e1lidos pueden ser usados por los usuarios de Wire y enviados entre ellos. La causa principal era una sentencia assert innecesaria al convertir un valor entero en el valor enum correspondiente, causando una excepci\u00f3n en lugar de un retorno a un valor por defecto. Este problema ha sido corregido en [wire-ios](https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb) y en Wire para iOS versi\u00f3n 3.100. No se presenta ninguna mitigaci\u00f3n soluci\u00f3n disponible, pero los usuarios pueden usar otros clientes de Wire (como la [aplicaci\u00f3n web](https://app.wire.com)) para seguir usando Wire, o actualizar su cliente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wire:wire:*:*:*:*:*:iphone_os:*:*", "versionEndExcluding": "3.100", "matchCriteriaId": "EE5B3BFC-EC98-48AF-A866-2E3E463AAC7F"}]}]}], "references": [{"url": "https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-83m6-p7x5-925j", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb"}}