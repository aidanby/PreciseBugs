{"buggy_code": ["/*\n * GHASH: digest algorithm for GCM (Galois/Counter Mode).\n *\n * Copyright (c) 2007 Nokia Siemens Networks - Mikko Herranen <mh1@iki.fi>\n * Copyright (c) 2009 Intel Corp.\n *   Author: Huang Ying <ying.huang@intel.com>\n *\n * The algorithm implementation is copied from gcm.c.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 as published\n * by the Free Software Foundation.\n */\n\n#include <crypto/algapi.h>\n#include <crypto/gf128mul.h>\n#include <crypto/internal/hash.h>\n#include <linux/crypto.h>\n#include <linux/init.h>\n#include <linux/kernel.h>\n#include <linux/module.h>\n\n#define GHASH_BLOCK_SIZE\t16\n#define GHASH_DIGEST_SIZE\t16\n\nstruct ghash_ctx {\n\tstruct gf128mul_4k *gf128;\n};\n\nstruct ghash_desc_ctx {\n\tu8 buffer[GHASH_BLOCK_SIZE];\n\tu32 bytes;\n};\n\nstatic int ghash_init(struct shash_desc *desc)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\n\tmemset(dctx, 0, sizeof(*dctx));\n\n\treturn 0;\n}\n\nstatic int ghash_setkey(struct crypto_shash *tfm,\n\t\t\tconst u8 *key, unsigned int keylen)\n{\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(tfm);\n\n\tif (keylen != GHASH_BLOCK_SIZE) {\n\t\tcrypto_shash_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);\n\t\treturn -EINVAL;\n\t}\n\n\tif (ctx->gf128)\n\t\tgf128mul_free_4k(ctx->gf128);\n\tctx->gf128 = gf128mul_init_4k_lle((be128 *)key);\n\tif (!ctx->gf128)\n\t\treturn -ENOMEM;\n\n\treturn 0;\n}\n\nstatic int ghash_update(struct shash_desc *desc,\n\t\t\t const u8 *src, unsigned int srclen)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);\n\tu8 *dst = dctx->buffer;\n\n\tif (dctx->bytes) {\n\t\tint n = min(srclen, dctx->bytes);\n\t\tu8 *pos = dst + (GHASH_BLOCK_SIZE - dctx->bytes);\n\n\t\tdctx->bytes -= n;\n\t\tsrclen -= n;\n\n\t\twhile (n--)\n\t\t\t*pos++ ^= *src++;\n\n\t\tif (!dctx->bytes)\n\t\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t}\n\n\twhile (srclen >= GHASH_BLOCK_SIZE) {\n\t\tcrypto_xor(dst, src, GHASH_BLOCK_SIZE);\n\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t\tsrc += GHASH_BLOCK_SIZE;\n\t\tsrclen -= GHASH_BLOCK_SIZE;\n\t}\n\n\tif (srclen) {\n\t\tdctx->bytes = GHASH_BLOCK_SIZE - srclen;\n\t\twhile (srclen--)\n\t\t\t*dst++ ^= *src++;\n\t}\n\n\treturn 0;\n}\n\nstatic void ghash_flush(struct ghash_ctx *ctx, struct ghash_desc_ctx *dctx)\n{\n\tu8 *dst = dctx->buffer;\n\n\tif (dctx->bytes) {\n\t\tu8 *tmp = dst + (GHASH_BLOCK_SIZE - dctx->bytes);\n\n\t\twhile (dctx->bytes--)\n\t\t\t*tmp++ ^= 0;\n\n\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t}\n\n\tdctx->bytes = 0;\n}\n\nstatic int ghash_final(struct shash_desc *desc, u8 *dst)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);\n\tu8 *buf = dctx->buffer;\n\n\tghash_flush(ctx, dctx);\n\tmemcpy(dst, buf, GHASH_BLOCK_SIZE);\n\n\treturn 0;\n}\n\nstatic void ghash_exit_tfm(struct crypto_tfm *tfm)\n{\n\tstruct ghash_ctx *ctx = crypto_tfm_ctx(tfm);\n\tif (ctx->gf128)\n\t\tgf128mul_free_4k(ctx->gf128);\n}\n\nstatic struct shash_alg ghash_alg = {\n\t.digestsize\t= GHASH_DIGEST_SIZE,\n\t.init\t\t= ghash_init,\n\t.update\t\t= ghash_update,\n\t.final\t\t= ghash_final,\n\t.setkey\t\t= ghash_setkey,\n\t.descsize\t= sizeof(struct ghash_desc_ctx),\n\t.base\t\t= {\n\t\t.cra_name\t\t= \"ghash\",\n\t\t.cra_driver_name\t= \"ghash-generic\",\n\t\t.cra_priority\t\t= 100,\n\t\t.cra_flags\t\t= CRYPTO_ALG_TYPE_SHASH,\n\t\t.cra_blocksize\t\t= GHASH_BLOCK_SIZE,\n\t\t.cra_ctxsize\t\t= sizeof(struct ghash_ctx),\n\t\t.cra_module\t\t= THIS_MODULE,\n\t\t.cra_list\t\t= LIST_HEAD_INIT(ghash_alg.base.cra_list),\n\t\t.cra_exit\t\t= ghash_exit_tfm,\n\t},\n};\n\nstatic int __init ghash_mod_init(void)\n{\n\treturn crypto_register_shash(&ghash_alg);\n}\n\nstatic void __exit ghash_mod_exit(void)\n{\n\tcrypto_unregister_shash(&ghash_alg);\n}\n\nmodule_init(ghash_mod_init);\nmodule_exit(ghash_mod_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_DESCRIPTION(\"GHASH Message Digest Algorithm\");\nMODULE_ALIAS(\"ghash\");\n"], "fixing_code": ["/*\n * GHASH: digest algorithm for GCM (Galois/Counter Mode).\n *\n * Copyright (c) 2007 Nokia Siemens Networks - Mikko Herranen <mh1@iki.fi>\n * Copyright (c) 2009 Intel Corp.\n *   Author: Huang Ying <ying.huang@intel.com>\n *\n * The algorithm implementation is copied from gcm.c.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 as published\n * by the Free Software Foundation.\n */\n\n#include <crypto/algapi.h>\n#include <crypto/gf128mul.h>\n#include <crypto/internal/hash.h>\n#include <linux/crypto.h>\n#include <linux/init.h>\n#include <linux/kernel.h>\n#include <linux/module.h>\n\n#define GHASH_BLOCK_SIZE\t16\n#define GHASH_DIGEST_SIZE\t16\n\nstruct ghash_ctx {\n\tstruct gf128mul_4k *gf128;\n};\n\nstruct ghash_desc_ctx {\n\tu8 buffer[GHASH_BLOCK_SIZE];\n\tu32 bytes;\n};\n\nstatic int ghash_init(struct shash_desc *desc)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\n\tmemset(dctx, 0, sizeof(*dctx));\n\n\treturn 0;\n}\n\nstatic int ghash_setkey(struct crypto_shash *tfm,\n\t\t\tconst u8 *key, unsigned int keylen)\n{\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(tfm);\n\n\tif (keylen != GHASH_BLOCK_SIZE) {\n\t\tcrypto_shash_set_flags(tfm, CRYPTO_TFM_RES_BAD_KEY_LEN);\n\t\treturn -EINVAL;\n\t}\n\n\tif (ctx->gf128)\n\t\tgf128mul_free_4k(ctx->gf128);\n\tctx->gf128 = gf128mul_init_4k_lle((be128 *)key);\n\tif (!ctx->gf128)\n\t\treturn -ENOMEM;\n\n\treturn 0;\n}\n\nstatic int ghash_update(struct shash_desc *desc,\n\t\t\t const u8 *src, unsigned int srclen)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);\n\tu8 *dst = dctx->buffer;\n\n\tif (!ctx->gf128)\n\t\treturn -ENOKEY;\n\n\tif (dctx->bytes) {\n\t\tint n = min(srclen, dctx->bytes);\n\t\tu8 *pos = dst + (GHASH_BLOCK_SIZE - dctx->bytes);\n\n\t\tdctx->bytes -= n;\n\t\tsrclen -= n;\n\n\t\twhile (n--)\n\t\t\t*pos++ ^= *src++;\n\n\t\tif (!dctx->bytes)\n\t\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t}\n\n\twhile (srclen >= GHASH_BLOCK_SIZE) {\n\t\tcrypto_xor(dst, src, GHASH_BLOCK_SIZE);\n\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t\tsrc += GHASH_BLOCK_SIZE;\n\t\tsrclen -= GHASH_BLOCK_SIZE;\n\t}\n\n\tif (srclen) {\n\t\tdctx->bytes = GHASH_BLOCK_SIZE - srclen;\n\t\twhile (srclen--)\n\t\t\t*dst++ ^= *src++;\n\t}\n\n\treturn 0;\n}\n\nstatic void ghash_flush(struct ghash_ctx *ctx, struct ghash_desc_ctx *dctx)\n{\n\tu8 *dst = dctx->buffer;\n\n\tif (dctx->bytes) {\n\t\tu8 *tmp = dst + (GHASH_BLOCK_SIZE - dctx->bytes);\n\n\t\twhile (dctx->bytes--)\n\t\t\t*tmp++ ^= 0;\n\n\t\tgf128mul_4k_lle((be128 *)dst, ctx->gf128);\n\t}\n\n\tdctx->bytes = 0;\n}\n\nstatic int ghash_final(struct shash_desc *desc, u8 *dst)\n{\n\tstruct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\n\tstruct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);\n\tu8 *buf = dctx->buffer;\n\n\tif (!ctx->gf128)\n\t\treturn -ENOKEY;\n\n\tghash_flush(ctx, dctx);\n\tmemcpy(dst, buf, GHASH_BLOCK_SIZE);\n\n\treturn 0;\n}\n\nstatic void ghash_exit_tfm(struct crypto_tfm *tfm)\n{\n\tstruct ghash_ctx *ctx = crypto_tfm_ctx(tfm);\n\tif (ctx->gf128)\n\t\tgf128mul_free_4k(ctx->gf128);\n}\n\nstatic struct shash_alg ghash_alg = {\n\t.digestsize\t= GHASH_DIGEST_SIZE,\n\t.init\t\t= ghash_init,\n\t.update\t\t= ghash_update,\n\t.final\t\t= ghash_final,\n\t.setkey\t\t= ghash_setkey,\n\t.descsize\t= sizeof(struct ghash_desc_ctx),\n\t.base\t\t= {\n\t\t.cra_name\t\t= \"ghash\",\n\t\t.cra_driver_name\t= \"ghash-generic\",\n\t\t.cra_priority\t\t= 100,\n\t\t.cra_flags\t\t= CRYPTO_ALG_TYPE_SHASH,\n\t\t.cra_blocksize\t\t= GHASH_BLOCK_SIZE,\n\t\t.cra_ctxsize\t\t= sizeof(struct ghash_ctx),\n\t\t.cra_module\t\t= THIS_MODULE,\n\t\t.cra_list\t\t= LIST_HEAD_INIT(ghash_alg.base.cra_list),\n\t\t.cra_exit\t\t= ghash_exit_tfm,\n\t},\n};\n\nstatic int __init ghash_mod_init(void)\n{\n\treturn crypto_register_shash(&ghash_alg);\n}\n\nstatic void __exit ghash_mod_exit(void)\n{\n\tcrypto_unregister_shash(&ghash_alg);\n}\n\nmodule_init(ghash_mod_init);\nmodule_exit(ghash_mod_exit);\n\nMODULE_LICENSE(\"GPL\");\nMODULE_DESCRIPTION(\"GHASH Message Digest Algorithm\");\nMODULE_ALIAS(\"ghash\");\n"], "filenames": ["crypto/ghash-generic.c"], "buggy_code_start_loc": [69], "buggy_code_end_loc": [121], "fixing_code_start_loc": [70], "fixing_code_end_loc": [128], "type": "CWE-476", "message": "crypto/ghash-generic.c in the Linux kernel before 3.1 allows local users to cause a denial of service (NULL pointer dereference and OOPS) or possibly have unspecified other impact by triggering a failed or missing ghash_setkey function call, followed by a (1) ghash_update function call or (2) ghash_final function call, as demonstrated by a write operation on an AF_ALG socket.", "other": {"cve": {"id": "CVE-2011-4081", "sourceIdentifier": "secalert@redhat.com", "published": "2012-05-24T23:55:02.480", "lastModified": "2023-02-13T04:32:43.337", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "crypto/ghash-generic.c in the Linux kernel before 3.1 allows local users to cause a denial of service (NULL pointer dereference and OOPS) or possibly have unspecified other impact by triggering a failed or missing ghash_setkey function call, followed by a (1) ghash_update function call or (2) ghash_final function call, as demonstrated by a write operation on an AF_ALG socket."}, {"lang": "es", "value": "crypto/ghash-generic.c en el kernel de Linux antes de v3.1 permite a usuarios locales causar una denegaci\u00f3n de servicio (desreferencia de puntero NULL y OOPS) o posiblemente tener un impacto no especificado mediante la activaci\u00f3n de un fallo o ausencia de llamada a la funci\u00f3n ghash_setkey, seguido por una (1) llamada a la funci\u00f3n ghash_update o (2) llamada a la funci\u00f3n ghash_final, como se demuestra por una operaci\u00f3n de escritura en un socket AF_ALG."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:C", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "COMPLETE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1", "matchCriteriaId": "156989A4-23D9-434A-B512-9C0F3583D13D"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=7ed47b7d142ec99ad6880bbbec51e9f12b3af74c", "source": "secalert@redhat.com"}, {"url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.1", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Vendor Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2011/10/27/2", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=749475", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/7ed47b7d142ec99ad6880bbbec51e9f12b3af74c", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/7ed47b7d142ec99ad6880bbbec51e9f12b3af74c"}}