{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\n/**\n * Management of elements set. Elements can belong to a category or to the\n * user caddie.\n *\n */\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die('Hacking attempt!');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\n\ncheck_status(ACCESS_ADMINISTRATOR);\n\ncheck_input_parameter('selection', $_POST, true, PATTERN_ID);\n\n// +-----------------------------------------------------------------------+\n// | specific actions                                                      |\n// +-----------------------------------------------------------------------+\n\nif (isset($_GET['action']))\n{\n  if ('empty_caddie' == $_GET['action'])\n  {\n    $query = '\nDELETE FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    pwg_query($query);\n\n    $_SESSION['page_infos'] = array(\n      l10n('Information data registered in database')\n      );\n    \n    redirect(get_root_url().'admin.php?page='.$_GET['page']);\n  }\n\n  if ('delete_orphans' == $_GET['action'])\n  {\n    check_pwg_token();\n\n    $deleted_count = delete_elements(get_orphans(), true);\n    \n    if ($deleted_count > 0)\n    {\n      $_SESSION['page_infos'][] = l10n_dec(\n        '%d photo was deleted', '%d photos were deleted',\n        $deleted_count\n        );\n\n      redirect(get_root_url().'admin.php?page='.$_GET['page']);\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                      initialize current set                           |\n// +-----------------------------------------------------------------------+\n\n// filters from form\nif (isset($_POST['submitFilter']))\n{\n  // echo '<pre>'; print_r($_POST); echo '</pre>';\n  unset($_REQUEST['start']); // new photo set must reset the page\n  $_SESSION['bulk_manager_filter'] = array();\n\n  if (isset($_POST['filter_prefilter_use']))\n  {\n    $_SESSION['bulk_manager_filter']['prefilter'] = $_POST['filter_prefilter'];\n\n    if ('duplicates' == $_POST['filter_prefilter'])\n    {\n      $has_options = false;\n\n      if (isset($_POST['filter_duplicates_checksum']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_checksum'] = true;\n        $has_options = true;\n      }\n\n      if (isset($_POST['filter_duplicates_date']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_date'] = true;\n        $has_options = true;\n      }\n      \n      if (isset($_POST['filter_duplicates_dimensions']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_dimensions'] = true;\n        $has_options = true;\n      }\n\n      if (!$has_options or isset($_POST['filter_duplicates_filename']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_filename'] = true;\n      }\n    }\n  }\n\n  if (isset($_POST['filter_category_use']))\n  {\n    $_SESSION['bulk_manager_filter']['category'] = $_POST['filter_category'];\n\n    if (isset($_POST['filter_category_recursive']))\n    {\n      $_SESSION['bulk_manager_filter']['category_recursive'] = true;\n    }\n  }\n\n  if (isset($_POST['filter_tags_use']))\n  {\n    $_SESSION['bulk_manager_filter']['tags'] = get_tag_ids($_POST['filter_tags'], false);\n\n    if (isset($_POST['tag_mode']) and in_array($_POST['tag_mode'], array('AND', 'OR')))\n    {\n      $_SESSION['bulk_manager_filter']['tag_mode'] = $_POST['tag_mode'];\n    }\n  }\n\n  if (isset($_POST['filter_level_use']))\n  {\n    check_input_parameter('filter_level', $_POST, false, '/^\\d+$/');\n    \n    if (in_array($_POST['filter_level'], $conf['available_permission_levels']))\n    {\n      $_SESSION['bulk_manager_filter']['level'] = $_POST['filter_level'];\n\n      if (isset($_POST['filter_level_include_lower']))\n      {\n        $_SESSION['bulk_manager_filter']['level_include_lower'] = true;\n      }\n    }\n  }\n\n  if (isset($_POST['filter_dimension_use']))\n  {\n    foreach (array('min_width','max_width','min_height','max_height') as $type)\n    {\n      if (filter_var($_POST['filter_dimension_'.$type], FILTER_VALIDATE_INT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['dimension'][$type] = $_POST['filter_dimension_'. $type ];\n      }\n    }\n    foreach (array('min_ratio','max_ratio') as $type)\n    {\n      if (filter_var($_POST['filter_dimension_'.$type], FILTER_VALIDATE_FLOAT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['dimension'][$type] = $_POST['filter_dimension_'. $type ];\n      }\n    }\n  }\n\n  if (isset($_POST['filter_filesize_use']))\n  {\n    foreach (array('min','max') as $type)\n    {\n      if (filter_var($_POST['filter_filesize_'.$type], FILTER_VALIDATE_FLOAT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['filesize'][$type] = $_POST['filter_filesize_'. $type ];\n      }\n    }\n  }\n\n  if (isset($_POST['filter_search_use']))\n  {\n    $_SESSION['bulk_manager_filter']['search']['q'] = $_POST['q'];\n  }\n\n  $_SESSION['bulk_manager_filter'] = trigger_change('batch_manager_register_filters', $_SESSION['bulk_manager_filter']);\n}\n// filters from url\nelseif (isset($_GET['filter']))\n{\n  if (!is_array($_GET['filter']))\n  {\n    $_GET['filter'] = explode(',', $_GET['filter']);\n  }\n\n  $_SESSION['bulk_manager_filter'] = array();\n\n  foreach ($_GET['filter'] as $filter)\n  {\n    list($type, $value) = explode('-', $filter, 2);\n\n    switch ($type)\n    {\n    case 'prefilter':\n      $_SESSION['bulk_manager_filter']['prefilter'] = $value;\n      break;\n\n    case 'album': case 'category': case 'cat':\n      if (is_numeric($value))\n      {\n        $_SESSION['bulk_manager_filter']['category'] = $value;\n      }\n      break;\n\n    case 'tag':\n      if (is_numeric($value))\n      {\n        $_SESSION['bulk_manager_filter']['tags'] = array($value);\n        $_SESSION['bulk_manager_filter']['tag_mode'] = 'AND';\n      }\n      break;\n\n    case 'level':\n      if (is_numeric($value) && in_array($value, $conf['available_permission_levels']))\n      {\n        $_SESSION['bulk_manager_filter']['level'] = $value;\n      }\n      break;\n\n    case 'search':\n      $_SESSION['bulk_manager_filter']['search']['q'] = $value;\n      break;\n\n    case 'dimension':\n      $dim_map = array('w'=>'width','h'=>'height','r'=>'ratio');\n      foreach (explode('-', $value) as $part)\n      {\n        $values = explode('..', substr($part, 1));\n        if (isset($dim_map[$part[0]]))\n        {\n          $type = $dim_map[$part[0]];\n          list(\n            $_SESSION['bulk_manager_filter']['dimension']['min_'.$type],\n            $_SESSION['bulk_manager_filter']['dimension']['max_'.$type]\n          ) = $values;\n        }\n      }\n      break;\n\n    case 'filesize':\n      list(\n        $_SESSION['bulk_manager_filter']['filesize']['min'],\n        $_SESSION['bulk_manager_filter']['filesize']['max']\n      ) = explode('..', $value);\n      break;\n\n    default:\n      $_SESSION['bulk_manager_filter'] = trigger_change('batch_manager_url_filter', $_SESSION['bulk_manager_filter'], $filter);\n      break;\n    }\n  }\n}\n\nif (empty($_SESSION['bulk_manager_filter']))\n{\n  $_SESSION['bulk_manager_filter'] = array(\n    'prefilter' => 'caddie'\n    );\n}\n\n// echo '<pre>'; print_r($_SESSION['bulk_manager_filter']); echo '</pre>';\n\n// depending on the current filter (in session), we find the appropriate photos\n$filter_sets = array();\nif (isset($_SESSION['bulk_manager_filter']['prefilter']))\n{\n  switch ($_SESSION['bulk_manager_filter']['prefilter'])\n  {\n  case 'caddie':\n    $query = '\nSELECT element_id\n  FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    $filter_sets[] = query2array($query, null, 'element_id');\n\n    break;\n\n  case 'favorites':\n    $query = '\nSELECT image_id\n  FROM '.FAVORITES_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    $filter_sets[] = query2array($query, null, 'image_id');\n\n    break;\n\n  case 'last_import':\n    $query = '\nSELECT MAX(date_available) AS date\n  FROM '.IMAGES_TABLE.'\n;';\n    $row = pwg_db_fetch_assoc(pwg_query($query));\n    if (!empty($row['date']))\n    {\n      $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE date_available BETWEEN '.pwg_db_get_recent_period_expression(1, $row['date']).' AND \\''.$row['date'].'\\'\n;';\n      $filter_sets[] = query2array($query, null, 'id');\n    }\n\n    break;\n\n  case 'no_virtual_album':\n    // we are searching elements not linked to any virtual category\n    $query = '\n SELECT id\n   FROM '.IMAGES_TABLE.'\n ;';\n    $all_elements = query2array($query, null, 'id');\n\n    $query = '\n SELECT id\n   FROM '.CATEGORIES_TABLE.'\n   WHERE dir IS NULL\n ;';\n    $virtual_categories = query2array($query, null, 'id');\n    if (!empty($virtual_categories))\n    {\n      $query = '\n SELECT DISTINCT(image_id)\n   FROM '.IMAGE_CATEGORY_TABLE.'\n   WHERE category_id IN ('.implode(',', $virtual_categories).')\n ;';\n      $linked_to_virtual = query2array($query, null, 'image_id');\n    }\n\n    $filter_sets[] = array_diff($all_elements, $linked_to_virtual);\n\n    break;\n\n  case 'no_album':\n    $filter_sets[] = get_orphans();\n    break;\n\n  case 'no_tag':\n    $query = '\nSELECT\n    id\n  FROM '.IMAGES_TABLE.'\n    LEFT JOIN '.IMAGE_TAG_TABLE.' ON id = image_id\n  WHERE tag_id is null\n;';\n    $filter_sets[] = query2array($query, null, 'id');\n\n    break;\n\n\n  case 'duplicates':\n    $duplicates_on_fields = array();\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_filename']))\n    {\n      $duplicates_on_fields[] = 'file';\n    }\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_checksum']))\n    {\n      $duplicates_on_fields[] = 'md5sum';\n    }\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_date']))\n    {\n      $duplicates_on_fields[] = 'date_creation';\n    }\n    \n    if (isset($_SESSION['bulk_manager_filter']['duplicates_dimensions']))\n    {\n      $duplicates_on_fields[] = 'width';\n      $duplicates_on_fields[] = 'height';\n    }\n    \n    $query = '\nSELECT\n    GROUP_CONCAT(id) AS ids\n  FROM '.IMAGES_TABLE.'\n  GROUP BY '.implode(',', $duplicates_on_fields).'\n  HAVING COUNT(*) > 1\n;';\n    $array_of_ids_string = query2array($query, null, 'ids');\n\n    $ids = array();\n    \n    foreach ($array_of_ids_string as $ids_string)\n    {\n      $ids = array_merge($ids, explode(',', $ids_string));\n    }\n    \n    $filter_sets[] = $ids;\n\n    break;\n\n  case 'all_photos':\n    if ( count($_SESSION['bulk_manager_filter']) == 1 )\n    {// make the query only if this is the only filter\n      $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  '.$conf['order_by'];\n\n      $filter_sets[] = query2array($query, null, 'id');\n    }\n    break;\n\n  default:\n    $filter_sets = trigger_change('perform_batch_manager_prefilters', $filter_sets, $_SESSION['bulk_manager_filter']['prefilter']);\n    break;\n  }\n}\n\nif (isset($_SESSION['bulk_manager_filter']['category']))\n{\n  $categories = array();\n\n  if (isset($_SESSION['bulk_manager_filter']['category_recursive']))\n  {\n    $categories = get_subcat_ids(array($_SESSION['bulk_manager_filter']['category']));\n  }\n  else\n  {\n    $categories = array($_SESSION['bulk_manager_filter']['category']);\n  }\n\n  $query = '\n SELECT DISTINCT(image_id)\n   FROM '.IMAGE_CATEGORY_TABLE.'\n   WHERE category_id IN ('.implode(',', $categories).')\n ;';\n  $filter_sets[] = query2array($query, null, 'image_id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['level']))\n{\n  $operator = '=';\n  if (isset($_SESSION['bulk_manager_filter']['level_include_lower']))\n  {\n    $operator = '<=';\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE level '.$operator.' '.$_SESSION['bulk_manager_filter']['level'].'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (!empty($_SESSION['bulk_manager_filter']['tags']))\n{\n  $filter_sets[] = get_image_ids_for_tags(\n    $_SESSION['bulk_manager_filter']['tags'],\n    $_SESSION['bulk_manager_filter']['tag_mode'],\n    null,\n    null,\n    false // we don't apply permissions in administration screens\n    );\n}\n\nif (isset($_SESSION['bulk_manager_filter']['dimension']))\n{\n  $where_clauses = array();\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_width']))\n  {\n    $where_clause[] = 'width >= '.$_SESSION['bulk_manager_filter']['dimension']['min_width'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_width']))\n  {\n    $where_clause[] = 'width <= '.$_SESSION['bulk_manager_filter']['dimension']['max_width'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_height']))\n  {\n    $where_clause[] = 'height >= '.$_SESSION['bulk_manager_filter']['dimension']['min_height'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_height']))\n  {\n    $where_clause[] = 'height <= '.$_SESSION['bulk_manager_filter']['dimension']['max_height'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_ratio']))\n  {\n    $where_clause[] = 'width/height >= '.$_SESSION['bulk_manager_filter']['dimension']['min_ratio'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_ratio']))\n  {\n    // max_ratio is a floor value, so must be a bit increased\n    $where_clause[] = 'width/height < '.($_SESSION['bulk_manager_filter']['dimension']['max_ratio']+0.01);\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE '.implode(' AND ',$where_clause).'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['filesize']))\n{\n  $where_clauses = array();\n  \n  if (isset($_SESSION['bulk_manager_filter']['filesize']['min']))\n  {\n    $where_clause[] = 'filesize >= '.$_SESSION['bulk_manager_filter']['filesize']['min']*1024;\n  }\n  \n  if (isset($_SESSION['bulk_manager_filter']['filesize']['max']))\n  {\n    $where_clause[] = 'filesize <= '.$_SESSION['bulk_manager_filter']['filesize']['max']*1024;\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE '.implode(' AND ',$where_clause).'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['search']) && \n    strlen($_SESSION['bulk_manager_filter']['search']['q']))\n{\n  include_once( PHPWG_ROOT_PATH .'include/functions_search.inc.php' );\n  $res = get_quick_search_results_no_cache($_SESSION['bulk_manager_filter']['search']['q'], array('permissions'=>false));\n  if (!empty($res['items']) && !empty($res['qs']['unmatched_terms']))\n  {\n    $template->assign('no_search_results', array_map('htmlspecialchars', $res['qs']['unmatched_terms']) );\n  }\n  $filter_sets[] = $res['items'];\n}\n\n$filter_sets = trigger_change('batch_manager_perform_filters', $filter_sets, $_SESSION['bulk_manager_filter']);\n\n$current_set = array_shift($filter_sets);\nforeach ($filter_sets as $set)\n{\n  $current_set = array_intersect($current_set, $set);\n}\n$page['cat_elements_id'] = $current_set;\n\n\n// +-----------------------------------------------------------------------+\n// |                       first element to display                        |\n// +-----------------------------------------------------------------------+\n\n// $page['start'] contains the number of the first element in its\n// category. For exampe, $page['start'] = 12 means we must show elements #12\n// and $page['nb_images'] next elements\n\nif (!isset($_REQUEST['start'])\n    or !is_numeric($_REQUEST['start'])\n    or $_REQUEST['start'] < 0\n    or (isset($_REQUEST['display']) and 'all' == $_REQUEST['display']))\n{\n  $page['start'] = 0;\n}\nelse\n{\n  $page['start'] = $_REQUEST['start'];\n}\n\n\n// +-----------------------------------------------------------------------+\n// |                                 Tabs                                  |\n// +-----------------------------------------------------------------------+\n$manager_link = get_root_url().'admin.php?page=batch_manager&amp;mode=';\n\nif (isset($_GET['mode']))\n{\n  $page['tab'] = $_GET['mode'];\n}\nelse\n{\n  $page['tab'] = 'global';\n}\n\n$tabsheet = new tabsheet();\n$tabsheet->set_id('batch_manager');\n$tabsheet->select($page['tab']);\n$tabsheet->assign();\n\n\n// +-----------------------------------------------------------------------+\n// |                              dimensions                               |\n// +-----------------------------------------------------------------------+\n\n$widths = array();\n$heights = array();\n$ratios = array();\n$dimensions = array();\n\n// get all width, height and ratios\n$query = '\nSELECT\n  DISTINCT width, height\n  FROM '.IMAGES_TABLE.'\n  WHERE width IS NOT NULL\n    AND height IS NOT NULL\n;';\n$result = pwg_query($query);\n\nif (pwg_db_num_rows($result))\n{\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if ($row['width']>0 && $row['height']>0)\n    {\n      $widths[] = $row['width'];\n      $heights[] = $row['height'];\n      $ratios[] = floor($row['width'] / $row['height'] * 100) / 100;\n    }\n  }\n}\nif (empty($widths))\n{ // arbitrary values, only used when no photos on the gallery\n  $widths = array(600, 1920, 3500);\n  $heights = array(480, 1080, 2300);\n  $ratios = array(1.25, 1.52, 1.78);\n}\n\nforeach (array('widths','heights','ratios') as $type)\n{\n  ${$type} = array_unique(${$type});\n  sort(${$type});\n  $dimensions[$type] = implode(',', ${$type});\n}\n\n$dimensions['bounds'] = array(\n  'min_width' => $widths[0],\n  'max_width' => end($widths),\n  'min_height' => $heights[0],\n  'max_height' => end($heights),\n  'min_ratio' => $ratios[0],\n  'max_ratio' => end($ratios),\n  );\n\n// find ratio categories\n$ratio_categories = array(\n  'portrait' => array(),\n  'square' => array(),\n  'landscape' => array(),\n  'panorama' => array(),\n  );\n\nforeach ($ratios as $ratio)\n{\n  if ($ratio < 0.95)\n  {\n    $ratio_categories['portrait'][] = $ratio;\n  }\n  else if ($ratio >= 0.95 and $ratio <= 1.05)\n  {\n    $ratio_categories['square'][] = $ratio;\n  }\n  else if ($ratio > 1.05 and $ratio < 2)\n  {\n    $ratio_categories['landscape'][] = $ratio;\n  }\n  else if ($ratio >= 2)\n  {\n    $ratio_categories['panorama'][] = $ratio;\n  }\n}\n\nforeach (array_keys($ratio_categories) as $type)\n{\n  if (count($ratio_categories[$type]) > 0)\n  {\n    $dimensions['ratio_'.$type] = array(\n      'min' => $ratio_categories[$type][0],\n      'max' => end($ratio_categories[$type]),\n      );\n  }\n}\n\n// selected=bound if nothing selected\nforeach (array_keys($dimensions['bounds']) as $type)\n{\n  $dimensions['selected'][$type] = isset($_SESSION['bulk_manager_filter']['dimension'][$type])\n    ? $_SESSION['bulk_manager_filter']['dimension'][$type]\n    : $dimensions['bounds'][$type]\n  ;\n}\n\n$template->assign('dimensions', $dimensions);\n\n// +-----------------------------------------------------------------------+\n// | filesize                                                              |\n// +-----------------------------------------------------------------------+\n\n$filesizes = array();\n$filesize = array();\n\n$query = '\nSELECT\n  filesize\n  FROM '.IMAGES_TABLE.'\n  WHERE filesize IS NOT NULL\n  GROUP BY filesize\n;';\n$result = pwg_query($query);\n\nwhile ($row = pwg_db_fetch_assoc($result))\n{\n  $filesizes[] = sprintf('%.1f', $row['filesize']/1024);\n}\n\nif (empty($filesizes))\n{ // arbitrary values, only used when no photos on the gallery\n  $filesizes = array(0, 1, 2, 5, 8, 15);\n}\n\n$filesizes = array_unique($filesizes);\nsort($filesizes);\n\n// add 0.1MB to the last value, to make sure the heavier photo will be in\n// the result\n$filesizes[count($filesizes)-1]+= 0.1;\n\n$filesize['list'] = implode(',', $filesizes);\n\n$filesize['bounds'] = array(\n  'min' => $filesizes[0],\n  'max' => end($filesizes),\n  );\n\n// selected=bound if nothing selected\nforeach (array_keys($filesize['bounds']) as $type)\n{\n  $filesize['selected'][$type] = isset($_SESSION['bulk_manager_filter']['filesize'][$type])\n    ? $_SESSION['bulk_manager_filter']['filesize'][$type]\n    : $filesize['bounds'][$type]\n  ;\n}\n\n$template->assign('filesize', $filesize);\n\n// +-----------------------------------------------------------------------+\n// |                         open specific mode                            |\n// +-----------------------------------------------------------------------+\n\ninclude(PHPWG_ROOT_PATH.'admin/batch_manager_'.$page['tab'].'.php');\n?>"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\n/**\n * Management of elements set. Elements can belong to a category or to the\n * user caddie.\n *\n */\n\nif (!defined('PHPWG_ROOT_PATH'))\n{\n  die('Hacking attempt!');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/tabsheet.class.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\n\ncheck_status(ACCESS_ADMINISTRATOR);\n\ncheck_input_parameter('selection', $_POST, true, PATTERN_ID);\n\n// +-----------------------------------------------------------------------+\n// | specific actions                                                      |\n// +-----------------------------------------------------------------------+\n\nif (isset($_GET['action']))\n{\n  if ('empty_caddie' == $_GET['action'])\n  {\n    $query = '\nDELETE FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    pwg_query($query);\n\n    $_SESSION['page_infos'] = array(\n      l10n('Information data registered in database')\n      );\n    \n    redirect(get_root_url().'admin.php?page='.$_GET['page']);\n  }\n\n  if ('delete_orphans' == $_GET['action'])\n  {\n    check_pwg_token();\n\n    $deleted_count = delete_elements(get_orphans(), true);\n    \n    if ($deleted_count > 0)\n    {\n      $_SESSION['page_infos'][] = l10n_dec(\n        '%d photo was deleted', '%d photos were deleted',\n        $deleted_count\n        );\n\n      redirect(get_root_url().'admin.php?page='.$_GET['page']);\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                      initialize current set                           |\n// +-----------------------------------------------------------------------+\n\n// filters from form\nif (isset($_POST['submitFilter']))\n{\n  // echo '<pre>'; print_r($_POST); echo '</pre>';\n  unset($_REQUEST['start']); // new photo set must reset the page\n  $_SESSION['bulk_manager_filter'] = array();\n\n  if (isset($_POST['filter_prefilter_use']))\n  {\n    $_SESSION['bulk_manager_filter']['prefilter'] = $_POST['filter_prefilter'];\n\n    if ('duplicates' == $_POST['filter_prefilter'])\n    {\n      $has_options = false;\n\n      if (isset($_POST['filter_duplicates_checksum']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_checksum'] = true;\n        $has_options = true;\n      }\n\n      if (isset($_POST['filter_duplicates_date']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_date'] = true;\n        $has_options = true;\n      }\n      \n      if (isset($_POST['filter_duplicates_dimensions']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_dimensions'] = true;\n        $has_options = true;\n      }\n\n      if (!$has_options or isset($_POST['filter_duplicates_filename']))\n      {\n        $_SESSION['bulk_manager_filter']['duplicates_filename'] = true;\n      }\n    }\n  }\n\n  if (isset($_POST['filter_category_use']))\n  {\n    $_SESSION['bulk_manager_filter']['category'] = $_POST['filter_category'];\n\n    if (isset($_POST['filter_category_recursive']))\n    {\n      $_SESSION['bulk_manager_filter']['category_recursive'] = true;\n    }\n  }\n\n  if (isset($_POST['filter_tags_use']))\n  {\n    $_SESSION['bulk_manager_filter']['tags'] = get_tag_ids($_POST['filter_tags'], false);\n\n    if (isset($_POST['tag_mode']) and in_array($_POST['tag_mode'], array('AND', 'OR')))\n    {\n      $_SESSION['bulk_manager_filter']['tag_mode'] = $_POST['tag_mode'];\n    }\n  }\n\n  if (isset($_POST['filter_level_use']))\n  {\n    check_input_parameter('filter_level', $_POST, false, '/^\\d+$/');\n    \n    if (in_array($_POST['filter_level'], $conf['available_permission_levels']))\n    {\n      $_SESSION['bulk_manager_filter']['level'] = $_POST['filter_level'];\n\n      if (isset($_POST['filter_level_include_lower']))\n      {\n        $_SESSION['bulk_manager_filter']['level_include_lower'] = true;\n      }\n    }\n  }\n\n  if (isset($_POST['filter_dimension_use']))\n  {\n    foreach (array('min_width','max_width','min_height','max_height') as $type)\n    {\n      if (filter_var($_POST['filter_dimension_'.$type], FILTER_VALIDATE_INT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['dimension'][$type] = $_POST['filter_dimension_'. $type ];\n      }\n    }\n    foreach (array('min_ratio','max_ratio') as $type)\n    {\n      if (filter_var($_POST['filter_dimension_'.$type], FILTER_VALIDATE_FLOAT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['dimension'][$type] = $_POST['filter_dimension_'. $type ];\n      }\n    }\n  }\n\n  if (isset($_POST['filter_filesize_use']))\n  {\n    foreach (array('min','max') as $type)\n    {\n      if (filter_var($_POST['filter_filesize_'.$type], FILTER_VALIDATE_FLOAT) !== false)\n      {\n        $_SESSION['bulk_manager_filter']['filesize'][$type] = $_POST['filter_filesize_'. $type ];\n      }\n    }\n  }\n\n  if (isset($_POST['filter_search_use']))\n  {\n    $_SESSION['bulk_manager_filter']['search']['q'] = $_POST['q'];\n  }\n\n  $_SESSION['bulk_manager_filter'] = trigger_change('batch_manager_register_filters', $_SESSION['bulk_manager_filter']);\n}\n// filters from url\nelseif (isset($_GET['filter']))\n{\n  if (!is_array($_GET['filter']))\n  {\n    $_GET['filter'] = explode(',', $_GET['filter']);\n  }\n\n  $_SESSION['bulk_manager_filter'] = array();\n\n  foreach ($_GET['filter'] as $filter)\n  {\n    list($type, $value) = explode('-', $filter, 2);\n\n    switch ($type)\n    {\n    case 'prefilter':\n      $_SESSION['bulk_manager_filter']['prefilter'] = $value;\n      break;\n\n    case 'album': case 'category': case 'cat':\n      if (is_numeric($value))\n      {\n        $_SESSION['bulk_manager_filter']['category'] = $value;\n      }\n      break;\n\n    case 'tag':\n      if (is_numeric($value))\n      {\n        $_SESSION['bulk_manager_filter']['tags'] = array($value);\n        $_SESSION['bulk_manager_filter']['tag_mode'] = 'AND';\n      }\n      break;\n\n    case 'level':\n      if (is_numeric($value) && in_array($value, $conf['available_permission_levels']))\n      {\n        $_SESSION['bulk_manager_filter']['level'] = $value;\n      }\n      break;\n\n    case 'search':\n      $_SESSION['bulk_manager_filter']['search']['q'] = $value;\n      break;\n\n    case 'dimension':\n      $dim_map = array('w'=>'width','h'=>'height','r'=>'ratio');\n      foreach (explode('-', $value) as $part)\n      {\n        $values = explode('..', substr($part, 1));\n        if (isset($dim_map[$part[0]]))\n        {\n          $type = $dim_map[$part[0]];\n          list(\n            $_SESSION['bulk_manager_filter']['dimension']['min_'.$type],\n            $_SESSION['bulk_manager_filter']['dimension']['max_'.$type]\n          ) = $values;\n        }\n      }\n      break;\n\n    case 'filesize':\n      list(\n        $_SESSION['bulk_manager_filter']['filesize']['min'],\n        $_SESSION['bulk_manager_filter']['filesize']['max']\n      ) = explode('..', $value);\n      break;\n\n    default:\n      $_SESSION['bulk_manager_filter'] = trigger_change('batch_manager_url_filter', $_SESSION['bulk_manager_filter'], $filter);\n      break;\n    }\n  }\n}\n\nif (empty($_SESSION['bulk_manager_filter']))\n{\n  $_SESSION['bulk_manager_filter'] = array(\n    'prefilter' => 'caddie'\n    );\n}\n\n// echo '<pre>'; print_r($_SESSION['bulk_manager_filter']); echo '</pre>';\n\n// depending on the current filter (in session), we find the appropriate photos\n$filter_sets = array();\nif (isset($_SESSION['bulk_manager_filter']['prefilter']))\n{\n  switch ($_SESSION['bulk_manager_filter']['prefilter'])\n  {\n  case 'caddie':\n    $query = '\nSELECT element_id\n  FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    $filter_sets[] = query2array($query, null, 'element_id');\n\n    break;\n\n  case 'favorites':\n    $query = '\nSELECT image_id\n  FROM '.FAVORITES_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\n    $filter_sets[] = query2array($query, null, 'image_id');\n\n    break;\n\n  case 'last_import':\n    $query = '\nSELECT MAX(date_available) AS date\n  FROM '.IMAGES_TABLE.'\n;';\n    $row = pwg_db_fetch_assoc(pwg_query($query));\n    if (!empty($row['date']))\n    {\n      $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE date_available BETWEEN '.pwg_db_get_recent_period_expression(1, $row['date']).' AND \\''.$row['date'].'\\'\n;';\n      $filter_sets[] = query2array($query, null, 'id');\n    }\n\n    break;\n\n  case 'no_virtual_album':\n    // we are searching elements not linked to any virtual category\n    $query = '\n SELECT id\n   FROM '.IMAGES_TABLE.'\n ;';\n    $all_elements = query2array($query, null, 'id');\n\n    $query = '\n SELECT id\n   FROM '.CATEGORIES_TABLE.'\n   WHERE dir IS NULL\n ;';\n    $virtual_categories = query2array($query, null, 'id');\n    if (!empty($virtual_categories))\n    {\n      $query = '\n SELECT DISTINCT(image_id)\n   FROM '.IMAGE_CATEGORY_TABLE.'\n   WHERE category_id IN ('.implode(',', $virtual_categories).')\n ;';\n      $linked_to_virtual = query2array($query, null, 'image_id');\n    }\n\n    $filter_sets[] = array_diff($all_elements, $linked_to_virtual);\n\n    break;\n\n  case 'no_album':\n    $filter_sets[] = get_orphans();\n    break;\n\n  case 'no_tag':\n    $query = '\nSELECT\n    id\n  FROM '.IMAGES_TABLE.'\n    LEFT JOIN '.IMAGE_TAG_TABLE.' ON id = image_id\n  WHERE tag_id is null\n;';\n    $filter_sets[] = query2array($query, null, 'id');\n\n    break;\n\n\n  case 'duplicates':\n    $duplicates_on_fields = array();\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_filename']))\n    {\n      $duplicates_on_fields[] = 'file';\n    }\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_checksum']))\n    {\n      $duplicates_on_fields[] = 'md5sum';\n    }\n\n    if (isset($_SESSION['bulk_manager_filter']['duplicates_date']))\n    {\n      $duplicates_on_fields[] = 'date_creation';\n    }\n    \n    if (isset($_SESSION['bulk_manager_filter']['duplicates_dimensions']))\n    {\n      $duplicates_on_fields[] = 'width';\n      $duplicates_on_fields[] = 'height';\n    }\n    \n    $query = '\nSELECT\n    GROUP_CONCAT(id) AS ids\n  FROM '.IMAGES_TABLE.'\n  GROUP BY '.implode(',', $duplicates_on_fields).'\n  HAVING COUNT(*) > 1\n;';\n    $array_of_ids_string = query2array($query, null, 'ids');\n\n    $ids = array();\n    \n    foreach ($array_of_ids_string as $ids_string)\n    {\n      $ids = array_merge($ids, explode(',', $ids_string));\n    }\n    \n    $filter_sets[] = $ids;\n\n    break;\n\n  case 'all_photos':\n    if ( count($_SESSION['bulk_manager_filter']) == 1 )\n    {// make the query only if this is the only filter\n      $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  '.$conf['order_by'];\n\n      $filter_sets[] = query2array($query, null, 'id');\n    }\n    break;\n\n  default:\n    $filter_sets = trigger_change('perform_batch_manager_prefilters', $filter_sets, $_SESSION['bulk_manager_filter']['prefilter']);\n    break;\n  }\n}\n\nif (isset($_SESSION['bulk_manager_filter']['category']))\n{\n  $categories = array();\n\n  if (isset($_SESSION['bulk_manager_filter']['category_recursive']))\n  {\n    $categories = get_subcat_ids(array($_SESSION['bulk_manager_filter']['category']));\n  }\n  else\n  {\n    $categories = array($_SESSION['bulk_manager_filter']['category']);\n  }\n\n  $query = '\n SELECT DISTINCT(image_id)\n   FROM '.IMAGE_CATEGORY_TABLE.'\n   WHERE category_id IN ('.implode(',', $categories).')\n ;';\n  $filter_sets[] = query2array($query, null, 'image_id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['level']))\n{\n  $operator = '=';\n  if (isset($_SESSION['bulk_manager_filter']['level_include_lower']))\n  {\n    $operator = '<=';\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE level '.$operator.' '.$_SESSION['bulk_manager_filter']['level'].'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (!empty($_SESSION['bulk_manager_filter']['tags']))\n{\n  $filter_sets[] = get_image_ids_for_tags(\n    $_SESSION['bulk_manager_filter']['tags'],\n    $_SESSION['bulk_manager_filter']['tag_mode'],\n    null,\n    null,\n    false // we don't apply permissions in administration screens\n    );\n}\n\nif (isset($_SESSION['bulk_manager_filter']['dimension']))\n{\n  $where_clauses = array();\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_width']))\n  {\n    $where_clause[] = 'width >= '.$_SESSION['bulk_manager_filter']['dimension']['min_width'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_width']))\n  {\n    $where_clause[] = 'width <= '.$_SESSION['bulk_manager_filter']['dimension']['max_width'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_height']))\n  {\n    $where_clause[] = 'height >= '.$_SESSION['bulk_manager_filter']['dimension']['min_height'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_height']))\n  {\n    $where_clause[] = 'height <= '.$_SESSION['bulk_manager_filter']['dimension']['max_height'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['min_ratio']))\n  {\n    $where_clause[] = 'width/height >= '.$_SESSION['bulk_manager_filter']['dimension']['min_ratio'];\n  }\n  if (isset($_SESSION['bulk_manager_filter']['dimension']['max_ratio']))\n  {\n    // max_ratio is a floor value, so must be a bit increased\n    $where_clause[] = 'width/height < '.($_SESSION['bulk_manager_filter']['dimension']['max_ratio']+0.01);\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE '.implode(' AND ',$where_clause).'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['filesize']))\n{\n  $where_clauses = array();\n  \n  if (isset($_SESSION['bulk_manager_filter']['filesize']['min']))\n  {\n    $where_clause[] = 'filesize >= '.$_SESSION['bulk_manager_filter']['filesize']['min']*1024;\n  }\n  \n  if (isset($_SESSION['bulk_manager_filter']['filesize']['max']))\n  {\n    $where_clause[] = 'filesize <= '.$_SESSION['bulk_manager_filter']['filesize']['max']*1024;\n  }\n\n  $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n  WHERE '.implode(' AND ',$where_clause).'\n  '.$conf['order_by'];\n\n  $filter_sets[] = query2array($query, null, 'id');\n}\n\nif (isset($_SESSION['bulk_manager_filter']['search']) && \n    strlen($_SESSION['bulk_manager_filter']['search']['q']))\n{\n  include_once( PHPWG_ROOT_PATH .'include/functions_search.inc.php' );\n  $res = get_quick_search_results_no_cache($_SESSION['bulk_manager_filter']['search']['q'], array('permissions'=>false));\n  if (!empty($res['items']) && !empty($res['qs']['unmatched_terms']))\n  {\n    $template->assign('no_search_results', array_map('htmlspecialchars', $res['qs']['unmatched_terms']) );\n  }\n  $filter_sets[] = $res['items'];\n}\n\n$filter_sets = trigger_change('batch_manager_perform_filters', $filter_sets, $_SESSION['bulk_manager_filter']);\n\n$current_set = array_shift($filter_sets);\nforeach ($filter_sets as $set)\n{\n  $current_set = array_intersect($current_set, $set);\n}\n$page['cat_elements_id'] = $current_set;\n\n\n// +-----------------------------------------------------------------------+\n// |                       first element to display                        |\n// +-----------------------------------------------------------------------+\n\n// $page['start'] contains the number of the first element in its\n// category. For exampe, $page['start'] = 12 means we must show elements #12\n// and $page['nb_images'] next elements\n\nif (!isset($_REQUEST['start'])\n    or !is_numeric($_REQUEST['start'])\n    or $_REQUEST['start'] < 0\n    or (isset($_REQUEST['display']) and 'all' == $_REQUEST['display']))\n{\n  $page['start'] = 0;\n}\nelse\n{\n  $page['start'] = $_REQUEST['start'];\n}\n\n\n// +-----------------------------------------------------------------------+\n// |                                 Tabs                                  |\n// +-----------------------------------------------------------------------+\n$manager_link = get_root_url().'admin.php?page=batch_manager&amp;mode=';\n\nif (isset($_GET['mode']))\n{\n  check_input_parameter('mode', $_GET, false, '/^(global|unit)$/');\n  $page['tab'] = $_GET['mode'];\n}\nelse\n{\n  $page['tab'] = 'global';\n}\n\n$tabsheet = new tabsheet();\n$tabsheet->set_id('batch_manager');\n$tabsheet->select($page['tab']);\n$tabsheet->assign();\n\n\n// +-----------------------------------------------------------------------+\n// |                              dimensions                               |\n// +-----------------------------------------------------------------------+\n\n$widths = array();\n$heights = array();\n$ratios = array();\n$dimensions = array();\n\n// get all width, height and ratios\n$query = '\nSELECT\n  DISTINCT width, height\n  FROM '.IMAGES_TABLE.'\n  WHERE width IS NOT NULL\n    AND height IS NOT NULL\n;';\n$result = pwg_query($query);\n\nif (pwg_db_num_rows($result))\n{\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if ($row['width']>0 && $row['height']>0)\n    {\n      $widths[] = $row['width'];\n      $heights[] = $row['height'];\n      $ratios[] = floor($row['width'] / $row['height'] * 100) / 100;\n    }\n  }\n}\nif (empty($widths))\n{ // arbitrary values, only used when no photos on the gallery\n  $widths = array(600, 1920, 3500);\n  $heights = array(480, 1080, 2300);\n  $ratios = array(1.25, 1.52, 1.78);\n}\n\nforeach (array('widths','heights','ratios') as $type)\n{\n  ${$type} = array_unique(${$type});\n  sort(${$type});\n  $dimensions[$type] = implode(',', ${$type});\n}\n\n$dimensions['bounds'] = array(\n  'min_width' => $widths[0],\n  'max_width' => end($widths),\n  'min_height' => $heights[0],\n  'max_height' => end($heights),\n  'min_ratio' => $ratios[0],\n  'max_ratio' => end($ratios),\n  );\n\n// find ratio categories\n$ratio_categories = array(\n  'portrait' => array(),\n  'square' => array(),\n  'landscape' => array(),\n  'panorama' => array(),\n  );\n\nforeach ($ratios as $ratio)\n{\n  if ($ratio < 0.95)\n  {\n    $ratio_categories['portrait'][] = $ratio;\n  }\n  else if ($ratio >= 0.95 and $ratio <= 1.05)\n  {\n    $ratio_categories['square'][] = $ratio;\n  }\n  else if ($ratio > 1.05 and $ratio < 2)\n  {\n    $ratio_categories['landscape'][] = $ratio;\n  }\n  else if ($ratio >= 2)\n  {\n    $ratio_categories['panorama'][] = $ratio;\n  }\n}\n\nforeach (array_keys($ratio_categories) as $type)\n{\n  if (count($ratio_categories[$type]) > 0)\n  {\n    $dimensions['ratio_'.$type] = array(\n      'min' => $ratio_categories[$type][0],\n      'max' => end($ratio_categories[$type]),\n      );\n  }\n}\n\n// selected=bound if nothing selected\nforeach (array_keys($dimensions['bounds']) as $type)\n{\n  $dimensions['selected'][$type] = isset($_SESSION['bulk_manager_filter']['dimension'][$type])\n    ? $_SESSION['bulk_manager_filter']['dimension'][$type]\n    : $dimensions['bounds'][$type]\n  ;\n}\n\n$template->assign('dimensions', $dimensions);\n\n// +-----------------------------------------------------------------------+\n// | filesize                                                              |\n// +-----------------------------------------------------------------------+\n\n$filesizes = array();\n$filesize = array();\n\n$query = '\nSELECT\n  filesize\n  FROM '.IMAGES_TABLE.'\n  WHERE filesize IS NOT NULL\n  GROUP BY filesize\n;';\n$result = pwg_query($query);\n\nwhile ($row = pwg_db_fetch_assoc($result))\n{\n  $filesizes[] = sprintf('%.1f', $row['filesize']/1024);\n}\n\nif (empty($filesizes))\n{ // arbitrary values, only used when no photos on the gallery\n  $filesizes = array(0, 1, 2, 5, 8, 15);\n}\n\n$filesizes = array_unique($filesizes);\nsort($filesizes);\n\n// add 0.1MB to the last value, to make sure the heavier photo will be in\n// the result\n$filesizes[count($filesizes)-1]+= 0.1;\n\n$filesize['list'] = implode(',', $filesizes);\n\n$filesize['bounds'] = array(\n  'min' => $filesizes[0],\n  'max' => end($filesizes),\n  );\n\n// selected=bound if nothing selected\nforeach (array_keys($filesize['bounds']) as $type)\n{\n  $filesize['selected'][$type] = isset($_SESSION['bulk_manager_filter']['filesize'][$type])\n    ? $_SESSION['bulk_manager_filter']['filesize'][$type]\n    : $filesize['bounds'][$type]\n  ;\n}\n\n$template->assign('filesize', $filesize);\n\n// +-----------------------------------------------------------------------+\n// |                         open specific mode                            |\n// +-----------------------------------------------------------------------+\n\ninclude(PHPWG_ROOT_PATH.'admin/batch_manager_'.$page['tab'].'.php');\n?>"], "filenames": ["admin/batch_manager.php"], "buggy_code_start_loc": [595], "buggy_code_end_loc": [595], "fixing_code_start_loc": [596], "fixing_code_end_loc": [597], "type": "CWE-284", "message": "admin/batch_manager.php in Piwigo through 2.8.3 allows remote authenticated administrators to conduct File Inclusion attacks via the $page['tab'] variable (aka the mode parameter).", "other": {"cve": {"id": "CVE-2016-10084", "sourceIdentifier": "cve@mitre.org", "published": "2016-12-30T07:59:00.237", "lastModified": "2017-01-03T19:00:59.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "admin/batch_manager.php in Piwigo through 2.8.3 allows remote authenticated administrators to conduct File Inclusion attacks via the $page['tab'] variable (aka the mode parameter)."}, {"lang": "es", "value": "admin/batch_manager.php en Piwigo hasta la versi\u00f3n 2.8.3 permite a administradores remotos autenticados llevar a cabo ataques File Inclusion a trav\u00e9s de la variable $page['tab'] (tambi\u00e9n conocido como el par\u00e1metro mode)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.8.3", "matchCriteriaId": "78E1C4D0-B42E-4FF9-9DB3-313B2A4A8251"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/95164", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Piwigo/Piwigo/commit/9dd92959f6975099e0c62163a846a4648a6a920f", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/Piwigo/Piwigo/issues/572#issuecomment-268252202", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/9dd92959f6975099e0c62163a846a4648a6a920f"}}