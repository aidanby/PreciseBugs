{"buggy_code": ["<?php\n/**\n * Delete an invitation to join a group.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n\n// invisible groups require overriding access to delete invite\n$group = elgg_call(ELGG_IGNORE_ACCESS, function() use ($group_guid) {\n\treturn get_entity($group_guid);\n});\n\nif (!$user && !($group instanceof \\ElggGroup)) {\n\treturn elgg_error_response();\n}\n\n// If join request made\n$message = '';\nif (remove_entity_relationship($group->guid, 'invited', $user->guid)) {\n\t$message = elgg_echo('groups:invitekilled');\n}\n\nreturn elgg_ok_response('', $message);\n", "<?php\n/**\n * Delete a request to join a closed group.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n$group = get_entity($group_guid);\n\nif (!$user && !($group instanceof \\ElggGroup)) {\n\treturn elgg_error_response();\n}\n\n// If join request made\n$message = '';\nif (remove_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\t$message = elgg_echo('groups:joinrequestkilled');\n}\n\nreturn elgg_ok_response('', $message);\n", "<?php\n/**\n * Join a group\n *\n * Three states:\n * open group so user joins\n * closed group so request sent to group owner\n * closed group with invite so user joins\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n\n// access bypass for getting invisible group\n$group = elgg_call(ELGG_IGNORE_ACCESS, function() use ($group_guid) {\n\treturn get_entity($group_guid);\n});\n\nif (!$user || !($group instanceof \\ElggGroup)) {\n\treturn elgg_error_response(elgg_echo('groups:cantjoin'));\n}\n\n// join or request\n$join = false;\nif ($group->isPublicMembership() || $group->canEdit($user->guid)) {\n\t// anyone can join public groups and admins can join any group\n\t$join = true;\n} else {\n\tif (check_entity_relationship($group->guid, 'invited', $user->guid)) {\n\t\t// user has invite to closed group\n\t\t$join = true;\n\t}\n}\n\nif ($join) {\n\tif (!$group->join($user, ['create_river_item' => true])) {\n\t\treturn elgg_error_response(elgg_echo('groups:cantjoin'));\n\t}\n\t\n\treturn elgg_ok_response('', elgg_echo('groups:joined'), $group->getURL());\n}\n\nif (check_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\treturn elgg_error_response(elgg_echo('groups:joinrequest:exists'));\n}\n\n\nif (!add_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\treturn elgg_error_response(elgg_echo('groups:joinrequestnotmade'));\n}\n\n$owner = $group->getOwnerEntity();\n\n$url = elgg_normalize_url(\"groups/requests/{$group->guid}\");\n\n$subject = elgg_echo('groups:request:subject', [\n\t$user->getDisplayName(),\n\t$group->getDisplayName(),\n], $owner->language);\n\n$body = elgg_echo('groups:request:body', [\n\t$group->getOwnerEntity()->getDisplayName(),\n\t$user->getDisplayName(),\n\t$group->getDisplayName(),\n\t$user->getURL(),\n\t$url,\n], $owner->language);\n\n$params = [\n\t'action' => 'membership_request',\n\t'object' => $group,\n\t'url' => $url,\n];\n\n// Notify group owner\nnotify_user($owner->guid, $user->getGUID(), $subject, $body, $params);\n\nreturn elgg_ok_response('', elgg_echo('groups:joinrequestmade'));\n", "<?php\n/**\n * Leave a group action.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n$group = get_entity($group_guid);\n\nif (!$user || !($group instanceof \\ElggGroup)) {\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nif ($group->getOwnerGUID() === $user->guid) {\n\t// owner can't be removed\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nif (!$group->leave($user)) {\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nreturn elgg_ok_response('', elgg_echo('groups:left'));\n"], "fixing_code": ["<?php\n/**\n * Delete an invitation to join a group.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n\n// invisible groups require overriding access to delete invite\n$group = elgg_call(ELGG_IGNORE_ACCESS, function() use ($group_guid) {\n\treturn get_entity($group_guid);\n});\n\nif (!$user && !$group instanceof \\ElggGroup) {\n\treturn elgg_error_response(elgg_echo('error:missing_data'));\n}\n\nif (!$user->canEdit() && !$group->canEdit()) {\n\treturn elgg_error_response(elgg_echo('actionunauthorized'));\n}\n\n// If join request made\n$message = '';\nif (remove_entity_relationship($group->guid, 'invited', $user->guid)) {\n\t$message = elgg_echo('groups:invitekilled');\n}\n\nreturn elgg_ok_response('', $message);\n", "<?php\n/**\n * Delete a request to join a closed group.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n$group = get_entity($group_guid);\n\nif (!$user && !$group instanceof \\ElggGroup) {\n\treturn elgg_error_response(elgg_echo('error:missing_data'));\n}\n\nif (!$user->canEdit() && !$group->canEdit()) {\n\treturn elgg_error_response(elgg_echo('actionunauthorized'));\n}\n\n// If join request made\n$message = '';\nif (remove_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\t$message = elgg_echo('groups:joinrequestkilled');\n}\n\nreturn elgg_ok_response('', $message);\n", "<?php\n/**\n * Join a group\n *\n * Three states:\n * open group so user joins\n * closed group so request sent to group owner\n * closed group with invite so user joins\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n\n// access bypass for getting invisible group\n$group = elgg_call(ELGG_IGNORE_ACCESS, function() use ($group_guid) {\n\treturn get_entity($group_guid);\n});\n\nif (!$user || !$group instanceof \\ElggGroup) {\n\treturn elgg_error_response(elgg_echo('groups:cantjoin'));\n}\n\nif (!$user->canEdit() && !$group->canEdit()) {\n\treturn elgg_error_response(elgg_echo('actionunauthorized'));\n}\n\n// join or request\n$join = false;\nif ($group->isPublicMembership() || $group->canEdit($user->guid)) {\n\t// anyone can join public groups and admins can join any group\n\t$join = true;\n} else {\n\tif (check_entity_relationship($group->guid, 'invited', $user->guid)) {\n\t\t// user has invite to closed group\n\t\t$join = true;\n\t}\n}\n\nif ($join) {\n\tif (!$group->join($user, ['create_river_item' => true])) {\n\t\treturn elgg_error_response(elgg_echo('groups:cantjoin'));\n\t}\n\t\n\treturn elgg_ok_response('', elgg_echo('groups:joined'), $group->getURL());\n}\n\nif (check_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\treturn elgg_error_response(elgg_echo('groups:joinrequest:exists'));\n}\n\n\nif (!add_entity_relationship($user->guid, 'membership_request', $group->guid)) {\n\treturn elgg_error_response(elgg_echo('groups:joinrequestnotmade'));\n}\n\n$owner = $group->getOwnerEntity();\n\n$url = elgg_normalize_url(\"groups/requests/{$group->guid}\");\n\n$subject = elgg_echo('groups:request:subject', [\n\t$user->getDisplayName(),\n\t$group->getDisplayName(),\n], $owner->language);\n\n$body = elgg_echo('groups:request:body', [\n\t$group->getOwnerEntity()->getDisplayName(),\n\t$user->getDisplayName(),\n\t$group->getDisplayName(),\n\t$user->getURL(),\n\t$url,\n], $owner->language);\n\n$params = [\n\t'action' => 'membership_request',\n\t'object' => $group,\n\t'url' => $url,\n];\n\n// Notify group owner\nnotify_user($owner->guid, $user->getGUID(), $subject, $body, $params);\n\nreturn elgg_ok_response('', elgg_echo('groups:joinrequestmade'));\n", "<?php\n/**\n * Leave a group action.\n */\n\n$user_guid = (int) get_input('user_guid', elgg_get_logged_in_user_guid());\n$group_guid = (int) get_input('group_guid');\n\n$user = get_user($user_guid);\n$group = get_entity($group_guid);\n\nif (!$user || !$group instanceof \\ElggGroup) {\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nif (!$user->canEdit() && !$group->canEdit()) {\n\treturn elgg_error_response(elgg_echo('actionunauthorized'));\n}\n\nif ($group->getOwnerGUID() === $user->guid) {\n\t// owner can't be removed\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nif (!$group->leave($user)) {\n\treturn elgg_error_response(elgg_echo('groups:cantleave'));\n}\n\nreturn elgg_ok_response('', elgg_echo('groups:left'));\n"], "filenames": ["mod/groups/actions/groups/membership/delete_invite.php", "mod/groups/actions/groups/membership/delete_request.php", "mod/groups/actions/groups/membership/join.php", "mod/groups/actions/groups/membership/leave.php"], "buggy_code_start_loc": [16, 12, 21, 12], "buggy_code_end_loc": [18, 14, 22, 13], "fixing_code_start_loc": [16, 12, 21, 12], "fixing_code_end_loc": [22, 18, 27, 18], "type": "CWE-639", "message": "elgg is vulnerable to Authorization Bypass Through User-Controlled Key", "other": {"cve": {"id": "CVE-2021-3964", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-01T12:15:07.627", "lastModified": "2021-12-02T19:09:00.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "elgg is vulnerable to Authorization Bypass Through User-Controlled Key"}, {"lang": "es", "value": "elgg es vulnerable a una Omisi\u00f3n de Autorizaci\u00f3n Mediante una Clave Controlada por el Usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:elgg:elgg:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.22", "matchCriteriaId": "54D8518D-4978-4E8D-A10E-1DA5DCDB757B"}]}]}], "references": [{"url": "https://github.com/elgg/elgg/commit/d9fcad76ee380ea17edd61d13d0f87828ea3f744", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a4df45d6-b739-4299-967f-c960b569383a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/elgg/elgg/commit/d9fcad76ee380ea17edd61d13d0f87828ea3f744"}}