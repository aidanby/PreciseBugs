{"buggy_code": ["# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\npackage Kernel::Modules::AdminSupportDataCollector;\n\nuse strict;\nuse warnings;\n\nuse Kernel::System::SupportDataCollector::PluginBase;\n\nuse Kernel::System::VariableCheck qw(:all);\n\nour $ObjectManagerDisabled = 1;\n\nsub new {\n    my ( $Type, %Param ) = @_;\n\n    # allocate new hash for object\n    my $Self = {%Param};\n    bless( $Self, $Type );\n\n    return $Self;\n}\n\nsub Run {\n    my ( $Self, %Param ) = @_;\n\n    # ------------------------------------------------------------ #\n    # Send Support Data Update\n    # ------------------------------------------------------------ #\n\n    if ( $Self->{Subaction} eq 'SendUpdate' ) {\n\n        my %Result = $Kernel::OM->Get('Kernel::System::Registration')->RegistrationUpdateSend();\n\n        return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n            ContentType => 'text/html',\n            Content     => $Result{Success},\n            Type        => 'inline',\n            NoCache     => 1,\n        );\n    }\n    elsif ( $Self->{Subaction} eq 'GenerateSupportBundle' ) {\n        return $Self->_GenerateSupportBundle();\n    }\n    elsif ( $Self->{Subaction} eq 'DownloadSupportBundle' ) {\n        return $Self->_DownloadSupportBundle();\n    }\n    elsif ( $Self->{Subaction} eq 'SendSupportBundle' ) {\n        return $Self->_SendSupportBundle();\n    }\n    return $Self->_SupportDataCollectorView(%Param);\n}\n\nsub _SupportDataCollectorView {\n    my ( $Self, %Param ) = @_;\n\n    my $SystemDataObject  = $Kernel::OM->Get('Kernel::System::SystemData');\n    my $RegistrationState = $SystemDataObject->SystemDataGet(\n        Key => 'Registration::State',\n    ) || '';\n    my $SupportDataSending = $SystemDataObject->SystemDataGet(\n        Key => 'Registration::SupportDataSending',\n    ) || 'No';\n\n    my %SupportData = $Kernel::OM->Get('Kernel::System::SupportDataCollector')->Collect(\n        UseCache => 1,\n    );\n\n    my $LayoutObject = $Kernel::OM->Get('Kernel::Output::HTML::Layout');\n\n    # check if cloud services are disabled\n    my $CloudServicesDisabled = $Kernel::OM->Get('Kernel::Config')->Get('CloudServices::Disabled') || 0;\n\n    if ( !$SupportData{Success} ) {\n        $LayoutObject->Block(\n            Name => 'SupportDataCollectionFailed',\n            Data => \\%SupportData,\n        );\n    }\n    else {\n        if ($CloudServicesDisabled) {\n            $LayoutObject->Block(\n                Name => 'CloudServicesWarning',\n            );\n        }\n        elsif (\n            $RegistrationState ne 'registered'\n            || $SupportDataSending ne 'Yes'\n            )\n        {\n            $LayoutObject->Block(\n                Name => 'NoteNotRegisteredNotSending',\n            );\n        }\n        else {\n            $LayoutObject->Block(\n                Name => 'NoteRegisteredSending',\n            );\n        }\n        $LayoutObject->Block(\n            Name => 'NoteSupportBundle',\n        );\n\n        $LayoutObject->Block(\n            Name => 'SupportData',\n        );\n        my ( $LastGroup, $LastSubGroup ) = ( '', '' );\n\n        for my $Entry ( @{ $SupportData{Result} || [] } ) {\n\n            $Entry->{StatusName} = $Kernel::System::SupportDataCollector::PluginBase::Status2Name{\n                $Entry->{Status}\n            };\n\n            # get the display path, display type and additional information for the output\n            my ( $DisplayPath, $DisplayType, $DisplayAdditional ) = split( m{[\\@\\:]}, $Entry->{DisplayPath} // '' );\n\n            my ( $Group, $SubGroup ) = split( m{/}, $DisplayPath );\n            if ( $Group ne $LastGroup ) {\n                $LayoutObject->Block(\n                    Name => 'SupportDataGroup',\n                    Data => {\n                        Group => $Group,\n                    },\n                );\n            }\n            $LastGroup = $Group // '';\n\n            if ( !$SubGroup || $SubGroup ne $LastSubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataRow',\n                    Data => $Entry,\n                );\n            }\n\n            if ( $SubGroup && $SubGroup ne $LastSubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataSubGroup',\n                    Data => {\n                        %{$Entry},\n                        SubGroup => $SubGroup,\n                    },\n                );\n            }\n            $LastSubGroup = $SubGroup // '';\n\n            if ( $DisplayType && $DisplayType eq 'Table' && ref $Entry->{Value} eq 'ARRAY' ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataEntryTable',\n                    Data => $Entry,\n                );\n\n                if ( IsArrayRefWithData( $Entry->{Value} ) ) {\n\n                    # get the table columns\n                    my @TableColumns = split( m{,}, $DisplayAdditional // '' );\n\n                    my @Identifiers;\n                    my @Labels;\n\n                    COLUMN:\n                    for my $Column (@TableColumns) {\n\n                        next COLUMN if !$Column;\n\n                        # get the identifier and label\n                        my ( $Identifier, $Label ) = split( m{\\|}, $Column );\n\n                        # set the identifier as default label\n                        $Label ||= $Identifier;\n\n                        push @Identifiers, $Identifier;\n                        push @Labels,      $Label;\n                    }\n\n                    $LayoutObject->Block(\n                        Name => 'SupportDataEntryTableDetails',\n                        Data => {\n                            Identifiers => \\@Identifiers,\n                            Labels      => \\@Labels,\n                            %{$Entry},\n                        },\n                    );\n                }\n            }\n            elsif ( !$SubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataEntry',\n                    Data => $Entry,\n                );\n                if ( defined $Entry->{Value} && length $Entry->{Value} ) {\n                    if ( $Entry->{Value} =~ m{\\n} ) {\n                        $LayoutObject->Block(\n                            Name => 'SupportDataEntryValueMultiLine',\n                            Data => $Entry,\n                        );\n                    }\n                    else {\n                        $LayoutObject->Block(\n                            Name => 'SupportDataEntryValueSingleLine',\n                            Data => $Entry,\n                        );\n                    }\n                }\n            }\n            else {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataSubEntry',\n                    Data => $Entry,\n                );\n\n                if ( $Entry->{Message} || $Entry->{MessageFormatted} ) {\n                    $LayoutObject->Block(\n                        Name => 'SupportDataSubEntryMessage',\n                        Data => {\n                            Message          => $Entry->{Message},\n                            MessageFormatted => $Entry->{MessageFormatted},\n                        },\n                    );\n                }\n            }\n        }\n    }\n\n    # get user data\n    my %User = $Kernel::OM->Get('Kernel::System::User')->GetUserData(\n        UserID => $Self->{UserID},\n        Cached => 1,\n    );\n\n    my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n\n    # get sender email address\n    if ( $User{UserEmail} && $User{UserEmail} !~ /root\\@localhost/ ) {\n        $Param{SenderAddress} = $User{UserEmail};\n    }\n    elsif (\n\n        $ConfigObject->Get('AdminEmail')\n        && $ConfigObject->Get('AdminEmail') !~ /root\\@localhost/\n        && $ConfigObject->Get('AdminEmail') !~ /admin\\@example.com/\n        )\n    {\n        $Param{SenderAddress} = $ConfigObject->Get('AdminEmail');\n    }\n    $Param{SenderName} = $User{UserFullname};\n\n    # verify if the email is valid, set it to empty string if not, this will be checked on client\n    #    side\n    if (\n        $Param{SenderAddress} &&\n        !$Kernel::OM->Get('Kernel::System::CheckItem')->CheckEmail( Address => $Param{SenderAddress} )\n        )\n    {\n        $Param{SenderAddress} = '';\n    }\n\n    my $Output = $LayoutObject->Header();\n    $Output .= $LayoutObject->NavigationBar();\n    $Output .= $LayoutObject->Output(\n        TemplateFile => 'AdminSupportDataCollector',\n        Data         => \\%Param,\n    );\n    $Output .= $LayoutObject->Footer();\n\n    return $Output;\n}\n\nsub _GenerateSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n    my $RandomID   = $MainObject->GenerateRandomString(\n        Length     => 8,\n        Dictionary => [ 0 .. 9, 'a' .. 'f' ],\n    );\n\n    # remove any older file\n    my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n    my $TempDir      = $ConfigObject->Get('TempDir') . '/SupportBundleDownloadCache';\n\n    if ( !-d $TempDir ) {\n        mkdir $TempDir;\n    }\n\n    $TempDir = $ConfigObject->Get('TempDir') . '/SupportBundleDownloadCache/' . $RandomID;\n\n    if ( !-d $TempDir ) {\n        mkdir $TempDir;\n    }\n\n    # remove all files\n    my @ListOld = glob( $TempDir . '/*' );\n    for my $File (@ListOld) {\n        unlink $File;\n    }\n\n    # create the support bundle\n    my $Result = $Kernel::OM->Get('Kernel::System::SupportBundleGenerator')->Generate();\n\n    if ( !$Result->{Success} ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => $Result->{Message},\n        );\n    }\n    else {\n\n        # save support bundle in the FS (temporary)\n        my $FileLocation = $MainObject->FileWrite(\n            Location   => $TempDir . '/' . $Result->{Data}->{Filename},\n            Content    => $Result->{Data}->{Filecontent},\n            Mode       => 'binmode',\n            Type       => 'Local',\n            Permission => '644',\n        );\n    }\n\n    my $JSONString = $Kernel::OM->Get('Kernel::System::JSON')->Encode(\n        Data => {\n            Success  => $Result->{Success},\n            Message  => $Result->{Message} || '',\n            Filesize => $Result->{Data}->{Filesize} || '',\n            Filename => $Result->{Data}->{Filename} || '',\n            RandomID => $RandomID,\n        },\n    );\n\n    return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n        ContentType => 'text/html',\n        Content     => $JSONString,\n        Type        => 'inline',\n        NoCache     => 1,\n    );\n}\n\nsub _DownloadSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    my $ParamObject  = $Kernel::OM->Get('Kernel::System::Web::Request');\n    my $LayoutObject = $Kernel::OM->Get('Kernel::Output::HTML::Layout');\n    my $Filename     = $ParamObject->GetParam( Param => 'Filename' ) || '';\n    my $RandomID     = $ParamObject->GetParam( Param => 'RandomID' ) || '';\n\n    if ( !$Filename ) {\n        return $LayoutObject->ErrorScreen(\n            Message => \"Need Filename!\",\n        );\n    }\n\n    my $TempDir  = $Kernel::OM->Get('Kernel::Config')->Get('TempDir') . '/SupportBundleDownloadCache/' . $RandomID;\n    my $Location = $TempDir . '/' . $Filename;\n\n    my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n    my $Content    = $MainObject->FileRead(\n        Location => $Location,\n        Mode     => 'binmode',\n        Type     => 'Local',\n        Result   => 'SCALAR',\n    );\n\n    if ( !$Content ) {\n        return $LayoutObject->ErrorScreen(\n            Message => $LayoutObject->{LanguageObject}->Translate( 'File %s could not be read!', $Location ),\n        );\n    }\n\n    my $Success = $MainObject->FileDelete(\n        Location => $Location,\n        Type     => 'Local',\n    );\n\n    if ( !$Success ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"File $Location could not be deleted!\",\n        );\n    }\n\n    rmdir $TempDir;\n\n    return $LayoutObject->Attachment(\n        Filename    => $Filename,\n        ContentType => 'application/octet-stream; charset=' . $LayoutObject->{UserCharset},\n        Content     => $$Content,\n    );\n}\n\nsub _SendSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    my $ParamObject = $Kernel::OM->Get('Kernel::System::Web::Request');\n    my $LogObject   = $Kernel::OM->Get('Kernel::System::Log');\n    my $Filename    = $ParamObject->GetParam( Param => 'Filename' ) || '';\n    my $RandomID    = $ParamObject->GetParam( Param => 'RandomID' ) || '';\n    my $Success;\n\n    if ($Filename) {\n\n        my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n\n        my $TempDir = $ConfigObject->Get('TempDir')\n            . '/SupportBundleDownloadCache/'\n            . $RandomID;\n        my $Location = $TempDir . '/' . $Filename;\n\n        my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n\n        my $Content = $MainObject->FileRead(\n            Location => $Location,\n            Mode     => 'binmode',\n            Type     => 'Local',\n            Result   => 'SCALAR',\n        );\n\n        if ($Content) {\n\n            $Success = $MainObject->FileDelete(\n                Location => $Location,\n                Type     => 'Local',\n            );\n\n            if ( !$Success ) {\n                $LogObject->Log(\n                    Priority => 'error',\n                    Message  => \"File $Location could not be deleted!\",\n                );\n            }\n\n            rmdir $TempDir;\n\n            my %RegistrationInfo = $Kernel::OM->Get('Kernel::System::Registration')->RegistrationDataGet(\n                Extended => 1,\n            );\n\n            my %Data;\n\n            if (%RegistrationInfo) {\n                my $State = $RegistrationInfo{State} || '';\n                if ( $State && lc $State eq 'registered' ) {\n                    $State = 'active';\n                }\n\n                %Data = (\n                    %{ $RegistrationInfo{System} },\n                    State              => $State,\n                    APIVersion         => $RegistrationInfo{APIVersion},\n                    APIKey             => $RegistrationInfo{APIKey},\n                    LastUpdateID       => $RegistrationInfo{LastUpdateID},\n                    RegistrationKey    => $RegistrationInfo{UniqueID},\n                    SupportDataSending => $RegistrationInfo{SupportDataSending},\n                    Type               => $RegistrationInfo{Type},\n                    Description        => $RegistrationInfo{Description},\n                );\n            }\n\n            # get user data\n            my %User = $Kernel::OM->Get('Kernel::System::User')->GetUserData(\n                UserID => $Self->{UserID},\n                Cached => 1,\n            );\n\n            # get sender email address\n            my $SenderAddress = '';\n            if ( $User{UserEmail} && $User{UserEmail} !~ /root\\@localhost/ ) {\n                $SenderAddress = $User{UserEmail};\n            }\n            elsif (\n                $ConfigObject->Get('AdminEmail')\n                && $ConfigObject->Get('AdminEmail') !~ /root\\@localhost/\n                && $ConfigObject->Get('AdminEmail') !~ /admin\\@example.com/\n                )\n            {\n                $SenderAddress = $ConfigObject->Get('AdminEmail');\n            }\n\n            my $SenderName = $User{UserFullname};\n\n            my $Body;\n\n            $Body = \"Sender:$SenderName\\n\";\n            $Body .= \"Email:$SenderAddress\\n\";\n\n            if (%Data) {\n                for my $Key ( sort keys %Data ) {\n                    my $ItemValue = $Data{$Key} || '';\n                    $Body .= \"$Key:$ItemValue\\n\";\n                }\n            }\n            else {\n                $Body .= \"Not registered\\n\";\n            }\n\n            my $Result = $Kernel::OM->Get('Kernel::System::Email')->Send(\n                From          => $SenderAddress,\n                To            => 'SupportBundle@otrs.com',\n                Subject       => 'Support::Bundle::Email',\n                Type          => 'text/plain',\n                Charset       => 'utf-8',\n                Body          => $Body,\n                CustomHeaders => {\n                    'X-OTRS-RegistrationKey' => $Data{'RegistrationKey'} || 'Not registered',\n                },\n                Attachment => [\n                    {\n                        Filename    => $Filename,\n                        Content     => $Content,\n                        ContentType => 'application/octet-stream',\n                        Disposition => 'attachment',\n                    },\n                ],\n            );\n\n            if ( $Result->{Success} ) {\n                $Success = 1;\n            }\n        }\n        else {\n            $LogObject->Log(\n                Priority => 'error',\n                Message  => \"$Filename could not be read!\",\n            );\n        }\n    }\n    else {\n        $LogObject->Log(\n            Priority => 'error',\n            Message  => \"Need Filename\",\n        );\n    }\n\n    my $JSONString = $Kernel::OM->Get('Kernel::System::JSON')->Encode(\n        Data => {\n            Success => $Success || '',\n        },\n    );\n\n    return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n        ContentType => 'text/html',\n        Content     => $JSONString,\n        Type        => 'inline',\n        NoCache     => 1,\n    );\n}\n\n1;\n", "// --\n// Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n// --\n// This software comes with ABSOLUTELY NO WARRANTY. For details, see\n// the enclosed file COPYING for license information (GPL). If you\n// did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n// --\n\n\"use strict\";\n\nvar Core = Core || {};\nCore.Agent = Core.Agent || {};\nCore.Agent.Admin = Core.Agent.Admin || {};\n\n/**\n * @namespace Core.Agent.Admin.SupportDataCollector\n * @memberof Core.Agent.Admin\n * @author OTRS AG\n * @description\n *      This namespace contains the special module function for SupportDataCollector module.\n */\n Core.Agent.Admin.SupportDataCollector = (function (TargetNS) {\n\n    /*\n    * @name Init\n    * @memberof Core.Agent.Admin.SupportDataCollector\n    * @function\n    * @description\n    *      This function initializes module functionality\n    */\n    TargetNS.Init = function () {\n\n        // Bind event on SendUpdate button\n        $('#SendUpdate').on('click', function (Event) {\n            var TextClass = '';\n            Core.UI.Dialog.ShowContentDialog('<div class=\"Spacing Center\"><span class=\"AJAXLoader W33pc\" title='+ Core.Language.Translate(\"Sending Update...\") + '></span></div>',Core.Language.Translate(\"Sending Update...\"), '10px', 'Center', true, undefined, true);\n\n            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=SendUpdate;', function (Response) {\n\n                var ResponseMessage = Core.Language.Translate('Support Data information was successfully sent.');\n\n                    // if the waiting dialog was canceled,\n                    // do not show the search dialog as well\n                    if (!$('.Dialog:visible').length) {\n                        return;\n                    }\n\n                if (Response === 0) {\n                    ResponseMessage = Core.Language.Translate('Was not possible to send Support Data information.');\n                    TextClass = 'Error';\n                }\n\n                Core.UI.Dialog.ShowContentDialog(\n                    '<div class=\"Spacing Center SendUpdateResultDialog\"><span class=\"W50pc ' + TextClass + '\" title=\"' + ResponseMessage + '\">' + ResponseMessage + '</span></div>', Core.Language.Translate(\"Update Result\"),\n                    '10px',\n                    'Center',\n                    true,\n                    [\n                        {\n                            Label: Core.Language.Translate('Close this dialog'),\n                            Class: 'Primary',\n                            Function: function () {\n                                Core.UI.Dialog.CloseDialog($('.SendUpdateResultDialog'));\n                            }\n                        }\n                    ],\n                    true\n                );\n\n            });\n\n            Event.preventDefault();\n            Event.stopPropagation();\n            return false;\n        });\n\n        // Bind event on Generate Support bundle button\n        $('#GenerateSupportBundle').on('click', function (Event) {\n            Core.UI.Dialog.ShowContentDialog('<div class=\"Spacing Center LoadingSupportBundleDialog\"><span class=\"AJAXLoader W75pc\" title=' + Core.Language.Translate(\"Generating...\") + '></span></div>', Core.Language.Translate(\"Generating...\"), '10px', 'Center', true, undefined, true);\n\n            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=GenerateSupportBundle;', function (Response) {\n                var TextClass, ResponseMessage;\n\n                // if the waiting dialog was canceled,\n                // do not show the option dialog as well\n                if (!$('.Dialog:visible').length) {\n                    return;\n                }\n\n                Core.UI.Dialog.CloseDialog($('.LoadingSupportBundleDialog'));\n\n                if (!Response.Success) {\n                    ResponseMessage = Core.Language.Translate('It was not possible to generate the Support Bundle.'),\n                    TextClass = 'Error';\n\n                    Core.UI.Dialog.ShowContentDialog(\n                        '<div class=\"Spacing Center NoSupportBunle\"><span class=\"W50pc ' + TextClass + '\" title=\"' + ResponseMessage + '\">' + ResponseMessage + '</span></div>', Core.Language.Translate(\"Generate Result\"),\n                        '10px',\n                        'Center',\n                        true,\n                        [\n                            {\n                                Label: Core.Language.Translate('Close this dialog'),\n                                Class: 'Primary',\n                                Function: function () {\n                                    Core.UI.Dialog.CloseDialog($('.NoSupportBunle'));\n                                }\n                            }\n                        ],\n                        true\n                    );\n                }\n                else {\n\n                    Core.UI.Dialog.ShowContentDialog(\n                        $('#SupportBundleOptionsDialogContainer'), Core.Language.Translate(\"Support Bundle\"),\n                        '10px',\n                        'Center',\n                        true,\n                        [\n                            {\n                                Label: Core.Language.Translate(\"Close this dialog\"),\n                                Class: 'Primary',\n                                Function: function () {\n                                    Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                                }\n                            }\n                        ],\n                        true\n                    );\n\n                    // if the support bundle is bigger than 10 MB do not show send option\n                    if (parseInt(Response.Filesize,10)>10) {\n                        $('.SupportBundleSendFieldSet').addClass('Hidden');\n                        $('.NoSupportBundleSendMessage').removeClass('Hidden');\n                        $('.SizeMessage').removeClass('Hidden');\n                    }\n\n                    // if the sender addres is invalid it is set to empty string, send option should not be shown\n                    else if ($('#Sender').val() === '') {\n                        $('.SupportBundleSendFieldSet').addClass('Hidden');\n                        $('.NoSupportBundleSendMessage').removeClass('Hidden');\n                        $('.EmailMessage').removeClass('Hidden');\n                    }\n\n                    // otherwise show full email option\n                    else {\n                        $('#SendSupportBundle').on('click', function () {\n                            $('#SendingAJAXLoader').addClass('AJAXLoader');\n                            $('#SendSupportBundle').prop('disabled', true);\n                            $('#DownloadSupportBundle').prop('disabled', true);\n                            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=SendSupportBundle;Filename=' + Response.Filename + ';RandomID=' + Response.RandomID, function (SendResponse) {\n\n                                if (!SendResponse || !SendResponse.Success) {\n                                    alert(Core.Language.Translate(\"The mail could not be sent\"));\n                                }\n                                Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                            });\n                        });\n                    }\n\n                    $('#DownloadSupportBundle').on('click', function () {\n                        window.location.href = Core.Config.Get('Baselink') + 'Action=' + Core.Config.Get('Action') + ';Subaction=DownloadSupportBundle;Filename=' + Response.Filename + ';RandomID=' + Response.RandomID;\n                        Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                    });\n                }\n            });\n\n            Event.preventDefault();\n            Event.stopPropagation();\n            return false;\n        });\n\n        // Bind event on Details button\n        $('.ShowItemMessage').on('click', function() {\n            Core.UI.Dialog.ShowContentDialog($(this).next('.Hidden').html(), $(this).closest('tr').find('.ItemLabel').text(), '200px', 'Center');\n            return false;\n        });\n\n        // Bind event on Data Table\n        $('.DataTable').each(function() {\n            if ($(this).find('.Flag.Problem').length) {\n                $(this).prev('h3').find('.Flag').addClass('Problem');\n                return true;\n            }\n            if ($(this).find('.Flag.Warning').length) {\n                $(this).prev('h3').find('.Flag').addClass('Warning');\n                return true;\n            }\n            if ($(this).find('.Flag.OK').length) {\n                $(this).prev('h3').find('.Flag').addClass('OK');\n                return true;\n            }\n            if ($(this).find('.Flag.Information').length) {\n                $(this).prev('h3').find('.Flag').addClass('Information');\n                return true;\n            }\n            if ($(this).find('.Flag.Unknown').length) {\n                $(this).prev('h3').find('.Flag').addClass('Unknown');\n                return true;\n            }\n        });\n    };\n\n    Core.Init.RegisterNamespace(TargetNS, 'APP_MODULE');\n\n    return TargetNS;\n}(Core.Agent.Admin.SupportDataCollector || {}));\n"], "fixing_code": ["# --\n# Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n# --\n# This software comes with ABSOLUTELY NO WARRANTY. For details, see\n# the enclosed file COPYING for license information (GPL). If you\n# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n# --\n\npackage Kernel::Modules::AdminSupportDataCollector;\n\nuse strict;\nuse warnings;\n\nuse Kernel::System::SupportDataCollector::PluginBase;\n\nuse Kernel::System::VariableCheck qw(:all);\n\nour $ObjectManagerDisabled = 1;\n\nsub new {\n    my ( $Type, %Param ) = @_;\n\n    # allocate new hash for object\n    my $Self = {%Param};\n    bless( $Self, $Type );\n\n    return $Self;\n}\n\nsub Run {\n    my ( $Self, %Param ) = @_;\n\n    # ------------------------------------------------------------ #\n    # Send Support Data Update\n    # ------------------------------------------------------------ #\n\n    if ( $Self->{Subaction} eq 'SendUpdate' ) {\n\n        my %Result = $Kernel::OM->Get('Kernel::System::Registration')->RegistrationUpdateSend();\n\n        return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n            ContentType => 'text/html',\n            Content     => $Result{Success},\n            Type        => 'inline',\n            NoCache     => 1,\n        );\n    }\n    elsif ( $Self->{Subaction} eq 'GenerateSupportBundle' ) {\n        return $Self->_GenerateSupportBundle();\n    }\n    elsif ( $Self->{Subaction} eq 'DownloadSupportBundle' ) {\n        return $Self->_DownloadSupportBundle();\n    }\n    elsif ( $Self->{Subaction} eq 'SendSupportBundle' ) {\n        return $Self->_SendSupportBundle();\n    }\n    return $Self->_SupportDataCollectorView(%Param);\n}\n\nsub _SupportDataCollectorView {\n    my ( $Self, %Param ) = @_;\n\n    my $SystemDataObject  = $Kernel::OM->Get('Kernel::System::SystemData');\n    my $RegistrationState = $SystemDataObject->SystemDataGet(\n        Key => 'Registration::State',\n    ) || '';\n    my $SupportDataSending = $SystemDataObject->SystemDataGet(\n        Key => 'Registration::SupportDataSending',\n    ) || 'No';\n\n    my %SupportData = $Kernel::OM->Get('Kernel::System::SupportDataCollector')->Collect(\n        UseCache => 1,\n    );\n\n    my $LayoutObject = $Kernel::OM->Get('Kernel::Output::HTML::Layout');\n\n    # check if cloud services are disabled\n    my $CloudServicesDisabled = $Kernel::OM->Get('Kernel::Config')->Get('CloudServices::Disabled') || 0;\n\n    if ( !$SupportData{Success} ) {\n        $LayoutObject->Block(\n            Name => 'SupportDataCollectionFailed',\n            Data => \\%SupportData,\n        );\n    }\n    else {\n        if ($CloudServicesDisabled) {\n            $LayoutObject->Block(\n                Name => 'CloudServicesWarning',\n            );\n        }\n        elsif (\n            $RegistrationState ne 'registered'\n            || $SupportDataSending ne 'Yes'\n            )\n        {\n            $LayoutObject->Block(\n                Name => 'NoteNotRegisteredNotSending',\n            );\n        }\n        else {\n            $LayoutObject->Block(\n                Name => 'NoteRegisteredSending',\n            );\n        }\n        $LayoutObject->Block(\n            Name => 'NoteSupportBundle',\n        );\n\n        $LayoutObject->Block(\n            Name => 'SupportData',\n        );\n        my ( $LastGroup, $LastSubGroup ) = ( '', '' );\n\n        for my $Entry ( @{ $SupportData{Result} || [] } ) {\n\n            $Entry->{StatusName} = $Kernel::System::SupportDataCollector::PluginBase::Status2Name{\n                $Entry->{Status}\n            };\n\n            # get the display path, display type and additional information for the output\n            my ( $DisplayPath, $DisplayType, $DisplayAdditional ) = split( m{[\\@\\:]}, $Entry->{DisplayPath} // '' );\n\n            my ( $Group, $SubGroup ) = split( m{/}, $DisplayPath );\n            if ( $Group ne $LastGroup ) {\n                $LayoutObject->Block(\n                    Name => 'SupportDataGroup',\n                    Data => {\n                        Group => $Group,\n                    },\n                );\n            }\n            $LastGroup = $Group // '';\n\n            if ( !$SubGroup || $SubGroup ne $LastSubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataRow',\n                    Data => $Entry,\n                );\n            }\n\n            if ( $SubGroup && $SubGroup ne $LastSubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataSubGroup',\n                    Data => {\n                        %{$Entry},\n                        SubGroup => $SubGroup,\n                    },\n                );\n            }\n            $LastSubGroup = $SubGroup // '';\n\n            if ( $DisplayType && $DisplayType eq 'Table' && ref $Entry->{Value} eq 'ARRAY' ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataEntryTable',\n                    Data => $Entry,\n                );\n\n                if ( IsArrayRefWithData( $Entry->{Value} ) ) {\n\n                    # get the table columns\n                    my @TableColumns = split( m{,}, $DisplayAdditional // '' );\n\n                    my @Identifiers;\n                    my @Labels;\n\n                    COLUMN:\n                    for my $Column (@TableColumns) {\n\n                        next COLUMN if !$Column;\n\n                        # get the identifier and label\n                        my ( $Identifier, $Label ) = split( m{\\|}, $Column );\n\n                        # set the identifier as default label\n                        $Label ||= $Identifier;\n\n                        push @Identifiers, $Identifier;\n                        push @Labels,      $Label;\n                    }\n\n                    $LayoutObject->Block(\n                        Name => 'SupportDataEntryTableDetails',\n                        Data => {\n                            Identifiers => \\@Identifiers,\n                            Labels      => \\@Labels,\n                            %{$Entry},\n                        },\n                    );\n                }\n            }\n            elsif ( !$SubGroup ) {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataEntry',\n                    Data => $Entry,\n                );\n                if ( defined $Entry->{Value} && length $Entry->{Value} ) {\n                    if ( $Entry->{Value} =~ m{\\n} ) {\n                        $LayoutObject->Block(\n                            Name => 'SupportDataEntryValueMultiLine',\n                            Data => $Entry,\n                        );\n                    }\n                    else {\n                        $LayoutObject->Block(\n                            Name => 'SupportDataEntryValueSingleLine',\n                            Data => $Entry,\n                        );\n                    }\n                }\n            }\n            else {\n\n                $LayoutObject->Block(\n                    Name => 'SupportDataSubEntry',\n                    Data => $Entry,\n                );\n\n                if ( $Entry->{Message} || $Entry->{MessageFormatted} ) {\n                    $LayoutObject->Block(\n                        Name => 'SupportDataSubEntryMessage',\n                        Data => {\n                            Message          => $Entry->{Message},\n                            MessageFormatted => $Entry->{MessageFormatted},\n                        },\n                    );\n                }\n            }\n        }\n    }\n\n    # get user data\n    my %User = $Kernel::OM->Get('Kernel::System::User')->GetUserData(\n        UserID => $Self->{UserID},\n        Cached => 1,\n    );\n\n    my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n\n    # get sender email address\n    if ( $User{UserEmail} && $User{UserEmail} !~ /root\\@localhost/ ) {\n        $Param{SenderAddress} = $User{UserEmail};\n    }\n    elsif (\n\n        $ConfigObject->Get('AdminEmail')\n        && $ConfigObject->Get('AdminEmail') !~ /root\\@localhost/\n        && $ConfigObject->Get('AdminEmail') !~ /admin\\@example.com/\n        )\n    {\n        $Param{SenderAddress} = $ConfigObject->Get('AdminEmail');\n    }\n    $Param{SenderName} = $User{UserFullname};\n\n    # verify if the email is valid, set it to empty string if not, this will be checked on client\n    #    side\n    if (\n        $Param{SenderAddress} &&\n        !$Kernel::OM->Get('Kernel::System::CheckItem')->CheckEmail( Address => $Param{SenderAddress} )\n        )\n    {\n        $Param{SenderAddress} = '';\n    }\n\n    my $Output = $LayoutObject->Header();\n    $Output .= $LayoutObject->NavigationBar();\n    $Output .= $LayoutObject->Output(\n        TemplateFile => 'AdminSupportDataCollector',\n        Data         => \\%Param,\n    );\n    $Output .= $LayoutObject->Footer();\n\n    return $Output;\n}\n\nsub _GenerateSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    $Kernel::OM->Get('Kernel::Output::HTML::Layout')->ChallengeTokenCheck();\n\n    my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n    my $RandomID   = $MainObject->GenerateRandomString(\n        Length     => 8,\n        Dictionary => [ 0 .. 9, 'a' .. 'f' ],\n    );\n\n    # remove any older file\n    my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n    my $TempDir      = $ConfigObject->Get('TempDir') . '/SupportBundleDownloadCache';\n\n    if ( !-d $TempDir ) {\n        mkdir $TempDir;\n    }\n\n    $TempDir = $ConfigObject->Get('TempDir') . '/SupportBundleDownloadCache/' . $RandomID;\n\n    if ( !-d $TempDir ) {\n        mkdir $TempDir;\n    }\n\n    # remove all files\n    my @ListOld = glob( $TempDir . '/*' );\n    for my $File (@ListOld) {\n        unlink $File;\n    }\n\n    # create the support bundle\n    my $Result = $Kernel::OM->Get('Kernel::System::SupportBundleGenerator')->Generate();\n\n    if ( !$Result->{Success} ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => $Result->{Message},\n        );\n    }\n    else {\n\n        # save support bundle in the FS (temporary)\n        my $FileLocation = $MainObject->FileWrite(\n            Location   => $TempDir . '/' . $Result->{Data}->{Filename},\n            Content    => $Result->{Data}->{Filecontent},\n            Mode       => 'binmode',\n            Type       => 'Local',\n            Permission => '644',\n        );\n    }\n\n    my $JSONString = $Kernel::OM->Get('Kernel::System::JSON')->Encode(\n        Data => {\n            Success  => $Result->{Success},\n            Message  => $Result->{Message} || '',\n            Filesize => $Result->{Data}->{Filesize} || '',\n            Filename => $Result->{Data}->{Filename} || '',\n            RandomID => $RandomID,\n        },\n    );\n\n    return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n        ContentType => 'text/html',\n        Content     => $JSONString,\n        Type        => 'inline',\n        NoCache     => 1,\n    );\n}\n\nsub _DownloadSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    my $ParamObject  = $Kernel::OM->Get('Kernel::System::Web::Request');\n    my $LayoutObject = $Kernel::OM->Get('Kernel::Output::HTML::Layout');\n\n    $LayoutObject->ChallengeTokenCheck();\n\n    my $Filename     = $ParamObject->GetParam( Param => 'Filename' ) || '';\n    my $RandomID     = $ParamObject->GetParam( Param => 'RandomID' ) || '';\n\n    # Validate simple file name.\n    if ( !$Filename || $Filename !~ m{^[a-z0-9._-]+$}smxi  ) {\n        return $LayoutObject->ErrorScreen(\n            Message => \"Need Filename or Filename invalid!\",\n        );\n    }\n\n    # Validate simple RandomID.\n    if ( !$RandomID || $RandomID !~ m{^[a-f0-9]+$}smx  ) {\n        return $LayoutObject->ErrorScreen(\n            Message => \"Need RandomID or RandomID invalid!\",\n        );\n    }\n\n    my $TempDir  = $Kernel::OM->Get('Kernel::Config')->Get('TempDir') . '/SupportBundleDownloadCache/' . $RandomID;\n    my $Location = $TempDir . '/' . $Filename;\n\n    my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n    my $Content    = $MainObject->FileRead(\n        Location => $Location,\n        Mode     => 'binmode',\n        Type     => 'Local',\n        Result   => 'SCALAR',\n    );\n\n    if ( !$Content ) {\n        return $LayoutObject->ErrorScreen(\n            Message => $LayoutObject->{LanguageObject}->Translate( 'File %s could not be read!', $Location ),\n        );\n    }\n\n    my $Success = $MainObject->FileDelete(\n        Location => $Location,\n        Type     => 'Local',\n    );\n\n    if ( !$Success ) {\n        $Kernel::OM->Get('Kernel::System::Log')->Log(\n            Priority => 'error',\n            Message  => \"File $Location could not be deleted!\",\n        );\n    }\n\n    rmdir $TempDir;\n\n    return $LayoutObject->Attachment(\n        Filename    => $Filename,\n        ContentType => 'application/octet-stream; charset=' . $LayoutObject->{UserCharset},\n        Content     => $$Content,\n    );\n}\n\nsub _SendSupportBundle {\n    my ( $Self, %Param ) = @_;\n\n    my $ParamObject = $Kernel::OM->Get('Kernel::System::Web::Request');\n    my $LogObject   = $Kernel::OM->Get('Kernel::System::Log');\n    my $Filename    = $ParamObject->GetParam( Param => 'Filename' ) || '';\n    my $RandomID    = $ParamObject->GetParam( Param => 'RandomID' ) || '';\n    my $Success;\n\n    if ($Filename) {\n\n        my $ConfigObject = $Kernel::OM->Get('Kernel::Config');\n\n        my $TempDir = $ConfigObject->Get('TempDir')\n            . '/SupportBundleDownloadCache/'\n            . $RandomID;\n        my $Location = $TempDir . '/' . $Filename;\n\n        my $MainObject = $Kernel::OM->Get('Kernel::System::Main');\n\n        my $Content = $MainObject->FileRead(\n            Location => $Location,\n            Mode     => 'binmode',\n            Type     => 'Local',\n            Result   => 'SCALAR',\n        );\n\n        if ($Content) {\n\n            $Success = $MainObject->FileDelete(\n                Location => $Location,\n                Type     => 'Local',\n            );\n\n            if ( !$Success ) {\n                $LogObject->Log(\n                    Priority => 'error',\n                    Message  => \"File $Location could not be deleted!\",\n                );\n            }\n\n            rmdir $TempDir;\n\n            my %RegistrationInfo = $Kernel::OM->Get('Kernel::System::Registration')->RegistrationDataGet(\n                Extended => 1,\n            );\n\n            my %Data;\n\n            if (%RegistrationInfo) {\n                my $State = $RegistrationInfo{State} || '';\n                if ( $State && lc $State eq 'registered' ) {\n                    $State = 'active';\n                }\n\n                %Data = (\n                    %{ $RegistrationInfo{System} },\n                    State              => $State,\n                    APIVersion         => $RegistrationInfo{APIVersion},\n                    APIKey             => $RegistrationInfo{APIKey},\n                    LastUpdateID       => $RegistrationInfo{LastUpdateID},\n                    RegistrationKey    => $RegistrationInfo{UniqueID},\n                    SupportDataSending => $RegistrationInfo{SupportDataSending},\n                    Type               => $RegistrationInfo{Type},\n                    Description        => $RegistrationInfo{Description},\n                );\n            }\n\n            # get user data\n            my %User = $Kernel::OM->Get('Kernel::System::User')->GetUserData(\n                UserID => $Self->{UserID},\n                Cached => 1,\n            );\n\n            # get sender email address\n            my $SenderAddress = '';\n            if ( $User{UserEmail} && $User{UserEmail} !~ /root\\@localhost/ ) {\n                $SenderAddress = $User{UserEmail};\n            }\n            elsif (\n                $ConfigObject->Get('AdminEmail')\n                && $ConfigObject->Get('AdminEmail') !~ /root\\@localhost/\n                && $ConfigObject->Get('AdminEmail') !~ /admin\\@example.com/\n                )\n            {\n                $SenderAddress = $ConfigObject->Get('AdminEmail');\n            }\n\n            my $SenderName = $User{UserFullname};\n\n            my $Body;\n\n            $Body = \"Sender:$SenderName\\n\";\n            $Body .= \"Email:$SenderAddress\\n\";\n\n            if (%Data) {\n                for my $Key ( sort keys %Data ) {\n                    my $ItemValue = $Data{$Key} || '';\n                    $Body .= \"$Key:$ItemValue\\n\";\n                }\n            }\n            else {\n                $Body .= \"Not registered\\n\";\n            }\n\n            my $Result = $Kernel::OM->Get('Kernel::System::Email')->Send(\n                From          => $SenderAddress,\n                To            => 'SupportBundle@otrs.com',\n                Subject       => 'Support::Bundle::Email',\n                Type          => 'text/plain',\n                Charset       => 'utf-8',\n                Body          => $Body,\n                CustomHeaders => {\n                    'X-OTRS-RegistrationKey' => $Data{'RegistrationKey'} || 'Not registered',\n                },\n                Attachment => [\n                    {\n                        Filename    => $Filename,\n                        Content     => $Content,\n                        ContentType => 'application/octet-stream',\n                        Disposition => 'attachment',\n                    },\n                ],\n            );\n\n            if ( $Result->{Success} ) {\n                $Success = 1;\n            }\n        }\n        else {\n            $LogObject->Log(\n                Priority => 'error',\n                Message  => \"$Filename could not be read!\",\n            );\n        }\n    }\n    else {\n        $LogObject->Log(\n            Priority => 'error',\n            Message  => \"Need Filename\",\n        );\n    }\n\n    my $JSONString = $Kernel::OM->Get('Kernel::System::JSON')->Encode(\n        Data => {\n            Success => $Success || '',\n        },\n    );\n\n    return $Kernel::OM->Get('Kernel::Output::HTML::Layout')->Attachment(\n        ContentType => 'text/html',\n        Content     => $JSONString,\n        Type        => 'inline',\n        NoCache     => 1,\n    );\n}\n\n1;\n", "// --\n// Copyright (C) 2001-2018 OTRS AG, https://otrs.com/\n// --\n// This software comes with ABSOLUTELY NO WARRANTY. For details, see\n// the enclosed file COPYING for license information (GPL). If you\n// did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.\n// --\n\n\"use strict\";\n\nvar Core = Core || {};\nCore.Agent = Core.Agent || {};\nCore.Agent.Admin = Core.Agent.Admin || {};\n\n/**\n * @namespace Core.Agent.Admin.SupportDataCollector\n * @memberof Core.Agent.Admin\n * @author OTRS AG\n * @description\n *      This namespace contains the special module function for SupportDataCollector module.\n */\n Core.Agent.Admin.SupportDataCollector = (function (TargetNS) {\n\n    /*\n    * @name Init\n    * @memberof Core.Agent.Admin.SupportDataCollector\n    * @function\n    * @description\n    *      This function initializes module functionality\n    */\n    TargetNS.Init = function () {\n\n        // Bind event on SendUpdate button\n        $('#SendUpdate').on('click', function (Event) {\n            var TextClass = '';\n            Core.UI.Dialog.ShowContentDialog('<div class=\"Spacing Center\"><span class=\"AJAXLoader W33pc\" title='+ Core.Language.Translate(\"Sending Update...\") + '></span></div>',Core.Language.Translate(\"Sending Update...\"), '10px', 'Center', true, undefined, true);\n\n            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=SendUpdate;', function (Response) {\n\n                var ResponseMessage = Core.Language.Translate('Support Data information was successfully sent.');\n\n                    // if the waiting dialog was canceled,\n                    // do not show the search dialog as well\n                    if (!$('.Dialog:visible').length) {\n                        return;\n                    }\n\n                if (Response === 0) {\n                    ResponseMessage = Core.Language.Translate('Was not possible to send Support Data information.');\n                    TextClass = 'Error';\n                }\n\n                Core.UI.Dialog.ShowContentDialog(\n                    '<div class=\"Spacing Center SendUpdateResultDialog\"><span class=\"W50pc ' + TextClass + '\" title=\"' + ResponseMessage + '\">' + ResponseMessage + '</span></div>', Core.Language.Translate(\"Update Result\"),\n                    '10px',\n                    'Center',\n                    true,\n                    [\n                        {\n                            Label: Core.Language.Translate('Close this dialog'),\n                            Class: 'Primary',\n                            Function: function () {\n                                Core.UI.Dialog.CloseDialog($('.SendUpdateResultDialog'));\n                            }\n                        }\n                    ],\n                    true\n                );\n\n            });\n\n            Event.preventDefault();\n            Event.stopPropagation();\n            return false;\n        });\n\n        // Bind event on Generate Support bundle button\n        $('#GenerateSupportBundle').on('click', function (Event) {\n            Core.UI.Dialog.ShowContentDialog('<div class=\"Spacing Center LoadingSupportBundleDialog\"><span class=\"AJAXLoader W75pc\" title=' + Core.Language.Translate(\"Generating...\") + '></span></div>', Core.Language.Translate(\"Generating...\"), '10px', 'Center', true, undefined, true);\n\n            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=GenerateSupportBundle;', function (Response) {\n                var TextClass, ResponseMessage;\n\n                // if the waiting dialog was canceled,\n                // do not show the option dialog as well\n                if (!$('.Dialog:visible').length) {\n                    return;\n                }\n\n                Core.UI.Dialog.CloseDialog($('.LoadingSupportBundleDialog'));\n\n                if (!Response.Success) {\n                    ResponseMessage = Core.Language.Translate('It was not possible to generate the Support Bundle.'),\n                    TextClass = 'Error';\n\n                    Core.UI.Dialog.ShowContentDialog(\n                        '<div class=\"Spacing Center NoSupportBunle\"><span class=\"W50pc ' + TextClass + '\" title=\"' + ResponseMessage + '\">' + ResponseMessage + '</span></div>', Core.Language.Translate(\"Generate Result\"),\n                        '10px',\n                        'Center',\n                        true,\n                        [\n                            {\n                                Label: Core.Language.Translate('Close this dialog'),\n                                Class: 'Primary',\n                                Function: function () {\n                                    Core.UI.Dialog.CloseDialog($('.NoSupportBunle'));\n                                }\n                            }\n                        ],\n                        true\n                    );\n                }\n                else {\n\n                    Core.UI.Dialog.ShowContentDialog(\n                        $('#SupportBundleOptionsDialogContainer'), Core.Language.Translate(\"Support Bundle\"),\n                        '10px',\n                        'Center',\n                        true,\n                        [\n                            {\n                                Label: Core.Language.Translate(\"Close this dialog\"),\n                                Class: 'Primary',\n                                Function: function () {\n                                    Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                                }\n                            }\n                        ],\n                        true\n                    );\n\n                    // if the support bundle is bigger than 10 MB do not show send option\n                    if (parseInt(Response.Filesize,10)>10) {\n                        $('.SupportBundleSendFieldSet').addClass('Hidden');\n                        $('.NoSupportBundleSendMessage').removeClass('Hidden');\n                        $('.SizeMessage').removeClass('Hidden');\n                    }\n\n                    // if the sender addres is invalid it is set to empty string, send option should not be shown\n                    else if ($('#Sender').val() === '') {\n                        $('.SupportBundleSendFieldSet').addClass('Hidden');\n                        $('.NoSupportBundleSendMessage').removeClass('Hidden');\n                        $('.EmailMessage').removeClass('Hidden');\n                    }\n\n                    // otherwise show full email option\n                    else {\n                        $('#SendSupportBundle').on('click', function () {\n                            $('#SendingAJAXLoader').addClass('AJAXLoader');\n                            $('#SendSupportBundle').prop('disabled', true);\n                            $('#DownloadSupportBundle').prop('disabled', true);\n                            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), 'Action=' + Core.Config.Get('Action') + ';Subaction=SendSupportBundle;Filename=' + Response.Filename + ';RandomID=' + Response.RandomID, function (SendResponse) {\n\n                                if (!SendResponse || !SendResponse.Success) {\n                                    alert(Core.Language.Translate(\"The mail could not be sent\"));\n                                }\n                                Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                            });\n                        });\n                    }\n\n                    $('#DownloadSupportBundle').on('click', function () {\n                        window.location.href = Core.Config.Get('Baselink') + 'Action=' + Core.Config.Get('Action') + ';Subaction=DownloadSupportBundle;Filename=' + Response.Filename + ';RandomID=' + Response.RandomID + ';ChallengeToken=' + Core.Config.Get('ChallengeToken');\n                        Core.UI.Dialog.CloseDialog($('#SupportBundleOptionsDialog'));\n                    });\n                }\n            });\n\n            Event.preventDefault();\n            Event.stopPropagation();\n            return false;\n        });\n\n        // Bind event on Details button\n        $('.ShowItemMessage').on('click', function() {\n            Core.UI.Dialog.ShowContentDialog($(this).next('.Hidden').html(), $(this).closest('tr').find('.ItemLabel').text(), '200px', 'Center');\n            return false;\n        });\n\n        // Bind event on Data Table\n        $('.DataTable').each(function() {\n            if ($(this).find('.Flag.Problem').length) {\n                $(this).prev('h3').find('.Flag').addClass('Problem');\n                return true;\n            }\n            if ($(this).find('.Flag.Warning').length) {\n                $(this).prev('h3').find('.Flag').addClass('Warning');\n                return true;\n            }\n            if ($(this).find('.Flag.OK').length) {\n                $(this).prev('h3').find('.Flag').addClass('OK');\n                return true;\n            }\n            if ($(this).find('.Flag.Information').length) {\n                $(this).prev('h3').find('.Flag').addClass('Information');\n                return true;\n            }\n            if ($(this).find('.Flag.Unknown').length) {\n                $(this).prev('h3').find('.Flag').addClass('Unknown');\n                return true;\n            }\n        });\n    };\n\n    Core.Init.RegisterNamespace(TargetNS, 'APP_MODULE');\n\n    return TargetNS;\n}(Core.Agent.Admin.SupportDataCollector || {}));\n"], "filenames": ["Kernel/Modules/AdminSupportDataCollector.pm", "var/httpd/htdocs/js/Core.Agent.Admin.SupportDataCollector.js"], "buggy_code_start_loc": [282, 163], "buggy_code_end_loc": [359, 164], "fixing_code_start_loc": [283, 163], "fixing_code_end_loc": [372, 164], "type": "CWE-20", "message": "In Open Ticket Request System (OTRS) 4.0.x before 4.0.32, 5.0.x before 5.0.30, and 6.0.x before 6.0.11, an attacker could send a malicious email to an OTRS system. If a user with admin permissions opens it, it causes deletions of arbitrary files that the OTRS web server user has write access to.", "other": {"cve": {"id": "CVE-2018-16587", "sourceIdentifier": "cve@mitre.org", "published": "2018-09-28T00:29:02.053", "lastModified": "2018-11-21T17:55:03.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Open Ticket Request System (OTRS) 4.0.x before 4.0.32, 5.0.x before 5.0.30, and 6.0.x before 6.0.11, an attacker could send a malicious email to an OTRS system. If a user with admin permissions opens it, it causes deletions of arbitrary files that the OTRS web server user has write access to."}, {"lang": "es", "value": "En Open Ticket Request System (OTRS) en versiones 4.0.x anteriores a la 4.0.32, versiones 5.0.x anteriores a la 5.0.30 y versiones 6.0.x anteriores a la 6.0.11, un atacante podr\u00eda enviar un email malicioso a un sistema OTRS. Si un usuario con permisos de administrador lo abre, provoca eliminaciones de archivos arbitrarios a los que el servidor web OTRS tiene acceso de escritura."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.0.32", "matchCriteriaId": "6BD45EA4-6EBA-4590-86F7-0D2FDFEE771D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.0.30", "matchCriteriaId": "C71C5452-F983-4A71-BC5F-07FFA60D5E19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:otrs:open_ticket_request_system:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.0.11", "matchCriteriaId": "2A8A41B9-7C2B-4DE6-A43E-25A6FE253325"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://community.otrs.com/security-advisory-2018-04-security-update-for-otrs-framework/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/OTRS/otrs/commit/a4a1a01f84fac7ab032570ee50b660e2ebb15c01", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/OTRS/otrs/commit/d8cae00b0f78c2a07bb10cedb817304139395843", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/OTRS/otrs/commit/d9db0c6a15caafda7689320ecf61777993c33711", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/09/msg00033.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4317", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OTRS/otrs/commit/a4a1a01f84fac7ab032570ee50b660e2ebb15c01"}}