{"buggy_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#template(\"startpage.vm\")\n<div class=\"main layoutsubsection\">\n  <div id=\"mainContentArea\">\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Since this template can be used for creating a Page or a Space, compute its title based on the passed\n    ## \"tocreate\" parameter which can be either \"page\" or \"space\". If no \"tocreate\" parameter is passed then we\n    ## default to creating a Page. \n    ## ---------------------------------------------------------------------------------------------------------\n    #set($tocreate = $request.getParameter('tocreate'))\n    #if(\"$!tocreate\" != 'space')\n      #set ($stepTitle = $services.localization.render('core.create.pageTitle'))\n    #else\n      #set ($stepTitle = $services.localization.render('core.create.spaceTitle'))\n    #end\n    <div class=\"xcontent\">\n      #displayDocumentTitle($stepTitle)\n      #template(\"createinline.vm\")\n    </div>## xcontent\n  </div>## mainContentArea\n</div>## main\n#template(\"endpage.vm\")\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------------------------------------\n## This template is called by the create action which binds some context variables as it executes, based on\n## the request and the current document. These variables can be used in this template:\n## * $spaceReference - the space reference of the new document, read from the \"spaceReference\" parameter\n## * $name - the name to use for the new document, read from the \"name\" parameter\n## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are\n##              creating a terminal document ($name is the document name). Determined by the create action\n## * $availableTemplateProviders - list of template provider documents available from the current space\n##\n## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings\n## also consider backwards compatibility and convert older \"space\" and \"page\" parameters if they are passed.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n## If a parent parameter is passed, use it to set the parent when creating the new page.\n## If no parent parameter was passed, the create action will determine it to be the current document if it\n## exists or the Main space's webhome if the current document does not exist.\n## ---------------------------------------------------------------------------------------------------------\n#set ($parent = \"$!request.getParameter('parent')\")\n\n## ---------------------------------------------------------------------------------------------------------\n## This parent can be passed a title for the document to create (using the \"title\" parameter).\n## The title is used to automatically compute a page name, which can then be customized by the user.\n## If no title is given, the page name (if set) will be used as title.\n## ---------------------------------------------------------------------------------------------------------\n#if (\"$!request.title\" != '')\n  #set ($title = \"$!request.title\")\n#else\n  #set ($title = \"$!{escapetool.velocity($name)}\")\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Get the passed template provider, if any\n## ---------------------------------------------------------------------------------------------------------\n#set($templateProvider = \"$!request.templateprovider\")\n## Get the template as well, since in case template provider is missing, template should be used, \n## to allow creation from template directly, without necessarily going through template provider.\n#set($template = \"$!request.template\")\n\n## ---------------------------------------------------------------------------------------------------------\n## If there was an exception creating the page because of invalid space, notify. \n## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the \n## 11016 one, nothing will be displayed, depending on the other passed parameters.\n## ---------------------------------------------------------------------------------------------------------\n#set($exception = $createException)\n## check if the exception is about the non-allowed spaces for template\n#if(\"$!exception\" != '' && $exception.code == 11016)\n  <div class=\"box errormessage\">\n    #set($allowedSpaces = $createAllowedSpaces)\n    #if ($allowedSpaces.size() == 1)\n      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])\n    #else\n      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])\n    #end\n  </div>\n#end\n## check if the exception is about the document which already exists\n#if(\"$!exception\" != '' && $exception.code == 11002)\n  <div class='box errormessage'>\n      ## Use the 'existingDocumentReference' context binding set by the create action for this case.\n      $services.localization.render('core.create.page.error.docalreadyexists',\n        [\"${existingDocumentReference}\",\n         $xwiki.getURL($existingDocumentReference, 'view', ''),\n         $xwiki.getURL($existingDocumentReference, 'edit', '')\n        ]\n      )\n  </div>\n#end\n## check if the exception is about the document name being invalid\n#if(\"$!exception\" != '' && $exception.code == 11018)\n<div class='box errormessage'>\n  ## Use the 'invalidNameReference' context binding set by the create action for this case.\n  $services.localization.render('entitynamevalidation.create.invalidname', [$invalidNameReference])\n</div>\n#end\n\n## check if the exception is about the document having a path too long\n#template('hierarchy_macros.vm')\n#if(\"$!exception\" != '' && $exception.code == 11017)\n  #set ($options = {})\n  #set ($documentReference = $services.model.resolveDocument($tooLongPath))\n  <div class='box errormessage'>\n      $services.localization.render('core.create.page.error.docpathtoolong',\n        [\"<p>#hierarchy($documentReference, $options)</p>\",\n          $doc.getLocalReferenceMaxLength(),\n          $tooLongPath.length()\n        ]\n      )\n  </div>\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Determine if we need to do extra checks for a deprecated, pre-NestedSpaces request to create a space.\n## ---------------------------------------------------------------------------------------------------------\n#set ($deprecatedSpaceCreate = \"$!request.tocreate\" == 'space')\n\n## ---------------------------------------------------------------------------------------------------------\n## Note: The list of available template providers is computed in the action and set on the context under\n## the \"availableTemplateProviders\" binding.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro for displaying the available types and templates and changing target space rules accordingly\n## ---------------------------------------------------------------------------------------------------------\n#macro (displayTypes)\n  #if ($template == '')\n    #set ($blankTerminalState = !$isSpace)\n    #set ($options = [\n      { \n        'name': $services.localization.render('core.create.type.default'),\n        'options': [\n          {\n            'name': $services.localization.render('core.create.type.blank'),\n            'value': 'blank',\n            'description': $services.localization.render('core.create.type.blank.description'),\n            'icon': 'file-white',\n            'data': {\n              'type': 'blank',\n              'terminal' : \"$blankTerminalState\"\n            }\n          }\n        ]\n      }])\n    #if ($xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'OfficeImporter')) && $services.officemanager.isConnected())\n      ## TODO: handle this use case with an extension point\n      #set ($discard = $options[0].options.add({\n        'name': $services.localization.render('office.createForm.type.name'),\n        'value': 'office',\n        'description': $services.localization.render('office.createForm.type.description'),\n        'icon': 'file-word',\n        'data': {\n          'type':'office'\n        }\n      }))\n    #end\n    #if (!$availableTemplateProviders.isEmpty())\n      #set ($templateOptions = [])\n      #set ($discard = $options.add({'name': $services.localization.render('core.create.type.templates'), 'options': $templateOptions}))\n      #foreach($tpdoc in $availableTemplateProviders)\n        #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))\n        #set ($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))\n        ##\n        ## Extract and save in data-* attributes list of allowed spaces to be used in the JavaScript validation of the spaceReference input.\n        ##\n        #set($jsAllowedSpacesArray = '[]')## Reset any previous value\n        #set($allowedSpaces = $tpobj.getValue('creationRestrictions'))\n        #if($allowedSpaces.size() == 0)\n          ## Backwards compatibility for Template Providers created before 8.3M2.\n          #set($allowedSpaces = $tpobj.getValue('spaces'))\n        #end\n        ## Reset to an empty list when no restrictions are set.\n        #if (\"$!allowedSpaces\" == '')\n          #set ($allowedSpaces = [])\n        #end\n        #if($allowedSpaces.size() > 0)\n          #set($jsAllowedSpacesArray = $jsontool.serialize($allowedSpaces))\n        #end\n        ## Compute the error message.\n        #set ($templateProviderName = $services.localization.render($tpobj.getValue('name')))\n        #if($allowedSpaces.isEmpty())\n          #set($message = '')\n        #elseif($allowedSpaces.size() == 1)\n          #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #else\n          #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #end\n        ##\n        ## Determine if the creation restrictions are just suggestions\n        ##\n        #set ($restrictionsAreSuggestions = ($tpobj.getValue('creationRestrictionsAreSuggestions') == 1))\n        ##\n        ## Determine if it's a terminal page template\n        ##\n        #set ($isTerminalProvider = $tpobj.getValue('terminal'))\n        ## Check if this is an old template provider that has not been migrated (the 'type' property has not been\n        ## replaced by the 'terminal' property).\n        #set ($type = $tpobj.getValue('type'))\n        #if (\"$!isTerminalProvider\" == '' && (\"$!type\" != '' || $type == ''))\n          ## This must be an old template provider because the 'terminal' property is not set (or it was set to '---'\n          ## from the UI) and the 'type' property is still present.\n          #if ($type == 'space')\n            #set ($isTerminalProvider = false)\n          #else\n            ## 'page' or '' both resolve to true, for backwards compatibility reasons.\n            #set ($isTerminalProvider = true)\n          #end\n        #else\n          #set ($isTerminalProvider = ($isTerminalProvider == 1))\n        #end\n        ##\n        ## Display the template provider field option in the form.\n        ##\n        #set ($inputId = \"xwiki-create-form-${foreach.count}\")\n        #set ($icon = $tpobj.getValue('icon'))\n        #if (\"$!icon\" == '')\n          #set($icon = 'file-white')\n        #end\n        #set ($discard = $templateOptions.add({\n          'name': $services.localization.render($tpobj.getValue('name')),\n          'value': \"$tpdocRef\",\n          'description': $services.localization.render($tpobj.getValue('description')),\n          'icon': $icon,\n          'data': {\n            'allowed-spaces': $jsAllowedSpacesArray,\n            'allowed-spaces-message': $message,\n            'restrictions-are-suggestions': $restrictionsAreSuggestions,\n            'type': 'template',\n            'terminal' : $isTerminalProvider\n          }\n        }))\n      #end\n    #end\n    <dt>\n      <label>$services.localization.render('core.create.type')</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render('core.create.type.hint'))</span>\n    </dt>\n    #set ($defaultValue = $request.type)\n    #if (\"$!defaultValue\" == '')\n      #if ($recommendedTemplateProviders.size() > 0)\n        #set ($defaultValue = $services.model.serialize($recommendedTemplateProviders[0].documentReference, 'local'))\n      #else\n        #set ($defaultValue = 'blank')\n      #end\n    #end\n    <dd>#xwikiSelect('type', $options, $defaultValue, false, 'xwiki-select-adaptable-medium page-type', '', true)</dd>\n  #else\n    <input type=\"hidden\" name=\"template\" value=\"$escapetool.xml($template)\" />\n  #end\n#end\n#set ($discard = $xwiki.jsfx.use('js/xwiki/create.js', {'forceSkinAction': true}))\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro used to extract a wiki's homepage reference.\n## ---------------------------------------------------------------------------------------------------------\n#macro (getWikiHomePageReference $wiki $return)\n  #set ($_wikiHomePageReference = $services.wiki.getById($wiki).mainPageReference)\n  #if (!$_wikiHomePageReference)\n    #set ($wikiReference = $services.model.createWikiReference($wiki))\n    #set ($_wikiHomePageReference = $services.model.resolveDocument('', 'default', $wikiReference))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $_wikiHomePageReference)\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Display the form.\n## ---------------------------------------------------------------------------------------------------------\n## FIXME: Using the 'container' class when displayed in an ajax call by clicking on a Wanted Link so that it looks good (proper margins) in the popup.\n<form action=\"$doc.getURL('create')\" method=\"post\" id=\"create\" class=\"xform #if($request.ajax)container#end\">\n  <fieldset>\n\n  ## Deprecated: Pass along any received page parent.\n  <input type='hidden' name='parent' value=\"$!{escapetool.xml($parent)}\"/>\n\n  ## The \"templateprovider\" field is needed by the CreateAction, even empty.\n  ## By the past, it was \"xwiki/create.js\" which created this field, but it was causing problems when the user sent the\n  ## form before the JavaScript code was executed.\n  <input type=\"hidden\" name=\"templateprovider\" id=\"templateprovider\" value=\"\" />\n  <input type=\"hidden\" name=\"form_token\" value=\"$!{escapetool.xml($services.csrf.getToken())}\"/>\n\n  <div class='row'>\n    ## Hide the first column when displayed in an AJAX call by clicking on a Wanted Link (because we know the target\n    ## location from the link reference) or when the current document is new (because the create action uses the location\n    ## of the current document as target in this case).\n    #if (!$request.ajax && !$doc.isNew())\n      ## Determine the parent reference for the new document.\n      #set ($parentReference = $spaceReference)\n      #if (!$parentReference)\n        ## No parent reference specified.\n        ## We keep this code although we tested above that the current document is not new because in the future we may\n        ## want to support changing the target location even if the current document is new.\n        #if ($doc.isNew())\n          ## Encourage the user to create the current document.\n          #set ($parentReference = $doc.documentReference.parent)\n          #if ($doc.documentReference.name == 'WebHome')\n            #set ($parentReference = $parentReference.parent)\n          #end\n        #else\n          #getWikiHomePageReference($doc.wiki $homeReference)\n          #if ($doc.documentReference.equals($homeReference) || $deprecatedSpaceCreate)\n            ## Encourage the user to create top level documents from the home page.\n            #set ($parentReference = $doc.documentReference.wikiReference)\n          #else\n            ## Encourage the user to create a child or sibling of the current document.\n            #set ($parentReference = $doc.documentReference.lastSpaceReference)\n          #end\n        #end\n      #end\n\n      ## Display the location picker.\n      <div class='col-xs-12 col-lg-6'>\n        #template('locationPicker_macros.vm')\n        #locationPicker({\n          'id': 'target',\n          'title': {\n            'label': 'core.create.title',\n            'hint': 'core.create.title.hint',\n            'name': 'title',\n            'value': $title,\n            'placeholder': 'core.create.name.placeholder'\n          },\n          'preview': {\n            'label': 'core.create.locationPreview.label',\n            'hint': 'core.create.locationPreview.hint'\n          },\n          'parent': {\n            'label': 'core.create.spaceReference.label',\n            'hint': 'core.create.spaceReference.hint',\n            'name': 'spaceReference',\n            'reference': $parentReference,\n            'placeholder': 'core.create.spaceReference.placeholder'\n          },\n          'name': {\n            'label': 'core.create.name.label',\n            'hint': 'core.create.name.hint',\n            'name': 'name',\n            'value': $name,\n            'placeholder': 'core.create.name.placeholder'\n          }\n        })\n      </div>\n    #else\n      ## First column is hidden.\n      ## Pass along the known values as hidden inputs.\n      ##\n      <input type='hidden' name='title' value=\"$!{escapetool.xml($title)}\"/>\n      <input type='hidden' id='name' name='name' value=\"$!{escapetool.xml($name)}\" />\n      #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))\n      <input type='hidden' id='spaceReference' name='spaceReference' value=\"$!{escapetool.xml($spaceReferenceLocalString)}\" />\n    #end\n    ## FIXME: When displayed in an ajax call by clicking on a Wanted Link, the responsive classes consider the calling document (large screen)\n    ## as the viewport and not the popup (small screen), so we can not use them since they create problems instead of fixing them.\n    <div class='#if(!$request.ajax)col-xs-12 col-lg-6#end'>\n      <dl>\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Page type\n        ## ---------------------------------------------------------------------------------------------------------\n        #displayTypes()\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Terminal page - Advanced users\n        ## ---------------------------------------------------------------------------------------------------------\n        #set ($hidden = '')\n        #if (!($isAdvancedUser || $isSuperAdmin) || $deprecatedSpaceCreate)\n          #set ($hidden = 'hidden')\n        #end\n        <dt class=\"$hidden\">\n          <input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" #if(!$isSpace)checked=\"checked\"#end/>\n          <label for=\"terminal\">$services.localization.render('core.create.terminal.label')</label>\n          ## Hidden input used to ensure that an unchecked terminal checkbox means non-terminal and that the default is not used by mistake.\n          <input type=\"hidden\" name=\"tocreate\" value=\"nonterminal\" />\n        </dt>\n        <dd class=\"$hidden\">\n          <span class=\"xHint\">$services.localization.render('core.create.terminal.hint')</span>\n        </dd>\n      </dl>\n    </div>\n  </div>\n\n  <div class='buttons'>\n    <span class='buttonwrapper'>\n      <input type='submit' class='button' value=\"$services.localization.render('create')\"/>\n    </span>\n    <span class=\"buttonwrapper\">\n      <a class=\"secondary button\" href=\"$doc.getURL()\">$services.localization.render('cancel')</a>\n    </span>\n  </div>\n\n  </fieldset>\n</form>\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#template('hierarchy_macros.vm')\n\n#set ($displayWikiFields = $xcontext.userReference.wikiReference.name == $xcontext.mainWikiName && $xwiki.hasSubWikis())\n\n#macro (locationPicker $options)\n  #set ($discard = $xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js'))\n  #set ($discard = $xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true))\n  #set ($discard = $xwiki.get('jsfx').use('uicomponents/widgets/locationPicker.js', true))\n  #set ($discard = $xwiki.get('ssfx').use('uicomponents/widgets/locationPicker.css', true))\n  <dl class=\"location-picker\">\n    ##\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Title field\n    ## ---------------------------------------------------------------------------------------------------------\n    ##\n    #set ($titleField = $options.title)\n    #set ($value = $request.getParameter($titleField.name))\n    #if (!$value)\n      #set ($value = $titleField.value)\n    #end\n    #set ($escapedValue = $escapetool.xml($value))\n    #if ($titleField.label)\n      <dt>\n        <label for=\"$escapetool.xml($!{options.id})Title\">##\n          $escapetool.xml($services.localization.render($titleField.label))##\n        </label>\n        <span class=\"xHint\">$!escapetool.xml($services.localization.render($titleField.hint))</span>\n      </dt>\n      <dd>\n        <input type=\"text\" id=\"$escapetool.xml($!{options.id})Title\" name=\"$escapetool.xml($titleField.name)\" value=\"$!escapedValue\"\n          class=\"location-title-field\" placeholder=\"$!escapetool.xml($services.localization.render($titleField.placeholder))\" />\n      </dd>\n    #elseif ($titleField)\n      <dt class=\"hidden\"></dt>\n      <dd class=\"hidden\">\n        <input type=\"hidden\" name=\"$titleField.name\" value=\"$!escapedValue\"\n          class=\"location-title-field\" />\n      </dd>\n    #end\n    ##\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Location preview\n    ## ---------------------------------------------------------------------------------------------------------\n    ##\n    <dt>\n      <label>$escapetool.xml($services.localization.render($options.preview.label))</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render($options.preview.hint))</span>\n    </dt>\n    <dd>\n      ## The breadcrumb is updated whenever the user changes the parent page. This causes the breadcrumb element to be\n      ## constantly replaced, preventing us from displaying the live validation message after it. In order to overcome\n      ## this, we wrap the breadcrumb element in a DIV that remains the same.\n      <div class=\"breadcrumb-container\">\n        ## Note: We display only the parent reference here. The new document part will be added from JavaScript.\n        #hierarchy($options.parent.reference $options)\n        #if ($isDocumentTreeAvailable)\n          #documentPickerModal($options)\n          #locationPickerActions()\n        #end\n      </div>\n      ##\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Location advanced edit\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #locationAdvancedEdit($options)\n    </dd>\n  </dl>\n#end\n\n#macro (locationPickerActions)\n  <div class=\"location-actions\">\n    ## Tree picker toggle\n    <a href=\"#\" class=\"location-action location-action-pick\" title=\"Select a new location\">\n      $services.icon.renderHTML('chart-organisation')</a>\n    ## Location advanced edit button.\n    #if ($isAdvancedUser)\n      <a href=\"#\" class=\"location-action location-action-edit\">\n        $services.icon.renderHTML('pencil')\n      </a>\n    #end\n  </div>\n#end\n\n#macro (locationAdvancedEdit $options)\n  <div class=\"location-edit#if ($isDocumentTreeAvailable) hidden#end\">\n    <dl>\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Wiki field\n      ## ---------------------------------------------------------------------------------------------------------\n      #set ($wikiField = $options.wiki)\n      #set ($value = $request.getParameter($wikiField.name))\n      #if (!$value)\n        #set ($value = $wikiField.value)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      #if ($wikiField.label && $displayWikiFields)\n        <dt>\n          <label for=\"$escapetool.xml($!{options.id})Wiki\">##\n            $escapetool.xml($services.localization.render($wikiField.label))##\n          </label>\n          <span class=\"xHint\">$!escapetool.xml($services.localization.render($wikiField.hint))</span>\n        </dt>\n        <dd>\n          <select id=\"$!{options.id}Wiki\" name=\"$wikiField.name\" class=\"location-wiki-field\">\n            #set ($wikis = $xwiki.wikiNames)\n            #foreach ($wiki in $wikis)\n              #set ($wikiPrettyName = $services.wiki.getById($wiki).prettyName)\n              #if (\"$!wikiPrettyName.trim()\" == '')\n                #set ($wikiPrettyName = $wiki)\n              #end\n              <option value=\"$!escapetool.xml($wiki)\" #if ($wiki == $value) selected=\"selected\" #end>\n                $!escapetool.xml($wikiPrettyName)\n              </option>\n            #end\n          </select>\n        </dd>\n      #elseif ($wikiField)\n        <dt class=\"hidden\"></dt>\n        <dt class=\"hidden\">\n          <input type=\"hidden\" name=\"$wikiField.name\" class=\"location-wiki-field\" value=\"$!escapedValue\" />\n        </dt>\n      #end\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Parent Reference field\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #set ($parentField = $options.parent)\n      #set ($value = $request.getParameter($parentField.name))\n      #if (!$value)\n        #if (\"$!parentField.reference\" == '')\n          ## Default to the current document's space.\n          #set ($defaultParentReference = $doc.documentReference.lastSpaceReference)\n        #else\n          #set ($defaultParentReference = $parentField.reference)\n        #end\n        ## Make sure to use the local serialized string reference.\n        ## Note: If the parent is a wiki reference, an empty value will be set in the input.\n        #set ($defaultParentReferenceString = $services.model.serialize($defaultParentReference, 'local'))\n        #set ($value = $defaultParentReferenceString)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      <dt>\n        <label for=\"$escapetool.xml($!{options.id})ParentReference\">##\n          $escapetool.xml($services.localization.render($parentField.label))##\n        </label>\n        <span class=\"xHint\">$!escapetool.xml($services.localization.render($parentField.hint))</span>\n      </dt>\n      <dd>\n        <input type=\"text\" id=\"$escapetool.xml($!{options.id})ParentReference\" class=\"location-parent-field suggestSpaces\"\n          name=\"$escapetool.xml($parentField.name)\" value=\"$!escapedValue\"\n          placeholder=\"$!escapetool.xml($services.localization.render($parentField.placeholder))\" />\n      </dd>\n      ##\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Name field\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #set ($nameField = $options.name)\n      #set ($value = $request.getParameter($nameField.name))\n      #if (!$value)\n        #set ($value = $nameField.value)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      #if ($nameField.label)\n        <dt>\n          <label for=\"$escapetool.xml($!{options.id})Name\">##\n            $escapetool.xml($services.localization.render($nameField.label))##\n          </label>\n          <span class=\"xHint\">$escapetool.xml($services.localization.render($nameField.hint))</span>\n        </dt>\n        <dd>\n          <input type=\"text\" id=\"$escapetool.xml($!{options.id})Name\" name=\"$escapetool.xml($nameField.name)\" class=\"location-name-field\"\n            value=\"$!escapedValue\"\n            placeholder=\"$!escapetool.xml($services.localization.render($nameField.placeholder))\" />\n        </dd>\n      #elseif ($nameField)\n        <dt class=\"hidden\"></dt>\n        <dd class=\"hidden\">\n          <input type=\"hidden\" name=\"$nameField.name\" class=\"location-name-field\"\n            value=\"$!escapedValue\" />\n        </dd>\n      #end\n    </dl>\n  </div>\n#end\n\n#macro (documentPickerModal $options)\n  <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" data-backdrop=\"static\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          <div class=\"modal-title\">$services.localization.render('core.documentPicker.title')</div>\n        </div>\n        <div class=\"modal-body\">\n          #set ($showWikis = $options.wiki && $displayWikiFields)\n          ## If we don't show the wikis then we need to show the root node (the current wiki) in order to be able to\n          ## target top level documents (e.g. create a top level document, move a document to the top level, etc.).\n          #set ($showRoot = !$showWikis)\n          #set ($showTerminalDocuments = false || $options.showTerminalDocuments)\n          #documentTree({\n            'class': 'location-tree',\n            'finder': true,\n            'showAttachments': false,\n            'showRoot': $showRoot,\n            'showTerminalDocuments': $showTerminalDocuments,\n            'showTranslations': false,\n            'showWikis': $showWikis,\n            'exclusions': \"$!options.exclusions\"\n          })\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">\n            $services.localization.render('core.documentPicker.cancel')\n          </button>\n          <button type=\"button\" class=\"btn btn-primary\" disabled=\"disabled\">\n            $services.localization.render('core.documentPicker.select')\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n#end\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*!\n#set ($paths = {\n  'treeRequireConfig': $services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'require-config.min.js',\n    {'evaluate': true, 'minify': $services.debug.minify})\n})\n#set ($l10nKeys = [\n  'entitynamevalidation.nametransformation.error',\n  'core.validation.valid.message',\n  'core.validation.required.message',\n  'core.validation.required.message.terminal'\n])\n#set ($l10n = {})\n#foreach ($key in $l10nKeys)\n  #set ($discard = $l10n.put($key, $services.localization.render($key)))\n#end\n#[[*/\n// Start JavaScript-only code.\n(function(paths, l10n) {\n  \"use strict\";\n\n// Location Tree Picker\nrequire([paths.treeRequireConfig], function() {\n  require(['tree'], function($) {\n    $('.location-picker').each(function() {\n      var picker = $(this);\n      var trigger = picker.find('.location-action-pick');\n      var modal = picker.find('.modal');\n      var treeElement = modal.find('.location-tree');\n      var selectButton = modal.find('.modal-footer .btn-primary');\n\n      trigger.on('click', function(event) {\n        event.preventDefault();\n        modal.modal();\n      });\n\n      modal.on('shown.bs.modal', function(event) {\n        // Open to the specified node only once. Preserve the tree state otherwise.\n        var openToNodeId = trigger.attr('data-openTo');\n        if (openToNodeId && openToNodeId !== modal.data('openTo')) {\n          modal.data('openTo', openToNodeId);\n        } else {\n          openToNodeId = false;\n        }\n        var tree = $.jstree.reference(treeElement);\n        if (!tree) {\n          // Initialize the tree and hook the event listeners.\n          treeElement.xtree({\n            core: {\n              multiple: treeElement.data('multiple') === 'true'\n            }\n          }).one('ready.jstree', function(event, data) {\n            openToNodeId && data.instance.openTo(openToNodeId);\n          }).on('changed.jstree', function(event, data) {\n            selectButton.prop('disabled', !data.selected.length);\n          }).on('dblclick', '.jstree-anchor', function() {\n            selectButton.click();\n          });\n        } else if (openToNodeId) {\n          tree.deselect_all();\n          tree.close_all();\n          tree.openTo(openToNodeId);\n        }\n      });\n\n      selectButton.on('click', function() {\n        modal.modal('hide');\n        modal.triggerHandler('xwiki:locationTreePicker:select', {\n          'tree': $.jstree.reference(treeElement)\n        });\n      });\n    });\n  });\n});\n\n// Document Tree Picker\nrequire(['jquery', 'xwiki-meta'], function($, xm) {\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    // The wiki field can be either a select (drop down) or an input (text or hidden).\n    var wikiField = picker.find('.location-wiki-field');\n    var parentField = picker.find('input.location-parent-field');\n\n    picker.find('.location-action-pick').on('click', function(event) {\n      // Open to the parent wiki, by default. The wiki node should be visible in the tree, otherwise we wouldn't be able\n      // to move pages to top level, under the wiki node.\n      var wiki = wikiField.val() || xm.wiki;\n      var openToNodeId = 'wiki:' + wiki;\n      if (parentField.val()) {\n        // Open to the parent document, if specified.\n        var spaceReference = XWiki.Model.resolve(parentField.val(), XWiki.EntityType.SPACE, [wiki]);\n        var documentReference = new XWiki.EntityReference('WebHome', XWiki.EntityType.DOCUMENT, spaceReference);\n        openToNodeId = 'document:' + XWiki.Model.serialize(documentReference);\n      }\n      $(this).attr('data-openTo', openToNodeId);\n    });\n\n    picker.find('.modal').on('xwiki:locationTreePicker:select', function(event, data) {\n      var selectedNodeId = data.tree.get_selected()[0];\n      var separatorIndex = selectedNodeId.indexOf(':');\n      var nodeType = selectedNodeId.substr(0, separatorIndex);\n      var nodeStringReference = selectedNodeId.substr(separatorIndex + 1);\n      var nodeReference = XWiki.Model.resolve(nodeStringReference, XWiki.EntityType.byName(nodeType));\n      var wikiReference = nodeReference.extractReference(XWiki.EntityType.WIKI);\n      wikiField.val(wikiReference ? wikiReference.name : '');\n      var spaceReference = nodeReference.extractReference(XWiki.EntityType.SPACE);\n      var localSpaceReference = spaceReference ? XWiki.Model.serialize(spaceReference.relativeTo(wikiReference)) : '';\n\n      // Set the selected value and trigger and update of the location preview.\n      parentField.val(localSpaceReference);\n      // Notify interested listeners that we have new input. Note: PrototypeJS listeners will not be notified.\n      parentField.triggerHandler('input');\n    });\n  });\n});\n\n// Live synchronization between the Title, Location, Wiki, Parent and Name (as you type)\nrequire(['jquery', 'xwiki-meta', 'xwiki-events-bridge', 'xwiki-form-validation-async'], function($, xm) {\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    var form = picker.closest('form');\n\n    var titleInput = picker.find('input.location-title-field');\n    // The wiki field can be either a select (drop down) or an input (text or hidden).\n    var wikiField = picker.find('.location-wiki-field');\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    var nameInput = picker.find('input.location-name-field');\n    var locationContainer = picker.find('.breadcrumb');\n    // Input timeouts used to avoid handling too soon each individual letter, as the user types.\n    var inputDelay = 500;\n\n    /**\n     * Compute a page name from a given title.\n     **/\n    var getPageName = function(title) {\n      var url = XWiki.currentDocument.getURL(\"get\");\n      return Promise.resolve($.get(url, {\n        'xpage': 'entitynamevalidation_json',\n        'outputSyntax': 'plain',\n        'name': title,\n        'form_token': xm.form_token\n      }));\n    };\n\n    /**\n     * Update the last element in the location preview.\n     * \n     * @param value the value to use\n     */\n    var updateLocationLastElement = function(value) {\n      var lastElement = locationContainer.children('.preview');\n      if (lastElement.length === 0) {\n        lastElement = $(document.createElement('li')).addClass('preview active').appendTo(locationContainer);\n      }\n      lastElement.text(value);\n    };\n\n    /**\n     * Event handler for the title input that updates both the location preview's last element and the name input.\n     **/\n    var scheduleUpdateOfLocationAndNameFromTitleInput = function(event) {\n      // Disable the page name input while its value is being updated based on the page title. This also disables the\n      // page name validation (client-side) until we receive the computed page name (a 'change' event is triggered\n      // afterwards in order to perform the synchronous client-side page name validation).\n      nameInput.prop('disabled', true);\n      if (event?.type === 'input') {\n        // Delay the update.\n        titleInput.validateAsync(updateLocationAndNameFromTitleInput, inputDelay, 'locationPicker');\n      } else {\n        // Update right away.\n        titleInput.validateAsync(updateLocationAndNameFromTitleInput(), 'locationPicker');\n      }\n    };\n\n    var updateLocationAndNameFromTitleInput = function() {\n      var titleInputVal = titleInput.val();\n      // Update the name field.\n      return getPageName(titleInputVal).then(data => {\n        // Ensure that the input didn't change while we were waiting the answer.\n        // It also protects the value if a previous request was slow to arrive.\n        if (titleInputVal === titleInput.val()) {\n          // Re-enable the page name input and trigger a change event to execute the client-side validations.\n          nameInput.prop('disabled', false).val(data.transformedName).trigger('change');\n\n          // Update the location preview.\n          updateLocationFromTitleInput();\n        }\n      }).catch(() => {\n        if (titleInputVal === titleInput.val()) {\n          new XWiki.widgets.Notification(l10n['entitynamevalidation.nametransformation.error'], 'error');\n          // Re-enable the page name input and trigger a change event to execute the client-side validations.\n          nameInput.prop('disabled', false).val(titleInputVal).trigger('change');\n          // Update the location preview.\n          updateLocationFromTitleInput();\n        }\n      });\n    };\n\n    /**\n     * Update the location preview's last element with the value from the title input.\n     **/\n    var updateLocationFromTitleInput = function() {\n      updateLocationLastElement(titleInput.val());\n    };\n\n    /**\n     * Event handler for the name input that updates the location preview's last element.\n     **/\n    var updateLocationFromNameInput = function(event) {\n      // Only update the location from the name when there is no title provided.\n      if (!titleInput.val()) {\n        updateLocationLastElement(nameInput.val());\n      }\n    };\n\n    var updateLocationFromTitleOrNameInput = function() {\n      var title = titleInput.val();\n      updateLocationLastElement(title ? title : nameInput.val());\n    };\n\n    /**\n     * Event handler for the space reference input that updates the location preview's space part.\n     **/\n    var updateLocationFromSpaceReference = function(event, data) {\n      var spaceReference;\n      if (data) {\n        // Suggest widget selection event.\n        spaceReference = data.value;\n      } else {\n        // Regular input event.\n        spaceReference = spaceReferenceInput.val();\n      }\n\n      // Delay the execution in case the user is still typing.\n      locationContainer.validateAsync(() => {\n        return updateLocation(wikiField.val(), spaceReference);\n      }, inputDelay, 'locationPicker');\n    };\n\n    var updateLocationFromWikiField = function(event) {\n      // TODO: Don't reload the entire location when the wiki changes. We should be able to update only the wiki element,\n      // but we need to be able to \"detect\" it (e.g. the breadcrumb should add some CSS classes on the path elements).\n      locationContainer.validateAsync(updateLocation, 'locationPicker');\n    };\n\n    var updateLocation = function(wiki, localSpaceReference) {\n      wiki = wiki || wikiField.val();\n      localSpaceReference = localSpaceReference || spaceReferenceInput.val();\n\n      // We need to pass a document reference to the hierarchy_reference template and we cannot create a document\n      // reference without the space reference. If the space reference is empty we use the current space reference and\n      // we remove the extra path elements afterwards from the breadcrumb HTML.\n      var spaceReference = XWiki.Model.resolve(localSpaceReference || xm.space, XWiki.EntityType.SPACE);\n      var documentReference = new XWiki.EntityReference('WebHome', XWiki.EntityType.DOCUMENT, spaceReference);\n      wiki && spaceReference.appendParent(new XWiki.WikiReference(wiki));\n\n      return $.post(getCurrentPageURL(), {\n        'xpage': 'hierarchy_reference',\n        'reference': XWiki.Model.serialize(documentReference)\n      }, function(data) {\n        // Update the space reference part of the new location.\n        var newLocationContainer = $(data);\n        // Preserve the id because it is needed for the asynchronous validation key.\n        newLocationContainer.attr('id', locationContainer.attr('id'));\n        locationContainer.replaceWith(newLocationContainer);\n        locationContainer = newLocationContainer;\n\n        // Remove all breadcrumb items that don't represent wikis if the space reference was empty.\n        localSpaceReference || locationContainer.find('li').not('.wiki').remove();\n\n        // Remove any redundant 'active' elements that we might inherit from the AJAX call, since the only active\n        // element will be the page name preview that we create.\n        locationContainer.find('.active').removeClass('active');\n\n        // Update the document part of the new location.\n        updateLocationFromTitleOrNameInput();\n      });\n    };\n\n    var getCurrentPageURL = function() {\n      var spaceReference = XWiki.Model.resolve(xm.space, XWiki.EntityType.SPACE);\n      var spacePath = spaceReference.getReversedReferenceChain().map(function(entityReference) {\n        return encodeURIComponent(entityReference.name);\n      }).join('/');\n\n      var url = XWiki.Document.URLTemplate;\n      url = url.replace('__space__', spacePath);\n      url = url.replace('__page__', xm.page);\n      url = url.replace('__action__', 'get');\n\n      return url;\n    };\n\n    // Synchronize the location fields while the user types.\n    // We catch the change event because we want to make sure everything's updated when the user change fields\n    // (particulary useful in our automated tests).\n    titleInput.on('input change', scheduleUpdateOfLocationAndNameFromTitleInput);\n    wikiField.on('change', updateLocationFromWikiField);\n    nameInput.on('input change', updateLocationFromNameInput);\n    spaceReferenceInput.on('input change xwiki:suggest:selected', updateLocationFromSpaceReference);\n\n    // Clean the output of the hierarchy macro when it should display a top level document.\n    if (!spaceReferenceInput.val()) {\n      updateLocationFromSpaceReference();\n    }\n\n    // Update the location with whatever the initial value of the title is.\n    if (nameInput.val() !== undefined && !nameInput.val() && titleInput.val()) {\n      scheduleUpdateOfLocationAndNameFromTitleInput();\n    } else {\n      updateLocationFromTitleInput();\n    }\n\n    // Show the location edit options when pressing the pencil button.\n    var locationEdit = picker.find('.location-edit');\n    picker.find('.location-action-edit').on('click', function(event) {\n      event.preventDefault();\n      // Note: Using toggleClass() instead of toggle() because using the 'hidden' class\n      // allows us to have the element hidden by default more easily from Velocity.\n      locationEdit.toggleClass('hidden');\n    });\n  });\n});\n\n//\n// Client-side input validation\n//\nrequire(['jquery'], function($) {\n  //\n  // Generic Validation\n  //\n  var isSimplePicker = function(picker) {\n    return picker.find('.location-actions').length > 0 && picker.find('.location-action-edit').length == 0;\n  };\n\n  var createPageValidator = function(picker) {\n    var pageInput = picker.find('input.location-name-field');\n    if (pageInput.length === 0) {\n      return null;\n    }\n\n    var titleInput = picker.find('input.location-title-field');\n    // The advanced location edit fields are not accessible to simple users.\n    var isSimpleUser = titleInput.length > 0 && isSimplePicker(picker);\n    var pageValidator = new LiveValidation(pageInput[0], {\n      validMessage: l10n['core.validation.valid.message'],\n      // Show the validation message after the title input for simple users because they can't access the page input.\n      insertAfterWhatNode: isSimpleUser ? titleInput[0] : pageInput[0]\n    });\n    pageValidator.displayMessageWhenEmpty = true;\n    pageValidator.add(Validate.Custom, {\n      failureMessage: l10n['core.validation.required.message'],\n      against: function(value) {\n        // The page name must not be blank.\n        return typeof value === 'string' && value.strip().length > 0;\n      }\n    });\n\n    // The page name can be set either directly, by typing in the page input, or indirectly, by typing in the title\n    // input. In the second case the code that updates the page name based on the page title triggers a 'change' event. \n    pageInput.on('change', function() {\n      pageValidator.validate();\n    });\n\n    return pageValidator;\n  };\n\n  var createSpaceValidator = function(picker) {\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    if (spaceReferenceInput.length > 0) {\n      var breadcrumbContainer = picker.find('.breadcrumb-container');\n      // The advanced location edit fields are not accessible to simple users.\n      var isSimpleUser = breadcrumbContainer.length > 0 && isSimplePicker(picker);\n      var spaceValidator = new LiveValidation(spaceReferenceInput[0], {\n        validMessage: l10n['core.validation.valid.message'],\n        // Validating automatically only on submit to avoid double validation caused by jQuery-PrototypeJS event\n        // triggering incompatibilities when setting the space reference with the tree picker. We are calling validate\n        // manually in the 'input' handler to achieve the same behavior as if 'onlyOnBlur' was false.\n        onlyOnBlur: true,\n        insertAfterWhatNode: isSimpleUser ? breadcrumbContainer[0] : spaceReferenceInput[0]\n      });\n      spaceValidator.displayMessageWhenEmpty = true;\n      return spaceValidator;\n    } else {\n      return null;\n    }\n  };\n\n  var setAllowedValues = function(validator, values, failureMessage) {\n    // Clean any previous existing values validators, using the previous parameters (if available).\n    if (validator._customValuesParams) {\n      validator.remove(Validate.Custom, validator._customValuesParams);\n      delete validator._customValuesParams;\n    }\n\n    // If any values are specified, add a custom validator.\n    if (values.length > 0) {\n      // Store the parameters so we can later be able to remove them in a future call.\n      validator._customValuesParams = {\n        failureMessage: failureMessage,\n        against: function(value) {\n          for (var i=0; i<values.length; i++) {\n            var allowedValue = values[i];\n            // Must be exactly one of the allowed values of prefixed by the allowed value followed by a dot (i.e. parent space).\n            if (allowedValue === value || value.indexOf(allowedValue + '.') === 0) {\n              return true;\n            }\n          }\n\n          // Does not validate for any of the allowed values.\n          return false;\n        }\n      };\n      validator.add(Validate.Custom, validator._customValuesParams);\n    }\n  };\n\n  var addTerminalPageValidation = function(spaceValidator, terminalCheckbox) {\n    spaceValidator.add(Validate.Custom, {\n      failureMessage: l10n['core.validation.required.message.terminal'],\n      against: function(value) {\n        if (terminalCheckbox.prop('checked')) {\n          // Space reference is required for terminal documents.\n          return typeof value === 'string' && value.strip().length > 0;\n        } else {\n          // Space reference can be empty for non-terminal documents.\n          return true;\n        }\n      }\n    });\n\n    // Trigger validation when the terminal status changes.\n    terminalCheckbox.on('change', function() {\n      spaceValidator.validate();\n    });\n  };\n\n  var synchChildrenWithTerminalPage = function(deepCheckbox, terminalCheckbox) {\n    deepCheckbox.on('change', function() {\n      deepCheckbox.prop('checked') && terminalCheckbox.prop('checked', false);\n    });\n    terminalCheckbox.on('change', function() {\n      terminalCheckbox.prop('checked') && deepCheckbox.prop('checked', false);\n    });\n  };\n\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    var pickerValidators = [];\n    // Create the generic space and page input validators.\n    var spaceValidator = createSpaceValidator(picker);\n    if (spaceValidator) {\n      pickerValidators.push(spaceValidator);\n      picker.data('spaceValidator', spaceValidator);\n    }\n    var pageValidator = createPageValidator(picker);\n    if (pageValidator) {\n      pickerValidators.push(pageValidator);\n      picker.data('pageValidator', pageValidator);\n    }\n\n    var locationEdit = picker.find('.location-edit');\n    var locationEditToggle = picker.find('.location-action-edit');\n\n    // If the form is not valid on submission and the location edit is hidden, make sure to display it so that\n    // validation errors are also displayed.\n    picker.closest('form').on('submit', function(event) {\n      var isValid = LiveValidation.massValidate(pickerValidators);\n      if (!isValid && locationEdit.hasClass('hidden')) {\n        // Triggering the click event while handling a click event (the submit event is caused most of the time by\n        // clicking the submit button) has no effect (jQuery simply ignores the trigger call). The workaround is to\n        // trigger the click event right after the current click event is handled.\n        setTimeout(() => locationEditToggle.click(), 0);\n      }\n    });\n\n    // Call validate() manually on the spaceValidator when we get input on the space reference field, because\n    // LiveValidation (PrototypeJS) does not get notified about jQuery triggered events so we have to handle it\n    // ourselves.\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    spaceReferenceInput.on('input', function() {\n      spaceValidator.validate();\n    });\n  });\n\n  //\n  // Custom validation for the Create Page UI.\n  //\n\n  $('form#create').each(function() {\n    var form = $(this);\n    var picker = form.find('.location-picker');\n    var spaceValidator = picker.data('spaceValidator');\n\n    addTerminalPageValidation(spaceValidator, form.find('#terminal'));\n\n    var updateSpaceValidatorFromTemplateProviderInput = function(input) {\n      var restrictionsAreSuggestions = (input.attr('data-restrictions-are-suggestions') == \"true\");\n\n      var allowedSpaces = [];\n      var allowedSpacesData = input.attr('data-allowed-spaces');\n      // Read the alowed spaces specified by the template provider, unless they are just suggestions in which case they\n      // should be ignored by validation.\n      if (!restrictionsAreSuggestions && allowedSpacesData) {\n        allowedSpaces = JSON.parse(input.attr('data-allowed-spaces'));\n      }\n\n      var message = input.attr('data-allowed-spaces-message');\n\n      setAllowedValues(spaceValidator, allowedSpaces, message);\n    };\n\n    // Update the allowed spaces based on the selected template provider.\n    form.find('.xwiki-select').on('xwiki:select:updated', function (event) {\n      var type = $('input[name=\"type\"]:checked');\n      // Note: Even though the page type selector can provide elements that are not template providers (i.e.\n      // data-type='template'), we still need to clear any previously set validations. The upside of this is that we\n      // are also allowing these page types to specify 'allowed spaces', should they need it at some point.\n      updateSpaceValidatorFromTemplateProviderInput(type);\n      // Validate using the new configuration.\n      spaceValidator.validate();\n    });\n\n    // Make sure the spaceValidator is properly initialized when loading the page.\n    var initiallyCheckedTemplateProviderInput = form.find('input[name=\"templateprovider\"]');\n    if (initiallyCheckedTemplateProviderInput.length == 0) {\n        // If there is no (hidden) input called 'templateprovider', then we should look at the selected value\n        // in the xwiki selector widget\n        initiallyCheckedTemplateProviderInput = form.find('.xwiki-select input[name=\"type\"]:checked');\n    }\n\n    // Note that there could also be no template provider available, but we rely on jQuery's selectors here to avoid null values.\n    updateSpaceValidatorFromTemplateProviderInput(initiallyCheckedTemplateProviderInput);\n  });\n\n  //\n  // Custom validation for the Copy & Rename Page UI.\n  //\n\n  $('form#copy, form#rename').each(function() {\n    var form = $(this);\n    var picker = form.find('.location-picker');\n    var spaceValidator = picker.data('spaceValidator');\n    var terminalCheckbox = form.find('input[name=\"terminal\"]');\n    var deepCheckbox = form.find('input[name=\"deep\"]');\n    var languageSelect = form.find('select[name=\"language\"]');\n\n    addTerminalPageValidation(spaceValidator, terminalCheckbox);\n    synchChildrenWithTerminalPage(deepCheckbox, terminalCheckbox);\n\n    languageSelect.on('change', function() {\n      if (languageSelect.val() === 'ALL') {\n        deepCheckbox.prop('disabled', false);\n      } else {\n        deepCheckbox.prop({\n          'checked': false,\n          'disabled': true\n        });\n      }\n    });\n  });\n});\n\n// End JavaScript-only code.\n}).apply(']]#', $jsontool.serialize([$paths, $l10n]));\n"], "fixing_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#template(\"startpage.vm\")\n<div class=\"main layoutsubsection\">\n  <div id=\"mainContentArea\">\n    #template('hierarchy.vm')\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Since this template can be used for creating a Page or a Space, compute its title based on the passed\n    ## \"tocreate\" parameter which can be either \"page\" or \"space\". If no \"tocreate\" parameter is passed then we\n    ## default to creating a Page. \n    ## ---------------------------------------------------------------------------------------------------------\n    #set($tocreate = $request.getParameter('tocreate'))\n    #if(\"$!tocreate\" != 'space')\n      #set ($stepTitle = $services.localization.render('core.create.pageTitle'))\n    #else\n      #set ($stepTitle = $services.localization.render('core.create.spaceTitle'))\n    #end\n    <div class=\"xcontent\">\n      #displayDocumentTitle($stepTitle)\n      #template(\"createinline.vm\")\n    </div>## xcontent\n  </div>## mainContentArea\n</div>## main\n#template(\"endpage.vm\")\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------------------------------------\n## This template is called by the create action which binds some context variables as it executes, based on\n## the request and the current document. These variables can be used in this template:\n## * $spaceReference - the space reference of the new document, read from the \"spaceReference\" parameter\n## * $name - the name to use for the new document, read from the \"name\" parameter\n## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are\n##              creating a terminal document ($name is the document name). Determined by the create action\n## * $availableTemplateProviders - list of template provider documents available from the current space\n##\n## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings\n## also consider backwards compatibility and convert older \"space\" and \"page\" parameters if they are passed.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n## If a parent parameter is passed, use it to set the parent when creating the new page.\n## If no parent parameter was passed, the create action will determine it to be the current document if it\n## exists or the Main space's webhome if the current document does not exist.\n## ---------------------------------------------------------------------------------------------------------\n#set ($parent = \"$!request.getParameter('parent')\")\n\n## ---------------------------------------------------------------------------------------------------------\n## This parent can be passed a title for the document to create (using the \"title\" parameter).\n## The title is used to automatically compute a page name, which can then be customized by the user.\n## If no title is given, the page name (if set) will be used as title.\n## ---------------------------------------------------------------------------------------------------------\n#if (\"$!request.title\" != '')\n  #set ($title = \"$!request.title\")\n#else\n  #set ($title = \"$!{escapetool.velocity($name)}\")\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Get the passed template provider, if any\n## ---------------------------------------------------------------------------------------------------------\n#set($templateProvider = \"$!request.templateprovider\")\n## Get the template as well, since in case template provider is missing, template should be used, \n## to allow creation from template directly, without necessarily going through template provider.\n#set($template = \"$!request.template\")\n\n## ---------------------------------------------------------------------------------------------------------\n## If there was an exception creating the page because of invalid space, notify. \n## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the \n## 11016 one, nothing will be displayed, depending on the other passed parameters.\n## ---------------------------------------------------------------------------------------------------------\n#set($exception = $createException)\n## check if the exception is about the non-allowed spaces for template\n#if(\"$!exception\" != '' && $exception.code == 11016)\n  <div class=\"box errormessage\">\n    #set($allowedSpaces = $createAllowedSpaces)\n    #if ($allowedSpaces.size() == 1)\n      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])\n    #else\n      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])\n    #end\n  </div>\n#end\n## check if the exception is about the document which already exists\n#if(\"$!exception\" != '' && $exception.code == 11002)\n  <div class='box errormessage'>\n      ## Use the 'existingDocumentReference' context binding set by the create action for this case.\n      $services.localization.render('core.create.page.error.docalreadyexists',\n        [\"${existingDocumentReference}\",\n         $xwiki.getURL($existingDocumentReference, 'view', ''),\n         $xwiki.getURL($existingDocumentReference, 'edit', '')\n        ]\n      )\n  </div>\n#end\n## check if the exception is about the document name being invalid\n#if(\"$!exception\" != '' && $exception.code == 11018)\n<div class='box errormessage'>\n  ## Use the 'invalidNameReference' context binding set by the create action for this case.\n  $services.localization.render('entitynamevalidation.create.invalidname', [$invalidNameReference])\n</div>\n#end\n\n## check if the exception is about the document having a path too long\n#template('hierarchy_macros.vm')\n#if(\"$!exception\" != '' && $exception.code == 11017)\n  #set ($options = {})\n  #set ($documentReference = $services.model.resolveDocument($tooLongPath))\n  <div class='box errormessage'>\n      $services.localization.render('core.create.page.error.docpathtoolong',\n        [\"<p>#hierarchy($documentReference, $options)</p>\",\n          $doc.getLocalReferenceMaxLength(),\n          $tooLongPath.length()\n        ]\n      )\n  </div>\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Determine if we need to do extra checks for a deprecated, pre-NestedSpaces request to create a space.\n## ---------------------------------------------------------------------------------------------------------\n#set ($deprecatedSpaceCreate = \"$!request.tocreate\" == 'space')\n\n## ---------------------------------------------------------------------------------------------------------\n## Note: The list of available template providers is computed in the action and set on the context under\n## the \"availableTemplateProviders\" binding.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro for displaying the available types and templates and changing target space rules accordingly\n## ---------------------------------------------------------------------------------------------------------\n#macro (displayTypes)\n  #if ($template == '')\n    #set ($blankTerminalState = !$isSpace)\n    #set ($options = [\n      { \n        'name': $services.localization.render('core.create.type.default'),\n        'options': [\n          {\n            'name': $services.localization.render('core.create.type.blank'),\n            'value': 'blank',\n            'description': $services.localization.render('core.create.type.blank.description'),\n            'icon': 'file-white',\n            'data': {\n              'type': 'blank',\n              'terminal' : \"$blankTerminalState\"\n            }\n          }\n        ]\n      }])\n    #if ($xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'OfficeImporter')) && $services.officemanager.isConnected())\n      ## TODO: handle this use case with an extension point\n      #set ($discard = $options[0].options.add({\n        'name': $services.localization.render('office.createForm.type.name'),\n        'value': 'office',\n        'description': $services.localization.render('office.createForm.type.description'),\n        'icon': 'file-word',\n        'data': {\n          'type':'office'\n        }\n      }))\n    #end\n    #if (!$availableTemplateProviders.isEmpty())\n      #set ($templateOptions = [])\n      #set ($discard = $options.add({'name': $services.localization.render('core.create.type.templates'), 'options': $templateOptions}))\n      #foreach($tpdoc in $availableTemplateProviders)\n        #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))\n        #set ($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))\n        ##\n        ## Extract and save in data-* attributes list of allowed spaces to be used in the JavaScript validation of the spaceReference input.\n        ##\n        #set($jsAllowedSpacesArray = '[]')## Reset any previous value\n        #set($allowedSpaces = $tpobj.getValue('creationRestrictions'))\n        #if($allowedSpaces.size() == 0)\n          ## Backwards compatibility for Template Providers created before 8.3M2.\n          #set($allowedSpaces = $tpobj.getValue('spaces'))\n        #end\n        ## Reset to an empty list when no restrictions are set.\n        #if (\"$!allowedSpaces\" == '')\n          #set ($allowedSpaces = [])\n        #end\n        #if($allowedSpaces.size() > 0)\n          #set($jsAllowedSpacesArray = $jsontool.serialize($allowedSpaces))\n        #end\n        ## Compute the error message.\n        #set ($templateProviderName = $services.localization.render($tpobj.getValue('name')))\n        #if($allowedSpaces.isEmpty())\n          #set($message = '')\n        #elseif($allowedSpaces.size() == 1)\n          #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #else\n          #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #end\n        ##\n        ## Determine if the creation restrictions are just suggestions\n        ##\n        #set ($restrictionsAreSuggestions = ($tpobj.getValue('creationRestrictionsAreSuggestions') == 1))\n        ##\n        ## Determine if it's a terminal page template\n        ##\n        #set ($isTerminalProvider = $tpobj.getValue('terminal'))\n        ## Check if this is an old template provider that has not been migrated (the 'type' property has not been\n        ## replaced by the 'terminal' property).\n        #set ($type = $tpobj.getValue('type'))\n        #if (\"$!isTerminalProvider\" == '' && (\"$!type\" != '' || $type == ''))\n          ## This must be an old template provider because the 'terminal' property is not set (or it was set to '---'\n          ## from the UI) and the 'type' property is still present.\n          #if ($type == 'space')\n            #set ($isTerminalProvider = false)\n          #else\n            ## 'page' or '' both resolve to true, for backwards compatibility reasons.\n            #set ($isTerminalProvider = true)\n          #end\n        #else\n          #set ($isTerminalProvider = ($isTerminalProvider == 1))\n        #end\n        ##\n        ## Display the template provider field option in the form.\n        ##\n        #set ($inputId = \"xwiki-create-form-${foreach.count}\")\n        #set ($icon = $tpobj.getValue('icon'))\n        #if (\"$!icon\" == '')\n          #set($icon = 'file-white')\n        #end\n        #set ($discard = $templateOptions.add({\n          'name': $services.localization.render($tpobj.getValue('name')),\n          'value': \"$tpdocRef\",\n          'description': $services.localization.render($tpobj.getValue('description')),\n          'icon': $icon,\n          'data': {\n            'allowed-spaces': $jsAllowedSpacesArray,\n            'allowed-spaces-message': $message,\n            'restrictions-are-suggestions': $restrictionsAreSuggestions,\n            'type': 'template',\n            'terminal' : $isTerminalProvider\n          }\n        }))\n      #end\n    #end\n    <dt>\n      <label>$services.localization.render('core.create.type')</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render('core.create.type.hint'))</span>\n    </dt>\n    #set ($defaultValue = $request.type)\n    #if (\"$!defaultValue\" == '')\n      #if ($recommendedTemplateProviders.size() > 0)\n        #set ($defaultValue = $services.model.serialize($recommendedTemplateProviders[0].documentReference, 'local'))\n      #else\n        #set ($defaultValue = 'blank')\n      #end\n    #end\n    <dd>#xwikiSelect('type', $options, $defaultValue, false, 'xwiki-select-adaptable-medium page-type', '', true)</dd>\n  #else\n    <input type=\"hidden\" name=\"template\" value=\"$escapetool.xml($template)\" />\n  #end\n#end\n#set ($discard = $xwiki.jsfx.use('js/xwiki/create.js', {'forceSkinAction': true}))\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro used to extract a wiki's homepage reference.\n## ---------------------------------------------------------------------------------------------------------\n#macro (getWikiHomePageReference $wiki $return)\n  #set ($_wikiHomePageReference = $services.wiki.getById($wiki).mainPageReference)\n  #if (!$_wikiHomePageReference)\n    #set ($wikiReference = $services.model.createWikiReference($wiki))\n    #set ($_wikiHomePageReference = $services.model.resolveDocument('', 'default', $wikiReference))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $_wikiHomePageReference)\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Display the form.\n## ---------------------------------------------------------------------------------------------------------\n#set ($isAjaxRequest = $request.getHeader('X-Requested-With') == 'XMLHttpRequest')\n<form action=\"$doc.getURL('create')\" method=\"post\" id=\"create\" class=\"xform\">\n  <fieldset>\n\n  ## Deprecated: Pass along any received page parent.\n  <input type='hidden' name='parent' value=\"$!{escapetool.xml($parent)}\"/>\n\n  ## The \"templateprovider\" field is needed by the CreateAction, even empty.\n  ## By the past, it was \"xwiki/create.js\" which created this field, but it was causing problems when the user sent the\n  ## form before the JavaScript code was executed.\n  <input type=\"hidden\" name=\"templateprovider\" id=\"templateprovider\" value=\"\" />\n  <input type=\"hidden\" name=\"form_token\" value=\"$!{escapetool.xml($services.csrf.getToken())}\"/>\n\n  <div class='row'>\n    ## Hide the first column when displayed in an AJAX call by clicking on a Wanted Link, because we know the target\n    ## location from the link reference.\n    #if (!$isAjaxRequest)\n      ## Determine the parent reference for the new document.\n      #set ($parentReference = $spaceReference)\n      #if (!$parentReference)\n        ## No parent reference specified.\n        #if ($doc.isNew())\n          ## Encourage the user to create the current document.\n          #set ($parentReference = $doc.documentReference.parent)\n          #if ($doc.documentReference.name == 'WebHome')\n            #set ($parentReference = $parentReference.parent)\n          #end\n        #else\n          #getWikiHomePageReference($doc.wiki $homeReference)\n          #if ($doc.documentReference.equals($homeReference) || $deprecatedSpaceCreate)\n            ## Encourage the user to create top level documents from the home page.\n            #set ($parentReference = $doc.documentReference.wikiReference)\n          #else\n            ## Encourage the user to create a child or sibling of the current document.\n            #set ($parentReference = $doc.documentReference.lastSpaceReference)\n          #end\n        #end\n      #end\n\n      ## Display the location picker.\n      <div class='col-xs-12 col-lg-6'>\n        #template('locationPicker_macros.vm')\n        ## The create action doesn't support changing the location when the current document doesn't exist (i.e. it\n        ## forces you to create the current document that is missing). For this reason we make the name and parent fields\n        ## read-only when the current document is new.\n        #locationPicker({\n          'id': 'target',\n          'title': {\n            'label': 'core.create.title',\n            'hint': 'core.create.title.hint',\n            'name': 'title',\n            'value': $title,\n            'placeholder': 'core.create.name.placeholder'\n          },\n          'preview': {\n            'label': 'core.create.locationPreview.label',\n            'hint': 'core.create.locationPreview.hint'\n          },\n          'parent': {\n            'label': 'core.create.spaceReference.label',\n            'hint': 'core.create.spaceReference.hint',\n            'name': 'spaceReference',\n            'reference': $parentReference,\n            'placeholder': 'core.create.spaceReference.placeholder',\n            'readOnly': $doc.isNew()\n          },\n          'name': {\n            'label': 'core.create.name.label',\n            'hint': 'core.create.name.hint',\n            'name': 'name',\n            'value': $name,\n            'placeholder': 'core.create.name.placeholder',\n            'readOnly': $doc.isNew()\n          }\n        })\n      </div>\n    #else\n      ## First column is hidden.\n      ## Pass along the known values as hidden inputs.\n      ##\n      <input type='hidden' name='title' value=\"$!{escapetool.xml($title)}\"/>\n      <input type='hidden' id='name' name='name' value=\"$!{escapetool.xml($name)}\" />\n      #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))\n      <input type='hidden' id='spaceReference' name='spaceReference' value=\"$!{escapetool.xml($spaceReferenceLocalString)}\" />\n    #end\n    <div class='col-xs-12#if (!$isAjaxRequest) col-lg-6#end'>\n      <dl>\n        #if ($isAjaxRequest)\n          ## The first column that shows the location preview is hidden when creating a new page from a Wanted Link so we\n          ## need to show this information elsewhere. Even if the target page reference can't be modified by the user,\n          ## they should still see where the page is going to be created.\n          <dt>\n            <label>$escapetool.xml($services.localization.render('core.create.pageTitle'))</label>\n          </dt>\n          <dl>\n            #set ($targetDocumentReference = $services.model.createDocumentReference($name, $spaceReference))\n            #hierarchy($targetDocumentReference)\n          </dl>\n        #end\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Page type\n        ## ---------------------------------------------------------------------------------------------------------\n        #displayTypes()\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Terminal page - Advanced users\n        ## ---------------------------------------------------------------------------------------------------------\n        #set ($hidden = '')\n        ## Top level documents cannot be terminal.\n        #set ($isTopLevelDoc = $doc.documentReference.name == 'WebHome' &&\n          $doc.documentReference.lastSpaceReference.parent.type == 'WIKI')\n        #if (!($isAdvancedUser || $isSuperAdmin) || $deprecatedSpaceCreate || ($doc.isNew() && $isTopLevelDoc))\n          #set ($hidden = 'hidden')\n        #end\n        <dt class=\"$hidden\">\n          <input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" #if(!$isSpace)checked=\"checked\"#end/>\n          <label for=\"terminal\">$services.localization.render('core.create.terminal.label')</label>\n          ## Hidden input used to ensure that an unchecked terminal checkbox means non-terminal and that the default is not used by mistake.\n          <input type=\"hidden\" name=\"tocreate\" value=\"nonterminal\" />\n        </dt>\n        <dd class=\"$hidden\">\n          <span class=\"xHint\">$services.localization.render('core.create.terminal.hint')</span>\n        </dd>\n      </dl>\n    </div>\n  </div>\n\n  <div class='buttons'>\n    <span class='buttonwrapper'>\n      <input type='submit' class='button' value=\"$services.localization.render('create')\"/>\n    </span>\n    <span class=\"buttonwrapper\">\n      <a class=\"secondary button\" href=\"$doc.getURL()\">$services.localization.render('cancel')</a>\n    </span>\n  </div>\n\n  </fieldset>\n</form>\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n#template('hierarchy_macros.vm')\n\n#set ($displayWikiFields = $xcontext.userReference.wikiReference.name == $xcontext.mainWikiName && $xwiki.hasSubWikis())\n\n#macro (locationPicker $options)\n  #set ($discard = $xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js'))\n  #set ($discard = $xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true))\n  #set ($discard = $xwiki.get('jsfx').use('uicomponents/widgets/locationPicker.js', true))\n  #set ($discard = $xwiki.get('ssfx').use('uicomponents/widgets/locationPicker.css', true))\n  <dl class=\"location-picker\">\n    ##\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Title field\n    ## ---------------------------------------------------------------------------------------------------------\n    ##\n    #set ($titleField = $options.title)\n    #set ($value = $request.getParameter($titleField.name))\n    #if (!$value)\n      #set ($value = $titleField.value)\n    #end\n    #set ($escapedValue = $escapetool.xml($value))\n    #if ($titleField.label)\n      <dt>\n        <label for=\"$escapetool.xml($!{options.id})Title\">##\n          $escapetool.xml($services.localization.render($titleField.label))##\n        </label>\n        <span class=\"xHint\">$!escapetool.xml($services.localization.render($titleField.hint))</span>\n      </dt>\n      <dd>\n        <input type=\"text\" id=\"$escapetool.xml($!{options.id})Title\" name=\"$escapetool.xml($titleField.name)\" value=\"$!escapedValue\"\n          class=\"location-title-field\" placeholder=\"$!escapetool.xml($services.localization.render($titleField.placeholder))\" />\n      </dd>\n    #elseif ($titleField)\n      <dt class=\"hidden\"></dt>\n      <dd class=\"hidden\">\n        <input type=\"hidden\" name=\"$titleField.name\" value=\"$!escapedValue\"\n          class=\"location-title-field\" />\n      </dd>\n    #end\n    ##\n    ## ---------------------------------------------------------------------------------------------------------\n    ## Location preview\n    ## ---------------------------------------------------------------------------------------------------------\n    ##\n    <dt>\n      <label>$escapetool.xml($services.localization.render($options.preview.label))</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render($options.preview.hint))</span>\n    </dt>\n    <dd>\n      ## The breadcrumb is updated whenever the user changes the parent page. This causes the breadcrumb element to be\n      ## constantly replaced, preventing us from displaying the live validation message after it. In order to overcome\n      ## this, we wrap the breadcrumb element in a DIV that remains the same.\n      <div class=\"breadcrumb-container\">\n        ## Note: We display only the parent reference here. The new document part will be added from JavaScript.\n        #hierarchy($options.parent.reference $options)\n        #locationPickerActions($options)\n      </div>\n      ##\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Location advanced edit\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #locationAdvancedEdit($options)\n    </dd>\n  </dl>\n#end\n\n#macro (locationPickerActions $options)\n  <div class=\"location-actions\">\n    ## Tree picker toggle\n    #if ($isDocumentTreeAvailable && $options.parent.label && !$options.parent.readOnly)\n      #documentPickerModal($options)\n      <a href=\"#\" class=\"location-action location-action-pick\" title=\"Select a new location\">\n      $services.icon.renderHTML('chart-organisation')</a>\n    #end\n    ## Location advanced edit button.\n    #if ($isAdvancedUser && ($options.name.label || $options.parent.label ||\n        ($options.wiki.label && $displayWikiFields)))\n      <a href=\"#\" class=\"location-action location-action-edit\">\n        $services.icon.renderHTML('pencil')\n      </a>\n    #end\n  </div>\n#end\n\n#macro (locationAdvancedEdit $options)\n  <div class=\"location-edit#if ($isDocumentTreeAvailable) hidden#end\">\n    <dl>\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Wiki field\n      ## ---------------------------------------------------------------------------------------------------------\n      #set ($wikiField = $options.wiki)\n      #set ($value = $request.getParameter($wikiField.name))\n      #if (!$value)\n        #set ($value = $wikiField.value)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      #if ($wikiField.label && $displayWikiFields)\n        <dt>\n          <label for=\"$escapetool.xml($!{options.id})Wiki\">##\n            $escapetool.xml($services.localization.render($wikiField.label))##\n          </label>\n          <span class=\"xHint\">$!escapetool.xml($services.localization.render($wikiField.hint))</span>\n        </dt>\n        <dd>\n          <select id=\"$!{options.id}Wiki\" name=\"$wikiField.name\" class=\"location-wiki-field\">\n            #set ($wikis = $xwiki.wikiNames)\n            #foreach ($wiki in $wikis)\n              #set ($wikiPrettyName = $services.wiki.getById($wiki).prettyName)\n              #if (\"$!wikiPrettyName.trim()\" == '')\n                #set ($wikiPrettyName = $wiki)\n              #end\n              <option value=\"$!escapetool.xml($wiki)\" #if ($wiki == $value) selected=\"selected\" #end>\n                $!escapetool.xml($wikiPrettyName)\n              </option>\n            #end\n          </select>\n        </dd>\n      #elseif ($wikiField)\n        <dt class=\"hidden\"></dt>\n        <dd class=\"hidden\">\n          <input type=\"hidden\" name=\"$wikiField.name\" class=\"location-wiki-field\" value=\"$!escapedValue\" />\n        </dd>\n      #end\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Parent Reference field\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #set ($parentField = $options.parent)\n      #set ($value = $request.getParameter($parentField.name))\n      #if (!$value)\n        #if (\"$!parentField.reference\" == '')\n          ## Default to the current document's space.\n          #set ($defaultParentReference = $doc.documentReference.lastSpaceReference)\n        #else\n          #set ($defaultParentReference = $parentField.reference)\n        #end\n        ## Make sure to use the local serialized string reference.\n        ## Note: If the parent is a wiki reference, an empty value will be set in the input.\n        #set ($defaultParentReferenceString = $services.model.serialize($defaultParentReference, 'local'))\n        #set ($value = $defaultParentReferenceString)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      #if ($parentField.label)\n        <dt>\n          <label for=\"$escapetool.xml($!{options.id})ParentReference\">##\n            $escapetool.xml($services.localization.render($parentField.label))##\n          </label>\n          <span class=\"xHint\">$!escapetool.xml($services.localization.render($parentField.hint))</span>\n        </dt>\n        <dd>\n          <input type=\"text\" id=\"$escapetool.xml($!{options.id})ParentReference\" class=\"location-parent-field suggestSpaces\"\n            name=\"$escapetool.xml($parentField.name)\" value=\"$!escapedValue\"\n            placeholder=\"$!escapetool.xml($services.localization.render($parentField.placeholder))\"\n            #if ($parentField.readOnly)readonly#end />\n        </dd>\n      #else\n        <dt class=\"hidden\"></dt>\n        <dd class=\"hidden\">\n          <input type=\"hidden\" name=\"$escapetool.xml($parentField.name)\" value=\"$!escapedValue\"\n                 class=\"location-parent-field\" />\n        </dd>\n      #end\n      ##\n      ## ---------------------------------------------------------------------------------------------------------\n      ## Name field\n      ## ---------------------------------------------------------------------------------------------------------\n      ##\n      #set ($nameField = $options.name)\n      #set ($value = $request.getParameter($nameField.name))\n      #if (!$value)\n        #set ($value = $nameField.value)\n      #end\n      #set ($escapedValue = $escapetool.xml($value))\n      #if ($nameField.label)\n        <dt>\n          <label for=\"$escapetool.xml($!{options.id})Name\">##\n            $escapetool.xml($services.localization.render($nameField.label))##\n          </label>\n          <span class=\"xHint\">$escapetool.xml($services.localization.render($nameField.hint))</span>\n        </dt>\n        <dd>\n          <input type=\"text\" id=\"$escapetool.xml($!{options.id})Name\" name=\"$escapetool.xml($nameField.name)\" class=\"location-name-field\"\n            value=\"$!escapedValue\"\n            placeholder=\"$!escapetool.xml($services.localization.render($nameField.placeholder))\"\n            #if ($nameField.readOnly)readonly#end />\n        </dd>\n      #elseif ($nameField)\n        <dt class=\"hidden\"></dt>\n        <dd class=\"hidden\">\n          <input type=\"hidden\" name=\"$nameField.name\" class=\"location-name-field\"\n            value=\"$!escapedValue\" />\n        </dd>\n      #end\n    </dl>\n  </div>\n#end\n\n#macro (documentPickerModal $options)\n  <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" data-backdrop=\"static\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          <div class=\"modal-title\">$services.localization.render('core.documentPicker.title')</div>\n        </div>\n        <div class=\"modal-body\">\n          #set ($showWikis = $options.wiki && $displayWikiFields)\n          ## If we don't show the wikis then we need to show the root node (the current wiki) in order to be able to\n          ## target top level documents (e.g. create a top level document, move a document to the top level, etc.).\n          #set ($showRoot = !$showWikis)\n          #set ($showTerminalDocuments = false || $options.showTerminalDocuments)\n          #documentTree({\n            'class': 'location-tree',\n            'finder': true,\n            'showAttachments': false,\n            'showRoot': $showRoot,\n            'showTerminalDocuments': $showTerminalDocuments,\n            'showTranslations': false,\n            'showWikis': $showWikis,\n            'exclusions': \"$!options.exclusions\"\n          })\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">\n            $services.localization.render('core.documentPicker.cancel')\n          </button>\n          <button type=\"button\" class=\"btn btn-primary\" disabled=\"disabled\">\n            $services.localization.render('core.documentPicker.select')\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n#end\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n/*!\n#set ($paths = {\n  'treeRequireConfig': $services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'require-config.min.js',\n    {'evaluate': true, 'minify': $services.debug.minify})\n})\n#set ($l10nKeys = [\n  'entitynamevalidation.nametransformation.error',\n  'core.validation.valid.message',\n  'core.validation.required.message',\n  'core.validation.required.message.terminal'\n])\n#set ($l10n = {})\n#foreach ($key in $l10nKeys)\n  #set ($discard = $l10n.put($key, $services.localization.render($key)))\n#end\n#[[*/\n// Start JavaScript-only code.\n(function(paths, l10n) {\n  \"use strict\";\n\n// Location Tree Picker\nrequire([paths.treeRequireConfig], function() {\n  require(['tree'], function($) {\n    $('.location-picker').each(function() {\n      var picker = $(this);\n      var trigger = picker.find('.location-action-pick');\n      var modal = picker.find('.modal');\n      var treeElement = modal.find('.location-tree');\n      var selectButton = modal.find('.modal-footer .btn-primary');\n\n      trigger.on('click', function(event) {\n        event.preventDefault();\n        modal.modal();\n      });\n\n      modal.on('shown.bs.modal', function(event) {\n        // Open to the specified node only once. Preserve the tree state otherwise.\n        var openToNodeId = trigger.attr('data-openTo');\n        if (openToNodeId && openToNodeId !== modal.data('openTo')) {\n          modal.data('openTo', openToNodeId);\n        } else {\n          openToNodeId = false;\n        }\n        var tree = $.jstree.reference(treeElement);\n        if (!tree) {\n          // Initialize the tree and hook the event listeners.\n          treeElement.xtree({\n            core: {\n              multiple: treeElement.data('multiple') === 'true'\n            }\n          }).one('ready.jstree', function(event, data) {\n            openToNodeId && data.instance.openTo(openToNodeId);\n          }).on('changed.jstree', function(event, data) {\n            selectButton.prop('disabled', !data.selected.length);\n          }).on('dblclick', '.jstree-anchor', function() {\n            selectButton.click();\n          });\n        } else if (openToNodeId) {\n          tree.deselect_all();\n          tree.close_all();\n          tree.openTo(openToNodeId);\n        }\n      });\n\n      selectButton.on('click', function() {\n        modal.modal('hide');\n        modal.triggerHandler('xwiki:locationTreePicker:select', {\n          'tree': $.jstree.reference(treeElement)\n        });\n      });\n    });\n  });\n});\n\n// Document Tree Picker\nrequire(['jquery', 'xwiki-meta'], function($, xm) {\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    // The wiki field can be either a select (drop down) or an input (text or hidden).\n    var wikiField = picker.find('.location-wiki-field');\n    var parentField = picker.find('input.location-parent-field');\n\n    picker.find('.location-action-pick').on('click', function(event) {\n      // Open to the parent wiki, by default. The wiki node should be visible in the tree, otherwise we wouldn't be able\n      // to move pages to top level, under the wiki node.\n      var wiki = wikiField.val() || xm.wiki;\n      var openToNodeId = 'wiki:' + wiki;\n      if (parentField.val()) {\n        // Open to the parent document, if specified.\n        var spaceReference = XWiki.Model.resolve(parentField.val(), XWiki.EntityType.SPACE, [wiki]);\n        var documentReference = new XWiki.EntityReference('WebHome', XWiki.EntityType.DOCUMENT, spaceReference);\n        openToNodeId = 'document:' + XWiki.Model.serialize(documentReference);\n      }\n      $(this).attr('data-openTo', openToNodeId);\n    });\n\n    picker.find('.modal').on('xwiki:locationTreePicker:select', function(event, data) {\n      var selectedNodeId = data.tree.get_selected()[0];\n      var separatorIndex = selectedNodeId.indexOf(':');\n      var nodeType = selectedNodeId.substr(0, separatorIndex);\n      var nodeStringReference = selectedNodeId.substr(separatorIndex + 1);\n      var nodeReference = XWiki.Model.resolve(nodeStringReference, XWiki.EntityType.byName(nodeType));\n      var wikiReference = nodeReference.extractReference(XWiki.EntityType.WIKI);\n      wikiField.val(wikiReference ? wikiReference.name : '');\n      var spaceReference = nodeReference.extractReference(XWiki.EntityType.SPACE);\n      var localSpaceReference = spaceReference ? XWiki.Model.serialize(spaceReference.relativeTo(wikiReference)) : '';\n\n      // Set the selected value and trigger and update of the location preview.\n      parentField.val(localSpaceReference);\n      // Notify interested listeners that we have new input. Note: PrototypeJS listeners will not be notified.\n      parentField.triggerHandler('input');\n    });\n  });\n});\n\n// Live synchronization between the Title, Location, Wiki, Parent and Name (as you type)\nrequire(['jquery', 'xwiki-meta', 'xwiki-events-bridge', 'xwiki-form-validation-async'], function($, xm) {\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    var form = picker.closest('form');\n\n    var titleInput = picker.find('input.location-title-field');\n    // The wiki field can be either a select (drop down) or an input (text or hidden).\n    var wikiField = picker.find('.location-wiki-field');\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    var nameInput = picker.find('input.location-name-field');\n    var locationContainer = picker.find('.breadcrumb');\n    // Input timeouts used to avoid handling too soon each individual letter, as the user types.\n    var inputDelay = 500;\n\n    /**\n     * Compute a page name from a given title.\n     **/\n    var getPageName = function(title) {\n      if (nameInput.prop('readonly')) {\n        // The page name is read-only so we shouldn't update it based on the title.\n        return Promise.resolve({transformedName: nameInput.val()});\n      } else {\n        var url = XWiki.currentDocument.getURL(\"get\");\n        return Promise.resolve($.get(url, {\n          'xpage': 'entitynamevalidation_json',\n          'outputSyntax': 'plain',\n          'name': title,\n          'form_token': xm.form_token\n        }));\n      }\n    };\n\n    /**\n     * Update the last element in the location preview.\n     * \n     * @param value the value to use\n     */\n    var updateLocationLastElement = function(value) {\n      var lastElement = locationContainer.children('.preview');\n      if (lastElement.length === 0) {\n        lastElement = $(document.createElement('li')).addClass('preview active').appendTo(locationContainer);\n      }\n      lastElement.text(value);\n    };\n\n    /**\n     * Event handler for the title input that updates both the location preview's last element and the name input.\n     **/\n    var scheduleUpdateOfLocationAndNameFromTitleInput = function(event) {\n      // Disable the page name input while its value is being updated based on the page title. This also disables the\n      // page name validation (client-side) until we receive the computed page name (a 'change' event is triggered\n      // afterwards in order to perform the synchronous client-side page name validation).\n      nameInput.prop('disabled', true);\n      if (event?.type === 'input') {\n        // Delay the update.\n        titleInput.validateAsync(updateLocationAndNameFromTitleInput, inputDelay, 'locationPicker');\n      } else {\n        // Update right away.\n        titleInput.validateAsync(updateLocationAndNameFromTitleInput(), 'locationPicker');\n      }\n    };\n\n    var updateLocationAndNameFromTitleInput = function() {\n      var titleInputVal = titleInput.val();\n      // Update the name field.\n      return getPageName(titleInputVal).then(data => {\n        // Ensure that the input didn't change while we were waiting the answer.\n        // It also protects the value if a previous request was slow to arrive.\n        if (titleInputVal === titleInput.val()) {\n          // Re-enable the page name input and trigger a change event to execute the client-side validations.\n          nameInput.prop('disabled', false).val(data.transformedName).trigger('change');\n\n          // Update the location preview.\n          updateLocationFromTitleInput();\n        }\n      }).catch(() => {\n        if (titleInputVal === titleInput.val()) {\n          new XWiki.widgets.Notification(l10n['entitynamevalidation.nametransformation.error'], 'error');\n          // Re-enable the page name input and trigger a change event to execute the client-side validations.\n          nameInput.prop('disabled', false).val(titleInputVal).trigger('change');\n          // Update the location preview.\n          updateLocationFromTitleInput();\n        }\n      });\n    };\n\n    /**\n     * Update the location preview's last element with the value from the title input.\n     **/\n    var updateLocationFromTitleInput = function() {\n      updateLocationLastElement(titleInput.val());\n    };\n\n    /**\n     * Event handler for the name input that updates the location preview's last element.\n     **/\n    var updateLocationFromNameInput = function(event) {\n      // Only update the location from the name when there is no title provided.\n      if (!titleInput.val()) {\n        updateLocationLastElement(nameInput.val());\n      }\n    };\n\n    var updateLocationFromTitleOrNameInput = function() {\n      var title = titleInput.val();\n      updateLocationLastElement(title ? title : nameInput.val());\n    };\n\n    /**\n     * Event handler for the space reference input that updates the location preview's space part.\n     **/\n    var updateLocationFromSpaceReference = function(event, data) {\n      var spaceReference;\n      if (data) {\n        // Suggest widget selection event.\n        spaceReference = data.value;\n      } else {\n        // Regular input event.\n        spaceReference = spaceReferenceInput.val();\n      }\n\n      // Delay the execution in case the user is still typing.\n      locationContainer.validateAsync(() => {\n        return updateLocation(wikiField.val(), spaceReference);\n      }, inputDelay, 'locationPicker');\n    };\n\n    var updateLocationFromWikiField = function(event) {\n      // TODO: Don't reload the entire location when the wiki changes. We should be able to update only the wiki element,\n      // but we need to be able to \"detect\" it (e.g. the breadcrumb should add some CSS classes on the path elements).\n      locationContainer.validateAsync(updateLocation, 'locationPicker');\n    };\n\n    var updateLocation = function(wiki, localSpaceReference) {\n      wiki = wiki || wikiField.val();\n      localSpaceReference = localSpaceReference || spaceReferenceInput.val();\n\n      // We need to pass a document reference to the hierarchy_reference template and we cannot create a document\n      // reference without the space reference. If the space reference is empty we use the current space reference and\n      // we remove the extra path elements afterwards from the breadcrumb HTML.\n      var spaceReference = XWiki.Model.resolve(localSpaceReference || xm.space, XWiki.EntityType.SPACE);\n      var documentReference = new XWiki.EntityReference('WebHome', XWiki.EntityType.DOCUMENT, spaceReference);\n      wiki && spaceReference.appendParent(new XWiki.WikiReference(wiki));\n\n      return $.post(getCurrentPageURL(), {\n        'xpage': 'hierarchy_reference',\n        'reference': XWiki.Model.serialize(documentReference)\n      }, function(data) {\n        // Update the space reference part of the new location.\n        var newLocationContainer = $(data);\n        // Preserve the id because it is needed for the asynchronous validation key.\n        newLocationContainer.attr('id', locationContainer.attr('id'));\n        locationContainer.replaceWith(newLocationContainer);\n        locationContainer = newLocationContainer;\n\n        // Remove all breadcrumb items that don't represent wikis if the space reference was empty.\n        localSpaceReference || locationContainer.find('li').not('.wiki').remove();\n\n        // Remove any redundant 'active' elements that we might inherit from the AJAX call, since the only active\n        // element will be the page name preview that we create.\n        locationContainer.find('.active').removeClass('active');\n\n        // Update the document part of the new location.\n        updateLocationFromTitleOrNameInput();\n      });\n    };\n\n    var getCurrentPageURL = function() {\n      var spaceReference = XWiki.Model.resolve(xm.space, XWiki.EntityType.SPACE);\n      var spacePath = spaceReference.getReversedReferenceChain().map(function(entityReference) {\n        return encodeURIComponent(entityReference.name);\n      }).join('/');\n\n      var url = XWiki.Document.URLTemplate;\n      url = url.replace('__space__', spacePath);\n      url = url.replace('__page__', xm.page);\n      url = url.replace('__action__', 'get');\n\n      return url;\n    };\n\n    // Synchronize the location fields while the user types.\n    // We catch the change event because we want to make sure everything's updated when the user change fields\n    // (particulary useful in our automated tests).\n    titleInput.on('input change', scheduleUpdateOfLocationAndNameFromTitleInput);\n    wikiField.on('change', updateLocationFromWikiField);\n    nameInput.on('input change', updateLocationFromNameInput);\n    spaceReferenceInput.on('input change xwiki:suggest:selected', updateLocationFromSpaceReference);\n\n    // Clean the output of the hierarchy macro when it should display a top level document.\n    if (!spaceReferenceInput.val()) {\n      updateLocationFromSpaceReference();\n    }\n\n    // Update the location with whatever the initial value of the title is.\n    if (nameInput.val() !== undefined && !nameInput.val() && titleInput.val()) {\n      scheduleUpdateOfLocationAndNameFromTitleInput();\n    } else {\n      updateLocationFromTitleInput();\n    }\n\n    // Show the location edit options when pressing the pencil button.\n    var locationEdit = picker.find('.location-edit');\n    picker.find('.location-action-edit').on('click', function(event) {\n      event.preventDefault();\n      // Note: Using toggleClass() instead of toggle() because using the 'hidden' class\n      // allows us to have the element hidden by default more easily from Velocity.\n      locationEdit.toggleClass('hidden');\n    });\n  });\n});\n\n//\n// Client-side input validation\n//\nrequire(['jquery'], function($) {\n  //\n  // Generic Validation\n  //\n  var isSimplePicker = function(picker) {\n    return picker.find('.location-actions').length > 0 && picker.find('.location-action-edit').length == 0;\n  };\n\n  var createPageValidator = function(picker) {\n    var pageInput = picker.find('input.location-name-field');\n    if (pageInput.length === 0) {\n      return null;\n    }\n\n    var titleInput = picker.find('input.location-title-field');\n    // The advanced location edit fields are not accessible to simple users.\n    var isSimpleUser = titleInput.length > 0 && isSimplePicker(picker);\n    var pageValidator = new LiveValidation(pageInput[0], {\n      validMessage: l10n['core.validation.valid.message'],\n      // Show the validation message after the title input for simple users because they can't access the page input.\n      insertAfterWhatNode: isSimpleUser ? titleInput[0] : pageInput[0]\n    });\n    pageValidator.displayMessageWhenEmpty = true;\n    pageValidator.add(Validate.Custom, {\n      failureMessage: l10n['core.validation.required.message'],\n      against: function(value) {\n        // The page name must not be blank.\n        return typeof value === 'string' && value.strip().length > 0;\n      }\n    });\n\n    // The page name can be set either directly, by typing in the page input, or indirectly, by typing in the title\n    // input. In the second case the code that updates the page name based on the page title triggers a 'change' event. \n    pageInput.on('change', function() {\n      pageValidator.validate();\n    });\n\n    return pageValidator;\n  };\n\n  var createSpaceValidator = function(picker) {\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    if (spaceReferenceInput.length > 0) {\n      var breadcrumbContainer = picker.find('.breadcrumb-container');\n      // The advanced location edit fields are not accessible to simple users.\n      var isSimpleUser = breadcrumbContainer.length > 0 && isSimplePicker(picker);\n      var spaceValidator = new LiveValidation(spaceReferenceInput[0], {\n        validMessage: l10n['core.validation.valid.message'],\n        // Validating automatically only on submit to avoid double validation caused by jQuery-PrototypeJS event\n        // triggering incompatibilities when setting the space reference with the tree picker. We are calling validate\n        // manually in the 'input' handler to achieve the same behavior as if 'onlyOnBlur' was false.\n        onlyOnBlur: true,\n        insertAfterWhatNode: isSimpleUser ? breadcrumbContainer[0] : spaceReferenceInput[0]\n      });\n      spaceValidator.displayMessageWhenEmpty = true;\n      return spaceValidator;\n    } else {\n      return null;\n    }\n  };\n\n  var setAllowedValues = function(validator, values, failureMessage) {\n    // Clean any previous existing values validators, using the previous parameters (if available).\n    if (validator._customValuesParams) {\n      validator.remove(Validate.Custom, validator._customValuesParams);\n      delete validator._customValuesParams;\n    }\n\n    // If any values are specified, add a custom validator.\n    if (values.length > 0) {\n      // Store the parameters so we can later be able to remove them in a future call.\n      validator._customValuesParams = {\n        failureMessage: failureMessage,\n        against: function(value) {\n          for (var i=0; i<values.length; i++) {\n            var allowedValue = values[i];\n            // Must be exactly one of the allowed values of prefixed by the allowed value followed by a dot (i.e. parent space).\n            if (allowedValue === value || value.indexOf(allowedValue + '.') === 0) {\n              return true;\n            }\n          }\n\n          // Does not validate for any of the allowed values.\n          return false;\n        }\n      };\n      validator.add(Validate.Custom, validator._customValuesParams);\n    }\n  };\n\n  var addTerminalPageValidation = function(spaceValidator, terminalCheckbox) {\n    spaceValidator.add(Validate.Custom, {\n      failureMessage: l10n['core.validation.required.message.terminal'],\n      against: function(value) {\n        if (terminalCheckbox.prop('checked')) {\n          // Space reference is required for terminal documents.\n          return typeof value === 'string' && value.strip().length > 0;\n        } else {\n          // Space reference can be empty for non-terminal documents.\n          return true;\n        }\n      }\n    });\n\n    // Trigger validation when the terminal status changes.\n    terminalCheckbox.on('change', function() {\n      spaceValidator.validate();\n    });\n  };\n\n  var synchChildrenWithTerminalPage = function(deepCheckbox, terminalCheckbox) {\n    deepCheckbox.on('change', function() {\n      deepCheckbox.prop('checked') && terminalCheckbox.prop('checked', false);\n    });\n    terminalCheckbox.on('change', function() {\n      terminalCheckbox.prop('checked') && deepCheckbox.prop('checked', false);\n    });\n  };\n\n  $('.location-picker').each(function() {\n    var picker = $(this);\n    var pickerValidators = [];\n    // Create the generic space and page input validators.\n    var spaceValidator = createSpaceValidator(picker);\n    if (spaceValidator) {\n      pickerValidators.push(spaceValidator);\n      picker.data('spaceValidator', spaceValidator);\n    }\n    var pageValidator = createPageValidator(picker);\n    if (pageValidator) {\n      pickerValidators.push(pageValidator);\n      picker.data('pageValidator', pageValidator);\n    }\n\n    var locationEdit = picker.find('.location-edit');\n    var locationEditToggle = picker.find('.location-action-edit');\n\n    // If the form is not valid on submission and the location edit is hidden, make sure to display it so that\n    // validation errors are also displayed.\n    picker.closest('form').on('submit', function(event) {\n      var isValid = LiveValidation.massValidate(pickerValidators);\n      if (!isValid && locationEdit.hasClass('hidden')) {\n        // Triggering the click event while handling a click event (the submit event is caused most of the time by\n        // clicking the submit button) has no effect (jQuery simply ignores the trigger call). The workaround is to\n        // trigger the click event right after the current click event is handled.\n        setTimeout(() => locationEditToggle.click(), 0);\n      }\n    });\n\n    // Call validate() manually on the spaceValidator when we get input on the space reference field, because\n    // LiveValidation (PrototypeJS) does not get notified about jQuery triggered events so we have to handle it\n    // ourselves.\n    var spaceReferenceInput = picker.find('input.location-parent-field');\n    spaceReferenceInput.on('input', function() {\n      spaceValidator.validate();\n    });\n  });\n\n  //\n  // Custom validation for the Create Page UI.\n  //\n\n  $('form#create').each(function() {\n    var form = $(this);\n    var picker = form.find('.location-picker');\n    var spaceValidator = picker.data('spaceValidator');\n\n    addTerminalPageValidation(spaceValidator, form.find('#terminal'));\n\n    var updateSpaceValidatorFromTemplateProviderInput = function(input) {\n      var restrictionsAreSuggestions = (input.attr('data-restrictions-are-suggestions') == \"true\");\n\n      var allowedSpaces = [];\n      var allowedSpacesData = input.attr('data-allowed-spaces');\n      // Read the alowed spaces specified by the template provider, unless they are just suggestions in which case they\n      // should be ignored by validation.\n      if (!restrictionsAreSuggestions && allowedSpacesData) {\n        allowedSpaces = JSON.parse(input.attr('data-allowed-spaces'));\n      }\n\n      var message = input.attr('data-allowed-spaces-message');\n\n      setAllowedValues(spaceValidator, allowedSpaces, message);\n    };\n\n    // Update the allowed spaces based on the selected template provider.\n    form.find('.xwiki-select').on('xwiki:select:updated', function (event) {\n      var type = $('input[name=\"type\"]:checked');\n      // Note: Even though the page type selector can provide elements that are not template providers (i.e.\n      // data-type='template'), we still need to clear any previously set validations. The upside of this is that we\n      // are also allowing these page types to specify 'allowed spaces', should they need it at some point.\n      updateSpaceValidatorFromTemplateProviderInput(type);\n      // Validate using the new configuration.\n      spaceValidator.validate();\n    });\n\n    // Make sure the spaceValidator is properly initialized when loading the page.\n    var initiallyCheckedTemplateProviderInput = form.find('input[name=\"templateprovider\"]');\n    if (initiallyCheckedTemplateProviderInput.length == 0) {\n        // If there is no (hidden) input called 'templateprovider', then we should look at the selected value\n        // in the xwiki selector widget\n        initiallyCheckedTemplateProviderInput = form.find('.xwiki-select input[name=\"type\"]:checked');\n    }\n\n    // Note that there could also be no template provider available, but we rely on jQuery's selectors here to avoid null values.\n    updateSpaceValidatorFromTemplateProviderInput(initiallyCheckedTemplateProviderInput);\n  });\n\n  //\n  // Custom validation for the Copy & Rename Page UI.\n  //\n\n  $('form#copy, form#rename').each(function() {\n    var form = $(this);\n    var picker = form.find('.location-picker');\n    var spaceValidator = picker.data('spaceValidator');\n    var terminalCheckbox = form.find('input[name=\"terminal\"]');\n    var deepCheckbox = form.find('input[name=\"deep\"]');\n    var languageSelect = form.find('select[name=\"language\"]');\n\n    addTerminalPageValidation(spaceValidator, terminalCheckbox);\n    synchChildrenWithTerminalPage(deepCheckbox, terminalCheckbox);\n\n    languageSelect.on('change', function() {\n      if (languageSelect.val() === 'ALL') {\n        deepCheckbox.prop('disabled', false);\n      } else {\n        deepCheckbox.prop({\n          'checked': false,\n          'disabled': true\n        });\n      }\n    });\n  });\n});\n\n// End JavaScript-only code.\n}).apply(']]#', $jsontool.serialize([$paths, $l10n]));\n"], "filenames": ["xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/create.vm", "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/createinline.vm", "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/locationPicker_macros.vm", "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-war/src/main/webapp/resources/uicomponents/widgets/locationPicker.js"], "buggy_code_start_loc": [22, 268, 75, 154], "buggy_code_end_loc": [22, 364, 195, 161], "fixing_code_start_loc": [23, 268, 75, 154], "fixing_code_end_loc": [24, 379, 206, 166], "type": "CWE-116", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In `org.xwiki.platform:xwiki-platform-web` versions 7.2-milestone-2 until 14.10.12 and `org.xwiki.platform:xwiki-platform-web-templates` prior to versions 14.10.12 and 15.5-rc-1, it is possible to pass a title to the page creation action that isn't displayed at first but then executed in the second step. This can be used by an attacker to trick a victim to execute code, allowing script execution if the victim has script right or remote code execution including full access to the XWiki instance if the victim has programming right.\n\nFor the attack to work, the attacker needs to convince the victim to visit a link like `<xwiki-host>/xwiki/bin/create/NonExistingSpace/WebHome?title=$services.logging.getLogger(%22foo%22).error(%22Script%20executed!%22)` where `<xwiki-host>`  is the URL of the Wiki installation and to then click on the \"Create\" button on that page. The page looks like a regular XWiki page that the victim would also see when clicking the button to create a page that doesn't exist yet, the malicious code is not displayed anywhere on that page. After clicking the \"Create\" button, the malicious title would be displayed but at this point, the code has already been executed and the attacker could use this code also to hide the attack, e.g., by redirecting the victim again to the same page with an innocent title. It thus seems plausible that this attack could work if the attacker can place a fake \"create page\" button on a page which is possible with edit right.\n\nThis has been patched in `org.xwiki.platform:xwiki-platform-web` version 14.10.12 and `org.xwiki.platform:xwiki-platform-web-templates` versions 14.10.12 and 15.5-rc-1 by displaying the title already in the first step such that the victim can notice the attack before continuing. It is possible to manually patch the modified files from the patch in an existing installation. For the JavaScript change, the minified JavaScript file would need to be obtained from a build of XWiki and replaced accordingly.", "other": {"cve": {"id": "CVE-2023-45135", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T20:15:11.933", "lastModified": "2023-11-02T18:06:56.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In `org.xwiki.platform:xwiki-platform-web` versions 7.2-milestone-2 until 14.10.12 and `org.xwiki.platform:xwiki-platform-web-templates` prior to versions 14.10.12 and 15.5-rc-1, it is possible to pass a title to the page creation action that isn't displayed at first but then executed in the second step. This can be used by an attacker to trick a victim to execute code, allowing script execution if the victim has script right or remote code execution including full access to the XWiki instance if the victim has programming right.\n\nFor the attack to work, the attacker needs to convince the victim to visit a link like `<xwiki-host>/xwiki/bin/create/NonExistingSpace/WebHome?title=$services.logging.getLogger(%22foo%22).error(%22Script%20executed!%22)` where `<xwiki-host>`  is the URL of the Wiki installation and to then click on the \"Create\" button on that page. The page looks like a regular XWiki page that the victim would also see when clicking the button to create a page that doesn't exist yet, the malicious code is not displayed anywhere on that page. After clicking the \"Create\" button, the malicious title would be displayed but at this point, the code has already been executed and the attacker could use this code also to hide the attack, e.g., by redirecting the victim again to the same page with an innocent title. It thus seems plausible that this attack could work if the attacker can place a fake \"create page\" button on a page which is possible with edit right.\n\nThis has been patched in `org.xwiki.platform:xwiki-platform-web` version 14.10.12 and `org.xwiki.platform:xwiki-platform-web-templates` versions 14.10.12 and 15.5-rc-1 by displaying the title already in the first step such that the victim can notice the attack before continuing. It is possible to manually patch the modified files from the patch in an existing installation. For the JavaScript change, the minified JavaScript file would need to be obtained from a build of XWiki and replaced accordingly."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para aplicaciones creadas sobre ella. En `org.xwiki.platform:xwiki-platform-web` versiones 7.2-milestone-2 hasta 14.10.12 y `org.xwiki.platform:xwiki-platform-web-templates` anteriores a las versiones 14.10.12 y 15.5-rc -1, es posible pasar un t\u00edtulo a la acci\u00f3n de creaci\u00f3n de p\u00e1gina que no se muestra al principio pero que luego se ejecuta en el segundo paso. Un atacante puede utilizar esto para enga\u00f1ar a una v\u00edctima para que ejecute c\u00f3digo, permitiendo la ejecuci\u00f3n de scripts si la v\u00edctima tiene derechos de ejecuci\u00f3n de scripts o de c\u00f3digo remoto, incluido el acceso completo a la instancia de XWiki si la v\u00edctima tiene derechos de programaci\u00f3n. Para que el ataque funcione, el atacante debe convencer a la v\u00edctima de que visite un enlace como `/xwiki/bin/create/NonExistingSpace/WebHome?title=$services.logging.getLogger(%22foo%22).error(%22Script%20executed!%22)` donde `` es la URL de la instalaci\u00f3n Wiki y luego haga clic en el bot\u00f3n \"Crear\" en esa p\u00e1gina. La p\u00e1gina parece una p\u00e1gina XWiki normal que la v\u00edctima tambi\u00e9n ver\u00eda al hacer clic en el bot\u00f3n para crear una p\u00e1gina que a\u00fan no existe; el c\u00f3digo malicioso no se muestra en ninguna parte de esa p\u00e1gina. Despu\u00e9s de hacer clic en el bot\u00f3n \"Crear\", se mostrar\u00e1 el t\u00edtulo malicioso, pero en este punto el c\u00f3digo ya se ha ejecutado y el atacante podr\u00eda utilizar este c\u00f3digo tambi\u00e9n para ocultar el ataque, por ejemplo, redirigiendo a la v\u00edctima nuevamente a la misma p\u00e1gina con Un t\u00edtulo inocente. Por lo tanto, parece plausible que este ataque pueda funcionar si el atacante puede colocar un bot\u00f3n falso de \"crear p\u00e1gina\" en una p\u00e1gina que sea posible con derecho de edici\u00f3n. Esto se ha parcheado en `org.xwiki.platform:xwiki-platform-web` versi\u00f3n 14.10.12 y `org.xwiki.platform:xwiki-platform-web-templates` versiones 14.10.12 y 15.5-rc-1 mostrando el t\u00edtulo ya en el primer paso para que la v\u00edctima pueda notar el ataque antes de continuar. Es posible parchear manualmente los archivos modificados desde el parche en una instalaci\u00f3n existente. Para el cambio de JavaScript, el archivo JavaScript minimizado deber\u00e1 obtenerse de una compilaci\u00f3n de XWiki y reemplazarse en consecuencia."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.3", "versionEndExcluding": "14.10.12", "matchCriteriaId": "F42D13DD-5877-438F-9976-AC8DC0EA5ADA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "15.0", "versionEndExcluding": "15.5", "matchCriteriaId": "CC654D33-71EE-4374-84CD-B964D1D135BA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:7.2:milestone2:*:*:*:*:*:*", "matchCriteriaId": "C2A06C6F-1DBA-4E6D-901A-096F16C08D49"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:7.2:milestone3:*:*:*:*:*:*", "matchCriteriaId": "470D146C-5EBF-4399-BF0C-26D9CC48DE0F"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/199e27ce7016757e66fa7cea99e718044a1b639b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-ghf6-2f42-mjh9", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20869", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/199e27ce7016757e66fa7cea99e718044a1b639b"}}